void flexbuffers::Builder::~Builder(flexbuffers::Builder *this)
{
  void *v2;
  _QWORD *v3;

  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void flatbuffers::ParserState::~ParserState(void **this)
{
  void **v2;

  v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1826EC0F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

flatbuffers::IDLOptions *flatbuffers::IDLOptions::IDLOptions(flatbuffers::IDLOptions *this, const flatbuffers::IDLOptions *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int16 v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  __int128 v21;

  v4 = *(_OWORD *)a2;
  *(_OWORD *)((char *)this + 10) = *(_OWORD *)((char *)a2 + 10);
  *(_OWORD *)this = v4;
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v7;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *((_OWORD *)this + 7) = v8;
  }
  v9 = *((_WORD *)a2 + 68);
  *((_BYTE *)this + 138) = *((_BYTE *)a2 + 138);
  *((_WORD *)this + 68) = v9;
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *((_OWORD *)this + 9) = v10;
  }
  v11 = *((_DWORD *)a2 + 42);
  *((_BYTE *)this + 172) = *((_BYTE *)a2 + 172);
  *((_DWORD *)this + 42) = v11;
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 176), *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *((_OWORD *)this + 11) = v12;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 200);
    *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v13;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), *((const std::string::value_type **)a2 + 29), *((_QWORD *)a2 + 30));
  }
  else
  {
    v14 = *(_OWORD *)((char *)a2 + 232);
    *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
    *(_OWORD *)((char *)this + 232) = v14;
  }
  v15 = *((_WORD *)a2 + 128);
  *((_BYTE *)this + 258) = *((_BYTE *)a2 + 258);
  *((_WORD *)this + 128) = v15;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 11, *((__int128 **)a2 + 33), *((__int128 **)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 3));
  if (*((char *)a2 + 311) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 12, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v16 = *((_OWORD *)a2 + 18);
    *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
    *((_OWORD *)this + 18) = v16;
  }
  if (*((char *)a2 + 335) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 13, *((const std::string::value_type **)a2 + 39), *((_QWORD *)a2 + 40));
  }
  else
  {
    v17 = *(_OWORD *)((char *)a2 + 312);
    *((_QWORD *)this + 41) = *((_QWORD *)a2 + 41);
    *(_OWORD *)((char *)this + 312) = v17;
  }
  if (*((char *)a2 + 359) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 14, *((const std::string::value_type **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v18 = *((_OWORD *)a2 + 21);
    *((_QWORD *)this + 44) = *((_QWORD *)a2 + 44);
    *((_OWORD *)this + 21) = v18;
  }
  v19 = (std::string *)((char *)this + 360);
  if (*((char *)a2 + 383) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)a2 + 45), *((_QWORD *)a2 + 46));
  }
  else
  {
    v20 = *(_OWORD *)((char *)a2 + 360);
    *((_QWORD *)this + 47) = *((_QWORD *)a2 + 47);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  v21 = *((_OWORD *)a2 + 24);
  *((_WORD *)this + 200) = *((_WORD *)a2 + 200);
  *((_OWORD *)this + 24) = v21;
  return this;
}

void sub_1826EC434(_Unwind_Exception *a1, uint64_t a2, void **a3, void **a4, void **a5, void **a6, ...)
{
  char *v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  va_list va;

  va_start(va, a6);
  if (v6[359] < 0)
    operator delete(*v9);
  if (v6[335] < 0)
    operator delete(*v8);
  if (v6[311] < 0)
    operator delete(*v7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v6[255] < 0)
    operator delete(*v13);
  if (v6[223] < 0)
    operator delete(*v12);
  if (v6[199] < 0)
    operator delete(*v11);
  if (v6[167] < 0)
    operator delete(*v10);
  if (v6[135] < 0)
    operator delete(*a3);
  if (v6[111] < 0)
    operator delete(*a4);
  if (v6[79] < 0)
    operator delete(*a5);
  if (v6[55] < 0)
    operator delete(*a6);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1826EC5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1826EC690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_BYTE *)v7 + 56) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t flatbuffers::SymbolTable<flatbuffers::ServiceDef>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::RPCCall>::~SymbolTable(v4 + 152);
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x186DABFBC](v4, 0x10B2C401A85D49FLL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::RPCCall>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x186DABFBC](v4, 0x10B2C40EE200C30);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 55) < 0)
          operator delete(*(void **)(v4 + 32));
        MEMORY[0x186DABFBC](v4, 0x1032C40E9BF265ALL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::EnumDef>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::EnumVal>::~SymbolTable(v4 + 184);
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x186DABFBC](v4, 0x10B2C409EE52067);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::EnumVal>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 88);
        v6 = (void **)(v4 + 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x186DABFBC](v4, 0x10B2C4072A4B994);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::StructDef>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v7;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        v5 = *(_QWORD *)(v4 + 224);
        *(_QWORD *)(v4 + 224) = 0;
        if (v5)
          std::default_delete<std::string>::operator()[abi:ne180100](v4 + 224, v5);
        flatbuffers::SymbolTable<flatbuffers::FieldDef>::~SymbolTable(v4 + 152);
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        v7 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x186DABFBC](v4, 0x10B2C4058EA06FBLL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void std::default_delete<std::string>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x186DABFBCLL);
  }
}

uint64_t flatbuffers::SymbolTable<flatbuffers::FieldDef>::~SymbolTable(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void **v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        if (*(char *)(v4 + 207) < 0)
          operator delete(*(void **)(v4 + 184));
        flatbuffers::SymbolTable<flatbuffers::Value>::~SymbolTable(v4 + 72);
        v6 = (void **)(v4 + 48);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
        if (*(char *)(v4 + 47) < 0)
          operator delete(*(void **)(v4 + 24));
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        MEMORY[0x186DABFBC](v4, 0x10B2C40559199D4);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t flatbuffers::SymbolTable<flatbuffers::Type>::~SymbolTable(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v3 = *(_QWORD **)(a1 + 24);
  v2 = *(_QWORD **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        MEMORY[0x186DABFBC](*v3, 0x1020C4001A1C0B8);
        v2 = *(_QWORD **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(_QWORD **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void flatbuffers::IDLOptions::~IDLOptions(void **this)
{
  void **v2;

  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  v2 = this + 33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

void flatbuffers::Parser::~Parser(flatbuffers::Parser *this)
{
  void ***v2;
  void ***v3;
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  v3 = (void ***)*((_QWORD *)this + 34);
  v2 = (void ***)*((_QWORD *)this + 35);
  while (v3 != v2)
  {
    v4 = *v3;
    if (*v3)
    {
      v8 = *v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
      MEMORY[0x186DABFBC](v4, 0x1020C4016EE4530);
      v2 = (void ***)*((_QWORD *)this + 35);
    }
    ++v3;
  }
  v8 = (void **)((char *)this + 1176);
  std::vector<std::pair<flatbuffers::Value,flatbuffers::FieldDef *>>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 1175) < 0)
    operator delete(*((void **)this + 144));
  flatbuffers::IDLOptions::~IDLOptions((void **)this + 91);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)this + 704, *((char **)this + 89));
  v8 = (void **)((char *)this + 680);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((uint64_t)this + 656, *((_QWORD **)this + 83));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 632, *((_QWORD **)this + 80));
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 528, *((_QWORD **)this + 67));
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)this + 496, *((_QWORD **)this + 63));
  v5 = (void *)*((_QWORD *)this + 57);
  if (v5)
  {
    *((_QWORD *)this + 58) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 54);
  if (v6)
  {
    *((_QWORD *)this + 55) = v6;
    operator delete(v6);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::Parser *)((char *)this + 336));
  if (*((char *)this + 335) < 0)
    operator delete(*((void **)this + 39));
  v7 = (void *)*((_QWORD *)this + 34);
  if (v7)
  {
    *((_QWORD *)this + 35) = v7;
    operator delete(v7);
  }
  flatbuffers::SymbolTable<flatbuffers::ServiceDef>::~SymbolTable((uint64_t)this + 224);
  flatbuffers::SymbolTable<flatbuffers::EnumDef>::~SymbolTable((uint64_t)this + 176);
  flatbuffers::SymbolTable<flatbuffers::StructDef>::~SymbolTable((uint64_t)this + 128);
  flatbuffers::SymbolTable<flatbuffers::Type>::~SymbolTable((uint64_t)this + 80);
  v8 = (void **)((char *)this + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E0FDDE78, MEMORY[0x1E0DE42E0]);
}

void sub_1826ED480(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void MTLProgramObject::MTLProgramObject(MTLProgramObject *this)
{
  uint64_t i;
  char *v3;

  for (i = 0; i != 320; i += 80)
  {
    v3 = (char *)this + i;
    *((_DWORD *)v3 + 8) = 0;
    *(_OWORD *)v3 = 0uLL;
    *((_OWORD *)v3 + 1) = 0uLL;
    *(_OWORD *)(v3 + 40) = 0uLL;
    *(_OWORD *)(v3 + 56) = 0uLL;
    *((_QWORD *)v3 + 9) = 0;
  }
  *((_DWORD *)this + 84) = 0;
  *((_DWORD *)this + 94) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = this;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 55) = dispatch_queue_create("programObject Queue", 0);
  *((_QWORD *)this + 54) = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3748]), "initWithKeyOptions:valueOptions:capacity:", 0, 0, 1);
}

void sub_1826ED558(_Unwind_Exception *a1)
{
  uint64_t v1;

  VariantList<4u>::~VariantList(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF428;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF428;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
}

MTLPipelineCollection *std::unique_ptr<MTLPipelineCollection>::reset[abi:ne180100](MTLPipelineCollection **a1, MTLPipelineCollection *a2)
{
  MTLPipelineCollection *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MTLPipelineCollection::~MTLPipelineCollection(result);
    JUMPOUT(0x186DABFBCLL);
  }
  return result;
}

MTLMetalScriptBuilder *std::unique_ptr<MTLMetalScriptBuilder>::reset[abi:ne180100](MTLMetalScriptBuilder **a1, MTLMetalScriptBuilder *a2)
{
  MTLMetalScriptBuilder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MTLMetalScriptBuilder::~MTLMetalScriptBuilder(result);
    JUMPOUT(0x186DABFBCLL);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<unsigned long long,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826ED838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      MTLHashKey::~MTLHashKey((MTLHashKey *)(v2 + 16));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unint64_t *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::lower_bound[abi:ne180100]<MTLUINT256_t>(uint64_t a1, unint64_t *a2)
{
  unint64_t *result;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  unint64_t *v9;

  v4 = *(unint64_t **)(a1 + 8);
  result = (unint64_t *)(a1 + 8);
  v3 = v4;
  if (v4)
  {
    do
    {
      v5 = bswap64(v3[4]);
      v6 = bswap64(*a2);
      if (v5 == v6
        && (v5 = bswap64(v3[5]), v6 = bswap64(a2[1]), v5 == v6)
        && (v5 = bswap64(v3[6]), v6 = bswap64(a2[2]), v5 == v6)
        && (v5 = bswap64(v3[7]), v6 = bswap64(a2[3]), v5 == v6))
      {
        v7 = 0;
      }
      else if (v5 < v6)
      {
        v7 = -1;
      }
      else
      {
        v7 = 1;
      }
      v8 = v7 <= 0;
      if (v7 <= 0)
        v9 = v3;
      else
        v9 = v3 + 1;
      if (v8)
        result = v3;
      v3 = (unint64_t *)*v9;
    }
    while (*v9);
  }
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*> const&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v6;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_48:
    *v23 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826EDF1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v6;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_48:
    *v23 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826EE154(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1826EE3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto13MTLLibrarySPI}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto13MTLLibrarySPI}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto13MTLLibrarySPI}*>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1826EE488(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<functionIdExtended>::__init_with_size[abi:ne180100]<functionIdExtended*,functionIdExtended*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1826EE500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<MTLUINT256_t,MTLAirEntry *,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,MTLAirEntry *>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,MTLAirEntry *> const&>(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_1826EE578(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,MTLAirEntry *> const&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v6;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_48:
    *v23 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826EE7B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<machOEntry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<machOEntry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>,std::reverse_iterator<machOEntry*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 72);
      v9 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_OWORD *)(v7 - 72) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<machOEntry>,std::reverse_iterator<machOEntry*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 48);
    if (v3)
    {
      *(_QWORD *)(v1 + 56) = v3;
      operator delete(v3);
    }
    v1 += 72;
  }
}

uint64_t std::__split_buffer<machOEntry>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<machOEntry>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<machOEntry>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 72;
    v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::find<MTLUINT256_t>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2] && result[5] == a2[3])
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826EED38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<MTLHashKey>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

_QWORD *std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1826EEDBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<MTLHashKey *,MTLHashKey *,MTLHashKey *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    *(_BYTE *)(v8 + 16) = *(_BYTE *)(a2 + v7 + 16);
    *(_OWORD *)v8 = *(_OWORD *)(a2 + v7);
    v9 = *(_OWORD *)(a2 + v7 + 24);
    *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + v7 + 40);
    *(_OWORD *)(v8 + 24) = v9;
    if (a2 != a4)
      std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)(v8 + 56), *(char **)(a2 + v7 + 56), *(_QWORD *)(a2 + v7 + 64), (uint64_t)(*(_QWORD *)(a2 + v7 + 64) - *(_QWORD *)(a2 + v7 + 56)) >> 5);
    v7 += 80;
  }
  while (a2 + v7 != v6);
  return v6;
}

void std::__shared_ptr_emplace<std::vector<machOEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<machOEntry>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF460;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

void std::__shared_ptr_emplace<std::vector<machOEntry>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<machOEntry>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<machOEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<machOEntry>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<machOEntry>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_1826EF1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1826EF270(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__emplace_multi<std::string&,std::string_view&>(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *v5;

  std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__construct_node<std::string&,std::string_view&>((uint64_t)a1, a2, a3, (uint64_t)&v5);
  return std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi(a1, v5);
}

void sub_1826EF2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__construct_node<std::string&,std::string_view&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  unint64_t result;

  v8 = a1 + 16;
  v9 = (char *)operator new(0x38uLL);
  v10 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)a4 = v9;
  *(_BYTE *)(a4 + 16) = 0;
  v11 = v9 + 16;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v9 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v11 = *(_OWORD *)a2;
    *((_QWORD *)v9 + 4) = *(_QWORD *)(a2 + 16);
  }
  *(_OWORD *)(v10 + 40) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v11);
  *((_QWORD *)v10 + 1) = result;
  return result;
}

void sub_1826EF398(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unsigned __int8 *inserted;

  v4 = (unsigned __int8 *)(a2 + 2);
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)(a2 + 2));
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  float v7;
  unint64_t v8;
  float v9;
  _BOOL8 v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;

  v6 = a1 + 32;
  v7 = *(float *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    v10 = 1;
    if (v8 >= 3)
      v10 = (v8 & (v8 - 1)) != 0;
    v11 = v10 | (2 * v8);
    v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__rehash<false>(a1, v13);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = a2;
    if (v8 <= a2)
      v16 = a2 % v8;
  }
  else
  {
    v16 = (v8 - 1) & a2;
  }
  v17 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v16);
  if (v17)
  {
    v18 = *(unsigned __int8 **)v17;
    if (*(_QWORD *)v17)
    {
      v19 = 0;
      do
      {
        v20 = *((_QWORD *)v18 + 1);
        if (v15 > 1)
        {
          v21 = *((_QWORD *)v18 + 1);
          if (v20 >= v8)
            v21 = v20 % v8;
        }
        else
        {
          v21 = v20 & (v8 - 1);
        }
        if (v21 != v16)
          break;
        v22 = v20 == a2
            ? std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v6, v18 + 16, a3): 0;
        if ((v19 & (v22 ^ 1) & 1) != 0)
          break;
        v19 |= v22;
        v17 = *(unsigned __int8 **)v17;
        v18 = *(unsigned __int8 **)v17;
      }
      while (*(_QWORD *)v17);
    }
  }
  return v17;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v12, v11 + 16, a2) & 1) != 0)return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__equal_range_multi<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;

  v4 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = (uint64_t)(a1 + 4);
    v7 = v4;
    do
      v7 = *(unsigned __int8 **)v7;
    while (v7
         && (std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(v6, v7 + 16, a2) & 1) != 0);
  }
  return v5;
}

_QWORD *std::vector<MTLHashKey>::__init_with_size[abi:ne180100]<MTLHashKey*,MTLHashKey*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<MTLHashKey>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLHashKey>,MTLHashKey*,MTLHashKey*,MTLHashKey*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1826EFAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<MTLHashKey>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLHashKey>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLHashKey>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MTLHashKey>,MTLHashKey*,MTLHashKey*,MTLHashKey*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      MTLHashKey::MTLHashKey((MTLHashKey *)(a4 + v7), (const MTLHashKey *)(a2 + v7));
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1826EFBF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 80;
    do
    {
      MTLHashKey::~MTLHashKey((MTLHashKey *)(v4 + v2));
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  MTLHashKey *v2;
  MTLHashKey *v4;
  void *v5;

  v1 = *a1;
  v2 = (MTLHashKey *)**a1;
  if (v2)
  {
    v4 = (MTLHashKey *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        MTLHashKey::~MTLHashKey(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLLoaderMachOPayload>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a2);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<MTLHashKey,std::pair<MTLHashKey const,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(uint64_t a1, MTLHashKey *this, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v24[3];

  v7 = MTLHashKey::hash(this);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (MTLHashKey::operator==(v13 + 2, this))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__construct_node_hash<std::pair<MTLHashKey const,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v13 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v24, 0);
  return v13;
}

void sub_1826EFF20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

__n128 std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__construct_node_hash<std::pair<MTLHashKey const,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  __n128 result;
  __int128 v10;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x80uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  MTLHashKey::MTLHashKey((MTLHashKey *)(v8 + 16), (const MTLHashKey *)a3);
  result = *(__n128 *)(a3 + 80);
  v10 = *(_OWORD *)(a3 + 96);
  *((__n128 *)v8 + 6) = result;
  *((_OWORD *)v8 + 7) = v10;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1826EFFA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
      MTLHashKey::~MTLHashKey((MTLHashKey *)(v2 + 16));
    operator delete((void *)v2);
  }
}

uint64_t std::vector<MTLHashKey>::__push_back_slow_path<MTLHashKey const&>(uint64_t *a1, const MTLHashKey *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  MTLHashKey *v14;
  MTLHashKey *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLHashKey>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (MTLHashKey *)&v10[80 * v4];
  v16 = &v10[80 * v9];
  MTLHashKey::MTLHashKey(v14, a2);
  v15 = v14 + 1;
  std::vector<MTLHashKey>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<MTLHashKey>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1826F00F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<MTLHashKey>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLHashKey>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLHashKey>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLHashKey>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>,std::reverse_iterator<MTLHashKey*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  MTLHashKey *v12;

  v10 = 0;
  v11 = a7 - 80;
  while (a3 + v10 != a5)
  {
    v12 = (MTLHashKey *)(v11 + v10);
    v10 -= 80;
    MTLHashKey::MTLHashKey(v12, (const MTLHashKey *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<MTLHashKey>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    MTLHashKey::~MTLHashKey((MTLHashKey *)(i - 80));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long const,std::vector<MTLHashKey>>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == v6)
          {
            if (*((_QWORD *)v10 + 2) == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = *(_QWORD *)a3;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v10 = *v20;
LABEL_38:
    *v20 = v10;
    goto LABEL_39;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v19 + 8 * v3) = v12;
  if (*(_QWORD *)v10)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1826F0494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 3;
    std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826F0700(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1] && v11[4] == a2[2] && v11[5] == a2[3])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x50uLL);
  *v11 = 0;
  v11[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)v11 + 1) = **a4;
  *((_OWORD *)v11 + 2) = v16;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v11 = *v24;
LABEL_48:
    *v24 = v11;
    goto LABEL_49;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v25 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1826F093C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t const,std::pair<unsigned int,unsigned long long>>>(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = (void **)std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__find_equal<MTLUINT256_t>((uint64_t)a1, &v10, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x50uLL);
    v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    *((_OWORD *)v6 + 4) = a3[2];
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__find_equal<MTLUINT256_t>(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    do
    {
      while (1)
      {
        v6 = v4;
        v7 = bswap64(*a3);
        v8 = bswap64(v6[4]);
        if (v7 != v8)
          goto LABEL_7;
        v7 = bswap64(a3[1]);
        v8 = bswap64(v6[5]);
        if (v7 == v8
          && (v7 = bswap64(a3[2]), v8 = bswap64(v6[6]), v7 == v8)
          && (v7 = bswap64(a3[3]), v8 = bswap64(v6[7]), v7 == v8))
        {
          v9 = 0;
        }
        else
        {
LABEL_7:
          v9 = v7 < v8 ? -1 : 1;
        }
        if (v9 < 1)
          break;
        v4 = (_QWORD *)*v6;
        result = v6;
        if (!*v6)
          goto LABEL_25;
      }
      v10 = bswap64(v6[4]);
      v11 = bswap64(*a3);
      if (v10 == v11
        && (v10 = bswap64(v6[5]), v11 = bswap64(a3[1]), v10 == v11)
        && (v10 = bswap64(v6[6]), v11 = bswap64(a3[2]), v10 == v11)
        && (v10 = bswap64(v6[7]), v11 = bswap64(a3[3]), v10 == v11))
      {
        v12 = 0;
      }
      else if (v10 < v11)
      {
        v12 = -1;
      }
      else
      {
        v12 = 1;
      }
      if (v12 < 1)
        break;
      result = v6 + 1;
      v4 = (_QWORD *)v6[1];
    }
    while (v4);
  }
  else
  {
    v6 = result;
  }
LABEL_25:
  *a2 = v6;
  return result;
}

uint64_t ___ZNK21MTLPipelineCollection14visitLibrariesIZ61___MTLBinaryArchive_enumerateArchivesFromPipelineCollection__E3__5EEvOT__block_invoke(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_QWORD **)(v1 + 32);
  v3 = (_QWORD *)(v1 + 40);
  if (v2 != (_QWORD *)(v1 + 40))
  {
    v4 = result;
    do
    {
      v5 = *(_QWORD *)(v4 + 40);
      result = MTLHashKey::hash((MTLHashKey *)v2[8]);
      if (!(v2[4] | v2[5] | v2[6] | v2[7]))
        goto LABEL_7;
      if (result)
        _MTLNSDataToDispatchData((void *)result, 0);
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v5 + 8) + 16))();
      if ((result & 1) == 0)
LABEL_7:
        **(_BYTE **)v5 = 0;
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::find<MTLHashKey>(_QWORD *a1, MTLHashKey *this)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = MTLHashKey::hash(this);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        if (MTLHashKey::operator==(v11 + 2, this))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::vector<MTLHashKey>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 24);
      std::vector<MTLHashKey>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::pair<MTLUINT256_t,MTLAirEntry *>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v6;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v15;
  i[6] = *(_QWORD *)(a3 + 32);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_48:
    *v23 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826F10E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLProgramObject *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826F131C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<objc_object  {objcproto11MTLFunction}*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1826F1388(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,MTLAirEntry *>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1826F15C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>>>::__emplace_unique_key_args<MTLHashKey,std::piecewise_construct_t const&,std::tuple<MTLHashKey const&>,std::tuple<>>(uint64_t a1, MTLHashKey *this, uint64_t a3, const MTLHashKey **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v25[3];

  v8 = MTLHashKey::hash(this);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (MTLHashKey::operator==(v14 + 2, this))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<MTLHashKey const&>,std::tuple<>>(a1, v9, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v14 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v25, 0);
  return v14;
}

void sub_1826F1848(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

MTLHashKey *std::__hash_table<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,MTLOpaqueGPUArchiverUnitId *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<MTLHashKey const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const MTLHashKey **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  MTLHashKey *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = MTLHashKey::MTLHashKey((MTLHashKey *)(v8 + 16), *a3);
  *((_QWORD *)v8 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1826F18C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_4_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

int *OUTLINED_FUNCTION_6()
{
  return __error();
}

void MTLIOAccelPooledResourceRelease(os_unfair_lock_s *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  os_unfair_lock_s *v10;

  v1 = a1;
  v2 = a1 + 76;
  v3 = *(os_unfair_lock_s **)&a1[76]._os_unfair_lock_opaque;
  if (v3)
  {
    v4 = v3 + 2;
    *(_QWORD *)&v2->_os_unfair_lock_opaque = 0;
    v5 = v3 + 10;
    v10 = v3;
    os_unfair_lock_lock(v3 + 10);
    if (v2[8]._os_unfair_lock_opaque == v10[22]._os_unfair_lock_opaque)
    {
      v7 = *(os_unfair_lock_s **)&v4[4]._os_unfair_lock_opaque;
      v6 = v4 + 4;
      *(_QWORD *)&v1[78]._os_unfair_lock_opaque = v7;
      v8 = v7 + 80;
      if (v7)
        v9 = v8;
      else
        v9 = v6 + 2;
      *(_QWORD *)&v9->_os_unfair_lock_opaque = v1 + 78;
      *(_QWORD *)&v6->_os_unfair_lock_opaque = v1;
      *(_QWORD *)&v1[80]._os_unfair_lock_opaque = v6;
      ++v6[5]._os_unfair_lock_opaque;
      *(_QWORD *)&v2[6]._os_unfair_lock_opaque = mach_absolute_time();
    }
    else
    {

    }
    os_unfair_lock_unlock(v5);
    a1 = v10;
  }

}

void std::vector<MTLRasterizationRateLayerDescriptor *>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<MTLRasterizationRateLayerDescriptor *>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<MTLRasterizationRateLayerDescriptor *>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *((_QWORD *)v18 - 1) = v25;
        v18 -= 8;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t MTLFeatureSetSupportsSamplingFromPixelFormat(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  MTLGPUFamily v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v10;
  uint64_t v11;
  id v12[2];
  void *__p;
  void *v14;

  if (a1 >= 0x13)
  {
    if (a3)
    {
      v7 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Unrecognized Metal Feature Set for this platform"), *MEMORY[0x1E0CB2D50]);
      v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v7);
      v5 = 0;
      *a3 = v8;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v4 = MTLGetGPUFamilyFromFeatureSet(qword_18280A9C0[a1]);
    MTLPixelFormatQuery::MTLPixelFormatQuery((MTLPixelFormatQuery *)v12, v4);
    v11 = 0;
    memset(&v10, 0, 48);
    MTLPixelFormatGetInfoForFeatureSetQuery(v12, a2, &v10);
    v5 = v10.i8[8] & 1;
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  return v5;
}

void sub_1826F3990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLGPUFamilySupportsSamplingFromPixelFormat(MTLGPUFamily a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  id v11[2];
  void *__p;
  void *v13;

  if (a1 > 2000)
  {
    if ((unint64_t)(a1 - 3001) >= 3 && (unint64_t)(a1 - 2001) >= 2 && (unint64_t)(a1 - 4001) >= 2)
      goto LABEL_11;
  }
  else if ((unint64_t)(a1 - 1001) >= 9 && a1 != -1009)
  {
LABEL_11:
    if (!a3)
      return 0;
    v7 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Unrecognized Metal GPU Family"), *MEMORY[0x1E0CB2D50]);
    v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v7);
    v5 = 0;
    *a3 = v8;
    return v5;
  }
  MTLPixelFormatQuery::MTLPixelFormatQuery((MTLPixelFormatQuery *)v11, a1);
  v10 = 0;
  memset(&v9, 0, 48);
  MTLPixelFormatGetInfoForFeatureSetQuery(v11, a2, &v9);
  v5 = v9.i8[8] & 1;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_1826F3AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLPixelFormatGetName(uint64_t a1)
{
  _OWORD v2[3];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v2);
  return *(_QWORD *)&v2[0];
}

uint64_t MTLPixelFormatCompatibilityString(uint64_t a1)
{
  id v1;
  void *v2;
  int v3;
  _OWORD v5[3];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  MTLPixelFormatGetInfoForDevice(0, a1, (uint64_t)v5);
  v1 = (id)objc_opt_new();
  v2 = v1;
  v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x10000) != 0)
  {
    objc_msgSend(v1, "addObject:", CFSTR("float"));
    v3 = DWORD2(v5[0]);
    if ((DWORD2(v5[0]) & 0x20000) == 0)
    {
LABEL_3:
      if ((v3 & 0x40000) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((DWORD2(v5[0]) & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v2, "addObject:", CFSTR("half"));
  v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x40000) == 0)
  {
LABEL_4:
    if ((v3 & 0x80000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  objc_msgSend(v2, "addObject:", CFSTR("int"));
  v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x80000) == 0)
  {
LABEL_5:
    if ((v3 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  objc_msgSend(v2, "addObject:", CFSTR("uint"));
  v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x100000) == 0)
  {
LABEL_6:
    if ((v3 & 0x200000) == 0)
      goto LABEL_7;
LABEL_15:
    objc_msgSend(v2, "addObject:", CFSTR("ushort"));
    if ((DWORD2(v5[0]) & 0x20000000) == 0)
      return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v2);
    goto LABEL_8;
  }
LABEL_14:
  objc_msgSend(v2, "addObject:", CFSTR("short"));
  v3 = DWORD2(v5[0]);
  if ((DWORD2(v5[0]) & 0x200000) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v3 & 0x20000000) != 0)
LABEL_8:
    objc_msgSend(v2, "addObject:", CFSTR("ulong"));
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@"), v2);
}

uint64_t MTLPixelFormatComputeiOSTotalSizeUsed(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v8;
  __int128 v9;
  uint64_t *v10;
  _OWORD v12[3];
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;

  if (!a3)
    return 0;
  v5 = a3;
  v8 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  do
  {
    v9 = *(_OWORD *)(a1 + 16);
    v12[0] = *(_OWORD *)a1;
    v12[1] = v9;
    v12[2] = *(_OWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 48);
    if ((WORD4(v12[0]) & 0x401) == 1)
    {
      adjustPixelFormatForiOSDevice(*a2, (uint64_t)v12, &v16, &v15, &v14, 1, 1);
      if (a4)
        v10 = (uint64_t *)&v16;
      else
        v10 = &v15;
      v8 = ((v14 + v8 - 1) & -(uint64_t)v14) + *v10;
    }
    ++a2;
    a1 += 56;
    --v5;
  }
  while (v5);
  return v8;
}

BOOL MTLReadWriteTextureIsSupported(void *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  __int128 v9;
  void *__p[2];
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)&v9 = a1;
  *((_QWORD *)&v9 + 1) = -1;
  __p[1] = 0;
  *(_QWORD *)&v11 = 0;
  __p[0] = 0;
  v4 = MTLPixelFormatQuery::supportsFamily((id *)&v9, MTLGPUFamilyApple3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4)
  {
    v12 = 0;
    *(_OWORD *)__p = 0u;
    v11 = 0u;
    v9 = 0u;
    MTLPixelFormatGetInfoForDevice(a1, a2, (uint64_t)&v9);
    return (DWORD2(v9) >> 1) & 1;
  }
  v6 = objc_msgSend(a1, "readWriteTextureSupport");
  v7 = a2 - 10;
  if ((unint64_t)(a2 - 10) <= 0x3C)
  {
    if (((1 << v7) & 0x100000000000E019) != 0)
      return v6 > 1;
    if (((1 << v7) & 0x380000000000) != 0)
      return v6 != 0;
  }
  v5 = 0;
  if ((unint64_t)(a2 - 73) <= 0x34 && ((1 << (a2 - 73)) & 0x1C070000000003) != 0)
    return v6 > 1;
  return v5;
}

void sub_1826F3E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLPixelFormatQuery::MTLPixelFormatQuery(MTLPixelFormatQuery *this, MTLGPUFamily a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  MTLPixelFormatQuery::initGPUFamiliesCache(this);
}

void sub_1826F3E94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void MTLPixelFormatQuery::initGPUFamiliesCache(MTLPixelFormatQuery *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void **v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  void **v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  void **v113;
  char *v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  void **v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  char *v166;
  char **v167;
  void **v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;

  v2 = *((_QWORD *)this + 1);
  if (v2 > 2000)
  {
    if (v2 == 2001)
    {
      v18 = (char *)*((_QWORD *)this + 3);
    }
    else
    {
      if (v2 != 2002)
        return;
      v4 = (char *)*((_QWORD *)this + 4);
      v5 = (void **)((char *)this + 16);
      v6 = (char *)*((_QWORD *)this + 3);
      if (v6 >= v4)
      {
        v19 = (char *)*v5;
        v20 = (v6 - (_BYTE *)*v5) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          goto LABEL_314;
        v22 = v4 - v19;
        if (v22 >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v23);
          v19 = (char *)*((_QWORD *)this + 2);
          v6 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v24 = 0;
        }
        v31 = &v24[8 * v20];
        v4 = &v24[8 * v23];
        *(_QWORD *)v31 = 2002;
        v7 = v31 + 8;
        while (v6 != v19)
        {
          v32 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v31 - 1) = v32;
          v31 -= 8;
        }
        *((_QWORD *)this + 2) = v31;
        *((_QWORD *)this + 3) = v7;
        *((_QWORD *)this + 4) = v4;
        if (v19)
        {
          operator delete(v19);
          v4 = (char *)*((_QWORD *)this + 4);
        }
      }
      else
      {
        *(_QWORD *)v6 = 2002;
        v7 = v6 + 8;
      }
      *((_QWORD *)this + 3) = v7;
      if (v7 >= v4)
      {
        v33 = (char *)*v5;
        v34 = (v7 - (_BYTE *)*v5) >> 3;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61)
          goto LABEL_314;
        v36 = v4 - v33;
        if (v36 >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v37);
          v33 = (char *)*((_QWORD *)this + 2);
          v7 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v38 = 0;
        }
        v163 = &v38[8 * v34];
        v164 = &v38[8 * v37];
        *(_QWORD *)v163 = 3003;
        v18 = v163 + 8;
        while (v7 != v33)
        {
          v165 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v163 - 1) = v165;
          v163 -= 8;
        }
        *((_QWORD *)this + 2) = v163;
        *((_QWORD *)this + 3) = v18;
        *((_QWORD *)this + 4) = v164;
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_QWORD *)v7 = 3003;
        v18 = v7 + 8;
      }
      *((_QWORD *)this + 3) = v18;
    }
    v167 = (char **)((char *)this + 32);
    v166 = (char *)*((_QWORD *)this + 4);
    v168 = (void **)((char *)this + 16);
    if (v18 >= v166)
    {
      v170 = (char *)*v168;
      v171 = (v18 - (_BYTE *)*v168) >> 3;
      v172 = v171 + 1;
      if ((unint64_t)(v171 + 1) >> 61)
        goto LABEL_314;
      v173 = v166 - v170;
      if (v173 >> 2 > v172)
        v172 = v173 >> 2;
      if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFF8)
        v174 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v174 = v172;
      if (v174)
      {
        v175 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v174);
        v170 = (char *)*((_QWORD *)this + 2);
        v18 = (char *)*((_QWORD *)this + 3);
      }
      else
      {
        v175 = 0;
      }
      v176 = &v175[8 * v171];
      v166 = &v175[8 * v174];
      *(_QWORD *)v176 = 2001;
      v169 = v176 + 8;
      while (v18 != v170)
      {
        v177 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v176 - 1) = v177;
        v176 -= 8;
      }
      *((_QWORD *)this + 2) = v176;
      *((_QWORD *)this + 3) = v169;
      *((_QWORD *)this + 4) = v166;
      if (v170)
      {
        operator delete(v170);
        v166 = *v167;
      }
    }
    else
    {
      *(_QWORD *)v18 = 2001;
      v169 = v18 + 8;
    }
    *((_QWORD *)this + 3) = v169;
    if (v169 >= v166)
    {
      v179 = (char *)*v168;
      v180 = (v169 - (_BYTE *)*v168) >> 3;
      v181 = v180 + 1;
      if ((unint64_t)(v180 + 1) >> 61)
        goto LABEL_314;
      v182 = v166 - v179;
      if (v182 >> 2 > v181)
        v181 = v182 >> 2;
      if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFF8)
        v183 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v183 = v181;
      if (v183)
      {
        v184 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v183);
        v179 = (char *)*((_QWORD *)this + 2);
        v169 = (char *)*((_QWORD *)this + 3);
      }
      else
      {
        v184 = 0;
      }
      v185 = &v184[8 * v180];
      v166 = &v184[8 * v183];
      *(_QWORD *)v185 = 3001;
      v178 = v185 + 8;
      while (v169 != v179)
      {
        v186 = *((_QWORD *)v169 - 1);
        v169 -= 8;
        *((_QWORD *)v185 - 1) = v186;
        v185 -= 8;
      }
      *((_QWORD *)this + 2) = v185;
      *((_QWORD *)this + 3) = v178;
      *((_QWORD *)this + 4) = v166;
      if (v179)
      {
        operator delete(v179);
        v166 = *v167;
      }
    }
    else
    {
      *(_QWORD *)v169 = 3001;
      v178 = v169 + 8;
    }
    *((_QWORD *)this + 3) = v178;
    if (v178 < v166)
    {
      *(_QWORD *)v178 = 3002;
      v153 = v178 + 8;
      goto LABEL_312;
    }
    v154 = (char *)*v168;
    v187 = (v178 - (_BYTE *)*v168) >> 3;
    v188 = v187 + 1;
    if (!((unint64_t)(v187 + 1) >> 61))
    {
      v189 = v166 - v154;
      if (v189 >> 2 > v188)
        v188 = v189 >> 2;
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFF8)
        v190 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v190 = v188;
      if (v190)
      {
        v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v190);
        v154 = (char *)*((_QWORD *)this + 2);
        v178 = (char *)*((_QWORD *)this + 3);
      }
      else
      {
        v191 = 0;
      }
      v160 = &v191[8 * v187];
      v161 = &v191[8 * v190];
      *(_QWORD *)v160 = 3002;
      v153 = v160 + 8;
      while (v178 != v154)
      {
        v192 = *((_QWORD *)v178 - 1);
        v178 -= 8;
        *((_QWORD *)v160 - 1) = v192;
        v160 -= 8;
      }
      goto LABEL_310;
    }
LABEL_314:
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  }
  switch(v2)
  {
    case 1001:
      v3 = (char *)*((_QWORD *)this + 3);
      goto LABEL_227;
    case 1002:
      v11 = (char *)*((_QWORD *)this + 3);
      goto LABEL_210;
    case 1003:
      v12 = (char *)*((_QWORD *)this + 3);
      goto LABEL_177;
    case 1004:
      v13 = (char *)*((_QWORD *)this + 3);
      goto LABEL_160;
    case 1005:
      v14 = (char *)*((_QWORD *)this + 3);
      goto LABEL_127;
    case 1006:
      v15 = (char *)*((_QWORD *)this + 3);
      goto LABEL_110;
    case 1007:
      v16 = (char *)*((_QWORD *)this + 3);
      goto LABEL_93;
    case 1008:
      v17 = (char *)*((_QWORD *)this + 3);
      goto LABEL_76;
    case 1009:
      v10 = (char *)*((_QWORD *)this + 3);
      goto LABEL_59;
    default:
      if (v2 != -1009)
        return;
      v8 = *((_QWORD *)this + 4);
      v9 = (char *)*((_QWORD *)this + 3);
      if ((unint64_t)v9 >= v8)
      {
        v25 = (_BYTE *)*((_QWORD *)this + 2);
        v26 = (v9 - v25) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_315;
        v27 = v8 - (_QWORD)v25;
        v28 = (uint64_t)(v8 - (_QWORD)v25) >> 2;
        if (v28 <= v26 + 1)
          v28 = v26 + 1;
        if (v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v29);
          v25 = (_BYTE *)*((_QWORD *)this + 2);
          v9 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v30 = 0;
        }
        v39 = &v30[8 * v26];
        v40 = &v30[8 * v29];
        *(_QWORD *)v39 = -1009;
        v10 = v39 + 8;
        while (v9 != v25)
        {
          v41 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v39 - 1) = v41;
          v39 -= 8;
        }
        *((_QWORD *)this + 2) = v39;
        *((_QWORD *)this + 3) = v10;
        *((_QWORD *)this + 4) = v40;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v9 = -1009;
        v10 = v9 + 8;
      }
      *((_QWORD *)this + 3) = v10;
LABEL_59:
      v42 = *((_QWORD *)this + 4);
      if ((unint64_t)v10 >= v42)
      {
        v43 = (_BYTE *)*((_QWORD *)this + 2);
        v44 = (v10 - v43) >> 3;
        if ((unint64_t)(v44 + 1) >> 61)
          goto LABEL_315;
        v45 = v42 - (_QWORD)v43;
        v46 = (uint64_t)(v42 - (_QWORD)v43) >> 2;
        if (v46 <= v44 + 1)
          v46 = v44 + 1;
        if (v45 >= 0x7FFFFFFFFFFFFFF8)
          v47 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v47);
          v43 = (_BYTE *)*((_QWORD *)this + 2);
          v10 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[8 * v44];
        v50 = &v48[8 * v47];
        *(_QWORD *)v49 = 1009;
        v17 = v49 + 8;
        while (v10 != v43)
        {
          v51 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *((_QWORD *)v49 - 1) = v51;
          v49 -= 8;
        }
        *((_QWORD *)this + 2) = v49;
        *((_QWORD *)this + 3) = v17;
        *((_QWORD *)this + 4) = v50;
        if (v43)
          operator delete(v43);
      }
      else
      {
        *(_QWORD *)v10 = 1009;
        v17 = v10 + 8;
      }
      *((_QWORD *)this + 3) = v17;
LABEL_76:
      v52 = *((_QWORD *)this + 4);
      if ((unint64_t)v17 >= v52)
      {
        v53 = (_BYTE *)*((_QWORD *)this + 2);
        v54 = (v17 - v53) >> 3;
        if ((unint64_t)(v54 + 1) >> 61)
          goto LABEL_315;
        v55 = v52 - (_QWORD)v53;
        v56 = (uint64_t)(v52 - (_QWORD)v53) >> 2;
        if (v56 <= v54 + 1)
          v56 = v54 + 1;
        if (v55 >= 0x7FFFFFFFFFFFFFF8)
          v57 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v57 = v56;
        if (v57)
        {
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v57);
          v53 = (_BYTE *)*((_QWORD *)this + 2);
          v17 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[8 * v54];
        v60 = &v58[8 * v57];
        *(_QWORD *)v59 = 1008;
        v16 = v59 + 8;
        while (v17 != v53)
        {
          v61 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v59 - 1) = v61;
          v59 -= 8;
        }
        *((_QWORD *)this + 2) = v59;
        *((_QWORD *)this + 3) = v16;
        *((_QWORD *)this + 4) = v60;
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v17 = 1008;
        v16 = v17 + 8;
      }
      *((_QWORD *)this + 3) = v16;
LABEL_93:
      v62 = *((_QWORD *)this + 4);
      if ((unint64_t)v16 >= v62)
      {
        v63 = (_BYTE *)*((_QWORD *)this + 2);
        v64 = (v16 - v63) >> 3;
        if ((unint64_t)(v64 + 1) >> 61)
          goto LABEL_315;
        v65 = v62 - (_QWORD)v63;
        v66 = (uint64_t)(v62 - (_QWORD)v63) >> 2;
        if (v66 <= v64 + 1)
          v66 = v64 + 1;
        if (v65 >= 0x7FFFFFFFFFFFFFF8)
          v67 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v67 = v66;
        if (v67)
        {
          v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v67);
          v63 = (_BYTE *)*((_QWORD *)this + 2);
          v16 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v68 = 0;
        }
        v69 = &v68[8 * v64];
        v70 = &v68[8 * v67];
        *(_QWORD *)v69 = 1007;
        v15 = v69 + 8;
        while (v16 != v63)
        {
          v71 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v69 - 1) = v71;
          v69 -= 8;
        }
        *((_QWORD *)this + 2) = v69;
        *((_QWORD *)this + 3) = v15;
        *((_QWORD *)this + 4) = v70;
        if (v63)
          operator delete(v63);
      }
      else
      {
        *(_QWORD *)v16 = 1007;
        v15 = v16 + 8;
      }
      *((_QWORD *)this + 3) = v15;
LABEL_110:
      v72 = *((_QWORD *)this + 4);
      if ((unint64_t)v15 >= v72)
      {
        v73 = (_BYTE *)*((_QWORD *)this + 2);
        v74 = (v15 - v73) >> 3;
        if ((unint64_t)(v74 + 1) >> 61)
          goto LABEL_315;
        v75 = v72 - (_QWORD)v73;
        v76 = (uint64_t)(v72 - (_QWORD)v73) >> 2;
        if (v76 <= v74 + 1)
          v76 = v74 + 1;
        if (v75 >= 0x7FFFFFFFFFFFFFF8)
          v77 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v77 = v76;
        if (v77)
        {
          v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v77);
          v73 = (_BYTE *)*((_QWORD *)this + 2);
          v15 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v78 = 0;
        }
        v79 = &v78[8 * v74];
        v80 = &v78[8 * v77];
        *(_QWORD *)v79 = 1006;
        v14 = v79 + 8;
        while (v15 != v73)
        {
          v81 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v79 - 1) = v81;
          v79 -= 8;
        }
        *((_QWORD *)this + 2) = v79;
        *((_QWORD *)this + 3) = v14;
        *((_QWORD *)this + 4) = v80;
        if (v73)
          operator delete(v73);
      }
      else
      {
        *(_QWORD *)v15 = 1006;
        v14 = v15 + 8;
      }
      *((_QWORD *)this + 3) = v14;
LABEL_127:
      v82 = (char *)*((_QWORD *)this + 4);
      v83 = (void **)((char *)this + 16);
      if (v14 >= v82)
      {
        v85 = (char *)*v83;
        v86 = (v14 - (_BYTE *)*v83) >> 3;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 61)
          goto LABEL_314;
        v88 = v82 - v85;
        if (v88 >> 2 > v87)
          v87 = v88 >> 2;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v89);
          v85 = (char *)*((_QWORD *)this + 2);
          v14 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[8 * v86];
        v82 = &v90[8 * v89];
        *(_QWORD *)v91 = 1005;
        v84 = v91 + 8;
        while (v14 != v85)
        {
          v92 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v91 - 1) = v92;
          v91 -= 8;
        }
        *((_QWORD *)this + 2) = v91;
        *((_QWORD *)this + 3) = v84;
        *((_QWORD *)this + 4) = v82;
        if (v85)
        {
          operator delete(v85);
          v82 = (char *)*((_QWORD *)this + 4);
        }
      }
      else
      {
        *(_QWORD *)v14 = 1005;
        v84 = v14 + 8;
      }
      *((_QWORD *)this + 3) = v84;
      if (v84 >= v82)
      {
        v93 = (char *)*v83;
        v94 = (v84 - (_BYTE *)*v83) >> 3;
        v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 61)
          goto LABEL_314;
        v96 = v82 - v93;
        if (v96 >> 2 > v95)
          v95 = v96 >> 2;
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF8)
          v97 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v97 = v95;
        if (v97)
        {
          v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v97);
          v93 = (char *)*((_QWORD *)this + 2);
          v84 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v98 = 0;
        }
        v99 = &v98[8 * v94];
        v100 = &v98[8 * v97];
        *(_QWORD *)v99 = 3003;
        v13 = v99 + 8;
        while (v84 != v93)
        {
          v101 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *((_QWORD *)v99 - 1) = v101;
          v99 -= 8;
        }
        *((_QWORD *)this + 2) = v99;
        *((_QWORD *)this + 3) = v13;
        *((_QWORD *)this + 4) = v100;
        if (v93)
          operator delete(v93);
      }
      else
      {
        *(_QWORD *)v84 = 3003;
        v13 = v84 + 8;
      }
      *((_QWORD *)this + 3) = v13;
LABEL_160:
      v102 = *((_QWORD *)this + 4);
      if ((unint64_t)v13 >= v102)
      {
        v103 = (_BYTE *)*((_QWORD *)this + 2);
        v104 = (v13 - v103) >> 3;
        if ((unint64_t)(v104 + 1) >> 61)
          goto LABEL_315;
        v105 = v102 - (_QWORD)v103;
        v106 = (uint64_t)(v102 - (_QWORD)v103) >> 2;
        if (v106 <= v104 + 1)
          v106 = v104 + 1;
        if (v105 >= 0x7FFFFFFFFFFFFFF8)
          v107 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v107 = v106;
        if (v107)
        {
          v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v107);
          v103 = (_BYTE *)*((_QWORD *)this + 2);
          v13 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v108 = 0;
        }
        v109 = &v108[8 * v104];
        v110 = &v108[8 * v107];
        *(_QWORD *)v109 = 1004;
        v12 = v109 + 8;
        while (v13 != v103)
        {
          v111 = *((_QWORD *)v13 - 1);
          v13 -= 8;
          *((_QWORD *)v109 - 1) = v111;
          v109 -= 8;
        }
        *((_QWORD *)this + 2) = v109;
        *((_QWORD *)this + 3) = v12;
        *((_QWORD *)this + 4) = v110;
        if (v103)
          operator delete(v103);
      }
      else
      {
        *(_QWORD *)v13 = 1004;
        v12 = v13 + 8;
      }
      *((_QWORD *)this + 3) = v12;
LABEL_177:
      v112 = (char *)*((_QWORD *)this + 4);
      v113 = (void **)((char *)this + 16);
      if (v12 >= v112)
      {
        v115 = (char *)*v113;
        v116 = (v12 - (_BYTE *)*v113) >> 3;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 61)
          goto LABEL_314;
        v118 = v112 - v115;
        if (v118 >> 2 > v117)
          v117 = v118 >> 2;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8)
          v119 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v119 = v117;
        if (v119)
        {
          v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v119);
          v115 = (char *)*((_QWORD *)this + 2);
          v12 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v120 = 0;
        }
        v121 = &v120[8 * v116];
        v112 = &v120[8 * v119];
        *(_QWORD *)v121 = 1003;
        v114 = v121 + 8;
        while (v12 != v115)
        {
          v122 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v121 - 1) = v122;
          v121 -= 8;
        }
        *((_QWORD *)this + 2) = v121;
        *((_QWORD *)this + 3) = v114;
        *((_QWORD *)this + 4) = v112;
        if (v115)
        {
          operator delete(v115);
          v112 = (char *)*((_QWORD *)this + 4);
        }
      }
      else
      {
        *(_QWORD *)v12 = 1003;
        v114 = v12 + 8;
      }
      *((_QWORD *)this + 3) = v114;
      if (v114 >= v112)
      {
        v123 = (char *)*v113;
        v124 = (v114 - (_BYTE *)*v113) >> 3;
        v125 = v124 + 1;
        if ((unint64_t)(v124 + 1) >> 61)
          goto LABEL_314;
        v126 = v112 - v123;
        if (v126 >> 2 > v125)
          v125 = v126 >> 2;
        if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
          v127 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v127 = v125;
        if (v127)
        {
          v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v127);
          v123 = (char *)*((_QWORD *)this + 2);
          v114 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v128 = 0;
        }
        v129 = &v128[8 * v124];
        v130 = &v128[8 * v127];
        *(_QWORD *)v129 = 3002;
        v11 = v129 + 8;
        while (v114 != v123)
        {
          v131 = *((_QWORD *)v114 - 1);
          v114 -= 8;
          *((_QWORD *)v129 - 1) = v131;
          v129 -= 8;
        }
        *((_QWORD *)this + 2) = v129;
        *((_QWORD *)this + 3) = v11;
        *((_QWORD *)this + 4) = v130;
        if (v123)
          operator delete(v123);
      }
      else
      {
        *(_QWORD *)v114 = 3002;
        v11 = v114 + 8;
      }
      *((_QWORD *)this + 3) = v11;
LABEL_210:
      v132 = *((_QWORD *)this + 4);
      if ((unint64_t)v11 >= v132)
      {
        v133 = (_BYTE *)*((_QWORD *)this + 2);
        v134 = (v11 - v133) >> 3;
        if (!((unint64_t)(v134 + 1) >> 61))
        {
          v135 = v132 - (_QWORD)v133;
          v136 = (uint64_t)(v132 - (_QWORD)v133) >> 2;
          if (v136 <= v134 + 1)
            v136 = v134 + 1;
          if (v135 >= 0x7FFFFFFFFFFFFFF8)
            v137 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v137 = v136;
          if (v137)
          {
            v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v137);
            v133 = (_BYTE *)*((_QWORD *)this + 2);
            v11 = (char *)*((_QWORD *)this + 3);
          }
          else
          {
            v138 = 0;
          }
          v139 = &v138[8 * v134];
          v140 = &v138[8 * v137];
          *(_QWORD *)v139 = 1002;
          v3 = v139 + 8;
          while (v11 != v133)
          {
            v141 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v139 - 1) = v141;
            v139 -= 8;
          }
          *((_QWORD *)this + 2) = v139;
          *((_QWORD *)this + 3) = v3;
          *((_QWORD *)this + 4) = v140;
          if (v133)
            operator delete(v133);
          goto LABEL_226;
        }
LABEL_315:
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      }
      *(_QWORD *)v11 = 1002;
      v3 = v11 + 8;
LABEL_226:
      *((_QWORD *)this + 3) = v3;
LABEL_227:
      v142 = (char *)*((_QWORD *)this + 4);
      v143 = (void **)((char *)this + 16);
      if (v3 >= v142)
      {
        v145 = (char *)*v143;
        v146 = (v3 - (_BYTE *)*v143) >> 3;
        v147 = v146 + 1;
        if ((unint64_t)(v146 + 1) >> 61)
          goto LABEL_314;
        v148 = v142 - v145;
        if (v148 >> 2 > v147)
          v147 = v148 >> 2;
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8)
          v149 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v149 = v147;
        if (v149)
        {
          v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v149);
          v145 = (char *)*((_QWORD *)this + 2);
          v3 = (char *)*((_QWORD *)this + 3);
        }
        else
        {
          v150 = 0;
        }
        v151 = &v150[8 * v146];
        v142 = &v150[8 * v149];
        *(_QWORD *)v151 = 1001;
        v144 = v151 + 8;
        while (v3 != v145)
        {
          v152 = *((_QWORD *)v3 - 1);
          v3 -= 8;
          *((_QWORD *)v151 - 1) = v152;
          v151 -= 8;
        }
        *((_QWORD *)this + 2) = v151;
        *((_QWORD *)this + 3) = v144;
        *((_QWORD *)this + 4) = v142;
        if (v145)
        {
          operator delete(v145);
          v142 = (char *)*((_QWORD *)this + 4);
        }
      }
      else
      {
        *(_QWORD *)v3 = 1001;
        v144 = v3 + 8;
      }
      *((_QWORD *)this + 3) = v144;
      if (v144 >= v142)
      {
        v154 = (char *)*v143;
        v155 = (v144 - (_BYTE *)*v143) >> 3;
        v156 = v155 + 1;
        if (!((unint64_t)(v155 + 1) >> 61))
        {
          v157 = v142 - v154;
          if (v157 >> 2 > v156)
            v156 = v157 >> 2;
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8)
            v158 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v158 = v156;
          if (v158)
          {
            v159 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)this + 32, v158);
            v154 = (char *)*((_QWORD *)this + 2);
            v144 = (char *)*((_QWORD *)this + 3);
          }
          else
          {
            v159 = 0;
          }
          v160 = &v159[8 * v155];
          v161 = &v159[8 * v158];
          *(_QWORD *)v160 = 3001;
          v153 = v160 + 8;
          while (v144 != v154)
          {
            v162 = *((_QWORD *)v144 - 1);
            v144 -= 8;
            *((_QWORD *)v160 - 1) = v162;
            v160 -= 8;
          }
LABEL_310:
          *((_QWORD *)this + 2) = v160;
          *((_QWORD *)this + 3) = v153;
          *((_QWORD *)this + 4) = v161;
          if (v154)
            operator delete(v154);
          goto LABEL_312;
        }
        goto LABEL_314;
      }
      *(_QWORD *)v144 = 3001;
      v153 = v144 + 8;
LABEL_312:
      *((_QWORD *)this + 3) = v153;
      return;
  }
}

uint64_t MTLAccelerationStructureInstanceDescriptorSize(MTLAccelerationStructureInstanceDescriptorType a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (a1 < (MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion|MTLAccelerationStructureInstanceDescriptorTypeUserID))
    return qword_18280AA58[a1];
  MTLReportFailure(0, "MTLAccelerationStructureInstanceDescriptorSize", 1200, (uint64_t)CFSTR("Invalid instance descriptor type"), a5, a6, a7, a8, vars0);
  return 0;
}

BOOL isValidMTLAccelerationStructureInstanceDescriptorType(MTLAccelerationStructureInstanceDescriptorType a1)
{
  return a1 < (MTLAccelerationStructureInstanceDescriptorTypeIndirectMotion|MTLAccelerationStructureInstanceDescriptorTypeUserID);
}

uint64_t newStringFromConstantValue(unsigned __int16 *a1, uint64_t a2)
{
  int ComponentCount;
  uint64_t ComponentType;
  uint64_t v6;
  int i;
  id v14;
  std::string *v15;
  uint64_t v16;
  std::string::value_type *__s;
  std::string v19;

  ComponentCount = MTLDataTypeGetComponentCount(a2);
  ComponentType = MTLDataTypeGetComponentType(a2);
  v6 = _MTLConstantDataSize(ComponentType);
  std::string::basic_string[abi:ne180100]<0>(&v19, "(");
  if (ComponentCount)
  {
    for (i = 0; i != ComponentCount; ++i)
    {
      __s = 0;
      if (i)
        std::string::append(&v19, ", ");
      if (ComponentType <= 36)
      {
        if (ComponentType > 28)
        {
          if (ComponentType == 29)
          {
            asprintf(&__s, "%i", *(_DWORD *)a1);
          }
          else
          {
            if (ComponentType != 33)
              goto LABEL_33;
            asprintf(&__s, "%u", *(_DWORD *)a1);
          }
        }
        else if (ComponentType == 3)
        {
          asprintf(&__s, "%f", *(float *)a1);
        }
        else
        {
          if (ComponentType != 16)
            goto LABEL_33;
          _H0 = *a1;
          __asm { FCVT            D0, H0 }
          asprintf(&__s, "%f", _D0);
        }
      }
      else if (ComponentType <= 44)
      {
        if (ComponentType == 37)
        {
          asprintf(&__s, "%i", (__int16)*a1);
        }
        else
        {
          if (ComponentType != 41)
            goto LABEL_33;
          asprintf(&__s, "%u", *a1);
        }
      }
      else if (ComponentType == 45)
      {
        asprintf(&__s, "%i", *(char *)a1);
      }
      else
      {
        if (ComponentType != 49 && ComponentType != 53)
LABEL_33:
          abort();
        asprintf(&__s, "%u", *(unsigned __int8 *)a1);
      }
      std::string::append(&v19, __s);
      free(__s);
      a1 = (unsigned __int16 *)((char *)a1 + v6);
    }
  }
  std::string::append(&v19, ")");
  v14 = objc_alloc(MEMORY[0x1E0CB3940]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v19;
  else
    v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
  v16 = objc_msgSend(v14, "initWithUTF8String:", v15);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1826F9258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *MTLConstantStorage::appendConstantData(uint64_t a1, std::vector<char> *a2, const void **a3)
{
  size_t v5;
  std::vector<char>::pointer begin;
  unint64_t v7;
  char v8;
  unint64_t v9;

  v5 = _MTLConstantDataSize(*(unsigned __int8 *)a3);
  begin = a2->__begin_;
  v7 = a2->__end_ - a2->__begin_;
  v8 = *(_BYTE *)a3;
  v9 = v7 + v5 + 1;
  if (v7 >= v9)
  {
    if (v7 > v9)
      a2->__end_ = &begin[v9];
  }
  else
  {
    std::vector<unsigned char>::__append(a2, v5 + 1);
    begin = a2->__begin_;
  }
  begin[v7] = v8;
  return memcpy(&a2->__begin_[v7 + 1], a3[1], v5);
}

BOOL MTLConstantStorage::isEqual(_QWORD *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  _BOOL8 result;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  char v20;
  char v21;

  if ((unsigned __int8 *)a1[2] != a2[2])
    return 0;
  v4 = (unsigned __int8 *)(a1 + 1);
  v5 = (unsigned __int8 *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v6 = *a2;
    while (std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,std::pair<std::string const,MTLConstantStorage::ConstantData>>((uint64_t)&v20, v5 + 32, v6 + 32))
    {
      v7 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
      v8 = v5;
      if (v7)
      {
        do
        {
          v5 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v5 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
          v9 = *(_QWORD *)v5 == (_QWORD)v8;
          v8 = v5;
        }
        while (!v9);
      }
      v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v9 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v9);
      }
      v6 = v11;
      if (v5 == v4)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if ((unsigned __int8 *)a1[5] != a2[5])
    return 0;
  v12 = (unsigned __int16 *)a1[3];
  v13 = (unsigned __int16 *)(a1 + 4);
  if (v12 == v13)
    return 1;
  v14 = (unsigned __int16 *)a2[3];
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::pair<unsigned short const,MTLConstantStorage::ConstantData>,std::pair<unsigned short const,MTLConstantStorage::ConstantData>>((uint64_t)&v21, v12 + 16, v14 + 16);
    if (!result)
      break;
    v16 = (unsigned __int16 *)*((_QWORD *)v12 + 1);
    v17 = v12;
    if (v16)
    {
      do
      {
        v12 = v16;
        v16 = *(unsigned __int16 **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        v12 = (unsigned __int16 *)*((_QWORD *)v17 + 2);
        v9 = *(_QWORD *)v12 == (_QWORD)v17;
        v17 = v12;
      }
      while (!v9);
    }
    v18 = (unsigned __int16 *)*((_QWORD *)v14 + 1);
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = *(unsigned __int16 **)v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (unsigned __int16 *)*((_QWORD *)v14 + 2);
        v9 = *(_QWORD *)v19 == (_QWORD)v14;
        v14 = v19;
      }
      while (!v9);
    }
    v14 = v19;
  }
  while (v12 != v13);
  return result;
}

uint64_t MTLConstantStorage::hashData(MTLConstantStorage *this)
{
  MTLConstantStorage *v2;
  std::string *end;
  __int128 *v4;
  __int128 v5;
  MTLConstantStorage *v6;
  MTLConstantStorage *v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  int v13;
  std::vector<char>::size_type size;
  std::vector<char>::pointer v15;
  int64_t v16;
  unint64_t v17;
  std::vector<std::string>::pointer v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  __int16 v23;
  size_t v24;
  void *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int16 v35;
  uint64_t *v36;
  uint64_t **v37;
  unsigned __int16 *v38;
  char *v39;
  unsigned __int16 v40;
  std::vector<char>::pointer v41;
  int64_t v42;
  uint64_t **v43;
  int *v44;
  std::vector<char>::pointer v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned __int16 v50;
  void *__p;
  char *v52;
  char *v53;
  std::vector<std::string> v54;
  std::vector<char> v55;
  unsigned __int16 *v56;

  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  std::vector<std::string>::reserve(&v54, *((_QWORD *)this + 2));
  v2 = *(MTLConstantStorage **)this;
  if (*(MTLConstantStorage **)this == (MTLConstantStorage *)((char *)this + 8))
  {
    end = v54.__end_;
  }
  else
  {
    end = v54.__end_;
    do
    {
      v4 = (__int128 *)((char *)v2 + 32);
      if (end >= v54.__end_cap_.__value_)
      {
        end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v54, v4);
      }
      else
      {
        if (*((char *)v2 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(end, *((const std::string::value_type **)v2 + 4), *((_QWORD *)v2 + 5));
        }
        else
        {
          v5 = *v4;
          end->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 6);
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v5;
        }
        ++end;
      }
      v54.__end_ = end;
      v6 = (MTLConstantStorage *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(MTLConstantStorage **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (MTLConstantStorage *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != (MTLConstantStorage *)((char *)this + 8));
  }
  v9 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v54.__begin_) >> 3));
  if (end == v54.__begin_)
    v10 = 0;
  else
    v10 = v9;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v54.__begin_, (const void **)&end->__r_.__value_.__l.__data_, (uint64_t)&v56, v10, 1);
  begin = v54.__begin_;
  for (i = v54.__end_; begin != i; ++begin)
  {
    v13 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
    if (v13 < 0)
      size = begin->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    v15 = v55.__begin_;
    v16 = v55.__end_ - v55.__begin_;
    v17 = size + v55.__end_ - v55.__begin_;
    if (v55.__end_ - v55.__begin_ >= v17)
    {
      if (v55.__end_ - v55.__begin_ > v17)
        v55.__end_ += size;
    }
    else
    {
      std::vector<unsigned char>::__append(&v55, size);
      v15 = v55.__begin_;
      LOBYTE(v13) = *((_BYTE *)&begin->__r_.__value_.__s + 23);
    }
    v18 = begin;
    if ((v13 & 0x80) != 0)
      v18 = (std::vector<std::string>::pointer)begin->__r_.__value_.__r.__words[0];
    memcpy(&v15[v16], v18, size);
    v56 = (unsigned __int16 *)begin;
    v19 = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this, (const void **)&begin->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v56);
    MTLConstantStorage::appendConstantData((uint64_t)v19, &v55, (const void **)v19 + 7);
  }
  __p = 0;
  v52 = 0;
  v53 = 0;
  v22 = (uint64_t **)*((_QWORD *)this + 3);
  v20 = (uint64_t **)((char *)this + 24);
  v21 = v22;
  if (v22 != v20 + 1)
  {
    do
    {
      v23 = *((_WORD *)v21 + 16);
      v24 = _MTLConstantDataSize(*((unsigned __int8 *)v21 + 40));
      v25 = (void *)operator new[]();
      memcpy(v25, v21[6], v24);
      v26 = v52;
      if (v52 >= v53)
      {
        v28 = (char *)__p;
        v29 = v52 - (_BYTE *)__p;
        if (v52 - (_BYTE *)__p <= -3)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v30 = v29 >> 1;
        if (v53 - (_BYTE *)__p <= (unint64_t)((v29 >> 1) + 1))
          v31 = v30 + 1;
        else
          v31 = v53 - (_BYTE *)__p;
        if ((unint64_t)(v53 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v32 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)&v53, v32);
          v28 = (char *)__p;
          v26 = v52;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[2 * v30];
        *(_WORD *)v34 = v23;
        v27 = v34 + 2;
        while (v26 != v28)
        {
          v35 = *((_WORD *)v26 - 1);
          v26 -= 2;
          *((_WORD *)v34 - 1) = v35;
          v34 -= 2;
        }
        __p = v34;
        v52 = v27;
        v53 = &v33[2 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *(_WORD *)v52 = v23;
        v27 = v26 + 2;
      }
      v52 = v27;
      MEMORY[0x186DABFA4](v25, 0x1000C8077774924);
      v36 = v21[1];
      if (v36)
      {
        do
        {
          v37 = (uint64_t **)v36;
          v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (uint64_t **)v21[2];
          v8 = *v37 == (uint64_t *)v21;
          v21 = v37;
        }
        while (!v8);
      }
      v21 = v37;
    }
    while (v37 != v20 + 1);
  }
  std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>();
  v38 = (unsigned __int16 *)__p;
  v39 = v52;
  if (__p != v52)
  {
    do
    {
      v40 = *v38;
      v50 = *v38;
      v41 = v55.__begin_;
      v42 = v55.__end_ - v55.__begin_;
      if ((std::vector<char>::pointer)(v55.__end_ - v55.__begin_) > (std::vector<char>::pointer)0xFFFFFFFFFFFFFFFDLL)
      {
        v55.__end_ += 2;
      }
      else
      {
        std::vector<unsigned char>::__append(&v55, 2uLL);
        v41 = v55.__begin_;
        v40 = v50;
      }
      *(_WORD *)&v41[v42] = v40;
      v56 = &v50;
      v43 = std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(v20, &v50, (uint64_t)&std::piecewise_construct, &v56);
      MTLConstantStorage::appendConstantData((uint64_t)v43, &v55, (const void **)v43 + 5);
      ++v38;
    }
    while (v38 != (unsigned __int16 *)v39);
  }
  v44 = (int *)v55.__begin_;
  v45 = v55.__end_;
  v46 = v55.__end_ - v55.__begin_;
  if (((v55.__end_ - v55.__begin_) & 3) != 0)
  {
    v47 = (v46 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if (v47 <= v46)
    {
      if (v47 < v46)
      {
        v45 = &v55.__begin_[v47];
        v55.__end_ = &v55.__begin_[v47];
      }
    }
    else
    {
      std::vector<unsigned char>::__append(&v55, v47 - v46);
      v44 = (int *)v55.__begin_;
      v45 = v55.__end_;
    }
  }
  v48 = _MTLHashState(v44, v45 - (std::vector<char>::pointer)v44);
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
  __p = &v54;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  return v48;
}

void sub_1826F9EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1826F9FE0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(uint64_t a1, _WORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 1)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 2uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 2;
  *(_WORD *)(v4 - 2) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(uint64_t a1, __int16 *a2)
{
  uint64_t v4;
  __int16 v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 2)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 3uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 3;
  v5 = *a2;
  *(_BYTE *)(v4 - 1) = *((_BYTE *)a2 + 2);
  *(_WORD *)(v4 - 3) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 8;
  *(_QWORD *)(v4 - 8) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 1uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 1)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 2uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = *a2;
  v5 = v4 - 2;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 4;
  *(_DWORD *)(v4 - 4) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 8;
  *(_QWORD *)(v4 - 8) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0x1F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x20uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 32;
  v5 = a2[1];
  *(_OWORD *)(v4 - 32) = *a2;
  *(_OWORD *)(v4 - 16) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0xB)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0xCuLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 12;
  v5 = *a2;
  *(_DWORD *)(v4 - 4) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v4 - 12) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0x1F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x20uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 32;
  v5 = a2[1];
  *(_OWORD *)(v4 - 32) = *a2;
  *(_OWORD *)(v4 - 16) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0x3F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x40uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 64;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  *(_OWORD *)(v4 - 32) = a2[2];
  *(_OWORD *)(v4 - 16) = v7;
  *(_OWORD *)(v4 - 64) = v5;
  *(_OWORD *)(v4 - 48) = v6;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 7)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 8uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v4 - 8) = *a2;
  v5 = v4 - 8;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0xF)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x10uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 16;
  *(_OWORD *)(v4 - 16) = *a2;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0x17)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x18uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 24;
  v5 = *a2;
  *(_QWORD *)(v4 - 8) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v4 - 24) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0x1F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x20uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 32;
  v5 = a2[1];
  *(_OWORD *)(v4 - 32) = *a2;
  *(_OWORD *)(v4 - 16) = v5;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0x3F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x40uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 64;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  *(_OWORD *)(v4 - 32) = a2[2];
  *(_OWORD *)(v4 - 16) = v7;
  *(_OWORD *)(v4 - 64) = v5;
  *(_OWORD *)(v4 - 48) = v6;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

uint64_t flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 8uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 0x7F)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 0x80uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(a1 + 48) = v4 - 128;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  *(_OWORD *)(v4 - 96) = a2[2];
  *(_OWORD *)(v4 - 80) = v7;
  *(_OWORD *)(v4 - 128) = v5;
  *(_OWORD *)(v4 - 112) = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[7];
  *(_OWORD *)(v4 - 32) = a2[6];
  *(_OWORD *)(v4 - 16) = v10;
  *(_OWORD *)(v4 - 64) = v8;
  *(_OWORD *)(v4 - 48) = v9;
  return (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
}

unsigned __int16 *MTLConstantStorage::constantDataWithFunctionConstant(MTLConstantStorage *this, MTLFunctionConstant *a2)
{
  unsigned __int16 *result;
  unsigned __int16 *v4;
  uint64_t v5;

  result = MTLConstantStorage::findConstantValue(this, a2);
  if (result)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)result;
    if (-[MTLFunctionConstant type](a2, "type") == v5)
      return (unsigned __int16 *)*((_QWORD *)v4 + 1);
    else
      return 0;
  }
  return result;
}

void *MTLConstantStorage::newNamedConstantArray(MTLConstantStorage *this)
{
  void *v2;
  char *v3;
  _QWORD *v4;
  char *v5;
  _QWORD *v6;
  MTLNamedConstantValue *v7;
  char *v8;
  char *v9;
  BOOL v10;

  v2 = (void *)objc_opt_new();
  v5 = *(char **)this;
  v3 = (char *)this + 8;
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      v6 = v4 + 4;
      if (*((char *)v4 + 55) < 0)
        v6 = (_QWORD *)*v6;
      v7 = -[MTLNamedConstantValue initWithValue:type:name:]([MTLNamedConstantValue alloc], "initWithValue:type:name:", v4[8], *((unsigned __int8 *)v4 + 56), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6));
      objc_msgSend(v2, "addObject:", v7);

      v8 = (char *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)v4[2];
          v10 = *(_QWORD *)v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v3);
  }
  return v2;
}

void *MTLConstantStorage::newIndexedConstantArray(MTLConstantStorage *this)
{
  void *v2;
  char *v3;
  char *v4;
  MTLIndexedConstantValue *v5;
  char *v6;
  char *v7;
  BOOL v8;

  v2 = (void *)objc_opt_new();
  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    do
    {
      v5 = -[MTLIndexedConstantValue initWithValue:type:index:]([MTLIndexedConstantValue alloc], "initWithValue:type:index:", *((_QWORD *)v3 + 6), v3[40], *((unsigned __int16 *)v3 + 16));
      objc_msgSend(v2, "addObject:", v5);

      v6 = (char *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return v2;
}

uint64_t arrayDescription(NSArray *a1)
{
  NSUInteger v2;
  NSUInteger v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = -[NSArray count](a1, "count");
  if (!v2)
    return objc_msgSend(MEMORY[0x1E0C99D20], "array");
  v3 = v2;
  v4 = operator new[]();
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(a1);
        *(_QWORD *)(v4 + 8 * (v7 + i)) = objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "describe");
      }
      v6 = -[NSArray countByEnumeratingWithState:objects:count:](a1, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      v7 += i;
    }
    while (v6);
  }
  v10 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v4, v3);
  MEMORY[0x186DABFA4](v4, 0x80C80B8603338);
  return v10;
}

uint64_t std::pair<unsigned short const,MTLConstantStorage::ConstantData>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  size_t v4;
  void *v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  v4 = _MTLConstantDataSize(*(unsigned __int8 *)(a2 + 8));
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v5 = (void *)operator new[]();
  *(_QWORD *)(a1 + 16) = v5;
  memcpy(v5, *(const void **)(a2 + 16), v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    MEMORY[0x186DABFA4](v2, 0x1000C8077774924);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::map<std::string,MTLConstantStorage::ConstantData>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1826FAE50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLConstantStorage::ConstantData> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

std::string *std::pair<std::string const,MTLConstantStorage::ConstantData>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  size_t v5;
  void *v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = _MTLConstantDataSize(*((unsigned __int8 *)a2 + 24));
  this[1].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 24);
  v6 = (void *)operator new[]();
  this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
  memcpy(v6, *((const void **)a2 + 4), v5);
  return this;
}

void sub_1826FAF78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::map<unsigned short,MTLConstantStorage::ConstantData>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<unsigned short,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *> *,long>>>(a1, *(unsigned __int16 **)a2, (unsigned __int16 *)(a2 + 8));
  return a1;
}

void sub_1826FB014(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<unsigned short,MTLConstantStorage::ConstantData>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *> *,long>>>(uint64_t *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>>>::__emplace_hint_unique_key_args<unsigned short,std::pair<unsigned short const,MTLConstantStorage::ConstantData> const&>(v5, v6, v4 + 16, (uint64_t)(v4 + 16));
      v7 = (unsigned __int16 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int16 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int16 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,MTLConstantStorage::ConstantData>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p[6];
    if (v3)
      MEMORY[0x186DABFA4](v3, 0x1000C8077774924);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<std::string const,MTLConstantStorage::ConstantData>,std::pair<std::string const,MTLConstantStorage::ConstantData>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  size_t v15;

  v4 = a2[23];
  v5 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v6 = a2[23];
  else
    v6 = *((_QWORD *)a2 + 1);
  v7 = a3[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a3 + 1);
  if (v6 != v7)
    return 0;
  if (v8 >= 0)
    v10 = a3;
  else
    v10 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5))
      return 0;
  }
  else if ((_DWORD)v4)
  {
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v12 = a2[24];
  if ((_DWORD)v12 == a3[24])
  {
    v13 = (const void *)*((_QWORD *)a2 + 4);
    v14 = (const void *)*((_QWORD *)a3 + 4);
    v15 = _MTLConstantDataSize(v12);
    return memcmp(v13, v14, v15) == 0;
  }
  return 0;
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<unsigned short const,MTLConstantStorage::ConstantData>,std::pair<unsigned short const,MTLConstantStorage::ConstantData>>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  size_t v6;

  if (*a2 != *a3)
    return 0;
  v3 = *((unsigned __int8 *)a2 + 8);
  if ((_DWORD)v3 != *((unsigned __int8 *)a3 + 8))
    return 0;
  v4 = (const void *)*((_QWORD *)a2 + 2);
  v5 = (const void *)*((_QWORD *)a3 + 2);
  v6 = _MTLConstantDataSize(v3);
  return memcmp(v4, v5, v6) == 0;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1826FC2D4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLConstantStorage::ConstantData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLConstantStorage::ConstantData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *((_QWORD *)v6 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1826FC778(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MTLConstantStorage::ConstantData>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

id newErrorWithMessage(NSString *a1, MTLDynamicLibraryError a2)
{
  uint64_t v3;

  v3 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", a1, *MEMORY[0x1E0CB2D50]);
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLDynamicLibraryDomain"), a2, v3);
}

void sub_1826FD00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a67;
  uint64_t v67;

  _Block_object_dispose(&a50, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a10);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose((const void *)(v67 - 240), 8);
  _Block_object_dispose((const void *)(v67 - 208), 8);
  _Block_object_dispose((const void *)(v67 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__7(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__8(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void sub_1826FD614(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t isVendorSliceCompatible(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD v6[6];
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZL23isVendorSliceCompatibleRK24MTLLoaderSliceIdentifierP6NSDatayPU19objcproto9MTLDevice11objc_object_block_invoke;
  v6[3] = &unk_1E0FE2958;
  v6[4] = a2;
  v6[5] = a3;
  +[MTLLoader deserializeAIRNTToolsVersionForSlice:sliceOffset:version:reader:]((uint64_t)MTLLoader, a1, a3, (uint64_t)&v7, (uint64_t)v6);
  return objc_msgSend(a4, "isVendorSliceCompatibleWithDeploymentTarget:platform:sdkVersion:compilerPluginVersion:", v7, HIDWORD(v7), v8, v9);
}

void sub_1826FDF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  _Block_object_dispose((const void *)(v39 - 176), 8);
  _Block_object_dispose((const void *)(v39 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1826FE090(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1826FEA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  _Block_object_dispose(&a44, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a10);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v55 - 256), 8);
  _Block_object_dispose((const void *)(v55 - 224), 8);
  _Block_object_dispose((const void *)(v55 - 192), 8);
  _Block_object_dispose((const void *)(v55 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__105(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__106(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void sub_1826FF01C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLDynamicLibraryLoadOptionsFromPipelineOptions(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  result = 0;
  v3 = &kLibraryPipelineOptionMap;
  do
  {
    v4 = *v3;
    v5 = v3[1];
    v3 += 2;
    if ((v5 & a1) == 0)
      v4 = 0;
    result |= v4;
  }
  while (v3 != (uint64_t *)"NSt3__120__shared_ptr_emplaceINS_6vectorI10machOEntryNS_9allocatorIS2_EEEENS3_IS5_EEEE");
  return result;
}

uint64_t MTLPipelineOptionsFromDynamicLibraryLoadOptions(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = 0;
  v3 = &kLibraryPipelineOptionMap;
  do
  {
    v4 = *v3;
    v5 = v3[1];
    v3 += 2;
    if ((v4 & a1) != 0)
      v6 = v5;
    else
      v6 = 0;
    result |= v6;
  }
  while (v3 != (uint64_t *)"NSt3__120__shared_ptr_emplaceINS_6vectorI10machOEntryNS_9allocatorIS2_EEEENS3_IS5_EEEE");
  return result;
}

uint64_t ___ZL23isVendorSliceCompatibleRK24MTLLoaderSliceIdentifierP6NSDatayPU19objcproto9MTLDevice11objc_object_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;

  v5 = a3 + a2 + *(_QWORD *)(a1 + 40);
  if (v5 <= objc_msgSend(*(id *)(a1 + 32), "length"))
    return objc_msgSend(*(id *)(a1 + 32), "bytes") + *(_QWORD *)(a1 + 40) + a2;
  else
    return 0;
}

_QWORD *std::vector<machOEntry>::__construct_one_at_end[abi:ne180100]<machOEntry const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(v3 + 16) = a2[1];
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)v3 = v4;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  result = std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)(v3 + 48), *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 5);
  *(_QWORD *)(a1 + 8) = v3 + 72;
  return result;
}

void sub_1826FF500(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<machOEntry>::__push_back_slow_path<machOEntry const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<machOEntry>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[72 * v9];
  v12 = *a2;
  v13 = a2[2];
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = v13;
  *(_OWORD *)v11 = v12;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 6) = 0;
  std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((_QWORD *)v11 + 6, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 5);
  v17 += 72;
  std::vector<machOEntry>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<machOEntry>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1826FF630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<machOEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *MTLIOAccelResourcePoolCreatePooledResource(uint64_t a1)
{
  os_unfair_lock_s *v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  id v13;

  v2 = (os_unfair_lock_s *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v3 = *(_DWORD *)(a1 + 88);
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
  {
    v6 = v4[39];
    v5 = (_QWORD *)v4[40];
    if (v6)
    {
      *(_QWORD *)(v6 + 320) = v5;
      v7 = v4[39];
      v5 = (_QWORD *)v4[40];
    }
    else
    {
      v7 = 0;
      *(_QWORD *)(a1 + 32) = v5;
    }
    *v5 = v7;
LABEL_13:
    v12 = v4 + 38;
    --*(_DWORD *)(a1 + 44);
    goto LABEL_14;
  }
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v9 = v4[39];
    v8 = (_QWORD *)v4[40];
    if (v9)
    {
      *(_QWORD *)(v9 + 320) = v8;
      v10 = v4[39];
      v8 = (_QWORD *)v4[40];
    }
    else
    {
      v10 = 0;
      *(_QWORD *)(a1 + 16) = v8;
    }
    *v8 = v10;
    objc_msgSend(v4, "setPurgeableState:", 2);
    goto LABEL_13;
  }
  v11 = (_QWORD *)objc_msgSend(objc_alloc(*(Class *)(a1 + 48)), "initWithDevice:options:args:argsSize:", *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 64), *(unsigned int *)(a1 + 72));
  v4 = v11;
  if (v11)
  {
    objc_msgSend(v11, "setLabel:", CFSTR("MTLIOAccelResourcePool"));
    v12 = v4 + 38;
LABEL_14:
    *v12 = a1;
    *((_DWORD *)v12 + 8) = v3;
    v13 = (id)a1;
  }
  os_unfair_lock_unlock(v2);
  return v4;
}

const __CFString *MTLBuiltInArgumentTypeString(unint64_t a1)
{
  if (a1 > 0x18)
    return CFSTR("Unknown");
  else
    return off_1E0FE3018[a1];
}

const __CFString *MTLMeshTopologyKindString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_1E0FE30E0[a1];
}

MTLStructTypeInternal *newStructTypeWithSerializedContext(uint64_t a1, DeserialContext *a2, unsigned int a3)
{
  MTLStructTypeInternal *v3;
  _OWORD v5[2];
  int v6;
  char v7;
  char v8;

  v8 = 0;
  memset(v5, 0, sizeof(v5));
  v6 = 1065353216;
  v3 = structTypeFromSerializedContext(a1, a2, &v8, v5, &v7, a3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v5);
  return v3;
}

void sub_182701548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void serializeArrayType(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  char *v20;
  int v21;
  unint64_t v22;
  int v23;
  size_t v24;
  char *v25;
  int v26;
  unint64_t v27;
  int v28;
  size_t v29;
  char *v30;
  int v31;
  unint64_t v32;
  int v33;
  size_t v34;
  char *v35;
  int v36;
  unint64_t v37;
  int v38;
  size_t v39;
  char *v40;
  uint64_t v41;

  v7 = a1;
  v8 = objc_msgSend(a1, "elementType");
  v9 = objc_msgSend(v7, "elementIndirectArgumentType");
  v10 = objc_msgSend(v7, "arrayLength");
  v11 = (unint64_t)a2[2];
  if (v11 > 0xFFFFFFFFFFFFFFFBLL)
LABEL_75:
    abort();
  v12 = v10;
  if (v9)
    v13 = 57;
  else
    v13 = v8;
  while (1)
  {
    v14 = (size_t)a2[1];
    if (v14 >= v11 + 4)
    {
      v15 = (char *)*a2;
    }
    else
    {
      if (!v14)
      {
        a2[1] = (void *)128;
        v14 = 128;
      }
      while (v14 < v11 + 4)
      {
        if (v14 >> 1 >= ~v14)
          v14 = v11 + 4;
        else
          v14 += v14 >> 1;
      }
      v15 = (char *)malloc_type_realloc(*a2, v14, 0x227314A4uLL);
      *a2 = v15;
      if (!v15)
        goto LABEL_75;
      a2[1] = (void *)v14;
      v11 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v15[v11] = v12;
    v16 = (char *)a2[2];
    v17 = v16 + 4;
    a2[2] = v16 + 4;
    if ((unint64_t)(v16 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
      goto LABEL_75;
    v18 = (size_t)(v16 + 8);
    v19 = (size_t)a2[1];
    if (v19 >= v18)
    {
      v20 = (char *)*a2;
    }
    else
    {
      if (!v19)
      {
        a2[1] = (void *)128;
        v19 = 128;
      }
      while (v19 < v18)
      {
        if (v19 >> 1 >= ~v19)
          v19 = v18;
        else
          v19 += v19 >> 1;
      }
      v20 = (char *)malloc_type_realloc(*a2, v19, 0x227314A4uLL);
      *a2 = v20;
      if (!v20)
        goto LABEL_75;
      a2[1] = (void *)v19;
      v17 = (char *)a2[2];
    }
    *(_DWORD *)&v17[(_QWORD)v20] = v13;
    a2[2] = (char *)a2[2] + 4;
    v21 = objc_msgSend(v7, "stride");
    v22 = (unint64_t)a2[2];
    if (v22 >= 0xFFFFFFFFFFFFFFFCLL)
      goto LABEL_75;
    v23 = v21;
    v24 = (size_t)a2[1];
    if (v24 >= v22 + 4)
    {
      v25 = (char *)*a2;
    }
    else
    {
      if (!v24)
      {
        a2[1] = (void *)128;
        v24 = 128;
      }
      while (v24 < v22 + 4)
      {
        if (v24 >> 1 >= ~v24)
          v24 = v22 + 4;
        else
          v24 += v24 >> 1;
      }
      v25 = (char *)malloc_type_realloc(*a2, v24, 0x227314A4uLL);
      *a2 = v25;
      if (!v25)
        goto LABEL_75;
      a2[1] = (void *)v24;
      v22 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v25[v22] = v23;
    a2[2] = (char *)a2[2] + 4;
    v26 = objc_msgSend(v7, "indirectArgumentIndexStride");
    v27 = (unint64_t)a2[2];
    if (v27 >= 0xFFFFFFFFFFFFFFFCLL)
      goto LABEL_75;
    v28 = v26;
    v29 = (size_t)a2[1];
    if (v29 >= v27 + 4)
    {
      v30 = (char *)*a2;
    }
    else
    {
      if (!v29)
      {
        a2[1] = (void *)128;
        v29 = 128;
      }
      while (v29 < v27 + 4)
      {
        if (v29 >> 1 >= ~v29)
          v29 = v27 + 4;
        else
          v29 += v29 >> 1;
      }
      v30 = (char *)malloc_type_realloc(*a2, v29, 0x227314A4uLL);
      *a2 = v30;
      if (!v30)
        goto LABEL_75;
      a2[1] = (void *)v29;
      v27 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v30[v27] = v28;
    a2[2] = (char *)a2[2] + 4;
    v31 = objc_msgSend(v7, "pixelFormat");
    v32 = (unint64_t)a2[2];
    if (v32 >= 0xFFFFFFFFFFFFFFFCLL)
      goto LABEL_75;
    v33 = v31;
    v34 = (size_t)a2[1];
    if (v34 >= v32 + 4)
    {
      v35 = (char *)*a2;
    }
    else
    {
      if (!v34)
      {
        a2[1] = (void *)128;
        v34 = 128;
      }
      while (v34 < v32 + 4)
      {
        if (v34 >> 1 >= ~v34)
          v34 = v32 + 4;
        else
          v34 += v34 >> 1;
      }
      v35 = (char *)malloc_type_realloc(*a2, v34, 0x227314A4uLL);
      *a2 = v35;
      if (!v35)
        goto LABEL_75;
      a2[1] = (void *)v34;
      v32 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v35[v32] = v33;
    a2[2] = (char *)a2[2] + 4;
    v36 = objc_msgSend(v7, "aluType");
    v37 = (unint64_t)a2[2];
    if (v37 >= 0xFFFFFFFFFFFFFFFCLL)
      goto LABEL_75;
    v38 = v36;
    v39 = (size_t)a2[1];
    if (v39 >= v37 + 4)
    {
      v40 = (char *)*a2;
    }
    else
    {
      if (!v39)
      {
        a2[1] = (void *)128;
        v39 = 128;
      }
      while (v39 < v37 + 4)
      {
        if (v39 >> 1 >= ~v39)
          v39 = v37 + 4;
        else
          v39 += v39 >> 1;
      }
      v40 = (char *)malloc_type_realloc(*a2, v39, 0x227314A4uLL);
      *a2 = v40;
      if (!v40)
        goto LABEL_75;
      a2[1] = (void *)v39;
      v37 = (unint64_t)a2[2];
    }
    *(_DWORD *)&v40[v37] = v38;
    a2[2] = (char *)a2[2] + 4;
    if (v13 != 2)
      break;
    v7 = (void *)objc_msgSend(v7, "elementArrayType");
    v41 = objc_msgSend(v7, "elementType");
    if (objc_msgSend(v7, "elementIndirectArgumentType"))
      v13 = 57;
    else
      v13 = v41;
    v12 = objc_msgSend(v7, "arrayLength");
    v11 = (unint64_t)a2[2];
    if (v11 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_75;
  }
  if (v13 == 1)
  {
    serializeStructTypeInternal(objc_msgSend(v7, "elementStructType"), a2, a3, a4);
  }
  else if (objc_msgSend(v7, "elementIndirectArgumentType"))
  {
    serializeIndirectArgument(objc_msgSend(v7, "elementIndirectArgumentType"), (char **)a2, a3, a4);
  }
}

char *serializeStructTypeInternal(char *result, char **a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  size_t v26;
  char *v27;
  size_t v28;
  size_t v29;
  char *v30;
  int v31;
  unint64_t v32;
  int v33;
  size_t v34;
  char *v35;
  int v36;
  unint64_t v37;
  int v38;
  size_t v39;
  char *v40;
  char *v41;
  char *v42;
  size_t v43;
  size_t v44;
  char *v45;
  int v46;
  unint64_t v47;
  int v48;
  size_t v49;
  char *v50;
  int v51;
  unint64_t v52;
  int v53;
  size_t v54;
  char *v55;
  int v56;
  unint64_t v57;
  int v58;
  size_t v59;
  char *v60;
  int v61;
  unint64_t v62;
  int v63;
  size_t v64;
  unint64_t v65;
  int v66;
  size_t v67;
  id v69;
  id *v70;

  v69 = result;
  v6 = *(_QWORD **)(a3 + 8);
  if (!v6)
    goto LABEL_12;
  v7 = a3 + 8;
  do
  {
    v8 = v6[4];
    v9 = v8 >= (unint64_t)result;
    if (v8 >= (unint64_t)result)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (uint64_t)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != a3 + 8 && *(_QWORD *)(v7 + 32) <= (unint64_t)result)
  {
    if (a4)
    {
      v65 = (unint64_t)a2[2];
      if (v65 >= 0xFFFFFFFFFFFFFFFCLL)
        goto LABEL_150;
      v66 = *(_DWORD *)(v7 + 40);
      v67 = (size_t)a2[1];
      if (v67 >= v65 + 4)
      {
        result = *a2;
      }
      else
      {
        if (!v67)
        {
          v67 = 128;
          a2[1] = (char *)128;
        }
        while (v67 < v65 + 4)
        {
          if (v67 >> 1 >= ~v67)
            v67 = v65 + 4;
          else
            v67 += v67 >> 1;
        }
        result = (char *)malloc_type_realloc(*a2, v67, 0x227314A4uLL);
        *a2 = result;
        if (!result)
          goto LABEL_150;
        a2[1] = (char *)v67;
        v65 = (unint64_t)a2[2];
      }
      *(_DWORD *)&result[v65] = v66;
      a2[2] += 4;
    }
  }
  else
  {
LABEL_12:
    v11 = *(_DWORD *)(a3 + 16) + 1;
    v70 = &v69;
    *((_DWORD *)std::__tree<std::__value_type<MTLStructType *,unsigned int>,std::__map_value_compare<MTLStructType *,std::__value_type<MTLStructType *,unsigned int>,std::less<MTLStructType *>,true>,std::allocator<std::__value_type<MTLStructType *,unsigned int>>>::__emplace_unique_key_args<MTLStructType *,std::piecewise_construct_t const&,std::tuple<MTLStructType * const&>,std::tuple<>>((uint64_t **)a3, (unint64_t *)&v69, (uint64_t)&std::piecewise_construct, &v70)+ 10) = v11;
    if (a4)
    {
      v12 = (unint64_t)a2[2];
      if (v12 >= 0xFFFFFFFFFFFFFFFCLL)
        goto LABEL_150;
      v13 = (size_t)a2[1];
      if (v13 >= v12 + 4)
      {
        v14 = *a2;
      }
      else
      {
        if (!v13)
        {
          v13 = 128;
          a2[1] = (char *)128;
        }
        while (v13 < v12 + 4)
        {
          if (v13 >> 1 >= ~v13)
            v13 = v12 + 4;
          else
            v13 += v13 >> 1;
        }
        v14 = (char *)malloc_type_realloc(*a2, v13, 0x227314A4uLL);
        *a2 = v14;
        if (!v14)
          goto LABEL_150;
        a2[1] = (char *)v13;
        v12 = (unint64_t)a2[2];
      }
      *(_DWORD *)&v14[v12] = v11;
      a2[2] += 4;
    }
    v15 = objc_msgSend((id)objc_msgSend(v69, "members"), "count");
    v16 = (unint64_t)a2[2];
    if (v16 >= 0xFFFFFFFFFFFFFFFCLL)
      goto LABEL_150;
    v17 = v15;
    v18 = (size_t)a2[1];
    if (v18 >= v16 + 4)
    {
      result = *a2;
    }
    else
    {
      if (!v18)
      {
        v18 = 128;
        a2[1] = (char *)128;
      }
      while (v18 < v16 + 4)
      {
        if (v18 >> 1 >= ~v18)
          v18 = v16 + 4;
        else
          v18 += v18 >> 1;
      }
      result = (char *)malloc_type_realloc(*a2, v18, 0x227314A4uLL);
      *a2 = result;
      if (!result)
        goto LABEL_150;
      a2[1] = (char *)v18;
      v16 = (unint64_t)a2[2];
    }
    *(_DWORD *)&result[v16] = v17;
    a2[2] += 4;
    v19 = v17;
    if (v17)
    {
      v20 = 0;
      while (1)
      {
        v21 = (void *)objc_msgSend((id)objc_msgSend(v69, "members"), "objectAtIndexedSubscript:", v20);
        v22 = objc_msgSend(v21, "dataType");
        v23 = objc_msgSend(v21, "indirectArgumentType") ? 57 : v22;
        v24 = (const char *)objc_msgSend((id)objc_msgSend(v21, "name"), "UTF8String");
        v25 = strlen(v24);
        v26 = v25 + 1;
        v27 = a2[2];
        if (__CFADD__(v27, v25 + 1))
          break;
        v28 = v25;
        v29 = (size_t)a2[1];
        if (v29 >= (unint64_t)&v27[v26])
        {
          v30 = *a2;
        }
        else
        {
          if (!v29)
          {
            a2[1] = (char *)128;
            v29 = 128;
          }
          while (v29 < (unint64_t)&v27[v26])
          {
            if (v29 >> 1 >= ~v29)
              v29 = (size_t)&v27[v26];
            else
              v29 += v29 >> 1;
          }
          v30 = (char *)malloc_type_realloc(*a2, v29, 0x227314A4uLL);
          *a2 = v30;
          if (!v30)
            break;
          a2[1] = (char *)v29;
          v27 = a2[2];
        }
        memcpy(&v27[(_QWORD)v30], v24, v28);
        a2[2][v28 + (_QWORD)*a2] = 0;
        a2[2] += v26;
        v31 = objc_msgSend(v21, "offset");
        v32 = (unint64_t)a2[2];
        if (v32 >= 0xFFFFFFFFFFFFFFFCLL)
          break;
        v33 = v31;
        v34 = (size_t)a2[1];
        if (v34 >= v32 + 4)
        {
          v35 = *a2;
        }
        else
        {
          if (!v34)
          {
            a2[1] = (char *)128;
            v34 = 128;
          }
          while (v34 < v32 + 4)
          {
            if (v34 >> 1 >= ~v34)
              v34 = v32 + 4;
            else
              v34 += v34 >> 1;
          }
          v35 = (char *)malloc_type_realloc(*a2, v34, 0x227314A4uLL);
          *a2 = v35;
          if (!v35)
            break;
          a2[1] = (char *)v34;
          v32 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v35[v32] = v33;
        a2[2] += 4;
        v36 = objc_msgSend(v21, "indirectArgumentIndex");
        v37 = (unint64_t)a2[2];
        if (v37 >= 0xFFFFFFFFFFFFFFFCLL)
          break;
        v38 = v36;
        v39 = (size_t)a2[1];
        if (v39 >= v37 + 4)
        {
          v40 = *a2;
        }
        else
        {
          if (!v39)
          {
            a2[1] = (char *)128;
            v39 = 128;
          }
          while (v39 < v37 + 4)
          {
            if (v39 >> 1 >= ~v39)
              v39 = v37 + 4;
            else
              v39 += v39 >> 1;
          }
          v40 = (char *)malloc_type_realloc(*a2, v39, 0x227314A4uLL);
          *a2 = v40;
          if (!v40)
            break;
          a2[1] = (char *)v39;
          v37 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v40[v37] = v38;
        v41 = a2[2];
        v42 = v41 + 4;
        a2[2] = v41 + 4;
        if ((unint64_t)(v41 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
          break;
        v43 = (size_t)(v41 + 8);
        v44 = (size_t)a2[1];
        if (v44 >= v43)
        {
          v45 = *a2;
        }
        else
        {
          if (!v44)
          {
            a2[1] = (char *)128;
            v44 = 128;
          }
          while (v44 < v43)
          {
            if (v44 >> 1 >= ~v44)
              v44 = v43;
            else
              v44 += v44 >> 1;
          }
          v45 = (char *)malloc_type_realloc(*a2, v44, 0x227314A4uLL);
          *a2 = v45;
          if (!v45)
            break;
          a2[1] = (char *)v44;
          v42 = a2[2];
        }
        *(_DWORD *)&v42[(_QWORD)v45] = v23;
        a2[2] += 4;
        v46 = objc_msgSend(v21, "pixelFormat");
        v47 = (unint64_t)a2[2];
        if (v47 >= 0xFFFFFFFFFFFFFFFCLL)
          break;
        v48 = v46;
        v49 = (size_t)a2[1];
        if (v49 >= v47 + 4)
        {
          v50 = *a2;
        }
        else
        {
          if (!v49)
          {
            a2[1] = (char *)128;
            v49 = 128;
          }
          while (v49 < v47 + 4)
          {
            if (v49 >> 1 >= ~v49)
              v49 = v47 + 4;
            else
              v49 += v49 >> 1;
          }
          v50 = (char *)malloc_type_realloc(*a2, v49, 0x227314A4uLL);
          *a2 = v50;
          if (!v50)
            break;
          a2[1] = (char *)v49;
          v47 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v50[v47] = v48;
        a2[2] += 4;
        v51 = objc_msgSend(v21, "aluType");
        v52 = (unint64_t)a2[2];
        if (v52 >= 0xFFFFFFFFFFFFFFFCLL)
          break;
        v53 = v51;
        v54 = (size_t)a2[1];
        if (v54 >= v52 + 4)
        {
          v55 = *a2;
        }
        else
        {
          if (!v54)
          {
            a2[1] = (char *)128;
            v54 = 128;
          }
          while (v54 < v52 + 4)
          {
            if (v54 >> 1 >= ~v54)
              v54 = v52 + 4;
            else
              v54 += v54 >> 1;
          }
          v55 = (char *)malloc_type_realloc(*a2, v54, 0x227314A4uLL);
          *a2 = v55;
          if (!v55)
            break;
          a2[1] = (char *)v54;
          v52 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v55[v52] = v53;
        a2[2] += 4;
        if (v23 == 2)
        {
          serializeArrayType((void *)objc_msgSend(v21, "arrayType"), (void **)a2, a3, a4);
        }
        else if (v23 == 1)
        {
          serializeStructTypeInternal(objc_msgSend(v21, "structType"), a2, a3, a4);
        }
        else if (objc_msgSend(v21, "indirectArgumentType"))
        {
          serializeIndirectArgument(objc_msgSend(v21, "indirectArgumentType"), a2, a3, a4);
        }
        v56 = objc_msgSend(v21, "render_target");
        v57 = (unint64_t)a2[2];
        if (v57 >= 0xFFFFFFFFFFFFFFFCLL)
          break;
        v58 = v56;
        v59 = (size_t)a2[1];
        if (v59 >= v57 + 4)
        {
          v60 = *a2;
        }
        else
        {
          if (!v59)
          {
            a2[1] = (char *)128;
            v59 = 128;
          }
          while (v59 < v57 + 4)
          {
            if (v59 >> 1 >= ~v59)
              v59 = v57 + 4;
            else
              v59 += v59 >> 1;
          }
          v60 = (char *)malloc_type_realloc(*a2, v59, 0x227314A4uLL);
          *a2 = v60;
          if (!v60)
            break;
          a2[1] = (char *)v59;
          v57 = (unint64_t)a2[2];
        }
        *(_DWORD *)&v60[v57] = v58;
        a2[2] += 4;
        v61 = objc_msgSend(v21, "raster_order_group");
        v62 = (unint64_t)a2[2];
        if (v62 >= 0xFFFFFFFFFFFFFFFCLL)
          break;
        v63 = v61;
        v64 = (size_t)a2[1];
        if (v64 >= v62 + 4)
        {
          result = *a2;
        }
        else
        {
          if (!v64)
          {
            a2[1] = (char *)128;
            v64 = 128;
          }
          while (v64 < v62 + 4)
          {
            if (v64 >> 1 >= ~v64)
              v64 = v62 + 4;
            else
              v64 += v64 >> 1;
          }
          result = (char *)malloc_type_realloc(*a2, v64, 0x227314A4uLL);
          *a2 = result;
          if (!result)
            break;
          a2[1] = (char *)v64;
          v62 = (unint64_t)a2[2];
        }
        *(_DWORD *)&result[v62] = v63;
        a2[2] += 4;
        if (++v20 == v19)
          return result;
      }
LABEL_150:
      abort();
    }
  }
  return result;
}

void serializeIndirectArgument(uint64_t a1, char **a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  void *__p;
  void *v10;
  uint64_t v11;

  v8 = operator new(8uLL);
  *v8 = a1;
  v10 = 0;
  v11 = 0;
  __p = 0;
  std::vector<MTLBindingInternal *>::__init_with_size[abi:ne180100]<MTLBindingInternal **,MTLBindingInternal **>(&__p, v8, (uint64_t)(v8 + 1), 1uLL);
  serializeBindings((uint64_t *)&__p, a2, 0, a3, a4);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  operator delete(v8);
}

void sub_182702250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  operator delete(v11);
  _Unwind_Resume(a1);
}

char *serializeBindings(uint64_t *a1, char **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char *result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  size_t v19;
  size_t v20;
  char *v21;
  size_t v22;
  size_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  unint64_t v34;
  int v35;
  size_t v36;
  char *v37;
  char *v38;
  char *v39;
  size_t v40;
  size_t v41;
  int v42;
  unint64_t v43;
  int v44;
  size_t v45;
  char *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  size_t v53;
  char *v54;
  char *v55;
  char *v56;
  size_t v57;
  size_t v58;
  char *v59;
  char *v60;
  char *v61;
  size_t v62;
  size_t v63;
  char *v64;
  char *v65;
  char *v66;
  size_t v67;
  size_t v68;
  int v69;
  int v70;
  unint64_t v71;
  size_t v72;
  char *v73;
  int v74;
  unint64_t v75;
  size_t v76;
  char *v77;
  int v78;
  unint64_t v79;
  int v80;
  size_t v81;
  char *v82;
  char *v83;
  size_t v84;
  char *v85;
  size_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  size_t v92;
  char *v93;
  char *v94;
  char *v95;
  size_t v96;
  size_t v97;
  char *v98;
  char *v99;
  char *v100;
  size_t v101;
  size_t v102;
  char *v103;
  char *v104;
  size_t v105;
  uint64_t i;
  void *v107;
  unint64_t v108;
  size_t v109;

  v5 = (unint64_t)a2[2];
  if (v5 >= 0xFFFFFFFFFFFFFFFCLL)
    goto LABEL_251;
  v10 = *a1;
  v9 = a1[1];
  v11 = (size_t)a2[1];
  if (v11 >= v5 + 4)
  {
    result = *a2;
  }
  else
  {
    if (!v11)
    {
      v11 = 128;
      a2[1] = (char *)128;
    }
    while (v11 < v5 + 4)
    {
      if (v11 >> 1 >= ~v11)
        v11 = v5 + 4;
      else
        v11 += v11 >> 1;
    }
    result = (char *)malloc_type_realloc(*a2, v11, 0x227314A4uLL);
    *a2 = result;
    if (!result)
      goto LABEL_251;
    a2[1] = (char *)v11;
    v5 = (unint64_t)a2[2];
  }
  v13 = (v9 - v10) >> 3;
  v14 = &result[v5];
  *v14 = (unint64_t)(v9 - v10) >> 3;
  v14[1] = BYTE1(v13);
  v14[2] = BYTE2(v13);
  v14[3] = BYTE3(v13);
  a2[2] += 4;
  v15 = ((unint64_t)(v9 - v10) >> 3);
  if (((v9 - v10) & 0x7FFFFFFF8) != 0)
  {
    v16 = 0;
    while (2)
    {
      v17 = *(void **)(*a1 + 8 * v16);
      v18 = (const char *)objc_msgSend((id)objc_msgSend(v17, "name"), "UTF8String");
      v19 = strlen(v18);
      v20 = v19 + 1;
      v21 = a2[2];
      if (!__CFADD__(v21, v19 + 1))
      {
        v22 = v19;
        v23 = (size_t)a2[1];
        if (v23 >= (unint64_t)&v21[v20])
        {
          v24 = *a2;
        }
        else
        {
          if (!v23)
          {
            a2[1] = (char *)128;
            v23 = 128;
          }
          while (v23 < (unint64_t)&v21[v20])
          {
            if (v23 >> 1 >= ~v23)
              v23 = (size_t)&v21[v20];
            else
              v23 += v23 >> 1;
          }
          v24 = (char *)malloc_type_realloc(*a2, v23, 0x227314A4uLL);
          *a2 = v24;
          if (!v24)
            break;
          a2[1] = (char *)v23;
          v21 = a2[2];
        }
        memcpy(&v21[(_QWORD)v24], v18, v22);
        a2[2][v22 + (_QWORD)*a2] = 0;
        a2[2] += v20;
        v25 = 0;
        switch(objc_msgSend(v17, "type"))
        {
          case 0:
            if (objc_msgSend((id)objc_msgSend(v17, "bufferPointerType"), "isConstantBuffer"))
              v25 = 1;
            else
              v25 = 2;
            goto LABEL_44;
          case 1:
            v25 = 3;
            goto LABEL_44;
          case 2:
            v25 = 4;
            goto LABEL_44;
          case 3:
            v25 = 5;
            goto LABEL_44;
          case 4:
            v25 = 8;
            goto LABEL_44;
          case 15:
            v25 = 6;
            goto LABEL_44;
          case 16:
          case 17:
          case 18:
            break;
          case 19:
            v25 = 12;
            goto LABEL_44;
          case 20:
            v25 = 11;
            goto LABEL_44;
          case 21:
            v25 = 13;
            goto LABEL_44;
          case 22:
            v25 = 14;
            goto LABEL_44;
          case 24:
            v25 = 16;
            goto LABEL_44;
          case 25:
            v25 = 18;
            goto LABEL_44;
          case 26:
            v25 = 19;
            goto LABEL_44;
          case 27:
            v25 = 17;
            goto LABEL_44;
          case 34:
            v25 = 21;
            goto LABEL_44;
          case 35:
            v25 = 22;
            goto LABEL_44;
          default:
LABEL_44:
            v26 = objc_msgSend(v17, "access");
            if (objc_msgSend(v17, "isActive"))
              v27 = 512;
            else
              v27 = 0;
            v28 = (unint64_t)a2[2];
            if (v28 >= 0xFFFFFFFFFFFFFFFCLL)
              break;
            v29 = (size_t)a2[1];
            if (v29 >= v28 + 4)
            {
              v30 = *a2;
            }
            else
            {
              if (!v29)
              {
                a2[1] = (char *)128;
                v29 = 128;
              }
              while (v29 < v28 + 4)
              {
                if (v29 >> 1 >= ~v29)
                  v29 = v28 + 4;
                else
                  v29 += v29 >> 1;
              }
              v30 = (char *)malloc_type_realloc(*a2, v29, 0x227314A4uLL);
              *a2 = v30;
              if (!v30)
                break;
              a2[1] = (char *)v29;
              v28 = (unint64_t)a2[2];
            }
            v31 = v25 | (32 * v26);
            v32 = &v30[v28];
            *v32 = v31;
            v32[1] = (unsigned __int16)(v31 + v27) >> 8;
            v32[2] = (v31 + v27) >> 16;
            v32[3] = (v31 + v27) >> 24;
            a2[2] += 4;
            v33 = objc_msgSend(v17, "index");
            result = (char *)objc_msgSend(v17, "arrayLength");
            if ((v25 & 0xF) == 6)
            {
LABEL_82:
              switch(v25)
              {
                case 1:
                case 2:
                case 3:
                case 14:
                case 21:
                  v42 = objc_msgSend(v17, "bufferDataType");
                  v43 = (unint64_t)a2[2];
                  if (v43 >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v44 = v42;
                  v45 = (size_t)a2[1];
                  if (v45 >= v43 + 4)
                  {
                    v46 = *a2;
                  }
                  else
                  {
                    if (!v45)
                    {
                      a2[1] = (char *)128;
                      v45 = 128;
                    }
                    while (v45 < v43 + 4)
                    {
                      if (v45 >> 1 >= ~v45)
                        v45 = v43 + 4;
                      else
                        v45 += v45 >> 1;
                    }
                    v46 = (char *)malloc_type_realloc(*a2, v45, 0x227314A4uLL);
                    *a2 = v46;
                    if (!v46)
                      goto LABEL_251;
                    a2[1] = (char *)v45;
                    v43 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v46[v43] = v44;
                  a2[2] += 4;
                  v47 = objc_msgSend(v17, "bufferPixelFormat");
                  v48 = objc_msgSend(v17, "bufferALUType");
                  v49 = objc_msgSend(v17, "bufferAlignment");
                  v50 = objc_msgSend(v17, "bufferDataSize");
                  v51 = (unint64_t)a2[2];
                  if (v51 >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v52 = v50;
                  v53 = (size_t)a2[1];
                  if (v53 >= v51 + 4)
                  {
                    v54 = *a2;
                  }
                  else
                  {
                    if (!v53)
                    {
                      a2[1] = (char *)128;
                      v53 = 128;
                    }
                    while (v53 < v51 + 4)
                    {
                      if (v53 >> 1 >= ~v53)
                        v53 = v51 + 4;
                      else
                        v53 += v53 >> 1;
                    }
                    v54 = (char *)malloc_type_realloc(*a2, v53, 0x227314A4uLL);
                    *a2 = v54;
                    if (!v54)
                      goto LABEL_251;
                    a2[1] = (char *)v53;
                    v51 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v54[v51] = v47;
                  v55 = a2[2];
                  v56 = v55 + 4;
                  a2[2] = v55 + 4;
                  if ((unint64_t)(v55 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v57 = (size_t)(v55 + 8);
                  v58 = (size_t)a2[1];
                  if (v58 >= v57)
                  {
                    v59 = *a2;
                  }
                  else
                  {
                    if (!v58)
                    {
                      a2[1] = (char *)128;
                      v58 = 128;
                    }
                    while (v58 < v57)
                    {
                      if (v58 >> 1 >= ~v58)
                        v58 = v57;
                      else
                        v58 += v58 >> 1;
                    }
                    v59 = (char *)malloc_type_realloc(*a2, v58, 0x227314A4uLL);
                    *a2 = v59;
                    if (!v59)
                      goto LABEL_251;
                    a2[1] = (char *)v58;
                    v56 = a2[2];
                  }
                  *(_DWORD *)&v56[(_QWORD)v59] = v48;
                  v60 = a2[2];
                  v61 = v60 + 4;
                  a2[2] = v60 + 4;
                  if ((unint64_t)(v60 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v62 = (size_t)(v60 + 8);
                  v63 = (size_t)a2[1];
                  if (v63 >= v62)
                  {
                    v64 = *a2;
                  }
                  else
                  {
                    if (!v63)
                    {
                      a2[1] = (char *)128;
                      v63 = 128;
                    }
                    while (v63 < v62)
                    {
                      if (v63 >> 1 >= ~v63)
                        v63 = v62;
                      else
                        v63 += v63 >> 1;
                    }
                    v64 = (char *)malloc_type_realloc(*a2, v63, 0x227314A4uLL);
                    *a2 = v64;
                    if (!v64)
                      goto LABEL_251;
                    a2[1] = (char *)v63;
                    v61 = a2[2];
                  }
                  *(_DWORD *)&v61[(_QWORD)v64] = v49;
                  v65 = a2[2];
                  v66 = v65 + 4;
                  a2[2] = v65 + 4;
                  if ((unint64_t)(v65 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v67 = (size_t)(v65 + 8);
                  v68 = (size_t)a2[1];
                  if (v68 >= v67)
                    goto LABEL_230;
                  if (!v68)
                  {
                    a2[1] = (char *)128;
                    v68 = 128;
                  }
                  while (v68 < v67)
                  {
                    if (v68 >> 1 >= ~v68)
                      v68 = v67;
                    else
                      v68 += v68 >> 1;
                  }
                  goto LABEL_228;
                case 4:
                  v74 = objc_msgSend(v17, "textureType");
                  v75 = (unint64_t)a2[2];
                  if (v75 >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v52 = v74;
                  v76 = (size_t)a2[1];
                  if (v76 >= v75 + 4)
                  {
                    v77 = *a2;
                  }
                  else
                  {
                    if (!v76)
                    {
                      a2[1] = (char *)128;
                      v76 = 128;
                    }
                    while (v76 < v75 + 4)
                    {
                      if (v76 >> 1 >= ~v76)
                        v76 = v75 + 4;
                      else
                        v76 += v76 >> 1;
                    }
                    v77 = (char *)malloc_type_realloc(*a2, v76, 0x227314A4uLL);
                    *a2 = v77;
                    if (!v77)
                      goto LABEL_251;
                    a2[1] = (char *)v76;
                    v75 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v77[v75] = 0;
                  v85 = a2[2];
                  v66 = v85 + 4;
                  a2[2] = v85 + 4;
                  if ((unint64_t)(v85 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v86 = (size_t)(v85 + 8);
                  v68 = (size_t)a2[1];
                  if (v68 >= v86)
                    goto LABEL_230;
                  if (!v68)
                  {
                    a2[1] = (char *)128;
                    v68 = 128;
                  }
                  while (v68 < v86)
                  {
                    if (v68 >> 1 >= ~v68)
                      v68 = v86;
                    else
                      v68 += v68 >> 1;
                  }
                  goto LABEL_228;
                case 5:
                case 11:
                case 12:
                case 13:
                case 16:
                case 17:
                case 18:
                case 19:
                  goto LABEL_232;
                case 6:
                case 22:
                  v69 = objc_msgSend(v17, "builtInDataType");
                  v70 = objc_msgSend(v17, "builtInType");
                  v71 = (unint64_t)a2[2];
                  if (v71 >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v52 = v70;
                  v72 = (size_t)a2[1];
                  if (v72 >= v71 + 4)
                  {
                    v73 = *a2;
                  }
                  else
                  {
                    if (!v72)
                    {
                      a2[1] = (char *)128;
                      v72 = 128;
                    }
                    while (v72 < v71 + 4)
                    {
                      if (v72 >> 1 >= ~v72)
                        v72 = v71 + 4;
                      else
                        v72 += v72 >> 1;
                    }
                    v73 = (char *)malloc_type_realloc(*a2, v72, 0x227314A4uLL);
                    *a2 = v73;
                    if (!v73)
                      goto LABEL_251;
                    a2[1] = (char *)v72;
                    v71 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v73[v71] = v69;
                  v83 = a2[2];
                  v66 = v83 + 4;
                  a2[2] = v83 + 4;
                  if ((unint64_t)(v83 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v84 = (size_t)(v83 + 8);
                  v68 = (size_t)a2[1];
                  if (v68 >= v84)
                    goto LABEL_230;
                  if (!v68)
                  {
                    a2[1] = (char *)128;
                    v68 = 128;
                  }
                  while (v68 < v84)
                  {
                    if (v68 >> 1 >= ~v68)
                      v68 = v84;
                    else
                      v68 += v68 >> 1;
                  }
                  goto LABEL_228;
                case 8:
                  v78 = objc_msgSend(v17, "indirectConstantDataType");
                  v79 = (unint64_t)a2[2];
                  if (v79 >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v80 = v78;
                  v81 = (size_t)a2[1];
                  if (v81 >= v79 + 4)
                  {
                    v82 = *a2;
                  }
                  else
                  {
                    if (!v81)
                    {
                      a2[1] = (char *)128;
                      v81 = 128;
                    }
                    while (v81 < v79 + 4)
                    {
                      if (v81 >> 1 >= ~v81)
                        v81 = v79 + 4;
                      else
                        v81 += v81 >> 1;
                    }
                    v82 = (char *)malloc_type_realloc(*a2, v81, 0x227314A4uLL);
                    *a2 = v82;
                    if (!v82)
                      goto LABEL_251;
                    a2[1] = (char *)v81;
                    v79 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v82[v79] = v80;
                  a2[2] += 4;
                  v87 = objc_msgSend(v17, "bufferPixelFormat");
                  v88 = objc_msgSend(v17, "bufferALUType");
                  v89 = objc_msgSend(v17, "indirectConstantAlignment");
                  v90 = objc_msgSend(v17, "indirectConstantDataSize");
                  v91 = (unint64_t)a2[2];
                  if (v91 >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v52 = v90;
                  v92 = (size_t)a2[1];
                  if (v92 >= v91 + 4)
                  {
                    v93 = *a2;
                  }
                  else
                  {
                    if (!v92)
                    {
                      a2[1] = (char *)128;
                      v92 = 128;
                    }
                    while (v92 < v91 + 4)
                    {
                      if (v92 >> 1 >= ~v92)
                        v92 = v91 + 4;
                      else
                        v92 += v92 >> 1;
                    }
                    v93 = (char *)malloc_type_realloc(*a2, v92, 0x227314A4uLL);
                    *a2 = v93;
                    if (!v93)
                      goto LABEL_251;
                    a2[1] = (char *)v92;
                    v91 = (unint64_t)a2[2];
                  }
                  *(_DWORD *)&v93[v91] = v87;
                  v94 = a2[2];
                  v95 = v94 + 4;
                  a2[2] = v94 + 4;
                  if ((unint64_t)(v94 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v96 = (size_t)(v94 + 8);
                  v97 = (size_t)a2[1];
                  if (v97 >= v96)
                  {
                    v98 = *a2;
                  }
                  else
                  {
                    if (!v97)
                    {
                      a2[1] = (char *)128;
                      v97 = 128;
                    }
                    while (v97 < v96)
                    {
                      if (v97 >> 1 >= ~v97)
                        v97 = v96;
                      else
                        v97 += v97 >> 1;
                    }
                    v98 = (char *)malloc_type_realloc(*a2, v97, 0x227314A4uLL);
                    *a2 = v98;
                    if (!v98)
                      goto LABEL_251;
                    a2[1] = (char *)v97;
                    v95 = a2[2];
                  }
                  *(_DWORD *)&v95[(_QWORD)v98] = v88;
                  v99 = a2[2];
                  v100 = v99 + 4;
                  a2[2] = v99 + 4;
                  if ((unint64_t)(v99 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v101 = (size_t)(v99 + 8);
                  v102 = (size_t)a2[1];
                  if (v102 >= v101)
                  {
                    v103 = *a2;
                  }
                  else
                  {
                    if (!v102)
                    {
                      a2[1] = (char *)128;
                      v102 = 128;
                    }
                    while (v102 < v101)
                    {
                      if (v102 >> 1 >= ~v102)
                        v102 = v101;
                      else
                        v102 += v102 >> 1;
                    }
                    v103 = (char *)malloc_type_realloc(*a2, v102, 0x227314A4uLL);
                    *a2 = v103;
                    if (!v103)
                      goto LABEL_251;
                    a2[1] = (char *)v102;
                    v100 = a2[2];
                  }
                  *(_DWORD *)&v100[(_QWORD)v103] = v89;
                  v104 = a2[2];
                  v66 = v104 + 4;
                  a2[2] = v104 + 4;
                  if ((unint64_t)(v104 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
                    goto LABEL_251;
                  v105 = (size_t)(v104 + 8);
                  v68 = (size_t)a2[1];
                  if (v68 >= v105)
                  {
LABEL_230:
                    result = *a2;
                  }
                  else
                  {
                    if (!v68)
                    {
                      a2[1] = (char *)128;
                      v68 = 128;
                    }
                    while (v68 < v105)
                    {
                      if (v68 >> 1 >= ~v68)
                        v68 = v105;
                      else
                        v68 += v68 >> 1;
                    }
LABEL_228:
                    result = (char *)malloc_type_realloc(*a2, v68, 0x227314A4uLL);
                    *a2 = result;
                    if (!result)
                      goto LABEL_251;
                    a2[1] = (char *)v68;
                    v66 = a2[2];
                  }
                  *(_DWORD *)&v66[(_QWORD)result] = v52;
                  a2[2] += 4;
LABEL_232:
                  if (++v16 == v15)
                    goto LABEL_233;
                  continue;
                default:
                  goto LABEL_251;
              }
            }
            v34 = (unint64_t)a2[2];
            if (v34 >= 0xFFFFFFFFFFFFFFFCLL)
              goto LABEL_251;
            v35 = (int)result;
            v36 = (size_t)a2[1];
            if (v36 >= v34 + 4)
            {
              v37 = *a2;
            }
            else
            {
              if (!v36)
              {
                a2[1] = (char *)128;
                v36 = 128;
              }
              while (v36 < v34 + 4)
              {
                if (v36 >> 1 >= ~v36)
                  v36 = v34 + 4;
                else
                  v36 += v36 >> 1;
              }
              v37 = (char *)malloc_type_realloc(*a2, v36, 0x227314A4uLL);
              *a2 = v37;
              if (!v37)
                goto LABEL_251;
              a2[1] = (char *)v36;
              v34 = (unint64_t)a2[2];
            }
            *(_DWORD *)&v37[v34] = v33;
            v38 = a2[2];
            v39 = v38 + 4;
            a2[2] = v38 + 4;
            if ((unint64_t)(v38 + 4) >= 0xFFFFFFFFFFFFFFFCLL)
              goto LABEL_251;
            v40 = (size_t)(v38 + 8);
            v41 = (size_t)a2[1];
            if (v41 >= v40)
            {
              result = *a2;
              goto LABEL_81;
            }
            if (!v41)
            {
              a2[1] = (char *)128;
              v41 = 128;
            }
            while (v41 < v40)
            {
              if (v41 >> 1 >= ~v41)
                v41 = v40;
              else
                v41 += v41 >> 1;
            }
            result = (char *)malloc_type_realloc(*a2, v41, 0x227314A4uLL);
            *a2 = result;
            if (result)
            {
              a2[1] = (char *)v41;
              v39 = a2[2];
LABEL_81:
              *(_DWORD *)&v39[(_QWORD)result] = v35;
              a2[2] += 4;
              goto LABEL_82;
            }
            break;
        }
      }
      break;
    }
LABEL_251:
    abort();
  }
LABEL_233:
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      v107 = *(void **)(*a1 + 8 * i);
      if (objc_msgSend(v107, "structType"))
      {
        result = (char *)serializeStructTypeInternal(objc_msgSend(v107, "structType"), a2, a4, a5);
      }
      else
      {
        v108 = (unint64_t)a2[2];
        if (v108 >= 0xFFFFFFFFFFFFFFFCLL)
          goto LABEL_251;
        v109 = (size_t)a2[1];
        if (v109 >= v108 + 4)
        {
          result = *a2;
        }
        else
        {
          if (!v109)
          {
            a2[1] = (char *)128;
            v109 = 128;
          }
          while (v109 < v108 + 4)
          {
            if (v109 >> 1 >= ~v109)
              v109 = v108 + 4;
            else
              v109 += v109 >> 1;
          }
          result = (char *)malloc_type_realloc(*a2, v109, 0x227314A4uLL);
          *a2 = result;
          if (!result)
            goto LABEL_251;
          a2[1] = (char *)v109;
          v108 = (unint64_t)a2[2];
        }
        *(_DWORD *)&result[v108] = 0;
        a2[2] += 4;
      }
    }
  }
  return result;
}

void serializeStructType(char *a1, char **a2, unsigned int a3)
{
  _QWORD **v3;
  _QWORD *v4[2];

  v4[0] = 0;
  v4[1] = 0;
  v3 = v4;
  serializeStructTypeInternal(a1, a2, (uint64_t)&v3, a3);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)&v3, v4[0]);
}

void sub_182702F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t MTLInputStageReflectionReader::deserializeStageInputDescriptor(MTLInputStageReflectionReader *this, const void *a2, uint64_t a3, const BOOL *a4)
{
  return (*(uint64_t (**)(_QWORD, const void *, uint64_t, const BOOL *))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), a2, a3, a4);
}

void MTLIntersectionReflectionDeserializer::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  unint64_t v6;
  _DWORD *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  int v14;
  size_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  MTLTag *v29;
  BOOL v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  size_t v34;
  size_t size_ptr;
  void *buffer_ptr;

  if (data)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v6 = *(_QWORD *)(a1 + 96);
    v8 = size_ptr;
    v7 = buffer_ptr;
    v32 = (char *)buffer_ptr;
    v33 = size_ptr;
    v34 = 0;
    *(_DWORD *)(a1 + 104) = 0;
    if (v8 >= 8 && *(_QWORD *)v7 == 0x4E494253504C544DLL)
    {
      if (v8 < 9 || (v8 & 0xFFFFFFFFFFFFFFFCLL) == 8)
        goto LABEL_40;
      v9 = v7[2];
      v34 = 12;
      *(_DWORD *)(a1 + 104) = v9;
    }
    v10 = (v6 >> 1) & 1;
    deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v32, (v6 >> 1) & 1);
    v12 = v33;
    v11 = v34;
    if (v33 <= v34 || v33 - v34 <= 3)
      goto LABEL_40;
    v13 = v32;
    v14 = *(_DWORD *)&v32[v34];
    v15 = v34 + 4;
    v34 += 4;
    *(_DWORD *)(a1 + 40) = v14;
    v16 = *(_DWORD *)(a1 + 104);
    if (v16 >= 0x10000)
    {
      v30 = v12 > v15;
      v17 = v12 - v15;
      if (!v30 || v17 <= 3)
        goto LABEL_40;
      v18 = *(unsigned int *)&v13[v15];
      v34 = v11 + 8;
      if ((_DWORD)v18)
      {
        v19 = objc_alloc(MEMORY[0x1E0C99D50]);
        v20 = v34;
        if (v34 >= v33)
          goto LABEL_40;
        v34 += v18;
        if (v20 + v18 > v33)
          goto LABEL_40;
        v21 = objc_msgSend(v19, "initWithBytes:length:", &v32[v20], v18);
        v16 = *(_DWORD *)(a1 + 104);
      }
      else
      {
        v21 = 0;
      }
      *(_QWORD *)(a1 + 48) = v21;
      if (v16 > 0x10000)
      {
        v23 = v33;
        v22 = v34;
        if (v33 <= v34)
          goto LABEL_40;
        if (v33 - v34 <= 3)
          goto LABEL_40;
        v24 = v32;
        v25 = *(unsigned int *)&v32[v34];
        v34 += 4;
        *(_QWORD *)(a1 + 112) = v25;
        v30 = v23 > v22 + 4;
        v26 = v23 - (v22 + 4);
        if (!v30 || v26 <= 3)
          goto LABEL_40;
        v27 = *(unsigned int *)&v24[v22 + 4];
        v34 = v22 + 8;
        *(_DWORD *)(a1 + 128) = v27;
        if ((_DWORD)v27)
        {
          *(_QWORD *)(a1 + 120) = malloc_type_malloc(8 * v27, 0x80040B8603338uLL);
          if (*(_DWORD *)(a1 + 128))
          {
            v28 = 0;
            while (1)
            {
              v29 = [MTLTag alloc];
              v30 = v33 > v34 && v33 - v34 > 3;
              if (!v30)
                break;
              v31 = *(unsigned int *)&v32[v34];
              v34 += 4;
              *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v28++) = -[MTLTag initWithTagType:](v29, "initWithTagType:", v31);
              if (v28 >= *(unsigned int *)(a1 + 128))
                goto LABEL_34;
            }
LABEL_40:
            abort();
          }
        }
LABEL_34:
        if (*(_DWORD *)(a1 + 104) >= 0x20000u)
          deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v32, v10);
      }
    }
    if (v34 != size_ptr)
      goto LABEL_40;
    v34 = size_ptr;
    if (v33 < size_ptr)
      goto LABEL_40;
    dispatch_release(v5);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = -1;
  }
}

void MTLIntersectionReflectionDeserializer::~MTLIntersectionReflectionDeserializer(MTLIntersectionReflectionDeserializer *this)
{
  void *v2;
  unint64_t v3;

  *(_QWORD *)this = &off_1E0FE1558;
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    if (*((_DWORD *)this + 32))
    {
      v3 = 0;
      do
      {

        *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v3++) = 0;
      }
      while (v3 < *((unsigned int *)this + 32));
      v2 = (void *)*((_QWORD *)this + 15);
    }
    free(v2);
  }
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
}

{
  MTLIntersectionReflectionDeserializer::~MTLIntersectionReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLStitchingReflectionDeserializer::deserializeArguments(int a1, int a2, DeserialContext *this, void **a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  MTLTextureBindingInternal *v16;
  MTLStructTypeInternal *v17;
  MTLBindingInternal *v18;
  uint64_t v19;
  MTLBindingInternal *v20;
  MTLBindingInternal *p_super;
  uint64_t v22;
  uint64_t v23;
  MTLTextureReferenceType *v24;
  MTLTextureReferenceType *v25;
  MTLPointerType *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  result = DeserialContext::deserializeUint32(this);
  if ((_DWORD)result)
  {
    v8 = (result - 1);
    v33 = 8 * result;
    v9 = 0;
    v30 = a4;
    *a4 = malloc_type_malloc(v33 - 1, 0x2C675EDDuLL);
    v29 = v8;
    v32 = 8 * v8;
    while (1)
    {
      v34 = DeserialContext::stringFromSerializedData(this);
      v10 = DeserialContext::deserializeUint32(this);
      if ((v10 & 0xF) == 6)
      {
        v11 = 0;
      }
      else
      {
        v11 = DeserialContext::deserializeUint32(this);
        DeserialContext::deserializeUint32(this);
      }
      if ((v10 & 0x1F) != 0x14)
        abort();
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      deserializeStitchingTypeInfo(this, (uint64_t)&v35);
      v12 = v35;
      v13 = v36;
      v14 = v37;
      v15 = DWORD2(v38);
      if ((uint64_t)v35 <= 58)
      {
        if ((_QWORD)v35 == 1)
          goto LABEL_15;
        if ((_QWORD)v35 != 58)
          goto LABEL_24;
        LOBYTE(v28) = v37 != 0;
        v16 = -[MTLTextureBindingInternal initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:]([MTLTextureBindingInternal alloc], "initWithName:access:isActive:locationIndex:arraySize:dataType:textureType:isDepthTexture:", v34, (_QWORD)v38, (v10 >> 9) & 1, v11, DWORD2(v38), v36, v28);
      }
      else
      {
        if ((_QWORD)v35 != 59)
        {
          if ((_QWORD)v35 == 60)
          {
            v23 = DWORD2(v35);
            v22 = HIDWORD(v35);
            if ((_QWORD)v36 == 1)
            {
              v24 = (MTLTextureReferenceType *)newStitchingStructTypeFromSerializedContext(this);
            }
            else if ((_QWORD)v36 == 58)
            {
              v24 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:]([MTLTextureReferenceType alloc], "initWithDataType:textureType:access:isDepthTexture:", __PAIR128__(*((unint64_t *)&v36 + 1), 58), (_QWORD)v38, v14 != 0);
            }
            else
            {
              v24 = -[MTLType initWithDataType:]([MTLType alloc], "initWithDataType:", (_QWORD)v36);
            }
            v25 = v24;
            LOBYTE(v27) = 0;
            v26 = -[MTLPointerType initWithElementType:elementTypeDescription:access:alignment:dataSize:elementIsIndirectArgumentBuffer:isConstantBuffer:]([MTLPointerType alloc], "initWithElementType:elementTypeDescription:access:alignment:dataSize:elementIsIndirectArgumentBuffer:isConstantBuffer:", v13, v24, 0, v22, v23, 0, v27);

            p_super = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:typeDescription:]([MTLBindingInternal alloc], "initWithName:type:access:index:active:arrayLength:typeDescription:", v34, 28, 0, v11, (v10 >> 9) & 1, v15, v26);
            goto LABEL_29;
          }
          if ((_QWORD)v35 == 138)
          {
LABEL_15:
            v17 = newStitchingStructTypeFromSerializedContext(this);
            v18 = [MTLBindingInternal alloc];
            if (v12 == 138)
              v19 = 17;
            else
              v19 = 29;
            v20 = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:typeDescription:](v18, "initWithName:type:access:index:active:arrayLength:typeDescription:", v34, v19, 0, v11, (v10 >> 9) & 1, v15, v17);
          }
          else
          {
LABEL_24:
            v17 = -[MTLType initWithDataType:]([MTLType alloc], "initWithDataType:", (_QWORD)v35);
            v20 = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:typeDescription:]([MTLBindingInternal alloc], "initWithName:type:access:index:active:arrayLength:typeDescription:", v34, 18, (v10 >> 5) & 0xF, v11, (v10 >> 9) & 1, v15, v17);
          }
          p_super = v20;

          goto LABEL_29;
        }
        v16 = -[MTLBindingInternal initWithName:type:access:index:active:arrayLength:]([MTLBindingInternal alloc], "initWithName:type:access:index:active:arrayLength:", v34, 3, (v10 >> 5) & 0xF, v11, (v10 >> 9) & 1, DWORD2(v38));
      }
      p_super = &v16->super;
LABEL_29:
      if (v32 == v9)
      {
        *a5 = -[MTLBindingInternal dataTypeDescription](p_super, "dataTypeDescription");

      }
      else
      {
        *(_QWORD *)((char *)*v30 + v9) = p_super;
      }
      v9 += 8;
      if (v33 == v9)
        return v29;
    }
  }
  return result;
}

uint64_t deserializeStitchingTypeInfo@<X0>(DeserialContext *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  *(_QWORD *)a2 = DeserialContext::deserializeUint32(a1);
  *(_DWORD *)(a2 + 8) = DeserialContext::deserializeUint32(a1);
  *(_DWORD *)(a2 + 12) = DeserialContext::deserializeUint32(a1);
  *(_QWORD *)(a2 + 16) = DeserialContext::deserializeUint32(a1);
  v4 = DeserialContext::deserializeUint32(a1);
  *(_QWORD *)(a2 + 24) = (unsigned __int16)v4;
  *(_BYTE *)(a2 + 32) = BYTE2(v4) & 1;
  *(_QWORD *)(a2 + 40) = DeserialContext::deserializeUint32(a1);
  *(_QWORD *)(a2 + 48) = DeserialContext::deserializeUint32(a1);
  result = DeserialContext::deserializeUint32(a1);
  *(_DWORD *)(a2 + 56) = result;
  return result;
}

MTLStructTypeInternal *newStitchingStructTypeFromSerializedContext(DeserialContext *a1)
{
  MTLStructTypeInternal *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  MTLTextureReferenceType *v14;
  uint64_t v15;
  _BOOL8 v16;
  MTLTextureReferenceType *v17;
  _BOOL8 v18;
  MTLType *v19;
  uint64_t v20;
  MTLTextureReferenceType *v21;
  MTLType *v22;
  MTLType *v23;
  MTLArrayType *v24;
  uint64_t v25;
  MTLPointerType *v26;
  MTLStructMemberInternal *v27;
  void *v28;
  uint64_t v30;
  _QWORD v31[2];
  MTLStructTypeInternal *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = -[MTLStructTypeInternal initWithMembers:count:typeName:]([MTLStructTypeInternal alloc], "initWithMembers:count:typeName:", 0, 0, DeserialContext::stringFromSerializedData(a1));
  v3 = DeserialContext::deserializeUint32(a1);
  if ((_DWORD)v3)
  {
    v31[1] = v31;
    v32 = v2;
    v4 = v3;
    v35 = 8 * v3;
    MEMORY[0x1E0C80A78](v3);
    v6 = (void **)((char *)v31 - v5);
    v7 = 0;
    while (1)
    {
      v37 = DeserialContext::stringFromSerializedData(a1);
      v36 = DeserialContext::deserializeUint32(a1);
      v8 = DeserialContext::deserializeUint32(a1);
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      deserializeStitchingTypeInfo(a1, (uint64_t)&v38);
      v9 = 0;
      v10 = v38;
      v11 = v39;
      v12 = v40;
      v13 = v41;
      if ((uint64_t)v38 <= 57)
      {
        if ((_QWORD)v38 == 1)
        {
LABEL_12:
          v14 = (MTLTextureReferenceType *)newStitchingStructTypeFromSerializedContext(a1);
          goto LABEL_13;
        }
        if ((_QWORD)v38 == 2)
        {
          v34 = HIDWORD(v38);
          v15 = DWORD2(v41);
          if ((_QWORD)v39 == 58)
          {
            v33 = DWORD2(v41);
            v16 = v40 != 0;
            v17 = [MTLTextureReferenceType alloc];
            v18 = v16;
            v15 = v33;
            v19 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:](v17, "initWithDataType:textureType:access:isDepthTexture:", 58, *((_QWORD *)&v11 + 1), v13, v18);
          }
          else
          {
            v19 = -[MTLType initWithDataType:]([MTLType alloc], "initWithDataType:", (_QWORD)v39);
          }
          v23 = v19;
          v24 = [MTLArrayType alloc];
          v25 = -[MTLArrayType initWithArrayLength:elementType:stride:pixelFormat:aluType:details:](v24, "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", v15, (_QWORD)v11, v34, 0, 0, v23);
          goto LABEL_22;
        }
      }
      else
      {
        switch((_QWORD)v38)
        {
          case 0x8ALL:
            goto LABEL_12;
          case 0x3CLL:
            v34 = DWORD2(v38);
            v20 = HIDWORD(v38);
            if ((_QWORD)v39 == 1)
            {
              v22 = (MTLType *)newStitchingStructTypeFromSerializedContext(a1);
            }
            else if ((_QWORD)v39 == 58)
            {
              LODWORD(v33) = v40 != 0;
              v21 = [MTLTextureReferenceType alloc];
              v22 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:](v21, "initWithDataType:textureType:access:isDepthTexture:", 58, *((_QWORD *)&v11 + 1), v13, v33);
            }
            else
            {
              v22 = -[MTLType initWithDataType:]([MTLType alloc], "initWithDataType:", *((_QWORD *)&v40 + 1));
            }
            v23 = v22;
            v26 = [MTLPointerType alloc];
            LOBYTE(v30) = 0;
            v25 = -[MTLPointerType initWithElementType:elementTypeDescription:access:alignment:dataSize:elementIsIndirectArgumentBuffer:isConstantBuffer:](v26, "initWithElementType:elementTypeDescription:access:alignment:dataSize:elementIsIndirectArgumentBuffer:isConstantBuffer:", (_QWORD)v11, v23, 0, v20, v34, 0, v30);
LABEL_22:
            v9 = (void *)v25;

            break;
          case 0x3ALL:
            v14 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:]([MTLTextureReferenceType alloc], "initWithDataType:textureType:access:isDepthTexture:", v39, (_QWORD)v41, v12 != 0);
LABEL_13:
            v9 = v14;
            break;
        }
      }
      v27 = [MTLStructMemberInternal alloc];
      v6[v7 / 8] = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:](v27, "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", v37, v36, v10, 0, 0, 0, v8, 0, v9);

      v7 += 8;
      if (v35 == v7)
      {
        v2 = v32;
        -[MTLStructTypeInternal setMembers:count:](v32, "setMembers:count:", v6, v4);
        do
        {
          v28 = *v6++;

          --v4;
        }
        while (v4);
        return v2;
      }
    }
  }
  return v2;
}

uint64_t MTLStitchingReflectionDeserializer::deserializeArguments(uint64_t a1, int a2, DeserialContext *this)
{
  unsigned int v5;
  int v6;
  uint64_t result;

  *(_DWORD *)(a1 + 36) = DeserialContext::deserializeUint32(this);
  v5 = DeserialContext::deserializeUint32(this);
  result = MTLStitchingReflectionDeserializer::deserializeArguments(v5, v6, this, (void **)(a1 + 8), (_QWORD *)(a1 + 112));
  *(_DWORD *)(a1 + 16) = result;
  *((_QWORD *)this + 2) = v5;
  if (*((_QWORD *)this + 1) < (unint64_t)v5)
    abort();
  return result;
}

void MTLStitchingReflectionDeserializer::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  int v5;
  NSObject *v6;
  _DWORD *v7;
  size_t v8;
  int v9;
  size_t v10;
  size_t v11;
  BOOL v12;
  char *v13;
  int v14;
  size_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  size_t v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  size_t v24;
  size_t size_ptr;
  void *buffer_ptr;

  if (data)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v6 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    v8 = size_ptr;
    v7 = buffer_ptr;
    v22 = (char *)buffer_ptr;
    v23 = size_ptr;
    v24 = 0;
    *(_DWORD *)(a1 + 104) = 0;
    if (v8 >= 8 && *(_QWORD *)v7 == 0x4E494253504C544DLL)
    {
      if (v8 < 9 || (v8 & 0xFFFFFFFFFFFFFFFCLL) == 8)
        goto LABEL_28;
      v9 = v7[2];
      v24 = 12;
      *(_DWORD *)(a1 + 104) = v9;
    }
    MTLStitchingReflectionDeserializer::deserializeArguments(a1, v5, (DeserialContext *)&v22);
    v11 = v23;
    v10 = v24;
    v12 = v23 > v24 && v23 - v24 > 3;
    if (!v12)
LABEL_28:
      abort();
    v13 = v22;
    v14 = *(_DWORD *)&v22[v24];
    v15 = v24 + 4;
    v24 += 4;
    *(_DWORD *)(a1 + 40) = v14;
    v16 = *(_DWORD *)(a1 + 104);
    if (v16 >= 0x10000)
    {
      v12 = v11 > v15;
      v17 = v11 - v15;
      if (!v12 || v17 <= 3)
        goto LABEL_28;
      v18 = *(unsigned int *)&v13[v15];
      v24 = v10 + 8;
      if ((_DWORD)v18)
      {
        v19 = objc_alloc(MEMORY[0x1E0C99D50]);
        v20 = v24;
        if (v24 >= v23)
          goto LABEL_28;
        v24 += v18;
        if (v20 + v18 > v23)
          goto LABEL_28;
        v21 = objc_msgSend(v19, "initWithBytes:length:", &v22[v20], v18);
        v16 = *(_DWORD *)(a1 + 104);
      }
      else
      {
        v21 = 0;
      }
      *(_QWORD *)(a1 + 48) = v21;
      if (v16 >= 0x20000)
        deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v22, 0);
    }
    if (v24 != size_ptr)
      goto LABEL_28;
    v24 = size_ptr;
    if (v23 < size_ptr)
      goto LABEL_28;
    dispatch_release(v6);
  }
  else
  {
    *(_DWORD *)(a1 + 40) = -1;
  }
}

void MTLStitchingReflectionDeserializer::~MTLStitchingReflectionDeserializer(MTLStitchingReflectionDeserializer *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E0FE1410;
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {

    *((_QWORD *)this + 14) = 0;
  }
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
}

{
  MTLStitchingReflectionDeserializer::~MTLStitchingReflectionDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

void MTLObjectOrMeshReflectionDeserializerLegacy::deserialize(uint64_t a1, void *a2, dispatch_data_t data)
{
  NSObject *v5;
  _DWORD *v6;
  size_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  int v14;
  size_t v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  size_t v24;
  size_t v25;
  size_t size_ptr;
  void *buffer_ptr;

  if (!data)
  {
    *(_DWORD *)(a1 + 40) = -1;
    return;
  }
  size_ptr = 0;
  buffer_ptr = 0;
  v5 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v7 = size_ptr;
  v6 = buffer_ptr;
  v23 = (char *)buffer_ptr;
  v24 = size_ptr;
  v25 = 0;
  v8 = *(_QWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 104) = 0;
  if (v7 >= 8 && *(_QWORD *)v6 == 0x4E494253504C544DLL)
  {
    if (v7 < 9 || (v7 & 0xFFFFFFFFFFFFFFFCLL) == 8)
      goto LABEL_25;
    v9 = v6[2];
    v25 = 12;
    *(_DWORD *)(a1 + 104) = v9;
  }
  v10 = (v8 >> 1) & 1;
  deserializeArgumentsWithDeserializer(a2, a1, (DeserialContext *)&v23, (v8 >> 1) & 1);
  v12 = v24;
  v11 = v25;
  if (v24 <= v25 || v24 - v25 <= 3)
    goto LABEL_25;
  v13 = v23;
  v14 = *(_DWORD *)&v23[v25];
  v15 = v25 + 4;
  v25 += 4;
  *(_DWORD *)(a1 + 40) = v14;
  v16 = *(_DWORD *)(a1 + 104);
  if (v16 < 0x10000)
    goto LABEL_21;
  v17 = v12 > v15;
  v18 = v12 - v15;
  if (!v17 || v18 <= 3)
LABEL_25:
    abort();
  v19 = *(unsigned int *)&v13[v15];
  v25 = v11 + 8;
  if ((_DWORD)v19)
  {
    v20 = objc_alloc(MEMORY[0x1E0C99D50]);
    v21 = v25;
    if (v25 < v24)
    {
      v25 += v19;
      if (v21 + v19 <= v24)
      {
        v22 = objc_msgSend(v20, "initWithBytes:length:", &v23[v21], v19);
        v16 = *(_DWORD *)(a1 + 104);
        goto LABEL_19;
      }
    }
    goto LABEL_25;
  }
  v22 = 0;
LABEL_19:
  *(_QWORD *)(a1 + 48) = v22;
  if (v16 >= 0x20000)
    deserializeGlobalBindingsWithDeserializer(a2, a1, (DeserialContext *)&v23, v10);
LABEL_21:
  if (v25 != size_ptr)
    goto LABEL_25;
  v25 = size_ptr;
  if (v24 < size_ptr)
    goto LABEL_25;
  dispatch_release(v5);
}

uint64_t readDynamicLibraryReflectionData(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  NSObject *v13;
  NSObject *v14;
  MTLArgumentReader *v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)v19;
  do
  {
    for (i = 0; i != v8; ++i)
    {
      if (*(_QWORD *)v19 != v11)
        objc_enumerationMutation(a3);
      v13 = objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1) + 8 * i), "reflectionData");
      if (v13)
      {
        v14 = v13;
        v15 = ReflectionReaderFactory<MTLDynamicLibraryReflectionReader>::Create(a4, v13);
        (*(void (**)(_QWORD, uint64_t, NSObject *))(**((_QWORD **)v15 + 2) + 16))(*((_QWORD *)v15 + 2), a1, v14);
        v10 = (*(_DWORD *)(*((_QWORD *)v15 + 1) + 32) + v10);
        *(_QWORD *)(a2 + 8 * v9++) = v15;
      }
    }
    v8 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  }
  while (v8);
  return v10;
}

void MTLObjectOrMeshReflectionDeserializerLegacy::~MTLObjectOrMeshReflectionDeserializerLegacy(MTLObjectOrMeshReflectionDeserializerLegacy *this)
{
  MTLArgumentDeserializer::~MTLArgumentDeserializer(this);
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::vector<MTLBindingInternal *>::__init_with_size[abi:ne180100]<MTLBindingInternal **,MTLBindingInternal **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_182704180(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<MTLStructType *,unsigned int>,std::__map_value_compare<MTLStructType *,std::__value_type<MTLStructType *,unsigned int>,std::less<MTLStructType *>,true>,std::allocator<std::__value_type<MTLStructType *,unsigned int>>>::__emplace_unique_key_args<MTLStructType *,std::piecewise_construct_t const&,std::tuple<MTLStructType * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t MTLMetalScriptSerializer::makeNumberString@<X0>(MTLMetalScriptSerializer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char __str[16];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  result = snprintf(__str, 9uLL, "%08X", (_DWORD)this);
  *(_BYTE *)(a2 + 23) = 8;
  *(_QWORD *)a2 = *(_QWORD *)__str;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t MTLMetalScriptSerializer::addString(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, NSString *a3)
{
  const char *v6;
  size_t v7;

  if (!a2 || (-[flatbuffers::FlatBufferBuilder isEqualToString:](a2, "isEqualToString:", &stru_1E0FE5DC8) & 1) != 0)
    return 0;
  v6 = (const char *)-[flatbuffers::FlatBufferBuilder cStringUsingEncoding:](a2, "cStringUsingEncoding:", 4);
  v7 = strlen(v6);
  return flatbuffers::FlatBufferBuilder::CreateString(this, v6, v7);
}

uint64_t MTLMetalScriptSerializer::addString(flatbuffers::FlatBufferBuilder *a1, const char *a2)
{
  unint64_t v2;

  if (a2[23] < 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    if (v2)
    {
      a2 = *(const char **)a2;
      return flatbuffers::FlatBufferBuilder::CreateString(a1, a2, v2);
    }
  }
  else
  {
    v2 = *((unsigned __int8 *)a2 + 23);
    if (a2[23])
      return flatbuffers::FlatBufferBuilder::CreateString(a1, a2, v2);
  }
  return 0;
}

void *MTLMetalScriptSerializer::HashFunction(void *result)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, "libraryData");
    v3 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 296))(v2);
    return (void *)(objc_msgSend((id)objc_msgSend(v1, "name"), "hash") ^ v3);
  }
  return result;
}

BOOL MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _DWORD *v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  _OWORD v17[2];
  int v18;
  _OWORD v19[2];
  int v20;
  __int128 v21;

  memset(v19, 0, sizeof(v19));
  v20 = 1065353216;
  if (*a1)
  {
    v4 = a1 + 2;
    v5 = 1;
    do
    {
      v6 = &a1[v5];
      v7 = *v6;
      v8 = *(unsigned int *)((char *)v6 + v7);
      *(_QWORD *)&v17[0] = (char *)v4 + v7;
      *((_QWORD *)&v17[0] + 1) = v8;
      std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view>((uint64_t)v19, (uint64_t)v17, v17);
      ++v4;
      v9 = v5++ >= *a1;
    }
    while (!v9);
  }
  memset(v17, 0, sizeof(v17));
  v18 = 1065353216;
  if (*a2)
  {
    v10 = a2 + 2;
    v11 = 1;
    do
    {
      v12 = &a2[v11];
      v13 = *v12;
      v14 = *(unsigned int *)((char *)v12 + v13);
      *(_QWORD *)&v21 = (char *)v10 + v13;
      *((_QWORD *)&v21 + 1) = v14;
      std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view>((uint64_t)v17, (uint64_t)&v21, &v21);
      ++v10;
      v9 = v11++ >= *a2;
    }
    while (!v9);
  }
  v15 = std::operator==[abi:ne180100]<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>((uint64_t)v19, v17);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v17);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v19);
  return v15;
}

void sub_1827044C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>(uint64_t a1, _QWORD *a2)
{
  uint64_t **v3;
  _BOOL8 v4;
  uint64_t **v5;
  size_t v6;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v3 = (uint64_t **)(a1 + 16);
  do
  {
    v3 = (uint64_t **)*v3;
    v4 = v3 == 0;
    if (!v3)
      break;
    v5 = std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(a2, (uint64_t)(v3 + 2));
    if (!v5)
      break;
    v6 = (size_t)v3[3];
    if ((uint64_t *)v6 != v5[3])
      break;
  }
  while (!memcmp(v3[2], v5[2], v6));
  return v4;
}

uint64_t MTLMetalScriptSerializer::EqualLinkedFunctions(const LinkedFunctions *this, const LinkedFunctions *a2, const LinkedFunctions *a3)
{
  uint64_t v4;
  const LinkedFunctions *v6;
  unsigned int v7;
  int v8;
  unsigned __int16 *var0;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  LinkedFunctions *v17;
  LinkedFunctions *v18;
  const LinkedFunctions *v19;
  uint64_t v20;
  LinkedFunctions *v21;
  const LinkedFunctions *v22;
  uint64_t v23;
  LinkedFunctions *v24;
  uint64_t v25;
  uint64_t v26;
  const LinkedFunctions *v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const LinkedFunctions *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  const LinkedFunctions *v51;
  char *v52;
  uint64_t v53;
  _OWORD v54[2];
  int v55;
  char **v56;

  if (this == a2)
    return 1;
  v4 = 0;
  if (!this || !a2)
    return v4;
  v6 = &this[-*(int *)this->var0];
  v7 = *(unsigned __int16 *)v6->var0;
  if (v7 >= 7 && *(_WORD *)v6[6].var0)
    v8 = *(_DWORD *)this[*(unsigned __int16 *)v6[6].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[6].var0].var0].var0;
  else
    v8 = 0;
  var0 = (unsigned __int16 *)a2[-*(int *)a2->var0].var0;
  v10 = *var0;
  if (v10 < 7)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = var0[3];
    if (var0[3])
      LODWORD(v11) = *(_DWORD *)a2[v11 + *(unsigned int *)a2[v11].var0].var0;
  }
  v12 = v7 >= 5 && *(_WORD *)v6[4].var0
      ? *(_DWORD *)this[*(unsigned __int16 *)v6[4].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[4].var0].var0].var0
      : 0;
  if (v10 < 5)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = var0[2];
    if (var0[2])
      LODWORD(v13) = *(_DWORD *)a2[v13 + *(unsigned int *)a2[v13].var0].var0;
  }
  v14 = v7 >= 9 && *(_WORD *)v6[8].var0
      ? *(_DWORD *)this[*(unsigned __int16 *)v6[8].var0 + *(unsigned int *)this[*(unsigned __int16 *)v6[8].var0].var0].var0
      : 0;
  if (v10 < 9)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    v15 = var0[4];
    if (var0[4])
      LODWORD(v15) = *(_DWORD *)a2[v15 + *(unsigned int *)a2[v15].var0].var0;
  }
  v4 = 0;
  if (v8 != (_DWORD)v11 || v12 != (_DWORD)v13 || v14 != (_DWORD)v15)
    return v4;
  if (v8)
  {
    if (v7 >= 7 && (v16 = *(unsigned __int16 *)v6[6].var0) != 0)
      v17 = (LinkedFunctions *)&this[v16 + *(unsigned int *)this[v16].var0];
    else
      v17 = 0;
    v18 = v10 >= 7 && var0[3] ? (LinkedFunctions *)&a2[var0[3] + *(unsigned int *)a2[var0[3]].var0] : 0;
    if (!MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(v17, v18))
      return 0;
  }
  if (v12)
  {
    v19 = &this[-*(int *)this->var0];
    if (*(unsigned __int16 *)v19->var0 >= 5u && (v20 = *(unsigned __int16 *)v19[4].var0) != 0)
      v21 = (LinkedFunctions *)&this[v20 + *(unsigned int *)this[v20].var0];
    else
      v21 = 0;
    v22 = &a2[-*(int *)a2->var0];
    if (*(unsigned __int16 *)v22->var0 >= 5u && (v23 = *(unsigned __int16 *)v22[4].var0) != 0)
      v24 = (LinkedFunctions *)&a2[v23 + *(unsigned int *)a2[v23].var0];
    else
      v24 = 0;
    if (!MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(v21, v24))
      return 0;
  }
  if (!v14)
    return 1;
  memset(v54, 0, sizeof(v54));
  v55 = 1065353216;
  v25 = *(int *)this->var0;
  v26 = *(unsigned __int16 *)this[-v25 + 8].var0;
  if (*(unsigned __int16 *)this[-v25].var0 <= 8u)
  {
    v27 = 0;
    LODWORD(v25) = *(_DWORD *)this[v26].var0;
  }
  else if (*(_WORD *)this[-v25 + 8].var0)
  {
    v27 = &this[v26 + *(unsigned int *)this[v26].var0];
    LODWORD(v25) = *(_DWORD *)this[v26].var0;
  }
  else
  {
    v27 = 0;
  }
  if (!*(_DWORD *)this[v26 + v25].var0)
    goto LABEL_76;
  v29 = 0;
  v30 = 0;
  do
  {
    v31 = *(unsigned int *)v27[v29 + 4].var0;
    v32 = v31 - *(int *)v27[v29 + 4 + v31].var0;
    v33 = (char *)&v27[v29 + v32];
    if (*((unsigned __int16 *)v33 + 2) >= 7u && (v34 = *((unsigned __int16 *)v33 + 5)) != 0)
      v35 = (uint64_t)&v27[v29 + 4 + v31 + v34 + *(unsigned int *)v27[v29 + 4 + v31 + v34].var0];
    else
      v35 = 0;
    v36 = v31 + *(unsigned __int16 *)v27[v29 + 8 + v32].var0;
    v37 = v36 + *(unsigned int *)v27[v29 + 4 + v36].var0;
    v38 = *(unsigned int *)v27[v29 + 4 + v37].var0;
    v52 = (char *)&v27[v29 + 8 + v37];
    v53 = v38;
    v56 = &v52;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view&&>,std::tuple<>>((uint64_t)v54, (uint64_t)&v52, (uint64_t)&std::piecewise_construct, (_OWORD **)&v56)+ 4) = v35;
    ++v30;
    v39 = &this[*(unsigned __int16 *)this[-*(int *)this->var0 + 8].var0];
    v40 = *(unsigned int *)v39[*(unsigned int *)v39->var0].var0;
    v29 += 4;
  }
  while (v30 < v40);
  if ((_DWORD)v40)
  {
    v41 = 0;
    v42 = 0;
    while (1)
    {
      v43 = *(unsigned int *)v27[v41 + 4].var0
          + (unint64_t)*(unsigned __int16 *)v27[v41
                                                     + 8
                                                     + *(unsigned int *)v27[v41 + 4].var0
                                                     - (uint64_t)*(int *)v27[v41 + 4 + *(unsigned int *)v27[v41 + 4].var0].var0].var0;
      v44 = v43 + *(unsigned int *)v27[v41 + 4 + v43].var0;
      v45 = *(unsigned int *)v27[v41 + 4 + v44].var0;
      v52 = (char *)&v27[v41 + 8 + v44];
      v53 = v45;
      v46 = std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::find<std::string_view>(v54, (uint64_t)&v52);
      if (!v46)
        break;
      v47 = *(unsigned int *)v27[v41 + 4].var0;
      v48 = (char *)&v27[v41 + v47 - *(int *)v27[v41 + 4 + v47].var0];
      if (*((unsigned __int16 *)v48 + 2) >= 7u && (v49 = *((unsigned __int16 *)v48 + 5)) != 0)
        v50 = (char *)&v27[v41 + 4 + v47 + v49 + *(unsigned int *)v27[v41 + 4 + v47 + v49].var0];
      else
        v50 = 0;
      if (!MTLMetalScriptSerializer::AreStringArraysOrderIndependentlyEqual(v46[4], v50))
        break;
      ++v42;
      v51 = &this[*(unsigned __int16 *)this[-*(int *)this->var0 + 8].var0];
      v41 += 4;
      if (v42 >= *(unsigned int *)v51[*(unsigned int *)v51->var0].var0)
        goto LABEL_76;
    }
    v4 = 0;
  }
  else
  {
LABEL_76:
    v4 = 1;
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v54);
  return v4;
}

void sub_1827049E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MTLMetalScriptSerializer::EqualComputeDescriptor(int *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  int *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  int *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  unint64_t v24;
  unsigned int *v25;
  const LinkedFunctions *v26;
  const LinkedFunctions *v27;
  const LinkedFunctions *v29;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 7u && (v3 = v2[3]) != 0)
    v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  else
    v4 = 0;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 7u && (v6 = v5[3]) != 0)
    v7 = (int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
  else
    v7 = 0;
  v8 = (unsigned __int16 *)((char *)v4 - *v4);
  v9 = *v8;
  if (v9 < 5)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v10 = v8[2];
    if (v8[2])
      LOBYTE(v10) = *((_BYTE *)v4 + v10) != 0;
  }
  v11 = (unsigned __int16 *)((char *)v7 - *v7);
  v12 = *v11;
  if (v12 >= 5 && v11[2])
    LOBYTE(v10) = v10 ^ (*((_BYTE *)v7 + v11[2]) != 0);
  if ((v10 & 1) != 0)
    return 0;
  if (v9 < 7)
  {
    v13 = 0;
  }
  else
  {
    v13 = v8[3];
    if (v8[3])
      v13 = *(_QWORD *)((char *)v4 + v13);
  }
  if (v12 < 7)
  {
    v14 = 0;
  }
  else
  {
    v14 = v11[3];
    if (v11[3])
      v14 = *(_QWORD *)((char *)v7 + v14);
  }
  if (v13 != v14)
    return 0;
  v15 = v9 >= 9 && v8[4] ? *(_QWORD *)((char *)v4 + v8[4]) : 1;
  v16 = v12 >= 9 && v11[4] ? *(_QWORD *)((char *)v7 + v11[4]) : 1;
  if (v15 != v16)
    return 0;
  if (v9 < 0xF)
  {
    LOBYTE(v17) = 0;
  }
  else
  {
    v17 = v8[7];
    if (v8[7])
      LOBYTE(v17) = *((_BYTE *)v4 + v17) != 0;
  }
  if (v12 >= 0xF && v11[7])
    LOBYTE(v17) = v17 ^ (*((_BYTE *)v7 + v11[7]) != 0);
  if ((v17 & 1) != 0)
    return 0;
  if (v9 < 0x11)
  {
    LOBYTE(v18) = 0;
  }
  else
  {
    v18 = v8[8];
    if (v8[8])
      LOBYTE(v18) = *((_BYTE *)v4 + v18) != 0;
  }
  if (v12 >= 0x11 && v11[8])
    LOBYTE(v18) = v18 ^ (*((_BYTE *)v7 + v11[8]) != 0);
  if ((v18 & 1) != 0)
    return 0;
  if (v9 < 0x13)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = v8[9];
    if (v8[9])
      LODWORD(v19) = *((unsigned __int8 *)v4 + v19);
  }
  if (v12 < 0x13)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    v20 = v11[9];
    if (v11[9])
      LODWORD(v20) = *((unsigned __int8 *)v7 + v20);
  }
  if ((_DWORD)v19 != (_DWORD)v20)
    return 0;
  if (v9 < 0x15)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v8[10];
    if (v8[10])
      LOBYTE(v21) = *((_BYTE *)v4 + v21) != 0;
  }
  if (v12 >= 0x15 && v11[10])
    LOBYTE(v21) = v21 ^ (*((_BYTE *)v7 + v11[10]) != 0);
  if ((v21 & 1) != 0)
    return 0;
  v22 = v9 >= 0xB && v8[5] ? (int *)((char *)v4 + v8[5] + *(unsigned int *)((char *)v4 + v8[5])) : 0;
  v23 = v12 >= 0xB && v11[5] ? (int *)((char *)v7 + v11[5] + *(unsigned int *)((char *)v7 + v11[5])) : 0;
  if (!EqualStageInputOutputDescriptor(v22, v23))
    return 0;
  v24 = v9 >= 0xD && v8[6] ? (unint64_t)v4 + v8[6] + *(unsigned int *)((char *)v4 + v8[6]) : 0;
  v25 = v12 >= 0xD && v11[6] ? (unsigned int *)((char *)v7 + v11[6] + *(unsigned int *)((char *)v7 + v11[6])) : 0;
  if (!EqualPipelineBuffers(v24, v25))
    return 0;
  if (v9 >= 0x17 && v8[11])
    v27 = (const LinkedFunctions *)v4 + v8[11] + *(unsigned int *)((char *)v4 + v8[11]);
  else
    v27 = 0;
  if (v12 >= 0x17 && v11[11])
    v29 = (const LinkedFunctions *)v7 + v11[11] + *(unsigned int *)((char *)v7 + v11[11]);
  else
    v29 = 0;
  return MTLMetalScriptSerializer::EqualLinkedFunctions(v27, v29, v26);
}

BOOL EqualStageInputOutputDescriptor(int *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned int *v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  int *v14;
  int *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int *v35;
  _BOOL4 v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  _BOOL8 result;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  uint64_t v44;
  int *v45;
  int *v46;
  unsigned __int16 *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  if (a1 && (v2 = (unsigned __int16 *)((char *)a1 - *a1), *v2 >= 7u) && (v3 = v2[3]) != 0)
  {
    v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
    if (!a2)
      goto LABEL_11;
  }
  else
  {
    v4 = 0;
    if (!a2)
      goto LABEL_11;
  }
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 7u)
  {
    v6 = v5[3];
    if (v6)
    {
      v7 = (unsigned int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
      v8 = v4 != 0;
      if (v4)
        LODWORD(v9) = *v4;
      else
        LODWORD(v9) = 0;
      v11 = *v7;
      v10 = 1;
      goto LABEL_15;
    }
  }
LABEL_11:
  if (!v4)
    goto LABEL_62;
  v10 = 0;
  v7 = 0;
  v11 = 0;
  LODWORD(v9) = *v4;
  v8 = 1;
LABEL_15:
  if (v9 <= v11)
    v9 = v11;
  else
    v9 = v9;
  if ((_DWORD)v9)
  {
    v12 = v4 + 1;
    v13 = v7 + 1;
    do
    {
      if (v8)
      {
        v14 = (int *)((char *)v12 + *v12);
        if (!v10)
          goto LABEL_22;
      }
      else
      {
        v14 = 0;
        if (!v10)
        {
LABEL_22:
          v15 = 0;
          goto LABEL_25;
        }
      }
      v15 = (int *)((char *)v13 + *v13);
LABEL_25:
      v65 = 1;
      v67 = 0;
      LODWORD(v68) = 1;
      v70 = 1;
      v62 = 0;
      LODWORD(v63) = 1;
      if (!v14)
        goto LABEL_39;
      v16 = (unsigned __int16 *)((char *)v14 - *v14);
      v17 = *v16;
      if (v17 < 9)
      {
        v18 = 0;
        if (v17 < 5)
        {
          v19 = 1;
LABEL_37:
          v21 = 1;
          goto LABEL_38;
        }
      }
      else
      {
        v18 = v16[4];
        if (v16[4])
          v18 = *(_QWORD *)((char *)v14 + v18);
      }
      if (v16[2])
        v19 = *((unsigned __int8 *)v14 + v16[2]);
      else
        v19 = 1;
      if (v17 < 7)
        goto LABEL_37;
      v20 = v16[3];
      if (!v20)
        goto LABEL_37;
      v21 = *(_QWORD *)((char *)v14 + v20);
LABEL_38:
      v67 = v18;
      LODWORD(v68) = v19;
      v70 = v21;
LABEL_39:
      if (!v15)
        goto LABEL_53;
      v22 = (unsigned __int16 *)((char *)v15 - *v15);
      v23 = *v22;
      if (v23 < 9)
      {
        v24 = 0;
        if (v23 < 5)
        {
          v25 = 1;
LABEL_51:
          v27 = 1;
          goto LABEL_52;
        }
      }
      else
      {
        v24 = v22[4];
        if (v22[4])
          v24 = *(_QWORD *)((char *)v15 + v24);
      }
      if (v22[2])
        v25 = *((unsigned __int8 *)v15 + v22[2]);
      else
        v25 = 1;
      if (v23 < 7)
        goto LABEL_51;
      v26 = v22[3];
      if (!v26)
        goto LABEL_51;
      v27 = *(_QWORD *)((char *)v15 + v26);
LABEL_52:
      v62 = v24;
      LODWORD(v63) = v25;
      v65 = v27;
LABEL_53:
      if (v67 != v62 || v68 != v63 || v70 != v65)
        return 0;
      ++v12;
      ++v13;
      --v9;
    }
    while (v9);
  }
LABEL_62:
  if (a1 && (v30 = (unsigned __int16 *)((char *)a1 - *a1), *v30 >= 5u) && (v31 = v30[2]) != 0)
  {
    v32 = (unsigned int *)((char *)a1 + v31 + *(unsigned int *)((char *)a1 + v31));
    if (!a2)
      goto LABEL_72;
  }
  else
  {
    v32 = 0;
    if (!a2)
      goto LABEL_72;
  }
  v33 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v33 >= 5u)
  {
    v34 = v33[2];
    if (v34)
    {
      v35 = (unsigned int *)((char *)a2 + v34 + *(unsigned int *)((char *)a2 + v34));
      v36 = v32 != 0;
      if (v32)
        v37 = *v32;
      else
        v37 = 0;
      v39 = *v35;
      v38 = 1;
      goto LABEL_76;
    }
  }
LABEL_72:
  if (!v32)
    return 1;
  v38 = 0;
  v35 = 0;
  v39 = 0;
  v37 = *v32;
  v36 = 1;
LABEL_76:
  if (v37 <= v39)
    v41 = v39;
  else
    v41 = v37;
  if ((_DWORD)v41)
  {
    v42 = v32 + 1;
    v43 = v35 + 1;
    v44 = v41 - 1;
    while (1)
    {
      if (v36)
      {
        v45 = (int *)((char *)v42 + *v42);
        if (!v38)
          goto LABEL_83;
      }
      else
      {
        v45 = 0;
        if (!v38)
        {
LABEL_83:
          v46 = 0;
          goto LABEL_86;
        }
      }
      v46 = (int *)((char *)v43 + *v43);
LABEL_86:
      LODWORD(v67) = 0;
      v69 = 0;
      v71 = 0;
      LODWORD(v62) = 0;
      v64 = 0;
      v66 = 0;
      if (!v45)
        goto LABEL_100;
      v47 = (unsigned __int16 *)((char *)v45 - *v45);
      v48 = *v47;
      if (v48 < 5)
      {
        v50 = 0;
        LODWORD(v49) = 0;
LABEL_98:
        v52 = 0;
        goto LABEL_99;
      }
      v49 = v47[2];
      if (v47[2])
        LODWORD(v49) = *((unsigned __int8 *)v45 + v49);
      if (v48 < 7)
      {
        v50 = 0;
        goto LABEL_98;
      }
      v50 = v47[3];
      if (v47[3])
        v50 = *(_QWORD *)((char *)v45 + v50);
      if (v48 < 9)
        goto LABEL_98;
      v51 = v47[4];
      if (!v51)
        goto LABEL_98;
      v52 = *(unsigned int *)((char *)v45 + v51);
LABEL_99:
      LODWORD(v67) = v49;
      v69 = v50;
      v71 = v52;
LABEL_100:
      if (v46)
      {
        v53 = (unsigned __int16 *)((char *)v46 - *v46);
        v54 = *v53;
        if (v54 < 5)
        {
          v56 = 0;
          LODWORD(v55) = 0;
        }
        else
        {
          v55 = v53[2];
          if (v53[2])
            LODWORD(v55) = *((unsigned __int8 *)v46 + v55);
          if (v54 < 7)
          {
            v56 = 0;
          }
          else
          {
            v56 = v53[3];
            if (v53[3])
              v56 = *(_QWORD *)((char *)v46 + v56);
            if (v54 >= 9)
            {
              v57 = v53[4];
              if (v57)
              {
                v58 = *(unsigned int *)((char *)v46 + v57);
LABEL_113:
                LODWORD(v62) = v55;
                v64 = v56;
                v66 = v58;
                goto LABEL_114;
              }
            }
          }
        }
        v58 = 0;
        goto LABEL_113;
      }
LABEL_114:
      v59 = v67 ^ v62 | v69 ^ v64 | v71 ^ v66;
      result = v59 == 0;
      v61 = v44-- != 0;
      if (!v59)
      {
        ++v42;
        ++v43;
        if (v61)
          continue;
      }
      return result;
    }
  }
  return 1;
}

uint64_t EqualPipelineBuffers(unint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  BOOL v14;
  BOOL v15;
  _BOOL8 v16;

  if (!(a1 | (unint64_t)a2))
    return 1;
  if (a1)
  {
    LODWORD(v2) = *(_DWORD *)a1;
    if (a2)
    {
LABEL_4:
      v3 = *a2;
      goto LABEL_7;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    if (a2)
      goto LABEL_4;
  }
  v3 = 0;
LABEL_7:
  if (v2 <= v3)
    v2 = v3;
  else
    v2 = v2;
  if ((_DWORD)v2)
  {
    v4 = (unsigned int *)(a1 + 4);
    v5 = a2 + 1;
    v6 = v2 - 1;
    while (1)
    {
      if (a1)
      {
        v7 = (int *)((char *)v4 + *v4);
        if (a2)
          goto LABEL_14;
      }
      else
      {
        v7 = 0;
        if (a2)
        {
LABEL_14:
          v8 = (int *)((char *)v5 + *v5);
          if (v7)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      v8 = 0;
      if (v7)
      {
LABEL_18:
        v9 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v9 >= 5u && (v10 = v9[2]) != 0)
          LODWORD(v7) = *((unsigned __int8 *)v7 + v10);
        else
          LODWORD(v7) = 0;
      }
LABEL_22:
      if (v8)
      {
        v11 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v11 >= 5u && (v12 = v11[2]) != 0)
          LODWORD(v8) = *((unsigned __int8 *)v8 + v12);
        else
          LODWORD(v8) = 0;
      }
      v14 = v6-- != 0;
      v15 = (_DWORD)v7 == (_DWORD)v8;
      v16 = (_DWORD)v7 == (_DWORD)v8;
      if (v15)
      {
        ++v4;
        ++v5;
        if (v14)
          continue;
      }
      return v16;
    }
  }
  return 1;
}

uint64_t MTLMetalScriptSerializer::EqualFragmentDescriptor(int *a1, int *a2)
{
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  unint64_t v44;
  unsigned int *v45;
  const LinkedFunctions *v46;
  const LinkedFunctions *v47;
  const LinkedFunctions *v49;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  v5 = *v4;
  if (v5 >= 5 && v4[2])
    v6 = *(_QWORD *)((char *)a1 + v4[2]);
  else
    v6 = 1;
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = *(_QWORD *)((char *)a2 + v7[2]);
  else
    v9 = 1;
  if (v6 != v9)
    return 0;
  v10 = v5 < 7 || !v4[3] || *((unsigned __int8 *)a1 + v4[3]) != 0;
  if (v8 >= 7 && v7[3])
  {
    if (((v10 ^ (*((_BYTE *)a2 + v7[3]) != 0)) & 1) != 0)
      return 0;
  }
  else if (!v10)
  {
    return 0;
  }
  if (v5 < 9)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    v11 = v4[4];
    if (v4[4])
      LOBYTE(v11) = *((_BYTE *)a1 + v11) != 0;
  }
  if (v8 >= 9 && v7[4])
    LOBYTE(v11) = v11 ^ (*((_BYTE *)a2 + v7[4]) != 0);
  if ((v11 & 1) != 0)
    return 0;
  if (v5 < 0xB)
  {
    LOBYTE(v12) = 0;
  }
  else
  {
    v12 = v4[5];
    if (v4[5])
      LOBYTE(v12) = *((_BYTE *)a1 + v12) != 0;
  }
  if (v8 >= 0xB && v7[5])
    LOBYTE(v12) = v12 ^ (*((_BYTE *)a2 + v7[5]) != 0);
  if ((v12 & 1) != 0)
    return 0;
  v13 = v5 >= 0xD && v4[6] ? *(_QWORD *)((char *)a1 + v4[6]) : 1;
  v14 = v8 >= 0xD && v7[6] ? *(_QWORD *)((char *)a2 + v7[6]) : 1;
  if (v13 != v14)
    return 0;
  if (v5 < 0xF)
  {
    v15 = 0;
  }
  else
  {
    v15 = v4[7];
    if (v4[7])
      v15 = *(_QWORD *)((char *)a1 + v15);
  }
  if (v8 < 0xF)
  {
    v16 = 0;
  }
  else
  {
    v16 = v7[7];
    if (v7[7])
      v16 = *(_QWORD *)((char *)a2 + v16);
  }
  if (v15 != v16)
    return 0;
  v17 = v5 >= 0x11 && v4[8] ? *(_QWORD *)((char *)a1 + v4[8]) : -1;
  v18 = v8 >= 0x11 && v7[8] ? *(_QWORD *)((char *)a2 + v7[8]) : -1;
  if (v17 != v18)
    return 0;
  v19 = 1.0;
  v20 = 1.0;
  if (v5 >= 0x13 && v4[9])
    v20 = *(float *)((char *)a1 + v4[9]);
  if (v8 >= 0x13 && v7[9])
    v19 = *(float *)((char *)a2 + v7[9]);
  if (v20 != v19)
    return 0;
  if (v5 < 0x15)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v4[10];
    if (v4[10])
      LOBYTE(v21) = *((_BYTE *)a1 + v21) != 0;
  }
  if (v8 >= 0x15 && v7[10])
    LOBYTE(v21) = v21 ^ (*((_BYTE *)a2 + v7[10]) != 0);
  if ((v21 & 1) != 0)
    return 0;
  if (v5 < 0x19)
  {
    LODWORD(v22) = 0;
  }
  else
  {
    v22 = v4[12];
    if (v4[12])
      LODWORD(v22) = *(unsigned __int16 *)((char *)a1 + v22);
  }
  if (v8 < 0x19)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    v23 = v7[12];
    if (v7[12])
      LODWORD(v23) = *(unsigned __int16 *)((char *)a2 + v23);
  }
  if ((_DWORD)v22 != (_DWORD)v23)
    return 0;
  if (v5 < 0x1B)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    v24 = v4[13];
    if (v4[13])
      LODWORD(v24) = *(unsigned __int16 *)((char *)a1 + v24);
  }
  if (v8 < 0x1B)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    v25 = v7[13];
    if (v7[13])
      LODWORD(v25) = *(unsigned __int16 *)((char *)a2 + v25);
  }
  if ((_DWORD)v24 != (_DWORD)v25)
    return 0;
  if (v5 < 0x1F)
  {
    LOBYTE(v26) = 0;
  }
  else
  {
    v26 = v4[15];
    if (v4[15])
      LOBYTE(v26) = *((_BYTE *)a1 + v26) != 0;
  }
  if (v8 >= 0x1F && v7[15])
    LOBYTE(v26) = v26 ^ (*((_BYTE *)a2 + v7[15]) != 0);
  if ((v26 & 1) != 0)
    return 0;
  if (v5 < 0x21)
  {
    LOBYTE(v27) = 0;
  }
  else
  {
    v27 = v4[16];
    if (v4[16])
      LOBYTE(v27) = *((_BYTE *)a1 + v27) != 0;
  }
  if (v8 >= 0x21 && v7[16])
    LOBYTE(v27) = v27 ^ (*((_BYTE *)a2 + v7[16]) != 0);
  if ((v27 & 1) != 0)
    return 0;
  if (v5 < 0x23)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    v28 = v4[17];
    if (v4[17])
      LODWORD(v28) = *((unsigned __int8 *)a1 + v28);
  }
  if (v8 < 0x23)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    v29 = v7[17];
    if (v7[17])
      LODWORD(v29) = *((unsigned __int8 *)a2 + v29);
  }
  if ((_DWORD)v28 != (_DWORD)v29)
    return 0;
  if (v5 < 0x25)
  {
    LOBYTE(v30) = 0;
  }
  else
  {
    v30 = v4[18];
    if (v4[18])
      LOBYTE(v30) = *((_BYTE *)a1 + v30) != 0;
  }
  if (v8 >= 0x25 && v7[18])
    LOBYTE(v30) = v30 ^ (*((_BYTE *)a2 + v7[18]) != 0);
  if ((v30 & 1) != 0)
    return 0;
  if (v5 < 0x27)
  {
    LODWORD(v31) = 0;
  }
  else
  {
    v31 = v4[19];
    if (v4[19])
      LODWORD(v31) = *((unsigned __int8 *)a1 + v31);
  }
  if (v8 < 0x27)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    v32 = v7[19];
    if (v7[19])
      LODWORD(v32) = *((unsigned __int8 *)a2 + v32);
  }
  if ((_DWORD)v31 != (_DWORD)v32)
    return 0;
  if (v5 < 0x29)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    v33 = v4[20];
    if (v4[20])
      LOBYTE(v33) = *((_BYTE *)a1 + v33) != 0;
  }
  if (v8 >= 0x29 && v7[20])
    LOBYTE(v33) = v33 ^ (*((_BYTE *)a2 + v7[20]) != 0);
  if ((v33 & 1) != 0)
    return 0;
  if (v5 < 0x2B)
  {
    LODWORD(v34) = 0;
  }
  else
  {
    v34 = v4[21];
    if (v4[21])
      LODWORD(v34) = *((unsigned __int8 *)a1 + v34);
  }
  if (v8 < 0x2B)
  {
    LODWORD(v35) = 0;
  }
  else
  {
    v35 = v7[21];
    if (v7[21])
      LODWORD(v35) = *((unsigned __int8 *)a2 + v35);
  }
  if ((_DWORD)v34 != (_DWORD)v35)
    return 0;
  if (v5 < 0x2D)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    v36 = v4[22];
    if (v4[22])
      LOBYTE(v36) = *((_BYTE *)a1 + v36) != 0;
  }
  if (v8 >= 0x2D && v7[22])
    LOBYTE(v36) = v36 ^ (*((_BYTE *)a2 + v7[22]) != 0);
  if ((v36 & 1) != 0)
    return 0;
  if (v5 < 0x2F)
  {
    LOBYTE(v37) = 0;
  }
  else
  {
    v37 = v4[23];
    if (v4[23])
      LOBYTE(v37) = *((_BYTE *)a1 + v37) != 0;
  }
  if (v8 >= 0x2F && v7[23])
    LOBYTE(v37) = v37 ^ (*((_BYTE *)a2 + v7[23]) != 0);
  if ((v37 & 1) != 0)
    return 0;
  if (v5 < 0x31)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    v38 = v4[24];
    if (v4[24])
      LOBYTE(v38) = *((_BYTE *)a1 + v38) != 0;
  }
  if (v8 >= 0x31 && v7[24])
    LOBYTE(v38) = v38 ^ (*((_BYTE *)a2 + v7[24]) != 0);
  if ((v38 & 1) != 0)
    return 0;
  if (v5 < 0x35)
  {
    LODWORD(v39) = 0;
  }
  else
  {
    v39 = v4[26];
    if (v4[26])
      LODWORD(v39) = *(int *)((char *)a1 + v39);
  }
  if (v8 < 0x35)
  {
    LODWORD(v40) = 0;
  }
  else
  {
    v40 = v7[26];
    if (v7[26])
      LODWORD(v40) = *(int *)((char *)a2 + v40);
  }
  if ((_DWORD)v39 != (_DWORD)v40)
    return 0;
  if (v5 < 0x33)
  {
    LOBYTE(v41) = 0;
  }
  else
  {
    v41 = v4[25];
    if (v4[25])
      LOBYTE(v41) = *((_BYTE *)a1 + v41) != 0;
  }
  if (v8 >= 0x33 && v7[25])
    LOBYTE(v41) = v41 ^ (*((_BYTE *)a2 + v7[25]) != 0);
  if ((v41 & 1) != 0)
    return 0;
  v42 = v5 >= 0x17 && v4[11] ? (unint64_t)a1 + v4[11] + *(unsigned int *)((char *)a1 + v4[11]) : 0;
  v43 = v8 >= 0x17 && v7[11] ? (unsigned int *)((char *)a2 + v7[11] + *(unsigned int *)((char *)a2 + v7[11])) : 0;
  if (!EqualColorAttachments(v42, v43))
    return 0;
  v44 = v5 >= 0x1D && v4[14] ? (unint64_t)a1 + v4[14] + *(unsigned int *)((char *)a1 + v4[14]) : 0;
  v45 = v8 >= 0x1D && v7[14] ? (unsigned int *)((char *)a2 + v7[14] + *(unsigned int *)((char *)a2 + v7[14])) : 0;
  if (!EqualPipelineBuffers(v44, v45))
    return 0;
  if (v5 >= 0x37 && v4[27])
    v47 = (const LinkedFunctions *)a1 + v4[27] + *(unsigned int *)((char *)a1 + v4[27]);
  else
    v47 = 0;
  if (v8 >= 0x37 && v7[27])
    v49 = (const LinkedFunctions *)a2 + v7[27] + *(unsigned int *)((char *)a2 + v7[27]);
  else
    v49 = 0;
  return MTLMetalScriptSerializer::EqualLinkedFunctions(v47, v49, v46);
}

uint64_t EqualColorAttachments(unint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  _BOOL8 v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  int *v8;
  int *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;

  if (!(a1 | (unint64_t)a2))
    return 1;
  if (!a1)
  {
    LODWORD(v2) = 0;
    if (a2)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    goto LABEL_8;
  }
  LODWORD(v2) = *(_DWORD *)a1;
  if (!a2)
    goto LABEL_7;
LABEL_4:
  v3 = *a2;
LABEL_8:
  if (v2 <= v3)
    v2 = v3;
  else
    v2 = v2;
  if ((_DWORD)v2)
  {
    v5 = (unsigned int *)(a1 + 4);
    v6 = a2 + 1;
    v7 = v2 - 1;
    while (1)
    {
      if (a1)
      {
        v8 = (int *)((char *)v5 + *v5);
        if (a2)
          goto LABEL_15;
      }
      else
      {
        v8 = 0;
        if (a2)
        {
LABEL_15:
          v9 = (int *)((char *)v6 + *v6);
          if (!v8)
            goto LABEL_24;
          goto LABEL_16;
        }
      }
      v9 = 0;
      if (!v8)
      {
LABEL_24:
        LODWORD(v14) = 0;
        LODWORD(v15) = 0;
        LODWORD(v16) = 0;
        LODWORD(v17) = 0;
        LODWORD(v12) = 0;
        v13 = 15;
        v18 = 1;
        v19 = 1;
        goto LABEL_47;
      }
LABEL_16:
      v10 = (unsigned __int16 *)((char *)v8 - *v8);
      v11 = *v10;
      if (v11 < 5)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
        LODWORD(v12) = 0;
        goto LABEL_27;
      }
      v12 = v10[2];
      if (v10[2])
        LODWORD(v12) = *(unsigned __int16 *)((char *)v8 + v12);
      if (v11 < 7)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
LABEL_27:
        LODWORD(v17) = 0;
        LODWORD(v15) = 0;
        LODWORD(v8) = 0;
        v13 = 15;
LABEL_45:
        v19 = 1;
LABEL_46:
        v18 = 1;
        goto LABEL_47;
      }
      if (v10[3])
        v13 = *((unsigned __int8 *)v8 + v10[3]);
      else
        v13 = 15;
      if (v11 < 9)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
        LODWORD(v17) = 0;
LABEL_44:
        LODWORD(v15) = 0;
        LODWORD(v8) = 0;
        goto LABEL_45;
      }
      v17 = v10[4];
      if (v10[4])
        LODWORD(v17) = *((unsigned __int8 *)v8 + v17) != 0;
      if (v11 < 0xB)
      {
        LODWORD(v14) = 0;
        LODWORD(v16) = 0;
        goto LABEL_44;
      }
      v16 = v10[5];
      if (v10[5])
        LODWORD(v16) = *((unsigned __int8 *)v8 + v16);
      if (v11 < 0xD)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
      v15 = v10[6];
      if (v10[6])
        LODWORD(v15) = *((unsigned __int8 *)v8 + v15);
      if (v11 < 0x15)
      {
        if (v11 < 0x13)
        {
          v19 = 1;
          if (v11 < 0xF)
          {
            LODWORD(v14) = 0;
            LODWORD(v8) = 0;
            goto LABEL_46;
          }
LABEL_119:
          v18 = 1;
          goto LABEL_120;
        }
      }
      else if (v10[10])
      {
        v19 = *((unsigned __int8 *)v8 + v10[10]);
        goto LABEL_112;
      }
      v19 = 1;
LABEL_112:
      if (!v10[9])
        goto LABEL_119;
      v18 = *((unsigned __int8 *)v8 + v10[9]);
LABEL_120:
      v14 = v10[7];
      if (v10[7])
        LODWORD(v14) = *((unsigned __int8 *)v8 + v14);
      if (v11 >= 0x11 && (v40 = v10[8]) != 0)
        LODWORD(v8) = *((unsigned __int8 *)v8 + v40);
      else
        LODWORD(v8) = 0;
LABEL_47:
      if (v9)
      {
        v20 = (unsigned __int16 *)((char *)v9 - *v9);
        v21 = *v20;
        if (v21 < 5)
        {
          LODWORD(v24) = 0;
          LODWORD(v26) = 0;
          LODWORD(v22) = 0;
        }
        else
        {
          v22 = v20[2];
          if (v20[2])
            LODWORD(v22) = *(unsigned __int16 *)((char *)v9 + v22);
          if (v21 >= 7)
          {
            if (v20[3])
              v23 = *((unsigned __int8 *)v9 + v20[3]);
            else
              v23 = 15;
            if (v21 < 9)
            {
              LODWORD(v24) = 0;
              LODWORD(v26) = 0;
              LODWORD(v27) = 0;
            }
            else
            {
              v27 = v20[4];
              if (v20[4])
                LODWORD(v27) = *((unsigned __int8 *)v9 + v27) != 0;
              if (v21 < 0xB)
              {
                LODWORD(v24) = 0;
                LODWORD(v26) = 0;
              }
              else
              {
                v26 = v20[5];
                if (v20[5])
                  LODWORD(v26) = *((unsigned __int8 *)v9 + v26);
                if (v21 >= 0xD)
                {
                  v25 = v20[6];
                  if (v20[6])
                    LODWORD(v25) = *((unsigned __int8 *)v9 + v25);
                  if (v21 >= 0x15)
                  {
                    if (v20[10])
                      v29 = *((unsigned __int8 *)v9 + v20[10]);
                    else
LABEL_115:
                      v29 = 1;
                    if (v20[9])
                      v28 = *((unsigned __int8 *)v9 + v20[9]);
                    else
LABEL_127:
                      v28 = 1;
                    v24 = v20[7];
                    if (v20[7])
                      LODWORD(v24) = *((unsigned __int8 *)v9 + v24);
                    if (v21 >= 0x11 && (v41 = v20[8]) != 0)
                      LODWORD(v9) = *((unsigned __int8 *)v9 + v41);
                    else
                      LODWORD(v9) = 0;
                    goto LABEL_77;
                  }
                  if (v21 >= 0x13)
                    goto LABEL_115;
                  v29 = 1;
                  if (v21 >= 0xF)
                    goto LABEL_127;
                  LODWORD(v24) = 0;
                  LODWORD(v9) = 0;
                  goto LABEL_76;
                }
                LODWORD(v24) = 0;
              }
            }
            LODWORD(v25) = 0;
            LODWORD(v9) = 0;
LABEL_75:
            v29 = 1;
LABEL_76:
            v28 = 1;
            goto LABEL_77;
          }
          LODWORD(v24) = 0;
          LODWORD(v26) = 0;
        }
        LODWORD(v27) = 0;
        LODWORD(v25) = 0;
        LODWORD(v9) = 0;
        v23 = 15;
        goto LABEL_75;
      }
      LODWORD(v24) = 0;
      LODWORD(v25) = 0;
      LODWORD(v26) = 0;
      LODWORD(v27) = 0;
      LODWORD(v22) = 0;
      v23 = 15;
      v28 = 1;
      v29 = 1;
LABEL_77:
      v4 = (_DWORD)v12 == (_DWORD)v22
        && v13 == v23
        && (_DWORD)v17 == (_DWORD)v27
        && (_DWORD)v16 == (_DWORD)v26
        && (_DWORD)v15 == (_DWORD)v25
        && v19 == v29
        && v18 == v28
        && (_DWORD)v14 == (_DWORD)v24
        && (_DWORD)v8 == (_DWORD)v9;
      v39 = v7-- != 0;
      if (v4)
      {
        ++v5;
        ++v6;
        if (v39)
          continue;
      }
      return v4;
    }
  }
  return 1;
}

uint64_t MTLMetalScriptSerializer::EqualVertexShaderDescriptor(int *a1, int *a2)
{
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  unint64_t v36;
  unsigned int *v37;
  const LinkedFunctions *v38;
  const LinkedFunctions *v39;
  const LinkedFunctions *v41;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  v5 = *v4;
  if (v5 >= 5 && v4[2])
    v6 = *(_QWORD *)((char *)a1 + v4[2]);
  else
    v6 = 1;
  v7 = (unsigned __int16 *)((char *)a2 - *a2);
  v8 = *v7;
  if (v8 >= 5 && v7[2])
    v9 = *(_QWORD *)((char *)a2 + v7[2]);
  else
    v9 = 1;
  if (v6 != v9)
    return 0;
  if (v5 < 0xB)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    v10 = v4[5];
    if (v4[5])
      LODWORD(v10) = *((unsigned __int8 *)a1 + v10);
  }
  if (v8 < 0xB)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = v7[5];
    if (v7[5])
      LODWORD(v11) = *((unsigned __int8 *)a2 + v11);
  }
  if ((_DWORD)v10 != (_DWORD)v11)
    return 0;
  v12 = v5 >= 0xD && v4[6] ? *(_QWORD *)((char *)a1 + v4[6]) : 16;
  v13 = v8 >= 0xD && v7[6] ? *(_QWORD *)((char *)a2 + v7[6]) : 16;
  if (v12 != v13)
    return 0;
  if (v5 < 0xF)
  {
    LOBYTE(v14) = 0;
  }
  else
  {
    v14 = v4[7];
    if (v4[7])
      LOBYTE(v14) = *((_BYTE *)a1 + v14) != 0;
  }
  if (v8 >= 0xF && v7[7])
    LOBYTE(v14) = v14 ^ (*((_BYTE *)a2 + v7[7]) != 0);
  if ((v14 & 1) != 0)
    return 0;
  if (v5 < 0x11)
  {
    LODWORD(v15) = 0;
  }
  else
  {
    v15 = v4[8];
    if (v4[8])
      LODWORD(v15) = *((unsigned __int8 *)a1 + v15);
  }
  if (v8 < 0x11)
  {
    LODWORD(v16) = 0;
  }
  else
  {
    v16 = v7[8];
    if (v7[8])
      LODWORD(v16) = *((unsigned __int8 *)a2 + v16);
  }
  if ((_DWORD)v15 != (_DWORD)v16)
    return 0;
  if (v5 < 0x13)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    v17 = v4[9];
    if (v4[9])
      LODWORD(v17) = *((unsigned __int8 *)a1 + v17);
  }
  if (v8 < 0x13)
  {
    LODWORD(v18) = 0;
  }
  else
  {
    v18 = v7[9];
    if (v7[9])
      LODWORD(v18) = *((unsigned __int8 *)a2 + v18);
  }
  if ((_DWORD)v17 != (_DWORD)v18)
    return 0;
  if (v5 < 0x15)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = v4[10];
    if (v4[10])
      LODWORD(v19) = *((unsigned __int8 *)a1 + v19);
  }
  if (v8 < 0x15)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    v20 = v7[10];
    if (v7[10])
      LODWORD(v20) = *((unsigned __int8 *)a2 + v20);
  }
  if ((_DWORD)v19 != (_DWORD)v20)
    return 0;
  if (v5 < 0x17)
  {
    LODWORD(v21) = 0;
  }
  else
  {
    v21 = v4[11];
    if (v4[11])
      LODWORD(v21) = *((unsigned __int8 *)a1 + v21);
  }
  if (v8 < 0x17)
  {
    LODWORD(v22) = 0;
  }
  else
  {
    v22 = v7[11];
    if (v7[11])
      LODWORD(v22) = *((unsigned __int8 *)a2 + v22);
  }
  if ((_DWORD)v21 != (_DWORD)v22)
    return 0;
  if (v5 < 0x19)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    v23 = v4[12];
    if (v4[12])
      LODWORD(v23) = *((unsigned __int8 *)a1 + v23);
  }
  if (v8 < 0x19)
  {
    LODWORD(v24) = 0;
  }
  else
  {
    v24 = v7[12];
    if (v7[12])
      LODWORD(v24) = *((unsigned __int8 *)a2 + v24);
  }
  if ((_DWORD)v23 != (_DWORD)v24)
    return 0;
  v25 = v5 >= 0x1B && v4[13] ? *(_QWORD *)((char *)a1 + v4[13]) : 1;
  v26 = v8 >= 0x1B && v7[13] ? *(_QWORD *)((char *)a2 + v7[13]) : 1;
  if (v25 != v26)
    return 0;
  if (v5 < 0x1D)
  {
    LODWORD(v27) = 0;
  }
  else
  {
    v27 = v4[14];
    if (v4[14])
      LODWORD(v27) = *((unsigned __int8 *)a1 + v27);
  }
  if (v8 < 0x1D)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    v28 = v7[14];
    if (v7[14])
      LODWORD(v28) = *((unsigned __int8 *)a2 + v28);
  }
  if ((_DWORD)v27 != (_DWORD)v28)
    return 0;
  if (v5 < 0x23)
  {
    LOBYTE(v29) = 0;
  }
  else
  {
    v29 = v4[17];
    if (v4[17])
      LOBYTE(v29) = *((_BYTE *)a1 + v29) != 0;
  }
  if (v8 >= 0x23 && v7[17])
    LOBYTE(v29) = v29 ^ (*((_BYTE *)a2 + v7[17]) != 0);
  if ((v29 & 1) != 0)
    return 0;
  v30 = v5 >= 0x27 && v4[19] ? *((unsigned __int8 *)a1 + v4[19]) : 255;
  v31 = v8 >= 0x27 && v7[19] ? *((unsigned __int8 *)a2 + v7[19]) : 255;
  if (v30 != v31)
    return 0;
  if (v5 < 0x29)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    v32 = v4[20];
    if (v4[20])
      LODWORD(v32) = *(int *)((char *)a1 + v32);
  }
  if (v8 < 0x29)
  {
    LODWORD(v33) = 0;
  }
  else
  {
    v33 = v7[20];
    if (v7[20])
      LODWORD(v33) = *(int *)((char *)a2 + v33);
  }
  if ((_DWORD)v32 != (_DWORD)v33)
    return 0;
  v34 = v5 >= 7 && v4[3] ? (int *)((char *)a1 + v4[3] + *(unsigned int *)((char *)a1 + v4[3])) : 0;
  v35 = v8 >= 7 && v7[3] ? (int *)((char *)a2 + v7[3] + *(unsigned int *)((char *)a2 + v7[3])) : 0;
  if (!EqualStageInputOutputDescriptor(v34, v35))
    return 0;
  v36 = v5 >= 0x1F && v4[15] ? (unint64_t)a1 + v4[15] + *(unsigned int *)((char *)a1 + v4[15]) : 0;
  v37 = v8 >= 0x1F && v7[15] ? (unsigned int *)((char *)a2 + v7[15] + *(unsigned int *)((char *)a2 + v7[15])) : 0;
  if (!EqualPipelineBuffers(v36, v37))
    return 0;
  if (v5 >= 0x2D && v4[22])
    v39 = (const LinkedFunctions *)a1 + v4[22] + *(unsigned int *)((char *)a1 + v4[22]);
  else
    v39 = 0;
  if (v8 >= 0x2D && v7[22])
    v41 = (const LinkedFunctions *)a2 + v7[22] + *(unsigned int *)((char *)a2 + v7[22]);
  else
    v41 = 0;
  return MTLMetalScriptSerializer::EqualLinkedFunctions(v39, v41, v38);
}

uint64_t MTLMetalScriptSerializer::EqualRenderDescriptor(int *a1, int *a2)
{
  unsigned __int16 *v2;
  unsigned int v3;
  int *v4;
  unsigned __int16 *v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  uint64_t result;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  v3 = *v2;
  if (v3 >= 9 && v2[4])
    v4 = (int *)((char *)a1 + v2[4] + *(unsigned int *)((char *)a1 + v2[4]));
  else
    v4 = 0;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  v6 = *v5;
  if (v6 >= 9 && v5[4])
    v7 = (int *)((char *)a2 + v5[4] + *(unsigned int *)((char *)a2 + v5[4]));
  else
    v7 = 0;
  if (v3 >= 0xB && (v8 = v2[5]) != 0)
    v9 = (int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
  else
    v9 = 0;
  if (v6 >= 0xB && v5[5])
    v10 = (int *)((char *)a2 + v5[5] + *(unsigned int *)((char *)a2 + v5[5]));
  else
    v10 = 0;
  result = MTLMetalScriptSerializer::EqualFragmentDescriptor(v9, v10);
  if ((_DWORD)result)
    return MTLMetalScriptSerializer::EqualVertexShaderDescriptor(v4, v7);
  return result;
}

uint64_t MTLMetalScriptSerializer::EqualMeshRenderDescriptor(int *a1, int *a2)
{
  unsigned __int16 *v2;
  unsigned int v3;
  int *v4;
  unsigned __int16 *v5;
  unsigned int v6;
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  int *v11;
  int *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  const LinkedFunctions *v37;
  const LinkedFunctions *v38;
  const LinkedFunctions *v39;
  unsigned __int16 *v40;
  unsigned int v41;
  int v42;
  unsigned __int16 *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  const LinkedFunctions *v65;
  const LinkedFunctions *v66;
  const LinkedFunctions *v68;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  v3 = *v2;
  if (v3 >= 0xB && v2[5])
    v4 = (int *)((char *)a1 + v2[5] + *(unsigned int *)((char *)a1 + v2[5]));
  else
    v4 = 0;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  v6 = *v5;
  if (v6 >= 0xB && v5[5])
    v7 = (int *)((char *)a2 + v5[5] + *(unsigned int *)((char *)a2 + v5[5]));
  else
    v7 = 0;
  if (v3 >= 0xD && v2[6])
    v8 = (int *)((char *)a1 + v2[6] + *(unsigned int *)((char *)a1 + v2[6]));
  else
    v8 = 0;
  if (v6 >= 0xD && v5[6])
    v9 = (int *)((char *)a2 + v5[6] + *(unsigned int *)((char *)a2 + v5[6]));
  else
    v9 = 0;
  if (v3 >= 0xF && (v10 = v2[7]) != 0)
    v11 = (int *)((char *)a1 + v10 + *(unsigned int *)((char *)a1 + v10));
  else
    v11 = 0;
  if (v6 >= 0xF && v5[7])
    v12 = (int *)((char *)a2 + v5[7] + *(unsigned int *)((char *)a2 + v5[7]));
  else
    v12 = 0;
  if (!MTLMetalScriptSerializer::EqualFragmentDescriptor(v11, v12))
    return 0;
  v13 = (unsigned __int16 *)((char *)v4 - *v4);
  v14 = *v13;
  if (v14 >= 0xD && v13[6])
    v15 = *(_QWORD *)((char *)v4 + v13[6]);
  else
    v15 = 1;
  v16 = (unsigned __int16 *)((char *)v7 - *v7);
  v17 = *v16;
  if (v17 >= 0xD && v16[6])
    v18 = *(_QWORD *)((char *)v7 + v16[6]);
  else
    v18 = 1;
  if (v15 != v18)
    return 0;
  if (v14 < 0xB)
  {
    v19 = 0;
  }
  else
  {
    v19 = v13[5];
    if (v13[5])
      v19 = *(_QWORD *)((char *)v4 + v19);
  }
  if (v17 < 0xB)
  {
    v20 = 0;
  }
  else
  {
    v20 = v16[5];
    if (v16[5])
      v20 = *(_QWORD *)((char *)v7 + v20);
  }
  if (v19 != v20)
    return 0;
  if (v14 < 7)
  {
    v21 = 0;
  }
  else
  {
    v21 = v13[3];
    if (v13[3])
      v21 = *(_QWORD *)((char *)v4 + v21);
  }
  if (v17 < 7)
  {
    v22 = 0;
  }
  else
  {
    v22 = v16[3];
    if (v16[3])
      v22 = *(_QWORD *)((char *)v7 + v22);
  }
  if (v21 != v22)
    return 0;
  v23 = v14 >= 0xF && v13[7] ? *(_QWORD *)((char *)v4 + v13[7]) : 1;
  v24 = v17 >= 0xF && v16[7] ? *(_QWORD *)((char *)v7 + v16[7]) : 1;
  if (v23 != v24)
    return 0;
  if (v14 < 0x1B)
  {
    LOBYTE(v25) = 0;
  }
  else
  {
    v25 = v13[13];
    if (v13[13])
      LOBYTE(v25) = *((_BYTE *)v4 + v25) != 0;
  }
  if (v17 >= 0x1B && v16[13])
    LOBYTE(v25) = v25 ^ (*((_BYTE *)v7 + v16[13]) != 0);
  if ((v25 & 1) != 0)
    return 0;
  if (v14 < 9)
  {
    v26 = 0;
  }
  else
  {
    v26 = v13[4];
    if (v13[4])
      v26 = *(_QWORD *)((char *)v4 + v26);
  }
  if (v17 < 9)
  {
    v27 = 0;
  }
  else
  {
    v27 = v16[4];
    if (v16[4])
      v27 = *(_QWORD *)((char *)v7 + v27);
  }
  if (v26 != v27)
    return 0;
  if (v14 < 0x17)
  {
    LOBYTE(v28) = 0;
  }
  else
  {
    v28 = v13[11];
    if (v13[11])
      LOBYTE(v28) = *((_BYTE *)v4 + v28) != 0;
  }
  if (v17 >= 0x17 && v16[11])
    LOBYTE(v28) = v28 ^ (*((_BYTE *)v7 + v16[11]) != 0);
  if ((v28 & 1) != 0)
    return 0;
  if (v14 < 0x15)
  {
    LOBYTE(v29) = 0;
  }
  else
  {
    v29 = v13[10];
    if (v13[10])
      LOBYTE(v29) = *((_BYTE *)v4 + v29) != 0;
  }
  if (v17 >= 0x15 && v16[10])
    LOBYTE(v29) = v29 ^ (*((_BYTE *)v7 + v16[10]) != 0);
  if ((v29 & 1) != 0)
    return 0;
  if (v14 < 0x19)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    v30 = v13[12];
    if (v13[12])
      LODWORD(v30) = *((unsigned __int8 *)v4 + v30);
  }
  if (v17 < 0x19)
  {
    LODWORD(v31) = 0;
  }
  else
  {
    v31 = v16[12];
    if (v16[12])
      LODWORD(v31) = *((unsigned __int8 *)v7 + v31);
  }
  if ((_DWORD)v30 != (_DWORD)v31)
    return 0;
  if (v14 < 5)
  {
    LOBYTE(v32) = 0;
  }
  else
  {
    v32 = v13[2];
    if (v13[2])
      LOBYTE(v32) = *((_BYTE *)v4 + v32) != 0;
  }
  if (v17 >= 5 && v16[2])
    LOBYTE(v32) = v32 ^ (*((_BYTE *)v7 + v16[2]) != 0);
  if ((v32 & 1) != 0)
    return 0;
  if (v14 < 0x11)
  {
    LODWORD(v33) = 0;
  }
  else
  {
    v33 = v13[8];
    if (v13[8])
      LODWORD(v33) = *((unsigned __int8 *)v4 + v33);
  }
  if (v17 < 0x11)
  {
    LODWORD(v34) = 0;
  }
  else
  {
    v34 = v16[8];
    if (v16[8])
      LODWORD(v34) = *((unsigned __int8 *)v7 + v34);
  }
  if ((_DWORD)v33 != (_DWORD)v34)
    return 0;
  v35 = v14 >= 0x13 && v13[9] ? (unint64_t)v4 + v13[9] + *(unsigned int *)((char *)v4 + v13[9]) : 0;
  v36 = v17 >= 0x13 && v16[9] ? (unsigned int *)((char *)v7 + v16[9] + *(unsigned int *)((char *)v7 + v16[9])) : 0;
  if (!EqualPipelineBuffers(v35, v36))
    return 0;
  v38 = v14 >= 0x1D && v13[14] ? (const LinkedFunctions *)v4 + v13[14] + *(unsigned int *)((char *)v4 + v13[14]) : 0;
  v39 = v17 >= 0x1D && v16[14] ? (const LinkedFunctions *)v7 + v16[14] + *(unsigned int *)((char *)v7 + v16[14]) : 0;
  if (!MTLMetalScriptSerializer::EqualLinkedFunctions(v38, v39, v37))
    return 0;
  v40 = (unsigned __int16 *)((char *)v8 - *v8);
  v41 = *v40;
  if (v41 >= 0x1B && v40[13])
    v42 = *((unsigned __int8 *)v8 + v40[13]);
  else
    v42 = 255;
  v43 = (unsigned __int16 *)((char *)v9 - *v9);
  v44 = *v43;
  if (v44 >= 0x1B && v43[13])
    v45 = *((unsigned __int8 *)v9 + v43[13]);
  else
    v45 = 255;
  if (v42 != v45)
    return 0;
  v46 = v41 >= 0xB && v40[5] ? *(_QWORD *)((char *)v8 + v40[5]) : 1;
  v47 = v44 >= 0xB && v43[5] ? *(_QWORD *)((char *)v9 + v43[5]) : 1;
  if (v46 != v47)
    return 0;
  if (v41 < 7)
  {
    v48 = 0;
  }
  else
  {
    v48 = v40[3];
    if (v40[3])
      v48 = *(_QWORD *)((char *)v8 + v48);
  }
  if (v44 < 7)
  {
    v49 = 0;
  }
  else
  {
    v49 = v43[3];
    if (v43[3])
      v49 = *(_QWORD *)((char *)v9 + v49);
  }
  if (v48 != v49)
    return 0;
  v50 = v41 >= 0xF && v40[7] ? *(_QWORD *)((char *)v8 + v40[7]) : 1;
  v51 = v44 >= 0xF && v43[7] ? *(_QWORD *)((char *)v9 + v43[7]) : 1;
  if (v50 != v51)
    return 0;
  if (v41 < 0x1D)
  {
    LOBYTE(v52) = 0;
  }
  else
  {
    v52 = v40[14];
    if (v40[14])
      LOBYTE(v52) = *((_BYTE *)v8 + v52) != 0;
  }
  if (v44 >= 0x1D && v43[14])
    LOBYTE(v52) = v52 ^ (*((_BYTE *)v9 + v43[14]) != 0);
  if ((v52 & 1) != 0)
    return 0;
  if (v41 < 9)
  {
    v53 = 0;
  }
  else
  {
    v53 = v40[4];
    if (v40[4])
      v53 = *(_QWORD *)((char *)v8 + v53);
  }
  if (v44 < 9)
  {
    v54 = 0;
  }
  else
  {
    v54 = v43[4];
    if (v43[4])
      v54 = *(_QWORD *)((char *)v9 + v54);
  }
  if (v53 != v54)
    return 0;
  v55 = v41 < 0xD || !v40[6] || *((unsigned __int8 *)v8 + v40[6]) != 0;
  if (v44 >= 0xD && v43[6])
  {
    if (((v55 ^ (*((_BYTE *)v9 + v43[6]) != 0)) & 1) != 0)
      return 0;
  }
  else if (!v55)
  {
    return 0;
  }
  if (v41 < 0x17)
  {
    LOBYTE(v56) = 0;
  }
  else
  {
    v56 = v40[11];
    if (v40[11])
      LOBYTE(v56) = *((_BYTE *)v8 + v56) != 0;
  }
  if (v44 >= 0x17 && v43[11])
    LOBYTE(v56) = v56 ^ (*((_BYTE *)v9 + v43[11]) != 0);
  if ((v56 & 1) != 0)
    return 0;
  if (v41 < 0x15)
  {
    LOBYTE(v57) = 0;
  }
  else
  {
    v57 = v40[10];
    if (v40[10])
      LOBYTE(v57) = *((_BYTE *)v8 + v57) != 0;
  }
  if (v44 >= 0x15 && v43[10])
    LOBYTE(v57) = v57 ^ (*((_BYTE *)v9 + v43[10]) != 0);
  if ((v57 & 1) != 0)
    return 0;
  if (v41 < 0x19)
  {
    LODWORD(v58) = 0;
  }
  else
  {
    v58 = v40[12];
    if (v40[12])
      LODWORD(v58) = *((unsigned __int8 *)v8 + v58);
  }
  if (v44 < 0x19)
  {
    LODWORD(v59) = 0;
  }
  else
  {
    v59 = v43[12];
    if (v43[12])
      LODWORD(v59) = *((unsigned __int8 *)v9 + v59);
  }
  if ((_DWORD)v58 != (_DWORD)v59)
    return 0;
  if (v41 < 5)
  {
    LOBYTE(v60) = 0;
  }
  else
  {
    v60 = v40[2];
    if (v40[2])
      LOBYTE(v60) = *((_BYTE *)v8 + v60) != 0;
  }
  if (v44 >= 5 && v43[2])
    LOBYTE(v60) = v60 ^ (*((_BYTE *)v9 + v43[2]) != 0);
  if ((v60 & 1) != 0)
    return 0;
  if (v41 < 0x11)
  {
    LODWORD(v61) = 0;
  }
  else
  {
    v61 = v40[8];
    if (v40[8])
      LODWORD(v61) = *((unsigned __int8 *)v8 + v61);
  }
  if (v44 < 0x11)
  {
    LODWORD(v62) = 0;
  }
  else
  {
    v62 = v43[8];
    if (v43[8])
      LODWORD(v62) = *((unsigned __int8 *)v9 + v62);
  }
  if ((_DWORD)v61 != (_DWORD)v62)
    return 0;
  v63 = v41 >= 0x13 && v40[9] ? (unint64_t)v8 + v40[9] + *(unsigned int *)((char *)v8 + v40[9]) : 0;
  v64 = v44 >= 0x13 && v43[9] ? (unsigned int *)((char *)v9 + v43[9] + *(unsigned int *)((char *)v9 + v43[9])) : 0;
  if (!EqualPipelineBuffers(v63, v64))
    return 0;
  if (v41 >= 0x1F && v40[15])
    v66 = (const LinkedFunctions *)v8 + v40[15] + *(unsigned int *)((char *)v8 + v40[15]);
  else
    v66 = 0;
  if (v44 >= 0x1F && v43[15])
    v68 = (const LinkedFunctions *)v9 + v43[15] + *(unsigned int *)((char *)v9 + v43[15]);
  else
    v68 = 0;
  return MTLMetalScriptSerializer::EqualLinkedFunctions(v66, v68, v65);
}

uint64_t MTLMetalScriptSerializer::EqualTileRenderDescriptor(int *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  int *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  int *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  unsigned int *v27;
  const LinkedFunctions *v28;
  const LinkedFunctions *v29;
  const LinkedFunctions *v31;

  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 >= 7u && (v3 = v2[3]) != 0)
    v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  else
    v4 = 0;
  v5 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v5 >= 7u && (v6 = v5[3]) != 0)
    v7 = (int *)((char *)a2 + v6 + *(unsigned int *)((char *)a2 + v6));
  else
    v7 = 0;
  v8 = (unsigned __int16 *)((char *)v4 - *v4);
  v9 = *v8;
  if (v9 >= 9 && v8[4])
    v10 = *(_QWORD *)((char *)v4 + v8[4]);
  else
    v10 = 1;
  v11 = (unsigned __int16 *)((char *)v7 - *v7);
  v12 = *v11;
  if (v12 >= 9 && v11[4])
    v13 = *(_QWORD *)((char *)v7 + v11[4]);
  else
    v13 = 1;
  if (v10 != v13)
    return 0;
  if (v9 < 0x13)
  {
    LOBYTE(v14) = 0;
  }
  else
  {
    v14 = v8[9];
    if (v8[9])
      LOBYTE(v14) = *((_BYTE *)v4 + v14) != 0;
  }
  if (v12 >= 0x13 && v11[9])
    LOBYTE(v14) = v14 ^ (*((_BYTE *)v7 + v11[9]) != 0);
  if ((v14 & 1) != 0)
    return 0;
  v15 = v9 >= 0xB && v8[5] ? *(_QWORD *)((char *)v4 + v8[5]) : 1;
  v16 = v12 >= 0xB && v11[5] ? *(_QWORD *)((char *)v7 + v11[5]) : 1;
  if (v15 != v16)
    return 0;
  if (v9 < 0xD)
  {
    v17 = 0;
  }
  else
  {
    v17 = v8[6];
    if (v8[6])
      v17 = *(_QWORD *)((char *)v4 + v17);
  }
  if (v12 < 0xD)
  {
    v18 = 0;
  }
  else
  {
    v18 = v11[6];
    if (v11[6])
      v18 = *(_QWORD *)((char *)v7 + v18);
  }
  if (v17 != v18)
    return 0;
  if (v9 < 7)
  {
    v19 = 0;
  }
  else
  {
    v19 = v8[3];
    if (v8[3])
      v19 = *(_QWORD *)((char *)v4 + v19);
  }
  if (v12 < 7)
  {
    v20 = 0;
  }
  else
  {
    v20 = v11[3];
    if (v11[3])
      v20 = *(_QWORD *)((char *)v7 + v20);
  }
  if (v19 != v20)
    return 0;
  if (v9 < 5)
  {
    LOBYTE(v21) = 0;
  }
  else
  {
    v21 = v8[2];
    if (v8[2])
      LOBYTE(v21) = *((_BYTE *)v4 + v21) != 0;
  }
  if (v12 >= 5 && v11[2])
    LOBYTE(v21) = v21 ^ (*((_BYTE *)v7 + v11[2]) != 0);
  if ((v21 & 1) != 0)
    return 0;
  if (v9 < 0x15)
  {
    LODWORD(v22) = 0;
  }
  else
  {
    v22 = v8[10];
    if (v8[10])
      LODWORD(v22) = *((unsigned __int8 *)v4 + v22);
  }
  if (v12 < 0x15)
  {
    LODWORD(v23) = 0;
  }
  else
  {
    v23 = v11[10];
    if (v11[10])
      LODWORD(v23) = *((unsigned __int8 *)v7 + v23);
  }
  if ((_DWORD)v22 != (_DWORD)v23)
    return 0;
  v24 = v9 >= 0xF && v8[7] ? (unint64_t)v4 + v8[7] + *(unsigned int *)((char *)v4 + v8[7]) : 0;
  v25 = v12 >= 0xF && v11[7] ? (unsigned int *)((char *)v7 + v11[7] + *(unsigned int *)((char *)v7 + v11[7])) : 0;
  if (!EqualTileAttachments(v24, v25))
    return 0;
  v26 = v9 >= 0x11 && v8[8] ? (unint64_t)v4 + v8[8] + *(unsigned int *)((char *)v4 + v8[8]) : 0;
  v27 = v12 >= 0x11 && v11[8] ? (unsigned int *)((char *)v7 + v11[8] + *(unsigned int *)((char *)v7 + v11[8])) : 0;
  if (!EqualPipelineBuffers(v26, v27))
    return 0;
  if (v9 >= 0x17 && v8[11])
    v29 = (const LinkedFunctions *)v4 + v8[11] + *(unsigned int *)((char *)v4 + v8[11]);
  else
    v29 = 0;
  if (v12 >= 0x17 && v11[11])
    v31 = (const LinkedFunctions *)v7 + v11[11] + *(unsigned int *)((char *)v7 + v11[11]);
  else
    v31 = 0;
  return MTLMetalScriptSerializer::EqualLinkedFunctions(v29, v31, v28);
}

uint64_t EqualTileAttachments(unint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  BOOL v14;
  BOOL v15;
  _BOOL8 v16;

  if (!(a1 | (unint64_t)a2))
    return 1;
  if (a1)
  {
    LODWORD(v2) = *(_DWORD *)a1;
    if (a2)
    {
LABEL_4:
      v3 = *a2;
      goto LABEL_7;
    }
  }
  else
  {
    LODWORD(v2) = 0;
    if (a2)
      goto LABEL_4;
  }
  v3 = 0;
LABEL_7:
  if (v2 <= v3)
    v2 = v3;
  else
    v2 = v2;
  if ((_DWORD)v2)
  {
    v4 = (unsigned int *)(a1 + 4);
    v5 = a2 + 1;
    v6 = v2 - 1;
    while (1)
    {
      if (a1)
      {
        v7 = (int *)((char *)v4 + *v4);
        if (a2)
          goto LABEL_14;
      }
      else
      {
        v7 = 0;
        if (a2)
        {
LABEL_14:
          v8 = (int *)((char *)v5 + *v5);
          if (v7)
            goto LABEL_18;
          goto LABEL_22;
        }
      }
      v8 = 0;
      if (v7)
      {
LABEL_18:
        v9 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v9 >= 5u && (v10 = v9[2]) != 0)
          LODWORD(v7) = *(unsigned __int16 *)((char *)v7 + v10);
        else
          LODWORD(v7) = 0;
      }
LABEL_22:
      if (v8)
      {
        v11 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v11 >= 5u && (v12 = v11[2]) != 0)
          LODWORD(v8) = *(unsigned __int16 *)((char *)v8 + v12);
        else
          LODWORD(v8) = 0;
      }
      v14 = v6-- != 0;
      v15 = (_DWORD)v7 == (_DWORD)v8;
      v16 = (_DWORD)v7 == (_DWORD)v8;
      if (v15)
      {
        ++v4;
        ++v5;
        if (v14)
          continue;
      }
      return v16;
    }
  }
  return 1;
}

uint64_t MTLMetalScriptSerializer::addVertexDescriptor(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLVertexDescriptor *a3, BOOL *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v19;
  flatbuffers::FlatBufferBuilder *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  void *v62;
  int v63;
  int v64;
  int v65;
  void *__p;
  char *v68;
  char *v69;

  LOBYTE(a3->super.isa) = 0;
  if (!a2)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(_QWORD **)(*((_QWORD *)a2 + 1) + 8 + v6);
    if (!v9)
    {
      ++v8;
LABEL_13:
      v12 = v7;
      goto LABEL_14;
    }
    if (v9[1])
      v10 = 0;
    else
      v10 = v9[3] == 1;
    v11 = v10 && v9[2] == 1;
    v12 = ++v8;
    if (v11)
      goto LABEL_13;
LABEL_14:
    v6 += 8;
    v7 = v12;
  }
  while (v6 != 248);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = *(_QWORD **)(*((_QWORD *)a2 + 2) + 8 + v13);
    if (v16)
    {
      v17 = ++v14;
      if (v16[2] | v16[1] | v16[3])
        goto LABEL_21;
    }
    else
    {
      ++v14;
    }
    v17 = v15;
LABEL_21:
    v13 += 8;
    v15 = v17;
  }
  while (v13 != 248);
  if (!(v12 | v17))
    return 0;
  if (!v12)
  {
    v41 = 0;
    if (v17)
      goto LABEL_52;
    goto LABEL_80;
  }
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v12);
  v19 = 0;
  v20 = a2;
  do
  {
    v21 = *(_QWORD **)(*((_QWORD *)v20 + 1) + 8 + 8 * v19);
    if (v21)
    {
      v22 = v21[2];
      v23 = v21[3];
      v24 = v21[1];
    }
    else
    {
      v24 = 0;
      v23 = 1;
      LOBYTE(v22) = 1;
    }
    LOBYTE(a3->super.isa) |= (v24 & 3) != 0;
    *((_BYTE *)this + 70) = 1;
    v25 = *((_DWORD *)this + 8);
    v26 = *((_DWORD *)this + 12);
    v27 = *((_DWORD *)this + 10);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 4, v22, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 6, v23, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 8, v24, 0);
    v28 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v25 - (unsigned __int16)v26 + v27);
    v20 = a2;
    v29 = v28;
    v30 = v68;
    if (v68 >= v69)
    {
      v32 = (char *)__p;
      v33 = (v68 - (_BYTE *)__p) >> 2;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v35 = v69 - (_BYTE *)__p;
      if ((v69 - (_BYTE *)__p) >> 1 > v34)
        v34 = v35 >> 1;
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v36 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v36 = v34;
      if (v36)
      {
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v69, v36);
        v32 = (char *)__p;
        v30 = v68;
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[4 * v33];
      *(_DWORD *)v38 = v29;
      v31 = v38 + 4;
      while (v30 != v32)
      {
        v39 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v38 - 1) = v39;
        v38 -= 4;
      }
      __p = v38;
      v68 = v31;
      v69 = &v37[4 * v36];
      if (v32)
        operator delete(v32);
    }
    else
    {
      *(_DWORD *)v68 = v28;
      v31 = v30 + 4;
    }
    v68 = v31;
    ++v19;
  }
  while (v19 != v12);
  if (v31 == __p)
    v40 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>> const&)::t;
  else
    v40 = __p;
  v41 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v40, (v31 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v68 = (char *)__p;
    operator delete(__p);
  }
  if (!v17)
  {
LABEL_80:
    v63 = 0;
    goto LABEL_81;
  }
LABEL_52:
  __p = 0;
  v68 = 0;
  v69 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v17);
  v42 = 0;
  v65 = v41;
  do
  {
    v43 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 + 8 * v42);
    if (v43)
    {
      v44 = *(_QWORD *)(v43 + 8);
      v45 = *(_QWORD *)(v43 + 16);
      v46 = *(_DWORD *)(v43 + 24);
    }
    else
    {
      v45 = 0;
      LOBYTE(v44) = 0;
      v46 = 0;
    }
    *((_BYTE *)this + 70) = 1;
    v47 = *((_DWORD *)this + 8);
    v48 = *((_DWORD *)this + 12);
    v49 = *((_DWORD *)this + 10);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 4, v44, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 6, v45, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 8, v46, 0);
    v50 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v47 - (unsigned __int16)v48 + v49);
    v51 = v50;
    v52 = v68;
    if (v68 >= v69)
    {
      v54 = (char *)__p;
      v55 = (v68 - (_BYTE *)__p) >> 2;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v57 = v69 - (_BYTE *)__p;
      if ((v69 - (_BYTE *)__p) >> 1 > v56)
        v56 = v57 >> 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
        v58 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
      {
        v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v69, v58);
        v54 = (char *)__p;
        v52 = v68;
      }
      else
      {
        v59 = 0;
      }
      v60 = &v59[4 * v55];
      *(_DWORD *)v60 = v51;
      v53 = v60 + 4;
      while (v52 != v54)
      {
        v61 = *((_DWORD *)v52 - 1);
        v52 -= 4;
        *((_DWORD *)v60 - 1) = v61;
        v60 -= 4;
      }
      __p = v60;
      v68 = v53;
      v69 = &v59[4 * v58];
      if (v54)
        operator delete(v54);
    }
    else
    {
      *(_DWORD *)v68 = v50;
      v53 = v52 + 4;
    }
    v68 = v53;
    ++v42;
  }
  while (v42 != v17);
  if (v53 == __p)
    v62 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>> const&)::t;
  else
    v62 = __p;
  v63 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v62, (v53 - (_BYTE *)__p) >> 2);
  v41 = v65;
  if (__p)
  {
    v68 = (char *)__p;
    operator delete(__p);
  }
LABEL_81:
  *((_BYTE *)this + 70) = 1;
  v64 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v41);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 4, v63);
  return flatbuffers::FlatBufferBuilder::EndTable(this, v64);
}

void sub_1827076B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t MTLMetalScriptSerializer::addColorAttachmentsDescriptor(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLRenderPipelineColorAttachmentDescriptorArray *a3, unsigned int *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int isa;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  void *v39;
  void *__p;
  char *v42;
  char *v43;

  if (!a2)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = *(_QWORD *)((char *)a2 + v7 + 8);
    if (!v10)
    {
      ++v9;
LABEL_7:
      v11 = v8;
      goto LABEL_8;
    }
    v11 = ++v9;
    if ((*(_QWORD *)(v10 + 8) & 0xFFFFFFF07FFFFFFFLL) == 0x78001080)
      goto LABEL_7;
LABEL_8:
    v7 += 8;
    v8 = v11;
  }
  while (v7 != 64);
  if (!v11)
    return 0;
  __p = 0;
  v42 = 0;
  v43 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v11);
  for (i = 0; i != v11; ++i)
  {
    v13 = *((_QWORD *)a2 + i + 1);
    if (v13)
      v14 = (uint64_t *)(v13 + 8);
    else
      v14 = &_MTLDefaultRenderPipelineAttachmentPrivate;
    *((_BYTE *)this + 70) = 1;
    v15 = *((_DWORD *)this + 8);
    v16 = *((_DWORD *)this + 12);
    v17 = *((_DWORD *)this + 10);
    v18 = *v14;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)this, 4, (unsigned __int16)((unint64_t)*v14 >> 36), 0);
    v19 = v18 >> 36;
    if ((int)(v18 >> 36) > 115)
    {
      switch((int)v19)
      {
        case 500:
        case 501:
        case 502:
        case 503:
        case 504:
        case 505:
        case 506:
        case 507:
        case 520:
        case 521:
        case 522:
        case 523:
        case 524:
        case 525:
        case 526:
        case 527:
        case 540:
        case 541:
        case 542:
        case 543:
        case 544:
        case 545:
        case 550:
        case 551:
        case 562:
          goto LABEL_30;
        case 508:
        case 509:
        case 510:
        case 528:
        case 529:
        case 530:
        case 546:
        case 547:
        case 548:
        case 567:
        case 568:
        case 569:
        case 580:
        case 581:
        case 582:
        case 583:
        case 584:
        case 585:
        case 586:
        case 587:
        case 588:
        case 589:
        case 600:
        case 601:
        case 602:
        case 628:
        case 629:
          isa = (int)a3->super.isa;
          v21 = (uint64_t)a3->super.isa & 0x60000000 | 7;
          v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 7;
          goto LABEL_31;
        case 511:
        case 512:
        case 513:
        case 514:
        case 515:
        case 516:
        case 517:
        case 518:
        case 519:
        case 531:
        case 532:
        case 533:
        case 534:
        case 535:
        case 536:
        case 537:
        case 538:
        case 539:
        case 549:
        case 556:
        case 557:
        case 558:
        case 559:
        case 561:
        case 614:
          goto LABEL_35;
        case 552:
        case 553:
        case 554:
        case 555:
          isa = (int)a3->super.isa;
          v23 = (uint64_t)a3->super.isa & 0x60000000 | 2;
          v24 = ((uint64_t)a3->super.isa & 0x1FFFFFFE) == 0;
          goto LABEL_58;
        case 560:
          isa = (int)a3->super.isa;
          v23 = (uint64_t)a3->super.isa & 0x60000000 | 4;
          v24 = ((uint64_t)a3->super.isa & 0x1FFFFFFC) == 0;
          goto LABEL_58;
        case 563:
        case 564:
        case 565:
        case 566:
        case 570:
        case 571:
        case 572:
        case 573:
        case 574:
        case 575:
        case 590:
        case 591:
        case 592:
        case 593:
        case 594:
        case 595:
        case 596:
        case 597:
        case 598:
        case 599:
        case 603:
        case 604:
        case 605:
        case 606:
          isa = (int)a3->super.isa;
          v21 = (uint64_t)a3->super.isa & 0x60000000 | 6;
          v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFE) >= 6;
          goto LABEL_31;
        case 576:
        case 577:
        case 578:
        case 579:
          isa = (int)a3->super.isa;
          v21 = (uint64_t)a3->super.isa & 0x60000000 | 5;
          v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 5;
          goto LABEL_31;
        case 607:
        case 608:
        case 609:
        case 610:
        case 611:
        case 612:
        case 613:
        case 615:
        case 616:
        case 617:
        case 618:
        case 619:
        case 620:
        case 621:
        case 622:
        case 623:
        case 624:
        case 625:
        case 626:
        case 627:
          isa = (int)a3->super.isa;
          v21 = (uint64_t)a3->super.isa & 0x60000000 | 9;
          v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 9;
          goto LABEL_31;
        case 630:
        case 631:
        case 632:
        case 633:
        case 634:
        case 635:
        case 636:
        case 637:
        case 638:
        case 639:
        case 640:
        case 641:
        case 642:
        case 643:
        case 644:
        case 645:
          isa = (int)a3->super.isa;
          v21 = (uint64_t)a3->super.isa & 0x60000000 | 0xA;
          v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFE) >= 0xA;
          goto LABEL_31;
        default:
          if ((_DWORD)v19 == 116)
            goto LABEL_56;
          if ((_DWORD)v19 != 302)
            goto LABEL_35;
          v25 = LODWORD(a3->super.isa) | 0x60000000;
          break;
      }
      goto LABEL_34;
    }
    if (v19 <= 0x2C)
    {
      if (((1 << v19) & 0x1F0080000800) != 0)
        goto LABEL_22;
      if (v19 == 1)
      {
LABEL_30:
        isa = (int)a3->super.isa;
        v21 = (uint64_t)a3->super.isa & 0x60000000 | 3;
        v22 = (unint64_t)((uint64_t)a3->super.isa & 0x1FFFFFFF) >= 3;
LABEL_31:
        if (!v22)
          isa = v21;
LABEL_33:
        v25 = isa | 0x80000000;
LABEL_34:
        LODWORD(a3->super.isa) = v25;
        goto LABEL_35;
      }
      if (v19 == 26)
        goto LABEL_56;
    }
    if ((_DWORD)v19 == 66)
    {
LABEL_56:
      isa = (int)a3->super.isa;
      v23 = (uint64_t)a3->super.isa & 0x60000000 | 8;
      v24 = ((uint64_t)a3->super.isa & 0x1FFFFFF8) == 0;
LABEL_58:
      if (v24)
        isa = v23;
      goto LABEL_33;
    }
    if ((_DWORD)v19 == 93)
    {
LABEL_22:
      isa = (int)a3->super.isa;
      v23 = (uint64_t)a3->super.isa & 0x60000000 | 1;
      v24 = ((uint64_t)a3->super.isa & 0x1FFFFFFF) == 0;
      goto LABEL_58;
    }
LABEL_35:
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 6, (*(_DWORD *)v14 >> 27) & 0xF, 15);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 8, *(_DWORD *)v14 & 1, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 10, (*(unsigned __int8 *)v14 >> 4) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 12, (*(unsigned __int8 *)v14 >> 1) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 14, (*(_DWORD *)v14 >> 22) & 0x1F, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 16, (*(_DWORD *)v14 >> 17) & 0x1F, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 18, (*(_DWORD *)v14 >> 12) & 0x1F, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 20, (*(_DWORD *)v14 >> 7) & 0x1F, 1);
    v26 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v15 - (unsigned __int16)v16 + v17);
    v27 = v26;
    v28 = v42;
    if (v42 >= v43)
    {
      v30 = (char *)__p;
      v31 = (v42 - (_BYTE *)__p) >> 2;
      v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v33 = v43 - (_BYTE *)__p;
      if ((v43 - (_BYTE *)__p) >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v43, v34);
        v30 = (char *)__p;
        v28 = v42;
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[4 * v31];
      *(_DWORD *)v36 = v27;
      v29 = v36 + 4;
      while (v28 != v30)
      {
        v37 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      __p = v36;
      v42 = v29;
      v43 = &v35[4 * v34];
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_DWORD *)v42 = v26;
      v29 = v28 + 4;
    }
    v42 = v29;
  }
  if (v29 == __p)
    v39 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>> const&)::t;
  else
    v39 = __p;
  v38 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v39, (v29 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v42 = (char *)__p;
    operator delete(__p);
  }
  return v38;
}

void sub_182707C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::addTileColorAttachmentsDescriptor(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLTileRenderPipelineColorAttachmentDescriptorArray *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  void *v27;
  uint64_t v28;
  void *__p;
  char *v31;
  char *v32;

  if (!a2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)((char *)a2 + v5 + 8);
    if (v8)
    {
      v9 = ++v7;
      if (*(_DWORD *)(v8 + 8))
        goto LABEL_8;
    }
    else
    {
      ++v7;
    }
    v9 = v6;
LABEL_8:
    v5 += 8;
    v6 = v9;
  }
  while (v5 != 64);
  if (!v9)
    return 0;
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v9);
  for (i = 0; i != v9; ++i)
  {
    v11 = *((_QWORD *)a2 + i + 1);
    if (v11)
      LODWORD(v11) = *(_DWORD *)(v11 + 8);
    *((_BYTE *)this + 70) = 1;
    v12 = *((_QWORD *)this + 5);
    v13 = *((_QWORD *)this + 6);
    v14 = *((_QWORD *)this + 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)this, 4, (unsigned __int16)v11, 0);
    v15 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
    v16 = v15;
    v17 = v31;
    if (v31 >= v32)
    {
      v19 = (char *)__p;
      v20 = (v31 - (_BYTE *)__p) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v22 = v32 - (_BYTE *)__p;
      if ((v32 - (_BYTE *)__p) >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v32, v23);
        v19 = (char *)__p;
        v17 = v31;
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      *(_DWORD *)v25 = v16;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      __p = v25;
      v31 = v18;
      v32 = &v24[4 * v23];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v31 = v15;
      v18 = v17 + 4;
    }
    v31 = v18;
  }
  if (v18 == __p)
    v27 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>> const&)::t;
  else
    v27 = __p;
  v28 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v27, (v18 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
  return v28;
}

void sub_182707E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::buildStitchingGraphFromDescriptor(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  MTLFunctionStitchingGraph *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  int Graph;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *v28;
  int v29;
  int v30;
  const char *v31;
  unint64_t v32;
  int String;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int FunctionArray;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *__p;
  char *v46;
  char *v47;
  _BYTE v48[128];
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend(a3, "functions");
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v49, a4);
  FunctionArray = MTLMetalScriptSerializer::createFunctionArray((flatbuffers::FlatBufferBuilder *)a1, v8, (uint64_t)v49);
  v9 = v50;
  if (v50 == v49)
  {
    v10 = 4;
    v9 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  __p = 0;
  v46 = 0;
  v47 = 0;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v11 = (void *)objc_msgSend(a3, "functionGraphs");
  v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v42;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v42 != v14)
          objc_enumerationMutation(v11);
        Graph = MTLMetalScriptSerializer::createGraph((MTLMetalScriptSerializer *)a1, *(MTLFunctionStitchingGraph **)(*((_QWORD *)&v41 + 1) + 8 * i), v12);
        v17 = Graph;
        v18 = v46;
        if (v46 >= v47)
        {
          v20 = (char *)__p;
          v21 = (v46 - (_BYTE *)__p) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v23 = v47 - (_BYTE *)__p;
          if ((v47 - (_BYTE *)__p) >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v47, v24);
            v20 = (char *)__p;
            v18 = v46;
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[4 * v21];
          *(_DWORD *)v26 = v17;
          v19 = v26 + 4;
          while (v18 != v20)
          {
            v27 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v26 - 1) = v27;
            v26 -= 4;
          }
          __p = v26;
          v46 = v19;
          v47 = &v25[4 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_DWORD *)v46 = Graph;
          v19 = v18 + 4;
        }
        v46 = v19;
      }
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v41, v48, 16);
    }
    while (v13);
  }
  if (v46 == __p)
    v28 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Graph>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>> const&)::t;
  else
    v28 = __p;
  v29 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v28, (v46 - (_BYTE *)__p) >> 2);
  v30 = *(char *)(a2 + 23);
  if (v30 >= 0)
    v31 = (const char *)a2;
  else
    v31 = *(const char **)a2;
  if (v30 >= 0)
    v32 = *(unsigned __int8 *)(a2 + 23);
  else
    v32 = *(_QWORD *)(a2 + 8);
  String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, v31, v32);
  v34 = v29;
  *(_BYTE *)(a1 + 70) = 1;
  v35 = *(_DWORD *)(a1 + 32);
  v36 = *(_DWORD *)(a1 + 48);
  v37 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v34);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, FunctionArray);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  v38 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v35 - (unsigned __int16)v36 + v37);
  if (__p)
  {
    v46 = (char *)__p;
    operator delete(__p);
  }
  return v38;
}

void sub_182708184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::createFunctionArray(flatbuffers::FlatBufferBuilder *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void **v10;
  unint64_t v11;
  int String;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  int v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *__p[2];
  unsigned __int8 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v32 != v7)
          objc_enumerationMutation(a2);
        v38 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * i);
        v9 = *(_QWORD *)(a3 + 24);
        if (!v9)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(__p, v9, &v38);
        if ((v30 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        if ((v30 & 0x80u) == 0)
          v11 = v30;
        else
          v11 = (unint64_t)__p[1];
        String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v10, v11);
        if ((char)v30 < 0)
          operator delete(__p[0]);
        v13 = v36;
        if (v36 >= v37)
        {
          v15 = (char *)v35;
          v16 = (v36 - (_BYTE *)v35) >> 2;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v18 = v37 - (_BYTE *)v35;
          if ((v37 - (_BYTE *)v35) >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v37, v19);
            v15 = (char *)v35;
            v13 = v36;
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[4 * v16];
          *(_DWORD *)v21 = String;
          v14 = v21 + 4;
          while (v13 != v15)
          {
            v22 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v21 - 1) = v22;
            v21 -= 4;
          }
          v35 = v21;
          v36 = v14;
          v37 = &v20[4 * v19];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_DWORD *)v36 = String;
          v14 = v13 + 4;
        }
        v36 = v14;
      }
      v6 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    }
    while (v6);
    v23 = v35;
    v24 = v36;
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  v25 = v24 - v23;
  if (v25)
    v26 = v23;
  else
    v26 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  v27 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v26, v25 >> 2);
  if (v35)
  {
    v36 = (char *)v35;
    operator delete(v35);
  }
  return v27;
}

void sub_18270844C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_182708484(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x18270846CLL);
}

uint64_t MTLMetalScriptSerializer::createGraph(MTLMetalScriptSerializer *this, MTLFunctionStitchingGraph *a2, MTLFunctionStitchingGraph *a3)
{
  id *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  const unsigned __int8 *v36;
  int v37;
  const unsigned __int8 *v38;
  int v39;
  void **v40;
  unint64_t v41;
  int String;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  int v52;
  char *v53;
  char *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t k;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  const unsigned __int8 *v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  char *v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  int v195;
  int v196;
  unsigned int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  int v206;
  int BuiltinNode;
  int v208;
  int v209;
  int v210;
  MTLFunctionStitchingGraph *v211;
  const char *v212;
  size_t v213;
  int v214;
  NSArray *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t m;
  void *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unsigned int v224;
  int v225;
  int v226;
  char *v227;
  char *v228;
  int v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  int v234;
  int v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  int v251;
  char *v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  int v259;
  int v260;
  char *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  int v271;
  void *v272;
  int v273;
  void *v274;
  int v275;
  int v276;
  uint64_t v277;
  int v278;
  int v279;
  int v280;
  int v281;
  uint64_t *v282;
  uint64_t v283;
  id *v286;
  void *v287;
  id *v288;
  int v289;
  char v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  void *__p[2];
  unsigned __int8 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  void *v310;
  char *v311;
  char *v312;
  void *v313;
  char *v314;
  char *v315;
  void *v316;
  char *v317;
  char *v318;
  void *v319;
  id *v320;
  _BYTE v321[47];
  _BYTE v322[128];
  _BYTE v323[128];
  _BYTE v324[128];
  _BYTE v325[128];
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  reorderStitchingGraphNodes(a2, (uint64_t)&v319);
  v316 = 0;
  v317 = 0;
  v318 = 0;
  v4 = (id *)v319;
  v286 = v320;
  if (v319 != v320)
  {
    do
    {
      v288 = v4;
      v5 = *v4;
      if (objc_msgSend(*v4, "isMemberOfClass:", objc_opt_class()))
      {
        v313 = 0;
        v314 = 0;
        v315 = 0;
        v310 = 0;
        v311 = 0;
        v312 = 0;
        v306 = 0u;
        v307 = 0u;
        v308 = 0u;
        v309 = 0u;
        v287 = v5;
        v6 = (void *)objc_msgSend(v5, "arguments");
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v306, v325, 16);
        if (v7)
        {
          v8 = *(_QWORD *)v307;
          do
          {
            for (i = 0; i != v7; ++i)
            {
              if (*(_QWORD *)v307 != v8)
                objc_enumerationMutation(v6);
              v305 = *(_QWORD *)(*((_QWORD *)&v306 + 1) + 8 * i);
              __p[0] = &v305;
              v10 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, &v305, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 6);
              v11 = v314;
              if (v314 >= v315)
              {
                v13 = (char *)v313;
                v14 = (v314 - (_BYTE *)v313) >> 2;
                v15 = v14 + 1;
                if ((unint64_t)(v14 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v16 = v315 - (_BYTE *)v313;
                if ((v315 - (_BYTE *)v313) >> 1 > v15)
                  v15 = v16 >> 1;
                if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
                  v17 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v17 = v15;
                if (v17)
                {
                  v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v17);
                  v13 = (char *)v313;
                  v11 = v314;
                }
                else
                {
                  v18 = 0;
                }
                v19 = &v18[4 * v14];
                *(_DWORD *)v19 = v10;
                v12 = v19 + 4;
                while (v11 != v13)
                {
                  v20 = *((_DWORD *)v11 - 1);
                  v11 -= 4;
                  *((_DWORD *)v19 - 1) = v20;
                  v19 -= 4;
                }
                v313 = v19;
                v314 = v12;
                v315 = &v18[4 * v17];
                if (v13)
                  operator delete(v13);
              }
              else
              {
                *(_DWORD *)v314 = v10;
                v12 = v11 + 4;
              }
              v314 = v12;
            }
            v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v306, v325, 16);
          }
          while (v7);
        }
        v303 = 0u;
        v304 = 0u;
        v301 = 0u;
        v302 = 0u;
        v21 = (void *)objc_msgSend(v287, "controlDependencies");
        v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v301, v324, 16);
        if (v22)
        {
          v23 = *(_QWORD *)v302;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v302 != v23)
                objc_enumerationMutation(v21);
              v305 = *(_QWORD *)(*((_QWORD *)&v301 + 1) + 8 * j);
              __p[0] = &v305;
              v25 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, &v305, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 6);
              v26 = v311;
              if (v311 >= v312)
              {
                v28 = (char *)v310;
                v29 = (v311 - (_BYTE *)v310) >> 2;
                v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v31 = v312 - (_BYTE *)v310;
                if ((v312 - (_BYTE *)v310) >> 1 > v30)
                  v30 = v31 >> 1;
                if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                  v32 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v32 = v30;
                if (v32)
                {
                  v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v312, v32);
                  v28 = (char *)v310;
                  v26 = v311;
                }
                else
                {
                  v33 = 0;
                }
                v34 = &v33[4 * v29];
                *(_DWORD *)v34 = v25;
                v27 = v34 + 4;
                while (v26 != v28)
                {
                  v35 = *((_DWORD *)v26 - 1);
                  v26 -= 4;
                  *((_DWORD *)v34 - 1) = v35;
                  v34 -= 4;
                }
                v310 = v34;
                v311 = v27;
                v312 = &v33[4 * v32];
                if (v28)
                  operator delete(v28);
              }
              else
              {
                *(_DWORD *)v311 = v25;
                v27 = v26 + 4;
              }
              v311 = v27;
            }
            v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v301, v324, 16);
          }
          while (v22);
        }
        if (v314 == v313)
          v36 = (const unsigned __int8 *)&flatbuffers::data<Mtl::FunctionStitching::NodeId,std::allocator<Mtl::FunctionStitching::NodeId>>(std::vector<Mtl::FunctionStitching::NodeId> const&)::t;
        else
          v36 = (const unsigned __int8 *)v313;
        v37 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(this, v36, (v314 - (_BYTE *)v313) >> 2);
        if (v311 == v310)
          v38 = (const unsigned __int8 *)&flatbuffers::data<Mtl::FunctionStitching::NodeId,std::allocator<Mtl::FunctionStitching::NodeId>>(std::vector<Mtl::FunctionStitching::NodeId> const&)::t;
        else
          v38 = (const unsigned __int8 *)v310;
        v39 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(this, v38, (v311 - (_BYTE *)v310) >> 2);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v287, "name"), "UTF8String"));
        if ((v300 & 0x80u) == 0)
          v40 = __p;
        else
          v40 = (void **)__p[0];
        if ((v300 & 0x80u) == 0)
          v41 = v300;
        else
          v41 = (unint64_t)__p[1];
        String = flatbuffers::FlatBufferBuilder::CreateString(this, (const char *)v40, v41);
        if ((char)v300 < 0)
          operator delete(__p[0]);
        *((_BYTE *)this + 70) = 1;
        v43 = *((_DWORD *)this + 8);
        v44 = *((_DWORD *)this + 12);
        v45 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 8, v39);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v37);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 4, String);
        v46 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v43 - (unsigned __int16)v44 + v45);
        *((_BYTE *)this + 70) = 1;
        v47 = *((_DWORD *)this + 8);
        v48 = *((_DWORD *)this + 12);
        v49 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v46);
        v50 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 2);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v50);
        v51 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v47 - (unsigned __int16)v48 + v49);
        v52 = v51;
        v53 = v317;
        if (v317 >= v318)
        {
          v93 = (char *)v316;
          v94 = (v317 - (_BYTE *)v316) >> 2;
          v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v96 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v95)
            v95 = v96 >> 1;
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL)
            v97 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v97 = v95;
          if (v97)
          {
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v97);
            v93 = (char *)v316;
            v53 = v317;
          }
          else
          {
            v98 = 0;
          }
          v130 = &v98[4 * v94];
          *(_DWORD *)v130 = v52;
          v54 = v130 + 4;
          while (v53 != v93)
          {
            v131 = *((_DWORD *)v53 - 1);
            v53 -= 4;
            *((_DWORD *)v130 - 1) = v131;
            v130 -= 4;
          }
          v316 = v130;
          v317 = v54;
          v318 = &v98[4 * v97];
          if (v93)
            operator delete(v93);
        }
        else
        {
          *(_DWORD *)v317 = v51;
          v54 = v53 + 4;
        }
        v317 = v54;
        if (v310)
        {
          v311 = (char *)v310;
          operator delete(v310);
        }
LABEL_157:
        if (v313)
        {
          v314 = (char *)v313;
          operator delete(v313);
        }
        goto LABEL_259;
      }
      if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        v313 = 0;
        v314 = 0;
        v315 = 0;
        __p[0] = (void *)objc_msgSend(v5, "condition");
        v310 = __p;
        LODWORD(v305) = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, __p, (uint64_t)&std::piecewise_construct, (_QWORD **)&v310)+ 6);
        v295 = 0u;
        v296 = 0u;
        v297 = 0u;
        v298 = 0u;
        v55 = (void *)objc_msgSend(v5, "controlDependencies");
        v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v295, v323, 16);
        if (v56)
        {
          v57 = *(_QWORD *)v296;
          do
          {
            for (k = 0; k != v56; ++k)
            {
              if (*(_QWORD *)v296 != v57)
                objc_enumerationMutation(v55);
              __p[0] = *(void **)(*((_QWORD *)&v295 + 1) + 8 * k);
              v310 = __p;
              v59 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, __p, (uint64_t)&std::piecewise_construct, (_QWORD **)&v310)+ 6);
              v60 = v314;
              if (v314 >= v315)
              {
                v62 = (char *)v313;
                v63 = (v314 - (_BYTE *)v313) >> 2;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v65 = v315 - (_BYTE *)v313;
                if ((v315 - (_BYTE *)v313) >> 1 > v64)
                  v64 = v65 >> 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                  v66 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v66 = v64;
                if (v66)
                {
                  v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v66);
                  v62 = (char *)v313;
                  v60 = v314;
                }
                else
                {
                  v67 = 0;
                }
                v68 = &v67[4 * v63];
                *(_DWORD *)v68 = v59;
                v61 = v68 + 4;
                while (v60 != v62)
                {
                  v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                v313 = v68;
                v314 = v61;
                v315 = &v67[4 * v66];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v314 = v59;
                v61 = v60 + 4;
              }
              v314 = v61;
            }
            v56 = objc_msgSend(v55, "countByEnumeratingWithState:objects:count:", &v295, v323, 16);
          }
          while (v56);
        }
        if (v314 == v313)
          v70 = (const unsigned __int8 *)&flatbuffers::data<Mtl::FunctionStitching::NodeId,std::allocator<Mtl::FunctionStitching::NodeId>>(std::vector<Mtl::FunctionStitching::NodeId> const&)::t;
        else
          v70 = (const unsigned __int8 *)v313;
        v71 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(this, v70, (v314 - (_BYTE *)v313) >> 2);
        *((_BYTE *)this + 70) = 1;
        v72 = *((_DWORD *)this + 8);
        v73 = *((_DWORD *)this + 12);
        v74 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v71);
        flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)this, 4, &v305);
        v75 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v72 - (unsigned __int16)v73 + v74);
        *((_BYTE *)this + 70) = 1;
        v76 = *((_DWORD *)this + 8);
        v77 = *((_DWORD *)this + 12);
        v78 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v75);
        v79 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 11);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v79);
        v80 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v76 - (unsigned __int16)v77 + v78);
        v81 = v80;
        v82 = v317;
        if (v317 >= v318)
        {
          v124 = (char *)v316;
          v125 = (v317 - (_BYTE *)v316) >> 2;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v127 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v126)
            v126 = v127 >> 1;
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
            v128 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v128 = v126;
          if (v128)
          {
            v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v128);
            v124 = (char *)v316;
            v82 = v317;
          }
          else
          {
            v129 = 0;
          }
          v147 = &v129[4 * v125];
          *(_DWORD *)v147 = v81;
          v83 = v147 + 4;
          while (v82 != v124)
          {
            v148 = *((_DWORD *)v82 - 1);
            v82 -= 4;
            *((_DWORD *)v147 - 1) = v148;
            v147 -= 4;
          }
          v316 = v147;
          v317 = v83;
          v318 = &v129[4 * v128];
          if (v124)
            operator delete(v124);
        }
        else
        {
          *(_DWORD *)v317 = v80;
          v83 = v82 + 4;
        }
        v317 = v83;
        goto LABEL_157;
      }
      if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        v84 = objc_msgSend(v5, "argumentIndex");
        *((_BYTE *)this + 70) = 1;
        v85 = *((_QWORD *)this + 5);
        v86 = *((_QWORD *)this + 6);
        v87 = *((_QWORD *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v84, 0);
        v88 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v87 - (unsigned __int16)v86 + (unsigned __int16)v85);
        *((_BYTE *)this + 70) = 1;
        LODWORD(v85) = *((_DWORD *)this + 8);
        LODWORD(v86) = *((_DWORD *)this + 12);
        LODWORD(v87) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v88);
        v89 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v89);
        v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v85 - (unsigned __int16)v86 + (unsigned __int16)v87);
        v91 = v317;
        if (v317 >= v318)
        {
          v118 = (char *)v316;
          v144 = (v317 - (_BYTE *)v316) >> 2;
          v145 = v144 + 1;
          if ((unint64_t)(v144 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v146 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v145)
            v145 = v146 >> 1;
          if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v145;
          if (v122)
          {
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            v118 = (char *)v316;
            v91 = v317;
          }
          else
          {
            v123 = 0;
          }
          v162 = &v123[4 * v144];
          *(_DWORD *)v162 = v90;
          v92 = v162 + 4;
          while (v91 != v118)
          {
            v163 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v163;
            v162 -= 4;
          }
LABEL_256:
          v316 = v162;
          v317 = v92;
          v318 = &v123[4 * v122];
          if (v118)
            operator delete(v118);
          goto LABEL_258;
        }
      }
      else if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        v99 = objc_msgSend(v5, "bindIndex");
        *((_BYTE *)this + 70) = 1;
        v100 = *((_DWORD *)this + 8);
        v101 = *((_DWORD *)this + 12);
        v102 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v99, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, 0, 0);
        v103 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v100 - (unsigned __int16)v101 + v102);
        v104 = objc_msgSend(v5, "byteOffset");
        *((_BYTE *)this + 70) = 1;
        v105 = *((_DWORD *)this + 8);
        v106 = *((_DWORD *)this + 12);
        v107 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)this, 6, v104, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 4, v103);
        v108 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v105 - (unsigned __int16)v106 + v107);
        v109 = objc_msgSend(v5, "dereference");
        *((_BYTE *)this + 70) = 1;
        v110 = *((_QWORD *)this + 5);
        v111 = *((_QWORD *)this + 6);
        v112 = *((_QWORD *)this + 4);
        if (v109)
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 4, v108);
          v113 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v112 - (unsigned __int16)v111 + (unsigned __int16)v110);
          *((_BYTE *)this + 70) = 1;
          v114 = *((_DWORD *)this + 8);
          v115 = *((_DWORD *)this + 12);
          v116 = *((_DWORD *)this + 10);
          flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v113);
          v117 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 5);
          flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v117);
          v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v114 - (unsigned __int16)v115 + v116);
          v91 = v317;
          if (v317 >= v318)
          {
            v118 = (char *)v316;
            v119 = (v317 - (_BYTE *)v316) >> 2;
            v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 62)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v121 = v318 - (_BYTE *)v316;
            if ((v318 - (_BYTE *)v316) >> 1 > v120)
              v120 = v121 >> 1;
            if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
              v122 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v122 = v120;
            if (v122)
            {
              v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
              v118 = (char *)v316;
              v91 = v317;
            }
            else
            {
              v123 = 0;
            }
            v162 = &v123[4 * v119];
            *(_DWORD *)v162 = v90;
            v92 = v162 + 4;
            while (v91 != v118)
            {
              v184 = *((_DWORD *)v91 - 1);
              v91 -= 4;
              *((_DWORD *)v162 - 1) = v184;
              v162 -= 4;
            }
            goto LABEL_256;
          }
        }
        else
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v108);
          v158 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 4);
          flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v158);
          v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v112 - (unsigned __int16)v111 + (unsigned __int16)v110);
          v91 = v317;
          if (v317 >= v318)
          {
            v118 = (char *)v316;
            v159 = (v317 - (_BYTE *)v316) >> 2;
            v160 = v159 + 1;
            if ((unint64_t)(v159 + 1) >> 62)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v161 = v318 - (_BYTE *)v316;
            if ((v318 - (_BYTE *)v316) >> 1 > v160)
              v160 = v161 >> 1;
            if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
              v122 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v122 = v160;
            if (v122)
            {
              v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
              v118 = (char *)v316;
              v91 = v317;
            }
            else
            {
              v123 = 0;
            }
            v162 = &v123[4 * v159];
            *(_DWORD *)v162 = v90;
            v92 = v162 + 4;
            while (v91 != v118)
            {
              v183 = *((_DWORD *)v91 - 1);
              v91 -= 4;
              *((_DWORD *)v162 - 1) = v183;
              v162 -= 4;
            }
            goto LABEL_256;
          }
        }
      }
      else if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        v132 = objc_msgSend(v5, "bindIndex");
        *((_BYTE *)this + 70) = 1;
        v133 = *((_DWORD *)this + 8);
        v134 = *((_DWORD *)this + 12);
        v135 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 6, v132, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, 0, 0);
        v136 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v133 - (unsigned __int16)v134 + v135);
        *((_BYTE *)this + 70) = 1;
        v137 = *((_DWORD *)this + 8);
        v138 = *((_DWORD *)this + 12);
        v139 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v136);
        v140 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 3);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v140);
        v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v137 - (unsigned __int16)v138 + v139);
        v91 = v317;
        if (v317 >= v318)
        {
          v118 = (char *)v316;
          v141 = (v317 - (_BYTE *)v316) >> 2;
          v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v143 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v142)
            v142 = v143 >> 1;
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v142;
          if (v122)
          {
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            v118 = (char *)v316;
            v91 = v317;
          }
          else
          {
            v123 = 0;
          }
          v162 = &v123[4 * v141];
          *(_DWORD *)v162 = v90;
          v92 = v162 + 4;
          while (v91 != v118)
          {
            v182 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v182;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        v149 = objc_msgSend(v5, "bindIndex");
        *((_BYTE *)this + 70) = 1;
        v150 = *((_QWORD *)this + 5);
        v151 = *((_QWORD *)this + 6);
        v152 = *((_QWORD *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v149, 0);
        v153 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v152 - (unsigned __int16)v151 + (unsigned __int16)v150);
        *((_BYTE *)this + 70) = 1;
        LODWORD(v150) = *((_DWORD *)this + 8);
        LODWORD(v151) = *((_DWORD *)this + 12);
        LODWORD(v152) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v153);
        v154 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 6);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v154);
        v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v150 - (unsigned __int16)v151 + (unsigned __int16)v152);
        v91 = v317;
        if (v317 >= v318)
        {
          v118 = (char *)v316;
          v155 = (v317 - (_BYTE *)v316) >> 2;
          v156 = v155 + 1;
          if ((unint64_t)(v155 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v157 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v156)
            v156 = v157 >> 1;
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v156;
          if (v122)
          {
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            v118 = (char *)v316;
            v91 = v317;
          }
          else
          {
            v123 = 0;
          }
          v162 = &v123[4 * v155];
          *(_DWORD *)v162 = v90;
          v92 = v162 + 4;
          while (v91 != v118)
          {
            v193 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v193;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        v164 = objc_msgSend(v5, "bindIndex");
        *((_BYTE *)this + 70) = 1;
        v165 = *((_QWORD *)this + 5);
        v166 = *((_QWORD *)this + 6);
        v167 = *((_QWORD *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v164, 0);
        v168 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v167 - (unsigned __int16)v166 + (unsigned __int16)v165);
        *((_BYTE *)this + 70) = 1;
        LODWORD(v165) = *((_DWORD *)this + 8);
        LODWORD(v166) = *((_DWORD *)this + 12);
        LODWORD(v167) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v168);
        v169 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 7);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v169);
        v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v165 - (unsigned __int16)v166 + (unsigned __int16)v167);
        v91 = v317;
        if (v317 >= v318)
        {
          v118 = (char *)v316;
          v170 = (v317 - (_BYTE *)v316) >> 2;
          v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v172 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v171)
            v171 = v172 >> 1;
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v171;
          if (v122)
          {
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            v118 = (char *)v316;
            v91 = v317;
          }
          else
          {
            v123 = 0;
          }
          v162 = &v123[4 * v170];
          *(_DWORD *)v162 = v90;
          v92 = v162 + 4;
          while (v91 != v118)
          {
            v206 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v206;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        v173 = objc_msgSend(v5, "bindIndex");
        *((_BYTE *)this + 70) = 1;
        v174 = *((_QWORD *)this + 5);
        v175 = *((_QWORD *)this + 6);
        v176 = *((_QWORD *)this + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this, 4, v173, 0);
        v177 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v176 - (unsigned __int16)v175 + (unsigned __int16)v174);
        *((_BYTE *)this + 70) = 1;
        LODWORD(v174) = *((_DWORD *)this + 8);
        LODWORD(v175) = *((_DWORD *)this + 12);
        LODWORD(v176) = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v177);
        v178 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 8);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v178);
        v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v174 - (unsigned __int16)v175 + (unsigned __int16)v176);
        v91 = v317;
        if (v317 >= v318)
        {
          v118 = (char *)v316;
          v179 = (v317 - (_BYTE *)v316) >> 2;
          v180 = v179 + 1;
          if ((unint64_t)(v179 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v181 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v180)
            v180 = v181 >> 1;
          if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v180;
          if (v122)
          {
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            v118 = (char *)v316;
            v91 = v317;
          }
          else
          {
            v123 = 0;
          }
          v162 = &v123[4 * v179];
          *(_DWORD *)v162 = v90;
          v92 = v162 + 4;
          while (v91 != v118)
          {
            v208 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v208;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
      {
        *((_BYTE *)this + 70) = 1;
        v185 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_DWORD *)this + 10));
        *((_BYTE *)this + 70) = 1;
        v186 = *((_DWORD *)this + 8);
        v187 = *((_DWORD *)this + 12);
        v188 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v185);
        v189 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 9);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v189);
        v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v186 - (unsigned __int16)v187 + v188);
        v91 = v317;
        if (v317 >= v318)
        {
          v118 = (char *)v316;
          v190 = (v317 - (_BYTE *)v316) >> 2;
          v191 = v190 + 1;
          if ((unint64_t)(v190 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v192 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v191)
            v191 = v192 >> 1;
          if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v191;
          if (v122)
          {
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            v118 = (char *)v316;
            v91 = v317;
          }
          else
          {
            v123 = 0;
          }
          v162 = &v123[4 * v190];
          *(_DWORD *)v162 = v90;
          v92 = v162 + 4;
          while (v91 != v118)
          {
            v209 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v209;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      else
      {
        if (!objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
        {
          if (objc_msgSend(v5, "isMemberOfClass:", objc_opt_class()))
          {
            BuiltinNode = Mtl::FunctionStitching::CreateBuiltinNode((uint64_t)this, 0);
            LODWORD(v313) = Mtl::FunctionStitching::CreateNode((uint64_t)this, 10, BuiltinNode);
            std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100]((uint64_t)&v316, &v313);
          }
          goto LABEL_259;
        }
        *((_BYTE *)this + 70) = 1;
        v194 = *((_DWORD *)this + 8);
        v195 = *((_DWORD *)this + 12);
        v196 = *((_DWORD *)this + 10);
        v197 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v197);
        v198 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v194 - (unsigned __int16)v195 + v196);
        *((_BYTE *)this + 70) = 1;
        v199 = *((_DWORD *)this + 8);
        v200 = *((_DWORD *)this + 12);
        v201 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v198);
        v202 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)this, 10);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v202);
        v90 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v199 - (unsigned __int16)v200 + v201);
        v91 = v317;
        if (v317 >= v318)
        {
          v118 = (char *)v316;
          v203 = (v317 - (_BYTE *)v316) >> 2;
          v204 = v203 + 1;
          if ((unint64_t)(v203 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v205 = v318 - (_BYTE *)v316;
          if ((v318 - (_BYTE *)v316) >> 1 > v204)
            v204 = v205 >> 1;
          if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL)
            v122 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v122 = v204;
          if (v122)
          {
            v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v318, v122);
            v118 = (char *)v316;
            v91 = v317;
          }
          else
          {
            v123 = 0;
          }
          v162 = &v123[4 * v203];
          *(_DWORD *)v162 = v90;
          v92 = v162 + 4;
          while (v91 != v118)
          {
            v210 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v162 - 1) = v210;
            v162 -= 4;
          }
          goto LABEL_256;
        }
      }
      *(_DWORD *)v91 = v90;
      v92 = v91 + 4;
LABEL_258:
      v317 = v92;
LABEL_259:
      v4 = v288 + 1;
    }
    while (v288 + 1 != v286);
  }
  v211 = a2;
  v212 = -[NSString UTF8String](-[MTLFunctionStitchingGraph functionName](a2, "functionName"), "UTF8String");
  v213 = strlen(v212);
  v214 = flatbuffers::FlatBufferBuilder::CreateString(this, v212, v213);
  v313 = 0;
  v314 = 0;
  v315 = 0;
  v291 = 0u;
  v292 = 0u;
  v293 = 0u;
  v294 = 0u;
  v215 = -[MTLFunctionStitchingGraph attributes](a2, "attributes");
  v216 = -[NSArray countByEnumeratingWithState:objects:count:](v215, "countByEnumeratingWithState:objects:count:", &v291, v322, 16);
  if (!v216)
  {
LABEL_305:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      *((_BYTE *)this + 70) = 1;
      v254 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_DWORD *)this + 10));
      *((_BYTE *)this + 70) = 1;
      v255 = *((_DWORD *)this + 8);
      v256 = *((_DWORD *)this + 12);
      v257 = *((_DWORD *)this + 10);
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v254);
      v258 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
      flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v258);
      v259 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v255 - (unsigned __int16)v256 + v257);
      v260 = v259;
      v261 = v314;
      if (v314 >= v315)
      {
        v263 = (char *)v313;
        v264 = (v314 - (_BYTE *)v313) >> 2;
        v265 = v264 + 1;
        if ((unint64_t)(v264 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v266 = v315 - (_BYTE *)v313;
        if ((v315 - (_BYTE *)v313) >> 1 > v265)
          v265 = v266 >> 1;
        if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL)
          v267 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v267 = v265;
        if (v267)
        {
          v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v267);
          v263 = (char *)v313;
          v261 = v314;
        }
        else
        {
          v268 = 0;
        }
        v269 = &v268[4 * v264];
        v270 = &v268[4 * v267];
        *(_DWORD *)v269 = v260;
        v262 = v269 + 4;
        while (v261 != v263)
        {
          v271 = *((_DWORD *)v261 - 1);
          v261 -= 4;
          *((_DWORD *)v269 - 1) = v271;
          v269 -= 4;
        }
        v313 = v269;
        v314 = v262;
        v315 = v270;
        if (v263)
          operator delete(v263);
      }
      else
      {
        *(_DWORD *)v314 = v259;
        v262 = v261 + 4;
      }
      v314 = v262;
    }
    goto LABEL_323;
  }
  v289 = v214;
  v290 = 0;
  v217 = *(_QWORD *)v292;
  do
  {
    for (m = 0; m != v216; ++m)
    {
      if (*(_QWORD *)v292 != v217)
        objc_enumerationMutation(v215);
      v219 = *(void **)(*((_QWORD *)&v291 + 1) + 8 * m);
      if (objc_msgSend(v219, "isMemberOfClass:", objc_opt_class()))
      {
        *((_BYTE *)this + 70) = 1;
        v220 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_WORD *)this + 20));
        *((_BYTE *)this + 70) = 1;
        v221 = *((_DWORD *)this + 8);
        v222 = *((_DWORD *)this + 12);
        v223 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v220);
        v224 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v224);
        v225 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v221 - (unsigned __int16)v222 + v223);
        v226 = v225;
        v227 = v314;
        if (v314 >= v315)
        {
          v238 = (char *)v313;
          v239 = (v314 - (_BYTE *)v313) >> 2;
          v240 = v239 + 1;
          if ((unint64_t)(v239 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v241 = v315 - (_BYTE *)v313;
          if ((v315 - (_BYTE *)v313) >> 1 > v240)
            v240 = v241 >> 1;
          if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL)
            v242 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v242 = v240;
          if (v242)
          {
            v243 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v242);
            v238 = (char *)v313;
            v227 = v314;
          }
          else
          {
            v243 = 0;
          }
          v250 = &v243[4 * v239];
          *(_DWORD *)v250 = v226;
          v237 = v250 + 4;
          while (v227 != v238)
          {
            v251 = *((_DWORD *)v227 - 1);
            v227 -= 4;
            *((_DWORD *)v250 - 1) = v251;
            v250 -= 4;
          }
          v313 = v250;
          v314 = v237;
          v315 = &v243[4 * v242];
          if (v238)
            operator delete(v238);
          goto LABEL_301;
        }
        *(_DWORD *)v314 = v225;
        v228 = v227 + 4;
      }
      else
      {
        if (!objc_msgSend(v219, "isMemberOfClass:", objc_opt_class()))
          continue;
        *((_BYTE *)this + 70) = 1;
        v229 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_WORD *)this + 20));
        *((_BYTE *)this + 70) = 1;
        v230 = *((_DWORD *)this + 8);
        v231 = *((_DWORD *)this + 12);
        v232 = *((_DWORD *)this + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v229);
        v233 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v233);
        v234 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v230 - (unsigned __int16)v231 + v232);
        v235 = v234;
        v236 = v314;
        if (v314 >= v315)
        {
          v244 = (char *)v313;
          v245 = (v314 - (_BYTE *)v313) >> 2;
          v246 = v245 + 1;
          if ((unint64_t)(v245 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v247 = v315 - (_BYTE *)v313;
          if ((v315 - (_BYTE *)v313) >> 1 > v246)
            v246 = v247 >> 1;
          if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL)
            v248 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v248 = v246;
          if (v248)
          {
            v249 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v315, v248);
            v244 = (char *)v313;
            v236 = v314;
          }
          else
          {
            v249 = 0;
          }
          v252 = &v249[4 * v245];
          *(_DWORD *)v252 = v235;
          v237 = v252 + 4;
          while (v236 != v244)
          {
            v253 = *((_DWORD *)v236 - 1);
            v236 -= 4;
            *((_DWORD *)v252 - 1) = v253;
            v252 -= 4;
          }
          v313 = v252;
          v314 = v237;
          v315 = &v249[4 * v248];
          if (v244)
            operator delete(v244);
          v290 = 1;
          goto LABEL_301;
        }
        *(_DWORD *)v314 = v234;
        v228 = v236 + 4;
        v290 = 1;
      }
      v237 = v228;
LABEL_301:
      v314 = v237;
    }
    v216 = -[NSArray countByEnumeratingWithState:objects:count:](v215, "countByEnumeratingWithState:objects:count:", &v291, v322, 16);
  }
  while (v216);
  v211 = a2;
  v214 = v289;
  if ((v290 & 1) == 0)
    goto LABEL_305;
LABEL_323:
  if (v314 == v313)
    v272 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>> const&)::t;
  else
    v272 = v313;
  v273 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v272, (v314 - (_BYTE *)v313) >> 2);
  if (v317 == v316)
    v274 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>> const&)::t;
  else
    v274 = v316;
  v275 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)v274, (v317 - (_BYTE *)v316) >> 2);
  if (-[MTLFunctionStitchingGraph outputNode](v211, "outputNode"))
  {
    __p[0] = -[MTLFunctionStitchingGraph outputNode](v211, "outputNode");
    v310 = __p;
    v276 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v321, __p, (uint64_t)&std::piecewise_construct, (_QWORD **)&v310)+ 6);
  }
  else
  {
    v276 = 0;
  }
  LODWORD(v305) = v276;
  v277 = -[MTLFunctionStitchingGraph outputNode](v211, "outputNode");
  v278 = v273;
  *((_BYTE *)this + 70) = 1;
  v279 = *((_DWORD *)this + 8);
  v280 = *((_DWORD *)this + 12);
  v281 = *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 10, v278);
  if (v277)
    v282 = &v305;
  else
    v282 = 0;
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)this, 8, v282);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v275);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 4, v214);
  v283 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v279 - (unsigned __int16)v280 + v281);
  if (v313)
  {
    v314 = (char *)v313;
    operator delete(v313);
  }
  if (v316)
  {
    v317 = (char *)v316;
    operator delete(v316);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v321);
  if (v319)
  {
    v320 = (id *)v319;
    operator delete(v319);
  }
  return v283;
}

void sub_182709F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  char a64;

  if (__p)
    operator delete(__p);
  std::pair<std::vector<objc_object  {objcproto24MTLFunctionStitchingNode}*>,std::unordered_map<objc_object  {objcproto24MTLFunctionStitchingNode},unsigned int,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,objc_object  {objcproto24MTLFunctionStitchingNode}*<std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>>>::~pair((uint64_t)&a64);
  _Unwind_Resume(a1);
}

uint64_t MTLMetalScriptSerializer::buildComputePipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *p_p;
  int String;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  std::string::size_type v39;
  std::string::size_type v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  std::string::size_type v64;
  std::string::size_type v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  void *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  void *v79;
  int LinkedFunctions;
  _QWORD *v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  unsigned int v87;
  MTLMetalScriptSerializer *v88;
  unsigned int v89;
  std::string *v90;
  std::string::size_type v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  uint64_t v98;
  int v99;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::string __p;
  _BYTE v107[24];
  _BYTE *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v105 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v5 = a2;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(&__p, v4, &v105);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
      String = 0;
LABEL_11:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_12;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      String = 0;
      goto LABEL_12;
    }
    p_p = &__p;
  }
  String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
LABEL_12:
  v9 = *(_QWORD *)(v5 + 24);
  if (!v9)
  {
LABEL_70:
    LOBYTE(v24) = 0;
    v52 = 0;
    goto LABEL_100;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(_QWORD **)(*(_QWORD *)(v9 + 8) + 8 + v10);
    if (!v13)
    {
      ++v12;
LABEL_24:
      v16 = v11;
      goto LABEL_25;
    }
    if (v13[1])
      v14 = 0;
    else
      v14 = v13[3] == 1;
    v15 = v14 && v13[2] == 1;
    v16 = ++v12;
    if (v15)
      goto LABEL_24;
LABEL_25:
    v10 += 8;
    v11 = v16;
  }
  while (v10 != 248);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  do
  {
    v20 = *(_QWORD **)(*(_QWORD *)(v9 + 16) + 8 + v17);
    if (v20)
    {
      v21 = ++v18;
      if (v20[2] | v20[1] | v20[3])
        goto LABEL_32;
    }
    else
    {
      ++v18;
    }
    v21 = v19;
LABEL_32:
    v17 += 8;
    v19 = v21;
  }
  while (v17 != 248);
  if (!*(_QWORD *)(v9 + 32))
  {
    v22 = !*(_QWORD *)(v9 + 24) && v16 == 0;
    if (v22 && v21 == 0)
      goto LABEL_70;
  }
  v104 = *(_QWORD *)(v5 + 24);
  v99 = String;
  if (!v16)
  {
    LOBYTE(v24) = 0;
    v51 = 0;
    if (!v21)
      goto LABEL_99;
    goto LABEL_72;
  }
  v98 = v5;
  memset(&__p, 0, sizeof(__p));
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve((void **)&__p.__r_.__value_.__l.__data_, v16);
  v24 = 0;
  v25 = 0;
  v102 = v16;
  v103 = v21;
  do
  {
    v26 = a1;
    v27 = *(_QWORD **)(*(_QWORD *)(v9 + 8) + 8 + 8 * v25);
    v28 = v24;
    if (v27)
    {
      v29 = v27[2];
      v30 = v27[3];
      v31 = v27[1];
    }
    else
    {
      v31 = 0;
      v30 = 1;
      LOBYTE(v29) = 1;
    }
    v32 = (v31 & 3) != 0;
    *(_BYTE *)(a1 + 70) = 1;
    v33 = *(_DWORD *)(a1 + 32);
    v34 = *(_DWORD *)(a1 + 48);
    v35 = *(_DWORD *)(v26 + 40);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)v26, 4, v29, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v26, 6, v30, 1);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)v26, 8, v31, 0);
    v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v26, (unsigned __int16)v33 - (unsigned __int16)v34 + v35);
    v37 = v28;
    v21 = v103;
    v9 = v104;
    v38 = v36;
    v39 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      v41 = (void *)__p.__r_.__value_.__r.__words[0];
      v42 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v44 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
      if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v43)
        v43 = v44 >> 1;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
        v45 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      if (v45)
      {
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v45);
        v39 = __p.__r_.__value_.__l.__size_;
        v41 = (void *)__p.__r_.__value_.__r.__words[0];
        a1 = v26;
      }
      else
      {
        a1 = v26;
        v46 = 0;
      }
      v47 = &v46[4 * v42];
      *(_DWORD *)v47 = v38;
      v40 = (std::string::size_type)(v47 + 4);
      while ((void *)v39 != v41)
      {
        v48 = *(_DWORD *)(v39 - 4);
        v39 -= 4;
        *((_DWORD *)v47 - 1) = v48;
        v47 -= 4;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
      __p.__r_.__value_.__l.__size_ = v40;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v46[4 * v45];
      if (v41)
        operator delete(v41);
    }
    else
    {
      *(_DWORD *)__p.__r_.__value_.__l.__size_ = v36;
      v40 = v39 + 4;
      a1 = v26;
    }
    v24 = v37 | v32;
    __p.__r_.__value_.__l.__size_ = v40;
    ++v25;
  }
  while (v25 != v102);
  if (v40 == __p.__r_.__value_.__r.__words[0])
    v49 = &flatbuffers::data<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>> const&)::t;
  else
    v49 = (void *)__p.__r_.__value_.__r.__words[0];
  v50 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v49, (uint64_t)(v40 - __p.__r_.__value_.__r.__words[0]) >> 2);
  v5 = v98;
  String = v99;
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v51 = v50;
  if (v103)
  {
LABEL_72:
    v98 = v51;
    v101 = v24;
    memset(&__p, 0, sizeof(__p));
    std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve((void **)&__p.__r_.__value_.__l.__data_, v21);
    v53 = v5;
    v54 = 0;
    v9 = v104;
    do
    {
      v55 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 + 8 * v54);
      if (v55)
      {
        v56 = *(_QWORD *)(v55 + 8);
        v57 = *(_QWORD *)(v55 + 16);
        v58 = *(_DWORD *)(v55 + 24);
      }
      else
      {
        v57 = 0;
        LOBYTE(v56) = 0;
        v58 = 0;
      }
      *(_BYTE *)(a1 + 70) = 1;
      v59 = *(_DWORD *)(a1 + 32);
      v60 = *(_DWORD *)(a1 + 48);
      v61 = *(_DWORD *)(a1 + 40);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v56, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v57, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v58, 0);
      v62 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v59 - (unsigned __int16)v60 + v61);
      v63 = v62;
      v9 = v104;
      v64 = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        v66 = (void *)__p.__r_.__value_.__r.__words[0];
        v67 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v69 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
        if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v68)
          v68 = v69 >> 1;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
          v70 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v70);
          v64 = __p.__r_.__value_.__l.__size_;
          v66 = (void *)__p.__r_.__value_.__r.__words[0];
        }
        else
        {
          v71 = 0;
        }
        v72 = &v71[4 * v67];
        *(_DWORD *)v72 = v63;
        v65 = (std::string::size_type)(v72 + 4);
        while ((void *)v64 != v66)
        {
          v73 = *(_DWORD *)(v64 - 4);
          v64 -= 4;
          *((_DWORD *)v72 - 1) = v73;
          v72 -= 4;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
        __p.__r_.__value_.__l.__size_ = v65;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v71[4 * v70];
        if (v66)
          operator delete(v66);
      }
      else
      {
        *(_DWORD *)__p.__r_.__value_.__l.__size_ = v62;
        v65 = v64 + 4;
      }
      __p.__r_.__value_.__l.__size_ = v65;
      ++v54;
    }
    while (v54 != v21);
    if (v65 == __p.__r_.__value_.__r.__words[0])
      v74 = &flatbuffers::data<flatbuffers::Offset<Mtl::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>> const&)::t;
    else
      v74 = (void *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v21) = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v74, (uint64_t)(v65 - __p.__r_.__value_.__r.__words[0]) >> 2);
    v5 = v53;
    String = v99;
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    LOBYTE(v24) = v101;
    LODWORD(v51) = v98;
  }
LABEL_99:
  *(_BYTE *)(a1 + 70) = 1;
  v75 = *(_DWORD *)(a1 + 32);
  v76 = *(_DWORD *)(a1 + 48);
  v77 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v51);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v21);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, *(unsigned __int8 *)(v9 + 32), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, *(_DWORD *)(v9 + 24), 0);
  v52 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v75 - (unsigned __int16)v76 + v77);
LABEL_100:
  v78 = addPipelineBufferDescriptor((flatbuffers::FlatBufferBuilder *)a1, *(MTLPipelineBufferDescriptorArray **)(v5 + 48));
  v79 = *(void **)(v5 + 152);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v107, a3);
  LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions(a1, v79, (uint64_t)v107);
  v81 = v108;
  if (v108 == v107)
  {
    v82 = 4;
    v81 = v107;
LABEL_104:
    (*(void (**)(void))(*v81 + 8 * v82))();
  }
  else if (v108)
  {
    v82 = 5;
    goto LABEL_104;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v5 + 152), "binaryFunctions", v98), "count"))
    v83 = 536870918;
  else
    v83 = 0;
  if (objc_msgSend((id)objc_msgSend(*(id *)(v5 + 152), "privateFunctions"), "count"))
  {
    v84 = v83 & 0x20000000 | 1;
    if ((v83 & 6) != 0)
      v84 = v83;
    v83 = v84 | 0x80000000;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(v5 + 152), "functions"), "count")
    || objc_msgSend((id)objc_msgSend(*(id *)(v5 + 152), "groups"), "count"))
  {
    if ((v83 & 0x1FFFFFFE) >= 6)
      v85 = v83;
    else
      v85 = v83 & 0x60000000 | 6;
    v83 = v85 | 0x80000000;
  }
  if ((v83 & 0x1FFFFFFF) >= 5)
    v86 = v83;
  else
    v86 = v83 & 0x60000000 | 5;
  v87 = v86 | 0x80000000;
  if ((_BYTE)v24)
    v88 = (MTLMetalScriptSerializer *)v87;
  else
    v88 = (MTLMetalScriptSerializer *)v83;
  if (*(_BYTE *)(v5 + 80))
  {
    if ((v88 & 0x1FFFFFFF) >= 3)
      v89 = v88;
    else
      v89 = v88 & 0xC0000000 | 3;
    v88 = (MTLMetalScriptSerializer *)(v89 | 0x20000000);
LABEL_130:
    MTLMetalScriptSerializer::generateEnableString(v88, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v90 = &__p;
    else
      v90 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v91 = __p.__r_.__value_.__l.__size_;
    v92 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)v90, v91);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v93 = v92;
  }
  else
  {
    if ((_DWORD)v88)
      goto LABEL_130;
    v93 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v94 = *(_DWORD *)(a1 + 32);
  v95 = *(_DWORD *)(a1 + 48);
  v96 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v93);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 14, v52);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 16, v78);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, *(unsigned __int8 *)(v5 + 16), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, *(unsigned __int16 *)(v5 + 18), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 26, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, *(_QWORD *)(v5 + 160), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, *(unsigned __int8 *)(v5 + 80), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, *(unsigned __int8 *)(v5 + 168), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, *(unsigned __int8 *)(v5 + 104), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, *(unsigned __int8 *)(v5 + 136), 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v94 - (unsigned __int16)v95 + v96);
}

void sub_18270AA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t addPipelineBufferDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLPipelineBufferDescriptorArray *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  Class isa;
  unint64_t v8;
  uint64_t i;
  Class v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  void *v27;
  uint64_t v28;
  void *__p;
  char *v31;
  char *v32;

  if (!a2)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    isa = a2[v4 + 1].super.isa;
    if (isa)
    {
      v8 = ++v6;
      if ((*((_BYTE *)isa + 8) & 3) != 0)
        goto LABEL_8;
    }
    else
    {
      ++v6;
    }
    v8 = v5;
LABEL_8:
    ++v4;
    v5 = v8;
  }
  while (v4 != 31);
  if (!v8)
    return 0;
  __p = 0;
  v31 = 0;
  v32 = 0;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::reserve(&__p, v8);
  for (i = 0; i != v8; ++i)
  {
    v10 = a2[i + 1].super.isa;
    if (v10)
      v11 = (uint64_t *)((char *)v10 + 8);
    else
      v11 = &_MTLDefaultPipelineBufferPrivate;
    *((_BYTE *)a1 + 70) = 1;
    v12 = *((_QWORD *)a1 + 5);
    v13 = *((_QWORD *)a1 + 6);
    v14 = *((_QWORD *)a1 + 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, *(_BYTE *)v11 & 3, 0);
    v15 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
    v16 = v15;
    v17 = v31;
    if (v31 >= v32)
    {
      v19 = (char *)__p;
      v20 = (v31 - (_BYTE *)__p) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v22 = v32 - (_BYTE *)__p;
      if ((v32 - (_BYTE *)__p) >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v32, v23);
        v19 = (char *)__p;
        v17 = v31;
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      *(_DWORD *)v25 = v16;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v26 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      __p = v25;
      v31 = v18;
      v32 = &v24[4 * v23];
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v31 = v15;
      v18 = v17 + 4;
    }
    v31 = v18;
  }
  if (v18 == __p)
    v27 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v27 = __p;
  v28 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v27, (v18 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v31 = (char *)__p;
    operator delete(__p);
  }
  return v28;
}

void sub_18270AD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::createLinkedFunctions(uint64_t a1, void *a2, uint64_t a3)
{
  void *v6;
  int FunctionArray;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  const char *v22;
  size_t v23;
  int String;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  _BYTE *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  const MTLLinkedFunctions *v40;
  int v41;
  uint64_t result;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  char *v54;
  char *v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  __n128 (*v63)(__n128 *, __n128 *);
  void (*v64)(uint64_t);
  void *v65;
  void *__p;
  void *v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend((id)objc_msgSend(a2, "functions"), "count"))
  {
    v6 = (void *)objc_msgSend(a2, "functions");
    std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v58, a3);
    FunctionArray = MTLMetalScriptSerializer::createFunctionArray((flatbuffers::FlatBufferBuilder *)a1, v6, (uint64_t)v58);
    v8 = v59;
    if (v59 == v58)
    {
      v9 = 4;
      v8 = v58;
    }
    else
    {
      if (!v59)
        goto LABEL_8;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  else
  {
    FunctionArray = 0;
  }
LABEL_8:
  if (objc_msgSend((id)objc_msgSend(a2, "privateFunctions"), "count"))
  {
    v10 = (void *)objc_msgSend(a2, "privateFunctions");
    std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v56, a3);
    v11 = MTLMetalScriptSerializer::createFunctionArray((flatbuffers::FlatBufferBuilder *)a1, v10, (uint64_t)v56);
    v12 = v57;
    if (v57 == v56)
    {
      v13 = 4;
      v12 = v56;
    }
    else
    {
      if (!v57)
        goto LABEL_15;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  else
  {
    v11 = 0;
  }
LABEL_15:
  if (objc_msgSend((id)objc_msgSend(a2, "groups"), "count"))
  {
    v14 = (void *)objc_msgSend(a2, "groups");
    v60 = 0;
    v61 = &v60;
    v62 = 0x4812000000;
    v63 = __Block_byref_object_copy__30;
    v64 = __Block_byref_object_dispose__31;
    v65 = &unk_182827312;
    __p = 0;
    v67 = 0;
    v68 = 0;
    *(_QWORD *)&v49 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v49 + 1) = 3221225472;
    *(_QWORD *)&v50 = ___ZN24MTLMetalScriptSerializerL12createGroupsERN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke;
    *((_QWORD *)&v50 + 1) = &unk_1E0FE3198;
    *(_QWORD *)&v51 = &v60;
    *((_QWORD *)&v51 + 1) = a1;
    objc_msgSend(v14, "enumerateKeysAndObjectsUsingBlock:", &v49);
    v15 = v61[7] - v61[6];
    if (v15)
      v16 = (void *)v61[6];
    else
      v16 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionGroup>,std::allocator<flatbuffers::Offset<Mtl::FunctionGroup>>>(std::vector<flatbuffers::Offset<Mtl::FunctionGroup>> const&)::t;
    v17 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v16, v15 >> 2);
    _Block_object_dispose(&v60, 8);
    if (__p)
    {
      v67 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = (void *)objc_msgSend(a2, "binaryFunctions");
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v49, &v60, 16);
  if (v19)
  {
    v46 = v17;
    v47 = v11;
    v48 = FunctionArray;
    v20 = *(_QWORD *)v50;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v50 != v20)
          objc_enumerationMutation(v18);
        v22 = (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v49 + 1) + 8 * i), "name"), "UTF8String");
        v23 = strlen(v22);
        String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, v22, v23);
        v25 = String;
        v26 = v54;
        if (v54 >= v55)
        {
          v28 = (char *)v53;
          v29 = (v54 - (_BYTE *)v53) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v31 = v55 - (_BYTE *)v53;
          if ((v55 - (_BYTE *)v53) >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v55, v32);
            v28 = (char *)v53;
            v26 = v54;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[4 * v29];
          *(_DWORD *)v34 = v25;
          v27 = v34 + 4;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          v53 = v34;
          v54 = v27;
          v55 = &v33[4 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)v54 = String;
          v27 = v26 + 4;
        }
        v54 = v27;
      }
      v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v49, &v60, 16);
    }
    while (v19);
    v36 = v53;
    v37 = v54;
    v11 = v47;
    FunctionArray = v48;
    v17 = v46;
  }
  else
  {
    v37 = 0;
    v36 = 0;
  }
  v38 = v37 - v36;
  if (v38)
    v39 = v36;
  else
    v39 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  v41 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)a1, (uint64_t)v39, v38 >> 2);
  if (v53)
  {
    v54 = (char *)v53;
    operator delete(v53);
  }
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate((MTLMetalScriptSerializer *)a2, v40)
    || (result = objc_msgSend((id)objc_msgSend(a2, "privateFunctions"), "count")) != 0)
  {
    *(_BYTE *)(a1 + 70) = 1;
    v43 = *(_DWORD *)(a1 + 32);
    v44 = *(_DWORD *)(a1 + 48);
    v45 = *(_DWORD *)(a1 + 40);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, FunctionArray);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v11);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v17);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v41);
    return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v43 - (unsigned __int16)v44 + v45);
  }
  return result;
}

void sub_18270B1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  char *v40;
  char *v42;
  uint64_t v43;

  v42 = a28;
  if (a28 == v40)
  {
    v43 = 4;
    v42 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v43 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v42 + 8 * v43))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::buildRenderPipeline(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string::size_type size;
  std::string *p_p;
  int String;
  uint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  int v13;
  unsigned int *v14;
  int v15;
  BOOL *v16;
  int v17;
  void *v18;
  int LinkedFunctions;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  const MTLLinkedFunctions *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  const MTLLinkedFunctions *v27;
  int v28;
  MTLMetalScriptSerializer *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  std::string *v36;
  std::string::size_type v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void *v44;
  int v45;
  int v46;
  int v47;
  _BYTE v48[13];
  std::string __p;
  _BYTE v50[24];
  _BYTE *v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)&v48[1] = 0;
  v48[0] = 0;
  if (!*(_QWORD *)(a2 + 256))
    goto LABEL_6;
  *(_QWORD *)&v48[5] = *(_QWORD *)(a2 + 256);
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(&__p, v6, &v48[5]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      p_p = &__p;
      goto LABEL_9;
    }
LABEL_6:
    String = 0;
    goto LABEL_13;
  }
  size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_9:
    String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)p_p, size);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  String = 0;
LABEL_12:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  if (!*(_QWORD *)(a2 + 264))
    goto LABEL_18;
  *(_QWORD *)&v48[5] = *(_QWORD *)(a2 + 264);
  v10 = *(_QWORD *)(a3 + 24);
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v10 + 48))(&__p, v10, &v48[5]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v12 = &__p;
      goto LABEL_21;
    }
LABEL_18:
    v13 = 0;
    goto LABEL_25;
  }
  v11 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_21:
    v13 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v12, v11);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  v13 = 0;
LABEL_24:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_25:
  v47 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 408));
  v46 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 416));
  v15 = MTLMetalScriptSerializer::addColorAttachmentsDescriptor(a1, *(flatbuffers::FlatBufferBuilder **)a2, (MTLRenderPipelineColorAttachmentDescriptorArray *)&v48[1], v14);
  v17 = MTLMetalScriptSerializer::addVertexDescriptor(a1, *(flatbuffers::FlatBufferBuilder **)(a2 + 272), (MTLVertexDescriptor *)v48, v16);
  v18 = *(void **)(a2 + 496);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v52, a3);
  LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v18, (uint64_t)v52);
  v20 = v53;
  if (v53 == v52)
  {
    v21 = 4;
    v20 = v52;
  }
  else
  {
    if (!v53)
      goto LABEL_30;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_30:
  v45 = LinkedFunctions;
  v22 = *(void **)(a2 + 488);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v50, a3);
  v24 = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v22, (uint64_t)v50);
  v25 = v51;
  if (v51 == v50)
  {
    v26 = 4;
    v25 = v50;
    goto LABEL_34;
  }
  if (v51)
  {
    v26 = 5;
LABEL_34:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 496), v23)
    || MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 488), v27))
  {
    v28 = *(_DWORD *)&v48[1];
    if ((*(_DWORD *)&v48[1] & 0x1FFFFFFEu) < 6)
      v28 = *(_DWORD *)&v48[1] & 0x60000000 | 6;
    *(_DWORD *)&v48[1] = v28 | 0x80000000;
  }
  if (objc_msgSend((id)objc_msgSend(*(id *)(a2 + 496), "privateFunctions"), "count"))
  {
    LODWORD(v29) = *(_DWORD *)&v48[1];
  }
  else
  {
    v30 = objc_msgSend((id)objc_msgSend(*(id *)(a2 + 488), "privateFunctions"), "count");
    v29 = (MTLMetalScriptSerializer *)*(unsigned int *)&v48[1];
    if (!v30)
      goto LABEL_46;
  }
  v31 = v29 & 0x60000000 | 1;
  if ((v29 & 0x1FFFFFFF) != 0)
    v31 = v29;
  v29 = (MTLMetalScriptSerializer *)(v31 | 0x80000000);
LABEL_46:
  if (v48[0])
  {
    if ((v29 & 0x1FFFFFFF) >= 5)
      v32 = v29;
    else
      v32 = v29 & 0x60000000 | 5;
    v29 = (MTLMetalScriptSerializer *)(v32 | 0x80000000);
  }
  if (*(_BYTE *)(a2 + 152) || (v44 = *(void **)(a2 + 256)) != 0 && objc_msgSend(v44, "patchType"))
  {
    if ((v29 & 0x1FFFFFFF) >= 3)
      v33 = v29;
    else
      v33 = v29 & 0xC0000000 | 3;
    v29 = (MTLMetalScriptSerializer *)(v33 | 0x20000000);
  }
  if (*(_QWORD *)(a2 + 96) >= 0x11uLL)
  {
    if ((v29 & 0x1FFFFFFF) >= 5)
      v34 = v29;
    else
      v34 = v29 & 0xC0000000 | 5;
    v29 = (MTLMetalScriptSerializer *)(v34 | 0x20000000);
  }
  if (*(_DWORD *)(a2 + 476) < 2u)
  {
    if (!(_DWORD)v29)
    {
      v39 = 0;
      goto LABEL_76;
    }
  }
  else
  {
    if ((v29 & 0x1FFFFFFE) >= 6)
      v35 = v29;
    else
      v35 = v29 & 0xC0000000 | 6;
    v29 = (MTLMetalScriptSerializer *)(v35 | 0x20000000);
  }
  MTLMetalScriptSerializer::generateEnableString(v29, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &__p;
  else
    v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v37 = __p.__r_.__value_.__l.__size_;
  v38 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v36, v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v39 = v38;
LABEL_76:
  *((_BYTE *)a1 + 70) = 1;
  v40 = *((_DWORD *)a1 + 8);
  v41 = *((_DWORD *)a1 + 12);
  v42 = *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v39);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v13);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, *(_QWORD *)(a2 + 552), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, *(_QWORD *)(a2 + 560), 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 14, v17);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, (*(unsigned __int8 *)(a2 + 224) >> 3) & 3, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 18, *(_QWORD *)(a2 + 96), 16);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, *(unsigned __int8 *)(a2 + 104), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, *(unsigned __int8 *)(a2 + 112), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, *(unsigned __int8 *)(a2 + 120), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 26, *(unsigned __int8 *)(a2 + 128), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 28, *(unsigned __int8 *)(a2 + 136), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 30, *(unsigned __int8 *)(a2 + 88), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 32, *(unsigned int *)(a2 + 476), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, (*(_DWORD *)(a2 + 224) >> 10) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, (*(unsigned __int8 *)(a2 + 224) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, *(_DWORD *)(a2 + 224) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 40, (*(unsigned __int8 *)(a2 + 224) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 42, *(_QWORD *)(a2 + 184), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 44, *(_QWORD *)(a2 + 216), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 46, *(_QWORD *)(a2 + 192), -1);
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a1, 48, *(float *)(a2 + 200), 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 50, (*(_DWORD *)(a2 + 224) >> 8) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 52, v15);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 54, *(unsigned __int16 *)(a2 + 72), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 56, *(unsigned __int16 *)(a2 + 80), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 58, v47);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 60, v46);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 62, *(unsigned __int8 *)(a2 + 152), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 64, *(unsigned __int8 *)(a2 + 568), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 66, *(unsigned __int8 *)(a2 + 569), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 94, v45);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 92, v24);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 68, *(unsigned __int8 *)(a2 + 176), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 70, *(_DWORD *)(a2 + 224) >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 72, (*(_DWORD *)(a2 + 224) >> 27) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 74, (*(_DWORD *)(a2 + 224) >> 26) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 76, (*(_DWORD *)(a2 + 224) >> 23) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 78, (*(_DWORD *)(a2 + 224) >> 15), 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 80, (*(_DWORD *)(a2 + 224) >> 14) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 82, (*(unsigned __int8 *)(a2 + 224) >> 6) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 84, (*(_QWORD *)(a2 + 224) >> 7) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 86, *(_DWORD *)(a2 + 232), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 88, *(_DWORD *)(a2 + 236), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 90, *(unsigned __int8 *)(a2 + 472), 0);
  return flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v40 - (unsigned __int16)v41 + v42);
}

void sub_18270BA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(MTLMetalScriptSerializer *this, const MTLLinkedFunctions *a2)
{
  return objc_msgSend((id)-[MTLMetalScriptSerializer functions](this, "functions"), "count")
      || objc_msgSend((id)-[MTLMetalScriptSerializer groups](this, "groups"), "count")
      || objc_msgSend((id)-[MTLMetalScriptSerializer binaryFunctions](this, "binaryFunctions"), "count") != 0;
}

uint64_t MTLMetalScriptSerializer::buildMeshPipeline(flatbuffers::FlatBufferBuilder *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  int v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int *v20;
  int v21;
  void *v22;
  int LinkedFunctions;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  const MTLLinkedFunctions *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  const MTLLinkedFunctions *v35;
  const MTLLinkedFunctions *v36;
  int v37;
  unsigned int v38;
  std::string *v39;
  std::string::size_type v40;
  int v41;
  int v42;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int String;
  std::string __p;
  _BYTE v51[12];
  _BYTE v52[24];
  _BYTE *v53;
  _BYTE v54[24];
  _BYTE *v55;
  _BYTE v56[24];
  _BYTE *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)v51 = 0;
  if (!*(_QWORD *)(a2 + 96))
    goto LABEL_6;
  *(_QWORD *)&v51[4] = *(_QWORD *)(a2 + 96);
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v6 + 48))(&__p, v6, &v51[4]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      p_p = &__p;
      goto LABEL_9;
    }
LABEL_6:
    String = 0;
    goto LABEL_13;
  }
  size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_9:
    String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)p_p, size);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
  String = 0;
LABEL_12:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_13:
  if (!*(_QWORD *)(a2 + 104))
    goto LABEL_18;
  *(_QWORD *)&v51[4] = *(_QWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(&__p, v9, &v51[4]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v11 = &__p;
      goto LABEL_21;
    }
LABEL_18:
    v12 = 0;
    goto LABEL_25;
  }
  v10 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_21:
    v12 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v11, v10);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  v12 = 0;
LABEL_24:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_25:
  v48 = v12;
  if (!*(_QWORD *)(a2 + 88))
    goto LABEL_30;
  *(_QWORD *)&v51[4] = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a3 + 24);
  if (!v13)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v13 + 48))(&__p, v13, &v51[4]);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v15 = &__p;
      goto LABEL_33;
    }
LABEL_30:
    v16 = 0;
    goto LABEL_37;
  }
  v14 = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_33:
    v16 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v15, v14);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
  v16 = 0;
LABEL_36:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_37:
  v17 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 152));
  v18 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 160));
  v19 = addPipelineBufferDescriptor(a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 144));
  v21 = MTLMetalScriptSerializer::addColorAttachmentsDescriptor(a1, *(flatbuffers::FlatBufferBuilder **)a2, (MTLRenderPipelineColorAttachmentDescriptorArray *)v51, v20);
  v22 = *(void **)(a2 + 224);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v56, a3);
  LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v22, (uint64_t)v56);
  v24 = v57;
  if (v57 == v56)
  {
    v25 = 4;
    v24 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_42;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_42:
  v47 = LinkedFunctions;
  v26 = *(void **)(a2 + 216);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v54, a3);
  v27 = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v26, (uint64_t)v54);
  v28 = v55;
  if (v55 == v54)
  {
    v29 = 4;
    v28 = v54;
  }
  else
  {
    if (!v55)
      goto LABEL_47;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_47:
  v46 = v27;
  v30 = *(void **)(a2 + 208);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v52, a3);
  v32 = MTLMetalScriptSerializer::createLinkedFunctions((uint64_t)a1, v30, (uint64_t)v52);
  v33 = v53;
  if (v53 == v52)
  {
    v34 = 4;
    v33 = v52;
    goto LABEL_51;
  }
  if (v53)
  {
    v34 = 5;
LABEL_51:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 224), v31)
    || MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 216), v35)
    || MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 208), v36))
  {
    v37 = *(_DWORD *)v51;
    if ((*(_DWORD *)v51 & 0x1FFFFFFFu) < 9)
      v37 = *(_DWORD *)v51 & 0x60000000 | 9;
    v38 = v37 | 0x80000000;
  }
  else
  {
    v38 = *(_DWORD *)v51;
  }
  if ((v38 & 0x1FFFFFFF) < 7)
    v38 = v38 & 0x60000000 | 7;
  MTLMetalScriptSerializer::generateEnableString((MTLMetalScriptSerializer *)(v38 | 0x80000000), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &__p;
  else
    v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v40 = __p.__r_.__value_.__l.__size_;
  v41 = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v39, v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_BYTE *)a1 + 70) = 1;
  v42 = *((_DWORD *)a1 + 12);
  v44 = *((_DWORD *)a1 + 10);
  v45 = *((_DWORD *)a1 + 8);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v41);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v48);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v16);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 58, v17);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 60, v18);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 56, v19);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 50, v21);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 40, *(_QWORD *)(a2 + 32), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 86, (*(unsigned __int8 *)(a2 + 60) >> 4) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 44, *(_QWORD *)(a2 + 48), -1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 72, (*(_DWORD *)(a2 + 60) >> 28) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 74, *(_BYTE *)(a2 + 63) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a1, 46, *(float *)(a2 + 56), 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, (*(unsigned __int8 *)(a2 + 60) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 76, (*(_DWORD *)(a2 + 60) >> 23) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 42, *(_QWORD *)(a2 + 40), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 78, (*(_DWORD *)(a2 + 60) >> 20) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 82, (*(_DWORD *)(a2 + 60) >> 11) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 20, *(_QWORD *)(a2 + 136), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 32, *(unsigned __int8 *)(a2 + 60) >> 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, (*(unsigned __int8 *)(a2 + 60) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, *(_DWORD *)(a2 + 60) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 80, (*(_DWORD *)(a2 + 60) >> 12), 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 70, *(unsigned __int8 *)(a2 + 24), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 84, (*(unsigned __int8 *)(a2 + 60) >> 3) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 52, *(unsigned __int16 *)(a2 + 8), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 30, (*(_QWORD *)(a2 + 60) >> 35) & 0xFLL, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 54, *(unsigned __int16 *)(a2 + 16), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 26, *(_QWORD *)(a2 + 264), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 62, *(_DWORD *)(a2 + 60) >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 24, *(_QWORD *)(a2 + 256), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 28, *(_QWORD *)(a2 + 272), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 88, *(_DWORD *)(a2 + 68), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 90, (*(_DWORD *)(a2 + 60) >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 66, (*(_QWORD *)(a2 + 60) >> 33) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 64, *(_DWORD *)(a2 + 64) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 68, (*(_QWORD *)(a2 + 60) >> 34) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 22, *(_QWORD *)(a2 + 128), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 18, *(_QWORD *)(a2 + 120), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, *(_QWORD *)(a2 + 112), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, (*(_QWORD *)(a2 + 60) >> 40) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, (*(_QWORD *)(a2 + 60) >> 39) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 96, v47);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 92, v32);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 94, v46);
  return flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v45 - (unsigned __int16)v42 + v44);
}

void sub_18270C2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *MTLMetalScriptSerializer::generateEnableString@<X0>(MTLMetalScriptSerializer *this@<X0>, std::string *a2@<X8>)
{
  int v2;
  std::string *result;
  uint64_t v5;
  const char *v6;
  const std::string::value_type *v7;

  v2 = (int)this;
  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "");
  v5 = v2 & 0x1FFFFFFF;
  if ((v2 & 0x1FFFFFFF) != 0 && v5 < 0xD)
    result = std::string::append(a2, off_1E0FE31B8[v5 - 1]);
  if ((v2 & 0x20000000) != 0 && (v2 & 0xC0000000) != 0x80000000)
  {
    v6 = " supportsFamily(mac2)";
    if (v2 >= 0)
      v6 = " || supportsFamily(mac2)";
    if ((((_DWORD)v5 != 0) & ((v2 & 0x40000000u) >> 30)) != 0)
      v7 = " && supportsFamily(mac2)";
    else
      v7 = v6;
    return std::string::append(a2, v7);
  }
  return result;
}

void sub_18270C424(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::buildTileRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string::size_type size;
  std::string *p_p;
  int String;
  int v10;
  MTLTileRenderPipelineColorAttachmentDescriptorArray *v11;
  int v12;
  void *v13;
  const MTLLinkedFunctions *v14;
  int LinkedFunctions;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::string *v20;
  std::string::size_type v21;
  int v22;
  int v23;
  int v24;
  int v25;
  std::string __p;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v28 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(&__p, v4, &v28);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      String = 0;
      goto LABEL_12;
    }
    p_p = &__p;
    goto LABEL_7;
  }
  size = __p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_7:
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)p_p, size);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  String = 0;
LABEL_11:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_12:
  v10 = addPipelineBufferDescriptor((flatbuffers::FlatBufferBuilder *)a1, *(MTLPipelineBufferDescriptorArray **)(a2 + 56));
  v12 = MTLMetalScriptSerializer::addTileColorAttachmentsDescriptor((MTLMetalScriptSerializer *)a1, *(flatbuffers::FlatBufferBuilder **)a2, v11);
  v13 = *(void **)(a2 + 96);
  std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100]((uint64_t)v29, a3);
  LinkedFunctions = MTLMetalScriptSerializer::createLinkedFunctions(a1, v13, (uint64_t)v29);
  v16 = v30;
  if (v30 == v29)
  {
    v17 = 4;
    v16 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_17;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_17:
  if (MTLMetalScriptSerializer::linkedFunctionHasEntryExcludingPrivate(*(MTLMetalScriptSerializer **)(a2 + 96), v14))
    v18 = -2147483642;
  else
    v18 = 0;
  if ((v18 & 4) != 0)
    v19 = v18 | 0x80000000;
  else
    v19 = 2147483652;
  MTLMetalScriptSerializer::generateEnableString((MTLMetalScriptSerializer *)v19, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &__p;
  else
    v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v21 = __p.__r_.__value_.__l.__size_;
  v22 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, (const char *)v20, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 70) = 1;
  v23 = *(_DWORD *)(a1 + 32);
  v24 = *(_DWORD *)(a1 + 48);
  v25 = *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 20, v10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 18, v12);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, *(_QWORD *)(a2 + 112), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, *(unsigned __int8 *)(a2 + 120), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 26, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, *(_QWORD *)(a2 + 8), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, *(_QWORD *)(a2 + 48), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, *(unsigned __int16 *)(a2 + 64), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, *(unsigned __int8 *)(a2 + 32), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, *(unsigned __int8 *)(a2 + 72), 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v23 - (unsigned __int16)v24 + v25);
}

void sub_18270C70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptSerializer::addFunctionConstants(MTLMetalScriptSerializer *this, flatbuffers::FlatBufferBuilder *a2, MTLFunctionConstantValuesInternal *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  flatbuffers::FlatBufferBuilder *v8;
  NSString *v9;
  int v10;
  MTLDataType v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  void *v32;
  MTLDataType v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  char *v51;
  uint64_t v52;
  id obj;
  id obja;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  void *__p;
  char *v66;
  char *v67;
  __int16 v68;
  _BYTE v69[128];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  __p = 0;
  v66 = 0;
  v67 = 0;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  obj = (id)-[flatbuffers::FlatBufferBuilder newNamedConstantArray](a2, "newNamedConstantArray", a3);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v70, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v62;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v62 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v61 + 1) + 8 * i);
        v8 = (flatbuffers::FlatBufferBuilder *)objc_msgSend(v7, "name");
        v10 = MTLMetalScriptSerializer::addString(this, v8, v9);
        v11 = objc_msgSend(v7, "dataType");
        LODWORD(v7) = makeValue(this, v11, (_DWORD *)objc_msgSend(v7, "data"));
        *((_BYTE *)this + 70) = 1;
        v12 = *((_DWORD *)this + 8);
        v13 = *((_DWORD *)this + 12);
        v14 = *((_DWORD *)this + 10);
        v15 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v15);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 8, v11, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 10, (int)v7);
        v16 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
        v17 = v16;
        v18 = v66;
        if (v66 >= v67)
        {
          v20 = (char *)__p;
          v21 = (v66 - (_BYTE *)__p) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v23 = v67 - (_BYTE *)__p;
          if ((v67 - (_BYTE *)__p) >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v67, v24);
            v20 = (char *)__p;
            v18 = v66;
          }
          else
          {
            v25 = 0;
          }
          v26 = &v25[4 * v21];
          *(_DWORD *)v26 = v17;
          v19 = v26 + 4;
          while (v18 != v20)
          {
            v27 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v26 - 1) = v27;
            v26 -= 4;
          }
          __p = v26;
          v66 = v19;
          v67 = &v25[4 * v24];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *(_DWORD *)v66 = v16;
          v19 = v18 + 4;
        }
        v66 = v19;
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v61, v70, 16);
    }
    while (v4);
  }

  v28 = (void *)-[flatbuffers::FlatBufferBuilder newIndexedConstantArray](a2, "newIndexedConstantArray");
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v57, v69, 16);
  if (v29)
  {
    v30 = *(_QWORD *)v58;
    obja = v28;
    do
    {
      for (j = 0; j != v29; ++j)
      {
        if (*(_QWORD *)v58 != v30)
          objc_enumerationMutation(obja);
        v32 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * j);
        v68 = objc_msgSend(v32, "index");
        v33 = objc_msgSend(v32, "dataType");
        LODWORD(v32) = makeValue(this, v33, (_DWORD *)objc_msgSend(v32, "data"));
        v34 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)this, &v68);
        *((_BYTE *)this + 70) = 1;
        v35 = *((_DWORD *)this + 8);
        v36 = *((_DWORD *)this + 12);
        v37 = *((_DWORD *)this + 10);
        v38 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 1);
        flatbuffers::FlatBufferBuilder::TrackField((char *)this, 4, v38);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, v34);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)this, 8, v33, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 10, (int)v32);
        v39 = flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v35 - (unsigned __int16)v36 + v37);
        v40 = v39;
        v41 = v66;
        if (v66 >= v67)
        {
          v43 = (char *)__p;
          v44 = (v66 - (_BYTE *)__p) >> 2;
          v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v46 = v67 - (_BYTE *)__p;
          if ((v67 - (_BYTE *)__p) >> 1 > v45)
            v45 = v46 >> 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
            v47 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v47 = v45;
          if (v47)
          {
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v67, v47);
            v43 = (char *)__p;
            v41 = v66;
          }
          else
          {
            v48 = 0;
          }
          v49 = &v48[4 * v44];
          *(_DWORD *)v49 = v40;
          v42 = v49 + 4;
          while (v41 != v43)
          {
            v50 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *((_DWORD *)v49 - 1) = v50;
            v49 -= 4;
          }
          __p = v49;
          v66 = v42;
          v67 = &v48[4 * v47];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_DWORD *)v66 = v39;
          v42 = v41 + 4;
        }
        v66 = v42;
      }
      v28 = obja;
      v29 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v57, v69, 16);
    }
    while (v29);
  }

  v51 = (char *)__p;
  if (__p != v66)
  {
    v52 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(this, (uint64_t)__p, (v66 - (_BYTE *)__p) >> 2);
    v51 = (char *)__p;
    if (!__p)
      return v52;
    goto LABEL_53;
  }
  v52 = 0;
  if (__p)
  {
LABEL_53:
    v66 = v51;
    operator delete(v51);
  }
  return v52;
}

void sub_18270CC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::initFromScript(NSObject **a1, dispatch_data_t data)
{
  dispatch_data_t v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD block[7];
  size_t size_ptr;
  void *buffer_ptr;

  if (data)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v3 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
    if (v3)
    {
      v4 = v3;
      if (buffer_ptr)
      {
        v5 = *a1;
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___ZN25MTLMetalScriptBuilderImpl14initFromScriptEPU27objcproto16OS_dispatch_data8NSObject_block_invoke;
        block[3] = &__block_descriptor_56_e5_v8__0l;
        block[4] = a1;
        block[5] = buffer_ptr;
        block[6] = size_ptr;
        dispatch_sync(v5, block);
      }
      dispatch_release(v4);
    }
  }
}

void ___ZN25MTLMetalScriptBuilderImpl14initFromScriptEPU27objcproto16OS_dispatch_data8NSObject_block_invoke(uint64_t a1)
{
  MTLMetalScriptBuilderImpl *v2;

  v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 32);
  MTLMetalScriptBuilderImpl::resetInternal(v2, 1);
  MTLMetalScriptBuilderImpl::initFromData(v2, *(char **)(a1 + 40));
}

void MTLMetalScriptBuilderImpl::initFromData(MTLMetalScriptBuilderImpl *this, char *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  void **v12;
  unsigned int *v13;
  const char *v14;
  const char *v15;
  int v16;
  int v17;
  char *v18;
  unint64_t v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  void **v41;
  const char *v42;
  const char *v43;
  const char *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  unint64_t v49;
  char *v50;
  _DWORD *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  void **v65;
  const char *v66;
  int v67;
  int v68;
  unint64_t v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  const char *v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  void **v89;
  const char *v90;
  int v91;
  int v92;
  unint64_t v93;
  char *v94;
  _DWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  int v103;
  const char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  void **v117;
  unsigned int *v118;
  int v119;
  int v120;
  unint64_t v121;
  char *v122;
  _DWORD *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  int v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  void **v136;
  unsigned int *v137;
  int v138;
  int v139;
  unint64_t v140;
  char *v141;
  _DWORD *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  int v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  void **v155;
  unsigned int *v156;
  int v157;
  int v158;
  unint64_t v159;
  char *v160;
  _DWORD *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  int v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  void **v176;
  unsigned int *v177;
  int v178;
  int v179;
  char *v180;
  unint64_t v181;
  _DWORD *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  int v190;
  int *v191;
  char *v192;
  void *__dst[2];
  char v194;
  void *__p[2];
  uint64_t v196;
  void **v197;

  v3 = &a2[*(unsigned int *)a2];
  v4 = *(int *)v3;
  v5 = -v4;
  v6 = &v3[-v4];
  v192 = v3;
  if (*(unsigned __int16 *)v6 >= 9u)
  {
    v7 = *((unsigned __int16 *)v6 + 4);
    if (v7)
    {
      v8 = &v3[v7];
      v9 = *(unsigned int *)v8;
      v11 = (unsigned int *)&v8[v9 + 4];
      v10 = *(unsigned int *)&v8[v9];
      if ((_DWORD)v10)
      {
        v12 = (void **)((char *)this + 536);
        v13 = &v11[v10];
        do
        {
          v14 = (char *)v11 + *v11;
          v15 = &v14[*(unsigned __int16 *)&v14[-*(int *)v14 + 4]];
          std::string::basic_string[abi:ne180100](__p, (void *)&v15[*(unsigned int *)v15 + 4], *(unsigned int *)&v15[*(unsigned int *)v15]);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 128, (unsigned __int8 *)__p, (uint64_t)__p);
          if (SHIBYTE(v196) < 0)
            operator delete(__p[0]);
          v16 = Mtl::CloneNamedPredicate<Mtl::NamedPredicate>((MTLMetalScriptBuilderImpl *)((char *)this + 248), v14);
          v17 = v16;
          v18 = (char *)*((_QWORD *)this + 68);
          v19 = *((_QWORD *)this + 69);
          if ((unint64_t)v18 >= v19)
          {
            v21 = (char *)*v12;
            v22 = (v18 - (_BYTE *)*v12) >> 2;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v24 = v19 - (_QWORD)v21;
            if (v24 >> 1 > v23)
              v23 = v24 >> 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
              v25 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 552, v25);
              v18 = (char *)*((_QWORD *)this + 68);
              v21 = (char *)*((_QWORD *)this + 67);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[4 * v22];
            *(_DWORD *)v27 = v17;
            v20 = v27 + 4;
            while (v18 != v21)
            {
              v28 = *((_DWORD *)v18 - 1);
              v18 -= 4;
              *((_DWORD *)v27 - 1) = v28;
              v27 -= 4;
            }
            *((_QWORD *)this + 67) = v27;
            *((_QWORD *)this + 68) = v20;
            *((_QWORD *)this + 69) = &v26[4 * v25];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *(_DWORD *)v18 = v16;
            v20 = v18 + 4;
          }
          *((_QWORD *)this + 68) = v20;
          ++v11;
        }
        while (v11 != v13);
        v3 = v192;
        v5 = -(uint64_t)*(int *)v192;
      }
    }
  }
  v29 = &v3[v5];
  if (*(unsigned __int16 *)v29 >= 0xDu)
  {
    v30 = *((unsigned __int16 *)v29 + 6);
    if (v30)
    {
      v31 = (int *)&v192[v30 + *(unsigned int *)&v192[v30]];
      v32 = *v31;
      v33 = -v32;
      v34 = (unsigned __int16 *)((char *)v31 - v32);
      if (*v34 >= 5u)
      {
        v35 = v34[2];
        if (v35)
        {
          v36 = (unsigned int *)((char *)v31 + v35);
          v37 = *v36;
          v39 = (unsigned int *)((char *)v36 + v37 + 4);
          v38 = *(unsigned int *)((char *)v36 + v37);
          if ((_DWORD)v38)
          {
            v40 = &v39[v38];
            v41 = (void **)((char *)this + 344);
            do
            {
              v42 = (char *)v39 + *v39;
              v43 = &v42[-*(int *)v42];
              if (*((_WORD *)v43 + 2))
                v44 = &v42[*((unsigned __int16 *)v43 + 2) + *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 2)]];
              else
                v44 = 0;
              std::string::basic_string[abi:ne180100](__p, (void *)&v42[*((unsigned __int16 *)v43 + 3) + 4 + *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 3)]], *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 3)+ *(unsigned int *)&v42[*((unsigned __int16 *)v43 + 3)]]);
              std::string::basic_string[abi:ne180100](__dst, (void *)(v44 + 4), *(unsigned int *)v44);
              v197 = __dst;
              v45 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)this + 48, (unsigned __int8 *)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v197);
              v46 = v45 + 40;
              if ((char)v45[63] < 0)
                operator delete(*(void **)v46);
              *(_OWORD *)v46 = *(_OWORD *)__p;
              *((_QWORD *)v46 + 2) = v196;
              HIBYTE(v196) = 0;
              LOBYTE(__p[0]) = 0;
              if (v194 < 0)
              {
                operator delete(__dst[0]);
                if (SHIBYTE(v196) < 0)
                  operator delete(__p[0]);
              }
              v47 = Mtl::CloneNamedPredicate<Mtl::NamedPredicate>((MTLMetalScriptBuilderImpl *)((char *)this + 248), v42);
              v48 = v47;
              v50 = (char *)*((_QWORD *)this + 44);
              v49 = *((_QWORD *)this + 45);
              if ((unint64_t)v50 >= v49)
              {
                v52 = (char *)*v41;
                v53 = (v50 - (_BYTE *)*v41) >> 2;
                v54 = v53 + 1;
                if ((unint64_t)(v53 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v55 = v49 - (_QWORD)v52;
                if (v55 >> 1 > v54)
                  v54 = v55 >> 1;
                if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                  v56 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v56 = v54;
                if (v56)
                {
                  v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 360, v56);
                  v52 = (char *)*((_QWORD *)this + 43);
                  v50 = (char *)*((_QWORD *)this + 44);
                }
                else
                {
                  v57 = 0;
                }
                v58 = &v57[4 * v53];
                *(_DWORD *)v58 = v48;
                v51 = v58 + 4;
                while (v50 != v52)
                {
                  v59 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v58 - 1) = v59;
                  v58 -= 4;
                }
                *((_QWORD *)this + 43) = v58;
                *((_QWORD *)this + 44) = v51;
                *((_QWORD *)this + 45) = &v57[4 * v56];
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *(_DWORD *)v50 = v47;
                v51 = v50 + 4;
              }
              *((_QWORD *)this + 44) = v51;
              ++v39;
            }
            while (v39 != v40);
            v33 = -(uint64_t)*v31;
          }
        }
      }
      if (*(unsigned __int16 *)((char *)v31 + v33) >= 7u)
      {
        if (*(_WORD *)((char *)v31 + v33 + 6))
        {
          v60 = (unsigned int *)((char *)v31 + *(unsigned __int16 *)((char *)v31 + v33 + 6));
          v61 = *v60;
          v63 = (unsigned int *)((char *)v60 + v61 + 4);
          v62 = *(unsigned int *)((char *)v60 + v61);
          if ((_DWORD)v62)
          {
            v64 = &v63[v62];
            v65 = (void **)((char *)this + 368);
            v191 = v31;
            do
            {
              v66 = (char *)v63 + *v63;
              v67 = Mtl::CloneSpecializedFunctionLibrary<Mtl::SpecializedFunctionLibrary>((uint64_t)this + 248, v66);
              v68 = v67;
              v70 = (char *)*((_QWORD *)this + 47);
              v69 = *((_QWORD *)this + 48);
              if ((unint64_t)v70 >= v69)
              {
                v72 = (char *)*v65;
                v73 = (v70 - (_BYTE *)*v65) >> 2;
                v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v75 = v69 - (_QWORD)v72;
                if (v75 >> 1 > v74)
                  v74 = v75 >> 1;
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                  v76 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v76 = v74;
                if (v76)
                {
                  v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 384, v76);
                  v72 = (char *)*((_QWORD *)this + 46);
                  v70 = (char *)*((_QWORD *)this + 47);
                }
                else
                {
                  v77 = 0;
                }
                v78 = &v77[4 * v73];
                *(_DWORD *)v78 = v68;
                v71 = v78 + 4;
                while (v70 != v72)
                {
                  v79 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v78 - 1) = v79;
                  v78 -= 4;
                }
                *((_QWORD *)this + 46) = v78;
                *((_QWORD *)this + 47) = v71;
                *((_QWORD *)this + 48) = &v77[4 * v76];
                if (v72)
                  operator delete(v72);
              }
              else
              {
                *(_DWORD *)v70 = v67;
                v71 = v70 + 4;
              }
              *((_QWORD *)this + 47) = v71;
              v80 = &v66[-*(int *)v66];
              if (*(unsigned __int16 *)v80 >= 5u && (v81 = *((unsigned __int16 *)v80 + 2)) != 0)
                std::string::basic_string[abi:ne180100](__p, (void *)&v66[v81 + 4 + *(unsigned int *)&v66[v81]], *(unsigned int *)&v66[v81 + *(unsigned int *)&v66[v81]]);
              else
                std::string::basic_string[abi:ne180100]<0>(__p, "");
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 168, (unsigned __int8 *)__p, (uint64_t)__p);
              if (SHIBYTE(v196) < 0)
                operator delete(__p[0]);
              ++v63;
            }
            while (v63 != v64);
            v31 = v191;
            v33 = -(uint64_t)*v191;
          }
        }
      }
      v82 = (unsigned __int16 *)((char *)v31 + v33);
      if (*v82 >= 9u)
      {
        v83 = v82[4];
        if (v83)
        {
          v84 = (unsigned int *)((char *)v31 + v83);
          v85 = *v84;
          v87 = (unsigned int *)((char *)v84 + v85 + 4);
          v86 = *(unsigned int *)((char *)v84 + v85);
          if ((_DWORD)v86)
          {
            v88 = &v87[v86];
            v89 = (void **)((char *)this + 392);
            do
            {
              v90 = (char *)v87 + *v87;
              v91 = Mtl::CloneStitchedLibrary<Mtl::StitchedLibrary>((uint64_t)this + 248, v90);
              v92 = v91;
              v94 = (char *)*((_QWORD *)this + 50);
              v93 = *((_QWORD *)this + 51);
              if ((unint64_t)v94 >= v93)
              {
                v96 = (char *)*v89;
                v97 = (v94 - (_BYTE *)*v89) >> 2;
                v98 = v97 + 1;
                if ((unint64_t)(v97 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v99 = v93 - (_QWORD)v96;
                if (v99 >> 1 > v98)
                  v98 = v99 >> 1;
                if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
                  v100 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v100 = v98;
                if (v100)
                {
                  v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 408, v100);
                  v96 = (char *)*((_QWORD *)this + 49);
                  v94 = (char *)*((_QWORD *)this + 50);
                }
                else
                {
                  v101 = 0;
                }
                v102 = &v101[4 * v97];
                *(_DWORD *)v102 = v92;
                v95 = v102 + 4;
                while (v94 != v96)
                {
                  v103 = *((_DWORD *)v94 - 1);
                  v94 -= 4;
                  *((_DWORD *)v102 - 1) = v103;
                  v102 -= 4;
                }
                *((_QWORD *)this + 49) = v102;
                *((_QWORD *)this + 50) = v95;
                *((_QWORD *)this + 51) = &v101[4 * v100];
                if (v96)
                  operator delete(v96);
              }
              else
              {
                *(_DWORD *)v94 = v91;
                v95 = v94 + 4;
              }
              *((_QWORD *)this + 50) = v95;
              v104 = &v90[-*(int *)v90];
              if (*(unsigned __int16 *)v104 >= 5u && (v105 = *((unsigned __int16 *)v104 + 2)) != 0)
                std::string::basic_string[abi:ne180100](__p, (void *)&v90[v105 + 4 + *(unsigned int *)&v90[v105]], *(unsigned int *)&v90[v105 + *(unsigned int *)&v90[v105]]);
              else
                std::string::basic_string[abi:ne180100]<0>(__p, "");
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)this + 208, (unsigned __int8 *)__p, (uint64_t)__p);
              if (SHIBYTE(v196) < 0)
                operator delete(__p[0]);
              ++v87;
            }
            while (v87 != v88);
          }
        }
      }
    }
  }
  v106 = &v192[-*(int *)v192];
  if (*(unsigned __int16 *)v106 >= 0xFu)
  {
    v107 = *((unsigned __int16 *)v106 + 7);
    if (v107)
    {
      v108 = &v192[v107 + *(unsigned int *)&v192[v107]];
      v109 = *(int *)v108;
      v110 = -v109;
      v111 = &v108[-v109];
      if (*(unsigned __int16 *)v111 >= 5u)
      {
        v112 = *((unsigned __int16 *)v111 + 2);
        if (v112)
        {
          v113 = &v108[v112];
          v114 = *(unsigned int *)v113;
          v116 = &v113[v114 + 4];
          v115 = *(unsigned int *)&v113[v114];
          if ((_DWORD)v115)
          {
            v117 = (void **)((char *)this + 416);
            v118 = (unsigned int *)&v116[4 * v115];
            do
            {
              v119 = Mtl::CloneComputePipelineDescriptor<Mtl::ComputePipelineDescriptor>((uint64_t)this + 248, &v116[*(unsigned int *)v116]);
              v120 = v119;
              v122 = (char *)*((_QWORD *)this + 53);
              v121 = *((_QWORD *)this + 54);
              if ((unint64_t)v122 >= v121)
              {
                v124 = (char *)*v117;
                v125 = (v122 - (_BYTE *)*v117) >> 2;
                v126 = v125 + 1;
                if ((unint64_t)(v125 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v127 = v121 - (_QWORD)v124;
                if (v127 >> 1 > v126)
                  v126 = v127 >> 1;
                if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
                  v128 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v128 = v126;
                if (v128)
                {
                  v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 432, v128);
                  v124 = (char *)*((_QWORD *)this + 52);
                  v122 = (char *)*((_QWORD *)this + 53);
                }
                else
                {
                  v129 = 0;
                }
                v130 = &v129[4 * v125];
                *(_DWORD *)v130 = v120;
                v123 = v130 + 4;
                while (v122 != v124)
                {
                  v131 = *((_DWORD *)v122 - 1);
                  v122 -= 4;
                  *((_DWORD *)v130 - 1) = v131;
                  v130 -= 4;
                }
                *((_QWORD *)this + 52) = v130;
                *((_QWORD *)this + 53) = v123;
                *((_QWORD *)this + 54) = &v129[4 * v128];
                if (v124)
                  operator delete(v124);
              }
              else
              {
                *(_DWORD *)v122 = v119;
                v123 = v122 + 4;
              }
              *((_QWORD *)this + 53) = v123;
              v116 += 4;
            }
            while (v116 != (const char *)v118);
            v110 = -(uint64_t)*(int *)v108;
          }
        }
      }
      if (*(unsigned __int16 *)&v108[v110] >= 7u)
      {
        if (*(_WORD *)&v108[v110 + 6])
        {
          v132 = &v108[*(unsigned __int16 *)&v108[v110 + 6]];
          v133 = *(unsigned int *)v132;
          v135 = &v132[v133 + 4];
          v134 = *(unsigned int *)&v132[v133];
          if ((_DWORD)v134)
          {
            v136 = (void **)((char *)this + 440);
            v137 = (unsigned int *)&v135[4 * v134];
            do
            {
              v138 = Mtl::CloneRenderPipelineDescriptor<Mtl::RenderPipelineDescriptor>((uint64_t)this + 248, &v135[*(unsigned int *)v135]);
              v139 = v138;
              v141 = (char *)*((_QWORD *)this + 56);
              v140 = *((_QWORD *)this + 57);
              if ((unint64_t)v141 >= v140)
              {
                v143 = (char *)*v136;
                v144 = (v141 - (_BYTE *)*v136) >> 2;
                v145 = v144 + 1;
                if ((unint64_t)(v144 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v146 = v140 - (_QWORD)v143;
                if (v146 >> 1 > v145)
                  v145 = v146 >> 1;
                if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL)
                  v147 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v147 = v145;
                if (v147)
                {
                  v148 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 456, v147);
                  v143 = (char *)*((_QWORD *)this + 55);
                  v141 = (char *)*((_QWORD *)this + 56);
                }
                else
                {
                  v148 = 0;
                }
                v149 = &v148[4 * v144];
                *(_DWORD *)v149 = v139;
                v142 = v149 + 4;
                while (v141 != v143)
                {
                  v150 = *((_DWORD *)v141 - 1);
                  v141 -= 4;
                  *((_DWORD *)v149 - 1) = v150;
                  v149 -= 4;
                }
                *((_QWORD *)this + 55) = v149;
                *((_QWORD *)this + 56) = v142;
                *((_QWORD *)this + 57) = &v148[4 * v147];
                if (v143)
                  operator delete(v143);
              }
              else
              {
                *(_DWORD *)v141 = v138;
                v142 = v141 + 4;
              }
              *((_QWORD *)this + 56) = v142;
              v135 += 4;
            }
            while (v135 != (const char *)v137);
            v110 = -(uint64_t)*(int *)v108;
          }
        }
      }
      if (*(unsigned __int16 *)&v108[v110] >= 9u)
      {
        if (*(_WORD *)&v108[v110 + 8])
        {
          v151 = &v108[*(unsigned __int16 *)&v108[v110 + 8]];
          v152 = *(unsigned int *)v151;
          v154 = &v151[v152 + 4];
          v153 = *(unsigned int *)&v151[v152];
          if ((_DWORD)v153)
          {
            v155 = (void **)((char *)this + 464);
            v156 = (unsigned int *)&v154[4 * v153];
            do
            {
              v157 = Mtl::CloneTileRenderPipelineDescriptor<Mtl::TileRenderPipelineDescriptor>((uint64_t)this + 248, &v154[*(unsigned int *)v154]);
              v158 = v157;
              v160 = (char *)*((_QWORD *)this + 59);
              v159 = *((_QWORD *)this + 60);
              if ((unint64_t)v160 >= v159)
              {
                v162 = (char *)*v155;
                v163 = (v160 - (_BYTE *)*v155) >> 2;
                v164 = v163 + 1;
                if ((unint64_t)(v163 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v165 = v159 - (_QWORD)v162;
                if (v165 >> 1 > v164)
                  v164 = v165 >> 1;
                if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                  v166 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v166 = v164;
                if (v166)
                {
                  v167 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 480, v166);
                  v162 = (char *)*((_QWORD *)this + 58);
                  v160 = (char *)*((_QWORD *)this + 59);
                }
                else
                {
                  v167 = 0;
                }
                v168 = &v167[4 * v163];
                *(_DWORD *)v168 = v158;
                v161 = v168 + 4;
                while (v160 != v162)
                {
                  v169 = *((_DWORD *)v160 - 1);
                  v160 -= 4;
                  *((_DWORD *)v168 - 1) = v169;
                  v168 -= 4;
                }
                *((_QWORD *)this + 58) = v168;
                *((_QWORD *)this + 59) = v161;
                *((_QWORD *)this + 60) = &v167[4 * v166];
                if (v162)
                  operator delete(v162);
              }
              else
              {
                *(_DWORD *)v160 = v157;
                v161 = v160 + 4;
              }
              *((_QWORD *)this + 59) = v161;
              v154 += 4;
            }
            while (v154 != (const char *)v156);
            v110 = -(uint64_t)*(int *)v108;
          }
        }
      }
      v170 = &v108[v110];
      if (*(unsigned __int16 *)v170 >= 0xBu)
      {
        v171 = *((unsigned __int16 *)v170 + 5);
        if (v171)
        {
          v172 = &v108[v171];
          v173 = *(unsigned int *)v172;
          v175 = &v172[v173 + 4];
          v174 = *(unsigned int *)&v172[v173];
          if ((_DWORD)v174)
          {
            v176 = (void **)((char *)this + 560);
            v177 = (unsigned int *)&v175[4 * v174];
            do
            {
              v178 = Mtl::CloneMeshRenderPipelineDescriptor<Mtl::MeshRenderPipelineDescriptor>((uint64_t)this + 248, &v175[*(unsigned int *)v175]);
              v179 = v178;
              v180 = (char *)*((_QWORD *)this + 71);
              v181 = *((_QWORD *)this + 72);
              if ((unint64_t)v180 >= v181)
              {
                v183 = (char *)*v176;
                v184 = (v180 - (_BYTE *)*v176) >> 2;
                v185 = v184 + 1;
                if ((unint64_t)(v184 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v186 = v181 - (_QWORD)v183;
                if (v186 >> 1 > v185)
                  v185 = v186 >> 1;
                if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL)
                  v187 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v187 = v185;
                if (v187)
                {
                  v188 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 576, v187);
                  v180 = (char *)*((_QWORD *)this + 71);
                  v183 = (char *)*((_QWORD *)this + 70);
                }
                else
                {
                  v188 = 0;
                }
                v189 = &v188[4 * v184];
                *(_DWORD *)v189 = v179;
                v182 = v189 + 4;
                while (v180 != v183)
                {
                  v190 = *((_DWORD *)v180 - 1);
                  v180 -= 4;
                  *((_DWORD *)v189 - 1) = v190;
                  v189 -= 4;
                }
                *((_QWORD *)this + 70) = v189;
                *((_QWORD *)this + 71) = v182;
                *((_QWORD *)this + 72) = &v188[4 * v187];
                if (v183)
                  operator delete(v183);
              }
              else
              {
                *(_DWORD *)v180 = v178;
                v182 = v180 + 4;
              }
              *((_QWORD *)this + 71) = v182;
              v175 += 4;
            }
            while (v175 != (const char *)v177);
          }
        }
      }
    }
  }
}

void sub_18270D8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneNamedPredicate<Mtl::NamedPredicate>(flatbuffers::FlatBufferBuilder *this, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int String;
  const char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 7u && (v7 = *((unsigned __int16 *)v6 + 3)) != 0)
  {
    String = flatbuffers::FlatBufferBuilder::CreateString(this, &a2[v7 + 4 + *(unsigned int *)&a2[v7]], *(unsigned int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    String = 0;
  }
  v9 = &a2[v5];
  if (*(unsigned __int16 *)v9 >= 5u && (v10 = *((unsigned __int16 *)v9 + 2)) != 0)
    v11 = flatbuffers::FlatBufferBuilder::CreateString(this, &a2[v10 + 4 + *(unsigned int *)&a2[v10]], *(unsigned int *)&a2[v10 + *(unsigned int *)&a2[v10]]);
  else
    v11 = 0;
  *((_BYTE *)this + 70) = 1;
  v12 = *((_QWORD *)this + 5);
  v13 = *((_QWORD *)this + 6);
  v14 = *((_QWORD *)this + 4);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 6, String);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 4, v11);
  return flatbuffers::FlatBufferBuilder::EndTable(this, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

void std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t Mtl::CloneSpecializedFunctionLibrary<Mtl::SpecializedFunctionLibrary>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int String;
  int v10;
  int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v19;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0xDu && (v7 = *((unsigned __int16 *)v6 + 6)) != 0)
  {
    v19 = &a2[v7 + *(unsigned int *)&a2[v7]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl21FunctionConstantValueEEEZNS3_31CloneSpecializedFunctionLibraryINS3_26SpecializedFunctionLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41SpecializedFunctionLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xBu && *(_WORD *)&a2[v5 + 10])
  {
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 10] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 9u && *(_WORD *)&a2[v5 + 8])
  {
    v10 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 8] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    v11 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v11 = 0;
  }
  v12 = &a2[v5];
  if (*(unsigned __int16 *)v12 >= 5u && (v13 = *((unsigned __int16 *)v12 + 2)) != 0)
    v14 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v13 + 4 + *(unsigned int *)&a2[v13]], *(unsigned int *)&a2[v13 + *(unsigned int *)&a2[v13]]);
  else
    v14 = 0;
  *(_BYTE *)(a1 + 70) = 1;
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 12, v8);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, String);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v10);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v11);
  if (v14)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v14);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v17 - (unsigned __int16)v16 + (unsigned __int16)v15);
}

uint64_t Mtl::CloneStitchedLibrary<Mtl::StitchedLibrary>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  int String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 9u && (v7 = *((unsigned __int16 *)v6 + 4)) != 0)
  {
    v17 = &a2[v7 + *(unsigned int *)&a2[v7]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching5GraphEEEZNS3_20CloneStitchedLibraryINS3_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v17, &v17, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    v17 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneStitchedLibraryINS5_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v17, &v17, (flatbuffers::FlatBufferBuilder *)a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (v11 = *((unsigned __int16 *)v10 + 2)) != 0)
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  else
    String = 0;
  *(_BYTE *)(a1 + 70) = 1;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v9);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t Mtl::CloneComputePipelineDescriptor<Mtl::ComputePipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int String;
  int v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  const char *v26;
  uint64_t v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t v30;
  _BOOL4 v31;
  const char *v32;
  uint64_t v33;
  _BOOL4 v34;
  const char *v35;
  uint64_t v36;
  const char *v38;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x1Bu && (v7 = *((unsigned __int16 *)v6 + 13)) != 0)
  {
    v8 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x11u && *(_WORD *)&a2[v5 + 16])
  {
    v38 = &a2[*(unsigned __int16 *)&a2[v5 + 16] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 16]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_30CloneComputePipelineDescriptorINS3_25ComputePipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_40ComputePipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v38, &v38, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xFu && *(_WORD *)&a2[v5 + 14])
  {
    v10 = Mtl::CloneStageInputOutputDescriptor<Mtl::StageInputOutputDescriptor>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 14] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 14]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    v12 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v12 = 0;
  }
  v13 = 1;
  *(_BYTE *)(a1 + 70) = 1;
  v14 = &a2[v5];
  if (*(unsigned __int16 *)v14 >= 0xDu)
  {
    v15 = *((unsigned __int16 *)v14 + 6);
    if (v15)
      v13 = *(_QWORD *)&a2[v15];
    else
      v13 = 1;
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v13, 1);
  v19 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v19 >= 0xBu && (v20 = *((unsigned __int16 *)v19 + 5)) != 0)
    v21 = *(_QWORD *)&a2[v20];
  else
    v21 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v21, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 26, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 16, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 14, v10);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, String);
  if (v12)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v12);
  v22 = &a2[-*(int *)a2];
  v24 = *(unsigned __int16 *)v22 >= 0x19u && (v23 = *((unsigned __int16 *)v22 + 12)) != 0 && a2[v23] != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, v24, 0);
  v25 = 0;
  v26 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v26 >= 0x17u)
  {
    v27 = *((unsigned __int16 *)v26 + 11);
    if (v27)
    {
      v25 = a2[v27];
      if (v25 >= 3)
        abort();
    }
    else
    {
      v25 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v25, 0);
  v28 = 0;
  v29 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v29 >= 0x15u)
  {
    v30 = *((unsigned __int16 *)v29 + 10);
    if (v30)
      v28 = a2[v30] != 0;
    else
      v28 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v28, 0);
  v31 = 0;
  v32 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v32 >= 0x13u)
  {
    v33 = *((unsigned __int16 *)v32 + 9);
    if (v33)
      v31 = a2[v33] != 0;
    else
      v31 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, v31, 0);
  v34 = 0;
  v35 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v35 >= 9u)
  {
    v36 = *((unsigned __int16 *)v35 + 4);
    if (v36)
      v34 = a2[v36] != 0;
    else
      v34 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v34, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v18 - (unsigned __int16)v17 + (unsigned __int16)v16);
}

uint64_t Mtl::CloneRenderPipelineDescriptor<Mtl::RenderPipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int String;
  int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  float v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  unsigned __int16 v53;
  _BOOL4 v54;
  const char *v55;
  uint64_t v56;
  _BOOL4 v57;
  const char *v58;
  uint64_t v59;
  _BOOL4 v60;
  const char *v61;
  uint64_t v62;
  _BOOL4 v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  int v68;
  const char *v69;
  uint64_t v70;
  unsigned int v71;
  _BOOL4 v72;
  const char *v73;
  uint64_t v74;
  unsigned int v75;
  const char *v76;
  uint64_t v77;
  _BOOL4 v78;
  const char *v79;
  uint64_t v80;
  unsigned int v81;
  const char *v82;
  uint64_t v83;
  _BOOL4 v84;
  const char *v85;
  uint64_t v86;
  _BOOL4 v87;
  const char *v88;
  uint64_t v89;
  _BOOL4 v90;
  const char *v91;
  uint64_t v92;
  _BOOL4 v93;
  const char *v94;
  uint64_t v95;
  _BOOL4 v96;
  const char *v97;
  uint64_t v98;
  _BOOL4 v99;
  const char *v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  int v104;
  const char *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  const char *v109;
  uint64_t v110;
  unsigned int v111;
  const char *v112;
  uint64_t v113;
  unsigned int v114;
  const char *v115;
  uint64_t v116;
  unsigned int v117;
  const char *v118;
  uint64_t v119;
  unsigned int v120;
  const char *v121;
  uint64_t v122;
  _BOOL4 v123;
  const char *v124;
  uint64_t v125;
  unsigned int v126;
  const char *v127;
  uint64_t v128;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  const char *v135;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x5Fu && (v7 = *((unsigned __int16 *)v6 + 47)) != 0)
  {
    v133 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v133 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x5Du && *(_WORD *)&a2[v5 + 92])
  {
    v8 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 92] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 92]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Du && *(_WORD *)&a2[v5 + 60])
  {
    v135 = &a2[*(unsigned __int16 *)&a2[v5 + 60] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 60]]];
    v134 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v135, &v135, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v134 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Bu && *(_WORD *)&a2[v5 + 58])
  {
    v135 = &a2[*(unsigned __int16 *)&a2[v5 + 58] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 58]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v135, &v135, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x35u && *(_WORD *)&a2[v5 + 52])
  {
    v135 = &a2[*(unsigned __int16 *)&a2[v5 + 52] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 52]]];
    v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v135, &v135, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xFu && *(_WORD *)&a2[v5 + 14])
  {
    v11 = Mtl::CloneVertexDescriptor<Mtl::VertexDescriptor>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 14] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 14]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v11 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 9u && *(_WORD *)&a2[v5 + 8])
  {
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 8] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    v13 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v13 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    v14 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v14 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v15 = &a2[v5];
  v131 = *(_QWORD *)(a1 + 48);
  v132 = *(_QWORD *)(a1 + 40);
  v130 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int16 *)v15 >= 0x2Fu && (v16 = *((unsigned __int16 *)v15 + 23)) != 0)
    v17 = *(_QWORD *)&a2[v16];
  else
    v17 = -1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 46, v17, -1);
  v18 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v18 >= 0x2Du && (v19 = *((unsigned __int16 *)v18 + 22)) != 0)
    v20 = *(_QWORD *)&a2[v19];
  else
    v20 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 44, v20, 0);
  v21 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v21 >= 0x2Bu && (v22 = *((unsigned __int16 *)v21 + 21)) != 0)
    v23 = *(_QWORD *)&a2[v22];
  else
    v23 = 1;
  v24 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 42, v23, 1);
  v25 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v25 >= 0x21u)
  {
    v26 = *((unsigned __int16 *)v25 + 16);
    if (v26)
      v24 = *(_QWORD *)&a2[v26];
    else
      v24 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 32, v24, 1);
  v27 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v27 >= 0x13u && (v28 = *((unsigned __int16 *)v27 + 9)) != 0)
    v29 = *(_QWORD *)&a2[v28];
  else
    v29 = 16;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 18, v29, 16);
  v30 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v30 >= 0xDu && (v31 = *((unsigned __int16 *)v30 + 6)) != 0)
    v32 = *(_QWORD *)&a2[v31];
  else
    v32 = 1;
  v33 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v32, 1);
  v34 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v34 >= 0xBu)
  {
    v35 = *((unsigned __int16 *)v34 + 5);
    if (v35)
      v33 = *(_QWORD *)&a2[v35];
    else
      v33 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v33, 1);
  if (v133)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 94, v133);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 92, v8);
  v36 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v36 < 0x59u)
  {
    v39 = 0;
    v38 = v134;
  }
  else
  {
    v37 = *((unsigned __int16 *)v36 + 44);
    v38 = v134;
    if (v37)
      v39 = *(_DWORD *)&a2[v37];
    else
      v39 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 88, v39, 0);
  v40 = 0;
  v41 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v41 >= 0x57u)
  {
    v42 = *((unsigned __int16 *)v41 + 43);
    if (v42)
      v40 = *(_DWORD *)&a2[v42];
    else
      v40 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 86, v40, 0);
  if (v38)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 60, v38);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 58, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 52, v10);
  v43 = &a2[-*(int *)a2];
  v44 = 1.0;
  if (*(unsigned __int16 *)v43 >= 0x31u)
  {
    v45 = *((unsigned __int16 *)v43 + 24);
    if (v45)
      v44 = *(float *)&a2[v45];
  }
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a1, 48, v44, 1.0);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 14, v11);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, String);
  if (v13)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v13);
  if (v14)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v14);
  v46 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v46 >= 0x39u && (v47 = *((unsigned __int16 *)v46 + 28)) != 0)
    v48 = *(unsigned __int16 *)&a2[v47];
  else
    v48 = 0;
  v49 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v48);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 56, v49, 0);
  v50 = 0;
  v51 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v51 >= 0x37u)
  {
    v52 = *((unsigned __int16 *)v51 + 27);
    if (v52)
      v50 = *(unsigned __int16 *)&a2[v52];
    else
      v50 = 0;
  }
  v53 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v50);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 54, v53, 0);
  v54 = 0;
  v55 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v55 >= 0x5Bu)
  {
    v56 = *((unsigned __int16 *)v55 + 45);
    if (v56)
      v54 = a2[v56] != 0;
    else
      v54 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 90, v54, 0);
  v57 = 0;
  v58 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v58 >= 0x55u)
  {
    v59 = *((unsigned __int16 *)v58 + 42);
    if (v59)
      v57 = a2[v59] != 0;
    else
      v57 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 84, v57, 0);
  v60 = 0;
  v61 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v61 >= 0x53u)
  {
    v62 = *((unsigned __int16 *)v61 + 41);
    if (v62)
      v60 = a2[v62] != 0;
    else
      v60 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 82, v60, 0);
  v63 = 0;
  v64 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v64 >= 0x51u)
  {
    v65 = *((unsigned __int16 *)v64 + 40);
    if (v65)
      v63 = a2[v65] != 0;
    else
      v63 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 80, v63, 0);
  v66 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v66 >= 0x4Fu && (v67 = *((unsigned __int16 *)v66 + 39)) != 0)
    v68 = a2[v67];
  else
    v68 = 255;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 78, v68, 255);
  v69 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v69 >= 0x4Du && (v70 = *((unsigned __int16 *)v69 + 38)) != 0)
  {
    v71 = a2[v70];
    if (v71 >= 8)
      goto LABEL_211;
  }
  else
  {
    v71 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 76, v71, 0);
  v72 = 0;
  v73 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v73 >= 0x4Bu)
  {
    v74 = *((unsigned __int16 *)v73 + 37);
    if (v74)
      v72 = a2[v74] != 0;
    else
      v72 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 74, v72, 0);
  v75 = 0;
  v76 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v76 >= 0x49u)
  {
    v77 = *((unsigned __int16 *)v76 + 36);
    if (v77)
    {
      v75 = a2[v77];
      if (v75 >= 0x10)
        goto LABEL_211;
    }
    else
    {
      v75 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 72, v75, 0);
  v78 = 0;
  v79 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v79 >= 0x47u)
  {
    v80 = *((unsigned __int16 *)v79 + 35);
    if (v80)
      v78 = a2[v80] != 0;
    else
      v78 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 70, v78, 0);
  v81 = 0;
  v82 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v82 >= 0x45u)
  {
    v83 = *((unsigned __int16 *)v82 + 34);
    if (v83)
    {
      v81 = a2[v83];
      if (v81 >= 3)
        goto LABEL_211;
    }
    else
    {
      v81 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 68, v81, 0);
  v84 = 0;
  v85 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v85 >= 0x43u)
  {
    v86 = *((unsigned __int16 *)v85 + 33);
    if (v86)
      v84 = a2[v86] != 0;
    else
      v84 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 66, v84, 0);
  v87 = 0;
  v88 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v88 >= 0x41u)
  {
    v89 = *((unsigned __int16 *)v88 + 32);
    if (v89)
      v87 = a2[v89] != 0;
    else
      v87 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 64, v87, 0);
  v90 = 0;
  v91 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v91 >= 0x3Fu)
  {
    v92 = *((unsigned __int16 *)v91 + 31);
    if (v92)
      v90 = a2[v92] != 0;
    else
      v90 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 62, v90, 0);
  v93 = 0;
  v94 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v94 >= 0x33u)
  {
    v95 = *((unsigned __int16 *)v94 + 25);
    if (v95)
      v93 = a2[v95] != 0;
    else
      v93 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 50, v93, 0);
  v96 = 0;
  v97 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v97 >= 0x29u)
  {
    v98 = *((unsigned __int16 *)v97 + 20);
    if (v98)
      v96 = a2[v98] != 0;
    else
      v96 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 40, v96, 0);
  v99 = 0;
  v100 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v100 >= 0x27u)
  {
    v101 = *((unsigned __int16 *)v100 + 19);
    if (v101)
      v99 = a2[v101] != 0;
    else
      v99 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, v99, 0);
  v102 = &a2[-*(int *)a2];
  v104 = *(unsigned __int16 *)v102 < 0x25u || (v103 = *((unsigned __int16 *)v102 + 18)) == 0 || a2[v103] != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, v104, 1);
  v105 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v105 >= 0x23u && (v106 = *((unsigned __int16 *)v105 + 17)) != 0)
  {
    v107 = a2[v106];
    if (v107 >= 2)
      goto LABEL_211;
  }
  else
  {
    v107 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, v107, 0);
  v108 = 0;
  v109 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v109 >= 0x1Fu)
  {
    v110 = *((unsigned __int16 *)v109 + 15);
    if (v110)
    {
      v108 = a2[v110];
      if (v108 >= 4)
        goto LABEL_211;
    }
    else
    {
      v108 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 30, v108, 0);
  v111 = 0;
  v112 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v112 >= 0x1Du)
  {
    v113 = *((unsigned __int16 *)v112 + 14);
    if (v113)
    {
      v111 = a2[v113];
      if (v111 >= 2)
        goto LABEL_211;
    }
    else
    {
      v111 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 28, v111, 0);
  v114 = 0;
  v115 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v115 >= 0x1Bu)
  {
    v116 = *((unsigned __int16 *)v115 + 13);
    if (v116)
    {
      v114 = a2[v116];
      if (v114 >= 4)
        goto LABEL_211;
    }
    else
    {
      v114 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 26, v114, 0);
  v117 = 0;
  v118 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v118 >= 0x19u)
  {
    v119 = *((unsigned __int16 *)v118 + 12);
    if (v119)
    {
      v117 = a2[v119];
      if (v117 >= 3)
        goto LABEL_211;
    }
    else
    {
      v117 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, v117, 0);
  v120 = 0;
  v121 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v121 >= 0x17u)
  {
    v122 = *((unsigned __int16 *)v121 + 11);
    if (v122)
    {
      v120 = a2[v122];
      if (v120 >= 2)
LABEL_211:
        abort();
    }
    else
    {
      v120 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v120, 0);
  v123 = 0;
  v124 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v124 >= 0x15u)
  {
    v125 = *((unsigned __int16 *)v124 + 10);
    if (v125)
      v123 = a2[v125] != 0;
    else
      v123 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v123, 0);
  v126 = 0;
  v127 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v127 >= 0x11u)
  {
    v128 = *((unsigned __int16 *)v127 + 8);
    if (v128)
    {
      v126 = a2[v128];
      if (v126 >= 4)
        goto LABEL_211;
    }
    else
    {
      v126 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v126, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v130 - (unsigned __int16)v131 + (unsigned __int16)v132);
}

uint64_t Mtl::CloneTileRenderPipelineDescriptor<Mtl::TileRenderPipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int String;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  const char *v31;
  uint64_t v32;
  _BOOL4 v33;
  const char *v34;
  uint64_t v35;
  uint64_t v37;
  const char *v38;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x1Bu && (v7 = *((unsigned __int16 *)v6 + 13)) != 0)
  {
    v8 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x15u && *(_WORD *)&a2[v5 + 20])
  {
    v38 = &a2[*(unsigned __int16 *)&a2[v5 + 20] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 20]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v38, &v38, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x13u && *(_WORD *)&a2[v5 + 18])
  {
    v38 = &a2[*(unsigned __int16 *)&a2[v5 + 18] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 18]]];
    v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl43TileRenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v38, &v38, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v10 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    v12 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v12 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v13 = &a2[v5];
  if (*(unsigned __int16 *)v13 >= 0x11u && (v14 = *((unsigned __int16 *)v13 + 8)) != 0)
    v15 = *(_QWORD *)&a2[v14];
  else
    v15 = 0;
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 32);
  v37 = *(_QWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, v15, 0);
  v18 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v18 >= 0xFu && (v19 = *((unsigned __int16 *)v18 + 7)) != 0)
    v20 = *(_QWORD *)&a2[v19];
  else
    v20 = 1;
  v21 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, v20, 1);
  v22 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v22 >= 0xDu)
  {
    v23 = *((unsigned __int16 *)v22 + 6);
    if (v23)
      v21 = *(_QWORD *)&a2[v23];
    else
      v21 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v21, 1);
  v24 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v24 >= 0xBu && (v25 = *((unsigned __int16 *)v24 + 5)) != 0)
    v26 = *(_QWORD *)&a2[v25];
  else
    v26 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v26, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 26, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 20, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 18, v10);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, String);
  if (v12)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v12);
  v27 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v27 >= 0x19u && (v28 = *((unsigned __int16 *)v27 + 12)) != 0)
  {
    v29 = a2[v28];
    if (v29 >= 3)
      abort();
  }
  else
  {
    v29 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, v29, 0);
  v30 = 0;
  v31 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v31 >= 0x17u)
  {
    v32 = *((unsigned __int16 *)v31 + 11);
    if (v32)
      v30 = a2[v32] != 0;
    else
      v30 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v30, 0);
  v33 = 0;
  v34 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v34 >= 9u)
  {
    v35 = *((unsigned __int16 *)v34 + 4);
    if (v35)
      v33 = a2[v35] != 0;
    else
      v33 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v33, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v17 - (unsigned __int16)v16 + (unsigned __int16)v37);
}

uint64_t Mtl::CloneMeshRenderPipelineDescriptor<Mtl::MeshRenderPipelineDescriptor>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int String;
  int v11;
  int v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  int v49;
  const char *v50;
  float v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int16 v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  unsigned __int16 v60;
  _BOOL4 v61;
  const char *v62;
  uint64_t v63;
  _BOOL4 v64;
  const char *v65;
  uint64_t v66;
  _BOOL4 v67;
  const char *v68;
  uint64_t v69;
  _BOOL4 v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  int v75;
  const char *v76;
  uint64_t v77;
  unsigned int v78;
  _BOOL4 v79;
  const char *v80;
  uint64_t v81;
  unsigned int v82;
  const char *v83;
  uint64_t v84;
  _BOOL4 v85;
  const char *v86;
  uint64_t v87;
  unsigned int v88;
  const char *v89;
  uint64_t v90;
  _BOOL4 v91;
  const char *v92;
  uint64_t v93;
  _BOOL4 v94;
  const char *v95;
  uint64_t v96;
  _BOOL4 v97;
  const char *v98;
  uint64_t v99;
  _BOOL4 v100;
  const char *v101;
  uint64_t v102;
  _BOOL4 v103;
  const char *v104;
  uint64_t v105;
  _BOOL4 v106;
  const char *v107;
  uint64_t v108;
  _BOOL4 v109;
  const char *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  int v114;
  const char *v115;
  uint64_t v116;
  unsigned int v117;
  _BOOL4 v118;
  const char *v119;
  uint64_t v120;
  _BOOL4 v121;
  const char *v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  const char *v133;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0x61u && (v7 = *((unsigned __int16 *)v6 + 48)) != 0)
  {
    v132 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[v7 + *(unsigned int *)&a2[v7]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v132 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x5Fu && *(_WORD *)&a2[v5 + 94])
  {
    v131 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 94] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 94]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v131 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x5Du && *(_WORD *)&a2[v5 + 92])
  {
    v130 = Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(a1, (int *)&a2[*(unsigned __int16 *)&a2[v5 + 92] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 92]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v130 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Du && *(_WORD *)&a2[v5 + 60])
  {
    v133 = &a2[*(unsigned __int16 *)&a2[v5 + 60] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 60]]];
    v129 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v129 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x3Bu && *(_WORD *)&a2[v5 + 58])
  {
    v133 = &a2[*(unsigned __int16 *)&a2[v5 + 58] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 58]]];
    v128 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v128 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x39u && *(_WORD *)&a2[v5 + 56])
  {
    v133 = &a2[*(unsigned __int16 *)&a2[v5 + 56] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 56]]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0x33u && *(_WORD *)&a2[v5 + 50])
  {
    v133 = &a2[*(unsigned __int16 *)&a2[v5 + 50] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 50]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v133, &v133, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 0xBu && *(_WORD *)&a2[v5 + 10])
  {
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 10] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 10]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    String = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 9u && *(_WORD *)&a2[v5 + 8])
  {
    v11 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 8] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 8]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v11 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    v12 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 6] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v12 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 5u && *(_WORD *)&a2[v5 + 4])
  {
    v13 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[*(unsigned __int16 *)&a2[v5 + 4] + 4 + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]], *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]+ *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 4]]]);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v13 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v14 = &a2[v5];
  v126 = *(_QWORD *)(a1 + 48);
  v127 = *(_QWORD *)(a1 + 40);
  v125 = *(_QWORD *)(a1 + 32);
  if (*(unsigned __int16 *)v14 >= 0x2Du && (v15 = *((unsigned __int16 *)v14 + 22)) != 0)
    v16 = *(_QWORD *)&a2[v15];
  else
    v16 = -1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 44, v16, -1);
  v17 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v17 >= 0x2Bu && (v18 = *((unsigned __int16 *)v17 + 21)) != 0)
    v19 = *(_QWORD *)&a2[v18];
  else
    v19 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 42, v19, 0);
  v20 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v20 >= 0x29u && (v21 = *((unsigned __int16 *)v20 + 20)) != 0)
    v22 = *(_QWORD *)&a2[v21];
  else
    v22 = 1;
  v23 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 40, v22, 1);
  v24 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v24 >= 0x1Fu)
  {
    v25 = *((unsigned __int16 *)v24 + 15);
    if (v25)
      v23 = *(_QWORD *)&a2[v25];
    else
      v23 = 1;
  }
  v26 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 30, v23, 1);
  v27 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v27 >= 0x1Du)
  {
    v28 = *((unsigned __int16 *)v27 + 14);
    if (v28)
      v26 = *(_QWORD *)&a2[v28];
    else
      v26 = 1;
  }
  v29 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 28, v26, 1);
  v30 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v30 >= 0x1Bu)
  {
    v31 = *((unsigned __int16 *)v30 + 13);
    if (v31)
      v29 = *(_QWORD *)&a2[v31];
    else
      v29 = 1;
  }
  v32 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 26, v29, 1);
  v33 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v33 >= 0x19u)
  {
    v34 = *((unsigned __int16 *)v33 + 12);
    if (v34)
      v32 = *(_QWORD *)&a2[v34];
    else
      v32 = 1;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 24, v32, 1);
  v35 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v35 >= 0x17u && (v36 = *((unsigned __int16 *)v35 + 11)) != 0)
    v37 = *(_QWORD *)&a2[v36];
  else
    v37 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 22, v37, 0);
  v38 = 0;
  v39 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v39 >= 0x15u)
  {
    v40 = *((unsigned __int16 *)v39 + 10);
    if (v40)
      v38 = *(_QWORD *)&a2[v40];
    else
      v38 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 20, v38, 0);
  v41 = 0;
  v42 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v42 >= 0x13u)
  {
    v43 = *((unsigned __int16 *)v42 + 9);
    if (v43)
      v41 = *(_QWORD *)&a2[v43];
    else
      v41 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 18, v41, 0);
  v44 = 0;
  v45 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v45 >= 0x11u)
  {
    v46 = *((unsigned __int16 *)v45 + 8);
    if (v46)
      v44 = *(_QWORD *)&a2[v46];
    else
      v44 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, v44, 0);
  if (v132)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 96, v132);
  if (v131)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 94, v131);
  if (v130)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 92, v130);
  v47 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v47 >= 0x59u && (v48 = *((unsigned __int16 *)v47 + 44)) != 0)
    v49 = *(_DWORD *)&a2[v48];
  else
    v49 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 88, v49, 0);
  if (v129)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 60, v129);
  if (v128)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 58, v128);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 56, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 50, v9);
  v50 = &a2[-*(int *)a2];
  v51 = 1.0;
  if (*(unsigned __int16 *)v50 >= 0x2Fu)
  {
    v52 = *((unsigned __int16 *)v50 + 23);
    if (v52)
      v51 = *(float *)&a2[v52];
  }
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a1, 46, v51, 1.0);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, String);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v11);
  if (v12)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v12);
  if (v13)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v13);
  v53 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v53 >= 0x37u && (v54 = *((unsigned __int16 *)v53 + 27)) != 0)
    v55 = *(unsigned __int16 *)&a2[v54];
  else
    v55 = 0;
  v56 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v55);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 54, v56, 0);
  v57 = 0;
  v58 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v58 >= 0x35u)
  {
    v59 = *((unsigned __int16 *)v58 + 26);
    if (v59)
      v57 = *(unsigned __int16 *)&a2[v59];
    else
      v57 = 0;
  }
  v60 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v57);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 52, v60, 0);
  v61 = 0;
  v62 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v62 >= 0x5Bu)
  {
    v63 = *((unsigned __int16 *)v62 + 45);
    if (v63)
      v61 = a2[v63] != 0;
    else
      v61 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 90, v61, 0);
  v64 = 0;
  v65 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v65 >= 0x57u)
  {
    v66 = *((unsigned __int16 *)v65 + 43);
    if (v66)
      v64 = a2[v66] != 0;
    else
      v64 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 86, v64, 0);
  v67 = 0;
  v68 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v68 >= 0x55u)
  {
    v69 = *((unsigned __int16 *)v68 + 42);
    if (v69)
      v67 = a2[v69] != 0;
    else
      v67 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 84, v67, 0);
  v70 = 0;
  v71 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v71 >= 0x53u)
  {
    v72 = *((unsigned __int16 *)v71 + 41);
    if (v72)
      v70 = a2[v72] != 0;
    else
      v70 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 82, v70, 0);
  v73 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v73 >= 0x51u && (v74 = *((unsigned __int16 *)v73 + 40)) != 0)
    v75 = a2[v74];
  else
    v75 = 255;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 80, v75, 255);
  v76 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v76 >= 0x4Fu && (v77 = *((unsigned __int16 *)v76 + 39)) != 0)
  {
    v78 = a2[v77];
    if (v78 >= 8)
      goto LABEL_204;
  }
  else
  {
    v78 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 78, v78, 0);
  v79 = 0;
  v80 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v80 >= 0x4Du)
  {
    v81 = *((unsigned __int16 *)v80 + 38);
    if (v81)
      v79 = a2[v81] != 0;
    else
      v79 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 76, v79, 0);
  v82 = 0;
  v83 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v83 >= 0x4Bu)
  {
    v84 = *((unsigned __int16 *)v83 + 37);
    if (v84)
    {
      v82 = a2[v84];
      if (v82 >= 0x10)
        goto LABEL_204;
    }
    else
    {
      v82 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 74, v82, 0);
  v85 = 0;
  v86 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v86 >= 0x49u)
  {
    v87 = *((unsigned __int16 *)v86 + 36);
    if (v87)
      v85 = a2[v87] != 0;
    else
      v85 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 72, v85, 0);
  v88 = 0;
  v89 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v89 >= 0x47u)
  {
    v90 = *((unsigned __int16 *)v89 + 35);
    if (v90)
    {
      v88 = a2[v90];
      if (v88 >= 3)
LABEL_204:
        abort();
    }
    else
    {
      v88 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 70, v88, 0);
  v91 = 0;
  v92 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v92 >= 0x45u)
  {
    v93 = *((unsigned __int16 *)v92 + 34);
    if (v93)
      v91 = a2[v93] != 0;
    else
      v91 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 68, v91, 0);
  v94 = 0;
  v95 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v95 >= 0x43u)
  {
    v96 = *((unsigned __int16 *)v95 + 33);
    if (v96)
      v94 = a2[v96] != 0;
    else
      v94 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 66, v94, 0);
  v97 = 0;
  v98 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v98 >= 0x41u)
  {
    v99 = *((unsigned __int16 *)v98 + 32);
    if (v99)
      v97 = a2[v99] != 0;
    else
      v97 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 64, v97, 0);
  v100 = 0;
  v101 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v101 >= 0x3Fu)
  {
    v102 = *((unsigned __int16 *)v101 + 31);
    if (v102)
      v100 = a2[v102] != 0;
    else
      v100 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 62, v100, 0);
  v103 = 0;
  v104 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v104 >= 0x31u)
  {
    v105 = *((unsigned __int16 *)v104 + 24);
    if (v105)
      v103 = a2[v105] != 0;
    else
      v103 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 48, v103, 0);
  v106 = 0;
  v107 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v107 >= 0x27u)
  {
    v108 = *((unsigned __int16 *)v107 + 19);
    if (v108)
      v106 = a2[v108] != 0;
    else
      v106 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, v106, 0);
  v109 = 0;
  v110 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v110 >= 0x25u)
  {
    v111 = *((unsigned __int16 *)v110 + 18);
    if (v111)
      v109 = a2[v111] != 0;
    else
      v109 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, v109, 0);
  v112 = &a2[-*(int *)a2];
  v114 = *(unsigned __int16 *)v112 < 0x23u || (v113 = *((unsigned __int16 *)v112 + 17)) == 0 || a2[v113] != 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, v114, 1);
  v115 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v115 >= 0x21u && (v116 = *((unsigned __int16 *)v115 + 16)) != 0)
  {
    v117 = a2[v116];
    if (v117 >= 2)
      goto LABEL_204;
  }
  else
  {
    v117 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 32, v117, 0);
  v118 = 0;
  v119 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v119 >= 0xFu)
  {
    v120 = *((unsigned __int16 *)v119 + 7);
    if (v120)
      v118 = a2[v120] != 0;
    else
      v118 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, v118, 0);
  v121 = 0;
  v122 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v122 >= 0xDu)
  {
    v123 = *((unsigned __int16 *)v122 + 6);
    if (v123)
      v121 = a2[v123] != 0;
    else
      v121 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, v121, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v125 - (unsigned __int16)v126 + (unsigned __int16)v127);
}

void MTLMetalScriptBuilderImpl::makeFunctionString(uint64_t a1@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  std::string __p;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = objc_msgSend(a2, "bitCodeHash");
  v6 = *(_OWORD *)(v5 + 16);
  v9[0] = *(_OWORD *)v5;
  v9[1] = v6;
  HashToString((uint64_t)v9, &__p);
  v7 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((_QWORD *)(a1 + 88), (unint64_t *)v5);
  MTLMetalScriptBuilderImpl::makeFunctionString((uint64_t)(v7 + 9), a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1827101D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void HashToString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  unint64_t v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 0x40uLL);
  for (i = 0; i != 32; ++i)
  {
    v5 = *(unsigned __int8 *)(a1 + i);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 >> 4]);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 & 0xF]);
  }
}

{
  uint64_t i;
  unint64_t v5;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 0x40uLL);
  for (i = 0; i != 32; ++i)
  {
    v5 = *(unsigned __int8 *)(a1 + i);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 >> 4]);
    std::string::push_back(a2, HashToString(MTLUINT256_t)::hexChars[v5 & 0xF]);
  }
}

void sub_182710274(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::makeFunctionString(uint64_t a1@<X2>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string v10;
  std::string v11;

  std::operator+<char>();
  v4 = std::string::append(&v10, "#");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a1;
  else
    v7 = *(const std::string::value_type **)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::string::append(&v11, v7, v8);
  *a2 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_18271034C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::makeFunctionString(unsigned int *a1@<X2>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;

  if (a1)
  {
    std::operator+<char>();
    v4 = std::string::append(&v11, "#");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100](__p, a1 + 1, *a1);
    if ((v10 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v7 = v10;
    else
      v7 = (std::string::size_type)__p[1];
    v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
    *a2 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((char)v10 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_182710474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t MTLMetalScriptBuilderImpl::addLinkedFunction(MTLMetalScriptBuilderImpl *this, MTLLinkedFunctions *a2)
{
  NSArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  NSArray *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (-[NSArray count](-[MTLLinkedFunctions functions](a2, "functions"), "count")
    && (v4 = -[MTLLinkedFunctions functions](a2, "functions"),
        v15 = 0u,
        v16 = 0u,
        v17 = 0u,
        v18 = 0u,
        (v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16)) != 0))
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
LABEL_4:
    v8 = 0;
    while (1)
    {
      if (*(_QWORD *)v16 != v7)
        objc_enumerationMutation(v4);
      result = MTLMetalScriptBuilderImpl::addFunction((uint64_t)this, *(void **)(*((_QWORD *)&v15 + 1) + 8 * v8));
      if (!(_DWORD)result)
        break;
      if (v6 == ++v8)
      {
        v6 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v6)
          goto LABEL_4;
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    if (-[NSArray count](-[MTLLinkedFunctions privateFunctions](a2, "privateFunctions"), "count")
      && (v10 = -[MTLLinkedFunctions privateFunctions](a2, "privateFunctions"),
          v15 = 0u,
          v16 = 0u,
          v17 = 0u,
          v18 = 0u,
          (v11 = -[NSArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16)) != 0))
    {
      v12 = v11;
      v13 = *(_QWORD *)v16;
LABEL_13:
      v14 = 0;
      while (1)
      {
        if (*(_QWORD *)v16 != v13)
          objc_enumerationMutation(v10);
        result = MTLMetalScriptBuilderImpl::addFunction((uint64_t)this, *(void **)(*((_QWORD *)&v15 + 1) + 8 * v14));
        if (!(_DWORD)result)
          break;
        if (v12 == ++v14)
        {
          v12 = -[NSArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
          if (v12)
            goto LABEL_13;
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void MTLMetalScriptBuilderImpl::addComputePipelineWithDescriptor(NSObject **this, MTLComputePipelineDescriptor *a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *this;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl32addComputePipelineWithDescriptorEP28MTLComputePipelineDescriptor_block_invoke;
  v3[3] = &unk_1E0FE3128;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl32addComputePipelineWithDescriptorEP28MTLComputePipelineDescriptor_block_invoke(uint64_t a1)
{
  MTLMetalScriptBuilderImpl *v2;
  void *v3;

  v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  v3 = (void *)MEMORY[0x186DAC640]();
  if (objc_msgSend(*(id *)(a1 + 32), "computeFunction")
    && MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)objc_msgSend(*(id *)(a1 + 32), "linkedFunctions"))&& MTLMetalScriptBuilderImpl::addFunction((uint64_t)v2, (void *)objc_msgSend(*(id *)(a1 + 32), "computeFunction")))
  {
    MTLMetalScriptBuilderImpl::addComputePipeline(v2, *(MTLComputePipelineDescriptor **)(a1 + 32));
  }
  objc_autoreleasePoolPop(v3);
}

uint64_t MTLMetalScriptBuilderImpl::addFunction(uint64_t a1, void *a2)
{
  uint64_t v4;
  flatbuffers::FlatBufferBuilder *v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  _OWORD *v10;
  __int128 v11;
  _QWORD *v12;
  void *v13[2];
  uint64_t v14;
  std::string v15;
  void *__p[2];
  uint64_t v17;
  std::string v18;
  unint64_t *v19;
  _OWORD v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a2, "libraryData");
  if (!objc_msgSend(a2, "airScript"))
  {
    v5 = (flatbuffers::FlatBufferBuilder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 304))(v4);
    v6 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 296))(v4);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 264))(v4);
    MTLMetalScriptBuilderImpl::addLibraryData(a1, v5, v6, v7);
  }
  v8 = (unint64_t *)objc_msgSend(a2, "bitCodeHash");
  if (std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((_QWORD *)(a1 + 88), v8))
  {
    return 1;
  }
  if (objc_msgSend(a2, "specializationAirScript"))
    return MTLMetalScriptBuilderImpl::addFunctionWithDescriptorInternal(a1, a2, 0, 0);
  if (!objc_msgSend(a2, "stitchingAirScript"))
  {
    v10 = (_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 296))(v4);
    v11 = v10[1];
    v20[0] = *v10;
    v20[1] = v11;
    HashToString((uint64_t)v20, &v18);
    std::string::basic_string[abi:ne180100]<0>(v13, (char *)objc_msgSend((id)objc_msgSend(a2, "name"), "cStringUsingEncoding:", 4));
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v15, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      v15 = v18;
    *(_OWORD *)__p = *(_OWORD *)v13;
    v17 = v14;
    v13[1] = 0;
    v14 = 0;
    v13[0] = 0;
    v19 = v8;
    v12 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a1 + 88, v8, (uint64_t)&std::piecewise_construct, (_OWORD **)&v19);
    std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v12 + 6), (__int128 *)&v15);
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14) < 0)
      operator delete(v13[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    return 1;
  }
  return MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(a1, a2, 0, 0);
}

void sub_1827109B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addComputePipeline(MTLMetalScriptBuilderImpl *this, MTLComputePipelineDescriptor *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  char v8;
  int v9;
  int v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = -[MTLComputePipelineDescriptor _descriptorPrivate](a2, "_descriptorPrivate");
  v5 = operator new();
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)v5 = _MTLCreateComputePipelineScriptFromDescriptor(a2);
  v25 = (void *)v5;
  *(_QWORD *)(v5 + 8) = MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 8));
  v6 = (_OWORD *)objc_msgSend(*(id *)(v4 + 8), "bitCodeHash");
  v7 = v6[1];
  *(_OWORD *)(v5 + 32) = *v6;
  *(_OWORD *)(v5 + 48) = v7;
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)this + 8, (uint64_t *)&v25, &v25);
  if ((v8 & 1) == 0)
  {
    dispatch_release(*(dispatch_object_t *)v25);
    free(v25);
    return;
  }
  v26[0] = &off_1E0FE1EA8;
  v26[1] = this;
  v27 = v26;
  v9 = MTLMetalScriptSerializer::buildComputePipeline((uint64_t)this + 248, v4, (uint64_t)v26);
  v10 = v9;
  v11 = (char *)*((_QWORD *)this + 53);
  v12 = *((_QWORD *)this + 54);
  if ((unint64_t)v11 >= v12)
  {
    v14 = (char *)*((_QWORD *)this + 52);
    v15 = (v11 - v14) >> 2;
    if ((unint64_t)(v15 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v16 = v12 - (_QWORD)v14;
    v17 = (uint64_t)(v12 - (_QWORD)v14) >> 1;
    if (v17 <= v15 + 1)
      v17 = v15 + 1;
    if (v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 432, v18);
      v14 = (char *)*((_QWORD *)this + 52);
      v11 = (char *)*((_QWORD *)this + 53);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    v21 = &v19[4 * v18];
    *(_DWORD *)v20 = v10;
    v13 = v20 + 4;
    while (v11 != v14)
    {
      v22 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *((_QWORD *)this + 52) = v20;
    *((_QWORD *)this + 53) = v13;
    *((_QWORD *)this + 54) = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_DWORD *)v11 = v9;
    v13 = v11 + 4;
  }
  *((_QWORD *)this + 53) = v13;
  v23 = v27;
  if (v27 == v26)
  {
    v24 = 4;
    v23 = v26;
  }
  else
  {
    if (!v27)
      return;
    v24 = 5;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v24))(v23);
}

void sub_182710C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addRenderPipelineWithDescriptor(NSObject **this, MTLRenderPipelineDescriptor *a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *this;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl31addRenderPipelineWithDescriptorEP27MTLRenderPipelineDescriptor_block_invoke;
  v3[3] = &unk_1E0FE3128;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl31addRenderPipelineWithDescriptorEP27MTLRenderPipelineDescriptor_block_invoke(uint64_t a1)
{
  MTLMetalScriptBuilderImpl *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  v3 = (void *)MEMORY[0x186DAC640]();
  v4 = objc_msgSend(*(id *)(a1 + 32), "vertexFunction");
  v5 = *(void **)(a1 + 32);
  if (v4)
  {
    if (!MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)objc_msgSend(v5, "vertexLinkedFunctions")))goto LABEL_12;
    v6 = MTLMetalScriptBuilderImpl::addFunction((uint64_t)v2, (void *)objc_msgSend(*(id *)(a1 + 32), "vertexFunction"));
    if (!objc_msgSend(*(id *)(a1 + 32), "fragmentFunction"))
    {
      if (!v6)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  else
  {
    if (!objc_msgSend(v5, "fragmentFunction"))
    {
LABEL_11:
      MTLMetalScriptBuilderImpl::addRenderPipeline(v2, *(MTLRenderPipelineDescriptor **)(a1 + 32));
      goto LABEL_12;
    }
    v6 = 1;
  }
  if (MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)objc_msgSend(*(id *)(a1 + 32), "fragmentLinkedFunctions"))&& v6&& (MTLMetalScriptBuilderImpl::addFunction((uint64_t)v2, (void *)objc_msgSend(*(id *)(a1 + 32), "fragmentFunction")) & 1) != 0)
  {
    goto LABEL_11;
  }
LABEL_12:
  objc_autoreleasePoolPop(v3);
}

void MTLMetalScriptBuilderImpl::addRenderPipeline(MTLMetalScriptBuilderImpl *this, MTLRenderPipelineDescriptor *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _OWORD *v7;
  __int128 v8;
  void *v9;
  char v10;
  void *v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  void *v15;
  char v16;
  char v17;
  int v18;
  int v19;
  char *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  std::string v34;
  void *v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = -[MTLRenderPipelineDescriptor _descriptorPrivate](a2, "_descriptorPrivate");
  v5 = operator new();
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)v5 = _MTLCreateRenderPipelineScriptFromDescriptor(a2);
  v35 = (void *)v5;
  *(_QWORD *)(v5 + 8) = MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 256));
  *(_QWORD *)(v5 + 16) = MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 264));
  v6 = *(void **)(v4 + 256);
  if (v6)
  {
    v7 = (_OWORD *)objc_msgSend(v6, "bitCodeHash");
    v8 = v7[1];
    *(_OWORD *)(v5 + 32) = *v7;
    *(_OWORD *)(v5 + 48) = v8;
    MTLMetalScriptBuilderImpl::makeFunctionString((uint64_t)this, -[MTLRenderPipelineDescriptor vertexFunction](a2, "vertexFunction"), &v34);
    v9 = (void *)v34.__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = *(void **)(v4 + 264);
  if (v11)
  {
    v12 = v35;
    v13 = (_OWORD *)objc_msgSend(v11, "bitCodeHash");
    v14 = v13[1];
    v12[4] = *v13;
    v12[5] = v14;
    MTLMetalScriptBuilderImpl::makeFunctionString((uint64_t)this, -[MTLRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction"), &v34);
    v15 = (void *)v34.__r_.__value_.__r.__words[0];
    v16 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)this + 8, (uint64_t *)&v35, &v35);
  if ((v17 & 1) == 0)
  {
    dispatch_release(*(dispatch_object_t *)v35);
    free(v35);
    goto LABEL_30;
  }
  v36[0] = &off_1E0FE1E50;
  v36[1] = this;
  v37 = v36;
  v18 = MTLMetalScriptSerializer::buildRenderPipeline((MTLMetalScriptBuilderImpl *)((char *)this + 248), v4, (uint64_t)v36);
  v19 = v18;
  v20 = (char *)*((_QWORD *)this + 56);
  v21 = *((_QWORD *)this + 57);
  if ((unint64_t)v20 >= v21)
  {
    v23 = (char *)*((_QWORD *)this + 55);
    v24 = (v20 - v23) >> 2;
    if ((unint64_t)(v24 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v25 = v21 - (_QWORD)v23;
    v26 = (uint64_t)(v21 - (_QWORD)v23) >> 1;
    if (v26 <= v24 + 1)
      v26 = v24 + 1;
    if (v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 456, v27);
      v23 = (char *)*((_QWORD *)this + 55);
      v20 = (char *)*((_QWORD *)this + 56);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[4 * v24];
    v30 = &v28[4 * v27];
    *(_DWORD *)v29 = v19;
    v22 = v29 + 4;
    while (v20 != v23)
    {
      v31 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    *((_QWORD *)this + 55) = v29;
    *((_QWORD *)this + 56) = v22;
    *((_QWORD *)this + 57) = v30;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_DWORD *)v20 = v18;
    v22 = v20 + 4;
  }
  *((_QWORD *)this + 56) = v22;
  v32 = v37;
  if (v37 == v36)
  {
    v33 = 4;
    v32 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_30;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_30:
  if ((v16 & 0x80) == 0)
  {
    if ((v10 & 0x80) == 0)
      return;
LABEL_34:
    operator delete(v9);
    return;
  }
  operator delete(v15);
  if (v10 < 0)
    goto LABEL_34;
}

void sub_182711060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_1827110D0()
{
  char v0;

  if ((v0 & 0x80) == 0)
    JUMPOUT(0x1827110C8);
  JUMPOUT(0x1827110C0);
}

void MTLMetalScriptBuilderImpl::addMeshRenderPipelineWithDescriptor(NSObject **this, MTLMeshRenderPipelineDescriptor *a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *this;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl35addMeshRenderPipelineWithDescriptorEP31MTLMeshRenderPipelineDescriptor_block_invoke;
  v3[3] = &unk_1E0FE3128;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl35addMeshRenderPipelineWithDescriptorEP31MTLMeshRenderPipelineDescriptor_block_invoke(uint64_t a1)
{
  MTLMetalScriptBuilderImpl *v2;
  void *v3;
  int v4;
  void *v5;

  v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  v3 = (void *)MEMORY[0x186DAC640]();
  if (objc_msgSend(*(id *)(a1 + 32), "meshFunction"))
  {
    if (!MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)objc_msgSend(*(id *)(a1 + 32), "meshLinkedFunctions")))goto LABEL_18;
    v4 = MTLMetalScriptBuilderImpl::addFunction((uint64_t)v2, (void *)objc_msgSend(*(id *)(a1 + 32), "meshFunction"));
  }
  else
  {
    v4 = 1;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "fragmentFunction"))
  {
    if (!MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)objc_msgSend(*(id *)(a1 + 32), "fragmentLinkedFunctions")))goto LABEL_18;
    v5 = *(void **)(a1 + 32);
    if (!v4)
    {
      if (!objc_msgSend(v5, "objectFunction"))
        goto LABEL_18;
      v4 = 0;
      goto LABEL_14;
    }
    v4 = MTLMetalScriptBuilderImpl::addFunction((uint64_t)v2, (void *)objc_msgSend(v5, "fragmentFunction"));
  }
  if (!objc_msgSend(*(id *)(a1 + 32), "objectFunction"))
  {
    if (!v4)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_14:
  if (MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)objc_msgSend(*(id *)(a1 + 32), "objectLinkedFunctions"))&& v4&& (MTLMetalScriptBuilderImpl::addFunction((uint64_t)v2, (void *)objc_msgSend(*(id *)(a1 + 32), "objectFunction")) & 1) != 0)
  {
LABEL_17:
    MTLMetalScriptBuilderImpl::addMeshRenderPipeline(v2, *(MTLMeshRenderPipelineDescriptor **)(a1 + 32));
  }
LABEL_18:
  objc_autoreleasePoolPop(v3);
}

void MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMetalScriptBuilderImpl *this, MTLMeshRenderPipelineDescriptor *a2)
{
  const MTLMeshRenderPipelineDescriptorPrivate *v4;
  uint64_t v5;
  MTLFunction *meshFunction;
  _OWORD *v7;
  __int128 v8;
  void *v9;
  char v10;
  MTLFunction *fragmentFunction;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  void *v15;
  char v16;
  MTLFunction *objectFunction;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  void *v21;
  char v22;
  char v23;
  int v24;
  int v25;
  char *v26;
  unint64_t v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  std::string v40;
  void *v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = -[MTLMeshRenderPipelineDescriptor _descriptorPrivate](a2, "_descriptorPrivate");
  v5 = operator new();
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)v5 = _MTLCreateMeshRenderPipelineScriptFromDescriptor(a2);
  v41 = (void *)v5;
  *(_QWORD *)(v5 + 8) = MTLMetalScriptSerializer::HashFunction(v4->meshFunction);
  *(_QWORD *)(v5 + 16) = MTLMetalScriptSerializer::HashFunction(v4->fragmentFunction);
  *(_QWORD *)(v5 + 24) = MTLMetalScriptSerializer::HashFunction(v4->objectFunction);
  meshFunction = v4->meshFunction;
  if (meshFunction)
  {
    v7 = (_OWORD *)-[MTLFunction bitCodeHash](meshFunction, "bitCodeHash");
    v8 = v7[1];
    *(_OWORD *)(v5 + 32) = *v7;
    *(_OWORD *)(v5 + 48) = v8;
    MTLMetalScriptBuilderImpl::makeFunctionString((uint64_t)this, -[MTLMeshRenderPipelineDescriptor meshFunction](a2, "meshFunction"), &v40);
    v9 = (void *)v40.__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  fragmentFunction = v4->fragmentFunction;
  if (fragmentFunction)
  {
    v12 = v41;
    v13 = (_OWORD *)-[MTLFunction bitCodeHash](fragmentFunction, "bitCodeHash");
    v14 = v13[1];
    v12[4] = *v13;
    v12[5] = v14;
    MTLMetalScriptBuilderImpl::makeFunctionString((uint64_t)this, -[MTLMeshRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction"), &v40);
    v15 = (void *)v40.__r_.__value_.__r.__words[0];
    v16 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  objectFunction = v4->objectFunction;
  if (objectFunction)
  {
    v18 = v41;
    v19 = (_OWORD *)-[MTLFunction bitCodeHash](objectFunction, "bitCodeHash");
    v20 = v19[1];
    v18[6] = *v19;
    v18[7] = v20;
    MTLMetalScriptBuilderImpl::makeFunctionString((uint64_t)this, -[MTLMeshRenderPipelineDescriptor objectFunction](a2, "objectFunction"), &v40);
    v21 = (void *)v40.__r_.__value_.__r.__words[0];
    v22 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)this + 8, (uint64_t *)&v41, &v41);
  if ((v23 & 1) == 0)
  {
    dispatch_release(*(dispatch_object_t *)v41);
    free(v41);
    goto LABEL_33;
  }
  v42[0] = &off_1E0FE1F00;
  v42[1] = this;
  v43 = v42;
  v24 = MTLMetalScriptSerializer::buildMeshPipeline((MTLMetalScriptBuilderImpl *)((char *)this + 248), (uint64_t)v4, (uint64_t)v42);
  v25 = v24;
  v26 = (char *)*((_QWORD *)this + 71);
  v27 = *((_QWORD *)this + 72);
  if ((unint64_t)v26 >= v27)
  {
    v29 = (char *)*((_QWORD *)this + 70);
    v30 = (v26 - v29) >> 2;
    if ((unint64_t)(v30 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v31 = v27 - (_QWORD)v29;
    v32 = (uint64_t)(v27 - (_QWORD)v29) >> 1;
    if (v32 <= v30 + 1)
      v32 = v30 + 1;
    if (v31 >= 0x7FFFFFFFFFFFFFFCLL)
      v33 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v33 = v32;
    if (v33)
    {
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 576, v33);
      v26 = (char *)*((_QWORD *)this + 71);
      v29 = (char *)*((_QWORD *)this + 70);
    }
    else
    {
      v34 = 0;
    }
    v35 = &v34[4 * v30];
    v36 = &v34[4 * v33];
    *(_DWORD *)v35 = v25;
    v28 = v35 + 4;
    while (v26 != v29)
    {
      v37 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *((_DWORD *)v35 - 1) = v37;
      v35 -= 4;
    }
    *((_QWORD *)this + 70) = v35;
    *((_QWORD *)this + 71) = v28;
    *((_QWORD *)this + 72) = v36;
    if (v29)
      operator delete(v29);
  }
  else
  {
    *(_DWORD *)v26 = v24;
    v28 = v26 + 4;
  }
  *((_QWORD *)this + 71) = v28;
  v38 = v43;
  if (v43 == v42)
  {
    v39 = 4;
    v38 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_33;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_33:
  if (v22 < 0)
  {
    operator delete(v21);
    if ((v16 & 0x80) == 0)
    {
LABEL_35:
      if ((v10 & 0x80) == 0)
        return;
LABEL_39:
      operator delete(v9);
      return;
    }
  }
  else if ((v16 & 0x80) == 0)
  {
    goto LABEL_35;
  }
  operator delete(v15);
  if (v10 < 0)
    goto LABEL_39;
}

void sub_1827115A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addTileRenderPipelineWithDescriptor(NSObject **this, MTLTileRenderPipelineDescriptor *a2)
{
  NSObject *v2;
  _QWORD v3[6];

  v2 = *this;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl35addTileRenderPipelineWithDescriptorEP31MTLTileRenderPipelineDescriptor_block_invoke;
  v3[3] = &unk_1E0FE3128;
  v3[4] = a2;
  v3[5] = this;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl35addTileRenderPipelineWithDescriptorEP31MTLTileRenderPipelineDescriptor_block_invoke(uint64_t a1)
{
  MTLMetalScriptBuilderImpl *v2;
  void *v3;

  v2 = *(MTLMetalScriptBuilderImpl **)(a1 + 40);
  v3 = (void *)MEMORY[0x186DAC640]();
  if (objc_msgSend(*(id *)(a1 + 32), "tileFunction")
    && MTLMetalScriptBuilderImpl::addLinkedFunction(v2, (MTLLinkedFunctions *)objc_msgSend(*(id *)(a1 + 32), "linkedFunctions"))&& MTLMetalScriptBuilderImpl::addFunction((uint64_t)v2, (void *)objc_msgSend(*(id *)(a1 + 32), "tileFunction")))
  {
    MTLMetalScriptBuilderImpl::addTileRenderPipeline(v2, *(MTLTileRenderPipelineDescriptor **)(a1 + 32));
  }
  objc_autoreleasePoolPop(v3);
}

void MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLMetalScriptBuilderImpl *this, MTLTileRenderPipelineDescriptor *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  char v8;
  int v9;
  int v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = -[MTLTileRenderPipelineDescriptor _descriptorPrivate](a2, "_descriptorPrivate");
  v5 = operator new();
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)v5 = _MTLCreateTileRenderPipelineScriptFromDescriptor(a2);
  v25 = (void *)v5;
  *(_QWORD *)(v5 + 8) = MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 24));
  v6 = (_OWORD *)objc_msgSend(*(id *)(v4 + 24), "bitCodeHash");
  v7 = v6[1];
  *(_OWORD *)(v5 + 32) = *v6;
  *(_OWORD *)(v5 + 48) = v7;
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)this + 8, (uint64_t *)&v25, &v25);
  if ((v8 & 1) == 0)
  {
    dispatch_release(*(dispatch_object_t *)v25);
    free(v25);
    return;
  }
  v26[0] = &off_1E0FE1F58;
  v26[1] = this;
  v27 = v26;
  v9 = MTLMetalScriptSerializer::buildTileRenderPipeline((uint64_t)this + 248, v4, (uint64_t)v26);
  v10 = v9;
  v11 = (char *)*((_QWORD *)this + 59);
  v12 = *((_QWORD *)this + 60);
  if ((unint64_t)v11 >= v12)
  {
    v14 = (char *)*((_QWORD *)this + 58);
    v15 = (v11 - v14) >> 2;
    if ((unint64_t)(v15 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v16 = v12 - (_QWORD)v14;
    v17 = (uint64_t)(v12 - (_QWORD)v14) >> 1;
    if (v17 <= v15 + 1)
      v17 = v15 + 1;
    if (v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 480, v18);
      v14 = (char *)*((_QWORD *)this + 58);
      v11 = (char *)*((_QWORD *)this + 59);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    v21 = &v19[4 * v18];
    *(_DWORD *)v20 = v10;
    v13 = v20 + 4;
    while (v11 != v14)
    {
      v22 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *((_QWORD *)this + 58) = v20;
    *((_QWORD *)this + 59) = v13;
    *((_QWORD *)this + 60) = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_DWORD *)v11 = v9;
    v13 = v11 + 4;
  }
  *((_QWORD *)this + 59) = v13;
  v23 = v27;
  if (v27 == v26)
  {
    v24 = 4;
    v23 = v26;
  }
  else
  {
    if (!v27)
      return;
    v24 = 5;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v24))(v23);
}

void sub_182711934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addFunctionWithDescriptor(NSObject **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  _QWORD v5[8];

  v4 = *a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN25MTLMetalScriptBuilderImpl25addFunctionWithDescriptorEPU22objcproto11MTLFunction11objc_objectPU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke;
  v5[3] = &unk_1E0FE2DF8;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = a4;
  v5[7] = a1;
  dispatch_sync(v4, v5);
}

void ___ZN25MTLMetalScriptBuilderImpl25addFunctionWithDescriptorEPU22objcproto11MTLFunction11objc_objectPU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (void *)MEMORY[0x186DAC640]();
  MTLMetalScriptBuilderImpl::addFunctionWithDescriptorInternal(v2, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
  objc_autoreleasePoolPop(v3);
}

uint64_t MTLMetalScriptBuilderImpl::addFunctionWithDescriptorInternal(uint64_t a1, void *a2, void *a3, void *a4)
{
  NSObject *v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  flatbuffers::FlatBufferBuilder *v13;
  void *v14;
  _QWORD *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  Air::ConstantsSpecializationDescriptor *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  _BOOL4 v31;
  unsigned int *v32;
  unint64_t v33;
  CC_SHA256_CTX *p_c;
  int String;
  unint64_t v36;
  CC_SHA256_CTX *v37;
  int v38;
  int v39;
  std::string *v40;
  std::string *v41;
  std::string::size_type size;
  std::string *v43;
  __int128 v44;
  size_t v45;
  CC_SHA256_CTX *v46;
  char **v47;
  void **v48;
  std::string::size_type v49;
  std::string *v50;
  void *v51;
  char v52;
  char v53;
  unint64_t v54;
  const char *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _OWORD *v60;
  _QWORD *v61;
  char v62;
  void **v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  char *v72;
  unint64_t v73;
  _DWORD *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  unint64_t v82;
  _DWORD *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  int v98;
  char *v99;
  char *v100;
  int v101;
  int v103;
  int v104;
  char *v105;
  unsigned int *v106;
  char *v107[2];
  int64_t v108;
  CC_SHA256_CTX c;
  void *buffer_ptr;
  size_t size_ptr;
  std::string v112;
  void *__p[4];
  _OWORD *v114;
  _OWORD v115[2];
  std::string v116;
  __int128 __dst;
  __int128 v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v8 = objc_msgSend(a2, "specializationAirScript");
  v9 = objc_msgSend(a4, "options");
  v10 = v9;
  if (!v8 && (v9 & 1) == 0)
    return 0;
  memset(__p, 0, 24);
  if (!v8)
  {
    MTLMetalScriptBuilderImpl::addFunction(a1, a2);
    MTLMetalScriptBuilderImpl::makeFunctionString(a1, a2, (std::string *)&c);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)c.count;
    __p[2] = *(void **)&c.hash[2];
    if ((v10 & 1) == 0)
      goto LABEL_164;
    goto LABEL_122;
  }
  if (a3)
  {
    v12 = 0;
  }
  else
  {
    if (!a2)
      goto LABEL_22;
    v12 = objc_msgSend(a2, "specializedFunctionTrackingData");
    if (!v12)
      goto LABEL_22;
  }
  if (a4)
  {
    v13 = (flatbuffers::FlatBufferBuilder *)objc_msgSend(a4, "constantValues");
    if (a3)
    {
LABEL_9:
      v14 = (void *)objc_msgSend(a3, "newFunctionWithName:", objc_msgSend(a4, "name"));
      goto LABEL_19;
    }
  }
  else
  {
    v13 = *(flatbuffers::FlatBufferBuilder **)(v12 + 16);
    if (a3)
      goto LABEL_9;
  }
  v14 = *(void **)(v12 + 8);
LABEL_19:
  if (!MTLMetalScriptBuilderImpl::addFunction(a1, v14))
  {
LABEL_22:
    v11 = 0;
    goto LABEL_165;
  }
  *(_QWORD *)c.count = objc_msgSend(v14, "bitCodeHash");
  v15 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a1 + 88, *(unint64_t **)c.count, (uint64_t)&std::piecewise_construct, &c);
  if (*((char *)v15 + 71) < 0)
    std::string::__init_copy_ctor_external(&v112, (const std::string::value_type *)v15[6], v15[7]);
  else
    v112 = *(std::string *)((_BYTE *)v15 + 2);
  if (a3)

  buffer_ptr = 0;
  size_ptr = 0;
  v16 = dispatch_data_create_map(v8, (const void **)&buffer_ptr, &size_ptr);
  v17 = 1;
  if (v16 && size_ptr)
  {
    v18 = v16;
    v19 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
    v20 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v20 < 9u || (v21 = v20[4]) == 0)
    {
      dispatch_release(v16);
      goto LABEL_115;
    }
    v22 = (Air::ConstantsSpecializationDescriptor *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
    v23 = (unsigned __int16 *)((char *)v22 - *(int *)v22);
    v24 = *v23;
    if (v24 <= 4)
    {
      v25 = 0;
    }
    else
    {
      if (v23[2])
        v25 = (unsigned int *)((char *)v22 + v23[2] + *(unsigned int *)((char *)v22 + v23[2]));
      else
        v25 = 0;
      if (v24 >= 7)
      {
        v26 = v23[3];
        if (v26)
        {
          v27 = (char *)v22 + v26;
          v28 = *(unsigned int *)((char *)v22 + v26);
          std::string::basic_string[abi:ne180100](&c, v25 + 1, *v25);
          v105 = &v27[v28];
          v30 = *(_DWORD *)&v27[v28];
          v29 = &v27[v28 + 4];
          std::string::basic_string[abi:ne180100](&__dst, v29, v30);
          v31 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)&c, (unsigned __int8 *)&__dst);
          if (SBYTE7(v118) < 0)
            operator delete((void *)__dst);
          if (SHIBYTE(c.hash[3]) < 0)
            operator delete(*(void **)c.count);
          if (v31)
          {
            v32 = (unsigned int *)v105;
            std::string::basic_string[abi:ne180100](&c, v29, *(unsigned int *)v105);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            *(_OWORD *)__p = *(_OWORD *)c.count;
            __p[2] = *(void **)&c.hash[2];
            std::string::basic_string[abi:ne180100](&c, v29, *(unsigned int *)v105);
            if (SHIBYTE(c.hash[3]) < 0)
            {
              v33 = *(_QWORD *)c.hash;
              if (!*(_QWORD *)c.hash)
              {
                String = 0;
LABEL_174:
                operator delete(*(void **)c.count);
                goto LABEL_51;
              }
              p_c = *(CC_SHA256_CTX **)c.count;
            }
            else
            {
              v33 = HIBYTE(c.hash[3]);
              if (!HIBYTE(c.hash[3]))
              {
                String = 0;
                goto LABEL_51;
              }
              p_c = &c;
            }
            String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), (const char *)p_c, v33);
            if ((SHIBYTE(c.hash[3]) & 0x80000000) == 0)
              goto LABEL_51;
            goto LABEL_174;
          }
        }
      }
    }
    std::string::basic_string[abi:ne180100](&c, v25 + 1, *v25);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    String = 0;
    *(_OWORD *)__p = *(_OWORD *)c.count;
    __p[2] = *(void **)&c.hash[2];
    v32 = v25;
LABEL_51:
    MTLMetalScriptBuilderImpl::makeFunctionString(v25, (std::string *)&c);
    if (SHIBYTE(c.hash[3]) < 0)
    {
      v36 = *(_QWORD *)c.hash;
      if (!*(_QWORD *)c.hash)
      {
        v38 = 0;
LABEL_60:
        operator delete(*(void **)c.count);
LABEL_61:
        v39 = MTLMetalScriptSerializer::addFunctionConstants((MTLMetalScriptSerializer *)(a1 + 248), v13, (MTLFunctionConstantValuesInternal *)v36);
        CC_SHA256_Init(&c);
        if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v112;
        else
          v40 = (std::string *)v112.__r_.__value_.__r.__words[0];
        CC_SHA256_Update(&c, v40, 0x40u);
        Air::ConstantsSpecializationDescriptor::HashImpl(v22, &c);
        flatbuffers::SignatureBuilder::Create(&c, (unsigned __int8 **)v107);
        v106 = v32;
        __dst = *(_OWORD *)v107[0];
        v118 = *((_OWORD *)v107[0] + 1);
        v107[1] = v107[0];
        operator delete(v107[0]);
        std::string::basic_string[abi:ne180100]<0>(&c, "SpecializedLib_");
        v115[0] = __dst;
        v115[1] = v118;
        HashToString((uint64_t)v115, &v116);
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v116;
        else
          v41 = (std::string *)v116.__r_.__value_.__r.__words[0];
        if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
        else
          size = v116.__r_.__value_.__l.__size_;
        v43 = std::string::append((std::string *)&c, (const std::string::value_type *)v41, size);
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v108 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)v107 = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
        if (SHIBYTE(c.hash[3]) < 0)
          operator delete(*(void **)c.count);
        if (v108 >= 0)
          v45 = HIBYTE(v108);
        else
          v45 = (size_t)v107[1];
        v46 = &c;
        std::string::basic_string[abi:ne180100]((uint64_t)&c, v45 + 1);
        v103 = v39;
        if ((c.hash[3] & 0x80000000) != 0)
          v46 = *(CC_SHA256_CTX **)c.count;
        if (v45)
        {
          if (v108 >= 0)
            v47 = v107;
          else
            v47 = (char **)v107[0];
          memmove(v46, v47, v45);
        }
        v104 = v38;
        *(_WORD *)((char *)v46->count + v45) = 35;
        if (SHIBYTE(__p[2]) >= 0)
          v48 = __p;
        else
          v48 = (void **)__p[0];
        if (SHIBYTE(__p[2]) >= 0)
          v49 = HIBYTE(__p[2]);
        else
          v49 = (std::string::size_type)__p[1];
        v50 = std::string::append((std::string *)&c, (const std::string::value_type *)v48, v49);
        v51 = (void *)v50->__r_.__value_.__r.__words[0];
        v116.__r_.__value_.__r.__words[0] = v50->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v116.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
        v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        __p[0] = v51;
        __p[1] = v116.__r_.__value_.__l.__data_;
        *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v116.__r_.__value_.__r.__words + 7);
        HIBYTE(__p[2]) = v52;
        if (SHIBYTE(c.hash[3]) < 0)
          operator delete(*(void **)c.count);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 168, (unsigned __int8 *)v107, (uint64_t)v107);
        if ((v53 & 1) == 0)
          goto LABEL_103;
        if (SHIBYTE(v108) < 0)
        {
          v54 = (unint64_t)v107[1];
          if (v107[1])
          {
            v55 = v107[0];
            goto LABEL_100;
          }
        }
        else
        {
          v54 = HIBYTE(v108);
          if (HIBYTE(v108))
          {
            v55 = (const char *)v107;
LABEL_100:
            v56 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), v55, v54);
LABEL_102:
            *(_BYTE *)(a1 + 318) = 1;
            v57 = *(_DWORD *)(a1 + 280);
            v58 = *(_DWORD *)(a1 + 296);
            v59 = *(_DWORD *)(a1 + 288);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 4, v56);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 6, v104);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 8, String);
            flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 12, v103);
            c.count[0] = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 248), (unsigned __int16)v57 - (unsigned __int16)v58 + v59);
            std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100](a1 + 368, &c);
LABEL_103:
            v60 = (_OWORD *)objc_msgSend(a2, "bitCodeHash");
            std::string::basic_string[abi:ne180100](&v116, v106 + 1, *v106);
            if (SHIBYTE(v108) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&c, v107[0], (std::string::size_type)v107[1]);
            }
            else
            {
              *(_OWORD *)c.count = *(_OWORD *)v107;
              *(_QWORD *)&c.hash[2] = v108;
            }
            *(std::string *)&c.hash[4] = v116;
            memset(&v116, 0, sizeof(v116));
            v114 = v60;
            v61 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a1 + 88, (unint64_t *)v60, (uint64_t)&std::piecewise_construct, &v114);
            std::pair<std::string,std::string>::operator=[abi:ne180100]((uint64_t)(v61 + 6), (__int128 *)&c);
            if (SHIBYTE(c.wbuf[1]) < 0)
              operator delete(*(void **)&c.hash[4]);
            if (SHIBYTE(c.hash[3]) < 0)
              operator delete(*(void **)c.count);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v116.__r_.__value_.__l.__data_);
            dispatch_release(v18);
            if (SHIBYTE(v108) < 0)
              operator delete(v107[0]);
            v17 = 0;
            goto LABEL_115;
          }
        }
        v56 = 0;
        goto LABEL_102;
      }
      v37 = *(CC_SHA256_CTX **)c.count;
    }
    else
    {
      v36 = HIBYTE(c.hash[3]);
      if (!HIBYTE(c.hash[3]))
      {
        v38 = 0;
        goto LABEL_61;
      }
      v37 = &c;
    }
    v38 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), (const char *)v37, v36);
    if ((SHIBYTE(c.hash[3]) & 0x80000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
LABEL_115:
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  if ((v10 & 1) != 0)
    v62 = v17;
  else
    v62 = 1;
  if ((v62 & 1) != 0)
  {
    v11 = v17 ^ 1u;
    goto LABEL_165;
  }
LABEL_122:
  if (SHIBYTE(__p[2]) >= 0)
    v63 = __p;
  else
    v63 = (void **)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v64 = HIBYTE(__p[2]);
  else
    v64 = (unint64_t)__p[1];
  v65 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), (const char *)v63, v64);
  if (objc_msgSend(a2, "functionType") == 5)
  {
    v66 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), "supportsFamily(apple6) || supportsFamily(mac2)", 0x2EuLL);
    *(_BYTE *)(a1 + 318) = 1;
    v67 = *(_DWORD *)(a1 + 280);
    v68 = *(_DWORD *)(a1 + 296);
    v69 = *(_DWORD *)(a1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 6, v65);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 4, v66);
    v70 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 248), (unsigned __int16)v67 - (unsigned __int16)v68 + v69);
    v71 = v70;
    v72 = *(char **)(a1 + 496);
    v73 = *(_QWORD *)(a1 + 504);
    if ((unint64_t)v72 >= v73)
    {
      v84 = *(char **)(a1 + 488);
      v85 = (v72 - v84) >> 2;
      if ((unint64_t)(v85 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v86 = v73 - (_QWORD)v84;
      v87 = (uint64_t)(v73 - (_QWORD)v84) >> 1;
      if (v87 <= v85 + 1)
        v87 = v85 + 1;
      if (v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v88 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v88 = v87;
      if (v88)
      {
        v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 504, v88);
        v84 = *(char **)(a1 + 488);
        v72 = *(char **)(a1 + 496);
      }
      else
      {
        v89 = 0;
      }
      v96 = &v89[4 * v85];
      v97 = &v89[4 * v88];
      *(_DWORD *)v96 = v71;
      v74 = v96 + 4;
      while (v72 != v84)
      {
        v98 = *((_DWORD *)v72 - 1);
        v72 -= 4;
        *((_DWORD *)v96 - 1) = v98;
        v96 -= 4;
      }
      *(_QWORD *)(a1 + 488) = v96;
      *(_QWORD *)(a1 + 496) = v74;
      *(_QWORD *)(a1 + 504) = v97;
      if (v84)
        operator delete(v84);
    }
    else
    {
      *(_DWORD *)v72 = v70;
      v74 = v72 + 4;
    }
    *(_QWORD *)(a1 + 496) = v74;
  }
  else if (objc_msgSend(a2, "functionType") == 6)
  {
    v75 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(a1 + 248), "supportsFamily(apple6) || supportsFamily(mac2)", 0x2EuLL);
    *(_BYTE *)(a1 + 318) = 1;
    v76 = *(_DWORD *)(a1 + 280);
    v77 = *(_DWORD *)(a1 + 296);
    v78 = *(_DWORD *)(a1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 6, v65);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 248), 4, v75);
    v79 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 248), (unsigned __int16)v76 - (unsigned __int16)v77 + v78);
    v80 = v79;
    v81 = *(char **)(a1 + 520);
    v82 = *(_QWORD *)(a1 + 528);
    if ((unint64_t)v81 >= v82)
    {
      v90 = *(char **)(a1 + 512);
      v91 = (v81 - v90) >> 2;
      if ((unint64_t)(v91 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v92 = v82 - (_QWORD)v90;
      v93 = (uint64_t)(v82 - (_QWORD)v90) >> 1;
      if (v93 <= v91 + 1)
        v93 = v91 + 1;
      if (v92 >= 0x7FFFFFFFFFFFFFFCLL)
        v94 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v94 = v93;
      if (v94)
      {
        v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 528, v94);
        v81 = *(char **)(a1 + 520);
        v90 = *(char **)(a1 + 512);
      }
      else
      {
        v95 = 0;
      }
      v99 = &v95[4 * v91];
      v100 = &v95[4 * v94];
      *(_DWORD *)v99 = v80;
      v83 = v99 + 4;
      while (v81 != v90)
      {
        v101 = *((_DWORD *)v81 - 1);
        v81 -= 4;
        *((_DWORD *)v99 - 1) = v101;
        v99 -= 4;
      }
      *(_QWORD *)(a1 + 512) = v99;
      *(_QWORD *)(a1 + 520) = v83;
      *(_QWORD *)(a1 + 528) = v100;
      if (v90)
        operator delete(v90);
    }
    else
    {
      *(_DWORD *)v81 = v79;
      v83 = v81 + 4;
    }
    *(_QWORD *)(a1 + 520) = v83;
  }
LABEL_164:
  v11 = 1;
LABEL_165:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_182712464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a25 < 0)
    operator delete(__p);
  if (a44 < 0)
    operator delete(a39);
  if (a51 < 0)
    operator delete(a46);
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addLibraryWithDescriptor(NSObject **a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD block[7];

  v3 = *a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN25MTLMetalScriptBuilderImpl24addLibraryWithDescriptorEPU21objcproto10MTLLibrary11objc_objectP28MTLStitchedLibraryDescriptor_block_invoke;
  block[3] = &unk_1E0FE2C68;
  block[5] = a3;
  block[6] = a1;
  block[4] = a2;
  dispatch_sync(v3, block);
}

void ___ZN25MTLMetalScriptBuilderImpl24addLibraryWithDescriptorEPU21objcproto10MTLLibrary11objc_objectP28MTLStitchedLibraryDescriptor_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = (void *)MEMORY[0x186DAC640]();
  MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(v2, 0, *(void **)(a1 + 32), *(void **)(a1 + 40));
  objc_autoreleasePoolPop(v3);
}

uint64_t MTLMetalScriptBuilderImpl::addLibraryWithDescriptorInternal(uint64_t a1, void *a2, void *a3)
{
  return MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(a1, 0, a2, a3);
}

void MTLMetalScriptBuilderImpl::addLibrary(uint64_t a1, flatbuffers::FlatBufferBuilder *a2, const char *a3)
{
  MTLMetalScriptSerializer *v5;
  int v6;
  NSString *v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;

  v5 = (MTLMetalScriptSerializer *)(a1 + 248);
  v6 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 248), a3);
  LODWORD(a2) = MTLMetalScriptSerializer::addString(v5, a2, v7);
  *(_BYTE *)(a1 + 318) = 1;
  v8 = *(_DWORD *)(a1 + 280) - *(_DWORD *)(a1 + 296) + *(_DWORD *)(a1 + 288);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v5, 4, v6);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v5, 6, (int)a2);
  v9 = flatbuffers::FlatBufferBuilder::EndTable(v5, v8);
  v10 = v9;
  v11 = *(char **)(a1 + 352);
  v12 = *(_QWORD *)(a1 + 360);
  if ((unint64_t)v11 >= v12)
  {
    v14 = *(char **)(a1 + 344);
    v15 = (v11 - v14) >> 2;
    if ((unint64_t)(v15 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v16 = v12 - (_QWORD)v14;
    v17 = (uint64_t)(v12 - (_QWORD)v14) >> 1;
    if (v17 <= v15 + 1)
      v17 = v15 + 1;
    if (v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 360, v18);
      v14 = *(char **)(a1 + 344);
      v11 = *(char **)(a1 + 352);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    v21 = &v19[4 * v18];
    *(_DWORD *)v20 = v10;
    v13 = v20 + 4;
    while (v11 != v14)
    {
      v22 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v22;
      v20 -= 4;
    }
    *(_QWORD *)(a1 + 344) = v20;
    *(_QWORD *)(a1 + 352) = v13;
    *(_QWORD *)(a1 + 360) = v21;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_DWORD *)v11 = v9;
    v13 = v11 + 4;
  }
  *(_QWORD *)(a1 + 352) = v13;
}

void MTLMetalScriptBuilderImpl::addLibraryData(uint64_t a1, flatbuffers::FlatBufferBuilder *a2, _OWORD *a3, int a4)
{
  __int128 v7;
  const char *v8;
  std::string *p_p;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  __int128 v12;
  uint64_t v13;
  std::string __p;
  std::string *v15;
  _OWORD v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v7 = a3[1];
  v16[0] = *a3;
  v16[1] = v7;
  HashToString((uint64_t)v16, &__p);
  if (!a2)
  {
    v8 = "data";
    if (a4)
      v8 = "source";
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    a2 = (flatbuffers::FlatBufferBuilder *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("_Path_not_available_for_lib_from_%s_with_UUID_%s"), v8, p_p);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)&__p))
  {
    MTLMetalScriptBuilderImpl::addLibrary(a1, a2, (const char *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)-[flatbuffers::FlatBufferBuilder cStringUsingEncoding:](a2, "cStringUsingEncoding:", 4));
    v15 = &__p;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 48, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v15);
    v11 = v10 + 40;
    if ((char)v10[63] < 0)
      operator delete(*(void **)v11);
    *(_OWORD *)v11 = v12;
    *((_QWORD *)v11 + 2) = v13;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1827128E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void MTLMetalScriptBuilderImpl::addLibraryData(MTLMetalScriptBuilderImpl *this, MTLLibraryData *a2)
{
  flatbuffers::FlatBufferBuilder *v4;
  _OWORD *v5;
  int v6;

  v4 = (flatbuffers::FlatBufferBuilder *)(*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)a2 + 304))(a2);
  v5 = (_OWORD *)(*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)a2 + 296))(a2);
  v6 = (*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)a2 + 264))(a2);
  MTLMetalScriptBuilderImpl::addLibraryData((uint64_t)this, v4, v5, v6);
}

uint64_t MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  flatbuffers::FlatBufferBuilder *v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  unint64_t v16;
  CC_SHA256_CTX *p_c;
  int String;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t **v31;
  unint64_t **v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t **v37;
  unint64_t **v38;
  unint64_t **v39;
  unint64_t *v40;
  void *v41;
  MTLFunctionStitchingGraph *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t j;
  int Graph;
  int v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  char *v58;
  char *v59;
  int64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  int64_t *v66;
  int64_t v67;
  uint64_t v68;
  NSObject **v69;
  NSObject **v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *map;
  int *v75;
  unsigned __int16 *v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  int v81;
  int v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  char *v93;
  char *v94;
  int64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  int64_t *v101;
  int64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  const void **v107;
  unint64_t **v108;
  char *v109;
  char *v110;
  void *v111;
  std::string *v112;
  std::string::size_type size;
  std::string *v114;
  __int128 v115;
  char v116;
  unint64_t v117;
  void **v118;
  int v119;
  void *v120;
  int v121;
  void *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  char *v129;
  unint64_t v130;
  _DWORD *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  int v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t k;
  void *v145;
  unint64_t *v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t *v149;
  uint64_t v150;
  _QWORD *v151;
  void *v153;
  void *v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  std::string v162;
  void *buffer_ptr[2];
  std::string::size_type v164;
  CC_SHA256_CTX c;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  void *v170;
  char *v171;
  unint64_t v172;
  void *v173;
  char *v174;
  char *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  void *__p;
  char *v181;
  char *v182;
  void *v183;
  unint64_t **v184;
  unint64_t v185;
  _BYTE v186[128];
  _OWORD v187[2];
  size_t size_ptr[2];
  __int128 v189;
  _BYTE v190[128];
  _BYTE v191[128];
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    if (!a2)
      return 0;
    v8 = objc_msgSend(a2, "stitchedLibraryTrackingData");
    if (!v8)
      return 0;
    v183 = 0;
    v184 = 0;
    v185 = 0;
    __p = 0;
    v181 = 0;
    v182 = 0;
    goto LABEL_7;
  }
  v8 = 0;
  v183 = 0;
  v184 = 0;
  v185 = 0;
  __p = 0;
  v181 = 0;
  v182 = 0;
  if (a2)
  {
LABEL_7:
    v10 = a3;
    v155 = v8;
    v9 = *(void **)(v8 + 8);
    goto LABEL_8;
  }
  v9 = (void *)objc_msgSend(a4, "functions");
  v10 = a3;
  v155 = 0;
LABEL_8:
  v156 = a4;
  v154 = a2;
  v178 = 0u;
  v179 = 0u;
  v176 = 0u;
  v177 = 0u;
  v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v176, v191, 16);
  v157 = a1;
  if (!v11)
    goto LABEL_57;
  v12 = (flatbuffers::FlatBufferBuilder *)(a1 + 248);
  v13 = *(_QWORD *)v177;
  while (2)
  {
    for (i = 0; i != v11; ++i)
    {
      if (*(_QWORD *)v177 != v13)
        objc_enumerationMutation(v9);
      v15 = *(void **)(*((_QWORD *)&v176 + 1) + 8 * i);
      if ((MTLMetalScriptBuilderImpl::addFunction(v157, v15) & 1) == 0)
      {
        v68 = 0;
        goto LABEL_230;
      }
      MTLMetalScriptBuilderImpl::makeFunctionString(v157, v15, (std::string *)&c);
      if (SHIBYTE(c.hash[3]) < 0)
      {
        v16 = *(_QWORD *)c.hash;
        if (*(_QWORD *)c.hash)
        {
          p_c = *(CC_SHA256_CTX **)c.count;
          goto LABEL_19;
        }
      }
      else
      {
        v16 = HIBYTE(c.hash[3]);
        if (HIBYTE(c.hash[3]))
        {
          p_c = &c;
LABEL_19:
          String = flatbuffers::FlatBufferBuilder::CreateString(v12, (const char *)p_c, v16);
          goto LABEL_21;
        }
      }
      String = 0;
LABEL_21:
      v19 = v181;
      if (v181 >= v182)
      {
        v21 = (char *)__p;
        v22 = (v181 - (_BYTE *)__p) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v24 = v182 - (_BYTE *)__p;
        if ((v182 - (_BYTE *)__p) >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v182, v25);
          v21 = (char *)__p;
          v19 = v181;
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = String;
        v20 = v27 + 4;
        while (v19 != v21)
        {
          v28 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        __p = v27;
        v181 = v20;
        v182 = &v26[4 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_DWORD *)v181 = String;
        v20 = v19 + 4;
      }
      v181 = v20;
      if (SHIBYTE(c.hash[3]) < 0)
        operator delete(*(void **)c.count);
      v29 = (unint64_t *)objc_msgSend(v15, "bitCodeHash");
      v30 = v29;
      v31 = v184;
      if ((unint64_t)v184 >= v185)
      {
        v33 = ((char *)v184 - (_BYTE *)v183) >> 3;
        if ((unint64_t)(v33 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v34 = (uint64_t)(v185 - (_QWORD)v183) >> 2;
        if (v34 <= v33 + 1)
          v34 = v33 + 1;
        if (v185 - (unint64_t)v183 >= 0x7FFFFFFFFFFFFFF8)
          v35 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v185, v35);
        else
          v36 = 0;
        v37 = (unint64_t **)&v36[8 * v33];
        *v37 = v30;
        v32 = v37 + 1;
        v39 = (unint64_t **)v183;
        v38 = v184;
        if (v184 != v183)
        {
          do
          {
            v40 = *--v38;
            *--v37 = v40;
          }
          while (v38 != v39);
          v38 = (unint64_t **)v183;
        }
        v183 = v37;
        v184 = v32;
        v185 = (unint64_t)&v36[8 * v35];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v184 = v29;
        v32 = v31 + 1;
      }
      v184 = v32;
    }
    v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v176, v191, 16);
    a1 = v157;
    if (v11)
      continue;
    break;
  }
LABEL_57:
  v173 = 0;
  v174 = 0;
  v175 = 0;
  v170 = 0;
  v171 = 0;
  v172 = 0;
  v153 = v10;
  if (v10)
  {
    v168 = 0u;
    v169 = 0u;
    v166 = 0u;
    v167 = 0u;
    v41 = (void *)objc_msgSend(v156, "functionGraphs");
    v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v166, v190, 16);
    if (v43)
    {
      v44 = *(_QWORD *)v167;
      do
      {
        for (j = 0; j != v43; ++j)
        {
          if (*(_QWORD *)v167 != v44)
            objc_enumerationMutation(v41);
          Graph = MTLMetalScriptSerializer::createGraph((MTLMetalScriptSerializer *)(v157 + 248), *(MTLFunctionStitchingGraph **)(*((_QWORD *)&v166 + 1) + 8 * j), v42);
          v47 = Graph;
          v48 = v174;
          if (v174 >= v175)
          {
            v50 = (char *)v173;
            v51 = (v174 - (_BYTE *)v173) >> 2;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v53 = v175 - (_BYTE *)v173;
            if ((v175 - (_BYTE *)v173) >> 1 > v52)
              v52 = v53 >> 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
              v54 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            if (v54)
            {
              v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v175, v54);
              v50 = (char *)v173;
              v48 = v174;
            }
            else
            {
              v55 = 0;
            }
            v56 = &v55[4 * v51];
            *(_DWORD *)v56 = v47;
            v49 = v56 + 4;
            while (v48 != v50)
            {
              v57 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              *((_DWORD *)v56 - 1) = v57;
              v56 -= 4;
            }
            v173 = v56;
            v174 = v49;
            v175 = &v55[4 * v54];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *(_DWORD *)v174 = Graph;
            v49 = v48 + 4;
          }
          v174 = v49;
          v58 = (char *)v170;
          v59 = v171;
          v60 = (v171 - (_BYTE *)v170) >> 3;
          if ((unint64_t)v171 >= v172)
          {
            v62 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v63 = v172 - (_QWORD)v170;
            if ((uint64_t)(v172 - (_QWORD)v170) >> 2 > v62)
              v62 = v63 >> 2;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
              v64 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v172, v64);
              v58 = (char *)v170;
              v59 = v171;
            }
            else
            {
              v65 = 0;
            }
            v66 = (int64_t *)&v65[8 * v60];
            *v66 = v60;
            v61 = v66 + 1;
            while (v59 != v58)
            {
              v67 = *((_QWORD *)v59 - 1);
              v59 -= 8;
              *--v66 = v67;
            }
            v170 = v66;
            v171 = (char *)v61;
            v172 = (unint64_t)&v65[8 * v64];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *(_QWORD *)v171 = v60;
            v61 = (uint64_t *)(v59 + 8);
          }
          v171 = (char *)v61;
        }
        v43 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v166, v190, 16);
      }
      while (v43);
    }
    goto LABEL_148;
  }
  memset(&c, 0, 24);
  std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__init_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(&c, *(const void **)(v155 + 16), *(_QWORD *)(v155 + 24), (uint64_t)(*(_QWORD *)(v155 + 24) - *(_QWORD *)(v155 + 16)) >> 3);
  v70 = *(NSObject ***)c.count;
  v69 = *(NSObject ***)c.hash;
  if (*(_QWORD *)c.count != *(_QWORD *)c.hash)
  {
    v71 = a1 + 248;
    while (1)
    {
      v72 = *v70;
      size_ptr[0] = 0;
      buffer_ptr[0] = 0;
      map = dispatch_data_create_map(v72, (const void **)buffer_ptr, size_ptr);
      if (!map || size_ptr[0] == 0)
        break;
      v75 = (int *)((char *)buffer_ptr[0] + *(unsigned int *)buffer_ptr[0]);
      v76 = (unsigned __int16 *)((char *)v75 - *v75);
      if (*v76 >= 9u && (v77 = v76[4]) != 0)
        v78 = (char *)v75 + v77 + *(unsigned int *)((char *)v75 + v77);
      else
        v78 = 0;
      v79 = &v78[-*(int *)v78];
      if (*(unsigned __int16 *)v79 < 7u || (v80 = *((unsigned __int16 *)v79 + 3)) == 0)
      {
        dispatch_release(map);
        break;
      }
      v81 = Mtl::FunctionStitching::CloneGraph<Air::FunctionStitching::Graph>(v71, &v78[v80 + *(unsigned int *)&v78[v80]]);
      v82 = v81;
      v83 = v174;
      if (v174 >= v175)
      {
        v85 = (char *)v173;
        v86 = (v174 - (_BYTE *)v173) >> 2;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v88 = v175 - (_BYTE *)v173;
        if ((v175 - (_BYTE *)v173) >> 1 > v87)
          v87 = v88 >> 1;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
          v89 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v175, v89);
          v85 = (char *)v173;
          v83 = v174;
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[4 * v86];
        *(_DWORD *)v91 = v82;
        v84 = v91 + 4;
        while (v83 != v85)
        {
          v92 = *((_DWORD *)v83 - 1);
          v83 -= 4;
          *((_DWORD *)v91 - 1) = v92;
          v91 -= 4;
        }
        v173 = v91;
        v174 = v84;
        v175 = &v90[4 * v89];
        if (v85)
          operator delete(v85);
      }
      else
      {
        *(_DWORD *)v174 = v81;
        v84 = v83 + 4;
      }
      v174 = v84;
      v93 = (char *)v170;
      v94 = v171;
      v95 = (v171 - (_BYTE *)v170) >> 3;
      if ((unint64_t)v171 >= v172)
      {
        v97 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v98 = v172 - (_QWORD)v170;
        if ((uint64_t)(v172 - (_QWORD)v170) >> 2 > v97)
          v97 = v98 >> 2;
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
          v99 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v99 = v97;
        if (v99)
        {
          v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v172, v99);
          v93 = (char *)v170;
          v94 = v171;
        }
        else
        {
          v100 = 0;
        }
        v101 = (int64_t *)&v100[8 * v95];
        *v101 = v95;
        v96 = v101 + 1;
        while (v94 != v93)
        {
          v102 = *((_QWORD *)v94 - 1);
          v94 -= 8;
          *--v101 = v102;
        }
        v170 = v101;
        v171 = (char *)v96;
        v172 = (unint64_t)&v100[8 * v99];
        if (v93)
          operator delete(v93);
      }
      else
      {
        *(_QWORD *)v171 = v95;
        v96 = (uint64_t *)(v94 + 8);
      }
      v171 = (char *)v96;
      if (++v70 == v69)
      {
        v70 = *(NSObject ***)c.count;
        goto LABEL_146;
      }
    }
    if (*(_QWORD *)c.count)
    {
      *(_QWORD *)c.hash = *(_QWORD *)c.count;
      operator delete(*(void **)c.count);
    }
    v68 = 0;
    goto LABEL_226;
  }
LABEL_146:
  if (v70)
  {
    *(_QWORD *)c.hash = v70;
    operator delete(v70);
  }
LABEL_148:
  v103 = 126 - 2 * __clz(((char *)v184 - (_BYTE *)v183) >> 3);
  if (v184 == v183)
    v104 = 0;
  else
    v104 = v103;
  std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**,false>((unint64_t **)v183, v184, v104, 1);
  v105 = 126 - 2 * __clz((v171 - (_BYTE *)v170) >> 3);
  *(_QWORD *)c.count = v157;
  *(_QWORD *)c.hash = &v173;
  if (v171 == v170)
    v106 = 0;
  else
    v106 = v105;
  std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,false>((uint64_t)v170, (uint64_t *)v171, &c, v106, 1);
  CC_SHA256_Init(&c);
  v107 = (const void **)v183;
  v108 = v184;
  while (v107 != (const void **)v108)
    CC_SHA256_Update(&c, *v107++, 0x20u);
  v109 = (char *)v170;
  v110 = v171;
  v111 = v153;
  if (v170 != v171)
  {
    do
    {
      Mtl::FunctionStitching::Graph::HashImpl((Mtl::FunctionStitching::Graph *)(*(_QWORD *)(v157 + 296)+ *(_DWORD *)(v157 + 280)- *(_QWORD *)(v157 + 296)+ *(_DWORD *)(v157 + 288)- *((unsigned int *)v173 + *(_QWORD *)v109)), &c);
      v109 += 8;
    }
    while (v109 != v110);
  }
  flatbuffers::SignatureBuilder::Create(&c, (unsigned __int8 **)buffer_ptr);
  *(_OWORD *)size_ptr = *(_OWORD *)buffer_ptr[0];
  v189 = *((_OWORD *)buffer_ptr[0] + 1);
  buffer_ptr[1] = buffer_ptr[0];
  operator delete(buffer_ptr[0]);
  std::string::basic_string[abi:ne180100]<0>(&c, "StitchedLib_");
  v187[0] = *(_OWORD *)size_ptr;
  v187[1] = v189;
  HashToString((uint64_t)v187, &v162);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v112 = &v162;
  else
    v112 = (std::string *)v162.__r_.__value_.__r.__words[0];
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v162.__r_.__value_.__r.__words[2]);
  else
    size = v162.__r_.__value_.__l.__size_;
  v114 = std::string::append((std::string *)&c, (const std::string::value_type *)v112, size);
  v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v164 = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)buffer_ptr = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (SHIBYTE(c.hash[3]) < 0)
    operator delete(*(void **)c.count);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v157 + 208, (unsigned __int8 *)buffer_ptr, (uint64_t)buffer_ptr);
  if ((v116 & 1) != 0)
  {
    if (SHIBYTE(v164) < 0)
    {
      v117 = (unint64_t)buffer_ptr[1];
      if (!buffer_ptr[1])
        goto LABEL_176;
      v118 = (void **)buffer_ptr[0];
LABEL_175:
      v119 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)(v157 + 248), (const char *)v118, v117);
    }
    else
    {
      v117 = HIBYTE(v164);
      if (HIBYTE(v164))
      {
        v118 = buffer_ptr;
        goto LABEL_175;
      }
LABEL_176:
      v119 = 0;
    }
    if (v181 == __p)
      v120 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
    else
      v120 = __p;
    v121 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v157 + 248), (uint64_t)v120, (v181 - (_BYTE *)__p) >> 2);
    if (v174 == v173)
      v122 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Graph>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>> const&)::t;
    else
      v122 = v173;
    v123 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v157 + 248), (uint64_t)v122, (v174 - (_BYTE *)v173) >> 2);
    *(_BYTE *)(v157 + 318) = 1;
    v124 = *(_DWORD *)(v157 + 280);
    v125 = *(_DWORD *)(v157 + 296);
    v126 = *(_DWORD *)(v157 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v157 + 248), 4, v119);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v157 + 248), 6, v121);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v157 + 248), 8, v123);
    v127 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v157 + 248), (unsigned __int16)v124 - (unsigned __int16)v125 + v126);
    v128 = v127;
    v129 = *(char **)(v157 + 400);
    v130 = *(_QWORD *)(v157 + 408);
    if ((unint64_t)v129 >= v130)
    {
      v132 = *(char **)(v157 + 392);
      v133 = (v129 - v132) >> 2;
      if ((unint64_t)(v133 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v134 = v130 - (_QWORD)v132;
      v135 = (uint64_t)(v130 - (_QWORD)v132) >> 1;
      if (v135 <= v133 + 1)
        v135 = v133 + 1;
      if (v134 >= 0x7FFFFFFFFFFFFFFCLL)
        v136 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v136 = v135;
      if (v136)
      {
        v137 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v157 + 408, v136);
        v132 = *(char **)(v157 + 392);
        v129 = *(char **)(v157 + 400);
      }
      else
      {
        v137 = 0;
      }
      v138 = &v137[4 * v133];
      v139 = &v137[4 * v136];
      *(_DWORD *)v138 = v128;
      v131 = v138 + 4;
      while (v129 != v132)
      {
        v140 = *((_DWORD *)v129 - 1);
        v129 -= 4;
        *((_DWORD *)v138 - 1) = v140;
        v138 -= 4;
      }
      *(_QWORD *)(v157 + 392) = v138;
      *(_QWORD *)(v157 + 400) = v131;
      *(_QWORD *)(v157 + 408) = v139;
      if (v132)
        operator delete(v132);
    }
    else
    {
      *(_DWORD *)v129 = v127;
      v131 = v129 + 4;
    }
    *(_QWORD *)(v157 + 400) = v131;
  }
  if (v153)
  {
    v160 = 0u;
    v161 = 0u;
    v158 = 0u;
    v159 = 0u;
    v141 = (void *)objc_msgSend(v156, "functionGraphs");
    v142 = objc_msgSend(v141, "countByEnumeratingWithState:objects:count:", &v158, v186, 16);
    if (v142)
    {
      v143 = *(_QWORD *)v159;
      do
      {
        for (k = 0; k != v142; ++k)
        {
          if (*(_QWORD *)v159 != v143)
            objc_enumerationMutation(v141);
          v145 = (void *)objc_msgSend(v111, "newFunctionWithName:", objc_msgSend(*(id *)(*((_QWORD *)&v158 + 1) + 8 * k), "functionName", v153));
          v146 = (unint64_t *)objc_msgSend(v145, "bitCodeHash");
          v147 = objc_msgSend((id)objc_msgSend(v145, "name"), "UTF8String");
          if (SHIBYTE(v164) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&c, (const std::string::value_type *)buffer_ptr[0], (std::string::size_type)buffer_ptr[1]);
          }
          else
          {
            *(_OWORD *)c.count = *(_OWORD *)buffer_ptr;
            *(_QWORD *)&c.hash[2] = v164;
          }
          *(_QWORD *)&c.hash[4] = v147;
          v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v146;
          v148 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(v157 + 88, v146, (uint64_t)&std::piecewise_construct, &v162);
          std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>((uint64_t)(v148 + 6), (__int128 *)&c);
          if (SHIBYTE(c.hash[3]) < 0)
            operator delete(*(void **)c.count);

        }
        v142 = objc_msgSend(v141, "countByEnumeratingWithState:objects:count:", &v158, v186, 16);
      }
      while (v142);
    }
  }
  else
  {
    v149 = (unint64_t *)objc_msgSend(v154, "bitCodeHash");
    v150 = objc_msgSend((id)objc_msgSend(v154, "name"), "UTF8String");
    if (SHIBYTE(v164) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&c, (const std::string::value_type *)buffer_ptr[0], (std::string::size_type)buffer_ptr[1]);
    }
    else
    {
      *(_OWORD *)c.count = *(_OWORD *)buffer_ptr;
      *(_QWORD *)&c.hash[2] = v164;
    }
    *(_QWORD *)&c.hash[4] = v150;
    v162.__r_.__value_.__r.__words[0] = (std::string::size_type)v149;
    v151 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(v157 + 88, v149, (uint64_t)&std::piecewise_construct, &v162);
    std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>((uint64_t)(v151 + 6), (__int128 *)&c);
    if (SHIBYTE(c.hash[3]) < 0)
      operator delete(*(void **)c.count);
  }
  if (SHIBYTE(v164) < 0)
    operator delete(buffer_ptr[0]);
  v68 = 1;
LABEL_226:
  if (v170)
  {
    v171 = (char *)v170;
    operator delete(v170);
  }
  if (v173)
  {
    v174 = (char *)v173;
    operator delete(v173);
  }
LABEL_230:
  if (__p)
  {
    v181 = (char *)__p;
    operator delete(__p);
  }
  if (v183)
  {
    v184 = (unint64_t **)v183;
    operator delete(v183);
  }
  return v68;
}

void sub_1827136C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a71;
  void *a72;

  if (a32 < 0)
    operator delete(__p);
  if (a56)
    operator delete(a56);
  if (a59)
    operator delete(a59);
  if (a71)
    operator delete(a71);
  if (a72)
    operator delete(a72);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  return a1;
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

uint64_t Air::ConstantsSpecializationDescriptor::HashImpl(Air::ConstantsSpecializationDescriptor *this, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  CC_LONG v16;
  CC_SHA256_CTX *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t result;
  uint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  int data;

  CC_SHA256_Update(c, "Air.ConstantsSpecializationDescriptor", 0x25u);
  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)this + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)this + v12);
    v14 = *v13;
    v15 = (int *)((char *)v13 + v14 + 4);
    v16 = *(unsigned int *)((char *)v13 + v14);
    v17 = c;
  }
  else
  {
    data = 0;
    v15 = &data;
    v17 = c;
    v16 = 4;
  }
  CC_SHA256_Update(v17, v15, v16);
  v18 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v18 >= 9u && (v19 = v18[4]) != 0)
  {
    v20 = (unsigned int *)((char *)this + v19 + *(unsigned int *)((char *)this + v19));
    data = *v20;
    result = CC_SHA256_Update(c, &data, 4u);
    v22 = *v20;
    if ((_DWORD)v22)
    {
      v23 = v20 + 1;
      v24 = v20 + 1;
      do
      {
        v25 = *v24++;
        result = Air::FunctionConstantValue::HashImpl((Air::FunctionConstantValue *)((char *)v23 + v25), c);
        v23 = v24;
        --v22;
      }
      while (v22);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t flatbuffers::SignatureBuilder::Create@<X0>(CC_SHA256_CTX *this@<X0>, unsigned __int8 **a2@<X8>)
{
  std::vector<unsigned char>::vector(a2, 0x20uLL);
  return CC_SHA256_Final(*a2, this);
}

void sub_182713AD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneGraph<Air::FunctionStitching::Graph>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  int String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unsigned __int16 v17;
  const char *v19;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0xBu && (v7 = *((unsigned __int16 *)v6 + 5)) != 0)
  {
    v19 = &a2[v7 + *(unsigned int *)&a2[v7]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE_vEENS2_INS_6VectorISE_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    v19 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE0_vEENS2_INS_6VectorISE_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (v11 = *((unsigned __int16 *)v10 + 2)) != 0)
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  else
    String = 0;
  *(_BYTE *)(a1 + 70) = 1;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v8);
  v16 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v16 >= 9u)
  {
    v17 = *((_WORD *)v16 + 4);
    if (v17)
    {
      LODWORD(v19) = *(_DWORD *)&a2[v17];
      flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)a1, 8, &v19);
    }
  }
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v9);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t Mtl::FunctionStitching::Graph::HashImpl(Mtl::FunctionStitching::Graph *this, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t result;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.Graph", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)this + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)this + v12 + *(unsigned int *)((char *)this + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = v13 + 1;
      v16 = v13 + 1;
      do
      {
        v17 = *v16++;
        Mtl::FunctionStitching::Node::HashImpl((Mtl::FunctionStitching::Node *)((char *)v15 + v17), c);
        v15 = v16;
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v18 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v18 >= 9u && (v19 = v18[4]) != 0)
  {
    v20 = v19;
    CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
    data = *(_DWORD *)((char *)this + v20);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 0xBu && (v22 = v21[5]) != 0)
  {
    v23 = (unsigned int *)((char *)this + v22 + *(unsigned int *)((char *)this + v22));
    data = *v23;
    result = CC_SHA256_Update(c, &data, 4u);
    v25 = *v23;
    if ((_DWORD)v25)
    {
      v26 = v23 + 1;
      v27 = v23 + 1;
      do
      {
        v28 = *v27++;
        result = Mtl::FunctionStitching::Attribute::HashImpl((Mtl::FunctionStitching::Attribute *)((char *)v26 + v28), c);
        v26 = v27;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100]<std::string,char const*,(void *)0>(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  MEMORY[0x186DABE30](a1 + 24, *((_QWORD *)a2 + 3));
  return a1;
}

uint64_t MTLMetalScriptBuilderImpl::newSerializedMetalScript(NSObject **this)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  uint64_t v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3052000000;
  v8 = __Block_byref_object_copy__1;
  v9 = __Block_byref_object_dispose__1;
  v10 = 0;
  v1 = *this;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl24newSerializedMetalScriptEv_block_invoke;
  v4[3] = &unk_1E0FE3150;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  v2 = v6[5];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void ___ZN25MTLMetalScriptBuilderImpl24newSerializedMetalScriptEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v23;
  int v24;
  uint64_t v25;
  void *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v1 + 424) == *(_QWORD *)(v1 + 416)
    && *(_QWORD *)(v1 + 448) == *(_QWORD *)(v1 + 440)
    && *(_QWORD *)(v1 + 472) == *(_QWORD *)(v1 + 464))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = 0;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 544) - *(_QWORD *)(v1 + 536);
    if (v2)
      v3 = *(void **)(v1 + 536);
    else
      v3 = &flatbuffers::data<flatbuffers::Offset<Mtl::NamedPredicate>,std::allocator<flatbuffers::Offset<Mtl::NamedPredicate>>>(std::vector<flatbuffers::Offset<Mtl::NamedPredicate>> const&)::t;
    v44 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v3, v2 >> 2);
    v4 = *(_QWORD *)(v1 + 352) - *(_QWORD *)(v1 + 344);
    if (v4)
      v5 = *(void **)(v1 + 344);
    else
      v5 = &flatbuffers::data<flatbuffers::Offset<Mtl::PathLibrary>,std::allocator<flatbuffers::Offset<Mtl::PathLibrary>>>(std::vector<flatbuffers::Offset<Mtl::PathLibrary>> const&)::t;
    v43 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v5, v4 >> 2);
    v6 = *(_QWORD *)(v1 + 376) - *(_QWORD *)(v1 + 368);
    if (v6)
      v7 = *(void **)(v1 + 368);
    else
      v7 = &flatbuffers::data<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>,std::allocator<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>>(std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>> const&)::t;
    v8 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v7, v6 >> 2);
    v9 = *(_QWORD *)(v1 + 400) - *(_QWORD *)(v1 + 392);
    if (v9)
      v10 = *(void **)(v1 + 392);
    else
      v10 = &flatbuffers::data<flatbuffers::Offset<Mtl::StitchedLibrary>,std::allocator<flatbuffers::Offset<Mtl::StitchedLibrary>>>(std::vector<flatbuffers::Offset<Mtl::StitchedLibrary>> const&)::t;
    v11 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v10, v9 >> 2);
    v12 = *(_QWORD *)(v1 + 424) - *(_QWORD *)(v1 + 416);
    if (v12)
      v13 = *(void **)(v1 + 416);
    else
      v13 = &flatbuffers::data<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>> const&)::t;
    v42 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v13, v12 >> 2);
    v14 = *(_QWORD *)(v1 + 448) - *(_QWORD *)(v1 + 440);
    if (v14)
      v15 = *(void **)(v1 + 440);
    else
      v15 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>> const&)::t;
    v16 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v15, v14 >> 2);
    v17 = *(_QWORD *)(v1 + 568) - *(_QWORD *)(v1 + 560);
    if (v17)
      v18 = *(void **)(v1 + 560);
    else
      v18 = &flatbuffers::data<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>> const&)::t;
    v41 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v18, v17 >> 2);
    v19 = *(_QWORD *)(v1 + 472) - *(_QWORD *)(v1 + 464);
    if (v19)
      v20 = *(void **)(v1 + 464);
    else
      v20 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>> const&)::t;
    v21 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v20, v19 >> 2);
    v22 = *(_QWORD *)(v1 + 496) - *(_QWORD *)(v1 + 488);
    if (v22)
      v23 = *(void **)(v1 + 488);
    else
      v23 = &flatbuffers::data<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>> const&)::t;
    v24 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v23, v22 >> 2);
    v25 = *(_QWORD *)(v1 + 520) - *(_QWORD *)(v1 + 512);
    if (v25)
      v26 = *(void **)(v1 + 512);
    else
      v26 = &flatbuffers::data<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>> const&)::t;
    v27 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)(v1 + 248), (uint64_t)v26, v25 >> 2);
    *(_BYTE *)(v1 + 318) = 1;
    v28 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 4, v43);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 6, v8);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 8, v11);
    v29 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v28);
    *(_BYTE *)(v1 + 318) = 1;
    v30 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 4, v42);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 6, v16);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 8, v21);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 10, v41);
    v31 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v30);
    *(_BYTE *)(v1 + 318) = 1;
    v32 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 6, v24);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 4, v27);
    v33 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v32);
    v52 = 0x300000000;
    v53 = 0;
    *(_BYTE *)(v1 + 318) = 1;
    v34 = *(_DWORD *)(v1 + 280) - *(_DWORD *)(v1 + 296) + *(_DWORD *)(v1 + 288);
    flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)(v1 + 248), 4, &v52);
    v35 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>(v1 + 248, 2);
    flatbuffers::FlatBufferBuilder::TrackField((char *)(v1 + 248), 6, v35);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 8, v44);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 12, v29);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 14, v31);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(v1 + 248), 16, v33);
    v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v1 + 248), v34);
    flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)(v1 + 248), v36, "MTLP", 0);
    v37 = *(unsigned __int8 *)(v1 + 256);
    v39 = *(_QWORD *)(v1 + 280);
    v38 = *(_QWORD *)(v1 + 288);
    v40 = *(void **)(v1 + 296);
    v46 = *(_QWORD *)(v1 + 248);
    v47 = v37;
    v48 = v38;
    v49 = v39;
    v50 = v40;
    v51 = (v39 + v38 - (_DWORD)v40);
    if (v37)
    {
      *(_QWORD *)(v1 + 248) = 0;
      *(_BYTE *)(v1 + 256) = 0;
    }
    *(_OWORD *)(v1 + 280) = 0u;
    *(_OWORD *)(v1 + 296) = 0u;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = dispatch_data_create(v40, (v39 + v38 - (_DWORD)v40), 0, 0);
    MTLMetalScriptBuilderImpl::resetInternal((MTLMetalScriptBuilderImpl *)v1, 0);
    MTLMetalScriptBuilderImpl::initFromData((MTLMetalScriptBuilderImpl *)v1, (char *)v40);
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v46);
  }
}

void sub_1827143E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)va);
  _Unwind_Resume(a1);
}

void MTLMetalScriptBuilderImpl::reset(NSObject **this, char a2)
{
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v2 = *this;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl5resetEb_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  v3[4] = this;
  v4 = a2;
  dispatch_sync(v2, v3);
}

void ___ZN25MTLMetalScriptBuilderImpl5resetEb_block_invoke(uint64_t a1)
{
  MTLMetalScriptBuilderImpl::resetInternal(*(MTLMetalScriptBuilderImpl **)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void MTLMetalScriptBuilder::addComputePipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLComputePipelineDescriptor *a2)
{
  NSObject **v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(NSObject ***)this;
  v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl32addComputePipelineWithDescriptorEP28MTLComputePipelineDescriptor_block_invoke;
  v4[3] = &unk_1E0FE3128;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addRenderPipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLRenderPipelineDescriptor *a2)
{
  NSObject **v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(NSObject ***)this;
  v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl31addRenderPipelineWithDescriptorEP27MTLRenderPipelineDescriptor_block_invoke;
  v4[3] = &unk_1E0FE3128;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addMeshRenderPipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLMeshRenderPipelineDescriptor *a2)
{
  NSObject **v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(NSObject ***)this;
  v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl35addMeshRenderPipelineWithDescriptorEP31MTLMeshRenderPipelineDescriptor_block_invoke;
  v4[3] = &unk_1E0FE3128;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addTileRenderPipelineWithDescriptor(MTLMetalScriptBuilder *this, MTLTileRenderPipelineDescriptor *a2)
{
  NSObject **v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(NSObject ***)this;
  v3 = **(NSObject ***)this;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN25MTLMetalScriptBuilderImpl35addTileRenderPipelineWithDescriptorEP31MTLTileRenderPipelineDescriptor_block_invoke;
  v4[3] = &unk_1E0FE3128;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void MTLMetalScriptBuilder::addFunctionWithDescriptor(NSObject ***a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject **v4;
  NSObject *v5;
  _QWORD v6[8];

  v4 = *a1;
  v5 = **a1;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZN25MTLMetalScriptBuilderImpl25addFunctionWithDescriptorEPU22objcproto11MTLFunction11objc_objectPU21objcproto10MTLLibrary11objc_objectP21MTLFunctionDescriptor_block_invoke;
  v6[3] = &unk_1E0FE2DF8;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  v6[7] = v4;
  dispatch_sync(v5, v6);
}

void MTLMetalScriptBuilder::addLibraryWithDescriptor(NSObject ***a1, uint64_t a2, uint64_t a3)
{
  NSObject **v3;
  NSObject *v4;
  _QWORD block[7];

  v3 = *a1;
  v4 = **a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN25MTLMetalScriptBuilderImpl24addLibraryWithDescriptorEPU21objcproto10MTLLibrary11objc_objectP28MTLStitchedLibraryDescriptor_block_invoke;
  block[3] = &unk_1E0FE2C68;
  block[5] = a3;
  block[6] = v3;
  block[4] = a2;
  dispatch_sync(v4, block);
}

uint64_t MTLMetalScriptBuilder::newSerializedMetalScript(MTLMetalScriptBuilder *this)
{
  return MTLMetalScriptBuilderImpl::newSerializedMetalScript(*(NSObject ***)this);
}

void MTLMetalScriptBuilder::reset(MTLMetalScriptBuilder *this)
{
  NSObject **v1;
  NSObject *v2;
  _QWORD v3[5];
  char v4;

  v1 = *(NSObject ***)this;
  v2 = **(NSObject ***)this;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN25MTLMetalScriptBuilderImpl5resetEb_block_invoke;
  v3[3] = &__block_descriptor_41_e5_v8__0l;
  v3[4] = v1;
  v4 = 1;
  dispatch_sync(v2, v3);
}

void MTLMetalScriptBuilder::initFromScript(NSObject ***a1, NSObject *a2)
{
  MTLMetalScriptBuilderImpl::initFromScript(*a1, a2);
}

void *std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v9)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v18 >= v10)
                v18 %= v10;
            }
            else
            {
              v18 &= v10 - 1;
            }
            if (v18 != v3)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  *((_OWORD *)v14 + 1) = *a3;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10)
        v27 %= v10;
    }
    else
    {
      v27 &= v10 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*v7;
  return v14;
}

void sub_182714944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

uint64_t Mtl::FunctionStitching::CreateNode(uint64_t a1, int a2, int a3)
{
  int v5;

  *(_BYTE *)(a1 + 70) = 1;
  v5 = *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, a3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, a2, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v5);
}

uint64_t Mtl::FunctionStitching::CreateBuiltinNode(uint64_t a1, int a2)
{
  int v3;

  *(_BYTE *)(a1 + 70) = 1;
  v3 = *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, a2, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v3);
}

uint64_t std::pair<std::vector<objc_object  {objcproto24MTLFunctionStitchingNode}*>,std::unordered_map<objc_object  {objcproto24MTLFunctionStitchingNode},unsigned int,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,objc_object  {objcproto24MTLFunctionStitchingNode}*<std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>>>::~pair(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_182714CB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(flatbuffers::FlatBufferBuilder *a1, const unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;

  v3 = a3;
  v6 = 4 * a3;
  *((_BYTE *)a1 + 70) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign(a1, 4 * a3, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign(a1, v6, 4uLL);
  flatbuffers::vector_downward::push(a1, a2, v6);
  *((_BYTE *)a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, v3);
}

char *flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>(char *result, uint64_t a2, _DWORD *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v5 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    v6 = *((_QWORD *)v5 + 6);
    if ((unint64_t)(v6 - *((_QWORD *)v5 + 7)) <= 3)
    {
      flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)v5, 4uLL);
      v6 = *((_QWORD *)v5 + 6);
    }
    *(_DWORD *)(v6 - 4) = *a3;
    v7 = v6 - 4;
    *((_QWORD *)v5 + 6) = v7;
    return flatbuffers::FlatBufferBuilder::TrackField(v5, a2, *((_DWORD *)v5 + 8) - (int)v7 + *((_DWORD *)v5 + 10));
  }
  return result;
}

__n128 __Block_byref_object_copy__30(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void ___ZN24MTLMetalScriptSerializerL12createGroupsERN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  flatbuffers::FlatBufferBuilder *v5;
  const char *v6;
  size_t v7;
  int String;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  flatbuffers::FlatBufferBuilder *v12;
  const char *v13;
  size_t v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  _QWORD *v37;
  int v38;
  int v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void *__p;
  char *v58;
  char *v59;
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = *(flatbuffers::FlatBufferBuilder **)(a1 + 40);
  v6 = (const char *)objc_msgSend(a2, "UTF8String");
  v7 = strlen(v6);
  String = flatbuffers::FlatBufferBuilder::CreateString(v5, v6, v7);
  __p = 0;
  v58 = 0;
  v59 = 0;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
  if (v9)
  {
    v52 = String;
    v10 = *(_QWORD *)v54;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v54 != v10)
          objc_enumerationMutation(a3);
        v12 = *(flatbuffers::FlatBufferBuilder **)(a1 + 40);
        v13 = (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v53 + 1) + 8 * i), "name"), "UTF8String");
        v14 = strlen(v13);
        v15 = flatbuffers::FlatBufferBuilder::CreateString(v12, v13, v14);
        v16 = v15;
        v17 = v58;
        if (v58 >= v59)
        {
          v19 = (char *)__p;
          v20 = (v58 - (_BYTE *)__p) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v22 = v59 - (_BYTE *)__p;
          if ((v59 - (_BYTE *)__p) >> 1 > v21)
            v21 = v22 >> 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v59, v23);
            v19 = (char *)__p;
            v17 = v58;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v20];
          *(_DWORD *)v25 = v16;
          v18 = v25 + 4;
          while (v17 != v19)
          {
            v26 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          __p = v25;
          v58 = v18;
          v59 = &v24[4 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_DWORD *)v58 = v15;
          v18 = v17 + 4;
        }
        v58 = v18;
      }
      v9 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
    }
    while (v9);
    v27 = __p;
    v28 = v58;
    String = v52;
  }
  else
  {
    v28 = 0;
    v27 = 0;
  }
  v29 = v28 - v27;
  if (v29)
    v30 = v27;
  else
    v30 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  v31 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(*(flatbuffers::FlatBufferBuilder **)(a1 + 40), (uint64_t)v30, v29 >> 2);
  v32 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v32 + 70) = 1;
  v33 = *(_DWORD *)(v32 + 32);
  v34 = *(_DWORD *)(v32 + 48);
  v35 = *(_DWORD *)(v32 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v32, 4, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v32, 6, v31);
  v36 = v33 - v34 + v35;
  v37 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v38 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v32, v36);
  v39 = v38;
  v40 = v37[8];
  v41 = (char *)v37[7];
  if ((unint64_t)v41 >= v40)
  {
    v43 = (char *)v37[6];
    v44 = (v41 - v43) >> 2;
    if ((unint64_t)(v44 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v45 = v40 - (_QWORD)v43;
    v46 = (uint64_t)(v40 - (_QWORD)v43) >> 1;
    if (v46 <= v44 + 1)
      v46 = v44 + 1;
    if (v45 >= 0x7FFFFFFFFFFFFFFCLL)
      v47 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v47 = v46;
    if (v47)
    {
      v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v37 + 8), v47);
      v43 = (char *)v37[6];
      v41 = (char *)v37[7];
    }
    else
    {
      v48 = 0;
    }
    v49 = &v48[4 * v44];
    v50 = &v48[4 * v47];
    *(_DWORD *)v49 = v39;
    v42 = v49 + 4;
    while (v41 != v43)
    {
      v51 = *((_DWORD *)v41 - 1);
      v41 -= 4;
      *((_DWORD *)v49 - 1) = v51;
      v49 -= 4;
    }
    v37[6] = v49;
    v37[7] = v42;
    v37[8] = v50;
    if (v43)
      operator delete(v43);
  }
  else
  {
    *(_DWORD *)v41 = v38;
    v42 = v41 + 4;
  }
  v37[7] = v42;
  if (__p)
  {
    v58 = (char *)__p;
    operator delete(__p);
  }
}

void sub_18271514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t flatbuffers::FlatBufferBuilder::PushElement<float>(uint64_t a1, float a2)
{
  uint64_t v4;
  uint64_t v5;

  flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)a1, 4uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 3)
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, 4uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(float *)(v4 - 4) = a2;
  v5 = v4 - 4;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t makeValue(flatbuffers::FlatBufferBuilder *a1, MTLDataType a2, _DWORD *a3)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _OWORD *v6;
  _WORD *v7;
  _DWORD *v8;
  int *v9;
  _QWORD *v10;
  uint64_t result;
  _BYTE *v12;
  _WORD *v13;
  __int16 *v14;
  _DWORD *v15;
  _QWORD *v16;
  _OWORD *v17;
  __int128 *v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 *v21;
  _OWORD *v22;
  _OWORD *v23;
  _QWORD *v24;
  _OWORD *v25;
  __int128 *v26;
  __int128 *v27;

  switch(a2)
  {
    case MTLDataTypeFloat:
      v3 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a1, v3);
    case MTLDataTypeFloat2:
      v4 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a1, v4);
    case MTLDataTypeFloat3:
      v5 = (uint64_t *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a1, v5);
    case MTLDataTypeFloat4:
      v6 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a1, v6);
    case MTLDataTypeHalf:
      v7 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a1, v7);
    case MTLDataTypeHalf2:
      v8 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a1, v8);
    case MTLDataTypeHalf3:
      v9 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a1, v9);
    case MTLDataTypeHalf4:
      v10 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a1, v10);
    case MTLDataTypeInt:
      v3 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a1, v3);
    case MTLDataTypeInt2:
      v4 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a1, v4);
    case MTLDataTypeInt3:
      v5 = (uint64_t *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a1, v5);
    case MTLDataTypeInt4:
      v6 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a1, v6);
    case MTLDataTypeUInt:
      v3 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>((uint64_t)a1, v3);
    case MTLDataTypeUInt2:
      v4 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>((uint64_t)a1, v4);
    case MTLDataTypeUInt3:
      v5 = (uint64_t *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>((uint64_t)a1, v5);
    case MTLDataTypeUInt4:
      v6 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>((uint64_t)a1, v6);
    case MTLDataTypeShort:
      v7 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a1, v7);
    case MTLDataTypeShort2:
      v8 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a1, v8);
    case MTLDataTypeShort3:
      v9 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a1, v9);
    case MTLDataTypeShort4:
      v10 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a1, v10);
    case MTLDataTypeUShort:
      v7 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>((uint64_t)a1, v7);
    case MTLDataTypeUShort2:
      v8 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>((uint64_t)a1, v8);
    case MTLDataTypeUShort3:
      v9 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>((uint64_t)a1, v9);
    case MTLDataTypeUShort4:
      v10 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>((uint64_t)a1, v10);
    case MTLDataTypeChar:
      v12 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a1, v12);
    case MTLDataTypeChar2:
      v13 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a1, v13);
    case MTLDataTypeChar3:
      v14 = (__int16 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a1, v14);
    case MTLDataTypeChar4:
      v15 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a1, v15);
    case MTLDataTypeUChar:
      v12 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a1, v12);
    case MTLDataTypeUChar2:
      v13 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a1, v13);
    case MTLDataTypeUChar3:
      v14 = (__int16 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a1, v14);
    case MTLDataTypeUChar4:
      v15 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a1, v15);
    case MTLDataTypeBool:
      v12 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>((uint64_t)a1, v12);
    case MTLDataTypeBool2:
      v13 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>((uint64_t)a1, v13);
    case MTLDataTypeBool3:
      v14 = (__int16 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>((uint64_t)a1, v14);
    case MTLDataTypeBool4:
      v15 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>((uint64_t)a1, v15);
    case MTLDataTypeLong:
      v16 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a1, v16);
    case MTLDataTypeLong2:
      v17 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a1, v17);
    case MTLDataTypeLong3:
      v18 = (__int128 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a1, v18);
    case MTLDataTypeLong4:
      v19 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a1, v19);
    case MTLDataTypeULong:
      v16 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a1, v16);
    case MTLDataTypeULong2:
      v17 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a1, v17);
    case MTLDataTypeULong3:
      v18 = (__int128 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a1, v18);
    case MTLDataTypeULong4:
      v19 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a1, v19);
    case MTLDataTypeULong4|MTLDataTypeStruct:
      v16 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>((uint64_t)a1, v16);
    case MTLDataTypeULong4|MTLDataTypeArray:
      v17 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>((uint64_t)a1, v17);
    case MTLDataTypeULong4|MTLDataTypeFloat:
      v18 = (__int128 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>((uint64_t)a1, v18);
    case MTLDataTypeULong4|MTLDataTypeFloat2:
      v19 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>((uint64_t)a1, v19);
    case MTLDataTypeULong4|MTLDataTypeFloat3:
      v20 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a1, v20);
    case MTLDataTypeULong4|MTLDataTypeFloat4:
      v21 = (__int128 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a1, v21);
    case MTLDataTypeULong4|MTLDataTypeFloat2x2:
      v22 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a1, v22);
    case MTLDataTypeR16Unorm|MTLDataTypeInt4:
      v23 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a1, v23);
    case MTLDataTypeR16Snorm|MTLDataTypeInt4:
      v20 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a1, v20);
    case MTLDataTypeRG8Unorm|MTLDataTypeInt4:
      v21 = (__int128 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a1, v21);
    case MTLDataTypeRG8Snorm|MTLDataTypeInt4:
      v20 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>((uint64_t)a1, v20);
    case MTLDataTypeRG16Unorm|MTLDataTypeInt4:
      v21 = (__int128 *)a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>((uint64_t)a1, v21);
    case MTLDataTypeRG16Snorm|MTLDataTypeInt4:
      v22 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a1, v22);
    case MTLDataTypeRGBA8Unorm|MTLDataTypeInt4:
      v23 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a1, v23);
    case MTLDataTypeRGBA8Unorm_sRGB|MTLDataTypeInt4:
      v22 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>((uint64_t)a1, v22);
    case MTLDataTypeRGBA8Snorm|MTLDataTypeInt4:
      v23 = a3;
      return flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>((uint64_t)a1, v23);
    case MTLDataTypeRGBA16Unorm|MTLDataTypeInt4:
      v24 = a3;
      goto LABEL_84;
    case MTLDataTypeRGBA16Snorm|MTLDataTypeInt4:
      v25 = a3;
      goto LABEL_86;
    case MTLDataTypeRGB10A2Unorm|MTLDataTypeInt4:
      v24 = a3;
      goto LABEL_84;
    case MTLDataTypeRG11B10Float|MTLDataTypeInt4:
      v25 = a3;
      goto LABEL_86;
    case MTLDataTypeRGB9E5Float|MTLDataTypeInt4:
      v26 = (__int128 *)a3;
      goto LABEL_90;
    case MTLDataTypeRenderPipeline|MTLDataTypeInt4:
      v27 = (__int128 *)a3;
      goto LABEL_92;
    case MTLDataTypeComputePipeline|MTLDataTypeInt4:
      v26 = (__int128 *)a3;
      goto LABEL_90;
    case MTLDataTypeIndirectCommandBuffer|MTLDataTypeInt4:
      v27 = (__int128 *)a3;
      goto LABEL_92;
    case MTLDataTypeLong|MTLDataTypeInt4:
      v26 = (__int128 *)a3;
LABEL_90:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>((uint64_t)a1, v26);
      break;
    case MTLDataTypeLong2|MTLDataTypeInt4:
      v27 = (__int128 *)a3;
LABEL_92:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>((uint64_t)a1, v27);
      break;
    case MTLDataTypeInstanceAccelerationStructure|MTLDataTypeStruct:
      v24 = a3;
LABEL_84:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>((uint64_t)a1, v24);
      break;
    case MTLDataTypeULong4|MTLDataTypeInt4:
      v25 = a3;
LABEL_86:
      result = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>((uint64_t)a1, v25);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t Air::FunctionConstantValue::HashImpl(Air::FunctionConstantValue *this, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int16 data;
  int v84;
  int v85;

  CC_SHA256_Update(c, "Air.FunctionConstantValue", 0x19u);
  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 < 5u)
  {
    LOWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LOWORD(v5) = *(_WORD *)((char *)this + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 2u);
  v6 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *((unsigned __int8 *)this + v7);
  }
  v84 = v7;
  CC_SHA256_Update(c, &v84, 4u);
  v8 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v8 >= 7u && (v9 = v8[3]) != 0)
  {
    switch(*((_BYTE *)this + v9))
    {
      case 3:
        v10 = (int *)Air::FunctionConstantValue::value_as_ConstantFloat(this);
        result = Air::ConstantFloat::HashImpl(v10, c);
        break;
      case 4:
        v12 = Air::FunctionConstantValue::value_as_ConstantFloat2(this);
        result = Air::ConstantFloat2::HashImpl(v12, c);
        break;
      case 5:
        v13 = Air::FunctionConstantValue::value_as_ConstantFloat3(this);
        result = Air::ConstantFloat3::HashImpl(v13, c);
        break;
      case 6:
        v14 = Air::FunctionConstantValue::value_as_ConstantFloat4(this);
        result = Air::ConstantFloat4::HashImpl(v14, c);
        break;
      case 0x10:
        v15 = (__int16 *)Air::FunctionConstantValue::value_as_ConstantHalf(this);
        result = Air::ConstantHalf::HashImpl(v15, c);
        break;
      case 0x11:
        v16 = Air::FunctionConstantValue::value_as_ConstantHalf2(this);
        result = Air::ConstantHalf2::HashImpl(v16, c);
        break;
      case 0x12:
        v17 = Air::FunctionConstantValue::value_as_ConstantHalf3(this);
        result = Air::ConstantHalf3::HashImpl(v17, c);
        break;
      case 0x13:
        v18 = Air::FunctionConstantValue::value_as_ConstantHalf4(this);
        result = Air::ConstantHalf4::HashImpl(v18, c);
        break;
      case 0x1D:
        v19 = (int *)Air::FunctionConstantValue::value_as_ConstantInt(this);
        result = Air::ConstantInt::HashImpl(v19, c);
        break;
      case 0x1E:
        v20 = Air::FunctionConstantValue::value_as_ConstantInt2(this);
        result = Air::ConstantInt2::HashImpl(v20, c);
        break;
      case 0x1F:
        v21 = Air::FunctionConstantValue::value_as_ConstantInt3(this);
        result = Air::ConstantInt3::HashImpl(v21, c);
        break;
      case 0x20:
        v22 = Air::FunctionConstantValue::value_as_ConstantInt4(this);
        result = Air::ConstantInt4::HashImpl(v22, c);
        break;
      case 0x21:
        v23 = (int *)Air::FunctionConstantValue::value_as_ConstantUInt(this);
        result = Air::ConstantUInt::HashImpl(v23, c);
        break;
      case 0x22:
        v24 = Air::FunctionConstantValue::value_as_ConstantUInt2(this);
        result = Air::ConstantUInt2::HashImpl(v24, c);
        break;
      case 0x23:
        v25 = Air::FunctionConstantValue::value_as_ConstantUInt3(this);
        result = Air::ConstantUInt3::HashImpl(v25, c);
        break;
      case 0x24:
        v26 = Air::FunctionConstantValue::value_as_ConstantUInt4(this);
        result = Air::ConstantUInt4::HashImpl(v26, c);
        break;
      case 0x25:
        v27 = (__int16 *)Air::FunctionConstantValue::value_as_ConstantShort(this);
        result = Air::ConstantShort::HashImpl(v27, c);
        break;
      case 0x26:
        v28 = Air::FunctionConstantValue::value_as_ConstantShort2(this);
        result = Air::ConstantShort2::HashImpl(v28, c);
        break;
      case 0x27:
        v29 = Air::FunctionConstantValue::value_as_ConstantShort3(this);
        result = Air::ConstantShort3::HashImpl(v29, c);
        break;
      case 0x28:
        v30 = Air::FunctionConstantValue::value_as_ConstantShort4(this);
        result = Air::ConstantShort4::HashImpl(v30, c);
        break;
      case 0x29:
        v31 = (__int16 *)Air::FunctionConstantValue::value_as_ConstantUShort(this);
        result = Air::ConstantUShort::HashImpl(v31, c);
        break;
      case 0x2A:
        v32 = Air::FunctionConstantValue::value_as_ConstantUShort2(this);
        result = Air::ConstantUShort2::HashImpl(v32, c);
        break;
      case 0x2B:
        v33 = Air::FunctionConstantValue::value_as_ConstantUShort3(this);
        result = Air::ConstantUShort3::HashImpl(v33, c);
        break;
      case 0x2C:
        v34 = Air::FunctionConstantValue::value_as_ConstantUShort4(this);
        result = Air::ConstantUShort4::HashImpl(v34, c);
        break;
      case 0x2D:
        v35 = (char *)Air::FunctionConstantValue::value_as_ConstantChar(this);
        result = Air::ConstantChar::HashImpl(v35, c);
        break;
      case 0x2E:
        v36 = Air::FunctionConstantValue::value_as_ConstantChar2(this);
        result = Air::ConstantChar2::HashImpl(v36, c);
        break;
      case 0x2F:
        v37 = Air::FunctionConstantValue::value_as_ConstantChar3(this);
        result = Air::ConstantChar3::HashImpl(v37, c);
        break;
      case 0x30:
        v38 = Air::FunctionConstantValue::value_as_ConstantChar4(this);
        result = Air::ConstantChar4::HashImpl(v38, c);
        break;
      case 0x31:
        v39 = (char *)Air::FunctionConstantValue::value_as_ConstantUChar(this);
        result = Air::ConstantUChar::HashImpl(v39, c);
        break;
      case 0x32:
        v40 = Air::FunctionConstantValue::value_as_ConstantUChar2(this);
        result = Air::ConstantUChar2::HashImpl(v40, c);
        break;
      case 0x33:
        v41 = Air::FunctionConstantValue::value_as_ConstantUChar3(this);
        result = Air::ConstantUChar3::HashImpl(v41, c);
        break;
      case 0x34:
        v42 = Air::FunctionConstantValue::value_as_ConstantUChar4(this);
        result = Air::ConstantUChar4::HashImpl(v42, c);
        break;
      case 0x35:
        v43 = (_BYTE *)Air::FunctionConstantValue::value_as_ConstantBool(this);
        result = Air::ConstantBool::HashImpl(v43, c);
        break;
      case 0x36:
        v44 = Air::FunctionConstantValue::value_as_ConstantBool2(this);
        result = Air::ConstantBool2::HashImpl(v44, c);
        break;
      case 0x37:
        v45 = Air::FunctionConstantValue::value_as_ConstantBool3(this);
        result = Air::ConstantBool3::HashImpl(v45, c);
        break;
      case 0x38:
        v46 = Air::FunctionConstantValue::value_as_ConstantBool4(this);
        result = Air::ConstantBool4::HashImpl(v46, c);
        break;
      case 0x51:
        v47 = (uint64_t *)Air::FunctionConstantValue::value_as_ConstantLong(this);
        result = Air::ConstantLong::HashImpl(v47, c);
        break;
      case 0x52:
        v48 = Air::FunctionConstantValue::value_as_ConstantLong2(this);
        result = Air::ConstantLong2::HashImpl(v48, c);
        break;
      case 0x53:
        v49 = Air::FunctionConstantValue::value_as_ConstantLong3(this);
        result = Air::ConstantLong3::HashImpl(v49, c);
        break;
      case 0x54:
        v50 = Air::FunctionConstantValue::value_as_ConstantLong4(this);
        result = Air::ConstantLong4::HashImpl(v50, c);
        break;
      case 0x55:
        v51 = (uint64_t *)Air::FunctionConstantValue::value_as_ConstantULong(this);
        result = Air::ConstantULong::HashImpl(v51, c);
        break;
      case 0x56:
        v52 = Air::FunctionConstantValue::value_as_ConstantULong2(this);
        result = Air::ConstantULong2::HashImpl(v52, c);
        break;
      case 0x57:
        v53 = Air::FunctionConstantValue::value_as_ConstantULong3(this);
        result = Air::ConstantULong3::HashImpl(v53, c);
        break;
      case 0x58:
        v54 = Air::FunctionConstantValue::value_as_ConstantULong4(this);
        result = Air::ConstantULong4::HashImpl(v54, c);
        break;
      case 0x59:
        v55 = (uint64_t *)Air::FunctionConstantValue::value_as_ConstantDouble(this);
        result = Air::ConstantDouble::HashImpl(v55, c);
        break;
      case 0x5A:
        v56 = Air::FunctionConstantValue::value_as_ConstantDouble2(this);
        result = Air::ConstantDouble2::HashImpl(v56, c);
        break;
      case 0x5B:
        v57 = Air::FunctionConstantValue::value_as_ConstantDouble3(this);
        result = Air::ConstantDouble3::HashImpl(v57, c);
        break;
      case 0x5C:
        v58 = Air::FunctionConstantValue::value_as_ConstantDouble4(this);
        result = Air::ConstantDouble4::HashImpl(v58, c);
        break;
      case 0x5D:
        v59 = Air::FunctionConstantValue::value_as_ConstantFloat8(this);
        result = Air::ConstantFloat8::HashImpl(v59, c);
        break;
      case 0x5E:
        v60 = Air::FunctionConstantValue::value_as_ConstantFloat16(this);
        result = Air::ConstantFloat16::HashImpl(v60, c);
        break;
      case 0x5F:
        v61 = Air::FunctionConstantValue::value_as_ConstantHalf8(this);
        result = Air::ConstantHalf8::HashImpl(v61, c);
        break;
      case 0x60:
        v62 = Air::FunctionConstantValue::value_as_ConstantHalf16(this);
        result = Air::ConstantHalf16::HashImpl(v62, c);
        break;
      case 0x61:
        v63 = Air::FunctionConstantValue::value_as_ConstantInt8(this);
        result = Air::ConstantInt8::HashImpl(v63, c);
        break;
      case 0x62:
        v64 = Air::FunctionConstantValue::value_as_ConstantInt16(this);
        result = Air::ConstantInt16::HashImpl(v64, c);
        break;
      case 0x63:
        v65 = Air::FunctionConstantValue::value_as_ConstantUInt8(this);
        result = Air::ConstantUInt8::HashImpl(v65, c);
        break;
      case 0x64:
        v66 = Air::FunctionConstantValue::value_as_ConstantUInt16(this);
        result = Air::ConstantUInt16::HashImpl(v66, c);
        break;
      case 0x65:
        v67 = Air::FunctionConstantValue::value_as_ConstantShort8(this);
        result = Air::ConstantShort8::HashImpl(v67, c);
        break;
      case 0x66:
        v68 = Air::FunctionConstantValue::value_as_ConstantShort16(this);
        result = Air::ConstantShort16::HashImpl(v68, c);
        break;
      case 0x67:
        v69 = Air::FunctionConstantValue::value_as_ConstantUShort8(this);
        result = Air::ConstantUShort8::HashImpl(v69, c);
        break;
      case 0x68:
        v70 = Air::FunctionConstantValue::value_as_ConstantUShort16(this);
        result = Air::ConstantUShort16::HashImpl(v70, c);
        break;
      case 0x69:
        v71 = Air::FunctionConstantValue::value_as_ConstantChar8(this);
        result = Air::ConstantChar8::HashImpl(v71, c);
        break;
      case 0x6A:
        v72 = Air::FunctionConstantValue::value_as_ConstantChar16(this);
        result = Air::ConstantChar16::HashImpl(v72, c);
        break;
      case 0x6B:
        v73 = Air::FunctionConstantValue::value_as_ConstantUChar8(this);
        result = Air::ConstantUChar8::HashImpl(v73, c);
        break;
      case 0x6C:
        v74 = Air::FunctionConstantValue::value_as_ConstantUChar16(this);
        result = Air::ConstantUChar16::HashImpl(v74, c);
        break;
      case 0x6D:
        v75 = Air::FunctionConstantValue::value_as_ConstantLong8(this);
        result = Air::ConstantLong8::HashImpl(v75, c);
        break;
      case 0x6E:
        v76 = Air::FunctionConstantValue::value_as_ConstantLong16(this);
        result = Air::ConstantLong16::HashImpl(v76, c);
        break;
      case 0x6F:
        v77 = Air::FunctionConstantValue::value_as_ConstantULong8(this);
        result = Air::ConstantULong8::HashImpl(v77, c);
        break;
      case 0x70:
        v78 = Air::FunctionConstantValue::value_as_ConstantULong16(this);
        result = Air::ConstantULong16::HashImpl(v78, c);
        break;
      case 0x71:
        v79 = Air::FunctionConstantValue::value_as_ConstantDouble8(this);
        result = Air::ConstantDouble8::HashImpl(v79, c);
        break;
      case 0x72:
        v80 = Air::FunctionConstantValue::value_as_ConstantDouble16(this);
        result = Air::ConstantDouble16::HashImpl(v80, c);
        break;
      case 0x77:
        v81 = Air::FunctionConstantValue::value_as_ConstantBool8(this);
        result = Air::ConstantBool8::HashImpl(v81, c);
        break;
      case 0x78:
        v82 = Air::FunctionConstantValue::value_as_ConstantBool16(this);
        result = Air::ConstantBool16::HashImpl(v82, c);
        break;
      default:
        goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    v85 = 0;
    return CC_SHA256_Update(c, &v85, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 3) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantFloat::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  int data;

  CC_SHA256_Update(c, "Air.ConstantFloat", 0x11u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 4) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantFloat2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantFloat2", 0x12u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 5) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantFloat3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantFloat3", 0x12u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 12; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 6) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantFloat4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantFloat4", 0x12u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 16) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantHalf::HashImpl(__int16 *a1, CC_SHA256_CTX *c)
{
  __int16 data;

  CC_SHA256_Update(c, "Air.ConstantHalf", 0x10u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 2u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 17) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantHalf2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantHalf2", 0x11u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 4; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 18) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantHalf3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantHalf3", 0x11u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 6; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 19) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantHalf4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantHalf4", 0x11u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 29) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantInt::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  int data;

  CC_SHA256_Update(c, "Air.ConstantInt", 0xFu);
  data = *a1;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 30) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantInt2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantInt2", 0x10u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 7 && v1[3] && (v2 >= 9 ? (v3 = *((_BYTE *)this + v1[3]) == 31) : (v3 = 0), v3 && (v4 = v1[4]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Air::ConstantInt3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantInt3", 0x10u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 12; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 32)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantInt4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantInt4", 0x10u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 33)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUInt::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  int data;

  CC_SHA256_Update(c, "Air.ConstantUInt", 0x10u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 34)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUInt2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUInt2", 0x11u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 35)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUInt3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUInt3", 0x11u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 12; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 36)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUInt4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUInt4", 0x11u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 37)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantShort::HashImpl(__int16 *a1, CC_SHA256_CTX *c)
{
  __int16 data;

  CC_SHA256_Update(c, "Air.ConstantShort", 0x11u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 2u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 38)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantShort2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantShort2", 0x12u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 4; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 39)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantShort3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantShort3", 0x12u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 6; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 40)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantShort4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantShort4", 0x12u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 41)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUShort::HashImpl(__int16 *a1, CC_SHA256_CTX *c)
{
  __int16 data;

  CC_SHA256_Update(c, "Air.ConstantUShort", 0x12u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 2u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 42)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUShort2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUShort2", 0x13u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 4; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 43)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUShort3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUShort3", 0x13u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 6; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 44)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUShort4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUShort4", 0x13u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 45)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantChar::HashImpl(char *a1, CC_SHA256_CTX *c)
{
  char data;

  CC_SHA256_Update(c, "Air.ConstantChar", 0x10u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 46)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantChar2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantChar2", 0x11u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 2; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 47)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantChar3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantChar3", 0x11u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 3; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 48)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantChar4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantChar4", 0x11u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 4; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 49)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUChar::HashImpl(char *a1, CC_SHA256_CTX *c)
{
  char data;

  CC_SHA256_Update(c, "Air.ConstantUChar", 0x11u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 50)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUChar2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUChar2", 0x12u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 2; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 51)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUChar3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUChar3", 0x12u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 3; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 52)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUChar4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUChar4", 0x12u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 4; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 53)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantBool::HashImpl(_BYTE *a1, CC_SHA256_CTX *c)
{
  BOOL data;

  CC_SHA256_Update(c, "Air.ConstantBool", 0x10u);
  data = *a1 != 0;
  return CC_SHA256_Update(c, &data, 1u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 54)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantBool2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantBool2", 0x11u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 2; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 55)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantBool3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantBool3", 0x11u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 3; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 56)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantBool4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantBool4", 0x11u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 4; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 81)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantLong::HashImpl(uint64_t *a1, CC_SHA256_CTX *c)
{
  uint64_t data;

  CC_SHA256_Update(c, "Air.ConstantLong", 0x10u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 8u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 82)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantLong2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantLong2", 0x11u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 83)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantLong3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantLong3", 0x11u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 24; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 84)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantLong4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantLong4", 0x11u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 85)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantULong::HashImpl(uint64_t *a1, CC_SHA256_CTX *c)
{
  uint64_t data;

  CC_SHA256_Update(c, "Air.ConstantULong", 0x11u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 8u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 86)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantULong2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantULong2", 0x12u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 87)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantULong3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantULong3", 0x12u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 24; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 88)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantULong4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantULong4", 0x12u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 89)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantDouble::HashImpl(uint64_t *a1, CC_SHA256_CTX *c)
{
  uint64_t data;

  CC_SHA256_Update(c, "Air.ConstantDouble", 0x12u);
  data = *a1;
  return CC_SHA256_Update(c, &data, 8u);
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble2(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 90)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantDouble2::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantDouble2", 0x13u);
  if (a1)
  {
    data = 2;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble3(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 91)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantDouble3::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantDouble3", 0x13u);
  if (a1)
  {
    data = 3;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 24; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble4(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 92)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantDouble4::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantDouble4", 0x13u);
  if (a1)
  {
    data = 4;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 93)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantFloat8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantFloat8", 0x12u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantFloat16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 94)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantFloat16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantFloat16", 0x13u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 64; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 95)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantHalf8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantHalf8", 0x11u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantHalf16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 96)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantHalf16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantHalf16", 0x12u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 97)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantInt8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantInt8", 0x10u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantInt16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 98)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantInt16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantInt16", 0x11u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 64; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 99)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUInt8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUInt8", 0x11u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUInt16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 100)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUInt16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  int v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUInt16", 0x12u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 64; i += 4)
    {
      v7 = *(_DWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 4u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 101)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantShort8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantShort8", 0x12u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantShort16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 102)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantShort16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantShort16", 0x13u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 103)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUShort8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUShort8", 0x13u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUShort16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 104)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUShort16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  __int16 v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUShort16", 0x14u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 32; i += 2)
    {
      v7 = *(_WORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 2u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 105)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantChar8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantChar8", 0x11u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantChar16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 106)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantChar16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantChar16", 0x12u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 107)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUChar8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUChar8", 0x12u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantUChar16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 108)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantUChar16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantUChar16", 0x13u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 109)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantLong8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantLong8", 0x11u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 64; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantLong16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 110)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantLong16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantLong16", 0x12u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 128; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 111)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantULong8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantULong8", 0x12u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 64; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantULong16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 112)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantULong16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantULong16", 0x13u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 128; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 113)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantDouble8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantDouble8", 0x13u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 64; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantDouble16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 114)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantDouble16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  uint64_t v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantDouble16", 0x14u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 128; i += 8)
    {
      v7 = *(_QWORD *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 8u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool8(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 119)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantBool8::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantBool8", 0x11u);
  if (a1)
  {
    data = 8;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 8; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

uint64_t Air::FunctionConstantValue::value_as_ConstantBool16(Air::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v3 = 0;
  if (v2 >= 9 && *((_BYTE *)this + v1[3]) == 120)
  {
    v3 = v1[4];
    if (v1[4])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Air::ConstantBool16::HashImpl(uint64_t a1, CC_SHA256_CTX *c)
{
  uint64_t i;
  uint64_t result;
  __int16 data;
  char v7;
  int v8;

  CC_SHA256_Update(c, "Air.ConstantBool16", 0x12u);
  if (a1)
  {
    data = 16;
    CC_SHA256_Update(c, &data, 2u);
    for (i = 0; i != 16; ++i)
    {
      v7 = *(_BYTE *)(a1 + i);
      result = CC_SHA256_Update(c, &v7, 1u);
    }
  }
  else
  {
    v8 = 0;
    return CC_SHA256_Update(c, &v8, 4u);
  }
  return result;
}

_QWORD *std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__init_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_182719D14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::Node::HashImpl(Mtl::FunctionStitching::Node *this, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int *v8;
  uint64_t result;
  const char *v10;
  CC_SHA256_CTX *v11;
  CC_LONG v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  int data;
  int v23;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.Node", 0x1Au);
  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(_DWORD *)((char *)this + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v6 >= 5u && (v7 = v6[2]) != 0)
  {
    switch(*(_DWORD *)((char *)this + v7))
    {
      case 1:
        v8 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        result = Mtl::FunctionStitching::InputNode::HashImpl(v8, c);
        break;
      case 2:
        v13 = (int *)AirReflection::Node::node_as_KernelFunction(this);
        result = Mtl::FunctionStitching::FunctionNode::HashImpl(v13, c);
        break;
      case 3:
        v14 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        result = Mtl::FunctionStitching::BufferNode::HashImpl(v14, c);
        break;
      case 4:
        v15 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        result = Mtl::FunctionStitching::BufferAddressNode::HashImpl(v15, c);
        break;
      case 5:
        v16 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        result = Mtl::FunctionStitching::BufferDataNode::HashImpl(v16, c);
        break;
      case 6:
        v17 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        result = Mtl::FunctionStitching::TextureNode::HashImpl(v17, c);
        break;
      case 7:
        v18 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        result = Mtl::FunctionStitching::SamplerNode::HashImpl(v18, c);
        break;
      case 8:
        v19 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        result = Mtl::FunctionStitching::ThreadgroupNode::HashImpl(v19, c);
        break;
      case 9:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        v10 = "Mtl.FunctionStitching.ImageblockNode";
        v11 = c;
        v12 = 36;
        return CC_SHA256_Update(v11, v10, v12);
      case 0xA:
        v20 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        result = Mtl::FunctionStitching::BuiltinNode::HashImpl(v20, c);
        break;
      case 0xB:
        v21 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        result = Mtl::FunctionStitching::EarlyReturnNode::HashImpl(v21, c);
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v23 = 0;
    v10 = (const char *)&v23;
    v11 = c;
    v12 = 4;
    return CC_SHA256_Update(v11, v10, v12);
  }
  return result;
}

uint64_t Mtl::FunctionStitching::Attribute::HashImpl(Mtl::FunctionStitching::Attribute *this, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  CC_SHA256_CTX *v10;
  CC_LONG v11;
  int data;
  int v14;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.Attribute", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *((unsigned __int8 *)this + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v6 < 5u)
    goto LABEL_10;
  v7 = v6[2];
  if (!v7)
    goto LABEL_10;
  v8 = *((unsigned __int8 *)this + v7);
  if (v8 == 2)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(this);
    v9 = "Mtl.FunctionStitching.KernelAttribute";
    v10 = c;
    v11 = 37;
    return CC_SHA256_Update(v10, v9, v11);
  }
  if (v8 == 1)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(this);
    v9 = "Mtl.FunctionStitching.AlwaysInlineAttribute";
    v10 = c;
    v11 = 43;
  }
  else
  {
LABEL_10:
    v14 = 0;
    v9 = (const char *)&v14;
    v10 = c;
    v11 = 4;
  }
  return CC_SHA256_Update(v10, v9, v11);
}

uint64_t Mtl::FunctionStitching::InputNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.InputNode", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::FunctionNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t result;
  uint64_t v21;
  int *v22;
  int v23;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.FunctionNode", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    result = CC_SHA256_Update(c, &data, 4u);
    v21 = *v19;
    if ((_DWORD)v21)
    {
      v22 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
        v23 = *v22++;
        data = v23;
        result = CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Mtl::FunctionStitching::BufferNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int data;
  int v10;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.BufferNode", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  v10 = v7;
  return CC_SHA256_Update(c, &v10, 4u);
}

uint64_t Mtl::FunctionStitching::BufferAddressNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int data;
  uint64_t v10;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.BufferAddressNode", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    Mtl::FunctionStitching::BufferNode::HashImpl((int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)), c);
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    v7 = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      v7 = *(_QWORD *)((char *)a1 + v7);
  }
  v10 = v7;
  return CC_SHA256_Update(c, &v10, 8u);
}

uint64_t Mtl::FunctionStitching::BufferDataNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.BufferDataNode", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    v5 = v4[2];
    if (v5)
      return Mtl::FunctionStitching::BufferAddressNode::HashImpl((int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)), c);
  }
  data = 0;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::TextureNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.TextureNode", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::SamplerNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.SamplerNode", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::ThreadgroupNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.ThreadgroupNode", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::Node::node_as_ImageblockNode(Mtl::FunctionStitching::Node *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *(_DWORD *)((char *)this + v1[2]) == 9) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionStitching::BuiltinNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.BuiltinNode", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Mtl::FunctionStitching::EarlyReturnNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  uint64_t v11;
  int *v12;
  int v13;
  int data;

  CC_SHA256_Update(c, "Mtl.FunctionStitching.EarlyReturnNode", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
    data = *(int *)((char *)a1 + v6);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
  {
    v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
    data = *v9;
    result = CC_SHA256_Update(c, &data, 4u);
    v11 = *v9;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v9 + 1);
      do
      {
        CC_SHA256_Update(c, "Mtl.FunctionStitching.NodeId", 0x1Cu);
        v13 = *v12++;
        data = v13;
        result = CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(Mtl::FunctionStitching::Attribute *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((_BYTE *)this + v1[2]) == 1) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(Mtl::FunctionStitching::Attribute *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 5 && v1[2] && (v2 >= 7 ? (v3 = *((_BYTE *)this + v1[2]) == 2) : (v3 = 0), v3 && (v4 = v1[3]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t **std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void *std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2;
        v16 = *(uint64_t **)a2;
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == v10)
          {
            if (*((_QWORD *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x28uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_QWORD *)v15 + 4) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_40:
    *v27 = v15;
    goto LABEL_41;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_18271AC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> const*>>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__function::__value_func<std::string ()(objc_object  {objcproto11MTLFunction}*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<MTLUINT256_t const,std::pair<std::string,std::string>>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v16;
  *v16 = i;
  *(_QWORD *)(v23 + 8 * v3) = v16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_18271B040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v10;
  v18 = *a4;
  v19 = **a4;
  v17[4] = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_18271B2E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl21FunctionConstantValueEEEZNS3_31CloneSpecializedFunctionLibraryINS3_26SpecializedFunctionLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41SpecializedFunctionLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionConstantValue>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneFunctionConstantValue<Mtl::FunctionConstantValue>(a4, (Air::PipelineScript *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionConstantValue>,std::allocator<flatbuffers::Offset<Mtl::FunctionConstantValue>>>(std::vector<flatbuffers::Offset<Mtl::FunctionConstantValue>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271B404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::FunctionConstantValue>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271B47C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneFunctionConstantValue<Mtl::FunctionConstantValue>(uint64_t a1, Air::PipelineScript *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  __int128 v46;
  __int128 *v47;
  __int128 v48;
  __int128 *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 *v53;
  __int128 v54;
  __int128 *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 *v59;
  __int128 v60;
  __int128 *v61;
  __int128 v62;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unsigned __int16 *v96;
  uint64_t v97;
  unsigned int v98;
  int String;
  const char *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 v108;
  unsigned int v109;
  unsigned __int16 *v110;
  uint64_t v111;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v4 >= 9u && (v5 = v4[4]) != 0)
    v6 = *((unsigned __int8 *)a2 + v5);
  else
    v6 = 0;
  v7 = 0;
  switch(Mtl::CloneConstantValue<Mtl::ConstantValue>(v6))
  {
    case 3u:
      LODWORD(v113) = *(_DWORD *)Air::PipelineScript::pipeline_as_tile_render(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(a1, &v113);
      goto LABEL_78;
    case 4u:
      *(_QWORD *)&v113 = *(_QWORD *)Air::PipelineScript::pipeline_as_mesh_render(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(a1, &v113);
      goto LABEL_78;
    case 5u:
      v9 = Mtl::FunctionConstantValue::value_as_ConstantFloat3(a2);
      v10 = *(_DWORD *)(v9 + 8);
      *(_QWORD *)&v113 = *(_QWORD *)v9;
      DWORD2(v113) = v10;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(a1, (uint64_t *)&v113);
      goto LABEL_78;
    case 6u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantFloat4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(a1, &v113);
      goto LABEL_78;
    case 0x10u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantHalf(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
      goto LABEL_78;
    case 0x11u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantHalf2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(a1, &v113);
      goto LABEL_78;
    case 0x12u:
      v11 = Mtl::FunctionConstantValue::value_as_ConstantHalf3(a2);
      v12 = *(_DWORD *)v11;
      WORD2(v113) = *(_WORD *)(v11 + 4);
      LODWORD(v113) = v12;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(a1, (int *)&v113);
      goto LABEL_78;
    case 0x13u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantHalf4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(a1, &v113);
      goto LABEL_78;
    case 0x1Du:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantInt(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(a1, &v113);
      goto LABEL_78;
    case 0x1Eu:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantInt2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(a1, &v113);
      goto LABEL_78;
    case 0x1Fu:
      v13 = Mtl::FunctionConstantValue::value_as_ConstantInt3(a2);
      v14 = *(_DWORD *)(v13 + 8);
      *(_QWORD *)&v113 = *(_QWORD *)v13;
      DWORD2(v113) = v14;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(a1, (uint64_t *)&v113);
      goto LABEL_78;
    case 0x20u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantInt4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(a1, &v113);
      goto LABEL_78;
    case 0x21u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantUInt(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt>(a1, &v113);
      goto LABEL_78;
    case 0x22u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantUInt2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt2>(a1, &v113);
      goto LABEL_78;
    case 0x23u:
      v15 = Mtl::FunctionConstantValue::value_as_ConstantUInt3(a2);
      v16 = *(_DWORD *)(v15 + 8);
      *(_QWORD *)&v113 = *(_QWORD *)v15;
      DWORD2(v113) = v16;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt3>(a1, (uint64_t *)&v113);
      goto LABEL_78;
    case 0x24u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantUInt4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt4>(a1, &v113);
      goto LABEL_78;
    case 0x25u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantShort(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
      goto LABEL_78;
    case 0x26u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantShort2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(a1, &v113);
      goto LABEL_78;
    case 0x27u:
      v17 = Mtl::FunctionConstantValue::value_as_ConstantShort3(a2);
      v18 = *(_DWORD *)v17;
      WORD2(v113) = *(_WORD *)(v17 + 4);
      LODWORD(v113) = v18;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(a1, (int *)&v113);
      goto LABEL_78;
    case 0x28u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantShort4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(a1, &v113);
      goto LABEL_78;
    case 0x29u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantUShort(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
      goto LABEL_78;
    case 0x2Au:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantUShort2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort2>(a1, &v113);
      goto LABEL_78;
    case 0x2Bu:
      v19 = Mtl::FunctionConstantValue::value_as_ConstantUShort3(a2);
      v20 = *(_DWORD *)v19;
      WORD2(v113) = *(_WORD *)(v19 + 4);
      LODWORD(v113) = v20;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort3>(a1, (int *)&v113);
      goto LABEL_78;
    case 0x2Cu:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantUShort4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort4>(a1, &v113);
      goto LABEL_78;
    case 0x2Du:
      LOBYTE(v113) = *(_BYTE *)Mtl::FunctionConstantValue::value_as_ConstantChar(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(a1, &v113);
      goto LABEL_78;
    case 0x2Eu:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantChar2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(a1, &v113);
      goto LABEL_78;
    case 0x2Fu:
      v21 = Mtl::FunctionConstantValue::value_as_ConstantChar3(a2);
      v22 = *(_WORD *)v21;
      BYTE2(v113) = *(_BYTE *)(v21 + 2);
      LOWORD(v113) = v22;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(a1, (__int16 *)&v113);
      goto LABEL_78;
    case 0x30u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantChar4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(a1, &v113);
      goto LABEL_78;
    case 0x31u:
      LOBYTE(v113) = *(_BYTE *)Mtl::FunctionConstantValue::value_as_ConstantUChar(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(a1, &v113);
      goto LABEL_78;
    case 0x32u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantUChar2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(a1, &v113);
      goto LABEL_78;
    case 0x33u:
      v23 = Mtl::FunctionConstantValue::value_as_ConstantUChar3(a2);
      v24 = *(_WORD *)v23;
      BYTE2(v113) = *(_BYTE *)(v23 + 2);
      LOWORD(v113) = v24;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(a1, (__int16 *)&v113);
      goto LABEL_78;
    case 0x34u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantUChar4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(a1, &v113);
      goto LABEL_78;
    case 0x35u:
      LOBYTE(v113) = *(_BYTE *)Mtl::FunctionConstantValue::value_as_ConstantBool(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool>(a1, &v113);
      goto LABEL_78;
    case 0x36u:
      LOWORD(v113) = *(_WORD *)Mtl::FunctionConstantValue::value_as_ConstantBool2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool2>(a1, &v113);
      goto LABEL_78;
    case 0x37u:
      v25 = Mtl::FunctionConstantValue::value_as_ConstantBool3(a2);
      v26 = *(_WORD *)v25;
      BYTE2(v113) = *(_BYTE *)(v25 + 2);
      LOWORD(v113) = v26;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool3>(a1, (__int16 *)&v113);
      goto LABEL_78;
    case 0x38u:
      LODWORD(v113) = *(_DWORD *)Mtl::FunctionConstantValue::value_as_ConstantBool4(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool4>(a1, &v113);
      goto LABEL_78;
    case 0x51u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantLong(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(a1, &v113);
      goto LABEL_78;
    case 0x52u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantLong2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(a1, &v113);
      goto LABEL_78;
    case 0x53u:
      v27 = Mtl::FunctionConstantValue::value_as_ConstantLong3(a2);
      v28 = *(_OWORD *)v27;
      *(_QWORD *)&v114 = *(_QWORD *)(v27 + 16);
      v113 = v28;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(a1, &v113);
      goto LABEL_78;
    case 0x54u:
      v29 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantLong4(a2);
      v30 = v29[1];
      v113 = *v29;
      v114 = v30;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(a1, &v113);
      goto LABEL_78;
    case 0x55u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantULong(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(a1, &v113);
      goto LABEL_78;
    case 0x56u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantULong2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(a1, &v113);
      goto LABEL_78;
    case 0x57u:
      v31 = Mtl::FunctionConstantValue::value_as_ConstantULong3(a2);
      v32 = *(_OWORD *)v31;
      *(_QWORD *)&v114 = *(_QWORD *)(v31 + 16);
      v113 = v32;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(a1, &v113);
      goto LABEL_78;
    case 0x58u:
      v33 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantULong4(a2);
      v34 = v33[1];
      v113 = *v33;
      v114 = v34;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(a1, &v113);
      goto LABEL_78;
    case 0x59u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantDouble(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong>(a1, &v113);
      goto LABEL_78;
    case 0x5Au:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantDouble2(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong2>(a1, &v113);
      goto LABEL_78;
    case 0x5Bu:
      v35 = Mtl::FunctionConstantValue::value_as_ConstantDouble3(a2);
      v36 = *(_QWORD *)(v35 + 16);
      v113 = *(_OWORD *)v35;
      *(_QWORD *)&v114 = v36;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong3>(a1, &v113);
      goto LABEL_78;
    case 0x5Cu:
      v37 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantDouble4(a2);
      v38 = v37[1];
      v113 = *v37;
      v114 = v38;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong4>(a1, &v113);
      goto LABEL_78;
    case 0x5Du:
      v39 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantFloat8(a2);
      v40 = v39[1];
      v113 = *v39;
      v114 = v40;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(a1, &v113);
      goto LABEL_78;
    case 0x5Eu:
      v41 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantFloat16(a2);
      v42 = *v41;
      v43 = v41[1];
      v44 = v41[3];
      v115 = v41[2];
      v116 = v44;
      v113 = v42;
      v114 = v43;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(a1, &v113);
      goto LABEL_78;
    case 0x5Fu:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantHalf8(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(a1, &v113);
      goto LABEL_78;
    case 0x60u:
      v45 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantHalf16(a2);
      v46 = v45[1];
      v113 = *v45;
      v114 = v46;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(a1, &v113);
      goto LABEL_78;
    case 0x61u:
      v47 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantInt8(a2);
      v48 = v47[1];
      v113 = *v47;
      v114 = v48;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(a1, &v113);
      goto LABEL_78;
    case 0x62u:
      v49 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantInt16(a2);
      v50 = *v49;
      v51 = v49[1];
      v52 = v49[3];
      v115 = v49[2];
      v116 = v52;
      v113 = v50;
      v114 = v51;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(a1, &v113);
      goto LABEL_78;
    case 0x63u:
      v53 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantUInt8(a2);
      v54 = v53[1];
      v113 = *v53;
      v114 = v54;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt8>(a1, &v113);
      goto LABEL_78;
    case 0x64u:
      v55 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantUInt16(a2);
      v56 = *v55;
      v57 = v55[1];
      v58 = v55[3];
      v115 = v55[2];
      v116 = v58;
      v113 = v56;
      v114 = v57;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantInt16>(a1, &v113);
      goto LABEL_78;
    case 0x65u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantShort8(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(a1, &v113);
      goto LABEL_78;
    case 0x66u:
      v59 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantShort16(a2);
      v60 = v59[1];
      v113 = *v59;
      v114 = v60;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(a1, &v113);
      goto LABEL_78;
    case 0x67u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantUShort8(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort8>(a1, &v113);
      goto LABEL_78;
    case 0x68u:
      v61 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantUShort16(a2);
      v62 = v61[1];
      v113 = *v61;
      v114 = v62;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort16>(a1, &v113);
      goto LABEL_78;
    case 0x69u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantChar8(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(a1, &v113);
      goto LABEL_78;
    case 0x6Au:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantChar16(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(a1, &v113);
      goto LABEL_78;
    case 0x6Bu:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantUChar8(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(a1, &v113);
      goto LABEL_78;
    case 0x6Cu:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantUChar16(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(a1, &v113);
      goto LABEL_78;
    case 0x6Du:
      v63 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantLong8(a2);
      v64 = *v63;
      v65 = v63[1];
      v66 = v63[3];
      v115 = v63[2];
      v116 = v66;
      v113 = v64;
      v114 = v65;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(a1, &v113);
      goto LABEL_78;
    case 0x6Eu:
      v67 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantLong16(a2);
      v68 = *v67;
      v69 = v67[1];
      v70 = v67[3];
      v115 = v67[2];
      v116 = v70;
      v113 = v68;
      v114 = v69;
      v71 = v67[4];
      v72 = v67[5];
      v73 = v67[7];
      v119 = v67[6];
      v120 = v73;
      v117 = v71;
      v118 = v72;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(a1, &v113);
      goto LABEL_78;
    case 0x6Fu:
      v74 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantULong8(a2);
      v75 = *v74;
      v76 = v74[1];
      v77 = v74[3];
      v115 = v74[2];
      v116 = v77;
      v113 = v75;
      v114 = v76;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(a1, &v113);
      goto LABEL_78;
    case 0x70u:
      v78 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantULong16(a2);
      v79 = *v78;
      v80 = v78[1];
      v81 = v78[3];
      v115 = v78[2];
      v116 = v81;
      v113 = v79;
      v114 = v80;
      v82 = v78[4];
      v83 = v78[5];
      v84 = v78[7];
      v119 = v78[6];
      v120 = v84;
      v117 = v82;
      v118 = v83;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(a1, &v113);
      goto LABEL_78;
    case 0x71u:
      v85 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantDouble8(a2);
      v86 = *v85;
      v87 = v85[1];
      v88 = v85[3];
      v115 = v85[2];
      v116 = v88;
      v113 = v86;
      v114 = v87;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong8>(a1, &v113);
      goto LABEL_78;
    case 0x72u:
      v89 = (__int128 *)Mtl::FunctionConstantValue::value_as_ConstantDouble16(a2);
      v90 = *v89;
      v91 = v89[1];
      v92 = v89[3];
      v115 = v89[2];
      v116 = v92;
      v113 = v90;
      v114 = v91;
      v93 = v89[4];
      v94 = v89[5];
      v95 = v89[7];
      v119 = v89[6];
      v120 = v95;
      v117 = v93;
      v118 = v94;
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantLong16>(a1, &v113);
      goto LABEL_78;
    case 0x77u:
      *(_QWORD *)&v113 = *(_QWORD *)Mtl::FunctionConstantValue::value_as_ConstantBool8(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool8>(a1, &v113);
      goto LABEL_78;
    case 0x78u:
      v113 = *(_OWORD *)Mtl::FunctionConstantValue::value_as_ConstantBool16(a2);
      v8 = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantBool16>(a1, &v113);
LABEL_78:
      v7 = v8;
      break;
    default:
      break;
  }
  v96 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v96 >= 5u)
  {
    v97 = v96[2];
    if (v97)
    {
      v98 = *((unsigned __int8 *)a2 + v97);
      if (v98 >= 3)
        goto LABEL_100;
      if (v98 == 2)
      {
        v100 = (const char *)Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(a2);
        if (v100)
        {
          String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, v100 + 4, *(unsigned int *)v100);
          goto LABEL_87;
        }
      }
      else if (v98 == 1)
      {
        LOWORD(v113) = *(_WORD *)Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(a2);
        String = flatbuffers::FlatBufferBuilder::CreateStruct<Air::ConstantShort>(a1, &v113);
LABEL_87:
        v101 = String;
        goto LABEL_89;
      }
    }
  }
  v101 = 0;
LABEL_89:
  *(_BYTE *)(a1 + 70) = 1;
  v102 = *(_QWORD *)(a1 + 40);
  v103 = *(_QWORD *)(a1 + 48);
  v104 = *(_QWORD *)(a1 + 32);
  if (v7)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v7);
  if (v101)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v101);
  v105 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v105 >= 9u && (v106 = v105[4]) != 0)
    v107 = *((unsigned __int8 *)a2 + v106);
  else
    v107 = 0;
  v108 = Mtl::CloneConstantValue<Mtl::ConstantValue>(v107);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v108, 0);
  v109 = 0;
  v110 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v110 >= 5u)
  {
    v111 = v110[2];
    if (v111)
    {
      v109 = *((unsigned __int8 *)a2 + v111);
      if (v109 >= 3)
LABEL_100:
        abort();
    }
    else
    {
      v109 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v109, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v104 - (unsigned __int16)v103 + (unsigned __int16)v102);
}

uint64_t Mtl::CloneConstantValue<Mtl::ConstantValue>(uint64_t result)
{
  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
    case 16:
    case 17:
    case 18:
    case 19:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 119:
    case 120:
      return result;
    default:
      abort();
  }
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 5) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 6) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 16) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 17) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 18) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 19) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 29) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 30) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 31) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 32)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 33)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 34)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 35)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 36)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 37)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 38)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 39)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 40)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 41)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 42)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 43)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 44)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 45)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 46)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 47)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 48)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 49)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 50)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 51)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 52)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 53)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 54)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 55)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 56)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 81)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 82)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 83)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 84)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 85)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 86)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 87)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 88)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 89)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble2(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 90)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble3(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 91)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble4(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 92)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 93)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantFloat16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 94)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 95)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantHalf16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 96)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 97)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantInt16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 98)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 99)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUInt16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 100)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 101)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantShort16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 102)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 103)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUShort16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 104)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 105)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantChar16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 106)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 107)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantUChar16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 108)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 109)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantLong16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 110)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 111)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantULong16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 112)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 113)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantDouble16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 114)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool8(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 119)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t Mtl::FunctionConstantValue::value_as_ConstantBool16(Mtl::FunctionConstantValue *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v3;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 < 9 || !v1[4])
    return 0;
  v3 = 0;
  if (v2 >= 0xB && *((_BYTE *)this + v1[4]) == 120)
  {
    v3 = v1[5];
    if (v1[5])
      v3 += (uint64_t)this + *(unsigned int *)((char *)this + v3);
  }
  return v3;
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching5GraphEEEZNS3_20CloneStitchedLibraryINS3_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::FunctionStitching::CloneGraph<Mtl::FunctionStitching::Graph>(a4, (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Graph>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271D918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneStitchedLibraryINS5_15StitchedLibraryEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30StitchedLibraryCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18271D9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Graph>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271DA74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneGraph<Mtl::FunctionStitching::Graph>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  int String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unsigned __int16 v17;
  const char *v19;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 0xBu && (v7 = *((unsigned __int16 *)v6 + 5)) != 0)
  {
    v19 = &a2[v7 + *(unsigned int *)&a2[v7]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    v19 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE0_vEENS2_INS_6VectorISC_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v19, &v19, a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (v11 = *((unsigned __int16 *)v10 + 2)) != 0)
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  else
    String = 0;
  *(_BYTE *)(a1 + 70) = 1;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v8);
  v16 = &a2[-*(int *)a2];
  if (*(unsigned __int16 *)v16 >= 9u)
  {
    v17 = *((_WORD *)v16 + 4);
    if (v17)
    {
      LODWORD(v19) = *(_DWORD *)&a2[v17];
      flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)a1, 8, &v19);
    }
  }
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v9);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE_vEENS2_INS_6VectorISC_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>(a4, (Mtl::FunctionStitching::Attribute *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271DD14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphINS4_5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_IS8_EEE4typeERS0_PKSC_EUlmPvE0_vEENS2_INS_6VectorISC_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::FunctionStitching::CloneNode<Mtl::FunctionStitching::Node>(a4, (Mtl::FunctionStitching::Node *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271DDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271DE6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>(uint64_t a1, Mtl::FunctionStitching::Attribute *this)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  int v14;

  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 < 5u)
    goto LABEL_7;
  v5 = v4[2];
  if (!v5)
    goto LABEL_7;
  v6 = *((unsigned __int8 *)this + v5);
  if (v6 >= 3)
    goto LABEL_11;
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(this);
      goto LABEL_15;
    }
LABEL_7:
    *(_BYTE *)(a1 + 70) = 1;
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 32);
    goto LABEL_8;
  }
  Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(this);
LABEL_15:
  *(_BYTE *)(a1 + 70) = 1;
  v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
  *(_BYTE *)(a1 + 70) = 1;
  v8 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  if (v14)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v14);
LABEL_8:
  v10 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v10 >= 5u && (v11 = v10[2]) != 0)
  {
    v12 = *((unsigned __int8 *)this + v11);
    if (v12 >= 3)
LABEL_11:
      abort();
  }
  else
  {
    v12 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v12, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v7 + (unsigned __int16)v8);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271E004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneNode<Mtl::FunctionStitching::Node>(uint64_t a1, Mtl::FunctionStitching::Node *this)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;

  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = *(_DWORD *)((char *)this + v5);
    if (v6 >= 0xC)
      goto LABEL_22;
    switch(v6)
    {
      case 1u:
        v7 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v7);
        break;
      case 2u:
        v12 = (const char *)AirReflection::Node::node_as_KernelFunction(this);
        v8 = Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(a1, v12);
        break;
      case 3u:
        v13 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, v13);
        break;
      case 4u:
        v14 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        v8 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, v14);
        break;
      case 5u:
        v15 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        v8 = Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(a1, v15);
        break;
      case 6u:
        v16 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v16);
        break;
      case 7u:
        v17 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v17);
        break;
      case 8u:
        v18 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v18);
        break;
      case 9u:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        *(_BYTE *)(a1 + 70) = 1;
        v8 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        break;
      case 0xAu:
        v19 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        v8 = Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(a1, v19);
        break;
      case 0xBu:
        v20 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        v8 = Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(a1, v20);
        break;
      default:
        goto LABEL_6;
    }
    *(_BYTE *)(a1 + 70) = 1;
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 32);
    if (v8)
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  }
  else
  {
LABEL_6:
    *(_BYTE *)(a1 + 70) = 1;
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 32);
  }
  v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 5u && (v22 = v21[2]) != 0)
  {
    v23 = *(_DWORD *)((char *)this + v22);
    if (v23 >= 0xC)
LABEL_22:
      abort();
  }
  else
  {
    v23 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v23, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v9 + (unsigned __int16)v10);
}

uint64_t Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(uint64_t a1, int *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  int v5;
  __int16 v6;

  *(_BYTE *)(a1 + 70) = 1;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
    v5 = *(int *)((char *)a2 + v4);
  else
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v5, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  uint64_t v11;
  int String;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 9u && (v7 = *((unsigned __int16 *)v6 + 4)) != 0)
  {
    v17 = &a2[v7 + *(unsigned int *)&a2[v7]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(a1, *(unsigned int *)v17, &v17);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)&a2[v5] >= 7u && *(_WORD *)&a2[v5 + 6])
  {
    v17 = &a2[*(unsigned __int16 *)&a2[v5 + 6] + *(unsigned int *)&a2[*(unsigned __int16 *)&a2[v5 + 6]]];
    v9 = _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(a1, *(unsigned int *)v17, &v17);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v9 = 0;
  }
  v10 = &a2[v5];
  if (*(unsigned __int16 *)v10 >= 5u && (v11 = *((unsigned __int16 *)v10 + 2)) != 0)
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v11 + 4 + *(unsigned int *)&a2[v11]], *(unsigned int *)&a2[v11 + *(unsigned int *)&a2[v11]]);
  else
    String = 0;
  *(_BYTE *)(a1 + 70) = 1;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v9);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (v5 = v4[3]) != 0)
    v6 = *(int *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 6, v6, 0);
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 5u)
  {
    v11 = v10[2];
    if (v11)
    {
      if (*(int *)((char *)a2 + v11))
        abort();
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, 0, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 5u && (v7 = v6[2]) != 0)
  {
    v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, (int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7)));
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v12 >= 7u && (v13 = v12[3]) != 0)
    v14 = *(_QWORD *)((char *)a2 + v13);
  else
    v14 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v14, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v8);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v10 + (unsigned __int16)v9);
}

uint64_t Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(uint64_t a1, int *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
  {
    v5 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, (int *)((char *)a2 + v4 + *(unsigned int *)((char *)a2 + v4)));
    *(_BYTE *)(a1 + 70) = 1;
    v7 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 32);
    if (v5)
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v5);
  }
  else
  {
    *(_BYTE *)(a1 + 70) = 1;
    v7 = *(_QWORD *)(a1 + 40);
    v6 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 32);
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v8 - (unsigned __int16)v6 + (unsigned __int16)v7);
}

uint64_t Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(uint64_t a1, int *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;

  *(_BYTE *)(a1 + 70) = 1;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
  {
    v5 = *(int *)((char *)a2 + v4);
    if (v5 >= 2)
      abort();
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v5, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 v11;
  int v13;
  unsigned int *v14;

  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (v5 = v4[3]) != 0)
  {
    v14 = (unsigned int *)((char *)a2 + v5 + *(unsigned int *)((char *)a2 + v5));
    v6 = _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(a1, *v14, &v14);
    *(_BYTE *)(a1 + 70) = 1;
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 32);
    if (v6)
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v6);
  }
  else
  {
    *(_BYTE *)(a1 + 70) = 1;
    v8 = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 32);
  }
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 5u)
  {
    v11 = v10[2];
    if (v11)
    {
      v13 = *(int *)((char *)a2 + v11);
      flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)a1, 4, &v13);
    }
  }
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v7 + (unsigned __int16)v8);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder21CreateVectorOfStructsIN3Mtl17FunctionStitching6NodeIdEZNS3_17CloneFunctionNodeINS3_12FunctionNodeEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_27FunctionNodeCloneCompatibleET_EE5valueENS_6OffsetIS6_EEE4typeERS0_PKSA_EUlmPS4_PvE_vEENSB_INS_6VectorISH_EEEEmT0_PT1_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = flatbuffers::FlatBufferBuilder::StartVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, a2);
  if (a2)
  {
    v7 = 0;
    v8 = *a3 + 4;
    v9 = a2;
    do
    {
      *(_DWORD *)(v6 + v7) = *(_DWORD *)(v8 + (v7 & 0x3FFFFFFFCLL));
      v7 += 4;
      --v9;
    }
    while (v9);
  }
  *(_BYTE *)(a1 + 70) = 0;
  return flatbuffers::FlatBufferBuilder::PushElement<unsigned int>(a1, a2);
}

uint64_t flatbuffers::FlatBufferBuilder::StartVectorOfStructs<Mtl::FunctionStitching::NodeId>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = 4 * a2;
  *(_BYTE *)(a1 + 70) = 1;
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, 4 * a2, 4uLL);
  flatbuffers::FlatBufferBuilder::PreAlign((flatbuffers::FlatBufferBuilder *)a1, v4, 4uLL);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5 - *(_QWORD *)(a1 + 56) < (unint64_t)(4 * a2))
  {
    flatbuffers::vector_downward::reallocate((flatbuffers::vector_downward *)a1, v4);
    v5 = *(_QWORD *)(a1 + 48);
  }
  result = v5 - v4;
  *(_QWORD *)(a1 + 48) = v5 - v4;
  return result;
}

_QWORD *std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271E91C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneLinkedFunctions<Mtl::LinkedFunctions>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 0xBu && (v7 = v6[5]) != 0)
  {
    v18 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl13FunctionGroupEEEZNS3_20CloneLinkedFunctionsINS3_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 9u && *(_WORD *)((char *)a2 + v5 + 8))
  {
    v18 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 8)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 8)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, (flatbuffers::FlatBufferBuilder *)a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 7u && *(_WORD *)((char *)a2 + v5 + 6))
  {
    v18 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 6)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 6)));
    v10 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, (flatbuffers::FlatBufferBuilder *)a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v10 = 0;
  }
  v11 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v11 >= 5u && (v12 = v11[2]) != 0)
  {
    v18 = (unsigned int *)((char *)a2 + v12 + *(unsigned int *)((char *)a2 + v12));
    v13 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v18, &v18, (flatbuffers::FlatBufferBuilder *)a1);
  }
  else
  {
    v13 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v9);
  if (v10)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v10);
  if (v13)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v13);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v16 - (unsigned __int16)v15 + (unsigned __int16)v14);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_30CloneComputePipelineDescriptorINS3_25ComputePipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_40ComputePipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271EBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneStageInputOutputDescriptor<Mtl::StageInputOutputDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v20;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v20 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl22BufferLayoutDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v20, &v20, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  if (*(unsigned __int16 *)((char *)a2 + v5) >= 5u && *(_WORD *)((char *)a2 + v5 + 4))
  {
    v20 = (unsigned int *)((char *)a2
                         + *(unsigned __int16 *)((char *)a2 + v5 + 4)
                         + *(unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v5 + 4)));
    v9 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl19AttributeDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v20, &v20, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v9 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v10 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
    v12 = *(int *)((char *)a2 + v11);
  else
    v12 = 0;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v12, 0);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  if (v9)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v9);
  v16 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v16 >= 0xBu && (v17 = v16[5]) != 0)
  {
    v18 = *((unsigned __int8 *)a2 + v17);
    if (v18 >= 2)
      abort();
  }
  else
  {
    v18 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, v18, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v15 - (unsigned __int16)v14 + (unsigned __int16)v13);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl13FunctionGroupEEEZNS3_20CloneLinkedFunctionsINS3_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionGroup>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneFunctionGroup<Mtl::FunctionGroup>(a4, (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionGroup>,std::allocator<flatbuffers::Offset<Mtl::FunctionGroup>>>(std::vector<flatbuffers::Offset<Mtl::FunctionGroup>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271EE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18271EF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18271F050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl20CloneLinkedFunctionsINS5_15LinkedFunctionsEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_30LinkedFunctionsCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18271F134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::FunctionGroup>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271F1AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneFunctionGroup<Mtl::FunctionGroup>(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  int String;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v16;

  v4 = *(int *)a2;
  v5 = -v4;
  v6 = &a2[-v4];
  if (*(unsigned __int16 *)v6 >= 7u && (v7 = *((unsigned __int16 *)v6 + 3)) != 0)
  {
    v16 = &a2[v7 + *(unsigned int *)&a2[v7]];
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl18CloneFunctionGroupINS5_13FunctionGroupEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_28FunctionGroupCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *(unsigned int *)v16, &v16, (flatbuffers::FlatBufferBuilder *)a1);
    v5 = -(uint64_t)*(int *)a2;
  }
  else
  {
    v8 = 0;
  }
  v9 = &a2[v5];
  if (*(unsigned __int16 *)v9 >= 5u && (v10 = *((unsigned __int16 *)v9 + 2)) != 0)
    String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)a1, &a2[v10 + 4 + *(unsigned int *)&a2[v10]], *(unsigned int *)&a2[v10 + *(unsigned int *)&a2[v10]]);
  else
    String = 0;
  *(_BYTE *)(a1 + 70) = 1;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  if (String)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetINS_6StringEEEZN3Mtl18CloneFunctionGroupINS5_13FunctionGroupEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS5_28FunctionGroupCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, flatbuffers::FlatBufferBuilder *a4)
{
  unint64_t v6;
  uint64_t v8;
  const char *v9;
  int String;
  _BYTE *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  _BYTE *v16;

  v6 = a2;
  std::vector<flatbuffers::Offset<flatbuffers::String>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = (const char *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4));
      String = flatbuffers::FlatBufferBuilder::CreateString(a4, v9 + 4, *(unsigned int *)v9);
      v11 = __p;
      *(_DWORD *)((char *)__p + v8) = String;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v11 = __p;
  }
  if (v16 == v11)
    v12 = &flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v12 = v11;
  v13 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v12, (v16 - v11) >> 2);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_18271F3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271F41C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  unsigned int v5;
  __int16 v6;

  *(_BYTE *)(a1 + 70) = 1;
  v3 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
  {
    v5 = *((unsigned __int8 *)a2 + v4);
    if (v5 >= 3)
      abort();
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v5, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v6);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl22BufferLayoutDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneBufferLayoutDescriptor<Mtl::BufferLayoutDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271F574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl19AttributeDescriptorEEEZNS3_31CloneStageInputOutputDescriptorINS3_26StageInputOutputDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_41StageInputOutputDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneAttributeDescriptor<Mtl::AttributeDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::AttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::AttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271F654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::BufferLayoutDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271F6CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneBufferLayoutDescriptor<Mtl::BufferLayoutDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  uint64_t v15;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 9u && (v5 = v4[4]) != 0)
    v6 = *(_QWORD *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v6, 0);
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 7u && (v11 = v10[3]) != 0)
    v12 = *(_QWORD *)((char *)a2 + v11);
  else
    v12 = 1;
  v13 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v12, 1);
  v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    v15 = v14[2];
    if (v15)
    {
      v13 = *((unsigned __int8 *)a2 + v15);
      if (v13 >= 9)
        abort();
    }
    else
    {
      v13 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v13, 1);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::AttributeDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271F848(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneAttributeDescriptor<Mtl::AttributeDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unint64_t v16;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 7u && (v5 = v4[3]) != 0)
    v6 = *(_QWORD *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v6, 0);
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 9u && (v11 = v10[4]) != 0)
    v12 = *(int *)((char *)a2 + v11);
  else
    v12 = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 8, v12, 0);
  v13 = 0;
  v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    v15 = v14[2];
    if (v15)
    {
      v16 = *((unsigned __int8 *)a2 + v15);
      if (v16 >= 0x38 || ((0xFFE7FFFFFFFFFFuLL >> v16) & 1) == 0)
        abort();
      v13 = byte_18280BA62[(char)v16];
    }
    else
    {
      v13 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v13, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271FA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271FB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_29CloneRenderPipelineDescriptorINS3_24RenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_39RenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneRenderPipelineColorAttachmentDescriptor<Mtl::RenderPipelineColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_18271FC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneVertexDescriptor<Mtl::VertexDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v16;

  v4 = *a2;
  v5 = -v4;
  v6 = (unsigned __int16 *)((char *)a2 - v4);
  if (*v6 >= 7u && (v7 = v6[3]) != 0)
  {
    v16 = (unsigned int *)((char *)a2 + v7 + *(unsigned int *)((char *)a2 + v7));
    v8 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl28VertexBufferLayoutDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v16, &v16, a1);
    v5 = -(uint64_t)*a2;
  }
  else
  {
    v8 = 0;
  }
  v9 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v9 >= 5u && (v10 = v9[2]) != 0)
  {
    v16 = (unsigned int *)((char *)a2 + v10 + *(unsigned int *)((char *)a2 + v10));
    v11 = _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl25VertexAttributeDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_((flatbuffers::FlatBufferBuilder *)a1, *v16, &v16, a1);
  }
  else
  {
    v11 = 0;
  }
  *(_BYTE *)(a1 + 70) = 1;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 32);
  if (v8)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  if (v11)
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v11);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
}

uint64_t Mtl::ClonePixelFormat<Mtl::PixelFormat>(uint64_t result)
{
  switch((int)result)
  {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 53:
    case 54:
    case 55:
    case 60:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 80:
    case 81:
    case 84:
    case 85:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 103:
    case 104:
    case 105:
    case 110:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 123:
    case 124:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 140:
    case 141:
    case 142:
    case 143:
    case 150:
    case 151:
    case 152:
    case 153:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 170:
    case 172:
    case 174:
    case 176:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 240:
    case 241:
    case 250:
    case 252:
    case 253:
    case 255:
    case 260:
    case 261:
    case 262:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 313:
    case 314:
    case 315:
    case 323:
    case 324:
    case 325:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 560:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 615:
    case 616:
    case 617:
    case 618:
    case 619:
    case 620:
    case 621:
    case 622:
    case 623:
    case 624:
    case 625:
    case 626:
    case 627:
    case 628:
    case 629:
    case 630:
    case 631:
    case 632:
    case 633:
    case 634:
    case 635:
    case 636:
    case 637:
    case 638:
    case 639:
    case 640:
    case 641:
    case 642:
    case 643:
    case 644:
    case 645:
      return result;
    default:
      abort();
  }
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18271FDE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneRenderPipelineColorAttachmentDescriptor<Mtl::RenderPipelineColorAttachmentDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  _BOOL4 v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  int v34;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
    v6 = *(unsigned __int16 *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v6);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, v10, 0);
  v11 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v11 >= 0x15u && (v12 = v11[10]) != 0)
  {
    v13 = *((unsigned __int8 *)a2 + v12);
    if (v13 >= 0x13)
      goto LABEL_31;
  }
  else
  {
    v13 = 1;
  }
  v14 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v13, 1);
  v15 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v15 >= 0x13u)
  {
    v16 = v15[9];
    if (v16)
    {
      v14 = *((unsigned __int8 *)a2 + v16);
      if (v14 >= 0x13)
LABEL_31:
        abort();
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, v14, 1);
  v17 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v17 >= 0x11u && (v18 = v17[8]) != 0)
  {
    v19 = *((unsigned __int8 *)a2 + v18);
    if (v19 >= 0x13)
      goto LABEL_31;
  }
  else
  {
    v19 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, v19, 0);
  v20 = 0;
  v21 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v21 >= 0xFu)
  {
    v22 = v21[7];
    if (v22)
    {
      v20 = *((unsigned __int8 *)a2 + v22);
      if (v20 >= 0x13)
        goto LABEL_31;
    }
    else
    {
      v20 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, v20, 0);
  v23 = 0;
  v24 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v24 >= 0xDu)
  {
    v25 = v24[6];
    if (v25)
    {
      v23 = *((unsigned __int8 *)a2 + v25);
      if (v23 >= 5)
        goto LABEL_31;
    }
    else
    {
      v23 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, v23, 0);
  v26 = 0;
  v27 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v27 >= 0xBu)
  {
    v28 = v27[5];
    if (v28)
    {
      v26 = *((unsigned __int8 *)a2 + v28);
      if (v26 >= 5)
        goto LABEL_31;
    }
    else
    {
      v26 = 0;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, v26, 0);
  v29 = 0;
  v30 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v30 >= 9u)
  {
    v31 = v30[4];
    if (v31)
      v29 = *((unsigned __int8 *)a2 + v31) != 0;
    else
      v29 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v29, 0);
  v32 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v32 >= 7u && (v33 = v32[3]) != 0)
    v34 = *((unsigned __int8 *)a2 + v33);
  else
    v34 = 15;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 6, v34, 15);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl28VertexBufferLayoutDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneVertexBufferLayoutDescriptor<Mtl::VertexBufferLayoutDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182720154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl25VertexAttributeDescriptorEEEZNS3_21CloneVertexDescriptorINS3_16VertexDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_31VertexDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneAttributeDescriptor<Mtl::AttributeDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182720234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::VertexBufferLayoutDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1827202AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneVertexBufferLayoutDescriptor<Mtl::VertexBufferLayoutDescriptor>(uint64_t a1, int *a2)
{
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v14;
  uint64_t v15;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v4 >= 9u && (v5 = v4[4]) != 0)
    v6 = *(_QWORD *)((char *)a2 + v5);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 32);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v6, 0);
  v10 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v10 >= 7u && (v11 = v10[3]) != 0)
    v12 = *(_QWORD *)((char *)a2 + v11);
  else
    v12 = 1;
  v13 = 1;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v12, 1);
  v14 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v14 >= 5u)
  {
    v15 = v14[2];
    if (v15)
    {
      v13 = *((unsigned __int8 *)a2 + v15);
      if (v13 >= 5)
        abort();
    }
    else
    {
      v13 = 1;
    }
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, v13, 1);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v9 - (unsigned __int16)v8 + (unsigned __int16)v7);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::VertexAttributeDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_182720428(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182720504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl43TileRenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneTileRenderPipelineDescriptorINS3_28TileRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43TileRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneTileRenderPipelineColorAttachmentDescriptor<Mtl::TileRenderPipelineColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1827205E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineColorAttachmentDescriptor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_18272065C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::CloneTileRenderPipelineColorAttachmentDescriptor<Mtl::TileRenderPipelineColorAttachmentDescriptor>(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int16 v10;

  *(_BYTE *)(a1 + 70) = 1;
  v4 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v6 >= 5u && (v7 = v6[2]) != 0)
    v8 = *(unsigned __int16 *)((char *)a2 + v7);
  else
    v8 = 0;
  v9 = v5 - v3 + v4;
  v10 = Mtl::ClonePixelFormat<Mtl::PixelFormat>(v8);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, v10, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, v9);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1827207B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE0_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182720894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl24PipelineBufferDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE1_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::ClonePipelineBufferDescriptor<Mtl::PipelineBufferDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>,std::allocator<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::PipelineBufferDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182720974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl39RenderPipelineColorAttachmentDescriptorEEEZNS3_33CloneMeshRenderPipelineDescriptorINS3_28MeshRenderPipelineDescriptorEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS3_43MeshRenderPipelineDescriptorCloneCompatibleET_EE5valueENS2_IS7_EEE4typeERS0_PKSB_EUlmPvE2_vEENS2_INS_6VectorISB_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::CloneRenderPipelineColorAttachmentDescriptor<Mtl::RenderPipelineColorAttachmentDescriptor>(a4, (int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4 + *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineColorAttachmentDescriptor>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182720A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v7 = (_QWORD *)(a1 + 24);
  v8 = MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(a1 + 24, *a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if ((MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(a1 + 32, i[2], *a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v9;
  i[2] = *a3;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v24 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_182720CB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  int *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  size_t v10;
  void *buffer_ptr;

  v10 = 0;
  buffer_ptr = 0;
  v3 = dispatch_data_create_map(*(dispatch_data_t *)a2, (const void **)&buffer_ptr, &v10);
  v4 = 0;
  v5 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 9u)
  {
    v7 = v6[4];
    if (!v7)
      goto LABEL_7;
    v8 = *((unsigned __int8 *)v5 + v7);
    if ((v8 - 2) < 2)
    {
      v4 = *(_QWORD *)(a2 + 8);
      goto LABEL_10;
    }
    if (v8 == 4)
    {
      v4 = *(_QWORD *)(a2 + 24) ^ *(_QWORD *)(a2 + 8) ^ *(_QWORD *)(a2 + 16);
      goto LABEL_10;
    }
    if (v8 == 1)
      v4 = *(_QWORD *)(a2 + 16) ^ *(_QWORD *)(a2 + 8);
    else
LABEL_7:
      v4 = 0;
  }
LABEL_10:
  dispatch_release(v3);
  return v4;
}

uint64_t MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  Air::PipelineScript *v7;
  Air::PipelineScript *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v18;
  BOOL v19;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  BOOL v48;
  BOOL v49;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  int *v54;
  int *v55;
  int *v57;
  int *v58;
  int *v59;
  int *v60;
  _QWORD *v61[2];
  size_t v62;
  size_t size_ptr;
  void *v64;
  void *buffer_ptr;
  uint64_t v66;
  uint64_t v67;

  v66 = a3;
  v67 = a2;
  v64 = 0;
  buffer_ptr = 0;
  v62 = 0;
  size_ptr = 0;
  v5 = dispatch_data_create_map(*(dispatch_data_t *)a2, (const void **)&buffer_ptr, &size_ptr);
  v6 = dispatch_data_create_map(*(dispatch_data_t *)a3, (const void **)&v64, &v62);
  v7 = (Air::PipelineScript *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
  v8 = (Air::PipelineScript *)((char *)v64 + *(unsigned int *)v64);
  v9 = (unsigned __int16 *)((char *)v7 - *(int *)v7);
  v10 = *v9;
  if (v10 < 9)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v11 = v9[4];
    if (v9[4])
      LODWORD(v11) = *((unsigned __int8 *)v7 + v11);
  }
  v12 = (unsigned __int16 *)((char *)v8 - *(int *)v8);
  if (*v12 < 9u)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = v12[4];
    if (v13)
      LODWORD(v13) = *((unsigned __int8 *)v8 + v13);
  }
  if ((_DWORD)v11 == (_DWORD)v13)
  {
    v61[0] = &v67;
    v61[1] = &v66;
    if (v10 >= 9 && (v14 = v9[4]) != 0)
    {
      switch(*((_BYTE *)v7 + v14))
      {
        case 1:
          if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a3 + 32)
            || *(_QWORD *)(a2 + 40) != *(_QWORD *)(a3 + 40)
            || *(_QWORD *)(a2 + 48) != *(_QWORD *)(a3 + 48)
            || *(_QWORD *)(a2 + 56) != *(_QWORD *)(a3 + 56))
          {
            goto LABEL_128;
          }
          v18 = *(_QWORD *)(a2 + 64) == *(_QWORD *)(a3 + 64) && *(_QWORD *)(a2 + 72) == *(_QWORD *)(a3 + 72);
          v19 = v18 && *(_QWORD *)(a2 + 80) == *(_QWORD *)(a3 + 80);
          if (!v19 || *(_QWORD *)(a2 + 88) != *(_QWORD *)(a3 + 88))
            goto LABEL_128;
          v21 = 0;
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 0))goto LABEL_129;
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 1u))goto LABEL_128;
          v22 = (int *)Air::PipelineScript::pipeline_as_render(v7);
          v23 = (int *)Air::PipelineScript::pipeline_as_render(v8);
          v24 = MTLMetalScriptSerializer::EqualRenderDescriptor(v22, v23);
          goto LABEL_137;
        case 2:
          if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a3 + 32)
            || *(_QWORD *)(a2 + 40) != *(_QWORD *)(a3 + 40)
            || *(_QWORD *)(a2 + 48) != *(_QWORD *)(a3 + 48)
            || *(_QWORD *)(a2 + 56) != *(_QWORD *)(a3 + 56))
          {
            goto LABEL_128;
          }
          v28 = *(char **)(a2 + 128);
          v29 = *(char **)(a2 + 136);
          v30 = *(char **)(a3 + 128);
          v31 = *(char **)(a3 + 136);
          if (v29 - v28 != v31 - v30)
            goto LABEL_128;
          while (2)
          {
            if (v28 != v29 && v30 != v31)
            {
              if (*(_QWORD *)v28 == *(_QWORD *)v30
                && *((_QWORD *)v28 + 1) == *((_QWORD *)v30 + 1)
                && *((_QWORD *)v28 + 2) == *((_QWORD *)v30 + 2)
                && *((_QWORD *)v28 + 3) == *((_QWORD *)v30 + 3))
              {
                v28 += 32;
                v30 += 32;
                continue;
              }
              goto LABEL_128;
            }
            break;
          }
          v21 = 0;
          if (v28 == v29 && v30 == v31)
          {
            v57 = (int *)Air::PipelineScript::pipeline_as_compute(v7);
            v58 = (int *)Air::PipelineScript::pipeline_as_compute(v8);
            v24 = MTLMetalScriptSerializer::EqualComputeDescriptor(v57, v58);
            goto LABEL_137;
          }
          goto LABEL_129;
        case 3:
          if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a3 + 32)
            || *(_QWORD *)(a2 + 40) != *(_QWORD *)(a3 + 40)
            || *(_QWORD *)(a2 + 48) != *(_QWORD *)(a3 + 48)
            || *(_QWORD *)(a2 + 56) != *(_QWORD *)(a3 + 56))
          {
            goto LABEL_128;
          }
          v38 = *(char **)(a2 + 128);
          v39 = *(char **)(a2 + 136);
          v40 = *(char **)(a3 + 128);
          v41 = *(char **)(a3 + 136);
          if (v39 - v38 != v41 - v40)
            goto LABEL_128;
          break;
        case 4:
          if (*(_QWORD *)(a2 + 64) != *(_QWORD *)(a3 + 64)
            || *(_QWORD *)(a2 + 72) != *(_QWORD *)(a3 + 72)
            || *(_QWORD *)(a2 + 80) != *(_QWORD *)(a3 + 80)
            || *(_QWORD *)(a2 + 88) != *(_QWORD *)(a3 + 88))
          {
            goto LABEL_128;
          }
          v48 = *(_QWORD *)(a2 + 32) == *(_QWORD *)(a3 + 32) && *(_QWORD *)(a2 + 40) == *(_QWORD *)(a3 + 40);
          v49 = v48 && *(_QWORD *)(a2 + 48) == *(_QWORD *)(a3 + 48);
          if (!v49 || *(_QWORD *)(a2 + 56) != *(_QWORD *)(a3 + 56))
            goto LABEL_128;
          v51 = *(_QWORD *)(a2 + 96) == *(_QWORD *)(a3 + 96) && *(_QWORD *)(a2 + 104) == *(_QWORD *)(a3 + 104);
          v52 = v51 && *(_QWORD *)(a2 + 112) == *(_QWORD *)(a3 + 112);
          v53 = v52 && *(_QWORD *)(a2 + 120) == *(_QWORD *)(a3 + 120);
          if (!v53
            || !MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 1u))
          {
            goto LABEL_128;
          }
          v21 = 0;
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 0))goto LABEL_129;
          if (!MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(v61, 2u))goto LABEL_128;
          v54 = (int *)Air::PipelineScript::pipeline_as_mesh_render(v7);
          v55 = (int *)Air::PipelineScript::pipeline_as_mesh_render(v8);
          v24 = MTLMetalScriptSerializer::EqualMeshRenderDescriptor(v54, v55);
          goto LABEL_137;
        default:
          goto LABEL_128;
      }
      while (v38 != v39 && v40 != v41)
      {
        if (*(_QWORD *)v38 != *(_QWORD *)v40
          || *((_QWORD *)v38 + 1) != *((_QWORD *)v40 + 1)
          || *((_QWORD *)v38 + 2) != *((_QWORD *)v40 + 2)
          || *((_QWORD *)v38 + 3) != *((_QWORD *)v40 + 3))
        {
          goto LABEL_128;
        }
        v38 += 32;
        v40 += 32;
      }
      v21 = 0;
      if (v38 == v39 && v40 == v41)
      {
        v59 = (int *)Air::PipelineScript::pipeline_as_tile_render(v7);
        v60 = (int *)Air::PipelineScript::pipeline_as_tile_render(v8);
        v24 = MTLMetalScriptSerializer::EqualTileRenderDescriptor(v59, v60);
LABEL_137:
        v21 = v24;
      }
    }
    else
    {
LABEL_128:
      v21 = 0;
    }
LABEL_129:
    dispatch_release(v5);
    dispatch_release(v6);
  }
  else
  {
    dispatch_release(v5);
    dispatch_release(v6);
    return 0;
  }
  return v21;
}

BOOL MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual::operator()(MTLMetalScriptSerializer::pipelineDescriptorData const*,MTLMetalScriptSerializer::pipelineDescriptorData const*)const::{lambda(MTLMetalScriptSerializer::functionType)#1}::operator()(_QWORD **a1, unsigned int a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v11;
  BOOL v12;

  v2 = **a1 + 24 * a2;
  v3 = *(char **)(v2 + 128);
  v4 = *(char **)(v2 + 136);
  v5 = *a1[1] + 24 * a2;
  v6 = *(char **)(v5 + 128);
  v7 = *(char **)(v5 + 136);
  if (v4 - v3 != v7 - v6)
    return 0;
  if (v3 != v4 && v6 != v7)
  {
    while (1)
    {
      v11 = *(_QWORD *)v3 == *(_QWORD *)v6 && *((_QWORD *)v3 + 1) == *((_QWORD *)v6 + 1);
      v12 = v11 && *((_QWORD *)v3 + 2) == *((_QWORD *)v6 + 2);
      if (!v12 || *((_QWORD *)v3 + 3) != *((_QWORD *)v6 + 3))
        break;
      v3 += 32;
      v6 += 32;
      if (v3 == v4 || v6 == v7)
        return v3 == v4 && v6 == v7;
    }
    return 0;
  }
  return v3 == v4 && v6 == v7;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1EA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1EA8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
  MTLMetalScriptBuilderImpl::makeFunctionString(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addComputePipeline(MTLComputePipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1E50;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1E50;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
  MTLMetalScriptBuilderImpl::makeFunctionString(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addRenderPipeline(MTLRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1F00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1F00;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
  MTLMetalScriptBuilderImpl::makeFunctionString(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addMeshRenderPipeline(MTLMeshRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1F58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1F58;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::operator()(uint64_t a1@<X0>, void **a2@<X1>, std::string *a3@<X8>)
{
  MTLMetalScriptBuilderImpl::makeFunctionString(*(_QWORD *)(a1 + 8), *a2, a3);
}

uint64_t std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1,std::allocator<MTLMetalScriptBuilderImpl::addTileRenderPipeline(MTLTileRenderPipelineDescriptor *)::$_1>,std::string ()(objc_object  {objcproto11MTLFunction}*)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_182721798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_182721838(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && v11[3] == a2[1] && v11[4] == a2[2] && v11[5] == a2[3])
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v16 = a1 + 16;
  v17 = operator new(0x60uLL);
  v28[0] = v17;
  v28[1] = a1 + 16;
  *v17 = 0;
  v17[1] = v7;
  v18 = (*a4)[1];
  *((_OWORD *)v17 + 1) = **a4;
  *((_OWORD *)v17 + 2) = v18;
  *((_OWORD *)v17 + 3) = 0u;
  *((_OWORD *)v17 + 4) = 0u;
  *((_OWORD *)v17 + 5) = 0u;
  v29 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v8 || (float)(v20 * (float)v8) < v19)
  {
    v21 = 1;
    if (v8 >= 3)
      v21 = (v8 & (v8 - 1)) != 0;
    v22 = v21 | (2 * v8);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v24);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v28[0] = *v25;
    *v25 = v28[0];
  }
  else
  {
    *(_QWORD *)v28[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v28[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v16;
    if (*(_QWORD *)v28[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v28[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v26 >= v8)
          v26 %= v8;
      }
      else
      {
        v26 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v28[0];
    }
  }
  v11 = (_QWORD *)v28[0];
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v11;
}

void sub_182721AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::pair<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<MTLUINT256_t const,std::pair<std::string,std::string>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching9AttributeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE_vEENS2_INS_6VectorISE_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>(a4, (Mtl::FunctionStitching::Attribute *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Attribute>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182721BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _ZN11flatbuffers17FlatBufferBuilder12CreateVectorINS_6OffsetIN3Mtl17FunctionStitching4NodeEEEZNS4_10CloneGraphIN3Air17FunctionStitching5GraphEEENSt3__19enable_ifIXsr11flatbuffers11is_detectedINS4_20GraphCloneCompatibleET_EE5valueENS2_INS4_5GraphEEEE4typeERS0_PKSE_EUlmPvE0_vEENS2_INS_6VectorISE_EEEEmT0_PT1_(flatbuffers::FlatBufferBuilder *a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *v11;
  uint64_t v12;
  void *__p;
  _BYTE *v15;

  v6 = a2;
  std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>>::vector(&__p, a2);
  if (v6)
  {
    v8 = 0;
    do
    {
      v9 = Mtl::FunctionStitching::CloneNode<Air::FunctionStitching::Node>(a4, (Mtl::FunctionStitching::Node *)(*a3+ (v8 & 0x3FFFFFFFCLL)+ 4+ *(unsigned int *)(*a3 + (v8 & 0x3FFFFFFFCLL) + 4)));
      v10 = __p;
      *(_DWORD *)((char *)__p + v8) = v9;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  else
  {
    v10 = __p;
  }
  if (v15 == v10)
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Mtl::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Mtl::FunctionStitching::Node>> const&)::t;
  else
    v11 = v10;
  v12 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v11, (v15 - v10) >> 2);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_182721CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Mtl::FunctionStitching::CloneNode<Air::FunctionStitching::Node>(uint64_t a1, Mtl::FunctionStitching::Node *this)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;

  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = *(_DWORD *)((char *)this + v5);
    if (v6 >= 0xC)
      goto LABEL_22;
    switch(v6)
    {
      case 1u:
        v7 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v7);
        break;
      case 2u:
        v12 = (const char *)AirReflection::Node::node_as_KernelFunction(this);
        v8 = Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(a1, v12);
        break;
      case 3u:
        v13 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, v13);
        break;
      case 4u:
        v14 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        v8 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, v14);
        break;
      case 5u:
        v15 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        v8 = Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(a1, v15);
        break;
      case 6u:
        v16 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v16);
        break;
      case 7u:
        v17 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v17);
        break;
      case 8u:
        v18 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v18);
        break;
      case 9u:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        *(_BYTE *)(a1 + 70) = 1;
        v8 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        break;
      case 0xAu:
        v19 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        v8 = Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(a1, v19);
        break;
      case 0xBu:
        v20 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        v8 = Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(a1, v20);
        break;
      default:
        goto LABEL_6;
    }
    *(_BYTE *)(a1 + 70) = 1;
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 32);
    if (v8)
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  }
  else
  {
LABEL_6:
    *(_BYTE *)(a1 + 70) = 1;
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 32);
  }
  v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 5u && (v22 = v21[2]) != 0)
  {
    v23 = *(_DWORD *)((char *)this + v22);
    if (v23 >= 0xC)
LABEL_22:
      abort();
  }
  else
  {
    v23 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v23, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v9 + (unsigned __int16)v10);
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t **v7;
  unint64_t **v8;
  unint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t **v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t **v25;
  unint64_t **v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t *v37;
  unint64_t **v38;
  unint64_t **v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t **v48;
  BOOL v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  unint64_t **v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t **v64;
  unint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t **v80;
  unint64_t *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  unint64_t **v86;
  unint64_t **v87;
  unint64_t **v88;
  unint64_t *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  unint64_t **v94;
  BOOL v96;
  uint64_t v97;
  unint64_t **v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t **v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t **v113;
  unint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t **v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t **v135;
  unint64_t **v136;
  unint64_t **v137;
  unint64_t *v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t **v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  unint64_t **v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  unint64_t *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  unint64_t **v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t *v176;
  unint64_t v177;
  unint64_t v178;
  int v179;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v81 = *(a2 - 1);
        v82 = *v9;
        v83 = bswap64(*v81);
        v84 = bswap64(**v9);
        if (v83 == v84
          && (v83 = bswap64(v81[1]), v84 = bswap64(v82[1]), v83 == v84)
          && (v83 = bswap64(v81[2]), v84 = bswap64(v82[2]), v83 == v84)
          && (v83 = bswap64(v81[3]), v84 = bswap64(v82[3]), v83 == v84))
        {
          v85 = 0;
        }
        else if (v83 < v84)
        {
          v85 = -1;
        }
        else
        {
          v85 = 1;
        }
        if (v85 < 0)
        {
          *v9 = v81;
          *(a2 - 1) = v82;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        v86 = v9 + 1;
        v87 = v9 + 2;
        v88 = v9 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v9, v9 + 1, v9 + 2, v9 + 3);
        v89 = *(a2 - 1);
        v90 = v9[3];
        v91 = bswap64(*v89);
        v92 = bswap64(*v90);
        if (v91 == v92
          && (v91 = bswap64(v89[1]), v92 = bswap64(v90[1]), v91 == v92)
          && (v91 = bswap64(v89[2]), v92 = bswap64(v90[2]), v91 == v92)
          && (v91 = bswap64(v89[3]), v92 = bswap64(v90[3]), v91 == v92))
        {
          v93 = 0;
        }
        else if (v91 < v92)
        {
          v93 = -1;
        }
        else
        {
          v93 = 1;
        }
        if (v93 < 0)
        {
          *v88 = v89;
          *(a2 - 1) = v90;
          v158 = *v88;
          v159 = *v87;
          v160 = bswap64(**v88);
          v161 = bswap64(**v87);
          if (v160 != v161)
            goto LABEL_313;
          v160 = bswap64(v158[1]);
          v161 = bswap64(v159[1]);
          if (v160 == v161
            && (v160 = bswap64(v158[2]), v161 = bswap64(v159[2]), v160 == v161)
            && (v160 = bswap64(v158[3]), v161 = bswap64(v159[3]), v160 == v161))
          {
            v162 = 0;
          }
          else
          {
LABEL_313:
            v162 = v160 < v161 ? -1 : 1;
          }
          if (v162 < 0)
          {
            *v87 = v158;
            *v88 = v159;
            v172 = *v86;
            v173 = bswap64(*v158);
            v174 = bswap64(**v86);
            if (v173 != v174)
              goto LABEL_322;
            v173 = bswap64(v158[1]);
            v174 = bswap64(v172[1]);
            if (v173 == v174
              && (v173 = bswap64(v158[2]), v174 = bswap64(v172[2]), v173 == v174)
              && (v173 = bswap64(v158[3]), v174 = bswap64(v172[3]), v173 == v174))
            {
              v175 = 0;
            }
            else
            {
LABEL_322:
              v175 = v173 < v174 ? -1 : 1;
            }
            if (v175 < 0)
            {
              v9[1] = v158;
              v9[2] = v172;
              v176 = *v9;
              v177 = bswap64(*v158);
              v178 = bswap64(**v9);
              if (v177 != v178)
                goto LABEL_331;
              v177 = bswap64(v158[1]);
              v178 = bswap64(v176[1]);
              if (v177 == v178
                && (v177 = bswap64(v158[2]), v178 = bswap64(v176[2]), v177 == v178)
                && (v177 = bswap64(v158[3]), v178 = bswap64(v176[3]), v177 == v178))
              {
                v179 = 0;
              }
              else
              {
LABEL_331:
                v179 = v177 < v178 ? -1 : 1;
              }
              if (v179 < 0)
              {
                *v9 = v158;
                v9[1] = v176;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v94 = v9 + 1;
          v96 = v9 == a2 || v94 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v96)
            {
              v97 = 0;
              v98 = v9;
              do
              {
                v100 = *v98;
                v99 = v98[1];
                v98 = v94;
                v101 = bswap64(*v99);
                v102 = bswap64(*v100);
                if (v101 != v102
                  || (v101 = bswap64(v99[1]), v102 = bswap64(v100[1]), v101 != v102)
                  || (v101 = bswap64(v99[2]), v102 = bswap64(v100[2]), v101 != v102)
                  || (v101 = bswap64(v99[3]), v102 = bswap64(v100[3]), v101 != v102))
                {
                  v103 = v101 < v102 ? -1 : 1;
                  if (v103 < 0)
                  {
                    v104 = v97;
                    while (1)
                    {
                      *(unint64_t **)((char *)v9 + v104 + 8) = v100;
                      if (!v104)
                        break;
                      v100 = *(unint64_t **)((char *)v9 + v104 - 8);
                      v105 = bswap64(*v99);
                      v106 = bswap64(*v100);
                      if (v105 == v106
                        && (v105 = bswap64(v99[1]), v106 = bswap64(v100[1]), v105 == v106)
                        && (v105 = bswap64(v99[2]), v106 = bswap64(v100[2]), v105 == v106)
                        && (v105 = bswap64(v99[3]), v106 = bswap64(v100[3]), v105 == v106))
                      {
                        v107 = 0;
                      }
                      else if (v105 < v106)
                      {
                        v107 = -1;
                      }
                      else
                      {
                        v107 = 1;
                      }
                      v104 -= 8;
                      if ((v107 & 0x80000000) == 0)
                      {
                        v108 = (unint64_t **)((char *)v9 + v104 + 8);
                        goto LABEL_187;
                      }
                    }
                    v108 = v9;
LABEL_187:
                    *v108 = v99;
                  }
                }
                v94 = v98 + 1;
                v97 += 8;
              }
              while (v98 + 1 != a2);
            }
          }
          else if (!v96)
          {
            do
            {
              v164 = *v7;
              v163 = v7[1];
              v7 = v94;
              v165 = bswap64(*v163);
              v166 = bswap64(*v164);
              if (v165 != v166
                || (v165 = bswap64(v163[1]), v166 = bswap64(v164[1]), v165 != v166)
                || (v165 = bswap64(v163[2]), v166 = bswap64(v164[2]), v165 != v166)
                || (v165 = bswap64(v163[3]), v166 = bswap64(v164[3]), v165 != v166))
              {
                v167 = v165 < v166 ? -1 : 1;
                if (v167 < 0)
                {
                  v168 = v94;
                  do
                  {
                    *v168 = v164;
                    v164 = *(v168 - 2);
                    v169 = bswap64(*v163);
                    v170 = bswap64(*v164);
                    if (v169 == v170
                      && (v169 = bswap64(v163[1]), v170 = bswap64(v164[1]), v169 == v170)
                      && (v169 = bswap64(v163[2]), v170 = bswap64(v164[2]), v169 == v170)
                      && (v169 = bswap64(v163[3]), v170 = bswap64(v164[3]), v169 == v170))
                    {
                      v171 = 0;
                    }
                    else if (v169 < v170)
                    {
                      v171 = -1;
                    }
                    else
                    {
                      v171 = 1;
                    }
                    --v168;
                  }
                  while (v171 < 0);
                  *v168 = v163;
                }
              }
              v94 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v109 = (v11 - 2) >> 1;
            v110 = v109;
            do
            {
              v111 = v110;
              if (v109 >= v110)
              {
                v112 = (2 * v110) | 1;
                v113 = &v9[v112];
                v114 = *v113;
                if (2 * v111 + 2 < (uint64_t)v11)
                {
                  v115 = v113[1];
                  v116 = bswap64(*v114);
                  v117 = bswap64(*v115);
                  if (v116 != v117)
                    goto LABEL_199;
                  v116 = bswap64(v114[1]);
                  v117 = bswap64(v115[1]);
                  if (v116 == v117
                    && (v116 = bswap64(v114[2]), v117 = bswap64(v115[2]), v116 == v117)
                    && (v116 = bswap64(v114[3]), v117 = bswap64(v115[3]), v116 == v117))
                  {
                    v118 = 0;
                  }
                  else
                  {
LABEL_199:
                    v118 = v116 < v117 ? -1 : 1;
                  }
                  if (v118 < 0)
                  {
                    v114 = v113[1];
                    ++v113;
                    v112 = 2 * v111 + 2;
                  }
                }
                result = &v9[v111];
                v119 = *result;
                v120 = bswap64(*v114);
                v121 = bswap64(**result);
                if (v120 == v121
                  && (v120 = bswap64(v114[1]), v121 = bswap64(v119[1]), v120 == v121)
                  && (v120 = bswap64(v114[2]), v121 = bswap64(v119[2]), v120 == v121)
                  && (v120 = bswap64(v114[3]), v121 = bswap64(v119[3]), v120 == v121)
                  || (v120 < v121 ? (v122 = -1) : (v122 = 1), (v122 & 0x80000000) == 0))
                {
                  do
                  {
                    v123 = v113;
                    *result = v114;
                    if (v109 < v112)
                      break;
                    v124 = (2 * v112) | 1;
                    v113 = &v9[v124];
                    v112 = 2 * v112 + 2;
                    v114 = *v113;
                    if (v112 >= (uint64_t)v11)
                    {
                      v112 = v124;
                    }
                    else
                    {
                      v125 = v113[1];
                      v126 = bswap64(*v114);
                      v127 = bswap64(*v125);
                      if (v126 != v127)
                        goto LABEL_220;
                      v126 = bswap64(v114[1]);
                      v127 = bswap64(v125[1]);
                      if (v126 == v127
                        && (v126 = bswap64(v114[2]), v127 = bswap64(v125[2]), v126 == v127)
                        && (v126 = bswap64(v114[3]), v127 = bswap64(v125[3]), v126 == v127))
                      {
                        v128 = 0;
                      }
                      else
                      {
LABEL_220:
                        v128 = v126 < v127 ? -1 : 1;
                      }
                      if (v128 >= 0)
                      {
                        v112 = v124;
                      }
                      else
                      {
                        v114 = v113[1];
                        ++v113;
                      }
                    }
                    v129 = bswap64(*v114);
                    v130 = bswap64(*v119);
                    if (v129 != v130)
                      goto LABEL_231;
                    v129 = bswap64(v114[1]);
                    v130 = bswap64(v119[1]);
                    if (v129 == v130
                      && (v129 = bswap64(v114[2]), v130 = bswap64(v119[2]), v129 == v130)
                      && (v129 = bswap64(v114[3]), v130 = bswap64(v119[3]), v129 == v130))
                    {
                      v131 = 0;
                    }
                    else
                    {
LABEL_231:
                      v131 = v129 < v130 ? -1 : 1;
                    }
                    result = v123;
                  }
                  while ((v131 & 0x80000000) == 0);
                  *v123 = v119;
                }
              }
              v110 = v111 - 1;
            }
            while (v111);
            v132 = (unint64_t)v10 >> 3;
            do
            {
              v133 = 0;
              v134 = *v9;
              v135 = v9;
              do
              {
                v136 = &v135[v133];
                v139 = v136[1];
                v137 = v136 + 1;
                v138 = v139;
                v140 = (2 * v133) | 1;
                v141 = 2 * v133 + 2;
                if (v141 < v132)
                {
                  result = (unint64_t **)v137[1];
                  v142 = bswap64(*v138);
                  v143 = bswap64((unint64_t)*result);
                  if (v142 != v143)
                    goto LABEL_245;
                  v142 = bswap64(v138[1]);
                  v143 = bswap64((unint64_t)result[1]);
                  if (v142 == v143
                    && (v142 = bswap64(v138[2]), v143 = bswap64((unint64_t)result[2]), v142 == v143)
                    && (v142 = bswap64(v138[3]), v143 = bswap64((unint64_t)result[3]), v142 == v143))
                  {
                    v144 = 0;
                  }
                  else
                  {
LABEL_245:
                    v144 = v142 < v143 ? -1 : 1;
                  }
                  if (v144 < 0)
                  {
                    v138 = v137[1];
                    ++v137;
                    v140 = v141;
                  }
                }
                *v135 = v138;
                v135 = v137;
                v133 = v140;
              }
              while (v140 <= (uint64_t)((unint64_t)(v132 - 2) >> 1));
              if (v137 == --a2)
              {
                *v137 = v134;
              }
              else
              {
                *v137 = *a2;
                *a2 = v134;
                v145 = (char *)v137 - (char *)v9 + 8;
                if (v145 >= 9)
                {
                  v146 = (((unint64_t)v145 >> 3) - 2) >> 1;
                  v147 = &v9[v146];
                  v148 = *v147;
                  v149 = *v137;
                  v150 = bswap64(**v147);
                  v151 = bswap64(**v137);
                  if (v150 != v151
                    || (v150 = bswap64(v148[1]), v151 = bswap64(v149[1]), v150 != v151)
                    || (v150 = bswap64(v148[2]), v151 = bswap64(v149[2]), v150 != v151)
                    || (v150 = bswap64(v148[3]), v151 = bswap64(v149[3]), v150 != v151))
                  {
                    v152 = v150 < v151 ? -1 : 1;
                    if (v152 < 0)
                    {
                      do
                      {
                        v153 = v147;
                        *v137 = v148;
                        if (!v146)
                          break;
                        v146 = (v146 - 1) >> 1;
                        v147 = &v9[v146];
                        v148 = *v147;
                        v154 = bswap64(**v147);
                        v155 = bswap64(*v149);
                        if (v154 != v155)
                          goto LABEL_269;
                        v154 = bswap64(v148[1]);
                        v155 = bswap64(v149[1]);
                        if (v154 == v155
                          && (v154 = bswap64(v148[2]), v155 = bswap64(v149[2]), v154 == v155)
                          && (v154 = bswap64(v148[3]), v155 = bswap64(v149[3]), v154 == v155))
                        {
                          v156 = 0;
                        }
                        else
                        {
LABEL_269:
                          v156 = v154 < v155 ? -1 : 1;
                        }
                        v137 = v153;
                      }
                      while (v156 < 0);
                      *v153 = v149;
                    }
                  }
                }
              }
            }
            while (v132-- > 2);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        if ((a4 & 1) == 0)
        {
          v16 = *(v7 - 1);
          v17 = bswap64(*v16);
          v18 = bswap64(*v15);
          if (v17 != v18)
            goto LABEL_15;
          v17 = bswap64(v16[1]);
          v18 = bswap64(v15[1]);
          if (v17 == v18
            && (v17 = bswap64(v16[2]), v18 = bswap64(v15[2]), v17 == v18)
            && (v17 = bswap64(v16[3]), v18 = bswap64(v15[3]), v17 == v18))
          {
            v19 = 0;
          }
          else
          {
LABEL_15:
            v19 = v17 < v18 ? -1 : 1;
          }
          if ((v19 & 0x80000000) == 0)
          {
            v50 = *v8;
            v51 = bswap64(*v15);
            v52 = bswap64(**v8);
            if (v51 == v52
              && (v51 = bswap64(v15[1]), v52 = bswap64(v50[1]), v51 == v52)
              && (v51 = bswap64(v15[2]), v52 = bswap64(v50[2]), v51 == v52)
              && (v51 = bswap64(v15[3]), v52 = bswap64(v50[3]), v51 == v52))
            {
              v53 = 0;
            }
            else if (v51 < v52)
            {
              v53 = -1;
            }
            else
            {
              v53 = 1;
            }
            if (v53 < 0)
            {
              v9 = v7;
              do
              {
                v60 = v9[1];
                ++v9;
                v59 = v60;
                v61 = bswap64(*v15);
                v62 = bswap64(*v60);
                if (v61 == v62
                  && (v61 = bswap64(v15[1]), v62 = bswap64(v59[1]), v61 == v62)
                  && (v61 = bswap64(v15[2]), v62 = bswap64(v59[2]), v61 == v62)
                  && (v61 = bswap64(v15[3]), v62 = bswap64(v59[3]), v61 == v62))
                {
                  v63 = 0;
                }
                else if (v61 < v62)
                {
                  v63 = -1;
                }
                else
                {
                  v63 = 1;
                }
              }
              while ((v63 & 0x80000000) == 0);
            }
            else
            {
              v54 = v7 + 1;
              do
              {
                v9 = v54;
                if (v54 >= a2)
                  break;
                v55 = *v54;
                v56 = bswap64(*v15);
                v57 = bswap64(**v9);
                if (v56 != v57)
                  goto LABEL_94;
                v56 = bswap64(v15[1]);
                v57 = bswap64(v55[1]);
                if (v56 == v57
                  && (v56 = bswap64(v15[2]), v57 = bswap64(v55[2]), v56 == v57)
                  && (v56 = bswap64(v15[3]), v57 = bswap64(v55[3]), v56 == v57))
                {
                  v58 = 0;
                }
                else
                {
LABEL_94:
                  v58 = v56 < v57 ? -1 : 1;
                }
                v54 = v9 + 1;
              }
              while ((v58 & 0x80000000) == 0);
            }
            v64 = a2;
            if (v9 < a2)
            {
              v64 = a2;
              do
              {
                v66 = *--v64;
                v65 = v66;
                v67 = bswap64(*v15);
                v68 = bswap64(*v66);
                if (v67 == v68)
                {
                  v67 = bswap64(v15[1]);
                  v68 = bswap64(v65[1]);
                  if (v67 == v68)
                  {
                    v67 = bswap64(v15[2]);
                    v68 = bswap64(v65[2]);
                    if (v67 == v68)
                    {
                      v67 = bswap64(v15[3]);
                      v68 = bswap64(v65[3]);
                      if (v67 == v68)
                        break;
                    }
                  }
                }
                v69 = v67 < v68 ? -1 : 1;
              }
              while (v69 < 0);
            }
            if (v9 < v64)
            {
              v70 = *v9;
              v71 = *v64;
              do
              {
                *v9 = v71;
                *v64 = v70;
                do
                {
                  do
                  {
                    v72 = v9[1];
                    ++v9;
                    v70 = v72;
                    v73 = bswap64(*v15);
                    v74 = bswap64(*v72);
                    if (v73 != v74)
                      break;
                    v73 = bswap64(v15[1]);
                    v74 = bswap64(v70[1]);
                    if (v73 != v74)
                      break;
                    v73 = bswap64(v15[2]);
                    v74 = bswap64(v70[2]);
                    if (v73 != v74)
                      break;
                    v73 = bswap64(v15[3]);
                    v74 = bswap64(v70[3]);
                  }
                  while (v73 == v74);
                  if (v73 < v74)
                    v75 = -1;
                  else
                    v75 = 1;
                }
                while ((v75 & 0x80000000) == 0);
                do
                {
                  v76 = *--v64;
                  v71 = v76;
                  v77 = bswap64(*v15);
                  v78 = bswap64(*v76);
                  if (v77 == v78)
                  {
                    v77 = bswap64(v15[1]);
                    v78 = bswap64(v71[1]);
                    if (v77 == v78)
                    {
                      v77 = bswap64(v15[2]);
                      v78 = bswap64(v71[2]);
                      if (v77 == v78)
                      {
                        v77 = bswap64(v15[3]);
                        v78 = bswap64(v71[3]);
                        if (v77 == v78)
                          break;
                      }
                    }
                  }
                  v79 = v77 < v78 ? -1 : 1;
                }
                while (v79 < 0);
              }
              while (v9 < v64);
            }
            v80 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v80;
            a4 = 0;
            *v80 = v15;
            continue;
          }
        }
        v20 = 0;
        do
        {
          v21 = v7[v20 + 1];
          v22 = bswap64(*v21);
          v23 = bswap64(*v15);
          if (v22 == v23
            && (v22 = bswap64(v21[1]), v23 = bswap64(v15[1]), v22 == v23)
            && (v22 = bswap64(v21[2]), v23 = bswap64(v15[2]), v22 == v23)
            && (v22 = bswap64(v21[3]), v23 = bswap64(v15[3]), v22 == v23))
          {
            v24 = 0;
          }
          else if (v22 < v23)
          {
            v24 = -1;
          }
          else
          {
            v24 = 1;
          }
          ++v20;
        }
        while (v24 < 0);
        v25 = &v7[v20];
        v26 = a2;
        if (v20 == 1)
        {
          v26 = a2;
          do
          {
            if (v25 >= v26)
              break;
            v33 = *--v26;
            v32 = v33;
            v34 = bswap64(*v33);
            v35 = bswap64(*v15);
            if (v34 != v35)
              goto LABEL_46;
            v34 = bswap64(v32[1]);
            v35 = bswap64(v15[1]);
            if (v34 == v35
              && (v34 = bswap64(v32[2]), v35 = bswap64(v15[2]), v34 == v35)
              && (v34 = bswap64(v32[3]), v35 = bswap64(v15[3]), v34 == v35))
            {
              v36 = 0;
            }
            else
            {
LABEL_46:
              v36 = v34 < v35 ? -1 : 1;
            }
          }
          while ((v36 & 0x80000000) == 0);
        }
        else
        {
          do
          {
            do
            {
              v28 = *--v26;
              v27 = v28;
              v29 = bswap64(*v28);
              v30 = bswap64(*v15);
              if (v29 != v30)
                break;
              v29 = bswap64(v27[1]);
              v30 = bswap64(v15[1]);
              if (v29 != v30)
                break;
              v29 = bswap64(v27[2]);
              v30 = bswap64(v15[2]);
              if (v29 != v30)
                break;
              v29 = bswap64(v27[3]);
              v30 = bswap64(v15[3]);
            }
            while (v29 == v30);
            if (v29 < v30)
              v31 = -1;
            else
              v31 = 1;
          }
          while ((v31 & 0x80000000) == 0);
        }
        if (v25 >= v26)
        {
          v48 = v25 - 1;
        }
        else
        {
          v37 = *v26;
          v38 = v25;
          v39 = v26;
          do
          {
            *v38 = v37;
            *v39 = v21;
            do
            {
              v40 = v38[1];
              ++v38;
              v21 = v40;
              v41 = bswap64(*v40);
              v42 = bswap64(*v15);
              if (v41 == v42)
              {
                v41 = bswap64(v21[1]);
                v42 = bswap64(v15[1]);
                if (v41 == v42)
                {
                  v41 = bswap64(v21[2]);
                  v42 = bswap64(v15[2]);
                  if (v41 == v42)
                  {
                    v41 = bswap64(v21[3]);
                    v42 = bswap64(v15[3]);
                    if (v41 == v42)
                      break;
                  }
                }
              }
              v43 = v41 < v42 ? -1 : 1;
            }
            while (v43 < 0);
            do
            {
              do
              {
                v44 = *--v39;
                v37 = v44;
                v45 = bswap64(*v44);
                v46 = bswap64(*v15);
                if (v45 != v46)
                  break;
                v45 = bswap64(v37[1]);
                v46 = bswap64(v15[1]);
                if (v45 != v46)
                  break;
                v45 = bswap64(v37[2]);
                v46 = bswap64(v15[2]);
                if (v45 != v46)
                  break;
                v45 = bswap64(v37[3]);
                v46 = bswap64(v15[3]);
              }
              while (v45 == v46);
              if (v45 < v46)
                v47 = -1;
              else
                v47 = 1;
            }
            while ((v47 & 0x80000000) == 0);
          }
          while (v38 < v39);
          v48 = v38 - 1;
        }
        if (v48 != v7)
          *v7 = *v48;
        *v48 = v15;
        if (v25 < v26)
        {
LABEL_77:
          result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**,false>(v7, v48, a3, a4 & 1);
          a4 = 0;
          v9 = v48 + 1;
          continue;
        }
        v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v7, v48);
        v9 = v48 + 1;
        result = (unint64_t **)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(v48 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v49)
            continue;
          goto LABEL_77;
        }
        a2 = v48;
        if (!v49)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;

  v3 = *a2;
  v4 = *result;
  v5 = bswap64(**a2);
  v6 = bswap64(**result);
  if (v5 == v6
    && (v5 = bswap64(v3[1]), v6 = bswap64(v4[1]), v5 == v6)
    && (v5 = bswap64(v3[2]), v6 = bswap64(v4[2]), v5 == v6)
    && (v5 = bswap64(v3[3]), v6 = bswap64(v4[3]), v5 == v6))
  {
    v7 = 0;
  }
  else if (v5 < v6)
  {
    v7 = -1;
  }
  else
  {
    v7 = 1;
  }
  v8 = *a3;
  v9 = bswap64(**a3);
  v10 = bswap64(*v3);
  if (v9 != v10
    || (v9 = bswap64(v8[1]), v10 = bswap64(v3[1]), v9 != v10)
    || (v9 = bswap64(v8[2]), v10 = bswap64(v3[2]), v9 != v10)
    || (v9 = bswap64(v8[3]), v10 = bswap64(v3[3]), v9 != v10))
  {
    if (v9 < v10)
      v11 = -1;
    else
      v11 = 1;
    if (v7 < 0)
      goto LABEL_14;
LABEL_24:
    if (v11 < 0)
    {
      *a2 = v8;
      *a3 = v3;
      v16 = *a2;
      v17 = *result;
      v18 = bswap64(**a2);
      v19 = bswap64(**result);
      if (v18 != v19)
        goto LABEL_36;
      v18 = bswap64(v16[1]);
      v19 = bswap64(v17[1]);
      if (v18 == v19
        && (v18 = bswap64(v16[2]), v19 = bswap64(v17[2]), v18 == v19)
        && (v18 = bswap64(v16[3]), v19 = bswap64(v17[3]), v18 == v19))
      {
        v20 = 0;
      }
      else
      {
LABEL_36:
        v20 = v18 < v19 ? -1 : 1;
      }
      if (v20 < 0)
      {
        *result = v16;
        *a2 = v17;
      }
    }
    return result;
  }
  v11 = 0;
  if ((v7 & 0x80000000) == 0)
    goto LABEL_24;
LABEL_14:
  if (v11 < 0)
  {
    *result = v8;
    goto LABEL_42;
  }
  *result = v3;
  *a2 = v4;
  v12 = *a3;
  v13 = bswap64(**a3);
  v14 = bswap64(*v4);
  if (v13 == v14
    && (v13 = bswap64(v12[1]), v14 = bswap64(v4[1]), v13 == v14)
    && (v13 = bswap64(v12[2]), v14 = bswap64(v4[2]), v13 == v14)
    && (v13 = bswap64(v12[3]), v14 = bswap64(v4[3]), v13 == v14))
  {
    v15 = 0;
  }
  else if (v13 < v14)
  {
    v15 = -1;
  }
  else
  {
    v15 = 1;
  }
  if (v15 < 0)
  {
    *a2 = v12;
LABEL_42:
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t **v11;
  unint64_t **v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t **v25;
  unint64_t **v26;
  unint64_t **v27;
  unint64_t **v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = bswap64(*v6);
      v9 = bswap64(**a1);
      if (v8 == v9
        && (v8 = bswap64(v6[1]), v9 = bswap64(v7[1]), v8 == v9)
        && (v8 = bswap64(v6[2]), v9 = bswap64(v7[2]), v8 == v9)
        && (v8 = bswap64(v6[3]), v9 = bswap64(v7[3]), v8 == v9))
      {
        v10 = 0;
      }
      else if (v8 < v9)
      {
        v10 = -1;
      }
      else
      {
        v10 = 1;
      }
      if (v10 < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v26 = a1 + 1;
      v27 = a1 + 2;
      v28 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v29 = *(a2 - 1);
      v30 = a1[3];
      v31 = bswap64(*v29);
      v32 = bswap64(*v30);
      if (v31 == v32
        && (v31 = bswap64(v29[1]), v32 = bswap64(v30[1]), v31 == v32)
        && (v31 = bswap64(v29[2]), v32 = bswap64(v30[2]), v31 == v32)
        && (v31 = bswap64(v29[3]), v32 = bswap64(v30[3]), v31 == v32))
      {
        v33 = 0;
      }
      else if (v31 < v32)
      {
        v33 = -1;
      }
      else
      {
        v33 = 1;
      }
      if (v33 < 0)
      {
        *v28 = v29;
        *(a2 - 1) = v30;
        v34 = *v28;
        v35 = *v27;
        v36 = bswap64(**v28);
        v37 = bswap64(**v27);
        if (v36 != v37)
          goto LABEL_54;
        v36 = bswap64(v34[1]);
        v37 = bswap64(v35[1]);
        if (v36 == v37
          && (v36 = bswap64(v34[2]), v37 = bswap64(v35[2]), v36 == v37)
          && (v36 = bswap64(v34[3]), v37 = bswap64(v35[3]), v36 == v37))
        {
          v38 = 0;
        }
        else
        {
LABEL_54:
          v38 = v36 < v37 ? -1 : 1;
        }
        if (v38 < 0)
        {
          *v27 = v34;
          *v28 = v35;
          v39 = *v26;
          v40 = bswap64(*v34);
          v41 = bswap64(**v26);
          if (v40 != v41)
            goto LABEL_64;
          v40 = bswap64(v34[1]);
          v41 = bswap64(v39[1]);
          if (v40 == v41
            && (v40 = bswap64(v34[2]), v41 = bswap64(v39[2]), v40 == v41)
            && (v40 = bswap64(v34[3]), v41 = bswap64(v39[3]), v40 == v41))
          {
            v42 = 0;
          }
          else
          {
LABEL_64:
            v42 = v40 < v41 ? -1 : 1;
          }
          if (v42 < 0)
          {
            a1[1] = v34;
            a1[2] = v39;
            v43 = *a1;
            v44 = bswap64(*v34);
            v45 = bswap64(**a1);
            if (v44 != v45)
              goto LABEL_73;
            v44 = bswap64(v34[1]);
            v45 = bswap64(v43[1]);
            if (v44 == v45
              && (v44 = bswap64(v34[2]), v45 = bswap64(v43[2]), v44 == v45)
              && (v44 = bswap64(v34[3]), v45 = bswap64(v43[3]), v44 == v45))
            {
              v46 = 0;
            }
            else
            {
LABEL_73:
              v46 = v44 < v45 ? -1 : 1;
            }
            if (v46 < 0)
            {
              *a1 = v34;
              a1[1] = v43;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a1 + 1, a1 + 2);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 24;
      break;
  }
  do
  {
    v15 = *v12;
    v16 = *v11;
    v17 = bswap64(**v12);
    v18 = bswap64(**v11);
    if (v17 != v18
      || (v17 = bswap64(v15[1]), v18 = bswap64(v16[1]), v17 != v18)
      || (v17 = bswap64(v15[2]), v18 = bswap64(v16[2]), v17 != v18)
      || (v17 = bswap64(v15[3]), v18 = bswap64(v16[3]), v17 != v18))
    {
      v19 = v17 < v18 ? -1 : 1;
      if (v19 < 0)
      {
        v20 = v14;
        while (1)
        {
          *(unint64_t **)((char *)a1 + v20) = v16;
          v21 = v20 - 8;
          if (v20 == 8)
            break;
          v16 = *(unint64_t **)((char *)a1 + v20 - 16);
          v22 = bswap64(*v15);
          v23 = bswap64(*v16);
          if (v22 == v23
            && (v22 = bswap64(v15[1]), v23 = bswap64(v16[1]), v22 == v23)
            && (v22 = bswap64(v15[2]), v23 = bswap64(v16[2]), v22 == v23)
            && (v22 = bswap64(v15[3]), v23 = bswap64(v16[3]), v22 == v23))
          {
            v24 = 0;
          }
          else if (v22 < v23)
          {
            v24 = -1;
          }
          else
          {
            v24 = 1;
          }
          v20 = v21;
          if ((v24 & 0x80000000) == 0)
          {
            v25 = (unint64_t **)((char *)a1 + v21);
            goto LABEL_30;
          }
        }
        v25 = a1;
LABEL_30:
        *v25 = v15;
        if (++v13 == 8)
          return v12 + 1 == a2;
      }
    }
    v11 = v12;
    v14 += 8;
    ++v12;
  }
  while (v12 != a2);
  return 1;
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  unint64_t **result;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_0 &,MTLUINT256_t const**>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = bswap64(**a4);
  v12 = bswap64(**a3);
  if (v11 != v12
    || (v11 = bswap64(v9[1]), v12 = bswap64(v10[1]), v11 != v12)
    || (v11 = bswap64(v9[2]), v12 = bswap64(v10[2]), v11 != v12)
    || (v11 = bswap64(v9[3]), v12 = bswap64(v10[3]), v11 != v12))
  {
    v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      *a3 = v9;
      *a4 = v10;
      v14 = *a3;
      v15 = *a2;
      v16 = bswap64(**a3);
      v17 = bswap64(**a2);
      if (v16 != v17)
        goto LABEL_14;
      v16 = bswap64(v14[1]);
      v17 = bswap64(v15[1]);
      if (v16 == v17
        && (v16 = bswap64(v14[2]), v17 = bswap64(v15[2]), v16 == v17)
        && (v16 = bswap64(v14[3]), v17 = bswap64(v15[3]), v16 == v17))
      {
        v18 = 0;
      }
      else
      {
LABEL_14:
        v18 = v16 < v17 ? -1 : 1;
      }
      if (v18 < 0)
      {
        *a2 = v14;
        *a3 = v15;
        v19 = *a2;
        v20 = *a1;
        v21 = bswap64(**a2);
        v22 = bswap64(**a1);
        if (v21 == v22
          && (v21 = bswap64(v19[1]), v22 = bswap64(v20[1]), v21 == v22)
          && (v21 = bswap64(v19[2]), v22 = bswap64(v20[2]), v21 == v22)
          && (v21 = bswap64(v19[3]), v22 = bswap64(v20[3]), v21 == v22))
        {
          v23 = 0;
        }
        else if (v21 < v22)
        {
          v23 = -1;
        }
        else
        {
          v23 = 1;
        }
        if (v23 < 0)
        {
          *a1 = v19;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,false>(uint64_t result, uint64_t *a2, _QWORD **a3, uint64_t a4, char a5)
{
  _QWORD **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  char *v35;
  size_t v36;
  size_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unsigned __int16 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  unsigned __int16 *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  unsigned int *v53;
  uint64_t v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  int *v62;
  unsigned __int16 *v63;
  uint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  char *v67;
  size_t v68;
  unsigned int *v69;
  uint64_t v70;
  char *v71;
  size_t v72;
  size_t v73;
  int v74;
  uint64_t *v75;
  uint64_t *v76;
  int *v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  char *v82;
  size_t v83;
  unsigned int *v84;
  uint64_t v85;
  char *v86;
  size_t v87;
  size_t v88;
  int v89;
  BOOL v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int16 *v98;
  unsigned int v99;
  uint64_t *v100;
  int *v101;
  unsigned __int16 *v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  char *v106;
  size_t v107;
  unsigned int *v108;
  uint64_t v109;
  char *v110;
  size_t v111;
  size_t v112;
  int v113;
  uint64_t *v114;
  int *v115;
  unsigned __int16 *v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  unsigned int *v122;
  uint64_t v123;
  char *v124;
  size_t v125;
  size_t v126;
  int v127;
  BOOL v128;
  uint64_t v129;
  unsigned int *v130;
  uint64_t v131;
  char *v132;
  size_t v133;
  int *v134;
  unsigned __int16 *v135;
  uint64_t v136;
  unsigned int *v137;
  uint64_t v138;
  char *v139;
  size_t v140;
  size_t v141;
  uint64_t *v142;
  uint64_t *v143;
  unsigned int *v144;
  uint64_t v145;
  char *v146;
  size_t v147;
  int *v148;
  unsigned __int16 *v149;
  uint64_t v150;
  unsigned int *v151;
  uint64_t v152;
  char *v153;
  size_t v154;
  size_t v155;
  uint64_t *v156;
  unsigned int *v157;
  uint64_t v158;
  char *v159;
  size_t v160;
  int *v161;
  unsigned __int16 *v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;
  char *v166;
  size_t v167;
  size_t v168;
  uint64_t *v169;
  uint64_t *v170;
  unsigned int *v171;
  uint64_t v172;
  char *v173;
  size_t v174;
  int *v175;
  unsigned __int16 *v176;
  uint64_t v177;
  unsigned int *v178;
  uint64_t v179;
  char *v180;
  size_t v181;
  size_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned __int16 *v186;
  unsigned int v187;
  uint64_t *v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  char *v192;
  size_t v193;
  int *v194;
  unsigned __int16 *v195;
  uint64_t v196;
  unsigned int *v197;
  uint64_t v198;
  char *v199;
  size_t v200;
  size_t v201;
  int v202;
  uint64_t *v203;
  uint64_t v204;
  unsigned int *v205;
  uint64_t v206;
  char *v207;
  size_t v208;
  int *v209;
  unsigned __int16 *v210;
  uint64_t v211;
  unsigned int *v212;
  uint64_t v213;
  char *v214;
  size_t v215;
  size_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int *v223;
  int *v224;
  unsigned __int16 *v225;
  uint64_t v226;
  unsigned int *v227;
  uint64_t v228;
  char *v229;
  size_t v230;
  uint64_t *v231;
  uint64_t v232;
  _QWORD **v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int16 *v241;
  uint64_t v242;
  unsigned int *v243;
  uint64_t v244;
  char *v245;
  size_t v246;
  uint64_t v247;
  int *v248;
  unsigned __int16 *v249;
  uint64_t v250;
  unsigned int *v251;
  uint64_t v252;
  char *v253;
  size_t v254;
  size_t v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  unsigned __int16 *v259;
  uint64_t v260;
  unsigned int *v261;
  uint64_t v262;
  char *v263;
  unint64_t v264;
  int *v265;
  unsigned __int16 *v266;
  uint64_t v267;
  unsigned int *v268;
  uint64_t v269;
  char *v270;
  unint64_t v271;
  size_t v272;
  int64_t v273;
  int64_t v274;
  int64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int *v282;
  unsigned __int16 *v283;
  uint64_t v284;
  unsigned int *v285;
  uint64_t v286;
  char *v287;
  size_t v288;
  uint64_t v289;
  int *v290;
  unsigned __int16 *v291;
  uint64_t v292;
  unsigned int *v293;
  uint64_t v294;
  char *v295;
  size_t v296;
  size_t v297;
  int v298;
  uint64_t *v299;
  uint64_t v300;
  int *v301;
  uint64_t v302;
  unsigned __int16 *v303;
  uint64_t v304;
  unsigned int *v305;
  uint64_t v306;
  char *v307;
  size_t v308;
  int *v309;
  unsigned __int16 *v310;
  uint64_t v311;
  unsigned int *v312;
  uint64_t v313;
  char *v314;
  size_t v315;
  size_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int *v324;
  unsigned __int16 *v325;
  uint64_t v326;
  unsigned int *v327;
  uint64_t v328;
  char *v329;
  unint64_t v330;
  int *v331;
  unsigned __int16 *v332;
  uint64_t v333;
  unsigned int *v334;
  uint64_t v335;
  char *v336;
  unint64_t v337;
  size_t v338;
  int v339;
  uint64_t v340;
  int *v341;
  unsigned __int16 *v342;
  uint64_t v343;
  unsigned int *v344;
  uint64_t v345;
  char *v346;
  size_t v347;
  int *v348;
  unsigned __int16 *v349;
  uint64_t v350;
  unsigned int *v351;
  uint64_t v352;
  char *v353;
  size_t v354;
  size_t v355;
  unsigned __int16 *v356;
  uint64_t v357;
  unsigned int *v358;
  uint64_t v359;
  char *v360;
  size_t v361;
  size_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t *v365;
  uint64_t v366;
  int64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int *v374;
  unsigned __int16 *v375;
  uint64_t v376;
  unsigned int *v377;
  uint64_t v378;
  char *v379;
  size_t v380;
  int *v381;
  unsigned __int16 *v382;
  uint64_t v383;
  unsigned int *v384;
  uint64_t v385;
  char *v386;
  size_t v387;
  size_t v388;
  uint64_t *v389;
  uint64_t v391;
  unint64_t v392;
  uint64_t *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  int *v398;
  unsigned __int16 *v399;
  uint64_t v400;
  unsigned int *v401;
  uint64_t v402;
  char *v403;
  size_t v404;
  uint64_t v405;
  int *v406;
  unsigned __int16 *v407;
  uint64_t v408;
  unsigned int *v409;
  uint64_t v410;
  char *v411;
  size_t v412;
  size_t v413;
  uint64_t v414;
  int v415;
  uint64_t *v416;
  uint64_t v417;
  int *v418;
  unsigned __int16 *v419;
  uint64_t v420;
  unsigned int *v421;
  uint64_t v422;
  char *v423;
  size_t v424;
  int *v425;
  unsigned __int16 *v426;
  uint64_t v427;
  unsigned int *v428;
  uint64_t v429;
  char *v430;
  size_t v431;
  size_t v432;
  BOOL v433;
  uint64_t *v434;
  _QWORD *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unsigned __int16 *v444;
  uint64_t v445;
  unsigned int *v446;
  uint64_t v447;
  char *v448;
  size_t v449;
  uint64_t v450;
  int *v451;
  unsigned __int16 *v452;
  uint64_t v453;
  unsigned int *v454;
  uint64_t v455;
  char *v456;
  size_t v457;
  size_t v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unsigned __int16 *v464;
  uint64_t v465;
  unsigned int *v466;
  uint64_t v467;
  char *v468;
  size_t v469;
  int *v470;
  unsigned __int16 *v471;
  uint64_t v472;
  unsigned int *v473;
  uint64_t v474;
  char *v475;
  size_t v476;
  size_t v477;
  uint64_t v479;
  uint64_t *v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t *v486;
  uint64_t v487;
  uint64_t *v488;
  int64_t v489;
  uint64_t v491;
  uint64_t *v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  uint64_t v498;
  _QWORD *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t *v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;

  v6 = a3;
  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2;
  v488 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)v8 - (char *)v9;
    v11 = v8 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v218 = *(a2 - 1);
        v219 = *v9;
        v220 = *v6[1];
        v221 = (*v6)[37] + *((_DWORD *)*v6 + 70) - (*v6)[37] + *((_DWORD *)*v6 + 72);
        v222 = *(unsigned int *)(v220 + 4 * *v9);
        v223 = (int *)(v221 - *(unsigned int *)(v220 + 4 * v218));
        v224 = (int *)(v221 - v222);
        v225 = (unsigned __int16 *)((char *)v223 - *v223);
        if (*v225 >= 5u && (v226 = v225[2]) != 0)
        {
          v227 = (unsigned int *)((char *)v223 + v226);
          v228 = *v227;
          v229 = (char *)v227 + v228 + 4;
          v230 = *(unsigned int *)((char *)v227 + v228);
        }
        else
        {
          v229 = 0;
          v230 = 0;
        }
        v356 = (unsigned __int16 *)((char *)v224 - *v224);
        if (*v356 >= 5u && (v357 = v356[2]) != 0)
        {
          v358 = (unsigned int *)((char *)v224 + v357);
          v359 = *v358;
          v360 = (char *)v358 + v359 + 4;
          v361 = *(unsigned int *)((char *)v358 + v359);
        }
        else
        {
          v360 = 0;
          v361 = 0;
        }
        if (v361 >= v230)
          v362 = v230;
        else
          v362 = v361;
        result = memcmp(v229, v360, v362);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v230 >= v361)
        {
          return result;
        }
        *v9 = v218;
        *(a2 - 1) = v219;
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v9, v9 + 1, v488, v6);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v9, v9 + 1, v9 + 2, v488, v6);
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,0>(v9, v9 + 1, v9 + 2, v9 + 3, v488, v6);
      default:
        v509 = v9;
        if (v10 > 191)
        {
          if (!a4)
          {
            if (v9 == a2)
              return result;
            v273 = (v11 - 2) >> 1;
            v506 = *v6;
            v482 = (char *)v8 - (char *)v9;
            v484 = v6[1];
            v274 = v273;
            while (1)
            {
              v275 = v274;
              if (v273 < v274)
                goto LABEL_363;
              v276 = (2 * v274) | 1;
              v277 = &v509[v276];
              v278 = 2 * v274 + 2;
              v489 = v274;
              if (v278 < (uint64_t)v11)
                break;
              v279 = *v484;
              v280 = v506[37];
              v496 = v506[36];
              v289 = (*((_DWORD *)v506 + 70) - v280 + v496);
LABEL_307:
              v515 = v279;
              v299 = &v509[v275];
              v300 = *v277;
              v301 = (int *)(v280 + v289 - *(unsigned int *)(v279 + 4 * *v277));
              v302 = *(unsigned int *)(v279 + 4 * *v299);
              v303 = (unsigned __int16 *)((char *)v301 - *v301);
              v487 = *v299;
              if (*v303 >= 5u && (v304 = v303[2]) != 0)
              {
                v305 = (unsigned int *)((char *)v301 + v304);
                v306 = *v305;
                v307 = (char *)v305 + v306 + 4;
                v308 = *(unsigned int *)((char *)v305 + v306);
              }
              else
              {
                v307 = 0;
                v308 = 0;
              }
              v309 = (int *)(v280 + v289 - v302);
              v310 = (unsigned __int16 *)((char *)v309 - *v309);
              if (*v310 >= 5u && (v311 = v310[2]) != 0)
              {
                v312 = (unsigned int *)((char *)v309 + v311);
                v313 = *v312;
                v314 = (char *)v312 + v313 + 4;
                v315 = *(unsigned int *)((char *)v312 + v313);
              }
              else
              {
                v314 = 0;
                v315 = 0;
              }
              if (v315 >= v308)
                v316 = v308;
              else
                v316 = v315;
              result = memcmp(v307, v314, v316);
              if ((_DWORD)result)
              {
                v275 = v489;
                v317 = v515;
                if ((result & 0x80000000) == 0)
                  goto LABEL_323;
                goto LABEL_363;
              }
              v90 = v308 >= v315;
              v275 = v489;
              v317 = v515;
              if (v90)
              {
LABEL_323:
                v501 = -v302;
                v318 = v280;
                v497 = v496 - v280;
                while (1)
                {
                  v319 = v277;
                  *v299 = v300;
                  if (v273 < v276)
                  {
LABEL_362:
                    v275 = v489;
                    *v319 = v487;
                    goto LABEL_363;
                  }
                  v320 = 2 * v276;
                  v276 = (2 * v276) | 1;
                  v277 = &v509[v276];
                  v321 = v320 + 2;
                  v322 = v506[35];
                  if (v321 >= (uint64_t)v11)
                  {
                    v323 = (v322 + v497);
                    goto LABEL_342;
                  }
                  v323 = (v322 + v497);
                  v324 = (int *)(v318 + v323 - *(unsigned int *)(v317 + 4 * *(unsigned int *)v277));
                  v325 = (unsigned __int16 *)((char *)v324 - *v324);
                  if (*v325 >= 5u && (v326 = v325[2]) != 0)
                  {
                    v327 = (unsigned int *)((char *)v324 + v326);
                    v328 = *v327;
                    v329 = (char *)v327 + v328 + 4;
                    v330 = *(unsigned int *)((char *)v327 + v328);
                  }
                  else
                  {
                    v329 = 0;
                    v330 = 0;
                  }
                  v331 = (int *)(v318 + v323 - *(unsigned int *)(v515 + 4 * *((unsigned int *)v277 + 2)));
                  v332 = (unsigned __int16 *)((char *)v331 - *v331);
                  if (*v332 >= 5u && (v333 = v332[2]) != 0)
                  {
                    v334 = (unsigned int *)((char *)v331 + v333);
                    v335 = *v334;
                    v336 = (char *)v334 + v335 + 4;
                    v337 = *(unsigned int *)((char *)v334 + v335);
                  }
                  else
                  {
                    v336 = 0;
                    v337 = 0;
                  }
                  v338 = v337 >= v330 ? v330 : v337;
                  v339 = memcmp(v329, v336, v338);
                  if (!v339)
                    break;
                  v273 = (v11 - 2) >> 1;
                  v318 = v280;
                  if (v339 < 0)
                    goto LABEL_340;
LABEL_341:
                  v317 = v515;
LABEL_342:
                  v300 = *v277;
                  v340 = v318 + v323;
                  v341 = (int *)(v318 + v323 - *(unsigned int *)(v317 + 4 * *v277));
                  v342 = (unsigned __int16 *)((char *)v341 - *v341);
                  if (*v342 >= 5u && (v343 = v342[2]) != 0)
                  {
                    v344 = (unsigned int *)((char *)v341 + v343);
                    v345 = *v344;
                    v346 = (char *)v344 + v345 + 4;
                    v347 = *(unsigned int *)((char *)v344 + v345);
                  }
                  else
                  {
                    v346 = 0;
                    v347 = 0;
                  }
                  v348 = (int *)(v340 + v501);
                  v349 = (unsigned __int16 *)((char *)v348 - *v348);
                  if (*v349 >= 5u && (v350 = v349[2]) != 0)
                  {
                    v351 = (unsigned int *)((char *)v348 + v350);
                    v352 = *v351;
                    v353 = (char *)v351 + v352 + 4;
                    v354 = *(unsigned int *)((char *)v351 + v352);
                  }
                  else
                  {
                    v353 = 0;
                    v354 = 0;
                  }
                  if (v354 >= v347)
                    v355 = v347;
                  else
                    v355 = v354;
                  result = memcmp(v346, v353, v355);
                  v318 = v280;
                  if (!(_DWORD)result)
                  {
                    if (v347 == v354)
                    {
                      result = 0;
                    }
                    else
                    {
                      if (v347 < v354)
                        goto LABEL_362;
                      result = 1;
                    }
                  }
                  v299 = v319;
                  if ((result & 0x80000000) != 0)
                    goto LABEL_362;
                }
                v90 = v330 >= v337;
                v273 = (v11 - 2) >> 1;
                v318 = v280;
                if (v90)
                  goto LABEL_341;
LABEL_340:
                ++v277;
                v276 = v321;
                goto LABEL_341;
              }
LABEL_363:
              v274 = v275 - 1;
              if (!v275)
              {
                v363 = v482 >> 3;
                v364 = v509;
                v365 = (uint64_t *)a3;
                while (1)
                {
                  v366 = 0;
                  v507 = *v364;
                  v367 = (unint64_t)(v363 - 2) >> 1;
                  v369 = *v365;
                  v368 = (uint64_t *)v365[1];
                  v516 = v363;
                  do
                  {
                    v370 = v364;
                    v364 += v366 + 1;
                    v371 = 2 * v366;
                    v366 = (2 * v366) | 1;
                    v372 = v371 + 2;
                    if (v371 + 2 >= v363)
                      goto LABEL_394;
                    v373 = *(_QWORD *)(v369 + 296)
                         + *(_DWORD *)(v369 + 280)
                         - *(_QWORD *)(v369 + 296)
                         + *(_DWORD *)(v369 + 288);
                    v374 = (int *)(v373 - *(unsigned int *)(*v368 + 4 * *(unsigned int *)v364));
                    v375 = (unsigned __int16 *)((char *)v374 - *v374);
                    if (*v375 >= 5u && (v376 = v375[2]) != 0)
                    {
                      v377 = (unsigned int *)((char *)v374 + v376);
                      v378 = *v377;
                      v379 = (char *)v377 + v378 + 4;
                      v380 = *(unsigned int *)((char *)v377 + v378);
                    }
                    else
                    {
                      v379 = 0;
                      v380 = 0;
                    }
                    v381 = (int *)(v373 - *(unsigned int *)(*v368 + 4 * *((unsigned int *)v364 + 2)));
                    v382 = (unsigned __int16 *)((char *)v381 - *v381);
                    if (*v382 >= 5u && (v383 = v382[2]) != 0)
                    {
                      v384 = (unsigned int *)((char *)v381 + v383);
                      v385 = *v384;
                      v386 = (char *)v384 + v385 + 4;
                      v387 = *(unsigned int *)((char *)v384 + v385);
                    }
                    else
                    {
                      v386 = 0;
                      v387 = 0;
                    }
                    if (v387 >= v380)
                      v388 = v380;
                    else
                      v388 = v387;
                    result = memcmp(v379, v386, v388);
                    if ((_DWORD)result)
                    {
                      v363 = v516;
                      if ((result & 0x80000000) == 0)
                        goto LABEL_394;
LABEL_393:
                      ++v364;
                      v366 = v372;
                      goto LABEL_394;
                    }
                    v90 = v380 >= v387;
                    v363 = v516;
                    if (!v90)
                      goto LABEL_393;
LABEL_394:
                    *v370 = *v364;
                  }
                  while (v366 <= v367);
                  v389 = a2 - 1;
                  if (v364 == --a2)
                  {
                    *v364 = v507;
                    goto LABEL_435;
                  }
                  *v364 = *v389;
                  *v389 = v507;
                  v391 = (char *)v364 - (char *)v509 + 8;
                  if (v391 < 9)
                    goto LABEL_435;
                  v392 = (((unint64_t)v391 >> 3) - 2) >> 1;
                  v393 = &v509[v392];
                  v394 = *v393;
                  v508 = *v368;
                  v395 = *(unsigned int *)(*v368 + 4 * *v393);
                  v396 = *(_QWORD *)(v369 + 288);
                  v502 = *(_QWORD *)(v369 + 296);
                  v397 = v502 + (*(_DWORD *)(v369 + 280) - v502 + v396);
                  v398 = (int *)(v397 - v395);
                  v399 = (unsigned __int16 *)((char *)v398 - *v398);
                  if (*v399 >= 5u && (v400 = v399[2]) != 0)
                  {
                    v401 = (unsigned int *)((char *)v398 + v400);
                    v402 = *v401;
                    v403 = (char *)v401 + v402 + 4;
                    v404 = *(unsigned int *)((char *)v401 + v402);
                  }
                  else
                  {
                    v403 = 0;
                    v404 = 0;
                  }
                  v405 = *(unsigned int *)(v508 + 4 * *v364);
                  v406 = (int *)(v397 - v405);
                  v407 = (unsigned __int16 *)((char *)v406 - *v406);
                  v498 = *v364;
                  if (*v407 >= 5u && (v408 = v407[2]) != 0)
                  {
                    v409 = (unsigned int *)((char *)v406 + v408);
                    v410 = *v409;
                    v411 = (char *)v409 + v410 + 4;
                    v412 = *(unsigned int *)((char *)v409 + v410);
                  }
                  else
                  {
                    v411 = 0;
                    v412 = 0;
                  }
                  if (v412 >= v404)
                    v413 = v404;
                  else
                    v413 = v412;
                  result = memcmp(v403, v411, v413);
                  if ((_DWORD)result)
                  {
                    v363 = v516;
                    if ((result & 0x80000000) == 0)
                      goto LABEL_435;
                  }
                  else
                  {
                    v90 = v404 >= v412;
                    v363 = v516;
                    if (v90)
                      goto LABEL_435;
                  }
                  v414 = -v405;
                  v415 = v396 - v502;
                  do
                  {
                    v416 = v393;
                    *v364 = v394;
                    if (!v392)
                      break;
                    v392 = (v392 - 1) >> 1;
                    v393 = &v509[v392];
                    v394 = *v393;
                    v417 = v502 + (v415 + *(_DWORD *)(v369 + 280));
                    v418 = (int *)(v417 - *(unsigned int *)(v508 + 4 * *v393));
                    v419 = (unsigned __int16 *)((char *)v418 - *v418);
                    if (*v419 >= 5u && (v420 = v419[2]) != 0)
                    {
                      v421 = (unsigned int *)((char *)v418 + v420);
                      v422 = *v421;
                      v423 = (char *)v421 + v422 + 4;
                      v424 = *(unsigned int *)((char *)v421 + v422);
                    }
                    else
                    {
                      v423 = 0;
                      v424 = 0;
                    }
                    v425 = (int *)(v417 + v414);
                    v426 = (unsigned __int16 *)((char *)v425 - *v425);
                    if (*v426 >= 5u && (v427 = v426[2]) != 0)
                    {
                      v428 = (unsigned int *)((char *)v425 + v427);
                      v429 = *v428;
                      v430 = (char *)v428 + v429 + 4;
                      v431 = *(unsigned int *)((char *)v428 + v429);
                    }
                    else
                    {
                      v430 = 0;
                      v431 = 0;
                    }
                    if (v431 >= v424)
                      v432 = v424;
                    else
                      v432 = v431;
                    result = memcmp(v423, v430, v432);
                    if (!(_DWORD)result)
                    {
                      if (v424 >= v431)
                        break;
                      result = 0xFFFFFFFFLL;
                    }
                    v364 = v416;
                  }
                  while ((result & 0x80000000) != 0);
                  *v416 = v498;
LABEL_435:
                  v433 = v363-- <= 2;
                  v364 = v509;
                  v365 = (uint64_t *)a3;
                  if (v433)
                    return result;
                }
              }
            }
            v279 = *v484;
            v280 = v506[37];
            v281 = *((_DWORD *)v506 + 70) - (_DWORD)v280 + v506[36];
            v282 = (int *)(v280 + v281 - *(unsigned int *)(*v484 + 4 * *(unsigned int *)v277));
            v283 = (unsigned __int16 *)((char *)v282 - *v282);
            if (*v283 >= 5u && (v284 = v283[2]) != 0)
            {
              v285 = (unsigned int *)((char *)v282 + v284);
              v286 = *v285;
              v287 = (char *)v285 + v286 + 4;
              v288 = *(unsigned int *)((char *)v285 + v286);
            }
            else
            {
              v287 = 0;
              v288 = 0;
            }
            v290 = (int *)(v280 + v281 - *(unsigned int *)(v279 + 4 * *((unsigned int *)v277 + 2)));
            v291 = (unsigned __int16 *)((char *)v290 - *v290);
            v496 = v506[36];
            v514 = (*((_DWORD *)v506 + 70) - v280 + v496);
            if (*v291 >= 5u && (v292 = v291[2]) != 0)
            {
              v293 = (unsigned int *)((char *)v290 + v292);
              v294 = *v293;
              v295 = (char *)v293 + v294 + 4;
              v296 = *(unsigned int *)((char *)v293 + v294);
            }
            else
            {
              v295 = 0;
              v296 = 0;
            }
            if (v296 >= v288)
              v297 = v288;
            else
              v297 = v296;
            v298 = memcmp(v287, v295, v297);
            if (v298)
            {
              v275 = v489;
              if ((v298 & 0x80000000) == 0)
              {
LABEL_306:
                v289 = v514;
                goto LABEL_307;
              }
            }
            else
            {
              v275 = v489;
              if (v288 >= v296)
                goto LABEL_306;
            }
            ++v277;
            v276 = v278;
            goto LABEL_306;
          }
          v12 = &v9[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(&v7[v11 >> 1], v7, v488, v6);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v7, &v7[v11 >> 1], v488, v6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v7 + 1, v12 - 1, a2 - 2, v6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v7 + 2, &v7[(v11 >> 1) + 1], a2 - 3, v6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v12 - 1, &v7[v11 >> 1], &v7[(v11 >> 1) + 1], v6);
            v13 = *v7;
            *v7 = *v12;
            *v12 = v13;
          }
          v14 = *v7;
          v15 = *v6;
          v16 = *v6[1];
          v512 = v16;
          v481 = *v7;
          v483 = a4 - 1;
          v499 = *v6;
          if ((a5 & 1) == 0)
          {
            v17 = v15[37];
            v18 = *((_DWORD *)v15 + 70) - (_DWORD)v17 + v15[36];
            v20 = v17 + v18;
            v21 = (int *)(v17 + v18 - *(unsigned int *)(v16 + 4 * *((unsigned int *)v7 - 2)));
            v22 = (unsigned __int16 *)((char *)v21 - *v21);
            v479 = v15[36];
            if (*v22 >= 5u && (v23 = v22[2]) != 0)
            {
              v24 = (unsigned int *)((char *)v21 + v23);
              v25 = *v24;
              v26 = (char *)v24 + v25 + 4;
              v27 = *(unsigned int *)((char *)v24 + v25);
            }
            else
            {
              v26 = 0;
              v27 = 0;
            }
            v28 = *(unsigned int *)(v512 + 4 * v14);
            v491 = v20 - v28;
            v29 = (unsigned __int16 *)(v20 - v28 - *(int *)(v20 - v28));
            v30 = *v29;
            if (v30 < 5)
            {
              v31 = v20 - v28 - *(int *)(v20 - v28);
            }
            else
            {
              v31 = v20 - v28 - *(int *)(v20 - v28);
              v32 = v29[2];
              if (v32)
              {
                v33 = (unsigned int *)(v491 + v32);
                v34 = *v33;
                v35 = (char *)v33 + v34 + 4;
                v36 = *(unsigned int *)((char *)v33 + v34);
                goto LABEL_20;
              }
            }
            v35 = 0;
            v36 = 0;
LABEL_20:
            v19 = -v28;
            if (v36 >= v27)
              v37 = v27;
            else
              v37 = v36;
            v38 = memcmp(v26, v35, v37);
            if (v38)
            {
              if (v38 < 0)
                goto LABEL_25;
            }
            else if (v27 < v36)
            {
              goto LABEL_25;
            }
            if (v30 < 5)
            {
              v132 = 0;
              v133 = 0;
              v129 = v31;
            }
            else
            {
              v129 = v31;
              if (*(_WORD *)(v31 + 4))
              {
                v130 = (unsigned int *)(v491 + *(unsigned __int16 *)(v31 + 4));
                v131 = *v130;
                v132 = (char *)v130 + v131 + 4;
                v133 = *(unsigned int *)((char *)v130 + v131);
              }
              else
              {
                v132 = 0;
                v133 = 0;
              }
            }
            v134 = (int *)(v20 - *(unsigned int *)(v512 + 4 * *(unsigned int *)v488));
            v135 = (unsigned __int16 *)((char *)v134 - *v134);
            if (*v135 >= 5u && (v136 = v135[2]) != 0)
            {
              v137 = (unsigned int *)((char *)v134 + v136);
              v138 = *v137;
              v139 = (char *)v137 + v138 + 4;
              v140 = *(unsigned int *)((char *)v137 + v138);
            }
            else
            {
              v139 = 0;
              v140 = 0;
            }
            if (v140 >= v133)
              v141 = v133;
            else
              v141 = v140;
            result = memcmp(v132, v139, v141);
            v495 = v19;
            if ((_DWORD)result)
            {
              v142 = a2;
              if ((result & 0x80000000) != 0)
                goto LABEL_138;
            }
            else
            {
              v142 = a2;
              if (v133 < v140)
              {
LABEL_138:
                v143 = v7 + 1;
                do
                {
                  v9 = v143;
                  if (v30 >= 5 && *(_WORD *)(v129 + 4))
                  {
                    v144 = (unsigned int *)(v491 + *(unsigned __int16 *)(v129 + 4));
                    v145 = *v144;
                    v146 = (char *)v144 + v145 + 4;
                    v147 = *(unsigned int *)((char *)v144 + v145);
                  }
                  else
                  {
                    v146 = 0;
                    v147 = 0;
                  }
                  v148 = (int *)(v20 - *(unsigned int *)(v512 + 4 * *(unsigned int *)v9));
                  v149 = (unsigned __int16 *)((char *)v148 - *v148);
                  if (*v149 >= 5u && (v150 = v149[2]) != 0)
                  {
                    v151 = (unsigned int *)((char *)v148 + v150);
                    v152 = *v151;
                    v153 = (char *)v151 + v152 + 4;
                    v154 = *(unsigned int *)((char *)v151 + v152);
                  }
                  else
                  {
                    v153 = 0;
                    v154 = 0;
                  }
                  if (v154 >= v147)
                    v155 = v147;
                  else
                    v155 = v154;
                  result = memcmp(v146, v153, v155);
                  if (!(_DWORD)result)
                  {
                    if (v147 == v154)
                    {
                      result = 0;
                    }
                    else
                    {
                      if (v147 < v154)
                        goto LABEL_178;
                      result = 1;
                    }
                  }
                  v143 = v9 + 1;
                  v142 = a2;
                }
                while ((result & 0x80000000) == 0);
                goto LABEL_179;
              }
            }
            v156 = v7 + 1;
            do
            {
              v9 = v156;
              if (v156 >= v142)
                break;
              if (v30 >= 5 && *(_WORD *)(v129 + 4))
              {
                v157 = (unsigned int *)(v491 + *(unsigned __int16 *)(v129 + 4));
                v158 = *v157;
                v159 = (char *)v157 + v158 + 4;
                v160 = *(unsigned int *)((char *)v157 + v158);
              }
              else
              {
                v159 = 0;
                v160 = 0;
              }
              v161 = (int *)(v20 - *(unsigned int *)(v512 + 4 * *(unsigned int *)v9));
              v162 = (unsigned __int16 *)((char *)v161 - *v161);
              if (*v162 >= 5u && (v163 = v162[2]) != 0)
              {
                v164 = (unsigned int *)((char *)v161 + v163);
                v165 = *v164;
                v166 = (char *)v164 + v165 + 4;
                v167 = *(unsigned int *)((char *)v164 + v165);
              }
              else
              {
                v166 = 0;
                v167 = 0;
              }
              if (v167 >= v160)
                v168 = v160;
              else
                v168 = v167;
              result = memcmp(v159, v166, v168);
              if (!(_DWORD)result)
              {
                if (v160 == v167)
                {
                  result = 0;
                }
                else
                {
                  if (v160 < v167)
                  {
LABEL_178:
                    v142 = a2;
                    break;
                  }
                  result = 1;
                }
              }
              v156 = v9 + 1;
              v142 = a2;
            }
            while ((result & 0x80000000) == 0);
LABEL_179:
            v504 = v17;
            v169 = v142;
            if (v9 < v142)
            {
              v170 = a2 - 1;
              do
              {
                v169 = v170;
                if (v30 >= 5 && *(_WORD *)(v129 + 4))
                {
                  v171 = (unsigned int *)(v491 + *(unsigned __int16 *)(v129 + 4));
                  v172 = *v171;
                  v173 = (char *)v171 + v172 + 4;
                  v174 = *(unsigned int *)((char *)v171 + v172);
                }
                else
                {
                  v173 = 0;
                  v174 = 0;
                }
                v175 = (int *)(v20 - *(unsigned int *)(v512 + 4 * *(unsigned int *)v169));
                v176 = (unsigned __int16 *)((char *)v175 - *v175);
                if (*v176 >= 5u && (v177 = v176[2]) != 0)
                {
                  v178 = (unsigned int *)((char *)v175 + v177);
                  v179 = *v178;
                  v180 = (char *)v178 + v179 + 4;
                  v181 = *(unsigned int *)((char *)v178 + v179);
                }
                else
                {
                  v180 = 0;
                  v181 = 0;
                }
                if (v181 >= v174)
                  v182 = v174;
                else
                  v182 = v181;
                result = memcmp(v173, v180, v182);
                if (!(_DWORD)result)
                {
                  if (v174 >= v181)
                    break;
                  result = 0xFFFFFFFFLL;
                }
                v170 = v169 - 1;
              }
              while ((result & 0x80000000) != 0);
            }
            if (v9 < v169)
            {
              v183 = *v9;
              v184 = *v169;
              do
              {
                *v9 = v184;
                *v169 = v183;
                v185 = v504 + (v479 - v504 + *((_DWORD *)v499 + 70));
                v510 = v185 + v495;
                v186 = (unsigned __int16 *)(v185 + v495 - *(int *)(v185 + v495));
                v187 = *v186;
                v188 = v9 + 1;
                do
                {
                  v9 = v188;
                  v183 = *v188;
                  v189 = *(unsigned int *)(v512 + 4 * *v188);
                  if (v187 >= 5 && v186[2])
                  {
                    v190 = (unsigned int *)(v510 + v186[2]);
                    v191 = *v190;
                    v192 = (char *)v190 + v191 + 4;
                    v193 = *(unsigned int *)((char *)v190 + v191);
                  }
                  else
                  {
                    v192 = 0;
                    v193 = 0;
                  }
                  v194 = (int *)(v185 - v189);
                  v195 = (unsigned __int16 *)((char *)v194 - *v194);
                  if (*v195 >= 5u && (v196 = v195[2]) != 0)
                  {
                    v197 = (unsigned int *)((char *)v194 + v196);
                    v198 = *v197;
                    v199 = (char *)v197 + v198 + 4;
                    v200 = *(unsigned int *)((char *)v197 + v198);
                  }
                  else
                  {
                    v199 = 0;
                    v200 = 0;
                  }
                  if (v200 >= v193)
                    v201 = v193;
                  else
                    v201 = v200;
                  v202 = memcmp(v192, v199, v201);
                  if (!v202)
                  {
                    if (v193 == v200)
                    {
                      v202 = 0;
                    }
                    else
                    {
                      if (v193 < v200)
                        break;
                      v202 = 1;
                    }
                  }
                  v188 = v9 + 1;
                }
                while ((v202 & 0x80000000) == 0);
                v203 = v169 - 1;
                do
                {
                  v169 = v203;
                  v184 = *v203;
                  v204 = *(unsigned int *)(v512 + 4 * *v203);
                  if (v187 >= 5 && v186[2])
                  {
                    v205 = (unsigned int *)(v510 + v186[2]);
                    v206 = *v205;
                    v207 = (char *)v205 + v206 + 4;
                    v208 = *(unsigned int *)((char *)v205 + v206);
                  }
                  else
                  {
                    v207 = 0;
                    v208 = 0;
                  }
                  v209 = (int *)(v185 - v204);
                  v210 = (unsigned __int16 *)((char *)v209 - *v209);
                  if (*v210 >= 5u && (v211 = v210[2]) != 0)
                  {
                    v212 = (unsigned int *)((char *)v209 + v211);
                    v213 = *v212;
                    v214 = (char *)v212 + v213 + 4;
                    v215 = *(unsigned int *)((char *)v212 + v213);
                  }
                  else
                  {
                    v214 = 0;
                    v215 = 0;
                  }
                  if (v215 >= v208)
                    v216 = v208;
                  else
                    v216 = v215;
                  result = memcmp(v207, v214, v216);
                  if (!(_DWORD)result)
                  {
                    if (v208 >= v215)
                      break;
                    result = 0xFFFFFFFFLL;
                  }
                  v203 = v169 - 1;
                }
                while ((result & 0x80000000) != 0);
              }
              while (v9 < v169);
            }
            v217 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v217;
            a5 = 0;
            a4 = v483;
            *v217 = v481;
            v8 = a2;
            v6 = a3;
            continue;
          }
          v17 = v15[37];
          v479 = v15[36];
          v18 = (*((_DWORD *)v15 + 70) - v17 + v479);
          v19 = -(uint64_t)*(unsigned int *)(v16 + 4 * v14);
LABEL_25:
          v39 = 0;
          v40 = v17 + v18;
          v494 = v19;
          v41 = (int *)(v17 + v18 + v19);
          v42 = (unsigned __int16 *)((char *)v41 - *v41);
          v43 = *v42;
          do
          {
            v44 = v39;
            v45 = *(uint64_t *)((char *)v7 + v39 + 8);
            v46 = (int *)(v40 - *(unsigned int *)(v512 + 4 * v45));
            v47 = (unsigned __int16 *)((char *)v46 - *v46);
            if (*v47 >= 5u && (v48 = v47[2]) != 0)
            {
              v49 = (unsigned int *)((char *)v46 + v48);
              v50 = *v49;
              v51 = (char *)v49 + v50 + 4;
              v52 = *(unsigned int *)((char *)v49 + v50);
            }
            else
            {
              v51 = 0;
              v52 = 0;
            }
            if (v43 >= 5 && v42[2])
            {
              v53 = (unsigned int *)((char *)v41 + v42[2]);
              v54 = *v53;
              v55 = (char *)v53 + v54 + 4;
              v56 = *(unsigned int *)((char *)v53 + v54);
            }
            else
            {
              v55 = 0;
              v56 = 0;
            }
            if (v56 >= v52)
              v57 = v52;
            else
              v57 = v56;
            v58 = memcmp(v51, v55, v57);
            if (!v58)
            {
              if (v52 >= v56)
                break;
              v58 = -1;
            }
            v39 = v44 + 8;
          }
          while (v58 < 0);
          v503 = v17;
          v492 = (uint64_t *)((char *)v7 + v44);
          v59 = (unint64_t)v7 + v44 + 8;
          v60 = a2 - 1;
          if (v44)
          {
            do
            {
              v61 = v60;
              v62 = (int *)(v40 - *(unsigned int *)(v512 + 4 * *(unsigned int *)v60));
              v63 = (unsigned __int16 *)((char *)v62 - *v62);
              if (*v63 >= 5u && (v64 = v63[2]) != 0)
              {
                v65 = (unsigned int *)((char *)v62 + v64);
                v66 = *v65;
                v67 = (char *)v65 + v66 + 4;
                v68 = *(unsigned int *)((char *)v65 + v66);
              }
              else
              {
                v67 = 0;
                v68 = 0;
              }
              if (v43 >= 5 && v42[2])
              {
                v69 = (unsigned int *)((char *)v41 + v42[2]);
                v70 = *v69;
                v71 = (char *)v69 + v70 + 4;
                v72 = *(unsigned int *)((char *)v69 + v70);
              }
              else
              {
                v71 = 0;
                v72 = 0;
              }
              if (v72 >= v68)
                v73 = v68;
              else
                v73 = v72;
              v74 = memcmp(v67, v71, v73);
              if (!v74)
              {
                if (v68 == v72)
                {
                  v74 = 0;
                }
                else
                {
                  if (v68 < v72)
                    break;
                  v74 = 1;
                }
              }
              v60 = v61 - 1;
            }
            while ((v74 & 0x80000000) == 0);
          }
          else
          {
            v75 = a2 - 1;
            do
            {
              v61 = v75 + 1;
              if (v59 >= (unint64_t)(v75 + 1))
                break;
              v76 = v75;
              v77 = (int *)(v40 - *(unsigned int *)(v512 + 4 * *(unsigned int *)v75));
              v78 = (unsigned __int16 *)((char *)v77 - *v77);
              v61 = v76;
              if (*v78 >= 5u && (v79 = v78[2]) != 0)
              {
                v80 = (unsigned int *)((char *)v77 + v79);
                v81 = *v80;
                v82 = (char *)v80 + v81 + 4;
                v83 = *(unsigned int *)((char *)v80 + v81);
              }
              else
              {
                v82 = 0;
                v83 = 0;
              }
              if (v43 >= 5 && v42[2])
              {
                v84 = (unsigned int *)((char *)v41 + v42[2]);
                v85 = *v84;
                v86 = (char *)v84 + v85 + 4;
                v87 = *(unsigned int *)((char *)v84 + v85);
              }
              else
              {
                v86 = 0;
                v87 = 0;
              }
              if (v87 >= v83)
                v88 = v83;
              else
                v88 = v87;
              v89 = memcmp(v82, v86, v88);
              if (!v89)
              {
                if (v83 == v87)
                {
                  v89 = 0;
                }
                else
                {
                  if (v83 < v87)
                    break;
                  v89 = 1;
                }
              }
              v75 = v61 - 1;
            }
            while ((v89 & 0x80000000) == 0);
          }
          v486 = (uint64_t *)v59;
          v90 = v59 >= (unint64_t)v61;
          v6 = a3;
          v91 = v492;
          if (!v90)
          {
            v92 = v503;
            v493 = v479 - v503;
            v93 = *v61;
            v94 = v486;
            v480 = v61;
            v95 = v61;
            do
            {
              *v94 = v93;
              *v95 = v45;
              v96 = v92 + (v493 + *((_DWORD *)v499 + 70));
              v97 = v96 + v494;
              v98 = (unsigned __int16 *)(v96 + v494 - *(int *)(v96 + v494));
              v99 = *v98;
              v100 = v94 + 1;
              do
              {
                v94 = v100;
                v45 = *v100;
                v101 = (int *)(v96 - *(unsigned int *)(v512 + 4 * *v100));
                v102 = (unsigned __int16 *)((char *)v101 - *v101);
                if (*v102 >= 5u && (v103 = v102[2]) != 0)
                {
                  v104 = (unsigned int *)((char *)v101 + v103);
                  v105 = *v104;
                  v106 = (char *)v104 + v105 + 4;
                  v107 = *(unsigned int *)((char *)v104 + v105);
                }
                else
                {
                  v106 = 0;
                  v107 = 0;
                }
                if (v99 >= 5 && v98[2])
                {
                  v108 = (unsigned int *)(v97 + v98[2]);
                  v109 = *v108;
                  v110 = (char *)v108 + v109 + 4;
                  v111 = *(unsigned int *)((char *)v108 + v109);
                }
                else
                {
                  v110 = 0;
                  v111 = 0;
                }
                if (v111 >= v107)
                  v112 = v107;
                else
                  v112 = v111;
                v113 = memcmp(v106, v110, v112);
                if (!v113)
                {
                  if (v107 >= v111)
                    break;
                  v113 = -1;
                }
                v100 = v94 + 1;
              }
              while (v113 < 0);
              v114 = v95 - 1;
              do
              {
                v95 = v114;
                v93 = *v114;
                v115 = (int *)(v96 - *(unsigned int *)(v512 + 4 * *v114));
                v116 = (unsigned __int16 *)((char *)v115 - *v115);
                if (*v116 >= 5u && (v117 = v116[2]) != 0)
                {
                  v118 = (unsigned int *)((char *)v115 + v117);
                  v119 = *v118;
                  v120 = (char *)v118 + v119 + 4;
                  v121 = *(unsigned int *)((char *)v118 + v119);
                }
                else
                {
                  v120 = 0;
                  v121 = 0;
                }
                if (v99 >= 5 && v98[2])
                {
                  v122 = (unsigned int *)(v97 + v98[2]);
                  v123 = *v122;
                  v124 = (char *)v122 + v123 + 4;
                  v125 = *(unsigned int *)((char *)v122 + v123);
                }
                else
                {
                  v124 = 0;
                  v125 = 0;
                }
                if (v125 >= v121)
                  v126 = v121;
                else
                  v126 = v125;
                v127 = memcmp(v120, v124, v126);
                if (!v127)
                {
                  if (v121 == v125)
                  {
                    v127 = 0;
                  }
                  else
                  {
                    if (v121 < v125)
                      break;
                    v127 = 1;
                  }
                }
                v114 = v95 - 1;
              }
              while ((v127 & 0x80000000) == 0);
              v7 = v509;
              v92 = v503;
            }
            while (v94 < v95);
            v91 = v94 - 1;
            v6 = a3;
            v61 = v480;
          }
          if (v91 != v7)
            *v7 = *v91;
          a4 = v483;
          *v91 = v481;
          v8 = a2;
          if (v486 < v61)
          {
LABEL_122:
            result = std::__introsort<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,false>(v7, v91, v6, v483, a5 & 1);
            a5 = 0;
            v9 = v91 + 1;
            continue;
          }
          v128 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v7, v91, v6);
          v9 = v91 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(v91 + 1, a2, v6);
          if (!(_DWORD)result)
          {
            if (v128)
              continue;
            goto LABEL_122;
          }
          a2 = v91;
          if (v128)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) == 0)
        {
          if (v9 == a2)
            return result;
          v434 = v9 + 1;
          if (v9 + 1 == a2)
            return result;
          v435 = *v6;
          v436 = *v6[1];
          v437 = v435[37];
          v438 = v435[36] - v437;
          while (1)
          {
            v439 = v7;
            v440 = v434;
            v441 = v7[1];
            v442 = *(unsigned int *)(v436 + 4 * v441);
            v443 = v437 + (v438 + *((_DWORD *)v435 + 70));
            v444 = (unsigned __int16 *)(v443 - v442 - *(int *)(v443 - v442));
            v511 = v440;
            if (*v444 >= 5u && (v445 = v444[2]) != 0)
            {
              v446 = (unsigned int *)(v443 - v442 + v445);
              v447 = *v446;
              v448 = (char *)v446 + v447 + 4;
              v449 = *(unsigned int *)((char *)v446 + v447);
            }
            else
            {
              v448 = 0;
              v449 = 0;
            }
            v450 = *v439;
            v451 = (int *)(v443 - *(unsigned int *)(v436 + 4 * *v439));
            v452 = (unsigned __int16 *)((char *)v451 - *v451);
            if (*v452 >= 5u && (v453 = v452[2]) != 0)
            {
              v454 = (unsigned int *)((char *)v451 + v453);
              v455 = *v454;
              v456 = (char *)v454 + v455 + 4;
              v457 = *(unsigned int *)((char *)v454 + v455);
            }
            else
            {
              v456 = 0;
              v457 = 0;
            }
            if (v457 >= v449)
              v458 = v449;
            else
              v458 = v457;
            result = memcmp(v448, v456, v458);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) == 0)
                goto LABEL_473;
            }
            else if (v449 >= v457)
            {
              goto LABEL_473;
            }
            v517 = v441;
            v459 = -v442;
            do
            {
              v460 = v439;
              v462 = *--v439;
              v461 = v462;
              v439[2] = v450;
              v463 = v437 + (v438 + *((_DWORD *)v435 + 70));
              v464 = (unsigned __int16 *)(v463 + v459 - *(int *)(v463 + v459));
              if (*v464 >= 5u && (v465 = v464[2]) != 0)
              {
                v466 = (unsigned int *)(v463 + v459 + v465);
                v467 = *v466;
                v468 = (char *)v466 + v467 + 4;
                v469 = *(unsigned int *)((char *)v466 + v467);
              }
              else
              {
                v468 = 0;
                v469 = 0;
              }
              v470 = (int *)(v463 - *(unsigned int *)(v436 + 4 * v461));
              v471 = (unsigned __int16 *)((char *)v470 - *v470);
              if (*v471 >= 5u && (v472 = v471[2]) != 0)
              {
                v473 = (unsigned int *)((char *)v470 + v472);
                v474 = *v473;
                v475 = (char *)v473 + v474 + 4;
                v476 = *(unsigned int *)((char *)v473 + v474);
              }
              else
              {
                v475 = 0;
                v476 = 0;
              }
              if (v476 >= v469)
                v477 = v469;
              else
                v477 = v476;
              result = memcmp(v468, v475, v477);
              if (!(_DWORD)result)
              {
                if (v469 >= v476)
                  break;
                result = 0xFFFFFFFFLL;
              }
              v450 = v461;
            }
            while ((result & 0x80000000) != 0);
            *v460 = v517;
LABEL_473:
            v7 = v511;
            v434 = v511 + 1;
            if (v511 + 1 == a2)
              return result;
          }
        }
        if (v9 == a2)
          return result;
        v231 = v9 + 1;
        if (v9 + 1 == a2)
          return result;
        v232 = 0;
        v233 = v6;
        v234 = *v6;
        v235 = *v233[1];
        v236 = v234[37];
        v237 = v234[36] - v236;
        do
        {
          v238 = v231;
          v239 = *(unsigned int *)(v235 + 4 * v9[1]);
          v240 = v236 + (v237 + *((_DWORD *)v234 + 70));
          v241 = (unsigned __int16 *)(v240 - v239 - *(int *)(v240 - v239));
          v513 = v238;
          v505 = v9[1];
          if (*v241 >= 5u && (v242 = v241[2]) != 0)
          {
            v243 = (unsigned int *)(v240 - v239 + v242);
            v244 = *v243;
            v245 = (char *)v243 + v244 + 4;
            v246 = *(unsigned int *)((char *)v243 + v244);
          }
          else
          {
            v245 = 0;
            v246 = 0;
          }
          v247 = *v9;
          v248 = (int *)(v240 - *(unsigned int *)(v235 + 4 * *v9));
          v249 = (unsigned __int16 *)((char *)v248 - *v248);
          if (*v249 >= 5u && (v250 = v249[2]) != 0)
          {
            v251 = (unsigned int *)((char *)v248 + v250);
            v252 = *v251;
            v253 = (char *)v251 + v252 + 4;
            v254 = *(unsigned int *)((char *)v251 + v252);
          }
          else
          {
            v253 = 0;
            v254 = 0;
          }
          if (v254 >= v246)
            v255 = v246;
          else
            v255 = v254;
          result = memcmp(v245, v253, v255);
          if ((_DWORD)result)
          {
            if ((result & 0x80000000) == 0)
              goto LABEL_285;
          }
          else if (v246 >= v254)
          {
            goto LABEL_285;
          }
          v256 = -v239;
          v500 = v232;
          while (1)
          {
            *(uint64_t *)((char *)v509 + v232 + 8) = v247;
            if (!v232)
            {
              v257 = v509;
              goto LABEL_284;
            }
            v257 = v9;
            v258 = v236 + (v237 + *((_DWORD *)v234 + 70));
            v259 = (unsigned __int16 *)(v258 + v256 - *(int *)(v258 + v256));
            if (*v259 >= 5u && (v260 = v259[2]) != 0)
            {
              v261 = (unsigned int *)(v258 + v256 + v260);
              v262 = *v261;
              v263 = (char *)v261 + v262 + 4;
              v264 = *(unsigned int *)((char *)v261 + v262);
            }
            else
            {
              v263 = 0;
              v264 = 0;
            }
            v247 = *(uint64_t *)((char *)v509 + v232 - 8);
            v265 = (int *)(v258 - *(unsigned int *)(v235 + 4 * v247));
            v266 = (unsigned __int16 *)((char *)v265 - *v265);
            if (*v266 >= 5u && (v267 = v266[2]) != 0)
            {
              v268 = (unsigned int *)((char *)v265 + v267);
              v269 = *v268;
              v270 = (char *)v268 + v269 + 4;
              v271 = *(unsigned int *)((char *)v268 + v269);
            }
            else
            {
              v270 = 0;
              v271 = 0;
            }
            v272 = v271 >= v264 ? v264 : v271;
            result = memcmp(v263, v270, v272);
            if (!(_DWORD)result)
              break;
LABEL_280:
            v9 = v257 - 1;
            v232 -= 8;
            if ((result & 0x80000000) == 0)
              goto LABEL_284;
          }
          if (v264 < v271)
          {
            result = 0xFFFFFFFFLL;
            goto LABEL_280;
          }
          v257 = (uint64_t *)((char *)v509 + v232);
LABEL_284:
          v232 = v500;
          *v257 = v505;
LABEL_285:
          v9 = v513;
          v231 = v513 + 1;
          v232 += 8;
        }
        while (v513 + 1 != a2);
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD **a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  size_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int *v36;
  int *v37;
  unsigned __int16 *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  char *v42;
  size_t v43;
  unsigned __int16 *v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  char *v48;
  size_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  unsigned int *v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  unsigned __int16 *v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  size_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  int *v73;
  unsigned __int16 *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  char *v84;
  size_t v85;
  size_t v86;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a2, a3, a4, a6);
  v9 = *a5;
  v10 = *a4;
  v11 = *a6;
  v12 = *a6[1];
  v13 = v11[36];
  v14 = v11[37];
  v15 = v14 + (*((_DWORD *)v11 + 70) - v14 + v13);
  v16 = (int *)(v15 - *(unsigned int *)(v12 + 4 * *a5));
  v17 = (int *)(v15 - *(unsigned int *)(v12 + 4 * *a4));
  v18 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v18 >= 5u && (v19 = v18[2]) != 0)
  {
    v20 = (unsigned int *)((char *)v16 + v19);
    v21 = *v20;
    v22 = (char *)v20 + v21 + 4;
    v23 = *(unsigned int *)((char *)v20 + v21);
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  v24 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v24 >= 5u && (v25 = v24[2]) != 0)
  {
    v26 = (unsigned int *)((char *)v17 + v25);
    v27 = *v26;
    v28 = (char *)v26 + v27 + 4;
    v29 = *(unsigned int *)((char *)v26 + v27);
  }
  else
  {
    v28 = 0;
    v29 = 0;
  }
  if (v29 >= v23)
    v30 = v23;
  else
    v30 = v29;
  result = memcmp(v22, v28, v30);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v23 >= v29)
  {
    return result;
  }
  *a4 = v9;
  *a5 = v10;
  v32 = *a4;
  v33 = *a3;
  v34 = v13 - v14;
  v35 = v14 + (*((_DWORD *)v11 + 70) + v13 - v14);
  v36 = (int *)(v35 - *(unsigned int *)(v12 + 4 * *a4));
  v37 = (int *)(v35 - *(unsigned int *)(v12 + 4 * *a3));
  v38 = (unsigned __int16 *)((char *)v36 - *v36);
  if (*v38 >= 5u && (v39 = v38[2]) != 0)
  {
    v40 = (unsigned int *)((char *)v36 + v39);
    v41 = *v40;
    v42 = (char *)v40 + v41 + 4;
    v43 = *(unsigned int *)((char *)v40 + v41);
  }
  else
  {
    v42 = 0;
    v43 = 0;
  }
  v44 = (unsigned __int16 *)((char *)v37 - *v37);
  if (*v44 >= 5u && (v45 = v44[2]) != 0)
  {
    v46 = (unsigned int *)((char *)v37 + v45);
    v47 = *v46;
    v48 = (char *)v46 + v47 + 4;
    v49 = *(unsigned int *)((char *)v46 + v47);
  }
  else
  {
    v48 = 0;
    v49 = 0;
  }
  if (v49 >= v43)
    v50 = v43;
  else
    v50 = v49;
  result = memcmp(v42, v48, v50);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v43 >= v49)
  {
    return result;
  }
  *a3 = v32;
  *a4 = v33;
  v51 = *a3;
  v52 = *a2;
  v53 = v14 + (*((_DWORD *)v11 + 70) + v34);
  v54 = (int *)(v53 - *(unsigned int *)(v12 + 4 * *a3));
  v55 = (int *)(v53 - *(unsigned int *)(v12 + 4 * *a2));
  v56 = (unsigned __int16 *)((char *)v54 - *v54);
  if (*v56 >= 5u && (v57 = v56[2]) != 0)
  {
    v58 = (unsigned int *)((char *)v54 + v57);
    v59 = *v58;
    v60 = (char *)v58 + v59 + 4;
    v61 = *(unsigned int *)((char *)v58 + v59);
  }
  else
  {
    v60 = 0;
    v61 = 0;
  }
  v62 = (unsigned __int16 *)((char *)v55 - *v55);
  if (*v62 >= 5u && (v63 = v62[2]) != 0)
  {
    v64 = (unsigned int *)((char *)v55 + v63);
    v65 = *v64;
    v66 = (char *)v64 + v65 + 4;
    v67 = *(unsigned int *)((char *)v64 + v65);
  }
  else
  {
    v66 = 0;
    v67 = 0;
  }
  if (v67 >= v61)
    v68 = v61;
  else
    v68 = v67;
  result = memcmp(v60, v66, v68);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v61 >= v67)
  {
    return result;
  }
  *a2 = v51;
  *a3 = v52;
  v69 = *a2;
  v70 = *a1;
  v71 = v14 + (*((_DWORD *)v11 + 70) + v34);
  v72 = (int *)(v71 - *(unsigned int *)(v12 + 4 * *a2));
  v73 = (int *)(v71 - *(unsigned int *)(v12 + 4 * *a1));
  v74 = (unsigned __int16 *)((char *)v72 - *v72);
  if (*v74 >= 5u && (v75 = v74[2]) != 0)
  {
    v76 = (unsigned int *)((char *)v72 + v75);
    v77 = *v76;
    v78 = (char *)v76 + v77 + 4;
    v79 = *(unsigned int *)((char *)v76 + v77);
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  v80 = (unsigned __int16 *)((char *)v73 - *v73);
  if (*v80 >= 5u && (v81 = v80[2]) != 0)
  {
    v82 = (unsigned int *)((char *)v73 + v81);
    v83 = *v82;
    v84 = (char *)v82 + v83 + 4;
    v85 = *(unsigned int *)((char *)v82 + v83);
  }
  else
  {
    v84 = 0;
    v85 = 0;
  }
  if (v85 >= v79)
    v86 = v79;
  else
    v86 = v85;
  result = memcmp(v78, v84, v86);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v79 >= v85)
  {
    return result;
  }
  *a1 = v69;
  *a2 = v70;
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD **a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  int *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  int *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  unsigned int *v41;
  uint64_t v42;
  char *v43;
  size_t v44;
  unsigned int *v45;
  uint64_t v46;
  char *v47;
  size_t v48;
  size_t v49;
  uint64_t result;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int *v56;
  unsigned __int16 *v57;
  uint64_t v58;
  unsigned int *v59;
  uint64_t v60;
  char *v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int *v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  char *v72;
  size_t v73;
  unsigned __int16 *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  unsigned __int16 *v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  char *v84;
  size_t v85;
  size_t v86;
  size_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;

  v4 = *a4;
  v5 = *a4[1];
  v6 = (*a4)[37];
  v7 = v6 + *((_DWORD *)*a4 + 70) - (_DWORD)v6 + (*a4)[36];
  v8 = *(unsigned int *)(v5 + 4 * *a1);
  v9 = (int *)(v7 - *(unsigned int *)(v5 + 4 * *a2));
  v10 = (int *)(v7 - v8);
  v11 = (unsigned __int16 *)((char *)v9 - *v9);
  v12 = *v11;
  v90 = *a1;
  if (v12 >= 5 && v11[2])
  {
    v13 = (unsigned int *)((char *)v9 + v11[2]);
    v14 = *v13;
    v15 = (char *)v13 + v14 + 4;
    v16 = *(unsigned int *)((char *)v13 + v14);
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  v17 = (unsigned __int16 *)((char *)v10 - *v10);
  v88 = *a2;
  v89 = (*a4)[36];
  if (*v17 >= 5u && (v18 = v17[2]) != 0)
  {
    v19 = (unsigned int *)((char *)v10 + v18);
    v20 = *v19;
    v21 = (char *)v19 + v20 + 4;
    v22 = *(unsigned int *)((char *)v19 + v20);
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  if (v22 >= v16)
    v23 = v16;
  else
    v23 = v22;
  v24 = memcmp(v15, v21, v23);
  if (v24)
  {
    if (v24 < 0)
    {
LABEL_14:
      v25 = *a3;
      v26 = (int *)(v7 - *(unsigned int *)(v5 + 4 * *a3));
      v27 = (unsigned __int16 *)((char *)v26 - *v26);
      if (*v27 >= 5u && (v28 = v27[2]) != 0)
      {
        v29 = (unsigned int *)((char *)v26 + v28);
        v30 = *v29;
        v31 = (char *)v29 + v30 + 4;
        v32 = *(unsigned int *)((char *)v29 + v30);
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
      if (v12 >= 5 && v11[2])
      {
        v41 = (unsigned int *)((char *)v9 + v11[2]);
        v42 = *v41;
        v43 = (char *)v41 + v42 + 4;
        v44 = *(unsigned int *)((char *)v41 + v42);
      }
      else
      {
        v43 = 0;
        v44 = 0;
      }
      if (v44 >= v32)
        v49 = v32;
      else
        v49 = v44;
      result = memcmp(v31, v43, v49);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) != 0)
        {
LABEL_35:
          *a1 = v25;
          *a3 = v90;
          return result;
        }
      }
      else if (v32 < v44)
      {
        goto LABEL_35;
      }
      v52 = -v8;
      *a1 = v88;
      *a2 = v90;
      v53 = *a3;
      v54 = v6 + (v89 - v6 + v4[70]);
      v55 = (int *)(v54 - *(unsigned int *)(v5 + 4 * *a3));
      v56 = (int *)(v54 + v52);
      v57 = (unsigned __int16 *)((char *)v55 - *v55);
      if (*v57 >= 5u && (v58 = v57[2]) != 0)
      {
        v59 = (unsigned int *)((char *)v55 + v58);
        v60 = *v59;
        v61 = (char *)v59 + v60 + 4;
        v62 = *(unsigned int *)((char *)v59 + v60);
      }
      else
      {
        v61 = 0;
        v62 = 0;
      }
      v74 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v74 >= 5u && (v75 = v74[2]) != 0)
      {
        v76 = (unsigned int *)((char *)v56 + v75);
        v77 = *v76;
        v78 = (char *)v76 + v77 + 4;
        v79 = *(unsigned int *)((char *)v76 + v77);
      }
      else
      {
        v78 = 0;
        v79 = 0;
      }
      if (v79 >= v62)
        v86 = v62;
      else
        v86 = v79;
      result = memcmp(v61, v78, v86);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          return result;
      }
      else if (v62 >= v79)
      {
        return result;
      }
      *a2 = v53;
      *a3 = v90;
      return result;
    }
  }
  else if (v16 < v22)
  {
    goto LABEL_14;
  }
  v33 = *a3;
  v34 = (int *)(v7 - *(unsigned int *)(v5 + 4 * *a3));
  v35 = (unsigned __int16 *)((char *)v34 - *v34);
  if (*v35 >= 5u && (v36 = v35[2]) != 0)
  {
    v37 = (unsigned int *)((char *)v34 + v36);
    v38 = *v37;
    v39 = (char *)v37 + v38 + 4;
    v40 = *(unsigned int *)((char *)v37 + v38);
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
  if (v12 >= 5 && v11[2])
  {
    v45 = (unsigned int *)((char *)v9 + v11[2]);
    v46 = *v45;
    v47 = (char *)v45 + v46 + 4;
    v48 = *(unsigned int *)((char *)v45 + v46);
  }
  else
  {
    v47 = 0;
    v48 = 0;
  }
  if (v48 >= v40)
    v51 = v40;
  else
    v51 = v48;
  result = memcmp(v39, v47, v51);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v40 >= v48)
  {
    return result;
  }
  *a2 = v33;
  *a3 = v88;
  v63 = *a2;
  v64 = *a1;
  v65 = v6 + (v89 - v6 + v4[70]);
  v66 = (int *)(v65 - *(unsigned int *)(v5 + 4 * *a2));
  v67 = (int *)(v65 - *(unsigned int *)(v5 + 4 * *a1));
  v68 = (unsigned __int16 *)((char *)v66 - *v66);
  if (*v68 >= 5u && (v69 = v68[2]) != 0)
  {
    v70 = (unsigned int *)((char *)v66 + v69);
    v71 = *v70;
    v72 = (char *)v70 + v71 + 4;
    v73 = *(unsigned int *)((char *)v70 + v71);
  }
  else
  {
    v72 = 0;
    v73 = 0;
  }
  v80 = (unsigned __int16 *)((char *)v67 - *v67);
  if (*v80 >= 5u && (v81 = v80[2]) != 0)
  {
    v82 = (unsigned int *)((char *)v67 + v81);
    v83 = *v82;
    v84 = (char *)v82 + v83 + 4;
    v85 = *(unsigned int *)((char *)v82 + v83);
  }
  else
  {
    v84 = 0;
    v85 = 0;
  }
  if (v85 >= v73)
    v87 = v73;
  else
    v87 = v85;
  result = memcmp(v72, v84, v87);
  if (!(_DWORD)result)
  {
    if (v73 >= v85)
      return result;
    goto LABEL_76;
  }
  if ((result & 0x80000000) != 0)
  {
LABEL_76:
    *a1 = v63;
    *a2 = v64;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  uint64_t *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  int *v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  char *v38;
  size_t v39;
  size_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  int *v52;
  unsigned __int16 *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t v56;
  char *v57;
  size_t v58;
  size_t v59;
  int v60;
  unsigned __int16 *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t *v73;
  uint64_t v74;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *a3[1];
      v9 = (*a3)[37] + *((_DWORD *)*a3 + 70) - (*a3)[37] + *((_DWORD *)*a3 + 72);
      v10 = *(unsigned int *)(v8 + 4 * *a1);
      v11 = (int *)(v9 - *(unsigned int *)(v8 + 4 * v6));
      v12 = (int *)(v9 - v10);
      v13 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v13 >= 5u && (v14 = v13[2]) != 0)
      {
        v15 = (unsigned int *)((char *)v11 + v14);
        v16 = *v15;
        v17 = (char *)v15 + v16 + 4;
        v18 = *(unsigned int *)((char *)v15 + v16);
      }
      else
      {
        v17 = 0;
        v18 = 0;
      }
      v61 = (unsigned __int16 *)((char *)v12 - *v12);
      if (*v61 >= 5u && (v62 = v61[2]) != 0)
      {
        v63 = (unsigned int *)((char *)v12 + v62);
        v64 = *v63;
        v65 = (char *)v63 + v64 + 4;
        v66 = *(unsigned int *)((char *)v63 + v64);
      }
      else
      {
        v65 = 0;
        v66 = 0;
      }
      if (v66 >= v18)
        v67 = v18;
      else
        v67 = v66;
      v68 = memcmp(v17, v65, v67);
      if (v68)
      {
        if ((v68 & 0x80000000) == 0)
          return 1;
        goto LABEL_58;
      }
      if (v18 < v66)
      {
LABEL_58:
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v19 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      v20 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v74 = 0;
      v70 = 0;
      v21 = *a3;
      v22 = *a3[1];
      v23 = v21[37];
      v69 = v21[36];
      while (2)
      {
        v24 = *(unsigned int *)(v22 + 4 * *v20);
        v25 = v23 + (*((_DWORD *)v21 + 70) - v23 + v69);
        v26 = (unsigned __int16 *)(v25 - v24 - *(int *)(v25 - v24));
        v73 = v20;
        v71 = *v20;
        if (*v26 >= 5u && (v27 = v26[2]) != 0)
        {
          v28 = (unsigned int *)(v25 - v24 + v27);
          v29 = *v28;
          v30 = (char *)v28 + v29 + 4;
          v31 = *(unsigned int *)((char *)v28 + v29);
        }
        else
        {
          v30 = 0;
          v31 = 0;
        }
        v32 = *v19;
        v33 = (int *)(v25 - *(unsigned int *)(v22 + 4 * *v19));
        v34 = (unsigned __int16 *)((char *)v33 - *v33);
        if (*v34 >= 5u && (v35 = v34[2]) != 0)
        {
          v36 = (unsigned int *)((char *)v33 + v35);
          v37 = *v36;
          v38 = (char *)v36 + v37 + 4;
          v39 = *(unsigned int *)((char *)v36 + v37);
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
        if (v39 >= v31)
          v40 = v31;
        else
          v40 = v39;
        v41 = memcmp(v30, v38, v40);
        if (v41)
        {
          if ((v41 & 0x80000000) == 0)
            goto LABEL_43;
        }
        else if (v31 >= v39)
        {
          goto LABEL_43;
        }
        v42 = -v24;
        v43 = v74;
        while (2)
        {
          *(uint64_t *)((char *)a1 + v43 + 24) = v32;
          if (v43 == -16)
          {
            v44 = a1;
            goto LABEL_42;
          }
          v44 = v19;
          v45 = v23 + (v69 - v23 + *((_DWORD *)v21 + 70));
          v46 = (unsigned __int16 *)(v45 + v42 - *(int *)(v45 + v42));
          if (*v46 >= 5u && (v47 = v46[2]) != 0)
          {
            v48 = (unsigned int *)(v45 + v42 + v47);
            v49 = *v48;
            v50 = (char *)v48 + v49 + 4;
            v51 = *(unsigned int *)((char *)v48 + v49);
          }
          else
          {
            v50 = 0;
            v51 = 0;
          }
          v32 = *(uint64_t *)((char *)a1 + v43 + 8);
          v52 = (int *)(v45 - *(unsigned int *)(v22 + 4 * v32));
          v53 = (unsigned __int16 *)((char *)v52 - *v52);
          if (*v53 >= 5u && (v54 = v53[2]) != 0)
          {
            v55 = (unsigned int *)((char *)v52 + v54);
            v56 = *v55;
            v57 = (char *)v55 + v56 + 4;
            v58 = *(unsigned int *)((char *)v55 + v56);
          }
          else
          {
            v57 = 0;
            v58 = 0;
          }
          if (v58 >= v51)
            v59 = v51;
          else
            v59 = v58;
          v60 = memcmp(v50, v57, v59);
          if (v60)
            goto LABEL_38;
          if (v51 < v58)
          {
            v60 = -1;
LABEL_38:
            v19 = v44 - 1;
            v43 -= 8;
            if ((v60 & 0x80000000) == 0)
              goto LABEL_42;
            continue;
          }
          break;
        }
        v44 = (uint64_t *)((char *)a1 + v43 + 16);
LABEL_42:
        *v44 = v71;
        if (++v70 != 8)
        {
LABEL_43:
          v19 = v73;
          v74 += 8;
          v20 = v73 + 1;
          if (v73 + 1 == a2)
            return 1;
          continue;
        }
        return v73 + 1 == a2;
      }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD **a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  size_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  char *v46;
  size_t v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int *v53;
  unsigned __int16 *v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v57;
  char *v58;
  size_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  size_t v66;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLMetalScriptBuilderImpl::addStitchedFunctionLibraryWithDescriptorInternal(objc_object  {objcproto11MTLFunction}*,objc_object  {objcproto10MTLLibrary}*,MTLStitchedLibraryDescriptor *)::$_1 &,unsigned long *>(a1, a2, a3, a5);
  v8 = *a4;
  v9 = *a3;
  v10 = *a5;
  v11 = *a5[1];
  v13 = v10[36];
  v12 = v10[37];
  v14 = v12 + (*((_DWORD *)v10 + 70) - v12 + v13);
  v15 = (int *)(v14 - *(unsigned int *)(v11 + 4 * *a4));
  v16 = (int *)(v14 - *(unsigned int *)(v11 + 4 * *a3));
  v17 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v17 >= 5u && (v18 = v17[2]) != 0)
  {
    v19 = (unsigned int *)((char *)v15 + v18);
    v20 = *v19;
    v21 = (char *)v19 + v20 + 4;
    v22 = *(unsigned int *)((char *)v19 + v20);
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v23 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v23 >= 5u && (v24 = v23[2]) != 0)
  {
    v25 = (unsigned int *)((char *)v16 + v24);
    v26 = *v25;
    v27 = (char *)v25 + v26 + 4;
    v28 = *(unsigned int *)((char *)v25 + v26);
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  if (v28 >= v22)
    v29 = v22;
  else
    v29 = v28;
  result = memcmp(v21, v27, v29);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v22 >= v28)
  {
    return result;
  }
  *a3 = v8;
  *a4 = v9;
  v31 = *a3;
  v32 = *a2;
  v33 = v12 + (v13 - v12 + *((_DWORD *)v10 + 70));
  v34 = (int *)(v33 - *(unsigned int *)(v11 + 4 * *a3));
  v35 = (int *)(v33 - *(unsigned int *)(v11 + 4 * *a2));
  v36 = (unsigned __int16 *)((char *)v34 - *v34);
  if (*v36 >= 5u && (v37 = v36[2]) != 0)
  {
    v38 = (unsigned int *)((char *)v34 + v37);
    v39 = *v38;
    v40 = (char *)v38 + v39 + 4;
    v41 = *(unsigned int *)((char *)v38 + v39);
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  v42 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v42 >= 5u && (v43 = v42[2]) != 0)
  {
    v44 = (unsigned int *)((char *)v35 + v43);
    v45 = *v44;
    v46 = (char *)v44 + v45 + 4;
    v47 = *(unsigned int *)((char *)v44 + v45);
  }
  else
  {
    v46 = 0;
    v47 = 0;
  }
  if (v47 >= v41)
    v48 = v41;
  else
    v48 = v47;
  result = memcmp(v40, v46, v48);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v41 >= v47)
  {
    return result;
  }
  *a2 = v31;
  *a3 = v32;
  v49 = *a2;
  v50 = *a1;
  v51 = v12 + (v13 - v12 + *((_DWORD *)v10 + 70));
  v52 = (int *)(v51 - *(unsigned int *)(v11 + 4 * *a2));
  v53 = (int *)(v51 - *(unsigned int *)(v11 + 4 * *a1));
  v54 = (unsigned __int16 *)((char *)v52 - *v52);
  if (*v54 >= 5u && (v55 = v54[2]) != 0)
  {
    v56 = (unsigned int *)((char *)v52 + v55);
    v57 = *v56;
    v58 = (char *)v56 + v57 + 4;
    v59 = *(unsigned int *)((char *)v56 + v57);
  }
  else
  {
    v58 = 0;
    v59 = 0;
  }
  v60 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v60 >= 5u && (v61 = v60[2]) != 0)
  {
    v62 = (unsigned int *)((char *)v53 + v61);
    v63 = *v62;
    v64 = (char *)v62 + v63 + 4;
    v65 = *(unsigned int *)((char *)v62 + v63);
  }
  else
  {
    v64 = 0;
    v65 = 0;
  }
  if (v65 >= v59)
    v66 = v59;
  else
    v66 = v65;
  result = memcmp(v58, v64, v66);
  if ((_DWORD)result)
  {
    if ((result & 0x80000000) == 0)
      return result;
  }
  else if (v59 >= v65)
  {
    return result;
  }
  *a1 = v49;
  *a2 = v50;
  return result;
}

uint64_t MTLPipelineLibrarySerializer::PipelineLibrarySerializerInterface::createMetalScriptSerializer(char a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  MetalScriptSerializer::MetalScriptSerializer(v4, a1, (uint64_t)v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return v4;
}

void sub_1827261E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  MEMORY[0x186DABFBC](v13, 0x10B1C402A263007);
  _Unwind_Resume(a1);
}

uint64_t MetalScriptSerializer::MetalScriptSerializer(uint64_t a1, char a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_1E0FE08D0;
  *(_BYTE *)(a1 + 8) = a2;
  std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::__value_func[abi:ne180100](a1 + 16, a3);
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_182809F30;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 1;
  *(_WORD *)(a1 + 128) = 256;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_OWORD *)(a1 + 400) = xmmword_18280BAA0;
  *(_QWORD *)(a1 + 416) = 0x20000000;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_DWORD *)(a1 + 456) = 1065353216;
  return a1;
}

MTLMetalScriptSerializer *MetalScriptSerializer::addLibrary(MetalScriptSerializer *this, flatbuffers::FlatBufferBuilder **a2)
{
  MTLMetalScriptSerializer *v4;
  flatbuffers::FlatBufferBuilder *v5;
  NSString *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  char *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  void *__p[2];
  char v26;

  v4 = (MTLMetalScriptSerializer *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = (char *)v4 + 1;
  v5 = (MetalScriptSerializer *)((char *)this + 48);
  MTLMetalScriptSerializer::makeNumberString(v4, (uint64_t)__p);
  v7 = MTLMetalScriptSerializer::addString(v5, (const char *)__p);
  if (v26 < 0)
    operator delete(__p[0]);
  v8 = MTLMetalScriptSerializer::addString(v5, a2[1], v6);
  *((_BYTE *)this + 118) = 1;
  v9 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v5, 4, v7);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v5, 6, v8);
  v10 = flatbuffers::FlatBufferBuilder::EndTable(v5, v9);
  v11 = v10;
  v12 = *((_QWORD *)this + 20);
  v13 = (char *)*((_QWORD *)this + 19);
  if ((unint64_t)v13 >= v12)
  {
    v15 = (char *)*((_QWORD *)this + 18);
    v16 = (v13 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v17 = v12 - (_QWORD)v15;
    v18 = (uint64_t)(v12 - (_QWORD)v15) >> 1;
    if (v18 <= v16 + 1)
      v18 = v16 + 1;
    if (v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
    {
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 160, v19);
      v15 = (char *)*((_QWORD *)this + 18);
      v13 = (char *)*((_QWORD *)this + 19);
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[4 * v16];
    v22 = &v20[4 * v19];
    *(_DWORD *)v21 = v11;
    v14 = v21 + 4;
    while (v13 != v15)
    {
      v23 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v21 - 1) = v23;
      v21 -= 4;
    }
    *((_QWORD *)this + 18) = v21;
    *((_QWORD *)this + 19) = v14;
    *((_QWORD *)this + 20) = v22;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_DWORD *)v13 = v10;
    v14 = v13 + 4;
  }
  *((_QWORD *)this + 19) = v14;
  return v4;
}

void sub_182726490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addSpecializedFunction(uint64_t a1, int *a2)
{
  void **v4;
  int v5;
  MTLMetalScriptSerializer *v6;
  MTLFunctionConstantValuesInternal *v7;
  int v8;
  void *v9;
  flatbuffers::FlatBufferBuilder **v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  void **v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  unint64_t v36;
  _DWORD *v37;
  int v38;
  int v39;
  int v40;
  char *v41;
  unint64_t v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  char *v60;
  int v61;
  void *v62;
  unsigned __int8 *v63;
  int v64;
  void **v65;
  std::string __p;
  std::string *p_p;

  v4 = (void **)(a2 + 2);
  MetalScriptSerializer::makeFunctionString((MetalScriptSerializer *)*a2, *((void **)a2 + 1), &__p);
  v5 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 48), (const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = *(MTLMetalScriptSerializer **)(a1 + 408);
  *(_QWORD *)(a1 + 408) = (char *)v6 + 1;
  MTLMetalScriptSerializer::makeNumberString(v6, (uint64_t)&__p);
  v8 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 48), (const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (flatbuffers::FlatBufferBuilder **)(a2 + 10);
  v9 = (void *)*((_QWORD *)a2 + 5);
  v65 = v4;
  if (v9 && (objc_msgSend(v9, "isEqualToString:", *v4) & 1) == 0)
  {
    v11 = MTLMetalScriptSerializer::addString((MTLMetalScriptSerializer *)(a1 + 48), *v10, (NSString *)&v7->super.super.isa);
    v64 = 1;
  }
  else
  {
    v64 = 0;
    v11 = 0;
  }
  v12 = a2;
  v13 = MTLMetalScriptSerializer::addFunctionConstants((MTLMetalScriptSerializer *)(a1 + 48), *((flatbuffers::FlatBufferBuilder **)a2 + 4), v7);
  *(_BYTE *)(a1 + 118) = 1;
  v14 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 48), 4, v8);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 48), 6, v5);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 48), 8, v11);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 48), 12, v13);
  v15 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 48), v14);
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 184);
  v18 = *(char **)(a1 + 176);
  if ((unint64_t)v18 >= v17)
  {
    v20 = *(char **)(a1 + 168);
    v21 = (v18 - v20) >> 2;
    if ((unint64_t)(v21 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v22 = v17 - (_QWORD)v20;
    v23 = (uint64_t)(v17 - (_QWORD)v20) >> 1;
    if (v23 <= v21 + 1)
      v23 = v21 + 1;
    if (v22 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
    {
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 184, v24);
      v20 = *(char **)(a1 + 168);
      v18 = *(char **)(a1 + 176);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[4 * v21];
    v27 = &v25[4 * v24];
    *(_DWORD *)v26 = v16;
    v19 = v26 + 4;
    while (v18 != v20)
    {
      v28 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v26 - 1) = v28;
      v26 -= 4;
    }
    *(_QWORD *)(a1 + 168) = v26;
    *(_QWORD *)(a1 + 176) = v19;
    *(_QWORD *)(a1 + 184) = v27;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *(_DWORD *)v18 = v15;
    v19 = v18 + 4;
  }
  *(_QWORD *)(a1 + 176) = v19;
  if ((v12[14] & 1) != 0)
  {
    if (v64)
      v29 = (void **)v10;
    else
      v29 = v65;
    MetalScriptSerializer::makeFunctionString(v6, *v29, &__p);
    v30 = MTLMetalScriptSerializer::addString((flatbuffers::FlatBufferBuilder *)(a1 + 48), (const char *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v31 = *((_QWORD *)v12 + 8);
    if (v31 == 6)
    {
      *(_BYTE *)(a1 + 118) = 1;
      v38 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 48), 6, v30);
      v39 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 48), v38);
      v40 = v39;
      v41 = *(char **)(a1 + 296);
      v42 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v41 >= v42)
      {
        v50 = *(char **)(a1 + 288);
        v51 = (v41 - v50) >> 2;
        if ((unint64_t)(v51 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v52 = v42 - (_QWORD)v50;
        v53 = (uint64_t)(v42 - (_QWORD)v50) >> 1;
        if (v53 <= v51 + 1)
          v53 = v51 + 1;
        if (v52 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v53;
        if (v54)
        {
          v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 304, v54);
          v50 = *(char **)(a1 + 288);
          v41 = *(char **)(a1 + 296);
        }
        else
        {
          v55 = 0;
        }
        v59 = &v55[4 * v51];
        v60 = &v55[4 * v54];
        *(_DWORD *)v59 = v40;
        v43 = v59 + 4;
        while (v41 != v50)
        {
          v61 = *((_DWORD *)v41 - 1);
          v41 -= 4;
          *((_DWORD *)v59 - 1) = v61;
          v59 -= 4;
        }
        *(_QWORD *)(a1 + 288) = v59;
        *(_QWORD *)(a1 + 296) = v43;
        *(_QWORD *)(a1 + 304) = v60;
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_DWORD *)v41 = v39;
        v43 = v41 + 4;
      }
      *(_QWORD *)(a1 + 296) = v43;
    }
    else if (v31 == 5)
    {
      *(_BYTE *)(a1 + 118) = 1;
      v32 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)(a1 + 48), 6, v30);
      v33 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(a1 + 48), v32);
      v34 = v33;
      v35 = *(char **)(a1 + 272);
      v36 = *(_QWORD *)(a1 + 280);
      if ((unint64_t)v35 >= v36)
      {
        v44 = *(char **)(a1 + 264);
        v45 = (v35 - v44) >> 2;
        if ((unint64_t)(v45 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v46 = v36 - (_QWORD)v44;
        v47 = (uint64_t)(v36 - (_QWORD)v44) >> 1;
        if (v47 <= v45 + 1)
          v47 = v45 + 1;
        if (v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
        {
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 280, v48);
          v44 = *(char **)(a1 + 264);
          v35 = *(char **)(a1 + 272);
        }
        else
        {
          v49 = 0;
        }
        v56 = &v49[4 * v45];
        v57 = &v49[4 * v48];
        *(_DWORD *)v56 = v34;
        v37 = v56 + 4;
        while (v35 != v44)
        {
          v58 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *((_DWORD *)v56 - 1) = v58;
          v56 -= 4;
        }
        *(_QWORD *)(a1 + 264) = v56;
        *(_QWORD *)(a1 + 272) = v37;
        *(_QWORD *)(a1 + 280) = v57;
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_DWORD *)v35 = v33;
        v37 = v35 + 4;
      }
      *(_QWORD *)(a1 + 272) = v37;
    }
  }
  else if (v64)
  {
    v29 = (void **)v10;
  }
  else
  {
    v29 = v65;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(*((id *)v12 + 6), "cStringUsingEncoding:", 4));
  v62 = *v29;
  p_p = &__p;
  v63 = std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 360, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  *((_QWORD *)v63 + 5) = v6;
  *((_QWORD *)v63 + 6) = v62;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_182726978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addBinaryFunction(uint64_t a1, void **a2)
{
  flatbuffers::FlatBufferBuilder *v4;
  int v5;
  void *v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  int v36;
  std::string __p;

  v4 = (flatbuffers::FlatBufferBuilder *)(a1 + 48);
  MetalScriptSerializer::makeFunctionString((MetalScriptSerializer *)*(int *)a2, a2[1], &__p);
  v5 = MTLMetalScriptSerializer::addString(v4, (const char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = a2[3];
  if (v6 == (void *)6)
  {
    *(_BYTE *)(a1 + 118) = 1;
    v13 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v4, 6, v5);
    v14 = flatbuffers::FlatBufferBuilder::EndTable(v4, v13);
    v15 = v14;
    v16 = *(char **)(a1 + 296);
    v17 = *(_QWORD *)(a1 + 304);
    if ((unint64_t)v16 >= v17)
    {
      v25 = *(char **)(a1 + 288);
      v26 = (v16 - v25) >> 2;
      if ((unint64_t)(v26 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v27 = v17 - (_QWORD)v25;
      v28 = (uint64_t)(v17 - (_QWORD)v25) >> 1;
      if (v28 <= v26 + 1)
        v28 = v26 + 1;
      if (v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v29 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      if (v29)
      {
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 304, v29);
        v25 = *(char **)(a1 + 288);
        v16 = *(char **)(a1 + 296);
      }
      else
      {
        v30 = 0;
      }
      v34 = &v30[4 * v26];
      v35 = &v30[4 * v29];
      *(_DWORD *)v34 = v15;
      v18 = v34 + 4;
      while (v16 != v25)
      {
        v36 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      *(_QWORD *)(a1 + 288) = v34;
      *(_QWORD *)(a1 + 296) = v18;
      *(_QWORD *)(a1 + 304) = v35;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *(_DWORD *)v16 = v14;
      v18 = v16 + 4;
    }
    *(_QWORD *)(a1 + 296) = v18;
  }
  else if (v6 == (void *)5)
  {
    *(_BYTE *)(a1 + 118) = 1;
    v7 = *(_DWORD *)(a1 + 80) - *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 88);
    flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v4, 6, v5);
    v8 = flatbuffers::FlatBufferBuilder::EndTable(v4, v7);
    v9 = v8;
    v10 = *(char **)(a1 + 272);
    v11 = *(_QWORD *)(a1 + 280);
    if ((unint64_t)v10 >= v11)
    {
      v19 = *(char **)(a1 + 264);
      v20 = (v10 - v19) >> 2;
      if ((unint64_t)(v20 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v21 = v11 - (_QWORD)v19;
      v22 = (uint64_t)(v11 - (_QWORD)v19) >> 1;
      if (v22 <= v20 + 1)
        v22 = v20 + 1;
      if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 280, v23);
        v19 = *(char **)(a1 + 264);
        v10 = *(char **)(a1 + 272);
      }
      else
      {
        v24 = 0;
      }
      v31 = &v24[4 * v20];
      v32 = &v24[4 * v23];
      *(_DWORD *)v31 = v9;
      v12 = v31 + 4;
      while (v10 != v19)
      {
        v33 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v31 - 1) = v33;
        v31 -= 4;
      }
      *(_QWORD *)(a1 + 264) = v31;
      *(_QWORD *)(a1 + 272) = v12;
      *(_QWORD *)(a1 + 280) = v32;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v10 = v8;
      v12 = v10 + 4;
    }
    *(_QWORD *)(a1 + 272) = v12;
  }
}

void sub_182726BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addComputePipelineDescriptor(MetalScriptSerializer *this, id *a2)
{
  uint64_t v4;
  MTLComputePipelineDescriptor *v5;
  dispatch_object_t *v6;
  _OWORD *v7;
  __int128 v8;
  NSObject *v9;
  char v10;
  dispatch_object_t *v11;
  uint64_t i;
  NSObject *v13;
  int v14;
  int v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  NSObject *v31;
  dispatch_object_t *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a2[9], "_descriptorPrivate");
  v5 = (MTLComputePipelineDescriptor *)a2[9];
  v6 = (dispatch_object_t *)operator new();
  *(_OWORD *)(v6 + 1) = 0u;
  *(_OWORD *)(v6 + 3) = 0u;
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  *(_OWORD *)(v6 + 9) = 0u;
  *(_OWORD *)(v6 + 11) = 0u;
  *(_OWORD *)(v6 + 13) = 0u;
  *(_OWORD *)(v6 + 15) = 0u;
  *(_OWORD *)(v6 + 17) = 0u;
  *(_OWORD *)(v6 + 19) = 0u;
  *(_OWORD *)(v6 + 21) = 0u;
  *(_OWORD *)(v6 + 23) = 0u;
  *v6 = _MTLCreateComputePipelineScriptFromDescriptor(v5);
  v32 = v6;
  v6[1] = (dispatch_object_t)MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 8));
  v7 = (_OWORD *)objc_msgSend(*(id *)(v4 + 8), "bitCodeHash");
  v8 = v7[1];
  *((_OWORD *)v6 + 2) = *v7;
  *((_OWORD *)v6 + 3) = v8;
  MetalScriptSerializer::createLinkedFunctionsHashesVector(*(MTLLinkedFunctions **)(v4 + 152), (uint64_t)&v30);
  v9 = v6[16];
  if (v9)
  {
    v6[17] = v9;
    operator delete(v9);
    v6[16] = 0;
    v6[17] = 0;
    v6[18] = 0;
  }
  *((_OWORD *)v6 + 8) = v30;
  v6[18] = v31;
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)this + 424, (uint64_t *)&v32, &v32);
  if ((v10 & 1) != 0)
  {
    v33[0] = &off_1E0FE1D48;
    v33[1] = this;
    v34 = v33;
    v14 = MTLMetalScriptSerializer::buildComputePipeline((uint64_t)this + 48, v4, (uint64_t)v33);
    v15 = v14;
    v16 = *((_QWORD *)this + 26);
    v17 = (char *)*((_QWORD *)this + 25);
    if ((unint64_t)v17 >= v16)
    {
      v19 = (char *)*((_QWORD *)this + 24);
      v20 = (v17 - v19) >> 2;
      if ((unint64_t)(v20 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v21 = v16 - (_QWORD)v19;
      v22 = (uint64_t)(v16 - (_QWORD)v19) >> 1;
      if (v22 <= v20 + 1)
        v22 = v20 + 1;
      if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 208, v23);
        v19 = (char *)*((_QWORD *)this + 24);
        v17 = (char *)*((_QWORD *)this + 25);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      v26 = &v24[4 * v23];
      *(_DWORD *)v25 = v15;
      v18 = v25 + 4;
      while (v17 != v19)
      {
        v27 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }
      *((_QWORD *)this + 24) = v25;
      *((_QWORD *)this + 25) = v18;
      *((_QWORD *)this + 26) = v26;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v17 = v14;
      v18 = v17 + 4;
    }
    *((_QWORD *)this + 25) = v18;
    v28 = v34;
    if (v34 == v33)
    {
      v29 = 4;
      v28 = v33;
    }
    else
    {
      if (!v34)
        return;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  else
  {
    dispatch_release(*v32);
    v11 = v32;
    if (v32)
    {
      for (i = 0; i != -9; i -= 3)
      {
        v13 = v11[i + 22];
        if (v13)
        {
          v11[i + 23] = v13;
          operator delete(v13);
        }
      }
      MEMORY[0x186DABFBC](v11, 0x10A0C403A971839);
    }
  }
}

void sub_182726EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addRenderPipelineDescriptor(MetalScriptSerializer *this, id *a2)
{
  uint64_t v4;
  MTLRenderPipelineDescriptor *v5;
  dispatch_object_t *v6;
  void *v7;
  _OWORD *v8;
  __int128 v9;
  NSObject *v10;
  void *v11;
  _OWORD *v12;
  __int128 v13;
  NSObject *v14;
  char v15;
  dispatch_object_t *v16;
  uint64_t i;
  NSObject *v18;
  int v19;
  int v20;
  unint64_t v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  NSObject *v36;
  dispatch_object_t *v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a2[9], "_descriptorPrivate");
  v5 = (MTLRenderPipelineDescriptor *)a2[9];
  v6 = (dispatch_object_t *)operator new();
  *(_OWORD *)(v6 + 1) = 0u;
  *(_OWORD *)(v6 + 3) = 0u;
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  *(_OWORD *)(v6 + 9) = 0u;
  *(_OWORD *)(v6 + 11) = 0u;
  *(_OWORD *)(v6 + 13) = 0u;
  *(_OWORD *)(v6 + 15) = 0u;
  *(_OWORD *)(v6 + 17) = 0u;
  *(_OWORD *)(v6 + 19) = 0u;
  *(_OWORD *)(v6 + 21) = 0u;
  *(_OWORD *)(v6 + 23) = 0u;
  *v6 = _MTLCreateRenderPipelineScriptFromDescriptor(v5);
  v37 = v6;
  v6[1] = (dispatch_object_t)MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 256));
  v6[2] = (dispatch_object_t)MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 264));
  v7 = *(void **)(v4 + 256);
  if (v7)
  {
    v8 = (_OWORD *)objc_msgSend(v7, "bitCodeHash");
    v9 = v8[1];
    *((_OWORD *)v6 + 2) = *v8;
    *((_OWORD *)v6 + 3) = v9;
    MetalScriptSerializer::createLinkedFunctionsHashesVector(*(MTLLinkedFunctions **)(v4 + 488), (uint64_t)&v35);
    v10 = v6[16];
    if (v10)
    {
      v6[17] = v10;
      operator delete(v10);
      v6[16] = 0;
      v6[17] = 0;
      v6[18] = 0;
    }
    *((_OWORD *)v6 + 8) = v35;
    v6[18] = v36;
  }
  v11 = *(void **)(v4 + 264);
  if (v11)
  {
    v12 = (_OWORD *)objc_msgSend(v11, "bitCodeHash");
    v13 = v12[1];
    *((_OWORD *)v6 + 4) = *v12;
    *((_OWORD *)v6 + 5) = v13;
    MetalScriptSerializer::createLinkedFunctionsHashesVector(*(MTLLinkedFunctions **)(v4 + 496), (uint64_t)&v35);
    v14 = v6[19];
    if (v14)
    {
      v6[20] = v14;
      operator delete(v14);
      v6[19] = 0;
      v6[20] = 0;
      v6[21] = 0;
    }
    *(_OWORD *)(v6 + 19) = v35;
    v6[21] = v36;
  }
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)this + 424, (uint64_t *)&v37, &v37);
  if ((v15 & 1) != 0)
  {
    v38[0] = &off_1E0FE1CF0;
    v38[1] = this;
    v39 = v38;
    v19 = MTLMetalScriptSerializer::buildRenderPipeline((MetalScriptSerializer *)((char *)this + 48), v4, (uint64_t)v38);
    v20 = v19;
    v21 = *((_QWORD *)this + 29);
    v22 = (char *)*((_QWORD *)this + 28);
    if ((unint64_t)v22 >= v21)
    {
      v24 = (char *)*((_QWORD *)this + 27);
      v25 = (v22 - v24) >> 2;
      if ((unint64_t)(v25 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v26 = v21 - (_QWORD)v24;
      v27 = (uint64_t)(v21 - (_QWORD)v24) >> 1;
      if (v27 <= v25 + 1)
        v27 = v25 + 1;
      if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 232, v28);
        v24 = (char *)*((_QWORD *)this + 27);
        v22 = (char *)*((_QWORD *)this + 28);
      }
      else
      {
        v29 = 0;
      }
      v30 = &v29[4 * v25];
      v31 = &v29[4 * v28];
      *(_DWORD *)v30 = v20;
      v23 = v30 + 4;
      while (v22 != v24)
      {
        v32 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v30 - 1) = v32;
        v30 -= 4;
      }
      *((_QWORD *)this + 27) = v30;
      *((_QWORD *)this + 28) = v23;
      *((_QWORD *)this + 29) = v31;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_DWORD *)v22 = v19;
      v23 = v22 + 4;
    }
    *((_QWORD *)this + 28) = v23;
    v33 = v39;
    if (v39 == v38)
    {
      v34 = 4;
      v33 = v38;
    }
    else
    {
      if (!v39)
        return;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else
  {
    dispatch_release(*v37);
    v16 = v37;
    if (v37)
    {
      for (i = 0; i != -9; i -= 3)
      {
        v18 = v16[i + 22];
        if (v18)
        {
          v16[i + 23] = v18;
          operator delete(v18);
        }
      }
      MEMORY[0x186DABFBC](v16, 0x10A0C403A971839);
    }
  }
}

void sub_1827271F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t MetalScriptSerializer::nextStitchedLibraryIndex(MetalScriptSerializer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = v1 + 1;
  return v1;
}

void MetalScriptSerializer::addStitchedLibrary(MetalScriptSerializer *this, MTLStitchedLibraryDescriptor *a2, MTLMetalScriptSerializer *a3)
{
  int v5;
  int v6;
  char *v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  MTLMetalScriptSerializer::makeNumberString(a3, (uint64_t)__p);
  v23[0] = &off_1E0FDEFF8;
  v23[1] = this;
  v24 = v23;
  v5 = MTLMetalScriptSerializer::buildStitchingGraphFromDescriptor((uint64_t)this + 48, (uint64_t)__p, a2, (uint64_t)v23);
  v6 = v5;
  v7 = (char *)*((_QWORD *)this + 40);
  v8 = *((_QWORD *)this + 41);
  if ((unint64_t)v7 >= v8)
  {
    v10 = (char *)*((_QWORD *)this + 39);
    v11 = (v7 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v12 = v8 - (_QWORD)v10;
    v13 = (uint64_t)(v8 - (_QWORD)v10) >> 1;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 328, v14);
      v10 = (char *)*((_QWORD *)this + 39);
      v7 = (char *)*((_QWORD *)this + 40);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = v6;
    v9 = v16 + 4;
    while (v7 != v10)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((_QWORD *)this + 39) = v16;
    *((_QWORD *)this + 40) = v9;
    *((_QWORD *)this + 41) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v7 = v5;
    v9 = v7 + 4;
  }
  *((_QWORD *)this + 40) = v9;
  v19 = v24;
  if (v24 == v23)
  {
    v20 = 4;
    v19 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_22;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_22:
  if (v22 < 0)
    operator delete(__p[0]);
}

void sub_1827273D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  MetalScriptSerializer::addStitchedLibrary((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void MetalScriptSerializer::addTileRenderPipelineDescriptor(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  MTLTileRenderPipelineDescriptor *v5;
  dispatch_object_t *v6;
  _OWORD *v7;
  __int128 v8;
  NSObject *v9;
  char v10;
  dispatch_object_t *v11;
  uint64_t i;
  NSObject *v13;
  int v14;
  int v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v30;
  NSObject *v31;
  dispatch_object_t *v32;
  _QWORD v33[3];
  _QWORD *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(*(id *)(a2 + 72), "_descriptorPrivate");
  v5 = *(MTLTileRenderPipelineDescriptor **)(a2 + 72);
  v6 = (dispatch_object_t *)operator new();
  *(_OWORD *)(v6 + 1) = 0u;
  *(_OWORD *)(v6 + 3) = 0u;
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  *(_OWORD *)(v6 + 9) = 0u;
  *(_OWORD *)(v6 + 11) = 0u;
  *(_OWORD *)(v6 + 13) = 0u;
  *(_OWORD *)(v6 + 15) = 0u;
  *(_OWORD *)(v6 + 17) = 0u;
  *(_OWORD *)(v6 + 19) = 0u;
  *(_OWORD *)(v6 + 21) = 0u;
  *(_OWORD *)(v6 + 23) = 0u;
  *v6 = _MTLCreateTileRenderPipelineScriptFromDescriptor(v5);
  v32 = v6;
  v6[1] = (dispatch_object_t)MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 24));
  v7 = (_OWORD *)objc_msgSend(*(id *)(v4 + 24), "bitCodeHash");
  v8 = v7[1];
  *((_OWORD *)v6 + 2) = *v7;
  *((_OWORD *)v6 + 3) = v8;
  MetalScriptSerializer::createLinkedFunctionsHashesVector(*(MTLLinkedFunctions **)(v4 + 96), (uint64_t)&v30);
  v9 = v6[16];
  if (v9)
  {
    v6[17] = v9;
    operator delete(v9);
    v6[16] = 0;
    v6[17] = 0;
    v6[18] = 0;
  }
  *((_OWORD *)v6 + 8) = v30;
  v6[18] = v31;
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)(a1 + 53), (uint64_t *)&v32, &v32);
  if ((v10 & 1) != 0)
  {
    v33[0] = &off_1E0FE1DF8;
    v33[1] = a1;
    v34 = v33;
    v14 = MTLMetalScriptSerializer::buildTileRenderPipeline((uint64_t)(a1 + 6), v4, (uint64_t)v33);
    v15 = v14;
    v16 = (char *)a1[31];
    v17 = a1[32];
    if ((unint64_t)v16 >= v17)
    {
      v19 = (char *)a1[30];
      v20 = (v16 - v19) >> 2;
      if ((unint64_t)(v20 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v21 = v17 - (_QWORD)v19;
      v22 = (uint64_t)(v17 - (_QWORD)v19) >> 1;
      if (v22 <= v20 + 1)
        v22 = v20 + 1;
      if (v21 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v22;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 32), v23);
        v19 = (char *)a1[30];
        v16 = (char *)a1[31];
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      v26 = &v24[4 * v23];
      *(_DWORD *)v25 = v15;
      v18 = v25 + 4;
      while (v16 != v19)
      {
        v27 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }
      a1[30] = v25;
      a1[31] = v18;
      a1[32] = v26;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v16 = v14;
      v18 = v16 + 4;
    }
    a1[31] = v18;
    v28 = v34;
    if (v34 == v33)
    {
      v29 = 4;
      v28 = v33;
    }
    else
    {
      if (!v34)
        return;
      v29 = 5;
    }
    (*(void (**)(void))(*v28 + 8 * v29))();
  }
  else
  {
    dispatch_release(*v32);
    v11 = v32;
    if (v32)
    {
      for (i = 0; i != -9; i -= 3)
      {
        v13 = v11[i + 22];
        if (v13)
        {
          v11[i + 23] = v13;
          operator delete(v13);
        }
      }
      MEMORY[0x186DABFBC](v11, 0x10A0C403A971839);
    }
  }
}

void sub_1827276B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void MetalScriptSerializer::addMeshRenderPipelineDescriptor(MetalScriptSerializer *this, id *a2)
{
  uint64_t v4;
  MTLMeshRenderPipelineDescriptor *v5;
  dispatch_object_t *v6;
  void *v7;
  _OWORD *v8;
  __int128 v9;
  NSObject *v10;
  void *v11;
  _OWORD *v12;
  __int128 v13;
  NSObject *v14;
  void *v15;
  _OWORD *v16;
  __int128 v17;
  NSObject *v18;
  char v19;
  dispatch_object_t *v20;
  uint64_t i;
  NSObject *v22;
  int v23;
  int v24;
  char *v25;
  unint64_t v26;
  _DWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  NSObject *v40;
  dispatch_object_t *v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a2[9], "_descriptorPrivate");
  v5 = (MTLMeshRenderPipelineDescriptor *)a2[9];
  v6 = (dispatch_object_t *)operator new();
  *(_OWORD *)(v6 + 1) = 0u;
  *(_OWORD *)(v6 + 3) = 0u;
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  *(_OWORD *)(v6 + 9) = 0u;
  *(_OWORD *)(v6 + 11) = 0u;
  *(_OWORD *)(v6 + 13) = 0u;
  *(_OWORD *)(v6 + 15) = 0u;
  *(_OWORD *)(v6 + 17) = 0u;
  *(_OWORD *)(v6 + 19) = 0u;
  *(_OWORD *)(v6 + 21) = 0u;
  *(_OWORD *)(v6 + 23) = 0u;
  *v6 = _MTLCreateMeshRenderPipelineScriptFromDescriptor(v5);
  v41 = v6;
  v6[1] = (dispatch_object_t)MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 96));
  v6[3] = (dispatch_object_t)MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 88));
  v6[2] = (dispatch_object_t)MTLMetalScriptSerializer::HashFunction(*(void **)(v4 + 104));
  v7 = *(void **)(v4 + 96);
  if (v7)
  {
    v8 = (_OWORD *)objc_msgSend(v7, "bitCodeHash");
    v9 = v8[1];
    *((_OWORD *)v6 + 2) = *v8;
    *((_OWORD *)v6 + 3) = v9;
    MetalScriptSerializer::createLinkedFunctionsHashesVector(*(MTLLinkedFunctions **)(v4 + 216), (uint64_t)&v39);
    v10 = v6[16];
    if (v10)
    {
      v6[17] = v10;
      operator delete(v10);
      v6[16] = 0;
      v6[17] = 0;
      v6[18] = 0;
    }
    *((_OWORD *)v6 + 8) = v39;
    v6[18] = v40;
  }
  v11 = *(void **)(v4 + 88);
  if (v11)
  {
    v12 = (_OWORD *)objc_msgSend(v11, "bitCodeHash");
    v13 = v12[1];
    *((_OWORD *)v6 + 6) = *v12;
    *((_OWORD *)v6 + 7) = v13;
    MetalScriptSerializer::createLinkedFunctionsHashesVector(*(MTLLinkedFunctions **)(v4 + 208), (uint64_t)&v39);
    v14 = v6[22];
    if (v14)
    {
      v6[23] = v14;
      operator delete(v14);
      v6[22] = 0;
      v6[23] = 0;
      v6[24] = 0;
    }
    *((_OWORD *)v6 + 11) = v39;
    v6[24] = v40;
  }
  v15 = *(void **)(v4 + 104);
  if (v15)
  {
    v16 = (_OWORD *)objc_msgSend(v15, "bitCodeHash");
    v17 = v16[1];
    *((_OWORD *)v6 + 4) = *v16;
    *((_OWORD *)v6 + 5) = v17;
    MetalScriptSerializer::createLinkedFunctionsHashesVector(*(MTLLinkedFunctions **)(v4 + 224), (uint64_t)&v39);
    v18 = v6[19];
    if (v18)
    {
      v6[20] = v18;
      operator delete(v18);
      v6[19] = 0;
      v6[20] = 0;
      v6[21] = 0;
    }
    *(_OWORD *)(v6 + 19) = v39;
    v6[21] = v40;
  }
  std::__hash_table<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,MTLMetalScriptSerializer::PipelineDescriptorHashAndEqual,std::allocator<MTLMetalScriptSerializer::pipelineDescriptorData *>>::__emplace_unique_key_args<MTLMetalScriptSerializer::pipelineDescriptorData *,MTLMetalScriptSerializer::pipelineDescriptorData * const&>((uint64_t)this + 424, (uint64_t *)&v41, &v41);
  if ((v19 & 1) != 0)
  {
    v42[0] = &off_1E0FE1DA0;
    v42[1] = this;
    v43 = v42;
    v23 = MTLMetalScriptSerializer::buildMeshPipeline((MetalScriptSerializer *)((char *)this + 48), v4, (uint64_t)v42);
    v24 = v23;
    v25 = (char *)*((_QWORD *)this + 43);
    v26 = *((_QWORD *)this + 44);
    if ((unint64_t)v25 >= v26)
    {
      v28 = (char *)*((_QWORD *)this + 42);
      v29 = (v25 - v28) >> 2;
      if ((unint64_t)(v29 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v30 = v26 - (_QWORD)v28;
      v31 = (uint64_t)(v26 - (_QWORD)v28) >> 1;
      if (v31 <= v29 + 1)
        v31 = v29 + 1;
      if (v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 352, v32);
        v28 = (char *)*((_QWORD *)this + 42);
        v25 = (char *)*((_QWORD *)this + 43);
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[4 * v29];
      v35 = &v33[4 * v32];
      *(_DWORD *)v34 = v24;
      v27 = v34 + 4;
      while (v25 != v28)
      {
        v36 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *((_DWORD *)v34 - 1) = v36;
        v34 -= 4;
      }
      *((_QWORD *)this + 42) = v34;
      *((_QWORD *)this + 43) = v27;
      *((_QWORD *)this + 44) = v35;
      if (v28)
        operator delete(v28);
    }
    else
    {
      *(_DWORD *)v25 = v23;
      v27 = v25 + 4;
    }
    *((_QWORD *)this + 43) = v27;
    v37 = v43;
    if (v43 == v42)
    {
      v38 = 4;
      v37 = v42;
    }
    else
    {
      if (!v43)
        return;
      v38 = 5;
    }
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else
  {
    dispatch_release(*v41);
    v20 = v41;
    if (v41)
    {
      for (i = 0; i != -9; i -= 3)
      {
        v22 = v20[i + 22];
        if (v22)
        {
          v20[i + 23] = v22;
          operator delete(v22);
        }
      }
      MEMORY[0x186DABFBC](v20, 0x10A0C403A971839);
    }
  }
}

void sub_182727A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a17;
  if (a17 == v17)
  {
    v20 = 4;
    v19 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t MetalScriptSerializer::finalize(MetalScriptSerializer *this)
{
  flatbuffers::FlatBufferBuilder *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t **i;
  uint64_t *v49;
  uint64_t j;
  void *v51;
  uint64_t v53;
  int v54;
  int v55;
  _QWORD v56[5];
  _QWORD v57[5];
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  __n128 (*v61)(__n128 *, __n128 *);
  void (*v62)(uint64_t);
  void *__p[2];
  __int128 v64;
  _BYTE v65[1208];
  void *v66[51];
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  double (*v70)(uint64_t, uint64_t);
  void (*v71)(uint64_t);
  void *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;

  v2 = (MetalScriptSerializer *)((char *)this + 48);
  v3 = *((_QWORD *)this + 19) - *((_QWORD *)this + 18);
  if (v3)
    v4 = (void *)*((_QWORD *)this + 18);
  else
    v4 = &flatbuffers::data<flatbuffers::Offset<Mtl::PathLibrary>,std::allocator<flatbuffers::Offset<Mtl::PathLibrary>>>(std::vector<flatbuffers::Offset<Mtl::PathLibrary>> const&)::t;
  v54 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((MetalScriptSerializer *)((char *)this + 48), (uint64_t)v4, v3 >> 2);
  v5 = *((_QWORD *)this + 40) - *((_QWORD *)this + 39);
  if (v5)
    v6 = (void *)*((_QWORD *)this + 39);
  else
    v6 = &flatbuffers::data<flatbuffers::Offset<Mtl::StitchedLibrary>,std::allocator<flatbuffers::Offset<Mtl::StitchedLibrary>>>(std::vector<flatbuffers::Offset<Mtl::StitchedLibrary>> const&)::t;
  v55 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v6, v5 >> 2);
  v7 = *((_QWORD *)this + 22) - *((_QWORD *)this + 21);
  if (v7)
    v8 = (void *)*((_QWORD *)this + 21);
  else
    v8 = &flatbuffers::data<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>,std::allocator<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>>(std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>> const&)::t;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v8, v7 >> 2);
  v10 = *((_QWORD *)this + 25) - *((_QWORD *)this + 24);
  if (v10)
    v11 = (void *)*((_QWORD *)this + 24);
  else
    v11 = &flatbuffers::data<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::ComputePipelineDescriptor>> const&)::t;
  HIDWORD(v53) = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v11, v10 >> 2);
  v12 = *((_QWORD *)this + 28) - *((_QWORD *)this + 27);
  if (v12)
    v13 = (void *)*((_QWORD *)this + 27);
  else
    v13 = &flatbuffers::data<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::RenderPipelineDescriptor>> const&)::t;
  v14 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v13, v12 >> 2);
  v15 = *((_QWORD *)this + 43) - *((_QWORD *)this + 42);
  if (v15)
    v16 = (void *)*((_QWORD *)this + 42);
  else
    v16 = &flatbuffers::data<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::MeshRenderPipelineDescriptor>> const&)::t;
  v17 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v16, v15 >> 2);
  v18 = *((_QWORD *)this + 31) - *((_QWORD *)this + 30);
  if (v18)
    v19 = (void *)*((_QWORD *)this + 30);
  else
    v19 = &flatbuffers::data<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>,std::allocator<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::TileRenderPipelineDescriptor>> const&)::t;
  v20 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v19, v18 >> 2);
  v21 = *((_QWORD *)this + 34) - *((_QWORD *)this + 33);
  if (v21)
    v22 = (void *)*((_QWORD *)this + 33);
  else
    v22 = &flatbuffers::data<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::VisibleFunctionDescriptor>> const&)::t;
  LODWORD(v53) = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v22, v21 >> 2);
  v23 = *((_QWORD *)this + 37) - *((_QWORD *)this + 36);
  if (v23)
    v24 = (void *)*((_QWORD *)this + 36);
  else
    v24 = &flatbuffers::data<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>,std::allocator<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>>>(std::vector<flatbuffers::Offset<Mtl::IntersectionFunctionDescriptor>> const&)::t;
  v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(v2, (uint64_t)v24, v23 >> 2);
  v26 = *((_DWORD *)this + 20);
  *((_BYTE *)this + 118) = 1;
  v27 = v26 - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 4, v54);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 6, v9);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 8, v55);
  v28 = flatbuffers::FlatBufferBuilder::EndTable(v2, v27);
  *((_BYTE *)this + 118) = 1;
  v29 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 4, SHIDWORD(v53));
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 6, v14);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 10, v17);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 8, v20);
  v30 = flatbuffers::FlatBufferBuilder::EndTable(v2, v29);
  *((_BYTE *)this + 118) = 1;
  v31 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 6, v53);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 4, v25);
  v32 = flatbuffers::FlatBufferBuilder::EndTable(v2, v31);
  v79 = 0x300000000;
  v80 = 0;
  *((_BYTE *)this + 118) = 1;
  v33 = *((_DWORD *)this + 20) - *((_DWORD *)this + 24) + *((_DWORD *)this + 22);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)v2, 4, &v79);
  v34 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v2, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)v2, 6, v34);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 12, v28);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 14, v30);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v2, 16, v32);
  v35 = flatbuffers::FlatBufferBuilder::EndTable(v2, v33);
  flatbuffers::FlatBufferBuilder::Finish(v2, v35, "MTLP", 0);
  v67 = 0;
  v68 = &v67;
  v69 = 0x6012000000;
  v70 = __Block_byref_object_copy__2;
  v71 = __Block_byref_object_dispose__2;
  v36 = *((_QWORD *)this + 6);
  v37 = *((unsigned __int8 *)this + 56);
  v39 = *((_QWORD *)this + 10);
  v38 = *((_QWORD *)this + 11);
  v40 = *((_QWORD *)this + 12);
  v72 = &unk_182827312;
  v73 = v36;
  v74 = v37;
  v75 = v38;
  v76 = v39;
  v77 = v40;
  v78 = (v39 + v38 - v40);
  if (v37)
  {
    *((_QWORD *)this + 6) = 0;
    *((_BYTE *)this + 56) = 0;
  }
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  if (*((_BYTE *)this + 8) && MEMORY[0x1E0DE6B28])
  {
    flatbuffers::IDLOptions::IDLOptions((flatbuffers::IDLOptions *)v66);
    BYTE1(v66[0]) = 1;
    v66[49] = (void *)256;
    flatbuffers::Parser::Parser((flatbuffers::Parser *)v65, (const flatbuffers::IDLOptions *)v66);
    flatbuffers::Parser::Deserialize((flatbuffers::Parser *)v65, Mtl::PipelinesScriptBinarySchema::data(void)::bfbsData);
    v58 = 0;
    v59 = &v58;
    v60 = 0x4812000000;
    v61 = __Block_byref_object_copy__6;
    v62 = __Block_byref_object_dispose__7;
    *(_OWORD *)__p = 0u;
    v64 = 0u;
    flatbuffers::GenerateText();
    v41 = objc_alloc(MEMORY[0x1E0C99D50]);
    if (*((char *)v59 + 71) < 0)
    {
      v42 = (_QWORD *)v59[6];
      v43 = v59[7];
    }
    else
    {
      v42 = v59 + 6;
      v43 = *((unsigned __int8 *)v59 + 71);
    }
    v57[0] = MEMORY[0x1E0C809B0];
    v57[1] = 3221225472;
    v57[2] = ___ZN21MetalScriptSerializer8finalizeEv_block_invoke;
    v57[3] = &unk_1E0FE3220;
    v57[4] = &v58;
    v47 = objc_msgSend(v41, "initWithBytesNoCopy:length:deallocator:", v42, v43, v57, v53);
    _Block_object_dispose(&v58, 8);
    if (SHIBYTE(v64) < 0)
      operator delete(__p[1]);
    flatbuffers::Parser::~Parser((flatbuffers::Parser *)v65);
    flatbuffers::IDLOptions::~IDLOptions(v66);
  }
  else
  {
    v44 = objc_alloc(MEMORY[0x1E0C99D50]);
    v45 = v68[10];
    v46 = v68[11];
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3221225472;
    v56[2] = ___ZN21MetalScriptSerializer8finalizeEv_block_invoke_2;
    v56[3] = &unk_1E0FE3248;
    v56[4] = &v67;
    v47 = objc_msgSend(v44, "initWithBytesNoCopy:length:deallocator:", v45, v46, v56);
  }
  for (i = (uint64_t **)*((_QWORD *)this + 55); i; i = (uint64_t **)*i)
  {
    dispatch_release((dispatch_object_t)*i[2]);
    v49 = i[2];
    if (v49)
    {
      for (j = 0; j != -9; j -= 3)
      {
        v51 = (void *)v49[j + 22];
        if (v51)
        {
          v49[j + 23] = (uint64_t)v51;
          operator delete(v51);
        }
      }
      MEMORY[0x186DABFBC](v49, 0x10A0C403A971839);
    }
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear((_QWORD *)this + 53);
  _Block_object_dispose(&v67, 8);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v73);
  return v47;
}

void sub_18272804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  flatbuffers::DetachedBuffer *v30;
  uint64_t v31;

  flatbuffers::Parser::~Parser((flatbuffers::Parser *)&a30);
  flatbuffers::IDLOptions::~IDLOptions((void **)&STACK[0x560]);
  _Block_object_dispose((const void *)(v31 - 200), 8);
  flatbuffers::DetachedBuffer::~DetachedBuffer(v30);
  _Unwind_Resume(a1);
}

void MetalScriptSerializer::~MetalScriptSerializer(MetalScriptSerializer *this)
{
  MetalScriptSerializer::~MetalScriptSerializer(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  MetalScriptSerializer *v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E0FE08D0;
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 424);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)this + 360);
  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 39);
  if (v3)
  {
    *((_QWORD *)this + 40) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 36);
  if (v4)
  {
    *((_QWORD *)this + 37) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 33);
  if (v5)
  {
    *((_QWORD *)this + 34) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 30);
  if (v6)
  {
    *((_QWORD *)this + 31) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 27);
  if (v7)
  {
    *((_QWORD *)this + 28) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 24);
  if (v8)
  {
    *((_QWORD *)this + 25) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 22) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 18);
  if (v10)
  {
    *((_QWORD *)this + 19) = v10;
    operator delete(v10);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((MetalScriptSerializer *)((char *)this + 48));
  v11 = (MetalScriptSerializer *)*((_QWORD *)this + 5);
  if (v11 == (MetalScriptSerializer *)((char *)this + 16))
  {
    v12 = 4;
    v11 = (MetalScriptSerializer *)((char *)this + 16);
  }
  else
  {
    if (!v11)
      return;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
}

void MetalScriptSerializer::makeFunctionString(MetalScriptSerializer *this@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  std::string v14;

  if (a2 && !objc_msgSend(a2, "isEqualToString:", &stru_1E0FE5DC8))
  {
    MTLMetalScriptSerializer::makeNumberString(this, (uint64_t)&v12);
    v7 = std::string::insert(&v12, 0, "alias:");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v13, "#");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v14, (const std::string::value_type *)objc_msgSend(a2, "cStringUsingEncoding:", 4));
    *a3 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_1827281F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1827284B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<unsigned long,NSString *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_182728560(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *a1@<X1>, uint64_t a2@<X8>)
{
  NSArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _OWORD *v8;
  _OWORD *v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  NSArray *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  _OWORD *v29;
  _OWORD *v30;
  unint64_t v31;
  _OWORD *v32;
  __int128 v33;
  _OWORD *v34;
  _OWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  _BYTE v59[128];
  _BYTE v60[128];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v4 = -[MTLLinkedFunctions functions](a1, "functions");
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v54, v60, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v55 != v6)
          objc_enumerationMutation(v4);
        v8 = (_OWORD *)objc_msgSend(*(id *)(*((_QWORD *)&v54 + 1) + 8 * i), "bitCodeHash");
        v9 = v8;
        v11 = *(_OWORD **)(a2 + 8);
        v10 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v11 >= v10)
        {
          v14 = *(_OWORD **)a2;
          v15 = ((uint64_t)v11 - *(_QWORD *)a2) >> 5;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 59)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v17 = v10 - (_QWORD)v14;
          if (v17 >> 4 > v16)
            v16 = v17 >> 4;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
            v18 = 0x7FFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a2 + 16, v18);
            v14 = *(_OWORD **)a2;
            v11 = *(_OWORD **)(a2 + 8);
          }
          else
          {
            v19 = 0;
          }
          v20 = v9[1];
          v21 = &v19[32 * v15];
          *(_OWORD *)v21 = *v9;
          *((_OWORD *)v21 + 1) = v20;
          if (v11 == v14)
          {
            v24 = &v19[32 * v15];
          }
          else
          {
            v22 = &v19[32 * v15];
            do
            {
              v23 = *(v11 - 1);
              v24 = v22 - 32;
              *((_OWORD *)v22 - 2) = *(v11 - 2);
              *((_OWORD *)v22 - 1) = v23;
              v11 -= 2;
              v22 -= 32;
            }
            while (v11 != v14);
          }
          v13 = v21 + 32;
          *(_QWORD *)a2 = v24;
          *(_QWORD *)(a2 + 8) = v21 + 32;
          *(_QWORD *)(a2 + 16) = &v19[32 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          v12 = v8[1];
          *v11 = *v8;
          v11[1] = v12;
          v13 = v11 + 2;
        }
        *(_QWORD *)(a2 + 8) = v13;
      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v54, v60, 16);
    }
    while (v5);
  }
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v25 = -[MTLLinkedFunctions privateFunctions](a1, "privateFunctions");
  v26 = -[NSArray countByEnumeratingWithState:objects:count:](v25, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
  if (v26)
  {
    v27 = *(_QWORD *)v51;
    do
    {
      for (j = 0; j != v26; ++j)
      {
        if (*(_QWORD *)v51 != v27)
          objc_enumerationMutation(v25);
        v29 = (_OWORD *)objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * j), "bitCodeHash");
        v30 = v29;
        v32 = *(_OWORD **)(a2 + 8);
        v31 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v32 >= v31)
        {
          v35 = *(_OWORD **)a2;
          v36 = ((uint64_t)v32 - *(_QWORD *)a2) >> 5;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 59)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v38 = v31 - (_QWORD)v35;
          if (v38 >> 4 > v37)
            v37 = v38 >> 4;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0)
            v39 = 0x7FFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(a2 + 16, v39);
            v35 = *(_OWORD **)a2;
            v32 = *(_OWORD **)(a2 + 8);
          }
          else
          {
            v40 = 0;
          }
          v41 = v30[1];
          v42 = &v40[32 * v36];
          *(_OWORD *)v42 = *v30;
          *((_OWORD *)v42 + 1) = v41;
          if (v32 == v35)
          {
            v45 = &v40[32 * v36];
          }
          else
          {
            v43 = &v40[32 * v36];
            do
            {
              v44 = *(v32 - 1);
              v45 = v43 - 32;
              *((_OWORD *)v43 - 2) = *(v32 - 2);
              *((_OWORD *)v43 - 1) = v44;
              v32 -= 2;
              v43 -= 32;
            }
            while (v32 != v35);
          }
          v34 = v42 + 32;
          *(_QWORD *)a2 = v45;
          *(_QWORD *)(a2 + 8) = v42 + 32;
          *(_QWORD *)(a2 + 16) = &v40[32 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          v33 = v29[1];
          *v32 = *v29;
          v32[1] = v33;
          v34 = v32 + 2;
        }
        *(_QWORD *)(a2 + 8) = v34;
      }
      v26 = -[NSArray countByEnumeratingWithState:objects:count:](v25, "countByEnumeratingWithState:objects:count:", &v50, v59, 16);
    }
    while (v26);
  }
  v46 = *(unint64_t **)(a2 + 8);
  v47 = 126 - 2 * __clz(((uint64_t)v46 - *(_QWORD *)a2) >> 5);
  if (v46 == *(unint64_t **)a2)
    v48 = 0;
  else
    v48 = v47;
  std::__introsort<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*,false>(*(unint64_t **)a2, v46, (uint64_t)&v58, v48, 1);
}

void sub_1827288F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t *v20;
  char v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  __int128 v16;
  __int128 v17;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = bswap64(v4[4]);
        v7 = bswap64(*v4);
        if (v6 != v7
          || (v6 = bswap64(v5[1]), v7 = bswap64(v4[1]), v6 != v7)
          || (v6 = bswap64(v5[2]), v7 = bswap64(v4[2]), v6 != v7)
          || (v6 = bswap64(v5[3]), v7 = bswap64(v4[3]), v6 != v7))
        {
          v8 = v6 < v7 ? -1 : 1;
          if (v8 < 0)
          {
            v16 = *(_OWORD *)v5;
            v17 = *((_OWORD *)v5 + 1);
            v9 = v3;
            while (1)
            {
              v10 = (char *)result + v9;
              v11 = *(_OWORD *)((char *)result + v9 + 16);
              *((_OWORD *)v10 + 2) = *(_OWORD *)((char *)result + v9);
              *((_OWORD *)v10 + 3) = v11;
              if (!v9)
                break;
              v12 = bswap64(v16);
              v13 = bswap64(*((_QWORD *)v10 - 4));
              if (v12 == v13
                && (v12 = bswap64(*((unint64_t *)&v16 + 1)), v13 = bswap64(*((_QWORD *)v10 - 3)), v12 == v13)
                && (v12 = bswap64(v17), v13 = bswap64(*((_QWORD *)v10 - 2)), v12 == v13)
                && (v12 = bswap64(*((unint64_t *)&v17 + 1)), v13 = bswap64(*((_QWORD *)v10 - 1)), v12 == v13))
              {
                v14 = 0;
              }
              else if (v12 < v13)
              {
                v14 = -1;
              }
              else
              {
                v14 = 1;
              }
              v9 -= 32;
              if ((v14 & 0x80000000) == 0)
              {
                v15 = (unint64_t *)((char *)result + v9 + 32);
                goto LABEL_25;
              }
            }
            v15 = result;
LABEL_25:
            *(_OWORD *)v15 = v16;
            *((_OWORD *)v15 + 1) = v17;
          }
        }
        v2 = v5 + 4;
        v3 += 32;
        v4 = v5;
      }
      while (v5 + 4 != a2);
    }
  }
  return result;
}

unint64_t *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;

  if (result != a2)
  {
    v2 = result + 4;
    if (result + 4 != a2)
    {
      v3 = result - 4;
      do
      {
        v4 = v2;
        v5 = bswap64(*v2);
        v6 = bswap64(*result);
        if (v5 != v6
          || (v5 = bswap64(v4[1]), v6 = bswap64(result[1]), v5 != v6)
          || (v5 = bswap64(v4[2]), v6 = bswap64(result[2]), v5 != v6)
          || (v5 = bswap64(v4[3]), v6 = bswap64(result[3]), v5 != v6))
        {
          v7 = v5 < v6 ? -1 : 1;
          if (v7 < 0)
          {
            v13 = *(_OWORD *)v4;
            v14 = *((_OWORD *)v4 + 1);
            v8 = v3;
            do
            {
              v9 = *((_OWORD *)v8 + 3);
              *((_OWORD *)v8 + 4) = *((_OWORD *)v8 + 2);
              *((_OWORD *)v8 + 5) = v9;
              v10 = bswap64(v13);
              v11 = bswap64(*v8);
              if (v10 == v11
                && (v10 = bswap64(*((unint64_t *)&v13 + 1)), v11 = bswap64(v8[1]), v10 == v11)
                && (v10 = bswap64(v14), v11 = bswap64(v8[2]), v10 == v11)
                && (v10 = bswap64(*((unint64_t *)&v14 + 1)), v11 = bswap64(v8[3]), v10 == v11))
              {
                v12 = 0;
              }
              else if (v10 < v11)
              {
                v12 = -1;
              }
              else
              {
                v12 = 1;
              }
              v8 -= 4;
            }
            while (v12 < 0);
            *((_OWORD *)v8 + 4) = v13;
            *((_OWORD *)v8 + 5) = v14;
          }
        }
        v2 = v4 + 4;
        v3 += 4;
        result = v4;
      }
      while (v4 + 4 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v3 = bswap64(*a2);
  v4 = bswap64(*a1);
  if (v3 == v4
    && (v3 = bswap64(a2[1]), v4 = bswap64(a1[1]), v3 == v4)
    && (v3 = bswap64(a2[2]), v4 = bswap64(a1[2]), v3 == v4)
    && (v3 = bswap64(a2[3]), v4 = bswap64(a1[3]), v3 == v4))
  {
    v5 = 0;
  }
  else if (v3 < v4)
  {
    v5 = -1;
  }
  else
  {
    v5 = 1;
  }
  v6 = bswap64(*a3);
  v7 = bswap64(*a2);
  if (v6 == v7
    && (v6 = bswap64(a3[1]), v7 = bswap64(a2[1]), v6 == v7)
    && (v6 = bswap64(a3[2]), v7 = bswap64(a2[2]), v6 == v7)
    && (v6 = bswap64(a3[3]), v7 = bswap64(a2[3]), v6 == v7))
  {
    v8 = 0;
    if (v5 < 0)
      goto LABEL_14;
  }
  else
  {
    if (v6 < v7)
      v8 = -1;
    else
      v8 = 1;
    if (v5 < 0)
    {
LABEL_14:
      if (v8 < 0)
      {
        v29 = *(_OWORD *)a1;
        v28 = *((_OWORD *)a1 + 1);
        v30 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *((_OWORD *)a1 + 1) = v30;
        *(_OWORD *)a3 = v29;
        *((_OWORD *)a3 + 1) = v28;
      }
      else
      {
        v10 = *(_OWORD *)a1;
        v9 = *((_OWORD *)a1 + 1);
        v11 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v11;
        *(_OWORD *)a2 = v10;
        *((_OWORD *)a2 + 1) = v9;
        v12 = bswap64(*a3);
        v13 = bswap64(*a2);
        if (v12 == v13
          && (v12 = bswap64(a3[1]), v13 = bswap64(a2[1]), v12 == v13)
          && (v12 = bswap64(a3[2]), v13 = bswap64(a2[2]), v12 == v13)
          && (v12 = bswap64(a3[3]), v13 = bswap64(a2[3]), v12 == v13))
        {
          v14 = 0;
        }
        else if (v12 < v13)
        {
          v14 = -1;
        }
        else
        {
          v14 = 1;
        }
        if (v14 < 0)
        {
          v23 = *(_OWORD *)a2;
          v22 = *((_OWORD *)a2 + 1);
          v24 = *((_OWORD *)a3 + 1);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *((_OWORD *)a2 + 1) = v24;
          *(_OWORD *)a3 = v23;
          *((_OWORD *)a3 + 1) = v22;
          return 2;
        }
      }
      return 1;
    }
  }
  if ((v8 & 0x80000000) == 0)
    return 0;
  v17 = *(_OWORD *)a2;
  v16 = *((_OWORD *)a2 + 1);
  v18 = *((_OWORD *)a3 + 1);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *((_OWORD *)a2 + 1) = v18;
  *(_OWORD *)a3 = v17;
  *((_OWORD *)a3 + 1) = v16;
  v19 = bswap64(*a2);
  v20 = bswap64(*a1);
  if (v19 == v20
    && (v19 = bswap64(a2[1]), v20 = bswap64(a1[1]), v19 == v20)
    && (v19 = bswap64(a2[2]), v20 = bswap64(a1[2]), v19 == v20)
    && (v19 = bswap64(a2[3]), v20 = bswap64(a1[3]), v19 == v20))
  {
    v21 = 0;
  }
  else if (v19 < v20)
  {
    v21 = -1;
  }
  else
  {
    v21 = 1;
  }
  if (v21 < 0)
  {
    v26 = *(_OWORD *)a1;
    v25 = *((_OWORD *)a1 + 1);
    v27 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v27;
    *(_OWORD *)a2 = v26;
    *((_OWORD *)a2 + 1) = v25;
    return 2;
  }
  return 1;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &>(unint64_t *a1, _OWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  _OWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t *v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v34 = *(_OWORD *)a1;
  v35 = *((_OWORD *)a1 + 1);
  v2 = bswap64(*a1);
  v3 = bswap64(*((_QWORD *)a2 - 4));
  if (v2 == v3
    && (v2 = bswap64(*((unint64_t *)&v34 + 1)), v3 = bswap64(*((_QWORD *)a2 - 3)), v2 == v3)
    && (v2 = bswap64(v35), v3 = bswap64(*((_QWORD *)a2 - 2)), v2 == v3)
    && (v2 = bswap64(*((unint64_t *)&v35 + 1)), v3 = bswap64(*((_QWORD *)a2 - 1)), v2 == v3)
    || (v2 < v3 ? (v10 = -1) : (v10 = 1), (v10 & 0x80000000) == 0))
  {
    v11 = a1 + 4;
    do
    {
      v5 = v11;
      if (v11 >= (unint64_t *)a2)
        break;
      v12 = bswap64(v34);
      v13 = bswap64(*v5);
      if (v12 != v13)
        goto LABEL_28;
      v12 = bswap64(*((unint64_t *)&v34 + 1));
      v13 = bswap64(v5[1]);
      if (v12 == v13
        && (v12 = bswap64(v35), v13 = bswap64(v5[2]), v12 == v13)
        && (v12 = bswap64(*((unint64_t *)&v35 + 1)), v13 = bswap64(v5[3]), v12 == v13))
      {
        v14 = 0;
      }
      else
      {
LABEL_28:
        v14 = v12 < v13 ? -1 : 1;
      }
      v11 = v5 + 4;
    }
    while ((v14 & 0x80000000) == 0);
  }
  else
  {
    v4 = a1;
    v5 = a1;
    do
    {
      v6 = v5[4];
      v5 += 4;
      v7 = bswap64(v34);
      v8 = bswap64(v6);
      if (v7 == v8
        && (v7 = bswap64(*((unint64_t *)&v34 + 1)), v8 = bswap64(v4[5]), v7 == v8)
        && (v7 = bswap64(v35), v8 = bswap64(v4[6]), v7 == v8)
        && (v7 = bswap64(*((unint64_t *)&v35 + 1)), v8 = bswap64(v4[7]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      v4 = v5;
    }
    while ((v9 & 0x80000000) == 0);
  }
  if (v5 >= (unint64_t *)a2)
  {
    v15 = a2;
  }
  else
  {
    v15 = a2;
    do
    {
      v16 = *((_QWORD *)v15 - 4);
      v15 -= 2;
      v17 = bswap64(v34);
      v18 = bswap64(v16);
      if (v17 == v18
        && (v17 = bswap64(*((unint64_t *)&v34 + 1)), v18 = bswap64(*((_QWORD *)a2 - 3)), v17 == v18)
        && (v17 = bswap64(v35), v18 = bswap64(*((_QWORD *)a2 - 2)), v17 == v18)
        && (v17 = bswap64(*((unint64_t *)&v35 + 1)), v18 = bswap64(*((_QWORD *)a2 - 1)), v17 == v18))
      {
        v19 = 0;
      }
      else if (v17 < v18)
      {
        v19 = -1;
      }
      else
      {
        v19 = 1;
      }
      a2 = v15;
    }
    while (v19 < 0);
  }
  while (v5 < (unint64_t *)v15)
  {
    v36 = *(_OWORD *)v5;
    v37 = *((_OWORD *)v5 + 1);
    v20 = v15[1];
    *(_OWORD *)v5 = *v15;
    *((_OWORD *)v5 + 1) = v20;
    *v15 = v36;
    v15[1] = v37;
    v21 = v5;
    do
    {
      v22 = v5[4];
      v5 += 4;
      v23 = bswap64(v34);
      v24 = bswap64(v22);
      if (v23 == v24
        && (v23 = bswap64(*((unint64_t *)&v34 + 1)), v24 = bswap64(v21[5]), v23 == v24)
        && (v23 = bswap64(v35), v24 = bswap64(v21[6]), v23 == v24)
        && (v23 = bswap64(*((unint64_t *)&v35 + 1)), v24 = bswap64(v21[7]), v23 == v24))
      {
        v25 = 0;
      }
      else if (v23 < v24)
      {
        v25 = -1;
      }
      else
      {
        v25 = 1;
      }
      v21 = v5;
    }
    while ((v25 & 0x80000000) == 0);
    v26 = v15;
    do
    {
      v27 = *((_QWORD *)v15 - 4);
      v15 -= 2;
      v28 = bswap64(v34);
      v29 = bswap64(v27);
      if (v28 == v29
        && (v28 = bswap64(*((unint64_t *)&v34 + 1)), v29 = bswap64(*((_QWORD *)v26 - 3)), v28 == v29)
        && (v28 = bswap64(v35), v29 = bswap64(*((_QWORD *)v26 - 2)), v28 == v29)
        && (v28 = bswap64(*((unint64_t *)&v35 + 1)), v29 = bswap64(*((_QWORD *)v26 - 1)), v28 == v29))
      {
        v30 = 0;
      }
      else if (v28 < v29)
      {
        v30 = -1;
      }
      else
      {
        v30 = 1;
      }
      v26 = v15;
    }
    while (v30 < 0);
  }
  v31 = v5 - 4;
  if (v5 - 4 != a1)
  {
    v32 = *((_OWORD *)v5 - 1);
    *(_OWORD *)a1 = *(_OWORD *)v31;
    *((_OWORD *)a1 + 1) = v32;
  }
  *(_OWORD *)v31 = v34;
  *((_OWORD *)v5 - 1) = v35;
  return v5;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MTLUINT256_t *,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  __int128 *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  __int128 v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v2 = 0;
  v33 = *a1;
  v34 = a1[1];
  do
  {
    v3 = (unint64_t *)&a1[v2];
    v4 = bswap64(*(_QWORD *)&a1[v2 + 2]);
    v5 = bswap64(v33);
    if (v4 == v5
      && (v4 = bswap64(v3[5]), v5 = bswap64(*((unint64_t *)&v33 + 1)), v4 == v5)
      && (v4 = bswap64(v3[6]), v5 = bswap64(v34), v4 == v5)
      && (v4 = bswap64(v3[7]), v5 = bswap64(*((unint64_t *)&v34 + 1)), v4 == v5))
    {
      v6 = 0;
    }
    else if (v4 < v5)
    {
      v6 = -1;
    }
    else
    {
      v6 = 1;
    }
    v2 += 2;
  }
  while (v6 < 0);
  v7 = &a1[v2];
  v8 = &a1[v2 - 2];
  if (v2 == 2)
  {
    while (v7 < a2)
    {
      v9 = a2 - 2;
      v14 = bswap64(*((_QWORD *)a2 - 4));
      v15 = bswap64(v33);
      if (v14 == v15
        && (v14 = bswap64(*((_QWORD *)a2 - 3)), v15 = bswap64(*((unint64_t *)&v33 + 1)), v14 == v15)
        && (v14 = bswap64(*((_QWORD *)a2 - 2)), v15 = bswap64(v34), v14 == v15)
        && (v14 = bswap64(*((_QWORD *)a2 - 1)), v15 = bswap64(*((unint64_t *)&v34 + 1)), v14 == v15))
      {
        v16 = 0;
      }
      else if (v14 < v15)
      {
        v16 = -1;
      }
      else
      {
        v16 = 1;
      }
      a2 -= 2;
      if (v16 < 0)
        goto LABEL_34;
    }
    v9 = a2;
  }
  else
  {
    v9 = a2;
    do
    {
      v10 = *((_QWORD *)v9 - 4);
      v9 -= 2;
      v11 = bswap64(v10);
      v12 = bswap64(v33);
      if (v11 == v12
        && (v11 = bswap64(*((_QWORD *)a2 - 3)), v12 = bswap64(*((unint64_t *)&v33 + 1)), v11 == v12)
        && (v11 = bswap64(*((_QWORD *)a2 - 2)), v12 = bswap64(v34), v11 == v12)
        && (v11 = bswap64(*((_QWORD *)a2 - 1)), v12 = bswap64(*((unint64_t *)&v34 + 1)), v11 == v12))
      {
        v13 = 0;
      }
      else if (v11 < v12)
      {
        v13 = -1;
      }
      else
      {
        v13 = 1;
      }
      a2 = v9;
    }
    while ((v13 & 0x80000000) == 0);
  }
LABEL_34:
  if (v7 < v9)
  {
    v17 = (unint64_t)v7;
    v18 = v9;
    do
    {
      v19 = *(_OWORD *)v17;
      v35 = *(_OWORD *)(v17 + 16);
      v20 = v18[1];
      *(_OWORD *)v17 = *v18;
      *(_OWORD *)(v17 + 16) = v20;
      *v18 = v19;
      v18[1] = v35;
      v21 = (unint64_t *)v17;
      do
      {
        v22 = *(_QWORD *)(v17 + 32);
        v17 += 32;
        v23 = bswap64(v22);
        v24 = bswap64(v33);
        if (v23 == v24
          && (v23 = bswap64(v21[5]), v24 = bswap64(*((unint64_t *)&v33 + 1)), v23 == v24)
          && (v23 = bswap64(v21[6]), v24 = bswap64(v34), v23 == v24)
          && (v23 = bswap64(v21[7]), v24 = bswap64(*((unint64_t *)&v34 + 1)), v23 == v24))
        {
          v25 = 0;
        }
        else if (v23 < v24)
        {
          v25 = -1;
        }
        else
        {
          v25 = 1;
        }
        v21 = (unint64_t *)v17;
      }
      while (v25 < 0);
      v26 = v18;
      do
      {
        v27 = *((_QWORD *)v18 - 4);
        v18 -= 2;
        v28 = bswap64(v27);
        v29 = bswap64(v33);
        if (v28 == v29
          && (v28 = bswap64(*((_QWORD *)v26 - 3)), v29 = bswap64(*((unint64_t *)&v33 + 1)), v28 == v29)
          && (v28 = bswap64(*((_QWORD *)v26 - 2)), v29 = bswap64(v34), v28 == v29)
          && (v28 = bswap64(*((_QWORD *)v26 - 1)), v29 = bswap64(*((unint64_t *)&v34 + 1)), v28 == v29))
        {
          v30 = 0;
        }
        else if (v28 < v29)
        {
          v30 = -1;
        }
        else
        {
          v30 = 1;
        }
        v26 = v18;
      }
      while ((v30 & 0x80000000) == 0);
    }
    while (v17 < (unint64_t)v18);
    v8 = (__int128 *)(v17 - 32);
  }
  if (v8 != a1)
  {
    v31 = v8[1];
    *a1 = *v8;
    a1[1] = v31;
  }
  *v8 = v33;
  v8[1] = v34;
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v25 = *(_OWORD *)a1;
        v24 = *((_OWORD *)a1 + 1);
        v26 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v26;
        *(_OWORD *)v6 = v25;
        *((_OWORD *)a2 - 1) = v24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v27 = *(_OWORD *)v11;
        v28 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v27);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v27 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v28), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v28 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v27;
        *((_OWORD *)v23 + 1) = v28;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a2, a3);
  v9 = bswap64(*a4);
  v10 = bswap64(*a3);
  if (v9 != v10
    || (v9 = bswap64(a4[1]), v10 = bswap64(a3[1]), v9 != v10)
    || (v9 = bswap64(a4[2]), v10 = bswap64(a3[2]), v9 != v10)
    || (v9 = bswap64(a4[3]), v10 = bswap64(a3[3]), v9 != v10))
  {
    v11 = v9 < v10 ? -1 : 1;
    if (v11 < 0)
    {
      v12 = *(_OWORD *)a3;
      result = *((__n128 *)a3 + 1);
      v13 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v13;
      *(_OWORD *)a4 = v12;
      *((__n128 *)a4 + 1) = result;
      v14 = bswap64(*a3);
      v15 = bswap64(*a2);
      if (v14 != v15)
        goto LABEL_14;
      v14 = bswap64(a3[1]);
      v15 = bswap64(a2[1]);
      if (v14 == v15
        && (v14 = bswap64(a3[2]), v15 = bswap64(a2[2]), v14 == v15)
        && (v14 = bswap64(a3[3]), v15 = bswap64(a2[3]), v14 == v15))
      {
        v16 = 0;
      }
      else
      {
LABEL_14:
        v16 = v14 < v15 ? -1 : 1;
      }
      if (v16 < 0)
      {
        v17 = *(_OWORD *)a2;
        result = *((__n128 *)a2 + 1);
        v18 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v18;
        *(_OWORD *)a3 = v17;
        *((__n128 *)a3 + 1) = result;
        v19 = bswap64(*a2);
        v20 = bswap64(*a1);
        if (v19 == v20
          && (v19 = bswap64(a2[1]), v20 = bswap64(a1[1]), v19 == v20)
          && (v19 = bswap64(a2[2]), v20 = bswap64(a1[2]), v19 == v20)
          && (v19 = bswap64(a2[3]), v20 = bswap64(a1[3]), v19 == v20))
        {
          v21 = 0;
        }
        else if (v19 < v20)
        {
          v21 = -1;
        }
        else
        {
          v21 = 1;
        }
        if (v21 < 0)
        {
          v22 = *(_OWORD *)a1;
          result = *((__n128 *)a1 + 1);
          v23 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_OWORD *)a1 + 1) = v23;
          *(_OWORD *)a2 = v22;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a2, a3, a4).n128_u64[0];
  v11 = bswap64(*a5);
  v12 = bswap64(*a4);
  if (v11 != v12
    || (v11 = bswap64(a5[1]), v12 = bswap64(a4[1]), v11 != v12)
    || (v11 = bswap64(a5[2]), v12 = bswap64(a4[2]), v11 != v12)
    || (v11 = bswap64(a5[3]), v12 = bswap64(a4[3]), v11 != v12))
  {
    v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      v14 = *(_OWORD *)a4;
      result = *((__n128 *)a4 + 1);
      v15 = *((_OWORD *)a5 + 1);
      *(_OWORD *)a4 = *(_OWORD *)a5;
      *((_OWORD *)a4 + 1) = v15;
      *(_OWORD *)a5 = v14;
      *((__n128 *)a5 + 1) = result;
      v16 = bswap64(*a4);
      v17 = bswap64(*a3);
      if (v16 != v17)
        goto LABEL_14;
      v16 = bswap64(a4[1]);
      v17 = bswap64(a3[1]);
      if (v16 == v17
        && (v16 = bswap64(a4[2]), v17 = bswap64(a3[2]), v16 == v17)
        && (v16 = bswap64(a4[3]), v17 = bswap64(a3[3]), v16 == v17))
      {
        v18 = 0;
      }
      else
      {
LABEL_14:
        v18 = v16 < v17 ? -1 : 1;
      }
      if (v18 < 0)
      {
        v19 = *(_OWORD *)a3;
        result = *((__n128 *)a3 + 1);
        v20 = *((_OWORD *)a4 + 1);
        *(_OWORD *)a3 = *(_OWORD *)a4;
        *((_OWORD *)a3 + 1) = v20;
        *(_OWORD *)a4 = v19;
        *((__n128 *)a4 + 1) = result;
        v21 = bswap64(*a3);
        v22 = bswap64(*a2);
        if (v21 != v22)
          goto LABEL_23;
        v21 = bswap64(a3[1]);
        v22 = bswap64(a2[1]);
        if (v21 == v22
          && (v21 = bswap64(a3[2]), v22 = bswap64(a2[2]), v21 == v22)
          && (v21 = bswap64(a3[3]), v22 = bswap64(a2[3]), v21 == v22))
        {
          v23 = 0;
        }
        else
        {
LABEL_23:
          v23 = v21 < v22 ? -1 : 1;
        }
        if (v23 < 0)
        {
          v24 = *(_OWORD *)a2;
          result = *((__n128 *)a2 + 1);
          v25 = *((_OWORD *)a3 + 1);
          *(_OWORD *)a2 = *(_OWORD *)a3;
          *((_OWORD *)a2 + 1) = v25;
          *(_OWORD *)a3 = v24;
          *((__n128 *)a3 + 1) = result;
          v26 = bswap64(*a2);
          v27 = bswap64(*a1);
          if (v26 == v27
            && (v26 = bswap64(a2[1]), v27 = bswap64(a1[1]), v26 == v27)
            && (v26 = bswap64(a2[2]), v27 = bswap64(a1[2]), v26 == v27)
            && (v26 = bswap64(a2[3]), v27 = bswap64(a1[3]), v26 == v27))
          {
            v28 = 0;
          }
          else if (v26 < v27)
          {
            v28 = -1;
          }
          else
          {
            v28 = 1;
          }
          if (v28 < 0)
          {
            v29 = *(_OWORD *)a1;
            result = *((__n128 *)a1 + 1);
            v30 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *((_OWORD *)a1 + 1) = v30;
            *(_OWORD *)a2 = v29;
            *((__n128 *)a2 + 1) = result;
          }
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  __int128 v24;
  __int128 v27;
  __int128 v28;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 5;
    if ((char *)a2 - (char *)a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[4 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>((uint64_t)a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = bswap64(*v14);
        v16 = bswap64(*a1);
        if (v15 != v16
          || (v15 = bswap64(v14[1]), v16 = bswap64(a1[1]), v15 != v16)
          || (v15 = bswap64(v14[2]), v16 = bswap64(a1[2]), v15 != v16)
          || (v15 = bswap64(v14[3]), v16 = bswap64(a1[3]), v15 != v16))
        {
          v17 = v15 < v16 ? -1 : 1;
          if (v17 < 0)
          {
            v19 = *(_OWORD *)v14;
            v18 = *((_OWORD *)v14 + 1);
            v20 = *((_OWORD *)a1 + 1);
            *(_OWORD *)v14 = *(_OWORD *)a1;
            *((_OWORD *)v14 + 1) = v20;
            *(_OWORD *)a1 = v19;
            *((_OWORD *)a1 + 1) = v18;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>((uint64_t)a1, a4, v9, a1);
          }
        }
        v14 += 4;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v21 = (unint64_t)v8 >> 5;
      v22 = a2 - 4;
      do
      {
        v27 = *(_OWORD *)a1;
        v28 = *((_OWORD *)a1 + 1);
        v23 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a4, v21);
        if (v22 == v23)
        {
          *(_OWORD *)v23 = v27;
          *((_OWORD *)v23 + 1) = v28;
        }
        else
        {
          v24 = *((_OWORD *)v22 + 1);
          *(_OWORD *)v23 = *(_OWORD *)v22;
          *((_OWORD *)v23 + 1) = v24;
          *(_OWORD *)v22 = v27;
          *((_OWORD *)v22 + 1) = v28;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>((uint64_t)a1, (uint64_t)(v23 + 4), a4, ((char *)(v23 + 4) - (char *)a1) >> 5);
        }
        v22 -= 4;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  __n128 *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  __n128 result;
  __n128 v26;
  __n128 v27;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - a1;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - a1) >> 5)
    {
      v6 = v4 >> 4;
      v7 = (v4 >> 4) + 1;
      v8 = (unint64_t *)(a1 + 32 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = bswap64(*v8);
        v11 = bswap64(v8[4]);
        if (v10 != v11)
          goto LABEL_9;
        v10 = bswap64(v8[1]);
        v11 = bswap64(v8[5]);
        if (v10 == v11
          && (v10 = bswap64(v8[2]), v11 = bswap64(v8[6]), v10 == v11)
          && (v10 = bswap64(v8[3]), v11 = bswap64(v8[7]), v10 == v11))
        {
          v12 = 0;
        }
        else
        {
LABEL_9:
          v12 = v10 < v11 ? -1 : 1;
        }
        if (v12 < 0)
        {
          v8 += 4;
          v7 = v9;
        }
      }
      v13 = bswap64(*v8);
      v14 = bswap64(*a4);
      if (v13 == v14
        && (v13 = bswap64(v8[1]), v14 = bswap64(a4[1]), v13 == v14)
        && (v13 = bswap64(v8[2]), v14 = bswap64(a4[2]), v13 == v14)
        && (v13 = bswap64(v8[3]), v14 = bswap64(a4[3]), v13 == v14))
      {
        v15 = 0;
      }
      else if (v13 < v14)
      {
        v15 = -1;
      }
      else
      {
        v15 = 1;
      }
      if ((v15 & 0x80000000) == 0)
      {
        v26 = *(__n128 *)a4;
        v27 = *((__n128 *)a4 + 1);
        do
        {
          v16 = (__n128 *)v8;
          v17 = *((_OWORD *)v8 + 1);
          *(_OWORD *)a4 = *(_OWORD *)v8;
          *((_OWORD *)a4 + 1) = v17;
          if (v5 < v7)
            break;
          v18 = (2 * v7) | 1;
          v8 = (unint64_t *)(a1 + 32 * v18);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v7 = v18;
          }
          else
          {
            v19 = bswap64(*v8);
            v20 = bswap64(v8[4]);
            if (v19 != v20)
              goto LABEL_32;
            v19 = bswap64(v8[1]);
            v20 = bswap64(v8[5]);
            if (v19 == v20
              && (v19 = bswap64(v8[2]), v20 = bswap64(v8[6]), v19 == v20)
              && (v19 = bswap64(v8[3]), v20 = bswap64(v8[7]), v19 == v20))
            {
              v21 = 0;
            }
            else
            {
LABEL_32:
              v21 = v19 < v20 ? -1 : 1;
            }
            if (v21 >= 0)
              v7 = v18;
            else
              v8 += 4;
          }
          v22 = bswap64(*v8);
          v23 = bswap64(v26.n128_u64[0]);
          if (v22 != v23)
            goto LABEL_43;
          v22 = bswap64(v8[1]);
          v23 = bswap64(v26.n128_u64[1]);
          if (v22 == v23
            && (v22 = bswap64(v8[2]), v23 = bswap64(v27.n128_u64[0]), v22 == v23)
            && (v22 = bswap64(v8[3]), v23 = bswap64(v27.n128_u64[1]), v22 == v23))
          {
            v24 = 0;
          }
          else
          {
LABEL_43:
            v24 = v22 < v23 ? -1 : 1;
          }
          a4 = (unint64_t *)v16;
        }
        while ((v24 & 0x80000000) == 0);
        result = v26;
        *v16 = v26;
        v16[1] = v27;
      }
    }
  }
  return result;
}

unint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  __int128 v12;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[4 * v3 + 4];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = bswap64(*v6);
      v10 = bswap64(v6[4]);
      if (v9 == v10
        && (v9 = bswap64(v6[1]), v10 = bswap64(v6[5]), v9 == v10)
        && (v9 = bswap64(v6[2]), v10 = bswap64(v6[6]), v9 == v10)
        && (v9 = bswap64(v6[3]), v10 = bswap64(v6[7]), v9 == v10))
      {
        v11 = 0;
      }
      else if (v9 < v10)
      {
        v11 = -1;
      }
      else
      {
        v11 = 1;
      }
      if (v11 < 0)
      {
        v6 += 4;
        v7 = v8;
      }
    }
    v12 = *((_OWORD *)v6 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v6;
    *((_OWORD *)a1 + 1) = v12;
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t *v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  __n128 *v10;
  __n128 v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  __n128 result;
  __n128 v16;
  __n128 v17;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (unint64_t *)(a1 + 32 * v4);
    v6 = (__n128 *)(a2 - 32);
    v7 = bswap64(*v5);
    v8 = bswap64(*(_QWORD *)(a2 - 32));
    if (v7 != v8)
      goto LABEL_7;
    v7 = bswap64(v5[1]);
    v8 = bswap64(*(_QWORD *)(a2 - 24));
    if (v7 == v8
      && (v7 = bswap64(v5[2]), v8 = bswap64(*(_QWORD *)(a2 - 16)), v7 == v8)
      && (v7 = bswap64(v5[3]), v8 = bswap64(*(_QWORD *)(a2 - 8)), v7 == v8))
    {
      v9 = 0;
    }
    else
    {
LABEL_7:
      v9 = v7 < v8 ? -1 : 1;
    }
    if (v9 < 0)
    {
      v16 = *v6;
      v17 = *(__n128 *)(a2 - 16);
      do
      {
        v10 = (__n128 *)v5;
        v11 = *((__n128 *)v5 + 1);
        *v6 = *(__n128 *)v5;
        v6[1] = v11;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (unint64_t *)(a1 + 32 * v4);
        v12 = bswap64(*v5);
        v13 = bswap64(v16.n128_u64[0]);
        if (v12 != v13)
          goto LABEL_18;
        v12 = bswap64(v5[1]);
        v13 = bswap64(v16.n128_u64[1]);
        if (v12 == v13
          && (v12 = bswap64(v5[2]), v13 = bswap64(v17.n128_u64[0]), v12 == v13)
          && (v12 = bswap64(v5[3]), v13 = bswap64(v17.n128_u64[1]), v12 == v13))
        {
          v14 = 0;
        }
        else
        {
LABEL_18:
          v14 = v12 < v13 ? -1 : 1;
        }
        v6 = v10;
      }
      while (v14 < 0);
      result = v16;
      *v10 = v16;
      v10[1] = v17;
    }
  }
  return result;
}

void std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1D48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1D48;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  std::__invoke_void_return_wrapper<std::string,false>::__call[abi:ne180100]<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1} &,objc_object  {objcproto11MTLFunction}>((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

void std::__invoke_void_return_wrapper<std::string,false>::__call[abi:ne180100]<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1} &,objc_object  {objcproto11MTLFunction}>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  uint64_t v7;

  v4 = *a1;
  v7 = *a2;
  v5 = *(_QWORD *)(v4 + 40);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v6, v5, &v7);
  MetalScriptSerializer::makeFunctionString(v4, v6, a3);
}

void MetalScriptSerializer::makeFunctionString(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  MetalScriptSerializer *v5;
  id *v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  void *__p[2];
  char v11;

  v7 = *a2;
  v6 = (id *)(a2 + 2);
  v5 = (MetalScriptSerializer *)v7;
  if ((v7 & 0x80000000) != 0)
  {
    v8 = (_QWORD *)(a1 + 360);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(*v6, "cStringUsingEncoding:", 4));
    v9 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v8, (unsigned __int8 *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    v5 = (MetalScriptSerializer *)*((_QWORD *)v9 + 5);
    v6 = (id *)(v9 + 48);
  }
  MetalScriptSerializer::makeFunctionString(v5, *v6, a3);
}

void sub_18272AAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1CF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1CF0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  std::__invoke_void_return_wrapper<std::string,false>::__call[abi:ne180100]<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1} &,objc_object  {objcproto11MTLFunction}>((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addRenderPipelineDescriptor(MTLPipelineLibrarySerializer::RenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

void std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FDEFF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FDEFF8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  std::__invoke_void_return_wrapper<std::string,false>::__call[abi:ne180100]<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1} &,objc_object  {objcproto11MTLFunction}>((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addStitchedLibrary(MTLStitchedLibraryDescriptor const*,unsigned long)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

void std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1DF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1DF8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  std::__invoke_void_return_wrapper<std::string,false>::__call[abi:ne180100]<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1} &,objc_object  {objcproto11MTLFunction}>((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addTileRenderPipelineDescriptor(MTLPipelineLibrarySerializer::TileRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

void std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::~__func()
{
  JUMPOUT(0x186DABFBCLL);
}

_QWORD *std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E0FE1DA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E0FE1DA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::operator()(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  std::__invoke_void_return_wrapper<std::string,false>::__call[abi:ne180100]<MetalScriptSerializer::addComputePipelineDescriptor(MTLPipelineLibrarySerializer::ComputePipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1} &,objc_object  {objcproto11MTLFunction}>((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1},std::allocator<objc_object  {objcproto11MTLFunction}*>,std::basic_string<char,std::char_traits<char>,MetalScriptSerializer::addMeshRenderPipelineDescriptor(MTLPipelineLibrarySerializer::MeshRenderPipelineDescriptor const&)::{lambda(objc_object  {objcproto11MTLFunction}*)#1}<char>> ()(objc_object  {objcproto11MTLFunction})>::target_type()
{
}

__n128 __Block_byref_object_copy__6(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

uint64_t ___ZN21MetalScriptSerializer8finalizeEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (*(char *)(v1 + 71) < 0)
  {
    **(_BYTE **)(v1 + 48) = 0;
    *(_QWORD *)(v1 + 56) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 48) = 0;
    *(_BYTE *)(v1 + 71) = 0;
  }
  return result;
}

void ___ZN21MetalScriptSerializer8finalizeEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  char v2;
  __int128 v3;
  __int128 v4;

  v1 = 0;
  v2 = 0;
  v3 = 0u;
  v4 = 0u;
  flatbuffers::DetachedBuffer::operator=((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), (uint64_t)&v1);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v1);
}

void sub_18272AE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *flatbuffers::DetachedBuffer::operator=(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;

  if (a1 != (_QWORD *)a2)
  {
    v4 = a1 + 2;
    if (a1[2])
    {
      v5 = *a1;
      if (*a1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
      else
        MEMORY[0x186DABFA4](a1[2], 0x1000C8077774924);
    }
    if (*((_BYTE *)a1 + 8) && *a1)
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
    *a1 = 0;
    *((_BYTE *)a1 + 8) = 0;
    *v4 = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *a1 = *(_QWORD *)a2;
    *((_BYTE *)a1 + 8) = *(_BYTE *)(a2 + 8);
    a1[2] = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
    a1[5] = *(_QWORD *)(a2 + 40);
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
  }
  return a1;
}

uint64_t std::__function::__value_func<MTLPipelineLibrarySerializer::FunctionReference ()(_MTLFunction *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

double MTLGetEnvDefaultDouble(const char *a1, double a2)
{
  char *v3;

  v3 = getenv(a1);
  if (v3)
    return strtod(v3, 0);
  else
    return a2;
}

double deltaInMilliseconds(uint64_t a1)
{
  if (initTimebaseInfo(void)::onceToken != -1)
    dispatch_once(&initTimebaseInfo(void)::onceToken, &__block_literal_global_16);
  return *(double *)&gMachTimeToNS * (double)(mach_absolute_time() - a1) * 0.000001;
}

uint64_t _MTLRequestHashToString(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::string *v4;
  uint64_t v5;
  std::string v7;

  v2 = 0;
  memset(&v7, 0, sizeof(v7));
  do
  {
    v3 = *(unsigned __int8 *)(a1 + v2);
    std::string::push_back(&v7, _MTLRequestHashToString(MTLUINT256_t)::hexChars[v3 >> 4]);
    std::string::push_back(&v7, _MTLRequestHashToString(MTLUINT256_t)::hexChars[v3 & 0xF]);
    ++v2;
  }
  while (v2 != 32);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v7;
  else
    v4 = (std::string *)v7.__r_.__value_.__r.__words[0];
  v5 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v5;
}

void sub_18272B214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _MTLHashForData@<X0>(NSObject *a1@<X0>, void *a2@<X8>)
{
  NSObject *v4;
  size_t size_ptr;
  void *buffer_ptr;
  CC_SHA256_CTX c;

  bzero(a2, 0x20uLL);
  CC_SHA256_Init(&c);
  if (a1)
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v4 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &size_ptr);
    CC_SHA256_Update(&c, buffer_ptr, size_ptr);
    dispatch_release(v4);
  }
  return CC_SHA256_Final((unsigned __int8 *)a2, &c);
}

uint64_t MTLCompareArray(void *a1, void *a2, char a3, char a4)
{
  unint64_t v8;
  BOOL v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned __int8 v17;
  void *__p;

  if (a1 == a2)
    return 1;
  v8 = objc_msgSend(a1, "count");
  if (v8 != objc_msgSend(a2, "count"))
    return 0;
  if (!v8)
  {
    if (a1)
      v11 = a2 == 0;
    else
      v11 = 1;
    v12 = !v11;
    if ((a3 & 1) != 0)
      return 1;
    else
      return v12;
  }
  if ((a4 & 1) != 0)
  {
    if (a2)
      return objc_msgSend(a1, "isEqualToArray:", a2);
    return 0;
  }
  if (!(v8 >> 17))
  {
    v17 = 0;
    std::vector<BOOL>::vector(&__p, v8, &v17);
    v13 = 0;
    v10 = 0;
    do
    {
      v14 = 0;
      while (1)
      {
        if (objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", v13), "isEqual:", objc_msgSend(a2, "objectAtIndexedSubscript:", v14)))
        {
          v15 = *((_QWORD *)__p + (v14 >> 6));
          if ((v15 & (1 << v14)) == 0)
            break;
        }
        if (v8 == ++v14)
          goto LABEL_27;
      }
      *((_QWORD *)__p + (v14 >> 6)) = v15 | (1 << v14);
      v10 = v8 <= ++v13;
    }
    while (v13 != v8);
    v10 = 1;
LABEL_27:
    if (__p)
      operator delete(__p);
    return v10;
  }
  v16 = (void *)objc_msgSend(MEMORY[0x1E0CB3550], "setWithArray:", a1);
  return objc_msgSend(v16, "isEqualToSet:", objc_msgSend(MEMORY[0x1E0CB3550], "setWithArray:", a2));
}

void sub_18272B468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

dispatch_data_t _MTLDispatchDataToNSData(dispatch_object_t object, size_t *a2)
{
  if (a2)
    return dispatch_data_create_subrange(object, *a2, a2[1]);
  dispatch_retain(object);
  return object;
}

dispatch_data_t _MTLNSDataToDispatchData(void *a1, _QWORD *a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  dispatch_data_t v7;
  id v8;
  _QWORD destructor[5];

  v4 = objc_msgSend(a1, "bytes");
  v5 = (const void *)v4;
  if (a2)
  {
    v6 = a2[1];
    v5 = (const void *)(v4 + *a2);
  }
  else
  {
    v6 = objc_msgSend(a1, "length");
  }
  destructor[0] = MEMORY[0x1E0C809B0];
  destructor[1] = 3221225472;
  destructor[2] = ___MTLNSDataToDispatchData_block_invoke;
  destructor[3] = &unk_1E0FE2880;
  destructor[4] = a1;
  v7 = dispatch_data_create(v5, v6, 0, destructor);
  if (v7)
    v8 = a1;
  return v7;
}

uint64_t MTLCompareFunctionList(void *a1, void *a2)
{
  int v4;
  int v5;

  if (!a1)
  {
    v4 = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v4 = objc_msgSend(a1, "isEmpty") ^ 1;
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v5 = objc_msgSend(a2, "isEmpty") ^ 1;
LABEL_6:
  if (a1 == a2 || !(v4 | v5))
    return 1;
  else
    return objc_msgSend(a1, "isEqual:", a2);
}

uint64_t MTLHashDictionary(void *a1)
{
  return MTLHashArray((void *)objc_msgSend(a1, "allKeys"), 1, 0);
}

uint64_t MTLCompareDictionary(void *a1, void *a2)
{
  if (a1 != a2 && (objc_msgSend(a1, "count") || objc_msgSend(a2, "count")))
    return objc_msgSend(a1, "isEqualToDictionary:", a2);
  else
    return 1;
}

dispatch_data_t MTLNewLegacyReflectionData(NSObject *a1)
{
  return _MTLNewReflectionData(a1, 3u);
}

dispatch_object_t MTLNewReflectionBlock(dispatch_object_t object, dispatch_object_t a2, int a3)
{
  dispatch_object_t v5;
  NSObject *subrange;
  NSObject *v7;
  size_t *v8;
  size_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  size_t v13;
  size_t v14;
  size_t v16;
  void *buffer_ptr;

  v5 = object;
  if (!object || a2)
  {
    if (object)
    {
      v16 = 0;
      buffer_ptr = 0;
      subrange = dispatch_data_create_subrange(object, 0, 0x50uLL);
      v7 = dispatch_data_create_map(subrange, (const void **)&buffer_ptr, &v16);
      v8 = (size_t *)buffer_ptr;
      v9 = *((_QWORD *)buffer_ptr + 5);
      if (v9)
        v10 = dispatch_data_create_subrange(v5, *((_QWORD *)buffer_ptr + 4), v9);
      else
        v10 = 0;
      v13 = v8[7];
      if (v13)
        v11 = dispatch_data_create_subrange(v5, v8[6], v13);
      else
        v11 = 0;
      v14 = v8[3];
      if (v14)
        v12 = dispatch_data_create_subrange(v5, v8[2], v14);
      else
        v12 = 0;
      dispatch_release(v7);
      dispatch_release(subrange);
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
    }
    dispatch_retain(a2);
    switch(a3)
    {
      case 1:
        if (v12)
          dispatch_release(v12);
        v12 = a2;
        break;
      case 4:
        if (v11)
          dispatch_release(v11);
        v11 = a2;
        break;
      case 2:
        if (v10)
          dispatch_release(v10);
        v10 = a2;
        break;
      default:
        dispatch_release(a2);
        break;
    }
    v5 = _MTLNewReflectionBlock(v12, v10, v11);
    if (v12)
      dispatch_release(v12);
    if (v10)
      dispatch_release(v10);
    if (v11)
      dispatch_release(v11);
  }
  else
  {
    dispatch_retain(object);
  }
  return v5;
}

uint64_t MTLNewAirntReflections(NSObject *a1, dispatch_data_t *a2, dispatch_data_t *a3)
{
  NSObject *v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  size_t v11;
  void *buffer_ptr;

  if (!a1)
    return 0;
  v11 = 0;
  buffer_ptr = 0;
  v6 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &v11);
  v7 = buffer_ptr;
  if (*(_QWORD *)buffer_ptr == 0x8EF13C710 && (v8 = *((_QWORD *)buffer_ptr + 5)) != 0 && *((_QWORD *)buffer_ptr + 7))
  {
    *a2 = dispatch_data_create_subrange(a1, *((_QWORD *)buffer_ptr + 4), v8);
    *a3 = dispatch_data_create_subrange(a1, v7[6], v7[7]);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  dispatch_release(v6);
  return v9;
}

void MTLGetCompilerWorkingDir(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  char *v4;
  char v5[1025];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x186DAC640]();
  v3 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "resourcePath");
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v3, "UTF8String"));
  }
  else
  {
    v4 = getcwd(v5, 0x400uLL);
    if (v4)
    {
      std::string::basic_string[abi:ne180100]<0>(a1, v4);
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
  }
  objc_autoreleasePoolPop(v2);
}

double ___ZL16initTimebaseInfov_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  result = (double)v0 / (double)v1;
  gMachTimeToNS = *(_QWORD *)&result;
  return result;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

const __CFString *MTLMutabilityString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E0FE32A0[a1];
}

const __CFString *MTLRoundingModeString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E0FE3288[a1];
}

uint64_t pipelineBufferFormattedDescription(uint64_t a1, void *a2)
{
  _BYTE *v3;
  uint64_t v4;
  const __CFString *v5;
  void *v6;
  uint64_t v8;
  const __CFString *v9;
  const __CFString *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = (_BYTE *)objc_msgSend(a2, "_descriptorPrivate");
  v8 = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a1 + 4, CFSTR(" "), 0);
  v9 = CFSTR("mutability =");
  v4 = *v3 & 3;
  if ((_DWORD)v4 == 3)
    v5 = CFSTR("Unknown");
  else
    v5 = off_1E0FE32A0[v4];
  v10 = v5;
  v6 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v8, 3);
  return objc_msgSend(v6, "componentsJoinedByString:", CFSTR(" "), v8, v9);
}

uint64_t pipelineBufferDefaultFormattedDescription(uint64_t a1)
{
  _QWORD v2[4];

  v2[3] = *MEMORY[0x1E0C80C00];
  v2[0] = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a1 + 4, CFSTR(" "), 0);
  v2[1] = CFSTR("mutability =");
  v2[2] = CFSTR("MTLMutabilityDefault");
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v2, 3), "componentsJoinedByString:", CFSTR(" "));
}

uint64_t MTLPipelineBufferDescriptorDescription(void *a1)
{
  uint64_t v1;
  const __CFString *v2;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = CFSTR("Mutability");
  v1 = *(_BYTE *)objc_msgSend(a1, "_descriptorPrivate") & 3;
  if ((_DWORD)v1 == 3)
    v2 = CFSTR("Unknown");
  else
    v2 = off_1E0FE32A0[v1];
  v5[0] = v2;
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
}

uint64_t MTLPipelineBufferDescriptorDefaultDescription()
{
  const __CFString *v1;
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  v1 = CFSTR("Mutability");
  v2[0] = CFSTR("MTLMutabilityDefault");
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v2, &v1, 1);
}

void std::vector<__CFString const*>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<__CFString const*>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<__CFString const*>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

uint64_t MTLGetBaseCachePath(void)
{
  if (MTLGetBaseCachePath(void)::onceToken != -1)
    dispatch_once(&MTLGetBaseCachePath(void)::onceToken, &__block_literal_global_5);
  return MTLGetBaseCachePath(void)::result;
}

void ___Z19MTLGetBaseCachePathv_block_invoke()
{
  void *BaseCacheFolder;
  void *v1;
  id v2;
  unint64_t v3;

  v3 = 0;
  BaseCacheFolder = getBaseCacheFolder(&v3);
  if (BaseCacheFolder)
  {
    v1 = BaseCacheFolder;
    v2 = objc_alloc(MEMORY[0x1E0CB3940]);
    MTLGetBaseCachePath(void)::result = objc_msgSend(v2, "initWithBytesNoCopy:length:encoding:freeWhenDone:", v1, v3, 4, 1);
    if (!MTLGetBaseCachePath(void)::result)
      free(v1);
  }
}

uint64_t MTLGetShaderCachePath()
{
  if (MTLGetShaderCachePath::onceToken != -1)
    dispatch_once(&MTLGetShaderCachePath::onceToken, &__block_literal_global_3);
  return MTLGetShaderCachePath::result;
}

uint64_t MTLGetModulesCachePath()
{
  if (MTLGetModulesCachePath::onceToken != -1)
    dispatch_once(&MTLGetModulesCachePath::onceToken, &__block_literal_global_4);
  return MTLGetModulesCachePath::result;
}

uint64_t MTLGetGPUArchiverCachePath()
{
  if (MTLGetGPUArchiverCachePath::onceToken != -1)
    dispatch_once(&MTLGetGPUArchiverCachePath::onceToken, &__block_literal_global_5);
  return MTLGetGPUArchiverCachePath::result;
}

void MTLSetShaderCachePath(void *a1)
{
  setShaderCacheMainFolder((const char *)objc_msgSend(a1, "UTF8String"));
}

uint64_t getShaderCachePath()
{
  if (MTLGetShaderCachePath::onceToken != -1)
    dispatch_once(&MTLGetShaderCachePath::onceToken, &__block_literal_global_3);
  return MTLGetShaderCachePath::result;
}

void setShaderCachePath(void *a1)
{
  setShaderCacheMainFolder((const char *)objc_msgSend(a1, "UTF8String"));
}

uint64_t MTLGetProcessName()
{
  if (MTLGetProcessName::onceToken != -1)
    dispatch_once(&MTLGetProcessName::onceToken, &__block_literal_global_6_0);
  return MTLGetProcessName::tmp;
}

void sub_18272D584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MTLSetCompilerTestMode(uint64_t result)
{
  gCompilerTestMode = result;
  return result;
}

uint64_t indirectArgumentFormattedDescription(uint64_t a1, const MTLArgumentDescriptorPrivate *a2)
{
  uint64_t v3;
  const __CFString *v4;
  _QWORD v6[19];

  v6[18] = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend(CFSTR("\n"), "stringByPaddingToLength:withString:startingAtIndex:", a1 + 4, CFSTR(" "), 0);
  if (a2->constantBlockAlignment)
    v4 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
  else
    v4 = CFSTR("default");
  v6[0] = v3;
  v6[1] = CFSTR("dataType =");
  v6[2] = MTLDataTypeString(a2->dataType);
  v6[3] = v3;
  v6[4] = CFSTR("index =");
  v6[5] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2->index);
  v6[6] = v3;
  v6[7] = CFSTR("arrayLength =");
  v6[8] = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2->arrayLength);
  v6[9] = v3;
  v6[10] = CFSTR("access =");
  v6[11] = argumentAccessNames(a2->access);
  v6[12] = v3;
  v6[13] = CFSTR("textureType =");
  v6[14] = MTLTextureTypeString(a2->textureType);
  v6[15] = v3;
  v6[16] = CFSTR("constantBlockAlignment =");
  v6[17] = v4;
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 18), "componentsJoinedByString:", CFSTR(" "));
}

uint64_t MTLOverrideDeviceCreationFlags(uint64_t result)
{
  _are_device_creation_flags_overriden = 1;
  _overriden_device_creation_flags = result;
  return result;
}

uint64_t pipelineDumper(void)
{
  NSArray *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = MTLCopyAllDevices();
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  result = -[NSArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
  if (result)
  {
    v2 = result;
    v3 = *(_QWORD *)v6;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v6 != v3)
          objc_enumerationMutation(v0);
        objc_msgSend(*(id *)(*((_QWORD *)&v5 + 1) + 8 * v4++), "dumpPipelineDescriptorsIfRequested");
      }
      while (v2 != v4);
      result = -[NSArray countByEnumeratingWithState:objects:count:](v0, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
      v2 = result;
    }
    while (result);
  }
  return result;
}

void sub_18272EFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer((MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer *)&a9);
  _Unwind_Resume(a1);
}

void sub_18272F128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer((MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer *)&a9);
  _Unwind_Resume(a1);
}

void sub_18272F274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer((MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer *)&a9);
  _Unwind_Resume(a1);
}

void sub_18272F3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer::~PipelineDescriptorDeserializer((MTLPipelineLibrarySerializer::PipelineDescriptorDeserializer *)&a9);
  _Unwind_Resume(a1);
}

void sub_18272F4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  free(a10);
  _Unwind_Resume(a1);
}

void sub_18272F7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void _MTLCompilerWarningLog(NSError *a1)
{
  NSObject *v2;

  if (_MTLCompilerWarningLog(NSError *)::onceToken != -1)
    dispatch_once(&_MTLCompilerWarningLog(NSError *)::onceToken, &__block_literal_global_1644);
  v2 = _MTLCompilerWarningLog(NSError *)::compilerWarningLogObject;
  if (os_log_type_enabled((os_log_t)_MTLCompilerWarningLog(NSError *)::compilerWarningLogObject, OS_LOG_TYPE_ERROR))
    _MTLCompilerWarningLog(a1, v2);
}

void sub_18272FA4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10B2C40A98EDE6CLL);
  _Unwind_Resume(a1);
}

void sub_18272FB4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10B2C40A98EDE6CLL);
  _Unwind_Resume(a1);
}

const __CFString *_MTLLibraryTypeString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("MTLLibraryTypeDynamic");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("MTLLibraryTypeExecutable");
}

void sub_182730128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1827304D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182730694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182730800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t errorMessageFromContext(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v3 = *(void **)(a1 + 40);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(v2, "addObject:", objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7++), "string"));
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }
  return objc_msgSend(v2, "componentsJoinedByString:", CFSTR("\n"));
}

void sub_182730B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t validateMTLStitchedLibraryDescriptor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  const __CFString *v19;
  uint64_t v20;

  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend(a1, "functionGraphs"))
      {
        objc_msgSend(a1, "functionGraphs");
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (objc_msgSend((id)objc_msgSend(a1, "functionGraphs"), "count"))
          {
            if (objc_msgSend(a1, "functions"))
            {
              objc_msgSend(a1, "functions");
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
              {
                if (objc_msgSend((id)objc_msgSend(a1, "functions"), "count"))
                {
                  if (objc_msgSend((id)objc_msgSend(a1, "functions"), "count"))
                  {
                    v10 = 0;
                    while (1)
                    {
                      objc_msgSend((id)objc_msgSend(a1, "functions"), "objectAtIndexedSubscript:", v10);
                      if (!objc_msgSend((id)objc_opt_class(), "conformsToProtocol:", &unk_1EDCE6A58))
                        break;
                      if (++v10 >= (unint64_t)objc_msgSend((id)objc_msgSend(a1, "functions"), "count"))
                        goto LABEL_13;
                    }
                    _MTLMessageContextPush_(a2, 8, (uint64_t)CFSTR("descriptor.functions[%lu] does not conform to MTLFunction."), v11, v12, v13, v14, v15, v10);
                    return 0;
                  }
LABEL_13:
                  if (!objc_msgSend(a1, "isMemberOfClass:", objc_opt_class()))
                    return 1;
                  if (objc_msgSend(a1, "binaryArchives"))
                  {
                    objc_msgSend(a1, "binaryArchives");
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) != 0)
                    {
                      if (objc_msgSend((id)objc_msgSend(a1, "binaryArchives"), "count"))
                      {
                        v16 = 0;
                        while (1)
                        {
                          objc_msgSend((id)objc_msgSend(a1, "binaryArchives"), "objectAtIndexedSubscript:", v16);
                          if (!objc_msgSend((id)objc_opt_class(), "conformsToProtocol:", &unk_1EDCD3D40))
                            break;
                          ++v16;
                          v17 = objc_msgSend((id)objc_msgSend(a1, "binaryArchives"), "count");
                          result = 1;
                          if (v16 >= v17)
                            return result;
                        }
                        v20 = v16;
                        v19 = CFSTR("descriptor.binaryArchives[%lu] does not conform to MTLBinaryArchive.");
                        goto LABEL_34;
                      }
                      return 1;
                    }
                    v19 = CFSTR("descriptor.binaryArchives is not an NSArray.");
                  }
                  else
                  {
                    v19 = CFSTR("descriptor.binaryArchives cannot be nil.");
                  }
                }
                else
                {
                  v19 = CFSTR("descriptor.functions cannot be empty.");
                }
              }
              else
              {
                v19 = CFSTR("descriptor.functions is not an NSArray.");
              }
            }
            else
            {
              v19 = CFSTR("descriptor.functions cannot be nil.");
            }
          }
          else
          {
            v19 = CFSTR("descriptor.functionGraphs cannot be empty.");
          }
        }
        else
        {
          v19 = CFSTR("descriptor.functionGraphs is not an NSArray.");
        }
      }
      else
      {
        v19 = CFSTR("descriptor.functionGraphs cannot be nil.");
      }
    }
    else
    {
      v19 = CFSTR("descriptor is not a MTLStitchedLibraryDescriptor.");
    }
  }
  else
  {
    v19 = CFSTR("descriptor cannot be nil.");
  }
LABEL_34:
  _MTLMessageContextPush_(a2, 8, (uint64_t)v19, a4, a5, a6, a7, a8, v20);
  return 0;
}

id newDAGStringFromFunctionGraphs(void *a1, unsigned int a2, uint64_t a3)
{
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  objc_class *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t j;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSString *i;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  _BOOL4 v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v95;
  _QWORD *v97[8];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  float v106;
  id v107;
  uint64_t v108;
  id v109;
  BOOL v110;
  unsigned __int8 v111;
  uint64_t v112;
  _BYTE v113[128];
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  v112 = a3;
  if (newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::onceToken != -1)
    dispatch_once(&newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::onceToken, &__block_literal_global_1756);
  v4 = (a2 >> 2) & 1;
  if (newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::staticAllowBadLegacyDAGs)
    LOBYTE(v4) = 1;
  v111 = v4;
  v110 = 0;
  v108 = 0;
  v109 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("DAGS {\n"));
  if (objc_msgSend(a1, "count"))
  {
    while (1)
    {
      v107 = 0;
      v5 = (void *)objc_msgSend(a1, "objectAtIndexedSubscript:", v108);
      v107 = v5;
      if (v110)
        goto LABEL_34;
      if (!v5)
      {
        v110 = 1;
        _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu] cannot be nil."), v6, v7, v8, v9, v10, v108);
        if (v110)
          goto LABEL_34;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        v110 = 1;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu] is not a MTLFunctionStitchingGraph."), v11, v12, v13, v14, v15, v95);
      if (v110)
        goto LABEL_34;
      v110 = objc_msgSend(v107, "functionName") == 0;
      if (!objc_msgSend(v107, "functionName"))
        _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].functionName cannot be nil"), v16, v17, v18, v19, v20, v108);
      if (v110)
        goto LABEL_34;
      objc_msgSend(v107, "functionName");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        v110 = 1;
      objc_msgSend(v107, "functionName");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].functionName is not an NSString."), v21, v22, v23, v24, v25, v108);
      if (v110)
        goto LABEL_34;
      v110 = objc_msgSend((id)objc_msgSend(v107, "functionName"), "isEqualToString:", &stru_1E0FE5DC8) != 0;
      if (objc_msgSend((id)objc_msgSend(v107, "functionName"), "isEqualToString:", &stru_1E0FE5DC8))
        _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].functionName cannot be empty."), v26, v27, v28, v29, v30, v108);
      if (v110)
        goto LABEL_34;
      objc_msgSend(v109, "appendString:", objc_msgSend(v107, "functionName"));
      if (v110)
        goto LABEL_34;
      objc_msgSend(v109, "appendString:", CFSTR(" {\n"));
      if (v110)
        goto LABEL_34;
      v110 = objc_msgSend(v107, "attributes") == 0;
      if (!objc_msgSend(v107, "attributes"))
        _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].attributes cannot be nil."), v31, v32, v33, v34, v35, v108);
      if (v110)
        goto LABEL_34;
      objc_msgSend(v107, "attributes");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        v110 = 1;
      objc_msgSend(v107, "attributes");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].attributes is not an NSArray."), v36, v37, v38, v39, v40, v108);
      if (v110 || !objc_msgSend((id)objc_msgSend(v107, "attributes"), "count"))
        goto LABEL_34;
      v41 = 0;
      v42 = 0;
      do
      {
        objc_msgSend((id)objc_msgSend(v107, "attributes"), "objectAtIndexedSubscript:", v41);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          if (!v110)
            objc_msgSend(v109, "appendString:", CFSTR("ALWAYS_INLINE;\n"));
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if (!v110)
              objc_msgSend(v109, "appendString:", CFSTR("KERNEL;\n"));
            v42 = 1;
          }
          else if (!v110)
          {
            v110 = 1;
            v43 = v112;
            v44 = v108;
            v45 = (objc_class *)objc_opt_class();
            NSStringFromClass(v45);
            _MTLMessageContextPush_(v43, 8, (uint64_t)CFSTR("functionGraphs[%lu].attributes[%lu] is of incorrect type: %@."), v46, v47, v48, v49, v50, v44);
          }
        }
        ++v41;
      }
      while (v41 < objc_msgSend((id)objc_msgSend(v107, "attributes"), "count"));
      if ((v42 & 1) == 0)
      {
LABEL_34:
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & !v110) == 1)
          objc_msgSend(v109, "appendString:", CFSTR("KERNEL;\n"));
      }
      if (objc_msgSend(v107, "outputNode"))
        goto LABEL_56;
      if (!v110)
      {
        v110 = objc_msgSend(v107, "nodes") == 0;
        if (!objc_msgSend(v107, "nodes"))
          _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes cannot be nil if functionGraphs[%lu].outputNode is nil."), v51, v52, v53, v54, v55, v108);
        if (!v110)
          break;
      }
      v104 = 0u;
      v105 = 0u;
      v106 = 1.0;
      v103 = -1;
LABEL_75:
      v97[0] = &v110;
      v97[1] = &v112;
      v97[2] = &v108;
      v97[3] = &v109;
      v97[4] = &v107;
      v97[5] = &v111;
      v97[6] = &v103;
      v97[7] = &v104;
      if (!v110)
      {
        objc_msgSend(v107, "nodes");
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          v110 = 1;
        objc_msgSend(v107, "nodes");
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes is not an NSArray."), v74, v75, v76, v77, v78, v108);
        if (!v110)
        {
          for (i = 0;
                (unint64_t)i < objc_msgSend((id)objc_msgSend(v107, "nodes"), "count");
                i = (NSString *)((char *)i + 1))
          {
            v80 = (void *)objc_msgSend((id)objc_msgSend(v107, "nodes"), "objectAtIndexedSubscript:", i);
            newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator()((uint64_t)v97, v80, i, i == (NSString *)v103, v81, v82, v83, v84);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v85 = objc_msgSend(v80, "isEarlyReturn");
              if (v110)
                v86 = 0;
              else
                v86 = v85;
              if (v86 == 1)
              {
                v95 = (uint64_t)i;
                objc_msgSend(v109, "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("NODE(node_early_return) : EARLY_RETURN, NODE(node_%lu);\n")));
              }
            }
          }
          v87 = v110;
          if (!v110 && v103 == -1)
          {
            if (objc_msgSend(v107, "outputNode"))
            {
              v88 = (void *)objc_msgSend(v107, "outputNode");
              newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator()((uint64_t)v97, v88, (NSString *)0xFFFFFFFFFFFFFFFFLL, 1, v89, v90, v91, v92);
            }
            v87 = v110;
          }
          if (!v87)
            objc_msgSend(v109, "appendString:", CFSTR("}\n"));
        }
      }
      std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&v104);
      v93 = ++v108;
      if (v93 >= objc_msgSend(a1, "count"))
        goto LABEL_102;
    }
    v110 = objc_msgSend((id)objc_msgSend(v107, "nodes"), "count") == 0;
    if (!objc_msgSend((id)objc_msgSend(v107, "nodes"), "count"))
      _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes cannot be empty if functionGraphs[%lu].outputNode is nil."), v56, v57, v58, v59, v60, v108);
LABEL_56:
    v104 = 0u;
    v105 = 0u;
    v106 = 1.0;
    v103 = -1;
    if (!v110)
    {
      if (objc_msgSend(v107, "nodes"))
      {
        v61 = objc_msgSend((id)objc_msgSend(v107, "nodes"), "count");
        std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>((uint64_t)&v104, vcvtps_u32_f32((float)v61 / v106));
        v98 = 0u;
        v99 = 0u;
        v100 = 0u;
        v101 = 0u;
        v62 = (void *)objc_msgSend(v107, "nodes");
        v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v98, v113, 16);
        if (v63)
        {
          v64 = 0;
          v65 = *(_QWORD *)v99;
          do
          {
            for (j = 0; j != v63; ++j)
            {
              if (*(_QWORD *)v99 != v65)
                objc_enumerationMutation(v62);
              v102 = 0;
              v102 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * j);
              v67 = v102;
              if (v67 == objc_msgSend(v107, "outputNode") && v111 == 0)
                v103 = v64 + j;
              if (std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(&v104, &v102))
              {
                if (!(v110 | v111))
                {
                  v110 = 1;
                  _MTLMessageContextPush_(v112, 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu] was listed again in the same graph at .nodes[%lu]."), v69, v70, v71, v72, v73, v108);
                }
              }
              else
              {
                v97[0] = &v102;
                std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::__emplace_unique_key_args<MTLFunctionStitchingFunctionNode *,std::piecewise_construct_t const&,std::tuple<MTLFunctionStitchingFunctionNode * const&>,std::tuple<>>((uint64_t)&v104, &v102, (uint64_t)&std::piecewise_construct, v97)[3] = v64 + j;
              }
            }
            v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v98, v113, 16);
            v64 += j;
          }
          while (v63);
        }
      }
    }
    goto LABEL_75;
  }
LABEL_102:
  if (v110 || (objc_msgSend(v109, "appendString:", CFSTR("}\n")), v110))
    objc_msgSend(v109, "setString:", &stru_1E0FE5DC8);
  return v109;
}

void sub_1827317B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_182731A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_182731D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_182734538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1827346BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x186DABFBC](v15, 0x1020C40F38FB7CELL);
  _Unwind_Resume(a1);
}

uint64_t MTLResolveFileURL(NSURL *a1)
{
  char *v2;
  char *v3;
  id v4;
  uint64_t v5;

  if (!a1)
    return 0;
  if (!-[NSURL isFileURL](a1, "isFileURL"))
    return 0;
  v2 = realpath_DARWIN_EXTSN(-[NSURL fileSystemRepresentation](a1, "fileSystemRepresentation"), 0);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_alloc(MEMORY[0x1E0C99E98]);
  v5 = objc_msgSend(v4, "initFileURLWithPath:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3));
  free(v3);
  return v5;
}

void sub_1827348A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1827349E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x186DABFBC](v14, 0x1020C40F38FB7CELL);
  _Unwind_Resume(a1);
}

const __CFString *_MTLGPUFamilyString(uint64_t a1)
{
  uint64_t v1;
  const __CFString *result;

  if (a1 > 2000)
  {
    if (a1 > 3002)
    {
      if (a1 > 4001)
      {
        if (a1 == 4002)
          return CFSTR("MTLGPUFamilyMacCatalyst2");
        if (a1 == 5001)
          return CFSTR("MTLGPUFamilyMetal3");
      }
      else
      {
        if (a1 == 3003)
          return CFSTR("MTLGPUFamilyCommon3");
        if (a1 == 4001)
          return CFSTR("MTLGPUFamilyMacCatalyst1");
      }
    }
    else
    {
      if (a1 > 3000)
      {
        if (a1 == 3001)
          return CFSTR("MTLGPUFamilyCommon1");
        else
          return CFSTR("MTLGPUFamilyCommon2");
      }
      if (a1 == 2001)
        return CFSTR("MTLGPUFamilyMac1");
      if (a1 == 2002)
        return CFSTR("MTLGPUFamilyMac2");
    }
    return CFSTR("Unknown");
  }
  v1 = a1 - 1001;
  result = CFSTR("MTLGPUFamilyApple1");
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("MTLGPUFamilyApple2");
      break;
    case 2:
      result = CFSTR("MTLGPUFamilyApple3");
      break;
    case 3:
      result = CFSTR("MTLGPUFamilyApple4");
      break;
    case 4:
      result = CFSTR("MTLGPUFamilyApple5");
      break;
    case 5:
      result = CFSTR("MTLGPUFamilyApple6");
      break;
    case 6:
      result = CFSTR("MTLGPUFamilyApple7");
      break;
    case 7:
      result = CFSTR("MTLGPUFamilyApple8");
      break;
    case 8:
      goto LABEL_19;
    default:
      if (CFSTR("MTLGPUFamilyApple1") != (__CFString *)-1009)
        return CFSTR("Unknown");
LABEL_19:
      result = CFSTR("MTLGPUFamilyApple9");
      break;
  }
  return result;
}

void MTLValidateFeatureSupport(id *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((objc_msgSend(a1[44], "supportForFeature:", a2) & 1) == 0)
  {
    v6 = objc_msgSend(a1[44], "requirementForFeature:", a2);
    if (v6)
    {
      v11 = v6;
      if ((objc_msgSend(a1, "supportsFamily:", v6) & 1) == 0)
      {
        v12 = objc_msgSend(a1[44], "nameForFeature:", a2);
        _MTLGPUFamilyString(v11);
        MTLReportFailure(a3, "MTLValidateFeatureSupport", 6996, (uint64_t)CFSTR("%@ is only supported on %@ and later."), v13, v14, v15, v16, v12);
      }
    }
    else
    {
      v17 = objc_msgSend(a1[44], "nameForFeature:", a2);
      MTLReportFailure(a3, "MTLValidateFeatureSupport", 6991, (uint64_t)CFSTR("%@ is not supported on this device"), v7, v8, v9, v10, v17);
    }
  }
}

void MTLValidateFeatureSupportWithContext(id *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = _MTLMessageTypeFromFailureType(a3);
  if ((objc_msgSend(a1[44], "supportForFeature:", a2) & 1) == 0)
  {
    v8 = objc_msgSend(a1[44], "requirementForFeature:", a2);
    if (v8)
    {
      v14 = v8;
      if ((objc_msgSend(a1, "supportsFamily:", v8) & 1) == 0)
      {
        v15 = objc_msgSend(a1[44], "nameForFeature:", a2);
        _MTLGPUFamilyString(v14);
        _MTLMessageContextPush_(a4, v7, (uint64_t)CFSTR("%@ is only supported on %@ and later."), v16, v17, v18, v19, v20, v15);
      }
    }
    else
    {
      v21 = objc_msgSend(a1[44], "nameForFeature:", a2);
      _MTLMessageContextPush_(a4, v7, (uint64_t)CFSTR("%@ is not supported on this device"), v9, v10, v11, v12, v13, v21);
    }
  }
}

uint64_t _MTLFeatureSetDictionary()
{
  if (_MTLFeatureSetDictionary::onceToken != -1)
    dispatch_once(&_MTLFeatureSetDictionary::onceToken, &__block_literal_global_1428);
  return objc_msgSend((id)_MTLFeatureSetDictionary::featureSetDictionary, "copy");
}

uint64_t _MTLSetCompileTimeStatisticsEnabled(uint64_t result)
{
  _collectCompilePerformanceStats = result;
  return result;
}

uint64_t logCompileTimeStatsMode(void)
{
  if (logCompileTimeStatsMode(void)::onceToken != -1)
    dispatch_once(&logCompileTimeStatsMode(void)::onceToken, &__block_literal_global_1498);
  return logCompileTimeStatsMode(void)::shouldLogStats;
}

void writeCompileTimeStatsJSONFile(void)
{
  uint64_t CompileStatsJSONPath;
  uint64_t v1;
  _QWORD block[5];

  CompileStatsJSONPath = getCompileStatsJSONPath();
  if (CompileStatsJSONPath)
  {
    v1 = CompileStatsJSONPath;
    if (getCompilePerformanceQueue(void)::onceToken != -1)
      dispatch_once(&getCompilePerformanceQueue(void)::onceToken, &__block_literal_global_1909);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___Z29writeCompileTimeStatsJSONFilev_block_invoke;
    block[3] = &unk_1E0FE2880;
    block[4] = v1;
    dispatch_sync((dispatch_queue_t)getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue, block);
  }
}

void ___Z29writeCompileTimeStatsJSONFilev_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  if (getCompilePerformanceDictionary(void)::onceToken != -1)
    dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_1910);
  v2 = getCompilePerformanceDictionary(void)::_compilePerformanceStatistics;
  if (getCompilePerformanceDictionary(void)::_compilePerformanceStatistics)
  {
    v14 = 0;
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E48]), "initToFileAtPath:append:", *(_QWORD *)(a1 + 32), 0);
    if (!v7)
      MTLReportFailure(0, "writeCompileTimeStatsJSONFile_block_invoke", 7311, (uint64_t)CFSTR("Output stream for writing compile statistics could not be created"), v3, v4, v5, v6, v13);
    objc_msgSend(v7, "open");
    objc_msgSend(MEMORY[0x1E0CB36D8], "writeJSONObject:toStream:options:error:", v2, v7, 1, &v14);
    if (v14)
    {
      v8 = objc_msgSend(v14, "localizedDescription");
      MTLReportFailure(0, "writeCompileTimeStatsJSONFile_block_invoke", 7315, (uint64_t)CFSTR("Failed to write compile statistics, error: %@"), v9, v10, v11, v12, v8);
    }
    objc_msgSend(v7, "close");

  }
}

double getCompileTimeInMS(NSDictionary *a1, NSString *a2)
{
  id v2;

  v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", a2);
  if (v2)
    return (double)(unint64_t)objc_msgSend(v2, "unsignedLongLongValue") * 0.000001;
  else
    return 0.0;
}

void logCompileTimeForPipeline(NSDictionary *a1)
{
  id v2;
  id v3;
  double v4;
  char v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  double v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", MTLCompileTimeStatisticsKeyFunctionName[0]);
  v3 = -[NSDictionary objectForKey:](a1, "objectForKey:", MTLCompileTimeStatisticsKeyTotal[0]);
  if (v3)
    v4 = (double)(unint64_t)objc_msgSend(v3, "unsignedLongLongValue") * 0.000001;
  else
    v4 = 0.0;
  v5 = objc_msgSend(-[NSDictionary objectForKey:](a1, "objectForKey:", MTLCompileTimeStatisticsKeyCachedFunction[0]), "BOOLValue");
  if (v2 && v4 != 0.0 && (v5 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315394;
    v7 = objc_msgSend(v2, "UTF8String");
    v8 = 2048;
    v9 = v4;
    _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Done compiling Metal function '%s': %f ms", (uint8_t *)&v6, 0x16u);
  }
}

void logCompileTimeForLibrary(NSDictionary *a1)
{
  id v2;
  id v3;
  unint64_t v4;
  _BOOL4 v5;
  double v6;
  id v7;
  double v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = -[NSDictionary objectForKey:](a1, "objectForKey:", MTLLibraryPerformanceKeyFunctionNames);
  v3 = -[NSDictionary objectForKey:](a1, "objectForKey:", MTLLibraryPerformanceKeyTotalFrontendTotalTime);
  if (v3)
  {
    v4 = objc_msgSend(v3, "unsignedLongLongValue");
    v5 = v2 != 0;
    if (v2)
    {
      v6 = (double)v4 * 0.000001;
      if (v6 != 0.0)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          v11 = 136315394;
          v12 = objc_msgSend((id)objc_msgSend(v2, "description"), "UTF8String");
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Done compiling Metal library with functions '%s': %f ms", (uint8_t *)&v11, 0x16u);
        }
        v5 = 1;
      }
    }
  }
  else
  {
    v5 = v2 != 0;
  }
  v7 = -[NSDictionary objectForKey:](a1, "objectForKey:", MTLLibraryPerformanceKeyFunctionSpecialization);
  if (v7)
  {
    v8 = (double)(unint64_t)objc_msgSend(v7, "unsignedLongLongValue") * 0.000001;
    v9 = v8 != 0.0 && v5;
    if (v9 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend((id)objc_msgSend(v2, "description"), "UTF8String");
      v11 = 136315394;
      v12 = v10;
      v13 = 2048;
      v14 = v8;
      _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Done compiling Metal function specialization for '%s': %f ms", (uint8_t *)&v11, 0x16u);
    }
  }
}

uint64_t _MTLCompileTimeStatistics()
{
  if (getCompilePerformanceDictionary(void)::onceToken != -1)
    dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_1910);
  return getCompilePerformanceDictionary(void)::_compilePerformanceStatistics;
}

void writeCompileTimeStatistics(int a1, NSDictionary *a2)
{
  const char *v4;
  NSDictionary *v5;
  NSDictionary *v6;
  NSDictionary *v7;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  writeCompileTimeStatsJSONFile();
  if (logCompileTimeStatsMode(void)::onceToken != -1)
    dispatch_once(&logCompileTimeStatsMode(void)::onceToken, &__block_literal_global_1498);
  if (logCompileTimeStatsMode(void)::shouldLogStats == 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
        v4 = "library";
      else
        v4 = "pipeline";
      v8 = 136315394;
      v9 = v4;
      v10 = 2080;
      v11 = objc_msgSend((id)-[NSDictionary debugDescription](a2, "debugDescription"), "UTF8String");
      _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Done compiling Metal %s, compile statistics: %s", (uint8_t *)&v8, 0x16u);
    }
  }
  else if (logCompileTimeStatsMode(void)::shouldLogStats == 1)
  {
    if (a1)
    {
      logCompileTimeForLibrary(a2);
    }
    else
    {
      v5 = -[NSDictionary objectForKey:](a2, "objectForKey:", MTLPipelinePerformanceKeyVertexShader[0]);
      v6 = v5;
      if (v5)
        logCompileTimeForPipeline(v5);
      v7 = -[NSDictionary objectForKey:](a2, "objectForKey:", MTLPipelinePerformanceKeyFragmentShader[0]);
      if (!v7 || (logCompileTimeForPipeline(v7), !v6))
        logCompileTimeForPipeline(a2);
    }
  }
}

void _MTLAddCompileLibraryPerformanceStatistics(NSDictionary *a1)
{
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((addCompileTimeDictionary(a1, (NSString *)MTLCompileTimeStatisticsKeyLibrariesFromSource) & 1) == 0)
  {
    v1 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v1)
      _MTLAddCompileLibraryPerformanceStatistics_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

uint64_t addCompileTimeDictionary(NSDictionary *a1, NSString *a2)
{
  uint64_t v4;
  _QWORD v6[6];

  if (!a1)
    return 0;
  if (getCompilePerformanceDictionary(void)::onceToken != -1)
    dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_1910);
  v4 = objc_msgSend((id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics, "objectForKey:", a2);
  if (v4)
  {
    if (getCompilePerformanceQueue(void)::onceToken != -1)
      dispatch_once(&getCompilePerformanceQueue(void)::onceToken, &__block_literal_global_1909);
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = ___ZL24addCompileTimeDictionaryP12NSDictionaryP8NSString_block_invoke;
    v6[3] = &unk_1E0FE34F0;
    v6[4] = v4;
    v6[5] = a1;
    dispatch_sync((dispatch_queue_t)getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue, v6);
    v4 = 1;
    writeCompileTimeStatistics(1, a1);
  }
  return v4;
}

void _MTLAddCompileDynamicLibraryPerformanceStatistics(NSDictionary *a1)
{
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((addCompileTimeDictionary(a1, (NSString *)MTLCompileTimeStatisticsKeyDynamicLibraries) & 1) == 0)
  {
    v1 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v1)
      _MTLAddCompileDynamicLibraryPerformanceStatistics_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void _MTLAddCompileBinaryFunctionPerformanceStatistics(NSDictionary *a1)
{
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((addCompileTimeDictionary(a1, (NSString *)MTLCompileTimeStatisticsKeyBinaryFunctions) & 1) == 0)
  {
    v1 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (v1)
      _MTLAddCompileBinaryFunctionPerformanceStatistics_cold_1(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void _MTLAddCompilePipelinePerformanceStatistics(NSDictionary *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  if (a1)
  {
    if (getCompilePerformanceDictionary(void)::onceToken != -1)
      dispatch_once(&getCompilePerformanceDictionary(void)::onceToken, &__block_literal_global_1910);
    v4 = objc_msgSend((id)objc_msgSend((id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics, "objectForKey:", MTLCompileTimeStatisticsKeyPipelines), "objectForKey:", a2);
    if (getCompilePerformanceQueue(void)::onceToken != -1)
      dispatch_once(&getCompilePerformanceQueue(void)::onceToken, &__block_literal_global_1909);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___MTLAddCompilePipelinePerformanceStatistics_block_invoke;
    v5[3] = &unk_1E0FE34F0;
    v5[4] = v4;
    v5[5] = a1;
    dispatch_sync((dispatch_queue_t)getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue, v5);
    writeCompileTimeStatistics(0, a1);
  }
}

void MTLLibraryBuilder::~MTLLibraryBuilder(id *this)
{

  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)(this + 1), this[2]);
}

os_log_t ___ZL22_MTLCompilerWarningLogP7NSError_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.Metal", "Metal Compiler Warning");
  _MTLCompilerWarningLog(NSError *)::compilerWarningLogObject = (uint64_t)result;
  return result;
}

uint64_t ___ZL30newDAGStringFromFunctionGraphsP7NSArrayIP25MTLFunctionStitchingGraphEmP18_MTLMessageContext_block_invoke()
{
  uint64_t result;

  result = dyld_program_sdk_at_least();
  newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::staticAllowBadLegacyDAGs = result ^ 1;
  return result;
}

void newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator()(uint64_t a1, void *a2, NSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const __CFString *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSString *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  void *v125;
  const __CFString *v126;
  unint64_t v127;
  int v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  void *v133;
  unint64_t v134;
  void *v135;
  void *v136;
  unint64_t v137;
  void *v138;
  void *v139;
  void *v140;
  const __CFString *v141;
  int v142;
  _BYTE *v143;
  uint64_t v144;
  uint64_t v145;
  objc_class *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  objc_class *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t i;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _BYTE *v182;
  const __CFString *v183;
  void *v184;
  NSString *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  NSString *v190;
  uint64_t v191;
  uint64_t v192;
  NSString *v193;
  uint64_t v194;
  NSString *v195;
  void *v196;
  __int128 v197;
  _BYTE *v198;
  uint64_t v199;
  NSString **v200;
  __int128 v201;
  uint64_t v202;
  NSString *v203;

  v8 = a4;
  v203 = a3;
  if (!a2 && !**(_BYTE **)a1)
  {
    **(_BYTE **)a1 = 1;
    v190 = a3;
    _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("Non-output node functionGraphs[%lu].nodes[%lu] cannot be nil."), a4, a5, a6, a7, a8, **(_QWORD **)(a1 + 16));
  }
  if ((v8 & 1) != 0)
  {
    if (!**(_BYTE **)a1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        **(_BYTE **)a1 = 1;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode is not a MTLFunctionStitchingFunctionNode."), v12, v13, v14, v15, v16, **(_QWORD **)(a1 + 16));
    }
  }
  else if (!**(_BYTE **)a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      **(_BYTE **)a1 = 1;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v190 = a3;
      _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu] is not a MTLFunctionStitchingFunctionNode."), v17, v18, v19, v20, v21, **(_QWORD **)(a1 + 16));
    }
  }
  if (**(_BYTE **)a1)
    return;
  v22 = 0x1E0CB3000uLL;
  if (v8)
  {
    v23 = CFSTR("OUTPUT(node_output) : ");
  }
  else
  {
    v185 = a3;
    v23 = CFSTR("NODE(node_%lu) : ");
  }
  objc_msgSend(**(id **)(a1 + 24), "appendString:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v23, v185, v190));
  v197 = *(_OWORD *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(a1 + 56);
  v198 = *(_BYTE **)a1;
  v199 = v24;
  v200 = &v203;
  v201 = *(_OWORD *)(a1 + 8);
  v202 = v25;
  v26 = 0x1E0C99000uLL;
  if (v8)
  {
    if (!*v198)
    {
      if (!objc_msgSend(a2, "arguments"))
        **(_BYTE **)a1 = 1;
      if (!objc_msgSend(a2, "arguments"))
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.arguments cannot be nil."), v27, v28, v29, v30, v31, **(_QWORD **)(a1 + 16));
    }
    if (!**(_BYTE **)a1)
    {
      objc_msgSend(a2, "arguments");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        **(_BYTE **)a1 = 1;
      objc_msgSend(a2, "arguments");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.arguments is not an NSArray."), v32, v33, v34, v35, v36, **(_QWORD **)(a1 + 16));
    }
    if (!**(_BYTE **)a1)
    {
      if (!objc_msgSend(a2, "controlDependencies"))
        **(_BYTE **)a1 = 1;
      if (!objc_msgSend(a2, "controlDependencies"))
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.controlDependencies cannot be nil."), v37, v38, v39, v40, v41, **(_QWORD **)(a1 + 16));
    }
    if (!**(_BYTE **)a1)
    {
      objc_msgSend(a2, "controlDependencies");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        **(_BYTE **)a1 = 1;
      objc_msgSend(a2, "controlDependencies");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.controlDependencies is not an NSArray."), v42, v43, v44, v45, v46, **(_QWORD **)(a1 + 16));
    }
  }
  else
  {
    if (!*v198)
    {
      if (!objc_msgSend(a2, "arguments"))
        **(_BYTE **)a1 = 1;
      if (!objc_msgSend(a2, "arguments"))
      {
        v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].arguments cannot be nil."), v47, v48, v49, v50, v51, **(_QWORD **)(a1 + 16));
      }
    }
    if (!**(_BYTE **)a1)
    {
      objc_msgSend(a2, "arguments");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        **(_BYTE **)a1 = 1;
      objc_msgSend(a2, "arguments");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].arguments is not an NSArray."), v52, v53, v54, v55, v56, **(_QWORD **)(a1 + 16));
      }
    }
    if (!**(_BYTE **)a1)
    {
      if (!objc_msgSend(a2, "controlDependencies"))
        **(_BYTE **)a1 = 1;
      if (!objc_msgSend(a2, "controlDependencies"))
      {
        v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].controlDependencies cannot be nil."), v57, v58, v59, v60, v61, **(_QWORD **)(a1 + 16));
      }
    }
    if (!**(_BYTE **)a1)
    {
      objc_msgSend(a2, "controlDependencies");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        **(_BYTE **)a1 = 1;
      objc_msgSend(a2, "controlDependencies");
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].controlDependencies is not an NSArray."), v62, v63, v64, v65, v66, **(_QWORD **)(a1 + 16));
      }
    }
  }
  if (objc_msgSend(a2, "arguments")
    && (objc_msgSend(a2, "arguments"), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && objc_msgSend(a2, "controlDependencies")
    && (objc_msgSend(a2, "controlDependencies"), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v67 = objc_msgSend((id)objc_msgSend(a2, "arguments"), "count");
    v68 = v67 + objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "count") + 1;
  }
  else
  {
    v68 = 1;
  }
  v69 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v68);
  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    if (!**(_BYTE **)a1)
    {
      if (objc_msgSend((id)objc_msgSend(a2, "arguments"), "count") != 1)
        **(_BYTE **)a1 = 1;
      if (objc_msgSend((id)objc_msgSend(a2, "arguments"), "count") != 1)
      {
        v191 = (uint64_t)v203;
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].arguments must have one element."), v70, v71, v72, v73, v74, **(_QWORD **)(a1 + 16));
      }
    }
    if (**(_BYTE **)a1)
      goto LABEL_98;
    v75 = (void *)MEMORY[0x1E0CB3940];
    v76 = CFSTR("EARLY_RETURN");
  }
  else
  {
    if (v8)
    {
      if (!**(_BYTE **)a1)
      {
        if (!objc_msgSend(a2, "name"))
          **(_BYTE **)a1 = 1;
        if (!objc_msgSend(a2, "name"))
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.name cannot be nil."), v77, v78, v79, v80, v81, **(_QWORD **)(a1 + 16));
      }
      if (!**(_BYTE **)a1)
      {
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1E0FE5DC8))
          **(_BYTE **)a1 = 1;
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1E0FE5DC8))
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.name cannot be empty."), v82, v83, v84, v85, v86, **(_QWORD **)(a1 + 16));
      }
    }
    else
    {
      if (!**(_BYTE **)a1)
      {
        if (!objc_msgSend(a2, "name"))
          **(_BYTE **)a1 = 1;
        if (!objc_msgSend(a2, "name"))
        {
          v191 = (uint64_t)v203;
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].name cannot be nil."), v87, v88, v89, v90, v91, **(_QWORD **)(a1 + 16));
        }
      }
      if (!**(_BYTE **)a1)
      {
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1E0FE5DC8))
          **(_BYTE **)a1 = 1;
        if (objc_msgSend((id)objc_msgSend(a2, "name"), "isEqualToString:", &stru_1E0FE5DC8))
        {
          v191 = (uint64_t)v203;
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].name cannot be empty."), v92, v93, v94, v95, v96, **(_QWORD **)(a1 + 16));
        }
      }
    }
    if (**(_BYTE **)a1)
      goto LABEL_98;
    v97 = (void *)MEMORY[0x1E0CB3940];
    v186 = objc_msgSend(a2, "name");
    v76 = CFSTR("FUNCTION(%@)");
    v75 = v97;
  }
  objc_msgSend(v69, "addObject:", objc_msgSend(v75, "stringWithFormat:", v76, v186, v191));
LABEL_98:
  if (!**(_BYTE **)a1 && objc_msgSend((id)objc_msgSend(a2, "arguments"), "count"))
  {
    v103 = 0;
    while (1)
    {
      v104 = (void *)objc_msgSend((id)objc_msgSend(a2, "arguments"), "objectAtIndexedSubscript:", v103);
      v105 = v104;
      if (v8)
      {
        if (!**(_BYTE **)a1)
        {
          if ((objc_msgSend(v104, "conformsToProtocol:", &unk_1EDCEDC48) & 1) == 0)
            **(_BYTE **)a1 = 1;
          if ((objc_msgSend(v105, "conformsToProtocol:", &unk_1EDCEDC48) & 1) == 0)
          {
            v191 = (uint64_t)v103;
            _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.arguments[%lu] does not conform to MTLFunctionStitchingNode."), v106, v107, v108, v109, v110, **(_QWORD **)(a1 + 16));
          }
        }
      }
      else if (!**(_BYTE **)a1)
      {
        if ((objc_msgSend(v104, "conformsToProtocol:", &unk_1EDCEDC48) & 1) == 0)
          **(_BYTE **)a1 = 1;
        if ((objc_msgSend(v105, "conformsToProtocol:", &unk_1EDCEDC48) & 1) == 0)
        {
          v191 = (uint64_t)v203;
          v193 = v103;
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].arguments[%lu] does not conform to MTLFunctionStitchingNode."), v111, v112, v113, v114, v115, **(_QWORD **)(a1 + 16));
        }
      }
      if ((objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()) & 1) != 0
        || objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        break;
      }
      if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v124 = objc_msgSend(*(id *)(v22 + 2368), "stringWithFormat:", CFSTR("INPUT(%lu)"), objc_msgSend(v105, "argumentIndex"), v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v124 = objc_msgSend(*(id *)(v22 + 2368), "stringWithFormat:", CFSTR("BUFFER(CONSTANT, %lu)"), objc_msgSend(v105, "bindIndex"), v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v196 = *(void **)(v22 + 2368);
          v127 = v26;
          v128 = objc_msgSend(v105, "dereference");
          v192 = objc_msgSend(v105, "bindIndex");
          v194 = objc_msgSend(v105, "byteOffset");
          v129 = v128 == 0;
          v26 = v127;
          v130 = 42;
          if (v129)
            v130 = 0;
          v22 = 0x1E0CB3000;
          v124 = objc_msgSend(v196, "stringWithFormat:", CFSTR("%cBUFFER_ADDR(BUFFER(CONSTANT, %lu), %lu)"), v130, v192, v194, v195);
          goto LABEL_167;
        }
      }
      else if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v131 = v26;
          v132 = *(void **)(v22 + 2368);
          v187 = objc_msgSend(v105, "bindIndex");
          v133 = v132;
          v26 = v131;
          v124 = objc_msgSend(v133, "stringWithFormat:", CFSTR("TEXTURE(%lu)"), v187, v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v134 = v26;
          v135 = *(void **)(v22 + 2368);
          v188 = objc_msgSend(v105, "bindIndex");
          v136 = v135;
          v26 = v134;
          v124 = objc_msgSend(v136, "stringWithFormat:", CFSTR("SAMPLER(%lu)"), v188, v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v137 = v26;
          v138 = *(void **)(v22 + 2368);
          v189 = objc_msgSend(v105, "bindIndex");
          v139 = v138;
          v26 = v137;
          v124 = objc_msgSend(v139, "stringWithFormat:", CFSTR("THREADGROUP(%lu)"), v189, v191, v193, v195);
          goto LABEL_167;
        }
      }
      else if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v140 = *(void **)(v22 + 2368);
          v141 = CFSTR("IMAGEBLOCK");
          goto LABEL_166;
        }
      }
      else if (objc_msgSend(v105, "isMemberOfClass:", objc_opt_class()))
      {
        if (!**(_BYTE **)a1)
        {
          v140 = *(void **)(v22 + 2368);
          v141 = CFSTR("BUILTIN(THREAD_POSITION_IN_GRID)");
          goto LABEL_166;
        }
      }
      else
      {
        v142 = objc_msgSend(v105, "isMemberOfClass:", objc_opt_class());
        v143 = *(_BYTE **)a1;
        if (!v142)
        {
          if (v8)
          {
            if (!**(_BYTE **)a1)
            {
              *v143 = 1;
              v144 = **(_QWORD **)(a1 + 8);
              v145 = **(_QWORD **)(a1 + 16);
              v146 = (objc_class *)objc_opt_class();
              v191 = (uint64_t)v103;
              v193 = NSStringFromClass(v146);
              v147 = v144;
              v26 = 0x1E0C99000;
              _MTLMessageContextPush_(v147, 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.arguments[%lu] is of incorrect type: %@."), v148, v149, v150, v151, v152, v145);
            }
          }
          else if (!**(_BYTE **)a1)
          {
            *v143 = 1;
            v153 = **(_QWORD **)(a1 + 8);
            v154 = **(_QWORD **)(a1 + 16);
            v155 = (uint64_t)v203;
            v156 = (objc_class *)objc_opt_class();
            v193 = v103;
            v195 = NSStringFromClass(v156);
            v191 = v155;
            v22 = 0x1E0CB3000;
            v157 = v153;
            v26 = 0x1E0C99000;
            _MTLMessageContextPush_(v157, 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].arguments[%lu] is of incorrect type: %@."), v158, v159, v160, v161, v162, v154);
          }
          goto LABEL_169;
        }
        if (!**(_BYTE **)a1)
        {
          v140 = *(void **)(v22 + 2368);
          v141 = CFSTR("BUILTIN(THREAD_POSITION_IN_THREADGROUP)");
LABEL_166:
          v124 = objc_msgSend(v140, "stringWithFormat:", v141, v186, v191, v193, v195);
LABEL_167:
          v126 = (const __CFString *)v124;
          v125 = v69;
LABEL_168:
          objc_msgSend(v125, "addObject:", v126);
        }
      }
LABEL_169:
      v103 = (NSString *)((char *)v103 + 1);
      if ((unint64_t)v103 >= objc_msgSend((id)objc_msgSend(a2, "arguments"), "count"))
        goto LABEL_99;
    }
    v116 = newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator() const(MTLFunctionStitchingFunctionNode const*,unsigned long,BOOL)::{lambda(NSArray*<MTLFunctionStitchingFunctionNode*>,NSArray*)#1}::operator()((uint64_t)&v197, (void *)objc_msgSend(**(id **)(a1 + 32), "nodes"), (uint64_t)v105);
    v122 = v116;
    v123 = *(_BYTE **)a1;
    if (v8)
    {
      if (!**(_BYTE **)a1)
      {
        if (v116 == -1)
          goto LABEL_135;
        if (v116 == 0x7FFFFFFFFFFFFFFFLL)
        {
          *v123 = 1;
          v191 = **(_QWORD **)(a1 + 16);
          v193 = v103;
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes does not contain functionGraphs[%lu].outputNode.arguments[%lu]."), v117, v118, v119, v120, v121, v191);
        }
LABEL_133:
        if (!**(_BYTE **)a1)
        {
          v124 = objc_msgSend(*(id *)(v22 + 2368), "stringWithFormat:", CFSTR("NODE(node_%lu)"), v122, v191, v193, v195);
          goto LABEL_167;
        }
        goto LABEL_169;
      }
    }
    else if (!**(_BYTE **)a1)
    {
      if (v116 == -1)
      {
LABEL_135:
        v125 = v69;
        v126 = CFSTR("NODE(node_output)");
        goto LABEL_168;
      }
      if (v116 == 0x7FFFFFFFFFFFFFFFLL)
      {
        *v123 = 1;
        v193 = v203;
        v195 = v103;
        v191 = **(_QWORD **)(a1 + 16);
        _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes does not contain functionGraphs[%lu].nodes[%lu].arguments[%lu]."), v117, v118, v119, v120, v121, v191);
      }
      goto LABEL_133;
    }
    if (v116 == -1)
      goto LABEL_169;
    goto LABEL_133;
  }
LABEL_99:
  if (!**(_BYTE **)a1)
  {
    objc_msgSend(a2, "controlDependencies");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      **(_BYTE **)a1 = 1;
    objc_msgSend(a2, "controlDependencies");
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].controlDependencies is not a NSArray."), v98, v99, v100, v101, v102, **(_QWORD **)(a1 + 16));
  }
  if (!**(_BYTE **)a1 && objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "count"))
  {
    for (i = 0; i < objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "count"); ++i)
    {
      v164 = objc_msgSend((id)objc_msgSend(a2, "controlDependencies"), "objectAtIndexedSubscript:", i);
      if (v8)
      {
        if (!**(_BYTE **)a1)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            **(_BYTE **)a1 = 1;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].outputNode.controlDependencies[%lu] is not of type MTLFunctionStitchingFunctionNode."), v165, v166, v167, v168, v169, **(_QWORD **)(a1 + 16));
        }
      }
      else if (!**(_BYTE **)a1)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          **(_BYTE **)a1 = 1;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu].controlDependencies[%lu] is not of type MTLFunctionStitchingFunctionNode."), v170, v171, v172, v173, v174, **(_QWORD **)(a1 + 16));
      }
      v175 = newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator() const(MTLFunctionStitchingFunctionNode const*,unsigned long,BOOL)::{lambda(NSArray*<MTLFunctionStitchingFunctionNode*>,NSArray*)#1}::operator()((uint64_t)&v197, (void *)objc_msgSend(**(id **)(a1 + 32), "nodes"), v164);
      v181 = v175;
      v182 = *(_BYTE **)a1;
      if (v8)
      {
        if (**(_BYTE **)a1)
          goto LABEL_206;
        if (v175 == -1)
          goto LABEL_202;
        if (v175 == 0x7FFFFFFFFFFFFFFFLL)
        {
          *v182 = 1;
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes does not contain functionGraphs[%lu].outputNode.controlDependencies[%lu]."), v176, v177, v178, v179, v180, **(_QWORD **)(a1 + 16));
        }
      }
      else
      {
        if (**(_BYTE **)a1)
        {
LABEL_206:
          if (v175 == -1)
            continue;
          goto LABEL_200;
        }
        if (v175 == -1)
        {
LABEL_202:
          v184 = v69;
          v183 = CFSTR("*NODE(node_output)");
          goto LABEL_203;
        }
        if (v175 == 0x7FFFFFFFFFFFFFFFLL)
        {
          *v182 = 1;
          _MTLMessageContextPush_(**(_QWORD **)(a1 + 8), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes does not contain functionGraphs[%lu].nodes[%lu].controlDependencies[%lu]."), v176, v177, v178, v179, v180, **(_QWORD **)(a1 + 16));
        }
      }
LABEL_200:
      if (!**(_BYTE **)a1)
      {
        v183 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("*NODE(node_%lu)"), v181);
        v184 = v69;
LABEL_203:
        objc_msgSend(v184, "addObject:", v183);
      }
    }
  }
  if (!**(_BYTE **)a1)
  {
    objc_msgSend(**(id **)(a1 + 24), "appendString:", objc_msgSend(v69, "componentsJoinedByString:", CFSTR(", ")));
    if (!**(_BYTE **)a1)
      objc_msgSend(**(id **)(a1 + 24), "appendString:", CFSTR(";\n"));
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::__emplace_unique_key_args<MTLFunctionStitchingFunctionNode *,std::piecewise_construct_t const&,std::tuple<MTLFunctionStitchingFunctionNode * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_182737188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t newDAGStringFromFunctionGraphs(NSArray<MTLFunctionStitchingGraph *> *,unsigned long,_MTLMessageContext *)::$_0::operator() const(MTLFunctionStitchingFunctionNode const*,unsigned long,BOOL)::{lambda(NSArray*<MTLFunctionStitchingFunctionNode*>,NSArray*)#1}::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;

  v20 = a3;
  if (objc_msgSend(**(id **)a1, "outputNode") == a3 && !**(_BYTE **)(a1 + 8))
  {
    v19 = *(_BYTE **)(a1 + 16);
    if (!*v19 && **(_QWORD **)(a1 + 24) >= **(_QWORD **)(a1 + 32))
    {
      *v19 = 1;
      _MTLMessageContextPush_(**(_QWORD **)(a1 + 40), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu] contains a reference to .output_node, which must be listed in .nodes before its use."), v5, v6, v7, v8, v9, **(_QWORD **)(a1 + 48));
    }
    return -1;
  }
  else
  {
    v10 = std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(*(_QWORD **)(a1 + 56), &v20);
    if (v10)
    {
      result = v10[3];
      if (result < **(_QWORD **)(a1 + 32))
        return result;
      v17 = *(_BYTE **)(a1 + 16);
      if (!*v17)
      {
        v18 = *(_BYTE **)(a1 + 8);
        if (!*v18)
        {
          *v17 = 1;
          if (!*v18)
            _MTLMessageContextPush_(**(_QWORD **)(a1 + 40), 8, (uint64_t)CFSTR("functionGraphs[%lu].nodes[%lu] contains a reference to .nodes[%lu], which must be listed before its use."), v11, v12, v13, v14, v15, **(_QWORD **)(a1 + 48));
        }
      }
    }
    else if (a2 && **(_BYTE **)(a1 + 8))
    {
      return objc_msgSend(a2, "indexOfObject:", v20);
    }
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

dispatch_queue_t ___ZL26getCompilePerformanceQueuev_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create(0, 0);
  getCompilePerformanceQueue(void)::_compilePerformanceStatsQueue = (uint64_t)result;
  return result;
}

void ___ZL31getCompilePerformanceDictionaryv_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  getCompilePerformanceDictionary(void)::_compilePerformanceStatistics = (uint64_t)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v0 = MTLCompileTimeStatisticsKeyLibrariesFromSource;
  v1 = MTLCompileTimeStatisticsKeyDynamicLibraries;
  v2 = MTLCompileTimeStatisticsKeyBinaryFunctions;
  v3 = operator new(0x18uLL);
  v4 = 0;
  *v3 = v0;
  v3[1] = v1;
  v3[2] = v2;
  do
    objc_msgSend((id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0C99DE8], "array"), v3[v4++]);
  while (v4 != 3);
  v5 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  objc_msgSend((id)getCompilePerformanceDictionary(void)::_compilePerformanceStatistics, "setObject:forKey:", v5, MTLCompileTimeStatisticsKeyPipelines);
  v6 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  objc_msgSend(v5, "setObject:forKey:", v6, MTLCompileTimeStatisticsKeyPipelinesCompute);
  v7 = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  objc_msgSend(v5, "setObject:forKey:", v7, MTLCompileTimeStatisticsKeyPipelinesRender);
  operator delete(v3);
}

void sub_18273745C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL24addCompileTimeDictionaryP12NSDictionaryP8NSString_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", *(_QWORD *)(a1 + 40));
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice initDefaultLogState]::$_0 &&>>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = **a1;
  result = objc_msgSend(**(id **)v1, "newLogStateWithDescriptor:error:", *(_QWORD *)(**(_QWORD **)v1 + 360), *(_QWORD *)(v1 + 8));
  *(_QWORD *)(**(_QWORD **)v1 + 584) = result;
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice initProgressTracking]::$_1 &&>>(id ****a1)
{
  id **v1;
  char v2;
  id *v3;
  void *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;

  v1 = **a1;
  if ((objc_msgSend((id)objc_msgSend(**v1, "name"), "containsString:", CFSTR("AMD")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend((id)objc_msgSend(**v1, "name"), "containsString:", CFSTR("Intel")))
  {
    v2 = objc_msgSend(**v1, "supportsFamily:", 2002) ^ 1;
  }
  else
  {
    v2 = 0;
  }
  v3 = *v1;
  *((_BYTE *)**v1 + 328) = v2;
  if (*((_BYTE *)*v3 + 328))
  {
    v4 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.Metal"));
    if (!v4)
    {
      v5 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v5)
        std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice initProgressTracking]::$_1 &&>>(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    v13 = objc_msgSend(v4, "URLForResource:withExtension:", CFSTR("MTLECBE"), CFSTR("metallib"));
    if (!v13)
    {
      v14 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (v14)
        std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice initProgressTracking]::$_1 &&>>(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    v26 = 0;
    v22 = (void *)objc_msgSend(**v1, "newLibraryWithURL:error:", v13, &v26);
    v23 = (void *)objc_opt_new();
    v24 = (void *)objc_msgSend(v22, "newFunctionWithName:", CFSTR("progressTrackVertex"));
    objc_msgSend(v23, "setVertexFunction:", v24);

    objc_msgSend(v23, "setRasterizationEnabled:", 0);
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v23, "colorAttachments"), "objectAtIndexedSubscript:", 0), "setPixelFormat:", 13);
    objc_msgSend(v23, "setInputPrimitiveTopology:", 1);
    objc_msgSend(v23, "setLabel:", CFSTR("MTLECBE"));
    *((_QWORD *)**v1 + 42) = objc_msgSend(**v1, "newRenderPipelineStateWithDescriptor:error:", v23, &v26);
    objc_msgSend(v23, "setVertexFunction:", 0);

    v25 = (void *)objc_msgSend(v22, "newFunctionWithName:", CFSTR("progressTrackKernel"));
    *((_QWORD *)**v1 + 43) = objc_msgSend(**v1, "newComputePipelineStateWithFunction:error:", v25, &v26);

  }
}

MTLCompilerConnectionManagerPrivate *std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice getCompilerConnectionManager:]::$_2 &&>>(int ****a1)
{
  int **v1;
  MTLCompilerConnectionManagerPrivate *result;

  v1 = **a1;
  result = MTLCreateCompilerConnectionManager(*v1[1]);
  *(_QWORD *)(*(_QWORD *)*v1 + 312) = result;
  return result;
}

MTLCompilerConnectionManagerPrivate *std::__call_once_proxy[abi:ne180100]<std::tuple<-[_MTLDevice getCompilerConnectionManager:]::$_3 &&>>(int ****a1)
{
  int **v1;
  MTLCompilerConnectionManagerPrivate *result;

  v1 = **a1;
  result = MTLCreateCompilerConnectionManager(*v1[1]);
  *(_QWORD *)(*(_QWORD *)*v1 + 312) = result;
  return result;
}

void MTLCompilerFunctionRequest::setAirScript(uint64_t a1, dispatch_object_t object)
{
  NSObject *v4;

  v4 = *(NSObject **)(a1 + 152);
  if (v4)
    dispatch_release(v4);
  *(_QWORD *)(a1 + 152) = object;
  dispatch_retain(object);
}

__n128 prepareVisibleFunctionHeader(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __n128 result;
  uint64_t v14;
  uint64_t v15;

  v6 = objc_msgSend(a1, "libraryData");
  objc_msgSend(a1, "pluginData");
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 200))(v6, objc_msgSend(a1, "bitCodeOffset", 0), objc_msgSend(a1, "bitCodeFileSize"), &v14, &v15);
  v7 = *a3;
  v8 = v15;
  *(_DWORD *)(a2 + 8) = *a3;
  *(_DWORD *)(a2 + 12) = v8;
  *a3 = v8 + v7;
  v9 = objc_msgSend((id)objc_msgSend(a1, "pluginData"), "length");
  v10 = *a3;
  *(_DWORD *)(a2 + 16) = *a3;
  *(_DWORD *)(a2 + 20) = v9;
  *a3 = v10 + v9;
  objc_msgSend((id)objc_msgSend(a1, "name"), "UTF8String");
  v11 = objc_msgSend((id)objc_msgSend(a1, "name"), "lengthOfBytesUsingEncoding:", 4);
  LODWORD(v6) = v11 + 8;
  *(_DWORD *)a2 = *a3;
  *(_WORD *)(a2 + 4) = v11 + 1;
  *(_WORD *)(a2 + 6) = objc_msgSend(a1, "bitcodeType");
  v12 = objc_msgSend(a1, "bitCodeHash");
  result = *(__n128 *)(v12 + 16);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v12;
  *(__n128 *)(a2 + 40) = result;
  *a3 += v6 & 0xFFFFFFF8;
  return result;
}

dispatch_data_t MTLCompilerStitchingRequest::serializedRequest(MTLCompilerStitchingRequest *this, unsigned int a2, char **a3)
{
  NSObject *v4;
  _DWORD *v5;
  MTLCompilerStitchingRequest *v6;
  _DWORD *v7;
  const char *v8;
  size_t v9;
  unint64_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  size_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  _QWORD *v24;
  size_t v25;
  std::vector<char>::pointer begin;
  void *v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  unint64_t v40;
  int v41;
  size_t v42;
  size_t v43;
  std::vector<char>::pointer v44;
  size_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  size_t v52;
  dispatch_data_t v53;
  NSObject *v54;
  int v55;
  size_t v56;
  size_t v57;
  const void *v58;
  size_t v59;
  int active_platform;
  int v61;
  size_t v62;
  size_t v63;
  uint64_t v64;
  size_t v65;
  size_t v66;
  size_t v67;
  size_t v68;
  const void *v69;
  size_t v70;
  dispatch_data_t v71;
  MTLCompilerStitchingRequest *v73;
  id obj;
  uint64_t v75;
  size_t size_ptr;
  size_t __n;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  std::vector<char> v82;
  uint64_t v83;
  _BYTE v84[128];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    dispatch_release(v4);
    *((_QWORD *)this + 4) = 0;
  }
  v5 = malloc_type_malloc(0x800uLL, 0xFA8FEB0CuLL);
  v6 = this;
  v7 = v5;
  v73 = v6;
  v8 = (const char *)objc_msgSend(*((id *)v6 + 5), "UTF8String");
  *v7 = 1684104992;
  v9 = strlen(v8);
  v10 = v9 + 5;
  if (v9 + 5 <= 3)
    abort();
  v11 = v9;
  v12 = 2048;
  if (v10 >= 0x801)
  {
    do
    {
      if (v12 >> 1 >= ~v12)
        v12 = v9 + 5;
      else
        v12 += v12 >> 1;
    }
    while (v12 < v10);
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      abort();
  }
  memcpy(v7 + 1, v8, v11);
  *((_BYTE *)v7 + v11 + 4) = 0;
  v83 = 0;
  _getForcedAIRVersion((_DWORD *)&v83 + 1, &v83);
  if (v83)
  {
    if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
      abort();
    v13 = v11 + 9;
    if (v12 < v11 + 9)
    {
      if (!v12)
        v12 = 128;
      while (v12 < v13)
      {
        if (v12 >> 1 >= ~v12)
          v12 = v11 + 9;
        else
          v12 += v12 >> 1;
      }
      v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (!v7)
        goto LABEL_276;
    }
    *(_DWORD *)((char *)v7 + v10) = 1634300534;
    if (v13 >= 0xFFFFFFFFFFFFFFFCLL)
      abort();
    v14 = HIDWORD(v83);
    v15 = v11 + 13;
    if (v12 < v11 + 13)
    {
      if (!v12)
        v12 = 128;
      while (v12 < v15)
      {
        if (v12 >> 1 >= ~v12)
          v12 = v11 + 13;
        else
          v12 += v12 >> 1;
      }
      v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (!v7)
        goto LABEL_276;
    }
    *(_DWORD *)((char *)v7 + v13) = v14;
    if (v15 >= 0xFFFFFFFFFFFFFFFCLL)
      abort();
    v16 = v83;
    v10 = v11 + 17;
    if (v12 < v11 + 17)
    {
      if (!v12)
        v12 = 128;
      while (v12 < v10)
      {
        if (v12 >> 1 >= ~v12)
          v12 = v11 + 17;
        else
          v12 += v12 >> 1;
      }
      v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (!v7)
LABEL_276:
        abort();
    }
    *(_DWORD *)((char *)v7 + v15) = v16;
  }
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
    abort();
  v17 = v10 + 4;
  if (v12 < v10 + 4)
  {
    if (!v12)
      v12 = 128;
    while (v12 < v17)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v10 + 4;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      goto LABEL_276;
  }
  *(_DWORD *)((char *)v7 + v10) = 1853189478;
  v18 = objc_msgSend(*((id *)v73 + 6), "count");
  if (v10 >= 0xFFFFFFFFFFFFFFF8)
    abort();
  v19 = v18;
  v20 = v10 + 8;
  if (v12 < v10 + 8)
  {
    if (!v12)
      v12 = 128;
    while (v12 < v20)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v10 + 8;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      goto LABEL_276;
  }
  *(_DWORD *)((char *)v7 + v17) = v19;
  memset(&v82, 0, sizeof(v82));
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  obj = (id)*((_QWORD *)v73 + 6);
  v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v84, 16);
  if (v21)
  {
    v75 = *(_QWORD *)v79;
    do
    {
      for (i = 0; i != v21; ++i)
      {
        if (*(_QWORD *)v79 != v75)
          objc_enumerationMutation(obj);
        v23 = *(void **)(*((_QWORD *)&v78 + 1) + 8 * i);
        v24 = (_QWORD *)objc_msgSend(v23, "libraryData");
        size_ptr = 0;
        __n = 0;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, size_t *, size_t *))(*v24 + 200))(v24, objc_msgSend(v23, "bitCodeOffset"), objc_msgSend(v23, "bitCodeFileSize"), &size_ptr, &__n);
        v25 = __n;
        begin = v82.__begin_;
        if (__n <= v82.__end_ - v82.__begin_)
        {
          if (__n < v82.__end_ - v82.__begin_)
            v82.__end_ = &v82.__begin_[__n];
        }
        else
        {
          std::vector<unsigned char>::__append(&v82, __n - (v82.__end_ - v82.__begin_));
          begin = v82.__begin_;
          v25 = __n;
        }
        (*(void (**)(_QWORD *, std::vector<char>::pointer, size_t, size_t))(*v24 + 208))(v24, begin, size_ptr, v25);
        v27 = (void *)v24[11];
        if (v27)
        {
          v28 = objc_msgSend(v27, "UTF8String");
          if (v20 >= 0xFFFFFFFFFFFFFFFCLL)
            abort();
          v29 = (const char *)v28;
          v30 = v20 + 4;
          if (v12 < v20 + 4)
          {
            if (!v12)
              v12 = 128;
            while (v12 < v30)
            {
              if (v12 >> 1 >= ~v12)
                v12 = v20 + 4;
              else
                v12 += v12 >> 1;
            }
            v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
            if (!v7)
              goto LABEL_267;
          }
          *(_DWORD *)((char *)v7 + v20) = 1953656940;
          v31 = strlen(v29);
          v32 = v31 + 1;
          if (v31 + 1 > -5 - v20)
            abort();
          v33 = v31;
          v20 = v32 + v30;
          if (v12 < v32 + v30)
          {
            if (!v12)
              v12 = 128;
            while (v12 < v20)
            {
              if (v12 >> 1 >= ~v12)
                v12 = v32 + v30;
              else
                v12 += v12 >> 1;
            }
            v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
            if (!v7)
LABEL_267:
              abort();
          }
          memcpy((char *)v7 + v30, v29, v33);
          *((_BYTE *)v7 + v33 + v30) = 0;
        }
        if (v20 >= 0xFFFFFFFFFFFFFFFCLL)
          abort();
        v34 = v20 + 4;
        if (v12 < v20 + 4)
        {
          if (!v12)
            v12 = 128;
          while (v12 < v34)
          {
            if (v12 >> 1 >= ~v12)
              v12 = v20 + 4;
            else
              v12 += v12 >> 1;
          }
          v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7)
            abort();
        }
        *(_DWORD *)((char *)v7 + v20) = 1651007859;
        v35 = objc_msgSend(v23, "bitCodeHash");
        v36 = v20 + 36;
        if (v20 + 36 <= 0x1F)
          abort();
        v37 = (_OWORD *)v35;
        if (v12 < v36)
        {
          if (!v12)
            v12 = 128;
          while (v12 < v36)
          {
            if (v12 >> 1 >= ~v12)
              v12 = v20 + 36;
            else
              v12 += v12 >> 1;
          }
          v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7)
            goto LABEL_260;
        }
        v38 = (_OWORD *)((char *)v7 + v34);
        v39 = v37[1];
        *v38 = *v37;
        v38[1] = v39;
        if (v36 >= 0xFFFFFFFFFFFFFFFCLL)
          abort();
        v40 = v20 + 40;
        if (v12 < v20 + 40)
        {
          if (!v12)
            v12 = 128;
          while (v12 < v40)
          {
            if (v12 >> 1 >= ~v12)
              v12 = v20 + 40;
            else
              v12 += v12 >> 1;
          }
          v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7)
            goto LABEL_260;
        }
        *(_DWORD *)((char *)v7 + v36) = 1651078243;
        if (v40 >= 0xFFFFFFFFFFFFFFFCLL)
          abort();
        v41 = __n;
        v42 = v20 + 44;
        if (v12 < v20 + 44)
        {
          if (!v12)
            v12 = 128;
          while (v12 < v42)
          {
            if (v12 >> 1 >= ~v12)
              v12 = v20 + 44;
            else
              v12 += v12 >> 1;
          }
          v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7)
            goto LABEL_260;
        }
        *(_DWORD *)((char *)v7 + v40) = v41;
        v43 = __n;
        if (-45 - v20 < __n)
          abort();
        v44 = v82.__begin_;
        v20 = __n + v42;
        if (v12 < __n + v42)
        {
          if (!v12)
            v12 = 128;
          while (v12 < v20)
          {
            if (v12 >> 1 >= ~v12)
              v12 = __n + v42;
            else
              v12 += v12 >> 1;
          }
          v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
          if (!v7)
LABEL_260:
            abort();
        }
        memcpy((char *)v7 + v42, v44, v43);
      }
      v21 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v78, v84, 16);
    }
    while (v21);
  }
  if (v20 >= 0xFFFFFFFFFFFFFFFCLL)
    abort();
  v45 = v20 + 4;
  if (v12 < v20 + 4)
  {
    if (!v12)
      v12 = 128;
    while (v12 < v45)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v20 + 4;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      goto LABEL_277;
  }
  *(_DWORD *)((char *)v7 + v20) = 1853189491;
  v46 = (uint64_t *)*((_QWORD *)v73 + 7);
  if (!v46)
  {
    if (v20 >= 0xFFFFFFFFFFFFFFF8)
LABEL_282:
      abort();
    v49 = v20 + 8;
    if (v12 >= v20 + 8)
      goto LABEL_197;
    if (!v12)
      v12 = 128;
    while (v12 < v49)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v20 + 8;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (v7)
    {
LABEL_197:
      *(_DWORD *)((char *)v7 + v45) = 0;
      goto LABEL_198;
    }
LABEL_277:
    abort();
  }
  if (v20 > 0xFFFFFFFFFFFFFFF7)
    goto LABEL_282;
  v48 = *v46;
  v47 = v46[1];
  v49 = v20 + 8;
  if (v12 < v20 + 8)
  {
    if (!v12)
      v12 = 128;
    while (v12 < v49)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v20 + 8;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      goto LABEL_277;
  }
  *(_DWORD *)((char *)v7 + v45) = -858993459 * ((v47 - v48) >> 3);
  if (*(_QWORD *)(*((_QWORD *)v73 + 7) + 8) != **((_QWORD **)v73 + 7))
  {
    v50 = 0;
    v51 = 0;
    do
    {
      if (v49 >= 0xFFFFFFFFFFFFFFFCLL)
        abort();
      v52 = v49 + 4;
      if (v12 < v49 + 4)
      {
        if (!v12)
          v12 = 128;
        while (v12 < v52)
        {
          if (v12 >> 1 >= ~v12)
            v12 = v49 + 4;
          else
            v12 += v12 >> 1;
        }
        v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
        if (!v7)
          abort();
      }
      *(_DWORD *)((char *)v7 + v49) = 1634952050;
      size_ptr = 0;
      __n = 0;
      v53 = dispatch_data_create_map(*(dispatch_data_t *)(**((_QWORD **)v73 + 7) + 40 * v50), (const void **)&__n, &size_ptr);
      if (v49 >= 0xFFFFFFFFFFFFFFF8)
        abort();
      v54 = v53;
      v55 = size_ptr;
      v56 = v49 + 8;
      if (v12 < v49 + 8)
      {
        if (!v12)
          v12 = 128;
        while (v12 < v56)
        {
          if (v12 >> 1 >= ~v12)
            v12 = v49 + 8;
          else
            v12 += v12 >> 1;
        }
        v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
        if (!v7)
          goto LABEL_272;
      }
      *(_DWORD *)((char *)v7 + v52) = v55;
      v57 = size_ptr;
      if (-9 - v49 < size_ptr)
        abort();
      v58 = (const void *)__n;
      v49 = size_ptr + v56;
      if (v12 < size_ptr + v56)
      {
        if (!v12)
          v12 = 128;
        while (v12 < v49)
        {
          if (v12 >> 1 >= ~v12)
            v12 = size_ptr + v56;
          else
            v12 += v12 >> 1;
        }
        v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
        if (!v7)
LABEL_272:
          abort();
      }
      memcpy((char *)v7 + v56, v58, v57);
      dispatch_release(v54);
      v50 = ++v51;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)v73 + 7) + 8) - **((_QWORD **)v73 + 7)) >> 3) > v51);
  }
LABEL_198:
  if (v49 >= 0xFFFFFFFFFFFFFFFCLL)
    abort();
  v59 = v49 + 4;
  if (v12 < v49 + 4)
  {
    if (!v12)
      v12 = 128;
    while (v12 < v59)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v49 + 4;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      goto LABEL_277;
  }
  *(_DWORD *)((char *)v7 + v49) = 1886676589;
  active_platform = dyld_get_active_platform();
  if (v49 >= 0xFFFFFFFFFFFFFFF8)
    abort();
  v61 = active_platform;
  v62 = v49 + 8;
  if (v12 < v49 + 8)
  {
    if (!v12)
      v12 = 128;
    while (v12 < v62)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v49 + 8;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      goto LABEL_275;
  }
  *(_DWORD *)((char *)v7 + v59) = v61;
  if (v49 >= 0xFFFFFFFFFFFFFFF4)
    abort();
  v63 = v49 + 12;
  if (v12 < v49 + 12)
  {
    if (!v12)
      v12 = 128;
    while (v12 < v63)
    {
      if (v12 >> 1 >= ~v12)
        v12 = v49 + 12;
      else
        v12 += v12 >> 1;
    }
    v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
    if (!v7)
      goto LABEL_275;
  }
  *(_DWORD *)((char *)v7 + v62) = 1634888036;
  if (*((_BYTE *)v73 + 88))
  {
    if (v49 <= 0xFFFFFFFFFFFFFFEFLL)
    {
      v64 = *((_QWORD *)v73 + 10);
      v65 = v49 + 16;
      if (v12 >= v49 + 16)
        goto LABEL_294;
      if (!v12)
        v12 = 128;
      while (v12 < v65)
      {
        if (v12 >> 1 >= ~v12)
          v12 = v49 + 16;
        else
          v12 += v12 >> 1;
      }
      v7 = malloc_type_realloc(v7, v12, 0x227314A4uLL);
      if (v7)
      {
LABEL_294:
        *(_DWORD *)((char *)v7 + v63) = v64;
        v68 = *((_QWORD *)v73 + 10);
        if (-17 - v49 < v68)
          abort();
        v69 = (const void *)*((_QWORD *)v73 + 9);
        v66 = v68 + v65;
        if (v12 >= v68 + v65)
          goto LABEL_254;
        v70 = v12 ? v12 : 128;
        while (v70 < v66)
        {
          if (v70 >> 1 >= ~v70)
            v70 = v68 + v65;
          else
            v70 += v70 >> 1;
        }
        v7 = malloc_type_realloc(v7, v70, 0x227314A4uLL);
        if (v7)
        {
LABEL_254:
          memcpy((char *)v7 + v65, v69, v68);
          goto LABEL_257;
        }
      }
LABEL_275:
      abort();
    }
LABEL_286:
    abort();
  }
  if (v49 >= 0xFFFFFFFFFFFFFFF0)
    goto LABEL_286;
  v66 = v49 + 16;
  if (v12 < v49 + 16)
  {
    v67 = v12 ? v12 : 128;
    while (v67 < v66)
    {
      if (v67 >> 1 >= ~v67)
        v67 = v49 + 16;
      else
        v67 += v67 >> 1;
    }
    v7 = malloc_type_realloc(v7, v67, 0x227314A4uLL);
    if (!v7)
      goto LABEL_275;
  }
  *(_DWORD *)((char *)v7 + v63) = 0;
LABEL_257:
  v71 = dispatch_data_create(v7, v66, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
  *((_QWORD *)v73 + 4) = v71;
  if (v82.__begin_)
  {
    v82.__end_ = v82.__begin_;
    operator delete(v82.__begin_);
  }
  return v71;
}

void sub_182739670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;

  if (__p)
    operator delete(__p);
  free(v30);
  _Unwind_Resume(a1);
}

uint64_t CompilerConnection::CompilerConnection(uint64_t a1, int a2, int a3)
{
  NSObject *v4;
  NSObject *v5;

  *(_QWORD *)a1 = off_1E0FE0560;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  atomic_store(0, (unsigned int *)(a1 + 28));
  v4 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  *(_QWORD *)(a1 + 8) = dispatch_queue_create("compiler request queue", v4);
  v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  *(_QWORD *)(a1 + 16) = dispatch_queue_create("compiler reply queue", v5);
  return a1;
}

void CompilerConnection::~CompilerConnection(CompilerConnection *this)
{
  NSObject *v2;
  NSObject *v3;

  *(_QWORD *)this = off_1E0FE0560;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    dispatch_release(v3);
}

void XPCCompilerConnection::XPCCompilerConnection(XPCCompilerConnection *this, int a2)
{
  uint64_t v3;

  v3 = CompilerConnection::CompilerConnection((uint64_t)this, 2, a2);
  *(_QWORD *)v3 = &off_1E0FE0A10;
  *(_WORD *)(v3 + 72) = 256;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *((_QWORD *)this + 8) = dispatch_semaphore_create(10);
  XPCCompilerConnection::setupConnection(this);
}

void sub_182739800(_Unwind_Exception *a1)
{
  CompilerConnection *v1;

  CompilerConnection::~CompilerConnection(v1);
  _Unwind_Resume(a1);
}

void XPCCompilerConnection::setupConnection(XPCCompilerConnection *this)
{
  NSObject *v2;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 7) = xpc_connection_create("com.apple.MTLCompilerService", 0);
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  *((_QWORD *)this + 5) = dispatch_queue_create("compiler cancel queue", v2);
  v3[0] = 0;
  v3[1] = 0;
  MEMORY[0x186DACB50](v3);
  xpc_connection_set_instance();
  xpc_connection_set_event_handler(*((xpc_connection_t *)this + 7), &__block_literal_global_6);
  xpc_connection_resume(*((xpc_connection_t *)this + 7));
}

const char *XPCCompilerConnection::cancelConnection(XPCCompilerConnection *this)
{
  NSObject *v2;
  _QWORD block[5];

  if (*((_QWORD *)this + 7))
  {
    v2 = *((_QWORD *)this + 5);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN21XPCCompilerConnection16cancelConnectionEv_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = this;
    dispatch_sync(v2, block);
  }
  if (*((_QWORD *)this + 6))
    return (const char *)*((_QWORD *)this + 6);
  else
    return "<unknown reason>";
}

void ___ZN21XPCCompilerConnection16cancelConnectionEv_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 56))
  {
    *(_QWORD *)(v1 + 48) = xpc_connection_copy_invalidation_reason();
    xpc_connection_cancel(*(xpc_connection_t *)(v1 + 56));
    xpc_release(*(xpc_object_t *)(v1 + 56));
    *(_QWORD *)(v1 + 56) = 0;
  }
}

uint64_t XPCCompilerConnection::setupSandbox(XPCCompilerConnection *this)
{
  int v1;

  v1 = (int)this;
  if (XPCCompilerConnection::setupSandbox(unsigned char)::onceToken != -1)
    dispatch_once(&XPCCompilerConnection::setupSandbox(unsigned char)::onceToken, &__block_literal_global_25);
  if (v1 == 2)
    return XPCCompilerConnection::setupSandbox(unsigned char)::gpuArchiverSandboxToken;
  if (v1 == 1)
    return XPCCompilerConnection::setupSandbox(unsigned char)::fromSourceSandboxTokens;
  return 0;
}

void ___ZN21XPCCompilerConnection12setupSandboxEh_block_invoke()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *__p[2];
  char v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  XPCCompilerConnection::setupSandbox(unsigned char)::fromSourceSandboxTokens = (uint64_t)xpc_array_create(0, 0);
  XPCCompilerConnection::setupSandbox(unsigned char)::gpuArchiverSandboxToken = (uint64_t)xpc_array_create(0, 0);
  v0 = objc_msgSend((id)MTLGetModulesCachePath(), "UTF8String");
  v1 = (char *)objc_msgSend((id)MTLGetGPUArchiverCachePath(), "UTF8String");
  MTLGetCompilerWorkingDir(__p);
  if (v0)
    v2 = sandbox_extension_issue_file();
  else
    v2 = 0;
  v10[0] = v2;
  if (v9 < 0)
  {
    if (__p[1])
    {
LABEL_8:
      v3 = sandbox_extension_issue_file();
      goto LABEL_10;
    }
  }
  else if (v9)
  {
    goto LABEL_8;
  }
  v3 = 0;
LABEL_10:
  v10[1] = v3;
  if (v1)
    v1 = (char *)sandbox_extension_issue_file();
  for (i = 0; i != 2; ++i)
  {
    v5 = (void *)v10[i];
    if (v5)
    {
      v6 = xpc_string_create((const char *)v10[i]);
      xpc_array_append_value((xpc_object_t)XPCCompilerConnection::setupSandbox(unsigned char)::fromSourceSandboxTokens, v6);
      xpc_release(v6);
      free(v5);
    }
  }
  if (v1)
  {
    v7 = xpc_string_create(v1);
    xpc_array_append_value((xpc_object_t)XPCCompilerConnection::setupSandbox(unsigned char)::gpuArchiverSandboxToken, v7);
    xpc_release(v7);
    free(v1);
  }
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_182739BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XPCCompilerConnection::~XPCCompilerConnection(XPCCompilerConnection *this)
{
  void *v2;
  NSObject *v3;
  NSObject *v4;

  *(_QWORD *)this = &off_1E0FE0A10;
  if (*((_QWORD *)this + 7))
  {
    xpc_connection_kill();
    v2 = (void *)*((_QWORD *)this + 7);
    if (v2)
    {
      xpc_release(v2);
      *((_QWORD *)this + 7) = 0;
    }
  }
  v3 = *((_QWORD *)this + 8);
  if (v3)
    dispatch_release(v3);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    dispatch_release(v4);
  free(*((void **)this + 6));
  CompilerConnection::~CompilerConnection(this);
}

{
  XPCCompilerConnection::~XPCCompilerConnection(this);
  JUMPOUT(0x186DABFBCLL);
}

void XPCCompilerConnection::DispatchLogReplayRequest(XPCCompilerConnection *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v10;
  uint8_t v11[15];
  BOOL v12;

  v10 = _MTLIsInternalBuild();
  if (a2 && v10)
  {
    if (XPCCompilerConnection::checkConnectionActive(a1, &v12))
    {
      if (a5)
        XPCCompilerConnection::BuildRequestInternal(a1, a2, a3, a4, 0, 1, &__block_literal_global_27);
      else
        (*(void (**)(XPCCompilerConnection *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, void *))(*(_QWORD *)a1 + 16))(a1, a2, a3, a4, 0, 0, &__block_literal_global_27);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_182636000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "MTLCompiler: could not save replay log because compiler service was unreachable", v11, 2u);
    }
  }
}

void ___ZN21XPCCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      ___ZN21XPCCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectb_block_invoke_cold_1(a2, v3, v4, v5, v6, v7, v8, v9);
  }
}

BOOL XPCCompilerConnection::checkConnectionActive(XPCCompilerConnection *this, BOOL *a2)
{
  xpc_object_t v4;
  uint64_t v5;
  unsigned int v6;
  objc_class *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  Class Class;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  double v22;

  *a2 = 1;
  if (!*((_QWORD *)this + 7))
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    XPCCompilerConnection::checkConnectionActive(result, v14, v15, v16, v17, v18, v19, v20);
    return 0;
  }
  v4 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uint64(v4, "requestType", 9uLL);
  v5 = mach_absolute_time();
  v6 = 0;
  v7 = (objc_class *)MEMORY[0x1E0C81310];
  v8 = (xpc_object_t)MEMORY[0x1E0C81260];
  do
  {
    if (v6 == 5)
    {
      sleep(1u);
      if (*((_BYTE *)this + 73))
        goto LABEL_7;
    }
    else
    {
      if (*((_BYTE *)this + 73))
      {
LABEL_7:
        v9 = MTLCompiler_is_waiting_for_XPC_service_to_start(*((xpc_connection_t *)this + 7), v4);
        *((_BYTE *)this + 73) = 0;
        goto LABEL_11;
      }
      if (!v6)
      {
        v10 = MTLCompiler_is_waiting_for_XPC_service_to_start(*((xpc_connection_t *)this + 7), v4);
        goto LABEL_10;
      }
    }
    v10 = xpc_connection_send_message_with_reply_sync(*((xpc_connection_t *)this + 7), v4);
LABEL_10:
    v9 = v10;
LABEL_11:
    Class = object_getClass(v9);
    if (Class == v7)
    {
      if (v9 == v8)
      {
        v21 = XPCCompilerConnection::cancelConnection(this);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
          XPCCompilerConnection::checkConnectionActive((uint64_t)v21);
        xpc_release(MEMORY[0x1E0C81260]);
        xpc_release(v4);
        goto LABEL_27;
      }
      *a2 = 0;
    }
    else
    {
      *a2 = 0;
      *((_BYTE *)this + 72) = xpc_dictionary_get_BOOL(v9, "ProbGuardMalloc");
    }
    xpc_release(v9);
    if (Class != v7)
      break;
  }
  while (v6++ < 9);
  xpc_release(v4);
  if (Class != v7)
    return 1;
LABEL_27:
  v22 = deltaInMilliseconds(v5);
  result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
  if (result)
  {
    XPCCompilerConnection::checkConnectionActive(v22);
    return 0;
  }
  return result;
}

void XPCCompilerConnection::reportError(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  NSObject *v5;
  _QWORD block[6];
  char v7;

  if (a2)
  {
    if (a5)
      MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(a4);
    else
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a4 + 16))(a4, 2, 0, 0, a3);
  }
  else
  {
    v5 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN21XPCCompilerConnection11reportErrorEbPKcU13block_pointerFvjPKvmS1_Eb_block_invoke;
    block[3] = &unk_1E0FE36B0;
    v7 = a5;
    block[4] = a4;
    block[5] = a3;
    dispatch_async(v5, block);
  }
}

uint64_t MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, const char *))(a1 + 16))(a1, 1, 0, 0, "Compiler encountered XPC_ERROR_CONNECTION_INVALID (is the OS shutting down?)");
}

uint64_t ___ZN21XPCCompilerConnection11reportErrorEbPKcU13block_pointerFvjPKvmS1_Eb_block_invoke(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
    return MTLCompiler_encountered_XPC_ERROR_CONNECTION_INVALID(v3);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v3 + 16))(v3, 2, 0, 0, *(_QWORD *)(a1 + 40));
}

uint64_t newLogReplayRequest(_DWORD *a1, const char *a2, NSObject *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v16;
  NSObject *v17;
  size_t v18;
  uint64_t v19;
  size_t v20;
  const char *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  NSObject *v31;
  void *__p;
  NSObject *v34;
  NSObject *object;
  void *context;
  int v37;
  int v38;
  size_t size_ptr;
  void *buffer_ptr;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;

  if (!_MTLIsInternalBuild())
    return 0;
  v8 = MEMORY[0x186DAC640]();
  v9 = MTLAtomicIncrement(&gDiagnosticLogIndex);
  v10 = (char *)MTLGetProcessName();
  std::string::basic_string[abi:ne180100]<0>(&v42, v10);
  v11 = std::string::append(&v42, "_data_");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v41, v9);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v41;
  else
    v13 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    size = v41.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v43, (const std::string::value_type *)v13, size);
  v44 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v38 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v16 = v44.__r_.__value_.__l.__size_;
  v43.__r_.__value_.__r.__words[0] = 0;
  v17 = (*(uint64_t (**)(_DWORD *, uint64_t, std::string *))(*(_QWORD *)a1 + 16))(a1, a4, &v43);
  v42.__r_.__value_.__r.__words[0] = 0;
  v41.__r_.__value_.__r.__words[0] = 0;
  if (a3)
  {
    object = dispatch_data_create_map(a3, (const void **)&v42.__r_.__value_.__l.__data_, (size_t *)&v41);
    v18 = v41.__r_.__value_.__r.__words[0];
  }
  else
  {
    v18 = 0;
    object = 0;
  }
  size_ptr = 0;
  buffer_ptr = 0;
  v34 = dispatch_data_create_map(v17, (const void **)&buffer_ptr, &size_ptr);
  v20 = size_ptr;
  context = (void *)v8;
  if (a2)
  {
    v21 = a2;
    v22 = strlen(a2) + 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
  }
  v37 = a1[2];
  v23 = v18 + size_ptr + v22 + 28;
  v24 = v23 + v16 + 17;
  v25 = malloc_type_malloc(v24, 0x100004077774924uLL);
  *v25 = v16 + 1;
  __p = (void *)v44.__r_.__value_.__r.__words[0];
  if (v38 >= 0)
    v26 = &v44;
  else
    v26 = (std::string *)v44.__r_.__value_.__r.__words[0];
  memcpy(v25 + 1, v26, v16 + 1);
  *(_QWORD *)((char *)v25 + v16 + 9) = v23;
  *(_QWORD *)((char *)v25 + v16 + 17) = v22;
  v27 = v16 + 25;
  memcpy((char *)v25 + v27, v21, v22);
  *(_QWORD *)((char *)v25 + v22 + v27) = v18;
  v28 = v22 + v27 + 8;
  memcpy((char *)v25 + v28, v42.__r_.__value_.__l.__data_, v18);
  v29 = (char *)v25 + v28 + v18;
  *(_DWORD *)v29 = v37;
  *(_QWORD *)(v29 + 4) = v20;
  memcpy(v29 + 12, buffer_ptr, v20);
  v19 = operator new();
  *(_QWORD *)v19 = &off_1E0FE05F0;
  *(_DWORD *)(v19 + 8) = 8;
  v30 = dispatch_data_create(v25, v24, 0, 0);
  v31 = v30;
  if (v30)
    dispatch_retain(v30);
  *(_QWORD *)(v19 + 16) = v31;
  if (object)
    dispatch_release(object);
  dispatch_release(v34);
  dispatch_release(v31);
  buffer_ptr = 0;
  free(v25);
  if (v38 < 0)
    operator delete(__p);
  objc_autoreleasePoolPop(context);
  return v19;
}

void sub_18273A3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a15 < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(exception_object);
}

BOOL ___ZN21XPCCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2(uint64_t a1)
{
  return XPCCompilerConnection::BuildRequestInternal(*(_QWORD *)(a1 + 48), *(int **)(a1 + 56), *(const char **)(a1 + 64), *(NSObject **)(a1 + 32), *(_DWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 76), *(_QWORD *)(a1 + 40));
}

void MonolithicCompilerConnection::MonolithicCompilerConnection(MonolithicCompilerConnection *this, int a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)CompilerConnection::CompilerConnection((uint64_t)this, 4, a2);
  *v2 = &off_1E0FE1348;
  v2[5] = 0;
  v2[6] = 0;
}

void MonolithicCompilerConnection::~MonolithicCompilerConnection(MonolithicCompilerConnection *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E0FE1348;
  (*(void (**)(_QWORD))(*((_QWORD *)this + 5) + 16))(*((_QWORD *)this + 6));
  v2 = (void **)*((_QWORD *)this + 5);
  if (v2)
  {
    CompilerPluginInterface::~CompilerPluginInterface(v2);
    MEMORY[0x186DABFBC]();
  }
  CompilerConnection::~CompilerConnection(this);
}

{
  MonolithicCompilerConnection::~MonolithicCompilerConnection(this);
  JUMPOUT(0x186DABFBCLL);
}

void MonolithicCompilerConnection::DispatchLogReplayRequest(uint64_t a1, unsigned int *a2, const char *a3, NSObject *a4)
{
  int v8;

  v8 = _MTLIsInternalBuild();
  if (a2)
  {
    if (v8)
      MonolithicCompilerConnection::BuildRequestInternal(a1, a2, a3, a4, (uint64_t)&__block_literal_global_44);
  }
}

void ___ZN28MonolithicCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      ___ZN28MonolithicCompilerConnection24DispatchLogReplayRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObject_block_invoke_cold_1(a2, v3, v4, v5, v6, v7, v8, v9);
  }
}

void MonolithicCompilerConnection::BuildRequestInternal(uint64_t a1, unsigned int *a2, const char *a3, NSObject *a4, uint64_t a5)
{
  int v10;
  CompilerPluginInterface *v11;
  uint64_t (*v12)(_QWORD *);
  char *v13;
  _QWORD *v14;
  int v15;
  NSObject *v16;
  dispatch_data_t v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  size_t v22;
  void *v23;
  _QWORD v24[2];
  uint64_t (*v25)(uint64_t);
  void *v26;
  dispatch_data_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  const char *v32;
  int v33;
  size_t size_ptr;
  void *buffer_ptr;
  void *v36[2];
  char v37;

  if (!*(_QWORD *)(a1 + 48))
  {
    v10 = *(_DWORD *)(a1 + 32);
    v11 = (CompilerPluginInterface *)operator new();
    CompilerPluginInterface::CompilerPluginInterface(v11, v10);
    *(_QWORD *)(a1 + 40) = v11;
    v12 = (uint64_t (*)(_QWORD *))*((_QWORD *)v11 + 1);
    v13 = (char *)MTLGetProcessName();
    v14 = std::string::basic_string[abi:ne180100]<0>(v36, v13);
    *(_QWORD *)(a1 + 48) = v12(v14);
    if (v37 < 0)
      operator delete(v36[0]);
  }
  v15 = MTLAtomicIncrement((unsigned int *)&CompilerConnection::_compileCount);
  v36[0] = 0;
  v16 = (*(uint64_t (**)(unsigned int *, _QWORD, void **))(*(_QWORD *)a2 + 16))(a2, *(unsigned int *)(a1 + 32), v36);
  if (!v16)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, void *))(a5 + 16))(a5, 2, 0, 0, v36[0]);
    (*(void (**)(unsigned int *))(*(_QWORD *)a2 + 8))(a2);
    v20 = (char *)v36[0];
    goto LABEL_11;
  }
  size_ptr = 0;
  buffer_ptr = 0;
  v17 = dispatch_data_create_map(v16, (const void **)&buffer_ptr, &size_ptr);
  if (MTLTraceEnabled())
    kdebug_trace();
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v25 = ___ZN28MonolithicCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvjPKvmS3_E_block_invoke;
  v26 = &unk_1E0FE3748;
  v29 = a5;
  v30 = a1;
  v33 = v15;
  v31 = a2;
  v32 = a3;
  v27 = v17;
  v28 = a4;
  if (a3)
  {
    v22 = 0;
    v23 = 0;
    v18 = dispatch_data_create_map(a4, (const void **)&v23, &v22);
    v19 = (*(uint64_t (**)(_QWORD, const char *, void *, size_t))(*(_QWORD *)(a1 + 40) + 32))(*(_QWORD *)(a1 + 48), a3, v23, v22);
    dispatch_release(v18);
    if ((_DWORD)v19 == -1)
    {
      v21 = 0;
      asprintf_l(&v21, 0, "- Could not load compiler plugin at %s", a3);
      ((void (*)(_QWORD *, uint64_t, _QWORD, _QWORD, char *))v25)(v24, 2, 0, 0, v21);
      v20 = v21;
LABEL_11:
      free(v20);
      return;
    }
  }
  else
  {
    v19 = 0xFFFFFFFFLL;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, void *, size_t, _QWORD *))(*(_QWORD *)(a1 + 40) + 24))(*(_QWORD *)(a1 + 48), v19, a2[2], buffer_ptr, size_ptr, v24);
}

void sub_18273A7BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN28MonolithicCompilerConnection20BuildRequestInternalEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  if (MTLTraceEnabled())
    kdebug_trace();
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void MonolithicCompilerConnection::BuildRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  NSObject *v8;
  _QWORD v9[9];
  _QWORD block[9];

  v8 = *(NSObject **)(a1 + 8);
  if ((a6 & 1) != 0)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2;
    v9[3] = &unk_1E0FE3770;
    v9[6] = a1;
    v9[7] = a2;
    v9[8] = a3;
    v9[4] = a4;
    v9[5] = a7;
    dispatch_sync(v8, v9);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke;
    block[3] = &unk_1E0FE3770;
    block[6] = a1;
    block[7] = a2;
    block[8] = a3;
    block[4] = a4;
    block[5] = a7;
    dispatch_async(v8, block);
  }
}

void ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke(uint64_t a1)
{
  MonolithicCompilerConnection::BuildRequestInternal(*(_QWORD *)(a1 + 48), *(unsigned int **)(a1 + 56), *(const char **)(a1 + 64), *(NSObject **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void ___ZN28MonolithicCompilerConnection12BuildRequestEP18MTLCompilerRequestPKcPU27objcproto16OS_dispatch_data8NSObjectibU13block_pointerFvjPKvmS3_E_block_invoke_2(uint64_t a1)
{
  MonolithicCompilerConnection::BuildRequestInternal(*(_QWORD *)(a1 + 48), *(unsigned int **)(a1 + 56), *(const char **)(a1 + 64), *(NSObject **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(MTLCompilerConnectionManagerPrivate *this)
{
  uint64_t result;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZN35MTLCompilerConnectionManagerPrivate25getCompilerProcessesCountEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  if (MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::onceToken != -1)
    dispatch_once(&MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::onceToken, block);
  result = *((unsigned int *)this + 4);
  if ((_DWORD)result != MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::result)
    MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::result = *((_DWORD *)this + 4);
  return result;
}

uint64_t ___ZN35MTLCompilerConnectionManagerPrivate25getCompilerProcessesCountEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  char *v3;
  uint64_t result;
  int v5;
  int v6;
  int v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 16);
  v3 = getenv("MTL_MAX_COMPILER_PROCESSES");
  if (!v3)
    v3 = "0";
  result = strtol(v3, 0, 0);
  if (v2 >= 1)
    v5 = v2;
  else
    v5 = result;
  if (v2 == 2)
    v6 = result;
  else
    v6 = v5;
  if (v2 != (_DWORD)result && (_DWORD)result != 0)
    v5 = v6;
  if (v5 >= 1)
    v8 = v5;
  else
    v8 = 2;
  if (v5 <= 64)
    v9 = v8;
  else
    v9 = 64;
  MTLCompilerConnectionManagerPrivate::getCompilerProcessesCount(void)::result = v9;
  *(_DWORD *)(v1 + 16) = v9;
  return result;
}

uint64_t MTLGetDefaultCompilerProcessesCount()
{
  return 2;
}

uint64_t MTLGetMaximumCompilerProcessesCount()
{
  return 64;
}

uint64_t MTLGetOptimalCompilerProcessesCount()
{
  return 2;
}

void std::shared_ptr<CompilerConnection>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void MTLCompilerConnectionManagerPrivate::~MTLCompilerConnectionManagerPrivate(MTLCompilerConnectionManagerPrivate *this)
{
  NSObject *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t i;
  std::__shared_weak_count *v12;
  uint64_t j;
  void *v14;

  *(_QWORD *)this = &off_1E0FE1478;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = v3 + 16 * v4;
      v7 = 16 * v4;
      free(*(void **)v6);
      *(_QWORD *)(v3 + v7) = 0;
      v10 = *(NSObject **)(v6 + 8);
      v9 = (_QWORD *)(v6 + 8);
      v8 = v10;
      if (v10)
        dispatch_release(v8);
      *v9 = 0;
      v4 = v5;
      v3 = *((_QWORD *)this + 4);
      ++v5;
    }
    while (v4 < (*((_QWORD *)this + 5) - v3) >> 4);
  }
  for (i = 2096; i != 1072; i -= 16)
  {
    v12 = *(std::__shared_weak_count **)((char *)this + i);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
  for (j = 1064; j != 40; j -= 16)
    std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)this + j);
  v14 = (void *)*((_QWORD *)this + 4);
  if (v14)
  {
    *((_QWORD *)this + 5) = v14;
    operator delete(v14);
  }
}

{
  MTLCompilerConnectionManagerPrivate::~MTLCompilerConnectionManagerPrivate(this);
  JUMPOUT(0x186DABFBCLL);
}

__n128 __Block_byref_object_copy__53(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__54(uint64_t a1)
{
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 48);
}

_QWORD *std::shared_ptr<CompilerConnection>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void MTLCompilerConnectionManagerPrivate::setCompilerProcessesCount(MTLCompilerConnectionManagerPrivate *this, int a2)
{
  NSObject *v2;
  _QWORD v3[5];
  int v4;

  if (!*((_BYTE *)this + 12))
  {
    v2 = *((_QWORD *)this + 3);
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = ___ZN35MTLCompilerConnectionManagerPrivate25setCompilerProcessesCountEj_block_invoke;
    v3[3] = &__block_descriptor_44_e5_v8__0l;
    v3[4] = this;
    v4 = a2;
    dispatch_sync(v2, v3);
  }
}

void ___ZN35MTLCompilerConnectionManagerPrivate25setCompilerProcessesCountEj_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(v1 + 16);
  v3 = *(int *)(a1 + 40);
  *(_DWORD *)(v1 + 16) = v3;
  if ((int)v3 <= (int)v2)
  {
    if ((int)v3 < (int)v2)
    {
      v9 = v1 + 56;
      v10 = v1 + 1080;
      do
      {
        v11 = (uint64_t *)(v9 + 16 * v3);
        v12 = *v11;
        if (*v11)
        {
          v13 = v11[1];
          if (v13)
          {
            v14 = (unint64_t *)(v13 + 16);
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          v16 = (_QWORD *)(v10 + 16 * v3);
          v17 = (std::__shared_weak_count *)v16[1];
          *v16 = v12;
          v16[1] = v13;
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          std::shared_ptr<CompilerConnection>::reset[abi:ne180100]((_QWORD *)(v9 + 16 * v3));
        }
        ++v3;
      }
      while ((_DWORD)v2 != (_DWORD)v3);
    }
  }
  else
  {
    do
    {
      v4 = (_QWORD *)(v1 + 1080 + 16 * v2);
      v18 = 0uLL;
      v5 = (std::__shared_weak_count *)v4[1];
      if (v5)
      {
        *((_QWORD *)&v18 + 1) = std::__shared_weak_count::lock(v5);
        if (*((_QWORD *)&v18 + 1))
          *(_QWORD *)&v18 = *v4;
      }
      std::shared_ptr<std::unordered_map<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*,UnorderedContainerHash,UnorderedContainerHash,std::allocator<std::pair<MTLUINT256_t const,NSObject  {objcproto16OS_dispatch_data}*>>>>::operator=[abi:ne180100](v1 + 56 + 16 * v2, &v18);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
      if (*((_QWORD *)&v18 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
}

void MTLCompilerStitchingRequest::~MTLCompilerStitchingRequest(MTLCompilerStitchingRequest *this)
{
  MTLCompilerStitchingRequest::~MTLCompilerStitchingRequest(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;

  *(_QWORD *)this = &off_1E0FDEF60;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    dispatch_release(v2);
    *((_QWORD *)this + 4) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 9) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)

  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)this + 56);
  *(_QWORD *)this = &off_1E0FE05F0;
  v6 = *((_QWORD *)this + 2);
  if (v6)
    dispatch_release(v6);
}

uint64_t MTLCompilerRequest::serializedRequest(MTLCompilerRequest *this, unsigned int a2, char **a3)
{
  return *((_QWORD *)this + 2);
}

void CompilerPluginInterface::~CompilerPluginInterface(void **this)
{
  void *v1;

  v1 = *this;
  if (v1)
    dlclose(v1);
}

void CompilerPluginInterface::CompilerPluginInterface(CompilerPluginInterface *this, int a2)
{
  const char *v3;
  const char *v4;
  void *v5;
  char *v6;

  *((_DWORD *)this + 10) = a2;
  v3 = "/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32023/MTLCompiler";
  if (a2 != 32023)
    v3 = 0;
  if (a2 == 32024)
    v4 = "/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32024/MTLCompiler";
  else
    v4 = v3;
  v5 = dlopen(v4, 5);
  *(_QWORD *)this = v5;
  if (v5)
  {
    *((_QWORD *)this + 1) = dlsym(v5, "MTLCodeGenServiceCreate");
    *((_QWORD *)this + 2) = dlsym(*(void **)this, "MTLCodeGenServiceDestroy");
    *((_QWORD *)this + 3) = dlsym(*(void **)this, "MTLCodeGenServiceBuildRequest");
    *((_QWORD *)this + 4) = dlsym(*(void **)this, "MTLCodeGenServiceSetPluginPath");
  }
  else
  {
    v6 = dlerror();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      CompilerPluginInterface::CompilerPluginInterface((uint64_t)v6);
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 8) = 0u;
  }
}

char *std::vector<MTLBuildBinaryRequest>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MTLBuildBinaryRequest>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MTLBuildBinaryRequest>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

void std::__shared_ptr_emplace<MonolithicCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MonolithicCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<MonolithicCompilerConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<XPCCompilerConnection,std::allocator<XPCCompilerConnection>,int,void>@<X0>(int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<XPCCompilerConnection>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<XPCCompilerConnection>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_18273B158(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<XPCCompilerConnection>::__shared_ptr_emplace[abi:ne180100]<int,std::allocator<XPCCompilerConnection>,0>(_QWORD *a1, int *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E0FE2010;
  XPCCompilerConnection::XPCCompilerConnection((XPCCompilerConnection *)(a1 + 3), *a2);
  return a1;
}

void sub_18273B1A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XPCCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XPCCompilerConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<XPCCompilerConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 8u);
}

void sub_18273B768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFString *MTLTextureTypeString(unint64_t a1)
{
  if (a1 > 9)
    return CFSTR("Unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_1E0FE3A40 + a1);
}

const __CFString *MTLCPUCacheModeString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Invalid");
  if (!a1)
    v1 = CFSTR("MTLCPUCacheModeDefaultCache");
  if (a1 == 1)
    return CFSTR("MTLCPUCacheModeWriteCombined");
  else
    return v1;
}

const __CFString *MTLStorageModeString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Invalid");
  else
    return (const __CFString *)*((_QWORD *)&off_1E0FE3A20 + a1);
}

void *MTLTextureUsageString(uint64_t a1)
{
  void *v2;
  void *v3;
  _BOOL4 v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v3 = v2;
  if (!a1)
  {
    objc_msgSend(v2, "appendString:", CFSTR("MTLTextureUsageUnknown"));
    return v3;
  }
  v4 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "appendFormat:", CFSTR("%s%@"), "", CFSTR("MTLTextureUsageShaderRead"));
  if ((a1 & 2) != 0)
  {
    if ((a1 & 1) != 0)
      v5 = " ";
    else
      v5 = "";
    objc_msgSend(v3, "appendFormat:", CFSTR("%s%@"), v5, CFSTR("MTLTextureUsageShaderWrite"));
    v4 = 0;
    if ((a1 & 4) == 0)
    {
LABEL_6:
      if ((a1 & 0x10) == 0)
        goto LABEL_7;
      goto LABEL_19;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_6;
  }
  if (v4)
    v6 = "";
  else
    v6 = " ";
  objc_msgSend(v3, "appendFormat:", CFSTR("%s%@"), v6, CFSTR("MTLTextureUsageRenderTarget"));
  v4 = 0;
  if ((a1 & 0x10) == 0)
  {
LABEL_7:
    if ((a1 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_19:
  if (v4)
    v7 = "";
  else
    v7 = " ";
  objc_msgSend(v3, "appendFormat:", CFSTR("%s%@"), v7, CFSTR("MTLTextureUsagePixelFormatView"));
  v4 = 0;
  if ((a1 & 0x4000) == 0)
  {
LABEL_8:
    if ((a1 & 0x10000) == 0)
      return v3;
    goto LABEL_27;
  }
LABEL_23:
  if (v4)
    v8 = "";
  else
    v8 = " ";
  objc_msgSend(v3, "appendFormat:", CFSTR("%s%@"), v8, CFSTR("MTLTextureUsageNoConcurrentAccess"));
  v4 = 0;
  if ((a1 & 0x10000) != 0)
  {
LABEL_27:
    if (v4)
      v9 = "";
    else
      v9 = " ";
    objc_msgSend(v3, "appendFormat:", CFSTR("%s%@"), v9, CFSTR("MTLTextureUsageBlockWritesOnly"));
  }
  return v3;
}

const __CFString *MTLUnmappedDepthValueString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Invalid");
  if (a1 == 1)
    v1 = CFSTR("MTLUnmappedDepthValueOne");
  if (a1)
    return v1;
  else
    return CFSTR("MTLUnmappedDepthValueZero");
}

const __CFString *MTLTextureCompressionTypeString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Invalid");
  if (a1 == 1)
    v1 = CFSTR("MTLTextureCompressionTypeLossy");
  if (a1)
    return v1;
  else
    return CFSTR("MTLTextureCompressionTypeLossless");
}

void validateMTLTextureType(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 0xA)
    _MTLMessageContextPush_(a2, 4, (uint64_t)CFSTR("type (%lu) is not a valid MTLTextureType."), a4, a5, a6, a7, a8, a1);
}

uint64_t enableTextureUsageUnknownDefault()
{
  char *v0;

  if (!gEnableTextureUsageUnknownDefaultInitialized)
  {
    v0 = getenv("MTL_ENABLE_TEXTURE_USAGE_UNKNOWN_DEFAULT");
    if (v0 && *v0 == 49)
      gEnableTextureUsageUnknownDefault = 1;
    gEnableTextureUsageUnknownDefaultInitialized = 1;
  }
  return gEnableTextureUsageUnknownDefault;
}

void _validateTextureUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (a1)
  {
    v8 = a1 & 0xFFFFFFFFFFFEBFC0;
    if (a2)
    {
      if (v8)
        _MTLMessageContextPush_(a2, 4, (uint64_t)CFSTR("MTLTextureUsage has unknown bits 0x%lx."), a4, a5, a6, a7, a8, a1 & 0xFFFFFFFFFFFEBFC0);
    }
    else if (v8)
    {
      MTLReportFailure(0, "_validateTextureUsage", 360, (uint64_t)CFSTR("MTLTextureUsage has unknown bits 0x%lx."), a5, a6, a7, a8, a1 & 0xFFFFFFFFFFFEBFC0);
    }
  }
}

void _mtlValidateTextureUsage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if ((a1 & 0xFFFFFFFFFFFEBFC0) != 0)
      MTLReportFailure(0, "_validateTextureUsage", 360, (uint64_t)CFSTR("MTLTextureUsage has unknown bits 0x%lx."), a5, a6, a7, a8, a1 & 0xFFFFFFFFFFFEBFC0);
  }
}

uint64_t MTLTextureSwizzleViewSwizzle(unsigned int a1, unsigned int a2)
{
  int32x4_t v2;
  int8x16_t v3;
  int32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;

  v2 = (int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_182819B70);
  v3.i64[0] = 0xFE000000FELL;
  v3.i64[1] = 0xFE000000FELL;
  v4.i64[0] = 0x1000000010;
  v4.i64[1] = 0x1000000010;
  v5.i64[0] = 0xFF000000FFLL;
  v5.i64[1] = 0xFF000000FFLL;
  v6 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v2, v3)), (int8x16_t)v2, (int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a1), (uint32x4_t)vsubq_s32(v4, (int32x4_t)vandq_s8((int8x16_t)vshlq_n_s32(v2, 3uLL), (int8x16_t)vdupq_n_s32(0x7F8u))))), v5), (uint32x4_t)xmmword_182819B80);
  *(int8x8_t *)v6.i8 = vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  return (v6.i32[0] | v6.i32[1]);
}

void *MTLTextureSwizzleString(unsigned int a1)
{
  void *v2;
  unsigned int i;
  void *v4;
  const __CFString *v5;
  uint64_t v7;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  objc_msgSend(v2, "appendFormat:", CFSTR("["));
  for (i = 0; i != 4; ++i)
  {
    switch((char)a1)
    {
      case 0:
        v4 = v2;
        v5 = CFSTR("MTLTextureSwizzleZero");
        goto LABEL_10;
      case 1:
        v4 = v2;
        v5 = CFSTR("MTLTextureSwizzleOne");
        goto LABEL_10;
      case 2:
        v4 = v2;
        v5 = CFSTR("MTLTextureSwizzleRed");
        goto LABEL_10;
      case 3:
        v4 = v2;
        v5 = CFSTR("MTLTextureSwizzleGreen");
        goto LABEL_10;
      case 4:
        v4 = v2;
        v5 = CFSTR("MTLTextureSwizzleBlue");
        goto LABEL_10;
      case 5:
        v4 = v2;
        v5 = CFSTR("MTLTextureSwizzleAlpha");
LABEL_10:
        objc_msgSend(v4, "appendFormat:", v5, v7);
        break;
      default:
        objc_msgSend(v2, "appendFormat:", CFSTR("Unknown(%u)"), a1);
        break;
    }
    if (i <= 2)
      objc_msgSend(v2, "appendFormat:", CFSTR(", "));
    a1 >>= 8;
  }
  objc_msgSend(v2, "appendFormat:", CFSTR("]"));
  return v2;
}

const __CFString *MTLTextureCompressionModeString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Invalid");
  else
    return (const __CFString *)*((_QWORD *)&off_1E0FE3968 + a1);
}

uint64_t MTLGetDisallowedTextureUsagesWhenSwizzling(uint64_t a1, int a2)
{
  if (a2)
    return 0;
  else
    return 6;
}

id _copyIOSurfaceDevice(__IOSurface *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;

  v1 = (void *)IOSurfaceCopyValue(a1, (CFStringRef)*MEMORY[0x1E0CBBFA0]);
  if (!v1)
    return 0;
  v2 = v1;
  if (!objc_msgSend(v1, "objectForKeyedSubscript:", kMetalRegistryID))
    goto LABEL_5;
  v3 = objc_msgSend((id)objc_msgSend(v2, "objectForKeyedSubscript:", kMetalRegistryID), "unsignedLongLongValue");
  v4 = MTLCreateSystemDefaultDevice();
  if (objc_msgSend(v4, "registryID") != v3)
  {

LABEL_5:
    v4 = 0;
  }

  return v4;
}

unint64_t _mtlNumMipmapLevelsForSize(unint64_t a1)
{
  return 64 - __clz(a1);
}

void MTLGetTextureLevelInfoForDevice(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>)
{
  MTLGetTextureLevelInfoForDeviceWithOptions(a1, a2, a3, a4, a5, a6, a7, 0, a8);
}

uint64_t MTLCalculateSourceBufferSizeAndAlignment(void *a1, _QWORD *a2, unint64_t *a3, char a4, uint64_t a5, unint64_t *a6, uint64_t *a7)
{
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  MTLPixelFormatGetInfoForDevice((void *)objc_msgSend(a1, "device"), objc_msgSend(a1, "pixelFormat"), (uint64_t)&v25);
  v13 = *((_QWORD *)&v26 + 1);
  if ((WORD4(v25) & 0x400) != 0)
    v14 = *((_QWORD *)&v27 + 1);
  else
    v14 = 1;
  v15 = objc_msgSend(a1, "sampleCount") * v13;
  v16 = objc_msgSend(a1, "width");
  v17 = (unint64_t)objc_msgSend(a1, "height") >> a4;
  if (v17 <= 1)
    v17 = 1;
  v18 = *a3;
  v19 = a3[1];
  if ((BYTE9(v25) & 4) != 0)
  {
    v20 = v16 >> a4;
    if (v16 >> a4 <= 1)
      v20 = 1;
    if (*a2 + v18 == v20)
      v18 = (v18 + (unint64_t)v27 - 1) / (unint64_t)v27 * v27;
    if (v19 + a2[1] == v17)
      v19 = (v19 + *((_QWORD *)&v27 + 1) - 1) / *((_QWORD *)&v27 + 1) * *((_QWORD *)&v27 + 1);
  }
  result = objc_msgSend(a1, "textureType");
  if (result && (result = objc_msgSend(a1, "textureType"), result != 1))
  {
    v23 = v19 / v14 * a5;
  }
  else
  {
    v22 = v27;
    if ((BYTE9(v25) & 4) == 0)
      v22 = 1;
    v23 = (v18 + v22 - 1) / v22 * v22 * v15;
  }
  *a6 = v23;
  *a7 = v15;
  return result;
}

_QWORD *_MTLAdjustMTLSize@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a5 = *(_OWORD *)a2;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a4 + 9) & 4) != 0)
  {
    if (*(_QWORD *)a2 + *result == *a3)
      *(_QWORD *)a5 = (unint64_t)(*(_QWORD *)a2 + *(_QWORD *)(a4 + 32) - 1)
                    / *(_QWORD *)(a4 + 32)
                    * *(_QWORD *)(a4 + 32);
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 + result[1] == a3[1])
      *(_QWORD *)(a5 + 8) = (unint64_t)(v5 + *(_QWORD *)(a4 + 40) - 1)
                          / *(_QWORD *)(a4 + 40)
                          * *(_QWORD *)(a4 + 40);
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 + result[2] == a3[2])
      *(_QWORD *)(a5 + 16) = (unint64_t)(v6 + *(_QWORD *)(a4 + 48) - 1)
                           / *(_QWORD *)(a4 + 48)
                           * *(_QWORD *)(a4 + 48);
  }
  return result;
}

size_t MTLIOCompressionContextDefaultChunkSize(void)
{
  return 0x10000;
}

MTLIOCompressionContext MTLIOCreateCompressionContext(const char *path, MTLIOCompressionMethod type, size_t chunkSize)
{
  size_t v5;
  int *v6;
  int *v7;
  int v8;
  _QWORD *v10;

  if (chunkSize)
    v5 = chunkSize;
  else
    v5 = 0x10000;
  v6 = (int *)malloc_type_calloc(0x30uLL, 1uLL, 0x4AFC17B0uLL);
  v7 = v6;
  if ((unint64_t)type < (MTLIOCompressionMethodLZBitmap|MTLIOCompressionMethodLZFSE))
  {
    v6[8] = dword_182819C40[type];
    v8 = open(path, 1538);
    *v7 = v8;
    if ((v8 & 0x80000000) == 0)
    {
      if (!chmod(path, 0x1A4u))
      {
        v7[2] = 0;
        *((_QWORD *)v7 + 2) = v5;
        *((_QWORD *)v7 + 3) = 0;
        v10 = (_QWORD *)operator new();
        v10[1] = 0;
        v10[2] = 0;
        *v10 = 0;
        *((_QWORD *)v7 + 5) = v10;
        return v7;
      }
      close(*v7);
    }
  }
  free(v7);
  return 0;
}

void MTLIOCompressionContextAppendData(MTLIOCompressionContext context, const void *data, size_t size)
{
  void **v5;
  const void **v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  const void **v14;
  char *v15;
  char *v16;
  char *v17;

  v5 = (void **)*((_QWORD *)context + 5);
  v6 = (const void **)v5[1];
  v7 = (unint64_t)v5[2];
  if ((unint64_t)v6 >= v7)
  {
    v9 = ((char *)v6 - (_BYTE *)*v5) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v11 = v7 - (_QWORD)*v5;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)(v5 + 2), v12);
    else
      v13 = 0;
    v14 = (const void **)&v13[16 * v9];
    v15 = &v13[16 * v12];
    *v14 = data;
    v14[1] = (const void *)size;
    v8 = v14 + 2;
    v17 = (char *)*v5;
    v16 = (char *)v5[1];
    if (v16 != *v5)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 2;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*v5;
    }
    *v5 = v14;
    v5[1] = v8;
    v5[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = data;
    v6[1] = (const void *)size;
    v8 = v6 + 2;
  }
  v5[1] = v8;
}

MTLIOCompressionStatus MTLIOFlushAndDestroyCompressionContext(MTLIOCompressionContext context)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint8_t *v34;
  uint8_t *v35;
  __int128 **v36;
  int v37;
  off_t v38;
  const void **v39;
  const void **v40;
  size_t v41;
  uint8_t *v42;
  const void *v43;
  size_t v44;
  size_t v45;
  BOOL *v46;
  uint8_t *v47;
  size_t v48;
  ssize_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  MTLIOCompressionStatus v54;
  uint64_t v55;
  void *v56;
  char *__buf;
  uint8_t *src_buffer;
  __int128 **v60;
  char *v61;
  void *__p;
  const void **v63;
  uint64_t v64;
  void *v65;
  __int128 *v66;
  char *v67;
  char *v68;
  char *v69;
  unint64_t v70;

  v68 = 0;
  v69 = 0;
  v70 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v2 = (uint64_t **)*((_QWORD *)context + 5);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    goto LABEL_85;
  v5 = 0;
  __buf = (char *)context + 8;
  v6 = *((_QWORD *)context + 2);
  v7 = *v2;
  do
  {
    v5 += v7[1];
    v7 += 2;
  }
  while (v7 != v4);
  if (v3 == v4)
    goto LABEL_85;
  v8 = 0;
  do
  {
    v9 = *v3;
    if (*v3)
    {
      v10 = v3[1];
      while (1)
      {
        v11 = v9;
        if (v10 < v6)
          break;
        if (v8 >= v67)
        {
          v13 = (v8 - (_BYTE *)v65) >> 4;
          if ((unint64_t)(v13 + 1) >> 60)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v14 = (v67 - (_BYTE *)v65) >> 3;
          if (v14 <= v13 + 1)
            v14 = v13 + 1;
          if ((unint64_t)(v67 - (_BYTE *)v65) >= 0x7FFFFFFFFFFFFFF0)
            v15 = 0xFFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)&v67, v15);
          else
            v16 = 0;
          v17 = (__int128 *)&v16[16 * v13];
          *(_QWORD *)v17 = v11;
          *((_QWORD *)v17 + 1) = v6;
          v19 = (__int128 *)v65;
          v18 = v66;
          v20 = v17;
          if (v66 != v65)
          {
            do
              *--v20 = *--v18;
            while (v18 != v19);
            v18 = (__int128 *)v65;
          }
          v12 = v17 + 1;
          v65 = v20;
          v66 = v17 + 1;
          v67 = &v16[16 * v15];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          *((_QWORD *)v8 + 1) = v6;
          v12 = (__int128 *)(v8 + 16);
        }
        v66 = v12;
        v21 = v69;
        if ((unint64_t)v69 >= v70)
        {
          v22 = std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__push_back_slow_path<std::vector<std::pair<unsigned char *,unsigned long>> const&>((uint64_t *)&v68, (__int128 **)&v65);
        }
        else
        {
          *(_QWORD *)v69 = 0;
          *((_QWORD *)v21 + 1) = 0;
          *((_QWORD *)v21 + 2) = 0;
          std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(v21, (__int128 *)v65, v66, ((char *)v66 - (_BYTE *)v65) >> 4);
          v22 = (uint64_t)(v21 + 24);
        }
        v69 = (char *)v22;
        v5 -= v6;
        v23 = *((_QWORD *)context + 2);
        v8 = (char *)v65;
        v66 = (__int128 *)v65;
        v10 -= v6;
        if (v10)
        {
          v9 = v11 + v6;
          v6 = v23;
          if (v11)
            continue;
        }
        goto LABEL_54;
      }
      if (v8 >= v67)
      {
        v24 = (v8 - (_BYTE *)v65) >> 4;
        if ((unint64_t)(v24 + 1) >> 60)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v25 = (v67 - (_BYTE *)v65) >> 3;
        if (v25 <= v24 + 1)
          v25 = v24 + 1;
        if ((unint64_t)(v67 - (_BYTE *)v65) >= 0x7FFFFFFFFFFFFFF0)
          v26 = 0xFFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>((uint64_t)&v67, v26);
        else
          v27 = 0;
        v28 = &v27[16 * v24];
        *(_QWORD *)v28 = v11;
        *((_QWORD *)v28 + 1) = v10;
        v30 = (__int128 *)v65;
        v29 = v66;
        v31 = v28;
        if (v66 != v65)
        {
          do
          {
            *((_OWORD *)v31 - 1) = *(v29 - 1);
            v31 -= 16;
            --v29;
          }
          while (v29 != v30);
          v29 = (__int128 *)v65;
        }
        v8 = v28 + 16;
        v65 = v31;
        v66 = (__int128 *)(v28 + 16);
        v67 = &v27[16 * v26];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_QWORD *)v8 = v9;
        *((_QWORD *)v8 + 1) = v10;
        v8 += 16;
      }
      v66 = (__int128 *)v8;
      v5 -= v10;
      if (v5)
      {
        v23 = v6 - v10;
      }
      else
      {
        v32 = v69;
        if ((unint64_t)v69 >= v70)
        {
          v33 = std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__push_back_slow_path<std::vector<std::pair<unsigned char *,unsigned long>> const&>((uint64_t *)&v68, (__int128 **)&v65);
        }
        else
        {
          *(_QWORD *)v69 = 0;
          *((_QWORD *)v32 + 1) = 0;
          *((_QWORD *)v32 + 2) = 0;
          std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(v32, (__int128 *)v65, v66, ((char *)v66 - (_BYTE *)v65) >> 4);
          v33 = (uint64_t)(v32 + 24);
        }
        v5 = 0;
        v69 = (char *)v33;
        v23 = *((_QWORD *)context + 2);
        v8 = (char *)v65;
        v66 = (__int128 *)v65;
      }
    }
    else
    {
      v23 = v6;
    }
LABEL_54:
    v3 += 2;
    v6 = v23;
  }
  while (v3 != v4);
  if (v69 == v68)
  {
LABEL_85:
    close(*(_DWORD *)context);
    v55 = *((_QWORD *)context + 5);
    if (v55)
    {
      v56 = *(void **)v55;
      if (*(_QWORD *)v55)
      {
        *(_QWORD *)(v55 + 8) = v56;
        operator delete(v56);
      }
      MEMORY[0x186DABFBC](v55, 0x20C40960023A9);
    }
    free(context);
LABEL_90:
    v54 = MTLIOCompressionStatusError;
    goto LABEL_91;
  }
  v34 = (uint8_t *)malloc_type_malloc(*((_QWORD *)context + 2), 0xB0619479uLL);
  v35 = (uint8_t *)malloc_type_malloc(*((_QWORD *)context + 2), 0xD074F50CuLL);
  v61 = (char *)malloc_type_malloc(v69 - v68, 0x10000406CB41D2EuLL);
  *((_QWORD *)context + 3) = 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3);
  pwrite(*(_DWORD *)context, __buf, 0x18uLL, 0);
  pwrite(*(_DWORD *)context, v61, 24 * *((_QWORD *)context + 3), 24);
  v36 = (__int128 **)v68;
  v60 = (__int128 **)v69;
  if (v68 != v69)
  {
    v37 = 0;
    v38 = 24 * *((_QWORD *)context + 3) + 24;
    src_buffer = v35;
    do
    {
      __p = 0;
      v63 = 0;
      v64 = 0;
      std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>((char *)&__p, *v36, v36[1], v36[1] - *v36);
      v40 = (const void **)__p;
      v39 = v63;
      if (__p == v63)
      {
        v41 = 0;
      }
      else
      {
        v41 = 0;
        v42 = v35;
        do
        {
          v43 = *v40;
          v44 = (size_t)v40[1];
          v40 += 2;
          memcpy(v42, v43, v44);
          v42 += v44;
          v41 += v44;
        }
        while (v40 != v39);
      }
      v35 = src_buffer;
      v45 = compression_encode_buffer(v34, *((_QWORD *)context + 2), src_buffer, v41, 0, (compression_algorithm)*((_DWORD *)context + 8));
      v46 = (BOOL *)&v61[24 * v37];
      v47 = v45 ? v34 : src_buffer;
      v48 = v45 ? v45 : v41;
      *v46 = v45 != 0;
      *((_QWORD *)v46 + 1) = v38;
      *((_QWORD *)v46 + 2) = v48;
      v49 = pwrite(*(_DWORD *)context, v47, v48, v38);
      if (v49 == -1)
      {
        close(*(_DWORD *)context);
        v50 = *((_QWORD *)context + 5);
        if (v50)
        {
          v51 = *(void **)v50;
          if (*(_QWORD *)v50)
          {
            *(_QWORD *)(v50 + 8) = v51;
            operator delete(v51);
          }
          MEMORY[0x186DABFBC](v50, 0x20C40960023A9);
        }
        free(context);
        free(v61);
        free(v34);
        free(src_buffer);
      }
      else
      {
        v38 += v48;
        ++v37;
      }
      if (__p)
      {
        v63 = (const void **)__p;
        operator delete(__p);
      }
      if (v49 == -1)
        goto LABEL_90;
      v36 += 3;
    }
    while (v36 != v60);
  }
  *((_DWORD *)context + 2) = -1159983122;
  pwrite(*(_DWORD *)context, v61, 24 * *((_QWORD *)context + 3), 24);
  pwrite(*(_DWORD *)context, __buf, 0x18uLL, 0);
  close(*(_DWORD *)context);
  v52 = *((_QWORD *)context + 5);
  if (v52)
  {
    v53 = *(void **)v52;
    if (*(_QWORD *)v52)
    {
      *(_QWORD *)(v52 + 8) = v53;
      operator delete(v53);
    }
    MEMORY[0x186DABFBC](v52, 0x20C40960023A9);
  }
  free(context);
  free(v61);
  free(v34);
  free(v35);
  v54 = MTLIOCompressionStatusComplete;
LABEL_91:
  if (v65)
  {
    v66 = (__int128 *)v65;
    operator delete(v65);
  }
  v65 = &v68;
  std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  return v54;
}

void sub_18273DA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char *__p, char *a18, uint64_t a19, char a20,uint64_t a21)
{
  if (__p)
  {
    a18 = __p;
    operator delete(__p);
  }
  __p = &a20;
  std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

MTLIOCompressor *MTLCreateCompressor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return -[MTLIOCompressor initWithType:dst:chunkSize:]([MTLIOCompressor alloc], "initWithType:dst:chunkSize:", a1, a2, a3);
}

_DWORD *MTLIOCreateDecompressionContext(int a1, unint64_t a2)
{
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = malloc_type_malloc(0x78uLL, 0x10300400BF515CFuLL);
  *v4 = a1;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 7) = 850045863;
  pread(a1, v4 + 2, 0x18uLL, 0);
  if (v4[2] == -1159983122)
  {
    v5 = malloc_type_malloc(24 * *((_QWORD *)v4 + 3), 0x10000406CB41D2EuLL);
    *((_QWORD *)v4 + 5) = v5;
    pread(a1, v5, 24 * *((_QWORD *)v4 + 3), 24);
    if (a2 >= 5)
      MTLReleaseAssertionFailure((uint64_t)"MTLIOCreateDecompressionContext", 385, (uint64_t)"0 && \"unsupported compression method\"", 0, v6, v7, v8, v9, v11);
    v4[8] = dword_182819C40[a2];
    *((_QWORD *)v4 + 6) = malloc_type_malloc(*((_QWORD *)v4 + 2), 0xA83483E4uLL);
  }
  else
  {
    free(v4);
    return 0;
  }
  return v4;
}

void MTLIODestroyDecompressionContext(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  free(*(void **)(a1 + 40));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 56));
  free((void *)a1);
}

uint64_t MTLIODecompressionContextStagingBufferSize(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (a3 + a2) % v5;
  v7 = v6 == 0;
  v8 = v5 - v6;
  if (v7)
    v8 = 0;
  v9 = a3 / v5;
  v10 = (v8 + a3 + a2) / v5;
  if (v9 < v10)
  {
    result = 0;
    v11 = *(_QWORD *)(a1 + 40);
    do
      result += *(_QWORD *)(v11 + 24 * v9++ + 16);
    while (v9 != v10);
  }
  return result;
}

uint64_t MTLIODecompressionContextOffset(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * (a3 / *(_QWORD *)(a1 + 16)) + 8);
}

uint64_t MTLIODecompressionContextSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 16);
}

uint64_t MTLIODecompressionContextRead(uint64_t a1, uint8_t *__dst, uint8_t *__buf, size_t __nbyte, size_t a5, unint64_t a6, int a7)
{
  const uint8_t *v9;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  int v22;
  size_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  pthread_mutex_t *v34;
  size_t dst_size;

  v9 = __buf;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = a6 / v12;
  v14 = (a6 + a5) % v12;
  v15 = v12 - v14;
  if (!v14)
    v15 = 0;
  dst_size = *(_QWORD *)(a1 + 16);
  v16 = (v15 + a6 + a5) / v12;
  if (a7)
    pread(*(_DWORD *)a1, __buf, __nbyte, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v13 + 8));
  if (v13 < v16)
  {
    v29 = v14;
    v17 = 0;
    v28 = v16 - 1;
    v18 = dst_size - (a6 - v13 * dst_size);
    if (v18 >= a5)
      v18 = a5;
    v30 = v18;
    v31 = a6 - v13 * dst_size;
    v33 = v13;
    v34 = (pthread_mutex_t *)(a1 + 56);
    v19 = v13;
    v32 = v16;
    while (1)
    {
      v21 = v30;
      v20 = v31;
      if (v19 == v13)
        goto LABEL_12;
      v22 = 0;
      v20 = 0;
      v21 = v29;
      if (!v29)
      {
        v23 = dst_size;
        v24 = __dst;
        goto LABEL_13;
      }
      v23 = dst_size;
      v24 = __dst;
      if (v19 == v28)
      {
LABEL_12:
        v24 = *(uint8_t **)(a1 + 48);
        pthread_mutex_lock(v34);
        v22 = 1;
        v23 = v21;
      }
LABEL_13:
      v25 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v25 + 24 * v19))
        compression_decode_buffer(v24, dst_size, v9, *(_QWORD *)(v25 + 24 * v19 + 16), 0, *(compression_algorithm *)(a1 + 32));
      else
        memcpy(v24, v9, dst_size);
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v19 + 16);
      if (v22)
      {
        memcpy(__dst, &v24[v20], v23);
        pthread_mutex_unlock(v34);
      }
      v17 += v23;
      v9 += v26;
      __dst += v23;
      ++v19;
      v13 = v33;
      if (v19 == v32)
        return v17;
    }
  }
  return 0;
}

void MTLIODecompressionContextValidate(uint64_t a1)
{
  uint64_t v1;
  size_t *v3;
  off_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = (size_t *)(*(_QWORD *)(a1 + 40) + 16);
    v4 = 24;
    while (!*((_BYTE *)v3 - 16))
    {
      v5 = *v3;
      v3 += 3;
      v4 += v5;
      if (!--v1)
        return;
    }
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *v3;
    v8 = malloc_type_malloc(*v3, 0x50C8819DuLL);
    pread(*(_DWORD *)a1, v8, v7, v4);
    compression_decode_buffer(*(uint8_t **)(a1 + 48), v6, (const uint8_t *)v8, v7, 0, *(compression_algorithm *)(a1 + 32));
    free(v8);
  }
}

void std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__push_back_slow_path<std::vector<std::pair<unsigned char *,unsigned long>> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataBlock>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(v11, *a2, a2[1], a2[1] - *a2);
  v15 += 24;
  std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_18273E198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<unsigned char *,unsigned long>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<unsigned char *,unsigned long>>>,std::reverse_iterator<std::vector<std::pair<unsigned char *,unsigned long>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<std::pair<unsigned char *,unsigned long>>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

char *std::vector<std::pair<unsigned char *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<unsigned char *,unsigned long>*,std::pair<unsigned char *,unsigned long>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18273E418(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MTLPipelineLibraryDebugLog(void)
{
  if (MTLPipelineLibraryDebugLog(void)::onceToken != -1)
    dispatch_once(&MTLPipelineLibraryDebugLog(void)::onceToken, &__block_literal_global_8);
  return MTLPipelineLibraryDebugLog(void)::pipelineLibLogObject;
}

os_log_t ___Z26MTLPipelineLibraryDebugLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.Metal", "PipelineLibrary");
  MTLPipelineLibraryDebugLog(void)::pipelineLibLogObject = (uint64_t)result;
  return result;
}

uint64_t MTLPipelineDescriptions::MTLPipelineDescriptions(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 23) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_BYTE *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a2;
  *(_QWORD *)(a1 + 16) = dispatch_queue_create("pipelineDescriptions queue", 0);
  return a1;
}

unsigned __int8 *MTLSerializer::SerializedString::getValue(MTLSerializer::SerializedString *this)
{
  unsigned __int8 *result;
  uint64_t v3;
  unsigned __int8 *v4;

  result = *(unsigned __int8 **)this;
  if (result)
  {
    v3 = *((_QWORD *)this + 1);
    if (!v3)
LABEL_6:
      abort();
    v4 = result;
    while (*v4++)
    {
      if (!--v3)
        goto LABEL_6;
    }
  }
  return result;
}

void MTLPipelineDescriptions::initializeDescriptorHash(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  NSObject *v5;
  _QWORD v6[7];
  int v7;
  int v8;

  v5 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
  v6[3] = &__block_descriptor_64_e5_v8__0l;
  v6[4] = a1;
  v6[5] = a2;
  v7 = a4;
  v8 = a5;
  v6[6] = a3;
  dispatch_sync(v5, v6);
}

_QWORD *SpecialPipelineDescriptorDeserializer::SpecialPipelineDescriptorDeserializer(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_1E0FE1588;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void *MTLPipelineDescriptions::newComputePipelineDescriptor(MTLPipelineDescriptions *this, char *a2, _MTLPipelineCache *a3, NSError **a4)
{
  char *v8;
  _QWORD *v9;
  NSObject *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSError *v20;
  __int128 v22;
  void (**block)(SpecialPipelineDescriptorDeserializer *__hidden);
  uint64_t v24;
  void (*v25)(uint64_t);
  void *v26;
  MTLPipelineDescriptions *v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;

  v8 = (char *)this + 25;
  v9 = (_QWORD *)((char *)this + 72);
  v10 = *((_QWORD *)this + 2);
  block = (void (**)(SpecialPipelineDescriptorDeserializer *__hidden))MEMORY[0x1E0C809B0];
  v24 = 3221225472;
  v25 = ___ZNK23MTLPipelineDescriptions24initializeDescriptorHashEPbRNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN13MTLSerializer29SerializedCompactPropertyListENS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_SA_EEEEEEjj_block_invoke;
  v26 = &__block_descriptor_64_e5_v8__0l;
  v27 = this;
  v28 = v8;
  v30 = 0x600000002;
  v29 = v9;
  dispatch_sync(v10, &block);
  std::string::basic_string[abi:ne180100]<0>(&block, a2);
  v11 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v9, (unsigned __int8 *)&block);
  v12 = v11;
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if (v11)
      goto LABEL_3;
LABEL_6:
    v18 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("compute pipeline %s not found in pipelineLibrary."), a2);
    if (!a4)
      return 0;
    v19 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v18, *MEMORY[0x1E0CB2D50]);
    v20 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v19);
    v17 = 0;
    *a4 = v20;
    return v17;
  }
  operator delete(block);
  if (!v12)
    goto LABEL_6;
LABEL_3:
  v22 = *(_OWORD *)(v12 + 40);
  block = &off_1E0FE1588;
  v24 = (uint64_t)this;
  v25 = (void (*)(uint64_t))a3;
  v17 = MTLPipelineLibrarySerializer::PipelineDescriptorBinaryDeserializer::newComputePipelineDescriptor((uint64_t)&block, (unsigned __int8 **)&v22);
  if (!v17)
    MTLReportFailure(0, "newComputePipelineDescriptor", 375, (uint64_t)CFSTR("invalid compute pipeline descriptor %s in pipeline library"), v13, v14, v15, v16, (uint64_t)a2);
  return v17;
}

void sub_182742260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLPipelineDescriptions::libraryPaths(MTLPipelineDescriptions *this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  unint64_t v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (__int128 *)*((_QWORD *)this + 25);
  v3 = (__int128 *)*((_QWORD *)this + 26);
  if (v2 != v3)
  {
    v5 = 0;
    do
    {
      if (v5 >= a2[2])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v2);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v2);
        v5 += 24;
      }
      a2[1] = v5;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_182742304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_18274256C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void SpecialPipelineDescriptorDeserializer::~SpecialPipelineDescriptorDeserializer(SpecialPipelineDescriptorDeserializer *this)
{
  JUMPOUT(0x186DABFBCLL);
}

void std::vector<MTLPipelineDescriptions::LibraryReference>::__construct_one_at_end[abi:ne180100]<MTLPipelineDescriptions::LibraryReference const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

void sub_182742624(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<MTLPipelineDescriptions::LibraryReference>::__push_back_slow_path<MTLPipelineDescriptions::LibraryReference const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  std::string *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v10[4 * v4 + 3] = *((_QWORD *)a2 + 3);
  v16 = (std::string *)((char *)v11 + 32);
  std::vector<MTLPipelineDescriptions::LibraryReference>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_182742724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,unsigned int,unsigned int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MTLPipelineDescriptions::LibraryReference>,std::reverse_iterator<MTLPipelineDescriptions::LibraryReference*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>,std::reverse_iterator<std::tuple<std::string,unsigned int,unsigned int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::allocate_shared[abi:ne180100]<MTLPipelineDescriptions,std::allocator<MTLPipelineDescriptions>,objc_object  {objcproto9MTLDevice}*&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x100uLL);
  result = std::__shared_ptr_emplace<MTLPipelineDescriptions>::__shared_ptr_emplace[abi:ne180100]<objc_object  {objcproto9MTLDevice}*&,std::allocator<MTLPipelineDescriptions>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_18274285C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MTLPipelineDescriptions>::__shared_ptr_emplace[abi:ne180100]<objc_object  {objcproto9MTLDevice}*&,std::allocator<MTLPipelineDescriptions>,0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1E0FE2048;
  v3 = *a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 47) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 1065353216;
  *(_BYTE *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = v3;
  *(_QWORD *)(a1 + 40) = dispatch_queue_create("pipelineDescriptions queue", 0);
  return a1;
}

void std::__shared_ptr_emplace<MTLPipelineDescriptions>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MTLPipelineDescriptions>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

void sub_182743464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t MTLCaptureEnabled()
{
  return 0;
}

uint64_t MTLCreateSimulatorDevice()
{
  if (MTLCreateSimulatorDevice::onceToken != -1)
    dispatch_once(&MTLCreateSimulatorDevice::onceToken, &__block_literal_global_9);
  return MTLCreateSimulatorDevice::device;
}

void MTLDeviceArrayInitialize(void)
{
  _BOOL4 v0;
  char *v1;
  char *v2;
  BOOL v3;
  int v4;
  const char *v5;
  int v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  char v17;
  void *v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t (*v27)(uint64_t);
  _QWORD *v28;
  uint64_t (*v29)(void *);
  uint64_t v30;

  if (MTLDeviceArrayInitialize(void)::pred != -1)
    dispatch_once(&MTLDeviceArrayInitialize(void)::pred, &__block_literal_global_1180);
  if (initWrapperType(void)::pred != -1)
    dispatch_once(&initWrapperType(void)::pred, &__block_literal_global_1238);
  os_unfair_lock_lock((os_unfair_lock_t)&MTLInitializeInterpose(void)::lock);
  if ((MTLInitializeInterpose(void)::interposeInitialized & 1) != 0)
    goto LABEL_69;
  os_unfair_lock_unlock((os_unfair_lock_t)&MTLInitializeInterpose(void)::lock);
  v0 = 1;
  if (!MTLGetEnvDefault("METAL_CAPTURE_ENABLED", 0) && !MTLGetEnvDefault("MTL_CAPTURE_ENABLED", 0))
  {
    v13 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "objectForInfoDictionaryKey:", CFSTR("MetalCaptureEnabled"));
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_msgSend(v13, "BOOLValue") & 1) == 0)
    {
      v14 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("MetalForceCaptureEnabled"));
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0 || (objc_msgSend(v14, "BOOLValue") & 1) == 0)
        v0 = 0;
    }
  }
  v1 = getenv("MTL_CAPTURE_PATH");
  if (v1)
    v0 = 1;
  if (MTLGetEnvDefault("METAL_LOAD_INTERPOSER", 0))
  {
    v2 = getenv("DYMTL_TOOLS_DYLIB_PATH");
    if (v1)
      v3 = 1;
    else
      v3 = v2 == 0;
    v4 = v3;
    if (!v3)
      v1 = v2;
    if (((v0 | v4 ^ 1) & 1) != 0)
    {
LABEL_21:
      if (v1)
      {
        v5 = v1;
        v6 = 272;
      }
      else
      {
        if ((_MTLIsInternalBuild() & 1) == 0
          && objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "appStoreReceiptURL"), "path"), "rangeOfString:", CFSTR("sandboxReceipt")) == 0x7FFFFFFFFFFFFFFFLL)
        {
          MTLReportFailure(2uLL, "LoadCaptureLayer", 339, (uint64_t)CFSTR("Metal GPU Frame Capture is not allowed for App Store apps, try deploying through TestFlight"), v9, v10, v11, v12, v30);
          v8 = 0;
LABEL_35:
          v7 = 1;
          goto LABEL_36;
        }
        v5 = "/System/Library/PrivateFrameworks/GPUToolsCapture.framework/GPUToolsCapture";
        v6 = 4;
      }
      v8 = dlopen(v5, v6);
      goto LABEL_35;
    }
  }
  else if (v0)
  {
    goto LABEL_21;
  }
  v7 = 0;
  v8 = 0;
LABEL_36:
  v15 = MTLGetEnvDefault("MTL_HUD_ENABLED", 0);
  v16 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "objectForInfoDictionaryKey:", CFSTR("MetalHudEnabled"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v17 = objc_msgSend(v16, "BOOLValue");
  else
    v17 = 0;
  v18 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("MetalForceHudEnabled"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v19 = objc_msgSend(v18, "BOOLValue");
  else
    v19 = 0;
  if (v15)
    v20 = 1;
  else
    v20 = v17;
  if ((v20 & 1) != 0 || v19)
  {
    v25 = dlopen("/usr/lib/libMTLHud.dylib", 4);
    os_unfair_lock_lock((os_unfair_lock_t)&MTLInitializeInterpose(void)::lock);
    if ((MTLInitializeInterpose(void)::interposeInitialized & 1) == 0)
    {
LABEL_54:
      if (v7)
      {
        if (!v8 || (_getWrappedDeviceFn = dlsym(v8, "DYMTLWrapDeviceWithDebugLayer")) == 0)
          MTLReportFailure(2uLL, "MTLInitializeInterpose", 441, (uint64_t)CFSTR("Metal GPU Frame Capture could not be enabled"), v21, v22, v23, v24, v30);
      }
      else
      {
        switch(wrapperType)
        {
          case 0:
            break;
          case 1:
            v26 = (_QWORD *)&unk_1EDCC7000;
            v27 = MTLWrapWithDebugDevice;
            goto LABEL_64;
          case 2:
            v26 = (_QWORD *)&unk_1EDCC7000;
            v27 = MTLWrapWithTelemetryDevice;
            goto LABEL_64;
          case 3:
            v26 = &unk_1EDCC7000;
            v27 = MTLWrapWithCountersDevice;
LABEL_64:
            v26[428] = v27;
            break;
          case 4:
            v28 = (_QWORD *)&unk_1EDCC7000;
            v29 = MTLWrapWithGPUDebugDevice;
            goto LABEL_67;
          case 5:
            v28 = &unk_1EDCC7000;
            v29 = MTLWrapWithAllDebugDevice;
LABEL_67:
            v28[428] = v29;
            _gpuDebugEnabled = 1;
            break;
          default:
            MTLReportFailure(0, "MTLInitializeInterpose", 479, (uint64_t)CFSTR("Unknown Wrapper Type : %d"), v21, v22, v23, v24, wrapperType);
            break;
        }
      }
      MTLLogAPIValidationType(wrapperType);
      MTLInitializeInterpose(void)::interposeInitialized = 1;
      goto LABEL_69;
    }
    if (v25)
      dlclose(v25);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)&MTLInitializeInterpose(void)::lock);
    if ((MTLInitializeInterpose(void)::interposeInitialized & 1) == 0)
      goto LABEL_54;
  }
  if (v8)
    dlclose(v8);
LABEL_69:
  os_unfair_lock_unlock((os_unfair_lock_t)&MTLInitializeInterpose(void)::lock);
  MTLRegisterDevices();
}

NSArray *MTLCopyAllDevices(void)
{
  NSArray *v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  MTLDeviceArrayInitialize();
  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = __Block_byref_object_copy__6;
  v7 = __Block_byref_object_dispose__6;
  v8 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __MTLCopyAllDevices_block_invoke;
  block[3] = &unk_1E0FE3468;
  block[4] = &v3;
  dispatch_sync((dispatch_queue_t)_deviceArrayQueue, block);
  v0 = (NSArray *)v4[5];
  _Block_object_dispose(&v3, 8);
  return v0;
}

void *_MTLCreateGLMetalDevice()
{
  id v0;
  void *v1;
  void *v3;
  id v4;

  v0 = MTLCreateSystemDefaultDevice();
  v1 = v0;
  if (v0)
  {
    if (wrapperType <= 5 && ((1 << wrapperType) & 0x32) != 0)
    {
      v3 = (void *)objc_msgSend(v0, "originalObject");
      v4 = v3;

      return v3;
    }
  }
  return v1;
}

BOOL MTLCountersLayerEnabled()
{
  if (initWrapperType(void)::pred != -1)
    dispatch_once(&initWrapperType(void)::pred, &__block_literal_global_1238);
  return wrapperType == 3;
}

uint64_t MTLWrapWithDebugDevice(uint64_t a1)
{
  return objc_msgSend(objc_alloc((Class)_MTLGetToolsClass(CFSTR("MTLDebugDevice"))), "initWithBaseObject:parent:", a1, 0);
}

uint64_t MTLWrapWithTelemetryDevice(uint64_t a1)
{
  return objc_msgSend(objc_alloc((Class)_MTLGetToolsClass(CFSTR("MTLTelemetryDevice"))), "initWithBaseObject:parent:", a1, 0);
}

uint64_t MTLWrapWithCountersDevice(uint64_t a1)
{
  return objc_msgSend(objc_alloc((Class)_MTLGetToolsClass(CFSTR("MTLCountersDevice"))), "initWithBaseObject:parent:", a1, 0);
}

uint64_t MTLWrapWithGPUDebugDevice(void *a1)
{
  objc_class *v2;

  v2 = (objc_class *)_MTLGetToolsClass(CFSTR("MTLGPUDebugDevice"));
  if ((int)_MTLGetMTLCompilerLLVMVersionForDevice(a1) <= 32023)
    v2 = (objc_class *)_MTLGetToolsClass(CFSTR("MTLLegacySVDevice"));
  return objc_msgSend([v2 alloc], "initWithBaseObject:parent:", a1, 0);
}

uint64_t MTLWrapWithAllDebugDevice(void *a1)
{
  void *v1;
  uint64_t v2;

  v1 = (void *)MTLWrapWithGPUDebugDevice(a1);
  v2 = objc_msgSend(objc_alloc((Class)_MTLGetToolsClass(CFSTR("MTLDebugDevice"))), "initWithBaseObject:parent:", v1, 0);

  return v2;
}

uint64_t _MTLGetToolsClass(NSString *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)MEMORY[0x186DAC640]();
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithIdentifier:", CFSTR("com.apple.gpusw.MetalTools"));
  if (!v3)
  {
    v4 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", "/System/Library/PrivateFrameworks/MetalTools.framework", 1);
    v3 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", v4);
  }
  v5 = objc_msgSend(v3, "classNamed:", a1);
  objc_autoreleasePoolPop(v2);
  return v5;
}

uint64_t akPurgeableToIOAccelPurgeable(uint64_t result)
{
  if ((unint64_t)(result - 2) >= 3)
    return 1;
  else
    return result;
}

uint64_t ioAccelPurgeableToMTLPurgeable(int a1)
{
  uint64_t v1;

  v1 = (a1 - 2);
  if (v1 >= 3)
    return 1;
  else
    return v1 + 2;
}

uint64_t _MTLCreateTileRenderPipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLTileRenderPipelineDescriptor *a2)
{
  const char *v4;
  size_t v5;
  int String;
  int v7;
  MTLTileRenderPipelineDescriptor *v8;
  Class isa;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int16 v16;
  int v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  int v31;
  void *v32;
  int v33;
  int v34;
  int PipelineBufferDescriptorVector;
  _BOOL4 v36;
  int LinkedFunctions;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v47;
  void *__p;
  char *v49;
  char *v50;

  v4 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLTileRenderPipelineDescriptor tileFunction](a2, "tileFunction"), "name"), "UTF8String");
  v5 = strlen(v4);
  String = flatbuffers::FlatBufferBuilder::CreateString(a1, v4, v5);
  v7 = String;
  v8 = a2 + 1;
  isa = a2[1].super.isa;
  if (!isa)
  {
    v34 = 0;
    goto LABEL_44;
  }
  v47 = String;
  v10 = 0;
  __p = 0;
  v49 = 0;
  v50 = 0;
  do
  {
    v11 = (void *)*((_QWORD *)isa + v10 + 1);
    *((_BYTE *)a1 + 70) = 1;
    v12 = *((_QWORD *)a1 + 5);
    v13 = *((_QWORD *)a1 + 6);
    v14 = *((_QWORD *)a1 + 4);
    if (v11)
    {
      v15 = objc_msgSend(v11, "pixelFormat");
      if ((v15 - 1) >= 0x285)
        v16 = 0;
      else
        v16 = v15;
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, v16, 0);
      v17 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
      v18 = v49;
      if (v49 < v50)
      {
LABEL_17:
        *(_DWORD *)v18 = v17;
        v25 = v18 + 4;
        goto LABEL_36;
      }
      v19 = (char *)__p;
      v20 = (v49 - (_BYTE *)__p) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v22 = v50 - (_BYTE *)__p;
      if ((v50 - (_BYTE *)__p) >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v50, v23);
        v19 = (char *)__p;
        v18 = v49;
      }
      else
      {
        v24 = 0;
      }
      v29 = &v24[4 * v20];
      *(_DWORD *)v29 = v17;
      v25 = v29 + 4;
      while (v18 != v19)
      {
        v30 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v29 - 1) = v30;
        v29 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, 0, 0);
      v17 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v14 - (unsigned __int16)v13 + (unsigned __int16)v12);
      v18 = v49;
      if (v49 < v50)
        goto LABEL_17;
      v19 = (char *)__p;
      v26 = (v49 - (_BYTE *)__p) >> 2;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v28 = v50 - (_BYTE *)__p;
      if ((v50 - (_BYTE *)__p) >> 1 > v27)
        v27 = v28 >> 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v27;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v50, v23);
        v19 = (char *)__p;
        v18 = v49;
      }
      else
      {
        v24 = 0;
      }
      v29 = &v24[4 * v26];
      *(_DWORD *)v29 = v17;
      v25 = v29 + 4;
      while (v18 != v19)
      {
        v31 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v29 - 1) = v31;
        v29 -= 4;
      }
    }
    __p = v29;
    v49 = v25;
    v50 = &v24[4 * v23];
    if (v19)
      operator delete(v19);
LABEL_36:
    v49 = v25;
    ++v10;
  }
  while (v10 != 8);
  if (v25 == __p)
    v32 = &flatbuffers::data<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Air::TileColorAttachmentDescriptor>> const&)::t;
  else
    v32 = __p;
  v33 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v32, (v25 - (_BYTE *)__p) >> 2);
  v7 = v47;
  if (__p)
  {
    v49 = (char *)__p;
    operator delete(__p);
  }
  v34 = v33;
  v8 = a2 + 1;
LABEL_44:
  PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, (const MTLPipelineBufferDescriptorArrayInternal *)v8[1]._maxCallStackDepth);
  v36 = 1;
  if (!-[MTLTileRenderPipelineDescriptor supportAddingBinaryFunctions](a2, "supportAddingBinaryFunctions"))
    v36 = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](-[MTLTileRenderPipelineDescriptor linkedFunctions](a2, "linkedFunctions"), "binaryFunctions"), "count") != 0;
  LinkedFunctions = createLinkedFunctions(a1, -[MTLTileRenderPipelineDescriptor linkedFunctions](a2, "linkedFunctions"));
  *((_BYTE *)a1 + 70) = 1;
  v38 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 14, v34);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, -[MTLTileRenderPipelineDescriptor rasterSampleCount](a2, "rasterSampleCount"), 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, -[MTLTileRenderPipelineDescriptor threadgroupSizeMatchesTileSize](a2, "threadgroupSizeMatchesTileSize"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, -[MTLTileRenderPipelineDescriptor maxTotalThreadsPerThreadgroup](a2, "maxTotalThreadsPerThreadgroup"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, -[MTLTileRenderPipelineDescriptor colorSampleCount](a2, "colorSampleCount"), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, -[MTLTileRenderPipelineDescriptor textureWriteRoundingMode](a2, "textureWriteRoundingMode"), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 16, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 22, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, v36, 0);
  v39 = flatbuffers::FlatBufferBuilder::EndTable(a1, v38);
  *((_BYTE *)a1 + 70) = 1;
  v40 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v7);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v39);
  v41 = flatbuffers::FlatBufferBuilder::EndTable(a1, v40);
  __p = (void *)0x300000000;
  LODWORD(v49) = 0;
  *((_BYTE *)a1 + 70) = 1;
  v42 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v41);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)a1, 4, (uint64_t *)&__p);
  v43 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 3);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 8, v43);
  v44 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 6, v44);
  v45 = flatbuffers::FlatBufferBuilder::EndTable(a1, v42);
  flatbuffers::FlatBufferBuilder::Finish(a1, v45, "AIRP", 0);
  return *((_QWORD *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void sub_1827476E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t _MTLCreateMeshRenderPipelineScriptFromDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLMeshRenderPipelineDescriptor *a2)
{
  const char *v4;
  size_t v5;
  const char *v6;
  size_t v7;
  id v8;
  const char *v9;
  size_t v10;
  int v11;
  const MTLMeshRenderPipelineDescriptorPrivate *v12;
  int FragmentColorAttachmentDescriptorVector;
  int PipelineBufferDescriptorVector;
  _BOOL4 v15;
  _BOOL4 v16;
  int LinkedFunctions;
  int v18;
  int depthAttachmentPixelFormat;
  int stencilAttachmentPixelFormat;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v39;
  int String;
  uint64_t v41;
  int v42;

  if (-[MTLMeshRenderPipelineDescriptor meshFunction](a2, "meshFunction"))
  {
    v4 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLMeshRenderPipelineDescriptor meshFunction](a2, "meshFunction"), "name"), "UTF8String");
    v5 = strlen(v4);
    String = flatbuffers::FlatBufferBuilder::CreateString(a1, v4, v5);
  }
  else
  {
    String = 0;
  }
  if (-[MTLMeshRenderPipelineDescriptor objectFunction](a2, "objectFunction"))
  {
    v6 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLMeshRenderPipelineDescriptor objectFunction](a2, "objectFunction"), "name"), "UTF8String");
    v7 = strlen(v6);
    v8 = -[MTLMeshRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction", flatbuffers::FlatBufferBuilder::CreateString(a1, v6, v7));
  }
  else
  {
    v8 = -[MTLMeshRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction", 0);
  }
  if (v8)
  {
    v9 = (const char *)objc_msgSend((id)objc_msgSend(-[MTLMeshRenderPipelineDescriptor fragmentFunction](a2, "fragmentFunction"), "name"), "UTF8String");
    v10 = strlen(v9);
    v11 = flatbuffers::FlatBufferBuilder::CreateString(a1, v9, v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = -[MTLMeshRenderPipelineDescriptor _descriptorPrivate](a2, "_descriptorPrivate");
  FragmentColorAttachmentDescriptorVector = createFragmentColorAttachmentDescriptorVector(a1, v12->attachments);
  PipelineBufferDescriptorVector = createPipelineBufferDescriptorVector(a1, v12->fragmentBuffers);
  v15 = 1;
  v16 = 1;
  if ((*((_BYTE *)&v12->var1.var0 + 4) & 4) == 0)
    v16 = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](v12->fragmentLinkedFunctions, "binaryFunctions"), "count") != 0;
  LinkedFunctions = createLinkedFunctions(a1, v12->fragmentLinkedFunctions);
  *((_BYTE *)a1 + 70) = 1;
  v18 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 22, FragmentColorAttachmentDescriptorVector);
  depthAttachmentPixelFormat = v12->depthAttachmentPixelFormat;
  if ((depthAttachmentPixelFormat - 1) >= 0x285)
    LOWORD(depthAttachmentPixelFormat) = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 24, (unsigned __int16)depthAttachmentPixelFormat, 0);
  stencilAttachmentPixelFormat = v12->stencilAttachmentPixelFormat;
  if ((stencilAttachmentPixelFormat - 1) >= 0x285)
    LOWORD(stencilAttachmentPixelFormat) = 0;
  flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 26, (unsigned __int16)stencilAttachmentPixelFormat, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, v12->var1.miscHash[0] & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, (LOBYTE(v12->var1.miscHash[0]) >> 1) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 6, (LOBYTE(v12->var1.miscHash[0]) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v12->rasterSampleCount, 1);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 28, PipelineBufferDescriptorVector);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 30, v12->var1.miscHash[0] >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, v12->colorSampleCount, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 16, v12->sampleMask, -1);
  flatbuffers::FlatBufferBuilder::AddElement<float>((char *)a1, 18, v12->var0.sampleCoverage, 1.0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, (LOBYTE(v12->var1.miscHash[0]) >> 5) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 34, LOBYTE(v12->textureWriteRoundingMode), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 36, (v12->var1.miscHash[0] >> 28) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 38, *((_BYTE *)&v12->var1.var0 + 3) & 0xF, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 40, (v12->var1.miscHash[0] >> 23) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 42, (v12->var1.miscHash[0] >> 20) & 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 44, (v12->var1.miscHash[0] >> 11) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 46, (LOBYTE(v12->var1.miscHash[0]) >> 3) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 48, (LOBYTE(v12->var1.miscHash[0]) >> 4) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 52, v12->fragmentDepthCompareClampMask, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 50, (v12->var1.miscHash[0] >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 54, LinkedFunctions);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 32, v16, 0);
  v21 = flatbuffers::FlatBufferBuilder::EndTable(a1, v18);
  v22 = createPipelineBufferDescriptorVector(a1, v12->objectBuffers);
  if ((*((_BYTE *)&v12->var1.var0 + 4) & 1) == 0)
    v15 = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](v12->objectLinkedFunctions, "binaryFunctions"), "count") != 0;
  v23 = createLinkedFunctions(a1, v12->objectLinkedFunctions);
  *((_BYTE *)a1 + 70) = 1;
  v24 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 18, v22);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v12->pipelineMemoryLength, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, LOBYTE(v12->var1.miscHash[0]) >> 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 12, v12->maxObjectStackCallDepth, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, LOBYTE(v12->textureWriteRoundingMode), 0);
  v25 = (*(_QWORD *)&v12->var1 >> 35) & 0xFLL;
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 28, v23);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, v25, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v12->var1.miscHash[0] >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v15, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v12->maxTotalThreadsPerObjectThreadgroup, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 26, (v12->var1.miscHash[0] >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v12->maxTotalThreadgroupsPerMeshGrid, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, (*(_QWORD *)&v12->var1 >> 39) & 1, 0);
  v26 = flatbuffers::FlatBufferBuilder::EndTable(a1, v24);
  v27 = createPipelineBufferDescriptorVector(a1, v12->meshBuffers);
  v28 = 1;
  if ((*((_BYTE *)&v12->var1.var0 + 4) & 2) == 0)
    v28 = -[NSArray count](-[MTLLinkedFunctions binaryFunctions](v12->meshLinkedFunctions, "binaryFunctions"), "count") != 0;
  v29 = createLinkedFunctions(a1, v12->meshLinkedFunctions);
  *((_BYTE *)a1 + 70) = 1;
  v30 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 18, v27);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, (LOBYTE(v12->var1.miscHash[0]) >> 2) & 1, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 8, v12->pipelineMemoryLength, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, LOBYTE(v12->var1.miscHash[0]) >> 7, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 10, v12->maxMeshStackCallDepth, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 26, (v12->var1.miscHash[0] >> 12), 255);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 24, LOBYTE(v12->textureWriteRoundingMode), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 14, (*(_QWORD *)&v12->var1 >> 35) & 0xFLL, 1);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, v12->var1.miscHash[0] >> 31, 0);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 30, v29);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 22, v28, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v12->maxTotalThreadsPerMeshThreadgroup, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 28, (v12->var1.miscHash[0] >> 30) & 1, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 4, (*(_QWORD *)&v12->var1 >> 40) & 1, 0);
  v31 = flatbuffers::FlatBufferBuilder::EndTable(a1, v30);
  *((_BYTE *)a1 + 70) = 1;
  v32 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, String);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v39);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v11);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 12, v31);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v26);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 14, v21);
  v33 = flatbuffers::FlatBufferBuilder::EndTable(a1, v32);
  v41 = 0x300000000;
  v42 = 0;
  *((_BYTE *)a1 + 70) = 1;
  v34 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v33);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)a1, 4, &v41);
  v35 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 4);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 8, v35);
  v36 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 6, v36);
  v37 = flatbuffers::FlatBufferBuilder::EndTable(a1, v34);
  flatbuffers::FlatBufferBuilder::Finish(a1, v37, "AIRP", 0);
  return *((_QWORD *)a1 + 6) + **((unsigned int **)a1 + 6);
}

uint64_t _MTLCreateFuncionScriptFromFunctionType(flatbuffers::FlatBufferBuilder *this, MTLFunctionType a2)
{
  char v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;

  v10 = 0x300000000;
  v11 = 0;
  if (a2 - 7 < 0xFFFFFFFFFFFFFFFELL)
    return 0;
  if (a2 == MTLFunctionTypeVisible)
  {
    v4 = 5;
  }
  else
  {
    if (a2 != MTLFunctionTypeIntersection)
    {
      v9 = 0;
      goto LABEL_9;
    }
    v4 = 6;
  }
  *((_BYTE *)this + 70) = 1;
  v5 = flatbuffers::FlatBufferBuilder::EndTable(this, *((_WORD *)this + 16) - *((_WORD *)this + 24) + *((_DWORD *)this + 10));
  *((_BYTE *)this + 70) = 1;
  v6 = *((_DWORD *)this + 8) - *((_DWORD *)this + 12) + *((_DWORD *)this + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)this, 10, v5);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)this, 4, &v10);
  v7 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, v4);
  flatbuffers::FlatBufferBuilder::TrackField((char *)this, 8, v7);
  v8 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)this, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)this, 6, v8);
  v9 = flatbuffers::FlatBufferBuilder::EndTable(this, v6);
LABEL_9:
  flatbuffers::FlatBufferBuilder::Finish(this, v9, "AIRF", 0);
  return *((_QWORD *)this + 6) + **((unsigned int **)this + 6);
}

void reorderStitchingGraphNodes(MTLFunctionStitchingGraph *a1@<X0>, uint64_t a2@<X8>)
{
  MTLFunctionStitchingFunctionNode *v4;
  char *v5;
  NSUInteger v6;
  char *v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t *v18;
  int8x16_t *v19;
  int v20;
  char v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t i;
  _QWORD *v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  _QWORD *v35;
  unsigned int v36;
  char v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t k;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *m;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  unint64_t v94;
  uint64_t v95;
  __int128 v96;
  void **v97;
  int64_t v98;
  unsigned int v99;
  _BYTE *v100;
  char *v101;
  int64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  char *v114;
  char *v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[2];
  int v119;
  uint64_t *v120;
  _QWORD *v121[2];
  void *v122;
  char *v123;
  char *v124;
  _QWORD *v125;
  void *__p[2];
  _OWORD v127[3];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _QWORD *v132;
  int v133[32];
  _OWORD v134[2];
  int v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v121[0] = 0;
  v121[1] = 0;
  v120 = (uint64_t *)v121;
  memset(v118, 0, sizeof(v118));
  v119 = 1065353216;
  v4 = -[MTLFunctionStitchingGraph outputNode](a1, "outputNode");
  v5 = (char *)operator new(0x10uLL);
  *(_QWORD *)v5 = 0xFFFFFFFFLL;
  *((_QWORD *)v5 + 1) = v4;
  v6 = -[NSArray count](-[MTLFunctionStitchingGraph nodes](a1, "nodes"), "count");
  v112 = a2;
  v7 = v5 + 16;
  if (!v6)
  {
    v8 = v5 + 16;
    while (1)
    {
LABEL_30:
      v115 = v8 - 16;
      v117 = *((_OWORD *)v8 - 1);
      v20 = v117;
      if ((int)v117 > 0)
        goto LABEL_31;
      std::__tree<objc_object  {objcproto24MTLFunctionStitchingNode}*>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode} const&>(&v120, (unint64_t *)&v117 + 1, (uint64_t *)&v117 + 1);
      if ((v21 & 1) == 0)
        goto LABEL_84;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if ((objc_msgSend(*((id *)&v117 + 1), "isMemberOfClass:", objc_opt_class()) & 1) != 0
          || (objc_msgSend(*((id *)&v117 + 1), "conformsToProtocol:", &unk_1EDCEDEA0) & 1) != 0
          || objc_msgSend(*((id *)&v117 + 1), "conformsToProtocol:", &unk_1EDCEDFB0))
        {
LABEL_42:
          LODWORD(v117) = 1;
LABEL_43:
          v23 = (void *)*((_QWORD *)&v117 + 1);
          objc_opt_class();
          v114 = v7;
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v130 = 0u;
            v131 = 0u;
            v128 = 0u;
            v129 = 0u;
            v24 = (void *)objc_msgSend(v23, "controlDependencies");
            v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v128, v134, 16);
            v113 = v23;
            v26 = 0;
            if (v25)
            {
              v27 = *(_QWORD *)v129;
              do
              {
                for (i = 0; i != v25; ++i)
                {
                  if (*(_QWORD *)v129 != v27)
                    objc_enumerationMutation(v24);
                  v29 = *(_QWORD **)(*((_QWORD *)&v128 + 1) + 8 * i);
                  *(_QWORD *)v133 = v29;
                  if (std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(v118, v133))
                  {
                    __p[0] = v29;
                    *(_QWORD *)v133 = __p;
                    v30 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v118, __p, (uint64_t)&std::piecewise_construct, (_QWORD **)v133)+ 6);
                    if (v26 <= v30)
                      v26 = v30;
                  }
                }
                v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v128, v134, 16);
              }
              while (v25);
            }
            *(_OWORD *)__p = 0u;
            memset(v127, 0, sizeof(v127));
            v31 = (void *)objc_msgSend(v113, "arguments", v112);
            v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", __p, v133, 16);
            if (v32)
            {
              v33 = **(_QWORD **)&v127[0];
              do
              {
                for (j = 0; j != v32; ++j)
                {
                  if (**(_QWORD **)&v127[0] != v33)
                    objc_enumerationMutation(v31);
                  v35 = (_QWORD *)*((_QWORD *)__p[1] + j);
                  v132 = v35;
                  if (std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(v118, &v132))
                  {
                    v125 = v35;
                    v132 = &v125;
                    v36 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v118, &v125, (uint64_t)&std::piecewise_construct, &v132)+ 6);
                    if (v26 <= v36)
                      v26 = v36;
                  }
                }
                v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", __p, v133, 16);
              }
              while (v32);
            }
          }
          else
          {
            v26 = 0;
          }
          *(_QWORD *)&v116 = *((_QWORD *)&v117 + 1);
          DWORD2(v116) = v26 + 1;
          std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>((uint64_t)v118, &v116, &v116);
          v7 = v114;
          if ((v37 & 1) != 0)
          {
            v38 = v123;
            if (v123 >= v124)
            {
              v40 = (v123 - (_BYTE *)v122) >> 3;
              if ((unint64_t)(v40 + 1) >> 61)
                std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
              v41 = (v124 - (_BYTE *)v122) >> 2;
              if (v41 <= v40 + 1)
                v41 = v40 + 1;
              if ((unint64_t)(v124 - (_BYTE *)v122) >= 0x7FFFFFFFFFFFFFF8)
                v42 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v42 = v41;
              if (v42)
                v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v124, v42);
              else
                v43 = 0;
              v44 = &v43[8 * v40];
              *(_QWORD *)v44 = *((_QWORD *)&v117 + 1);
              v39 = v44 + 8;
              v46 = (char *)v122;
              v45 = v123;
              if (v123 != v122)
              {
                do
                {
                  v47 = *((_QWORD *)v45 - 1);
                  v45 -= 8;
                  *((_QWORD *)v44 - 1) = v47;
                  v44 -= 8;
                }
                while (v45 != v46);
                v45 = (char *)v122;
              }
              v122 = v44;
              v123 = v39;
              v124 = &v43[8 * v42];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v123 = *((_QWORD *)&v117 + 1);
              v39 = v38 + 8;
            }
            v123 = v39;
          }
          goto LABEL_84;
        }
        m = v8 - 16;
        goto LABEL_169;
      }
      if (!objc_msgSend((id)objc_msgSend(*((id *)&v117 + 1), "arguments"), "count")
        && !objc_msgSend((id)objc_msgSend(*((id *)&v117 + 1), "controlDependencies"), "count"))
      {
        goto LABEL_42;
      }
      v22 = *((_QWORD *)&v117 + 1);
      if (v115 >= v7)
      {
        v48 = (v115 - v5) >> 4;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 60)
          goto LABEL_215;
        if ((v7 - v5) >> 3 > v49)
          v49 = (v7 - v5) >> 3;
        if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF0)
          v50 = 0xFFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
        {
          if (v50 >> 60)
            goto LABEL_216;
          v51 = (char *)operator new(16 * v50);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[16 * v48];
        v7 = &v51[16 * v50];
        *(_QWORD *)v52 = 1;
        *((_QWORD *)v52 + 1) = v22;
        v8 = v52 + 16;
        if (v115 == v5)
          goto LABEL_100;
        v53 = v115;
        do
        {
          *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
          v52 -= 16;
          v53 -= 16;
        }
        while (v53 != v5);
        if (v5)
LABEL_100:
          operator delete(v5);
        v5 = v52;
      }
      else
      {
        *((_QWORD *)v8 - 2) = 1;
        *((_QWORD *)v8 - 1) = v22;
      }
      v54 = (void *)*((_QWORD *)&v117 + 1);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        for (k = objc_msgSend((id)objc_msgSend(v54, "arguments"), "count"); k; v8 = v58)
        {
          v56 = objc_msgSend((id)objc_msgSend(v54, "arguments", v112), "objectAtIndexedSubscript:", --k);
          v57 = v56;
          if (v8 >= v7)
          {
            v59 = v7;
            v60 = (v8 - v5) >> 4;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 60)
              goto LABEL_215;
            v62 = v59 - v5;
            v63 = (v59 - v5) >> 3;
            if (v63 > v61)
              v61 = v63;
            if (v62 >= 0x7FFFFFFFFFFFFFF0)
              v64 = 0xFFFFFFFFFFFFFFFLL;
            else
              v64 = v61;
            if (v64)
            {
              if (v64 >> 60)
                goto LABEL_216;
              v65 = (char *)operator new(16 * v64);
            }
            else
            {
              v65 = 0;
            }
            v66 = &v65[16 * v60];
            *(_QWORD *)v66 = 0;
            *((_QWORD *)v66 + 1) = v57;
            if (v8 == v5)
            {
              v5 = &v65[16 * v60];
            }
            else
            {
              v67 = &v65[16 * v60];
              do
              {
                *((_OWORD *)v67 - 1) = *((_OWORD *)v8 - 1);
                v67 -= 16;
                v8 -= 16;
              }
              while (v8 != v5);
              v8 = v5;
              v5 = v67;
            }
            v7 = &v65[16 * v64];
            v58 = v66 + 16;
            if (v8)
              operator delete(v8);
          }
          else
          {
            *(_QWORD *)v8 = 0;
            *((_QWORD *)v8 + 1) = v56;
            v58 = v8 + 16;
          }
        }
        v68 = objc_msgSend((id)objc_msgSend(v54, "controlDependencies", v112), "count");
        for (m = v8; v68; v8 = m)
        {
          v70 = objc_msgSend((id)objc_msgSend(v54, "controlDependencies"), "objectAtIndexedSubscript:", --v68);
          v71 = v70;
          if (v8 >= v7)
          {
            v72 = v7;
            v73 = (v8 - v5) >> 4;
            v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 60)
              goto LABEL_215;
            v75 = v72 - v5;
            v76 = (v72 - v5) >> 3;
            if (v76 > v74)
              v74 = v76;
            if (v75 >= 0x7FFFFFFFFFFFFFF0)
              v77 = 0xFFFFFFFFFFFFFFFLL;
            else
              v77 = v74;
            if (v77)
            {
              if (v77 >> 60)
                goto LABEL_216;
              v78 = (char *)operator new(16 * v77);
            }
            else
            {
              v78 = 0;
            }
            v79 = &v78[16 * v73];
            *(_QWORD *)v79 = 0;
            *((_QWORD *)v79 + 1) = v71;
            if (v8 == v5)
            {
              v5 = &v78[16 * v73];
            }
            else
            {
              v80 = &v78[16 * v73];
              do
              {
                *((_OWORD *)v80 - 1) = *((_OWORD *)v8 - 1);
                v80 -= 16;
                v8 -= 16;
              }
              while (v8 != v5);
              v8 = v5;
              v5 = v80;
            }
            v7 = &v78[16 * v77];
            v81 = v79 + 16;
            if (v8)
              operator delete(v8);
            m = v81;
          }
          else
          {
            *(_QWORD *)v8 = 0;
            *((_QWORD *)v8 + 1) = v70;
            m = v8 + 16;
          }
        }
        goto LABEL_169;
      }
      if (objc_msgSend(v54, "isMemberOfClass:", objc_opt_class()))
      {
        if (v8 >= v7)
        {
          v82 = (v8 - v5) >> 4;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 60)
LABEL_215:
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          if ((v7 - v5) >> 3 > v83)
            v83 = (v7 - v5) >> 3;
          if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF0)
            v84 = 0xFFFFFFFFFFFFFFFLL;
          else
            v84 = v83;
          if (v84)
          {
            if (v84 >> 60)
LABEL_216:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v85 = (char *)operator new(16 * v84);
          }
          else
          {
            v85 = 0;
          }
          v86 = &v85[16 * v82];
          v7 = &v85[16 * v84];
          *(_DWORD *)v86 = 0;
          *((_QWORD *)v86 + 1) = v54;
          v87 = v86 + 16;
          if (v8 == v5)
          {
            v5 = v8;
          }
          else
          {
            do
            {
              *((_OWORD *)v86 - 1) = *((_OWORD *)v8 - 1);
              v86 -= 16;
              v8 -= 16;
            }
            while (v8 != v5);
            if (!v5)
              goto LABEL_168;
          }
          operator delete(v5);
LABEL_168:
          v5 = v86;
          m = v87;
          goto LABEL_169;
        }
        *(_DWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = v54;
        m = v8 + 16;
      }
      else
      {
        m = v8;
      }
LABEL_169:
      v115 = m;
      v20 = v117;
LABEL_31:
      if (v20 == 1)
        goto LABEL_43;
LABEL_84:
      v8 = v115;
      if (v115 == v5)
        goto LABEL_24;
    }
  }
  v8 = v5 + 16;
  do
  {
    while (1)
    {
      v9 = -[NSArray objectAtIndexedSubscript:](-[MTLFunctionStitchingGraph nodes](a1, "nodes", v112), "objectAtIndexedSubscript:", --v6);
      v10 = v9;
      if (v8 >= v7)
        break;
      *(_QWORD *)v8 = 0xFFFFFFFFLL;
      *((_QWORD *)v8 + 1) = v9;
      v8 += 16;
      if (!v6)
        goto LABEL_23;
    }
    v11 = (v8 - v5) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    if ((v7 - v5) >> 3 > v12)
      v12 = (v7 - v5) >> 3;
    if ((unint64_t)(v7 - v5) >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v14 = (char *)operator new(16 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[16 * v11];
    v7 = &v14[16 * v13];
    *(_QWORD *)v15 = 0xFFFFFFFFLL;
    *((_QWORD *)v15 + 1) = v10;
    v16 = v15 + 16;
    if (v8 == v5)
    {
      v5 = v8;
LABEL_21:
      operator delete(v5);
      goto LABEL_22;
    }
    do
    {
      *((_OWORD *)v15 - 1) = *((_OWORD *)v8 - 1);
      v15 -= 16;
      v8 -= 16;
    }
    while (v8 != v5);
    if (v5)
      goto LABEL_21;
LABEL_22:
    v5 = v15;
    v8 = v16;
  }
  while (v6);
LABEL_23:
  if (v8 != v5)
    goto LABEL_30;
LABEL_24:
  memset(v134, 0, sizeof(v134));
  v135 = 1065353216;
  v17 = (uint64_t *)v122;
  v18 = (uint64_t *)v123;
  if (v122 != v123)
  {
    v19 = (int8x16_t *)v122;
    while (1)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        break;
      ++v17;
      v19 = (int8x16_t *)((char *)v19 + 8);
      if (v17 == v18)
      {
        v17 = v18;
        goto LABEL_178;
      }
    }
    v88 = v18 - 1;
    v89 = (char *)v18 - (char *)v19;
    while (v17 != v88)
    {
      objc_opt_class();
      --v18;
      v89 -= 8;
      --v88;
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (v89 < 17)
        {
          v90 = 0;
          v92 = 0;
        }
        else
        {
          v90 = (uint64_t *)std::get_temporary_buffer[abi:ne180100]<objc_object  {objcproto24MTLFunctionStitchingNode}*>((v89 >> 3) + 1);
          v92 = v91;
        }
        v17 = (uint64_t *)std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(v19, v18, (v89 >> 3) + 1, v90, v92);
        if (v90)
          operator delete(v90);
        break;
      }
    }
  }
LABEL_178:
  v93 = ((char *)v17 - (_BYTE *)v122) >> 3;
  v94 = 126 - 2 * __clz(v93);
  if (v17 == v122)
    v95 = 0;
  else
    v95 = v94;
  std::__introsort<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,false>((uint64_t)v122, (void **)v17, v95, 1);
  *(_QWORD *)&v127[0] = 0;
  v96 = 0uLL;
  *(_OWORD *)__p = 0u;
  v97 = (void **)v122;
  if (v123 != v122)
  {
    v98 = 0;
    v99 = 0;
    while (1)
    {
      if (!v99 || v93 <= v98)
        goto LABEL_188;
      NodeKey::NodeKey((uint64_t)v133, v97[v98]);
      NodeKey::NodeKey((uint64_t)&v128, *((void **)v122 + v99 - 1));
      if (!NodeKey::operator==(v133, (uint64_t)&v128))
        break;
      v100 = __p[1];
LABEL_205:
      v110 = __p[0];
      *(_QWORD *)v133 = (char *)v122 + 8 * v98;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode} const&>,std::piecewise_construct_t const&<>>((uint64_t)v134, *(_QWORD **)v133, (uint64_t)&std::piecewise_construct, (_QWORD **)v133)+ 6) = ((unint64_t)(v100 - v110) >> 3) - 1;
      v97 = (void **)v122;
      v98 = ++v99;
      if (v99 >= (unint64_t)((v123 - (_BYTE *)v122) >> 3))
      {
        v96 = *(_OWORD *)__p;
        v111 = *(_QWORD *)&v127[0];
        goto LABEL_208;
      }
    }
    v97 = (void **)v122;
LABEL_188:
    v101 = (char *)__p[1];
    if (__p[1] >= (void *)*(_QWORD *)&v127[0])
    {
      v102 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v102 + 1) >> 61)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v103 = (uint64_t)(*(_QWORD *)&v127[0] - (unint64_t)__p[0]) >> 2;
      if (v103 <= v102 + 1)
        v103 = v102 + 1;
      if (*(_QWORD *)&v127[0] - (unint64_t)__p[0] >= 0x7FFFFFFFFFFFFFF8)
        v104 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v104 = v103;
      if (v104)
        v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)v127, v104);
      else
        v105 = 0;
      v106 = &v105[8 * v102];
      *(_QWORD *)v106 = v97[v98];
      v100 = v106 + 8;
      v108 = (char *)__p[0];
      v107 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          v109 = *((_QWORD *)v107 - 1);
          v107 -= 8;
          *((_QWORD *)v106 - 1) = v109;
          v106 -= 8;
        }
        while (v107 != v108);
        v107 = (char *)__p[0];
      }
      __p[0] = v106;
      __p[1] = v100;
      *(_QWORD *)&v127[0] = &v105[8 * v104];
      if (v107)
        operator delete(v107);
    }
    else
    {
      *(_QWORD *)__p[1] = v97[v98];
      v100 = v101 + 8;
    }
    __p[1] = v100;
    goto LABEL_205;
  }
  v111 = 0;
LABEL_208:
  *(_OWORD *)v112 = v96;
  *(_QWORD *)(v112 + 16) = v111;
  __p[1] = 0;
  *(_QWORD *)&v127[0] = 0;
  __p[0] = 0;
  std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__hash_table(v112 + 24, (uint64_t *)v134);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v134);
  if (v5)
    operator delete(v5);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v118);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)&v120, v121[0]);
  if (v122)
  {
    v123 = (char *)v122;
    operator delete(v122);
  }
}

void sub_182748CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,_QWORD *a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v33;
  uint64_t v34;

  if (v33)
    operator delete(v33);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v34 - 240);
  if (v32)
    operator delete(v32);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a19);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)&a24, a25);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t createGraph(flatbuffers::FlatBufferBuilder *a1, MTLFunctionStitchingGraph *a2)
{
  id *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  const unsigned __int8 *v35;
  int v36;
  const unsigned __int8 *v37;
  int v38;
  void **v39;
  unint64_t v40;
  int String;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  char *v52;
  char *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t k;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  const unsigned __int8 *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  char *v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unsigned int v88;
  int v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  int BuiltinNode;
  int v207;
  int v208;
  int v209;
  MTLFunctionStitchingGraph *v210;
  const char *v211;
  size_t v212;
  int v213;
  NSArray *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t m;
  void *v218;
  int v219;
  int v220;
  int v221;
  int v222;
  unsigned int v223;
  int v224;
  int v225;
  char *v226;
  char *v227;
  int v228;
  int v229;
  int v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  unint64_t v241;
  char *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  int v250;
  char *v251;
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  unsigned int v257;
  int v258;
  int v259;
  char *v260;
  char *v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  int v270;
  void *v271;
  int v272;
  void *v273;
  int v274;
  int v275;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  int v280;
  uint64_t *v281;
  uint64_t v282;
  id *v285;
  void *v286;
  id *v287;
  int v288;
  char v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  void *__p[2];
  unsigned __int8 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  void *v309;
  char *v310;
  char *v311;
  void *v312;
  char *v313;
  char *v314;
  void *v315;
  char *v316;
  char *v317;
  void *v318;
  id *v319;
  _BYTE v320[47];
  _BYTE v321[128];
  _BYTE v322[128];
  _BYTE v323[128];
  _BYTE v324[128];
  uint64_t v325;

  v325 = *MEMORY[0x1E0C80C00];
  reorderStitchingGraphNodes(a2, (uint64_t)&v318);
  v315 = 0;
  v316 = 0;
  v317 = 0;
  v3 = (id *)v318;
  v285 = v319;
  if (v318 != v319)
  {
    do
    {
      v287 = v3;
      v4 = *v3;
      if (objc_msgSend(*v3, "isMemberOfClass:", objc_opt_class()))
      {
        v312 = 0;
        v313 = 0;
        v314 = 0;
        v309 = 0;
        v310 = 0;
        v311 = 0;
        v305 = 0u;
        v306 = 0u;
        v307 = 0u;
        v308 = 0u;
        v286 = v4;
        v5 = (void *)objc_msgSend(v4, "arguments");
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v305, v324, 16);
        if (v6)
        {
          v7 = *(_QWORD *)v306;
          do
          {
            for (i = 0; i != v6; ++i)
            {
              if (*(_QWORD *)v306 != v7)
                objc_enumerationMutation(v5);
              v304 = *(_QWORD *)(*((_QWORD *)&v305 + 1) + 8 * i);
              __p[0] = &v304;
              v9 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, &v304, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 6);
              v10 = v313;
              if (v313 >= v314)
              {
                v12 = (char *)v312;
                v13 = (v313 - (_BYTE *)v312) >> 2;
                v14 = v13 + 1;
                if ((unint64_t)(v13 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v15 = v314 - (_BYTE *)v312;
                if ((v314 - (_BYTE *)v312) >> 1 > v14)
                  v14 = v15 >> 1;
                if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
                  v16 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v16 = v14;
                if (v16)
                {
                  v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v16);
                  v12 = (char *)v312;
                  v10 = v313;
                }
                else
                {
                  v17 = 0;
                }
                v18 = &v17[4 * v13];
                *(_DWORD *)v18 = v9;
                v11 = v18 + 4;
                while (v10 != v12)
                {
                  v19 = *((_DWORD *)v10 - 1);
                  v10 -= 4;
                  *((_DWORD *)v18 - 1) = v19;
                  v18 -= 4;
                }
                v312 = v18;
                v313 = v11;
                v314 = &v17[4 * v16];
                if (v12)
                  operator delete(v12);
              }
              else
              {
                *(_DWORD *)v313 = v9;
                v11 = v10 + 4;
              }
              v313 = v11;
            }
            v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v305, v324, 16);
          }
          while (v6);
        }
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        v20 = (void *)objc_msgSend(v286, "controlDependencies");
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v300, v323, 16);
        if (v21)
        {
          v22 = *(_QWORD *)v301;
          do
          {
            for (j = 0; j != v21; ++j)
            {
              if (*(_QWORD *)v301 != v22)
                objc_enumerationMutation(v20);
              v304 = *(_QWORD *)(*((_QWORD *)&v300 + 1) + 8 * j);
              __p[0] = &v304;
              v24 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, &v304, (uint64_t)&std::piecewise_construct, (_QWORD **)__p)+ 6);
              v25 = v310;
              if (v310 >= v311)
              {
                v27 = (char *)v309;
                v28 = (v310 - (_BYTE *)v309) >> 2;
                v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v30 = v311 - (_BYTE *)v309;
                if ((v311 - (_BYTE *)v309) >> 1 > v29)
                  v29 = v30 >> 1;
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                  v31 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v31 = v29;
                if (v31)
                {
                  v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v311, v31);
                  v27 = (char *)v309;
                  v25 = v310;
                }
                else
                {
                  v32 = 0;
                }
                v33 = &v32[4 * v28];
                *(_DWORD *)v33 = v24;
                v26 = v33 + 4;
                while (v25 != v27)
                {
                  v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *((_DWORD *)v33 - 1) = v34;
                  v33 -= 4;
                }
                v309 = v33;
                v310 = v26;
                v311 = &v32[4 * v31];
                if (v27)
                  operator delete(v27);
              }
              else
              {
                *(_DWORD *)v310 = v24;
                v26 = v25 + 4;
              }
              v310 = v26;
            }
            v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v300, v323, 16);
          }
          while (v21);
        }
        if (v313 == v312)
          v35 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        else
          v35 = (const unsigned __int8 *)v312;
        v36 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, v35, (v313 - (_BYTE *)v312) >> 2);
        if (v310 == v309)
          v37 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        else
          v37 = (const unsigned __int8 *)v309;
        v38 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, v37, (v310 - (_BYTE *)v309) >> 2);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v286, "name"), "UTF8String"));
        if ((v299 & 0x80u) == 0)
          v39 = __p;
        else
          v39 = (void **)__p[0];
        if ((v299 & 0x80u) == 0)
          v40 = v299;
        else
          v40 = (unint64_t)__p[1];
        String = flatbuffers::FlatBufferBuilder::CreateString(a1, (const char *)v39, v40);
        if ((char)v299 < 0)
          operator delete(__p[0]);
        *((_BYTE *)a1 + 70) = 1;
        v42 = *((_DWORD *)a1 + 8);
        v43 = *((_DWORD *)a1 + 12);
        v44 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v38);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v36);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, String);
        v45 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v42 - (unsigned __int16)v43 + v44);
        *((_BYTE *)a1 + 70) = 1;
        v46 = *((_DWORD *)a1 + 8);
        v47 = *((_DWORD *)a1 + 12);
        v48 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v45);
        v49 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 2);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v49);
        v50 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v46 - (unsigned __int16)v47 + v48);
        v51 = v50;
        v52 = v316;
        if (v316 >= v317)
        {
          v92 = (char *)v315;
          v93 = (v316 - (_BYTE *)v315) >> 2;
          v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v95 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v96);
            v92 = (char *)v315;
            v52 = v316;
          }
          else
          {
            v97 = 0;
          }
          v129 = &v97[4 * v93];
          *(_DWORD *)v129 = v51;
          v53 = v129 + 4;
          while (v52 != v92)
          {
            v130 = *((_DWORD *)v52 - 1);
            v52 -= 4;
            *((_DWORD *)v129 - 1) = v130;
            v129 -= 4;
          }
          v315 = v129;
          v316 = v53;
          v317 = &v97[4 * v96];
          if (v92)
            operator delete(v92);
        }
        else
        {
          *(_DWORD *)v316 = v50;
          v53 = v52 + 4;
        }
        v316 = v53;
        if (v309)
        {
          v310 = (char *)v309;
          operator delete(v309);
        }
LABEL_157:
        if (v312)
        {
          v313 = (char *)v312;
          operator delete(v312);
        }
        goto LABEL_259;
      }
      if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        v312 = 0;
        v313 = 0;
        v314 = 0;
        __p[0] = (void *)objc_msgSend(v4, "condition");
        v309 = __p;
        LODWORD(v304) = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, __p, (uint64_t)&std::piecewise_construct, (_QWORD **)&v309)+ 6);
        v294 = 0u;
        v295 = 0u;
        v296 = 0u;
        v297 = 0u;
        v54 = (void *)objc_msgSend(v4, "controlDependencies");
        v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v294, v322, 16);
        if (v55)
        {
          v56 = *(_QWORD *)v295;
          do
          {
            for (k = 0; k != v55; ++k)
            {
              if (*(_QWORD *)v295 != v56)
                objc_enumerationMutation(v54);
              __p[0] = *(void **)(*((_QWORD *)&v294 + 1) + 8 * k);
              v309 = __p;
              v58 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, __p, (uint64_t)&std::piecewise_construct, (_QWORD **)&v309)+ 6);
              v59 = v313;
              if (v313 >= v314)
              {
                v61 = (char *)v312;
                v62 = (v313 - (_BYTE *)v312) >> 2;
                v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 62)
                  std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                v64 = v314 - (_BYTE *)v312;
                if ((v314 - (_BYTE *)v312) >> 1 > v63)
                  v63 = v64 >> 1;
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                  v65 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v65 = v63;
                if (v65)
                {
                  v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v65);
                  v61 = (char *)v312;
                  v59 = v313;
                }
                else
                {
                  v66 = 0;
                }
                v67 = &v66[4 * v62];
                *(_DWORD *)v67 = v58;
                v60 = v67 + 4;
                while (v59 != v61)
                {
                  v68 = *((_DWORD *)v59 - 1);
                  v59 -= 4;
                  *((_DWORD *)v67 - 1) = v68;
                  v67 -= 4;
                }
                v312 = v67;
                v313 = v60;
                v314 = &v66[4 * v65];
                if (v61)
                  operator delete(v61);
              }
              else
              {
                *(_DWORD *)v313 = v58;
                v60 = v59 + 4;
              }
              v313 = v60;
            }
            v55 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v294, v322, 16);
          }
          while (v55);
        }
        if (v313 == v312)
          v69 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        else
          v69 = (const unsigned __int8 *)v312;
        v70 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>(a1, v69, (v313 - (_BYTE *)v312) >> 2);
        *((_BYTE *)a1 + 70) = 1;
        v71 = *((_DWORD *)a1 + 8);
        v72 = *((_DWORD *)a1 + 12);
        v73 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v70);
        flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)a1, 4, &v304);
        v74 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v71 - (unsigned __int16)v72 + v73);
        *((_BYTE *)a1 + 70) = 1;
        v75 = *((_DWORD *)a1 + 8);
        v76 = *((_DWORD *)a1 + 12);
        v77 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v74);
        v78 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 11);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v78);
        v79 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v75 - (unsigned __int16)v76 + v77);
        v80 = v79;
        v81 = v316;
        if (v316 >= v317)
        {
          v123 = (char *)v315;
          v124 = (v316 - (_BYTE *)v315) >> 2;
          v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v126 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v125)
            v125 = v126 >> 1;
          if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
            v127 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v127 = v125;
          if (v127)
          {
            v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v127);
            v123 = (char *)v315;
            v81 = v316;
          }
          else
          {
            v128 = 0;
          }
          v146 = &v128[4 * v124];
          *(_DWORD *)v146 = v80;
          v82 = v146 + 4;
          while (v81 != v123)
          {
            v147 = *((_DWORD *)v81 - 1);
            v81 -= 4;
            *((_DWORD *)v146 - 1) = v147;
            v146 -= 4;
          }
          v315 = v146;
          v316 = v82;
          v317 = &v128[4 * v127];
          if (v123)
            operator delete(v123);
        }
        else
        {
          *(_DWORD *)v316 = v79;
          v82 = v81 + 4;
        }
        v316 = v82;
        goto LABEL_157;
      }
      if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        v83 = objc_msgSend(v4, "argumentIndex");
        *((_BYTE *)a1 + 70) = 1;
        v84 = *((_QWORD *)a1 + 5);
        v85 = *((_QWORD *)a1 + 6);
        v86 = *((_QWORD *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v83, 0);
        v87 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v86 - (unsigned __int16)v85 + (unsigned __int16)v84);
        *((_BYTE *)a1 + 70) = 1;
        LODWORD(v84) = *((_DWORD *)a1 + 8);
        LODWORD(v85) = *((_DWORD *)a1 + 12);
        LODWORD(v86) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v87);
        v88 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 1);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v88);
        v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v84 - (unsigned __int16)v85 + (unsigned __int16)v86);
        v90 = v316;
        if (v316 >= v317)
        {
          v117 = (char *)v315;
          v143 = (v316 - (_BYTE *)v315) >> 2;
          v144 = v143 + 1;
          if ((unint64_t)(v143 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v145 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v144)
            v144 = v145 >> 1;
          if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v144;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            v117 = (char *)v315;
            v90 = v316;
          }
          else
          {
            v122 = 0;
          }
          v161 = &v122[4 * v143];
          *(_DWORD *)v161 = v89;
          v91 = v161 + 4;
          while (v90 != v117)
          {
            v162 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v162;
            v161 -= 4;
          }
LABEL_256:
          v315 = v161;
          v316 = v91;
          v317 = &v122[4 * v121];
          if (v117)
            operator delete(v117);
          goto LABEL_258;
        }
      }
      else if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        v98 = objc_msgSend(v4, "bindIndex");
        *((_BYTE *)a1 + 70) = 1;
        v99 = *((_DWORD *)a1 + 8);
        v100 = *((_DWORD *)a1 + 12);
        v101 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 6, v98, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, 0, 0);
        v102 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v99 - (unsigned __int16)v100 + v101);
        v103 = objc_msgSend(v4, "byteOffset");
        *((_BYTE *)a1 + 70) = 1;
        v104 = *((_DWORD *)a1 + 8);
        v105 = *((_DWORD *)a1 + 12);
        v106 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>((char *)a1, 6, v103, 0);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v102);
        v107 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v104 - (unsigned __int16)v105 + v106);
        v108 = objc_msgSend(v4, "dereference");
        *((_BYTE *)a1 + 70) = 1;
        v109 = *((_QWORD *)a1 + 5);
        v110 = *((_QWORD *)a1 + 6);
        v111 = *((_QWORD *)a1 + 4);
        if (v108)
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v107);
          v112 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v111 - (unsigned __int16)v110 + (unsigned __int16)v109);
          *((_BYTE *)a1 + 70) = 1;
          v113 = *((_DWORD *)a1 + 8);
          v114 = *((_DWORD *)a1 + 12);
          v115 = *((_DWORD *)a1 + 10);
          flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v112);
          v116 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 5);
          flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v116);
          v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v113 - (unsigned __int16)v114 + v115);
          v90 = v316;
          if (v316 >= v317)
          {
            v117 = (char *)v315;
            v118 = (v316 - (_BYTE *)v315) >> 2;
            v119 = v118 + 1;
            if ((unint64_t)(v118 + 1) >> 62)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v120 = v317 - (_BYTE *)v315;
            if ((v317 - (_BYTE *)v315) >> 1 > v119)
              v119 = v120 >> 1;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
              v121 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v121 = v119;
            if (v121)
            {
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
              v117 = (char *)v315;
              v90 = v316;
            }
            else
            {
              v122 = 0;
            }
            v161 = &v122[4 * v118];
            *(_DWORD *)v161 = v89;
            v91 = v161 + 4;
            while (v90 != v117)
            {
              v183 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v161 - 1) = v183;
              v161 -= 4;
            }
            goto LABEL_256;
          }
        }
        else
        {
          flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v107);
          v157 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 4);
          flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v157);
          v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v111 - (unsigned __int16)v110 + (unsigned __int16)v109);
          v90 = v316;
          if (v316 >= v317)
          {
            v117 = (char *)v315;
            v158 = (v316 - (_BYTE *)v315) >> 2;
            v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 62)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v160 = v317 - (_BYTE *)v315;
            if ((v317 - (_BYTE *)v315) >> 1 > v159)
              v159 = v160 >> 1;
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
              v121 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v121 = v159;
            if (v121)
            {
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
              v117 = (char *)v315;
              v90 = v316;
            }
            else
            {
              v122 = 0;
            }
            v161 = &v122[4 * v158];
            *(_DWORD *)v161 = v89;
            v91 = v161 + 4;
            while (v90 != v117)
            {
              v182 = *((_DWORD *)v90 - 1);
              v90 -= 4;
              *((_DWORD *)v161 - 1) = v182;
              v161 -= 4;
            }
            goto LABEL_256;
          }
        }
      }
      else if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        v131 = objc_msgSend(v4, "bindIndex");
        *((_BYTE *)a1 + 70) = 1;
        v132 = *((_DWORD *)a1 + 8);
        v133 = *((_DWORD *)a1 + 12);
        v134 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 6, v131, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, 0, 0);
        v135 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v132 - (unsigned __int16)v133 + v134);
        *((_BYTE *)a1 + 70) = 1;
        v136 = *((_DWORD *)a1 + 8);
        v137 = *((_DWORD *)a1 + 12);
        v138 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v135);
        v139 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 3);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v139);
        v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v136 - (unsigned __int16)v137 + v138);
        v90 = v316;
        if (v316 >= v317)
        {
          v117 = (char *)v315;
          v140 = (v316 - (_BYTE *)v315) >> 2;
          v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v142 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v141)
            v141 = v142 >> 1;
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v141;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            v117 = (char *)v315;
            v90 = v316;
          }
          else
          {
            v122 = 0;
          }
          v161 = &v122[4 * v140];
          *(_DWORD *)v161 = v89;
          v91 = v161 + 4;
          while (v90 != v117)
          {
            v181 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v181;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        v148 = objc_msgSend(v4, "bindIndex");
        *((_BYTE *)a1 + 70) = 1;
        v149 = *((_QWORD *)a1 + 5);
        v150 = *((_QWORD *)a1 + 6);
        v151 = *((_QWORD *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v148, 0);
        v152 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v151 - (unsigned __int16)v150 + (unsigned __int16)v149);
        *((_BYTE *)a1 + 70) = 1;
        LODWORD(v149) = *((_DWORD *)a1 + 8);
        LODWORD(v150) = *((_DWORD *)a1 + 12);
        LODWORD(v151) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v152);
        v153 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 6);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v153);
        v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v149 - (unsigned __int16)v150 + (unsigned __int16)v151);
        v90 = v316;
        if (v316 >= v317)
        {
          v117 = (char *)v315;
          v154 = (v316 - (_BYTE *)v315) >> 2;
          v155 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v156 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v155)
            v155 = v156 >> 1;
          if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v155;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            v117 = (char *)v315;
            v90 = v316;
          }
          else
          {
            v122 = 0;
          }
          v161 = &v122[4 * v154];
          *(_DWORD *)v161 = v89;
          v91 = v161 + 4;
          while (v90 != v117)
          {
            v192 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v192;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        v163 = objc_msgSend(v4, "bindIndex");
        *((_BYTE *)a1 + 70) = 1;
        v164 = *((_QWORD *)a1 + 5);
        v165 = *((_QWORD *)a1 + 6);
        v166 = *((_QWORD *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v163, 0);
        v167 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v166 - (unsigned __int16)v165 + (unsigned __int16)v164);
        *((_BYTE *)a1 + 70) = 1;
        LODWORD(v164) = *((_DWORD *)a1 + 8);
        LODWORD(v165) = *((_DWORD *)a1 + 12);
        LODWORD(v166) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v167);
        v168 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 7);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v168);
        v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v164 - (unsigned __int16)v165 + (unsigned __int16)v166);
        v90 = v316;
        if (v316 >= v317)
        {
          v117 = (char *)v315;
          v169 = (v316 - (_BYTE *)v315) >> 2;
          v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v171 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v170)
            v170 = v171 >> 1;
          if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v170;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            v117 = (char *)v315;
            v90 = v316;
          }
          else
          {
            v122 = 0;
          }
          v161 = &v122[4 * v169];
          *(_DWORD *)v161 = v89;
          v91 = v161 + 4;
          while (v90 != v117)
          {
            v205 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v205;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        v172 = objc_msgSend(v4, "bindIndex");
        *((_BYTE *)a1 + 70) = 1;
        v173 = *((_QWORD *)a1 + 5);
        v174 = *((_QWORD *)a1 + 6);
        v175 = *((_QWORD *)a1 + 4);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v172, 0);
        v176 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v175 - (unsigned __int16)v174 + (unsigned __int16)v173);
        *((_BYTE *)a1 + 70) = 1;
        LODWORD(v173) = *((_DWORD *)a1 + 8);
        LODWORD(v174) = *((_DWORD *)a1 + 12);
        LODWORD(v175) = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v176);
        v177 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 8);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v177);
        v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v173 - (unsigned __int16)v174 + (unsigned __int16)v175);
        v90 = v316;
        if (v316 >= v317)
        {
          v117 = (char *)v315;
          v178 = (v316 - (_BYTE *)v315) >> 2;
          v179 = v178 + 1;
          if ((unint64_t)(v178 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v180 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v179)
            v179 = v180 >> 1;
          if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v179;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            v117 = (char *)v315;
            v90 = v316;
          }
          else
          {
            v122 = 0;
          }
          v161 = &v122[4 * v178];
          *(_DWORD *)v161 = v89;
          v91 = v161 + 4;
          while (v90 != v117)
          {
            v207 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v207;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
      {
        *((_BYTE *)a1 + 70) = 1;
        v184 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_DWORD *)a1 + 10));
        *((_BYTE *)a1 + 70) = 1;
        v185 = *((_DWORD *)a1 + 8);
        v186 = *((_DWORD *)a1 + 12);
        v187 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v184);
        v188 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 9);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v188);
        v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v185 - (unsigned __int16)v186 + v187);
        v90 = v316;
        if (v316 >= v317)
        {
          v117 = (char *)v315;
          v189 = (v316 - (_BYTE *)v315) >> 2;
          v190 = v189 + 1;
          if ((unint64_t)(v189 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v191 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v190)
            v190 = v191 >> 1;
          if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v190;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            v117 = (char *)v315;
            v90 = v316;
          }
          else
          {
            v122 = 0;
          }
          v161 = &v122[4 * v189];
          *(_DWORD *)v161 = v89;
          v91 = v161 + 4;
          while (v90 != v117)
          {
            v208 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v208;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      else
      {
        if (!objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
        {
          if (objc_msgSend(v4, "isMemberOfClass:", objc_opt_class()))
          {
            BuiltinNode = Mtl::FunctionStitching::CreateBuiltinNode((uint64_t)a1, 0);
            LODWORD(v312) = Mtl::FunctionStitching::CreateNode((uint64_t)a1, 10, BuiltinNode);
            std::vector<flatbuffers::Offset<Mtl::SpecializedFunctionLibrary>>::push_back[abi:ne180100]((uint64_t)&v315, &v312);
          }
          goto LABEL_259;
        }
        *((_BYTE *)a1 + 70) = 1;
        v193 = *((_DWORD *)a1 + 8);
        v194 = *((_DWORD *)a1 + 12);
        v195 = *((_DWORD *)a1 + 10);
        v196 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 1);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v196);
        v197 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v193 - (unsigned __int16)v194 + v195);
        *((_BYTE *)a1 + 70) = 1;
        v198 = *((_DWORD *)a1 + 8);
        v199 = *((_DWORD *)a1 + 12);
        v200 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v197);
        v201 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)a1, 10);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v201);
        v89 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v198 - (unsigned __int16)v199 + v200);
        v90 = v316;
        if (v316 >= v317)
        {
          v117 = (char *)v315;
          v202 = (v316 - (_BYTE *)v315) >> 2;
          v203 = v202 + 1;
          if ((unint64_t)(v202 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v204 = v317 - (_BYTE *)v315;
          if ((v317 - (_BYTE *)v315) >> 1 > v203)
            v203 = v204 >> 1;
          if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL)
            v121 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v121 = v203;
          if (v121)
          {
            v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v317, v121);
            v117 = (char *)v315;
            v90 = v316;
          }
          else
          {
            v122 = 0;
          }
          v161 = &v122[4 * v202];
          *(_DWORD *)v161 = v89;
          v91 = v161 + 4;
          while (v90 != v117)
          {
            v209 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v161 - 1) = v209;
            v161 -= 4;
          }
          goto LABEL_256;
        }
      }
      *(_DWORD *)v90 = v89;
      v91 = v90 + 4;
LABEL_258:
      v316 = v91;
LABEL_259:
      v3 = v287 + 1;
    }
    while (v287 + 1 != v285);
  }
  v210 = a2;
  v211 = -[NSString UTF8String](-[MTLFunctionStitchingGraph functionName](a2, "functionName"), "UTF8String");
  v212 = strlen(v211);
  v213 = flatbuffers::FlatBufferBuilder::CreateString(a1, v211, v212);
  v312 = 0;
  v313 = 0;
  v314 = 0;
  v290 = 0u;
  v291 = 0u;
  v292 = 0u;
  v293 = 0u;
  v214 = -[MTLFunctionStitchingGraph attributes](a2, "attributes");
  v215 = -[NSArray countByEnumeratingWithState:objects:count:](v214, "countByEnumeratingWithState:objects:count:", &v290, v321, 16);
  if (!v215)
  {
LABEL_305:
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      *((_BYTE *)a1 + 70) = 1;
      v253 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_DWORD *)a1 + 10));
      *((_BYTE *)a1 + 70) = 1;
      v254 = *((_DWORD *)a1 + 8);
      v255 = *((_DWORD *)a1 + 12);
      v256 = *((_DWORD *)a1 + 10);
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v253);
      v257 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
      flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v257);
      v258 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v254 - (unsigned __int16)v255 + v256);
      v259 = v258;
      v260 = v313;
      if (v313 >= v314)
      {
        v262 = (char *)v312;
        v263 = (v313 - (_BYTE *)v312) >> 2;
        v264 = v263 + 1;
        if ((unint64_t)(v263 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v265 = v314 - (_BYTE *)v312;
        if ((v314 - (_BYTE *)v312) >> 1 > v264)
          v264 = v265 >> 1;
        if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL)
          v266 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v266 = v264;
        if (v266)
        {
          v267 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v266);
          v262 = (char *)v312;
          v260 = v313;
        }
        else
        {
          v267 = 0;
        }
        v268 = &v267[4 * v263];
        v269 = &v267[4 * v266];
        *(_DWORD *)v268 = v259;
        v261 = v268 + 4;
        while (v260 != v262)
        {
          v270 = *((_DWORD *)v260 - 1);
          v260 -= 4;
          *((_DWORD *)v268 - 1) = v270;
          v268 -= 4;
        }
        v312 = v268;
        v313 = v261;
        v314 = v269;
        if (v262)
          operator delete(v262);
      }
      else
      {
        *(_DWORD *)v313 = v258;
        v261 = v260 + 4;
      }
      v313 = v261;
    }
    goto LABEL_323;
  }
  v288 = v213;
  v289 = 0;
  v216 = *(_QWORD *)v291;
  do
  {
    for (m = 0; m != v215; ++m)
    {
      if (*(_QWORD *)v291 != v216)
        objc_enumerationMutation(v214);
      v218 = *(void **)(*((_QWORD *)&v290 + 1) + 8 * m);
      if (objc_msgSend(v218, "isMemberOfClass:", objc_opt_class()))
      {
        *((_BYTE *)a1 + 70) = 1;
        v219 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_WORD *)a1 + 20));
        *((_BYTE *)a1 + 70) = 1;
        v220 = *((_DWORD *)a1 + 8);
        v221 = *((_DWORD *)a1 + 12);
        v222 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v219);
        v223 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 1);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v223);
        v224 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v220 - (unsigned __int16)v221 + v222);
        v225 = v224;
        v226 = v313;
        if (v313 >= v314)
        {
          v237 = (char *)v312;
          v238 = (v313 - (_BYTE *)v312) >> 2;
          v239 = v238 + 1;
          if ((unint64_t)(v238 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v240 = v314 - (_BYTE *)v312;
          if ((v314 - (_BYTE *)v312) >> 1 > v239)
            v239 = v240 >> 1;
          if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL)
            v241 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v241 = v239;
          if (v241)
          {
            v242 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v241);
            v237 = (char *)v312;
            v226 = v313;
          }
          else
          {
            v242 = 0;
          }
          v249 = &v242[4 * v238];
          *(_DWORD *)v249 = v225;
          v236 = v249 + 4;
          while (v226 != v237)
          {
            v250 = *((_DWORD *)v226 - 1);
            v226 -= 4;
            *((_DWORD *)v249 - 1) = v250;
            v249 -= 4;
          }
          v312 = v249;
          v313 = v236;
          v314 = &v242[4 * v241];
          if (v237)
            operator delete(v237);
          goto LABEL_301;
        }
        *(_DWORD *)v313 = v224;
        v227 = v226 + 4;
      }
      else
      {
        if (!objc_msgSend(v218, "isMemberOfClass:", objc_opt_class()))
          continue;
        *((_BYTE *)a1 + 70) = 1;
        v228 = flatbuffers::FlatBufferBuilder::EndTable(a1, *((_WORD *)a1 + 16) - *((_WORD *)a1 + 24) + *((_WORD *)a1 + 20));
        *((_BYTE *)a1 + 70) = 1;
        v229 = *((_DWORD *)a1 + 8);
        v230 = *((_DWORD *)a1 + 12);
        v231 = *((_DWORD *)a1 + 10);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v228);
        v232 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
        flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 4, v232);
        v233 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v229 - (unsigned __int16)v230 + v231);
        v234 = v233;
        v235 = v313;
        if (v313 >= v314)
        {
          v243 = (char *)v312;
          v244 = (v313 - (_BYTE *)v312) >> 2;
          v245 = v244 + 1;
          if ((unint64_t)(v244 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v246 = v314 - (_BYTE *)v312;
          if ((v314 - (_BYTE *)v312) >> 1 > v245)
            v245 = v246 >> 1;
          if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL)
            v247 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v247 = v245;
          if (v247)
          {
            v248 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v314, v247);
            v243 = (char *)v312;
            v235 = v313;
          }
          else
          {
            v248 = 0;
          }
          v251 = &v248[4 * v244];
          *(_DWORD *)v251 = v234;
          v236 = v251 + 4;
          while (v235 != v243)
          {
            v252 = *((_DWORD *)v235 - 1);
            v235 -= 4;
            *((_DWORD *)v251 - 1) = v252;
            v251 -= 4;
          }
          v312 = v251;
          v313 = v236;
          v314 = &v248[4 * v247];
          if (v243)
            operator delete(v243);
          v289 = 1;
          goto LABEL_301;
        }
        *(_DWORD *)v313 = v233;
        v227 = v235 + 4;
        v289 = 1;
      }
      v236 = v227;
LABEL_301:
      v313 = v236;
    }
    v215 = -[NSArray countByEnumeratingWithState:objects:count:](v214, "countByEnumeratingWithState:objects:count:", &v290, v321, 16);
  }
  while (v215);
  v210 = a2;
  v213 = v288;
  if ((v289 & 1) == 0)
    goto LABEL_305;
LABEL_323:
  if (v313 == v312)
    v271 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Attribute>> const&)::t;
  else
    v271 = v312;
  v272 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v271, (v313 - (_BYTE *)v312) >> 2);
  if (v316 == v315)
    v273 = &flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Node>> const&)::t;
  else
    v273 = v315;
  v274 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v273, (v316 - (_BYTE *)v315) >> 2);
  if (-[MTLFunctionStitchingGraph outputNode](v210, "outputNode"))
  {
    __p[0] = -[MTLFunctionStitchingGraph outputNode](v210, "outputNode");
    v309 = __p;
    v275 = *((_DWORD *)std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode}&&>,std::piecewise_construct_t const&<>>((uint64_t)v320, __p, (uint64_t)&std::piecewise_construct, (_QWORD **)&v309)+ 6);
  }
  else
  {
    v275 = 0;
  }
  LODWORD(v304) = v275;
  v276 = -[MTLFunctionStitchingGraph outputNode](v210, "outputNode");
  v277 = v272;
  *((_BYTE *)a1 + 70) = 1;
  v278 = *((_DWORD *)a1 + 8);
  v279 = *((_DWORD *)a1 + 12);
  v280 = *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 10, v277);
  if (v276)
    v281 = &v304;
  else
    v281 = 0;
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)a1, 8, v281);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v274);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, v213);
  v282 = flatbuffers::FlatBufferBuilder::EndTable(a1, (unsigned __int16)v278 - (unsigned __int16)v279 + v280);
  if (v312)
  {
    v313 = (char *)v312;
    operator delete(v312);
  }
  if (v315)
  {
    v316 = (char *)v315;
    operator delete(v315);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v320);
  if (v318)
  {
    v319 = (id *)v318;
    operator delete(v318);
  }
  return v282;
}

void sub_18274A810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,uint64_t a63)
{
  char a64;

  if (__p)
    operator delete(__p);
  std::pair<std::vector<objc_object  {objcproto24MTLFunctionStitchingNode}*>,std::unordered_map<objc_object  {objcproto24MTLFunctionStitchingNode},unsigned int,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,objc_object  {objcproto24MTLFunctionStitchingNode}*<std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>>>::~pair((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void createStitchingScriptHashImpl(uint64_t a1@<X0>, int *a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  Air::FunctionStitching::Graph *v14;
  void *v15;
  __int128 v16;
  void *__p[3];
  CC_SHA256_CTX c;

  v6 = *(unint64_t **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = 126 - 2 * __clz((uint64_t)(v7 - (_QWORD)v6) >> 5);
  if ((unint64_t *)v7 == v6)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*,false>(v6, v7, v9, 1);
  v10 = 0;
  v11 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v11 >= 9u)
  {
    v10 = (int *)v11[4];
    if (v11[4])
      v10 = (int *)((char *)v10 + (_QWORD)a2 + *(unsigned int *)((char *)v10 + (_QWORD)a2));
  }
  v12 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v12 >= 7u && (v13 = v12[3]) != 0)
    v14 = (Air::FunctionStitching::Graph *)((char *)v10 + v13 + *(unsigned int *)((char *)v10 + v13));
  else
    v14 = 0;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, *(const void **)a1, (*(_DWORD *)(a1 + 8) - *(_QWORD *)a1) & 0xFFFFFFE0);
  Air::FunctionStitching::Graph::HashImpl(v14, &c);
  flatbuffers::SignatureBuilder::Create(&c, (unsigned __int8 **)__p);
  v15 = __p[0];
  v16 = *((_OWORD *)__p[0] + 1);
  *a3 = *(_OWORD *)__p[0];
  a3[1] = v16;
  __p[1] = v15;
  operator delete(v15);
}

uint64_t Air::FunctionStitching::Graph::HashImpl(Air::FunctionStitching::Graph *this, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t result;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.Graph", 0x1Bu);
  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)this + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)this + v12 + *(unsigned int *)((char *)this + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = v13 + 1;
      v16 = v13 + 1;
      do
      {
        v17 = *v16++;
        Air::FunctionStitching::Node::HashImpl((Air::FunctionStitching::Node *)((char *)v15 + v17), c);
        v15 = v16;
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v18 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v18 >= 9u && (v19 = v18[4]) != 0)
  {
    v20 = v19;
    CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
    data = *(_DWORD *)((char *)this + v20);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 0xBu && (v22 = v21[5]) != 0)
  {
    v23 = (unsigned int *)((char *)this + v22 + *(unsigned int *)((char *)this + v22));
    data = *v23;
    result = CC_SHA256_Update(c, &data, 4u);
    v25 = *v23;
    if ((_DWORD)v25)
    {
      v26 = v23 + 1;
      v27 = v23 + 1;
      do
      {
        v28 = *v27++;
        result = Air::FunctionStitching::Attribute::HashImpl((Mtl::FunctionStitching::Attribute *)((char *)v26 + v28), c);
        v26 = v27;
        --v25;
      }
      while (v25);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t _MTLCreateStitchingScriptFromStichedLibraryDescriptor(flatbuffers::FlatBufferBuilder *a1, MTLStitchedLibraryDescriptor *a2, uint64_t a3)
{
  MTLStitchedLibraryDescriptor *v4;
  int FunctionArray;
  int Graph;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  LODWORD(v13) = 0;
  FunctionArray = createFunctionArray(a1, -[MTLStitchedLibraryDescriptor functions](a2, "functions", 0x300000000, v13));
  Graph = createGraph(a1, (MTLFunctionStitchingGraph *)-[NSArray objectAtIndexedSubscript:](-[MTLStitchedLibraryDescriptor functionGraphs](v4, "functionGraphs"), "objectAtIndexedSubscript:", a3));
  *((_BYTE *)a1 + 70) = 1;
  LODWORD(v4) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, Graph);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 4, FunctionArray);
  v8 = flatbuffers::FlatBufferBuilder::EndTable(a1, (__int16)v4);
  *((_BYTE *)a1 + 70) = 1;
  LODWORD(a3) = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 8, v8);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)a1, 4, &v12);
  v9 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)a1, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)a1, 6, v9);
  v10 = flatbuffers::FlatBufferBuilder::EndTable(a1, a3);
  flatbuffers::FlatBufferBuilder::Finish(a1, v10, "AIRS", 0);
  return *((_QWORD *)a1 + 6) + **((unsigned int **)a1 + 6);
}

void MTLCalculateStitchingHash(int *a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned __int16 *v3;
  int *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int *v13;
  unsigned int *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  const Air::FunctionStitching::Node **v21;
  const Air::FunctionStitching::Node **v22;
  uint64_t v23;
  AirReflection::Node **v24;
  const Air::FunctionStitching::Node **v25;
  Air::FunctionStitching::Node *v26;
  AirReflection::Node **v27;
  uint64_t v28;
  AirReflection::Node **v29;
  Air::FunctionStitching::Node *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  const Air::FunctionStitching::Node **v34;
  int64_t v35;
  unsigned int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  Air::FunctionStitching::Node **v48;
  Air::FunctionStitching::Node **v49;
  Air::FunctionStitching::Node *v50;
  unsigned __int16 *v51;
  uint64_t v52;
  int v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int *v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int *v82;
  int v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  int v93;
  const unsigned __int8 *v94;
  int v95;
  const unsigned __int8 *v96;
  int v97;
  const char *v98;
  uint64_t v99;
  int String;
  int v101;
  int v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  char *v111;
  int v112;
  int *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int16 *v117;
  unsigned __int16 v118;
  unsigned int *v119;
  unsigned __int16 *v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int *v125;
  unsigned int *v126;
  int v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  int v137;
  const unsigned __int8 *v138;
  int v139;
  __int16 v140;
  __int16 v141;
  __int16 v142;
  int v143;
  __int16 v144;
  __int16 v145;
  __int16 v146;
  unsigned int v147;
  int v148;
  int v149;
  char *v150;
  char *v151;
  int v152;
  __int16 v153;
  __int16 v154;
  __int16 v155;
  int v156;
  __int16 v157;
  __int16 v158;
  __int16 v159;
  unsigned int v160;
  int v161;
  int v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  char *v177;
  int v178;
  char *v179;
  int v180;
  int *v181;
  int *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  unsigned __int16 *v186;
  uint64_t v187;
  const char *v188;
  const char *v189;
  uint64_t v190;
  int v191;
  int *v192;
  unsigned __int16 *v193;
  uint64_t v194;
  unsigned __int16 *v195;
  int *v196;
  unsigned __int16 *v197;
  uint64_t v198;
  unsigned int *v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  unsigned int *v203;
  int v204;
  int v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  char *v214;
  int v215;
  char *v216;
  char *v217;
  int v218;
  char *v219;
  int v220;
  int *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  unsigned __int16 *v225;
  uint64_t v226;
  int *v227;
  unsigned __int16 *v228;
  unsigned __int16 v229;
  unsigned int *v230;
  unsigned __int16 *v231;
  int *v232;
  unsigned __int16 *v233;
  uint64_t v234;
  int *v235;
  unsigned __int16 *v236;
  _BOOL4 v237;
  __int16 v238;
  __int16 v239;
  __int16 v240;
  uint64_t *v241;
  int v242;
  int *v243;
  unsigned __int16 *v244;
  unsigned int *v245;
  uint64_t v246;
  uint64_t v247;
  const char *v248;
  unsigned int *v249;
  int v250;
  int v251;
  char *v252;
  char *v253;
  char *v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char *v259;
  char *v260;
  int v261;
  char *v262;
  char *v263;
  int v264;
  int v265;
  __int16 v266;
  __int16 v267;
  __int16 v268;
  int v269;
  __int16 v270;
  __int16 v271;
  unsigned int v272;
  int v273;
  int *v274;
  AirReflection::Node **v275;
  uint64_t v276;
  uint64_t v277;
  void *v281;
  __int128 v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  void *v287;
  char *v288;
  char *v289;
  void *__p;
  char *v291;
  char *v292;
  const Air::FunctionStitching::Node **v293;
  char v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  __int16 v300;
  uint64_t v301;
  char *v302;
  char *v303;
  _QWORD v304[3];
  char *v305;
  char *v306;
  char *v307;
  _OWORD v308[2];
  int v309;
  const Air::FunctionStitching::Node **v310;
  const Air::FunctionStitching::Node **v311;
  char *v312;

  v3 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v3 < 9u)
  {
    v4 = 0;
  }
  else
  {
    v4 = (int *)v3[4];
    if (v4)
      v4 = (int *)((char *)v4 + (_QWORD)a1 + *(unsigned int *)((char *)v4 + (_QWORD)a1));
  }
  v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if (*v5 >= 7u && (v6 = v5[3]) != 0)
    v7 = (int *)((char *)v4 + v6 + *(unsigned int *)((char *)v4 + v6));
  else
    v7 = 0;
  v8 = (unsigned int *)((char *)v7 + *(unsigned __int16 *)((char *)v7 - *v7 + 6));
  v9 = *v8;
  v310 = 0;
  v311 = 0;
  v312 = 0;
  v11 = (uint64_t)v8 + v9 + 4;
  v10 = *(unsigned int *)((char *)v8 + v9);
  if ((_DWORD)v10)
  {
    v12 = 0;
    v13 = (unsigned int *)(v11 + 4 * v10);
    v14 = (unsigned int *)v11;
    do
    {
      v15 = (char *)v14 + *v14;
      if (v12 >= v312)
      {
        v16 = (v12 - (char *)v310) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v17 = (v312 - (char *)v310) >> 2;
        if (v17 <= v16 + 1)
          v17 = v16 + 1;
        if ((unint64_t)(v312 - (char *)v310) >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v312, v18);
        else
          v19 = 0;
        v20 = &v19[8 * v16];
        *(_QWORD *)v20 = v15;
        v12 = v20 + 8;
        v22 = v310;
        v21 = v311;
        if (v311 != v310)
        {
          do
          {
            v23 = (uint64_t)*--v21;
            *((_QWORD *)v20 - 1) = v23;
            v20 -= 8;
          }
          while (v21 != v22);
          v21 = v310;
        }
        v310 = (const Air::FunctionStitching::Node **)v20;
        v311 = (const Air::FunctionStitching::Node **)v12;
        v312 = &v19[8 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v12 = v15;
        v12 += 8;
      }
      v311 = (const Air::FunctionStitching::Node **)v12;
      ++v14;
    }
    while (v14 != v13);
    v24 = v310;
    if (v310 != (const Air::FunctionStitching::Node **)v12)
    {
      v25 = v310;
      while (1)
      {
        v26 = *v25;
        if (AirReflection::Node::node_as_KernelFunction(*v25)
          || Air::FunctionStitching::Node::node_as_EarlyReturnNode(v26))
        {
          break;
        }
        ++v25;
        ++v24;
        if (v25 == (const Air::FunctionStitching::Node **)v12)
          goto LABEL_41;
      }
      v27 = (AirReflection::Node **)(v12 - 8);
      if (v25 == v27)
      {
LABEL_40:
        v12 = (char *)v25;
      }
      else
      {
        v28 = (char *)v27 - (char *)v24;
        v29 = v27;
        while (1)
        {
          v30 = *v29;
          if (!AirReflection::Node::node_as_KernelFunction(*v29)
            && !Air::FunctionStitching::Node::node_as_EarlyReturnNode(v30))
          {
            break;
          }
          --v29;
          --v27;
          v28 -= 8;
          if (v25 == v29)
            goto LABEL_40;
        }
        if (v28 < 17)
        {
          v275 = 0;
          v277 = 0;
        }
        else
        {
          v275 = (AirReflection::Node **)std::get_temporary_buffer[abi:ne180100]<objc_object  {objcproto24MTLFunctionStitchingNode}*>((v28 >> 3) + 1);
          v277 = v276;
        }
        v12 = std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(v24, v27, (v28 >> 3) + 1, v275, v277);
        if (v275)
          operator delete(v275);
      }
    }
  }
  else
  {
    v12 = 0;
  }
LABEL_41:
  v31 = (v12 - (char *)v310) >> 3;
  v32 = 126 - 2 * __clz(v31);
  if (v12 == (char *)v310)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,false>((uint64_t)v310, (const Air::FunctionStitching::Node **)v12, v33, 1);
  memset(v308, 0, sizeof(v308));
  v309 = 1065353216;
  v305 = 0;
  v306 = 0;
  v307 = 0;
  v34 = v310;
  if (v311 != v310)
  {
    v35 = 0;
    v36 = 0;
    while (1)
    {
      if (!v36 || v31 <= v35)
        goto LABEL_51;
      NodeKey::NodeKey((NodeKey *)&v293, v34[v35]);
      NodeKey::NodeKey((NodeKey *)&v302, v310[v36 - 1]);
      if (!NodeKey::operator==((int *)&v293, (uint64_t)&v302))
        break;
      v37 = v306;
LABEL_68:
      v47 = v305;
      v293 = &v310[v35];
      *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const* const&>,std::tuple<>>((uint64_t)v308, v293, (uint64_t)&std::piecewise_construct, &v293)+ 6) = ((unint64_t)(v37 - v47) >> 3) - 1;
      v34 = v310;
      v35 = ++v36;
      if (v36 >= (unint64_t)(v311 - v310))
      {
        v48 = (Air::FunctionStitching::Node **)v305;
        v49 = (Air::FunctionStitching::Node **)v306;
        goto LABEL_71;
      }
    }
    v34 = v310;
LABEL_51:
    v38 = v306;
    if (v306 >= v307)
    {
      v39 = (v306 - v305) >> 3;
      if ((unint64_t)(v39 + 1) >> 61)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v40 = (v307 - v305) >> 2;
      if (v40 <= v39 + 1)
        v40 = v39 + 1;
      if ((unint64_t)(v307 - v305) >= 0x7FFFFFFFFFFFFFF8)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      if (v41)
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v307, v41);
      else
        v42 = 0;
      v43 = &v42[8 * v39];
      *(_QWORD *)v43 = v34[v35];
      v37 = v43 + 8;
      v45 = v305;
      v44 = v306;
      if (v306 != v305)
      {
        do
        {
          v46 = *((_QWORD *)v44 - 1);
          v44 -= 8;
          *((_QWORD *)v43 - 1) = v46;
          v43 -= 8;
        }
        while (v44 != v45);
        v44 = v305;
      }
      v305 = v43;
      v306 = v37;
      v307 = &v42[8 * v41];
      if (v44)
        operator delete(v44);
    }
    else
    {
      *(_QWORD *)v306 = v34[v35];
      v37 = v38 + 8;
    }
    v306 = v37;
    goto LABEL_68;
  }
  v49 = 0;
  v48 = 0;
LABEL_71:
  v293 = 0;
  v294 = 0;
  v295 = xmmword_182809F30;
  v296 = 0u;
  v297 = 0u;
  v298 = 0;
  v299 = 1;
  v300 = 256;
  v301 = 0;
  v302 = 0;
  v303 = 0;
  v304[0] = 0;
  if (v48 != v49)
  {
    while (1)
    {
      v50 = *v48;
      v51 = (unsigned __int16 *)((char *)*v48 - *(int *)*v48);
      if (*v51 < 5u)
        break;
      v52 = v51[2];
      if (!v52)
        break;
      v53 = *(_DWORD *)((char *)v50 + v52);
      if (v53 == 11)
      {
        LODWORD(v286) = 0;
        __p = 0;
        v291 = 0;
        v292 = 0;
        v113 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(v50);
        v114 = v113;
        v115 = *v113;
        v116 = -v115;
        v117 = (unsigned __int16 *)((char *)v113 - v115);
        if (*v117 >= 5u)
        {
          v118 = v117[2];
          if (v118)
          {
            v119 = (unsigned int *)(v11 + 4 * *(unsigned int *)((char *)v113 + v118));
            v284 = (uint64_t)v119 + *v119;
            v287 = &v284;
            LODWORD(v286) = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v284, (uint64_t)&std::piecewise_construct, (_QWORD **)&v287)+ 6);
            v116 = -(uint64_t)*v114;
          }
        }
        v120 = (unsigned __int16 *)((char *)v114 + v116);
        if (*v120 >= 7u)
        {
          v121 = v120[3];
          if (v121)
          {
            v122 = (unsigned int *)((char *)v114 + v121);
            v123 = *v122;
            v125 = (unsigned int *)((char *)v122 + v123 + 4);
            v124 = *(unsigned int *)((char *)v122 + v123);
            if ((_DWORD)v124)
            {
              v126 = &v125[v124];
              do
              {
                v284 = v11 + 4 * *v125 + *(unsigned int *)(v11 + 4 * *v125);
                v287 = &v284;
                v127 = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v284, (uint64_t)&std::piecewise_construct, (_QWORD **)&v287)+ 6);
                v128 = v291;
                if (v291 >= v292)
                {
                  v130 = (char *)__p;
                  v131 = (v291 - (_BYTE *)__p) >> 2;
                  v132 = v131 + 1;
                  if ((unint64_t)(v131 + 1) >> 62)
                    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                  v133 = v292 - (_BYTE *)__p;
                  if ((v292 - (_BYTE *)__p) >> 1 > v132)
                    v132 = v133 >> 1;
                  if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                    v134 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v134 = v132;
                  if (v134)
                  {
                    v135 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v292, v134);
                    v130 = (char *)__p;
                    v128 = v291;
                  }
                  else
                  {
                    v135 = 0;
                  }
                  v136 = &v135[4 * v131];
                  *(_DWORD *)v136 = v127;
                  v129 = v136 + 4;
                  while (v128 != v130)
                  {
                    v137 = *((_DWORD *)v128 - 1);
                    v128 -= 4;
                    *((_DWORD *)v136 - 1) = v137;
                    v136 -= 4;
                  }
                  __p = v136;
                  v291 = v129;
                  v292 = &v135[4 * v134];
                  if (v130)
                    operator delete(v130);
                }
                else
                {
                  *(_DWORD *)v291 = v127;
                  v129 = v128 + 4;
                }
                v291 = v129;
                ++v125;
              }
              while (v125 != v126);
            }
          }
        }
        if (v291 == __p)
          v138 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        else
          v138 = (const unsigned __int8 *)__p;
        v139 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, v138, (v291 - (_BYTE *)__p) >> 2);
        BYTE6(v298) = 1;
        v140 = v297;
        v141 = v296;
        v142 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 6, v139);
        flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)&v293, 4, &v286);
        v143 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v141 - v140 + v142);
        BYTE6(v298) = 1;
        v144 = v297;
        v145 = v296;
        v146 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 6, v143);
        v147 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v293, 11);
        flatbuffers::FlatBufferBuilder::TrackField((char *)&v293, 4, v147);
        v148 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v145 - v144 + v146);
        v149 = v148;
        v150 = v303;
        if ((unint64_t)v303 >= v304[0])
        {
          v165 = v302;
          v166 = (v303 - v302) >> 2;
          v167 = v166 + 1;
          if ((unint64_t)(v166 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v168 = v304[0] - (_QWORD)v302;
          if ((uint64_t)(v304[0] - (_QWORD)v302) >> 1 > v167)
            v167 = v168 >> 1;
          if ((unint64_t)v168 >= 0x7FFFFFFFFFFFFFFCLL)
            v169 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v169 = v167;
          if (v169)
          {
            v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v304, v169);
            v165 = v302;
            v150 = v303;
          }
          else
          {
            v170 = 0;
          }
          v177 = &v170[4 * v166];
          *(_DWORD *)v177 = v149;
          v151 = v177 + 4;
          while (v150 != v165)
          {
            v178 = *((_DWORD *)v150 - 1);
            v150 -= 4;
            *((_DWORD *)v177 - 1) = v178;
            v177 -= 4;
          }
          v302 = v177;
          v303 = v151;
          v304[0] = &v170[4 * v169];
          if (v165)
            operator delete(v165);
        }
        else
        {
          *(_DWORD *)v303 = v148;
          v151 = v150 + 4;
        }
        v303 = v151;
      }
      else
      {
        if (v53 != 2)
          break;
        __p = 0;
        v291 = 0;
        v292 = 0;
        v287 = 0;
        v288 = 0;
        v289 = 0;
        v54 = (const char *)AirReflection::Node::node_as_KernelFunction(v50);
        v55 = v54;
        v56 = *(int *)v54;
        v57 = -v56;
        v58 = &v54[-v56];
        if (*(unsigned __int16 *)v58 >= 7u)
        {
          v59 = *((unsigned __int16 *)v58 + 3);
          if (v59)
          {
            v60 = &v54[v59];
            v61 = *(unsigned int *)v60;
            v63 = (unsigned int *)&v60[v61 + 4];
            v62 = *(unsigned int *)&v60[v61];
            if ((_DWORD)v62)
            {
              v64 = &v63[v62];
              do
              {
                v286 = v11 + 4 * *v63 + *(unsigned int *)(v11 + 4 * *v63);
                v284 = (uint64_t)&v286;
                v65 = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v286, (uint64_t)&std::piecewise_construct, (_QWORD **)&v284)+ 6);
                v66 = v291;
                if (v291 >= v292)
                {
                  v68 = (char *)__p;
                  v69 = (v291 - (_BYTE *)__p) >> 2;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 62)
                    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                  v71 = v292 - (_BYTE *)__p;
                  if ((v292 - (_BYTE *)__p) >> 1 > v70)
                    v70 = v71 >> 1;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                    v72 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v292, v72);
                    v68 = (char *)__p;
                    v66 = v291;
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[4 * v69];
                  *(_DWORD *)v74 = v65;
                  v67 = v74 + 4;
                  while (v66 != v68)
                  {
                    v75 = *((_DWORD *)v66 - 1);
                    v66 -= 4;
                    *((_DWORD *)v74 - 1) = v75;
                    v74 -= 4;
                  }
                  __p = v74;
                  v291 = v67;
                  v292 = &v73[4 * v72];
                  if (v68)
                    operator delete(v68);
                }
                else
                {
                  *(_DWORD *)v291 = v65;
                  v67 = v66 + 4;
                }
                v291 = v67;
                ++v63;
              }
              while (v63 != v64);
              v57 = -(uint64_t)*(int *)v55;
            }
          }
        }
        v76 = &v55[v57];
        if (*(unsigned __int16 *)v76 >= 9u)
        {
          v77 = *((unsigned __int16 *)v76 + 4);
          if (v77)
          {
            v78 = &v55[v77];
            v79 = *(unsigned int *)v78;
            v81 = (unsigned int *)&v78[v79 + 4];
            v80 = *(unsigned int *)&v78[v79];
            if ((_DWORD)v80)
            {
              v82 = &v81[v80];
              do
              {
                v286 = v11 + 4 * *v81 + *(unsigned int *)(v11 + 4 * *v81);
                v284 = (uint64_t)&v286;
                v83 = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v286, (uint64_t)&std::piecewise_construct, (_QWORD **)&v284)+ 6);
                v84 = v288;
                if (v288 >= v289)
                {
                  v86 = (char *)v287;
                  v87 = (v288 - (_BYTE *)v287) >> 2;
                  v88 = v87 + 1;
                  if ((unint64_t)(v87 + 1) >> 62)
                    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
                  v89 = v289 - (_BYTE *)v287;
                  if ((v289 - (_BYTE *)v287) >> 1 > v88)
                    v88 = v89 >> 1;
                  if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
                    v90 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v90 = v88;
                  if (v90)
                  {
                    v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v289, v90);
                    v86 = (char *)v287;
                    v84 = v288;
                  }
                  else
                  {
                    v91 = 0;
                  }
                  v92 = &v91[4 * v87];
                  *(_DWORD *)v92 = v83;
                  v85 = v92 + 4;
                  while (v84 != v86)
                  {
                    v93 = *((_DWORD *)v84 - 1);
                    v84 -= 4;
                    *((_DWORD *)v92 - 1) = v93;
                    v92 -= 4;
                  }
                  v287 = v92;
                  v288 = v85;
                  v289 = &v91[4 * v90];
                  if (v86)
                    operator delete(v86);
                }
                else
                {
                  *(_DWORD *)v288 = v83;
                  v85 = v84 + 4;
                }
                v288 = v85;
                ++v81;
              }
              while (v81 != v82);
            }
          }
        }
        if (v291 == __p)
          v94 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        else
          v94 = (const unsigned __int8 *)__p;
        v95 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, v94, (v291 - (_BYTE *)__p) >> 2);
        if (v288 == v287)
          v96 = (const unsigned __int8 *)&flatbuffers::data<Air::FunctionStitching::NodeId,std::allocator<Air::FunctionStitching::NodeId>>(std::vector<Air::FunctionStitching::NodeId> const&)::t;
        else
          v96 = (const unsigned __int8 *)v287;
        v97 = flatbuffers::FlatBufferBuilder::CreateVectorOfStructs<Mtl::FunctionStitching::NodeId>((flatbuffers::FlatBufferBuilder *)&v293, v96, (v288 - (_BYTE *)v287) >> 2);
        v98 = &v55[-*(int *)v55];
        if (*(unsigned __int16 *)v98 >= 5u && (v99 = *((unsigned __int16 *)v98 + 2)) != 0)
          String = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v293, &v55[v99 + 4 + *(unsigned int *)&v55[v99]], *(unsigned int *)&v55[v99 + *(unsigned int *)&v55[v99]]);
        else
          String = 0;
        v152 = v97;
        BYTE6(v298) = 1;
        v153 = v297;
        v154 = v296;
        v155 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 8, v152);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 6, v95);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 4, String);
        v156 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v154 - v153 + v155);
        BYTE6(v298) = 1;
        v157 = v297;
        v158 = v296;
        v159 = WORD4(v296);
        flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 6, v156);
        v160 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)&v293, 2);
        flatbuffers::FlatBufferBuilder::TrackField((char *)&v293, 4, v160);
        v161 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v158 - v157 + v159);
        v162 = v161;
        v163 = v303;
        if ((unint64_t)v303 >= v304[0])
        {
          v171 = v302;
          v172 = (v303 - v302) >> 2;
          v173 = v172 + 1;
          if ((unint64_t)(v172 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v174 = v304[0] - (_QWORD)v302;
          if ((uint64_t)(v304[0] - (_QWORD)v302) >> 1 > v173)
            v173 = v174 >> 1;
          if ((unint64_t)v174 >= 0x7FFFFFFFFFFFFFFCLL)
            v175 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v175 = v173;
          if (v175)
          {
            v176 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v304, v175);
            v171 = v302;
            v163 = v303;
          }
          else
          {
            v176 = 0;
          }
          v179 = &v176[4 * v172];
          *(_DWORD *)v179 = v162;
          v164 = v179 + 4;
          while (v163 != v171)
          {
            v180 = *((_DWORD *)v163 - 1);
            v163 -= 4;
            *((_DWORD *)v179 - 1) = v180;
            v179 -= 4;
          }
          v302 = v179;
          v303 = v164;
          v304[0] = &v176[4 * v175];
          if (v171)
            operator delete(v171);
        }
        else
        {
          *(_DWORD *)v303 = v161;
          v164 = v163 + 4;
        }
        v303 = v164;
        if (v287)
        {
          v288 = (char *)v287;
          operator delete(v287);
        }
      }
      if (__p)
      {
        v291 = (char *)__p;
        operator delete(__p);
      }
LABEL_145:
      if (++v48 == v49)
        goto LABEL_212;
    }
    v101 = Air::FunctionStitching::CloneNode<Air::FunctionStitching::Node>((uint64_t)&v293, v50);
    v102 = v101;
    v103 = v303;
    if ((unint64_t)v303 >= v304[0])
    {
      v105 = v302;
      v106 = (v303 - v302) >> 2;
      v107 = v106 + 1;
      if ((unint64_t)(v106 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v108 = v304[0] - (_QWORD)v302;
      if ((uint64_t)(v304[0] - (_QWORD)v302) >> 1 > v107)
        v107 = v108 >> 1;
      if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL)
        v109 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v109 = v107;
      if (v109)
      {
        v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v304, v109);
        v105 = v302;
        v103 = v303;
      }
      else
      {
        v110 = 0;
      }
      v111 = &v110[4 * v106];
      *(_DWORD *)v111 = v102;
      v104 = v111 + 4;
      while (v103 != v105)
      {
        v112 = *((_DWORD *)v103 - 1);
        v103 -= 4;
        *((_DWORD *)v111 - 1) = v112;
        v111 -= 4;
      }
      v302 = v111;
      v303 = v104;
      v304[0] = &v110[4 * v109];
      if (v105)
        operator delete(v105);
    }
    else
    {
      *(_DWORD *)v303 = v101;
      v104 = v103 + 4;
    }
    v303 = v104;
    goto LABEL_145;
  }
LABEL_212:
  v181 = 0;
  v182 = a1;
  v183 = *a1;
  v184 = (char *)a1 - v183;
  if (*(unsigned __int16 *)((char *)a1 - v183) >= 9u)
  {
    v181 = (int *)*((unsigned __int16 *)v184 + 4);
    if (*((_WORD *)v184 + 4))
      v181 = (int *)((char *)v181 + (_QWORD)a1 + *(unsigned int *)((char *)v181 + (_QWORD)a1));
  }
  v185 = -v183;
  v186 = (unsigned __int16 *)((char *)v181 - *v181);
  if (*v186 >= 7u && (v187 = v186[3]) != 0)
    v188 = (char *)v181 + v187 + *(unsigned int *)((char *)v181 + v187);
  else
    v188 = 0;
  v189 = &v188[-*(int *)v188];
  if (*(unsigned __int16 *)v189 >= 5u && (v190 = *((unsigned __int16 *)v189 + 2)) != 0)
  {
    v191 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v293, &v188[v190 + 4 + *(unsigned int *)&v188[v190]], *(unsigned int *)&v188[v190 + *(unsigned int *)&v188[v190]]);
    v185 = -(uint64_t)*a1;
  }
  else
  {
    v191 = 0;
  }
  v192 = 0;
  __p = 0;
  v291 = 0;
  v292 = 0;
  v193 = (unsigned __int16 *)((char *)a1 + v185);
  if (*v193 >= 9u)
  {
    v194 = v193[4];
    if (v194)
      v192 = (int *)((char *)a1 + v194 + *(unsigned int *)((char *)a1 + v194));
    else
      v192 = 0;
  }
  v195 = (unsigned __int16 *)((char *)v192 - *v192);
  if (*v195 < 7u)
  {
    v196 = 0;
  }
  else
  {
    v196 = (int *)v195[3];
    if (v196)
      v196 = (int *)((char *)v196 + (_QWORD)v192 + *(unsigned int *)((char *)v196 + (_QWORD)v192));
  }
  v197 = (unsigned __int16 *)((char *)v196 - *v196);
  if (*v197 >= 0xBu && (v198 = v197[5]) != 0)
  {
    v199 = (unsigned int *)((char *)v196 + v198);
    v200 = *v199;
    v202 = (unsigned int *)((char *)v199 + v200 + 4);
    v201 = *(unsigned int *)((char *)v199 + v200);
    if ((_DWORD)v201)
    {
      v203 = &v202[v201];
      do
      {
        v204 = Mtl::FunctionStitching::CloneAttribute<Mtl::FunctionStitching::Attribute>((uint64_t)&v293, (Mtl::FunctionStitching::Attribute *)((char *)v202 + *v202));
        v205 = v204;
        v206 = v291;
        if (v291 >= v292)
        {
          v208 = (char *)__p;
          v209 = (v291 - (_BYTE *)__p) >> 2;
          v210 = v209 + 1;
          if ((unint64_t)(v209 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v211 = v292 - (_BYTE *)__p;
          if ((v292 - (_BYTE *)__p) >> 1 > v210)
            v210 = v211 >> 1;
          if ((unint64_t)v211 >= 0x7FFFFFFFFFFFFFFCLL)
            v212 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v212 = v210;
          if (v212)
          {
            v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v292, v212);
            v208 = (char *)__p;
            v206 = v291;
          }
          else
          {
            v213 = 0;
          }
          v214 = &v213[4 * v209];
          *(_DWORD *)v214 = v205;
          v207 = v214 + 4;
          while (v206 != v208)
          {
            v215 = *((_DWORD *)v206 - 1);
            v206 -= 4;
            *((_DWORD *)v214 - 1) = v215;
            v214 -= 4;
          }
          __p = v214;
          v291 = v207;
          v292 = &v213[4 * v212];
          if (v208)
            operator delete(v208);
        }
        else
        {
          *(_DWORD *)v291 = v204;
          v207 = v206 + 4;
        }
        v291 = v207;
        ++v202;
      }
      while (v202 != v203);
      v216 = (char *)__p;
    }
    else
    {
      v207 = 0;
      v216 = 0;
    }
    v182 = a1;
  }
  else
  {
    v207 = 0;
    v216 = 0;
  }
  if (v207 == v216)
    v217 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Attribute>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Attribute>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Attribute>> const&)::t;
  else
    v217 = v216;
  v218 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v293, (uint64_t)v217, (v207 - v216) >> 2);
  if (v303 == v302)
    v219 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::FunctionStitching::Node>,std::allocator<flatbuffers::Offset<Air::FunctionStitching::Node>>>(std::vector<flatbuffers::Offset<Air::FunctionStitching::Node>> const&)::t;
  else
    v219 = v302;
  v220 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v293, (uint64_t)v219, (v303 - v302) >> 2);
  v221 = 0;
  LODWORD(v286) = 0;
  v222 = *v182;
  v223 = (char *)v182 - v222;
  if (*(unsigned __int16 *)((char *)v182 - v222) >= 9u)
  {
    v221 = (int *)*((unsigned __int16 *)v223 + 4);
    if (*((_WORD *)v223 + 4))
      v221 = (int *)((char *)v221 + (_QWORD)v182 + *(unsigned int *)((char *)v221 + (_QWORD)v182));
  }
  v224 = -v222;
  v225 = (unsigned __int16 *)((char *)v221 - *v221);
  if (*v225 >= 7u && (v226 = v225[3]) != 0)
    v227 = (int *)((char *)v221 + v226 + *(unsigned int *)((char *)v221 + v226));
  else
    v227 = 0;
  v228 = (unsigned __int16 *)((char *)v227 - *v227);
  if (*v228 >= 9u)
  {
    v229 = v228[4];
    if (v229)
    {
      v230 = (unsigned int *)(v11 + 4 * *(unsigned int *)((char *)v227 + v229));
      v284 = (uint64_t)v230 + *v230;
      v287 = &v284;
      LODWORD(v286) = *((_DWORD *)std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>((uint64_t)v308, &v284, (uint64_t)&std::piecewise_construct, (_QWORD **)&v287)+ 6);
      v224 = -(uint64_t)*v182;
    }
  }
  v231 = (unsigned __int16 *)((char *)v182 + v224);
  if (*v231 < 9u)
  {
    v232 = 0;
  }
  else
  {
    v232 = (int *)v231[4];
    if (v232)
      v232 = (int *)((char *)v232 + (_QWORD)v182 + *(unsigned int *)((char *)v232 + (_QWORD)v182));
  }
  v233 = (unsigned __int16 *)((char *)v232 - *v232);
  if (*v233 >= 7u && (v234 = v233[3]) != 0)
    v235 = (int *)((char *)v232 + v234 + *(unsigned int *)((char *)v232 + v234));
  else
    v235 = 0;
  v236 = (unsigned __int16 *)((char *)v235 - *v235);
  v237 = *v236 < 9u || !v236[4];
  BYTE6(v298) = 1;
  v238 = v297;
  v239 = v296;
  v240 = WORD4(v296);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 10, v218);
  if (v237)
    v241 = 0;
  else
    v241 = &v286;
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::FunctionStitching::NodeId>((char *)&v293, 8, v241);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 6, v220);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 4, v191);
  v242 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v239 - v238 + v240);
  v243 = 0;
  v287 = 0;
  v288 = 0;
  v289 = 0;
  v244 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v244 >= 9u)
  {
    v243 = (int *)v244[4];
    if (v244[4])
      v243 = (int *)((char *)v243 + (_QWORD)a1 + *(unsigned int *)((char *)v243 + (_QWORD)a1));
  }
  v245 = (unsigned int *)((char *)v243 + *(unsigned __int16 *)((char *)v243 - *v243 + 4));
  v246 = *v245;
  v248 = (char *)v245 + v246 + 4;
  v247 = *(unsigned int *)((char *)v245 + v246);
  if ((_DWORD)v247)
  {
    v249 = (unsigned int *)&v248[4 * v247];
    do
    {
      v250 = flatbuffers::FlatBufferBuilder::CreateString((flatbuffers::FlatBufferBuilder *)&v293, &v248[*(unsigned int *)v248 + 4], *(unsigned int *)&v248[*(unsigned int *)v248]);
      v251 = v250;
      v252 = v288;
      if (v288 >= v289)
      {
        v254 = (char *)v287;
        v255 = (v288 - (_BYTE *)v287) >> 2;
        v256 = v255 + 1;
        if ((unint64_t)(v255 + 1) >> 62)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v257 = v289 - (_BYTE *)v287;
        if ((v289 - (_BYTE *)v287) >> 1 > v256)
          v256 = v257 >> 1;
        if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL)
          v258 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v258 = v256;
        if (v258)
        {
          v259 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v289, v258);
          v254 = (char *)v287;
          v252 = v288;
        }
        else
        {
          v259 = 0;
        }
        v260 = &v259[4 * v255];
        *(_DWORD *)v260 = v251;
        v253 = v260 + 4;
        while (v252 != v254)
        {
          v261 = *((_DWORD *)v252 - 1);
          v252 -= 4;
          *((_DWORD *)v260 - 1) = v261;
          v260 -= 4;
        }
        v287 = v260;
        v288 = v253;
        v289 = &v259[4 * v258];
        if (v254)
          operator delete(v254);
      }
      else
      {
        *(_DWORD *)v288 = v250;
        v253 = v252 + 4;
      }
      v288 = v253;
      v248 += 4;
    }
    while (v248 != (const char *)v249);
    v262 = (char *)v287;
  }
  else
  {
    v253 = 0;
    v262 = 0;
  }
  if (v253 == v262)
    v263 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
  else
    v263 = v262;
  v264 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>((flatbuffers::FlatBufferBuilder *)&v293, (uint64_t)v263, (v253 - v262) >> 2);
  v265 = v242;
  BYTE6(v298) = 1;
  v266 = v297;
  v267 = v296;
  v268 = WORD4(v296);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 6, v265);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 4, v264);
  v269 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, v267 - v266 + v268);
  v284 = 0x300000000;
  v285 = 0;
  BYTE6(v298) = 1;
  v270 = v297;
  LOWORD(v264) = v296;
  v271 = WORD4(v296);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)&v293, 8, v269);
  flatbuffers::FlatBufferBuilder::AddStruct<Mtl::Version>((char *)&v293, 4, &v284);
  v272 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)&v293, 2);
  flatbuffers::FlatBufferBuilder::TrackField((char *)&v293, 6, v272);
  v273 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)&v293, (unsigned __int16)v264 - v270 + v271);
  flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)&v293, v273, "AIRS", 0);
  v274 = (int *)(v297 + *(unsigned int *)v297);
  v282 = *a2;
  v281 = (void *)v282;
  v283 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  createStitchingScriptHashImpl((uint64_t)&v282, v274, a3);
  if (v281)
    operator delete(v281);
  if (v287)
  {
    v288 = (char *)v287;
    operator delete(v287);
  }
  if (__p)
  {
    v291 = (char *)__p;
    operator delete(__p);
  }
  if (v302)
  {
    v303 = v302;
    operator delete(v302);
  }
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v293);
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v308);
  if (v310)
  {
    v311 = v310;
    operator delete(v310);
  }
}

void sub_18274C210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  uint64_t v29;
  void *v31;

  if (v28)
    operator delete(v28);
  v31 = *(void **)(v29 - 120);
  if (v31)
  {
    *(_QWORD *)(v29 - 112) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Air::FunctionStitching::CloneNode<Air::FunctionStitching::Node>(uint64_t a1, Mtl::FunctionStitching::Node *this)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;

  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = *(_DWORD *)((char *)this + v5);
    if (v6 >= 0xC)
      goto LABEL_22;
    switch(v6)
    {
      case 1u:
        v7 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v7);
        break;
      case 2u:
        v12 = (const char *)AirReflection::Node::node_as_KernelFunction(this);
        v8 = Mtl::FunctionStitching::CloneFunctionNode<Mtl::FunctionStitching::FunctionNode>(a1, v12);
        break;
      case 3u:
        v13 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        v8 = Mtl::FunctionStitching::CloneBufferNode<Mtl::FunctionStitching::BufferNode>(a1, v13);
        break;
      case 4u:
        v14 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        v8 = Mtl::FunctionStitching::CloneBufferAddressNode<Mtl::FunctionStitching::BufferAddressNode>(a1, v14);
        break;
      case 5u:
        v15 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        v8 = Mtl::FunctionStitching::CloneBufferDataNode<Mtl::FunctionStitching::BufferDataNode>(a1, v15);
        break;
      case 6u:
        v16 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v16);
        break;
      case 7u:
        v17 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v17);
        break;
      case 8u:
        v18 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        v8 = Mtl::FunctionStitching::CloneInputNode<Mtl::FunctionStitching::InputNode>(a1, v18);
        break;
      case 9u:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        *(_BYTE *)(a1 + 70) = 1;
        v8 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, *(_WORD *)(a1 + 32) - *(_WORD *)(a1 + 48) + *(_DWORD *)(a1 + 40));
        break;
      case 0xAu:
        v19 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        v8 = Mtl::FunctionStitching::CloneBuiltinNode<Mtl::FunctionStitching::BuiltinNode>(a1, v19);
        break;
      case 0xBu:
        v20 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        v8 = Mtl::FunctionStitching::CloneEarlyReturnNode<Mtl::FunctionStitching::EarlyReturnNode>(a1, v20);
        break;
      default:
        goto LABEL_6;
    }
    *(_BYTE *)(a1 + 70) = 1;
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 32);
    if (v8)
      flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)a1, 6, v8);
  }
  else
  {
LABEL_6:
    *(_BYTE *)(a1 + 70) = 1;
    v10 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 32);
  }
  v21 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v21 >= 5u && (v22 = v21[2]) != 0)
  {
    v23 = *(_DWORD *)((char *)this + v22);
    if (v23 >= 0xC)
LABEL_22:
      abort();
  }
  else
  {
    v23 = 0;
  }
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)a1, 4, v23, 0);
  return flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)a1, (unsigned __int16)v11 - (unsigned __int16)v9 + (unsigned __int16)v10);
}

void createStitchingScriptHash(MTLStitchedLibraryDescriptor *a1@<X0>, StitchingScript *a2@<X1>, _OWORD *a3@<X8>)
{
  NSArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _OWORD *v8;
  _OWORD *v9;
  char *v10;
  __int128 v11;
  void *v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  void *v24;
  __int128 v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *__p[2];
  char *v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v33 = 0;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v4 = -[MTLStitchedLibraryDescriptor functions](a1, "functions");
  v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v29;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v29 != v6)
          objc_enumerationMutation(v4);
        v8 = (_OWORD *)objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * i), "bitCodeHash");
        v9 = v8;
        v10 = (char *)__p[1];
        if (__p[1] >= v33)
        {
          v13 = (char *)__p[0];
          v14 = ((char *)__p[1] - (char *)__p[0]) >> 5;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 59)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v16 = v33 - (char *)__p[0];
          if ((v33 - (char *)__p[0]) >> 4 > v15)
            v15 = v16 >> 4;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
            v17 = 0x7FFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v33, v17);
            v13 = (char *)__p[0];
            v10 = (char *)__p[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = v9[1];
          v20 = &v18[32 * v14];
          *(_OWORD *)v20 = *v9;
          *((_OWORD *)v20 + 1) = v19;
          if (v10 == v13)
          {
            v23 = &v18[32 * v14];
          }
          else
          {
            v21 = &v18[32 * v14];
            do
            {
              v22 = *((_OWORD *)v10 - 1);
              v23 = v21 - 32;
              *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
              *((_OWORD *)v21 - 1) = v22;
              v10 -= 32;
              v21 -= 32;
            }
            while (v10 != v13);
          }
          v12 = v20 + 32;
          __p[0] = v23;
          __p[1] = v20 + 32;
          v33 = &v18[32 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          v11 = v8[1];
          *(_OWORD *)__p[1] = *v8;
          *((_OWORD *)v10 + 1) = v11;
          v12 = v10 + 32;
        }
        __p[1] = v12;
      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v4, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
    }
    while (v5);
  }
  v24 = __p[0];
  v26 = *(_OWORD *)__p;
  v27 = v33;
  __p[1] = 0;
  v33 = 0;
  __p[0] = 0;
  createStitchingScriptHashImpl((uint64_t)&v26, (int *)a2, a3);
  if (v24)
    operator delete(v24);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_18274C7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if ((_QWORD)a9)
    operator delete((void *)a9);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

dispatch_data_t _MTLCreateTileRenderPipelineScriptFromDescriptor(MTLTileRenderPipelineDescriptor *a1)
{
  const void *v1;
  size_t v2;
  dispatch_data_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  void *buffer[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v11 = 0;
  v12 = 0;
  v13 = xmmword_182809F30;
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v16 = 0;
  v17 = 1;
  v18 = 256;
  v19 = 0;
  _MTLCreateTileRenderPipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1);
  v1 = buffer[0];
  v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  v5 = v11;
  v6 = v12;
  v7 = *((_QWORD *)&v14 + 1);
  v8 = v14;
  v9 = buffer[0];
  v10 = v2;
  if (v12)
  {
    v11 = 0;
    v12 = 0;
  }
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_18274C8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

dispatch_data_t _MTLCreateMeshRenderPipelineScriptFromDescriptor(MTLMeshRenderPipelineDescriptor *a1)
{
  const void *v1;
  size_t v2;
  dispatch_data_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  void *buffer[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v11 = 0;
  v12 = 0;
  v13 = xmmword_182809F30;
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v16 = 0;
  v17 = 1;
  v18 = 256;
  v19 = 0;
  _MTLCreateMeshRenderPipelineScriptFromDescriptor((flatbuffers::FlatBufferBuilder *)&v11, a1);
  v1 = buffer[0];
  v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  v5 = v11;
  v6 = v12;
  v7 = *((_QWORD *)&v14 + 1);
  v8 = v14;
  v9 = buffer[0];
  v10 = v2;
  if (v12)
  {
    v11 = 0;
    v12 = 0;
  }
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_18274C978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

dispatch_data_t _MTLCreateFuncionScriptFromFunctionType(MTLFunctionType a1)
{
  const void *v1;
  size_t v2;
  dispatch_data_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  void *buffer[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  v11 = 0;
  v12 = 0;
  v13 = xmmword_182809F30;
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v16 = 0;
  v17 = 1;
  v18 = 256;
  v19 = 0;
  _MTLCreateFuncionScriptFromFunctionType((flatbuffers::FlatBufferBuilder *)&v11, a1);
  v1 = buffer[0];
  v2 = (v14 + DWORD2(v14) - LODWORD(buffer[0]));
  v5 = v11;
  v6 = v12;
  v7 = *((_QWORD *)&v14 + 1);
  v8 = v14;
  v9 = buffer[0];
  v10 = v2;
  if (v12)
  {
    v11 = 0;
    v12 = 0;
  }
  v14 = 0u;
  *(_OWORD *)buffer = 0u;
  v3 = dispatch_data_create(v1, v2, 0, 0);
  flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v5);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v11);
  return v3;
}

void sub_18274CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)va);
  _Unwind_Resume(a1);
}

NSUInteger _MTLCreateStitchingScriptFromStichedLibraryDescriptor@<X0>(MTLStitchedLibraryDescriptor *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  NSUInteger result;
  StitchingScript *v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  __int128 v11;
  NSUInteger v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 buffer;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v12 = -[NSArray count](-[MTLStitchedLibraryDescriptor functionGraphs](a1, "functionGraphs"), "count");
  std::allocate_shared[abi:ne180100]<std::vector<stitchedAirDescriptor>,std::allocator<std::vector<stitchedAirDescriptor>>,unsigned long,void>(&v12, a2);
  v4 = 0;
  v5 = 0;
  v11 = xmmword_182809F30;
  while (1)
  {
    result = -[NSArray count](-[MTLStitchedLibraryDescriptor functionGraphs](a1, "functionGraphs", v11), "count");
    if (v5 >= result)
      break;
    v12 = 0;
    v13 = 0;
    v14 = v11;
    v15 = 0u;
    buffer = 0u;
    v17 = 0;
    v18 = 1;
    v19 = 256;
    v20 = 0;
    v7 = (StitchingScript *)_MTLCreateStitchingScriptFromStichedLibraryDescriptor((flatbuffers::FlatBufferBuilder *)&v12, a1, v5);
    createStitchingScriptHash(a1, v7, &v21);
    v8 = *(_QWORD *)*a2 + v4;
    *(_OWORD *)(v8 + 8) = v21;
    *(_OWORD *)(v8 + 24) = v22;
    v9 = (const void *)buffer;
    v10 = (v15 + DWORD2(v15) - buffer);
    *(_QWORD *)&v21 = v12;
    BYTE8(v21) = v13;
    *(_QWORD *)&v22 = *((_QWORD *)&v15 + 1);
    *((_QWORD *)&v22 + 1) = v15;
    v23 = buffer;
    v24 = v10;
    if (v13)
    {
      v12 = 0;
      v13 = 0;
    }
    v15 = 0u;
    buffer = 0u;
    *(_QWORD *)(*(_QWORD *)*a2 + v4) = dispatch_data_create(v9, v10, 0, 0);
    flatbuffers::DetachedBuffer::~DetachedBuffer((flatbuffers::DetachedBuffer *)&v21);
    flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((flatbuffers::FlatBufferBuilder *)&v12);
    ++v5;
    v4 += 40;
  }
  return result;
}

void sub_18274CBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

void ___ZL12createGroupsRN11flatbuffers17FlatBufferBuilderEP12NSDictionaryIP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  flatbuffers::FlatBufferBuilder *v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  int v12;
  char *v13;
  unint64_t v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;

  v5 = *(flatbuffers::FlatBufferBuilder **)(a1 + 40);
  v6 = (const char *)objc_msgSend(a2, "UTF8String");
  v7 = strlen(v6);
  LODWORD(v5) = flatbuffers::FlatBufferBuilder::CreateString(v5, v6, v7);
  LODWORD(a3) = createFunctionArray(*(flatbuffers::FlatBufferBuilder **)(a1 + 40), a3);
  v8 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v8 + 70) = 1;
  v9 = *(_DWORD *)(v8 + 32) - *(_DWORD *)(v8 + 48) + *(_DWORD *)(v8 + 40);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v8, 4, (int)v5);
  flatbuffers::FlatBufferBuilder::AddOffset<void>((char *)v8, 6, (int)a3);
  v10 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v11 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v8, v9);
  v12 = v11;
  v13 = (char *)v10[7];
  v14 = v10[8];
  if ((unint64_t)v13 >= v14)
  {
    v16 = (char *)v10[6];
    v17 = (v13 - v16) >> 2;
    if ((unint64_t)(v17 + 1) >> 62)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v18 = v14 - (_QWORD)v16;
    v19 = (uint64_t)(v14 - (_QWORD)v16) >> 1;
    if (v19 <= v17 + 1)
      v19 = v17 + 1;
    if (v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v20 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
    {
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(v10 + 8), v20);
      v16 = (char *)v10[6];
      v13 = (char *)v10[7];
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[4 * v17];
    v23 = &v21[4 * v20];
    *(_DWORD *)v22 = v12;
    v15 = v22 + 4;
    while (v13 != v16)
    {
      v24 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *((_DWORD *)v22 - 1) = v24;
      v22 -= 4;
    }
    v10[6] = v22;
    v10[7] = v15;
    v10[8] = v23;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *(_DWORD *)v13 = v11;
    v15 = v13 + 4;
  }
  v10[7] = v15;
}

uint64_t createFragmentColorAttachmentDescriptorVector(flatbuffers::FlatBufferBuilder *a1, const MTLRenderPipelineColorAttachmentDescriptorArrayInternal *a2)
{
  uint64_t v4;
  MTLRenderPipelineColorAttachmentDescriptorInternal *v5;
  int v6;
  int v7;
  unsigned __int16 v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  char *__p;
  char *v28;
  char *v29;

  if (!a2)
    return 0;
  v4 = 0;
  __p = 0;
  v28 = 0;
  v29 = 0;
  do
  {
    v5 = a2->_descriptors[v4];
    *((_BYTE *)a1 + 70) = 1;
    v6 = *((_DWORD *)a1 + 8) - *((_DWORD *)a1 + 12) + *((_DWORD *)a1 + 10);
    if (v5)
    {
      v7 = -[MTLRenderPipelineColorAttachmentDescriptorInternal pixelFormat](v5, "pixelFormat");
      if ((v7 - 1) >= 0x285)
        v8 = 0;
      else
        v8 = v7;
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, v8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 6, -[MTLRenderPipelineColorAttachmentDescriptorInternal writeMask](v5, "writeMask"), 15);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, -[MTLRenderPipelineColorAttachmentDescriptorInternal isBlendingEnabled](v5, "isBlendingEnabled"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, -[MTLRenderPipelineColorAttachmentDescriptorInternal alphaBlendOperation](v5, "alphaBlendOperation"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, -[MTLRenderPipelineColorAttachmentDescriptorInternal rgbBlendOperation](v5, "rgbBlendOperation"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, -[MTLRenderPipelineColorAttachmentDescriptorInternal destinationAlphaBlendFactor](v5, "destinationAlphaBlendFactor"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, -[MTLRenderPipelineColorAttachmentDescriptorInternal destinationRGBBlendFactor](v5, "destinationRGBBlendFactor"), 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, -[MTLRenderPipelineColorAttachmentDescriptorInternal sourceAlphaBlendFactor](v5, "sourceAlphaBlendFactor"), 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, -[MTLRenderPipelineColorAttachmentDescriptorInternal sourceRGBBlendFactor](v5, "sourceRGBBlendFactor"), 1);
      v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, v6);
      v10 = v28;
      if (v28 < v29)
      {
LABEL_17:
        *(_DWORD *)v10 = v9;
        v17 = v10 + 4;
        goto LABEL_36;
      }
      v11 = __p;
      v12 = (v28 - __p) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v14 = v29 - __p;
      if ((v29 - __p) >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        v11 = __p;
        v10 = v28;
      }
      else
      {
        v16 = 0;
      }
      v21 = &v16[4 * v12];
      *(_DWORD *)v21 = v9;
      v17 = v21 + 4;
      while (v10 != v11)
      {
        v22 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v22;
        v21 -= 4;
      }
    }
    else
    {
      flatbuffers::FlatBufferBuilder::AddElement<unsigned short>((char *)a1, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 20, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 18, 1, 1);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 16, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 14, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 12, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 10, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 8, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>((char *)a1, 6, 15, 15);
      v9 = flatbuffers::FlatBufferBuilder::EndTable(a1, v6);
      v10 = v28;
      if (v28 < v29)
        goto LABEL_17;
      v11 = __p;
      v18 = (v28 - __p) >> 2;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
      v20 = v29 - __p;
      if ((v29 - __p) >> 1 > v19)
        v19 = v20 >> 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v19;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v29, v15);
        v11 = __p;
        v10 = v28;
      }
      else
      {
        v16 = 0;
      }
      v21 = &v16[4 * v18];
      *(_DWORD *)v21 = v9;
      v17 = v21 + 4;
      while (v10 != v11)
      {
        v23 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v21 - 1) = v23;
        v21 -= 4;
      }
    }
    __p = v21;
    v29 = &v16[4 * v15];
    if (v11)
      operator delete(v11);
LABEL_36:
    v28 = v17;
    ++v4;
  }
  while (v4 != 8);
  if (v17 == __p)
    v24 = (char *)&flatbuffers::data<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>,std::allocator<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>>>(std::vector<flatbuffers::Offset<Air::FragmentColorAttachmentDescriptor>> const&)::t;
  else
    v24 = __p;
  v25 = flatbuffers::FlatBufferBuilder::CreateVector<Air::FunctionConstantValue>(a1, (uint64_t)v24, (v17 - __p) >> 2);
  if (__p)
    operator delete(__p);
  return v25;
}

void sub_18274D190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t NodeKey::NodeKey(uint64_t a1, void *a2)
{
  int v4;
  int v5;

  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    *(_DWORD *)a1 = 1;
    *(_QWORD *)(a1 + 8) = objc_msgSend(a2, "argumentIndex");
    return a1;
  }
  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    if (objc_msgSend(a2, "dereference"))
      v4 = 5;
    else
      v4 = 4;
    *(_DWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = objc_msgSend(a2, "bindIndex");
    *(_QWORD *)(a1 + 24) = objc_msgSend(a2, "byteOffset");
    return a1;
  }
  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    v5 = 3;
LABEL_16:
    *(_DWORD *)a1 = v5;
    *(_QWORD *)(a1 + 16) = objc_msgSend(a2, "bindIndex");
    return a1;
  }
  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    v5 = 6;
    goto LABEL_16;
  }
  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    v5 = 7;
    goto LABEL_16;
  }
  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    v5 = 8;
    goto LABEL_16;
  }
  if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    *(_DWORD *)a1 = 9;
  }
  else if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    *(_DWORD *)a1 = 10;
    *(_DWORD *)(a1 + 32) = 1;
  }
  else if (objc_msgSend(a2, "isMemberOfClass:", objc_opt_class()))
  {
    *(_DWORD *)a1 = 10;
    *(_DWORD *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t NodeKey::operator==(int *a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v2 = *a1;
  if (*a1 != *(_DWORD *)a2)
    return 0;
  result = 1;
  switch(v2)
  {
    case 1:
      v5 = *((_QWORD *)a1 + 1);
      v6 = *(_QWORD *)(a2 + 8);
      goto LABEL_8;
    case 3:
    case 6:
    case 7:
    case 8:
      v5 = *((_QWORD *)a1 + 2);
      v6 = *(_QWORD *)(a2 + 16);
      goto LABEL_8;
    case 4:
    case 5:
      if (*((_QWORD *)a1 + 2) != *(_QWORD *)(a2 + 16))
        return 0;
      v5 = *((_QWORD *)a1 + 3);
      v6 = *(_QWORD *)(a2 + 24);
LABEL_8:
      v7 = v5 == v6;
      goto LABEL_9;
    case 9:
      return result;
    case 10:
      v7 = a1[8] == *(_DWORD *)(a2 + 32);
LABEL_9:
      result = v7;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t Air::FunctionStitching::Node::HashImpl(Air::FunctionStitching::Node *this, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int *v8;
  uint64_t result;
  const char *v10;
  CC_SHA256_CTX *v11;
  CC_LONG v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  int data;
  int v23;

  CC_SHA256_Update(c, "Air.FunctionStitching.Node", 0x1Au);
  v4 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(_DWORD *)((char *)this + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)this - *(int *)this);
  if (*v6 >= 5u && (v7 = v6[2]) != 0)
  {
    switch(*(_DWORD *)((char *)this + v7))
    {
      case 1:
        v8 = (int *)AirReflection::Node::node_as_FragmentFunction(this);
        result = Air::FunctionStitching::InputNode::HashImpl(v8, c);
        break;
      case 2:
        v13 = (int *)AirReflection::Node::node_as_KernelFunction(this);
        result = Air::FunctionStitching::FunctionNode::HashImpl(v13, c);
        break;
      case 3:
        v14 = (int *)AirReflection::Node::node_as_VertexFunction(this);
        result = Air::FunctionStitching::BufferNode::HashImpl(v14, c);
        break;
      case 4:
        v15 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(this);
        result = Air::FunctionStitching::BufferAddressNode::HashImpl(v15, c);
        break;
      case 5:
        v16 = (int *)AirReflection::Node::node_as_IntersectionFunction(this);
        result = Air::FunctionStitching::BufferDataNode::HashImpl(v16, c);
        break;
      case 6:
        v17 = (int *)AirReflection::Node::node_as_MeshFunction(this);
        result = Air::FunctionStitching::TextureNode::HashImpl(v17, c);
        break;
      case 7:
        v18 = (int *)AirReflection::Node::node_as_ObjectFunction(this);
        result = Air::FunctionStitching::SamplerNode::HashImpl(v18, c);
        break;
      case 8:
        v19 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(this);
        result = Air::FunctionStitching::ThreadgroupNode::HashImpl(v19, c);
        break;
      case 9:
        Mtl::FunctionStitching::Node::node_as_ImageblockNode(this);
        v10 = "Air.FunctionStitching.ImageblockNode";
        v11 = c;
        v12 = 36;
        return CC_SHA256_Update(v11, v10, v12);
      case 0xA:
        v20 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(this);
        result = Air::FunctionStitching::BuiltinNode::HashImpl(v20, c);
        break;
      case 0xB:
        v21 = (int *)Air::FunctionStitching::Node::node_as_EarlyReturnNode(this);
        result = Air::FunctionStitching::EarlyReturnNode::HashImpl(v21, c);
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v23 = 0;
    v10 = (const char *)&v23;
    v11 = c;
    v12 = 4;
    return CC_SHA256_Update(v11, v10, v12);
  }
  return result;
}

uint64_t Air::FunctionStitching::Attribute::HashImpl(Mtl::FunctionStitching::Attribute *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  CC_SHA256_CTX *v10;
  CC_LONG v11;
  int data;
  int v14;

  CC_SHA256_Update(c, "Air.FunctionStitching.Attribute", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *((unsigned __int8 *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v6 < 5u)
    goto LABEL_10;
  v7 = v6[2];
  if (!v7)
    goto LABEL_10;
  v8 = *((unsigned __int8 *)a1 + v7);
  if (v8 == 2)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_KernelAttribute(a1);
    v9 = "Air.FunctionStitching.KernelAttribute";
    v10 = c;
    v11 = 37;
    return CC_SHA256_Update(v10, v9, v11);
  }
  if (v8 == 1)
  {
    Mtl::FunctionStitching::Attribute::attribute_as_AlwaysInlineAttribute(a1);
    v9 = "Air.FunctionStitching.AlwaysInlineAttribute";
    v10 = c;
    v11 = 43;
  }
  else
  {
LABEL_10:
    v14 = 0;
    v9 = (const char *)&v14;
    v10 = c;
    v11 = 4;
  }
  return CC_SHA256_Update(v10, v9, v11);
}

uint64_t Air::FunctionStitching::InputNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.InputNode", 0x1Fu);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionStitching::FunctionNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  int *p_data;
  CC_LONG v9;
  CC_SHA256_CTX *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t result;
  uint64_t v21;
  int *v22;
  int v23;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.FunctionNode", 0x22u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = (unsigned int *)((char *)a1 + v5);
    v7 = *v6;
    p_data = (int *)((char *)v6 + v7 + 4);
    v9 = *(unsigned int *)((char *)v6 + v7);
    v10 = c;
  }
  else
  {
    data = 0;
    p_data = &data;
    v10 = c;
    v9 = 4;
  }
  CC_SHA256_Update(v10, p_data, v9);
  v11 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v11 >= 7u && (v12 = v11[3]) != 0)
  {
    v13 = (unsigned int *)((char *)a1 + v12 + *(unsigned int *)((char *)a1 + v12));
    data = *v13;
    CC_SHA256_Update(c, &data, 4u);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = (int *)(v13 + 1);
      do
      {
        CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
        v16 = *v15++;
        data = v16;
        CC_SHA256_Update(c, &data, 4u);
        --v14;
      }
      while (v14);
    }
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v17 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v17 >= 9u && (v18 = v17[4]) != 0)
  {
    v19 = (unsigned int *)((char *)a1 + v18 + *(unsigned int *)((char *)a1 + v18));
    data = *v19;
    result = CC_SHA256_Update(c, &data, 4u);
    v21 = *v19;
    if ((_DWORD)v21)
    {
      v22 = (int *)(v19 + 1);
      do
      {
        CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
        v23 = *v22++;
        data = v23;
        result = CC_SHA256_Update(c, &data, 4u);
        --v21;
      }
      while (v21);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

uint64_t Air::FunctionStitching::BufferNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int data;
  int v10;

  CC_SHA256_Update(c, "Air.FunctionStitching.BufferNode", 0x20u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  CC_SHA256_Update(c, &data, 4u);
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  v10 = v7;
  return CC_SHA256_Update(c, &v10, 4u);
}

uint64_t Air::FunctionStitching::BufferAddressNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int data;
  uint64_t v10;

  CC_SHA256_Update(c, "Air.FunctionStitching.BufferAddressNode", 0x27u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    Air::FunctionStitching::BufferNode::HashImpl((int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)), c);
  }
  else
  {
    data = 0;
    CC_SHA256_Update(c, &data, 4u);
  }
  v6 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v6 < 7u)
  {
    v7 = 0;
  }
  else
  {
    v7 = v6[3];
    if (v7)
      v7 = *(_QWORD *)((char *)a1 + v7);
  }
  v10 = v7;
  return CC_SHA256_Update(c, &v10, 8u);
}

uint64_t Air::FunctionStitching::BufferDataNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.BufferDataNode", 0x24u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u)
  {
    v5 = v4[2];
    if (v5)
      return Air::FunctionStitching::BufferAddressNode::HashImpl((int *)((char *)a1 + v5 + *(unsigned int *)((char *)a1 + v5)), c);
  }
  data = 0;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionStitching::TextureNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.TextureNode", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionStitching::SamplerNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.SamplerNode", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionStitching::ThreadgroupNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.ThreadgroupNode", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionStitching::BuiltinNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  uint64_t v5;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.BuiltinNode", 0x21u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 5u)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    v5 = v4[2];
    if (v5)
      LODWORD(v5) = *(int *)((char *)a1 + v5);
  }
  data = v5;
  return CC_SHA256_Update(c, &data, 4u);
}

uint64_t Air::FunctionStitching::EarlyReturnNode::HashImpl(int *a1, CC_SHA256_CTX *c)
{
  unsigned __int16 *v4;
  unsigned __int16 v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t result;
  uint64_t v11;
  int *v12;
  int v13;
  int data;

  CC_SHA256_Update(c, "Air.FunctionStitching.EarlyReturnNode", 0x25u);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 5u && (v5 = v4[2]) != 0)
  {
    v6 = v5;
    CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
    data = *(int *)((char *)a1 + v6);
  }
  else
  {
    data = 0;
  }
  CC_SHA256_Update(c, &data, 4u);
  v7 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v7 >= 7u && (v8 = v7[3]) != 0)
  {
    v9 = (unsigned int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8));
    data = *v9;
    result = CC_SHA256_Update(c, &data, 4u);
    v11 = *v9;
    if ((_DWORD)v11)
    {
      v12 = (int *)(v9 + 1);
      do
      {
        CC_SHA256_Update(c, "Air.FunctionStitching.NodeId", 0x1Cu);
        v13 = *v12++;
        data = v13;
        result = CC_SHA256_Update(c, &data, 4u);
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    data = 0;
    return CC_SHA256_Update(c, &data, 4u);
  }
  return result;
}

void NodeKey::NodeKey(NodeKey *this, const Air::FunctionStitching::Node *a2)
{
  unsigned __int16 *v3;
  uint64_t v4;
  int v6;
  int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int *v13;
  unsigned __int16 *v14;
  int *v15;
  int *v16;
  unsigned __int16 *v17;
  int *v18;
  unsigned __int16 *v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  int *v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  unsigned __int16 *v36;
  int *v37;
  unsigned __int16 *v38;
  uint64_t v39;

  v3 = (unsigned __int16 *)((char *)a2 - *(int *)a2);
  if (*v3 >= 5u && (v4 = v3[2]) != 0)
  {
    v6 = *(_DWORD *)((char *)a2 + v4);
    *(_DWORD *)this = v6;
    switch(v6)
    {
      case 1:
        v7 = (int *)AirReflection::Node::node_as_FragmentFunction(a2);
        v8 = (unsigned __int16 *)((char *)v7 - *v7);
        if (*v8 < 5u)
        {
          v9 = 0;
        }
        else
        {
          v9 = v8[2];
          if (v9)
            v9 = *(unsigned int *)((char *)v7 + v9);
        }
        *((_QWORD *)this + 1) = v9;
        return;
      case 3:
        v10 = (int *)AirReflection::Node::node_as_VertexFunction(a2);
        v11 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v11 < 7u)
          goto LABEL_23;
        v12 = v11[3];
        if (v12)
          goto LABEL_22;
        goto LABEL_24;
      case 4:
        v13 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(a2);
        v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 < 5u)
        {
          v15 = 0;
        }
        else
        {
          v15 = (int *)v14[2];
          if (v15)
            v15 = (int *)((char *)v15 + (_QWORD)v13 + *(unsigned int *)((char *)v15 + (_QWORD)v13));
        }
        v23 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v23 >= 7u && (v24 = v23[3]) != 0)
          v25 = *(unsigned int *)((char *)v15 + v24);
        else
          v25 = 0;
        *((_QWORD *)this + 2) = v25;
        v26 = (int *)Air::FunctionStitching::Node::node_as_BufferAddressNode(a2);
        v27 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v27 < 7u)
          goto LABEL_56;
        v28 = v27[3];
        if (v28)
          v28 = *(_QWORD *)((char *)v26 + v28);
        goto LABEL_57;
      case 5:
        v16 = (int *)AirReflection::Node::node_as_IntersectionFunction(a2);
        v17 = (unsigned __int16 *)((char *)v16 - *v16);
        if (*v17 < 5u)
        {
          v18 = 0;
        }
        else
        {
          v18 = (int *)v17[2];
          if (v18)
            v18 = (int *)((char *)v18 + (_QWORD)v16 + *(unsigned int *)((char *)v18 + (_QWORD)v16));
        }
        v29 = (unsigned __int16 *)((char *)v18 - *v18);
        if (*v29 >= 5u && (v30 = v29[2]) != 0)
          v31 = (int *)((char *)v18 + v30 + *(unsigned int *)((char *)v18 + v30));
        else
          v31 = 0;
        v32 = (unsigned __int16 *)((char *)v31 - *v31);
        if (*v32 >= 7u && (v33 = v32[3]) != 0)
          v34 = *(unsigned int *)((char *)v31 + v33);
        else
          v34 = 0;
        *((_QWORD *)this + 2) = v34;
        v35 = (int *)AirReflection::Node::node_as_IntersectionFunction(a2);
        v36 = (unsigned __int16 *)((char *)v35 - *v35);
        if (*v36 < 5u)
        {
          v37 = 0;
        }
        else
        {
          v37 = (int *)v36[2];
          if (v37)
            v37 = (int *)((char *)v37 + (_QWORD)v35 + *(unsigned int *)((char *)v37 + (_QWORD)v35));
        }
        v38 = (unsigned __int16 *)((char *)v37 - *v37);
        if (*v38 >= 7u && (v39 = v38[3]) != 0)
          v28 = *(_QWORD *)((char *)v37 + v39);
        else
LABEL_56:
          v28 = 0;
LABEL_57:
        *((_QWORD *)this + 3) = v28;
        return;
      case 6:
        v10 = (int *)AirReflection::Node::node_as_MeshFunction(a2);
        goto LABEL_20;
      case 7:
        v10 = (int *)AirReflection::Node::node_as_ObjectFunction(a2);
        goto LABEL_20;
      case 8:
        v10 = (int *)Air::FunctionStitching::Node::node_as_ThreadgroupNode(a2);
LABEL_20:
        v19 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v19 < 5u)
        {
LABEL_23:
          v12 = 0;
        }
        else
        {
          v12 = v19[2];
          if (v12)
LABEL_22:
            v12 = *(unsigned int *)((char *)v10 + v12);
        }
LABEL_24:
        *((_QWORD *)this + 2) = v12;
        break;
      case 10:
        v20 = (int *)Air::FunctionStitching::Node::node_as_BuiltinNode(a2);
        v21 = (unsigned __int16 *)((char *)v20 - *v20);
        if (*v21 < 5u)
        {
          LODWORD(v22) = 0;
        }
        else
        {
          v22 = v21[2];
          if (v22)
            LODWORD(v22) = *(int *)((char *)v20 + v22);
        }
        *((_DWORD *)this + 8) = v22;
        break;
      default:
        return;
    }
  }
  else
  {
    *(_DWORD *)this = 0;
  }
}

uint64_t *std::__tree<objc_object  {objcproto24MTLFunctionStitchingNode}*>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode} const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::pair<objc_object  {objcproto24MTLFunctionStitchingNode} const,unsigned int>>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_18274E464(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::get_temporary_buffer[abi:ne180100]<objc_object  {objcproto24MTLFunctionStitchingNode}*>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

char *std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  int8x16_t *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  char isKindOfClass;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t *v28;
  char *v30;
  char *__src;

  v6 = a1;
  if (a3 == 3)
  {
    v9 = &a1->i64[1];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v8 = v6->i64[0];
      v6->i64[0] = v6->i64[1];
      v6->i64[1] = v8;
      v6->i64[1] = *a2;
      goto LABEL_16;
    }
    v10 = v6->i64[1];
    v6->i64[1] = *a2;
    *a2 = v10;
    *v6 = vextq_s8(*v6, *v6, 8uLL);
  }
  else
  {
    if (a3 == 2)
    {
      v8 = a1->i64[0];
      a1->i64[0] = *a2;
LABEL_16:
      *a2 = v8;
      return (char *)a2;
    }
    if (a5 >= a3)
    {
      v9 = &a1->i64[1];
      *a4 = a1->i64[0];
      v21 = a4 + 1;
      if (&a1->u64[1] == (unint64_t *)a2)
      {
        a1->i64[0] = *a2;
      }
      else
      {
        do
        {
          objc_opt_class();
          isKindOfClass = objc_opt_isKindOfClass();
          v23 = *v9;
          if ((isKindOfClass & 1) != 0)
          {
            *v21++ = v23;
          }
          else
          {
            v6->i64[0] = v23;
            v6 = (int8x16_t *)((char *)v6 + 8);
          }
          ++v9;
        }
        while (v9 != a2);
        v6->i64[0] = *a2;
        v9 = &v6->i64[1];
        if (v21 <= a4)
          return (char *)v9;
      }
      v24 = 0;
      do
      {
        v9[v24] = a4[v24];
        ++v24;
      }
      while (&a4[v24] < v21);
      return (char *)v9;
    }
    if (a3 >= 0)
      v13 = a3;
    else
      v13 = a3 + 1;
    v14 = v13 >> 1;
    v15 = &a1->i8[8 * (v13 >> 1)];
    v16 = v15 - 8;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v30 = v15;
      v17 = 8 - 8 * v14;
      v18 = v14;
      while (v17)
      {
        v19 = v18 - 1;
        objc_opt_class();
        v20 = objc_opt_isKindOfClass();
        v17 += 8;
        v18 = v19;
        if ((v20 & 1) == 0)
        {
          v16 = &v6->i8[-v17];
          v15 = v30;
          goto LABEL_25;
        }
      }
      __src = (char *)v6;
      v15 = v30;
    }
    else
    {
      v19 = v14;
LABEL_25:
      __src = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(v6, v16, v19, a4, a5);
    }
    v25 = a3 - v14;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v26 = v15;
LABEL_36:
      v27 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_2 &,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,long,std::pair<objc_object  {objcproto24MTLFunctionStitchingNode}*,long>>(v26, a2, v25, a4, a5);
    }
    else
    {
      v27 = (char *)(a2 + 1);
      v26 = &v6->i8[8 * v14];
      v28 = (uint64_t *)(v26 + 8);
      while (v28 != a2)
      {
        --v25;
        ++v28;
        objc_opt_class();
        v26 += 8;
        if ((objc_opt_isKindOfClass() & 1) != 0)
          goto LABEL_36;
      }
    }
    return std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,objc_object  {objcproto24MTLFunctionStitchingNode}**>(__src, v15, v27);
  }
  return (char *)v9;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,objc_object  {objcproto24MTLFunctionStitchingNode}**>(char *__src, char *a2, char *a3)
{
  char *v4;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 8 == a2)
    {
      v6 = *(_QWORD *)__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *(_QWORD *)v4 = v6;
    }
    else if (a2 + 8 == a3)
    {
      v8 = *((_QWORD *)a3 - 1);
      v4 = __src + 8;
      v9 = a3 - 8 - __src;
      if (a3 - 8 != __src)
        memmove(__src + 8, __src, v9);
      *(_QWORD *)__src = v8;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>>(__src, a2, a3);
    }
  }
  return v4;
}

_QWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = a1 + 1;
      v5 = a2 + 1;
      do
      {
        v6 = *(v4 - 1);
        *(v4 - 1) = *(v5 - 1);
        *(v5 - 1) = v6;
        if (v4 == a2)
          break;
        ++v4;
      }
      while (v5++ != a3);
    }
  }
  else
  {
    v8 = a3 - a2;
    v9 = a2 - a1;
    do
    {
      v10 = v9;
      v9 = v8;
      v8 = v10 % v8;
    }
    while (v8);
    if (v9)
    {
      v11 = &a1[v9];
      do
      {
        v13 = *--v11;
        v12 = v13;
        v14 = &v11[v3];
        v15 = v11;
        do
        {
          v16 = v14;
          *v15 = *v14;
          v17 = &v14[v3];
          v18 = __OFSUB__(v3, a3 - v14);
          v20 = v3 - (a3 - v14);
          v19 = (v20 < 0) ^ v18;
          v14 = &a1[v20];
          if (v19)
            v14 = v17;
          v15 = v16;
        }
        while (v14 != v11);
        *v16 = v12;
      }
      while (v11 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,false>(uint64_t result, void **a2, uint64_t a3, char a4)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void **v18;
  void *v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24;
  void *v25;
  void **v26;
  BOOL v27;
  BOOL v28;
  void *v29;
  void *v30;
  void *v31;
  void **v32;
  void *v33;
  void **v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void **v39;
  void *v40;
  void *v41;
  void **v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  void **v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void **v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  void **v57;
  void *v58;
  void **v59;
  void *v60;
  void *v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void **v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void **v74;
  uint64_t v75;
  unint64_t v76;
  void **v77;
  void *v78;
  void *v79;
  void **v80;
  void *v82;
  void *v83;
  void *v84;
  void **v85;
  void **v86;
  void *v87;
  void *v88;
  unint64_t v89;
  int64_t v90;
  _BYTE v92[40];
  int v93[10];

  v6 = (void **)result;
LABEL_2:
  v7 = a2;
  v8 = a2 - 1;
  v9 = v6;
  while (2)
  {
    v6 = v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = v7 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *v6;
        NodeKey::NodeKey((uint64_t)v93, *(a2 - 1));
        NodeKey::NodeKey((uint64_t)v92, v40);
        result = NodeKey::operator<(v93, (uint64_t)v92);
        if ((_DWORD)result)
        {
          v41 = *v6;
          *v6 = *(a2 - 1);
          *(a2 - 1) = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v6, v6 + 1, v8);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v6, v6 + 1, v6 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,0>(v6, v6 + 1, v6 + 2, v6 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v42 = v6 + 1;
          v43 = v6 == v7 || v42 == v7;
          v44 = v43;
          if ((a4 & 1) != 0)
          {
            if ((v44 & 1) == 0)
            {
              v45 = 0;
              v46 = v6;
              do
              {
                v48 = *v46;
                v47 = v46[1];
                v46 = v42;
                NodeKey::NodeKey((uint64_t)v93, v47);
                NodeKey::NodeKey((uint64_t)v92, v48);
                result = NodeKey::operator<(v93, (uint64_t)v92);
                if ((_DWORD)result)
                {
                  v49 = *v46;
                  v50 = v45;
                  while (1)
                  {
                    *(void **)((char *)v6 + v50 + 8) = *(void **)((char *)v6 + v50);
                    if (!v50)
                      break;
                    v51 = *(void **)((char *)v6 + v50 - 8);
                    NodeKey::NodeKey((uint64_t)v93, v49);
                    NodeKey::NodeKey((uint64_t)v92, v51);
                    result = NodeKey::operator<(v93, (uint64_t)v92);
                    v50 -= 8;
                    if ((result & 1) == 0)
                    {
                      v52 = (void **)((char *)v6 + v50 + 8);
                      goto LABEL_75;
                    }
                  }
                  v52 = v6;
LABEL_75:
                  *v52 = v49;
                }
                v42 = v46 + 1;
                v45 += 8;
              }
              while (v46 + 1 != a2);
            }
          }
          else if ((v44 & 1) == 0)
          {
            do
            {
              v83 = *v6;
              v82 = v6[1];
              v6 = v42;
              NodeKey::NodeKey((uint64_t)v93, v82);
              NodeKey::NodeKey((uint64_t)v92, v83);
              result = NodeKey::operator<(v93, (uint64_t)v92);
              if ((_DWORD)result)
              {
                v84 = *v6;
                v85 = v6;
                do
                {
                  v86 = v85;
                  v87 = *--v85;
                  *v86 = v87;
                  v88 = *(v86 - 2);
                  NodeKey::NodeKey((uint64_t)v93, v84);
                  NodeKey::NodeKey((uint64_t)v92, v88);
                  result = NodeKey::operator<(v93, (uint64_t)v92);
                }
                while ((result & 1) != 0);
                *v85 = v84;
              }
              v42 = v6 + 1;
            }
            while (v6 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != v7)
          {
            v89 = v10;
            v53 = (unint64_t)(v11 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = &v6[v56];
                if (2 * v54 + 2 < v11)
                {
                  v58 = v57[1];
                  NodeKey::NodeKey((uint64_t)v93, *v57);
                  NodeKey::NodeKey((uint64_t)v92, v58);
                  if (NodeKey::operator<(v93, (uint64_t)v92))
                  {
                    ++v57;
                    v56 = 2 * v55 + 2;
                  }
                }
                v59 = &v6[v55];
                v60 = *v59;
                NodeKey::NodeKey((uint64_t)v93, *v57);
                NodeKey::NodeKey((uint64_t)v92, v60);
                result = NodeKey::operator<(v93, (uint64_t)v92);
                if ((result & 1) == 0)
                {
                  v90 = v55;
                  v61 = *v59;
                  do
                  {
                    v62 = v57;
                    *v59 = *v57;
                    if (v53 < v56)
                      break;
                    v63 = (2 * v56) | 1;
                    v57 = &v6[v63];
                    v64 = 2 * v56 + 2;
                    if (v64 < v11)
                    {
                      v65 = v57[1];
                      NodeKey::NodeKey((uint64_t)v93, *v57);
                      NodeKey::NodeKey((uint64_t)v92, v65);
                      if (NodeKey::operator<(v93, (uint64_t)v92))
                      {
                        ++v57;
                        v63 = v64;
                      }
                    }
                    NodeKey::NodeKey((uint64_t)v93, *v57);
                    NodeKey::NodeKey((uint64_t)v92, v61);
                    result = NodeKey::operator<(v93, (uint64_t)v92);
                    v59 = v62;
                    v56 = v63;
                  }
                  while (!(_DWORD)result);
                  *v62 = v61;
                  v55 = v90;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v66 = v89 >> 3;
            do
            {
              v67 = 0;
              v68 = *v6;
              v69 = v6;
              do
              {
                v70 = &v69[v67 + 1];
                v71 = (2 * v67) | 1;
                v72 = 2 * v67 + 2;
                if (v72 < v66)
                {
                  v73 = v69[v67 + 2];
                  NodeKey::NodeKey((uint64_t)v93, *v70);
                  NodeKey::NodeKey((uint64_t)v92, v73);
                  result = NodeKey::operator<(v93, (uint64_t)v92);
                  if ((_DWORD)result)
                  {
                    ++v70;
                    v71 = v72;
                  }
                }
                *v69 = *v70;
                v69 = v70;
                v67 = v71;
              }
              while (v71 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
              v74 = a2 - 1;
              v43 = v70 == --a2;
              if (v43)
              {
                *v70 = v68;
              }
              else
              {
                *v70 = *v74;
                *v74 = v68;
                v75 = (char *)v70 - (char *)v6 + 8;
                if (v75 >= 9)
                {
                  v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                  v77 = &v6[v76];
                  v78 = *v70;
                  NodeKey::NodeKey((uint64_t)v93, *v77);
                  NodeKey::NodeKey((uint64_t)v92, v78);
                  result = NodeKey::operator<(v93, (uint64_t)v92);
                  if ((_DWORD)result)
                  {
                    v79 = *v70;
                    do
                    {
                      v80 = v77;
                      *v70 = *v77;
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                      v77 = &v6[v76];
                      NodeKey::NodeKey((uint64_t)v93, *v77);
                      NodeKey::NodeKey((uint64_t)v92, v79);
                      result = NodeKey::operator<(v93, (uint64_t)v92);
                      v70 = v80;
                    }
                    while ((result & 1) != 0);
                    *v80 = v79;
                  }
                }
              }
            }
            while (v66-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v13, v6, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v6, v13, v8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v6 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v6 + 2, &v6[v12 + 1], a2 - 3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v13 - 1, v13, &v6[v12 + 1]);
          v14 = *v6;
          *v6 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *v6;
          NodeKey::NodeKey((uint64_t)v93, *(v6 - 1));
          NodeKey::NodeKey((uint64_t)v92, v15);
          if (!NodeKey::operator<(v93, (uint64_t)v92))
          {
            v29 = *v6;
            v30 = *v8;
            NodeKey::NodeKey((uint64_t)v93, *v6);
            NodeKey::NodeKey((uint64_t)v92, v30);
            result = NodeKey::operator<(v93, (uint64_t)v92);
            if ((result & 1) != 0)
            {
              v9 = v6;
              do
              {
                v31 = v9[1];
                ++v9;
                NodeKey::NodeKey((uint64_t)v93, v29);
                NodeKey::NodeKey((uint64_t)v92, v31);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v32 = v6 + 1;
              do
              {
                v9 = v32;
                if (v32 >= v7)
                  break;
                ++v32;
                v33 = *v9;
                NodeKey::NodeKey((uint64_t)v93, v29);
                NodeKey::NodeKey((uint64_t)v92, v33);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while (!(_DWORD)result);
            }
            v34 = v7;
            if (v9 < v7)
            {
              v34 = v7;
              do
              {
                v35 = *--v34;
                NodeKey::NodeKey((uint64_t)v93, v29);
                NodeKey::NodeKey((uint64_t)v92, v35);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v34)
            {
              v36 = *v9;
              *v9 = *v34;
              *v34 = v36;
              do
              {
                v37 = v9[1];
                ++v9;
                NodeKey::NodeKey((uint64_t)v93, v29);
                NodeKey::NodeKey((uint64_t)v92, v37);
              }
              while (!NodeKey::operator<(v93, (uint64_t)v92));
              do
              {
                v38 = *--v34;
                NodeKey::NodeKey((uint64_t)v93, v29);
                NodeKey::NodeKey((uint64_t)v92, v38);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while ((result & 1) != 0);
            }
            v39 = v9 - 1;
            if (v9 - 1 != v6)
              *v6 = *v39;
            a4 = 0;
            *v39 = v29;
            continue;
          }
        }
        v16 = 0;
        v17 = *v6;
        do
        {
          NodeKey::NodeKey((uint64_t)v93, v6[v16 + 1]);
          NodeKey::NodeKey((uint64_t)v92, v17);
          ++v16;
        }
        while (NodeKey::operator<(v93, (uint64_t)v92));
        v18 = &v6[v16];
        if (v16 == 1)
        {
          v7 = a2;
          do
          {
            if (v18 >= v7)
              break;
            v20 = *--v7;
            NodeKey::NodeKey((uint64_t)v93, v20);
            NodeKey::NodeKey((uint64_t)v92, v17);
          }
          while (!NodeKey::operator<(v93, (uint64_t)v92));
        }
        else
        {
          do
          {
            v19 = *--v7;
            NodeKey::NodeKey((uint64_t)v93, v19);
            NodeKey::NodeKey((uint64_t)v92, v17);
          }
          while (!NodeKey::operator<(v93, (uint64_t)v92));
        }
        if (v18 >= v7)
        {
          v26 = v18 - 1;
        }
        else
        {
          v21 = &v6[v16];
          v22 = v7;
          do
          {
            v23 = *v21;
            *v21 = *v22;
            *v22 = v23;
            do
            {
              v24 = v21[1];
              ++v21;
              NodeKey::NodeKey((uint64_t)v93, v24);
              NodeKey::NodeKey((uint64_t)v92, v17);
            }
            while (NodeKey::operator<(v93, (uint64_t)v92));
            do
            {
              v25 = *--v22;
              NodeKey::NodeKey((uint64_t)v93, v25);
              NodeKey::NodeKey((uint64_t)v92, v17);
            }
            while (!NodeKey::operator<(v93, (uint64_t)v92));
          }
          while (v21 < v22);
          v26 = v21 - 1;
        }
        if (v26 != v6)
          *v6 = *v26;
        *v26 = v17;
        v27 = v18 >= v7;
        v7 = a2;
        if (!v27)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,false>(v6, v26, a3, a4 & 1);
          a4 = 0;
          v9 = v26 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v6, v26);
        v9 = v26 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v26;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,0>(void **a1, void **a2, void **a3, void **a4, void **a5)
{
  void *v10;
  _BOOL8 result;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE v19[40];
  int v20[10];

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a2, a3, a4);
  v10 = *a4;
  NodeKey::NodeKey((uint64_t)v20, *a5);
  NodeKey::NodeKey((uint64_t)v19, v10);
  result = NodeKey::operator<(v20, (uint64_t)v19);
  if (result)
  {
    v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    NodeKey::NodeKey((uint64_t)v20, *a4);
    NodeKey::NodeKey((uint64_t)v19, v13);
    result = NodeKey::operator<(v20, (uint64_t)v19);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      v15 = *a2;
      NodeKey::NodeKey((uint64_t)v20, *a3);
      NodeKey::NodeKey((uint64_t)v19, v15);
      result = NodeKey::operator<(v20, (uint64_t)v19);
      if (result)
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        NodeKey::NodeKey((uint64_t)v20, *a2);
        NodeKey::NodeKey((uint64_t)v19, v17);
        result = NodeKey::operator<(v20, (uint64_t)v19);
        if (result)
        {
          v18 = *a1;
          *a1 = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(void **a1, void **a2, void **a3)
{
  void *v6;
  BOOL v7;
  void *v8;
  void *v9;
  _BOOL8 result;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _BYTE v16[40];
  int v17[10];

  v6 = *a1;
  NodeKey::NodeKey((uint64_t)v17, *a2);
  NodeKey::NodeKey((uint64_t)v16, v6);
  v7 = NodeKey::operator<(v17, (uint64_t)v16);
  v8 = *a3;
  v9 = *a2;
  if (v7)
  {
    NodeKey::NodeKey((uint64_t)v17, v8);
    NodeKey::NodeKey((uint64_t)v16, v9);
    result = NodeKey::operator<(v17, (uint64_t)v16);
    v11 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      NodeKey::NodeKey((uint64_t)v17, *a3);
      NodeKey::NodeKey((uint64_t)v16, v11);
      result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else
  {
    NodeKey::NodeKey((uint64_t)v17, v8);
    NodeKey::NodeKey((uint64_t)v16, v9);
    result = NodeKey::operator<(v17, (uint64_t)v16);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = *a1;
      NodeKey::NodeKey((uint64_t)v17, *a2);
      NodeKey::NodeKey((uint64_t)v16, v13);
      result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(void **a1, void **a2)
{
  uint64_t v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  void **v8;
  void **v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void **v16;
  _BYTE v17[40];
  int v18[10];

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      NodeKey::NodeKey((uint64_t)v18, *(a2 - 1));
      NodeKey::NodeKey((uint64_t)v17, v6);
      if (NodeKey::operator<(v18, (uint64_t)v17))
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v8;
    NodeKey::NodeKey((uint64_t)v18, *v9);
    NodeKey::NodeKey((uint64_t)v17, v12);
    if (NodeKey::operator<(v18, (uint64_t)v17))
    {
      v13 = *v9;
      v14 = v10;
      while (1)
      {
        *(void **)((char *)a1 + v14 + 24) = *(void **)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v15 = *(void **)((char *)a1 + v14 + 8);
        NodeKey::NodeKey((uint64_t)v18, v13);
        NodeKey::NodeKey((uint64_t)v17, v15);
        v14 -= 8;
        if (!NodeKey::operator<(v18, (uint64_t)v17))
        {
          v16 = (void **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
}

BOOL NodeKey::operator<(int *a1, uint64_t a2)
{
  int v2;
  _BOOL8 result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a1;
  if (*a1 < *(_DWORD *)a2)
    return 1;
  if (v2 > *(_DWORD *)a2)
    return 0;
  result = 0;
  switch(v2)
  {
    case 1:
      v5 = *((_QWORD *)a1 + 1);
      v6 = *(_QWORD *)(a2 + 8);
      goto LABEL_11;
    case 3:
    case 6:
    case 7:
    case 8:
      v5 = *((_QWORD *)a1 + 2);
      v6 = *(_QWORD *)(a2 + 16);
      goto LABEL_11;
    case 4:
    case 5:
      v7 = *((_QWORD *)a1 + 2);
      v8 = *(_QWORD *)(a2 + 16);
      if (v7 < v8)
        return 1;
      if (v8 < v7)
        return 0;
      v5 = *((_QWORD *)a1 + 3);
      v6 = *(_QWORD *)(a2 + 24);
LABEL_11:
      result = v5 < v6;
      break;
    case 10:
      result = a1[8] < *(_DWORD *)(a2 + 32);
      break;
    default:
      return result;
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(void **a1, void **a2, void **a3, void **a4)
{
  void *v8;
  _BOOL8 result;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  _BYTE v15[40];
  int v16[10];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,reorderStitchingGraphNodes(MTLFunctionStitchingGraph *)::$_3 &,objc_object  {objcproto24MTLFunctionStitchingNode}**>(a1, a2, a3);
  v8 = *a3;
  NodeKey::NodeKey((uint64_t)v16, *a4);
  NodeKey::NodeKey((uint64_t)v15, v8);
  result = NodeKey::operator<(v16, (uint64_t)v15);
  if (result)
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    v11 = *a2;
    NodeKey::NodeKey((uint64_t)v16, *a3);
    NodeKey::NodeKey((uint64_t)v15, v11);
    result = NodeKey::operator<(v16, (uint64_t)v15);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = *a1;
      NodeKey::NodeKey((uint64_t)v16, *a2);
      NodeKey::NodeKey((uint64_t)v15, v13);
      result = NodeKey::operator<(v16, (uint64_t)v15);
      if (result)
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__emplace_unique_key_args<objc_object  {objcproto24MTLFunctionStitchingNode},std::piecewise_construct_t const&,std::tuple<objc_object  {objcproto24MTLFunctionStitchingNode} const&>,std::piecewise_construct_t const&<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_18274FA68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  __int128 v46;
  BOOL v47;
  __n128 result;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  _OWORD *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  _OWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __n128 *v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t *n128_u64;
  BOOL v95;
  uint64_t v96;
  unint64_t *v97;
  __n128 *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  __n128 *v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t *v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  __n128 *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t *v158;
  __n128 *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t *v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  __int128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __n128 v185;
  __int128 v186;
  __n128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __n128 v197;
  __int128 v198;
  __n128 v199;
  __int128 v200;
  __int128 v201;
  __n128 v202;
  __int128 v203;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createStitchingScriptHashImpl(std::vector<MTLUINT256_t>,Air::StitchingScript const*)::$_0 &,MTLUINT256_t*>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v33 = *(_OWORD *)a1;
        v32 = *((_OWORD *)a1 + 1);
        v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v24 = a1 + 4;
      v25 = a1 + 8;
      v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v28 = *(a2 - 4);
      v27 = a2 - 4;
      v29 = bswap64(v28);
      v30 = bswap64(a1[12]);
      if (v29 == v30
        && (v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        v31 = 0;
      }
      else if (v29 < v30)
      {
        v31 = -1;
      }
      else
      {
        v31 = 1;
      }
      if (v31 < 0)
      {
        v36 = *(_OWORD *)v26;
        v35 = *((_OWORD *)a1 + 7);
        v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        v38 = bswap64(*v26);
        v39 = bswap64(*v25);
        if (v38 != v39)
          goto LABEL_54;
        v38 = bswap64(a1[13]);
        v39 = bswap64(a1[9]);
        if (v38 == v39
          && (v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          v40 = 0;
        }
        else
        {
LABEL_54:
          v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          v42 = *(_OWORD *)v25;
          v41 = *((_OWORD *)a1 + 5);
          v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          v44 = bswap64(*v25);
          v45 = bswap64(*v24);
          if (v44 != v45)
            goto LABEL_64;
          v44 = bswap64(a1[9]);
          v45 = bswap64(a1[5]);
          if (v44 == v45
            && (v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
LABEL_64:
            v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            v48 = *(_OWORD *)v24;
            v47 = *((_OWORD *)a1 + 3);
            v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            v50 = bswap64(a1[4]);
            v51 = bswap64(*a1);
            if (v50 != v51)
              goto LABEL_73;
            v50 = bswap64(a1[5]);
            v51 = bswap64(a1[1]);
            if (v50 == v51
              && (v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              v52 = 0;
            }
            else
            {
LABEL_73:
              v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              v54 = *(_OWORD *)a1;
              v53 = *((_OWORD *)a1 + 1);
              v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v56 = *(_OWORD *)v11;
        v57 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v56);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v57), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

char *std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(AirReflection::Node **a1, AirReflection::Node **a2, uint64_t a3, AirReflection::Node **a4, uint64_t a5)
{
  int8x16_t *v6;
  uint64_t v8;
  AirReflection::Node **v9;
  AirReflection::Node *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  AirReflection::Node **v17;
  uint64_t i;
  AirReflection::Node *v19;
  AirReflection::Node **v20;
  Air::FunctionStitching::Node *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  Air::FunctionStitching::Node *v25;
  char *v26;
  AirReflection::Node **v27;
  char *v28;
  AirReflection::Node **v29;
  AirReflection::Node *v30;
  char *v32;

  v6 = (int8x16_t *)a1;
  if (a3 == 3)
  {
    v9 = a1 + 1;
    v10 = a1[1];
    if (AirReflection::Node::node_as_KernelFunction(v10) || Air::FunctionStitching::Node::node_as_EarlyReturnNode(v10))
    {
      v11 = v6->i64[1];
      v6->i64[1] = (uint64_t)*a2;
      *a2 = (AirReflection::Node *)v11;
      *v6 = vextq_s8(*v6, *v6, 8uLL);
      return (char *)v9;
    }
    v8 = v6->i64[0];
    v6->i64[0] = v6->i64[1];
    v6->i64[1] = v8;
    v6->i64[1] = (uint64_t)*a2;
    goto LABEL_4;
  }
  if (a3 == 2)
  {
    v8 = (uint64_t)*a1;
    *a1 = *a2;
LABEL_4:
    *a2 = (AirReflection::Node *)v8;
    return (char *)a2;
  }
  if (a5 >= a3)
  {
    v9 = a1 + 1;
    *a4 = *a1;
    v20 = a4 + 1;
    if (a1 + 1 == a2)
    {
      *a1 = *a2;
    }
    else
    {
      do
      {
        v21 = *v9;
        if (AirReflection::Node::node_as_KernelFunction(*v9)
          || Air::FunctionStitching::Node::node_as_EarlyReturnNode(v21))
        {
          *v20++ = *v9;
        }
        else
        {
          v6->i64[0] = (uint64_t)*v9;
          v6 = (int8x16_t *)((char *)v6 + 8);
        }
        ++v9;
      }
      while (v9 != a2);
      v6->i64[0] = (uint64_t)*a2;
      v9 = (AirReflection::Node **)&v6->i64[1];
      if (v20 <= a4)
        return (char *)v9;
    }
    v23 = 0;
    do
    {
      v9[v23] = a4[v23];
      ++v23;
    }
    while (&a4[v23] < v20);
    return (char *)v9;
  }
  if (a3 >= 0)
    v14 = a3;
  else
    v14 = a3 + 1;
  v15 = v14 >> 1;
  v32 = (char *)&a1[v14 >> 1];
  v16 = 8 - 8 * (v14 >> 1);
  v17 = a1 - 1;
  for (i = v14 >> 1; ; --i)
  {
    v19 = v17[i];
    if (!AirReflection::Node::node_as_KernelFunction(v19)
      && !Air::FunctionStitching::Node::node_as_EarlyReturnNode(v19))
    {
      break;
    }
    if (!v16)
    {
      v22 = (char *)v6;
      goto LABEL_33;
    }
    v16 += 8;
  }
  v22 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(v6, (char *)v6 - v16, i, a4, a5);
LABEL_33:
  v24 = a3 - v15;
  v25 = (Air::FunctionStitching::Node *)v6->i64[v15];
  if (AirReflection::Node::node_as_KernelFunction(v25))
  {
    v26 = v32;
    v27 = (AirReflection::Node **)v32;
LABEL_40:
    v28 = (char *)std::__stable_partition_impl<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_0 &,std::__wrap_iter<Air::FunctionStitching::Node const**>,long,std::pair<Air::FunctionStitching::Node const**,long>>(v27, a2, v24, a4, a5);
  }
  else
  {
    v28 = (char *)(a2 + 1);
    v29 = (AirReflection::Node **)&v6->i64[v15 + 1];
    while (1)
    {
      if (Air::FunctionStitching::Node::node_as_EarlyReturnNode(v25))
      {
LABEL_39:
        v27 = v29 - 1;
        v26 = v32;
        goto LABEL_40;
      }
      if (v29 == a2)
        break;
      --v24;
      v30 = *v29++;
      v25 = v30;
      if (AirReflection::Node::node_as_KernelFunction(v30))
        goto LABEL_39;
    }
    v26 = v32;
  }
  return std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<objc_object  {objcproto24MTLFunctionStitchingNode}**>,objc_object  {objcproto24MTLFunctionStitchingNode}**>(v22, v26, v28);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,false>(uint64_t result, const Air::FunctionStitching::Node **a2, uint64_t a3, char a4)
{
  const Air::FunctionStitching::Node **v6;
  const Air::FunctionStitching::Node **v7;
  const Air::FunctionStitching::Node **v8;
  const Air::FunctionStitching::Node **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const Air::FunctionStitching::Node **v13;
  const Air::FunctionStitching::Node *v14;
  const Air::FunctionStitching::Node *v15;
  uint64_t v16;
  const Air::FunctionStitching::Node *v17;
  const Air::FunctionStitching::Node **v18;
  const Air::FunctionStitching::Node *v19;
  const Air::FunctionStitching::Node *v20;
  const Air::FunctionStitching::Node **v21;
  const Air::FunctionStitching::Node **v22;
  const Air::FunctionStitching::Node *v23;
  const Air::FunctionStitching::Node *v24;
  const Air::FunctionStitching::Node *v25;
  const Air::FunctionStitching::Node **v26;
  BOOL v27;
  BOOL v28;
  const Air::FunctionStitching::Node *v29;
  const Air::FunctionStitching::Node *v30;
  const Air::FunctionStitching::Node *v31;
  const Air::FunctionStitching::Node **v32;
  const Air::FunctionStitching::Node *v33;
  const Air::FunctionStitching::Node **v34;
  const Air::FunctionStitching::Node *v35;
  const Air::FunctionStitching::Node *v36;
  const Air::FunctionStitching::Node *v37;
  const Air::FunctionStitching::Node *v38;
  const Air::FunctionStitching::Node **v39;
  const Air::FunctionStitching::Node *v40;
  const Air::FunctionStitching::Node *v41;
  const Air::FunctionStitching::Node **v42;
  BOOL v43;
  char v44;
  uint64_t v45;
  const Air::FunctionStitching::Node **v46;
  const Air::FunctionStitching::Node *v47;
  const Air::FunctionStitching::Node *v48;
  const Air::FunctionStitching::Node *v49;
  uint64_t v50;
  const Air::FunctionStitching::Node *v51;
  const Air::FunctionStitching::Node **v52;
  int64_t v53;
  int64_t v54;
  int64_t v55;
  uint64_t v56;
  const Air::FunctionStitching::Node **v57;
  const Air::FunctionStitching::Node *v58;
  const Air::FunctionStitching::Node **v59;
  const Air::FunctionStitching::Node *v60;
  const Air::FunctionStitching::Node *v61;
  const Air::FunctionStitching::Node **v62;
  uint64_t v63;
  uint64_t v64;
  const Air::FunctionStitching::Node *v65;
  uint64_t v66;
  uint64_t v67;
  const Air::FunctionStitching::Node *v68;
  const Air::FunctionStitching::Node **v69;
  const Air::FunctionStitching::Node **v70;
  uint64_t v71;
  uint64_t v72;
  const Air::FunctionStitching::Node *v73;
  const Air::FunctionStitching::Node **v74;
  uint64_t v75;
  unint64_t v76;
  const Air::FunctionStitching::Node **v77;
  const Air::FunctionStitching::Node *v78;
  const Air::FunctionStitching::Node *v79;
  const Air::FunctionStitching::Node **v80;
  const Air::FunctionStitching::Node *v82;
  const Air::FunctionStitching::Node *v83;
  const Air::FunctionStitching::Node *v84;
  const Air::FunctionStitching::Node **v85;
  const Air::FunctionStitching::Node **v86;
  const Air::FunctionStitching::Node *v87;
  const Air::FunctionStitching::Node *v88;
  unint64_t v89;
  int64_t v90;
  _BYTE v92[40];
  int v93[10];

  v6 = (const Air::FunctionStitching::Node **)result;
LABEL_2:
  v7 = a2;
  v8 = a2 - 1;
  v9 = v6;
  while (2)
  {
    v6 = v9;
    v10 = (char *)v7 - (char *)v9;
    v11 = v7 - v9;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *v6;
        NodeKey::NodeKey((NodeKey *)v93, *(a2 - 1));
        NodeKey::NodeKey((NodeKey *)v92, v40);
        result = NodeKey::operator<(v93, (uint64_t)v92);
        if ((_DWORD)result)
        {
          v41 = *v6;
          *v6 = *(a2 - 1);
          *(a2 - 1) = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v6, v6 + 1, v8);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v6, v6 + 1, v6 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,0>(v6, v6 + 1, v6 + 2, v6 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v42 = v6 + 1;
          v43 = v6 == v7 || v42 == v7;
          v44 = v43;
          if ((a4 & 1) != 0)
          {
            if ((v44 & 1) == 0)
            {
              v45 = 0;
              v46 = v6;
              do
              {
                v48 = *v46;
                v47 = v46[1];
                v46 = v42;
                NodeKey::NodeKey((NodeKey *)v93, v47);
                NodeKey::NodeKey((NodeKey *)v92, v48);
                result = NodeKey::operator<(v93, (uint64_t)v92);
                if ((_DWORD)result)
                {
                  v49 = *v46;
                  v50 = v45;
                  while (1)
                  {
                    *(const Air::FunctionStitching::Node **)((char *)v6 + v50 + 8) = *(const Air::FunctionStitching::Node **)((char *)v6 + v50);
                    if (!v50)
                      break;
                    v51 = *(const Air::FunctionStitching::Node **)((char *)v6 + v50 - 8);
                    NodeKey::NodeKey((NodeKey *)v93, v49);
                    NodeKey::NodeKey((NodeKey *)v92, v51);
                    result = NodeKey::operator<(v93, (uint64_t)v92);
                    v50 -= 8;
                    if ((result & 1) == 0)
                    {
                      v52 = (const Air::FunctionStitching::Node **)((char *)v6 + v50 + 8);
                      goto LABEL_75;
                    }
                  }
                  v52 = v6;
LABEL_75:
                  *v52 = v49;
                }
                v42 = v46 + 1;
                v45 += 8;
              }
              while (v46 + 1 != a2);
            }
          }
          else if ((v44 & 1) == 0)
          {
            do
            {
              v83 = *v6;
              v82 = v6[1];
              v6 = v42;
              NodeKey::NodeKey((NodeKey *)v93, v82);
              NodeKey::NodeKey((NodeKey *)v92, v83);
              result = NodeKey::operator<(v93, (uint64_t)v92);
              if ((_DWORD)result)
              {
                v84 = *v6;
                v85 = v6;
                do
                {
                  v86 = v85;
                  v87 = *--v85;
                  *v86 = v87;
                  v88 = *(v86 - 2);
                  NodeKey::NodeKey((NodeKey *)v93, v84);
                  NodeKey::NodeKey((NodeKey *)v92, v88);
                  result = NodeKey::operator<(v93, (uint64_t)v92);
                }
                while ((result & 1) != 0);
                *v85 = v84;
              }
              v42 = v6 + 1;
            }
            while (v6 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v6 != v7)
          {
            v89 = v10;
            v53 = (unint64_t)(v11 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = &v6[v56];
                if (2 * v54 + 2 < v11)
                {
                  v58 = v57[1];
                  NodeKey::NodeKey((NodeKey *)v93, *v57);
                  NodeKey::NodeKey((NodeKey *)v92, v58);
                  if (NodeKey::operator<(v93, (uint64_t)v92))
                  {
                    ++v57;
                    v56 = 2 * v55 + 2;
                  }
                }
                v59 = &v6[v55];
                v60 = *v59;
                NodeKey::NodeKey((NodeKey *)v93, *v57);
                NodeKey::NodeKey((NodeKey *)v92, v60);
                result = NodeKey::operator<(v93, (uint64_t)v92);
                if ((result & 1) == 0)
                {
                  v90 = v55;
                  v61 = *v59;
                  do
                  {
                    v62 = v57;
                    *v59 = *v57;
                    if (v53 < v56)
                      break;
                    v63 = (2 * v56) | 1;
                    v57 = &v6[v63];
                    v64 = 2 * v56 + 2;
                    if (v64 < v11)
                    {
                      v65 = v57[1];
                      NodeKey::NodeKey((NodeKey *)v93, *v57);
                      NodeKey::NodeKey((NodeKey *)v92, v65);
                      if (NodeKey::operator<(v93, (uint64_t)v92))
                      {
                        ++v57;
                        v63 = v64;
                      }
                    }
                    NodeKey::NodeKey((NodeKey *)v93, *v57);
                    NodeKey::NodeKey((NodeKey *)v92, v61);
                    result = NodeKey::operator<(v93, (uint64_t)v92);
                    v59 = v62;
                    v56 = v63;
                  }
                  while (!(_DWORD)result);
                  *v62 = v61;
                  v55 = v90;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v66 = v89 >> 3;
            do
            {
              v67 = 0;
              v68 = *v6;
              v69 = v6;
              do
              {
                v70 = &v69[v67 + 1];
                v71 = (2 * v67) | 1;
                v72 = 2 * v67 + 2;
                if (v72 < v66)
                {
                  v73 = v69[v67 + 2];
                  NodeKey::NodeKey((NodeKey *)v93, *v70);
                  NodeKey::NodeKey((NodeKey *)v92, v73);
                  result = NodeKey::operator<(v93, (uint64_t)v92);
                  if ((_DWORD)result)
                  {
                    ++v70;
                    v71 = v72;
                  }
                }
                *v69 = *v70;
                v69 = v70;
                v67 = v71;
              }
              while (v71 <= (uint64_t)((unint64_t)(v66 - 2) >> 1));
              v74 = a2 - 1;
              v43 = v70 == --a2;
              if (v43)
              {
                *v70 = v68;
              }
              else
              {
                *v70 = *v74;
                *v74 = v68;
                v75 = (char *)v70 - (char *)v6 + 8;
                if (v75 >= 9)
                {
                  v76 = (((unint64_t)v75 >> 3) - 2) >> 1;
                  v77 = &v6[v76];
                  v78 = *v70;
                  NodeKey::NodeKey((NodeKey *)v93, *v77);
                  NodeKey::NodeKey((NodeKey *)v92, v78);
                  result = NodeKey::operator<(v93, (uint64_t)v92);
                  if ((_DWORD)result)
                  {
                    v79 = *v70;
                    do
                    {
                      v80 = v77;
                      *v70 = *v77;
                      if (!v76)
                        break;
                      v76 = (v76 - 1) >> 1;
                      v77 = &v6[v76];
                      NodeKey::NodeKey((NodeKey *)v93, *v77);
                      NodeKey::NodeKey((NodeKey *)v92, v79);
                      result = NodeKey::operator<(v93, (uint64_t)v92);
                      v70 = v80;
                    }
                    while ((result & 1) != 0);
                    *v80 = v79;
                  }
                }
              }
            }
            while (v66-- > 2);
          }
          return result;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v13, v6, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v6, v13, v8);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v6 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v6 + 2, &v6[v12 + 1], a2 - 3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v13 - 1, v13, &v6[v12 + 1]);
          v14 = *v6;
          *v6 = *v13;
          *v13 = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *v6;
          NodeKey::NodeKey((NodeKey *)v93, *(v6 - 1));
          NodeKey::NodeKey((NodeKey *)v92, v15);
          if (!NodeKey::operator<(v93, (uint64_t)v92))
          {
            v29 = *v6;
            v30 = *v8;
            NodeKey::NodeKey((NodeKey *)v93, *v6);
            NodeKey::NodeKey((NodeKey *)v92, v30);
            result = NodeKey::operator<(v93, (uint64_t)v92);
            if ((result & 1) != 0)
            {
              v9 = v6;
              do
              {
                v31 = v9[1];
                ++v9;
                NodeKey::NodeKey((NodeKey *)v93, v29);
                NodeKey::NodeKey((NodeKey *)v92, v31);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v32 = v6 + 1;
              do
              {
                v9 = v32;
                if (v32 >= v7)
                  break;
                ++v32;
                v33 = *v9;
                NodeKey::NodeKey((NodeKey *)v93, v29);
                NodeKey::NodeKey((NodeKey *)v92, v33);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while (!(_DWORD)result);
            }
            v34 = v7;
            if (v9 < v7)
            {
              v34 = v7;
              do
              {
                v35 = *--v34;
                NodeKey::NodeKey((NodeKey *)v93, v29);
                NodeKey::NodeKey((NodeKey *)v92, v35);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while ((result & 1) != 0);
            }
            while (v9 < v34)
            {
              v36 = *v9;
              *v9 = *v34;
              *v34 = v36;
              do
              {
                v37 = v9[1];
                ++v9;
                NodeKey::NodeKey((NodeKey *)v93, v29);
                NodeKey::NodeKey((NodeKey *)v92, v37);
              }
              while (!NodeKey::operator<(v93, (uint64_t)v92));
              do
              {
                v38 = *--v34;
                NodeKey::NodeKey((NodeKey *)v93, v29);
                NodeKey::NodeKey((NodeKey *)v92, v38);
                result = NodeKey::operator<(v93, (uint64_t)v92);
              }
              while ((result & 1) != 0);
            }
            v39 = v9 - 1;
            if (v9 - 1 != v6)
              *v6 = *v39;
            a4 = 0;
            *v39 = v29;
            continue;
          }
        }
        v16 = 0;
        v17 = *v6;
        do
        {
          NodeKey::NodeKey((NodeKey *)v93, v6[v16 + 1]);
          NodeKey::NodeKey((NodeKey *)v92, v17);
          ++v16;
        }
        while (NodeKey::operator<(v93, (uint64_t)v92));
        v18 = &v6[v16];
        if (v16 == 1)
        {
          v7 = a2;
          do
          {
            if (v18 >= v7)
              break;
            v20 = *--v7;
            NodeKey::NodeKey((NodeKey *)v93, v20);
            NodeKey::NodeKey((NodeKey *)v92, v17);
          }
          while (!NodeKey::operator<(v93, (uint64_t)v92));
        }
        else
        {
          do
          {
            v19 = *--v7;
            NodeKey::NodeKey((NodeKey *)v93, v19);
            NodeKey::NodeKey((NodeKey *)v92, v17);
          }
          while (!NodeKey::operator<(v93, (uint64_t)v92));
        }
        if (v18 >= v7)
        {
          v26 = v18 - 1;
        }
        else
        {
          v21 = &v6[v16];
          v22 = v7;
          do
          {
            v23 = *v21;
            *v21 = *v22;
            *v22 = v23;
            do
            {
              v24 = v21[1];
              ++v21;
              NodeKey::NodeKey((NodeKey *)v93, v24);
              NodeKey::NodeKey((NodeKey *)v92, v17);
            }
            while (NodeKey::operator<(v93, (uint64_t)v92));
            do
            {
              v25 = *--v22;
              NodeKey::NodeKey((NodeKey *)v93, v25);
              NodeKey::NodeKey((NodeKey *)v92, v17);
            }
            while (!NodeKey::operator<(v93, (uint64_t)v92));
          }
          while (v21 < v22);
          v26 = v21 - 1;
        }
        if (v26 != v6)
          *v6 = *v26;
        *v26 = v17;
        v27 = v18 >= v7;
        v7 = a2;
        if (!v27)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,false>(v6, v26, a3, a4 & 1);
          a4 = 0;
          v9 = v26 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v6, v26);
        v9 = v26 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v26;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,0>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2, const Air::FunctionStitching::Node **a3, const Air::FunctionStitching::Node **a4, const Air::FunctionStitching::Node **a5)
{
  const Air::FunctionStitching::Node *v10;
  _BOOL8 result;
  const Air::FunctionStitching::Node *v12;
  const Air::FunctionStitching::Node *v13;
  const Air::FunctionStitching::Node *v14;
  const Air::FunctionStitching::Node *v15;
  const Air::FunctionStitching::Node *v16;
  const Air::FunctionStitching::Node *v17;
  const Air::FunctionStitching::Node *v18;
  _BYTE v19[40];
  int v20[10];

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a2, a3, a4);
  v10 = *a4;
  NodeKey::NodeKey((NodeKey *)v20, *a5);
  NodeKey::NodeKey((NodeKey *)v19, v10);
  result = NodeKey::operator<(v20, (uint64_t)v19);
  if (result)
  {
    v12 = *a4;
    *a4 = *a5;
    *a5 = v12;
    v13 = *a3;
    NodeKey::NodeKey((NodeKey *)v20, *a4);
    NodeKey::NodeKey((NodeKey *)v19, v13);
    result = NodeKey::operator<(v20, (uint64_t)v19);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      v15 = *a2;
      NodeKey::NodeKey((NodeKey *)v20, *a3);
      NodeKey::NodeKey((NodeKey *)v19, v15);
      result = NodeKey::operator<(v20, (uint64_t)v19);
      if (result)
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        v17 = *a1;
        NodeKey::NodeKey((NodeKey *)v20, *a2);
        NodeKey::NodeKey((NodeKey *)v19, v17);
        result = NodeKey::operator<(v20, (uint64_t)v19);
        if (result)
        {
          v18 = *a1;
          *a1 = *a2;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2, const Air::FunctionStitching::Node **a3)
{
  const Air::FunctionStitching::Node *v6;
  BOOL v7;
  const Air::FunctionStitching::Node *v8;
  const Air::FunctionStitching::Node *v9;
  _BOOL8 result;
  const Air::FunctionStitching::Node *v11;
  const Air::FunctionStitching::Node *v12;
  const Air::FunctionStitching::Node *v13;
  const Air::FunctionStitching::Node *v14;
  const Air::FunctionStitching::Node *v15;
  _BYTE v16[40];
  int v17[10];

  v6 = *a1;
  NodeKey::NodeKey((NodeKey *)v17, *a2);
  NodeKey::NodeKey((NodeKey *)v16, v6);
  v7 = NodeKey::operator<(v17, (uint64_t)v16);
  v8 = *a3;
  v9 = *a2;
  if (v7)
  {
    NodeKey::NodeKey((NodeKey *)v17, v8);
    NodeKey::NodeKey((NodeKey *)v16, v9);
    result = NodeKey::operator<(v17, (uint64_t)v16);
    v11 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v11;
    }
    else
    {
      *a1 = *a2;
      *a2 = v11;
      NodeKey::NodeKey((NodeKey *)v17, *a3);
      NodeKey::NodeKey((NodeKey *)v16, v11);
      result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
      }
    }
  }
  else
  {
    NodeKey::NodeKey((NodeKey *)v17, v8);
    NodeKey::NodeKey((NodeKey *)v16, v9);
    result = NodeKey::operator<(v17, (uint64_t)v16);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = *a1;
      NodeKey::NodeKey((NodeKey *)v17, *a2);
      NodeKey::NodeKey((NodeKey *)v16, v13);
      result = NodeKey::operator<(v17, (uint64_t)v16);
      if (result)
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2)
{
  uint64_t v4;
  _BOOL8 result;
  const Air::FunctionStitching::Node *v6;
  const Air::FunctionStitching::Node *v7;
  const Air::FunctionStitching::Node **v8;
  const Air::FunctionStitching::Node **v9;
  uint64_t v10;
  int v11;
  const Air::FunctionStitching::Node *v12;
  const Air::FunctionStitching::Node *v13;
  uint64_t v14;
  const Air::FunctionStitching::Node *v15;
  const Air::FunctionStitching::Node **v16;
  _BYTE v17[40];
  int v18[10];

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *a1;
      NodeKey::NodeKey((NodeKey *)v18, *(a2 - 1));
      NodeKey::NodeKey((NodeKey *)v17, v6);
      if (NodeKey::operator<(v18, (uint64_t)v17))
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v8;
    NodeKey::NodeKey((NodeKey *)v18, *v9);
    NodeKey::NodeKey((NodeKey *)v17, v12);
    if (NodeKey::operator<(v18, (uint64_t)v17))
    {
      v13 = *v9;
      v14 = v10;
      while (1)
      {
        *(const Air::FunctionStitching::Node **)((char *)a1 + v14 + 24) = *(const Air::FunctionStitching::Node **)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v15 = *(const Air::FunctionStitching::Node **)((char *)a1 + v14 + 8);
        NodeKey::NodeKey((NodeKey *)v18, v13);
        NodeKey::NodeKey((NodeKey *)v17, v15);
        v14 -= 8;
        if (!NodeKey::operator<(v18, (uint64_t)v17))
        {
          v16 = (const Air::FunctionStitching::Node **)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    if (++v9 == a2)
      return 1;
  }
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(const Air::FunctionStitching::Node **a1, const Air::FunctionStitching::Node **a2, const Air::FunctionStitching::Node **a3, const Air::FunctionStitching::Node **a4)
{
  const Air::FunctionStitching::Node *v8;
  _BOOL8 result;
  const Air::FunctionStitching::Node *v10;
  const Air::FunctionStitching::Node *v11;
  const Air::FunctionStitching::Node *v12;
  const Air::FunctionStitching::Node *v13;
  const Air::FunctionStitching::Node *v14;
  _BYTE v15[40];
  int v16[10];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLCalculateStitchingHash(Air::StitchingScript const*,std::vector<MTLUINT256_t>)::$_1 &,Air::FunctionStitching::Node const**>(a1, a2, a3);
  v8 = *a3;
  NodeKey::NodeKey((NodeKey *)v16, *a4);
  NodeKey::NodeKey((NodeKey *)v15, v8);
  result = NodeKey::operator<(v16, (uint64_t)v15);
  if (result)
  {
    v10 = *a3;
    *a3 = *a4;
    *a4 = v10;
    v11 = *a2;
    NodeKey::NodeKey((NodeKey *)v16, *a3);
    NodeKey::NodeKey((NodeKey *)v15, v11);
    result = NodeKey::operator<(v16, (uint64_t)v15);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      v13 = *a1;
      NodeKey::NodeKey((NodeKey *)v16, *a2);
      NodeKey::NodeKey((NodeKey *)v15, v13);
      result = NodeKey::operator<(v16, (uint64_t)v15);
      if (result)
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const* const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1827525FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::__unordered_map_hasher<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::hash<Air::FunctionStitching::Node const*>,std::equal_to<Air::FunctionStitching::Node const*>,true>,std::__unordered_map_equal<Air::FunctionStitching::Node const*,std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>,std::equal_to<Air::FunctionStitching::Node const*>,std::hash<Air::FunctionStitching::Node const*>,true>,std::allocator<std::__hash_value_type<Air::FunctionStitching::Node const*,unsigned int>>>::__emplace_unique_key_args<Air::FunctionStitching::Node const*,std::piecewise_construct_t const&,std::tuple<Air::FunctionStitching::Node const*&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_182752854(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<std::vector<stitchedAirDescriptor>,std::allocator<std::vector<stitchedAirDescriptor>>,unsigned long,void>@<X0>(unint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<stitchedAirDescriptor>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1827528AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::__shared_ptr_emplace[abi:ne180100]<unsigned long,std::allocator<std::vector<stitchedAirDescriptor>>,0>(_QWORD *a1, unint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E0FDF498;
  std::vector<stitchedAirDescriptor>::vector(a1 + 3, *a2);
  return a1;
}

void sub_1827528F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF498;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

void std::__shared_ptr_emplace<std::vector<stitchedAirDescriptor>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<stitchedAirDescriptor>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::vector<stitchedAirDescriptor>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_182752A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<stitchedAirDescriptor>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<stitchedAirDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<stitchedAirDescriptor>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<stitchedAirDescriptor>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  NSObject *v5;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    v5 = *(NSObject **)(i - 40);
    v4 = v5;
    if (v5)
      dispatch_release(v4);
  }
  a1[1] = v2;
}

MTLAccelerationStructureCommandProgressBinsInternal *MTLProgressBinsMake(unsigned int a1, unsigned int a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  MTLAccelerationStructureCommandProgressBinsInternal *v16;

  v16 = (MTLAccelerationStructureCommandProgressBinsInternal *)operator new();
  MTLAccelerationStructureCommandProgressBinsInternal::MTLAccelerationStructureCommandProgressBinsInternal(v16, a1, a2, a3, a4, a5, a6, a7, a8);
  return v16;
}

void sub_182753908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10B0C404C6F8B55);
  _Unwind_Resume(a1);
}

MTLAccelerationStructureCommandProgressBinsInternal *MTLProgressBinsFree(MTLAccelerationStructureCommandProgressBinsInternal *result)
{
  if (result)
  {
    MTLAccelerationStructureCommandProgressBinsInternal::~MTLAccelerationStructureCommandProgressBinsInternal(result);
    JUMPOUT(0x186DABFBCLL);
  }
  return result;
}

uint64_t MTLProgressBinsGetNumberOfSubstreams(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 40);
}

uint64_t MTLProgressBinsGetActiveSubstream(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 42);
}

uint64_t MTLProgressBinsSynchronizeBuffer(uint64_t a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v7;
  unsigned int v8;

  if (!a2)
    return 0xFFFFFFFFLL;
  v3 = objc_msgSend(a2, "gpuAddress");
  v4 = 73244475 * ((73244475 * (v3 ^ (v3 >> 16))) ^ ((73244475 * (v3 ^ (v3 >> 16))) >> 16));
  v5 = (v4 ^ (v4 >> 16)) % *(unsigned int *)(a1 + 136);
  if ((v5 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v8 = (v4 ^ (v4 >> 16)) % *(unsigned int *)(a1 + 136);
  if (std::__hash_table<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,MTLStructTypeInternal *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,MTLStructTypeInternal *>>>::find<unsigned int>((_QWORD *)(a1 + 152), &v8))
  {
    return 0xFFFFFFFFLL;
  }
  v7 = v5;
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(a1 + 152, &v7, &v7);
  return *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * v5);
}

uint64_t MTLProgressBinsSelectSubstreamWithDescriptor(uint64_t a1, int a2, MTLAccelerationStructureDescriptor *a3)
{
  unint64_t PrimitiveCountFromDescriptor;

  PrimitiveCountFromDescriptor = MTLProgressBinsGetPrimitiveCountFromDescriptor(a3);
  return MTLProgressBinsSelectSubstreamWithPrimitiveCount(a1, a2, PrimitiveCountFromDescriptor);
}

uint64_t MTLProgressBinsGetPrimitiveCountFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (-[MTLAccelerationStructureDescriptor isInstanceDescriptor](a1, "isInstanceDescriptor"))
  {
    v2 = (void *)objc_opt_class();
    if (objc_msgSend(v2, "isSubclassOfClass:", objc_opt_class()))
      return -[MTLAccelerationStructureDescriptor instanceCount](a1, "instanceCount");
    v20 = (void *)objc_opt_class();
    if (objc_msgSend(v20, "isSubclassOfClass:", objc_opt_class()))
      return -[MTLAccelerationStructureDescriptor maxInstanceCount](a1, "maxInstanceCount");
    return 0;
  }
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v4 = (void *)-[MTLAccelerationStructureDescriptor geometryDescriptors](a1, "geometryDescriptors", 0);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = 0;
  v8 = *(_QWORD *)v22;
  do
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)v22 != v8)
        objc_enumerationMutation(v4);
      v10 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
      v11 = (void *)objc_opt_class();
      if (objc_msgSend(v11, "isSubclassOfClass:", objc_opt_class()))
      {
        v12 = objc_msgSend(v10, "triangleCount");
LABEL_13:
        v7 += v12;
        continue;
      }
      v13 = (void *)objc_opt_class();
      if (objc_msgSend(v13, "isSubclassOfClass:", objc_opt_class()))
      {
        v12 = objc_msgSend(v10, "boundingBoxCount");
        goto LABEL_13;
      }
      v14 = (void *)objc_opt_class();
      if (objc_msgSend(v14, "isSubclassOfClass:", objc_opt_class()))
      {
        v15 = objc_msgSend(v10, "triangleCount");
        v16 = (void *)objc_msgSend(v10, "vertexBuffers");
LABEL_22:
        v7 += objc_msgSend(v16, "count") * v15;
        continue;
      }
      v17 = (void *)objc_opt_class();
      if (objc_msgSend(v17, "isSubclassOfClass:", objc_opt_class()))
      {
        v15 = objc_msgSend(v10, "boundingBoxCount");
        v16 = (void *)objc_msgSend(v10, "boundingBoxBuffers");
        goto LABEL_22;
      }
      v18 = (void *)objc_opt_class();
      if (objc_msgSend(v18, "isSubclassOfClass:", objc_opt_class()))
      {
        v12 = objc_msgSend(v10, "segmentCount");
        goto LABEL_13;
      }
      v19 = (void *)objc_opt_class();
      if (objc_msgSend(v19, "isSubclassOfClass:", objc_opt_class()))
      {
        v15 = objc_msgSend(v10, "segmentCount");
        v16 = (void *)objc_msgSend(v10, "controlPointBuffers");
        goto LABEL_22;
      }
    }
    v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  }
  while (v6);
  return v7;
}

uint64_t MTLProgressBinsSelectSubstreamWithPrimitiveCount(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  unint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  float v10;
  unint64_t v11;
  float v12;

  v3 = 12;
  if (a2)
    v3 = 20;
  v4 = 8;
  if (a2)
    v4 = 16;
  v5 = *(float *)(a1 + v4);
  v6 = *(float *)(a1 + v3);
  v7 = *(unsigned __int16 *)(a1 + 40);
  if (v7 < 2)
  {
    v9 = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = *(float *)(a1 + 24);
    v11 = v7 - 1;
    do
    {
      v12 = *(float *)(a1 + 28 + 4 * v8++);
      if (v12 < v10)
      {
        v9 = v8;
        v10 = v12;
      }
    }
    while (v11 != v8);
  }
  *(_WORD *)(a1 + 42) = v9;
  *(float *)(a1 + 44) = v5 + (float)(v6 * (float)a3);
  return v9;
}

uint64_t MTLProgressBinsSelectSubstreamWithBufferWriteSize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;

  v2 = *(unsigned __int16 *)(a1 + 40);
  if (v2 < 2)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = *(float *)(a1 + 24);
    v6 = v2 - 1;
    do
    {
      v7 = *(float *)(a1 + 28 + 4 * v3++);
      if (v7 < v5)
      {
        v4 = v3;
        v5 = v7;
      }
    }
    while (v6 != v3);
  }
  v8 = *(float *)a1 + (float)(*(float *)(a1 + 4) * (float)a2);
  *(_WORD *)(a1 + 42) = v4;
  *(float *)(a1 + 44) = v8;
  return v4;
}

uint64_t MTLProgressBinsUpdate(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v8;

  v2 = *(unsigned __int16 *)(a1 + 42);
  *(float *)(a1 + 4 * v2 + 24) = *(float *)(a1 + 44) + *(float *)(a1 + 4 * v2 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(uint64_t **)(a1 + 72);
    if (v3)
    {
      v4 = *(_DWORD *)(a1 + 140);
      do
      {
        *((_DWORD *)v3 + 8) = v4;
        *((_DWORD *)v3 + 9) = v2;
        v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_handle_merge_multi[abi:ne180100]<std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>((_QWORD *)(a1 + 96), (_QWORD *)(a1 + 56));
    ++*(_DWORD *)(a1 + 140);
    return 0xFFFFFFFFLL;
  }
  if (!*(_QWORD *)(a1 + 176))
    return 0xFFFFFFFFLL;
  v6 = (_QWORD *)(a1 + 152);
  v5 = *(unsigned int *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = v5 + 1;
  v7 = *(uint64_t ***)(a1 + 168);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 144);
    do
    {
      *(_DWORD *)(v8 + 4 * *((unsigned int *)v7 + 4)) = v5;
      v7 = (uint64_t **)*v7;
    }
    while (v7);
  }
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(v6);
  return v5;
}

_QWORD *MTLProgressBinsForceBarrier(_QWORD *result, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v3 = result;
    if (*((_BYTE *)result + 48))
    {
      objc_msgSend(a2, "endVirtualSubstream");
      return (_QWORD *)objc_msgSend(a2, "beginVirtualSubstream");
    }
    else
    {
      v4 = *((unsigned __int16 *)result + 21);
      v5 = *((unsigned int *)result + 35);
      *((_DWORD *)result + 35) = v5 + 1;
      objc_msgSend(a2, "signalProgress:", v5);
      if (*((_WORD *)v3 + 20))
      {
        v6 = 0;
        do
        {
          objc_msgSend(a2, "setSubstream:", v6);
          objc_msgSend(a2, "waitForProgress:", v5);
          v6 = (v6 + 1);
        }
        while (v6 < *((unsigned __int16 *)v3 + 20));
      }
      objc_msgSend(a2, "setSubstream:", v4);
      return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(v3 + 19);
    }
  }
  return result;
}

uint64_t MTLProgressBinsEnableVirtualSubstreams(uint64_t result)
{
  if (result)
    *(_BYTE *)(result + 48) = 1;
  return result;
}

uint64_t MTLProgressBinsSynchronizeBufferAccess(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[3];
  uint64_t v14;

  v14 = (uint64_t)a2;
  if (result)
  {
    v5 = result;
    if (*(_BYTE *)(result + 48))
    {
      v7 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__equal_range_multi<objc_object  {objcproto9MTLBuffer}>((_QWORD *)(result + 96), &v14);
      if (v7 != v8)
      {
        v9 = v7;
        v10 = v8;
        do
        {
          if (a3 == 1 || v9[3] == 1)
          {
            v11 = *((unsigned int *)v9 + 8);
            v12 = (unsigned __int16)*((_DWORD *)v9 + 9);
            *(_WORD *)(v5 + 42) = *((_DWORD *)v9 + 9);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v11, v12);
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9 != v10);
      }
      v13[0] = v14;
      v13[1] = a3;
      v13[2] = -1;
      return (uint64_t)std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__emplace_multi<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>((_QWORD *)(v5 + 56), v13);
    }
    else
    {
      result = MTLProgressBinsSynchronizeBuffer(result, a2);
      if ((result & 0x80000000) == 0)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a4 + 16))(a4, result, *(unsigned __int16 *)(v5 + 42));
    }
  }
  return result;
}

_QWORD *MTLProgressBinsReset(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    result = std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::clear(result + 12);
    v1[3] = 0;
    v1[4] = 0;
    *((_WORD *)v1 + 21) = 0;
    *((_DWORD *)v1 + 35) = 0;
  }
  return result;
}

void MTLAccelerationStructureCommandProgressBinsInternal::MTLAccelerationStructureCommandProgressBinsInternal(MTLAccelerationStructureCommandProgressBinsInternal *this, unsigned int a2, unsigned int a3, float a4, float a5, float a6, float a7, float a8, float a9)
{
  unsigned int v10;
  void *v11;

  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 46) = 1065353216;
  *(float *)this = a4;
  *((float *)this + 1) = a5;
  *((float *)this + 2) = a6;
  *((float *)this + 3) = a7;
  *((float *)this + 4) = a8;
  *((float *)this + 5) = a9;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 20) = a2;
  *((_WORD *)this + 21) = 0;
  *((_DWORD *)this + 35) = 0;
  if (a2 < 2 || (v10 = a3, a3 < 2))
  {
    v10 = 0;
    *((_QWORD *)this + 18) = 0;
  }
  else
  {
    v11 = (void *)operator new[]();
    *((_QWORD *)this + 18) = v11;
    memset(v11, 255, 4 * v10);
  }
  *((_DWORD *)this + 34) = v10;
}

void sub_18275A238(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MTLAccelerationStructureCommandProgressBinsInternal::~MTLAccelerationStructureCommandProgressBinsInternal(MTLAccelerationStructureCommandProgressBinsInternal *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 18);
  if (v2)
    MEMORY[0x186DABFA4](v2, 0x1000C8052888210);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 152);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)this + 56);
}

_QWORD *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_18275A4B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_handle_merge_multi[abi:ne180100]<std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *inserted;
  _QWORD *v10;
  _BYTE v11[24];

  v2 = (_QWORD *)a2[2];
  if (v2)
  {
    v4 = result;
    do
    {
      v5 = v2[2];
      v6 = HIDWORD(v5);
      v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
      v8 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      inserted = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi_prepare((uint64_t)v4, v8, v2 + 2);
      v10 = (_QWORD *)*v2;
      std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove(a2, v2, (uint64_t)v11);
      v2[1] = v8;
      result = std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(v4, v2, inserted);
      v2 = v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__equal_range_multi<objc_object  {objcproto9MTLBuffer}>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _QWORD *v4;

  result = std::__hash_table<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::__unordered_map_hasher<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::hash<MTLFunctionStitchingFunctionNode *>,std::equal_to<MTLFunctionStitchingFunctionNode *>,true>,std::__unordered_map_equal<MTLFunctionStitchingFunctionNode *,std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>,std::equal_to<MTLFunctionStitchingFunctionNode *>,std::hash<MTLFunctionStitchingFunctionNode *>,true>,std::allocator<std::__hash_value_type<MTLFunctionStitchingFunctionNode *,unsigned long>>>::find<MTLFunctionStitchingFunctionNode *>(a1, a2);
  if (result)
  {
    v4 = result;
    do
      v4 = (_QWORD *)*v4;
    while (v4 && v4[2] == *a2);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__emplace_multi<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;

  std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__construct_node<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi(a1, v4);
}

void sub_18275A9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__construct_node<std::pair<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal>>@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  __n128 result;
  unint64_t v9;
  unint64_t v10;

  v5 = a1 + 16;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = *a2;
  *((_QWORD *)v6 + 2) = *a2;
  result = *(__n128 *)(a2 + 1);
  *(__n128 *)(v6 + 24) = result;
  *(_BYTE *)(a3 + 16) = 1;
  v9 = HIDWORD(v7);
  v10 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69
                                                                             * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage,std::equal_to,std::hash,true>,std::allocator<MTLAccelerationStructureCommandProgressBinsInternal::BufferUsage>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string_view>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string_view>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string_view>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string_view>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

uint64_t isAIRHeaderExtensionCommand(const load_command *a1, unint64_t *a2, unint64_t *a3, unsigned int *a4)
{
  uint64_t v8;
  size_t v9;
  const char **i;

  if (a1->cmd != 49 || a1->cmdsize != 40)
    return 0;
  v8 = 0;
  v9 = (size_t)a1[4];
  for (i = (const char **)&off_1E0FE3CB8; !v9 || strncmp((const char *)&a1[1], *i, v9); i += 2)
  {
    if (++v8 == 9)
      return 0;
  }
  *a2 = (unint64_t)a1[3];
  *a3 = (unint64_t)a1[4];
  *a4 = v8;
  return 1;
}

void sub_18275B074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18275B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  MTLAirNTObject::~MTLAirNTObject((MTLAirNTObject *)va);
  _Unwind_Resume(a1);
}

uint64_t ca_log_graphics_CommandQueueRateLimiting(const NSString *a1)
{
  return AnalyticsSendEventLazy();
}

uint64_t ___Z40ca_log_graphics_CommandQueueRateLimitingPK8NSString_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v3;
  _QWORD v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v3 = CFSTR("process_name");
  v4[0] = v1;
  return objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, &v3, 1);
}

void createCommandQueueRateLimitingTelemetry()
{
  if (createCommandQueueRateLimitingTelemetry::onceToken != -1)
    dispatch_once(&createCommandQueueRateLimitingTelemetry::onceToken, &__block_literal_global_12);
}

void __createCommandQueueRateLimitingTelemetry_block_invoke()
{
  CFBundleRef MainBundle;
  const __CFString *Identifier;
  const __CFString *v2;
  CFIndex Length;
  CFIndex v4;
  _BYTE *v5;
  const char *v6;

  MainBundle = CFBundleGetMainBundle();
  CFRetain(MainBundle);
  if (!MainBundle)
    goto LABEL_8;
  Identifier = CFBundleGetIdentifier(MainBundle);
  if (!Identifier)
    goto LABEL_8;
  v2 = Identifier;
  Length = CFStringGetLength(Identifier);
  v4 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v5 = malloc_type_malloc(v4, 0xC1B0FE65uLL);
  if (!CFStringGetCString(v2, v5, v4, 0x8000100u))
  {
    free(v5);
LABEL_8:
    CFRelease(MainBundle);
    goto LABEL_9;
  }
  CFRelease(MainBundle);
  if (v5)
  {
    if (*v5)
    {
LABEL_10:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
      goto LABEL_11;
    }
    free(v5);
  }
LABEL_9:
  v6 = getprogname();
  v5 = strdup(v6);
  if (MainBundle)
    goto LABEL_10;
LABEL_11:
  AnalyticsSendEventLazy();
  free(v5);
}

void validateGPUPriority(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 > 5)
  {
    MTLReportFailure(0, "validateGPUPriority", 121, (uint64_t)CFSTR("priority (%d) is not a valid MTLGPUPriority"), a5, a6, a7, a8, a1);
  }
  else if (a1 == 3 && (a2 & 1) == 0)
  {
    MTLReportFailure(0, "validateGPUPriority", 118, (uint64_t)CFSTR("priority (%d) is not valid for foreground"), a5, a6, a7, a8, 3);
  }
}

BOOL MTLVersionedDB::isVersionEntry(uint64_t a1, uint64_t a2, char *__s1)
{
  if (*(_BYTE *)(a1 + 12))
  {
    if (a2 == 8)
      return *(_QWORD *)__s1 == 0xFFFFFFFFLL;
    return 0;
  }
  if (a2 != 12)
    return 0;
  return strncmp(__s1, "_DB_VERSION_", 0xCuLL) == 0;
}

uint64_t MTLVersionedDB::getOrSetVersion(MTLVersionedDB *this, unsigned int a2)
{
  size_t *v3;
  std::string *v4;
  size_t *v5;
  std::string::size_type size;
  uint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  std::string __p;
  std::string v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  char v19[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = a2;
  v16 = 4;
  v17 = &v18;
  v15 = 0xFFFFFFFFLL;
  std::string::basic_string[abi:ne180100]<0>(&__p, "_DB_VERSION_");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = __p;
  }
  if (*((_BYTE *)this + 12))
  {
    v3 = (size_t *)operator new();
    *v3 = 8;
    v4 = (std::string *)&v15;
  }
  else
  {
    v5 = (size_t *)operator new();
    v3 = v5;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    v4 = &v14;
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
    *v5 = size;
  }
  v3[1] = (size_t)v4;
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v12, this);
  if (!v12)
    goto LABEL_20;
  if (!mdb_get(v12, *((_DWORD *)this + 2), v3, &v16) && v16 == 4)
  {
    v7 = *v17;
    goto LABEL_21;
  }
  v8 = mdb_put(v12, *((_DWORD *)this + 2), v3, (uint64_t)&v16, 0);
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v9 = mdb_strerror(v8);
      MTLArchiveUsageDB::store((uint64_t)v9, (uint64_t)v19, v10);
    }
LABEL_20:
    v7 = 0xFFFFFFFFLL;
    goto LABEL_21;
  }
  v7 = v18;
LABEL_21:
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v12);
  MEMORY[0x186DABFBC](v3, 0x1080C4057E67DB5);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v7;
}

void sub_18275CAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a9);
  MEMORY[0x186DABFBC](v18, 0x1080C4057E67DB5);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(a1);
}

void MTLVersionedDB::openDB(uint64_t *a1, uint64_t a2, unsigned int a3, _BYTE *a4, _BYTE *a5)
{
  int v10;
  int v11;
  const char *v12;
  const char *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  *a4 = 1;
  *a5 = 1;
  v10 = mdb_env_create(a1);
  if (v10)
  {
    v11 = v10;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      MTLVersionedDB::openDB(v11);
LABEL_14:
    *a1 = 0;
    return;
  }
  if (*(char *)(a2 + 23) >= 0)
    v12 = (const char *)a2;
  else
    v12 = *(const char **)a2;
  mkdir(v12, 0x1EDu);
  if (*(char *)(a2 + 23) >= 0)
    v13 = (const char *)a2;
  else
    v13 = *(const char **)a2;
  v14 = mdb_env_open(*a1, v13, 0, 0x1A4u);
  if (v14)
  {
    v15 = v14;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      MTLVersionedDB::openDB((char *)(a2 + 23), (_QWORD *)a2, v15);
    mdb_env_close((_QWORD *)*a1);
    *a4 = 0;
    goto LABEL_14;
  }
  v16 = MTLVersionedDB::getOrSetVersion((MTLVersionedDB *)a1, a3);
  if (v16 != a3)
  {
    v17 = v16;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      MTLVersionedDB::openDB(v17, a3);
    *a5 = 0;
  }
}

_QWORD **MTLVersionedDB::MTLVersionedDB(_QWORD **a1, uint64_t *a2, unsigned int a3, char a4, char a5)
{
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int16 v14;

  *a1 = 0;
  *((_DWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 12) = a4;
  *((_BYTE *)a1 + 13) = a5;
  v14 = 0;
  MTLVersionedDB::openDB((uint64_t *)a1, (uint64_t)a2, a3, (_BYTE *)&v14 + 1, &v14);
  if (HIBYTE(v14))
    v8 = v14 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      MTLVersionedDB::MTLVersionedDB();
    if (*a1)
    {
      MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v13, (MTLVersionedDB *)a1);
      if (v13)
      {
        mdb_drop(v13, *((_DWORD *)a1 + 2), 0);
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        MTLVersionedDB::MTLVersionedDB(a2, v10, v11);
      }
      MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v13);
      v9 = *a1;
    }
    else
    {
      v9 = 0;
    }
    mdb_env_close(v9);
    MTLVersionedDB::openDB((uint64_t *)a1, (uint64_t)a2, a3, (_BYTE *)&v14 + 1, &v14);
    if (!HIBYTE(v14) || !(_BYTE)v14)
    {
      if (*a1)
        mdb_env_close(*a1);
      *a1 = 0;
    }
  }
  return a1;
}

void sub_18275CDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a9);
  _Unwind_Resume(a1);
}

MTLVersionedDB::Transaction *MTLVersionedDB::Transaction::Transaction(MTLVersionedDB::Transaction *this, MTLVersionedDB *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)this = 0;
  if (*(_QWORD *)a2)
  {
    v4 = mdb_txn_begin(*(_QWORD *)a2, 0, 0, (uint64_t *)this);
    if (v4)
    {
      v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        MTLVersionedDB::Transaction::Transaction(v5);
LABEL_12:
      *(_QWORD *)this = 0;
      return this;
    }
    if (*((_BYTE *)a2 + 12))
      v6 = 262152;
    else
      v6 = 0x40000;
    v7 = mdb_dbi_open(*(_QWORD *)this, 0, v6 | (4 * *((unsigned __int8 *)a2 + 13)), (unsigned int *)a2 + 2);
    if (v7)
    {
      v8 = v7;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        MTLVersionedDB::Transaction::Transaction(v8);
      mdb_txn_abort(*(_QWORD *)this);
      goto LABEL_12;
    }
  }
  return this;
}

void MTLVersionedDB::Transaction::~Transaction(MTLVersionedDB::Transaction *this)
{
  uint64_t v1;
  int v2;
  char *v3;
  uint64_t v4;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  if (v1)
  {
    v2 = mdb_txn_commit(v1);
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v3 = mdb_strerror(v2);
        MTLVersionedDB::Transaction::~Transaction((uint64_t)v3, (uint64_t)v5, v4);
      }
    }
  }
}

void sub_18275CF54(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void MTLVersionedDB::~MTLVersionedDB(MTLVersionedDB *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    mdb_dbi_close(v2, *((_DWORD *)this + 2));
    mdb_env_close(*(_QWORD **)this);
  }
}

void MTLVersionedDB::dumpTable(MTLVersionedDB *this)
{
  int v2;
  char *v3;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  _QWORD v8[2];
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v11, this);
  if (v11)
  {
    v10 = 0;
    v2 = mdb_cursor_open(v11, *((_DWORD *)this + 2), &v10);
    if (v2)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v3 = mdb_strerror(v2);
        MTLArchiveUsageDB::prune((uint64_t)v3, (uint64_t)buf, v4);
      }
    }
    else
    {
      v5 = mdb_cursor_get(v10, v9, v8, 0);
      v6 = 0;
      v7 = MEMORY[0x1E0C81028];
      while (v5 != -30798)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67110144;
          v13 = v6;
          v14 = 2048;
          v15 = v9[0];
          v16 = 2048;
          v17 = v9[1];
          v18 = 2048;
          v19 = v8[0];
          v20 = 2048;
          v21 = v8[1];
          _os_log_debug_impl(&dword_182636000, v7, OS_LOG_TYPE_DEBUG, "%d: key(%zu,%p) data(%zu,%p)", buf, 0x30u);
          ++v6;
        }
        v5 = mdb_cursor_get(v10, v9, v8, 8);
      }
    }
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v11);
}

void sub_18275D130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)va);
  _Unwind_Resume(a1);
}

char *OUTLINED_FUNCTION_2_1@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 8) = a2;
  return mdb_strerror(a1);
}

void FileSignature::FileSignature(FileSignature *this)
{
  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
}

uint64_t FileSignature::FileSignature(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *v5;
  _BYTE v7[4];
  int v8;
  __int128 v9;
  uint64_t v10;
  stat v11;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  if (!stat(v4, &v11))
  {
    *(_DWORD *)a1 = v11.st_dev;
    *(_QWORD *)(a1 + 8) = v11.st_ino;
  }
  v10 = 0;
  v9 = xmmword_182819E28;
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  if (!getattrlist(v5, &v9, v7, 8uLL, 0x20u))
    *(_DWORD *)(a1 + 16) = v8;
  return a1;
}

BOOL operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == (unint64_t)*(unsigned int *)(a2 + 16);
}

{
  BOOL v2;

  if (*(_BYTE *)(a1 + 1088))
    v2 = *(_BYTE *)(a2 + 1088) == 0;
  else
    v2 = 1;
  return !v2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
}

BOOL operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16);
}

uint64_t ArchivePayload::ArchivePayload(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  std::string::size_type v7;
  uint64_t v8;
  char v9;

  *(_DWORD *)a1 = a4;
  *(_DWORD *)(a1 + 4) = a5;
  FileSignature::FileSignature(a1 + 8, a2);
  FileSignature::FileSignature(a1 + 32, a3);
  *(_QWORD *)(a1 + 1080) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    v7 = *(_QWORD *)(a3 + 8);
    if (v7 >= 0x401)
    {
      v9 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(a3 + 23);
  }
  std::string::copy((const std::string *)a3, (std::string::value_type *)(a1 + 56), v7, 0);
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 1080) = v8;
  v9 = 1;
LABEL_8:
  *(_BYTE *)(a1 + 1088) = v9;
  return a1;
}

_DWORD *ArchivePayload::ArchivePayload(_DWORD *__dst, size_t __n, void *__src)
{
  __dst[2] = 0;
  *((_QWORD *)__dst + 2) = 0;
  __dst[6] = 0;
  __dst[8] = 0;
  *((_QWORD *)__dst + 5) = 0;
  __dst[12] = 0;
  *((_QWORD *)__dst + 135) = 0;
  *((_BYTE *)__dst + 1088) = 0;
  if (__n - 1081 >= 0xFFFFFFFFFFFFFBFFLL)
  {
    memcpy(__dst, __src, __n);
    *((_QWORD *)__dst + 135) = __n - 56;
    *((_BYTE *)__dst + 1088) = 1;
  }
  return __dst;
}

_QWORD *ArchivePayload::serialization@<X0>(ArchivePayload *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *a2 = result;
  *result = *((_QWORD *)this + 135) + 56;
  result[1] = this;
  return result;
}

_QWORD *ArchivePayload::getRecompiledArchive@<X0>(ArchivePayload *this@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100](a2, (char *)this + 56, *((_QWORD *)this + 135));
}

uint64_t ArchivePayload::isValid(ArchivePayload *this)
{
  return *((unsigned __int8 *)this + 1088);
}

BOOL ArchivePayload::matchesCurrent(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v6;
  _BYTE v7[1096];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 1088))
    return 0;
  std::string::basic_string[abi:ne180100](__p, (void *)(a1 + 56), *(_QWORD *)(a1 + 1080));
  ArchivePayload::ArchivePayload((uint64_t)v7, a2, (uint64_t)__p, 0, 0);
  if (v6 < 0)
    operator delete(__p[0]);
  return operator==((uint64_t)v7, a1);
}

void sub_18275D4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD **MTLArchiveMapDB::MTLArchiveMapDB(_QWORD **a1, uint64_t *a2)
{
  return MTLVersionedDB::MTLVersionedDB(a1, a2, 3u, 0, 1);
}

void MTLArchiveMapDB::remove(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string::size_type size;
  std::string *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string::size_type v21;
  std::string *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  std::string::size_type v31;
  std::string *v32;
  int v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  _QWORD v37[2];
  _BYTE v38[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v35 = *(std::string *)a3;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    v36 = v35;
  }
  v34 = 0;
  v9 = mdb_cursor_open(a2, *(_DWORD *)(a1 + 8), &v34);
  if (v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v10 = mdb_strerror(v9);
      MTLArchiveUsageDB::prune((uint64_t)v10, (uint64_t)v38, v11);
    }
  }
  else
  {
    v12 = v34;
    v13 = (_QWORD *)operator new();
    v14 = v13;
    size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v36.__r_.__value_.__l.__size_;
    v16 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v16 = (std::string *)v36.__r_.__value_.__r.__words[0];
    *v13 = size;
    v13[1] = v16;
    v17 = mdb_cursor_get(v12, v13, v37, 16);
    MEMORY[0x186DABFBC](v14, 0x1080C4057E67DB5);
    if (v17 != -30798)
    {
      v18 = v34;
      v19 = (_QWORD *)operator new();
      v20 = v19;
      v21 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = v36.__r_.__value_.__l.__size_;
      v22 = &v36;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v36.__r_.__value_.__r.__words[0];
      *v19 = v21;
      v19[1] = v22;
      v23 = mdb_cursor_get(v18, v19, v37, 1);
      MEMORY[0x186DABFBC](v20, 0x1080C4057E67DB5);
      if (v23 != -30798)
      {
        while (1)
        {
          v24 = operator new();
          v25 = v24;
          v27 = v37[0];
          v26 = (const void *)v37[1];
          *(_DWORD *)(v24 + 8) = 0;
          *(_QWORD *)(v24 + 16) = 0;
          *(_DWORD *)(v24 + 24) = 0;
          *(_DWORD *)(v24 + 32) = 0;
          *(_QWORD *)(v24 + 40) = 0;
          *(_DWORD *)(v24 + 48) = 0;
          *(_QWORD *)(v24 + 1080) = 0;
          *(_BYTE *)(v24 + 1088) = 0;
          if (v27 - 1081 >= 0xFFFFFFFFFFFFFBFFLL)
          {
            memcpy((void *)v24, v26, v27);
            *(_QWORD *)(v25 + 1080) = v27 - 56;
            *(_BYTE *)(v25 + 1088) = 1;
          }
          if (*(_DWORD *)v25 == a4 && *(_DWORD *)(v25 + 4) == a5)
            break;
          v28 = v34;
          v29 = (_QWORD *)operator new();
          v30 = v29;
          v31 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
          if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v32 = &v36;
          }
          else
          {
            v31 = v36.__r_.__value_.__l.__size_;
            v32 = (std::string *)v36.__r_.__value_.__r.__words[0];
          }
          *v29 = v31;
          v29[1] = v32;
          v33 = mdb_cursor_get(v28, v29, v37, 9);
          MEMORY[0x186DABFBC](v30, 0x1080C4057E67DB5);
          MEMORY[0x186DABFBC](v25, 0x1000C4006F0AA6CLL);
          if (v33 == -30798)
            goto LABEL_31;
        }
        mdb_cursor_del(v34, 0);
        MEMORY[0x186DABFBC](v25, 0x1000C4006F0AA6CLL);
      }
    }
  }
LABEL_31:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_18275D8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x186DABFBC](v20, 0x1000C4006F0AA6CLL);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void MTLArchiveMapDB::read(MTLVersionedDB *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string::size_type size;
  std::string *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  std::string::size_type v22;
  std::string *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string::size_type v32;
  std::string *v33;
  int v34;
  uint64_t v35;
  std::string v36;
  std::string v37;
  _QWORD v38[2];
  uint64_t v39;
  _BYTE v40[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v39, a1);
  if (!v39)
  {
    std::string::basic_string[abi:ne180100]<0>(a5, "");
    goto LABEL_38;
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v36 = *(std::string *)a2;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    v37 = v36;
  }
  v35 = 0;
  v10 = mdb_cursor_open(v39, *((_DWORD *)a1 + 2), &v35);
  if (v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = mdb_strerror(v10);
      MTLArchiveUsageDB::prune((uint64_t)v11, (uint64_t)v40, v12);
    }
  }
  else
  {
    v13 = v35;
    v14 = (_QWORD *)operator new();
    v15 = v14;
    size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v37.__r_.__value_.__l.__size_;
    v17 = &v37;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = (std::string *)v37.__r_.__value_.__r.__words[0];
    *v14 = size;
    v14[1] = v17;
    v18 = mdb_cursor_get(v13, v14, v38, 16);
    MEMORY[0x186DABFBC](v15, 0x1080C4057E67DB5);
    if (v18 != -30798)
    {
      v19 = v35;
      v20 = (_QWORD *)operator new();
      v21 = v20;
      v22 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = v37.__r_.__value_.__l.__size_;
      v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      *v20 = v22;
      v20[1] = v23;
      v24 = mdb_cursor_get(v19, v20, v38, 1);
      MEMORY[0x186DABFBC](v21, 0x1080C4057E67DB5);
      if (v24 != -30798)
      {
        while (1)
        {
          v25 = operator new();
          v26 = v25;
          v28 = v38[0];
          v27 = (const void *)v38[1];
          *(_DWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v25 + 16) = 0;
          *(_DWORD *)(v25 + 24) = 0;
          *(_DWORD *)(v25 + 32) = 0;
          *(_QWORD *)(v25 + 40) = 0;
          *(_DWORD *)(v25 + 48) = 0;
          *(_QWORD *)(v25 + 1080) = 0;
          *(_BYTE *)(v25 + 1088) = 0;
          if (v28 - 1081 >= 0xFFFFFFFFFFFFFBFFLL)
          {
            memcpy((void *)v25, v27, v28);
            *(_QWORD *)(v26 + 1080) = v28 - 56;
            *(_BYTE *)(v26 + 1088) = 1;
          }
          if (*(_DWORD *)v26 == a3 && *(_DWORD *)(v26 + 4) == a4)
            break;
          v29 = v35;
          v30 = (_QWORD *)operator new();
          v31 = v30;
          v32 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
          if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v33 = &v37;
          }
          else
          {
            v32 = v37.__r_.__value_.__l.__size_;
            v33 = (std::string *)v37.__r_.__value_.__r.__words[0];
          }
          *v30 = v32;
          v30[1] = v33;
          v34 = mdb_cursor_get(v29, v30, v38, 9);
          MEMORY[0x186DABFBC](v31, 0x1080C4057E67DB5);
          MEMORY[0x186DABFBC](v26, 0x1000C4006F0AA6CLL);
          if (v34 == -30798)
            goto LABEL_35;
        }
        if (ArchivePayload::matchesCurrent(v26, a2))
        {
          std::string::basic_string[abi:ne180100](a5, (void *)(v26 + 56), *(_QWORD *)(v26 + 1080));
          MEMORY[0x186DABFBC](v26, 0x1000C4006F0AA6CLL);
          goto LABEL_36;
        }
        MEMORY[0x186DABFBC](v26, 0x1000C4006F0AA6CLL);
      }
    }
  }
LABEL_35:
  std::string::basic_string[abi:ne180100]<0>(a5, "");
LABEL_36:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
LABEL_38:
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v39);
}

void sub_18275DD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  MEMORY[0x186DABFBC](v26, 0x1000C4006F0AA6CLL);
  if (a23 < 0)
    operator delete(__p);
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a26);
  _Unwind_Resume(a1);
}

void MTLArchiveMapDB::store(MTLVersionedDB *a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  size_t *v12;
  size_t *v13;
  std::string::size_type size;
  std::string *v15;
  _QWORD *v16;
  int v17;
  char *v18;
  uint64_t v19;
  std::string __p;
  std::string v21;
  uint64_t v22;
  _BYTE v23[16];
  _BYTE v24[1080];
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  MTLVersionedDB::Transaction::Transaction((MTLVersionedDB::Transaction *)&v22, a1);
  if (v22)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v21 = __p;
    }
    ArchivePayload::ArchivePayload((uint64_t)v24, a2, (uint64_t)a3, a4, a5);
    if (v26)
    {
      MTLArchiveMapDB::remove((uint64_t)a1, v22, a2, a4, a5);
      v10 = v22;
      v11 = *((_DWORD *)a1 + 2);
      v12 = (size_t *)operator new();
      v13 = v12;
      size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v21.__r_.__value_.__l.__size_;
      v15 = &v21;
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
      *v12 = size;
      v12[1] = (size_t)v15;
      v16 = (_QWORD *)operator new();
      *v16 = v25 + 56;
      v16[1] = v24;
      v17 = mdb_put(v10, v11, v13, (uint64_t)v16, 0);
      MEMORY[0x186DABFBC](v16, 0x1080C4057E67DB5);
      MEMORY[0x186DABFBC](v13, 0x1080C4057E67DB5);
      if (v17 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v18 = mdb_strerror(v17);
        MTLArchiveUsageDB::store((uint64_t)v18, (uint64_t)v23, v19);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      MTLArchiveMapDB::store((char *)(a2 + 23), (_QWORD *)a2, a3);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&v22);
}

void sub_18275E040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  MTLVersionedDB::Transaction::~Transaction((MTLVersionedDB::Transaction *)&a22);
  _Unwind_Resume(a1);
}

const __CFString *MTLSamplerMinMagFilterString(MTLSamplerMinMagFilter a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E0FE3E48[(int)a1];
}

const __CFString *MTLSamplerMipFilterString(MTLSamplerMipFilter a1)
{
  if (a1 > MTLSamplerMipFilterLinear)
    return CFSTR("Unknown");
  else
    return off_1E0FE3E60[a1];
}

const __CFString *MTLSamplerAddressModeString(MTLSamplerAddressMode a1)
{
  if (a1 > (MTLSamplerAddressModeClampToZero|MTLSamplerAddressModeRepeat))
    return CFSTR("Unknown");
  else
    return off_1E0FE3E78[a1];
}

const __CFString *MTLSamplerBorderColorString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("Unknown");
  else
    return off_1E0FE3EB0[a1];
}

void *_MTLCreateConstantSamplerDescriptorsFromBitmasks(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  void *i;
  unint64_t v5;
  MTLSamplerDescriptor *v6;

  v3 = a1;
  for (i = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", a1); v3; --v3)
  {
    v5 = *a2++;
    v6 = objc_alloc_init(MTLSamplerDescriptor);
    setDescriptorFromBitmask(v6, v5, 1);
    objc_msgSend(i, "addObject:", v6);

  }
  return i;
}

void setDescriptorFromBitmask(MTLSamplerDescriptor *a1, unint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  -[MTLSamplerDescriptor setMinFilter:](a1, "setMinFilter:", (a2 >> 11) & 3);
  -[MTLSamplerDescriptor setMagFilter:](a1, "setMagFilter:", (a2 >> 9) & 3);
  -[MTLSamplerDescriptor setMipFilter:](a1, "setMipFilter:", (a2 >> 13) & 3);
  if ((a2 & 7) >= 5)
  {
    MTLReportFailure(0, "addressModeFromConstantSamplerLiteral", 851, (uint64_t)CFSTR("Unexpected MTLSamplerAddressMode from constant sampler reflection: %llu"), v6, v7, v8, v9, a2 & 7);
    v10 = 4;
  }
  else
  {
    v10 = qword_182819E58[a2 & 7];
  }
  -[MTLSamplerDescriptor setSAddressMode:](a1, "setSAddressMode:", v10);
  v15 = (a2 >> 3) & 7;
  if (v15 >= 5)
  {
    MTLReportFailure(0, "addressModeFromConstantSamplerLiteral", 851, (uint64_t)CFSTR("Unexpected MTLSamplerAddressMode from constant sampler reflection: %llu"), v11, v12, v13, v14, (a2 >> 3) & 7);
    v16 = 4;
  }
  else
  {
    v16 = qword_182819E58[v15];
  }
  -[MTLSamplerDescriptor setTAddressMode:](a1, "setTAddressMode:", v16);
  v21 = (a2 >> 6) & 7;
  if (v21 >= 5)
  {
    MTLReportFailure(0, "addressModeFromConstantSamplerLiteral", 851, (uint64_t)CFSTR("Unexpected MTLSamplerAddressMode from constant sampler reflection: %llu"), v17, v18, v19, v20, (a2 >> 6) & 7);
    v22 = 4;
  }
  else
  {
    v22 = qword_182819E58[v21];
  }
  -[MTLSamplerDescriptor setRAddressMode:](a1, "setRAddressMode:", v22);
  -[MTLSamplerDescriptor setNormalizedCoordinates:](a1, "setNormalizedCoordinates:", (a2 & 0x8000) == 0);
  -[MTLSamplerDescriptor setMaxAnisotropy:](a1, "setMaxAnisotropy:", ((a2 >> 20) & 0xF) + 1);
  v27 = (a2 >> 16) & 0xF;
  switch(v27)
  {
    case 0:
      goto LABEL_20;
    case 1:
      goto LABEL_19;
    case 2:
      v27 = 3;
      goto LABEL_19;
    case 3:
      v27 = 4;
      goto LABEL_19;
    case 4:
      v27 = 6;
      goto LABEL_19;
    case 5:
      v27 = 2;
      goto LABEL_19;
    case 6:
      v27 = 5;
      goto LABEL_19;
    case 7:
      v27 = 7;
      goto LABEL_19;
    case 8:
      goto LABEL_13;
    default:
      MTLReportFailure(0, "compareFunctionFromConstantSamplerLiteral", 833, (uint64_t)CFSTR("Unexpected MTLCompareFunction from constant sampler reflection: %llu"), v23, v24, v25, v26, (a2 >> 16) & 0xF);
LABEL_13:
      v27 = 0;
LABEL_19:
      -[MTLSamplerDescriptor setCompareFunction:](a1, "setCompareFunction:", v27);
LABEL_20:
      -[MTLSamplerDescriptor setBorderColor:](a1, "setBorderColor:", HIBYTE(a2) & 3);
      -[MTLSamplerDescriptor setForceResourceIndex:](a1, "setForceResourceIndex:", 0);
      -[MTLSamplerDescriptor setResourceIndex:](a1, "setResourceIndex:", 0);
      _H0 = a2 >> 24;
      __asm { FCVT            S0, H0 }
      -[MTLSamplerDescriptor setLodMinClamp:](a1, "setLodMinClamp:", _D0);
      _H0 = HIDWORD(a2) >> 8;
      __asm { FCVT            S0, H0 }
      -[MTLSamplerDescriptor setLodMaxClamp:](a1, "setLodMaxClamp:", _D0);
      if ((a2 & 0x8000000000000000) != 0 || !a3)
      {
        if ((a2 & 0x7C00000000000000) != 0)
          MTLReportFailure(0, "setDescriptorFromBitmask", 943, (uint64_t)CFSTR("Constant sampler has unrecognized bits: 0x%llx"), v36, v37, v38, v39, a2);
      }
      else
      {
        MTLReportFailure(0, "setDescriptorFromBitmask", 939, (uint64_t)CFSTR("Constant sampler does not have the most significant bit set: 0x%llX"), v36, v37, v38, v39, a2);
      }
      return;
  }
}

void setDescriptorFromBitmask(MTLSamplerDescriptor *a1, unint64_t *a2, uint64_t a3)
{
  if (a3 == 2)
  {
    setDescriptorFromBitmask(a1, *a2, 0);
    _H0 = *((_WORD *)a2 + 4);
    __asm { FCVT            S0, H0 }
    -[MTLSamplerDescriptor setLodBias:](a1, "setLodBias:", _D0);
  }
  else if (a3 == 1)
  {
    setDescriptorFromBitmask(a1, *a2, 1);
  }
}

void *_MTLCreateConstantSamplerDescriptorsFromBitmasksStrided(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  MTLSamplerDescriptor *v10;

  v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", a1);
  v7 = a2 >> 3;
  v8 = v7 * a1;
  if (v7 * a1)
  {
    v9 = 0;
    do
    {
      v10 = objc_alloc_init(MTLSamplerDescriptor);
      setDescriptorFromBitmask(v10, a3, v7);
      objc_msgSend(v6, "addObject:", v10);

      v9 += v7;
      a3 += v7;
    }
    while (v9 < v8);
  }
  return v6;
}

uint64_t *LoaderGlobalState::deallocFile(LoaderGlobalState *this, MTLLoadedFile *a2)
{
  _QWORD *v3;
  uint64_t *result;

  v3 = (_QWORD *)((char *)this + 16);
  result = std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::find<FileIdentifier>((_QWORD *)this + 2, &a2->_identity.dev);
  if (result)
  {
    if ((MTLLoadedFile *)result[4] == a2)
      return (uint64_t *)std::__hash_table<std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::__unordered_map_hasher<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::hash<MTLLoadedFile *>,std::equal_to<MTLLoadedFile *>,true>,std::__unordered_map_equal<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::equal_to<MTLLoadedFile *>,std::hash<MTLLoadedFile *>,true>,std::allocator<std::__hash_value_type<MTLLoadedFile *,objc_object *>>>::erase(v3, result);
  }
  return result;
}

uint64_t LoaderContext::load(LoaderContext *this, _MTLFunction *a2, uint64_t a3, id *a4)
{
  MTLLibraryData *v8;
  __CFString *v9;
  _QWORD *v11;

  v8 = -[_MTLFunction libraryData](a2, "libraryData");
  v9 = (__CFString *)(*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)v8 + 304))(v8);
  if (!v9)
    v9 = (__CFString *)-[_MTLFunction inheritedLibraryPath](a2, "inheritedLibraryPath");
  if (LoaderContext::getImage(this, &v9->isa))
    return 1;
  v11 = LoaderContext::addImage(this, v8, &v9->isa);
  if (!v11)
    return 1;
  *((_QWORD *)this + 2) = -[__CFString stringByDeletingLastPathComponent](v9, "stringByDeletingLastPathComponent");
  return LoaderContext::loadRecursive((uint64_t)this, (uint64_t)v11, 0, v9, a3, a4);
}

uint64_t LoaderGlobalState::loadFile(LoaderGlobalState *this, NSURL *a2, NSError **a3, NSString *a4, uint64_t a5)
{
  stat *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  MTLLoadedFile *v14;
  void *v15;
  NSString *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  __darwin_ino64_t st_ino;
  uint64_t v21;
  uint64_t block;
  uint64_t v24;
  _QWORD *(*v25)(_QWORD *);
  void *v26;
  uint64_t *v27;
  uint64_t *v28;
  LoaderGlobalState *v29;
  stat *v30;
  stat v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t);
  uint64_t v41;
  char v42[1024];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = &v36;
  v38 = 0x3052000000;
  v39 = __Block_byref_object_copy__8;
  v40 = __Block_byref_object_dispose__8;
  v41 = 0;
  v32 = 0;
  v33 = &v32;
  v34 = 0x2020000000;
  v35 = 0;
  if (-[NSURL getFileSystemRepresentation:maxLength:](a2, "getFileSystemRepresentation:maxLength:", v42, 1024)
    && *((_QWORD *)this + 1)
    && !stat(v42, &v31))
  {
    if ((v31.st_mode & 0xF000) == 0x8000)
      v10 = &v31;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  block = MEMORY[0x1E0C809B0];
  v24 = 3221225472;
  v25 = ___ZN17LoaderGlobalState8loadFileEP5NSURLPP7NSErrorP8NSStringl_block_invoke;
  v26 = &unk_1E0FE4138;
  v29 = this;
  v30 = v10;
  v27 = &v36;
  v28 = &v32;
  if (v10)
    dispatch_sync(*((dispatch_queue_t *)this + 1), &block);
  v11 = v37[5];
  if (!v11)
  {
    v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfURL:options:error:", a2, 1, a3);
    v13 = v12;
    if (v12)
    {
      if (objc_msgSend(v12, "length"))
      {
        v14 = -[MTLLoadedFile initWithData:parent:]([MTLLoadedFile alloc], "initWithData:parent:", v13, this);
        v37[5] = (uint64_t)v14;
      }
      else
      {
        if (a3)
        {
          v15 = (void *)MEMORY[0x1E0CB3940];
          v16 = -[NSURL path](a2, "path");
          v17 = objc_msgSend(v15, "stringWithFormat:", CFSTR("File at url %@ is empty."), v16, block, v24, v25, v26, v27, v28, v29, v30);
          v18 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v17, *MEMORY[0x1E0CB2D50]);
          *a3 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", a4, a5, v18);
        }

      }
    }
    v19 = v37;
    v11 = v37[5];
    if (v10 && v11)
    {
      *((_BYTE *)v33 + 24) = 1;
      st_ino = v10->st_ino;
      v21 = v19[5];
      *(_DWORD *)(v21 + 32) = v10->st_dev;
      *(_QWORD *)(v21 + 40) = st_ino;
      *(_QWORD *)(v19[5] + 24) = v10->st_mtimespec.tv_sec;
      *(_BYTE *)(v19[5] + 48) = 1;
      dispatch_sync(*((dispatch_queue_t *)this + 1), &block);
      v11 = v37[5];
    }
  }
  _Block_object_dispose(&v32, 8);
  _Block_object_dispose(&v36, 8);
  return v11;
}

void sub_18275F73C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void LoaderGlobalState::releaseFile(LoaderGlobalState *this, MTLLoadedFile *a2)
{
  NSObject *v2;
  _QWORD block[5];

  if (a2->_isCached)
  {
    v2 = *((_QWORD *)this + 1);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZN17LoaderGlobalState11releaseFileEP13MTLLoadedFile_block_invoke;
    block[3] = &unk_1E0FE2880;
    block[4] = a2;
    dispatch_sync(v2, block);
  }
  else
  {

  }
}

uint64_t mapAirVersionToMachOSubType(int a1)
{
  uint64_t result;

  if (a1 < 0x20000)
  {
    switch(a1)
    {
      case 65542:
        return 1;
      case 65544:
        return 2;
      case 65547:
        return 3;
      default:
        return 0;
    }
  }
  else
  {
    switch(a1)
    {
      case 131072:
        result = 4;
        break;
      case 131073:
        result = 5;
        break;
      case 131074:
        result = 6;
        break;
      case 131075:
        result = 7;
        break;
      case 131076:
        result = 8;
        break;
      case 131077:
        result = 9;
        break;
      case 131078:
        result = 10;
        break;
      case 131079:
        result = 11;
        break;
      default:
        return 0;
    }
  }
  return result;
}

_DWORD *validateMachHeader(_DWORD *result, int a2)
{
  int v2;
  BOOL v3;
  BOOL v4;

  if (result)
  {
    if (*result == -17958193
      && ((v2 = result[1], (v2 - 16777235) <= 4) ? (v3 = v2 == 16777238) : (v3 = 1),
          v3 ? (v4 = v2 == -1) : (v4 = 1),
          v4 && result[3] == a2))
    {
      return (_DWORD *)(result[7] == 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_18275FF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  v24 = a22;
  a22 = 0;
  if (v24)
    MEMORY[0x186DABFA4](v24, 0x1000C800CE834B2);
  _Block_object_dispose((const void *)(v22 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__50(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (result)
    JUMPOUT(0x186DABFA4);
  return result;
}

void sub_1827601B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_182760904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a69;
  uint64_t v70;

  _Block_object_dispose(&a50, 8);
  v70 = a56;
  a56 = 0;
  if (v70)
    MEMORY[0x186DABFA4](v70, 0x1000C800CE834B2);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x350], 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Block_object_dispose(&STACK[0x2A0], 8);
  _Block_object_dispose(&STACK[0x2E8], 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__52(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

__n128 __Block_byref_object_copy__56(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  result = *(__n128 *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v5;
  return result;
}

void sub_182761B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a68;
  uint64_t v68;
  unint64_t v70;

  if (__p)
    operator delete(__p);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a68, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a13);
  _Block_object_dispose(&STACK[0x230], 8);
  v70 = STACK[0x260];
  STACK[0x260] = 0;
  if (v70)
    MEMORY[0x186DABFA4](v70, 0x1000C800CE834B2);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x288], 8);
  _Block_object_dispose(&STACK[0x2A8], 8);
  _Block_object_dispose(&STACK[0x2F0], 8);
  _Block_object_dispose((const void *)(v68 - 248), 8);
  _Block_object_dispose((const void *)(v68 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__71(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<objc_object  {objcproto24MTLFunctionStitchingNode}*,unsigned int>,std::__unordered_map_hasher<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::hash<objc_object  {objcproto24MTLFunctionStitchingNode}>,std::equal_to<objc_object  {objcproto24MTLFunctionStitchingNode}>,true>,std::__unordered_map_equal<objc_object  {objcproto24MTLFunctionStitchingNode},objc_object  {objcproto24MTLFunctionStitchingNode}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto24MTLFunctionStitchingNode}*>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__72(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(a1 + 48);
}

void std::vector<nlist_64>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1827630C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t a72;
  void *v73;
  void *v74;

  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a72 = (uint64_t)__p;
    operator delete(__p);
  }
  v73 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v73;
    operator delete(v73);
  }
  v74 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v74;
    operator delete(v74);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__82(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 48) = v2;
  result = *(__n128 *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

void sub_1827638EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  _Unwind_Resume(a1);
}

void ___ZN17LoaderGlobalState11releaseFileEP13MTLLoadedFile_block_invoke(uint64_t a1)
{

}

_QWORD *LoaderContext::addImage(_QWORD *a1, void *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  _QWORD v20[5];

  v6 = (_QWORD *)operator new();
  v7 = a1[3];
  a1[3] = v7 + 1;
  v8 = objc_msgSend(a2, "importedLibraries");
  *v6 = v7;
  v6[1] = a3;
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = v8;
  v9 = a1[8];
  v10 = (_QWORD *)a1[7];
  if ((unint64_t)v10 >= v9)
  {
    v12 = a1[6];
    v13 = ((uint64_t)v10 - v12) >> 3;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v14 = v9 - v12;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v20[4] = a1 + 8;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)(a1 + 8), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v13];
    v20[0] = v17;
    v20[1] = v18;
    v20[3] = &v17[8 * v16];
    *(_QWORD *)v18 = v6;
    v20[2] = v18 + 8;
    std::vector<std::unique_ptr<LoaderContext::Image>>::__swap_out_circular_buffer(a1 + 6, v20);
    v11 = (_QWORD *)a1[7];
    std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer((uint64_t)v20);
  }
  else
  {
    *v10 = v6;
    v11 = v10 + 1;
  }
  a1[7] = v11;
  v6[4] = a2;
  return v6;
}

void sub_182763E48(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer((uint64_t)va);
  __clang_call_terminate(a1);
}

uint64_t std::vector<std::unique_ptr<LoaderContext::Image>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<LoaderContext::Image>>,std::reverse_iterator<std::unique_ptr<LoaderContext::Image>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v1, v3);
    ++v1;
  }
}

void std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    JUMPOUT(0x186DABFBCLL);
  }
}

uint64_t std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<LoaderContext::Image>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](i - 8, v5);
  }
}

uint64_t LoaderContext::loadRecursive(uint64_t a1, uint64_t a2, unint64_t a3, __CFString *a4, uint64_t a5, id *a6)
{
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  const char *v15;
  const char *v16;
  int v17;
  NSString *v18;
  void *v19;
  uint64_t v20;
  uint64_t Image;
  void *v22;
  NSString *v23;
  unint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t result;
  const char *v28;
  const __CFString *v29;
  const __CFString *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 32) < a3)
    *(_QWORD *)(a1 + 32) = a3;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v9 = *(void **)(a2 + 16);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
  if (!v10)
    return 1;
  v11 = a3 + 1;
  v12 = *(_QWORD *)v41;
  while (2)
  {
    for (i = 0; i != v10; ++i)
    {
      if (*(_QWORD *)v41 != v12)
        objc_enumerationMutation(v9);
      v14 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
      if (*(_QWORD *)(a2 + 32)
        || (objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * i), "isEqualToString:", CFSTR("/System/Library/Frameworks/CoreImage.framework/CoreImage.metallib")) & 1) == 0)
      {
        v15 = (const char *)objc_msgSend(v14, "UTF8String");
        v16 = v15;
        v17 = *v15;
        v18 = (NSString *)v14;
        if (v17 != 47)
        {
          if (v17 != 64)
          {
            v28 = ": relative paths cannot be used to load Metal libraries";
            goto LABEL_37;
          }
          if (!strncmp(v15, "@executable_path/", 0x11uLL))
          {
            v19 = *(void **)(a1 + 16);
            if (!v19)
            {
              v28 = ": @executable_path cannot be used in a library that has not been loaded from file URL";
LABEL_37:
              if (a6)
              {
                v29 = CFSTR("<no URL>");
                v30 = a4;
                if (!a4)
                  v30 = CFSTR("<no URL>");
                if (*(_QWORD *)(a1 + 16))
                  v29 = *(const __CFString **)(a1 + 16);
                v31 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to resolve install name ”%@” (embedded in ”%@”, loading from executable directory ”%@”)%s"), v14, v30, v29, v28);
                v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v31, *MEMORY[0x1E0CB2D50]);
                v33 = objc_alloc(MEMORY[0x1E0CB35C8]);
                v34 = 3;
                goto LABEL_43;
              }
              return 0;
            }
            v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16 + 16);
          }
          else
          {
            if (strncmp(v16, "@loader_path/", 0xDuLL))
              goto LABEL_33;
            v19 = (void *)-[__CFString stringByDeletingLastPathComponent](a4, "stringByDeletingLastPathComponent");
            if (!v19)
            {
              v28 = ": @loader_path cannot be used in a library that has not been loaded from file URL";
              goto LABEL_37;
            }
            v20 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16 + 12);
          }
          v18 = (NSString *)objc_msgSend(v19, "stringByAppendingString:", v20);
        }
        if (!v18)
        {
LABEL_33:
          v28 = "";
          goto LABEL_37;
        }
        Image = LoaderContext::getImage((LoaderContext *)a1, v18);
        if (Image
          || (v22 = (void *)+[MTLLoader canonicalURL:]((uint64_t)MTLLoader, (uint64_t)v18),
              v23 = (NSString *)objc_msgSend(v22, "path"),
              (Image = LoaderContext::getImage((LoaderContext *)a1, v23)) != 0))
        {
          v24 = *(_QWORD *)(Image + 24);
          if (v24 >= v11)
            v24 = v11;
          *(_QWORD *)(Image + 24) = v24;
        }
        else
        {
          v25 = (void *)objc_msgSend(*(id *)(a1 + 8), "newDynamicLibraryWithURL:options:error:", v22, a5, a6);
          if (!v25)
          {
            if (a6)
            {
              v36 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Unable to load ”%@”, which was resolved from install name ”%@” (embedded in ”%@”, loading from executable directory ”%@”): %@"), v23, v14, a4, *(_QWORD *)(a1 + 16), objc_msgSend(*a6, "localizedDescription"));
              v32 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v36, *MEMORY[0x1E0CB2D50]);
              v33 = objc_alloc(MEMORY[0x1E0CB35C8]);
              v34 = 4;
LABEL_43:
              v35 = (id)objc_msgSend(v33, "initWithDomain:code:userInfo:", CFSTR("MTLDynamicLibraryDomain"), v34, v32);
              result = 0;
              *a6 = v35;
              return result;
            }
            return 0;
          }
          v26 = LoaderContext::addImage((_QWORD *)a1, v25, (uint64_t)v23);
          v26[3] = v11;
          if ((LoaderContext::loadRecursive(a1, v26, v11, v23, a5, a6) & 1) == 0)
            return 0;
        }
      }
    }
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    result = 1;
    if (v10)
      continue;
    return result;
  }
}

void sub_18276447C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  char v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t i;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[11];

  if (a1 == a2)
    return;
  v21[9] = v2;
  v21[10] = v3;
  v6 = a1 + 1;
  if (a1 + 1 == a2)
    return;
  v7 = 0;
  v8 = a1;
  do
  {
    v9 = v8;
    v8 = v6;
    v10 = (_QWORD *)v9[1];
    v11 = v10[3];
    v12 = *(_QWORD *)(*v9 + 24);
    if (v11 >= v12 && (v12 < v11 || *v10 >= *(_QWORD *)*v9))
      goto LABEL_21;
    v13 = 0;
    *v8 = 0;
    v21[0] = v10;
    v14 = (_QWORD *)*v9;
    for (i = v7; ; i -= 8)
    {
      *(uint64_t *)((char *)a1 + i + 8) = (uint64_t)v14;
      *(uint64_t *)((char *)a1 + i) = 0;
      if (v13)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1 + i + 8, v13);
      v16 = v21[0];
      if (!i)
      {
        v9 = a1;
        goto LABEL_18;
      }
      v14 = *(_QWORD **)((char *)a1 + i - 8);
      v17 = *(_QWORD *)(v21[0] + 24);
      v18 = v14[3];
      if (v17 >= v18)
        break;
LABEL_12:
      --v9;
      v13 = *(uint64_t *)((char *)a1 + i);
    }
    if (v18 >= v17)
    {
      if (*(_QWORD *)v21[0] >= *v14)
        goto LABEL_18;
      goto LABEL_12;
    }
    v9 = (uint64_t *)((char *)a1 + i);
LABEL_18:
    v21[0] = 0;
    v19 = *v9;
    *v9 = v16;
    if (v19)
    {
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v9, v19);
      v20 = v21[0];
      v21[0] = 0;
      if (v20)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v21, v20);
    }
LABEL_21:
    v6 = v8 + 1;
    v7 += 8;
  }
  while (v8 + 1 != a2);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[7];

  if (a1 != a2)
  {
    v17[5] = v2;
    v17[6] = v3;
    v5 = a1;
    while (v5 + 1 != a2)
    {
      v6 = v5++;
      v7 = (_QWORD *)v6[1];
      v8 = v7[3];
      v9 = *(_QWORD *)(*v6 + 24);
      if (v8 < v9 || v9 >= v8 && *v7 < *(_QWORD *)*v6)
      {
        v10 = 0;
        *v5 = 0;
        v17[0] = v7;
        v11 = (_QWORD *)*v6;
        while (1)
        {
          v6[1] = (uint64_t)v11;
          *v6 = 0;
          if (v10)
            std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)(v6 + 1), v10);
          v11 = (_QWORD *)*(v6 - 1);
          v12 = v17[0];
          v13 = *(_QWORD *)(v17[0] + 24);
          v14 = v11[3];
          if (v13 >= v14 && (v14 < v13 || *(_QWORD *)v17[0] >= *v11))
            break;
          v10 = *v6--;
        }
        v17[0] = 0;
        v15 = *v6;
        *v6 = v12;
        if (v15)
        {
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v6, v15);
          v16 = v17[0];
          v17[0] = 0;
          if (v16)
            std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v17, v16);
        }
      }
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v5 < v6 || v6 >= v5 && *v3 < *v4)
  {
    v7 = *(_QWORD **)a3;
    v8 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    if (v8 < v5 || v5 >= v8 && *v7 < *v3)
    {
      *(_QWORD *)a1 = v7;
      *(_QWORD *)a3 = v4;
    }
    else
    {
      *(_QWORD *)a1 = v3;
      *(_QWORD *)a2 = v4;
      v16 = *(_QWORD **)a3;
      v17 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      if (v17 < v6 || v6 >= v17 && *v16 < *v4)
      {
        *(_QWORD *)a2 = v16;
        *(_QWORD *)a3 = v4;
        return 2;
      }
    }
    return 1;
  }
  v10 = *(_QWORD **)a3;
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  if (v11 < v5 || v5 >= v11 && *v10 < *v3)
  {
    *(_QWORD *)a2 = v10;
    *(_QWORD *)a3 = v3;
    v12 = *(_QWORD **)a2;
    v13 = *(_QWORD **)a1;
    v14 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v15 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v14 < v15 || v15 >= v14 && *v12 < *v13)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)a2 = v13;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *i;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  _QWORD *v26;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  v26 = v2;
  v3 = (_QWORD *)*(a2 - 1);
  v4 = v2[3];
  v5 = v3[3];
  if (v4 >= v5 && (v5 < v4 || *v2 >= *v3))
  {
    for (i = a1 + 1; i < a2; ++i)
    {
      v25 = *(_QWORD *)(*i + 24);
      if (v4 < v25 || v25 >= v4 && *v2 < *(_QWORD *)*i)
        break;
    }
  }
  else
  {
    i = a1;
    do
    {
      v8 = (_QWORD *)i[1];
      ++i;
      v7 = v8;
      v9 = v8[3];
    }
    while (v4 >= v9 && (v9 < v4 || *v2 >= *v7));
  }
  if (i < a2)
  {
    --a2;
    while (v4 < v5 || v5 >= v4 && *v2 < *v3)
    {
      v10 = (_QWORD *)*--a2;
      v3 = v10;
      v5 = v10[3];
    }
  }
  if (i < a2)
  {
    v11 = (_QWORD *)*i;
    v12 = (_QWORD *)*a2;
    do
    {
      *i = (uint64_t)v12;
      *a2 = (uint64_t)v11;
      v13 = v26[3];
      do
      {
        v14 = (_QWORD *)i[1];
        ++i;
        v11 = v14;
        v15 = v14[3];
      }
      while (v13 >= v15 && (v15 < v13 || *v26 >= *v11));
      do
      {
        do
        {
          v16 = (_QWORD *)*--a2;
          v12 = v16;
          v17 = v16[3];
        }
        while (v13 < v17);
      }
      while (v17 >= v13 && *v26 < *v12);
    }
    while (i < a2);
  }
  v18 = i - 1;
  if (i - 1 != a1)
  {
    v19 = *v18;
    *v18 = 0;
    v20 = *a1;
    *a1 = v19;
    if (v20)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1, v20);
  }
  v21 = v26;
  v26 = 0;
  v22 = *v18;
  *v18 = (uint64_t)v21;
  if (v22)
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)(i - 1), v22);
  v23 = (uint64_t)v26;
  v26 = 0;
  if (v23)
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v26, v23);
  return i;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::unique_ptr<LoaderContext::Image> *,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &>(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;

  v3 = 0;
  v4 = (_QWORD *)*a1;
  *a1 = 0;
  v30 = v4;
  v5 = v4[3];
  while (1)
  {
    v6 = (_QWORD *)a1[v3 + 1];
    v7 = v6[3];
    if (v7 >= v5 && (v5 < v7 || *v6 >= *v4))
      break;
    ++v3;
  }
  v8 = &a1[v3];
  v9 = (unint64_t)&a1[v3 + 1];
  if (v3 * 8)
  {
    do
    {
      v11 = *--a2;
      v10 = v11;
      v12 = v11[3];
    }
    while (v12 >= v5 && (v5 < v12 || *v10 >= *v4));
  }
  else
  {
LABEL_19:
    if (v9 < (unint64_t)a2)
    {
      do
      {
        v14 = *--a2;
        v13 = v14;
        v15 = v14[3];
        if (v15 < v5)
          break;
        if (v5 < v15)
          goto LABEL_19;
      }
      while (*v13 >= *v4 && v9 < (unint64_t)a2);
    }
  }
  if (v9 < (unint64_t)a2)
  {
    v17 = *a2;
    v18 = v9;
    v19 = a2;
    do
    {
      *(_QWORD *)v18 = v17;
      v18 += 8;
      *v19 = v6;
      v20 = v30[3];
      while (1)
      {
        v6 = *(_QWORD **)v18;
        v21 = *(_QWORD *)(*(_QWORD *)v18 + 24);
        if (v21 >= v20 && (v20 < v21 || *v6 >= *v30))
          break;
        v18 += 8;
      }
      do
      {
        v22 = (_QWORD *)*--v19;
        v17 = v22;
        v23 = v22[3];
      }
      while (v23 >= v20 && (v20 < v23 || *v17 >= *v30));
    }
    while (v18 < (unint64_t)v19);
    v8 = (uint64_t *)(v18 - 8);
  }
  if (v8 != a1)
  {
    v24 = *v8;
    *v8 = 0;
    v25 = *a1;
    *a1 = v24;
    if (v25)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1, v25);
  }
  v26 = v30;
  v30 = 0;
  v27 = *v8;
  *v8 = (uint64_t)v26;
  if (v27)
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v27);
  v28 = (uint64_t)v30;
  v30 = 0;
  if (v28)
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v30, v28);
  return v8;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t i;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 8);
      v7 = *(_QWORD **)a1;
      v8 = v6[3];
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      if (v8 < v9 || v9 >= v8 && *v6 < *v7)
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      v10 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a1 + 8, a1 + 16);
      v11 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = *(_QWORD **)v11;
    v15 = *(_QWORD *)(*(_QWORD *)v11 + 24);
    v16 = *(_QWORD *)(*(_QWORD *)v10 + 24);
    if (v15 >= v16 && (v16 < v15 || *v14 >= **(_QWORD **)v10))
      goto LABEL_26;
    v17 = 0;
    *(_QWORD *)v11 = 0;
    v25 = v14;
    v18 = *(_QWORD **)v10;
    for (i = v12; ; i -= 8)
    {
      *(_QWORD *)(a1 + i + 24) = v18;
      *(_QWORD *)(a1 + i + 16) = 0;
      if (v17)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](a1 + i + 24, v17);
      v20 = v25;
      if (i == -16)
      {
        v10 = a1;
        goto LABEL_21;
      }
      v18 = *(_QWORD **)(a1 + i + 8);
      v21 = v25[3];
      v22 = v18[3];
      if (v21 >= v22)
        break;
LABEL_18:
      v10 -= 8;
      v17 = *(_QWORD *)(a1 + i + 16);
    }
    if (v22 >= v21)
    {
      if (*v25 >= *v18)
        goto LABEL_21;
      goto LABEL_18;
    }
    v10 = a1 + i + 16;
LABEL_21:
    v25 = 0;
    v23 = *(_QWORD *)v10;
    *(_QWORD *)v10 = v20;
    if (v23)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](v10, v23);
    v24 = (uint64_t)v25;
    v25 = 0;
    if (v24)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v25, v24);
    if (++v13 == 8)
      return v11 + 8 == a2;
LABEL_26:
    v10 = v11;
    v12 += 8;
    v11 += 8;
  }
  while (v11 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a2, a3);
  v9 = *(_QWORD **)a4;
  v10 = *(_QWORD **)a3;
  v11 = *(_QWORD *)(*(_QWORD *)a4 + 24);
  v12 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  if (v11 < v12 || v12 >= v11 && *v9 < *v10)
  {
    *(_QWORD *)a3 = v9;
    *(_QWORD *)a4 = v10;
    v13 = *(_QWORD **)a3;
    v14 = *(_QWORD **)a2;
    v15 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    v16 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    if (v15 < v16 || v16 >= v15 && *v13 < *v14)
    {
      *(_QWORD *)a2 = v13;
      *(_QWORD *)a3 = v14;
      v17 = *(_QWORD **)a2;
      v18 = *(_QWORD **)a1;
      v19 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      v20 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      if (v19 < v20 || v20 >= v19 && *v17 < *v18)
      {
        *(_QWORD *)a1 = v17;
        *(_QWORD *)a2 = v18;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a2, a3, a4);
  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD **)a4;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 24);
  v14 = *(_QWORD *)(*(_QWORD *)a4 + 24);
  if (v13 < v14 || v14 >= v13 && *v11 < *v12)
  {
    *(_QWORD *)a4 = v11;
    *(_QWORD *)a5 = v12;
    v15 = *(_QWORD **)a4;
    v16 = *(_QWORD **)a3;
    v17 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v18 = *(_QWORD *)(*(_QWORD *)a3 + 24);
    if (v17 < v18 || v18 >= v17 && *v15 < *v16)
    {
      *(_QWORD *)a3 = v15;
      *(_QWORD *)a4 = v16;
      v19 = *(_QWORD **)a3;
      v20 = *(_QWORD **)a2;
      v21 = *(_QWORD *)(*(_QWORD *)a3 + 24);
      v22 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      if (v21 < v22 || v22 >= v21 && *v19 < *v20)
      {
        *(_QWORD *)a2 = v19;
        *(_QWORD *)a3 = v20;
        v23 = *(_QWORD **)a2;
        v24 = *(_QWORD **)a1;
        v25 = *(_QWORD *)(*(_QWORD *)a2 + 24);
        v26 = *(_QWORD *)(*(_QWORD *)a1 + 24);
        if (v25 < v26 || v26 >= v25 && *v23 < *v24)
        {
          *(_QWORD *)a1 = v23;
          *(_QWORD *)a2 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *(_QWORD **)v14;
        v16 = (_QWORD *)*a1;
        v17 = *(_QWORD *)(*(_QWORD *)v14 + 24);
        v18 = *(_QWORD *)(*a1 + 24);
        if (v17 < v18 || v18 >= v17 && *v15 < *v16)
        {
          *(_QWORD *)v14 = v16;
          *a1 = (uint64_t)v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)a1, a4, v9, (uint64_t)a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v19 = (unint64_t)v8 >> 3;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1},std::unique_ptr<LoaderContext::Image>*>(a1, v6, a4, v19);
        v6 -= 8;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[9];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v34[7] = v4;
    v34[8] = v5;
    v8 = a4 - a1;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (a4 - a1) >> 3)
    {
      v11 = v8 >> 2;
      v12 = (v8 >> 2) + 1;
      v13 = (uint64_t *)(a1 + 8 * v12);
      v14 = v11 + 2;
      if (v14 < a3)
      {
        v15 = (_QWORD *)v13[1];
        v16 = *(_QWORD *)(*v13 + 24);
        v17 = v15[3];
        if (v16 < v17 || v17 >= v16 && *(_QWORD *)*v13 < *v15)
        {
          ++v13;
          v12 = v14;
        }
      }
      v18 = *(_QWORD **)a4;
      v19 = *(_QWORD *)(*v13 + 24);
      v20 = *(_QWORD *)(*(_QWORD *)a4 + 24);
      if (v19 >= v20 && (v20 < v19 || *(_QWORD *)*v13 >= *v18))
      {
        *(_QWORD *)a4 = 0;
        v34[0] = v18;
        v21 = (_QWORD *)*v13;
        while (1)
        {
          v22 = v13;
          *v13 = 0;
          v23 = *(_QWORD *)a4;
          *(_QWORD *)a4 = v21;
          if (v23)
            std::default_delete<LoaderContext::Image>::operator()[abi:ne180100](a4, v23);
          if (v9 < v12)
            break;
          v24 = 2 * v12;
          v12 = (2 * v12) | 1;
          v13 = (uint64_t *)(a1 + 8 * v12);
          v25 = v24 + 2;
          if (v25 < a3)
          {
            v26 = (_QWORD *)v13[1];
            v27 = *(_QWORD *)(*v13 + 24);
            v28 = v26[3];
            if (v27 < v28 || v28 >= v27 && *(_QWORD *)*v13 < *v26)
            {
              ++v13;
              v12 = v25;
            }
          }
          v21 = (_QWORD *)*v13;
          v29 = v34[0];
          v30 = *(_QWORD *)(*v13 + 24);
          v31 = *(_QWORD *)(v34[0] + 24);
          if (v30 >= v31)
          {
            a4 = (uint64_t)v22;
            if (v31 < v30)
              continue;
            a4 = (uint64_t)v22;
            if (*v21 >= *(_QWORD *)v34[0])
              continue;
          }
          goto LABEL_25;
        }
        v29 = v34[0];
LABEL_25:
        v34[0] = 0;
        v32 = *v22;
        *v22 = v29;
        if (v32)
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v22, v32);
        v33 = v34[0];
        v34[0] = 0;
        if (v33)
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v34, v33);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1},std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a4 >= 2)
  {
    v7 = *a1;
    *a1 = 0;
    v19 = v7;
    v8 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(a1, a3, a4);
    v9 = v8;
    v10 = (uint64_t *)(a2 - 8);
    if (v8 == v10)
    {
      v16 = v19;
      v19 = 0;
      v17 = *v8;
      *v8 = v16;
      if (v17)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v17);
    }
    else
    {
      v11 = *v10;
      *v10 = 0;
      v12 = *v8;
      *v8 = v11;
      if (v12)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v12);
      v13 = (uint64_t)(v9 + 1);
      v14 = v19;
      v19 = 0;
      v15 = *v10;
      *v10 = v14;
      if (v15)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v10, v15);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 3);
    }
    v18 = v19;
    v19 = 0;
    if (v18)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&v19, v18);
  }
}

void sub_18276575C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = 0;
  v5 = a3 - 2;
  if (a3 < 2)
    v5 = a3 - 1;
  v6 = v5 >> 1;
  do
  {
    v7 = &a1[v4 + 1];
    v8 = 2 * v4;
    v4 = (2 * v4) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = (_QWORD *)v7[1];
      v11 = *(_QWORD *)(*v7 + 24);
      v12 = v10[3];
      if (v11 < v12 || v12 >= v11 && *(_QWORD *)*v7 < *v10)
      {
        ++v7;
        v4 = v9;
      }
    }
    v13 = *v7;
    *v7 = 0;
    v14 = *a1;
    *a1 = v13;
    if (v14)
      std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)a1, v14);
    a1 = v7;
  }
  while (v4 <= v6);
  return v7;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,LoaderContext::finish(unsigned long,NSError **)::{lambda(std::unique_ptr<LoaderContext::Image> const&,std::unique_ptr<LoaderContext::Image> const&)#1} &,std::unique_ptr<LoaderContext::Image>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    v7 = (uint64_t *)(a1 + 8 * (v4 >> 1));
    v8 = (uint64_t *)(a2 - 8);
    v9 = *(_QWORD **)(a2 - 8);
    v10 = *(_QWORD *)(*v7 + 24);
    v11 = v9[3];
    if (v10 < v11 || v11 >= v10 && *(_QWORD *)*v7 < *v9)
    {
      *v8 = 0;
      v12 = (_QWORD *)*v7;
      while (1)
      {
        v13 = v7;
        *v7 = 0;
        v14 = *v8;
        *v8 = (uint64_t)v12;
        if (v14)
          std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v8, v14);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (uint64_t *)(a1 + 8 * v6);
        v12 = (_QWORD *)*v7;
        v15 = *(_QWORD *)(*v7 + 24);
        v16 = v9[3];
        v8 = v13;
        if (v15 >= v16)
        {
          if (v16 < v15)
            break;
          v8 = v13;
          if (*v12 >= *v9)
            break;
        }
      }
      v17 = *v13;
      *v13 = (uint64_t)v9;
      if (v17)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v13, v17);
    }
  }
}

void std::vector<std::unique_ptr<LoaderContext::Image>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<LoaderContext::Image>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t *)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<LoaderContext::Image>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = *(uint64_t **)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<LoaderContext::Image>::operator()[abi:ne180100]((uint64_t)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;

  v4 = __n;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = value - this->__begin_;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v14 = &v12[v8];
    v15 = &v12[v8 + v4];
    v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = *--end;
        *--v14 = v18;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
      operator delete(end);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::__unordered_map_hasher<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::hash<MTLLoadedFile *>,std::equal_to<MTLLoadedFile *>,true>,std::__unordered_map_equal<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::equal_to<MTLLoadedFile *>,std::hash<MTLLoadedFile *>,true>,std::allocator<std::__hash_value_type<MTLLoadedFile *,objc_object *>>>::__emplace_unique_key_args<MTLLoadedFile *,std::pair<MTLLoadedFile *,objc_object *>>(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_182765D24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::__unordered_map_hasher<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::hash<MTLLoadedFile *>,std::equal_to<MTLLoadedFile *>,true>,std::__unordered_map_equal<MTLLoadedFile *,std::__hash_value_type<MTLLoadedFile *,objc_object *>,std::equal_to<MTLLoadedFile *>,std::hash<MTLLoadedFile *>,true>,std::allocator<std::__hash_value_type<MTLLoadedFile *,objc_object *>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,SectionData>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SectionData>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SectionData>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SectionData>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v13 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v13;
  i[3] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_182765F84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<char>::__insert_with_size[abi:ne180100]<char const*,char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;

  v3 = *a2;
  v4 = *result;
  v5 = bswap64((*a2)[1]);
  v6 = bswap64((*result)[1]);
  if (v5 == v6
    && (v5 = bswap64(v3[2]), v6 = bswap64(v4[2]), v5 == v6)
    && (v5 = bswap64(v3[3]), v6 = bswap64(v4[3]), v5 == v6)
    && (v5 = bswap64(v3[4]), v6 = bswap64(v4[4]), v5 == v6))
  {
    v7 = 0;
  }
  else if (v5 < v6)
  {
    v7 = -1;
  }
  else
  {
    v7 = 1;
  }
  v8 = *a3;
  v9 = bswap64((*a3)[1]);
  v10 = bswap64(v3[1]);
  if (v9 != v10
    || (v9 = bswap64(v8[2]), v10 = bswap64(v3[2]), v9 != v10)
    || (v9 = bswap64(v8[3]), v10 = bswap64(v3[3]), v9 != v10)
    || (v9 = bswap64(v8[4]), v10 = bswap64(v3[4]), v9 != v10))
  {
    if (v9 < v10)
      v11 = -1;
    else
      v11 = 1;
    if (v7 < 0)
      goto LABEL_14;
LABEL_24:
    if (v11 < 0)
    {
      *a2 = v8;
      *a3 = v3;
      v16 = *a2;
      v17 = *result;
      v18 = bswap64((*a2)[1]);
      v19 = bswap64((*result)[1]);
      if (v18 != v19)
        goto LABEL_36;
      v18 = bswap64(v16[2]);
      v19 = bswap64(v17[2]);
      if (v18 == v19
        && (v18 = bswap64(v16[3]), v19 = bswap64(v17[3]), v18 == v19)
        && (v18 = bswap64(v16[4]), v19 = bswap64(v17[4]), v18 == v19))
      {
        v20 = 0;
      }
      else
      {
LABEL_36:
        v20 = v18 < v19 ? -1 : 1;
      }
      if (v20 < 0)
      {
        *result = v16;
        *a2 = v17;
      }
    }
    return result;
  }
  v11 = 0;
  if ((v7 & 0x80000000) == 0)
    goto LABEL_24;
LABEL_14:
  if (v11 < 0)
  {
    *result = v8;
    goto LABEL_42;
  }
  *result = v3;
  *a2 = v4;
  v12 = *a3;
  v13 = bswap64((*a3)[1]);
  v14 = bswap64(v4[1]);
  if (v13 == v14
    && (v13 = bswap64(v12[2]), v14 = bswap64(v4[2]), v13 == v14)
    && (v13 = bswap64(v12[3]), v14 = bswap64(v4[3]), v13 == v14)
    && (v13 = bswap64(v12[4]), v14 = bswap64(v4[4]), v13 == v14))
  {
    v15 = 0;
  }
  else if (v13 < v14)
  {
    v15 = -1;
  }
  else
  {
    v15 = 1;
  }
  if (v15 < 0)
  {
    *a2 = v12;
LABEL_42:
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t **v11;
  unint64_t **v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t **v25;
  unint64_t **v26;
  unint64_t **v27;
  unint64_t **v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  int v46;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = bswap64(v6[1]);
      v9 = bswap64((*a1)[1]);
      if (v8 == v9
        && (v8 = bswap64(v6[2]), v9 = bswap64(v7[2]), v8 == v9)
        && (v8 = bswap64(v6[3]), v9 = bswap64(v7[3]), v8 == v9)
        && (v8 = bswap64(v6[4]), v9 = bswap64(v7[4]), v8 == v9))
      {
        v10 = 0;
      }
      else if (v8 < v9)
      {
        v10 = -1;
      }
      else
      {
        v10 = 1;
      }
      if (v10 < 0)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v26 = a1 + 1;
      v27 = a1 + 2;
      v28 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a1 + 2, a1 + 3);
      v29 = *(a2 - 1);
      v30 = a1[3];
      v31 = bswap64(v29[1]);
      v32 = bswap64(v30[1]);
      if (v31 == v32
        && (v31 = bswap64(v29[2]), v32 = bswap64(v30[2]), v31 == v32)
        && (v31 = bswap64(v29[3]), v32 = bswap64(v30[3]), v31 == v32)
        && (v31 = bswap64(v29[4]), v32 = bswap64(v30[4]), v31 == v32))
      {
        v33 = 0;
      }
      else if (v31 < v32)
      {
        v33 = -1;
      }
      else
      {
        v33 = 1;
      }
      if (v33 < 0)
      {
        *v28 = v29;
        *(a2 - 1) = v30;
        v34 = *v28;
        v35 = *v27;
        v36 = bswap64((*v28)[1]);
        v37 = bswap64((*v27)[1]);
        if (v36 != v37)
          goto LABEL_54;
        v36 = bswap64(v34[2]);
        v37 = bswap64(v35[2]);
        if (v36 == v37
          && (v36 = bswap64(v34[3]), v37 = bswap64(v35[3]), v36 == v37)
          && (v36 = bswap64(v34[4]), v37 = bswap64(v35[4]), v36 == v37))
        {
          v38 = 0;
        }
        else
        {
LABEL_54:
          v38 = v36 < v37 ? -1 : 1;
        }
        if (v38 < 0)
        {
          *v27 = v34;
          *v28 = v35;
          v39 = *v26;
          v40 = bswap64(v34[1]);
          v41 = bswap64((*v26)[1]);
          if (v40 != v41)
            goto LABEL_64;
          v40 = bswap64(v34[2]);
          v41 = bswap64(v39[2]);
          if (v40 == v41
            && (v40 = bswap64(v34[3]), v41 = bswap64(v39[3]), v40 == v41)
            && (v40 = bswap64(v34[4]), v41 = bswap64(v39[4]), v40 == v41))
          {
            v42 = 0;
          }
          else
          {
LABEL_64:
            v42 = v40 < v41 ? -1 : 1;
          }
          if (v42 < 0)
          {
            a1[1] = v34;
            a1[2] = v39;
            v43 = *a1;
            v44 = bswap64(v34[1]);
            v45 = bswap64((*a1)[1]);
            if (v44 != v45)
              goto LABEL_73;
            v44 = bswap64(v34[2]);
            v45 = bswap64(v43[2]);
            if (v44 == v45
              && (v44 = bswap64(v34[3]), v45 = bswap64(v43[3]), v44 == v45)
              && (v44 = bswap64(v34[4]), v45 = bswap64(v43[4]), v44 == v45))
            {
              v46 = 0;
            }
            else
            {
LABEL_73:
              v46 = v44 < v45 ? -1 : 1;
            }
            if (v46 < 0)
            {
              *a1 = v34;
              a1[1] = v43;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a1 + 1, a1 + 2);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 24;
      break;
  }
  do
  {
    v15 = *v12;
    v16 = *v11;
    v17 = bswap64((*v12)[1]);
    v18 = bswap64((*v11)[1]);
    if (v17 != v18
      || (v17 = bswap64(v15[2]), v18 = bswap64(v16[2]), v17 != v18)
      || (v17 = bswap64(v15[3]), v18 = bswap64(v16[3]), v17 != v18)
      || (v17 = bswap64(v15[4]), v18 = bswap64(v16[4]), v17 != v18))
    {
      v19 = v17 < v18 ? -1 : 1;
      if (v19 < 0)
      {
        v20 = v14;
        while (1)
        {
          *(unint64_t **)((char *)a1 + v20) = v16;
          v21 = v20 - 8;
          if (v20 == 8)
            break;
          v16 = *(unint64_t **)((char *)a1 + v20 - 16);
          v22 = bswap64(v15[1]);
          v23 = bswap64(v16[1]);
          if (v22 == v23
            && (v22 = bswap64(v15[2]), v23 = bswap64(v16[2]), v22 == v23)
            && (v22 = bswap64(v15[3]), v23 = bswap64(v16[3]), v22 == v23)
            && (v22 = bswap64(v15[4]), v23 = bswap64(v16[4]), v22 == v23))
          {
            v24 = 0;
          }
          else if (v22 < v23)
          {
            v24 = -1;
          }
          else
          {
            v24 = 1;
          }
          v20 = v21;
          if ((v24 & 0x80000000) == 0)
          {
            v25 = (unint64_t **)((char *)a1 + v21);
            goto LABEL_30;
          }
        }
        v25 = a1;
LABEL_30:
        *v25 = v15;
        if (++v13 == 8)
          return v12 + 1 == a2;
      }
    }
    v11 = v12;
    v14 += 8;
    ++v12;
  }
  while (v12 != a2);
  return 1;
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  unint64_t **result;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,+[MTLLoader serializeMachOContainerWithSlice:payload:count:writer:]::$_2 &,MTLLoaderMachOPayload const**>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = bswap64((*a4)[1]);
  v12 = bswap64((*a3)[1]);
  if (v11 != v12
    || (v11 = bswap64(v9[2]), v12 = bswap64(v10[2]), v11 != v12)
    || (v11 = bswap64(v9[3]), v12 = bswap64(v10[3]), v11 != v12)
    || (v11 = bswap64(v9[4]), v12 = bswap64(v10[4]), v11 != v12))
  {
    v13 = v11 < v12 ? -1 : 1;
    if (v13 < 0)
    {
      *a3 = v9;
      *a4 = v10;
      v14 = *a3;
      v15 = *a2;
      v16 = bswap64((*a3)[1]);
      v17 = bswap64((*a2)[1]);
      if (v16 != v17)
        goto LABEL_14;
      v16 = bswap64(v14[2]);
      v17 = bswap64(v15[2]);
      if (v16 == v17
        && (v16 = bswap64(v14[3]), v17 = bswap64(v15[3]), v16 == v17)
        && (v16 = bswap64(v14[4]), v17 = bswap64(v15[4]), v16 == v17))
      {
        v18 = 0;
      }
      else
      {
LABEL_14:
        v18 = v16 < v17 ? -1 : 1;
      }
      if (v18 < 0)
      {
        *a2 = v14;
        *a3 = v15;
        v19 = *a2;
        v20 = *a1;
        v21 = bswap64((*a2)[1]);
        v22 = bswap64((*a1)[1]);
        if (v21 == v22
          && (v21 = bswap64(v19[2]), v22 = bswap64(v20[2]), v21 == v22)
          && (v21 = bswap64(v19[3]), v22 = bswap64(v20[3]), v21 == v22)
          && (v21 = bswap64(v19[4]), v22 = bswap64(v20[4]), v21 == v22))
        {
          v23 = 0;
        }
        else if (v21 < v22)
        {
          v23 = -1;
        }
        else
        {
          v23 = 1;
        }
        if (v23 < 0)
        {
          *a1 = v19;
          *a2 = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::find<FileIdentifier>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = v4 ^ v3;
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4 ^ v3;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (result = *v8; result; result = (uint64_t *)*result)
  {
    v10 = result[1];
    if (v10 == v5)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3 && result[3] == v4)
        return result;
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v2)
          v10 %= *(_QWORD *)&v2;
      }
      else
      {
        v10 &= *(_QWORD *)&v2 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::__unordered_map_hasher<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,FileIdentifier::Hash,std::equal_to<FileIdentifier>,true>,std::__unordered_map_equal<FileIdentifier,std::__hash_value_type<FileIdentifier,MTLLoadedFile *>,std::equal_to<FileIdentifier>,FileIdentifier::Hash,true>,std::allocator<std::__hash_value_type<FileIdentifier,MTLLoadedFile *>>>::__emplace_unique_key_args<FileIdentifier,std::pair<FileIdentifier,MTLLoadedFile *>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = v7 ^ v6;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7 ^ v6;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && v12[3] == v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x28uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  v12[4] = *(_QWORD *)(a3 + 16);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v12 = *v22;
LABEL_42:
    *v22 = v12;
    goto LABEL_43;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_182767FAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

const __CFString *MTLHeapTypeString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Invalid");
  if (a1 == 1)
    v1 = CFSTR("MTLHeapTypePlacement");
  if (a1)
    return v1;
  else
    return CFSTR("MTLHeapTypeAutomatic");
}

unsigned __int8 *_getFunctionHash(Air::PipelineScript *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  int *v3;
  unsigned __int8 *result;
  int *v5;
  int *v6;
  int *v7;

  v1 = (unsigned __int16 *)((char *)a1 - *(int *)a1);
  if (*v1 < 9u)
    return 0;
  v2 = v1[4];
  if (!v2)
    return 0;
  switch(*((_BYTE *)a1 + v2))
  {
    case 1:
      v3 = (int *)Air::PipelineScript::pipeline_as_render(a1);
      return getVertexHash(v3);
    case 2:
      v5 = (int *)Air::PipelineScript::pipeline_as_compute(a1);
      return getFragmentHash(v5);
    case 3:
      Air::PipelineScript::pipeline_as_tile_render(a1);
      goto LABEL_12;
    case 4:
      v6 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a1);
      return getTileHash(v6);
    case 5:
      Mtl::FunctionConstantValue::value_as_ConstantFloat3(a1);
      goto LABEL_12;
    case 6:
      Mtl::FunctionConstantValue::value_as_ConstantFloat4(a1);
      goto LABEL_12;
    case 7:
      Air::FunctionScript::function_as_object(a1);
LABEL_12:
      result = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
      break;
    case 8:
      v7 = (int *)Air::FunctionScript::function_as_mesh(a1);
      result = getMeshHash(v7);
      break;
    default:
      return 0;
  }
  return result;
}

unsigned __int8 *getTileHash(int *a1)
{
  char v2;
  unsigned __int8 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  _WORD *v17;
  int v18;
  unint64_t v19;
  int *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  _WORD *v23;
  _WORD *v24;
  __int16 v25;
  unsigned __int16 *v26;
  uint64_t v27;
  __int16 v28;

  v2 = 1;
  v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 0xFu)
  {
    v7 = 0;
LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  v5 = v4[7];
  if (!v4[7])
  {
    v7 = 0;
    v10 = 0;
    v2 = 1;
    goto LABEL_15;
  }
  v6 = *(unsigned int *)((char *)a1 + v5);
  v7 = (int *)((char *)a1 + v5 + v6);
  v8 = *v7;
  if (!(_DWORD)v8)
  {
    v2 = 0;
    goto LABEL_14;
  }
  v9 = 0;
  v10 = 0;
  v11 = 4 * v8;
  v12 = (char *)a1 + v5 + v6;
  do
  {
    v13 = *(unsigned int *)&v12[v9 + 4];
    v14 = &v12[v9 + v13 - *(int *)((char *)&v7[v9 / 4 + 1] + v13)];
    if (*((unsigned __int16 *)v14 + 2) >= 5u)
    {
      v15 = *((unsigned __int16 *)v14 + 4);
      if (v15)
      {
        if (*(_WORD *)&v12[v9 + 4 + v13 + v15])
          ++v10;
      }
    }
    v9 += 4;
  }
  while (v11 != v9);
  v2 = 0;
LABEL_15:
  v16 = 2 * v10 + 8;
  v17 = malloc_type_malloc(v16, 0x6E6CC169uLL);
  bzero(v17, v16);
  *v17 = v10;
  if ((v2 & 1) == 0 && *v7)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (_DWORD *)((char *)&v7[v19 + 1] + v7[v19 + 1]);
      v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 5u)
      {
        v22 = v21[2];
        if (v22)
        {
          if (*(_WORD *)((char *)v20 + v22))
          {
            v23 = &v17[v18];
            v25 = v23[1];
            v24 = v23 + 1;
            *v24 = v25 & 0xFFF0 | v19 & 0xF;
            v26 = (unsigned __int16 *)((char *)v20 - *v20);
            if (*v26 >= 5u && (v27 = v26[2]) != 0)
              v28 = *(_WORD *)((char *)v20 + v27);
            else
              v28 = 0;
            *v24 = v19 & 0xF | (16 * v28);
            ++v18;
          }
        }
      }
      ++v19;
    }
    while (v19 < *v7);
  }
  CC_SHA256(v17, v16, v3);
  free(v17);
  return v3;
}

uint64_t Air::FunctionScript::function_as_object(Air::FunctionScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 7) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

unsigned __int8 *getMeshHash(int *a1)
{
  BOOL v2;
  unsigned __int8 *v3;
  unsigned __int16 *v4;
  uint64_t v5;
  BOOL data;

  v2 = 1;
  v3 = (unsigned __int8 *)malloc_type_calloc(0x20uLL, 1uLL, 0x100004077774924uLL);
  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 0xDu)
  {
    v5 = v4[6];
    if (v5)
      v2 = *((_BYTE *)a1 + v5) != 0;
    else
      v2 = 1;
  }
  data = v2;
  CC_SHA256(&data, 1u, v3);
  return v3;
}

uint64_t Air::FunctionScript::function_as_mesh(Air::FunctionScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 8) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t MTLIOQosClassForPriority(uint64_t a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 17;
  else
    v1 = 33;
  if (a1 == 2)
    return 9;
  else
    return v1;
}

unint64_t MTLIODefaultCommandsInFlightForDevice(void *a1)
{
  return (unint64_t)objc_msgSend(a1, "maxIOCommandsInFlight") >> 1;
}

uint64_t MTLIOCommandQueueCommandListInit(uint64_t result, _MTLIOCommandQueue *a2)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = result;
  *(_QWORD *)(result + 24) = &a2->cmdCvar;
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 16) = &a2->cmdMutex;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

uint64_t MTLIOCommandQueueCommandListDestroy(MTLIOCommandQueueCommandList *a1)
{
  pthread_mutex_lock(a1->lock);
  a1->exit = 1;
  pthread_cond_broadcast(a1->cond);
  return pthread_mutex_unlock(a1->lock);
}

uint64_t MTLIOCommandQueueCommandListEnqueueCommand(MTLIOCommandQueueCommandList *a1, MTLIOCommandQueueCommand *a2)
{
  MTLIOCommandQueueCommand **tqh_last;

  pthread_mutex_lock(a1->lock);
  *((_QWORD *)a2 + 2) = 0;
  tqh_last = a1->activeq.tqh_last;
  *((_QWORD *)a2 + 3) = tqh_last;
  *tqh_last = a2;
  a1->activeq.tqh_last = (MTLIOCommandQueueCommand **)((char *)a2 + 16);
  pthread_cond_broadcast(a1->cond);
  return pthread_mutex_unlock(a1->lock);
}

void MTLIOCommandQueueCommandListProcessCommands(MTLIOCommandQueueCommandList *a1)
{
  MTLIOCommandQueueCommand *tqh_first;
  uint64_t v3;
  MTLIOCommandQueueCommand **v4;
  MTLIOCommandQueueCommand *v5;
  MTLIOCommandQueueCommand *v6;
  int v7;
  BOOL v8;
  _DWORD *v9;
  uint64_t v10;
  MTLIOCommandQueueCommand **v11;
  uint64_t v12;
  MTLIOCommandQueueCommand **v13;
  uint64_t v14;
  uint64_t v15;
  MTLIOCommandQueueCommand **v16;
  _DWORD *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *followonQueue;
  _QWORD *v28;
  MTLIOCommandList *v29;
  _opaque_pthread_cond_t *cond;
  _opaque_pthread_mutex_t *lock;
  MTLIOCommand *v32;
  char v33;
  _QWORD v34[11];
  char v35;
  _QWORD v36[8];
  _QWORD block[10];
  char v38;
  char v39;
  __int16 v40;
  __int16 v41;

  pthread_mutex_lock(a1->lock);
  do
  {
    while (1)
    {
LABEL_2:
      if (a1->exit)
      {
        pthread_mutex_unlock(a1->lock);
        pthread_exit(0);
      }
      tqh_first = a1->activeq.tqh_first;
      if (a1->activeq.tqh_first)
        break;
LABEL_12:
      pthread_cond_wait(a1->cond, a1->lock);
    }
    while (1)
    {
      v3 = *((_QWORD *)tqh_first + 2);
      if (*(_DWORD *)tqh_first == 1)
      {
        v4 = (MTLIOCommandQueueCommand **)*((_QWORD *)tqh_first + 3);
        if (v3)
        {
          *(_QWORD *)(v3 + 24) = v4;
          v4 = (MTLIOCommandQueueCommand **)*((_QWORD *)tqh_first + 3);
        }
        else
        {
          a1->activeq.tqh_last = v4;
        }
        *v4 = (MTLIOCommandQueueCommand *)v3;
        free(tqh_first);
        goto LABEL_11;
      }
      if (!*(_DWORD *)tqh_first)
        break;
LABEL_11:
      tqh_first = (MTLIOCommandQueueCommand *)v3;
      if (!v3)
        goto LABEL_12;
    }
    v5 = a1->activeq.tqh_first;
  }
  while (!a1->activeq.tqh_first);
  while (1)
  {
    v6 = (MTLIOCommandQueueCommand *)*((_QWORD *)v5 + 2);
    v7 = *(_DWORD *)v5;
    if (*(_DWORD *)v5)
      goto LABEL_15;
    v41 = 0;
    v40 = 0;
    v39 = 0;
    v9 = MTLIOCommandList::popCommand((MTLIOCommandList *)objc_msgSend(*((id *)v5 + 1), "getCommandList"), (_BYTE *)&v41 + 1, &v41, (_BYTE *)&v40 + 1, &v40, &v39, -[_MTLIOCommandQueue gpuQueue](a1->queue, "gpuQueue"));
    if (v9)
      break;
    if (v39)
    {
      v10 = *((_QWORD *)v5 + 2);
      v11 = (MTLIOCommandQueueCommand **)*((_QWORD *)v5 + 3);
      if (v10)
      {
        *(_QWORD *)(v10 + 24) = v11;
        v11 = (MTLIOCommandQueueCommand **)*((_QWORD *)v5 + 3);
      }
      else
      {
        a1->activeq.tqh_last = v11;
      }
      *v11 = (MTLIOCommandQueueCommand *)v10;
      v14 = 1;
LABEL_39:
      -[_MTLIOCommandQueue didComplete:withStatus:](a1->queue, "didComplete:withStatus:", *((_QWORD *)v5 + 1), v14);
      free(v5);
      goto LABEL_40;
    }
    if ((_BYTE)v41)
    {
      v12 = *((_QWORD *)v5 + 2);
      v13 = (MTLIOCommandQueueCommand **)*((_QWORD *)v5 + 3);
      if (v12)
      {
        *(_QWORD *)(v12 + 24) = v13;
        v13 = (MTLIOCommandQueueCommand **)*((_QWORD *)v5 + 3);
      }
      else
      {
        a1->activeq.tqh_last = v13;
      }
      *v13 = (MTLIOCommandQueueCommand *)v12;
      v14 = 3;
      goto LABEL_39;
    }
    if ((_BYTE)v40)
    {
      v15 = *((_QWORD *)v5 + 2);
      v16 = (MTLIOCommandQueueCommand **)*((_QWORD *)v5 + 3);
      if (v15)
      {
        *(_QWORD *)(v15 + 24) = v16;
        v16 = (MTLIOCommandQueueCommand **)*((_QWORD *)v5 + 3);
      }
      else
      {
        a1->activeq.tqh_last = v16;
      }
      *v16 = (MTLIOCommandQueueCommand *)v15;
      v14 = 2;
      goto LABEL_39;
    }
    if (!(HIBYTE(v40) | HIBYTE(v41)))
    {
      v7 = *(_DWORD *)v5;
LABEL_15:
      v8 = v7 == 1 || v6 == 0;
      v5 = v6;
      if (v8)
      {
LABEL_41:
        if (!a1->activeq.tqh_first || *(_DWORD *)a1->activeq.tqh_first)
          goto LABEL_2;
        goto LABEL_12;
      }
      continue;
    }
LABEL_40:
    v5 = v6;
    if (!v6)
      goto LABEL_41;
  }
  v17 = v9;
  pthread_mutex_unlock(a1->lock);
  v18 = objc_msgSend(*((id *)v5 + 1), "globalTraceObjectID");
  HIBYTE(v41) = 0;
  if (*v17 == 1)
  {
    v23 = *((_QWORD *)v17 + 2);
    v24 = *((_QWORD *)v17 + 3);
    v25 = (void *)*((_QWORD *)v17 + 1);
    if (MTLTraceEnabled())
    {
      objc_msgSend(v25, "globalTraceObjectID");
      kdebug_trace();
    }
    v26 = objc_msgSend(v25, "readIntoStagingBuffer:offset:stagingBuffer:stagingBufferSize:needsDecompress:", v24, v23, *((_QWORD *)v17 + 6), *((_QWORD *)v17 + 7), (char *)&v41 + 1);
    if (MTLTraceEnabled())
    {
      objc_msgSend(v25, "globalTraceObjectID");
      kdebug_trace();
    }
    if (!v26)
      MTLIOCommandList::completeIOCommand((MTLIOCommandList *)objc_msgSend(*((id *)v5 + 1), "getCommandList"), (MTLIOCommand *)v17, a1->cond, a1->lock, 0);
    followonQueue = a1->queue->_followonQueue;
    v34[0] = MEMORY[0x1E0C809B0];
    v34[1] = 3221225472;
    v34[2] = ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_3;
    v34[3] = &__block_descriptor_89_e5_v8__0l;
    v35 = HIBYTE(v41);
    v34[4] = v18;
    v34[5] = v17;
    v34[6] = v24;
    v34[7] = v23;
    v34[8] = v26;
    v34[9] = v5;
    v34[10] = a1;
    v28 = v34;
LABEL_64:
    dispatch_async(followonQueue, v28);
  }
  else if (!*v17)
  {
    v19 = (void *)*((_QWORD *)v17 + 1);
    v20 = *((unsigned __int8 *)v17 + 89);
    if (MTLTraceEnabled())
    {
      objc_msgSend(v19, "globalTraceObjectID");
      kdebug_trace();
    }
    if (v20)
    {
      v21 = objc_msgSend(v19, "readIntoStagingBuffer:offset:stagingBuffer:stagingBufferSize:needsDecompress:", *((_QWORD *)v17 + 3), *((_QWORD *)v17 + 2), *((_QWORD *)v17 + 6), *((_QWORD *)v17 + 7), (char *)&v41 + 1);
      if (v21)
        v22 = *((_QWORD *)v17 + 3);
      else
        v22 = -1;
    }
    else
    {
      v22 = objc_msgSend(v19, "read:size:offset:stagingBuffer:stagingBufferSize:needsDecompress:", *((_QWORD *)v17 + 8), *((_QWORD *)v17 + 3), *((_QWORD *)v17 + 2), *((_QWORD *)v17 + 6), *((_QWORD *)v17 + 7), (char *)&v41 + 1);
      v21 = 0;
    }
    if (MTLTraceEnabled())
    {
      objc_msgSend(v19, "globalTraceObjectID");
      kdebug_trace();
    }
    if (HIBYTE(v41))
    {
      followonQueue = a1->queue->_followonQueue;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke;
      block[3] = &unk_1E0FE41C0;
      v38 = v20;
      block[6] = v17;
      block[7] = v21;
      block[4] = v19;
      block[5] = v18;
      block[8] = v5;
      block[9] = a1;
      v28 = block;
      goto LABEL_64;
    }
    if (v22 == -1 || v22 < *((_QWORD *)v17 + 3))
    {
      v29 = (MTLIOCommandList *)objc_msgSend(*((id *)v5 + 1), "getCommandList");
      lock = a1->lock;
      cond = a1->cond;
      v32 = (MTLIOCommand *)v17;
      v33 = 0;
      goto LABEL_69;
    }
    if (v20)
    {
      followonQueue = a1->queue->_followonQueue;
      v36[0] = MEMORY[0x1E0C809B0];
      v36[1] = 3221225472;
      v36[2] = ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_2;
      v36[3] = &__block_descriptor_64_e5_v8__0l;
      v36[4] = v5;
      v36[5] = v17;
      v36[6] = a1;
      v36[7] = v18;
      v28 = v36;
      goto LABEL_64;
    }
    v29 = (MTLIOCommandList *)objc_msgSend(*((id *)v5 + 1), "getCommandList");
    lock = a1->lock;
    cond = a1->cond;
    v32 = (MTLIOCommand *)v17;
    v33 = 1;
LABEL_69:
    MTLIOCommandList::completeIOCommand(v29, v32, cond, lock, v33);
  }
}

void ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  MTLIOCommandList *v16;
  uint64_t v17;
  _opaque_pthread_cond_t *v18;
  _opaque_pthread_mutex_t *v19;
  MTLIOCommand *v20;
  char v21;
  uint64_t v22;

  if (MTLTraceEnabled())
    kdebug_trace();
  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(_QWORD *)(a1 + 56);
    if (!v2)
    {
      if (!MTLTraceEnabled())
      {
LABEL_14:
        v16 = (MTLIOCommandList *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 8), "getCommandList");
        v17 = *(_QWORD *)(a1 + 72);
        v19 = *(_opaque_pthread_mutex_t **)(v17 + 16);
        v18 = *(_opaque_pthread_cond_t **)(v17 + 24);
        v20 = *(MTLIOCommand **)(a1 + 48);
        v21 = 0;
        goto LABEL_18;
      }
      v15 = -1;
      goto LABEL_11;
    }
    v3 = *(void **)(a1 + 32);
    v4 = *(_QWORD **)(a1 + 48);
    v5 = v4[6];
    v7 = v4[2];
    v6 = v4[3];
    v8 = objc_msgSend(v3, "stagingBufferSize:offset:", v6, v7);
    v9 = v3;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    v13 = v2;
  }
  else
  {
    v9 = *(void **)(a1 + 32);
    v14 = *(_QWORD **)(a1 + 48);
    v8 = v14[7];
    v10 = v14[8];
    v12 = v14[2];
    v11 = v14[3];
    v13 = v14[6];
  }
  v15 = objc_msgSend(v9, "decompress:size:offset:stagingBuffer:stagingBufferSize:", v10, v11, v12, v13, v8);
  if (MTLTraceEnabled())
LABEL_11:
    kdebug_trace();
  if (v15 == -1 || v15 < *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24))
    goto LABEL_14;
  if (*(_BYTE *)(a1 + 80))
    objc_msgSend(MTLIOCommandList::getBlitCommandEncoder((MTLIOCommandList *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 8), "getCommandList")), "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 32), "buffer"), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24));
  v16 = (MTLIOCommandList *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 8), "getCommandList");
  v22 = *(_QWORD *)(a1 + 72);
  v19 = *(_opaque_pthread_mutex_t **)(v22 + 16);
  v18 = *(_opaque_pthread_cond_t **)(v22 + 24);
  v20 = *(MTLIOCommand **)(a1 + 48);
  v21 = 1;
LABEL_18:
  MTLIOCommandList::completeIOCommand(v16, v20, v18, v19, v21);
}

void ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_2(uint64_t a1)
{
  MTLIOCommandList *v2;

  v2 = (MTLIOCommandList *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "getCommandList");
  objc_msgSend(MTLIOCommandList::getBlitCommandEncoder(v2), "copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "buffer"), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 72), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24));
  MTLIOCommandList::completeIOCommand(v2, *(MTLIOCommand **)(a1 + 40), *(_opaque_pthread_cond_t **)(*(_QWORD *)(a1 + 48) + 24), *(_opaque_pthread_mutex_t **)(*(_QWORD *)(a1 + 48) + 16), 1);
}

void ___Z43MTLIOCommandQueueCommandListProcessCommandsP28MTLIOCommandQueueCommandList_block_invoke_3(uint64_t a1)
{
  unint64_t v2;
  MTLIOCommandList *v3;
  id BlitCommandEncoder;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 88))
  {
    if (MTLTraceEnabled())
      kdebug_trace();
    v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "decompress:size:offset:stagingBuffer:stagingBufferSize:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "stagingBufferSize:offset:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)));
    if (MTLTraceEnabled())
      kdebug_trace();
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 48);
  }
  if (v2 == -1 || v2 < *(_QWORD *)(a1 + 48))
    MTLIOCommandList::completeIOCommand((MTLIOCommandList *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 8), "getCommandList"), *(MTLIOCommand **)(a1 + 40), *(_opaque_pthread_cond_t **)(*(_QWORD *)(a1 + 80) + 24), *(_opaque_pthread_mutex_t **)(*(_QWORD *)(a1 + 80) + 16), 0);
  v3 = (MTLIOCommandList *)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 72) + 8), "getCommandList");
  BlitCommandEncoder = MTLIOCommandList::getBlitCommandEncoder(v3);
  v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "buffer");
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *(_QWORD *)(v6 + 136);
  v9 = *(_QWORD *)(v6 + 144);
  v15 = *(_OWORD *)(v6 + 96);
  v10 = *(_QWORD *)(v6 + 120);
  v16 = *(_QWORD *)(v6 + 112);
  v11 = *(_QWORD *)(v6 + 64);
  v12 = *(_QWORD *)(v6 + 128);
  v13 = *(_OWORD *)(v6 + 72);
  v14 = *(_QWORD *)(v6 + 88);
  objc_msgSend(BlitCommandEncoder, "copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:", v5, v7, v8, v9, &v15, v11, v10, v12, &v13);
  MTLIOCommandList::addResourceToSyncFromGPUToCPU(v3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64));
  MTLIOCommandList::completeIOCommand(v3, *(MTLIOCommand **)(a1 + 40), *(_opaque_pthread_cond_t **)(*(_QWORD *)(a1 + 80) + 24), *(_opaque_pthread_mutex_t **)(*(_QWORD *)(a1 + 80) + 16), 1);
}

uint64_t _MTLGetMTLCompilerLLVMVersionForDevice(void *a1)
{
  uint64_t result;
  _QWORD block[4];
  char v4;

  if (_MTLIsInternalBuild() && getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersionOnceToken != -1)
    dispatch_once(&getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersionOnceToken, &__block_literal_global_1311);
  result = getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersion;
  if (!getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersion)
  {
    if (_MTLIsInternalBuild()
      && _MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::deviceLLVMVersionOnceToken != -1)
    {
      dispatch_once(&_MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::deviceLLVMVersionOnceToken, &__block_literal_global_16);
    }
    if (_MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::useDeviceForLLVMVersion)
    {
      LODWORD(result) = objc_msgSend(a1, "llvmVersion");
      if ((int)result <= 32023)
        return 32023;
      else
        return result;
    }
    else if ((unint64_t)objc_msgSend(a1, "featureProfile") >= 7)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZL26getMaxSupportedLLVMVersionb_block_invoke;
      block[3] = &__block_descriptor_33_e5_v8__0l;
      v4 = 0;
      if (getMaxSupportedLLVMVersion(BOOL)::onceToken != -1)
        dispatch_once(&getMaxSupportedLLVMVersion(BOOL)::onceToken, block);
      return getMaxSupportedLLVMVersion(BOOL)::llvmVersion;
    }
    else
    {
      return 32023;
    }
  }
  return result;
}

uint64_t ___Z38_MTLGetMTLCompilerLLVMVersionForDevicePU19objcproto9MTLDevice11objc_object_block_invoke()
{
  uint64_t result;

  result = MTLGetEnvDefault("MTL_USE_DEVICE_LLVM_VERSION_SELECTOR", 0);
  _MTLGetMTLCompilerLLVMVersionForDevice(objc_object  {objcproto9MTLDevice}*)::useDeviceForLLVMVersion = (_DWORD)result != 0;
  return result;
}

BOOL _MTLDeviceIsFrozen(void *a1)
{
  return (unint64_t)objc_msgSend(a1, "featureProfile") < 7;
}

char *___getForcedAIRVersion_block_invoke()
{
  char *v0;
  char *result;
  _BOOL4 v2;
  _BOOL4 v3;
  BOOL v4;
  const char *v5;

  v0 = getenv("MTL_FORCE_LANGUAGE_VERSION");
  result = getenv("MTL_FORCE_AIR_VERSION");
  v2 = v0 != 0;
  v3 = result == 0;
  v4 = v2 && v3;
  if (!v2 || !v3)
    v0 = result;
  if (v0)
  {
    sscanf(v0, "%d_%d", &_getForcedAIRVersion::major, &_getForcedAIRVersion::minor);
    if (v4)
      v5 = "MTL_FORCE_LANGUAGE_VERSION";
    else
      v5 = "MTL_FORCE_AIR_VERSION";
    return (char *)fprintf((FILE *)*MEMORY[0x1E0C80C10], "Using MTLAIRVersion%d_%d (set with %s=%s)\n", _getForcedAIRVersion::major, _getForcedAIRVersion::minor, v5, v0);
  }
  return result;
}

void _getForcedLanguageVersion(_DWORD *a1, _DWORD *a2)
{
  if (_getForcedLanguageVersion::onceToken != -1)
    dispatch_once(&_getForcedLanguageVersion::onceToken, &__block_literal_global_49);
  *a1 = _getForcedLanguageVersion::major;
  *a2 = _getForcedLanguageVersion::minor;
}

const char *stringFromBuffer(const char *a1, unsigned int *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const char *result;

  v3 = *a2;
  LODWORD(v4) = *a2;
  if (v3 >= a3)
  {
LABEL_5:
    result = 0;
    *a2 = v4;
  }
  else
  {
    v5 = *a2;
    while (1)
    {
      v4 = (v4 + 1);
      if (!a1[v5])
        break;
      v5 = v4;
      if (v4 >= a3)
        goto LABEL_5;
    }
    *a2 = v4;
    return &a1[v3];
  }
  return result;
}

uint64_t uint32FromBuffer(const char *a1, unsigned int *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  if (v3 + 4 > a3)
    return 0;
  result = *(unsigned int *)&a1[v3];
  *a2 = v3 + 4;
  return result;
}

uint64_t MTLProxyLibraryData::MTLProxyLibraryData(uint64_t a1, void *a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *__p[2];
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void **v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E0FE00A8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  v5 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)a1 = &off_1E0FDED58;
  *(_OWORD *)(a1 + 96) = 0u;
  v6 = a1 + 96;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 1065353216;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v16;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v16 != v8)
          objc_enumerationMutation(a2);
        v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * v9);
        v11 = v10;
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend((id)objc_msgSend(v10, "name"), "UTF8String"));
        v19 = __p;
        *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto11MTLFunction}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto11MTLFunction}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto11MTLFunction}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}*>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::piecewise_construct_t const&<>>(v6, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v19)+ 5) = v10;
        if (v14 < 0)
          operator delete(__p[0]);
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v7);
  }
  return a1;
}

void sub_18276DDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MTLLibraryData *v15;
  uint64_t v16;

  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v16);
  MTLLibraryData::~MTLLibraryData(v15);
  _Unwind_Resume(a1);
}

void MTLProxyLibraryData::~MTLProxyLibraryData(id *this)
{
  id *i;

  *this = &off_1E0FDED58;
  for (i = this + 14; ; i[5])
  {
    i = (id *)*i;
    if (!i)
      break;
  }

  this[17] = 0;
  this[18] = 0;
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)(this + 12));
  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);
}

{
  MTLProxyLibraryData::~MTLProxyLibraryData(this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLProxyLibraryData::readFunctionMetadata(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;

  v7 = objc_msgSend(a3, "libraryData");
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 192))(v7, a2, a3, a4);
}

void MTLProxyLibraryData::parseBitCodeHeader(MTLProxyLibraryData *this, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  abort();
}

uint64_t MTLProxyLibraryData::setPosition(MTLProxyLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::readBytes(MTLProxyLibraryData *this, void *a2)
{
  return 0;
}

uint64_t MTLProxyLibraryData::getFileSize(MTLProxyLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::functionNames(MTLProxyLibraryData *this)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *i;
  id v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  id *v19;
  id *v20;
  char *v22;
  char *v23;
  char *v24;

  v1 = *((_QWORD *)this + 18);
  if (!v1)
  {
    v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    v1 = *((_QWORD *)this + 18);
    if (!v1)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v22, *((_QWORD *)this + 15));
      for (i = (uint64_t *)*((_QWORD *)this + 14); i; i = (uint64_t *)*i)
      {
        v5 = objc_alloc(MEMORY[0x1E0CB3940]);
        v6 = i + 2;
        if (*((char *)i + 39) < 0)
          v6 = (_QWORD *)*v6;
        v7 = objc_msgSend(v5, "initWithUTF8String:", v6);
        v8 = v7;
        v9 = v23;
        if (v23 >= v24)
        {
          v11 = (v23 - v22) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v12 = (v24 - v22) >> 2;
          if (v12 <= v11 + 1)
            v12 = v11 + 1;
          if ((unint64_t)(v24 - v22) >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v24, v13);
          else
            v14 = 0;
          v15 = (uint64_t *)&v14[8 * v11];
          *v15 = v8;
          v10 = (char *)(v15 + 1);
          v17 = v22;
          v16 = v23;
          if (v23 != v22)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *--v15 = v18;
            }
            while (v16 != v17);
            v16 = v22;
          }
          v22 = (char *)v15;
          v23 = v10;
          v24 = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_QWORD *)v23 = v7;
          v10 = v9 + 8;
        }
        v23 = v10;
      }
      v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:");
      *((_QWORD *)this + 18) = v1;
      v19 = (id *)v22;
      v20 = (id *)v23;
      if (v22 != v23)
      {
        do

        while (v19 != v20);
        v1 = *((_QWORD *)this + 18);
        v19 = (id *)v22;
      }
      if (v19)
      {
        v23 = (char *)v19;
        operator delete(v19);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_18276E0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  if (__p)
    operator delete(__p);
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t MTLProxyLibraryData::functionHashes(MTLProxyLibraryData *this)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t **i;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  id *v17;
  id *v18;
  char *v20;
  char *v21;
  char *v22;

  v1 = *((_QWORD *)this + 17);
  if (!v1)
  {
    v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    v1 = *((_QWORD *)this + 17);
    if (!v1)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v20, *((_QWORD *)this + 15));
      for (i = (uint64_t **)*((_QWORD *)this + 14); i; i = (uint64_t **)*i)
      {
        v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B18]), "initWithBytes:objCType:", objc_msgSend(i[5], "bitCodeHash"), "{?=[32C]}");
        v6 = v5;
        v7 = v21;
        if (v21 >= v22)
        {
          v9 = (v21 - v20) >> 3;
          if ((unint64_t)(v9 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v10 = (v22 - v20) >> 2;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if ((unint64_t)(v22 - v20) >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          if (v11)
            v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v22, v11);
          else
            v12 = 0;
          v13 = (uint64_t *)&v12[8 * v9];
          *v13 = v6;
          v8 = (char *)(v13 + 1);
          v15 = v20;
          v14 = v21;
          if (v21 != v20)
          {
            do
            {
              v16 = *((_QWORD *)v14 - 1);
              v14 -= 8;
              *--v13 = v16;
            }
            while (v14 != v15);
            v14 = v20;
          }
          v20 = (char *)v13;
          v21 = v8;
          v22 = &v12[8 * v11];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v21 = v5;
          v8 = v7 + 8;
        }
        v21 = v8;
      }
      v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:");
      *((_QWORD *)this + 17) = v1;
      v17 = (id *)v20;
      v18 = (id *)v21;
      if (v20 != v21)
      {
        do

        while (v17 != v18);
        v1 = *((_QWORD *)this + 17);
        v17 = (id *)v20;
      }
      if (v17)
      {
        v21 = (char *)v17;
        operator delete(v17);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_18276E308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  if (__p)
    operator delete(__p);
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

id MTLProxyLibraryData::newFunction(uint64_t a1, void *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *__p[2];
  char v7;

  v2 = (_QWORD *)(a1 + 96);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(a2, "UTF8String"));
  v3 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  v4 = v3;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return *((id *)v4 + 5);
  }
  else if (v3)
  {
    return *((id *)v4 + 5);
  }
  return 0;
}

void sub_18276E3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLProxyLibraryData::setStitchedLibraryTrackingData(uint64_t a1, uint64_t *a2)
{
  _QWORD *i;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  for (i = *(_QWORD **)(a1 + 112); i; i = (_QWORD *)*i)
  {
    v4 = (void *)i[5];
    v5 = (std::__shared_weak_count *)a2[1];
    v11 = *a2;
    v12 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    objc_msgSend(v4, "setTrackingData:", &v11);
    v8 = v12;
    if (v12)
    {
      v9 = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_18276E464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *MTLLibraryDataWithArchive::parseDynamicLibraryBitCode(_QWORD *this, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;

  v3 = this[12];
  if (v3)
  {
    *a3 = this[29];
    v3 = this[28];
  }
  else
  {
    *a3 = 0;
  }
  *a2 = v3;
  return this;
}

void MTLLibraryDataWithArchive::setStitchingScripts(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  NSObject *v7;
  int *v8;
  int *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  unsigned int *v15;
  void *__p[2];
  char v18;
  size_t size_ptr;
  void *buffer_ptr;
  void **v21;

  v2 = *a2;
  if (a2[1] != *a2)
  {
    v4 = 0;
    v5 = a1 + 360;
    v6 = 1;
    do
    {
      size_ptr = 0;
      buffer_ptr = 0;
      v7 = dispatch_data_create_map(*(dispatch_data_t *)(v2 + 40 * v4), (const void **)&buffer_ptr, &size_ptr);
      v8 = 0;
      v9 = (int *)((char *)buffer_ptr + *(unsigned int *)buffer_ptr);
      v10 = (unsigned __int16 *)((char *)v9 - *v9);
      if (*v10 >= 9u)
      {
        v8 = (int *)v10[4];
        if (v10[4])
          v8 = (int *)((char *)v8 + (_QWORD)v9 + *(unsigned int *)((char *)v8 + (_QWORD)v9));
      }
      v11 = (unsigned __int16 *)((char *)v8 - *v8);
      if (*v11 >= 7u && (v12 = v11[3]) != 0)
        v13 = (int *)((char *)v8 + v12 + *(unsigned int *)((char *)v8 + v12));
      else
        v13 = 0;
      v14 = *(_QWORD *)(*a2 + 40 * v4);
      v15 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 4));
      std::string::basic_string[abi:ne180100](__p, (char *)v15 + *v15 + 4, *(unsigned int *)((char *)v15 + *v15));
      v21 = __p;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21)+ 5) = v14;
      if (v18 < 0)
        operator delete(__p[0]);
      dispatch_retain(*(dispatch_object_t *)(*a2 + 40 * v4));
      dispatch_release(v7);
      v4 = v6;
      v2 = *a2;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v6++);
  }
}

void sub_18276E634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLLibraryDataWithArchive::parseDynamicLibraryReflection(MTLLibraryDataWithArchive *this, unint64_t *a2, unint64_t *a3, NSError **a4)
{
  os_unfair_lock_s *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSError *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;

  *a2 = 0;
  *a3 = 0;
  if (!*((_QWORD *)this + 74))
    return;
  v8 = (os_unfair_lock_s *)((char *)this + 84);
  os_unfair_lock_lock((os_unfair_lock_t)this + 21);
  if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, _QWORD))(*(_QWORD *)this + 312))(this, *((_QWORD *)this + 73)) & 1) == 0)
  {
    if (!a4)
      goto LABEL_29;
    v11 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
    v12 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v11);
LABEL_28:
    *a4 = v12;
    goto LABEL_29;
  }
  v26 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(_QWORD *)this + 320))(this, &v26, 4) != 4)
  {
    if (!a4)
      goto LABEL_29;
    v13 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid metallib file, unexpected end of file while parsing reflection data"), *MEMORY[0x1E0CB2D50]);
    v12 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v13);
    goto LABEL_28;
  }
  if (!v26)
    goto LABEL_29;
  if (v26 != 1)
  {
    if (!a4)
      goto LABEL_29;
    v14 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (Unexpected number of reflection entries)"), *MEMORY[0x1E0CB2D50]);
    v12 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v14);
    goto LABEL_28;
  }
  if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, *((_QWORD *)this + 73) + 8) & 1) == 0)
  {
    if (!a4)
      goto LABEL_29;
    v15 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
    v12 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v15);
    goto LABEL_28;
  }
  v24 = 0;
  v25 = 0;
  while (1)
  {
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v25, 4) != 4)
    {
      if (!a4)
        goto LABEL_29;
LABEL_27:
      v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid metallib file, unexpected end of file while parsing reflection data"), *MEMORY[0x1E0CB2D50]);
      v12 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v16);
      goto LABEL_28;
    }
    v9 = v25;
    v25 = bswap32(v25);
    if (v9 == 1413762629)
      goto LABEL_12;
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unsigned int *, uint64_t))(*(_QWORD *)this + 320))(this, &v24, 4) != 4)
    {
      if (!a4)
        goto LABEL_29;
      goto LABEL_27;
    }
    if (v25 == 1380078918)
      break;
LABEL_12:
    v10 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
    if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, v10 + v24) & 1) == 0)
    {
      generateNSError(a4, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, CFSTR("Invalid library file (unexpected end of file)"));
      goto LABEL_29;
    }
    if (v25 == 1162757204)
      goto LABEL_29;
  }
  v17 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
  v18 = v17 + 15;
  v19 = v17 >= 0xFFFFFFFFFFFFFFF1;
  v20 = v19 << 63 >> 63;
  if (v20 == v19 && (v20 & 0x8000000000000000) == 0)
  {
    v21 = v18 & 0xFFFFFFFFFFFFFFF0;
    v22 = (v18 & 0xFFFFFFFFFFFFFFF0) - v17;
    v23 = v24;
    if (v22 <= v24)
    {
      *a2 = v21;
      *a3 = v23 - v22;
    }
  }
LABEL_29:
  os_unfair_lock_unlock(v8);
}

void sub_18276EA44(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *generateNSError(_QWORD *result, NSString *a2, MTLLibraryError a3, NSString *a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", a4, *MEMORY[0x1E0CB2D50]);
    result = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", a2, a3, v7);
    *v6 = result;
  }
  return result;
}

BOOL MTLLibraryDataWithArchive::getType(MTLLibraryDataWithArchive *this)
{
  return *((_QWORD *)this + 12) != 0;
}

BOOL MTLLibraryDataWithSource::parseBitCodeHeader(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  os_unfair_lock_s *v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t v12;
  unsigned int v14;

  v9 = this + 21;
  os_unfair_lock_lock(this + 21);
  (*(void (**)(os_unfair_lock_s *, uint64_t))(*(_QWORD *)&this->_os_unfair_lock_opaque + 312))(this, a2);
  v14 = 0;
  v10 = (*(uint64_t (**)(os_unfair_lock_s *, unsigned int *, uint64_t))(*(_QWORD *)&this->_os_unfair_lock_opaque
                                                                               + 320))(this, &v14, 4);
  v11 = v10 == 4;
  if (v10 == 4)
    v12 = v14;
  else
    v12 = 0;
  os_unfair_lock_unlock(v9);
  *a5 = v12;
  *a4 = a2 + 4;
  return v11;
}

void sub_18276EB94(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *MTLLibraryDataWithSource::parseDynamicLibraryBitCode(_QWORD *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  v4 = this[24];
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, unint64_t *, unint64_t *))(*this + 200))(this, this[25], v4, a2, a3);
  *a3 = 0;
  *a2 = 0;
  return this;
}

BOOL MTLLibraryDataWithSource::getType(MTLLibraryDataWithSource *this)
{
  return *((_QWORD *)this + 24) != 0;
}

uint64_t MTLLibraryDataWithSource::getBitCodeHash(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  CC_LONG v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  CC_SHA256_CTX c;

  v8 = 0;
  v9 = 0;
  result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t *, uint64_t *))(*a1 + 200))(a1, a3, 0, &v8, &v9);
  v6 = v9;
  if ((unint64_t)(v9 + v8) <= a1[20])
  {
    v7 = (const void *)(a1[19] + v8);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v7, v6);
    return CC_SHA256_Final((unsigned __int8 *)a2, &c);
  }
  return result;
}

uint64_t MTLLibraryDataWithGLIR::parseBitCodeHeader(MTLLibraryDataWithGLIR *this, unint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v5 = *((_QWORD *)this + 13);
  if (v5 >= a2)
  {
    v6 = a2;
    *((_QWORD *)this + 14) = a2;
  }
  else
  {
    v6 = *((_QWORD *)this + 14);
  }
  if (v6 + 4 <= v5)
  {
    v7 = *(unsigned int *)(*((_QWORD *)this + 12) + v6);
    *((_QWORD *)this + 14) = v6 + 4;
  }
  else
  {
    v7 = 0;
  }
  *a5 = v7;
  *a4 = a2 + 4;
  return 1;
}

uint64_t newFunctionWithGLIR(uint64_t a1, uint64_t a2, _DWORD *buffer, NSObject *a4, int a5)
{
  CC_LONG v10;
  NSObject *v11;
  uint64_t v12;
  char v13;
  _MTLFunctionInternal *v14;
  const __CFString *v15;
  uint64_t v16;
  CC_SHA256_CTX c;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v10 = *buffer + 4;
  v11 = dispatch_data_create(buffer, *buffer + 4, 0, 0);
  v12 = operator new();
  MTLLibraryDataWithGLIR::MTLLibraryDataWithGLIR(v12, v11);
  dispatch_release(v11);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  v19 = 0u;
  v20 = 0u;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, buffer, v10);
  CC_SHA256_Final((unsigned __int8 *)&v22[1], &c);
  if (a5)
    v13 = 3;
  else
    v13 = 1;
  BYTE8(v23) = v13;
  *(_QWORD *)&v19 = 0;
  v20 = 0uLL;
  *(_QWORD *)&v21 = -1;
  v22[0] = 0x1000100080001;
  *(_QWORD *)&v25 = a4;
  if (a4)
    dispatch_retain(a4);
  v14 = [_MTLFunctionInternal alloc];
  if (a5)
    v15 = CFSTR("#main");
  else
    v15 = CFSTR("__main");
  v16 = -[_MTLFunctionInternal initWithName:type:libraryData:functionData:device:](v14, "initWithName:type:libraryData:functionData:device:", v15, a2, v12, &v19, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  return v16;
}

void sub_18276EE70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C40AF1FB5FCLL);
  _Unwind_Resume(a1);
}

double MTLLibraryDataWithArchive::decodeSTCIToken@<D0>(char *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  const char *v6;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  size_t v10;
  __int128 v11;
  double result;
  _OWORD *v13;
  __int128 v14;

  v6 = a1 + 4;
  v7 = *(unsigned int *)a1;
  std::vector<MTLUINT256_t>::vector(&v13, v7);
  v8 = v13;
  if ((_DWORD)v7)
  {
    v9 = v13;
    do
    {
      v10 = strnlen(v6, a2);
      v11 = *(_OWORD *)&v6[v10 + 17];
      *v9 = *(_OWORD *)&v6[v10 + 1];
      v9[1] = v11;
      v9 += 2;
      v6 += v10 + 33;
      --v7;
    }
    while (v7);
  }
  *(_QWORD *)a3 = *(_QWORD *)v6;
  *(_QWORD *)(a3 + 8) = v8;
  result = *(double *)&v14;
  *(_OWORD *)(a3 + 16) = v14;
  return result;
}

void MTLLibraryDataWithArchive::decodeSPCIToken(uint64_t a1, uint64_t a2, char *__s1, size_t __n, unint64_t a5)
{
  size_t v9;
  __int128 v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  void *v32;
  unint64_t v33;
  unint64_t *v34;
  _OWORD v35[2];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = strnlen(__s1, __n);
  v10 = *(_OWORD *)&__s1[v9 + 17];
  v35[0] = *(_OWORD *)&__s1[v9 + 1];
  v35[1] = v10;
  v11 = *(_QWORD *)&__s1[v9 + 33];
  v33 = v11;
  v34 = (unint64_t *)v35;
  v12 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(a2, (unint64_t *)v35, (uint64_t)&std::piecewise_construct, (_OWORD **)&v34);
  v13 = v12;
  v14 = (unint64_t *)v12[7];
  v15 = (uint64_t)(v12 + 8);
  v16 = v12[8];
  if ((unint64_t)v14 >= v16)
  {
    v18 = (void **)(v12 + 6);
    v19 = (unint64_t *)v12[6];
    v20 = ((char *)v14 - (char *)v19) >> 4;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 60)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v22 = v16 - (_QWORD)v19;
    if (v22 >> 3 > v21)
      v21 = v22 >> 3;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
      v23 = 0xFFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<unsigned long,char const*>>>(v15, v23);
      v19 = (unint64_t *)v13[6];
      v14 = (unint64_t *)v13[7];
    }
    else
    {
      v24 = 0;
    }
    v25 = (unint64_t *)&v24[16 * v20];
    v26 = &v24[16 * v23];
    *v25 = v11;
    v25[1] = a5;
    v17 = v25 + 2;
    if (v14 != v19)
    {
      do
      {
        *((_OWORD *)v25 - 1) = *((_OWORD *)v14 - 1);
        v25 -= 2;
        v14 -= 2;
      }
      while (v14 != v19);
      v19 = (unint64_t *)*v18;
    }
    v13[6] = v25;
    v13[7] = v17;
    v13[8] = v26;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v14 = v11;
    v14[1] = a5;
    v17 = v14 + 2;
  }
  v13[7] = v17;
  v27 = *(_QWORD **)(a1 + 408);
  if (!v27)
    goto LABEL_28;
  v28 = (_QWORD *)(a1 + 408);
  do
  {
    v29 = v27[4];
    v30 = v29 >= v33;
    if (v29 >= v33)
      v31 = v27;
    else
      v31 = v27 + 1;
    if (v30)
      v28 = v27;
    v27 = (_QWORD *)*v31;
  }
  while (*v31);
  if (v28 == (_QWORD *)(a1 + 408) || v33 < v28[4])
  {
LABEL_28:
    v32 = malloc_type_malloc(0x18uLL, 0x1050040EE29081CuLL);
    v34 = &v33;
    std::__tree<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 400), &v33, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5] = (uint64_t)v32;
  }
}

uint64_t MTLLibraryDataWithArchive::parseArchiveSync(uint64_t a1, NSError **a2, int a3, void *a4)
{
  unsigned int v7;
  unsigned int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  NSError *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t **v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __CFString *v64;
  const char *v65;
  NSString *v66;
  const char *v67;
  _BYTE v68[12];
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  _OWORD v77[5];
  uint64_t v78;
  unsigned __int16 v79;
  int v80;
  unsigned int v81;
  unint64_t v82;
  uint64_t *v83;
  _QWORD *v84[2];
  _OWORD v85[2];
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  __int128 *v90;
  void *v91[2];
  uint64_t v92;
  uint64_t v93;

  v76 = a3;
  v93 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 0);
  if ((*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v88, 8) != 8)
  {
    if (a2)
    {
      v14 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
      v15 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v14);
LABEL_115:
      v59 = 0;
      *a2 = v15;
      return v59;
    }
    return 0;
  }
  if (v88 >> 1 != 1599962981)
    goto LABEL_24;
  if (_MTLGetMTLCompilerLLVMVersionForDevice(a4) - 32023 >= 2)
    v7 = 0;
  else
    v7 = 131079;
  if (!v89)
  {
LABEL_32:
    if (a2)
    {
      v21 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Fat library file but no AIR slice"), *MEMORY[0x1E0CB2D50]);
      v15 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v21);
      goto LABEL_115;
    }
    return 0;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = bswap32(v89);
  if (v11 <= 1)
    v11 = 1;
  v12 = -v11;
  do
  {
    ++v10;
    while (1)
    {
      if ((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 320))(a1, v85, 20) != 20)
      {
        if (a2)
        {
          v16 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
          *a2 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v16);
        }
        return 0;
      }
      if (LODWORD(v85[0]) == 385875969)
      {
        v13 = bswap32(DWORD1(v85[0]));
        if (v13 <= v7 && (v9 & (v13 <= v8)) == 0)
          break;
      }
      ++v10;
      if (v12 + v10 == 1)
      {
        if ((v9 & 1) != 0)
          goto LABEL_24;
        goto LABEL_32;
      }
    }
    *(_QWORD *)(a1 + 240) = bswap32(DWORD2(v85[0]));
    v9 = 1;
    v8 = v13;
  }
  while (v12 + v10);
LABEL_24:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 0);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, a1 + 152, 88);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  v19 = v17 == 88 && *(_DWORD *)(a1 + 152) == 1112298573;
  if (!v19 || *(_QWORD *)(a1 + 168) > v18)
  {
    if (a2)
    {
      v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file"), *MEMORY[0x1E0CB2D50]);
      v15 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v20);
      goto LABEL_115;
    }
    return 0;
  }
  v22 = *(_WORD *)(a1 + 156);
  *(_WORD *)(a1 + 156) = v22 & 0x7FFF;
  if ((v22 & 0x7FFF) == 0)
  {
LABEL_37:
    if (a2)
    {
      v24 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("This version of metallib is too old and not supported any longer."), *MEMORY[0x1E0CB2D50]);
      v15 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v24);
      goto LABEL_115;
    }
    return 0;
  }
  if ((v22 & 0x7FFF) != 1)
    goto LABEL_113;
  v23 = *(unsigned __int16 *)(a1 + 158);
  if (v23 <= 1)
    goto LABEL_37;
  if (v23 != 2)
  {
LABEL_113:
    if (a2)
    {
      v58 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("This version of metallib is too recent and not supported."), *MEMORY[0x1E0CB2D50]);
      v15 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v58);
      goto LABEL_115;
    }
    return 0;
  }
  v87 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, *(_QWORD *)(a1 + 176));
  if ((*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v87, 4) != 4)
  {
    generateNSError(a2, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, CFSTR("Invalid library file (unexpected end of file)"));
    return 0;
  }
  v25 = 0uLL;
  memset(v85, 0, sizeof(v85));
  v86 = 1065353216;
  v84[0] = 0;
  v84[1] = 0;
  v83 = (uint64_t *)v84;
  if (!v87)
  {
    LOBYTE(v27) = 0;
LABEL_120:
    *(_BYTE *)(a1 + 616) = v27 & 1;
    *(_OWORD *)(a1 + 520) = v25;
    *(_OWORD *)(a1 + 536) = v25;
    *(_OWORD *)(a1 + 552) = v25;
    *(_OWORD *)(a1 + 568) = v25;
    *(_OWORD *)(a1 + 584) = v25;
    *(_OWORD *)(a1 + 600) = v25;
    v61 = *(_OWORD *)(a1 + 200);
    v77[2] = *(_OWORD *)(a1 + 184);
    v77[3] = v61;
    v77[4] = *(_OWORD *)(a1 + 216);
    v78 = *(_QWORD *)(a1 + 232);
    v62 = *(_OWORD *)(a1 + 168);
    v77[0] = *(_OWORD *)(a1 + 152);
    v77[1] = v62;
    if (!MTLLibraryDataWithArchive::parseHeaderExtension((_QWORD *)a1, (uint64_t)v77, a1 + 520, a2)
      || !MTLLibraryDataWithArchive::parseDynamicHeaderSection((MTLLibraryDataWithArchive *)a1, a2)
      || !MTLLibraryDataWithArchive::parseImportedSymbolListSection((MTLLibraryDataWithArchive *)a1, a2)
      || !MTLLibraryDataWithArchive::parseVariableListSection((MTLLibraryDataWithArchive *)a1, a2)
      || !MTLLibraryDataWithArchive::generateHashForSpecializedFunctionScripts((MTLLibraryDataWithArchive *)a1, (uint64_t)v85, a2)|| !MTLLibraryDataWithArchive::parseStitchingScript((MTLLibraryDataWithArchive *)a1, &v83, a2))
    {
      goto LABEL_140;
    }
    v59 = MTLLibraryDataWithArchive::parseScriptSection((MTLLibraryDataWithArchive *)a1, a2);
    goto LABEL_141;
  }
  v26 = 0;
  v73 = 0;
  LODWORD(v74) = 0;
  v27 = 0;
  v69 = v22;
  v70 = a1 + 320;
  v72 = a1 + 280;
LABEL_43:
  v82 = 0;
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  v81 = 0;
  v28 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v81, 4);
  v71 = v26;
  if (v28 != 4)
  {
    if (!a2)
      goto LABEL_140;
    goto LABEL_131;
  }
  v29 = 0;
  v75 = 0;
  v80 = 0;
  v79 = 0;
  while (1)
  {
    v30 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v80, 4);
    if (v30 != 4)
    {
LABEL_135:
      generateNSError(a2, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, CFSTR("Invalid library file (unexpected end of file)"));
      goto LABEL_140;
    }
    v31 = v80;
    v32 = bswap32(v80);
    v80 = v32;
    if (((v31 == 1413762629) & v29) != 0)
      goto LABEL_110;
    if (v31 != 1413762629)
    {
      v30 = (*(uint64_t (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v79, 2);
      if (v30 != 2)
        goto LABEL_135;
      v32 = v80;
    }
    if (v32 > 1397769032)
      break;
    if (v32 > 1212240711)
    {
      if (v32 == 1212240712)
      {
        if ((*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 320))(a1, v91, 32) != 32)
          goto LABEL_135;
        v35 = v82;
        v90 = (__int128 *)v91;
        v36 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(v70, (unint64_t *)v91, (uint64_t)&std::piecewise_construct, &v90);
        v75 |= 4u;
        v36[6] = v35;
        goto LABEL_109;
      }
      if (v32 != 1312902469)
        goto LABEL_88;
      v47 = v79;
      MEMORY[0x1E0C80A78](v30);
      v43 = &v68[-v48];
      if ((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v68[-v48], v47) != v47)
      {
        v64 = CFSTR("Invalid library file (unexpected end of file)");
LABEL_137:
        generateNSError(a2, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, &v64->isa);
        goto LABEL_140;
      }
      if (v43[v47 - 1])
      {
        v64 = CFSTR("Non zero terminated function name!");
        goto LABEL_137;
      }
      v44 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v43);
      if (!v44)
      {
LABEL_139:
        generateNSError(a2, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, (NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Corrupted function name: %@!"), objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), v43)));
        goto LABEL_140;
      }
      goto LABEL_85;
    }
    if (v32 == 1095518547)
    {
      v41 = v79;
      MEMORY[0x1E0C80A78](v30);
      v43 = &v68[-v42];
      if ((*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a1 + 320))(a1, &v68[-v42], v41) != v41)
      {
        v64 = CFSTR("Invalid library file (unexpected end of file)");
        goto LABEL_137;
      }
      if (v43[v41 - 1])
      {
        v64 = CFSTR("Non zero terminated function name!");
        goto LABEL_137;
      }
      v44 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v43);
      if (!v44)
        goto LABEL_139;
LABEL_85:

      v49 = v82;
      std::string::basic_string[abi:ne180100]<0>(v91, v43);
      v90 = (__int128 *)v91;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,unsigned long long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v72, (unsigned __int8 *)v91, (uint64_t)&std::piecewise_construct, &v90)+ 5) = v49;
      if (SHIBYTE(v92) < 0)
        operator delete(v91[0]);
      v75 |= 1u;
      goto LABEL_109;
    }
    if (v32 != 1162757204)
      goto LABEL_88;
LABEL_109:
    v29 |= v74 & (v75 == 7);
    if (v80 == 1162757204)
    {
LABEL_110:
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 312))(a1, v82 + v81);
      v26 = v71 + 1;
      if (v71 + 1 < v87)
        goto LABEL_43;
      v25 = 0uLL;
      if ((v73 & v27 & 1) != 0)
      {
        generateNSError(a2, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, CFSTR("Library with both qualified functions and extern functions is not supported!"));
        goto LABEL_140;
      }
      goto LABEL_120;
    }
  }
  if (v32 <= 1398031176)
  {
    if (v32 == 1397769033)
    {
      v45 = (char *)malloc_type_malloc(v79, 0xCF4093CFuLL);
      v46 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a1 + 320))(a1, v45, v79);
      if (v46 != v79)
        goto LABEL_135;
      MTLLibraryDataWithArchive::decodeSPCIToken(a1, (uint64_t)v85, v45, v79, v82);
      free(v45);
      goto LABEL_109;
    }
    if (v32 != 1398031173)
    {
LABEL_88:
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, v50 + v79) & 1) == 0)
        goto LABEL_135;
      goto LABEL_109;
    }
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, v34 + v79))
      goto LABEL_135;
LABEL_68:
    LOBYTE(v91[0]) = 0;
    if ((*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 320))(a1, v91, 1) == 1)
    {
      v27 = (LOBYTE(v91[0]) == 5) | v27;
      v73 |= LOBYTE(v91[0]) != 5;
      v75 |= 2u;
      goto LABEL_109;
    }
    if (!a2)
      goto LABEL_140;
LABEL_131:
    v63 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
    *a2 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v63);
    goto LABEL_140;
  }
  if (v32 == 1398031177)
  {
    v37 = (char *)malloc_type_malloc(v79, 0x1FB40D03uLL);
    v38 = (*(uint64_t (**)(uint64_t, char *, _QWORD))(*(_QWORD *)a1 + 320))(a1, v37, v79);
    if (v38 != v79)
      goto LABEL_135;
    MTLLibraryDataWithArchive::decodeSTCIToken(v37, v79, (uint64_t)v91);
    v90 = (__int128 *)&v82;
    v39 = std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(&v83, &v82, (uint64_t)&std::piecewise_construct, (_QWORD **)&v90);
    v40 = (char *)v91[1];
    v39[5] = (uint64_t *)v91[0];
    std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>((char *)v39 + 48, v40, v92, (v92 - (uint64_t)v40) >> 5);
    free(v37);
    if (v40)
      operator delete(v40);
    goto LABEL_109;
  }
  if (v32 == 1415139397)
    goto LABEL_68;
  if (v32 != 1447383635)
    goto LABEL_88;
  if ((v74 & 1) != 0)
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, v33 + v79) & 1) == 0)
      goto LABEL_135;
LABEL_108:
    LODWORD(v74) = 1;
    goto LABEL_109;
  }
  if ((*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 320))(a1, v91, 8) != 8)
    goto LABEL_135;
  if ((dyld_program_sdk_at_least() & 1) == 0)
  {
    v51 = v27;
    LODWORD(v27) = WORD1(v91[0]) | (LOWORD(v91[0]) << 16);
    goto LABEL_102;
  }
  v51 = v27;
  v52 = _MTLGetMTLCompilerLLVMVersionForDevice(a4) - 32023;
  if (v52 >= 2)
    v53 = 0;
  else
    v53 = 131079;
  v74 = objc_msgSend(a4, "featureProfile");
  if (v52 >= 2)
    v54 = 0;
  else
    v54 = 196610;
  v55 = WORD2(v91[0]);
  v56 = HIWORD(v91[0]);
  if (validateLanguageVersion(HIWORD(v91[0]) | (WORD2(v91[0]) << 16), v54))
  {
    v27 = WORD1(v91[0]) | (LOWORD(v91[0]) << 16);
    if (!validateAIRVersion(WORD1(v91[0]) | (LOWORD(v91[0]) << 16), v53))
    {
      v67 = "OS";
      if (v74 < 7)
        v67 = "device";
      v66 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("This library is using a deployment target (0x%08X) that is not supported on this %s."), v27, v67);
      goto LABEL_150;
    }
LABEL_102:
    *(_DWORD *)(a1 + 620) = v27;
    v57 = _os_feature_enabled_impl();
    v27 = v51;
    if (v76)
    {
      if ((v57 & 1) != 0)
      {
        if (v69 < 0)
          goto LABEL_146;
      }
      else if (v69 < 0 && *(_DWORD *)(a1 + 620) <= 0x20003u)
      {
LABEL_146:
        generateNSError(a2, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, CFSTR("This library format is not supported on this platform (or was built with an old version of the tools)"));
        goto LABEL_140;
      }
    }
    goto LABEL_108;
  }
  v65 = "OS";
  if (v74 < 7)
    v65 = "device";
  v66 = (NSString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("This library is using language version %u.%u which is not supported on this %s."), v55, v56, v65);
LABEL_150:
  generateNSError(a2, CFSTR("MTLLibraryErrorDomain"), MTLLibraryErrorUnsupported, v66);
LABEL_140:
  v59 = 0;
LABEL_141:
  std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy((uint64_t)&v83, v84[0]);
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::~__hash_table((uint64_t)v85);
  return v59;
}

void sub_18277018C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(v1 + 184, *(_QWORD **)(v1 + 192));
  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::~__hash_table(v2 - 192);
  _Unwind_Resume(a1);
}

uint64_t _MTLGetMaxAIRAndLanguageVersions(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  *a2 = 0;
  *a3 = 0;
  if ((result - 32023) <= 1)
  {
    *a2 = 131079;
    *a3 = 196610;
  }
  return result;
}

BOOL validateLanguageVersion(int a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  _BOOL8 result;

  if (a1 < 196608)
  {
    result = 1;
    switch(a1)
    {
      case 131072:
        return result;
      case 131073:
        return a2 > 0x20000;
      case 131074:
        v3 = 131073;
        goto LABEL_6;
      case 131075:
        v3 = 131074;
        goto LABEL_6;
      case 131076:
        v3 = 131075;
        goto LABEL_6;
      case 131077:
        goto LABEL_9;
      case 131078:
        goto LABEL_10;
      default:
        if ((a1 - 0x10000) >= 3)
          return 0;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 196608:
LABEL_9:
        v4 = HIWORD(a2) > 2u;
        break;
      case 196609:
LABEL_10:
        v4 = a2 > 0x30000;
        break;
      case 196610:
        v3 = 196609;
LABEL_6:
        v4 = a2 > v3;
        break;
      default:
        return 0;
    }
    return v4;
  }
  return result;
}

BOOL validateAIRVersion(int a1, unsigned int a2)
{
  _BOOL8 result;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;

  result = 1;
  switch(a1)
  {
    case 131072:
      return result;
    case 131073:
      v4 = a2 > 0x20000;
      goto LABEL_13;
    case 131074:
      v6 = 131073;
      goto LABEL_12;
    case 131075:
      v6 = 131074;
      goto LABEL_12;
    case 131076:
      v6 = 131075;
      goto LABEL_12;
    case 131077:
      v6 = 131076;
      goto LABEL_12;
    case 131078:
      v6 = 131077;
      goto LABEL_12;
    case 131079:
      v6 = 131078;
LABEL_12:
      v4 = a2 > v6;
LABEL_13:
      result = v4;
      break;
    default:
      v5 = a1 - 65542;
      if (v5 > 5 || v5 == 1)
        result = 0;
      break;
  }
  return result;
}

uint64_t MTLLibraryDataWithArchive::generateHashForSpecializedFunctionScripts(MTLLibraryDataWithArchive *a1, uint64_t a2, NSError **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t result;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t **v12;
  _QWORD *i;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t *v25;
  uint64_t *v26;
  _OWORD *v27;
  _OWORD v28[2];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 76))
    return 1;
  v5 = (uint64_t *)*((_QWORD *)a1 + 50);
  v6 = (uint64_t *)((char *)a1 + 408);
  if (v5 == (uint64_t *)((char *)a1 + 408))
  {
LABEL_10:
    v12 = (uint64_t **)((char *)a1 + 400);
    for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    {
      v14 = i[6];
      if (i[7] != v14)
      {
        v15 = 0;
        v16 = 1;
        do
        {
          *(_QWORD *)&v28[0] = v14 + 16 * v15;
          v17 = std::__tree<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v12, *(unint64_t **)&v28[0], (uint64_t)&std::piecewise_construct, (uint64_t **)v28)[5];
          memset(v28, 0, sizeof(v28));
          v18 = *(const void **)v17;
          v19 = *(_QWORD *)(v17 + 8);
          if (*(_QWORD *)(v17 + 16))
            v20 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
          else
            v20 = 0;
          createHashForType(15, v18, v19, i + 2, 0, v20, 0, (unsigned __int8 *)v28);
          v21 = *(_QWORD *)(i[6] + 16 * v15 + 8);
          v27 = v28;
          std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>((uint64_t)a1 + 440, (unint64_t *)v28, (uint64_t)&std::piecewise_construct, &v27)[6] = v21;
          v15 = v16;
          v14 = i[6];
          ++v16;
        }
        while (v15 < (i[7] - v14) >> 4);
      }
    }
    if (*((_QWORD *)a1 + 52))
    {
      v22 = *v12;
      if (*v12 != v6)
      {
        do
        {
          v23 = v22[5];
          if (*(_QWORD *)v23)
            free(*(void **)v23);
          v24 = *(void **)(v23 + 16);
          if (v24)
            free(v24);
          free((void *)v22[5]);
          v25 = (uint64_t *)v22[1];
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (uint64_t *)v22[2];
              v11 = *v26 == (_QWORD)v22;
              v22 = v26;
            }
            while (!v11);
          }
          v22 = v26;
        }
        while (v26 != v6);
      }
    }
    std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy((uint64_t)v12, *((_QWORD **)a1 + 51));
    *((_QWORD *)a1 + 51) = 0;
    *((_QWORD *)a1 + 52) = 0;
    result = 1;
    *((_QWORD *)a1 + 50) = v6;
  }
  else
  {
    while (1)
    {
      (*(void (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)a1 + 312))(a1, v5[4] + *((_QWORD *)a1 + 75));
      result = MTLLibraryDataWithArchive::serializeSpecFunctionScript(a1, (_QWORD *)v5[5], a3);
      if (!(_DWORD)result)
        break;
      v9 = (uint64_t *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (uint64_t *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
      if (v10 == v6)
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t MTLLibraryDataWithArchive::parseStitchingScript(MTLLibraryDataWithArchive *a1, _QWORD *a2, NSError **a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *__p[3];
  unsigned int v16;
  char *v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 76))
    return 1;
  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 1;
  v7 = (uint64_t)a1 + 480;
  while (1)
  {
    v8 = v4[4];
    v18 = v4[5];
    v20 = 0;
    v21 = 0;
    v19 = 0;
    std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(&v19, (const void *)v4[6], v4[7], (uint64_t)(v4[7] - v4[6]) >> 5);
    (*(void (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)a1 + 312))(a1, v18 + *((_QWORD *)a1 + 75));
    v17 = 0;
    if ((MTLLibraryDataWithArchive::extractScript(a1, &v17, &v16, a3) & 1) == 0)
      break;
    v9 = v17;
    v10 = *(unsigned int *)v17;
    memset(__p, 0, sizeof(__p));
    std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(__p, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 5);
    MTLCalculateStitchingHash((int *)&v9[v10], (__int128 *)__p, v23);
    v22 = v23;
    std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t&&>,std::tuple<>>(v7, v23, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22)[6] = v8;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    free(v17);
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    v11 = (_QWORD *)v4[1];
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v12 = (_QWORD *)v4[2];
        v13 = *v12 == (_QWORD)v4;
        v4 = v12;
      }
      while (!v13);
    }
    v4 = v12;
    if (v12 == v3)
      return 1;
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  return 0;
}

void sub_182770874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL MTLLibraryDataWithArchive::getFunctionAtOffset(MTLLibraryDataWithArchive *this, unint64_t a2, MTLFunctionData *a3, MTLLibraryDataWithArchive::AdditionalFunctionData *a4)
{
  void **v7;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  signed int v18;
  unsigned int v19;
  char *v20;
  size_t v21;
  size_t v22;
  __int128 v23;
  $CE7EE795C0049C9826BBCCC84D46E58D *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void **v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t privateArgumentsOffset;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  $CE7EE795C0049C9826BBCCC84D46E58D *p_baseFunctionHash;
  unint64_t *p_sourceArchiveOffset;
  $CE7EE795C0049C9826BBCCC84D46E58D *p_bitcodeHash;
  unint64_t *p_bitCodeFileSize;
  void **v58;
  char *v59;
  int v60;
  NSError *v61;
  unsigned int v62;
  uint64_t v63;
  char *v64[2];
  unint64_t v65;
  signed int v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  (*(void (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 312))(this);
  v7 = (void **)((char *)a4 + 8);
  MEMORY[0x186DABE30]((char *)a4 + 8, "");
  *(_QWORD *)a4 = 0xFFFFFFFFLL;
  v67 = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, int *, uint64_t))(*(_QWORD *)this + 320))(this, &v67, 4) != 4)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    MTLLibraryDataWithArchive::parseDynamicHeaderSection(result, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
  *(_OWORD *)&a3->baseFunctionHash.key[8] = 0u;
  *(_OWORD *)&a3->baseFunctionHash.key[24] = 0u;
  *(_OWORD *)&a3->pluginData = 0u;
  *(_OWORD *)&a3->functionInputs = 0u;
  *(_OWORD *)&a3->bitcodeHash.key[8] = 0u;
  *(_OWORD *)&a3->bitcodeHash.key[24] = 0u;
  *(_OWORD *)&a3->airMajorVersion = 0u;
  *(_OWORD *)&a3->bitCodeOffset = 0u;
  *(_OWORD *)&a3->publicArgumentsOffset = 0u;
  *(_OWORD *)&a3->sourceArchiveOffset = 0u;
  p_sourceArchiveOffset = &a3->sourceArchiveOffset;
  a3->sourceArchiveOffset = -1;
  a3->reflectionDataOffset = -1;
  if (*((_DWORD *)this + 156))
  {
    v8 = 0;
LABEL_8:
    *((_BYTE *)a3 + 105) = v8 | 0xFC;
    goto LABEL_9;
  }
  if (dyld_program_sdk_at_least())
  {
    v8 = *((_BYTE *)a3 + 105);
    goto LABEL_8;
  }
LABEL_9:
  v60 = 0;
  v17 = 0;
  v66 = 0;
  p_bitcodeHash = &a3->bitcodeHash;
  p_bitCodeFileSize = &a3->bitCodeFileSize;
  v53 = (char *)a4 + 56;
  p_baseFunctionHash = &a3->baseFunctionHash;
  v58 = (void **)((char *)a4 + 32);
  v59 = 0;
  do
  {
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, signed int *, uint64_t))(*(_QWORD *)this + 320))(this, &v66, 4) != 4)
    {
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      goto LABEL_104;
    }
    v18 = v66;
    v19 = bswap32(v66);
    v66 = v19;
    LOWORD(v61) = 0;
    if (v18 == 1413762629)
      continue;
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, NSError **, uint64_t))(*(_QWORD *)this + 320))(this, &v61, 2) != 2)
    {
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!result)
        return 0;
      goto LABEL_104;
    }
    if (v66 <= 1380338771)
    {
      if (v66 > 1296323417)
      {
        if (v66 != 1296323418)
        {
          if (v66 != 1312902469)
          {
            if (v66 != 1330005588)
              goto LABEL_67;
            if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(_QWORD *)this + 320))(this, v64, 24) != 24)
            {
              result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
              if (!result)
                return 0;
              goto LABEL_104;
            }
            *(_OWORD *)&a3->publicArgumentsOffset = *(_OWORD *)v64;
            a3->bitCodeOffset = v65;
            v17 |= 8u;
            goto LABEL_68;
          }
          v33 = (unsigned __int16)v61;
          MEMORY[0x1E0C80A78](2);
          v35 = (char *)&v52 - v34;
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(_QWORD *)this + 320))(this, (char *)&v52 - v34, v33) != v33)
          {
            result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
            if (!result)
              return 0;
            goto LABEL_104;
          }
          std::string::basic_string[abi:ne180100]<0>(v64, v35);
LABEL_59:
          if (*((char *)a4 + 31) < 0)
            operator delete(*v7);
          *(_OWORD *)v7 = *(_OWORD *)v64;
          *((_QWORD *)a4 + 3) = v65;
          v17 |= 1u;
          goto LABEL_68;
        }
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, unint64_t *, uint64_t))(*(_QWORD *)this
                                                                                                 + 320))(this, p_bitCodeFileSize, 8) == 8)goto LABEL_68;
        result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (!result)
          return 0;
      }
      else
      {
        if (v66 > 1212240711)
        {
          if (v66 == 1212240712)
          {
            if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, $CE7EE795C0049C9826BBCCC84D46E58D *, uint64_t))(*(_QWORD *)this + 320))(this, p_bitcodeHash, 32) != 32)
            {
              result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
              if (!result)
                return 0;
              goto LABEL_104;
            }
            v17 |= 4u;
          }
          else
          {
            if (v66 != 1279351122)
              goto LABEL_67;
            LOBYTE(v64[0]) = 0;
            if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(_QWORD *)this + 320))(this, v64, 1) != 1)
            {
              result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
              if (!result)
                return 0;
              goto LABEL_104;
            }
            a3->renderTargetArrayIndexType = v64[0];
          }
          goto LABEL_68;
        }
        if (v66 == 1095518547)
        {
          v25 = (unsigned __int16)v61;
          MEMORY[0x1E0C80A78](2);
          v27 = (char *)&v52 - v26;
          if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(_QWORD *)this + 320))(this, (char *)&v52 - v26, v25) != v25)
          {
            result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
            if (!result)
              return 0;
            goto LABEL_104;
          }
          std::string::basic_string[abi:ne180100]<0>(v64, v27);
          if (*((char *)a4 + 55) < 0)
            operator delete(*v58);
          v28 = v58;
          *(_OWORD *)v58 = *(_OWORD *)v64;
          v28[2] = (void *)v65;
          v29 = strlen(v27);
          std::string::basic_string[abi:ne180100]<0>(v64, &v27[v29 + 1]);
          goto LABEL_59;
        }
        if (v66 == 1162757204)
          break;
LABEL_67:
        v36 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
        if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, v36 + (unsigned __int16)v61) & 1) != 0)goto LABEL_68;
        result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (!result)
          return 0;
      }
LABEL_104:
      MTLLibraryDataWithArchive::parseDynamicHeaderSection(result, v45, v46, v47, v48, v49, v50, v51);
      return 0;
    }
    if (v66 <= 1398031176)
    {
      if (v66 == 1380338772)
      {
        v64[0] = 0;
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(_QWORD *)this + 320))(this, v64, 8) != 8)
        {
          result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
          if (!result)
            return 0;
          goto LABEL_104;
        }
        a3->reflectionDataOffset = (unint64_t)v64[0];
        goto LABEL_68;
      }
      if (v66 == 1397704262)
      {
        v64[0] = 0;
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(_QWORD *)this + 320))(this, v64, 8) != 8)
        {
          result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
          if (!result)
            return 0;
          goto LABEL_104;
        }
        *p_sourceArchiveOffset = (unint64_t)v64[0];
        goto LABEL_68;
      }
      if (v66 != 1397769033)
        goto LABEL_67;
      v20 = (char *)malloc_type_malloc((unsigned __int16)v61, 0x190F03C4uLL);
      v21 = (*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, _QWORD))(*(_QWORD *)this + 320))(this, v20, (unsigned __int16)v61);
      if (v21 != (unsigned __int16)v61)
      {
        result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (!result)
          return 0;
        goto LABEL_104;
      }
      v22 = strnlen(v20, v21);
      v23 = *(_OWORD *)&v20[v22 + 17];
      v24 = p_baseFunctionHash;
      *(_OWORD *)p_baseFunctionHash->key = *(_OWORD *)&v20[v22 + 1];
      *(_OWORD *)&v24->key[16] = v23;
      v59 = *(char **)&v20[v22 + 33];
      free(v20);
      goto LABEL_48;
    }
    if (v66 <= 1415139396)
    {
      if (v66 != 1398031177)
      {
        if (v66 != 1413829459)
          goto LABEL_67;
        LOBYTE(v64[0]) = 0;
        if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(_QWORD *)this + 320))(this, v64, 1) != 1)
        {
          result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
          if (!result)
            return 0;
          goto LABEL_104;
        }
        *((_BYTE *)a3 + 105) = v64[0];
        goto LABEL_68;
      }
      v30 = (char *)malloc_type_malloc((unsigned __int16)v61, 0x7B5C10D3uLL);
      v31 = (*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, _QWORD))(*(_QWORD *)this + 320))(this, v30, (unsigned __int16)v61);
      if (v31 != (unsigned __int16)v61)
      {
        result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
        if (!result)
          return 0;
        goto LABEL_104;
      }
      MTLLibraryDataWithArchive::decodeSTCIToken(v30, (unsigned __int16)v61, (uint64_t)v64);
      v32 = v64[1];
      v59 = v64[0];
      std::vector<MTLUINT256_t>::__assign_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(v53, v64[1], v65, (uint64_t)(v65 - (unint64_t)v64[1]) >> 5);
      free(v30);
      if (v32)
        operator delete(v32);
LABEL_48:
      v60 = 1;
      goto LABEL_68;
    }
    if (v66 == 1415139397)
    {
      LOBYTE(v64[0]) = 0;
      if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char **, uint64_t))(*(_QWORD *)this + 320))(this, v64, 1) == 1)
      {
        if (LOBYTE(v64[0]) <= 8u && ((0x1F7u >> SLOBYTE(v64[0])) & 1) != 0)
        {
          *(_QWORD *)a4 = qword_18281A640[SLOBYTE(v64[0])];
          v17 |= 2u;
        }
        goto LABEL_68;
      }
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (result)
        goto LABEL_104;
      return 0;
    }
    if (v66 != 1447383635)
      goto LABEL_67;
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t *, uint64_t))(*(_QWORD *)this + 320))(this, &v63, 8) != 8)
    {
      result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
      if (!result)
        return 0;
      goto LABEL_104;
    }
    *(_QWORD *)&a3->airMajorVersion = v63;
LABEL_68:
    v19 = v66;
  }
  while (v19 != 1162757204);
  if ((v17 & 0xF) == 0)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    MTLLibraryDataWithArchive::getFunctionAtOffset(result, v38, v39, v40, v41, v42, v43, v44);
    return 0;
  }
  a3->airScript = 0;
  if ((v60 & 1) != 0)
  {
    (*(void (**)(MTLLibraryDataWithArchive *, char *))(*(_QWORD *)this + 312))(this, &v59[*((_QWORD *)this + 75)]);
    v64[0] = 0;
    v62 = 0;
    v61 = 0;
    if (MTLLibraryDataWithArchive::extractScript(this, v64, &v62, &v61))
    {
      a3->airScript = (OS_dispatch_data *)dispatch_data_create(v64[0], v62, 0, 0);
      free(v64[0]);
    }
  }
  privateArgumentsOffset = a3->privateArgumentsOffset;
  a3->publicArgumentsOffset += *((_QWORD *)this + 24);
  a3->privateArgumentsOffset = privateArgumentsOffset + *((_QWORD *)this + 26);
  a3->bitCodeOffset += *((_QWORD *)this + 28);
  return 1;
}

void sub_182771250(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL MTLLibraryDataWithArchive::getFunctionNameAndAliasWithHash(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  unint64_t v8;
  _BOOL8 FunctionAtOffset;
  id v10;
  void **v11;
  uint64_t v12;
  id v13;
  void **v14;
  uint64_t v15;
  _BYTE v17[8];
  void *v18[2];
  void *v19[2];
  __int128 v20;
  void *__p[2];
  uint64_t v22;
  MTLFunctionData v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((_QWORD *)a1 + 40, a2);
  if (!v7)
    return 0;
  v8 = v7[6];
  v23.functionInputs = 0;
  v23.airScript = 0;
  v22 = 0;
  v20 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)v19 = 0u;
  FunctionAtOffset = MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v8, &v23, (MTLLibraryDataWithArchive::AdditionalFunctionData *)v17);
  if (FunctionAtOffset)
  {
    if (v23.airScript)
      dispatch_release((dispatch_object_t)v23.airScript);
    if (v23.functionInputs)
      dispatch_release((dispatch_object_t)v23.functionInputs);
    if (SHIBYTE(v19[0]) < 0)
    {
      if (v18[1])
        goto LABEL_9;
    }
    else if (HIBYTE(v19[0]))
    {
LABEL_9:
      v10 = objc_alloc(MEMORY[0x1E0CB3940]);
      if (SHIBYTE(v19[0]) >= 0)
        v11 = v18;
      else
        v11 = (void **)v18[0];
      v12 = objc_msgSend(v10, "initWithUTF8String:", v11);
LABEL_16:
      *a3 = v12;
      if (SHIBYTE(v20) < 0)
      {
        if ((_QWORD)v20)
          goto LABEL_18;
      }
      else if (HIBYTE(v20))
      {
LABEL_18:
        v13 = objc_alloc(MEMORY[0x1E0CB3940]);
        if (v20 >= 0)
          v14 = &v19[1];
        else
          v14 = (void **)v19[1];
        v15 = objc_msgSend(v13, "initWithUTF8String:", v14);
        goto LABEL_24;
      }
      v15 = 0;
LABEL_24:
      *a4 = v15;
      goto LABEL_25;
    }
    v12 = 0;
    goto LABEL_16;
  }
LABEL_25:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0)
    operator delete(v19[1]);
  if (SHIBYTE(v19[0]) < 0)
    operator delete(v18[0]);
  return FunctionAtOffset;
}

void sub_1827713F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData(MTLLibraryDataWithArchive::AdditionalFunctionData *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

dispatch_data_t MTLLibraryDataWithArchive::newBitCodeWithHash(MTLLibraryDataWithArchive *a1, unint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  NSObject *v5;
  dispatch_data_t subrange;
  _BYTE v8[8];
  void *v9[2];
  void *v10[2];
  __int128 v11;
  void *__p[2];
  uint64_t v13;
  MTLFunctionData v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((_QWORD *)a1 + 40, a2);
  if (!v3)
    return 0;
  v4 = v3[6];
  v13 = 0;
  v11 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)v10 = 0u;
  v14.functionInputs = 0;
  v14.airScript = 0;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v4, &v14, (MTLLibraryDataWithArchive::AdditionalFunctionData *)v8))
  {
    v5 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)a1 + 128))(a1);
    subrange = dispatch_data_create_subrange(v5, v14.bitCodeOffset, v14.bitCodeFileSize);
    if (v14.airScript)
      dispatch_release((dispatch_object_t)v14.airScript);
    if (v14.functionInputs)
      dispatch_release((dispatch_object_t)v14.functionInputs);
  }
  else
  {
    subrange = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  if (SHIBYTE(v10[0]) < 0)
    operator delete(v9[0]);
  return subrange;
}

void sub_182771560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newAirScriptedFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v8;
  unint64_t v9;
  id v10;
  void **v11;
  void *v12;
  _MTLFunctionInternal *v13;
  _MTLFunctionInternal *v14;
  _MTLFunctionInternal *v15;
  uint64_t v16;
  uint64_t v18;
  void *v19[2];
  void *v20[2];
  __int128 v21;
  void *__p[2];
  uint64_t v23;
  MTLFunctionData v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v8 = std::__hash_table<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,NSObject  {objcproto16OS_dispatch_data}*>>>::find<MTLUINT256_t>(a4, a2);
  if (!v8)
    return 0;
  v9 = v8[6];
  if (!v9)
    return 0;
  v24.functionInputs = 0;
  v24.airScript = 0;
  v23 = 0;
  v21 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)v20 = 0u;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v9, &v24, (MTLLibraryDataWithArchive::AdditionalFunctionData *)&v18))
  {
    v10 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (SHIBYTE(v20[0]) >= 0)
      v11 = v19;
    else
      v11 = (void **)v19[0];
    v12 = (void *)objc_msgSend(v10, "initWithUTF8String:", v11);
    v13 = [_MTLFunctionInternal alloc];
    v14 = -[_MTLFunctionInternal initWithName:type:libraryData:functionData:inheritedLibraryPath:device:](v13, "initWithName:type:libraryData:functionData:inheritedLibraryPath:device:", v12, v18, a1, &v24, a5, a3);
    v15 = v14;
    if (*((_QWORD *)a1 + 66))
    {
      if (v14)
      {
        v16 = -[_MTLFunctionInternal sourceArchiveOffset](v14, "sourceArchiveOffset");
        if (v16 != -1)
          -[_MTLFunctionInternal setSourceArchiveOffset:](v15, "setSourceArchiveOffset:", *((_QWORD *)a1 + 65) + v16);
      }
    }

  }
  else
  {
    v15 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  if (SHIBYTE(v20[0]) < 0)
    operator delete(v19[0]);
  return v15;
}

void sub_1827716EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::getInputListForStitchedFunction(MTLLibraryDataWithArchive *a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _BYTE v9[8];
  void *v10[2];
  void *v11[2];
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  MTLFunctionData v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v6 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((_QWORD *)a1 + 60, a2);
  if (!v6 || (v7 = v6[6]) == 0)
  {
    v8 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((_QWORD *)a1 + 40, a2);
    if (!v8)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    v7 = v8[6];
  }
  v15.functionInputs = 0;
  v15.airScript = 0;
  v14 = 0;
  v12 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v11 = 0u;
  MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v7, &v15, (MTLLibraryDataWithArchive::AdditionalFunctionData *)v9);
  if (v15.airScript)
    dispatch_release((dispatch_object_t)v15.airScript);
  if (v15.functionInputs)
    dispatch_release((dispatch_object_t)v15.functionInputs);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<MTLUINT256_t>::__init_with_size[abi:ne180100]<MTLUINT256_t*,MTLUINT256_t*>(a3, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[1]);
  if (SHIBYTE(v11[0]) < 0)
    operator delete(v10[0]);
}

void sub_18277182C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va);
  _Unwind_Resume(a1);
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newStitchedFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3)
{
  return MTLLibraryDataWithArchive::newAirScriptedFunction(a1, a2, a3, (_QWORD *)a1 + 60, 0);
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newSpecializedFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  return MTLLibraryDataWithArchive::newAirScriptedFunction(a1, a2, a4, (_QWORD *)a1 + 55, a3);
}

_MTLFunctionInternal *MTLLibraryDataWithArchive::newFunction(MTLLibraryDataWithArchive *a1, unint64_t *a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  id v8;
  void **v9;
  void *v10;
  _MTLFunctionInternal *v11;
  _MTLFunctionInternal *v12;
  _MTLFunctionInternal *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  void *__p[2];
  uint64_t v30;
  MTLFunctionData v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = std::__hash_table<HashKey,KeyHashFunction,std::equal_to<HashKey>,std::allocator<HashKey>>::find<HashKey>((_QWORD *)a1 + 40, a2);
  if (!v5)
    return 0;
  v6 = v5[6];
  v31.functionInputs = 0;
  v31.airScript = 0;
  v30 = 0;
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)v27 = 0u;
  if (MTLLibraryDataWithArchive::getFunctionAtOffset(a1, v6, &v31, (MTLLibraryDataWithArchive::AdditionalFunctionData *)&v25))
  {
    if (*((_QWORD *)a1 + 48))
    {
      v7 = std::__hash_table<std::__hash_value_type<std::string,DataBlock>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,DataBlock>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,DataBlock>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,DataBlock>>>::find<std::string>((_QWORD *)a1 + 45, (unsigned __int8 *)v26);
      if (v7)
      {
        v31.airScript = (OS_dispatch_data *)*((_QWORD *)v7 + 5);
        std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::erase((_QWORD *)a1 + 45, (uint64_t *)v7);
      }
    }
    v8 = objc_alloc(MEMORY[0x1E0CB3940]);
    if (SHIBYTE(v27[0]) >= 0)
      v9 = v26;
    else
      v9 = (void **)v26[0];
    v10 = (void *)objc_msgSend(v8, "initWithUTF8String:", v9);
    v11 = [_MTLFunctionInternal alloc];
    v12 = -[_MTLFunctionInternal initWithName:type:libraryData:functionData:device:](v11, "initWithName:type:libraryData:functionData:device:", v10, v25, a1, &v31, a3);
    v13 = v12;
    if (*((_QWORD *)a1 + 53))
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)a1 + 54);
      v23 = *((_QWORD *)a1 + 53);
      v24 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      -[_MTLFunctionInternal setTrackingData:](v12, "setTrackingData:", &v23);
      v17 = v24;
      if (v24)
      {
        v18 = (unint64_t *)&v24->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    if (*((_QWORD *)a1 + 66))
      v20 = v13 == 0;
    else
      v20 = 1;
    if (!v20)
    {
      v21 = -[_MTLFunctionInternal sourceArchiveOffset](v13, "sourceArchiveOffset");
      if (v21 != -1)
        -[_MTLFunctionInternal setSourceArchiveOffset:](v13, "setSourceArchiveOffset:", *((_QWORD *)a1 + 65) + v21);
    }

  }
  else
  {
    v13 = 0;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[1]);
  if (SHIBYTE(v27[0]) < 0)
    operator delete(v26[0]);
  return v13;
}

void sub_182771A68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  MTLLibraryDataWithArchive::AdditionalFunctionData::~AdditionalFunctionData((MTLLibraryDataWithArchive::AdditionalFunctionData *)va1);
  _Unwind_Resume(a1);
}

NSObject *MTLLibraryDataWithArchive::newMetalScript(MTLLibraryDataWithArchive *this)
{
  NSObject *result;

  result = *((_QWORD *)this + 79);
  if (result)
  {
    dispatch_retain(result);
    return *((_QWORD *)this + 79);
  }
  return result;
}

dispatch_data_t MTLLibraryDataWithArchive::handleMetalScript(MTLLibraryDataWithArchive *this, char *buffer, size_t size)
{
  unsigned int v3;
  NSObject *v6;
  dispatch_data_t result;

  v3 = size;
  v6 = *((_QWORD *)this + 79);
  if (v6)
    dispatch_release(v6);
  result = dispatch_data_create(buffer, v3, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
  *((_QWORD *)this + 79) = result;
  return result;
}

uint64_t MTLLibraryDataWithArchive::serializeSpecFunctionScript(MTLLibraryDataWithArchive *a1, _QWORD *a2, NSError **a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSError *v15;
  int v16;
  size_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  size_t v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  int v36;
  size_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void *v43;
  unsigned int v44;
  unsigned __int8 v45;
  size_t v46;
  unint64_t v47;
  int v48;
  void **v49;
  uint64_t v50;
  void **p_s1;
  int v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int *v58;
  _QWORD *v59;
  void *__p[2];
  unsigned __int8 v61;
  void *__s1;
  size_t __n;
  unsigned __int8 v64;
  unsigned int v65;
  char *v66;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v66 = 0;
  v65 = 0;
  v5 = 0;
  if (MTLLibraryDataWithArchive::extractScript(a1, &v66, &v65, a3))
  {
    v6 = v66;
    v7 = &v66[*(unsigned int *)v66];
    v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 < 9u || (v9 = *((unsigned __int16 *)v8 + 4)) == 0)
    {
      if (!a3)
      {
        v5 = 0;
LABEL_95:
        free(v6);
        return v5;
      }
      v14 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid script file, constant specialization script missing or invalid"), *MEMORY[0x1E0CB2D50]);
      v15 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v14);
      v5 = 0;
      *a3 = v15;
LABEL_94:
      v6 = v66;
      goto LABEL_95;
    }
    v10 = &v7[v9 + *(unsigned int *)&v7[v9]];
    v11 = &v10[-*(int *)v10];
    v58 = (int *)v10;
    if (*(unsigned __int16 *)v11 > 8u && (v12 = *((unsigned __int16 *)v11 + 4)) != 0)
      v13 = &v10[v12 + *(unsigned int *)&v10[v12]];
    else
      v13 = 0;
    v59 = a2;
    v16 = *(_DWORD *)v13;
    v17 = (20 * *(_DWORD *)v13) + 4;
    v18 = malloc_type_malloc(v17, 0xFA8FEB0CuLL);
    *v18 = v16;
    if (*(_DWORD *)v13)
    {
      v19 = 0;
      v20 = 4;
      while (1)
      {
        v21 = &v13[4 * v19 + 4 + *(unsigned int *)&v13[4 * v19 + 4]];
        v22 = &v21[-*(int *)v21];
        if (*(unsigned __int16 *)v22 >= 5u && (v23 = *((unsigned __int16 *)v22 + 2)) != 0)
        {
          v24 = *(unsigned __int16 *)&v21[v23];
          v25 = v24 >> 8;
        }
        else
        {
          LOBYTE(v24) = 0;
          LOBYTE(v25) = 0;
        }
        if (v20 >= 0xFFFFFFFFFFFFFFFELL)
          abort();
        v26 = v20 + 2;
        if (v17 < v20 + 2)
        {
          if (!v17)
            v17 = 128;
          while (v17 < v26)
          {
            if (v17 >> 1 >= ~v17)
              v17 = v20 + 2;
            else
              v17 += v17 >> 1;
          }
          v18 = malloc_type_realloc(v18, v17, 0x227314A4uLL);
          if (!v18)
            abort();
        }
        v27 = (char *)v18 + v20;
        *v27 = v24;
        v27[1] = v25;
        v28 = &v21[-*(int *)v21];
        if (*(unsigned __int16 *)v28 >= 7u && (v29 = *((unsigned __int16 *)v28 + 3)) != 0)
          v30 = v21[v29];
        else
          v30 = 0;
        if (v20 == -3)
          abort();
        v31 = v20 + 3;
        if (v17 <= v26)
        {
          if (!v17)
            v17 = 128;
          while (v17 <= v26)
          {
            if (v17 >> 1 >= ~v17)
              v17 = v20 + 3;
            else
              v17 += v17 >> 1;
          }
          v18 = malloc_type_realloc(v18, v17, 0x227314A4uLL);
          if (!v18)
            abort();
        }
        *((_BYTE *)v18 + v26) = v30;
        v32 = &v21[-*(int *)v21];
        v33 = *(unsigned __int16 *)v32;
        if (v33 >= 9)
          break;
        if (v33 >= 7)
          goto LABEL_43;
LABEL_63:
        ++v19;
        v20 = v31;
        if (v19 >= *(unsigned int *)v13)
          goto LABEL_66;
      }
      if (*((_WORD *)v32 + 4))
        v34 = &v21[*((unsigned __int16 *)v32 + 4) + *(unsigned int *)&v21[*((unsigned __int16 *)v32 + 4)]];
      else
LABEL_43:
        v34 = 0;
      v35 = *((unsigned __int16 *)v32 + 3);
      if (v35)
      {
        v36 = v21[v35] - 3;
        v37 = 4;
        switch(v36)
        {
          case 0:
          case 14:
          case 26:
          case 30:
          case 35:
          case 39:
          case 45:
          case 49:
          case 53:
            goto LABEL_55;
          case 1:
          case 16:
          case 27:
          case 31:
          case 37:
          case 41:
          case 78:
          case 82:
            v37 = 8;
            goto LABEL_55;
          case 2:
          case 28:
          case 32:
            v37 = 12;
            goto LABEL_55;
          case 3:
          case 29:
          case 33:
          case 79:
          case 83:
            v37 = 16;
            goto LABEL_55;
          case 13:
          case 34:
          case 38:
          case 43:
          case 47:
          case 51:
            v37 = 2;
            goto LABEL_55;
          case 15:
          case 36:
          case 40:
            v37 = 6;
            goto LABEL_55;
          case 42:
          case 46:
          case 50:
            v37 = 1;
            goto LABEL_55;
          case 44:
          case 48:
          case 52:
            v37 = 3;
            goto LABEL_55;
          case 80:
          case 84:
            v37 = 24;
            goto LABEL_55;
          case 81:
          case 85:
            v37 = 32;
LABEL_55:
            if (-4 - v20 < v37)
              abort();
            if (v17 < v37 + v31)
            {
              do
              {
                if (v17 >> 1 >= ~v17)
                  v17 = v37 + v31;
                else
                  v17 += v17 >> 1;
              }
              while (v17 < v37 + v31);
              v18 = malloc_type_realloc(v18, v17, 0x227314A4uLL);
              if (!v18)
                abort();
            }
            memcpy((char *)v18 + v31, v34, v37);
            v31 += v37;
            break;
          default:
            goto LABEL_63;
        }
      }
      goto LABEL_63;
    }
    v31 = 4;
LABEL_66:
    *v59 = v18;
    v59[1] = v31;
    v38 = (unsigned __int16 *)((char *)v58 - *v58);
    if (*v38 < 7u)
      goto LABEL_93;
    v39 = v38[3];
    if (!v38[3])
      goto LABEL_93;
    v40 = (char *)v58 + v39;
    v41 = *(unsigned int *)((char *)v58 + v39);
    std::string::basic_string[abi:ne180100](&__s1, (char *)v58 + v38[2] + *(unsigned int *)((char *)v58 + v38[2]) + 4, *(unsigned int *)((char *)v58 + v38[2] + *(unsigned int *)((char *)v58 + v38[2])));
    v42 = &v40[v41];
    v44 = *(_DWORD *)v42;
    v43 = v42 + 4;
    std::string::basic_string[abi:ne180100](__p, v43, v44);
    v45 = v64;
    if ((v64 & 0x80u) == 0)
      v46 = v64;
    else
      v46 = __n;
    v47 = v61;
    v48 = (char)v61;
    if ((v61 & 0x80u) != 0)
      v47 = (unint64_t)__p[1];
    if (v46 == v47)
    {
      if ((v61 & 0x80u) == 0)
        v49 = __p;
      else
        v49 = (void **)__p[0];
      if ((char)v64 < 0)
      {
        v55 = memcmp(__s1, v49, __n) != 0;
      }
      else if (v64)
      {
        v50 = v64 - 1;
        p_s1 = &__s1;
        do
        {
          v53 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v52 = v53;
          v54 = *(unsigned __int8 *)v49;
          v49 = (void **)((char *)v49 + 1);
          v55 = v52 != v54;
        }
        while (v52 == v54 && v50-- != 0);
      }
      else
      {
        v55 = 0;
      }
    }
    else
    {
      v55 = 1;
    }
    if (v48 < 0)
    {
      operator delete(__p[0]);
      if ((v64 & 0x80) == 0)
      {
LABEL_91:
        if (v55)
LABEL_92:
          v59[2] = strdup((const char *)v43);
LABEL_93:
        v5 = 1;
        goto LABEL_94;
      }
    }
    else if ((v45 & 0x80) == 0)
    {
      goto LABEL_91;
    }
    operator delete(__s1);
    if (!v55)
      goto LABEL_93;
    goto LABEL_92;
  }
  return v5;
}

void sub_182772064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  free(0);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::extractFlatbuffer(MTLLibraryDataWithArchive *this, char **a2, unsigned int *a3, NSError **a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  const __CFString *v21;
  uint64_t v22;
  NSError *v23;
  uint64_t v24;
  uint64_t v25;

  *a2 = 0;
  *a3 = 0;
  v25 = 0;
  while (1)
  {
    if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(_QWORD *)this + 320))(this, (char *)&v25 + 4, 4) != 4)
    {
LABEL_19:
      if (a4)
      {
        v19 = (void *)MEMORY[0x1E0C99D80];
        v20 = *MEMORY[0x1E0CB2D50];
        v21 = CFSTR("Invalid library file/data (unexpected end of file)");
LABEL_21:
        v22 = objc_msgSend(v19, "dictionaryWithObject:forKey:", v21, v20);
        v23 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v22);
        result = 0;
        *a4 = v23;
        return result;
      }
      return 0;
    }
    v8 = HIDWORD(v25);
    v9 = bswap32(HIDWORD(v25));
    HIDWORD(v25) = v9;
    if (v8 != 1413762629)
      break;
LABEL_17:
    if (v9 == 1162757204)
      return 1;
  }
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t *, uint64_t))(*(_QWORD *)this + 320))(this, &v25, 4) != 4)goto LABEL_19;
  if (HIDWORD(v25) != 1380078918 && HIDWORD(v25) != 1396856134)
  {
    if (HIDWORD(v25) == 1162757204)
      return 1;
    v10 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
    if (((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, v10 + v25) & 1) == 0)
    {
      if (a4)
      {
        v19 = (void *)MEMORY[0x1E0C99D80];
        v20 = *MEMORY[0x1E0CB2D50];
        v21 = CFSTR("Invalid library file (unexpected end of file)");
        goto LABEL_21;
      }
      return 0;
    }
    goto LABEL_16;
  }
  v11 = (*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 336))(this);
  result = 0;
  v13 = v11 + 15;
  v14 = v11 >= 0xFFFFFFFFFFFFFFF1;
  v15 = v14 << 63 >> 63;
  if (v15 != v14 || v15 < 0)
    return result;
  v16 = v13 & 0xFFFFFFFFFFFFFFF0;
  v17 = (v13 & 0xFFFFFFFFFFFFFFF0) - v11;
  if (v17 > v25)
    return 0;
  v18 = (v25 - v17);
  if (malloc_type_posix_memalign((void **)a2, 0x10uLL, v18, 0xEF4C5D4BuLL))
    return 0;
  (*(void (**)(MTLLibraryDataWithArchive *, unint64_t))(*(_QWORD *)this + 312))(this, v16);
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, _QWORD, size_t))(*(_QWORD *)this + 320))(this, *a2, v18) == v18)
  {
    *a3 = v18;
LABEL_16:
    v9 = HIDWORD(v25);
    goto LABEL_17;
  }
  if (a4)
  {
    v24 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Invalid library file/data (unexpected end of file)"), *MEMORY[0x1E0CB2D50]);
    *a4 = (NSError *)(id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v24);
  }
  free(*a2);
  result = 0;
  *a2 = 0;
  return result;
}

dispatch_data_t MTLLibraryDataWithArchive::newFunctionReflectionData(MTLLibraryDataWithArchive *this, uint64_t a2)
{
  int v3;
  dispatch_data_t v4;
  NSError *v6;
  unsigned int size[3];

  (*(void (**)(MTLLibraryDataWithArchive *, uint64_t))(*(_QWORD *)this + 312))(this, *((_QWORD *)this + 75) + a2);
  memset(size, 0, sizeof(size));
  v6 = 0;
  v3 = MTLLibraryDataWithArchive::extractFlatbuffer(this, (char **)&size[1], size, &v6);
  v4 = 0;
  if (v3)
  {
    v4 = dispatch_data_create(*(const void **)&size[1], size[0], 0, 0);
    free(*(void **)&size[1]);
  }
  return v4;
}

uint64_t MTLLibraryDataWithArchive::parseArchive(os_unfair_lock_s *a1, NSError **a2, int a3, void *a4)
{
  os_unfair_lock_s *v8;
  uint64_t v9;

  v8 = a1 + 21;
  os_unfair_lock_lock(a1 + 21);
  v9 = MTLLibraryDataWithArchive::parseArchiveSync((uint64_t)a1, a2, a3, a4);
  os_unfair_lock_unlock(v8);
  return v9;
}

void sub_18277246C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::allocateFunctionNames(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = this + 21;
  os_unfair_lock_lock(this + 21);
  if (!*(_QWORD *)&this[32]._os_unfair_lock_opaque)
  {
    os_unfair_lock_opaque = this[76]._os_unfair_lock_opaque;
    v4 = operator new[]();
    v5 = *(uint64_t **)&this[74]._os_unfair_lock_opaque;
    if (v5)
    {
      v6 = 0;
      do
      {
        v7 = objc_alloc(MEMORY[0x1E0CB3940]);
        v8 = v5 + 2;
        if (*((char *)v5 + 39) < 0)
          v8 = (_QWORD *)*v8;
        *(_QWORD *)(v4 + 8 * v6++) = objc_msgSend(v7, "initWithUTF8String:", v8);
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    v9 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v4, os_unfair_lock_opaque);
    v10 = objc_opt_new();
    if (os_unfair_lock_opaque)
    {
      v11 = (id *)v4;
      do
      {

        *v11++ = 0;
        --os_unfair_lock_opaque;
      }
      while (os_unfair_lock_opaque);
    }
    if (LOBYTE(this[154]._os_unfair_lock_opaque))
      v12 = v10;
    else
      v12 = v9;
    if (LOBYTE(this[154]._os_unfair_lock_opaque))
      v13 = v9;
    else
      v13 = v10;
    *(_QWORD *)&this[32]._os_unfair_lock_opaque = v12;
    *(_QWORD *)&this[62]._os_unfair_lock_opaque = v13;
    MEMORY[0x186DABFA4](v4, 0x80C80B8603338);
  }
  os_unfair_lock_unlock(v2);
}

void sub_18277259C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::libraryPath(MTLLibraryDataWithArchive *this)
{
  return *((_QWORD *)this + 80);
}

uint64_t MTLLibraryDataWithArchive::specializationHashes(MTLLibraryDataWithArchive *this)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *i;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  id *v18;
  id *v19;
  char *v21;
  char *v22;
  char *v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 32);
  if (!v1)
  {
    v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    v1 = *((_QWORD *)this + 32);
    if (!v1)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v21, *((_QWORD *)this + 58));
      for (i = (uint64_t *)*((_QWORD *)this + 57); i; i = (uint64_t *)*i)
      {
        v5 = *((_OWORD *)i + 2);
        v24[0] = *((_OWORD *)i + 1);
        v24[1] = v5;
        v25 = i[6];
        v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B18]), "initWithBytes:objCType:", v24, "{?=[32C]}");
        v7 = v6;
        v8 = v22;
        if (v22 >= v23)
        {
          v10 = (v22 - v21) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v11 = (v23 - v21) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v23, v12);
          else
            v13 = 0;
          v14 = (uint64_t *)&v13[8 * v10];
          *v14 = v7;
          v9 = (char *)(v14 + 1);
          v16 = v21;
          v15 = v22;
          if (v22 != v21)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *--v14 = v17;
            }
            while (v15 != v16);
            v15 = v21;
          }
          v21 = (char *)v14;
          v22 = v9;
          v23 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v22 = v6;
          v9 = v8 + 8;
        }
        v22 = v9;
      }
      v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:");
      *((_QWORD *)this + 32) = v1;
      v18 = (id *)v21;
      v19 = (id *)v22;
      if (v21 != v22)
      {
        do

        while (v18 != v19);
        v1 = *((_QWORD *)this + 32);
        v18 = (id *)v21;
      }
      if (v18)
      {
        v22 = (char *)v18;
        operator delete(v18);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_1827727D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  if (__p)
    operator delete(__p);
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::stitchingHashes(MTLLibraryDataWithArchive *this)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t *i;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  id *v18;
  id *v19;
  char *v21;
  char *v22;
  char *v23;
  _OWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 34);
  if (!v1)
  {
    v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    v1 = *((_QWORD *)this + 34);
    if (!v1)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v21, *((_QWORD *)this + 63));
      for (i = (uint64_t *)*((_QWORD *)this + 62); i; i = (uint64_t *)*i)
      {
        v5 = *((_OWORD *)i + 2);
        v24[0] = *((_OWORD *)i + 1);
        v24[1] = v5;
        v25 = i[6];
        v6 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B18]), "initWithBytes:objCType:", v24, "{?=[32C]}");
        v7 = v6;
        v8 = v22;
        if (v22 >= v23)
        {
          v10 = (v22 - v21) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v11 = (v23 - v21) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v23 - v21) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v23, v12);
          else
            v13 = 0;
          v14 = (uint64_t *)&v13[8 * v10];
          *v14 = v7;
          v9 = (char *)(v14 + 1);
          v16 = v21;
          v15 = v22;
          if (v22 != v21)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *--v14 = v17;
            }
            while (v15 != v16);
            v15 = v21;
          }
          v21 = (char *)v14;
          v22 = v9;
          v23 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v22 = v6;
          v9 = v8 + 8;
        }
        v22 = v9;
      }
      v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:");
      *((_QWORD *)this + 34) = v1;
      v18 = (id *)v21;
      v19 = (id *)v22;
      if (v21 != v22)
      {
        do

        while (v18 != v19);
        v1 = *((_QWORD *)this + 34);
        v18 = (id *)v21;
      }
      if (v18)
      {
        v22 = (char *)v18;
        operator delete(v18);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_182772A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  if (__p)
    operator delete(__p);
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryDataWithArchive::functionHashes(MTLLibraryDataWithArchive *this)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  id *v17;
  id *v18;
  char *v20;
  char *v21;
  char *v22;

  v1 = *((_QWORD *)this + 33);
  if (!v1)
  {
    v3 = (os_unfair_lock_s *)((char *)this + 84);
    os_unfair_lock_lock((os_unfair_lock_t)this + 21);
    v1 = *((_QWORD *)this + 33);
    if (!v1)
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      std::vector<MTLSerializer::ObjectRef>::reserve((void **)&v20, *((_QWORD *)this + 43));
      for (i = (_QWORD *)*((_QWORD *)this + 42); i; i = (_QWORD *)*i)
      {
        v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B18]), "initWithBytes:objCType:", i + 2, "{?=[32C]}");
        v6 = v5;
        v7 = v21;
        if (v21 >= v22)
        {
          v9 = (v21 - v20) >> 3;
          if ((unint64_t)(v9 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v10 = (v22 - v20) >> 2;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if ((unint64_t)(v22 - v20) >= 0x7FFFFFFFFFFFFFF8)
            v11 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          if (v11)
            v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v22, v11);
          else
            v12 = 0;
          v13 = (uint64_t *)&v12[8 * v9];
          *v13 = v6;
          v8 = (char *)(v13 + 1);
          v15 = v20;
          v14 = v21;
          if (v21 != v20)
          {
            do
            {
              v16 = *((_QWORD *)v14 - 1);
              v14 -= 8;
              *--v13 = v16;
            }
            while (v14 != v15);
            v14 = v20;
          }
          v20 = (char *)v13;
          v21 = v8;
          v22 = &v12[8 * v11];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_QWORD *)v21 = v5;
          v8 = v7 + 8;
        }
        v21 = v8;
      }
      v1 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:");
      *((_QWORD *)this + 33) = v1;
      v17 = (id *)v20;
      v18 = (id *)v21;
      if (v20 != v21)
      {
        do

        while (v17 != v18);
        v1 = *((_QWORD *)this + 33);
        v17 = (id *)v20;
      }
      if (v17)
      {
        v21 = (char *)v17;
        operator delete(v17);
      }
    }
    os_unfair_lock_unlock(v3);
  }
  return v1;
}

void sub_182772C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  os_unfair_lock_s *v11;

  if (__p)
    operator delete(__p);
  os_unfair_lock_unlock(v11);
  _Unwind_Resume(a1);
}

void MTLLibraryDataWithArchive::readFunctionSourceArchiveMetadata(MTLLibraryDataWithArchive *this, unint64_t a2, _MTLFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(MTLLibraryDataWithArchive *))(*(_QWORD *)this + 312))(this) & 1) == 0)
  {
    MTLReportFailure(0, "readFunctionSourceArchiveMetadata", 5946, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v11, v12, v13, v14, a9);
    return;
  }
  HIDWORD(v28[0]) = 0;
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, uint64_t))(*(_QWORD *)this + 320))(this, (char *)v28 + 4, 4) != 4)
  {
    v27 = 5951;
LABEL_14:
    MTLReportFailure(0, "readFunctionSourceArchiveMetadata", v27, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v15, v16, v17, v18, v28[0]);
    return;
  }
  LODWORD(v28[0]) = 0;
  HIDWORD(v28[0]) = bswap32(HIDWORD(v28[0]));
  if ((*(uint64_t (**)(MTLLibraryDataWithArchive *, uint64_t *, uint64_t))(*(_QWORD *)this + 320))(this, v28, 4) != 4)
  {
    v27 = 5957;
    goto LABEL_14;
  }
  MEMORY[0x1E0C80A78](4);
  v20 = (char *)v28 - ((v19 + 15) & 0x1FFFFFFF0);
  v21 = (*(uint64_t (**)(MTLLibraryDataWithArchive *, char *, _QWORD))(*(_QWORD *)this + 320))(this, v20, LODWORD(v28[0]));
  if (v21 == LODWORD(v28[0]))
  {
    if (LODWORD(v28[0]))
    {
      v26 = 0;
      while (v20[v26])
      {
        if (LODWORD(v28[0]) == (_DWORD)++v26)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v20 = 0;
    }
    -[_MTLFunction setUnpackedFilePath:](a3, "setUnpackedFilePath:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v20), "stringByAppendingPathComponent:", -[_MTLFunction filePath](a3, "filePath")), "stringByStandardizingPath"));
  }
  else
  {
    MTLReportFailure(0, "readFunctionSourceArchiveMetadata", 5960, (uint64_t)CFSTR("Invalid library file/data (unexpected end of file)"), v22, v23, v24, v25, v28[0]);
  }
}

MTLStructType *typeFromBuffer(MTLDataType a1, const char *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  MTLDataType v16;
  unsigned int v17;
  void *v18;
  MTLArrayType *v19;
  MTLArrayType *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  MTLDataType v24;
  void *v25;
  uint64_t IsIndirectArgumentBuffer;
  uint64_t v27;

  if ((uint64_t)a1 <= (uint64_t)(MTLDataTypeBool4|MTLDataTypeStruct))
  {
    if (a1 == MTLDataTypeStruct)
      return initStructType(a2, a3, a4);
    if (a1 == MTLDataTypeArray)
    {
      v4 = *a3;
      v5 = v4 + 4;
      if (v4 + 4 <= (unint64_t)a4)
      {
        v6 = *(unsigned int *)&a2[v4];
        v7 = v4 + 4;
        *a3 = v5;
        v4 = (v4 + 4);
        v5 = v5 + 4;
      }
      else
      {
        v6 = 0;
        v7 = *a3;
      }
      if (v5 <= a4)
      {
        v13 = *(unsigned int *)&a2[v4];
        *a3 = v5;
        v7 = v5;
      }
      else
      {
        v13 = 0;
      }
      if (v7 >= a4)
      {
        v16 = MTLDataTypeNone;
      }
      else
      {
        v16 = (unint64_t)a2[v7];
        *a3 = v7 + 1;
      }
      v18 = (void *)typeFromBuffer(v16, a2, a3, a4);
      v19 = -[MTLArrayType initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayType alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", v6, v16, v13, 0, 0, v18);

      return (MTLStructType *)v19;
    }
    return (MTLStructType *)-[MTLType initWithDataType:]([MTLType alloc], "initWithDataType:", a1);
  }
  if (a1 == MTLDataTypePointer)
  {
    v11 = *a3;
    if (v11 >= a4)
    {
      v12 = 0;
    }
    else
    {
      v12 = a2[v11];
      LODWORD(v11) = v11 + 1;
      *a3 = v11;
    }
    if (v11 >= a4)
    {
      v21 = 0;
    }
    else
    {
      v21 = a2[v11];
      LODWORD(v11) = v11 + 1;
      *a3 = v11;
    }
    v22 = v11 + 8;
    if (v22 <= a4)
    {
      v23 = *(unsigned __int16 *)&a2[v11];
      *a3 = v22;
      LODWORD(v11) = v11 + 8;
    }
    else
    {
      v23 = 0;
    }
    if (v11 >= a4)
    {
      v24 = MTLDataTypeNone;
    }
    else
    {
      v24 = (unint64_t)a2[v11];
      *a3 = v11 + 1;
    }
    v25 = (void *)typeFromBuffer(v24, a2, a3, a4);
    if (objc_msgSend(v25, "dataType") == 1)
      IsIndirectArgumentBuffer = structIsIndirectArgumentBuffer((uint64_t)v25);
    else
      IsIndirectArgumentBuffer = 0;
    LOBYTE(v27) = 0;
    v19 = -[MTLPointerType initWithElementType:elementTypeDescription:access:alignment:dataSize:elementIsIndirectArgumentBuffer:isConstantBuffer:]([MTLPointerType alloc], "initWithElementType:elementTypeDescription:access:alignment:dataSize:elementIsIndirectArgumentBuffer:isConstantBuffer:", v24, v25, v12, v21, v23, IsIndirectArgumentBuffer, v27);

    return (MTLStructType *)v19;
  }
  if (a1 != MTLDataTypeTexture)
    return (MTLStructType *)-[MTLType initWithDataType:]([MTLType alloc], "initWithDataType:", a1);
  v8 = *a3;
  if (v8 >= a4)
  {
    v9 = 0;
  }
  else
  {
    v9 = a2[v8];
    LODWORD(v8) = v8 + 1;
    *a3 = v8;
  }
  v14 = v8 + 4;
  if (v14 <= a4)
  {
    v15 = *(_DWORD *)&a2[v8];
    *a3 = v14;
    LODWORD(v8) = v8 + 4;
  }
  else
  {
    v15 = 0;
  }
  if (v8 >= a4)
  {
    v17 = 0;
  }
  else
  {
    v17 = a2[v8];
    *a3 = v8 + 1;
  }
  v19 = -[MTLTextureReferenceType initWithDataType:textureType:access:isDepthTexture:]([MTLTextureReferenceType alloc], "initWithDataType:textureType:access:isDepthTexture:", v9, v17 & 0x1F, (v17 >> 5) & 3, v17 >> 7);
  if (v15 >= 2)
  {
    v20 = -[MTLArrayType initWithArrayLength:elementType:stride:pixelFormat:aluType:details:]([MTLArrayType alloc], "initWithArrayLength:elementType:stride:pixelFormat:aluType:details:", v15, 58, 0, 0, 0, v19);

    return (MTLStructType *)v20;
  }
  return (MTLStructType *)v19;
}

void MTLLibraryDataWithSource::readFunctionMetadata(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  unsigned int *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __objc2_class **v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[2];
  unsigned int *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a4 == 1)
  {
    v4 = (unsigned int *)(*(_QWORD *)(a1 + 152) + a2);
    v5 = *(_QWORD *)(a1 + 160) - a2;
    v36 = v4;
    v37 = v5;
    if (v5)
      v6 = v5 > 3;
    else
      v6 = 0;
    if (!v6)
      goto LABEL_41;
    v8 = *v4;
    v38 = 4;
    v9 = 8 * v8;
    MEMORY[0x1E0C80A78](a1);
    if ((_DWORD)v10)
    {
      v35[0] = v10;
      v35[1] = v35;
      v11 = 0;
      do
      {
        v12 = DeserialContext::stringFromSerializedData((DeserialContext *)&v36);
        v13 = v38;
        if (v37 <= v38 || v37 - v38 <= 3)
          goto LABEL_41;
        v15 = *(unsigned int *)((char *)v36 + v38);
        v38 += 4;
        if (v37 <= v13 + 4 || v37 - (v13 + 4) <= 3)
          goto LABEL_41;
        v17 = v12;
        v18 = *(unsigned int *)((char *)v36 + v13 + 4);
        v38 = v13 + 8;
        v19 = (v15 >> 29) & 2 | (v15 >> 31) | (v15 >> 27) & 4;
        v20 = v15 & 0x1FFFFFFF;
        if (objc_msgSend(a3, "functionType") == 1)
          v21 = off_1E0FDDA98;
        else
          v21 = off_1E0FDD6A8;
        *(_QWORD *)((char *)&v35[v11 / 8] - ((v9 + 15) & 0xFFFFFFFF0)) = (id)objc_msgSend(objc_alloc(*v21), "initWithName:attributeIndex:attributeType:flags:", v17, v20, v18, v19);
        v11 += 8;
      }
      while (v9 != v11);
      if (LODWORD(v35[0]))
      {
        v22 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", (char *)v35 - ((v9 + 15) & 0xFFFFFFFF0), v35[0]);
        objc_msgSend(a3, "setVertexAttributes:", v22);

      }
    }
    if (v37 <= v38 || v37 - v38 <= 3)
LABEL_41:
      abort();
    v23 = *(unsigned int *)((char *)v36 + v38);
    v38 += 4;
    if ((_DWORD)v23)
    {
      v24 = 8 * v23;
      v25 = operator new[]();
      v26 = 0;
      do
      {
        v27 = DeserialContext::stringFromSerializedData((DeserialContext *)&v36);
        v28 = v38;
        if (v38 >= v37)
          goto LABEL_41;
        v29 = *((unsigned __int8 *)v36 + v38++);
        if (v37 <= v28 + 1 || v37 - (v28 + 1) <= 3)
          goto LABEL_41;
        v31 = *(unsigned int *)((char *)v36 + v28 + 1);
        v38 = v28 + 5;
        if (v28 + 5 >= v37)
          goto LABEL_41;
        v32 = *((unsigned __int8 *)v36 + v28 + 5);
        v38 = v28 + 6;
        *(_QWORD *)(v25 + v26) = -[MTLFunctionConstantInternal initWithName:type:index:required:]([MTLFunctionConstantInternal alloc], "initWithName:type:index:required:", v27, v29, v31, v32 != 0);
        v26 += 8;
      }
      while (v24 != v26);
      v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:count:", v25, v23);
      objc_msgSend(a3, "setFunctionConstants:", v33);
      v34 = 0;
      do
      {

        v34 += 8;
      }
      while (v24 != v34);

      MEMORY[0x186DABFA4](v25, 0x80C80B8603338);
    }
  }
}

_MTLLibrary *MTLLibraryContainer::newLibrary(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 48))
    return -[_MTLLibrary initWithLibraryContainer:device:]([_MTLLibrary alloc], "initWithLibraryContainer:device:", a1, a2);
  else
    return 0;
}

uint64_t _MTLGetLibrariesCache(_MTLDevice *a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZL21_MTLGetLibrariesCacheP10_MTLDevice_block_invoke;
  block[3] = &unk_1E0FE2880;
  block[4] = a1;
  if (_MTLGetLibrariesCache(_MTLDevice *)::onceToken != -1)
    dispatch_once(&_MTLGetLibrariesCache(_MTLDevice *)::onceToken, block);
  return _MTLGetLibrariesCache(_MTLDevice *)::gLibrariesCache;
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithProxyData(MTLLibraryBuilder *a1, __int128 *a2, _QWORD *a3, void *a4)
{
  uint64_t v8;
  MTLLibraryContainer *v9;
  MTLLibraryData *v10;
  NSMutableDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _MTLLibrary *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v21 = 0;
  v8 = MTLLibraryBuilder::findOrCreateLibraryContainer((uint64_t)a1, a2, &v21);
  v9 = (MTLLibraryContainer *)v8;
  if (!v21)
  {
    dispatch_group_wait(*(dispatch_group_t *)(v8 + 80), 0xFFFFFFFFFFFFFFFFLL);
    if (v9->var3)
    {
      v15 = -[_MTLLibrary initWithLibraryContainer:device:]([_MTLLibrary alloc], "initWithLibraryContainer:device:", v9, *((_QWORD *)a1 + 4));
      if (!a3)
      {
LABEL_14:
        MTLLibraryBuilder::releaseCacheEntry(a1, v9);
        return v15;
      }
    }
    else
    {
      v15 = 0;
      if (!a3)
        goto LABEL_14;
    }
    *a3 = (id)objc_msgSend(v9->var8, "copy");
    goto LABEL_14;
  }
  v10 = (MTLLibraryData *)operator new();
  MTLProxyLibraryData::MTLProxyLibraryData((uint64_t)v10, a4, a2);
  v11 = (NSMutableDictionary *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(a4, "count"));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v12 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v12)
  {
    v13 = *(_QWORD *)v18;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v18 != v13)
          objc_enumerationMutation(a4);
        -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * v14), objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v14), "name"));
        ++v14;
      }
      while (v12 != v14);
      v12 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v12);
  }
  MTLLibraryContainer::init(v9, v10, v11, 0, 0);
  if (v9->var3)
    v15 = -[_MTLLibrary initWithLibraryContainer:device:]([_MTLLibrary alloc], "initWithLibraryContainer:device:", v9, *((_QWORD *)a1 + 4));
  else
    v15 = 0;

  (*(void (**)(MTLLibraryData *))(*(_QWORD *)v10 + 24))(v10);
  if (a3)
    *a3 = (id)objc_msgSend(v9->var8, "copy");
  MTLLibraryBuilder::releaseCacheEntry(a1, v9);
  return v15;
}

void sub_182773758(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10A1C40B3CF1B9ELL);
  _Unwind_Resume(a1);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithData(_MTLDevice **a1, _MTLDevice *a2, NSObject *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  NSObject *map;
  void *v15;
  CC_LONG v16;
  _MTLLibrary *result;
  const __CFString *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *buffer_ptr;
  CC_SHA256_CTX c;
  _QWORD v26[9];
  __int128 v27;
  __int128 v28;
  unsigned __int8 md[16];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a5)
    *a5 = 0;
  if (!a2)
  {
    v18 = CFSTR("device must not be nil.");
    v19 = 0;
    v20 = 6266;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v18 = CFSTR("device is not a MTLDevice.");
    v19 = 1;
    v20 = 6269;
LABEL_9:
    MTLReportFailure(v19, "newLibraryWithData", v20, (uint64_t)v18, (uint64_t)a5, a6, a7, a8, v23);
    if (a3)
      goto LABEL_6;
    goto LABEL_10;
  }
  if (a3)
  {
LABEL_6:
    v13 = _MTLGetLibrariesCache(a2);
    v23 = 0;
    buffer_ptr = 0;
    map = dispatch_data_create_map(a3, (const void **)&buffer_ptr, (size_t *)&v23);
    v15 = buffer_ptr;
    v16 = v23;
    *(_OWORD *)md = 0u;
    v30 = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v15, v16);
    CC_SHA256_Final(md, &c);
    dispatch_release(map);
    v26[1] = 3221225472;
    v27 = *(_OWORD *)md;
    v26[0] = MEMORY[0x1E0C809B0];
    v26[2] = ___ZN17MTLLibraryBuilder18newLibraryWithDataEPU19objcproto9MTLDevice11objc_objectPU27objcproto16OS_dispatch_data8NSObjectP8NSStringPP7NSError_block_invoke;
    v26[3] = &unk_1E0FE4288;
    v26[7] = a1;
    v26[8] = v13;
    v28 = v30;
    v26[4] = a3;
    v26[5] = a4;
    v26[6] = a2;
    return MTLLibraryBuilder::newLibraryWithArchive(a1, (__int128 *)md, a5, (uint64_t)v26);
  }
LABEL_10:
  if (!a5)
    return 0;
  v21 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("data should not be null"), *MEMORY[0x1E0CB2D50]);
  v22 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v21);
  result = 0;
  *a5 = v22;
  return result;
}

uint64_t ___ZN17MTLLibraryBuilder18newLibraryWithDataEPU19objcproto9MTLDevice11objc_objectPU27objcproto16OS_dispatch_data8NSObjectP8NSStringPP7NSError_block_invoke(uint64_t a1, NSError **a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = operator new();
  LibraryWithData::LibraryWithData((_QWORD *)v5, *(_QWORD *)(a1 + 64), (__int128 *)(a1 + 72), *(NSObject **)(a1 + 32), *(void **)(a1 + 40));
  if ((MTLLibraryDataWithArchive::parseArchive((os_unfair_lock_s *)v5, a2, *(unsigned __int8 *)(v4 + 40), *(void **)(a1 + 48)) & 1) == 0)
  {
    if (!MTLAtomicDecrement((unsigned int *)(v5 + 80)))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return 0;
  }
  return v5;
}

void sub_182773A28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

_MTLLibrary *MTLLibraryBuilder::newLibraryWithFunctionArray(MTLLibraryBuilder *a1, _MTLDevice *a2, void *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  char v14;
  char v15;
  _OWORD *v16;
  _OWORD *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  _MTLLibrary *v34;
  uint64_t v35;
  id v36;
  const __CFString *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CC_SHA256_CTX __p;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char **v49;
  char *v50[2];
  void *data;
  char *v52;
  char *v53;
  unsigned __int8 v54[128];
  unsigned __int8 md[32];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a4)
    *a4 = 0;
  if (a2)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      goto LABEL_5;
    v38 = CFSTR("device is not a MTLDevice.");
    v39 = 1;
    v40 = 6317;
  }
  else
  {
    v38 = CFSTR("device must not be nil.");
    v39 = 0;
    v40 = 6314;
  }
  MTLReportFailure(v39, "newLibraryWithFunctionArray", v40, (uint64_t)v38, a5, a6, a7, a8, v41);
LABEL_5:
  data = 0;
  v52 = 0;
  v53 = 0;
  v50[0] = 0;
  v50[1] = 0;
  v49 = v50;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v10 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v46;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v46 != v11)
          objc_enumerationMutation(a3);
        v13 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend((id)objc_msgSend(v13, "name"), "UTF8String"));
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v49, (const void **)&__p, (uint64_t)&__p);
        v15 = v14;
        if (SHIBYTE(__p.hash[3]) < 0)
          operator delete(*(void **)__p.count);
        if ((v15 & 1) == 0)
        {
          if (a4)
          {
            v35 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("function names must be unique"), *MEMORY[0x1E0CB2D50]);
            v36 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 1, v35);
            v34 = 0;
            *a4 = v36;
          }
          else
          {
            v34 = 0;
          }
          goto LABEL_40;
        }
        v16 = (_OWORD *)objc_msgSend(v13, "bitCodeHash");
        v17 = v16;
        v18 = v52;
        if (v52 >= v53)
        {
          v21 = (char *)data;
          v22 = (v52 - (_BYTE *)data) >> 5;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 59)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v24 = v53 - (_BYTE *)data;
          if ((v53 - (_BYTE *)data) >> 4 > v23)
            v23 = v24 >> 4;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
            v25 = 0x7FFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v53, v25);
            v21 = (char *)data;
            v18 = v52;
          }
          else
          {
            v26 = 0;
          }
          v27 = v17[1];
          v28 = &v26[32 * v22];
          *(_OWORD *)v28 = *v17;
          *((_OWORD *)v28 + 1) = v27;
          if (v18 == v21)
          {
            v31 = &v26[32 * v22];
          }
          else
          {
            v29 = &v26[32 * v22];
            do
            {
              v30 = *((_OWORD *)v18 - 1);
              v31 = v29 - 32;
              *((_OWORD *)v29 - 2) = *((_OWORD *)v18 - 2);
              *((_OWORD *)v29 - 1) = v30;
              v18 -= 32;
              v29 -= 32;
            }
            while (v18 != v21);
          }
          v20 = v28 + 32;
          data = v31;
          v52 = v28 + 32;
          v53 = &v26[32 * v25];
          if (v21)
            operator delete(v21);
        }
        else
        {
          v19 = v16[1];
          *(_OWORD *)v52 = *v16;
          *((_OWORD *)v18 + 1) = v19;
          v20 = v18 + 32;
        }
        v52 = v20;
      }
      v10 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v45, v54, 16);
      if (v10)
        continue;
      break;
    }
  }
  v32 = 126 - 2 * __clz((v52 - ((_BYTE *)data + 32)) >> 5);
  if (v52 == (char *)data + 32)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *,false>((unint64_t *)data + 4, (unint64_t)v52, v33, 1);
  CC_SHA256_Init(&__p);
  CC_SHA256_Update(&__p, data, ((_DWORD)v52 - (_DWORD)data) & 0xFFFFFFE0);
  CC_SHA256_Final(md, &__p);
  _MTLGetLibrariesCache(a2);
  v34 = MTLLibraryBuilder::newLibraryWithProxyData(a1, (__int128 *)md, a4, a3);
LABEL_40:
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)&v49, v50[0]);
  if (data)
  {
    v52 = (char *)data;
    operator delete(data);
  }
  return v34;
}

void sub_182773DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,char *a38,uint64_t a39,void *__p,uint64_t a41)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((uint64_t)&a37, a38);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_182773EFC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182773F90(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182774014(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1827740A4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id MTLLibraryContainer::functionNames(MTLLibraryContainer *this)
{
  if (this->var5)
    return this->var5;
  else
    return (id)(*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)this->var3 + 40))(this->var3);
}

id MTLLibraryContainer::externFunctionNames(MTLLibraryContainer *this)
{
  if (this->var6)
    return this->var6;
  else
    return (id)(*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)this->var3 + 48))(this->var3);
}

uint64_t MTLLibraryCache::findLibraryData(os_unfair_lock_s *a1, _OWORD *a2)
{
  __int128 v4;
  uint64_t *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock(a1);
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>((uint64_t)&a1[2], (unsigned int *)v8);
  if (&a1[4] == (os_unfair_lock_s *)v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = v5[8];
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  os_unfair_lock_unlock(a1);
  return v6;
}

void sub_18277451C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void MTLLibraryCache::releaseLibraryData(os_unfair_lock_s *this, MTLLibraryData *a2)
{
  int v4;

  os_unfair_lock_lock(this);
  v4 = MTLAtomicDecrement((unsigned int *)a2 + 20);
  if (a2 && !v4)
    (*(void (**)(MTLLibraryData *))(*(_QWORD *)a2 + 8))(a2);
  os_unfair_lock_unlock(this);
}

void sub_18277457C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *MTLCachedLibraryData::swapLibraryInfo(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v2 = result[17];
    result[17] = a2[5];
    a2[5] = v2;
    v3 = result[12];
    result[12] = *a2;
    *a2 = v3;
    v4 = result[13];
    result[13] = a2[1];
    a2[1] = v4;
    v5 = result[14];
    result[14] = a2[2];
    a2[2] = v5;
    v6 = result[15];
    result[15] = a2[3];
    a2[3] = v6;
    v7 = result[16];
    result[16] = a2[4];
    a2[4] = v7;
  }
  return result;
}

uint64_t MTLCachedLibraryData::MTLCachedLibraryData(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  __int128 v5;

  *(_QWORD *)a1 = off_1E0FE00A8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  v5 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)a1 = off_1E0FE0708;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = a2;
  MTLCachedLibraryData::swapLibraryInfo((_QWORD *)a1, a4);
  return a1;
}

uint64_t MTLLibraryData::release(MTLLibraryData *this)
{
  uint64_t result;

  result = MTLAtomicDecrement((unsigned int *)this + 20);
  if (this)
  {
    if (!(_DWORD)result)
      return (*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)this + 8))(this);
  }
  return result;
}

void processFunctions(void *a1, void *a2, unsigned int *a3, _QWORD *a4, uint64_t a5, unsigned int a6)
{
  _BOOL4 v8;
  unint64_t v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  int v14;
  uint64_t v16;
  int v18;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _MTLFunctionInternal *v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unsigned int *v36;
  int v37;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[48];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v8 = (_MTLCompilePerformanceStatisticsEnabled() & 1) != 0 || a3[13] != 0;
  if (!a2 && v8)
    a2 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = a3[5];
  v10 = (unsigned int *)((char *)a3 + a3[4]);
  v40 = v10;
  v41 = v9;
  if (v9 <= 4)
    goto LABEL_48;
  if ((v9 & 0xFFFFFFFC) == 4)
    goto LABEL_48;
  v30 = a6;
  v31 = v8;
  v36 = a3;
  if (v9 < 9 || (v9 & 0xFFFFFFFC) == 8)
    goto LABEL_48;
  v32 = *v10;
  v11 = v10[2];
  v37 = v10[1];
  v42 = 12;
  if (v11)
  {
    while (1)
    {
      v12 = v42;
      if (v41 <= v42 || v41 - v42 <= 3)
        break;
      v14 = *(_DWORD *)((char *)v40 + v42);
      v42 += 4;
      if (v41 <= v12 + 4 || v41 - (v12 + 4) <= 3)
        break;
      v16 = *(unsigned int *)((char *)v40 + v12 + 4);
      v42 = v12 + 8;
      if (v41 <= v12 + 8 || v41 - (v12 + 8) <= 3)
        break;
      v18 = *(_DWORD *)((char *)v40 + v12 + 8);
      v42 = v12 + 12;
      if (v41 <= v12 + 12 || v41 - (v12 + 12) <= 3)
        break;
      v20 = *(_DWORD *)((char *)v40 + v12 + 12);
      v42 = v12 + 16;
      if (v41 <= v12 + 16)
        break;
      if (v41 - (v12 + 16) <= 3)
        break;
      v21 = *(_DWORD *)((char *)v40 + v12 + 16);
      v42 = v12 + 20;
      if (v41 <= v12 + 20)
        break;
      if (v41 - (v12 + 20) <= 3)
        break;
      v22 = *(_DWORD *)((char *)v40 + v12 + 20);
      v42 = v12 + 24;
      if (v41 <= v12 + 24 || v41 - (v12 + 24) <= 3)
        break;
      v23 = *(_DWORD *)((char *)v40 + v12 + 24);
      v42 = v12 + 28;
      v24 = DeserialContext::stringFromSerializedData((DeserialContext *)&v40);
      if ((v14 - 1) > 5)
        v25 = 1;
      else
        v25 = qword_18281A688[v14 - 1];
      v39 = v25;
      v51 = 0;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      memset(v47, 0, sizeof(v47));
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      v26 = v36[10] + v21;
      v27 = v36[6] + v18;
      v43 = v26;
      *((_QWORD *)&v44 + 1) = v27;
      *(_QWORD *)&v45 = v36[8] + v20;
      *((_QWORD *)&v45 + 1) = -1;
      MTLLibraryDataWithSource::getBitCodeHash(a4, (uint64_t)v47, v26);
      WORD4(v46) = HIWORD(v32);
      WORD5(v46) = v32;
      WORD6(v46) = HIWORD(v37);
      HIWORD(v46) = v37;
      LOBYTE(v48) = v22;
      if ((v23 & 3) == 2)
        v28 = 2;
      else
        v28 = (v23 & 3) == 1;
      BYTE1(v48) = v28 | v23 & 0xFC;
      v29 = -[_MTLFunctionInternal initWithName:type:libraryData:functionData:device:]([_MTLFunctionInternal alloc], "initWithName:type:libraryData:functionData:device:", v24, v39, a4, &v43, a5);
      -[_MTLFunctionInternal setLineNumber:](v29, "setLineNumber:", v16);
      objc_msgSend(a1, "setObject:forKey:", v29, v24);
      objc_msgSend(a2, "addObject:", v24);

      if (!--v11)
        goto LABEL_45;
    }
LABEL_48:
    abort();
  }
LABEL_45:
  if (v31)
    processCompileTimeStats((uint64_t)v36, (uint64_t)a2, v30);
}

void processCompileTimeStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSDictionary *v6;
  NSDictionary *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const __CFString *v16;
  __CFString **v17;

  v6 = (NSDictionary *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v7 = v6;
  if (a2)
    -[NSDictionary setObject:forKey:](v6, "setObject:forKey:", a2, MTLLibraryPerformanceKeyFunctionNames);
  v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3);
  -[NSDictionary setObject:forKey:](v7, "setObject:forKey:", v8, MTLLibraryPerformanceKeyCachedLibrary);
  v9 = *(unsigned int *)(a1 + 52);
  if ((_DWORD)v9)
  {
    if (v9 <= 3)
      goto LABEL_26;
    v10 = (unsigned int *)(a1 + *(unsigned int *)(a1 + 48));
    v11 = *v10;
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = v9 - 8;
      v14 = 12 * v11;
      while (v12 + 4 < v9 && v13 < 0xFFFFFFFFFFFFFFFCLL)
      {
        switch(v10[v12 / 4 + 1])
        {
          case 0u:
            v16 = MTLLibraryPerformanceKeyTotalFrontendTotalTime;
            break;
          case 1u:
            v16 = MTLLibraryPerformanceKeyFunctionSpecialization;
            break;
          case 2u:
            v16 = (const __CFString *)MTLLibraryPerformanceKeyCoreImageSPI;
            break;
          case 3u:
          case 6u:
            v16 = MTLCompileTimeStatisticsKeyTotal[0];
            break;
          case 4u:
            v17 = MTLCompileTimeStatisticsKeyFrameworkTotal;
            goto LABEL_21;
          case 5u:
            v17 = MTLCompileTimeStatisticsKeyBackendCompilerBuildRequest;
            goto LABEL_21;
          case 7u:
            v17 = &MTLCompileTimeStatisticsKeyFrameworkInstrumentation;
LABEL_21:
            v16 = *v17;
            break;
          default:
            v16 = CFSTR("Invalid key");
            break;
        }
        if (v12 + 8 >= v9 || v13 <= 7)
          break;
        -[NSDictionary setObject:forKey:](v7, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)&v10[v12 / 4 + 2]), v16);
        v12 += 12;
        v13 -= 12;
        if (v14 == v12)
          goto LABEL_25;
      }
LABEL_26:
      abort();
    }
  }
LABEL_25:
  _MTLAddCompileLibraryPerformanceStatistics(v7);
}

uint64_t MTLLibraryContainer::MTLLibraryContainer(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  NSObject *v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  atomic_store(1u, (unsigned int *)(a1 + 8));
  v3 = *a2;
  *(_OWORD *)(a1 + 28) = a2[1];
  *(_OWORD *)(a1 + 12) = v3;
  v4 = dispatch_group_create();
  *(_QWORD *)(a1 + 80) = v4;
  dispatch_group_enter(v4);
  return a1;
}

uint64_t _MTLGetAIRVersionForLLVMBitcodeVersion(int a1)
{
  if ((a1 - 32023) >= 2)
    return 0x20000;
  else
    return 131079;
}

void MTLLibraryBuilder::initLibraryContainerWithRequestData(uint64_t a1, MTLLibraryContainer *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  char v20;
  int v21;
  void *v22;
  NSObject *v23;
  NSObject *subrange;
  NSError *v25;
  uint64_t v26;
  uint64_t v27;
  NSError *v28;
  size_t v29;
  NSMutableDictionary *v30;
  NSArray *v31;
  MTLLibraryData *LibraryData;
  MTLLibraryData *v33;
  unsigned int *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSError *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t CompilerConnectionManager;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  void *v47;
  id v48;
  BOOL v49;
  int v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  NSObject *v57;
  _MTLDevice *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  NSObject *v75;
  NSObject *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  _QWORD v81[2];
  size_t size_ptr;
  dispatch_data_t data;
  dispatch_object_t object;
  std::__shared_weak_count *v85;
  _QWORD v86[8];
  std::__shared_weak_count *v87;
  MTLHashKey v88;
  uint64_t v89;
  MTLLibraryContainer *v90;
  int v91;
  MTLHashKey v92;
  MTLHashKey v93;
  void *buffer_ptr;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, dispatch_data_t, uint64_t);
  void *v97;
  void *v98;
  __int128 *v99;
  dispatch_object_t v100;
  std::__shared_weak_count *v101;
  MTLHashKey v102;
  BOOL v103;
  __int128 v104;
  void (*v105)(uint64_t, NSObject *, NSError *);
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  MTLHashKey v110;
  MTLLibraryContainer *v111;
  int v112;
  char v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a3)
    MTLReportFailure(0, "initLibraryContainerWithRequestData", 8293, (uint64_t)CFSTR("requestData must not be nil."), a5, a6, a7, a8, v80);
  if (!*(_QWORD *)(a3 + 8))
    MTLReportFailure(0, "initLibraryContainerWithRequestData", 8294, (uint64_t)CFSTR("requestSize must not be 0."), a5, a6, a7, a8, v80);
  v12 = _MTLGetLibrariesCache(*(_MTLDevice **)(a1 + 32));
  v13 = *(_QWORD *)(a3 + 32);
  if (!v13)
  {
    v14 = *(void **)(a3 + 24);
    if (!v14)
      goto LABEL_12;
LABEL_10:
    v16 = objc_msgSend(v14, "libraryType");
    goto LABEL_11;
  }
  v14 = *(void **)(a3 + 24);
  if (v14)
    goto LABEL_10;
  v15 = *(void **)(v13 + 40);
  if (!v15)
  {
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v16 = objc_msgSend(v15, "type");
LABEL_11:
  v17 = v16;
LABEL_13:
  MTLHashKey::MTLHashKey((uint64_t)&v93, (uint64_t)&a2->var2);
  v18 = *(_DWORD *)(a3 + 16);
  if (v18 <= 0xF && ((1 << v18) & 0xE020) != 0)
  {
    v19 = *(void **)(a1 + 32);
    MTLHashKey::MTLHashKey(&v92, &v93);
    v20 = *(_BYTE *)(a1 + 40);
    v21 = *(_DWORD *)(a3 + 16);
    v22 = (void *)MEMORY[0x1E0C809B0];
    *(_QWORD *)&v104 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v104 + 1) = 3321888768;
    v105 = ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke;
    v106 = &unk_1E0FDE910;
    v109 = v12;
    MTLHashKey::MTLHashKey(&v110, &v92);
    v112 = v21;
    v113 = v20;
    v111 = a2;
    v107 = v19;
    v108 = a4;
    MultiLevelCacheFactory::createAirCache(*(_QWORD *)(a3 + 48), *(std::__shared_weak_count_vtbl **)(a3 + 56), 0, *(_QWORD *)(v12 + 32), 2 * *(unsigned __int8 *)(a3 + 64), &object);
    data = 0;
    (*((void (**)(dispatch_object_t, MTLHashKey *, dispatch_data_t *))object->isa + 12))(object, &v92, &data);
    if (data)
    {
      buffer_ptr = 0;
      size_ptr = 0;
      v23 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
      if (*(_DWORD *)buffer_ptr == 1112298573)
      {
        subrange = data;
        dispatch_retain(data);
        v25 = 0;
      }
      else
      {
        v25 = (NSError *)newErrorFromCompilerLog((uint64_t)buffer_ptr);
        if ((*(_BYTE *)buffer_ptr & 1) != 0 && (v29 = *((unsigned int *)buffer_ptr + 11), (_DWORD)v29))
          subrange = dispatch_data_create_subrange(data, *((unsigned int *)buffer_ptr + 10), v29);
        else
          subrange = 0;
      }
      dispatch_release(v23);
      v105((uint64_t)&v104, subrange, v25);
      dispatch_release(data);
      free(*(void **)a3);
    }
    else if ((*((unsigned int (**)(dispatch_object_t))object->isa + 15))(object))
    {
      v26 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Failed to find library in binary archive.");
      if (!v26)
        v26 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", "Failed to find library in binary archive.", 1);
      v27 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v26, *MEMORY[0x1E0CB2D50]);
      v28 = (NSError *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v27);
      v105((uint64_t)&v104, 0, v28);
    }
    else
    {
      v42 = _MTLGetMTLCompilerLLVMVersionForDevice(v19);
      CompilerConnectionManager = getCompilerConnectionManager(v19, v42);
      v44 = operator new();
      *(_QWORD *)v44 = &off_1E0FE05F0;
      *(_QWORD *)(v44 + 16) = 0;
      *(_DWORD *)(v44 + 8) = *(_DWORD *)(a3 + 16);
      v45 = dispatch_data_create(*(const void **)a3, *(_QWORD *)(a3 + 8), 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
      v46 = v45;
      if (v45)
        dispatch_retain(v45);
      *(_QWORD *)(v44 + 16) = v46;
      dispatch_release(v46);
      v47 = *(void **)(a3 + 56);
      v48 = v47;
      v49 = *(_QWORD *)(a3 + 56) != 0;
      v50 = *(unsigned __int8 *)(a3 + 44);
      buffer_ptr = v22;
      v95 = 3321888768;
      v96 = ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke_1363;
      v97 = &unk_1E0FDF698;
      v103 = v49;
      v100 = object;
      v101 = v85;
      if (v85)
      {
        p_shared_owners = (unint64_t *)&v85->__shared_owners_;
        do
          v52 = __ldxr(p_shared_owners);
        while (__stxr(v52 + 1, p_shared_owners));
      }
      MTLHashKey::MTLHashKey(&v102, &v92);
      v98 = v47;
      v99 = &v104;
      (*(void (**)(uint64_t, _QWORD, uint64_t, BOOL, void **))(*(_QWORD *)CompilerConnectionManager + 24))(CompilerConnectionManager, 0, v44, v50 != 0, &buffer_ptr);
      MTLHashKey::~MTLHashKey(&v102);
      v53 = v101;
      if (v101)
      {
        v54 = (unint64_t *)&v101->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    v39 = v85;
    if (v85)
    {
      v40 = (unint64_t *)&v85->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    MTLHashKey::~MTLHashKey(&v110);
    MTLHashKey::~MTLHashKey(&v92);
  }
  else
  {
    v30 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
    v31 = (NSArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
    LibraryData = (MTLLibraryData *)MTLLibraryCache::findLibraryData((os_unfair_lock_s *)v12, v93.var1.var0);
    v33 = LibraryData;
    if (LibraryData)
    {
      v34 = (unsigned int *)*((_QWORD *)LibraryData + 19);
      processFunctions(v30, v31, v34, LibraryData, *(_QWORD *)(a1 + 32), 1u);
      if (v34[3])
      {
        v35 = (char *)v34 + v34[2];
        v36 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v35);
        if (!v36)
          v36 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v35, 1);
        v37 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v36, *MEMORY[0x1E0CB2D50]);
        v38 = (NSError *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v37);
      }
      else
      {
        v38 = 0;
      }
      MTLLibraryContainer::init(a2, v33, v30, v31, v38);
      (*(void (**)(uint64_t))(a4 + 16))(a4);

      (*(void (**)(MTLLibraryData *))(*(_QWORD *)v33 + 24))(v33);
      free(*(void **)a3);
      *(_QWORD *)a3 = 0;
    }
    else
    {
      MultiLevelCacheFactory::createAirCache(*(_QWORD *)(a3 + 48), *(std::__shared_weak_count_vtbl **)(a3 + 56), 0, *(_QWORD *)(v12 + 32), 0, &buffer_ptr);
      object = 0;
      (*(void (**)(void *, MTLHashKey *, dispatch_object_t *))(*(_QWORD *)buffer_ptr + 96))(buffer_ptr, &v93, &object);
      v56 = *(_DWORD *)(a3 + 16);
      v57 = object;
      if (object)
      {
        *(_QWORD *)&v104 = 0;
        data = 0;
        v58 = *(_MTLDevice **)(a1 + 32);
        v59 = (std::__shared_weak_count *)v95;
        v81[0] = buffer_ptr;
        v81[1] = v95;
        if (v95)
        {
          v60 = (unint64_t *)(v95 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        processCompiledLibrary(v57, v58, v56, v81, (uint64_t)&v93, 0, v17, v30, v31, (uint64_t *)&data, (uint64_t *)&v104, 0, 0);
        if (v59)
        {
          v62 = (unint64_t *)&v59->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        dispatch_release(object);
        MTLLibraryContainer::init(a2, (MTLLibraryData *)data, v30, v31, (NSError *)v104);
        (*(void (**)(uint64_t))(a4 + 16))(a4);

        (*((void (**)(dispatch_data_t))data->isa + 3))(data);
        free(*(void **)a3);
        *(_QWORD *)a3 = 0;
      }
      else
      {
        v67 = *(void **)(a1 + 32);
        v68 = _MTLGetMTLCompilerLLVMVersionForDevice(v67);
        v69 = getCompilerConnectionManager(v67, v68);
        v70 = *(void **)(a3 + 56);
        v71 = v70;
        v86[0] = MEMORY[0x1E0C809B0];
        v86[1] = 3321888768;
        v86[2] = ___ZN17MTLLibraryBuilder35initLibraryContainerWithRequestDataEP19MTLLibraryContainerR21MTLLibraryRequestDataU13block_pointerFvvE_block_invoke;
        v86[3] = &unk_1E0FE22E0;
        v91 = v56;
        v86[6] = a1;
        v86[7] = buffer_ptr;
        v87 = (std::__shared_weak_count *)v95;
        if (v95)
        {
          v72 = (unint64_t *)(v95 + 8);
          do
            v73 = __ldxr(v72);
          while (__stxr(v73 + 1, v72));
        }
        MTLHashKey::MTLHashKey(&v88, &v93);
        v89 = v17;
        v90 = a2;
        v86[4] = v70;
        v86[5] = a4;
        if (*(_DWORD *)(a3 + 16) == 7)
        {
          data = 0;
          downgradeRequestHashAndData(&v104, &data, *(MTLCompilerFunctionRequest **)(a3 + 32), *(_DWORD *)(a3 + 40));
          downgradeRequest(*(_QWORD *)(a3 + 32), *(_DWORD *)(a3 + 40), data, (uint64_t)v86);
        }
        else
        {
          v74 = operator new();
          *(_QWORD *)v74 = &off_1E0FE05F0;
          *(_QWORD *)(v74 + 16) = 0;
          *(_DWORD *)(v74 + 8) = *(_DWORD *)(a3 + 16);
          v75 = dispatch_data_create(*(const void **)a3, *(_QWORD *)(a3 + 8), 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
          v76 = v75;
          if (v75)
            dispatch_retain(v75);
          *(_QWORD *)(v74 + 16) = v76;
          dispatch_release(v76);
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v69 + 24))(v69, 0, v74, *(unsigned __int8 *)(a3 + 44), v86);
        }

        MTLHashKey::~MTLHashKey(&v88);
        v77 = v87;
        if (v87)
        {
          v78 = (unint64_t *)&v87->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
      }
      v64 = (std::__shared_weak_count *)v95;
      if (v95)
      {
        v65 = (unint64_t *)(v95 + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
    }
  }
  MTLHashKey::~MTLHashKey(&v93);
}

void sub_18277557C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,MTLHashKey *a36,MTLHashKey *a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,...)
{
  uint64_t v45;
  MTLHashKey *v46;
  uint64_t v48;
  va_list va;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  va_list va1;

  va_start(va1, a45);
  va_start(va, a45);
  v48 = va_arg(va1, _QWORD);
  v50 = va_arg(va1, _QWORD);
  v51 = va_arg(va1, _QWORD);
  v52 = va_arg(va1, _QWORD);
  v53 = va_arg(va1, _QWORD);
  v54 = va_arg(va1, _QWORD);
  v55 = va_arg(va1, _QWORD);
  v56 = va_arg(va1, _QWORD);
  v57 = va_arg(va1, _QWORD);
  v58 = va_arg(va1, _QWORD);
  MTLHashKey::~MTLHashKey(v46);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v45);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MTLHashKey::~MTLHashKey((MTLHashKey *)va);
  _Unwind_Resume(a1);
}

uint64_t processCompiledLibrary(NSObject *a1, _MTLDevice *a2, int a3, _QWORD *a4, uint64_t a5, int a6, uint64_t a7, void *a8, void *a9, uint64_t *a10, uint64_t *a11, uint64_t a12, unsigned __int8 a13)
{
  int v13;
  int v14;
  NSObject *v19;
  uint64_t v20;
  unsigned int *v21;
  int v22;
  char v23;
  NSObject *v24;
  BOOL v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  const __CFString *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *Array;
  uint64_t LibraryInstallName;
  void *v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  size_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  dispatch_object_t object;
  _QWORD v65[2];
  size_t size_ptr;
  void *buffer_ptr;
  _QWORD v68[10];
  int v69;
  void *__p[2];
  __int128 v71;
  int v72;
  uint64_t *v73[3];
  uint64_t *v74[3];
  uint64_t *v75[4];
  uint64_t v76;
  id *v77;
  uint64_t v78;
  __n128 (*v79)(uint64_t, uint64_t);
  uint64_t (*v80)();
  const char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  void **v85[2];

  v13 = (a13 >> 1) & 1;
  if (a3 != 7)
    v13 = 0;
  if (a12)
    v14 = v13;
  else
    v14 = 0;
  size_ptr = 0;
  buffer_ptr = 0;
  if (a1)
  {
    v19 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &size_ptr);
    v21 = (unsigned int *)buffer_ptr;
    v22 = *(_DWORD *)buffer_ptr;
    if (*(_DWORD *)buffer_ptr == 1112298573)
      v23 = 1;
    else
      v23 = v14;
    if ((v23 & 1) == 0)
    {
      v24 = v19;
      v25 = dispatch_data_get_size(a1) > 0x68;
      v19 = v24;
      if (!v25)
      {
        if (a11)
        {
          v26 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Compilation failed: \n\n compiler response is invalid"), *MEMORY[0x1E0CB2D50]);
          *a11 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 2, v26);
          v19 = v24;
        }
        goto LABEL_14;
      }
    }
    if (!v19)
      return 0;
    if (v14)
    {
      v27 = v19;
      __p[0] = dispatch_data_create(v21, size_ptr, 0, 0);
      LOBYTE(v76) = 2;
      std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*&>(a12, (char *)&v76, &v76, __p);
      dispatch_release(v27);
      return 1;
    }
    v30 = a10;
    if (v22 == 1112298573)
    {
      v31 = v19;
      v28 = processArchiveLibrary((uint64_t)a2, a1, 0, a8, a9, a10, a11, v20);
      v32 = v31;
LABEL_61:
      dispatch_release(v32);
      return v28;
    }
    object = v19;
    if (v21[3])
    {
      v33 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", (char *)v21 + v21[2], 4);
      v30 = a10;
      v34 = v33;
      v35 = *(_BYTE *)v21;
      if ((*(_BYTE *)v21 & 1) != 0)
      {
LABEL_25:
        if ((v35 & 2) != 0)
        {
          if (!processArchiveLibrary((uint64_t)a2, a1, (uint64_t)v21, a8, a9, v30, a11, v20))
          {
            v19 = object;
LABEL_14:
            dispatch_release(v19);
            return 0;
          }
        }
        else
        {
          v57 = v30;
          v36 = _MTLGetLibrariesCache(a2);
          v37 = a7 == 1;
          v38 = v36;
          if (v37)
          {
            v59 = v21[10];
            v58 = v21[11];
          }
          else
          {
            v58 = 0;
            v59 = 0;
          }
          v76 = 0;
          v77 = (id *)&v76;
          v79 = __Block_byref_object_copy__1374;
          v80 = __Block_byref_object_dispose__1375;
          v78 = 0x6012000000;
          v81 = "e";
          v82 = 0u;
          v83 = 0u;
          v84 = 0u;
          SerializedLibraryInfo::SerializedLibraryInfo((SerializedLibraryInfo *)__p, v21, (uint64_t)v21);
          Array = SerializedLibraryInfo::createArray((uint64_t **)&v71 + 1);
          v77[10] = Array;
          LibraryInstallName = SerializedLibraryInfo::getLibraryInstallName((SerializedLibraryInfo *)__p);
          v77[6] = (id)LibraryInstallName;
          v45 = SerializedLibraryInfo::createArray(v73);
          v77[9] = v45;
          v46 = SerializedLibraryInfo::createArray(v74);
          v77[8] = v46;
          v47 = SerializedLibraryInfo::createArray(v75);
          v77[7] = v47;
          v85[0] = 0;
          v68[0] = MEMORY[0x1E0C809B0];
          v68[1] = 3221225472;
          v68[2] = ___ZL24processSerializedLibraryPU27objcproto16OS_dispatch_data8NSObjectPU19objcproto9MTLDevice11objc_object19MTLBuildRequestTypeRK10MTLHashKeybP36MTLBuildLibraryFromSourceReplyHeader14MTLLibraryTypeP19NSMutableDictionaryP14NSMutableArrayPP14MTLLibraryDataPP7NSError17MTLCompilerOption_block_invoke;
          v68[3] = &unk_1E0FE4980;
          v68[6] = v38;
          v68[7] = a5;
          v68[4] = a1;
          v68[5] = &v76;
          v68[8] = v58;
          v68[9] = v59;
          v69 = a3;
          v48 = (_QWORD *)MTLLibraryCache::newLibraryData(v38, (__int128 *)(a5 + 24), (uint64_t)v85, (uint64_t)v68);

          processFunctions(a8, a9, v21, v48, (uint64_t)a2, a6 ^ 1);
          if (v57)
          {
            *v57 = (uint64_t)v48;
          }
          else if (v48)
          {
            (*(void (**)(_QWORD *))(*v48 + 24))(v48);
          }
          v85[0] = (void **)v75;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v85);
          v85[0] = (void **)v74;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v85);
          v85[0] = (void **)v73;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v85);
          v85[0] = (void **)&v71 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v85);
          if (SBYTE7(v71) < 0)
            operator delete(__p[0]);
          _Block_object_dispose(&v76, 8);
        }
        if (a3 == 7)
        {
          if (a12)
          {
            v49 = v21[25];
            if ((_DWORD)v49)
            {
              *(_OWORD *)__p = 0u;
              v71 = 0u;
              v72 = 1065353216;
              v76 = v21[24];
              deserializeCompilerOutputData(buffer_ptr, v76 + v49, &v76, __p, a12);
              std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)__p);
            }
          }
        }
        if (a6)
        {
          v50 = size_ptr;
          v51 = (std::__shared_weak_count *)a4[1];
          v65[0] = *a4;
          v65[1] = v51;
          if (v51)
          {
            p_shared_owners = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldxr(p_shared_owners);
            while (__stxr(v53 + 1, p_shared_owners));
          }
          addReplyToCompilerCache((uint64_t)v21, v50, v65, a5);
          if (v51)
          {
            v54 = (unint64_t *)&v51->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
        if (!a11)
          goto LABEL_60;
        v42 = newErrorWithWarningLog(v34);
        goto LABEL_59;
      }
    }
    else
    {
      v35 = v22;
      v34 = 0;
      if ((v35 & 1) != 0)
        goto LABEL_25;
    }
    if (v34)
      v39 = (const __CFString *)v34;
    else
      v39 = CFSTR("compiler error log is invalid");
    v40 = objc_msgSend(CFSTR("Compilation failed: \n\n"), "stringByAppendingString:", v39);
    v41 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v40, *MEMORY[0x1E0CB2D50]);
    if (!a11)
      goto LABEL_60;
    v42 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v41);
LABEL_59:
    *a11 = v42;
LABEL_60:
    v28 = v35 & 1;
    v32 = object;
    goto LABEL_61;
  }
  v29 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", CFSTR("Compiler returned an empty reply"), *MEMORY[0x1E0CB2D50]);
  if (!a11)
    return 0;
  v28 = 0;
  *a11 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 2, v29);
  return v28;
}

void sub_182775C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void ___ZN17MTLLibraryBuilder35initLibraryContainerWithRequestDataEP19MTLLibraryContainerR21MTLLibraryRequestDataU13block_pointerFvvE_block_invoke(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4)
{
  uint64_t v8;
  NSMutableDictionary *v9;
  NSArray *v10;
  NSArray *v11;
  const __CFString *v12;
  _MTLDevice *v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  MTLLibraryData *v22;
  NSError *v23;

  v8 = *(_QWORD *)(a1 + 48);
  v9 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  v10 = (NSArray *)objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v11 = v10;
  v23 = 0;
  if (a2)
  {
    if (a4)
    {
      v12 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
      if (!v12)
        v12 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a4, 1);
    }
    else
    {
      v12 = CFSTR("empty error message");
    }
    v20 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v12, *MEMORY[0x1E0CB2D50]);
    v23 = (NSError *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v20);
    MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 160), 0, 0, 0, v23);
  }
  else
  {
    v13 = *(_MTLDevice **)(v8 + 32);
    v14 = *(_DWORD *)(a1 + 168);
    v15 = *(std::__shared_weak_count **)(a1 + 64);
    v21[0] = *(_QWORD *)(a1 + 56);
    v21[1] = v15;
    v22 = 0;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    processCompiledLibrary(a3, v13, v14, v21, a1 + 72, 1, *(_QWORD *)(a1 + 152), v9, v10, (uint64_t *)&v22, (uint64_t *)&v23, 0, 0);
    if (v15)
    {
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 160), v22, v9, v11, v23);
    if (v22)
      (*(void (**)(MTLLibraryData *))(*(_QWORD *)v22 + 24))(v22);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_182775EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

MTLHashKey *__copy_helper_block_e8_56c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE72c17_ZTSK10MTLHashKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 72), (const MTLHashKey *)(a2 + 72));
}

void sub_182775F08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_56c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE72c17_ZTSK10MTLHashKey(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 56;
  MTLHashKey::~MTLHashKey((MTLHashKey *)(a1 + 72));
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
}

double downgradeRequestHashAndData(_OWORD *a1, dispatch_data_t *a2, MTLCompilerFunctionRequest *a3, int a4)
{
  const void *v7;
  unint64_t v8;
  void *v10;
  unint64_t v11;

  v10 = 0;
  v11 = 0;
  downgradeRequestData(&v10, &v11, a3, a4);
  v7 = v10;
  v8 = v11;
  *a2 = dispatch_data_create(v10, v11, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
  return generateDowngradeRequestHash(a1, (uint64_t)a3, v7, v8);
}

uint64_t downgradeRequest(uint64_t a1, int a2, NSObject *a3, uint64_t a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v11;
  uint64_t v12;
  uint64_t CompilerConnectionManager;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, const char *))(a4 + 16))(a4, 1, 0, "Downgrade request was nil!");
  v8 = *(void **)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  if (v8)
    v9 = *(void **)(a1 + 32);
  else
    v9 = *(void **)(a1 + 40);
  v11 = (void *)objc_msgSend(v9, "device");
  v22 = *(_DWORD *)(a1 + 48);
  v12 = _MTLGetMTLCompilerLLVMVersionForDevice(v11);
  CompilerConnectionManager = getCompilerConnectionManager(v11, v12);
  v14 = operator new();
  v15 = v14;
  *(_QWORD *)v14 = &off_1E0FE1100;
  *(_QWORD *)(v14 + 32) = 0;
  v16 = (_QWORD *)(v14 + 32);
  *(_OWORD *)(v14 + 64) = 0u;
  v17 = (_QWORD *)(v14 + 64);
  *(_BYTE *)(v14 + 132) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_OWORD *)(v14 + 109) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_DWORD *)(v14 + 8) = 7;
  *(_DWORD *)(v14 + 128) = a2;
  v18 = *(unsigned __int8 *)(a1 + 124);
  *(_BYTE *)(v14 + 124) = v18 ^ 1;
  if (!v18)
  {
    *(_QWORD *)(v14 + 80) = *(_QWORD *)(a1 + 80);
    v19 = *(_QWORD *)(a1 + 64);
    if (v19)
      dispatch_retain(*(dispatch_object_t *)(a1 + 64));
    *v17 = v19;
  }
  if (a3)
    dispatch_retain(a3);
  *(_QWORD *)(v15 + 16) = a3;
  dispatch_release(a3);
  if (v8)
    *v16 = v8;
  if (v7)
    *(_QWORD *)(v15 + 40) = v7;
  *(_DWORD *)(v15 + 48) = v22;
  v20 = *(_DWORD *)(objc_msgSend(v11, "limits") + 56);
  v21 = *(_DWORD *)(objc_msgSend(v11, "limits") + 188);
  *(_DWORD *)(v15 + 52) = v20;
  *(_DWORD *)(v15 + 56) = v21;
  *(_QWORD *)(v15 + 88) = *(id *)(a1 + 88);
  *(_QWORD *)(v15 + 96) = *(id *)(a1 + 96);
  *(_QWORD *)(v15 + 104) = *(id *)(a1 + 104);
  *(_DWORD *)(v15 + 120) = *(_DWORD *)(a1 + 8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)CompilerConnectionManager
                                                                               + 24))(CompilerConnectionManager, 0, v15, 1, a4);
}

void MTLLibraryBuilder::newLibraryWithRequestData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  CC_LONG v7;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 16) == 7)
  {
    generateDowngradeRequestHash(md, *(_QWORD *)(a2 + 32), *(const void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v6 = *(const void **)a2;
    v7 = *(_DWORD *)(a2 + 8);
    *(_OWORD *)md = 0u;
    v10 = 0u;
    CC_SHA256_Init(&c);
    CC_SHA256_Update(&c, v6, v7);
    CC_SHA256_Final(md, &c);
  }
  MTLLibraryBuilder::newLibraryWithRequestDataAndHash(a1, a2, (__int128 *)md, a3);
}

double generateDowngradeRequestHash(_OWORD *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = *(void **)(a2 + 32);
  if (v8)
  {
    v9 = objc_msgSend(v8, "functionData");
    v10 = *(_OWORD *)(v9 + 72);
    v17 = *(_OWORD *)(v9 + 56);
    v18 = v10;
  }
  else
  {
    v11 = objc_msgSend(*(id *)(a2 + 40), "libraryData");
    v12 = (__int128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 296))(v11);
    v13 = v12[1];
    v17 = *v12;
    v18 = v13;
  }
  createHashForType(7, a3, a4, &v17, a2, 0, 0, (unsigned __int8 *)v16);
  result = *(double *)v16;
  v15 = v16[1];
  *a1 = v16[0];
  a1[1] = v15;
  return result;
}

void MTLLibraryBuilder::newLibraryWithRequestDataAndHash(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *global_queue;
  _QWORD v13[7];
  char v14;

  v14 = 0;
  v11 = MTLLibraryBuilder::findOrCreateLibraryContainer(a1, a3, &v14);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZN17MTLLibraryBuilder32newLibraryWithRequestDataAndHashER21MTLLibraryRequestDataRK12MTLUINT256_tU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke;
  v13[3] = &unk_1E0FE4300;
  v13[5] = a1;
  v13[6] = v11;
  v13[4] = a4;
  if (v14)
  {
    MTLLibraryBuilder::initLibraryContainerWithRequestData(a1, (MTLLibraryContainer *)v11, a2, (uint64_t)v13, v7, v8, v9, v10);
  }
  else
  {
    free(*(void **)a2);
    *(_QWORD *)a2 = 0;
    if (*(_BYTE *)(a2 + 44))
    {
      dispatch_group_wait(*(dispatch_group_t *)(v11 + 80), 0xFFFFFFFFFFFFFFFFLL);
      ___ZN17MTLLibraryBuilder32newLibraryWithRequestDataAndHashER21MTLLibraryRequestDataRK12MTLUINT256_tU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke((uint64_t)v13);
    }
    else
    {
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_group_notify(*(dispatch_group_t *)(v11 + 80), global_queue, v13);
    }
  }
}

void ___ZN17MTLLibraryBuilder32newLibraryWithRequestDataAndHashER21MTLLibraryRequestDataRK12MTLUINT256_tU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorE_block_invoke(uint64_t a1)
{
  MTLLibraryBuilder *v2;
  uint64_t v3;
  _MTLLibrary *v4;
  _MTLLibrary *v5;

  v2 = *(MTLLibraryBuilder **)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(v3 + 48))
    v4 = -[_MTLLibrary initWithLibraryContainer:device:]([_MTLLibrary alloc], "initWithLibraryContainer:device:", v3, *((_QWORD *)v2 + 4));
  else
    v4 = 0;
  v5 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  MTLLibraryBuilder::releaseCacheEntry(v2, *(MTLLibraryContainer **)(a1 + 48));

}

uint64_t MTLLibraryBuilder::findLibraryContainer(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  uint64_t *v4;
  _OWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  v4 = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::find<MTLLibraryIdentifier>(a1 + 8, (unsigned int *)v6);
  if ((uint64_t *)(a1 + 16) == v4)
    return 0;
  else
    return v4[8];
}

_OWORD *MTLLibraryBuilder::insertLibraryContainer(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  _OWORD *result;
  _OWORD *v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = a2[1];
  v7[0] = *a2;
  v7[1] = v4;
  v6 = v7;
  result = std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__emplace_unique_key_args<MTLLibraryIdentifier,std::piecewise_construct_t const&,std::tuple<MTLLibraryIdentifier&&>,std::tuple<>>((uint64_t **)(a1 + 8), (unsigned int *)v7, (uint64_t)&std::piecewise_construct, &v6);
  *((_QWORD *)result + 8) = a3;
  return result;
}

void MTLLibraryBuilder::deleteLibraryCache(MTLLibraryBuilder *this)
{
  os_unfair_lock_lock((os_unfair_lock_t)this);
  std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::erase((uint64_t **)this + 1, *((uint64_t **)this + 1), (uint64_t *)this + 2);
  os_unfair_lock_unlock((os_unfair_lock_t)this);
}

void sub_1827765F4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void escapeString(char *a1@<X0>, std::string *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;

  v2 = a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v4 = a1[23];
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a1 + 1);
  std::string::reserve(a2, v4 + 4);
  v5 = *((_QWORD *)v2 + 1);
  if (v2[23] >= 0)
  {
    v6 = v2[23];
  }
  else
  {
    v2 = *(char **)v2;
    v6 = v5;
  }
  for (; v6; --v6)
  {
    v7 = *v2;
    if ((v7 - 9) < 5
      || ((v7 - 32) <= 0x3C
        ? (v8 = ((1 << (v7 - 32)) & 0x1000000000000085) == 0)
        : (v8 = 1),
          !v8))
    {
      std::string::push_back(a2, 92);
    }
    std::string::push_back(a2, v7);
    ++v2;
  }
}

uint64_t MTLLibraryBuilder::newLibraryWithDAG(_MTLDevice **a1, void *a2, void *a3, _QWORD *a4, _QWORD *a5, uint64_t a6, uint64_t a7, std::__shared_weak_count_vtbl *a8)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[2];
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  uint64_t v30;

  v25 = 0;
  v26 = &v25;
  v27 = 0x3052000000;
  v28 = __Block_byref_object_copy__10;
  v29 = __Block_byref_object_dispose__10;
  v30 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x3052000000;
  v22 = __Block_byref_object_copy__10;
  v23 = __Block_byref_object_dispose__10;
  v24 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEPP7NSErrorNSt3__110shared_ptrINSA_6vectorI21stitchedAirDescriptorNSA_9allocatorISD_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESJ__block_invoke;
  v18[3] = &unk_1E0FE4350;
  v18[4] = &v25;
  v18[5] = &v19;
  v9 = (std::__shared_weak_count *)a5[1];
  v17[0] = *a5;
  v17[1] = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  MTLLibraryBuilder::newLibraryWithDAG(a1, a2, a3, (uint64_t)v18, 1, (uint64_t)v17, a6, a7, a8);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = (void *)v20[5];
  if (a4)
    *a4 = v14;
  else

  v15 = v26[5];
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v25, 8);
  return v15;
}

void sub_182776828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

id ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEPP7NSErrorNSt3__110shared_ptrINSA_6vectorI21stitchedAirDescriptorNSA_9allocatorISD_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESJ__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = a2;
  v5 = a2;
  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void MTLLibraryBuilder::newLibraryWithDAG(_MTLDevice **a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count_vtbl *a9)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  _OWORD *v21;
  _OWORD *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _MTLDevice *v58;
  uint64_t v59;
  uint64_t CompilerConnectionManager;
  uint64_t v61;
  void *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  const char *v69;
  std::__shared_weak_count_vtbl *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v91;
  std::__shared_weak_count *v92;
  _QWORD *v93[2];
  CC_LONG len[2];
  uint64_t v95;
  MTLLibraryContainer *v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  void *__p;
  char *v101;
  char *v102;
  int data;
  CC_SHA256_CTX c;
  _QWORD v105[10];
  std::__shared_weak_count *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  MTLLibraryContainer *v110;
  uint64_t v111;
  BOOL v112;
  __int128 v113;
  __int128 v114;
  _QWORD v115[6];
  __int128 v116;
  __int128 v117;
  unsigned __int8 md[16];
  __int128 v119;
  MTLHashKey v120;
  uint64_t v121;

  v9 = a8;
  v11 = (_QWORD *)a6;
  HIDWORD(v86) = a5;
  v121 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    MTLReportFailure(0, "newLibraryWithDAG", 9425, (uint64_t)CFSTR("functionDag cannot be nil"), a5, a6, a7, a8, v86);
    if (a3)
      goto LABEL_3;
  }
  MTLReportFailure(0, "newLibraryWithDAG", 9426, (uint64_t)CFSTR("functions cannot be nil"), a5, a6, a7, a8, v86);
LABEL_3:
  if (!objc_msgSend(a3, "count"))
    MTLReportFailure(0, "newLibraryWithDAG", 9427, (uint64_t)CFSTR("functions cannot be empty"), v14, v15, v16, v17, v86);
  *(_OWORD *)md = 0u;
  v119 = 0u;
  CC_SHA256_Init(&c);
  data = 14;
  CC_SHA256_Update(&c, &data, 4u);
  __p = 0;
  v101 = 0;
  v102 = 0;
  *(_OWORD *)v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v18 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", v96, &v120, 16);
  if (v18)
  {
    v87 = v9;
    v88 = v11;
    v19 = *(_QWORD *)v97;
    do
    {
      for (i = 0; i != v18; ++i)
      {
        if (*(_QWORD *)v97 != v19)
          objc_enumerationMutation(a3);
        v21 = (_OWORD *)objc_msgSend(*((id *)&v96[1]->var0 + i), "bitCodeHash");
        v22 = v21;
        v23 = v101;
        if (v101 >= v102)
        {
          v26 = (char *)__p;
          v27 = (v101 - (_BYTE *)__p) >> 5;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 59)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v29 = v102 - (_BYTE *)__p;
          if ((v102 - (_BYTE *)__p) >> 4 > v28)
            v28 = v29 >> 4;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0)
            v30 = 0x7FFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v102, v30);
            v26 = (char *)__p;
            v23 = v101;
          }
          else
          {
            v31 = 0;
          }
          v32 = v22[1];
          v33 = &v31[32 * v27];
          *(_OWORD *)v33 = *v22;
          *((_OWORD *)v33 + 1) = v32;
          if (v23 == v26)
          {
            v36 = &v31[32 * v27];
          }
          else
          {
            v34 = &v31[32 * v27];
            do
            {
              v35 = *((_OWORD *)v23 - 1);
              v36 = v34 - 32;
              *((_OWORD *)v34 - 2) = *((_OWORD *)v23 - 2);
              *((_OWORD *)v34 - 1) = v35;
              v23 -= 32;
              v34 -= 32;
            }
            while (v23 != v26);
          }
          v25 = v33 + 32;
          __p = v36;
          v101 = v33 + 32;
          v102 = &v31[32 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          v24 = v21[1];
          *(_OWORD *)v101 = *v21;
          *((_OWORD *)v23 + 1) = v24;
          v25 = v23 + 32;
        }
        v101 = v25;
      }
      v18 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", v96, &v120, 16);
    }
    while (v18);
    v37 = (unint64_t *)__p;
    v38 = (unint64_t)v101;
    v11 = v88;
    v9 = v87;
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  v39 = 126 - 2 * __clz((uint64_t)(v38 - (_QWORD)v37) >> 5);
  if ((unint64_t *)v38 == v37)
    v40 = 0;
  else
    v40 = v39;
  std::__introsort<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *,false>(v37, v38, v40, 1);
  v95 = (v101 - (_BYTE *)__p) >> 5;
  CC_SHA256_Update(&c, &v95, 8u);
  CC_SHA256_Update(&c, __p, 32 * v95);
  *(_QWORD *)len = objc_msgSend(a2, "length");
  CC_SHA256_Update(&c, len, 8u);
  v41 = (const void *)objc_msgSend(a2, "UTF8String");
  CC_SHA256_Update(&c, v41, len[0]);
  CC_SHA256_Final(md, &c);
  if (__p)
  {
    v101 = (char *)__p;
    operator delete(__p);
  }
  v42 = _MTLGetLibrariesCache(a1[4]);
  MultiLevelCacheFactory::createLibraryCache((uint64_t)a1[4], v9, a9, *(_QWORD *)(v42 + 32), 2 * (a7 & 1), &c);
  LOBYTE(__p) = 0;
  v96[0] = 0;
  v43 = *(_QWORD *)c.count;
  MTLHashKey::MTLHashKey((uint64_t)&v120, (uint64_t)md);
  v44 = *v11;
  v45 = MEMORY[0x1E0C809B0];
  v115[0] = MEMORY[0x1E0C809B0];
  v115[1] = 3221225472;
  v115[2] = ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke;
  v115[3] = &__block_descriptor_80_e37__v16__0__NSObject_OS_dispatch_data__8l;
  v115[4] = a1;
  v115[5] = v42;
  v116 = *(_OWORD *)md;
  v117 = v119;
  v46 = (void *)(*(uint64_t (**)(uint64_t, MTLHashKey *, uint64_t, MTLLibraryContainer **, void **, _QWORD *))(*(_QWORD *)v43 + 136))(v43, &v120, v44, v96, &__p, v115);
  MTLHashKey::~MTLHashKey(&v120);
  if (v46)
  {
    if (a9)
    {
      v48 = *(_QWORD *)c.count;
      v49 = MTLHashKey::MTLHashKey(v47, (uint64_t)md);
      (*(void (**)(uint64_t, MTLHashKey *, _QWORD, void *, void *, __n128))(*(_QWORD *)v48 + 144))(v48, &v120, *v11, a3, v46, v49);
      MTLHashKey::~MTLHashKey(&v120);
    }
    v50 = (_QWORD *)*v11;
    v51 = (std::__shared_weak_count *)v11[1];
    v93[0] = v50;
    v93[1] = &v51->__vftable;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(p_shared_owners);
      while (__stxr(v53 + 1, p_shared_owners));
    }
    storeStitchingTrackingData(a7, a3, v93, v46);
    if (v51)
    {
      v54 = (unint64_t *)&v51->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    (*(void (**)(uint64_t, void *, _QWORD))(a4 + 16))(a4, v46, 0);

  }
  else if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)c.count + 120))(*(_QWORD *)c.count))
  {
    v56 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Failed to find library in binary archive.");
    if (!v56)
      v56 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", "Failed to find library in binary archive.", 1);
    v57 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v56, *MEMORY[0x1E0CB2D50]);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(a4 + 16))(a4, 0, objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v57));
  }
  else if ((_BYTE)__p)
  {
    v58 = a1[4];
    v59 = _MTLGetMTLCompilerLLVMVersionForDevice(v58);
    CompilerConnectionManager = getCompilerConnectionManager(v58, v59);
    v61 = operator new();
    *(_QWORD *)(v61 + 16) = 0;
    *(_QWORD *)v61 = &off_1E0FDEF60;
    *(_OWORD *)(v61 + 32) = 0u;
    *(_OWORD *)(v61 + 48) = 0u;
    *(_OWORD *)(v61 + 64) = 0u;
    *(_OWORD *)(v61 + 73) = 0u;
    *(_DWORD *)(v61 + 8) = 14;
    *(_QWORD *)(v61 + 40) = a2;
    v62 = *(void **)(v61 + 48);
    if (v62)

    *(_QWORD *)(v61 + 48) = a3;
    v63 = (std::__shared_weak_count *)v11[1];
    v91 = *v11;
    v92 = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
    std::shared_ptr<CompilerConnection>::operator=[abi:ne180100]((_QWORD *)(v61 + 56), &v91);
    v66 = v92;
    if (v92)
    {
      v67 = (unint64_t *)&v92->__shared_owners_;
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (a9)
    {
      v120.var0.var0 = 0;
      v69 = (const char *)objc_msgSend((id)-[std::__shared_weak_count_vtbl getArchiveIDWithErrorInternal:](a9, "getArchiveIDWithErrorInternal:", &v120), "UTF8String");
      if (v120.var0.var0)
      {
        (*(void (**)(uint64_t, _QWORD))(a4 + 16))(a4, 0);
        goto LABEL_85;
      }
      MTLCompilerStitchingRequest::setBinaryArchiveID((MTLCompilerStitchingRequest *)v61, v69);
      *(_BYTE *)(v61 + 88) = 1;
    }
    v70 = a9;
    v105[0] = v45;
    v105[1] = 3321888768;
    v105[2] = ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke_2;
    v105[3] = &unk_1E0FDE948;
    v112 = a9 != 0;
    v105[8] = a1;
    v105[9] = *(_QWORD *)c.count;
    v106 = *(std::__shared_weak_count **)c.hash;
    if (*(_QWORD *)c.hash)
    {
      v71 = (unint64_t *)(*(_QWORD *)c.hash + 8);
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
    }
    v113 = *(_OWORD *)md;
    v114 = v119;
    v74 = *v11;
    v73 = (std::__shared_weak_count *)v11[1];
    v107 = v42;
    v108 = v74;
    v109 = v73;
    if (v73)
    {
      v75 = (unint64_t *)&v73->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    v105[4] = a9;
    v105[5] = a3;
    v110 = v96[0];
    v111 = a7;
    v105[6] = v70;
    v105[7] = a4;
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD *))(*(_QWORD *)CompilerConnectionManager + 24))(CompilerConnectionManager, 0, v61, HIDWORD(v86), v105);
    v77 = v109;
    if (v109)
    {
      v78 = (unint64_t *)&v109->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v106;
    if (v106)
    {
      v81 = (unint64_t *)&v106->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, id))(a4 + 16))(a4, 0, v96[0]->var8);
    MTLLibraryBuilder::releaseCacheEntry((MTLLibraryBuilder *)a1, v96[0]);
  }
LABEL_85:
  v83 = *(std::__shared_weak_count **)c.hash;
  if (*(_QWORD *)c.hash)
  {
    v84 = (unint64_t *)(*(_QWORD *)c.hash + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_1827770E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v34);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v33);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = operator new();
  LibraryWithData::LibraryWithData((_QWORD *)v5, *(_QWORD *)(a1 + 40), (__int128 *)(a1 + 48), a2, 0);
  *(_DWORD *)(v5 + 624) = 14;
  if ((MTLLibraryDataWithArchive::parseArchive((os_unfair_lock_s *)v5, 0, *(unsigned __int8 *)(v4 + 40), *(void **)(v4 + 32)) & 1) == 0)
  {
    if (!MTLAtomicDecrement((unsigned int *)(v5 + 80)))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return 0;
  }
  return v5;
}

void sub_182777220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

void storeStitchingTrackingData(char a1, void *a2, _QWORD **a3, void *a4)
{
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  NSObject **v22;
  NSObject **v23;
  NSObject *v24;
  NSObject **v25;
  NSObject **v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  void *__p;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  char *v44;
  char *v45;
  std::__shared_weak_count *v46;

  if (storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::onceToken == -1)
  {
    if ((a1 & 2) == 0)
      goto LABEL_3;
  }
  else
  {
    dispatch_once(&storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::onceToken, &__block_literal_global_1382);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if (!storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::enableMetalScriptCollection)
        return;
    }
  }
  v8 = operator new(0x40uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E0FDF3B8;
  *((_OWORD *)v8 + 3) = 0u;
  v8[3] = &off_1E0FDEF88;
  v9 = (char *)(v8 + 3);
  *((_OWORD *)v8 + 2) = 0u;
  v45 = (char *)(v8 + 3);
  v46 = (std::__shared_weak_count *)v8;
  v8[4] = a2;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v10 = (_QWORD *)**a3;
  v11 = (_QWORD *)(*a3)[1];
  if (v10 == v11)
  {
    v12 = 0;
    v21 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      if (v12 >= v44)
      {
        v13 = (v12 - (_BYTE *)v42) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v14 = (v44 - (_BYTE *)v42) >> 2;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if ((unint64_t)(v44 - (_BYTE *)v42) >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v44, v15);
        else
          v16 = 0;
        v17 = &v16[8 * v13];
        *(_QWORD *)v17 = *v10;
        v12 = v17 + 8;
        v19 = (char *)v42;
        v18 = v43;
        if (v43 != v42)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *((_QWORD *)v17 - 1) = v20;
            v17 -= 8;
          }
          while (v18 != v19);
          v18 = (char *)v42;
        }
        v42 = v17;
        v43 = v12;
        v44 = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_QWORD *)v12 = *v10;
        v12 += 8;
      }
      v43 = v12;
      v10 += 5;
    }
    while (v10 != v11);
    v9 = v45;
    v21 = v42;
  }
  __p = 0;
  v40 = 0;
  v41 = 0;
  std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__init_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(&__p, v21, (uint64_t)v12, (v12 - (_BYTE *)v21) >> 3);
  v22 = (NSObject **)*((_QWORD *)v9 + 2);
  v23 = (NSObject **)*((_QWORD *)v9 + 3);
  while (v22 != v23)
  {
    v24 = *v22++;
    dispatch_release(v24);
  }
  if (v9 + 16 != (char *)&__p)
    std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__assign_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(v9 + 16, (char *)__p, (uint64_t)v40, (v40 - (_BYTE *)__p) >> 3);
  v25 = (NSObject **)*((_QWORD *)v9 + 2);
  v26 = (NSObject **)*((_QWORD *)v9 + 3);
  while (v25 != v26)
  {
    v27 = *v25++;
    dispatch_retain(v27);
  }
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  v28 = objc_msgSend(a4, "libraryData");
  v37 = v45;
  v38 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, char **))(*(_QWORD *)v28 + 280))(v28, &v37);
  v31 = v38;
  if (v38)
  {
    v32 = (unint64_t *)&v38->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v42)
  {
    v43 = (char *)v42;
    operator delete(v42);
  }
  v34 = v46;
  if (v46)
  {
    v35 = (unint64_t *)&v46->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

void sub_182777544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

char *MTLCompilerStitchingRequest::setBinaryArchiveID(MTLCompilerStitchingRequest *this, const char *__s)
{
  void *v4;
  char *result;

  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
    free(v4);
  *((_QWORD *)this + 10) = strlen(__s) + 1;
  result = strdup(__s);
  *((_QWORD *)this + 9) = result;
  return result;
}

void ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke_2(uint64_t a1, uint64_t a2, dispatch_data_t data, uint64_t a4)
{
  MTLLibraryBuilder *v6;
  dispatch_data_t v8;
  NSObject *v9;
  unsigned int *v10;
  int v11;
  size_t v12;
  NSObject *subrange;
  const __CFString *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  MTLLibraryData *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  NSError *v30;
  uint64_t v31;
  NSMutableDictionary *v32;
  uint64_t v33;
  _MTLLibrary *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44[2];
  size_t size_ptr;
  void *buffer_ptr;
  NSError *v47;
  _QWORD v48[6];
  __int128 v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  __int128 v52;
  MTLHashKey v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = *(MTLLibraryBuilder **)(a1 + 64);
  v47 = 0;
  if (a2 || !data)
  {
    if (a4)
    {
      v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
      if (!v14)
        v14 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a4, 1);
    }
    else
    {
      v14 = CFSTR("empty error message");
    }
    v31 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v14, *MEMORY[0x1E0CB2D50]);
    v30 = (NSError *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v31);
    goto LABEL_32;
  }
  size_ptr = 0;
  buffer_ptr = 0;
  v8 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  if (!v8)
  {
    v28 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Compiler returned an empty reply.");
    if (!v28)
      v28 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", "Compiler returned an empty reply.", 1);
    v29 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v28, *MEMORY[0x1E0CB2D50]);
    v30 = (NSError *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 2, v29);
LABEL_32:
    subrange = 0;
    v23 = 0;
    v47 = v30;
LABEL_33:
    v27 = 1;
    goto LABEL_34;
  }
  v9 = v8;
  v10 = (unsigned int *)buffer_ptr;
  if (*((_DWORD *)buffer_ptr + 13))
  {
    if (*((_DWORD *)buffer_ptr + 12))
    {
      v11 = _MTLCompilePerformanceStatisticsEnabled();
      v10 = (unsigned int *)buffer_ptr;
      if (v11)
      {
        processCompileTimeStats((uint64_t)buffer_ptr, 0, 0);
        v10 = (unsigned int *)buffer_ptr;
      }
    }
  }
  if ((*(_BYTE *)v10 & 1) != 0 && (v12 = v10[11], (_DWORD)v12))
  {
    subrange = dispatch_data_create_subrange(data, v10[10], v12);
    v10 = (unsigned int *)buffer_ptr;
  }
  else
  {
    subrange = 0;
  }
  v47 = (NSError *)newErrorFromCompilerLog((uint64_t)v10);
  if (!*(_BYTE *)(a1 + 128))
  {
    v15 = (char *)buffer_ptr;
    v16 = *((unsigned int *)buffer_ptr + 10);
    size_ptr = *((unsigned int *)buffer_ptr + 11);
    v17 = *(_QWORD *)(a1 + 72);
    v18 = MTLHashKey::MTLHashKey((uint64_t)&v53, a1 + 129);
    (*(void (**)(uint64_t, MTLHashKey *, char *, size_t, __n128))(*(_QWORD *)v17 + 48))(v17, &v53, &v15[v16], size_ptr, v18);
    MTLHashKey::~MTLHashKey(&v53);
  }
  dispatch_release(v9);
  if (!subrange)
  {
    v23 = 0;
    goto LABEL_33;
  }
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 3321888768;
  v48[2] = ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke_3;
  v48[3] = &unk_1E0FDE8A0;
  v51 = *(_OWORD *)(a1 + 129);
  v52 = *(_OWORD *)(a1 + 145);
  v48[4] = subrange;
  v48[5] = v6;
  v19 = *(_OWORD *)(a1 + 88);
  v49 = v19;
  v20 = *(std::__shared_weak_count **)(a1 + 104);
  v50 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = (MTLLibraryData *)MTLLibraryCache::newLibraryData(v19, (__int128 *)(a1 + 129), (uint64_t)&v47, (uint64_t)v48);
  v24 = v50;
  if (v50)
  {
    v25 = (unint64_t *)&v50->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = 0;
LABEL_34:
  v32 = (NSMutableDictionary *)objc_opt_new();
  MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 112), v23, v32, 0, v47);
  v33 = *(_QWORD *)(a1 + 112);
  if (*(_QWORD *)(v33 + 48))
  {
    v34 = -[_MTLLibrary initWithLibraryContainer:device:]([_MTLLibrary alloc], "initWithLibraryContainer:device:", v33, *((_QWORD *)v6 + 4));
    if (v34)
    {
      if (*(_QWORD *)(a1 + 32))
      {
        v35 = *(_QWORD *)(a1 + 72);
        v36 = MTLHashKey::MTLHashKey((uint64_t)&v53, a1 + 129);
        (*(void (**)(uint64_t, MTLHashKey *, _QWORD, _QWORD, _MTLLibrary *, __n128))(*(_QWORD *)v35 + 144))(v35, &v53, *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 40), v34, v36);
        MTLHashKey::~MTLHashKey(&v53);
      }
      v37 = *(_QWORD *)(a1 + 120);
      v38 = *(void **)(a1 + 40);
      v39 = *(std::__shared_weak_count **)(a1 + 104);
      v44[0] = *(_QWORD **)(a1 + 96);
      v44[1] = &v39->__vftable;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      storeStitchingTrackingData(v37, v38, v44, v34);
      if (v39)
      {
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
    }
  }
  else
  {
    v34 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  MTLLibraryBuilder::releaseCacheEntry(v6, *(MTLLibraryContainer **)(a1 + 112));

  if ((v27 & 1) == 0)
    dispatch_release(subrange);
  if (v23)
    (*(void (**)(MTLLibraryData *))(*(_QWORD *)v23 + 24))(v23);

}

void sub_182777A8C(_Unwind_Exception *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, MTLHashKey *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a28);
  _Unwind_Resume(a1);
}

uint64_t newErrorFromCompilerLog(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;

  if (!*(_DWORD *)(a1 + 12))
    return 0;
  v1 = a1 + *(unsigned int *)(a1 + 8);
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", v1);
    v6 = newErrorWithWarningLog((uint64_t)v5);

    return v6;
  }
  else
  {
    v2 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v1);
    if (!v2)
      v2 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v1, 1);
    v3 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v2, *MEMORY[0x1E0CB2D50]);
    return objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v3);
  }
}

uint64_t ___ZN17MTLLibraryBuilder17newLibraryWithDAGEP8NSStringP7NSArrayIPU22objcproto11MTLFunction11objc_objectEU13block_pointerFvPU21objcproto10MTLLibrary11objc_objectP7NSErrorEbNSt3__110shared_ptrINSD_6vectorI21stitchedAirDescriptorNSD_9allocatorISG_EEEEEEmPS2_IPU27objcproto16MTLBinaryArchive11objc_objectESM__block_invoke_3(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = operator new();
  LibraryWithData::LibraryWithData((_QWORD *)v5, *(_QWORD *)(a1 + 48), (__int128 *)(a1 + 72), *(NSObject **)(a1 + 32), 0);
  *(_DWORD *)(v5 + 624) = 14;
  if (*(_QWORD *)(a1 + 56))
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 240))(v5);
  if ((MTLLibraryDataWithArchive::parseArchive((os_unfair_lock_s *)v5, (NSError **)a2, *(unsigned __int8 *)(v4 + 40), *(void **)(v4 + 32)) & 1) == 0)
  {
    if (!MTLAtomicDecrement((unsigned int *)(v5 + 80)))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = a2;
    return 0;
  }
  return v5;
}

void sub_182777C68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_56c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_56c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 56);
}

_QWORD *__copy_helper_block_e8_72c50_ZTSNSt3__110shared_ptrI22MultiLevelLibraryCacheEE96c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[10];
  result[9] = a2[9];
  result[10] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_72c50_ZTSNSt3__110shared_ptrI22MultiLevelLibraryCacheEE96c81_ZTSNSt3__110shared_ptrINS_6vectorI21stitchedAirDescriptorNS_9allocatorIS2_EEEEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 72;
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 96);
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
}

uint64_t MTLLibraryBuilder::newLibraryWithCIFilters(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  char v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  int v44;
  uint64_t *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  size_t *v88;
  size_t v89;
  int v90;
  _DWORD *v91;
  _DWORD *v92;
  int v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  uint64_t j;
  void *v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  _OWORD *v104;
  int64x2_t v105;
  _QWORD **v106;
  unint64_t v107;
  _DWORD *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  __CFString *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD v124[6];
  _QWORD v125[2];
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  void (*v135)(uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t);
  void (*v141)(uint64_t);
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  void *v147;
  char *v148;
  char *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  void *v154;
  char *v155;
  char *v156;
  void *v157;
  char *v158;
  char *v159;
  void *v160;
  char *v161;
  char *v162;
  void *v163;
  void *__p;
  unint64_t v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  _BYTE v170[128];
  _BYTE v171[128];
  _BYTE v172[128];
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  v8 = objc_msgSend(a2, "count");
  v166 = 0u;
  v167 = 0u;
  v168 = 0u;
  v169 = 0u;
  v9 = 0;
  v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v166, v172, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v167;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v167 != v11)
          objc_enumerationMutation(a2);
        v9 += objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v166 + 1) + 8 * i), "name"), "lengthOfBytesUsingEncoding:", 4)+ 1;
      }
      v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v166, v172, 16);
    }
    while (v10);
  }
  v13 = 12 * v8;
  v122 = a4;
  v118 = a1;
  if (v8)
  {
    v14 = (uint64_t *)(a3 + 8);
    v15 = v8;
    do
    {
      v16 = *v14;
      v14 += 3;
      v13 += 12 * v16;
      --v15;
    }
    while (v15);
  }
  v119 = v8;
  v120 = a3;
  v121 = v8;
  __p = 0;
  v163 = 0;
  v165 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v17 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v150, v171, 16);
  if (v17)
  {
    v18 = *(_QWORD *)v151;
LABEL_13:
    v19 = 0;
    while (1)
    {
      if (*(_QWORD *)v151 != v18)
        objc_enumerationMutation(a2);
      v20 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * v19);
      v21 = objc_msgSend(v20, "libraryData");
      v22 = v21;
      v23 = (char *)v163;
      if (v163 != __p)
      {
        while (*(_QWORD *)v23 != v21)
        {
          v23 += 8;
          if (v23 == __p)
          {
            v23 = (char *)__p;
            break;
          }
        }
      }
      if (v23 == __p)
      {
        v125[0] = 0;
        v137 = 0;
        v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v21 + 200))(v21, objc_msgSend(v20, "bitCodeOffset"), objc_msgSend(v20, "bitCodeFileSize"), v125, &v137);
        v28 = v27;
        if (v137)
          v29 = v27;
        else
          v29 = 0;
        if ((v29 & 1) == 0)
        {
          if (v122)
          {
            v112 = objc_msgSend(v20, "name");
            if (v28)
              v113 = CFSTR("invalid bitcode size 0 for function ");
            else
              v113 = CFSTR("unable to locate bitcode for function ");
            v114 = -[__CFString stringByAppendingString:](v113, "stringByAppendingString:", v112);
            v115 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v114, *MEMORY[0x1E0CB2D50]);
            *v122 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), 3, v115);
          }
          v116 = 0;
          goto LABEL_155;
        }
        v30 = (char *)__p;
        if ((unint64_t)__p >= v165)
        {
          v38 = ((_BYTE *)__p - (_BYTE *)v163) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v39 = (uint64_t)(v165 - (_QWORD)v163) >> 2;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if (v165 - (unint64_t)v163 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v165, v40);
          else
            v41 = 0;
          v45 = (uint64_t *)&v41[8 * v38];
          *v45 = v22;
          v31 = v45 + 1;
          v46 = (char *)__p;
          v47 = (char *)v163;
          if (__p != v163)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *--v45 = v48;
            }
            while (v46 != v47);
            v46 = (char *)v163;
          }
          v163 = v45;
          __p = v31;
          v165 = (unint64_t)&v41[8 * v40];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)__p = v22;
          v31 = v30 + 8;
        }
        __p = v31;
        v49 = v161;
        if (v161 >= v162)
        {
          v51 = (char *)v160;
          v52 = (v161 - (_BYTE *)v160) >> 3;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
            goto LABEL_165;
          v54 = v162 - (_BYTE *)v160;
          if ((v162 - (_BYTE *)v160) >> 2 > v53)
            v53 = v54 >> 2;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v162, v55);
            v51 = (char *)v160;
            v49 = v161;
          }
          else
          {
            v56 = 0;
          }
          v57 = &v56[8 * v52];
          *(_QWORD *)v57 = v125[0];
          v50 = v57 + 8;
          while (v49 != v51)
          {
            v58 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *((_QWORD *)v57 - 1) = v58;
            v57 -= 8;
          }
          v160 = v57;
          v161 = v50;
          v162 = &v56[8 * v55];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *(_QWORD *)v161 = v125[0];
          v50 = v49 + 8;
        }
        v161 = v50;
        v59 = v158;
        if (v158 >= v159)
        {
          v61 = (char *)v157;
          v62 = (v158 - (_BYTE *)v157) >> 3;
          v63 = v62 + 1;
          if ((unint64_t)(v62 + 1) >> 61)
LABEL_165:
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v64 = v159 - (_BYTE *)v157;
          if ((v159 - (_BYTE *)v157) >> 2 > v63)
            v63 = v64 >> 2;
          if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v65 = v63;
          if (v65)
          {
            v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v159, v65);
            v61 = (char *)v157;
            v59 = v158;
          }
          else
          {
            v66 = 0;
          }
          v67 = &v66[8 * v62];
          *(_QWORD *)v67 = v137;
          v60 = v67 + 8;
          while (v59 != v61)
          {
            v68 = *((_QWORD *)v59 - 1);
            v59 -= 8;
            *((_QWORD *)v67 - 1) = v68;
            v67 -= 8;
          }
          v157 = v67;
          v158 = v60;
          v159 = &v66[8 * v65];
          if (v61)
            operator delete(v61);
        }
        else
        {
          *(_QWORD *)v158 = v137;
          v60 = v59 + 8;
        }
        v158 = v60;
        v69 = ((unint64_t)((_BYTE *)__p - (_BYTE *)v163) >> 3) - 1;
        v70 = v155;
        if (v155 >= v156)
        {
          v32 = (char *)v154;
          v71 = (v155 - (_BYTE *)v154) >> 2;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v73 = v156 - (_BYTE *)v154;
          if ((v156 - (_BYTE *)v154) >> 1 > v72)
            v72 = v73 >> 1;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
            v36 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v36 = v72;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v156, v36);
            v32 = (char *)v154;
            v70 = v155;
          }
          else
          {
            v37 = 0;
          }
          v42 = &v37[4 * v71];
          *(_DWORD *)v42 = v69;
          v43 = v42 + 4;
          while (v70 != v32)
          {
            v74 = *((_DWORD *)v70 - 1);
            v70 -= 4;
            *((_DWORD *)v42 - 1) = v74;
            v42 -= 4;
          }
          goto LABEL_102;
        }
        *(_DWORD *)v155 = v69;
        v26 = v70 + 4;
      }
      else
      {
        v24 = (unint64_t)(v23 - (_BYTE *)v163) >> 3;
        v25 = v155;
        if (v155 >= v156)
        {
          v32 = (char *)v154;
          v33 = (v155 - (_BYTE *)v154) >> 2;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 62)
            std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
          v35 = v156 - (_BYTE *)v154;
          if ((v156 - (_BYTE *)v154) >> 1 > v34)
            v34 = v35 >> 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
            v36 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v36 = v34;
          if (v36)
          {
            v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v156, v36);
            v32 = (char *)v154;
            v25 = v155;
          }
          else
          {
            v37 = 0;
          }
          v42 = &v37[4 * v33];
          *(_DWORD *)v42 = v24;
          v43 = v42 + 4;
          while (v25 != v32)
          {
            v44 = *((_DWORD *)v25 - 1);
            v25 -= 4;
            *((_DWORD *)v42 - 1) = v44;
            v42 -= 4;
          }
LABEL_102:
          v154 = v42;
          v155 = v43;
          v156 = &v37[4 * v36];
          if (v32)
            operator delete(v32);
          goto LABEL_104;
        }
        *(_DWORD *)v155 = v24;
        v26 = v25 + 4;
      }
      v43 = v26;
LABEL_104:
      v155 = v43;
      if (++v19 == v17)
      {
        v17 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v150, v171, 16);
        if (v17)
          goto LABEL_13;
        break;
      }
    }
  }
  v75 = (v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v76 = (unint64_t)((_BYTE *)__p - (_BYTE *)v163) >> 3;
  v123 = v75 + v13 + 27;
  v77 = ((((_BYTE *)__p - (_BYTE *)v163) & 0x7FFFFFFF8) + v123) & 0xFFFFFFFFFFFFFFF8;
  v147 = 0;
  v148 = 0;
  v149 = 0;
  if ((_DWORD)v76)
  {
    v78 = 0;
    v79 = 0;
    v80 = ((unint64_t)((_BYTE *)__p - (_BYTE *)v163) >> 3);
    do
    {
      if (v78 >= v149)
      {
        v82 = (char *)v147;
        v83 = (v78 - (_BYTE *)v147) >> 3;
        v84 = v83 + 1;
        if ((unint64_t)(v83 + 1) >> 61)
          std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
        v85 = v149 - (_BYTE *)v147;
        if ((v149 - (_BYTE *)v147) >> 2 > v84)
          v84 = v85 >> 2;
        if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v84;
        if (v86)
        {
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<objc_object  {objcproto18MTLIOScratchBuffer}*>>((uint64_t)&v149, v86);
          v82 = (char *)v147;
          v78 = v148;
        }
        else
        {
          v87 = 0;
        }
        v88 = (size_t *)&v87[8 * v83];
        *v88 = v77;
        v81 = (char *)(v88 + 1);
        while (v78 != v82)
        {
          v89 = *((_QWORD *)v78 - 1);
          v78 -= 8;
          *--v88 = v89;
        }
        v147 = v88;
        v148 = v81;
        v149 = &v87[8 * v86];
        if (v82)
          operator delete(v82);
      }
      else
      {
        *(_QWORD *)v78 = v77;
        v81 = v78 + 8;
      }
      v148 = v81;
      v77 += (*((_QWORD *)v157 + v79++) + 7) & 0xFFFFFFFFFFFFFFF8;
      v78 = v81;
    }
    while (v79 != v80);
  }
  v90 = _MTLCompilePerformanceStatisticsEnabled();
  v91 = malloc_type_calloc(v77, 1uLL, 0x77C62C5EuLL);
  v92 = v91;
  *v91 = v121;
  v91[1] = v75 + 20;
  if (v90)
    v93 = 512;
  else
    v93 = 0;
  v91[2] = v76;
  v91[3] = v123 & 0xFFFFFFF8;
  v91[4] = v93;
  v145 = 0u;
  v146 = 0u;
  v143 = 0u;
  v144 = 0u;
  v94 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v143, v170, 16);
  if (v94)
  {
    v95 = v92 + 5;
    v96 = *(_QWORD *)v144;
    do
    {
      for (j = 0; j != v94; ++j)
      {
        if (*(_QWORD *)v144 != v96)
          objc_enumerationMutation(a2);
        v98 = *(void **)(*((_QWORD *)&v143 + 1) + 8 * j);
        objc_msgSend((id)objc_msgSend(v98, "name"), "getCString:maxLength:encoding:", v95, v75, 4);
        v95 = (_DWORD *)((char *)v95
                       + objc_msgSend((id)objc_msgSend(v98, "name"), "lengthOfBytesUsingEncoding:", 4)
                       + 1);
      }
      v94 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v143, v170, 16);
    }
    while (v94);
  }
  if (v121)
  {
    v99 = 0;
    v100 = (_DWORD *)((char *)v92 + v92[1]);
    v101 = v154;
    do
    {
      v102 = (unsigned __int8 *)(v120 + 24 * v99);
      v103 = *((_QWORD *)v102 + 1);
      *v100 = *v102;
      v100[1] = v101[v99];
      v100[2] = v103;
      v100 += 3;
      if ((int)v103 >= 1)
      {
        v103 = v103;
        v104 = (_OWORD *)(*((_QWORD *)v102 + 2) + 8);
        do
        {
          *v100 = *((_QWORD *)v104 - 1);
          v105 = *(int64x2_t *)v104;
          v104 = (_OWORD *)((char *)v104 + 24);
          *(int32x2_t *)(v100 + 1) = vmovn_s64(v105);
          v100 += 3;
          --v103;
        }
        while (v103);
      }
      ++v99;
    }
    while (v99 != v119);
  }
  v106 = (_QWORD **)v163;
  if (__p != v163)
  {
    v107 = 0;
    v108 = (_DWORD *)((char *)v92 + v92[3]);
    do
    {
      v109 = *((_QWORD *)v147 + v107);
      *v108 = v109;
      v110 = *((_QWORD *)v157 + v107);
      v108[1] = *((_QWORD *)v157 + v107);
      (*(void (**)(_QWORD *, char *, _QWORD, uint64_t))(*v106[v107] + 208))(v106[v107], (char *)v92 + v109, *((_QWORD *)v160 + v107), v110);
      ++v107;
      v106 = (_QWORD **)v163;
      v108 += 2;
    }
    while (v107 < ((_BYTE *)__p - (_BYTE *)v163) >> 3);
  }
  v137 = 0;
  v138 = &v137;
  v139 = 0x3052000000;
  v140 = __Block_byref_object_copy__10;
  v141 = __Block_byref_object_dispose__10;
  v142 = 0;
  v131 = 0;
  v132 = &v131;
  v133 = 0x3052000000;
  v134 = __Block_byref_object_copy__10;
  v135 = __Block_byref_object_dispose__10;
  v136 = 0;
  v125[0] = v92;
  v125[1] = v77;
  v126 = 5uLL;
  v127 = 0;
  v128 = 0x100000000;
  v129 = 0uLL;
  v130 = 0;
  v124[0] = MEMORY[0x1E0C809B0];
  v124[1] = 3221225472;
  v124[2] = ___ZN17MTLLibraryBuilder23newLibraryWithCIFiltersEPK7NSArrayPK29MTLImageFilterFunctionInfoSPIPP7NSError_block_invoke;
  v124[3] = &unk_1E0FE4350;
  v124[4] = &v137;
  v124[5] = &v131;
  MTLLibraryBuilder::newLibraryWithRequestData(v118, (uint64_t)v125, (uint64_t)v124);
  v111 = (void *)v132[5];
  if (v122)
    *v122 = v111;
  else

  v116 = v138[5];
  _Block_object_dispose(&v131, 8);
  _Block_object_dispose(&v137, 8);
  if (v147)
  {
    v148 = (char *)v147;
    operator delete(v147);
  }
LABEL_155:
  if (v154)
  {
    v155 = (char *)v154;
    operator delete(v154);
  }
  if (v157)
  {
    v158 = (char *)v157;
    operator delete(v157);
  }
  if (v160)
  {
    v161 = (char *)v160;
    operator delete(v160);
  }
  if (v163)
  {
    __p = v163;
    operator delete(v163);
  }
  return v116;
}

void sub_182778848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  void *a68;
  void *a71;
  void *v72;

  if (__p)
    operator delete(__p);
  if (a65)
    operator delete(a65);
  if (a68)
    operator delete(a68);
  if (a71)
    operator delete(a71);
  v72 = (void *)STACK[0x208];
  if (STACK[0x208])
  {
    STACK[0x210] = (unint64_t)v72;
    operator delete(v72);
  }
  _Unwind_Resume(a1);
}

id ___ZN17MTLLibraryBuilder23newLibraryWithCIFiltersEPK7NSArrayPK29MTLImageFilterFunctionInfoSPIPP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = a2;
  v5 = a2;
  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

uint64_t MTLLibraryBuilder::newDowngradedLibrary(MTLLibraryBuilder *this, MTLCompilerFunctionRequest *a2, int a3, NSError **a4)
{
  void *v8;
  uint64_t v9;
  _QWORD v11[6];
  void *v12[2];
  __int128 v13;
  MTLCompilerFunctionRequest *v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  uint64_t v32;

  v27 = 0;
  v28 = &v27;
  v29 = 0x3052000000;
  v30 = __Block_byref_object_copy__10;
  v31 = __Block_byref_object_dispose__10;
  v32 = 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x3052000000;
  v24 = __Block_byref_object_copy__10;
  v25 = __Block_byref_object_dispose__10;
  v26 = 0;
  v19 = 0;
  v20 = 0;
  downgradeRequestData(&v19, &v20, a2, a3);
  v13 = 0u;
  v16 = 1;
  v12[0] = v19;
  v12[1] = (void *)v20;
  LODWORD(v13) = 7;
  v14 = a2;
  v15 = a3;
  v17 = 0uLL;
  v18 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZN17MTLLibraryBuilder20newDowngradedLibraryEPK26MTLCompilerFunctionRequestjPP7NSError_block_invoke;
  v11[3] = &unk_1E0FE4350;
  v11[4] = &v27;
  v11[5] = &v21;
  MTLLibraryBuilder::newLibraryWithRequestData((uint64_t)this, (uint64_t)v12, (uint64_t)v11);
  free(v12[0]);
  v8 = (void *)v22[5];
  if (a4)
    *a4 = (NSError *)v8;
  else

  v9 = v28[5];
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v27, 8);
  return v9;
}

void sub_182778AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

char *downgradeRequestData(void **a1, unint64_t *a2, MTLCompilerFunctionRequest *a3, int a4)
{
  unint64_t var11;
  char *result;
  void *v10;
  int v11;

  if (a3->var17)
    var11 = 0;
  else
    var11 = a3->var11;
  result = (char *)malloc_type_calloc(var11 + 12, 1uLL, 0xCE6B7F6AuLL);
  v10 = result;
  if ((a4 - 32023) >= 2)
    v11 = 0x20000;
  else
    v11 = 131079;
  *(_DWORD *)result = v11;
  *((_DWORD *)result + 1) = a4;
  result[8] = result[8] & 0xFC | ((a3->var6 & 0x1000) != 0) | (2 * ((~a3->var6 & 0x81000) == 0));
  if (var11)
    result = (char *)MTLCompilerFunctionRequest::copyLinkData(a3, result + 12);
  *a1 = v10;
  *a2 = var11 + 12;
  return result;
}

id ___ZN17MTLLibraryBuilder20newDowngradedLibraryEPK26MTLCompilerFunctionRequestjPP7NSError_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id result;

  if (a2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = a2;
  result = a3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_1827791D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1827797CC(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1827798DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10B0C40DA8BEAA3);
  _Unwind_Resume(a1);
}

char *MTLCompilerFunctionRequest::setBinaryArchiveID(MTLCompilerFunctionRequest *this, const char *__s)
{
  char *var20;
  size_t v5;
  char *v6;

  var20 = this->var20;
  if (var20)
    free(var20);
  v5 = strlen(__s);
  v6 = (char *)malloc_type_malloc(v5 + 1, 0x69DE694FuLL);
  this->var20 = v6;
  return strcpy(v6, __s);
}

uint64_t __copy_helper_block_e8_88c51_ZTSNSt3__110shared_ptrI23MultiLevelFunctionCacheEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 96) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_88c51_ZTSNSt3__110shared_ptrI23MultiLevelFunctionCacheEE(uint64_t a1)
{
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 88);
}

void sub_18277A07C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18277A1F4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void removeShaderFunctionCache()
{
  std::__shared_weak_count *v0;
  unint64_t *p_shared_owners;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  __int128 v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  addOrRemoveShaderFunctionCache(v5, 1, &v3);
  v0 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v2 = __ldaxr(p_shared_owners);
    while (__stlxr(v2 - 1, p_shared_owners));
    if (!v2)
    {
      ((void (*)(std::__shared_weak_count *))v0->__on_zero_shared)(v0);
      std::__shared_weak_count::__release_weak(v0);
    }
  }
}

void sub_18277A5A4(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18277AB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,MTLHashKey *a23)
{
  uint64_t v23;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_18277ACDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, MTLHashKey *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE(uint64_t a1)
{
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_18277B968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void **a39)
{
  a39 = (void **)&a27;
  std::vector<-[MTLCompiler generateMachOWithID:binaryEntries:machOSpecializedData:machOType:Path:platform:bitcodeList:completionHandler:]::BinaryItem>::__destroy_vector::operator()[abi:ne180100](&a39);
  _Unwind_Resume(a1);
}

BOOL MTLCompilerMachORequest::CreateMachOFile(MTLCompilerMachORequest *this, const char *a2)
{
  int v4;
  void *v5;
  size_t v6;
  char *v7;
  _BOOL8 result;

  if (!a2)
    return 0;
  v4 = open(a2, 1538, 420);
  *((_DWORD *)this + 7) = v4;
  if (v4 == -1)
  {
    result = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
    if (result)
    {
      MTLCompilerMachORequest::CreateMachOFile((uint64_t)a2);
      return 0;
    }
  }
  else
  {
    v5 = (void *)*((_QWORD *)this + 4);
    if (v5)
      free(v5);
    v6 = strlen(a2);
    v7 = (char *)malloc_type_malloc(v6 + 1, 0xFF59817uLL);
    *((_QWORD *)this + 4) = v7;
    strcpy(v7, a2);
    return 1;
  }
  return result;
}

void sub_18277BF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18277C1A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MTLFunctionToolList::~MTLFunctionToolList(MTLFunctionToolList *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void sub_18277C9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

MTLHashKey *__Block_byref_object_copy__1100(uint64_t a1, uint64_t a2)
{
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 48), (const MTLHashKey *)(a2 + 48));
}

void __Block_byref_object_dispose__1101(uint64_t a1)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)(a1 + 48));
}

_QWORD *__copy_helper_block_e8_88c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE104c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE120c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE136c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v2 = a2[12];
  result[11] = a2[11];
  result[12] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[14];
  result[13] = a2[13];
  result[14] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[16];
  result[15] = a2[15];
  result[16] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a2[18];
  result[17] = a2[17];
  result[18] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_88c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE104c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE120c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE136c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 + 88;
  v2 = a1 + 104;
  v3 = a1 + 120;
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 136);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
}

void sub_18277D834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,char a61)
{
  uint64_t v61;

  MTLHashKey::~MTLHashKey((MTLHashKey *)(v61 - 224));

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_18277DBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_80c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE96c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE112c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[11];
  result[10] = a2[10];
  result[11] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[13];
  result[12] = a2[12];
  result[13] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[15];
  result[14] = a2[14];
  result[15] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_80c173_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypePU27objcproto16OS_dispatch_data8NSObjectNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S5_EEEEEEEE96c49_ZTSNSt3__110shared_ptrI21MultiLevelBinaryCacheEE112c148_ZTSNSt3__110shared_ptrINS_13unordered_mapI18CompilerOutputTypeP12MTLBinaryKeyNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorINS_4pairIKS2_S4_EEEEEEEE(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + 80;
  v2 = a1 + 96;
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 112);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v2);
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
}

void sub_18277E164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, MTLHashKey *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,...)
{
  va_list va;

  va_start(va, a27);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Block_object_dispose(&a3, 8);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18277E408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, MTLHashKey *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)&a18);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE(uint64_t a1)
{
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](a1 + 48);
}

void sub_18277E7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1117(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_18277EB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void _MTLAddCompilerServiceCompileTimeStats(void *a1, dispatch_data_t data)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  const __CFString *v10;
  __CFString **v11;
  NSObject *object;
  size_t size_ptr;
  void *buffer_ptr;

  size_ptr = 0;
  buffer_ptr = 0;
  object = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  v3 = size_ptr;
  if (size_ptr <= 3)
    goto LABEL_23;
  v4 = (char *)buffer_ptr;
  v5 = *(unsigned int *)buffer_ptr;
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = size_ptr - 8;
    v8 = 12 * v5;
    while (v6 + 4 < v3 && v7 < 0xFFFFFFFFFFFFFFFCLL)
    {
      switch(*(_DWORD *)&v4[v6 + 4])
      {
        case 0:
          v10 = MTLLibraryPerformanceKeyTotalFrontendTotalTime;
          break;
        case 1:
          v10 = MTLLibraryPerformanceKeyFunctionSpecialization;
          break;
        case 2:
          v10 = (const __CFString *)MTLLibraryPerformanceKeyCoreImageSPI;
          break;
        case 3:
        case 6:
          v10 = MTLCompileTimeStatisticsKeyTotal[0];
          break;
        case 4:
          v11 = MTLCompileTimeStatisticsKeyFrameworkTotal;
          goto LABEL_18;
        case 5:
          v11 = MTLCompileTimeStatisticsKeyBackendCompilerBuildRequest;
          goto LABEL_18;
        case 7:
          v11 = &MTLCompileTimeStatisticsKeyFrameworkInstrumentation;
LABEL_18:
          v10 = *v11;
          break;
        default:
          v10 = CFSTR("Invalid key");
          break;
      }
      if (v6 + 8 >= v3 || v7 <= 7)
        break;
      objc_msgSend(a1, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *(_QWORD *)&v4[v6 + 8]), v10);
      v6 += 12;
      v7 -= 12;
      if (v8 == v6)
        goto LABEL_22;
    }
LABEL_23:
    abort();
  }
LABEL_22:
  dispatch_release(object);
}

void sub_18277F2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

id reportErrorMessage(id result, const __CFString *a2, uint64_t a3, _QWORD *a4)
{
  id v6;
  const __CFString *v7;
  uint64_t v8;

  if (result)
  {
    v6 = result;
    if (a2)
      v7 = a2;
    else
      v7 = CFSTR("Compilation failed");
    v8 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v7, *MEMORY[0x1E0CB2D50]);
    result = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB35C8]), "initWithDomain:code:userInfo:", CFSTR("CompilerError"), v6, v8);
    if (a3)
    {
      return (id)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, id))(a3 + 16))(a3, 0, 0, result);
    }
    else if (a4)
    {
      *a4 = result;
    }
  }
  return result;
}

NSObject *newSerializedVertexDataForReflection(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v9;
  uint64_t v11;
  size_t size_ptr;
  void *buffer_ptr;

  if (objc_msgSend(a1, "vertexDescriptor"))
  {
    size_ptr = 0;
    buffer_ptr = 0;
    v9 = dispatch_data_create_map(a2, (const void **)&buffer_ptr, &size_ptr);
    if ((*((_BYTE *)buffer_ptr + 8) & 2) != 0)
    {
      dispatch_retain(a2);
    }
    else
    {
      v11 = 0;
      a2 = objc_msgSend(a1, "newSerializedVertexDataWithFlags:options:error:", a4 | 0x1C, a5, &v11);
    }
    dispatch_release(v9);
  }
  else
  {
    dispatch_retain(a2);
  }
  return a2;
}

void *newRenderPipeline(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, NSObject *a12, void *a13, unint64_t a14, uint64_t a15, MTLRenderPipelineReflectionInternal **a16, NSMutableDictionary *a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  char v30;
  MTLRenderPipelineReflectionInternal *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const __CFString *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  char v45;
  NSObject *v46;
  id v47;
  void *v48;
  unint64_t i;
  MTLDebugInstrumentationData *v50;
  MTLDebugInstrumentationData *v51;
  MTLDebugInstrumentationData *v52;
  MTLDebugInstrumentationData *v53;
  MTLRenderPipelineReflectionInternal *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v61;
  unsigned int v63;
  unint64_t v64;
  _QWORD *v65;
  void *v66;
  const __CFString *v67[2];

  v26 = a20;
  v67[0] = 0;
  if (a6)
    v27 = objc_msgSend(a11, "newRenderPipelineWithDescriptor:objectVariant:meshVariant:fragmentVariant:errorMessage:", a13, a9, a6, a2, v67);
  else
    v27 = objc_msgSend(a11, "newRenderPipelineWithDescriptor:vertexVariant:fragmentVariant:errorMessage:", a13, a4, a2, v67);
  v28 = (void *)v27;
  if (!v27)
  {
    reportErrorMessage((id)2, v67[0], a20, a21);
    return v28;
  }
  v58 = a8;
  v61 = a4;
  v29 = MTLGetCompilerOptions(a11, a14, a15, 0, 0);
  v30 = v29;
  if ((a14 & 0x40000) != 0 || (v31 = 0, (v29 & 1) != 0))
  {
    if (a6)
      v32 = objc_msgSend(a11, "pipelineFlagsWithObjectVariant:meshVariant:fragmentVariant:", a9, a6, a2);
    else
      v32 = objc_msgSend(a11, "pipelineFlagsWithVertexVariant:fragmentVariant:", v61, a2);
    v34 = v32;
    v35 = 0;
    if (a1 && (v30 & 1) != 0)
      v35 = objc_msgSend(*(id *)(a1 + 432), "objectForKey:", &stru_1E0FE5DC8);
    v57 = v35;
    if (!a5)
    {
      if ((v30 & 1) != 0)
        v37 = objc_msgSend(*(id *)(a3 + 432), "objectForKey:", &stru_1E0FE5DC8);
      else
        v37 = 0;
      v46 = newSerializedVertexDataForReflection(a13, a12, v33, a15, a14);
      v31 = -[MTLRenderPipelineReflectionInternal initWithVertexData:fragmentData:serializedVertexDescriptor:device:options:flags:]([MTLRenderPipelineReflectionInternal alloc], "initWithVertexData:fragmentData:serializedVertexDescriptor:device:options:flags:", v37, v57, v46, a11, a14, v34);
      dispatch_release(v46);
      if ((a14 & 0x440000) == 0)
      {
        v42 = a9;
        goto LABEL_48;
      }
      v43 = (void *)objc_msgSend(a11, "pipelinePerformanceStatisticsWithVertexVariant:fragmentVariant:vertexCompileTimeOutput:fragmentCompileTimeOutput:", v61, a2, a19, a18);
      if ((a14 & 0x400000) != 0)
      {
        v44 = a20;
        v45 = 1;
        v42 = a9;
        goto LABEL_38;
      }
      v42 = a9;
      goto LABEL_47;
    }
    v56 = v34;
    if (a8 && (v30 & 1) != 0)
    {
      v36 = objc_msgSend(*(id *)(a8 + 432), "objectForKey:", &stru_1E0FE5DC8);
    }
    else
    {
      v36 = 0;
      v38 = 0;
      v39 = 0;
      if ((v30 & 1) == 0)
      {
LABEL_25:
        v31 = -[MTLRenderPipelineReflectionInternal initWithObjectData:meshData:fragmentData:device:options:flags:]([MTLRenderPipelineReflectionInternal alloc], "initWithObjectData:meshData:fragmentData:device:options:flags:", v38, v39, v57, a11, a14, v56);
        v26 = a20;
        goto LABEL_26;
      }
    }
    v40 = objc_msgSend((id)objc_msgSend(a13, "gpuCompilerSPIOptions"), "description");
    if (v40)
      v41 = (const __CFString *)v40;
    else
      v41 = &stru_1E0FE5DC8;
    v39 = objc_msgSend(*(id *)(a5 + 432), "objectForKey:", v41);
    v38 = v36;
    goto LABEL_25;
  }
LABEL_26:
  v42 = a9;
  if ((a14 & 0x440000) == 0)
    goto LABEL_48;
  if (a5)
  {
    v43 = (void *)objc_msgSend(a11, "pipelinePerformanceStatisticsWithObjectVariant:meshVariant:fragmentVariant:objectCompileTimeOutput:meshCompileTimeOutput:fragmentCompileTimeOutput:", a9, a6, a2, a10, a7, a18);
    if ((a14 & 0x400000) != 0)
    {
      v44 = v26;
      v45 = 0;
LABEL_38:
      if (a3)
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)objc_msgSend(v43, "objectForKey:", MTLPipelinePerformanceKeyVertexShader[0]), MTLFunctionTypeVertex);
      if (a1)
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)objc_msgSend(v43, "objectForKey:", MTLPipelinePerformanceKeyFragmentShader[0]), MTLFunctionTypeFragment);
      if ((v45 & 1) == 0)
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)objc_msgSend(v43, "objectForKey:", MTLPipelinePerformanceKeyMeshShader[0]), MTLFunctionTypeMesh);
      if (v58)
        addDriverCompilerPerformanceData(a17, (NSMutableDictionary *)objc_msgSend(v43, "objectForKey:", MTLPipelinePerformanceKeyObjectShader[0]), MTLFunctionTypeObject);
      v26 = v44;
    }
  }
  else
  {
    v43 = (void *)objc_msgSend(a11, "pipelinePerformanceStatisticsWithVertexVariant:fragmentVariant:vertexCompileTimeOutput:fragmentCompileTimeOutput:", v61, a2, a19, a18);
    if ((a14 & 0x400000) != 0)
    {
      v44 = v26;
      v45 = 1;
      goto LABEL_38;
    }
  }
LABEL_47:
  -[MTLRenderPipelineReflectionInternal setPerformanceStatistics:](v31, "setPerformanceStatistics:", v43);
LABEL_48:
  if ((a14 & 0x200000) != 0)
  {
    v65 = 0;
    v66 = 0;
    v64 = 0;
    v63 = 0;
    if (a6)
      objc_msgSend(a11, "getConstantSamplersBitmasks:uniqueIdentifiers:constantSamplerCount:stride:forObjectVariant:meshVariant:fragmentVariant:", &v66, &v65, &v64, &v63, v42, a6, a2);
    else
      objc_msgSend(a11, "getConstantSamplersBitmasks:uniqueIdentifiers:constantSamplerCount:stride:forVertexVariant:fragmentVariant:", &v66, &v65, &v64, &v63, v61, a2);
    if (v64)
    {
      -[MTLRenderPipelineReflectionInternal setConstantSamplerDescriptorsFromBitmasks:stride:count:](v31, "setConstantSamplerDescriptorsFromBitmasks:stride:count:", v66, v63);
      v47 = objc_alloc(MEMORY[0x1E0C99DE8]);
      v48 = (void *)objc_msgSend(v47, "initWithCapacity:", v64);
      if (v64)
      {
        for (i = 0; i < v64; ++i)
          objc_msgSend(v48, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v65[i]), i);
      }
      -[MTLRenderPipelineReflectionInternal setConstantSamplerUniqueIdentifiers:](v31, "setConstantSamplerUniqueIdentifiers:", v48);

      free(v66);
      free(v65);
    }
  }
  if ((a14 & 0x1000000) != 0)
  {
    if (v61)
    {
      v50 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", objc_msgSend(v61, "debugInstrumentationData"));
      objc_msgSend(v28, "setVertexDebugInstrumentationData:", v50);

    }
    if (a2)
    {
      v51 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", objc_msgSend(a2, "debugInstrumentationData"));
      objc_msgSend(v28, "setFragmentDebugInstrumentationData:", v51);

    }
    if (v42)
    {
      v52 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", objc_msgSend(v42, "debugInstrumentationData"));
      objc_msgSend(v28, "setObjectDebugInstrumentationData:", v52);

    }
    if (a6)
    {
      v53 = -[MTLDebugInstrumentationData initWithData:]([MTLDebugInstrumentationData alloc], "initWithData:", objc_msgSend(a6, "debugInstrumentationData"));
      objc_msgSend(v28, "setMeshDebugInstrumentationData:", v53);

    }
  }
  if (v26)
  {
    (*(void (**)(uint64_t, void *, MTLRenderPipelineReflectionInternal *, _QWORD))(v26 + 16))(v26, v28, v31, 0);

    return 0;
  }
  else if (a16)
  {
    v54 = v31;
    *a16 = v31;
  }
  else if (v31)
  {

  }
  return v28;
}

uint64_t addDriverCompilerPerformanceData(NSMutableDictionary *a1, NSMutableDictionary *a2, MTLFunctionType a3)
{
  __CFString **v5;
  __CFString *v6;
  NSMutableDictionary *v7;
  uint64_t result;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a3 <= MTLFunctionTypeObject && ((1 << a3) & 0x186) != 0)
  {
    v5 = MTLPipelinePerformanceKeyVertexShader;
    if (a3 != MTLFunctionTypeVertex)
      v5 = MTLPipelinePerformanceKeyFragmentShader;
    if (a3 == MTLFunctionTypeObject)
      v5 = MTLPipelinePerformanceKeyObjectShader;
    if (a3 == MTLFunctionTypeMesh)
      v5 = MTLPipelinePerformanceKeyMeshShader;
    v6 = *v5;
    v7 = (NSMutableDictionary *)-[NSMutableDictionary objectForKey:](a1, "objectForKey:", *v5);
    if (!v7)
    {
      v7 = (NSMutableDictionary *)objc_alloc_init(MEMORY[0x1E0C99E08]);
      -[NSMutableDictionary setObject:forKey:](a1, "setObject:forKey:", v7, v6);

    }
  }
  else
  {
    v7 = a1;
  }
  result = objc_msgSend((id)-[NSMutableDictionary objectForKey:](v7, "objectForKey:", MTLCompileTimeStatisticsKeyCachedFunction[0]), "BOOLValue");
  if ((result & 1) == 0)
  {
    v9 = (void *)-[NSMutableDictionary objectForKey:](a2, "objectForKey:", MTLPipelinePerformanceKeyCompileTimeStatistics[0]);
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    result = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (result)
    {
      v10 = result;
      v11 = *(_QWORD *)v14;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v14 != v11)
            objc_enumerationMutation(v9);
          -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", objc_msgSend(v9, "objectForKey:", *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v12)), *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * v12));
          ++v12;
        }
        while (v10 != v12);
        result = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        v10 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_182780120(_Unwind_Exception *a1)
{
  RequiredFunctionKeys *v1;

  RequiredFunctionKeys::~RequiredFunctionKeys(v1);
  _Unwind_Resume(a1);
}

void sub_1827806CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_182780D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_182780EE8(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  NSObject *v13;

  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  v13 = *(NSObject **)(v11 - 88);
  if (v13)
    dispatch_release(v13);
  _Unwind_Resume(a1);
}

void sub_182781124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

dispatch_data_t VariantEntry::newSerializedKeyWithAdditionalData(VariantEntry *this, void *a2, size_t a3)
{
  unint64_t var1;
  unint64_t var2;
  size_t v8;
  char *v9;
  dispatch_data_t v10;

  var1 = this->var1;
  var2 = this->var2;
  if (!a2 || !a3)
    return dispatch_data_create(this->var0, var2 + var1, 0, 0);
  v8 = var1 + a3 + var2;
  v9 = (char *)malloc_type_malloc(v8, 0xC2EBA60BuLL);
  memcpy(v9, this->var0, this->var1);
  memcpy(&v9[this->var1], a2, a3);
  memcpy(&v9[this->var1 + a3], &this->var0[this->var1], this->var2);
  v10 = dispatch_data_create(v9, v8, 0, 0);
  free(v9);
  return v10;
}

uint64_t setLinkedFunctionsForRequest(MTLCompileFunctionRequestData *a1, MTLLinkedFunctions *a2)
{
  NSArray *v4;

  if (a2)
  {
    -[MTLCompileFunctionRequestData setVisibleFunctions:](a1, "setVisibleFunctions:", -[MTLLinkedFunctions functions](a2, "functions"));
    -[MTLCompileFunctionRequestData setVisibleFunctionGroups:](a1, "setVisibleFunctionGroups:", -[MTLLinkedFunctions groups](a2, "groups"));
    v4 = -[MTLLinkedFunctions privateFunctions](a2, "privateFunctions");
  }
  else
  {
    -[MTLCompileFunctionRequestData setVisibleFunctions:](a1, "setVisibleFunctions:", 0);
    -[MTLCompileFunctionRequestData setVisibleFunctionGroups:](a1, "setVisibleFunctionGroups:", 0);
    v4 = 0;
  }
  return -[MTLCompileFunctionRequestData setPrivateVisibleFunctions:](a1, "setPrivateVisibleFunctions:", v4);
}

void VariantEntry::insertVariant(uint64_t a1, void *a2, uint64_t a3, void *a4, NSObject *a5)
{
  os_unfair_lock_s *v10;
  id v11;
  NSObject *v12;

  v10 = (os_unfair_lock_s *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
  if (!*(_QWORD *)(a1 + 48))
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 48) = a2;
      v11 = a2;
    }
    *(_QWORD *)(a1 + 56) = a3;

    *(_QWORD *)(a1 + 64) = objc_msgSend(a4, "copy");
    v12 = *(NSObject **)(a1 + 72);
    if (v12)
      dispatch_release(v12);
    *(_QWORD *)(a1 + 72) = a5;
    if (a5)
      dispatch_retain(a5);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }
  os_unfair_lock_unlock(v10);
}

void sub_182781538(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18278162C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void VariantEntry::waitOrNotify(uint64_t a1, int a2, dispatch_queue_t queue, dispatch_block_t block)
{
  NSObject *v5;

  v5 = *(NSObject **)(a1 + 40);
  if (a2)
  {
    dispatch_group_notify(v5, queue, block);
  }
  else
  {
    dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    (*((void (**)(dispatch_block_t))block + 2))(block);
  }
}

void sub_182781CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_182781E2C(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  NSObject *v13;

  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  v13 = *(NSObject **)(v11 - 88);
  if (v13)
    dispatch_release(v13);
  _Unwind_Resume(a1);
}

void sub_182782068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void sub_18278236C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182782AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x308], 8);
  _Block_object_dispose(&STACK[0x328], 8);
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose(&STACK[0x368], 8);
  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_182782CAC(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  NSObject *v13;

  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  v13 = *(NSObject **)(v11 - 88);
  if (v13)
    dispatch_release(v13);
  _Unwind_Resume(a1);
}

void sub_182782EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void sub_1827831F0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void initTimebaseInfo(void)
{
  if (initTimebaseInfo(void)::onceToken != -1)
    dispatch_once(&initTimebaseInfo(void)::onceToken, &__block_literal_global_1135);
}

double ___Z16initTimebaseInfov_block_invoke()
{
  unint64_t v0;
  unint64_t v1;
  double result;
  mach_timebase_info info;

  mach_timebase_info(&info);
  LODWORD(v0) = info.numer;
  LODWORD(v1) = info.denom;
  result = (double)v0 / (double)v1;
  gMachTimeToNS = *(_QWORD *)&result;
  return result;
}

void sub_1827834DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_182784084(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose(&STACK[0x370], 8);
  if (STACK[0x3C0])
    dispatch_release((dispatch_object_t)STACK[0x3C0]);
  _Block_object_dispose(&STACK[0x3D8], 8);
  _Block_object_dispose(&STACK[0x400], 8);
  _Block_object_dispose(&STACK[0x420], 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1142(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  result = a2[5];
  a1[6].n128_u64[0] = a2[6].n128_u64[0];
  a1[5] = result;
  return result;
}

void __Block_byref_object_dispose__1143(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 80);
  if (v1)
    dispatch_release(v1);
}

void sub_182784254(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  _Unwind_Resume(a1);
}

void sub_182784790(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182784F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a64, 8);
  if (STACK[0x208])
    dispatch_release((dispatch_object_t)STACK[0x208]);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose((const void *)(v64 - 232), 8);
  _Block_object_dispose((const void *)(v64 - 200), 8);
  _Block_object_dispose((const void *)(v64 - 168), 8);
  _Block_object_dispose((const void *)(v64 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1827850EC(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  _Unwind_Resume(a1);
}

void sub_182785510(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182785684(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_182786350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t v66;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a66, 8);
  if (STACK[0x218])
    dispatch_release((dispatch_object_t)STACK[0x218]);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose((const void *)(v66 - 232), 8);
  _Block_object_dispose((const void *)(v66 - 200), 8);
  _Block_object_dispose((const void *)(v66 - 168), 8);
  _Block_object_dispose((const void *)(v66 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1827864C8(_Unwind_Exception *a1, uint64_t a2, RequiredFunctionKeys *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  RequiredFunctionKeys::~RequiredFunctionKeys((RequiredFunctionKeys *)&a11);
  _Unwind_Resume(a1);
}

void sub_182786A48(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_182786BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t MTLLibraryData::copyData(MTLLibraryData *this)
{
  size_t v2;
  void *v3;

  v2 = (*(uint64_t (**)(MTLLibraryData *))(*(_QWORD *)this + 328))(this);
  v3 = malloc_type_malloc(v2, 0x41931ACEuLL);
  (*(void (**)(MTLLibraryData *, _QWORD))(*(_QWORD *)this + 312))(this, 0);
  if ((*(uint64_t (**)(MTLLibraryData *, void *, size_t))(*(_QWORD *)this + 320))(this, v3, v2) == v2)
    return objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:", v3, v2);
  free(v3);
  return 0;
}

uint64_t MTLCachedLibraryData::variableList(MTLCachedLibraryData *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t MTLCachedLibraryData::installName(MTLCachedLibraryData *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t MTLCachedLibraryData::libraryIdentifier(MTLCachedLibraryData *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t MTLLibraryDataWithArchive::airVersion(MTLLibraryDataWithArchive *this)
{
  return *((unsigned int *)this + 155);
}

uint64_t MTLLibraryData::getArchiveData(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryDataWithArchive::isStub(MTLLibraryDataWithArchive *this)
{
  return *((unsigned __int8 *)this + 162) >> 7;
}

uint64_t MTLLibraryData::isProxy(MTLLibraryData *this)
{
  return 0;
}

BOOL MTLLibraryDataWithArchive::isFromSource(MTLLibraryDataWithArchive *this)
{
  int v1;

  v1 = *((_DWORD *)this + 156);
  return v1 == 13 || v1 == 3;
}

_QWORD *MTLLibraryDataWithArchive::setStitchedLibraryTrackingData(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<CompilerConnection>::operator=[abi:ne180100]((_QWORD *)(a1 + 424), a2);
}

uint64_t MTLLibraryData::libraryUUID(MTLLibraryData *this)
{
  return (uint64_t)this + 8;
}

uint64_t MTLLibraryData::externFunctionNames(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::variableList(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::importedSymbols(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::importedLibraries(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::specializationHashes(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::stitchingHashes(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::installName(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::libraryIdentifier(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::airVersion(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::newBitCodeWithHash()
{
  return 0;
}

uint64_t MTLLibraryData::newMetalScript(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::newFunctionReflectionData(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLLibraryData::newFunction()
{
  return 0;
}

{
  return 0;
}

uint64_t MTLLibraryData::newSpecializedFunction()
{
  return 0;
}

uint64_t MTLLibraryData::newStitchedFunction()
{
  return 0;
}

void MTLLibraryData::parseDynamicLibraryBitCode(MTLLibraryData *this, unint64_t *a2, unint64_t *a3)
{
  *a2 = 0;
  *a3 = 0;
}

void MTLLibraryData::parseDynamicLibraryReflection(MTLLibraryData *this, unint64_t *a2, unint64_t *a3, NSError **a4)
{
  *a2 = 0;
  *a3 = 0;
}

uint64_t MTLLibraryData::getFunctionNameAndAliasWithHash()
{
  return 0;
}

uint64_t MTLLibraryData::isStub(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::isProxy(MTLProxyLibraryData *this)
{
  return 1;
}

uint64_t MTLLibraryData::isFromSource(MTLLibraryData *this)
{
  return 0;
}

void MTLLibraryData::getInputListForStitchedFunction(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t MTLLibraryData::getType(MTLLibraryData *this)
{
  return 0;
}

uint64_t MTLProxyLibraryData::libraryPath(MTLProxyLibraryData *this)
{
  return 0;
}

void MTLLibraryDataWithSource::~MTLLibraryDataWithSource(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&off_1E0FE0DB8;
  dispatch_release(this[23]);
  dispatch_release(this[22]);
  MTLCachedLibraryData::~MTLCachedLibraryData((MTLCachedLibraryData *)this);
}

{
  *this = (dispatch_object_t)&off_1E0FE0DB8;
  dispatch_release(this[23]);
  dispatch_release(this[22]);
  MTLCachedLibraryData::~MTLCachedLibraryData((MTLCachedLibraryData *)this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLCachedLibraryData::functionNames(MTLCachedLibraryData *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t MTLLibraryData::functionHashes(MTLLibraryData *this)
{
  return 0;
}

BOOL MTLLibraryDataWithSource::isFromSource(MTLLibraryDataWithSource *this)
{
  int v1;

  v1 = *((_DWORD *)this + 52);
  return v1 == 13 || v1 == 3;
}

BOOL MTLLibraryDataWithSource::setPosition(MTLLibraryDataWithSource *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 20);
  if (v2 >= a2)
    *((_QWORD *)this + 21) = a2;
  return v2 >= a2;
}

size_t MTLLibraryDataWithSource::readBytes(MTLLibraryDataWithSource *this, void *__dst, size_t a3)
{
  uint64_t v3;
  size_t v4;

  v3 = *((_QWORD *)this + 21);
  if (v3 + a3 > *((_QWORD *)this + 20))
    return 0;
  v4 = a3;
  memcpy(__dst, (const void *)(*((_QWORD *)this + 19) + v3), a3);
  *((_QWORD *)this + 21) += v4;
  return v4;
}

uint64_t MTLLibraryDataWithSource::getFileSize(MTLLibraryDataWithSource *this)
{
  return *((_QWORD *)this + 20);
}

void MTLLibraryDataWithGLIR::~MTLLibraryDataWithGLIR(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&off_1E0FE0A38;
  dispatch_release(this[16]);
  dispatch_release(this[15]);
  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);
}

{
  *this = (dispatch_object_t)&off_1E0FE0A38;
  dispatch_release(this[16]);
  dispatch_release(this[15]);
  MTLLibraryData::~MTLLibraryData((MTLLibraryData *)this);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t MTLLibraryDataWithGLIR::functionNames(MTLLibraryDataWithGLIR *this)
{
  return 0;
}

BOOL MTLLibraryDataWithGLIR::setPosition(MTLLibraryDataWithGLIR *this, unint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 13);
  if (v2 >= a2)
    *((_QWORD *)this + 14) = a2;
  return v2 >= a2;
}

size_t MTLLibraryDataWithGLIR::readBytes(MTLLibraryDataWithGLIR *this, void *__dst, size_t a3)
{
  uint64_t v3;
  size_t v4;

  v3 = *((_QWORD *)this + 14);
  if (v3 + a3 > *((_QWORD *)this + 13))
    return 0;
  v4 = a3;
  memcpy(__dst, (const void *)(*((_QWORD *)this + 12) + v3), a3);
  *((_QWORD *)this + 14) += v4;
  return v4;
}

uint64_t MTLLibraryDataWithGLIR::getFileSize(MTLLibraryDataWithGLIR *this)
{
  return *((_QWORD *)this + 13);
}

uint64_t MTLLibraryData::functionNames(MTLLibraryData *this)
{
  return 0;
}

uint64_t ___ZL31getForcedMTLCompilerLLVMVersionv_block_invoke()
{
  uint64_t result;

  result = MTLGetEnvDefault("MTL_FORCE_MTLCOMPILER_LLVM_VERSION", 0);
  getForcedMTLCompilerLLVMVersion(void)::forcedLLVMVersion = result;
  return result;
}

uint64_t ___ZL26getMaxSupportedLLVMVersionb_block_invoke(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  stat v5;

  result = dlopen_preflight("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32023/MTLCompiler");
  if ((result & 1) != 0
    || (result = stat("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32023/MTLCompiler", &v5),
        !(_DWORD)result))
  {
    v3 = getMaxSupportedLLVMVersion(BOOL)::llvmVersion;
    if (getMaxSupportedLLVMVersion(BOOL)::llvmVersion <= 32023)
      v3 = 32023;
    getMaxSupportedLLVMVersion(BOOL)::llvmVersion = v3;
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    result = dlopen_preflight("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32024/MTLCompiler");
    if ((result & 1) != 0
      || (result = stat("/System/Library/PrivateFrameworks/MTLCompiler.framework/Versions/32024/MTLCompiler", &v5),
          !(_DWORD)result))
    {
      v4 = getMaxSupportedLLVMVersion(BOOL)::llvmVersion;
      if (getMaxSupportedLLVMVersion(BOOL)::llvmVersion <= 32024)
        v4 = 32024;
      getMaxSupportedLLVMVersion(BOOL)::llvmVersion = v4;
    }
  }
  return result;
}

uint64_t MTLLibraryDataWithGLIR::MTLLibraryDataWithGLIR(uint64_t a1, dispatch_object_t object)
{
  void *buffer_ptr;

  *(_QWORD *)a1 = off_1E0FE00A8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1E0FE0A38;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = object;
  dispatch_retain(object);
  buffer_ptr = 0;
  *(_QWORD *)(a1 + 128) = dispatch_data_create_map(object, (const void **)&buffer_ptr, (size_t *)(a1 + 104));
  *(_QWORD *)(a1 + 96) = buffer_ptr;
  return a1;
}

MTLStructType *initStructType(const char *a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  MTLDataType v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (v3 >= a3)
  {
    MEMORY[0x1E0C80A78](a1);
    v9 = (char *)&v25;
    v7 = 0;
  }
  else
  {
    v7 = a1[v3];
    *a2 = v3 + 1;
    MEMORY[0x1E0C80A78](a1);
    v9 = (char *)&v26 - v8;
    if (v7)
    {
      v10 = 0;
      v26 = a3;
      do
      {
        v11 = *a2;
        if (v11 >= a3)
        {
LABEL_9:
          v15 = 0;
          *a2 = v11;
        }
        else
        {
          v12 = *a2;
          v13 = *a2;
          while (1)
          {
            v14 = a1[v12];
            v12 = v13 + 1;
            if (!v14)
              break;
            ++v13;
            if (a3 == (_DWORD)v12)
            {
              LODWORD(v11) = a3;
              goto LABEL_9;
            }
          }
          *a2 = v12;
          v15 = &a1[v11];
        }
        if (v15)
          v16 = v15;
        else
          v16 = "";
        v17 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v16, v26, v27);
        v18 = *a2;
        if (v18 >= a3)
        {
          v19 = MTLDataTypeNone;
        }
        else
        {
          v19 = (unint64_t)a1[v18];
          LODWORD(v18) = v18 + 1;
          *a2 = v18;
        }
        v20 = v18;
        v21 = v18 + 4;
        if (v21 <= v26)
        {
          v22 = *(unsigned int *)&a1[v20];
          *a2 = v21;
        }
        else
        {
          v22 = 0;
        }
        v23 = (void *)typeFromBuffer(v19, a1, a2, a3);
        *(_QWORD *)&v9[8 * v10] = -[MTLStructMemberInternal initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:]([MTLStructMemberInternal alloc], "initWithName:offset:dataType:pixelFormat:aluType:indirectArgumentIndex:render_target:raster_order_group:details:", v17, 0, v19, 0, 0, v22, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v23);

        ++v10;
      }
      while (v10 != v7);
    }
  }
  return -[MTLStructType initWithMembers:count:]([MTLStructType alloc], "initWithMembers:count:", v9, v7);
}

uint64_t MTLLibraryDataWithArchive::MTLLibraryDataWithArchive(uint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  __int128 v5;
  id v6;

  *(_QWORD *)a1 = off_1E0FE00A8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  v5 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = a2;
  *(_QWORD *)a1 = off_1E0FE0F48;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_DWORD *)(a1 + 392) = 1065353216;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 620) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 640) = a4;
  v6 = a4;
  return a1;
}

void sub_182787B30(_Unwind_Exception *a1)
{
  MTLCachedLibraryData *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v6);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table((uint64_t)v1 + 440);
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v5);
  std::__tree<unsigned long,flexbuffers::Builder::KeyOffsetCompare,std::allocator<unsigned long>>::destroy(v4, *((_QWORD **)v1 + 51));
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,MTLStructTypeInternal *>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,MTLStructTypeInternal *>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)v1 + 280);
  MTLCachedLibraryData::~MTLCachedLibraryData(v1);
  _Unwind_Resume(a1);
}

_QWORD *LibraryWithData::LibraryWithData(_QWORD *a1, uint64_t a2, __int128 *a3, NSObject *a4, void *a5)
{
  _QWORD *v7;
  void *buffer_ptr;

  v7 = (_QWORD *)MTLLibraryDataWithArchive::MTLLibraryDataWithArchive((uint64_t)a1, a2, a3, a5);
  *v7 = &off_1E0FE0208;
  v7[83] = 0;
  v7[84] = a4;
  dispatch_retain(a4);
  buffer_ptr = 0;
  a1[85] = dispatch_data_create_map(a4, (const void **)&buffer_ptr, a1 + 82);
  a1[81] = buffer_ptr;
  return a1;
}

uint64_t LibraryWithData::getArchiveData(LibraryWithData *this)
{
  return *((_QWORD *)this + 84);
}

void ___ZL21_MTLGetLibrariesCacheP10_MTLDevice_block_invoke(uint64_t a1)
{
  int v1;
  const char *v2;
  char *v3;
  CC_LONG v4;
  uint64_t v5;
  CC_SHA256_CTX *p_c;
  char *__s;
  CC_SHA256_CTX c;
  unsigned __int8 md[16];
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = _MTLGetMTLCompilerLLVMVersionForDevice(*(void **)(a1 + 32));
  if (MEMORY[0x1E0D235A0])
  {
    v2 = (const char *)MTLGPUCompilerTimeStamp();
    if (!v2)
    {
      *(_OWORD *)md = 0u;
      v10 = 0u;
      goto LABEL_6;
    }
  }
  else
  {
    v2 = " ";
  }
  __s = 0;
  asprintf(&__s, "%s, %s", v2, "Aug  8 2024 21:41:45");
  v3 = __s;
  v4 = strlen(__s);
  *(_OWORD *)md = 0u;
  v10 = 0u;
  CC_SHA256_Init(&c);
  CC_SHA256_Update(&c, v3, v4);
  CC_SHA256_Final(md, &c);
  free(__s);
LABEL_6:
  v5 = operator new();
  if (v1)
  {
    std::to_string((std::string *)&c, v1);
    if ((c.hash[3] & 0x80000000) == 0)
      p_c = &c;
    else
      p_c = *(CC_SHA256_CTX **)c.count;
  }
  else
  {
    p_c = 0;
  }
  MTLLibraryCache::MTLLibraryCache(v5, (uint64_t)p_c, (__int128 *)md);
  _MTLGetLibrariesCache(_MTLDevice *)::gLibrariesCache = v5;
  if (v1)
  {
    if (SHIBYTE(c.hash[3]) < 0)
      operator delete(*(void **)c.count);
  }
}

void sub_182787DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  MEMORY[0x186DABFBC](v17, 0x1020C40EED5FAE2);
  _Unwind_Resume(a1);
}

void ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke(uint64_t a1, NSObject *a2, NSError *a3)
{
  uint64_t v5;
  uint64_t v6;
  MTLLibraryData *v7;
  NSMutableDictionary *v8;
  NSError *v9;
  _QWORD v10[7];
  MTLHashKey v11;
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = a3;
  if (a2)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3321888768;
    v10[2] = ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke_2;
    v10[3] = &unk_1E0FDE8D8;
    v10[6] = v5;
    MTLHashKey::MTLHashKey(&v11, (const MTLHashKey *)(a1 + 56));
    v12 = *(_DWORD *)(a1 + 144);
    v13 = *(_BYTE *)(a1 + 148);
    v6 = *(_QWORD *)(a1 + 32);
    v10[4] = a2;
    v10[5] = v6;
    v7 = (MTLLibraryData *)MTLLibraryCache::newLibraryData(v5, (__int128 *)(a1 + 80), (uint64_t)&v9, (uint64_t)v10);
    MTLHashKey::~MTLHashKey(&v11);
  }
  else
  {
    v7 = 0;
  }
  v8 = (NSMutableDictionary *)objc_opt_new();
  MTLLibraryContainer::init(*(MTLLibraryContainer **)(a1 + 136), v7, v8, 0, v9);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (a2)
    dispatch_release(a2);
  if (v7)
    (*(void (**)(MTLLibraryData *))(*(_QWORD *)v7 + 24))(v7);

}

void sub_182787F44(_Unwind_Exception *a1)
{
  MTLHashKey *v1;

  MTLHashKey::~MTLHashKey(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke_2(uint64_t a1, id *a2)
{
  uint64_t v4;
  id v5;

  v4 = operator new();
  LibraryWithData::LibraryWithData((_QWORD *)v4, *(_QWORD *)(a1 + 48), (__int128 *)(a1 + 80), *(NSObject **)(a1 + 32), 0);
  *(_DWORD *)(v4 + 624) = *(_DWORD *)(a1 + 136);
  if ((MTLLibraryDataWithArchive::parseArchive((os_unfair_lock_s *)v4, (NSError **)a2, *(unsigned __int8 *)(a1 + 140), *(void **)(a1 + 40)) & 1) == 0)
  {
    if (!MTLAtomicDecrement((unsigned int *)(v4 + 80)))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *a2;
    return 0;
  }
  return v4;
}

void sub_182788004(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C4047F5CA44);
  _Unwind_Resume(a1);
}

MTLHashKey *__copy_helper_block_e8_56c17_ZTSK10MTLHashKey(uint64_t a1, uint64_t a2)
{
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 56), (const MTLHashKey *)(a2 + 56));
}

void __destroy_helper_block_e8_56c17_ZTSK10MTLHashKey(uint64_t a1)
{
  MTLHashKey::~MTLHashKey((MTLHashKey *)(a1 + 56));
}

void ___ZL40initLibraryContainerWithRequestToArchivePU23objcproto12MTLDeviceSPI11objc_objectP19MTLLibraryContainerRK21MTLLibraryRequestData10MTLHashKeyP15MTLLibraryCachebU13block_pointerFvvE_block_invoke_1363(uint64_t a1, uint64_t a2, dispatch_data_t data, uint64_t a4)
{
  dispatch_data_t v7;
  NSObject *v8;
  unsigned int *v9;
  int v10;
  size_t v11;
  dispatch_data_t subrange;
  const __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[2];
  size_t size_ptr;
  void *buffer_ptr;

  if (a2 || !data)
  {
    if (a4)
    {
      v13 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
      if (!v13)
        v13 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a4, 1);
    }
    else
    {
      v13 = CFSTR("empty error message");
    }
    v15 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v13, *MEMORY[0x1E0CB2D50]);
    v16 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v17 = 3;
    goto LABEL_22;
  }
  size_ptr = 0;
  buffer_ptr = 0;
  v7 = dispatch_data_create_map(data, (const void **)&buffer_ptr, &size_ptr);
  if (!v7)
  {
    v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Compiler returned an empty reply.");
    if (!v14)
      v14 = objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", "Compiler returned an empty reply.", 1);
    v15 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", v14, *MEMORY[0x1E0CB2D50]);
    v16 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v17 = 2;
LABEL_22:
    objc_msgSend(v16, "initWithDomain:code:userInfo:", CFSTR("MTLLibraryErrorDomain"), v17, v15);
    subrange = 0;
    goto LABEL_23;
  }
  v8 = v7;
  v9 = (unsigned int *)buffer_ptr;
  if (*((_DWORD *)buffer_ptr + 13))
  {
    if (*((_DWORD *)buffer_ptr + 12))
    {
      v10 = _MTLCompilePerformanceStatisticsEnabled();
      v9 = (unsigned int *)buffer_ptr;
      if (v10)
      {
        processCompileTimeStats((uint64_t)buffer_ptr, 0, 0);
        v9 = (unsigned int *)buffer_ptr;
      }
    }
  }
  if ((*(_BYTE *)v9 & 1) != 0 && (v11 = v9[11], (_DWORD)v11))
  {
    subrange = dispatch_data_create_subrange(data, v9[10], v11);
    v9 = (unsigned int *)buffer_ptr;
  }
  else
  {
    subrange = 0;
  }
  newErrorFromCompilerLog((uint64_t)v9);
  if (!*(_BYTE *)(a1 + 144))
  {
    v19 = size_ptr;
    v18 = buffer_ptr;
    v20 = *(std::__shared_weak_count **)(a1 + 56);
    v25[0] = *(_QWORD *)(a1 + 48);
    v25[1] = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    addReplyToCompilerCache((uint64_t)v18, v19, v25, a1 + 64);
    if (v20)
    {
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  dispatch_release(v8);
LABEL_23:
  (*(void (**)(_QWORD, dispatch_data_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), subrange);

}

void sub_182788298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t addReplyToCompilerCache(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1;
  if ((*(_BYTE *)a1 & 2) != 0)
  {
    v6 = *(unsigned int *)(a1 + 44);
    v5 = a1 + *(unsigned int *)(a1 + 40);
  }
  else
  {
    v6 = a2 - (*(_DWORD *)(a1 + 52) + *(_DWORD *)(a1 + 100));
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a3 + 48))(*a3, a4, v5, v6);
}

MTLHashKey *__copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE64c17_ZTSK10MTLHashKey(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return MTLHashKey::MTLHashKey((MTLHashKey *)(a1 + 64), (const MTLHashKey *)(a2 + 64));
}

void sub_182788344(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrI18MultiLevelAirCacheEE64c17_ZTSK10MTLHashKey(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 48;
  MTLHashKey::~MTLHashKey((MTLHashKey *)(a1 + 64));
  return std::shared_ptr<MultiLevelAirntBinaryCache>::~shared_ptr[abi:ne180100](v1);
}

__n128 __Block_byref_object_copy__1374(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v3;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t SerializedLibraryInfo::getLibraryInstallName(SerializedLibraryInfo *this)
{
  SerializedLibraryInfo *v1;
  id v2;

  v1 = this;
  if (*((char *)this + 23) < 0)
  {
    if (*((_QWORD *)this + 1))
      goto LABEL_3;
    return 0;
  }
  if (!*((_BYTE *)this + 23))
    return 0;
LABEL_3:
  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  if (*((char *)v1 + 23) < 0)
    v1 = *(SerializedLibraryInfo **)v1;
  return objc_msgSend(v2, "initWithUTF8String:", v1);
}

uint64_t ___ZL24processSerializedLibraryPU27objcproto16OS_dispatch_data8NSObjectPU19objcproto9MTLDevice11objc_object19MTLBuildRequestTypeRK10MTLHashKeybP36MTLBuildLibraryFromSourceReplyHeader14MTLLibraryTypeP19NSMutableDictionaryP14NSMutableArrayPP14MTLLibraryDataPP7NSError17MTLCompilerOption_block_invoke(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  MTLLibraryDataWithSource::MTLLibraryDataWithSource(v2, *(_QWORD *)(a1 + 48), (__int128 *)(*(_QWORD *)(a1 + 56) + 24), *(NSObject **)(a1 + 32), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 80));
  return v2;
}

void sub_182788454(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x186DABFBC](v1, 0x10F1C40502CF9C9);
  _Unwind_Resume(a1);
}

void SerializedLibraryInfo::~SerializedLibraryInfo(void **this)
{
  void **v2;

  v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void SerializedLibraryInfo::SerializedLibraryInfo(SerializedLibraryInfo *this, unsigned int *a2, uint64_t a3)
{
  std::vector<std::string> *v6;
  std::vector<std::string> *v7;
  std::vector<std::string> *v8;
  std::vector<std::string> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::vector<std::string> v14;
  std::vector<std::string> *v15;

  *((_OWORD *)this + 3) = 0u;
  v6 = (std::vector<std::string> *)((char *)this + 48);
  v7 = (std::vector<std::string> *)((char *)this + 24);
  v8 = (std::vector<std::string> *)((char *)this + 72);
  *((_OWORD *)this + 6) = 0u;
  v9 = (std::vector<std::string> *)((char *)this + 96);
  *((_QWORD *)this + 14) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  if (a2[15])
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, (char *)(a3 + a2[14]));
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
    *(std::vector<std::string> *)this = v14;
  }
  v10 = a2[17];
  if ((_DWORD)v10)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[16]), v10, &v14);
    std::vector<std::string>::__vdeallocate(v7);
    *((std::vector<std::string> *)this + 1) = v14;
    memset(&v14, 0, sizeof(v14));
    v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  v11 = a2[19];
  if ((_DWORD)v11)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[18]), v11, &v14);
    std::vector<std::string>::__vdeallocate(v6);
    *((std::vector<std::string> *)this + 2) = v14;
    memset(&v14, 0, sizeof(v14));
    v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  v12 = a2[21];
  if ((_DWORD)v12)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[20]), v12, &v14);
    std::vector<std::string>::__vdeallocate(v8);
    *((std::vector<std::string> *)this + 3) = v14;
    memset(&v14, 0, sizeof(v14));
    v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
  v13 = a2[23];
  if ((_DWORD)v13)
  {
    SerializedLibraryInfo::deserializeStringArray((const char *)(a3 + a2[22]), v13, &v14);
    std::vector<std::string>::__vdeallocate(v9);
    *((std::vector<std::string> *)this + 4) = v14;
    memset(&v14, 0, sizeof(v14));
    v15 = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  }
}

void sub_1827886CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  _Unwind_Resume(a1);
}

void SerializedLibraryInfo::deserializeStringArray(const char *a1@<X1>, unint64_t a2@<X2>, std::vector<std::string> *a3@<X8>)
{
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::vector<std::string>::size_type v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  NSObject *v19;
  size_t v20;
  std::vector<std::string>::pointer end;
  __int128 v22;
  std::vector<std::string>::pointer begin;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  const void **p_data;
  size_t v28;
  size_t v29;
  __int128 *p_p;
  const void *v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  char v34;
  uint64_t v35;
  std::string::size_type size;
  std::string *p_dst;
  char *v38;
  std::vector<std::string>::size_type v39;
  __int128 __p;
  unsigned __int8 v41;
  std::string __dst;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  if (a2 > 3)
  {
    v15 = *(unsigned int *)a1;
    std::vector<std::string>::reserve(a3, v15);
    if (!(_DWORD)v15)
      return;
    v16 = 0;
    v17 = (char *)(a1 + 4);
    v18 = a2 - 4;
    v19 = MEMORY[0x1E0C81028];
    v39 = v15;
    while (1)
    {
      v20 = strnlen(v17, v18);
      if (v20 && v20 < v18)
      {
        std::string::basic_string[abi:ne180100](&__dst, v17, v20);
        end = a3->__end_;
        if (end >= a3->__end_cap_.__value_)
        {
          v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (__int128 *)&__dst);
        }
        else
        {
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(a3->__end_, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          }
          else
          {
            v22 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
            end->__r_.__value_.__r.__words[2] = __dst.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
          }
          v35 = (uint64_t)&end[1];
          a3->__end_ = end + 1;
        }
        a3->__end_ = (std::vector<std::string>::pointer)v35;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __dst.__r_.__value_.__l.__size_;
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else
        {
          size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        v17 += size + 1;
        v18 += ~size;
        goto LABEL_47;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__dst.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v16 + 1;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v15;
        _os_log_error_impl(&dword_182636000, v19, OS_LOG_TYPE_ERROR, "Compiler deserialization error, tried to deserialize %zu out of %u strings, but ran out of data, or into an empty string.", (uint8_t *)&__dst, 0x12u);
      }
      memset(&__dst, 0, sizeof(__dst));
      begin = a3->__begin_;
      if (a3->__end_ == a3->__begin_)
      {
        v34 = 0;
      }
      else
      {
        v38 = v17;
        v24 = 0;
        v25 = 0;
        do
        {
          v26 = v18;
          p_data = (const void **)&begin[v24].__r_.__value_.__l.__data_;
          v28 = HIBYTE(begin[v24].__r_.__value_.__r.__words[2]);
          if ((v28 & 0x80u) == 0)
            v29 = v28;
          else
            v29 = (size_t)p_data[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v29 + 1);
          if ((v41 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = (__int128 *)__p;
          if (v29)
          {
            if (*((char *)p_data + 23) >= 0)
              v31 = p_data;
            else
              v31 = *p_data;
            memmove(p_p, v31, v29);
          }
          *(_WORD *)((char *)p_p + v29) = 32;
          if ((v41 & 0x80u) == 0)
            v32 = (const std::string::value_type *)&__p;
          else
            v32 = (const std::string::value_type *)__p;
          if ((v41 & 0x80u) == 0)
            v33 = v41;
          else
            v33 = *((_QWORD *)&__p + 1);
          std::string::append(&__dst, v32, v33);
          v18 = v26;
          if ((char)v41 < 0)
            operator delete((void *)__p);
          ++v25;
          begin = a3->__begin_;
          ++v24;
        }
        while (0xAAAAAAAAAAAAAAABLL * (((char *)a3->__end_ - (char *)a3->__begin_) >> 3) > v25);
        v34 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        v17 = v38;
        v19 = MEMORY[0x1E0C81028];
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        break;
      if (v34 < 0)
        goto LABEL_40;
LABEL_47:
      ++v16;
      LODWORD(v15) = v39;
      if (v16 == v39)
        return;
    }
    p_dst = &__dst;
    if (v34 < 0)
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = p_dst;
    _os_log_error_impl(&dword_182636000, v19, OS_LOG_TYPE_ERROR, "Current string list: %s", (uint8_t *)&__p, 0xCu);
    if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_47;
LABEL_40:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_47;
  }
  v5 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  if (v5)
    SerializedLibraryInfo::deserializeStringArray(v5, v6, v7, v8, v9, v10, v11, v12);
}

void sub_182788A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void *SerializedLibraryInfo::createArray(uint64_t **a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  id v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;

  if (a1[1] == *a1)
    return 0;
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = objc_alloc(MEMORY[0x1E0CB3940]);
      v6 = v3;
      if (*((char *)v3 + 23) < 0)
        v6 = (uint64_t *)*v3;
      v7 = objc_msgSend(v5, "initWithUTF8String:", v6);
      if (v7)
      {
        v8 = (void *)v7;
        objc_msgSend(v2, "addObject:", v7);

      }
      v3 += 3;
    }
    while (v3 != v4);
  }
  return v2;
}

uint64_t MTLLibraryDataWithSource::MTLLibraryDataWithSource(uint64_t a1, uint64_t a2, __int128 *a3, NSObject *a4, _QWORD *a5, uint64_t a6, uint64_t a7, int a8)
{
  __int128 v13;
  dispatch_data_t map;
  void *buffer_ptr;

  *(_QWORD *)a1 = off_1E0FE00A8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 80));
  v13 = *a3;
  *(_OWORD *)(a1 + 24) = a3[1];
  *(_OWORD *)(a1 + 8) = v13;
  *(_QWORD *)a1 = off_1E0FE0708;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = a2;
  MTLCachedLibraryData::swapLibraryInfo((_QWORD *)a1, a5);
  *(_QWORD *)a1 = &off_1E0FE0DB8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a4;
  dispatch_retain(a4);
  buffer_ptr = 0;
  map = dispatch_data_create_map(a4, (const void **)&buffer_ptr, (size_t *)(a1 + 160));
  *(_QWORD *)(a1 + 152) = buffer_ptr;
  *(_QWORD *)(a1 + 184) = map;
  *(_QWORD *)(a1 + 192) = a6;
  *(_QWORD *)(a1 + 200) = a7;
  *(_DWORD *)(a1 + 208) = a8;
  return a1;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  __int128 v46;
  BOOL v47;
  __n128 result;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  _OWORD *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  _OWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __n128 *v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t *n128_u64;
  BOOL v95;
  uint64_t v96;
  unint64_t *v97;
  __n128 *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  __n128 *v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t *v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  __n128 *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t *v158;
  __n128 *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t *v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  __int128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __n128 v185;
  __int128 v186;
  __n128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __n128 v197;
  __int128 v198;
  __n128 v199;
  __int128 v200;
  __int128 v201;
  __n128 v202;
  __int128 v203;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,createHashForStitchingLibraryRequest(NSString *,NSArray<objc_object  {objcproto11MTLFunction}*> *)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v33 = *(_OWORD *)a1;
        v32 = *((_OWORD *)a1 + 1);
        v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v24 = a1 + 4;
      v25 = a1 + 8;
      v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v28 = *(a2 - 4);
      v27 = a2 - 4;
      v29 = bswap64(v28);
      v30 = bswap64(a1[12]);
      if (v29 == v30
        && (v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        v31 = 0;
      }
      else if (v29 < v30)
      {
        v31 = -1;
      }
      else
      {
        v31 = 1;
      }
      if (v31 < 0)
      {
        v36 = *(_OWORD *)v26;
        v35 = *((_OWORD *)a1 + 7);
        v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        v38 = bswap64(*v26);
        v39 = bswap64(*v25);
        if (v38 != v39)
          goto LABEL_54;
        v38 = bswap64(a1[13]);
        v39 = bswap64(a1[9]);
        if (v38 == v39
          && (v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          v40 = 0;
        }
        else
        {
LABEL_54:
          v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          v42 = *(_OWORD *)v25;
          v41 = *((_OWORD *)a1 + 5);
          v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          v44 = bswap64(*v25);
          v45 = bswap64(*v24);
          if (v44 != v45)
            goto LABEL_64;
          v44 = bswap64(a1[9]);
          v45 = bswap64(a1[5]);
          if (v44 == v45
            && (v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
LABEL_64:
            v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            v48 = *(_OWORD *)v24;
            v47 = *((_OWORD *)a1 + 3);
            v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            v50 = bswap64(a1[4]);
            v51 = bswap64(*a1);
            if (v50 != v51)
              goto LABEL_73;
            v50 = bswap64(a1[5]);
            v51 = bswap64(a1[1]);
            if (v50 == v51
              && (v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              v52 = 0;
            }
            else
            {
LABEL_73:
              v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              v54 = *(_OWORD *)a1;
              v53 = *((_OWORD *)a1 + 1);
              v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v56 = *(_OWORD *)v11;
        v57 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v56);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v57), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

uint64_t ___ZL26storeStitchingTrackingDatamP7NSArrayIPU22objcproto11MTLFunction11objc_objectENSt3__110shared_ptrINS4_6vectorI21stitchedAirDescriptorNS4_9allocatorIS7_EEEEEEPU21objcproto10MTLLibrary11objc_object_block_invoke()
{
  uint64_t result;

  result = MTLGetEnvDefault("MTL_ENABLE_METAL_SCRIPT_COLLECTION", 0);
  storeStitchingTrackingData(unsigned long,NSArray<objc_object  {objcproto11MTLFunction}*> *,std::shared_ptr<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector<stitchedAirDescriptor,NSArray<objc_object  {objcproto11MTLFunction}*> *::allocator<NSArray<objc_object  {objcproto11MTLFunction}*> *::vector>>>,objc_object  {objcproto10MTLLibrary}*)::enableMetalScriptCollection = result != 0;
  return result;
}

void std::__shared_ptr_emplace<StitchedLibraryTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF3B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<StitchedLibraryTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF3B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<StitchedLibraryTrackingData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void StitchedLibraryTrackingData::~StitchedLibraryTrackingData(StitchedLibraryTrackingData *this)
{
  StitchedLibraryTrackingData::~StitchedLibraryTrackingData(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  void *v2;
  NSObject **v3;
  NSObject **v4;
  NSObject *v5;

  *(_QWORD *)this = &off_1E0FDEF88;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)

  v3 = (NSObject **)*((_QWORD *)this + 2);
  v4 = (NSObject **)*((_QWORD *)this + 3);
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      dispatch_release(v5);
    }
    while (v3 != v4);
    v3 = (NSObject **)*((_QWORD *)this + 2);
  }
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

char *std::vector<NSObject  {objcproto16OS_dispatch_data}*>::__assign_with_size[abi:ne180100]<NSObject  {objcproto16OS_dispatch_data}**,NSObject  {objcproto16OS_dispatch_data}**>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t MTLCompilerFunctionRequest::copyLinkData(MTLCompilerFunctionRequest *this, void *a2)
{
  uint64_t result;
  NSObject *v5;
  size_t v6;
  void *buffer_ptr;

  if (!a2)
    return 0;
  if (!this->var11)
    return 0;
  result = (uint64_t)this->var2;
  if (result)
  {
    v6 = 0;
    buffer_ptr = 0;
    v5 = dispatch_data_create_map((dispatch_data_t)result, (const void **)&buffer_ptr, &v6);
    memcpy(a2, (char *)buffer_ptr + v6 - this->var11, this->var11);
    dispatch_release(v5);
    return 1;
  }
  return result;
}

_QWORD *std::shared_ptr<MTLCompilerCache>::shared_ptr[abi:ne180100]<MTLCompilerCache,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E0FE2208;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_18278A874(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MTLCompilerCache *,std::shared_ptr<MTLCompilerCache>::__shared_ptr_default_delete<MTLCompilerCache,MTLCompilerCache>,std::allocator<MTLCompilerCache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_pointer<MTLCompilerCache *,std::shared_ptr<MTLCompilerCache>::__shared_ptr_default_delete<MTLCompilerCache,MTLCompilerCache>,std::allocator<MTLCompilerCache>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<MTLCompilerCache *,std::shared_ptr<MTLCompilerCache>::__shared_ptr_default_delete<MTLCompilerCache,MTLCompilerCache>,std::allocator<MTLCompilerCache>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::erase(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v6;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v6 = std::__tree<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,std::__map_value_compare<MTLUINT256_t,std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>,CompareHash,true>,std::allocator<std::__value_type<MTLUINT256_t,std::pair<unsigned int,unsigned long long>>>>::__remove_node_pointer(a1, v4);
      operator delete(v4);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

void MTLCompilerMachORequest::~MTLCompilerMachORequest(MTLCompilerMachORequest *this)
{
  MTLCompilerMachORequest::~MTLCompilerMachORequest(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  void *v2;
  int v3;
  NSObject *v4;

  *(_QWORD *)this = &off_1E0FE0BF8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
    free(v2);
  v3 = *((_DWORD *)this + 7);
  if (v3 != -1)
    close(v3);
  *(_QWORD *)this = &off_1E0FE05F0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    dispatch_release(v4);
}

uint64_t ___ZL14useRelaxedMathv_block_invoke()
{
  uint64_t result;

  result = MTLGetEnvDefault("MTL_REPLACE_FAST_MATH_WITH_RELAXED_MATH", 0);
  if (result)
    useRelaxedMath(void)::useRlxMath = 1;
  return result;
}

CC_SHA256_CTX *FunctionHashFactory::FunctionHashFactory(CC_SHA256_CTX *a1, void *a2, uint64_t a3, int a4, void *a5, void *a6, void *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  __int128 v22;
  unint64_t *v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  __int128 v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  __int128 v41;
  unint64_t *v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  char *v50;
  char *v51;
  __int128 v52;
  char *v53;
  int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __CFString *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  unsigned __int8 *v68;
  _OWORD *v69;
  CC_SHA256_CTX *v70;
  std::string v71;
  CC_SHA256_CTX c;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  void *__p;
  char *v82;
  unint64_t v83;
  int GPUCompilerSPIOptionsMask;
  unint64_t data;
  _OWORD v86[2];
  _OWORD v87[2];
  _OWORD md[2];
  _BYTE v89[128];
  _BYTE v90[128];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  CC_SHA256_Init(a1);
  v69 = (_OWORD *)(a3 + 56);
  CC_SHA256_Update(a1, (const void *)(a3 + 56), 0x20u);
  CC_SHA256_Update(a1, (const void *)objc_msgSend((id)objc_msgSend(a2, "name"), "UTF8String"), objc_msgSend((id)objc_msgSend(a2, "name"), "length"));
  v68 = (unsigned __int8 *)(a3 + 88);
  CC_SHA256_Update(a1, (const void *)(a3 + 88), 1u);
  data = a4 & 0xC7DC1C98;
  CC_SHA256_Update(a1, &data, 8u);
  GPUCompilerSPIOptionsMask = FunctionHashFactory::getGPUCompilerSPIOptionsMask((uint64_t)a1, a5);
  if (GPUCompilerSPIOptionsMask)
    CC_SHA256_Update(a1, &GPUCompilerSPIOptionsMask, 4u);
  __p = 0;
  v82 = 0;
  v83 = 0;
  if (!a6)
  {
    v14 = 0;
    if (a7)
      goto LABEL_5;
LABEL_7:
    v15 = 0;
    goto LABEL_8;
  }
  v14 = objc_msgSend(a6, "count");
  if (!a7)
    goto LABEL_7;
LABEL_5:
  v15 = objc_msgSend(a7, "count");
LABEL_8:
  std::vector<MTLUINT256_t>::reserve(&__p, v15 + v14);
  v70 = a1;
  if (a6)
  {
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v16 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v77, v90, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v78;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v78 != v17)
            objc_enumerationMutation(a6);
          v19 = objc_msgSend(*(id *)(*((_QWORD *)&v77 + 1) + 8 * i), "functionData");
          v20 = (_OWORD *)(v19 + 56);
          v21 = v82;
          if ((unint64_t)v82 >= v83)
          {
            v24 = (char *)__p;
            v25 = (v82 - (_BYTE *)__p) >> 5;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 59)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v27 = v83 - (_QWORD)__p;
            if ((uint64_t)(v83 - (_QWORD)__p) >> 4 > v26)
              v26 = v27 >> 4;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
              v28 = 0x7FFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v83, v28);
              v24 = (char *)__p;
              v21 = v82;
            }
            else
            {
              v29 = 0;
            }
            v30 = v20[1];
            v31 = &v29[32 * v25];
            *(_OWORD *)v31 = *v20;
            *((_OWORD *)v31 + 1) = v30;
            if (v21 == v24)
            {
              v34 = &v29[32 * v25];
            }
            else
            {
              v32 = &v29[32 * v25];
              do
              {
                v33 = *((_OWORD *)v21 - 1);
                v34 = v32 - 32;
                *((_OWORD *)v32 - 2) = *((_OWORD *)v21 - 2);
                *((_OWORD *)v32 - 1) = v33;
                v21 -= 32;
                v32 -= 32;
              }
              while (v21 != v24);
            }
            v23 = (unint64_t *)(v31 + 32);
            __p = v34;
            v82 = v31 + 32;
            v83 = (unint64_t)&v29[32 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            v22 = *(_OWORD *)(v19 + 72);
            *(_OWORD *)v82 = *v20;
            *((_OWORD *)v21 + 1) = v22;
            v23 = (unint64_t *)(v21 + 32);
          }
          v82 = (char *)v23;
        }
        v16 = objc_msgSend(a6, "countByEnumeratingWithState:objects:count:", &v77, v90, 16);
      }
      while (v16);
    }
  }
  if (a7)
  {
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v35 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v73, v89, 16);
    if (v35)
    {
      v36 = *(_QWORD *)v74;
      do
      {
        for (j = 0; j != v35; ++j)
        {
          if (*(_QWORD *)v74 != v36)
            objc_enumerationMutation(a7);
          v38 = objc_msgSend(*(id *)(*((_QWORD *)&v73 + 1) + 8 * j), "functionData");
          v39 = (_OWORD *)(v38 + 56);
          v40 = v82;
          if ((unint64_t)v82 >= v83)
          {
            v43 = (char *)__p;
            v44 = (v82 - (_BYTE *)__p) >> 5;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 59)
              std::vector<std::pair<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>::__throw_length_error[abi:ne180100]();
            v46 = v83 - (_QWORD)__p;
            if ((uint64_t)(v83 - (_QWORD)__p) >> 4 > v45)
              v45 = v46 >> 4;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
              v47 = 0x7FFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::string,unsigned int,unsigned int>>>((uint64_t)&v83, v47);
              v43 = (char *)__p;
              v40 = v82;
            }
            else
            {
              v48 = 0;
            }
            v49 = v39[1];
            v50 = &v48[32 * v44];
            *(_OWORD *)v50 = *v39;
            *((_OWORD *)v50 + 1) = v49;
            if (v40 == v43)
            {
              v53 = &v48[32 * v44];
            }
            else
            {
              v51 = &v48[32 * v44];
              do
              {
                v52 = *((_OWORD *)v40 - 1);
                v53 = v51 - 32;
                *((_OWORD *)v51 - 2) = *((_OWORD *)v40 - 2);
                *((_OWORD *)v51 - 1) = v52;
                v40 -= 32;
                v51 -= 32;
              }
              while (v40 != v43);
            }
            v42 = (unint64_t *)(v50 + 32);
            __p = v53;
            v82 = v50 + 32;
            v83 = (unint64_t)&v48[32 * v47];
            if (v43)
              operator delete(v43);
          }
          else
          {
            v41 = *(_OWORD *)(v38 + 72);
            *(_OWORD *)v82 = *v39;
            *((_OWORD *)v40 + 1) = v41;
            v42 = (unint64_t *)(v40 + 32);
          }
          v82 = (char *)v42;
        }
        v35 = objc_msgSend(a7, "countByEnumeratingWithState:objects:count:", &v73, v89, 16);
      }
      while (v35);
    }
  }
  if (__p != v82)
  {
    std::__introsort<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,false>((unint64_t *)__p, (unint64_t *)v82, (uint64_t)&c, 126 - 2 * __clz((v82 - (_BYTE *)__p) >> 5), 1);
    CC_SHA256_Update(v70, __p, ((_DWORD)v82 - (_DWORD)__p) & 0xFFFFFFE0);
  }
  *(_QWORD *)v70[1].hash = 0;
  if (FunctionHashFactory::shouldLogHashKeys(void)::onceToken != -1)
    dispatch_once(&FunctionHashFactory::shouldLogHashKeys(void)::onceToken, &__block_literal_global_1401);
  v54 = FunctionHashFactory::shouldLogHashKeys(void)::shouldLogHashKeys;
  LOBYTE(v70[1].count[0]) = FunctionHashFactory::shouldLogHashKeys(void)::shouldLogHashKeys;
  if (v54)
  {
    *(_QWORD *)v70[1].hash = (id)objc_msgSend(a2, "name");
    v55 = *(_OWORD *)&v70->wbuf[10];
    *(_OWORD *)&c.wbuf[6] = *(_OWORD *)&v70->wbuf[6];
    *(_OWORD *)&c.wbuf[10] = v55;
    *(_QWORD *)&c.wbuf[14] = *(_QWORD *)&v70->wbuf[14];
    v56 = *(_OWORD *)&v70->hash[2];
    *(_OWORD *)c.count = *(_OWORD *)v70->count;
    *(_OWORD *)&c.hash[2] = v56;
    v57 = *(_OWORD *)&v70->wbuf[2];
    *(_OWORD *)&c.hash[6] = *(_OWORD *)&v70->hash[6];
    *(_OWORD *)&c.wbuf[2] = v57;
    CC_SHA256_Final((unsigned __int8 *)md, &c);
    v58 = *(_QWORD *)v70[1].hash;
    v59 = objc_msgSend(a2, "functionType");
    v60 = (unint64_t)(v59 - 1) > 7 ? CFSTR("Unknown") : (__CFString *)*((_QWORD *)&off_1E0FE4A78 + v59 - 1);
    v87[0] = md[0];
    v87[1] = md[1];
    v61 = _MTLRequestHashToString((uint64_t)v87);
    v62 = *(_QWORD *)v70[1].hash;
    v63 = v69[1];
    v86[0] = *v69;
    v86[1] = v63;
    v64 = _MTLRequestHashToString((uint64_t)v86);
    v65 = *v68;
    std::to_string(&v71, data);
    v66 = (v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v71
        : (std::string *)v71.__r_.__value_.__r.__words[0];
    NSLog(CFSTR("[Hash for %@ (%@)] base hash: %@ [initialized with name(%@), bitcode hash(%@), bitcode type (%d), cache compiler options (%s)]"), v58, v60, v61, v62, v64, v65, v66);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    v82 = (char *)__p;
    operator delete(__p);
  }
  return v70;
}

void sub_18278B00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58)
{
  if (a25 < 0)
    operator delete(__p);
  if (a57)
    operator delete(a57);
  _Unwind_Resume(exception_object);
}

uint64_t FunctionHashFactory::getGPUCompilerSPIOptionsMask(uint64_t a1, void *a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[5];
  _BYTE v17[128];
  void *__p[2];
  char v19;
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-shader-validation");
  v20 = 1;
  std::string::basic_string[abi:ne180100]<0>(v21, "disable-shader-validation");
  v22 = 2;
  std::string::basic_string[abi:ne180100]<0>(v23, "enable-bounds-checking");
  v24 = 4;
  std::string::basic_string[abi:ne180100]<0>(v25, "enable-threadgroup-memory-checks");
  v26 = 8;
  std::string::basic_string[abi:ne180100]<0>(v27, "enable-texture-checks");
  v28 = 16;
  std::string::basic_string[abi:ne180100]<0>(v29, "enable-resource-usage-validation");
  v30 = 32;
  std::string::basic_string[abi:ne180100]<0>(v31, "enable-stack-overflow");
  v32 = 64;
  std::unordered_map<std::string,FunctionHashFactory::hashFactoryMask>::unordered_map((uint64_t)v16, (unsigned __int8 *)__p, 7);
  for (i = 0; i != -28; i -= 4)
  {
    if (SHIBYTE(v31[i + 2]) < 0)
      operator delete((void *)v31[i]);
  }
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = 0;
  v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(a2);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v7), "UTF8String"));
        v8 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v16, (unsigned __int8 *)__p);
        v9 = v8;
        if ((v19 & 0x80000000) == 0)
        {
          if (!v8)
            goto LABEL_14;
LABEL_13:
          v4 = *((_DWORD *)v9 + 10) | v4;
          goto LABEL_14;
        }
        operator delete(__p[0]);
        if (v9)
          goto LABEL_13;
LABEL_14:
        ++v7;
      }
      while (v5 != v7);
      v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
      v5 = v10;
    }
    while (v10);
  }
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)v16);
  return v4;
}

void sub_18278B2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,FunctionHashFactory::hashFactoryMask>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_18278B3D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__construct_node_hash<std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_18278B63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,FunctionHashFactory::hashFactoryMask>>>::__construct_node_hash<std::pair<std::string const,FunctionHashFactory::hashFactoryMask> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_18278B6EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t *v20;
  char v21;
  BOOL v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,FunctionHashFactory::FunctionHashFactory(_MTLFunctionInternal *,MTLFunctionData const&,MTLCompilerOption,NSDictionary<NSString *,objc_object *> *,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSArray<objc_object  {objcproto11MTLFunction}*>)::{lambda(MTLUINT256_t const&,MTLUINT256_t const)#1} &,NSArray<objc_object  {objcproto11MTLFunction}*> **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v25 = *(_OWORD *)a1;
        v24 = *((_OWORD *)a1 + 1);
        v26 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v26;
        *(_OWORD *)v6 = v25;
        *((_OWORD *)a2 - 1) = v24;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a1 + 8, a1 + 12, a2 - 4);
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MetalScriptSerializer::createLinkedFunctionsHashesVector(MTLLinkedFunctions *)::{lambda(MTLUINT256_t const&,MTLUINT256_t const&)#1} &,MTLUINT256_t*>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v27 = *(_OWORD *)v11;
        v28 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v27);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v27 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v28), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v28 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v27;
        *((_OWORD *)v23 + 1) = v28;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
    if (v11 == a2)
      return 1;
  }
}

void RequiredFunctionKeys::~RequiredFunctionKeys(RequiredFunctionKeys *this)
{
  uint64_t i;

  for (i = 0; i != 8; ++i)
  {

  }
}

uint64_t ___ZN16MTLProgramObject17setReflectionDataEPU27objcproto16OS_dispatch_data8NSObjectP8NSString_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const __CFString *v3;
  uint64_t result;
  const __CFString *v5;

  v2 = a1[6];
  if (a1[4])
    v3 = (const __CFString *)a1[4];
  else
    v3 = &stru_1E0FE5DC8;
  result = objc_msgSend(*(id *)(v2 + 432), "objectForKey:", v3);
  if (!result)
  {
    if (a1[4])
      v5 = (const __CFString *)a1[4];
    else
      v5 = &stru_1E0FE5DC8;
    return objc_msgSend(*(id *)(v2 + 432), "setObject:forKey:", a1[5], v5);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string,objc_object  {objcproto11MTLFunction}*>,std::__unordered_map_hasher<std::string,objc_object  {objcproto11MTLFunction}*,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,objc_object  {objcproto11MTLFunction}*,std::equal_to,std::hash,true>,std::allocator<objc_object  {objcproto11MTLFunction}*>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::piecewise_construct_t const&<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_18278C1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::__tuple_equal<1ul>::operator()[abi:ne180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>>(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_18278C484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MTLUINT256_t>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MTLUINT256_t>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_18278C4F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x48uLL);
  *i = 0;
  i[1] = v7;
  v17 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v17;
  i[7] = 0;
  i[8] = 0;
  i[6] = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v8 || (float)(v19 * (float)v8) < v18)
  {
    v20 = 1;
    if (v8 >= 3)
      v20 = (v8 & (v8 - 1)) != 0;
    v21 = v20 | (2 * v8);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v23);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *i = *v25;
LABEL_48:
    *v25 = i;
    goto LABEL_49;
  }
  *i = *v16;
  *v16 = i;
  *(_QWORD *)(v24 + 8 * v4) = v16;
  if (*i)
  {
    v26 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v26 >= v8)
        v26 %= v8;
    }
    else
    {
      v26 &= v8 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_18278C760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[6];
    if (v3)
    {
      __p[7] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__tree<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,MTLLibraryDataWithArchive::SpecializationScriptData *>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,std::vector<std::pair<unsigned long long,unsigned long long>>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[6];
      if (v4)
      {
        v2[7] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::pair<unsigned long long,std::vector<MTLUINT256_t>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x48uLL);
    *((_QWORD *)v11 + 4) = **a4;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,NSObject  {objcproto16OS_dispatch_data}*>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,std::__unordered_map_hasher<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::__unordered_map_equal<MTLHashKey,std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>,CompareFunctionIdHash,CompareFunctionIdHash,true>,std::allocator<std::__hash_value_type<MTLHashKey,std::tuple<unsigned long long,unsigned long long,unsigned long long,unsigned long long>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<MTLUINT256_t,unsigned long long>,std::__unordered_map_hasher<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::__unordered_map_equal<MTLUINT256_t,std::__hash_value_type<MTLUINT256_t,unsigned long long>,UnorderedContainerHash,UnorderedContainerHash,true>,std::allocator<std::__hash_value_type<MTLUINT256_t,unsigned long long>>>::__emplace_unique_key_args<MTLUINT256_t,std::piecewise_construct_t const&,std::tuple<MTLUINT256_t&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *i = 0;
  i[1] = v7;
  v16 = (*a4)[1];
  *((_OWORD *)i + 1) = **a4;
  *((_OWORD *)i + 2) = v16;
  i[6] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = 1;
    if (v8 >= 3)
      v19 = (v8 & (v8 - 1)) != 0;
    v20 = v19 | (2 * v8);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v22);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *i = *v24;
LABEL_48:
    *v24 = i;
    goto LABEL_49;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v25 >= v8)
        v25 %= v8;
    }
    else
    {
      v25 &= v8 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_18278CC84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *,false>(unint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  _OWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t *v45;
  __int128 v46;
  BOOL v47;
  __n128 result;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  _OWORD *v61;
  _OWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  __int128 v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  _OWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  __n128 *v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t *n128_u64;
  BOOL v95;
  uint64_t v96;
  unint64_t *v97;
  __n128 *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  __n128 *v108;
  int64_t v109;
  int64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t *v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  __n128 *v147;
  __int128 v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  __int128 v153;
  __int128 v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  unint64_t *v158;
  __n128 *v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t *v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  __int128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __n128 v185;
  __int128 v186;
  __n128 v187;
  __n128 v188;
  __int128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __n128 v197;
  __int128 v198;
  __n128 v199;
  __int128 v200;
  __int128 v201;
  __n128 v202;
  __int128 v203;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,MTLLibraryBuilder::newLibraryWithFunctionArray(objc_object  {objcproto9MTLDevice}*,NSArray<objc_object  {objcproto11MTLFunction}*> *,NSError **)::$_0 &,MTLUINT256_t *>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v4 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = bswap64(*(a2 - 4));
      v8 = bswap64(*a1);
      if (v7 == v8
        && (v7 = bswap64(*(a2 - 3)), v8 = bswap64(a1[1]), v7 == v8)
        && (v7 = bswap64(*(a2 - 2)), v8 = bswap64(a1[2]), v7 == v8)
        && (v7 = bswap64(*(a2 - 1)), v8 = bswap64(a1[3]), v7 == v8))
      {
        v9 = 0;
      }
      else if (v7 < v8)
      {
        v9 = -1;
      }
      else
      {
        v9 = 1;
      }
      if (v9 < 0)
      {
        v33 = *(_OWORD *)a1;
        v32 = *((_OWORD *)a1 + 1);
        v34 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *((_OWORD *)a1 + 1) = v34;
        *(_OWORD *)v6 = v33;
        *((_OWORD *)a2 - 1) = v32;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a2 - 4);
      return 1;
    case 5:
      v24 = a1 + 4;
      v25 = a1 + 8;
      v26 = a1 + 12;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8, a1 + 12);
      v28 = *(a2 - 4);
      v27 = a2 - 4;
      v29 = bswap64(v28);
      v30 = bswap64(a1[12]);
      if (v29 == v30
        && (v29 = bswap64(v27[1]), v30 = bswap64(a1[13]), v29 == v30)
        && (v29 = bswap64(v27[2]), v30 = bswap64(a1[14]), v29 == v30)
        && (v29 = bswap64(v27[3]), v30 = bswap64(a1[15]), v29 == v30))
      {
        v31 = 0;
      }
      else if (v29 < v30)
      {
        v31 = -1;
      }
      else
      {
        v31 = 1;
      }
      if (v31 < 0)
      {
        v36 = *(_OWORD *)v26;
        v35 = *((_OWORD *)a1 + 7);
        v37 = *((_OWORD *)v27 + 1);
        *(_OWORD *)v26 = *(_OWORD *)v27;
        *((_OWORD *)a1 + 7) = v37;
        *(_OWORD *)v27 = v36;
        *((_OWORD *)v27 + 1) = v35;
        v38 = bswap64(*v26);
        v39 = bswap64(*v25);
        if (v38 != v39)
          goto LABEL_54;
        v38 = bswap64(a1[13]);
        v39 = bswap64(a1[9]);
        if (v38 == v39
          && (v38 = bswap64(a1[14]), v39 = bswap64(a1[10]), v38 == v39)
          && (v38 = bswap64(a1[15]), v39 = bswap64(a1[11]), v38 == v39))
        {
          v40 = 0;
        }
        else
        {
LABEL_54:
          v40 = v38 < v39 ? -1 : 1;
        }
        if (v40 < 0)
        {
          v42 = *(_OWORD *)v25;
          v41 = *((_OWORD *)a1 + 5);
          v43 = *((_OWORD *)a1 + 7);
          *(_OWORD *)v25 = *(_OWORD *)v26;
          *((_OWORD *)a1 + 5) = v43;
          *(_OWORD *)v26 = v42;
          *((_OWORD *)a1 + 7) = v41;
          v44 = bswap64(*v25);
          v45 = bswap64(*v24);
          if (v44 != v45)
            goto LABEL_64;
          v44 = bswap64(a1[9]);
          v45 = bswap64(a1[5]);
          if (v44 == v45
            && (v44 = bswap64(a1[10]), v45 = bswap64(a1[6]), v44 == v45)
            && (v44 = bswap64(a1[11]), v45 = bswap64(a1[7]), v44 == v45))
          {
            v46 = 0;
          }
          else
          {
LABEL_64:
            v46 = v44 < v45 ? -1 : 1;
          }
          if (v46 < 0)
          {
            v48 = *(_OWORD *)v24;
            v47 = *((_OWORD *)a1 + 3);
            v49 = *((_OWORD *)a1 + 5);
            *(_OWORD *)v24 = *(_OWORD *)v25;
            *((_OWORD *)a1 + 3) = v49;
            *(_OWORD *)v25 = v48;
            *((_OWORD *)a1 + 5) = v47;
            v50 = bswap64(a1[4]);
            v51 = bswap64(*a1);
            if (v50 != v51)
              goto LABEL_73;
            v50 = bswap64(a1[5]);
            v51 = bswap64(a1[1]);
            if (v50 == v51
              && (v50 = bswap64(a1[6]), v51 = bswap64(a1[2]), v50 == v51)
              && (v50 = bswap64(a1[7]), v51 = bswap64(a1[3]), v50 == v51))
            {
              v52 = 0;
            }
            else
            {
LABEL_73:
              v52 = v50 < v51 ? -1 : 1;
            }
            if (v52 < 0)
            {
              v54 = *(_OWORD *)a1;
              v53 = *((_OWORD *)a1 + 1);
              v55 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *(_OWORD *)v24;
              *((_OWORD *)a1 + 1) = v55;
              *(_OWORD *)v24 = v54;
              *((_OWORD *)a1 + 3) = v53;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,MTLHashKey::MTLHashKey(MTLFunctionToolList const&)::$_0 &,MTLUINT256_t *>(a1, a1 + 4, a1 + 8);
      v11 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = bswap64(*v11);
    v15 = bswap64(*v10);
    if (v14 != v15
      || (v14 = bswap64(v11[1]), v15 = bswap64(v10[1]), v14 != v15)
      || (v14 = bswap64(v11[2]), v15 = bswap64(v10[2]), v14 != v15)
      || (v14 = bswap64(v11[3]), v15 = bswap64(v10[3]), v14 != v15))
    {
      v16 = v14 < v15 ? -1 : 1;
      if (v16 < 0)
      {
        v56 = *(_OWORD *)v11;
        v57 = *((_OWORD *)v11 + 1);
        v17 = v12;
        while (1)
        {
          v18 = (char *)a1 + v17;
          v19 = *(_OWORD *)((char *)a1 + v17 + 80);
          *((_OWORD *)v18 + 6) = *(_OWORD *)((char *)a1 + v17 + 64);
          *((_OWORD *)v18 + 7) = v19;
          if (v17 == -64)
            break;
          v20 = bswap64(v56);
          v21 = bswap64(*((_QWORD *)v18 + 4));
          if (v20 == v21
            && (v20 = bswap64(*((unint64_t *)&v56 + 1)), v21 = bswap64(*((_QWORD *)v18 + 5)), v20 == v21)
            && (v20 = bswap64(v57), v21 = bswap64(*((_QWORD *)v18 + 6)), v20 == v21)
            && (v20 = bswap64(*((unint64_t *)&v57 + 1)), v21 = bswap64(*((_QWORD *)v18 + 7)), v20 == v21))
          {
            v22 = 0;
          }
          else if (v20 < v21)
          {
            v22 = -1;
          }
          else
          {
            v22 = 1;
          }
          v17 -= 32;
          if ((v22 & 0x80000000) == 0)
          {
            v23 = (unint64_t *)((char *)a1 + v17 + 96);
            goto LABEL_30;
          }
        }
        v23 = a1;
LABEL_30:
        *(_OWORD *)v23 = v56;
        *((_OWORD *)v23 + 1) = v57;
        if (++v13 == 8)
          return v11 + 4 == a2;
      }
    }
    v10 = v11;
    v12 += 32;
    v11 += 4;
  }
  while (v11 != a2);
  return 1;
}

uint64_t *std::__tree<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::__map_value_compare<MTLLibraryIdentifier,std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>,std::less<MTLLibraryIdentifier>,true>,std::allocator<std::__value_type<MTLLibraryIdentifier,MTLLibraryData *>>>::__lower_bound<MTLLibraryIdentifier>(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;

  result = a4;
  if (a3)
  {
    v7 = *a2;
    v5 = a2 + 1;
    v6 = v7;
    do
    {
      v8 = *((_DWORD *)a3 + 8);
      if (v8 >= v6)
      {
        if (v8 <= v6)
        {
          v9 = 0;
          while (v9 != 7)
          {
            v10 = *((_DWORD *)a3 + v9 + 9);
            v11 = v5[v9];
            if (v10 < v11)
            {
              if (v9 < 7)
                ++a3;
              else
                result = a3;
              goto LABEL_11;
            }
            ++v9;
            if (v10 > v11)
              break;
          }
        }
        result = a3;
      }
      else
      {
        ++a3;
      }
LABEL_11:
      a3 = (uint64_t *)*a3;
    }
    while (a3);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::__unordered_map_hasher<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::hash<CompilerOutputType>,std::equal_to<CompilerOutputType>,true>,std::__unordered_map_equal<CompilerOutputType,std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>,std::equal_to<CompilerOutputType>,std::hash<CompilerOutputType>,true>,std::allocator<std::__hash_value_type<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>>::__emplace_unique_key_args<CompilerOutputType,CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*&>(uint64_t a1, char *a2, _BYTE *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((unsigned __int8 *)v12 + 16) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_BYTE *)v12 + 16) = *a3;
  v12[3] = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::__unordered_map_hasher<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,key_hash,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,true>,std::__unordered_map_equal<std::tuple<std::string,unsigned int,unsigned int>,std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>,std::equal_to<std::tuple<std::string,unsigned int,unsigned int>>,key_hash,true>,std::allocator<std::__hash_value_type<std::tuple<std::string,unsigned int,unsigned int>,unsigned int>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*v12)
  {
    v22 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_18278E818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SpecializedFunctionTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF3F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SpecializedFunctionTrackingData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FDF3F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

uint64_t std::__shared_ptr_emplace<SpecializedFunctionTrackingData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SpecializedFunctionTrackingData::~SpecializedFunctionTrackingData(SpecializedFunctionTrackingData *this)
{
  SpecializedFunctionTrackingData::~SpecializedFunctionTrackingData(this);
  JUMPOUT(0x186DABFBCLL);
}

{
  id var2;
  id var1;

  this->var0 = (void **)&off_1E0FDEFA8;
  var2 = this->var2;
  if (var2)

  var1 = this->var1;
  if (var1)

}

_QWORD *std::vector<MTLUINT256_t const*>::__init_with_size[abi:ne180100]<MTLUINT256_t const**,MTLUINT256_t const**>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<MTLSerializer::ObjectSerializer *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18278EA00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE21D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,NSObject  {objcproto16OS_dispatch_data}*>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE21D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,MTLBinaryKey *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<CompilerOutputType,MTLBinaryKey *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E0FE2198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x186DABFBCLL);
}

const void **VariantList<4u>::find<VariantKey>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  size_t v5;
  const void *v6;
  const void *v7;
  const void **v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  const void *v16;
  const void *v17;
  uint64_t i;
  const void **v19;
  uint64_t v20;
  char *v21;
  char *v22;
  const void *v24;
  size_t v25;
  _QWORD *__s1;
  void *__s1a;

  v3 = *(unsigned int *)(a1 + 336);
  __s1 = *(_QWORD **)(a1 + 328);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    v24 = *(const void **)(a2 + 40);
    v25 = *(_QWORD *)(a2 + 48);
    v6 = *(const void **)a2;
    v7 = *(const void **)(a2 + 8);
    v8 = *(const void ***)(a1 + 328);
    while (1)
    {
      v9 = (char *)v8[1];
      if ((char *)v4 == v9 && (const void *)(v25 + v5) == v8[3])
      {
        v10 = (char *)*v8;
        if (!memcmp(v6, *v8, v4))
        {
          v11 = &v9[(_QWORD)v10];
          if (!memcmp(v7, v11, v5) && !memcmp(v24, &v11[v5], v25))
            break;
        }
      }
      v8 += 10;
      if (!--v3)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v12 = __s1[40];
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 24);
      __s1a = *(void **)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 48);
      v17 = *(const void **)a2;
      v16 = *(const void **)(a2 + 8);
      while (2)
      {
        for (i = 0; i != 320; i += 80)
        {
          v19 = (const void **)(v12 + i);
          v20 = *(_QWORD *)(v12 + i + 8);
          if (v13 == v20 && (const void *)(v15 + v14) == v19[3])
          {
            v21 = (char *)*v19;
            if (!memcmp(v17, *v19, v13))
            {
              v22 = &v21[v20];
              if (!memcmp(v16, v22, v14) && !memcmp(__s1a, &v22[v14], v15))
                return (const void **)(v12 + i);
            }
          }
        }
        v12 = *(_QWORD *)(v12 + 320);
        if (v12)
          continue;
        break;
      }
    }
    return 0;
  }
  return v8;
}

_QWORD *VariantList<4u>::newVariantEntry<VariantKey>(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  NSObject *v13;

  v4 = *(_DWORD *)(a1 + 336);
  if (v4 == 4)
  {
    v5 = operator new();
    for (i = 0; i != 320; i += 80)
    {
      v7 = v5 + i;
      *(_DWORD *)(v7 + 32) = 0;
      *(_OWORD *)v7 = 0uLL;
      *(_OWORD *)(v7 + 16) = 0uLL;
      *(_OWORD *)(v7 + 40) = 0uLL;
      *(_OWORD *)(v7 + 56) = 0uLL;
      *(_QWORD *)(v7 + 72) = 0;
    }
    v4 = 0;
    *(_QWORD *)(v5 + 320) = *(_QWORD *)(a1 + 328);
    *(_QWORD *)(a1 + 328) = v5;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 328);
  }
  *(_DWORD *)(a1 + 336) = v4 + 1;
  v8 = (_QWORD *)(v5 + 80 * v4);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = malloc_type_malloc(v11 + v10 + v9, 0xBCECD5BEuLL);
  *v8 = v12;
  memcpy(v12, *(const void **)a2, v9);
  memcpy((void *)(*v8 + v9), *(const void **)(a2 + 8), v10);
  memcpy((void *)(*v8 + v9 + v10), *(const void **)(a2 + 40), v11);
  v8[1] = v9;
  v8[2] = v10;
  v8[3] = v11 + v10;
  v13 = dispatch_group_create();
  v8[5] = v13;
  dispatch_group_enter(v13);
  return v8;
}

