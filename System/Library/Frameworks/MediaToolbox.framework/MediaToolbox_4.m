uint64_t figVideoRenderPipelineCopyFigImageQueueAndOptionsArrayGroupedByVideoLayerID(uint64_t a1, __CFArray **a2, __CFArray **a3, __CFArray **a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v8;
  CFIndex Count;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  CFIndex v13;
  int v14;
  int v15;
  const void *v16;
  const void *ValueAtIndex;
  CFTypeID v18;
  const CFArrayCallBacks *v19;
  __CFArray *v20;
  __CFArray *v21;
  CFMutableArrayRef v22;
  __CFArray *v23;
  CFIndex v24;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  uint64_t v30;
  CFMutableArrayRef v31;
  CFMutableArrayRef v32;
  CFIndex v33;
  CFIndex v34;
  const CFArrayCallBacks *v35;
  CFMutableArrayRef v36;
  BOOL v37;
  const void *v38;
  const void *v39;
  CFTypeID v40;
  __CFDictionary *v41;
  CFIndex v42;
  const void *v43;
  const void *v44;
  const void *v45;
  CFIndex FirstIndexOfValue;
  CFIndex v47;
  __CFArray *v48;
  __CFArray *v49;
  uint64_t v51;
  __CFArray **v52;
  __CFArray **v53;
  __CFArray **v54;
  __CFArray *v55;
  __CFArray *v56;
  CFMutableArrayRef theArray;
  CFRange v58;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(const __CFArray **)(DerivedStorage + 56);
  if (!v8)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(DerivedStorage + 64))
    return FigSignalErrorAt();
  Count = CFArrayGetCount(v8);
  if (Count != CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 64)))
    return FigSignalErrorAt();
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v51 = FigSignalErrorAt();
    CFRelease(theArray);
    return v51;
  }
  v12 = Mutable;
  v52 = a2;
  v53 = a3;
  v54 = a4;
  if (Count >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = (const void *)*MEMORY[0x1E0C9B0D0];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 64), v13);
      if (ValueAtIndex == v16)
        goto LABEL_16;
      if (!ValueAtIndex || (v18 = CFGetTypeID(ValueAtIndex), v18 != CFDictionaryGetTypeID()))
      {
LABEL_29:
        v30 = FigSignalErrorAt();
        v31 = 0;
        v32 = 0;
        goto LABEL_47;
      }
      if (!FigCFDictionaryGetInt32IfPresent())
      {
LABEL_16:
        if (v15)
          goto LABEL_29;
        CFArrayAppendValue(theArray, v16);
        if (!FigCFArrayContainsValue())
          CFArrayAppendValue(v12, v16);
        v15 = 0;
        v14 = 1;
      }
      else
      {
        if (v14)
          goto LABEL_29;
        FigCFArrayAppendInt32();
        if (!FigCFArrayContainsInt32())
          FigCFArrayAppendInt32();
        v14 = 0;
        v15 = 1;
      }
      ++v13;
    }
    while (Count != v13);
  }
  v19 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v20 = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
  v21 = CFArrayCreateMutable(v10, 0, v19);
  v22 = CFArrayCreateMutable(v10, 0, v19);
  v23 = v22;
  if (!v20 || !v21 || !v22)
  {
    v30 = FigSignalErrorAt();
    v31 = 0;
    v32 = 0;
    goto LABEL_48;
  }
  v56 = v20;
  v24 = CFArrayGetCount(v12);
  if (v24 == 1)
  {
    CFArrayAppendValue(v20, *(const void **)(DerivedStorage + 56));
    CFArrayAppendValue(v21, *(const void **)(DerivedStorage + 64));
    v25 = CFArrayGetValueAtIndex(v12, 0);
    if (v25)
    {
      v26 = v25;
      v27 = CFGetTypeID(v25);
      if (v27 == CFNumberGetTypeID())
      {
        v28 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v28)
        {
          v29 = v28;
          CFDictionarySetValue(v28, CFSTR("DemuxLayerID"), v26);
          CFArrayAppendValue(v23, v29);
          CFRelease(v29);
          goto LABEL_46;
        }
        goto LABEL_60;
      }
    }
    CFArrayAppendValue(v23, (const void *)*MEMORY[0x1E0C9B0D0]);
LABEL_46:
    v30 = 0;
    v31 = 0;
    v32 = 0;
    *v52 = v56;
    *v53 = v21;
    *v54 = v23;
LABEL_47:
    v23 = 0;
    v21 = 0;
    v20 = 0;
    goto LABEL_48;
  }
  v33 = v24;
  v55 = v21;
  if (v24 >= 1)
  {
    v34 = 0;
    v35 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      v32 = CFArrayCreateMutable(v10, 0, v35);
      v36 = CFArrayCreateMutable(v10, 0, v35);
      v31 = v36;
      if (v32)
        v37 = v36 == 0;
      else
        v37 = 1;
      if (v37)
      {
        v30 = FigSignalErrorAt();
        goto LABEL_63;
      }
      CFArrayAppendValue(v56, v32);
      CFArrayAppendValue(v55, v31);
      CFRelease(v32);
      CFRelease(v31);
      v38 = CFArrayGetValueAtIndex(v12, v34);
      if (!v38 || (v39 = v38, v40 = CFGetTypeID(v38), v40 != CFNumberGetTypeID()))
      {
        v30 = FigSignalErrorAt();
        v31 = 0;
        v32 = 0;
        goto LABEL_63;
      }
      v41 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v32 = v41;
      if (!v41)
        break;
      CFDictionarySetValue(v41, CFSTR("DemuxLayerID"), v39);
      CFArrayAppendValue(v23, v32);
      CFRelease(v32);
      if (v33 == ++v34)
        goto LABEL_40;
    }
    v30 = FigSignalErrorAt();
    v31 = 0;
LABEL_63:
    v21 = v55;
    goto LABEL_64;
  }
LABEL_40:
  v21 = v55;
  if (Count < 1)
    goto LABEL_46;
  v42 = 0;
  while (1)
  {
    v43 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), v42);
    v44 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 64), v42);
    v45 = CFArrayGetValueAtIndex(theArray, v42);
    v58.location = 0;
    v58.length = v33;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v58, v45);
    if (FirstIndexOfValue == -1)
      break;
    v47 = FirstIndexOfValue;
    v48 = (__CFArray *)CFArrayGetValueAtIndex(v56, FirstIndexOfValue);
    CFArrayAppendValue(v48, v43);
    v49 = (__CFArray *)CFArrayGetValueAtIndex(v55, v47);
    CFArrayAppendValue(v49, v44);
    if (Count == ++v42)
      goto LABEL_46;
  }
LABEL_60:
  v30 = FigSignalErrorAt();
  v31 = 0;
  v32 = 0;
LABEL_64:
  v20 = v56;
LABEL_48:
  CFRelease(theArray);
  CFRelease(v12);
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  if (v23)
    CFRelease(v23);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  return v30;
}

uint64_t FigVideoRenderPipelineCreateWithVisualContext(const __CFAllocator *a1, int a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, void *a7, const __CFDictionary *a8, _QWORD *a9)
{
  uint64_t v16;
  const void *v17;
  uint64_t FigBaseObject;
  void (*v19)(uint64_t, const __CFString *, const void *);
  void *v20;
  uint64_t (*v21)(void *, uint64_t, _QWORD);
  int v22;
  const __CFArray *v23;
  const __CFArray *v24;
  int v25;
  uint64_t v26;
  void *values;
  void *v29;

  values = 0;
  v29 = a7;
  v16 = FigImageQueueCreateForCoreVideo(0, &values);
  if ((_DWORD)v16)
    goto LABEL_19;
  if (a7)
  {
    v17 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v17 == CFDictionaryGetValue((CFDictionaryRef)a7, CFSTR("LimitImageQueueCapacityToOneFrame")))
    {
      FigBaseObject = FigImageQueueGetFigBaseObject(values);
      v19 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
      if (v19)
        v19(FigBaseObject, CFSTR("FigImageQueueProperty_LimitCapacityToOneFrame"), v17);
    }
  }
  v20 = values;
  v21 = *(uint64_t (**)(void *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v21)
  {
    v26 = 4294954514;
    goto LABEL_16;
  }
  v16 = v21(v20, a6, 0);
  if ((_DWORD)v16)
  {
LABEL_19:
    v26 = v16;
    goto LABEL_16;
  }
  v23 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  if (!a7)
  {
    v26 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, a3, a4, v22, v23, 0, a8, a9);
    if (!v23)
      goto LABEL_16;
    goto LABEL_15;
  }
  v24 = CFArrayCreate(a1, (const void **)&v29, 1, MEMORY[0x1E0C9B378]);
  v26 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, a3, a4, v25, v23, v24, a8, a9);
  if (v24)
    CFRelease(v24);
  if (v23)
LABEL_15:
    CFRelease(v23);
LABEL_16:
  if (values)
    CFRelease(values);
  return v26;
}

uint64_t FigVideoRenderPipelineCreateWithVisualContextGroup(const __CFAllocator *a1, int a2, const void *a3, const void *a4, int a5, CFArrayRef theArray, const __CFArray *a7, uint64_t a8, const __CFDictionary *a9, _QWORD *a10)
{
  CFIndex Count;
  CFIndex v18;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v20;
  CFIndex v21;
  uint64_t TagsWithCategory;
  const void *ValueAtIndex;
  const void *v24;
  uint64_t (*v25)(const void *, const void *, _QWORD);
  uint64_t SInt64;
  const void *v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  int v30;
  __CFArray *v31;
  uint64_t v32;
  const void *v34;
  const void *v35;
  __CFArray *v36;
  __CFArray *theArraya;
  const void *v38;

  v38 = 0;
  if (theArray && (Count = CFArrayGetCount(theArray), Count > 0) && a7 && (v18 = Count, Count == CFArrayGetCount(a7)))
  {
    Mutable = CFArrayCreateMutable(a1, v18, MEMORY[0x1E0C9B378]);
    if (Mutable && (v20 = CFArrayCreateMutable(a1, v18, MEMORY[0x1E0C9B378])) != 0)
    {
      v34 = a3;
      v35 = a4;
      v36 = v20;
      theArraya = Mutable;
      v21 = 0;
      while (1)
      {
        TagsWithCategory = FigImageQueueCreateForCoreVideo(0, &v38);
        if ((_DWORD)TagsWithCategory)
          goto LABEL_32;
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v21);
        v24 = v38;
        v25 = *(uint64_t (**)(const void *, const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
        if (!v25)
        {
          v32 = 4294954514;
          goto LABEL_23;
        }
        TagsWithCategory = v25(v24, ValueAtIndex, 0);
        if ((_DWORD)TagsWithCategory)
          goto LABEL_32;
        CFArrayAppendValue(theArraya, v38);
        CFArrayGetValueAtIndex(a7, v21);
        TagsWithCategory = FigTagCollectionGetTagsWithCategory();
        if ((_DWORD)TagsWithCategory)
          goto LABEL_32;
        FigTagGetSInt64Value();
        SInt64 = FigCFNumberCreateSInt64();
        if (!SInt64)
        {
          TagsWithCategory = FigSignalErrorAt();
LABEL_32:
          v32 = TagsWithCategory;
          goto LABEL_23;
        }
        v27 = (const void *)SInt64;
        v28 = a8
            ? (__CFDictionary *)FigCFDictionaryCreateMutableCopy()
            : CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v29 = v28;
        if (!v28)
          break;
        CFDictionarySetValue(v28, CFSTR("DemuxLayerID"), v27);
        CFArrayAppendValue(v36, v29);
        CFRelease(v27);
        if (v38)
        {
          CFRelease(v38);
          v38 = 0;
        }
        CFRelease(v29);
        if (v18 == ++v21)
        {
          v31 = v36;
          Mutable = theArraya;
          v32 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, v34, v35, v30, theArraya, v36, a9, a10);
          goto LABEL_24;
        }
      }
      v32 = FigSignalErrorAt();
      CFRelease(v27);
LABEL_23:
      v31 = v36;
      Mutable = theArraya;
    }
    else
    {
      v32 = FigSignalErrorAt();
      v31 = 0;
    }
  }
  else
  {
    v32 = FigSignalErrorAt();
    v31 = 0;
    Mutable = 0;
  }
LABEL_24:
  if (v38)
    CFRelease(v38);
  if (Mutable)
    CFRelease(Mutable);
  if (v31)
    CFRelease(v31);
  return v32;
}

__CFString *figVideoRenderPipelineCopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoRenderPipeline %p: "), a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("videoCompressedFrameQueue %@, videoMediaConverter %@, videoImageQueueArray %@, videoImageQueueOptionsArray %@, destinationPixelBufferAttributes %@, pixelTransferProperties %@, timebase %@"), DerivedStorage[1], DerivedStorage[2], DerivedStorage[7], DerivedStorage[8], DerivedStorage[13], DerivedStorage[14], DerivedStorage[15]);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

void figVideoRenderPipelineCopyVideoImageQueueArray(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *DerivedStorage;
  CFTypeRef v6;
  CFTypeRef v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[9]);
  if (a2)
  {
    v6 = (CFTypeRef)DerivedStorage[7];
    if (v6)
      v6 = CFRetain(v6);
    *a2 = v6;
  }
  if (a3)
  {
    v7 = (CFTypeRef)DerivedStorage[8];
    if (v7)
      v7 = CFRetain(v7);
    *a3 = v7;
  }
  JUMPOUT(0x19402EF04);
}

uint64_t videopipelineRemoveListenersOnImageQueue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListeners();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListeners();
}

uint64_t videopipelineDecodeError()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineRanDry()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineMarkerBufferConsumed()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineSegmentFinished()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineHandleCompletedDecodeForPrerollNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  NSObject *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v8 = CFGetTypeID(a5);
  if (v8 != CFDictionaryGetTypeID() || !FigCFDictionaryGetValue())
    return FigSignalErrorAt();
  if (dword_1EE2A2CD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 152));
  if (FigCFEqual())
  {
    *(_BYTE *)(v7 + 176) = 0;
    CMBaseObjectGetDerivedStorage();
    if (figVideoRenderPipelineHasCompletedAllPreparationForPrerollTasks())
    {
      if (dword_1EE2A2CD0)
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested();
    }
    else if (dword_1EE2A2CD0)
    {
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(v7 + 152));
}

uint64_t videopipelineLostDecoderState()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

BOOL figVideoRenderPipelineHasCompletedAllPreparationForPrerollTasks()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return !*(_BYTE *)(DerivedStorage + 176) && CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184)) == 0;
}

void figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested()
{
  uint64_t DerivedStorage;
  CFDictionaryRef v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 160))
  {
    v1 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigRenderPipelineNotificationParameter_RequestID, (const void **)(DerivedStorage + 168), 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (dword_1EE2A2CD0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v1);
  }
  v3 = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(v3 + 160) = 0;
  v4 = *(const void **)(v3 + 168);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v3 + 168) = 0;
  }
  *(_BYTE *)(v3 + 176) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 184));
}

uint64_t videopipelineFirstImageEnqueued()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineImageReleased()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t videopipelineHandleImageQueueCompletedRendererPreparationForPrerollNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeID v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v10;
  NSObject *v11;
  NSObject *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a5)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  v8 = CFGetTypeID(a5);
  if (v8 != CFDictionaryGetTypeID() || !FigCFDictionaryGetValue())
    return FigSignalErrorAt();
  if (dword_1EE2A2CD0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 152));
  if (FigCFEqual())
  {
    FigCFArrayRemoveLastElementOfValue();
    v10 = *(const __CFArray **)(v7 + 184);
    if (!v10 || !CFArrayGetCount(v10))
    {
      CMBaseObjectGetDerivedStorage();
      if (figVideoRenderPipelineHasCompletedAllPreparationForPrerollTasks())
      {
        if (dword_1EE2A2CD0)
        {
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested();
      }
      else if (dword_1EE2A2CD0)
      {
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(v7 + 152));
}

uint64_t videopipelineDisplaySizeChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (result)
    return VMC2SetProperty(result, CFSTR("DisplayLayerSize"), a5);
  return result;
}

void videopipelineUpdateVideoPlaybackStateForClient()
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v1;
  int v2;
  BOOL v3;
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  _QWORD block[6];
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v1 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  if (!v1 || CMTimebaseGetRate(v1) == 0.0)
  {
    v3 = 0;
    *(_BYTE *)(DerivedStorage + 137) = 0;
    v2 = *(_DWORD *)(DerivedStorage + 4);
    if (v2)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 137) = 1;
    v2 = *(_DWORD *)(DerivedStorage + 4);
    v3 = v2 != 0;
    if (v2)
      goto LABEL_7;
  }
  v2 = *(_DWORD *)(DerivedStorage + 140);
LABEL_7:
  if (sVRPPowerLogOnce != -1)
    dispatch_once(&sVRPPowerLogOnce, &__block_literal_global_16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videopipelineUpdateVideoPlaybackStateForClient_block_invoke_2;
  block[3] = &unk_1E2F88390;
  v8 = v3;
  v7 = v2;
  block[4] = &v9;
  block[5] = DerivedStorage;
  dispatch_sync((dispatch_queue_t)sVRPPowerLogQueue, block);
  if (v10[3])
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("State"), (const void *)v10[3]);
      FigCFDictionarySetFloat32();
      FigPowerLogRegisterEvent();
      CFRelease(v5);
      *(_DWORD *)(DerivedStorage + 140) = *(_DWORD *)(DerivedStorage + 4);
    }
  }
  _Block_object_dispose(&v9, 8);
}

CFMutableBagRef __videopipelineUpdateVideoPlaybackStateForClient_block_invoke()
{
  CFMutableBagRef result;

  sVRPPowerLogQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.videorenderpipeline.powerlog", 0);
  result = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  sVRPBagOfClientPIDsWithPlayingRenderPipelines = (uint64_t)result;
  return result;
}

void __videopipelineUpdateVideoPlaybackStateForClient_block_invoke_2(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v2 + 144))
  {
    if (!*(_BYTE *)(a1 + 52))
    {
      *(_BYTE *)(v2 + 144) = 0;
      if (MEMORY[0x194029AE0](sVRPBagOfClientPIDsWithPlayingRenderPipelines, *(int *)(a1 + 48)) == 1)
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFSTR("paused");
      CFBagRemoveValue((CFMutableBagRef)sVRPBagOfClientPIDsWithPlayingRenderPipelines, (const void *)*(int *)(a1 + 48));
    }
  }
  else if (*(_BYTE *)(a1 + 52))
  {
    *(_BYTE *)(v2 + 144) = *(_BYTE *)(a1 + 52);
    if (!MEMORY[0x194029AE0](sVRPBagOfClientPIDsWithPlayingRenderPipelines, *(int *)(a1 + 48)))
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFSTR("playing");
    CFBagAddValue((CFMutableBagRef)sVRPBagOfClientPIDsWithPlayingRenderPipelines, (const void *)*(int *)(a1 + 48));
  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    JUMPOUT(0x194029AE0);
}

void videopipelineCopyPerformanceDictionary(uint64_t a1)
{
  CFArrayRef theArray;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v3 = 0u;
  v4 = 0u;
  theArray = 0;
  figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
}

uint64_t FigImageQueueCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigImageQueueGetFigBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

void figVideoRenderPipelineUpdateImageQueues(uint64_t a1, const __CFArray *a2)
{
  CFArrayRef theArray[5];
  CFArrayRef v5;

  CMBaseObjectGetDerivedStorage();
  v5 = 0;
  memset(theArray, 0, sizeof(theArray));
  if (a2)
    CFArrayGetCount(a2);
  figVideoRenderPipelineCopyVideoImageQueueArray(a1, theArray, &v5);
}

uint64_t videopipelineAddListenersOnImageQueue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListeners();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterAddWeakListeners();
}

void figVideoRenderPipelineCopyMaxFanOutDisplayLayerSize(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  __CFDictionary *Mutable;
  CGSize *v9;
  double v10;
  double v11;
  const __CFAllocator *v12;
  const void *ValueAtIndex;
  uint64_t FigBaseObject;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *);
  CGFloat width;
  CGFloat height;
  CGSize v18;
  CFDictionaryRef dict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(DerivedStorage + 40);
  if (v4 && (Count = CFArrayGetCount(v4), Count >= 1))
  {
    v6 = Count;
    v7 = 0;
    Mutable = 0;
    v9 = (CGSize *)MEMORY[0x1E0C9D820];
    v11 = *MEMORY[0x1E0C9D820];
    v10 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      dict = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), v7);
      FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
      v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v15)
        v15(FigBaseObject, CFSTR("FigImageQueueProperty_DisplaySize"), v12, &dict);
      if (dict)
      {
        v18 = *v9;
        CGSizeMakeWithDictionaryRepresentation(dict, &v18);
        height = v18.height;
        width = v18.width;
        if (v18.height * v18.width <= v11 * v10)
        {
          width = v11;
          height = v10;
        }
        else if (Mutable
               || (Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
        {
          CFDictionarySetValue(Mutable, CFSTR("DisplaySize"), dict);
        }
        if (dict)
          CFRelease(dict);
      }
      else
      {
        height = v10;
        width = v11;
      }
      ++v7;
      v10 = height;
      v11 = width;
    }
    while (v6 != v7);
  }
  else
  {
    Mutable = 0;
  }
  *a2 = Mutable;
}

uint64_t videopipelineConfigureAV1FilmGrainModeAsAppropriateForImageQueues(uint64_t a1)
{
  uint64_t result;
  CFArrayRef theArray;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 145) = 0;
  if (*(_QWORD *)(result + 16))
  {
    theArray = 0;
    figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
  }
  return result;
}

uint64_t figVideoRenderPipelinePretendOutputIsLow()
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (result)
    return VMC2PretendOutputIsLow(result);
  return result;
}

uint64_t figVideoRenderPipelineRequestDecodeForPreroll(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CFArrayRef theArray[21];

  theArray[20] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray[0] = 0;
  if (a2)
  {
    v5 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 152));
      figVideoRenderPipelinePostPreparationForPrerollCompletedIfPreviouslyRequested();
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        if (!VMC2RequestDecodeForPreroll(v6, a2))
          *(_BYTE *)(v5 + 176) = 1;
      }
      figVideoRenderPipelineCopyVideoImageQueueArray(a1, theArray, 0);
    }
  }
  return FigSignalErrorAt();
}

uint64_t figVideoRenderPipelineReset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  if ((_DWORD)v4)
    return v4;
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (v5)
    v6 = VMC2Reset(v5, a2);
  else
    v6 = 0;
  v7 = *(_QWORD *)(DerivedStorage + 32);
  if (v7)
  {
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v8)
      v8(v7, a2);
  }
  return v6;
}

CMTime *vsbufGetDecodeTimeStamp@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTime *a2@<X8>)
{
  CMTime *result;
  uint64_t v5;

  result = (CMTime *)vsbufIsCatchupFrame(a1);
  if (!(_DWORD)result)
    return CMSampleBufferGetOutputDecodeTimeStamp(a2, a1);
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v5 + 16);
  return result;
}

CMTime *vsbufGetPresentationTimeStamp@<X0>(opaqueCMSampleBuffer *a1@<X0>, CMTime *a2@<X8>)
{
  CMTime *result;
  uint64_t v5;

  result = (CMTime *)vsbufIsCatchupFrame(a1);
  if (!(_DWORD)result)
    return CMSampleBufferGetOutputPresentationTimeStamp(a2, a1);
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v5 + 16);
  return result;
}

const __CFArray *vsbufIsCatchupFrame(opaqueCMSampleBuffer *a1)
{
  const __CFArray *result;
  const __CFDictionary *ValueAtIndex;

  result = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  if (result)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(result, 0);
    return (const __CFArray *)(ValueAtIndex
                            && (const void *)*MEMORY[0x1E0C9AE50] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8]));
  }
  return result;
}

uint64_t FigSampleBufferAudioRendererServerRetainAudioRendererForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigSampleBufferAudioRendererServerStart()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t audioRendererServer_handleMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v5;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v5 = audioRenderer_lookupAndRetainSampleBufferAudioRendererByObjectIDForConnection();
  if ((_DWORD)v5)
    return v5;
  else
    return 4294951138;
}

uint64_t audioRendererServer_handleMessageNoReply(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  unsigned int v4;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v4 = audioRenderer_lookupAndRetainSampleBufferAudioRendererByObjectIDForConnection();
  if (v4)
    return v4;
  else
    return 4294951138;
}

uint64_t audioRenderer_lookupAndRetainSampleBufferAudioRendererByObjectIDForConnection()
{
  uint64_t result;

  result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

void audioRendererServer_disposeFSBARServedState(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
    {
      CFRelease(v2);
      *a1 = 0;
    }
    v3 = a1[1];
    if (v3)
    {
      CFRelease(v3);
      a1[1] = 0;
    }
    v4 = a1[2];
    if (v4)
      CFRelease(v4);
    free(a1);
  }
}

uint64_t audioRendererServer_flushFromTimeCompletionCallback(int a1, uint64_t a2)
{
  if (!FigXPCCreateBasicMessage())
  {
    xpc_dictionary_set_uint64(0, "completionID", *(_QWORD *)a2);
    xpc_dictionary_set_int64(0, "completionStatus", a1);
    xpc_connection_send_message(*(xpc_connection_t *)(a2 + 16), 0);
  }
  audioRendererServer_destroyFlushFromTimeCompletionCallbackContext((_QWORD *)a2);
  return FigXPCRelease();
}

void audioRendererServer_destroyFlushFromTimeCompletionCallbackContext(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    FigXPCRelease();
    v2 = (const void *)a1[3];
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

NSObject *FigCaptionRendererSessionSetMasterClock(NSObject *result, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)fcrSessionSetMasterClockDo);
      return v4;
    }
  }
  return result;
}

uint64_t fcrSessionSetMasterClockDo(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;

  result = FigCaptionRendererTriggerCreate(*(OpaqueCMClock **)a1, *(_DWORD *)(*(_QWORD *)(a1 + 16) + 1352), (uint64_t)onTriggerEvent, (uint64_t)onTriggerTimeUpdate, *(_QWORD *)(a1 + 16), (uint64_t *)(*(_QWORD *)(a1 + 16) + 48));
  v3 = *(_DWORD **)(a1 + 8);
  if (v3)
    *v3 = result;
  return result;
}

uint64_t FigCaptionRendererSessionSetCALayerDevice(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v4;
  const void *Value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double (*v9)(uint64_t);
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t ProtocolVTable;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, double, double, double, double);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(const void *);
  uint64_t v23;

  if (!a1 || !*(_QWORD *)(a1 + 168))
    return 0;
  v4 = *(const __CFDictionary **)(a1 + 584);
  if (v4)
    Value = CFDictionaryGetValue(v4, *(const void **)(a1 + 248));
  else
    Value = 0;
  v6 = FigCaptionRendererCALayerOutputCreate((uint64_t)onUserEvent, (uint64_t)onViewportChanged, (uint64_t)drawInContext, a1, a2, (uint64_t)Value, *MEMORY[0x1E0C9AE00], (_QWORD *)(a1 + 64));
  if ((_DWORD)v6)
    goto LABEL_25;
  *(_DWORD *)(a1 + 616) = FigCDSCALayerOutputGetOrientation();
  *(_DWORD *)(a1 + 620) = FigCaptionRendererCALayerOutputGetDisplayScale();
  v7 = *(_QWORD *)(a1 + 248);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v9)
  {
    v10 = v9(v8);
    v12 = v11;
    v14 = v13;
    v16 = v15;
  }
  else
  {
    v10 = *MEMORY[0x1E0C9D628];
    v12 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v14 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v16 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_20;
  v18 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v18)
    goto LABEL_20;
  v19 = *(uint64_t (**)(uint64_t, double, double, double, double))(v18 + 96);
  if (!v19)
  {
LABEL_24:
    v23 = 4294954514;
    goto LABEL_21;
  }
  v6 = v19(v7, v10, v12, v14, v16);
  if ((_DWORD)v6)
  {
LABEL_25:
    v23 = v6;
    goto LABEL_21;
  }
  if (!*(_QWORD *)(a1 + 584))
    return 0;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (!v20 || (v21 = *(_QWORD *)(v20 + 16)) == 0)
  {
LABEL_20:
    v23 = 4294954508;
LABEL_21:
    FigSignalErrorAt();
    return v23;
  }
  v22 = *(uint64_t (**)(const void *))(v21 + 56);
  if (!v22)
    goto LABEL_24;
  v23 = v22(Value);
  if ((_DWORD)v23)
    goto LABEL_21;
  return v23;
}

NSObject *FigCaptionRendererSessionSetCGContextDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  NSObject *v8;
  _QWORD context[5];
  int v10;
  int v11;
  unsigned int *v12;
  NSObject *v13;
  unsigned int v14;

  v14 = 0;
  if (result)
  {
    v8 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&context[4] = a8;
      v10 = a3;
      v11 = a4;
      v12 = &v14;
      v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetCGContextDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t fcrSessionSetCGContextDeviceDo(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  const __CFDictionary *v9;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v12;
  void (*v13)(const void *, _QWORD);
  const void *v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v18;
  uint64_t v19;
  double (*v20)(uint64_t);
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, double, double, double, double);
  uint64_t result;
  int v32;
  int *v33;

  v2 = a1[7];
  v3 = *a1;
  v4 = *((double *)a1 + 1);
  v5 = *((double *)a1 + 2);
  v6 = *((double *)a1 + 3);
  v7 = *((double *)a1 + 4);
  v8 = a1[5];
  v9 = *(const __CFDictionary **)(v2 + 584);
  if (v9)
  {
    Value = CFDictionaryGetValue(v9, *(const void **)(v2 + 248));
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v12 = *(_QWORD *)(ProtocolVTable + 16);
      if (v12)
      {
        v13 = *(void (**)(const void *, _QWORD))(v12 + 16);
        if (v13)
          v13(Value, 0);
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248));
    v14 = *(const void **)(v2 + 584);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v2 + 584) = 0;
    }
  }
  v15 = FigCaptionRendererCGOutputCreate((uint64_t)onViewportChanged, (uint64_t)drawInContext, v2, v3, *MEMORY[0x1E0C9AE00], (_QWORD *)(v2 + 64));
  if (v15)
    goto LABEL_25;
  *(_QWORD *)(v2 + 616) = v8;
  v16 = *(_QWORD *)(v2 + 64);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 48);
  if (!v17)
    goto LABEL_19;
  v15 = v17(v16, 1, v4, v5, v6, v7);
  if (v15)
  {
LABEL_25:
    v32 = v15;
    goto LABEL_21;
  }
  v18 = *(_QWORD *)(v2 + 248);
  v19 = *(_QWORD *)(v2 + 64);
  v20 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v20)
  {
    v21 = v20(v19);
    v23 = v22;
    v25 = v24;
    v27 = v26;
  }
  else
  {
    v21 = *MEMORY[0x1E0C9D628];
    v23 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v25 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v27 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v28 = CMBaseObjectGetProtocolVTable();
  if (!v28 || (v29 = *(_QWORD *)(v28 + 16)) == 0)
  {
    v32 = -12788;
    goto LABEL_21;
  }
  v30 = *(uint64_t (**)(uint64_t, double, double, double, double))(v29 + 96);
  if (v30)
  {
    result = v30(v18, v21, v23, v25, v27);
    v32 = result;
    if (!(_DWORD)result)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_19:
  v32 = -12782;
LABEL_21:
  result = FigSignalErrorAt();
LABEL_22:
  v33 = (int *)a1[6];
  if (v33)
    *v33 = v32;
  return result;
}

NSObject *FigCaptionRendererSessionSetLegibleOutputDevice(NSObject *result, uint64_t a2, int a3, int a4, double a5, double a6, double a7, double a8)
{
  NSObject *v8;
  _QWORD context[5];
  int v10;
  int v11;
  unsigned int *v12;
  NSObject *v13;
  unsigned int v14;

  v14 = 0;
  if (result)
  {
    v8 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = a2;
      *(double *)&context[1] = a5;
      *(double *)&context[2] = a6;
      *(double *)&context[3] = a7;
      *(double *)&context[4] = a8;
      v10 = a3;
      v11 = a4;
      v12 = &v14;
      v13 = v8;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetLegibleOutputDeviceDo);
      return v14;
    }
  }
  return result;
}

uint64_t fcrSessionSetLegibleOutputDeviceDo(uint64_t *a1)
{
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v11;
  uint64_t v12;
  double (*v13)(uint64_t);
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t ProtocolVTable;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, double, double, double, double);
  uint64_t result;
  int v25;
  int *v26;

  v2 = (_QWORD *)a1[7];
  v3 = *((double *)a1 + 1);
  v4 = *((double *)a1 + 2);
  v5 = *((double *)a1 + 3);
  v6 = *((double *)a1 + 4);
  v7 = a1[5];
  v8 = FigCaptionRendererLegibleOutputCreate((uint64_t)onViewportChanged, (uint64_t)layoutInContext, (uint64_t)v2, *a1, v2 + 8);
  if (v8)
    goto LABEL_18;
  v2[77] = v7;
  v9 = v2[8];
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 48);
  if (!v10)
    goto LABEL_12;
  v8 = v10(v9, 1, v3, v4, v5, v6);
  if (v8)
  {
LABEL_18:
    v25 = v8;
    goto LABEL_14;
  }
  v11 = v2[31];
  v12 = v2[8];
  v13 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v13)
  {
    v14 = v13(v12);
    v16 = v15;
    v18 = v17;
    v20 = v19;
  }
  else
  {
    v14 = *MEMORY[0x1E0C9D628];
    v16 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v18 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v20 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v22 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v25 = -12788;
    goto LABEL_14;
  }
  v23 = *(uint64_t (**)(uint64_t, double, double, double, double))(v22 + 96);
  if (v23)
  {
    result = v23(v11, v14, v16, v18, v20);
    v25 = result;
    if (!(_DWORD)result)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_12:
  v25 = -12782;
LABEL_14:
  result = FigSignalErrorAt();
LABEL_15:
  v26 = (int *)a1[6];
  if (v26)
    *v26 = v25;
  return result;
}

void SetProfileDo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const __CFDictionary *v4;
  const void *v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(const void *, _QWORD);
  int v9;
  int v10;
  const void *v11;
  CFTypeRef v12;
  int *v13;
  CFTypeRef cf;
  void *value;

  v2 = *(_QWORD *)a1;
  value = 0;
  v3 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 268) == v3)
    goto LABEL_24;
  v4 = *(const __CFDictionary **)(v2 + 584);
  if (!v4)
    goto LABEL_8;
  v5 = CFDictionaryGetValue(v4, *(const void **)(v2 + 248));
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v7 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v10 = -12788;
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_25;
  }
  v8 = *(uint64_t (**)(const void *, _QWORD))(v7 + 16);
  if (!v8)
  {
    v10 = -12782;
    goto LABEL_12;
  }
  v9 = v8(v5, 0);
  if (v9)
    goto LABEL_31;
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248));
  v3 = *(_DWORD *)(a1 + 8);
LABEL_8:
  if ((v3 | 2) == 3)
  {
    cf = 0;
    v9 = FigCaptionRendererAVFLayoutRegionCreate((uint64_t)onDisplayUpdateEvent, v2, &cf);
    if (v9)
      goto LABEL_31;
  }
  else
  {
    cf = 0;
    v9 = FigCaptionRendererFreeLayoutRegionCreate((uint64_t)onDisplayUpdateEvent, v2, &cf);
    if (v9)
      goto LABEL_31;
  }
  v11 = *(const void **)(v2 + 248);
  v12 = cf;
  *(_QWORD *)(v2 + 248) = cf;
  if (v12)
    CFRetain(v12);
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  if (!*(_QWORD *)(v2 + 584))
    goto LABEL_23;
  v9 = FigCaptionRendererCALayerOutputNodeCreate(&value);
  if (v9)
  {
LABEL_31:
    v10 = v9;
    goto LABEL_12;
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248), value);
LABEL_23:
  *(_DWORD *)(v2 + 268) = *(_DWORD *)(a1 + 8);
  applyContextDefaultsToMASettings((int64x2_t *)v2);
LABEL_24:
  v10 = 0;
LABEL_25:
  v13 = *(int **)(a1 + 16);
  if (v13)
    *v13 = v10;
  if (value)
    CFRelease(value);
}

uint64_t FigCaptionRendererSessionSetPlayer(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v4[2];

  if (a1)
  {
    v4[0] = a1;
    v4[1] = a2;
    if (a2 | *(_QWORD *)(a1 + 72))
    {
      v2 = *(NSObject **)(a1 + 168);
      if (v2)
        dispatch_sync_f(v2, v4, (dispatch_function_t)setPlayerDo);
    }
  }
  return 0;
}

void setPlayerDo(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  uint64_t *v6;
  CFTypeRef v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  _QWORD v12[2];
  int v13;

  v1 = *a1;
  v2 = (const void *)a1[1];
  if (*(const void **)(*a1 + 72) != v2)
  {
    v4 = (uint64_t *)(v1 + 56);
    v3 = *(_QWORD *)(v1 + 56);
    if (!v3)
    {
      if (FigCaptionRendererNotificationInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, (uint64_t)onTextHighlightArray, v1, *MEMORY[0x1E0C9AE00], (_QWORD *)(v1 + 56)))goto LABEL_26;
      v3 = *v4;
    }
    if (FigCaptionRendererNotificationInputSetPlayer(v3, (uint64_t)v2))
      goto LABEL_26;
    if (*(_QWORD *)(v1 + 72))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v5 = *(const void **)(v1 + 72);
    }
    else
    {
      v5 = 0;
    }
    *(_QWORD *)(v1 + 72) = v2;
    if (v2)
      CFRetain(v2);
    if (v5)
      CFRelease(v5);
    if (*(_QWORD *)(v1 + 72))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      MEMORY[0x19402EEEC](*(_QWORD *)(v1 + 1376));
      *(_BYTE *)(v1 + 1347) = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(v1 + 1376));
      v13 = FigCaptionRendererTriggerCreate(0, *(_DWORD *)(v1 + 1352), (uint64_t)onTriggerEvent, (uint64_t)onTriggerTimeUpdate, v1, (uint64_t *)(v1 + 48));
      if (!v13)
      {
        v12[0] = &v13;
        v12[1] = v1;
        fcrSessionStartDo((uint64_t)v12);
        if (v13)
          FigSignalErrorAt();
        return;
      }
LABEL_26:
      FigSignalErrorAt();
      return;
    }
    v6 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *v6 = (uint64_t)CFRetain((CFTypeRef)v1);
    v7 = *(CFTypeRef *)(v1 + 72);
    if (v7)
      v7 = CFRetain(v7);
    v6[1] = (uint64_t)v7;
    playbackItemChangedCallbackDo(v6);
    v8 = (CFTypeRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
    if (!v8)
      goto LABEL_26;
    v9 = v8;
    v10 = (CFTypeRef)*v4;
    if (*v4)
      v10 = CFRetain(v10);
    v9[1] = v10;
    v11 = *(CFTypeRef *)(v1 + 48);
    if (v11)
      v11 = CFRetain(v11);
    v9[2] = v11;
    *v9 = CFRetain((CFTypeRef)v1);
    fcrSessionStopDo(v9);
  }
}

void updateDisplayPort(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  double *v10;
  double *v11;
  NSObject *v12;

  if (a1[22])
  {
    v10 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x102004065753CD5uLL);
    if (v10)
    {
      v11 = v10;
      *(_QWORD *)v10 = CFRetain(a1);
      v11[1] = a2;
      v11[2] = a3;
      v12 = MEMORY[0x1E0C80D38];
      v11[3] = a4;
      v11[4] = a5;
      dispatch_async_f(v12, v11, (dispatch_function_t)updateDisplayPortDoAsync);
    }
  }
}

NSObject *FigCaptionRendererSessionSetCaptionArray(NSObject *result, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v3[2] = v2;
      v3[0] = a2;
      v3[1] = &v4;
      dispatch_sync_f(result, v3, (dispatch_function_t)fcrSessionSetCaptionArrayDo);
      return v4;
    }
  }
  return result;
}

uint64_t fcrSessionSetCaptionArrayDo(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;
  _QWORD v7[3];
  int v8;

  v8 = 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(const void **)a1;
  v4 = *(_QWORD *)(v2 + 56);
  if (v4)
  {
LABEL_4:
    result = FigCaptionRendererCaptionArrayInputSetCaptionsArray(v4, v3);
    v8 = result;
    if (!(_DWORD)result)
      goto LABEL_5;
    goto LABEL_8;
  }
  v8 = FigCaptionRendererCaptionArrayInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, v2, *MEMORY[0x1E0C9AE00], (_QWORD *)(v2 + 56));
  if (!v8)
  {
    v7[0] = v2;
    v7[1] = 2;
    v7[2] = &v8;
    SetProfileDo((uint64_t)v7);
    v4 = *(_QWORD *)(v2 + 56);
    goto LABEL_4;
  }
LABEL_8:
  result = FigSignalErrorAt();
LABEL_5:
  v6 = *(_DWORD **)(a1 + 8);
  if (v6)
    *v6 = v8;
  return result;
}

NSObject *FigCaptionRendererSessionSetCaptionSample(NSObject *result, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD context[4];
  unsigned int v5;

  v5 = 0;
  if (result)
  {
    v3 = result;
    result = result[21].isa;
    if (result)
    {
      context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetCaptionSampleDo);
      return v5;
    }
  }
  return result;
}

uint64_t fcrSessionSetCaptionSampleDo(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t result;
  _DWORD *v8;
  _QWORD v9[3];
  int v10;

  v10 = 0;
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = (uint64_t *)(v2 + 56);
  v5 = *(_QWORD *)(v2 + 56);
  if (!v5)
  {
    v10 = FigCaptionRendererBasicInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, v2, *MEMORY[0x1E0C9AE00], v6);
    if (v10)
    {
LABEL_10:
      result = FigSignalErrorAt();
      goto LABEL_7;
    }
    v9[0] = v2;
    v9[1] = 1;
    v9[2] = &v10;
    SetProfileDo((uint64_t)v9);
    v5 = *(_QWORD *)(v2 + 56);
  }
  if (v4)
  {
    FigCaptionRendererBasicInputSetLayoutContext(v5, v4);
    v5 = *v6;
  }
  result = FigCaptionRendererBasicInputAddSample(v5, v3);
  v10 = result;
  if ((_DWORD)result)
    goto LABEL_10;
LABEL_7:
  v8 = *(_DWORD **)(a1 + 16);
  if (v8)
    *v8 = v10;
  return result;
}

NSObject *FigCaptionRendererSessionNotificationInputSetCaptionSample(NSObject *result, uint64_t a2)
{
  NSObject *v2;
  _QWORD context[4];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      context[2] = &v4;
      context[3] = v2;
      context[0] = a2;
      context[1] = 0;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionNotificationInputSetCaptionSampleDo);
      return v4;
    }
  }
  return result;
}

uint64_t fcrSessionNotificationInputSetCaptionSampleDo(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t result;
  int v8;
  _DWORD *v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(const void **)a1;
  v5 = (uint64_t *)(v2 + 56);
  v4 = *(_QWORD *)(v2 + 56);
  if (v4)
  {
LABEL_4:
    result = FigCaptionRendererNotificationInputAddSample(v4, v3);
    v8 = result;
    if (!(_DWORD)result)
      goto LABEL_5;
    goto LABEL_9;
  }
  v6 = FigCaptionRendererNotificationInputCreate((uint64_t)onCaptionInput, (uint64_t)onRegionInput, (uint64_t)onTextHighlightArray, v2, *MEMORY[0x1E0C9AE00], v5);
  if (!v6)
  {
    v4 = *v5;
    goto LABEL_4;
  }
  v8 = v6;
LABEL_9:
  result = FigSignalErrorAt();
LABEL_5:
  v9 = *(_DWORD **)(a1 + 16);
  if (v9)
    *v9 = v8;
  return result;
}

NSObject *FigCaptionRendererSessionStart(NSObject *result)
{
  NSObject *v1;
  _QWORD context[2];
  unsigned int v3;

  v3 = 0;
  if (result)
  {
    v1 = result;
    result = result[21].isa;
    if (result)
    {
      context[0] = &v3;
      context[1] = v1;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionStartDo);
      return v3;
    }
  }
  return result;
}

uint64_t fcrSessionStartDo(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v2 + 48);
  if (result && (result = FigCDSTriggerStart(result), (_DWORD)result))
  {
    LODWORD(v4) = result;
  }
  else
  {
    *(_BYTE *)(v2 + 40) = 1;
    v4 = *(_QWORD *)(v2 + 56);
    if (!v4)
      goto LABEL_9;
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v5)
    {
      result = v5(v4);
      LODWORD(v4) = result;
      if (!(_DWORD)result)
        goto LABEL_9;
    }
    else
    {
      LODWORD(v4) = -12782;
    }
  }
  result = FigSignalErrorAt();
LABEL_9:
  if (*(_QWORD *)a1)
    **(_DWORD **)a1 = v4;
  return result;
}

uint64_t FigCaptionRendererSessionStop(uint64_t a1)
{
  _QWORD *v2;
  CFTypeRef v3;
  CFTypeRef v4;

  if (a1 && *(_QWORD *)(a1 + 168))
  {
    v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
    v3 = *(CFTypeRef *)(a1 + 56);
    if (v3)
      v3 = CFRetain(v3);
    v2[1] = v3;
    v4 = *(CFTypeRef *)(a1 + 48);
    if (v4)
      v4 = CFRetain(v4);
    v2[2] = v4;
    *v2 = CFRetain((CFTypeRef)a1);
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 168), v2, (dispatch_function_t)fcrSessionStopDo);
  }
  return 0;
}

void fcrSessionStopDo(_QWORD *a1)
{
  uint64_t v2;
  unsigned int (*v3)(uint64_t);
  uint64_t v4;
  const void *v5;
  const void *v6;

  v2 = a1[1];
  if (v2
    && ((v3 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) == 0
     || v3(v2))
    || (*(_BYTE *)(*a1 + 40) = 0, (v4 = a1[2]) != 0) && FigCDSTriggerStop(v4))
  {
    FigSignalErrorAt();
  }
  v5 = (const void *)a1[1];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[2];
  if (v6)
    CFRelease(v6);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  free(a1);
}

NSObject *FigCaptionRendererSessionSetTime(NSObject *result, __int128 *a2)
{
  NSObject *v2;
  __int128 v3;
  uint64_t v4;
  unsigned int *v5;
  NSObject *v6;
  unsigned int v7;

  v7 = 0;
  if (result)
  {
    v2 = result;
    if (result[6].isa)
    {
      result = result[21].isa;
      if (result)
      {
        v6 = v2;
        v3 = *a2;
        v4 = *((_QWORD *)a2 + 2);
        v5 = &v7;
        dispatch_sync_f(result, &v3, (dispatch_function_t)fcrSessionSetTimeDo);
        return v7;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t fcrSessionSetTimeDo(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v4;
  CMTime v5;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = *(CMTime *)a1;
  result = FigCDSTriggerSetCurrentTime(*(_QWORD *)(v2 + 48), &v5);
  v4 = *(_DWORD **)(a1 + 24);
  if (v4)
    *v4 = result;
  return result;
}

NSObject *FigCaptionRendererSessionSetCaptionCacheRange(NSObject *result, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD context[4];
  unsigned int v5;

  v5 = 0;
  if (result)
  {
    v3 = result;
    result = result[21].isa;
    if (result)
    {
      context[2] = &v5;
      context[3] = v3;
      context[0] = a2;
      context[1] = a3;
      dispatch_sync_f(result, context, (dispatch_function_t)fcrSessionSetCaptionCacheRangeDo);
      return v5;
    }
  }
  return result;
}

uint64_t fcrSessionSetCaptionCacheRangeDo(uint64_t result)
{
  _DWORD *v1;

  *(_OWORD *)(*(_QWORD *)(result + 24) + 88) = *(_OWORD *)result;
  v1 = *(_DWORD **)(result + 16);
  if (v1)
    *v1 = 0;
  return result;
}

uint64_t FigCaptionRendererSessionSetRate(uint64_t result, double a2)
{
  NSObject *v2;
  _QWORD v3[3];
  unsigned int v4;

  v4 = 0;
  if (result)
  {
    if (*(_QWORD *)(result + 48))
    {
      v2 = *(NSObject **)(result + 168);
      if (v2)
      {
        v3[1] = &v4;
        v3[2] = result;
        *(double *)v3 = a2;
        dispatch_sync_f(v2, v3, (dispatch_function_t)fcrSessionSetRateDo);
        return v4;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t fcrSessionSetRateDo(uint64_t a1)
{
  uint64_t result;
  _DWORD *v3;

  result = FigCDSTriggerSetRate(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), *(Float64 *)a1);
  v3 = *(_DWORD **)(a1 + 8);
  if (v3)
    *v3 = result;
  return result;
}

double FigCaptionRendererSessionGetRate(uint64_t a1)
{
  double result;
  NSObject *v3;
  _QWORD v4[2];

  result = 0.0;
  if (a1)
  {
    v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      v4[0] = 0;
      v4[1] = a1;
      dispatch_sync_f(v3, v4, (dispatch_function_t)fcrSessionGetRateDo);
      return *(double *)v4;
    }
  }
  return result;
}

void fcrSessionGetRateDo(uint64_t a1)
{
  uint64_t v2;
  double Rate;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
  if (v2)
    Rate = FigCDSTriggerGetRate(v2);
  else
    Rate = 0.0;
  *(double *)a1 = Rate;
}

uint64_t FigCaptionRendererSessionSetLayoutContext_Viewport(uint64_t result, double a2, double a3, double a4, double a5)
{
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t ProtocolVTable;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, double, double, double, double);
  int v15;
  _QWORD context[5];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int *v25;
  unsigned int v26;

  v26 = 0;
  if (result)
  {
    v9 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 1376));
    if (!*(_BYTE *)(v9 + 1347))
    {
      *(double *)(v9 + 768) = a2;
      *(double *)(v9 + 776) = a3;
      *(double *)(v9 + 784) = a4;
      *(double *)(v9 + 792) = a5;
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 1376));
      return 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 1376));
    v10 = *(NSObject **)(v9 + 168);
    if (v10)
    {
      context[1] = 0;
      v18 = 0u;
      v24 = 0u;
      v23 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      context[0] = v9;
      *(double *)&context[2] = a2;
      *(double *)&context[3] = a3;
      *(double *)&context[4] = a4;
      v17 = *(unint64_t *)&a5;
      v25 = &v26;
      dispatch_sync_f(v10, context, (dispatch_function_t)SetViewportDo);
    }
    v11 = *(_QWORD *)(v9 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable && (v13 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
    {
      v14 = *(uint64_t (**)(uint64_t, double, double, double, double))(v13 + 96);
      if (v14)
      {
        result = v14(v11, a2, a3, a4, a5);
        v26 = result;
        if (!(_DWORD)result)
          return result;
        goto LABEL_14;
      }
      v15 = -12782;
    }
    else
    {
      v15 = -12788;
    }
    v26 = v15;
LABEL_14:
    FigSignalErrorAt();
    return v26;
  }
  return result;
}

uint64_t SetViewportDo(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t result;
  double v5;
  double v6;
  __int128 v7;
  const __CFDictionary *v8;
  const void *Value;
  uint64_t v10;
  uint64_t ProtocolVTable;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD);
  _DWORD *v14;
  _OWORD v15[2];
  uint64_t v16;

  v2 = *(_QWORD *)a1;
  v3 = (_OWORD *)(a1 + 16);
  if (CGRectEqualToRect(*(CGRect *)(*(_QWORD *)a1 + 624), *(CGRect *)(a1 + 16)))
  {
    result = 0;
  }
  else
  {
    v5 = *(double *)(v2 + 640);
    v6 = *(double *)(v2 + 648);
    v7 = v3[1];
    *(_OWORD *)(v2 + 624) = *v3;
    *(_OWORD *)(v2 + 640) = v7;
    v8 = *(const __CFDictionary **)(v2 + 584);
    if (v8)
    {
      v16 = 0;
      memset(v15, 0, sizeof(v15));
      Value = CFDictionaryGetValue(v8, *(const void **)(v2 + 248));
      getOutputNodeLayout((uint64_t)Value, (uint64_t)v15);
      v10 = v16;
      if (v16)
      {
        if (vabdd_f64(v5, *(double *)(a1 + 32)) > v5 * 0.1 || vabdd_f64(v6, *(double *)(a1 + 40)) > v6 * 0.1)
        {
          FigCaptionRendererOutputNodeProtocolGetProtocolID();
          ProtocolVTable = CMBaseObjectGetProtocolVTable();
          if (ProtocolVTable)
          {
            v12 = *(_QWORD *)(ProtocolVTable + 16);
            if (v12)
            {
              v13 = *(void (**)(uint64_t, _QWORD))(v12 + 120);
              if (v13)
                v13(v10, 0);
            }
          }
        }
      }
    }
    result = UpdateLayoutContext(v2);
  }
  v14 = *(_DWORD **)(a1 + 168);
  if (v14)
    *v14 = result;
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_VideoSize(NSObject *result, double a2, double a3)
{
  NSObject *v5;
  NSObject *context;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned int *v18;
  unsigned int v19;

  v19 = 0;
  if (result)
  {
    v5 = result;
    MEMORY[0x19402EEEC](result[172].isa);
    if (BYTE3(v5[168].isa))
    {
      MEMORY[0x19402EF04](v5[172].isa);
      result = v5[21].isa;
      if (result)
      {
        v9 = 0;
        v17 = 0u;
        v16 = 0u;
        v14 = 0u;
        v15 = 0u;
        v12 = 0u;
        v13 = 0u;
        v7 = 0u;
        v8 = 0u;
        context = v5;
        v10 = a2;
        v11 = *(unint64_t *)&a3;
        v18 = &v19;
        dispatch_sync_f(result, &context, (dispatch_function_t)SetVideoSizeDo);
        return v19;
      }
    }
    else
    {
      *(double *)&v5[100].isa = a2;
      *(double *)&v5[101].isa = a3;
      MEMORY[0x19402EF04](v5[172].isa);
      return 0;
    }
  }
  return result;
}

uint64_t SetVideoSizeDo(uint64_t a1)
{
  _OWORD *v2;
  double v3;
  uint64_t v4;
  uint64_t result;
  _DWORD *v7;

  v2 = (_OWORD *)(a1 + 48);
  v3 = *(double *)(a1 + 48);
  v4 = *(_QWORD *)a1;
  if (*(double *)(v4 + 656) == v3 && *(double *)(v4 + 664) == *(double *)(a1 + 56))
  {
    result = 0;
  }
  else
  {
    *(_OWORD *)(v4 + 656) = *v2;
    result = UpdateLayoutContext(v4);
  }
  v7 = *(_DWORD **)(a1 + 168);
  if (v7)
    *v7 = result;
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_Gravity(NSObject *result, char a2)
{
  NSObject *v2;
  NSObject *context;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int *v14;
  unsigned int v15;

  v15 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v13 = 0u;
      v12 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v4 = 0u;
      v5 = 0u;
      context = v2;
      BYTE8(v13) = a2;
      v14 = &v15;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetGravityDo);
      return v15;
    }
  }
  return result;
}

uint64_t SetGravityDo(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 160);
  if (*(unsigned __int8 *)(result + 272) != v3)
  {
    *(_BYTE *)(result + 272) = v3;
    return UpdateLayoutContext(result);
  }
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_Overscan(NSObject *result, char a2)
{
  NSObject *v2;
  NSObject *context;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int *v14;
  unsigned int v15;

  v15 = 0;
  if (result)
  {
    v2 = result;
    result = result[21].isa;
    if (result)
    {
      v13 = 0u;
      v12 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v4 = 0u;
      v5 = 0u;
      context = v2;
      BYTE9(v13) = a2;
      v14 = &v15;
      dispatch_sync_f(result, &context, (dispatch_function_t)SetOverscanDo);
      return v15;
    }
  }
  return result;
}

uint64_t SetOverscanDo(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  BOOL v5;
  _DWORD *v6;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 161);
  if (*(unsigned __int8 *)(*(_QWORD *)a1 + 273) == v3)
  {
    result = 0;
  }
  else
  {
    *(_BYTE *)(v2 + 273) = v3;
    result = *(_QWORD *)(v2 + 64);
    if (v3)
      v5 = result == 0;
    else
      v5 = 1;
    if (!v5)
    {
      *(double *)(v2 + 280) = FigCDSCALayerOutputGetOverscan();
      result = *(_QWORD *)(v2 + 64);
    }
    if (result)
      result = UpdateLayoutContext(v2);
  }
  v6 = *(_DWORD **)(a1 + 168);
  if (v6)
    *v6 = result;
  return result;
}

uint64_t FigCaptionRendererSessionGetLayoutContext_Overscan(uint64_t a1, _BYTE *a2)
{
  NSObject *v3;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (a1)
  {
    v3 = *(NSObject **)(a1 + 168);
    if (v3)
    {
      v17 = 0;
      v16 = 0u;
      v15 = 0u;
      v14 = 0u;
      v13 = 0u;
      v12 = 0u;
      v11 = 0u;
      v10 = 0u;
      v9 = 0u;
      v8 = 0u;
      v7 = 0u;
      v6 = a1;
      dispatch_sync_f(v3, &v6, (dispatch_function_t)GetOverscanDo);
      *a2 = BYTE9(v16);
    }
  }
  return 0;
}

_BYTE *GetOverscanDo(_BYTE *result)
{
  result[161] = *(_BYTE *)(*(_QWORD *)result + 273);
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_VideoRelativeToViewport(NSObject *result, double a2, double a3, double a4, double a5)
{
  NSObject *v9;
  NSObject *context;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;

  v24 = 0;
  if (result)
  {
    v9 = result;
    MEMORY[0x19402EEEC](result[172].isa);
    if (BYTE3(v9[168].isa))
    {
      MEMORY[0x19402EF04](v9[172].isa);
      result = v9[21].isa;
      if (result)
      {
        v14 = 0;
        v19 = 0u;
        v22 = 0u;
        v21 = 0u;
        v20 = 0u;
        v12 = 0u;
        v13 = 0u;
        v11 = 0u;
        context = v9;
        v15 = a2;
        v16 = a3;
        v17 = a4;
        v18 = *(unint64_t *)&a5;
        v23 = &v24;
        dispatch_sync_f(result, &context, (dispatch_function_t)SetVideoRelativeToViewportDo);
        return v24;
      }
    }
    else
    {
      *(double *)&v9[102].isa = a2;
      *(double *)&v9[103].isa = a3;
      *(double *)&v9[104].isa = a4;
      *(double *)&v9[105].isa = a5;
      MEMORY[0x19402EF04](v9[172].isa);
      return 0;
    }
  }
  return result;
}

uint64_t SetVideoRelativeToViewportDo(CGRect **a1)
{
  CGRect *v2;
  CGPoint *v3;
  uint64_t result;
  CGSize v5;
  CGRect *v6;

  v2 = *a1;
  v3 = (CGPoint *)(a1 + 8);
  if (CGRectEqualToRect((*a1)[21], *((CGRect *)a1 + 2)))
  {
    result = 0;
  }
  else
  {
    v5 = (CGSize)v3[1];
    v2[21].origin = *v3;
    v2[21].size = v5;
    result = UpdateLayoutContext((uint64_t)v2);
  }
  v6 = a1[21];
  if (v6)
    LODWORD(v6->origin.x) = result;
  return result;
}

NSObject *FigCaptionRendererSessionSetLayoutContext_CaptionsAvoidanceMargins(NSObject *result, _OWORD *a2)
{
  NSObject *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *context;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[5];
  unsigned int *v16;
  unsigned int v17;

  v17 = 0;
  if (result)
  {
    v3 = result;
    MEMORY[0x19402EEEC](result[172].isa);
    if (BYTE3(v3[168].isa))
    {
      MEMORY[0x19402EF04](v3[172].isa);
      result = v3[21].isa;
      if (result)
      {
        memset(v15, 0, sizeof(v15));
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v10 = 0u;
        context = v3;
        v4 = a2[1];
        *(_OWORD *)((char *)v15 + 8) = *a2;
        *(_OWORD *)((char *)&v15[1] + 8) = v4;
        v5 = a2[3];
        *(_OWORD *)((char *)&v15[2] + 8) = a2[2];
        *(_OWORD *)((char *)&v15[3] + 8) = v5;
        v16 = &v17;
        dispatch_sync_f(result, &context, (dispatch_function_t)SetCaptionsAvoidanceMarginsDo);
        return v17;
      }
    }
    else
    {
      v6 = *a2;
      v7 = a2[1];
      v8 = a2[3];
      *(_OWORD *)&v3[110].isa = a2[2];
      *(_OWORD *)&v3[112].isa = v8;
      *(_OWORD *)&v3[106].isa = v6;
      *(_OWORD *)&v3[108].isa = v7;
      MEMORY[0x19402EF04](v3[172].isa);
      return 0;
    }
  }
  return result;
}

void SetCaptionsAvoidanceMarginsDo(uint64_t a1)
{
  _OWORD *v2;
  int updated;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;

  v2 = *(_OWORD **)a1;
  if (FigGeometryMarginsEqualToMargins())
  {
    updated = 0;
  }
  else
  {
    v4 = *(_OWORD *)(a1 + 96);
    v5 = *(_OWORD *)(a1 + 112);
    v6 = *(_OWORD *)(a1 + 144);
    v2[46] = *(_OWORD *)(a1 + 128);
    v2[47] = v6;
    v2[44] = v4;
    v2[45] = v5;
    updated = UpdateLayoutContext((uint64_t)v2);
    drawInContext(0, (uint64_t)v2);
  }
  v7 = *(_DWORD **)(a1 + 168);
  if (v7)
    *v7 = updated;
}

uint64_t FigCaptionRendererSessionUpdateLegibleOutputContext(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t updated;

  if (!a1 || !a1[21])
    return 0;
  v4 = a1[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v6 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    updated = 4294954508;
LABEL_12:
    FigSignalErrorAt();
    return updated;
  }
  v7 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 232);
  if (!v7)
  {
    updated = 4294954514;
    goto LABEL_12;
  }
  v8 = v7(v4, 1);
  if ((_DWORD)v8)
  {
    updated = v8;
    goto LABEL_12;
  }
  v9 = a1[8];
  if (!v9)
    return 0;
  updated = FigCaptionRendererCGOutputUpdateCGContext(v9, a2);
  if ((_DWORD)updated)
    goto LABEL_12;
  return updated;
}

uint64_t FigCaptionRendererSessionUpdateCGContext(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t updated;

  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 168))
    return 0;
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    return 0;
  updated = FigCaptionRendererCGOutputUpdateCGContext(v2, a2);
  if ((_DWORD)updated)
    FigSignalErrorAt();
  return updated;
}

uint64_t fcrSessionUpdateOutputDo(uint64_t result)
{
  _DWORD **v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, double, double, double, double);

  v1 = (_DWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 64);
  if (!v2)
    goto LABEL_7;
  v3 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 32);
  if (v3)
  {
    result = v3(v2, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
    LODWORD(v2) = result;
    if (!(_DWORD)result)
      goto LABEL_7;
  }
  else
  {
    LODWORD(v2) = -12782;
  }
  result = FigSignalErrorAt();
LABEL_7:
  if (*v1)
    **v1 = v2;
  return result;
}

NSObject *FigCaptionRendererSessionClear(NSObject *result, double a2, double a3, double a4, double a5)
{
  NSObject *v9;
  int v10;
  _QWORD context[6];
  unsigned int v12;

  v12 = 0;
  if (result)
  {
    v9 = result;
    MEMORY[0x19402EEEC](result[172].isa);
    v10 = BYTE3(v9[168].isa);
    MEMORY[0x19402EF04](v9[172].isa);
    if (v10)
    {
      result = v9[21].isa;
      if (result)
      {
        context[0] = v9;
        *(double *)&context[1] = a2;
        *(double *)&context[2] = a3;
        *(double *)&context[3] = a4;
        *(double *)&context[4] = a5;
        context[5] = &v12;
        dispatch_sync_f(result, context, (dispatch_function_t)clearDo);
        return v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *clearDo(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  const void *Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(const void *);
  uint64_t v15;
  uint64_t (*v16)(uint64_t, double, double, double, double);
  int v17;
  int *v18;

  v1 = result;
  v2 = *result;
  if (!*result)
    goto LABEL_21;
  v3 = *((double *)result + 1);
  v4 = *((double *)result + 2);
  v5 = *((double *)result + 3);
  v6 = *((double *)result + 4);
  purgeOutOfRangeCaptionCache(*result, MEMORY[0x1E0CA2E18]);
  v7 = *(_QWORD *)(v2 + 248);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_15;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    goto LABEL_15;
  v10 = *(uint64_t (**)(uint64_t))(v9 + 56);
  if (!v10)
  {
LABEL_16:
    v17 = -12782;
    goto LABEL_17;
  }
  LODWORD(result) = v10(v7);
  if ((_DWORD)result)
  {
LABEL_22:
    v17 = (int)result;
    goto LABEL_17;
  }
  result = *(uint64_t **)(v2 + 584);
  if (!result)
    goto LABEL_11;
  Value = CFDictionaryGetValue((CFDictionaryRef)result, *(const void **)(v2 + 248));
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  v12 = CMBaseObjectGetProtocolVTable();
  if (!v12 || (v13 = *(_QWORD *)(v12 + 16)) == 0)
  {
LABEL_15:
    v17 = -12788;
LABEL_17:
    result = (uint64_t *)FigSignalErrorAt();
    goto LABEL_18;
  }
  v14 = *(uint64_t (**)(const void *))(v13 + 56);
  if (!v14)
    goto LABEL_16;
  result = (uint64_t *)v14(Value);
  if ((_DWORD)result)
    goto LABEL_22;
LABEL_11:
  v15 = *(_QWORD *)(v2 + 64);
  if (v15)
  {
    v16 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 64);
    if (v16)
    {
      result = (uint64_t *)v16(v15, v3, v4, v5, v6);
      v17 = (int)result;
      if (!(_DWORD)result)
        goto LABEL_18;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_21:
  v17 = 0;
LABEL_18:
  v18 = (int *)v1[5];
  if (v18)
    *v18 = v17;
  return result;
}

NSObject *FigCaptionRendererSessionClearForRLO(NSObject *result)
{
  NSObject *v1;
  int v2;
  __int128 v3;
  NSObject *context;
  __int128 v5;
  __int128 v6;
  unsigned int *v7;
  unsigned int v8;

  v8 = 0;
  if (result)
  {
    v1 = result;
    MEMORY[0x19402EEEC](result[172].isa);
    v2 = BYTE3(v1[168].isa);
    MEMORY[0x19402EF04](v1[172].isa);
    if (v2)
    {
      result = v1[21].isa;
      if (result)
      {
        context = v1;
        v3 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        v5 = *MEMORY[0x1E0C9D628];
        v6 = v3;
        v7 = &v8;
        dispatch_sync_f(result, &context, (dispatch_function_t)clearRLODo);
        return v8;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void clearRLODo(uint64_t *a1)
{
  uint64_t v2;
  CFIndex Count;
  uint64_t v4;
  size_t v5;
  const void **v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  const void *v10;
  uint64_t ProtocolVTable;
  uint64_t v12;
  uint64_t (*v13)(const void *, char **);
  int v14;
  int *v15;
  char *__s1;

  __s1 = 0;
  v2 = *a1;
  if (!*a1)
  {
    v14 = 0;
    v6 = 0;
LABEL_24:
    v8 = 0;
    goto LABEL_17;
  }
  clearDo(a1);
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v2 + 584));
  if (!Count)
  {
    v6 = 0;
LABEL_23:
    v14 = FigSignalErrorAt();
    goto LABEL_24;
  }
  v4 = Count;
  v5 = 8 * Count;
  v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v6)
    goto LABEL_23;
  v7 = (const void **)malloc_type_malloc(v5, 0xC0040B8AA526DuLL);
  if (!v7)
    goto LABEL_23;
  v8 = v7;
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(v2 + 584), v6, v7);
  if (v4 < 1)
  {
LABEL_14:
    v14 = 0;
  }
  else
  {
    v9 = 0;
    while (1)
    {
      v10 = v6[v9];
      FigCaptionRendererBaseProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (!ProtocolVTable || (v12 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
      {
        v14 = -12788;
        goto LABEL_17;
      }
      v13 = *(uint64_t (**)(const void *, char **))(v12 + 8);
      if (!v13)
        break;
      v14 = v13(v10, &__s1);
      if (v14)
        goto LABEL_17;
      if (!strcmp(__s1, "FigCaptionRendererCaption"))
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 584), v6[v9]);
      if (v4 == ++v9)
        goto LABEL_14;
    }
    v14 = -12782;
  }
LABEL_17:
  v15 = (int *)a1[5];
  if (v15)
    *v15 = v14;
  free(v6);
  free(v8);
}

uint64_t FigCaptionRendererSessionSetHiddenCallback(uint64_t a1, uint64_t a2)
{
  if (a1 && !*(_QWORD *)(a1 + 1360) && !*(_QWORD *)(a1 + 1368))
  {
    *(_QWORD *)(a1 + 1360) = a2;
    *(_QWORD *)(a1 + 1368) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  }
  return 0;
}

uint64_t FigCaptionRendererSessionGetCALayerNodeLayoutForAnimation(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  const void *Value;
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v9 = *MEMORY[0x1E0C9D648];
  v10 = v4;
  v11 = 0;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 584), *(const void **)(a1 + 248));
  getOutputNodeLayout((uint64_t)Value, (uint64_t)&v9);
  *(_QWORD *)(a1 + 1400) = 0;
  v6 = v11;
  if (!v11)
    return 4294950092;
  result = 0;
  v8 = v10;
  *a2 = v9;
  a2[1] = v8;
  *(_QWORD *)(a1 + 1400) = v6;
  return result;
}

uint64_t getOutputNodeLayout(uint64_t a1, uint64_t a2)
{
  uint64_t ProtocolVTable;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t *);
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t *);
  uint64_t v22;
  uint64_t v23;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v23 = 0;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v5 = *(_QWORD *)(ProtocolVTable + 16);
    if (v5)
    {
      v6 = *(unsigned int (**)(uint64_t, uint64_t *))(v5 + 112);
      if (v6)
      {
        if (!v6(a1, &v23))
        {
          if (!v23)
          {
LABEL_17:
            v22 = 0;
            FigCaptionRendererOutputNodeProtocolGetProtocolID();
            v18 = CMBaseObjectGetProtocolVTable();
            if (v18)
            {
              v19 = *(_QWORD *)(v18 + 16);
              if (v19)
              {
                v20 = *(unsigned int (**)(uint64_t, uint64_t *))(v19 + 40);
                if (v20)
                {
                  if (!v20(a1, &v22))
                    return FigCFArrayApplyFunction();
                }
              }
            }
            return FigSignalErrorAt();
          }
          FigCaptionRendererOutputNodeProtocolGetProtocolID();
          v7 = CMBaseObjectGetProtocolVTable();
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 16);
            if (v8)
            {
              v9 = *(unsigned int (**)(uint64_t, uint64_t))(v8 + 64);
              if (v9)
              {
                if (!v9(a1, a2))
                {
                  FigCaptionRendererOutputNodeProtocolGetProtocolID();
                  v10 = CMBaseObjectGetProtocolVTable();
                  if (v10)
                  {
                    v11 = *(_QWORD *)(v10 + 16);
                    if (v11)
                    {
                      v12 = *(unsigned int (**)(uint64_t, uint64_t))(v11 + 80);
                      if (v12)
                      {
                        if (!v12(a1, a2 + 16))
                        {
                          __asm { FMOV            V0.2D, #-0.5 }
                          *(float64x2_t *)a2 = vaddq_f64(*(float64x2_t *)a2, vmulq_f64(*(float64x2_t *)(a2 + 16), _Q0));
                          *(_QWORD *)(a2 + 32) = a1;
                          goto LABEL_17;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererSessionAddAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v3 = *(_QWORD *)(a1 + 1400);
  if (v3)
  {
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v7 = *(_QWORD *)(ProtocolVTable + 16);
      if (v7)
      {
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 176);
        if (v8)
          v8(v3, a2, a3);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererSessionSetOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD context[3];

  if (!a1)
    return 0;
  if (a2)
  {
    context[0] = a1;
    context[1] = a2;
    context[2] = a3;
    v3 = *(NSObject **)(a1 + 168);
    if (v3)
      dispatch_sync_f(v3, context, (dispatch_function_t)setOptionsDo);
    return 0;
  }
  return FigSignalErrorAt();
}

void setOptionsDo(_QWORD *a1)
{
  uint64_t v2;
  __CFDictionary *Mutable;
  const void *v4;
  const void *v5;

  v2 = *a1;
  Mutable = *(__CFDictionary **)(*a1 + 1024);
  if (Mutable
    || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(v2 + 1024) = Mutable) != 0))
  {
    v4 = (const void *)a1[1];
    v5 = (const void *)a1[2];
    if (v5)
      CFDictionarySetValue(Mutable, v4, v5);
    else
      CFDictionaryRemoveValue(Mutable, v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigCaptionRendererSessionSetSeparated(uint64_t a1, unsigned __int8 a2)
{
  NSObject *v2;
  _QWORD v4[2];

  if (a1)
  {
    v4[0] = a1;
    v4[1] = a2;
    v2 = *(NSObject **)(a1 + 168);
    if (v2)
      dispatch_sync_f(v2, v4, (dispatch_function_t)setSeparatedDo);
  }
  return 0;
}

uint64_t *setSeparatedDo(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_BYTE *)(v1 + 1032) = *((_BYTE *)result + 8);
  *(_BYTE *)(v1 + 1033) = 1;
  return result;
}

uint64_t FigCaptionRendererSessionGetIsMACacheReady(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1349);
}

uint64_t FigCaptionRendererSessionCopyCaptionExtendedLanguages(uint64_t a1, __CFArray **a2)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  __CFArray *Mutable;
  const void **v8;
  const void *v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  uint64_t (*v12)(const void *, char **);
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(const void *, void **);
  uint64_t v18;
  void *value;
  char *__s1;

  value = 0;
  __s1 = 0;
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (v5)
  {
    v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
    if (!v6)
    {
      v18 = FigSignalErrorAt();
      goto LABEL_18;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v5, v6);
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      if (Count >= 1)
      {
        v8 = v5;
        do
        {
          v9 = *v8;
          FigCaptionRendererBaseProtocolGetProtocolID();
          ProtocolVTable = CMBaseObjectGetProtocolVTable();
          if (!ProtocolVTable || (v11 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
          {
LABEL_19:
            v18 = 4294954508;
            goto LABEL_21;
          }
          v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
          if (!v12)
            goto LABEL_20;
          v13 = v12(v9, &__s1);
          if ((_DWORD)v13)
            goto LABEL_27;
          if (!strcmp(__s1, "FigCaptionRendererCaption"))
          {
            v14 = *v8;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            v15 = CMBaseObjectGetProtocolVTable();
            if (!v15)
              goto LABEL_19;
            v16 = *(_QWORD *)(v15 + 16);
            if (!v16)
              goto LABEL_19;
            v17 = *(uint64_t (**)(const void *, void **))(v16 + 64);
            if (!v17)
            {
LABEL_20:
              v18 = 4294954514;
              goto LABEL_21;
            }
            v13 = v17(v14, &value);
            if ((_DWORD)v13)
              goto LABEL_27;
            CFArrayAppendValue(Mutable, value);
          }
          ++v8;
          --Count;
        }
        while (Count);
      }
      v18 = 0;
      *a2 = Mutable;
LABEL_18:
      Mutable = 0;
      goto LABEL_21;
    }
    v13 = FigSignalErrorAt();
LABEL_27:
    v18 = v13;
  }
  else
  {
    v18 = FigSignalErrorAt();
    Mutable = 0;
    v6 = 0;
  }
LABEL_21:
  free(v5);
  free(v6);
  if (Mutable)
    CFRelease(Mutable);
  return v18;
}

uint64_t FigCaptionRendererSessionCopyCaptionImages(uint64_t a1, __CFArray **a2)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  __CFArray *Mutable;
  const void **v8;
  const void *v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  uint64_t (*v12)(const void *, char **);
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(const void *, void **);
  uint64_t v18;
  void *value;
  char *__s1;

  value = 0;
  __s1 = 0;
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v5)
  {
    v18 = FigSignalErrorAt();
    Mutable = 0;
    v6 = 0;
    goto LABEL_21;
  }
  v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v6)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_18;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v5, v6);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v13 = FigSignalErrorAt();
LABEL_27:
    v18 = v13;
    goto LABEL_21;
  }
  if (Count < 1)
  {
LABEL_17:
    v18 = 0;
    *a2 = Mutable;
LABEL_18:
    Mutable = 0;
    goto LABEL_21;
  }
  v8 = v5;
  while (1)
  {
    v9 = *v8;
    FigCaptionRendererBaseProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      goto LABEL_19;
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v11)
      goto LABEL_19;
    v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
    if (!v12)
      break;
    v13 = v12(v9, &__s1);
    if ((_DWORD)v13)
      goto LABEL_27;
    v14 = *v8;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v15 = CMBaseObjectGetProtocolVTable();
    if (!v15 || (v16 = *(_QWORD *)(v15 + 16)) == 0)
    {
LABEL_19:
      v18 = 4294954508;
      goto LABEL_21;
    }
    v17 = *(uint64_t (**)(const void *, void **))(v16 + 176);
    if (!v17)
      break;
    v13 = v17(v14, &value);
    if ((_DWORD)v13)
      goto LABEL_27;
    if (!strcmp(__s1, "FigCaptionRendererCaption"))
      CFArrayAppendValue(Mutable, value);
    ++v8;
    if (!--Count)
      goto LABEL_17;
  }
  v18 = 4294954514;
LABEL_21:
  free(v5);
  free(v6);
  if (Mutable)
    CFRelease(Mutable);
  return v18;
}

uint64_t FigCaptionRendererSessionCopyOutputNodeImages(uint64_t a1, __CFArray **a2)
{
  CFIndex Count;
  const void **v5;
  const void **v6;
  __CFArray *Mutable;
  uint64_t v8;
  const void *v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  uint64_t (*v12)(const void *, char **);
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(const void *, void **);
  uint64_t v18;
  void *value;
  char *__s1;

  value = 0;
  __s1 = 0;
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  v5 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v5)
  {
    v18 = FigSignalErrorAt();
    Mutable = 0;
    v6 = 0;
    goto LABEL_21;
  }
  v6 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v6)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_18;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v5, v6);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v13 = FigSignalErrorAt();
LABEL_27:
    v18 = v13;
    goto LABEL_21;
  }
  if (Count < 1)
  {
LABEL_17:
    v18 = 0;
    *a2 = Mutable;
LABEL_18:
    Mutable = 0;
    goto LABEL_21;
  }
  v8 = 0;
  while (1)
  {
    v9 = v5[v8];
    FigCaptionRendererBaseProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      goto LABEL_19;
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v11)
      goto LABEL_19;
    v12 = *(uint64_t (**)(const void *, char **))(v11 + 8);
    if (!v12)
      break;
    v13 = v12(v9, &__s1);
    if ((_DWORD)v13)
      goto LABEL_27;
    v14 = v6[v8];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v15 = CMBaseObjectGetProtocolVTable();
    if (!v15 || (v16 = *(_QWORD *)(v15 + 16)) == 0)
    {
LABEL_19:
      v18 = 4294954508;
      goto LABEL_21;
    }
    v17 = *(uint64_t (**)(const void *, void **))(v16 + 112);
    if (!v17)
      break;
    v13 = v17(v14, &value);
    if ((_DWORD)v13)
      goto LABEL_27;
    if (!strcmp(__s1, "FigCaptionRendererCaption"))
      CFArrayAppendValue(Mutable, value);
    if (Count == ++v8)
      goto LABEL_17;
  }
  v18 = 4294954514;
LABEL_21:
  free(v5);
  free(v6);
  if (Mutable)
    CFRelease(Mutable);
  return v18;
}

uint64_t FigCaptionRendererSessionCopyOutputNodeImagesAndPositions(uint64_t a1, __CFArray **a2, __CFArray **a3)
{
  CFIndex Count;
  const void **v7;
  const void **v8;
  const __CFAllocator *v9;
  __CFArray *Mutable;
  __CFArray *v11;
  uint64_t v12;
  const void *v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(const void *, char **);
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(const void *, void **);
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(const void *, CGPoint *);
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v27;
  CGPoint v29;
  void *value;
  char *__s1;

  value = 0;
  __s1 = 0;
  v29 = (CGPoint)*MEMORY[0x1E0C9D538];
  Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 584));
  v7 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v7)
  {
    v27 = FigSignalErrorAt();
    Mutable = 0;
    v11 = 0;
    v8 = 0;
    goto LABEL_27;
  }
  v8 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
  if (!v8)
  {
    v27 = FigSignalErrorAt();
    goto LABEL_23;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 584), v7, v8);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v27 = FigSignalErrorAt();
    goto LABEL_24;
  }
  v11 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  if (!v11)
  {
    v17 = FigSignalErrorAt();
LABEL_36:
    v27 = v17;
    goto LABEL_27;
  }
  if (Count < 1)
  {
LABEL_22:
    v27 = 0;
    *a2 = Mutable;
    *a3 = v11;
LABEL_23:
    Mutable = 0;
LABEL_24:
    v11 = 0;
    goto LABEL_27;
  }
  v12 = 0;
  while (1)
  {
    v13 = v7[v12];
    FigCaptionRendererBaseProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      goto LABEL_25;
    v15 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v15)
      goto LABEL_25;
    v16 = *(uint64_t (**)(const void *, char **))(v15 + 8);
    if (!v16)
      break;
    v17 = v16(v13, &__s1);
    if ((_DWORD)v17)
      goto LABEL_36;
    v18 = v8[v12];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v19 = CMBaseObjectGetProtocolVTable();
    if (!v19)
      goto LABEL_25;
    v20 = *(_QWORD *)(v19 + 16);
    if (!v20)
      goto LABEL_25;
    v21 = *(uint64_t (**)(const void *, void **))(v20 + 112);
    if (!v21)
      break;
    v17 = v21(v18, &value);
    if ((_DWORD)v17)
      goto LABEL_36;
    v22 = v8[v12];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v23 = CMBaseObjectGetProtocolVTable();
    if (!v23 || (v24 = *(_QWORD *)(v23 + 16)) == 0)
    {
LABEL_25:
      v27 = 4294954508;
      goto LABEL_27;
    }
    v25 = *(uint64_t (**)(const void *, CGPoint *))(v24 + 64);
    if (!v25)
      break;
    v17 = v25(v22, &v29);
    if ((_DWORD)v17)
      goto LABEL_36;
    if (!strcmp(__s1, "FigCaptionRendererCaption"))
    {
      CFArrayAppendValue(Mutable, value);
      DictionaryRepresentation = CGPointCreateDictionaryRepresentation(v29);
      CFArrayAppendValue(v11, DictionaryRepresentation);
    }
    if (Count == ++v12)
      goto LABEL_22;
  }
  v27 = 4294954514;
LABEL_27:
  free(v7);
  free(v8);
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  return v27;
}

uint64_t FigCaptionRendererSessionUpdateMediaAccessibility(int64x2_t *a1, int a2, uint64_t a3)
{
  int64x2_t v4;
  uint64_t result;
  const void *v7;
  const void *v8;
  uint64_t CGColorSRGB;
  const void *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;

  v4 = vdupq_n_s64(1uLL);
  a1[18] = v4;
  a1[19] = v4;
  a1[20] = v4;
  a1[21] = v4;
  a1[26].i64[0] = 1;
  a1[29].i64[1] = 0;
  a1[30].i64[1] = 0x3FF0000000000000;
  result = 4294950096;
  switch(a2)
  {
    case 1:
      a1[30].i64[1] = 0x4010000000000000;
      a1[21].i64[1] = 1;
      goto LABEL_4;
    case 2:
      a1[30].i64[1] = 0x4000000000000000;
      a1[21].i64[1] = 0;
LABEL_4:
      v7 = (const void *)a1[36].i64[0];
      if (v7)
        CFRelease(v7);
      result = 0;
      a1[36].i64[0] = a3;
      return result;
    case 3:
      v8 = (const void *)a1[27].i64[0];
      if (v8)
      {
        CFRelease(v8);
        a1[27].i64[0] = 0;
      }
      CGColorSRGB = FigCreateCGColorSRGB();
      result = 0;
      a1[27].i64[0] = CGColorSRGB;
      a1[18].i64[0] = 1;
      return result;
    case 4:
      v10 = (const void *)a1[27].i64[0];
      if (v10)
      {
        CFRelease(v10);
        a1[27].i64[0] = 0;
      }
      v11 = FigCreateCGColorSRGB();
      result = 0;
      a1[27].i64[0] = v11;
      a1[18].i64[0] = 0;
      return result;
    case 5:
      v12 = (const void *)a1[28].i64[0];
      if (v12)
      {
        CFRelease(v12);
        a1[28].i64[0] = 0;
      }
      v13 = FigCreateCGColorSRGB();
      result = 0;
      a1[28].i64[0] = v13;
      a1[19].i64[0] = 1;
      goto LABEL_19;
    case 6:
      v14 = (const void *)a1[28].i64[0];
      if (v14)
      {
        CFRelease(v14);
        a1[28].i64[0] = 0;
      }
      v15 = FigCreateCGColorSRGB();
      result = 0;
      a1[28].i64[0] = v15;
      a1[19].i64[0] = 0;
LABEL_19:
      a1[29].i64[1] = 0x3FF0000000000000;
      break;
    case 19:
      result = 0;
      a1[20].i64[1] = 1;
      break;
    case 20:
      result = 0;
      a1[29].i64[1] = 0x3FD0000000000000;
      a1[20].i64[1] = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FigCaptionRendererSessionEnableSampleWithCTAttributes(uint64_t a1, char a2)
{
  *(_BYTE *)(a1 + 1392) = a2;
  return 0;
}

uint64_t FigCaptionRendererSessionSynchronizeDefaults(dispatch_queue_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    if (!a1[21])
      return 0;
    v2 = malloc_type_calloc(1uLL, 0x140uLL, 0x1060040D22D00F8uLL);
    if (v2)
    {
      v3 = v2;
      *v2 = CFRetain(a1);
      *((_WORD *)v3 + 152) = 256;
      *((_BYTE *)v3 + 306) = 0;
      v3[39] = 0;
      dispatch_async_f(a1[21], v3, (dispatch_function_t)updateMASettingsDoAsync);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

void updateMASettingsDoAsync(CFTypeRef *a1)
{
  _QWORD *v2;
  int v3;
  const void *v4;
  CFTypeRef v5;
  int64x2_t *v6;
  CFTypeRef v7;
  const __CFDictionary *v8;
  CGColorRef v9;
  CGColorRef v10;
  const void *v11;
  CGColorRef v12;
  CGColorRef v13;
  const void *v14;
  CGColorRef v15;
  CGColorRef v16;
  const void *v17;
  const __CFDictionary *v18;
  const void *v19;
  CFTypeID TypeID;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t ProtocolVTable;
  uint64_t v27;
  void (*v28)(uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *value;

  v2 = *a1;
  v3 = *((_DWORD *)*a1 + 67);
  if (!*((_BYTE *)a1 + 304))
  {
    if (v3 != 2)
      goto LABEL_63;
    goto LABEL_5;
  }
  if (v3 == 2)
  {
    fcrCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 131));
    v2 = *a1;
    *((_BYTE *)*a1 + 1344) = 1;
LABEL_5:
    if (*((_BYTE *)a1 + 306))
    {
      v4 = (const void *)v2[130];
      v5 = a1[39];
      v2[130] = v5;
      if (v5)
        CFRetain(v5);
      if (v4)
        CFRelease(v4);
    }
    v6 = (int64x2_t *)*a1;
    if (*((_BYTE *)a1 + 305) && v6[84].i8[0])
    {
      fcrCopyMediaAccessibilityParams((uint64_t)&v6[65].i64[1], (uint64_t)v6[18].i64);
      v6 = (int64x2_t *)*a1;
      *((_BYTE *)*a1 + 1345) = 1;
    }
    goto LABEL_15;
  }
  fcrCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)(v2 + 36));
  v6 = (int64x2_t *)*a1;
  if (!*((_DWORD *)*a1 + 67))
  {
    fcrCopyMediaAccessibilityParams((uint64_t)(a1 + 1), (uint64_t)&v6[65].i64[1]);
    v6 = (int64x2_t *)*a1;
    *((_BYTE *)*a1 + 1344) = 1;
  }
LABEL_15:
  applyContextDefaultsToMASettings(v6);
  v7 = *a1;
  v35 = 0x3FF0000000000000;
  v36 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  if (*((_DWORD *)v7 + 67) == 2)
  {
    v8 = (const __CFDictionary *)*((_QWORD *)v7 + 130);
    if (v8)
    {
      v9 = overridesCreateCGColorFromCFArray(v8, (void *)*MEMORY[0x1E0CA2A20], &v36);
      v10 = v9;
      if (v9)
      {
        v11 = (const void *)*((_QWORD *)v7 + 54);
        *((_QWORD *)v7 + 54) = v9;
        CFRetain(v9);
        if (v11)
          CFRelease(v11);
        *((_QWORD *)v7 + 36) = 0;
        *((_QWORD *)v7 + 57) = v36;
        *((_QWORD *)v7 + 39) = 0;
      }
      v12 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 130), (void *)*MEMORY[0x1E0CA29B8], &v35);
      v13 = v12;
      if (v12)
      {
        v14 = (const void *)*((_QWORD *)v7 + 55);
        *((_QWORD *)v7 + 55) = v12;
        CFRetain(v12);
        if (v14)
          CFRelease(v14);
        *((_QWORD *)v7 + 37) = 0;
        *((_QWORD *)v7 + 58) = v35;
        *((_QWORD *)v7 + 40) = 0;
      }
      v15 = overridesCreateCGColorFromCFArray(*((const __CFDictionary **)v7 + 130), (void *)*MEMORY[0x1E0CA2968], &v34);
      v16 = v15;
      if (v15)
      {
        v17 = (const void *)*((_QWORD *)v7 + 56);
        *((_QWORD *)v7 + 56) = v15;
        CFRetain(v15);
        if (v17)
          CFRelease(v17);
        *((_QWORD *)v7 + 38) = 0;
        *((_QWORD *)v7 + 59) = v34;
        *((_QWORD *)v7 + 41) = 0;
      }
      v18 = (const __CFDictionary *)*((_QWORD *)v7 + 130);
      if (!v18)
        goto LABEL_43;
      v19 = (const void *)*MEMORY[0x1E0CA29C0];
      if (!*MEMORY[0x1E0CA29C0])
        goto LABEL_43;
      value = 0;
      if (!CFDictionaryGetValueIfPresent(v18, v19, (const void **)&value))
        goto LABEL_43;
      TypeID = CFStringGetTypeID();
      if (TypeID != CFGetTypeID(value))
        goto LABEL_43;
      v21 = 1;
      if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B70], 1uLL))
      {
        if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B78], 1uLL))
        {
          if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B60], 1uLL))
          {
            if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B80], 1uLL))
            {
              if (CFStringCompare((CFStringRef)value, (CFStringRef)*MEMORY[0x1E0CA2B68], 1uLL))
              {
LABEL_43:
                if (v16)
                  CFRelease(v16);
                if (v13)
                  CFRelease(v13);
                if (v10)
                  CFRelease(v10);
                goto LABEL_49;
              }
              v21 = 5;
            }
            else
            {
              v21 = 4;
            }
          }
          else
          {
            v21 = 3;
          }
        }
        else
        {
          v21 = 2;
        }
      }
      *((_QWORD *)v7 + 70) = v21;
      *((_QWORD *)v7 + 52) = 0;
      goto LABEL_43;
    }
  }
LABEL_49:
  v22 = *a1;
  if (*((_BYTE *)*a1 + 1349))
  {
    v23 = v22[23];
    if (v23)
    {
      v24 = FigCDSTimerIsOn(v23);
      v22 = *a1;
      if (v24)
      {
        FigCDSTimerStop(v22[23]);
        v22 = *a1;
      }
    }
    v25 = v22[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v27 = *(_QWORD *)(ProtocolVTable + 16);
      if (v27)
      {
        v28 = *(void (**)(uint64_t))(v27 + 272);
        if (v28)
          v28(v25);
      }
    }
    v29 = *a1;
    v29[76] = 0;
    v30 = v29[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    v31 = CMBaseObjectGetProtocolVTable();
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 16);
      if (v32)
      {
        v33 = *(void (**)(uint64_t, _QWORD *))(v32 + 304);
        if (v33)
          v33(v30, v29 + 36);
      }
    }
    updateDisplayPort(*a1, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
    v22 = *a1;
  }
  *((_BYTE *)v22 + 1349) = 1;
LABEL_63:
  fcrReleaseAndClearMediaAccessibilityParams((uint64_t)(a1 + 1));
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

uint64_t FigCaptionRendererSessionSetDefaultTextStyle(dispatch_queue_t *a1, CFTypeRef cf)
{
  CFTypeID v4;
  _QWORD *v5;
  _QWORD *v6;

  if (a1)
  {
    if (!cf || (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      if (!a1[21])
        return 0;
      v5 = malloc_type_calloc(1uLL, 0x140uLL, 0x1060040D22D00F8uLL);
      if (v5)
      {
        v6 = v5;
        *v5 = CFRetain(a1);
        *((_WORD *)v6 + 152) = 0;
        *((_BYTE *)v6 + 306) = 1;
        v6[39] = cf;
        dispatch_async_f(a1[21], v6, (dispatch_function_t)updateMASettingsDoAsync);
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  const __CFAllocator *v8;
  uint64_t Instance;
  CFMutableDictionaryRef Mutable;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  double FigBaseObject;
  double v23;
  double v24;
  uint64_t ProtocolVTable;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, double, double);
  dispatch_queue_t v28;
  dispatch_queue_t v29;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;
  __int128 v34;
  CFTypeRef cf;
  char __str[8];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionRendererSessionLocalGetTypeID_sRegisterFigCaptionRendererSessionOnce, RegisterFigCaptionRendererSessionClass);
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 24) = a1;
  *(_QWORD *)(Instance + 32) = a2;
  *(_QWORD *)(Instance + 16) = a3;
  *(_QWORD *)(Instance + 1384) = 0;
  *(_OWORD *)(Instance + 48) = 0u;
  *(_OWORD *)(Instance + 64) = 0u;
  *(_DWORD *)(Instance + 1346) = 0;
  *(_DWORD *)(Instance + 268) = 3;
  *(_BYTE *)(Instance + 952) = 1;
  *(_BYTE *)(Instance + 968) = 0;
  *(_QWORD *)(Instance + 960) = 0xBFF0000000000000;
  *(_QWORD *)(Instance + 1040) = 0;
  *(_WORD *)(Instance + 1344) = 0;
  fcrReleaseAndClearMediaAccessibilityParams(Instance + 1048);
  *(_OWORD *)(Instance + 1360) = 0u;
  *(_DWORD *)(Instance + 1352) = 250;
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(Instance + 584) = Mutable;
  if (!Mutable)
  {
    v32 = FigSignalErrorAt();
    goto LABEL_16;
  }
  *(_QWORD *)(Instance + 616) = 0x100000001;
  v12 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 32);
  v11 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 48);
  v14 = *MEMORY[0x1E0CA4AD8];
  v13 = *(_OWORD *)(MEMORY[0x1E0CA4AD8] + 16);
  v15 = (__int128 *)MEMORY[0x1E0C9D648];
  *(_QWORD *)(Instance + 608) = 0;
  *(_OWORD *)(Instance + 720) = v13;
  *(_OWORD *)(Instance + 736) = v12;
  v16 = *v15;
  v17 = v15[1];
  *(_OWORD *)(Instance + 624) = *v15;
  *(_OWORD *)(Instance + 640) = v17;
  v18 = (__int128 *)MEMORY[0x1E0C9D820];
  *(_OWORD *)(Instance + 688) = v17;
  *(_OWORD *)(Instance + 704) = v14;
  v19 = *v18;
  *(_OWORD *)(Instance + 656) = *v18;
  *(_OWORD *)(Instance + 672) = v16;
  *(_OWORD *)(Instance + 752) = v11;
  *(_OWORD *)(Instance + 768) = v16;
  *(_OWORD *)(Instance + 784) = v17;
  *(_OWORD *)(Instance + 800) = v19;
  *(_OWORD *)(Instance + 816) = v16;
  *(_OWORD *)(Instance + 832) = v17;
  *(_BYTE *)(Instance + 1036) = 1;
  *(_QWORD *)(Instance + 1024) = 0;
  *(_WORD *)(Instance + 1032) = 0;
  *(_OWORD *)(Instance + 128) = v16;
  *(_OWORD *)(Instance + 144) = v17;
  *(_WORD *)(Instance + 272) = 0;
  *(_QWORD *)(Instance + 280) = 0x3FF0000000000000;
  *(_QWORD *)(Instance + 120) = 0xFFFFFFFFLL;
  *(_QWORD *)(Instance + 1376) = FigSimpleMutexCreate();
  v20 = FigCaptionRendererParentIntervalCreate((_QWORD *)(Instance + 240));
  if ((_DWORD)v20)
    goto LABEL_28;
  v21 = *(_QWORD *)(Instance + 240);
  FigBaseObject = FigBytePumpGetFigBaseObject(v20);
  v24 = v23;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable && (v26 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
  {
    v27 = *(uint64_t (**)(uint64_t, double, double))(v26 + 16);
    if (v27)
    {
      v20 = v27(v21, FigBaseObject, v24);
      if (!(_DWORD)v20)
      {
        *(_OWORD *)(Instance + 88) = xmmword_1932FA770;
        *(_OWORD *)(Instance + 104) = xmmword_1932FA780;
        *(_BYTE *)(Instance + 40) = 0;
        snprintf(__str, 0x100uLL, "com.apple.coremedia.figfcrsession.messagequeue<%p>", (const void *)Instance);
        v28 = dispatch_queue_create(__str, 0);
        *(_QWORD *)(Instance + 168) = v28;
        if (!v28
          || (snprintf(__str, 0x100uLL, "com.apple.coremedia.figfcrsession.workqueue<%p>", (const void *)Instance),
              v29 = dispatch_queue_create(__str, 0),
              (*(_QWORD *)(Instance + 176) = v29) == 0))
        {
          v32 = 0;
          goto LABEL_16;
        }
        v20 = FigCaptionRendererTimerCreate(33, (uint64_t)onAnimationTimerTimeout, Instance, (uint64_t *)(Instance + 184));
        if (!(_DWORD)v20)
        {
          cf = 0;
          v20 = FigCaptionRendererAVFLayoutRegionCreate((uint64_t)onDisplayUpdateEvent, Instance, &cf);
          if (!(_DWORD)v20)
          {
            if (cf)
            {
              v30 = CFRetain(cf);
              v31 = cf;
              *(_QWORD *)(Instance + 248) = v30;
              if (v31)
                CFRelease(v31);
            }
            else
            {
              *(_QWORD *)(Instance + 248) = 0;
            }
            if (!*(_QWORD *)(Instance + 584))
            {
LABEL_25:
              v20 = FigCaptionRendererMACacheCreate((uint64_t)onMAChanged, Instance, (_QWORD *)(Instance + 232));
              if (!(_DWORD)v20)
              {
                v32 = FigCaptionRendererMACacheLoad(*(_QWORD **)(Instance + 232), 0);
                if (!(_DWORD)v32)
                {
                  *(_DWORD *)(Instance + 192) = 0;
                  v34 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
                  *(_OWORD *)(Instance + 200) = *MEMORY[0x1E0C9D628];
                  *(_OWORD *)(Instance + 216) = v34;
                  *(_BYTE *)(Instance + 1392) = 0;
                  *a4 = Instance;
                  return v32;
                }
                goto LABEL_15;
              }
              goto LABEL_28;
            }
            *(_QWORD *)__str = 0;
            v20 = FigCaptionRendererCALayerOutputNodeCreate(__str);
            if (!(_DWORD)v20)
            {
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(Instance + 584), *(const void **)(Instance + 248), *(const void **)__str);
              if (*(_QWORD *)__str)
                CFRelease(*(CFTypeRef *)__str);
              goto LABEL_25;
            }
          }
        }
      }
LABEL_28:
      v32 = v20;
      goto LABEL_15;
    }
    v32 = 4294954514;
  }
  else
  {
    v32 = 4294954508;
  }
LABEL_15:
  FigSignalErrorAt();
LABEL_16:
  CFRelease((CFTypeRef)Instance);
  return v32;
}

void onAnimationTimerTimeout(uint64_t a1)
{
  int v2;
  double Rate;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  CMTime v7;
  CMTime lhs;
  CMTime rhs;
  CMTime v10;
  CMTime v11;

  v2 = *(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 192) = v2 - 33;
  Rate = FigCDSTriggerGetRate(*(_QWORD *)(a1 + 48));
  if (v2 > 33)
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(_QWORD *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&v7, 33, 1000);
      lhs = v11;
      CMTimeAdd(&v10, &lhs, &v7);
      v6 = *(_QWORD *)(a1 + 48);
      lhs = v10;
      FigCDSTriggerSetCurrentTime(v6, &lhs);
    }
    updateDisplayPort((_QWORD *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
  }
  else
  {
    if (Rate == 0.0)
    {
      memset(&v11, 0, sizeof(v11));
      FigCDSTriggerGetCurrentTime(*(_QWORD *)(a1 + 48), &v11);
      memset(&v10, 0, sizeof(v10));
      CMTimeMake(&rhs, *(int *)(a1 + 192) + 33, 1000);
      lhs = v11;
      CMTimeAdd(&v10, &lhs, &rhs);
      v4 = *(_QWORD *)(a1 + 48);
      lhs = v10;
      FigCDSTriggerSetCurrentTime(v4, &lhs);
      updateDisplayPort((_QWORD *)a1, *(double *)(a1 + 200), *(double *)(a1 + 208), *(double *)(a1 + 216), *(double *)(a1 + 224));
    }
    if (FigCDSTimerStop(*(_QWORD *)(a1 + 184)))
    {
      FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(a1 + 192) = 0;
      v5 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
      *(_OWORD *)(a1 + 200) = *MEMORY[0x1E0C9D628];
      *(_OWORD *)(a1 + 216) = v5;
    }
  }
}

uint64_t onDisplayUpdateEvent(uint64_t a1, uint64_t a2)
{
  double Rate;
  int v5;
  int v6;
  uint64_t result;

  Rate = FigCDSTriggerGetRate(*(_QWORD *)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 4) + *(_DWORD *)a1;
  v6 = v5 + 33;
  if (v5 < 165)
    v6 = 198;
  if (Rate != 0.0)
    v5 = v6;
  *(_DWORD *)(a2 + 192) = v5;
  *(CGRect *)(a2 + 200) = CGRectUnion(*(CGRect *)(a2 + 200), *(CGRect *)(a1 + 8));
  result = FigCDSTimerIsOn(*(_QWORD *)(a2 + 184));
  if (!(_DWORD)result)
  {
    result = FigCaptionRendererTimerStart(*(_QWORD *)(a2 + 184));
    if ((_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

void onMAChanged(dispatch_queue_t *a1, uint64_t a2)
{
  _WORD *v4;
  _WORD *v5;

  if (a1[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x140uLL, 0x1060040D22D00F8uLL);
    if (v4)
    {
      v5 = v4;
      fcrCopyMediaAccessibilityParams(a2, (uint64_t)(v4 + 4));
      *(_QWORD *)v5 = CFRetain(a1);
      v5[152] = 1;
      *((_BYTE *)v5 + 306) = 0;
      *((_QWORD *)v5 + 39) = 0;
      dispatch_async_f(a1[21], v5, (dispatch_function_t)updateMASettingsDoAsync);
    }
  }
}

uint64_t RegisterFigCaptionRendererSessionClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionRendererSessionID = result;
  return result;
}

void FigCaptionRendererSessionInit(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x570uLL);
}

void FigCaptionRendererSession_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const __CFDictionary *v7;
  const void *Value;
  uint64_t ProtocolVTable;
  uint64_t v10;
  void (*v11)(const void *, _QWORD);
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;

  v2 = *(const void **)(a1 + 184);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 176);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v4 = *(NSObject **)(a1 + 168);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 168) = 0;
  }
  if (*(_QWORD *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v5 = *(const void **)(a1 + 80);
    if (v5)
      CFRelease(v5);
  }
  if (*(_QWORD *)(a1 + 72))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v6 = *(const void **)(a1 + 72);
    if (v6)
      CFRelease(v6);
  }
  v7 = *(const __CFDictionary **)(a1 + 584);
  if (v7)
  {
    Value = CFDictionaryGetValue(v7, *(const void **)(a1 + 248));
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v10 = *(_QWORD *)(ProtocolVTable + 16);
      if (v10)
      {
        v11 = *(void (**)(const void *, _QWORD))(v10 + 16);
        if (v11)
          v11(Value, 0);
      }
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 584), *(const void **)(a1 + 248));
    v12 = *(const void **)(a1 + 584);
    if (v12)
      CFRelease(v12);
  }
  if (*(_QWORD *)(a1 + 1376))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 1376) = 0;
  }
  CFRelease(*(CFTypeRef *)(a1 + 248));
  CFRelease(*(CFTypeRef *)(a1 + 240));
  v13 = *(const void **)(a1 + 56);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(a1 + 64);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(a1 + 48);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 232);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a1 + 160);
  if (v17)
    CFRelease(v17);
  fcrReleaseAndClearMediaAccessibilityParams(a1 + 288);
  fcrReleaseAndClearMediaAccessibilityParams(a1 + 1048);
  v18 = *(const void **)(a1 + 1040);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 928);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 912);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 920);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 1016);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 984);
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(a1 + 976);
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(a1 + 992);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(a1 + 1024);
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(a1 + 1368);
  if (v27)
    CFRelease(v27);
  v28 = *(const void **)(a1 + 1384);
  if (v28)
    CFRelease(v28);
}

__CFString *FigCaptionRendererSessionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererSession %p>"), a1);
  return Mutable;
}

void timebaseChangedCallback(uint64_t a1, dispatch_queue_t *a2, uint64_t a3, const void *a4)
{
  _QWORD *v6;
  CFTypeRef v7;

  if (a2 && a2[21])
  {
    v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *v6 = CFRetain(a2);
    if (a4)
      v7 = CFRetain(a4);
    else
      v7 = 0;
    v6[1] = v7;
    dispatch_async_f(a2[21], v6, (dispatch_function_t)timebaseChangedCallbackDo);
  }
}

void playbackItemChangedCallback(uint64_t a1, dispatch_queue_t *a2, uint64_t a3, const void *a4)
{
  _QWORD *v6;
  CFTypeRef v7;

  if (a2 && a2[21])
  {
    v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *v6 = CFRetain(a2);
    if (a4)
      v7 = CFRetain(a4);
    else
      v7 = 0;
    v6[1] = v7;
    dispatch_async_f(a2[21], v6, (dispatch_function_t)playbackItemChangedCallbackDo);
  }
}

uint64_t FigCaptionRendererOutputNodeSetParentNode(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD);

  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v3 = *(_QWORD *)(result + 16);
    if (v3)
    {
      v4 = *(uint64_t (**)(uint64_t, _QWORD))(v3 + 16);
      if (v4)
        return v4(a1, 0);
    }
  }
  return result;
}

void timebaseChangedCallbackDo(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v6;
  CFTypeRef v7;
  BOOL v8;
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v2 = (_QWORD *)*a1;
  v3 = (const void *)a1[1];
  if (!v3)
    goto LABEL_13;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1[1]);
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v5)
  {
    v6 = v5(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &cf);
    v7 = cf;
    if (v6)
      v8 = 1;
    else
      v8 = cf == 0;
    if (v8)
      goto LABEL_10;
    v9 = v2[6];
    if (v9)
      FigCaptionRendererTriggerSetTimebase(v9, cf);
    else
      FigSignalErrorAt();
  }
  v7 = cf;
LABEL_10:
  if (v7)
    CFRelease(v7);
  CFRelease(v3);
LABEL_13:
  if (v2)
    CFRelease(v2);
  free(a1);
}

void playbackItemChangedCallbackDo(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  unsigned int (*v4)(const void *, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  CFTypeRef v6;
  const void *v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef cf;

  cf = 0;
  v2 = *a1;
  v3 = (const void *)a1[1];
  if (v3)
  {
    v4 = *(unsigned int (**)(const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 32);
    if (!v4 || v4(v3, 0, &cf))
      goto LABEL_18;
    v5 = cf;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(CFTypeRef *)(v2 + 80);
  if (v6 != v5)
  {
    if (v6)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v7 = *(const void **)(v2 + 80);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v2 + 80) = v5;
    if (v5)
      CFRetain(v5);
    if (v7)
      CFRelease(v7);
    if (*(_QWORD *)(v2 + 80))
    {
      v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      *v8 = CFRetain((CFTypeRef)v2);
      v9 = *(CFTypeRef *)(v2 + 80);
      if (v9)
        v9 = CFRetain(v9);
      v8[1] = v9;
      dispatch_async_f(*(dispatch_queue_t *)(v2 + 168), v8, (dispatch_function_t)timebaseChangedCallbackDo);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease((CFTypeRef)v2);
  free(a1);
}

void onTriggerEvent(const void *a1, __int128 *a2, dispatch_queue_t *a3)
{
  _QWORD *v6;
  CFTypeRef v7;
  __int128 v8;

  if (a3 && a3[21])
  {
    v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x1020040E349F4B1uLL);
    *v6 = CFRetain(a3);
    if (a1)
      v7 = CFRetain(a1);
    else
      v7 = 0;
    v6[1] = v7;
    v8 = *a2;
    v6[4] = *((_QWORD *)a2 + 2);
    *((_OWORD *)v6 + 1) = v8;
    dispatch_async_f(a3[21], v6, (dispatch_function_t)onTriggerEventDo);
  }
}

void onTriggerTimeUpdate(CMTime *a1, uint64_t a2)
{
  Float64 Seconds;
  int v4;
  CFStringRef v5;
  CMTime time;

  if (*(_QWORD *)(a2 + 32))
  {
    time = *a1;
    Seconds = CMTimeGetSeconds(&time);
    v4 = (int)Seconds % 3600;
    v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d:%02d:%02d"), ((int)Seconds / 3600), (int)(((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15)), (__int16)(v4- 60* (((__int16)((34953 * (__int16)v4) >> 16) >> 5)+ (((v4 + ((-30583 * (__int16)v4) >> 16)) & 0x8000) >> 15))));
    (*(void (**)(CFStringRef, _QWORD))(a2 + 32))(v5, *(_QWORD *)(a2 + 16));
    if (v5)
      CFRelease(v5);
  }
}

void onTriggerEventDo(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, double *);
  uint64_t v7;
  double FigBaseObject;
  double v9;
  const void *value;
  const void *v11;
  CMTime v12;
  CFArrayRef theArray;
  CMTime time2;
  CMTime time1;
  double v16;
  double v17;

  v2 = *(_QWORD **)a1;
  *(_OWORD *)&v12.value = *(_OWORD *)(a1 + 16);
  v12.epoch = *(_QWORD *)(a1 + 32);
  *(_OWORD *)&time1.value = *(_OWORD *)&v12.value;
  time1.epoch = *(_QWORD *)(a1 + 32);
  purgeOutOfRangeCaptionCache((uint64_t)v2, &time1);
  v16 = 0.0;
  v17 = 0.0;
  v3 = v2[30];
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v5 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v6 = *(unsigned int (**)(uint64_t, double *))(v5 + 8)) == 0
    || v6(v3, &v16))
  {
    FigSignalErrorAt();
    goto LABEL_13;
  }
  time1 = v12;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.value = 0;
    copyCaptionsByRange(v2[30], 0, (CFTypeRef *)&time1, 0, v16, v17, v16, v17);
    purgeCaptionBitmapCaches((uint64_t)v2, (CFArrayRef)time1.value);
    value = (const void *)time1.value;
    if (!time1.value)
      goto LABEL_13;
    goto LABEL_20;
  }
  time1 = v12;
  CMTimeGetSeconds(&time1);
  FigBaseObject = FigBytePumpGetFigBaseObject(v7);
  time1.value = 0;
  theArray = 0;
  time2.value = 0;
  copyCaptionsByRange(v2[30], (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v16, v17, FigBaseObject, v9);
  purgeCaptionBitmapCaches((uint64_t)v2, (CFArrayRef)time2.value);
  purgeCaptionBitmapCaches((uint64_t)v2, theArray);
  if (time2.value)
    CFRelease((CFTypeRef)time2.value);
  if (time1.value)
    CFRelease((CFTypeRef)time1.value);
  value = theArray;
  if (theArray)
LABEL_20:
    CFRelease(value);
LABEL_13:
  updateDisplayPort(v2, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v11 = *(const void **)(a1 + 8);
  if (v11)
    CFRelease(v11);
  free((void *)a1);
}

void purgeOutOfRangeCaptionCache(uint64_t a1, CMTime *a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, double *);
  uint64_t v8;
  double FigBaseObject;
  double v10;
  const void *value;
  CFArrayRef theArray;
  CMTime time2;
  CMTime time1;
  double v15;
  double v16;

  v15 = 0.0;
  v16 = 0.0;
  v4 = *(_QWORD *)(a1 + 240);
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v6 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v7 = *(unsigned int (**)(uint64_t, double *))(v6 + 8)) == 0
    || v7(v4, &v15))
  {
    FigSignalErrorAt();
    return;
  }
  time1 = *a2;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!CMTimeCompare(&time1, &time2))
  {
    time1.value = 0;
    copyCaptionsByRange(*(_QWORD *)(a1 + 240), 0, (CFTypeRef *)&time1, 0, v15, v16, v15, v16);
    purgeCaptionCachesFromCaptionsTimeline(a1, (CFArrayRef)time1.value);
    value = (const void *)time1.value;
    if (!time1.value)
      return;
LABEL_16:
    CFRelease(value);
    return;
  }
  time1 = *a2;
  CMTimeGetSeconds(&time1);
  FigBaseObject = FigBytePumpGetFigBaseObject(v8);
  time1.value = 0;
  theArray = 0;
  time2.value = 0;
  copyCaptionsByRange(*(_QWORD *)(a1 + 240), (CFArrayRef *)&time2, (CFTypeRef *)&time1, &theArray, v15, v16, FigBaseObject, v10);
  purgeCaptionCachesFromCaptionsTimeline(a1, (CFArrayRef)time2.value);
  purgeCaptionCachesFromCaptionsTimeline(a1, theArray);
  if (time2.value)
    CFRelease((CFTypeRef)time2.value);
  if (time1.value)
    CFRelease((CFTypeRef)time1.value);
  value = theArray;
  if (theArray)
    goto LABEL_16;
}

uint64_t FigCaptionRendererIntervalGetRange(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCaptionRendererIntervalProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

void copyCaptionsByRange(uint64_t a1, CFArrayRef *a2, CFTypeRef *a3, CFArrayRef *a4, double a5, double a6, double a7, double a8)
{
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, CFTypeRef *, double, double);
  double FigBaseObject;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, CFArrayRef *, double, double);
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, CFArrayRef *, double, double);
  const __CFAllocator *v29;
  const __CFArray *MutableCopy;
  const __CFArray *v31;
  CFArrayRef Copy;
  CFArrayRef theArray;
  CFTypeRef cf;

  theArray = 0;
  cf = 0;
  Copy = 0;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v15 = *(_QWORD *)(ProtocolVTable + 16);
    if (v15)
    {
      v16 = *(uint64_t (**)(uint64_t, CFTypeRef *, double, double))(v15 + 32);
      if (v16)
        ProtocolVTable = v16(a1, &cf, a7, a8);
    }
  }
  FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
  v19 = v18;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = *(uint64_t (**)(uint64_t, CFArrayRef *, double, double))(v21 + 32);
      if (v22)
        v20 = v22(a1, &theArray, FigBaseObject, v19);
    }
  }
  v23 = FigBytePumpGetFigBaseObject(v20);
  v25 = v24;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  v26 = CMBaseObjectGetProtocolVTable();
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v28 = *(void (**)(uint64_t, CFArrayRef *, double, double))(v27 + 32);
      if (v28)
        v28(a1, &Copy, v23, v25);
    }
  }
  v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
  if (theArray)
    CFRelease(theArray);
  subtractCFArrayFromCFArray((CFIndex)MutableCopy, (CFArrayRef)cf);
  theArray = CFArrayCreateCopy(v29, MutableCopy);
  if (MutableCopy)
    CFRelease(MutableCopy);
  v31 = CFArrayCreateMutableCopy(v29, 0, Copy);
  if (Copy)
    CFRelease(Copy);
  subtractCFArrayFromCFArray((CFIndex)v31, (CFArrayRef)cf);
  Copy = CFArrayCreateCopy(v29, v31);
  if (v31)
    CFRelease(v31);
  if (a2)
  {
    *a2 = theArray;
  }
  else if (theArray)
  {
    CFRelease(theArray);
  }
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = Copy;
  }
  else if (Copy)
  {
    CFRelease(Copy);
  }
}

CFIndex purgeCaptionCachesFromCaptionsTimeline(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v4;
  CFIndex result;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(uint64_t, const void *);
  const __CFDictionary *v11;
  const void *Value;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *, _QWORD);

  v4 = *(_QWORD *)(a1 + 240);
  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      FigCaptionRendererParentIntervalProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v9 = *(_QWORD *)(ProtocolVTable + 16);
        if (v9)
        {
          v10 = *(void (**)(uint64_t, const void *))(v9 + 16);
          if (v10)
            v10(v4, ValueAtIndex);
        }
      }
      v11 = *(const __CFDictionary **)(a1 + 584);
      if (v11)
      {
        Value = CFDictionaryGetValue(v11, ValueAtIndex);
        if (Value)
        {
          v13 = Value;
          FigCaptionRendererOutputNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(const void *, _QWORD))(v15 + 16);
              if (v16)
                v16(v13, 0);
            }
          }
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 584), ValueAtIndex);
        }
      }
      result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

CFIndex subtractCFArrayFromCFArray(CFIndex result, CFArrayRef theArray)
{
  const __CFArray *v3;
  CFIndex i;
  const void *ValueAtIndex;
  CFIndex FirstIndexOfValue;
  CFRange v7;

  if (result)
  {
    if (theArray)
    {
      v3 = (const __CFArray *)result;
      result = CFArrayGetCount(theArray);
      if (result >= 1)
      {
        for (i = 0; i < result; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
          v7.length = CFArrayGetCount(v3);
          v7.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v3, v7, ValueAtIndex);
          if (FirstIndexOfValue != -1)
            CFArrayRemoveValueAtIndex(v3, FirstIndexOfValue);
          result = CFArrayGetCount(theArray);
        }
      }
    }
  }
  return result;
}

CFIndex purgeCaptionBitmapCaches(uint64_t a1, CFArrayRef theArray)
{
  CFIndex result;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, uint64_t *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(const void *, CGImageRef *);
  int BytesPerRow;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *);
  CGImageRef image;
  uint64_t v18;

  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      v18 = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v8 = *(_QWORD *)(ProtocolVTable + 16);
        if (v8)
        {
          v9 = *(void (**)(const void *, uint64_t *))(v8 + 32);
          if (v9)
            v9(ValueAtIndex, &v18);
        }
      }
      image = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v10 = CMBaseObjectGetProtocolVTable();
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 16);
        if (v11)
        {
          v12 = *(void (**)(const void *, CGImageRef *))(v11 + 176);
          if (v12)
            v12(ValueAtIndex, &image);
        }
      }
      if (image)
      {
        BytesPerRow = CGImageGetBytesPerRow(image);
        *(_DWORD *)(a1 + 124) += CGImageGetHeight(image) * BytesPerRow;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v14 = CMBaseObjectGetProtocolVTable();
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 16);
          if (v15)
          {
            v16 = *(void (**)(const void *))(v15 + 160);
            if (v16)
              v16(ValueAtIndex);
          }
        }
      }
      result = CFArrayGetCount(theArray);
    }
  }
  return result;
}

void onUserEvent(__int128 *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  if (a2)
  {
    if (*(_QWORD *)(a2 + 168))
    {
      v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x10C00407EF3FF2FuLL);
      v4[3] = a2;
      v5 = *a1;
      v4[2] = *((_QWORD *)a1 + 2);
      *(_OWORD *)v4 = v5;
      dispatch_sync_f(*(dispatch_queue_t *)(a2 + 168), v4, (dispatch_function_t)onUserEventDo);
    }
  }
}

void onViewportChanged(dispatch_queue_t *a1, int a2, double a3, double a4, double a5, double a6)
{
  double *v12;

  if (a1 && a1[21])
  {
    v12 = (double *)malloc_type_calloc(1uLL, 0x28uLL, 0x10C00405BF71875uLL);
    *((_QWORD *)v12 + 4) = CFRetain(a1);
    *v12 = a3;
    v12[1] = a4;
    v12[2] = a5;
    v12[3] = a6;
    if (a2)
      onViewportChangedDo(v12);
    else
      dispatch_async_f(a1[21], v12, (dispatch_function_t)onViewportChangedDo);
  }
}

void drawInContext(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;

  if (*(_BYTE *)(a2 + 1349))
  {
    if (*(_QWORD *)(a2 + 168))
    {
      v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      if (v4)
      {
        v5 = v4;
        *v4 = CFRetain((CFTypeRef)a2);
        v5[1] = a1;
        v6 = *(NSObject **)(a2 + 168);
        if (a1)
          dispatch_sync_f(v6, v5, (dispatch_function_t)composeSceneDo);
        else
          dispatch_async_f(v6, v5, (dispatch_function_t)composeSceneDo);
      }
    }
  }
}

void onUserEventDo(int *a1)
{
  _QWORD *v2;
  int v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, char *, double, double);
  uint64_t ProtocolVTable;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, _QWORD *);
  char v20;

  v2 = (_QWORD *)*((_QWORD *)a1 + 3);
  v3 = *a1;
  v4 = *((double *)a1 + 1);
  v5 = *((double *)a1 + 2);
  v20 = 0;
  if (v3 == 3)
  {
    v6 = v2[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      goto LABEL_20;
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v11)
      goto LABEL_20;
    v9 = *(unsigned int (**)(uint64_t, char *, double, double))(v11 + 360);
    if (!v9)
      goto LABEL_20;
  }
  else
  {
    if (v3 != 1)
      goto LABEL_11;
    v6 = v2[31];
    FigCaptionRendererNodeProtocolGetProtocolID();
    v7 = CMBaseObjectGetProtocolVTable();
    if (!v7)
      goto LABEL_20;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      goto LABEL_20;
    v9 = *(unsigned int (**)(uint64_t, char *, double, double))(v8 + 352);
    if (!v9)
      goto LABEL_20;
  }
  if (v9(v6, &v20, v4, v5))
  {
LABEL_20:
    FigSignalErrorAt();
    goto LABEL_21;
  }
LABEL_11:
  v12 = v2[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13)
    goto LABEL_20;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    goto LABEL_20;
  v15 = *(unsigned int (**)(uint64_t))(v14 + 272);
  if (!v15)
    goto LABEL_20;
  if (v15(v12))
    goto LABEL_20;
  v2[76] = 0;
  v16 = v2[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (!v17)
    goto LABEL_20;
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
    goto LABEL_20;
  v19 = *(unsigned int (**)(uint64_t, _QWORD *))(v18 + 304);
  if (!v19 || v19(v16, v2 + 36))
    goto LABEL_20;
  updateDisplayPort(v2, *MEMORY[0x1E0C9D628], *(double *)(MEMORY[0x1E0C9D628] + 8), *(double *)(MEMORY[0x1E0C9D628] + 16), *(double *)(MEMORY[0x1E0C9D628] + 24));
LABEL_21:
  free(a1);
}

void onViewportChangedDo(double *a1)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, double, double, double, double);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t);
  const void *v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, double, double, double, double);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t);

  v2 = *((_QWORD *)a1 + 4);
  v3 = a1[2];
  if (v3 <= 0.0 || (v4 = a1[3], v4 <= 0.0))
  {
    if (!v2)
      goto LABEL_33;
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    if (*(_QWORD *)(v2 + 584))
    {
      *(_DWORD *)(v2 + 616) = FigCDSCALayerOutputGetOrientation();
      *(_DWORD *)(v2 + 620) = FigCaptionRendererCALayerOutputGetDisplayScale();
    }
    v7 = *(_QWORD *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      goto LABEL_31;
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v9)
      goto LABEL_31;
    v10 = *(unsigned int (**)(uint64_t, double, double, double, double))(v9 + 96);
    if (!v10)
      goto LABEL_31;
    if (v10(v7, v5, v6, v3, v4))
      goto LABEL_31;
    v11 = *(_QWORD *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v12 = CMBaseObjectGetProtocolVTable();
    if (!v12)
      goto LABEL_31;
    v13 = *(_QWORD *)(v12 + 16);
    if (!v13)
      goto LABEL_31;
    v14 = *(unsigned int (**)(uint64_t))(v13 + 272);
    if (!v14 || v14(v11))
      goto LABEL_31;
    v15 = *(const void **)(v2 + 984);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v2 + 984) = 0;
    }
    v16 = *(const void **)(v2 + 976);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(v2 + 976) = 0;
    }
    v17 = *(const void **)(v2 + 992);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(v2 + 992) = 0;
    }
    if (FigGeometryMappingCreateCEA608Mappings())
      goto LABEL_31;
    FCRGetCEA608CellSize(*(_QWORD *)(v2 + 984));
    *(_QWORD *)(v2 + 1000) = v18;
    *(_QWORD *)(v2 + 1008) = v19;
    v20 = *(_QWORD *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v21 = CMBaseObjectGetProtocolVTable();
    if (!v21
      || (v22 = *(_QWORD *)(v21 + 16)) == 0
      || (v23 = *(unsigned int (**)(uint64_t, double, double, double, double))(v22 + 96)) == 0
      || v23(v20, v5, v6, v3, v4)
      || (v24 = *(_QWORD *)(v2 + 248),
          FigCaptionRendererNodeProtocolGetProtocolID(),
          (v25 = CMBaseObjectGetProtocolVTable()) == 0)
      || (v26 = *(_QWORD *)(v25 + 16)) == 0
      || (v27 = *(unsigned int (**)(uint64_t))(v26 + 272)) == 0
      || v27(v24))
    {
LABEL_31:
      FigSignalErrorAt();
    }
  }
  CFRelease((CFTypeRef)v2);
LABEL_33:
  free(a1);
}

void composeSceneDo(CGContext **a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t);
  const __CFDictionary *v21;
  const void *Value;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(const void *);
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  CMTime v35;
  CMTime v36;

  v2 = (uint64_t)*a1;
  if (*((_DWORD *)*a1 + 67) == 1 || *(_QWORD *)(v2 + 48))
  {
    v3 = *(_QWORD *)(v2 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable
      && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
      && (v6 = *(unsigned int (**)(uint64_t, uint64_t))(v5 + 376)) != 0
      && (v7 = v2 + 288, !v6(v3, v2 + 288)))
    {
      if (*(_DWORD *)(v2 + 268) == 1)
      {
        v8 = 0;
      }
      else
      {
        memset(&v36, 0, sizeof(v36));
        FigCDSTriggerGetCurrentTime(*(_QWORD *)(v2 + 48), &v36);
        v35 = v36;
        v8 = (const __CFArray *)copyCurrentActiveCaptions(v2, &v35);
        Count = CFArrayGetCount(v8);
        if (*(_QWORD *)(v2 + 1360))
        {
          v10 = Count;
          if (*(_QWORD *)(v2 + 1368))
          {
            v11 = FigCFWeakReferenceHolderCopyReferencedObject();
            if (v11)
            {
              v12 = (const void *)v11;
              (*(void (**)(BOOL, uint64_t))(v2 + 1360))(v10 == 0, v11);
              CFRelease(v12);
            }
          }
        }
        v35 = v36;
        updateNodeTree(v2, v8, (uint64_t)&v35);
        if (*(_DWORD *)(v2 + 268) == 3 && *(double *)(v2 + 640) > 0.0 && *(double *)(v2 + 648) > 0.0)
          ensureCaptionsAreRendered(v2, *(_QWORD *)(v2 + 248));
      }
      v13 = *(_QWORD *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v14 = CMBaseObjectGetProtocolVTable();
      if (!v14)
        goto LABEL_40;
      v15 = *(_QWORD *)(v14 + 16);
      if (!v15)
        goto LABEL_40;
      v16 = *(unsigned int (**)(uint64_t, uint64_t))(v15 + 232);
      if (!v16)
        goto LABEL_40;
      if (v16(v13, 1))
        goto LABEL_40;
      *(_QWORD *)(v2 + 608) = a1[1];
      v17 = *(_QWORD *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v18 = CMBaseObjectGetProtocolVTable();
      if (!v18)
        goto LABEL_40;
      v19 = *(_QWORD *)(v18 + 16);
      if (!v19)
        goto LABEL_40;
      v20 = *(unsigned int (**)(uint64_t, uint64_t))(v19 + 304);
      if (!v20 || v20(v17, v2 + 288))
        goto LABEL_40;
      v21 = *(const __CFDictionary **)(v2 + 584);
      if (v21 && *(_BYTE *)(v2 + 1035))
      {
        Value = CFDictionaryGetValue(v21, *(const void **)(v2 + 248));
        FigCaptionRendererOutputNodeProtocolGetProtocolID();
        v23 = CMBaseObjectGetProtocolVTable();
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 16);
          if (v24)
          {
            v25 = *(void (**)(const void *))(v24 + 200);
            if (v25)
              v25(Value);
          }
        }
        v26 = CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 584), *(const void **)(v2 + 248));
        if (v26)
          copyOutputNodeContentIntoCGContext((uint64_t)v26, a1[1]);
      }
      v27 = *(_QWORD *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v28 = CMBaseObjectGetProtocolVTable();
      if (!v28
        || (v29 = *(_QWORD *)(v28 + 16)) == 0
        || (v30 = *(unsigned int (**)(uint64_t, uint64_t))(v29 + 104)) == 0
        || v30(v27, v2 + 128))
      {
LABEL_40:
        FigSignalErrorAt();
      }
      v31 = *(_QWORD *)(v2 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v32 = CMBaseObjectGetProtocolVTable();
      if (v32)
      {
        v33 = *(_QWORD *)(v32 + 16);
        if (v33)
        {
          v34 = *(void (**)(uint64_t, uint64_t))(v33 + 384);
          if (v34)
            v34(v31, v7);
        }
      }
      if (v8)
        CFRelease(v8);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  CFRelease(*a1);
  free(a1);
}

CFTypeRef copyCurrentActiveCaptions(uint64_t a1, CMTime *a2)
{
  double Seconds;
  uint64_t v4;
  uint64_t v5;
  double FigBaseObject;
  double v7;
  double v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  void (*v11)(uint64_t, CFTypeRef *, double, double);
  const __CFAllocator *v12;
  uint64_t MutableCopy;
  const __CFArray *v14;
  CFIndex v15;
  int v16;
  const void *ValueAtIndex;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(const void *, CMTime *);
  CFTypeRef cf;
  CMTime time;

  time = *a2;
  Seconds = CMTimeGetSeconds(&time);
  cf = 0;
  v4 = *(_QWORD *)(a1 + 240);
  FigBaseObject = FigBytePumpGetFigBaseObject(v5);
  v8 = v7;
  FigCaptionRendererParentIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v10 = *(_QWORD *)(ProtocolVTable + 16);
    if (v10)
    {
      v11 = *(void (**)(uint64_t, CFTypeRef *, double, double))(v10 + 32);
      if (v11)
        v11(v4, &cf, FigBaseObject, v8);
    }
  }
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    v14 = (const __CFArray *)MutableCopy;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (CFArrayGetCount(v14) >= 1)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v14, v15);
        time.value = 0;
        *(_QWORD *)&time.timescale = 0;
        time.value = FigBytePumpGetFigBaseObject(ValueAtIndex);
        *(_QWORD *)&time.timescale = v18;
        FigCaptionRendererIntervalProtocolGetProtocolID();
        v19 = CMBaseObjectGetProtocolVTable();
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 16);
          if (v20)
          {
            v21 = *(void (**)(const void *, CMTime *))(v20 + 8);
            if (v21)
              v21(ValueAtIndex, &time);
          }
        }
        if (*(double *)&time.value + *(double *)&time.timescale == Seconds)
        {
          CFArrayRemoveValueAtIndex(v14, v15);
          --v16;
        }
        v15 = ++v16;
      }
      while (CFArrayGetCount(v14) > v16);
    }
    cf = CFArrayCreateCopy(v12, v14);
    CFRelease(v14);
  }
  return cf;
}

void updateNodeTree(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  const __CFArray *v4;
  const void *v6;
  const __CFAllocator *v7;
  CFMutableArrayRef MutableCopy;
  uint64_t ProtocolVTable;
  uint64_t v10;
  unsigned int (*v11)(const void *, CFArrayRef *);
  CFIndex v12;
  int v13;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, const char **);
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(const void *, CFAttributedStringRef *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(const void *, char **);
  CFIndex FirstIndexOfValue;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(const void *, char **);
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(const void *, CFArrayRef *);
  const __CFString *v33;
  CFIndex v34;
  int v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(const void *, CFAttributedStringRef *);
  const __CFString *Attribute;
  __CFArray *Mutable;
  _BOOL4 v42;
  uint64_t v43;
  CFIndex v44;
  CFNumberRef v45;
  CFIndex v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(const void *, int *);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(const void *, char **);
  char *v54;
  uint64_t v55;
  CFIndex v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(const void *, CFIndex *);
  double v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(const void *, CFDictionaryRef *);
  char *Value;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(const void *, CFAttributedStringRef *);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, const void *);
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(const void *, double, double);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, const void *);
  const __CFDictionary *v82;
  const void *v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(const void *, _QWORD);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(const void *, char **);
  uint64_t v91;
  const __CFDictionary *v92;
  const void *v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(const void *, _QWORD);
  const __CFString *v98;
  __CFArray *v99;
  __CFArray *v100;
  CFIndex v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(const void *, CFIndex *);
  CFIndex v105;
  const void *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(const void *, CFArrayRef *);
  uint64_t v110;
  uint64_t v111;
  void (*v112)(const void *, CFAttributedStringRef *);
  const void *v113;
  const __CFDictionary *v114;
  const void *v115;
  const __CFArray *v116;
  CFIndex v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(uint64_t, const void *);
  double v122;
  double v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(const void *, double, double);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, const void *);
  CFIndex v131;
  const void *v132;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int (*v136)(const void *, CFRange *);
  const __CFString *v137;
  const __CFString *v138;
  CFIndex v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int (*v143)(const void *, CFAttributedStringRef *);
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int (*v147)(const void *, const char **);
  uint64_t v148;
  uint64_t v149;
  unsigned int (*v150)(const void *, const void *);
  CFIndex v151;
  const __CFDictionary *v152;
  const void *v153;
  const void *v154;
  const void *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int (*v158)(const void *, const void *);
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(const void *, CFIndex *);
  double v163;
  double v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int (*v168)(const void *, double, double, double, double);
  uint64_t v169;
  uint64_t v170;
  unsigned int (*v171)(const void *, const void *);
  CFIndex v172;
  const __CFDictionary *v173;
  const void *v174;
  const void *v175;
  const void *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int (*v179)(const void *, const void *);
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int (*v183)(uint64_t, CFAttributedStringRef *);
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  void (*v187)(const void *, CFIndex *);
  uint64_t v188;
  uint64_t v189;
  void (*v190)(const void *, const char **);
  uint64_t v191;
  uint64_t v192;
  void (*v193)(const void *, CFIndex *);
  CFIndex v194;
  double v195;
  double v196;
  double v197;
  double v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int (*v202)(const void *, double, double, double, double);
  CFIndex v203;
  const __CFAttributedString *v204;
  uint64_t v205;
  const void *v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int (*v209)(const void *, CFIndex *);
  uint64_t v210;
  uint64_t v211;
  unsigned int (*v212)(const void *, CFRange *);
  uint64_t v213;
  uint64_t v214;
  const __CFArray *v215;
  CFIndex v216;
  const void *v217;
  _QWORD *v218;
  _QWORD *v219;
  int v220;
  const void *v221;
  const __CFArray *v222;
  const __CFArray *v223;
  const __CFString *attrName;
  CFIndex idx[2];
  double v226[3];
  CFDictionaryRef theDict;
  CFAttributedStringRef BOOLean;
  double v229;
  char *__s1;
  int v231;
  CFRange effectiveRange;
  CFAttributedStringRef aStr;
  CFArrayRef theArraya;
  char *v235;
  const char *v236;
  CFArrayRef v237[2];
  CFRange v238;
  CFRange v239;

  if (theArray)
  {
    v4 = theArray;
    v6 = *(const void **)(a1 + 248);
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theArray);
    v237[0] = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable
      || (v10 = *(_QWORD *)(ProtocolVTable + 16)) == 0
      || (v11 = *(unsigned int (**)(const void *, CFArrayRef *))(v10 + 24)) == 0
      || (v221 = v6, v11(v6, v237)))
    {
LABEL_276:
      FigSignalErrorAt();
LABEL_277:
      if (MutableCopy)
        CFRelease(MutableCopy);
      return;
    }
    if ((*(_DWORD *)(a1 + 268) & 0xFFFFFFFE) == 2 && CFArrayGetCount(v237[0]) >= 1)
    {
      v12 = 0;
      v13 = 0;
      v222 = v4;
      attrName = (const __CFString *)*MEMORY[0x1E0CA2B10];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v237[0], v12);
        v236 = 0;
        FigCaptionRendererBaseProtocolGetProtocolID();
        v15 = CMBaseObjectGetProtocolVTable();
        if (!v15)
          goto LABEL_276;
        v16 = *(_QWORD *)(v15 + 16);
        if (!v16)
          goto LABEL_276;
        v17 = *(unsigned int (**)(const void *, const char **))(v16 + 8);
        if (!v17 || v17(ValueAtIndex, &v236))
          goto LABEL_276;
        v18 = v236;
        if (v236)
        {
          if (!strcmp(v236, "FigCaptionRendererStackLayoutRegion")
            || !strcmp(v18, "FigCaptionRendererTTMLRegion")
            || !strcmp(v18, "FigCaptionRendererCellStackLayoutRegion")
            || !strcmp(v18, "FigCaptionRendereriTTRegion")
            || !strcmp(v18, "FigCaptionRendererSRTRegion")
            || !strcmp(v18, "FigCaptionRendererFreeLayoutRegion"))
          {
            v235 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v27 = CMBaseObjectGetProtocolVTable();
            if (v27)
            {
              v28 = *(_QWORD *)(v27 + 16);
              if (v28)
              {
                v29 = *(void (**)(const void *, char **))(v28 + 16);
                if (v29)
                  v29(ValueAtIndex, &v235);
              }
            }
            theArraya = 0;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v30 = CMBaseObjectGetProtocolVTable();
            if (!v30)
              goto LABEL_276;
            v31 = *(_QWORD *)(v30 + 16);
            if (!v31)
              goto LABEL_276;
            v32 = *(unsigned int (**)(const void *, CFArrayRef *))(v31 + 24);
            if (!v32)
              goto LABEL_276;
            v220 = v13;
            if (v32(ValueAtIndex, &theArraya))
              goto LABEL_276;
            v33 = attrName;
            if (CFArrayGetCount(theArraya) < 1)
            {
LABEL_112:
              v4 = v222;
              v13 = v220;
              goto LABEL_113;
            }
            v34 = 0;
            v35 = 0;
            while (2)
            {
              v36 = CFArrayGetValueAtIndex(theArraya, v34);
              aStr = 0;
              FigCaptionRendererCaptionProtocolGetProtocolID();
              v37 = CMBaseObjectGetProtocolVTable();
              if (v37)
              {
                v38 = *(_QWORD *)(v37 + 16);
                if (v38)
                {
                  v39 = *(void (**)(const void *, CFAttributedStringRef *))(v38 + 32);
                  if (v39)
                    v39(v36, &aStr);
                }
              }
              effectiveRange.location = 0;
              effectiveRange.length = 0;
              Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, v33, &effectiveRange);
              if (Attribute)
              {
                Mutable = searchNodesCopyByID(MutableCopy, Attribute);
                goto LABEL_51;
              }
              Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
              idx[0] = 0;
              if (CFArrayGetCount(MutableCopy) < 1)
                goto LABEL_61;
              v43 = a3;
              v44 = -1;
              do
              {
                if (CFArrayGetValueAtIndex(MutableCopy, idx[0]) == v36)
                {
                  v44 = idx[0];
                  v45 = CFNumberCreate(v7, kCFNumberCFIndexType, idx);
                  CFArrayAppendValue(Mutable, v45);
                  if (v45)
                    CFRelease(v45);
                }
                v46 = ++idx[0];
              }
              while (v46 < CFArrayGetCount(MutableCopy));
              v47 = v44 == -1;
              a3 = v43;
              v33 = attrName;
              if (v47)
              {
LABEL_61:
                if (Mutable)
                  CFRelease(Mutable);
              }
              else
              {
LABEL_51:
                if (Mutable)
                {
                  removeNodesByIndexes(MutableCopy, Mutable);
                  CFRelease(Mutable);
                  v42 = *(_QWORD *)(a1 + 72) != 0;
                  *(_OWORD *)idx = *(_OWORD *)a3;
                  v226[0] = *(double *)(a3 + 16);
                  updateTimedNode((uint64_t)v36, (__int128 *)idx, v42);
LABEL_111:
                  v34 = ++v35;
                  if (CFArrayGetCount(theArraya) <= v35)
                    goto LABEL_112;
                  continue;
                }
              }
              break;
            }
            v231 = 0;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            v48 = CMBaseObjectGetProtocolVTable();
            if (v48)
            {
              v49 = *(_QWORD *)(v48 + 16);
              if (v49)
              {
                v50 = *(void (**)(const void *, int *))(v49 + 48);
                if (v50)
                  v50(v36, &v231);
              }
            }
            __s1 = 0;
            FigCaptionRendererBaseProtocolGetProtocolID();
            v51 = CMBaseObjectGetProtocolVTable();
            if (v51)
            {
              v52 = *(_QWORD *)(v51 + 16);
              if (v52)
              {
                v53 = *(void (**)(const void *, char **))(v52 + 8);
                if (v53)
                  v53(v36, &__s1);
              }
            }
            if (v231 != 1)
              goto LABEL_104;
            if (strcmp(v236, "FigCaptionRendererCellStackLayoutRegion"))
              goto LABEL_104;
            v54 = __s1;
            if (!__s1)
              goto LABEL_104;
            v55 = strcmp(__s1, "FigCaptionRendererCaption");
            if ((_DWORD)v55)
            {
              v55 = strcmp(v54, "FigCaptionRendererPaintOnCaption");
              if ((_DWORD)v55)
                goto LABEL_104;
            }
            idx[0] = 0;
            idx[1] = 0;
            idx[0] = FigBytePumpGetFigBaseObject(v55);
            idx[1] = v56;
            FigCaptionRendererIntervalProtocolGetProtocolID();
            v57 = CMBaseObjectGetProtocolVTable();
            if (v57)
            {
              v58 = *(_QWORD *)(v57 + 16);
              if (v58)
              {
                v59 = *(uint64_t (**)(const void *, CFIndex *))(v58 + 8);
                if (v59)
                  v57 = v59(v36, idx);
              }
            }
            *(double *)&BOOLean = 0.0;
            v229 = 0.0;
            *(double *)&BOOLean = FigBytePumpGetFigBaseObject(v57);
            v229 = v60;
            if (CFArrayGetCount(MutableCopy) >= 1)
            {
              v61 = CFArrayGetValueAtIndex(MutableCopy, 0);
              theDict = 0;
              FigCaptionRendererCaptionProtocolGetProtocolID();
              v62 = CMBaseObjectGetProtocolVTable();
              if (!v62)
                goto LABEL_276;
              v63 = *(_QWORD *)(v62 + 16);
              if (!v63)
                goto LABEL_276;
              v64 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v63 + 16);
              if (!v64 || v64(v61, &theDict))
                goto LABEL_276;
              Value = (char *)CFDictionaryGetValue(theDict, CFSTR("region"));
              if (Value)
              {
                if (Value == v235)
                {
                  FigCaptionRendererIntervalProtocolGetProtocolID();
                  v66 = CMBaseObjectGetProtocolVTable();
                  if (v66)
                  {
                    v67 = *(_QWORD *)(v66 + 16);
                    if (v67)
                    {
                      v68 = *(void (**)(const void *, CFAttributedStringRef *))(v67 + 8);
                      if (v68)
                        v68(v61, &BOOLean);
                    }
                  }
                }
              }
            }
            if (*(double *)&BOOLean - (*(double *)idx + *(double *)&idx[1]) == 0.0)
            {
              v69 = *(_QWORD *)(a1 + 240);
              FigCaptionRendererParentIntervalProtocolGetProtocolID();
              v70 = CMBaseObjectGetProtocolVTable();
              if (!v70)
                goto LABEL_276;
              v71 = *(_QWORD *)(v70 + 16);
              if (!v71)
                goto LABEL_276;
              v72 = *(unsigned int (**)(uint64_t, const void *))(v71 + 16);
              if (!v72 || v72(v69, v36))
                goto LABEL_276;
              v73 = *(double *)idx;
              v74 = v229 + *(double *)&idx[1];
              *(double *)&idx[1] = v229 + *(double *)&idx[1];
              FigCaptionRendererIntervalProtocolGetProtocolID();
              v75 = CMBaseObjectGetProtocolVTable();
              if (v75)
              {
                v76 = *(_QWORD *)(v75 + 16);
                if (v76)
                {
                  v77 = *(void (**)(const void *, double, double))(v76 + 16);
                  if (v77)
                    v77(v36, v73, v74);
                }
              }
              v78 = *(_QWORD *)(a1 + 240);
              FigCaptionRendererParentIntervalProtocolGetProtocolID();
              v79 = CMBaseObjectGetProtocolVTable();
              if (v79)
              {
                v80 = *(_QWORD *)(v79 + 16);
                if (v80)
                {
                  v81 = *(void (**)(uint64_t, const void *))(v80 + 8);
                  if (v81)
                    v81(v78, v36);
                }
              }
            }
            else
            {
LABEL_104:
              v82 = *(const __CFDictionary **)(a1 + 584);
              if (v82)
              {
                v83 = CFDictionaryGetValue(v82, v36);
                if (v83)
                {
                  v84 = v83;
                  FigCaptionRendererOutputNodeProtocolGetProtocolID();
                  v85 = CMBaseObjectGetProtocolVTable();
                  if (v85)
                  {
                    v86 = *(_QWORD *)(v85 + 16);
                    if (v86)
                    {
                      v87 = *(void (**)(const void *, _QWORD))(v86 + 16);
                      if (v87)
                        v87(v84, 0);
                    }
                  }
                }
              }
              CFArrayRemoveValueAtIndex(theArraya, v34);
              --v35;
            }
            goto LABEL_111;
          }
          if (strcmp(v18, "FigCaptionRendererCaption") && strcmp(v18, "FigCaptionRendererPaintOnCaption"))
            goto LABEL_113;
          *(double *)&BOOLean = 0.0;
          FigCaptionRendererCaptionProtocolGetProtocolID();
          v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 16);
            if (v20)
            {
              v21 = *(void (**)(const void *, CFAttributedStringRef *))(v20 + 32);
              if (v21)
                v21(ValueAtIndex, &BOOLean);
            }
          }
          LODWORD(__s1) = 0;
          FigCaptionRendererCaptionProtocolGetProtocolID();
          v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 16);
            if (v23)
            {
              v24 = *(void (**)(const void *, char **))(v23 + 48);
              if (v24)
                v24(ValueAtIndex, &__s1);
            }
          }
          if (__s1 > 4 || (_DWORD)__s1 == 2)
          {
            effectiveRange.location = 0;
            effectiveRange.length = 0;
            v98 = (const __CFString *)CFAttributedStringGetAttribute(BOOLean, 0, attrName, &effectiveRange);
            if (!v98)
              goto LABEL_113;
            v99 = searchNodesCopyByID(MutableCopy, v98);
            if (!v99)
            {
              v114 = *(const __CFDictionary **)(a1 + 584);
              if (v114)
              {
                v115 = CFDictionaryGetValue(v114, ValueAtIndex);
                if (v115)
                  FigCaptionRendererOutputNodeSetParentNode((uint64_t)v115);
              }
              goto LABEL_148;
            }
            v100 = v99;
            removeNodesByIndexes(MutableCopy, v99);
            CFRelease(v100);
            goto LABEL_34;
          }
          v238.length = CFArrayGetCount(MutableCopy);
          v238.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(MutableCopy, v238, ValueAtIndex);
          if (FirstIndexOfValue != -1)
          {
            CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
LABEL_34:
            v26 = *(_QWORD *)(a1 + 72) != 0;
            *(_OWORD *)idx = *(_OWORD *)a3;
            v226[0] = *(double *)(a3 + 16);
            updateTimedNode((uint64_t)ValueAtIndex, (__int128 *)idx, v26);
            goto LABEL_113;
          }
          v235 = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          v88 = CMBaseObjectGetProtocolVTable();
          if (v88)
          {
            v89 = *(_QWORD *)(v88 + 16);
            if (v89)
            {
              v90 = *(void (**)(const void *, char **))(v89 + 8);
              if (v90)
                v90(ValueAtIndex, &v235);
            }
          }
          if (!v235)
            goto LABEL_121;
          v91 = strcmp(v235, "FigCaptionRendererPaintOnCaption");
          if ((_DWORD)v91)
            goto LABEL_121;
          idx[0] = 0;
          idx[1] = 0;
          idx[0] = FigBytePumpGetFigBaseObject(v91);
          idx[1] = v101;
          FigCaptionRendererIntervalProtocolGetProtocolID();
          v102 = CMBaseObjectGetProtocolVTable();
          if (v102)
          {
            v103 = *(_QWORD *)(v102 + 16);
            if (v103)
            {
              v104 = *(uint64_t (**)(const void *, CFIndex *))(v103 + 8);
              if (v104)
                v102 = v104(ValueAtIndex, idx);
            }
          }
          effectiveRange.location = 0;
          effectiveRange.length = 0;
          effectiveRange.location = FigBytePumpGetFigBaseObject(v102);
          effectiveRange.length = v105;
          if (CFArrayGetCount(MutableCopy) >= 1)
          {
            v106 = CFArrayGetValueAtIndex(MutableCopy, 0);
            theArraya = 0;
            FigCaptionRendererBaseProtocolGetProtocolID();
            v107 = CMBaseObjectGetProtocolVTable();
            if (v107)
            {
              v108 = *(_QWORD *)(v107 + 16);
              if (v108)
              {
                v109 = *(void (**)(const void *, CFArrayRef *))(v108 + 8);
                if (v109)
                  v109(v106, &theArraya);
              }
            }
            aStr = 0;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            v110 = CMBaseObjectGetProtocolVTable();
            if (v110)
            {
              v111 = *(_QWORD *)(v110 + 16);
              if (v111)
              {
                v112 = *(void (**)(const void *, CFAttributedStringRef *))(v111 + 16);
                if (v112)
                  v112(v106, &aStr);
              }
            }
            if (aStr)
              v113 = CFDictionaryGetValue(aStr, CFSTR("region"));
            else
              v113 = 0;
            if (theArraya && !strcmp((const char *)theArraya, "FigCaptionRendererPaintOnCaption") && !v113)
              FigCaptionRendererIntervalGetRange((uint64_t)v106, (uint64_t)&effectiveRange);
          }
          if (*(double *)&effectiveRange.location - (*(double *)idx + *(double *)&idx[1]) != 0.0)
          {
LABEL_121:
            v92 = *(const __CFDictionary **)(a1 + 584);
            if (v92)
            {
              v93 = CFDictionaryGetValue(v92, ValueAtIndex);
              if (v93)
              {
                v94 = v93;
                FigCaptionRendererOutputNodeProtocolGetProtocolID();
                v95 = CMBaseObjectGetProtocolVTable();
                if (v95)
                {
                  v96 = *(_QWORD *)(v95 + 16);
                  if (v96)
                  {
                    v97 = *(void (**)(const void *, _QWORD))(v96 + 16);
                    if (v97)
                      v97(v94, 0);
                  }
                }
              }
            }
LABEL_148:
            v116 = v237[0];
            v239.length = CFArrayGetCount(v237[0]);
            v239.location = 0;
            v117 = CFArrayGetFirstIndexOfValue(v116, v239, ValueAtIndex);
            CFArrayRemoveValueAtIndex(v116, v117);
            --v13;
            goto LABEL_113;
          }
          v118 = *(_QWORD *)(a1 + 240);
          FigCaptionRendererParentIntervalProtocolGetProtocolID();
          v119 = CMBaseObjectGetProtocolVTable();
          if (!v119)
            goto LABEL_276;
          v120 = *(_QWORD *)(v119 + 16);
          if (!v120)
            goto LABEL_276;
          v121 = *(unsigned int (**)(uint64_t, const void *))(v120 + 16);
          if (!v121 || v121(v118, ValueAtIndex))
            goto LABEL_276;
          v122 = *(double *)idx;
          v123 = *(double *)&effectiveRange.length + *(double *)&idx[1];
          *(double *)&idx[1] = *(double *)&effectiveRange.length + *(double *)&idx[1];
          FigCaptionRendererIntervalProtocolGetProtocolID();
          v124 = CMBaseObjectGetProtocolVTable();
          if (v124)
          {
            v125 = *(_QWORD *)(v124 + 16);
            if (v125)
            {
              v126 = *(void (**)(const void *, double, double))(v125 + 16);
              if (v126)
                v126(ValueAtIndex, v122, v123);
            }
          }
          v127 = *(_QWORD *)(a1 + 240);
          FigCaptionRendererParentIntervalProtocolGetProtocolID();
          v128 = CMBaseObjectGetProtocolVTable();
          if (v128)
          {
            v129 = *(_QWORD *)(v128 + 16);
            if (v129)
            {
              v130 = *(void (**)(uint64_t, const void *))(v129 + 8);
              if (v130)
                v130(v127, ValueAtIndex);
            }
          }
        }
LABEL_113:
        v12 = ++v13;
      }
      while (CFArrayGetCount(v237[0]) > v13);
    }
    if (CFArrayGetCount(MutableCopy) >= 1)
    {
      v131 = 0;
      v223 = v4;
      do
      {
        v132 = CFArrayGetValueAtIndex(MutableCopy, v131);
        v133 = *(_QWORD *)(a1 + 72) != 0;
        *(_OWORD *)idx = *(_OWORD *)a3;
        v226[0] = *(double *)(a3 + 16);
        updateTimedNode((uint64_t)v132, (__int128 *)idx, v133);
        effectiveRange.location = 0;
        FigCaptionRendererCaptionProtocolGetProtocolID();
        v134 = CMBaseObjectGetProtocolVTable();
        if (!v134)
          goto LABEL_276;
        v135 = *(_QWORD *)(v134 + 16);
        if (!v135)
          goto LABEL_276;
        v136 = *(unsigned int (**)(const void *, CFRange *))(v135 + 16);
        if (!v136 || v136(v132, &effectiveRange))
          goto LABEL_276;
        v137 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)effectiveRange.location, CFSTR("region"));
        if (v137)
        {
          v138 = v137;
          if (CFArrayGetCount(v237[0]) >= 1)
          {
            v139 = 0;
            do
            {
              v140 = CFArrayGetValueAtIndex(v237[0], v139);
              *(double *)&BOOLean = 0.0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              v141 = CMBaseObjectGetProtocolVTable();
              if (!v141)
                goto LABEL_276;
              v142 = *(_QWORD *)(v141 + 16);
              if (!v142)
                goto LABEL_276;
              v143 = *(unsigned int (**)(const void *, CFAttributedStringRef *))(v142 + 8);
              if (!v143 || v143(v140, &BOOLean))
                goto LABEL_276;
              v144 = (const char *)BOOLean;
              if (*(double *)&BOOLean != 0.0
                && (!strcmp((const char *)BOOLean, "FigCaptionRendererStackLayoutRegion")
                 || !strcmp(v144, "FigCaptionRendererTTMLRegion")
                 || !strcmp(v144, "FigCaptionRendererCellStackLayoutRegion")
                 || !strcmp(v144, "FigCaptionRendereriTTRegion")
                 || !strcmp(v144, "FigCaptionRendererSRTRegion")
                 || !strcmp(v144, "FigCaptionRendererFreeLayoutRegion")))
              {
                v236 = 0;
                FigCaptionRendererRegionProtocolGetProtocolID();
                v145 = CMBaseObjectGetProtocolVTable();
                if (!v145)
                  goto LABEL_276;
                v146 = *(_QWORD *)(v145 + 16);
                if (!v146)
                  goto LABEL_276;
                v147 = *(unsigned int (**)(const void *, const char **))(v146 + 16);
                if (!v147 || v147(v140, &v236))
                  goto LABEL_276;
                if (CFStringCompare(v138, (CFStringRef)v236, 1uLL) == kCFCompareEqualTo)
                {
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v148 = CMBaseObjectGetProtocolVTable();
                  if (!v148)
                    goto LABEL_276;
                  v149 = *(_QWORD *)(v148 + 16);
                  if (!v149)
                    goto LABEL_276;
                  v150 = *(unsigned int (**)(const void *, const void *))(v149 + 40);
                  if (!v150)
                    goto LABEL_276;
                  v151 = v131;
                  if (v150(v140, v132))
                    goto LABEL_276;
                  v152 = *(const __CFDictionary **)(a1 + 584);
                  if (v152)
                  {
                    v153 = CFDictionaryGetValue(v152, v132);
                    v154 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 584), v140);
                    if (v153)
                    {
                      v155 = v154;
                      if (v154)
                      {
                        FigCaptionRendererOutputNodeProtocolGetProtocolID();
                        v156 = CMBaseObjectGetProtocolVTable();
                        if (!v156)
                          goto LABEL_276;
                        v157 = *(_QWORD *)(v156 + 16);
                        if (!v157)
                          goto LABEL_276;
                        v158 = *(unsigned int (**)(const void *, const void *))(v157 + 24);
                        if (!v158 || v158(v155, v153))
                          goto LABEL_276;
                      }
                    }
                  }
                  v159 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
                  *(_OWORD *)idx = *MEMORY[0x1E0C9D628];
                  *(_OWORD *)v226 = v159;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v160 = CMBaseObjectGetProtocolVTable();
                  if (v160)
                  {
                    v161 = *(_QWORD *)(v160 + 16);
                    if (v161)
                    {
                      v162 = *(void (**)(const void *, CFIndex *))(v161 + 152);
                      if (v162)
                        v162(v140, idx);
                    }
                  }
                  v163 = *(double *)idx;
                  v164 = *(double *)&idx[1];
                  v165 = *(_OWORD *)v226;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v166 = CMBaseObjectGetProtocolVTable();
                  if (!v166)
                    goto LABEL_276;
                  v167 = *(_QWORD *)(v166 + 16);
                  if (!v167)
                    goto LABEL_276;
                  v168 = *(unsigned int (**)(const void *, double, double, double, double))(v167 + 64);
                  if (!v168)
                    goto LABEL_276;
                  v131 = v151;
                  if (v168(v132, v163, v164, *(double *)&v165, *((double *)&v165 + 1)))
                    goto LABEL_276;
                }
              }
            }
            while (CFArrayGetCount(v237[0]) > ++v139);
          }
        }
        else
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v169 = CMBaseObjectGetProtocolVTable();
          if (!v169)
            goto LABEL_276;
          v170 = *(_QWORD *)(v169 + 16);
          if (!v170)
            goto LABEL_276;
          v171 = *(unsigned int (**)(const void *, const void *))(v170 + 40);
          if (!v171)
            goto LABEL_276;
          v172 = v131;
          if (v171(v221, v132))
            goto LABEL_276;
          v173 = *(const __CFDictionary **)(a1 + 584);
          if (v173)
          {
            v174 = CFDictionaryGetValue(v173, v132);
            v175 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 584), v221);
            if (v174)
            {
              v176 = v175;
              if (v175)
              {
                FigCaptionRendererOutputNodeProtocolGetProtocolID();
                v177 = CMBaseObjectGetProtocolVTable();
                if (!v177)
                  goto LABEL_276;
                v178 = *(_QWORD *)(v177 + 16);
                if (!v178)
                  goto LABEL_276;
                v179 = *(unsigned int (**)(const void *, const void *))(v178 + 24);
                if (!v179 || v179(v176, v174))
                  goto LABEL_276;
              }
            }
          }
          *(double *)&BOOLean = 0.0;
          v180 = *(_QWORD *)(a1 + 248);
          FigCaptionRendererBaseProtocolGetProtocolID();
          v181 = CMBaseObjectGetProtocolVTable();
          if (!v181)
            goto LABEL_276;
          v182 = *(_QWORD *)(v181 + 16);
          if (!v182)
            goto LABEL_276;
          v183 = *(unsigned int (**)(uint64_t, CFAttributedStringRef *))(v182 + 8);
          if (!v183 || v183(v180, &BOOLean))
            goto LABEL_276;
          v184 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
          *(_OWORD *)idx = *MEMORY[0x1E0C9D628];
          *(_OWORD *)v226 = v184;
          v131 = v172;
          if (!strcmp((const char *)BOOLean, "FigCaptionRendererAVFLayoutRegion"))
          {
            LODWORD(v236) = 0;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            v188 = CMBaseObjectGetProtocolVTable();
            if (v188)
            {
              v189 = *(_QWORD *)(v188 + 16);
              if (v189)
              {
                v190 = *(void (**)(const void *, const char **))(v189 + 48);
                if (v190)
                  v190(v132, &v236);
              }
            }
            if ((_DWORD)v236 == 3)
            {
              FigCaptionRendererNodeProtocolGetProtocolID();
              v191 = CMBaseObjectGetProtocolVTable();
              if (v191)
              {
                v192 = *(_QWORD *)(v191 + 16);
                if (v192)
                {
                  v193 = *(void (**)(const void *, CFIndex *))(v192 + 104);
                  if (v193)
                    v193(v221, idx);
                }
              }
            }
            if (v226[0] == 0.0 || v226[1] == 0.0)
            {
              idx[0] = FCRGetVideoPresentationBounds(*(double *)(a1 + 656), *(double *)(a1 + 664), *(double *)(a1 + 624), *(double *)(a1 + 632), *(double *)(a1 + 640), *(double *)(a1 + 648));
              idx[1] = v194;
              v226[0] = v195;
              v226[1] = v196;
            }
          }
          else
          {
            FigCaptionRendererNodeProtocolGetProtocolID();
            v185 = CMBaseObjectGetProtocolVTable();
            if (v185)
            {
              v186 = *(_QWORD *)(v185 + 16);
              if (v186)
              {
                v187 = *(void (**)(const void *, CFIndex *))(v186 + 152);
                if (v187)
                  v187(v221, idx);
              }
            }
          }
          v197 = *(double *)idx;
          v198 = *(double *)&idx[1];
          v199 = *(_OWORD *)v226;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v200 = CMBaseObjectGetProtocolVTable();
          if (!v200)
            goto LABEL_276;
          v201 = *(_QWORD *)(v200 + 16);
          if (!v201)
            goto LABEL_276;
          v202 = *(unsigned int (**)(const void *, double, double, double, double))(v201 + 64);
          if (!v202 || v202(v132, v197, v198, *(double *)&v199, *((double *)&v199 + 1)))
            goto LABEL_276;
        }
        ++v131;
        v4 = v223;
      }
      while (CFArrayGetCount(MutableCopy) > v131);
    }
    if (!CFArrayGetCount(v4) || CFArrayGetCount(v237[0]) < 1)
    {
LABEL_269:
      if (!*(_QWORD *)(a1 + 72))
      {
        *(_OWORD *)idx = *(_OWORD *)a3;
        v226[0] = *(double *)(a3 + 16);
        v215 = (const __CFArray *)copyCurrentActiveCaptions(a1, (CMTime *)idx);
        if (CFArrayGetCount(v215) >= 1)
        {
          v216 = 0;
          do
          {
            v217 = CFArrayGetValueAtIndex(v215, v216);
            v218 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
            if (!v218)
              break;
            v219 = v218;
            *v218 = CFRetain((CFTypeRef)a1);
            v219[1] = CFRetain(v217);
            renderCaptionDo(v219);
            ++v216;
          }
          while (CFArrayGetCount(v215) > v216);
        }
        if (v215)
          CFRelease(v215);
      }
      goto LABEL_277;
    }
    v203 = 0;
    v204 = *(const __CFAttributedString **)MEMORY[0x1E0C9AE40];
    v205 = *MEMORY[0x1E0C9AE50];
    while (1)
    {
      v206 = CFArrayGetValueAtIndex(v237[0], v203);
      idx[0] = 0;
      FigCaptionRendererBaseProtocolGetProtocolID();
      v207 = CMBaseObjectGetProtocolVTable();
      if (!v207)
        goto LABEL_276;
      v208 = *(_QWORD *)(v207 + 16);
      if (!v208)
        goto LABEL_276;
      v209 = *(unsigned int (**)(const void *, CFIndex *))(v208 + 8);
      if (!v209 || v209(v206, idx))
        goto LABEL_276;
      if (idx[0] && !strcmp((const char *)idx[0], "FigCaptionRendererTTMLRegion"))
      {
        effectiveRange.location = 0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v210 = CMBaseObjectGetProtocolVTable();
        if (!v210)
          goto LABEL_276;
        v211 = *(_QWORD *)(v210 + 16);
        if (!v211)
          goto LABEL_276;
        v212 = *(unsigned int (**)(const void *, CFRange *))(v211 + 24);
        if (!v212 || v212(v206, &effectiveRange))
          goto LABEL_276;
        if (!CFArrayGetCount((CFArrayRef)effectiveRange.location))
        {
          v213 = (uint64_t)v206;
          v214 = v205;
          goto LABEL_267;
        }
        BOOLean = v204;
        FigCaptionRendererTTMLRegionGetInvisible((uint64_t)v206, &BOOLean);
        if (CFBooleanGetValue(BOOLean))
        {
          v213 = (uint64_t)v206;
          v214 = (uint64_t)v204;
LABEL_267:
          FigCaptionRendererTTMLRegionSetInvisible(v213, v214);
        }
      }
      if (CFArrayGetCount(v237[0]) <= ++v203)
        goto LABEL_269;
    }
  }
}

CFIndex ensureCaptionsAreRendered(uint64_t a1, uint64_t a2)
{
  uint64_t ProtocolVTable;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, CFArrayRef *);
  CFIndex v7;
  __int128 *v8;
  CFIndex result;
  const void *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, char **);
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(const void *, __int128 *);
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, char *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(const void *, uint64_t);
  char v25;
  __int128 v26;
  __int128 v27;
  char *__s1;
  CFArrayRef theArray;

  theArray = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(unsigned int (**)(uint64_t, CFArrayRef *))(v5 + 24);
  if (!v6 || v6(a2, &theArray))
    return FigSignalErrorAt();
  v7 = 0;
  v8 = (__int128 *)MEMORY[0x1E0C9D628];
  while (1)
  {
    result = (CFIndex)theArray;
    if (theArray)
      result = CFArrayGetCount(theArray);
    if (v7 >= result)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
    __s1 = 0;
    FigCaptionRendererBaseProtocolGetProtocolID();
    v11 = CMBaseObjectGetProtocolVTable();
    if (!v11)
      return FigSignalErrorAt();
    v12 = *(_QWORD *)(v11 + 16);
    if (!v12)
      return FigSignalErrorAt();
    v13 = *(unsigned int (**)(const void *, char **))(v12 + 8);
    if (!v13 || v13(ValueAtIndex, &__s1))
      return FigSignalErrorAt();
    v14 = __s1;
    if (__s1)
    {
      if (!strcmp(__s1, "FigCaptionRendererCaption"))
      {
        v15 = v8[1];
        v26 = *v8;
        v27 = v15;
        v25 = 0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v16 = CMBaseObjectGetProtocolVTable();
        if (!v16)
          return FigSignalErrorAt();
        v17 = *(_QWORD *)(v16 + 16);
        if (!v17)
          return FigSignalErrorAt();
        v18 = *(unsigned int (**)(const void *, __int128 *))(v17 + 104);
        if (!v18)
          return FigSignalErrorAt();
        if (v18(ValueAtIndex, &v26))
          return FigSignalErrorAt();
        FigCaptionRendererNodeProtocolGetProtocolID();
        v19 = CMBaseObjectGetProtocolVTable();
        if (!v19)
          return FigSignalErrorAt();
        v20 = *(_QWORD *)(v19 + 16);
        if (!v20)
          return FigSignalErrorAt();
        v21 = *(unsigned int (**)(const void *, char *))(v20 + 224);
        if (!v21 || v21(ValueAtIndex, &v25))
          return FigSignalErrorAt();
        if (*(double *)&v27 == 0.0 || *((double *)&v27 + 1) == 0.0 || v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 16);
            if (v23)
            {
              v24 = *(void (**)(const void *, uint64_t))(v23 + 280);
              if (v24)
                v24(ValueAtIndex, a1 + 288);
            }
          }
        }
      }
      else if (!strcmp(v14, "FigCaptionRendererTTMLRegion"))
      {
        ensureCaptionsAreRendered(a1, ValueAtIndex);
      }
    }
    ++v7;
  }
  return result;
}

void copyOutputNodeContentIntoCGContext(uint64_t a1, CGContext *a2)
{
  uint64_t ProtocolVTable;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, CGImageRef *);
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, double *);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, CGSize *);
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, CFArrayRef *);
  uint64_t Count;
  CFArrayRef theArray;
  CGSize v18;
  double v19[3];
  CGImageRef v20;
  CFRange v21;
  CGRect v22;
  CGRect v23;

  if (!a1 || !a2)
  {
    FigSignalErrorAt();
    return;
  }
  v20 = 0;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_24;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    goto LABEL_24;
  v6 = *(unsigned int (**)(uint64_t, CGImageRef *))(v5 + 112);
  if (!v6 || v6(a1, &v20))
    goto LABEL_24;
  if (v20)
  {
    *(_OWORD *)v19 = *MEMORY[0x1E0C9D538];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v7 = CMBaseObjectGetProtocolVTable();
    if (!v7)
      goto LABEL_24;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      goto LABEL_24;
    v9 = *(unsigned int (**)(uint64_t, double *))(v8 + 64);
    if (!v9)
      goto LABEL_24;
    if (v9(a1, v19))
      goto LABEL_24;
    v18 = (CGSize)*MEMORY[0x1E0C9D820];
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v10 = CMBaseObjectGetProtocolVTable();
    if (!v10)
      goto LABEL_24;
    v11 = *(_QWORD *)(v10 + 16);
    if (!v11)
      goto LABEL_24;
    v12 = *(unsigned int (**)(uint64_t, CGSize *))(v11 + 80);
    if (!v12 || v12(a1, &v18))
      goto LABEL_24;
    v22.size = v18;
    v22.origin.x = v19[0] - v18.width * 0.5;
    v22.origin.y = v19[1] - v18.height * 0.5;
    v23 = CGRectIntegral(v22);
    CGContextDrawImage(a2, v23, v20);
  }
  theArray = 0;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13
    || (v14 = *(_QWORD *)(v13 + 16)) == 0
    || (v15 = *(unsigned int (**)(uint64_t, CFArrayRef *))(v14 + 40)) == 0
    || v15(a1, &theArray))
  {
LABEL_24:
    FigSignalErrorAt();
    return;
  }
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v21.length = Count;
      v21.location = 0;
      CFArrayApplyFunction(theArray, v21, (CFArrayApplierFunction)copyOutputNodeContentIntoCGContext, a2);
    }
  }
}

__CFArray *searchNodesCopyByID(const __CFArray *a1, const __CFString *a2)
{
  const __CFAllocator *v4;
  __CFArray *Mutable;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v9;
  unsigned int (*v10)(const void *, char **);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const void *, CFAttributedStringRef *);
  const __CFString *Attribute;
  CFNumberRef v16;
  CFIndex v17;
  const __CFString *attrName;
  CFRange effectiveRange;
  CFAttributedStringRef aStr;
  char *__s1;
  CFIndex idx;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  idx = 0;
  if (CFArrayGetCount(a1) <= 0)
    goto LABEL_26;
  v6 = -1;
  attrName = (const __CFString *)*MEMORY[0x1E0CA2B10];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, idx);
    __s1 = 0;
    FigCaptionRendererBaseProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (!ProtocolVTable)
      break;
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (!v9)
      break;
    v10 = *(unsigned int (**)(const void *, char **))(v9 + 8);
    if (!v10 || v10(ValueAtIndex, &__s1))
      break;
    v11 = __s1;
    if (__s1
      && strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
      && strcmp(v11, "FigCaptionRendererTTMLRegion")
      && strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
      && strcmp(v11, "FigCaptionRendereriTTRegion")
      && strcmp(v11, "FigCaptionRendererSRTRegion")
      && strcmp(v11, "FigCaptionRendererFreeLayoutRegion")
      && !strcmp(v11, "FigCaptionRendererCaption"))
    {
      aStr = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      v12 = CMBaseObjectGetProtocolVTable();
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          v14 = *(void (**)(const void *, CFAttributedStringRef *))(v13 + 32);
          if (v14)
            v14(ValueAtIndex, &aStr);
        }
      }
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      Attribute = (const __CFString *)CFAttributedStringGetAttribute(aStr, 0, attrName, &effectiveRange);
      if (CFStringCompare(Attribute, a2, 1uLL) == kCFCompareEqualTo)
      {
        v6 = idx;
        v16 = CFNumberCreate(v4, kCFNumberCFIndexType, &idx);
        CFArrayAppendValue(Mutable, v16);
        if (v16)
          CFRelease(v16);
      }
    }
    v17 = ++idx;
    if (v17 >= CFArrayGetCount(a1))
      goto LABEL_25;
  }
  FigSignalErrorAt();
LABEL_25:
  if (v6 == -1)
  {
LABEL_26:
    if (Mutable)
    {
      CFRelease(Mutable);
      return 0;
    }
  }
  return Mutable;
}

CFIndex removeNodesByIndexes(__CFArray *a1, CFArrayRef theArray)
{
  CFIndex result;
  uint64_t v5;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  CFIndex valuePtr;

  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    v5 = 0;
    for (i = 0; i < result; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, i);
      valuePtr = -1;
      CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, &valuePtr);
      valuePtr += v5;
      CFArrayRemoveValueAtIndex(a1, valuePtr);
      result = CFArrayGetCount(theArray);
      --v5;
    }
  }
  return result;
}

uint64_t updateTimedNode(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t ProtocolVTable;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, char **);
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  char *__s1;

  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(unsigned int (**)(uint64_t, char **))(v7 + 8);
  if (!v8 || v8(a1, &__s1))
    return FigSignalErrorAt();
  result = (uint64_t)__s1;
  if (__s1)
  {
    result = strcmp(__s1, "FigCaptionRendererPaintOnCaption");
    if (!(_DWORD)result)
    {
      v10 = *a2;
      v11 = *((_QWORD *)a2 + 2);
      return FigCaptionRendererPaintOnCaptionSetCurrentTime(a1, (uint64_t)&v10, a3);
    }
  }
  return result;
}

void renderCaptionDo(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  void (*v6)(const void *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t);
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, CGImageRef *);
  int BytesPerRow;
  size_t Height;
  double v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(const void *, double *);
  uint64_t v22;
  const void *v23;
  CMTime v24;
  double FigBaseObject;
  double v26;
  CGImageRef image;

  v3 = *a1;
  v2 = (const void *)a1[1];
  if (((*(_DWORD *)(*a1 + 120) & 0x80000000) != 0 || *(int *)(v3 + 124) > 0 || *(_DWORD *)(v3 + 268) == 1)
    && *(_BYTE *)(v3 + 1349))
  {
    *(_QWORD *)(v3 + 608) = 0;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v5 = *(_QWORD *)(ProtocolVTable + 16);
      if (v5)
      {
        v6 = *(void (**)(const void *, uint64_t))(v5 + 280);
        if (v6)
          v6(v2, v3 + 288);
      }
    }
    v7 = *(_QWORD *)(*a1 + 248);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v8 = CMBaseObjectGetProtocolVTable();
    if (!v8)
      goto LABEL_28;
    v9 = *(_QWORD *)(v8 + 16);
    if (!v9)
      goto LABEL_28;
    v10 = *(unsigned int (**)(uint64_t, uint64_t))(v9 + 104);
    if (!v10 || v10(v7, v3 + 128))
      goto LABEL_28;
    v11 = *(const void **)(v3 + 160);
    *(_QWORD *)(v3 + 160) = v2;
    if (v2)
      CFRetain(v2);
    if (v11)
      CFRelease(v11);
    if (*(_DWORD *)(v3 + 268) != 1)
    {
      image = 0;
      v12 = *(_QWORD *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v13 = CMBaseObjectGetProtocolVTable();
      if (!v13)
        goto LABEL_28;
      v14 = *(_QWORD *)(v13 + 16);
      if (!v14)
        goto LABEL_28;
      v15 = *(unsigned int (**)(uint64_t, CGImageRef *))(v14 + 176);
      if (!v15)
        goto LABEL_28;
      if (v15(v12, &image))
        goto LABEL_28;
      BytesPerRow = CGImageGetBytesPerRow(image);
      Height = CGImageGetHeight(image);
      *(_DWORD *)(v3 + 124) -= Height * BytesPerRow;
      if (*(_DWORD *)(v3 + 268) != 2)
      {
        FigBaseObject = FigBytePumpGetFigBaseObject(Height);
        v26 = v18;
        FigCaptionRendererIntervalProtocolGetProtocolID();
        v19 = CMBaseObjectGetProtocolVTable();
        if (!v19
          || (v20 = *(_QWORD *)(v19 + 16)) == 0
          || (v21 = *(unsigned int (**)(const void *, double *))(v20 + 8)) == 0
          || v21(v2, &FigBaseObject)
          || (FigCDSTriggerManualTrigger(*(_QWORD *)(v3 + 48)),
              v22 = *(_QWORD *)(v3 + 48),
              CMTimeMake(&v24, (uint64_t)((FigBaseObject + v26) * 1000.0), 1000),
              FigCaptionRendererTriggerScheduleEvent(v22, (uint64_t)v2, (__int128 *)&v24.value)))
        {
LABEL_28:
          FigSignalErrorAt();
        }
      }
    }
  }
  v23 = (const void *)a1[1];
  if (v23)
    CFRelease(v23);
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  free(a1);
}

void layoutInContext(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  CFTypeRef v6;

  if (a2[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    if (v4)
    {
      v5 = v4;
      *v4 = CFRetain(a2);
      if (a1)
        v6 = CFRetain(a1);
      else
        v6 = 0;
      v5[1] = v6;
      dispatch_sync_f(a2[21], v5, (dispatch_function_t)layoutSceneDo);
    }
  }
}

void layoutSceneDo(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, _QWORD *);
  const void *v8;

  v3 = *(_QWORD **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3[76] = 0;
  v3[75] = v2;
  v4 = v3[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (v6 = *(_QWORD *)(ProtocolVTable + 16)) == 0
    || (v7 = *(unsigned int (**)(uint64_t, _QWORD *))(v6 + 304)) == 0
    || v7(v4, v3 + 36))
  {
    FigSignalErrorAt();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v8 = *(const void **)(a1 + 8);
  if (v8)
    CFRelease(v8);
  free((void *)a1);
}

void applyContextDefaultsToMASettings(int64x2_t *a1)
{
  int64x2_t v2;
  uint64_t v3;
  int64x2_t *v4;
  const void *v5;

  if (a1[16].i32[3] == 2 && !a1[84].i8[1])
  {
    v2 = vdupq_n_s64(1uLL);
    a1[18] = v2;
    a1[19] = v2;
    a1[20] = v2;
    a1[21] = v2;
    a1[26].i64[0] = 1;
    memset_pattern16(&a1[22], &xmmword_1932FA140, 0x40uLL);
    v3 = 0;
    a1[29].i64[1] = 0;
    v4 = a1 + 31;
    do
    {
      v5 = (const void *)v4->i64[v3];
      if (v5)
      {
        CFRelease(v5);
        v4->i64[v3] = 0;
      }
      ++v3;
    }
    while (v3 != 8);
    a1[30].i64[1] = 0x3FF0000000000000;
  }
}

void onCaptionInput(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  CFTypeRef v5;

  if (a2 && a2[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    *v4 = v5;
    dispatch_async_f(a2[21], v4, (dispatch_function_t)onCaptionInputDo);
  }
}

void onRegionInput(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  CFTypeRef v5;

  if (a2 && a2[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xC0040D1025EB5uLL);
    v4[1] = CFRetain(a2);
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    *v4 = v5;
    dispatch_async_f(a2[21], v4, (dispatch_function_t)onRegionInputDo);
  }
}

void onTextHighlightArray(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  CFTypeRef v5;

  if (a2 && a2[21])
  {
    v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xE00401B06D0A3uLL);
    v4[1] = CFRetain(a2);
    if (a1)
      v5 = CFRetain(a1);
    else
      v5 = 0;
    *v4 = v5;
    dispatch_sync_f(a2[21], v4, (dispatch_function_t)onTextHighlightArrayDo);
  }
}

void onCaptionInputDo(uint64_t a1)
{
  double v2;
  uint64_t v3;
  const void *v4;
  uint64_t *v5;
  CFTypeRef v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t ProtocolVTable;
  uint64_t v14;
  void (*v15)(const void *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, _QWORD);
  double Seconds;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(const void *, int *);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, void **);
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(const void *, double *);
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, char **);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, __int128 *);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, __int128 *);
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(const void *, CFDictionaryRef *);
  const __CFString *v50;
  const __CFString *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(uint64_t, CMTime *);
  CFIndex v56;
  const void *ValueAtIndex;
  uint64_t v58;
  uint64_t v59;
  unsigned int (*v60)(const void *, const char **);
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(const void *, CFStringRef *);
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int (*v69)(const void *, double, double, double, double);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int (*v73)(const void *, uint64_t);
  const __CFDictionary *v74;
  const void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(const void *, uint64_t);
  const __CFDictionary *v81;
  const __CFArray *v82;
  const __CFArray *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int (*v89)(uint64_t, const void *);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int (*v93)(const void *, const char **);
  double v94;
  int v95;
  double v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int (*v102)(const void *, void **);
  void *v103;
  void *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(const void *, double, double, double, double);
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(const void *, const void *);
  const __CFDictionary *v112;
  const void *v113;
  const void *v114;
  const void *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(const void *, const void *);
  const __CFDictionary *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(const void *, __CFString *, void *);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(const void *, uint64_t);
  void *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(const void *, void *);
  __int128 v132;
  __int128 v133;
  void *v134;
  void *value[2];
  __int128 v136;
  CFStringRef theString2;
  CFDictionaryRef theDict;
  __int128 v139;
  double v140[3];
  char *__s1;
  int v142;
  void *values;
  double FigBaseObject;
  double v145;
  CMTime time;
  const char *v147[4];

  FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  v145 = v2;
  v4 = *(const void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  values = *(void **)a1;
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 1376));
  if (*(_BYTE *)(v3 + 1347))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v3 + 1376));
  }
  else
  {
    v5 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *v5 = (uint64_t)CFRetain((CFTypeRef)v3);
    v6 = *(CFTypeRef *)(v3 + 72);
    if (v6)
      v6 = CFRetain(v6);
    v5[1] = (uint64_t)v6;
    playbackItemChangedCallbackDo(v5);
    v7 = *(_OWORD *)(v3 + 784);
    *(_OWORD *)(v3 + 624) = *(_OWORD *)(v3 + 768);
    *(_OWORD *)(v3 + 640) = v7;
    v8 = *(_OWORD *)(v3 + 816);
    *(_OWORD *)(v3 + 656) = *(_OWORD *)(v3 + 800);
    *(_OWORD *)(v3 + 672) = v8;
    v9 = *(_OWORD *)(v3 + 848);
    *(_OWORD *)(v3 + 688) = *(_OWORD *)(v3 + 832);
    *(_OWORD *)(v3 + 704) = v9;
    v10 = *(_OWORD *)(v3 + 896);
    v11 = *(_OWORD *)(v3 + 864);
    *(_OWORD *)(v3 + 736) = *(_OWORD *)(v3 + 880);
    *(_OWORD *)(v3 + 752) = v10;
    *(_OWORD *)(v3 + 720) = v11;
    *(_BYTE *)(v3 + 1347) = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(v3 + 1376));
    UpdateLayoutContext(v3);
  }
  if (*(_DWORD *)(v3 + 268) == 1 || *(_BYTE *)(v3 + 40))
  {
    v12 = *(_QWORD *)(v3 + 1384);
    if (v12)
    {
      FigCaptionRendererCaptionProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v14 = *(_QWORD *)(ProtocolVTable + 16);
        if (v14)
        {
          v15 = *(void (**)(const void *, uint64_t))(v14 + 72);
          if (v15)
            v15(v4, v12);
        }
      }
    }
    if (*(_BYTE *)(v3 + 1392))
    {
      FigCaptionRendererCaptionProtocolGetProtocolID();
      v16 = CMBaseObjectGetProtocolVTable();
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = *(void (**)(const void *, _QWORD))(v17 + 120);
          if (v18)
            v18(v4, *MEMORY[0x1E0C9AE50]);
        }
      }
    }
    Seconds = 0.0;
    if (*(_DWORD *)(v3 + 268) != 1)
    {
      v20 = *(_QWORD *)(v3 + 48);
      if (!v20)
        goto LABEL_163;
      value[0] = 0;
      value[1] = 0;
      *(_QWORD *)&v136 = 0;
      FigCDSTriggerGetCurrentTime(v20, (CMTime *)value);
      *(_OWORD *)&time.value = *(_OWORD *)value;
      time.epoch = v136;
      Seconds = CMTimeGetSeconds(&time);
    }
    v142 = 0;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v21 = CMBaseObjectGetProtocolVTable();
    if (!v21)
      goto LABEL_163;
    v22 = *(_QWORD *)(v21 + 16);
    if (!v22)
      goto LABEL_163;
    v23 = *(unsigned int (**)(const void *, int *))(v22 + 48);
    if (!v23 || v23(v4, &v142))
      goto LABEL_163;
    if (v142 == 5 && *(_DWORD *)(v3 + 268) == 3)
    {
      value[0] = 0;
      value[1] = 0;
      v24 = *(_QWORD *)(v3 + 240);
      FigCaptionRendererIntervalProtocolGetProtocolID();
      v25 = CMBaseObjectGetProtocolVTable();
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 16);
        if (v26)
        {
          v27 = *(unsigned int (**)(uint64_t, void **))(v26 + 8);
          if (v27)
          {
            if (!v27(v24, value))
            {
              time.value = 0;
              copyCaptionsByRange(*(_QWORD *)(v3 + 240), 0, (CFTypeRef *)&time, 0, *(double *)value, *(double *)&value[1], *(double *)value, *(double *)&value[1]);
              purgeCaptionCachesFromCaptionsTimeline(v3, (CFArrayRef)time.value);
              if (time.value)
                CFRelease((CFTypeRef)time.value);
              goto LABEL_164;
            }
          }
        }
      }
      goto LABEL_163;
    }
    if (*(_QWORD *)(v3 + 584))
    {
      value[0] = 0;
      if (FigCaptionRendererCALayerOutputNodeCreate(value))
        goto LABEL_163;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 584), v4, value[0]);
      if (value[0])
        CFRelease(value[0]);
    }
    if ((*(_DWORD *)(v3 + 268) & 0xFFFFFFFE) == 2)
    {
      FigCaptionRendererIntervalProtocolGetProtocolID();
      v28 = CMBaseObjectGetProtocolVTable();
      if (!v28)
        goto LABEL_163;
      v29 = *(_QWORD *)(v28 + 16);
      if (!v29)
        goto LABEL_163;
      v30 = *(unsigned int (**)(const void *, double *))(v29 + 8);
      if (!v30 || v30(v4, &FigBaseObject))
        goto LABEL_163;
      v31 = Seconds + (double)*(uint64_t *)(v3 + 88);
      if (FigBaseObject + v145 < v31 || FigBaseObject > v31 + (double)*(uint64_t *)(v3 + 96))
        goto LABEL_164;
    }
    __s1 = 0;
    v32 = *(_QWORD *)(v3 + 248);
    FigCaptionRendererBaseProtocolGetProtocolID();
    v33 = CMBaseObjectGetProtocolVTable();
    if (!v33)
      goto LABEL_163;
    v34 = *(_QWORD *)(v33 + 16);
    if (!v34)
      goto LABEL_163;
    v35 = *(unsigned int (**)(uint64_t, char **))(v34 + 8);
    if (!v35 || v35(v32, &__s1))
      goto LABEL_163;
    v132 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    v133 = *MEMORY[0x1E0C9D628];
    v139 = *MEMORY[0x1E0C9D628];
    *(_OWORD *)v140 = v132;
    if (!strcmp(__s1, "FigCaptionRendererAVFLayoutRegion"))
    {
      if (v142 == 3)
      {
        v40 = *(_QWORD *)(v3 + 248);
        FigCaptionRendererNodeProtocolGetProtocolID();
        v41 = CMBaseObjectGetProtocolVTable();
        if (!v41)
          goto LABEL_163;
        v42 = *(_QWORD *)(v41 + 16);
        if (!v42)
          goto LABEL_163;
        v43 = *(unsigned int (**)(uint64_t, __int128 *))(v42 + 104);
        if (!v43 || v43(v40, &v139))
          goto LABEL_163;
      }
      if (v140[0] == 0.0 || v140[1] == 0.0)
      {
        *(_QWORD *)&v139 = FCRGetVideoPresentationBounds(*(double *)(v3 + 656), *(double *)(v3 + 664), *(double *)(v3 + 624), *(double *)(v3 + 632), *(double *)(v3 + 640), *(double *)(v3 + 648));
        *((_QWORD *)&v139 + 1) = v44;
        v140[0] = v45;
        v140[1] = v46;
      }
    }
    else
    {
      v36 = *(_QWORD *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v37 = CMBaseObjectGetProtocolVTable();
      if (!v37)
        goto LABEL_163;
      v38 = *(_QWORD *)(v37 + 16);
      if (!v38)
        goto LABEL_163;
      v39 = *(unsigned int (**)(uint64_t, __int128 *))(v38 + 152);
      if (!v39 || v39(v36, &v139))
        goto LABEL_163;
    }
    theDict = 0;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v47 = CMBaseObjectGetProtocolVTable();
    if (!v47
      || (v48 = *(_QWORD *)(v47 + 16)) == 0
      || (v49 = *(unsigned int (**)(const void *, CFDictionaryRef *))(v48 + 16)) == 0
      || v49(v4, &theDict))
    {
LABEL_163:
      FigSignalErrorAt();
      goto LABEL_164;
    }
    v50 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("region"));
    if (v50)
    {
      v51 = v50;
      time.value = 0;
      v52 = *(_QWORD *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v53 = CMBaseObjectGetProtocolVTable();
      if (!v53)
        goto LABEL_163;
      v54 = *(_QWORD *)(v53 + 16);
      if (!v54)
        goto LABEL_163;
      v55 = *(unsigned int (**)(uint64_t, CMTime *))(v54 + 24);
      if (!v55 || v55(v52, &time))
        goto LABEL_163;
      if (CFArrayGetCount((CFArrayRef)time.value) >= 1)
      {
        v56 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)time.value, v56);
          v147[0] = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          v58 = CMBaseObjectGetProtocolVTable();
          if (!v58)
            goto LABEL_163;
          v59 = *(_QWORD *)(v58 + 16);
          if (!v59)
            goto LABEL_163;
          v60 = *(unsigned int (**)(const void *, const char **))(v59 + 8);
          if (!v60 || v60(ValueAtIndex, v147))
            goto LABEL_163;
          v61 = v147[0];
          if (!strcmp(v147[0], "FigCaptionRendererStackLayoutRegion")
            || !strcmp(v61, "FigCaptionRendererTTMLRegion")
            || !strcmp(v61, "FigCaptionRendererCellStackLayoutRegion")
            || !strcmp(v61, "FigCaptionRendereriTTRegion")
            || !strcmp(v61, "FigCaptionRendererSRTRegion")
            || !strcmp(v61, "FigCaptionRendererFreeLayoutRegion"))
          {
            theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v62 = CMBaseObjectGetProtocolVTable();
            if (!v62)
              goto LABEL_163;
            v63 = *(_QWORD *)(v62 + 16);
            if (!v63)
              goto LABEL_163;
            v64 = *(unsigned int (**)(const void *, CFStringRef *))(v63 + 16);
            if (!v64 || v64(ValueAtIndex, &theString2))
              goto LABEL_163;
            if (CFStringCompare(v51, theString2, 1uLL) == kCFCompareEqualTo)
            {
              *(_OWORD *)value = v133;
              v136 = v132;
              FigCaptionRendererNodeProtocolGetProtocolID();
              v100 = CMBaseObjectGetProtocolVTable();
              if (!v100)
                goto LABEL_163;
              v101 = *(_QWORD *)(v100 + 16);
              if (!v101)
                goto LABEL_163;
              v102 = *(unsigned int (**)(const void *, void **))(v101 + 152);
              if (!v102)
                goto LABEL_163;
              if (v102(ValueAtIndex, value))
                goto LABEL_163;
              v103 = value[0];
              v104 = value[1];
              v105 = v136;
              FigCaptionRendererNodeProtocolGetProtocolID();
              v106 = CMBaseObjectGetProtocolVTable();
              if (!v106)
                goto LABEL_163;
              v107 = *(_QWORD *)(v106 + 16);
              if (!v107)
                goto LABEL_163;
              v108 = *(unsigned int (**)(const void *, double, double, double, double))(v107 + 64);
              if (!v108)
                goto LABEL_163;
              if (v108(v4, *(double *)&v103, *(double *)&v104, *(double *)&v105, *((double *)&v105 + 1)))
                goto LABEL_163;
              FigCaptionRendererNodeProtocolGetProtocolID();
              v109 = CMBaseObjectGetProtocolVTable();
              if (!v109)
                goto LABEL_163;
              v110 = *(_QWORD *)(v109 + 16);
              if (!v110)
                goto LABEL_163;
              v111 = *(unsigned int (**)(const void *, const void *))(v110 + 8);
              if (!v111 || v111(v4, ValueAtIndex))
                goto LABEL_163;
              if (!strcmp(v147[0], "FigCaptionRendererTTMLRegion"))
              {
                v134 = 0;
                FigCaptionRendererTTMLRegionGetWritingMode((uint64_t)ValueAtIndex, &v134);
                v128 = v134;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                v129 = CMBaseObjectGetProtocolVTable();
                if (v129)
                {
                  v130 = *(_QWORD *)(v129 + 16);
                  if (v130)
                  {
                    v131 = *(void (**)(const void *, void *))(v130 + 112);
                    if (v131)
                      v131(v4, v128);
                  }
                }
              }
              v112 = *(const __CFDictionary **)(v3 + 584);
              if (v112)
              {
                v113 = CFDictionaryGetValue(v112, ValueAtIndex);
                v114 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 584), v4);
                if (v113)
                {
                  v115 = v114;
                  if (v114)
                  {
                    FigCaptionRendererOutputNodeProtocolGetProtocolID();
                    v116 = CMBaseObjectGetProtocolVTable();
                    if (!v116)
                      goto LABEL_163;
                    v117 = *(_QWORD *)(v116 + 16);
                    if (!v117)
                      goto LABEL_163;
                    v118 = *(unsigned int (**)(const void *, const void *))(v117 + 24);
                    if (!v118 || v118(v113, v115))
                      goto LABEL_163;
                    v134 = 0;
                    v119 = *(const __CFDictionary **)(v3 + 1024);
                    if (v119)
                    {
                      if (CFDictionaryGetValueIfPresent(v119, CFSTR("separatedOptions"), (const void **)&v134))
                      {
                        v120 = v134;
                        FigCaptionRendererOutputNodeProtocolGetProtocolID();
                        v121 = CMBaseObjectGetProtocolVTable();
                        if (v121)
                        {
                          v122 = *(_QWORD *)(v121 + 16);
                          if (v122)
                          {
                            v123 = *(void (**)(const void *, __CFString *, void *))(v122 + 184);
                            if (v123)
                              v123(v113, CFSTR("separatedOptions"), v120);
                          }
                        }
                      }
                    }
                    if (*(_BYTE *)(v3 + 1033))
                    {
                      v124 = *(unsigned __int8 *)(v3 + 1032);
                      FigCaptionRendererOutputNodeProtocolGetProtocolID();
                      v125 = CMBaseObjectGetProtocolVTable();
                      if (v125)
                      {
                        v126 = *(_QWORD *)(v125 + 16);
                        if (v126)
                        {
                          v127 = *(void (**)(const void *, uint64_t))(v126 + 192);
                          if (v127)
                            v127(v113, v124);
                        }
                      }
                    }
                  }
                }
              }
              break;
            }
          }
        }
        while (CFArrayGetCount((CFArrayRef)time.value) > ++v56);
      }
    }
    else
    {
      v65 = v139;
      v66 = *(_OWORD *)v140;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v67 = CMBaseObjectGetProtocolVTable();
      if (!v67)
        goto LABEL_163;
      v68 = *(_QWORD *)(v67 + 16);
      if (!v68)
        goto LABEL_163;
      v69 = *(unsigned int (**)(const void *, double, double, double, double))(v68 + 64);
      if (!v69)
        goto LABEL_163;
      if (v69(v4, *(double *)&v65, *((double *)&v65 + 1), *(double *)&v66, *((double *)&v66 + 1)))
        goto LABEL_163;
      v70 = *(_QWORD *)(v3 + 248);
      FigCaptionRendererNodeProtocolGetProtocolID();
      v71 = CMBaseObjectGetProtocolVTable();
      if (!v71)
        goto LABEL_163;
      v72 = *(_QWORD *)(v71 + 16);
      if (!v72)
        goto LABEL_163;
      v73 = *(unsigned int (**)(const void *, uint64_t))(v72 + 8);
      if (!v73 || v73(v4, v70))
        goto LABEL_163;
      v74 = *(const __CFDictionary **)(v3 + 584);
      if (v74)
      {
        v75 = CFDictionaryGetValue(v74, *(const void **)(v3 + 248));
        v76 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 584), v4);
        if (v75)
        {
          v77 = (uint64_t)v76;
          if (v76)
          {
            FigCaptionRendererOutputNodeProtocolGetProtocolID();
            v78 = CMBaseObjectGetProtocolVTable();
            if (!v78)
              goto LABEL_163;
            v79 = *(_QWORD *)(v78 + 16);
            if (!v79)
              goto LABEL_163;
            v80 = *(unsigned int (**)(const void *, uint64_t))(v79 + 24);
            if (!v80 || v80(v75, v77))
              goto LABEL_163;
            value[0] = 0;
            v81 = *(const __CFDictionary **)(v3 + 1024);
            if (v81 && CFDictionaryGetValueIfPresent(v81, CFSTR("separatedOptions"), (const void **)value))
              FigCaptionRendererOutputNodeSetOptions(v77, 0x1E2FD6DF8, (uint64_t)value[0]);
            if (*(_BYTE *)(v3 + 1033))
              FigCaptionRendererOutputNodeSetSeparated(v77, *(unsigned __int8 *)(v3 + 1032));
          }
        }
      }
    }
    if (*(_DWORD *)(v3 + 268) == 1)
    {
      v82 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
      if (!v82)
        goto LABEL_163;
      v83 = v82;
      updateNodeTree(v3, v82, MEMORY[0x1E0CA2E18]);
      CFRelease(v83);
      v84 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
      if (v84)
      {
        v85 = v84;
        *v84 = CFRetain((CFTypeRef)v3);
        v85[1] = CFRetain(values);
        renderCaptionDo(v85);
      }
    }
    else
    {
      v86 = *(_QWORD *)(v3 + 240);
      FigCaptionRendererParentIntervalProtocolGetProtocolID();
      v87 = CMBaseObjectGetProtocolVTable();
      if (!v87)
        goto LABEL_163;
      v88 = *(_QWORD *)(v87 + 16);
      if (!v88)
        goto LABEL_163;
      v89 = *(unsigned int (**)(uint64_t, const void *))(v88 + 8);
      if (!v89 || v89(v86, v4))
        goto LABEL_163;
      if (!*(_QWORD *)(v3 + 72))
        goto LABEL_164;
      v90 = *(_QWORD *)(v3 + 48);
      if (!v90)
        goto LABEL_163;
      value[0] = 0;
      value[1] = 0;
      *(_QWORD *)&v136 = 0;
      FigCDSTriggerGetCurrentTime(v90, (CMTime *)value);
      v147[0] = 0;
      v147[1] = 0;
      FigCaptionRendererIntervalProtocolGetProtocolID();
      v91 = CMBaseObjectGetProtocolVTable();
      if (!v91)
        goto LABEL_163;
      v92 = *(_QWORD *)(v91 + 16);
      if (!v92)
        goto LABEL_163;
      v93 = *(unsigned int (**)(const void *, const char **))(v92 + 8);
      if (!v93 || v93(v4, v147))
        goto LABEL_163;
      *(_OWORD *)&time.value = *(_OWORD *)value;
      time.epoch = v136;
      v94 = CMTimeGetSeconds(&time);
      v95 = *(_DWORD *)(v3 + 268);
      if (v95 == 2
        || v95 == 3
        && (v96 = *(double *)v147 - v94, v97 = *(_QWORD *)(v3 + 104), v96 >= (double)v97)
        && v96 <= (double)(*(_QWORD *)(v3 + 112) + v97))
      {
        if (*(_QWORD *)(v3 + 168))
        {
          v98 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
          if (v98)
          {
            v99 = v98;
            *v98 = CFRetain((CFTypeRef)v3);
            v99[1] = CFRetain(v4);
            dispatch_async_f(*(dispatch_queue_t *)(v3 + 168), v99, (dispatch_function_t)renderCaptionDo);
          }
        }
      }
    }
  }
LABEL_164:
  if (values)
    CFRelease(values);
  if (v3)
    CFRelease((CFTypeRef)v3);
  free((void *)a1);
}

uint64_t UpdateLayoutContext(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, char **);
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, double, double, double, double);
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t (*v22)(uint64_t, uint64_t, double, double, double, double);
  uint64_t v23;
  char *__s1;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  CFTypeRef v46;
  CFTypeRef v47;

  v46 = 0;
  v47 = 0;
  if (!a1)
    return 0;
  if (!*(_QWORD *)(a1 + 64) || *(double *)(a1 + 640) == 0.0 || *(double *)(a1 + 648) == 0.0)
    goto LABEL_27;
  v44 = 0u;
  v45 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  v42 = 0u;
  v43 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  FigGeometryRectMake();
  FigGeometryCoordinateSpaceCreate();
  v32 = 0u;
  v33 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometryPointMake();
  v30 = 0u;
  v31 = 0u;
  FigGeometryDimensionMake();
  FigGeometryDimensionMake();
  FigGeometrySizeMake();
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  FigGeometryRectMake();
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  FigGeometryCoordinateSpaceCreate();
  v2 = *(const void **)(a1 + 1016);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 1016) = 0;
  }
  FigGeometryMappingCreate();
  __s1 = 0;
  v3 = *(_QWORD *)(a1 + 248);
  FigCaptionRendererBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v5 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v23 = 4294954508;
LABEL_21:
    FigSignalErrorAt();
    goto LABEL_22;
  }
  v6 = *(uint64_t (**)(uint64_t, char **))(v5 + 8);
  if (!v6)
  {
LABEL_20:
    v23 = 4294954514;
    goto LABEL_21;
  }
  v7 = v6(v3, &__s1);
  if ((_DWORD)v7)
    goto LABEL_29;
  if (!strcmp(__s1, "FigCaptionRendererAVFLayoutRegion"))
  {
    v7 = FigCaptionRendererAVFLayoutRegionSetLayoutContext(*(_QWORD *)(a1 + 248), *(_QWORD *)(a1 + 272), *(_QWORD *)(a1 + 280));
    if ((_DWORD)v7)
      goto LABEL_29;
  }
  if (!*(_QWORD *)(a1 + 64))
  {
LABEL_27:
    v23 = 0;
    goto LABEL_22;
  }
  v8 = FCRGetVideoPresentationBounds(*(double *)(a1 + 656), *(double *)(a1 + 664), *(double *)(a1 + 624), *(double *)(a1 + 632), *(double *)(a1 + 640), *(double *)(a1 + 648));
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(uint64_t (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
  if (!v16)
    goto LABEL_20;
  v7 = v16(v15, v8, v10, v12, v14);
  if ((_DWORD)v7)
  {
LABEL_29:
    v23 = v7;
    goto LABEL_21;
  }
  v17 = *(_QWORD *)(a1 + 64);
  v18 = *(double *)(a1 + 624);
  v19 = *(double *)(a1 + 632);
  v20 = *(double *)(a1 + 640);
  v21 = *(double *)(a1 + 648);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 48);
  if (!v22)
    goto LABEL_20;
  v23 = v22(v17, 1, v18, v19, v20, v21);
  if ((_DWORD)v23)
    goto LABEL_21;
LABEL_22:
  if (v46)
    CFRelease(v46);
  if (v47)
    CFRelease(v47);
  return v23;
}

uint64_t FigCaptionRendererOutputNodeSetOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 184);
      if (v8)
        return v8(a1, a2, a3);
    }
  }
  return result;
}

uint64_t FigCaptionRendererOutputNodeSetSeparated(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

void onRegionInputDo(const void **a1)
{
  char *v2;
  const void *v3;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, char **);
  CGSize v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, CGRect *);
  CGSize v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, const void *, char *);
  CGPoint origin;
  CGSize size;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(const void *, double, double, double, double);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, const void *);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(const void *, uint64_t);
  const __CFDictionary *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, const void *);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(const void *, char *);
  char v44;
  CGRect v45;
  char *__s1;
  void *value;

  v3 = *a1;
  v2 = (char *)a1[1];
  if (*((_QWORD *)v2 + 73))
  {
    value = 0;
    if (FigCaptionRendererCALayerOutputNodeCreate(&value))
      goto LABEL_45;
    CFDictionarySetValue(*((CFMutableDictionaryRef *)v2 + 73), v3, value);
    if (value)
      CFRelease(value);
  }
  __s1 = 0;
  v4 = *((_QWORD *)v2 + 31);
  FigCaptionRendererBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    goto LABEL_45;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    goto LABEL_45;
  v7 = *(unsigned int (**)(uint64_t, char **))(v6 + 8);
  if (!v7 || v7(v4, &__s1))
    goto LABEL_45;
  v8 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v45.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v45.size = v8;
  if (!strcmp(__s1, "FigCaptionRendererAVFLayoutRegion"))
  {
    v45.origin.x = FCRGetVideoPresentationBounds(*((double *)v2 + 82), *((double *)v2 + 83), *((double *)v2 + 78), *((double *)v2 + 79), *((double *)v2 + 80), *((double *)v2 + 81));
    v45.origin.y = v14;
    v45.size.width = v15;
    v45.size.height = v16;
  }
  else
  {
    v9 = *((_QWORD *)v2 + 31);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v10 = CMBaseObjectGetProtocolVTable();
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, CGRect *))(v11 + 152);
        if (v12)
          v12(v9, &v45);
      }
    }
    if (*((_DWORD *)v2 + 67) == 2 && CGRectEqualToRect(v45, *MEMORY[0x1E0C9D648]))
    {
      v13 = (CGSize)*((_OWORD *)v2 + 49);
      v45.origin = (CGPoint)*((_OWORD *)v2 + 48);
      v45.size = v13;
    }
  }
  v44 = 0;
  v17 = *((_QWORD *)v2 + 31);
  FigCaptionRendererNodeProtocolGetProtocolID();
  v18 = CMBaseObjectGetProtocolVTable();
  if (!v18
    || (v19 = *(_QWORD *)(v18 + 16)) == 0
    || (v20 = *(void (**)(uint64_t, const void *, char *))(v19 + 32)) == 0
    || (v20(v17, v3, &v44), !v44))
  {
    origin = v45.origin;
    size = v45.size;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v23 = CMBaseObjectGetProtocolVTable();
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
      {
        v25 = *(void (**)(const void *, double, double, double, double))(v24 + 64);
        if (v25)
          v25(v3, origin.x, origin.y, size.width, size.height);
      }
    }
    v26 = *((_QWORD *)v2 + 31);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v27 = CMBaseObjectGetProtocolVTable();
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v29 = *(void (**)(uint64_t, const void *))(v28 + 40);
        if (v29)
          v29(v26, v3);
      }
    }
    v30 = *((_QWORD *)v2 + 31);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v31 = CMBaseObjectGetProtocolVTable();
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 16);
      if (v32)
      {
        v33 = *(void (**)(const void *, uint64_t))(v32 + 8);
        if (v33)
          v33(v3, v30);
      }
    }
    v34 = (const __CFDictionary *)*((_QWORD *)v2 + 73);
    if (!v34
      || (v35 = CFDictionaryGetValue(v34, *((const void **)v2 + 31)),
          v36 = CFDictionaryGetValue(*((CFDictionaryRef *)v2 + 73), v3),
          !v35)
      || (v37 = v36) == 0
      || (FigCaptionRendererOutputNodeProtocolGetProtocolID(), (v38 = CMBaseObjectGetProtocolVTable()) != 0)
      && (v39 = *(_QWORD *)(v38 + 16)) != 0
      && (v40 = *(unsigned int (**)(const void *, const void *))(v39 + 24)) != 0
      && !v40(v35, v37))
    {
      *((_QWORD *)v2 + 76) = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v41 = CMBaseObjectGetProtocolVTable();
      if (v41)
      {
        v42 = *(_QWORD *)(v41 + 16);
        if (v42)
        {
          v43 = *(void (**)(const void *, char *))(v42 + 288);
          if (v43)
            v43(v3, v2 + 288);
        }
      }
      goto LABEL_46;
    }
LABEL_45:
    FigSignalErrorAt();
  }
LABEL_46:
  if (v3)
    CFRelease(v3);
  CFRelease(v2);
  free(a1);
}

void onTextHighlightArrayDo(uint64_t a1)
{
  CFTypeRef v2;
  _QWORD *v3;
  const void *v5;
  uint64_t v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, CFArrayRef *);
  int v10;
  CFIndex i;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(const void *, char **);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(const void *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(const void *, uint64_t);
  int v24;
  int v25;
  char *__s1[2];
  CFArrayRef theArray;
  int v28;

  v2 = *(CFTypeRef *)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = (const void *)v3[173];
  v3[173] = v2;
  if (v2)
    CFRetain(v2);
  if (v5)
    CFRelease(v5);
  theArray = 0;
  v6 = v3[31];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v8 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
    v24 = -12788;
LABEL_30:
    v28 = v24;
LABEL_31:
    FigSignalErrorAt();
LABEL_32:
    CFRelease(v3);
    goto LABEL_33;
  }
  v9 = *(uint64_t (**)(uint64_t, CFArrayRef *))(v8 + 24);
  if (!v9)
  {
    v24 = -12782;
    goto LABEL_30;
  }
  v28 = v9(v6, &theArray);
  if (v28)
    goto LABEL_31;
  v10 = 0;
  for (i = 0; ; ++i)
  {
    Count = (CFIndex)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    if (i >= Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    __s1[0] = 0;
    FigCaptionRendererBaseProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (!v14 || (v15 = *(_QWORD *)(v14 + 16)) == 0)
    {
      v25 = -12788;
LABEL_43:
      v28 = v25;
LABEL_44:
      FigSignalErrorAt();
      if (v3)
        goto LABEL_32;
      goto LABEL_33;
    }
    v16 = *(uint64_t (**)(const void *, char **))(v15 + 8);
    if (!v16)
    {
      v25 = -12782;
      goto LABEL_43;
    }
    v28 = v16(ValueAtIndex, __s1);
    if (v28)
      goto LABEL_44;
    if (__s1[0] && !strcmp(__s1[0], "FigCaptionRendererCaption"))
    {
      v17 = v3[173];
      FigCaptionRendererCaptionProtocolGetProtocolID();
      v18 = CMBaseObjectGetProtocolVTable();
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 16);
        if (v19)
        {
          v20 = *(void (**)(const void *, uint64_t))(v19 + 72);
          if (v20)
            v20(ValueAtIndex, v17);
        }
      }
      FigCaptionRendererNodeProtocolGetProtocolID();
      v21 = CMBaseObjectGetProtocolVTable();
      if (v21
        && (v22 = *(_QWORD *)(v21 + 16)) != 0
        && (v23 = *(void (**)(const void *, uint64_t))(v22 + 216)) != 0)
      {
        v10 = 1;
        v23(ValueAtIndex, 1);
      }
      else
      {
        v10 = 1;
      }
    }
  }
  if (v10)
  {
    __s1[0] = (char *)&v28;
    __s1[1] = (char *)v3;
    fcrSessionUpdateOutputDo((uint64_t)__s1);
  }
  if (v3)
    goto LABEL_32;
LABEL_33:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void updateDisplayPortDoAsync(CFTypeRef *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void (*v9)(uint64_t, double, double, double, double);
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t);

  v2 = *((_QWORD *)*a1 + 8);
  if (v2)
  {
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v3)
      v3(v2);
    v4 = *((_QWORD *)*a1 + 8);
    v5 = *((double *)a1 + 1);
    v6 = *((double *)a1 + 2);
    v7 = *((double *)a1 + 3);
    v8 = *((double *)a1 + 4);
    v9 = *(void (**)(uint64_t, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
    if (v9)
      v9(v4, v5, v6, v7, v8);
    v10 = *((_QWORD *)*a1 + 8);
    v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v11)
      v11(v10);
    v12 = *((_QWORD *)*a1 + 8);
    v13 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v13)
      v13(v12);
    v14 = *((_QWORD *)*a1 + 8);
    v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v15)
      v15(v14);
    v16 = *((_QWORD *)*a1 + 8);
    v17 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v17)
      v17(v16);
  }
  CFRelease(*a1);
  free(a1);
}

CGColorRef overridesCreateCGColorFromCFArray(const __CFDictionary *a1, void *key, _QWORD *a3)
{
  CGColorRef v3;
  void *Value;
  CFTypeID v8;
  CFTypeID v9;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v12;
  CGColorSpace *v13;
  CGColorSpace *v14;
  CGFloat v16;
  CGFloat components[5];

  v3 = 0;
  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  if (!a1 || !key)
    return v3;
  if (!CFDictionaryContainsKey(a1, key))
    return 0;
  Value = (void *)CFDictionaryGetValue(a1, key);
  v8 = CFGetTypeID(Value);
  if (v8 != CGColorGetTypeID())
  {
    v9 = CFGetTypeID(Value);
    if (v9 == CFArrayGetTypeID())
    {
      for (i = 0; i != 4; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, i);
        v16 = 0.0;
        v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFNumberGetTypeID())
          break;
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberCGFloatType, &v16);
        components[((_BYTE)i - 1) & 3] = v16;
      }
    }
    goto LABEL_12;
  }
  v3 = CGColorRetain((CGColorRef)Value);
  if (!v3)
  {
LABEL_12:
    v13 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    if (!v13)
    {
      v3 = 0;
      if (!a3)
        return v3;
      goto LABEL_15;
    }
    v14 = v13;
    v3 = CGColorCreate(v13, components);
    CGColorSpaceRelease(v14);
  }
  if (a3)
LABEL_15:
    *a3 = 0x3FF0000000000000;
  return v3;
}

uint64_t FigCreateSubtitleRenderPipeline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const void *a8, __int128 *a9, uint64_t a10, CFTypeRef *a11)
{
  _BOOL4 v11;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t DerivedStorage;
  dispatch_queue_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  uint64_t FigBaseObject;
  uint64_t (*v28)(uint64_t, const __CFString *, uint64_t, uint64_t);
  __int128 v31;
  uint64_t v32;
  CFTypeRef v33;
  char __str[16];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)__str = 0u;
  v35 = 0u;
  if (a3)
    v11 = a2 != 0;
  else
    v11 = 0;
  if ((a2 != 0) != (a3 != 0))
    goto LABEL_32;
  v13 = a5 && a4 != 0;
  if ((a4 != 0) != (a5 != 0))
    goto LABEL_32;
  v14 = a7 && a6 != 0;
  if ((a6 != 0) != (a7 != 0))
    goto LABEL_32;
  v17 = *MEMORY[0x1E0C9AE00];
  FigRenderPipelineGetClassID();
  v18 = CMDerivedObjectCreate();
  if ((_DWORD)v18)
    goto LABEL_25;
  v19 = a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  snprintf(__str, 0x80uLL, "com.apple.coremedia.figsubtitlerenderpipeline(%p).callbackqueue", v33);
  v21 = dispatch_queue_create(__str, 0);
  *(_QWORD *)(DerivedStorage + 8) = v21;
  if (!v21)
    goto LABEL_32;
  if (v11)
  {
    *(_QWORD *)(DerivedStorage + 144) = a2;
    v22 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(DerivedStorage + 152) = v22;
    if (!v22)
      goto LABEL_32;
  }
  if ((!v13
     || (*(_QWORD *)(DerivedStorage + 160) = a4,
         v23 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
         (*(_QWORD *)(DerivedStorage + 168) = v23) != 0))
    && (!v14
     || (*(_QWORD *)(DerivedStorage + 192) = a6,
         v24 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
         (*(_QWORD *)(DerivedStorage + 200) = v24) != 0)))
  {
    v25 = a8;
    if (a8)
      v25 = CFRetain(a8);
    *(_QWORD *)(DerivedStorage + 176) = v25;
    *(_DWORD *)(DerivedStorage + 184) = 0;
    v18 = FigTextSampleBufferSetUpState(DerivedStorage + 40, v17, v19);
    if (!(_DWORD)v18)
    {
      v31 = *a9;
      v32 = *((_QWORD *)a9 + 2);
      v18 = FigSimpleRenderPipelineCreateWithCallback(v17, (uint64_t)subrp_sendSubtitleSampleForSampleBuffer, 0, (uint64_t)v33, (uint64_t)&v31, 0, (_QWORD *)(DerivedStorage + 24));
      if (!(_DWORD)v18)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 24));
        v28 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (v28)
        {
          v18 = v28(FigBaseObject, CFSTR("SourceSampleBufferQueue"), v17, DerivedStorage + 32);
          if (!(_DWORD)v18)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterAddListener();
            *a11 = v33;
            return v18;
          }
        }
        else
        {
          v18 = 4294954514;
        }
      }
    }
  }
  else
  {
LABEL_32:
    v18 = FigSignalErrorAt();
  }
LABEL_25:
  if (v33)
    CFRelease(v33);
  return v18;
}

uint64_t subrp_sendSubtitleSampleForSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  CFTypeRef v8;
  CFTypeRef v9;
  char v10;
  _BOOL4 v11;
  int v12;
  unint64_t *v13;
  const __CFArray *v14;
  const void *v15;
  const void *v16;
  int v17;
  int v18;
  __CFDictionary *v19;
  const void *v20;
  const __CFAllocator *v21;
  int v22;
  const __CFString *String;
  __CFArray *Mutable;
  __CFArray *v25;
  __CFDictionary *v26;
  int v27;
  int v28;
  const __CFAllocator *v29;
  int v30;
  CFArrayRef v31;
  uint64_t v32;
  const void *v33;
  char *v34;
  char *v35;
  CFTypeRef v36;
  uint64_t v37;
  const void *v38;
  char *v39;
  char *v40;
  CFTypeRef v41;
  const void *v42;
  CFTypeRef v43;
  __int128 v44;
  __int128 v45;
  char v46;
  __int128 v47;
  __int128 v48;
  CMTime v49;
  CMTime v50;
  CFAttributedStringRef aStr;
  CFIndex numValues[2];
  __int128 v53;
  _WORD v54[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  }
  if (!a2)
    return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  v8 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2678], 0);
  memset(&v50, 0, sizeof(v50));
  CMSampleBufferGetOutputPresentationTimeStamp(&v50, a2);
  memset(&v49, 0, sizeof(v49));
  CMSampleBufferGetOutputDuration(&v49, a2);
  v44 = *MEMORY[0x1E0C9D628];
  v45 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v47 = *MEMORY[0x1E0C9D628];
  v48 = v45;
  if (MediaSubType)
    *(_DWORD *)(DerivedStorage + 184) = MediaSubType;
  else
    MediaSubType = *(_DWORD *)(DerivedStorage + 184);
  if (!WebVTTIsFormatDescriptionForWebVTT(FormatDescription))
  {
    if (v8)
    {
      v10 = 0;
      v9 = 0;
      v47 = v44;
      v48 = v45;
      v11 = 1;
      LOBYTE(v12) = 1;
    }
    else
    {
      v20 = *(const void **)(DerivedStorage + 136);
      v54[0] = 0;
      *(_OWORD *)numValues = v44;
      v53 = v45;
      aStr = 0;
      v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v22 = FigTextSampleBufferCopyAttributedString(DerivedStorage + 40, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2, &aStr, (char *)v54 + 1, v54, (double *)numValues);
      if (v22)
      {
        v28 = v22;
        v9 = 0;
        v12 = 0;
        v46 = 0;
        v11 = 0;
        v26 = 0;
      }
      else
      {
        if (aStr)
        {
          String = CFAttributedStringGetString(aStr);
          if (!CFStringGetLength(String))
          {
            CFRelease(aStr);
            aStr = 0;
          }
        }
        Mutable = CFArrayCreateMutable(v21, 0, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v25 = Mutable;
          if (aStr)
            CFArrayAppendValue(Mutable, aStr);
          v26 = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v26)
          {
            v27 = FigCFDictionarySetInt32();
            if (v27)
            {
              v28 = v27;
              v9 = 0;
              v12 = 0;
              v46 = 0;
              v11 = 0;
            }
            else
            {
              if (v20)
                CFDictionarySetValue(v26, CFSTR("SubtitleExtendedLanguageTag"), v20);
              if (subrp_isSubtitleOverHDRVideo())
                CFDictionarySetValue(v26, CFSTR("SubtitleOverHDRVideo"), (const void *)*MEMORY[0x1E0C9AE50]);
              CFDictionarySetValue(v26, CFSTR("SubtitleContent"), v25);
              v11 = aStr == 0;
              v9 = CFRetain(v26);
              v28 = 0;
              v12 = HIBYTE(v54[0]);
              v46 = v54[0];
              v47 = *(_OWORD *)numValues;
              v48 = v53;
            }
          }
          else
          {
            v9 = 0;
            v12 = 0;
            v46 = 0;
            v11 = 0;
            v28 = -12786;
          }
          CFRelease(v25);
        }
        else
        {
          v9 = 0;
          v12 = 0;
          v46 = 0;
          v11 = 0;
          v26 = 0;
          v28 = -12786;
        }
      }
      if (aStr)
        CFRelease(aStr);
      if (v26)
        CFRelease(v26);
      if (v28)
        goto LABEL_83;
      v10 = v46;
      if (!v12)
      {
        if (*(_BYTE *)(DerivedStorage + 106))
        {
          if (v11)
          {
            LOBYTE(v12) = 1;
          }
          else
          {
            *(_OWORD *)numValues = *(_OWORD *)&v50.value;
            *(_QWORD *)&v53 = v50.epoch;
            subrp_sendEmptySubtitleSample(a1, MediaSubType, (uint64_t)numValues, 1);
            LOBYTE(v12) = 0;
          }
          *(_BYTE *)(DerivedStorage + 106) = 0;
        }
        else
        {
          LOBYTE(v12) = 0;
        }
        goto LABEL_58;
      }
    }
    *(_BYTE *)(DerivedStorage + 106) = !v11;
    goto LABEL_58;
  }
  if (v8)
    goto LABEL_10;
  v13 = *(unint64_t **)(DerivedStorage + 112);
  if (!v13)
  {
    if (WebVTTSampleBufferParserCreate((_QWORD *)(DerivedStorage + 112)))
      return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    v13 = *(unint64_t **)(DerivedStorage + 112);
  }
  v14 = *(const __CFArray **)(DerivedStorage + 120);
  v15 = *(const void **)(DerivedStorage + 136);
  v16 = *(const void **)(DerivedStorage + 88);
  numValues[0] = 0;
  if (!subrp_SampleBufferShouldBeDisplayed(a2))
  {
LABEL_10:
    v9 = 0;
  }
  else
  {
    v17 = WebVTTCreateAttributedStringArrayFromSampleBuffer(v13, a2, v14, (__CFArray **)numValues);
    if (v17)
    {
      v18 = v17;
      v9 = 0;
      v19 = 0;
    }
    else
    {
      v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v19 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v19)
      {
        v30 = FigCFDictionarySetInt32();
        if (v30)
        {
          v18 = v30;
          v9 = 0;
        }
        else
        {
          if (v15)
            CFDictionarySetValue(v19, CFSTR("SubtitleExtendedLanguageTag"), v15);
          if (subrp_isSubtitleOverHDRVideo())
            CFDictionarySetValue(v19, CFSTR("SubtitleOverHDRVideo"), (const void *)*MEMORY[0x1E0C9AE50]);
          v31 = (CFArrayRef)numValues[0];
          if (!numValues[0])
          {
            v31 = CFArrayCreate(v29, 0, 0, MEMORY[0x1E0C9B378]);
            numValues[0] = (CFIndex)v31;
          }
          CFDictionarySetValue(v19, CFSTR("SubtitleContent"), v31);
          if (v16)
            CFDictionarySetValue(v19, CFSTR("SubtitleContentMetadata"), v16);
          v9 = CFRetain(v19);
          v18 = 0;
        }
      }
      else
      {
        v9 = 0;
        v18 = -12786;
      }
    }
    if (numValues[0])
      CFRelease((CFTypeRef)numValues[0]);
    if (v19)
      CFRelease(v19);
    if (v18)
      goto LABEL_83;
  }
  v10 = 0;
  v47 = v44;
  v48 = v45;
  LOBYTE(v12) = 1;
LABEL_58:
  if (!subrp_SampleBufferShouldBeDisplayed(a2))
    goto LABEL_83;
  if (subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 176), MediaSubType))
  {
    if (*(_QWORD *)(DerivedStorage + 160))
    {
      v32 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v32)
      {
        v33 = (const void *)v32;
        v34 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
        if (v34)
        {
          v35 = v34;
          if (a1)
            v36 = CFRetain(a1);
          else
            v36 = 0;
          *(_QWORD *)v35 = v36;
          *((_QWORD *)v35 + 1) = *(_QWORD *)(DerivedStorage + 160);
          *((_QWORD *)v35 + 2) = CFRetain(v33);
          *((_QWORD *)v35 + 3) = CFRetain(a2);
          *(CMTime *)(v35 + 32) = v50;
          v35[56] = v12;
          dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v35, (dispatch_function_t)subrpNativeCallback);
        }
        else
        {
          FigSignalErrorAt();
        }
        v42 = v33;
LABEL_82:
        CFRelease(v42);
      }
    }
  }
  else if (*(_QWORD *)(DerivedStorage + 144))
  {
    v37 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v37)
    {
      v38 = (const void *)v37;
      v39 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
      if (v39)
      {
        v40 = v39;
        if (a1)
          v41 = CFRetain(a1);
        else
          v41 = 0;
        *(_QWORD *)v40 = v41;
        *((_QWORD *)v40 + 1) = *(_QWORD *)(DerivedStorage + 144);
        *((_QWORD *)v40 + 2) = CFRetain(v38);
        if (v9)
          v43 = CFRetain(v9);
        else
          v43 = 0;
        *((_QWORD *)v40 + 3) = v43;
        *(CMTime *)(v40 + 32) = v50;
        v40[80] = v12;
        v40[81] = v10;
        *(_OWORD *)(v40 + 88) = v47;
        *(_OWORD *)(v40 + 104) = v48;
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v40, (dispatch_function_t)subrpCommonCallback);
      }
      else
      {
        FigSignalErrorAt();
      }
      v42 = v38;
      goto LABEL_82;
    }
  }
LABEL_83:
  if (v9)
    CFRelease(v9);
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
}

uint64_t subrp_resetOutput(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  _QWORD *v8;
  CFTypeRef v9;
  int v10;
  uint64_t v11;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (*(_BYTE *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else if (*(_QWORD *)(DerivedStorage + 192))
  {
    v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      v6 = (const void *)v5;
      v7 = malloc_type_calloc(1uLL, 0x18uLL, 0xE004023458D36uLL);
      if (v7)
      {
        v8 = v7;
        if (a2)
          v9 = CFRetain(a2);
        else
          v9 = 0;
        v11 = *(_QWORD *)(DerivedStorage + 192);
        *v8 = v9;
        v8[1] = v11;
        v8[2] = CFRetain(v6);
        dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 8), v8, (dispatch_function_t)subrpFlushCallback);
      }
      else
      {
        FigSignalErrorAt();
      }
      CFRelease(v6);
    }
  }
  else
  {
    v10 = *(_DWORD *)(DerivedStorage + 184);
    figSubtitleRenderPipelineGetCurrentTimeFromTimebase(DerivedStorage, &v12);
    subrp_sendEmptySubtitleSample(a2, v10, (uint64_t)&v12, *(_BYTE *)(DerivedStorage + 106));
    *(_BYTE *)(DerivedStorage + 106) = 0;
  }
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
}

uint64_t figSubtitleRenderPipelineInvalidate(const void *a1)
{
  figSubtitleRenderPipelineInvalidate_Internal(a1, 1);
  return 0;
}

uint64_t figSubtitleRenderPipelineFinalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  figSubtitleRenderPipelineInvalidate_Internal(a1, 0);
  FigTextSampleBufferTearDownState(DerivedStorage + 40);
  v3 = *(const void **)(DerivedStorage + 152);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 168);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 200);
  if (v5)
    CFRelease(v5);
  v6 = *(NSObject **)(DerivedStorage + 8);
  if (v6)
    dispatch_release(v6);
  v7 = *(const void **)(DerivedStorage + 120);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 128);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 136);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 208);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 208) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 176);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  WebVTTSampleBufferParserDestroy(*(_QWORD **)(DerivedStorage + 112));
  result = *(_QWORD *)(DerivedStorage + 16);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  return result;
}

__CFString *figSubtitleRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSubtitleRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t figSubtitleRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *DerivedStorage;
  uint64_t *v8;
  uint64_t result;
  const void *v10;
  CFTypeRef v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(a2, CFSTR("SRPP_TextMarkupArray")))
  {
    v10 = (const void *)v8[15];
    if (!v10)
      return 4294954513;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("SRPP_TextHighlightArray")))
  {
    v10 = (const void *)v8[16];
    if (!v10)
      return 4294954513;
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("SRPP_ExtendedLanguageTagString")))
  {
    v10 = (const void *)v8[17];
    if (v10)
    {
LABEL_12:
      v11 = CFRetain(v10);
LABEL_13:
      result = 0;
      *a4 = v11;
      return result;
    }
LABEL_16:
    v11 = 0;
    goto LABEL_13;
  }
  if (CFEqual(CFSTR("HDRCrossTalker"), a2))
  {
    v10 = (const void *)v8[26];
    if (v10)
      goto LABEL_12;
    goto LABEL_16;
  }
  return FigRenderPipelineCopyProperty(v8[3], (uint64_t)a2, a3, (uint64_t)a4);
}

uint64_t figSubtitleRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t *DerivedStorage;
  uint64_t *v6;
  const void *v8;
  CFTypeID v9;
  CFTypeID TypeID;
  const void *v11;
  CFTypeID v12;
  uint64_t v13;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*(_BYTE *)DerivedStorage)
    return FigSignalErrorAt();
  if (!CFEqual(a2, CFSTR("SRPP_TextMarkupArray")))
  {
    if (CFEqual(a2, CFSTR("SRPP_TextHighlightArray")))
    {
      if (!a3)
      {
        v11 = (const void *)v6[16];
        v6[16] = 0;
        goto LABEL_27;
      }
      TypeID = CFArrayGetTypeID();
      if (TypeID != CFGetTypeID(a3))
        return FigSignalErrorAt();
      v11 = (const void *)v6[16];
      v6[16] = (uint64_t)a3;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("SRPP_ExtendedLanguageTagString")))
    {
      if (a3)
      {
        v12 = CFStringGetTypeID();
        if (v12 != CFGetTypeID(a3))
          return FigSignalErrorAt();
        v11 = (const void *)v6[17];
        v6[17] = (uint64_t)a3;
        goto LABEL_23;
      }
      v11 = (const void *)v6[17];
      v6[17] = 0;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("HDRCrossTalker")))
        return FigRenderPipelineSetProperty_0(v6[3], (uint64_t)a2, (uint64_t)a3);
      if (a3)
      {
        v13 = FigCrossTalkerGetTypeID();
        if (v13 != CFGetTypeID(a3))
          return FigSignalErrorAt();
        v11 = (const void *)v6[26];
        v6[26] = (uint64_t)a3;
LABEL_23:
        CFRetain(a3);
        goto LABEL_27;
      }
      v11 = (const void *)v6[26];
      v6[26] = 0;
    }
LABEL_27:
    if (v11)
      CFRelease(v11);
    return 0;
  }
  v8 = (const void *)v6[15];
  if (v8)
  {
    CFRelease(v8);
    v6[15] = 0;
  }
  if (!a3)
    return 0;
  v9 = CFArrayGetTypeID();
  if (v9 != CFGetTypeID(a3))
    return FigSignalErrorAt();
  v6[15] = (uint64_t)CFRetain(a3);
  return 0;
}

void figSubtitleRenderPipelineInvalidate_Internal(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t FigBaseObject;
  uint64_t v11;
  void (*v12)(uint64_t);
  CMTime v13;
  CMTime v14;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
    if (*(_BYTE *)DerivedStorage)
      JUMPOUT(0x19402EF04);
    if (a2)
    {
      if (*(_QWORD *)(DerivedStorage + 192))
      {
        v5 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v5)
        {
          v6 = (const void *)v5;
          (*(void (**)(const void *, uint64_t))(DerivedStorage + 192))(a1, v5);
          CFRelease(v6);
        }
      }
      else
      {
        memset(&v14, 0, sizeof(v14));
        figSubtitleRenderPipelineGetCurrentTimeFromTimebase(DerivedStorage, &v14);
        v7 = *(_DWORD *)(DerivedStorage + 184);
        v8 = *(_BYTE *)(DerivedStorage + 106);
        v13 = v14;
        subrp_sendEmptySubtitleSample(a1, v7, (uint64_t)&v13, v8);
        *(_BYTE *)(DerivedStorage + 106) = 0;
      }
    }
    *(_BYTE *)DerivedStorage = 1;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    if (*(_QWORD *)(DerivedStorage + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CFRelease(*(CFTypeRef *)(DerivedStorage + 32));
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v9 = *(_QWORD *)(DerivedStorage + 24);
    if (v9)
    {
      FigBaseObject = FigRenderPipelineGetFigBaseObject(v9);
      if (FigBaseObject)
      {
        v11 = FigBaseObject;
        v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v12)
          v12(v11);
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 24));
      *(_QWORD *)(DerivedStorage + 24) = 0;
    }
  }
}

void figSubtitleRenderPipelineGetCurrentTimeFromTimebase(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CMTimebaseRef *);
  int v7;
  CMTimebaseRef v8;
  CMTimebaseRef timebase;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a2->value = *MEMORY[0x1E0CA2E18];
  a2->epoch = *(_QWORD *)(v3 + 16);
  timebase = 0;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
    v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CMTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v6)
    {
      v7 = v6(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &timebase);
      v8 = timebase;
      if (!v7)
      {
        CMTimebaseGetTime(a2, timebase);
        v8 = timebase;
      }
      if (v8)
        CFRelease(v8);
    }
  }
}

void subrp_sendEmptySubtitleSample(const void *a1, int a2, uint64_t a3, char a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  char *v11;
  char *v12;
  CFTypeRef v13;
  uint64_t v14;
  char *v15;
  CFTypeRef v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  void (__cdecl *v20)(void *);
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (subrp_isSubTypeFourCCToBeRepresentedNatively(*(const __CFArray **)(DerivedStorage + 176), a2))
  {
    if (*(_QWORD *)(DerivedStorage + 160))
    {
      v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        v10 = (const void *)v9;
        v11 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x10E00400775FAF6uLL);
        if (v11)
        {
          v12 = v11;
          if (a1)
            v13 = CFRetain(a1);
          else
            v13 = 0;
          v17 = *(_QWORD *)(DerivedStorage + 160);
          *(_QWORD *)v12 = v13;
          *((_QWORD *)v12 + 1) = v17;
          *((_QWORD *)v12 + 2) = CFRetain(v10);
          *((_QWORD *)v12 + 3) = 0;
          v18 = *(_QWORD *)(a3 + 16);
          *((_OWORD *)v12 + 2) = *(_OWORD *)a3;
          *((_QWORD *)v12 + 6) = v18;
          v12[56] = a4;
          v19 = *(NSObject **)(DerivedStorage + 8);
          v20 = (void (__cdecl *)(void *))subrpNativeCallback;
LABEL_17:
          dispatch_async_f(v19, v12, v20);
LABEL_18:
          CFRelease(v10);
          return;
        }
        goto LABEL_19;
      }
    }
  }
  else if (*(_QWORD *)(DerivedStorage + 144))
  {
    v14 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v14)
    {
      v10 = (const void *)v14;
      v15 = (char *)malloc_type_calloc(1uLL, 0x78uLL, 0x10E0040556ECBE3uLL);
      if (v15)
      {
        v12 = v15;
        if (a1)
          v16 = CFRetain(a1);
        else
          v16 = 0;
        v21 = *(_QWORD *)(DerivedStorage + 144);
        *(_QWORD *)v12 = v16;
        *((_QWORD *)v12 + 1) = v21;
        *((_QWORD *)v12 + 2) = CFRetain(v10);
        *((_QWORD *)v12 + 3) = 0;
        v22 = *(_QWORD *)(a3 + 16);
        *((_OWORD *)v12 + 2) = *(_OWORD *)a3;
        v23 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        *(_OWORD *)(v12 + 88) = *MEMORY[0x1E0C9D628];
        *((_QWORD *)v12 + 6) = v22;
        v12[80] = a4;
        v12[81] = 0;
        *(_OWORD *)(v12 + 104) = v23;
        v19 = *(NSObject **)(DerivedStorage + 8);
        v20 = (void (__cdecl *)(void *))subrpCommonCallback;
        goto LABEL_17;
      }
LABEL_19:
      FigSignalErrorAt();
      goto LABEL_18;
    }
  }
}

const __CFArray *subrp_isSubTypeFourCCToBeRepresentedNatively(const __CFArray *a1, int a2)
{
  const __CFArray *v2;
  CFNumberRef v3;
  int valuePtr;
  CFRange v6;

  v2 = a1;
  valuePtr = a2;
  if (a1)
  {
    v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    v6.length = CFArrayGetCount(v2);
    v6.location = 0;
    v2 = (const __CFArray *)CFArrayContainsValue(v2, v6, v3);
    CFRelease(v3);
  }
  return v2;
}

void subrpNativeCallback(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  __int128 v10;
  uint64_t v11;

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t))(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 48);
  v3(v2, v6, &v10, v5, v7);
  v8 = *(const void **)(a1 + 24);
  if (v8)
    CFRelease(v8);
  v9 = *(const void **)(a1 + 16);
  if (v9)
    CFRelease(v9);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void subrpCommonCallback(uint64_t a1)
{
  CFTypeRef v2;
  void (*v3)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, double, double, double, double);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  __int128 v11;
  uint64_t v12;

  v2 = *(CFTypeRef *)a1;
  v3 = *(void (**)(CFTypeRef, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, double, double, double, double))(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 80);
  v6 = *(unsigned __int8 *)(a1 + 81);
  v8 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 48);
  v3(v2, v7, &v11, v5, v6, v8, *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112));
  v9 = *(const void **)(a1 + 24);
  if (v9)
    CFRelease(v9);
  v10 = *(const void **)(a1 + 16);
  if (v10)
    CFRelease(v10);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

BOOL subrp_SampleBufferShouldBeDisplayed(opaqueCMSampleBuffer *a1)
{
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  _BOOL8 result;

  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  result = 1;
  if (SampleAttachmentsArray)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      if ((const void *)*MEMORY[0x1E0C9AE50] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CA25D8]))
        return 0;
    }
  }
  return result;
}

uint64_t subrp_isSubtitleOverHDRVideo()
{
  uint64_t v0;
  uint64_t FigBaseObject;
  unsigned int (*v2)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  BOOL v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 208);
  if (!v0)
    return 0;
  FigBaseObject = FigBytePumpGetFigBaseObject(v0);
  v2 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v2)
    return 0;
  if (v2(FigBaseObject, CFSTR("HDRVideoPlaybackActive"), *MEMORY[0x1E0C9AE00], &cf))
    v3 = 0;
  else
    v3 = *MEMORY[0x1E0C9AE50] == (_QWORD)cf;
  v4 = v3;
  if (cf)
    CFRelease(cf);
  return v4;
}

void subrpFlushCallback(CFTypeRef *a1)
{
  CFTypeRef v2;

  ((void (*)(CFTypeRef, CFTypeRef))a1[1])(*a1, a1[2]);
  v2 = a1[2];
  if (v2)
    CFRelease(v2);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

CFStringRef FPSupport_AcquireHDRVideoDisplayAssertion(const void *a1)
{
  return fpSupport_AcquireVideoDisplayAssertion(0, a1);
}

CFStringRef fpSupport_AcquireVideoDisplayAssertion(unsigned int a1, const void *a2)
{
  uint64_t v4;
  uint64_t *v5;
  const __CFAllocator *v6;
  CFStringRef v7;
  __CFDictionary *Mutable;
  CFNumberRef v9;
  BOOL v10;
  CFNumberRef v11;
  int valuePtr;

  MEMORY[0x19402F294](&sCreatedisplayAssertionDictMutexOnce, fpSupport_createDisplayAssertionMutexAndDict);
  v4 = a1;
  v5 = &sAssertionParameters[4 * a1];
  MEMORY[0x19402EEEC](*v5);
  if (a2)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%p"), a2);
    if (v7)
    {
      Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      valuePtr = 1;
      v9 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
      if (Mutable)
        v10 = v9 == 0;
      else
        v10 = 1;
      if (v10)
      {
        FigSignalErrorAt();
      }
      else
      {
        v11 = v9;
        CFDictionarySetValue(Mutable, CFSTR("Assertion"), v7);
        CFDictionarySetValue(Mutable, CFSTR("OwnerCount"), v11);
        CFRelease(v11);
      }
      CFDictionarySetValue((CFMutableDictionaryRef)sAssertionParameters[4 * v4 + 1], a2, Mutable);
      CFRelease(Mutable);
    }
  }
  else
  {
    v7 = 0;
  }
  MEMORY[0x19402EF04](*v5);
  return v7;
}

uint64_t FPSupport_ReleaseHDRVideoDisplayAssertion(const void *a1, const void *a2)
{
  return FPSupport_ReleaseVideoDisplayAssertion(0, a1, a2);
}

uint64_t FPSupport_ReleaseVideoDisplayAssertion(unsigned int a1, const void *a2, const void *a3)
{
  uint64_t *v6;
  const __CFDictionary *Value;
  __CFDictionary *v8;
  CFNumberRef v9;
  int valuePtr;

  MEMORY[0x19402F294](&sCreatedisplayAssertionDictMutexOnce, fpSupport_createDisplayAssertionMutexAndDict);
  v6 = &sAssertionParameters[4 * a1];
  MEMORY[0x19402EEEC](*v6);
  Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)v6[1], a2);
  if (Value)
  {
    v8 = Value;
    CFDictionaryGetValue(Value, CFSTR("OwnerCount"));
    valuePtr = FigCFNumberGetSInt32() - 1;
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(v8, CFSTR("OwnerCount"), v9);
    CFRelease(v9);
    CFDictionaryGetValue(v8, CFSTR("OwnerCount"));
    if (!FigCFNumberGetSInt32())
    {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)v6[1], a2);
      if (a2)
        CFRetain(a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDeferNotificationToDispatchQueue();
    }
    if (a3)
      CFRelease(a3);
  }
  return MEMORY[0x19402EF04](*v6);
}

CFStringRef FPSupport_Acquire4kVideoDisplayAssertion(const void *a1)
{
  return fpSupport_AcquireVideoDisplayAssertion(1u, a1);
}

uint64_t FPSupport_Release4kVideoDisplayAssertion(const void *a1, const void *a2)
{
  return FPSupport_ReleaseVideoDisplayAssertion(1u, a1, a2);
}

uint64_t FPSupport_GetMediaValidatorPlist()
{
  MEMORY[0x19402F294](&sFigMediaValidatorPListOnce, fpSupport_SetupMediaValidatorPlist);
  return sFigMediaValidatorPList;
}

void fpSupport_SetupMediaValidatorPlist()
{
  const __CFAllocator *v0;
  const __CFDictionary *ModelSpecificPropertyList;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFArray *Value;
  const __CFArray *v5;
  CFMutableDictionaryRef Mutable;
  CFIndex v7;
  const void *v8;
  const void *v9;
  const __CFNumber *ValueAtIndex;
  CFStringRef v11;
  CFStringRef v12;
  const __CFDictionary *v13;
  CFMutableDictionaryRef v14;
  __CFDictionary *v15;
  const __CFNumber *v16;
  __CFArray *v17;
  __CFArray *v18;
  const __CFString *v19;
  CFMutableArrayRef v20;
  __CFArray *v21;
  uint64_t v22;
  const __CFDictionary *v23;
  CFStringRef v24;
  int v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  __CFDictionary *MutableCopy;
  __CFDictionary *v29;
  const __CFArray *v30;
  __CFArray *v31;
  __CFArray *v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  const __CFAllocator *v35;
  CFMutableDictionaryRef v36;
  const __CFAllocator *AllocatorForPermanentAllocations;
  __CFDictionary *v38;
  const __CFDictionary *v39;
  const __CFDictionary *theDict;
  __CFDictionary *v41;
  __CFArray *theArray;
  int v43;
  unsigned int valuePtr;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  v2 = (const __CFDictionary *)VTCopyVP9DecoderCapabilitiesDictionary();
  if (!v2)
    goto LABEL_35;
  v3 = v2;
  Value = (const __CFArray *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E0CED6B0]);
  if (!Value)
    goto LABEL_24;
  v5 = Value;
  theDict = (const __CFDictionary *)CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CED6A8]);
  theArray = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
  {
    FigSignalErrorAt();
    goto LABEL_24;
  }
  Mutable = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable && (v41 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v38 = Mutable;
    v39 = ModelSpecificPropertyList;
    if (CFArrayGetCount(v5) >= 1)
    {
      v7 = 0;
      v8 = (const void *)*MEMORY[0x1E0C9AE40];
      v9 = (const void *)*MEMORY[0x1E0CED6C0];
      while (1)
      {
        valuePtr = 0;
        v43 = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v5, v7);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        v11 = CFStringCreateWithFormat(v0, 0, CFSTR("0%d"), valuePtr);
        CFArrayAppendValue(theArray, v11);
        CFRelease(v11);
        v12 = CFStringCreateWithFormat(v0, 0, CFSTR("%d"), valuePtr);
        v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, v12);
        v14 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (!v14)
          goto LABEL_39;
        v15 = v14;
        CFDictionarySetValue(v41, v12, v14);
        CFRelease(v12);
        FigCFDictionaryGetBooleanIfPresent();
        CFDictionarySetValue(v15, CFSTR("VideoIsHardwareAccelerated"), v8);
        v16 = (const __CFNumber *)CFDictionaryGetValue(v13, v9);
        CFNumberGetValue(v16, kCFNumberIntType, &v43);
        CFDictionarySetValue(v15, CFSTR("MaxLevel"), v16);
        v17 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
        if (!v17)
        {
LABEL_39:
          v25 = FigSignalErrorAt();
          Mutable = v38;
          ModelSpecificPropertyList = v39;
          goto LABEL_40;
        }
        v18 = v17;
        if (!valuePtr)
          break;
        if (valuePtr == 2)
        {
          CFArrayAppendValue(v17, CFSTR("10"));
          v19 = CFSTR("12");
LABEL_14:
          CFArrayAppendValue(v18, v19);
          CFDictionarySetValue(v15, CFSTR("ColorDepth"), v18);
        }
        CFRelease(v18);
        CFRelease(v15);
        if (++v7 >= CFArrayGetCount(v5))
          goto LABEL_16;
      }
      v19 = CFSTR("08");
      goto LABEL_14;
    }
LABEL_16:
    Mutable = v38;
    CFDictionarySetValue(v38, CFSTR("SupportedProfiles"), theArray);
    CFDictionarySetValue(v38, CFSTR("PerProfileConstraints"), v41);
    v20 = CFArrayCreateMutable(v0, 0, MEMORY[0x1E0C9B378]);
    if (v20)
    {
      v21 = v20;
      v22 = 0;
      ModelSpecificPropertyList = v39;
      v23 = v3;
      do
      {
        v24 = CFStringCreateWithFormat(v0, 0, CFSTR("%d"), dword_1932FA878[v22]);
        CFArrayAppendValue(v21, v24);
        CFRelease(v24);
        ++v22;
      }
      while (v22 != 14);
      CFDictionarySetValue(v38, CFSTR("SupportedLevels"), v21);
      CFRelease(v21);
      v25 = 0;
    }
    else
    {
      v25 = FigSignalErrorAt();
      ModelSpecificPropertyList = v39;
LABEL_40:
      v23 = v3;
    }
    CFRelease(v41);
    v26 = v23;
  }
  else
  {
    v25 = FigSignalErrorAt();
    v26 = v3;
  }
  CFRelease(v26);
  CFRelease(theArray);
  if (Mutable && v25)
  {
    v3 = Mutable;
LABEL_24:
    CFRelease(v3);
LABEL_35:
    AllocatorForPermanentAllocations = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
    sFigMediaValidatorPList = (uint64_t)CFDictionaryCreateCopy(AllocatorForPermanentAllocations, ModelSpecificPropertyList);
    goto LABEL_36;
  }
  if (!Mutable)
    goto LABEL_35;
  v27 = (const __CFDictionary *)CFDictionaryGetValue(ModelSpecificPropertyList, CFSTR("VideoCodecProfiles"));
  MutableCopy = CFDictionaryCreateMutableCopy(v0, 0, v27);
  if (!MutableCopy)
  {
    v36 = Mutable;
    goto LABEL_34;
  }
  v29 = MutableCopy;
  CFDictionarySetValue(MutableCopy, CFSTR("vp09"), Mutable);
  v30 = (const __CFArray *)CFDictionaryGetValue(ModelSpecificPropertyList, CFSTR("vide"));
  v31 = CFArrayCreateMutableCopy(v0, 0, v30);
  v32 = v31;
  if (v31)
  {
    CFArrayAppendValue(v31, CFSTR("vp09"));
    v33 = CFDictionaryCreateMutableCopy(v0, 0, ModelSpecificPropertyList);
    v34 = v33;
    if (v33)
    {
      CFDictionaryReplaceValue(v33, CFSTR("VideoCodecProfiles"), v29);
      CFDictionaryReplaceValue(v34, CFSTR("vide"), v32);
      v35 = (const __CFAllocator *)FigGetAllocatorForPermanentAllocations();
      sFigMediaValidatorPList = (uint64_t)CFDictionaryCreateCopy(v35, v34);
    }
  }
  else
  {
    v34 = 0;
  }
  CFRelease(Mutable);
  CFRelease(v29);
  if (v32)
    CFRelease(v32);
  if (v34)
  {
    v36 = v34;
LABEL_34:
    CFRelease(v36);
  }
LABEL_36:
  if (ModelSpecificPropertyList)
    CFRelease(ModelSpecificPropertyList);
}

void FPSupport_DeleteCASlotsInArray(const __CFArray *a1)
{
  void *v2;
  CFIndex Count;
  void *Context;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  int valuePtr;

  v2 = (void *)MEMORY[0x19403137C]();
  if (a1)
    Count = CFArrayGetCount(a1);
  else
    Count = 0;
  Context = (void *)fpSupport_getContext();
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, i);
      valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr)
        objc_msgSend(Context, "deleteSlot:");
    }
  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_autoreleasePoolPop(v2);
}

const void *FPSupport_CopyCAContext()
{
  void *v0;
  const void *Context;
  const void *v2;

  v0 = (void *)MEMORY[0x19403137C]();
  Context = (const void *)fpSupport_getContext();
  v2 = Context;
  if (Context)
    CFRetain(Context);
  objc_autoreleasePoolPop(v0);
  return v2;
}

uint64_t FPSupport_CopyCurrentlyDisplayedPixelBufferFromCAImageQueueArray(CFArrayRef theArray, const __CFAllocator *a2, CVPixelBufferRef *a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  uint64_t v10;
  __IOSurface *v11;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  if (!a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  *a3 = 0;
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    return 0;
  v7 = Count;
  v8 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v8);
    v9 = CAImageQueueCopyDisplayedIOSurface();
    if (v9)
      break;
    if (v7 == ++v8)
      return 0;
  }
  v11 = (__IOSurface *)v9;
  if (IOSurfaceGetProtectionOptions())
  {
    v10 = 0;
  }
  else
  {
    v10 = CVPixelBufferCreateWithIOSurface(a2, v11, 0, &pixelBufferOut);
    if ((_DWORD)v10)
    {
      if (pixelBufferOut)
        CFRelease(pixelBufferOut);
    }
    else
    {
      *a3 = pixelBufferOut;
      pixelBufferOut = 0;
    }
  }
  CFRelease(v11);
  return v10;
}

uint64_t FPSupport_ShouldApplyVideoTrackMatrix(const void *a1, const void *a2)
{
  CFAllocatorRef v4;
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, CFAllocatorRef, CFBooleanRef *);
  uint64_t Value;
  CFAllocatorRef v8;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v11;
  BOOL v12;
  CFTypeRef cf;
  CFBooleanRef BOOLean;

  cf = 0;
  BOOLean = 0;
  v4 = CFGetAllocator(a1);
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v6 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v6 || v6(FigBaseObject, CFSTR("ApplyVideoTrackMatrix"), v4, &BOOLean))
  {
    v11 = 0;
    Value = 0;
  }
  else
  {
    Value = CFBooleanGetValue(BOOLean);
    if (_CFExecutableLinkedOnOrAfter())
    {
      v8 = CFGetAllocator(a2);
      v9 = FigPlaybackItemGetFigBaseObject(a2);
      v10 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (v10)
      {
        v10(v9, CFSTR("VideoCompositor"), v8, &cf);
        v11 = cf;
      }
      else
      {
        v11 = 0;
      }
      if ((_DWORD)Value)
        v12 = v11 == 0;
      else
        v12 = 0;
      Value = v12;
    }
    else
    {
      v11 = 0;
    }
  }
  if (BOOLean)
  {
    CFRelease(BOOLean);
    v11 = cf;
  }
  if (v11)
    CFRelease(v11);
  return Value;
}

uint64_t FPSupport_CopyDestinationPixelBufferAttributesWithIOSurfaceSupport(CFDictionaryRef theDict, int a2, CFDictionaryRef *a3)
{
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  const __CFNumber *Value;
  const __CFNumber *v9;
  CFTypeID v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFTypeID v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  unsigned int *v18;
  int v19;
  uint64_t DestinationPixelBufferAttributes;
  __CFDictionary *MutableCopy;
  __CFDictionary *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  uint64_t v28;
  uint64_t valuePtr;
  uint64_t v30;
  char v31[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  valuePtr = 0;
  *a3 = 0;
  if (!theDict)
  {
    *(_OWORD *)v31 = *(_OWORD *)"ARGB";
    v30 = 0;
    FigGetAlignmentForIOSurfaceOutput();
    v17 = getenv("figvideooutputformat");
    if (v17 && (v18 = (unsigned int *)v17, strlen(v17) == 4))
    {
      *(_DWORD *)v31 = bswap32(*v18);
      v19 = 1;
    }
    else
    {
      v19 = 0;
    }
    DestinationPixelBufferAttributes = FPSupport_CreateDestinationPixelBufferAttributes(0, 0, v31, v19, 0, 1, SHIDWORD(v30), v30, a2 != 0, a3);
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *a3);
    if (!MutableCopy)
      return FigSignalErrorAt();
    v22 = MutableCopy;
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FE8], (const void *)*MEMORY[0x1E0C9AE50]);
    if (*a3)
      CFRelease(*a3);
    *a3 = v22;
    return DestinationPixelBufferAttributes;
  }
  v6 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
  if (v6)
  {
    v7 = v6;
    FigGetAlignmentForIOSurfaceOutput();
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA8F68]);
    if (Value)
    {
      v9 = Value;
      v10 = CFGetTypeID(Value);
      if (v10 == CFNumberGetTypeID())
        CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    }
    v11 = (const __CFNumber *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA9048]);
    if (v11)
    {
      v12 = v11;
      v13 = CFGetTypeID(v11);
      if (v13 == CFNumberGetTypeID())
        CFNumberGetValue(v12, kCFNumberIntType, &v28);
    }
    if ((int)valuePtr >= 1)
    {
      if (valuePtr >= 0)
        v14 = HIDWORD(valuePtr);
      else
        v14 = -HIDWORD(valuePtr);
      if (v14 <= (int)valuePtr)
        v15 = valuePtr;
      else
        v15 = v14;
      if (v14 >= (int)valuePtr)
        v14 = valuePtr;
      if (v14 < 1)
      {
        v16 = v15;
      }
      else
      {
        do
        {
          v16 = v14;
          v14 = v15 % v14;
          v15 = v16;
        }
        while (v14);
      }
      HIDWORD(valuePtr) = (uint64_t)(SHIDWORD(valuePtr) * (unint64_t)valuePtr) / v16;
    }
    if ((int)v28 >= 1)
    {
      if (v28 >= 0)
        v23 = HIDWORD(v28);
      else
        v23 = -HIDWORD(v28);
      if (v23 <= (int)v28)
        v24 = v28;
      else
        v24 = v23;
      if (v23 >= (int)v28)
        v23 = v28;
      if (v23 < 1)
      {
        v25 = v24;
      }
      else
      {
        do
        {
          v25 = v23;
          v23 = v24 % v23;
          v24 = v25;
        }
        while (v23);
      }
      HIDWORD(v28) = (uint64_t)(SHIDWORD(v28) * (unint64_t)v28) / v25;
    }
    PixelBufferAttributesWithIOSurfaceSupport = FigCFDictionarySetInt32();
    if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    {
      PixelBufferAttributesWithIOSurfaceSupport = FigCFDictionarySetInt32();
      if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
      {
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA9000], (const void *)*MEMORY[0x1E0C9AE50]);
        PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
      }
    }
    DestinationPixelBufferAttributes = PixelBufferAttributesWithIOSurfaceSupport;
    CFRelease(v7);
    return DestinationPixelBufferAttributes;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_GetFirstEnabledTrackIDForMediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *);
  uint64_t v7;
  int isTrackEnabled;
  CFTypeRef v9;
  uint64_t v10;
  void (*v12)(CFTypeRef, uint64_t, _QWORD);
  int v13;
  CFTypeRef cf;

  cf = 0;
  v13 = 0;
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
  if (v6)
  {
    v7 = 0;
    while (!v6(a1, v7, a2, &cf, &v13))
    {
      isTrackEnabled = fpSupport_isTrackEnabled((uint64_t)cf);
      v9 = cf;
      if (isTrackEnabled)
      {
        if (!cf)
          return 4294954453;
        CFRetain(cf);
        v12 = *(void (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v12)
          v12(v9, a3, 0);
        CFRelease(v9);
        v10 = 0;
        goto LABEL_9;
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      ++v7;
      v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
      if (!v6)
        break;
    }
  }
  v10 = 4294954453;
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v10;
}

void fpSupport_pickPreferredVideoTrack(const void *a1, const void **a2, int *a3, _BYTE *a4, char a5)
{
  const opaqueCMFormatDescription *v10;
  uint64_t MediaSubType;
  int v12;
  const void *v13;
  CFPropertyListRef Extension;
  const void *v15;
  CFTypeID TypeID;
  const __CFArray *Value;
  const __CFArray *ValueAtIndex;
  CFTypeID v19;
  CFTypeID v20;
  const UInt8 *BytePtr;
  int v22;
  int v23;
  _BOOL4 v26;
  const void *v28;
  CMFormatDescriptionRef desc;

  desc = 0;
  fpSupport_copyFormatDescription((uint64_t)a1, &desc);
  v10 = desc;
  if (desc)
  {
    MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
    v12 = MediaSubType;
    if (fpSupport_isVideoCodecTypeSupported(MediaSubType, a5)
      || CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
    {
      v13 = *a2;
      if (v12 != 1635148593)
        goto LABEL_14;
      Extension = CMFormatDescriptionGetExtension(v10, (CFStringRef)*MEMORY[0x1E0CA2240]);
      if (!Extension)
        goto LABEL_14;
      v15 = Extension;
      TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(v15))
        goto LABEL_14;
      Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v15, CFSTR("avcC"));
      if (!Value)
        goto LABEL_14;
      ValueAtIndex = Value;
      v19 = CFArrayGetTypeID();
      if (v19 == CFGetTypeID(ValueAtIndex))
      {
        ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
        if (!ValueAtIndex)
          goto LABEL_14;
      }
      v20 = CFDataGetTypeID();
      if (v20 == CFGetTypeID(ValueAtIndex)
        && (BytePtr = CFDataGetBytePtr(ValueAtIndex), (unint64_t)CFDataGetLength(ValueAtIndex) >= 7)
        && *BytePtr == 1)
      {
        v22 = BytePtr[1];
      }
      else
      {
LABEL_14:
        v22 = 0;
      }
      v23 = *a3;
      v26 = v12 != 1785750887 && v23 == 1785750887 || v13 == 0;
      if (v12 == 1635148593 && v23 == 1635148593)
      {
        if (*a4 == 77 && v22 != 77)
          LOBYTE(v26) = 1;
        if (!v26)
          goto LABEL_40;
        goto LABEL_35;
      }
      if (v26)
      {
LABEL_35:
        v28 = *a2;
        *a2 = a1;
        if (a1)
          CFRetain(a1);
        if (v28)
          CFRelease(v28);
        *a3 = v12;
        *a4 = v22;
      }
    }
LABEL_40:
    CFRelease(v10);
  }
}

uint64_t FPSupport_GetClosestCommonRefreshIntervalForRate(uint64_t a1, double a2)
{
  uint64_t v2;
  __int128 v3;
  CMTimeEpoch v4;
  uint64_t v6;
  int32_t v7;
  __int128 v9;
  CMTime time1;
  CMTime v11;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTime v15;
  CMTime time2;
  CMTime v17;
  CMTime v18;
  CMTime v19;

  v2 = MEMORY[0x1E0CA2E18];
  v3 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a1 = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (a2 == 0.0)
    return FigSignalErrorAt();
  v9 = v3;
  memset(&v19, 0, sizeof(v19));
  CMTimeMake(&v19, vcvtad_u64_f64(1000000000.0 / a2), 1000000000);
  v6 = 0;
  *(_OWORD *)&v18.value = v9;
  v18.epoch = v4;
  v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  do
  {
    memset(&time2, 0, sizeof(time2));
    v7 = FPSupport_GetClosestCommonRefreshIntervalForRate_commonFrequencies[v6];
    CMTimeMake(&time2, 1, v7);
    memset(&v15, 0, sizeof(v15));
    lhs = v19;
    rhs = time2;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&v15, &time);
    lhs = v15;
    rhs = v17;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      v18 = time2;
      v17 = v15;
    }
    CMTimeMake(&lhs, 1001, 1000 * v7);
    time2 = lhs;
    lhs = v19;
    rhs = time2;
    CMTimeSubtract(&v11, &lhs, &rhs);
    CMTimeAbsoluteValue(&lhs, &v11);
    v15 = lhs;
    rhs = v17;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      v18 = time2;
      v17 = v15;
    }
    v6 += 2;
  }
  while (v6 != 22);
  time2 = v17;
  CMTimeMultiply(&time1, &time2, 100);
  time2 = v18;
  if (CMTimeCompare(&time1, &time2) > 0)
  {
    *(_OWORD *)&v18.value = v9;
    v18.epoch = v4;
  }
  *(CMTime *)a1 = v18;
  return 0;
}

void FPSupport_GetDisplayRefreshInformation(CMTime *a1, CMTime *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  __objc2_class **p_superclass;
  const __CFArray *DisplayList;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v18;
  CMTime v19;
  CMTime v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  memset(&v20, 0, sizeof(v20));
  CMTimeMake(&v20, 1, 60);
  memset(&v19, 0, sizeof(v19));
  CMTimeMake(&v19, 1, 60);
  v6 = *MEMORY[0x1E0CA2E18];
  v7 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v21 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v22 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 20);
  p_superclass = (__objc2_class **)(&OBJC_METACLASS___FigBaseCALayer + 8);
  if (MGGetBoolAnswer())
  {
    DisplayList = (const __CFArray *)IOMobileFramebufferCreateDisplayList();
    v10 = DisplayList;
    if (DisplayList)
    {
      Count = CFArrayGetCount(DisplayList);
      if (Count >= 1)
      {
        v12 = Count;
        v13 = 0;
        while (*((_DWORD *)CFArrayGetValueAtIndex(v10, v13) + 2))
        {
          if (v12 == ++v13)
            goto LABEL_7;
        }
        if (IOMobileFramebufferOpenByName())
        {
LABEL_7:
          v14 = 0;
        }
        else
        {
          v15 = (const void *)IOMobileFramebufferCopyProperty();
          v14 = v15;
          if (v15)
          {
            v16 = CFGetTypeID(v15);
            if (v16 == CFDictionaryGetTypeID())
            {
              p_superclass = &OBJC_METACLASS___FigBaseCALayer.superclass;
              if (dword_1ECDC8860)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                p_superclass = &OBJC_METACLASS___FigBaseCALayer.superclass;
              }
              FigCFDictionaryGetInt64IfPresent();
              FigCFDictionaryGetInt64IfPresent();
              FigCFDictionaryGetInt64IfPresent();
              if (!v10)
                goto LABEL_19;
              goto LABEL_18;
            }
          }
          FigSignalErrorAt();
        }
        p_superclass = (__objc2_class **)(&OBJC_METACLASS___FigBaseCALayer + 8);
        if (v10)
          goto LABEL_18;
        goto LABEL_19;
      }
    }
    FigSignalErrorAt();
    v14 = 0;
    if (v10)
LABEL_18:
      CFRelease(v10);
  }
  else
  {
    v14 = 0;
  }
LABEL_19:
  if (v14)
    CFRelease(v14);
  if (*((_DWORD *)p_superclass + 536))
  {
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
    *a1 = v20;
  if (a2)
    *a2 = v19;
  if (a3)
  {
    *(_QWORD *)a3 = v6;
    *(_DWORD *)(a3 + 8) = v7;
    *(_QWORD *)(a3 + 12) = v21;
    *(_DWORD *)(a3 + 20) = v22;
  }
}

uint64_t fpSupport_addTrackInfoToArray(uint64_t a1, int a2, int a3, __CFArray *a4)
{
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  uint64_t FigBaseObject;
  void (*v13)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  uint64_t v14;
  void (*v15)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  CMFormatDescriptionRef v16;
  CFStringRef v17;
  uint64_t v18;
  void (*v19)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  UInt8 bytes[4];
  CMFormatDescriptionRef desc;
  CFTypeRef cf;
  void *value;
  int valuePtr;

  valuePtr = a2;
  cf = 0;
  value = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  v10 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
  if (v10)
  {
    v11 = v10;
    CFDictionarySetValue(v9, CFSTR("TrackID"), v10);
    CFRelease(v11);
  }
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v13 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (v13)
  {
    v13(FigBaseObject, CFSTR("TrackLanguageCode"), v7, &value);
    if (value)
    {
      CFDictionarySetValue(v9, CFSTR("Language"), value);
      CFRelease(value);
      value = 0;
    }
  }
  v14 = FigTrackReaderGetFigBaseObject(a1);
  v15 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (v15)
    v15(v14, CFSTR("ExtendedLanguageTagString"), v7, &value);
  if (value)
  {
    CFDictionarySetValue(v9, CFSTR("ExtendedLanguage"), value);
    CFRelease(value);
    value = 0;
  }
  if (a3 == 1936684398)
  {
    desc = 0;
    fpSupport_copyFormatDescription(a1, &desc);
    v16 = desc;
    if (desc)
    {
      *(_DWORD *)bytes = bswap32(CMFormatDescriptionGetMediaSubType(desc));
      v17 = CFStringCreateWithBytes(v7, bytes, 4, 0, 0);
      CFDictionarySetValue(v9, CFSTR("AudioFormat"), v17);
      if (v17)
        CFRelease(v17);
      CFRelease(v16);
    }
  }
  v18 = FigTrackReaderGetFigBaseObject(a1);
  v19 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v19)
  {
    v19(v18, CFSTR("TrackExcludeFromAutoSelection"), v7, &cf);
    if (cf)
    {
      CFDictionarySetValue(v9, CFSTR("ExcludeFromAutoSelection"), cf);
      CFRelease(cf);
    }
  }
  CFArrayAppendValue(a4, v9);
  CFRelease(v9);
  return 0;
}

uint64_t FPSupport_FindSampleStream(const __CFArray *a1, opaqueCMSampleBuffer *a2, CFIndex **a3, CFIndex *a4, CMItemCount *a5)
{
  uint64_t result;
  CMItemCount NumSamples;
  int64_t v10;
  CFIndex *v11;
  CFIndex Count;
  CFIndex v13;
  opaqueCMSampleBuffer *ValueAtIndex;
  CMItemCount v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex *v18;
  int64_t v19;
  opaqueCMSampleBuffer *v20;
  CMItemCount v21;
  CMItemCount v22;
  CMItemCount v23;
  CFIndex *v24;
  uint64_t v25;
  size_t v26;
  int64_t v27;
  CFIndex v28;
  opaqueCMSampleBuffer *v29;
  CMItemCount v30;
  CMItemCount v31;
  size_t v32;
  uint64_t i;
  CMItemCount v34;
  size_t *v35;
  size_t *v36;
  size_t v37;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v39;
  int64_t v40;
  CFIndex v41;
  CFIndex *v42;
  CMItemCount *v43;
  CFIndex v44;
  CFIndex *v45;
  CFIndex *v46;
  CMItemCount v47;
  int64_t v48;
  CFIndex *v49;
  int64_t v50;
  CFIndex v52;
  CFIndex idx;
  AudioStreamPacketDescription *SampleAudioPackDescriptors;
  opaqueCMSampleBuffer *v56;
  AudioStreamPacketDescription *v57;
  _BYTE __s2[32];
  _BYTE destination[32];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  result = 0;
  v43 = a5;
  if (a5)
  {
    if (a4)
    {
      if (a2)
      {
        v42 = a4;
        if (a1)
        {
          if (a3)
          {
            NumSamples = CMSampleBufferGetNumSamples(a2);
            v10 = NumSamples;
            v11 = *a3;
            if (!*a3)
            {
              result = (uint64_t)malloc_type_calloc(1uLL, 8 * NumSamples + 3232, 0x2CFFD973uLL);
              if (!result)
                return result;
              v11 = (CFIndex *)result;
              *(_QWORD *)result = 0;
              *(_QWORD *)(result + 8) = 0;
              *(_QWORD *)(result + 16) = v10 + 400;
              *(_QWORD *)(result + 24) = 0;
              *a3 = (CFIndex *)result;
              if (getSampleSizes(a2, v10, (size_t *)(result + 32)))
                return 0;
              v11[3] = v10;
            }
            Count = CFArrayGetCount(a1);
            v13 = *v11;
            if (*v11 < Count)
            {
              do
              {
                ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(a1, v13);
                v15 = CMSampleBufferGetNumSamples(ValueAtIndex);
                v17 = v11[2];
                v16 = v11[3];
                if (v16 + v15 > v17)
                {
                  v11[2] = v17 + 400;
                  result = (uint64_t)malloc_type_realloc(v11, 8 * v17 + 3232, 0x4B115DF9uLL);
                  if (!result)
                    return result;
                  v11 = (CFIndex *)result;
                  *a3 = (CFIndex *)result;
                  v16 = *(_QWORD *)(result + 24);
                }
                if (getSampleSizes(ValueAtIndex, v15, (size_t *)&v11[v16 + 4]))
                  return 0;
                v11[3] += v15;
                ++*v11;
              }
              while (Count != ++v13);
            }
            if (Count < 1)
              return 0;
            idx = 0;
            v18 = v11 + 4;
            v19 = v10;
            v50 = v10;
            v45 = v11 + 4;
            v46 = v11;
            v44 = Count;
            do
            {
              v20 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(a1, idx);
              v21 = CMSampleBufferGetNumSamples(v20);
              v22 = v21;
              if (idx == v11[1])
              {
                if (v21 < 1)
                {
                  v23 = 0;
                }
                else
                {
                  v23 = 0;
                  v24 = &v18[v19];
                  v48 = v19;
                  v49 = v24;
                  v47 = v21;
                  while (v11[3] >= v23 + v19 + v10)
                  {
                    if (v10 < 1)
                    {
                      v25 = 0;
                    }
                    else
                    {
                      v25 = 0;
                      while (v18[v25] == v24[v25])
                      {
                        if (v10 == ++v25)
                          goto LABEL_29;
                      }
                    }
                    if (v25 == v10)
                    {
LABEL_29:
                      SampleAudioPackDescriptors = getSampleAudioPackDescriptors(a2);
                      if (v10 < 1)
                      {
                        v40 = 0;
                      }
                      else
                      {
                        v26 = 0;
                        v27 = 0;
                        v28 = idx;
                        while (1)
                        {
                          v29 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(a1, v28);
                          v30 = CMSampleBufferGetNumSamples(v29);
                          v56 = v29;
                          v57 = getSampleAudioPackDescriptors(v29);
                          v31 = 0;
                          v32 = 0;
                          if (v28 == idx && v23)
                          {
                            v32 = 0;
                            for (i = 0; i != v23; ++i)
                              v32 += v49[i];
                            v31 = v23;
                          }
                          v52 = v28;
                          v34 = v30 + v27 - v31 <= v10 ? v30 : v10 - v27 + v31;
                          if (v31 < v34)
                            break;
                          v40 = v27;
LABEL_52:
                          v28 = v52 + 1;
                          v27 = v40;
                          v10 = v50;
                          if (v40 >= v50)
                            goto LABEL_56;
                        }
                        v35 = (size_t *)&v57[v31];
                        v36 = (size_t *)&SampleAudioPackDescriptors[v27];
                        while (1)
                        {
                          if ((unint64_t)v24[v27] >= 0x20)
                            v37 = 32;
                          else
                            v37 = v24[v27];
                          if (SampleAudioPackDescriptors)
                            v26 = *v36;
                          DataBuffer = CMSampleBufferGetDataBuffer(a2);
                          CMBlockBufferCopyDataBytes(DataBuffer, v26, v37, destination);
                          if (v57)
                            v32 = *v35;
                          v39 = CMSampleBufferGetDataBuffer(v56);
                          CMBlockBufferCopyDataBytes(v39, v32, v37, __s2);
                          if (memcmp(destination, __s2, v37))
                            break;
                          v40 = v27 + 1;
                          v41 = v24[v27];
                          v26 += v41;
                          v32 += v41;
                          ++v31;
                          v35 += 2;
                          v36 += 2;
                          ++v27;
                          if (v31 >= v34)
                            goto LABEL_52;
                        }
                        v40 = v27;
                        v10 = v50;
                      }
LABEL_56:
                      v18 = v45;
                      v11 = v46;
                      v22 = v47;
                      v19 = v48;
                      if (v40 == v10)
                      {
                        *v42 = idx;
                        *v43 = v23;
                        result = 1;
                        goto LABEL_62;
                      }
                    }
                    ++v23;
                    ++v24;
                    if (v23 == v22)
                    {
                      result = 0;
                      Count = v44;
                      goto LABEL_63;
                    }
                  }
                }
                result = 0;
LABEL_62:
                Count = v44;
                if (v23 == v22)
LABEL_63:
                  ++v11[1];
              }
              else
              {
                result = 0;
              }
              if (++idx >= Count)
                break;
              v19 += v22;
            }
            while (!(_DWORD)result);
          }
        }
      }
    }
  }
  return result;
}

uint64_t getSampleSizes(opaqueCMSampleBuffer *a1, unint64_t a2, size_t *a3)
{
  size_t *v3;
  uint64_t result;
  uint64_t v8;
  UInt32 *p_mDataByteSize;
  UInt32 v10;
  unsigned int v11;
  size_t packetDescriptionsSizeOut;
  AudioStreamPacketDescription *packetDescriptionsPointerOut;
  CMItemCount sizeArrayEntriesNeededOut;

  v3 = a3;
  sizeArrayEntriesNeededOut = 0;
  LODWORD(result) = CMSampleBufferGetSampleSizeArray(a1, a2, a3, &sizeArrayEntriesNeededOut);
  if ((_DWORD)result == -12735)
  {
    packetDescriptionsSizeOut = 0;
    packetDescriptionsPointerOut = 0;
    LODWORD(result) = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a1, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut);
    if (!(_DWORD)result)
    {
      sizeArrayEntriesNeededOut = packetDescriptionsSizeOut >> 4;
      if (packetDescriptionsSizeOut >> 4 == a2 && packetDescriptionsSizeOut >= 0x10)
      {
        if (a2 <= 1)
          v8 = 1;
        else
          v8 = a2;
        p_mDataByteSize = &packetDescriptionsPointerOut->mDataByteSize;
        do
        {
          v10 = *p_mDataByteSize;
          p_mDataByteSize += 4;
          *v3++ = v10;
          --v8;
        }
        while (v8);
      }
    }
  }
  if (sizeArrayEntriesNeededOut == a2)
    v11 = 0;
  else
    v11 = -12737;
  if ((_DWORD)result)
    return result;
  else
    return v11;
}

AudioStreamPacketDescription *getSampleAudioPackDescriptors(opaqueCMSampleBuffer *a1)
{
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  AudioStreamPacketDescription *result;
  AudioStreamPacketDescription *packetDescriptionsPointerOut;

  packetDescriptionsPointerOut = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  result = 0;
  if (MediaType == 1936684398)
  {
    CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a1, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, 0);
    return packetDescriptionsPointerOut;
  }
  return result;
}

BOOL FPSupport_AudioSamplesAreDiverse(opaqueCMSampleBuffer *a1)
{
  CMItemCount NumSamples;
  int64_t v3;
  AudioStreamPacketDescription *SampleAudioPackDescriptors;
  size_t *v5;
  int SampleSizes;
  void *v7;
  size_t mStartOffset;
  int v9;
  OpaqueCMBlockBuffer *DataBuffer;
  size_t *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  OpaqueCMBlockBuffer *v15;
  _BOOL4 v16;
  void *__s1;

  NumSamples = CMSampleBufferGetNumSamples(a1);
  if (NumSamples < 2)
  {
    v5 = 0;
    v7 = 0;
    v9 = -1;
    goto LABEL_25;
  }
  v3 = NumSamples;
  SampleAudioPackDescriptors = getSampleAudioPackDescriptors(a1);
  v5 = (size_t *)malloc_type_calloc(v3, 8uLL, 0x100004000313F17uLL);
  if (!v5)
  {
    SampleSizes = FigSignalErrorAt();
    goto LABEL_27;
  }
  SampleSizes = getSampleSizes(a1, v3, v5);
  if (SampleSizes)
  {
LABEL_27:
    v9 = SampleSizes;
    v7 = 0;
    goto LABEL_25;
  }
  v7 = malloc_type_malloc(*v5, 0x2FE44C0EuLL);
  if (v7)
  {
    if (SampleAudioPackDescriptors)
      mStartOffset = SampleAudioPackDescriptors->mStartOffset;
    else
      mStartOffset = 0;
    DataBuffer = CMSampleBufferGetDataBuffer(a1);
    v9 = CMBlockBufferCopyDataBytes(DataBuffer, mStartOffset, *v5, v7);
    if (!v9)
    {
      __s1 = v7;
      v11 = (size_t *)&SampleAudioPackDescriptors[1];
      v12 = 1;
      while (*v5 == v5[v12])
      {
        v13 = malloc_type_malloc(*v5, 0xD4F56B29uLL);
        if (v13)
        {
          v14 = v13;
          if (SampleAudioPackDescriptors)
            mStartOffset = *v11;
          v15 = CMSampleBufferGetDataBuffer(a1);
          v9 = CMBlockBufferCopyDataBytes(v15, mStartOffset, v5[v12], v14);
          if (v9)
            v16 = 1;
          else
            v16 = memcmp(__s1, v14, *v5) == 0;
          free(v14);
        }
        else
        {
          v16 = 1;
        }
        if (v12 + 1 < v3)
        {
          mStartOffset += v5[v12];
          v11 += 2;
          ++v12;
          if (v16)
            continue;
        }
        if (v16)
          v9 = -1;
        break;
      }
      v7 = __s1;
    }
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
LABEL_25:
  free(v7);
  free(v5);
  return v9 == 0;
}

void FPSupport_resetClosedCaptionLayer(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  v2 = *(const __CFArray **)(a1 + 8);
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      for (i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i), "resetCaptions");
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
  }
  JUMPOUT(0x19402EA24);
}

uint64_t FPSupport_updateClosedCaptionLayerBounds(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, CFIndex a7, _OWORD *a8, __int128 *a9)
{
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  const void *SInt32;
  const void *v27;
  CFTypeID TypeID;
  const __CFArray *Count;
  void *ValueAtIndex;
  double MidX;
  __int128 v32;
  __int128 v33;
  CFTypeRef cf[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CGRect rect;
  CGRect v40;
  CGRect v41;
  CGRect v42;

  rect.origin.x = a2;
  rect.origin.y = a3;
  rect.size.width = a4;
  rect.size.height = a5;
  if ((a7 & 0x8000000000000000) == 0)
  {
    v17 = *MEMORY[0x1E0C9D628];
    v18 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v19 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v20 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v41.origin.x = *(CGFloat *)MEMORY[0x1E0C9D628];
    v41.origin.y = v18;
    v41.size.width = v19;
    v41.size.height = v20;
    if (!CGRectEqualToRect(*(CGRect *)&a2, v41))
    {
      v21 = 0;
      if (a4 <= 0.0 || a5 <= 0.0)
        return v21;
    }
    if (a8)
    {
      v22 = a8[1];
      *(_OWORD *)(a1 + 64) = *a8;
      *(_OWORD *)(a1 + 80) = v22;
    }
    if (a9)
    {
      v23 = *a9;
      v24 = a9[1];
      v25 = a9[3];
      *(_OWORD *)(a1 + 128) = a9[2];
      *(_OWORD *)(a1 + 144) = v25;
      *(_OWORD *)(a1 + 96) = v23;
      *(_OWORD *)(a1 + 112) = v24;
    }
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_QWORD *)(a1 + 8))
    {
      v40.origin.x = a2;
      v40.origin.y = a3;
      v40.size.width = a4;
      v40.size.height = a5;
      v42.origin.x = v17;
      v42.origin.y = v18;
      v42.size.width = v19;
      v42.size.height = v20;
      if (CGRectEqualToRect(v40, v42))
      {
        cf[0] = 0;
        if (*(_QWORD *)(a1 + 40))
        {
          SInt32 = (const void *)FigCFNumberCreateSInt32();
          if (SInt32)
          {
            v27 = SInt32;
            if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 40), SInt32, cf))
            {
              TypeID = CFDictionaryGetTypeID();
              if (TypeID == CFGetTypeID(cf[0])
                && !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)cf[0], &rect))
              {
                FigSignalErrorAt();
              }
            }
            CFRelease(v27);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
      }
      else
      {
        storeClosedCaptionLayerBoundsInCacheForLayerIndex(a1, a2, a3, a4, a5);
      }
      Count = *(const __CFArray **)(a1 + 8);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if ((uint64_t)Count <= a7)
      {
        v21 = 4294954436;
        goto LABEL_28;
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1, cf[0]);
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a7);
      MidX = CGRectGetMidX(rect);
      objc_msgSend(ValueAtIndex, "setPosition:", MidX, CGRectGetMidY(rect));
      objc_msgSend(ValueAtIndex, "setBounds:", rect.origin.x, rect.origin.y, rect.size.width, rect.size.height);
      objc_msgSend(ValueAtIndex, "setVideoRelativeToViewport:", *(double *)(a1 + 64), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88));
      v32 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)cf = *(_OWORD *)(a1 + 96);
      v36 = v32;
      v33 = *(_OWORD *)(a1 + 144);
      v37 = *(_OWORD *)(a1 + 128);
      v38 = v33;
      objc_msgSend(ValueAtIndex, "setCaptionsAvoidanceMargins:", cf);
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
    else
    {
      storeClosedCaptionLayerBoundsInCacheForLayerIndex(a1, a2, a3, a4, a5);
    }
    v21 = 0;
LABEL_28:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    return v21;
  }
  return FigSignalErrorAt();
}

void storeClosedCaptionLayerBoundsInCacheForLayerIndex(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CFMutableDictionaryRef Mutable;
  uint64_t SInt32;
  const void *v12;
  CFDictionaryRef DictionaryRepresentation;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  CGRect v16;

  if ((*(_QWORD *)(a1 + 40)
     || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a1 + 40) = Mutable) != 0))&& (SInt32 = FigCFNumberCreateSInt32()) != 0)
  {
    v12 = (const void *)SInt32;
    v16.origin.x = a2;
    v16.origin.y = a3;
    v16.size.width = a4;
    v16.size.height = a5;
    DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v16);
    if (DictionaryRepresentation)
    {
      v14 = DictionaryRepresentation;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v12, DictionaryRepresentation);
      CFRelease(v12);
      v15 = v14;
    }
    else
    {
      FigSignalErrorAt();
      v15 = (CFDictionaryRef)v12;
    }
    CFRelease(v15);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FPSupport_setClosedCaptionLayerOptions(uint64_t a1, uint64_t a2, CFIndex a3, const void *a4, const void *a5)
{
  const __CFArray *v9;
  __CFDictionary *Mutable;
  uint64_t v11;

  if ((a3 & 0x8000000000000000) == 0)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    v9 = *(const __CFArray **)(a1 + 8);
    if (v9)
    {
      if (CFArrayGetCount(v9) <= a3)
      {
        v11 = 4294954436;
LABEL_12:
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        return v11;
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a3), "setOptions:forKeyPath:", a5, a4);
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
    else
    {
      *(_BYTE *)(a1 + 56) = 1;
    }
    Mutable = *(__CFDictionary **)(a1 + 48);
    if (Mutable
      || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a1 + 48) = Mutable) != 0))
    {
      CFDictionarySetValue(Mutable, a4, a5);
      v11 = 0;
    }
    else
    {
      v11 = FigSignalErrorAt();
    }
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_setClosedCaptionLayerSeparated(uint64_t a1, uint64_t a2, CFIndex a3, int a4)
{
  const __CFArray *v7;
  __CFDictionary *Mutable;
  const void **v9;
  uint64_t v10;

  if ((a3 & 0x8000000000000000) == 0)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    v7 = *(const __CFArray **)(a1 + 8);
    if (v7)
    {
      if (CFArrayGetCount(v7) <= a3)
      {
        v10 = 4294954436;
LABEL_14:
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        return v10;
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), a3), "setSeparatedValue:", a4 != 0);
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
    else
    {
      *(_BYTE *)(a1 + 56) = 1;
    }
    Mutable = *(__CFDictionary **)(a1 + 48);
    if (Mutable
      || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]), (*(_QWORD *)(a1 + 48) = Mutable) != 0))
    {
      v9 = (const void **)MEMORY[0x1E0C9AE50];
      if (!a4)
        v9 = (const void **)MEMORY[0x1E0C9AE40];
      CFDictionarySetValue(Mutable, CFSTR("setSeparated"), *v9);
      v10 = 0;
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    goto LABEL_14;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_updateClosedCaptionLayer(uint64_t a1, const __CFArray *a2)
{
  void *v4;
  CFIndex Count;
  uint64_t v6;
  const __CFArray *v7;
  CFIndex i;
  void *ValueAtIndex;
  int v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  const __CFArray *v21;
  CFIndex v22;
  const __CFArray *Mutable;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  CFIndex v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  const void *v34;
  uint64_t v35;

  v4 = (void *)MEMORY[0x19403137C]();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 2)
    || (!a2 ? (Count = 0) : (Count = CFArrayGetCount(a2)),
        *(int *)(a1 + 24) <= 0 ? (v6 = Count) : (v6 = *(unsigned int *)(a1 + 24)),
        v6 < 1))
  {
    cleanupClosedCaptionLayer(a1);
  }
  v7 = *(const __CFArray **)(a1 + 8);
  if (v7)
    v7 = (const __CFArray *)CFArrayGetCount(v7);
  if (v7 != (const __CFArray *)v6)
    cleanupClosedCaptionLayer(a1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  for (i = 0; i != v6; ++i)
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
    objc_msgSend(ValueAtIndex, "resetCaptions");
    objc_msgSend(ValueAtIndex, "removeFromSuperlayer");
  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  v10 = *(_DWORD *)(a1 + 24);
  if (v10 < 1)
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    v13 = 0;
    v14 = *MEMORY[0x1E0C9D628];
    v15 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v16 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v17 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    do
    {
      v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v13);
      objc_msgSend((id)CFArrayGetValueAtIndex(a2, v13), "addSublayer:", v18);
      FPSupport_updateClosedCaptionLayerBounds(a1, v14, v15, v16, v17, v19, v13++, 0, 0);
    }
    while (v6 != v13);
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    FPSupport_cleanupClosedCaptionHostLayerArraySupport(a1);
  }
  else
  {
    v11 = *(const __CFArray **)(a1 + 32);
    if (v11)
    {
      v11 = (const __CFArray *)CFArrayGetCount(v11);
      v10 = *(_DWORD *)(a1 + 24);
    }
    if ((uint64_t)v11 <= v10)
    {
      v21 = *(const __CFArray **)(a1 + 32);
      if (v21)
      {
        v21 = (const __CFArray *)CFArrayGetCount(v21);
        v22 = *(int *)(a1 + 24);
      }
      else
      {
        v22 = v10;
      }
      if ((uint64_t)v21 < v22)
      {
        Mutable = *(const __CFArray **)(a1 + 32);
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v22, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(a1 + 32) = Mutable;
        }
        v24 = *MEMORY[0x1E0CD2A20];
        v25 = *MEMORY[0x1E0C9AE50];
        v26 = *MEMORY[0x1E0CD2A40];
        if (Mutable)
LABEL_45:
          Mutable = (const __CFArray *)CFArrayGetCount(Mutable);
        while ((uint64_t)Mutable < *(int *)(a1 + 24))
        {
          v27 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjectsAndKeys:", CFSTR("FigPlayer_CC_CAContext"), v24, v25, v26, 0);
          v28 = (const void *)objc_msgSend(MEMORY[0x1E0CD28E0], "contextWithOptions:", v27);
          if (!v28)
          {
            v20 = FigSignalErrorAt();
            if ((_DWORD)v20)
              cleanupClosedCaptionLayer(a1);
            goto LABEL_57;
          }
          CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v28);
          Mutable = *(const __CFArray **)(a1 + 32);
          if (Mutable)
            goto LABEL_45;
        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
      while (1)
      {
        v12 = *(const __CFArray **)(a1 + 32);
        if (v12)
          v12 = (const __CFArray *)CFArrayGetCount(v12);
        if ((uint64_t)v12 <= *(int *)(a1 + 24))
          break;
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), 0);
      }
      objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    if (*(int *)(a1 + 24) >= 1)
    {
      v29 = 0;
      v30 = *MEMORY[0x1E0C9D628];
      v31 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v32 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v33 = *(double *)(MEMORY[0x1E0C9D628] + 24);
      do
      {
        v34 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v29);
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v29), "setLayer:", v34);
        FPSupport_updateClosedCaptionLayerBounds(a1, v30, v31, v32, v33, v35, v29++, 0, 0);
      }
      while (v29 < *(int *)(a1 + 24));
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  v20 = 0;
LABEL_57:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  objc_autoreleasePoolPop(v4);
  return v20;
}

void cleanupClosedCaptionLayer(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex i;
  const void *v5;
  __CFDictionary *v6;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  v2 = *(const __CFArray **)(a1 + 8);
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
      objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i), "removeFromSuperlayer");
  }
  v5 = *(const void **)(a1 + 8);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 8) = 0;
  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  FPSupport_cleanupClosedCaptionHostLayerArraySupport(a1);
  v6 = *(__CFDictionary **)(a1 + 40);
  if (v6)
    CFDictionaryRemoveAllValues(v6);
  JUMPOUT(0x19402EA24);
}

void FPSupport_cleanupClosedCaptionHostLayerArraySupport(uint64_t a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)MEMORY[0x19403137C]();
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  objc_autoreleasePoolPop(v2);
}

uint64_t FPSupport_AppendDeferredTransactionChangeForUpdatingHostLayersInLayers(const void *a1, const __CFArray *a2, CFArrayRef theArray, const __CFArray *a4, uint64_t a5)
{
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  _QWORD *v12;
  uint64_t v13;

  if (!theArray)
  {
    Count = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v10 = CFArrayGetCount(a4);
LABEL_6:
  if (v10 != Count)
    return FigSignalErrorAt();
  v11 = a2 ? CFArrayGetCount(a2) : 0;
  if (v11 != Count)
    return FigSignalErrorAt();
  v12 = malloc_type_malloc(0x18uLL, 0x6004045F868BCuLL);
  if (!v12)
    return FigSignalErrorAt();
  v13 = (uint64_t)v12;
  *v12 = FigCFArrayCreateCopy();
  *(_QWORD *)(v13 + 8) = FigCFArrayCreateCopy();
  *(_QWORD *)(v13 + 16) = FigCFArrayCreateCopy();
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a5, v13, (uint64_t)fps_disposeCallUpdateHostLayersInLayers, (uint64_t)fps_copyDescriptionForCallUpdateHostLayersInLayers, (uint64_t)fps_callUpdateHostLayersInLayers);
}

void fps_disposeCallUpdateHostLayersInLayers(const void **a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  v4 = a1[2];
  if (v4)
    CFRelease(v4);
  free(a1);
}

__CFString *fps_copyDescriptionForCallUpdateHostLayersInLayers()
{
  __CFString *Mutable;
  const void *v1;
  const void *v2;
  const void *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = (const void *)FigCFCopyCompactDescription();
  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("Update Host Layer Array %@ with ContextID Array %@ and insert in Client Layer Array %@"), v2, v1, v3);
  if (v1)
    CFRelease(v1);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  return Mutable;
}

uint64_t fps_callUpdateHostLayersInLayers(uint64_t a1)
{
  void *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  void *ValueAtIndex;

  v2 = (void *)MEMORY[0x19403137C]();
  v3 = *(const __CFArray **)(a1 + 8);
  if (v3)
  {
    Count = CFArrayGetCount(v3);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        FigCFArrayGetInt32AtIndex();
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), i);
        objc_msgSend(ValueAtIndex, "setContextId:", 0);
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), i), "addSublayer:", ValueAtIndex);
      }
    }
  }
  objc_autoreleasePoolPop(v2);
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForRemovingEachLayerInArrayFromItsSuperlayer(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = malloc_type_malloc(8uLL, 0x6004044C4A2DFuLL);
  if (!v5)
    return FigSignalErrorAt();
  v6 = (uint64_t)v5;
  *v5 = FigCFArrayCreateCopy();
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v6, (uint64_t)fps_disposeCallRemoveEachLayerInArrayFromItsSuperLayer, (uint64_t)fps_copyDescriptionForCallRemoveEachLayerInArrayFromItsSuperLayer, (uint64_t)fps_callRemoveEachLayerInArrayFromItsSuperLayer);
}

void fps_disposeCallRemoveEachLayerInArrayFromItsSuperLayer(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForCallRemoveEachLayerInArrayFromItsSuperLayer()
{
  __CFString *Mutable;
  const void *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("Remove Layers From Their Superlayers: %@"), v1);
  if (v1)
    CFRelease(v1);
  return Mutable;
}

uint64_t fps_callRemoveEachLayerInArrayFromItsSuperLayer(CFArrayRef *a1)
{
  void *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;

  v2 = (void *)MEMORY[0x19403137C]();
  if (*a1)
  {
    Count = CFArrayGetCount(*a1);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*a1, i), "removeFromSuperlayer");
    }
  }
  objc_autoreleasePoolPop(v2);
  return 0;
}

uint64_t FPSupport_createRenderPipelineOptions(const __CFAllocator *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, const void *a6, int a7, int a8, char a9, char a10, const void *a11, char a12, char a13, char a14, int a15, char a16, void *value, char a18, void *a19, __CFDictionary **a20)
{
  __CFDictionary *Mutable;
  __CFDictionary *v28;
  const void **v29;
  signed int MediaSubType;
  unsigned __int16 v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;

  Mutable = CFDictionaryCreateMutable(a1, 20, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v28 = Mutable;
  v29 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a2)
    goto LABEL_15;
  CFDictionarySetValue(Mutable, CFSTR("FormatDescription"), a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)a2);
  if (MediaSubType <= 1634743415)
  {
    if (MediaSubType != 1634742376 && MediaSubType != 1634742888)
    {
      v31 = 13416;
LABEL_10:
      if (MediaSubType != (v31 | 0x61700000))
        goto LABEL_15;
    }
  }
  else if (((MediaSubType - 1634755432) > 0xB || ((1 << (MediaSubType - 104)) & 0x8C1) == 0)
         && ((MediaSubType - 1634759272) > 6 || ((1 << (MediaSubType - 104)) & 0x51) == 0))
  {
    v31 = 13432;
    goto LABEL_10;
  }
  if (FigVideoFormatDescriptionContainsAlphaChannel())
    CFDictionarySetValue(v28, CFSTR("InhibitCompressedBufferUse"), *v29);
LABEL_15:
  if ((*(_DWORD *)(a4 + 12) & 0x1D) == 1)
    FigCFDictionarySetCMTime();
  if ((*(_DWORD *)(a5 + 12) & 0x1D) == 1)
    FigCFDictionarySetCMTime();
  if (a3)
    FigCFDictionarySetInt32();
  v32 = *v29;
  if (a7)
    CFDictionarySetValue(v28, CFSTR("AllowAudibleContent"), *v29);
  if (a8)
    CFDictionarySetValue(v28, CFSTR("AllowAMRDecode"), v32);
  if (a12)
    CFDictionarySetValue(v28, CFSTR("AllowAtmosDecode"), v32);
  if (a13)
    CFDictionarySetValue(v28, CFSTR("EnableSpatialization"), v32);
  if (a14)
    CFDictionarySetValue(v28, CFSTR("AudioOnly"), v32);
  v33 = (const void *)*MEMORY[0x1E0C9AE40];
  if (a9)
    v34 = v32;
  else
    v34 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v28, CFSTR("HardwarePassthrough"), v34);
  if (a10)
    v35 = v32;
  else
    v35 = v33;
  CFDictionarySetValue(v28, CFSTR("DisallowMultiplePlayResources"), v35);
  if (a16)
    v36 = v32;
  else
    v36 = v33;
  CFDictionarySetValue(v28, CFSTR("AutomaticallyRestartsAfterConfigurationChange"), v36);
  if (a6)
    CFDictionarySetValue(v28, CFSTR("AudioDeviceUID"), a6);
  if (a11)
    CFDictionarySetValue(v28, CFSTR("SharePixelBufferPool"), a11);
  if (value)
    CFDictionarySetValue(v28, CFSTR("AudioSession"), value);
  if (a19)
    CFDictionarySetValue(v28, CFSTR("LoggingID"), a19);
  if (a15)
    FigCFDictionarySetInt32();
  if (a18)
    FigCFDictionarySetBoolean();
  *a20 = v28;
  if (v28)
    return 0;
  else
    return FigSignalErrorAt();
}

double FPSupport_getVideoDecodeWaterLevels(CMTime *a1, CMTime *a2, int a3)
{
  int64_t v5;
  int32_t v6;
  double result;
  CMTime v8;
  CMTime v9;

  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v8 = v9;
  if (a3)
  {
    CMTimeMake(&v8, 3, 30);
    v5 = 5;
    v6 = 30;
  }
  else
  {
    CMTimeMake(&v8, 5, 300);
    v5 = 25;
    v6 = 300;
  }
  CMTimeMake(&v9, v5, v6);
  CelestialCustomizePlaybackImageQueueLevels();
  *a1 = v8;
  result = *(double *)&v9.value;
  *a2 = v9;
  return result;
}

double FPSupport_getDataQueueWaterLevels(CMTime *a1, CMTime *a2)
{
  double result;
  CMTime v5;
  CMTime v6;

  memset(&v6, 0, sizeof(v6));
  CMTimeMake(&v6, 100, 1000);
  memset(&v5, 0, sizeof(v5));
  CMTimeMake(&v5, 200, 1000);
  if (a1)
  {
    result = *(double *)&v6.value;
    *a1 = v6;
  }
  if (a2)
  {
    result = *(double *)&v5.value;
    *a2 = v5;
  }
  return result;
}

uint64_t FPSupport_createVideoRenderPipeline(int a1, const void *a2, int a3, const __CFArray *a4, const __CFArray *a5, int a6, const void *a7, int a8, char a9, const void *a10, const void *a11, int a12, char a13, void *a14, CFTypeRef *a15)
{
  const __CFAllocator *v20;
  uint64_t v21;
  __CFDictionary *v22;
  __CFDictionary *MutableCopy;
  uint64_t v24;
  uint64_t v25;
  uint64_t FigBaseObject;
  void (*v27)(uint64_t, const __CFString *, _QWORD);
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  __CFDictionary *v35;

  v35 = 0;
  memset(&v34, 0, sizeof(v34));
  memset(&v33, 0, sizeof(v33));
  FPSupport_getVideoDecodeWaterLevels(&v34, &v33, a6);
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v32 = v34;
  v31 = v33;
  v21 = FPSupport_createRenderPipelineOptions(v20, a7, a8, (uint64_t)&v32, (uint64_t)&v31, 0, 0, 0, 0, 0, a11, 0, 0, 0, a12, 1, 0, a13, a14,
          &v35);
  if ((_DWORD)v21)
    return v21;
  v22 = v35;
  if (a9)
  {
    MutableCopy = CFDictionaryCreateMutableCopy(v20, 0, v35);
    CFDictionarySetValue(MutableCopy, CFSTR("NeroVideoMode"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (a4 && CFArrayGetCount(a4) >= 1)
      v24 = FigOctaviaVideoRenderPipelineCreateWithFigImageQueueArray(v20, MutableCopy, a4, a5, a1, a2, 0, a3, a10, a15);
    else
      v24 = FigOctaviaVideoRenderPipelineCreate((uint64_t)v20, (uint64_t)MutableCopy, a10, a15);
    v25 = v24;
    if (MutableCopy)
      CFRelease(MutableCopy);
    if ((_DWORD)v25)
      goto LABEL_14;
    goto LABEL_12;
  }
  v25 = FigVideoRenderPipelineCreateWithFigImageQueueArray(v20, a1, a2, 0, a3, a4, a5, v35, a15);
  if (!(_DWORD)v25)
  {
LABEL_12:
    FigBaseObject = FigRenderPipelineGetFigBaseObject(*a15);
    v27 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v27)
      v27(FigBaseObject, CFSTR("VideoEnqueueResetsSystemSleepTimer"), *MEMORY[0x1E0C9AE50]);
  }
LABEL_14:
  if (v22)
    CFRelease(v22);
  return v25;
}

uint64_t FPSupport_initializeClosedCaptions(uint64_t a1)
{
  uint64_t result;

  result = FigReentrantMutexCreate();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void FPSupport_releaseClosedCaptions(uint64_t a1)
{
  cleanupClosedCaptionLayer(a1);
}

void sub_192B31924()
{
  _QWORD *v0;
  const void *v1;
  const void *v2;

  if (v0[2])
  {
    FigSimpleMutexDestroy();
    v0[2] = 0;
  }
  v1 = (const void *)v0[6];
  if (v1)
  {
    CFRelease(v1);
    v0[6] = 0;
  }
  v2 = (const void *)v0[5];
  if (v2)
  {
    CFRelease(v2);
    v0[5] = 0;
  }
}

id FPSupport_CopyDictionaryDescriptionAsCFString(id result)
{
  void *v1;
  void *v2;
  id v3;

  if (result)
  {
    v1 = result;
    v2 = (void *)MEMORY[0x19403137C]();
    v3 = (id)objc_msgSend(v1, "description");
    objc_autoreleasePoolPop(v2);
    return v3;
  }
  return result;
}

__CFDictionary *FPSupport_CreateNotificationPayloadForProperties(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v7;
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  uint64_t i;
  const void *v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const void *, const __CFAllocator *, void **);
  int v14;
  void *v15;
  BOOL v16;
  unsigned int (*v17)(uint64_t, CMTime *);
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const void *, const __CFAllocator *, void **);
  int v22;
  void *v23;
  BOOL v24;
  void (*v25)(uint64_t, CMTime *);
  CFDictionaryRef v26;
  unsigned int (*v27)(uint64_t, CMTime *, CMTime *);
  uint64_t v28;
  uint64_t (*v29)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *);
  int v30;
  const void *v31;
  int v32;
  CFDictionaryRef DictionaryRepresentation;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  void *v36;
  CMTime time;
  CMTime BOOLean;
  void *value;
  _QWORD v41[42];
  _QWORD v42[8];
  CFRange v43;
  CFRange v44;
  CFRange v45;
  CFRange v46;
  CFRange v47;
  CFRange v48;
  CGSize v49;

  v42[6] = *MEMORY[0x1E0C80C00];
  value = 0;
  Count = CFArrayGetCount(theArray);
  v42[0] = CFSTR("ExternalProtectionStatus");
  v42[1] = CFSTR("CurrentExternalProtectionStatus");
  v42[2] = CFSTR("IsNeroPlaybackActive");
  v42[3] = CFSTR("CurrentIsNeroPlaybackActive");
  v42[4] = CFSTR("DisplayingClosedCaptions");
  v42[5] = CFSTR("CurrentDisplayingClosedCaptions");
  v41[0] = CFSTR("CanPlayFastForward");
  v41[1] = CFSTR("CurrentCanPlayFastForward");
  v41[2] = CFSTR("CanPlayFastReverse");
  v41[3] = CFSTR("CurrentCanPlayFastReverse");
  v41[4] = CFSTR("CanPlayReverse");
  v41[5] = CFSTR("CurrentCanPlayReverse");
  v41[6] = CFSTR("SupportsFrameStepping");
  v41[7] = CFSTR("CurrentSupportsFrameStepping");
  v41[8] = CFSTR("PlayableTimeIntervals");
  v41[9] = CFSTR("CurrentPlayableTimeIntervals");
  v41[10] = CFSTR("SeekableTimeIntervals");
  v41[11] = CFSTR("CurrentSeekableTimeIntervals");
  v41[12] = CFSTR("EndTime");
  v41[13] = CFSTR("ItemEndTime");
  v41[14] = CFSTR("TrackIDArray");
  v41[15] = CFSTR("CurrentTrackIDArray");
  v41[16] = CFSTR("HasEnabledAudio");
  v41[17] = CFSTR("HasEnabledAudio");
  v41[18] = CFSTR("HasEnabledVideo");
  v41[19] = CFSTR("HasEnabledVideo");
  v41[20] = CFSTR("HasDiscoveredVideo");
  v41[21] = CFSTR("HasDiscoveredVideo");
  v41[22] = CFSTR("TaggedRangeMetadataArray");
  v41[23] = CFSTR("CurrentTaggedRangeMetadataArray");
  v41[24] = CFSTR("DisplayNonForcedSubtitles");
  v41[25] = CFSTR("CurrentDisplayNonForcedSubtitles");
  v41[26] = CFSTR("RecommendedTimeOffsetFromLive");
  v41[27] = CFSTR("CurrentRecommendedTimeOffsetFromLive");
  v41[28] = CFSTR("TimeOffsetFromLive");
  v41[29] = CFSTR("CurrentConfiguredTimeOffsetFromLive");
  v41[30] = CFSTR("VideoTrackMatrix");
  v41[31] = CFSTR("CurrentVideoTrackMatrix");
  v41[32] = CFSTR("SelectedMediaArray");
  v41[33] = CFSTR("CurrentSelectedMediaArray");
  v41[34] = CFSTR("IsRenderingSpatialAudio");
  v41[35] = CFSTR("RenderingSpatialAudio");
  v41[36] = CFSTR("CurrentStableVariantID");
  v41[37] = CFSTR("CurrentStableVariantID");
  v41[38] = CFSTR("CoordinationIdentifier");
  v41[39] = CFSTR("CoordinationIdentifier");
  v41[40] = CFSTR("BufferState");
  v41[41] = CFSTR("CurrentBufferState");
  if (!a1)
    return 0;
  v7 = Count;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return Mutable;
  for (i = 0; i != 6; i += 2)
  {
    v11 = (const void *)v42[i];
    v43.location = 0;
    v43.length = v7;
    if (!CFArrayContainsValue(theArray, v43, v11))
      continue;
    FigBaseObject = FigPlayerGetFigBaseObject(a1);
    v13 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (!v13)
      goto LABEL_11;
    v14 = v13(FigBaseObject, v11, v8, &value);
    v15 = value;
    if (v14)
      v16 = 1;
    else
      v16 = value == 0;
    if (!v16)
    {
      CFDictionarySetValue(Mutable, (const void *)v42[i + 1], value);
LABEL_11:
      v15 = value;
    }
    if (v15)
    {
      CFRelease(v15);
      value = 0;
    }
  }
  v44.location = 0;
  v44.length = v7;
  if (CFArrayContainsValue(theArray, v44, CFSTR("CurrentRate")))
  {
    LODWORD(BOOLean.value) = 0;
    v17 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v17)
    {
      if (!v17(a1, &BOOLean))
        FigCFDictionarySetFloat32();
    }
  }
  if (!a2)
    return Mutable;
  v18 = 0;
  while (2)
  {
    v19 = (const void *)v41[v18];
    v45.location = 0;
    v45.length = v7;
    if (CFArrayContainsValue(theArray, v45, v19))
    {
      v20 = FigPlaybackItemGetFigBaseObject(a2);
      v21 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
      if (!v21)
        goto LABEL_28;
      v22 = v21(v20, v19, v8, &value);
      v23 = value;
      if (v22)
        v24 = 1;
      else
        v24 = value == 0;
      if (!v24)
      {
        CFDictionarySetValue(Mutable, (const void *)v41[v18 + 1], value);
LABEL_28:
        v23 = value;
      }
      if (v23)
      {
        CFRelease(v23);
        value = 0;
      }
    }
    v18 += 2;
    if (v18 != 42)
      continue;
    break;
  }
  v46.location = 0;
  v46.length = v7;
  if (CFArrayContainsValue(theArray, v46, CFSTR("CurrentDuration")))
  {
    BOOLean = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    v25 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v25)
      v25(a2, &BOOLean);
    if ((BOOLean.flags & 1) != 0)
    {
      time = BOOLean;
      v26 = CMTimeCopyAsDictionary(&time, v8);
      value = v26;
      if (v26)
      {
        CFDictionarySetValue(Mutable, CFSTR("CurrentDuration"), v26);
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
      }
    }
  }
  v47.location = 0;
  v47.length = v7;
  if (CFArrayContainsValue(theArray, v47, CFSTR("CurrentDimensions")))
  {
    LODWORD(BOOLean.value) = 0;
    LODWORD(time.value) = 0;
    v27 = *(unsigned int (**)(uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v27)
    {
      if (!v27(a2, &BOOLean, &time))
      {
        v49.width = *(float *)&BOOLean.value;
        v49.height = *(float *)&time.value;
        DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v49);
        value = DictionaryRepresentation;
        if (DictionaryRepresentation)
        {
          CFDictionarySetValue(Mutable, CFSTR("CurrentDimensions"), DictionaryRepresentation);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
      }
    }
  }
  v48.location = 0;
  v48.length = v7;
  if (CFArrayContainsValue(theArray, v48, CFSTR("VideoSlotArray")))
  {
    BOOLean.value = 0;
    v28 = FigPlaybackItemGetFigBaseObject(a2);
    v29 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
    if (v29)
    {
      v30 = v29(v28, CFSTR("HasEnabledVideo"), v8, &BOOLean);
      v31 = (const void *)BOOLean.value;
      if (v30)
      {
        v32 = 0;
        if (!BOOLean.value)
          goto LABEL_53;
LABEL_52:
        CFRelease(v31);
      }
      else
      {
        v32 = CFBooleanGetValue((CFBooleanRef)BOOLean.value);
        v31 = (const void *)BOOLean.value;
        if (BOOLean.value)
          goto LABEL_52;
      }
    }
    else
    {
      v32 = 0;
    }
LABEL_53:
    v34 = FigPlaybackItemGetFigBaseObject(a2);
    v35 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v35 && !v35(v34, CFSTR("VideoSlotArray"), v8, &value))
    {
      v36 = value;
      if (!value)
        return Mutable;
    }
    else
    {
      if (!v32)
        return Mutable;
      v36 = value;
      if (!value)
      {
        v36 = CFArrayCreate(v8, 0, 0, MEMORY[0x1E0C9B378]);
        value = v36;
        if (!v36)
          return Mutable;
      }
    }
    CFDictionarySetValue(Mutable, CFSTR("CurrentVideoSlotArray"), v36);
    if (value)
      CFRelease(value);
  }
  return Mutable;
}

uint64_t FPSupport_GetMaxDisplaySizeFromImageQueues(const __CFArray *a1, double *a2)
{
  CGSize *v3;
  double width;
  double height;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  const void *ValueAtIndex;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  int v14;
  CFDictionaryRef v15;
  BOOL v16;
  CGSize v18;
  CGSize size;
  CFDictionaryRef dict;

  v3 = (CGSize *)MEMORY[0x1E0C9D820];
  width = *MEMORY[0x1E0C9D820];
  height = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    dict = 0;
    if (a2)
    {
      v8 = Count;
      if (Count >= 1)
      {
        v9 = 0;
        v10 = *MEMORY[0x1E0C9AE00];
        v18 = *v3;
        while (1)
        {
          size = v18;
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
          FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
          v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
          if (v13)
          {
            v14 = v13(FigBaseObject, CFSTR("FigImageQueueProperty_DisplaySize"), v10, &dict);
            v15 = dict;
            if (v14)
              v16 = 1;
            else
              v16 = dict == 0;
            if (v16)
              goto LABEL_14;
            if (CGSizeMakeWithDictionaryRepresentation(dict, &size) && size.width * size.height > width * height)
            {
              width = size.width;
              height = size.height;
            }
          }
          v15 = dict;
LABEL_14:
          if (v15)
          {
            CFRelease(v15);
            dict = 0;
          }
          if (v8 == ++v9)
            goto LABEL_19;
        }
      }
      goto LABEL_19;
    }
  }
  else if (a2)
  {
LABEL_19:
    *a2 = width;
    a2[1] = height;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateSetRateOptions(const __CFAllocator *a1, uint64_t a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  uint64_t v6;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (!a3)
  {
    v6 = FigSignalErrorAt();
    if (v5)
      CFRelease(v5);
    return v6;
  }
  if (Mutable)
  {
    FigCFDictionarySetInt32();
    v6 = 0;
    *a3 = v5;
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_SetTransientTimebaseForCoordinatedPlaybackSynchronization(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  CMTimebaseRef v11;
  BOOL v12;
  CMClockRef HostTimeClock;
  CMTimebaseRef v14;
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, CMTimebaseRef);
  CMTime v18;
  CMTime time;
  CMTime v20;
  CMClockRef clockOut;
  CMTimebaseRef timebaseOut;

  timebaseOut = 0;
  clockOut = 0;
  if (!a1)
    return FigSignalErrorAt();
  if ((*(_BYTE *)(a2 + 12) & 1) != 0 && (*(_BYTE *)(a3 + 12) & 1) != 0)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = CMAudioClockCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &clockOut);
    if (!(_DWORD)v9)
    {
      v10 = CMTimebaseCreateWithSourceClock(v8, clockOut, &timebaseOut);
      v11 = timebaseOut;
      if ((_DWORD)v10)
        v12 = 1;
      else
        v12 = timebaseOut == 0;
      if (!v12)
      {
        memset(&v20, 0, sizeof(v20));
        HostTimeClock = CMClockGetHostTimeClock();
        time = *(CMTime *)a3;
        CMSyncConvertTime(&v20, &time, HostTimeClock, clockOut);
        time = *(CMTime *)a2;
        v18 = v20;
        CMTimebaseSetRateAndAnchorTime(timebaseOut, a4, &time, &v18);
        v14 = timebaseOut;
        FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
        v16 = *(uint64_t (**)(uint64_t, const __CFString *, CMTimebaseRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
        if (v16)
          v10 = v16(FigBaseObject, CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization"), v14);
        else
          v10 = 4294954514;
        v11 = timebaseOut;
      }
      if (v11)
        CFRelease(v11);
      goto LABEL_15;
    }
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
  v10 = v9;
LABEL_15:
  if (clockOut)
    CFRelease(clockOut);
  return v10;
}

uint64_t FPSupport_ConfigSnapRateForLQZL(float *a1, float *a2, float a3)
{
  uint64_t v3;
  float v4;
  float v5;
  double v6;

  v3 = 0;
  v4 = fabsf(a3);
  v5 = 1.0;
  if (a3 != 0.0)
  {
    v5 = v4;
    v6 = v4;
    if (v4 <= 2.1)
    {
      v5 = 2.0;
      if (v4 <= 1.75)
      {
        v5 = 1.5;
        if (v4 <= 1.375)
        {
          v5 = 1.25;
          if (v4 <= 1.125)
          {
            v5 = 1.0;
            if (v6 <= 0.9)
            {
              if (v6 <= 0.733)
              {
                v5 = 0.66667;
                if (v6 <= 0.583)
                  v5 = 0.5;
              }
              else
              {
                v5 = 0.8;
              }
            }
          }
        }
      }
      if (a3 < 0.0)
        a3 = -v5;
      else
        a3 = v5;
      v3 = 1;
    }
  }
  if (a1)
    *a1 = v5;
  if (a2)
    *a2 = a3;
  return v3;
}

const __CFString *FPSupport_GetPowerStateNotificationSingleton()
{
  +[FPSupport_PowerStateSingleton sharedFPSupportPowerStateSingleton](FPSupport_PowerStateSingleton, "sharedFPSupportPowerStateSingleton");
  return CFSTR("PowerStateNotificationSingleton");
}

uint64_t FPSupport_IsInLowPowerMode()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "isLowPowerModeEnabled");
}

const __CFString *FPSupport_GetDisplayVideoRangeNotificationSingleton()
{
  +[FPSupport_VideoRangeSingleton sharedFPSupportSingleton](FPSupport_VideoRangeSingleton, "sharedFPSupportSingleton");
  return CFSTR("DisplayVideoRangeNotificationSingleton");
}

const char *FPSupport_GetModeString(int a1)
{
  if ((a1 - 1) > 4)
    return "Unknown";
  else
    return off_1E2F88630[a1 - 1];
}

void FPSupport_GetCurrentDisplayModeVideoRangeAndSizeAndFrameRate(const __CFArray *a1, _DWORD *a2, double *a3, double *a4)
{
  uint64_t Count;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t i;
  void *v17;
  CFIndex v18;
  const void *v19;
  int v20;
  int VideoRangeForMode;
  int v22;
  double v23;
  double v24;
  unint64_t v25;
  double v26;
  void *context;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;
  CFRange v37;

  v36 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  Count = fig_note_initialize_category_with_default_work_cf();
  if (a1)
  {
    Count = CFArrayGetCount(a1);
    v7 = Count > 0;
  }
  else
  {
    v7 = 0;
  }
  context = (void *)MEMORY[0x19403137C](Count);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "displays");
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = *(_QWORD *)v32;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v32 != v12)
          objc_enumerationMutation(v8);
        v17 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        if (v7)
        {
          v18 = CFArrayGetCount(a1);
          v19 = (const void *)objc_msgSend(v17, "name");
          v37.location = 0;
          v37.length = v18;
          if (!CFArrayContainsValue(a1, v37, v19))
            continue;
        }
        v20 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v17);
        VideoRangeForMode = FPSupport_GetVideoRangeForMode((void *)objc_msgSend(v17, "currentMode"), v20);
        if (VideoRangeForMode <= v11)
        {
          if (VideoRangeForMode == v11)
          {
            v24 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v17, "currentMode"), "width");
            v25 = objc_msgSend((id)objc_msgSend(v17, "currentMode"), "height");
            objc_msgSend((id)objc_msgSend(v17, "currentMode"), "refreshRate");
            if (v15 >= v24)
            {
              if (v13 < v26 && v15 == v24)
                v13 = v26;
            }
            else
            {
              v14 = (double)v25;
              v13 = v26;
              v15 = v24;
            }
          }
        }
        else
        {
          v22 = VideoRangeForMode;
          v15 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v17, "currentMode"), "width");
          v14 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v17, "currentMode"), "height");
          objc_msgSend((id)objc_msgSend(v17, "currentMode"), "refreshRate");
          v13 = v23;
          v11 = v22;
        }
      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v10);
  }
  else
  {
    v11 = 0;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
  }
  objc_autoreleasePoolPop(context);
  if (a2)
    *a2 = v11;
  if (a3)
  {
    *a3 = v15;
    a3[1] = v14;
  }
  if (a4)
    *a4 = v13;
}

const __CFArray *FPSupport_CreateAllVideoRangesSupportedByDisplays()
{
  const __CFAllocator *v0;
  const __CFArray *Mutable;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  void *context;
  id obj;
  uint64_t v21;
  int valuePtr;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];
  uint64_t v33;
  CFRange v34;
  CFRange v35;

  v33 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  v2 = fig_note_initialize_category_with_default_work_cf();
  if (Mutable)
  {
    context = (void *)MEMORY[0x19403137C](v2);
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    obj = (id)objc_msgSend(MEMORY[0x1E0CD2728], "displays");
    v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v3)
    {
      v4 = v3;
      v21 = *(_QWORD *)v28;
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v28 != v21)
            objc_enumerationMutation(obj);
          v6 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * v5);
          v23 = 0u;
          v24 = 0u;
          v25 = 0u;
          v26 = 0u;
          v7 = (void *)objc_msgSend(v6, "availableModes");
          v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
          if (v8)
          {
            v9 = v8;
            v10 = *(_QWORD *)v24;
            do
            {
              v11 = 0;
              do
              {
                if (*(_QWORD *)v24 != v10)
                  objc_enumerationMutation(v7);
                v12 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v11);
                v13 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v6);
                valuePtr = 0;
                valuePtr = FPSupport_GetVideoRangeForMode(v12, v13);
                v14 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
                if (v14)
                {
                  v15 = v14;
                  v34.length = CFArrayGetCount(Mutable);
                  v34.location = 0;
                  if (!CFArrayContainsValue(Mutable, v34, v15))
                    CFArrayAppendValue(Mutable, v15);
                  CFRelease(v15);
                }
                ++v11;
              }
              while (v9 != v11);
              v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
            }
            while (v9);
          }
          ++v5;
        }
        while (v5 != v4);
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v4);
    }
    objc_autoreleasePoolPop(context);
    if (!CFArrayGetCount(Mutable))
    {
      valuePtr = 1;
      v16 = CFNumberCreate(v0, kCFNumberSInt32Type, &valuePtr);
      if (v16)
      {
        v17 = v16;
        v35.length = CFArrayGetCount(Mutable);
        v35.location = 0;
        if (!CFArrayContainsValue(Mutable, v35, v17))
          CFArrayAppendValue(Mutable, v17);
        CFRelease(v17);
      }
    }
  }
  return Mutable;
}

uint64_t fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(void *a1)
{
  CFStringRef v2;
  uint64_t v3;

  v2 = FPSupport_CopyMainDisplayCAName();
  objc_msgSend(a1, "name");
  v3 = FigCFEqual();
  if (v2)
    CFRelease(v2);
  return v3;
}

uint64_t FPSupport_GetVideoRangeForMode(void *a1, int a2)
{
  void *v4;
  void *v5;
  unsigned int v6;
  uint64_t result;

  v4 = (void *)objc_msgSend(a1, "hdrMode");
  if (objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CD2AC0]))
  {
    if (a2)
    {
      v5 = (void *)objc_msgSend(a1, "colorGamut");
      if (objc_msgSend(v5, "isEqual:", *MEMORY[0x1E0CD2AA8]))
        v6 = 1;
      else
        v6 = 5;
    }
    else
    {
      v6 = 1;
    }
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CD2AA0]) & 1) != 0)
  {
    v6 = 4;
  }
  else if ((objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CD2AB0]) & 1) != 0)
  {
    v6 = 3;
  }
  else
  {
    result = objc_msgSend(v4, "isEqualToString:", *MEMORY[0x1E0CD2AB8]);
    if (!(_DWORD)result)
      return result;
    v6 = 2;
  }
  if (fpSupport_shouldDisableHDR_onceTokenDisableHDR != -1)
    dispatch_once(&fpSupport_shouldDisableHDR_onceTokenDisableHDR, &__block_literal_global_151);
  if (fpSupport_shouldDisableHDR_sDisableHDR)
    return 1;
  else
    return v6;
}

void FPSupport_GetDisplayInfoForCADisplay(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  int v10;
  double v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (a1)
    {
      v3 = (void *)MEMORY[0x19403137C]();
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      v17 = 0u;
      v4 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "displays", 0);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v15;
        while (2)
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v15 != v7)
              objc_enumerationMutation(v4);
            v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
            objc_msgSend(v9, "name");
            if (FigCFEqual())
            {
              v10 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v9);
              *(_DWORD *)a2 = FPSupport_GetVideoRangeForMode((void *)objc_msgSend(v9, "currentMode"), v10);
              v11 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v9, "currentMode"), "width");
              v12 = objc_msgSend((id)objc_msgSend(v9, "currentMode"), "height");
              *(double *)(a2 + 8) = v11;
              *(double *)(a2 + 16) = (double)v12;
              objc_msgSend((id)objc_msgSend(v9, "currentMode"), "refreshRate");
              *(_QWORD *)(a2 + 24) = v13;
              goto LABEL_13;
            }
          }
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
          if (v6)
            continue;
          break;
        }
      }
LABEL_13:
      objc_autoreleasePoolPop(v3);
    }
  }
}

void FPSupport_GetBestDisplayInfoForDisplay(const void *a1, uint64_t a2, float a3)
{
  CFTypeID v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  void *v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  void *v30;
  double v31;
  float v32;
  int v33;
  BOOL v34;
  int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  uint64_t k;
  void *v43;
  double v44;
  double v45;
  _BOOL4 v46;
  float v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  double v54;
  unint64_t v55;
  double v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id obj;
  void *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[128];
  _BYTE v86[128];
  _BYTE v87[128];
  _BYTE v88[128];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    if (a1)
    {
      v6 = CFGetTypeID(a1);
      if (v6 == CFStringGetTypeID())
      {
        v7 = (void *)MEMORY[0x19403137C]();
        v69 = 0u;
        v70 = 0u;
        v71 = 0u;
        v72 = 0u;
        v8 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "displays");
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
        if (!v9)
          goto LABEL_72;
        v10 = v9;
        v11 = *(_QWORD *)v70;
        while (1)
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v70 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * i);
            objc_msgSend(v13, "name");
            if (FigCFEqual())
            {
              if (a3 <= 60.0)
                v14 = a3 > 30.0;
              else
                v14 = 2;
              if (!objc_msgSend(v13, "allowedHDRModes"))
                goto LABEL_70;
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              obj = (id)objc_msgSend(v13, "allowedHDRModes");
              v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v88, 16);
              if (!v67)
                goto LABEL_70;
              v57 = v7;
              v58 = a2;
              v15 = 0;
              v16 = 0;
              v17 = *(_QWORD *)v82;
              v18 = *MEMORY[0x1E0CD2AC0];
              v63 = *MEMORY[0x1E0CD2AA0];
              v60 = *MEMORY[0x1E0CD2AB0];
              v59 = *MEMORY[0x1E0CD2AB8];
              v19 = 0.0;
              v20 = 0.0;
              v21 = 0.0;
              v65 = v13;
              v61 = *MEMORY[0x1E0CD2AC0];
              v62 = *(_QWORD *)v82;
              do
              {
                v22 = 0;
                do
                {
                  if (*(_QWORD *)v82 != v17)
                    objc_enumerationMutation(obj);
                  v68 = v22;
                  v23 = *(void **)(*((_QWORD *)&v81 + 1) + 8 * v22);
                  if ((objc_msgSend(v23, "isEqualToString:", v18, v57) & 1) != 0)
                  {
                    v24 = 1;
                  }
                  else if ((objc_msgSend(v23, "isEqualToString:", v63) & 1) != 0)
                  {
                    v24 = 4;
                  }
                  else if ((objc_msgSend(v23, "isEqualToString:", v60) & 1) != 0)
                  {
                    v24 = 3;
                  }
                  else if (objc_msgSend(v23, "isEqualToString:", v59))
                  {
                    v24 = 2;
                  }
                  else
                  {
                    v24 = 0;
                  }
                  if (v24 > v16)
                  {
                    v66 = v24;
                    v79 = 0u;
                    v80 = 0u;
                    v77 = 0u;
                    v78 = 0u;
                    v25 = (void *)objc_msgSend(v13, "availableModes");
                    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v77, v87, 16);
                    if (v26)
                    {
                      v27 = v26;
                      v28 = *(_QWORD *)v78;
                      while (2)
                      {
                        for (j = 0; j != v27; ++j)
                        {
                          if (*(_QWORD *)v78 != v28)
                            objc_enumerationMutation(v25);
                          v30 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * j);
                          objc_msgSend(v30, "refreshRate");
                          v32 = v31;
                          v33 = objc_msgSend(v23, "isEqual:", objc_msgSend(v30, "hdrMode"));
                          v34 = v14 == v32 > 30.0;
                          if (v32 > 60.0)
                            v34 = a3 > 60.0;
                          if (v33 && v34)
                          {
                            v35 = 0;
                            goto LABEL_45;
                          }
                        }
                        v27 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v77, v87, 16);
                        if (v27)
                          continue;
                        break;
                      }
                      v35 = 1;
LABEL_45:
                      v13 = v65;
                    }
                    else
                    {
                      v35 = 1;
                    }
                    v75 = 0u;
                    v76 = 0u;
                    v73 = 0u;
                    v74 = 0u;
                    v36 = (void *)objc_msgSend(v13, "availableModes");
                    v37 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
                    if (v37)
                    {
                      v38 = v37;
                      v39 = *(_QWORD *)v74;
                      v19 = 0.0;
                      v20 = 0.0;
                      v21 = 0.0;
                      v40 = 0.0;
                      v41 = 0.0;
                      while (1)
                      {
                        for (k = 0; k != v38; ++k)
                        {
                          if (*(_QWORD *)v74 != v39)
                            objc_enumerationMutation(v36);
                          v43 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * k);
                          objc_msgSend(v43, "refreshRate");
                          v45 = v44;
                          if (objc_msgSend(v23, "isEqual:", objc_msgSend(v43, "hdrMode")))
                          {
                            v46 = a3 > 60.0;
                            v47 = v45;
                            if (v47 <= 60.0)
                              v46 = v14 == v47 > 30.0;
                            if ((v35 | v46) == 1)
                            {
                              objc_msgSend(v43, "refreshRate");
                              if (v48 >= v41)
                              {
                                objc_msgSend(v43, "refreshRate");
                                if (v49 <= v41)
                                {
                                  v51 = objc_msgSend(v43, "width");
                                  if (v19 * v40 >= (double)(unint64_t)(objc_msgSend(v43, "height") * v51))
                                    continue;
                                }
                                else
                                {
                                  objc_msgSend(v43, "refreshRate");
                                  v21 = v50;
                                  v41 = v50;
                                }
                                v52 = objc_msgSend(v43, "width");
                                v20 = (double)(unint64_t)objc_msgSend(v43, "height");
                                v19 = (double)v52;
                                v40 = v20;
                              }
                            }
                          }
                        }
                        v38 = objc_msgSend(v36, "countByEnumeratingWithState:objects:count:", &v73, v86, 16);
                        if (!v38)
                        {
                          v16 = v66;
                          v15 = v66;
                          v13 = v65;
                          goto LABEL_65;
                        }
                      }
                    }
                    v19 = 0.0;
                    v16 = v66;
                    v15 = v66;
                    v20 = 0.0;
                    v21 = 0.0;
LABEL_65:
                    v18 = v61;
                    v17 = v62;
                  }
                  v22 = v68 + 1;
                }
                while (v68 + 1 != v67);
                v67 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v81, v88, 16);
              }
              while (v67);
              v7 = v57;
              a2 = v58;
              if (v15)
              {
                *(_DWORD *)v58 = v15;
                *(_DWORD *)(v58 + 4) = 0;
                *(double *)(v58 + 8) = v19;
                *(double *)(v58 + 16) = v20;
              }
              else
              {
LABEL_70:
                v53 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v13);
                *(_DWORD *)a2 = FPSupport_GetVideoRangeForMode((void *)objc_msgSend(v13, "currentMode"), v53);
                v54 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v13, "currentMode"), "width");
                v55 = objc_msgSend((id)objc_msgSend(v13, "currentMode"), "height");
                *(double *)(a2 + 8) = v54;
                *(double *)(a2 + 16) = (double)v55;
                objc_msgSend((id)objc_msgSend(v13, "currentMode"), "refreshRate");
                v21 = v56;
              }
              *(double *)(a2 + 24) = v21;
              goto LABEL_72;
            }
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v69, v85, 16);
          if (!v10)
          {
LABEL_72:
            objc_autoreleasePoolPop(v7);
            return;
          }
        }
      }
    }
  }
}

uint64_t FPSupport_IsExternalDisplay(const void *a1)
{
  CFTypeID v1;
  void *v2;
  uint64_t v3;

  v1 = CFGetTypeID(a1);
  if (v1 != CFStringGetTypeID())
    return 0;
  v2 = (void *)MEMORY[0x19403137C]();
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CD2728], "TVOutDisplay"), "name");
  v3 = FigCFEqual();
  objc_autoreleasePoolPop(v2);
  return v3;
}

CFStringRef FPSupport_CopyMainDisplayCAName()
{
  void *v0;
  void *v1;
  const __CFString *v2;
  CFStringRef Copy;

  v0 = (void *)MEMORY[0x19403137C]();
  v1 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay");
  if (v1 && (v2 = (const __CFString *)objc_msgSend(v1, "name")) != 0)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    Copy = 0;
  objc_autoreleasePoolPop(v0);
  return Copy;
}

void FPSupport_GetMainDisplayVideoRangeAndSizeAndFrameRate(_DWORD *a1, double *a2, _QWORD *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  double v11;
  double v12;
  uint64_t v13;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  v6 = fig_note_initialize_category_with_default_work_cf();
  if (a1)
    *a1 = 0;
  if (a2)
  {
    *a2 = 0.0;
    a2[1] = 0.0;
  }
  if (a3)
    *a3 = 0;
  v7 = (void *)MEMORY[0x19403137C](v6);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay");
  v9 = v8;
  if (a1)
  {
    v10 = fpSupport_shouldCheckColorGamutToDecideVideoRangeForMode(v8);
    *a1 = FPSupport_GetVideoRangeForMode((void *)objc_msgSend(v9, "currentMode"), v10);
  }
  if (a2)
  {
    v11 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v9, "currentMode"), "width");
    v12 = (double)(unint64_t)objc_msgSend((id)objc_msgSend(v9, "currentMode"), "height");
    *a2 = v11;
    a2[1] = v12;
  }
  if (a3)
  {
    objc_msgSend((id)objc_msgSend(v9, "currentMode"), "refreshRate");
    *a3 = v13;
  }
  objc_autoreleasePoolPop(v7);
}

uint64_t FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(const void *a1, CFArrayRef theArray, char a3, uint64_t a4)
{
  _BYTE *v8;
  uint64_t v9;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  v8 = malloc_type_malloc(0x10uLL, 0x1060040E5A1EACFuLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  *(_QWORD *)v8 = theArray;
  v8[8] = a3;
  CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeClearVideoLayerContext, (uint64_t)fps_copyDescriptionForClearVideoLayerContext, (uint64_t)fps_clearFigVideoLayers);
}

void fps_disposeClearVideoLayerContext(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForClearVideoLayerContext(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  const void *v4;
  const char *v5;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = FigCFCopyCompactDescription();
  v4 = (const void *)v3;
  if (*(_BYTE *)(a1 + 8))
    v5 = " and remove them from their superlayer";
  else
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("Clear video layers %@%s"), v3, v5);
  if (v4)
    CFRelease(v4);
  return Mutable;
}

uint64_t fps_clearFigVideoLayers(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void *ValueAtIndex;
  void *v7;

  v2 = *(const __CFArray **)a1;
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
        v7 = (void *)objc_msgSend(ValueAtIndex, "superlayer");
        objc_msgSend(ValueAtIndex, "setContents:", 0);
        if (*(_BYTE *)(a1 + 8))
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && ValueAtIndex == (void *)objc_msgSend(v7, "videoLayer"))
            objc_msgSend(v7, "setVideoLayer:", 0);
          objc_msgSend(ValueAtIndex, "removeFromSuperlayer");
        }
        objc_msgSend(ValueAtIndex, "setFilters:", 0);
      }
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(const void *a1, const __CFArray *a2, CFArrayRef theArray, uint64_t a4)
{
  CFIndex Count;
  CFIndex v9;
  _QWORD *v10;
  uint64_t v11;

  if (!theArray)
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v9 = CFArrayGetCount(a2);
  if (Count != v9)
    return FigSignalErrorAt();
LABEL_6:
  if (Count < 1)
    return 0;
  v10 = malloc_type_malloc(0x10uLL, 0x600405BB7FD7CuLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = (uint64_t)v10;
  *v10 = a2;
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(v11 + 8) = theArray;
  if (theArray)
    CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v11, (uint64_t)fps_disposeAttachFigVideoLayerContext, (uint64_t)fps_copyDescriptionForAttachFigVideoLayerContext, (uint64_t)fps_attachFigVideoLayersToClientLayers);
}

void fps_disposeAttachFigVideoLayerContext(CFTypeRef *a1)
{
  CFTypeRef v2;

  v2 = a1[1];
  if (v2)
    CFRelease(v2);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

__CFString *fps_copyDescriptionForAttachFigVideoLayerContext()
{
  __CFString *Mutable;
  const void *v1;
  const void *v2;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("Attach fig video layers: %@"), v1);
  if (v1)
    CFRelease(v1);
  v2 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\nto client layers: %@"), v2);
  if (v2)
    CFRelease(v2);
  return Mutable;
}

uint64_t fps_attachFigVideoLayersToClientLayers(CFArrayRef *a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const __CFArray *v4;
  CFIndex i;
  const void *ValueAtIndex;
  void *v7;

  v2 = a1[1];
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  v4 = *a1;
  if (*a1)
    v4 = (const __CFArray *)CFArrayGetCount(v4);
  if ((const __CFArray *)Count != v4)
    return FigSignalErrorAt();
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1[1], i);
      v7 = (void *)CFArrayGetValueAtIndex(*a1, i);
      objc_msgSend(v7, "addSublayer:", ValueAtIndex);
      objc_msgSend(v7, "setVideoLayer:", ValueAtIndex);
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingCAImageQueuesOnVideoLayers(const void *a1, CFArrayRef theArray, const __CFArray *a3, __int128 *a4, uint64_t a5)
{
  CFIndex Count;
  CFIndex v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (!a3)
      return 0;
  }
  else
  {
    Count = 0;
    if (!a3)
      return 0;
  }
  v11 = CFArrayGetCount(a3);
  if (Count < 1 || v11 < 1)
    return 0;
  v12 = malloc_type_malloc(0x28uLL, 0x10600403247B118uLL);
  if (!v12)
    return FigSignalErrorAt();
  v13 = (uint64_t)v12;
  *v12 = a3;
  CFRetain(a3);
  *(_QWORD *)(v13 + 8) = theArray;
  if (theArray)
    CFRetain(theArray);
  v14 = *a4;
  *(_QWORD *)(v13 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v13 + 16) = v14;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a5, v13, (uint64_t)fps_disposeSetCAImageQueuesOnVideoLayersContext, (uint64_t)fps_copyDescriptionForSetCAImageQueuesOnVideoLayersContext, (uint64_t)fps_setCAImageQueuesOnVideoLayers);
}

void fps_disposeSetCAImageQueuesOnVideoLayersContext(const void **a1)
{
  const void *v2;
  const void *v3;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  free(a1);
}

__CFString *fps_copyDescriptionForSetCAImageQueuesOnVideoLayersContext(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const void *v4;
  CFStringRef v5;
  const void *v6;
  CMTime time;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("Set CA image queues: %@"), v4);
  if (v4)
    CFRelease(v4);
  time = *(CMTime *)(a1 + 16);
  v5 = CMTimeCopyDescription(v2, &time);
  CFStringAppendFormat(Mutable, 0, CFSTR("\nand new duration: %@"), v5);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non video layers: %@"), v6);
  if (v6)
    CFRelease(v6);
  return Mutable;
}

uint64_t fps_setCAImageQueuesOnVideoLayers(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const __CFArray *v4;
  uint64_t v5;
  CFIndex v6;
  uint64_t v7;
  _OWORD *v8;
  CMTime *v9;
  const void *ValueAtIndex;
  void *v11;
  double Seconds;
  double v13;
  CMTime v15;
  CMTime time1;

  v2 = *(const __CFArray **)(a1 + 8);
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  v4 = *(const __CFArray **)a1;
  if (*(_QWORD *)a1)
    v4 = (const __CFArray *)CFArrayGetCount(v4);
  if (Count >= (uint64_t)v4)
    v5 = (uint64_t)v4;
  else
    v5 = Count;
  if (v5 >= 1)
  {
    v6 = 0;
    v7 = *MEMORY[0x1E0CD2B58];
    v8 = (_OWORD *)(a1 + 16);
    v9 = (CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 8), v6);
      v11 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, v6);
      objc_msgSend(v11, "setContents:", ValueAtIndex);
      objc_msgSend(v11, "setFillMode:", v7);
      if ((*(_DWORD *)(a1 + 28) & 0x11) == 1)
      {
        *(_OWORD *)&time1.value = *v8;
        time1.epoch = *(_QWORD *)(a1 + 32);
        v15 = *v9;
        if (CMTimeCompare(&time1, &v15) >= 1)
        {
          *(_OWORD *)&time1.value = *v8;
          time1.epoch = *(_QWORD *)(a1 + 32);
          Seconds = CMTimeGetSeconds(&time1);
          objc_msgSend(v11, "setDuration:");
          objc_msgSend(v11, "timeOffset");
          if (v13 >= Seconds)
            objc_msgSend(v11, "setTimeOffset:", Seconds + -0.000001);
        }
      }
      ++v6;
    }
    while (v5 != v6);
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnComposition(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  if (!a3)
    return FigSignalErrorAt();
  v8 = malloc_type_malloc(0x10uLL, 0x600405C6656D0uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  *v8 = a2;
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(v9 + 8) = a3;
  CFRetain(a3);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 0, a4, v9, (uint64_t)fps_disposeSetFigImageQueuesOnCompositionContext, (uint64_t)fps_copyDescriptionForSetFigImageQueuesOnCompositionContext, (uint64_t)fps_setFigImageQueuesOnComposition);
}

void fps_disposeSetFigImageQueuesOnCompositionContext(CFTypeRef *a1)
{
  CFTypeRef v2;

  v2 = a1[1];
  if (v2)
    CFRelease(v2);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

__CFString *fps_copyDescriptionForSetFigImageQueuesOnCompositionContext(uint64_t a1)
{
  __CFString *Mutable;
  const void *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("Update fig image queues: %@"), v3);
  if (v3)
    CFRelease(v3);
  CFStringAppendFormat(Mutable, 0, CFSTR("\non composition processor: %@"), *(_QWORD *)(a1 + 8));
  return Mutable;
}

uint64_t fps_setFigImageQueuesOnComposition(uint64_t a1)
{
  return FigVideoCompositionProcessorSetProperty(*(_QWORD *)(a1 + 8), CFSTR("VideoCompositionProcessorProperty_FigImageQueueArray"), *(void **)a1);
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingFigImageQueuesOnRenderPipeline(const void *a1, const void *a2, const void *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  if (!a3)
    return FigSignalErrorAt();
  v8 = malloc_type_malloc(0x10uLL, 0x600405C6656D0uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  *v8 = a2;
  if (a2)
    CFRetain(a2);
  *(_QWORD *)(v9 + 8) = a3;
  CFRetain(a3);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 0, a4, v9, (uint64_t)fps_disposeSetFigImageQueuesOnRenderPipelineContext, (uint64_t)fps_copyDescriptionForSetFigImageQueuesOnRenderPipelineContext, (uint64_t)fps_setFigImageQueuesOnRenderPipeline);
}

void fps_disposeSetFigImageQueuesOnRenderPipelineContext(CFTypeRef *a1)
{
  CFTypeRef v2;

  v2 = a1[1];
  if (v2)
    CFRelease(v2);
  if (*a1)
    CFRelease(*a1);
  free(a1);
}

__CFString *fps_copyDescriptionForSetFigImageQueuesOnRenderPipelineContext(uint64_t a1)
{
  __CFString *Mutable;
  const void *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("Set fig image queues: %@"), v3);
  if (v3)
    CFRelease(v3);
  CFStringAppendFormat(Mutable, 0, CFSTR("\non render pipeline: %@"), *(_QWORD *)(a1 + 8));
  return Mutable;
}

uint64_t fps_setFigImageQueuesOnRenderPipeline(uint64_t *a1)
{
  uint64_t v1;
  uint64_t FigBaseObject;
  uint64_t (*v3)(uint64_t, const __CFString *, uint64_t);

  v1 = *a1;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a1[1]);
  v3 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v3)
    return v3(FigBaseObject, CFSTR("FigImageQueueArray"), v1);
  else
    return 4294954514;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(const void *a1, __int128 *a2, CFArrayRef theArray, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  __int128 v10;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  v8 = (char *)malloc_type_malloc(0x20uLL, 0x106004029F9A71EuLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  v10 = *a2;
  *((_QWORD *)v8 + 3) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v8 + 8) = v10;
  *(_QWORD *)v8 = theArray;
  CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeSetDurationOnLayersContext, (uint64_t)fps_copyDescriptionForSetDurationOnLayersContext, (uint64_t)fps_setDurationOnLayers);
}

void fps_disposeSetDurationOnLayersContext(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForSetDurationOnLayersContext(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFStringRef v4;
  const void *v5;
  CMTime time;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  time = *(CMTime *)(a1 + 8);
  v4 = CMTimeCopyDescription(v2, &time);
  CFStringAppendFormat(Mutable, 0, CFSTR("Set duration %@"), v4);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non layers: %@"), v5);
  if (v5)
    CFRelease(v5);
  return Mutable;
}

uint64_t fps_setDurationOnLayers(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  _OWORD *v6;
  uint64_t v7;
  CMTime *v8;
  void *ValueAtIndex;
  double Seconds;
  double v11;
  CMTime v13;
  CMTime time1;

  v2 = *(const __CFArray **)a1;
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      v5 = 0;
      v6 = (_OWORD *)(a1 + 8);
      v7 = *MEMORY[0x1E0CD2B58];
      v8 = (CMTime *)MEMORY[0x1E0CA2E68];
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, v5);
        if ((*(_DWORD *)(a1 + 20) & 0x11) == 1)
        {
          *(_OWORD *)&time1.value = *v6;
          time1.epoch = *(_QWORD *)(a1 + 24);
          v13 = *v8;
          if (CMTimeCompare(&time1, &v13) >= 1)
          {
            *(_OWORD *)&time1.value = *v6;
            time1.epoch = *(_QWORD *)(a1 + 24);
            Seconds = CMTimeGetSeconds(&time1);
            objc_msgSend(ValueAtIndex, "setDuration:");
            objc_msgSend(ValueAtIndex, "timeOffset");
            if (v11 >= Seconds)
              objc_msgSend(ValueAtIndex, "setTimeOffset:", Seconds + -0.000001);
          }
        }
        objc_msgSend(ValueAtIndex, "setFillMode:", v7);
        ++v5;
      }
      while (v4 != v5);
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingBoundsOnLayers(const void *a1, CFArrayRef theArray, uint64_t a3, double a4, double a5, double a6, double a7)
{
  double *v14;
  uint64_t v15;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  v14 = (double *)malloc_type_malloc(0x28uLL, 0x1060040A09B13B7uLL);
  if (!v14)
    return FigSignalErrorAt();
  v15 = (uint64_t)v14;
  v14[1] = a4;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  *(_QWORD *)v14 = theArray;
  CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v15, (uint64_t)fps_disposeSetBoundsOnLayersContext, (uint64_t)fps_copyDescriptionForSetBoundsOnLayersContext, (uint64_t)fps_setBoundsOnLayers);
}

void fps_disposeSetBoundsOnLayersContext(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForSetBoundsOnLayersContext(_QWORD *a1)
{
  __CFString *Mutable;
  const void *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Set bounds: [%G, %G, %G, %G]"), a1[1], a1[2], a1[3], a1[4]);
  v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non layers: %@"), v3);
  if (v3)
    CFRelease(v3);
  return Mutable;
}

uint64_t fps_setBoundsOnLayers(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;

  v2 = *(const __CFArray **)a1;
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i), "setBounds:", *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32));
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingTransformOnLayers(const void *a1, char a2, __int128 *a3, CFArrayRef theArray, uint64_t a5, double a6, double a7)
{
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  v14 = malloc_type_malloc(0x50uLL, 0x1060040CE2EC661uLL);
  if (!v14)
    return FigSignalErrorAt();
  v15 = (uint64_t)v14;
  v16 = *a3;
  v17 = a3[2];
  v14[3] = a3[1];
  v14[4] = v17;
  v14[2] = v16;
  *((_BYTE *)v14 + 8) = a2;
  *((double *)v14 + 2) = a6;
  *((double *)v14 + 3) = a7;
  *(_QWORD *)v14 = theArray;
  CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a5, v15, (uint64_t)fps_disposeSetTransformOnLayersContext, (uint64_t)fps_copyDescriptionForSetTransformOnLayersContext, (uint64_t)fps_setTransformOnLayers);
}

void fps_disposeSetTransformOnLayersContext(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForSetTransformOnLayersContext(_QWORD *a1)
{
  __CFString *Mutable;
  const void *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Set position: [%G, %G], transform: [%G, %G, %G, %G, %G, %G]"), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non layers: %@"), v3);
  if (v3)
    CFRelease(v3);
  return Mutable;
}

uint64_t fps_setTransformOnLayers(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;
  void *ValueAtIndex;
  void *v7;
  __int128 v8;
  _OWORD v10[3];

  v2 = *(const __CFArray **)a1;
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i);
        v7 = ValueAtIndex;
        if (*(_BYTE *)(a1 + 8))
          objc_msgSend(ValueAtIndex, "setPosition:", *(double *)(a1 + 16), *(double *)(a1 + 24));
        v8 = *(_OWORD *)(a1 + 48);
        v10[0] = *(_OWORD *)(a1 + 32);
        v10[1] = v8;
        v10[2] = *(_OWORD *)(a1 + 64);
        objc_msgSend(v7, "setAffineTransform:", v10);
      }
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingEdgeAntialiasingMaskOnLayers(const void *a1, int a2, CFArrayRef theArray, uint64_t a4)
{
  _DWORD *v8;
  uint64_t v9;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  v8 = malloc_type_malloc(0x10uLL, 0x1060040ADAFC7CAuLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  v8[2] = a2;
  *(_QWORD *)v8 = theArray;
  CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeSetAntialiasingMaskOnLayersContext, (uint64_t)fps_copyDescriptionForSetAntialiasingMaskOnLayersContext, (uint64_t)fps_setAntialiasingMaskOnLayers);
}

void fps_disposeSetAntialiasingMaskOnLayersContext(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForSetAntialiasingMaskOnLayersContext(uint64_t a1)
{
  __CFString *Mutable;
  const void *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Set edge antialiasing mask %d"), *(unsigned int *)(a1 + 8));
  v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non layers: %@"), v3);
  if (v3)
    CFRelease(v3);
  return Mutable;
}

uint64_t fps_setAntialiasingMaskOnLayers(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;

  v2 = *(const __CFArray **)a1;
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)a1, i), "setEdgeAntialiasingMask:", *(unsigned int *)(a1 + 8));
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForCallingSetContentsChangedOnLayers(const void *a1, CFArrayRef theArray, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  v6 = malloc_type_malloc(8uLL, 0x6004044C4A2DFuLL);
  if (!v6)
    return FigSignalErrorAt();
  v7 = (uint64_t)v6;
  *v6 = theArray;
  CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v7, (uint64_t)fps_disposeCallSetContentsChangedOnLayersContext, (uint64_t)fps_copyDescriptionForCallSetContentsChangedOnLayersContext, (uint64_t)fps_callSetContentsChangedOnLayers);
}

void fps_disposeCallSetContentsChangedOnLayersContext(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForCallSetContentsChangedOnLayersContext()
{
  __CFString *Mutable;
  const void *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Call setContentsChanged"));
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non layers: %@"), v1);
  if (v1)
    CFRelease(v1);
  return Mutable;
}

uint64_t fps_callSetContentsChangedOnLayers(CFArrayRef *a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;

  v2 = *a1;
  if (v2)
  {
    Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      v4 = Count;
      for (i = 0; i != v4; ++i)
        objc_msgSend((id)CFArrayGetValueAtIndex(*a1, i), "setContentsChanged");
    }
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToRelease(const void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  if (!a2)
    return 0;
  v6 = malloc_type_malloc(8uLL, 0xC0040B8AA526DuLL);
  if (!v6)
    return FigSignalErrorAt();
  *v6 = a2;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, (uint64_t)v6, (uint64_t)fps_disposeReleaseContext, (uint64_t)fps_copyDescriptionForReleaseContext, (uint64_t)fps_callRelease);
}

void fps_disposeReleaseContext(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

__CFString *fps_copyDescriptionForReleaseContext()
{
  __CFString *Mutable;
  const void *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Call FigCFReleaseAndClear"));
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non: %@"), v1);
  if (v1)
    CFRelease(v1);
  return Mutable;
}

uint64_t fps_callRelease(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToReleaseOSTransaction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  if (!a2)
    return 0;
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  if (!v6)
    return FigSignalErrorAt();
  *v6 = a2;
  return FigDeferredTransactionAppendPostCommitChangeWithCallback(a1, a3, (uint64_t)v6, (uint64_t)fps_disposeReleaseOSTransactionContext, (uint64_t)fps_copyDescriptionForReleaseOSTransactionContext, (uint64_t)fps_callReleaseOSTransaction);
}

void fps_disposeReleaseOSTransactionContext(id *a1)
{
  if (*a1)

  free(a1);
}

__CFString *fps_copyDescriptionForReleaseOSTransactionContext()
{
  __CFString *Mutable;
  const void *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Call FigOSReleaseAndClear"));
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non: %@"), v1);
  if (v1)
    CFRelease(v1);
  return Mutable;
}

uint64_t fps_callReleaseOSTransaction(id *a1)
{
  if (*a1)
  {

    *a1 = 0;
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToClearContentsAndRemoveFromSuperLayer(const void *a1, void *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  id v8;

  if (!a2)
    return 0;
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  if (!v6)
    return FigSignalErrorAt();
  v7 = (uint64_t)v6;
  *v6 = a2;
  v8 = a2;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v7, (uint64_t)fps_disposeClearContentsAndRemoveFromSuperLayerContext, (uint64_t)fps_copyDescriptionForClearContentsAndRemoveFromSuperLayerContext, (uint64_t)fps_callClearContentsAndRemoveFromSuperLayer);
}

void fps_disposeClearContentsAndRemoveFromSuperLayerContext(id *a1)
{
  if (*a1)

  free(a1);
}

__CFString *fps_copyDescriptionForClearContentsAndRemoveFromSuperLayerContext(id *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Call setContents:nil and removeFromSuperLayerContext"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\non: %@"), objc_msgSend(*a1, "description"));
  return Mutable;
}

uint64_t fps_callClearContentsAndRemoveFromSuperLayer(id *a1)
{
  objc_msgSend(*a1, "setContents:", 0);
  objc_msgSend(*a1, "removeFromSuperlayer");

  *a1 = 0;
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForUpdatingLayerTransform(const void *a1, void *a2, void *a3, int a4, char a5, char a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  _QWORD *v37;
  uint64_t v38;
  id v39;
  id v40;

  v37 = malloc_type_malloc(0xA8uLL, 0x1080040CAC251C5uLL);
  if (!v37)
    return FigSignalErrorAt();
  v38 = (uint64_t)v37;
  *v37 = a2;
  v39 = a2;
  *(_QWORD *)(v38 + 8) = a3;
  v40 = a3;
  *(double *)(v38 + 16) = a9;
  *(double *)(v38 + 24) = a10;
  *(double *)(v38 + 32) = a11;
  *(double *)(v38 + 40) = a12;
  *(double *)(v38 + 48) = a13;
  *(double *)(v38 + 56) = a14;
  *(double *)(v38 + 64) = a15;
  *(double *)(v38 + 72) = a16;
  *(_DWORD *)(v38 + 80) = a4;
  *(_QWORD *)(v38 + 88) = a17;
  *(_QWORD *)(v38 + 96) = a18;
  *(_QWORD *)(v38 + 104) = a19;
  *(_QWORD *)(v38 + 112) = a20;
  *(_BYTE *)(v38 + 152) = a5;
  *(_BYTE *)(v38 + 153) = a6;
  *(_QWORD *)(v38 + 120) = a21;
  *(_QWORD *)(v38 + 128) = a22;
  *(_QWORD *)(v38 + 136) = a23;
  *(_QWORD *)(v38 + 144) = a24;
  *(_BYTE *)(v38 + 154) = a7;
  *(_QWORD *)(v38 + 160) = a25;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a8, v38, (uint64_t)fps_disposeCallUpdateLayerTransform, (uint64_t)fps_copyDescriptionForCallUpdateLayerTransform, (uint64_t)fps_callUpdateLayerTransform);
}

void fps_disposeCallUpdateLayerTransform(id *a1)
{

  free(a1);
}

__CFString *fps_copyDescriptionForCallUpdateLayerTransform(uint64_t a1)
{
  __CFString *Mutable;
  const void *v3;
  uint64_t v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Call updateLayerTransform"));
  v3 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\n video layers: %@"), v3);
  if (v3)
    CFRelease(v3);
  v4 = *(unsigned int *)(a1 + 80);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_5;
LABEL_9:
    CFStringAppendFormat(Mutable, 0, CFSTR(" flip_X "));
    v4 = *(unsigned int *)(a1 + 80);
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(" rotate 90 degree "));
  v4 = *(unsigned int *)(a1 + 80);
  if ((v4 & 2) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v4 & 1) != 0)
  {
LABEL_6:
    CFStringAppendFormat(Mutable, 0, CFSTR(" flip_Y "));
    v4 = *(unsigned int *)(a1 + 80);
  }
LABEL_7:
  CFStringAppendFormat(Mutable, 0, CFSTR("\n UpdateLayer to sourceRect : [%f, %f, %f, %f]; destRect : [%f, %f, %f, %f]; symmetricTransform : %x; avcRect : [%f, %f, %f, %f]; avcPresentationRect : [%f, %f, %f, %f]; maskingLayerHidden : NO"),
    *(_QWORD *)(a1 + 16),
    *(_QWORD *)(a1 + 24),
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    *(_QWORD *)(a1 + 48),
    *(_QWORD *)(a1 + 56),
    *(_QWORD *)(a1 + 64),
    *(_QWORD *)(a1 + 72),
    v4,
    *(_QWORD *)(a1 + 88),
    *(_QWORD *)(a1 + 96),
    *(_QWORD *)(a1 + 104),
    *(_QWORD *)(a1 + 112),
    *(_QWORD *)(a1 + 120),
    *(_QWORD *)(a1 + 128),
    *(_QWORD *)(a1 + 136),
    *(_QWORD *)(a1 + 144));
  return Mutable;
}

uint64_t fps_callUpdateLayerTransform(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  void *v12;
  double v13;
  uint64_t v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v20;
  double tya;
  CGFloat ty;
  double v23;
  __int128 v24;
  double v25;
  __int128 v26;
  double v27;
  CGAffineTransform v28;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v31;
  CGAffineTransform v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGAffineTransform v36;

  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  v4 = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  v25 = *(double *)(a1 + 48);
  v23 = *(double *)(a1 + 56);
  v6 = *(double *)(a1 + 72);
  v7 = *(_DWORD *)(a1 + 80);
  v9 = *(double *)(a1 + 136);
  v8 = *(double *)(a1 + 144);
  if ((v7 & 4) != 0)
    v10 = *(double *)(a1 + 72);
  else
    v10 = *(double *)(a1 + 64);
  v27 = *(double *)(a1 + 64);
  if ((v7 & 4) != 0)
    v11 = *(double *)(a1 + 64);
  else
    v11 = *(double *)(a1 + 72);
  if (!*(_BYTE *)(a1 + 154))
  {
    v12 = (void *)MEMORY[0x1E0CD28B0];
    tya = v10;
    v13 = v11;
    v14 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 160));
    objc_msgSend(v12, "setValue:forKey:", v14, *MEMORY[0x1E0CD3158]);
    v11 = v13;
    v10 = tya;
  }
  if (*(_BYTE *)(a1 + 153))
  {
    ty = v11;
    v15 = v8 * (v11 / v5);
    objc_msgSend(*(id *)(a1 + 8), "setAnchorPoint:", v3 / v9, v2 / v8);
    objc_msgSend(*(id *)(a1 + 8), "setBounds:", 0.0, 0.0, v9 * (v10 / v4), v15);
    objc_msgSend(*(id *)a1, "setFrame:", v25, v23, v27, v6);
    v16 = *MEMORY[0x1E0C9BAA8];
    v17 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v36.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v36.c = v17;
    v18 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
    *(_OWORD *)&v36.tx = v18;
    if ((v7 & 1) != 0)
    {
      v24 = v17;
      v26 = v16;
      v20 = v18;
      CGAffineTransformMakeScale(&v35, -1.0, 1.0);
      *(_OWORD *)&v34.a = v26;
      *(_OWORD *)&v34.c = v24;
      *(_OWORD *)&v34.tx = v20;
      CGAffineTransformConcat(&v36, &v34, &v35);
      CGAffineTransformMakeTranslation(&v33, v10, 0.0);
      v32 = v36;
      CGAffineTransformConcat(&v34, &v32, &v33);
      v36 = v34;
      if ((v7 & 2) == 0)
      {
LABEL_12:
        if ((v7 & 4) == 0)
        {
LABEL_14:
          objc_msgSend(*(id *)(a1 + 8), "setAffineTransform:", &v36, v20);
          goto LABEL_15;
        }
LABEL_13:
        CGAffineTransformMakeRotation(&t2, 1.57079633);
        t1 = v36;
        CGAffineTransformConcat(&v34, &t1, &t2);
        v36 = v34;
        CGAffineTransformMakeTranslation(&t1, v27, 0.0);
        v28 = v36;
        CGAffineTransformConcat(&v34, &v28, &t1);
        v36 = v34;
        goto LABEL_14;
      }
    }
    else if ((v7 & 2) == 0)
    {
      goto LABEL_12;
    }
    CGAffineTransformMakeScale(&v32, 1.0, -1.0);
    v31 = v36;
    CGAffineTransformConcat(&v34, &v31, &v32);
    v36 = v34;
    CGAffineTransformMakeTranslation(&v31, 0.0, ty);
    t2 = v36;
    CGAffineTransformConcat(&v34, &t2, &v31);
    v36 = v34;
    if ((v7 & 4) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_15:
  if (*(_BYTE *)(a1 + 152))
    objc_msgSend(*(id *)a1, "setHidden:", 0);
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForHidingLayer(const void *a1, void *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  id v8;

  if (!a2)
    return FigSignalErrorAt();
  v6 = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
  if (!v6)
    return FigSignalErrorAt();
  v7 = (uint64_t)v6;
  *v6 = a2;
  v8 = a2;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a3, v7, (uint64_t)fps_disposeCallHideMaskingLayer, (uint64_t)fps_copyDescriptionForCallHideMaskingLayer, (uint64_t)fps_callHideMaskingLayer);
}

void fps_disposeCallHideMaskingLayer(id *a1)
{

  free(a1);
}

__CFString *fps_copyDescriptionForCallHideMaskingLayer(id *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Call hideMaskingLayer"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n maksking layer : %@"), objc_msgSend(*a1, "description"));
  return Mutable;
}

uint64_t fps_callHideMaskingLayer(id *a1)
{
  objc_msgSend(*a1, "setHidden:", 1);
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToTargetMirroringObserverAtDisplayOfCALayer(const void *a1, void *a2, void *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  id v10;
  id v11;

  if (!a3)
    return FigSignalErrorAt();
  v8 = malloc_type_malloc(0x18uLL, 0x80040D6874129uLL);
  if (!v8)
    return FigSignalErrorAt();
  v9 = (uint64_t)v8;
  v8[1] = a3;
  v10 = a3;
  *(_QWORD *)(v9 + 16) = (id)objc_msgSend(*(id *)(v9 + 8), "superlayer");
  *(_QWORD *)v9 = a2;
  v11 = a2;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v9, (uint64_t)fps_disposeTargetMirroringObserverAtDisplayOfCALayer, (uint64_t)fps_copyDescriptionForTargetMirroringObserverAtDisplayOfCALayer, (uint64_t)fps_targetMirroringObserverAtDisplayOfCALayer);
}

void fps_disposeTargetMirroringObserverAtDisplayOfCALayer(id *a1)
{

  free(a1);
}

__CFString *fps_copyDescriptionForTargetMirroringObserverAtDisplayOfCALayer(id *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("TargetMirroringObserverAtDisplayOfCALayer"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n observer : %@"), objc_msgSend(*a1, "description"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n videoLayer : %@"), objc_msgSend(a1[1], "description"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n videoLayerParent : %@"), objc_msgSend(a1[2], "description"));
  return Mutable;
}

uint64_t fps_targetMirroringObserverAtDisplayOfCALayer(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v19 = MEMORY[0x19403137C]();
  v1 = *(void **)(v18 + 8);
  if (v1)
  {
    v2 = *MEMORY[0x1E0CD2A18];
    v3 = *MEMORY[0x1E0CD2A20];
    while (1)
    {
      v4 = (void *)objc_msgSend((id)objc_msgSend(v1, "context", v18, v19), "options");
      v5 = (void *)objc_msgSend(v4, "objectForKey:", v2);
      if (v5)
      {
        v6 = objc_msgSend(v5, "unsignedIntValue");
        v20 = 0u;
        v21 = 0u;
        v22 = 0u;
        v23 = 0u;
        v7 = (void *)objc_msgSend(MEMORY[0x1E0CD2728], "displays");
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v8)
        {
          v9 = v8;
          v10 = *(_QWORD *)v21;
LABEL_6:
          v11 = 0;
          while (1)
          {
            if (*(_QWORD *)v21 != v10)
              objc_enumerationMutation(v7);
            v12 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * v11);
            if (v6 == objc_msgSend(v12, "displayId"))
              break;
            if (v9 == ++v11)
            {
              v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
              if (v9)
                goto LABEL_6;
              goto LABEL_14;
            }
          }
          v13 = objc_msgSend(v12, "name");
          if (v13)
            break;
        }
      }
LABEL_14:
      v13 = objc_msgSend(v4, "objectForKey:", v3);
      if (v13)
        break;
      v1 = (void *)objc_msgSend(v1, "superlayer");
      if (!v1)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay", v18, v19), "name");
  }
  v15 = (id *)v18;
  v14 = (void *)v19;
  v16 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", v13, v18, v19);
  if (*v15)
    objc_msgSend(*v15, "setBaseDisplayList:", v16);
  objc_autoreleasePoolPop(v14);
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToConfigureFigVideoQueueHostLayerAndPostNotification(const void *a1, void *a2, void *a3, int a4, const void *a5, const void *a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  id v16;
  id v17;

  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v14 = malloc_type_malloc(0x28uLL, 0x10E004019DEF5ECuLL);
  if (!v14)
    return FigSignalErrorAt();
  v15 = (uint64_t)v14;
  *v14 = a2;
  v16 = a2;
  *(_QWORD *)(v15 + 8) = a3;
  v17 = a3;
  *(_QWORD *)(v15 + 16) = a5;
  if (a5)
    CFRetain(a5);
  *(_QWORD *)(v15 + 32) = a6;
  if (a6)
    CFRetain(a6);
  *(_DWORD *)(v15 + 24) = a4;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a7, v15, (uint64_t)fps_disposeConfigureFigVideoQueueHostLayerAndPostNotification, (uint64_t)fps_copyDescriptionForConfigureFigVideoQueueHostLayerAndPostNotification, (uint64_t)fps_configureFigVideoQueueHostLayerAndPostNotification);
}

void fps_disposeConfigureFigVideoQueueHostLayerAndPostNotification(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  free((void *)a1);
}

__CFString *fps_copyDescriptionForConfigureFigVideoQueueHostLayerAndPostNotification(id *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Call FVQClientSetupHostLayer"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n clientVideoLayer : %@; hostLayer : %@ "),
    objc_msgSend(a1[1], "description"),
    objc_msgSend(*a1, "description"));
  return Mutable;
}

uint64_t fps_configureFigVideoQueueHostLayerAndPostNotification(_QWORD *a1)
{
  objc_msgSend((id)*a1, "removeFromSuperlayer");
  objc_msgSend((id)*a1, "setContextId:", *((unsigned int *)a1 + 6));
  objc_msgSend((id)*a1, "setEdgeAntialiasingMask:", 0);
  objc_msgSend((id)*a1, "setFillMode:", *MEMORY[0x1E0CD2B58]);
  objc_msgSend((id)a1[1], "addSublayer:", *a1);
  if (a1[4])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeToResizeClientVideoLayerWithinHostLayer(const void *a1, void *a2, void *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  _QWORD *v16;
  uint64_t v17;
  id v18;
  id v19;

  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v16 = malloc_type_malloc(0x30uLL, 0x1080040DAA165ECuLL);
  if (!v16)
    return FigSignalErrorAt();
  v17 = (uint64_t)v16;
  *v16 = a2;
  v18 = a2;
  *(_QWORD *)(v17 + 8) = a3;
  v19 = a3;
  *(double *)(v17 + 16) = a5;
  *(double *)(v17 + 24) = a6;
  *(double *)(v17 + 32) = a7;
  *(double *)(v17 + 40) = a8;
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v17, (uint64_t)fps_disposeResizeClientVideoLayerWithinHostLayer, (uint64_t)fps_copyDescriptionForResizeClientVideoLayerWithinHostLayer, (uint64_t)fps_resizeClientVideoLayerWithinHostLayer);
}

void fps_disposeResizeClientVideoLayerWithinHostLayer(id *a1)
{

  free(a1);
}

__CFString *fps_copyDescriptionForResizeClientVideoLayerWithinHostLayer(id *a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("ResizeClientVideoLayerWithinHostLayer"));
  CFStringAppendFormat(Mutable, 0, CFSTR("\n clientVideoLayer : %@; hostLayer : %@ "),
    objc_msgSend(a1[1], "description"),
    objc_msgSend(*a1, "description"));
  return Mutable;
}

uint64_t fps_resizeClientVideoLayerWithinHostLayer(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGAffineTransform v10;
  CGAffineTransform v11;
  CGAffineTransform v12;

  v2 = *(id *)a1;
  objc_msgSend(*(id *)(a1 + 8), "bounds");
  objc_msgSend(v2, "setFrame:");
  if (*(double *)(a1 + 32) > 0.0 && *(double *)(a1 + 40) > 0.0)
  {
    objc_msgSend(*(id *)(a1 + 8), "bounds");
    v4 = v3;
    v6 = v5;
    memset(&v12, 0, sizeof(v12));
    v7 = *(double *)(a1 + 32);
    v8 = *(double *)(a1 + 40);
    CGAffineTransformMakeScale(&v12, v3 / v7, v5 / v8);
    v10 = v12;
    CGAffineTransformTranslate(&v11, &v10, (v4 - v7) * 0.5, (v6 - v8) * 0.5);
    v12 = v11;
    objc_msgSend(*(id *)a1, "setAffineTransform:", &v11);
  }
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue(uint64_t a1, const void *a2, NSObject *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;

  if (a3)
  {
    if (!a2)
      return 0;
    v8 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    if (v8)
    {
      v9 = (uint64_t)v8;
      *v8 = a2;
      CFRetain(a2);
      *(_QWORD *)(v9 + 8) = a3;
      dispatch_retain(a3);
      return FigDeferredTransactionAppendPostCommitChangeWithCallback(a1, a4, v9, (uint64_t)fps_disposeReleasePlayerResourcesOnQueueContext, (uint64_t)fps_copyDescriptionForReleasePlayerResourcesOnQueueContext, (uint64_t)fps_releasePlayerResources);
    }
  }
  return FigSignalErrorAt();
}

void fps_disposeReleasePlayerResourcesOnQueueContext(const void **a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    dispatch_release(v3);
  free(a1);
}

__CFString *fps_copyDescriptionForReleasePlayerResourcesOnQueueContext()
{
  __CFString *Mutable;
  const void *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("Release player resources"));
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\nof: %@"), v1);
  if (v1)
    CFRelease(v1);
  return Mutable;
}

uint64_t fps_releasePlayerResources(uint64_t a1)
{
  CFTypeRef v2;
  NSObject *v3;
  _QWORD block[5];

  v2 = *(CFTypeRef *)a1;
  if (*(_QWORD *)a1)
    CFRetain(*(CFTypeRef *)a1);
  v3 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fps_releasePlayerResources_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = v2;
  dispatch_async(v3, block);
  return 0;
}

uint64_t FPSupport_AppendDeferredTransactionChangeForSettingImageQueueSlotsOnVideoLayers(const void *a1, CFArrayRef theArray, const __CFArray *a3, uint64_t a4)
{
  CFIndex Count;
  CFIndex v9;
  _QWORD *v10;
  uint64_t v11;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (!a3)
      return 0;
  }
  else
  {
    Count = 0;
    if (!a3)
      return 0;
  }
  v9 = CFArrayGetCount(a3);
  if (Count < 1 || v9 < 1)
    return 0;
  v10 = malloc_type_malloc(0x10uLL, 0x600405BB7FD7CuLL);
  if (!v10)
    return FigSignalErrorAt();
  v11 = (uint64_t)v10;
  *v10 = a3;
  CFRetain(a3);
  *(_QWORD *)(v11 + 8) = theArray;
  if (theArray)
    CFRetain(theArray);
  return FigDeferredTransactionAppendChangeWithCallback(a1, 1, a4, v11, (uint64_t)fps_disposeSetCAImageQueueSlotsOnVideoLayersContext, (uint64_t)fps_copyDescriptionForSetImageQueueSlotsOnVideoLayersContext, (uint64_t)fps_setCAImageQueueSlotsOnVideoLayers);
}

void fps_disposeSetCAImageQueueSlotsOnVideoLayersContext(const void **a1)
{
  const void *v2;
  const void *v3;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
  free(a1);
}

__CFString *fps_copyDescriptionForSetImageQueueSlotsOnVideoLayersContext()
{
  __CFString *Mutable;
  const void *v1;
  const void *v2;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("Set image queue slots: %@"), v1);
  if (v1)
    CFRelease(v1);
  v2 = (const void *)FigCFCopyCompactDescription();
  CFStringAppendFormat(Mutable, 0, CFSTR("\non video layers: %@"), v2);
  if (v2)
    CFRelease(v2);
  return Mutable;
}

uint64_t fps_setCAImageQueueSlotsOnVideoLayers(CFArrayRef *a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const __CFArray *v4;
  uint64_t v5;
  CFIndex i;
  void *ValueAtIndex;
  const __CFNumber *v8;
  unsigned int valuePtr;

  v2 = a1[1];
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  v4 = *a1;
  if (*a1)
    v4 = (const __CFArray *)CFArrayGetCount(v4);
  if (Count >= (uint64_t)v4)
    v5 = (uint64_t)v4;
  else
    v5 = Count;
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      valuePtr = 0;
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a1, i);
      v8 = (const __CFNumber *)CFArrayGetValueAtIndex(a1[1], i);
      CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
      objc_msgSend(ValueAtIndex, "setContents:", objc_msgSend(MEMORY[0x1E0CD2720], "objectForSlot:", valuePtr));
    }
  }
  return 0;
}

uint64_t FPSupport_GetDisplayModeSwitchMonitor()
{
  return 0;
}

uint64_t FPSupport_IsDisplayModeSwitchInProgress()
{
  return 0;
}

void FPSupport_ReportStallToSymptomLog(int a1, const void *a2, const __CFDictionary *a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const void *Value;
  const void *v12;
  const __CFData *v13;
  const __CFString *v14;
  const __CFString *v15;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v7 = Mutable;
    if (CFEqual(a2, CFSTR("wired")) || CFEqual(a2, CFSTR("lan")))
    {
      v8 = CFSTR("WiredEthernet");
    }
    else if (CFEqual(a2, CFSTR("wifi-infra")) || CFEqual(a2, CFSTR("wifi-AWDL")))
    {
      v8 = CFSTR("Wifi");
    }
    else if (CFEqual(a2, CFSTR("wwan")))
    {
      v8 = CFSTR("Cellular");
    }
    else if (CFEqual(a2, CFSTR("loopback")))
    {
      v8 = CFSTR("Loopback");
    }
    else
    {
      v8 = CFSTR("Other");
    }
    v9 = CFSTR("File");
    if (a1 == 2)
      v9 = CFSTR("HTTP Progressive Download");
    if (a1)
      v10 = v9;
    else
      v10 = CFSTR("HTTP Live Stream");
    if (a3)
    {
      Value = CFDictionaryGetValue(a3, CFSTR("assetOption_ClientBundleIdentifier"));
      if (!Value || (v12 = CFRetain(Value)) == 0)
      {
        v13 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("assetOption_ClientAuditToken"));
        v12 = FigCFHTTPCopyClientProcessName(v13);
      }
    }
    else
    {
      v12 = 0;
    }
    CFDictionarySetValue(v7, CFSTR("name"), CFSTR("MEDIA_PLAYBACK_STALL"));
    CFDictionarySetValue(v7, CFSTR("mediaType"), v10);
    CFDictionarySetValue(v7, CFSTR("transportType"), v10);
    CFDictionarySetValue(v7, CFSTR("interfaceType"), v8);
    if (v12)
      CFDictionarySetValue(v7, CFSTR("BundleID"), v12);
    v14 = (const __CFString *)FigCFStringCreateWithJSONDictionary();
    v15 = v14;
    if (v14 && CFStringGetCStringPtr(v14, 0x8000100u))
      fig_post_a_symptom_guts();
    if (v12)
      CFRelease(v12);
    if (v15)
      CFRelease(v15);
    CFRelease(v7);
  }
}

void FPSupport_ReportAlgosScoreToSymptomLog(const void *a1, const void *a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const __CFString *v6;
  const __CFString *v7;

  if (a2)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v5 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("name"), CFSTR("MEDIA_PLAYBACK_ALGOS"));
      CFDictionarySetValue(v5, CFSTR("MEDIA_PLAYBACK_ALGOS"), a2);
      if (a1)
        CFDictionarySetValue(v5, CFSTR("BundleID"), a1);
      v6 = (const __CFString *)FigCFStringCreateWithJSONDictionary();
      if (v6)
      {
        v7 = v6;
        if (CFStringGetCStringPtr(v6, 0x8000100u))
          fig_post_a_symptom_guts();
        CFRelease(v7);
      }
      CFRelease(v5);
    }
  }
}

uint64_t FPSupport_CopyCombinedSetPropertiesErrDictionary(CFTypeRef cf, const void *a2, uint64_t *a3)
{
  uint64_t MutableCopy;

  if (a3)
  {
    if (cf)
    {
      if (a2)
      {
        MutableCopy = FigCFDictionaryCreateMutableCopy();
        FigCFDictionaryAddEntriesToDictionaryWithRecursion();
LABEL_9:
        *a3 = MutableCopy;
        return 0;
      }
    }
    else
    {
      if (!a2)
      {
        MutableCopy = 0;
        goto LABEL_9;
      }
      cf = a2;
    }
    MutableCopy = (uint64_t)CFRetain(cf);
    goto LABEL_9;
  }
  return 0;
}

uint64_t FPSupport_HandlePlayerSetPropertiesAndCopyModification(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, BOOL *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD v13[4];

  v13[0] = 0;
  v13[1] = a1;
  v13[2] = a3;
  v13[3] = a4;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4)
    return fpSupport_handlePlayerOrItemSetPropertiesAndCopyModification((uint64_t)v13, a2, a5, a6, a7);
  else
    return FigSignalErrorAt();
}

uint64_t fpSupport_handlePlayerOrItemSetPropertiesAndCopyModification(uint64_t a1, const __CFDictionary *cf, BOOL *a3, _QWORD *a4, _QWORD *a5)
{
  CFTypeID v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef v12;
  _QWORD context[2];
  CFTypeRef v15;
  CFTypeRef cfa;
  uint64_t v17;

  context[0] = a1;
  context[1] = cf;
  cfa = 0;
  v17 = 0;
  v15 = 0;
  if (cf && (v9 = CFGetTypeID(cf), v9 == CFDictionaryGetTypeID()))
  {
    CFDictionaryApplyFunction(cf, (CFDictionaryApplierFunction)fpSupport_handleSetPropertiesApplier, context);
    v10 = v17;
    if (!(_DWORD)v17)
    {
      if (v15)
        v11 = v15;
      else
        v11 = cf;
      if (a3)
        *a3 = FigCFDictionaryGetCount() == 0;
      if (a4)
      {
        *a4 = v11;
        CFRetain(v11);
      }
      if (a5)
      {
        v12 = cfa;
        if (cfa)
          v12 = CFRetain(cfa);
        v10 = 0;
        *a5 = v12;
      }
      else
      {
        v10 = 0;
      }
    }
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
  if (v15)
    CFRelease(v15);
  if (cfa)
    CFRelease(cfa);
  return v10;
}

uint64_t FPSupport_HandlePlayerSetPropertiesAndForwardToSubPlayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t *a6)
{
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v16;
  CFTypeRef v17;
  BOOL v18;

  v18 = 0;
  v16 = 0;
  v17 = 0;
  cf = 0;
  if (!a5 || !a2)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a5, a3, a4, &v18, &cf, &v17);
  if ((_DWORD)v8)
  {
    v12 = v8;
  }
  else
  {
    if (v18)
    {
      v13 = 0;
LABEL_9:
      FPSupport_CopyCombinedSetPropertiesErrDictionary(v17, v13, a6);
      v12 = 0;
      goto LABEL_11;
    }
    v9 = cf;
    v10 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
    if (v10)
    {
      v11 = v10(a2, v9, &v16);
LABEL_7:
      v12 = v11;
      if ((_DWORD)v11)
        goto LABEL_11;
      v13 = v16;
      goto LABEL_9;
    }
    v12 = 4294954514;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, BOOL *a5, _QWORD *a6, _QWORD *a7)
{
  _QWORD v13[4];

  v13[1] = a1;
  v13[0] = 1;
  v13[2] = a3;
  v13[3] = a4;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a4)
    return fpSupport_handlePlayerOrItemSetPropertiesAndCopyModification((uint64_t)v13, a2, a5, a6, a7);
  else
    return FigSignalErrorAt();
}

uint64_t FPSupport_HandlePlayerSetPropertyAndCopyModification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, CFTypeRef *a7, CFTypeRef *a8)
{
  _QWORD v15[4];

  v15[0] = 1;
  v15[1] = a1;
  v15[2] = a4;
  v15[3] = a5;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a5)
    return fpSupport_handlePlayerOrItemSetPropertyAndCopyModification((uint64_t)v15, a2, a3, a6, a7, a8);
  else
    return FigSignalErrorAt();
}

uint64_t fpSupport_handlePlayerOrItemSetPropertyAndCopyModification(uint64_t a1, CFTypeRef cf, uint64_t a3, _BYTE *a4, CFTypeRef *a5, CFTypeRef *a6)
{
  CFTypeID v12;
  uint64_t v13;
  CFTypeID v14;
  uint64_t v15;
  char v17;
  CFTypeRef v18;
  CFTypeRef cfa;

  v18 = 0;
  cfa = 0;
  v17 = 0;
  if (!cf)
    goto LABEL_13;
  v12 = CFGetTypeID(cf);
  if (v12 != CFStringGetTypeID())
    goto LABEL_13;
  v13 = fpSupport_handleSetPropertiesInternal(a1, (uint64_t)cf, a3, (uint64_t)&v17, (uint64_t)&cfa, (uint64_t)&v18);
  if ((_DWORD)v13)
  {
LABEL_14:
    v15 = v13;
    goto LABEL_15;
  }
  if (!v17)
  {
    if (!cfa || (v14 = CFGetTypeID(cfa), v14 != CFStringGetTypeID()))
    {
LABEL_13:
      v13 = FigSignalErrorAt();
      goto LABEL_14;
    }
  }
  if (a5)
  {
    *a5 = cfa;
    cfa = 0;
  }
  if (a6)
  {
    *a6 = v18;
    v18 = 0;
  }
  v15 = 0;
  if (a4)
    *a4 = v17;
LABEL_15:
  if (cfa)
    CFRelease(cfa);
  if (v18)
    CFRelease(v18);
  return v15;
}

uint64_t FPSupport_HandlePlayerSetPropertyAndForwardToSubPlayer(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v12;
  char v14;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  v14 = 0;
  if (!a3 || !a2)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a3, a4, a5, a6, &v14, &cf, &v15);
  if ((_DWORD)v7)
  {
LABEL_7:
    v12 = v7;
    goto LABEL_9;
  }
  if (v14)
  {
    v12 = 0;
  }
  else
  {
    v9 = v15;
    v8 = cf;
    FigBaseObject = FigPlayerGetFigBaseObject(a2);
    v11 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
    {
      v7 = v11(FigBaseObject, v8, v9);
      goto LABEL_7;
    }
    v12 = 4294954514;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  return v12;
}

uint64_t FPSupport_HandlePlaybackItemSetPropertyAndForwardToSubItem(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v12;
  char v14;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  v14 = 0;
  if (!a3 || !a2)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a3, a4, a5, a6, &v14, &cf, &v15);
  if ((_DWORD)v7)
  {
LABEL_7:
    v12 = v7;
    goto LABEL_9;
  }
  if (v14)
  {
    v12 = 0;
  }
  else
  {
    v9 = v15;
    v8 = cf;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
    v11 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
    {
      v7 = v11(FigBaseObject, v8, v9);
      goto LABEL_7;
    }
    v12 = 4294954514;
  }
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  return v12;
}

uint64_t FPSupport_HandlePlaybackItemSetPropertiesAndForwardToSubItem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, uint64_t *a6)
{
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef cf;
  CFTypeRef v16;
  CFTypeRef v17;
  BOOL v18;

  v18 = 0;
  v16 = 0;
  v17 = 0;
  cf = 0;
  if (!a5 || !a2)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v8 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a5, a3, a4, &v18, &cf, &v17);
  if ((_DWORD)v8)
  {
    v12 = v8;
  }
  else
  {
    if (v18)
    {
      v13 = 0;
LABEL_9:
      FPSupport_CopyCombinedSetPropertiesErrDictionary(v17, v13, a6);
      v12 = 0;
      goto LABEL_11;
    }
    v9 = cf;
    v10 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
    if (v10)
    {
      v11 = v10(a2, v9, &v16);
LABEL_7:
      v12 = v11;
      if ((_DWORD)v11)
        goto LABEL_11;
      v13 = v16;
      goto LABEL_9;
    }
    v12 = 4294954514;
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v12;
}

BOOL FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v6;
  unsigned int (*v7)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t SInt32;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  _BOOL8 v17;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2 && !FigDebugIsInternalBuild())
    goto LABEL_15;
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v6)
    goto LABEL_15;
  v7 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(v6 + 48);
  if (!v7 || v7(a1, *MEMORY[0x1E0D495E8], *MEMORY[0x1E0C9AE00], &cf))
    goto LABEL_15;
  SInt32 = FigCFNumberGetSInt32();
  if (!(_DWORD)SInt32)
  {
    FigSignalErrorAt();
    goto LABEL_15;
  }
  v9 = SInt32;
  v10 = (void *)MEMORY[0x19403137C]();
  v11 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", v9);
  v12 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", v11, 0);
  if (!v12)
  {
    objc_autoreleasePoolPop(v10);
LABEL_15:
    v17 = 0;
    v13 = 0;
    goto LABEL_16;
  }
  v13 = (const void *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "bundle"), "identifier"), "copy");
  objc_autoreleasePoolPop(v10);
  if (v13)
  {
    v14 = (const void *)FigCopyCFPreferenceAppValueOrOptionCFTypeWithDefault();
    v15 = v14;
    if (v14 && (v16 = CFGetTypeID(v14), v16 != CFArrayGetTypeID()))
    {
      FigSignalErrorAt();
      v17 = 0;
    }
    else
    {
      v17 = FigCFArrayContainsValue() != 0;
      if (a4)
        *a4 = CFRetain(v13);
    }
    goto LABEL_17;
  }
  v17 = 0;
LABEL_16:
  v15 = 0;
LABEL_17:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v15)
    CFRelease(v15);
  return v17;
}

uint64_t FPSupport_HasTrackOfType(uint64_t a1, uint64_t a2)
{
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *);
  unsigned __int8 v5;
  uint64_t v6;
  CMFormatDescriptionRef v7;
  uint64_t MediaSubType;
  CMFormatDescriptionRef desc;
  int v11;
  CFTypeRef cf;

  cf = 0;
  v11 = 0;
  v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 64);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v4(a1, v6, a2, &cf, &v11))
        break;
      if ((_DWORD)a2 == 1986618469)
      {
        desc = 0;
        if (fpSupport_copyFormatDescription((uint64_t)cf, &desc))
          break;
        v7 = desc;
        if (desc)
        {
          MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
          if (fpSupport_isVideoCodecTypeSupported(MediaSubType, 0)
            || CVPixelFormatDescriptionGetDescriptionWithPixelFormatType())
          {
            v5 = 1;
          }
          CFRelease(v7);
        }
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      ++v6;
      v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  if (cf)
    CFRelease(cf);
  return v5;
}

BOOL fpSupport_isVideoCodecTypeSupported(uint64_t a1, char a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  const void **v5;
  const void **v6;
  int VideoDecoderInstance;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  v5 = (const void **)MEMORY[0x1E0C9AE50];
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if ((a2 & 1) == 0)
  {
    if ((a2 & 4) == 0)
    {
      if ((a2 & 2) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CEDCA8], *v6);
  if ((a2 & 2) == 0)
  {
LABEL_4:
    if ((a2 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CEDC88], *v5);
  if ((a2 & 8) == 0)
  {
LABEL_5:
    if ((a2 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CEDC98], *v5);
  if ((a2 & 0x10) == 0)
  {
LABEL_6:
    if ((a2 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_15:
  CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CEDCC8], *v5);
  if ((a2 & 0x20) != 0)
LABEL_7:
    CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CEDCA0], *v5);
LABEL_8:
  VideoDecoderInstance = VTSelectAndCreateVideoDecoderInstance();
  if (v4)
    CFRelease(v4);
  return VideoDecoderInstance == 0;
}

uint64_t FPSupport_GetAudioFormatDescriptionSpatializationEligibility(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;
  UInt32 inSpecifierSize[2];
  void *inSpecifier;

  *(_QWORD *)inSpecifierSize = 0;
  inSpecifier = 0;
  v4 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout())
    return 0;
  result = 0;
  if (a2)
    *a2 = 0;
  return result;
}

uint64_t FPSupport_CopySingleVideoChannelAndMultichannelVideoTargetsFromArray(const __CFArray *a1, CFAllocatorRef allocator, __CFArray **a3, CFMutableArrayRef *a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFMutableArrayRef v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  CMTagValue v15;
  const void *ValueAtIndex;
  void (*v17)(const void *, CFAllocatorRef, CFArrayRef *);
  const void *v18;
  const OpaqueCMTagCollection *DataChannelByIndex;
  int v20;
  __CFArray *v21;
  uint64_t v22;
  uint64_t v23;
  CMTagValue v25;
  uint64_t v26;
  __CFArray **v27;
  CFMutableArrayRef *v28;
  CFArrayRef theArray;
  CMTag v30;
  CMTag v31;
  CMTag v32;

  theArray = 0;
  if (!a1)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v9 = Mutable;
    v10 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    if (v10)
    {
      v27 = a3;
      v28 = a4;
      Count = CFArrayGetCount(a1);
      if (Count >= 1)
      {
        v12 = Count;
        v13 = 0;
        v14 = *MEMORY[0x1E0CA5228];
        v15 = *(_QWORD *)(MEMORY[0x1E0CA5228] + 8);
        v25 = *(_QWORD *)(MEMORY[0x1E0CA5288] + 8);
        v26 = *MEMORY[0x1E0CA5288];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v13);
          v17 = *(void (**)(const void *, CFAllocatorRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 48);
          if (v17)
            v17(ValueAtIndex, allocator, &theArray);
          if (!theArray)
            goto LABEL_20;
          if (CFArrayGetCount(theArray) != 1)
            goto LABEL_16;
          v18 = CFArrayGetValueAtIndex(theArray, 0);
          if (FigDataChannelGroupGetCountOfDataChannels((uint64_t)v18) != 1)
            goto LABEL_16;
          if ((DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)v18, 0), MEMORY[0x19402F03C]() == 1)&& (v30.value = 1634630006, *(_QWORD *)&v30.category = 0x40000005706C7972, CMTagCollectionContainsTag(DataChannelByIndex, v30))|| (*(_QWORD *)&v31.category = v14, v31.value = v15, CMTagCollectionContainsTag(DataChannelByIndex, v31))&& (v32.value = v25, *(_QWORD *)&v32.category = v26, CMTagCollectionContainsTag(DataChannelByIndex, v32)))
          {
            v20 = 0;
          }
          else
          {
LABEL_16:
            v20 = 1;
          }
          if (theArray)
          {
            CFRelease(theArray);
            theArray = 0;
          }
          v21 = v9;
          if (v20)
LABEL_20:
            v21 = v10;
          CFArrayAppendValue(v21, ValueAtIndex);
          ++v13;
        }
        while (v12 != v13);
      }
      if (v27)
      {
        *v27 = v9;
        v9 = 0;
      }
      if (v28)
      {
        *v28 = v10;
        v10 = 0;
      }
      v22 = 0;
      v23 = 0;
      if (!v9)
        goto LABEL_28;
    }
    else
    {
      v22 = FigSignalErrorAt();
    }
    CFRelease(v9);
    v23 = v22;
LABEL_28:
    if (v10)
      CFRelease(v10);
    goto LABEL_30;
  }
  v23 = FigSignalErrorAt();
LABEL_30:
  if (theArray)
    CFRelease(theArray);
  return v23;
}

uint64_t FPSupport_CreateDefaultTagCollectionForVideo(CMTagCollectionRef *a1)
{
  __int128 v2;
  uint64_t v3;
  CMTagCollectionRef newCollectionOut;
  CMTag tags;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  newCollectionOut = 0;
  v2 = *MEMORY[0x1E0CA2808];
  tags = (CMTag)*MEMORY[0x1E0CA5288];
  v7 = v2;
  v8 = *MEMORY[0x1E0CA2828];
  v3 = CMTagCollectionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &tags, 3, &newCollectionOut);
  if (!a1 || (_DWORD)v3)
  {
    if (newCollectionOut)
      CFRelease(newCollectionOut);
  }
  else
  {
    *a1 = newCollectionOut;
  }
  return v3;
}

uint64_t FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(const opaqueCMFormatDescription *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t Mutable;
  CFPropertyListRef Extension;
  CFPropertyListRef *v6;
  CFPropertyListRef v7;
  CFTypeID v8;
  int v9;
  CFPropertyListRef v10;
  CFPropertyListRef v11;
  CFTypeID v12;
  uint64_t v13;
  CMTagValue v14;
  const opaqueCMFormatDescription *v15;
  CMTagValue v16;
  uint64_t v17;
  CMTagValue v18;
  CMTagValue *v19;
  CFPropertyListRef v20;
  unint64_t v21;
  unint64_t v22;
  CMTagValue v23;
  const void *v24;
  CFTypeID v25;
  unint64_t *v26;
  int v27;
  CFPropertyListRef v28;
  const void *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  CMTagValue v34;
  _QWORD *v35;
  CFTypeID v36;
  BOOL v37;
  uint64_t *v38;
  CFPropertyListRef v39;
  CFTypeID v40;
  uint64_t v41;
  int v43;
  CMTagValue tagToAdd;
  CMTagDataType v45;
  CMTag v46;
  CMTag v47;
  CMTag v48;

  if (a2)
  {
    v2 = a2;
    Mutable = FigTagCollectionCreateMutable();
    if ((_DWORD)Mutable)
      return Mutable;
    Extension = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA4A38]);
    v6 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
    if (Extension)
    {
      v7 = Extension;
      v8 = CFGetTypeID(Extension);
      if (v8 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      v9 = v7 == *v6;
    }
    else
    {
      v9 = 0;
    }
    v10 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA4A40]);
    if (v10)
    {
      v11 = v10;
      v12 = CFGetTypeID(v10);
      if (v12 != CFBooleanGetTypeID())
        return FigSignalErrorAt();
      if (v11 == *v6)
        v9 |= 2u;
    }
    v13 = *MEMORY[0x1E0CA5208];
    v14 = *(_QWORD *)(MEMORY[0x1E0CA5208] + 8);
    v15 = (const opaqueCMFormatDescription *)HIDWORD(*MEMORY[0x1E0CA5208]);
    if (v9 == 3)
    {
      v19 = (CMTagValue *)MEMORY[0x1E0CA5278];
    }
    else if (v9 == 2)
    {
      v19 = (CMTagValue *)MEMORY[0x1E0CA5290];
    }
    else
    {
      v16 = *MEMORY[0x1E0CA5208];
      v17 = HIDWORD(*MEMORY[0x1E0CA5208]);
      v18 = *(_QWORD *)(MEMORY[0x1E0CA5208] + 8);
      if (v9 != 1)
        goto LABEL_18;
      v19 = (CMTagValue *)MEMORY[0x1E0CA5280];
    }
    v16 = *v19;
    v18 = v19[1];
    v17 = HIDWORD(*v19);
LABEL_18:
    v45 = v17;
    v20 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA4A80]);
    LODWORD(v21) = v13;
    LODWORD(v22) = (_DWORD)v15;
    v23 = v14;
    if (!v20)
      goto LABEL_25;
    v24 = v20;
    v25 = CFGetTypeID(v20);
    if (v25 != CFStringGetTypeID())
      return FigSignalErrorAt();
    if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA4AB8], v24))
    {
      v26 = (unint64_t *)MEMORY[0x1E0CA5240];
    }
    else
    {
      v27 = CFEqual((CFTypeRef)*MEMORY[0x1E0CA4AB0], v24);
      LODWORD(v21) = v13;
      LODWORD(v22) = (_DWORD)v15;
      v23 = v14;
      if (!v27)
        goto LABEL_25;
      v26 = (unint64_t *)MEMORY[0x1E0CA5238];
    }
    v21 = *v26;
    v23 = v26[1];
    v22 = HIDWORD(v21);
LABEL_25:
    tagToAdd = v23;
    v28 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA4A60]);
    if (v28)
    {
      v29 = v28;
      v43 = v13;
      v30 = v21;
      v31 = (int)v15;
      v15 = a1;
      v32 = v22;
      v33 = v16;
      v16 = v14;
      v34 = v18;
      v35 = v2;
      v36 = CFGetTypeID(v28);
      v37 = v36 == CFStringGetTypeID();
      v2 = v35;
      v18 = v34;
      v14 = v16;
      LODWORD(v16) = v33;
      LODWORD(v22) = v32;
      a1 = v15;
      LODWORD(v15) = v31;
      LODWORD(v21) = v30;
      LODWORD(v13) = v43;
      if (!v37)
        return FigSignalErrorAt();
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA4A98], v29))
      {
        v38 = (uint64_t *)MEMORY[0x1E0CA5250];
LABEL_36:
        v13 = *v38;
        v14 = v38[1];
        v15 = (const opaqueCMFormatDescription *)HIDWORD(*v38);
        goto LABEL_37;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA4AA8], v29))
      {
        v38 = (uint64_t *)MEMORY[0x1E0CA5260];
        goto LABEL_36;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA4A90], v29))
      {
        v38 = (uint64_t *)MEMORY[0x1E0CA5248];
        goto LABEL_36;
      }
      if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA4AA0], v29))
      {
        v38 = (uint64_t *)MEMORY[0x1E0CA5258];
        goto LABEL_36;
      }
    }
LABEL_37:
    v39 = CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA4A70]);
    if (!v39)
      goto LABEL_40;
    v40 = CFGetTypeID(v39);
    if (v40 == CFNumberGetTypeID())
    {
      FigCFNumberGetSInt32();
LABEL_40:
      if (v45 == kCMTagDataType_Invalid
        || (v46.category = v16,
            v46.dataType = v45,
            v46.value = v18,
            Mutable = CMTagCollectionAddTag(0, v46),
            !(_DWORD)Mutable))
      {
        if (!(_DWORD)v22
          || (v47.category = v21,
              v47.dataType = v22,
              v47.value = tagToAdd,
              Mutable = CMTagCollectionAddTag(0, v47),
              !(_DWORD)Mutable))
        {
          if (!(_DWORD)v15
            || (v48.category = v13,
                v48.dataType = v15,
                v48.value = v14,
                Mutable = CMTagCollectionAddTag(0, v48),
                !(_DWORD)Mutable))
          {
            v41 = 0;
            if (!FigTagCollectionIsEmpty())
              *v2 = 0;
            return v41;
          }
        }
      }
      return Mutable;
    }
    return FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateTagCollectionFromVideoFormatDescriptionExtensionsWithDefaults(const opaqueCMFormatDescription *a1, _QWORD *a2)
{
  uint64_t Mutable;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef cf;

  cf = 0;
  Mutable = FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &cf);
  if ((_DWORD)Mutable)
    goto LABEL_11;
  if (!cf)
  {
    Mutable = FigTagCollectionCreateMutable();
    if (!(_DWORD)Mutable)
      goto LABEL_4;
LABEL_11:
    v5 = Mutable;
    goto LABEL_7;
  }
  Mutable = FigTagCollectionCreateMutableCopy();
  if ((_DWORD)Mutable)
    goto LABEL_11;
LABEL_4:
  v4 = FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories();
  v5 = v4;
  if (a2 && !(_DWORD)v4)
    *a2 = 0;
LABEL_7:
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t FPSupport_AddDefaultVideoTagsToChannelDescriptionForMissingCategories()
{
  uint64_t DefaultTagCollectionForVideo;
  uint64_t v1;
  CFTypeRef cf;

  cf = 0;
  DefaultTagCollectionForVideo = FPSupport_CreateDefaultTagCollectionForVideo((CMTagCollectionRef *)&cf);
  if (!(_DWORD)DefaultTagCollectionForVideo)
    DefaultTagCollectionForVideo = FigTagCollectionAddTagsFromCollectionWithFilterFunction();
  v1 = DefaultTagCollectionForVideo;
  if (cf)
    CFRelease(cf);
  return v1;
}

BOOL fps_tagCollectionFilterDoesNotContainTagOfCategory(CMTagCategory category, int a2, CMTagCollectionRef tagCollection)
{
  return category && CMTagCollectionContainsCategory(tagCollection, category) == 0;
}

BOOL FPSupport_CanFormatsShareVideoRenderPipeline(const opaqueCMFormatDescription *a1, const opaqueCMFormatDescription *a2)
{
  CFIndex Count;
  CFIndex v5;
  _BOOL8 v6;
  __int128 v8;
  CFArrayRef theArray;
  CFArrayRef tagCollectionsOut;

  theArray = 0;
  tagCollectionsOut = 0;
  v8 = 0uLL;
  CMVideoFormatDescriptionCopyTagCollectionArray(a1, &tagCollectionsOut);
  CMVideoFormatDescriptionCopyTagCollectionArray(a2, &theArray);
  if (tagCollectionsOut)
    Count = CFArrayGetCount(tagCollectionsOut);
  else
    Count = 0;
  v5 = (CFIndex)theArray;
  if (theArray)
    v5 = CFArrayGetCount(theArray);
  if (Count != v5)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_13;
  }
  FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, (_QWORD *)&v8 + 1);
  FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a2, &v8);
  if (v8 != 0)
  {
    if (fps_verifyTagsOfCategoryAreEqual(*((uint64_t *)&v8 + 1), v8)
      && fps_verifyTagsOfCategoryAreEqual(*((uint64_t *)&v8 + 1), v8))
    {
      v6 = fps_verifyTagsOfCategoryAreEqual(*((uint64_t *)&v8 + 1), v8);
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  v6 = 1;
LABEL_13:
  if (tagCollectionsOut)
    CFRelease(tagCollectionsOut);
  if (theArray)
    CFRelease(theArray);
  if (*((_QWORD *)&v8 + 1))
    CFRelease(*((CFTypeRef *)&v8 + 1));
  if ((_QWORD)v8)
    CFRelease((CFTypeRef)v8);
  return v6;
}

BOOL fps_verifyTagsOfCategoryAreEqual(uint64_t a1, uint64_t a2)
{
  if (a1)
    FigTagCollectionGetTagsWithCategory();
  if (a2)
    FigTagCollectionGetTagsWithCategory();
  return FigTagEqualToTag() != 0;
}

uint64_t FPSupport_CanVideoRenderPipelineSupportChangingFigImageQueues(const opaqueCMFormatDescription *a1)
{
  _BOOL8 v1;
  CFTypeRef cf;

  cf = 0;
  FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &cf);
  if (!cf)
    return 1;
  FigTagCollectionGetTagsWithCategory();
  v1 = FigTagEqualToTag() == 0;
  if (cf)
    CFRelease(cf);
  return v1;
}

BOOL FPSupport_FormatDescriptionIndicatesStereoVideo(const opaqueCMFormatDescription *a1)
{
  _BOOL8 v2;
  CMTagCollectionRef tagCollection;
  CFArrayRef tagCollectionsOut;

  tagCollection = 0;
  tagCollectionsOut = 0;
  CMVideoFormatDescriptionCopyTagCollectionArray(a1, &tagCollectionsOut);
  if (tagCollectionsOut && CFArrayGetCount(tagCollectionsOut) > 1)
    v2 = 1;
  else
    v2 = !FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &tagCollection)
      && tagCollection
      && CMTagCollectionContainsTag(tagCollection, *MEMORY[0x1E0CA2830]) != 0;
  if (tagCollectionsOut)
  {
    CFRelease(tagCollectionsOut);
    tagCollectionsOut = 0;
  }
  if (tagCollection)
    CFRelease(tagCollection);
  return v2;
}

BOOL FPSupport_FormatDescriptionIndicatesFishEyeProjection(const opaqueCMFormatDescription *a1)
{
  _BOOL8 v1;
  CMTagCollectionRef tagCollection;

  tagCollection = 0;
  if (FPSupport_CreateFigTagCollectionFromFormatDescriptionExtensions(a1, &tagCollection))
  {
    v1 = 0;
  }
  else
  {
    if (!tagCollection)
      return 0;
    v1 = CMTagCollectionContainsTag(tagCollection, *MEMORY[0x1E0CA2820]) != 0;
  }
  if (tagCollection)
    CFRelease(tagCollection);
  return v1;
}

uint64_t FPSupport_RenderPipelineSupportsGaplessTransitionWithFormats(uint64_t a1, CMAudioFormatDescriptionRef formatDescription, CMAudioFormatDescriptionRef otherFormatDescription)
{
  uint64_t (*v6)(uint64_t, CMAudioFormatDescriptionRef);
  uint64_t result;

  if (!a1)
    return CMAudioFormatDescriptionEqual(formatDescription, otherFormatDescription, 1u, 0);
  v6 = *(uint64_t (**)(uint64_t, CMAudioFormatDescriptionRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v6)
    return CMAudioFormatDescriptionEqual(formatDescription, otherFormatDescription, 1u, 0);
  result = v6(a1, otherFormatDescription);
  if ((_DWORD)result != 1)
    return CMAudioFormatDescriptionEqual(formatDescription, otherFormatDescription, 1u, 0);
  return result;
}

BOOL FPSupport_AudioProcessingUnitsConfigurationsAreDifferent()
{
  return FigCFEqual() == 0;
}

uint64_t FPSupport_SeekIDGetSource(int a1)
{
  return (a1 / 100000000);
}

uint64_t FPSupport_InitialSeekIDForSource(int a1)
{
  return (100000000 * a1) | 1u;
}

uint64_t FPSupport_IncrementSeekID(int a1)
{
  int v1;
  int v2;

  v1 = (a1 % 100000000 + 1) % 100000000;
  do
  {
    v2 = v1;
    v1 = 1;
  }
  while (!v2);
  return (a1 - a1 % 100000000 + v2);
}

uint64_t FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem(uint64_t a1, CFStringRef *a2)
{
  uint64_t (*v4)(uint64_t, CFTypeRef *);
  uint64_t v5;
  uint64_t CMBaseObject;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v8;
  CFHashCode v9;
  uint64_t v10;
  CFTypeRef cf;
  CFTypeRef v13;

  cf = 0;
  v13 = 0;
  if (!a2)
  {
LABEL_14:
    v5 = FigSignalErrorAt();
    goto LABEL_15;
  }
  v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (!v4)
    goto LABEL_8;
  v5 = v4(a1, &v13);
  if ((_DWORD)v5)
    goto LABEL_15;
  CMBaseObject = FigAssetGetCMBaseObject(v13);
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v7)
  {
LABEL_8:
    v10 = 4294954514;
    goto LABEL_9;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = v7(CMBaseObject, CFSTR("assetProperty_CreationURL"), *MEMORY[0x1E0C9AE00], &cf);
  if (!(_DWORD)v5)
  {
    if (cf)
    {
      v9 = CFHash(cf);
      v10 = 0;
      *a2 = CFStringCreateWithFormat(v8, 0, CFSTR("#%lu"), v9);
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_15:
  v10 = v5;
LABEL_9:
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t FPSupport_fvtSupportsMetadataTrack(uint64_t a1, const opaqueCMFormatDescription *a2)
{
  unsigned int (*v4)(uint64_t, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  uint64_t v8;
  CMTagValue v9;
  const void *ValueAtIndex;
  CFIndex CountOfDataChannels;
  CFIndex v12;
  CFIndex v13;
  const OpaqueCMTagCollection *DataChannelByIndex;
  uint64_t v15;
  CMTagValue v16;
  CMTagValue v17;
  uint64_t v18;
  uint64_t v19;
  CFArrayRef theArray;
  CMTag v22;
  CMTag v23;

  theArray = 0;
  if (!a1)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!a2)
  {
    FigSignalErrorAt();
    goto LABEL_21;
  }
  v4 = *(unsigned int (**)(uint64_t, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v4 || v4(a1, *MEMORY[0x1E0C9AE00], &theArray))
    goto LABEL_21;
  if (!theArray)
    return 0;
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v6 = Count;
    v7 = 0;
    v8 = *MEMORY[0x1E0CA5220];
    v9 = *(_QWORD *)(MEMORY[0x1E0CA5220] + 8);
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
      CountOfDataChannels = FigDataChannelGroupGetCountOfDataChannels((uint64_t)ValueAtIndex);
      if (CountOfDataChannels >= 1)
        break;
LABEL_14:
      v19 = 0;
      if (++v7 >= v6)
        goto LABEL_22;
    }
    v12 = CountOfDataChannels;
    v13 = 0;
    while (1)
    {
      DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)ValueAtIndex, v13);
      *(_QWORD *)&v22.category = v8;
      v22.value = v9;
      if (CMTagCollectionContainsTag(DataChannelByIndex, v22))
      {
        if (!CMTagCollectionContainsCategory(DataChannelByIndex, kCMTagCategory_MediaSubType))
        {
          v19 = 1;
          goto LABEL_22;
        }
        CMFormatDescriptionGetMediaSubType(a2);
        v15 = FigTagMakeWithOSTypeValue();
        v17 = v16;
        *(_QWORD *)&v23.category = v15;
        v23.value = v17;
        v18 = CMTagCollectionContainsTag(DataChannelByIndex, v23);
        if ((_DWORD)v18)
          break;
      }
      if (v12 == ++v13)
        goto LABEL_14;
    }
    v19 = v18;
    goto LABEL_22;
  }
LABEL_21:
  v19 = 0;
LABEL_22:
  if (theArray)
    CFRelease(theArray);
  return v19;
}

BOOL FPSupport_IsFormatDescAllowable(const opaqueCMFormatDescription *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4)
{
  CMMediaType MediaType;
  const AudioFormatListItem *RichestDecodableFormat;
  signed int mFormatID;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  int v14;
  unsigned __int16 v15;
  int MediaSubType;

  MediaSubType = 0;
  if (!a1)
    return 1;
  MediaType = CMFormatDescriptionGetMediaType(a1);
  if (MediaType == 1668047728)
  {
    MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
    a3 = a4;
    goto LABEL_90;
  }
  if (MediaType == 1936684398)
  {
    RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(a1);
    if (!RichestDecodableFormat)
      goto LABEL_90;
    mFormatID = RichestDecodableFormat->mASBD.mFormatID;
    MediaSubType = mFormatID;
    if (mFormatID <= 1902207794)
    {
      if (mFormatID <= 1685220712)
      {
        if (mFormatID > 1667524656)
        {
          if (mFormatID <= 1667656802)
          {
            if (mFormatID == 1667524657 || mFormatID == 1667574579)
              goto LABEL_89;
            v14 = 1667575091;
          }
          else if (mFormatID > 1668047202)
          {
            if (mFormatID == 1668047203)
              goto LABEL_89;
            v14 = 1668641633;
          }
          else
          {
            if (mFormatID == 1667656803)
              goto LABEL_89;
            v14 = 1667790435;
          }
        }
        else
        {
          if (mFormatID <= 1667326823)
          {
            if (mFormatID == 1633771875 || mFormatID == 1667312947)
              goto LABEL_89;
            v12 = 24931;
          }
          else if (mFormatID > 1667330146)
          {
            if (mFormatID == 1667330147)
              goto LABEL_89;
            v12 = 30307;
          }
          else
          {
            if (mFormatID == 1667326824)
              goto LABEL_89;
            v12 = 25456;
          }
          v14 = v12 | 0x63610000;
        }
        goto LABEL_88;
      }
      if (mFormatID <= 1885430578)
      {
        if (mFormatID <= 1701733237)
        {
          if (mFormatID == 1685220713 || mFormatID == 1700886115)
            goto LABEL_89;
          v14 = 1701733217;
        }
        else if (mFormatID > 1882599479)
        {
          if (mFormatID == 1882599480)
            goto LABEL_89;
          v14 = 1885430115;
        }
        else
        {
          if (mFormatID == 1701733238)
            goto LABEL_89;
          v14 = 1869117027;
        }
        goto LABEL_88;
      }
      if (mFormatID <= 1885547314)
      {
        if ((mFormatID - 1885430579) > 0x3D
          || ((1 << (mFormatID - 51)) & 0x2020000000000001) == 0)
        {
          goto LABEL_90;
        }
LABEL_89:
        MediaSubType = FPSupport_GetPlaintextAudioFormatForEncryptedFormatID(mFormatID);
        goto LABEL_90;
      }
      if (mFormatID <= 1886745440)
      {
        if (mFormatID == 1885547315)
          goto LABEL_89;
        v14 = 1885692723;
        goto LABEL_88;
      }
      if (mFormatID == 1886745441)
        goto LABEL_89;
      v13 = 24931;
    }
    else
    {
      if (mFormatID > 1902667125)
      {
        if (mFormatID <= 2053202738)
        {
          if (mFormatID <= 1902998903)
          {
            if (mFormatID == 1902667126 || mFormatID == 1902671459)
              goto LABEL_89;
            v14 = 1902928227;
            goto LABEL_88;
          }
          if (mFormatID <= 1903587384)
          {
            if (mFormatID == 1902998904)
              goto LABEL_89;
            v14 = 1903522657;
            goto LABEL_88;
          }
          if (mFormatID == 1903587385)
            goto LABEL_89;
          v11 = 24931;
        }
        else
        {
          if (mFormatID > 2053319474)
          {
            if (mFormatID > 2053923170)
            {
              if (mFormatID == 2054517601)
                goto LABEL_89;
              v14 = 2053923171;
            }
            else
            {
              if (mFormatID == 2053319475)
                goto LABEL_89;
              v14 = 2053464883;
            }
            goto LABEL_88;
          }
          if ((mFormatID - 2053202739) <= 0x3D
            && ((1 << (mFormatID - 51)) & 0x2020000000000001) != 0)
          {
            goto LABEL_89;
          }
          v11 = 30307;
        }
        v14 = v11 | 0x7A610000;
LABEL_88:
        if (mFormatID != v14)
          goto LABEL_90;
        goto LABEL_89;
      }
      if (mFormatID > 1902324530)
      {
        if (mFormatID <= 1902405732)
        {
          if (mFormatID == 1902324531 || mFormatID == 1902403958)
            goto LABEL_89;
          v15 = 26673;
        }
        else
        {
          if (mFormatID > 1902469938)
          {
            if (mFormatID == 1902469939)
              goto LABEL_89;
            v14 = 1902537827;
            goto LABEL_88;
          }
          if (mFormatID == 1902405733)
            goto LABEL_89;
          v15 = 28024;
        }
        v14 = v15 | 0x71640000;
        goto LABEL_88;
      }
      if ((mFormatID - 1902207795) <= 0x3D
        && ((1 << (mFormatID - 51)) & 0x2020000000000001) != 0
        || (mFormatID - 1902212657) <= 0x34
        && ((1 << (mFormatID - 49)) & 0x14000000000001) != 0)
      {
        goto LABEL_89;
      }
      v13 = 28771;
    }
    v14 = v13 | 0x71610000;
    goto LABEL_88;
  }
  if (MediaType != 1986618469)
    return 1;
  CMVideoFormatDescriptionGetPlaintextMediaSubTypeAndEncryptionScheme();
  a3 = a2;
LABEL_90:
  if (!a3 || CFArrayGetCount(a3) < 1)
    return 1;
  return MediaSubType && FigCFArrayContainsInt32() != 0;
}

uint64_t FPSupport_SetCurrentTimeWithRangeIDAndReason(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  uint64_t (*v11)(uint64_t, __int128 *, CFMutableDictionaryRef);
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (!a1)
  {
    v12 = FigSignalErrorAt();
    if (!v10)
      return v12;
    goto LABEL_6;
  }
  if (Mutable)
  {
    FigCFDictionarySetInt32();
    v16 = *a4;
    v17 = *((_QWORD *)a4 + 2);
    FigCFDictionarySetCMTime();
    v16 = *a5;
    v17 = *((_QWORD *)a5 + 2);
    FigCFDictionarySetCMTime();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    v14 = *a2;
    v15 = *((_QWORD *)a2 + 2);
    v11 = *(uint64_t (**)(uint64_t, __int128 *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 176);
    if (v11)
    {
      v16 = v14;
      v17 = v15;
      v12 = v11(a1, &v16, v10);
    }
    else
    {
      v12 = 4294954514;
    }
LABEL_6:
    CFRelease(v10);
    return v12;
  }
  return FigSignalErrorAt();
}

BOOL FPSupport_IsRunningInAppleVirtualMachine()
{
  if (FPSupport_IsRunningInAppleVirtualMachine_sCheckOnce != -1)
    dispatch_once(&FPSupport_IsRunningInAppleVirtualMachine_sCheckOnce, &__block_literal_global_113);
  return FPSupport_IsRunningInAppleVirtualMachine_isAppleVirtualMachine != 0;
}

uint64_t FPSupport_GetAssetDoNotLogURLs(uint64_t a1)
{
  uint64_t CMBaseObject;
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  int v3;
  CFNumberRef v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;
  CFNumberRef number;

  number = 0;
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v2)
    return 0;
  v3 = v2(CMBaseObject, CFSTR("assetProperty_CreationFlags"), *MEMORY[0x1E0C9AE00], &number);
  v4 = number;
  if (v3)
    v5 = 1;
  else
    v5 = number == 0;
  if (v5)
  {
    v6 = 0;
    if (!number)
      return v6;
    goto LABEL_11;
  }
  v8 = 0;
  CFNumberGetValue(number, kCFNumberSInt64Type, &v8);
  v6 = (v8 >> 9) & 1;
  v4 = number;
  if (number)
LABEL_11:
    CFRelease(v4);
  return v6;
}

BOOL FPSupport_HasAudioSessionInRuntime()
{
  return objc_opt_class() != 0;
}

uint64_t FPSupport_CreatePayloadForLastPlayedDateNotification(const void *a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  uint64_t result;
  __CFDictionary *v8;

  if (a1 && a2)
  {
    result = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v8 = (__CFDictionary *)result;
    if (result)
    {
      FigCFDictionarySetBoolean();
      CFDictionarySetValue(v8, CFSTR("Date"), a2);
      CFDictionarySetValue(v8, CFSTR("URL"), a1);
      result = 0;
    }
  }
  else
  {
    result = FigSignalErrorAt();
    v8 = 0;
  }
  *a4 = v8;
  return result;
}

uint64_t FPSupport_ProcessPayloadForLastPlayedDateNotification(uint64_t a1)
{
  uint64_t Value;
  const __CFURL *v2;
  __CFBundle *MainBundle;
  CFStringRef Identifier;

  if (!a1)
    return FigSignalErrorAt();
  FigCFDictionaryGetBooleanIfPresent();
  Value = FigCFDictionaryGetValue();
  v2 = (const __CFURL *)FigCFDictionaryGetValue();
  MainBundle = CFBundleGetMainBundle();
  Identifier = CFBundleGetIdentifier(MainBundle);
  return FigAssetDownloadStorageManagementSetLastPlayedDateForAssetAtURL(v2, Identifier, Value, 0);
}

dispatch_queue_t fpSupport_createDisplayAssertionMutexAndDict()
{
  const __CFAllocator *v0;
  const CFDictionaryKeyCallBacks *v1;
  const CFDictionaryValueCallBacks *v2;
  dispatch_queue_t result;

  sAssertionParameters = FigSimpleMutexCreate();
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  qword_1EE29FA50 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  qword_1EE29FA58 = (uint64_t)dispatch_queue_create("com.apple.coremedia.fpsupport.HDRBatonAvailableNotificationQueue", 0);
  unk_1EE29FA60 = CFSTR("HDRBatonAvailable");
  qword_1EE29FA68 = FigSimpleMutexCreate();
  qword_1EE29FA70 = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, v2);
  result = dispatch_queue_create("com.apple.coremedia.fpsupport.4kBatonAvailableNotificationQueue", 0);
  qword_1EE29FA78 = (uint64_t)result;
  unk_1EE29FA80 = CFSTR("4kBatonAvailable");
  return result;
}

void fpSupport_PostDeferredBatonAvailableNotification(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CMNotificationCenterPostNotification();
  if (a4)
    CFRelease(a4);
}

uint64_t __fpSupport_getContext_block_invoke()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  fpSupport_getContext_contextMutex = result;
  return result;
}

uint64_t __fpSupport_shouldDisableHDR_block_invoke()
{
  uint64_t result;

  CelestialGetModelSpecificName();
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_16;
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_16;
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_16;
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_16;
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_16;
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_16;
  result = FigCFEqual();
  if ((_DWORD)result)
    goto LABEL_16;
  result = FigCFEqual();
  if ((_DWORD)result
    || (result = FigCFEqual(), (_DWORD)result)
    || (result = FigCFEqual(), (_DWORD)result)
    || (result = FigCFEqual(), (_DWORD)result)
    || (result = FigCFEqual(), (_DWORD)result)
    || (result = FigCFEqual(), (_DWORD)result)
    || (result = FigCFEqual(), (_DWORD)result)
    || (result = FigCFEqual(), (_DWORD)result))
  {
LABEL_16:
    fpSupport_shouldDisableHDR_sDisableHDR = 1;
  }
  return result;
}

void __fps_releasePlayerResources_block_invoke(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v3)(uint64_t, const __CFString *, _QWORD);
  const void *v4;

  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(a1 + 32));
  v3 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v3)
    v3(FigBaseObject, CFSTR("ImageQueueSlotTransitionFinished"), *MEMORY[0x1E0C9AE50]);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

void fpSupport_handleSetPropertiesApplier(CFTypeRef cf, CFTypeRef a2, uint64_t a3)
{
  const void *v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeID v8;
  int v9;
  BOOL v10;
  CFTypeID v11;
  const __CFAllocator *v12;
  const void *SInt64;
  __CFDictionary *Mutable;
  CFTypeRef v15;
  __CFDictionary *MutableCopy;
  int v17;
  __CFDictionary *v18;
  CFTypeRef v19;
  CFTypeRef cfa;
  char v21;

  v21 = 0;
  v4 = (const void *)*MEMORY[0x1E0C9B0D0];
  if ((CFTypeRef)*MEMORY[0x1E0C9B0D0] == a2)
    v5 = 0;
  else
    v5 = (uint64_t)a2;
  v19 = 0;
  cfa = 0;
  if (*(_DWORD *)(a3 + 32))
  {
LABEL_35:
    v17 = 0;
    goto LABEL_36;
  }
  v6 = cf;
  if (!cf || (v8 = CFGetTypeID(cf), v8 != CFStringGetTypeID()))
  {
    v17 = FigSignalErrorAt();
LABEL_36:
    v6 = cfa;
    if (!cfa)
      goto LABEL_38;
    goto LABEL_37;
  }
  v9 = fpSupport_handleSetPropertiesInternal(*(_QWORD *)a3, (uint64_t)v6, v5, (uint64_t)&v21, (uint64_t)&cfa, (uint64_t)&v19);
  if (v9)
    v10 = 0;
  else
    v10 = v21 == 0;
  if (v10)
  {
    if (cfa)
    {
      v11 = CFGetTypeID(cfa);
      if (v11 == CFStringGetTypeID())
        goto LABEL_20;
    }
    v9 = FigSignalErrorAt();
  }
  if (v9)
  {
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    SInt64 = (const void *)FigCFNumberCreateSInt64();
    v21 = 1;
    Mutable = *(__CFDictionary **)(a3 + 24);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      *(_QWORD *)(a3 + 24) = Mutable;
    }
    CFDictionarySetValue(Mutable, v6, SInt64);
    if (SInt64)
      CFRelease(SInt64);
  }
LABEL_20:
  v15 = v19;
  if (!v19)
  {
    if (v4)
      v15 = CFRetain(v4);
    else
      v15 = 0;
    v19 = v15;
  }
  if (v21)
  {
    MutableCopy = *(__CFDictionary **)(a3 + 16);
    if (!MutableCopy)
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a3 + 8));
      *(_QWORD *)(a3 + 16) = MutableCopy;
    }
    CFDictionaryRemoveValue(MutableCopy, v6);
    goto LABEL_35;
  }
  if (cfa != v6 || v15 != a2)
  {
    v18 = *(__CFDictionary **)(a3 + 16);
    if (!v18)
    {
      v18 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a3 + 8));
      *(_QWORD *)(a3 + 16) = v18;
    }
    CFDictionaryRemoveValue(v18, v6);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), cfa, v19);
    goto LABEL_35;
  }
  v17 = 0;
LABEL_37:
  CFRelease(v6);
LABEL_38:
  if (v19)
    CFRelease(v19);
  if (!*(_DWORD *)(a3 + 32))
    *(_DWORD *)(a3 + 32) = v17;
}

uint64_t fpSupport_handleSetPropertiesInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)a1 > 1u)
    return FigSignalErrorAt();
  else
    return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6);
}

uint64_t FigPictureReaderGetAPIVersion()
{
  return 44;
}

uint64_t FigPictureReaderGetClassID()
{
  MEMORY[0x19402F294](&FigPictureReaderGetClassID_sRegisterFigPictureReaderBaseTypeOnce, RegisterFigPictureReaderBaseType);
  return sFigPictureReaderClassID;
}

uint64_t RegisterFigPictureReaderBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPictureReaderGetTypeID()
{
  MEMORY[0x19402F294](&FigPictureReaderGetClassID_sRegisterFigPictureReaderBaseTypeOnce, RegisterFigPictureReaderBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureReaderCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPictureReader %p]"), a1);
}

uint64_t FigStreamAssetImageGeneratorCreateFromAssetWithOptions(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const __CFString *, uint64_t, uint64_t);
  CFTypeRef cf;
  CFTypeRef v25;

  cf = 0;
  v25 = 0;
  v4 = 4294954863;
  if (!a2 || !a4)
    goto LABEL_19;
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v9)
  {
    v4 = 4294954514;
    goto LABEL_17;
  }
  v10 = v9(CMBaseObject, CFSTR("assetProperty_AssetType"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v10)
    goto LABEL_23;
  if (FigCFEqual())
  {
    FigAssetImageGeneratorGetClassID();
    v10 = CMDerivedObjectCreate();
    if (!(_DWORD)v10)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v10 = FigRetainProxyCreate();
      if (!(_DWORD)v10)
      {
        *(_BYTE *)(DerivedStorage + 9) = 0;
        *(_QWORD *)(DerivedStorage + 24) = CFRetain(a2);
        *(_QWORD *)(DerivedStorage + 96) = 0;
        v12 = FigSimpleMutexCreate();
        *(_QWORD *)(DerivedStorage + 32) = v12;
        if (v12)
        {
          *(_QWORD *)(DerivedStorage + 40) = 0;
          *(_QWORD *)(DerivedStorage + 48) = DerivedStorage + 40;
          *(_QWORD *)(DerivedStorage + 64) = FigSemaphoreCreate();
          v13 = FigSemaphoreCreate();
          *(_QWORD *)(DerivedStorage + 576) = *(_QWORD *)(DerivedStorage + 64);
          *(_QWORD *)(DerivedStorage + 72) = v13;
          *(_QWORD *)(DerivedStorage + 80) = 0;
          v14 = FigSimpleMutexCreate();
          *(_QWORD *)(DerivedStorage + 568) = v14;
          if (v14)
          {
            v15 = 0;
            v16 = MEMORY[0x1E0CA2E68];
            *(_OWORD *)(DerivedStorage + 392) = *MEMORY[0x1E0CA2E68];
            *(_QWORD *)(DerivedStorage + 408) = *(_QWORD *)(v16 + 16);
            v17 = MEMORY[0x1E0CA2E18];
            v18 = *MEMORY[0x1E0CA2E18];
            *(_OWORD *)(DerivedStorage + 416) = *MEMORY[0x1E0CA2E18];
            v19 = *(_QWORD *)(v17 + 16);
            *(_QWORD *)(DerivedStorage + 432) = v19;
            *(_OWORD *)(DerivedStorage + 440) = v18;
            *(_QWORD *)(DerivedStorage + 456) = v19;
            *(_OWORD *)(DerivedStorage + 368) = v18;
            *(_QWORD *)(DerivedStorage + 384) = v19;
            do
            {
              v20 = DerivedStorage + 464 + v15;
              *(_OWORD *)v20 = v18;
              *(_QWORD *)(v20 + 16) = v19;
              v15 += 24;
            }
            while (v15 != 72);
            *(_DWORD *)(DerivedStorage + 552) = 0;
            *(_QWORD *)(DerivedStorage + 624) = 0;
            *(_QWORD *)(DerivedStorage + 320) = 0;
            *(_QWORD *)(DerivedStorage + 328) = DerivedStorage + 320;
            *(_QWORD *)(DerivedStorage + 336) = 0;
            MEMORY[0x19402F294](&sSAIGCreateNotificationQueueOnce, saig_createNotificationQueueOnce);
            if (sSAIGNotificationQueue)
            {
              FigCFWeakReferenceStore();
              v21 = FigAssetGetCMBaseObject(a2);
              v22 = *(void (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
              if (v22)
                v22(v21, CFSTR("assetProperty_CreationURL"), a1, DerivedStorage + 16);
              v4 = 0;
              *a4 = v25;
              v25 = 0;
              goto LABEL_17;
            }
          }
        }
        v10 = FigSignalErrorAt();
      }
    }
LABEL_23:
    v4 = v10;
    goto LABEL_17;
  }
  v4 = 4294954860;
LABEL_17:
  if (cf)
    CFRelease(cf);
LABEL_19:
  if (v25)
    CFRelease(v25);
  return v4;
}

dispatch_queue_t saig_createNotificationQueueOnce()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coremedia.streamassetimagegenerator.notifications", 0);
  sSAIGNotificationQueue = (uint64_t)result;
  return result;
}

uint64_t FigStreamAssetImageGeneratorCreateFromAsset(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  return FigStreamAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, (uint64_t)a3, a3);
}

uint64_t saig_Invalidate()
{
  CFTypeRef *DerivedStorage;
  uint64_t v1;
  CFTypeRef v2;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  v1 = (uint64_t)DerivedStorage;
  v2 = *DerivedStorage;
  if (*DerivedStorage)
    CFRetain(*DerivedStorage);
  FigRetainProxyLockMutex();
  if (!*(_BYTE *)(v1 + 8))
  {
    FigRetainProxyInvalidate();
    *(_BYTE *)(v1 + 8) = 1;
    saig_CancelAllRequests(v1);
  }
  FigRetainProxyUnlockMutex();
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t saig_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  saig_Invalidate();
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 568))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 568) = 0;
  }
  return FigRetainProxyRelease();
}

__CFString *saig_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const __CFString *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigStreamAssetImageGenerator %p url: "), a1);
  v4 = CFURLGetString(*(CFURLRef *)(DerivedStorage + 16));
  CFStringAppend(Mutable, v4);
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t saig_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 4294954516;
  if (a2 && a3)
  {
    v7 = DerivedStorage;
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      FigSignalErrorAt();
    }
    else
    {
      if (!CFEqual(a2, CFSTR("ClientPID")))
      {
        if (CFEqual(a2, CFSTR("AllowAlternateDecoderSelection")))
        {
          v6 = 0;
          *(_BYTE *)(v7 + 656) = (const void *)*MEMORY[0x1E0C9AE50] == a3;
        }
        else
        {
          v6 = 4294954512;
        }
        goto LABEL_8;
      }
      v8 = *(const void **)(v7 + 648);
      *(_QWORD *)(v7 + 648) = a3;
      CFRetain(a3);
      if (v8)
        CFRelease(v8);
    }
    v6 = 0;
LABEL_8:
    FigRetainProxyUnlockMutex();
  }
  return v6;
}

void saig_CancelAllRequests(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  int v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 32));
  v2 = *(uint64_t **)(a1 + 40);
  if (v2)
  {
    v3 = *(_DWORD *)(a1 + 556);
    do
    {
      *((_BYTE *)v2 + 8) = 1;
      v4 = *((_DWORD *)v2 + 14);
      if (v3 < v4)
      {
        *(_DWORD *)(a1 + 556) = v4;
        v3 = v4;
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  JUMPOUT(0x19402EF04);
}

uint64_t saig_DurationChanged()
{
  const void *Owner;
  CFTypeRef v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, float);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD);
  __int128 v9;
  uint64_t v10;
  _OWORD v12[3];

  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_15;
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v1 = CFRetain(Owner);
  else
    v1 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 104) != 2)
  {
    v10 = 0;
    goto LABEL_13;
  }
  v3 = DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 96);
  v5 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (!v5)
    goto LABEL_12;
  v6 = v5(v4, 1.0);
  if (!(_DWORD)v6)
  {
    v7 = *(_QWORD *)(v3 + 96);
    v8 = *(uint64_t (**)(uint64_t, _OWORD *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 72);
    if (v8)
    {
      v9 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
      v12[0] = *MEMORY[0x1E0CA2E40];
      v12[1] = v9;
      v12[2] = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
      v10 = v8(v7, v12, 0, 0, 0, v3 + 536, 0);
      if (!(_DWORD)v10)
        *(_DWORD *)(v3 + 104) = 3;
      goto LABEL_13;
    }
LABEL_12:
    v10 = 4294954514;
    goto LABEL_13;
  }
  v10 = v6;
LABEL_13:
  saig_HandleError((uint64_t)v1, v10);
  if (v1)
    CFRelease(v1);
LABEL_15:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t saig_AlternateListChanged()
{
  const void *Owner;
  CFTypeRef v1;
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  const __CFAllocator *v6;
  uint64_t v7;
  int v8;
  const void *v9;
  const __CFArray *Value;
  CFIndex Count;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  CFMutableArrayRef Mutable;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *v21;
  const __CFArray *v22;
  BOOL v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex v26;
  const __CFDictionary *v27;
  const void *CFStringForOSTypeValue;
  int v29;
  const __CFArray *v30;
  const __CFArray *v31;
  CFIndex v32;
  CFIndex v33;
  CFIndex v34;
  const __CFAllocator *v35;
  const __CFDictionary *v36;
  const __CFBoolean *v37;
  const __CFDictionary *v38;
  void *v39;
  CFDictionaryRef v40;
  CFDictionaryRef v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  CFMutableArrayRef v46;
  CFMutableArrayRef v47;
  CFIndex j;
  const void *v49;
  const __CFString *CodecString;
  int IsIFrameOnly;
  BOOL v52;
  CFMutableArrayRef *v54;
  const __CFArray *v55;
  const __CFArray *v56;
  uint64_t v57;
  CFRange v58;
  const __CFArray *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  uint64_t v63;
  const __CFArray *v65;
  CFArrayRef *v66;
  uint64_t capacity;
  CFArrayRef *v68;
  uint64_t v69;
  const __CFAllocator *allocator;
  CFIndex v71;
  CFDictionaryRef theDict;
  void *values;
  const void *v74;
  void *keys;
  const __CFString *v76;
  uint64_t v77;
  CFRange v78;
  CFRange v79;

  v77 = *MEMORY[0x1E0C80C00];
  theDict = 0;
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_101;
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v1 = CFRetain(Owner);
  else
    v1 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 96));
  v4 = v3;
  v5 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v5)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = v5(v4, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &theDict);
    if (!(_DWORD)v7)
    {
      v8 = *(_DWORD *)(DerivedStorage + 104);
      if (v8 == 2)
      {
        v9 = *(const void **)(DerivedStorage + 144);
        if (!v9)
        {
LABEL_12:
          Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("FBPAIK_FigAlternateArray"));
          Count = CFArrayGetCount(Value);
          v12 = *(const void **)(DerivedStorage + 112);
          if (v12)
          {
            CFRelease(v12);
            *(_QWORD *)(DerivedStorage + 112) = 0;
          }
          v13 = *(const void **)(DerivedStorage + 128);
          if (v13)
          {
            CFRelease(v13);
            *(_QWORD *)(DerivedStorage + 128) = 0;
          }
          capacity = Count;
          v14 = *(const void **)(DerivedStorage + 120);
          if (v14)
          {
            CFRelease(v14);
            *(_QWORD *)(DerivedStorage + 120) = 0;
          }
          allocator = v6;
          v65 = Value;
          v66 = (CFArrayRef *)(DerivedStorage + 120);
          v68 = (CFArrayRef *)(DerivedStorage + 112);
          v69 = (uint64_t)v1;
          v15 = CFDictionaryGetValue(theDict, CFSTR("FBPAIK_MediaSelectionArray"));
          if (v15)
          {
            v16 = CFRetain(v15);
            *(_QWORD *)(DerivedStorage + 128) = v16;
            if (v16)
            {
              v17 = *(const void **)(DerivedStorage + 136);
              if (v17)
              {
                CFRelease(v17);
                *(_QWORD *)(DerivedStorage + 136) = 0;
              }
              Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
              *(_QWORD *)(DerivedStorage + 136) = Mutable;
              if (!Mutable)
              {
                v7 = 4294954510;
                goto LABEL_96;
              }
              v71 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 128));
              if (v71 >= 1)
              {
                for (i = 0; i != v71; ++i)
                {
                  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 128), i);
                  v21 = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
                  v22 = *(const __CFArray **)(DerivedStorage + 136);
                  if (v21)
                    v23 = v22 == 0;
                  else
                    v23 = 1;
                  if (v23)
                    goto LABEL_35;
                  v24 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136));
                  if (v24 < 1)
                    goto LABEL_35;
                  v25 = v24;
                  v26 = 0;
                  while (1)
                  {
                    v27 = (const __CFDictionary *)CFArrayGetValueAtIndex(v22, v26);
                    CFDictionaryGetValue(v27, CFSTR("MediaSelectionGroupMediaType"));
                    if (FigCFEqual())
                      break;
                    if (v25 == ++v26)
                      goto LABEL_35;
                  }
                  if (!v27)
                  {
LABEL_35:
                    CFStringForOSTypeValue = (const void *)FigGetCFStringForOSTypeValue();
                    v29 = CFEqual(v21, CFStringForOSTypeValue);
                    v30 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupOptions"));
                    keys = 0;
                    v76 = 0;
                    values = 0;
                    v74 = 0;
                    if (!v29)
                    {
                      v31 = v30;
                      v32 = CFArrayGetCount(v30);
                      if (v32 < 1)
                      {
                        v34 = 0;
                        v35 = allocator;
                      }
                      else
                      {
                        v33 = v32;
                        v34 = 0;
                        v35 = allocator;
                        while (1)
                        {
                          v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, v34);
                          v37 = (const __CFBoolean *)CFDictionaryGetValue(v36, CFSTR("MediaSelectionOptionsIsDefault"));
                          if (v37)
                          {
                            if (CFBooleanGetValue(v37))
                              break;
                          }
                          if (v33 == ++v34)
                          {
                            v34 = 0;
                            break;
                          }
                        }
                      }
                      v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, v34);
                      keys = CFSTR("MediaSelectionOptionsPersistentID");
                      v39 = (void *)CFDictionaryGetValue(v38, CFSTR("MediaSelectionOptionsPersistentID"));
                      v76 = CFSTR("MediaSelectionGroupMediaType");
                      values = v39;
                      v74 = v21;
                      v40 = CFDictionaryCreate(v35, (const void **)&keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (!v40)
                      {
                        v7 = FigSignalErrorAt();
                        if ((_DWORD)v7)
                          goto LABEL_96;
                        break;
                      }
                      v41 = v40;
                      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), v40);
                      CFRelease(v41);
                    }
                  }
                }
              }
            }
          }
          else
          {
            *(_QWORD *)(DerivedStorage + 128) = 0;
          }
          v46 = CFArrayCreateMutable(allocator, capacity, MEMORY[0x1E0C9B378]);
          *v68 = v46;
          if (v46 && (v47 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]), (*v66 = v47) != 0))
          {
            if (capacity >= 1)
            {
              for (j = 0; j != capacity; ++j)
              {
                LODWORD(keys) = 0;
                v49 = CFArrayGetValueAtIndex(v65, j);
                CodecString = (const __CFString *)FigAlternateGetCodecString((uint64_t)v49);
                FigAlternateGetPeakBitRate((uint64_t)v49);
                if (CodecString)
                {
                  if (FigMediaValidatorValidateRFC4281CodecsForStreaming(CodecString, 0, &keys))
                    continue;
                  IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)v49);
                  v52 = (keys & 3) == 1 && IsIFrameOnly == 0;
                  if (v52 || (keys & 4) != 0)
                    continue;
                }
                if (FigAlternateIsIFrameOnly((uint64_t)v49))
                  v54 = (CFMutableArrayRef *)(DerivedStorage + 120);
                else
                  v54 = (CFMutableArrayRef *)(DerivedStorage + 112);
                CFArrayAppendValue(*v54, v49);
              }
            }
            v55 = *(const __CFArray **)(DerivedStorage + 112);
            v78.length = CFArrayGetCount(v55);
            v78.location = 0;
            CFArraySortValues(v55, v78, (CFComparatorFunction)saig_AlternatesComparator, 0);
            v56 = *(const __CFArray **)(DerivedStorage + 120);
            v79.length = CFArrayGetCount(v56);
            v79.location = 0;
            CFArraySortValues(v56, v79, (CFComparatorFunction)saig_AlternatesComparator, 0);
            if (*(_QWORD *)(DerivedStorage + 96) && CFArrayGetCount(*v66) > 0 && CFArrayGetCount(*v68) > 0)
            {
              v57 = *(_QWORD *)(DerivedStorage + 144);
              if (v57)
              {
                if (FigAlternateIsIFrameOnly(v57))
                {
                  v58.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 120));
                  v59 = *(const __CFArray **)(DerivedStorage + 120);
                }
                else
                {
                  v58.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 112));
                  v59 = *(const __CFArray **)(DerivedStorage + 112);
                }
                v58.location = 0;
                if (!CFArrayContainsValue(v59, v58, *(const void **)(DerivedStorage + 144)))
                {
                  saig_tearDownManifoldsAndDeleteTracks(v69);
                  v60 = *(const void **)(DerivedStorage + 144);
                  if (v60)
                  {
                    CFRelease(v60);
                    *(_QWORD *)(DerivedStorage + 144) = 0;
                  }
                  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 568));
                  v61 = *(const void **)(DerivedStorage + 560);
                  if (v61)
                  {
                    CFRelease(v61);
                    *(_QWORD *)(DerivedStorage + 560) = 0;
                  }
                  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 568));
                }
              }
              v62 = CFArrayGetValueAtIndex(*v68, 0);
              if (CFDictionaryContainsKey(theDict, CFSTR("FBPAIK_CurrentFigAlternate"))
                && *(_QWORD *)(DerivedStorage + 144))
              {
                v7 = 0;
                goto LABEL_96;
              }
              if (*(_DWORD *)(DerivedStorage + 104) != 3)
                *(_DWORD *)(DerivedStorage + 104) = 2;
              v63 = saig_SetAlternate(v69, v62, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
            }
            else
            {
              v63 = FigSignalErrorAt();
            }
            v7 = v63;
          }
          else
          {
            v7 = 4294954862;
          }
LABEL_96:
          if (theDict)
            CFRelease(theDict);
          v1 = (CFTypeRef)v69;
          goto LABEL_99;
        }
        CFRelease(v9);
        *(_QWORD *)(DerivedStorage + 144) = 0;
        v8 = *(_DWORD *)(DerivedStorage + 104);
      }
      if (!v8)
        *(_DWORD *)(DerivedStorage + 104) = 1;
      goto LABEL_12;
    }
  }
  else
  {
    v7 = 4294954514;
  }
  *(_DWORD *)(DerivedStorage + 352) = 1;
  *(_QWORD *)(DerivedStorage + 344) = 1;
  v42 = *(const void **)(DerivedStorage + 112);
  if (v42)
  {
    CFRelease(v42);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v43 = *(const void **)(DerivedStorage + 128);
  if (v43)
  {
    CFRelease(v43);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v44 = *(const void **)(DerivedStorage + 120);
  if (v44)
  {
    CFRelease(v44);
    *(_QWORD *)(DerivedStorage + 120) = 0;
  }
  v45 = *(const void **)(DerivedStorage + 144);
  if (v45)
  {
    CFRelease(v45);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
LABEL_99:
  saig_HandleError((uint64_t)v1, v7);
  if (v1)
    CFRelease(v1);
LABEL_101:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

void saig_tearDownManifoldsAndDeleteTracks(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  const void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 320);
  if (v3)
  {
    do
    {
      v4 = *(_QWORD *)(v3 + 8);
      saig_deleteTrack(a1, v3);
      v3 = v4;
    }
    while (v4);
  }
  v5 = 0;
  v6 = DerivedStorage + 176;
  do
  {
    if (*(_QWORD *)(v6 + v5))
    {
      FigStopForwardingMediaServicesProcessDeathNotification();
      FigBaseObject = FigManifoldGetFigBaseObject(*(_QWORD *)(v6 + v5));
      if (FigBaseObject)
      {
        v8 = FigBaseObject;
        v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v9)
          v9(v8);
      }
      v10 = *(const void **)(v6 + v5);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(v6 + v5) = 0;
      }
    }
    v5 += 8;
  }
  while (v5 != 24);
}

uint64_t saig_HandleError(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((_DWORD)a2)
  {
    *(_DWORD *)(DerivedStorage + 88) = a2;
    FigSemaphoreSignal();
  }
  return a2;
}

uint64_t saig_AlternatesComparator(uint64_t a1, uint64_t a2)
{
  int PeakBitRate;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  v4 = FigAlternateGetPeakBitRate(a2);
  v5 = 1;
  v6 = -1;
  v7 = 1;
  if (PeakBitRate <= v4)
    v7 = -1;
  if (v4)
    v6 = v7;
  if (PeakBitRate)
    v5 = v6;
  if (PeakBitRate == v4)
    return 0;
  else
    return v5;
}

uint64_t saig_SetAlternate(uint64_t a1, const void *a2, __int128 *a3, __int128 *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const void *, uint64_t, _QWORD, _QWORD, uint64_t, __int128 *, __int128 *, __int128 *, char *, uint64_t *, uint64_t);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD);
  const void *v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v31 = *a4;
  v32 = *((_QWORD *)a4 + 2);
  v33 = *MEMORY[0x1E0CA2E18];
  v34 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v35 = v33;
  v36 = v34;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = *(_QWORD *)(DerivedStorage + 96);
  if (!v8)
    return 0;
  v9 = DerivedStorage;
  v10 = *(_QWORD *)(DerivedStorage + 136);
  v24 = *a3;
  v25 = *((_QWORD *)a3 + 2);
  v22 = *a4;
  v23 = *((_QWORD *)a4 + 2);
  v11 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD, _QWORD, uint64_t, __int128 *, __int128 *, __int128 *, char *, uint64_t *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v11)
    return 4294954514;
  v29 = v24;
  v30 = v25;
  v27 = v22;
  v28 = v23;
  result = v11(v8, a2, v10, 0, 0, 1, &v29, &v27, &v31, (char *)&v26 + 4, &v26, v9 + 536);
  if ((_DWORD)result)
    return result;
  v13 = (BYTE4(v26) & 3) - 1;
  if (v13 <= 2)
  {
    v14 = qword_1932FA8D0[v13];
    v15 = qword_1932FA8E8[(int)v13];
    *(_QWORD *)(v9 + 344) = v14;
    *(_QWORD *)(v9 + 360) = v15;
  }
  v16 = *(const void **)(v9 + 144);
  *(_QWORD *)(v9 + 144) = a2;
  if (a2)
    CFRetain(a2);
  if (v16)
    CFRelease(v16);
  if (HIDWORD(v26) == *(_DWORD *)(v9 + 352))
    return 0;
  v17 = 0;
  v18 = v9 + 176;
  do
  {
    if (((HIDWORD(v26) >> v17) & 1) == 0)
    {
      v19 = *(_QWORD *)(v18 + 8 * v17);
      if (v19)
      {
        v20 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v20)
          v20(v19, 0);
        FigStopForwardingMediaServicesProcessDeathNotification();
        v21 = *(const void **)(v18 + 8 * v17);
        if (v21)
        {
          CFRelease(v21);
          *(_QWORD *)(v18 + 8 * v17) = 0;
        }
      }
    }
    ++v17;
  }
  while (v17 != 3);
  result = 0;
  *(_DWORD *)(v9 + 352) = HIDWORD(v26);
  return result;
}

void saig_deleteTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(a2 + 144))
  {
    v4 = *(_QWORD *)(a2 + 40);
    if (v4)
    {
      v5 = *(unsigned int *)(a2 + 24);
      v6 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v6)
        v6(v4, v5, 0, 0);
    }
    *(_BYTE *)(a2 + 144) = 1;
  }
  saig_ReleaseRenderPipelineForTrack(a2);
  v7 = *(_QWORD *)(DerivedStorage + 320);
  if (v7 == a2)
  {
    v10 = DerivedStorage + 320;
    v16 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(DerivedStorage + 320) = v16;
    if (!v16)
LABEL_9:
      *(_QWORD *)(DerivedStorage + 328) = v10;
  }
  else
  {
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a2);
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v8 + 8) = v9;
    v10 = v8 + 8;
    if (!v9)
      goto LABEL_9;
  }
  v11 = *(const void **)(a2 + 40);
  if (v11)
  {
    *(_QWORD *)(a2 + 40) = 0;
    CFRelease(v11);
  }
  v12 = *(const void **)(a2 + 56);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a2 + 56) = 0;
  }
  v13 = *(const void **)(a2 + 152);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a2 + 152) = 0;
  }
  v14 = *(const void **)(a2 + 208);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a2 + 208) = 0;
  }
  v15 = *(const void **)(a2 + 32);
  if (v15)
    CFRelease(v15);
  free((void *)a2);
}

void saig_ReleaseRenderPipelineForTrack(uint64_t a1)
{
  uint64_t FigBaseObject;
  _QWORD *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  const void *v9;

  CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(a1 + 192))
  {
    FigBufferQueueRelease();
    *(_QWORD *)(a1 + 192) = 0;
  }
  if (*(_QWORD *)(a1 + 184))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a1 + 184));
    v3 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
    if (*v3 >= 2uLL)
    {
      v4 = (void (*)(uint64_t))v3[8];
      if (v4)
        v4(FigBaseObject);
    }
    v5 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(a1 + 184));
    if (v5)
    {
      v6 = v5;
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v7)
        v7(v6);
    }
    CFRelease(*(CFTypeRef *)(a1 + 184));
    *(_QWORD *)(a1 + 184) = 0;
  }
  v8 = *(const void **)(a1 + 216);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 216) = 0;
  }
  v9 = *(const void **)(a1 + 224);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 224) = 0;
  }
}

uint64_t saig_handleRenderPipelineDecodeErrorNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  FAIGCommon_handleRenderPipelineDecodeErrorNotification(a1, a2, a3, a4, a5);
  return FigSemaphoreSignal();
}

uint64_t saig_RequestCGImageAtTimeAsync(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  CFDictionaryRef v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  void *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v9 = FigSignalErrorAt();
    goto LABEL_18;
  }
  v8 = *(_DWORD *)(DerivedStorage + 552) + 1;
  *(_DWORD *)(DerivedStorage + 552) = v8;
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  v9 = FAIGCommon_createImageRequest(&v16, a3, a4, v8, &v18);
  if ((_DWORD)v9)
  {
LABEL_18:
    v12 = v9;
    goto LABEL_16;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  v10 = 0;
  *(_QWORD *)v18 = 0;
  **(_QWORD **)(DerivedStorage + 48) = v18;
  *(_QWORD *)(DerivedStorage + 48) = v18;
  v11 = *(unsigned __int8 *)(DerivedStorage + 56);
  if (!*(_BYTE *)(DerivedStorage + 56))
  {
    *(_BYTE *)(DerivedStorage + 56) = 1;
    v10 = *(_QWORD *)(DerivedStorage + 80);
    if (v10)
      *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  FigSemaphoreSignal();
  if (v10)
    FigThreadJoin();
  if (v11)
  {
    v12 = 0;
  }
  else
  {
    *(_QWORD *)&v16 = CFSTR("com.apple.coremedia.streamimagegenerator.processimagerequest");
    v13 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&v16, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = FigThreadCreate();
    if (v13)
      CFRelease(v13);
    if ((_DWORD)v12)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
      *(_BYTE *)(DerivedStorage + 56) = 0;
      v14 = **(_QWORD **)(DerivedStorage + 40);
      *(_QWORD *)(DerivedStorage + 40) = v14;
      if (!v14)
        *(_QWORD *)(DerivedStorage + 48) = DerivedStorage + 40;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
      FAIGCommon_releaseImageRequest(v18);
    }
  }
LABEL_16:
  FigRetainProxyUnlockMutex();
  return v12;
}

uint64_t saig_CancelAllCGImageAsyncRequests()
{
  uint64_t DerivedStorage;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
    saig_CancelAllRequests(DerivedStorage);
  v2 = FigSignalErrorAt();
  FigRetainProxyUnlockMutex();
  return v2;
}

uint64_t saig_processImageRequestThread(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  uint64_t v5;
  const __CFDictionary *v6;
  const __CFNumber *Value;
  const __CFNumber *v8;
  CFTypeID v9;
  const void *v10;
  const void *v11;
  const void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;
  __CFString **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __CFString *v23;
  CFDictionaryRef v24;
  CFDictionaryRef v25;
  uint64_t v26;
  const void *v27;
  _QWORD *v28;
  _QWORD *v29;
  CFTypeRef v30;
  unint64_t v31;
  uint64_t v32;
  const void *v33;
  int PumpReady;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, const __CFAllocator *, void **, uint64_t, CMTime *, _QWORD, _QWORD);
  int CGImageFromPixelBufferWithDynamicRangeConversion;
  uint64_t v42;
  uint64_t v43;
  CMTimeEpoch v44;
  __int128 v45;
  CMTime imageOut;
  uint64_t valuePtr;
  CMTime v48;
  CMTime time;
  int v50;
  void *values[2];
  uint64_t v52;
  void *keys[2];
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v45 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v48.value = *MEMORY[0x1E0CA2E18];
  v44 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v48.epoch = v44;
  valuePtr = -1;
  if (FigSemaphoreWaitRelative() != -12792)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v43 = a1;
    while (1)
    {
      if (FigRetainProxyIsInvalidated())
        goto LABEL_2;
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
      valuePtr = 9000000000;
      v5 = *(_QWORD *)(DerivedStorage + 40);
      if (!v5)
      {
        *(_BYTE *)(DerivedStorage + 56) = 0;
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
        return 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
      v6 = *(const __CFDictionary **)(v5 + 40);
      if (v6)
      {
        Value = (const __CFNumber *)CFDictionaryGetValue(v6, CFSTR("TimeoutInterval"));
        if (Value)
        {
          v8 = Value;
          v9 = CFGetTypeID(Value);
          if (v9 == CFNumberGetTypeID())
            CFNumberGetValue(v8, kCFNumberSInt64Type, &valuePtr);
        }
        v10 = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 40), CFSTR("RequestID"));
        v11 = v10;
        if (v10)
          CFRetain(v10);
      }
      else
      {
        v11 = 0;
      }
      if (!*(_BYTE *)(v5 + 8) && !FigRetainProxyIsInvalidated())
        break;
      v12 = 0;
      v13 = -12432;
LABEL_17:
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
      v14 = **(_QWORD **)(DerivedStorage + 40);
      *(_QWORD *)(DerivedStorage + 40) = v14;
      if (!v14)
        *(_QWORD *)(DerivedStorage + 48) = DerivedStorage + 40;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
      FAIGCommon_releaseImageRequest((_QWORD *)v5);
      imageOut = v48;
      v50 = v13;
      keys[0] = 0;
      keys[1] = 0;
      v54 = 0;
      values[0] = 0;
      values[1] = 0;
      v52 = 0;
      v15 = CMBaseObjectGetDerivedStorage();
      if (v13)
      {
        keys[0] = CFSTR("Result");
        values[0] = CFNumberCreate(v4, kCFNumberSInt32Type, &v50);
        v16 = 1;
        v17 = kFigAssetImageGeneratorNotification_FailedToGenerateCGImage;
      }
      else
      {
        if (v12)
        {
          keys[0] = CFSTR("CGImage");
          values[0] = (void *)CFRetain(v12);
          v18 = 1;
        }
        else
        {
          v18 = 0;
        }
        keys[v18] = CFSTR("FigTime");
        time = imageOut;
        values[v18] = CMTimeCopyAsDictionary(&time, v4);
        v16 = v18 + 1;
        v17 = kFigAssetImageGeneratorNotification_DidGenerateCGImage;
      }
      v23 = *v17;
      if (v11)
      {
        keys[v16] = CFSTR("RequestID");
        values[v16++] = (void *)CFRetain(v11);
      }
      v24 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, v16, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v24)
      {
        v25 = v24;
        v26 = MEMORY[0x19402D578](v15 + 640);
        if (v26)
        {
          v27 = (const void *)v26;
          v28 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00406B48E91AuLL);
          if (v28)
          {
            v29 = v28;
            if (v23)
              v30 = CFRetain(v23);
            else
              v30 = 0;
            v29[1] = v30;
            v29[2] = CFRetain(v25);
            *v29 = v27;
            dispatch_async_f((dispatch_queue_t)sSAIGNotificationQueue, v29, (dispatch_function_t)saig_postNotificationAsynchronously);
          }
          else
          {
            CFRelease(v27);
          }
        }
        CFRelease(v25);
      }
      v31 = 0;
      v32 = 8 * v16;
      do
      {
        v33 = values[v31 / 8];
        if (v33)
        {
          CFRelease(v33);
          values[v31 / 8] = 0;
        }
        v31 += 8;
      }
      while (v32 != v31);
      if (v12)
        CFRelease(v12);
      if (v11)
        CFRelease(v11);
      *(_OWORD *)&v48.value = v45;
      v48.epoch = v44;
      if (FigSemaphoreWaitRelative() == -12792)
        goto LABEL_2;
    }
    CMBaseObjectGetDerivedStorage();
    v19 = CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      v22 = -12785;
      goto LABEL_73;
    }
    if (*(_QWORD *)(v19 + 624))
    {
      PumpReady = FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(v19 + 88) = 0;
      *(_QWORD *)(v19 + 624) = v5;
      v20 = CMBaseObjectGetDerivedStorage();
      if (*(_BYTE *)(v20 + 9))
      {
        if (*(_BYTE *)(v20 + 9) != 1)
          goto LABEL_56;
        PumpReady = saig_RequestAnImageFromPump(v43, *(_QWORD *)(v19 + 624));
      }
      else
      {
        v21 = v20;
        if (!*(_BYTE *)(v20 + 108))
        {
          FigRetainProxyRetain();
          v37 = *(_QWORD *)(v21 + 24);
          v42 = *(_QWORD *)v21;
          v38 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (v38)
          {
            v22 = v38(v37, saig_PumpTransferCallback, v42);
            if (!v22)
            {
              *(_DWORD *)(v21 + 104) = 0;
              *(_BYTE *)(v21 + 108) = 1;
              goto LABEL_56;
            }
          }
          else
          {
            v22 = -12782;
          }
          FigRetainProxyRelease();
          goto LABEL_73;
        }
        if (*(_DWORD *)(v20 + 104))
        {
          if (!*(_QWORD *)(v20 + 144))
          {
            v22 = -12436;
LABEL_73:
            *(_QWORD *)(v19 + 624) = 0;
            FigRetainProxyUnlockMutex();
            v12 = 0;
LABEL_74:
            if (FigRetainProxyIsInvalidated())
            {
              v13 = 0;
            }
            else if (*(_BYTE *)(v5 + 8))
            {
              v13 = -12432;
            }
            else
            {
              v13 = v22;
            }
            goto LABEL_17;
          }
LABEL_56:
          FigRetainProxyUnlockMutex();
          v35 = FigSemaphoreWaitRelative();
          v36 = CMBaseObjectGetDerivedStorage();
          time.value = 0;
          imageOut.value = 0;
          FigRetainProxyLockMutex();
          if (FigRetainProxyIsInvalidated())
          {
            v12 = 0;
            v22 = -12785;
            goto LABEL_69;
          }
          if (v35)
            saig_CleanVideoRendersAndVisualContext();
          if (*(_BYTE *)(v5 + 8))
          {
            if (*(_BYTE *)(v36 + 9))
              saig_CleanVideoRendersAndVisualContext();
            v12 = 0;
            v22 = -12432;
            goto LABEL_69;
          }
          v22 = *(_DWORD *)(v36 + 608);
          if (!v22)
          {
            v22 = *(_DWORD *)(v36 + 88);
            if (!v22)
            {
              MEMORY[0x19402EEEC](*(_QWORD *)(v36 + 568));
              v39 = *(_QWORD *)(v36 + 560);
              if (v39)
              {
                v52 = *(_QWORD *)(v36 + 600);
                *(_OWORD *)values = *(_OWORD *)(v36 + 584);
                v40 = *(uint64_t (**)(uint64_t, const __CFAllocator *, void **, uint64_t, CMTime *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                if (!v40)
                {
                  MEMORY[0x19402EF04](*(_QWORD *)(v36 + 568));
                  v12 = 0;
                  v22 = -12782;
                  goto LABEL_69;
                }
                *(_OWORD *)keys = *(_OWORD *)values;
                v54 = v52;
                v22 = v40(v39, v4, keys, 3, &time, 0, 0);
                MEMORY[0x19402EF04](*(_QWORD *)(v36 + 568));
                if (v22)
                  goto LABEL_59;
                if (time.value)
                {
                  CGImageFromPixelBufferWithDynamicRangeConversion = FigCreateCGImageFromPixelBufferWithDynamicRangeConversion((CVPixelBufferRef)time.value, 0, 0, (CGImageRef *)&imageOut);
                  if (!CGImageFromPixelBufferWithDynamicRangeConversion)
                  {
                    v12 = (const void *)imageOut.value;
                    if (imageOut.value)
                    {
                      v22 = 0;
                      v48 = *(CMTime *)(v36 + 584);
                      imageOut.value = 0;
                    }
                    else
                    {
                      v22 = -12434;
                    }
LABEL_69:
                    *(_QWORD *)(v36 + 624) = 0;
                    *(_DWORD *)(v36 + 88) = 0;
                    FigRetainProxyUnlockMutex();
                    if (time.value)
                      CFRelease((CFTypeRef)time.value);
                    goto LABEL_74;
                  }
                  v22 = CGImageFromPixelBufferWithDynamicRangeConversion;
                  goto LABEL_59;
                }
              }
              else
              {
                MEMORY[0x19402EF04](*(_QWORD *)(v36 + 568));
              }
              v12 = 0;
              v22 = -12431;
              goto LABEL_69;
            }
          }
LABEL_59:
          v12 = 0;
          goto LABEL_69;
        }
        if (!*(_QWORD *)(v20 + 96))
          goto LABEL_56;
        PumpReady = saig_GetPumpReady();
      }
    }
    v22 = PumpReady;
    if (PumpReady)
      goto LABEL_73;
    goto LABEL_56;
  }
LABEL_2:
  *(_BYTE *)(DerivedStorage + 56) = 0;
  return 0;
}

uint64_t saig_RequestAnImageFromPump(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  _BOOL4 v10;
  CMTimeValue value;
  const void *v12;
  CFIndex v13;
  double v14;
  double v15;
  double v16;
  double v17;
  const void *ValueAtIndex;
  double Resolution;
  double v20;
  double v22;
  double v23;
  uint64_t v25;
  const void *DescriptionString;
  const __CFDictionary *v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  const __CFDictionary *v31;
  const __CFDictionary *v32;
  CFTypeID v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  CFTypeID v36;
  uint64_t v37;
  CMTime *v38;
  CMTimeEpoch v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, CMTime *, uint64_t, CMTime *, CMTime *, uint64_t);
  __int128 v43;
  CMTime v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  int valuePtr;
  CMTime v51;
  CMTime rhs;
  CMTime lhs;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  v49 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  v48 = v49;
  memset(&v47, 0, sizeof(v47));
  v5 = CMBaseObjectGetDerivedStorage();
  lhs.value = 0;
  rhs.value = 0;
  v6 = *(const __CFArray **)(v5 + 120);
  if (!v6 || !a2 || (Count = CFArrayGetCount(v6), Count <= 0))
  {
    v25 = FigSignalErrorAt();
    goto LABEL_40;
  }
  v8 = Count;
  FigCFDictionaryGetCGFloatIfPresent();
  FigCFDictionaryGetCGFloatIfPresent();
  v9 = *(_QWORD *)(v5 + 144);
  v10 = v9 && FigAlternateIsIFrameOnly(v9);
  value = rhs.value;
  if (*(double *)&lhs.value == *(double *)(v5 + 152) && *(double *)&rhs.value == *(double *)(v5 + 160))
  {
    if (v10)
      goto LABEL_41;
  }
  else
  {
    *(_QWORD *)(v5 + 152) = lhs.value;
    *(_QWORD *)(v5 + 160) = value;
  }
  v12 = 0;
  v13 = 0;
  v14 = *MEMORY[0x1E0C9D820];
  v15 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v16 = 0.0;
  v17 = 0.0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 120), v13);
    Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
    if (Resolution != v14 || v20 != v15)
    {
      if (!v12)
        goto LABEL_23;
      v22 = v20 * Resolution;
      v23 = v16 * v17;
      if (v20 * Resolution <= *(double *)&lhs.value * *(double *)&rhs.value)
      {
        if (v22 > v23)
          goto LABEL_23;
      }
      else if (v22 < v23 || v23 < *(double *)&lhs.value * *(double *)&rhs.value)
      {
LABEL_23:
        v17 = Resolution;
        v16 = v20;
        v12 = ValueAtIndex;
      }
    }
    ++v13;
  }
  while (v8 != v13);
  if (v12 || (v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 120), 0)) != 0)
    CFRetain(v12);
  CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v25 = 0;
    if (!v12)
      goto LABEL_40;
    goto LABEL_39;
  }
  DescriptionString = (const void *)FigAlternateCreateDescriptionString(v12);
  saig_tearDownManifoldsAndDeleteTracks(a1);
  v25 = saig_SetAlternate(a1, v12, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18]);
  if ((_DWORD)v25)
  {
    FigSignalErrorAt();
    if (DescriptionString)
LABEL_36:
      CFRelease(DescriptionString);
  }
  else if (DescriptionString)
  {
    goto LABEL_36;
  }
  if (!(_DWORD)v25)
  {
    if (!v12)
      goto LABEL_40;
    goto LABEL_39;
  }
  v25 = FigSignalErrorAt();
  if (v12)
LABEL_39:
    CFRelease(v12);
LABEL_40:
  if (!(_DWORD)v25)
  {
LABEL_41:
    v27 = *(const __CFDictionary **)(a2 + 40);
    if (v27)
    {
      v28 = (const __CFNumber *)CFDictionaryGetValue(v27, CFSTR("TimeFlags"));
      if (v28)
      {
        v29 = v28;
        v30 = CFGetTypeID(v28);
        if (v30 == CFNumberGetTypeID())
          CFNumberGetValue(v29, kCFNumberIntType, &valuePtr);
      }
      v31 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 40), CFSTR("TimeToleranceBefore"));
      if (v31)
      {
        v32 = v31;
        v33 = CFGetTypeID(v31);
        if (v33 == CFDictionaryGetTypeID())
          CMTimeMakeFromDictionary(&v49, v32);
      }
      v34 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 40), CFSTR("TimeToleranceAfter"));
      if (v34)
      {
        v35 = v34;
        v36 = CFGetTypeID(v34);
        if (v36 == CFDictionaryGetTypeID())
          CMTimeMakeFromDictionary(&v48, v35);
      }
    }
    if ((valuePtr - 1) > 4)
      v37 = 2;
    else
      v37 = dword_1932FA900[valuePtr - 1];
    v38 = (CMTime *)(a2 + 12);
    lhs = *(CMTime *)(a2 + 12);
    rhs = *(CMTime *)(DerivedStorage + 392);
    CMTimeAdd(&v47, &lhs, &rhs);
    lhs = v47;
    v43 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E68];
    v39 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    rhs.epoch = v39;
    if (CMTimeCompare(&lhs, &rhs) < 0)
    {
      *(_OWORD *)&v47.value = v43;
      v47.epoch = v39;
    }
    v40 = *(_QWORD *)(DerivedStorage + 96);
    lhs = *v38;
    rhs = v49;
    CMTimeSubtract(&v46, &lhs, &rhs);
    lhs = *v38;
    rhs = v48;
    CMTimeAdd(&v45, &lhs, &rhs);
    v44 = v47;
    v41 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, CMTime *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 104);
    if (v41)
    {
      lhs = v44;
      rhs = v46;
      v51 = v45;
      return v41(v40, &lhs, v37, &rhs, &v51, DerivedStorage + 536);
    }
    else
    {
      return 4294954514;
    }
  }
  return v25;
}

uint64_t saig_PumpTransferCallback(int a1, const void *a2, CFErrorRef err)
{
  CFIndex Code;
  const void *Owner;
  CFTypeRef v6;
  uint64_t DerivedStorage;
  uint64_t *v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __CFString *, const __CFString *);
  uint64_t PumpReady;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t (*)(int, int, OpaqueCMBlockBuffer *, unsigned int, unsigned int, int, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, CFErrorRef), _QWORD, uint64_t);

  if (err)
    Code = CFErrorGetCode(err);
  else
    Code = 0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_19;
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v6 = CFRetain(Owner);
  else
    v6 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!(_DWORD)Code)
  {
    if (a2)
    {
      v8 = (uint64_t *)DerivedStorage;
      v9 = FigBytePumpRetain(a2);
      v8[12] = (uint64_t)v9;
      FigBytePumpGetFigBaseObject(v9);
      v11 = v10;
      v12 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (!v12)
      {
LABEL_16:
        Code = 4294954514;
        goto LABEL_17;
      }
      PumpReady = v12(v11, CFSTR("FBP_PumpClientName"), CFSTR("SAIGenerator"));
      if (!(_DWORD)PumpReady)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        v14 = v8[12];
        v15 = *v8;
        v16 = *(uint64_t (**)(uint64_t, uint64_t (*)(int, int, OpaqueCMBlockBuffer *, unsigned int, unsigned int, int, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, CFErrorRef), _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
        if (v16)
        {
          PumpReady = v16(v14, saig_BytePumpFn, 0, v15);
          if (!(_DWORD)PumpReady)
            PumpReady = saig_GetPumpReady();
          goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
    else
    {
      PumpReady = FigSignalErrorAt();
    }
LABEL_15:
    Code = PumpReady;
  }
LABEL_17:
  saig_HandleError((uint64_t)v6, Code);
  if (v6)
    CFRelease(v6);
LABEL_19:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t saig_GetPumpReady()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const __CFAllocator *v2;
  uint64_t CMBaseObject;
  unsigned int (*v4)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v5;
  unsigned int (*v6)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  __CFDictionary *Mutable;
  const void *URLValue;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, CFTypeRef);
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, float);
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD);
  __int128 v29;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;
  CFTypeRef v34;
  char v35;
  CFTypeRef v36[2];
  __int128 v37;
  __int128 v38;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  v32 = 0;
  v1 = CMBaseObjectGetDerivedStorage();
  v36[0] = 0;
  v35 = 0;
  cf = 0;
  v34 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CMBaseObject = FigAssetGetCMBaseObject(*(_QWORD *)(v1 + 24));
  v4 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4
    || v4(CMBaseObject, CFSTR("assetProperty_CreationOptionsDictionary"), v2, v36)
    || (v5 = FigAssetGetCMBaseObject(*(_QWORD *)(v1 + 24)),
        (v6 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
    || v6(v5, CFSTR("assetProperty_OriginalNetworkContentURL"), v2, &v34))
  {
    Mutable = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      URLValue = (const void *)FigCFDictionaryGetURLValue();
      FigCFDictionaryGetBooleanIfPresent();
      if (v35)
      {
        if (URLValue)
        {
          CFDictionarySetValue(Mutable, CFSTR("FSC_DiskCacheRepositoryURL"), URLValue);
          CFDictionarySetValue(Mutable, CFSTR("FSC_Backing"), CFSTR("FSC_DiskBacking"));
          CFDictionarySetValue(Mutable, CFSTR("FSC_ClientName"), CFSTR("imagegen"));
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          if (!FigStreamingCacheCreate(v2, (const __CFURL *)v34, Mutable, (uint64_t *)&cf))
          {
            v9 = *(_QWORD *)(v1 + 96);
            v10 = cf;
            FigBytePumpGetFigBaseObject(v9);
            v12 = v11;
            v13 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
            if (v13)
              v13(v12, CFSTR("FBP_SegmentCache"), v10);
          }
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v36[0])
    CFRelease(v36[0]);
  if (v34)
    CFRelease(v34);
  FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 96));
  v15 = v14;
  v16 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v16 || v16(v15, CFSTR("FBP_AlternateInfo"), v2, &v32) != -12783)
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(DerivedStorage + 96));
    v21 = v20;
    v22 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v22)
    {
      v19 = 4294954514;
      goto LABEL_38;
    }
    v23 = v22(v21, CFSTR("FBP_Duration"), v2, &v31);
    if ((_DWORD)v23 == -12783)
    {
      *(_DWORD *)(DerivedStorage + 104) = 1;
      saig_AlternateListChanged();
    }
    else
    {
      v19 = v23;
      if ((_DWORD)v23)
        goto LABEL_38;
      *(_DWORD *)(DerivedStorage + 104) = 3;
      saig_AlternateListChanged();
      if (*(_QWORD *)(DerivedStorage + 144))
      {
        v24 = *(_QWORD *)(DerivedStorage + 96);
        v25 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
        if (v25)
        {
          v26 = v25(v24, 1.0);
          if (!(_DWORD)v26)
          {
            v27 = *(_QWORD *)(DerivedStorage + 96);
            v28 = *(uint64_t (**)(uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
            if (!v28)
              goto LABEL_35;
            v29 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
            *(_OWORD *)v36 = *MEMORY[0x1E0CA2E40];
            v37 = v29;
            v38 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
            v26 = v28(v27, v36, 0, 0, 0, DerivedStorage + 536, 0);
            v19 = 0;
            if (!(_DWORD)v26)
              goto LABEL_38;
          }
LABEL_45:
          v19 = v26;
          goto LABEL_39;
        }
LABEL_35:
        v19 = 4294954514;
        goto LABEL_39;
      }
    }
    v19 = 0;
    goto LABEL_38;
  }
  *(_DWORD *)(DerivedStorage + 104) = 0;
  v17 = *(_QWORD *)(DerivedStorage + 96);
  v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v18)
    goto LABEL_35;
  v19 = v18(v17);
  if (!(_DWORD)v19)
  {
LABEL_38:
    if (*(_QWORD *)(DerivedStorage + 96))
      goto LABEL_39;
    v26 = FigSignalErrorAt();
    goto LABEL_45;
  }
LABEL_39:
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  return v19;
}

uint64_t saig_BytePumpFn(int a1, int a2, OpaqueCMBlockBuffer *a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, __int128 *a8, uint64_t a9, uint64_t a10, uint64_t a11, CFErrorRef err)
{
  uint64_t Code;
  const void *Owner;
  CFTypeRef v19;
  uint64_t DerivedStorage;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  const void **v28;
  uint64_t v29;
  int v30;
  const void *v31;
  void (*v32)(const void *, _QWORD);
  const void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  OpaqueCMBlockBuffer *v49;
  const void **v50;
  OpaqueCMBlockBuffer *v51;
  uint64_t appended;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, _QWORD, OpaqueCMBlockBuffer *);
  uint64_t v55;
  CMTimeFlags v56;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  OpaqueCMBlockBuffer *v59;
  uint64_t v60;
  uint64_t started;
  uint64_t v62;
  const void *v63;
  uint64_t (*v64)(uint64_t, _QWORD, _QWORD, const void *);
  uint64_t v65;
  void (*v66)(uint64_t);
  uint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  const void **v72;
  CMTimeEpoch v74;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeValue v80;
  CMTimeScale v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (err)
    Code = CFErrorGetCode(err);
  else
    Code = 0;
  v80 = *MEMORY[0x1E0CA2E18];
  v81 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_74;
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner)
    v19 = CFRetain(Owner);
  else
    v19 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 4 * a5 + 536) != a6)
    goto LABEL_72;
  v21 = DerivedStorage;
  v22 = a5;
  v23 = *(_QWORD *)(DerivedStorage + 8 * a5 + 296) != a11;
  v24 = (v23 & (a4 >> 2)) != 0 ? a4 ^ 4 : a4;
  if ((_DWORD)Code)
    goto LABEL_72;
  v74 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v25 = v24 & 0x10;
  if ((v24 & 0x14) == 4)
  {
    v26 = v24;
    v27 = DerivedStorage + 8 * a5;
    v29 = *(_QWORD *)(v27 + 176);
    v28 = (const void **)(v27 + 176);
    if (!v29)
      goto LABEL_30;
    v30 = v24 & 0x10;
    FigStopForwardingMediaServicesProcessDeathNotification();
    v31 = *v28;
    v32 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v32)
      v32(v31, 0);
    v33 = *v28;
    v25 = v30;
    if (!*v28)
      goto LABEL_30;
  }
  else
  {
    v26 = v24;
    v34 = v23 | v24;
    if (!(v34 & 1 | (v25 != 0)))
      goto LABEL_30;
    *(_BYTE *)(DerivedStorage + 548) = 0;
    if ((v34 & 1) == 0)
      goto LABEL_30;
    v70 = v24 & 0x10;
    v68 = CMBaseObjectGetDerivedStorage();
    v35 = v68 + 8 * a5;
    v37 = *(_QWORD *)(v35 + 176);
    v28 = (const void **)(v35 + 176);
    v36 = v37;
    if (v37)
    {
      v38 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v38)
        v38(v36, 0);
    }
    v39 = *(_QWORD *)(v68 + 320);
    if (v39)
    {
      do
      {
        v40 = *(_QWORD *)(v39 + 8);
        if (*(unsigned __int8 *)(v39 + 92) == a5)
          saig_deleteTrack((uint64_t)v19, v39);
        v39 = v40;
      }
      while (v40);
    }
    v41 = v68 + 24 * a5;
    *(_OWORD *)(v41 + 224) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v41 + 240) = v74;
    *(_QWORD *)(v68 + 8 * a5 + 296) = a11;
    v25 = v70;
    if (!*v28)
      goto LABEL_30;
    FigStopForwardingMediaServicesProcessDeathNotification();
    v33 = *v28;
    if (!*v28)
      goto LABEL_30;
  }
  CFRelease(v33);
  *v28 = 0;
LABEL_30:
  if ((*(_BYTE *)(v21 + 380) & 1) == 0 && (*((_DWORD *)a8 + 3) & 0x1D) == 1)
  {
    v42 = *a8;
    *(_QWORD *)(v21 + 384) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(v21 + 368) = v42;
  }
  if ((*((_DWORD *)a8 + 3) & 0x1D) == 1)
  {
    v43 = *a8;
    v44 = v21 + 24 * v22;
    *(_QWORD *)(v44 + 480) = *((_QWORD *)a8 + 2);
    *(_OWORD *)(v44 + 464) = v43;
  }
  v45 = v21 + 8 * v22;
  v47 = *(_QWORD *)(v45 + 176);
  v46 = (uint64_t *)(v45 + 176);
  if (!v47)
  {
    if (a3)
    {
      v69 = v26;
      v71 = v25;
      v48 = v21 + 8 * v22;
      v51 = *(OpaqueCMBlockBuffer **)(v48 + 200);
      v50 = (const void **)(v48 + 200);
      v49 = v51;
      v72 = v50;
      if (v51)
      {
        appended = CMBlockBufferAppendBufferReference(v49, a3, 0, 0, 0);
        if ((_DWORD)appended)
        {
          Code = appended;
          goto LABEL_72;
        }
      }
      else
      {
        *v50 = CFRetain(a3);
      }
      v55 = *(_QWORD *)(v21 + 320);
      if (v55)
      {
        v56 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
        do
        {
          if (*(_QWORD *)(v55 + 48) == a11)
          {
            lhs = *(CMTime *)(v55 + 120);
            rhs = *(CMTime *)(v55 + 64);
            CMTimeSubtract(&time1, &lhs, &rhs);
            value = time1.value;
            flags = time1.flags;
            timescale = time1.timescale;
            if ((time1.flags & 0x1D) == 1)
            {
              epoch = time1.epoch;
              if ((v56 & 1) == 0
                || (time1.value = value,
                    time1.timescale = timescale,
                    lhs.value = v80,
                    lhs.timescale = v81,
                    lhs.flags = v56,
                    lhs.epoch = v74,
                    CMTimeCompare(&time1, &lhs) >= 1))
              {
                v80 = value;
                v81 = timescale;
                v56 = flags;
                v74 = epoch;
              }
            }
          }
          v55 = *(_QWORD *)(v55 + 8);
        }
        while (v55);
      }
      v59 = (OpaqueCMBlockBuffer *)*v72;
      v60 = CMBaseObjectGetDerivedStorage();
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      FigManifoldFactoryCreateManifold(0, v59, 0, &time1, 0, (uint64_t)saig_NewTrackNote, 0, 0, 0, 28, (uint64_t)v19, (_QWORD *)(v60 + 8 * v22 + 176));
      started = FigStartForwardingMediaServicesProcessDeathNotification();
      if ((_DWORD)started != -16044)
      {
        Code = started;
        LOBYTE(v26) = v69;
        if (!(_DWORD)started)
        {
          fpfs_prepareDataForInject(*v72);
          v62 = *v46;
          v63 = *v72;
          v64 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
          Code = v64 ? v64(v62, 0, (v69 >> 5) & 2 | (v71 >> 4), v63) : 4294954514;
          if (*v72)
          {
            CFRelease(*v72);
            *v72 = 0;
          }
        }
        if ((_DWORD)Code)
          goto LABEL_72;
        goto LABEL_68;
      }
      LOBYTE(v26) = v69;
      if (CMBlockBufferGetDataLength((CMBlockBufferRef)*v72) > 0x20000)
      {
        Code = 4294951252;
        goto LABEL_72;
      }
      Code = 0;
    }
    else
    {
      Code = ((int)(v26 << 30) >> 31) & 0xFFFFCF71;
    }
LABEL_68:
    if ((v26 & 0x20) != 0)
    {
      v65 = *v46;
      if (*v46)
      {
        v66 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v66)
          v66(v65);
      }
    }
    goto LABEL_72;
  }
  if (!a3 && !v26)
  {
    Code = 0;
    goto LABEL_72;
  }
  fpfs_prepareDataForInject(a3);
  v53 = *v46;
  v54 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, OpaqueCMBlockBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 8);
  if (v54)
  {
    Code = v54(v53, a7, (v26 >> 5) & 2 | (v25 >> 4), a3);
    if (!(_DWORD)Code)
      goto LABEL_68;
  }
  else
  {
    Code = 4294954514;
  }
LABEL_72:
  saig_HandleError((uint64_t)v19, Code);
  if (v19)
    CFRelease(v19);
LABEL_74:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t saig_NewTrackNote(const void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  const __CFAllocator *v24;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  _OWORD *v31;
  BOOL v32;
  uint64_t v33;
  void (*v34)(const void *, uint64_t, _QWORD, _QWORD);
  uint64_t (*v36)(const void *, uint64_t, uint64_t (**)(), uint64_t *);
  __int128 v37;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  v10 = 0;
  while (*(const void **)(DerivedStorage + 176 + 8 * v10) != a1)
  {
    if (++v10 == 3)
    {
      v11 = 3;
      goto LABEL_6;
    }
  }
  v11 = v10;
LABEL_6:
  v12 = 1;
  if (a3 <= 1935832171)
  {
    if (a3 == 1668047728 || a3 == 1835365473)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (a3 == 1935832172)
  {
    v12 = 4;
    goto LABEL_15;
  }
  if (a3 != 1986618469)
  {
    if (a3 == 1936684398)
    {
      v12 = 2;
      goto LABEL_15;
    }
LABEL_13:
    v12 = 0;
  }
LABEL_15:
  v13 = *(_QWORD *)(DerivedStorage + 320);
  v14 = 1;
  if (!v13)
    goto LABEL_31;
  v15 = (_QWORD *)(DerivedStorage + 8 * v11 + 296);
  while (1)
  {
    while (1)
    {
      v16 = v13;
      v13 = *(_QWORD *)(v13 + 8);
      if (*(_DWORD *)(v16 + 28) != a3)
        goto LABEL_25;
      if (*(const void **)(v16 + 40) == a1)
        goto LABEL_30;
      if (*(_QWORD *)(v16 + 48) != *v15)
        goto LABEL_25;
      v17 = *(unsigned __int8 *)(v16 + 92);
      if (v17 == v11)
        goto LABEL_25;
      v18 = 1 << v17;
      if (*(_DWORD *)(v16 + 88) == 6)
        break;
      if (v18 == v12)
        goto LABEL_30;
      saig_deleteTrack(a2, v16);
      if (!v13)
      {
LABEL_29:
        v14 = 1;
        goto LABEL_31;
      }
    }
    if (v18 == v12)
    {
      v19 = *(_DWORD *)(v9 + 352);
      if ((v19 & v18) != 0 && (v19 & v12) != 0)
        break;
    }
LABEL_25:
    if (!v13)
      goto LABEL_29;
  }
LABEL_30:
  v14 = 0;
LABEL_31:
  if (a3 != 1986618469 && (v20 = *(_QWORD *)(v9 + 144)) != 0 && FigAlternateIsIFrameOnly(v20) || !v14)
  {
    v34 = *(void (**)(const void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v34)
      v34(a1, a4, 0, 0);
    return 0;
  }
  v21 = CMBaseObjectGetDerivedStorage();
  v22 = (uint64_t *)malloc_type_calloc(1uLL, 0xF0uLL, 0x1060040B7CBE5F1uLL);
  if (!v22)
    return FigSignalErrorAt();
  v23 = v22;
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  if (CMBufferQueueCreate(v24, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)v23 + 7))
  {
    free(v23);
    return FigSignalErrorAt();
  }
  v26 = *(_QWORD *)(v21 + 336) + 1;
  *(_QWORD *)(v21 + 336) = v26;
  *v23 = a2;
  v23[2] = v26;
  *((_DWORD *)v23 + 6) = a4;
  v27 = MEMORY[0x1E0CA2E18];
  v37 = *MEMORY[0x1E0CA2E18];
  *((_OWORD *)v23 + 4) = *MEMORY[0x1E0CA2E18];
  v28 = *(_QWORD *)(v27 + 16);
  v23[10] = v28;
  v29 = CFRetain(a1);
  *((_BYTE *)v23 + 92) = v11;
  v30 = *(_QWORD *)(v21 + 8 * v11 + 296);
  v23[5] = (uint64_t)v29;
  v23[6] = v30;
  v23[17] = v28;
  *(_OWORD *)(v23 + 15) = v37;
  *((_DWORD *)v23 + 58) = 1065353216;
  *((_DWORD *)v23 + 7) = a3;
  v31 = (_OWORD *)MEMORY[0x1E0CA2E68];
  v23[22] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  *((_OWORD *)v23 + 10) = *v31;
  v23[25] = -1;
  v23[1] = 0;
  **(_QWORD **)(v21 + 328) = v23;
  *(_QWORD *)(v21 + 328) = v23 + 1;
  v32 = 1;
  if (a3 <= 1935832171)
  {
    if (a3 == 1668047728 || a3 == 1835365473)
      goto LABEL_50;
  }
  else
  {
    switch(a3)
    {
      case 1935832172:
        goto LABEL_50;
      case 1936684398:
        goto LABEL_49;
      case 1986618469:
        v33 = *(_QWORD *)(v21 + 144);
        if (v33)
        {
          v32 = FigAlternateIsIFrameOnly(v33) != 0;
          goto LABEL_50;
        }
LABEL_49:
        v32 = 0;
LABEL_50:
        *((_BYTE *)v23 + 93) = v32;
        break;
    }
  }
  v36 = *(uint64_t (**)(const void *, uint64_t, uint64_t (**)(), uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
  if (v36)
    return v36(a1, a4, kManifoldOutputCallbacks_0, v23);
  else
    return 4294954514;
}

uint64_t saig_FmtDescChangeNote(uint64_t a1, uint64_t a2, uint64_t a3, const opaqueCMFormatDescription *a4, const void *a5)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  const opaqueCMFormatDescription *v10;
  uint64_t result;
  _BOOL4 v12;
  const __CFArray *v13;
  CFIndex FirstIndexOfValue;
  const void *v15;
  CMMediaType MediaType;
  uint64_t (*v17)(const void *, const __CFString *, _QWORD);
  const void *v18;
  CMTime v19;
  CFRange v20;

  v8 = *(_QWORD *)a3;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(const opaqueCMFormatDescription **)(a3 + 32);
  if (v10 == a4 && *(const void **)(a3 + 152) == a5)
    return 0;
  if (v10)
    return 4294954860;
  if (*(_BYTE *)(a3 + 93))
  {
    v12 = a5 != 0;
    if (a5 && *(_DWORD *)(a3 + 28) == 1986618469)
    {
      saig_tearDownManifoldsAndDeleteTracks(v8);
      v13 = *(const __CFArray **)(DerivedStorage + 120);
      v20.length = CFArrayGetCount(v13);
      v20.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v13, v20, *(const void **)(DerivedStorage + 144));
      if (FirstIndexOfValue != -1)
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 120), FirstIndexOfValue);
      v15 = *(const void **)(DerivedStorage + 144);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(DerivedStorage + 144) = 0;
      }
      return 4294954860;
    }
  }
  else
  {
    v12 = a5 != 0;
  }
  *(_QWORD *)(a3 + 32) = FigFormatDescriptionRetain();
  MediaType = CMFormatDescriptionGetMediaType(a4);
  *(_DWORD *)(a3 + 28) = MediaType;
  if (MediaType == 1936684398)
  {
    FigGaplessInfoGetDefaultAudioPrimingDuration(*(const opaqueCMFormatDescription **)(a3 + 32), &v19);
    *(CMTime *)(a3 + 160) = v19;
  }
  if (!v12)
  {
    v18 = *(const void **)(a3 + 152);
    *(_QWORD *)(a3 + 152) = a5;
    if (!v18)
      return 0;
LABEL_21:
    CFRelease(v18);
    return 0;
  }
  v17 = *(uint64_t (**)(const void *, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (v17)
  {
    result = v17(a5, CFSTR("DisplayList"), 0);
    if ((_DWORD)result)
      return result;
    saig_ensureDecryptorIsReady((uint64_t)a5);
    v18 = *(const void **)(a3 + 152);
    *(_QWORD *)(a3 + 152) = a5;
    CFRetain(a5);
    if (!v18)
      return 0;
    goto LABEL_21;
  }
  return 4294954514;
}

uint64_t saig_PushSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, opaqueCMSampleBuffer *a6)
{
  uint64_t v8;
  unsigned int (*v9)(uint64_t, CMTime *);
  _OWORD *v10;
  _OWORD *v11;
  char v12;
  uint64_t v13;
  CFDictionaryRef v14;
  char v15;
  char *v16;
  uint64_t v17;
  opaqueCMSampleBuffer *Head;
  char *v19;
  __int128 v20;
  char *v21;
  CMTimeEpoch epoch;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t OutputImagePropertiesForImageRetrieval;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  CMTimeEpoch v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  int v39;
  char *v40;
  __int128 v41;
  int v42;
  _OWORD *v43;
  uint64_t v44;
  CMTimeEpoch v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t);
  uint64_t v56;
  uint64_t DerivedStorage;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char v61;
  const __CFArray *SampleAttachmentsArray;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v64;
  char *v65;
  uint64_t v66;
  uint64_t Basic;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t (*)(uint64_t, __n128 *, uint64_t, uint64_t), char *);
  const __CFAllocator *v70;
  CMBufferQueueRef *v71;
  __CFDictionary *Mutable;
  __CFDictionary *v73;
  uint64_t DestinationPixelBufferAttributes;
  const __CFAllocator *v75;
  const void *v76;
  const opaqueCMFormatDescription *v77;
  uint64_t FigBaseObject;
  uint64_t (*v79)(uint64_t, const __CFString *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, const __CFString *, uint64_t);
  uint64_t v84;
  uint64_t (*v85)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  uint64_t v86;
  void (*v87)(uint64_t, const __CFString *, void *);
  float v88;
  CFNumberRef v89;
  CFNumberRef v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, const __CFString *, CFNumberRef);
  CFDictionaryRef v93;
  _QWORD *v94;
  uint64_t v95;
  const void *v96;
  uint64_t v97;
  char v98;
  int v99;
  char *v100;
  char *v101;
  CMTime *v102;
  int v103;
  CMTimeEpoch v104;
  uint64_t v105;
  __int128 v106;
  CMTimeEpoch v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v114;
  void *v115;
  const __CFString *v116;
  const __CFDictionary **v117;
  float *valuePtr;
  void *value;
  const __CFString *v120;
  CFDictionaryRef *v121;
  const void *v122;
  CFDictionaryRef *v123;
  const __CFAllocator *allocator;
  _QWORD *v125;
  void *key;
  uint64_t v127;
  _OWORD *v128;
  _OWORD *v130;
  opaqueCMSampleBuffer *sbuf;
  CMTime v132;
  CMTime v133;
  CMTime v134;
  CMTime v135;
  CMTime v136;
  CMTime v137;
  CMTime v138;
  CMTime v139;
  CMTime v140;
  void *keys;
  CMTime v142;
  CMTime v143;
  void *values;
  CMTime v145;
  CMTime v146;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;

  v127 = *(_QWORD *)a3;
  values = (void *)CMBaseObjectGetDerivedStorage();
  memset(&v143, 0, sizeof(v143));
  sbuf = a6;
  CMSampleBufferGetPresentationTimeStamp(&v143, a6);
  memset(&v142, 0, sizeof(v142));
  keys = CFSTR("AIGRequestedNotificationWhenConsumed");
  if (*(_QWORD *)(a3 + 152))
  {
    FigBasicAESCPECryptorGetClassID();
    if (!CMBaseObjectIsMemberOfClass()
      || (LODWORD(lhs.value) = 0,
          v8 = *(_QWORD *)(a3 + 152),
          (v9 = *(unsigned int (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) == 0)
      || v9(v8, &lhs)
      || LODWORD(lhs.value))
    {
      FigSampleBufferSetDecryptor();
    }
  }
  v10 = (_OWORD *)(a3 + 64);
  key = (void *)*MEMORY[0x1E0CA2620];
  v122 = (const void *)*MEMORY[0x1E0C9AE40];
  v123 = (CFDictionaryRef *)(a3 + 208);
  v125 = (_QWORD *)(a3 + 184);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v115 = (void *)*MEMORY[0x1E0CEDC88];
  value = (void *)*MEMORY[0x1E0C9AE50];
  v121 = (CFDictionaryRef *)(a3 + 224);
  v117 = (const __CFDictionary **)(a3 + 216);
  v114 = *MEMORY[0x1E0CED400];
  v128 = (_OWORD *)(a3 + 120);
  valuePtr = (float *)(a3 + 232);
  v116 = (const __CFString *)*MEMORY[0x1E0CA26E8];
  v130 = (_OWORD *)(a3 + 96);
  v11 = (_OWORD *)(a3 + 160);
  v120 = (const __CFString *)*MEMORY[0x1E0CA26C8];
  v12 = 1;
  while (2)
  {
    if ((*(_DWORD *)(a3 + 76) & 0x1D) == 1)
    {
      lhs = v143;
      *(_OWORD *)&rhs.value = *v10;
      rhs.epoch = *(_QWORD *)(a3 + 80);
      CMTimeAdd(&v142, &lhs, &rhs);
      lhs = v142;
      CMSampleBufferSetOutputPresentationTimeStamp(sbuf, &lhs);
    }
    else
    {
      v142 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    }
    v13 = 0;
    v14 = 0;
    v15 = 0;
    switch(*(_DWORD *)(a3 + 88))
    {
      case 0:
        v16 = (char *)values;
        v17 = *((_QWORD *)values + 40);
        if (v17)
        {
          do
          {
            if ((*(_DWORD *)(v17 + 88) & 0xFFFFFFFE) == 2
              && *(_QWORD *)(v17 + 40) == *(_QWORD *)(a3 + 40)
              && *(_QWORD *)(v17 + 48) == *(_QWORD *)(a3 + 48))
            {
              Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(v17 + 56));
              if (Head)
              {
                memset(&lhs, 0, sizeof(lhs));
                CMSampleBufferGetPresentationTimeStamp(&lhs, Head);
                rhs = v143;
                time2 = lhs;
                v146 = *(CMTime *)(v17 + 160);
                CMTimeAdd(&time1, &time2, &v146);
                lhs = time1;
                time1 = rhs;
                *(_OWORD *)&time2.value = *v11;
                time2.epoch = *(_QWORD *)(a3 + 176);
                CMTimeAdd(&rhs, &time1, &time2);
                time1 = rhs;
                time2 = lhs;
                if (CMTimeCompare(&time1, &time2) < 0)
                {
                  memset(&time1, 0, sizeof(time1));
                  time2 = lhs;
                  v146 = rhs;
                  CMTimeSubtract(&time1, &time2, &v146);
                  memset(&time2, 0, sizeof(time2));
                  v146 = *(CMTime *)(v17 + 64);
                  v145 = time1;
                  CMTimeAdd(&time2, &v146, &v145);
                  v19 = (char *)values + 24 * *(unsigned __int8 *)(v17 + 92);
                  v20 = *((_OWORD *)v19 + 14);
                  v146.epoch = *((_QWORD *)v19 + 30);
                  *(_OWORD *)&v146.value = v20;
                  v145 = *(CMTime *)(v17 + 64);
                  if (!CMTimeCompare(&v146, &v145))
                  {
                    v21 = (char *)values + 24 * *(unsigned __int8 *)(v17 + 92);
                    epoch = time2.epoch;
                    *((_OWORD *)v21 + 14) = *(_OWORD *)&time2.value;
                    *((_QWORD *)v21 + 30) = epoch;
                  }
                  *(CMTime *)(v17 + 64) = time2;
                  v23 = MEMORY[0x1E0CA2E68];
                  *(_OWORD *)(v17 + 120) = *MEMORY[0x1E0CA2E68];
                  *(_QWORD *)(v17 + 136) = *(_QWORD *)(v23 + 16);
                  CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v17 + 56), (OSStatus (__cdecl *)(CMBufferRef, void *))saig_AdjustTime, (void *)v17);
                }
              }
            }
            v17 = *(_QWORD *)(v17 + 8);
          }
          while (v17);
          v16 = (char *)values;
          v24 = (uint64_t *)((char *)values + 320);
          v25 = *((_QWORD *)values + 40);
          if (v25)
          {
            while (*(_QWORD *)(v25 + 48) != *(_QWORD *)(a3 + 48) || (*(_DWORD *)(v25 + 76) & 0x1D) != 1)
            {
              v25 = *(_QWORD *)(v25 + 8);
              if (!v25)
                goto LABEL_34;
            }
            v28 = *(_OWORD *)(v25 + 64);
            *(_QWORD *)(a3 + 80) = *(_QWORD *)(v25 + 80);
            *v10 = v28;
          }
        }
        else
        {
          v24 = (uint64_t *)((char *)values + 320);
        }
LABEL_34:
        if ((*(_DWORD *)(a3 + 76) & 0x1D) == 1)
        {
          v29 = *v24;
          if (v29)
          {
            while (*(_QWORD *)(v29 + 48) != *(_QWORD *)(a3 + 48)
                 || (*(_DWORD *)(v29 + 76) & 0x1D) != 1
                 || (*(_BYTE *)(v29 + 108) & 1) == 0)
            {
              v29 = *(_QWORD *)(v29 + 8);
              if (!v29)
                goto LABEL_61;
            }
            v46 = *(_OWORD *)(v29 + 96);
            *(_QWORD *)(a3 + 112) = *(_QWORD *)(v29 + 112);
            *v130 = v46;
          }
LABEL_61:
          v47 = &v16[24 * *(unsigned __int8 *)(a3 + 92)];
          v48 = *v10;
          *((_QWORD *)v47 + 30) = *(_QWORD *)(a3 + 80);
          *((_OWORD *)v47 + 14) = v48;
          if (*(_BYTE *)(a3 + 93) && *(_DWORD *)(a3 + 28) == 1986618469)
          {
            if (*(_DWORD *)(a3 + 88) == 6)
              continue;
            v27 = 6;
          }
          else
          {
            if (*(_DWORD *)(a3 + 88) == 2)
              continue;
            v27 = 2;
          }
          goto LABEL_67;
        }
        if (*(_BYTE *)(a3 + 93))
        {
          v30 = *(unsigned __int8 *)(a3 + 92);
          if (*(_DWORD *)(a3 + 28) == 1986618469)
          {
            if ((v16[24 * *(unsigned __int8 *)(a3 + 92) + 476] & 1) == 0)
            {
LABEL_53:
              v16 = (char *)values;
              v39 = *(unsigned __int8 *)(a3 + 92);
              if ((*((_BYTE *)values + 24 * *(unsigned __int8 *)(a3 + 92) + 236) & 1) != 0)
              {
                v40 = (char *)values + 24 * *(unsigned __int8 *)(a3 + 92);
                v41 = *((_OWORD *)v40 + 14);
                *(_QWORD *)(a3 + 80) = *((_QWORD *)v40 + 30);
                *v10 = v41;
              }
              v42 = *(_DWORD *)(a3 + 76);
              if (v39 == 2 && (v42 & 1) == 0)
              {
                v43 = (_OWORD *)MEMORY[0x1E0CA2E10];
                *(_QWORD *)(a3 + 80) = *(_QWORD *)(MEMORY[0x1E0CA2E10] + 16);
                *v10 = *v43;
                v44 = MEMORY[0x1E0CA2E18];
                *v130 = *MEMORY[0x1E0CA2E18];
                *(_QWORD *)(a3 + 112) = *(_QWORD *)(v44 + 16);
                v42 = *(_DWORD *)(a3 + 76);
              }
              if ((v42 & 1) == 0)
              {
                *(_OWORD *)&rhs.value = *v130;
                rhs.epoch = *(_QWORD *)(a3 + 112);
                time1 = v143;
                CMTimeSubtract(&lhs, &rhs, &time1);
                *v10 = *(_OWORD *)&lhs.value;
                v45 = lhs.epoch;
                *(_QWORD *)(a3 + 80) = lhs.epoch;
                *(_OWORD *)&rhs.value = *v10;
                rhs.epoch = v45;
                *(_OWORD *)&time1.value = *v11;
                time1.epoch = *(_QWORD *)(a3 + 176);
                CMTimeSubtract(&lhs, &rhs, &time1);
                *v10 = *(_OWORD *)&lhs.value;
                *(_QWORD *)(a3 + 80) = lhs.epoch;
                v16 = (char *)values;
              }
              goto LABEL_61;
            }
            v31 = &v16[24 * *(unsigned __int8 *)(a3 + 92)];
            v32 = *((_OWORD *)v31 + 29);
            rhs.epoch = *((_QWORD *)v31 + 60);
            *(_OWORD *)&rhs.value = v32;
            time1 = *(CMTime *)(v16 + 392);
            CMTimeSubtract(&lhs, &rhs, &time1);
            goto LABEL_50;
          }
        }
        else
        {
          v30 = *(unsigned __int8 *)(a3 + 92);
        }
        if ((v16[24 * v30 + 476] & 1) == 0)
        {
          if ((v16[380] & 1) != 0)
          {
            v38 = *((_OWORD *)v16 + 23);
            *(_QWORD *)(a3 + 112) = *((_QWORD *)v16 + 48);
            *v130 = v38;
            goto LABEL_53;
          }
          v33 = MEMORY[0x1E0CA2E68];
          v34 = a3 + 96;
          *v130 = *MEMORY[0x1E0CA2E68];
          v35 = *(_QWORD *)(v33 + 16);
          goto LABEL_51;
        }
        v36 = &v16[24 * v30];
        v37 = *((_OWORD *)v36 + 29);
        lhs.epoch = *((_QWORD *)v36 + 60);
        *(_OWORD *)&lhs.value = v37;
        rhs = *(CMTime *)(v16 + 392);
        CMTimeSubtract(&v140, &lhs, &rhs);
        rhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        CMTimeMaximum(&lhs, &v140, &rhs);
LABEL_50:
        v34 = a3 + 96;
        *v130 = *(_OWORD *)&lhs.value;
        v35 = lhs.epoch;
LABEL_51:
        *(_QWORD *)(v34 + 16) = v35;
        goto LABEL_53;
      case 1:
      case 4:
      case 5:
        goto LABEL_169;
      case 2:
        if (*(_DWORD *)(a3 + 28) != 1986618469)
          goto LABEL_31;
        if ((a4 & 1) == 0)
          goto LABEL_156;
        OutputImagePropertiesForImageRetrieval = CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 56), sbuf);
        if ((_DWORD)OutputImagePropertiesForImageRetrieval)
          goto LABEL_212;
        if (*(_DWORD *)(a3 + 88) != 3)
        {
LABEL_31:
          v27 = 3;
LABEL_67:
          *(_DWORD *)(a3 + 88) = v27;
        }
        continue;
      case 3:
        v49 = *(_DWORD *)(a3 + 28);
        if (v49 == 1936684398)
        {
          if (*(_BYTE *)(a3 + 92) == 1)
          {
            v50 = *(_QWORD *)(a3 + 152);
            if ((!v50 || !saig_ensureDecryptorIsReady(v50)) && (*(_BYTE *)(a3 + 132) & 1) != 0)
            {
              *(_OWORD *)&lhs.value = *v128;
              lhs.epoch = *(_QWORD *)(a3 + 136);
              *(_OWORD *)&rhs.value = *v130;
              rhs.epoch = *(_QWORD *)(a3 + 112);
              if (CMTimeCompare(&lhs, &rhs) >= 1)
              {
                v51 = *((_QWORD *)values + 12);
                v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (v52)
                  v52(v51, 1, 1);
              }
            }
          }
          v49 = *(_DWORD *)(a3 + 28);
        }
        if (v49 == 1986618469 && *((_QWORD *)values + 43) == 2)
        {
          v53 = *(_QWORD *)(a3 + 152);
          if ((!v53 || !saig_ensureDecryptorIsReady(v53)) && (*(_BYTE *)(a3 + 132) & 1) != 0)
          {
            *(_OWORD *)&lhs.value = *v128;
            lhs.epoch = *(_QWORD *)(a3 + 136);
            *(_OWORD *)&rhs.value = *v130;
            rhs.epoch = *(_QWORD *)(a3 + 112);
            if (CMTimeCompare(&lhs, &rhs) >= 1)
            {
              v54 = *((_QWORD *)values + 12);
              v55 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v55)
                v55(v54, 0, 1);
            }
          }
        }
        if (*((_BYTE *)values + 9))
          goto LABEL_156;
        v56 = *(_QWORD *)(a3 + 48);
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v58 = *(_QWORD *)(DerivedStorage + 320);
        if (v58)
        {
          v59 = 0;
          while (1)
          {
            v60 = *(_QWORD *)(v58 + 152);
            if (v60 && saig_ensureDecryptorIsReady(v60))
              goto LABEL_155;
            if (*(_QWORD *)(v58 + 48) == v56)
            {
              if ((*(_BYTE *)(v58 + 76) & 1) != 0 || *(_BYTE *)(v58 + 144))
                v59 |= 1 << *(_BYTE *)(v58 + 92);
              if (!*(_BYTE *)(v58 + 93) && !*(_BYTE *)(v58 + 144))
              {
                if (!*(_QWORD *)(v58 + 32))
                  break;
                if (!*(_DWORD *)(v58 + 88))
                  break;
                if (!*(_DWORD *)(v58 + 28))
                  break;
                if ((*(_BYTE *)(v58 + 132) & 1) == 0)
                  break;
                lhs = *(CMTime *)(v58 + 120);
                rhs = *(CMTime *)(v58 + 96);
                if (CMTimeCompare(&lhs, &rhs) < 1)
                  break;
              }
            }
            v58 = *(_QWORD *)(v58 + 8);
            if (!v58)
            {
              v61 = 0;
              goto LABEL_151;
            }
          }
          v61 = 1;
        }
        else
        {
          v61 = 0;
          v59 = 0;
        }
LABEL_151:
        if (*(uint64_t *)(DerivedStorage + 344) >= 2 && ((*(_DWORD *)(DerivedStorage + 352) ^ v59) & 7) != 0)
          v61 = 1;
        if ((v61 & 1) == 0)
        {
          v13 = 0;
          v14 = 0;
          v12 = 0;
          v15 = 0;
          *((_BYTE *)values + 9) = 1;
          goto LABEL_169;
        }
LABEL_155:
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a3 + 56), sbuf);
LABEL_156:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        v12 = 1;
        goto LABEL_169;
      case 6:
        SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
        if (SampleAttachmentsArray)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
          if (ValueAtIndex)
          {
            v64 = ValueAtIndex;
            if (CFDictionaryContainsKey(ValueAtIndex, key))
            {
              if (CFDictionaryGetValue(v64, key) != v122)
                goto LABEL_156;
            }
          }
        }
        v65 = (char *)values;
        v66 = *((_QWORD *)values + 78);
        if (!v66)
        {
          v13 = 0;
          v14 = 0;
          v12 = 1;
          goto LABEL_168;
        }
        v12 = 1;
        if (!*((_BYTE *)values + 548))
        {
          v146.value = 0;
          *((_BYTE *)values + 548) = 1;
          time1.value = 0;
          time2.value = 0;
          LOBYTE(v138.value) = 1;
          LODWORD(v139.value) = 0;
          MEMORY[0x19402EEEC](*((_QWORD *)v65 + 71));
          if (*((_QWORD *)v65 + 70))
            goto LABEL_116;
          Basic = FigVisualContextCreateBasic(*(_QWORD *)(v66 + 48), 0, (CFTypeRef *)v65 + 70);
          if (!(_DWORD)Basic)
          {
            *((_QWORD *)v65 + 72) = *((_QWORD *)v65 + 8);
            v68 = *((_QWORD *)v65 + 70);
            v69 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t, __n128 *, uint64_t, uint64_t), char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v69)
            {
              v13 = 4294954514;
LABEL_210:
              MEMORY[0x19402EF04](*((_QWORD *)v65 + 71));
              goto LABEL_213;
            }
            Basic = v69(v68, saig_decodedImageBecameAvailable, v65 + 576);
            if (!(_DWORD)Basic)
            {
LABEL_116:
              MEMORY[0x19402EF04](*((_QWORD *)v65 + 71));
              OutputImagePropertiesForImageRetrieval = FAIGCommon_getOutputImagePropertiesForImageRetrieval(*(CMVideoFormatDescriptionRef *)(a3 + 32), *(CFDictionaryRef *)(v66 + 40), 0, &time1, (CFDictionaryRef *)&time2);
              if ((_DWORD)OutputImagePropertiesForImageRetrieval)
              {
LABEL_212:
                v13 = OutputImagePropertiesForImageRetrieval;
                goto LABEL_213;
              }
              FAIGCommon_checkAndUpdateOutputImagePropertiesForImageRetrieval((_DWORD *)(a3 + 200), time1.value, v123, (CFTypeRef)time2.value, &v138);
              if (time2.value)
              {
                CFRelease((CFTypeRef)time2.value);
                time2.value = 0;
              }
              if (*v125 && !LOBYTE(v138.value))
              {
                v70 = allocator;
                v71 = (CMBufferQueueRef *)(a3 + 192);
                goto LABEL_146;
              }
              saig_ReleaseRenderPipelineForTrack(a3);
              LODWORD(v145.value) = 1111970369;
              Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v73 = Mutable;
              if (v65[656])
                CFDictionarySetValue(Mutable, v115, value);
              DestinationPixelBufferAttributes = FPSupport_CreateDestinationPixelBufferAttributes(time1.value, SHIDWORD(time1.value), (char *)&v145, 1, 0, 1, 0, 0, 0, v121);
              if ((_DWORD)DestinationPixelBufferAttributes
                || (v75 = *(const __CFAllocator **)(v66 + 48),
                    v76 = *(const void **)(a3 + 32),
                    CMTimeMake(&lhs, 1, 30),
                    CMTimeMake(&rhs, 1, 30),
                    DestinationPixelBufferAttributes = FAIGCommon_createRenderPipelineOptions(v75, v76, 0, &lhs, &rhs, v117), (_DWORD)DestinationPixelBufferAttributes))
              {
                v13 = DestinationPixelBufferAttributes;
              }
              else
              {
                MEMORY[0x19402EEEC](*((_QWORD *)v65 + 71));
                v13 = FigVideoRenderPipelineCreateWithVisualContext(*(const __CFAllocator **)(v66 + 48), (int)v73, *v121, *v123, 1, *((_QWORD *)v65 + 70), 0, *v117, v125);
                MEMORY[0x19402EF04](*((_QWORD *)v65 + 71));
                if (!(_DWORD)v13)
                {
                  v77 = *(const opaqueCMFormatDescription **)(a3 + 32);
                  v70 = allocator;
                  v71 = (CMBufferQueueRef *)(a3 + 192);
                  if (v77)
                  {
                    CMFormatDescriptionGetExtensions(v77);
                    if (FigCFDictionaryGetInt32IfPresent())
                    {
                      if (SLODWORD(v139.value) >= 2)
                      {
                        FigBaseObject = FigRenderPipelineGetFigBaseObject(*v125);
                        v79 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 56);
                        if (!v79)
                          goto LABEL_143;
                        v80 = v79(FigBaseObject, CFSTR("FieldMode"), v114);
                        if ((_DWORD)v80)
                          goto LABEL_141;
                      }
                    }
                  }
                  v81 = *((_QWORD *)v65 + 81);
                  if (v81)
                  {
                    v82 = FigRenderPipelineGetFigBaseObject(*v125);
                    v83 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 56);
                    if (!v83)
                      goto LABEL_143;
                    v80 = v83(v82, CFSTR("ClientPID"), v81);
                    if ((_DWORD)v80)
                      goto LABEL_141;
                  }
                  v84 = FigRenderPipelineGetFigBaseObject(*v125);
                  v85 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                  if (v85)
                  {
                    v80 = v85(v84, CFSTR("SourceSampleBufferQueue"), allocator, a3 + 192);
                    if (!(_DWORD)v80)
                    {
                      v86 = FigRenderPipelineGetFigBaseObject(*v125);
                      v87 = *(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                      if (v87)
                        v87(v86, CFSTR("ObeyEmptyMediaMarkers"), value);
                      CMNotificationCenterGetDefaultLocalCenter();
                      v80 = CMNotificationCenterAddListener();
                    }
LABEL_141:
                    v13 = v80;
                    if (!v73)
                      goto LABEL_145;
                    goto LABEL_144;
                  }
LABEL_143:
                  v13 = 4294954514;
                  if (!v73)
                    goto LABEL_145;
                  goto LABEL_144;
                }
              }
              v70 = allocator;
              v71 = (CMBufferQueueRef *)(a3 + 192);
              if (!v73)
              {
LABEL_145:
                if (!(_DWORD)v13)
                {
LABEL_146:
                  if ((*(_BYTE *)(a3 + 132) & 1) == 0)
                    goto LABEL_162;
                  *(_OWORD *)&lhs.value = *v128;
                  lhs.epoch = *(_QWORD *)(a3 + 136);
                  rhs = v142;
                  if (CMTimeCompare(&lhs, &rhs) < 1)
                  {
                    v88 = 1.0;
                    if (*valuePtr >= 0.0)
                      goto LABEL_162;
                  }
                  else
                  {
                    CMSetAttachment(sbuf, v116, value, 1u);
                    v88 = -1.0;
                    if (*valuePtr <= 0.0)
                    {
LABEL_162:
                      OutputImagePropertiesForImageRetrieval = CMBufferQueueEnqueue(*v71, sbuf);
                      if (!(_DWORD)OutputImagePropertiesForImageRetrieval)
                      {
                        v93 = CFDictionaryCreate(v70, (const void **)&keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], 0);
                        v14 = v93;
                        if (!v93)
                        {
                          v97 = FigSignalErrorAt();
                          goto LABEL_205;
                        }
                        v94 = values;
                        v95 = MEMORY[0x1E0CA2E18];
                        *(_OWORD *)((char *)values + 584) = *MEMORY[0x1E0CA2E18];
                        v94[75] = *(_QWORD *)(v95 + 16);
                        v96 = (const void *)v94[77];
                        v94[77] = v93;
                        CFRetain(v93);
                        if (v96)
                          CFRelease(v96);
                        v97 = CMSampleBufferCreate(v70, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&v146);
                        if ((_DWORD)v97)
                          goto LABEL_205;
                        v12 = 1;
                        CMSetAttachment((CMAttachmentBearerRef)v146.value, v120, v14, 1u);
                        v13 = CMBufferQueueEnqueue(*v71, (CMBufferRef)v146.value);
                        CFRelease((CFTypeRef)v146.value);
                        goto LABEL_168;
                      }
                      goto LABEL_212;
                    }
                  }
                  *valuePtr = v88;
                  v89 = CFNumberCreate(v70, kCFNumberFloatType, valuePtr);
                  if (v89)
                  {
                    v90 = v89;
                    v91 = FigRenderPipelineGetFigBaseObject(*v125);
                    v92 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 56);
                    if (!v92)
                    {
                      CFRelease(v90);
                      v14 = 0;
                      v13 = 4294954514;
                      goto LABEL_206;
                    }
                    v13 = v92(v91, CFSTR("PrerollRate"), v90);
                    CFRelease(v90);
                    if ((_DWORD)v13)
                      goto LABEL_213;
                  }
                  goto LABEL_162;
                }
LABEL_213:
                v14 = 0;
                goto LABEL_206;
              }
LABEL_144:
              CFRelease(v73);
              goto LABEL_145;
            }
          }
          v13 = Basic;
          goto LABEL_210;
        }
        v13 = 0;
        v14 = 0;
LABEL_168:
        v15 = 1;
LABEL_169:
        if ((*(_DWORD *)(a3 + 76) & 0x1D) == 1)
        {
          memset(&v139, 0, sizeof(v139));
          memset(&v138, 0, sizeof(v138));
          CMSampleBufferGetOutputDuration(&v138, sbuf);
          CMSampleBufferGetOutputPresentationTimeStamp(&lhs, sbuf);
          v143 = lhs;
          if ((v138.flags & 0x1D) == 1)
          {
            lhs = v143;
            rhs = v138;
            CMTimeAdd(&v139, &lhs, &rhs);
          }
          else
          {
            v139 = v143;
          }
          if (*(_BYTE *)(a3 + 93) && (*(_DWORD *)(a3 + 28) == 1986618469 ? (v98 = v15) : (v98 = 0), (v98 & 1) != 0)
            || (*(_BYTE *)(a3 + 132) & 1) == 0
            || (*(_OWORD *)&lhs.value = *v128,
                lhs.epoch = *(_QWORD *)(a3 + 136),
                rhs = v139,
                CMTimeCompare(&lhs, &rhs) < 0))
          {
            *v128 = *(_OWORD *)&v139.value;
            *(_QWORD *)(a3 + 136) = v139.epoch;
          }
          v99 = *(_DWORD *)(a3 + 28);
          if (v99 == 1936684398 || v99 == 1986618469 && *(_DWORD *)(a3 + 88) == 6)
          {
            memset(&v137, 0, sizeof(v137));
            CMSampleBufferGetPresentationTimeStamp(&v136, sbuf);
            *(_OWORD *)&lhs.value = *v10;
            lhs.epoch = *(_QWORD *)(a3 + 80);
            CMTimeAdd(&v137, &v136, &lhs);
            memset(&v135, 0, sizeof(v135));
            memset(&v134, 0, sizeof(v134));
            CMSampleBufferGetDuration(&v134, sbuf);
            if ((v134.flags & 1) != 0)
            {
              lhs = v137;
              rhs = v134;
              CMTimeAdd(&v135, &lhs, &rhs);
            }
            else
            {
              v135 = v137;
            }
            lhs = v135;
            *(_OWORD *)&rhs.value = *v130;
            rhs.epoch = *(_QWORD *)(a3 + 112);
            if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0
              && (*((_BYTE *)values + 24 * *(unsigned __int8 *)(a3 + 92) + 476) & 1) != 0)
            {
              lhs = v137;
              *(_OWORD *)&rhs.value = *v130;
              rhs.epoch = *(_QWORD *)(a3 + 112);
              if (CMTimeCompare(&lhs, &rhs) < 0)
              {
                *(_OWORD *)&v137.value = *v130;
                v137.epoch = *(_QWORD *)(a3 + 112);
              }
              v100 = (char *)values;
              v101 = (char *)values + 24 * *(unsigned __int8 *)(a3 + 92);
              v133 = v137;
              *(_OWORD *)&v132.value = *((_OWORD *)v101 + 29);
              v132.epoch = *((_QWORD *)v101 + 60);
              v102 = (CMTime *)((char *)values + 440);
              v103 = *((_DWORD *)values + 113);
              if ((v103 & 1) != 0)
              {
                memset(&lhs, 0, sizeof(lhs));
                rhs = v132;
                time1 = *(CMTime *)((char *)values + 416);
                CMTimeSubtract(&lhs, &rhs, &time1);
                memset(&rhs, 0, sizeof(rhs));
                time1 = v133;
                time2 = *v102;
                CMTimeSubtract(&rhs, &time1, &time2);
                memset(&time1, 0, sizeof(time1));
                memset(&time2, 0, sizeof(time2));
                CMTimeMake(&time2, 1, 1);
                v146 = lhs;
                v145 = rhs;
                if (CMTimeCompare(&v146, &v145) < 0)
                {
                  v146 = rhs;
                  *(_OWORD *)&v145.value = *(_OWORD *)&lhs.value;
                  v104 = lhs.epoch;
                }
                else
                {
                  v146 = lhs;
                  *(_OWORD *)&v145.value = *(_OWORD *)&rhs.value;
                  v104 = rhs.epoch;
                }
                v145.epoch = v104;
                CMTimeSubtract(&time1, &v146, &v145);
                v146 = time1;
                v145 = time2;
                if ((CMTimeCompare(&v146, &v145) & 0x80000000) == 0)
                {
                  v105 = MEMORY[0x1E0CA2E18];
                  v106 = *MEMORY[0x1E0CA2E18];
                  *(_OWORD *)&v102->value = *MEMORY[0x1E0CA2E18];
                  v107 = *(_QWORD *)(v105 + 16);
                  v102->epoch = v107;
                  *((_OWORD *)v100 + 26) = v106;
                  *((_QWORD *)v100 + 54) = v107;
                }
                v103 = *((_DWORD *)v100 + 113);
              }
              if ((v103 & 1) == 0)
              {
                rhs = v132;
                time1 = v133;
                CMTimeSubtract(&lhs, &rhs, &time1);
                *(CMTime *)(v100 + 392) = lhs;
                *v102 = v133;
                *((_OWORD *)v100 + 26) = *(_OWORD *)&v132.value;
                *((_QWORD *)v100 + 54) = v132.epoch;
              }
              v108 = 0;
              v109 = *MEMORY[0x1E0CA2E18];
              v110 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
              do
              {
                v111 = &v100[v108 + 464];
                *(_OWORD *)v111 = v109;
                *((_QWORD *)v111 + 2) = v110;
                v108 += 24;
              }
              while (v108 != 72);
            }
          }
        }
        if ((v12 & 1) == 0)
        {
          v112 = *((_QWORD *)values + 78);
          if (v112)
          {
            v97 = saig_RequestAnImageFromPump(v127, v112);
LABEL_205:
            v13 = v97;
          }
        }
LABEL_206:
        if (v14)
          CFRelease(v14);
        return v13;
      default:
        v15 = 0;
        goto LABEL_169;
    }
  }
}

uint64_t saig_TrackEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, _QWORD, _QWORD);

  if (!*(_BYTE *)(a3 + 144))
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (v6)
    {
      v7 = *(unsigned int *)(a3 + 24);
      v8 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v8)
        v8(v6, v7, 0, 0);
    }
    *(_BYTE *)(a3 + 144) = 1;
  }
  return a4;
}

uint64_t saig_ensureDecryptorIsReady(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, uint64_t *);
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  CFTypeRef cf;
  uint64_t v7;

  v7 = 0;
  v2 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v2 || (v3 = v2(a1, &v7), (_DWORD)v3 == -12782))
  {
    cf = 0;
    v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v4)
    {
      v3 = v4(a1, *MEMORY[0x1E0CA3218], *MEMORY[0x1E0C9AE00], &cf);
      if (!(_DWORD)v3)
      {
        if ((CFTypeRef)*MEMORY[0x1E0C9AE40] == cf)
          v3 = 4294954431;
        else
          v3 = 0;
        CFRelease(cf);
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return v3;
}

uint64_t saig_AdjustTime(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CMTime v5;
  CMTime time1;
  CMTime v7;
  CMTime rhs;
  CMTime lhs;
  CMTime v10;

  memset(&v10, 0, sizeof(v10));
  CMSampleBufferGetPresentationTimeStamp(&lhs, a1);
  rhs = *(CMTime *)(a2 + 64);
  CMTimeAdd(&v10, &lhs, &rhs);
  rhs = v10;
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputDuration(&v7, a1);
  if ((v7.flags & 0x1D) == 1)
  {
    time1 = rhs;
    v5 = v7;
    CMTimeAdd(&rhs, &time1, &v5);
  }
  time1 = *(CMTime *)(a2 + 120);
  v5 = rhs;
  if (CMTimeCompare(&time1, &v5) < 0)
    *(CMTime *)(a2 + 120) = rhs;
  time1 = v10;
  return CMSampleBufferSetOutputPresentationTimeStamp(a1, &time1);
}

uint64_t saig_decodedImageBecameAvailable(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 v5;
  unint64_t v6;

  v5 = *a2;
  v6 = a2[1].n128_u64[0];
  FAIGCommon_decodedImageBecameAvailable(a1, &v5, a3, a4);
  return FigSemaphoreSignal();
}

void saig_CleanVideoRendersAndVisualContext()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage[40];
  if (v1)
  {
    v2 = MEMORY[0x1E0CA2E18];
    do
    {
      if (*(_DWORD *)(v1 + 28) == 1986618469 && *(_BYTE *)(v1 + 93))
      {
        saig_ReleaseRenderPipelineForTrack(v1);
        *(_OWORD *)(v1 + 120) = *(_OWORD *)v2;
        *(_QWORD *)(v1 + 136) = *(_QWORD *)(v2 + 16);
        *(_DWORD *)(v1 + 232) = 1065353216;
      }
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  MEMORY[0x19402EEEC](DerivedStorage[71]);
  v3 = (const void *)DerivedStorage[70];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[70] = 0;
  }
  JUMPOUT(0x19402EF04);
}

void saig_postNotificationAsynchronously(uint64_t a1)
{
  const void *v2;
  const void *v3;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

uint64_t FigCDSBaseProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSBaseProtocolGetProtocolID_sRegisterFigCDSBaseProtocolTypeOnce, RegisterFigCDSBaseProtocolType);
  return sFigCDSBaseProtocolID;
}

uint64_t RegisterFigCDSBaseProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCDSTimerStart(uint64_t a1)
{
  dispatch_source_t v2;
  void *v3;

  v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(a1 + 64));
  *(_QWORD *)(a1 + 72) = v2;
  if (v2)
  {
    v3 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)cdsTimerOnTimerCanceled);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 72), (dispatch_function_t)cdsTimerDispatchFunctionCallback);
    dispatch_set_context(*(dispatch_object_t *)(a1 + 72), v3);
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 72), 0, 1000000 * *(int *)(a1 + 36), 0);
    dispatch_resume(*(dispatch_object_t *)(a1 + 72));
  }
  *(_BYTE *)(a1 + 33) = 0;
  return 0;
}

void cdsTimerOnTimerCanceled(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void cdsTimerDispatchFunctionCallback()
{
  uint64_t v0;
  void (**v1)(void);
  uint64_t v2;
  const void *v3;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (void (**)(void))v0;
    if (*(_QWORD *)(v0 + 24))
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        v1[3]();
        CFRelease(v3);
      }
    }
    CFRelease(v1);
  }
}

uint64_t FigCDSTimerStop(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
  }
  *(_BYTE *)(a1 + 33) = 1;
  return 0;
}

BOOL FigCDSTimerIsOn(uint64_t a1)
{
  return *(_BYTE *)(a1 + 33) == 0;
}

uint64_t FigCDSTimerCreate(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  char __str[256];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  MEMORY[0x19402F294](&FigCDSTimerLocalGetTypeID_sRegisterFigCDSTimerOnce, RegisterFigCDSTimerClass);
  Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 32) = 256;
  *(_DWORD *)(Instance + 36) = a1;
  snprintf(__str, 0x100uLL, "com.apple.coremedia.figcdstimer.soQueue<%p>", (const void *)Instance);
  *(_QWORD *)(Instance + 64) = dispatch_queue_create(__str, 0);
  if (a2
    && a3
    && (*(_QWORD *)(Instance + 24) = a2,
        v9 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(Instance + 16) = v9) == 0))
  {
    v10 = FigSignalErrorAt();
    CFRelease((CFTypeRef)Instance);
  }
  else
  {
    v10 = 0;
    *a4 = Instance;
  }
  return v10;
}

uint64_t RegisterFigCDSTimerClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCDSTimerID = result;
  return result;
}

double FigCDSTimerInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCDSTimer_Finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 64);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

__CFString *FigCDSTimerCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSTimer %p>"), a1);
  return Mutable;
}

uint64_t FigAlternateFilterGetClassID()
{
  MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  return sFigAlternateFilterClassID;
}

uint64_t RegisterFigAlternateFilterType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateFilterGetTypeID()
{
  MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigSimpleAlternateFilterCreate(uint64_t a1, const void *a2, int a3, __int128 *a4, const void *a5, _QWORD *a6)
{
  uint64_t v10;
  uint64_t DerivedStorage;
  CFTypeRef v12;
  __int128 v13;
  __int128 v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  v10 = CMDerivedObjectCreate();
  if ((_DWORD)v10)
    return v10;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v12 = CFRetain(a2);
  else
    v12 = 0;
  *(_QWORD *)DerivedStorage = v12;
  *(_DWORD *)(DerivedStorage + 8) = a3;
  v13 = *a4;
  v14 = a4[1];
  *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a4 + 4);
  *(_OWORD *)(DerivedStorage + 16) = v13;
  *(_OWORD *)(DerivedStorage + 32) = v14;
  if (a5)
    v15 = CFRetain(a5);
  else
    v15 = 0;
  *(_QWORD *)(DerivedStorage + 72) = v15;
  v16 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 56) = v16;
  if (!v16)
    return FigSignalErrorAt();
  v17 = 0;
  *a6 = 0;
  return v17;
}

CFTypeRef FigCFRetain(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void FigCFRelease_2(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigAlternateMergeFilterCreate(uint64_t a1, const void *a2, int a3, const void *a4, const void *a5, int a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t DerivedStorage;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;

  MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  v13 = CMDerivedObjectCreate();
  if (!(_DWORD)v13)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a2)
      v15 = CFRetain(a2);
    else
      v15 = 0;
    *(_QWORD *)DerivedStorage = v15;
    *(_DWORD *)(DerivedStorage + 8) = a3;
    if (a4)
      v16 = CFRetain(a4);
    else
      v16 = 0;
    *(_QWORD *)(DerivedStorage + 16) = v16;
    if (a5)
      v17 = CFRetain(a5);
    else
      v17 = 0;
    *(_QWORD *)(DerivedStorage + 24) = v17;
    *(_DWORD *)(DerivedStorage + 32) = a6;
    *a7 = 0;
  }
  return v13;
}

uint64_t FigAlternateHDCPLazyEPMFilterCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  uint64_t v11;

  MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    return v8;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = FigCFWeakReferenceHolderCreateWithReferencedObject();
  DerivedStorage[1] = a2;
  DerivedStorage[2] = a3;
  DerivedStorage[3] = 0x100000001;
  v10 = FigSimpleMutexCreate();
  DerivedStorage[4] = v10;
  if (!v10)
    return FigSignalErrorAt();
  v11 = 0;
  *a5 = 0;
  return v11;
}

uint64_t FigAlternateProtectedHDCPLevelUpperLimitFilterCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[4];

  *(_DWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("ProtectedHDCPLevelUpperLimit"), 1000, (__int128 *)&unk_1E2F88D30, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL fhaf_protectedLevelUpperLimitFilterFn(uint64_t a1, CFDataRef theData)
{
  int v3;

  v3 = *(_DWORD *)CFDataGetBytePtr(theData);
  return v3 >= (int)FigAlternateGetHDCPLevel(a1);
}

CFStringRef fhaf_copyProtectedHDCPLevelUpperLimitDescAddendum(int a1, CFDataRef theData)
{
  int *BytePtr;
  const __CFAllocator *v3;
  const __CFString *LoggingStringFromHDCPLevel;

  BytePtr = (int *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  LoggingStringFromHDCPLevel = FigAlternateGetLoggingStringFromHDCPLevel(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, CFSTR("hdcpLevel:%@"), LoggingStringFromHDCPLevel);
}

uint64_t FigAlternateSupportedVideoRangeFilterCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[4];

  *(_DWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("SupportedVideoRange"), 1000, (__int128 *)&unk_1E2F88D58, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL faf_SupportedVideoRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  int v3;
  unsigned int VideoRange;
  unsigned int v5;
  int IsAudioOnly;
  _BOOL4 v9;

  v3 = *(_DWORD *)CFDataGetBytePtr(theData);
  VideoRange = FigAlternateGetVideoRange(a1);
  v5 = FPSupportVideoRangeToAlternateVideoRange(v3);
  IsAudioOnly = FigAlternateIsAudioOnly(a1);
  v9 = VideoRange == 2 && v3 == 1 || v5 >= VideoRange;
  if (!v3 && !FigAlternateGetCodecString(a1))
    v9 = 1;
  return IsAudioOnly || v9;
}

CFStringRef faf_copySupportedVideoRangeDescAddendum(int a1, CFDataRef theData)
{
  int *BytePtr;
  const __CFAllocator *v3;
  const char *ModeString;

  BytePtr = (int *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ModeString = FPSupport_GetModeString(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, CFSTR("mode:[%s]"), ModeString);
}

uint64_t FigAlternateMediaValidationFilterCreate(uint64_t a1, int a2, _QWORD *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;

  v5 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!a2)
    v5 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  if (*v5)
    v6 = CFRetain(*v5);
  else
    v6 = 0;
  return FigSimpleAlternateFilterCreate(a1, CFSTR("MediaValidation"), 1000, (__int128 *)&unk_1E2F88D80, v6, a3);
}

uint64_t faf_mediaValidationFilterFn(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (FigAlternateHasVideoFormat(a1, 2) && FigAlternateGetVideoRange(a1) == 3)
    return 0;
  if (!FigAlternateGetCodecString(a1))
    return 1;
  result = FigAlternateHasValidCodecs(a1);
  if (!(_DWORD)result)
    return result;
  return *MEMORY[0x1E0C9AE50] == a2 || !FigAlternateHasUnknownCodecs(a1);
}

CFStringRef faf_copyMediaValidationDescAddendum(uint64_t a1, uint64_t a2)
{
  const char *v2;

  if (*MEMORY[0x1E0C9AE50] == a2)
    v2 = "YES";
  else
    v2 = "NO";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("allowUnknownCodecs:%s"), v2);
}

uint64_t FigAlternateAllowedCPCFilterCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[8];

  *(_QWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("AllowedCPC"), 1000, (__int128 *)&unk_1E2F88DA8, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL faf_allowedCPCFilterFn(uint64_t a1, CFDataRef theData)
{
  uint64_t v3;
  uint64_t AllowedCPC;
  uint64_t v5;

  v3 = *(_QWORD *)CFDataGetBytePtr(theData);
  AllowedCPC = FigAlternateGetAllowedCPC(a1);
  v5 = FigAlternateGetAllowedCPC(a1);
  return (AllowedCPC & v3) != 0 || v5 == -1;
}

CFStringRef faf_copyAllowedCPCDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("systemCPC:0x%llx"), *(_QWORD *)BytePtr);
}

uint64_t FigAlternateSuppressVP9FilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("SuppressVP9"), 1100, (__int128 *)&unk_1E2F88DD0, 0, a2);
}

BOOL faf_SuppressVP9FilterFn(uint64_t a1)
{
  return FigAlternateHasVideoFormat(a1, 3) == 0;
}

uint64_t FigAlternatePathwayPreferenceFilterCreate(void *a1, const void *a2, const void *a3, _QWORD *a4)
{
  CFAllocatorRef v8;
  const __CFAllocator *v9;
  CFTypeRef *v10;
  CFTypeRef *v11;
  CFDataRef v12;
  CFDataRef v13;
  CFTypeRef v14;
  uint64_t v15;
  const __CFAllocator *v16;
  CFAllocatorContext context;

  context.version = 0;
  context.info = a1;
  context.retain = (CFAllocatorRetainCallBack)FigCFRetain;
  context.release = (CFAllocatorReleaseCallBack)FigCFRelease_2;
  memset(&context.copyDescription, 0, 24);
  context.deallocate = (CFAllocatorDeallocateCallBack)fappfContextDeallocateCallback;
  context.preferredSize = 0;
  v8 = CFAllocatorCreate((CFAllocatorRef)a1, &context);
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  v10 = (CFTypeRef *)CFAllocatorAllocate((CFAllocatorRef)a1, 40, 0);
  if (v10)
  {
    v11 = v10;
    *v10 = a3;
    v10[1] = a2;
    v10[3] = 0;
    v10[4] = 0;
    v10[2] = 0;
    v12 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)a1, (const UInt8 *)v10, 40, v9);
    if (v12)
    {
      v13 = v12;
      if (*v11)
        CFRetain(*v11);
      v14 = v11[1];
      if (v14)
        CFRetain(v14);
      v15 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PathwayPreference"), 647, (__int128 *)&off_1E2F88DF8, v13, a4);
      CFRelease(v9);
      v16 = v13;
      goto LABEL_9;
    }
    v15 = FigSignalErrorAt();
    CFAllocatorDeallocate((CFAllocatorRef)a1, v11);
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  v16 = v9;
LABEL_9:
  CFRelease(v16);
  return v15;
}

const __CFArray *fappf_PathwayFilterInitFn(const __CFData *a1)
{
  const UInt8 *BytePtr;
  const void *v2;
  const __CFArray *result;

  BytePtr = CFDataGetBytePtr(a1);
  v2 = (const void *)*((_QWORD *)BytePtr + 2);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)BytePtr + 2) = 0;
  }
  result = *(const __CFArray **)BytePtr;
  if (*(_QWORD *)BytePtr)
    result = (const __CFArray *)CFArrayGetCount(result);
  *((_QWORD *)BytePtr + 3) = result;
  if (!*((_QWORD *)BytePtr + 4))
  {
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)BytePtr + 4) = result;
  }
  return result;
}

void fappf_PathwayFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFString *PathwayID;
  const __CFArray *v5;
  const void *v6;
  CFIndex FirstIndexOfValue;
  CFRange v8;

  BytePtr = CFDataGetBytePtr(theData);
  PathwayID = FigAlternateGetPathwayID(a1);
  FirstIndexOfValue = 0;
  if (PathwayID && *(_QWORD *)BytePtr)
  {
    if (!FigCFDictionaryGetCFIndexIfPresent())
    {
      v5 = *(const __CFArray **)BytePtr;
      v8.length = CFArrayGetCount(*(CFArrayRef *)BytePtr);
      v8.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v5, v8, PathwayID);
      if (FirstIndexOfValue == -1)
        FirstIndexOfValue = CFArrayGetCount(*(CFArrayRef *)BytePtr);
      FigCFDictionarySetCFIndex();
    }
  }
  else
  {
    FirstIndexOfValue = *((_QWORD *)BytePtr + 3);
  }
  if (FirstIndexOfValue < *((_QWORD *)BytePtr + 3))
  {
    v6 = (const void *)*((_QWORD *)BytePtr + 2);
    *((_QWORD *)BytePtr + 2) = PathwayID;
    if (PathwayID)
      CFRetain(PathwayID);
    if (v6)
      CFRelease(v6);
    *((_QWORD *)BytePtr + 3) = FirstIndexOfValue;
  }
}

uint64_t fappf_PathwayFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFString *PathwayID;

  BytePtr = CFDataGetBytePtr(theData);
  PathwayID = FigAlternateGetPathwayID(a1);
  if (PathwayID)
  {
    if (*((_QWORD *)BytePtr + 2) || *((_QWORD *)BytePtr + 1))
      return FigCFEqual();
    *((_QWORD *)BytePtr + 2) = PathwayID;
    CFRetain(PathwayID);
  }
  return 1;
}

CFStringRef fappf_PathwayFilterDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const void *v3;
  CFStringRef v4;

  BytePtr = CFDataGetBytePtr(theData);
  v3 = (const void *)FigCFCopyCompactDescription();
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("Pathway Priority: %@, Fallback Pathway: %@"), v3, *((_QWORD *)BytePtr + 1));
  if (v3)
    CFRelease(v3);
  return v4;
}

void fappfContextDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v4 = *ptr;
  if (v4)
  {
    CFRelease(v4);
    *ptr = 0;
  }
  v5 = ptr[1];
  if (v5)
  {
    CFRelease(v5);
    ptr[1] = 0;
  }
  v6 = ptr[2];
  if (v6)
  {
    CFRelease(v6);
    ptr[2] = 0;
  }
  v7 = ptr[4];
  if (v7)
  {
    CFRelease(v7);
    ptr[4] = 0;
  }
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateAllowListWithStableVariantIDFilterCreate(uint64_t a1, const void *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t (*v4)();
  __int128 v6;
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)();
  uint64_t v9;

  v4 = faf_allEqualMinSortingFn;
  if (a3 >= 0x372)
    v4 = 0;
  v6 = 0uLL;
  v7 = fasvip_StableVariantIDFilterFn;
  v8 = v4;
  v9 = 0;
  return FigSimpleAlternateFilterCreate(a1, CFSTR("StableVariantIDPinning"), a3, &v6, a2, a4);
}

uint64_t fasvip_StableVariantIDFilterFn(uint64_t a1)
{
  FigAlternateGetStableStreamIdentifier(a1);
  return FigCFEqual();
}

uint64_t faf_allEqualMinSortingFn()
{
  return 0;
}

uint64_t FigAlternateAllowListWithStableRenditionIDFilterCreate(void *a1, CFTypeRef cf, const void *a3, int a4, unsigned int a5, _QWORD *a6)
{
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t (*v13)();
  _QWORD v15[2];
  uint64_t v16;

  v16 = 0;
  if (cf)
    v11 = CFRetain(cf);
  else
    v11 = 0;
  v15[0] = v11;
  if (a3)
    v12 = CFRetain(a3);
  else
    v12 = 0;
  v15[1] = v12;
  LODWORD(v16) = a4;
  if (a5 >= 0x372)
    v13 = 0;
  else
    v13 = faf_allEqualMinSortingFn;
  return fsaf_createWithBytes(a1, CFSTR("StableRenditionIDPinning"), a5, (uint64_t)fasrif_StableRenditionIDFilterFn, (uint64_t)v13, 0, 0, 0, v15, 0x18uLL, (void (__cdecl *)(void *, void *))fasrifContextDeallocateCallback, a6);
}

uint64_t fsaf_createWithBytes(void *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CFTypeRef (*a8)(), const void *a9, size_t a10, void (__cdecl *a11)(void *, void *), _QWORD *a12)
{
  CFTypeRef (*v17)();
  UInt8 *v18;
  const UInt8 *v19;
  const __CFAllocator *v20;
  const __CFAllocator *v21;
  CFDataRef v22;
  CFDataRef v23;
  uint64_t v24;
  CFDataRef v25;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  CFTypeRef (*v32)();
  CFAllocatorContext context;

  context.version = 0;
  context.info = a1;
  context.retain = (CFAllocatorRetainCallBack)FigCFRetain;
  context.release = (CFAllocatorReleaseCallBack)FigCFRelease_2;
  memset(&context.copyDescription, 0, 24);
  context.deallocate = a11;
  if (a8)
    v17 = a8;
  else
    v17 = fsaf_copyEmptyDescAddendum;
  context.preferredSize = 0;
  v18 = (UInt8 *)CFAllocatorAllocate((CFAllocatorRef)a1, a10, 0);
  if (!v18)
    return FigSignalErrorAt();
  v19 = v18;
  memcpy(v18, a9, a10);
  v20 = CFAllocatorCreate((CFAllocatorRef)a1, &context);
  if (!v20)
    return FigSignalErrorAt();
  v21 = v20;
  v22 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)a1, v19, a10, v20);
  if (v22)
  {
    v23 = v22;
    *(_QWORD *)&v29 = a7;
    *((_QWORD *)&v29 + 1) = a6;
    v30 = a4;
    v31 = a5;
    v32 = v17;
    v24 = FigSimpleAlternateFilterCreate((uint64_t)a1, a2, a3, &v29, v22, a12);
    CFRelease(v21);
    v25 = v23;
  }
  else
  {
    v24 = FigSignalErrorAt();
    v25 = v21;
  }
  CFRelease(v25);
  return v24;
}

uint64_t fasrif_StableRenditionIDFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  FigAlternateGetStableStreamIdentifierForMediaSubstream(a1, *((_DWORD *)BytePtr + 4), *(const void **)BytePtr);
  return FigCFEqual();
}

void fasrifContextDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;

  v4 = *ptr;
  if (v4)
  {
    CFRelease(v4);
    *ptr = 0;
  }
  v5 = ptr[1];
  if (v5)
  {
    CFRelease(v5);
    ptr[1] = 0;
  }
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateMediaSelectionAudibleFilterCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFTypeRef v7;

  MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    *DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

uint64_t FigAlternateSuppressAudioOnlyFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  return fsaf_createWithNoContext(a1, CFSTR("SuppressAudioOnly"), 950, (uint64_t)FigAlternateHasVideo, (uint64_t)faf_allEqualMinSortingFn, a2);
}

uint64_t fsaf_createWithNoContext(const __CFAllocator *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  CFDataRef v12;
  CFDataRef v13;
  uint64_t (*v14)(uint64_t, uint64_t, CFDataRef);
  uint64_t (*v15)(uint64_t, CFDataRef);
  uint64_t v16;
  __int128 v18;
  uint64_t (*v19)(uint64_t, CFDataRef);
  uint64_t (*v20)(uint64_t, uint64_t, CFDataRef);
  CFTypeRef (*v21)();
  UInt8 bytes[8];
  uint64_t v23;

  *(_QWORD *)bytes = a4;
  v23 = a5;
  v12 = CFDataCreate(a1, bytes, 16);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  v14 = fsaf_ComparatorFnNoContext;
  if (!a5)
    v14 = 0;
  v15 = fsaf_filterFnNoContext;
  if (!a4)
    v15 = 0;
  v18 = 0uLL;
  v19 = v15;
  v20 = v14;
  v21 = fsaf_copyEmptyDescAddendum;
  v16 = FigSimpleAlternateFilterCreate((uint64_t)a1, a2, a3, &v18, v12, a6);
  CFRelease(v13);
  return v16;
}

uint64_t FigAlternateIFramesOnlyFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  return fsaf_createWithNoContext(a1, CFSTR("IFramesOnly"), 950, (uint64_t)FigAlternateIsIFrameOnly, 0, a2);
}

uint64_t FigAlternateContinuousFramesOnlyFilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("ContinuousFramesOnly"), 950, (__int128 *)&unk_1E2F88E38, 0, a2);
}

BOOL faf_ContinuousFramesOnlyFilterFn(uint64_t a1)
{
  return FigAlternateIsIFrameOnly(a1) == 0;
}

uint64_t FigAlternateURLDependencyDenyListFilterCreate(void *a1, CFTypeRef cf, const void *a3, int a4, _QWORD *a5)
{
  CFTypeRef v9;
  int v10;
  uint64_t (*v11)();
  _QWORD v13[2];

  if (!cf)
    return FigSignalErrorAt();
  v13[0] = CFRetain(cf);
  if (a3)
    v9 = CFRetain(a3);
  else
    v9 = 0;
  v13[1] = v9;
  if (a4)
    v10 = 890;
  else
    v10 = 878;
  if (a4)
    v11 = 0;
  else
    v11 = faf_allEqualMinSortingFn;
  return fsaf_createWithBytes(a1, CFSTR("URLDependency"), v10, (uint64_t)faf_urlDependencyFilterFn, (uint64_t)v11, 0, 0, 0, v13, 0x10uLL, (void (__cdecl *)(void *, void *))faf_urlDependencyDeallocateCallback, a5);
}

BOOL faf_urlDependencyFilterFn(uint64_t a1, CFDataRef theData)
{
  CFArrayRef *BytePtr;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  BytePtr = (CFArrayRef *)CFDataGetBytePtr(theData);
  FigAlternateGetPlaylistAlternateURL(a1);
  if (!CFArrayGetCount(*BytePtr))
    return 1;
  if (!BytePtr[1])
    return FigCFArrayContainsValue() == 0;
  if (!FigAlternateHasVideo(a1))
    FigAlternateHasAudio(a1);
  Count = CFArrayGetCount(BytePtr[1]);
  if (Count < 1)
    return FigCFArrayContainsValue() == 0;
  v6 = Count;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(BytePtr[1], v7);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
    v13 = 0;
    if (FigCFStringGetOSTypeValue())
    {
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
      v11 = 0;
      v12 = 0;
      v10 = 0;
      FigAlternateGetRenditionInfoForMediaType(a1, v13, Value, Value, Value, 0, &v10, &v12, &v11);
      if (v12)
      {
        if (FigCFArrayContainsValue())
          break;
      }
    }
    if (v6 == ++v7)
      return FigCFArrayContainsValue() == 0;
  }
  return 0;
}

void faf_urlDependencyDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  v5 = ptr[1];
  if (v5)
    CFRelease(v5);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateScanModePreferenceFilterCreate(const __CFAllocator *a1, UInt8 a2, _QWORD *a3)
{
  CFDataRef v5;
  uint64_t v6;
  UInt8 bytes;

  bytes = a2;
  v5 = CFDataCreate(a1, &bytes, 1);
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("ScanModePreference"), 881, (__int128 *)&unk_1E2F88E60, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL faf_ScanModeFn(uint64_t a1, CFDataRef theData)
{
  int v3;

  v3 = *CFDataGetBytePtr(theData);
  return v3 == FigAlternateIsIFrameOnly(a1);
}

uint64_t faf_ScanModeMinSortingFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  int v5;
  unsigned int IsIFrameOnly;
  unsigned int v7;
  uint64_t v8;

  v5 = *CFDataGetBytePtr(theData);
  IsIFrameOnly = FigAlternateIsIFrameOnly(a1);
  v7 = FigAlternateIsIFrameOnly(a2);
  v8 = -1;
  if (IsIFrameOnly >= v7)
    v8 = 1;
  if (IsIFrameOnly == v7)
    v8 = 0;
  if (v5)
    return -v8;
  else
    return v8;
}

CFTypeRef faf_copyScanModePreferenceDescAddendum(int a1, CFDataRef theData)
{
  if (*CFDataGetBytePtr(theData))
    return CFRetain(CFSTR("I-Frame"));
  else
    return CFRetain(CFSTR("contiguous"));
}

uint64_t FigAlternateSupportedAudioFormatFilterCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[4];
  __int16 v10;
  char v11;

  *(_DWORD *)bytes = a2;
  v11 = BYTE6(a2);
  v10 = WORD2(a2);
  v5 = CFDataCreate(a1, bytes, 7);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("SupportedAudioFormat"), 1000, (__int128 *)&unk_1E2F88E88, v5, a3);
  CFRelease(v6);
  return v7;
}

BOOL faf_supportedAudioFormatFilterFn(const void *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  _BOOL8 result;
  int HasAudioFormat;

  BytePtr = CFDataGetBytePtr(theData);
  v4 = *BytePtr;
  v5 = BytePtr[1];
  v6 = BytePtr[2];
  v7 = BytePtr[3];
  v8 = BytePtr[4];
  v9 = BytePtr[5];
  v10 = BytePtr[6];
  if (FigAlternateHasAudioFormat((uint64_t)a1, 7))
  {
    v11 = !v9 && v8 == 0;
    if (v11 && v6 == 0)
      return 0;
  }
  if (FigAlternateHasAudioFormat((uint64_t)a1, 6) && !v8 && !v5
    || FigAlternateHasAudioFormat((uint64_t)a1, 5) && !v7 && !v4)
  {
    return 0;
  }
  HasAudioFormat = FigAlternateHasAudioFormat((uint64_t)a1, 3);
  result = 1;
  if (HasAudioFormat)
  {
    if (!v10)
      return (int)FigAlternateGetMaxAudioChannelCount(a1) < 3;
  }
  return result;
}

CFStringRef faf_copySupportedAudioFormatDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  BytePtr = CFDataGetBytePtr(theData);
  if (BytePtr[3])
    v3 = "YES";
  else
    v3 = "NO";
  if (BytePtr[4])
    v4 = "YES";
  else
    v4 = "NO";
  if (BytePtr[5])
    v5 = "YES";
  else
    v5 = "NO";
  if (*BytePtr)
    v6 = "YES";
  else
    v6 = "NO";
  if (BytePtr[1])
    v7 = "YES";
  else
    v7 = "NO";
  if (BytePtr[2])
    v8 = "YES";
  else
    v8 = "NO";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("ac3IsDecodable:%s ec3IsDecodable:%s atmosIsDecodable:%s, ac3CanPassthrough:%s ec3CanPassthrough:%s, atmosCanPassthrough:%s"), v3, v4, v5, v6, v7, v8);
}

uint64_t FigAlternateLowPowerModeFilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("LowPowerMode"), 850, (__int128 *)&unk_1E2F88EB0, 0, a2);
}

BOOL faf_LowPowerModeFilterFn(unint64_t a1)
{
  return FigAlternateShouldBeAvoidedForPlaybackInLPM(a1) == 0;
}

uint64_t FigAlternatePreferVideoCodecsWithHardwareDecodeFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  UInt8 bytes;

  bytes = 0;
  v4 = CFDataCreate(a1, &bytes, 1);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PreferVideoCodecsWithHardwareDecode"), 876, (__int128 *)&off_1E2F88ED8, v4, a2);
  CFRelease(v5);
  return v6;
}

const UInt8 *faf_PreferVideoCodecsWithHardwareDecodeFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *result = 0;
  return result;
}

uint64_t faf_PreferVideoCodecsWithHardwareDecodeFirstPassFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;
  BOOL v5;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigAlternateHasVideo(a1);
  if ((_DWORD)result)
  {
    result = FigAlternateHasVideoCodecRequiringSoftwareDecode(a1);
    v5 = (_DWORD)result == 0;
  }
  else
  {
    v5 = 0;
  }
  *BytePtr |= v5;
  return result;
}

BOOL faf_PreferVideoCodecsWithHardwareDecodeFilterFn(uint64_t a1, CFDataRef theData)
{
  return !*CFDataGetBytePtr(theData)
      || !FigAlternateHasVideo(a1)
      || !FigAlternateHasVideoCodecRequiringSoftwareDecode(a1);
}

uint64_t FigAlternateOfflinePlayableForMediaSelectionFilterCreate(void *a1, uint64_t a2, const __CFArray *a3, int a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t (*v10)();
  __int128 v11;
  __int128 v12;
  CFTypeRef v13;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  result = FigStreamingCacheCopyCompletedMediaStreamURLs(a2, (CFArrayRef *)&v11, (CFArrayRef *)&v11 + 1);
  if (!(_DWORD)result)
  {
    if (a4)
      v10 = 0;
    else
      v10 = faf_allEqualMinSortingFn;
    *(_QWORD *)&v12 = faf_copyMediaSelectionPersistentIDForMediaType(a3, 1986618469);
    *((_QWORD *)&v12 + 1) = faf_copyMediaSelectionPersistentIDForMediaType(a3, 1936684398);
    v13 = faf_copyMediaSelectionPersistentIDForMediaType(a3, 1935832172);
    return fsaf_createWithBytes(a1, CFSTR("OfflinePlayable"), 1050, (uint64_t)faf_offlinePlayableFilterFn, (uint64_t)v10, 0, 0, 0, &v11, 0x28uLL, (void (__cdecl *)(void *, void *))faf_offlinePlayableForMediaSelectionFilterBytesDeallocateCallback, a5);
  }
  return result;
}

CFTypeRef faf_copyMediaSelectionPersistentIDForMediaType(CFArrayRef theArray, int a2)
{
  CFIndex v4;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFTypeRef result;

  v4 = 0;
  if (!theArray)
    goto LABEL_3;
LABEL_2:
  for (i = CFArrayGetCount(theArray); ; i = 0)
  {
    if (v4 >= i)
      return 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v4);
    if ((CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsMediaType"))
       || CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType")))
      && FigCFStringGetOSTypeValue()
      && !a2)
    {
      break;
    }
    ++v4;
    if (theArray)
      goto LABEL_2;
LABEL_3:
    ;
  }
  result = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
  if (result)
    return CFRetain(result);
  return result;
}

BOOL faf_offlinePlayableFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  _BOOL8 v4;

  BytePtr = CFDataGetBytePtr(theData);
  v4 = faf_isMediaSelectionOptionOfflinePlayable((uint64_t)BytePtr, a1, 1986618469)
    && (!*((_QWORD *)BytePtr + 3)
     || faf_isMediaSelectionOptionOfflinePlayable((uint64_t)BytePtr, a1, 1936684398))
    && (!*((_QWORD *)BytePtr + 4)
     || faf_isMediaSelectionOptionOfflinePlayable((uint64_t)BytePtr, a1, 1935832172));
  FigAlternateSetLastKnownValueForIsFullyCached(a1, v4);
  return v4;
}

void faf_offlinePlayableForMediaSelectionFilterBytesDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  v5 = ptr[1];
  if (v5)
    CFRelease(v5);
  v6 = ptr[2];
  if (v6)
    CFRelease(v6);
  v7 = ptr[3];
  if (v7)
    CFRelease(v7);
  v8 = ptr[4];
  if (v8)
    CFRelease(v8);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateAllowableMediaSubtypeFilterCreate(const __CFAllocator *a1, const __CFArray *a2, const __CFArray *a3, _QWORD *a4)
{
  const CFArrayCallBacks *v8;
  BOOL v9;
  CFIndex v10;
  CFIndex i;
  CFIndex v12;
  CFIndex j;
  _QWORD v15[2];
  uint64_t v16;

  v16 = 0;
  v8 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v15[0] = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v15[1] = CFArrayCreateMutable(a1, 0, v8);
  if (FigCFArrayContainsInt32())
    v9 = FigCFArrayContainsInt32() == 0;
  else
    v9 = 0;
  v10 = 0;
  LOBYTE(v16) = v9;
  if (!a2)
    goto LABEL_6;
LABEL_5:
  for (i = CFArrayGetCount(a2); v10 < i; i = 0)
  {
    FigCFArrayGetInt32AtIndex();
    if (!FigCFArrayContainsInt32())
      FigCFArrayAppendInt32();
    ++v10;
    if (a2)
      goto LABEL_5;
LABEL_6:
    ;
  }
  v12 = 0;
  if (!a3)
    goto LABEL_14;
LABEL_13:
  for (j = CFArrayGetCount(a3); v12 < j; j = 0)
  {
    FigCFArrayGetInt32AtIndex();
    if (!FigCFArrayContainsInt32())
      FigCFArrayAppendInt32();
    ++v12;
    if (a3)
      goto LABEL_13;
LABEL_14:
    ;
  }
  return fsaf_createWithBytes(a1, CFSTR("AllowableMediaSubtypes"), 885, (uint64_t)faf_allowableMediaSubtypeIsAlternateMediaSubtypesAllowed, 0, 0, 0, (CFTypeRef (*)())faf_allowableMediaSubtypeDescAddendum, v15, 0x18uLL, (void (__cdecl *)(void *, void *))faf_allowableMediaSubtypesDeallocateCallback, a4);
}

BOOL faf_allowableMediaSubtypeIsAlternateMediaSubtypesAllowed(const __CFArray *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFArray *v4;
  const __CFArray *v5;
  unsigned int CountOfValidMediaSubTypes;
  int v7;
  uint64_t i;
  const __CFArray *Count;
  unsigned int v10;
  int v11;
  uint64_t j;
  const __CFArray *v13;

  BytePtr = CFDataGetBytePtr(theData);
  v4 = (const __CFArray *)*((_QWORD *)BytePtr + 1);
  if ((!v4 || CFArrayGetCount(v4) <= 0) && (!*(_QWORD *)BytePtr || CFArrayGetCount(*(CFArrayRef *)BytePtr) < 1))
    return 1;
  if (FigAlternateHasUnknownCodecs((uint64_t)a1))
    return 0;
  v5 = (const __CFArray *)*((_QWORD *)BytePtr + 1);
  if (v5 && CFArrayGetCount(v5) >= 1)
  {
    CountOfValidMediaSubTypes = FigAlternateGetCountOfValidMediaSubTypes(a1, 1936684398);
    if (!BytePtr[16])
      CountOfValidMediaSubTypes += FigAlternateHasAudioFormat((uint64_t)a1, 7);
    v7 = 0;
    for (i = 0; ; ++i)
    {
      Count = (const __CFArray *)*((_QWORD *)BytePtr + 1);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      FigCFArrayGetInt32AtIndex();
      v7 += FigAlternateHasAudioFormatID((uint64_t)a1, 0);
    }
    if (v7 != CountOfValidMediaSubTypes)
      return 0;
  }
  if (!*(_QWORD *)BytePtr || CFArrayGetCount(*(CFArrayRef *)BytePtr) < 1)
    return 1;
  v10 = FigAlternateGetCountOfValidMediaSubTypes(a1, 1986618469);
  v11 = 0;
  for (j = 0; ; ++j)
  {
    v13 = *(const __CFArray **)BytePtr;
    if (*(_QWORD *)BytePtr)
      v13 = (const __CFArray *)CFArrayGetCount(v13);
    if (j >= (uint64_t)v13)
      break;
    FigCFArrayGetInt32AtIndex();
    v11 += FigAlternateHasVideoCodecType((uint64_t)a1, 0);
  }
  return v11 == v10;
}

CFStringRef faf_allowableMediaSubtypeDescAddendum(int a1, CFDataRef theData)
{
  const void *v2;
  const void *v3;
  CFStringRef v4;

  CFDataGetBytePtr(theData);
  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = (const void *)FigCFCopyCompactDescription();
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("videoSubtypes:%@ audioSubtypes:%@"), v2, v3);
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  return v4;
}

void faf_allowableMediaSubtypesDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  v5 = ptr[1];
  if (v5)
    CFRelease(v5);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternatePreferredVideoFormatFilterCreate(CFAllocatorRef allocator, int a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  CFDataRef v7;
  CFDataRef v8;
  uint64_t v9;
  UInt8 bytes[4];
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)bytes = a2;
  v11 = a3;
  v12 = 0;
  switch(a2)
  {
    case 0:
      *(_DWORD *)bytes = 4;
      goto LABEL_4;
    case 1:
      if (a3 - 7 > 1)
        goto LABEL_4;
      goto LABEL_8;
    case 2:
      if (a3 > 9 || ((1 << a3) & 0x230) == 0)
        goto LABEL_8;
      goto LABEL_14;
    case 3:
      if (!a3)
        goto LABEL_13;
      if (a3 != 2 && a3 != 1)
        goto LABEL_14;
LABEL_8:
      result = FigSignalErrorAt();
      break;
    default:
LABEL_4:
      if (!a3)
LABEL_13:
        v11 = 9;
LABEL_14:
      v13 = 0;
      v7 = CFDataCreate(allocator, bytes, 24);
      if (v7)
      {
        v8 = v7;
        v9 = FigSimpleAlternateFilterCreate((uint64_t)allocator, CFSTR("PreferredVideoFormat"), 800, (__int128 *)&off_1E2F88F00, v7, a4);
        CFRelease(v8);
      }
      else
      {
        v9 = FigSignalErrorAt();
      }
      result = v9;
      break;
  }
  return result;
}

const UInt8 *faf_videoFormatPreferenceApplyFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 16) = 0;
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t faf_videoFormatFilterFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;
  int VideoRange;
  uint64_t v7;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigAlternateIsAudioOnly(a1);
  if (!(BytePtr[16] | result))
  {
    VideoRange = FigAlternateGetVideoRange(a1);
    result = FigAlternateGetBestVideoFormat(a1);
    if (VideoRange == *(_DWORD *)BytePtr && (_DWORD)result == *((_DWORD *)BytePtr + 1))
    {
      *((_BYTE *)BytePtr + 16) = 1;
    }
    else
    {
      v7 = *((_QWORD *)BytePtr + 1);
      if (!v7 || (result = faf_videoFormatPreferenceFilterMinSortingFn(a1, v7, theData), result == -1))
        *((_QWORD *)BytePtr + 1) = a1;
    }
  }
  return result;
}

uint64_t faf_videoFormatPreferenceFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int VideoRange;
  int BestVideoFormat;
  int IsAudioOnly;
  BOOL v8;
  unsigned int v9;

  BytePtr = CFDataGetBytePtr(theData);
  VideoRange = FigAlternateGetVideoRange(a1);
  BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  IsAudioOnly = FigAlternateIsAudioOnly(a1);
  if (!BytePtr[16])
  {
    v8 = faf_videoFormatPreferenceFilterMinSortingFn(a1, *((_QWORD *)BytePtr + 1), theData) == 0;
LABEL_5:
    v9 = v8;
    goto LABEL_9;
  }
  if (VideoRange == *(_DWORD *)BytePtr)
  {
    v8 = BestVideoFormat == *((_DWORD *)BytePtr + 1);
    goto LABEL_5;
  }
  v9 = 0;
LABEL_9:
  if (IsAudioOnly)
    return 1;
  else
    return v9;
}

CFStringRef faf_copyPreferredVideoFormatDescAddendum(int a1, CFDataRef theData)
{
  int *BytePtr;
  const __CFAllocator *v3;
  const __CFString *StringFromVideoRange;
  const __CFString *StringFromVideoFormat;

  BytePtr = (int *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringFromVideoRange = FigAlternateGetStringFromVideoRange(*BytePtr);
  StringFromVideoFormat = FigAlternateGetStringFromVideoFormat(BytePtr[1]);
  return CFStringCreateWithFormat(v3, 0, CFSTR("preferredRange:%@ preferredFormat:%@"), StringFromVideoRange, StringFromVideoFormat);
}

uint64_t FigAlternateNeroSupportedVideoFormatFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;

  v8 = xmmword_1932FA920;
  v9 = 0;
  v4 = CFDataCreate(a1, (const UInt8 *)&v8, 24);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("NeroSupportedVideoFormat"), 1000, (__int128 *)&unk_1E2F88F28, v4, a2);
  CFRelease(v5);
  return v6;
}

uint64_t faf_neroSupportedVideoFormatFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  unsigned int VideoRange;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  VideoRange = FigAlternateGetVideoRange(a1);
  result = FigAlternateGetBestVideoFormat(a1);
  if (__PAIR64__(result, VideoRange) == *(_QWORD *)BytePtr)
    *((_BYTE *)BytePtr + 16) = 1;
  return result;
}

uint64_t faf_neroSupportedVideoFormatFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int IsAudioOnly;
  int VideoRange;
  int BestVideoFormat;
  _BOOL4 v7;
  BOOL v8;
  _BOOL4 v9;
  unsigned int v10;

  BytePtr = CFDataGetBytePtr(theData);
  IsAudioOnly = FigAlternateIsAudioOnly(a1);
  VideoRange = FigAlternateGetVideoRange(a1);
  BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  if (BytePtr[16])
  {
    if (VideoRange == *(_DWORD *)BytePtr)
    {
      v7 = 0;
      v8 = BestVideoFormat == *((_DWORD *)BytePtr + 1);
      goto LABEL_9;
    }
  }
  else if (!FigAlternateGetCodecString(a1))
  {
    v8 = 0;
    v7 = VideoRange == *(_DWORD *)BytePtr || VideoRange == 0;
    goto LABEL_9;
  }
  v8 = 0;
  v7 = 0;
LABEL_9:
  v9 = v7;
  v10 = v8 || v9;
  if (IsAudioOnly)
    return 1;
  else
    return v10;
}

uint64_t FigAlternatePreferBestFormatForVideoRangeFilterCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[8];
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)bytes = 0;
  v10 = 0;
  v11 = 0;
  if ((a2 - 4) <= 0xFFFFFFFC)
    return FigSignalErrorAt();
  *(_DWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 24);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PreferBestFormatForVideoRange"), 700, (__int128 *)&off_1E2F88F50, v5, a3);
  CFRelease(v6);
  return v7;
}

double faf_videoFormatApplyFilterInit(const __CFData *a1)
{
  const UInt8 *BytePtr;
  double result;

  BytePtr = CFDataGetBytePtr(a1);
  *((_DWORD *)BytePtr + 1) = 0;
  *(_QWORD *)&result = 7;
  *(_OWORD *)(BytePtr + 8) = xmmword_1932FA960;
  return result;
}

uint64_t faf_preferBestFormatForVideoRangeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;
  unsigned int BestVideoFormat;
  unsigned int v6;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigAlternateIsAudioOnly(a1);
  if (!(_DWORD)result)
  {
    result = FigAlternateGetVideoRange(a1);
    if ((_DWORD)result == *(_DWORD *)BytePtr)
    {
      BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
      v6 = *((_DWORD *)BytePtr + 1);
      result = FigAlternateGetBestVideoFormat(a1);
      if (BestVideoFormat > v6)
      {
        *((_DWORD *)BytePtr + 1) = result;
        result = faf_alternateVideoVertResolutionBucket(a1);
        *((_QWORD *)BytePtr + 1) = result;
LABEL_7:
        *((_QWORD *)BytePtr + 2) = result;
        return result;
      }
      if ((_DWORD)result != *((_DWORD *)BytePtr + 1))
        return result;
      result = faf_alternateVideoVertResolutionBucket(a1);
      if (result > *((_QWORD *)BytePtr + 2))
        goto LABEL_7;
      if (result < *((_QWORD *)BytePtr + 1))
        *((_QWORD *)BytePtr + 1) = result;
    }
  }
  return result;
}

BOOL faf_preferBestFormatForVideoRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t v4;

  BytePtr = CFDataGetBytePtr(theData);
  v4 = faf_alternateVideoVertResolutionBucket(a1);
  return FigAlternateIsAudioOnly(a1)
      || FigAlternateGetVideoRange(a1) != *(_DWORD *)BytePtr
      || FigAlternateGetBestVideoFormat(a1) == *((_DWORD *)BytePtr + 1)
      || v4 < *((_QWORD *)BytePtr + 1)
      || v4 > *((_QWORD *)BytePtr + 2);
}

CFStringRef faf_copyPreferBestFormatForVideoRangeDescAddendum(int a1, CFDataRef theData)
{
  int *BytePtr;
  const __CFAllocator *v3;
  const __CFString *StringFromVideoRange;
  const __CFString *StringFromVideoFormat;

  BytePtr = (int *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringFromVideoRange = FigAlternateGetStringFromVideoRange(*BytePtr);
  StringFromVideoFormat = FigAlternateGetStringFromVideoFormat(BytePtr[1]);
  return CFStringCreateWithFormat(v3, 0, CFSTR("videoRange:%@ bestFormat:%@"), StringFromVideoRange, StringFromVideoFormat);
}

uint64_t FigAlternateDisplaySizeFilterCreate(const __CFAllocator *a1, _QWORD *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  _QWORD v10[4];

  v10[2] = 0;
  v10[3] = 0;
  *(double *)v10 = a3;
  *(double *)&v10[1] = a4;
  v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("DisplaySize"), 700, (__int128 *)&off_1E2F88F78, v6, a2);
  CFRelease(v7);
  return v8;
}

const UInt8 *faf_displaySizeApplyInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 16) = 0;
  *((_QWORD *)result + 3) = 0xBFF0000000000000;
  return result;
}

void faf_displaySizeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double Resolution;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;

  BytePtr = CFDataGetBytePtr(theData);
  Resolution = FigAlternateGetResolution(a1);
  v6 = v5 * Resolution;
  if (v5 * Resolution > 0.0)
  {
    v7 = Resolution;
    v8 = v5;
    if (!FigAlternateIsAudioOnly(a1))
    {
      v9 = *((double *)BytePtr + 1);
      v10 = v7 < *(double *)BytePtr * 1.35 && v8 < v9 * 1.35;
      if (v10 && v6 < *(double *)BytePtr * v9 * 1.35 * 1.35)
        *((_BYTE *)BytePtr + 16) = 1;
      v11 = *((double *)BytePtr + 3);
      if (v11 < 0.0 || v6 < v11)
        *((double *)BytePtr + 3) = v6;
    }
  }
}

BOOL faf_displaySizeFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double Resolution;
  double v5;
  double v6;
  double v7;
  double v8;
  _BOOL8 result;
  double v10;
  BOOL v11;

  BytePtr = CFDataGetBytePtr(theData);
  Resolution = FigAlternateGetResolution(a1);
  v6 = v5 * Resolution;
  result = 1;
  if (v5 * Resolution > 0.0)
  {
    v7 = Resolution;
    v8 = v5;
    if (!FigAlternateIsAudioOnly(a1))
    {
      v10 = *((double *)BytePtr + 1);
      v11 = v7 < *(double *)BytePtr * 1.35 && v8 < v10 * 1.35;
      if ((!v11 || v6 >= *(double *)BytePtr * v10 * 1.35 * 1.35)
        && (BytePtr[16] || vabdd_f64(v6, *((double *)BytePtr + 3)) >= 2.22044605e-16))
      {
        return 0;
      }
    }
  }
  return result;
}

CFStringRef faf_copyDisplaySizeDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("displaySize:[%.0fx%.0f]"), *(_QWORD *)BytePtr, *((_QWORD *)BytePtr + 1));
}

uint64_t FigAlternatePreferredVideoRangeFilterCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[8];
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)&bytes[4] = 0;
  v10 = 0;
  v11 = 0;
  *(_DWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 24);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PreferredVideoRange"), 800, (__int128 *)&off_1E2F88FA0, v5, a3);
  CFRelease(v6);
  return v7;
}

const UInt8 *faf_videoRangeFilterApplyFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 16) = 0;
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t faf_videoRangeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  UInt8 *BytePtr;
  uint64_t result;
  uint64_t v5;

  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  result = FigAlternateIsAudioOnly(a1);
  if (!(BytePtr[16] | result))
  {
    result = FigAlternateGetVideoRange(a1);
    if ((_DWORD)result == *(_DWORD *)BytePtr)
    {
      BytePtr[16] = 1;
    }
    else
    {
      v5 = *((_QWORD *)BytePtr + 1);
      if (!v5 || (result = faf_videoRangeMinSortingFn(a1, v5, (unsigned int *)BytePtr), result == -1))
        *((_QWORD *)BytePtr + 1) = a1;
    }
  }
  return result;
}

uint64_t faf_videoRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  UInt8 *BytePtr;
  int VideoRange;
  int IsAudioOnly;
  BOOL v6;
  unsigned int v7;

  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  VideoRange = FigAlternateGetVideoRange(a1);
  IsAudioOnly = FigAlternateIsAudioOnly(a1);
  if (BytePtr[16])
    v6 = VideoRange == *(_DWORD *)BytePtr;
  else
    v6 = faf_videoRangeMinSortingFn(a1, *((_QWORD *)BytePtr + 1), (unsigned int *)BytePtr) == 0;
  v7 = v6;
  if (IsAudioOnly)
    return 1;
  else
    return v7;
}

CFStringRef faf_copyVideoRangeDescAddendum(int a1, CFDataRef theData)
{
  int *BytePtr;
  const __CFAllocator *v3;
  const __CFString *StringFromVideoRange;

  BytePtr = (int *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringFromVideoRange = FigAlternateGetStringFromVideoRange(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, CFSTR("desiredVideoRange:%@"), StringFromVideoRange);
}

uint64_t FigAlternateVideoFormatFilterCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[4];

  *(_DWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PreferredVideoFormat"), 800, (__int128 *)&unk_1E2F88FC8, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t faf_videoFormatFilterFn(uint64_t a1, CFDataRef theData)
{
  int v3;

  v3 = *(_DWORD *)CFDataGetBytePtr(theData);
  return FigAlternateHasVideoFormat(a1, v3);
}

CFStringRef faf_copyVideoFormatDescAddendum(int a1, CFDataRef theData)
{
  int *BytePtr;
  const __CFAllocator *v3;
  const __CFString *StringFromVideoFormat;

  BytePtr = (int *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringFromVideoFormat = FigAlternateGetStringFromVideoFormat(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, CFSTR("desiredVideoFormat:%@"), StringFromVideoFormat);
}

uint64_t FigAlternateFramerateBucketCapFilterCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[8];

  *(_DWORD *)&bytes[4] = 0;
  *(_DWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 8);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("FrameRateBucketCap"), 700, (__int128 *)&unk_1E2F88FF0, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t fafb_framerateBucketCapFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double FrameRate;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  FrameRate = FigAlternateGetFrameRate(a1);
  result = FigFrameRateToFrameRateBucket(FrameRate);
  if (result <= *(_DWORD *)BytePtr)
  {
    result = FigAlternateIsAudioOnly(a1);
    if (!(_DWORD)result)
      *((_BYTE *)BytePtr + 4) = 1;
  }
  return result;
}

BOOL fafb_framerateBucketCapFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double FrameRate;

  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateIsAudioOnly(a1))
    return 1;
  FrameRate = FigAlternateGetFrameRate(a1);
  return FigFrameRateToFrameRateBucket(FrameRate) <= *(_DWORD *)BytePtr || BytePtr[4] == 0;
}

CFStringRef fafb_copyFramerateBucketCapDescAddendum(int a1, CFDataRef theData)
{
  unsigned int *BytePtr;
  const __CFAllocator *v3;
  const __CFString *StringFromFramerateBucket;

  BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringFromFramerateBucket = FigAlternateGetStringFromFramerateBucket(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, CFSTR("framerateBucketCap:%@"), StringFromFramerateBucket);
}

uint64_t FigAlternatePreferredAudioFormatFilterCreate(const __CFAllocator *a1, unsigned int a2, unsigned int a3, const __CFDictionary *a4, char a5, CFNumberRef number, int a7, _QWORD *a8)
{
  int v13;
  uint64_t Count;
  CFIndex v15;
  __CFData *Mutable;
  __CFData *v17;
  UInt8 *MutableBytePtr;
  __int128 v19;
  __int128 v20;
  UInt8 *v21;
  int64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v26 = 0u;
  v27 = 0u;
  *(_QWORD *)&v25 = __PAIR64__(a3, a2);
  DWORD2(v25) = -1;
  HIDWORD(v25) = a7;
  LOBYTE(v26) = a5;
  if (number)
    CFNumberGetValue(number, kCFNumberSInt32Type, (char *)&v25 + 8);
  if (a2 <= 4)
  {
    if (a2 - 1 < 4)
      v13 = 1;
    else
      v13 = 9;
    LODWORD(v25) = v13;
  }
  if (!a3)
    DWORD1(v25) = 0x7FFFFFFF;
  Count = FigCFDictionaryGetCount();
  v15 = 16 * Count + 48;
  Mutable = CFDataCreateMutable(a1, v15);
  if (!Mutable)
    return FigSignalErrorAt();
  v17 = Mutable;
  CFDataSetLength(Mutable, v15);
  MutableBytePtr = CFDataGetMutableBytePtr(v17);
  v20 = v26;
  v19 = v27;
  *(_OWORD *)MutableBytePtr = v25;
  *((_OWORD *)MutableBytePtr + 1) = v20;
  *((_OWORD *)MutableBytePtr + 2) = v19;
  if (Count >= 1)
  {
    v21 = MutableBytePtr;
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)faf_storeChannelCountMaxSampleRate, MutableBytePtr);
    v22 = *((_QWORD *)v21 + 5);
    if (v22 >= 2)
      qsort(v21 + 48, v22, 0x10uLL, (int (__cdecl *)(const void *, const void *))faf_maxSampleRateComparator);
  }
  v23 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PreferredAudioFormat"), 750, (__int128 *)&off_1E2F89018, v17, a8);
  CFRelease(v17);
  return v23;
}

const UInt8 *faf_audioFormatApplyFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 32) = 0;
  *((_QWORD *)result + 3) = 0;
  return result;
}

uint64_t faf_audioFormatFilterFirstPassFn(uint64_t a1, CFDataRef theData)
{
  UInt8 *BytePtr;
  uint64_t result;
  _BOOL4 v6;
  BOOL v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  memset(v9, 0, sizeof(v9));
  result = FigAlternateHasVideo(a1);
  if ((_DWORD)result)
  {
    result = FigAlternateHasAudio(a1);
    v6 = result != 0;
  }
  else
  {
    v6 = 1;
  }
  if (BytePtr[32])
    v7 = 1;
  else
    v7 = !v6;
  if (!v7)
  {
    v10 = *(_QWORD *)BytePtr;
    LODWORD(v11) = 0;
    BYTE4(v11) = BytePtr[16];
    v12 = 0;
    LODWORD(v13) = 0x80000000;
    faf_populateAudioFormatAlternateComparatorRec(a1, *((_DWORD *)BytePtr + 2), (uint64_t)v9);
    result = faf_audioFormatPreferenceComparator((uint64_t)v9, (uint64_t)&v10, (int *)BytePtr);
    if (result)
    {
      v8 = *((_QWORD *)BytePtr + 3);
      if (!v8 || (result = faf_audioFormatPreferenceFilterMinSortingFn(a1, v8, theData), result == -1))
        *((_QWORD *)BytePtr + 3) = a1;
    }
    else
    {
      BytePtr[32] = 1;
    }
  }
  return result;
}

uint64_t faf_audioFormatPreferenceFilterFn(uint64_t a1, CFDataRef theData)
{
  UInt8 *BytePtr;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v7;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  memset(v9, 0, sizeof(v9));
  if (FigAlternateHasVideo(a1))
    v5 = FigAlternateHasAudio(a1) == 0;
  else
    v5 = 0;
  if (BytePtr[32])
  {
    v10 = *(_QWORD *)BytePtr;
    LODWORD(v11) = 0;
    BYTE4(v11) = BytePtr[16];
    v12 = 0;
    LODWORD(v13) = 0x80000000;
    faf_populateAudioFormatAlternateComparatorRec(a1, *((_DWORD *)BytePtr + 2), (uint64_t)v9);
    v6 = faf_audioFormatPreferenceComparator((uint64_t)v9, (uint64_t)&v10, (int *)BytePtr);
    v7 = v5;
    v5 = v6 == 0;
  }
  else
  {
    v7 = faf_audioFormatPreferenceFilterMinSortingFn(a1, *((_QWORD *)BytePtr + 3), theData) == 0;
  }
  return v5 | v7;
}

CFStringRef faf_copyPreferredAudioFormatDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t v3;
  const __CFAllocator *v4;
  __CFString *Mutable;
  _QWORD *v6;
  const char *v7;
  const __CFString *StringFromAudioFormat;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  CFStringRef v13;

  BytePtr = CFDataGetBytePtr(theData);
  v3 = *((_QWORD *)BytePtr + 5);
  if (v3)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (v3 >= 1)
    {
      v6 = BytePtr + 56;
      do
      {
        if (--v3)
          v7 = ", ";
        else
          v7 = "";
        CFStringAppendFormat(Mutable, 0, CFSTR("<channel count %d: max sample rate %.3f>%s"), *((unsigned int *)v6 - 2), *v6, v7);
        v6 += 2;
      }
      while (v3);
    }
  }
  else
  {
    Mutable = (__CFString *)CFRetain(CFSTR("none"));
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  StringFromAudioFormat = FigAlternateGetStringFromAudioFormat(*(_DWORD *)BytePtr);
  v9 = "YES";
  if (BytePtr[12])
    v10 = "YES";
  else
    v10 = "NO";
  if (BytePtr[13])
    v11 = "YES";
  else
    v11 = "NO";
  if (BytePtr[14])
    v12 = "YES";
  else
    v12 = "NO";
  if (!BytePtr[16])
    v9 = "NO";
  v13 = CFStringCreateWithFormat(v4, 0, CFSTR("preferredFormat:%@ preferredMixableNumberOfChannels:%d ac3CanPassthrough:%s ec3CanPassthrough:%s atmosCanPassthrough:%s preferLossyEncodings:%s sampleRateContraints:%@"), StringFromAudioFormat, *((unsigned int *)BytePtr + 1), v10, v11, v12, v9, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v13;
}

uint64_t faf_storeChannelCountMaxSampleRate(const __CFNumber *a1, CFNumberRef number, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a3 + 48;
  CFNumberGetValue(number, kCFNumberDoubleType, (void *)(a3 + 48 + 16 * *(_QWORD *)(a3 + 40) + 8));
  v6 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = v6 + 1;
  return CFNumberGetValue(a1, kCFNumberSInt32Type, (void *)(v5 + 16 * v6));
}

uint64_t faf_maxSampleRateComparator(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

uint64_t FigAlternateEligibleLosslessAudioFilterCreate(const __CFAllocator *a1, const void *a2, _QWORD *a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  uint64_t v10;

  Mutable = CFDictionaryCreateMutable(a1, 0, 0, 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  v8 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v8)
  {
    v9 = v8;
    if (a2)
      CFDictionarySetValue(v8, CFSTR("PersistentID"), a2);
    CFDictionarySetValue(v9, CFSTR("ChannelCountDict"), v7);
    v10 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("EligibleLosslessAudio"), 760, (__int128 *)&off_1E2F89040, v9, a3);
    CFRelease(v9);
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
  CFRelease(v7);
  return v10;
}

void faf_EligibleLosslessAudioInitFn(const __CFDictionary *a1)
{
  __CFDictionary *Value;

  Value = (__CFDictionary *)CFDictionaryGetValue(a1, CFSTR("ChannelCountDict"));
  CFDictionaryRemoveAllValues(Value);
}

void faf_EligibleLosslessAudioFirstPassFn(uint64_t a1, CFDictionaryRef theDict)
{
  int v4;
  const __CFNumber *Value;
  const __CFDictionary *v6;
  const void *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  void *key;
  int v13;
  int valuePtr;

  v4 = -1;
  valuePtr = -1;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("PersistentID"));
  v6 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ChannelCountDict"));
  v13 = 0;
  key = 0;
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    v4 = valuePtr;
  }
  faf_getAlternateAudioFormatInfo(a1, v4, &v13, (_DWORD *)&key + 1, &key, 0);
  v7 = (const void *)HIDWORD(key);
  if (SHIDWORD(key) >= 1)
  {
    v8 = CFDictionaryGetValue(v6, (const void *)HIDWORD(key));
    if (v8 != 7)
    {
      if (FigAlternateHasLosslessAudio(a1))
      {
        v9 = v8 | 1;
      }
      else
      {
        if ((_DWORD)key)
          v10 = 0;
        else
          v10 = v13 == 1;
        v11 = 3;
        if (v10)
          v11 = 7;
        v9 = v11 | v8;
      }
      CFDictionarySetValue(v6, v7, (const void *)v9);
    }
  }
}

uint64_t faf_EligibleLosslessAudioFilterFn(uint64_t a1, CFDictionaryRef theDict)
{
  const void *Value;
  const __CFDictionary *v5;
  int AudioChannelCounts;
  unsigned int v7;
  int v9;

  Value = CFDictionaryGetValue(theDict, CFSTR("PersistentID"));
  v5 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("ChannelCountDict"));
  v9 = 0;
  if (FigAlternateHasVideo(a1) && !FigAlternateHasAudio(a1)
    || !FigAlternateHasLosslessAudio(a1))
  {
    return 1;
  }
  AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, (uint64_t)Value, &v9, 0);
  v7 = CFDictionaryGetValue(v5, (const void *)AudioChannelCounts);
  if ((v7 & 2) != 0)
    return (v7 >> 2) & 1;
  else
    return 1;
}

CFTypeRef fsaf_copyEmptyDescAddendum()
{
  return CFRetain(&stru_1E2FD85F8);
}

uint64_t FigAlternateImmersiveAudioPreferenceFilterCreate(const __CFAllocator *a1, CFNumberRef number, int a3, int a4, char a5, _QWORD *a6)
{
  CFDataRef v11;
  CFDataRef v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;

  v15 = 0u;
  v16 = 0u;
  if (number)
    CFNumberGetValue(number, kCFNumberSInt32Type, &v15);
  else
    LODWORD(v15) = -1;
  DWORD2(v16) = a3;
  DWORD1(v15) = a4;
  BYTE12(v16) = a5;
  v11 = CFDataCreate(a1, (const UInt8 *)&v15, 32);
  if (!v11)
    return FigSignalErrorAt();
  v12 = v11;
  v13 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("ImmersiveAudioPreference"), 760, (__int128 *)&off_1E2F89068, v11, a6);
  CFRelease(v12);
  return v13;
}

const UInt8 *faf_ImmersiveAudioPreferenceInitFn(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_QWORD *)result + 2) = 0;
  *((_BYTE *)result + 8) = 0;
  return result;
}

uint64_t faf_ImmersiveAudioPreferenceFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int ImmersiveAudioCapability;
  uint64_t result;
  int v7;
  uint64_t v9;

  BytePtr = CFDataGetBytePtr(theData);
  ImmersiveAudioCapability = faf_GetImmersiveAudioCapability(a1, theData);
  result = FigAlternateGetAverageBitRate(a1);
  if (!BytePtr[8])
  {
    v7 = *((_DWORD *)BytePtr + 1);
    if (v7 == -1 || (int)result < v7)
    {
      if (ImmersiveAudioCapability == *((_DWORD *)BytePtr + 6))
      {
        *((_BYTE *)BytePtr + 8) = 1;
      }
      else
      {
        v9 = *((_QWORD *)BytePtr + 2);
        if (!v9 || (result = faf_ImmersiveAudioComparator(a1, v9, theData), result == 1))
          *((_QWORD *)BytePtr + 2) = a1;
      }
    }
  }
  return result;
}

BOOL faf_ImmersiveAudioPreferenceFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int ImmersiveAudioCapability;
  int AverageBitRate;
  _BOOL4 v7;
  int v8;

  BytePtr = CFDataGetBytePtr(theData);
  ImmersiveAudioCapability = faf_GetImmersiveAudioCapability(a1, theData);
  AverageBitRate = FigAlternateGetAverageBitRate(a1);
  if (FigAlternateHasVideo(a1))
    v7 = FigAlternateHasAudio(a1) == 0;
  else
    v7 = 0;
  v8 = *((_DWORD *)BytePtr + 1);
  if (v8 != -1 && AverageBitRate >= v8)
    return 0;
  if (BytePtr[8])
  {
    return v7 || ImmersiveAudioCapability == *((_DWORD *)BytePtr + 6);
  }
  else
  {
    if (BytePtr[28])
      return 0;
    return !faf_ImmersiveAudioComparator(a1, *((_QWORD *)BytePtr + 2), theData) || v7;
  }
}

CFStringRef faf_ImmersiveAudioPreferenceDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFAllocator *v3;
  const __CFString *StringFromImmersiveAudioCapability;

  BytePtr = CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringFromImmersiveAudioCapability = FigAlternateGetStringFromImmersiveAudioCapability(*((_DWORD *)BytePtr + 6));
  return CFStringCreateWithFormat(v3, 0, CFSTR("capability:%@"), StringFromImmersiveAudioCapability);
}

uint64_t FigAlternateLossyAudioPreferenceFilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("LossyAudioPreference"), 760, (__int128 *)&unk_1E2F89090, 0, a2);
}

BOOL faf_lossyAudioOnlyFilterFn(uint64_t a1)
{
  return FigAlternateHasLosslessAudio(a1) == 0;
}

uint64_t FigAlternateLosslessAudioPreferenceFilterCreate(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t (*v3)();
  __int128 v5;
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t v8;

  v3 = faf_allEqualMinSortingFn;
  if (a2)
    v3 = 0;
  v5 = 0uLL;
  v6 = faf_losslessAudioOnlyFilterFn;
  v7 = v3;
  v8 = 0;
  return FigSimpleAlternateFilterCreate(a1, CFSTR("LosslessAudioPreference"), 760, &v5, 0, a3);
}

uint64_t FigAlternateMaximumSampleRatePreferenceFilter(const __CFAllocator *a1, CFNumberRef number, _QWORD *a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0;
  v11 = 0u;
  *(double *)&v10[1] = a4;
  if (number)
    CFNumberGetValue(number, kCFNumberSInt32Type, v10);
  else
    LODWORD(v10[0]) = -1;
  v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("MaximumSampleRatePreference"), 750, (__int128 *)&off_1E2F890B8, v6, a3);
  CFRelease(v7);
  return v8;
}

const UInt8 *faf_maximumSampleRatePreferenceFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 16) = 0;
  *((_QWORD *)result + 3) = 0;
  return result;
}

void faf_maximumSampleRatePreferenceFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFNumberRef v4;
  double AudioSampleRate;
  double v6;

  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
    v4 = 0;
  else
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
  AudioSampleRate = FigAlternateGetAudioSampleRate(a1, v4);
  if (AudioSampleRate != 0.0)
  {
    if (AudioSampleRate <= *((double *)BytePtr + 1))
      *((_BYTE *)BytePtr + 16) = 1;
    v6 = *((double *)BytePtr + 3);
    if (v6 == 0.0 || AudioSampleRate < v6)
      *((double *)BytePtr + 3) = AudioSampleRate;
  }
  if (v4)
    CFRelease(v4);
}

BOOL faf_maximumSampleRatePreferenceFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFNumberRef v4;
  double AudioSampleRate;
  _BOOL8 v6;

  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
    v4 = 0;
  else
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
  AudioSampleRate = FigAlternateGetAudioSampleRate(a1, v4);
  if (AudioSampleRate == 0.0)
  {
    v6 = 1;
    if (!v4)
      return v6;
    goto LABEL_9;
  }
  if (BytePtr[16])
  {
    v6 = AudioSampleRate <= *((double *)BytePtr + 1);
    if (!v4)
      return v6;
    goto LABEL_9;
  }
  v6 = AudioSampleRate == *((double *)BytePtr + 3);
  if (v4)
LABEL_9:
    CFRelease(v4);
  return v6;
}

CFStringRef faf_maximumSampleRatePreferenceDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), (int)*((double *)BytePtr + 1));
}

uint64_t FigAlternateMultichannelAudioFilterCreate(const __CFAllocator *a1, CFNumberRef number, int a3, int a4, _QWORD *a5)
{
  BOOL (*v7)(uint64_t, CFDataRef);
  uint64_t (*v8)();
  CFDataRef v9;
  CFDataRef v10;
  uint64_t v11;
  __int128 v13;
  BOOL (*v14)(uint64_t, CFDataRef);
  uint64_t (*v15)();
  uint64_t v16;
  uint64_t valuePtr;

  valuePtr = 0;
  if (a3)
    v7 = faf_MultichannelAudioFilterFnForMulti;
  else
    v7 = faf_MultichannelAudioFilterFnForStereo;
  if (a4)
    v8 = 0;
  else
    v8 = faf_allEqualMinSortingFn;
  if (number)
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  else
    LODWORD(valuePtr) = -1;
  v9 = CFDataCreate(a1, (const UInt8 *)&valuePtr, 8);
  if (!v9)
    return FigSignalErrorAt();
  v10 = v9;
  *(_QWORD *)&v13 = faf_MultichannelAudioFilterFnForMultiInit;
  *((_QWORD *)&v13 + 1) = faf_MultichannelAudioFilterFnForMultiFirstPassFn;
  v14 = v7;
  v15 = v8;
  v16 = 0;
  v11 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("MultichannelAudio"), 620, &v13, v9, a5);
  CFRelease(v10);
  return v11;
}

const UInt8 *faf_MultichannelAudioFilterFnForMultiInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 4) = 0;
  return result;
}

void faf_MultichannelAudioFilterFnForMultiFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const UInt8 *v4;
  CFNumberRef v5;
  int AudioChannelCounts;

  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr[4])
  {
    v4 = BytePtr;
    if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
    {
      AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, 0, 0, 0);
    }
    else
    {
      v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
      AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, (uint64_t)v5, 0, 0);
      if (v5)
        CFRelease(v5);
    }
    if (AudioChannelCounts >= 3)
      *((_BYTE *)v4 + 4) = 1;
  }
}

BOOL faf_MultichannelAudioFilterFnForMulti(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  _BOOL4 v4;
  CFNumberRef v5;
  int AudioChannelCounts;

  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateHasVideo(a1))
    v4 = FigAlternateHasAudio(a1) == 0;
  else
    v4 = 0;
  if (!BytePtr[4])
    return 0;
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
  {
    AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, 0, 0, 0);
  }
  else
  {
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
    AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, (uint64_t)v5, 0, 0);
    if (v5)
      CFRelease(v5);
  }
  return v4 || AudioChannelCounts > 2;
}

BOOL faf_MultichannelAudioFilterFnForStereo(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFNumberRef v4;
  int AudioChannelCounts;

  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
  {
    AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, 0, 0, 0);
  }
  else
  {
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
    AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, (uint64_t)v4, 0, 0);
    if (v4)
      CFRelease(v4);
  }
  return AudioChannelCounts < 3;
}

uint64_t FigAlternateDefaultAudioLayoutPreferenceFilterCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;
  CFTypeRef v7;

  MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    *DerivedStorage = v7;
    *a3 = 0;
  }
  return v5;
}

uint64_t FigAlternateResolutionCapFilterCreate(const __CFAllocator *a1, const void *a2, int a3, _QWORD *a4, double a5, double a6)
{
  CFDataRef v10;
  CFDataRef v11;
  uint64_t v12;
  _QWORD v14[4];

  v14[2] = 0;
  v14[3] = 0;
  *(double *)v14 = a5;
  *(double *)&v14[1] = a6;
  v10 = CFDataCreate(a1, (const UInt8 *)v14, 32);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v12 = FigSimpleAlternateFilterCreate((uint64_t)a1, a2, a3, (__int128 *)&off_1E2F890F8, v10, a4);
  CFRelease(v11);
  return v12;
}

int64x2_t faf_resolutionCapApplyFilterInit(const __CFData *a1)
{
  int64x2_t *BytePtr;
  int64x2_t result;

  BytePtr = (int64x2_t *)CFDataGetBytePtr(a1);
  result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  BytePtr[1] = result;
  return result;
}

uint64_t faf_resolutionCapFirstPassFn(uint64_t a1, CFDataRef theData)
{
  double *BytePtr;
  double v4;
  double v5;
  double Resolution;
  double v7;
  double v8;
  uint64_t result;
  double v11;

  BytePtr = (double *)CFDataGetBytePtr(theData);
  v4 = *BytePtr;
  v5 = BytePtr[1];
  Resolution = FigAlternateGetResolution(a1);
  v8 = v7;
  result = FigAlternateIsAudioOnly(a1);
  if (!(_DWORD)result)
  {
    if (Resolution > v4 || v8 > v5)
    {
      if (BytePtr[3] >= 1.79769313e308)
      {
        v11 = BytePtr[2];
        if (v11 >= 1.79769313e308 || Resolution < v11)
          BytePtr[2] = Resolution;
      }
    }
    else
    {
      BytePtr[2] = v4;
      BytePtr[3] = v5;
    }
  }
  return result;
}

BOOL faf_resolutionCapFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double v4;
  _BOOL4 v5;

  BytePtr = CFDataGetBytePtr(theData);
  v5 = FigAlternateGetResolution(a1) <= *((double *)BytePtr + 2) && v4 <= *((double *)BytePtr + 3);
  return FigAlternateIsAudioOnly(a1) || v5;
}

CFStringRef faf_copyResolutionDescAddendum(int a1, CFDataRef theData)
{
  double *BytePtr;

  BytePtr = (double *)CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%dx%d"), (int)*BytePtr, (int)BytePtr[1]);
}

uint64_t FigAlternateResolutionFloorFilterCreate(const __CFAllocator *a1, _QWORD *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  _QWORD v10[4];

  v10[2] = 0;
  v10[3] = 0;
  *(double *)v10 = a3;
  *(double *)&v10[1] = a4;
  v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("ResolutionFloor"), 700, (__int128 *)&off_1E2F89120, v6, a2);
  CFRelease(v7);
  return v8;
}

__n128 faf_resolutionFloorApplyFilterInit(const __CFData *a1)
{
  const UInt8 *BytePtr;
  __n128 result;

  BytePtr = CFDataGetBytePtr(a1);
  result = *(__n128 *)MEMORY[0x1E0C9D820];
  *((_OWORD *)BytePtr + 1) = *MEMORY[0x1E0C9D820];
  return result;
}

uint64_t faf_resolutionFloorFirstPassFn(uint64_t a1, CFDataRef theData)
{
  double *BytePtr;
  double v4;
  double v5;
  double Resolution;
  double v7;
  double v8;
  uint64_t result;
  double v11;

  BytePtr = (double *)CFDataGetBytePtr(theData);
  v4 = *BytePtr;
  v5 = BytePtr[1];
  Resolution = FigAlternateGetResolution(a1);
  v8 = v7;
  result = FigAlternateIsAudioOnly(a1);
  if (!(_DWORD)result)
  {
    if (Resolution < v4 || v8 < v5)
    {
      if (BytePtr[3] <= 2.22044605e-16)
      {
        v11 = BytePtr[2];
        if (v11 <= 2.22044605e-16 || Resolution > v11)
          BytePtr[2] = Resolution;
      }
    }
    else
    {
      BytePtr[2] = v4;
      BytePtr[3] = v5;
    }
  }
  return result;
}

BOOL faf_resolutionFloorFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double v4;
  _BOOL4 v5;

  BytePtr = CFDataGetBytePtr(theData);
  v5 = FigAlternateGetResolution(a1) >= *((double *)BytePtr + 2) && v4 >= *((double *)BytePtr + 3);
  return FigAlternateIsAudioOnly(a1) || v5;
}

uint64_t FigAlternateResolutionLowerLimitFilterCreate(const __CFAllocator *a1, _QWORD *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  _QWORD v10[2];

  *(double *)v10 = a3;
  *(double *)&v10[1] = a4;
  v6 = CFDataCreate(a1, (const UInt8 *)v10, 16);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("ResolutionLowerLimit"), 800, (__int128 *)&unk_1E2F89148, v6, a2);
  CFRelease(v7);
  return v8;
}

BOOL faf_resolutionLowerLimitFilterFn(uint64_t a1, CFDataRef theData)
{
  double *BytePtr;
  double v4;
  double v5;
  double Resolution;
  double v7;
  BOOL v8;
  _BOOL8 result;

  BytePtr = (double *)CFDataGetBytePtr(theData);
  v4 = *BytePtr;
  v5 = BytePtr[1];
  Resolution = FigAlternateGetResolution(a1);
  v8 = Resolution == *MEMORY[0x1E0C9D820] && v7 == *(double *)(MEMORY[0x1E0C9D820] + 8);
  result = 1;
  if (!v8 && vabdd_f64(Resolution, v4) >= 2.22044605e-16 && Resolution < v4)
  {
    if (vabdd_f64(Resolution, v5) >= 2.22044605e-16 && Resolution <= v5)
      return 0;
    if (vabdd_f64(v7, v4) >= 2.22044605e-16 && v7 <= v4)
      return 0;
  }
  return result;
}

uint64_t FigAlternateResolutionUpperLimitFilterCreate(const __CFAllocator *a1, _QWORD *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  _QWORD v10[2];

  *(double *)v10 = a3;
  *(double *)&v10[1] = a4;
  v6 = CFDataCreate(a1, (const UInt8 *)v10, 16);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("ResolutionUpperLimit"), 800, (__int128 *)&unk_1E2F89170, v6, a2);
  CFRelease(v7);
  return v8;
}

BOOL faf_resolutionCapWidthOnlyFilterFn(uint64_t a1, CFDataRef theData)
{
  double v3;
  double Resolution;
  double v5;
  double v6;
  _BOOL4 v9;

  v3 = *(double *)CFDataGetBytePtr(theData);
  Resolution = FigAlternateGetResolution(a1);
  v6 = v5;
  if (FigAlternateIsAudioOnly(a1))
    return 0;
  if (Resolution == *MEMORY[0x1E0C9D820] && v6 == *(double *)(MEMORY[0x1E0C9D820] + 8))
    return 1;
  v9 = vabdd_f64(Resolution, v3) < 2.22044605e-16;
  return Resolution < v3 || v9;
}

uint64_t FigAlternateResolutionClosestHeightFilterCreate(const __CFAllocator *a1, _QWORD *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  _QWORD v10[2];

  *(double *)v10 = a3;
  *(double *)&v10[1] = a4;
  v6 = CFDataCreate(a1, (const UInt8 *)v10, 16);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("ResolutionClosestHeight"), 700, (__int128 *)&unk_1E2F89198, v6, a2);
  CFRelease(v7);
  return v8;
}

uint64_t faf_resolutionClosestHeightComparatorFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  BytePtr = CFDataGetBytePtr(theData);
  FigAlternateGetResolution(a1);
  v7 = v6;
  FigAlternateGetResolution(a2);
  v9 = v8;
  if (!FigAlternateHasVideo(a1))
    return 1;
  v10 = *((double *)BytePtr + 1);
  v11 = vabdd_f64(v7, v10);
  v12 = vabdd_f64(v9, v10);
  if (v11 < v12)
    return -1;
  return v11 != v12;
}

CFStringRef faf_copyResolutionClosestHeightDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("desiredReolution:%1.1fX%1.1f"), *(_QWORD *)BytePtr, *((_QWORD *)BytePtr + 1));
}

uint64_t FigAlternateMinimumRequiredPresentationSizeFilterCreate(const __CFAllocator *a1, _QWORD *a2, double a3, double a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  _QWORD v10[4];

  v10[2] = 0;
  v10[3] = 0;
  *(double *)v10 = a3;
  *(double *)&v10[1] = a4;
  v6 = CFDataCreate(a1, (const UInt8 *)v10, 32);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("MinimumRequiredPresentationSize"), 700, (__int128 *)&off_1E2F891C0, v6, a2);
  CFRelease(v7);
  return v8;
}

int64x2_t faf_minimumRequiredPresentationSizeFilterInit(const __CFData *a1)
{
  int64x2_t *BytePtr;
  int64x2_t result;

  BytePtr = (int64x2_t *)CFDataGetBytePtr(a1);
  result = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  BytePtr[1] = result;
  return result;
}

uint64_t faf_minimumRequiredPresentationSizeFirstPass(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double Resolution;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  Resolution = FigAlternateGetResolution(a1);
  v6 = v5;
  result = FigAlternateIsAudioOnly(a1);
  if (!(_DWORD)result && Resolution >= *(double *)BytePtr && Resolution < *((double *)BytePtr + 2))
  {
    *((double *)BytePtr + 2) = Resolution;
    *((_QWORD *)BytePtr + 3) = v6;
  }
  return result;
}

BOOL faf_minimumRequiredPresentationSizeFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return *((double *)BytePtr + 2) == 1.79769313e308 && *((double *)BytePtr + 3) == 1.79769313e308
      || FigAlternateGetResolution(a1) == *((double *)BytePtr + 2);
}

CFStringRef faf_minimumRequiredPresentationSizeDescAddendum(int a1, CFDataRef theData)
{
  double *BytePtr;

  BytePtr = (double *)CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%dx%d"), (int)*BytePtr, (int)BytePtr[1]);
}

uint64_t FigAlternateFrameRateCapFilterCreate(uint64_t a1, _QWORD *a2, double a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t v7;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate(a1, CFSTR("FrameRateCap"), 800, (__int128 *)&unk_1E2F891E8, v5, a2);
  CFRelease(v6);
  return v7;
}

BOOL faf_frameRateCapFilterFn(uint64_t a1, const __CFNumber *a2)
{
  double FrameRate;
  double valuePtr;

  valuePtr = 0.0;
  FrameRate = FigAlternateGetFrameRate(a1);
  CFNumberGetValue(a2, kCFNumberDoubleType, &valuePtr);
  return valuePtr - FrameRate > -2.22044605e-16 || FrameRate == 0.0;
}

uint64_t faf_frameRateCapComparatorFn(uint64_t a1, uint64_t a2)
{
  double FrameRate;
  double v4;
  double v5;
  uint64_t v6;

  FrameRate = FigAlternateGetFrameRate(a1);
  v4 = FigAlternateGetFrameRate(a2);
  v5 = vabdd_f64(FrameRate, v4);
  v6 = -1;
  if (FrameRate >= v4)
    v6 = 1;
  if (v5 >= 2.22044605e-16)
    return v6;
  else
    return 0;
}

uint64_t FigAlternateVideoRangeAndFrameRateBucketFilterCreate(const __CFAllocator *a1, int a2, int a3, _QWORD *a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  UInt8 bytes[4];
  int v11;

  *(_DWORD *)bytes = a2;
  v11 = a3;
  v6 = CFDataCreate(a1, bytes, 8);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("VideoRangeAndFrameRateBucket"), 1000, (__int128 *)&unk_1E2F89210, v6, a4);
  CFRelease(v7);
  return v8;
}

BOOL frcvr_videoRangeAndFrameRateBucketFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  double FrameRate;
  unsigned int VideoRange;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int IsAudioOnly;

  BytePtr = CFDataGetBytePtr(theData);
  FrameRate = FigAlternateGetFrameRate(a1);
  VideoRange = FigAlternateGetVideoRange(a1);
  v6 = *(_DWORD *)BytePtr;
  v7 = *((_DWORD *)BytePtr + 1);
  v8 = FigFrameRateToFrameRateBucket(FrameRate);
  IsAudioOnly = FigAlternateIsAudioOnly(a1);
  return v6 >= VideoRange || v7 >= v8 || IsAudioOnly != 0;
}

CFStringRef frcvr_videoRangeAndFrameRateBucketFilterDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFAllocator *v3;
  const __CFString *StringFromVideoRange;
  const __CFString *StringFromFramerateBucket;

  BytePtr = CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  StringFromVideoRange = FigAlternateGetStringFromVideoRange(*(_DWORD *)BytePtr);
  StringFromFramerateBucket = FigAlternateGetStringFromFramerateBucket(*((_DWORD *)BytePtr + 1));
  return CFStringCreateWithFormat(v3, 0, CFSTR("maxVideoRange:%@ framerate:%@"), StringFromVideoRange, StringFromFramerateBucket);
}

uint64_t FigAlternateLimitConcurrent4K60HEVCDecodeFilterCreate(void *a1, CFTypeRef cf, _QWORD *a3)
{
  CFTypeRef v5;
  _QWORD v7[2];

  v7[1] = 0;
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  v7[0] = v5;
  return fsaf_createWithBytes(a1, CFSTR("LimitConcurrent4K60HEVCDecode"), 510, (uint64_t)faf_limitConcurrent4K60HEVCDecodeFilterFn, 0, (uint64_t)faf_limitConcurrent4K60HEVCDecodeFirstPassFn, (uint64_t)faf_limitConcurrent4K60HEVCDecodeApplyInitFn, (CFTypeRef (*)())faf_limitConcurrent4K60HEVCDecodeFilterDescAddendum, v7, 0x10uLL, (void (__cdecl *)(void *, void *))faf_limitConcurrent4K60HEVCDecodeDeallocateCallback, a3);
}

uint64_t faf_limitConcurrent4K60HEVCDecodeFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateIsAudioOnly(a1) || !BytePtr[8] || FigCFEqual())
    return 1;
  else
    return faf_willRequire4K60Decode(a1) ^ 1;
}

uint64_t faf_limitConcurrent4K60HEVCDecodeFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = faf_willRequire4K60Decode(a1);
    *((_BYTE *)BytePtr + 8) = result;
  }
  return result;
}

const UInt8 *faf_limitConcurrent4K60HEVCDecodeApplyInitFn(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 8) = 0;
  return result;
}

CFStringRef faf_limitConcurrent4K60HEVCDecodeFilterDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFAllocator *v3;
  uint64_t v4;
  uint64_t PeakBitRate;

  BytePtr = CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = BytePtr[8];
  PeakBitRate = FigAlternateGetPeakBitRate(*(_QWORD *)BytePtr);
  return CFStringCreateWithFormat(v3, 0, CFSTR("avoidConcurrentDecode:%d alternate %d"), v4, PeakBitRate);
}

void faf_limitConcurrent4K60HEVCDecodeDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateNormalizedPeakBitRateCapFilterCreate(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  CFNumberRef v7;
  CFNumberRef v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  int v10;
  uint64_t v11;
  __int128 v13;
  BOOL (*v14)(uint64_t, const __CFNumber *);
  uint64_t (*v15)(uint64_t, uint64_t);
  CFStringRef (*v16)(int, CFNumberRef);
  int valuePtr;

  valuePtr = a2;
  v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = faf_normalizedPeakBitRateCapComparatorFn;
  if (a3)
  {
    v9 = 0;
    v10 = 950;
  }
  else
  {
    v10 = 600;
  }
  v13 = 0uLL;
  v14 = faf_normalizedPeakBitRateCapFilterFn;
  v15 = v9;
  v16 = faf_copyNormalizedPeakBitRateCapDescAddendum;
  v11 = FigSimpleAlternateFilterCreate(a1, CFSTR("PeakNormalizedBitRateCap"), v10, &v13, v7, a4);
  CFRelease(v8);
  return v11;
}

BOOL faf_normalizedPeakBitRateCapFilterFn(uint64_t a1, const __CFNumber *a2)
{
  int NormalizedPeakBitrate;
  int valuePtr;

  valuePtr = 0;
  NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr);
  return NormalizedPeakBitrate <= valuePtr;
}

uint64_t faf_normalizedPeakBitRateCapComparatorFn(uint64_t a1, uint64_t a2)
{
  int NormalizedPeakBitrate;
  int v4;
  uint64_t v5;

  NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  v4 = FigAlternateGetNormalizedPeakBitrate(a2);
  if (NormalizedPeakBitrate >= v4)
    v5 = 0;
  else
    v5 = -1;
  if (NormalizedPeakBitrate > v4)
    return 1;
  else
    return v5;
}

CFStringRef faf_copyNormalizedPeakBitRateCapDescAddendum(int a1, CFNumberRef number)
{
  unsigned int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d bps"), valuePtr);
}

uint64_t FigAlternatePeakBitRateCapFilterCreate(uint64_t a1, int a2, _QWORD *a3)
{
  return figAlternatePeakBitRateCapFilterCreateWithNameAndPriority(a1, a2, CFSTR("PeakBitRateCap"), 645, a3);
}

uint64_t figAlternatePeakBitRateCapFilterCreateWithNameAndPriority(uint64_t a1, int a2, const void *a3, int a4, _QWORD *a5)
{
  CFNumberRef v9;
  CFNumberRef v10;
  uint64_t v11;
  int valuePtr;

  valuePtr = a2;
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v9)
    return FigSignalErrorAt();
  v10 = v9;
  v11 = FigSimpleAlternateFilterCreate(a1, a3, a4, (__int128 *)&unk_1E2F89860, v9, a5);
  CFRelease(v10);
  return v11;
}

uint64_t FigAlternatePeakBitRateCapFilterForExpensiveNetworksCreate(uint64_t a1, int a2, _QWORD *a3)
{
  return figAlternatePeakBitRateCapFilterCreateWithNameAndPriority(a1, a2, CFSTR("PeakBitRateCapForExpensiveNetworks"), 644, a3);
}

uint64_t FigAlternateSkipBitrateRangeFilterCreate(void *a1, const void *a2, const void *a3, const void *a4, int a5, _QWORD *a6)
{
  int ExpectedAverageBitrate;
  CFTypeRef v13;
  CFTypeRef v14;
  _QWORD v16[3];

  v16[2] = 0;
  ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate((uint64_t)a3);
  if (ExpectedAverageBitrate <= (int)FigAlternateGetExpectedAverageBitrate((uint64_t)a2))
    return FigSignalErrorAt();
  if (a2)
    v13 = CFRetain(a2);
  else
    v13 = 0;
  v16[0] = v13;
  if (a3)
    v14 = CFRetain(a3);
  else
    v14 = 0;
  v16[1] = v14;
  return fsaf_createWithBytes(a1, a4, a5, (uint64_t)faf_skipBitrateRangeFilterFn, 0, (uint64_t)faf_skipBitrateRangeFirstPassFn, (uint64_t)faf_skipBitrateRangeFilterApplyInitFn, (CFTypeRef (*)())faf_skipBitrateRangeFilterDescAddendum, v16, 0x18uLL, (void (__cdecl *)(void *, void *))faf_skipBitrateRangeDeallocateCallback, a6);
}

BOOL faf_skipBitrateRangeFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t *v4;
  int AverageBitRate;
  int PeakBitRate;
  _BOOL8 result;

  BytePtr = CFDataGetBytePtr(theData);
  result = 1;
  if (BytePtr[16])
  {
    v4 = (uint64_t *)BytePtr;
    AverageBitRate = FigAlternateGetAverageBitRate(a1);
    if ((int)FigAlternateGetAverageBitRate(v4[1]) > AverageBitRate
      && (int)FigAlternateGetAverageBitRate(*v4) < AverageBitRate)
    {
      return 0;
    }
    PeakBitRate = FigAlternateGetPeakBitRate(a1);
    if ((int)FigAlternateGetPeakBitRate(v4[1]) > PeakBitRate && (int)FigAlternateGetPeakBitRate(*v4) < PeakBitRate)
      return 0;
  }
  return result;
}

uint64_t faf_skipBitrateRangeFirstPassFn(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigCFEqual();
  if ((_DWORD)result)
    *((_BYTE *)BytePtr + 16) = 1;
  return result;
}

const UInt8 *faf_skipBitrateRangeFilterApplyInitFn(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_BYTE *)result + 16) = 0;
  return result;
}

CFStringRef faf_skipBitrateRangeFilterDescAddendum(int a1, CFDataRef theData)
{
  uint64_t *BytePtr;
  const __CFAllocator *v3;
  uint64_t PeakBitRate;
  uint64_t AverageBitRate;
  uint64_t v6;
  uint64_t v7;

  BytePtr = (uint64_t *)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  PeakBitRate = FigAlternateGetPeakBitRate(BytePtr[1]);
  AverageBitRate = FigAlternateGetAverageBitRate(BytePtr[1]);
  v6 = FigAlternateGetPeakBitRate(*BytePtr);
  v7 = FigAlternateGetAverageBitRate(*BytePtr);
  return CFStringCreateWithFormat(v3, 0, CFSTR("highBitrate [%d %d], lowBitrate [%d %d]"), PeakBitRate, AverageBitRate, v6, v7);
}

void faf_skipBitrateRangeDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  v5 = ptr[1];
  if (v5)
    CFRelease(v5);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateSkipEqualOrLowerBitratesFilterCreate(void *a1, CFTypeRef cf, const void *a3, int a4, _QWORD *a5)
{
  CFTypeRef v9;
  _QWORD v11[3];

  v11[1] = 0;
  v11[2] = 0;
  if (cf)
    v9 = CFRetain(cf);
  else
    v9 = 0;
  v11[0] = v9;
  return fsaf_createWithBytes(a1, a3, a4, (uint64_t)faf_skipEqualOrLowerBitratesFilterFn, 0, (uint64_t)faf_skipBitrateRangeFirstPassFn, (uint64_t)faf_skipBitrateRangeFilterApplyInitFn, (CFTypeRef (*)())faf_skipEqualOrLowerBitratesFilterDescAddendum, v11, 0x18uLL, (void (__cdecl *)(void *, void *))faf_skipBitrateRangeDeallocateCallback, a5);
}

BOOL faf_skipEqualOrLowerBitratesFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t *v4;
  int ExpectedAverageBitrate;

  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr[16])
    return 1;
  v4 = (uint64_t *)BytePtr;
  if (FigCFEqual())
    return 1;
  ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*v4);
  return ExpectedAverageBitrate < (int)FigAlternateGetExpectedAverageBitrate(a1);
}

CFStringRef faf_skipEqualOrLowerBitratesFilterDescAddendum(int a1, CFDataRef theData)
{
  CFTypeRef *BytePtr;

  BytePtr = (CFTypeRef *)CFDataGetBytePtr(theData);
  return CFCopyDescription(*BytePtr);
}

uint64_t FigAlternateNextHighestPeakBitRateFilterCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3, float a4)
{
  CFDataRef v6;
  CFDataRef v7;
  uint64_t v8;
  UInt8 bytes[8];

  *(_DWORD *)&bytes[4] = 0;
  *(_DWORD *)bytes = (int)(float)((float)(int)FigAlternateGetNormalizedPeakBitrate(a2) * a4);
  v6 = CFDataCreate(a1, bytes, 8);
  if (!v6)
    return FigSignalErrorAt();
  v7 = v6;
  v8 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("NextHighestPeakBitRate"), 600, (__int128 *)&off_1E2F89238, v6, a3);
  CFRelease(v7);
  return v8;
}

const UInt8 *faf_nextHighestPeakBitRateApplyFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_DWORD *)result + 1) = 0x7FFFFFFF;
  return result;
}

uint64_t faf_nextHighestPeakBitRateFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigAlternateGetNormalizedPeakBitrate(a1);
  if ((int)result > *(_DWORD *)BytePtr && (int)result < *((_DWORD *)BytePtr + 1))
    *((_DWORD *)BytePtr + 1) = result;
  return result;
}

BOOL faf_nextHighestPeakBitRateFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return (int)FigAlternateGetNormalizedPeakBitrate(a1) <= *((_DWORD *)BytePtr + 1);
}

CFStringRef faf_nextHighestPeakBitRateFilterDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("ceiling: %d bps"), *(unsigned int *)BytePtr);
}

uint64_t FigAlternateMeasuredBitrateCapFilterCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, _QWORD *a4, double a5, double a6)
{
  double v8;
  CFDataRef v9;
  CFDataRef v10;
  uint64_t v11;
  UInt8 bytes[8];
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;

  v14 = a5;
  v15 = a6;
  *(_QWORD *)bytes = a2;
  v8 = fabs(a6);
  if (v8 <= 1.0)
    v8 = 1.0;
  v16 = (uint64_t)((double)a2 / a5 / ceil(v8));
  v17 = a3;
  v9 = CFDataCreate(a1, bytes, 40);
  if (!v9)
    return FigSignalErrorAt();
  v10 = v9;
  v11 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("MeasuredBitrateCap"), 550, (__int128 *)&unk_1E2F89260, v9, a4);
  CFRelease(v10);
  return v11;
}

BOOL faf_measuredBitrateFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int ExpectedAverageBitrate;

  BytePtr = CFDataGetBytePtr(theData);
  if (*((_DWORD *)BytePtr + 8))
    ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(a1);
  else
    ExpectedAverageBitrate = FigAlternateGetPeakBitRate(a1);
  return *((_QWORD *)BytePtr + 3) >= ExpectedAverageBitrate;
}

uint64_t faf_measuredBitrateCapComparatorFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int ExpectedAverageBitrate;
  int v7;
  int PeakBitRate;
  uint64_t v9;

  BytePtr = CFDataGetBytePtr(theData);
  if (*((_DWORD *)BytePtr + 8))
    ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(a1);
  else
    ExpectedAverageBitrate = FigAlternateGetPeakBitRate(a1);
  v7 = ExpectedAverageBitrate;
  if (*((_DWORD *)BytePtr + 8))
    PeakBitRate = FigAlternateGetExpectedAverageBitrate(a2);
  else
    PeakBitRate = FigAlternateGetPeakBitRate(a2);
  if (v7 >= PeakBitRate)
    v9 = 0;
  else
    v9 = -1;
  if (v7 > PeakBitRate)
    return 1;
  else
    return v9;
}

CFStringRef faf_copyMeasuredBitrateCapDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const char *v3;

  BytePtr = CFDataGetBytePtr(theData);
  if (*((_DWORD *)BytePtr + 8))
    v3 = "Average";
  else
    v3 = "Peak";
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("MeasuredBitrate:%lld bps handicap:%.2f rate:%.2f Cap:%lld bps bitrateMeasure:%s"), *(_QWORD *)BytePtr, *((_QWORD *)BytePtr + 1), *((_QWORD *)BytePtr + 2), *((_QWORD *)BytePtr + 3), v3);
}

uint64_t FigAlternateLowestVideoThenAudioFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  return fsaf_createWithNoContext(a1, CFSTR("LowestVideoThenAudio"), 500, 0, (uint64_t)faf_lowestVideoThenAudioComparatorFn, a2);
}

uint64_t faf_lowestVideoThenAudioComparatorFn(uint64_t a1, uint64_t a2)
{
  int HasVideo;
  int v5;
  int NormalizedPeakBitrate;
  int v7;
  uint64_t v9;

  HasVideo = FigAlternateHasVideo(a1);
  v5 = FigAlternateHasVideo(a2);
  NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  v7 = FigAlternateGetNormalizedPeakBitrate(a2);
  if (HasVideo && !v5)
    return -1;
  if (!HasVideo && v5)
    return 1;
  if (NormalizedPeakBitrate >= v7)
    v9 = 0;
  else
    v9 = -1;
  if (NormalizedPeakBitrate > v7)
    return 1;
  else
    return v9;
}

uint64_t FigAlternateLowestPeakBitRateFilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("LowestPeakBitRate"), 500, (__int128 *)&unk_1E2F89288, 0, a2);
}

uint64_t faf_lowestPeakBitRateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate;
  int v4;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  v4 = FigAlternateGetPeakBitRate(a2);
  if (!PeakBitRate)
    return 1;
  if (PeakBitRate < v4)
    return -1;
  return PeakBitRate != v4;
}

uint64_t FigAlternateMinimumRequiredBitrateFilterCreate(const __CFAllocator *a1, unsigned int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[1] = 0;
  v9[0] = a2;
  v5 = CFDataCreate(a1, (const UInt8 *)v9, 16);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("MinimumRequiredBitrate"), 600, (__int128 *)&off_1E2F892B0, v5, a3);
  CFRelease(v6);
  return v7;
}

const UInt8 *faf_minimumRequiredBitrateFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t faf_minimumRequiredBitrateFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;
  int v5;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigAlternateGetPeakBitRate(a1);
  if ((int)result >= *(_DWORD *)BytePtr)
  {
    v5 = result;
    result = *((_QWORD *)BytePtr + 1);
    if (!result || (result = FigAlternateGetPeakBitRate(result), v5 < (int)result))
      *((_QWORD *)BytePtr + 1) = a1;
  }
  return result;
}

BOOL faf_minimumRequiredBitrateFilterFn(uint64_t a1, CFDataRef theData)
{
  uint64_t v3;

  v3 = *((_QWORD *)CFDataGetBytePtr(theData) + 1);
  return !v3 || v3 == a1;
}

CFStringRef faf_minimumRequiredBitrateFilterDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d bps"), *(unsigned int *)BytePtr);
}

uint64_t FigAlternateMinimumRequiredBitrateForHEVCFilterCreate(const __CFAllocator *a1, unsigned int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[1] = 0;
  v9[0] = a2;
  v5 = CFDataCreate(a1, (const UInt8 *)v9, 16);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("MinimumRequiredBitrateForHEVC"), 640, (__int128 *)&off_1E2F892D8, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t faf_minimumRequiredBitrateForHEVCFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int PeakBitRate;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  result = FigAlternateHasVideoFormat(a1, 7);
  if ((_DWORD)result || (result = FigAlternateHasVideoFormat(a1, 4), (_DWORD)result))
  {
    if (PeakBitRate >= *(_DWORD *)BytePtr)
    {
      result = *((_QWORD *)BytePtr + 1);
      if (!result || (result = FigAlternateGetPeakBitRate(result), PeakBitRate < (int)result))
        *((_QWORD *)BytePtr + 1) = a1;
    }
  }
  return result;
}

uint64_t FigAlternateHighestPeakBitRateFilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("HighestPeakBitRate"), 500, (__int128 *)&unk_1E2F89300, 0, a2);
}

uint64_t faf_highestPeakBitRateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate;
  int v4;
  uint64_t v5;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  v4 = FigAlternateGetPeakBitRate(a2);
  if (v4 >= PeakBitRate)
    v5 = 0;
  else
    v5 = -1;
  if (v4 > PeakBitRate)
    return 1;
  else
    return v5;
}

uint64_t FigAlternateAllowListWithURLFilterCreate(uint64_t a1, const void *a2, int a3, char a4, _QWORD *a5)
{
  uint64_t v6;

  v6 = FigSimpleAlternateFilterCreate(a1, CFSTR("AllowListURLFilter"), a3, (__int128 *)&unk_1E2F89328, a2, a5);
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64) = a4;
  return v6;
}

uint64_t faf_alternateWithURLFilterFn(uint64_t a1)
{
  FigAlternateGetPlaylistAlternateURL(a1);
  return FigCFEqual();
}

uint64_t faf_alternateWithURLFilterMinSortingFn()
{
  return 0;
}

CFStringRef faf_alternateWithURLFilterDescAddendum(uint64_t a1, const __CFString *a2)
{
  const __CFString *v3;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 64))
    v3 = a2;
  else
    v3 = CFSTR("<redacted>");
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("alternateURL: %@"), v3);
}

uint64_t FigAlternateDenyListFilterCreate(uint64_t a1, const void *a2, const void *a3, unsigned int a4, int a5, _QWORD *a6)
{
  void *v6;
  __int128 v8;
  BOOL (*v9)();
  void *v10;
  uint64_t v11;

  v6 = faf_lowestBitrateComparatorFn;
  if (!a5)
    v6 = faf_denylistComparatorFn;
  if (a4 >= 0x372)
    v6 = 0;
  v8 = 0uLL;
  v9 = faf_denyListFilterFn;
  v10 = v6;
  v11 = 0;
  return FigSimpleAlternateFilterCreate(a1, a3, a4, &v8, a2, a6);
}

BOOL faf_denyListFilterFn()
{
  return FigCFArrayContainsValue() == 0;
}

uint64_t faf_lowestBitrateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate;
  int v5;
  uint64_t v6;
  uint64_t result;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  v5 = FigAlternateGetPeakBitRate(a2);
  if (PeakBitRate >= v5)
    v6 = 0;
  else
    v6 = -1;
  if (PeakBitRate > v5)
    result = 1;
  else
    result = v6;
  if (!result)
    return faf_sameBitrateComparatorFn(a1, a2);
  return result;
}

uint64_t faf_denylistComparatorFn(const void *a1, const void *a2, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v7;
  uint64_t v8;
  CFIndex v10;
  CFIndex v11;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v7 = CFArrayGetCount(theArray);
  }
  else
  {
    Count = 0;
    v7 = 0;
  }
  v10 = v7;
  v11 = Count;
  faf_isAlternateInDenyList(a1, theArray, &v11);
  faf_isAlternateInDenyList(a2, theArray, &v10);
  if (v10 >= v11)
    v8 = 0;
  else
    v8 = -1;
  if (v10 > v11)
    return 1;
  else
    return v8;
}

uint64_t FigAlternateHighestRankingScoreFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v4 = CFDataCreate(a1, (const UInt8 *)v8, 16);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("HighestRankingScore"), 460, (__int128 *)&off_1E2F89350, v4, a2);
  CFRelease(v5);
  return v6;
}

UInt8 *faf_rankingScoreFilterInit(const __CFData *a1)
{
  UInt8 *result;

  result = (UInt8 *)CFDataGetBytePtr(a1);
  *((_QWORD *)result + 1) = 0xBFF0000000000000;
  *result = 1;
  return result;
}

void faf_rankingScoreFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const UInt8 *v4;
  double v5;
  double RankingScore;

  BytePtr = CFDataGetBytePtr(theData);
  if (*BytePtr)
  {
    v4 = BytePtr;
    if (FigAlternateHasRankingScore(a1))
    {
      v5 = *((double *)v4 + 1);
      if (v5 <= FigAlternateGetRankingScore(a1))
        RankingScore = FigAlternateGetRankingScore(a1);
      else
        RankingScore = *((double *)v4 + 1);
      *((double *)v4 + 1) = RankingScore;
    }
    else
    {
      *v4 = 0;
    }
  }
}

BOOL faf_rankingScoreFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return !*BytePtr || vabdd_f64(FigAlternateGetRankingScore(a1), *((double *)BytePtr + 1)) < 2.22044605e-16;
}

uint64_t FigAlternateFrameRateSwitchCapFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  uint64_t v8;
  int v9;

  v9 = 0;
  v8 = 0;
  v4 = CFDataCreate(a1, (const UInt8 *)&v8, 12);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("FrameRateSwitchCap"), 450, (__int128 *)&off_1E2F89378, v4, a2);
  CFRelease(v5);
  return v6;
}

void faf_frameRateSwitchCapFilterInit(const __CFData *a1)
{
  UInt8 *BytePtr;

  BytePtr = (UInt8 *)CFDataGetBytePtr(a1);
  memset_pattern16(BytePtr, &unk_1932FA970, 0xCuLL);
}

uint64_t faf_frameRateSwitchCapFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int FrameRateBucket;
  int NormalizedPeakBitrate;
  uint64_t result;
  int v7;

  BytePtr = CFDataGetBytePtr(theData);
  FrameRateBucket = FigAlternateGetFrameRateBucket(a1);
  NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  result = FigAlternateIsAudioOnly(a1);
  if (!(_DWORD)result)
  {
    v7 = *(_DWORD *)&BytePtr[4 * FrameRateBucket];
    if (v7 >= NormalizedPeakBitrate)
      v7 = NormalizedPeakBitrate;
    *(_DWORD *)&BytePtr[4 * FrameRateBucket] = v7;
  }
  return result;
}

BOOL faf_frameRateSwitchCapFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int FrameRateBucket;
  int NormalizedPeakBitrate;

  BytePtr = CFDataGetBytePtr(theData);
  FrameRateBucket = FigAlternateGetFrameRateBucket(a1);
  NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a1);
  return FigAlternateIsAudioOnly(a1)
      || (FrameRateBucket + 1) > 2
      || *(_DWORD *)&BytePtr[4 * (FrameRateBucket + 1)] >= NormalizedPeakBitrate;
}

CFStringRef faf_frameRateSwitchCapFilterDescAddendum()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("frameRateSwitchCapFilter"));
}

uint64_t FigAlternatePlaybackScoreAndBitRateFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v4 = CFDataCreate(a1, (const UInt8 *)v8, 16);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PlaybackScoreAndBitRate"), 400, (__int128 *)&off_1E2F893A0, v4, a2);
  CFRelease(v5);
  return v6;
}

const UInt8 *faf_playbackScoreFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *(_QWORD *)result = 0;
  *((_QWORD *)result + 1) = 0xBFF0000000000000;
  return result;
}

uint64_t faf_playbackScoreFirstPassFn(uint64_t a1, CFDataRef theData)
{
  UInt8 *BytePtr;
  int BestVideoFormat;
  uint64_t result;
  double v6;
  double v7;
  uint64_t v8;
  int v9;

  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  result = FigAlternateIsAudioOnly(a1);
  if (!(_DWORD)result && BestVideoFormat)
  {
    v9 = 0;
    v6 = *((double *)BytePtr + 1);
    result = FigAlternateGetRankingScoreOrPeakBWWithVideoCodecScore(a1, 0, &v9);
    if (v6 < v7)
    {
      *(_QWORD *)BytePtr = a1;
      result = FigAlternateGetRankingScoreOrPeakBWWithVideoCodecScore(a1, 0, &v9);
      *((_QWORD *)BytePtr + 1) = v8;
    }
  }
  return result;
}

BOOL faf_playbackScoreFilterFn(uint64_t a1, CFDataRef theData)
{
  uint64_t *BytePtr;
  int BestVideoFormat;
  int IsAudioOnly;
  _BOOL8 result;
  int PeakBitRate;

  BytePtr = (uint64_t *)CFDataGetBytePtr(theData);
  BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  IsAudioOnly = FigAlternateIsAudioOnly(a1);
  result = 1;
  if (!IsAudioOnly)
  {
    if (BestVideoFormat)
    {
      PeakBitRate = FigAlternateGetPeakBitRate(a1);
      return PeakBitRate <= (int)FigAlternateGetPeakBitRate(*BytePtr);
    }
  }
  return result;
}

uint64_t FigAlternateFinalSelectionHighestPeakBitRateFilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("FinalSelectionHighestBitRate"), 200, (__int128 *)&unk_1E2F893C8, 0, a2);
}

uint64_t faf_highestBitrateComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate;
  int v5;
  uint64_t v6;
  uint64_t result;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  v5 = FigAlternateGetPeakBitRate(a2);
  if (v5 >= PeakBitRate)
    v6 = 0;
  else
    v6 = -1;
  if (v5 > PeakBitRate)
    result = 1;
  else
    result = v6;
  if (!result)
    return faf_sameBitrateComparatorFn(a1, a2);
  return result;
}

uint64_t FigAlternateCombinedAudioPreferenceFilterCreate(int a1, int a2, unsigned int a3, const void *a4, uint64_t a5, int a6, char a7, uint64_t a8, CFArrayRef a9, _QWORD *a10)
{
  int v13;
  __int128 v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t Filter;
  CFTypeRef v18;
  uint64_t inserted;
  const __CFNumber *v20;
  uint64_t v21;
  const void *v22;
  CFTypeRef v23;
  CFIndex Count;
  CFTypeRef v25;
  CFIndex v26;
  CFTypeRef v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  const __CFNumber *v31;
  const __CFDictionary *v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef v42;
  CFTypeRef v43;
  uint64_t v44;
  const __CFNumber *v45;
  CFTypeRef v46;
  CFArrayRef v47;
  CFArrayRef v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  CFTypeRef v52;
  CFIndex v53;
  unint64_t v54;
  uint64_t v55;
  const __CFNumber *v56;
  const void *v57;
  uint64_t v58;
  int v60[4];
  CFTypeRef v61[2];
  int v62[4];
  __int128 v63;
  CFArrayRef theArray[3];
  int v65;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef cf;
  CFTypeRef v69;
  CFTypeRef v70;
  CFTypeRef v71;
  CFTypeRef v72;
  CFTypeRef v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef v76;
  CFTypeRef v77;
  CFTypeRef v78;
  CFTypeRef v79;
  const void *v80;
  const void *v81;
  const void *v82;
  __int128 v83;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  const void *v88;
  const void *v89[2];

  *(_OWORD *)v60 = 0u;
  *(_OWORD *)v61 = 0u;
  v13 = *(_DWORD *)(a5 + 4);
  v14 = *(_OWORD *)(a5 + 8);
  *(_OWORD *)v62 = 0u;
  v62[2] = v13;
  v63 = v14;
  *(_OWORD *)theArray = 0u;
  theArray[0] = *(CFArrayRef *)(a5 + 24);
  LOBYTE(v60[0]) = *(_BYTE *)a5;
  v60[1] = a2;
  *(_QWORD *)&v60[2] = a3;
  v61[1] = a4;
  v61[0] = faf_copyMediaSelectionPersistentIDForMediaType(a9, 1936684398);
  v62[0] = a6;
  LOBYTE(v62[1]) = a7;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a8)
  {
    v16 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate((void *)*MEMORY[0x1E0C9AE00], a8, a9, 1, &theArray[1]);
    if ((_DWORD)v16)
    {
      v21 = v16;
      goto LABEL_281;
    }
  }
  v67 = 0;
  cf = 0;
  v66 = 0;
  Filter = FigAlternateFilterTreeCreate((uint64_t)v15, &v66);
  if ((_DWORD)Filter)
    goto LABEL_274;
  if (!v66)
  {
    Filter = FigSignalErrorAt();
    goto LABEL_274;
  }
  Filter = faf_CombinedAudioPreferenceAlternateFilterForChannels((uint64_t)v60, 2, 0, &v67);
  if ((_DWORD)Filter)
  {
LABEL_274:
    v21 = Filter;
    goto LABEL_275;
  }
  v18 = v67;
  v82 = 0;
  *(_QWORD *)&v83 = 0;
  v88 = 0;
  v89[0] = 0;
  v87 = 0;
  inserted = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
  if ((_DWORD)inserted)
    goto LABEL_290;
  if (!v89[0])
  {
    inserted = FigSignalErrorAt();
LABEL_290:
    v21 = inserted;
    goto LABEL_291;
  }
  v20 = (const __CFNumber *)v61[0];
  inserted = FigAlternateEligibleLosslessAudioFilterCreate(v15, v61[0], &v82);
  if ((_DWORD)inserted)
    goto LABEL_290;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v82, 510);
  if ((_DWORD)inserted)
    goto LABEL_290;
  inserted = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v20, 4, -1, 1, &v88);
  if ((_DWORD)inserted)
    goto LABEL_290;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 500);
  if ((_DWORD)inserted)
    goto LABEL_290;
  inserted = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], 2u, (const __CFDictionary *)v61[1], v62[1], v20, v62[0], &v87);
  if ((_DWORD)inserted)
    goto LABEL_290;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 490);
  if ((_DWORD)inserted)
    goto LABEL_290;
  if (v18)
  {
    inserted = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v18);
    if ((_DWORD)inserted)
      goto LABEL_290;
  }
  v21 = FigAlternateFilterTreeCreateFilter(v89[0], CFSTR("ImmersiveAudioFilterTree"), 760, &v83);
  if (!(_DWORD)v21)
  {
    v22 = (const void *)v83;
    cf = (CFTypeRef)v83;
    *(_QWORD *)&v83 = 0;
    goto LABEL_18;
  }
LABEL_291:
  v22 = 0;
LABEL_18:
  if (v89[0])
    CFRelease(v89[0]);
  if ((_QWORD)v83)
    CFRelease((CFTypeRef)v83);
  if (v88)
    CFRelease(v88);
  if (v87)
    CFRelease(v87);
  if (v82)
    CFRelease(v82);
  if ((_DWORD)v21)
  {
LABEL_275:
    v48 = (CFArrayRef)cf;
    if (!cf)
      goto LABEL_277;
    goto LABEL_276;
  }
  if (v22)
  {
    v67 = v22;
    CFRetain(v22);
    if (v18)
      CFRelease(v18);
    CFRelease(v22);
    cf = 0;
  }
  else
  {
    v22 = v18;
  }
  if (!LOBYTE(v60[0]) && (*(uint64_t *)&v60[2] > 2 || !*(_QWORD *)&v60[2]))
  {
    Filter = faf_CombinedAudioPreferenceAlternateFilterForChannels((uint64_t)v60, v60[2], v22, &cf);
    if (!(_DWORD)Filter)
    {
      v23 = cf;
      if (cf)
      {
        v67 = cf;
        CFRetain(cf);
        if (v22)
          CFRelease(v22);
        CFRelease(v23);
        cf = 0;
      }
      goto LABEL_42;
    }
    goto LABEL_274;
  }
LABEL_42:
  if (theArray[0])
  {
    Count = CFArrayGetCount(theArray[0]);
    if (Count >= 1)
    {
      v25 = 0;
      v26 = Count + 1;
      while (1)
      {
        v65 = 1064530531;
        FigCFArrayGetInt32AtIndex();
        if (v65 == 1651076712)
          break;
        if (v65 == 1835824233)
        {
          v27 = v67;
          v80 = 0;
          v78 = 0;
          v79 = 0;
          v76 = 0;
          v77 = 0;
          v74 = 0;
          v75 = 0;
          v72 = 0;
          v73 = 0;
          v70 = 0;
          v71 = 0;
          v69 = 0;
          v28 = FigAlternateFilterTreeCreate((uint64_t)v15, &v76);
          if (!(_DWORD)v28)
          {
            if (!v76)
              goto LABEL_156;
            v28 = FigAlternateFilterTreeCreate((uint64_t)v15, &v78);
            if (!(_DWORD)v28)
            {
              if (v78)
              {
                v29 = v62[2];
                if (v62[2] == 1836019574)
                {
                  v30 = FigAlternateResolutionLowerLimitFilterCreate(v15, &v71, *(double *)&v63, *((double *)&v63 + 1));
                  if ((_DWORD)v30)
                    goto LABEL_154;
                  v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v71, 520);
                  if ((_DWORD)v30)
                    goto LABEL_154;
                }
                v31 = (const __CFNumber *)v61[0];
                v30 = FigAlternateEligibleLosslessAudioFilterCreate(v15, v61[0], &v70);
                if ((_DWORD)v30
                  || (v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v70, 510), (_DWORD)v30)
                  || (v30 = FigAlternateMultichannelAudioFilterCreate(v15, v31, 1, 1, &v73), (_DWORD)v30)
                  || (v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v73, 480), (_DWORD)v30)
                  || (v30 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v31, 1, -1, 1, &v74), (_DWORD)v30)
                  || (v30 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v74, 500), (_DWORD)v30))
                {
LABEL_154:
                  v21 = v30;
                  v39 = 0;
                  v38 = 0;
                  goto LABEL_97;
                }
                v32 = (const __CFDictionary *)v61[1];
                v33 = v62[1];
                v34 = v62[0];
                v35 = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], v60[2], (const __CFDictionary *)v61[1], v62[1], v31, v62[0], &v72);
                if ((_DWORD)v35
                  || (v35 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v72, 490), (_DWORD)v35)
                  || (v35 = FigAlternateAmbisonicOrderFilterCreate(v15, 0, 0x7FFFFFFF, v31, 0, &v75), (_DWORD)v35)
                  || (v35 = FigAlternateFilterTreeInsertLeaf((uint64_t)v76, v75, 505), (_DWORD)v35)
                  || (v35 = FigAlternateFilterTreeCreateFilter(v76, CFSTR("MultichannelSpatialAudioFilterTree"), 760, &v69), (_DWORD)v35))
                {
                  v21 = v35;
                  v39 = 0;
                  v38 = 0;
                  goto LABEL_97;
                }
                v82 = 0;
                *(_QWORD *)&v83 = 0;
                v88 = 0;
                v89[0] = 0;
                v87 = 0;
                v81 = 0;
                v36 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
                if (!(_DWORD)v36)
                {
                  if (v89[0])
                  {
                    if (v29 != 1836019574
                      || (v36 = FigAlternateResolutionUpperLimitFilterCreate(v15, &v87, *(double *)&v63 + -1.0, *((double *)&v63 + 1) + -1.0), !(_DWORD)v36)&& (v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 520), !(_DWORD)v36))
                    {
                      v36 = FigAlternateEligibleLosslessAudioFilterCreate(v15, v31, &v81);
                      if (!(_DWORD)v36)
                      {
                        v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v81, 510);
                        if (!(_DWORD)v36)
                        {
                          v36 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v31, 2, -1, 0, &v88);
                          if (!(_DWORD)v36)
                          {
                            v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 500);
                            if (!(_DWORD)v36)
                            {
                              v36 = FigAlternatePreferredAudioFormatFilterCreate(v15, 0, 2u, v32, v33, v31, v34, &v82);
                              if (!(_DWORD)v36)
                              {
                                v37 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v82, 490);
                                if ((_DWORD)v37)
                                {
                                  v21 = v37;
                                  goto LABEL_169;
                                }
                                v21 = FigAlternateFilterTreeCreateFilter(v89[0], CFSTR("MultichannelSpatialAudioFilterTree"), 760, &v83);
                                v38 = (const void *)v83;
                                if (!(_DWORD)v21)
                                {
                                  *(_QWORD *)&v83 = 0;
                                  goto LABEL_78;
                                }
                                if ((_QWORD)v83)
                                {
                                  CFRelease((CFTypeRef)v83);
LABEL_169:
                                  v38 = 0;
                                }
LABEL_78:
                                if (v89[0])
                                  CFRelease(v89[0]);
                                if (v88)
                                  CFRelease(v88);
                                if (v87)
                                  CFRelease(v87);
                                if (v82)
                                  CFRelease(v82);
                                if (v81)
                                  CFRelease(v81);
                                if ((_DWORD)v21)
                                {
                                  v39 = 0;
                                }
                                else
                                {
                                  FigAlternateMergeFilterCreate((uint64_t)v15, CFSTR("MultichannelSpatialAudioFilterTree"), 760, v69, v38, 1, &v80);
                                  v39 = v80;
                                  v40 = FigAlternateFilterTreeInsertLeaf((uint64_t)v78, v80, 760);
                                  if ((_DWORD)v40)
                                  {
                                    v21 = v40;
                                  }
                                  else if (v29 == 1936684398
                                         && ((v41 = FigAlternateStereoCapForMultichannelFilterCreate(v15, v31, &v77),
                                              (_DWORD)v41)
                                          || (v41 = FigAlternateFilterTreeInsertLeaf((uint64_t)v78, v77, 750), (_DWORD)v41))
                                         || v27
                                         && (v41 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v78, v27),
                                             (_DWORD)v41))
                                  {
                                    v21 = v41;
                                  }
                                  else
                                  {
                                    v21 = FigAlternateFilterTreeCreateFilter(v78, CFSTR("MultichannelSpatialAudioFilterTree"), 760, &v79);
                                    if (!(_DWORD)v21)
                                    {
                                      cf = v79;
                                      v79 = 0;
                                    }
                                  }
                                }
LABEL_97:
                                if (v78)
                                  CFRelease(v78);
                                if (v39)
                                  CFRelease(v39);
                                if (v79)
                                  CFRelease(v79);
                                if (v69)
                                  CFRelease(v69);
                                if (v38)
                                  CFRelease(v38);
                                if (v76)
                                  CFRelease(v76);
                                if (v77)
                                  CFRelease(v77);
                                if (v74)
                                  CFRelease(v74);
                                if (v75)
                                  CFRelease(v75);
                                if (v73)
                                  CFRelease(v73);
                                if (v71)
                                  CFRelease(v71);
                                if (v72)
                                  CFRelease(v72);
                                if (v70)
                                  CFRelease(v70);
                                if ((_DWORD)v21)
                                  goto LABEL_275;
                                v25 = cf;
                                v42 = cf;
LABEL_148:
                                if (v42)
                                {
                                  v46 = v67;
                                  v67 = v42;
                                  CFRetain(v42);
                                  if (v46)
                                    CFRelease(v46);
                                  CFRelease(v42);
                                  v25 = 0;
                                  cf = 0;
                                }
                                goto LABEL_152;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    v36 = FigSignalErrorAt();
                  }
                }
                v21 = v36;
                v38 = 0;
                goto LABEL_78;
              }
LABEL_156:
              v28 = FigSignalErrorAt();
            }
          }
          v21 = v28;
          v39 = 0;
          v38 = 0;
          goto LABEL_97;
        }
LABEL_152:
        if ((unint64_t)--v26 <= 1)
          goto LABEL_171;
      }
      v43 = v67;
      v82 = 0;
      *(_QWORD *)&v83 = 0;
      v88 = 0;
      v89[0] = 0;
      v87 = 0;
      v44 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
      if (!(_DWORD)v44)
      {
        if (v89[0])
        {
          v45 = (const __CFNumber *)v61[0];
          v44 = FigAlternateEligibleLosslessAudioFilterCreate(v15, v61[0], &v82);
          if (!(_DWORD)v44)
          {
            v44 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v82, 510);
            if (!(_DWORD)v44)
            {
              v44 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, v45, 3, -1, 1, &v88);
              if (!(_DWORD)v44)
              {
                v44 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 500);
                if (!(_DWORD)v44)
                {
                  v44 = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], 2u, (const __CFDictionary *)v61[1], v62[1], v45, v62[0], &v87);
                  if (!(_DWORD)v44)
                  {
                    v44 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 490);
                    if (!(_DWORD)v44)
                    {
                      if (!v43 || (v44 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v43), !(_DWORD)v44))
                      {
                        v21 = FigAlternateFilterTreeCreateFilter(v89[0], CFSTR("BinauralAudioFilterTree"), 760, &v83);
                        if (!(_DWORD)v21)
                        {
                          cf = (CFTypeRef)v83;
                          v25 = (CFTypeRef)v83;
                          *(_QWORD *)&v83 = 0;
                          v42 = v25;
                          goto LABEL_137;
                        }
LABEL_161:
                        v42 = 0;
LABEL_137:
                        if (v89[0])
                          CFRelease(v89[0]);
                        if ((_QWORD)v83)
                          CFRelease((CFTypeRef)v83);
                        if (v88)
                          CFRelease(v88);
                        if (v87)
                          CFRelease(v87);
                        if (v82)
                          CFRelease(v82);
                        if ((_DWORD)v21)
                          goto LABEL_275;
                        goto LABEL_148;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v44 = FigSignalErrorAt();
        }
      }
      v21 = v44;
      goto LABEL_161;
    }
  }
  v25 = 0;
LABEL_171:
  v47 = theArray[1];
  if (!theArray[1])
  {
    v48 = (CFArrayRef)v67;
LABEL_272:
    Filter = FigAlternateFilterTreeInsertLeaf((uint64_t)v66, v48, 760);
    if (!(_DWORD)Filter)
      Filter = FigAlternateFilterTreeCreateFilter(v66, CFSTR("CombinedAudioPreference"), 760, a10);
    goto LABEL_274;
  }
  v48 = (CFArrayRef)v67;
  if (*(uint64_t *)&v60[2] > 2)
    goto LABEL_193;
  v88 = 0;
  v89[0] = 0;
  v87 = 0;
  v49 = FigAlternateFilterTreeCreate((uint64_t)v15, &v88);
  if ((_DWORD)v49)
    goto LABEL_296;
  if (!v88)
  {
    v49 = FigSignalErrorAt();
LABEL_296:
    v21 = v49;
    v50 = 0;
    goto LABEL_179;
  }
  FigAlternateFilterTreeInsertLeaf((uint64_t)v88, v47, 540);
  if (v48)
  {
    v49 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v88, v48);
    if ((_DWORD)v49)
      goto LABEL_296;
  }
  v83 = 0uLL;
  v85 = 0;
  v86 = 0;
  v84 = faf_losslessAudioOnlyFilterFn;
  FigSimpleAlternateFilterCreate((uint64_t)v15, CFSTR("LosslessAudioPreference"), 760, &v83, 0, &v87);
  v50 = v87;
  FigAlternateFilterTreeInsertLeaf((uint64_t)v88, v87, 510);
  v21 = FigAlternateFilterTreeCreateFilter(v88, CFSTR("OfflinePlayableLosslessTree"), 760, v89);
  if (!(_DWORD)v21)
  {
    v25 = v89[0];
    cf = v89[0];
    v89[0] = 0;
  }
LABEL_179:
  if (v88)
    CFRelease(v88);
  if (v89[0])
    CFRelease(v89[0]);
  if (v50)
    CFRelease(v50);
  if ((_DWORD)v21)
    goto LABEL_275;
  v67 = v25;
  if (v25)
    CFRetain(v25);
  if (v48)
    CFRelease(v48);
  if (v25)
  {
    CFRelease(v25);
    cf = 0;
  }
  v47 = theArray[1];
  v48 = (CFArrayRef)v67;
  if (!theArray[1])
    goto LABEL_272;
LABEL_193:
  *(_QWORD *)&v83 = 0;
  v88 = 0;
  v89[0] = 0;
  v51 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
  if ((_DWORD)v51)
  {
LABEL_294:
    v21 = v51;
    goto LABEL_201;
  }
  if (!v89[0])
  {
    v51 = FigSignalErrorAt();
    goto LABEL_294;
  }
  v51 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v47, 540);
  if ((_DWORD)v51)
    goto LABEL_294;
  v51 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, (CFNumberRef)v61[0], 4, -1, 1, &v88);
  if ((_DWORD)v51)
    goto LABEL_294;
  FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 530);
  if (v48)
  {
    v51 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v48);
    if ((_DWORD)v51)
      goto LABEL_294;
  }
  v21 = FigAlternateFilterTreeCreateFilter(v89[0], CFSTR("OfflinePlayableImmersiveAudioTree"), 760, &v83);
  if (!(_DWORD)v21)
  {
    cf = (CFTypeRef)v83;
    *(_QWORD *)&v83 = 0;
  }
LABEL_201:
  if (v89[0])
    CFRelease(v89[0]);
  if ((_QWORD)v83)
    CFRelease((CFTypeRef)v83);
  if (v88)
    CFRelease(v88);
  if ((_DWORD)v21)
    goto LABEL_275;
  v52 = cf;
  v67 = cf;
  if (cf)
    CFRetain(cf);
  if (v48)
    CFRelease(v48);
  if (v52)
  {
    CFRelease(v52);
    cf = 0;
  }
  if (!theArray[0] || (v53 = CFArrayGetCount(theArray[0]), v53 < 1))
  {
    v48 = (CFArrayRef)v52;
LABEL_271:
    v67 = v48;
    cf = 0;
    goto LABEL_272;
  }
  v54 = v53 + 1;
  while (1)
  {
    LODWORD(v82) = 1064530531;
    FigCFArrayGetInt32AtIndex();
    if ((_DWORD)v82 != 1651076712)
    {
      if ((_DWORD)v82 != 1835824233)
        goto LABEL_243;
      *(_QWORD *)&v83 = 0;
      v88 = 0;
      v89[0] = 0;
      v87 = 0;
      v48 = theArray[1];
      if (!theArray[1])
      {
        v21 = 0;
        goto LABEL_230;
      }
      v55 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
      if (!(_DWORD)v55)
      {
        if (v89[0])
        {
          v55 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v48, 540);
          if (!(_DWORD)v55)
          {
            v56 = (const __CFNumber *)v61[0];
            v55 = FigAlternatePreferredAudioFormatFilterCreate(v15, v60[1], v60[2], (const __CFDictionary *)v61[1], v62[1], (CFNumberRef)v61[0], v62[0], &v88);
            if (!(_DWORD)v55)
            {
              v55 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 490);
              if (!(_DWORD)v55)
              {
                v55 = FigAlternateMultichannelAudioFilterCreate(v15, v56, 1, 1, &v87);
                if (!(_DWORD)v55)
                {
                  FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v87, 480);
                  if (!v52 || (v55 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v52), !(_DWORD)v55))
                  {
                    v21 = FigAlternateFilterTreeCreateFilter(v89[0], CFSTR("OfflinePlayableMultiTree"), 760, &v83);
                    if (!(_DWORD)v21)
                    {
                      v48 = (CFArrayRef)v83;
                      *(_QWORD *)&v83 = 0;
                      goto LABEL_230;
                    }
                    goto LABEL_264;
                  }
                }
              }
            }
          }
        }
        else
        {
          v55 = FigSignalErrorAt();
        }
      }
      v21 = v55;
LABEL_264:
      v48 = 0;
LABEL_230:
      if (v89[0])
        CFRelease(v89[0]);
      if ((_QWORD)v83)
        CFRelease((CFTypeRef)v83);
      if (v88)
        CFRelease(v88);
      v57 = v87;
      if (v87)
        goto LABEL_237;
      goto LABEL_238;
    }
    *(_QWORD *)&v83 = 0;
    v88 = 0;
    v89[0] = 0;
    v48 = theArray[1];
    if (!theArray[1])
    {
      v21 = 0;
      goto LABEL_257;
    }
    v58 = FigAlternateFilterTreeCreate((uint64_t)v15, v89);
    if ((_DWORD)v58)
      goto LABEL_267;
    if (!v89[0])
    {
      v58 = FigSignalErrorAt();
LABEL_267:
      v21 = v58;
      goto LABEL_268;
    }
    v58 = FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v48, 540);
    if ((_DWORD)v58)
      goto LABEL_267;
    v58 = FigAlternateImmersiveAudioPreferenceFilterCreate(v15, (CFNumberRef)v61[0], 3, -1, 1, &v88);
    if ((_DWORD)v58)
      goto LABEL_267;
    FigAlternateFilterTreeInsertLeaf((uint64_t)v89[0], v88, 530);
    if (v52)
    {
      v58 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)v89[0], v52);
      if ((_DWORD)v58)
        goto LABEL_267;
    }
    v21 = FigAlternateFilterTreeCreateFilter(v89[0], CFSTR("OfflinePlayableBinauralTree"), 760, &v83);
    if (!(_DWORD)v21)
    {
      v48 = (CFArrayRef)v83;
      *(_QWORD *)&v83 = 0;
      goto LABEL_255;
    }
LABEL_268:
    v48 = 0;
LABEL_255:
    if (v89[0])
      CFRelease(v89[0]);
LABEL_257:
    if ((_QWORD)v83)
      CFRelease((CFTypeRef)v83);
    v57 = v88;
    if (v88)
LABEL_237:
      CFRelease(v57);
LABEL_238:
    if ((_DWORD)v21)
      break;
    if (v48)
    {
      CFRetain(v48);
      if (v52)
        CFRelease(v52);
      CFRelease(v48);
      goto LABEL_244;
    }
LABEL_243:
    v48 = (CFArrayRef)v52;
LABEL_244:
    --v54;
    v52 = v48;
    if (v54 <= 1)
      goto LABEL_271;
  }
  v67 = v52;
  cf = v48;
  if (v48)
LABEL_276:
    CFRelease(v48);
LABEL_277:
  if (v66)
    CFRelease(v66);
  if (v67)
    CFRelease(v67);
LABEL_281:
  if (theArray[1])
    CFRelease(theArray[1]);
  if (v61[0])
    CFRelease(v61[0]);
  return v21;
}

uint64_t FigAlternateLowestIndexAlternateFilterCreate(uint64_t a1, _QWORD *a2)
{
  return FigSimpleAlternateFilterCreate(a1, CFSTR("LowestIndex"), 560, (__int128 *)&unk_1E2F893F0, 0, a2);
}

uint64_t faf_lowestIndexFilterComparatorFn(uint64_t a1, uint64_t a2)
{
  int AlternateIndex;
  int v4;
  uint64_t v5;

  AlternateIndex = FigAlternateGetAlternateIndex(a1);
  v4 = FigAlternateGetAlternateIndex(a2);
  if (AlternateIndex >= v4)
    v5 = 0;
  else
    v5 = -1;
  if (AlternateIndex > v4)
    return 1;
  else
    return v5;
}

uint64_t FigAlternateSingleAlternateFilterCreate(uint64_t a1, const void *a2, int a3, const void *a4, int a5, _QWORD *a6)
{
  uint64_t (*v6)();
  __int128 v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  CFStringRef (*v11)(uint64_t, uint64_t);

  v6 = faf_allEqualMinSortingFn;
  if (a3)
    v6 = 0;
  v8 = 0uLL;
  v9 = faf_singleAlternateFilterFn;
  v10 = v6;
  v11 = faf_singleAlternateFilterDescAddendum;
  return FigSimpleAlternateFilterCreate(a1, a4, a5, &v8, a2, a6);
}

CFStringRef faf_singleAlternateFilterDescAddendum(uint64_t a1, uint64_t a2)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@"), a2);
}

uint64_t FigAlternateStartupScoreFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v4 = CFDataCreate(a1, (const UInt8 *)v8, 40);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("StartupScore"), 555, (__int128 *)&off_1E2F89418, v4, a2);
  CFRelease(v5);
  return v6;
}

UInt8 *faf_startupScoreFilterInit(const __CFData *a1)
{
  UInt8 *result;

  result = (UInt8 *)CFDataGetBytePtr(a1);
  *(_WORD *)result = 257;
  result[2] = 0;
  *((_QWORD *)result + 1) = 0xFFEFFFFFFFFFFFFFLL;
  result[16] = 0;
  *((_QWORD *)result + 3) = 0xFFEFFFFFFFFFFFFFLL;
  *((_QWORD *)result + 4) = 0;
  return result;
}

uint64_t faf_startupScoreFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int IsAudioOnly;
  int IsIFrameOnly;
  double StartupScore;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  IsAudioOnly = FigAlternateIsAudioOnly(a1);
  IsIFrameOnly = FigAlternateIsIFrameOnly(a1);
  StartupScore = FigAlternateGetStartupScore(a1);
  result = FigAlternateGetPeakBitRate(a1);
  if (!IsIFrameOnly)
  {
    *BytePtr = 0;
    if (IsAudioOnly)
    {
      if (StartupScore > *((double *)BytePtr + 3))
      {
        *((_BYTE *)BytePtr + 16) = 1;
        *((double *)BytePtr + 3) = StartupScore;
        *((_DWORD *)BytePtr + 9) = result;
      }
    }
    else
    {
      *((_BYTE *)BytePtr + 1) = 0;
      if (StartupScore > *((double *)BytePtr + 1))
      {
        *((_BYTE *)BytePtr + 2) = 1;
        *((double *)BytePtr + 1) = StartupScore;
        *((_DWORD *)BytePtr + 8) = result;
      }
    }
  }
  return result;
}

BOOL faf_startupScoreFilterFn(uint64_t a1, const __CFData *a2)
{
  int PeakBitRate;
  const UInt8 *BytePtr;
  int v5;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  BytePtr = CFDataGetBytePtr(a2);
  if (!*BytePtr)
  {
    if (BytePtr[16] && BytePtr[1])
    {
      v5 = *((_DWORD *)BytePtr + 9);
      return v5 + 1 >= PeakBitRate;
    }
    if (BytePtr[2])
    {
      v5 = *((_DWORD *)BytePtr + 8);
      return v5 + 1 >= PeakBitRate;
    }
  }
  return 0;
}

uint64_t faf_startupScoreFilterComparatorFn(uint64_t a1, uint64_t a2)
{
  int ZeroIndexedAlternateIndex;
  int v4;
  uint64_t v5;

  ZeroIndexedAlternateIndex = FigAlternateGetZeroIndexedAlternateIndex(a1);
  v4 = FigAlternateGetZeroIndexedAlternateIndex(a2);
  if (ZeroIndexedAlternateIndex >= v4)
    v5 = 0;
  else
    v5 = -1;
  if (ZeroIndexedAlternateIndex > v4)
    return 1;
  else
    return v5;
}

__CFString *faf_startupScoreFilterDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  __CFString *Mutable;
  __CFString *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;

  BytePtr = CFDataGetBytePtr(theData);
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = Mutable;
  if (Mutable)
  {
    v5 = "IFrameOnly ";
    v6 = "";
    if (!*BytePtr)
      v5 = "";
    if (BytePtr[1])
      v7 = "AudioOnly ";
    else
      v7 = "";
    if (BytePtr[16])
      v8 = "hasAudioScore ";
    else
      v8 = "";
    if (BytePtr[2])
      v6 = "hasVideoScore ";
    CFStringAppendFormat(Mutable, 0, CFSTR("%s%s%s%s"), v5, v7, v8, v6);
    CFStringTrimWhitespace(v4);
  }
  return v4;
}

uint64_t FigAlternatePassthroughFilterCreate(uint64_t a1, const __CFString *a2, int a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  CFStringRef Copy;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    if (a4)
    {
      MEMORY[0x19402F294](&FigAlternateFilterGetClassID_sRegisterFigAlternateFilterTypeOnce, RegisterFigAlternateFilterType);
      v7 = CMDerivedObjectCreate();
      if ((_DWORD)v7)
        return v7;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = FigReentrantMutexCreate();
      *(_QWORD *)DerivedStorage = v9;
      if (v9)
      {
        Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
        *(_QWORD *)(DerivedStorage + 16) = Copy;
        if (Copy)
        {
          v11 = FigDispatchQueueCreateWithPriority();
          *(_QWORD *)(DerivedStorage + 24) = v11;
          if (v11)
          {
            v12 = 0;
            *(_DWORD *)(DerivedStorage + 8) = a3;
            *a4 = 0;
            return v12;
          }
        }
      }
    }
    return FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

uint64_t FigAlternateTransitionBiasFilterCreate(void *a1, CFTypeRef cf, const void *a3, _QWORD *a4)
{
  CFTypeRef v7;
  CFTypeRef v8;
  _QWORD v10[2];

  if (cf)
    v7 = CFRetain(cf);
  else
    v7 = 0;
  v10[0] = v7;
  if (a3)
    v8 = CFRetain(a3);
  else
    v8 = 0;
  v10[1] = v8;
  return fsaf_createWithBytes(a1, CFSTR("TransitionBias"), 570, (uint64_t)faf_TransitionBiasFilterFn, 0, 0, 0, (CFTypeRef (*)())faf_TransitionBiasFilterAddendum, v10, 0x10uLL, (void (__cdecl *)(void *, void *))faf_TransitionBiasDeallocateCallback, a4);
}

uint64_t faf_TransitionBiasFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const UInt8 *v4;
  uint64_t result;
  unsigned int AudioBitDepth;

  BytePtr = CFDataGetBytePtr(theData);
  if (!*(_QWORD *)BytePtr)
    return 0;
  v4 = BytePtr;
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  result = FigAlternateHasAudioFormatID(a1, 0);
  if (!(_DWORD)result)
    return result;
  if (FigAlternateGetAudioChannelCounts(a1, *(_QWORD *)v4, 0, 0))
    return 0;
  if (!CFDictionaryContainsKey(*((CFDictionaryRef *)v4 + 1), CFSTR("bitdepth"))
    || (FigCFDictionaryGetInt32IfPresent(),
        AudioBitDepth = FigAlternateGetAudioBitDepth(a1, *(const void **)v4),
        result = 0,
        !AudioBitDepth))
  {
    if (CFDictionaryContainsKey(*((CFDictionaryRef *)v4 + 1), CFSTR("samplerate")))
    {
      FigCFDictionaryGetDoubleIfPresent();
      return FigAlternateGetAudioSampleRate(a1, *(const void **)v4) == 0.0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

CFStringRef faf_TransitionBiasFilterAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const void *Value;
  const void *v6;
  const void *v7;
  CFStringRef v8;

  BytePtr = CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)BytePtr + 1), CFSTR("bitdepth")))
  {
    Value = CFDictionaryGetValue(*((CFDictionaryRef *)BytePtr + 1), CFSTR("bitdepth"));
    CFStringAppendFormat(Mutable, 0, CFSTR(" Bitdepth: %@"), Value);
  }
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)BytePtr + 1), CFSTR("samplerate")))
  {
    v6 = CFDictionaryGetValue(*((CFDictionaryRef *)BytePtr + 1), CFSTR("samplerate"));
    CFStringAppendFormat(Mutable, 0, CFSTR(" SampleRate: %@"), v6);
  }
  v7 = CFDictionaryGetValue(*((CFDictionaryRef *)BytePtr + 1), CFSTR("channels"));
  v8 = CFStringCreateWithFormat(v3, 0, CFSTR("channels: %@%@"), v7, Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return v8;
}

void faf_TransitionBiasDeallocateCallback(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  v5 = ptr[1];
  if (v5)
    CFRelease(v5);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateHighestAtmosBitrateFilterCreate(const __CFAllocator *a1, _QWORD *a2)
{
  CFDataRef v4;
  CFDataRef v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  v4 = CFDataCreate(a1, (const UInt8 *)v8, 16);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("HighestAtmosBitrateFilter"), 635, (__int128 *)&off_1E2F89480, v4, a2);
  CFRelease(v5);
  return v6;
}

const UInt8 *faf_HighestAtmosBitrateFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *result = 0;
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t faf_HighestAtmosBitrateFirstPassFn(uint64_t a1, CFDataRef theData)
{
  UInt8 *BytePtr;
  uint64_t result;
  int v5;

  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  result = FigAlternateGetPeakBitRate(a1);
  if (!*BytePtr)
  {
    v5 = result;
    if (FigAlternateHasVideo(a1))
      *BytePtr = 1;
    result = FigAlternateHasAudioFormat(a1, 7);
    if ((_DWORD)result)
    {
      result = *((_QWORD *)BytePtr + 1);
      if (!result || (result = FigAlternateGetPeakBitRate(result), v5 > (int)result))
        *((_QWORD *)BytePtr + 1) = a1;
    }
  }
  return result;
}

BOOL faf_HighestAtmosBitrateFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t v5;

  BytePtr = CFDataGetBytePtr(theData);
  if (*BytePtr)
    return 1;
  v5 = *((_QWORD *)BytePtr + 1);
  return !v5 || v5 == a1;
}

uint64_t FigAlternatePreferExclusiveAudioPassthroughFilterCreate(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  UInt8 bytes[4];

  *(_DWORD *)bytes = a2;
  v5 = CFDataCreate(a1, bytes, 4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("PreferExclusiveAudioPassthrough"), 639, (__int128 *)&unk_1E2F894A8, v5, a3);
  CFRelease(v6);
  return v7;
}

uint64_t faf_PreferExclusiveAudioPassthroughFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;

  BytePtr = CFDataGetBytePtr(theData);
  if (FigAlternateHasAudioFormat(a1, 7) && BytePtr[2]
    || FigAlternateHasAudioFormat(a1, 6) && BytePtr[1])
  {
    return 1;
  }
  result = FigAlternateHasAudioFormat(a1, 5);
  if ((_DWORD)result)
    return *BytePtr != 0;
  return result;
}

uint64_t FigAlternateVideoLayoutCapabilityFilterCreate(const __CFAllocator *a1, const __CFArray *a2, _QWORD *a3)
{
  uint64_t v6;
  __CFString *VideoLayoutLoggingStringFromCollectionArray;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  CFTypeRef v10;
  uint64_t v11;
  _QWORD v13[2];
  CFTypeRef cf;

  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3 || !a2 || !CFArrayGetCount(a2))
  {
    v6 = FigSignalErrorAt();
    goto LABEL_10;
  }
  v6 = fiv_copyFilteringSupportedTagCollectionArray(a2, (CFMutableArrayRef *)&cf);
  if ((_DWORD)v6)
  {
LABEL_10:
    v11 = v6;
    VideoLayoutLoggingStringFromCollectionArray = 0;
    goto LABEL_11;
  }
  VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray((const __CFArray *)cf);
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v9 = Mutable;
    v10 = cf;
    if (cf)
      v10 = CFRetain(cf);
    v13[0] = v10;
    v13[1] = CFRetain(v9);
    v11 = fsaf_createWithBytes(a1, CFSTR("VideoLayoutCapability"), 1000, (uint64_t)fivc_filterFn, 0, 0, 0, (CFTypeRef (*)())fivc_copyDescAddendum, v13, 0x10uLL, (void (__cdecl *)(void *, void *))fivc_deallocateContext, a3);
    CFRelease(v9);
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (VideoLayoutLoggingStringFromCollectionArray)
    CFRelease(VideoLayoutLoggingStringFromCollectionArray);
  return v11;
}

uint64_t fiv_copyFilteringSupportedTagCollectionArray(const __CFArray *a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v6;
  CFMutableSetRef v7;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 4294951686;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return 4294951685;
  v6 = Mutable;
  v7 = CFSetCreateMutable(v4, 0, MEMORY[0x1E0C9B3B0]);
  if (v7)
  {
    v8 = 0;
    if (!a1)
      goto LABEL_6;
LABEL_5:
    for (i = CFArrayGetCount(a1); v8 < i; i = 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      cf = 0;
      v15 = *(_QWORD *)"kcapseyejorp";
      v16 = 1886547818;
      v11 = MEMORY[0x19402EFE8](v4, ValueAtIndex, &v15, 3, &cf);
      if ((_DWORD)v11)
      {
        v12 = v11;
      }
      else
      {
        if (MEMORY[0x19402F03C](cf) == 3)
          FigTagCollectionGetTagsWithCategory();
        v12 = 0;
      }
      if (cf)
        CFRelease(cf);
      if ((_DWORD)v12)
        goto LABEL_25;
      ++v8;
      if (a1)
        goto LABEL_5;
LABEL_6:
      ;
    }
    v12 = 0;
    *a2 = v6;
LABEL_20:
    CFRelease(v7);
    return v12;
  }
  v12 = 4294951685;
LABEL_25:
  CFRelease(v6);
  if (v7)
    goto LABEL_20;
  return v12;
}

BOOL fivc_filterFn(__CFArray *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFArray *v4;
  int IsAudioOnly;
  _BOOL4 v6;
  __CFDictionary *v7;
  __CFArray *VideoLayoutTags;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  uint64_t v12;
  void *v13;
  void *v14;
  const void *ValueAtIndex;
  CFIndex v16;
  const void *v17;
  void *value;

  BytePtr = CFDataGetBytePtr(theData);
  v4 = *(const __CFArray **)BytePtr;
  IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)a1);
  v6 = 0;
  if (IsAudioOnly || !v4)
    return IsAudioOnly || v6;
  if (CFArrayGetCount(v4))
  {
    v7 = (__CFDictionary *)*((_QWORD *)BytePtr + 1);
    VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
    if (VideoLayoutTags)
    {
      v9 = VideoLayoutTags;
      Count = CFArrayGetCount(VideoLayoutTags);
      if (Count >= 1)
      {
        v11 = 0;
        v12 = 0;
        v13 = (void *)*MEMORY[0x1E0C9AE40];
        v14 = (void *)*MEMORY[0x1E0C9AE50];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v9, v11);
          value = v13;
          if (CFDictionaryGetValueIfPresent(v7, ValueAtIndex, (const void **)&value))
          {
            if (v14 != value)
              break;
            ++v12;
          }
          else
          {
            v16 = 0;
            while (v16 < CFArrayGetCount(v4))
            {
              CFArrayGetValueAtIndex(v4, v16++);
              if (FigCFEqual())
              {
                ++v12;
                v17 = v14;
                goto LABEL_15;
              }
            }
            v17 = v13;
LABEL_15:
            CFDictionarySetValue(v7, ValueAtIndex, v17);
          }
          ++v11;
        }
        while (v11 != Count);
        IsAudioOnly = 0;
        goto LABEL_20;
      }
    }
    else
    {
      Count = 0;
    }
    v12 = 0;
LABEL_20:
    v6 = v12 == Count;
    return IsAudioOnly || v6;
  }
  v6 = 0;
  return IsAudioOnly || v6;
}

CFStringRef fivc_copyDescAddendum(int a1, CFDataRef theData)
{
  const __CFArray *Count;
  const __CFAllocator *v3;

  Count = *(const __CFArray **)CFDataGetBytePtr(theData);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  return CFStringCreateWithFormat(v3, 0, CFSTR("Channels:%ld"), Count);
}

void fivc_deallocateContext(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;
  const void *v5;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  v5 = ptr[1];
  if (v5)
    CFRelease(v5);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateVideoLayoutPreferenceFilterCreate(void *a1, const __CFArray *a2, _QWORD *a3)
{
  uint64_t v6;
  __CFString *VideoLayoutLoggingStringFromCollectionArray;
  uint64_t inserted;
  uint64_t v9;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef cf;

  v13 = 0;
  cf = 0;
  v11 = 0;
  v12 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3 || !a2 || !CFArrayGetCount(a2))
  {
    v6 = FigSignalErrorAt();
    goto LABEL_13;
  }
  v6 = fiv_copyFilteringSupportedTagCollectionArray(a2, (CFMutableArrayRef *)&cf);
  if ((_DWORD)v6)
  {
LABEL_13:
    v9 = v6;
    VideoLayoutLoggingStringFromCollectionArray = 0;
    goto LABEL_14;
  }
  VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray((const __CFArray *)cf);
  inserted = FigAlternateFilterTreeCreate((uint64_t)a1, &v11);
  if (!(_DWORD)inserted)
  {
    inserted = fivp_createFilter(a1, cf, 1, &v13);
    if (!(_DWORD)inserted)
    {
      inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v11, v13, 2);
      if (!(_DWORD)inserted)
      {
        inserted = fivp_createFilter(a1, cf, 0, &v12);
        if (!(_DWORD)inserted)
        {
          inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v11, v12, 1);
          if (!(_DWORD)inserted)
            inserted = FigAlternateFilterTreeCreateFilter(v11, CFSTR("VideoLayoutPreference"), 880, a3);
        }
      }
    }
  }
  v9 = inserted;
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  if (VideoLayoutLoggingStringFromCollectionArray)
    CFRelease(VideoLayoutLoggingStringFromCollectionArray);
  if (v11)
    CFRelease(v11);
  return v9;
}

uint64_t fivp_createFilter(void *a1, CFTypeRef cf, int a3, _QWORD *a4)
{
  CFTypeRef v7;
  const __CFString *v8;
  _QWORD v10[4];

  v10[1] = 0;
  v10[2] = 0;
  if (cf)
    v7 = CFRetain(cf);
  else
    v7 = 0;
  v10[0] = v7;
  v10[3] = a3 == 0;
  if (a3)
    v8 = CFSTR("VideoLayoutPreferenceMain");
  else
    v8 = CFSTR("VideoLayoutPreferenceDisc");
  return fsaf_createWithBytes(a1, v8, 880, (uint64_t)fivp_filterFn, 0, (uint64_t)fivp_firstPassFn, (uint64_t)fivp_filterInitFn, (CFTypeRef (*)())fivp_copyDescAddendum, v10, 0x20uLL, (void (__cdecl *)(void *, void *))fivp_deallocateContext, a4);
}

uint64_t FigAlternateVideoLayoutPinningFilterCreate(uint64_t a1, const void *a2, _QWORD *a3)
{
  if (a3)
    return FigSimpleAlternateFilterCreate(a1, CFSTR("VideoLayoutPinning"), 883, (__int128 *)&unk_1E2F894D0, a2, a3);
  else
    return FigSignalErrorAt();
}

BOOL fvlp_filterFn(__CFArray *a1)
{
  FigAlternateGetVideoLayoutTags(a1);
  return FigCFEqual() || FigAlternateIsAudioOnly((uint64_t)a1) != 0;
}

CFStringRef fvlp_desc(uint64_t a1, const __CFArray *a2)
{
  __CFString *VideoLayoutLoggingStringFromCollectionArray;
  CFStringRef v3;

  VideoLayoutLoggingStringFromCollectionArray = FigAlternateCreateVideoLayoutLoggingStringFromCollectionArray(a2);
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("collection %@"), VideoLayoutLoggingStringFromCollectionArray);
  if (VideoLayoutLoggingStringFromCollectionArray)
    CFRelease(VideoLayoutLoggingStringFromCollectionArray);
  return v3;
}

uint64_t FigAlternateSuppressDoVi5StereoFilterCreate(uint64_t a1, _QWORD *a2)
{
  if (a2)
    return FigSimpleAlternateFilterCreate(a1, CFSTR("SuppressDoVi5Stereo"), 1000, (__int128 *)&unk_1E2F894F8, 0, a2);
  else
    return FigSignalErrorAt();
}

BOOL fsds_filterFn(__CFArray *a1)
{
  return !FigAlternateHasVideoDolbyVisionHEVCProfile((uint64_t)a1, 5)
      || !faf_alternateHasOnlyStereoVideo(a1);
}

uint64_t FigAlternateSuppressDoVi20MonoFilterCreate(uint64_t a1, _QWORD *a2)
{
  if (a2)
    return FigSimpleAlternateFilterCreate(a1, CFSTR("SuppressDoVi20Mono"), 1000, (__int128 *)&unk_1E2F89520, 0, a2);
  else
    return FigSignalErrorAt();
}

uint64_t fsdm_filterFn(__CFArray *a1)
{
  __CFArray *VideoLayoutTags;
  CFIndex v3;
  uint64_t v4;
  CMTagValue v5;
  CFIndex Count;
  _BOOL8 v7;
  const OpaqueCMTagCollection *ValueAtIndex;
  CMItemCount numberOfTagsCopied;
  CMTag tagBuffer;
  CMTag v12;

  if (!FigAlternateHasVideoDolbyVisionHEVCProfile((uint64_t)a1, 20))
    return 1;
  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  v3 = 0;
  v4 = *MEMORY[0x1E0CA5288];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA5288] + 8);
  do
  {
    if (VideoLayoutTags)
      Count = CFArrayGetCount(VideoLayoutTags);
    else
      Count = 0;
    v7 = v3 < Count;
    if (v3 >= Count)
      break;
    ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v3);
    *(_QWORD *)&tagBuffer.category = 0;
    tagBuffer.value = 0;
    numberOfTagsCopied = 0;
    CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_StereoView, &tagBuffer, 1, &numberOfTagsCopied);
    *(_QWORD *)&v12.category = v4;
    v12.value = v5;
    ++v3;
  }
  while (CMTagEqualToTag(tagBuffer, v12));
  return v7;
}

uint64_t FigAlternateMediaValidationForStereoVideoFilterCreate(uint64_t a1, _QWORD *a2)
{
  if (a2)
    return FigSimpleAlternateFilterCreate(a1, CFSTR("MediaValidationForStereoVideo"), 1000, (__int128 *)&unk_1E2F89548, 0, a2);
  else
    return FigSignalErrorAt();
}

BOOL fmvsv_filterFn(__CFArray *a1)
{
  _BOOL8 v2;
  __CFArray *VideoLayoutTags;
  CFIndex v4;
  uint64_t v5;
  CMTagValue v6;
  CFIndex v7;
  const OpaqueCMTagCollection *ValueAtIndex;
  CMItemCount numberOfTagsCopied;
  CMTag tagBuffer;
  CMTag v12;

  if (!faf_alternateHasOnlyStereoVideo(a1))
    return 1;
  if (!FigAlternateHasVideoFormat((uint64_t)a1, 4))
    return FigAlternateHasVideoFormat((uint64_t)a1, 7) != 0;
  v2 = FigAlternateGetVideoRange((uint64_t)a1) == 1;
  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  v4 = 0;
  v5 = *MEMORY[0x1E0CA2820];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2820] + 8);
  while (1)
  {
    v7 = VideoLayoutTags ? CFArrayGetCount(VideoLayoutTags) : 0;
    if (v4 >= v7)
      break;
    ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v4);
    *(_QWORD *)&tagBuffer.category = 0;
    tagBuffer.value = 0;
    numberOfTagsCopied = 0;
    CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_ProjectionType, &tagBuffer, 1, &numberOfTagsCopied);
    *(_QWORD *)&v12.category = v5;
    v12.value = v6;
    ++v4;
    if (CMTagEqualToTag(tagBuffer, v12))
      return 1;
  }
  return v2;
}

uint64_t FigAlternateAmbisonicOrderFilterCreate(const __CFAllocator *a1, int a2, int a3, CFNumberRef number, int a5, _QWORD *a6)
{
  uint64_t (*v10)(const void *, const void *, CFDataRef);
  CFDataRef v11;
  CFDataRef v12;
  uint64_t v13;
  __int128 v15;
  BOOL (*v16)(const void *, CFDataRef);
  uint64_t (*v17)(const void *, const void *, CFDataRef);
  CFStringRef (*v18)(int, CFDataRef);
  uint64_t valuePtr;
  uint64_t v20;

  valuePtr = 0;
  v20 = 0;
  if (a5)
    v10 = 0;
  else
    v10 = faf_AmbisonicOrderFilterMinSortingFn;
  if (number)
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  else
    LODWORD(valuePtr) = -1;
  HIDWORD(valuePtr) = a2;
  LODWORD(v20) = a3;
  v11 = CFDataCreate(a1, (const UInt8 *)&valuePtr, 16);
  if (!v11)
    return FigSignalErrorAt();
  v12 = v11;
  *(_QWORD *)&v15 = faf_AmbisonicOrderFilterInit;
  *((_QWORD *)&v15 + 1) = faf_AmbisonicOrderFilterFirstPassFn;
  v16 = faf_AmbisonicOrderFilterFilterFn;
  v17 = v10;
  v18 = faf_AmbisonicOrderFilterAddendum;
  v13 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("AmbisonicOrderAudio"), 770, &v15, v11, a6);
  CFRelease(v12);
  return v13;
}

const UInt8 *faf_AmbisonicOrderFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_DWORD *)result + 3) = -1;
  return result;
}

void faf_AmbisonicOrderFilterFirstPassFn(const void *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFNumberRef v4;
  int AmbisonicsOrder;

  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
    v4 = 0;
  else
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
  AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, v4);
  if (AmbisonicsOrder > *((_DWORD *)BytePtr + 3)
    && *((_DWORD *)BytePtr + 1) <= AmbisonicsOrder
    && AmbisonicsOrder <= *((_DWORD *)BytePtr + 2))
  {
    *((_DWORD *)BytePtr + 3) = AmbisonicsOrder;
  }
  if (v4)
    CFRelease(v4);
}

BOOL faf_AmbisonicOrderFilterFilterFn(const void *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFNumberRef v4;
  int AmbisonicsOrder;

  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
  {
    AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, 0);
  }
  else
  {
    v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
    AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, v4);
    if (v4)
      CFRelease(v4);
  }
  return AmbisonicsOrder == *((_DWORD *)BytePtr + 3);
}

uint64_t faf_AmbisonicOrderFilterMinSortingFn(const void *a1, const void *a2, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFNumberRef v6;
  int AmbisonicsOrder;
  int v8;
  uint64_t v9;

  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
    v6 = 0;
  else
    v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
  AmbisonicsOrder = FigAlternateGetAmbisonicsOrder(a1, v6);
  v8 = FigAlternateGetAmbisonicsOrder(a2, v6);
  if (v6)
    CFRelease(v6);
  if (AmbisonicsOrder >= v8)
    v9 = 0;
  else
    v9 = -1;
  if (AmbisonicsOrder > v8)
    return 1;
  else
    return v9;
}

CFStringRef faf_AmbisonicOrderFilterAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("minAmbisonicOrder:%d, maxAmbisonicOrder:%d"), *((unsigned int *)BytePtr + 1), *((unsigned int *)BytePtr + 2));
}

uint64_t FigAlternateStereoCapForMultichannelFilterCreate(void *a1, CFTypeRef cf, _QWORD *a3)
{
  CFTypeRef v5;
  _QWORD v7[2];

  v7[1] = 0;
  if (cf)
    v5 = CFRetain(cf);
  else
    v5 = 0;
  v7[0] = v5;
  return fsaf_createWithBytes(a1, CFSTR("StereoCapForMultichannel"), 750, (uint64_t)faf_stereoCapForMultichannelFilterFn, 0, (uint64_t)faf_stereoCapForMultichannelFirstPassFn, (uint64_t)faf_stereoCapForMultichannelFilterInit, 0, v7, 0x10uLL, (void (__cdecl *)(void *, void *))faf_stereoCapForMultichannelDeallocateContext, a3);
}

BOOL faf_stereoCapForMultichannelFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int AudioChannelCounts;
  int v6;

  v6 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  AudioChannelCounts = FigAlternateGetAudioChannelCounts(a1, *(_QWORD *)BytePtr, &v6, 0);
  return AudioChannelCounts - v6 > 2 || (int)FigAlternateGetExpectedAverageBitrate(a1) < *((_DWORD *)BytePtr + 2);
}

uint64_t faf_stereoCapForMultichannelFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;
  int v5;

  v5 = 0;
  BytePtr = CFDataGetBytePtr(theData);
  result = FigAlternateGetAudioChannelCounts(a1, *(_QWORD *)BytePtr, &v5, 0);
  if ((int)result - v5 >= 3)
  {
    result = FigAlternateGetExpectedAverageBitrate(a1);
    if ((int)result < *((_DWORD *)BytePtr + 2))
      *((_DWORD *)BytePtr + 2) = result;
  }
  return result;
}

const UInt8 *faf_stereoCapForMultichannelFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_DWORD *)result + 2) = 0x7FFFFFFF;
  return result;
}

void faf_stereoCapForMultichannelDeallocateContext(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigAlternateMinimumRequiredPixelCountFilterCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  CFDataRef v5;
  CFDataRef v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = 0;
  v5 = CFDataCreate(a1, (const UInt8 *)v9, 16);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigSimpleAlternateFilterCreate((uint64_t)a1, CFSTR("MinimumRequiredPixelCount"), 530, (__int128 *)&off_1E2F89570, v5, a3);
  CFRelease(v6);
  return v7;
}

const UInt8 *faf_preferPixelCountFilterInit(const __CFData *a1)
{
  const UInt8 *result;

  result = CFDataGetBytePtr(a1);
  *((_QWORD *)result + 1) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t faf_preferPixelCountFilterFirstPassFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t result;
  BOOL v5;
  uint64_t v6;

  BytePtr = CFDataGetBytePtr(theData);
  result = FigAlternateGetPixelCount(a1);
  if (*(_QWORD *)BytePtr)
    v5 = result < *(_QWORD *)BytePtr;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *((_QWORD *)BytePtr + 1);
    if (v6 >= result)
      v6 = result;
    *((_QWORD *)BytePtr + 1) = v6;
  }
  return result;
}

BOOL faf_preferPixelCountFilterFn(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return FigAlternateGetPixelCount(a1) == *((_QWORD *)BytePtr + 1);
}

CFStringRef faf_preferPixelCountFilterDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("pixelCounts %lld"), *(_QWORD *)BytePtr);
}

CFStringRef FigAlternateFilterCopyFormattingDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t (*v3)(uint64_t);
  const __CFString *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3)
    v4 = (const __CFString *)v3(a1);
  else
    v4 = &stru_1E2FD85F8;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v5)
    v6 = v5(a1);
  else
    v6 = 0xFFFFFFFFLL;
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigAlternateFilter <%@:%p> priority:%d]"), v4, a1, v6);
}

uint64_t faf_equal(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t);
  void (*v5)(uint64_t);

  if (!a1)
  {
LABEL_4:
    if (!a2)
      return FigCFEqual();
    goto LABEL_5;
  }
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
  {
    v4(a1);
    goto LABEL_4;
  }
  if (!a2)
    return FigCFEqual();
LABEL_5:
  v5 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v5)
    v5(a2);
  return FigCFEqual();
}

uint64_t fsaf_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 72);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  return FigSimpleMutexDestroy();
}

CFStringRef fsaf_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFAllocator *v8;
  CFIndex Length;
  const char *v10;
  CFStringRef v11;
  const void *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](v3[7]);
  v4 = (uint64_t (*)(uint64_t, uint64_t))v3[6];
  v5 = v3[9];
  if (v4)
  {
    v6 = (const __CFString *)v4(a1, v5);
LABEL_3:
    v7 = v6;
    MEMORY[0x19402EF04](v3[7]);
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_4;
  }
  if (!v5)
  {
    v6 = (const __CFString *)CFRetain(&stru_1E2FD85F8);
    goto LABEL_3;
  }
  v13 = (const void *)FigCFCopyCompactDescription();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("context:%@"), v13);
  MEMORY[0x19402EF04](v3[7]);
  if (v13)
    CFRelease(v13);
LABEL_4:
  Length = CFStringGetLength(v7);
  v10 = " ";
  if (!Length)
    v10 = "";
  v11 = CFStringCreateWithFormat(v8, 0, CFSTR("[FigSimpleAlternateFilter <%@:%p> priority:%d%s%@]"), *(_QWORD *)DerivedStorage, a1, *(unsigned int *)(DerivedStorage + 8), v10, v7);
  if (v7)
    CFRelease(v7);
  return v11;
}

uint64_t fsaf_getName()
{
  return *(_QWORD *)CMBaseObjectGetDerivedStorage();
}

uint64_t fsaf_getPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t fsaf_apply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  const __CFAllocator *v8;
  const __CFArray *Mutable;
  void (*v10)(_QWORD);
  uint64_t v11;
  const __CFAllocator *v12;
  const __CFAllocator *v13;
  __int128 v15;
  __int128 v16;
  CFRange v17;
  CFRange v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0u;
  v16 = 0u;
  if (!a2)
  {
    v11 = FigSignalErrorAt();
    Mutable = 0;
    goto LABEL_15;
  }
  v7 = (_QWORD *)DerivedStorage;
  v8 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (CFArrayGetCount(a2) >= 1)
  {
    MEMORY[0x19402EEEC](v7[7]);
    v10 = (void (*)(_QWORD))v7[2];
    if (v10)
      v10(v7[9]);
    *(_QWORD *)&v15 = a1;
    *(_QWORD *)&v16 = Mutable;
    if (!v7[3]
      || (v17.length = CFArrayGetCount(a2),
          v17.location = 0,
          CFArrayApplyFunction(a2, v17, (CFArrayApplierFunction)fsaf_firstPassCFArrayApplierFn, &v15),
          v11 = DWORD2(v16),
          !DWORD2(v16)))
    {
      if (!v7[4]
        || (v18.length = CFArrayGetCount(a2),
            v18.location = 0,
            CFArrayApplyFunction(a2, v18, (CFArrayApplierFunction)fsaf_applyCFArrayApplierFn, &v15),
            v11 = DWORD2(v16),
            !DWORD2(v16)))
      {
        if (CFArrayGetCount(Mutable)
          || !v7[5]
          || (CFRelease(Mutable),
              v12 = CFGetAllocator(a1),
              (Mutable = faf_copyMinimumAlternatesFromArray(v12, a2, v7[5], v7[9])) != 0))
        {
          v11 = 0;
        }
        else
        {
          v11 = FigSignalErrorAt();
        }
      }
    }
    MEMORY[0x19402EF04](v7[7]);
LABEL_15:
    if ((_DWORD)v11)
      goto LABEL_19;
  }
  if (*a3)
    CFRelease(*a3);
  v13 = CFGetAllocator(a1);
  v11 = 0;
  *a3 = CFArrayCreateCopy(v13, Mutable);
LABEL_19:
  if (Mutable)
    CFRelease(Mutable);
  return v11;
}

uint64_t fsaf_firstPassCFArrayApplierFn(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v5)(uint64_t, _QWORD);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(a2 + 24))
  {
    v5 = *(uint64_t (**)(uint64_t, _QWORD))(result + 24);
    if (v5)
      return v5(a1, *(_QWORD *)(result + 72));
  }
  return result;
}

void fsaf_applyCFArrayApplierFn(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  unsigned int (*v5)(const void *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_DWORD *)(a2 + 24))
  {
    v5 = *(unsigned int (**)(const void *, _QWORD))(DerivedStorage + 32);
    if (v5)
    {
      if (v5(a1, *(_QWORD *)(DerivedStorage + 72)))
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), a1);
    }
  }
}

CFArrayRef faf_copyMinimumAlternatesFromArray(const __CFAllocator *a1, const __CFArray *a2, uint64_t a3, uint64_t a4)
{
  const __CFArray *Mutable;
  const __CFArray *v9;
  CFArrayRef Copy;
  CFArrayRef result;
  __int128 v12;
  CFArrayRef theArray[2];
  CFRange v14;

  v12 = 0u;
  *(_OWORD *)theArray = 0u;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v9 = Mutable;
  if (a2 && Mutable)
  {
    theArray[1] = Mutable;
    *(_QWORD *)&v12 = a3;
    *((_QWORD *)&v12 + 1) = a4;
    v14.length = CFArrayGetCount(a2);
    v14.location = 0;
    CFArrayApplyFunction(a2, v14, (CFArrayApplierFunction)faf_minimumCFArrayApplierFn, &v12);
    Copy = CFArrayCreateCopy(a1, theArray[1]);
LABEL_4:
    CFRelease(v9);
    return Copy;
  }
  Copy = 0;
  result = 0;
  if (v9)
    goto LABEL_4;
  return result;
}

void faf_minimumCFArrayApplierFn(const void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = (*(uint64_t (**)(const void *, uint64_t, _QWORD))a2)(a1, v4, *(_QWORD *)(a2 + 8));
    if (v5 == 1)
      return;
    if (v5 == -1)
    {
      *(_QWORD *)(a2 + 16) = a1;
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a2 + 24));
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = a1;
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), a1);
}

void faf_mergeFilterFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
}

CFStringRef faf_mergeFilterCopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  __CFString *v5;
  CFStringRef v6;
  CFStringRef v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  CFStringRef Copy;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v5 = Mutable;
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigAlternateMergeFilter <%@:%p> priority:%d]"), *(_QWORD *)DerivedStorage, a1, *(unsigned int *)(DerivedStorage + 8));
  v6 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 16));
  v7 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 24));
  if (v6)
  {
    v8 = FigCFStringCopyWithIndent();
    v9 = (const void *)v8;
    if (!v8)
    {
      Copy = 0;
      goto LABEL_10;
    }
    CFStringAppendFormat(v5, 0, CFSTR("\n%@"), v8);
    CFRelease(v9);
  }
  if (v7)
  {
    v10 = FigCFStringCopyWithIndent();
    v9 = (const void *)v10;
    if (!v10)
    {
      Copy = 0;
      if (!v6)
        goto LABEL_11;
      goto LABEL_10;
    }
    CFStringAppendFormat(v5, 0, CFSTR("\n%@"), v10);
  }
  else
  {
    v9 = 0;
  }
  Copy = CFStringCreateCopy(v3, v5);
  if (v6)
LABEL_10:
    CFRelease(v6);
LABEL_11:
  if (v7)
    CFRelease(v7);
  CFRelease(v5);
  if (v9)
    CFRelease(v9);
  return Copy;
}

uint64_t faf_mergeFilterCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v7;
  CFNumberRef v8;
  uint64_t valuePtr;

  if (!a2 || !a4)
    return FigSignalErrorAt();
  result = CFEqual(CFSTR("FAFProperty_CountOfChildFilters"), a2);
  if ((_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = faf_mergeFilterCountFilterAndItsChildren(*(_QWORD *)(DerivedStorage + 16));
    valuePtr = faf_mergeFilterCountFilterAndItsChildren(*(_QWORD *)(DerivedStorage + 24)) + v7;
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
    *a4 = v8;
    if (v8)
      return 0;
    else
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t faf_mergeFilterCountFilterAndItsChildren(uint64_t a1)
{
  uint64_t (*v2)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  int v3;
  CFNumberRef v4;
  uint64_t v5;
  uint64_t v7;
  CFNumberRef number;

  v7 = 0;
  number = 0;
  v2 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (!v2)
    return 1;
  v3 = v2(a1, CFSTR("FAFProperty_CountOfChildFilters"), *MEMORY[0x1E0C9AE00], &number);
  v4 = number;
  if (v3)
  {
    v5 = 1;
    if (!number)
      return v5;
    goto LABEL_4;
  }
  CFNumberGetValue(number, kCFNumberLongType, &v7);
  v4 = number;
  v5 = v7 + 1;
  if (number)
LABEL_4:
    CFRelease(v4);
  return v5;
}

uint64_t faf_mergeFilterName()
{
  return *(_QWORD *)CMBaseObjectGetDerivedStorage();
}

uint64_t faf_mergeFilterPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t faf_mergeFilterApply(uint64_t a1, const __CFArray *a2, CFTypeRef *a3)
{
  return faf_mergeFilterApplyReturningInfo(a1, a2, a3, 0);
}

uint64_t faf_mergeFilterApplyReturningInfo(uint64_t a1, const __CFArray *a2, CFTypeRef *a3, CFDataRef *a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  __CFSet *Mutable;
  CFMutableArrayRef v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFArray *, CFArrayRef *, CFTypeRef *);
  CFTypeRef *p_cf;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const __CFArray *, CFArrayRef *);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFArray *, CFArrayRef *, CFTypeRef *);
  CFTypeRef *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const __CFArray *, CFArrayRef *);
  int v22;
  CFIndex i;
  CFIndex Count;
  const void *ValueAtIndex;
  CFIndex j;
  CFIndex v27;
  const void *v28;
  __CFArray *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  __CFString *v34;
  const void *v35;
  const __CFArray *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  __CFString *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  __CFString *v43;
  CFDataRef v44;
  const __CFArray *v46;
  CFTypeRef v48;
  CFTypeRef cf;
  CFArrayRef v50;
  CFArrayRef theArray;

  v50 = 0;
  theArray = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v48 = 0;
  cf = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0CA3678]);
  if (!Mutable)
  {
    v16 = FigSignalErrorAt();
    v10 = 0;
    goto LABEL_84;
  }
  v10 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  if (!v10)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_84;
  }
  v11 = *(_QWORD *)(DerivedStorage + 16);
  v12 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
  if (v12)
  {
    if (a4)
      p_cf = &cf;
    else
      p_cf = 0;
    v14 = v12(v11, a2, &theArray, p_cf);
  }
  else
  {
    v15 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 24);
    if (!v15)
      goto LABEL_43;
    v14 = v15(v11, a2, &theArray);
  }
  v16 = v14;
  if ((_DWORD)v14)
  {
LABEL_84:
    v29 = 0;
    goto LABEL_67;
  }
  v17 = *(_QWORD *)(DerivedStorage + 24);
  v18 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
  if (!v18)
  {
    v21 = *(uint64_t (**)(uint64_t, const __CFArray *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 24);
    if (v21)
    {
      v20 = v21(v17, a2, &v50);
      goto LABEL_18;
    }
LABEL_43:
    v29 = 0;
    v16 = 4294954514;
    goto LABEL_67;
  }
  if (a4)
    v19 = &v48;
  else
    v19 = 0;
  v20 = v18(v17, a2, &v50, v19);
LABEL_18:
  v16 = v20;
  if ((_DWORD)v20)
    goto LABEL_84;
  v22 = *(_DWORD *)(DerivedStorage + 32);
  if ((v22 & 1) != 0)
  {
    if (!theArray || !CFArrayGetCount(theArray))
      goto LABEL_37;
    v22 = *(_DWORD *)(DerivedStorage + 32);
  }
  if ((v22 & 2) == 0 || v50 && CFArrayGetCount(v50))
  {
    for (i = 0; ; ++i)
    {
      Count = (CFIndex)theArray;
      if (theArray)
        Count = CFArrayGetCount(theArray);
      if (i >= Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      CFSetAddValue(Mutable, ValueAtIndex);
    }
    for (j = 0; ; ++j)
    {
      v27 = (CFIndex)v50;
      if (v50)
        v27 = CFArrayGetCount(v50);
      if (j >= v27)
        break;
      v28 = CFArrayGetValueAtIndex(v50, j);
      CFSetAddValue(Mutable, v28);
    }
    CFSetApplyFunction(Mutable, (CFSetApplierFunction)faf_mergeSetApplier, v10);
  }
LABEL_37:
  if (a4)
  {
    v29 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    if (!v29)
      goto LABEL_85;
    v30 = cf;
    if (!cf)
    {
      v46 = theArray;
      v31 = a2 ? CFArrayGetCount(a2) : 0;
      v32 = *(_QWORD *)(DerivedStorage + 16);
      v33 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      v34 = v33 ? (__CFString *)v33(v32) : &stru_1E2FD85F8;
      v30 = FigAlternateFilterApplyInfoCreate(v8, v46, v31, v34, 0);
      cf = v30;
      if (!v30)
        goto LABEL_85;
    }
    CFArrayAppendValue(v29, v30);
    v35 = v48;
    if (!v48)
    {
      v36 = v50;
      v37 = a2 ? CFArrayGetCount(a2) : 0;
      v38 = *(_QWORD *)(DerivedStorage + 24);
      v39 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      v40 = v39 ? (__CFString *)v39(v38) : &stru_1E2FD85F8;
      v35 = FigAlternateFilterApplyInfoCreate(v8, v36, v37, v40, 0);
      v48 = v35;
      if (!v35)
        goto LABEL_85;
    }
    CFArrayAppendValue(v29, v35);
    v41 = a2 ? CFArrayGetCount(a2) : 0;
    v42 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    v43 = v42 ? (__CFString *)v42(a1) : &stru_1E2FD85F8;
    v44 = FigAlternateFilterApplyInfoCreate(v8, v10, v41, v43, v29);
    *a4 = v44;
    if (!v44)
    {
LABEL_85:
      v16 = FigSignalErrorAt();
      goto LABEL_67;
    }
  }
  else
  {
    v29 = 0;
  }
  if (*a3)
    CFRelease(*a3);
  v16 = 0;
  *a3 = v10;
  v10 = 0;
LABEL_67:
  if (cf)
    CFRelease(cf);
  if (v48)
    CFRelease(v48);
  if (v29)
    CFRelease(v29);
  if (Mutable)
    CFRelease(Mutable);
  if (v50)
    CFRelease(v50);
  if (theArray)
    CFRelease(theArray);
  if (v10)
    CFRelease(v10);
  return v16;
}

void faf_mergeSetApplier(void *value, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, value);
}

uint64_t fhaf_finalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
  return FigSimpleMutexDestroy();
}

CFStringRef fhaf_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  uint64_t (*v4)(uint64_t);
  const __CFString *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  const __CFString *StringFromHDCPState;
  const __CFString *v9;
  CFStringRef v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    v5 = (const __CFString *)v4(a1);
  else
    v5 = &stru_1E2FD85F8;
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    v7 = v6(a1);
  else
    v7 = 0xFFFFFFFFLL;
  StringFromHDCPState = FigAlternateGetStringFromHDCPState(*(_DWORD *)(DerivedStorage + 24));
  v9 = FigAlternateGetStringFromHDCPState(*(_DWORD *)(DerivedStorage + 28));
  v10 = CFStringCreateWithFormat(v3, 0, CFSTR("[FigHDCPAlternateFilter <%@: %p> priority: %d hdcp0:%@ hdcp1:%@]"), v5, a1, v7, StringFromHDCPState, v9);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  return v10;
}

const __CFString *fhaf_getName()
{
  return CFSTR("HDCP");
}

uint64_t fhaf_getPriority()
{
  return 879;
}

uint64_t faf_HDCPAlternateFilterApply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  const void *v6;
  const __CFAllocator *v7;
  CFMutableArrayRef MutableCopy;
  __CFArray *v9;
  CFIndex v10;
  char v11;
  char v12;
  const void *ValueAtIndex;
  int HDCPLevel;
  BOOL v15;
  BOOL v16;
  int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  CFIndex Count;
  unint64_t v22;
  const void *v23;
  const __CFAllocator *v24;
  uint64_t v25;
  const __CFAllocator *v26;

  CMBaseObjectGetDerivedStorage();
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a2 && (v7 = CFGetAllocator(a1), (MutableCopy = CFArrayCreateMutableCopy(v7, 0, a2)) != 0))
  {
    v9 = MutableCopy;
    if (CFArrayGetCount(a2) < 1)
    {
      v12 = 0;
      v11 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v10);
        HDCPLevel = FigAlternateGetHDCPLevel((uint64_t)ValueAtIndex);
        if (!HDCPLevel)
          v11 = 1;
        if (HDCPLevel == 1)
          v12 = 1;
        if (v11)
          v15 = v12 == 0;
        else
          v15 = 1;
        if (!v15)
          break;
        ++v10;
      }
      while (v10 < CFArrayGetCount(a2));
    }
    if (v11 | v12)
      v16 = v6 == 0;
    else
      v16 = 1;
    if (!v16)
    {
      v17 = -1;
      if (v12)
      {
        if (faf_getHDCPState((uint64_t)a1, 1) > 1)
          v17 = -1;
        else
          v17 = 1;
      }
      if (v11 && v17 < 0)
      {
        if (faf_getHDCPState((uint64_t)a1, 0) <= 1)
          v17 = 0;
        else
          v17 = -1;
      }
      if (v11)
        v18 = v17 < 0;
      else
        v18 = 0;
      v19 = v18;
      v20 = v17 >= 1 || v12 == 0;
      if (!v20 || v19)
      {
        Count = CFArrayGetCount(a2);
        if (Count >= 1)
        {
          v22 = Count + 1;
          do
          {
            v23 = CFArrayGetValueAtIndex(a2, v22 - 2);
            if ((int)FigAlternateGetHDCPLevel((uint64_t)v23) > v17)
              CFArrayRemoveValueAtIndex(v9, v22 - 2);
            --v22;
          }
          while (v22 > 1);
        }
      }
    }
    while (1)
    {
LABEL_47:
      if (v9)
      {
        if (CFArrayGetCount(v9))
          break;
        CFRelease(v9);
      }
      v24 = CFGetAllocator(a1);
      v9 = faf_copyMinimumAlternatesFromArray(v24, a2, (uint64_t)faf_HDCPAlternateMinSortingFn, 0);
      if (v9)
        break;
      v25 = FigSignalErrorAt();
      if ((_DWORD)v25)
        goto LABEL_56;
    }
    if (*a3)
      CFRelease(*a3);
    v26 = CFGetAllocator(a1);
    *a3 = CFArrayCreateCopy(v26, v9);
    CFRelease(v9);
    v25 = 0;
  }
  else
  {
    v25 = FigSignalErrorAt();
    if (!(_DWORD)v25)
    {
      v9 = 0;
      goto LABEL_47;
    }
  }
LABEL_56:
  if (v6)
    CFRelease(v6);
  return v25;
}

uint64_t faf_getHDCPState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  if (a2 == 1)
  {
    v4 = *(unsigned int *)(DerivedStorage + 28);
    if ((_DWORD)v4 == -2)
    {
      v5 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v5)
      {
        v6 = (const void *)v5;
        v4 = (*(uint64_t (**)(uint64_t, uint64_t))(DerivedStorage + 16))(1, v5);
        *(_DWORD *)(DerivedStorage + 28) = v4;
LABEL_8:
        CFRelease(v6);
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else
  {
    v4 = *(unsigned int *)(DerivedStorage + 24);
    if ((_DWORD)v4 == -2)
    {
      v7 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v7)
      {
        v6 = (const void *)v7;
        v4 = (*(uint64_t (**)(_QWORD, uint64_t))(DerivedStorage + 8))(0, v7);
        *(_DWORD *)(DerivedStorage + 24) = v4;
        goto LABEL_8;
      }
LABEL_9:
      v4 = 4294967294;
    }
  }
LABEL_10:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  return v4;
}

uint64_t faf_HDCPAlternateMinSortingFn(uint64_t a1, uint64_t a2)
{
  int HDCPLevel;
  int v4;
  uint64_t v5;

  HDCPLevel = FigAlternateGetHDCPLevel(a1);
  v4 = FigAlternateGetHDCPLevel(a2);
  if (HDCPLevel >= v4)
    v5 = 0;
  else
    v5 = -1;
  if (HDCPLevel > v4)
    return 1;
  else
    return v5;
}

void fmsaaf_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

CFStringRef fmsaaf_copyDebugDescription(uint64_t a1)
{
  CFArrayRef *DerivedStorage;
  __CFString *Mutable;
  CFIndex v3;
  const __CFAllocator *v4;
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  BOOL v8;
  uint64_t (*v9)(uint64_t);
  const __CFString *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  const __CFString *v13;
  CFStringRef v14;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  Mutable = 0;
  v3 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    Count = *DerivedStorage;
    if (*DerivedStorage)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v3 >= (uint64_t)Count)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*DerivedStorage, v3);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
    FigGetCFStringForOSTypeValue();
    if (FigCFEqual())
      v8 = Value == 0;
    else
      v8 = 1;
    if (!v8)
    {
      if (Mutable)
        CFStringAppend(Mutable, CFSTR(","));
      else
        Mutable = CFStringCreateMutable(v4, 0);
      CFStringAppendFormat(Mutable, 0, CFSTR("%@"), Value);
    }
    ++v3;
  }
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v9)
    v10 = (const __CFString *)v9(a1);
  else
    v10 = &stru_1E2FD85F8;
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v11)
    v12 = v11(a1);
  else
    v12 = 0xFFFFFFFFLL;
  v13 = CFSTR("NULL");
  if (Mutable)
    v13 = Mutable;
  v14 = CFStringCreateWithFormat(v4, 0, CFSTR("[FigMediaSelectionAudibleAlternateFilter <%@: %p> priority: %d persistentIDs: %@]"), v10, a1, v12, v13);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

const __CFString *fmsaaf_getName()
{
  return CFSTR("MediaSelectionAudible");
}

uint64_t fmsaaf_getPriority()
{
  return 950;
}

uint64_t faf_mediaSelectionAudibleAlternateFilterApply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  CFArrayRef *v7;
  const __CFAllocator *v8;
  CFMutableArrayRef MutableCopy;
  __CFArray *v10;
  CFIndex i;
  const __CFArray *Count;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  BOOL v15;
  CFIndex v16;
  unint64_t v17;
  const void *v18;
  const __CFDictionary *AudioGroupLocatorMap;
  const __CFAllocator *v20;
  uint64_t result;
  const void *v22;
  CFTypeRef *v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (v7 = (CFArrayRef *)DerivedStorage,
        v8 = CFGetAllocator(a1),
        (MutableCopy = CFArrayCreateMutableCopy(v8, 0, a2)) != 0))
  {
    v10 = MutableCopy;
    v22 = a1;
    v23 = a3;
    for (i = 0; ; ++i)
    {
      Count = *v7;
      if (*v7)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*v7, i);
      CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsPersistentID"));
      FigGetCFStringForOSTypeValue();
      if (FigCFEqual())
        v15 = Value == 0;
      else
        v15 = 1;
      if (!v15)
      {
        v16 = CFArrayGetCount(a2);
        if (v16 >= 1)
        {
          v17 = v16 + 1;
          do
          {
            v18 = CFArrayGetValueAtIndex(a2, v17 - 2);
            AudioGroupLocatorMap = (const __CFDictionary *)FigAlternateGetAudioGroupLocatorMap((uint64_t)v18);
            if (!FigAlternateIsIFrameOnly((uint64_t)v18)
              && AudioGroupLocatorMap
              && !CFDictionaryContainsKey(AudioGroupLocatorMap, Value))
            {
              CFArrayRemoveValueAtIndex(v10, v17 - 2);
            }
            --v17;
          }
          while (v17 > 1);
        }
      }
    }
    a1 = v22;
    a3 = v23;
  }
  else
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    v10 = 0;
  }
  if (*a3)
    CFRelease(*a3);
  v20 = CFGetAllocator(a1);
  *a3 = CFArrayCreateCopy(v20, v10);
  if (v10)
    CFRelease(v10);
  return 0;
}

uint64_t fsaf_filterFnNoContext(uint64_t a1, CFDataRef theData)
{
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))CFDataGetBytePtr(theData);
  return v3(a1);
}

uint64_t fsaf_ComparatorFnNoContext(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD);

  v5 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))*((_QWORD *)CFDataGetBytePtr(theData) + 1);
  return v5(a1, a2, 0);
}

uint64_t faf_isMediaSelectionOptionOfflinePlayable(uint64_t a1, uint64_t a2, int a3)
{
  CFTypeRef v4;
  const void *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  uint64_t v8;
  const __CFURL *v10;
  void *value;
  CFRange v12;
  CFRange v13;

  v10 = 0;
  value = 0;
  FigAlternateGetRenditionInfoForMediaType(a2, a3, *(const void **)(a1 + 16), *(const void **)(a1 + 24), *(const void **)(a1 + 32), 1, (const __CFDictionary **)&value, 0, &v10);
  v4 = FigCFHTTPCreateURLString(v10);
  if (!v4)
    return 0;
  v5 = v4;
  if (value)
  {
    v6 = *(const __CFArray **)(a1 + 8);
    if (v6)
    {
      v12.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
      v12.location = 0;
      LODWORD(v6) = CFArrayContainsValue(v6, v12, value);
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  v7 = *(const __CFArray **)a1;
  v13.length = CFArrayGetCount(v7);
  v13.location = 0;
  v8 = CFArrayContainsValue(v7, v13, v5) | v6;
  CFRelease(v5);
  return v8;
}

uint64_t faf_videoRangePreferenceComparator(unsigned int a1, unsigned int a2)
{
  uint64_t v2;

  if (a1 >= a2)
    v2 = 0;
  else
    v2 = -1;
  if (a1 > a2)
    return 1;
  else
    return v2;
}

uint64_t faf_videoFormatPreferenceExactMatchComparator(unsigned int a1, unsigned int a2)
{
  uint64_t v2;

  if (a1 >= a2)
    v2 = 0;
  else
    v2 = -1;
  if (a1 > a2)
    return 1;
  else
    return v2;
}

uint64_t faf_videoFormatPreferenceFilterMinSortingFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  unsigned int *BytePtr;
  unsigned int v6;
  uint64_t v7;
  unsigned int VideoRange;
  unsigned int v9;
  unsigned int BestVideoFormat;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v18)(unsigned int, unsigned int);
  uint64_t v19;
  uint64_t v20;
  unsigned int BestSupplementalVideoFormat;
  unsigned int v22;
  uint64_t v23;

  BytePtr = (unsigned int *)CFDataGetBytePtr(theData);
  v6 = *BytePtr;
  v7 = BytePtr[1];
  VideoRange = FigAlternateGetVideoRange(a1);
  v9 = FigAlternateGetVideoRange(a2);
  BestVideoFormat = FigAlternateGetBestVideoFormat(a1);
  v11 = FigAlternateGetBestVideoFormat(a2);
  v12 = VideoRange;
  v13 = v9;
  v14 = faf_videoRangePreferenceComparator(v12, v9);
  if (v14)
  {
    v15 = v14;
    if (faf_videoRangePreferenceComparator(v6, v12) == -1)
    {
      v16 = -v15;
    }
    else if (faf_videoRangePreferenceComparator(v6, v13) == -1)
    {
      v16 = 1;
    }
    else
    {
      v16 = v15;
    }
  }
  else
  {
    v16 = 0;
    if ((_DWORD)v7)
    {
      if ((_DWORD)v7 == v11 || (_DWORD)v7 == BestVideoFormat)
      {
        v18 = faf_videoFormatPreferenceExactMatchComparator;
        v19 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))faf_videoFormatPreferenceExactMatchComparator)(BestVideoFormat, v11, 0);
      }
      else
      {
        v18 = faf_videoFormatPreferenceMixableMatchComparator;
        v19 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD))faf_videoFormatPreferenceMixableMatchComparator)(BestVideoFormat, v11, 0);
      }
      if (v19)
      {
        v20 = v19;
        if (((uint64_t (*)(uint64_t, _QWORD, _QWORD))v18)(v7, BestVideoFormat, 0) == -1)
        {
          v16 = -v20;
        }
        else if (((uint64_t (*)(uint64_t, _QWORD, _QWORD))v18)(v7, v11, 0) == -1)
        {
          v16 = 1;
        }
        else
        {
          v16 = v20;
        }
      }
      else
      {
        BestSupplementalVideoFormat = FigAlternateGetBestSupplementalVideoFormat(a1);
        v22 = FigAlternateGetBestSupplementalVideoFormat(a2);
        v23 = 1;
        if (BestSupplementalVideoFormat <= v22)
          v23 = -1;
        if (BestSupplementalVideoFormat == v22 || v6 != 3 || BestVideoFormat - 3 >= 3)
          v16 = 0;
        else
          v16 = v23;
      }
    }
  }
  return -v16;
}

uint64_t faf_videoFormatPreferenceMixableMatchComparator(unsigned int a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;

  if (a1 - 6 >= 0xFFFFFFFB)
    v2 = 6;
  else
    v2 = a1;
  if (v2 >= a2)
    v3 = 0;
  else
    v3 = -1;
  if (v2 > a2)
    v3 = 1;
  if (v2 == 6 && a2 - 6 >= 0xFFFFFFFB)
    return 0;
  else
    return v3;
}

uint64_t faf_alternateVideoVertResolutionBucket(uint64_t a1)
{
  double Resolution;
  double v2;
  uint64_t result;

  Resolution = FigAlternateGetResolution(a1);
  if (v2 * Resolution <= 0.0)
    return -1;
  for (result = 0; result != 7; ++result)
  {
    if (v2 <= (double)kFigAlternateVertResolutionLimits[result])
      break;
  }
  return result;
}

uint64_t faf_videoRangeMinSortingFn(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int VideoRange;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  VideoRange = FigAlternateGetVideoRange(a1);
  v6 = FigAlternateGetVideoRange(a2);
  v7 = *a3;
  v8 = faf_videoRangePreferenceComparator(VideoRange, v6);
  if (v8)
  {
    if (faf_videoRangePreferenceComparator(v7, VideoRange) == -1)
    {
      v8 = -v8;
    }
    else if (faf_videoRangePreferenceComparator(v7, v6) == -1)
    {
      v8 = 1;
    }
  }
  return -v8;
}

uint64_t faf_populateAudioFormatAlternateComparatorRec(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;

  faf_getAlternateAudioFormatInfo(a1, a2, (int *)a3, (_DWORD *)(a3 + 4), (_DWORD *)(a3 + 8), (double *)(a3 + 16));
  *(_BYTE *)(a3 + 12) = FigAlternateHasLosslessAudio(a1) == 0;
  result = FigAlternateGetAlternateIndex(a1);
  *(_DWORD *)(a3 + 24) = result;
  return result;
}

uint64_t faf_audioFormatPreferenceComparator(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  double v24;
  double v25;
  int *v26;
  double v27;
  double *v28;
  int v30;
  int v31;

  if (*(_DWORD *)a1 <= 1u)
    v3 = 1;
  else
    v3 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 <= 1u)
    v4 = 1;
  else
    v4 = *(_DWORD *)a2;
  v5 = a3[3];
  v6 = BYTE2(v5);
  v7 = BYTE1(v5);
  switch(v3)
  {
    case 7:
      v8 = BYTE2(v5);
      break;
    case 6:
      v8 = BYTE1(v5);
      break;
    case 5:
      v8 = a3[3];
      break;
    default:
      v8 = 0;
      break;
  }
  if (v4 == 5)
    v9 = a3[3];
  else
    v9 = 0;
  if (v4 == 6)
    v9 = BYTE1(v5);
  if (v4 == 7)
    v9 = BYTE2(v5);
  if (v3 != v4)
  {
    v10 = *a3;
    if (*a3 <= 8)
    {
      if (v10 == v3)
        return 1;
      if (v10 == v4)
        return -1;
    }
  }
  if (v8 | v9)
  {
    v11 = HIBYTE(v5);
    if (!v8 || v9)
    {
      if (v8 || !v9)
      {
        if (v8 && v9)
        {
          if (a3[3])
            v12 = 6;
          else
            v12 = 0;
          if (v7)
            v13 = 8;
          else
            v13 = v12;
          if (v6)
            v14 = 16;
          else
            v14 = v13;
          v15 = *(_DWORD *)(a1 + 4);
          v16 = *(_DWORD *)(a2 + 4);
          if (v15 > v16)
          {
            v17 = v16 < v14;
LABEL_55:
            v20 = 1;
            goto LABEL_71;
          }
          if (v15 < v16)
          {
            v17 = v15 < v14;
            goto LABEL_70;
          }
          goto LABEL_80;
        }
      }
      else if (v11 || *(_DWORD *)(a2 + 4) > a3[1])
      {
        return -1;
      }
    }
    else if (v11 || *(_DWORD *)(a1 + 4) > a3[1])
    {
      return 1;
    }
  }
  v18 = *(_DWORD *)(a1 + 8);
  v19 = *(_DWORD *)(a2 + 8);
  if (v18 < v19)
    return 1;
  if (v18 > v19)
    return -1;
  v21 = *(_DWORD *)(a1 + 4);
  v22 = *(_DWORD *)(a2 + 4);
  if (v21 > v22)
  {
    v17 = v22 < a3[1];
    goto LABEL_55;
  }
  if (v21 < v22)
  {
    v17 = v21 < a3[1];
LABEL_70:
    v20 = -1;
LABEL_71:
    if (!v17)
      return -v20;
    return v20;
  }
  if (*((_BYTE *)a3 + 16) && *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12))
  {
    v20 = -1;
    if (*(_BYTE *)(a1 + 12))
      return 1;
  }
  else
  {
    v23 = *((_QWORD *)a3 + 5);
    if (v23 < 1 || (v24 = *(double *)(a1 + 16), v25 = *(double *)(a2 + 16), v24 == v25))
    {
LABEL_80:
      if (v3 == v4)
        return 0;
LABEL_91:
      v30 = *(_DWORD *)(a1 + 24);
      v31 = *(_DWORD *)(a2 + 24);
      v17 = v30 <= v31;
      v20 = v30 < v31;
      if (!v17)
        return -1;
      return v20;
    }
    v26 = &a3[4 * v23];
    v27 = *((double *)v26 + 5);
    if ((unint64_t)v23 >= 2)
    {
      v28 = (double *)(v26 + 10);
      while (v21 > *((_DWORD *)v28 - 2))
      {
        v28 -= 2;
        v17 = v23-- <= 1;
        if (v17)
          goto LABEL_78;
      }
      v27 = *v28;
    }
LABEL_78:
    if (v25 > v27 != v24 <= v27)
    {
      if (v24 <= v27)
        goto LABEL_80;
      if (v24 < v25)
        return 1;
      if (v24 <= v25)
        v20 = 0;
      else
        v20 = -1;
      if (v3 != v4 && v24 <= v25)
        goto LABEL_91;
    }
    else
    {
      v20 = -1;
      if (v24 <= v27)
        return 1;
    }
  }
  return v20;
}

uint64_t faf_audioFormatPreferenceFilterMinSortingFn(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  int *BytePtr;
  _OWORD v7[2];
  _OWORD v8[2];

  BytePtr = (int *)CFDataGetBytePtr(theData);
  memset(v8, 0, sizeof(v8));
  memset(v7, 0, sizeof(v7));
  faf_populateAudioFormatAlternateComparatorRec(a1, BytePtr[2], (uint64_t)v8);
  faf_populateAudioFormatAlternateComparatorRec(a2, BytePtr[2], (uint64_t)v7);
  return -faf_audioFormatPreferenceComparator((uint64_t)v8, (uint64_t)v7, BytePtr);
}

void faf_getAlternateAudioFormatInfo(uint64_t a1, int a2, int *a3, _DWORD *a4, _DWORD *a5, double *a6)
{
  CFNumberRef v11;
  _BOOL4 BestAudioFormat;
  int v13;
  int valuePtr;

  valuePtr = a2;
  if (a2 < 0)
    v11 = 0;
  else
    v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  BestAudioFormat = FigAlternateGetBestAudioFormat(a1);
  v13 = (BestAudioFormat - 1) < 4 || BestAudioFormat;
  *a3 = v13;
  *a4 = FigAlternateGetAudioChannelCounts(a1, (uint64_t)v11, a5, 0);
  if (a6)
    *a6 = FigAlternateGetAudioSampleRate(a1, v11);
  if (v11)
    CFRelease(v11);
}

uint64_t faf_GetImmersiveAudioCapability(uint64_t a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  CFNumberRef v4;
  uint64_t ImmersiveAudioCapability;

  BytePtr = CFDataGetBytePtr(theData);
  if ((*(_DWORD *)BytePtr & 0x80000000) != 0)
    return FigAlternateGetImmersiveAudioCapability(a1, 0);
  v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, BytePtr);
  ImmersiveAudioCapability = FigAlternateGetImmersiveAudioCapability(a1, (uint64_t)v4);
  if (v4)
    CFRelease(v4);
  return ImmersiveAudioCapability;
}

uint64_t faf_ImmersiveAudioComparator(uint64_t a1, uint64_t a2, CFDataRef theData)
{
  const UInt8 *BytePtr;
  int ImmersiveAudioCapability;
  int v8;
  BOOL v9;
  uint64_t v10;

  BytePtr = CFDataGetBytePtr(theData);
  ImmersiveAudioCapability = faf_GetImmersiveAudioCapability(a1, theData);
  v8 = faf_GetImmersiveAudioCapability(a2, theData);
  if (ImmersiveAudioCapability >= v8)
  {
    if (ImmersiveAudioCapability <= v8)
      return 0;
    v9 = ImmersiveAudioCapability <= *((_DWORD *)BytePtr + 6);
    v10 = -1;
  }
  else
  {
    v9 = v8 <= *((_DWORD *)BytePtr + 6);
    v10 = 1;
  }
  if (v9)
    return -v10;
  else
    return v10;
}

void faf_defaultAudioPreferenceFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

CFStringRef faf_defaultAudioPreferenceCopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  uint64_t (*v3)(uint64_t);
  const __CFString *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v3)
    v4 = (const __CFString *)v3(a1);
  else
    v4 = &stru_1E2FD85F8;
  v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v5)
    v6 = v5(a1);
  else
    v6 = 0xFFFFFFFFLL;
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigAlternateFilter <%@: %p> priority: %d]"), v4, a1, v6);
}

const __CFString *faf_defaultAudioPreferenceGetName()
{
  return CFSTR("DefaultAudioLayoutPreference");
}

uint64_t faf_defaultAudioPreferenceGetPriority()
{
  return 750;
}

uint64_t faf_defaultAudioPreferenceApply(const void *a1, const __CFArray *a2, CFTypeRef *a3)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v7;
  const __CFArray *Mutable;
  __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  int v13;
  const void *ValueAtIndex;
  unsigned int v15;
  CFIndex i;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t (*v21)(const void *, const __CFArray *, CFArrayRef *);
  uint64_t v22;
  const __CFAllocator *v23;
  int v25;
  const void *v26;
  CFArrayRef theArray;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v26 = 0;
  v25 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  theArray = Mutable;
  if (Mutable)
  {
    v9 = Mutable;
    Count = CFArrayGetCount(a2);
    if (Count < 1)
      goto LABEL_19;
    v11 = Count;
    v12 = 0;
    v13 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
      if (!FigAlternateHasVideo((uint64_t)ValueAtIndex)
        || FigAlternateHasAudio(ValueAtIndex))
      {
        v15 = FigAlternateGetAudioChannelCount((uint64_t)ValueAtIndex, *DerivedStorage, &v25) - 1;
        if ((v25 & 6) == 0 && v15 <= 1)
        {
          CFArrayAppendValue(v9, ValueAtIndex);
          v13 = 1;
        }
      }
      ++v12;
    }
    while (v11 != v12);
    for (i = 0; i != v11; ++i)
    {
      v18 = CFArrayGetValueAtIndex(a2, i);
      if (FigAlternateHasVideo((uint64_t)v18) && !FigAlternateHasAudio(v18))
        CFArrayAppendValue(v9, v18);
    }
    if (v13)
    {
      v19 = 0;
    }
    else
    {
LABEL_19:
      CFRelease(v9);
      theArray = 0;
      v20 = FigAlternatePreferredAudioFormatFilterCreate(v7, 7u, 0, 0, 0, (CFNumberRef)*DerivedStorage, 0, &v26);
      v19 = v26;
      if ((_DWORD)v20)
      {
        v22 = v20;
        goto LABEL_26;
      }
      v21 = *(uint64_t (**)(const void *, const __CFArray *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 24);
      if (!v21)
      {
        v22 = 4294954514;
        goto LABEL_26;
      }
      v22 = v21(v19, a2, &theArray);
      if ((_DWORD)v22)
        goto LABEL_26;
    }
  }
  else
  {
    v22 = FigSignalErrorAt();
    v19 = 0;
    if ((_DWORD)v22)
      goto LABEL_26;
  }
  if (*a3)
    CFRelease(*a3);
  v23 = CFGetAllocator(a1);
  v22 = 0;
  *a3 = CFArrayCreateCopy(v23, theArray);
LABEL_26:
  if (v19)
    CFRelease(v19);
  if (theArray)
    CFRelease(theArray);
  return v22;
}

uint64_t faf_willRequire4K60Decode(uint64_t a1)
{
  uint64_t result;
  double FrameRate;
  _BOOL4 v4;
  _BOOL4 v5;

  if (FigAlternateIsIFrameOnly(a1) || FigAlternateIsAudioOnly(a1))
    return 0;
  result = FigAlternateIs4k(a1);
  if ((_DWORD)result)
  {
    FrameRate = FigAlternateGetFrameRate(a1);
    result = FigFrameRateToFrameRateBucket(FrameRate);
    if ((_DWORD)result)
    {
      if (FigAlternateHasVideoFormat(a1, 4))
        v4 = 1;
      else
        v4 = FigAlternateHasVideoFormat(a1, 7) != 0;
      if (FigAlternateHasVideoFormat(a1, 5))
        v5 = 1;
      else
        v5 = FigAlternateHasVideoFormat(a1, 8) != 0;
      return v5 | v4;
    }
  }
  return result;
}

BOOL faf_peakBitRateCapFilterFn(uint64_t a1, const __CFNumber *a2)
{
  int PeakBitRate;
  int valuePtr;

  valuePtr = 0;
  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr);
  return PeakBitRate <= valuePtr;
}

uint64_t faf_peakBitRateCapComparatorFn(uint64_t a1, uint64_t a2)
{
  int PeakBitRate;
  int v4;
  uint64_t v5;

  PeakBitRate = FigAlternateGetPeakBitRate(a1);
  v4 = FigAlternateGetPeakBitRate(a2);
  if (PeakBitRate >= v4)
    v5 = 0;
  else
    v5 = -1;
  if (PeakBitRate > v4)
    return 1;
  else
    return v5;
}

CFStringRef faf_copyPeakBitRateCapDescAddendum(int a1, CFNumberRef number)
{
  unsigned int valuePtr;

  valuePtr = 0;
  CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d bps"), valuePtr);
}

uint64_t faf_isAlternateInDenyList(const void *a1, const __CFArray *a2, uint64_t *a3)
{
  uint64_t result;
  CFRange v7;

  result = FigCFArrayContainsValue();
  if (a3)
  {
    if ((_DWORD)result)
    {
      v7.length = CFArrayGetCount(a2);
      v7.location = 0;
      result = CFArrayGetLastIndexOfValue(a2, v7, a1);
      *a3 = result;
    }
  }
  return result;
}

uint64_t faf_sameBitrateComparatorFn(uint64_t a1, uint64_t a2)
{
  double RankingScore;
  double v5;
  BOOL v6;
  uint64_t result;
  int AlternateIndex;
  int v9;
  uint64_t v10;

  RankingScore = FigAlternateGetRankingScore(a1);
  v5 = FigAlternateGetRankingScore(a2);
  v6 = RankingScore == -1.0 || v5 == -1.0;
  if (v6 || (RankingScore > v5 ? (result = -1) : (result = RankingScore < v5), !result))
  {
    AlternateIndex = FigAlternateGetAlternateIndex(a1);
    v9 = FigAlternateGetAlternateIndex(a2);
    if (AlternateIndex >= v9)
      v10 = 0;
    else
      v10 = -1;
    if (AlternateIndex > v9)
      return 1;
    else
      return v10;
  }
  return result;
}

uint64_t faf_CombinedAudioPreferenceAlternateFilterForChannels(uint64_t a1, signed int a2, const void *a3, CFTypeRef *a4)
{
  const __CFAllocator *v8;
  uint64_t inserted;
  const void *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;
  CFTypeRef v15;
  const void *v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cf;
  CFTypeRef v20;

  cf = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v15 = 0;
  v16 = 0;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  inserted = FigAlternateFilterTreeCreate(*MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)inserted)
    goto LABEL_34;
  if (!cf)
  {
    inserted = FigSignalErrorAt();
LABEL_34:
    v13 = inserted;
    v10 = 0;
    goto LABEL_20;
  }
  inserted = FigAlternateEligibleLosslessAudioFilterCreate(v8, *(const void **)(a1 + 16), &v15);
  if ((_DWORD)inserted)
    goto LABEL_34;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v15, 510);
  if ((_DWORD)inserted)
    goto LABEL_34;
  inserted = FigAlternateImmersiveAudioPreferenceFilterCreate(v8, *(CFNumberRef *)(a1 + 16), 1, -1, 0, &v18);
  if ((_DWORD)inserted)
    goto LABEL_34;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v18, 500);
  if ((_DWORD)inserted)
    goto LABEL_34;
  inserted = FigAlternatePreferredAudioFormatFilterCreate(v8, *(_DWORD *)(a1 + 4), a2, *(const __CFDictionary **)(a1 + 24), *(_BYTE *)(a1 + 36), *(CFNumberRef *)(a1 + 16), *(_DWORD *)(a1 + 32), &v17);
  if ((_DWORD)inserted)
    goto LABEL_34;
  inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v17, 490);
  if ((_DWORD)inserted)
    goto LABEL_34;
  if (a2 < 3)
  {
    v10 = 0;
    if (!a3)
      goto LABEL_15;
    goto LABEL_14;
  }
  FigAlternateMultichannelAudioFilterCreate(v8, *(CFNumberRef *)(a1 + 16), 1, 1, &v16);
  v10 = v16;
  v11 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v16, 480);
  if ((_DWORD)v11)
    goto LABEL_35;
  if (a3)
  {
LABEL_14:
    v11 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)cf, a3);
    if (!(_DWORD)v11)
      goto LABEL_15;
LABEL_35:
    v13 = v11;
    goto LABEL_20;
  }
LABEL_15:
  if (a2 <= 2)
    v12 = CFSTR("StereoAudioFilterTree");
  else
    v12 = CFSTR("DiscreteMultichannelAudioFilterTree");
  v13 = FigAlternateFilterTreeCreateFilter(cf, v12, 760, &v20);
  if (!(_DWORD)v13)
  {
    *a4 = v20;
    v20 = 0;
  }
LABEL_20:
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  if (v10)
    CFRelease(v10);
  if (v15)
    CFRelease(v15);
  return v13;
}

void faf_passthroughFilterFinalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  NSObject *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  v1 = (const void *)DerivedStorage[2];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[4];
  if (v2)
    CFRelease(v2);
  v3 = DerivedStorage[3];
  if (v3)
    dispatch_release(v3);
}

CFStringRef faf_passthroughFilterCopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const __CFArray *v3;
  CFIndex Count;
  const __CFAllocator *v5;
  uint64_t (*v6)(uint64_t);
  const __CFString *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v3 = (const __CFArray *)DerivedStorage[4];
  if (v3)
    Count = CFArrayGetCount(v3);
  else
    Count = 0;
  MEMORY[0x19402EA24](*DerivedStorage);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    v7 = (const __CFString *)v6(a1);
  else
    v7 = &stru_1E2FD85F8;
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v8)
    v9 = v8(a1);
  else
    v9 = 0xFFFFFFFFLL;
  return CFStringCreateWithFormat(v5, 0, CFSTR("[PassthroughFilter <%@: %p> priority: %d Total Alternate %ld]"), v7, a1, v9, Count);
}

uint64_t faf_passthroughFilterCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef *a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v7;
  const __CFArray *v8;
  CFArrayRef Copy;
  uint64_t v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    v7 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (FigCFEqual())
    {
      v8 = (const __CFArray *)v7[4];
      if (v8)
      {
        Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8);
        if (!Copy)
        {
          v10 = FigSignalErrorAt();
LABEL_10:
          MEMORY[0x19402EA24](*v7);
          return v10;
        }
      }
      else
      {
        Copy = 0;
      }
      v10 = 0;
      *a4 = Copy;
      goto LABEL_10;
    }
    v10 = 4294954512;
    goto LABEL_10;
  }
  return FigSignalErrorAt();
}

uint64_t faf_passthroughFilterGetName()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

uint64_t faf_passthroughFilterGetPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t faf_passthroughFilterApply(uint64_t a1, const __CFArray *a2, CFArrayRef *a3)
{
  _QWORD *DerivedStorage;
  CFAllocatorRef *v6;
  CFArrayRef Copy;
  uint64_t v8;
  int v9;
  const void *v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v6 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a2)
  {
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    if (!Copy)
    {
      v8 = FigSignalErrorAt();
      goto LABEL_12;
    }
  }
  else
  {
    Copy = 0;
  }
  v9 = FigCFEqual();
  v10 = (const void *)DerivedStorage[4];
  DerivedStorage[4] = Copy;
  if (Copy)
    CFRetain(Copy);
  if (v10)
    CFRelease(v10);
  if (!v9)
  {
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  v8 = 0;
LABEL_12:
  MEMORY[0x19402EA24](*DerivedStorage);
  if (a3)
    *a3 = CFArrayCreateCopy(*v6, a2);
  if (Copy)
    CFRelease(Copy);
  return v8;
}

BOOL fivp_filterFn(__CFArray *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const UInt8 *v4;
  uint64_t v5;
  const __CFArray *v6;
  BOOL v7;
  int IsAudioOnly;
  uint64_t AlternatePlayableAtPreferenceForChannelCapability;
  _BOOL4 v10;

  BytePtr = CFDataGetBytePtr(theData);
  v4 = BytePtr;
  v5 = *((_QWORD *)BytePtr + 1);
  if (v5 == 0xFFFFFFFFLL)
    v5 = *((_QWORD *)BytePtr + 2);
  v6 = *(const __CFArray **)BytePtr;
  if (!*(_QWORD *)v4 || (CFArrayGetCount(v6) ? (v7 = v5 == 0xFFFFFFFFLL) : (v7 = 1), v7))
  {
    v10 = 0;
    IsAudioOnly = 1;
  }
  else
  {
    IsAudioOnly = FigAlternateIsAudioOnly((uint64_t)a1);
    if (IsAudioOnly)
    {
      v10 = 0;
    }
    else
    {
      AlternatePlayableAtPreferenceForChannelCapability = fiv_getAlternatePlayableAtPreferenceForChannelCapability(a1, *(const __CFArray **)v4, *((_QWORD *)v4 + 3));
      IsAudioOnly = 0;
      v10 = AlternatePlayableAtPreferenceForChannelCapability == v5;
    }
  }
  return IsAudioOnly || v10;
}

const __CFArray *fivp_firstPassFn(__CFArray *a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  const __CFArray *result;
  uint64_t AlternatePlayableAtPreferenceForChannelCapability;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  BytePtr = CFDataGetBytePtr(theData);
  result = *(const __CFArray **)BytePtr;
  if (*(_QWORD *)BytePtr)
  {
    result = (const __CFArray *)CFArrayGetCount(result);
    if (result)
    {
      result = (const __CFArray *)FigAlternateIsAudioOnly((uint64_t)a1);
      if (!(_DWORD)result)
      {
        AlternatePlayableAtPreferenceForChannelCapability = fiv_getAlternatePlayableAtPreferenceForChannelCapability(a1, *(const __CFArray **)BytePtr, *((_QWORD *)BytePtr + 3));
        result = (const __CFArray *)FigAlternateIsIFrameOnly((uint64_t)a1);
        if ((_DWORD)result)
        {
          v8 = *((_QWORD *)BytePtr + 2);
          v7 = (uint64_t *)(BytePtr + 16);
          v6 = v8;
        }
        else
        {
          v9 = *((_QWORD *)BytePtr + 1);
          v7 = (uint64_t *)(BytePtr + 8);
          v6 = v9;
        }
        if (AlternatePlayableAtPreferenceForChannelCapability < v6)
          *v7 = AlternatePlayableAtPreferenceForChannelCapability;
      }
    }
  }
  return result;
}

__n128 fivp_filterInitFn(const __CFData *a1)
{
  const UInt8 *BytePtr;
  __n128 result;

  BytePtr = CFDataGetBytePtr(a1);
  result.n128_u64[0] = 0xFFFFFFFFLL;
  result.n128_u64[1] = 0xFFFFFFFFLL;
  *(__n128 *)(BytePtr + 8) = result;
  return result;
}

CFStringRef fivp_copyDescAddendum(int a1, CFDataRef theData)
{
  const UInt8 *BytePtr;
  uint64_t v3;
  const UInt8 *v4;
  const __CFArray *Count;
  const void *ValueAtIndex;
  __CFString *VideoLayoutLoggingStringFromCollection;
  CFStringRef v8;

  BytePtr = CFDataGetBytePtr(theData);
  v3 = *((_QWORD *)BytePtr + 1);
  if (v3 == 0xFFFFFFFFLL)
    goto LABEL_7;
  v4 = BytePtr;
  Count = *(const __CFArray **)BytePtr;
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if (v3 >= (uint64_t)Count)
  {
LABEL_7:
    VideoLayoutLoggingStringFromCollection = CFSTR("Passthru");
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("lowestplayable:%@"), CFSTR("Passthru"));
  }
  else
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v4, *((_QWORD *)v4 + 1));
    VideoLayoutLoggingStringFromCollection = FigAlternateCreateVideoLayoutLoggingStringFromCollection((uint64_t)ValueAtIndex);
    v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("lowestplayable:%@"), VideoLayoutLoggingStringFromCollection);
    if (!VideoLayoutLoggingStringFromCollection)
      return v8;
  }
  CFRelease(VideoLayoutLoggingStringFromCollection);
  return v8;
}

void fivp_deallocateContext(const void **ptr, CFAllocatorRef allocator)
{
  const void *v4;

  v4 = *ptr;
  if (v4)
    CFRelease(v4);
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t fiv_getAlternatePlayableAtPreferenceForChannelCapability(__CFArray *a1, const __CFArray *a2, CFIndex a3)
{
  __CFArray *VideoLayoutTags;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  CFIndex i;

  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  if (VideoLayoutTags)
  {
    v6 = VideoLayoutTags;
    if (CFArrayGetCount(VideoLayoutTags))
    {
      Count = CFArrayGetCount(v6);
      if (Count <= a3)
        v8 = Count - 1;
      else
        v8 = a3;
      CFArrayGetValueAtIndex(v6, v8);
      v9 = 0;
      if (!a2)
        goto LABEL_8;
LABEL_7:
      for (i = CFArrayGetCount(a2); v9 < i; i = 0)
      {
        CFArrayGetValueAtIndex(a2, v9);
        if (FigCFEqual())
          return v9;
        ++v9;
        if (a2)
          goto LABEL_7;
LABEL_8:
        ;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

BOOL faf_alternateHasOnlyStereoVideo(__CFArray *a1)
{
  __CFArray *VideoLayoutTags;
  CFIndex v2;
  _BOOL8 v3;
  uint64_t v4;
  CMTagValue v5;
  CFIndex v6;
  const OpaqueCMTagCollection *ValueAtIndex;
  CMItemCount numberOfTagsCopied;
  CMTag tagBuffer;
  CMTag v11;

  VideoLayoutTags = FigAlternateGetVideoLayoutTags(a1);
  v2 = 0;
  v3 = VideoLayoutTags != 0;
  v4 = *MEMORY[0x1E0CA5278];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA5278] + 8);
  while (1)
  {
    v6 = VideoLayoutTags ? CFArrayGetCount(VideoLayoutTags) : 0;
    if (v2 >= v6)
      break;
    ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(VideoLayoutTags, v2);
    *(_QWORD *)&tagBuffer.category = 0;
    tagBuffer.value = 0;
    numberOfTagsCopied = 0;
    CMTagCollectionGetTagsWithCategory(ValueAtIndex, kCMTagCategory_StereoView, &tagBuffer, 1, &numberOfTagsCopied);
    *(_QWORD *)&v11.category = v4;
    v11.value = v5;
    ++v2;
    if (!CMTagEqualToTag(tagBuffer, v11))
      return 0;
  }
  return v3;
}

uint64_t FigDataQueueRemoteSetupRemoteXPCClientIfNecessary(const __CFAllocator *a1, int a2, uint64_t (*a3)(uint64_t, CFTypeRef *), uint64_t a4)
{
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  uint64_t v10;
  _QWORD block[5];
  CFTypeRef cf;
  void *value;

  cf = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigDataQueueRemoteSetupRemoteXPCClientIfNecessary_block_invoke;
  block[3] = &__block_descriptor_tmp_28;
  block[4] = a1;
  if (FigDataQueueRemoteSetupRemoteXPCClientIfNecessary_sFigDataQueueRemoteXPCRemoteClientByPIDMutexRegisterOnce != -1)
    dispatch_once(&FigDataQueueRemoteSetupRemoteXPCClientIfNecessary_sFigDataQueueRemoteXPCRemoteClientByPIDMutexRegisterOnce, block);
  if (!gFigDataQueueRemoteXPCRemoteClientByPIDTable)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  value = (void *)CFDictionaryGetValue((CFDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, (const void *)a2);
  if (value)
  {
    v8 = 0;
  }
  else
  {
    v10 = a3(a4, &cf);
    if (!(_DWORD)v10)
    {
      Mutable = CFDictionaryCreateMutable(a1, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable || (FigCFDictionarySetInt32(), FigXPCRemoteClientCreateWithXPCEndpoint()))
      {
        v8 = FigSignalErrorAt();
      }
      else
      {
        CFDictionarySetValue((CFMutableDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, (const void *)a2, value);
        if (value)
          CFRelease(value);
        v8 = 0;
      }
      goto LABEL_13;
    }
    v8 = v10;
  }
  Mutable = 0;
LABEL_13:
  MEMORY[0x19402EF04](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v8;
}

uint64_t dqr_HandleRemoteMessagesFromServer()
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

uint64_t FigDataQueueRemoteCreateWithObjectID(int a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5, CMTime *a6, CFTypeRef *a7)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  const void *Value;
  uint64_t v19;
  CMTime time2;
  CMTime time1;
  CFTypeRef cf;

  cf = 0;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a7)
    goto LABEL_14;
  FigDataQueueGetClassID();
  v11 = CMDerivedObjectCreate();
  if ((_DWORD)v11)
  {
LABEL_15:
    v19 = v11;
    goto LABEL_16;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 24) = v13;
  if (!v13
    || (v14 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 64) = v14) == 0)
    || (a6->flags & 0x1D) == 1
    && (a5->flags & 0x1D) == 1
    && (time1 = *a6, time2 = *a5, CMTimeCompare(&time1, &time2) >= 1))
  {
LABEL_14:
    v11 = FigSignalErrorAt();
    goto LABEL_15;
  }
  v15 = *(_OWORD *)&a5->value;
  *(_QWORD *)(DerivedStorage + 88) = a5->epoch;
  *(_OWORD *)(DerivedStorage + 72) = v15;
  v16 = *(_OWORD *)&a6->value;
  *(_QWORD *)(DerivedStorage + 112) = a6->epoch;
  *(_OWORD *)(DerivedStorage + 96) = v16;
  v17 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 160) = v17;
  if (!v17)
  {
    v19 = 4294951505;
    goto LABEL_16;
  }
  MEMORY[0x19402EEEC](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  Value = CFDictionaryGetValue((CFDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, (const void *)a1);
  if (!Value)
  {
    *(_QWORD *)DerivedStorage = 0;
    *(_DWORD *)(DerivedStorage + 8) = a1;
    MEMORY[0x19402EF04](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
    goto LABEL_14;
  }
  *(_QWORD *)DerivedStorage = CFRetain(Value);
  *(_DWORD *)(DerivedStorage + 8) = a1;
  MEMORY[0x19402EF04](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  v11 = FigXPCRemoteClientAssociateObject();
  if ((_DWORD)v11)
    goto LABEL_15;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  *(_QWORD *)(DerivedStorage + 16) = a2;
  v19 = FigXPCRemoteClientCopyMemoryOrigin();
  if (!(_DWORD)v19)
  {
    *a7 = cf;
    return v19;
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
  return v19;
}

void dqr_HandleDeadServerConnection()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 176) = 1;
  MEMORY[0x19402EEEC](gFigDataQueueRemoteXPCRemoteClientByPIDMutex);
  v1 = (const void *)*(int *)(DerivedStorage + 8);
  if ((_DWORD)v1)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigDataQueueRemoteXPCRemoteClientByPIDTable, v1);
    *(_DWORD *)(DerivedStorage + 8) = 0;
  }
  JUMPOUT(0x19402EF04);
}

uint64_t FigDataQueueRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t dqr_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 32);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 152);
  if (v5)
  {
    FigSyncMomentSourceDestroy(v5);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  v6 = *(NSObject **)(DerivedStorage + 160);
  if (v6)
  {
    dispatch_release(v6);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 136);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 128);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 168);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  if (*(_QWORD *)DerivedStorage)
  {
    FigXPCRemoteClientDisassociateObject();
    if (*(_BYTE *)(DerivedStorage + 176)
      || !FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessage())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*(_QWORD *)DerivedStorage)
      {
        CFRelease(*(CFTypeRef *)DerivedStorage);
        *(_QWORD *)DerivedStorage = 0;
      }
    }
  }
  return FigXPCRelease();
}

__CFString *dqr_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;
  const char *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(DerivedStorage + 176))
    v4 = "SERVER DIED";
  else
    v4 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<DataQueueRemote %p>, remoteClient %p, ObjectID: %016llx %s"), a1, *(_QWORD *)DerivedStorage, *(_QWORD *)(DerivedStorage + 16), v4);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t dqr_copyProperty(const void *a1, uint64_t a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  const void *v10;
  CFDictionaryRef v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  if (!FigCFEqual())
  {
    v16 = FigXPCSendStdCopyPropertyMessage();
    MEMORY[0x19402EA24](*(_QWORD *)(v9 + 24));
    return v16;
  }
  cf = 0;
  if (*(_QWORD *)(v9 + 168) && (v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject(), (cf = v10) != 0))
  {
    v11 = 0;
  }
  else
  {
    v11 = CFDictionaryCreate(a3, (const void **)&kFigSampleBufferConsumerForDataQueueOption_ConsumeAsynchronously, MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = FigSampleBufferConsumerForDataQueueCreate(a1, (uint64_t)a3, (uint64_t)v11, &cf);
    if ((_DWORD)v12)
    {
      v15 = v12;
      goto LABEL_15;
    }
    v13 = *(const void **)(v9 + 168);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v9 + 168) = 0;
    }
    v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(v9 + 168) = v14;
    v10 = cf;
    if (!v14)
    {
      if (cf)
        CFRelease(cf);
      v15 = 4294951505;
      goto LABEL_15;
    }
  }
  v15 = 0;
  *a4 = v10;
LABEL_15:
  MEMORY[0x19402EA24](*(_QWORD *)(v9 + 24));
  if (v11)
    CFRelease(v11);
  return v15;
}

uint64_t dqr_setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID TypeID;
  _QWORD *v8;
  const void **v9;
  uint64_t v10;
  NSObject *v11;
  const void *v12;
  const void *v13;
  CFTypeRef v14;
  uint64_t v15;
  int v17;
  _QWORD v18[5];
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = DerivedStorage;
    if (!FigCFEqual())
      return FigXPCSendStdSetPropertyMessage();
    if (!a3 || (TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 24));
      if (*(_BYTE *)(v6 + 176))
      {
        v15 = FigSignalErrorAt();
LABEL_21:
        MEMORY[0x19402EA24](*(_QWORD *)(v6 + 24));
        return v15;
      }
      cf = 0;
      v8 = (_QWORD *)CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EA0C](v8[3]);
      v9 = 0;
      if (!FigCFEqual())
      {
        v9 = (const void **)malloc_type_calloc(1uLL, 0x10uLL, 0x10200405F07FB98uLL);
        if (v9 && (v10 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*v9 = (const void *)v10) != 0))
        {
          *((_BYTE *)v9 + 8) = 1;
        }
        else
        {
          v17 = FigSignalErrorAt();
          dqr_DestroyTimebaseSyncState(v9);
          v9 = 0;
          if (v17)
            goto LABEL_18;
        }
        v11 = v8[20];
        if (!a3)
        {
          v18[0] = MEMORY[0x1E0C809B0];
          v18[1] = 0x40000000;
          v18[2] = __dqr_RebuildTimebaseSync_block_invoke;
          v18[3] = &__block_descriptor_tmp_12;
          v18[4] = v9;
          dispatch_sync(v11, v18);
          v12 = (const void *)v8[18];
          v8[18] = 0;
          if (!v12)
            goto LABEL_14;
          goto LABEL_13;
        }
        if (!FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)dqr_SyncServerTimebaseToMoment, (uint64_t)v9, (void (*)(uint64_t))dqr_DestroyTimebaseSyncState, a3, v11, (uint64_t *)&cf))
        {
          v12 = (const void *)v8[18];
          v8[18] = a3;
          CFRetain(a3);
          v9 = 0;
          if (!v12)
          {
LABEL_14:
            v13 = (const void *)v8[19];
            v14 = cf;
            v8[19] = cf;
            if (v14)
              CFRetain(v14);
            if (v13)
              CFRelease(v13);
            goto LABEL_18;
          }
LABEL_13:
          CFRelease(v12);
          goto LABEL_14;
        }
      }
LABEL_18:
      MEMORY[0x19402EA24](v8[3]);
      dqr_DestroyTimebaseSyncState(v9);
      if (cf)
        CFRelease(cf);
      v15 = 0;
      goto LABEL_21;
    }
  }
  return FigSignalErrorAt();
}

void dqr_SyncServerTimebaseToMoment(uint64_t a1, void *__s1)
{
  int v4;
  uint64_t v5;
  const void *v6;
  int v7;
  int v8;
  int __s2;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  CFTypeRef v18;
  CMBlockBufferRef blockBufferOut;

  v18 = 0;
  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  __s2 = 120;
  v4 = memcmp(__s1, &__s2, 0x78uLL);
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    v6 = (const void *)v5;
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 176))
    {
      FigSignalErrorAt();
    }
    else
    {
      if (*(_BYTE *)(a1 + 8))
      {
        *((_DWORD *)__s1 + 1) |= 4u;
        *(_BYTE *)(a1 + 8) = 0;
      }
      if (FigXPCCreateBasicMessage())
        goto LABEL_17;
      if (v4)
      {
        if (FigXPCMessageSetCFBoolean())
          goto LABEL_17;
        blockBufferOut = 0;
        v7 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0x78uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0x78uLL, 1u, &blockBufferOut);
        if (!v7)
        {
          v7 = CMBlockBufferReplaceDataBytes(__s1, blockBufferOut, 0, 0x78uLL);
          if (!v7)
            v7 = FigXPCMessageSetBlockBuffer();
        }
        v8 = v7;
        if (blockBufferOut)
          CFRelease(blockBufferOut);
        if (v8)
          goto LABEL_17;
      }
      else if (FigXPCMessageSetCFBoolean())
      {
        goto LABEL_17;
      }
      FigXPCRemoteClientSendSyncMessage();
    }
LABEL_17:
    FigXPCRemoteClientKillServerOnTimeout();
    CFRelease(v6);
    if (v18)
      CFRelease(v18);
  }
}

void dqr_DestroyTimebaseSyncState(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t dqr_EnqueueSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    goto LABEL_12;
  if (!CMSampleBufferGetDataBuffer(a2))
  {
    v5 = 0;
    goto LABEL_9;
  }
  if (*(_BYTE *)(DerivedStorage + 176))
  {
LABEL_12:
    v4 = FigSignalErrorAt();
LABEL_13:
    v5 = v4;
    goto LABEL_9;
  }
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
    goto LABEL_13;
  v4 = FigXPCMessageAddCMSampleBuffer();
  if ((_DWORD)v4)
    goto LABEL_13;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v5)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v6 + 56) = FigXPCMessageGetInt32();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
LABEL_9:
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t dqr_GetWaterLevelState()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t dqr_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, const void *a3, NSObject *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
    if (*(_QWORD *)(v8 + 120) || (*(_DWORD *)(v8 + 108) & 0x1D) != 1 || *(_BYTE *)(v8 + 176))
    {
      v10 = FigSignalErrorAt();
    }
    else
    {
      *(_QWORD *)(v8 + 120) = a2;
      if (a3)
        v9 = CFRetain(a3);
      else
        v9 = 0;
      *(_QWORD *)(v8 + 128) = v9;
      if (a4)
        dispatch_retain(a4);
      *(_QWORD *)(v8 + 136) = a4;
      v10 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v10)
        v10 = FigXPCRemoteClientSendSyncMessage();
    }
    v11 = v10;
    MEMORY[0x19402EA24](*(_QWORD *)(v8 + 24));
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t dqr_RemoveLowWaterTrigger()
{
  uint64_t DerivedStorage;
  const void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  if (!*(_QWORD *)(DerivedStorage + 120) || *(_BYTE *)(DerivedStorage + 176))
  {
    v3 = FigSignalErrorAt();
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 120) = 0;
    v1 = *(const void **)(DerivedStorage + 128);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
    v2 = *(NSObject **)(DerivedStorage + 136);
    if (v2)
    {
      dispatch_release(v2);
      *(_QWORD *)(DerivedStorage + 136) = 0;
    }
    v3 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v3)
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  v4 = v3;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t dqr_Flush()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 176))
  {
    v1 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v1 = FigXPCCreateBasicMessage();
  if ((_DWORD)v1)
  {
LABEL_8:
    v2 = v1;
    goto LABEL_6;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 64));
  v2 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v2)
  {
    v3 = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(v3 + 56) = FigXPCMessageGetInt32();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 64));
LABEL_6:
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigVideoTargetCreateWithVideoReceiver(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v9;
  uint64_t RemoteWithVideoReceiverEndpointID;
  uint64_t v11;
  CFTypeRef cf;

  if (!a4 || !a2)
  {
    RemoteWithVideoReceiverEndpointID = FigSignalErrorAt();
LABEL_6:
    v11 = RemoteWithVideoReceiverEndpointID;
    goto LABEL_8;
  }
  cf = 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  CMBaseObject = FigVideoReceiverGetCMBaseObject(a2);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v8)
  {
    v9 = *MEMORY[0x1E0C9AE00];
    RemoteWithVideoReceiverEndpointID = v8(CMBaseObject, CFSTR("XPCEndpointID"), *MEMORY[0x1E0C9AE00], &cf);
    if (!(_DWORD)RemoteWithVideoReceiverEndpointID)
      RemoteWithVideoReceiverEndpointID = FigVideoTargetCreateRemoteWithVideoReceiverEndpointID(v9, (void *)cf, a3, a4);
    goto LABEL_6;
  }
  v11 = 4294954514;
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t FigVideoTargetCreateWithVideoReceiverEndpointID(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  if (!a4 || !a2)
    return FigSignalErrorAt();
  FigCFDictionaryGetBooleanIfPresent();
  return FigVideoTargetCreateRemoteWithVideoReceiverEndpointID(*MEMORY[0x1E0C9AE00], a2, 0, a4);
}

uint64_t FigVideoTargetCreateSharingVideoReceiverFromVideoTarget(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef cf;

  cf = 0;
  if (!a4 || !a2)
    return FigSignalErrorAt();
  FigCFDictionaryGetBooleanIfPresent();
  return FigVideoTargetCreateRemoteSharingVideoReceiverFromRemoteVideoTarget(a1, a2, a3, a4);
}

uint64_t FigVTTCaptionWriterCreateForDocument(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigVTTCaptionWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigBytePumpGetFigBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figVTTCaptionWriterForDocument_Invalidate()
{
  return 0;
}

void figVTTCaptionWriterForDocument_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

CFStringRef figVTTCaptionWriterForDocument_CopyDebugDesc()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigVTTDocumentWriterForDocument"));
}

uint64_t figVTTCaptionWriterForDocument_AddCaption(const void *a1, const void *a2, _OWORD *a3)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  const __CFAllocator *v7;
  CFDictionaryRef v8;
  uint64_t v9;
  CFTypeRef v10;
  CFAllocatorRef v11;
  uint64_t CMBaseObject;
  uint64_t (*v13)(uint64_t, _QWORD, CFAllocatorRef, const void **);
  uint64_t v14;
  CFTypeID v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *);
  uint64_t value_low;
  CFTypeID v19;
  const void *InitialValue;
  __CFString **v21;
  const void *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, _QWORD, CFAllocatorRef, const void **);
  uint64_t v27;
  CFTypeID v28;
  CMTimeValue value;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, _QWORD, CFAllocatorRef, const void **);
  uint64_t v33;
  CFTypeID v34;
  const void *v35;
  CFTypeID v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, _QWORD, CFAllocatorRef, const void **);
  const void *v40;
  const void *v41;
  CFTypeID v42;
  __CFString **v43;
  CFTypeRef v44;
  CFMutableStringRef Mutable;
  const __CFAllocator *v46;
  CFMutableArrayRef v47;
  __CFArray *v48;
  CFAllocatorRef v49;
  uint64_t v50;
  CFIndex SegmentCount;
  CFIndex v52;
  CFIndex v53;
  const void *SegmentAtIndex;
  CFAllocatorRef v55;
  const __CFDictionary *v56;
  CFTypeRef v57;
  CMTimeValue v58;
  const __CFAllocator *v59;
  CFMutableDictionaryRef v60;
  const __CFDictionary *v61;
  CFTypeRef v62;
  uint64_t v63;
  uint64_t *v64;
  CFAllocatorRef v65;
  uint64_t v66;
  const __CFAllocator *v67;
  CFMutableArrayRef v68;
  CFAllocatorRef v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  uint64_t (*v75)(const void *);
  const __CFString *v76;
  CFIndex Length;
  CFIndex v78;
  CMTimeValue v79;
  uint64_t (*v80)(const void *, CMTimeValue, uint64_t, uint64_t, CFTypeRef *, CMTimeRange *);
  CFTypeRef v81;
  uint64_t (*v82)(CFTypeRef);
  __CFString *v83;
  CFIndex Count;
  const void *v86;
  __CFString *v87;
  const __CFDictionary *v88;
  const __CFDictionary *v89;
  uint64_t v90;
  CMTimeRange v92;
  CMTime v93;
  CFTypeRef v94;
  CMTimeRange time;
  CFTypeRef v96;
  CFTypeRef cf;
  CFTypeRef v98;
  CFTypeRef v99;
  CFTypeRef context;
  uint64_t v101;
  __int16 v102;
  CFIndex v103;
  CFIndex v104;
  CFIndex v105;
  CFIndex v106;
  CFTypeRef v107;
  const void *v108;
  const void *v109;
  const void *v110;
  const void *v111;
  const void *v112[2];

  *(_OWORD *)&v92.start.value = *a3;
  *(_OWORD *)&v92.start.epoch = a3[1];
  *(_OWORD *)&v92.duration.timescale = a3[2];
  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v94 = 0;
  v5 = CFGetAllocator(a1);
  *(_OWORD *)&time.start.value = *(_OWORD *)&v92.start.value;
  time.start.epoch = v92.start.epoch;
  v6 = CMTimeCopyAsDictionary(&time.start, v5);
  time = v92;
  CMTimeRangeGetEnd(&v93, &time);
  v7 = CFGetAllocator(a1);
  v8 = CMTimeCopyAsDictionary(&v93, v7);
  v9 = FigVTTDocumentWriterCreateAndAddNode(*DerivedStorage, 3, 1, (uint64_t)&v94);
  if ((_DWORD)v9
    || (v9 = FigVTTNodeSetAttribute((uint64_t)v94, CFSTR("starttime"), v6), (_DWORD)v9)
    || (v9 = FigVTTNodeSetAttribute((uint64_t)v94, CFSTR("endtime"), v8), (_DWORD)v9))
  {
    value_low = v9;
    goto LABEL_206;
  }
  v10 = v94;
  v11 = CFGetAllocator(a1);
  context = 0;
  v111 = 0;
  v112[0] = 0;
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v13 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  v88 = v6;
  v89 = v8;
  if (!v13)
    goto LABEL_83;
  v14 = v13(CMBaseObject, *MEMORY[0x1E0CA3340], v11, &v111);
  if ((_DWORD)v14)
  {
LABEL_233:
    value_low = v14;
    goto LABEL_234;
  }
  if (v111)
  {
    v15 = CFGetTypeID(v111);
    if (v15 != FigCaptionRegionGetTypeID())
      goto LABEL_232;
  }
  v16 = FigCaptionDataGetCMBaseObject();
  v17 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v17)
    value_low = v17(v16, *MEMORY[0x1E0CA3378], v11, &context);
  else
    value_low = 4294954514;
  if (!context)
    goto LABEL_17;
  v19 = CFGetTypeID(context);
  if (v19 != FigCaptionDynamicStyleGetTypeID())
  {
LABEL_232:
    v14 = FigSignalErrorAt();
    goto LABEL_233;
  }
  if (context)
  {
    InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
    v112[0] = InitialValue;
    if (InitialValue)
      InitialValue = CFRetain(InitialValue);
    v112[0] = InitialValue;
  }
LABEL_17:
  if ((_DWORD)value_low)
  {
LABEL_234:
    v22 = 0;
    goto LABEL_84;
  }
  if (v112[0] && !CFEqual(v112[0], (CFTypeRef)*MEMORY[0x1E0CA3650]))
  {
    if (CFEqual(v112[0], (CFTypeRef)*MEMORY[0x1E0CA3670]))
    {
      v21 = kFigVTT_AttributeValue_cue_textAlign_start;
    }
    else if (CFEqual(v112[0], (CFTypeRef)*MEMORY[0x1E0CA3658]))
    {
      v21 = kFigVTT_AttributeValue_cue_textAlign_end;
    }
    else if (CFEqual(v112[0], (CFTypeRef)*MEMORY[0x1E0CA3660]))
    {
      v21 = kFigVTT_AttributeValue_cue_textAlign_left;
    }
    else
    {
      if (!CFEqual(v112[0], (CFTypeRef)*MEMORY[0x1E0CA3668]))
      {
        v22 = 0;
        goto LABEL_33;
      }
      v21 = kFigVTT_AttributeValue_cue_textAlign_right;
    }
  }
  else
  {
    v21 = kFigVTT_AttributeValue_cue_textAlign_center;
  }
  v22 = *v21;
  if (!*v21)
  {
LABEL_33:
    v24 = 1;
    goto LABEL_34;
  }
  v23 = FigVTTNodeSetAttribute((uint64_t)v10, CFSTR("align"), v22);
  if ((_DWORD)v23)
  {
    value_low = v23;
    goto LABEL_84;
  }
  v24 = 0;
LABEL_34:
  if (v112[0])
  {
    CFRelease(v112[0]);
    v112[0] = 0;
  }
  if ((v24 & 1) == 0)
    CFRelease(v22);
  if (!v111)
  {
    v22 = 0;
LABEL_55:
    if (v112[0])
    {
      CFRelease(v112[0]);
      v112[0] = 0;
    }
    if (v22)
      CFRelease(v22);
    goto LABEL_59;
  }
  v25 = FigCaptionRegionGetCMBaseObject();
  v26 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  v8 = v89;
  if (!v26)
    goto LABEL_83;
  v27 = v26(v25, *MEMORY[0x1E0CA3490], v11, v112);
  if ((_DWORD)v27)
  {
LABEL_237:
    value_low = v27;
    v22 = 0;
    goto LABEL_238;
  }
  if (v112[0])
  {
    v28 = CFGetTypeID(v112[0]);
    if (v28 != FigCaptionDynamicStyleGetTypeID())
    {
LABEL_236:
      v27 = FigSignalErrorAt();
      goto LABEL_237;
    }
    if (v112[0])
    {
      FigCaptionDynamicStyleGetInitialValue();
      FigGeometryPointMakeFromDictionary();
      value = time.duration.value;
      if ((*(_QWORD *)&time.start.timescale & 0x1FFFFFFFFLL) == 0x125202020)
      {
        v22 = (const void *)FigGeometryDimensionCopyAsDictionary();
        v30 = FigVTTNodeSetAttribute((uint64_t)v10, CFSTR("position"), v22);
        if ((_DWORD)v30)
        {
LABEL_52:
          value_low = v30;
LABEL_214:
          v6 = v88;
          v8 = v89;
          goto LABEL_84;
        }
        if (v22)
          CFRelease(v22);
      }
      if ((value & 0x100000000) != 0 && ((_DWORD)value == 1818848869 || (_DWORD)value == 622862368))
      {
        v22 = (const void *)FigGeometryDimensionCopyAsDictionary();
        v30 = FigVTTNodeSetAttribute((uint64_t)v10, CFSTR("line"), v22);
        if ((_DWORD)v30)
          goto LABEL_52;
      }
      else
      {
        v22 = 0;
      }
      goto LABEL_55;
    }
  }
LABEL_59:
  FigGeometryDimensionMake();
  if (v111)
  {
    v31 = FigCaptionRegionGetCMBaseObject();
    v32 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (!v32)
    {
      v22 = 0;
      value_low = 4294954514;
      goto LABEL_214;
    }
    v33 = v32(v31, *MEMORY[0x1E0CA34B0], v11, v112);
    if (!(_DWORD)v33)
    {
      v6 = v88;
      if (!v112[0])
        goto LABEL_75;
      v34 = CFGetTypeID(v112[0]);
      if (v34 == FigCaptionDynamicStyleGetTypeID())
      {
        v6 = v88;
        if (!v112[0])
          goto LABEL_75;
        v35 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (v35)
        {
          v36 = CFGetTypeID(v35);
          if (v36 == CFDictionaryGetTypeID())
          {
            FigGeometryDimensionMakeFromDictionary();
            v22 = (const void *)FigGeometryDimensionCopyAsDictionary();
            if (v22)
            {
              v37 = FigVTTNodeSetAttribute((uint64_t)v10, CFSTR("size"), v22);
              v6 = v88;
              if ((_DWORD)v37)
              {
                value_low = v37;
LABEL_238:
                v8 = v89;
                goto LABEL_84;
              }
            }
            else
            {
              v6 = v88;
            }
            goto LABEL_71;
          }
        }
      }
      v33 = FigSignalErrorAt();
    }
    value_low = v33;
    v22 = 0;
    goto LABEL_214;
  }
  v22 = 0;
LABEL_71:
  if (v112[0])
  {
    CFRelease(v112[0]);
    v112[0] = 0;
  }
  if (v22)
    CFRelease(v22);
LABEL_75:
  v8 = v89;
  if (!v111)
    goto LABEL_227;
  v38 = FigCaptionRegionGetCMBaseObject();
  v39 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v39)
  {
LABEL_83:
    v22 = 0;
    value_low = 4294954514;
    goto LABEL_84;
  }
  v14 = v39(v38, *MEMORY[0x1E0CA34B8], v11, v112);
  if ((_DWORD)v14)
    goto LABEL_233;
  if (!v112[0])
  {
    v22 = 0;
    goto LABEL_229;
  }
  v40 = (const void *)FigCaptionDynamicStyleGetInitialValue();
  if (!v40)
    goto LABEL_236;
  v41 = v40;
  v42 = CFGetTypeID(v40);
  if (v42 != CFStringGetTypeID())
    goto LABEL_236;
  v8 = v89;
  if (CFEqual(v112[0], (CFTypeRef)*MEMORY[0x1E0CA34D8]))
  {
LABEL_82:
    v43 = kFigVTT_AttributeValue_cue_writingMode_TopToBottom;
    goto LABEL_222;
  }
  if (CFEqual(v41, (CFTypeRef)*MEMORY[0x1E0CA34F0]))
  {
    v43 = kFigVTT_AttributeValue_cue_writingMode_RightToLeft;
  }
  else
  {
    if (!CFEqual(v41, (CFTypeRef)*MEMORY[0x1E0CA34E8]))
    {
      if (!CFEqual(v41, (CFTypeRef)*MEMORY[0x1E0CA34E0]))
      {
LABEL_227:
        v22 = 0;
        v86 = v112[0];
        if (v112[0])
        {
LABEL_228:
          CFRelease(v86);
          value_low = 0;
          v112[0] = 0;
          goto LABEL_84;
        }
LABEL_229:
        value_low = 0;
        goto LABEL_84;
      }
      goto LABEL_82;
    }
    v43 = kFigVTT_AttributeValue_cue_writingMode_LeftToRight;
  }
LABEL_222:
  v22 = *v43;
  if (!*v43)
    goto LABEL_227;
  value_low = FigVTTNodeSetAttribute((uint64_t)v10, CFSTR("writingMode"), v22);
  if (!(_DWORD)value_low)
  {
    v86 = v112[0];
    if (v112[0])
      goto LABEL_228;
  }
LABEL_84:
  if (v111)
    CFRelease(v111);
  if (v22)
    CFRelease(v22);
  if (v112[0])
    CFRelease(v112[0]);
  if (context)
    CFRelease(context);
  if (!(_DWORD)value_low)
  {
    v44 = v94;
    v99 = 0;
    cf = 0;
    v98 = 0;
    v96 = 0;
    v90 = *MEMORY[0x1E0C9AE00];
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (!Mutable || (v46 = CFGetAllocator(a1), (v47 = CFArrayCreateMutable(v46, 0, MEMORY[0x1E0C9B378])) == 0))
    {
      value_low = FigSignalErrorAt();
LABEL_198:
      if (v96)
        CFRelease(v96);
      if (v99)
        CFRelease(v99);
      if (cf)
        CFRelease(cf);
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_206;
    }
    v48 = v47;
    v49 = CFGetAllocator(a1);
    time = v92;
    v50 = FigCaptionStyleSegmentGeneratorCreate((uint64_t)v49, a2, (__int128 *)&time.start.value, (uint64_t *)&v99);
    v87 = Mutable;
    if ((_DWORD)v50)
      goto LABEL_194;
    v50 = FigCaptionStyleSegmentGeneratorPerform((uint64_t)v99);
    if ((_DWORD)v50)
      goto LABEL_194;
    SegmentCount = FigCaptionStyleSegmentGeneratorGetSegmentCount((uint64_t)v99);
    if (SegmentCount >= 1)
    {
      v52 = SegmentCount;
      v53 = 0;
      while (1)
      {
        SegmentAtIndex = FigCaptionStyleSegmentGeneratorGetSegmentAtIndex((uint64_t)v99, v53);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v96)
        {
          CFRelease(v96);
          v96 = 0;
        }
        v50 = FigCaptionStyleSegmentCopyText((uint64_t)SegmentAtIndex, (const __CFString **)&cf);
        if ((_DWORD)v50)
          goto LABEL_194;
        v50 = FigCaptionStyleSegmentCopyAttributes((uint64_t)SegmentAtIndex, &v96);
        if ((_DWORD)v50)
          goto LABEL_194;
        if (v98)
        {
          CFRelease(v98);
          v98 = 0;
        }
        v55 = CFGetAllocator(a1);
        v50 = FigVTTSpanCreate((uint64_t)v55, &v98);
        if ((_DWORD)v50)
          goto LABEL_194;
        v50 = FigVTTNodeSetValue((uint64_t)v98, cf);
        if ((_DWORD)v50)
          goto LABEL_194;
        v56 = (const __CFDictionary *)v96;
        v57 = v98;
        MEMORY[0x19402F294](&fcwvtt_getCaptionStylePropertyToVTTAttributesMapping_once, fcwvtt_initCaptionStylePropertyToVTTAttributesMapping);
        v58 = sCaptionStylePropertyToVTTAttributesMapping;
        v59 = CFGetAllocator(a1);
        v60 = CFDictionaryCreateMutable(v59, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v60)
        {
          v61 = v60;
          time.start.epoch = (CMTimeEpoch)v57;
          time.duration.value = 0;
          time.start.value = v58;
          *(_QWORD *)&time.start.timescale = v60;
          CFDictionaryApplyFunction(v56, (CFDictionaryApplierFunction)fcwvtt_mapOneCaptionStylePropertyToAttribute, &time);
          value_low = LODWORD(time.duration.value);
          if (!LODWORD(time.duration.value))
          {
            context = v57;
            v101 = 0;
            CFDictionaryApplyFunction(v61, (CFDictionaryApplierFunction)fcwvtt_copyOneAttributeToNode, &context);
            value_low = v101;
          }
          CFRelease(v61);
          if ((_DWORD)value_low)
            goto LABEL_195;
        }
        else
        {
          value_low = FigSignalErrorAt();
          if ((_DWORD)value_low)
            goto LABEL_195;
        }
        v62 = v98;
        FigBytePumpGetFigBaseObject(a1);
        v63 = CMBaseObjectGetDerivedStorage();
        time.start.value = 0;
        v64 = (uint64_t *)(v63 + 8);
        if (!*(_QWORD *)(v63 + 8))
        {
          v65 = CFGetAllocator(a1);
          v66 = FigAttributePartitionGeneratorCreate((uint64_t)v65, v64);
          if ((_DWORD)v66)
            goto LABEL_127;
          v67 = CFGetAllocator(a1);
          v68 = CFArrayCreateMutable(v67, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(v63 + 16) = v68;
          if (!v68)
            break;
        }
        v66 = FigVTTNodeCopyAttributes((uint64_t)v62, &time);
        if ((_DWORD)v66)
          goto LABEL_127;
        value_low = FigAttributePartitionGeneratorAddElement((CFMutableArrayRef *)*v64, v62, time.start.value);
        if (!(_DWORD)value_low)
          CFArrayAppendValue(*(CFMutableArrayRef *)(v63 + 16), v62);
LABEL_119:
        if (time.start.value)
          CFRelease((CFTypeRef)time.start.value);
        if ((_DWORD)value_low)
          goto LABEL_195;
        CFArrayAppendValue(v48, v98);
        if (v52 == ++v53)
          goto LABEL_128;
      }
      v66 = FigSignalErrorAt();
LABEL_127:
      value_low = v66;
      goto LABEL_119;
    }
LABEL_128:
    time.start.value = 0;
    *(_QWORD *)&time.start.timescale = 0;
    context = 0;
    v69 = CFGetAllocator(a1);
    v111 = 0;
    v112[0] = 0;
    v109 = 0;
    v110 = 0;
    v107 = 0;
    v108 = 0;
    v70 = FigCaptionDataGetCMBaseObject();
    v71 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
    if (v71)
    {
      v72 = v71(v70, *MEMORY[0x1E0CA3368], v90, &v107);
      if ((_DWORD)v72)
      {
LABEL_219:
        value_low = v72;
        goto LABEL_178;
      }
      v73 = *MEMORY[0x1E0CA35E0];
      if (!FigCFArrayContainsValue()
        || ((v74 = a2,
             (v75 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0)
          ? (v76 = &stru_1E2FD85F8)
          : (v76 = (const __CFString *)v75(a2)),
            (Length = CFStringGetLength(v76)) == 0))
      {
LABEL_176:
        value_low = 0;
LABEL_178:
        if (v112[0])
          CFRelease(v112[0]);
        if (v111)
          CFRelease(v111);
        if (v110)
          CFRelease(v110);
        if (v109)
          CFRelease(v109);
        if (v108)
          CFRelease(v108);
        if (context)
          CFRelease(context);
        if (v107)
          CFRelease(v107);
        if ((_DWORD)value_low)
          goto LABEL_195;
        v50 = FigVTTNodeSetChildNodeArray((uint64_t)v44, (uint64_t)v48);
LABEL_194:
        value_low = v50;
LABEL_195:
        CFRelease(v48);
        if (v98)
          CFRelease(v98);
        v6 = v88;
        v8 = v89;
        Mutable = v87;
        goto LABEL_198;
      }
      v78 = Length;
      v79 = 0;
      while (1)
      {
        if (context)
        {
          CFRelease(context);
          context = 0;
        }
        v80 = *(uint64_t (**)(const void *, CMTimeValue, uint64_t, uint64_t, CFTypeRef *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (!v80)
          break;
        v72 = v80(v74, v79, v73, v90, &context, &time);
        if ((_DWORD)v72)
          goto LABEL_219;
        v74 = a2;
        if (context)
        {
          v105 = -1;
          v106 = -1;
          v103 = 0;
          v104 = 0;
          v102 = 0;
          if (v112[0])
          {
            CFRelease(v112[0]);
            v112[0] = 0;
          }
          if (v111)
          {
            CFRelease(v111);
            v111 = 0;
          }
          if (v110)
          {
            CFRelease(v110);
            v110 = 0;
          }
          if (v109)
          {
            CFRelease(v109);
            v109 = 0;
          }
          if (v108)
          {
            CFRelease(v108);
            v108 = 0;
          }
          v72 = fcwtt_mapOffsetToSpanAndSpanOffset((uint64_t)a2, time.start.value, v48, &v106, &v104, (BOOL *)&v102 + 1);
          if ((_DWORD)v72)
            goto LABEL_219;
          if (v104 >= 1)
          {
            v72 = fcwtt_splitSpanNode(v48, v106, v104);
            if ((_DWORD)v72)
              goto LABEL_219;
          }
          v72 = fcwtt_mapOffsetToSpanAndSpanOffset((uint64_t)a2, *(_QWORD *)&time.start.timescale + time.start.value, v48, &v105, &v103, (BOOL *)&v102);
          if ((_DWORD)v72)
            goto LABEL_219;
          if (v103 >= 1)
          {
            v72 = fcwtt_splitSpanNode(v48, v105, v103);
            if ((_DWORD)v72)
              goto LABEL_219;
          }
          v72 = FigVTTSpanCreate((uint64_t)v69, v112);
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTNodeSetProperty((uint64_t)v112[0], (uint64_t)CFSTR("WebVTTSpanNode_MarkupElement"), (uint64_t)CFSTR("RubyStart"));
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTSpanCreate((uint64_t)v69, &v111);
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTNodeSetProperty((uint64_t)v111, (uint64_t)CFSTR("WebVTTSpanNode_MarkupElement"), (uint64_t)CFSTR("RubyEnd"));
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTSpanCreate((uint64_t)v69, &v110);
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTNodeSetProperty((uint64_t)v110, (uint64_t)CFSTR("WebVTTSpanNode_MarkupElement"), (uint64_t)CFSTR("RubyTextStart"));
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTSpanCreate((uint64_t)v69, &v108);
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTNodeSetProperty((uint64_t)v108, (uint64_t)CFSTR("WebVTTSpanNode_MarkupElement"), (uint64_t)CFSTR("RubyTextEnd"));
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTSpanCreate((uint64_t)v69, &v109);
          if ((_DWORD)v72)
            goto LABEL_219;
          v72 = FigVTTNodeSetProperty((uint64_t)v109, (uint64_t)CFSTR("WebVTTSpanNode_MarkupElement"), (uint64_t)CFSTR("RubyText"));
          if ((_DWORD)v72)
            goto LABEL_219;
          v81 = context;
          v82 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          v83 = v82 ? (__CFString *)v82(v81) : &stru_1E2FD85F8;
          v72 = FigVTTNodeSetValue((uint64_t)v109, v83);
          if ((_DWORD)v72)
            goto LABEL_219;
          CFArrayInsertValueAtIndex(v48, v106, v112[0]);
          if ((_BYTE)v102)
            Count = CFArrayGetCount(v48);
          else
            Count = v105 + 1;
          v74 = a2;
          CFArrayInsertValueAtIndex(v48, Count, v111);
          CFArrayInsertValueAtIndex(v48, Count, v108);
          CFArrayInsertValueAtIndex(v48, Count, v109);
          CFArrayInsertValueAtIndex(v48, Count, v110);
        }
        v79 = *(_QWORD *)&time.start.timescale + time.start.value;
        if (*(_QWORD *)&time.start.timescale + time.start.value == v78)
          goto LABEL_176;
      }
    }
    value_low = 4294954514;
    goto LABEL_178;
  }
LABEL_206:
  if (v94)
    CFRelease(v94);
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  return value_low;
}

uint64_t figVTTCaptionWriterForDocument_Finish(uint64_t a1)
{
  uint64_t *DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFIndex v7;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef cf;
  CFDictionaryRef theDict;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigBytePumpGetFigBaseObject(a1);
  v3 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  theDict = 0;
  v13 = 0;
  v14 = 0;
  v11 = a1;
  v12 = 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
  {
    v6 = 0;
    goto LABEL_18;
  }
  v5 = FigAttributePartitionGeneratorPerformPartitioning(v4, &theDict);
  if (!(_DWORD)v5)
  {
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fcwvtt_addOnePartitionAsStyleNode, &v11);
    v6 = v14;
    if ((_DWORD)v14)
      goto LABEL_16;
    if (!v12 || (v5 = FigVTTNodeSetChildNodeArray((uint64_t)v12, (uint64_t)v13), !(_DWORD)v5))
    {
      v7 = 0;
      while (1)
      {
        Count = *(const __CFArray **)(v3 + 16);
        if (Count)
          Count = (const __CFArray *)CFArrayGetCount(Count);
        if (v7 >= (uint64_t)Count)
          break;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 16), v7);
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v5 = FigAttributePartitionGeneratorCopyPartitionReferences(*(_QWORD *)(v3 + 8), ValueAtIndex, &cf);
        if (!(_DWORD)v5)
        {
          v5 = FigVTTNodeSetProperty((uint64_t)ValueAtIndex, (uint64_t)CFSTR("WebVTTSpanNode_StyleReferences"), (uint64_t)cf);
          ++v7;
          if (!(_DWORD)v5)
            continue;
        }
        goto LABEL_14;
      }
      v6 = 0;
      goto LABEL_16;
    }
  }
LABEL_14:
  v6 = v5;
LABEL_16:
  if (v12)
    CFRelease(v12);
LABEL_18:
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  if (theDict)
    CFRelease(theDict);
  if (!(_DWORD)v6)
    return FigVTTDocumentWriterFlush(*DerivedStorage);
  return v6;
}

const void *fcwvtt_mapOneCaptionStylePropertyToAttribute(const void *key, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 24))
  {
    key = CFDictionaryGetValue(*(CFDictionaryRef *)a3, key);
    if (key)
    {
      key = (const void *)((uint64_t (*)(uint64_t, _QWORD))key)(a2, *(_QWORD *)(a3 + 8));
      if ((_DWORD)key)
        *(_DWORD *)(a3 + 24) = (_DWORD)key;
    }
  }
  return key;
}

uint64_t fcwvtt_copyOneAttributeToNode(uint64_t cf, const void *a2, uint64_t a3)
{
  const void *v4;
  CFTypeID v6;

  if (!*(_DWORD *)(a3 + 8))
  {
    v4 = (const void *)cf;
    if (cf && (v6 = CFGetTypeID((CFTypeRef)cf), v6 == CFStringGetTypeID()))
    {
      cf = FigVTTNodeSetAttribute(*(_QWORD *)a3, v4, a2);
      if (!(_DWORD)cf)
        return cf;
    }
    else
    {
      cf = 4294949406;
    }
    *(_DWORD *)(a3 + 8) = cf;
  }
  return cf;
}

void fcwvtt_initCaptionStylePropertyToVTTAttributesMapping()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35E8], FigVTTDocumentWriterMapPropertyToAttribute_TextColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3558], FigVTTDocumentWriterMapPropertyToAttribute_BackgroundColor);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA35A0], FigVTTDocumentWriterMapPropertyToAttribute_FontWeight);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3580], FigVTTDocumentWriterMapPropertyToAttribute_FontStyle);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3560], FigVTTDocumentWriterMapPropertyToAttribute_Decoration);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3570], FigVTTDocumentWriterMapPropertyToAttribute_FontFamily);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3578], FigVTTDocumentWriterMapPropertyToAttribute_FontSize);
  sCaptionStylePropertyToVTTAttributesMapping = (uint64_t)Mutable;
}

uint64_t fcwtt_mapOffsetToSpanAndSpanOffset(uint64_t a1, CFIndex a2, const __CFArray *a3, CFIndex *a4, _QWORD *a5, BOOL *a6)
{
  uint64_t (*v12)(uint64_t);
  const __CFString *v13;
  CFIndex v14;
  BOOL v15;
  CFIndex v16;
  CFIndex Length;
  CFIndex v18;
  CFIndex i;
  const void *ValueAtIndex;
  CFAllocatorRef v21;
  uint64_t v22;
  CFIndex v23;
  uint64_t v24;
  BOOL *v26;
  CFTypeRef cf;
  CFTypeRef v28;

  cf = 0;
  v28 = 0;
  v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v12)
  {
    v13 = (const __CFString *)v12(a1);
    if (!v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = -1;
LABEL_32:
      if (a4)
        *a4 = v16;
      if (a5)
        *a5 = v14;
      v24 = 0;
      if (a6)
        *a6 = v15;
      goto LABEL_38;
    }
  }
  else
  {
    v13 = &stru_1E2FD85F8;
  }
  Length = CFStringGetLength(v13);
  if ((a2 & 0x8000000000000000) == 0 && Length >= a2)
  {
    v26 = a6;
    v16 = 0;
    v18 = 0;
    if (!a3)
      goto LABEL_9;
LABEL_8:
    for (i = CFArrayGetCount(a3); v16 < i; i = 0)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a3, v16);
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      v21 = CFGetAllocator(ValueAtIndex);
      v22 = FigVTTNodeCopyProperty((uint64_t)ValueAtIndex, (uint64_t)CFSTR("WebVTTSpanNode_MarkupElement"), (uint64_t)v21, (uint64_t)&cf);
      if ((_DWORD)v22)
        goto LABEL_44;
      if (cf
        && (CFEqual(cf, CFSTR("RubyStart"))
         || CFEqual(cf, CFSTR("RubyEnd"))
         || CFEqual(cf, CFSTR("RubyTextStart"))
         || CFEqual(cf, CFSTR("RubyTextEnd"))
         || CFEqual(cf, CFSTR("RubyText"))))
      {
        goto LABEL_27;
      }
      if (v28)
      {
        CFRelease(v28);
        v28 = 0;
      }
      v22 = FigVTTNodeCopyValue((uint64_t)ValueAtIndex, &v28);
      if ((_DWORD)v22)
        goto LABEL_44;
      if (!v28)
      {
LABEL_27:
        v23 = v18;
      }
      else
      {
        v23 = CFStringGetLength((CFStringRef)v28) + v18;
        v14 = a2 - v18;
        if (a2 >= v18 && v23 > a2)
          goto LABEL_31;
      }
      ++v16;
      v18 = v23;
      if (a3)
        goto LABEL_8;
LABEL_9:
      ;
    }
    v14 = 0;
    v16 = -1;
LABEL_31:
    v15 = v16 == -1;
    a6 = v26;
    goto LABEL_32;
  }
  v22 = FigSignalErrorAt();
LABEL_44:
  v24 = v22;
LABEL_38:
  if (cf)
    CFRelease(cf);
  if (v28)
    CFRelease(v28);
  return v24;
}

uint64_t fcwtt_splitSpanNode(const __CFArray *a1, CFIndex a2, CFIndex a3)
{
  const void *ValueAtIndex;
  uint64_t CopyWithValueRange;
  CFIndex Length;
  CFIndex v9;
  uint64_t v10;
  CFStringRef theString;
  CFTypeRef cf;
  void *value;

  cf = 0;
  value = 0;
  theString = 0;
  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  CopyWithValueRange = FigVTTNodeCopyValue((uint64_t)ValueAtIndex, &theString);
  if ((_DWORD)CopyWithValueRange)
    goto LABEL_14;
  Length = CFStringGetLength(theString);
  v9 = Length - a3;
  if (Length <= a3)
  {
    v10 = 0;
    goto LABEL_7;
  }
  CopyWithValueRange = FigVTTSpanCreateCopyWithValueRange(ValueAtIndex, 0, a3, (CFTypeRef *)&value);
  if ((_DWORD)CopyWithValueRange)
  {
LABEL_14:
    v10 = CopyWithValueRange;
  }
  else
  {
    v10 = FigVTTSpanCreateCopyWithValueRange(ValueAtIndex, a3, v9, &cf);
    if (!(_DWORD)v10)
    {
      CFArrayRemoveValueAtIndex(a1, a2);
      CFArrayInsertValueAtIndex(a1, a2, value);
      CFArrayInsertValueAtIndex(a1, a2 + 1, cf);
    }
  }
LABEL_7:
  if (value)
    CFRelease(value);
  if (cf)
    CFRelease(cf);
  if (theString)
    CFRelease(theString);
  return v10;
}

void fcwvtt_addOnePartitionAsStyleNode(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  CFTypeRef *v7;
  int v8;
  const __CFAllocator *v9;
  CFMutableArrayRef Mutable;
  CFAllocatorRef v11;
  _QWORD v12[2];
  uint64_t v13;
  void *value;

  value = 0;
  FigBytePumpGetFigBaseObject(*(_QWORD *)a3);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(a3 + 24))
    goto LABEL_8;
  if (*(_QWORD *)(a3 + 8))
  {
LABEL_5:
    v11 = CFGetAllocator(*(CFTypeRef *)a3);
    v8 = FigVTTStyleCreate((uint64_t)v11, a1, &value);
    if (!v8)
    {
      v12[0] = *(_QWORD *)(a3 + 8);
      v12[1] = value;
      v13 = 0;
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fcwvtt_applyOneAttributeToStyleNode, v12);
      v8 = v13;
      if (!(_DWORD)v13)
      {
        CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 16), value);
        goto LABEL_8;
      }
    }
    goto LABEL_12;
  }
  v7 = (CFTypeRef *)DerivedStorage;
  v8 = FigVTTDocumentWriterCreateAndAddNode(*DerivedStorage, 2, 7, a3 + 8);
  if (!v8)
  {
    v9 = CFGetAllocator(*v7);
    Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a3 + 16) = Mutable;
    if (!Mutable)
    {
      v8 = FigSignalErrorAt();
      if (!v8)
        goto LABEL_8;
      goto LABEL_12;
    }
    goto LABEL_5;
  }
LABEL_12:
  *(_DWORD *)(a3 + 24) = v8;
LABEL_8:
  if (value)
    CFRelease(value);
}

const void *fcwvtt_applyOneAttributeToStyleNode(const void *result, const void *a2, uint64_t a3)
{
  if (!*(_DWORD *)(a3 + 16))
  {
    result = (const void *)FigVTTNodeSetAttribute(*(_QWORD *)(a3 + 8), result, a2);
    if ((_DWORD)result)
      *(_DWORD *)(a3 + 16) = (_DWORD)result;
  }
  return result;
}

uint64_t FigCDSNodeCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  const CFArrayCallBacks *v5;
  __int128 v6;
  __int128 v7;
  __int128 v13;

  *a1 = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCDSNodeGetClassID_sRegisterFigCDSNodeBaseTypeOnce, RegisterFigCDSNodeBaseType);
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    *(_QWORD *)(DerivedStorage + 8) = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(DerivedStorage + 216) = CFArrayCreateMutable(v2, 0, v5);
    *(_WORD *)(DerivedStorage + 208) = 257;
    *(_OWORD *)(DerivedStorage + 48) = CDSRectNull;
    *(_OWORD *)(DerivedStorage + 64) = unk_193301910;
    *(_OWORD *)(DerivedStorage + 80) = xmmword_193301920;
    *(_OWORD *)(DerivedStorage + 96) = unk_193301930;
    v6 = *MEMORY[0x1E0C9D628];
    v7 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E0C9D628];
    *(_OWORD *)(DerivedStorage + 128) = v7;
    *(_OWORD *)(DerivedStorage + 16) = v6;
    *(_OWORD *)(DerivedStorage + 32) = v7;
    __asm { FMOV            V0.2D, #-1.0 }
    v13 = *MEMORY[0x1E0C9D820];
    *(_OWORD *)(DerivedStorage + 144) = _Q0;
    *(_OWORD *)(DerivedStorage + 160) = v13;
    *(_QWORD *)(DerivedStorage + 176) = 0;
    *(_DWORD *)(DerivedStorage + 184) = 0;
    *(_QWORD *)(DerivedStorage + 192) = 0;
    *(_QWORD *)(DerivedStorage + 200) = 0;
    *a1 = 0;
  }
  return v3;
}

void FigCDSNodeFinalize()
{
  uint64_t DerivedStorage;
  void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 8));
  CFRelease(*(CFTypeRef *)(DerivedStorage + 216));
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 200));
  v1 = *(void **)(DerivedStorage + 192);
  if (v1)
  {
    free(v1);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
}

__CFString *FigCDSNodeCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSNode: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSNode_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSNode <FigCDSNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)CMBaseObjectGetDerivedStorage() = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetParentNode(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetChildren(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  const __CFArray *v5;
  CFRange v7;

  v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v7.length = CFArrayGetCount(v5);
  v7.location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) >= 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 8), a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  const __CFArray *v3;
  CFIndex FirstIndexOfValue;
  CFRange v6;

  v3 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v6.length = CFArrayGetCount(v3);
  v6.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v3, v6, a2);
  CFArrayRemoveValueAtIndex(v3, FirstIndexOfValue);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 8));
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetViewport(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage;
  CGRect v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  if (!CGRectEqualToRect(*(CGRect *)(DerivedStorage + 16), v10))
  {
    *(CGFloat *)(DerivedStorage + 16) = a1;
    *(CGFloat *)(DerivedStorage + 24) = a2;
    *(CGFloat *)(DerivedStorage + 32) = a3;
    *(CGFloat *)(DerivedStorage + 40) = a4;
    *(_BYTE *)(DerivedStorage + 209) = 1;
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetViewport(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)(DerivedStorage + 32);
  *a2 = *(_OWORD *)(DerivedStorage + 16);
  a2[1] = v4;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, __int128 *a2)
{
  _OWORD *DerivedStorage;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  v4 = a2[3];
  v6 = *a2;
  v5 = a2[1];
  DerivedStorage[5] = a2[2];
  DerivedStorage[6] = v4;
  DerivedStorage[3] = v6;
  DerivedStorage[4] = v5;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, _OWORD *a2)
{
  _OWORD *DerivedStorage;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage[6];
  v6 = DerivedStorage[3];
  v5 = DerivedStorage[4];
  a2[2] = DerivedStorage[5];
  a2[3] = v4;
  *a2 = v6;
  a2[1] = v5;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage;
  const __CFArray *v9;
  CFIndex v10;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v13;
  void (*v14)(const void *, double, double, double, double);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 112) = a1;
  *(double *)(DerivedStorage + 120) = a2;
  *(double *)(DerivedStorage + 128) = a3;
  *(double *)(DerivedStorage + 136) = a4;
  v9 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v9) >= 1)
  {
    v10 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v9, v10);
      FigCDSNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v13 = *(_QWORD *)(ProtocolVTable + 16);
        if (v13)
        {
          v14 = *(void (**)(const void *, double, double, double, double))(v13 + 64);
          if (v14)
            v14(ValueAtIndex, a1, a2, a3, a4);
        }
      }
      ++v10;
    }
    while (CFArrayGetCount(v9) > v10);
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage;
  __int128 v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)(DerivedStorage + 128);
  *a2 = *(_OWORD *)(DerivedStorage + 112);
  a2[1] = v4;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 160) = a1;
  *(double *)(DerivedStorage + 168) = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCGSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 160);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 144) = a1;
  *(double *)(DerivedStorage + 152) = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t DerivedStorage;
  void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(void **)(DerivedStorage + 192);
  if (v1)
  {
    *(_QWORD *)(DerivedStorage + 192) = 0;
    free(v1);
    *(_QWORD *)(DerivedStorage + 176) = 0;
    *(_DWORD *)(DerivedStorage + 184) = 0;
  }
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 200));
  *(_QWORD *)(DerivedStorage + 200) = 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetImageCache(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 200));
  *(_QWORD *)(DerivedStorage + 200) = CGImageRetain(a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageCache(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 200);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 176);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 180);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t DerivedStorage;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 <= 0x10000 && a3 <= 0x10000 && a4 < 0x11)
  {
    v8 = a3 * (unint64_t)a2 * a4 * a4;
    if (!(v8 >> 29))
    {
      v9 = DerivedStorage;
      v10 = *(_DWORD *)(DerivedStorage + 180) * *(_DWORD *)(DerivedStorage + 176) * *(_DWORD *)(DerivedStorage + 184);
      v11 = *(void **)(DerivedStorage + 192);
      if (v10 == a3 * a2 * a4)
      {
        bzero(v11, 4 * v8);
        return 0;
      }
      if (v11)
      {
        *(_QWORD *)(v9 + 192) = 0;
        free(v11);
        *(_QWORD *)(v9 + 176) = 0;
        *(_DWORD *)(v9 + 184) = 0;
      }
      if (!v8 || (v12 = malloc_type_calloc(4 * v8, 1uLL, 0x17B560CDuLL), (*(_QWORD *)(v9 + 192) = v12) != 0))
      {
        *(_DWORD *)(v9 + 176) = a2;
        *(_DWORD *)(v9 + 180) = a3;
        *(_DWORD *)(v9 + 184) = a4;
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 192);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, char a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 208) = a2;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 208);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 209) = a2;
  v4 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v4) >= 1)
  {
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
      FigCDSNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v8 = *(_QWORD *)(ProtocolVTable + 16);
        if (v8)
        {
          v9 = *(void (**)(const void *, uint64_t))(v8 + 216);
          if (v9)
            v9(ValueAtIndex, a2);
        }
      }
      ++v5;
    }
    while (CFArrayGetCount(v4) > v5);
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 209);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_HasActions(uint64_t a1, BOOL *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 216)) > 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetZOrder()
{
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetZOrder(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_ResetNodeTree(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(uint64_t);
  const __CFArray *v11;
  CFIndex v12;
  const void *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_WORD *)(DerivedStorage + 208) = 257;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(DerivedStorage + 144) = _Q0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v9 = *(_QWORD *)(ProtocolVTable + 16);
    if (v9)
    {
      v10 = *(void (**)(uint64_t))(v9 + 312);
      if (v10)
        v10(a1);
    }
  }
  v11 = *(const __CFArray **)(DerivedStorage + 8);
  if (CFArrayGetCount(v11) >= 1)
  {
    v12 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
      FigCDSNodeProtocolGetProtocolID();
      v14 = CMBaseObjectGetProtocolVTable();
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 16);
        if (v15)
        {
          v16 = *(void (**)(const void *))(v15 + 256);
          if (v16)
            v16(ValueAtIndex);
        }
      }
      ++v12;
    }
    while (CFArrayGetCount(v11) > v12);
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  CGSize v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, CGRect *);
  uint64_t result;
  CGRect v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950096;
  v5 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 224) && *(_BYTE *)(a2 + 464))
  {
    CGContextSaveGState(*(CGContextRef *)(a2 + 288));
    v6 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v11.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    v11.size = v6;
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v8 = *(_QWORD *)(ProtocolVTable + 16);
      if (v8)
      {
        v9 = *(void (**)(uint64_t, CGRect *))(v8 + 104);
        if (v9)
          v9(a1, &v11);
      }
    }
    CGContextSetRGBStrokeColor(*(CGContextRef *)(a2 + 288), 1.0, 0.0, 1.0, 1.0);
    CGContextSetLineWidth(*(CGContextRef *)(a2 + 288), 3.0);
    CGContextStrokeRect(*(CGContextRef *)(a2 + 288), v11);
    CGContextRestoreGState(*(CGContextRef *)(a2 + 288));
  }
  result = 0;
  *(_BYTE *)(v5 + 208) = 0;
  return result;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950096;
  v4 = DerivedStorage;
  result = 0;
  *(_BYTE *)(v4 + 209) = 0;
  return result;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 0;
  else
    return 4294950096;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_Compose(uint64_t a1, void *a2)
{
  const __CFArray *v3;
  CFRange v5;

  v3 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 8);
  v5.length = CFArrayGetCount(v3);
  v5.location = 0;
  CFArrayApplyFunction(v3, v5, (CFArrayApplierFunction)updateDisplayChildNodes, a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  void (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v5 = *(_QWORD *)(ProtocolVTable + 16);
    if (v5)
    {
      v6 = *(void (**)(uint64_t, _OWORD *))(v5 + 296);
      if (v6)
      {
        v11[0] = v8;
        v11[1] = v9;
        v12 = v10;
        v6(v3, v11);
      }
    }
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_AddAction(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 216), a2);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 216));
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SetActions(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 216);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *(_QWORD *)(DerivedStorage + 216) = v5;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_GetActions(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 216);
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_SelectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage;
  CGSize v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, CGRect *);
  const __CFArray *v13;
  BOOL v14;
  _QWORD context[2];
  uint64_t v17;
  CGRect v18;
  CFRange v19;
  CGPoint v20;
  CGPoint v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v18.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v18.size = v9;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12)
        v12(a1, &v18);
    }
  }
  v17 = 0;
  *(CGFloat *)context = a3;
  *(CGFloat *)&context[1] = a4;
  v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)SelectChildNodes, context);
  if ((_BYTE)v17)
  {
    if (!a2)
      return 0;
  }
  else
  {
    v20.x = a3;
    v20.y = a4;
    *(_BYTE *)(DerivedStorage + 224) = CGRectContainsPoint(v18, v20);
    if (!a2)
      return 0;
  }
  if ((_BYTE)v17)
  {
    v14 = 1;
  }
  else
  {
    v21.x = a3;
    v21.y = a4;
    v14 = CGRectContainsPoint(v18, v21);
  }
  *a2 = v14;
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_UnselectAt(uint64_t a1, BOOL *a2, CGFloat a3, CGFloat a4)
{
  uint64_t DerivedStorage;
  CGSize v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, CGRect *);
  const __CFArray *v13;
  BOOL v14;
  _QWORD context[2];
  uint64_t v17;
  CGRect v18;
  CFRange v19;
  CGPoint v20;
  CGPoint v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v18.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v18.size = v9;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v11 = *(_QWORD *)(ProtocolVTable + 16);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, CGRect *))(v11 + 104);
      if (v12)
        v12(a1, &v18);
    }
  }
  v17 = 0;
  *(CGFloat *)context = a3;
  *(CGFloat *)&context[1] = a4;
  v13 = *(const __CFArray **)(DerivedStorage + 8);
  v19.length = CFArrayGetCount(v13);
  v19.location = 0;
  CFArrayApplyFunction(v13, v19, (CFArrayApplierFunction)UnselectChildNodes, context);
  if (!(_BYTE)v17)
  {
    v20.x = a3;
    v20.y = a4;
    if (CGRectContainsPoint(v18, v20))
      *(_BYTE *)(DerivedStorage + 224) = 0;
  }
  if (a2)
  {
    if ((_BYTE)v17)
    {
      v14 = 1;
    }
    else
    {
      v21.x = a3;
      v21.y = a4;
      v14 = CGRectContainsPoint(v18, v21);
    }
    *a2 = v14;
  }
  return 0;
}

uint64_t FigCDSNode_FigCDSNodeProtocol_IsSelected(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 224);
  return 0;
}

uint64_t updateDisplayChildNodes(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  FigCDSNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v5 = *(_QWORD *)(result + 16);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 288);
      if (v6)
        return v6(a1, a2);
    }
  }
  return result;
}

uint64_t SelectChildNodes(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v8 = 0;
  v4 = *(double *)a2;
  v5 = *(double *)(a2 + 8);
  FigCDSNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 336);
      if (v7)
      {
        result = ((uint64_t (*)(uint64_t, char *, double, double))v7)(a1, &v8, v4, v5);
        LOBYTE(v7) = v8 != 0;
      }
    }
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  if (*(_BYTE *)(a2 + 16))
    LOBYTE(v7) = 1;
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t UnselectChildNodes(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v8 = 0;
  v4 = *(double *)a2;
  v5 = *(double *)(a2 + 8);
  FigCDSNodeProtocolGetProtocolID();
  result = CMBaseObjectGetProtocolVTable();
  if (result)
  {
    v7 = *(_QWORD *)(result + 16);
    if (v7)
    {
      v7 = *(_QWORD *)(v7 + 344);
      if (v7)
      {
        result = ((uint64_t (*)(uint64_t, char *, double, double))v7)(a1, &v8, v4, v5);
        LOBYTE(v7) = v8 != 0;
      }
    }
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  if (*(_BYTE *)(a2 + 16))
    LOBYTE(v7) = 1;
  *(_BYTE *)(a2 + 16) = v7;
  return result;
}

uint64_t RegisterFigCDSNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSNodeBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSNode]"));
}

uint64_t FigByteFlumeCreateWithHTTP(uint64_t a1, const __CFURL *a2, const void *a3, const void *a4, const void *a5, NSObject *a6, int a7, const __CFDictionary *a8, _QWORD *a9)
{
  const __CFString *v14;
  CFTypeID TypeID;
  const void *Value;
  const void *v17;
  CFTypeID v18;
  const __CFString *v19;
  const __CFAllocator *v20;
  CFURLRef v21;
  CFURLRef v22;
  const __CFString *v23;
  const void *v24;
  const void *v25;
  CFTypeID v26;
  uint64_t v27;
  uint64_t DerivedStorage;
  const __CFNumber *v29;
  const __CFNumber *v30;
  CFTypeID v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const __CFDictionary *v36;
  const __CFDictionary *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  NSObject *v42;
  uint64_t v43;
  __CFDictionary *v44;
  const __CFAllocator *v45;
  CFURLRef v46;
  CFURLRef v47;
  const __CFString *v48;
  CFComparisonResult v49;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v51;
  uint64_t v52;
  const __CFDictionary *v53;
  __CFDictionary *MutableCopy;
  __CFDictionary *v55;
  const void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, __CFDictionary *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *);
  uint64_t v63;
  const void *v64;
  CFTypeRef v65;
  CFTypeRef v66;
  const __CFAllocator *v67;
  CFNumberRef v68;
  __CFDictionary *v69;
  CFStringRef v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v77;
  void (*v78)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v79;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v81;
  uint64_t v86;
  CFNumberRef number;
  CFTypeRef v88;
  _QWORD valuePtr[18];

  valuePtr[16] = *MEMORY[0x1E0C80C00];
  number = 0;
  v88 = 0;
  v86 = 0;
  if (FigNote_AllowInternalDefaultLogs())
    FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a9)
    goto LABEL_134;
  if (!a4)
    goto LABEL_20;
  v14 = (const __CFString *)FigCFHTTPCreateURLString(a2);
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a4)
    || (Value = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("Version"))) == 0
    || (v17 = Value, v18 = CFNumberGetTypeID(), v18 != CFGetTypeID(v17))
    || (LODWORD(valuePtr[0]) = 0, !CFNumberGetValue((CFNumberRef)v17, kCFNumberSInt32Type, valuePtr))
    || LODWORD(valuePtr[0]) != 1
    || (v19 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("URL"))) == 0)
  {
LABEL_57:
    a4 = 0;
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (!a7)
  {
    if (CFStringCompare(v19, v14, 0))
      goto LABEL_57;
    goto LABEL_16;
  }
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v21 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v19, 0);
  if (v21)
  {
    v22 = v21;
    v23 = (const __CFString *)FigCFURLCreateCacheKey();
    CFRelease(v22);
  }
  else
  {
    v23 = 0;
  }
  v46 = CFURLCreateWithString(v20, v14, 0);
  if (!v46)
  {
    v48 = 0;
LABEL_53:
    if (v23)
      CFRelease(v23);
    if (v48)
      CFRelease(v48);
    goto LABEL_57;
  }
  v47 = v46;
  v48 = (const __CFString *)FigCFURLCreateCacheKey();
  CFRelease(v47);
  if (!v23 || !v48)
    goto LABEL_53;
  v49 = CFStringCompare(v23, v48, 0);
  CFRelease(v23);
  CFRelease(v48);
  if (v49)
    goto LABEL_57;
LABEL_16:
  v24 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("Size"));
  if (!v24)
    goto LABEL_57;
  v25 = v24;
  v26 = CFNumberGetTypeID();
  if (v26 != CFGetTypeID(v25))
    goto LABEL_57;
  if (v14)
LABEL_19:
    CFRelease(v14);
LABEL_20:
  FigByteFlumeGetClassID();
  v27 = CMDerivedObjectCreate();
  if ((_DWORD)v27)
    goto LABEL_135;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigNetworkUrgencyMonitorCreate(a1, (uint64_t *)(DerivedStorage + 624));
  v27 = FigByteFlumeBaseInitialize(a1, DerivedStorage);
  if ((_DWORD)v27)
    goto LABEL_135;
  if (a8)
  {
    v29 = (const __CFNumber *)CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_MaxSizeAllowedForCellularAccess"));
    if (v29)
    {
      v30 = v29;
      v31 = CFGetTypeID(v29);
      if (v31 == CFNumberGetTypeID())
        *(_BYTE *)(DerivedStorage + 152) = CFNumberGetValue(v30, kCFNumberSInt64Type, (void *)(DerivedStorage + 160));
    }
    v32 = (const void *)*MEMORY[0x1E0C9AE50];
    *(_BYTE *)(DerivedStorage + 153) = v32 == CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_DisallowsExpensiveNetworkAccess"));
    *(_BYTE *)(DerivedStorage + 154) = v32 == CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_DisallowsConstrainedNetworkAccess"));
    *(_BYTE *)(DerivedStorage + 532) = v32 == CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_UseAWDL"));
    *(_BYTE *)(DerivedStorage + 248) = v32 == CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_DisableLargeDownload"));
    v33 = CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_HTTPRequestOptions"));
    if (v33)
      v33 = CFRetain(v33);
    *(_QWORD *)(DerivedStorage + 568) = v33;
    v34 = CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_AlternativeConfigurationOptions"));
    *(_BYTE *)(DerivedStorage + 184) = v32 == CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_AlwaysFollowRedirects"));
    v35 = CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_ParentNetworkActivity"));
    if (v35)
      v35 = CFRetain(v35);
    *(_QWORD *)(DerivedStorage + 640) = v35;
    FigCFDictionaryGetBooleanIfPresent();
    *(_BYTE *)(DerivedStorage + 533) = 0;
    *(_QWORD *)(DerivedStorage + 616) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v36 = (const __CFDictionary *)CFDictionaryGetValue(a8, CFSTR("FBFCreateOption_StoreBagConfiguration"));
    *(_BYTE *)(DerivedStorage + 632) = FigRCLGetNumberWithDefault(v36, CFSTR("enableHTTP3Connection")) != 0;
  }
  else
  {
    v34 = 0;
  }
  v37 = *(const __CFDictionary **)(DerivedStorage + 568);
  if (v37)
  {
    v38 = CFDictionaryGetValue(v37, CFSTR("FHRP_InterfaceName"));
    if (v38)
      v38 = CFRetain(v38);
    *(_QWORD *)(DerivedStorage + 536) = v38;
    v39 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 568), CFSTR("FHRP_StorageSession"));
    if (v39)
      v39 = CFRetain(v39);
    *(_QWORD *)(DerivedStorage + 232) = v39;
    v40 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 568), CFSTR("FHRP_ClientAuditToken"));
    if (v40)
      v40 = CFRetain(v40);
    *(_QWORD *)(DerivedStorage + 544) = v40;
    v41 = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 568), CFSTR("FHRP_ClientBundleIdentifier"));
    if (v41)
      v41 = CFRetain(v41);
    *(_QWORD *)(DerivedStorage + 552) = v41;
    *(_QWORD *)(DerivedStorage + 560) = FigCFHTTPCopyClientProcessName(*(const __CFData **)(DerivedStorage + 544));
  }
  v42 = FigHTTPSchedulerRetain(a6);
  v43 = *(_QWORD *)(DerivedStorage + 240);
  *(_QWORD *)(DerivedStorage + 48) = v42;
  if (v43)
  {
    v44 = 0;
    goto LABEL_87;
  }
  if (*(_QWORD *)(DerivedStorage + 232))
  {
    v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_72;
  }
  if (*(_QWORD *)(DerivedStorage + 568))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
LABEL_134:
      v27 = FigSignalErrorAt();
LABEL_135:
      v52 = v27;
      goto LABEL_136;
    }
    v51 = Mutable;
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    if (*(_BYTE *)(DerivedStorage + 532))
      CFDictionarySetValue(v51, CFSTR("FUSS_UseAWDL"), (const void *)*MEMORY[0x1E0C9AE50]);
    if (*(_BYTE *)(DerivedStorage + 533))
      CFDictionarySetValue(v51, CFSTR("FUSS_EnableMultiPath"), (const void *)*MEMORY[0x1E0C9AE50]);
    v52 = FigURLStorageSessionCreate(v51, (uint64_t *)(DerivedStorage + 232));
    CFRelease(v51);
    if ((_DWORD)v52)
      goto LABEL_136;
  }
  else
  {
    v52 = FigURLStorageSessionCreate(0, (uint64_t *)(DerivedStorage + 232));
    if ((_DWORD)v52)
    {
LABEL_136:
      v44 = 0;
      goto LABEL_125;
    }
  }
  v53 = *(const __CFDictionary **)(DerivedStorage + 568);
  v45 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v53)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v53);
    CFRelease(*(CFTypeRef *)(DerivedStorage + 568));
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  CFDictionarySetValue(MutableCopy, CFSTR("FHRP_StorageSession"), *(const void **)(DerivedStorage + 232));
  *(_QWORD *)(DerivedStorage + 568) = MutableCopy;
  if (!*(_QWORD *)(DerivedStorage + 232))
    goto LABEL_134;
LABEL_72:
  v55 = CFDictionaryCreateMutable(v45, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v44 = v55;
  if (!v55)
    goto LABEL_132;
  v56 = (const void **)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(DerivedStorage + 533))
    v56 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v55, CFSTR("FHRSP_EnableMultiPath"), *v56);
  v57 = *(_QWORD *)(DerivedStorage + 232);
  v58 = *(_QWORD *)(DerivedStorage + 48);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, __CFDictionary *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
  if (!v59)
  {
    v52 = 4294954514;
    goto LABEL_125;
  }
  v60 = v59(v57, v58, v44, DerivedStorage + 240);
  if ((_DWORD)v60)
    goto LABEL_133;
  v61 = *(_QWORD *)(DerivedStorage + 240);
  v62 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v62 && !v62(v61, CFSTR("FHRSP_MultiPathServiceType"), v45, &number) && number)
    CFNumberGetValue(number, kCFNumberSInt64Type, &v86);
  if (v86)
  {
    v63 = 3;
  }
  else
  {
    if (*(uint64_t *)(DerivedStorage + 616) < 3)
      goto LABEL_87;
    v63 = 2;
  }
  *(_QWORD *)(DerivedStorage + 616) = v63;
LABEL_87:
  *(_DWORD *)(DerivedStorage + 528) = a7;
  *(_DWORD *)(DerivedStorage + 72) = 0;
  if (a4)
  {
    v64 = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("FileName"));
    if (v64)
      *(_QWORD *)(DerivedStorage + 208) = CFRetain(v64);
    *(_QWORD *)(DerivedStorage + 272) = CFRetain(a4);
  }
  v60 = FigByteRateHistoryCreate((_QWORD *)(DerivedStorage + 344));
  if ((_DWORD)v60)
    goto LABEL_133;
  v60 = FigByteRateHistoryAllocSampleArray(*(_QWORD *)(DerivedStorage + 344), 64);
  if ((_DWORD)v60)
    goto LABEL_133;
  if (a3)
    v65 = CFRetain(a3);
  else
    v65 = FigCFHTTPCreateUserAgent();
  *(_QWORD *)(DerivedStorage + 200) = v65;
  *(_QWORD *)(DerivedStorage + 168) = CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 192) = FigCFHTTPCreateURLString(a2);
  v66 = a5;
  if (a5)
    v66 = CFRetain(a5);
  *(_QWORD *)(DerivedStorage + 224) = v66;
  *(_QWORD *)(DerivedStorage + 56) = 0;
  *(_QWORD *)(DerivedStorage + 64) = DerivedStorage + 56;
  *(_QWORD *)(DerivedStorage + 464) = 60000000000;
  if (FigHTTPCreateTimer(*(const void **)DerivedStorage, (uint64_t)fbf_NetworkMonitorTimerProc, *(NSObject **)(DerivedStorage + 48), (dispatch_object_t *)(DerivedStorage + 456), 8073216000.0))
  {
LABEL_132:
    v60 = FigSignalErrorAt();
LABEL_133:
    v52 = v60;
    goto LABEL_125;
  }
  valuePtr[0] = 0x4014000000000000;
  v67 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v68 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, valuePtr);
  v69 = CFDictionaryCreateMutable(v67, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v70 = CFStringCreateWithFormat(v67, 0, CFSTR("ByteFlume-%p"), v88);
  CFDictionarySetValue(v69, (const void *)*MEMORY[0x1E0CA4BA0], v70);
  CFDictionarySetValue(v69, (const void *)*MEMORY[0x1E0CA23D0], v68);
  *(_QWORD *)(DerivedStorage + 368) = CMMemoryPoolCreate(v69);
  if (v70)
    CFRelease(v70);
  if (v68)
    CFRelease(v68);
  if (v69)
    CFRelease(v69);
  *(_QWORD *)(DerivedStorage + 592) = FigNetworkInterfaceReporterCreate();
  FigByteFlumeCreateReportingAgent(DerivedStorage, (uint64_t)v34, *(const __CFDictionary **)(DerivedStorage + 224), *(const void **)(DerivedStorage + 560), *(const void **)(DerivedStorage + 552), 0, 0);
  v71 = *(_QWORD *)(DerivedStorage + 32);
  if (v71)
  {
    v72 = *(_QWORD *)(DerivedStorage + 616);
    v73 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v73)
      v73(v71, CFSTR("byteFlumeStats"), CFSTR("MPTCP"), v72, 0);
  }
  v74 = *(_QWORD *)(DerivedStorage + 32);
  if (v74)
  {
    v75 = v86;
    v76 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v76)
      v76(v74, CFSTR("byteFlumeStats"), CFSTR("MPSvc"), v75, 0);
    v77 = *(_QWORD *)(DerivedStorage + 32);
    if (v77)
    {
      v78 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 56);
      if (v78)
        v78(v77, CFSTR("byteFlumeStats"), CFSTR("CURL"), 0, 0);
    }
  }
  FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(DerivedStorage + 592), 0, 0, 0, 0);
  if (FigGetCFPreferenceNumberWithDefault() == 1)
    *(_BYTE *)(DerivedStorage + 184) = 1;
  v79 = nw_activity_create();
  *(_QWORD *)(DerivedStorage + 600) = v79;
  if (v79)
  {
    if (!*(_QWORD *)(DerivedStorage + 640) || (nw_activity_set_parent_activity(), *(_QWORD *)(DerivedStorage + 600)))
      nw_activity_activate();
  }
  if (dword_1EE2A2D10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v81 = v88;
  if (v88)
    v81 = CFRetain(v88);
  v52 = 0;
  *a9 = v81;
LABEL_125:
  if (v88)
    CFRelease(v88);
  if (number)
    CFRelease(number);
  if (v44)
    CFRelease(v44);
  return v52;
}

uint64_t fbf_NetworkMonitorTimerProc()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t UpTimeNanoseconds;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  int v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    FigRetainProxyGetOwner();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v1 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 448))
    {
      fbf_CancelReconnect(DerivedStorage);
      v2 = *(_QWORD *)(v1 + 480);
      v3 = *(_QWORD *)(v1 + 320);
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      if (v2 == v3)
      {
        v5 = *(_QWORD *)(v1 + 472);
        v6 = v5 <= UpTimeNanoseconds;
        v7 = v5 - UpTimeNanoseconds;
        if (!v6)
        {
LABEL_31:
          FigHTTPRescheduleTimer((double)v7 / 1000000000.0, *(_QWORD *)(v1 + 48), *(NSObject **)(v1 + 456));
          return FigRetainProxyUnlockMutex();
        }
        if (*(_BYTE *)(v1 + 17))
          goto LABEL_41;
        *(_BYTE *)(v1 + 17) = 1;
        v8 = *(_DWORD *)(v1 + 44);
        v9 = *(_BYTE *)(v1 + 40) && v8 == 1;
        v10 = v9 || v8 == 2;
        v11 = v10;
        FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(v1 + 592), 0, *(_QWORD *)(v1 + 32), 0x1E301B6D8, v11);
        fbf_ReleaseAndCreateLastError(v1, -12661, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("Host unavailable - inactivity detected"));
        fbf_ReportingAgentReportErrorEvent(v1, CFSTR("CoreMediaErrorDomain"), CFSTR("Host unavailable - inactivity detected"), 2u, -12661);
        FigByteFlumePostHostUnavailableNotification(v1);
        FigRetainProxyRetainOwner();
        FigCFHTTPStopAllReads(v1, -12935);
        FigRetainProxyReleaseOwner();
        if (!FigRetainProxyIsInvalidated())
        {
LABEL_41:
          if (*(_BYTE *)(v1 + 18) != 1 && !*(_BYTE *)(v1 + 392))
          {
            if (*(_QWORD *)(v1 + 512))
            {
              if (dword_1EE2A2D10)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else
            {
              if (dword_1EE2A2D10)
              {
                v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              *(_QWORD *)(v1 + 512) = FigGetUpTimeNanoseconds();
            }
            goto LABEL_37;
          }
        }
      }
      else
      {
        v14 = *(_QWORD *)(v1 + 320) - UpTimeNanoseconds + *(_QWORD *)(v1 + 464);
        if (*(_BYTE *)(v1 + 17) == 1)
        {
          *(_BYTE *)(v1 + 17) = 0;
          if (FigByteFlumePostHostAvailableNotification(v1))
            fbf_ReportingAgentResetErrorStats(v1);
        }
        *(_DWORD *)(v1 + 496) = 0;
        fbf_SetInactivityMonitorTimer(v1, v14);
      }
    }
    else
    {
      if (!*(_BYTE *)(DerivedStorage + 392))
      {
        if (*(_QWORD *)(DerivedStorage + 488))
        {
          v15 = FigGetUpTimeNanoseconds();
          v16 = *(_QWORD *)(v1 + 520);
          v6 = v16 <= v15;
          v7 = v16 - v15;
          if (v6)
          {
            fbf_CancelReconnect(v1);
            ++*(_DWORD *)(v1 + 496);
            *(_QWORD *)(v1 + 512) = 0;
            fbf_postConnectionToHostLostNotification(v1);
            return FigRetainProxyUnlockMutex();
          }
          goto LABEL_31;
        }
LABEL_37:
        fbf_ResumeRetryAttempt(v1, 0);
        return FigRetainProxyUnlockMutex();
      }
      if (dword_1EE2A2D10)
      {
        v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      FigHTTPRescheduleTimer(8073216000.0, *(_QWORD *)(v1 + 48), *(NSObject **)(v1 + 456));
      fbf_CancelReconnect(v1);
    }
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t FigCFHTTPResetURLAndRead(uint64_t a1, const void *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7, uint64_t a8, _QWORD *a9)
{
  uint64_t DerivedStorage;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v20 = 4294954511;
  }
  else
  {
    if (a2)
    {
      v22 = a8;
      v18 = *(const void **)(DerivedStorage + 176);
      *(_QWORD *)(DerivedStorage + 176) = a2;
      CFRetain(a2);
      if (v18)
        CFRelease(v18);
      *(_BYTE *)(DerivedStorage + 378) = 1;
      v19 = FigCFHTTPReadWithAdditionalHeaders(a1, a3, a4, a5, 0, a6, a7, v22, a9);
    }
    else
    {
      v19 = FigSignalErrorAt();
    }
    v20 = v19;
  }
  FigRetainProxyUnlockMutex();
  return v20;
}

uint64_t FigCFHTTPReadWithAdditionalHeaders(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8, _QWORD *a9)
{
  uint64_t DerivedStorage;
  int v17;
  uint64_t HTTPRequest;
  CFAbsoluteTime Current;
  uint64_t v20;
  const __CFDictionary *v21;
  const __CFAllocator *v22;
  __CFDictionary *MutableCopy;
  __CFDictionary *v24;
  _DWORD *v25;
  uint64_t v26;
  CFTypeRef v27;
  const void *Allocator;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  BOOL v33;
  int v35;
  uint64_t v36;
  void (*v37)(uint64_t);
  CFTypeRef v38;

  if (a6)
  {
    FigByteFlumeGetFigBaseObject(a1);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      HTTPRequest = 4294954511;
      goto LABEL_61;
    }
    v17 = *(_DWORD *)(DerivedStorage + 72);
    if (v17 == 1)
    {
      if (*(_QWORD *)(DerivedStorage + 216) <= a3)
        goto LABEL_64;
    }
    else if (v17 == 2)
    {
      goto LABEL_9;
    }
    if (*(_BYTE *)(DerivedStorage + 392))
    {
LABEL_9:
      HTTPRequest = 4294954361;
LABEL_61:
      FigRetainProxyUnlockMutex();
      return HTTPRequest;
    }
    Current = CFAbsoluteTimeGetCurrent();
    if (*(_DWORD *)(DerivedStorage + 72) == 1)
    {
      v20 = *(_QWORD *)(DerivedStorage + 216);
      if (a4 + a3 > v20)
        a4 = v20 - a3;
    }
    v21 = *(const __CFDictionary **)(DerivedStorage + 224);
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v21)
      MutableCopy = CFDictionaryCreateMutableCopy(v22, 0, v21);
    else
      MutableCopy = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v24 = MutableCopy;
    if (MutableCopy)
    {
      if (!*(_DWORD *)(DerivedStorage + 72))
        fbf_ApplyCacheHeaders(DerivedStorage, MutableCopy);
      if (a2)
        CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)FigCFHTTPAddHeader, v24);
      v25 = malloc_type_calloc(1uLL, 0x90uLL, 0x10E0040FE5446C7uLL);
      if (v25)
      {
        v26 = (uint64_t)v25;
        v25[27] = 1;
        *(_QWORD *)v25 = a3;
        *((_QWORD *)v25 + 1) = a4;
        if (a7)
          v27 = CFRetain(a7);
        else
          v27 = 0;
        *(_QWORD *)(v26 + 40) = v27;
        *(_QWORD *)(v26 + 48) = a8;
        *(_QWORD *)(v26 + 16) = a6;
        *(_QWORD *)(v26 + 56) = FigRetainProxyRetain();
        Allocator = CMMemoryPoolGetAllocator(*(CMMemoryPoolRef *)(DerivedStorage + 368));
        if (Allocator)
          Allocator = CFRetain(Allocator);
        *(_QWORD *)(v26 + 72) = Allocator;
        *(_QWORD *)(v26 + 88) = CFRetain(v24);
        if (a5)
          v29 = CFRetain(a5);
        else
          v29 = 0;
        *(_QWORD *)(v26 + 96) = v29;
        v30 = *(_QWORD *)(DerivedStorage + 80);
        *(_QWORD *)(DerivedStorage + 80) = v30 + 1;
        *(_QWORD *)(v26 + 64) = v30;
        if (!*(_QWORD *)(DerivedStorage + 56))
        {
          *(_BYTE *)(DerivedStorage + 448) = 1;
          fbf_SetInactivityMonitorTimer(DerivedStorage, *(_QWORD *)(DerivedStorage + 464));
        }
        *(_QWORD *)(v26 + 128) = 0;
        v31 = *(uint64_t **)(DerivedStorage + 64);
        *(_QWORD *)(v26 + 136) = v31;
        *v31 = v26;
        *(_QWORD *)(DerivedStorage + 64) = v26 + 128;
        *(_BYTE *)(v26 + 126) = 1;
        if (a9)
          *a9 = *(_QWORD *)(v26 + 64);
        if (*(double *)(DerivedStorage + 576) == 0.0)
          *(CFAbsoluteTime *)(DerivedStorage + 576) = Current;
        if (*(double *)(DerivedStorage + 584) == 0.0)
          *(CFAbsoluteTime *)(DerivedStorage + 584) = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)(v26 + 36) = fbf_CreateHTTPRequestFlags(DerivedStorage);
        HTTPRequest = fbf_CreateHTTPRequest(DerivedStorage, v26, *(_QWORD *)v26, *(_QWORD *)(v26 + 8));
        *(_DWORD *)(DerivedStorage + 284) = 0;
        *(_QWORD *)(DerivedStorage + 320) = FigGetUpTimeNanoseconds();
        if ((_DWORD)HTTPRequest)
        {
          if (!*(_DWORD *)(DerivedStorage + 72))
            *(_DWORD *)(DerivedStorage + 72) = 2;
          v32 = *(_DWORD *)(DerivedStorage + 44);
          if (*(_BYTE *)(DerivedStorage + 40))
            v33 = v32 == 1;
          else
            v33 = 0;
          v35 = v33 || v32 == 2;
          FigNetworkInterfaceReporterSamplePhysicalStatistics(*(_QWORD *)(DerivedStorage + 592), *(_QWORD *)(v26 + 24), *(_QWORD *)(DerivedStorage + 32), 0x1E301B6D8, v35);
          v36 = *(_QWORD *)(v26 + 24);
          if (v36)
          {
            v37 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
            if (v37)
              v37(v36);
          }
          ReadRequestRelease(v26);
        }
        else
        {
          ++*(_QWORD *)(DerivedStorage + 352);
          if (!*(_QWORD *)(DerivedStorage + 88))
          {
            v38 = *(CFTypeRef *)(v26 + 24);
            if (v38)
              v38 = CFRetain(v38);
            *(_QWORD *)(DerivedStorage + 88) = v38;
            *(_DWORD *)(DerivedStorage + 96) = *(_DWORD *)(v26 + 32);
          }
          HTTPRequest = 0;
          if (*(_BYTE *)(DerivedStorage + 378))
            *(_BYTE *)(DerivedStorage + 378) = 0;
        }
      }
      else
      {
        HTTPRequest = FigSignalErrorAt();
      }
      CFRelease(v24);
      goto LABEL_61;
    }
LABEL_64:
    HTTPRequest = FigSignalErrorAt();
    goto LABEL_61;
  }
  return 4294954365;
}

uint64_t FigByteFlumeSetAdditionalOpenRequestHeaders(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  FigByteFlumeGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v5 = 4294954511;
  }
  else
  {
    v4 = *(const void **)(DerivedStorage + 112);
    *(_QWORD *)(DerivedStorage + 112) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  FigRetainProxyUnlockMutex();
  return v5;
}

__CFString *FigCFHTTPCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  const __CFString *Value;
  const __CFString *v3;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigHTTPSession <%p>\n"), DerivedStorage);
  if (FigRetainProxyIsInvalidated())
  {
    CFStringAppend(Mutable, CFSTR(" Invalidated\n"));
  }
  else
  {
    Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 264), CFSTR("MIME Type"));
    CFStringAppend(Mutable, CFSTR(" URL      : "));
    CFStringAppend(Mutable, *(CFStringRef *)(DerivedStorage + 192));
    if (*(_QWORD *)(DerivedStorage + 176))
    {
      CFStringAppend(Mutable, CFSTR("\n redirect : "));
      v3 = CFURLGetString(*(CFURLRef *)(DerivedStorage + 176));
      CFStringAppend(Mutable, v3);
    }
    CFStringAppend(Mutable, CFSTR("\n MIME     : "));
    CFStringAppend(Mutable, Value);
    CFStringAppendFormat(Mutable, 0, CFSTR("\n fileSize : %lld bytes\n"), *(_QWORD *)(DerivedStorage + 216));
  }
  return Mutable;
}

void fbf_CancelReconnect(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 488);
  if (v2)
  {
    nw_connection_cancel(v2);
    nw_release(*(void **)(a1 + 488));
    *(_QWORD *)(a1 + 488) = 0;
  }
}

void RemoveReadRequestFromQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  NSObject *v7;

  v3 = *(_QWORD *)(a2 + 128);
  v4 = *(_QWORD **)(a2 + 136);
  if (v3)
  {
    *(_QWORD *)(v3 + 136) = v4;
    v4 = *(_QWORD **)(a2 + 136);
  }
  else
  {
    *(_QWORD *)(a1 + 64) = v4;
  }
  *v4 = v3;
  *(_BYTE *)(a2 + 126) = 0;
  if (*(_QWORD *)(a1 + 56))
    return;
  *(_BYTE *)(a1 + 448) = 0;
  FigHTTPRescheduleTimer(8073216000.0, *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 456));
  if (*(_BYTE *)(a1 + 392) == 1)
  {
    if (!dword_1EE2A2D10)
      return;
    goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 18) == 1)
  {
    if (dword_1EE2A2D10)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_QWORD *)(a1 + 512) = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 17) != 1)
      return;
    if (!*(_QWORD *)(a1 + 512))
    {
      if (!dword_1EE2A2D10)
        return;
LABEL_18:
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return;
    }
    if (dword_1EE2A2D10)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbf_ResumeRetryAttempt(a1, 0);
  }
}

void fbf_ResumeRetryAttempt(uint64_t a1, uint64_t a2)
{
  uint64_t UpTimeNanoseconds;
  uint64_t v5;
  double v6;
  BOOL v7;
  uint64_t v8;

  if (!*(_QWORD *)(a1 + 488) && *(_BYTE *)(a1 + 392) != 1 && *(_BYTE *)(a1 + 448) != 1 && *(_BYTE *)(a1 + 18) != 1)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v5 = *(_QWORD *)(a1 + 512);
      if (v5)
      {
        if (a2 >= 1 && UpTimeNanoseconds + a2 > v5)
        {
          v6 = (double)a2;
LABEL_13:
          FigHTTPRescheduleTimer(v6 / 1000000000.0, *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 456));
          return;
        }
        v7 = v5 <= UpTimeNanoseconds;
        v8 = v5 - UpTimeNanoseconds;
        if (!v7)
        {
          v6 = (double)v8;
          goto LABEL_13;
        }
        fbf_TryReconnect(a1);
      }
    }
  }
}

void fbf_TryReconnect(uint64_t a1)
{
  const __CFURL *v2;
  CFStringRef v3;
  uint64_t host_with_numeric_port;
  NSObject *v5;
  nw_parameters_t secure_tcp;
  NSObject *v7;
  uint64_t UpTimeNanoseconds;
  unint64_t v9;
  const __CFString *v10;
  const __CFString *v11;
  CFComparisonResult v12;
  int v13;
  const __CFData *v14;
  const __CFData *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  CFTypeRef v22;
  _QWORD handler[5];
  __int128 v24;
  __int128 v25;
  UInt8 buffer[16];
  __int128 v27;
  void *v28;
  CFRange v29;

  v28 = 0;
  v2 = *(const __CFURL **)(a1 + 176);
  if (v2 || (v2 = *(const __CFURL **)(a1 + 168)) != 0)
  {
    v3 = CFURLCopyHostName(v2);
    if (v3)
    {
      if (CFURLGetPortNumber(v2) != -1)
        goto LABEL_5;
      v10 = CFURLCopyScheme(v2);
      if (v10)
      {
        v11 = v10;
        if (CFStringCompare(v10, CFSTR("http"), 1uLL))
        {
          v12 = CFStringCompare(v11, CFSTR("https"), 1uLL);
          CFRelease(v11);
          if (v12)
          {
            v13 = -12931;
            goto LABEL_32;
          }
        }
        else
        {
          CFRelease(v11);
        }
LABEL_5:
        if (FigCFStringGetCStringPtrAndBufferToFree())
        {
          host_with_numeric_port = nw_endpoint_create_host_with_numeric_port();
          if (host_with_numeric_port)
          {
            v5 = host_with_numeric_port;
            secure_tcp = nw_parameters_create_secure_tcp((nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED20], (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E0CCED18]);
            if (!secure_tcp)
            {
              v13 = FigSignalErrorAt();
              goto LABEL_31;
            }
            v7 = secure_tcp;
            UpTimeNanoseconds = FigGetUpTimeNanoseconds();
            v9 = UpTimeNanoseconds;
            if (!*(_DWORD *)(a1 + 496))
            {
              *(_QWORD *)(a1 + 504) = UpTimeNanoseconds;
              *(_QWORD *)(a1 + 440) = 0;
              *(_QWORD *)(a1 + 520) = UpTimeNanoseconds + 300000000000;
            }
            if (*(_QWORD *)(a1 + 552))
            {
              *(_QWORD *)buffer = 0;
              FigCFStringGetCStringPtrAndBufferToFree();
              nw_parameters_set_source_application_by_bundle_id();
              free(0);
            }
            else
            {
              v14 = *(const __CFData **)(a1 + 544);
              if (v14)
              {
                *(_OWORD *)buffer = 0u;
                v27 = 0u;
                if (CFDataGetLength(v14) != 32)
                  goto LABEL_43;
                v15 = *(const __CFData **)(a1 + 544);
                v29.length = CFDataGetLength(v15);
                v29.location = 0;
                CFDataGetBytes(v15, v29, buffer);
                v24 = *(_OWORD *)buffer;
                v25 = v27;
                nw_parameters_set_source_application();
              }
            }
            if (*(_BYTE *)(a1 + 152))
            {
              v16 = *(_QWORD *)(a1 + 160);
              if (!v16 || *(_QWORD *)(a1 + 216) > v16)
                nw_parameters_prohibit_interface_type(v7, nw_interface_type_cellular);
            }
            v17 = *(_QWORD *)(a1 + 520);
            v18 = v17 - 60000000000;
            v19 = v17 - v9;
            if (v18 >= v9)
              v20 = v19;
            else
              v20 = 60000000000;
            v21 = nw_connection_create(v5, v7);
            *(_QWORD *)(a1 + 488) = v21;
            if (v21)
            {
              v22 = *(CFTypeRef *)a1;
              if (*(_QWORD *)a1)
              {
                v22 = CFRetain(*(CFTypeRef *)a1);
                v21 = *(NSObject **)(a1 + 488);
              }
              handler[0] = MEMORY[0x1E0C809B0];
              handler[1] = 0x40000000;
              handler[2] = __fbf_TryReconnect_block_invoke;
              handler[3] = &unk_1E2F89E30;
              handler[4] = v22;
              nw_connection_set_state_changed_handler(v21, handler);
              FigHTTPRescheduleTimer((double)v20 / 1000000000.0, *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 456));
              nw_connection_set_queue(*(nw_connection_t *)(a1 + 488), *(dispatch_queue_t *)(a1 + 48));
              nw_connection_start(*(nw_connection_t *)(a1 + 488));
              v13 = 0;
              goto LABEL_30;
            }
LABEL_43:
            v13 = FigSignalErrorAt();
LABEL_30:
            nw_release(v7);
LABEL_31:
            nw_release(v5);
            goto LABEL_32;
          }
        }
      }
    }
    v13 = FigSignalErrorAt();
    goto LABEL_32;
  }
  v13 = FigSignalErrorAt();
  v3 = 0;
LABEL_32:
  if (v28)
    free(v28);
  if (v3)
    CFRelease(v3);
  if (v13)
  {
    *(_QWORD *)(a1 + 512) = FigGetUpTimeNanoseconds() + 30000000000;
    FigHTTPRescheduleTimer(30.0, *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 456));
  }
}

void fbf_SetRetryAttemptTimer(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 512) = FigGetUpTimeNanoseconds() + a2;
  FigHTTPRescheduleTimer((double)a2 / 1000000000.0, *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 456));
}

uint64_t fbf_ReleaseAndRetainLastErrorFromCFError(uint64_t result, CFTypeRef cf)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;

  if (result)
  {
    v3 = result;
    v4 = *(const void **)(result + 24);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 24) = 0;
    }
    *(_QWORD *)(v3 + 328) = 0;
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    *(_QWORD *)(v3 + 24) = v5;
    result = FigGetUpTimeNanoseconds();
    *(_QWORD *)(v3 + 328) = result;
  }
  return result;
}

void fbf_postConnectionToHostLostNotification(uint64_t a1)
{
  if (FigByteFlumePostConnectionToHostLostNotification(a1))
    fbf_ReportingAgentReportErrorEvent(a1, CFSTR("CoreMediaErrorDomain"), CFSTR("Connection to host lost"), 2u, -12661);
}

uint64_t fbf_ReportingAgentResetErrorStats(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t (*v7)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD);
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 32);
    if (v2)
    {
      result = CMBaseObjectGetVTable();
      v3 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(result + 16) + 48);
      if (v3)
        result = v3(v2, CFSTR("byteFlumeStats"), CFSTR("FlumeErrMsg"), &stru_1E2FD85F8, 0);
      v4 = *(_QWORD *)(v1 + 32);
      if (v4)
      {
        result = CMBaseObjectGetVTable();
        v5 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16)
                                                                                           + 56);
        if (v5)
          result = v5(v4, CFSTR("byteFlumeStats"), CFSTR("FlumeErrCode"), 0, 0);
        v6 = *(_QWORD *)(v1 + 32);
        if (v6)
        {
          result = CMBaseObjectGetVTable();
          v7 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, const __CFString *, _QWORD))(*(_QWORD *)(result + 16) + 48);
          if (v7)
            result = v7(v6, CFSTR("byteFlumeStats"), CFSTR("FlumeErrDomain"), &stru_1E2FD85F8, 0);
          v8 = *(_QWORD *)(v1 + 32);
          if (v8)
          {
            result = CMBaseObjectGetVTable();
            v9 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(result + 16)
                                                                                               + 56);
            if (v9)
              return v9(v8, CFSTR("byteFlumeStats"), CFSTR("FlumeErrType"), 0, 0);
          }
        }
      }
    }
  }
  return result;
}

void fbf_ReportingAgentReportErrorEvent(uint64_t a1, const __CFString *a2, CFStringRef a3, unsigned int a4, CFIndex a5)
{
  uint64_t v6;
  __CFError *v9;
  CFIndex Code;
  CFErrorDomain Domain;
  CFStringRef v12;
  CFStringRef v13;
  BOOL v14;
  void (*v15)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD);
  uint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD);
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD);
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD);
  uint64_t v22;
  void (*v23)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);

  if (!a1)
    return;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    return;
  v9 = *(__CFError **)(a1 + 24);
  if (v9)
  {
    Code = CFErrorGetCode(v9);
    Domain = CFErrorGetDomain(*(CFErrorRef *)(a1 + 24));
    v12 = CFErrorCopyDescription(*(CFErrorRef *)(a1 + 24));
    v13 = v12;
    v6 = *(_QWORD *)(a1 + 32);
    v14 = v12 == 0;
    if (v12)
      a3 = v12;
    if (!v6)
      goto LABEL_11;
  }
  else
  {
    Code = a5;
    Domain = a2;
    v13 = 0;
    v14 = 1;
  }
  v15 = *(void (**)(uint64_t, __CFString *, __CFString *, CFStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 48);
  if (v15)
    v15(v6, CFSTR("byteFlumeStats"), CFSTR("FlumeErrMsg"), a3, 0);
LABEL_11:
  v16 = *(_QWORD *)(a1 + 32);
  if (v16)
  {
    v17 = *(void (**)(uint64_t, __CFString *, __CFString *, CFIndex, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v17)
      v17(v16, CFSTR("byteFlumeStats"), CFSTR("FlumeErrCode"), Code, 0);
    v18 = *(_QWORD *)(a1 + 32);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, __CFString *, __CFString *, CFErrorDomain, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 48);
      if (v19)
        v19(v18, CFSTR("byteFlumeStats"), CFSTR("FlumeErrDomain"), Domain, 0);
      v20 = *(_QWORD *)(a1 + 32);
      if (v20)
      {
        v21 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 56);
        if (v21)
          v21(v20, CFSTR("byteFlumeStats"), CFSTR("FlumeErrType"), a4, 0);
        v22 = *(_QWORD *)(a1 + 32);
        if (v22)
        {
          v23 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
          if (v23)
            v23(v22, CFSTR("byteFlumeStats"), 502, 0, 0);
        }
      }
    }
  }
  if (!v14)
    CFRelease(v13);
}

uint64_t FigCFHTTPCopyBandwidthInfo(uint64_t a1, double *a2, double *a3, double *a4)
{
  uint64_t UpTimeNanoseconds;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  double v13;

  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (a1)
  {
    v9 = UpTimeNanoseconds;
    if (a2 || a3 || a4)
    {
      FigRetainProxyLockMutex();
      if (FigRetainProxyIsInvalidated())
      {
        v10 = 4294954511;
LABEL_27:
        FigRetainProxyUnlockMutex();
        return v10;
      }
      if (*(_QWORD *)(a1 + 56) && *(_DWORD *)(a1 + 284) && (unint64_t)(v9 - *(_QWORD *)(a1 + 320)) >= 0xEE6B2801)
      {
        FigByteRateHistoryClear(*(_QWORD *)(a1 + 344));
        if (a2)
          *a2 = 0.0;
        if (a3)
          *a3 = 0.0;
        if (a4)
        {
          v10 = 0;
LABEL_24:
          *a4 = 0.0;
          goto LABEL_27;
        }
      }
      else
      {
        if (!FigByteRateHistoryHasCompleteSample(*(_QWORD *)(a1 + 344))
          && *(_QWORD *)(a1 + 288) < *(uint64_t *)(a1 + 216) >> 2)
        {
          v12 = 0;
          v13 = 0.0;
          FigByteRateHistoryReportAverage(*(_QWORD *)(a1 + 344), &v13, (double *)&v12);
          if (v13 <= 0.0)
          {
            v10 = 4294954513;
            goto LABEL_27;
          }
          if (a2)
            *a2 = v13;
          if (a3)
            *(_QWORD *)a3 = v12;
          v10 = 0;
          if (!a4)
            goto LABEL_27;
          goto LABEL_24;
        }
        FigByteRateHistoryReportAverage(*(_QWORD *)(a1 + 344), a2, a3);
        FigByteRateHistoryReportMovingAverage(*(_QWORD *)(a1 + 344), a4);
      }
      v10 = 0;
      goto LABEL_27;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fbf_CreateAccessLog(uint64_t a1, const __CFAllocator *a2, __CFDictionary **a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  const void *v8;
  const __CFData *v9;
  CFAllocatorRef *v10;
  const __CFData *v11;
  const __CFData *v12;
  const __CFAllocator *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  const __CFURL *v28;
  CFTypeRef v29;
  const void *v30;
  const __CFDictionary *v31;
  const void *Value;
  __CFDictionary *v33;
  __CFDictionary *v34;
  uint64_t v35;
  double valuePtr;

  valuePtr = 0.0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    v35 = 4294954511;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      CFDictionaryAddValue(Mutable, CFSTR("s-playback-type"), CFSTR("FILE"));
      v8 = *(const void **)(a1 + 560);
      if (v8)
        CFDictionarySetValue(v7, CFSTR("c-client-name"), v8);
      v9 = *(const __CFData **)(a1 + 136);
      v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      if (v9)
      {
        v11 = FigCFHTTPCreateAddressString(v9);
        if (v11)
        {
          v12 = v11;
          CFDictionaryAddValue(v7, CFSTR("s-ip"), v11);
          CFRelease(v12);
        }
        v13 = *v10;
        v14 = CFNumberCreate(*v10, kCFNumberCFIndexType, (const void *)(a1 + 144));
        if (v14)
        {
          v15 = v14;
          CFDictionaryAddValue(v7, CFSTR("s-ip-changes"), v14);
          CFRelease(v15);
        }
      }
      else
      {
        v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      }
      valuePtr = (double)*(uint64_t *)(a1 + 312) / 1000000000.0;
      v16 = CFNumberCreate(v13, kCFNumberDoubleType, &valuePtr);
      if (v16)
      {
        v17 = v16;
        CFDictionaryAddValue(v7, CFSTR("c-transfer-duration"), v16);
        CFRelease(v17);
      }
      v18 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 288));
      if (v18)
      {
        v19 = v18;
        CFDictionaryAddValue(v7, CFSTR("bytes"), v18);
        CFRelease(v19);
      }
      if (*(uint64_t *)(a1 + 296) >= 1)
      {
        v20 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 296));
        if (v20)
        {
          v21 = v20;
          CFDictionaryAddValue(v7, CFSTR("bytes-cellular"), v20);
          CFRelease(v21);
        }
        if (*(uint64_t *)(a1 + 304) >= 1)
        {
          v22 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 304));
          if (v22)
          {
            v23 = v22;
            CFDictionaryAddValue(v7, CFSTR("bytes-cellular-fallback"), v22);
            CFRelease(v23);
          }
        }
      }
      v24 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 352));
      if (v24)
      {
        v25 = v24;
        CFDictionaryAddValue(v7, CFSTR("sc-count"), v24);
        CFRelease(v25);
      }
      v26 = CFNumberCreate(v13, kCFNumberSInt64Type, (const void *)(a1 + 360));
      if (v26)
      {
        v27 = v26;
        CFDictionaryAddValue(v7, CFSTR("sc-wwan-count"), v26);
        CFRelease(v27);
      }
      v28 = *(const __CFURL **)(a1 + 176);
      if (!v28)
        v28 = *(const __CFURL **)(a1 + 168);
      v29 = FigCFHTTPCreateURLString(v28);
      if (v29)
      {
        v30 = v29;
        CFDictionaryAddValue(v7, CFSTR("uri"), v29);
        CFRelease(v30);
      }
      v31 = *(const __CFDictionary **)(a1 + 224);
      if (v31)
      {
        Value = CFDictionaryGetValue(v31, CFSTR("X-Playback-Session-Id"));
        if (Value)
          CFDictionaryAddValue(v7, CFSTR("cs-guid"), Value);
      }
      if (*(double *)(a1 + 576) > 0.0)
        FigCFDictionarySetDouble();
      if (*(double *)(a1 + 584) > 0.0)
        FigCFDictionarySetDouble();
      if (*(uint64_t *)(a1 + 336) >= 1)
        FigCFDictionarySetInt32();
      v33 = FigNetworkInterfaceReporterCopyPhysicalStatistics(*(_QWORD *)(a1 + 592));
      if (v33)
      {
        v34 = v33;
        FigAccessLogUpdateWithPhysicalStatistcs(v7, v33);
        CFRelease(v34);
      }
      v35 = 0;
      *a3 = v7;
    }
    else
    {
      v35 = 4294954510;
    }
  }
  FigRetainProxyUnlockMutex();
  return v35;
}

const __CFString *fbf_GetInterfaceType(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  int v5;
  CFTypeRef v6;
  int InterfaceTypeFromCFNStats;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      cf = 0;
      v4 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
      if (v4)
      {
        v5 = v4(v3, CFSTR("FHRP_CFNetworkTimingData"), *MEMORY[0x1E0C9AE00], &cf);
        v6 = cf;
        if (v5)
        {
          InterfaceTypeFromCFNStats = 0;
          if (!cf)
            goto LABEL_7;
        }
        else
        {
          InterfaceTypeFromCFNStats = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)cf);
          v6 = cf;
          if (!cf)
          {
LABEL_7:
            if (InterfaceTypeFromCFNStats)
              return FigErrorLogGetStringFromInterfaceType(InterfaceTypeFromCFNStats);
            goto LABEL_8;
          }
        }
        CFRelease(v6);
        goto LABEL_7;
      }
    }
  }
LABEL_8:
  InterfaceTypeFromCFNStats = FigNetworkInterfaceReporterGetInterfaceType(*(_BYTE **)(a1 + 592));
  if (!InterfaceTypeFromCFNStats)
  {
    if (*(_QWORD *)(a1 + 408))
      InterfaceTypeFromCFNStats = FigNetworkPathInformationGetInterfaceType();
    else
      InterfaceTypeFromCFNStats = 0;
  }
  return FigErrorLogGetStringFromInterfaceType(InterfaceTypeFromCFNStats);
}

void fbf_releaseInteractivePlaybackAssertion(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    if (dword_1EE2A2D10)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v4 = *(_DWORD *)(DerivedStorage + 380) - 1;
    *(_DWORD *)(DerivedStorage + 380) = v4;
    if (!v4 && (*(_BYTE *)(DerivedStorage + 17) || *(_BYTE *)(DerivedStorage + 392)))
    {
      if (dword_1EE2A2D10)
      {
        v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      fbf_FailImmediately(DerivedStorage);
    }
  }
  FigRetainProxyUnlockMutex();
  if (a1)
    CFRelease(a1);
}

void fbf_FailImmediately(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;

  if (!*(_BYTE *)(a1 + 448))
    FigHTTPRescheduleTimer(8073216000.0, *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 456));
  fbf_CancelReconnect(a1);
  *(_QWORD *)(a1 + 512) = 0;
  if (!*(_BYTE *)(a1 + 17))
  {
    if (dword_1EE2A2D10)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_BYTE *)(a1 + 17) = 1;
    FigByteFlumePostHostUnavailableNotification(a1);
  }
  if (!*(_BYTE *)(a1 + 18))
  {
    if (dword_1EE2A2D10)
    {
      v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbf_postConnectionToHostLostNotification(a1);
  }
}

const void *FigCFHTTPMatchesIdentifier(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  uint64_t DerivedStorage;

  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return 0;
  FigByteFlumeGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return FigCFHTTPMatchCacheHeaders((const __CFDictionary *)cf, *(_QWORD *)(DerivedStorage + 216), *(const __CFString **)(DerivedStorage + 192), *(_DWORD *)(DerivedStorage + 528), *(const __CFDictionary **)(DerivedStorage + 264));
}

uint64_t FigCFHTTPOpen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  const __CFDictionary *v6;
  uint64_t v7;
  CFAbsoluteTime Current;
  const __CFDictionary *v9;
  uint64_t v10;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  unsigned int v13;
  uint64_t v14;
  const void *OptionsAndSetNWActivity;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __CFDictionary *, const void *, uint64_t, _OWORD *, _QWORD, uint64_t, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v23;
  const void *v24;
  _OWORD v26[8];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      v23 = 4294954511;
    }
    else
    {
      if (!*(_DWORD *)(DerivedStorage + 72))
      {
        *(_QWORD *)(DerivedStorage + 104) = a2;
        *(_QWORD *)(DerivedStorage + 120) = a3;
        v6 = *(const __CFDictionary **)(DerivedStorage + 112);
        v7 = CMBaseObjectGetDerivedStorage();
        Current = CFAbsoluteTimeGetCurrent();
        v9 = *(const __CFDictionary **)(v7 + 224);
        v10 = *MEMORY[0x1E0C9AE00];
        if (v9)
          MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v9);
        else
          MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v12 = MutableCopy;
        if (!MutableCopy)
        {
          *(_DWORD *)(v7 + 72) = 2;
          *(_BYTE *)(v7 + 384) = 0;
          *(_QWORD *)(v7 + 104) = 0;
          *(_QWORD *)(v7 + 120) = 0;
          v23 = 4294954363;
LABEL_31:
          v24 = *(const void **)(DerivedStorage + 112);
          if (v24)
          {
            CFRelease(v24);
            *(_QWORD *)(DerivedStorage + 112) = 0;
          }
          goto LABEL_33;
        }
        fbf_ApplyCacheHeaders(v7, MutableCopy);
        if (v6)
          CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)FigCFHTTPAddHeader, v12);
        if (*(_BYTE *)(v7 + 532))
          v13 = 17;
        else
          v13 = 1;
        if (!*(_BYTE *)(v7 + 248))
          v13 |= 0x40u;
        if (*(_BYTE *)(v7 + 632))
          v14 = v13 | 0x8000;
        else
          v14 = v13;
        if (*(double *)(v7 + 576) == 0.0)
          *(CFAbsoluteTime *)(v7 + 576) = Current;
        if (*(double *)(v7 + 584) == 0.0)
          *(CFAbsoluteTime *)(v7 + 584) = CFAbsoluteTimeGetCurrent();
        OptionsAndSetNWActivity = (const void *)fbf_CopyHttpRequestCreateOptionsAndSetNWActivity(v7, 2);
        *(_BYTE *)(v7 + 384) = 1;
        v16 = *(_QWORD *)(v7 + 240);
        v17 = *(_QWORD *)(v7 + 168);
        v18 = *(_QWORD *)(v7 + 200);
        v19 = *(_QWORD *)v7;
        v20 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, __CFDictionary *, const void *, uint64_t, _OWORD *, _QWORD, uint64_t, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v20)
        {
          memset(v26, 0, 112);
          v21 = v20(v16, v10, 0, v17, v18, v12, OptionsAndSetNWActivity, v14, v26, 0, 2, 0, FigCFHTTPOpenResponse, v19, v7 + 88, v7 + 96);
          if (!(_DWORD)v21)
          {
            FigNetworkUrgencyMonitorAddHTTPRequest(*(_QWORD *)(v7 + 624), *(_QWORD *)(v7 + 88));
            if (dword_1EE2A2D10)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v23 = 0;
            goto LABEL_29;
          }
          v23 = v21;
        }
        else
        {
          v23 = 4294954514;
        }
        *(_DWORD *)(v7 + 72) = 2;
        *(_BYTE *)(v7 + 384) = 0;
        *(_QWORD *)(v7 + 104) = 0;
        *(_QWORD *)(v7 + 120) = 0;
LABEL_29:
        CFRelease(v12);
        if (OptionsAndSetNWActivity)
          CFRelease(OptionsAndSetNWActivity);
        goto LABEL_31;
      }
      v23 = FigSignalErrorAt();
    }
LABEL_33:
    FigRetainProxyUnlockMutex();
    return v23;
  }
  return FigSignalErrorAt();
}

void fbf_ApplyCacheHeaders(uint64_t a1, __CFDictionary *a2)
{
  const __CFDictionary *v3;
  const __CFString *Value;
  const __CFString *v6;
  const __CFBoolean *v7;
  int v8;
  __CFString *Mutable;
  __CFString *v10;
  const void *v11;

  v3 = *(const __CFDictionary **)(a1 + 272);
  if (v3)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v3, CFSTR("ETag"));
    if (Value)
    {
      v6 = Value;
      v7 = (const __CFBoolean *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), CFSTR("ETag weak"));
      if (v7)
      {
        v8 = CFBooleanGetValue(v7);
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        v10 = Mutable;
        if (v8)
          CFStringAppend(Mutable, CFSTR("W/"));
      }
      else
      {
        v10 = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      }
      CFStringAppend(v10, v6);
      CFDictionaryAddValue(a2, CFSTR("If-None-Match"), v10);
      CFRelease(v10);
    }
    v11 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 272), CFSTR("Last-Modified"));
    if (v11)
      CFDictionaryAddValue(a2, CFSTR("If-Modified-Since"), v11);
  }
}

void FigCFHTTPAddHeader(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionaryAddValue(theDict, key, value);
}

uint64_t fbf_CopyHttpRequestCreateOptionsAndSetNWActivity(uint64_t a1, int a2)
{
  uint64_t MutableCopy;
  uint64_t v5;
  const void *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  uint64_t valuePtr;

  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if ((a2 - 2) <= 2)
  {
    v5 = nw_activity_create();
    if (v5)
    {
      v6 = (const void *)v5;
      if (*(_QWORD *)(a1 + 600))
        nw_activity_set_parent_activity();
      FigCFDictionarySetValue();
      CFRelease(v6);
    }
  }
  v7 = (const __CFNumber *)FigNetworkUrgencyMonitorCopyExpectedProgressTarget(*(_QWORD *)(a1 + 624));
  if (v7)
  {
    v8 = v7;
    valuePtr = 0;
    CFNumberGetValue(v7, kCFNumberSInt64Type, &valuePtr);
    FigGetContinuousUpTimeNanoseconds();
    FigCFDictionarySetValue();
    CFRelease(v8);
  }
  return MutableCopy;
}

uint64_t fbf_ReleaseAndCreateLastError(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  const void *v8;

  if (result)
  {
    v7 = (_QWORD *)result;
    v8 = *(const void **)(result + 24);
    if (v8)
    {
      CFRelease(v8);
      v7[3] = 0;
    }
    v7[41] = 0;
    v7[3] = FigCreateCFError(a3, a2, a4, 0, 0, v7[21], 0);
    result = FigGetUpTimeNanoseconds();
    v7[41] = result;
  }
  return result;
}

void fbf_ConfigurePathEvaluator(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  CFMutableDictionaryRef OptionsFromHTTPRequestOptions;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!*(_QWORD *)(a1 + 400))
  {
    v4 = (uint64_t *)(a1 + 400);
    OptionsFromHTTPRequestOptions = FigByteFlumeCreateNetworkPathEvaluatorCreateOptionsFromHTTPRequestOptions(*(_QWORD *)(a1 + 568));
    v6 = *(_QWORD *)(a1 + 176);
    if (!v6)
      v6 = *(_QWORD *)(a1 + 168);
    if (!FigNetworkPathEvaluatorCreate(*MEMORY[0x1E0C9AE00], v6, OptionsFromHTTPRequestOptions, *(_QWORD *)(a1 + 48), a2, fbf_UpdatePathEvaluation, v4))
    {
      v7 = *(const void **)(a1 + 408);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1 + 408) = 0;
      }
      v8 = *v4;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v9)
        v10 = v9(v8);
      else
        v10 = 0;
      *(_QWORD *)(a1 + 408) = v10;
      *(_DWORD *)(a1 + 416) = 0;
      if (dword_1EE2A2D10)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (OptionsFromHTTPRequestOptions)
      CFRelease(OptionsFromHTTPRequestOptions);
  }
}

void fbf_GetResponseProperties(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  const void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, __CFString *, uint64_t, _QWORD *);
  const void *v8;
  void (*v9)(uint64_t, __CFString *, uint64_t, _QWORD *);
  const void *v10;
  void (*v11)(uint64_t, __CFString *, uint64_t, _QWORD *);

  v4 = a2 + 32;
  v5 = (const void *)a2[32];
  if (v5)
  {
    *v4 = 0;
    CFRelease(v5);
  }
  v6 = *MEMORY[0x1E0C9AE00];
  v7 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v7)
    v7(a1, CFSTR("FHRP_HTTPResponseHeaders"), v6, v4);
  v8 = (const void *)a2[22];
  if (v8)
  {
    a2[22] = 0;
    CFRelease(v8);
  }
  v9 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    v9(a1, CFSTR("FHRP_HTTPFinalURL"), v6, a2 + 22);
  v10 = (const void *)a2[17];
  if (v10)
  {
    a2[17] = 0;
    CFRelease(v10);
  }
  v11 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v11)
    v11(a1, CFSTR("FHRP_RemoteIPAddress"), v6, a2 + 17);
  fbf_ReportingAgentSetServerAddress((uint64_t)a2);
}

void fbf_ReportingAgentSetCDNHeaders(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  if (a1)
  {
    if (a2)
    {
      if (*(_QWORD *)(a1 + 32))
      {
        v4 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
        if (v4)
        {
          v4(a2, CFSTR("FHRP_HTTPResponseHeaders"), *MEMORY[0x1E0C9AE00], &cf);
          if (cf)
          {
            fbf_ReportingAgentSetHTTPHeaderField(a1, (CFHTTPMessageRef)cf, CFSTR("Via"), 0x1E301D698);
            fbf_ReportingAgentSetHTTPHeaderField(a1, (CFHTTPMessageRef)cf, CFSTR("CDN-Server"), 0x1E301D9B8);
            if (cf)
              CFRelease(cf);
          }
        }
      }
    }
  }
}

void fbf_ReleaseAndSetLastErrorFromHTTPRequest(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  void (*v10)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v11;
  CFTypeRef cf;
  CFTypeRef v13;

  cf = 0;
  v13 = 0;
  if (a1 && a2 && a4)
  {
    *a4 = 0;
    v8 = *MEMORY[0x1E0C9AE00];
    v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 48);
    if (v9 && (v9(a2, CFSTR("FHRP_ErrorReturned"), v8, &v13), v13))
    {
      fbf_ReleaseAndRetainLastErrorFromCFError(a1, v13);
      *a4 = 1;
    }
    else
    {
      v10 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v10)
      {
        v10(a2, CFSTR("FHRP_ErrorComment"), v8, &cf);
        v11 = cf;
      }
      else
      {
        v11 = 0;
      }
      fbf_ReleaseAndCreateLastError(a1, a3, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)v11);
      if (cf)
        CFRelease(cf);
    }
  }
  if (v13)
    CFRelease(v13);
}

BOOL fbf_httpRequestHandlesNetworkTransitions(uint64_t a1)
{
  void (*v2)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef cf;

  cf = 0;
  v2 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 48);
  if (v2)
  {
    v2(a1, CFSTR("FHRP_HandlesNetworkTransitions"), *MEMORY[0x1E0C9AE00], &cf);
    v3 = cf;
    v4 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v3 = 0;
    v4 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  }
  return v4 == v3;
}

_QWORD *fbf_UpdateAndReportMultiPathActivity(_QWORD *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);

  v2 = result[77];
  switch(v2)
  {
    case 5:
      if (!a2)
        return result;
      break;
    case 4:
      if (a2)
        return result;
      break;
    case 3:
      if (a2)
        v3 = 4;
      else
        v3 = 5;
      goto LABEL_11;
    default:
      return result;
  }
  v3 = 6;
LABEL_11:
  result[77] = v3;
  v4 = result[4];
  if (v4)
  {
    result = (_QWORD *)CMBaseObjectGetVTable();
    v5 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(result[2] + 56);
    if (v5)
      return (_QWORD *)v5(v4, CFSTR("byteFlumeStats"), CFSTR("MPTCP"), v3, 0);
  }
  return result;
}

uint64_t fbf_ParseResponseHeadersAndSetLastError(uint64_t a1, uint64_t a2, int a3)
{
  __CFHTTPMessage *v5;
  CFIndex ResponseStatusCode;
  CFIndex v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  int v12;
  const __CFDictionary *v13;
  const __CFNumber *Value;
  CFStringRef v15;
  uint64_t AllocatorForMedia;
  uint64_t (*v17)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  int v18;
  CFNumberRef v19;
  unsigned int v20;
  CFDictionaryRef *v21;
  const void *v22;
  const __CFString *v23;
  uint64_t v24;
  __CFHTTPMessage *v25;
  const __CFDictionary *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  CFNumberRef number;
  unsigned __int8 v33;
  uint64_t valuePtr;
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  valuePtr = 0;
  v33 = 0;
  v5 = *(__CFHTTPMessage **)(a2 + 256);
  if (!v5 || !*(_QWORD *)(a2 + 176))
  {
    v9 = FigSignalErrorAt();
    v10 = CFSTR("no response or URL");
    v11 = a2;
    v12 = -12931;
    goto LABEL_14;
  }
  ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(v5);
  if (ResponseStatusCode == 200)
    goto LABEL_6;
  v8 = ResponseStatusCode;
  if (ResponseStatusCode == 304)
  {
    if (FigCFHTTPGetContentRangeFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), 0, 0, &valuePtr, &v33)&& v33)
    {
      *(_QWORD *)(a2 + 216) = valuePtr;
    }
    v13 = *(const __CFDictionary **)(a2 + 272);
    if (v13)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v13, CFSTR("Size"));
      if (!Value)
      {
LABEL_22:
        fbf_ReleaseAndCreateLastError(a2, -12936, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)CFSTR("Unable to get Cache Headers"));
        return 0;
      }
      CFNumberGetValue(Value, kCFNumberSInt64Type, &valuePtr);
      if (v33)
      {
        if (valuePtr != *(_QWORD *)(a2 + 216))
          goto LABEL_22;
      }
      else
      {
        *(_QWORD *)(a2 + 216) = valuePtr;
      }
      *(_BYTE *)(a2 + 280) = 1;
    }
    v21 = (CFDictionaryRef *)(a2 + 264);
    v22 = *(const void **)(a2 + 264);
    if (v22)
    {
      *v21 = 0;
      CFRelease(v22);
    }
    v23 = *(const __CFString **)(a2 + 192);
    v24 = *(_QWORD *)(a2 + 216);
    v25 = *(__CFHTTPMessage **)(a2 + 256);
    v26 = *(const __CFDictionary **)(a2 + 272);
LABEL_44:
    v28 = FigCFHTTPCreateCacheHeaders(v23, v24, v25, v26, v21);
    if ((_DWORD)v28)
    {
      v9 = v28;
      v10 = CFSTR("Unable to create Cache Headers");
      v11 = a2;
      v12 = -12936;
      goto LABEL_14;
    }
    v9 = *(_QWORD *)(a2 + 32);
    if (!v9)
      return v9;
    v29 = *(_QWORD *)(a2 + 216);
    v30 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v30)
      v30(v9, CFSTR("byteFlumeStats"), CFSTR("FSize"), (uint64_t)(round((double)v29 / 1000.0) * 1000.0), 0);
    return 0;
  }
  if (ResponseStatusCode == 206)
  {
LABEL_6:
    if (a3)
    {
      if (!FigCFHTTPGetContentRangeFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), &v36, &v35, &valuePtr, &v33)|| !v33|| v36|| v35 != 1)
      {
        v9 = FigSignalErrorAt();
        v10 = CFSTR("HTTP response has bad Content-Range");
LABEL_12:
        v11 = a2;
        v12 = v9;
LABEL_14:
        fbf_ReleaseAndCreateLastError(v11, v12, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)v10);
        return v9;
      }
    }
    else if (FigCFHTTPIsDataURL(*(const __CFURL **)(a2 + 168)))
    {
      number = 0;
      AllocatorForMedia = FigGetAllocatorForMedia();
      v17 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
      if (v17)
      {
        v18 = v17(a1, CFSTR("FHRP_PayloadLength"), AllocatorForMedia, &number);
        v19 = number;
        if (!v18)
        {
          CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
          v19 = number;
        }
        if (v19)
          CFRelease(v19);
      }
      v33 = 1;
    }
    else
    {
      if (FigCFHTTPGetContentRangeFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), 0, 0, &valuePtr, &v33))
      {
        v20 = v33;
      }
      else
      {
        v20 = FigCFHTTPGetContentLengthFromHTTPResponse(*(__CFHTTPMessage **)(a2 + 256), &valuePtr);
        v33 = v20;
      }
      if (!v20)
      {
        v9 = FigSignalErrorAt();
        v10 = CFSTR("HTTP response has bad Content-Length");
        goto LABEL_12;
      }
    }
    v24 = valuePtr;
    *(_QWORD *)(a2 + 216) = valuePtr;
    v21 = (CFDictionaryRef *)(a2 + 264);
    v27 = *(const void **)(a2 + 264);
    if (v27)
    {
      *(_QWORD *)(a2 + 264) = 0;
      CFRelease(v27);
      v24 = *(_QWORD *)(a2 + 216);
    }
    v23 = *(const __CFString **)(a2 + 192);
    v25 = *(__CFHTTPMessage **)(a2 + 256);
    v26 = 0;
    goto LABEL_44;
  }
  v9 = FigSignalErrorAt();
  v15 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("HTTP response code: %ld"), v8);
  fbf_ReleaseAndCreateLastError(a2, v8, (uint64_t)CFSTR("CoreMediaErrorDomain"), (uint64_t)v15);
  if (v15)
    CFRelease(v15);
  return v9;
}

uint64_t fbf_UpdatePathEvaluation(uint64_t result, const void *a2)
{
  uint64_t v3;
  uint64_t DerivedStorage;
  int v5;
  _BOOL4 IsCellular;
  int DoesUseCellular;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  char v10;
  int IsHostReachable;
  int v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  const void *v22;
  int InterfaceType;

  if (result)
  {
    v3 = result;
    FigRetainProxyRetain();
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
LABEL_62:
      FigRetainProxyUnlockMutex();
      return FigRetainProxyRelease();
    }
    FigRetainProxyGetOwner();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v5 = *(_DWORD *)(DerivedStorage + 388);
    IsCellular = FigNetworkInterfaceIsCellular(v5);
    InterfaceType = FigNetworkPathInformationGetInterfaceType();
    DoesUseCellular = FigNetworkPathInformationDoesUseCellular();
    if (dword_1EE2A2D10)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(_BYTE *)(DerivedStorage + 448))
      FigHTTPRescheduleTimer(8073216000.0, *(_QWORD *)(DerivedStorage + 48), *(NSObject **)(DerivedStorage + 456));
    fbf_CancelReconnect(DerivedStorage);
    if (*(_BYTE *)(DerivedStorage + 152))
    {
      v9 = *(_QWORD *)(DerivedStorage + 160);
      if (v9)
        v10 = *(_QWORD *)(DerivedStorage + 216) <= v9;
      else
        v10 = 0;
    }
    else
    {
      v10 = 1;
    }
    IsHostReachable = FigNetworkPathInformationIsHostReachable((uint64_t)a2, v10);
    v12 = *(unsigned __int8 *)(DerivedStorage + 392);
    if (!IsHostReachable)
    {
      if (!*(_BYTE *)(DerivedStorage + 392))
      {
        if (dword_1EE2A2D10)
        {
          v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_BYTE *)(DerivedStorage + 392) = 1;
        *(_QWORD *)(DerivedStorage + 424) = FigGetUpTimeNanoseconds();
        if (!*(_BYTE *)(DerivedStorage + 17))
          FigByteFlumePostHostUnavailableNotification(DerivedStorage);
        goto LABEL_58;
      }
      if (dword_1EE2A2D10)
      {
LABEL_18:
        v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_58:
      v22 = *(const void **)(DerivedStorage + 408);
      *(_QWORD *)(DerivedStorage + 408) = a2;
      if (a2)
        CFRetain(a2);
      if (v22)
        CFRelease(v22);
      goto LABEL_62;
    }
    if (*(_BYTE *)(DerivedStorage + 392))
    {
      v13 = FigGetUpTimeNanoseconds() - *(_QWORD *)(DerivedStorage + 424);
      if (dword_1EE2A2D10)
      {
        v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(_BYTE *)(DerivedStorage + 392) = 0;
      *(_QWORD *)(DerivedStorage + 440) += v13;
      *(_QWORD *)(DerivedStorage + 520) += v13;
      goto LABEL_39;
    }
    if (*(_BYTE *)(DerivedStorage + 533)
      && (unint64_t)(*(_QWORD *)(DerivedStorage + 616) - 5) >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (!dword_1EE2A2D10)
        goto LABEL_39;
    }
    else
    {
      if (!*(_BYTE *)(DerivedStorage + 384) || *(_BYTE *)(DerivedStorage + 385))
      {
        v16 = *(_QWORD *)(DerivedStorage + 56);
        if (!v16)
        {
LABEL_27:
          if (*(_BYTE *)(DerivedStorage + 16) == 1)
          {
            if (!IsCellular || DoesUseCellular)
            {
              if (v5 && v5 != InterfaceType)
                fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded(DerivedStorage, v3);
            }
            else
            {
              if (dword_1EE2A2D10)
              {
                v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              fbf_postHostAvailableOnBetterInterfaceNotification(DerivedStorage);
            }
          }
LABEL_39:
          if (*(_BYTE *)(DerivedStorage + 18) != 1)
          {
            if (*(_BYTE *)(DerivedStorage + 17) == 1)
            {
              if (!FigNetworkInterfaceIsProxied(InterfaceType))
              {
                if (dword_1EE2A2D10)
                {
                  v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                fbf_ResumeRetryAttempt(DerivedStorage, 1000000000);
                goto LABEL_58;
              }
              if (dword_1EE2A2D10)
              {
                v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
            }
            else if (!v12)
            {
              goto LABEL_58;
            }
            if (FigByteFlumePostHostAvailableNotification(DerivedStorage))
              fbf_ReportingAgentResetErrorStats(DerivedStorage);
            goto LABEL_58;
          }
          if (dword_1EE2A2D10)
            goto LABEL_18;
          goto LABEL_58;
        }
        while (!*(_QWORD *)(v16 + 24) || *(_BYTE *)(v16 + 104))
        {
          v16 = *(_QWORD *)(v16 + 128);
          if (!v16)
            goto LABEL_27;
        }
      }
      if (!dword_1EE2A2D10)
        goto LABEL_39;
    }
    v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_39;
  }
  return result;
}

uint64_t fbf_postHostAvailableOnBetterInterfaceNotification(uint64_t a1)
{
  uint64_t result;

  result = FigByteFlumePostHostAvailableOnBetterInterfaceNotification(a1);
  if ((_DWORD)result)
    return fbf_ReportingAgentResetErrorStats(a1);
  return result;
}

void fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded(uint64_t a1, uint64_t a2)
{
  unint64_t UpTimeNanoseconds;
  NSObject *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  dispatch_time_t v7;
  NSObject *v8;
  _QWORD block[5];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(_QWORD *)(a1 + 432) + 1000000000 >= UpTimeNanoseconds)
  {
    if (dword_1EE2A2D10)
    {
      v11 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    *(_QWORD *)(a1 + 432) = UpTimeNanoseconds;
    if (dword_1EE2A2D10)
    {
      v11 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    v7 = dispatch_time(0, 1000000000);
    v8 = *(NSObject **)(a1 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded_block_invoke;
    block[3] = &unk_1E2F89E58;
    block[4] = a2;
    dispatch_after(v7, v8, block);
  }
}

uint64_t __fbf_checkAndPostHostAvailableOnBetterInterfaceNotificationIfNeeded_block_invoke()
{
  uint64_t DerivedStorage;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    FigRetainProxyGetOwner();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigByteFlumePostHostAvailableOnBetterInterfaceNotification(DerivedStorage))
      fbf_ReportingAgentResetErrorStats(DerivedStorage);
  }
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

void fbf_ReportingAgentSetServerAddress(uint64_t a1)
{
  const __CFData *v2;
  const __CFData *v3;
  const __CFData *v4;
  uint64_t v5;
  void (*v6)(uint64_t, __CFString *, __CFString *, const __CFData *, _QWORD);

  if (a1)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v2 = *(const __CFData **)(a1 + 136);
      if (v2)
      {
        v3 = FigCFHTTPCreateAddressString(v2);
        if (v3)
        {
          v4 = v3;
          v5 = *(_QWORD *)(a1 + 32);
          if (v5)
          {
            v6 = *(void (**)(uint64_t, __CFString *, __CFString *, const __CFData *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (v6)
              v6(v5, CFSTR("byteFlumeStats"), CFSTR("ServerIP"), v4, 0);
          }
          CFRelease(v4);
        }
      }
    }
  }
}

void fbf_ReportingAgentSetHTTPHeaderField(uint64_t a1, CFHTTPMessageRef message, CFStringRef headerField, uint64_t a4)
{
  CFStringRef v6;
  CFStringRef v7;
  uint64_t v8;
  void (*v9)(uint64_t, __CFString *, uint64_t, CFStringRef, _QWORD);

  if (message)
  {
    if (headerField)
    {
      v6 = CFHTTPMessageCopyHeaderFieldValue(message, headerField);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)(a1 + 32);
        if (v8)
        {
          v9 = *(void (**)(uint64_t, __CFString *, uint64_t, CFStringRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 48);
          if (v9)
            v9(v8, CFSTR("byteFlumeStats"), a4, v7, 0);
        }
        CFRelease(v7);
      }
    }
  }
}

void fbf_SetInactivityMonitorTimer(uint64_t a1, uint64_t a2)
{
  uint64_t UpTimeNanoseconds;
  uint64_t v5;

  fbf_CancelReconnect(a1);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v5 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 472) = UpTimeNanoseconds + a2;
  *(_QWORD *)(a1 + 480) = v5;
  FigHTTPRescheduleTimer((double)a2 / 1000000000.0, *(_QWORD *)(a1 + 48), *(NSObject **)(a1 + 456));
}

uint64_t fbf_CreateHTTPRequestFlags(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 532))
    v1 = 17;
  else
    v1 = 1;
  if (!*(_BYTE *)(a1 + 248))
    v1 |= 0x40u;
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(_QWORD *)(a1 + 160);
    if (!v2 || (v3 = *(_QWORD *)(a1 + 216), v3 > v2))
    {
      v1 |= 0x180u;
      goto LABEL_14;
    }
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 216);
  }
  if (v3 > 10485760 && *(uint64_t *)(a1 + 288) > 10240)
    v1 |= 0x100u;
LABEL_14:
  if (*(_BYTE *)(a1 + 153))
    v1 |= 0x800u;
  if (*(_BYTE *)(a1 + 154))
    return v1 | 0x1000;
  else
    return v1;
}

uint64_t fbf_CreateHTTPRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *OptionsAndSetNWActivity;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, void *, size_t, size_t, char, int), uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v24;
  uint64_t v25;
  _OWORD v28[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 378))
  {
    v7 = *(const void **)(a2 + 80);
    v8 = *(const void **)(a1 + 176);
    *(_QWORD *)(a2 + 80) = v8;
    if (v8)
      CFRetain(v8);
    if (v7)
      CFRelease(v7);
  }
  if (!v6)
  {
    if (*(_BYTE *)(a1 + 184) && (v12 = *(const void **)(a1 + 176)) != 0)
    {
      v13 = *(const void **)(a2 + 80);
      *(_QWORD *)(a2 + 80) = v12;
      CFRetain(v12);
      if (v13)
        CFRelease(v13);
    }
    else if (!*(_QWORD *)(a2 + 80))
    {
      v24 = *(const void **)(a1 + 168);
      *(_QWORD *)(a2 + 80) = v24;
      if (v24)
        CFRetain(v24);
    }
  }
  FigCFDictionaryGetIntIfPresent();
  OptionsAndSetNWActivity = (const void *)fbf_CopyHttpRequestCreateOptionsAndSetNWActivity(a1, 0);
  v10 = *(_QWORD *)(a1 + 240);
  v11 = *(_QWORD *)(a1 + 128);
  if (v11)
    v25 = 0;
  else
    v25 = *(_QWORD *)(a1 + 200);
  v15 = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v16 = *(unsigned int *)(a2 + 36);
  v17 = *(_QWORD *)a1;
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void *, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD, uint64_t (*)(uint64_t, int, uint64_t, void *, size_t, size_t, char, int), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v18)
  {
    v19 = *MEMORY[0x1E0C9AE00];
    memset(v28, 0, 112);
    v20 = v18(v10, v19, v11, v15, v25, v14, OptionsAndSetNWActivity, v16, v28, a3, a4, 0, FigCFHTTPReadResponse, v17, a2 + 24, a2 + 32);
    if (!(_DWORD)v20)
      FigNetworkUrgencyMonitorAddHTTPRequest(*(_QWORD *)(a1 + 624), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v20 = 4294954514;
  }
  v21 = *(const void **)(a1 + 128);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(a1 + 128) = 0;
  }
  if (OptionsAndSetNWActivity)
    CFRelease(OptionsAndSetNWActivity);
  if (dword_1EE2A2D10)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v20;
}

uint64_t FigCFHTTPGoInactiveIfUnreachable(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  *a2 = 0;
  if (!*(_BYTE *)(result + 392))
  {
    v2 = result;
    if (*(_QWORD *)(result + 400))
    {
      v3 = *(_QWORD *)(result + 408);
      if (v3
        && (!*(_BYTE *)(v2 + 152)
          ? (v6 = 1)
          : (v5 = *(_QWORD *)(v2 + 160)) == 0
          ? (v6 = 0)
          : (v6 = *(_QWORD *)(v2 + 216) <= v5),
            result = FigNetworkPathInformationIsHostReachable(v3, v6),
            (_DWORD)result))
      {
        if (*(_DWORD *)(v2 + 496) || !*(_DWORD *)(v2 + 416))
        {
          result = FigGetUpTimeNanoseconds();
          v7 = *(_QWORD *)(v2 + 320) + 30000000000;
          v8 = v7 <= result;
          v9 = v7 - result;
          if (v8)
            v9 = 0;
        }
        else
        {
          v9 = 1000000000;
        }
        *a2 = v9;
        if (dword_1EE2A2D10)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
      else
      {
        if (dword_1EE2A2D10)
        {
          v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_BYTE *)(v2 + 392) = 1;
        *(_QWORD *)(v2 + 424) = FigGetUpTimeNanoseconds();
        FigHTTPRescheduleTimer(8073216000.0, *(_QWORD *)(v2 + 48), *(NSObject **)(v2 + 456));
        fbf_CancelReconnect(v2);
        fbf_ReportingAgentReportErrorEvent(v2, CFSTR("CoreMediaErrorDomain"), CFSTR("Host unavailable"), 2u, -12661);
        result = FigByteFlumePostHostUnavailableNotification(v2);
      }
      *(_DWORD *)(v2 + 416) = 0;
    }
  }
  return result;
}

uint64_t FigPlayerStartupTaskGetTypeID()
{
  if (FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce != -1)
    dispatch_once_f(&FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce, 0, (dispatch_function_t)registerFigPlayerStartupTaskType);
  return sFigPlayerStartupTaskID;
}

uint64_t registerFigPlayerStartupTaskType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPlayerStartupTaskID = result;
  return result;
}

uint64_t FigPlayerStartupTaskGetTaskDescription(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t FigPlayerStartupTaskGetWaitingState(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

BOOL FigPlayerStartupTaskDoesAllowStartup(uint64_t a1)
{
  _BOOL8 v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v2 = *(_DWORD *)(a1 + 40) == 1;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v2;
}

uint64_t FigPlayerStartupTaskNotifyOfEvents(uint64_t a1, int a2, uint64_t a3, BOOL *a4)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  if ((*(_DWORD *)(a1 + 20) & a2) == 0)
  {
    if (a4)
      *a4 = *(_DWORD *)(a1 + 40) == 1;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
    return 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 36) = 1;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  v8 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8)
  {
    v9 = (const void *)v8;
    CFRetain((CFTypeRef)a1);
    (*(void (**)(const void *, _QWORD, uint64_t, uint64_t, void (*)(const void *, int, int)))(a1 + 64))(v9, *(unsigned int *)(a1 + 32), a3, a1, figPlayerStartupTask_completion);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
    *(_BYTE *)(a1 + 36) = 0;
    if (a4)
      *a4 = *(_DWORD *)(a1 + 40) == 1;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
    CFRelease(v9);
    return 0;
  }
  v10 = FigSignalErrorAt();
  figPlayerStartupTask_completionInternal(a1, *(_DWORD *)(a1 + 32), 1);
  if (a4)
    *a4 = 1;
  return v10;
}

void figPlayerStartupTask_completionInternal(uint64_t a1, int a2, int a3)
{
  int v6;
  CFMutableDictionaryRef Mutable;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  if (*(_DWORD *)(a1 + 32) != a2)
LABEL_11:
    JUMPOUT(0x19402EF04);
  if (!a3)
  {
    v6 = 2;
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 36))
  {
    v6 = 1;
LABEL_6:
    *(_DWORD *)(a1 + 40) = v6;
    goto LABEL_11;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  *(_DWORD *)(a1 + 40) = 1;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

void figPlayerStartupTask_completion(const void *a1, int a2, int a3)
{
  figPlayerStartupTask_completionInternal((uint64_t)a1, a2, a3);
  if (a1)
    CFRelease(a1);
}

uint64_t FigPlayerStartupTaskCopyRequiredParameters(uint64_t a1, __CFArray **a2)
{
  __CFArray *Mutable;
  __CFArray *v4;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!a2)
    return FigSignalErrorAt();
  v4 = Mutable;
  CFArrayAppendValue(Mutable, CFSTR("CurrentRate"));
  CFArrayAppendValue(v4, CFSTR("PlayImmediately"));
  CFArrayAppendValue(v4, CFSTR("CoordinationIdentifier"));
  CFArrayAppendValue(v4, CFSTR("SeekID"));
  CFArrayAppendValue(v4, CFSTR("SeekTime"));
  CFArrayAppendValue(v4, CFSTR("CurrentTime"));
  *a2 = v4;
  return 0;
}

uint64_t FigPlayerStartupTaskCreateWithCallbacks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v8;
  const void *Value;
  uint64_t v10;
  uint64_t v12;

  if (!a5 || !a4 || !a3)
    return FigSignalErrorAt();
  if (FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce != -1)
    dispatch_once_f(&FigPlayerStartupTaskGetTypeID_sRegisterFigPlayerStartupTaskTypeOnce, 0, (dispatch_function_t)registerFigPlayerStartupTaskType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v8 = Instance;
  if (!*(_QWORD *)(a4 + 8))
    goto LABEL_13;
  *(_QWORD *)(Instance + 48) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(_DWORD *)(v8 + 40) = 1;
  FigCFDictionaryGetInt32IfPresent();
  Value = (const void *)FigCFDictionaryGetValue();
  *(_QWORD *)(v8 + 72) = Value;
  if (Value)
    CFRetain(Value);
  *(_DWORD *)(v8 + 20) = 7;
  FigCFDictionaryGetInt32IfPresent();
  v10 = FigSimpleMutexCreate();
  *(_QWORD *)(v8 + 24) = v10;
  if (v10)
  {
    *(_OWORD *)(v8 + 56) = *(_OWORD *)a4;
    *a5 = v8;
    return 0;
  }
  else
  {
LABEL_13:
    v12 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v8);
    return v12;
  }
}

double FigPlayerStartupTask_Init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigPlayerStartupTask_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1[3])
    FigSimpleMutexDestroy();
  v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  v3 = (const void *)a1[6];
  if (v3)
  {
    CFRelease(v3);
    a1[6] = 0;
  }
}

__CFString *FigPlayerStartupTask_CopyDescription(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlayerStartupTask %p - %@>"), a1, a1[9]);
  return Mutable;
}

uint64_t FigCachedFileByteStreamGetClassID()
{
  MEMORY[0x19402F294](&FigCachedFileByteStreamGetClassID_sRegisterFigCachedFileByteStreamClassOnce, RegisterFigCachedFileByteStreamClass);
  return sFigCachedFileByteStreamClassID;
}

uint64_t RegisterFigCachedFileByteStreamClass()
{
  CMByteStreamGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCachedFileByteStreamCreateFromByteStream(const void *a1, uint64_t a2, CFAllocatorRef Default, CFTypeRef *a4)
{
  uint64_t CacheAddOpenByteStream;
  _QWORD *CacheNewRequestCompletion;
  uint64_t v9;
  uint64_t DerivedStorage;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t CMBaseObject;
  unsigned int (*v14)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  CFNumberRef number;
  uint64_t v17;
  const void *v18;

  v17 = 0;
  v18 = 0;
  if (!a1 || !a4)
  {
    CacheAddOpenByteStream = FigSignalErrorAt();
    goto LABEL_16;
  }
  CacheAddOpenByteStream = FigReadCacheAddOpenByteStream(1, a1);
  if ((_DWORD)CacheAddOpenByteStream)
  {
LABEL_16:
    v9 = CacheAddOpenByteStream;
    CacheNewRequestCompletion = 0;
    goto LABEL_14;
  }
  CacheNewRequestCompletion = FigReadCacheNewRequestCompletion();
  if (CacheNewRequestCompletion)
  {
    FigReadCacheCopyContainerForByteStream(a1, CacheNewRequestCompletion, &v17);
    if (v17)
    {
      number = 0;
      MEMORY[0x19402F294](&FigCachedFileByteStreamGetClassID_sRegisterFigCachedFileByteStreamClassOnce, RegisterFigCachedFileByteStreamClass);
      v9 = CMDerivedObjectCreate();
      if (!(_DWORD)v9)
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (!Default)
          Default = CFAllocatorGetDefault();
        *(_QWORD *)DerivedStorage = Default;
        *(_QWORD *)DerivedStorage = CFRetain(Default);
        *(_QWORD *)(DerivedStorage + 32) = CacheNewRequestCompletion;
        v11 = CFRetain(a1);
        v12 = v17;
        *(_QWORD *)(DerivedStorage + 16) = 0;
        *(_QWORD *)(DerivedStorage + 24) = v12;
        *(_QWORD *)(DerivedStorage + 8) = v11;
        *(_QWORD *)(DerivedStorage + 112) = FigSimpleMutexCreate();
        *(_BYTE *)(DerivedStorage + 120) = 0;
        FigByteStreamStatsSetupWorker();
        CMBaseObject = CMByteStreamGetCMBaseObject();
        v14 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
        if (v14 && !v14(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &number))
        {
          CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(DerivedStorage + 40));
          CFRelease(number);
        }
        CacheNewRequestCompletion = 0;
        *a4 = v18;
        v18 = 0;
      }
    }
    else
    {
      v9 = 0;
      *a4 = CFRetain(a1);
    }
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
LABEL_14:
  FigReadCacheDisposeRequestCompletion(CacheNewRequestCompletion);
  return v9;
}

uint64_t FigCachedFileByteStreamReadAndCreateBlockBuffer(uint64_t a1, uint64_t a2, uint64_t a3, CMBlockBufferRef *a4, size_t *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  size_t DataLength;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, size_t *);
  CMBlockBufferRef theBuffer;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((a3 & 0x8000000000000000) == 0 && a4)
  {
    v10 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 120))
    {
      v14 = *(_QWORD *)(DerivedStorage + 8);
      v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
      if (v15)
        return v15(v14, a2, a3, a4, a5);
      return 4294954514;
    }
    theBuffer = 0;
    v11 = *(_QWORD *)(DerivedStorage + 40);
    if (a2 && v11 <= a3)
    {
      DataLength = 0;
      v13 = 4294954423;
      if (!a5)
        return v13;
    }
    else
    {
      if (a3 + a2 > (unint64_t)v11)
        a2 = v11 - a3;
      FigGetUpTimeNanoseconds();
      v13 = FigReadCacheContainerReadBBuf(*(_QWORD *)(v10 + 24), (OpaqueCMBlockBuffer *)a3, (OpaqueCMBlockBuffer *)(a2 + a3), *(_QWORD **)(v10 + 32), &theBuffer);
      if (theBuffer)
        DataLength = CMBlockBufferGetDataLength(theBuffer);
      else
        DataLength = 0;
      FigGetUpTimeNanoseconds();
      FigByteStreamStatsLogOneRead();
      *a4 = theBuffer;
      if (!a5)
        return v13;
    }
    *a5 = DataLength;
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t PurgeableVMAllocatorDeallocateCallBack(uint64_t result)
{
  if (result)
    JUMPOUT(0x19403197CLL);
  return result;
}

uint64_t FigReadCacheAddOpenByteStream(uint64_t a1, const void *a2)
{
  char v3;
  uint64_t result;
  _DWORD *v5;

  if (!a2)
    return FigSignalErrorAt();
  v3 = a1;
  if (gFigReadCache && *(_DWORD *)gFigReadCache || (result = FigReadCacheInitialize(a1, 64, 0x40000u), !(_DWORD)result))
  {
    v5 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
    v5[4] = v3 & 1 | 6;
    *((_QWORD *)v5 + 3) = CFRetain(a2);
    IssueFigReadCacheRequest(v5);
    return 0;
  }
  return result;
}

uint64_t FigReadCacheAddOneFileAndCopyContainer(uint64_t a1, const void *a2, _QWORD *a3, _QWORD *a4)
{
  char v7;
  uint64_t CacheInitialize;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const void *RadarDescriptionString;
  _DWORD *v15;
  const void *v16;

  v7 = a1;
  if (!gFigReadCache || !*(_DWORD *)gFigReadCache)
  {
    CacheInitialize = FigReadCacheInitialize(a1, 64, 0x40000u);
    if ((_DWORD)CacheInitialize)
      return CacheInitialize;
  }
  v9 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
  v10 = v9;
  if ((v7 & 1) != 0)
    v11 = 10;
  else
    v11 = 9;
  v9[4] = v11;
  *((_QWORD *)v9 + 3) = CFRetain(a2);
  *((_QWORD *)v10 + 4) = 0;
  *((_BYTE *)v10 + 40) = 0;
  *((_QWORD *)v10 + 6) = a3;
  MEMORY[0x19402EEEC](*a3);
  IssueFigReadCacheRequest(v10);
  FigSemaphoreWaitRelative();
  MEMORY[0x19402EF04](*a3);
  v12 = *((_QWORD *)v10 + 7);
  if (!v12)
    goto LABEL_14;
  if (!*(_QWORD *)(v12 + 88))
  {
    if (FigCanTriggerTapToRadar())
    {
      RadarDescriptionString = (const void *)FigTapToRadarCreateRadarDescriptionString();
      FigTriggerTapToRadar();
      if (RadarDescriptionString)
        CFRelease(RadarDescriptionString);
    }
    v15 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
    v15[4] = 4;
    *((_QWORD *)v15 + 3) = v12;
    IssueFigReadCacheRequest(v15);
LABEL_14:
    v13 = 4294955044;
    goto LABEL_15;
  }
  v13 = 0;
  *a4 = v12;
LABEL_15:
  v16 = (const void *)*((_QWORD *)v10 + 3);
  if (v16)
    CFRelease(v16);
  free(v10);
  return v13;
}

uint64_t FigReadCacheCopyContainer(const void *a1, const void *a2, _QWORD *a3, _QWORD *a4)
{
  _DWORD *v8;
  _DWORD *v9;
  CFTypeRef v10;
  char v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  const void *v15;
  const void *v16;

  *a4 = 0;
  if (!gFigReadCache)
    return 0;
  v8 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
  v9 = v8;
  if (a2)
  {
    v8[4] = 8;
    *((_QWORD *)v8 + 3) = 0;
    v10 = CFRetain(a2);
    v11 = 1;
  }
  else
  {
    v8[4] = 2;
    v13 = CFRetain(a1);
    v10 = 0;
    v11 = 0;
    *((_QWORD *)v9 + 3) = v13;
  }
  *((_QWORD *)v9 + 4) = v10;
  *((_BYTE *)v9 + 40) = v11;
  *((_QWORD *)v9 + 6) = a3;
  MEMORY[0x19402EEEC](*a3);
  IssueFigReadCacheRequest(v9);
  FigSemaphoreWaitRelative();
  MEMORY[0x19402EF04](*a3);
  v14 = *((_QWORD *)v9 + 7);
  if (v14)
  {
    v12 = 0;
    *a4 = v14;
  }
  else
  {
    v12 = 4294955044;
  }
  v15 = (const void *)*((_QWORD *)v9 + 3);
  if (v15)
    CFRelease(v15);
  v16 = (const void *)*((_QWORD *)v9 + 4);
  if (v16)
    CFRelease(v16);
  free(v9);
  return v12;
}

uint64_t FigReadCacheCopyContainerForByteStream(const void *a1, _QWORD *a2, _QWORD *a3)
{
  return FigReadCacheCopyContainer(0, a1, a2, a3);
}

uint64_t FigReadCacheContainerShowInterestInCaching(uint64_t a1)
{
  if (!a1)
    return FigSignalErrorAt();
  if (FigAtomicIncrement32() == 1)
    *(_BYTE *)(a1 + 153) = 0;
  return 0;
}

uint64_t FigReadCacheContainerShowDisinterestInCaching(uint64_t a1)
{
  if (!a1)
    return FigSignalErrorAt();
  if (!FigAtomicDecrement32())
    *(_BYTE *)(a1 + 153) = 1;
  return 0;
}

void IssueCacheMissRequest(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _DWORD *v6;

  v6 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
  v6[4] = 3;
  *((_QWORD *)v6 + 3) = a1;
  *((_QWORD *)v6 + 4) = a3;
  *((_QWORD *)v6 + 5) = a2;
  MEMORY[0x19402EEEC](*a2);
  IssueFigReadCacheRequest(v6);
  FigSemaphoreWaitRelative();
  MEMORY[0x19402EF04](*a2);
  free(v6);
}

uint64_t FRCContainerFinalize(uint64_t a1)
{
  const void *v2;
  void *v3;
  const void *v4;
  uint64_t result;

  *(_BYTE *)(a1 + 152) = 0;
  v2 = *(const void **)(a1 + 88);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v3 = *(void **)(a1 + 144);
  if (v3)
  {
    os_release(v3);
    *(_QWORD *)(a1 + 144) = 0;
    --*(_DWORD *)(gFigReadCache + 164);
  }
  v4 = *(const void **)(a1 + 40);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

CFStringRef FRCContainerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigReadCacheContainer %p]"), a1);
}

CFMutableStringRef FRCContainerCopyDebugDesc()
{
  return CFStringCreateMutable(0, 0);
}

void LoadOneByteStreamForOpenFile(unint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t CMBaseObject;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  const __CFNumber *v7;
  __int128 v8[2];
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v4 = *(_QWORD *)(gFigReadCache + 120);
  if (v4)
  {
    while (!*(_BYTE *)(v4 + 96) || *(_QWORD *)(v4 + 88) != a1)
    {
      v4 = *(_QWORD *)(v4 + 136);
      if (!v4)
        goto LABEL_5;
    }
    LoadContainerInCache((_QWORD *)v4);
  }
  else
  {
LABEL_5:
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
    {
      v6(CMBaseObject, *MEMORY[0x1E0CA2070], *MEMORY[0x1E0C9AE00], &cf);
      v7 = (const __CFNumber *)cf;
    }
    else
    {
      v7 = 0;
    }
    CFNumberGetValue(v7, kCFNumberSInt64Type, v8);
    CreateAndLoadNewContainerInCacheAndReturnContainer(0, a1, v8, a2, 0);
    if (cf)
      CFRelease(cf);
  }
}

uint64_t HandleAddOneFileAndCopyContainer(uint64_t a1, char a2)
{
  unint64_t v4;
  __int128 v6[2];
  uint64_t v7;
  CFTypeRef cf;

  v7 = 0;
  cf = 0;
  memset(v6, 0, sizeof(v6));
  v4 = *(_QWORD *)(a1 + 24);
  if (!FigFileGetFileInfo())
  {
    if (FindFileInCacheAndCopyContainer(*(CFTypeRef *)(a1 + 24), (uint64_t)v6, &cf))
    {
      *(_QWORD *)(a1 + 56) = cf;
      cf = 0;
    }
    else
    {
      CreateAndLoadNewContainerInCacheAndReturnContainer(v4, 0, v6, a2, (uint64_t *)&cf);
      if (cf)
      {
        *(_QWORD *)(a1 + 56) = CFRetain(cf);
        cf = 0;
        ++*(_DWORD *)(gFigReadCache + 160);
      }
    }
  }
  return FigSemaphoreSignal();
}

uint64_t FindFileInCacheAndCopyContainer(CFTypeRef cf2, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(gFigReadCache + 120);
  if (!v3)
    return 0;
  while (!CFEqual(*(CFTypeRef *)(v3 + 40), cf2) || !FigFileInfoEqual())
  {
    v3 = *(_QWORD *)(v3 + 136);
    if (!v3)
      return 0;
  }
  if (AssureContainerFileIsOpen(v3))
    return 0;
  LoadContainerInCache((_QWORD *)v3);
  if (a3)
  {
    *a3 = CFRetain((CFTypeRef)v3);
    ++*(_DWORD *)(gFigReadCache + 160);
  }
  return 1;
}

_QWORD *LoadContainerInCache(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = (_QWORD *)gFigReadCache;
  v2 = result[16];
  v3 = (_QWORD *)result[17];
  if (v2)
  {
    *(_QWORD *)(v2 + 136) = v3;
    v3 = (_QWORD *)result[17];
  }
  else
  {
    *(_QWORD *)(gFigReadCache + 120) = v3;
  }
  if (!v3)
    v3 = v1;
  v3[16] = v2;
  result[16] = 0;
  result[17] = 0;
  result[4] = v1[12];
  v4 = v1[16];
  if (v4)
  {
    *(_QWORD *)(v4 + 136) = result;
    result[16] = v4;
  }
  else
  {
    v1[15] = result;
  }
  v1[16] = result;
  return result;
}

uint64_t CreateAndLoadNewContainerInCacheAndReturnContainer(unint64_t a1, unint64_t a2, __int128 *a3, char a4, uint64_t *a5)
{
  uint64_t Instance;
  uint64_t v11;
  _OWORD *v12;
  CFTypeRef v13;
  char v14;
  CFTypeRef v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;

  MEMORY[0x19402F294](&sRegisterFigReadCacheContainerTypeOnce, RegisterFigReadCacheContainerType);
  Instance = _CFRuntimeCreateInstance();
  v11 = Instance;
  if (!Instance)
  {
    v22 = FigSignalErrorAt();
    result = 0;
    if (v22)
      goto LABEL_20;
    goto LABEL_11;
  }
  if (a1 | a2)
  {
    v12 = (_OWORD *)(Instance + 48);
    if (a2)
    {
      *(_QWORD *)(Instance + 40) = 0;
      v13 = CFRetain((CFTypeRef)a2);
      v14 = 1;
    }
    else
    {
      v15 = CFRetain((CFTypeRef)a1);
      v13 = 0;
      v14 = 0;
      *(_QWORD *)(v11 + 40) = v15;
    }
    *(_QWORD *)(v11 + 88) = v13;
    v16 = *a3;
    v17 = a3[1];
    *(_QWORD *)(v11 + 80) = *((_QWORD *)a3 + 4);
    *v12 = v16;
    *(_OWORD *)(v11 + 64) = v17;
    *(_BYTE *)(v11 + 96) = v14;
    *(_QWORD *)(v11 + 144) = 0;
    *(_QWORD *)(v11 + 16) = FigSimpleMutexCreate();
    *(_QWORD *)(v11 + 24) = FigSimpleMutexCreate();
    *(_BYTE *)(v11 + 152) = 1;
    if (!AssureContainerFileIsOpen(v11))
    {
      v18 = gFigReadCache;
      v19 = *(_QWORD *)(gFigReadCache + 128);
      if (v19)
      {
        *(_QWORD *)(v19 + 136) = v11;
        *(_QWORD *)(v11 + 128) = v19;
      }
      else
      {
        *(_QWORD *)(gFigReadCache + 120) = v11;
      }
      *(_QWORD *)(v18 + 128) = v11;
      ++*(_DWORD *)(v18 + 136);
      *(_QWORD *)(v11 + 32) = *(_QWORD *)(v18 + 96);
LABEL_11:
      *(_BYTE *)(v11 + 153) = a4;
      v20 = gFigReadCache;
      if (!*(_QWORD *)(gFigReadCache + 144))
        *(_QWORD *)(gFigReadCache + 144) = v11;
      if (*(_DWORD *)(v20 + 304))
      {
        PopulateCacheContainer(v11, 0);
        result = 1;
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else if (!FigSignalErrorAt())
  {
    v11 = 0;
    goto LABEL_11;
  }
  CFRelease((CFTypeRef)v11);
  v11 = 0;
LABEL_19:
  result = 0;
LABEL_20:
  if (a5)
    *a5 = v11;
  return result;
}

uint64_t FreeEntriesInGroup(unsigned int a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;

  v4 = a3;
  v5 = *(_QWORD *)(gFigReadCache + 24 * a1 + 192);
  if (v5)
    v6 = a3 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(v5 + 8);
      v10 = *(_QWORD *)(v5 + 88);
      if (v9 != a2)
      {
        if (v9 != v8)
        {
          if (v8)
            MEMORY[0x19402EF04](*(_QWORD *)(v8 + 16));
          MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 16));
          v8 = v9;
        }
        CFGetRetainCount(*(CFTypeRef *)(v5 + 48));
        v11 = *(_QWORD *)(v5 + 56);
        v12 = *(_QWORD *)(v5 + 64);
        if (v11)
        {
          *(_QWORD *)(v11 + 64) = v12;
          v12 = *(_QWORD *)(v5 + 64);
        }
        else
        {
          *(_QWORD *)(v9 + 104) = v12;
        }
        if (v12)
          v13 = (_QWORD *)(v12 + 56);
        else
          v13 = (_QWORD *)(v9 + 112);
        *v13 = v11;
        *(_QWORD *)(v5 + 56) = 0;
        *(_QWORD *)(v5 + 64) = 0;
        v14 = *(_DWORD *)(v9 + 120) - 1;
        *(_DWORD *)(v9 + 120) = v14;
        if (!v14 && CFGetRetainCount((CFTypeRef)v9) <= 1)
        {
          MEMORY[0x19402EF04](*(_QWORD *)(v9 + 16));
          DeleteCacheContainer((CFTypeRef)v9);
          v8 = 0;
        }
        a4.n128_f64[0] = RecycleCacheEntry(v5);
        --v4;
      }
      if (v10)
        v15 = v4 == 0;
      else
        v15 = 1;
      v5 = v10;
    }
    while (!v15);
    if (v8)
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 16), a4);
  }
  return v4;
}

void DeleteCacheContainer(CFTypeRef cf)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v1 = gFigReadCache;
  v2 = *((_QWORD *)cf + 16);
  if (*(CFTypeRef *)(gFigReadCache + 144) != cf)
  {
    v4 = (uint64_t *)((char *)cf + 136);
    v3 = *((_QWORD *)cf + 17);
    if (!v2)
      goto LABEL_8;
LABEL_6:
    *(_QWORD *)(v2 + 136) = v3;
    v3 = *v4;
    goto LABEL_9;
  }
  if (v2)
  {
    *(_QWORD *)(gFigReadCache + 144) = v2;
    v4 = (uint64_t *)((char *)cf + 136);
    v3 = *((_QWORD *)cf + 17);
    goto LABEL_6;
  }
  v3 = *((_QWORD *)cf + 17);
  *(_QWORD *)(gFigReadCache + 144) = v3;
LABEL_8:
  v2 = 0;
  *(_QWORD *)(v1 + 120) = v3;
LABEL_9:
  if (!v3)
    v3 = v1;
  *(_QWORD *)(v3 + 128) = v2;
  *((_QWORD *)cf + 16) = 0;
  *((_QWORD *)cf + 17) = 0;
  --*(_DWORD *)(v1 + 136);
  CFRelease(cf);
}

double RecycleCacheEntry(uint64_t a1)
{
  double result;

  if (*(_DWORD *)a1 == 1)
    FigAtomicDecrement32();
  MoveToVGroup(a1, 4u, 1);
  *(_DWORD *)a1 = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void ScanForAbandonedEntries()
{
  _QWORD *i;
  uint64_t j;

  if (gFigReadCache)
  {
    if (*(_DWORD *)(gFigReadCache + 176))
    {
      for (i = *(_QWORD **)(gFigReadCache + 120); i; i = (_QWORD *)i[17])
      {
        MEMORY[0x19402EEEC](i[2]);
        if (CFGetRetainCount(i) <= 1)
        {
          for (j = i[13]; j; j = *(_QWORD *)(j + 64))
          {
            if (*(_DWORD *)(j + 72) && CFGetRetainCount(*(CFTypeRef *)(j + 48)) == 1 && *(_DWORD *)(j + 72) != 3)
            {
              MoveToVGroup(j, 3u, 1);
              if (*(_BYTE *)(j + 96))
              {
                *(_BYTE *)(j + 96) = 0;
                FigAtomicDecrement32();
              }
            }
          }
        }
        MEMORY[0x19402EF04](i[2]);
      }
    }
  }
}

uint64_t FigXMLReadMemory(OpaqueCMBlockBuffer *a1, const __CFURL *a2, uint64_t a3, uint64_t a4)
{
  uint64_t BytesFromCFString;
  void *v8;
  const __CFAllocator *AllocatorForMedia;
  const __CFAllocator *v10;
  uint64_t CStringPtrAndBufferToFree;
  uint64_t Memory;
  const __CFAllocator *v13;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;
  CMBlockBufferRef blockBufferOut;
  void *v18;
  char *dataPointerOut;

  v18 = 0;
  dataPointerOut = 0;
  lengthAtOffsetOut = 0;
  blockBufferOut = 0;
  totalLengthOut = 0;
  if (figXMLEnsureLibraryIsInitialized())
    goto LABEL_14;
  if (!CFURLGetString(a2) || (FigGetAllocatorForMedia(), (BytesFromCFString = FigCreateBytesFromCFString()) == 0))
  {
    FigSignalErrorAt();
LABEL_14:
    Memory = 0;
    goto LABEL_12;
  }
  v8 = (void *)BytesFromCFString;
  if (!CMBlockBufferGetDataPointer(a1, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
  {
    if (lengthAtOffsetOut >= totalLengthOut
      || (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
          v10 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          !CMBlockBufferCreateContiguous(AllocatorForMedia, a1, v10, 0, 0, 0, 1u, &blockBufferOut))
      && !CMBlockBufferGetDataPointer(blockBufferOut, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
    {
      CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      if (CStringPtrAndBufferToFree)
      {
        Memory = s_ps_xmlReadMemory(dataPointerOut, totalLengthOut, v8, CStringPtrAndBufferToFree, a4);
        goto LABEL_10;
      }
      FigSignalErrorAt();
    }
  }
  Memory = 0;
LABEL_10:
  v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFAllocatorDeallocate(v13, v8);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
LABEL_12:
  free(v18);
  return Memory;
}

uint64_t figXMLEnsureLibraryIsInitialized()
{
  BOOL v0;
  int v22;

  MEMORY[0x19402F294](&figXMLEnsureLibraryIsInitialized_sFigLibXMLLoadOnce, initLibXMLLibrary);
  if (s_ps_xmlAddChild)
    v0 = s_ps_xmlBufferContent == 0;
  else
    v0 = 1;
  v22 = v0
     || s_ps_xmlBufferCreate == 0
     || s_ps_xmlBufferFree == 0
     || s_ps_xmlBufferLength == 0
     || s_ps_xmlFree == 0
     || s_ps_xmlFreeDoc == 0
     || s_ps_xmlFreeNode == 0
     || s_ps_xmlGetProp == 0
     || s_ps_xmlNewNode == 0
     || s_ps_xmlNewProp == 0
     || s_ps_xmlNodeAddContent == 0
     || s_ps_xmlNodeGetContent == 0
     || s_ps_xmlNodeSetContent == 0
     || s_ps_xmlReadFile == 0
     || s_ps_xmlNewDoc == 0
     || s_ps_xmlDocDumpFormatMemory == 0
     || s_ps_xmlDocSetRootElement == 0
     || s_ps_xmlReadMemory == 0
     || s_ps_xmlSaveClose == 0
     || s_ps_xmlSaveDoc == 0
     || s_ps_xmlSaveToBuffer == 0
     || s_ps_xmlStrEqual == 0;
  return (v22 << 31 >> 31);
}

uint64_t FigXMLFreeDoc(uint64_t a1)
{
  uint64_t IsInitialized;

  IsInitialized = figXMLEnsureLibraryIsInitialized();
  if (!(_DWORD)IsInitialized)
    s_ps_xmlFreeDoc(a1);
  return IsInitialized;
}

uint64_t FigXMLReadFromByteStream(uint64_t Memory)
{
  uint64_t AllocatorForMedia;
  uint64_t CMBaseObject;
  unsigned int (*v4)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, _QWORD, OpaqueCMBlockBuffer **, size_t *);
  const __CFAllocator *v7;
  OpaqueCMBlockBuffer *v8;
  const __CFAllocator *v9;
  uint64_t CStringPtrAndBufferToFree;
  size_t lengthAtOffsetOut;
  size_t totalLengthOut;
  char *dataPointerOut;
  size_t dataLength;
  uint64_t valuePtr;
  CFNumberRef number;
  CMBlockBufferRef blockBufferOut;
  OpaqueCMBlockBuffer *v19;

  blockBufferOut = 0;
  v19 = 0;
  valuePtr = 0;
  number = 0;
  dataPointerOut = 0;
  dataLength = 0;
  lengthAtOffsetOut = 0;
  totalLengthOut = 0;
  if (!figXMLEnsureLibraryIsInitialized())
  {
    if (!Memory)
    {
      FigSignalErrorAt();
      goto LABEL_16;
    }
    AllocatorForMedia = FigGetAllocatorForMedia();
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v4 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v4)
    {
      if (!v4(CMBaseObject, *MEMORY[0x1E0CA2070], AllocatorForMedia, &number))
      {
        CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
        v5 = valuePtr;
        v6 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD, OpaqueCMBlockBuffer **, size_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v6)
        {
          if (!v6(Memory, v5, 0, &v19, &dataLength)
            && !CMBlockBufferGetDataPointer(v19, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
          {
            if (lengthAtOffsetOut >= totalLengthOut
              || (v7 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                  v8 = v19,
                  v9 = (const __CFAllocator *)FigGetAllocatorForMedia(),
                  !CMBlockBufferCreateContiguous(v7, v8, v9, 0, 0, dataLength, 1u, &blockBufferOut))
              && !CMBlockBufferGetDataPointer(blockBufferOut, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut))
            {
              CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
              if (CStringPtrAndBufferToFree)
              {
                Memory = s_ps_xmlReadMemory(dataPointerOut, totalLengthOut, 0, CStringPtrAndBufferToFree, 0);
                goto LABEL_16;
              }
              FigSignalErrorAt();
            }
          }
        }
      }
    }
  }
  Memory = 0;
LABEL_16:
  if (v19)
    CFRelease(v19);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (number)
    CFRelease(number);
  free(0);
  return Memory;
}

uint64_t FigXMLReadFileFromURL()
{
  if (figXMLEnsureLibraryIsInitialized())
    return 0;
  FigGetAllocatorForMedia();
  if (CMByteStreamCreateForFileURL())
    return 0;
  else
    return FigXMLReadFromByteStream(0);
}

uint64_t FigXMLWriteFileDirectlyFromBlockBufferAtURL(OpaqueCMBlockBuffer *a1, const __CFURL *a2)
{
  CFStringRef PathComponent;
  const __CFString *v5;
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v7;
  const __CFURL *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;

  if (figXMLEnsureLibraryIsInitialized())
    return 0xFFFFFFFFLL;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  PathComponent = CFURLCopyLastPathComponent(a2);
  if (!PathComponent)
    return FigSignalErrorAt();
  v5 = PathComponent;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v7 = CFURLCreateCopyDeletingLastPathComponent(AllocatorForMedia, a2);
  if (v7)
  {
    v8 = v7;
    v9 = FigXMLReadMemory(a1, a2, (uint64_t)CFSTR("UTF-8"), 0);
    if (!v9)
      goto LABEL_17;
    v10 = v9;
    v11 = ps_writeXMLDocToFileAtomically(v8, v5, v9);
    if (!figXMLEnsureLibraryIsInitialized())
      s_ps_xmlFreeDoc(v10);
    if (v11)
LABEL_17:
      v12 = FigSignalErrorAt();
    else
      v12 = 0;
    CFRelease(v5);
    CFRelease(v8);
    return v12;
  }
  v14 = FigSignalErrorAt();
  CFRelease(v5);
  return v14;
}

uint64_t ps_writeXMLDocToFileAtomically(const __CFURL *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t IsInitialized;
  uint64_t v7;
  uint64_t v8;
  uint64_t CStringPtrAndBufferToFree;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v13;
  uint64_t v14;

  IsInitialized = figXMLEnsureLibraryIsInitialized();
  if ((_DWORD)IsInitialized)
  {
    v8 = 0;
    v14 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  if (!a1 || !a2)
  {
    v14 = FigSignalErrorAt();
    v8 = 0;
LABEL_22:
    FigFileForkClose();
    goto LABEL_16;
  }
  v8 = s_ps_xmlBufferCreate(IsInitialized, v7);
  if (!v8
    || (CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree()) == 0
    || (v10 = s_ps_xmlSaveToBuffer(v8, CStringPtrAndBufferToFree, 33)) == 0
    || (v11 = v10, s_ps_xmlSaveDoc(v10, a3) == -1)
    || s_ps_xmlSaveClose(v11) == -1
    || (s_ps_xmlBufferLength(v8), !s_ps_xmlBufferContent(v8))
    || FigFileCreateTempFileAtURL())
  {
    v14 = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (FigFileForkWrite())
  {
    FigSignalErrorAt();
    v13 = 0;
  }
  else
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v13 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, a1, a2, 0);
    if (v13)
      FigFileRename();
    else
      FigSignalErrorAt();
  }
  FigFileForkClose();
  v14 = FigFileDeleteFile();
  if (v13)
    CFRelease(v13);
LABEL_16:
  free(0);
  if (v8)
    s_ps_xmlBufferFree(v8);
  return v14;
}

uint64_t FigXMLNodeWriteXMLFileFromBlockBufferAtURL(OpaqueCMBlockBuffer *a1, uint64_t a2, const __CFURL *a3)
{
  CFStringRef PathComponent;
  CFStringRef v6;
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v8;
  CFURLRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  CFTypeRef cf;

  if (!_os_feature_enabled_impl())
    return FigXMLWriteFileDirectlyFromBlockBufferAtURL(a1, a3);
  cf = 0;
  PathComponent = CFURLCopyLastPathComponent(a3);
  if (!PathComponent)
    return FigSignalErrorAt();
  v6 = PathComponent;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v8 = CFURLCreateCopyDeletingLastPathComponent(AllocatorForMedia, a3);
  if (v8)
  {
    v9 = v8;
    v10 = FigXMLServiceReadFromMemoryAndCopyParsedXML((uint64_t)v8, (uint64_t)v6, (uint64_t)a1, &cf);
    if (!(_DWORD)v10)
      v10 = FigXMLNodeWriteToFilePath((uint64_t)cf, a3);
    v11 = v10;
    CFRelease(v6);
    CFRelease(v9);
    if (cf)
      CFRelease(cf);
    return v11;
  }
  else
  {
    v13 = FigSignalErrorAt();
    CFRelease(v6);
    return v13;
  }
}

uint64_t FigXMLNodeCreateWithDoc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  if (figXMLEnsureLibraryIsInitialized())
    return 0xFFFFFFFFLL;
  if (a2)
  {
    v5 = *(_QWORD **)(a2 + 24);
    if (v5)
    {
      while (1)
      {
        v6 = figXMLNode_processNode(v5, &cf);
        if ((_DWORD)v6)
          break;
        v5 = (_QWORD *)v5[6];
        if (!v5)
        {
          v7 = cf;
          goto LABEL_8;
        }
      }
      v8 = v6;
      v7 = cf;
      goto LABEL_11;
    }
    v7 = 0;
LABEL_8:
    v8 = 0;
    if (!a3)
    {
LABEL_11:
      if (v7)
        CFRelease(v7);
      return v8;
    }
    *a3 = v7;
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figXMLNode_processNode(_QWORD *a1, CFTypeRef *a2)
{
  const char *v4;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v6;
  CFStringRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const __CFAllocator *v16;
  CFStringRef v17;
  uint64_t Prop;
  const char *v19;
  const __CFAllocator *v20;
  CFStringRef v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  const __CFAllocator *v26;
  CFMutableStringRef MutableCopy;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CFTypeRef cf;
  CFTypeRef v33;
  CFStringRef theString;

  v33 = 0;
  theString = 0;
  cf = 0;
  if (figXMLEnsureLibraryIsInitialized())
  {
    MutableCopy = 0;
    v21 = 0;
    v17 = 0;
    v4 = 0;
    v29 = 0xFFFFFFFFLL;
    goto LABEL_53;
  }
  v4 = (const char *)a1[2];
  if (v4)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v6 = CFStringCreateWithCString(AllocatorForMedia, v4, 0x8000100u);
    if (v6)
    {
      v7 = v6;
      v8 = FigGetAllocatorForMedia();
      v9 = FigXMLNodeCreateNode(v8, v7, &v33);
      if ((_DWORD)v9)
      {
        v29 = v9;
        MutableCopy = 0;
        v21 = 0;
        v17 = 0;
        v4 = 0;
      }
      else
      {
        v10 = a1[9];
        if (v10 && (v11 = a1[5]) != 0 && *(_DWORD *)(v11 + 8) == 9)
        {
          v4 = *(const char **)(v10 + 16);
          if (v4)
          {
            v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
            v4 = (const char *)CFStringCreateWithCString(v12, v4, 0x8000100u);
            if (!v4)
            {
              v13 = FigSignalErrorAt();
              goto LABEL_73;
            }
            v13 = FigXMLNodeAttributeSetCFString((uint64_t)v33, (uint64_t)CFSTR("xmlns"), (uint64_t)v4);
            if ((_DWORD)v13
              || (v13 = FigXMLNodeAttributeSetCFString((uint64_t)v33, (uint64_t)CFSTR("xmlns:xsi"), (uint64_t)CFSTR("http://www.w3.org/2001/XMLSchema-instance")), (_DWORD)v13))
            {
LABEL_73:
              v29 = v13;
              MutableCopy = 0;
LABEL_74:
              v21 = 0;
              v17 = 0;
              goto LABEL_49;
            }
          }
        }
        else
        {
          v4 = 0;
        }
        v14 = a1[11];
        if (v14)
        {
          while (1)
          {
            v15 = *(const char **)(v14 + 16);
            v16 = (const __CFAllocator *)FigGetAllocatorForMedia();
            v17 = CFStringCreateWithCString(v16, v15, 0x8000100u);
            if (!v17)
            {
              v29 = FigSignalErrorAt();
              MutableCopy = 0;
              v21 = 0;
              goto LABEL_49;
            }
            Prop = s_ps_xmlGetProp(a1, v15);
            if (Prop)
            {
              v19 = (const char *)Prop;
              v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
              v21 = CFStringCreateWithCString(v20, v19, 0x8000100u);
              s_ps_xmlFree(v19);
            }
            else
            {
              FigSignalErrorAt();
              v21 = 0;
            }
            v22 = FigXMLNodeAttributeSetCFString((uint64_t)v33, (uint64_t)v17, (uint64_t)v21);
            if ((_DWORD)v22)
              break;
            CFRelease(v17);
            if (v21)
              CFRelease(v21);
            v14 = *(_QWORD *)(v14 + 48);
            if (!v14)
              goto LABEL_24;
          }
          v29 = v22;
          MutableCopy = 0;
          goto LABEL_49;
        }
LABEL_24:
        v23 = a1[3];
        if (v23)
        {
          do
          {
            v24 = *(_DWORD *)(v23 + 8);
            if (*(_QWORD *)(v23 + 24))
              v25 = 0;
            else
              v25 = v24 == 3;
            if (v25)
            {
              v13 = ps_xmlNodeCopyContentAsCFString(v23, &theString);
              if ((_DWORD)v13)
                goto LABEL_73;
              v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
              MutableCopy = CFStringCreateMutableCopy(v26, 0, theString);
              CFStringTrimWhitespace(MutableCopy);
              if (CFStringCompare(&stru_1E2FD85F8, MutableCopy, 0))
              {
                v28 = FigXMLNodeContentSetCFString((uint64_t)v33, theString);
                if ((_DWORD)v28)
                {
                  v29 = v28;
                  goto LABEL_74;
                }
              }
              if (MutableCopy)
                CFRelease(MutableCopy);
              if (theString)
              {
                CFRelease(theString);
                theString = 0;
              }
            }
            else if (v24 == 1)
            {
              v13 = figXMLNode_processNode(v23, &cf);
              if ((_DWORD)v13)
                goto LABEL_73;
              v13 = figXMLNodeAddChild((uint64_t)v33, (void *)cf);
              if ((_DWORD)v13)
                goto LABEL_73;
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
            }
            v23 = *(_QWORD *)(v23 + 48);
          }
          while (v23);
          if (a2)
            goto LABEL_47;
          MutableCopy = 0;
          v21 = 0;
          v17 = 0;
          v29 = 0;
          goto LABEL_49;
        }
        v13 = ps_xmlNodeCopyContentAsCFString((uint64_t)a1, &theString);
        if ((_DWORD)v13)
          goto LABEL_73;
        v30 = FigXMLNodeContentSetCFString((uint64_t)v33, theString);
        v29 = v30;
        MutableCopy = 0;
        if (!a2 || (_DWORD)v30)
        {
          v21 = 0;
          v17 = 0;
        }
        else
        {
LABEL_47:
          MutableCopy = 0;
          v21 = 0;
          v17 = 0;
          v29 = 0;
          *a2 = v33;
          v33 = 0;
        }
      }
LABEL_49:
      CFRelease(v7);
      if (v33)
        CFRelease(v33);
      goto LABEL_51;
    }
    v29 = FigSignalErrorAt();
    v4 = 0;
  }
  else
  {
    v29 = FigSignalErrorAt();
  }
  v17 = 0;
  v21 = 0;
  MutableCopy = 0;
LABEL_51:
  if (cf)
    CFRelease(cf);
LABEL_53:
  if (theString)
    CFRelease(theString);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v4)
    CFRelease(v4);
  if (v17)
    CFRelease(v17);
  if (v21)
    CFRelease(v21);
  return v29;
}

uint64_t FigXMLNodeCreateDocFromNode(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t IsInitialized;
  uint64_t v6;
  uint64_t v7;

  IsInitialized = figXMLEnsureLibraryIsInitialized();
  if (!(_DWORD)IsInitialized)
  {
    v6 = s_ps_xmlNewDoc("1.0");
    v7 = figXMLNode_convertNodeToLibXMLNode(a2);
    s_ps_xmlDocSetRootElement(v6, v7);
    if (a3)
      *a3 = v6;
  }
  return IsInitialized;
}

uint64_t figXMLNode_convertNodeToLibXMLNode(uint64_t a1)
{
  uint64_t CStringPtrAndBufferToFree;
  uint64_t v3;
  uint64_t BytesFromCFString;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const __CFAllocator *AllocatorForMedia;
  const __CFDictionary *v10;
  CFIndex Count;
  const void **v12;
  const __CFAllocator *v13;
  __CFArray *Mutable;
  __CFArray *v15;
  uint64_t i;
  CFIndex v17;
  const void *ValueAtIndex;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const __CFAllocator *v22;
  CFIndex j;
  const __CFArray *v25;
  const void *v26;
  uint64_t v27;
  CFRange v28;
  CFRange v29;

  if (figXMLEnsureLibraryIsInitialized())
  {
    v12 = 0;
    v15 = 0;
    v3 = 0;
    goto LABEL_18;
  }
  CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
  v3 = s_ps_xmlNewNode(0, CStringPtrAndBufferToFree);
  if (*(_QWORD *)(a1 + 24))
  {
    FigGetAllocatorForMedia();
    BytesFromCFString = FigCreateBytesFromCFString();
    if (BytesFromCFString)
    {
      v5 = (void *)BytesFromCFString;
      v6 = s_ps_xmlEncodeEntitiesReentrant(*(_QWORD *)(v3 + 64), BytesFromCFString);
      if (v6)
      {
        v7 = v6;
        s_ps_xmlNodeSetContent(v3, v6);
        s_ps_xmlFree(v7);
        v8 = 0;
      }
      else
      {
        v8 = FigSignalErrorAt();
      }
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      CFAllocatorDeallocate(AllocatorForMedia, v5);
      if (!v8)
        goto LABEL_7;
    }
    else if (!FigSignalErrorAt())
    {
      goto LABEL_7;
    }
    v12 = 0;
    v15 = 0;
    goto LABEL_18;
  }
LABEL_7:
  v10 = *(const __CFDictionary **)(a1 + 32);
  if (v10)
  {
    Count = CFDictionaryGetCount(v10);
    v12 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 32), v12, 0);
    v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
    v15 = Mutable;
    if (!Mutable)
    {
      FigSignalErrorAt();
      goto LABEL_18;
    }
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
        CFArrayAppendValue(v15, v12[i]);
      v28.location = 0;
      v28.length = Count;
      CFArraySortValues(v15, v28, (CFComparatorFunction)MEMORY[0x1E0C98F10], 0);
      v17 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v15, v17);
        CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), ValueAtIndex);
        v19 = FigCFStringGetCStringPtrAndBufferToFree();
        FigGetAllocatorForMedia();
        v20 = FigCreateBytesFromCFString();
        if (v20)
        {
          v21 = (void *)v20;
          s_ps_xmlNewProp(v3, v19, v20);
          v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFAllocatorDeallocate(v22, v21);
        }
        else if (FigSignalErrorAt())
        {
          goto LABEL_18;
        }
        if (Count == ++v17)
          goto LABEL_23;
      }
    }
    v29.location = 0;
    v29.length = Count;
    CFArraySortValues(Mutable, v29, (CFComparatorFunction)MEMORY[0x1E0C98F10], 0);
  }
  else
  {
    v12 = 0;
    v15 = 0;
  }
LABEL_23:
  for (j = 0; ; ++j)
  {
    v25 = *(const __CFArray **)(a1 + 40);
    if (v25)
      v25 = (const __CFArray *)CFArrayGetCount(v25);
    if (j >= (uint64_t)v25)
      break;
    v26 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), j);
    v27 = figXMLNode_convertNodeToLibXMLNode(v26);
    s_ps_xmlAddChild(v3, v27);
  }
LABEL_18:
  free(v12);
  free(0);
  free(0);
  if (v15)
    CFRelease(v15);
  return v3;
}

uint64_t FigXMLNodeCreateFromURL(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (_os_feature_enabled_impl())
    return FigXMLServiceReadAndCopyParsedXML(a2, a3);
  v6 = FigXMLReadFileFromURL();
  v7 = FigXMLNodeCreateWithDoc(v6, v6, a3);
  if (v6)
  {
    if (!figXMLEnsureLibraryIsInitialized())
      s_ps_xmlFreeDoc(v6);
  }
  return v7;
}

uint64_t FigXMLNodeCreateNode(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  if (!a2)
    return FigSignalErrorAt();
  v5 = figXMLNodeCreateNode(a1, &cf);
  if ((_DWORD)v5)
  {
    v7 = cf;
    if (!cf)
      return v5;
LABEL_7:
    CFRelease(v7);
    return v5;
  }
  v6 = CFRetain(a2);
  v7 = cf;
  *((_QWORD *)cf + 2) = v6;
  if (!a3)
    goto LABEL_7;
  v5 = 0;
  *a3 = v7;
  return v5;
}

uint64_t figXMLNodeCreateNode(uint64_t a1, _QWORD *a2)
{
  _OWORD *Instance;

  if (FigXMLNodeGetTypeID_once != -1)
    dispatch_once_f(&FigXMLNodeGetTypeID_once, 0, (dispatch_function_t)xmlnode_registerClass);
  Instance = (_OWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  Instance[1] = 0u;
  Instance[2] = 0u;
  if (a2)
    *a2 = Instance;
  else
    CFRelease(Instance);
  return 0;
}

uint64_t FigXMLNodeCreateChildNode(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  uint64_t v7;
  CFTypeRef v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return FigSignalErrorAt();
  v7 = figXMLNodeCreateNode(a1, &cf);
  if ((_DWORD)v7)
  {
    v10 = v7;
    v11 = cf;
LABEL_8:
    if (v11)
      CFRelease(v11);
    return v10;
  }
  v8 = CFRetain(a3);
  v9 = (void *)cf;
  *((_QWORD *)cf + 2) = v8;
  v10 = figXMLNodeAddChild(a2, v9);
  v11 = cf;
  if (!a4 || (_DWORD)v10)
    goto LABEL_8;
  *a4 = cf;
  return v10;
}

uint64_t figXMLNodeAddChild(uint64_t a1, void *value)
{
  __CFArray *Mutable;
  const __CFAllocator *AllocatorForMedia;

  if (!a1)
    return FigSignalErrorAt();
  if (!value)
    return FigSignalErrorAt();
  Mutable = *(__CFArray **)(a1 + 40);
  if (!Mutable)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a1 + 40) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayAppendValue(Mutable, value);
  return 0;
}

uint64_t FigXMLNodeGetTag(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

CFStringRef *FigXMLNodeGetChild(uint64_t a1, const __CFString *a2)
{
  CFIndex v4;
  const __CFArray *Count;
  CFStringRef *ValueAtIndex;

  v4 = 0;
  while (1)
  {
    Count = *(const __CFArray **)(a1 + 40);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v4 >= (uint64_t)Count)
      break;
    ValueAtIndex = (CFStringRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v4++);
    if (CFStringCompare(a2, ValueAtIndex[2], 0) == kCFCompareEqualTo)
      return ValueAtIndex;
  }
  return 0;
}

const __CFArray *FigXMLNodeGetCountOfChildren(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 40);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const void *FigXMLNodeGetChildAtIndex(uint64_t a1, CFIndex a2)
{
  return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), a2);
}

uint64_t FigXMLNodeGetAllAttributes(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

uint64_t FigXMLNodeGetAttribute()
{
  return FigCFDictionaryGetValue();
}

uint64_t FigXMLNodeGetAttributeAsInt64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const char *CStringPtrAndBufferToFree;
  uint64_t v5;
  uint64_t v6;
  char *__errstrp;

  __errstrp = 0;
  if (!a1 || !a2)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_9;
  }
  if (!FigCFDictionaryGetValue())
    goto LABEL_8;
  CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
  v5 = strtonum(CStringPtrAndBufferToFree, 0, 0x7FFFFFFFFFFFFFFFLL, (const char **)&__errstrp);
  if (!__errstrp)
  {
    if (a3)
    {
      v6 = 0;
      *a3 = v5;
      goto LABEL_9;
    }
LABEL_8:
    v6 = 0;
    goto LABEL_9;
  }
  v6 = 4294950371;
LABEL_9:
  free(0);
  return v6;
}

uint64_t FigXMLNodeCopyAttributeAsCFString(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  const void *Value;

  Value = (const void *)FigCFDictionaryGetValue();
  if (a3 && Value)
    *a3 = CFRetain(Value);
  return 0;
}

uint64_t FigXMLNodeGetAttributeAsDouble(uint64_t a1, uint64_t a2, double *a3)
{
  const __CFString *Value;
  double DoubleValue;

  Value = (const __CFString *)FigCFDictionaryGetValue();
  if (Value)
  {
    DoubleValue = CFStringGetDoubleValue(Value);
    if (a3)
      *a3 = DoubleValue;
  }
  return 0;
}

uint64_t FigXMLNodeContentSetCFString(uint64_t a1, CFTypeRef cf)
{
  const void *v2;

  if (!a1 || !cf)
    return FigSignalErrorAt();
  v2 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  CFRetain(cf);
  if (v2)
    CFRelease(v2);
  return 0;
}

uint64_t FigXMLNodeContentSetInt64(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v5 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%lld"), a2);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = FigXMLNodeContentSetCFString(a1, v5);
  CFRelease(v6);
  return v7;
}

uint64_t FigXMLNodeGetContentAsCFString(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t FigXMLNodeGetContentAsInt64(uint64_t a1, _QWORD *a2)
{
  SInt32 IntValue;

  if (!a1)
    return FigSignalErrorAt();
  IntValue = CFStringGetIntValue(*(CFStringRef *)(a1 + 24));
  if (a2)
    *a2 = IntValue;
  return 0;
}

uint64_t FigXMLNodeCopyContentAsCFString(uint64_t a1, _QWORD *a2)
{
  const void *v3;
  CFTypeRef v4;

  if (a1)
  {
    v3 = *(const void **)(a1 + 24);
    if (v3)
    {
      v4 = CFRetain(v3);
      if (!a2)
      {
        if (v4)
          CFRelease(v4);
        return 0;
      }
    }
    else
    {
      if (!a2)
        return 0;
      v4 = 0;
    }
    *a2 = v4;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigXMLNodeRemoveAndClearChild(uint64_t a1, const void **a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  CFRange v7;

  if (a1 && *a2)
  {
    v4 = *(const __CFArray **)(a1 + 40);
    v7.length = CFArrayGetCount(v4);
    v7.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v7, *a2);
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), FirstIndexOfValue);
    *a2 = 0;
  }
  return 0;
}

uint64_t FigXMLNodeSetAttributes(uint64_t a1, const __CFDictionary *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFIndex Count;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v7;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Count = CFDictionaryGetCount(a2);
  MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, Count, a2);
  if (!MutableCopy)
    return FigSignalErrorAt();
  v7 = MutableCopy;
  *(_QWORD *)(a1 + 32) = CFRetain(MutableCopy);
  CFRelease(v7);
  return 0;
}

uint64_t FigXMLNodeAttributeSetCFString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!*(_QWORD *)(a1 + 32))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 32) = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  FigCFDictionarySetValue();
  return 0;
}

uint64_t FigXMLNodeAttributeSetInt64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v7;
  CFStringRef v8;
  uint64_t v9;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v7 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%lld"), a3);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = FigXMLNodeAttributeSetCFString(a1, a2, (uint64_t)v7);
  CFRelease(v8);
  return v9;
}

uint64_t FigXMLNodeAttributeSetDouble(uint64_t a1, uint64_t a2, double a3)
{
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v7;
  CFStringRef v8;
  uint64_t v9;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v7 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%f"), *(_QWORD *)&a3);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v9 = FigXMLNodeAttributeSetCFString(a1, a2, (uint64_t)v7);
  CFRelease(v8);
  return v9;
}

uint64_t FigXMLNodeWriteToFilePath(uint64_t a1, const __CFURL *a2)
{
  uint64_t AllocatorForMedia;
  CFStringRef PathComponent;
  const __CFString *v6;
  const __CFAllocator *v7;
  const __CFURL *v8;
  const __CFURL *v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigXMLNodeCreateDocFromNode(AllocatorForMedia, a1, &v14))
  {
    v10 = 0xFFFFFFFFLL;
  }
  else
  {
    PathComponent = CFURLCopyLastPathComponent(a2);
    if (PathComponent)
    {
      v6 = PathComponent;
      v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v8 = CFURLCreateCopyDeletingLastPathComponent(v7, a2);
      if (v8)
      {
        v9 = v8;
        v10 = ps_writeXMLDocToFileAtomically(v8, v6, v14);
        CFRelease(v6);
        v11 = (const __CFString *)v9;
      }
      else
      {
        v10 = FigSignalErrorAt();
        v11 = v6;
      }
      CFRelease(v11);
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
  }
  v12 = v14;
  if (v14 && !figXMLEnsureLibraryIsInitialized())
    s_ps_xmlFreeDoc(v12);
  return v10;
}

void *initLibXMLLibrary()
{
  void *result;
  void *v1;

  result = dlopen("/usr/lib/libxml2.dylib", 6);
  if (result)
  {
    v1 = result;
    s_ps_xmlAddChild = dlsym(result, "xmlAddChild");
    s_ps_xmlBufferContent = dlsym(v1, "xmlBufferContent");
    s_ps_xmlBufferCreate = dlsym(v1, "xmlBufferCreate");
    s_ps_xmlBufferFree = dlsym(v1, "xmlBufferFree");
    s_ps_xmlBufferLength = dlsym(v1, "xmlBufferLength");
    s_ps_xmlFreeFunc = (uint64_t)dlsym(v1, "xmlFree");
    s_ps_xmlFree = *(_UNKNOWN **)s_ps_xmlFreeFunc;
    s_ps_xmlFreeDoc = dlsym(v1, "xmlFreeDoc");
    s_ps_xmlFreeNode = (uint64_t)dlsym(v1, "xmlFreeNode");
    s_ps_xmlGetProp = dlsym(v1, "xmlGetProp");
    s_ps_xmlNewNode = dlsym(v1, "xmlNewNode");
    s_ps_xmlNewProp = dlsym(v1, "xmlNewProp");
    s_ps_xmlNodeAddContent = (uint64_t)dlsym(v1, "xmlNodeAddContent");
    s_ps_xmlNodeGetContent = dlsym(v1, "xmlNodeGetContent");
    s_ps_xmlNodeSetContent = dlsym(v1, "xmlNodeSetContent");
    s_ps_xmlReadFile = (uint64_t)dlsym(v1, "xmlReadFile");
    s_ps_xmlNewDoc = dlsym(v1, "xmlNewDoc");
    s_ps_xmlDocDumpFormatMemory = (uint64_t)dlsym(v1, "xmlDocDumpFormatMemory");
    s_ps_xmlDocSetRootElement = dlsym(v1, "xmlDocSetRootElement");
    s_ps_xmlReadMemory = dlsym(v1, "xmlReadMemory");
    s_ps_xmlSaveClose = dlsym(v1, "xmlSaveClose");
    s_ps_xmlSaveDoc = dlsym(v1, "xmlSaveDoc");
    s_ps_xmlSaveToBuffer = dlsym(v1, "xmlSaveToBuffer");
    s_ps_xmlStrEqual = (uint64_t)dlsym(v1, "xmlStrEqual");
    result = dlsym(v1, "xmlEncodeEntitiesReentrant");
    s_ps_xmlEncodeEntitiesReentrant = result;
  }
  return result;
}

uint64_t ps_xmlNodeCopyContentAsCFString(uint64_t a1, CFStringRef *a2)
{
  uint64_t Content;
  const char *v4;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v6;
  uint64_t v7;

  Content = s_ps_xmlNodeGetContent();
  v4 = (const char *)Content;
  if (!a2)
  {
    v7 = FigSignalErrorAt();
    if (!v4)
      return v7;
    goto LABEL_5;
  }
  if (Content)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v6 = CFStringCreateWithCString(AllocatorForMedia, v4, 0x8000100u);
    if (v6)
    {
      v7 = 0;
      *a2 = v6;
    }
    else
    {
      v7 = FigSignalErrorAt();
    }
LABEL_5:
    s_ps_xmlFree(v4);
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t xmlnode_registerClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  gFigXMLNodeTypeID = result;
  return result;
}

void xmlNode_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[4];
  if (v5)
    CFRelease(v5);
}

__CFString *xmlNode_copyDebugDesc(uint64_t a1)
{
  return xmlNode_copyDesc(a1, 0);
}

__CFString *xmlNode_copyDesc(uint64_t a1, int a2)
{
  const __CFAllocator *AllocatorForMedia;
  __CFString *Mutable;
  uint64_t v6;
  const __CFArray *v7;
  uint64_t v8;
  CFIndex Count;
  const __CFAllocator *v10;
  CFMutableStringRef v11;
  __CFString *v12;
  uint64_t v13;
  const __CFArray *v14;
  CFIndex v15;
  CFIndex i;
  uint64_t ValueAtIndex;
  uint64_t Value;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  char v24;
  char v25;
  uint64_t v27;

  if (!a1)
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFStringCreateMutable(AllocatorForMedia, 0);
  if (Mutable)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v7 = *(const __CFArray **)(a1 + 40);
    if (v7)
      Count = CFArrayGetCount(v7);
    else
      Count = 0;
    if (a2 < 1)
    {
      v12 = 0;
      if (v6)
LABEL_11:
        CFStringAppendFormat(Mutable, 0, CFSTR("<[FigXMLNode %p] %@"), a1, v6);
    }
    else
    {
      v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v11 = CFStringCreateMutable(v10, 0);
      if (!v11)
        return Mutable;
      v12 = v11;
      v13 = a2;
      do
      {
        CFStringAppend(v12, CFSTR("\t"));
        --v13;
      }
      while (v13);
      CFStringAppend(Mutable, v12);
      if (v6)
        goto LABEL_11;
    }
    if (v8)
    {
      v14 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
      v15 = 0;
      if (!v14)
        goto LABEL_15;
LABEL_14:
      for (i = CFArrayGetCount(v14); v15 < i; i = 0)
      {
        ValueAtIndex = FigCFArrayGetValueAtIndex();
        Value = FigCFDictionaryGetValue();
        CFStringAppendFormat(Mutable, 0, CFSTR(" %@=%@"), ValueAtIndex, Value);
        ++v15;
        if (v14)
          goto LABEL_14;
LABEL_15:
        ;
      }
    }
    else
    {
      v14 = 0;
    }
    CFStringAppend(Mutable, CFSTR(">"));
    if (v27)
      CFStringAppendFormat(Mutable, 0, CFSTR("%@"), v27);
    if (Count && (CFStringAppend(Mutable, CFSTR("\n")), Count >= 1))
    {
      v19 = v6;
      v20 = 0;
      v21 = (a2 + 1);
      do
      {
        v22 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 40), v20);
        v23 = (const void *)xmlNode_copyDesc(v22, v21);
        CFStringAppendFormat(Mutable, 0, CFSTR("%@"), v23);
        if (v23)
          CFRelease(v23);
        ++v20;
      }
      while (Count != v20);
      v24 = 1;
      v6 = v19;
      if (!v19)
        goto LABEL_39;
    }
    else
    {
      v24 = 0;
      if (!v6)
      {
LABEL_39:
        if (v12)
          CFRelease(v12);
        if (v14)
          CFRelease(v14);
        return Mutable;
      }
    }
    v25 = v24 ^ 1;
    if (!v12)
      v25 = 1;
    if ((v25 & 1) == 0)
      CFStringAppend(Mutable, v12);
    CFStringAppendFormat(Mutable, 0, CFSTR("</%@>\n"), v6);
    goto LABEL_39;
  }
  return Mutable;
}

uint64_t DummyDataProc(uint64_t a1, uint64_t *a2, uint64_t *a3, __CFData *a4, __CFData *a5, void *a6)
{
  return 0;
}

void FigCEA608Parser::~FigCEA608Parser(FigCEA608Parser *this)
{
  CEA608Parser::~CEA608Parser(this);
  JUMPOUT(0x194030638);
}

uint64_t cdp_sequence_cntr(const unsigned __int8 *a1)
{
  return bswap32(*(unsigned __int16 *)(a1 + 5)) >> 16;
}

uint64_t FigCEA608CaptionDecoderCreate(int a1, CMFormatDescriptionRef desc, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6)
{
  _BOOL4 v6;
  signed int MediaSubType;
  int v10;
  uint64_t DerivedStorage;
  _QWORD *v12;
  uint64_t v13;
  CEA608CustomRenderer *v14;
  CFDataRef v15;
  CFDataRef v16;
  CEA608Parser *v17;
  uint64_t v18;
  CMTime v20;
  UInt8 bytes[8];
  CFTypeRef v22;
  CFTypeRef cf;

  cf = 0;
  if (a4)
    v6 = a3 != 0;
  else
    v6 = 0;
  if ((a3 != 0) == (a4 != 0) && a6 && desc)
  {
    MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
    if (MediaSubType > 1664561207)
    {
      if (MediaSubType == 1664561208)
        goto LABEL_13;
      v10 = 1882599480;
    }
    else
    {
      if (MediaSubType == 1635017571)
        goto LABEL_13;
      v10 = 1664495672;
    }
    if (MediaSubType != v10)
    {
      v18 = FigSignalErrorAt();
      if ((_DWORD)v18)
        return v18;
    }
LABEL_13:
    FigCaptionDecoderGetClassID();
    if (CMDerivedObjectCreate())
      return FigSignalErrorAt();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v12 = (_QWORD *)DerivedStorage;
    if (v6)
    {
      *(_QWORD *)(DerivedStorage + 16) = a3;
      v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v12[3] = v13;
      if (!v13)
        return FigSignalErrorAt();
    }
    *(_QWORD *)bytes = cea608dec_rendererCallback;
    v22 = cf;
    v14 = (CEA608CustomRenderer *)operator new();
    CEA608CustomRenderer::CEA608CustomRenderer(v14);
    *v12 = v14;
    v15 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 16, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v15)
    {
      v16 = v15;
      (*(void (**)(_QWORD, const __CFString *, CFDataRef))(*(_QWORD *)*v12 + 48))(*v12, CFSTR("RenderCallback"), v15);
      v17 = (CEA608Parser *)operator new();
      CEA608Parser::CEA608Parser(v17, 30, (int (*)(uint64_t, uint64_t *, uint64_t *, __CFData *, __CFData *, void *))DummyDataProc, 0, (CEA608Renderer *)*v12);
      *(_QWORD *)v17 = &off_1E2F8A0D8;
      v12[1] = v17;
      if (*v12)
      {
        CMTimeMake(&v20, 1001, 30000);
        v18 = 0;
        *(CMTime *)((char *)v12 + 92) = v20;
        *((_DWORD *)v12 + 30) = 1;
        *a6 = cf;
        cf = 0;
      }
      else
      {
        v18 = FigSignalErrorAt();
      }
      CFRelease(v16);
    }
    else
    {
      v18 = FigSignalErrorAt();
    }
    if (cf)
      CFRelease(cf);
    return v18;
  }
  return FigSignalErrorAt();
}

void sub_192B59C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194030638](v1, 0x10A1C4035A3BD56);
  _Unwind_Resume(a1);
}

void cea608dec_rendererCallback(uint64_t a1, const __CFDictionary *a2, CMTime *a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  void (*v11)(uint64_t, const __CFDictionary *, __int128 *, uint64_t);
  __int128 v12;
  CMTimeEpoch epoch;

  if (a4)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_QWORD *)(DerivedStorage + 16))
    {
      v8 = DerivedStorage;
      v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        v10 = (const void *)v9;
        v11 = *(void (**)(uint64_t, const __CFDictionary *, __int128 *, uint64_t))(v8 + 16);
        v12 = *(_OWORD *)&a3->value;
        epoch = a3->epoch;
        v11(a1, a2, &v12, v9);
        CFRelease(v10);
      }
    }
  }
}

void FigCEA608DecoderFinalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  uint64_t v2;
  const void *v3;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[10];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[10] = 0;
  }
  *DerivedStorage = 0;
  v2 = DerivedStorage[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  DerivedStorage[1] = 0;
  v3 = (const void *)DerivedStorage[4];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[4] = 0;
  }
  v4 = (const void *)DerivedStorage[3];
  if (v4)
    CFRelease(v4);
}

__CFString *FigCEA608DecoderCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CEA608CaptionDecoder %p>"), a1);
  return Mutable;
}

uint64_t FigCEA608DecoderCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!FigCFEqual())
    return FigSignalErrorAt();
  *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(v7 + 120));
  return 0;
}

uint64_t FigCEA608DecoderSetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage;
  _DWORD *v6;
  CFTypeID v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = (_DWORD *)DerivedStorage;
  if (!FigCFEqual())
    return FigSignalErrorAt();
  valuePtr = 0;
  if (!a3)
    return FigSignalErrorAt();
  v7 = CFGetTypeID(a3);
  if (v7 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
  v8 = valuePtr;
  if ((valuePtr - 5) <= 0xFFFFFFFB)
    return FigSignalErrorAt();
  if (v6[30] != valuePtr)
  {
    v6[30] = valuePtr;
    v9 = v8 & 0xFFFFFFFD;
    v10 = 2 * (((v8 - 2) & 0xFFFFFFFD) == 0);
    if (v9 == 1)
      v11 = 1;
    else
      v11 = v10;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v6 + 72))(*(_QWORD *)v6, v11);
  }
  return 0;
}

uint64_t FigCEA608PushSample(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  CMBlockBufferRef *v5;
  uint64_t v6;
  const opaqueCMFormatDescription *FormatDescription;
  signed int MediaSubType;
  int v9;
  uint64_t v10;
  int v11;
  const void *Decryptor;
  const void *v13;
  CFTypeID v14;
  uint64_t TypeID;
  const void *v16;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v18;
  uint64_t v19;
  size_t DataLength;
  int IsRangeContiguous;
  const __CFAllocator **v22;
  OpaqueCMBlockBuffer *v23;
  const __CFAllocator *v24;
  uint64_t v25;
  uint64_t v26;
  CMBlockBufferRef v27;
  CMTimeValue value;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, CMBlockBufferRef, CMTimeValue);
  CMTimeValue v31;
  int v32;
  size_t v33;
  size_t v34;
  unsigned int v35;
  unsigned int v36;
  size_t v37;
  uint64_t Contiguous;
  unsigned int v39;
  size_t v40;
  OpaqueCMBlockBuffer *v41;
  size_t v42;
  OpaqueCMBlockBuffer *v43;
  uint64_t DataPointer;
  OpaqueCMBlockBuffer *v45;
  _BYTE *v46;
  unint64_t v47;
  CMBlockBufferRef v48;
  OpaqueCMBlockBuffer *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  BOOL v56;
  unsigned __int8 *v57;
  unint64_t v58;
  int v59;
  int64_t v60;
  int32_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  CMBlockBufferRef v70;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v72;
  char v73;
  const __CFArray *v74;
  const __CFArray *v75;
  char v76;
  uint64_t appended;
  const __CFAllocator *blockAllocator;
  CMTime v80;
  CMBlockBufferRef v81;
  CMBlockBufferRef v82;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef targetBBuf;
  CMBlockBufferRef blockBufferOut;
  CMTime destination;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    v80 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    v6 = FigCEA608RenderToTime(a1, &v80, 0);
    if ((_DWORD)v6)
      return v6;
  }
  if (!a2)
    return 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  v9 = MediaSubType;
  v10 = 0;
  if (MediaSubType > 1664561207)
  {
    if (MediaSubType == 1664561208)
      goto LABEL_12;
    v11 = 1882599480;
  }
  else
  {
    if (MediaSubType == 1635017571)
      goto LABEL_12;
    v11 = 1664495672;
  }
  if (MediaSubType != v11)
    v10 = FigSignalErrorAt();
LABEL_12:
  Decryptor = (const void *)FigSampleBufferGetDecryptor();
  if (Decryptor)
  {
    v13 = Decryptor;
    if (Decryptor != *(const void **)(DerivedStorage + 80))
    {
      v14 = CFGetTypeID(Decryptor);
      TypeID = FigCPECryptorGetTypeID();
      v16 = *(const void **)(DerivedStorage + 80);
      if (v14 == TypeID)
      {
        *(_QWORD *)(DerivedStorage + 80) = v13;
        CFRetain(v13);
        if (v16)
          CFRelease(v16);
      }
      else if (v16)
      {
        CFRelease(*(CFTypeRef *)(DerivedStorage + 80));
        *(_QWORD *)(DerivedStorage + 80) = 0;
      }
    }
  }
  if (v9 == 1882599480 && !*(_QWORD *)(DerivedStorage + 80))
    return 4294955138;
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (DataBuffer)
    v18 = (OpaqueCMBlockBuffer *)CFRetain(DataBuffer);
  else
    v18 = 0;
  v19 = *(_QWORD *)(DerivedStorage + 80);
  if (!v19)
    goto LABEL_48;
  DataLength = CMBlockBufferGetDataLength(v18);
  blockBufferOut = 0;
  destination.value = 0;
  IsRangeContiguous = CMBlockBufferIsRangeContiguous(v18, 0, DataLength);
  v22 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (IsRangeContiguous)
  {
    if (v18)
      v23 = (OpaqueCMBlockBuffer *)CFRetain(v18);
    else
      v23 = 0;
    blockBufferOut = v23;
    v24 = *v22;
  }
  else
  {
    v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v25 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
    if ((_DWORD)v25)
    {
      v10 = v25;
      if (!v18)
        return v10;
      goto LABEL_183;
    }
  }
  v26 = CMBlockBufferCreateWithMemoryBlock(v24, 0, DataLength, v24, 0, 0, DataLength, 1u, (CMBlockBufferRef *)&destination);
  if ((_DWORD)v26)
  {
    v10 = v26;
LABEL_41:
    v31 = 0;
    goto LABEL_42;
  }
  v27 = blockBufferOut;
  value = destination.value;
  v29 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v29 < 4uLL || (v30 = (uint64_t (*)(uint64_t, CMBlockBufferRef, CMTimeValue))v29[4]) == 0)
  {
    v10 = 4294954514;
LABEL_39:
    if (destination.value)
      CFRelease((CFTypeRef)destination.value);
    goto LABEL_41;
  }
  v10 = v30(v19, v27, value);
  if ((_DWORD)v10)
    goto LABEL_39;
  v31 = destination.value;
  destination.value = 0;
LABEL_42:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if ((_DWORD)v10)
    goto LABEL_180;
  if (v18)
    CFRelease(v18);
  v10 = 0;
  v18 = (OpaqueCMBlockBuffer *)v31;
LABEL_48:
  if (v18)
  {
    if (v9 <= 1664561207)
    {
      if (v9 != 1635017571)
      {
        v32 = 1664495672;
LABEL_54:
        if (v9 != v32)
          goto LABEL_169;
        v33 = CMBlockBufferGetDataLength(v18);
        v34 = 0;
        if ((*(_DWORD *)(DerivedStorage + 120) - 3) >= 2)
          v35 = 1667522932;
        else
          v35 = 1667527730;
        v36 = bswap32(v35);
        *(_QWORD *)(DerivedStorage + 32) = 0;
        while (1)
        {
          v37 = v34 + 8;
          if (v34 + 8 > v33)
          {
            v10 = 0;
            goto LABEL_169;
          }
          Contiguous = CMBlockBufferCopyDataBytes(v18, v34, 8uLL, &destination);
          if ((_DWORD)Contiguous)
            goto LABEL_65;
          v39 = bswap32(destination.value);
          if (v39 <= 7)
            break;
          v34 += v39;
          if (v34 > v33)
            break;
          if (HIDWORD(destination.value) == v36)
          {
            Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v37, v39 - 8, 0, v5);
            goto LABEL_65;
          }
        }
        Contiguous = FigSignalErrorAt();
        goto LABEL_65;
      }
      blockBufferOut = 0;
      destination.value = 0;
      theBuffer = 0;
      targetBBuf = 0;
      v40 = CMBlockBufferGetDataLength(v18);
      *v5 = 0;
      if (CMBlockBufferIsRangeContiguous(v18, 0, v40))
      {
        v41 = (OpaqueCMBlockBuffer *)CFRetain(v18);
        blockBufferOut = v41;
      }
      else
      {
        DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
        if ((_DWORD)DataPointer)
          goto LABEL_191;
        v41 = blockBufferOut;
      }
      DataPointer = CMBlockBufferGetDataPointer(v41, 0, 0, 0, (char **)&destination);
      if (!(_DWORD)DataPointer)
      {
        if (v40 >= 8)
        {
          v45 = 0;
          v46 = (_BYTE *)destination.value;
          while (1)
          {
            if (*v46 != 71 || v46[1] != 65 || v46[2] != 57 || v46[3] != 52 || v46[4] != 3)
            {
              destination.value = (CMTimeValue)++v46;
              --v40;
              goto LABEL_93;
            }
            destination.value = (CMTimeValue)(v46 + 5);
            v47 = 3 * (v46[5] & 0x1F) + 2;
            v56 = v40 - 5 >= v47;
            v40 = v40 - 5 - v47;
            if (!v56)
            {
              appended = FigSignalErrorAt();
LABEL_195:
              v10 = appended;
              goto LABEL_157;
            }
            if ((v46[5] & 0x40) != 0)
            {
              appended = createBBufFromCCData((uint64_t)(v46 + 7), v46[5] & 0x1F, *(_DWORD *)(DerivedStorage + 120), &targetBBuf);
              if ((_DWORD)appended)
                goto LABEL_195;
              v48 = targetBBuf;
              if (targetBBuf)
              {
                if (!v45)
                {
                  targetBBuf = 0;
                  goto LABEL_91;
                }
                appended = CMBlockBufferAppendBufferReference(v45, targetBBuf, 0, 0, 0);
                if ((_DWORD)appended)
                  goto LABEL_195;
                if (targetBBuf)
                {
                  CFRelease(targetBBuf);
                  targetBBuf = 0;
                }
              }
            }
            v48 = v45;
LABEL_91:
            v46 = (_BYTE *)(destination.value + v47);
            destination.value += v47;
            v45 = v48;
LABEL_93:
            if (v40 <= 7)
            {
              if (v45 && !CMBlockBufferIsEmpty(v45))
              {
                if (CMBlockBufferIsRangeContiguous(v45, 0, 0))
                {
                  v49 = (OpaqueCMBlockBuffer *)CFRetain(v45);
LABEL_156:
                  v10 = 0;
                  *v5 = v49;
                  theBuffer = 0;
                  goto LABEL_157;
                }
                appended = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v45, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &theBuffer);
                if (!(_DWORD)appended)
                {
                  v49 = theBuffer;
                  goto LABEL_156;
                }
                goto LABEL_195;
              }
              v10 = 0;
LABEL_157:
              if (targetBBuf)
                CFRelease(targetBBuf);
              if (v45)
              {
                v70 = v45;
                goto LABEL_166;
              }
              goto LABEL_167;
            }
          }
        }
        v10 = 0;
LABEL_97:
        v45 = 0;
        goto LABEL_157;
      }
LABEL_191:
      v10 = DataPointer;
      goto LABEL_97;
    }
    if (v9 != 1664561208)
    {
      v32 = 1882599480;
      goto LABEL_54;
    }
    v42 = CMBlockBufferGetDataLength(v18);
    targetBBuf = 0;
    blockBufferOut = 0;
    v82 = 0;
    theBuffer = 0;
    v81 = 0;
    *v5 = 0;
    if (CMBlockBufferIsRangeContiguous(v18, 0, v42))
    {
      v43 = (OpaqueCMBlockBuffer *)CFRetain(v18);
      blockBufferOut = v43;
    }
    else
    {
      Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
      if ((_DWORD)Contiguous)
      {
LABEL_65:
        v10 = Contiguous;
        goto LABEL_169;
      }
      v43 = blockBufferOut;
    }
    v50 = CMBlockBufferGetDataPointer(v43, 0, 0, 0, (char **)&targetBBuf);
    if ((_DWORD)v50)
    {
      v10 = v50;
      goto LABEL_167;
    }
    blockAllocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v51 = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, &theBuffer);
    if ((_DWORD)v51)
    {
      v10 = v51;
      goto LABEL_167;
    }
    if (v42 >= 9)
    {
      v52 = (unsigned int *)targetBBuf;
      while (1)
      {
        v53 = bswap32(*v52);
        v54 = v42 - v53;
        if (v42 < v53)
          break;
        v55 = v53 - 8;
        v56 = v52[1] == 1885627235 && v55 >= 0xC;
        if (v56)
        {
          v57 = (unsigned __int8 *)(v52 + 2);
          while (*v57 == 150)
          {
            if (v57[1] != 105)
              break;
            v58 = v57[2];
            v56 = v55 >= v58;
            v55 -= v58;
            if (!v56)
              break;
            v59 = v57[3] >> 4;
            if (v59 != *(unsigned __int8 *)(DerivedStorage + 116))
            {
              switch(v59)
              {
                case 1:
                  v60 = 1001;
                  v61 = 24000;
                  break;
                case 2:
                  v60 = 1;
                  v61 = 24;
                  break;
                case 3:
                  v60 = 1;
                  v61 = 25;
                  break;
                case 4:
                  v60 = 1001;
                  v61 = 30000;
                  break;
                case 5:
                  v60 = 1;
                  v61 = 30;
                  break;
                case 6:
                  v60 = 1;
                  v61 = 50;
                  break;
                case 7:
                  v60 = 1001;
                  v61 = 60000;
                  break;
                case 8:
                  v60 = 1;
                  v61 = 60;
                  break;
                default:
                  goto LABEL_150;
              }
              CMTimeMake(&destination, v60, v61);
              *(CMTime *)(DerivedStorage + 92) = destination;
              *(_BYTE *)(DerivedStorage + 116) = v59;
            }
            v62 = 7;
            if ((v57[4] & 0x80u) != 0)
              v62 = 12;
            if ((v57[4] & 0x40) != 0)
            {
              v63 = &v57[v62];
              if (*v63 != 114)
                goto LABEL_150;
              v64 = 3 * (v63[1] & 0x1F) + 2;
              if (v64 > v58 || &v63[v64] > (unsigned __int8 *)targetBBuf + v42)
                goto LABEL_150;
              v66 = createBBufFromCCData((uint64_t)(v63 + 2), v63[1] & 0x1F, *(_DWORD *)(DerivedStorage + 120), &v82);
              if ((_DWORD)v66)
                goto LABEL_151;
              if (v82)
              {
                v67 = CMBlockBufferAppendBufferReference(theBuffer, v82, 0, 0, 0);
                if ((_DWORD)v67)
                {
                  v10 = v67;
                  goto LABEL_189;
                }
                if (v82)
                {
                  CFRelease(v82);
                  v82 = 0;
                }
              }
            }
            v57 += v58;
            if (v55 <= 0xB)
            {
              v52 = (unsigned int *)targetBBuf;
              v54 = v42 - v53;
              goto LABEL_145;
            }
          }
          break;
        }
LABEL_145:
        v52 = (unsigned int *)((char *)v52 + v53);
        targetBBuf = (CMBlockBufferRef)v52;
        v42 = v54;
        if (v54 <= 8)
          goto LABEL_146;
      }
LABEL_150:
      v66 = FigSignalErrorAt();
LABEL_151:
      v10 = v66;
      v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
      goto LABEL_165;
    }
LABEL_146:
    if (CMBlockBufferIsEmpty(theBuffer))
    {
      v10 = 0;
LABEL_189:
      v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
      goto LABEL_163;
    }
    v5 = (CMBlockBufferRef *)(DerivedStorage + 32);
    if (CMBlockBufferIsRangeContiguous(theBuffer, 0, 0))
    {
      if (theBuffer)
        v68 = (void *)CFRetain(theBuffer);
      else
        v68 = 0;
    }
    else
    {
      v69 = CMBlockBufferCreateContiguous(blockAllocator, theBuffer, blockAllocator, 0, 0, 0, 0, &v81);
      if ((_DWORD)v69)
      {
        v10 = v69;
LABEL_163:
        if (v82)
          CFRelease(v82);
LABEL_165:
        v70 = theBuffer;
        if (theBuffer)
LABEL_166:
          CFRelease(v70);
LABEL_167:
        if (blockBufferOut)
          CFRelease(blockBufferOut);
LABEL_169:
        if (!(_DWORD)v10)
        {
          if (!*v5)
          {
            v10 = 0;
LABEL_183:
            CFRelease(v18);
            return v10;
          }
          *(_QWORD *)(DerivedStorage + 40) = 0;
          CMSampleBufferGetOutputPresentationTimeStamp(&destination, a2);
          *(CMTime *)(DerivedStorage + 48) = destination;
          SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
          LOBYTE(destination.value) = 0;
          if (SampleAttachmentsArray && (v72 = SampleAttachmentsArray, CFArrayGetCount(SampleAttachmentsArray) >= 1))
          {
            CFArrayGetValueAtIndex(v72, 0);
            FigCFDictionaryGetBooleanIfPresent();
            v73 = destination.value;
          }
          else
          {
            v73 = 0;
          }
          *(_BYTE *)(DerivedStorage + 72) = v73;
          v74 = CMSampleBufferGetSampleAttachmentsArray(a2, 0);
          LOBYTE(destination.value) = 0;
          if (v74 && (v75 = v74, CFArrayGetCount(v74) >= 1))
          {
            CFArrayGetValueAtIndex(v75, 0);
            FigCFDictionaryGetBooleanIfPresent();
            v76 = destination.value;
          }
          else
          {
            v76 = 0;
          }
          v10 = 0;
          *(_BYTE *)(DerivedStorage + 73) = v76;
        }
LABEL_180:
        if (!v18)
          return v10;
        goto LABEL_183;
      }
      v68 = v81;
    }
    v10 = 0;
    *(_QWORD *)(DerivedStorage + 32) = v68;
    v81 = 0;
    goto LABEL_163;
  }
  return v10;
}

uint64_t FigCEA608RenderToTime(uint64_t a1, CMTime *a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  OpaqueCMBlockBuffer *v6;
  __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  _OWORD *v12;
  size_t v13;
  unint64_t v14;
  float v15;
  float v16;
  size_t v17;
  unint64_t *v18;
  uint64_t v19;
  _BOOL4 v20;
  _BOOL4 v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 v26;
  CMTime v28;
  CMTime v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  CMTime v36;
  CMTime v37;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  __int128 v41;
  uint64_t v42;
  _OWORD v43[2];
  _OWORD v44[2];
  char *dataPointerOut;
  size_t totalLengthOut[2];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = (OpaqueCMBlockBuffer *)DerivedStorage[4];
  if (!v6)
    return 0;
  dataPointerOut = 0;
  totalLengthOut[0] = 0;
  v7 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v44[0] = *MEMORY[0x1E0C9D648];
  v44[1] = v7;
  v43[0] = v44[0];
  v43[1] = v7;
  v41 = *MEMORY[0x1E0CA2E18];
  v42 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v8 = *((_DWORD *)DerivedStorage + 30) - 1;
  if (v8 > 3)
    v9 = 0;
  else
    v9 = dword_1932FA9D0[v8];
  CMBlockBufferGetDataPointer(v6, 0, 0, totalLengthOut, &dataPointerOut);
  if ((*((_DWORD *)DerivedStorage + 15) & 0x1D) != 1)
  {
    v11 = *MEMORY[0x1E0CA2E30];
    a2->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    *(_OWORD *)&a2->value = v11;
  }
  v12 = DerivedStorage + 6;
  if ((~a2->flags & 5) != 0)
  {
    v15 = (float)*((int *)DerivedStorage + 25) / (float)*(uint64_t *)((char *)DerivedStorage + 92);
    lhs = *a2;
    *(_OWORD *)&rhs.value = *v12;
    rhs.epoch = DerivedStorage[8];
    CMTimeSubtract(&time, &lhs, &rhs);
    v16 = CMTimeGetSeconds(&time) * v15;
    v17 = 2 * (unint64_t)v16 + 2;
    if (v16 <= 0.0)
      v17 = 2;
    v14 = DerivedStorage[5];
    if (v17 <= v14 + 2)
      v17 = v14 + 2;
    if (v17 >= totalLengthOut[0])
      v13 = totalLengthOut[0];
    else
      v13 = v17;
  }
  else
  {
    v13 = totalLengthOut[0];
    v14 = DerivedStorage[5];
  }
  v18 = DerivedStorage + 5;
  if (v14 >= v13)
  {
    v10 = 0;
    v20 = 1;
  }
  else
  {
    do
    {
      v37 = *(CMTime *)((char *)DerivedStorage + 92);
      *(_OWORD *)&v36.value = *v12;
      v36.epoch = DerivedStorage[8];
      currentTimeFromBytePositionFrameRateAndStartTime(&v37, &v36, v14, (uint64_t)&v41);
      v10 = CEA608Parser::ProcessCodePair((CEA608Parser *)DerivedStorage[1], (const unsigned __int8 *)dataPointerOut, DerivedStorage + 5, v13, v9);
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*DerivedStorage + 56))(*DerivedStorage)
        && !*((_BYTE *)DerivedStorage + 72)
        && !*((_BYTE *)DerivedStorage + 73)
        && !(_DWORD)v10)
      {
        v19 = *DerivedStorage;
        v34 = v41;
        v35 = v42;
        (*(void (**)(uint64_t, _QWORD, __int128 *, _OWORD *, _OWORD *))(*(_QWORD *)v19 + 216))(v19, 0, &v34, v44, v43);
      }
      v14 = *v18;
      v20 = v10 == 0;
    }
    while (*v18 < v13 && !(_DWORD)v10);
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*DerivedStorage + 56))(*DerivedStorage)
    && (*((_BYTE *)DerivedStorage + 72) ? (v21 = v20) : (v21 = 0), v21))
  {
    v22 = *DerivedStorage;
    v32 = v41;
    v33 = v42;
    (*(void (**)(uint64_t, _QWORD, __int128 *, _OWORD *, _OWORD *))(*(_QWORD *)v22 + 216))(v22, 0, &v32, v44, v43);
    v10 = 0;
    v23 = totalLengthOut[0];
  }
  else
  {
    v23 = totalLengthOut[0];
    if ((_DWORD)v10 == -12560)
    {
      v10 = 0;
      if (v13 == totalLengthOut[0])
      {
        *v18 = v13;
        v23 = v13;
      }
    }
  }
  v24 = *v18;
  if (*v18 == v23)
  {
    CFRelease((CFTypeRef)DerivedStorage[4]);
    DerivedStorage[4] = 0;
    DerivedStorage[5] = 0;
    v25 = (__int128 *)MEMORY[0x1E0CA2E18];
    *v12 = *MEMORY[0x1E0CA2E18];
    DerivedStorage[8] = *((_QWORD *)v25 + 2);
    *((_WORD *)DerivedStorage + 36) = 0;
    if (a3)
    {
      v26 = *v25;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v25 + 2);
      *(_OWORD *)a3 = v26;
    }
  }
  else if (a3)
  {
    v29 = *(CMTime *)((char *)DerivedStorage + 92);
    *(_OWORD *)&v28.value = *v12;
    v28.epoch = DerivedStorage[8];
    currentTimeFromBytePositionFrameRateAndStartTime(&v29, &v28, v24, (uint64_t)&v30);
    *(_OWORD *)a3 = v30;
    *(_QWORD *)(a3 + 16) = v31;
  }
  return v10;
}

uint64_t FigCEA608ResetAtTime(uint64_t a1, __int128 *a2)
{
  uint64_t *DerivedStorage;
  __int128 v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  _OWORD v12[2];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = *(_OWORD *)(MEMORY[0x1E0C9D648] + 16);
  v12[0] = *MEMORY[0x1E0C9D648];
  v12[1] = v4;
  v11[0] = v12[0];
  v11[1] = v4;
  CEA608Parser::Reset(DerivedStorage[1]);
  (*(void (**)(uint64_t))(*(_QWORD *)*DerivedStorage + 208))(*DerivedStorage);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*DerivedStorage + 56))(*DerivedStorage))
  {
    v5 = *DerivedStorage;
    v9 = *a2;
    v10 = *((_QWORD *)a2 + 2);
    (*(void (**)(uint64_t, _QWORD, __int128 *, _OWORD *, _OWORD *))(*(_QWORD *)v5 + 216))(v5, 0, &v9, v12, v11);
  }
  v6 = (const void *)DerivedStorage[4];
  if (v6)
  {
    CFRelease(v6);
    v7 = MEMORY[0x1E0CA2E18];
    DerivedStorage[4] = 0;
    DerivedStorage[5] = 0;
    *((_OWORD *)DerivedStorage + 3) = *(_OWORD *)v7;
    DerivedStorage[8] = *(_QWORD *)(v7 + 16);
    *((_WORD *)DerivedStorage + 36) = 0;
  }
  return 0;
}

uint64_t createBBufFromCCData(uint64_t a1, uint64_t a2, int a3, CMBlockBufferRef *a4)
{
  uint64_t v6;
  const __CFAllocator *v8;
  size_t v9;
  char *v10;
  void *v11;
  int64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  char *v19;
  uint64_t v20;

  v6 = a2;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE10];
  v9 = 2 * a2;
  v10 = (char *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E0C9AE10], 2 * a2, 0);
  if (!v10)
    return 12;
  v11 = v10;
  if (v6 < 1)
    goto LABEL_14;
  v12 = 0;
  v13 = (char *)(a1 + 2);
  do
  {
    v14 = *(v13 - 2);
    if (v14 >= 0xFC)
    {
      v15 = v14 & 3;
      v16 = v15 > 1;
      v17 = ((a3 - 5) < 0xFFFFFFFE) ^ (v15 == 1);
      if (!v16 && v17 != 0)
      {
        v19 = &v10[v12];
        *v19 = *(v13 - 1);
        v19[1] = *v13;
        v12 += 2;
      }
    }
    v13 += 3;
    --v6;
  }
  while (v6);
  if (v12 < 1)
  {
LABEL_14:
    v20 = 0;
  }
  else
  {
    v20 = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, v9, v8, 0, 0, v12, 0, a4);
    if (!(_DWORD)v20)
      return v20;
  }
  CFAllocatorDeallocate(v8, v11);
  return v20;
}

CMTime *currentTimeFromBytePositionFrameRateAndStartTime@<X0>(CMTime *a1@<X1>, CMTime *a2@<X2>, uint64_t a3@<X0>, uint64_t a4@<X8>)
{
  CMTimeEpoch epoch;
  unint64_t v7;
  CMTime *result;
  CMTime v9;
  CMTime lhs;
  CMTime v11;
  CMTime time;
  CMTime v13;

  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  epoch = v13.epoch;
  *(_OWORD *)a4 = *(_OWORD *)&v13.value;
  *(_QWORD *)(a4 + 16) = epoch;
  if ((unint64_t)(a3 - 0x100000000) <= 0xFFFFFFFEFFFFFFFELL)
    return (CMTime *)FigSignalErrorAt();
  if (a3 >= 0)
    v7 = a3;
  else
    v7 = a3 + 1;
  time = *a1;
  CMTimeMultiply(&v13, &time, v7 >> 1);
  lhs = *a2;
  v9 = v13;
  result = CMTimeAdd(&v11, &lhs, &v9);
  *(CMTime *)a4 = v11;
  return result;
}

uint64_t FigDiskCacheRepositoryGetTypeID()
{
  if (sRegisterFigDiskCacheRepositoryTypeOnce != -1)
    dispatch_once_f(&sRegisterFigDiskCacheRepositoryTypeOnce, 0, (dispatch_function_t)RegisterFigDiskCacheRepositoryType);
  return sFigDiskCacheRepositoryID;
}

uint64_t RegisterFigDiskCacheRepositoryType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigDiskCacheRepositoryID = result;
  return result;
}

uint64_t FigDiskCacheRepositoryCopyDefaultTmpDirURL(CFTypeRef *a1)
{
  const void *v2;
  const void *v3;

  if (!a1)
    return FigSignalErrorAt();
  *a1 = 0;
  v2 = (const void *)FigCFURLCreateFromSystemTemporaryDirectory();
  if (!v2)
    return 4294954669;
  v3 = v2;
  *a1 = CFRetain(v2);
  CFRelease(v3);
  return 0;
}

void fdcr_ReadRepositoryPlist(uint64_t a1)
{
  const __CFAllocator *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFTypeID v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const __CFDictionary *Copy;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const __CFDictionary *)FigCFPropertyListCreateFromFigFileFork();
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFDictionaryGetTypeID())
    {
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetDoubleIfPresent();
      if (*(_DWORD *)(a1 + 128) || *(double *)(a1 + 120) != 0.0)
      {
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 72));
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 80));
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        FigCFDictionaryGetInt64IfPresent();
        *(_BYTE *)(a1 + 56) = 0;
        Value = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("checkedinlist"));
        if (Value)
          CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFStringToCFURLApplierFunction, *(void **)(a1 + 72));
        if (*(_BYTE *)(a1 + 112))
        {
          v7 = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("checkedoutlist"));
          if (v7)
            CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFStringToCFURLApplierFunction, *(void **)(a1 + 80));
        }
        *(_QWORD *)(a1 + 64) = 0;
        if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 104)) < 1)
        {
          CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 96));
        }
        else
        {
          Copy = CFDictionaryCreateCopy(v2, *(CFDictionaryRef *)(a1 + 96));
          CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)fdcr_CleanupCacheSizeListApplierFunction, (void *)a1);
          if (Copy)
            CFRelease(Copy);
        }
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_UpdateCacheSizeApplierFunction, (void *)a1);
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 80), (CFDictionaryApplierFunction)fdcr_UpdateCacheSizeApplierFunction, (void *)a1);
      }
    }
    CFRelease(v4);
  }
}

uint64_t FigDiskCacheRepositoryExists(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    if (FigCFURLDoesDirectoryExist())
      FigCFURLGetFileStats();
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t fdcr_CheckInResource(uint64_t a1, const __CFString *a2, const void *a3, _QWORD *a4)
{
  int v8;
  const __CFString *v9;
  CFTypeRef v10;
  const __CFURL *Value;
  const __CFURL *v12;
  const __CFURL *v13;
  const __CFURL *v14;
  const __CFURL *v15;
  int Int64IfPresent;
  uint64_t updated;

  v8 = CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 80), a2);
  if (v8)
  {
    v9 = fdcr_CopyCheckInIDFromCheckOutID(a2);
    if (!v9)
      return FigSignalErrorAt();
    v10 = v9;
    Value = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), a2);
    if (CFEqual(a3, Value))
      v12 = 0;
    else
      v12 = Value;
  }
  else
  {
    v10 = CFRetain(a2);
    v12 = 0;
  }
  v13 = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), v10);
  if (v13)
  {
    v14 = v13;
    if (CFEqual(a3, v13))
      v15 = 0;
    else
      v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  Int64IfPresent = FigCFDictionaryGetInt64IfPresent();
  updated = fdcr_UpdateCacheSize();
  if ((_DWORD)updated)
    goto LABEL_25;
  if (Int64IfPresent)
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 64);
  if (v12)
    fdcr_DeleteResource(v12);
  if (v15)
    fdcr_DeleteResource(v15);
  if (v8)
  {
    if (FigCFDictionaryGetInt64IfPresent())
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 96), a2);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 64);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 80), a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 104), a2);
  }
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), v10, a3);
  if (!a4)
  {
LABEL_25:
    if (v10)
      CFRelease(v10);
  }
  else
  {
    updated = 0;
    *a4 = v10;
  }
  return updated;
}

uint64_t markDiskCacheRepositoryPurgeable()
{
  return FigFileMarkPurgeable();
}

uint64_t fdcr_CheckOutResource(CFDictionaryRef *a1, const void *a2, CFTypeRef *a3, const void **a4)
{
  const void *Value;
  const void *v9;
  CFStringRef v10;
  uint64_t result;
  char v12[40];
  uuid_t out;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  Value = CFDictionaryGetValue(a1[9], a2);
  if (!Value)
    return 4294954671;
  v9 = Value;
  if (a3)
    *a3 = CFRetain(Value);
  memset(out, 0, sizeof(out));
  memset(v12, 0, 37);
  uuid_generate_random(out);
  uuid_unparse_upper(out, v12);
  v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s=%@"), v12, a2);
  *a4 = v10;
  CFDictionaryAddValue(a1[10], v10, v9);
  CFDictionaryAddValue(a1[13], *a4, v9);
  CFDictionaryRemoveValue(a1[9], a2);
  result = FigCFDictionaryGetInt64IfPresent();
  if ((_DWORD)result)
  {
    CFDictionaryRemoveValue(a1[12], a2);
    return FigCFDictionarySetInt64();
  }
  return result;
}

uint64_t FigDiskCacheRepositoryCheckInAndOut(uint64_t a1, const __CFString *a2, const void *a3, const void **a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  CFTypeRef cf;
  uint64_t v16;

  cf = 0;
  v16 = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v8 = FigCFURLCreateDirectory();
  if ((_DWORD)v8)
  {
    v9 = v8;
  }
  else if (FigFileForkOpenMainByCFURL())
  {
    v9 = 0;
  }
  else
  {
    fdcr_ReadRepositoryPlist(a1);
    v11 = fdcr_CheckInResource(a1, a2, a3, &cf);
    if (!v11)
      v11 = fdcr_CheckOutResource((CFDictionaryRef *)a1, cf, 0, a4);
    v12 = v16;
    v13 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80)) == 0;
    v14 = fdcr_WriteRepositoryPlist(a1, v12, 1, v13);
    if (v11)
      v9 = v11;
    else
      v9 = v14;
    FigFileForkClose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v9;
}

uint64_t FigDiskCacheRepositoryDelete(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  const __CFURL *Value;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if (FigFileForkOpenMainByCFURL())
  {
    v4 = 0;
  }
  else
  {
    fdcr_ReadRepositoryPlist(a1);
    Value = (const __CFURL *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
    if (Value)
    {
      fdcr_DeleteCacheEntry(a1, a2, Value);
      v4 = fdcr_WriteRepositoryPlist(a1, 0, 1, 0);
    }
    else
    {
      if (CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80)) >= 1)
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 88), a2, (const void *)*MEMORY[0x1E0C9AE50]);
      v4 = 0;
    }
    FigFileForkClose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v4;
}

uint64_t fdcr_DeleteCacheEntry(uint64_t a1, const __CFString *a2, const __CFURL *a3)
{
  uint64_t result;

  result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2);
  if (result)
  {
    fdcr_RemoveFromCacheFileSizeList(a1, a2);
    fdcr_DeleteResource(a3);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 88), a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), a2);
    return 1;
  }
  return result;
}

uint64_t FigDiskCacheRepositoryReserveBacking(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  const __CFArray *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *ValueAtIndex;
  CFArrayRef theArray;

  theArray = 0;
  if (a1 && a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 104), a2))
    {
      if (*(_QWORD *)(a1 + 48) >= a3)
      {
        FigCFDictionaryGetInt64IfPresent();
        v8 = a3 + *(_QWORD *)(a1 + 64);
        if (v8 > *(_QWORD *)(a1 + 40) && !FigFileForkOpenMainByCFURL())
        {
          fdcr_ReadRepositoryPlist(a1);
          v10 = fdcr_CopySortedCacheFileListCheckedIn(a1, &theArray);
          if ((_DWORD)v10)
          {
            v6 = v10;
            FigFileForkClose();
            goto LABEL_12;
          }
          v11 = *(_QWORD *)(a1 + 40);
          v12 = v8 - v11;
          if (v12 < 1)
          {
            v13 = 0;
LABEL_23:
            v8 = a3 + *(_QWORD *)(a1 + 64);
            if (v8 <= v11)
              v6 = 0;
            else
              v6 = 4294954667;
          }
          else
          {
            v13 = 0;
            v14 = 0;
            while (CFArrayGetCount(theArray))
            {
              ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
              if (fdcr_DeleteCacheEntry(a1, *(const __CFString **)ValueAtIndex, *((const __CFURL **)ValueAtIndex + 1)))v13 = 1;
              v14 += *((_QWORD *)ValueAtIndex + 2);
              CFArrayRemoveValueAtIndex(theArray, 0);
              free(ValueAtIndex);
              if (v14 >= v12)
              {
                v11 = *(_QWORD *)(a1 + 40);
                goto LABEL_23;
              }
            }
            v8 = *(_QWORD *)(a1 + 64);
            v6 = 4294954667;
          }
          if (v13)
            fdcr_WriteRepositoryPlist(a1, 0, 0, 0);
          FigFileForkClose();
          if ((_DWORD)v6)
            goto LABEL_12;
        }
        v6 = FigCFDictionarySetInt64();
        if (!(_DWORD)v6)
          *(_QWORD *)(a1 + 64) = v8;
        goto LABEL_12;
      }
      v6 = 4294954668;
    }
    else
    {
      v6 = 4294954671;
    }
LABEL_12:
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
    v7 = theArray;
    goto LABEL_13;
  }
  v6 = FigSignalErrorAt();
  v7 = 0;
LABEL_13:
  fdcr_PurgeFileInfoList(v7);
  return v6;
}

uint64_t fdcr_CopySortedCacheFileListCheckedIn(uint64_t a1, const __CFArray **a2)
{
  CFMutableArrayRef Mutable;
  const __CFArray *v5;
  uint64_t v6;
  CFRange v8;

  if (a2 && (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0)) != 0)
  {
    v5 = Mutable;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_CreateFileInfoFromDictionaryApplierFunction, Mutable);
    v8.length = CFArrayGetCount(v5);
    v8.location = 0;
    CFArraySortValues(v5, v8, (CFComparatorFunction)fdcr_OlderEntryFirstComparator, 0);
    v6 = 0;
    *a2 = v5;
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  fdcr_PurgeFileInfoList(0);
  return v6;
}

void fdcr_PurgeFileInfoList(const __CFArray *a1)
{
  void *ValueAtIndex;

  if (a1)
  {
    if (CFArrayGetCount(a1) >= 1)
    {
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, 0);
        CFArrayRemoveValueAtIndex(a1, 0);
        free(ValueAtIndex);
      }
      while (CFArrayGetCount(a1) > 0);
    }
    CFRelease(a1);
  }
}

uint64_t FigDiskCacheRepositoryCopyCheckedInIDs(uint64_t a1, CFMutableArrayRef *a2)
{
  uint64_t v4;
  CFMutableArrayRef Mutable;
  const __CFDictionary *v7;
  const __CFAllocator *v8;
  CFIndex Count;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if (FigFileForkOpenMainByCFURL())
  {
    v4 = 0;
    Mutable = 0;
  }
  else
  {
    fdcr_ReadRepositoryPlist(a1);
    v7 = *(const __CFDictionary **)(a1 + 72);
    if (v7 && CFDictionaryGetCount(v7))
    {
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 72));
      Mutable = CFArrayCreateMutable(v8, Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_CopyKeyIntoArray, Mutable);
        v4 = 0;
      }
      else
      {
        v4 = FigSignalErrorAt();
      }
    }
    else
    {
      v4 = 0;
      Mutable = 0;
    }
    FigFileForkClose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  *a2 = Mutable;
  return v4;
}

void fdcr_CopyKeyIntoArray(const void *a1, uint64_t a2, __CFArray *a3)
{
  CFTypeID v5;

  if (a1 && a3)
  {
    v5 = CFGetTypeID(a1);
    if (v5 == CFStringGetTypeID())
      CFArrayAppendValue(a3, a1);
  }
}

uint64_t FigDiskCacheRepositoryGetFileSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if (FigCFDictionaryGetInt64IfPresent())
    v4 = 0;
  else
    v4 = FigSignalErrorAt();
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v4;
}

uint64_t FigDiskCacheRepositoryCopyProperty(uint64_t a1, const void *a2, const void *a3, const __CFAllocator *a4, CFNumberRef *a5)
{
  uint64_t v10;
  CFDateRef v12;
  uint64_t v13;
  CFDateRef v14;
  uint64_t valuePtr;
  uint64_t v16;
  uint64_t v17;

  if (!a1 || !a2 || !a3 || !a5)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if (CFEqual(a3, CFSTR("FigDiskCacheRepository_Size")))
  {
    valuePtr = 0;
    if (FigCFDictionaryGetInt64IfPresent())
    {
      v10 = 0;
      *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    }
    else
    {
      v10 = FigSignalErrorAt();
    }
    goto LABEL_19;
  }
  if (CFEqual(a3, CFSTR("FigDiskCacheRepository_LastModifiedDate")))
  {
    v16 = 0;
    v17 = 0;
    valuePtr = 0;
    if (FigFileForkOpenMainByCFURL())
      goto LABEL_11;
    fdcr_ReadRepositoryPlist(a1);
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), a2))
    {
      v13 = FigCFURLGetFileStats();
      if (!(_DWORD)v13)
      {
        v14 = CFDateCreate(a4, (double)v16 / 1000000000.0 + (double)valuePtr - *MEMORY[0x1E0C9ADF8]);
        if (v14)
        {
          v12 = v14;
          FigFileForkClose();
          goto LABEL_18;
        }
        v10 = FigSignalErrorAt();
        FigFileForkClose();
        if ((_DWORD)v10)
          goto LABEL_19;
LABEL_11:
        v12 = 0;
LABEL_18:
        v10 = 0;
        *a5 = v12;
        goto LABEL_19;
      }
      v10 = v13;
    }
    else
    {
      v10 = 4294954671;
    }
    FigFileForkClose();
    goto LABEL_19;
  }
  v10 = 4294951026;
LABEL_19:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v10;
}

uint64_t FigDiskCacheRepositoryMakeRoom(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *ValueAtIndex;
  CFArrayRef theArray;
  uint64_t v12;

  theArray = 0;
  v12 = 0;
  if (!a1)
  {
    v6 = FigSignalErrorAt();
    v7 = 0;
    if (!a3)
      return v6;
    goto LABEL_16;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  if (FigFileForkOpenMainByCFURL())
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    fdcr_ReadRepositoryPlist(a1);
    v6 = fdcr_CopySortedCacheFileListCheckedIn(a1, &theArray);
    if ((_DWORD)v6 || !CFArrayGetCount(theArray))
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, 0);
        if (fdcr_DeleteCacheEntry(a1, *(const __CFString **)ValueAtIndex, *((const __CFURL **)ValueAtIndex + 1)))
        {
          v7 += *((_QWORD *)ValueAtIndex + 2);
          v8 = 1;
        }
        CFArrayRemoveValueAtIndex(theArray, 0);
        free(ValueAtIndex);
      }
      while (a2 && CFArrayGetCount(theArray) > 0);
      if (v8)
        fdcr_WriteRepositoryPlist(a1, v12, 0, 0);
    }
    FigFileForkClose();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  fdcr_PurgeFileInfoList(theArray);
  if (a3)
LABEL_16:
    *a3 = v7;
  return v6;
}

double fdcr_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t fdcr_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t result;

  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[9];
  if (v4)
  {
    CFRelease(v4);
    a1[9] = 0;
  }
  v5 = (const void *)a1[10];
  if (v5)
  {
    CFRelease(v5);
    a1[10] = 0;
  }
  v6 = (const void *)a1[11];
  if (v6)
  {
    CFRelease(v6);
    a1[11] = 0;
  }
  v7 = (const void *)a1[12];
  if (v7)
  {
    CFRelease(v7);
    a1[12] = 0;
  }
  v8 = (const void *)a1[13];
  if (v8)
  {
    CFRelease(v8);
    a1[13] = 0;
  }
  result = a1[2];
  if (result)
  {
    result = FigSimpleMutexDestroy();
    a1[2] = 0;
  }
  return result;
}

__CFString *fdcr_CopyDesc(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigDiskCacheRepository %p repository %@ sizeLimit %llu fileSizeLimit %llu currentSize %llu>"), a1, a1[3], a1[5], a1[6], a1[8]);
  return Mutable;
}

const __CFString *fdcr_CopyCheckInIDFromCheckOutID(const __CFString *result)
{
  const __CFString *v1;
  CFIndex Length;
  CFRange range;
  CFRange v4;
  CFRange v5;

  range.location = 0;
  range.length = 0;
  if (result)
  {
    v1 = result;
    v4.length = CFStringGetLength(result);
    v4.location = 0;
    if (CFStringFindWithOptions(v1, CFSTR("="), v4, 0, &range))
    {
      ++range.location;
      Length = CFStringGetLength(v1);
      v5.location = range.location;
      v5.length = Length - range.location;
      range.length = Length - range.location;
      return CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, v5);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t fdcr_UpdateCacheSize()
{
  uint64_t result;
  uint64_t v1;

  v1 = -1;
  result = FigCFURLGetFileStats();
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t fdcr_DeleteResource(const __CFURL *a1)
{
  uint64_t result;
  UInt8 buffer[1024];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return FigSignalErrorAt();
  if (!CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    return FigSignalErrorAt();
  result = removefile((const char *)buffer, 0, 1u);
  if ((_DWORD)result)
    return (uint64_t)__error();
  return result;
}

uint64_t fdcr_GetDirectoryStats(const __CFURL *a1, unint64_t a2, unint64_t a3)
{
  FTS *v5;
  FTS *v6;
  uint64_t v7;
  uint64_t v8;
  FTSENT *v9;
  FTSENT *v10;
  unint64_t fts_namelen;
  stat *fts_statp;
  stat v14;
  char *v15[2];
  UInt8 buffer[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15[0] = (char *)buffer;
  v15[1] = 0;
  memset(&v14, 0, sizeof(v14));
  if (!a1 || !(a2 | a3) || !CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    return FigSignalErrorAt();
  if (stat((const char *)buffer, &v14) == -1)
    return *__error();
  v5 = fts_open(v15, 4, 0);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = fts_read(v6);
    if (!v9)
      break;
    v10 = v9;
    if (v9->fts_info == 8)
    {
      fts_namelen = v9->fts_namelen;
      if (fts_namelen < 7 || strncmp((const char *)&v9->fts_statp + fts_namelen + 2, ".plist", 6uLL))
      {
        fts_statp = v10->fts_statp;
        v8 += fts_statp->st_size;
        v7 += fts_statp->st_blocks;
      }
    }
  }
  if (a2)
    *(_QWORD *)a2 = v8;
  if (a3)
    *(_QWORD *)a3 = v7 << 9;
  fts_close(v6);
  return 0;
}

void fdcr_CreateFileInfoFromDictionaryApplierFunction(uint64_t a1, uint64_t a2, __CFArray *a3)
{
  _QWORD *v6;
  void *v7;

  if (a3)
  {
    v6 = malloc_type_calloc(1uLL, 0x28uLL, 0x10600403247B118uLL);
    if (v6)
    {
      v7 = v6;
      *v6 = a1;
      v6[1] = a2;
      if (fdcr_FigCFURLGetFileStats())
        free(v7);
      else
        CFArrayAppendValue(a3, v7);
    }
  }
}

uint64_t fdcr_OlderEntryFirstComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BOOL8 v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  if (v2 < v3)
    return -1;
  if (v2 != v3)
    return 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = v5 < v6;
  v8 = v5 != v6;
  if (v7)
    return -1;
  else
    return v8;
}

uint64_t fdcr_FigCFURLGetFileStats()
{
  unint64_t UpTimeNanoseconds;
  uint64_t v1;

  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (fdcr_FigCFURLGetFileStats_sLastStatUptimeNanoseconds + 60000000000 > UpTimeNanoseconds)
    v1 = fdcr_FigCFURLGetFileStats_sNumRecentStatCalls + 1;
  else
    v1 = 0;
  fdcr_FigCFURLGetFileStats_sNumRecentStatCalls = v1;
  fdcr_FigCFURLGetFileStats_sLastStatUptimeNanoseconds = UpTimeNanoseconds;
  return fdcr_FigCFURLGetFileStats_0_recent_stat_calls();
}

uint64_t fdcr_FigCFURLGetFileStats_0_recent_stat_calls()
{
  return FigCFURLGetFileStats();
}

void fdcr_RemoveFromCacheFileSizeList(uint64_t a1, const __CFString *a2)
{
  CFTypeRef v4;
  const __CFString *v5;

  if (!FigCFDictionaryGetInt64IfPresent())
  {
    v5 = fdcr_CopyCheckInIDFromCheckOutID(a2);
    if (!v5)
      return;
    v4 = v5;
    if (!FigCFDictionaryGetInt64IfPresent())
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a2)
  {
    v4 = CFRetain(a2);
    if (v4)
    {
LABEL_7:
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 64);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 96), v4);
LABEL_8:
      CFRelease(v4);
    }
  }
}

void fdcr_ConvertValueFromCFStringToCFURLApplierFunction(const void *a1, const __CFString *a2, __CFDictionary *a3)
{
  CFURLRef v5;

  v5 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, kCFURLPOSIXPathStyle, 0);
  CFDictionaryAddValue(a3, a1, v5);
  if (v5)
    CFRelease(v5);
}

void fdcr_CleanupCacheSizeListApplierFunction(void *key, const __CFNumber *a2, uint64_t a3)
{
  uint64_t valuePtr;

  valuePtr = 0;
  if (CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 104), key))
  {
    CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
    *(_QWORD *)(a3 + 64) += valuePtr;
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 96), key);
  }
}

const void *fdcr_UpdateCacheSizeApplierFunction(void *key, uint64_t a2, uint64_t a3)
{
  const void *result;

  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 104), key);
  if (!result)
    return (const void *)fdcr_UpdateCacheSize();
  return result;
}

void fdcr_ConvertValueFromCFURLToCFStringApplierFunction(const void *a1, CFURLRef anURL, __CFDictionary *a3)
{
  CFStringRef v5;

  v5 = CFURLCopyFileSystemPath(anURL, kCFURLPOSIXPathStyle);
  CFDictionaryAddValue(a3, a1, v5);
  if (v5)
    CFRelease(v5);
}

uint64_t fdcr_CleanCacheFileList(uint64_t a1, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable;
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const __CFString *ValueAtIndex;

  if (!a2)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fdcr_CopyNonExistentFileApplierFunction, Mutable);
  Count = CFArrayGetCount(v5);
  if (Count >= 1)
  {
    v7 = Count;
    for (i = 0; i != v7; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, i);
      CFDictionaryRemoveValue(a2, ValueAtIndex);
      fdcr_RemoveFromCacheFileSizeList(a1, ValueAtIndex);
    }
  }
  CFRelease(v5);
  return 0;
}

uint64_t fdcr_IsResourceInUse(uint64_t a1, char *a2)
{
  uint64_t result;
  char v4;
  char *p_buffer;
  uint64_t v6;
  UInt8 buffer;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  p_buffer = (char *)&buffer;
  v6 = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  FigCFURLGetFileStats();
  if (FigFileForkOpenMainByCFURL())
  {
    v4 = 1;
  }
  else
  {
    FigFileForkClose();
    v4 = 0;
  }
  result = 0;
  *a2 = v4;
  return result;
}

void fdcr_CopyFilenameFromPathDictionaryApplierFunction(int a1, CFURLRef url, __CFSet *a3)
{
  CFStringRef PathComponent;
  CFStringRef v5;

  if (a3)
  {
    PathComponent = CFURLCopyLastPathComponent(url);
    if (PathComponent)
    {
      v5 = PathComponent;
      CFSetSetValue(a3, PathComponent);
      CFRelease(v5);
    }
  }
}

void fdcr_CopyNonExistentFileApplierFunction(const void *a1, uint64_t a2, __CFArray *a3)
{
  if (!FigFileDoesFileExist())
    CFArrayAppendValue(a3, a1);
}

uint64_t FigXPCCPEProtectorServerAssociateCopiedNeighborCPEProtector(_xpc_connection_s *a1)
{
  uint64_t pid;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v6;

  v6 = 0;
  pid = xpc_connection_get_pid(a1);
  v2 = CreateServedCPEProtectorState(pid, &v6);
  v3 = v6;
  if ((_DWORD)v2)
  {
    v4 = v2;
  }
  else
  {
    v4 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
    if (!(_DWORD)v4)
      v3 = 0;
  }
  DisposeServedCPEProtectorState(v3);
  return v4;
}

uint64_t CreateServedCPEProtectorState(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v3 && (v4 = FigOSTransactionCreate(), (*v3 = v4) != 0))
  {
    v5 = 0;
    *a2 = v3;
    v3 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  free(v3);
  return v5;
}

void DisposeServedCPEProtectorState(void **a1)
{
  void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      os_release(v2);
    free(a1);
  }
}

uint64_t FigCPEProtectorServerStart()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleCPEProtectorMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;
  uint64_t v6;
  CFTypeRef cf[2];

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  cf[0] = 0;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    v4 = FigSignalErrorAt();
  v6 = v4;
  if (!(_DWORD)v4)
    return 4294951138;
  return v6;
}

uint64_t FigSamplingEventIdentifierGetTypeID()
{
  if (FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce != -1)
    dispatch_once(&FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce, &__block_literal_global_18);
  return FigSamplingEventIdentifierGetTypeID_sSamplingEventIdentifierTypeID;
}

double samplingEventIdentifier_init(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void samplingEventIdentifier_finalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;

  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

BOOL samplingEventIdentifier_equal(CMTime *a1, uint64_t a2)
{
  CMTime v3;
  CMTime time1;

  time1 = a1[1];
  v3 = *(CMTime *)(a2 + 24);
  return !CMTimeCompare(&time1, &v3) && FigCFEqual() != 0;
}

CFStringRef samplingEventIdentifier_copyDebugDesc(CMTime *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;
  Float64 Seconds;
  CMTime time;

  v2 = CFGetAllocator(a1);
  v3 = CFGetRetainCount(a1);
  time = a1[1];
  Seconds = CMTimeGetSeconds(&time);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigSamplingEventIdentifier %p retainCount: %d> pts: %.3f, samples: %@"), a1, v3, *(_QWORD *)&Seconds, a1->epoch);
}

uint64_t FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID()
{
  if (FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken != -1)
    dispatch_once(&FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken, &__block_literal_global_10);
  return FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sReceiverPlaybackStartupPreventionAssertionTypeID;
}

_QWORD *receiverPlaybackStartupPreventionAssertion_init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void receiverPlaybackStartupPreventionAssertion_finalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  _QWORD block[5];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 2)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __receiverPlaybackStartupPreventionAssertion_finalize_block_invoke;
  block[3] = &__block_descriptor_tmp_23_0;
  block[4] = a1;
  dispatch_sync(v3, block);
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 16) = 0;
  }
  _Block_release(*(const void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

CFStringRef receiverPlaybackStartupPreventionAssertion_copyDebugDescription(_QWORD *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = CFGetAllocator(a1);
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigVideoReceiverPlaybackStartupPreventionAssertion %p> retainCount: %d, desc: %@"), a1, v3, a1[2]);
}

uint64_t FigVideoReceiverGetClassID()
{
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  return sFigVideoReceiverClassID;
}

uint64_t RegisterFigVideoReceiverTypeOnce()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVideoReceiverGetTypeID()
{
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigVideoReceiverCreateLocal(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  dispatch_queue_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFArrayRef v12;
  uint64_t v13;
  const __CFAllocator *v14;
  uint64_t LoggingIdentifierOfLength;
  const void *v16;
  const __CFString *v17;
  const __CFString *v18;
  int CString;
  uint64_t v20;
  uint64_t v21;
  CFMutableDictionaryRef v22;
  CFMutableDictionaryRef v23;
  CFMutableDictionaryRef v24;
  CFMutableArrayRef v25;
  dispatch_queue_t v26;
  OpaqueCMClock *HostTimeClock;
  OpaqueCMTimebase *v28;
  dispatch_source_t v29;
  void *v30;
  void *v31;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v33;
  __int128 v35;
  os_log_type_t type;
  int v37;
  void *values;
  CFTypeRef cf;
  CMTime immediateSourceTime;
  CMTime timebaseTime;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    goto LABEL_36;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 72) = Mutable;
  if (!Mutable)
    goto LABEL_35;
  v8 = dispatch_queue_create("com.apple.coremedia.videoreceiver.callbackQ", 0);
  *(_QWORD *)(DerivedStorage + 264) = v8;
  if (!v8)
    goto LABEL_35;
  v9 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 304) = v9;
  if (!v9)
    goto LABEL_35;
  v10 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 336) = v10;
  if (!v10)
    goto LABEL_35;
  v11 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 416) = v11;
  if (!v11)
    goto LABEL_35;
  values = 0;
  v5 = FigDataChannelGroupCreateForUseCase(a1, 0, &values);
  if ((_DWORD)v5)
  {
LABEL_36:
    v33 = v5;
    goto LABEL_29;
  }
  v12 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 288) = v12;
  if (values)
  {
    CFRelease(values);
    v12 = *(CFArrayRef *)(DerivedStorage + 288);
  }
  if (!v12)
  {
LABEL_35:
    v5 = FigSignalErrorAt();
    goto LABEL_36;
  }
  v5 = FigImageQueueDisplayCountHistory_Create((uint64_t *)(DerivedStorage + 344));
  if ((_DWORD)v5)
    goto LABEL_36;
  FigImageQueueDisplayCountHistory_StartTracingDisplayCount(*(_QWORD *)(DerivedStorage + 344), 0, "fvr");
  v13 = CMBaseObjectGetDerivedStorage();
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  LoggingIdentifierOfLength = FigCFStringCreateLoggingIdentifierOfLength();
  if (LoggingIdentifierOfLength)
  {
    v16 = (const void *)LoggingIdentifierOfLength;
    v17 = CFStringCreateWithFormat(v14, 0, CFSTR("R/%@"), LoggingIdentifierOfLength);
    if (v17)
    {
      v18 = v17;
      CString = CFStringGetCString(v17, (char *)(v13 + 236), 10, 0x600u);
      CFRelease(v16);
      if (CString)
      {
        CFRelease(v18);
        v20 = MEMORY[0x1E0CA2E18];
        v35 = *MEMORY[0x1E0CA2E18];
        *(_OWORD *)(DerivedStorage + 360) = *MEMORY[0x1E0CA2E18];
        v21 = *(_QWORD *)(v20 + 16);
        *(_QWORD *)(DerivedStorage + 376) = v21;
        v22 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        *(_QWORD *)(DerivedStorage + 16) = v22;
        if (v22)
        {
          v23 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E0C9B3A0]);
          *(_QWORD *)(DerivedStorage + 24) = v23;
          if (v23)
          {
            v24 = CFDictionaryCreateMutable(a1, 0, 0, MEMORY[0x1E0C9B3A0]);
            *(_QWORD *)(DerivedStorage + 32) = v24;
            if (v24)
            {
              *(_BYTE *)(DerivedStorage + 40) = 1;
              v25 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E0C9B378]);
              *(_QWORD *)(DerivedStorage + 48) = v25;
              if (v25)
              {
                *(_BYTE *)(DerivedStorage + 96) = 0;
                *(_OWORD *)(DerivedStorage + 100) = v35;
                *(_QWORD *)(DerivedStorage + 116) = v21;
                *(_OWORD *)(DerivedStorage + 124) = v35;
                *(_QWORD *)(DerivedStorage + 140) = v21;
                v26 = dispatch_queue_create("com.apple.coremedia.videoreceiver", 0);
                *(_QWORD *)(DerivedStorage + 152) = v26;
                if (v26)
                {
                  HostTimeClock = CMClockGetHostTimeClock();
                  v5 = CMTimebaseCreateWithSourceClock(v14, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 56));
                  if ((_DWORD)v5)
                    goto LABEL_36;
                  v28 = *(OpaqueCMTimebase **)(DerivedStorage + 56);
                  timebaseTime = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                  immediateSourceTime = timebaseTime;
                  v5 = CMTimebaseSetRateAndAnchorTime(v28, 1.0, &timebaseTime, &immediateSourceTime);
                  if ((_DWORD)v5)
                    goto LABEL_36;
                  v29 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, 0);
                  *(_QWORD *)(DerivedStorage + 64) = v29;
                  if (v29)
                  {
                    v30 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
                    if (v30)
                    {
                      v31 = v30;
                      *(_QWORD *)DerivedStorage = CFRetain(v30);
                      dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 64), v31);
                      dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 64), (dispatch_function_t)videoReceiver_finalizeConfigurationTimerSource);
                      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 64), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
                      dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 64), (dispatch_function_t)videoReceiver_activateReceiverConfiguration);
                      dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 64));
                      v5 = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 56), *(dispatch_source_t *)(DerivedStorage + 64));
                      if (!(_DWORD)v5)
                      {
                        if (dword_1EE2A2D38)
                        {
                          v37 = 0;
                          type = OS_LOG_TYPE_DEFAULT;
                          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                        }
                        *(_DWORD *)(DerivedStorage + 160) = 0;
                        *(_OWORD *)(DerivedStorage + 164) = v35;
                        *(_QWORD *)(DerivedStorage + 180) = v21;
                        *(_OWORD *)(DerivedStorage + 188) = v35;
                        *(_QWORD *)(DerivedStorage + 204) = v21;
                        *(_OWORD *)(DerivedStorage + 212) = v35;
                        *(_QWORD *)(DerivedStorage + 228) = v21;
                        *(_BYTE *)(DerivedStorage + 456) = 1;
                        *(_DWORD *)(DerivedStorage + 476) = 0;
                        *(_QWORD *)(DerivedStorage + 468) = 0;
                        *(_QWORD *)(DerivedStorage + 460) = 0;
                        *(_QWORD *)(DerivedStorage + 480) = 1000000000;
                        *(_DWORD *)(DerivedStorage + 488) = 0;
                        *(_BYTE *)(DerivedStorage + 496) = 1;
                        *(_DWORD *)(DerivedStorage + 516) = 0;
                        *(_QWORD *)(DerivedStorage + 500) = 0;
                        *(_QWORD *)(DerivedStorage + 508) = 0;
                        *(_QWORD *)(DerivedStorage + 520) = 1000000000;
                        *(_DWORD *)(DerivedStorage + 528) = 0;
                        *(_BYTE *)(DerivedStorage + 536) = 1;
                        *(_DWORD *)(DerivedStorage + 556) = 0;
                        *(_QWORD *)(DerivedStorage + 540) = 0;
                        *(_QWORD *)(DerivedStorage + 548) = 0;
                        *(_QWORD *)(DerivedStorage + 560) = 1000000000;
                        *(_DWORD *)(DerivedStorage + 568) = 3;
                        if (*MEMORY[0x1E0CA1FC0] == 1)
                        {
                          strncpy((char *)&timebaseTime, (const char *)(DerivedStorage + 236), 8uLL);
                          kdebug_trace();
                        }
                        v33 = 0;
                        *a3 = cf;
                        return v33;
                      }
                      goto LABEL_36;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_35;
      }
      v33 = 4294951720;
      v16 = v18;
    }
    else
    {
      v33 = 4294951726;
    }
    CFRelease(v16);
    goto LABEL_29;
  }
  v33 = 4294951726;
LABEL_29:
  if (cf)
    CFRelease(cf);
  return v33;
}

void videoReceiver_finalizeConfigurationTimerSource(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void videoReceiver_activateReceiverConfiguration()
{
  const void *v0;
  const void *v1;
  CFTypeID v2;
  NSObject *v3;
  _QWORD block[5];

  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
    if (v2 == CMBaseClassGetCFTypeID())
    {
      v3 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 152);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __videoReceiver_activateReceiverConfiguration_block_invoke;
      block[3] = &__block_descriptor_tmp_97;
      block[4] = v1;
      dispatch_sync(v3, block);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t __receiverPlaybackStartupPreventionAssertion_finalize_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

CFStringRef FigVideoReceiverCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVideoReceiver %p]"), a1);
}

void videoReceiver_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  NSObject *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  os_log_type_t type;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38)
  {
    v28 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 48);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 64);
  if (v7)
  {
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 56), v7);
    dispatch_source_cancel(*(dispatch_source_t *)(DerivedStorage + 64));
  }
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v9 = *(NSObject **)(DerivedStorage + 64);
  if (v9)
  {
    dispatch_release(v9);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 88);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 80);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  dispatch_sync(*(dispatch_queue_t *)(DerivedStorage + 152), &__block_literal_global_30_0);
  v12 = *(NSObject **)(DerivedStorage + 152);
  if (v12)
    dispatch_release(v12);
  v13 = *(const void **)(DerivedStorage + 72);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v14 = *(NSObject **)(DerivedStorage + 264);
  if (v14)
  {
    dispatch_release(v14);
    *(_QWORD *)(DerivedStorage + 264) = 0;
  }
  _Block_release(*(const void **)(DerivedStorage + 400));
  *(_QWORD *)(DerivedStorage + 400) = 0;
  _Block_release(*(const void **)(DerivedStorage + 408));
  *(_QWORD *)(DerivedStorage + 408) = 0;
  FigSimpleMutexDestroy();
  _Block_release(*(const void **)(DerivedStorage + 424));
  *(_QWORD *)(DerivedStorage + 424) = 0;
  v15 = *(const void **)(DerivedStorage + 288);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 288) = 0;
  }
  FigSimpleMutexDestroy();
  v16 = *(const void **)(DerivedStorage + 312);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 320);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 320) = 0;
  }
  FigSimpleMutexDestroy();
  FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(*(_QWORD *)(DerivedStorage + 344));
  v18 = *(const void **)(DerivedStorage + 344);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 344) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 352);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 352) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 384);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 384) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 392);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 392) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 432))
  {
    v22 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v22)
    {
      v23 = (const void *)v22;
      receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler(v22, 0);
      CFRelease(v23);
    }
    v24 = *(const void **)(DerivedStorage + 432);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(DerivedStorage + 432) = 0;
    }
  }
  v25 = *(const void **)(DerivedStorage + 440);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(DerivedStorage + 440) = 0;
  }
  v26 = *(const void **)(DerivedStorage + 448);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(DerivedStorage + 448) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

__CFString *videoReceiver_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  const char *v4;
  CFIndex v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  if (a1)
    v4 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
  else
    v4 = "";
  v5 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoReceiver [%p|%s] retainCount: %d>"), a1, v4, v5);
  return Mutable;
}

uint64_t videoReceiver_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t *v10;
  uint64_t v11;
  xpc_object_t v12;
  uint64_t v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  CFMutableDictionaryRef v17;
  uint64_t v18;
  const void *v19;
  NSObject *v20;
  _QWORD *v21;
  void *v22;
  _QWORD block[6];
  _QWORD v24[6];
  os_log_type_t type;
  int v26;
  __int128 value;
  uint64_t v28;
  CFMutableArrayRef v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 5)
  {
    v26 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2 || !a4)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("XPCEndpointID")))
  {
    *(_QWORD *)&value = 0;
    v10 = (uint64_t *)(CMBaseObjectGetDerivedStorage() + 8);
    if (!*v10
      && (v11 = FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint(*MEMORY[0x1E0C9AE00], a1, (xpc_endpoint_t *)&value, v10), (_DWORD)v11))
    {
      v13 = v11;
      v12 = 0;
    }
    else
    {
      v12 = xpc_dictionary_create(0, 0, 0);
      xpc_dictionary_set_value(v12, (const char *)kFigVideoReceiverEndpoint, (xpc_object_t)value);
      v13 = 0;
    }
    FigXPCRelease();
    FigXPCRelease();
    if (!(_DWORD)v13)
    {
      if (v12)
      {
        v13 = 0;
        *a4 = (CFMutableDictionaryRef)v12;
      }
      else
      {
        return 4294951720;
      }
    }
    return v13;
  }
  if (CFEqual(a2, CFSTR("RefreshRate")))
  {
    Mutable = CFDictionaryCreateMutable(a3, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    value = *(_OWORD *)(DerivedStorage + 164);
    v28 = *(_QWORD *)(DerivedStorage + 180);
    FigCFDictionarySetCMTime();
    value = *(_OWORD *)(DerivedStorage + 188);
    v28 = *(_QWORD *)(DerivedStorage + 204);
    FigCFDictionarySetCMTime();
    value = *(_OWORD *)(DerivedStorage + 212);
    v28 = *(_QWORD *)(DerivedStorage + 228);
    FigCFDictionarySetCMTime();
LABEL_14:
    v13 = 0;
    *a4 = Mutable;
    return v13;
  }
  if (CFEqual(a2, CFSTR("DesiredPixelCount")))
  {
    v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(DerivedStorage + 160));
LABEL_19:
    v13 = 0;
    *a4 = v15;
    return v13;
  }
  if (CFEqual(a2, CFSTR("LoggingIdentifier")))
  {
    v15 = (__CFDictionary *)CFStringCreateWithCString(a3, (const char *)(DerivedStorage + 236), 0x600u);
    if (!v15)
      return 4294951726;
    goto LABEL_19;
  }
  if (CFEqual(a2, CFSTR("PlaybackStartupPreventionAssertionInfo")))
  {
    v17 = CFDictionaryCreateMutable(a3, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v17)
    {
      Mutable = v17;
      FigCFDictionarySetBoolean();
      if (*(_QWORD *)(DerivedStorage + 432))
      {
        v18 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v18)
        {
          v19 = (const void *)v18;
          FigCFDictionarySetBoolean();
          FigCFDictionarySetValue();
          CFRelease(v19);
        }
      }
      goto LABEL_14;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("ImageQueueReceivers")))
  {
    *(_QWORD *)&value = 0;
    *((_QWORD *)&value + 1) = &value;
    v28 = 0x2000000000;
    v29 = 0;
    v29 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    if (*(_QWORD *)(*((_QWORD *)&value + 1) + 24))
    {
      v20 = *(NSObject **)(DerivedStorage + 152);
      v24[0] = MEMORY[0x1E0C809B0];
      v24[1] = 0x40000000;
      v24[2] = __videoReceiver_CopyProperty_block_invoke;
      v24[3] = &unk_1E2F8A5F0;
      v24[4] = &value;
      v24[5] = DerivedStorage;
      v21 = v24;
LABEL_32:
      dispatch_sync(v20, v21);
      v13 = 0;
      *a4 = *(CFMutableDictionaryRef *)(*((_QWORD *)&value + 1) + 24);
LABEL_33:
      _Block_object_dispose(&value, 8);
      return v13;
    }
    goto LABEL_47;
  }
  if (CFEqual(a2, CFSTR("DataQueues")))
  {
    *(_QWORD *)&value = 0;
    *((_QWORD *)&value + 1) = &value;
    v28 = 0x2000000000;
    v29 = 0;
    v29 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    if (*(_QWORD *)(*((_QWORD *)&value + 1) + 24))
    {
      v20 = *(NSObject **)(DerivedStorage + 152);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __videoReceiver_CopyProperty_block_invoke_2;
      block[3] = &unk_1E2F8A618;
      block[4] = &value;
      block[5] = DerivedStorage;
      v21 = block;
      goto LABEL_32;
    }
LABEL_47:
    v13 = 4294951726;
    goto LABEL_33;
  }
  if (CFEqual(a2, CFSTR("ClientPreferredDataChannelGroups")))
  {
    *(_QWORD *)&value = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 304));
    v13 = FigDataChannelGroupsArrayCopyAsDictionary(*(const __CFArray **)(DerivedStorage + 288), a3, (CFDictionaryRef *)&value);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 304));
    if (!(_DWORD)v13)
      *a4 = (CFMutableDictionaryRef)value;
  }
  else if (CFEqual(a2, CFSTR("ClientDataChannelSettings")))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 336));
    v22 = *(void **)(DerivedStorage + 320);
    if (v22)
      v22 = (void *)CFRetain(v22);
    *a4 = (CFMutableDictionaryRef)v22;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 336));
    return 0;
  }
  else
  {
    return 4294954509;
  }
  return v13;
}

uint64_t videoReceiver_SetProperty(CFTypeRef cf, const void *a2, const void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v8;
  uint64_t DerivedStorage;
  CFTypeID v10;
  CMTimeEpoch v11;
  __int128 v12;
  CMTimeEpoch epoch;
  uint64_t v14;
  NSObject *v15;
  __CFDictionary *Mutable;
  CFTypeID v17;
  int value;
  NSObject *v19;
  __int128 v20;
  _QWORD v21[5];
  int v22;
  _QWORD block[5];
  __int128 v24;
  CMTimeEpoch v25;
  CMTime time2;
  CMTime type;
  CMTime v28;
  CMTime v29;
  CMTime valuePtr;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 4)
  {
    LODWORD(v28.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    return FigSignalErrorAt();
  v8 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v8 != CMBaseClassGetCFTypeID() || !a2 || !a3)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v10 = CFGetTypeID(a3);
    if (v10 == CFDictionaryGetTypeID())
    {
      valuePtr = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      v29 = valuePtr;
      v28 = valuePtr;
      FigCFDictionaryGetCMTimeIfPresent();
      if ((valuePtr.flags & 0x1D) == 1)
      {
        type = valuePtr;
        v20 = *MEMORY[0x1E0CA2E68];
        *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
        v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        time2.epoch = v11;
        if (CMTimeCompare(&type, &time2) >= 1)
        {
          FigCFDictionaryGetCMTimeIfPresent();
          if ((v29.flags & 0x1D) == 1)
          {
            type = v29;
            *(_OWORD *)&time2.value = v20;
            time2.epoch = v11;
            if (CMTimeCompare(&type, &time2) >= 1)
            {
              FigCFDictionaryGetCMTimeIfPresent();
              if ((v28.flags & 0x1D) == 1)
              {
                v12 = *(_OWORD *)&valuePtr.value;
                *(_OWORD *)(DerivedStorage + 164) = *(_OWORD *)&valuePtr.value;
                *(_OWORD *)(DerivedStorage + 188) = *(_OWORD *)&v29.value;
                *(_OWORD *)(DerivedStorage + 212) = *(_OWORD *)&v28.value;
                block[1] = 0x40000000;
                epoch = valuePtr.epoch;
                *(_QWORD *)(DerivedStorage + 180) = valuePtr.epoch;
                *(_QWORD *)(DerivedStorage + 204) = v29.epoch;
                v14 = MEMORY[0x1E0C809B0];
                *(_QWORD *)(DerivedStorage + 228) = v28.epoch;
                block[0] = v14;
                block[2] = __videoReceiver_SetProperty_block_invoke;
                block[3] = &__block_descriptor_tmp_38;
                v15 = *(NSObject **)(DerivedStorage + 152);
                block[4] = cf;
                v25 = epoch;
                v24 = v12;
                dispatch_async(v15, block);
                Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                CFDictionarySetValue(Mutable, a2, a3);
                CMNotificationCenterGetDefaultLocalCenter();
                CMNotificationCenterPostNotification();
                if (Mutable)
                  CFRelease(Mutable);
                return 0;
              }
            }
          }
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (FigCFEqual())
  {
    v17 = CFGetTypeID(a3);
    if (v17 == CFNumberGetTypeID())
    {
      LODWORD(valuePtr.value) = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
      value = valuePtr.value;
      if ((valuePtr.value & 0x80000000) == 0)
      {
        *(_DWORD *)(DerivedStorage + 160) = valuePtr.value;
        v19 = *(NSObject **)(DerivedStorage + 152);
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 0x40000000;
        v21[2] = __videoReceiver_SetProperty_block_invoke_2;
        v21[3] = &__block_descriptor_tmp_39;
        v21[4] = cf;
        v22 = value;
        dispatch_async(v19, v21);
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  return 4294954509;
}

void receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler(uint64_t a1, void *aBlock)
{
  void *v3;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = 0;
  v8 = &v7;
  v9 = 0x3002000000;
  v10 = __Block_byref_object_copy__1;
  v11 = __Block_byref_object_dispose__1;
  v12 = 0;
  v3 = _Block_copy(aBlock);
  v4 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler_block_invoke;
  block[3] = &unk_1E2F8A5C8;
  block[5] = &v7;
  block[6] = a1;
  block[4] = v3;
  dispatch_sync(v4, block);
  if (dword_1EE2A2D38 >= 4)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  _Block_release((const void *)v8[5]);
  _Block_object_dispose(&v7, 8);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

_QWORD *__receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler_block_invoke(_QWORD *result)
{
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 40) = *(_QWORD *)(result[6] + 32);
  *(_QWORD *)(result[6] + 32) = result[4];
  return result;
}

uint64_t videoReceiver_createEndpointID(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t value;

  value = 0;
  v4 = (uint64_t *)(CMBaseObjectGetDerivedStorage() + 8);
  if (!*v4
    && (v5 = FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint(*MEMORY[0x1E0C9AE00], a1, (xpc_endpoint_t *)&value, v4), (_DWORD)v5))
  {
    v7 = v5;
  }
  else
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_value(v6, (const char *)kFigVideoReceiverEndpoint, value);
    v7 = 0;
    *a2 = v6;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t videoReceiver_copyImageForTime(const void *a1, __int128 *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  CFTypeID v9;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  const void *ValueAtIndex;
  NSObject *v17;
  NSObject *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  Float64 Seconds;
  int v23;
  CMTimeEpoch epoch;
  uint64_t *v25;
  const void *v26;
  uint64_t v27;
  _QWORD v29[10];
  __int128 v30;
  uint64_t v31;
  char v32;
  _QWORD block[6];
  __int128 v34;
  uint64_t v35;
  os_log_type_t type;
  unsigned int v37;
  __int16 v38;
  uint64_t v39;
  CMTime *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  CFArrayRef theArray;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  const char *v54;
  __int16 v55;
  const void *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  Float64 v60;
  __int16 v61;
  const void *v62;
  CMTime time;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v50 = &v49;
  v51 = 0x2000000000;
  v52 = 0;
  v47 = 0;
  theArray = 0;
  v44 = 0;
  v45 = &v44;
  v46 = 0x2000000000;
  v39 = 0;
  v40 = (CMTime *)&v39;
  v41 = 0x3000000000;
  v42 = *MEMORY[0x1E0CA2E18];
  v43 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v38 = 0;
  if (!a1
    || (v9 = CFGetTypeID(a1),
        MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v9 != CMBaseClassGetCFTypeID())|| (*((_BYTE *)a2 + 12) & 1) == 0|| !a4)
  {
    *((_DWORD *)v50 + 6) = FigSignalErrorAt();
    goto LABEL_31;
  }
  FigCFDictionaryGetBooleanIfPresent();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38 >= 3)
  {
    v37 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = *(NSObject **)(DerivedStorage + 152);
  v13 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_copyImageForTime_block_invoke;
  block[3] = &__block_descriptor_tmp_41;
  v34 = *a2;
  v35 = *((_QWORD *)a2 + 2);
  block[4] = DerivedStorage;
  block[5] = a1;
  dispatch_sync(v12, block);
  v14 = videoReceiver_copyOutputQueuesIfReady(a1, (_BYTE *)&v38 + 1, &theArray, 0, 0, 0, 0);
  v15 = v50;
  *((_DWORD *)v50 + 6) = v14;
  if (!v14)
  {
    if (*(_QWORD *)(DerivedStorage + 88))
    {
      if (!HIBYTE(v38))
      {
LABEL_29:
        v23 = -15575;
        goto LABEL_30;
      }
      if (theArray)
      {
        if (CFArrayGetCount(theArray))
        {
          if (HIBYTE(v38))
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            v17 = *(NSObject **)(DerivedStorage + 152);
            v29[0] = v13;
            v29[1] = 0x40000000;
            v29[2] = __videoReceiver_copyImageForTime_block_invoke_2;
            v29[3] = &unk_1E2F8A6A0;
            v30 = *a2;
            v31 = *((_QWORD *)a2 + 2);
            v32 = v38;
            v29[8] = ValueAtIndex;
            v29[9] = DerivedStorage;
            v29[4] = &v49;
            v29[5] = &v44;
            v29[6] = &v39;
            v29[7] = a1;
            dispatch_sync(v17, v29);
            if (!*((_DWORD *)v50 + 6))
            {
              if (dword_1EE2A2D38 >= 3)
              {
                v37 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v19 = v37;
                if (os_log_type_enabled(v18, type))
                  v20 = v19;
                else
                  v20 = v19 & 0xFFFFFFFE;
                if (v20)
                {
                  v21 = CMBaseObjectGetDerivedStorage() + 236;
                  time = v40[1];
                  Seconds = CMTimeGetSeconds(&time);
                  v53 = 136316162;
                  v54 = "videoReceiver_copyImageForTime";
                  v55 = 2048;
                  v56 = a1;
                  v57 = 2082;
                  v58 = v21;
                  v59 = 2048;
                  v60 = Seconds;
                  v61 = 2048;
                  v62 = ValueAtIndex;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (a5)
              {
                epoch = v40[1].epoch;
                *(_OWORD *)a5 = *(_OWORD *)&v40[1].value;
                *(_QWORD *)(a5 + 16) = epoch;
              }
              v25 = v45;
              *a4 = v45[3];
              v25[3] = 0;
            }
            goto LABEL_31;
          }
          v15 = v50;
          goto LABEL_29;
        }
        v15 = v50;
      }
      v23 = -15930;
    }
    else
    {
      v23 = -15579;
    }
LABEL_30:
    *((_DWORD *)v15 + 6) = v23;
  }
LABEL_31:
  if (theArray)
    CFRelease(theArray);
  v26 = (const void *)v45[3];
  if (v26)
    CFRelease(v26);
  v27 = *((unsigned int *)v50 + 6);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v44, 8);
  _Block_object_dispose(&v49, 8);
  return v27;
}

uint64_t videoReceiver_createImageQueueReceiver(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v8;
  CFTypeID v9;
  uint64_t DerivedStorage;
  const void *v11;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v13;
  const void *Float32;
  NSObject *v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v23;
  int v24;
  const char *v25;
  __int16 v26;
  CFTypeRef v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const void *v31;
  __int16 v32;
  uint64_t v33;
  CMTime time;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 2)
  {
    v23 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    return FigSignalErrorAt();
  v9 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v9 != CMBaseClassGetCFTypeID() || !a2 || !a4)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = (const void *)CAXPCImageQueueReceiverCreate();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v8 = FigSignalErrorAt();
    if (!v11)
      return v8;
    goto LABEL_22;
  }
  v13 = Mutable;
  FigCFDictionarySetValue();
  if (*(_DWORD *)(DerivedStorage + 160))
    CAXPCImageQueueReceiverSetDisplayedPixelCount();
  if ((*(_DWORD *)(DerivedStorage + 176) & 0x1D) == 1)
  {
    time = *(CMTime *)(DerivedStorage + 164);
    CMTimeGetSeconds(&time);
    Float32 = (const void *)FigCFNumberCreateFloat32();
    CAXPCImageQueueReceiverSetProperty();
    if (Float32)
      CFRelease(Float32);
  }
  v15 = *(NSObject **)(DerivedStorage + 152);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_createImageQueueReceiver_block_invoke;
  block[3] = &__block_descriptor_tmp_59;
  block[4] = a2;
  block[5] = DerivedStorage;
  block[6] = v13;
  dispatch_sync(v15, block);
  if (dword_1EE2A2D38)
  {
    v23 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v17 = v23;
    if (os_log_type_enabled(v16, type))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if (v18)
    {
      v19 = CMBaseObjectGetDerivedStorage();
      v24 = 136316162;
      v25 = "videoReceiver_createImageQueueReceiver";
      v26 = 2048;
      v27 = cf;
      v28 = 2082;
      v29 = v19 + 236;
      v30 = 2048;
      v31 = v11;
      v32 = 2048;
      v33 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(v13);
  v8 = 0;
  if (v11)
LABEL_22:
    CFRelease(v11);
  return v8;
}

uint64_t videoReceiver_releaseImageQueueReceiver(CFTypeRef cf, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v6;
  NSObject *v7;
  _QWORD block[6];
  os_log_type_t type;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 2)
  {
    v10 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v6 != CMBaseClassGetCFTypeID() || !a2)
    return FigSignalErrorAt();
  v7 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 152);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_releaseImageQueueReceiver_block_invoke;
  block[3] = &__block_descriptor_tmp_60;
  block[4] = cf;
  block[5] = a2;
  dispatch_sync(v7, block);
  return 0;
}

uint64_t videoReceiver_setImageQueueMessage(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v7;
  BOOL v8;
  NSObject *v10;
  NSObject *v11;
  const void *v12;
  uint64_t v13;
  _QWORD block[8];
  os_log_type_t type;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  if (dword_1EE2A2D38 >= 2)
  {
    v17 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    goto LABEL_4;
  v7 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  v8 = v7 != CMBaseClassGetCFTypeID() || a2 == 0;
  if (v8 || a3 == 0)
    goto LABEL_4;
  if (dword_1EE2A2D38 >= 2)
  {
    v17 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v11 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 152);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_setImageQueueMessage_block_invoke;
  block[3] = &unk_1E2F8A830;
  block[6] = cf;
  block[7] = a2;
  block[4] = &v18;
  block[5] = &v22;
  dispatch_sync(v11, block);
  if (!*((_DWORD *)v23 + 6) && (CAXPCImageQueueReceiverProcessMessage() & 1) == 0)
LABEL_4:
    *((_DWORD *)v23 + 6) = FigSignalErrorAt();
  v12 = (const void *)v19[3];
  if (v12)
    CFRelease(v12);
  v13 = *((unsigned int *)v23 + 6);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  return v13;
}

uint64_t videoReceiver_createDataQueue(const void *a1, uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  const __CFAllocator *v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  const char *v18;
  _QWORD block[6];
  os_log_type_t type;
  unsigned int v22;
  CFTypeRef cf;
  CMTime v24;
  const char *v25;
  __int16 v26;
  CFTypeRef v27;
  CMTime v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (dword_1EE2A2D38 >= 2)
  {
    v22 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a5)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = CFGetAllocator(a1);
  v28 = *a3;
  v24 = *a4;
  v13 = FigDataQueueCreate(v12, a2, &v28, &v24, &cf);
  if ((_DWORD)v13)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v14 = *(NSObject **)(DerivedStorage + 152);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_createDataQueue_block_invoke;
    block[3] = &__block_descriptor_tmp_62;
    block[4] = cf;
    block[5] = DerivedStorage;
    dispatch_sync(v14, block);
    if (dword_1EE2A2D38)
    {
      v22 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v16 = v22;
      if (os_log_type_enabled(v15, type))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if (v17)
      {
        if (a1)
          v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
        else
          v18 = "";
        LODWORD(v24.value) = 136315906;
        *(CMTimeValue *)((char *)&v24.value + 4) = (CMTimeValue)"videoReceiver_createDataQueue";
        LOWORD(v24.flags) = 2048;
        *(_QWORD *)((char *)&v24.flags + 2) = a1;
        HIWORD(v24.epoch) = 2082;
        v25 = v18;
        v26 = 2048;
        v27 = cf;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v13 = 0;
    *a5 = cf;
  }
  return v13;
}

uint64_t videoReceiver_addDataChannelConfiguration(const void *a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeID v10;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  NSObject *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  NSObject *v18;
  CMTimeValue v19;
  const __CFAllocator *v20;
  CFTypeRef v21;
  uint64_t v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  _QWORD *v29;
  int ModificationID;
  CFTypeRef v31;
  NSObject *v32;
  const __CFString *v33;
  CFRange v34;
  const __CFString *v35;
  CFRange v36;
  __int128 *v38;
  CFStringRef theString;
  CFStringRef v40;
  _QWORD v41[10];
  __int128 v42;
  uint64_t v43;
  int v44;
  _QWORD v45[7];
  __int128 v46;
  uint64_t v47;
  _QWORD v48[7];
  CFTypeRef cf;
  CFTypeRef v50;
  CFTypeRef v51;
  CFTypeRef v52;
  os_log_type_t v53;
  os_log_type_t type[4];
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  _BYTE buffer[12];
  __int16 v60;
  const void *v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  CMTime block;
  void *v67;
  uint64_t *v68;
  uint64_t v69;
  const void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v51 = 0;
  v52 = 0;
  cf = 0;
  v50 = 0;
  if (!a1)
    goto LABEL_2;
  v10 = CFGetTypeID(a1);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v10 != CMBaseClassGetCFTypeID() || !a2)
    goto LABEL_2;
  v38 = a4;
  if (a3)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A2D38)
      goto LABEL_11;
    goto LABEL_12;
  }
  if ((*((_BYTE *)a4 + 12) & 1) == 0)
  {
LABEL_2:
    v4 = FigSignalErrorAt();
    goto LABEL_3;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38)
  {
LABEL_11:
    LODWORD(v55) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_12:
  v55 = 0;
  v56 = &v55;
  v57 = 0x2000000000;
  v58 = 0;
  v13 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38 >= 2)
  {
    *(_DWORD *)type = 0;
    v53 = OS_LOG_TYPE_DEFAULT;
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v15 = *(_DWORD *)type;
    if (os_log_type_enabled(v14, v53))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if (v16)
    {
      v17 = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)buffer = 136315906;
      *(_QWORD *)&buffer[4] = "videoReceiver_EnsureDataChannelConfigurationIsValid";
      v60 = 2048;
      v61 = a1;
      v62 = 2082;
      v63 = v17 + 236;
      v64 = 2114;
      v65 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v18 = *(NSObject **)(v13 + 152);
  v19 = MEMORY[0x1E0C809B0];
  block.value = MEMORY[0x1E0C809B0];
  *(_QWORD *)&block.timescale = 0x40000000;
  block.epoch = (CMTimeEpoch)__videoReceiver_EnsureDataChannelConfigurationIsValid_block_invoke;
  v67 = &unk_1E2F8A8D8;
  v69 = a2;
  v70 = a1;
  v68 = &v55;
  dispatch_sync(v18, &block);
  v5 = *((unsigned int *)v56 + 6);
  _Block_object_dispose(&v55, 8);
  if (!(_DWORD)v5)
  {
    v20 = CFGetAllocator(a1);
    v4 = FigDataChannelConfigurationCreateCopy(v20, a2, &cf);
    if ((_DWORD)v4)
      goto LABEL_3;
    v21 = cf;
    v55 = 0;
    v56 = &v55;
    v57 = 0x2000000000;
    v58 = 0;
    v22 = CMBaseObjectGetDerivedStorage();
    if (dword_1EE2A2D38 >= 2)
    {
      *(_DWORD *)type = 0;
      v53 = OS_LOG_TYPE_DEFAULT;
      v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v24 = *(_DWORD *)type;
      if (os_log_type_enabled(v23, v53))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if (v25)
      {
        v26 = CMBaseObjectGetDerivedStorage();
        *(_DWORD *)buffer = 136315906;
        *(_QWORD *)&buffer[4] = "videoReceiver_AddImageQueueReceiverToConfiguration";
        v60 = 2048;
        v61 = a1;
        v62 = 2082;
        v63 = v26 + 236;
        v64 = 2114;
        v65 = (uint64_t)v21;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v27 = *(NSObject **)(v22 + 152);
    block.value = v19;
    *(_QWORD *)&block.timescale = 0x40000000;
    block.epoch = (CMTimeEpoch)__videoReceiver_AddImageQueueReceiverToConfiguration_block_invoke;
    v67 = &unk_1E2F8A900;
    v69 = (uint64_t)v21;
    v70 = a1;
    v68 = &v55;
    dispatch_sync(v27, &block);
    v5 = *((unsigned int *)v56 + 6);
    _Block_object_dispose(&v55, 8);
    if (!(_DWORD)v5)
    {
      v28 = *(NSObject **)(DerivedStorage + 152);
      if (a3)
      {
        v48[0] = v19;
        v48[1] = 0x40000000;
        v48[2] = __videoReceiver_addDataChannelConfiguration_block_invoke;
        v48[3] = &__block_descriptor_tmp_63;
        v48[4] = cf;
        v48[5] = DerivedStorage;
        v29 = v48;
      }
      else
      {
        v45[0] = v19;
        v45[1] = 0x40000000;
        v45[2] = __videoReceiver_addDataChannelConfiguration_block_invoke_64;
        v45[3] = &__block_descriptor_tmp_65;
        v45[4] = DerivedStorage;
        v45[5] = cf;
        v46 = *v38;
        v29 = v45;
        v47 = *((_QWORD *)v38 + 2);
      }
      v29[6] = a1;
      dispatch_sync(v28, v29);
      v4 = fvr_copyDescriptionSettingsAndResourcesFromConfiguration((uint64_t)cf, (__CFArray **)&v52, (CFMutableDictionaryRef *)&v51, (__CFArray **)&v50);
      if (!(_DWORD)v4)
      {
        CFRetain(a1);
        ModificationID = FigDataChannelConfigurationGetModificationID((uint64_t)cf);
        if (cf)
          CFRetain(cf);
        if (v52)
          CFRetain(v52);
        if (v51)
          CFRetain(v51);
        if (v50)
        {
          CFRetain(v50);
          v31 = v50;
        }
        else
        {
          v31 = 0;
        }
        v32 = *(NSObject **)(DerivedStorage + 264);
        v41[0] = v19;
        v41[1] = 0x40000000;
        v41[2] = __videoReceiver_addDataChannelConfiguration_block_invoke_66;
        v41[3] = &__block_descriptor_tmp_67;
        v41[4] = DerivedStorage;
        v41[5] = a1;
        v42 = *v38;
        v43 = *((_QWORD *)v38 + 2);
        v44 = ModificationID;
        v41[6] = cf;
        v41[7] = v52;
        v41[8] = v51;
        v41[9] = v31;
        dispatch_async(v32, v41);
        theString = 0;
        v40 = 0;
        FigDataChannelConfigurationCopyPlayerItemLoggingIdentifier((uint64_t)cf, &v40);
        FigDataChannelConfigurationCopyLoggingIdentifier((uint64_t)cf, &theString);
        if (*MEMORY[0x1E0CA1FC0] == 1)
        {
          v33 = theString;
          *(_QWORD *)buffer = 0;
          if (theString)
          {
            if (CFStringGetLength(theString) <= 8)
              v34.length = CFStringGetLength(v33);
            else
              v34.length = 8;
            v34.location = 0;
            CFStringGetBytes(v33, v34, 0, 0x3Fu, 0, buffer, 8, 0);
          }
          strncpy((char *)&block, buffer, 8uLL);
          v35 = v40;
          *(_QWORD *)buffer = 0;
          if (v40)
          {
            if (CFStringGetLength(v40) <= 8)
              v36.length = CFStringGetLength(v35);
            else
              v36.length = 8;
            v36.location = 0;
            CFStringGetBytes(v35, v36, 0, 0x3Fu, 0, buffer, 8, 0);
          }
          strncpy((char *)&block, buffer, 8uLL);
          kdebug_trace();
        }
        if (v40)
          CFRelease(v40);
        if (theString)
          CFRelease(theString);
        v5 = 0;
        goto LABEL_59;
      }
LABEL_3:
      v5 = v4;
    }
  }
LABEL_59:
  if (v52)
    CFRelease(v52);
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (cf)
    CFRelease(cf);
  return v5;
}

uint64_t videoReceiver_createPlaybackStartupPreventionAssertion(const void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t Instance;
  uint64_t v13;
  dispatch_queue_t v14;
  uint64_t v15;
  const __CFAllocator *v16;
  __CFDictionary *Mutable;
  __CFDictionary *v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  const void *v29;
  _QWORD aBlock[5];
  os_log_type_t type;
  unsigned int v32;
  int v33;
  const char *v34;
  __int16 v35;
  const void *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    if (!a2)
    {
      FigSignalErrorAt();
      return 0;
    }
    v8 = (uint64_t *)DerivedStorage;
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 432))
    {
      v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        v10 = v9;
        if (dword_1EE2A2D38)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v27 = 0;
        *a4 = v10;
        return v27;
      }
    }
    CFGetAllocator(a1);
    if (FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken != -1)
      dispatch_once(&FigVideoReceiverPlaybackStartupPreventionAssertionGetTypeID_sRegisterReceiverPlaybackStartupPreventionAssertionTypeOnceToken, &__block_literal_global_10);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v13 = Instance;
      v14 = dispatch_queue_create("com.apple.coremedia.videoreceiver.videoreceiverassertionQ", 0);
      *(_QWORD *)(v13 + 24) = v14;
      if (v14)
      {
        *(_QWORD *)(v13 + 16) = CFRetain(a2);
        goto LABEL_12;
      }
      v27 = FigSignalErrorAt();
      CFRelease((CFTypeRef)v13);
    }
    else
    {
      v27 = FigSignalErrorAt();
    }
    if ((_DWORD)v27)
      return v27;
    v13 = 0;
LABEL_12:
    v15 = *v8;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 0x40000000;
    aBlock[2] = __videoReceiver_createPlaybackStartupPreventionAssertion_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_78;
    aBlock[4] = v15;
    receiverPlaybackStartupPreventionAssertion_setAssertionFinalizedHandler(v13, aBlock);
    v16 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v16, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v18 = Mutable;
      CFDictionarySetValue(Mutable, CFSTR("PlaybackStartupPreventionAssertionDebugDescription"), *(const void **)(v13 + 16));
      if (dword_1EE2A2D38)
      {
        v32 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v20 = v32;
        if (os_log_type_enabled(v19, type))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if (v21)
        {
          if (a1)
            v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          else
            v22 = "";
          v33 = 136315906;
          v34 = "videoReceiver_createPlaybackStartupPreventionAssertion";
          v35 = 2048;
          v36 = a1;
          v37 = 2082;
          v38 = v22;
          v39 = 2112;
          v40 = v13;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      v23 = CMNotificationCenterPostNotification();
      if (!(_DWORD)v23)
      {
        v24 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        if (v24)
        {
          v25 = v24;
          v26 = (const void *)v8[54];
          v8[54] = (uint64_t)v24;
          CFRetain(v24);
          if (v26)
            CFRelease(v26);
          *a4 = v13;
          CFRelease(v18);
          CFRelease(v25);
          return 0;
        }
        v23 = FigSignalErrorAt();
      }
      v27 = v23;
      CFRelease((CFTypeRef)v13);
      v29 = v18;
    }
    else
    {
      v27 = FigSignalErrorAt();
      if (!v13)
        return v27;
      v29 = (const void *)v13;
    }
    CFRelease(v29);
    return v27;
  }
  return FigSignalErrorAt();
}

uint64_t videoReceiver_specifyPreferredDataChannelGroupsWithID(CFTypeRef cf, const __CFArray *a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  CFTypeID v9;
  uint64_t DerivedStorage;
  CFAllocatorRef *v11;
  const __CFAllocator *v12;
  CFIndex Count;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex v18;
  const void *ValueAtIndex;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  const OpaqueCMTagCollection *DataChannelByIndex;
  __CFDictionary *v24;
  const void *v25;
  const __CFAllocator *v26;
  __CFDictionary *v27;
  uint64_t v28;
  __CFDictionary *v29;
  int v31;
  CFTypeRef cfa;
  void *value[18];

  value[16] = *(void **)MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    return FigSignalErrorAt();
  v9 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v9 != CMBaseClassGetCFTypeID())
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!a2
    || (v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        Count = CFArrayGetCount(a2),
        (Mutable = CFArrayCreateMutable(v12, Count, MEMORY[0x1E0C9B378])) == 0))
  {
    v7 = FigSignalErrorAt();
    v15 = 0;
    if (!(_DWORD)v7)
      goto LABEL_32;
    return v7;
  }
  v15 = Mutable;
  v16 = CFArrayGetCount(a2);
  if (v16 >= 1)
  {
    v17 = v16;
    v31 = a3;
    v18 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v18);
      value[0] = 0;
      cfa = 0;
      if (ValueAtIndex)
      {
        v20 = (uint64_t)ValueAtIndex;
        v21 = FigDataChannelGroupCreate(v12, value);
        if (!(_DWORD)v21)
        {
          if (FigDataChannelGroupGetCountOfDataChannels(v20) < 1)
          {
LABEL_20:
            v8 = 0;
            v24 = (__CFDictionary *)value[0];
            value[0] = 0;
            goto LABEL_21;
          }
          v22 = 0;
          while (1)
          {
            DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex(v20, v22);
            v21 = vr_createModifiedDataChannelTagCollectionWithDefaultTags(DataChannelByIndex, &cfa);
            if ((_DWORD)v21)
              break;
            v21 = FigDataChannelGroupAddDataChannel((uint64_t)value[0], (void *)cfa);
            if ((_DWORD)v21)
              break;
            if (cfa)
            {
              CFRelease(cfa);
              cfa = 0;
            }
            if (++v22 >= FigDataChannelGroupGetCountOfDataChannels(v20))
              goto LABEL_20;
          }
        }
      }
      else
      {
        v21 = FigSignalErrorAt();
      }
      v8 = v21;
      if (value[0])
        CFRelease(value[0]);
      v24 = 0;
LABEL_21:
      if (cfa)
        CFRelease(cfa);
      if ((_DWORD)v8)
      {
        CFRelease(v15);
        if (v24)
        {
          v29 = v24;
LABEL_46:
          CFRelease(v29);
        }
        return v8;
      }
      CFArrayAppendValue(v15, v24);
      if (v24)
        CFRelease(v24);
      if (++v18 == v17)
      {
        a3 = v31;
        v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
        break;
      }
    }
  }
LABEL_32:
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 304));
  v25 = *(const void **)(DerivedStorage + 288);
  *(_QWORD *)(DerivedStorage + 288) = v15;
  if (v15)
    CFRetain(v15);
  if (v25)
    CFRelease(v25);
  *(_DWORD *)(DerivedStorage + 296) = a3;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 304));
  v26 = *v11;
  v27 = CFDictionaryCreateMutable(*v11, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a2)
  {
LABEL_40:
    if (a3)
      FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    v8 = 0;
    if (v15)
      goto LABEL_43;
    goto LABEL_44;
  }
  value[0] = 0;
  v28 = FigDataChannelGroupsArrayCopyAsDictionary(a2, v26, (CFDictionaryRef *)value);
  if (!(_DWORD)v28)
  {
    CFDictionarySetValue(v27, CFSTR("PreferredDataChannelGroups"), value[0]);
    if (value[0])
      CFRelease(value[0]);
    goto LABEL_40;
  }
  v8 = v28;
  if (v15)
LABEL_43:
    CFRelease(v15);
LABEL_44:
  if (v27)
  {
    v29 = v27;
    goto LABEL_46;
  }
  return v8;
}

uint64_t videoReceiver_specifyDataChannelSettingsWithID(CFTypeRef cf, const __CFArray *a2, int a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  __CFDictionary *v8;
  CFTypeID v9;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  CFIndex i;
  uint64_t DerivedStorage;
  const __CFAllocator *v14;
  CFMutableArrayRef Mutable;
  __CFArray *v16;
  CFIndex j;
  const __CFDictionary *v18;
  __CFDictionary *MutableCopy;
  const OpaqueCMTagCollection *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  CFTypeRef v25;
  __CFDictionary *v26;
  void *value;
  CFTypeRef cfa;
  CFDictionaryRef theDict;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  value = 0;
  cfa = 0;
  if (dword_1EE2A2D38 >= 4)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    goto LABEL_4;
  v9 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v9 != CMBaseClassGetCFTypeID())
    goto LABEL_4;
  v10 = 0;
  if (a2)
    goto LABEL_14;
LABEL_15:
  for (i = 0; v10 < i; i = CFArrayGetCount(a2))
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v10);
    CFDictionaryGetValue(ValueAtIndex, CFSTR("ChannelSpecificSettings"));
    theDict = 0;
    if (FigCFDictionaryGetValueIfPresent()
      && (CFDictionaryGetCount(theDict) < 3
       || !CFDictionaryGetValue(theDict, CFSTR("VideoColorPrimaries"))
       || !CFDictionaryGetValue(theDict, CFSTR("VideoYCbCrMatrix"))
       || !CFDictionaryGetValue(theDict, CFSTR("VideoTransferFunction"))))
    {
      goto LABEL_4;
    }
    ++v10;
    if (!a2)
      goto LABEL_15;
LABEL_14:
    ;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v16 = Mutable;
    if (CFArrayGetCount(a2) >= 1)
    {
      for (j = 0; j < CFArrayGetCount(a2); ++j)
      {
        v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, j);
        MutableCopy = CFDictionaryCreateMutableCopy(v14, 0, v18);
        v20 = (const OpaqueCMTagCollection *)CFDictionaryGetValue(v18, CFSTR("ChannelDescription"));
        if (v20)
        {
          v21 = vr_createModifiedDataChannelTagCollectionWithDefaultTags(v20, &value);
          if ((_DWORD)v21)
          {
            v7 = v21;
            goto LABEL_49;
          }
          CFDictionarySetValue(MutableCopy, CFSTR("ChannelDescription"), value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
        }
        CFArrayAppendValue(v16, MutableCopy);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
    }
    v22 = FigVideoReceiverDataChannelSettingsCopySerializable(v16, (__CFArray **)&cfa);
    if ((_DWORD)v22)
    {
      v7 = v22;
      MutableCopy = 0;
LABEL_49:
      v8 = 0;
    }
    else
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 336));
      v23 = *(const void **)(DerivedStorage + 312);
      *(_QWORD *)(DerivedStorage + 312) = v16;
      CFRetain(v16);
      if (v23)
        CFRelease(v23);
      v24 = *(const void **)(DerivedStorage + 320);
      v25 = cfa;
      *(_QWORD *)(DerivedStorage + 320) = cfa;
      if (v25)
        CFRetain(v25);
      if (v24)
        CFRelease(v24);
      *(_DWORD *)(DerivedStorage + 328) = a3;
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 336));
      v26 = CFDictionaryCreateMutable(v14, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v8 = v26;
      if (cfa)
        CFDictionarySetValue(v26, CFSTR("DataChannelSettings"), cfa);
      if (a3)
        FigCFDictionarySetInt32();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      MutableCopy = 0;
      v7 = 0;
    }
    CFRelease(v16);
    if (value)
      CFRelease(value);
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  else
  {
LABEL_4:
    v7 = FigSignalErrorAt();
    v8 = 0;
  }
  if (cfa)
    CFRelease(cfa);
  if (v8)
    CFRelease(v8);
  return v7;
}

uint64_t videoReceiver_copyTaggedBufferGroupForTime(CMTime *a1, __int128 *a2, uint64_t a3, CFTypeRef *a4, CMTime *a5)
{
  __int128 v6;
  uint64_t v7;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  return videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(a1, (uint64_t)&v6, a3, a4, 0, a5, 0);
}

uint64_t videoReceiver_copyTaggedBufferGroupAndResourcesForTime(CMTime *a1, __int128 *a2, uint64_t a3, CFTypeRef *a4, CFTypeRef *a5, CMTime *a6)
{
  __int128 v7;
  uint64_t v8;

  if (!a5)
    return FigSignalErrorAt();
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  return videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(a1, (uint64_t)&v7, a3, a4, a5, a6, 0);
}

uint64_t videoReceiver_createDataChannelResource(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  CFAllocatorRef v10;
  uint64_t v11;
  NSObject *v12;
  CFTypeRef v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD block[7];
  os_log_type_t type;
  int v19;
  CFTypeRef cf[25];

  cf[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (dword_1EE2A2D38 >= 3)
  {
    v19 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a4)
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = CFGetAllocator(a1);
  v11 = FigDataChannelResourceCreate((uint64_t)v10, a2, a3, cf);
  if ((_DWORD)v11)
  {
    v15 = v11;
    if (cf[0])
      CFRelease(cf[0]);
  }
  else
  {
    if (dword_1EE2A2D38)
    {
      v19 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a1)
      CFRetain(a1);
    if (cf[0])
    {
      CFRetain(cf[0]);
      v13 = cf[0];
    }
    else
    {
      v13 = 0;
    }
    v14 = *(NSObject **)(DerivedStorage + 264);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_createDataChannelResource_block_invoke;
    block[3] = &__block_descriptor_tmp_89;
    block[4] = DerivedStorage;
    block[5] = a1;
    block[6] = v13;
    dispatch_async(v14, block);
    v15 = 0;
    *a4 = cf[0];
  }
  return v15;
}

uint64_t videoReceiver_announceDataChannelResourceRemoval(CFTypeRef cf, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v6;
  uint64_t DerivedStorage;
  NSObject *v8;
  _QWORD block[7];
  os_log_type_t type;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 3)
  {
    v11 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v6 != CMBaseClassGetCFTypeID())
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(cf);
  if (a2)
    CFRetain(a2);
  v8 = *(NSObject **)(DerivedStorage + 264);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_announceDataChannelResourceRemoval_block_invoke;
  block[3] = &__block_descriptor_tmp_90;
  block[4] = DerivedStorage;
  block[5] = cf;
  block[6] = a2;
  dispatch_async(v8, block);
  return 0;
}

uint64_t videoReceiver_setPrepareDataChannelsWithDependentResourcesCallback(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v8;
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD block[7];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 2)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    return FigSignalErrorAt();
  v8 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v8 != CMBaseClassGetCFTypeID())
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(NSObject **)(DerivedStorage + 264);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_setPrepareDataChannelsWithDependentResourcesCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_91;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v10, block);
  return 0;
}

uint64_t videoReceiver_setResourceLifeCycleCallback(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v8;
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD block[7];
  os_log_type_t type;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 3)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!cf)
    return FigSignalErrorAt();
  v8 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v8 != CMBaseClassGetCFTypeID())
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = *(NSObject **)(DerivedStorage + 264);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __videoReceiver_setResourceLifeCycleCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_92;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v10, block);
  return 0;
}

uint64_t videoReceiver_copyTaggedBufferGroupAndResourcesAndSamplingEventIdentifierForTime(CMTime *a1, __int128 *a2, uint64_t a3, CFTypeRef *a4, CFTypeRef *a5, CMTime *a6, _QWORD *a7)
{
  __int128 v8;
  uint64_t v9;

  if (!a7)
    return FigSignalErrorAt();
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  return videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(a1, (uint64_t)&v8, a3, a4, a5, a6, a7);
}

uint64_t videoReceiver_provideFrameTelemetryForSamplingEvent(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  CMTimeFlags v7;
  CMTimeEpoch v8;
  CFTypeID v9;
  _OWORD *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  CFIndex i;
  const __CFArray *Count;
  double *ValueAtIndex;
  double *v22;
  uint64_t v23;
  int v24;
  double v25;
  CMTime time;
  CMTimeValue v27;
  CMTimeScale v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = *(_QWORD *)(a2 + 24);
  v28 = *(_DWORD *)(a2 + 32);
  if (!a3)
    return FigSignalErrorAt();
  if ((unint64_t)(*(_QWORD *)a3 - 3) < 0xFFFFFFFFFFFFFFFELL || cf == 0)
    return FigSignalErrorAt();
  v7 = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v9 != CMBaseClassGetCFTypeID()
    || (*(_BYTE *)(a3 + 20) & 1) == 0
    || (*(_BYTE *)(a3 + 44) & 1) == 0
    || (v7 & 1) == 0)
  {
    return FigSignalErrorAt();
  }
  v10 = (_OWORD *)(a3 + 8);
  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&time.value = *v10;
  time.epoch = *(_QWORD *)(a3 + 24);
  v13 = CMClockConvertHostTimeToSystemUnits(&time);
  v14 = *(_QWORD *)(a3 + 56);
  v15 = *(double *)(a3 + 64) / (double)v14;
  LODWORD(v16) = v14;
  if (*(_QWORD *)a3 >= 2uLL)
    v16 = *(_QWORD *)(a3 + 80);
  v17 = *(_QWORD *)(DerivedStorage + 344);
  v18 = *(double *)(a3 + 72);
  time.value = v27;
  time.timescale = v28;
  time.flags = v7;
  time.epoch = v8;
  FigImageQueueDisplayCountHistory_TraceDisplayCountUsingHostTime(v17, &time, v14, v16, v13, v15, v18);
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(a2 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = (double *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), i);
    if (ValueAtIndex)
    {
      v22 = ValueAtIndex;
      FigReadWriteLockLockForWrite();
      v23 = *(_QWORD *)(a3 + 56);
      if (v23 > 4294967294)
        v24 = -1;
      else
        v24 = *(_QWORD *)(a3 + 56);
      if (v23 < 0)
        v24 = 0;
      *((_DWORD *)v22 + 10) = v24;
      v25 = *(double *)(a3 + 64);
      v22[6] = v25 / (double)v23;
      v22[10] = v25;
      *(_OWORD *)&time.value = *v10;
      time.epoch = *(_QWORD *)(a3 + 24);
      *((_QWORD *)v22 + 8) = CMClockConvertHostTimeToSystemUnits(&time);
      time = *(CMTime *)(a3 + 32);
      *((_QWORD *)v22 + 9) = CMClockConvertHostTimeToSystemUnits(&time);
      v22[7] = *(double *)(a3 + 72);
      FigReadWriteLockUnlockForWrite();
    }
    else
    {
      result = FigSignalErrorAt();
      if ((_DWORD)result)
        return result;
    }
  }
  return 0;
}

uint64_t videoReceiver_setResourceLifeCycleHandler(CFTypeRef cf, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  CFTypeID v6;
  uint64_t DerivedStorage;
  void *v8;
  NSObject *v9;
  _QWORD block[7];
  os_log_type_t type;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x3002000000;
  v17 = __Block_byref_object_copy__1;
  v18 = __Block_byref_object_dispose__1;
  v19 = 0;
  if (dword_1EE2A2D38 >= 2)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf
    && (v6 = CFGetTypeID(cf),
        MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v6 == CMBaseClassGetCFTypeID()))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = _Block_copy(a2);
    v9 = *(NSObject **)(DerivedStorage + 264);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_setResourceLifeCycleHandler_block_invoke;
    block[3] = &unk_1E2F8AB48;
    block[5] = &v14;
    block[6] = DerivedStorage;
    block[4] = v8;
    dispatch_sync(v9, block);
    _Block_release((const void *)v15[5]);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v14, 8);
  return v5;
}

uint64_t videoReceiver_setPrepareDataChannelsWithDependentResourcesHandler(CFTypeRef cf, const void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  CFTypeID v6;
  uint64_t DerivedStorage;
  void *v8;
  NSObject *v9;
  _QWORD block[7];
  os_log_type_t type;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x3002000000;
  v17 = __Block_byref_object_copy__1;
  v18 = __Block_byref_object_dispose__1;
  v19 = 0;
  if (dword_1EE2A2D38 >= 2)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf
    && (v6 = CFGetTypeID(cf),
        MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v6 == CMBaseClassGetCFTypeID()))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = _Block_copy(a2);
    v9 = *(NSObject **)(DerivedStorage + 264);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_setPrepareDataChannelsWithDependentResourcesHandler_block_invoke;
    block[3] = &unk_1E2F8AB70;
    block[5] = &v14;
    block[6] = DerivedStorage;
    block[4] = v8;
    dispatch_sync(v9, block);
    _Block_release((const void *)v15[5]);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v14, 8);
  return v5;
}

uint64_t videoReceiver_setActiveConfigurationChangedHandler(const void *a1, const void *a2)
{
  CFTypeID v4;
  uint64_t DerivedStorage;
  void *v6;
  uint64_t v7;
  const void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce);
  if (v4 != CMBaseClassGetCFTypeID())
    return FigSignalErrorAt();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = _Block_copy(a2);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 416));
  v7 = *(_QWORD *)(DerivedStorage + 416);
  v8 = *(const void **)(DerivedStorage + 424);
  *(_QWORD *)(DerivedStorage + 424) = v6;
  MEMORY[0x19402EF04](v7);
  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  _Block_release(v8);
  return 0;
}

__n128 __videoReceiver_copyImageForTime_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __n128 result;
  uint64_t v4;
  __int128 v5;
  CMTime v6;
  CMTime time1;

  v2 = *(_QWORD *)(a1 + 32);
  time1 = *(CMTime *)(a1 + 48);
  v6 = *(CMTime *)(v2 + 124);
  if ((CMTimeCompare(&time1, &v6) & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v4 + 96) = 1;
    v5 = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 116) = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(v4 + 100) = v5;
    videoReceiver_activateReceiverConfiguration2(*(_QWORD *)(a1 + 40));
  }
  return result;
}

void videoReceiver_activateReceiverConfiguration2(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  CFIndex v4;
  char *ValueAtIndex;
  char *v6;
  const void *v7;
  CFTypeRef v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTimeEpoch v10;
  OpaqueCMTimebase *v11;
  NSObject *v12;
  NSObject *v13;
  __int128 v14;
  CMTime v15;
  CMTime v16;
  CMTime time2;
  CMTime time1;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v16, 0, sizeof(v16));
  CMTimebaseGetTime(&v16, *(CMTimebaseRef *)(DerivedStorage + 56));
  if (*(_BYTE *)(DerivedStorage + 96))
    v16 = *(CMTime *)(DerivedStorage + 100);
  v3 = *(const __CFArray **)(DerivedStorage + 48);
  v15 = v16;
  if (CFArrayGetCount(v3) >= 2)
  {
    v4 = 1;
    do
    {
      ValueAtIndex = (char *)CFArrayGetValueAtIndex(v3, v4);
      if (!ValueAtIndex)
        break;
      time1 = v15;
      time2 = *(CMTime *)(ValueAtIndex + 16);
      if (CMTimeCompare(&time1, &time2) < 1)
        break;
      CFArrayRemoveValueAtIndex(v3, v4++ - 1);
    }
    while (v4 < CFArrayGetCount(v3));
  }
  if (!CFArrayGetCount(v3)
    || (v6 = (char *)CFArrayGetValueAtIndex(v3, 0),
        time1 = v15,
        time2 = *(CMTime *)(v6 + 16),
        CMTimeCompare(&time1, &time2) < 0))
  {
    v8 = 0;
  }
  else
  {
    v7 = (const void *)*((_QWORD *)v6 + 5);
    if (v7)
      v8 = CFRetain(v7);
    else
      v8 = 0;
    CFArrayRemoveValueAtIndex(v3, 0);
    videoReceiver_replacePendingConfiguration(a1, v8);
    if (dword_1EE2A2D38 >= 2)
    {
      LODWORD(v15.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  v14 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v15.value = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v15.epoch = v10;
  if (receiverConfiguration_findEarliestCfgTimeToActivate(*(CFArrayRef *)(DerivedStorage + 48), (uint64_t)&v15))
  {
    v11 = *(OpaqueCMTimebase **)(DerivedStorage + 56);
    v12 = *(NSObject **)(DerivedStorage + 64);
    time1 = v15;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v11, v12, &time1, 1u);
    if (dword_1EE2A2D38 >= 2)
    {
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  *(CMTime *)(DerivedStorage + 124) = v15;
  *(_BYTE *)(DerivedStorage + 96) = 0;
  *(_OWORD *)(DerivedStorage + 100) = v14;
  *(_QWORD *)(DerivedStorage + 116) = v10;
  if (v8)
    CFRelease(v8);
}

uint64_t videoReceiver_copyOutputQueuesIfReady(const void *a1, _BYTE *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  CFTypeID v14;
  uint64_t DerivedStorage;
  NSObject *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  uint64_t v28;
  _QWORD v30[14];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;

  v55 = 0;
  v56 = &v55;
  v57 = 0x2000000000;
  v58 = 0;
  v51 = 0;
  v52 = &v51;
  v53 = 0x2000000000;
  v54 = 0;
  v47 = 0;
  v48 = &v47;
  v49 = 0x2000000000;
  v50 = 0;
  v43 = 0;
  v44 = &v43;
  v45 = 0x2000000000;
  v46 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2000000000;
  v42 = 0;
  v35 = 0;
  v36 = &v35;
  v37 = 0x2000000000;
  v38 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 0;
  if (a1
    && (v14 = CFGetTypeID(a1),
        MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v14 == CMBaseClassGetCFTypeID()))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v16 = *(NSObject **)(DerivedStorage + 152);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 0x40000000;
    v30[2] = __videoReceiver_copyOutputQueuesIfReady_block_invoke;
    v30[3] = &unk_1E2F8A728;
    v30[4] = &v55;
    v30[5] = &v51;
    v30[6] = &v47;
    v30[7] = &v43;
    v30[12] = a1;
    v30[13] = a7;
    v30[8] = &v39;
    v30[9] = &v35;
    v30[10] = &v31;
    v30[11] = DerivedStorage;
    dispatch_sync(v16, v30);
  }
  else
  {
    *((_DWORD *)v56 + 6) = FigSignalErrorAt();
  }
  v17 = v32;
  if (*((_BYTE *)v32 + 24))
  {
    if (a3)
    {
      v18 = v52;
      *a3 = v52[3];
      v18[3] = 0;
    }
    if (a4)
    {
      v19 = v48;
      *a4 = v48[3];
      v19[3] = 0;
    }
    if (a5)
    {
      v20 = v44;
      *a5 = v44[3];
      v20[3] = 0;
    }
    if (a6)
    {
      v21 = v40;
      *a6 = v40[3];
      v21[3] = 0;
    }
    if (a7)
    {
      v22 = v36;
      *a7 = v36[3];
      v22[3] = 0;
    }
  }
  if (a2)
    *a2 = *((_BYTE *)v17 + 24);
  v23 = (const void *)v52[3];
  if (v23)
    CFRelease(v23);
  v24 = (const void *)v48[3];
  if (v24)
    CFRelease(v24);
  v25 = (const void *)v44[3];
  if (v25)
    CFRelease(v25);
  v26 = (const void *)v40[3];
  if (v26)
    CFRelease(v26);
  v27 = (const void *)v36[3];
  if (v27)
    CFRelease(v27);
  v28 = *((unsigned int *)v56 + 6);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
  _Block_object_dispose(&v47, 8);
  _Block_object_dispose(&v51, 8);
  _Block_object_dispose(&v55, 8);
  return v28;
}

uint64_t __videoReceiver_copyImageForTime_block_invoke_2(uint64_t a1)
{
  const void *v2;
  const void *v3;
  int v4;
  int v5;
  CVPixelBufferRef *v6;
  CMTime *v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;

  v2 = *(const void **)(a1 + 56);
  v3 = *(const void **)(a1 + 64);
  v4 = *(unsigned __int8 *)(a1 + 104);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 72) + 40);
  v6 = (CVPixelBufferRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  v7 = (CMTime *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  v9 = *(_OWORD *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 96);
  result = videoReceiver_copyPixelBufferFromImageQueueReceiverSamplingAtTime(v2, v3, (uint64_t)&v9, v4, v5, v6, v7, 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t videoReceiver_copyPixelBufferFromImageQueueReceiverSamplingAtTime(const void *a1, const void *a2, uint64_t a3, int a4, int a5, CVPixelBufferRef *a6, CMTime *a7, uint64_t *a8)
{
  uint64_t DerivedStorage;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  uint64_t SampleForTime;
  const void *v19;
  uint64_t Instance;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t IOSurface;
  __IOSurface *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFDictionary *v28;
  const __CFDictionary *v29;
  const __CFDictionary *Value;
  const __CFDictionary *Mutable;
  _BOOL4 v32;
  const __CFDictionary *v33;
  uint64_t v34;
  CVPixelBufferRef pixelBufferOut;
  CMTime time;

  pixelBufferOut = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  if (a2)
  {
    v16 = *(_DWORD *)(a3 + 12);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(a3 + 16);
      time.value = *(_QWORD *)a3;
      time.timescale = *(_DWORD *)(a3 + 8);
      time.flags = v16;
      time.epoch = v17;
      CMTimeGetSeconds(&time);
      SampleForTime = CAXPCImageQueueReceiverCreateSampleForTime();
      if (SampleForTime)
      {
        v19 = (const void *)SampleForTime;
        if (FigCAXPCImageQueueSampleGetTypeID_sRegisterFigCAXPCImageQueueSampleTypeOnce != -1)
          dispatch_once(&FigCAXPCImageQueueSampleGetTypeID_sRegisterFigCAXPCImageQueueSampleTypeOnce, &__block_literal_global_53);
        Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          *(_QWORD *)(Instance + 16) = CFRetain(v19);
          *(_QWORD *)(Instance + 32) = FigReadWriteLockCreate();
          *(_BYTE *)(Instance + 24) = a4;
          *(_BYTE *)(Instance + 25) = a4 == 0;
          *(_BYTE *)(Instance + 26) = 0;
        }
        else
        {
          v21 = FigSignalErrorAt();
          if ((_DWORD)v21)
          {
LABEL_9:
            CFRelease(v19);
            if (!(_DWORD)v21)
              goto LABEL_10;
            goto LABEL_37;
          }
        }
        v21 = 0;
        goto LABEL_9;
      }
    }
  }
  v21 = FigSignalErrorAt();
  Instance = 0;
  if (!(_DWORD)v21)
  {
LABEL_10:
    CAXPCImageQueueSampleGetTimestamp();
    v23 = v22;
    IOSurface = CAXPCImageQueueSampleGetIOSurface();
    if (!IOSurface)
    {
LABEL_41:
      v21 = FigSignalErrorAt();
      Mutable = 0;
      goto LABEL_43;
    }
    v25 = (__IOSurface *)IOSurface;
    if (!a5)
    {
      v32 = 0;
      Mutable = 0;
      v29 = 0;
      goto LABEL_24;
    }
    v26 = 32;
    if (a4)
      v27 = 32;
    else
      v27 = 24;
    if (a4)
      v26 = 24;
    v28 = *(const __CFDictionary **)(DerivedStorage + v26);
    v29 = *(const __CFDictionary **)(DerivedStorage + v27);
    Value = (const __CFDictionary *)CFDictionaryGetValue(v29, a2);
    Mutable = Value;
    if (Value)
    {
      CFRetain(Value);
      pixelBufferOut = (CVPixelBufferRef)vr_copyCachedPixelBufferIfSameIQSample(Mutable);
      v32 = pixelBufferOut != 0;
      if (pixelBufferOut)
        goto LABEL_25;
    }
    else
    {
      v32 = 0;
    }
    v33 = (const __CFDictionary *)CFDictionaryGetValue(v28, a2);
    if (!v33 || (pixelBufferOut = (CVPixelBufferRef)vr_copyCachedPixelBufferIfSameIQSample(v33)) == 0)
    {
LABEL_24:
      v34 = CVPixelBufferCreateWithIOSurface((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v25, 0, &pixelBufferOut);
      if ((_DWORD)v34)
      {
        v21 = v34;
        goto LABEL_43;
      }
    }
LABEL_25:
    if (!a5 || v32)
    {
LABEL_30:
      if (a6)
      {
        *a6 = pixelBufferOut;
        pixelBufferOut = 0;
      }
      if (a7)
      {
        CMTimeMakeWithSeconds(&time, v23 + 0.00000555555556, 90000);
        *a7 = time;
      }
      v21 = 0;
      if (a8)
      {
        *a8 = Instance;
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    if (Mutable
      || (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
    {
      CFDictionarySetValue(Mutable, CFSTR("CachedPixelBuffer"), pixelBufferOut);
      CFDictionarySetValue(Mutable, CFSTR("CachedIQSample"), (const void *)Instance);
      CFDictionarySetValue(v29, a2, Mutable);
      goto LABEL_30;
    }
    goto LABEL_41;
  }
LABEL_37:
  Mutable = 0;
  if (Instance)
LABEL_43:
    CFRelease((CFTypeRef)Instance);
LABEL_44:
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (Mutable)
    CFRelease(Mutable);
  return v21;
}

void videoReceiver_replacePendingConfiguration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  videoReceiver_RemoveAndReleaseConfiguration(a1, *(_QWORD *)(DerivedStorage + 80));
  *(_QWORD *)(DerivedStorage + 80) = a2;
  if (a2)
    CFRetain(a2);
}

uint64_t receiverConfiguration_findEarliestCfgTimeToActivate(CFArrayRef theArray, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;

  if (!a2)
    return 0;
  v4 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v4 + 16);
  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 0;
  result = (uint64_t)CFArrayGetValueAtIndex(theArray, 0);
  if (result)
  {
    v6 = *(_OWORD *)(result + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(result + 32);
    *(_OWORD *)a2 = v6;
    return 1;
  }
  return result;
}

void videoReceiver_RemoveAndReleaseConfiguration(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[17];

  block[16] = *MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    if (videoReceiver_deferCFObjectRelease_deferredReleaseQueueOnce != -1)
      dispatch_once(&videoReceiver_deferCFObjectRelease_deferredReleaseQueueOnce, &__block_literal_global_44);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __videoReceiver_deferCFObjectRelease_block_invoke_2;
    block[3] = &__block_descriptor_tmp_46;
    block[4] = a2;
    dispatch_async((dispatch_queue_t)videoReceiver_deferCFObjectRelease_deferredReleaseQueue, block);
  }
}

dispatch_queue_t __videoReceiver_deferCFObjectRelease_block_invoke()
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coremedia.videoreceiver.deferredrelease", 0);
  videoReceiver_deferCFObjectRelease_deferredReleaseQueue = (uint64_t)result;
  return result;
}

void __videoReceiver_deferCFObjectRelease_block_invoke_2(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void __videoReceiver_copyOutputQueuesIfReady_block_invoke(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  CFMutableArrayRef *v4;
  __CFArray **v5;
  __CFArray **v6;
  __CFArray **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t DerivedStorage;
  uint64_t v26;
  _DWORD *v27;
  const __CFString *v28;
  CFRange v29;
  const __CFString *v30;
  CFRange v31;
  const __CFString *v32;
  CFRange v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  const void *v41;
  CFTypeRef v42;
  CFTypeRef v43;
  CFTypeRef v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, CMTag *);
  uint64_t v47;
  const void *v48;
  const __CFArray *v49;
  CFIndex ChannelCount;
  uint64_t *v51;
  CFIndex v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  CMTagValue v56;
  uint64_t v57;
  CMTagValue v58;
  const OpaqueCMTagCollection *ChannelDescriptionTagsAtIndex;
  const OpaqueCMTagCollection *v60;
  const __CFAllocator *v61;
  CFMutableArrayRef Mutable;
  const __CFAllocator *v63;
  CFMutableArrayRef v64;
  CFIndex v65;
  int v66;
  const OpaqueCMTagCollection *v67;
  CFIndex v68;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const OpaqueCMTagCollection *v71;
  const void *v72;
  uint64_t v73;
  const OpaqueCMTagCollection *v74;
  int v75;
  int v76;
  __CFDictionary *v77;
  __CFDictionary *v78;
  CFMutableArrayRef v79;
  const void *v80;
  const void *v81;
  const void *v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  void *v86;
  void *key;
  CMTagValue v88;
  uint64_t v89;
  CFMutableArrayRef v90;
  CFMutableArrayRef theArray;
  CFTypeRef cf;
  CMTagValue v93;
  uint64_t v94;
  const OpaqueCMTagCollection *v95;
  CMTagValue v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  CFIndex v100;
  const __CFAllocator *allocator;
  __int16 v102;
  CMTime v103;
  CFTypeRef v104;
  CFTypeRef v105;
  CFTypeRef v106;
  CFStringRef v107;
  CFStringRef theString;
  CMTagCollectionRef tagCollection;
  void *value;
  CFTypeRef v111;
  CMItemCount numberOfTagsCopied;
  os_log_type_t v113[8];
  os_log_type_t type[8];
  _BYTE buffer[22];
  __int16 v116;
  const char *v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  void *v121;
  CMTag __dst;
  CFTypeRef v123;
  CMTime v124;
  uint64_t v125;
  CMTag v126;
  CMTag v127;
  CMTag v128;
  CMTag v129;
  CMTag v130;

  v1 = a1;
  v125 = *MEMORY[0x1E0C80C00];
  v102 = 0;
  v2 = a1[11];
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
  {
    v4 = (CFMutableArrayRef *)(*(_QWORD *)(a1[5] + 8) + 24);
    v5 = (__CFArray **)(*(_QWORD *)(a1[6] + 8) + 24);
    v6 = (__CFArray **)(*(_QWORD *)(a1[7] + 8) + 24);
    v7 = (__CFArray **)(*(_QWORD *)(a1[8] + 8) + 24);
    v8 = a1[12];
    if (v1[13])
      v9 = (uint64_t *)(*(_QWORD *)(v1[9] + 8) + 24);
    else
      v9 = 0;
    *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = videoReceiver_copyOutputQueuesResourceAndStatusFromConfiguration(v8, v3, v4, v5, v6, v7, v9, (char *)&v102 + 1, (char *)&v102);
    if (*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
      return;
    v10 = v1[11];
    if (!*(_QWORD *)(v10 + 88) || v102)
    {
      if (dword_1EE2A2D38 >= 2)
      {
        LODWORD(v103.value) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v18 = v103.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
          v19 = v18;
        else
          v19 = v18 & 0xFFFFFFFE;
        if (v19)
        {
          v20 = v1[12];
          if (v20)
            v21 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          else
            v21 = "";
          v22 = *(_QWORD *)(v1[11] + 80);
          *(_DWORD *)buffer = 136315906;
          *(_QWORD *)&buffer[4] = "videoReceiver_copyOutputQueuesIfReady_block_invoke";
          *(_WORD *)&buffer[12] = 2048;
          *(_QWORD *)&buffer[14] = v20;
          v116 = 2082;
          v117 = v21;
          v118 = 2114;
          v119 = v22;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v10 = v1[11];
      }
      v23 = v1[12];
      v24 = *(void **)(v10 + 80);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v107 = 0;
      theString = 0;
      v105 = 0;
      v106 = 0;
      v104 = 0;
      memset(&v103, 0, sizeof(v103));
      v26 = *(_QWORD *)(DerivedStorage + 88);
      if (v26)
        FigDataChannelConfigurationCopyLoggingIdentifier(v26, &theString);
      if (v24)
        FigDataChannelConfigurationCopyLoggingIdentifier((uint64_t)v24, &v107);
      v27 = (_DWORD *)MEMORY[0x1E0CA1FC0];
      if (*MEMORY[0x1E0CA1FC0] == 1)
      {
        v28 = theString;
        *(_QWORD *)buffer = 0;
        if (theString)
        {
          if (CFStringGetLength(theString) <= 8)
            v29.length = CFStringGetLength(v28);
          else
            v29.length = 8;
          v29.location = 0;
          CFStringGetBytes(v28, v29, 0, 0x3Fu, 0, buffer, 8, 0);
        }
        strncpy((char *)&__dst, buffer, 8uLL);
        v30 = v107;
        *(_QWORD *)buffer = 0;
        if (v107)
        {
          if (CFStringGetLength(v107) <= 8)
            v31.length = CFStringGetLength(v30);
          else
            v31.length = 8;
          v31.location = 0;
          CFStringGetBytes(v30, v31, 0, 0x3Fu, 0, buffer, 8, 0);
        }
        strncpy((char *)&__dst, buffer, 8uLL);
        kdebug_trace();
        if (*v27 == 1)
        {
          v32 = v107;
          *(_QWORD *)buffer = 0;
          if (v107)
          {
            if (CFStringGetLength(v107) <= 8)
              v33.length = CFStringGetLength(v32);
            else
              v33.length = 8;
            v33.location = 0;
            CFStringGetBytes(v32, v33, 0, 0x3Fu, 0, buffer, 8, 0);
          }
          strncpy((char *)&__dst, buffer, 8uLL);
          kdebug_trace();
        }
      }
      if (dword_1EE2A2D38)
      {
        *(_DWORD *)type = 0;
        v113[0] = OS_LOG_TYPE_DEFAULT;
        v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v35 = *(_DWORD *)type;
        if (os_log_type_enabled(v34, v113[0]))
          v36 = v35;
        else
          v36 = v35 & 0xFFFFFFFE;
        if (v36)
        {
          if (v23)
            v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          else
            v37 = "";
          v38 = *(_QWORD *)(DerivedStorage + 88);
          *(_DWORD *)buffer = 136316162;
          *(_QWORD *)&buffer[4] = "videoReceiver_replaceActiveConfiguration";
          *(_WORD *)&buffer[12] = 2048;
          *(_QWORD *)&buffer[14] = v23;
          v116 = 2082;
          v117 = v37;
          v118 = 2114;
          v119 = v38;
          v120 = 2114;
          v121 = v24;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      videoReceiver_RemoveAndReleaseConfiguration(v23, *(_QWORD *)(DerivedStorage + 88));
      *(_QWORD *)(DerivedStorage + 88) = v24;
      if (v24)
        CFRetain(v24);
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 24));
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 32));
      if (!FigDataChannelConfigurationGetChannelCount((uint64_t)v24)
        && !FigDataChannelConfigurationGetResourceCount((uint64_t)v24))
      {
        v39 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(DerivedStorage + 360) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(DerivedStorage + 376) = *(_QWORD *)(v39 + 16);
        v40 = *(const void **)(DerivedStorage + 384);
        if (v40)
        {
          CFRelease(v40);
          *(_QWORD *)(DerivedStorage + 384) = 0;
        }
        v41 = *(const void **)(DerivedStorage + 392);
        if (v41)
        {
          CFRelease(v41);
          *(_QWORD *)(DerivedStorage + 392) = 0;
        }
      }
      if (!fvr_copyDescriptionSettingsAndResourcesFromConfiguration((uint64_t)v24, (__CFArray **)&v106, (CFMutableDictionaryRef *)&v105, 0)&& !FigDataChannelConfigurationCopyPlaybackItemUniqueInstanceIdentifier((CFStringRef *)v24, (CFStringRef *)&v104))
      {
        v42 = v104;
        v43 = v105;
        v44 = v106;
        CMTimebaseGetTime(&v103, *(CMTimebaseRef *)(DerivedStorage + 56));
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 416));
        v45 = *(_QWORD *)(DerivedStorage + 424);
        if (v45)
        {
          v46 = *(void (**)(uint64_t, uint64_t, CMTag *))(v45 + 16);
          *(_QWORD *)&__dst.category = v42;
          __dst.value = (CMTagValue)v44;
          v123 = v43;
          v124 = v103;
          v46(v45, v23, &__dst);
        }
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 416));
        value = 0;
        v111 = 0;
        tagCollection = 0;
        v47 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19402EEEC](*(_QWORD *)(v47 + 336));
        v48 = *(const void **)(v47 + 312);
        cf = (CFTypeRef)v23;
        if (v48)
          v49 = (const __CFArray *)CFRetain(v48);
        else
          v49 = 0;
        v83 = v47;
        v84 = v1;
        MEMORY[0x19402EF04](*(_QWORD *)(v47 + 336));
        v99 = (uint64_t)v24;
        ChannelCount = FigDataChannelConfigurationGetChannelCount((uint64_t)v24);
        v51 = (uint64_t *)MEMORY[0x1E0CA2838];
        v98 = ChannelCount;
        if (ChannelCount < 1)
        {
          v54 = 0;
          v53 = 0;
        }
        else
        {
          v52 = 0;
          LOBYTE(v53) = 0;
          LOBYTE(v54) = 0;
          v55 = *MEMORY[0x1E0CA2838];
          v56 = *(_QWORD *)(MEMORY[0x1E0CA2838] + 8);
          v57 = *MEMORY[0x1E0CA2848];
          v58 = *(_QWORD *)(MEMORY[0x1E0CA2848] + 8);
          do
          {
            ChannelDescriptionTagsAtIndex = (const OpaqueCMTagCollection *)FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(v99, v52);
            v60 = ChannelDescriptionTagsAtIndex;
            if (v54)
            {
              v54 = 1;
            }
            else
            {
              *(_QWORD *)&v126.category = v55;
              v126.value = v56;
              v54 = CMTagCollectionContainsTag(ChannelDescriptionTagsAtIndex, v126) != 0;
            }
            if (v53)
            {
              v53 = 1;
            }
            else
            {
              *(_QWORD *)&v127.category = v57;
              v127.value = v58;
              v53 = CMTagCollectionContainsTag(v60, v127) != 0;
            }
            ++v52;
          }
          while (v98 != v52);
        }
        v61 = CFGetAllocator(cf);
        Mutable = CFArrayCreateMutable(v61, 0, MEMORY[0x1E0C9B378]);
        if (Mutable && (v63 = CFGetAllocator(cf), (v64 = CFArrayCreateMutable(v63, 0, MEMORY[0x1E0C9B378])) != 0))
        {
          v90 = v64;
          theArray = Mutable;
          if (v98 < 1)
          {
LABEL_154:
            v80 = *(const void **)(v83 + 440);
            Mutable = theArray;
            *(_QWORD *)(v83 + 440) = theArray;
            CFRetain(theArray);
            if (v80)
              CFRelease(v80);
            v81 = *(const void **)(v83 + 448);
            *(_QWORD *)(v83 + 448) = v90;
            v79 = v90;
            CFRetain(v90);
            v1 = v84;
            if (v81)
              CFRelease(v81);
          }
          else
          {
            v65 = 0;
            v66 = v54 && v53;
            v96 = *(_QWORD *)(MEMORY[0x1E0CA2830] + 8);
            v97 = *MEMORY[0x1E0CA2830];
            v93 = v51[1];
            v94 = *v51;
            v88 = *(_QWORD *)(MEMORY[0x1E0CA2848] + 8);
            v89 = *MEMORY[0x1E0CA2848];
            allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            key = (void *)*MEMORY[0x1E0CA8D68];
            v86 = (void *)*MEMORY[0x1E0CA8EE8];
            v85 = (void *)*MEMORY[0x1E0CA8E98];
            while (1)
            {
              v67 = (const OpaqueCMTagCollection *)FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(v99, v65);
              if (vr_createModifiedDataChannelTagCollectionWithDefaultTags(v67, &tagCollection))
                break;
              v95 = v67;
              v100 = v65;
              v68 = 0;
              if (v49)
              {
LABEL_99:
                Count = CFArrayGetCount(v49);
                goto LABEL_101;
              }
              while (1)
              {
                Count = 0;
LABEL_101:
                if (v68 >= Count)
                  break;
                ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v49, v68);
                v71 = (const OpaqueCMTagCollection *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ChannelDescription"));
                v72 = CFDictionaryGetValue(ValueAtIndex, CFSTR("ChannelSpecificSettings"));
                v73 = FigCFDictionaryGetValue();
                if (v71 && v73)
                {
                  if (CMTagCollectionContainsTagsOfCollection(tagCollection, v71))
                    goto LABEL_125;
                  if (v66)
                  {
                    v74 = tagCollection;
                    __dst = (CMTag)*MEMORY[0x1E0CA27F8];
                    *(CMTag *)buffer = __dst;
                    *(_QWORD *)v113 = 0;
                    *(_QWORD *)type = 0;
                    numberOfTagsCopied = 0;
                    CMTagCollectionGetTagsWithCategory(tagCollection, kCMTagCategory_StereoView, &__dst, 1, &numberOfTagsCopied);
                    if (numberOfTagsCopied < 1
                      || (CMTagCollectionGetTagsWithCategory(v71, kCMTagCategory_StereoView, (CMTag *)buffer, 1, &numberOfTagsCopied), numberOfTagsCopied < 1)|| !CMTagEqualToTag(__dst, *(CMTag *)buffer)&& ((v128.value = v96, *(_QWORD *)&v128.category = v97, !CMTagEqualToTag(*(CMTag *)buffer, v128))|| (v129.value = v93, *(_QWORD *)&v129.category = v94, !CMTagEqualToTag(__dst, v129))&& (v130.value = v88, *(_QWORD *)&v130.category = v89, !CMTagEqualToTag(__dst, v130)))|| CMTagCollectionCreateMutableCopy(v74, allocator, (CMMutableTagCollectionRef *)type)|| CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)type, kCMTagCategory_StereoView)|| CMTagCollectionCreateMutableCopy(v71, allocator, (CMMutableTagCollectionRef *)v113)|| CMTagCollectionRemoveAllTagsOfCategory(*(CMMutableTagCollectionRef *)v113, kCMTagCategory_StereoView))
                    {
                      v75 = 0;
                    }
                    else
                    {
                      v75 = CMTagCollectionContainsTagsOfCollection(*(CMTagCollectionRef *)type, *(CMTagCollectionRef *)v113);
                    }
                    if (*(_QWORD *)type)
                      CFRelease(*(CFTypeRef *)type);
                    if (*(_QWORD *)v113)
                      CFRelease(*(CFTypeRef *)v113);
                    if (v75)
                    {
LABEL_125:
                      CFGetAllocator(cf);
                      if (VTPixelBufferConformerCreateWithAttributes())
                        goto LABEL_153;
                      if (!v72)
                        goto LABEL_145;
                      v76 = CFGetAllocator(cf);
                      if (FigDataChannelConfigurationCopyFormatDescriptionsAtIndex(v99, v76, v100, (uint64_t *)&v111))goto LABEL_153;
                      v113[0] = OS_LOG_TYPE_DEFAULT;
                      FigCFDictionaryGetValue();
                      *(_QWORD *)&__dst.category = FigCFDictionaryGetValue();
                      *(_QWORD *)buffer = FigCFDictionaryGetValue();
                      *(_QWORD *)type = FigCFDictionaryGetValue();
                      if (FigCFDictionaryGetBooleanIfPresent() && v113[0] == OS_LOG_TYPE_DEFAULT)
                        CMFormatDescriptionGetWidestColorPropertiesFromFormatDescriptions();
                      v77 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      if (v77)
                      {
                        v78 = v77;
                        if (*(_QWORD *)&__dst.category)
                          CFDictionarySetValue(v77, key, *(const void **)&__dst.category);
                        if (*(_QWORD *)buffer)
                          CFDictionarySetValue(v78, v86, *(const void **)buffer);
                        if (*(_QWORD *)type)
                          CFDictionarySetValue(v78, v85, *(const void **)type);
                        if (CFDictionaryGetCount(v78) <= 0)
                        {
                          CFRelease(v78);
                          goto LABEL_140;
                        }
                      }
                      else
                      {
                        if (FigSignalErrorAt())
                          goto LABEL_153;
LABEL_140:
                        v78 = 0;
                      }
                      if (v111)
                      {
                        CFRelease(v111);
                        v111 = 0;
                      }
                      if (v78)
                      {
                        VTPixelBufferConformerSetColorProperties();
                        CFArrayAppendValue(theArray, v95);
                        CFArrayAppendValue(v90, value);
                        CFRelease(v78);
                      }
                      else
                      {
LABEL_145:
                        CFArrayAppendValue(theArray, v95);
                        CFArrayAppendValue(v90, value);
                      }
                      if (value)
                      {
                        CFRelease(value);
                        value = 0;
                      }
                      break;
                    }
                  }
                }
                ++v68;
                if (v49)
                  goto LABEL_99;
              }
              if (tagCollection)
              {
                CFRelease(tagCollection);
                tagCollection = 0;
              }
              v65 = v100 + 1;
              if (v100 + 1 == v98)
                goto LABEL_154;
            }
LABEL_153:
            v1 = v84;
            v79 = v90;
            Mutable = theArray;
          }
        }
        else
        {
          FigSignalErrorAt();
          v79 = 0;
          v1 = v84;
        }
        if (tagCollection)
          CFRelease(tagCollection);
        if (value)
          CFRelease(value);
        if (Mutable)
          CFRelease(Mutable);
        if (v79)
          CFRelease(v79);
        if (v49)
          CFRelease(v49);
        if (v111)
          CFRelease(v111);
      }
      if (v104)
        CFRelease(v104);
      if (v106)
        CFRelease(v106);
      if (v105)
        CFRelease(v105);
      if (theString)
        CFRelease(theString);
      if (v107)
        CFRelease(v107);
      v82 = *(const void **)(v1[11] + 80);
      if (v82)
      {
        CFRelease(v82);
        *(_QWORD *)(v1[11] + 80) = 0;
      }
      goto LABEL_182;
    }
  }
  else if (!*(_QWORD *)(v2 + 88))
  {
    return;
  }
  v11 = *(const void **)(*(_QWORD *)(v1[5] + 8) + 24);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(*(_QWORD *)(v1[5] + 8) + 24) = 0;
  }
  v12 = *(const void **)(*(_QWORD *)(v1[6] + 8) + 24);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(*(_QWORD *)(v1[6] + 8) + 24) = 0;
  }
  v13 = *(const void **)(*(_QWORD *)(v1[7] + 8) + 24);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(*(_QWORD *)(v1[7] + 8) + 24) = 0;
  }
  v14 = *(_QWORD *)(v1[8] + 8);
  v15 = *(const void **)(v14 + 24);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(*(_QWORD *)(v1[8] + 8) + 24) = 0;
    v14 = *(_QWORD *)(v1[8] + 8);
  }
  if (v1[13])
    v16 = (uint64_t *)(*(_QWORD *)(v1[9] + 8) + 24);
  else
    v16 = 0;
  *(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24) = videoReceiver_copyOutputQueuesResourceAndStatusFromConfiguration(v1[12], *(_QWORD *)(v1[11] + 88), (CFMutableArrayRef *)(*(_QWORD *)(v1[5] + 8) + 24), (__CFArray **)(*(_QWORD *)(v1[6] + 8) + 24), (__CFArray **)(*(_QWORD *)(v1[7] + 8) + 24), (__CFArray **)(v14 + 24), v16, (char *)&v102 + 1, (char *)&v102);
  if (!*(_DWORD *)(*(_QWORD *)(v1[4] + 8) + 24))
  {
LABEL_182:
    if (HIBYTE(v102) | v102)
      *(_BYTE *)(*(_QWORD *)(v1[10] + 8) + 24) = 1;
  }
}

uint64_t videoReceiver_copyOutputQueuesResourceAndStatusFromConfiguration(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3, __CFArray **a4, __CFArray **a5, __CFArray **a6, uint64_t *a7, char *a8, char *a9)
{
  uint64_t ChannelCount;
  const __CFAllocator *v13;
  CFMutableArrayRef Mutable;
  __CFArray *v15;
  __CFArray *v16;
  CFMutableArrayRef v17;
  __CFArray *v18;
  CFIndex v19;
  char v20;
  int OutputQueueTypeAtIndex;
  const void *CAImageQueueReceiverAtIndex;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *FigDataQueueAtIndex;
  const void *v27;
  const void *ChannelDescriptionTagsAtIndex;
  const void *v29;
  __CFArray *v30;
  char v31;
  CFIndex ResourceCount;
  CFIndex v33;
  CFIndex v34;
  const void *FigDataChannelResourceAtIndex;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  __CFArray *theArray;

  CMBaseObjectGetDerivedStorage();
  ChannelCount = FigDataChannelConfigurationGetChannelCount(a2);
  if (!ChannelCount)
  {
    v30 = 0;
    v16 = 0;
    v15 = 0;
    Mutable = 0;
    v20 = 0;
    v31 = 1;
    goto LABEL_30;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v20 = 0;
    v15 = 0;
LABEL_65:
    v16 = 0;
    goto LABEL_66;
  }
  v15 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    v20 = 0;
    goto LABEL_65;
  }
  v16 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
  if (!v16 || (v17 = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378])) == 0)
  {
    v20 = 0;
LABEL_66:
    v30 = 0;
    ChannelCount = 0;
    goto LABEL_57;
  }
  v39 = a8;
  v40 = a7;
  theArray = v17;
  v18 = Mutable;
  if (ChannelCount >= 1)
  {
    v19 = 0;
    v20 = 0;
    while (1)
    {
      OutputQueueTypeAtIndex = FigDataChannelConfigurationGetOutputQueueTypeAtIndex(a2, v19);
      if (OutputQueueTypeAtIndex == 2)
      {
        FigDataQueueAtIndex = FigDataChannelConfigurationGetFigDataQueueAtIndex(a2, v19);
        if (!FigDataQueueAtIndex
          || (v27 = FigDataQueueAtIndex,
              (ChannelDescriptionTagsAtIndex = FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(a2, v19)) == 0))
        {
LABEL_55:
          ChannelCount = 0;
          goto LABEL_56;
        }
        v29 = ChannelDescriptionTagsAtIndex;
        CFArrayAppendValue(v16, v27);
        CFArrayAppendValue(theArray, v29);
        v20 = 1;
      }
      else if (OutputQueueTypeAtIndex == 1)
      {
        CAImageQueueReceiverAtIndex = FigDataChannelConfigurationGetCAImageQueueReceiverAtIndex(a2, v19);
        if (!CAImageQueueReceiverAtIndex)
        {
          ChannelCount = 0;
          goto LABEL_56;
        }
        v23 = CAImageQueueReceiverAtIndex;
        v24 = FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(a2, v19);
        if (!v24)
          goto LABEL_55;
        v25 = v24;
        if (CAXPCImageQueueReceiverGetImageCount())
          v20 = 1;
        CFArrayAppendValue(v18, v23);
        CFArrayAppendValue(v15, v25);
      }
      if (ChannelCount == ++v19)
        goto LABEL_22;
    }
  }
  v20 = 0;
LABEL_22:
  ResourceCount = FigDataChannelConfigurationGetResourceCount(a2);
  v31 = 0;
  ChannelCount = 0;
  if (!v40 || (v33 = ResourceCount, ResourceCount < 1))
  {
LABEL_29:
    Mutable = v18;
    a8 = v39;
    a7 = v40;
    v30 = theArray;
    goto LABEL_30;
  }
  ChannelCount = (uint64_t)CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
  if (ChannelCount)
  {
    v34 = 0;
    while (1)
    {
      FigDataChannelResourceAtIndex = FigDataChannelConfigurationGetFigDataChannelResourceAtIndex(a2, v34);
      if (!FigDataChannelResourceAtIndex)
        break;
      CFArrayAppendValue((CFMutableArrayRef)ChannelCount, FigDataChannelResourceAtIndex);
      if (v33 == ++v34)
      {
        v31 = 0;
        goto LABEL_29;
      }
    }
  }
LABEL_56:
  Mutable = v18;
  a8 = v39;
  a7 = v40;
  v30 = theArray;
LABEL_57:
  v38 = FigSignalErrorAt();
  if ((_DWORD)v38)
  {
    v36 = v38;
    if (!Mutable)
      goto LABEL_46;
LABEL_45:
    CFRelease(Mutable);
    goto LABEL_46;
  }
  v31 = 0;
LABEL_30:
  if (a3)
  {
    *a3 = Mutable;
    Mutable = 0;
  }
  if (a4)
  {
    *a4 = v15;
    v15 = 0;
  }
  if (a5)
  {
    *a5 = v16;
    v16 = 0;
  }
  if (a6)
  {
    *a6 = v30;
    v30 = 0;
  }
  if (a7)
  {
    *a7 = ChannelCount;
    ChannelCount = 0;
  }
  if (a8)
    *a8 = v31;
  v36 = 0;
  if (a9)
    *a9 = v20;
  if (Mutable)
    goto LABEL_45;
LABEL_46:
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (v30)
    CFRelease(v30);
  if (ChannelCount)
    CFRelease((CFTypeRef)ChannelCount);
  return v36;
}

uint64_t fvr_copyDescriptionSettingsAndResourcesFromConfiguration(uint64_t a1, __CFArray **a2, CFMutableDictionaryRef *a3, __CFArray **a4)
{
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFMutableDictionaryRef v10;
  CFMutableArrayRef v11;
  __CFArray *v12;
  CFIndex ChannelCount;
  CFIndex v14;
  CFIndex v15;
  const void *ChannelDescriptionTagsAtIndex;
  uint64_t TagsWithCategory;
  CFIndex ResourceCount;
  CFIndex v19;
  CFIndex v20;
  const void *FigDataChannelResourceAtIndex;
  __CFArray **v23;

  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  v10 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v10 || (v11 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378])) == 0)
  {
    TagsWithCategory = FigSignalErrorAt();
    v12 = 0;
    goto LABEL_21;
  }
  v12 = v11;
  v23 = a4;
  ChannelCount = FigDataChannelConfigurationGetChannelCount(a1);
  if (ChannelCount >= 1)
  {
    v14 = ChannelCount;
    v15 = 0;
    do
    {
      ChannelDescriptionTagsAtIndex = FigDataChannelConfigurationGetChannelDescriptionTagsAtIndex(a1, v15);
      if (!ChannelDescriptionTagsAtIndex)
        goto LABEL_27;
      CFArrayAppendValue(v9, ChannelDescriptionTagsAtIndex);
      if (FigDataChannelConfigurationGetChannelSettingsAtIndex(a1, v15))
      {
        TagsWithCategory = FigTagCollectionGetTagsWithCategory();
        FigSignalErrorAt();
        goto LABEL_20;
      }
    }
    while (v14 != ++v15);
  }
  ResourceCount = FigDataChannelConfigurationGetResourceCount(a1);
  if (ResourceCount >= 1)
  {
    v19 = ResourceCount;
    v20 = 0;
    while (1)
    {
      FigDataChannelResourceAtIndex = FigDataChannelConfigurationGetFigDataChannelResourceAtIndex(a1, v20);
      if (!FigDataChannelResourceAtIndex)
        break;
      CFArrayAppendValue(v12, FigDataChannelResourceAtIndex);
      if (v19 == ++v20)
        goto LABEL_14;
    }
LABEL_27:
    TagsWithCategory = FigSignalErrorAt();
    goto LABEL_20;
  }
LABEL_14:
  if (a2)
  {
    *a2 = v9;
    v9 = 0;
  }
  if (a3)
  {
    *a3 = v10;
    v10 = 0;
  }
  TagsWithCategory = 0;
  if (v23)
  {
    *v23 = v12;
    v12 = 0;
  }
LABEL_20:
  if (v9)
LABEL_21:
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v12)
    CFRelease(v12);
  return TagsWithCategory;
}

uint64_t vr_createModifiedDataChannelTagCollectionWithDefaultTags(const OpaqueCMTagCollection *a1, _QWORD *a2)
{
  uint64_t MutableCopy;
  uint64_t v5;
  CMTagValue v6;
  uint64_t v7;
  CMTagValue v8;
  uint64_t v9;
  CMTag v11;
  CMTag v12;
  CMTag v13;
  CMTag v14;

  if (a1)
  {
    if (!a2)
      return FigSignalErrorAt();
    MutableCopy = FigTagCollectionCreateMutableCopy();
    if (!(_DWORD)MutableCopy)
    {
      if (!CMTagCollectionContainsTag(a1, *MEMORY[0x1E0CA2800]))
        goto LABEL_16;
      v5 = *MEMORY[0x1E0CA2838];
      v6 = *(_QWORD *)(MEMORY[0x1E0CA2838] + 8);
      *(_QWORD *)&v11.category = *MEMORY[0x1E0CA2838];
      v11.value = v6;
      if (!CMTagCollectionContainsTag(a1, v11))
        goto LABEL_23;
      v7 = *MEMORY[0x1E0CA2848];
      v8 = *(_QWORD *)(MEMORY[0x1E0CA2848] + 8);
      *(_QWORD *)&v12.category = *MEMORY[0x1E0CA2848];
      v12.value = v8;
      if (!CMTagCollectionContainsTag(a1, v12)
        || (*(_QWORD *)&v13.category = v5,
            v13.value = v6,
            MutableCopy = CMTagCollectionRemoveTag(0, v13),
            !(_DWORD)MutableCopy)
        && (*(_QWORD *)&v14.category = v7,
            v14.value = v8,
            MutableCopy = CMTagCollectionRemoveTag(0, v14),
            !(_DWORD)MutableCopy)
        && (MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E0CA2830]), !(_DWORD)MutableCopy))
      {
LABEL_23:
        if (CMTagCollectionContainsCategory(a1, kCMTagCategory_StereoView)
          || (MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E0CA2840]), !(_DWORD)MutableCopy))
        {
          if (CMTagCollectionContainsCategory(a1, kCMTagCategory_PackingType)
            || (MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E0CA2808]), !(_DWORD)MutableCopy))
          {
            if (CMTagCollectionContainsCategory(a1, kCMTagCategory_ProjectionType)
              || (MutableCopy = CMTagCollectionAddTag(0, *MEMORY[0x1E0CA2828]), !(_DWORD)MutableCopy))
            {
LABEL_16:
              v9 = 0;
              *a2 = 0;
              return v9;
            }
          }
        }
      }
    }
    return MutableCopy;
  }
  return FigSignalErrorAt();
}

CFTypeRef vr_copyCachedPixelBufferIfSameIQSample(const __CFDictionary *a1)
{
  const void *Value;
  const void *v3;
  BOOL v4;
  __IOSurface *IOSurface;
  double v6;
  double v7;
  __IOSurface *v8;
  double v9;
  double v10;
  IOSurfaceID ID;

  Value = CFDictionaryGetValue(a1, CFSTR("CachedPixelBuffer"));
  v3 = CFDictionaryGetValue(a1, CFSTR("CachedIQSample"));
  if (Value)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return 0;
  IOSurface = (__IOSurface *)CAXPCImageQueueSampleGetIOSurface();
  CAXPCImageQueueSampleGetTimestamp();
  v7 = v6;
  v8 = (__IOSurface *)CAXPCImageQueueSampleGetIOSurface();
  CAXPCImageQueueSampleGetTimestamp();
  v10 = v9;
  ID = IOSurfaceGetID(IOSurface);
  if (ID == IOSurfaceGetID(v8) && v7 == v10)
    return CFRetain(Value);
  else
    return 0;
}

double figCAXPCImageQueueSample_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t figCAXPCImageQueueSample_finalize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v3;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 7)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)(a1 + 25))
  {
    cf[0] = 0;
    figCAXPCImageQueueSample_copyTelemetryInfoDict((_BYTE *)a1, (CFMutableDictionaryRef *)cf);
    CAXPCImageQueueSampleFinish();
    if (cf[0])
      CFRelease(cf[0]);
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  return FigReadWriteLockDestroy();
}

BOOL figCAXPCImageQueueSample_equal(uint64_t a1, uint64_t a2)
{
  return a1 == a2 || CFEqual(*(CFTypeRef *)(a1 + 16), *(CFTypeRef *)(a2 + 16)) != 0;
}

CFHashCode figCAXPCImageQueueSample_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef figCAXPCImageQueueSample_copyDebugDesc(uint64_t a1)
{
  const void *v2;
  const __CFAllocator *v3;
  CFIndex v4;
  const char *v5;
  CFStringRef v6;
  CFTypeRef cf;

  cf = 0;
  figCAXPCImageQueueSample_copyTelemetryInfoDict((_BYTE *)a1, (CFMutableDictionaryRef *)&cf);
  v2 = (const void *)FigCFCopyCompactDescription();
  v3 = CFGetAllocator((CFTypeRef)a1);
  v4 = CFGetRetainCount((CFTypeRef)a1);
  if (*(_BYTE *)(a1 + 26))
    v5 = "YES";
  else
    v5 = "NO";
  v6 = CFStringCreateWithFormat(v3, 0, CFSTR("<FigCAXPCImageQueueSample %p retainCount %d> iqSample: %@, wasProvidedToClient: %s, telemetryInfo: %@"), a1, v4, *(_QWORD *)(a1 + 16), v5, v2);
  if (cf)
    CFRelease(cf);
  if (v2)
    CFRelease(v2);
  return v6;
}

void figCAXPCImageQueueSample_copyTelemetryInfoDict(_BYTE *a1, CFMutableDictionaryRef *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1 && a2)
  {
    if (a1[26])
    {
      FigReadWriteLockLockForRead();
      v4 = CFGetAllocator(a1);
      Mutable = CFDictionaryCreateMutable(v4, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (!Mutable)
      {
        FigSignalErrorAt();
        goto LABEL_12;
      }
      v6 = Mutable;
      if (!FigCFDictionarySetUInt32()
        && !FigCFDictionarySetDouble()
        && !FigCFDictionarySetUInt64()
        && !FigCFDictionarySetUInt64()
        && !FigCFDictionarySetDouble()
        && !FigCFDictionarySetDouble())
      {
        *a2 = v6;
LABEL_12:
        FigReadWriteLockUnlockForRead();
        return;
      }
      FigReadWriteLockUnlockForRead();
      CFRelease(v6);
    }
    else if (dword_1EE2A2D38 >= 7)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void __videoReceiver_createImageQueueReceiver_block_invoke(uint64_t a1)
{
  const void *UInt64;

  UInt64 = (const void *)FigCFNumberCreateUInt64();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 40) + 16), UInt64, *(const void **)(a1 + 48));
  if (UInt64)
    CFRelease(UInt64);
}

void __videoReceiver_releaseImageQueueReceiver_block_invoke()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *UInt64;
  const __CFDictionary *Value;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), UInt64);
  if (Value)
  {
    CFDictionaryGetValue(Value, CFSTR("ImageQueueReceiverKey"));
    if (dword_1EE2A2D38)
    {
      v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), UInt64);
  }
  if (UInt64)
    CFRelease(UInt64);
}

CFTypeRef __videoReceiver_setImageQueueMessage_block_invoke(uint64_t a1)
{
  const void *v2;
  CFTypeRef result;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = videoReceiver_getImageQueueReceiverByID();
  v2 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2)
    return CFRetain(v2);
  result = (CFTypeRef)FigSignalErrorAt();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (_DWORD)result;
  return result;
}

const __CFDictionary *videoReceiver_getImageQueueReceiverByID()
{
  uint64_t DerivedStorage;
  const void *UInt64;
  const __CFDictionary *Value;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UInt64 = (const void *)FigCFNumberCreateUInt64();
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), UInt64);
  if (UInt64)
    CFRelease(UInt64);
  if (Value)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(Value, CFSTR("ImageQueueReceiverKey"));
    if (dword_1EE2A2D38 >= 7)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return Value;
}

void __videoReceiver_createDataQueue_block_invoke(uint64_t a1)
{
  const void *v2;

  v2 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 40) + 72), v2);
  if (v2)
    CFRelease(v2);
}

void __videoReceiver_addDataChannelConfiguration_block_invoke(uint64_t a1)
{
  BOOL v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;

  if (FigCFEqual())
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) == 0;
  else
    v2 = 0;
  if (v2 || FigCFEqual())
  {
    if (dword_1EE2A2D38 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(_QWORD *)(a1 + 40) + 48));
    videoReceiver_replacePendingConfiguration(*(_QWORD *)(a1 + 48), *(const void **)(a1 + 32));
    v4 = *(_QWORD *)(a1 + 40);
    v5 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v4 + 124) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v4 + 140) = *(_QWORD *)(v5 + 16);
  }
}

uint64_t __videoReceiver_addDataChannelConfiguration_block_invoke_64(uint64_t a1)
{
  const void *v2;
  __CFArray *v3;
  uint64_t Instance;
  _QWORD *v5;
  CFTypeRef v6;
  uint64_t Count;
  const void *v8;
  CFIndex v9;
  const void *v10;
  CFIndex v11;
  const void *ValueAtIndex;
  uint64_t v13;
  OpaqueCMTimebase *v14;
  NSObject *v15;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v18;
  CMTime fireTime;
  uint64_t v20;
  CFRange v21;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v2 = *(const void **)(a1 + 40);
  v3 = *(__CFArray **)(*(_QWORD *)(a1 + 32) + 48);
  fireTime = *(CMTime *)(a1 + 56);
  if (receiverConfigurationActivationBlock_GetTypeID_sRegisterReceiverConfigurationActivationBlockTypeOnce != -1)
    dispatch_once(&receiverConfigurationActivationBlock_GetTypeID_sRegisterReceiverConfigurationActivationBlockTypeOnce, &__block_literal_global_71);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v5 = (_QWORD *)Instance;
    *(CMTime *)(Instance + 16) = fireTime;
    *(_QWORD *)(Instance + 40) = 0;
    if (v2)
      v6 = CFRetain(v2);
    else
      v6 = 0;
    v5[5] = v6;
    CFArrayAppendValue(v3, v5);
    if (v3)
    {
      Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        v21.length = Count;
        v21.location = 0;
        CFArraySortValues(v3, v21, (CFComparatorFunction)receiverConfigurationActivation_compareActivationTimes, 0);
      }
    }
    v8 = 0;
    v9 = 0;
LABEL_11:
    v10 = v8;
    if (v3)
    {
LABEL_12:
      v11 = CFArrayGetCount(v3);
      goto LABEL_14;
    }
    while (1)
    {
      v11 = 0;
LABEL_14:
      if (v9 >= v11)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(v3, v9);
      v8 = ValueAtIndex;
      if (!v10 || !ValueAtIndex || !FigCFEqual())
      {
        ++v9;
        goto LABEL_11;
      }
      CFArrayRemoveValueAtIndex(v3, v9);
      if (v3)
        goto LABEL_12;
    }
    CFRelease(v5);
  }
  else
  {
    FigSignalErrorAt();
  }
  receiverConfiguration_findEarliestCfgTimeToActivate(*(CFArrayRef *)(*(_QWORD *)(a1 + 32) + 48), (uint64_t)&v18);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(OpaqueCMTimebase **)(v13 + 56);
  v15 = *(NSObject **)(v13 + 64);
  fireTime = v18;
  result = CMTimebaseSetTimerDispatchSourceNextFireTime(v14, v15, &fireTime, 1u);
  *(CMTime *)(*(_QWORD *)(a1 + 32) + 124) = v18;
  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

void __videoReceiver_addDataChannelConfiguration_block_invoke_66(uint64_t a1)
{
  _QWORD *v2;
  void (*v3)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = (void (*)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2[31];
  if (v3)
  {
    if (dword_1EE2A2D38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v2 = *(_QWORD **)(a1 + 32);
      v3 = (void (*)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v2[31];
    }
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned int *)(a1 + 104);
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 72);
    v10 = v2[32];
    v24 = *(_OWORD *)(a1 + 80);
    v25 = *(_QWORD *)(a1 + 96);
    v3(v5, &v24, v6, v7, v8, v9, v10);
    v2 = *(_QWORD **)(a1 + 32);
  }
  v11 = v2[51];
  if (v11)
  {
    if (dword_1EE2A2D38)
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 408);
    }
    v13 = *(_QWORD *)(a1 + 40);
    v14 = *(unsigned int *)(a1 + 104);
    v15 = *(_QWORD *)(a1 + 56);
    v16 = *(_QWORD *)(a1 + 64);
    v17 = *(_QWORD *)(a1 + 72);
    v18 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16);
    v24 = *(_OWORD *)(a1 + 80);
    v25 = *(_QWORD *)(a1 + 96);
    v18(v11, v13, &v24, v14, v15, v16, v17);
  }
  v19 = *(const void **)(a1 + 40);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 56);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 64);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 72);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 48);
  if (v23)
    CFRelease(v23);
}

double receiverConfigurationActivationBlock_init(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void receiverConfigurationActivationBlock_finalize(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *(const void **)(a1 + 40);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
}

uint64_t receiverConfigurationActivationBlock_equal()
{
  return FigCFEqual();
}

CFHashCode receiverConfigurationActivationBlock_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 40));
}

CFStringRef receiverConfigurationActivationBlock_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v1;
  Float64 Seconds;
  CMTime time;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!a1)
    return CFStringCreateWithFormat(v1, 0, CFSTR("[receiverConfigurationActivation %p]"), 0);
  time = *(CMTime *)(a1 + 16);
  Seconds = CMTimeGetSeconds(&time);
  return CFStringCreateWithFormat(v1, 0, CFSTR("[receiverConfigurationActivation %p] activationTime:%.3f, configuration: %@"), a1, *(_QWORD *)&Seconds, *(_QWORD *)(a1 + 40));
}

uint64_t receiverConfigurationActivation_compareActivationTimes(uint64_t a1, uint64_t a2)
{
  CMTime v3;
  CMTime time1;

  time1 = *(CMTime *)(a1 + 16);
  v3 = *(CMTime *)(a2 + 16);
  return CMTimeCompare(&time1, &v3);
}

void __videoReceiver_createPlaybackStartupPreventionAssertion_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  CFMutableDictionaryRef Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (*(_QWORD *)(a1 + 32))
  {
    v1 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v1)
    {
      v2 = (const void *)v1;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetValue();
      CMNotificationCenterGetDefaultLocalCenter();
      if (CMNotificationCenterPostNotification() || dword_1EE2A2D38)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRelease(v2);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
}

uint64_t videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample(CMTime *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4, CFTypeRef *a5, CMTime *a6, _QWORD *a7)
{
  CMTimeEpoch v7;
  uint64_t v8;
  CFTypeID v15;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v18;
  CMTimeValue v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t *v22;
  const void *v23;
  uint64_t *v24;
  const void *v25;
  CFTypeRef *v26;
  CFTypeRef *v27;
  const void *v28;
  const void *v29;
  int v30;
  uint64_t v31;
  int isAllowedToLog;
  unsigned int v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  Float64 v38;
  double v39;
  int v40;
  const char *v41;
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  Float64 Seconds;
  int v47;
  NSObject *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  double v52;
  int v53;
  const char *v54;
  NSObject *v55;
  NSObject *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  Float64 v60;
  CFTypeRef *v62;
  CFTypeRef *v63;
  __int128 v64;
  _QWORD block[7];
  CMTime v66;
  char v67;
  __int16 v68;
  CFTypeRef v69;
  CMTime v70;
  CFTypeRef cf;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t type[8];
  os_log_type_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char v87;
  _BYTE v88[24];
  _BYTE v89[44];
  __int16 v90;
  int v91;
  CMTime time;
  void *v93;
  uint64_t *v94;
  os_log_type_t *v95;
  _BYTE *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  CMTime *v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v64 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v70.value = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v70.epoch = v7;
  cf = 0;
  v69 = 0;
  if (!a1
    || (v15 = CFGetTypeID(a1),
        MEMORY[0x19402F294](&FigVideoReceiverGetClassID_sRegisterFigVideoReceiverTypeOnce, RegisterFigVideoReceiverTypeOnce), v15 != CMBaseClassGetCFTypeID())|| (*(_BYTE *)(a2 + 12) & 1) == 0|| !a4)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_60;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  LOBYTE(time.value) = 0;
  v88[0] = 0;
  LOBYTE(v84) = 0;
  CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  v62 = a4;
  v63 = a5;
  if (dword_1EE2A2D38 >= 3)
  {
    LODWORD(v84) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  time = *(CMTime *)a2;
  v18 = videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal(a1, (__int128 *)&time.value, 0, &cf, (uint64_t)&v70, (CFArrayRef *)&v69, a7);
  v19 = MEMORY[0x1E0C809B0];
  if (!(_DWORD)v18)
  {
    if (*(_BYTE *)(DerivedStorage + 456)
      && fvr_isAllowedToLog(DerivedStorage + 456, 0)
      && dword_1EE2A2D38)
    {
      LODWORD(v84) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v43 = v84;
      if (os_log_type_enabled(v42, type[0]))
        v44 = v43;
      else
        v44 = v43 & 0xFFFFFFFE;
      if (v44)
      {
        v45 = CMBaseObjectGetDerivedStorage() + 236;
        time = *(CMTime *)a2;
        Seconds = CMTimeGetSeconds(&time);
        v47 = *(_DWORD *)(DerivedStorage + 476);
        *(_DWORD *)v88 = 136316162;
        *(_QWORD *)&v88[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAva"
                             "ilableOtherwiseLastReturnedSample";
        *(_WORD *)&v88[12] = 2048;
        *(_QWORD *)&v88[14] = a1;
        *(_WORD *)&v88[22] = 2082;
        *(_QWORD *)v89 = v45;
        *(_WORD *)&v89[8] = 2048;
        *(Float64 *)&v89[10] = Seconds;
        *(_WORD *)&v89[18] = 1024;
        *(_DWORD *)&v89[20] = v47;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v55 = *(NSObject **)(DerivedStorage + 152);
    block[0] = v19;
    block[1] = 0x40000000;
    block[2] = __videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample_block_invoke;
    block[3] = &__block_descriptor_tmp_80;
    v67 = 0;
    v68 = 0;
    v66 = v70;
    block[4] = DerivedStorage;
    block[5] = cf;
    block[6] = v69;
    dispatch_sync(v55, block);
    goto LABEL_48;
  }
  v8 = v18;
  v20 = CMBaseObjectGetDerivedStorage();
  v84 = 0;
  v85 = &v84;
  v86 = 0x2000000000;
  v87 = 0;
  *(_QWORD *)type = 0;
  v81 = type;
  v82 = 0x2000000000;
  v83 = 0;
  *(_QWORD *)v88 = 0;
  *(_QWORD *)&v88[8] = v88;
  *(_QWORD *)&v88[16] = 0x3000000000;
  *(_OWORD *)v89 = v64;
  *(_QWORD *)&v89[16] = v7;
  v76 = 0;
  v77 = &v76;
  v78 = 0x2000000000;
  v79 = 0;
  v72 = 0;
  v73 = &v72;
  v74 = 0x2000000000;
  v75 = 0;
  v21 = *(NSObject **)(v20 + 152);
  time.value = v19;
  *(_QWORD *)&time.timescale = 0x40000000;
  time.epoch = (CMTimeEpoch)__videoReceiver_copyCachedTaggedBufferGroupAndRelatedObjectsIfAvailable_block_invoke;
  v93 = &unk_1E2F8AAA0;
  v94 = &v84;
  v95 = type;
  v96 = v88;
  v97 = &v76;
  v98 = &v72;
  v99 = v20;
  v100 = a7;
  v101 = a1;
  dispatch_sync(v21, &time);
  v22 = v81;
  if (*((_BYTE *)v85 + 24))
  {
    v23 = (const void *)*((_QWORD *)v81 + 3);
    *((_QWORD *)v81 + 3) = 0;
    v70 = *(CMTime *)(*(_QWORD *)&v88[8] + 24);
    cf = v23;
    v69 = (CFTypeRef)v77[3];
    v77[3] = 0;
    if (a7)
    {
      v24 = v73;
      *a7 = v73[3];
      v24[3] = 0;
    }
  }
  v25 = (const void *)*((_QWORD *)v22 + 3);
  v27 = v62;
  v26 = v63;
  if (v25)
    CFRelease(v25);
  v28 = (const void *)v77[3];
  if (v28)
    CFRelease(v28);
  v29 = (const void *)v73[3];
  if (v29)
    CFRelease(v29);
  v30 = *((unsigned __int8 *)v85 + 24);
  _Block_object_dispose(&v72, 8);
  _Block_object_dispose(&v76, 8);
  _Block_object_dispose(v88, 8);
  _Block_object_dispose(type, 8);
  _Block_object_dispose(&v84, 8);
  v31 = DerivedStorage + 456;
  if (v30)
  {
    isAllowedToLog = fvr_isAllowedToLog(v31, 1);
    v33 = dword_1EE2A2D38;
    if (!isAllowedToLog || !dword_1EE2A2D38)
      goto LABEL_49;
    LODWORD(v84) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v35 = v84;
    if (os_log_type_enabled(v34, type[0]))
      v36 = v35;
    else
      v36 = v35 & 0xFFFFFFFE;
    if (v36)
    {
      v37 = CMBaseObjectGetDerivedStorage() + 236;
      time = *(CMTime *)a2;
      v38 = CMTimeGetSeconds(&time);
      time = v70;
      v39 = CMTimeGetSeconds(&time);
      v40 = *(_DWORD *)(DerivedStorage + 472);
      v41 = "logs skipped ";
      *(_DWORD *)v88 = 136316930;
      *(_QWORD *)&v88[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvail"
                           "ableOtherwiseLastReturnedSample";
      *(_WORD *)&v88[12] = 2048;
      if (!v40)
        v41 = "";
      *(_QWORD *)&v88[14] = a1;
      *(_WORD *)&v88[22] = 2082;
      *(_QWORD *)v89 = v37;
      *(_WORD *)&v89[8] = 2048;
      *(Float64 *)&v89[10] = v38;
      *(_WORD *)&v89[18] = 1024;
      *(_DWORD *)&v89[20] = v8;
      *(_WORD *)&v89[24] = 2048;
      *(double *)&v89[26] = v39;
      *(_WORD *)&v89[34] = 2080;
      *(_QWORD *)&v89[36] = v41;
      v90 = 1024;
      v91 = v40;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_48:
    v27 = v62;
    v26 = v63;
    v33 = dword_1EE2A2D38;
LABEL_49:
    if (v33 >= 3)
    {
      LODWORD(v84) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v57 = v84;
      if (os_log_type_enabled(v56, type[0]))
        v58 = v57;
      else
        v58 = v57 & 0xFFFFFFFE;
      if (v58)
      {
        v59 = CMBaseObjectGetDerivedStorage() + 236;
        time = v70;
        v60 = CMTimeGetSeconds(&time);
        *(_DWORD *)v88 = 136316418;
        *(_QWORD *)&v88[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAva"
                             "ilableOtherwiseLastReturnedSample";
        *(_WORD *)&v88[12] = 2048;
        *(_QWORD *)&v88[14] = a1;
        *(_WORD *)&v88[22] = 2082;
        *(_QWORD *)v89 = v59;
        *(_WORD *)&v89[8] = 2048;
        *(Float64 *)&v89[10] = v60;
        *(_WORD *)&v89[18] = 2114;
        *(_QWORD *)&v89[20] = cf;
        *(_WORD *)&v89[28] = 2114;
        *(_QWORD *)&v89[30] = v69;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *v27 = cf;
    cf = 0;
    if (v26)
    {
      *v26 = v69;
      v69 = 0;
    }
    v8 = 0;
    if (a6)
      *a6 = v70;
    goto LABEL_60;
  }
  if (fvr_isAllowedToLog(v31, 2) && dword_1EE2A2D38)
  {
    LODWORD(v84) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v49 = v84;
    if (os_log_type_enabled(v48, type[0]))
      v50 = v49;
    else
      v50 = v49 & 0xFFFFFFFE;
    if (v50)
    {
      v51 = CMBaseObjectGetDerivedStorage() + 236;
      time = *(CMTime *)a2;
      v52 = CMTimeGetSeconds(&time);
      v53 = *(_DWORD *)(DerivedStorage + 472);
      v54 = "logs skipped ";
      *(_DWORD *)v88 = 136316674;
      *(_QWORD *)&v88[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvail"
                           "ableOtherwiseLastReturnedSample";
      if (!v53)
        v54 = "";
      *(_WORD *)&v88[12] = 2048;
      *(_QWORD *)&v88[14] = a1;
      *(_WORD *)&v88[22] = 2082;
      *(_QWORD *)v89 = v51;
      *(_WORD *)&v89[8] = 2048;
      *(double *)&v89[10] = v52;
      *(_WORD *)&v89[18] = 1024;
      *(_DWORD *)&v89[20] = v8;
      *(_WORD *)&v89[24] = 2080;
      *(_QWORD *)&v89[26] = v54;
      *(_WORD *)&v89[34] = 1024;
      *(_DWORD *)&v89[36] = v53;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_60:
  if (cf)
    CFRelease(cf);
  if (v69)
    CFRelease(v69);
  return v8;
}

uint64_t videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal(CMTime *a1, __int128 *a2, int a3, _QWORD *a4, uint64_t a5, CFArrayRef *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  const __CFString *value;
  CFRange v18;
  const __CFString *v19;
  CFRange v20;
  uint64_t v21;
  NSObject *v22;
  CFArrayRef *v23;
  uint64_t v24;
  CFIndex Count;
  const void *v26;
  uint64_t v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  CFIndex v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  CFArrayRef v36;
  CFArrayRef v37;
  const __CFArray *v38;
  uint64_t v39;
  CFIndex v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  const __CFArray *v44;
  const void *v45;
  const __CFArray *v46;
  const void *v47;
  CFTypeRef v48;
  CFIndex v49;
  const __CFAllocator *v50;
  CFMutableArrayRef Mutable;
  const __CFAllocator *v52;
  CFMutableArrayRef v53;
  const __CFAllocator *v54;
  CFMutableArrayRef v55;
  const __CFAllocator *v56;
  CFMutableArrayRef v57;
  NSObject *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  NSObject *v63;
  unsigned int v64;
  unsigned int v65;
  const char *v66;
  CFIndex v67;
  CFIndex v68;
  double Seconds;
  int v70;
  const char *v71;
  NSObject *v72;
  unsigned int v73;
  unsigned int v74;
  const char *v75;
  double v76;
  int v77;
  const char *v78;
  double v79;
  const char *v80;
  CMTimeEpoch v81;
  CMTimeFlags v82;
  uint64_t v83;
  CMTimeFlags v84;
  CMTimeEpoch v85;
  CFIndex v87;
  uint64_t v88;
  opaqueCMSampleBuffer *ValueAtIndex;
  CMTimeEpoch v90;
  NSObject *v91;
  unsigned int v92;
  unsigned int v93;
  const char *v94;
  NSObject *v95;
  unsigned int v96;
  unsigned int v97;
  const char *v98;
  Float64 v99;
  Float64 v100;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  int32_t v103;
  NSObject *v104;
  unsigned int v105;
  unsigned int v106;
  const char *v107;
  uint64_t v108;
  NSObject *v109;
  unsigned int v110;
  unsigned int v111;
  const char *v112;
  NSObject *v113;
  unsigned int v114;
  unsigned int v115;
  const char *v116;
  int v117;
  const __CFAllocator *v118;
  CFMutableArrayRef v119;
  __CFArray *v120;
  const __CFAllocator *v121;
  CFMutableArrayRef v122;
  __CFArray *v123;
  int v124;
  CFIndex v125;
  CMTimeFlags v126;
  CFIndex i;
  const OpaqueCMTagCollection *v128;
  const void *v129;
  uint64_t v130;
  CMTimeEpoch v131;
  uint64_t v132;
  NSObject *v133;
  uint64_t v134;
  const void *v135;
  NSObject *v136;
  unsigned int v137;
  unsigned int v138;
  const char *v139;
  Float64 v140;
  Float64 v141;
  CFIndex v142;
  opaqueCMSampleBuffer *v143;
  const void *v144;
  CMTimeFlags v145;
  CFIndex j;
  CFAllocatorRef v147;
  uint64_t v148;
  NSObject *v149;
  const void *v150;
  const void *v151;
  NSObject *v152;
  unsigned int v153;
  unsigned int v154;
  const char *v155;
  Float64 v156;
  int v157;
  Float64 v158;
  Float64 v159;
  double v160;
  int v161;
  const char *v162;
  Float64 v163;
  double v164;
  int v165;
  const char *v166;
  uint64_t v167;
  NSObject *v168;
  unsigned int v169;
  unsigned int v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const __CFString *v175;
  CFRange v176;
  const void *v177;
  const void *v178;
  const __CFString *v179;
  CFRange v180;
  double v182;
  int v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  CFArrayRef *v187;
  const void *v188;
  _QWORD *v189;
  uint64_t v190;
  CMTimeScale v192;
  CMTimeFlags v193;
  CMTimeValue v194;
  CMTimeEpoch v195;
  const __CFArray *v196;
  CFArrayRef v197[2];
  CFArrayRef v198[2];
  const __CFArray *v199;
  __int128 *v200;
  CMTime *v201;
  const __CFArray *v202;
  const void *v203;
  CMTimeEpoch v204;
  __int128 v205;
  const __CFArray *v206;
  CFTypeRef cf[2];
  CMTimeEpoch v208;
  CFArrayRef theArray[2];
  CFArrayRef v210[3];
  char v211;
  CMTime v212;
  uint64_t v213;
  CMTime theString;
  uint64_t v215;
  __int128 v216;
  CMTimeValue v217;
  CMTimeScale v218;
  CMTimeRange __dst;
  __int128 v220;
  CMTime *p_theString;
  CFIndex v222;
  __int128 v223;
  CMTimeEpoch v224;
  __int128 v225;
  CMTime *v226;
  uint64_t v227;
  CFIndex v228;
  __int128 v229;
  CMTimeEpoch v230;
  __int16 v231;
  char v232;
  _BYTE time[32];
  _BYTE v234[36];
  __int16 v235;
  const char *v236;
  __int16 v237;
  int v238;
  CMTimeValue v239;
  CMTimeScale timescale;
  CMTime rhs;
  uint64_t v242;
  CMTime buffer;
  uint64_t v244;
  uint64_t v245;

  v245 = *MEMORY[0x1E0C80C00];
  v194 = *MEMORY[0x1E0CA2E18];
  v217 = *MEMORY[0x1E0CA2E18];
  v192 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v218 = v192;
  v211 = 0;
  *(_OWORD *)theArray = 0u;
  memset(v210, 0, sizeof(v210));
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)time = *a2;
  *(_QWORD *)&time[16] = *((_QWORD *)a2 + 2);
  v14 = CMBaseObjectGetDerivedStorage();
  rhs.value = 0;
  theString.value = 0;
  v15 = *(_QWORD *)(v14 + 88);
  if (v15)
  {
    FigDataChannelConfigurationCopyPlayerLoggingIdentifier(v15, (CFStringRef *)&rhs);
    FigDataChannelConfigurationCopyLoggingIdentifier(*(_QWORD *)(v14 + 88), (CFStringRef *)&theString);
  }
  v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    value = (const __CFString *)theString.value;
    buffer.value = 0;
    if (theString.value)
    {
      if (CFStringGetLength((CFStringRef)theString.value) <= 8)
        v18.length = CFStringGetLength(value);
      else
        v18.length = 8;
      v18.location = 0;
      CFStringGetBytes(value, v18, 0, 0x3Fu, 0, (UInt8 *)&buffer, 8, 0);
    }
    strncpy((char *)&__dst, (const char *)&buffer, 8uLL);
    v19 = (const __CFString *)rhs.value;
    buffer.value = 0;
    if (rhs.value)
    {
      if (CFStringGetLength((CFStringRef)rhs.value) <= 8)
        v20.length = CFStringGetLength(v19);
      else
        v20.length = 8;
      v20.location = 0;
      CFStringGetBytes(v19, v20, 0, 0x3Fu, 0, (UInt8 *)&buffer, 8, 0);
    }
    strncpy((char *)&__dst, (const char *)&buffer, 8uLL);
    *(_OWORD *)&__dst.start.value = *(_OWORD *)time;
    __dst.start.epoch = *(_QWORD *)&time[16];
    CMTimeGetSeconds(&__dst.start);
    kdebug_trace();
  }
  if (rhs.value)
    CFRelease((CFTypeRef)rhs.value);
  v189 = a4;
  v190 = a5;
  v193 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v204 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (theString.value)
    CFRelease((CFTypeRef)theString.value);
  v220 = *a2;
  p_theString = (CMTime *)*((_QWORD *)a2 + 2);
  v21 = CMBaseObjectGetDerivedStorage();
  v22 = *(NSObject **)(v21 + 152);
  __dst.start.value = MEMORY[0x1E0C809B0];
  *(_QWORD *)&__dst.start.timescale = 0x40000000;
  __dst.start.epoch = (CMTimeEpoch)__videoReceiver_updateActiveConfigurationForHostTimeIfNecessary_block_invoke;
  __dst.duration.value = (CMTimeValue)&__block_descriptor_tmp_82;
  *(_QWORD *)&__dst.duration.timescale = v21;
  __dst.duration.epoch = (CMTimeEpoch)a1;
  dispatch_sync(v22, &__dst);
  if (a6)
    v23 = &v210[2];
  else
    v23 = 0;
  v24 = videoReceiver_copyOutputQueuesIfReady(a1, &v211, theArray, &theArray[1], v210, &v210[1], v23);
  if ((_DWORD)v24)
    goto LABEL_378;
  v200 = a2;
  if (!*(_QWORD *)(DerivedStorage + 88))
  {
    v26 = 0;
    v27 = 4294951717;
    if (fvr_isAllowedToLog(DerivedStorage + 496, 3) && dword_1EE2A2D38)
    {
      LODWORD(buffer.value) = 0;
      LOBYTE(rhs.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v29 = buffer.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value))
        v30 = v29;
      else
        v30 = v29 & 0xFFFFFFFE;
      if (!v30)
        goto LABEL_125;
      if (a1)
        v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      else
        v31 = "";
      *(_OWORD *)&__dst.start.value = *v200;
      __dst.start.epoch = *((_QWORD *)v200 + 2);
      Seconds = CMTimeGetSeconds(&__dst.start);
      v70 = *(_DWORD *)(DerivedStorage + 512);
      v71 = "logs skipped ";
      *(_DWORD *)time = 136316418;
      *(_QWORD *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v70)
        v71 = "";
      goto LABEL_124;
    }
LABEL_65:
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    goto LABEL_325;
  }
  if (theArray[0])
    Count = CFArrayGetCount(theArray[0]);
  else
    Count = 0;
  if (v210[0])
    v32 = CFArrayGetCount(v210[0]);
  else
    v32 = 0;
  if (v211 && Count == -v32)
  {
    v26 = 0;
    v27 = 4294951366;
    if (fvr_isAllowedToLog(DerivedStorage + 496, 4) && dword_1EE2A2D38)
    {
      LODWORD(buffer.value) = 0;
      LOBYTE(rhs.value) = 0;
      v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v34 = buffer.value;
      if (os_log_type_enabled(v33, rhs.value))
        v35 = v34;
      else
        v35 = v34 & 0xFFFFFFFE;
      if (!v35)
        goto LABEL_125;
      if (a1)
        v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      else
        v31 = "";
      *(_OWORD *)&__dst.start.value = *v200;
      __dst.start.epoch = *((_QWORD *)v200 + 2);
      Seconds = CMTimeGetSeconds(&__dst.start);
      v70 = *(_DWORD *)(DerivedStorage + 512);
      v71 = "logs skipped ";
      *(_DWORD *)time = 136316418;
      *(_QWORD *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v70)
        v71 = "";
LABEL_124:
      *(_WORD *)&time[12] = 2048;
      *(_QWORD *)&time[14] = a1;
      *(_WORD *)&time[22] = 2082;
      *(_QWORD *)&time[24] = v31;
      *(_WORD *)v234 = 2048;
      *(double *)&v234[2] = Seconds;
      *(_WORD *)&v234[10] = 2080;
      *(_QWORD *)&v234[12] = v71;
      *(_WORD *)&v234[20] = 1024;
      *(_DWORD *)&v234[22] = v70;
      _os_log_send_and_compose_impl();
LABEL_125:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_126:
      v26 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      goto LABEL_325;
    }
    goto LABEL_65;
  }
  if (!v211)
  {
    v26 = 0;
    v27 = 4294951719;
    if (fvr_isAllowedToLog(DerivedStorage + 496, 5) && dword_1EE2A2D38)
    {
      LODWORD(buffer.value) = 0;
      LOBYTE(rhs.value) = 0;
      v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v42 = buffer.value;
      if (os_log_type_enabled(v41, rhs.value))
        v43 = v42;
      else
        v43 = v42 & 0xFFFFFFFE;
      if (!v43)
        goto LABEL_125;
      if (a1)
        v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      else
        v31 = "";
      *(_OWORD *)&__dst.start.value = *v200;
      __dst.start.epoch = *((_QWORD *)v200 + 2);
      Seconds = CMTimeGetSeconds(&__dst.start);
      v70 = *(_DWORD *)(DerivedStorage + 512);
      v71 = "logs skipped ";
      *(_DWORD *)time = 136316418;
      *(_QWORD *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v70)
        v71 = "";
      goto LABEL_124;
    }
    goto LABEL_65;
  }
  v36 = theArray[1];
  if (theArray[1])
    v36 = (CFArrayRef)CFArrayGetCount(theArray[1]);
  if ((CFArrayRef)Count != v36)
    goto LABEL_377;
  v37 = v210[1];
  if (v210[1])
    v37 = (CFArrayRef)CFArrayGetCount(v210[1]);
  if ((CFArrayRef)v32 != v37)
  {
LABEL_377:
    v24 = FigSignalErrorAt();
LABEL_378:
    v27 = v24;
    goto LABEL_126;
  }
  v38 = v210[0];
  v216 = *(_OWORD *)&v210[1];
  v205 = *(_OWORD *)theArray;
  *(_OWORD *)cf = *v200;
  v208 = *((_QWORD *)v200 + 2);
  *(_QWORD *)time = 0;
  *(_QWORD *)&time[8] = time;
  *(_QWORD *)&time[16] = 0x2000000000;
  *(_DWORD *)&time[24] = 0;
  v39 = CMBaseObjectGetDerivedStorage();
  buffer.value = 0;
  *(_QWORD *)&buffer.timescale = &buffer;
  buffer.epoch = 0x2000000000;
  v244 = 0;
  rhs.value = 0;
  *(_QWORD *)&rhs.timescale = &rhs;
  rhs.epoch = 0x2000000000;
  v242 = 0;
  theString.value = 0;
  *(_QWORD *)&theString.timescale = &theString;
  theString.epoch = 0x2000000000;
  v215 = 0;
  v212.value = 0;
  *(_QWORD *)&v212.timescale = &v212;
  v212.epoch = 0x2000000000;
  v213 = 0;
  if ((_QWORD)v205)
    v40 = CFArrayGetCount((CFArrayRef)v205);
  else
    v40 = 0;
  v187 = a6;
  if (v38)
    v49 = CFArrayGetCount(v38);
  else
    v49 = 0;
  v50 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v50, v40, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(*(_QWORD *)&buffer.timescale + 24) = Mutable;
  if (!Mutable)
    goto LABEL_376;
  v52 = CFGetAllocator(a1);
  v53 = CFArrayCreateMutable(v52, v40, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(*(_QWORD *)&rhs.timescale + 24) = v53;
  if (!v53)
    goto LABEL_376;
  v54 = CFGetAllocator(a1);
  v55 = CFArrayCreateMutable(v54, v49, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(*(_QWORD *)&theString.timescale + 24) = v55;
  if (v55
    && (v56 = CFGetAllocator(a1),
        v57 = CFArrayCreateMutable(v56, v49, MEMORY[0x1E0C9B378]),
        (*(_QWORD *)(*(_QWORD *)&v212.timescale + 24) = v57) != 0))
  {
    v58 = *(NSObject **)(v39 + 152);
    __dst.start.value = MEMORY[0x1E0C809B0];
    *(_QWORD *)&__dst.start.timescale = 0x40000000;
    __dst.start.epoch = (CMTimeEpoch)__videoReceiver_copyBuffersFromSamplingSourceForHostTime_block_invoke;
    __dst.duration.value = (CMTimeValue)&unk_1E2F8AA28;
    v223 = v205;
    v225 = v216;
    v224 = (CMTimeEpoch)v38;
    v226 = a1;
    v227 = v39;
    v229 = *(_OWORD *)cf;
    v230 = v208;
    v231 = a3;
    v232 = BYTE2(a3);
    *(_QWORD *)&__dst.duration.timescale = time;
    __dst.duration.epoch = (CMTimeEpoch)&buffer;
    *(_QWORD *)&v220 = &v212;
    *((_QWORD *)&v220 + 1) = &rhs;
    v228 = v49;
    p_theString = &theString;
    v222 = v40;
    dispatch_sync(v58, &__dst);
    if (*(_DWORD *)(*(_QWORD *)&time[8] + 24))
    {
      v26 = 0;
      v44 = 0;
      v203 = 0;
      v46 = 0;
    }
    else
    {
      v46 = *(const __CFArray **)(*(_QWORD *)&buffer.timescale + 24);
      *(_QWORD *)(*(_QWORD *)&buffer.timescale + 24) = 0;
      v203 = *(const void **)(*(_QWORD *)&rhs.timescale + 24);
      *(_QWORD *)(*(_QWORD *)&rhs.timescale + 24) = 0;
      v44 = *(const __CFArray **)(*(_QWORD *)&theString.timescale + 24);
      *(_QWORD *)(*(_QWORD *)&theString.timescale + 24) = 0;
      v26 = *(const void **)(*(_QWORD *)&v212.timescale + 24);
      *(_QWORD *)(*(_QWORD *)&v212.timescale + 24) = 0;
    }
  }
  else
  {
LABEL_376:
    v26 = 0;
    v44 = 0;
    v203 = 0;
    v46 = 0;
    *(_DWORD *)(*(_QWORD *)&time[8] + 24) = FigSignalErrorAt();
  }
  v59 = *(const void **)(*(_QWORD *)&v212.timescale + 24);
  if (v59)
    CFRelease(v59);
  v60 = *(const void **)(*(_QWORD *)&buffer.timescale + 24);
  if (v60)
    CFRelease(v60);
  v61 = *(const void **)(*(_QWORD *)&rhs.timescale + 24);
  if (v61)
    CFRelease(v61);
  v62 = *(const void **)(*(_QWORD *)&theString.timescale + 24);
  if (v62)
    CFRelease(v62);
  v27 = *(unsigned int *)(*(_QWORD *)&time[8] + 24);
  _Block_object_dispose(&v212, 8);
  _Block_object_dispose(&theString, 8);
  _Block_object_dispose(&rhs, 8);
  _Block_object_dispose(&buffer, 8);
  _Block_object_dispose(time, 8);
  v188 = v26;
  v206 = v44;
  v202 = v46;
  if ((_DWORD)v27)
  {
    v47 = 0;
    if (!fvr_isAllowedToLog(DerivedStorage + 496, 6) || !dword_1EE2A2D38)
    {
      v48 = 0;
      goto LABEL_324;
    }
    LODWORD(buffer.value) = 0;
    LOBYTE(rhs.value) = 0;
    v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v64 = buffer.value;
    if (os_log_type_enabled(v63, rhs.value))
      v65 = v64;
    else
      v65 = v64 & 0xFFFFFFFE;
    if (v65)
    {
      if (a1)
        v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      else
        v66 = "";
      *(_OWORD *)&__dst.start.value = *v200;
      __dst.start.epoch = *((_QWORD *)v200 + 2);
      v76 = CMTimeGetSeconds(&__dst.start);
      v77 = *(_DWORD *)(DerivedStorage + 512);
      v78 = "logs skipped ";
      *(_DWORD *)time = 136316674;
      *(_QWORD *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
      if (!v77)
        v78 = "";
      *(_WORD *)&time[12] = 2048;
      *(_QWORD *)&time[14] = a1;
      *(_WORD *)&time[22] = 2082;
      *(_QWORD *)&time[24] = v66;
      *(_WORD *)v234 = 1024;
      *(_DWORD *)&v234[2] = v27;
      *(_WORD *)&v234[6] = 2048;
      *(double *)&v234[8] = v76;
      *(_WORD *)&v234[16] = 2080;
      *(_QWORD *)&v234[18] = v78;
      *(_WORD *)&v234[26] = 1024;
      *(_DWORD *)&v234[28] = v77;
      goto LABEL_120;
    }
    goto LABEL_321;
  }
  v201 = a1;
  v186 = DerivedStorage;
  if ((a3 & 0xFF00) == 0)
    goto LABEL_213;
  *(_OWORD *)cf = *v200;
  v208 = *((_QWORD *)v200 + 2);
  if (!v46)
  {
    v67 = 0;
    if (v44)
      goto LABEL_97;
LABEL_108:
    v68 = 0;
    goto LABEL_109;
  }
  v67 = CFArrayGetCount(v46);
  if (!v44)
    goto LABEL_108;
LABEL_97:
  v68 = CFArrayGetCount(v44);
LABEL_109:
  *(_QWORD *)&v216 = v194;
  DWORD2(v216) = v192;
  v185 = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D38 >= 3)
  {
    LODWORD(buffer.value) = 0;
    LOBYTE(rhs.value) = 0;
    v72 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v73 = buffer.value;
    if (os_log_type_enabled(v72, rhs.value))
      v74 = v73;
    else
      v74 = v73 & 0xFFFFFFFE;
    if (v74)
    {
      if (v201)
        v75 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
      else
        v75 = "";
      *(_OWORD *)&__dst.start.value = *(_OWORD *)cf;
      __dst.start.epoch = v208;
      v79 = CMTimeGetSeconds(&__dst.start);
      *(_DWORD *)time = 136316674;
      *(_QWORD *)&time[4] = "videoReceiver_areBuffersSynchronized";
      v80 = " with data queue sampling at video PTS";
      *(_WORD *)&time[12] = 2048;
      *(_WORD *)&time[22] = 2082;
      *(_QWORD *)&time[14] = v201;
      if ((*(_QWORD *)&a3 & 0xFF0000) == 0)
        v80 = ".";
      *(_QWORD *)&time[24] = v75;
      *(_WORD *)v234 = 1024;
      *(_DWORD *)&v234[2] = v67;
      *(_WORD *)&v234[6] = 1024;
      *(_DWORD *)&v234[8] = v68;
      *(_WORD *)&v234[12] = 2048;
      *(double *)&v234[14] = v79;
      *(_WORD *)&v234[22] = 2080;
      *(_QWORD *)&v234[24] = v80;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v44 = v206;
  }
  v81 = v204;
  v82 = v193;
  if (v67 < 1)
  {
LABEL_146:
    if (v68 >= 1)
    {
      v87 = 0;
      v88 = MEMORY[0x1E0CA2E68];
      do
      {
        ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v44, v87);
        memset(&theString, 0, sizeof(theString));
        CMSampleBufferGetOutputPresentationTimeStamp(&theString, ValueAtIndex);
        if ((theString.flags & 1) == 0)
          goto LABEL_375;
        memset(&v212, 0, sizeof(v212));
        CMSampleBufferGetOutputDuration(&v212, ValueAtIndex);
        __dst.start = v212;
        *(_OWORD *)v198 = *(_OWORD *)v88;
        *(_OWORD *)time = *(_OWORD *)v88;
        v90 = *(_QWORD *)(v88 + 16);
        *(_QWORD *)&time[16] = v90;
        if (CMTimeCompare(&__dst.start, (CMTime *)time) <= 0)
        {
          *(_OWORD *)&v212.value = *(_OWORD *)v198;
          v212.epoch = v90;
          if (dword_1EE2A2D38 >= 7)
          {
            LODWORD(buffer.value) = 0;
            LOBYTE(rhs.value) = 0;
            v95 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v96 = buffer.value;
            if (os_log_type_enabled(v95, rhs.value))
              v97 = v96;
            else
              v97 = v96 & 0xFFFFFFFE;
            if (v97)
            {
              if (v201)
                v98 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
              else
                v98 = "";
              __dst.start.value = v216;
              __dst.start.timescale = DWORD2(v216);
              __dst.start.flags = v82;
              __dst.start.epoch = v81;
              v100 = CMTimeGetSeconds(&__dst.start);
              *(_DWORD *)time = 136316162;
              *(_QWORD *)&time[4] = "videoReceiver_areBuffersSynchronized";
              *(_WORD *)&time[12] = 2048;
              *(_QWORD *)&time[14] = v201;
              *(_WORD *)&time[22] = 2082;
              *(_QWORD *)&time[24] = v98;
              *(_WORD *)v234 = 1024;
              *(_DWORD *)&v234[2] = v87;
              *(_WORD *)&v234[6] = 2048;
              *(Float64 *)&v234[8] = v100;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
          }
          v239 = theString.value;
          flags = theString.flags;
          timescale = theString.timescale;
          epoch = theString.epoch;
          if ((theString.flags & 0x1F) != 3 && (v82 & 0x1F) != 3)
            goto LABEL_177;
          memset(&__dst, 0, 24);
          buffer = theString;
          rhs.value = v216;
          rhs.timescale = DWORD2(v216);
          rhs.flags = v82;
          rhs.epoch = v81;
          CMTimeSubtract((CMTime *)time, &buffer, &rhs);
          CMTimeAbsoluteValue(&__dst.start, (CMTime *)time);
          CMTimeMake(&buffer, 1, 1000000000);
          rhs = __dst.start;
          if (CMTimeCompare(&rhs, &buffer) < 1)
          {
            v103 = 0;
          }
          else
          {
LABEL_177:
            __dst.start.value = v239;
            __dst.start.timescale = timescale;
            __dst.start.flags = flags;
            __dst.start.epoch = epoch;
            rhs.value = v216;
            rhs.timescale = DWORD2(v216);
            rhs.flags = v82;
            rhs.epoch = v81;
            v103 = CMTimeCompare(&__dst.start, &rhs);
          }
          v44 = v206;
          if (v103)
          {
LABEL_191:
            v108 = v186;
            v45 = v203;
            if (fvr_isAllowedToLog(v185 + 536, 9) && dword_1EE2A2D38)
            {
              LODWORD(buffer.value) = 0;
              LOBYTE(rhs.value) = 0;
              v109 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v110 = buffer.value;
              if (os_log_type_enabled(v109, rhs.value))
                v111 = v110;
              else
                v111 = v110 & 0xFFFFFFFE;
              if (v111)
              {
                if (v201)
                  v112 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                else
                  v112 = "";
                __dst.start = theString;
                v158 = CMTimeGetSeconds(&__dst.start);
                __dst.start = v212;
                v159 = CMTimeGetSeconds(&__dst.start);
                __dst.start.value = v216;
                __dst.start.timescale = DWORD2(v216);
                __dst.start.flags = v82;
                __dst.start.epoch = v81;
                v160 = CMTimeGetSeconds(&__dst.start);
                v161 = *(_DWORD *)(v185 + 552);
                v162 = "logs skipped ";
                *(_DWORD *)time = 136317186;
                if (!v161)
                  v162 = "";
                *(_QWORD *)&time[4] = "videoReceiver_areBuffersSynchronized";
                *(_WORD *)&time[12] = 2048;
                *(_QWORD *)&time[14] = v201;
                *(_WORD *)&time[22] = 2082;
                *(_QWORD *)&time[24] = v112;
                *(_WORD *)v234 = 1024;
                *(_DWORD *)&v234[2] = v87;
                *(_WORD *)&v234[6] = 2048;
                *(Float64 *)&v234[8] = v158;
                *(_WORD *)&v234[16] = 2048;
                *(Float64 *)&v234[18] = v159;
                *(_WORD *)&v234[26] = 2048;
                *(double *)&v234[28] = v160;
                v235 = 2080;
                v236 = v162;
                v237 = 1024;
                v238 = v161;
                _os_log_send_and_compose_impl();
                v45 = v203;
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
              v44 = v206;
            }
            goto LABEL_313;
          }
        }
        else
        {
          if ((v212.flags & 1) == 0)
          {
            LODWORD(buffer.value) = 0;
            LOBYTE(rhs.value) = 0;
            v91 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v92 = buffer.value;
            if (os_log_type_enabled(v91, rhs.value))
              v93 = v92;
            else
              v93 = v92 & 0xFFFFFFFE;
            if (v93)
            {
              if (v201)
                v94 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
              else
                v94 = "";
              __dst.start.value = v216;
              __dst.start.timescale = DWORD2(v216);
              __dst.start.flags = v82;
              __dst.start.epoch = v81;
              v99 = CMTimeGetSeconds(&__dst.start);
              *(_DWORD *)time = 136316162;
              *(_QWORD *)&time[4] = "videoReceiver_areBuffersSynchronized";
              *(_WORD *)&time[12] = 2048;
              *(_QWORD *)&time[14] = v201;
              *(_WORD *)&time[22] = 2082;
              *(_QWORD *)&time[24] = v94;
              *(_WORD *)v234 = 1024;
              *(_DWORD *)&v234[2] = v87;
              *(_WORD *)&v234[6] = 2048;
              *(Float64 *)&v234[8] = v99;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v212 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
            v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
            v44 = v206;
          }
          memset(&__dst, 0, sizeof(__dst));
          *(CMTime *)time = theString;
          buffer = v212;
          CMTimeRangeMake(&__dst, (CMTime *)time, &buffer);
          *(_OWORD *)time = *(_OWORD *)&__dst.start.value;
          *(_OWORD *)&time[16] = *(_OWORD *)&__dst.start.epoch;
          *(_OWORD *)v234 = *(_OWORD *)&__dst.duration.timescale;
          buffer.value = v216;
          buffer.timescale = DWORD2(v216);
          buffer.flags = v82;
          buffer.epoch = v81;
          if (!CMTimeRangeContainsTime((CMTimeRange *)time, &buffer))
            goto LABEL_191;
        }
        ++v87;
      }
      while (v68 != v87);
    }
    a1 = v201;
    v46 = v202;
    if (*(_BYTE *)(v185 + 536) && fvr_isAllowedToLog(v185 + 536, 0) && dword_1EE2A2D38)
    {
      LODWORD(buffer.value) = 0;
      LOBYTE(rhs.value) = 0;
      v104 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v105 = buffer.value;
      if (os_log_type_enabled(v104, rhs.value))
        v106 = v105;
      else
        v106 = v105 & 0xFFFFFFFE;
      if (v106)
      {
        if (v201)
          v107 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
        else
          v107 = "";
        v117 = *(_DWORD *)(v185 + 556);
        *(_DWORD *)time = 136315906;
        *(_QWORD *)&time[4] = "videoReceiver_areBuffersSynchronized";
        *(_WORD *)&time[12] = 2048;
        *(_QWORD *)&time[14] = v201;
        *(_WORD *)&time[22] = 2082;
        *(_QWORD *)&time[24] = v107;
        *(_WORD *)v234 = 1024;
        *(_DWORD *)&v234[2] = v117;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v44 = v206;
    }
  }
  else
  {
    v83 = 0;
    *(_OWORD *)v197 = *MEMORY[0x1E0CA2E18];
    v82 = v193;
    v81 = v204;
    while (1)
    {
      *(_OWORD *)&v212.value = *(_OWORD *)v197;
      v212.epoch = v204;
      FigCFArrayGetCMTimeAtIndex();
      v84 = v212.flags;
      if ((v212.flags & 1) == 0)
        break;
      if ((v82 & 1) != 0)
      {
        v239 = v212.value;
        timescale = v212.timescale;
        v85 = v212.epoch;
        if ((v212.flags & 0x1F) != 3 && (v82 & 0x1F) != 3)
          goto LABEL_387;
        memset(&__dst, 0, 24);
        buffer = v212;
        rhs.value = v216;
        rhs.timescale = DWORD2(v216);
        rhs.flags = v82;
        rhs.epoch = v81;
        CMTimeSubtract((CMTime *)time, &buffer, &rhs);
        CMTimeAbsoluteValue(&__dst.start, (CMTime *)time);
        CMTimeMake(&theString, 1, 1000000000);
        buffer = __dst.start;
        if (CMTimeCompare(&buffer, &theString) > 0)
        {
LABEL_387:
          __dst.start.value = v239;
          __dst.start.timescale = timescale;
          __dst.start.flags = v84;
          __dst.start.epoch = v85;
          buffer.value = v216;
          buffer.timescale = DWORD2(v216);
          buffer.flags = v82;
          buffer.epoch = v81;
          if (CMTimeCompare(&__dst.start, &buffer))
          {
            if (fvr_isAllowedToLog(v185 + 536, 8) && dword_1EE2A2D38)
            {
              LODWORD(buffer.value) = 0;
              LOBYTE(rhs.value) = 0;
              v113 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v114 = buffer.value;
              if (os_log_type_enabled(v113, rhs.value))
                v115 = v114;
              else
                v115 = v114 & 0xFFFFFFFE;
              if (v115)
              {
                if (v201)
                  v116 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                else
                  v116 = "";
                __dst.start = v212;
                v163 = CMTimeGetSeconds(&__dst.start);
                __dst.start.value = v216;
                __dst.start.timescale = DWORD2(v216);
                __dst.start.flags = v82;
                __dst.start.epoch = v81;
                v164 = CMTimeGetSeconds(&__dst.start);
                v165 = *(_DWORD *)(v185 + 552);
                v166 = "logs skipped ";
                *(_DWORD *)time = 136316930;
                *(_QWORD *)&time[4] = "videoReceiver_areBuffersSynchronized";
                if (!v165)
                  v166 = "";
                *(_WORD *)&time[12] = 2048;
                *(_QWORD *)&time[14] = v201;
                *(_WORD *)&time[22] = 2082;
                *(_QWORD *)&time[24] = v116;
                *(_WORD *)v234 = 1024;
                *(_DWORD *)&v234[2] = v83;
                *(_WORD *)&v234[6] = 2048;
                *(Float64 *)&v234[8] = v163;
                *(_WORD *)&v234[16] = 2048;
                *(double *)&v234[18] = v164;
                *(_WORD *)&v234[26] = 2080;
                *(_QWORD *)&v234[28] = v166;
                v235 = 1024;
                LODWORD(v236) = v165;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
              v44 = v206;
            }
            v108 = v186;
            v45 = v203;
LABEL_313:
            v47 = 0;
            v27 = 4294951365;
            v46 = v202;
            if (!fvr_isAllowedToLog(v108 + 496, 7) || !dword_1EE2A2D38)
            {
              v48 = 0;
              v26 = v188;
              goto LABEL_325;
            }
            v167 = v108;
            LODWORD(buffer.value) = 0;
            LOBYTE(rhs.value) = 0;
            v168 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v169 = buffer.value;
            if (os_log_type_enabled(v168, rhs.value))
              v170 = v169;
            else
              v170 = v169 & 0xFFFFFFFE;
            if (v170)
            {
              if (v201)
                v171 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
              else
                v171 = "";
              *(_OWORD *)&__dst.start.value = *v200;
              __dst.start.epoch = *((_QWORD *)v200 + 2);
              v182 = CMTimeGetSeconds(&__dst.start);
              v183 = *(_DWORD *)(v167 + 512);
              v184 = "logs skipped ";
              *(_DWORD *)time = 136316418;
              *(_QWORD *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
              if (!v183)
                v184 = "";
              *(_WORD *)&time[12] = 2048;
              *(_QWORD *)&time[14] = v201;
              *(_WORD *)&time[22] = 2082;
              *(_QWORD *)&time[24] = v171;
              *(_WORD *)v234 = 2048;
              *(double *)&v234[2] = v182;
              *(_WORD *)&v234[10] = 2080;
              *(_QWORD *)&v234[12] = v184;
              *(_WORD *)&v234[20] = 1024;
              *(_DWORD *)&v234[22] = v183;
LABEL_120:
              _os_log_send_and_compose_impl();
              v26 = v188;
              v46 = v202;
LABEL_322:
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v47 = 0;
              v48 = 0;
              goto LABEL_323;
            }
LABEL_321:
            v26 = v188;
            goto LABEL_322;
          }
        }
      }
      else
      {
        *(_QWORD *)&v216 = v212.value;
        DWORD2(v216) = v212.timescale;
        v81 = v212.epoch;
        v82 = v212.flags;
      }
      if (v67 == ++v83)
        goto LABEL_146;
    }
LABEL_375:
    a1 = v201;
    v46 = v202;
  }
  DerivedStorage = v186;
LABEL_213:
  v196 = theArray[1];
  v199 = v210[1];
  rhs.value = v194;
  rhs.timescale = v192;
  cf[0] = 0;
  v118 = CFGetAllocator(a1);
  v119 = CFArrayCreateMutable(v118, 0, MEMORY[0x1E0C9B378]);
  if (!v119)
  {
    v27 = FigSignalErrorAt();
    v48 = 0;
    goto LABEL_274;
  }
  v120 = v119;
  v121 = CFGetAllocator(a1);
  v122 = CFArrayCreateMutable(v121, 0, MEMORY[0x1E0C9B378]);
  if (!v122)
  {
    v27 = FigSignalErrorAt();
    v48 = 0;
    a1 = v201;
    DerivedStorage = v186;
    goto LABEL_272;
  }
  v123 = v122;
  v124 = 0;
  v125 = 0;
  v126 = v193;
  v195 = v204;
  if (!v46)
    goto LABEL_217;
LABEL_216:
  for (i = CFArrayGetCount(v46); ; i = 0)
  {
    if (v125 >= i)
    {
      v142 = 0;
      a1 = v201;
      if (v44)
        goto LABEL_265;
LABEL_266:
      for (j = 0; ; j = CFArrayGetCount(v44))
      {
        if (v142 >= j)
        {
          v147 = CFGetAllocator(v201);
          v27 = MEMORY[0x19402C018](v147, v120, v123, cf);
          if ((_DWORD)v27)
          {
            v48 = 0;
          }
          else
          {
            v48 = cf[0];
            cf[0] = 0;
            v217 = rhs.value;
            v218 = rhs.timescale;
            v204 = v195;
            v193 = v126;
          }
          DerivedStorage = v186;
          v46 = v202;
          goto LABEL_271;
        }
        v143 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v44, v142);
        v144 = CFArrayGetValueAtIndex(v199, v142);
        memset(&__dst, 0, 24);
        CMSampleBufferGetPresentationTimeStamp(&__dst.start, v143);
        if (!v124)
        {
          v145 = __dst.start.flags;
          if ((__dst.start.flags & 0x1D) == 1)
          {
            if ((v126 & 1) != 0)
            {
              *(_OWORD *)time = *(_OWORD *)&__dst.start.value;
              *(_QWORD *)&time[16] = __dst.start.epoch;
              buffer.value = rhs.value;
              buffer.timescale = rhs.timescale;
              buffer.flags = v126;
              buffer.epoch = v195;
              if ((CMTimeCompare((CMTime *)time, &buffer) & 0x80000000) == 0)
                goto LABEL_264;
              v145 = __dst.start.flags;
            }
            rhs.value = __dst.start.value;
            rhs.timescale = __dst.start.timescale;
            v195 = __dst.start.epoch;
            v126 = v145;
          }
        }
LABEL_264:
        CFArrayAppendValue(v123, v143);
        CFArrayAppendValue(v120, v144);
        ++v142;
        v44 = v206;
        if (!v206)
          goto LABEL_266;
LABEL_265:
        ;
      }
    }
    *(_OWORD *)&buffer.value = *MEMORY[0x1E0CA2E18];
    buffer.epoch = v204;
    FigCFArrayGetCMTimeAtIndex();
    if ((buffer.flags & 0x1D) != 1)
      goto LABEL_223;
    if ((v126 & 1) == 0)
      goto LABEL_221;
    __dst.start = buffer;
    *(_QWORD *)time = rhs.value;
    *(_DWORD *)&time[8] = rhs.timescale;
    *(_DWORD *)&time[12] = v126;
    *(_QWORD *)&time[16] = v195;
    if (CMTimeCompare(&__dst.start, (CMTime *)time) < 0)
    {
      if (dword_1EE2A2D38 >= 3)
      {
        LODWORD(theString.value) = 0;
        LOBYTE(v212.value) = 0;
        v136 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v137 = theString.value;
        if (os_log_type_enabled(v136, v212.value))
          v138 = v137;
        else
          v138 = v137 & 0xFFFFFFFE;
        if (v138)
        {
          if (v201)
            v139 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
          else
            v139 = "";
          __dst.start.value = rhs.value;
          __dst.start.timescale = rhs.timescale;
          __dst.start.flags = v126;
          __dst.start.epoch = v195;
          v140 = CMTimeGetSeconds(&__dst.start);
          __dst.start = buffer;
          v141 = CMTimeGetSeconds(&__dst.start);
          *(_DWORD *)time = 136316162;
          *(_QWORD *)&time[4] = "videoReceiver_createTaggedBufferGroupFromSamplingSourceForTime";
          *(_WORD *)&time[12] = 2048;
          *(_QWORD *)&time[14] = v201;
          *(_WORD *)&time[22] = 2082;
          *(_QWORD *)&time[24] = v139;
          *(_WORD *)v234 = 2048;
          *(Float64 *)&v234[2] = v140;
          *(_WORD *)&v234[10] = 2048;
          *(Float64 *)&v234[12] = v141;
          _os_log_send_and_compose_impl();
          v46 = v202;
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_221:
      rhs.value = buffer.value;
      v126 = buffer.flags;
      rhs.timescale = buffer.timescale;
      v124 = 1;
      v195 = buffer.epoch;
    }
LABEL_223:
    v128 = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(v196, v125);
    v129 = CFArrayGetValueAtIndex(v46, v125);
    *(_QWORD *)time = 0;
    *(_QWORD *)&time[8] = time;
    *(_QWORD *)&time[16] = 0x2000000000;
    *(_QWORD *)&time[24] = 0;
    theString.value = 0;
    v212.value = 0;
    v130 = CMBaseObjectGetDerivedStorage();
    if (!v129)
    {
      v27 = FigSignalErrorAt();
LABEL_254:
      v46 = v202;
      goto LABEL_230;
    }
    v131 = v130;
    v132 = vr_createModifiedDataChannelTagCollectionWithDefaultTags(v128, &v212);
    if ((_DWORD)v132)
    {
      v27 = v132;
      v129 = 0;
      goto LABEL_254;
    }
    v133 = *(NSObject **)(v131 + 152);
    __dst.start.value = MEMORY[0x1E0C809B0];
    *(_QWORD *)&__dst.start.timescale = 0x40000000;
    __dst.start.epoch = (CMTimeEpoch)__videoReceiver_createConformedPixelBufferWithClientSpecifiedAttributes_block_invoke;
    __dst.duration.value = (CMTimeValue)&unk_1E2F8AA50;
    __dst.duration.epoch = v131;
    *(_QWORD *)&v220 = v212.value;
    *(_QWORD *)&__dst.duration.timescale = time;
    dispatch_sync(v133, &__dst);
    if (!*(_QWORD *)(*(_QWORD *)&time[8] + 24))
    {
      v129 = CFRetain(v129);
      v46 = v202;
      goto LABEL_229;
    }
    v134 = VTPixelBufferConformerCopyConformedPixelBuffer();
    v46 = v202;
    if (!(_DWORD)v134)
    {
      v129 = (const void *)theString.value;
LABEL_229:
      v27 = 0;
      theString.value = 0;
      goto LABEL_230;
    }
    v27 = v134;
    v129 = 0;
LABEL_230:
    v135 = *(const void **)(*(_QWORD *)&time[8] + 24);
    if (v135)
      CFRelease(v135);
    if (v212.value)
      CFRelease((CFTypeRef)v212.value);
    if (theString.value)
      CFRelease((CFTypeRef)theString.value);
    _Block_object_dispose(time, 8);
    if ((_DWORD)v27)
      break;
    CFArrayAppendValue(v123, v129);
    CFArrayAppendValue(v120, v128);
    if (v129)
      CFRelease(v129);
    ++v125;
    v44 = v206;
    if (v46)
      goto LABEL_216;
LABEL_217:
    ;
  }
  if (v129)
    CFRelease(v129);
  v48 = 0;
  a1 = v201;
  DerivedStorage = v186;
  v44 = v206;
LABEL_271:
  CFRelease(v123);
LABEL_272:
  CFRelease(v120);
  if (cf[0])
    CFRelease(cf[0]);
LABEL_274:
  v16 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if ((_DWORD)v27)
  {
    v47 = 0;
LABEL_382:
    v26 = v188;
    goto LABEL_324;
  }
  if (!a7)
    goto LABEL_281;
  *(_QWORD *)&v223 = v217;
  DWORD2(v223) = v218;
  *(_QWORD *)time = 0;
  *(_QWORD *)&time[8] = time;
  *(_QWORD *)&time[16] = 0x2000000000;
  *(_DWORD *)&time[24] = 0;
  buffer.value = 0;
  *(_QWORD *)&buffer.timescale = &buffer;
  buffer.epoch = 0x2000000000;
  v244 = 0;
  rhs.value = 0;
  *(_QWORD *)&rhs.timescale = &rhs;
  rhs.epoch = 0x2000000000;
  v242 = 0;
  v148 = CMBaseObjectGetDerivedStorage();
  v149 = *(NSObject **)(v148 + 152);
  __dst.start.value = MEMORY[0x1E0C809B0];
  *(_QWORD *)&__dst.start.timescale = 0x40000000;
  __dst.start.epoch = (CMTimeEpoch)__videoReceiver_createUpdatedSamplingEventIdentifierForPresentationTime_block_invoke;
  __dst.duration.value = (CMTimeValue)&unk_1E2F8AA78;
  HIDWORD(v223) = v193;
  v224 = v204;
  *(_QWORD *)&__dst.duration.timescale = &rhs;
  __dst.duration.epoch = (CMTimeEpoch)&buffer;
  *(_QWORD *)&v220 = time;
  *((_QWORD *)&v220 + 1) = v148;
  p_theString = a1;
  v222 = (CFIndex)v188;
  dispatch_sync(v149, &__dst);
  v47 = *(const void **)(*(_QWORD *)&buffer.timescale + 24);
  *(_QWORD *)(*(_QWORD *)&buffer.timescale + 24) = 0;
  v150 = *(const void **)(*(_QWORD *)&rhs.timescale + 24);
  if (v150)
  {
    CFRelease(v150);
    v151 = *(const void **)(*(_QWORD *)&buffer.timescale + 24);
    if (v151)
      CFRelease(v151);
  }
  v27 = *(unsigned int *)(*(_QWORD *)&time[8] + 24);
  _Block_object_dispose(&rhs, 8);
  _Block_object_dispose(&buffer, 8);
  _Block_object_dispose(time, 8);
  if ((_DWORD)v27)
    goto LABEL_382;
  *a7 = v47;
LABEL_281:
  if (v189)
  {
    *v189 = v48;
    v48 = 0;
  }
  v26 = v188;
  if (v190)
  {
    *(_QWORD *)v190 = v217;
    *(_DWORD *)(v190 + 8) = v218;
    *(_DWORD *)(v190 + 12) = v193;
    *(_QWORD *)(v190 + 16) = v204;
  }
  if (v187)
  {
    *v187 = v210[2];
    v210[2] = 0;
  }
  if (*(_BYTE *)(DerivedStorage + 496))
  {
    v27 = 0;
    v47 = 0;
    if (fvr_isAllowedToLog(DerivedStorage + 496, 0) && dword_1EE2A2D38)
    {
      LODWORD(buffer.value) = 0;
      LOBYTE(rhs.value) = 0;
      v152 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v153 = buffer.value;
      if (os_log_type_enabled(v152, rhs.value))
        v154 = v153;
      else
        v154 = v153 & 0xFFFFFFFE;
      if (v154)
      {
        if (a1)
          v155 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
        else
          v155 = "";
        *(_OWORD *)&__dst.start.value = *v200;
        __dst.start.epoch = *((_QWORD *)v200 + 2);
        v156 = CMTimeGetSeconds(&__dst.start);
        v157 = *(_DWORD *)(DerivedStorage + 516);
        *(_DWORD *)time = 136316162;
        *(_QWORD *)&time[4] = "videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForHostTimeInternal";
        *(_WORD *)&time[12] = 2048;
        *(_QWORD *)&time[14] = a1;
        *(_WORD *)&time[22] = 2082;
        *(_QWORD *)&time[24] = v155;
        *(_WORD *)v234 = 2048;
        *(Float64 *)&v234[2] = v156;
        *(_WORD *)&v234[10] = 1024;
        *(_DWORD *)&v234[12] = v157;
        _os_log_send_and_compose_impl();
        v26 = v188;
        v46 = v202;
      }
      else
      {
        v26 = v188;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v47 = 0;
      v27 = 0;
LABEL_323:
      v44 = v206;
    }
  }
  else
  {
    v47 = 0;
    v27 = 0;
  }
LABEL_324:
  v45 = v203;
LABEL_325:
  v172 = CMBaseObjectGetDerivedStorage();
  buffer.value = 0;
  rhs.value = 0;
  if (!(_DWORD)v27)
  {
    v173 = v172;
    v174 = *(_QWORD *)(v172 + 88);
    if (v174)
    {
      FigDataChannelConfigurationCopyPlayerLoggingIdentifier(v174, (CFStringRef *)&buffer);
      FigDataChannelConfigurationCopyLoggingIdentifier(*(_QWORD *)(v173 + 88), (CFStringRef *)&rhs);
    }
    if (*v16 == 1)
    {
      v175 = (const __CFString *)rhs.value;
      *(_QWORD *)time = 0;
      if (rhs.value)
      {
        if (CFStringGetLength((CFStringRef)rhs.value) <= 8)
          v176.length = CFStringGetLength(v175);
        else
          v176.length = 8;
        v176.location = 0;
        CFStringGetBytes(v175, v176, 0, 0x3Fu, 0, time, 8, 0);
      }
      v177 = v45;
      v178 = v26;
      strncpy((char *)&__dst, time, 8uLL);
      v179 = (const __CFString *)buffer.value;
      *(_QWORD *)time = 0;
      if (buffer.value)
      {
        if (CFStringGetLength((CFStringRef)buffer.value) <= 8)
          v180.length = CFStringGetLength(v179);
        else
          v180.length = 8;
        v180.location = 0;
        CFStringGetBytes(v179, v180, 0, 0x3Fu, 0, time, 8, 0);
      }
      strncpy((char *)&__dst, time, 8uLL);
      __dst.start.value = v217;
      __dst.start.timescale = v218;
      __dst.start.flags = v193;
      __dst.start.epoch = v204;
      CMTimeGetSeconds(&__dst.start);
      kdebug_trace();
      v26 = v178;
      v45 = v177;
    }
    if (buffer.value)
      CFRelease((CFTypeRef)buffer.value);
    if (rhs.value)
      CFRelease((CFTypeRef)rhs.value);
  }
  if (theArray[0])
    CFRelease(theArray[0]);
  if (theArray[1])
    CFRelease(theArray[1]);
  if (v210[0])
    CFRelease(v210[0]);
  if (v210[1])
    CFRelease(v210[1]);
  if (v210[2])
    CFRelease(v210[2]);
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
  if (v44)
    CFRelease(v44);
  if (v26)
    CFRelease(v26);
  if (v48)
    CFRelease(v48);
  if (v47)
    CFRelease(v47);
  return v27;
}

uint64_t fvr_isAllowedToLog(uint64_t a1, int a2)
{
  uint64_t UpTimeNanoseconds;
  unsigned int v5;
  int v7;

  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(_DWORD *)(a1 + 4) == a2 && *(_BYTE *)a1)
  {
    v5 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 16) = v5;
    if (!a2 || v5 > *(_DWORD *)(a1 + 32) && UpTimeNanoseconds < *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 8))
      return 0;
    *(_QWORD *)(a1 + 8) = UpTimeNanoseconds;
  }
  else
  {
    *(_DWORD *)(a1 + 4) = a2;
    *(_QWORD *)(a1 + 8) = UpTimeNanoseconds;
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = v7;
  }
  return 1;
}

void __videoReceiver_copyTaggedBufferGroupDependentResourcesAndSamplingEventIdentifierForTimeIfAvailableOtherwiseLastReturnedSample_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;

  if (!*(_BYTE *)(a1 + 80))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(_OWORD *)(a1 + 56);
    *(_QWORD *)(v2 + 376) = *(_QWORD *)(a1 + 72);
    *(_OWORD *)(v2 + 360) = v3;
    v5 = *(_QWORD *)(a1 + 32);
    v4 = *(const void **)(a1 + 40);
    v6 = *(const void **)(v5 + 384);
    *(_QWORD *)(v5 + 384) = v4;
    if (v4)
      CFRetain(v4);
    if (v6)
      CFRelease(v6);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(const void **)(v7 + 392);
    v9 = *(const void **)(a1 + 48);
    *(_QWORD *)(v7 + 392) = v9;
    if (v9)
      CFRetain(v9);
    if (v8)
      CFRelease(v8);
  }
}

__n128 __videoReceiver_updateActiveConfigurationForHostTimeIfNecessary_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __n128 result;
  uint64_t v4;
  __int128 v5;
  CMTime v6;
  CMTime time1;

  v2 = *(_QWORD *)(a1 + 32);
  time1 = *(CMTime *)(a1 + 48);
  v6 = *(CMTime *)(v2 + 124);
  if ((CMTimeCompare(&time1, &v6) & 0x80000000) == 0)
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(v4 + 96) = 1;
    v5 = *(_OWORD *)(a1 + 48);
    *(_QWORD *)(v4 + 116) = *(_QWORD *)(a1 + 64);
    *(_OWORD *)(v4 + 100) = v5;
    videoReceiver_activateReceiverConfiguration2(*(_QWORD *)(a1 + 40));
  }
  return result;
}

void __videoReceiver_copyBuffersFromSamplingSourceForHostTime_block_invoke(uint64_t a1)
{
  CMTimeFlags flags;
  CMTimeEpoch v3;
  uint64_t v4;
  CFIndex v5;
  CMTime *v6;
  CMTimeEpoch epoch;
  const void *v8;
  int v9;
  const void *v10;
  int v11;
  NSObject *v12;
  const __CFArray *Count;
  const __CFArray *v14;
  const __CFArray *v15;
  __CFDictionary *Mutable;
  __CFDictionary *v17;
  const void **v18;
  uint64_t v19;
  CFIndex v20;
  _OWORD *v21;
  CMTimeFlags v22;
  const void *ValueAtIndex;
  uint64_t (*v25)(const void *, CMTime *, __CFDictionary *, CFTypeRef *);
  int v26;
  uint64_t (*v27)(const void *, CMTime *, __CFDictionary *, CFTypeRef *);
  int v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  Float64 Seconds;
  int v40;
  Float64 v41;
  int v42;
  const __CFArray *v43;
  int v44;
  CMTime *v45;
  CMTimeEpoch v46;
  __int128 v47;
  __CFDictionary *v48;
  CMTime v49;
  CFTypeRef v50;
  CFTypeRef cf;
  void *value;
  CMTime time2;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  Float64 v58;
  __int16 v59;
  int v60;
  CMTime time;
  CMTimeValue v62;
  CMTimeScale timescale;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  cf = 0;
  value = 0;
  v50 = 0;
  v62 = *MEMORY[0x1E0CA2E18];
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4 < 1)
  {
LABEL_15:
    Count = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (Count)
    {
      Count = (const __CFArray *)CFArrayGetCount(Count);
      v4 = *(_QWORD *)(a1 + 72);
    }
    if (Count != (const __CFArray *)v4)
      goto LABEL_81;
    v14 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (v14)
      v14 = (const __CFArray *)CFArrayGetCount(v14);
    if ((const __CFArray *)v4 != v14)
      goto LABEL_81;
    v15 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    if (v15)
      v15 = (const __CFArray *)CFArrayGetCount(v15);
    if ((const __CFArray *)v4 == v15)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v17 = Mutable;
      if (Mutable)
      {
        v46 = v3;
        v18 = (const void **)MEMORY[0x1E0C9AE50];
        if (*(_BYTE *)(a1 + 168))
          CFDictionarySetValue(Mutable, CFSTR("SamplingOptionDoNotConsume"), (const void *)*MEMORY[0x1E0C9AE50]);
        if (*(_BYTE *)(a1 + 170))
          CFDictionarySetValue(v17, CFSTR("SamplingOptionSampleUsingMediaTime"), *v18);
        v19 = *(_QWORD *)(a1 + 136);
        if (v19 >= 1)
        {
          v20 = 0;
          v21 = (_OWORD *)(a1 + 144);
          v22 = flags;
          v48 = v17;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 96), v20);
            if (!*(_BYTE *)(a1 + 170) || (flags & 1) == 0)
            {
              *(_OWORD *)&time2.value = *v21;
              time2.epoch = *(_QWORD *)(a1 + 160);
              v25 = *(uint64_t (**)(const void *, CMTime *, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v25)
              {
                time = time2;
                v26 = v25(ValueAtIndex, &time, v17, &v50);
              }
              else
              {
                v26 = -12782;
              }
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v26;
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
              {
                LODWORD(v49.value) = 0;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v30 = v49.value;
                if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
                  v31 = v30;
                else
                  v31 = v30 & 0xFFFFFFFE;
                if (v31)
                {
                  v32 = *(_QWORD *)(a1 + 120);
                  if (v32)
                    v33 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                  else
                    v33 = "";
                  *(_OWORD *)&time.value = *v21;
                  time.epoch = *(_QWORD *)(a1 + 160);
                  Seconds = CMTimeGetSeconds(&time);
                  v40 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
                  LODWORD(time2.value) = 136316418;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"videoReceiver_copyBuffersFromSamplingSourceF"
                                                                            "orHostTime_block_invoke";
                  LOWORD(time2.flags) = 2048;
                  *(_QWORD *)((char *)&time2.flags + 2) = v32;
                  HIWORD(time2.epoch) = 2082;
                  v54 = v33;
                  v55 = 1024;
                  v56 = v20;
                  v57 = 2048;
                  v58 = Seconds;
                  v59 = 1024;
                  v60 = v40;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                flags = v22;
                v17 = v48;
              }
            }
            else
            {
              v27 = *(uint64_t (**)(const void *, CMTime *, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v27)
              {
                time.value = v62;
                time.timescale = timescale;
                time.flags = flags;
                time.epoch = v46;
                v28 = v27(ValueAtIndex, &time, v17, &v50);
              }
              else
              {
                v28 = -12782;
              }
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v28;
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
              {
                LODWORD(v49.value) = 0;
                v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v35 = v49.value;
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                  v36 = v35;
                else
                  v36 = v35 & 0xFFFFFFFE;
                if (v36)
                {
                  v37 = *(_QWORD *)(a1 + 120);
                  if (v37)
                    v38 = (const char *)(CMBaseObjectGetDerivedStorage() + 236);
                  else
                    v38 = "";
                  time.value = v62;
                  time.timescale = timescale;
                  time.flags = v22;
                  time.epoch = v46;
                  v41 = CMTimeGetSeconds(&time);
                  v42 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
                  LODWORD(time2.value) = 136316418;
                  *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"videoReceiver_copyBuffersFromSamplingSourceF"
                                                                            "orHostTime_block_invoke";
                  LOWORD(time2.flags) = 2048;
                  *(_QWORD *)((char *)&time2.flags + 2) = v37;
                  HIWORD(time2.epoch) = 2082;
                  v54 = v38;
                  v55 = 1024;
                  v56 = v20;
                  v57 = 2048;
                  v58 = v41;
                  v59 = 1024;
                  v60 = v42;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                flags = v22;
                v17 = v48;
                if (*(_BYTE *)(a1 + 169))
                  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -15931;
              }
            }
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
              goto LABEL_70;
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), v50);
            ++v20;
            v19 = *(_QWORD *)(a1 + 136);
          }
          while (v20 < v19);
        }
        v43 = *(const __CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
        if (v43)
        {
          v43 = (const __CFArray *)CFArrayGetCount(v43);
          v19 = *(_QWORD *)(a1 + 136);
        }
        if (v43 == (const __CFArray *)v19)
          goto LABEL_70;
      }
      v44 = FigSignalErrorAt();
    }
    else
    {
LABEL_81:
      v44 = FigSignalErrorAt();
      v17 = 0;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v44;
    goto LABEL_70;
  }
  v5 = 0;
  v6 = (CMTime *)(a1 + 144);
  v47 = *MEMORY[0x1E0CA2E18];
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v45 = (CMTime *)(a1 + 144);
  while (1)
  {
    *(_OWORD *)&v49.value = v47;
    v49.epoch = v3;
    v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v5);
    v9 = *(unsigned __int8 *)(a1 + 168);
    v10 = *(const void **)(a1 + 120);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 128) + 40);
    time = *v6;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = videoReceiver_copyPixelBufferFromImageQueueReceiverSamplingAtTime(v10, v8, (uint64_t)&time, v9, v11, (CVPixelBufferRef *)&value, &v49, (uint64_t *)&cf);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
    if ((v49.flags & 1) == 0)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
      break;
    }
    if (dword_1EE2A2D38 >= 7)
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = v45;
    }
    time = v49;
    time2.value = v62;
    time2.timescale = timescale;
    time2.flags = flags;
    time2.epoch = epoch;
    if (CMTimeCompare(&time, &time2) < 0)
    {
      v62 = v49.value;
      flags = v49.flags;
      timescale = v49.timescale;
      epoch = v49.epoch;
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), value);
    CFArrayAppendValue(*(CFMutableArrayRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), cf);
    time = v49;
    FigCFArrayAppendCMTime();
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    ++v5;
    v4 = *(_QWORD *)(a1 + 72);
    if (v5 >= v4)
    {
      v3 = epoch;
      goto LABEL_15;
    }
  }
  v17 = 0;
LABEL_70:
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  if (v50)
    CFRelease(v50);
  if (v17)
    CFRelease(v17);
}

const __CFArray *__videoReceiver_createConformedPixelBufferWithClientSpecifiedAttributes_block_invoke(uint64_t a1)
{
  CFIndex i;
  const __CFArray *result;
  const OpaqueCMTagCollection *ValueAtIndex;

  for (i = 0; ; ++i)
  {
    result = *(const __CFArray **)(*(_QWORD *)(a1 + 40) + 440);
    if (result)
      result = (const __CFArray *)CFArrayGetCount(result);
    if (i >= (uint64_t)result)
      break;
    ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 40) + 440), i);
    if (CMTagCollectionContainsTagsOfCollection(*(CMTagCollectionRef *)(a1 + 48), ValueAtIndex))
    {
      result = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 40) + 448), i);
      if (result)
        result = (const __CFArray *)CFRetain(result);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
      return result;
    }
  }
  return result;
}

uint64_t __videoReceiver_createUpdatedSamplingEventIdentifierForPresentationTime_block_invoke(uint64_t a1)
{
  CMTime *v2;
  uint64_t result;
  CFAllocatorRef v4;
  const void *v5;
  uint64_t *v6;
  const void *v7;
  CMTime v8;
  CMTime time1;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = FigCFWeakReferenceHolderCopyReferencedObject();
  v2 = *(CMTime **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2 && (time1 = v2[1], v8 = *(CMTime *)(a1 + 80), result = CMTimeCompare(&time1, &v8), !(_DWORD)result))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)
                                                                            + 24);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
  else
  {
    v4 = CFGetAllocator(*(CFTypeRef *)(a1 + 64));
    v5 = *(const void **)(a1 + 72);
    v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    time1 = *(CMTime *)(a1 + 80);
    result = samplingEventIdentifier_create((uint64_t)v4, (__int128 *)&time1.value, v5, v6);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      v7 = *(const void **)(*(_QWORD *)(a1 + 56) + 352);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 352) = 0;
      }
      result = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 352) = result;
    }
  }
  return result;
}

uint64_t samplingEventIdentifier_create(uint64_t a1, __int128 *a2, const void *a3, uint64_t *a4)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t Instance;
  uint64_t v9;
  __int128 v10;
  CFTypeRef v11;
  CFIndex v12;
  CFIndex i;
  uint64_t result;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A2D38 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a4)
    return FigSignalErrorAt();
  if (FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce != -1)
    dispatch_once(&FigSamplingEventIdentifierGetTypeID_sRegisterSamplingEventIdentifierTypeOnce, &__block_literal_global_18);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v9 = Instance;
  v10 = *a2;
  *(_QWORD *)(Instance + 40) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(Instance + 24) = v10;
  if (a3)
    v11 = CFRetain(a3);
  else
    v11 = 0;
  v12 = 0;
  *(_QWORD *)(v9 + 16) = v11;
  if (!a3)
    goto LABEL_12;
LABEL_11:
  for (i = CFArrayGetCount((CFArrayRef)a3); v12 < i; i = 0)
  {
    *((_BYTE *)CFArrayGetValueAtIndex((CFArrayRef)a3, v12++) + 26) = 1;
    if (a3)
      goto LABEL_11;
LABEL_12:
    ;
  }
  result = 0;
  *a4 = v9;
  return result;
}

_QWORD *__videoReceiver_copyCachedTaggedBufferGroupAndRelatedObjectsIfAvailable_block_invoke(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  CFTypeRef v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  CFAllocatorRef v7;
  uint64_t v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;

  v1 = result[9];
  if ((*(_BYTE *)(v1 + 372) & 1) != 0 && *(_QWORD *)(v1 + 384))
  {
    v2 = result;
    *(_BYTE *)(*(_QWORD *)(result[4] + 8) + 24) = 1;
    v3 = *(CFTypeRef *)(result[9] + 384);
    if (v3)
      v3 = CFRetain(v3);
    *(_QWORD *)(*(_QWORD *)(v2[5] + 8) + 24) = v3;
    v4 = *(_QWORD *)(v2[6] + 8);
    v5 = v2[9];
    v6 = *(_OWORD *)(v5 + 360);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v5 + 376);
    *(_OWORD *)(v4 + 24) = v6;
    result = *(_QWORD **)(v2[9] + 392);
    if (result)
      result = CFRetain(result);
    *(_QWORD *)(*(_QWORD *)(v2[7] + 8) + 24) = result;
    if (v2[10])
    {
      result = (_QWORD *)FigCFWeakReferenceHolderCopyReferencedObject();
      *(_QWORD *)(*(_QWORD *)(v2[8] + 8) + 24) = result;
      if (!*(_QWORD *)(*(_QWORD *)(v2[8] + 8) + 24))
      {
        v7 = CFGetAllocator((CFTypeRef)v2[11]);
        v8 = *(_QWORD *)(v2[6] + 8);
        v9 = (uint64_t *)(*(_QWORD *)(v2[8] + 8) + 24);
        v10 = *(_OWORD *)(v8 + 24);
        v11 = *(_QWORD *)(v8 + 40);
        return (_QWORD *)samplingEventIdentifier_create((uint64_t)v7, &v10, 0, v9);
      }
    }
  }
  return result;
}

void __videoReceiver_createDataChannelResource_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  const void *v5;
  const void *v6;

  v2 = (_QWORD *)a1[4];
  v3 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v2[34];
  if (v3)
  {
    v3(a1[5], a1[6], v2[35], 0);
    v2 = (_QWORD *)a1[4];
  }
  v4 = v2[50];
  if (v4)
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v4 + 16))(v4, a1[5], a1[6], 0);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
}

void __videoReceiver_announceDataChannelResourceRemoval_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  void (*v3)(_QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v4;
  const void *v5;
  const void *v6;

  v2 = (_QWORD *)a1[4];
  v3 = (void (*)(_QWORD, _QWORD, _QWORD, uint64_t))v2[34];
  if (v3)
  {
    v3(a1[5], a1[6], v2[35], 1);
    v2 = (_QWORD *)a1[4];
  }
  v4 = v2[50];
  if (v4)
    (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v4 + 16))(v4, a1[5], a1[6], 1);
  v5 = (const void *)a1[5];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[6];
  if (v6)
    CFRelease(v6);
}

_QWORD *__videoReceiver_setPrepareDataChannelsWithDependentResourcesCallback_block_invoke(_QWORD *result)
{
  *(_QWORD *)(result[4] + 248) = result[5];
  *(_QWORD *)(result[4] + 256) = result[6];
  return result;
}

_QWORD *__videoReceiver_setResourceLifeCycleCallback_block_invoke(_QWORD *result)
{
  *(_QWORD *)(result[4] + 272) = result[5];
  *(_QWORD *)(result[4] + 280) = result[6];
  return result;
}

_QWORD *__videoReceiver_setResourceLifeCycleHandler_block_invoke(_QWORD *result)
{
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 40) = *(_QWORD *)(result[6] + 400);
  *(_QWORD *)(result[6] + 400) = result[4];
  return result;
}

_QWORD *__videoReceiver_setPrepareDataChannelsWithDependentResourcesHandler_block_invoke(_QWORD *result)
{
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 40) = *(_QWORD *)(result[6] + 408);
  *(_QWORD *)(result[6] + 408) = result[4];
  return result;
}

void __videoReceiver_activateReceiverConfiguration_block_invoke(uint64_t a1)
{
  videoReceiver_activateReceiverConfiguration2(*(_QWORD *)(a1 + 32));
}

uint64_t FigSampleBufferProcessorCreateForMonochrome(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;

  if (!a2)
    return FigSignalErrorAt();
  FigSampleBufferProcessorGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
    *a2 = 0;
  return v3;
}

uint64_t sbp_monochrome_invalidate()
{
  *(_QWORD *)CMBaseObjectGetDerivedStorage() = 0;
  return 0;
}

_QWORD *sbp_monochrome_finalize()
{
  _QWORD *result;

  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *result = 0;
  return result;
}

__CFString *sbp_monochrome_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_Monochrome %p>"), a1);
  return Mutable;
}

uint64_t sbp_monochrome_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = a2;
  DerivedStorage[1] = a3;
  return 0;
}

uint64_t sbp_monochrome_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  __CVBuffer *ImageBuffer;
  __CVBuffer *v5;
  uint64_t v6;
  size_t BytesPerRowOfPlane;
  void *BaseAddressOfPlane;
  size_t WidthOfPlane;
  size_t HeightOfPlane;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  if (ImageBuffer
    && (v5 = ImageBuffer, CVPixelBufferGetPixelFormatType(ImageBuffer) == 875704438)
    && !CVPixelBufferLockBaseAddress(v5, 0))
  {
    BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v5, 1uLL);
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v5, 1uLL);
    WidthOfPlane = CVPixelBufferGetWidthOfPlane(v5, 1uLL);
    HeightOfPlane = CVPixelBufferGetHeightOfPlane(v5, 1uLL);
    if (WidthOfPlane == BytesPerRowOfPlane >> 1)
    {
      memset(BaseAddressOfPlane, 136, 2 * WidthOfPlane * HeightOfPlane);
      v6 = 0;
    }
    else
    {
      v6 = FigSignalErrorAt();
    }
    CVPixelBufferUnlockBaseAddress(v5, 0);
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  if (*(_QWORD *)DerivedStorage)
    (*(void (**)(_QWORD, uint64_t, opaqueCMSampleBuffer *))DerivedStorage)(*(_QWORD *)(DerivedStorage + 8), v6, a2);
  return v6;
}

uint64_t sbp_monochrome_finishPendingProcessing()
{
  return 0;
}

uint64_t FigVirtualFramebufferGetRemoteFramebufs(void *__dst, uint64_t a2)
{
  uint64_t v3;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigVirtualFramebufferGetRemoteFramebufs_block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  block[4] = a2;
  if (FigVirtualFramebufferGetRemoteFramebufs_once != -1)
    dispatch_once(&FigVirtualFramebufferGetRemoteFramebufs_once, block);
  v3 = FigVirtualFramebufferGetRemoteFramebufs_framebufCount;
  if (FigVirtualFramebufferGetRemoteFramebufs_framebufCount)
    memcpy(__dst, (const void *)FigVirtualFramebufferGetRemoteFramebufs_framebufs, 8 * FigVirtualFramebufferGetRemoteFramebufs_framebufCount);
  return v3;
}

uint64_t vfbremote_hotplugSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_QWORD *)(DerivedStorage + 80))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(DerivedStorage + 80) = a2;
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
}

uint64_t vfbremote_hotplugSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_QWORD *)(DerivedStorage + 80) != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(DerivedStorage + 80) = 0;
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
}

uint64_t vfbremote_hotplugSourcePerform()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  v1 = *(_QWORD *)(DerivedStorage + 104);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(DerivedStorage + 96);
  v2 = *(unsigned __int8 *)(DerivedStorage + 112);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  *(_DWORD *)(DerivedStorage + 64) = -1;
  if (!v2)
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 40));
  result = MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  if (v4)
    return v4(v2, v1);
  return result;
}

uint64_t vfbremote_vsyncSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_QWORD *)(DerivedStorage + 128))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(DerivedStorage + 128) = a2;
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 120));
}

uint64_t vfbremote_vsyncSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 120));
  if (*(_QWORD *)(DerivedStorage + 128) != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(DerivedStorage + 128) = 0;
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 120));
}

uint64_t vfbremote_vsyncSourcePerform()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[15]);
  v1 = DerivedStorage[19];
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))DerivedStorage[18];
  v2 = DerivedStorage[20];
  v3 = DerivedStorage[21];
  v4 = DerivedStorage[22];
  result = MEMORY[0x19402EF04](DerivedStorage[15]);
  if (v6)
    return v6(v2, v3, v4, v1);
  return result;
}

uint64_t vfbremote_hdcpSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 192));
  if (*(_QWORD *)(DerivedStorage + 200))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(DerivedStorage + 200) = a2;
  return MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 192));
}

uint64_t vfbremote_hdcpSourceCancel(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[24]);
  if (DerivedStorage[25] != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[25] = 0;
  DerivedStorage[27] = 0;
  DerivedStorage[28] = 0;
  return MEMORY[0x19402EF04](DerivedStorage[24]);
}

uint64_t vfbremote_hdcpSourcePerform()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int v2;
  uint64_t result;
  uint64_t (*v4)(uint64_t, BOOL);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 192));
  v1 = *(_QWORD *)(DerivedStorage + 224);
  v4 = *(uint64_t (**)(uint64_t, BOOL))(DerivedStorage + 216);
  v2 = *(unsigned __int8 *)(DerivedStorage + 232);
  *(_QWORD *)(DerivedStorage + 216) = 0;
  *(_QWORD *)(DerivedStorage + 224) = 0;
  result = MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 192));
  if (v4)
    return v4(v1, v2 != 0);
  return result;
}

void __vfbremote_create_block_invoke(uint64_t a1)
{
  vfbremote_connect(*(_QWORD *)(a1 + 32));
}

void vfbremote_connect(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  unint64_t v4;
  uint64_t uint64;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  int v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[5];
  os_log_type_t type;
  int v20;
  CFTypeRef cf;
  xpc_object_t v22;
  xpc_object_t xdict;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  xdict = 0;
  cf = 0;
  if (!*(_QWORD *)(DerivedStorage + 8))
  {
    if (vfbremote_getRemoteClient_once != -1)
      dispatch_once(&vfbremote_getRemoteClient_once, &__block_literal_global_19);
    v3 = vfbremote_getRemoteClient_client;
    *(_QWORD *)(DerivedStorage + 8) = vfbremote_getRemoteClient_client;
    if (!v3)
    {
      v20 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_20:
      v12 = 0;
      goto LABEL_22;
    }
  }
  do
    v4 = __ldaxr((unint64_t *)DerivedStorage);
  while (__stlxr(0, (unint64_t *)DerivedStorage));
  if (v4)
    FigXPCRemoteClientDisassociateObject();
  if (FigXPCCreateBasicMessage()
    || (xpc_dictionary_set_uint64(xdict, "InFramebufID", *(int *)(DerivedStorage + 24)),
        FigXPCRemoteClientSendSyncMessageCreatingReply())
    || (uint64 = xpc_dictionary_get_uint64(v22, (const char *)*MEMORY[0x1E0CA36A0])) == 0)
  {
    v20 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    v12 = -536870199;
  }
  else
  {
    v6 = uint64;
    FigXPCRemoteClientAssociateObject();
    atomic_store(v6, (unint64_t *)DerivedStorage);
    FigBytePumpGetFigBaseObject(a1);
    v8 = v7;
    v9 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
    if (v9)
    {
      v10 = v9(v8, CFSTR("FramebufIsActive"), *MEMORY[0x1E0C9AE00], &cf);
      if (!v10)
      {
        v20 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (*(_BYTE *)(DerivedStorage + 113))
          vfbremote_setHotPlugDetectNotifications(a1);
        if (*(_BYTE *)(DerivedStorage + 184))
          vfbremote_setVSyncNotifications();
        goto LABEL_20;
      }
      v12 = v10;
    }
    else
    {
      v12 = -12782;
    }
    v20 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_22:
  if (cf)
    CFRelease(cf);
  FigXPCRelease();
  FigXPCRelease();
  if (v12)
  {
    sleep(2u);
    v14 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __vfbremote_connect_block_invoke;
    block[3] = &__block_descriptor_tmp_13;
    block[4] = a1;
    dispatch_async(v14, block);
  }
  else if (!*(_QWORD *)(DerivedStorage + 8))
  {
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

CFStringRef vfbremote_copyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  uint64_t v4;
  CFIndex v5;
  unint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *(unsigned int *)(DerivedStorage + 24);
  v5 = CFGetRetainCount(a1);
  v6 = atomic_load((unint64_t *)DerivedStorage);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<FigVirtualFramebufferRemote %p (%d) retainCount: %ld objectID: %llu>"), a1, v4, v5, v6);
}

uint64_t vfbremote_copyProperty()
{
  unint64_t *DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v1 = atomic_load(DerivedStorage);
  if (v1)
    v2 = FigXPCSendStdCopyPropertyMessage();
  else
    v2 = 3758097111;
  vfbremote_handleError((uint64_t)DerivedStorage, v1, v2);
  return v2;
}

uint64_t vfbremote_setProperty()
{
  unint64_t *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v1 = atomic_load(DerivedStorage);
  if (v1)
  {
    v2 = FigXPCSendStdSetPropertyMessage();
    if ((_DWORD)v2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v2 = 3758097111;
  }
  vfbremote_handleError((uint64_t)DerivedStorage, v1, v2);
  return v2;
}

uint64_t vfbremote_handleError(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;

  v4 = result;
  if (a3)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 32));
    *(_DWORD *)(v4 + 64) = -1;
    result = MEMORY[0x19402EF04](*(_QWORD *)(v4 + 32));
  }
  if (a2)
    return FigXPCRemoteClientKillServerOnTimeout();
  return result;
}

uint64_t vfbremote_getSupportedDigitalOutModes(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t *DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = atomic_load(DerivedStorage);
  if (v6)
  {
    v7 = FigXPCCreateBasicMessage();
    if ((_DWORD)v7
      || (v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v7)
      || (v7 = FigXPCMessageCopyCFArray(), (_DWORD)v7)
      || (v7 = FigXPCMessageCopyCFArray(), (_DWORD)v7))
    {
      v10 = v7;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      MEMORY[0x19402EEEC](DerivedStorage[4]);
      v8 = (const void *)DerivedStorage[6];
      DerivedStorage[6] = 0;
      if (v8)
        CFRelease(v8);
      v9 = (const void *)DerivedStorage[7];
      DerivedStorage[7] = 0;
      if (v9)
        CFRelease(v9);
      MEMORY[0x19402EF04](DerivedStorage[4]);
      if (a2)
        *a2 = 0;
      v10 = 0;
      if (a3)
        *a3 = 0;
    }
  }
  else
  {
    v10 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v6, v10);
  return v10;
}

uint64_t vfbremote_setDigitalOutMode(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t *DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v6 = atomic_load(DerivedStorage);
  if (!v6)
  {
    v8 = 3758097111;
    goto LABEL_4;
  }
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7)
  {
    v8 = v7;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_8:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_4;
  }
  xpc_dictionary_set_uint64(0, "InColorModeID", a2);
  xpc_dictionary_set_uint64(0, "InTimingModeID", a3);
  v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v8)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v6, v8);
  return v8;
}

uint64_t vfbremote_submitSurface(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, int a14)
{
  unint64_t *DerivedStorage;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v33;
  _QWORD bytes[9];
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  xpc_object_t xdict;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v39 = 0;
  xdict = 0;
  bytes[0] = a13;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  *(double *)&bytes[3] = a3;
  *(double *)&bytes[4] = a4;
  *(double *)&bytes[5] = a5;
  *(double *)&bytes[6] = a6;
  *(double *)&bytes[7] = a7;
  *(double *)&bytes[8] = a8;
  v35 = a11;
  v36 = a10;
  v37 = a12;
  v38 = a14;
  v28 = atomic_load(DerivedStorage);
  if (!v28)
  {
    v30 = 3758097111;
    goto LABEL_4;
  }
  v29 = FigXPCCreateBasicMessage();
  if ((_DWORD)v29)
  {
    v30 = v29;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_8:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_4;
  }
  xpc_dictionary_set_data(xdict, "InSurfaceData", bytes, 0x58uLL);
  v30 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v30)
  {
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    goto LABEL_8;
  }
LABEL_4:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v28, v30);
  return v30;
}

uint64_t vfbremote_swapWaitWithTimeout()
{
  return 0;
}

uint64_t vfbremote_swapWaitSurfaceTimeout()
{
  return 0;
}

uint64_t vfbremote_getVSyncRunLoopSource()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 136);
}

uint64_t vfbremote_enableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[6];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[15]);
  if (DerivedStorage[18])
  {
    v7 = 4294955219;
  }
  else
  {
    DerivedStorage[18] = a2;
    DerivedStorage[19] = a3;
    v8 = DerivedStorage[2];
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __vfbremote_enableVSyncNotifications_block_invoke;
    v10[3] = &__block_descriptor_tmp_8_4;
    v10[4] = DerivedStorage;
    v10[5] = a1;
    dispatch_async(v8, v10);
    v7 = 0;
  }
  MEMORY[0x19402EF04](DerivedStorage[15]);
  return v7;
}

uint64_t vfbremote_disableVSyncNotifications(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  _QWORD v5[6];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[15]);
  DerivedStorage[18] = 0;
  DerivedStorage[19] = 0;
  v3 = DerivedStorage[2];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __vfbremote_disableVSyncNotifications_block_invoke;
  v5[3] = &__block_descriptor_tmp_9_2;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_async(v3, v5);
  MEMORY[0x19402EF04](DerivedStorage[15]);
  return 0;
}

uint64_t vfbremote_getHotPlugRunLoopSource()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t vfbremote_enableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[6];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[9]);
  if (DerivedStorage[12])
  {
    v7 = 4294955219;
  }
  else
  {
    DerivedStorage[12] = a2;
    DerivedStorage[13] = a3;
    v8 = DerivedStorage[2];
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __vfbremote_enableHotPlugDetectNotifications_block_invoke;
    v10[3] = &__block_descriptor_tmp_10_1;
    v10[4] = DerivedStorage;
    v10[5] = a1;
    dispatch_async(v8, v10);
    v7 = 0;
  }
  MEMORY[0x19402EF04](DerivedStorage[9]);
  return v7;
}

uint64_t vfbremote_disableHotPlugDetectNotifications(uint64_t a1)
{
  _QWORD *DerivedStorage;
  NSObject *v3;
  _QWORD v5[6];

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[9]);
  DerivedStorage[12] = 0;
  DerivedStorage[13] = 0;
  v3 = DerivedStorage[2];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __vfbremote_disableHotPlugDetectNotifications_block_invoke;
  v5[3] = &__block_descriptor_tmp_11_0;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_async(v3, v5);
  MEMORY[0x19402EF04](DerivedStorage[9]);
  return 0;
}

uint64_t vfbremote_getHDCPDownstreamState(uint64_t a1, _OWORD *a2)
{
  unint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  _OWORD *data;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  size_t length;
  xpc_object_t xdict;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  xdict = 0;
  v13 = 0;
  length = 0;
  v4 = atomic_load(DerivedStorage);
  if (v4)
  {
    v5 = FigXPCCreateBasicMessage();
    if ((_DWORD)v5 || (v5 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v5))
    {
      v7 = v5;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      data = xpc_dictionary_get_data(xdict, "OutHDCPReply", &length);
      if (data && length == 16)
      {
        v7 = 0;
        *a2 = *data;
      }
      else
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v7 = 3758097097;
      }
    }
  }
  else
  {
    v7 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v4, v7);
  return v7;
}

uint64_t vfbremote_enableMirroring(uint64_t a1, unsigned int a2)
{
  unint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = (uint64_t)DerivedStorage;
  v5 = atomic_load(DerivedStorage);
  if (!v5)
  {
    v8 = 3758097111;
    goto LABEL_5;
  }
  MEMORY[0x19402EEEC](DerivedStorage[4]);
  v6 = *(_DWORD *)(v4 + 64);
  *(_DWORD *)(v4 + 64) = a2;
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 32));
  if (v6 == a2)
  {
    v8 = 0;
    goto LABEL_5;
  }
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7)
  {
    v8 = v7;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_10:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_5;
  }
  xpc_dictionary_set_uint64(0, "InEnable", a2);
  v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v8)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_10;
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v4, v5, v8);
  return v8;
}

uint64_t vfbremote_acquireWritebackSurface(double a1, double a2, uint64_t a3, int a4, uint64_t a5, int a6, IOSurfaceID *a7, uint64_t *a8)
{
  unint64_t *DerivedStorage;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  xpc_object_t value;
  __IOSurface *v24;
  __IOSurface *v25;
  IOSurfaceID ID;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v29;
  NSObject *v30;
  _QWORD bytes[3];
  int v32;
  int v33;
  uint64_t v34;
  xpc_object_t v35;
  xpc_object_t xdict;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v16 = (uint64_t)DerivedStorage;
  v35 = 0;
  xdict = 0;
  if (a7)
    v17 = a8 == 0;
  else
    v17 = 1;
  v18 = !v17;
  bytes[0] = a5;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  v32 = a4;
  v33 = a6;
  v34 = v18;
  v19 = atomic_load(DerivedStorage);
  if (v19)
  {
    v20 = FigXPCCreateBasicMessage();
    if ((_DWORD)v20)
    {
      v21 = v20;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      xpc_dictionary_set_data(xdict, "InSurfaceData", bytes, 0x28uLL);
      v21 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      v22 = v18 ^ 1;
      if ((_DWORD)v21)
        v22 = 1;
      if ((v22 & 1) == 0)
      {
        value = xpc_dictionary_get_value(v35, "OutSurface");
        if (value && (v24 = IOSurfaceLookupFromXPCObject(value)) != 0)
        {
          v25 = v24;
          ID = IOSurfaceGetID(v24);
          if (ID != xpc_dictionary_get_uint64(v35, "OutSurfaceID"))
          {
            v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 32));
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v16 + 40), (const void *)ID, v25);
          MEMORY[0x19402EF04](*(_QWORD *)(v16 + 32));
          *a7 = ID;
          *a8 = xpc_dictionary_get_uint64(v35, "OutSurfaceRefCon");
          CFRelease(v25);
          v21 = 0;
        }
        else
        {
          v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v21 = 3758097097;
        }
      }
    }
  }
  else
  {
    v21 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v16, v19, v21);
  return v21;
}

uint64_t vfbremote_relinquishWritebackSurface(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  unint64_t *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v14;
  uint64_t bytes;
  unsigned int v16;
  int v17;
  uint64_t v18;
  xpc_object_t xdict;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v8 = (uint64_t)DerivedStorage;
  v18 = 0;
  xdict = 0;
  bytes = a3;
  v16 = a2;
  v17 = a4;
  v9 = atomic_load(DerivedStorage);
  if (!v9)
  {
    v11 = 3758097111;
    goto LABEL_6;
  }
  if (a2)
  {
    MEMORY[0x19402EEEC](DerivedStorage[4]);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v8 + 40), (const void *)a2);
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 32));
  }
  v10 = FigXPCCreateBasicMessage();
  if ((_DWORD)v10)
  {
    v11 = v10;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_10:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_6;
  }
  xpc_dictionary_set_data(xdict, "InSurfaceData", &bytes, 0x10uLL);
  v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v11)
  {
    v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    goto LABEL_10;
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v8, v9, v11);
  return v11;
}

uint64_t vfbremote_getHDCPRunLoopSource()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 208);
}

uint64_t vfbremote_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v15;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v8 = (uint64_t)DerivedStorage;
  v9 = atomic_load(DerivedStorage);
  if (v9)
  {
    MEMORY[0x19402EEEC](DerivedStorage[24]);
    *(_QWORD *)(v8 + 216) = a4;
    *(_QWORD *)(v8 + 224) = a5;
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 192));
    v10 = FigXPCCreateBasicMessage();
    if ((_DWORD)v10 || (v10 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v10))
    {
      v12 = v10;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 192));
      v11 = xpc_dictionary_get_BOOL(0, "OutHDCPReady");
      *(_BYTE *)(v8 + 232) = v11;
      if (!v11)
      {
        v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(_QWORD *)(v8 + 200))
      {
        CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(v8 + 208));
        CFRunLoopWakeUp(*(CFRunLoopRef *)(v8 + 200));
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 192));
      v12 = 0;
    }
  }
  else
  {
    v12 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError(v8, v9, v12);
  return v12;
}

uint64_t vfbremote_HDCPGetReply(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t *DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const void *data;
  size_t v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v13;
  size_t length;
  xpc_object_t v15;
  xpc_object_t xdict;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  v15 = 0;
  xdict = 0;
  length = 0;
  v6 = atomic_load(DerivedStorage);
  if (v6)
  {
    v7 = FigXPCCreateBasicMessage();
    if ((_DWORD)v7
      || (xpc_dictionary_set_uint64(xdict, "InHDCPReplySize", *a3),
          v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          (_DWORD)v7))
    {
      v10 = v7;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      data = xpc_dictionary_get_data(v15, "OutHDCPReply", &length);
      if (data && (v9 = length, length <= *a3))
      {
        memcpy(a2, data, length);
        v10 = 0;
        *a3 = v9;
      }
      else
      {
        v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v10 = 3758097097;
      }
    }
  }
  else
  {
    v10 = 3758097111;
  }
  FigXPCRelease();
  FigXPCRelease();
  vfbremote_handleError((uint64_t)DerivedStorage, v6, v10);
  return v10;
}

uint64_t __vfbremote_enableVSyncNotifications_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 184) = 1;
  return vfbremote_setVSyncNotifications();
}

uint64_t vfbremote_setVSyncNotifications()
{
  unint64_t *DerivedStorage;
  unint64_t *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  if (atomic_load(DerivedStorage))
  {
    v2 = DerivedStorage;
    if (FigXPCCreateBasicMessage()
      || (xpc_dictionary_set_uint64(0, "InEnable", *((unsigned __int8 *)v2 + 184)),
          FigXPCRemoteClientSendSyncMessageCreatingReply()))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t __vfbremote_disableVSyncNotifications_block_invoke(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 184) = 0;
  return vfbremote_setVSyncNotifications();
}

uint64_t __vfbremote_enableHotPlugDetectNotifications_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 113) = 1;
  return vfbremote_setHotPlugDetectNotifications(v1);
}

uint64_t vfbremote_setHotPlugDetectNotifications(uint64_t a1)
{
  unint64_t *DerivedStorage;
  unint64_t *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (unint64_t *)CMBaseObjectGetDerivedStorage();
  if (atomic_load(DerivedStorage))
  {
    v4 = DerivedStorage;
    if (FigXPCCreateBasicMessage()
      || (xpc_dictionary_set_uint64(0, "InEnable", *((unsigned __int8 *)v4 + 113)),
          FigXPCRemoteClientSendSyncMessageCreatingReply()))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else if (*((_BYTE *)v4 + 113))
    {
      vfbremote_handleHotPlugNotification(a1, 0);
    }
  }
  FigXPCRelease();
  return FigXPCRelease();
}

void vfbremote_handleHotPlugNotification(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  *(_BYTE *)(DerivedStorage + 112) = xpc_dictionary_get_uint64(a2, "OutIsActive") != 0;
  if (*(_QWORD *)(DerivedStorage + 80))
  {
    CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(DerivedStorage + 88));
    CFRunLoopWakeUp(*(CFRunLoopRef *)(DerivedStorage + 80));
  }
  JUMPOUT(0x19402EF04);
}

uint64_t __vfbremote_disableHotPlugDetectNotifications_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v1 + 113) = 0;
  return vfbremote_setHotPlugDetectNotifications(v2);
}

uint64_t __vfbremote_connect_block_invoke(uint64_t a1)
{
  return vfbremote_connect(*(_QWORD *)(a1 + 32));
}

void __vfbremote_getRemoteClient_block_invoke()
{
  __CFDictionary *Mutable;
  int v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("FVFBServerDied"));
  FigCFDictionarySetInt32();
  v1 = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
  if (v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void vfbremote_handleDeadConnection(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __vfbremote_handleDeadConnection_block_invoke;
  block[3] = &__block_descriptor_tmp_18_0;
  block[4] = a1;
  dispatch_async(v2, block);
}

uint64_t vfbremote_handleServerMessage()
{
  uint64_t OpCode;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  size_t length;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  OpCode = FigXPCMessageGetOpCode();
  if (!(_DWORD)OpCode)
    return 3758097097;
  v1 = OpCode;
  LODWORD(length) = 0;
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v1;
}

void __vfbremote_handleDeadConnection_block_invoke(uint64_t a1)
{
  vfbremote_connect(*(_QWORD *)(a1 + 32));
}

uint64_t FigShared_SetDiskCacheParams(const __CFString *cf, int64_t a2, int64_t a3, int a4)
{
  const __CFString *v7;
  uint64_t DirectoryAtPath;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v12;
  CFTypeRef cfa;

  v7 = cf;
  v12 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v7);
      goto LABEL_6;
    }
LABEL_12:
    v10 = FigSharedRemote_SetDiskCacheParams(v7, a2, a3, a4);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v9 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v7 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v9 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v9 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v12);
    if (!(_DWORD)v9)
    {
      v10 = FigDiskCacheRepositorySetTarget((uint64_t)v12, a2, a3, a4);
LABEL_13:
      v9 = v10;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t fs_CreateDirectoryAtPath(CFStringRef URLString)
{
  CFURLRef v1;
  CFURLRef v2;
  uint64_t v3;

  v1 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], URLString, 0);
  if (!v1)
    return 4294954669;
  v2 = v1;
  v3 = FigCFURLCreateDirectory();
  CFRelease(v2);
  return v3;
}

uint64_t fs_CopyRepositoryByParent(const __CFString *a1, int a2, void **a3)
{
  void *v6;
  const void *v7;
  uint64_t v8;
  const __CFURL *v9;
  const __CFURL *v10;
  void *value;

  MEMORY[0x19402EEEC](sDiskCacheLock);
  v6 = (void *)CFDictionaryGetValue((CFDictionaryRef)sDiskCacheList, a1);
  value = v6;
  if (v6)
  {
    v7 = v6;
    if (!a2 || FigDiskCacheRepositoryExists((uint64_t)v6))
    {
      CFRetain(v7);
      v8 = 0;
      goto LABEL_10;
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)sDiskCacheList, a1);
    value = 0;
  }
  v9 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 0);
  if (v9)
  {
    v10 = v9;
    v8 = FigDiskCacheRepositoryCreate(v9, 52428800, 41943040, (uint64_t *)&value);
    CFRelease(v10);
    if (!(_DWORD)v8)
      CFDictionarySetValue((CFMutableDictionaryRef)sDiskCacheList, a1, value);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
LABEL_10:
  MEMORY[0x19402EF04](sDiskCacheLock);
  *a3 = value;
  return v8;
}

uint64_t FigShared_CheckIntoAndOutOfDiskCache(const __CFString *cf, const __CFString *a2, const void *a3, const void **a4)
{
  const __CFString *v7;
  uint64_t DirectoryAtPath;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v12;
  CFTypeRef cfa;

  v7 = cf;
  v12 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v7);
      goto LABEL_6;
    }
LABEL_12:
    v10 = FigSharedRemote_CheckIntoAndOutOfDiskCache(v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v9 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v7 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v9 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v9 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v12);
    if (!(_DWORD)v9)
    {
      v10 = FigDiskCacheRepositoryCheckInAndOut((uint64_t)v12, a2, a3, a4);
LABEL_13:
      v9 = v10;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v12)
    CFRelease(v12);
  return v9;
}

uint64_t FigShared_DeleteFromDiskCache(const __CFString *cf, const __CFString *a2)
{
  const __CFString *v3;
  uint64_t DirectoryAtPath;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v8;
  CFTypeRef cfa;

  v3 = cf;
  v8 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v3);
      goto LABEL_6;
    }
LABEL_12:
    v6 = FigSharedRemote_DeleteFromDiskCache(v3, (uint64_t)a2);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v5 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v3 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v5 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v5 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v8);
    if (!(_DWORD)v5)
    {
      v6 = FigDiskCacheRepositoryDelete((uint64_t)v8, a2);
LABEL_13:
      v5 = v6;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v8)
    CFRelease(v8);
  return v5;
}

uint64_t FigShared_ReserveDiskCacheBacking(const __CFString *a1, const void *a2, int64_t a3)
{
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v9;
  CFTypeRef cf;

  v9 = 0;
  cf = a1;
  if (a1)
  {
    v5 = a1;
    CFRetain(a1);
    if ((sDiskCacheIsRemote & 1) != 0)
      goto LABEL_3;
LABEL_11:
    v7 = FigSharedRemote_ReserveDiskCacheBacking(v5, (uint64_t)a2, a3);
    goto LABEL_12;
  }
  if (sDiskCacheIsRemote != 1)
  {
    v5 = 0;
    goto LABEL_11;
  }
  v6 = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cf, 0);
  if ((_DWORD)v6)
    goto LABEL_13;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v5 = (const __CFString *)cf;
    goto LABEL_11;
  }
LABEL_3:
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v6 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v6 = fs_CopyRepositoryByParent((const __CFString *)cf, 0, (void **)&v9);
    if (!(_DWORD)v6)
    {
      v7 = FigDiskCacheRepositoryReserveBacking((uint64_t)v9, a2, a3);
LABEL_12:
      v6 = v7;
    }
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  return v6;
}

uint64_t FigShared_CopyDiskCacheCheckedInIDs(const __CFString *cf, CFMutableArrayRef *a2)
{
  const __CFString *v3;
  uint64_t DirectoryAtPath;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v8;
  CFTypeRef cfa;

  v3 = cf;
  v8 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v3);
      goto LABEL_6;
    }
LABEL_12:
    v6 = FigSharedRemote_CopyDiskCacheCheckedInIDs(v3, (uint64_t)a2);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v5 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v3 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v5 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v5 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v8);
    if (!(_DWORD)v5)
    {
      v6 = FigDiskCacheRepositoryCopyCheckedInIDs((uint64_t)v8, a2);
LABEL_13:
      v5 = v6;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v8)
    CFRelease(v8);
  return v5;
}

uint64_t FigShared_GetCacheFileSize(const __CFString *cf, uint64_t a2, int64_t *a3)
{
  const __CFString *v5;
  uint64_t DirectoryAtPath;
  uint64_t v7;
  uint64_t CacheFileSize;
  CFTypeRef v10;
  CFTypeRef cfa;

  v5 = cf;
  v10 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v5);
      goto LABEL_6;
    }
LABEL_12:
    CacheFileSize = FigSharedRemote_GetCacheFileSize(v5, a2, a3);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v7 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v5 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v7 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v7 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v10);
    if (!(_DWORD)v7)
    {
      CacheFileSize = FigDiskCacheRepositoryGetFileSize((uint64_t)v10, a2, (uint64_t)a3);
LABEL_13:
      v7 = CacheFileSize;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v10)
    CFRelease(v10);
  return v7;
}

uint64_t FigShared_CopyCacheProperty(const __CFString *cf, const void *a2, const void *a3, const __CFAllocator *a4, CFNumberRef *a5)
{
  const __CFString *v9;
  uint64_t DirectoryAtPath;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v14;
  CFTypeRef cfa;

  v9 = cf;
  v14 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v9);
      goto LABEL_6;
    }
LABEL_12:
    v12 = FigSharedRemote_CopyCacheProperty(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v11 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v9 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v11 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v11 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v14);
    if (!(_DWORD)v11)
    {
      v12 = FigDiskCacheRepositoryCopyProperty((uint64_t)v14, a2, a3, a4, a5);
LABEL_13:
      v11 = v12;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v14)
    CFRelease(v14);
  return v11;
}

uint64_t FigShared_CopyCacheLastModifiedDate(const __CFString *a1, const void *a2, CFNumberRef *a3)
{
  return FigShared_CopyCacheProperty(a1, a2, CFSTR("FigDiskCacheRepository_LastModifiedDate"), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a3);
}

uint64_t FigShared_MakeRoomInDiskCache(const __CFString *cf, int a2, int64_t *a3)
{
  const __CFString *v5;
  uint64_t DirectoryAtPath;
  uint64_t v7;
  uint64_t RoomInDiskCache;
  CFTypeRef v10;
  CFTypeRef cfa;

  v5 = cf;
  v10 = 0;
  cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if ((sDiskCacheIsRemote & 1) != 0)
    {
      DirectoryAtPath = fs_CreateDirectoryAtPath(v5);
      goto LABEL_6;
    }
LABEL_12:
    RoomInDiskCache = FigSharedRemote_MakeRoomInDiskCache(v5, a2, a3);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
    goto LABEL_12;
  DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  v7 = DirectoryAtPath;
  if ((_DWORD)DirectoryAtPath)
    goto LABEL_14;
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v5 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19402F294](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  v7 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    v7 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v10);
    if (!(_DWORD)v7)
    {
      RoomInDiskCache = FigDiskCacheRepositoryMakeRoom((uint64_t)v10, a2, a3);
LABEL_13:
      v7 = RoomInDiskCache;
    }
  }
LABEL_14:
  if (cfa)
    CFRelease(cfa);
  if (v10)
    CFRelease(v10);
  return v7;
}

uint64_t FigShared_DisableRemoteDiskCache()
{
  uint64_t result;
  int64_t v1;

  if ((sDiskCacheIsRemote & 1) == 0)
  {
    v1 = 0;
    sDiskCacheIsRemote = 1;
    return FigShared_CopyDiskCacheParams(0, &v1, 0, 0, 0, 0);
  }
  return result;
}

void FigShared_EnableRemoteDiskCache()
{
  sDiskCacheIsRemote = 0;
}

void sub_192B72168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_192B7244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_192B72608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_192B727A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_192B7296C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_192B72DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id _animationByTransformingValues(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (id)objc_msgSend(a1, "copy");
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v4 = objc_msgSend(v3, "fromValue");
    v5 = objc_msgSend(v3, "toValue");
    v6 = objc_msgSend(v3, "byValue");
    if (v4)
      objc_msgSend(v3, "setFromValue:", (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4));
    if (v5)
      objc_msgSend(v3, "setToValue:", (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v5));
    if (v6)
      objc_msgSend(v3, "setByValue:", (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v6));
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v7 = (void *)objc_msgSend(v3, "values");
      if (v7)
      {
        v8 = v7;
        v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
        v15 = 0u;
        v16 = 0u;
        v17 = 0u;
        v18 = 0u;
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v10)
        {
          v11 = v10;
          v12 = *(_QWORD *)v16;
          do
          {
            v13 = 0;
            do
            {
              if (*(_QWORD *)v16 != v12)
                objc_enumerationMutation(v8);
              objc_msgSend(v9, "addObject:", (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v13++)));
            }
            while (v11 != v13);
            v11 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
          }
          while (v11);
        }
        objc_msgSend(v3, "setValues:", v9);
      }
    }
  }
  return v3;
}

uint64_t FigSharedPlayerCreateWithOptions(const __CFAllocator *a1, int a2, const void *a3, CFTypeRef *a4)
{
  __int16 v6;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  const __CFAllocator *v12;
  __CFDictionary *MutableCopy;
  const void *Value;
  CFStringRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFTypeRef cf;

  v6 = a2;
  if ((a2 & 0x40) != 0)
  {
    if ((a2 & 0x200) == 0)
      return FigPlayerAsyncCreateWithEngineTopologyAndOptions((uint64_t)a1, a2 & 0xFFFFFFBF, a3, a4);
    cf = 0;
    v9 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFFFBF, a3, &cf);
    if ((_DWORD)v9)
      return v9;
    v10 = FigPlayerAsyncCreateWithOptions((uint64_t)a1, cf, (const __CFDictionary *)a3, a4);
    goto LABEL_42;
  }
  if ((a2 & 0x20) != 0)
    return FigPlayerRemoteCreateWithOptions(a1, a2 & 0xFFFFFFDF, (const __CFDictionary *)a3, a4);
  if ((a2 & 0x400) != 0)
  {
    cf = 0;
    v9 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFFBFF, a3, &cf);
    if (!(_DWORD)v9)
    {
      v10 = FigPlayerCoordinatorCreateWithOptions((uint64_t)a1, cf, (const __CFDictionary *)a3, a4);
      goto LABEL_42;
    }
  }
  else
  {
    if ((a2 & 0x800) == 0)
    {
      if ((a2 & 0x10) == 0)
      {
        switch(a2 & 0xF)
        {
          case 0:
            return FigSignalErrorAt();
          case 4:
            v9 = 0;
            *a4 = 0;
            return v9;
          case 5:
            return FigPlayerStreamCreateWithOptions();
          case 6:
            if (!sharedplayer_enableOverlapPlayer())
              return FigPlayerSurrogateCreateWithOptions(a1, a3, a4);
            v17 = 0;
            cf = 0;
            v9 = FigPlayerSurrogateCreateWithOptions(a1, a3, &cf);
            if (!(_DWORD)v9)
            {
              v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              Value = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("LoggingIdentifier"));
              v15 = CFStringCreateWithFormat(v12, 0, CFSTR("%@.2"), Value);
              CFDictionarySetValue(MutableCopy, CFSTR("LoggingIdentifier"), v15);
              v9 = FigPlayerSurrogateCreateWithOptions(a1, MutableCopy, &v17);
              if (v15)
                CFRelease(v15);
              if (MutableCopy)
                CFRelease(MutableCopy);
              if (!(_DWORD)v9)
                v9 = FigPlayerOverlapCreateWithOptions(a1, cf, v17, (const __CFDictionary *)a3, a4);
            }
            if (cf)
              CFRelease(cf);
            v16 = v17;
            if (!v17)
              return v9;
            goto LABEL_43;
          default:
            return FigPlayerFileCreateWithOptions((uint64_t)a1, (uint64_t)a3, a4);
        }
      }
      cf = 0;
      v9 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFFFEF, a3, &cf);
      if ((_DWORD)v9)
        return v9;
      v11 = cf;
      if ((v6 & 0x100) == 0 && cf)
      {
        v17 = 0;
        if (FigPlayerAirPlayCreateWithOptions(a1, cf, (const __CFDictionary *)a3, &v17))
        {
          FigSignalErrorAt();
          v11 = cf;
        }
        else
        {
          if (cf)
            CFRelease(cf);
          v11 = v17;
          cf = v17;
        }
      }
      v10 = FigPlayerCentralCreateWithOptions((uint64_t)a1, (uint64_t)v11, (uint64_t)a3, (uint64_t)a4);
      goto LABEL_42;
    }
    cf = 0;
    v9 = FigSharedPlayerCreateWithOptions(a1, a2 & 0xFFFFF7FF, a3, &cf);
    if (!(_DWORD)v9)
    {
      v10 = FigPlayerCelesteCreateWithOptions((uint64_t)a1, (uint64_t)cf, (uint64_t)a3, (uint64_t)a4);
LABEL_42:
      v9 = v10;
      v16 = cf;
      if (cf)
LABEL_43:
        CFRelease(v16);
    }
  }
  return v9;
}

uint64_t sharedplayer_enableOverlapPlayer()
{
  uint64_t v0;

  v0 = *MEMORY[0x1E0C9AE50];
  if (v0 == FigCFDictionaryGetValue())
    return 1;
  else
    return _os_feature_enabled_impl();
}

uint64_t subtitleRenderingNeedsLayoutNotification(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "handleNeedsLayoutNotification");
}

const void *getContentIDDo(_QWORD **a1)
{
  const void *result;

  result = CFDictionaryGetValue((CFDictionaryRef)(*a1)[7], (const void *)*MEMORY[0x1E0CA2CA0]);
  *a1[1] = result;
  return result;
}

void setContentDo(uint64_t *a1)
{
  const __CFAllocator *v1;
  uint64_t v2;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v4;
  const void *v5;
  const __CFDictionary *Value;
  __CFDictionary *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  void *ValueAtIndex;
  const void *v12;
  const void *v13;
  size_t v14;
  int64_t v15;
  const void **v16;
  const void **v17;
  uint64_t v18;
  FigSubtitleWebVTTCueCALayer *v19;
  FigSubtitleWebVTTCueCALayer *v20;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = *a1;
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (CFDictionaryRef)a1[1]);
  if (MutableCopy)
  {
    v4 = MutableCopy;
    v5 = *(const void **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = MutableCopy;
    CFRetain(MutableCopy);
    if (v5)
      CFRelease(v5);
    CFRelease(v4);
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v2 + 56), CFSTR("kFigSubtitleRenderer_RegionCues"));
    if (Value)
    {
      v7 = CFDictionaryCreateMutableCopy(v1, 0, Value);
      if (v7)
      {
        Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 64));
        if (Count >= 1)
        {
          v9 = Count;
          for (i = 0; i < v9; ++i)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 64), i);
            v12 = (const void *)objc_msgSend(ValueAtIndex, "getContentID");
            if (v12 && (v13 = v12, CFDictionaryGetValue(v7, v12)))
            {
              CFDictionaryRemoveValue(v7, v13);
            }
            else
            {
              objc_msgSend(ValueAtIndex, "removeFromSuperlayer");
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 64), i);
              --v9;
              --i;
            }
          }
        }
        v14 = CFDictionaryGetCount(v7);
        if (v14)
        {
          v15 = v14;
          v16 = (const void **)malloc_type_calloc(v14, 8uLL, 0xC0040B8AA526DuLL);
          v17 = (const void **)malloc_type_calloc(v15, 8uLL, 0xC0040B8AA526DuLL);
          CFDictionaryGetKeysAndValues(v7, v16, v17);
          if (v15 < 1)
          {
LABEL_18:
            *(_DWORD *)(v2 + 72) = 0;
          }
          else
          {
            v18 = 0;
            while (1)
            {
              v19 = objc_alloc_init(FigSubtitleWebVTTCueCALayer);
              if (!v19)
                break;
              v20 = v19;
              objc_msgSend(*(id *)v2, "addSublayer:", v19);
              CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 64), v20);
              -[FigSubtitleWebVTTCueCALayer setRenderer:](v20, "setRenderer:", *(_QWORD *)(v2 + 16));
              objc_msgSend(*(id *)v2, "bounds");
              -[FigSubtitleWebVTTCueCALayer setViewport:](v20, "setViewport:");
              -[FigSubtitleWebVTTCueCALayer setContent:](v20, "setContent:", v17[v18]);

              if (v15 == ++v18)
                goto LABEL_18;
            }
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v16 = 0;
    v17 = 0;
LABEL_19:
    free(v16);
    free(v17);
    if (v7)
      CFRelease(v7);
  }
}

void updateRegionDisplay(id *a1)
{
  id v2;
  _QWORD block[5];

  v2 = *a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __updateRegionDisplay_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(MEMORY[0x1E0C80D38], block);
}

void setRendererDo(uint64_t *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  v1 = (const void *)a1[1];
  v3 = *(const void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

__n128 setViewportDo(uint64_t *a1)
{
  __n128 result;
  uint64_t v2;

  result.n128_u64[0] = a1[3];
  if (result.n128_f64[0] >= 0.0)
  {
    result.n128_u64[0] = a1[4];
    if (result.n128_f64[0] >= 0.0)
    {
      v2 = *a1;
      result = *(__n128 *)(a1 + 1);
      *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 3);
      *(__n128 *)(v2 + 24) = result;
      *(_DWORD *)(v2 + 72) = 1;
    }
  }
  return result;
}

void sub_192B74468(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void __updateRegionDisplay_block_invoke(uint64_t a1)
{
  id *v2;

  v2 = *(id **)(a1 + 32);
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(*v2, "setNeedsLayout");
  objc_msgSend(*v2, "setNeedsDisplay");
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");

}

uint64_t FigVisualContextGetClassID()
{
  if (FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce != -1)
    dispatch_once_f(&FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce, 0, (dispatch_function_t)RegisterFigVisualContextBaseType);
  return sFigVisualContextClassID;
}

uint64_t RegisterFigVisualContextBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVisualContextGetTypeID()
{
  if (FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce != -1)
    dispatch_once_f(&FigVisualContextGetClassID_sRegisterFigVisualContextBaseTypeOnce, 0, (dispatch_function_t)RegisterFigVisualContextBaseType);
  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigVisualContextRetain(CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  return cf;
}

void FigVisualContextRelease(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigVisualContextGetEarliestSequentialImageTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t);
  __int128 v10;
  uint64_t v11;

  v8 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 64);
  if (!v8)
    return 4294954514;
  v10 = *MEMORY[0x1E0CA2E18];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  return v8(a1, a2, &v10, a3, a4);
}

uint64_t FigCreateNullPixelBuffer(const __CFAllocator *a1, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t v3;

  v3 = CVPixelBufferCreate(a1, 1uLL, 1uLL, 0x20u, 0, pixelBufferOut);
  if (!(_DWORD)v3)
    CVBufferSetAttachment(*pixelBufferOut, CFSTR("QTNull"), CFSTR("QTNull"), kCVAttachmentMode_ShouldNotPropagate);
  return v3;
}

BOOL FigIsNullPixelBuffer(__CVBuffer *a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  BOOL v4;

  v2 = CVBufferCopyAttachment(a1, CFSTR("QTNull"), 0);
  v3 = v2;
  if (v2)
    CFRelease(v2);
  if (a1)
    v4 = v3 == 0;
  else
    v4 = 0;
  return !v4;
}

CFStringRef VisualContextCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVisualContext %p]"), a1);
}

uint64_t FigCreateMediaSelectionArrayFromFormatReaderProperties(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  const __CFAllocator *v6;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **);
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **);
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  char v15;
  CFIndex v16;
  __CFArray *v17;
  unsigned __int8 IsEnabled;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, CFTypeRef *, int *);
  uint64_t inserted;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  unsigned int v24;
  CFIndex v25;
  CFIndex v26;
  CFIndex v27;
  const __CFNumber *v28;
  const __CFNumber *v29;
  CFTypeID v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, int **, _QWORD);
  uint64_t v33;
  void (*v34)(uint64_t, const __CFString *, const __CFAllocator *, void **);
  const __CFNumber *v35;
  const __CFNumber *v36;
  CFTypeID v37;
  int v38;
  CFArrayRef v39;
  const __CFArray *v40;
  __CFArray *v41;
  __CFArray *v42;
  unsigned __int8 v43;
  const __CFNumber *v44;
  CFIndex v45;
  CFIndex v46;
  CFIndex v47;
  char v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, CFDictionaryRef *, _QWORD);
  char v51;
  CFDictionaryRef v52;
  uint64_t v53;
  void (*v54)(uint64_t, const __CFString *, uint64_t, int **);
  CFIndex v55;
  CFIndex v56;
  CFIndex v57;
  const opaqueCMFormatDescription *v58;
  char v59;
  BOOL v60;
  uint64_t v62;
  const __CFArray *v63;
  uint64_t v64;
  CFIndex v65;
  uint64_t v66;
  uint64_t NumberValue;
  const __CFString *StringValue;
  const __CFString *v69;
  CFIndex v70;
  CFIndex v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, int **, _QWORD);
  uint64_t v75;
  CFMutableArrayRef v76;
  uint64_t v77;
  uint64_t v78;
  CFMutableArrayRef v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, CFDictionaryRef *, uint64_t *);
  uint64_t v82;
  const __CFArray *v83;
  uint64_t v84;
  CFIndex v85;
  CFIndex v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const __CFNumber *v91;
  const __CFString *v92;
  uint64_t v93;
  const __CFString *v94;
  uint64_t MediaSelectionOptionDictionary;
  int v96;
  CFMutableArrayRef v97;
  __CFArray *v98;
  const __CFArray *v99;
  const __CFArray *v100;
  uint64_t v101;
  BOOL v102;
  int v103;
  const void *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  const __CFArray *v108;
  int v109;
  uint64_t v110;
  CFMutableArrayRef v111;
  CFIndex v114;
  uint64_t v115;
  const __CFString *v116;
  CFTypeRef v117;
  const __CFString *v118;
  CFDictionaryRef v119;
  unsigned int (*v120)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  CFNumberRef v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t, CFTypeRef *, void **);
  uint64_t MediaSelectionGroupWithOptions;
  int *v125;
  const __CFArray *v126;
  CFMutableArrayRef v127;
  const void *ConcatenationOfTwoArrays;
  const void *v129;
  const void *v130;
  CFMutableArrayRef Mutable;
  __CFArray *MutableCopy;
  CFMutableArrayRef v133;
  int *v134;
  unsigned int (*v135)(uint64_t, _QWORD, uint64_t, CFTypeRef *, unsigned int *);
  unsigned int (*v137)(uint64_t, _QWORD, uint64_t, CFTypeRef *, unsigned int *);
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v139;
  CFIndex v140;
  unsigned int (*v141)(uint64_t, uint64_t, uint64_t, _QWORD, CFDictionaryRef *);
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  char *v146;
  int *v147;
  int v148;
  unsigned int (*v149)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  CFNumberRef v150;
  uint64_t v151;
  int *v152;
  CFArrayRef v153;
  CFDictionaryRef v154;
  void *v155;
  uint64_t v156;
  CFIndex Count;
  CFIndex v158;
  CFIndex v159;
  uint64_t v160;
  CFIndex v162;
  __CFArray *v163;
  CFIndex idx;
  uint64_t v165;
  const __CFArray *Value;
  void *v167;
  __CFArray *v168;
  const __CFNumber *number;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  CFIndex v174;
  const __CFArray *v175;
  const __CFArray *theArray;
  uint64_t DictionaryValue;
  __CFArray *cf;
  uint64_t v180;
  unsigned __int8 v181;
  CFIndex v182;
  CFIndex v183;
  __CFArray *v184;
  const __CFArray *v185;
  const __CFNumber *ValueAtIndex;
  CFMutableArrayRef v187;
  uint64_t v188;
  uint64_t v189;
  const __CFArray *v190;
  int v191;
  unsigned int valuePtr;
  CFTypeRef v193;
  CFTypeRef v194;
  __CFDictionary *v195;
  __CFArray *v196;
  unsigned int v197;
  __CFDictionary *v198;
  CFDictionaryRef v199;
  void *v200;
  __CFArray *v201;
  const __CFDictionary *v202;
  const __CFArray *v203;
  const __CFArray *v204;
  uint64_t v205;
  __CFArray *v206;
  __CFDictionary *v207;
  __CFArray *v208;
  uint64_t v209;
  CMTextDisplayFlags displayFlagsOut[2];
  CFDictionaryRef v211;
  void *values;
  int *v213[2];
  CFRange v214;

  v202 = 0;
  v203 = 0;
  v200 = 0;
  v201 = 0;
  v198 = 0;
  v199 = 0;
  v197 = 0;
  v195 = 0;
  v196 = 0;
  v193 = 0;
  v194 = 0;
  valuePtr = 0;
  if (!a1)
  {
    MediaSelectionOptionDictionary = FigSignalErrorAt();
    v17 = 0;
    v129 = 0;
    v168 = 0;
    v121 = 0;
    ConcatenationOfTwoArrays = 0;
    if ((_DWORD)MediaSelectionOptionDictionary)
      goto LABEL_322;
    goto LABEL_351;
  }
  v5 = a1;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  v8 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    v8(FigBaseObject, CFSTR("AlternateGroupArray"), v6, &v203);
  v9 = FigFormatReaderGetFigBaseObject(v5);
  v10 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v10)
    v10(v9, CFSTR("TrackReferenceDictionary"), v6, &v202);
  if (v202)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v202, CFSTR("forc"));
    v175 = (const __CFArray *)CFDictionaryGetValue(v202, CFSTR("folw"));
    v190 = (const __CFArray *)CFDictionaryGetValue(v202, CFSTR("fall"));
  }
  else
  {
    v190 = 0;
    v175 = 0;
    Value = 0;
  }
  if (!v203 || (Count = CFArrayGetCount(v203), Count < 1))
  {
    v167 = 0;
    v168 = 0;
    v12 = 0;
    v160 = -1;
    idx = -1;
LABEL_299:
    FPSupport_GetDefaultTrackIDForMediaType(v5, 1668047728, (uint64_t)&v197, 0);
    if (v197
      && (v120 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 64)) != 0
      && v120(v5, 1, 1668047728, 0, 0) == -12843)
    {
      LODWORD(values) = 0;
      v213[0] = 0;
      v121 = CFNumberCreate(v6, kCFNumberSInt32Type, &v197);
      if (!v121)
      {
        MediaSelectionGroupWithOptions = FigSignalErrorAt();
        goto LABEL_437;
      }
      v122 = v197;
      v123 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 56);
      if (!v123)
      {
        MediaSelectionOptionDictionary = 4294954514;
LABEL_409:
        v17 = 0;
        goto LABEL_320;
      }
      MediaSelectionGroupWithOptions = v123(v5, v122, &v193, &values);
      if ((_DWORD)MediaSelectionGroupWithOptions)
      {
LABEL_437:
        MediaSelectionOptionDictionary = MediaSelectionGroupWithOptions;
        goto LABEL_409;
      }
      if (!TrackIsAMemberOfAnyAlternateTrackGroup((uint64_t)v193))
      {
        MediaSelectionGroupWithOptions = CopyReferencedTrackIDs(v121, v175, (__CFArray **)v213);
        if ((_DWORD)MediaSelectionGroupWithOptions)
          goto LABEL_437;
        v125 = v213[0];
        MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary((uint64_t)v193, v121, 0, 0, 1668047728, 0, 0, 0, (uint64_t)v213[0], 0, 0, &v195);
        if (v125)
          CFRelease(v125);
        if ((_DWORD)MediaSelectionOptionDictionary)
          goto LABEL_409;
      }
      if (v193)
      {
        CFRelease(v193);
        v193 = 0;
      }
    }
    else
    {
LABEL_312:
      v121 = 0;
    }
    if (idx == -1)
    {
      v137 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 64);
      if (v137)
      {
        if (!v137(v5, 0, 1935832172, &v194, &valuePtr))
        {
          v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 64);
          if (v138 && v138(v5, 1, 1935832172, 0, 0) == -12843)
          {
            v139 = a3;
            v140 = v12;
            LODWORD(v211) = 0;
            values = 0;
            v213[0] = 0;
            v141 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
            if (v141)
            {
              v142 = 0;
              v143 = 1;
              v144 = 1;
              do
              {
                v145 = v142;
                v142 = v143;
                if (v141(v5, v145, 1952807028, 0, &v211))
                  break;
                if ((v144 & 1) != 0)
                  FCSupport_GetListOfChapterTitleTrackIDs(v5, (uint64_t *)&values, v213, 0);
                v146 = (char *)values;
                v12 = v140;
                a3 = v139;
                if ((uint64_t)values < 1)
                {
LABEL_411:
                  free(v213[0]);
                  goto LABEL_412;
                }
                v147 = v213[0];
                while (1)
                {
                  v148 = *v147++;
                  if (v148 == (_DWORD)v211)
                    break;
                  if (!--v146)
                    goto LABEL_411;
                }
                ++v143;
                v144 = 0;
                v141 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
              }
              while (v141);
            }
            free(v213[0]);
            v12 = v140;
            a3 = v139;
            if (!TrackIsAMemberOfAnyAlternateTrackGroup((uint64_t)v194))
            {
              MediaSelectionGroupWithOptions = SynthesizeOptionsForSoloSubtitleTrack((uint64_t)v194, valuePtr, Value, v175, &v196);
              if ((_DWORD)MediaSelectionGroupWithOptions)
                goto LABEL_437;
            }
          }
LABEL_412:
          if (v194)
          {
            CFRelease(v194);
            v194 = 0;
          }
        }
      }
    }
    v126 = v196;
    if (!a3 && !v195 && !v196)
    {
      v127 = v168;
LABEL_337:
      v168 = v127;
      if (!v127)
      {
LABEL_343:
        v129 = v167;
        ConcatenationOfTwoArrays = 0;
        MediaSelectionOptionDictionary = 0;
        if (idx < 0 || v160 != -1)
        {
          v17 = 0;
          goto LABEL_351;
        }
        v135 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *, unsigned int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (!v135 || v135(v5, 0, 1936684398, &v194, &valuePtr))
        {
          MediaSelectionOptionDictionary = 0;
          ConcatenationOfTwoArrays = 0;
          goto LABEL_348;
        }
        v149 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 64);
        if (!v149)
          goto LABEL_405;
        ConcatenationOfTwoArrays = 0;
        if (v149(v5, 1, 1936684398, 0, 0) != -12843)
        {
LABEL_406:
          if (v194)
          {
            CFRelease(v194);
            MediaSelectionOptionDictionary = 0;
            v17 = 0;
            v194 = 0;
            goto LABEL_349;
          }
          MediaSelectionOptionDictionary = 0;
LABEL_348:
          v17 = 0;
LABEL_349:
          v129 = v167;
          goto LABEL_351;
        }
        if (TrackIsAMemberOfAnyAlternateTrackGroup((uint64_t)v194))
        {
LABEL_405:
          ConcatenationOfTwoArrays = 0;
          goto LABEL_406;
        }
        values = 0;
        v213[0] = 0;
        v211 = 0;
        v150 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
        ConcatenationOfTwoArrays = v150;
        if (v150)
        {
          v151 = CopyReferencedTrackIDs(v150, v175, (__CFArray **)v213);
          if ((_DWORD)v151)
          {
LABEL_435:
            MediaSelectionOptionDictionary = v151;
            goto LABEL_426;
          }
          v152 = v213[0];
          MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary((uint64_t)v194, ConcatenationOfTwoArrays, 0, 0, 1936684398, 1, 0, 0, (uint64_t)v213[0], 0, 0, (__CFDictionary **)&values);
          if (v152)
            CFRelease(v152);
          if ((_DWORD)MediaSelectionOptionDictionary)
            goto LABEL_426;
          v153 = CFArrayCreate(v6, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
          if (values)
            CFRelease(values);
          if (v153)
          {
            MediaSelectionOptionDictionary = CreateMediaSelectionGroupWithOptions(CFSTR("SoloAudioGroup"), (void *)*MEMORY[0x1E0C9AE50], CFSTR("public.audible"), v153, &v211);
            CFRelease(v153);
            if (!(_DWORD)MediaSelectionOptionDictionary)
            {
              v154 = v211;
              MediaSelectionOptionDictionary = InsertGroupIntoMediaSelectionArray(&v201, v12, v211);
              if (v154)
                CFRelease(v154);
              if (!(_DWORD)MediaSelectionOptionDictionary)
                goto LABEL_406;
            }
LABEL_426:
            v17 = 0;
            goto LABEL_321;
          }
        }
LABEL_434:
        v151 = FigSignalErrorAt();
        goto LABEL_435;
      }
      v213[0] = 0;
      MediaSelectionGroupWithOptions = CreateMediaSelectionGroupWithOptions(v167, (void *)*MEMORY[0x1E0C9AE50], CFSTR("public.legible"), v127, (CFDictionaryRef *)v213);
      if (!(_DWORD)MediaSelectionGroupWithOptions)
      {
        v134 = v213[0];
        MediaSelectionOptionDictionary = InsertGroupIntoMediaSelectionArray(&v201, idx, v213[0]);
        if (v134)
          CFRelease(v134);
        if ((_DWORD)MediaSelectionOptionDictionary)
          goto LABEL_409;
        ++v12;
        goto LABEL_343;
      }
      goto LABEL_437;
    }
    Mutable = v168;
    if (idx < 0)
    {
      v167 = (void *)CFRetain(CFSTR("SynthesizedLegibleGroup"));
      Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
        goto LABEL_401;
      idx = v12;
      if (a3)
      {
LABEL_326:
        v168 = Mutable;
        ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
        if (!ConcatenationOfTwoArrays)
          goto LABEL_434;
        MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
        v133 = MutableCopy;
        if (MutableCopy)
          CFRetain(MutableCopy);
        if (v168)
          CFRelease(v168);
        if (v133)
        {
          CFRelease(v133);
          CFRelease(ConcatenationOfTwoArrays);
          v126 = v196;
          if (!v196)
          {
LABEL_334:
            if (v195)
              CFArrayAppendValue(v133, v195);
            v127 = v133;
            goto LABEL_337;
          }
LABEL_333:
          v214.length = CFArrayGetCount(v126);
          v214.location = 0;
          CFArrayAppendArray(v133, v126, v214);
          goto LABEL_334;
        }
        CFRelease(ConcatenationOfTwoArrays);
LABEL_401:
        MediaSelectionOptionDictionary = FigSignalErrorAt();
        v17 = 0;
        v168 = 0;
        goto LABEL_320;
      }
    }
    else if (a3)
    {
      goto LABEL_326;
    }
    v133 = Mutable;
    if (!v126)
      goto LABEL_334;
    goto LABEL_333;
  }
  v11 = 0;
  v172 = 0;
  v167 = 0;
  v168 = 0;
  v12 = 0;
  v155 = (void *)*MEMORY[0x1E0C9AE50];
  v156 = a3;
  v160 = -1;
  idx = -1;
  v189 = (uint64_t)v6;
  v188 = v5;
LABEL_12:
  v158 = v11;
  v159 = v12;
  theArray = (const __CFArray *)CFArrayGetValueAtIndex(v203, v11);
  v13 = CFArrayGetCount(theArray);
  v14 = v13;
  if (v13 < 1)
  {
    v17 = 0;
    v180 = 0;
    v171 = 0;
    v165 = 0;
    goto LABEL_264;
  }
  v165 = 0;
  v171 = 0;
  v180 = 0;
  v181 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  IsEnabled = 0;
  v174 = v13;
  while (1)
  {
    v191 = 0;
    v183 = v16;
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v16);
    CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    v19 = valuePtr;
    v20 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 56);
    if (!v20)
    {
LABEL_318:
      MediaSelectionOptionDictionary = 4294954514;
      goto LABEL_319;
    }
    inserted = v20(v5, v19, &v194, &v191);
    if ((_DWORD)inserted)
      goto LABEL_428;
    if ((v15 & 1) == 0)
    {
      v22 = FigTrackReaderGetFigBaseObject(v194);
      v23 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
      if (!v23)
        goto LABEL_318;
      inserted = v23(v22, CFSTR("AlternateGroupID"), v6, &v200);
      if ((_DWORD)inserted)
        goto LABEL_428;
      v17 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
      if (!v17)
      {
        inserted = FigSignalErrorAt();
        goto LABEL_428;
      }
    }
    FigMediaCharacteristicsGetMajorIntrinsicCharacteristicForMediaType(v191);
    v184 = v17;
    if (!a2)
    {
      v43 = 0;
      if (v181)
      {
        v42 = 0;
        IsEnabled = 0;
        v44 = ValueAtIndex;
        goto LABEL_90;
      }
      v44 = ValueAtIndex;
LABEL_89:
      IsEnabled = TrackIsEnabled((uint64_t)v194);
      v42 = 0;
      v181 = IsEnabled;
      goto LABEL_90;
    }
    if (v190)
    {
      v24 = valuePtr;
      v25 = CFArrayGetCount(v190);
      if (v25 >= 2)
      {
        v26 = v25;
        v27 = 1;
        while (1)
        {
          v28 = (const __CFNumber *)CFArrayGetValueAtIndex(v190, v27 - 1);
          if (v28)
          {
            v29 = v28;
            v30 = CFGetTypeID(v28);
            if (v30 == CFNumberGetTypeID())
              break;
          }
LABEL_40:
          v27 += 2;
          if (v27 >= v26)
            goto LABEL_41;
        }
        LODWORD(v211) = 0;
        values = 0;
        v213[0] = 0;
        CFNumberGetValue(v29, kCFNumberSInt32Type, &v211);
        v31 = v211;
        v32 = *(unsigned int (**)(uint64_t, uint64_t, int **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 56);
        if (v32)
        {
          if (!v32(v5, v31, v213, 0))
          {
            v33 = FigTrackReaderGetFigBaseObject(v213[0]);
            v34 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v34)
              v34(v33, CFSTR("AlternateGroupID"), v6, &values);
          }
        }
        if (!FigCFEqual())
          goto LABEL_34;
        v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v190, v27);
        v36 = v35;
        if (!v35)
          goto LABEL_35;
        v37 = CFGetTypeID(v35);
        if (v37 == CFNumberGetTypeID())
        {
          displayFlagsOut[0] = 0;
          CFNumberGetValue(v36, kCFNumberSInt32Type, displayFlagsOut);
          LODWORD(v36) = displayFlagsOut[0] == v24;
        }
        else
        {
LABEL_34:
          LODWORD(v36) = 0;
        }
LABEL_35:
        if (v213[0])
          CFRelease(v213[0]);
        if (values)
          CFRelease(values);
        if ((_DWORD)v36)
        {
          v42 = 0;
          v17 = v184;
          goto LABEL_235;
        }
        goto LABEL_40;
      }
    }
LABEL_41:
    v38 = FigCFEqual();
    values = ValueAtIndex;
    v39 = CFArrayCreate(v6, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (!v39)
    {
      FigSignalErrorAt();
      goto LABEL_46;
    }
    v40 = v39;
    v41 = (__CFArray *)FigCFArrayCreateMutableCopy();
    if (!v41)
    {
      FigSignalErrorAt();
      goto LABEL_45;
    }
    v42 = v41;
    AppendFallbacksOfTracks(v40, v190, v41);
    if (CFArrayGetCount(v42) == 1)
    {
      CFRelease(v42);
LABEL_45:
      CFRelease(v40);
LABEL_46:
      v43 = 0;
      v42 = 0;
      goto LABEL_86;
    }
    v45 = CFArrayGetCount(v42);
    if (v45 >= 1)
    {
      v46 = v45;
      v47 = 0;
      v48 = 0;
      IsEnabled = 0;
      while (2)
      {
        LODWORD(v208) = 0;
        v211 = 0;
        values = (void *)CFArrayGetValueAtIndex(v42, v47);
        CFNumberGetValue((CFNumberRef)values, kCFNumberSInt32Type, &v208);
        v49 = v208;
        v50 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 56);
        if (v50)
          v50(v5, v49, &v211, 0);
        if (!v211)
          goto LABEL_70;
        v51 = TrackIsEnabled((uint64_t)v211);
        v52 = v211;
        if (v38)
        {
          v213[0] = 0;
          v53 = FigTrackReaderGetFigBaseObject(v211);
          v54 = *(void (**)(uint64_t, const __CFString *, uint64_t, int **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
          if (!v54)
            goto LABEL_62;
          v54(v53, CFSTR("TrackFormatDescriptionArray"), v189, v213);
          if (!v213[0])
          {
            v59 = 0;
            goto LABEL_68;
          }
          v55 = CFArrayGetCount((CFArrayRef)v213[0]);
          if (v55 < 1)
          {
LABEL_62:
            v59 = 0;
            goto LABEL_66;
          }
          v56 = v55;
          v57 = 0;
          while (1)
          {
            v58 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)v213[0], v57);
            displayFlagsOut[0] = 0;
            if (!CMTextFormatDescriptionGetDisplayFlags(v58, displayFlagsOut))
              break;
            if (v56 == ++v57)
            {
              v59 = 0;
              goto LABEL_65;
            }
          }
          v59 = 1;
LABEL_65:
          v5 = v188;
LABEL_66:
          if (v213[0])
            CFRelease(v213[0]);
LABEL_68:
          v48 |= v59;
          v52 = v211;
        }
        IsEnabled |= v51;
        CFRelease(v52);
LABEL_70:
        if (v48)
          v60 = 1;
        else
          v60 = v38 == 0;
        if (v60 && IsEnabled != 0)
          goto LABEL_82;
        if (++v47 == v46)
          goto LABEL_82;
        continue;
      }
    }
    IsEnabled = 0;
    v48 = 0;
LABEL_82:
    CFRelease(v40);
    v43 = v38 ? v48 : 0;
    v6 = (const __CFAllocator *)v189;
LABEL_86:
    v17 = v184;
    v44 = ValueAtIndex;
    if (v181)
    {
      IsEnabled = 0;
      goto LABEL_90;
    }
    v181 = IsEnabled;
    if (!v42)
      goto LABEL_89;
LABEL_90:
    if (v191 != 1936684398)
      break;
    v204 = 0;
    v173 = (uint64_t)v194;
    v62 = CopyAudioCompatibleCompositionPresetArrayOfTrack((uint64_t)v194, (CFIndex *)&v204);
    v63 = v204;
    if ((_DWORD)v62)
    {
      MediaSelectionOptionDictionary = v62;
      if (v204)
        goto LABEL_233;
      goto LABEL_234;
    }
    v207 = 0;
    v208 = 0;
    v206 = 0;
    v64 = CopyReferencedTrackIDs(ValueAtIndex, v175, &v208);
    if ((_DWORD)v64)
    {
      MediaSelectionOptionDictionary = v64;
LABEL_219:
      v100 = 0;
      v98 = 0;
      v111 = 0;
      goto LABEL_220;
    }
    if (!v63 || (v65 = CFArrayGetCount(v63)) == 0)
    {
      MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary(v173, ValueAtIndex, 0, 0, 1936684398, IsEnabled, 0, 0, (uint64_t)v208, v42, 0, &v207);
      if (!(_DWORD)MediaSelectionOptionDictionary)
        CFArrayAppendValue(v17, v207);
      goto LABEL_219;
    }
    if (v65 < 1)
    {
      v100 = 0;
      v98 = 0;
      v111 = 0;
      MediaSelectionOptionDictionary = 0;
      goto LABEL_220;
    }
    v66 = 0;
    v162 = v65;
    while (1)
    {
      FigCFArrayGetValueAtIndex();
      v205 = -1;
      DictionaryValue = FigCFDictionaryGetDictionaryValue();
      if (!DictionaryValue || (NumberValue = FigCFDictionaryGetNumberValue()) == 0)
      {
        MediaSelectionOptionDictionary = FigSignalErrorAt();
        v100 = 0;
        v98 = 0;
        v111 = 0;
        goto LABEL_220;
      }
      number = (const __CFNumber *)NumberValue;
      v170 = v66;
      StringValue = (const __CFString *)FigCFDictionaryGetStringValue();
      v69 = StringValue ? StringValue : CFSTR("und");
      v213[0] = 0;
      if (v208)
      {
        v70 = CFArrayGetCount(v208);
        if (v70 >= 1)
          break;
      }
      v187 = 0;
LABEL_117:
      v5 = v188;
      v77 = FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription((uint64_t)v6, DictionaryValue, &v206);
      if ((_DWORD)v77)
      {
        MediaSelectionOptionDictionary = v77;
        v100 = 0;
        v98 = 0;
        v111 = v187;
        goto LABEL_220;
      }
      v185 = v206;
      *(_QWORD *)displayFlagsOut = 0;
      v211 = 0;
      if (v42)
      {
        v182 = CFArrayGetCount(v42);
        if (v182 < 1)
        {
          MediaSelectionOptionDictionary = 0;
          cf = 0;
          v100 = 0;
          v101 = v170;
        }
        else
        {
          v78 = 0;
          cf = 0;
          v79 = 0;
          while (1)
          {
            v209 = 0;
            FigCFArrayGetInt32AtIndex();
            v80 = HIDWORD(v209);
            v81 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 56);
            if (!v81)
            {
              MediaSelectionOptionDictionary = 4294954514;
LABEL_174:
              if (v79)
                goto LABEL_175;
              goto LABEL_176;
            }
            v82 = v81(v5, v80, &v211, &v209);
            if ((_DWORD)v82)
              break;
            if ((_DWORD)v209 != 1936684398)
              goto LABEL_164;
            v82 = CopyAudioCompatibleCompositionPresetArrayOfTrack((uint64_t)v211, (CFIndex *)displayFlagsOut);
            if ((_DWORD)v82)
              break;
            v83 = *(const __CFArray **)displayFlagsOut;
            if (!*(_QWORD *)displayFlagsOut || !CFArrayGetCount(*(CFArrayRef *)displayFlagsOut))
            {
              if (!TrackMatchesPrimaryLanguage((uint64_t)v211, v69))
                goto LABEL_161;
              v213[0] = 0;
              if (FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForTrackReader((uint64_t)v6, (uint64_t)v211, v213))v96 = 0;
              else
                v96 = MediaCharacteristicsArraysMatch((CFArrayRef)v213[0], v185);
              if (v213[0])
                CFRelease(v213[0]);
              if (!v96)
                goto LABEL_161;
LABEL_156:
              if (v79 || (v79 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378])) != 0)
              {
                v97 = cf;
                if (cf || (v97 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378])) != 0)
                {
                  FigCFArrayAppendInt32();
                  cf = v97;
                  FigCFArrayAppendCFIndex();
                  v83 = *(const __CFArray **)displayFlagsOut;
                  goto LABEL_161;
                }
                MediaSelectionOptionDictionary = FigSignalErrorAt();
                cf = 0;
                goto LABEL_175;
              }
              MediaSelectionOptionDictionary = FigSignalErrorAt();
              goto LABEL_176;
            }
            v84 = -1;
            values = (void *)-1;
            v213[0] = 0;
            v85 = CFArrayGetCount(v83);
            if (v85 < 1)
            {
              MediaSelectionOptionDictionary = 0;
              goto LABEL_152;
            }
            v86 = v85;
            v163 = v79;
            v87 = 0;
            while (1)
            {
              FigCFArrayGetValueAtIndex();
              v88 = FigCFDictionaryGetDictionaryValue();
              if (!v88 || (v89 = v88, (v90 = FigCFDictionaryGetNumberValue()) == 0))
              {
                v93 = FigSignalErrorAt();
LABEL_169:
                MediaSelectionOptionDictionary = v93;
LABEL_141:
                v84 = -1;
                goto LABEL_151;
              }
              v91 = (const __CFNumber *)v90;
              v92 = (const __CFString *)FigCFDictionaryGetStringValue();
              v93 = FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription(v189, v89, (__CFArray **)v213);
              if ((_DWORD)v93)
                goto LABEL_169;
              v94 = v92 ? v92 : CFSTR("und");
              if (CFStringCompare(v94, v69, 1uLL) == kCFCompareEqualTo
                && MediaCharacteristicsArraysMatch((CFArrayRef)v213[0], v185))
              {
                break;
              }
              if (v213[0])
              {
                CFRelease(v213[0]);
                v213[0] = 0;
              }
              if (v86 == ++v87)
              {
                MediaSelectionOptionDictionary = 0;
                goto LABEL_141;
              }
            }
            CFNumberGetValue(v91, kCFNumberCFIndexType, &values);
            MediaSelectionOptionDictionary = 0;
            v84 = (uint64_t)values;
LABEL_151:
            v79 = v163;
LABEL_152:
            v6 = (const __CFAllocator *)v189;
            if (v213[0])
              CFRelease(v213[0]);
            if ((_DWORD)MediaSelectionOptionDictionary)
              goto LABEL_174;
            if (v84 != -1)
              goto LABEL_156;
LABEL_161:
            if (v83)
            {
              CFRelease(v83);
              *(_QWORD *)displayFlagsOut = 0;
            }
            v5 = v188;
LABEL_164:
            if (v211)
            {
              CFRelease(v211);
              v211 = 0;
            }
            if (++v78 == v182)
            {
              v100 = v79;
              MediaSelectionOptionDictionary = 0;
              v101 = v170;
              goto LABEL_179;
            }
          }
          MediaSelectionOptionDictionary = v82;
          if (!v79)
            goto LABEL_176;
LABEL_175:
          CFRelease(v79);
LABEL_176:
          v101 = v170;
          if (cf)
            CFRelease(cf);
          v100 = 0;
          cf = 0;
          v5 = v188;
LABEL_179:
          if (*(_QWORD *)displayFlagsOut)
            CFRelease(*(CFTypeRef *)displayFlagsOut);
        }
        if (v211)
          CFRelease(v211);
        v99 = v100;
        v98 = cf;
        if ((_DWORD)MediaSelectionOptionDictionary)
        {
          v111 = v187;
          v6 = (const __CFAllocator *)v189;
          goto LABEL_220;
        }
      }
      else
      {
        v98 = 0;
        v99 = 0;
        v101 = v170;
      }
      CFNumberGetValue(number, kCFNumberCFIndexType, &v205);
      if (IsEnabled)
        v102 = v205 == 0;
      else
        v102 = 0;
      v103 = v102;
      v100 = v99;
      v104 = CreateMediaSelectionOptionDictionary(v173, ValueAtIndex, DictionaryValue, (uint64_t)number, 1936684398, v103, 0, 0, (uint64_t)v187, v99, (uint64_t)v98, &v207);
      if ((_DWORD)v104)
      {
        MediaSelectionOptionDictionary = (uint64_t)v104;
        v111 = v187;
        v6 = (const __CFAllocator *)v189;
        goto LABEL_220;
      }
      CFArrayAppendValue(v184, v207);
      v6 = (const __CFAllocator *)v189;
      if (v207)
      {
        CFRelease(v207);
        v207 = 0;
      }
      if (v98)
        CFRelease(v98);
      if (v100)
        CFRelease(v100);
      if (v206)
      {
        CFRelease(v206);
        v206 = 0;
      }
      if (v187)
        CFRelease(v187);
      v66 = v101 + 1;
      if (v66 == v162)
      {
        v100 = 0;
        v98 = 0;
        v111 = 0;
        MediaSelectionOptionDictionary = 0;
        goto LABEL_220;
      }
    }
    v71 = v70;
    v72 = 0;
    v187 = 0;
    while (1)
    {
      LODWORD(values) = 0;
      FigCFArrayGetInt32AtIndex();
      v73 = values;
      v74 = *(uint64_t (**)(uint64_t, uint64_t, int **, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v74)
      {
        MediaSelectionOptionDictionary = 4294954514;
        goto LABEL_249;
      }
      v75 = v74(v188, v73, v213, 0);
      if ((_DWORD)v75)
      {
        MediaSelectionOptionDictionary = v75;
LABEL_249:
        v5 = v188;
        if (v187)
          CFRelease(v187);
        goto LABEL_219;
      }
      if (TrackMatchesPrimaryLanguage((uint64_t)v213[0], v69))
        break;
LABEL_114:
      if (v71 == ++v72)
        goto LABEL_117;
    }
    v76 = v187;
    if (v187 || (v76 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378])) != 0)
    {
      v187 = v76;
      FigCFArrayAppendInt32();
      goto LABEL_114;
    }
    v105 = FigSignalErrorAt();
    v187 = 0;
    if (!(_DWORD)v105)
      goto LABEL_117;
    MediaSelectionOptionDictionary = v105;
    v111 = 0;
    v5 = v188;
    v100 = 0;
    v98 = 0;
LABEL_220:
    if (v207)
      CFRelease(v207);
    if (v111)
      CFRelease(v111);
    v108 = v100;
    if (v98)
      CFRelease(v98);
    v17 = v184;
    if (v108)
      CFRelease(v108);
    if (v206)
      CFRelease(v206);
    if (v208)
      CFRelease(v208);
    v63 = v204;
    if (v204)
LABEL_233:
      CFRelease(v63);
LABEL_234:
    if ((_DWORD)MediaSelectionOptionDictionary)
      goto LABEL_319;
LABEL_235:
    if (FigCFEqual())
    {
      ++v180;
      v14 = v174;
    }
    else
    {
      v14 = v174;
      if (FigCFEqual())
      {
        ++v171;
      }
      else
      {
        v109 = FigCFEqual();
        v110 = v165;
        if (v109)
          v110 = v165 + 1;
        v165 = v110;
      }
    }
    if (v194)
    {
      CFRelease(v194);
      v194 = 0;
    }
    if (v42)
      CFRelease(v42);
    v16 = v183 + 1;
    v15 = 1;
    if (v183 + 1 == v14)
    {
LABEL_264:
      if (v171 != v14 || v167 != 0 || v168 != 0)
      {
        a3 = v156;
        v114 = v158;
        if (v180 == v14)
        {
          v115 = v160;
          if (v160 == -1)
            v115 = v158;
          v160 = v115;
          v116 = CFSTR("public.audible");
        }
        else
        {
          v118 = CFSTR("public.visual");
          if (v165 != v14)
            v118 = 0;
          if (v171 == v14)
            v116 = CFSTR("public.legible");
          else
            v116 = v118;
        }
        inserted = CreateMediaSelectionGroupWithOptions(v200, v155, v116, v17, &v199);
        if (!(_DWORD)inserted)
        {
          v119 = v199;
          inserted = InsertGroupIntoMediaSelectionArray(&v201, v159, v199);
          if (!(_DWORD)inserted)
          {
            v12 = v159 + 1;
            if (!v119)
              goto LABEL_291;
LABEL_290:
            CFRelease(v119);
            v199 = 0;
            goto LABEL_291;
          }
        }
LABEL_428:
        MediaSelectionOptionDictionary = inserted;
        goto LABEL_319;
      }
      v117 = v200;
      a3 = v156;
      v114 = v158;
      if (v200)
        v117 = CFRetain(v200);
      v12 = v159;
      v167 = (void *)v117;
      if (v17)
        v168 = (__CFArray *)CFRetain(v17);
      else
        v168 = 0;
      v119 = v199;
      idx = v158;
      if (v199)
        goto LABEL_290;
LABEL_291:
      if (v200)
      {
        CFRelease(v200);
        v200 = 0;
      }
      if (v17)
        CFRelease(v17);
      v11 = v114 + 1;
      if (v11 == Count)
      {
        if (!(_BYTE)v172)
          goto LABEL_299;
        goto LABEL_312;
      }
      goto LABEL_12;
    }
  }
  if (v191 == 1935832172)
  {
    inserted = AddOptionsForSubtitleTrack((uint64_t)v194, v44, Value, v175, IsEnabled, v42, v17);
    if (!(_DWORD)inserted)
      goto LABEL_235;
    goto LABEL_428;
  }
  v213[0] = 0;
  v106 = v172;
  if (v191 == 1668047728)
    v106 = 1;
  v172 = v106;
  v107 = CopyReferencedTrackIDs(v44, v175, (__CFArray **)v213);
  if ((_DWORD)v107)
  {
    MediaSelectionOptionDictionary = v107;
  }
  else
  {
    MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary((uint64_t)v194, v44, 0, 0, v191, IsEnabled, v43, 0, (uint64_t)v213[0], v42, 0, &v198);
    if (v213[0])
      CFRelease(v213[0]);
    if (!(_DWORD)MediaSelectionOptionDictionary)
    {
      CFArrayAppendValue(v17, v198);
      if (v198)
      {
        CFRelease(v198);
        v198 = 0;
      }
      goto LABEL_235;
    }
  }
  if (v42)
    CFRelease(v42);
LABEL_319:
  v121 = 0;
LABEL_320:
  ConcatenationOfTwoArrays = 0;
LABEL_321:
  v129 = v167;
  if ((_DWORD)MediaSelectionOptionDictionary)
  {
LABEL_322:
    if (v201)
    {
      v130 = v129;
      CFRelease(v201);
      v129 = v130;
      v201 = 0;
    }
  }
LABEL_351:
  if (v129)
    CFRelease(v129);
  if (v168)
    CFRelease(v168);
  if (v196)
    CFRelease(v196);
  if (v195)
    CFRelease(v195);
  if (v121)
    CFRelease(v121);
  if (ConcatenationOfTwoArrays)
    CFRelease(ConcatenationOfTwoArrays);
  if (v199)
    CFRelease(v199);
  if (v200)
    CFRelease(v200);
  if (v17)
    CFRelease(v17);
  if (v202)
    CFRelease(v202);
  if (v203)
    CFRelease(v203);
  if (v194)
    CFRelease(v194);
  if (v193)
    CFRelease(v193);
  *a4 = v201;
  return MediaSelectionOptionDictionary;
}

uint64_t TrackIsEnabled(uint64_t a1)
{
  uint64_t FigBaseObject;
  unsigned int (*v2)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  BOOL v3;
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v2 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
  if (!v2)
    return 0;
  if (v2(FigBaseObject, CFSTR("TrackEnabled"), *MEMORY[0x1E0C9AE00], &cf))
    v3 = 0;
  else
    v3 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v4 = v3;
  if (cf)
    CFRelease(cf);
  return v4;
}

uint64_t AddOptionsForSubtitleTrack(uint64_t a1, const void *a2, const __CFArray *a3, const __CFArray *a4, int a5, const __CFArray *a6, __CFArray *a7)
{
  uint64_t v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v15;
  int v16;
  CFIndex Count;
  CFIndex v18;
  CFIndex v19;
  char v20;
  const opaqueCMFormatDescription *ValueAtIndex;
  uint64_t DisplayFlags;
  uint64_t MediaSelectionOptionDictionary;
  BOOL v24;
  int v25;
  uint64_t v27;
  __CFArray *v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  const void *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v37;
  CFTypeRef v39;
  CFTypeRef cf;
  __CFArray *v41;
  CMTextDisplayFlags displayFlagsOut;
  CFArrayRef theArray;

  v39 = 0;
  v12 = a1;
  cf = 0;
  v41 = 0;
  theArray = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  v37 = v12;
  if (!v14)
  {
    v16 = a5;
    v20 = 1;
    MediaSelectionOptionDictionary = 4294954514;
    goto LABEL_25;
  }
  v15 = v14(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
  if ((_DWORD)v15)
  {
    MediaSelectionOptionDictionary = v15;
    v16 = a5;
    goto LABEL_24;
  }
  if (!theArray)
  {
    v27 = CopyReferencedTrackIDs(a2, a4, &v41);
    if ((_DWORD)v27)
      goto LABEL_48;
    goto LABEL_30;
  }
  v16 = a5;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
    MediaSelectionOptionDictionary = 0;
LABEL_24:
    v20 = 1;
    goto LABEL_25;
  }
  v18 = Count;
  v19 = 0;
  v20 = 1;
  while (1)
  {
    displayFlagsOut = 0;
    ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v19);
    DisplayFlags = CMTextFormatDescriptionGetDisplayFlags(ValueAtIndex, &displayFlagsOut);
    MediaSelectionOptionDictionary = DisplayFlags;
    v24 = (int)displayFlagsOut > -1 && (_DWORD)DisplayFlags == 0;
    v25 = ~((int)displayFlagsOut >> 31) & 7;
    if (v24)
      v20 = 0;
    if ((_DWORD)DisplayFlags)
      v25 = 4;
    if (v25)
      break;
    if (v18 == ++v19)
      goto LABEL_25;
  }
  if (v25 != 4 && v25 != 7)
  {
    v27 = CopyReferencedTrackIDs(a2, a4, &v41);
    v12 = v37;
    if ((_DWORD)v27)
      goto LABEL_48;
    goto LABEL_35;
  }
LABEL_25:
  if (theArray)
    CFRelease(theArray);
  if ((_DWORD)MediaSelectionOptionDictionary)
    goto LABEL_31;
  v27 = CopyReferencedTrackIDs(a2, a4, &v41);
  if ((_DWORD)v27)
  {
LABEL_48:
    MediaSelectionOptionDictionary = v27;
LABEL_31:
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v39)
    {
      CFRelease(v39);
      v39 = 0;
    }
    goto LABEL_50;
  }
  a5 = v16;
  v12 = v37;
  if (v20)
  {
LABEL_30:
    v28 = v41;
    MediaSelectionOptionDictionary = (uint64_t)CreateMediaSelectionOptionDictionary(v12, a2, 0, 0, 1935832172, a5, 0, 0, (uint64_t)v41, a6, 0, (__CFDictionary **)&cf);
    if (!(_DWORD)MediaSelectionOptionDictionary)
      goto LABEL_51;
    goto LABEL_31;
  }
LABEL_35:
  if (a3 && (v29 = CFArrayGetCount(a3), v29 >= 1))
  {
    v30 = v29;
    v31 = 0;
    while (1)
    {
      v32 = CFArrayGetValueAtIndex(a3, v31);
      if (v32)
      {
        if (CFEqual(a2, v32))
          break;
      }
      v31 += 2;
      if (v31 >= v30)
        goto LABEL_41;
    }
    v34 = 0;
    v33 = 1;
  }
  else
  {
LABEL_41:
    v33 = 0;
    v34 = 1;
  }
  if (a5)
    v35 = v33;
  else
    v35 = 0;
  v27 = (uint64_t)CreateMediaSelectionOptionDictionary(v12, a2, 0, 0, 1935832172, v35, 0, 1, (uint64_t)v41, a6, 0, (__CFDictionary **)&cf);
  if ((_DWORD)v27)
    goto LABEL_48;
  if (v34)
  {
    v27 = (uint64_t)CreateMediaSelectionOptionDictionary(v12, a2, 0, 0, 1935832172, a5, 0, 0, 0, a6, 0, (__CFDictionary **)&v39);
    MediaSelectionOptionDictionary = 0;
    if ((_DWORD)v27)
      goto LABEL_48;
  }
  else
  {
    MediaSelectionOptionDictionary = 0;
  }
LABEL_50:
  v28 = v41;
LABEL_51:
  if (v28)
    CFRelease(v28);
  if (cf)
  {
    CFArrayAppendValue(a7, cf);
    if (cf)
      CFRelease(cf);
  }
  if (v39)
  {
    CFArrayAppendValue(a7, v39);
    if (v39)
      CFRelease(v39);
  }
  return MediaSelectionOptionDictionary;
}

uint64_t CopyReferencedTrackIDs(const void *a1, CFArrayRef theArray, __CFArray **a3)
{
  CFIndex Count;
  CFIndex v7;
  __CFArray *Mutable;
  const __CFAllocator *v9;
  CFIndex v10;
  const CFArrayCallBacks *v11;
  const void *ValueAtIndex;
  const void *v13;
  uint64_t result;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 2)
    {
      v7 = Count;
      Mutable = 0;
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = 1;
      v11 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10 - 1);
        if (ValueAtIndex && CFEqual(a1, ValueAtIndex))
        {
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(v9, 0, v11);
            if (!Mutable)
            {
              result = FigSignalErrorAt();
              goto LABEL_12;
            }
          }
          v13 = CFArrayGetValueAtIndex(theArray, v10);
          CFArrayAppendValue(Mutable, v13);
        }
        v10 += 2;
        if (v10 >= v7)
        {
          result = 0;
          goto LABEL_12;
        }
      }
    }
  }
  result = 0;
  Mutable = 0;
LABEL_12:
  *a3 = Mutable;
  return result;
}

const void *CreateMediaSelectionOptionDictionary(uint64_t a1, const void *ValueAtIndex, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, const __CFArray *a10, uint64_t a11, __CFDictionary **a12)
{
  CFIndex Count;
  uint64_t CFStringForOSTypeValue;
  CFTypeRef v20;
  const void *v21;
  uint64_t v22;
  uint64_t StringValue;
  const __CFString *v24;
  unsigned int PackedISO639_2TFromLocaleIdentifier;
  const __CFAllocator *v26;
  const __CFString *StringForLanguageCode;
  CFLocaleIdentifier CanonicalLanguageIdentifierFromString;
  uint64_t v29;
  uint64_t FigBaseObject;
  void (*v31)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v32;
  void (*v33)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFString *v34;
  const void *ISO639_1FromISO639_2T;
  CFLocaleIdentifier v36;
  uint64_t v37;
  CFLocaleIdentifier v38;
  __CFArray *v39;
  uint64_t MutableCopy;
  uint64_t v41;
  void (*v42)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t v46;
  CFTypeRef v47;
  uint64_t v48;
  void (*v49)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *);
  CFIndex v50;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v52;
  CFIndex v53;
  __CFArray *v54;
  const void *v55;
  __CFDictionary *v56;
  CFLocaleIdentifier v57;
  int v58;
  CFIndex v59;
  uint64_t v60;
  const opaqueCMFormatDescription *v61;
  const AudioChannelLayout *ChannelLayout;
  CFIndex v63;
  BOOL v64;
  unint64_t v65;
  CFDataRef v66;
  CFDataRef v67;
  uint64_t v68;
  const void **v69;
  const void **v70;
  const void *v71;
  const void *v72;
  const void *v73;
  __CFDictionary **v74;
  CFLocaleIdentifier v78;
  CFTypeRef v79;
  const __CFString *v80;
  size_t valuePtr;
  CFTypeRef v82;
  CFArrayRef theArray;
  CFTypeRef v84;
  CFTypeRef cf;
  CFTypeRef v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[3];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v98 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95[0] = CFSTR("MediaSelectionOptionsPersistentID");
  v95[1] = CFSTR("MediaSelectionOptionsMediaType");
  v102 = 0;
  v95[2] = CFSTR("MediaSelectionOptionsIsDefault");
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  cf = 0;
  v86 = 0;
  theArray = 0;
  v84 = 0;
  v82 = 0;
  if (!a12)
  {
    v55 = (const void *)FigSignalErrorAt();
    v56 = 0;
    v57 = 0;
    v38 = 0;
LABEL_114:
    v74 = a12;
    goto LABEL_115;
  }
  if (a10)
  {
    Count = CFArrayGetCount(a10);
    if (Count >= 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a10, Count - 1);
      valuePtr = -1;
      a4 = 0;
      if (a11)
        FigCFArrayGetCFIndexAtIndex();
    }
  }
  *(_QWORD *)&v87 = ValueAtIndex;
  CFStringForOSTypeValue = FigGetCFStringForOSTypeValue();
  v20 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
  v21 = (const void *)*MEMORY[0x1E0C9AE40];
  if (a6)
    v22 = *MEMORY[0x1E0C9AE50];
  else
    v22 = *MEMORY[0x1E0C9AE40];
  *((_QWORD *)&v87 + 1) = CFStringForOSTypeValue;
  *(_QWORD *)&v88 = v22;
  v79 = v21;
  if (a3)
  {
    StringValue = FigCFDictionaryGetStringValue();
    if (StringValue)
      v24 = (const __CFString *)StringValue;
    else
      v24 = CFSTR("und");
    PackedISO639_2TFromLocaleIdentifier = FigMetadataGetPackedISO639_2TFromLocaleIdentifier(v24);
    v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    StringForLanguageCode = FigCreateStringForLanguageCode((const __CFAllocator *)*MEMORY[0x1E0C9AE00], PackedISO639_2TFromLocaleIdentifier, 1);
    cf = StringForLanguageCode;
    if (StringForLanguageCode)
      goto LABEL_14;
LABEL_19:
    v78 = 0;
    v29 = 3;
    if (a3)
      goto LABEL_15;
    goto LABEL_20;
  }
  v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v31 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v31)
    v31(FigBaseObject, CFSTR("TrackLanguageCode"), v26, &cf);
  v24 = 0;
  StringForLanguageCode = (const __CFString *)cf;
  if (!cf)
    goto LABEL_19;
LABEL_14:
  *(_QWORD *)&v96 = CFSTR("MediaSelectionOptionsLanguageCode");
  *((_QWORD *)&v88 + 1) = StringForLanguageCode;
  CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(v26, StringForLanguageCode);
  *((_QWORD *)&v96 + 1) = CFSTR("MediaSelectionOptionsUnicodeLanguageCode");
  v78 = CanonicalLanguageIdentifierFromString;
  *(_QWORD *)&v89 = CanonicalLanguageIdentifierFromString;
  v29 = 5;
  if (a3)
  {
LABEL_15:
    v86 = CFRetain(v24);
    goto LABEL_22;
  }
LABEL_20:
  v32 = FigTrackReaderGetFigBaseObject(a1);
  v33 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v33)
    v33(v32, CFSTR("ExtendedLanguageTagString"), v26, &v86);
LABEL_22:
  v34 = (const __CFString *)v86;
  if (!v86 && cf)
  {
    ISO639_1FromISO639_2T = FigMetadataGetISO639_1FromISO639_2T((const __CFString *)cf);
    if (!ISO639_1FromISO639_2T)
      ISO639_1FromISO639_2T = cf;
    v34 = (const __CFString *)CFRetain(ISO639_1FromISO639_2T);
    v86 = v34;
  }
  if (v34)
  {
    v95[v29] = CFSTR("MediaSelectionOptionsExtendedLanguageTag");
    *((_QWORD *)&v87 + v29) = v34;
    v36 = CFLocaleCreateCanonicalLanguageIdentifierFromString(v26, v34);
    v37 = 8 * v29 + 8;
    *(_QWORD *)((char *)v95 + v37) = CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier");
    *(_QWORD *)((char *)&v87 + v37) = v36;
    v38 = v36;
    v29 += 2;
  }
  else
  {
    v38 = 0;
  }
  if (a4)
  {
    v95[v29] = CFSTR("MediaSelectionOptionsAudioCompositionPresetIndex");
    *((_QWORD *)&v87 + v29++) = a4;
  }
  if (a3)
    FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription((uint64_t)v26, a3, (__CFArray **)&v84);
  else
    FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForTrackReader((uint64_t)v26, a1, &v84);
  v39 = (__CFArray *)v84;
  if (a5 == 1668047728)
  {
    MutableCopy = FigCFArrayCreateMutableCopy();
    if (!MutableCopy)
      goto LABEL_132;
    v39 = (__CFArray *)MutableCopy;
    if (!FigCFArrayContainsValue())
      CFArrayAppendValue(v39, CFSTR("public.accessibility.transcribes-spoken-dialog"));
    if (!FigCFArrayContainsValue())
      CFArrayAppendValue(v39, CFSTR("public.accessibility.describes-music-and-sound"));
    if (v84)
      CFRelease(v84);
    v84 = v39;
  }
  else if (!v84)
  {
    goto LABEL_46;
  }
  v95[v29] = CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics");
  *((_QWORD *)&v87 + v29++) = v39;
LABEL_46:
  v41 = FigTrackReaderGetFigBaseObject(a1);
  v42 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v42)
    v42(v41, CFSTR("TrackExcludeFromAutoSelection"), v26, &v82);
  if (v82 == v20 || FigCFArrayContainsValue())
  {
    v95[v29] = CFSTR("MediaSelectionOptionsIsAuxiliaryContent");
    *((_QWORD *)&v87 + v29++) = v20;
  }
  if (a5 == 1935832172 || a7)
  {
    v95[v29] = CFSTR("MediaSelectionOptionsDisplaysNonForcedSubtitles");
    if (a7)
    {
      if (FigCFArrayContainsValue())
      {
        *((_QWORD *)&v87 + v29) = v79;
        v47 = v79;
      }
      else
      {
        *((_QWORD *)&v87 + v29) = v20;
        v47 = v20;
      }
    }
    else
    {
      if (a8)
        v47 = v20;
      else
        v47 = v79;
      *((_QWORD *)&v87 + v29) = v47;
    }
    v46 = v29 + 1;
    v95[v29 + 1] = CFSTR("MediaSelectionOptionsDisplaysForcedSubtitlesOnly");
    if (v47 == v79)
      v44 = v20;
    else
      v44 = v79;
    v45 = 2;
    goto LABEL_70;
  }
  if (a5 == 1952807028)
  {
    v43 = FigCFArrayContainsValue();
    v95[v29] = CFSTR("MediaSelectionOptionsDisplaysForcedSubtitlesOnly");
    if (v43)
      v44 = v20;
    else
      v44 = v79;
    v45 = 1;
    v46 = v29;
LABEL_70:
    *((_QWORD *)&v87 + v46) = v44;
    v29 += v45;
  }
  if (a9)
  {
    v95[v29] = CFSTR("MediaSelectionOptionsAssociatedPersistentIDs");
    *((_QWORD *)&v87 + v29++) = a9;
  }
  if (a10)
  {
    v95[v29] = CFSTR("MediaSelectionOptionsFallbackIDs");
    *((_QWORD *)&v87 + v29++) = a10;
  }
  if (a11)
  {
    v95[v29] = CFSTR("MediaSelectionOptionsAudioCompositionPresetIndexesForFallbackIDs");
    *((_QWORD *)&v87 + v29++) = a11;
  }
  v48 = FigTrackReaderGetFigBaseObject(a1);
  v49 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
  if (v49)
    v49(v48, CFSTR("TrackFormatDescriptionArray"), v26, &theArray);
  if (!theArray)
  {
    v52 = 0;
    v54 = 0;
    goto LABEL_104;
  }
  v50 = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable(v26, v50, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v52 = Mutable;
    if (a5 == 1936684398)
    {
      v53 = CFArrayGetCount(theArray);
      v54 = CFArrayCreateMutable(v26, v53, MEMORY[0x1E0C9B378]);
      if (!v54)
      {
        v55 = (const void *)FigSignalErrorAt();
        v56 = 0;
        v57 = v78;
        goto LABEL_111;
      }
    }
    else
    {
      v54 = 0;
    }
    v80 = v38;
    v58 = CFArrayGetCount(theArray);
    if (v58 >= 1)
    {
      v59 = 0;
      v60 = v58;
      do
      {
        v61 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(theArray, v59);
        CMFormatDescriptionGetMediaSubType(v61);
        FigCFArrayAppendInt32();
        if (a5 == 1936684398)
        {
          valuePtr = 0;
          ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(v61, &valuePtr);
          v63 = valuePtr;
          if (ChannelLayout)
            v64 = valuePtr == 0;
          else
            v64 = 1;
          if (v64)
          {
            v63 = 0;
            valuePtr = 0;
          }
          else
          {
            v65 = 20 * ChannelLayout->mNumberChannelDescriptions + 12;
            if (v65 < valuePtr)
            {
              valuePtr = 20 * ChannelLayout->mNumberChannelDescriptions + 12;
              v63 = v65;
            }
          }
          v66 = CFDataCreate(v26, (const UInt8 *)ChannelLayout, v63);
          if (v66)
          {
            v67 = v66;
            CFArrayAppendValue(v54, v66);
            CFRelease(v67);
          }
        }
        ++v59;
      }
      while (v60 != v59);
    }
    v95[v29] = CFSTR("MediaSelectionOptionsMediaSubTypes");
    *((_QWORD *)&v87 + v29) = v52;
    v68 = v29 + 1;
    if (a5 == 1936684398)
    {
      v95[v68] = CFSTR("MediaSelectionOptionsAudioChannelLayouts");
      *((_QWORD *)&v87 + v68) = v54;
      v29 += 2;
    }
    else
    {
      ++v29;
    }
    v38 = v80;
LABEL_104:
    v56 = CFDictionaryCreateMutable(v26, v29 + 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v56)
    {
      if (v29 >= 1)
      {
        v69 = (const void **)&v87;
        v70 = (const void **)v95;
        do
        {
          v72 = *v70++;
          v71 = v72;
          v73 = *v69++;
          CFDictionaryAddValue(v56, v71, v73);
          --v29;
        }
        while (v29);
      }
      v55 = FigCopyGMLoggingDescriptionForOption(v56);
      CFDictionaryAddValue(v56, CFSTR("MediaSelectionOptionsDebugDescription"), v55);
      v57 = v78;
      if (v55)
      {
        CFRelease(v55);
        v55 = 0;
      }
      if (!v52)
        goto LABEL_112;
    }
    else
    {
      v55 = (const void *)FigSignalErrorAt();
      v57 = v78;
      if (!v52)
      {
LABEL_112:
        if (v54)
          CFRelease(v54);
        goto LABEL_114;
      }
    }
LABEL_111:
    CFRelease(v52);
    goto LABEL_112;
  }
LABEL_132:
  v55 = (const void *)FigSignalErrorAt();
  v56 = 0;
  v74 = a12;
  v57 = v78;
LABEL_115:
  if (cf)
    CFRelease(cf);
  if (v57)
    CFRelease(v57);
  if (v86)
    CFRelease(v86);
  if (v38)
    CFRelease(v38);
  if (v84)
    CFRelease(v84);
  if (v82)
    CFRelease(v82);
  if (theArray)
    CFRelease(theArray);
  if (v74)
    *v74 = v56;
  return v55;
}

uint64_t CreateMediaSelectionGroupWithOptions(void *a1, void *a2, const void *a3, void *a4, CFDictionaryRef *a5)
{
  const __CFAllocator *v6;
  CFArrayRef v7;
  CFArrayRef v8;
  CFIndex v9;
  CFDictionaryRef v10;
  uint64_t v11;
  const void *v13;
  void *values[3];
  CFArrayRef v15;
  void *keys[5];

  keys[4] = *(void **)MEMORY[0x1E0C80C00];
  v13 = a3;
  keys[0] = CFSTR("MediaSelectionGroupID");
  keys[1] = CFSTR("MediaSelectionGroupAllowEmptySelection");
  keys[2] = CFSTR("MediaSelectionGroupOptions");
  keys[3] = CFSTR("MediaSelectionGroupMediaCharacteristics");
  values[0] = a1;
  values[1] = a2;
  values[2] = a4;
  v15 = 0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3)
  {
    v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v13, 1, MEMORY[0x1E0C9B378]);
    if (!v7)
    {
      v11 = FigSignalErrorAt();
      *a5 = 0;
      return v11;
    }
    v8 = v7;
    v15 = v7;
    v9 = 4;
  }
  else
  {
    v8 = 0;
    v9 = 3;
  }
  v10 = CFDictionaryCreate(v6, (const void **)keys, (const void **)values, v9, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v10)
    v11 = 0;
  else
    v11 = FigSignalErrorAt();
  *a5 = v10;
  if (v8)
    CFRelease(v8);
  return v11;
}

uint64_t InsertGroupIntoMediaSelectionArray(__CFArray **a1, CFIndex idx, void *value)
{
  __CFArray *Mutable;

  Mutable = *a1;
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    *a1 = Mutable;
    if (!Mutable)
      return FigSignalErrorAt();
  }
  CFArrayInsertValueAtIndex(Mutable, idx, value);
  return 0;
}

BOOL TrackIsAMemberOfAnyAlternateTrackGroup(uint64_t a1)
{
  int v2;

  v2 = TrackAlternateGroupIDByKey(a1, (uint64_t)CFSTR("DefaultAlternateGroupID"));
  if (!v2)
    v2 = TrackAlternateGroupIDByKey(a1, (uint64_t)CFSTR("ProvisionalAlternateGroupID"));
  return v2 != 0;
}

uint64_t SynthesizeOptionsForSoloSubtitleTrack(uint64_t a1, int a2, const __CFArray *a3, const __CFArray *a4, __CFArray **a5)
{
  const __CFAllocator *v9;
  __CFArray *Mutable;
  CFNumberRef v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = a2;
  cf = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v16 = FigSignalErrorAt();
    v11 = 0;
    goto LABEL_10;
  }
  v11 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
  if (v11)
  {
    FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (!v13)
    {
      v16 = 4294954514;
      goto LABEL_9;
    }
    v14 = v13(FigBaseObject, CFSTR("TrackEnabled"), v9, &cf);
    if ((_DWORD)v14)
    {
      v16 = v14;
      goto LABEL_9;
    }
    v15 = AddOptionsForSubtitleTrack(a1, v11, a3, a4, cf == (CFTypeRef)*MEMORY[0x1E0C9AE50], 0, Mutable);
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  v16 = v15;
  if ((_DWORD)v15)
  {
LABEL_9:
    CFRelease(Mutable);
    Mutable = 0;
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  *a5 = Mutable;
  return v16;
}

__CFDictionary *FigMediaSelectionGroupsCreateMatchingSelection(const __CFArray *a1, uint64_t a2)
{
  __CFDictionary *MutableCopy;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  const void *v11;
  CFIndex Count;
  CFArrayRef theArray;
  const __CFArray *theArraya;
  CFIndex v16;

  if (!a2)
    return 0;
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (a1)
  {
    Value = FigCFDictionaryGetValue();
    theArray = (CFArrayRef)FigCFDictionaryGetValue();
    v5 = FigCFDictionaryGetValue();
    v6 = FigCFDictionaryGetValue();
    v7 = FigCFDictionaryGetValue();
    FigCFDictionaryGetValue();
    if (Value)
    {
      v8 = !v6 && v7 == 0;
      if (!v8 || v5 != 0)
      {
        v16 = 0;
        fpfs_FindMediaTypeInMediaArray(a1, (uint64_t)theArray, &v16);
        theArraya = (const __CFArray *)FigCFDictionaryGetValue();
        if (theArraya)
        {
          Count = CFArrayGetCount(theArraya);
          if (Count >= 1)
          {
            v10 = 0;
            while (1)
            {
              FigCFArrayGetValueAtIndex();
              v11 = (const void *)FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFArrayCopyValuesAsCFSet();
              FigCFArrayCopyValuesAsCFSet();
              if (FigCFEqual())
              {
                if (FigCFEqual() && FigCFEqual() && FigCFEqual())
                  break;
              }
              if (Count == ++v10)
                return MutableCopy;
            }
            if (!FigCFEqual())
              CFDictionarySetValue(MutableCopy, CFSTR("MediaSelectionOptionsPersistentID"), v11);
          }
        }
      }
    }
  }
  return MutableCopy;
}

uint64_t FigMediaSelectionGroupsMatchToMediaSelectionArray(const __CFArray *a1, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t v8;
  CFTypeID v9;
  __CFDictionary *MatchingSelection;

  if (!a1)
    return 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
    if (!ValueAtIndex)
      break;
    v8 = (uint64_t)ValueAtIndex;
    v9 = CFGetTypeID(ValueAtIndex);
    if (v9 != CFDictionaryGetTypeID())
      break;
    MatchingSelection = FigMediaSelectionGroupsCreateMatchingSelection(a2, v8);
    CFArraySetValueAtIndex(a1, v6, MatchingSelection);
    if (MatchingSelection)
      CFRelease(MatchingSelection);
    if (v5 == ++v6)
      return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigMediaSelectionGroupsAddCrossDeviceInfoToSelectedMediaArray(CFArrayRef theArray, const __CFArray *a2)
{
  uint64_t result;
  CFIndex v4;
  const void *ValueAtIndex;
  CFTypeID v6;
  const void *MutableCopy;
  uint64_t Value;
  uint64_t v9;
  const __CFArray *v10;
  CFIndex v11;
  CFIndex v12;
  uint64_t v13;
  CFIndex Count;
  CFIndex v16;

  result = 0;
  if (a2 && theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v4 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
        if (!ValueAtIndex)
          break;
        v6 = CFGetTypeID(ValueAtIndex);
        if (v6 != CFDictionaryGetTypeID())
          break;
        MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
        Value = FigCFDictionaryGetValue();
        v9 = FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        FigCFDictionaryGetValue();
        if (Value)
        {
          v16 = 0;
          fpfs_FindMediaTypeInMediaArray(a2, v9, &v16);
          v10 = (const __CFArray *)FigCFDictionaryGetValue();
          if (v10)
          {
            v11 = CFArrayGetCount(v10);
            if (v11 >= 1)
            {
              v12 = v11;
              v13 = 0;
              while (1)
              {
                FigCFArrayGetValueAtIndex();
                FigCFDictionaryGetValue();
                if (FigCFEqual())
                  break;
                if (v12 == ++v13)
                  goto LABEL_15;
              }
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionaryGetValue();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
              FigCFDictionarySetValue();
            }
          }
        }
LABEL_15:
        CFArraySetValueAtIndex(theArray, v4, MutableCopy);
        if (MutableCopy)
          CFRelease(MutableCopy);
        if (++v4 == Count)
          return 0;
      }
      return FigSignalErrorAt();
    }
  }
  return result;
}

__CFString *FigMediaSelectionOptionCopyDescription(const __CFAllocator *a1, const __CFDictionary *a2)
{
  __CFString *Mutable;
  const void *Value;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *CFStringForOSTypeValue;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  Mutable = CFStringCreateMutable(a1, 0);
  if (Mutable)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsPersistentID"));
    v5 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsMediaType"));
    if (!v5)
      v5 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionGroupMediaType"));
    v6 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsExtendedLanguageTag"));
    v7 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsUnicodeLanguageIdentifier"));
    v8 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsLanguageCode"));
    v9 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsLanguageCode"));
    v10 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsName"));
    v11 = CFDictionaryGetValue(a2, CFSTR("MediaSelectionOptionsMediaType"));
    v12 = CFDictionaryGetValue(a2, CFSTR("AutomaticallySelected"));
    CFStringAppendFormat(Mutable, 0, CFSTR("["));
    if (!v5)
      goto LABEL_29;
    CFStringForOSTypeValue = (const void *)FigGetCFStringForOSTypeValue();
    if (CFEqual(CFStringForOSTypeValue, v5))
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("Visual"));
    }
    else
    {
      v14 = (const void *)FigGetCFStringForOSTypeValue();
      if (CFEqual(v14, v5))
      {
        CFStringAppendFormat(Mutable, 0, CFSTR("Audible"));
      }
      else
      {
        v15 = (const void *)FigGetCFStringForOSTypeValue();
        if (CFEqual(v15, v5))
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("Legible CC"));
        }
        else
        {
          v16 = (const void *)FigGetCFStringForOSTypeValue();
          if (!CFEqual(v16, v5))
          {
LABEL_29:
            CFStringAppendFormat(Mutable, 0, CFSTR("]"));
            return Mutable;
          }
          CFStringAppendFormat(Mutable, 0, CFSTR("Legible"));
        }
      }
    }
    v17 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v11 == (const void *)*MEMORY[0x1E0C9AE50])
      CFStringAppendFormat(Mutable, 0, CFSTR(" Default"));
    if (v12 == v17)
      CFStringAppendFormat(Mutable, 0, CFSTR(" AutomaticSelection"));
    if (v10)
      CFStringAppendFormat(Mutable, 0, CFSTR(" (%@)"), v10);
    if (v6)
      CFStringAppendFormat(Mutable, 0, CFSTR(" (ExtendedLangTag %@)"), v6);
    if (v7)
      CFStringAppendFormat(Mutable, 0, CFSTR(" (UnicodeLangId %@)"), v7);
    if (v8)
      CFStringAppendFormat(Mutable, 0, CFSTR(" (LangCode %@)"), v8);
    if (v9)
      CFStringAppendFormat(Mutable, 0, CFSTR(" (UnicodeLangCode %@)"), v9);
    if (Value)
      CFStringAppendFormat(Mutable, 0, CFSTR(" (PersistentID %@)"), Value);
    goto LABEL_29;
  }
  return Mutable;
}

void AppendFallbacksOfTracks(const __CFArray *a1, const __CFArray *a2, __CFArray *a3)
{
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  __CFArray *Mutable;
  CFIndex v9;
  const void *ValueAtIndex;
  const __CFArray *v11;
  CFIndex v12;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  CFIndex v16;
  const void *v17;
  const __CFArray *v18;
  const __CFAllocator *allocator;
  CFArrayRef theArray;
  CFRange v21;

  if (a1)
  {
    v5 = a1;
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v7 = Count;
      Mutable = 0;
      v9 = 0;
      v18 = v5;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, v9);
        theArray = 0;
        if (CopyReferencedTrackIDs(ValueAtIndex, a2, &theArray))
          break;
        v11 = theArray;
        if (theArray)
        {
          v12 = CFArrayGetCount(theArray);
          if (v12 >= 1)
          {
            v13 = v12;
            v14 = v7;
            v15 = 0;
            v16 = 0;
            do
            {
              v17 = CFArrayGetValueAtIndex(v11, v15);
              if (!FigCFArrayContainsValue() && !FigCFArrayContainsValue())
              {
                if (!Mutable)
                {
                  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                  if (!Mutable)
                  {
                    FigSignalErrorAt();
                    return;
                  }
                }
                ++v16;
                CFArrayAppendValue(Mutable, v17);
              }
              ++v15;
            }
            while (v13 != v15);
            v7 = v14;
            if (v16 >= 1)
            {
              v21.location = 0;
              v21.length = v16;
              CFArrayAppendArray(a3, Mutable, v21);
              AppendFallbacksOfTracks(Mutable, a2, a3);
            }
            v5 = v18;
          }
          CFRelease(v11);
        }
        ++v9;
      }
      while (v9 != v7);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
}

uint64_t CopyAudioCompatibleCompositionPresetArrayOfTrack(uint64_t a1, CFIndex *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v5;
  CFIndex Count;
  uint64_t v7;
  CFArrayRef theArray;

  theArray = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v4)
  {
    v5 = v4(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), *MEMORY[0x1E0C9AE00], &theArray);
    if ((_DWORD)v5)
    {
      v7 = v5;
    }
    else
    {
      Count = (CFIndex)theArray;
      if (!theArray
        || (Count = CFArrayGetCount(theArray)) == 0
        || (FigCFArrayGetValueAtIndex(),
            v7 = FigAudioFormatDescriptionCopyCompatibleCompositionPresets(),
            Count = 0,
            !(_DWORD)v7))
      {
        v7 = 0;
        *a2 = Count;
      }
    }
  }
  else
  {
    v7 = 4294954514;
  }
  if (theArray)
    CFRelease(theArray);
  return v7;
}

BOOL TrackMatchesPrimaryLanguage(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, uint64_t, CFStringRef *);
  _BOOL8 v7;
  const void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int PackedISO639_2T;
  CFTypeRef cf;
  CFStringRef theString1;

  theString1 = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v6 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v6)
  {
    v6(FigBaseObject, CFSTR("ExtendedLanguageTagString"), v4, &theString1);
    if (theString1)
    {
      v7 = CFStringCompare(theString1, a2, 1uLL) == kCFCompareEqualTo;
      v8 = theString1;
      if (!theString1)
        return v7;
LABEL_8:
      CFRelease(v8);
      return v7;
    }
  }
  cf = 0;
  v9 = FigTrackReaderGetFigBaseObject(a1);
  v10 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (!v10)
    return 0;
  v10(v9, CFSTR("TrackLanguageCode"), v4, &cf);
  if (!cf)
    return 0;
  PackedISO639_2T = FigMetadataGetPackedISO639_2T((const __CFString *)cf);
  v7 = PackedISO639_2T == FigMetadataGetPackedISO639_2TFromLocaleIdentifier(a2);
  v8 = cf;
  if (cf)
    goto LABEL_8;
  return v7;
}

uint64_t MediaCharacteristicsArraysMatch(CFArrayRef theArray, const __CFArray *a2)
{
  uint64_t Count;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  uint64_t result;
  CFRange v8;

  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (a2)
    {
LABEL_3:
      v4 = CFArrayGetCount(a2);
      goto LABEL_6;
    }
  }
  else
  {
    Count = 0;
    if (a2)
      goto LABEL_3;
  }
  v4 = 0;
LABEL_6:
  if (Count != v4)
    return 0;
  if (Count < 1)
    return 1;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    v8.location = 0;
    v8.length = Count;
    result = CFArrayContainsValue(a2, v8, ValueAtIndex);
    if (!(_DWORD)result)
      break;
    if (Count == ++v5)
      return 1;
  }
  return result;
}

uint64_t TrackAlternateGroupIDByKey(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD, CFTypeRef *);
  int v5;
  CFTypeRef v6;
  CFTypeID v7;
  CFTypeID TypeID;
  __int16 valuePtr;
  CFTypeRef cf;

  cf = 0;
  valuePtr = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v4)
  {
    v5 = v4(FigBaseObject, a2, *MEMORY[0x1E0C9AE00], &cf);
    v6 = cf;
    if (!v5)
    {
      if (!cf)
        return valuePtr;
      v7 = CFGetTypeID(cf);
      TypeID = CFNumberGetTypeID();
      v6 = cf;
      if (v7 == TypeID)
      {
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt16Type, &valuePtr);
        v6 = cf;
      }
    }
    if (v6)
      CFRelease(v6);
  }
  return valuePtr;
}

uint64_t FigAlternateFilterTreeInsertLeaf(uint64_t a1, const void *a2, int a3)
{
  _QWORD *DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  CFTypeRef v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v6 = DerivedStorage[1];
  if (v6 && *(_DWORD *)(v6 + 8) >= a3)
  {
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6 && *(_DWORD *)(v6 + 8) >= a3);
  }
  else
  {
    v7 = 0;
  }
  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A004041F259BEuLL);
  if (v8)
  {
    v9 = v8;
    if (a2)
      v10 = CFRetain(a2);
    else
      v10 = 0;
    *(_QWORD *)v9 = v10;
    v9[2] = a3;
    v11 = 0;
    if (v7)
    {
      v13 = *(_QWORD *)(v7 + 16);
      v12 = (_QWORD *)(v7 + 16);
      *((_QWORD *)v9 + 2) = v13;
      v14 = (_QWORD *)(v13 + 24);
      if (v13)
        v15 = v14;
      else
        v15 = DerivedStorage + 2;
      *v15 = v9 + 4;
      *v12 = v9;
      *((_QWORD *)v9 + 3) = v12;
    }
    else
    {
      v16 = DerivedStorage[1];
      *((_QWORD *)v9 + 2) = v16;
      if (v16)
        v17 = (_QWORD *)(v16 + 24);
      else
        v17 = DerivedStorage + 2;
      *v17 = v9 + 4;
      DerivedStorage[1] = v9;
      *((_QWORD *)v9 + 3) = DerivedStorage + 1;
    }
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v11;
}

uint64_t FigAlternateFilterTreeRemoveLeaf()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  const void *v2;
  void (*v3)(const void *);
  int v4;
  uint64_t v5;
  _QWORD *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = DerivedStorage[1];
  if (v1)
  {
    while (1)
    {
      v2 = *(const void **)v1;
      v3 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v3)
        v3(v2);
      v4 = FigCFEqual();
      v5 = *(_QWORD *)(v1 + 16);
      if (v4)
        break;
      v1 = *(_QWORD *)(v1 + 16);
      if (!v5)
        goto LABEL_11;
    }
    v6 = *(_QWORD **)(v1 + 24);
    if (v5)
    {
      *(_QWORD *)(v5 + 24) = v6;
      v6 = *(_QWORD **)(v1 + 24);
    }
    else
    {
      DerivedStorage[2] = v6;
    }
    *v6 = v5;
    ftree_freeLeaf((const void **)v1);
  }
LABEL_11:
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

void ftree_freeLeaf(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  free(a1);
}

uint64_t FigAlternateFilterTreeSetFallbackBranch(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v4 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigAlternateFilterTreeCreateFilter(const void *a1, const __CFString *a2, int a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  __CFArray *ArrayFromLeaves;
  const __CFArray *v10;
  const __CFAllocator *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v18;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  ArrayFromLeaves = ftree_createArrayFromLeaves(a1);
  if (ArrayFromLeaves)
  {
    v10 = ArrayFromLeaves;
    v11 = CFGetAllocator(a1);
    v12 = (const void *)DerivedStorage[3];
    FigAlternateFilterGetClassID();
    v13 = CMDerivedObjectCreate();
    if (!(_DWORD)v13)
    {
      v14 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)v14 = CFStringCreateCopy(v11, a2);
      *(_DWORD *)(v14 + 8) = a3;
      *(_QWORD *)(v14 + 16) = CFArrayCreateCopy(v11, v10);
      if (v12)
        v15 = CFRetain(v12);
      else
        v15 = 0;
      *(_QWORD *)(v14 + 24) = v15;
      if (*(_QWORD *)v14 && *(_QWORD *)(v14 + 16))
      {
        v16 = 0;
        *a4 = 0;
LABEL_9:
        MEMORY[0x19402EF04](*DerivedStorage);
        CFRelease(v10);
        return v16;
      }
      v13 = FigSignalErrorAt();
    }
    v16 = v13;
    goto LABEL_9;
  }
  v18 = FigSignalErrorAt();
  MEMORY[0x19402EF04](*DerivedStorage);
  return v18;
}

__CFArray *ftree_createArrayFromLeaves(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFArray *Mutable;
  uint64_t i;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    for (i = *(_QWORD *)(DerivedStorage + 8); i; i = *(_QWORD *)(i + 16))
      CFArrayAppendValue(Mutable, *(const void **)i);
  }
  return Mutable;
}

uint64_t FigAlternateFilterTreeCopyLeaves(const void *a1, __CFArray **a2)
{
  __CFArray *ArrayFromLeaves;

  if (a2 && (ArrayFromLeaves = ftree_createArrayFromLeaves(a1), (*a2 = ArrayFromLeaves) != 0))
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t FigAlternateFilterTreeCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *DerivedStorage;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigAlternateFilterTreeGetClassID_sRegisterFigAlternateFilterTreeBaseTypeOnce, RegisterFigAlternateFilterTreeBaseType);
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = FigSimpleMutexCreate();
    DerivedStorage[1] = 0;
    DerivedStorage[2] = DerivedStorage + 1;
    *a2 = 0;
  }
  return v3;
}

CFDataRef FigAlternateFilterApplyInfoCreate(const __CFAllocator *a1, const __CFArray *a2, uint64_t a3, const void *a4, const void *a5)
{
  CFMutableBitVectorRef Mutable;
  CFMutableBitVectorRef v11;
  CFRange v12;
  _QWORD *v13;
  CFIndex Count;
  CFTypeRef v15;
  const __CFAllocator *v16;
  const __CFAllocator *v17;
  CFDataRef v18;
  CFAllocatorContext v20;

  Mutable = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!Mutable)
    return 0;
  v11 = Mutable;
  if (a2)
    v12.length = CFArrayGetCount(a2);
  else
    v12.length = 0;
  v12.location = 0;
  CFArrayApplyFunction(a2, v12, (CFArrayApplierFunction)fafinfo_populateAlternatesBitVectorFn, v11);
  *(_OWORD *)&v20.reallocate = unk_1E2F8B210;
  v20.preferredSize = 0;
  memset(&v20, 0, 48);
  if (a4)
  {
    v13 = malloc_type_calloc(1uLL, 0x28uLL, 0x1060040E4149F06uLL);
    *v13 = CFRetain(a4);
    v13[1] = a3;
    if (a2)
      Count = CFArrayGetCount(a2);
    else
      Count = 0;
    v13[2] = Count;
    v13[3] = CFRetain(v11);
    if (a5)
      v15 = CFRetain(a5);
    else
      v15 = 0;
    v13[4] = v15;
    v20.info = v13;
    v16 = CFAllocatorCreate(a1, &v20);
    if (v16)
    {
      v17 = v16;
      v18 = CFDataCreateWithBytesNoCopy(a1, (const UInt8 *)v13, 40, v16);
      if (!v18)
        fafinfo_deallocate(0, (CFTypeRef *)v13);
      CFRelease(v17);
      goto LABEL_16;
    }
    fafinfo_deallocate(0, (CFTypeRef *)v13);
  }
  v18 = 0;
LABEL_16:
  CFRelease(v11);
  return v18;
}

void fafinfo_deallocate(int a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  v3 = a2[3];
  if (v3)
    CFRelease(v3);
  if (*a2)
    CFRelease(*a2);
  v4 = a2[4];
  if (v4)
    CFRelease(v4);
  free(a2);
}

void FigAlternateFilterApplyInfoGetStorage(const __CFData *a1@<X0>, uint64_t a2@<X8>)
{
  CFRange v4;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  if ((unint64_t)CFDataGetLength(a1) > 0x27)
    v4.length = 40;
  else
    v4.length = CFDataGetLength(a1);
  v4.location = 0;
  CFDataGetBytes(a1, v4, (UInt8 *)a2);
}

uint64_t ftree_finalize()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    if (v2)
    {
      do
      {
        v3 = v2;
        *(_QWORD *)(v2 + 24) = *(_QWORD *)(v1 + 24);
        **(_QWORD **)(v1 + 24) = v2;
        ftree_freeLeaf((const void **)v1);
        v2 = *(_QWORD *)(v3 + 16);
        v1 = v3;
      }
      while (v2);
    }
    else
    {
      v3 = DerivedStorage[1];
    }
    v4 = *(_QWORD **)(v3 + 24);
    DerivedStorage[2] = v4;
    *v4 = 0;
    ftree_freeLeaf((const void **)v3);
  }
  v5 = (const void *)DerivedStorage[3];
  if (v5)
    CFRelease(v5);
  return FigSimpleMutexDestroy();
}

CFStringRef ftree_copyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigAlternateFilterTree %p]"), a1);
}

uint64_t RegisterFigAlternateFilterTreeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigAlternateFilterTreeCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAlternateFilterTree %p]"), a1);
}

uint64_t ftreefilter_equal()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
      return FigCFEqual() != 0;
  }
  return result;
}

void ftreefilter_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
    CFRelease(v2);
}

CFStringRef ftreefilter_copyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  __CFString *v5;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFStringRef v9;
  CFStringRef v10;
  const void *v11;
  CFStringRef v12;
  CFStringRef v13;
  const __CFAllocator *v14;
  CFStringRef Copy;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (!Mutable)
    return 0;
  v5 = Mutable;
  CFStringAppendFormat(Mutable, 0, CFSTR("[FigAlternateFilterTreeFilter <%@:%p> priority:%d]"), *(_QWORD *)DerivedStorage, a1, *(unsigned int *)(DerivedStorage + 8));
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(DerivedStorage + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), i);
    v9 = ftreefilter_copyIndentedDebugDescription(ValueAtIndex);
    if (!v9)
      goto LABEL_16;
    v10 = v9;
    CFStringAppendFormat(v5, 0, CFSTR("\n%@"), v9);
    CFRelease(v10);
  }
  v11 = *(const void **)(DerivedStorage + 24);
  if (v11)
  {
    v12 = ftreefilter_copyIndentedDebugDescription(v11);
    if (!v12)
    {
LABEL_16:
      Copy = 0;
      goto LABEL_14;
    }
    v13 = v12;
    CFStringAppendFormat(v5, 0, CFSTR("\n%@"), v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = CFGetAllocator(a1);
  Copy = CFStringCreateCopy(v14, v5);
  if (v13)
    CFRelease(v13);
LABEL_14:
  CFRelease(v5);
  return Copy;
}

uint64_t ftreefilter_copyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFArray *v8;
  CFRange v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t context;

  if (!a2 || !a4)
    return FigSignalErrorAt();
  result = CFEqual(CFSTR("FAFProperty_CountOfChildFilters"), a2);
  if ((_DWORD)result)
  {
    context = 0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = DerivedStorage;
    v8 = *(const __CFArray **)(DerivedStorage + 16);
    if (v8)
      v9.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16));
    else
      v9.length = 0;
    v9.location = 0;
    CFArrayApplyFunction(v8, v9, (CFArrayApplierFunction)ftreefilter_countLeafFiltersAndTheirChildrenFn, &context);
    v10 = *(const void **)(v7 + 24);
    if (v10)
    {
      v11 = ftreefilter_countLeafFilterAndItsChildren(v10);
      v12 = context + v11;
    }
    else
    {
      v12 = context;
    }
    v14 = v12;
    v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &v14);
    *a4 = v13;
    if (v13)
      return 0;
    else
      return FigSignalErrorAt();
  }
  return result;
}

CFStringRef ftreefilter_copyIndentedDebugDescription(const void *a1)
{
  CFStringRef result;
  CFStringRef v2;
  uint64_t v3;

  result = CFCopyDescription(a1);
  if (result)
  {
    v2 = result;
    v3 = FigCFStringCopyWithIndent();
    CFRelease(v2);
    return (CFStringRef)v3;
  }
  return result;
}

uint64_t ftreefilter_countLeafFiltersAndTheirChildrenFn(const void *a1, _QWORD *a2)
{
  uint64_t result;

  result = ftreefilter_countLeafFilterAndItsChildren(a1);
  *a2 += result;
  return result;
}

uint64_t ftreefilter_countLeafFilterAndItsChildren(const void *a1)
{
  CFAllocatorRef v2;
  uint64_t (*v3)(const void *, const __CFString *, CFAllocatorRef, CFNumberRef *);
  int v4;
  CFNumberRef v5;
  uint64_t v6;
  uint64_t v8;
  CFNumberRef number;

  v8 = 0;
  number = 0;
  v2 = CFGetAllocator(a1);
  v3 = *(uint64_t (**)(const void *, const __CFString *, CFAllocatorRef, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
  if (!v3)
    return 1;
  v4 = v3(a1, CFSTR("FAFProperty_CountOfChildFilters"), v2, &number);
  v5 = number;
  if (v4)
  {
    v6 = 1;
    if (!number)
      return v6;
    goto LABEL_4;
  }
  CFNumberGetValue(number, kCFNumberLongType, &v8);
  v5 = number;
  v6 = v8 + 1;
  if (number)
LABEL_4:
    CFRelease(v5);
  return v6;
}

uint64_t ftreefilter_getName()
{
  return *(_QWORD *)CMBaseObjectGetDerivedStorage();
}

uint64_t ftreefilter_getPriority()
{
  return *(unsigned int *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t ftreefilter_apply(const void *a1, const void *a2, CFTypeRef *a3)
{
  return ftreefilter_applyReturningInfo(a1, a2, a3, 0);
}

uint64_t ftreefilter_applyReturningInfo(const void *a1, const void *a2, CFTypeRef *a3, CFDataRef *a4)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v9;
  __CFArray *Mutable;
  const __CFArray *v11;
  CFTypeRef v12;
  CFIndex v13;
  CFTypeRef *v14;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t (*v17)(const void *, const __CFArray *, CFTypeRef *, CFTypeRef *);
  uint64_t v18;
  uint64_t (*v19)(const void *, const __CFArray *, CFTypeRef *);
  uint64_t v20;
  uint64_t appended;
  const __CFArray *v22;
  CFIndex v23;
  const __CFArray *v24;
  const void *v25;
  uint64_t v26;
  CFTypeRef *v27;
  uint64_t (*v28)(uint64_t, const void *, CFTypeRef *, CFTypeRef *);
  uint64_t v29;
  uint64_t (*v30)(uint64_t, const void *, CFTypeRef *);
  const __CFAllocator *v31;
  const __CFArray *v32;
  uint64_t (*v33)(const void *);
  const __CFString *v34;
  CFDataRef v35;
  CFTypeRef *v37;
  CFTypeRef v38;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v38 = 0;
  cf = 0;
  v9 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    v20 = FigSignalErrorAt();
    v11 = 0;
    goto LABEL_60;
  }
  v37 = a3;
  if (a2)
  {
    v11 = (const __CFArray *)CFRetain(a2);
    v12 = CFRetain(a2);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = 0;
  cf = v12;
  if (a4)
    v14 = &v38;
  else
    v14 = 0;
  while (1)
  {
    Count = *(const __CFArray **)(DerivedStorage + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v13 >= (uint64_t)Count || !v11 || CFArrayGetCount(v11) < 1)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v13);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v17 = *(uint64_t (**)(const void *, const __CFArray *, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
    if (v17)
    {
      v18 = v17(ValueAtIndex, v11, &cf, v14);
    }
    else
    {
      v19 = *(uint64_t (**)(const void *, const __CFArray *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 24);
      if (!v19)
        goto LABEL_54;
      v18 = v19(ValueAtIndex, v11, &cf);
    }
    v20 = v18;
    if ((_DWORD)v18)
      goto LABEL_60;
    if (a4)
    {
      appended = ftreefilter_appendAndReleaseLeafInfo(a1, (uint64_t)ValueAtIndex, Mutable, v11, (const __CFArray *)cf, &v38);
      if ((_DWORD)appended)
        goto LABEL_33;
    }
    v22 = (const __CFArray *)cf;
    if (cf)
      CFRetain(cf);
    CFRelease(v11);
    ++v13;
    v11 = v22;
  }
  v23 = (CFIndex)cf;
  if (cf)
    v23 = CFArrayGetCount((CFArrayRef)cf);
  if (a4 && !v23)
  {
    while (1)
    {
      v24 = *(const __CFArray **)(DerivedStorage + 16);
      if (v24)
        v24 = (const __CFArray *)CFArrayGetCount(v24);
      if (v13 >= (uint64_t)v24)
        break;
      v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v13);
      appended = ftreefilter_appendEmptyLeafInfosForLeafFilterAndItsChildren(a1, v25, Mutable);
      ++v13;
      if ((_DWORD)appended)
        goto LABEL_33;
    }
  }
  v26 = *(_QWORD *)(DerivedStorage + 24);
  if (v26)
  {
    if (cf)
    {
      if (CFArrayGetCount((CFArrayRef)cf))
      {
        v27 = v37;
        if (a4)
        {
          appended = ftreefilter_appendEmptyLeafInfosForLeafFilterAndItsChildren(a1, *(const void **)(DerivedStorage + 24), Mutable);
          if ((_DWORD)appended)
            goto LABEL_33;
          goto LABEL_50;
        }
        goto LABEL_57;
      }
      v26 = *(_QWORD *)(DerivedStorage + 24);
    }
    v28 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 32);
    if (v28)
    {
      v29 = v28(v26, a2, &cf, v14);
    }
    else
    {
      v30 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 24);
      if (!v30)
      {
LABEL_54:
        v20 = 4294954514;
        goto LABEL_60;
      }
      v29 = v30(v26, a2, &cf);
    }
    v20 = v29;
    v27 = v37;
    if ((_DWORD)v29)
      goto LABEL_60;
    if (!a4)
      goto LABEL_57;
    appended = ftreefilter_appendAndReleaseLeafInfo(a1, *(_QWORD *)(DerivedStorage + 24), Mutable, v11, (const __CFArray *)cf, &v38);
    if ((_DWORD)appended)
      goto LABEL_33;
    goto LABEL_50;
  }
  v27 = v37;
  if (a4)
  {
LABEL_50:
    v31 = CFGetAllocator(a1);
    v32 = (const __CFArray *)cf;
    if (a2)
      a2 = (const void *)CFArrayGetCount((CFArrayRef)a2);
    v33 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v33)
      v34 = (const __CFString *)v33(a1);
    else
      v34 = &stru_1E2FD85F8;
    v35 = FigAlternateFilterApplyInfoCreate(v31, v32, (uint64_t)a2, v34, Mutable);
    *a4 = v35;
    if (v35)
      goto LABEL_57;
    appended = FigSignalErrorAt();
LABEL_33:
    v20 = appended;
    goto LABEL_60;
  }
LABEL_57:
  if (*v27)
    CFRelease(*v27);
  v20 = 0;
  *v27 = cf;
  cf = 0;
LABEL_60:
  if (v38)
    CFRelease(v38);
  if (Mutable)
    CFRelease(Mutable);
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  return v20;
}

uint64_t ftreefilter_appendAndReleaseLeafInfo(const void *a1, uint64_t a2, CFMutableArrayRef theArray, const __CFArray *Count, const __CFArray *a5, CFTypeRef *a6)
{
  CFDataRef v9;
  const __CFAllocator *v12;
  uint64_t (*v13)(uint64_t);
  __CFString *v14;
  uint64_t v15;

  v9 = (CFDataRef)*a6;
  if (*a6)
    goto LABEL_8;
  v12 = CFGetAllocator(a1);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  v14 = v13 ? (__CFString *)v13(a2) : &stru_1E2FD85F8;
  v9 = FigAlternateFilterApplyInfoCreate(v12, a5, (uint64_t)Count, v14, 0);
  *a6 = v9;
  if (v9)
  {
LABEL_8:
    CFArrayAppendValue(theArray, v9);
    v15 = 0;
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  if (*a6)
  {
    CFRelease(*a6);
    *a6 = 0;
  }
  return v15;
}

uint64_t ftreefilter_appendEmptyLeafInfosForLeafFilterAndItsChildren(const void *a1, const void *a2, __CFArray *a3)
{
  uint64_t v6;
  const __CFAllocator *v7;
  CFArrayRef v8;
  const __CFArray *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v13;

  v6 = ftreefilter_countLeafFilterAndItsChildren(a2);
  v7 = CFGetAllocator(a1);
  v8 = CFArrayCreate(v7, 0, 0, MEMORY[0x1E0C9B378]);
  v13 = 0;
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  if (v6 < 1)
  {
LABEL_5:
    v11 = 0;
  }
  else
  {
    while (1)
    {
      v10 = ftreefilter_appendAndReleaseLeafInfo(a1, (uint64_t)a2, a3, v9, v9, &v13);
      if ((_DWORD)v10)
        break;
      if (!--v6)
        goto LABEL_5;
    }
    v11 = v10;
  }
  CFRelease(v9);
  return v11;
}

void fafinfo_populateAlternatesBitVectorFn(uint64_t a1, const __CFBitVector *a2)
{
  int ZeroIndexedAlternateIndex;
  int v4;
  CFIndex v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  int64_t v9;

  ZeroIndexedAlternateIndex = FigAlternateGetZeroIndexedAlternateIndex(a1);
  v5 = 8 * (ZeroIndexedAlternateIndex / 8) - (int)(ZeroIndexedAlternateIndex - (v4 & 0xFFFFFFF8)) + 7;
  Count = CFBitVectorGetCount(a2);
  v7 = v5;
  if (v5 <= Count)
    v7 = CFBitVectorGetCount(a2);
  v8 = v7 - 1;
  if (v7 < 1)
    v8 = v7 + 6;
  v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 > CFBitVectorGetCount(a2))
    CFBitVectorSetCount(a2, v9);
  CFBitVectorSetBitAtIndex(a2, v5, 1u);
}

uint64_t FigCMCDUtilityCopyHeadersAsQueryParamString()
{
  return 0;
}

uint64_t FigCMCDUtilityCopyHeadersAsJSON()
{
  return 0;
}

uint64_t FigCMCDHeaderVendorCopyHeaders(const void *a1, uint64_t a2, __CFDictionary **a3)
{
  int v5;
  unsigned int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t NextSegment;
  BOOL v13;
  uint64_t appended;
  uint64_t v16;
  uint64_t v17;
  OpaqueCMTimebase *v18;
  double Rate;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t UpTimeNanoseconds;
  unsigned int (*v25)(uint64_t, uint64_t, CFStringRef *, _BYTE *);
  uint64_t v26;
  const __CFString *v27;
  uint64_t v28;
  int v29;
  uint64_t StartOffset;
  uint64_t v31;
  _BOOL4 v32;
  BOOL v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFAllocator *v40;
  const __CFString *v41;
  const __CFString *v42;
  uint64_t v43;
  uint64_t v44;
  const __CFString *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  double BitRate;
  uint64_t v57;
  _BOOL4 v58;
  char *v59;
  _BOOL4 v60;
  uint64_t v61;
  const __CFString *value;
  _BOOL4 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t i;
  BOOL v70;
  CFStringRef v71;
  _BOOL4 v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  const __CFString *v77;
  uint64_t v78;
  OpaqueCMTimebase *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  const __CFString *v84;
  uint64_t v85;
  const char *v86;
  CFStringRef v87;
  const __CFAllocator *v88;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  _BOOL4 v97;
  int v99;
  const __CFString *v100;
  _QWORD *DerivedStorage;
  CMTime v102;
  CFTypeRef cf;
  CFStringRef theString[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  const __CFString *v119;
  _BYTE time[32];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v5 = *(unsigned __int8 *)(a2 + 8);
  v94 = *(_QWORD *)(a2 + 16);
  v96 = *(_QWORD *)a2;
  v99 = *(unsigned __int8 *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 68);
  v7 = *(void **)(a2 + 88);
  v8 = *(void **)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  cf = 0;
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = (v6 != 0) & ((*(_DWORD *)(v10 + 8) & *(_DWORD *)(v10 + 16)) >> 19);
  if (v9)
    NextSegment = FigMediaSegmentSpecifierGetNextSegment(v9);
  else
    NextSegment = 0;
  if (v11)
    v13 = v6 > 9;
  else
    v13 = 1;
  if (!v13 && ((1 << v6) & 0x2DC) != 0 && (*(_DWORD *)(v10 + 8) & *(_DWORD *)(v10 + 16) & 2) != 0)
  {
    theString[0] = 0;
    theString[1] = 0;
    *(_QWORD *)&v105 = 0;
    cmcd_getBufferLengthForObjectType(v6, (CMTime *)theString);
    if ((BYTE4(theString[1]) & 0x1D) == 1)
    {
      *(_OWORD *)time = *(_OWORD *)theString;
      *(_QWORD *)&time[16] = v105;
      appended = cmcd_appendHeaderKeyAndTimeValue(a1, (CFMutableStringRef *)&cf, (uint64_t)CFSTR("bl"), (CMTime *)time, 1);
      if ((_DWORD)appended)
        goto LABEL_223;
    }
  }
  v16 = *(_QWORD *)(v10 + 8);
  v17 = *(_QWORD *)(v10 + 16);
  if ((v16 & v17 & 0x20) != 0)
  {
    v18 = *(OpaqueCMTimebase **)(v10 + 56);
    if (v18)
    {
      Rate = CMTimebaseGetRate(v18);
      theString[0] = 0;
      theString[1] = 0;
      *(_QWORD *)&v105 = 0;
      cmcd_getBufferLengthForObjectType(v6, (CMTime *)theString);
      if ((BYTE4(theString[1]) & 0x1D) == 1 && fabs(Rate) > 2.22044605e-16)
      {
        *(_OWORD *)time = *(_OWORD *)theString;
        *(_QWORD *)&time[16] = v105;
        CMTimeMultiplyByFloat64(&v102, (CMTime *)time, 1.0 / Rate);
        appended = cmcd_appendHeaderKeyAndTimeValue(a1, (CFMutableStringRef *)&cf, (uint64_t)CFSTR("dl"), &v102, 1);
        if ((_DWORD)appended)
          goto LABEL_223;
      }
      v16 = *(_QWORD *)(v10 + 8);
      v17 = *(_QWORD *)(v10 + 16);
    }
  }
  if ((v17 & v16 & 0x40) != 0)
  {
    if (*(_QWORD *)(v10 + 40))
    {
      v20 = CMBaseObjectGetDerivedStorage();
      v124 = 0;
      v122 = 0u;
      v123 = 0u;
      v121 = 0u;
      memset(time, 0, sizeof(time));
      if (*(_QWORD *)(v20 + 40))
      {
        v23 = *(_QWORD *)(v20 + 48);
        v22 = (uint64_t *)(v20 + 48);
        v21 = v23;
        if (!v23)
        {
          if (FigNetworkHistoryCopySharedPredictor())
            goto LABEL_32;
          v21 = *v22;
        }
        UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        v25 = *(unsigned int (**)(uint64_t, uint64_t, CFStringRef *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
        if (v25)
        {
          v106 = 0u;
          v107 = 0u;
          *(_OWORD *)theString = 0u;
          v105 = 0u;
          v108 = 0;
          v109 = 60000000000;
          v110 = 0u;
          v111 = 0u;
          v112 = 0u;
          v113 = 0u;
          v114 = 0u;
          v115 = 0u;
          v116 = 0u;
          v117 = 0u;
          v118 = 0u;
          if (!v25(v21, UpTimeNanoseconds, theString, time))
          {
            v26 = *(_QWORD *)time / 1000 % 100 <= 50 ? 0 : 100;
            appended = cmcd_appendHeaderKeyAndIntegerValue(a1, (CFMutableStringRef *)&cf, (uint64_t)CFSTR("mtp"), 100 * (*(_QWORD *)time / 1000 / 100) + v26);
            if ((_DWORD)appended)
            {
LABEL_223:
              v44 = appended;
              v45 = 0;
              goto LABEL_79;
            }
          }
        }
      }
    }
  }
LABEL_32:
  if ((*(_DWORD *)(v10 + 8) & *(_DWORD *)(v10 + 16) & 0x80) != 0)
  {
    theString[0] = 0;
    v119 = 0;
    *(_QWORD *)time = 0;
    if (v8
      && !FigCFEqual()
      && !FigCFHTTPCopyPathComponentRelativeToURL(v8, v7, theString)
      && CFStringGetLength(theString[0]) >= 1
      && !FigCFHTTPCreatePercentEncodedString((void *)theString[0], 4, time))
    {
      FigCFHTTPCreatePercentEncodedString(*(void **)time, 1, &v119);
    }
    if (theString[0])
      CFRelease(theString[0]);
    if (*(_QWORD *)time)
      CFRelease(*(CFTypeRef *)time);
    v27 = v119;
    if (v119)
    {
      v28 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)&cf, (uint64_t)CFSTR("nor"), v119);
      if ((_DWORD)v28)
      {
        v44 = v28;
        v45 = 0;
        v42 = 0;
LABEL_76:
        CFRelease(v27);
        goto LABEL_77;
      }
    }
    if (NextSegment)
      goto LABEL_46;
LABEL_64:
    v29 = v99;
    goto LABEL_65;
  }
  v27 = 0;
  if (!NextSegment)
    goto LABEL_64;
LABEL_46:
  FigMediaSegmentSpecifierGetURLString(v9);
  FigMediaSegmentSpecifierGetURLString(NextSegment);
  v29 = v99;
  if (FigCFEqual())
  {
    StartOffset = FigMediaSegmentSpecifierGetStartOffset(v9);
    v31 = FigMediaSegmentSpecifierGetBytesToRead(v9);
    v32 = StartOffset > 0;
    if (v31 > 0)
      v32 = 1;
    v33 = !v32;
    if (v32)
      v34 = 0;
    else
      v34 = v5;
    if (v33)
      v35 = v99;
    else
      v35 = 0;
    v36 = v96;
    if (StartOffset <= 0)
    {
      v5 = v34;
    }
    else
    {
      v36 = StartOffset;
      v5 = 1;
    }
    v37 = v94;
    if (v31 > 0)
      v37 = v31;
    v94 = v37;
    v96 = v36;
    if (v31 > 0)
      v29 = 1;
    else
      v29 = v35;
  }
LABEL_65:
  v38 = *(_QWORD *)(v10 + 8);
  v39 = *(_QWORD *)(v10 + 16);
  if ((v39 & v38 & 0x100) != 0
    && (!v27 || (v39 & v38 & 0x80) != 0)
    && v5 | v29)
  {
    v40 = CFGetAllocator(a1);
    if (v29)
      v41 = CFStringCreateWithFormat(v40, 0, CFSTR("%ld-%ld"), v96, v94);
    else
      v41 = CFStringCreateWithFormat(v40, 0, CFSTR("%ld-"), v96);
    v42 = v41;
    if (!v41)
    {
      v43 = FigSignalErrorAt();
      goto LABEL_226;
    }
    v43 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)&cf, (uint64_t)CFSTR("nrr"), v41);
    if ((_DWORD)v43)
      goto LABEL_226;
    v38 = *(_QWORD *)(v10 + 8);
    v39 = *(_QWORD *)(v10 + 16);
  }
  else
  {
    v42 = 0;
  }
  if ((v39 & v38 & 0x8000) == 0
    || *(_BYTE *)(v10 + 80)
    || (v43 = cmcd_appendHeaderKeyAndBooleanValue(a1, (CFMutableStringRef *)&cf, (uint64_t)CFSTR("su")), !(_DWORD)v43))
  {
    v44 = 0;
    v45 = (const __CFString *)cf;
    cf = 0;
    if (!v27)
      goto LABEL_77;
    goto LABEL_76;
  }
LABEL_226:
  v44 = v43;
  v45 = 0;
  if (v27)
    goto LABEL_76;
LABEL_77:
  if (v42)
    CFRelease(v42);
LABEL_79:
  if (cf)
    CFRelease(cf);
  if ((_DWORD)v44)
    goto LABEL_222;
  if (v45)
    v97 = CFStringGetLength(v45) > 0;
  else
    v97 = 0;
  v46 = *(_QWORD *)(a2 + 32);
  v47 = *(unsigned __int8 *)(a2 + 40);
  *(_QWORD *)time = *(_QWORD *)(a2 + 41);
  *(_QWORD *)&time[7] = *(_QWORD *)(a2 + 48);
  v48 = *(_DWORD *)(a2 + 56);
  v49 = *(_DWORD *)(a2 + 68);
  v92 = *(_QWORD *)(a2 + 72);
  v93 = *(_QWORD *)(a2 + 60);
  v95 = *(unsigned __int8 *)(a2 + 80);
  v50 = *(_QWORD *)(a2 + 104);
  v102.value = 0;
  v51 = CMBaseObjectGetDerivedStorage();
  v52 = *(_QWORD *)(v51 + 8);
  v53 = *(_QWORD *)(v51 + 16);
  v100 = v45;
  if ((v52 & v53 & 0x80000) != 0)
  {
    if ((v49 - 2) < 3)
      goto LABEL_89;
    if (!v49)
    {
      v54 = 0;
      v55 = 0;
      if (!v50)
        goto LABEL_99;
      goto LABEL_96;
    }
    if (v49 == 6)
    {
LABEL_89:
      v54 = 1;
      v55 = 1;
      if (!v50)
        goto LABEL_99;
    }
    else
    {
      v55 = v49 == 9;
      v54 = 1;
      if (!v50)
        goto LABEL_99;
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
    if (!v50)
      goto LABEL_99;
  }
LABEL_96:
  BitRate = FigMediaSegmentSpecifierGetBitRate(v50);
  if (BitRate > 2.22044605e-16)
  {
    v46 = (uint64_t)BitRate;
    v47 = 1;
  }
  v52 = *(_QWORD *)(v51 + 8);
  v53 = *(_QWORD *)(v51 + 16);
LABEL_99:
  if (v55
    && (v53 & v52 & 1) != 0
    && v47
    && (v57 = cmcd_appendHeaderKeyAndIntegerValue(a1, (CFMutableStringRef *)&v102, (uint64_t)CFSTR("br"), v46 / 1000),
        (_DWORD)v57)
    || (!v54 ? (v58 = 0) : (v49 - 2) < 6 && ((0x37u >> (v49 - 2)) & 1) != 0 ? (v58 = 1) : (v58 = v49 == 9),
        (*(_DWORD *)(v51 + 8) & *(_DWORD *)(v51 + 16) & 0x10) != 0
     && (v48 & 0x1D) == 1
     && v58
     && (theString[0] = *(CFStringRef *)&time[3],
         theString[1] = (CFStringRef)__PAIR64__(v48, *(unsigned int *)&time[11]),
         *(_QWORD *)&v105 = v93,
         v57 = cmcd_appendHeaderKeyAndTimeValue(a1, (CFMutableStringRef *)&v102, (uint64_t)CFSTR("d"), (CMTime *)theString, 0), (_DWORD)v57)))
  {
    v44 = v57;
    v45 = v100;
    goto LABEL_220;
  }
  if (v54)
  {
    if ((v49 - 1) >= 9)
    {
      FigSignalErrorAt();
      v59 = 0;
    }
    else
    {
      v59 = off_1E2F8B3E0[v49 - 1];
    }
    v45 = v100;
    v61 = cmcd_appendHeaderKeyAndTokenValue(a1, (CFMutableStringRef *)&v102, (uint64_t)CFSTR("ot"), (uint64_t)v59);
    if ((_DWORD)v61)
      goto LABEL_219;
    v60 = (v49 - 2) < 3 || v49 == 6;
  }
  else
  {
    v60 = 0;
    v45 = v100;
  }
  if ((*(_DWORD *)(v51 + 8) & *(_DWORD *)(v51 + 16) & 0x10000) != 0)
  {
    if (v95)
    {
      if (v60)
      {
        v61 = cmcd_appendHeaderKeyAndIntegerValue(a1, (CFMutableStringRef *)&v102, (uint64_t)CFSTR("tb"), v92 / 1000);
        if ((_DWORD)v61)
        {
LABEL_219:
          v44 = v61;
LABEL_220:
          if (v102.value)
            CFRelease((CFTypeRef)v102.value);
LABEL_222:
          v87 = 0;
          v71 = 0;
          value = 0;
          goto LABEL_201;
        }
      }
    }
  }
  value = (const __CFString *)v102.value;
  if (v102.value)
    v63 = CFStringGetLength((CFStringRef)v102.value) > 0;
  else
    v63 = 0;
  if (((_DWORD)DerivedStorage[1] & (_DWORD)DerivedStorage[2] & 0x80000) != 0)
    v64 = *(_DWORD *)(a2 + 68);
  else
    v64 = 0;
  theString[0] = 0;
  v65 = CMBaseObjectGetDerivedStorage();
  v66 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 104);
  if (!v66)
    goto LABEL_149;
  while (*(_DWORD *)v66 && *(_DWORD *)v66 != v64)
  {
    v66 = *(_QWORD *)(v66 + 8);
    if (!v66)
      goto LABEL_149;
  }
  if (!*(_BYTE *)(v66 + 4))
  {
LABEL_149:
    v71 = theString[0];
    if (theString[0])
      v72 = CFStringGetLength(theString[0]) > 0;
    else
      v72 = 0;
    theString[0] = 0;
    v73 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v74 = v73;
    v75 = v73[1];
    v76 = v73[2];
    if ((v75 & v76 & 8) != 0)
    {
      v77 = (const __CFString *)v73[3];
      if (v77)
      {
        v78 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)theString, (uint64_t)CFSTR("cid"), v77);
        if ((_DWORD)v78)
          goto LABEL_214;
        v75 = v74[1];
        v76 = v74[2];
      }
    }
    if ((v76 & v75 & 0x400) != 0)
    {
      v79 = (OpaqueCMTimebase *)v74[7];
      if (v79)
      {
        v80 = CMTimebaseGetRate(v79);
        if (fabs(v80 + -1.0) > 0.1)
        {
          v78 = cmcd_ensureOrSuffixHeadersString(a1, (CFMutableStringRef *)theString);
          if ((_DWORD)v78)
            goto LABEL_214;
          if (vabdd_f64(v80, (double)(int)v80) >= 0.1)
            CFStringAppendFormat((CFMutableStringRef)theString[0], 0, CFSTR("%@=%.1lf"), CFSTR("pr"), *(_QWORD *)&v80);
          else
            CFStringAppendFormat((CFMutableStringRef)theString[0], 0, CFSTR("%@=%d"), CFSTR("pr"), (int)v80);
        }
      }
    }
    v81 = v74[1];
    v82 = v74[2];
    if ((v81 & v82 & 0x1000) != 0)
    {
      if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72) == 1)
        v83 = "lh";
      else
        v83 = "h";
      v78 = cmcd_appendHeaderKeyAndTokenValue(a1, (CFMutableStringRef *)theString, (uint64_t)CFSTR("sf"), (uint64_t)v83);
      if ((_DWORD)v78)
        goto LABEL_214;
      v81 = v74[1];
      v82 = v74[2];
    }
    if ((v82 & v81 & 0x2000) == 0)
      goto LABEL_174;
    v84 = (const __CFString *)v74[4];
    if (!v84)
      goto LABEL_174;
    v78 = cmcd_appendHeaderKeyAndStringValue(a1, (CFMutableStringRef *)theString, (uint64_t)CFSTR("sid"), v84);
    if (!(_DWORD)v78)
    {
      v81 = v74[1];
      v82 = v74[2];
LABEL_174:
      if ((v82 & v81 & 0x4000) == 0 || !v74[8])
        goto LABEL_183;
      v85 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
      if (v85 == 1)
      {
        v86 = "v";
      }
      else if (v85 == 2)
      {
        v86 = "l";
      }
      else
      {
        FigSignalErrorAt();
        v86 = 0;
      }
      v78 = cmcd_appendHeaderKeyAndTokenValue(a1, (CFMutableStringRef *)theString, (uint64_t)CFSTR("st"), (uint64_t)v86);
      if (!(_DWORD)v78)
      {
        v81 = v74[1];
        v82 = v74[2];
LABEL_183:
        v87 = theString[0];
        if (!v63 && !v97 && !v72 && (v82 & v81 & 0x20000) != 0 && theString[0])
          CFStringGetLength(theString[0]);
        v88 = CFGetAllocator(a1);
        Mutable = CFDictionaryCreateMutable(v88, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v90 = Mutable;
          if (v45 && CFStringGetLength(v45) >= 1)
            CFDictionarySetValue(v90, CFSTR("CMCD-Request"), v45);
          if (value && CFStringGetLength(value) >= 1)
            CFDictionarySetValue(v90, CFSTR("CMCD-Object"), value);
          if (v71 && CFStringGetLength(v71) >= 1)
            CFDictionarySetValue(v90, CFSTR("CMCD-Status"), v71);
          if (v87 && CFStringGetLength(v87) >= 1)
            CFDictionarySetValue(v90, CFSTR("CMCD-Session"), v87);
          v44 = 0;
          *a3 = v90;
        }
        else
        {
          v44 = FigSignalErrorAt();
        }
        goto LABEL_201;
      }
    }
LABEL_214:
    v44 = v78;
    if (theString[0])
      CFRelease(theString[0]);
    v87 = 0;
    goto LABEL_201;
  }
  if ((*(_DWORD *)(v65 + 8) & *(_DWORD *)(v65 + 16) & 4) == 0
    || (v68 = cmcd_appendHeaderKeyAndBooleanValue(a1, (CFMutableStringRef *)theString, (uint64_t)CFSTR("bs")),
        !(_DWORD)v68))
  {
    for (i = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 104); i; i = *(_QWORD *)(i + 8))
    {
      if (*(_DWORD *)i)
        v70 = *(_DWORD *)i == v64;
      else
        v70 = 1;
      if (v70)
        *(_BYTE *)(i + 4) = 0;
    }
    goto LABEL_149;
  }
  v44 = v68;
  if (theString[0])
    CFRelease(theString[0]);
  v87 = 0;
  v71 = 0;
LABEL_201:
  MEMORY[0x19402EF04](*DerivedStorage);
  if (v45)
    CFRelease(v45);
  if (value)
    CFRelease(value);
  if (v71)
    CFRelease(v71);
  if (v87)
    CFRelease(v87);
  return v44;
}

uint64_t FigCMCDHeaderVendorSetAllowedKeys(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v4 = a2 | 0x20000;
  if (!a2)
    v4 = 0;
  DerivedStorage[1] = v4;
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorGetAllowedKeys(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v4 = *DerivedStorage;
  *a2 = DerivedStorage[1];
  MEMORY[0x19402EF04](v4);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetLoadedTimeRange(uint64_t a1, int a2, __int128 *a3)
{
  _QWORD *DerivedStorage;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v6 = (char *)DerivedStorage[11];
  if (v6)
  {
    while (*(_DWORD *)v6 != a2)
    {
      v6 = (char *)*((_QWORD *)v6 + 7);
      if (!v6)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v6 = (char *)malloc_type_calloc(1uLL, 0x40uLL, 0x1020040BABC55ACuLL);
    if (!v6)
    {
      v7 = FigSignalErrorAt();
      goto LABEL_7;
    }
    *(_DWORD *)v6 = a2;
    *((_QWORD *)v6 + 7) = 0;
    *(_QWORD *)DerivedStorage[12] = v6;
    DerivedStorage[12] = v6 + 56;
  }
  v7 = 0;
  v8 = *a3;
  v9 = a3[1];
  *(_OWORD *)(v6 + 36) = a3[2];
  *(_OWORD *)(v6 + 20) = v9;
  *(_OWORD *)(v6 + 4) = v8;
LABEL_7:
  MEMORY[0x19402EF04](*DerivedStorage);
  return v7;
}

uint64_t FigCMCDHeaderVendorSetBufferDidStarve(uint64_t a1, unsigned int a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 < 5)
  {
    v4 = DerivedStorage;
    MEMORY[0x19402EEEC](*DerivedStorage);
    v5 = (_QWORD *)v4[13];
    if (v5)
    {
      while (*(_DWORD *)v5 != a2)
      {
        v5 = (_QWORD *)v5[1];
        if (!v5)
          goto LABEL_5;
      }
    }
    else
    {
LABEL_5:
      v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040093ED670uLL);
      if (!v5)
      {
        v6 = FigSignalErrorAt();
        goto LABEL_8;
      }
      *(_DWORD *)v5 = a2;
      v5[1] = 0;
      *(_QWORD *)v4[14] = v5;
      v4[14] = v5 + 1;
    }
    v6 = 0;
    *((_BYTE *)v5 + 4) = 1;
LABEL_8:
    MEMORY[0x19402EF04](*v4);
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t FigCMCDHeaderVendorSetContentID(uint64_t a1, const __CFString *a2)
{
  _QWORD *DerivedStorage;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 && CFStringGetLength(a2) > 64)
    return 4294947794;
  MEMORY[0x19402EEEC](*DerivedStorage);
  v4 = (const void *)DerivedStorage[3];
  DerivedStorage[3] = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetTimebase(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v4 = (const void *)DerivedStorage[7];
  DerivedStorage[7] = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetNetworkHistory(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  const void *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v4 = (const void *)DerivedStorage[5];
  DerivedStorage[5] = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetStreamType(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  DerivedStorage[8] = a2;
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetStreamingFormat(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  DerivedStorage[9] = a2;
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorSetIsLikelyToKeepUp(uint64_t a1, char a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  *((_BYTE *)DerivedStorage + 80) = a2;
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t FigCMCDHeaderVendorCreate(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  CFTypeRef v11;
  CFStringRef *v12;
  const __CFUUID *v13;
  const __CFAllocator *v14;
  CFUUIDRef v15;
  const __CFAllocator *v16;
  CFStringRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x19402F294](&FigCMCDHeaderVendorGetClassID_sRegisterFigCMCDHeaderVendorBaseTypeOnce, RegisterFigCMCDHeaderVendorBaseType);
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    return v8;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v10 = FigSimpleMutexCreate();
  DerivedStorage[11] = 0;
  *DerivedStorage = v10;
  DerivedStorage[12] = DerivedStorage + 11;
  DerivedStorage[13] = 0;
  DerivedStorage[14] = DerivedStorage + 13;
  if (a2)
  {
    v11 = CFRetain(a2);
    DerivedStorage[4] = v11;
    v12 = (CFStringRef *)(DerivedStorage + 4);
    if (v11)
    {
      v13 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    DerivedStorage[4] = 0;
    v12 = (CFStringRef *)(DerivedStorage + 4);
  }
  v14 = CFGetAllocator(0);
  v15 = CFUUIDCreate(v14);
  if (!v15)
    return FigSignalErrorAt();
  v13 = v15;
  v16 = CFGetAllocator(0);
  v17 = CFUUIDCreateString(v16, v13);
  *v12 = v17;
  if (!v17)
  {
    v19 = FigSignalErrorAt();
    goto LABEL_9;
  }
LABEL_8:
  v18 = FigRCLGetLongNumberWithDefault(a4, CFSTR("allowedCMCDKeys"));
  v19 = 0;
  v20 = 0;
  DerivedStorage[2] = v18;
  *a5 = 0;
  if (v13)
  {
LABEL_9:
    CFRelease(v13);
    return v19;
  }
  return v20;
}

__n128 cmcd_getBufferLengthForObjectType@<Q0>(int a1@<W1>, CMTime *a2@<X8>)
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *v5;
  __n128 *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CMTime lhs;
  CMTime time;
  CMTimeRange range;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v16, 0, sizeof(v16));
  v5 = *(OpaqueCMTimebase **)(DerivedStorage + 56);
  v6 = (__n128 *)MEMORY[0x1E0CA2E18];
  if (v5)
    CMTimebaseGetTime(&v16, v5);
  else
    v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(DerivedStorage + 88);
  if (v7)
  {
    while (*(_DWORD *)v7 != a1)
    {
      v7 = *(_QWORD *)(v7 + 56);
      if (!v7)
        goto LABEL_7;
    }
    if ((v16.flags & 1) != 0
      && (v9 = *(_OWORD *)(v7 + 4),
          v10 = *(_OWORD *)(v7 + 36),
          *(_OWORD *)&range.start.epoch = *(_OWORD *)(v7 + 20),
          *(_OWORD *)&range.duration.timescale = v10,
          *(_OWORD *)&range.start.value = v9,
          time = v16,
          CMTimeRangeContainsTime(&range, &time)))
    {
      v11 = *(_OWORD *)(v7 + 4);
      v12 = *(_OWORD *)(v7 + 36);
      *(_OWORD *)&range.start.epoch = *(_OWORD *)(v7 + 20);
      *(_OWORD *)&range.duration.timescale = v12;
      *(_OWORD *)&range.start.value = v11;
      CMTimeRangeGetEnd(&lhs, &range);
      range.start = v16;
      CMTimeSubtract(a2, &lhs, &range.start);
    }
    else
    {
      result = *(__n128 *)(v7 + 28);
      a2->epoch = *(_QWORD *)(v7 + 44);
      *(__n128 *)&a2->value = result;
    }
  }
  else
  {
LABEL_7:
    result = *v6;
    *(__n128 *)&a2->value = *v6;
    a2->epoch = v6[1].n128_i64[0];
  }
  return result;
}

uint64_t cmcd_appendHeaderKeyAndTimeValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, CMTime *a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CMTime v16;

  v16 = *a4;
  v10 = (uint64_t)(CMTimeGetSeconds(&v16) * 1000.0);
  v16 = *a4;
  v11 = (uint64_t)(CMTimeGetSeconds(&v16) * 1000.0);
  if (a5)
    v12 = 100;
  else
    v12 = 1;
  v13 = v10 + v11 / v12 * v12 - v11;
  v16 = *a4;
  if ((uint64_t)(CMTimeGetSeconds(&v16) * 1000.0) % v12 <= v12 >> 1)
    v14 = 0;
  else
    v14 = v12;
  return cmcd_appendHeaderKeyAndIntegerValue(a1, a2, a3, v13 + v14);
}

uint64_t cmcd_appendHeaderKeyAndStringValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, const __CFString *a4)
{
  uint64_t v8;
  const __CFAllocator *v9;
  CFCharacterSetRef v10;
  const __CFCharacterSet *v11;
  CFIndex v12;
  __CFString *MutableCopy;
  const __CFString *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  CFRange result;
  CFRange v19;

  v8 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if ((_DWORD)v8)
    return v8;
  result.location = 0;
  result.length = 0;
  v9 = CFGetAllocator(a1);
  v10 = CFCharacterSetCreateWithCharactersInString(v9, CFSTR("\"\\"));
  if (v10)
  {
    v11 = v10;
    if (CFStringGetLength(a4) >= 1)
    {
      v12 = 0;
      MutableCopy = 0;
      v14 = a4;
      while (1)
      {
        v19.length = CFStringGetLength(v14) - v12;
        v19.location = v12;
        if (!CFStringFindCharacterFromSet(v14, v11, v19, 0, &result))
          break;
        if (!MutableCopy)
        {
          v15 = CFGetAllocator(a1);
          MutableCopy = CFStringCreateMutableCopy(v15, 0, a4);
          v14 = MutableCopy;
          if (!MutableCopy)
          {
            v16 = FigSignalErrorAt();
            goto LABEL_15;
          }
        }
        CFStringInsert(MutableCopy, result.location, CFSTR("\\"));
        v12 = result.location + result.length + 1;
        if (v12 >= CFStringGetLength(v14))
          goto LABEL_14;
      }
      if (MutableCopy)
        goto LABEL_14;
    }
    if (a4)
      MutableCopy = (__CFString *)CFRetain(a4);
    else
      MutableCopy = 0;
LABEL_14:
    v16 = 0;
LABEL_15:
    CFRelease(v11);
    if ((_DWORD)v16)
      goto LABEL_17;
    goto LABEL_16;
  }
  v16 = FigSignalErrorAt();
  MutableCopy = 0;
  if (!(_DWORD)v16)
LABEL_16:
    CFStringAppendFormat(*a2, 0, CFSTR("%@=\"%@\""), a3, MutableCopy);
LABEL_17:
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v16;
}

uint64_t cmcd_appendHeaderKeyAndBooleanValue(const void *a1, CFMutableStringRef *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if (!(_DWORD)v5)
    CFStringAppendFormat(*a2, 0, CFSTR("%@"), a3);
  return v5;
}

uint64_t cmcd_appendHeaderKeyAndIntegerValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if (!(_DWORD)v7)
    CFStringAppendFormat(*a2, 0, CFSTR("%@=%lld"), a3, a4);
  return v7;
}

uint64_t cmcd_ensureOrSuffixHeadersString(const void *a1, CFMutableStringRef *a2)
{
  const __CFAllocator *v3;
  CFMutableStringRef Mutable;

  if (*a2)
  {
    if (CFStringGetLength(*a2) >= 1)
      CFStringAppend(*a2, CFSTR(","));
    return 0;
  }
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  *a2 = Mutable;
  if (Mutable)
    return 0;
  return FigSignalErrorAt();
}

uint64_t cmcd_appendHeaderKeyAndTokenValue(const void *a1, CFMutableStringRef *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = cmcd_ensureOrSuffixHeadersString(a1, a2);
  if (!(_DWORD)v7)
    CFStringAppendFormat(*a2, 0, CFSTR("%@=%s"), a3, a4);
  return v7;
}

uint64_t cmcd_finalize()
{
  _QWORD *DerivedStorage;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v2 = DerivedStorage + 11;
  v1 = (_QWORD *)DerivedStorage[11];
  if (v1)
  {
    do
    {
      v3 = v1[7];
      *v2 = v3;
      if (!v3)
        DerivedStorage[12] = v2;
      free(v1);
      v1 = (_QWORD *)*v2;
    }
    while (*v2);
  }
  v5 = DerivedStorage + 13;
  v4 = (_QWORD *)DerivedStorage[13];
  if (v4)
  {
    do
    {
      v6 = v4[1];
      *v5 = v6;
      if (!v6)
        DerivedStorage[14] = v5;
      free(v4);
      v4 = (_QWORD *)*v5;
    }
    while (*v5);
  }
  v7 = (const void *)DerivedStorage[7];
  if (v7)
    CFRelease(v7);
  v8 = (const void *)DerivedStorage[6];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)DerivedStorage[5];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)DerivedStorage[4];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)DerivedStorage[3];
  if (v11)
    CFRelease(v11);
  return FigSimpleMutexDestroy();
}

uint64_t RegisterFigCMCDHeaderVendorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef FigCMCDHeaderVendorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCMCDHeaderVendor %p]"), a1);
}

uint64_t FigGetClosestRandomAccessPointInAudioSBuf(CMSampleBufferRef sbuf, CMTime *a2, int a3, CMTime *a4, CMItemIndex *a5)
{
  const opaqueCMFormatDescription *FormatDescription;
  CMItemCount v11;
  const __CFArray *SampleAttachmentsArray;
  const __CFArray *v13;
  CMItemIndex v14;
  CFIndex Count;
  uint64_t result;
  uint64_t v17;
  CMItemCount NumSamples;
  CMItemCount v19;
  CMItemIndex v20;
  CMTimeEpoch epoch;
  CMTimeValue value_low;
  CFDictionaryRef v23;
  int Int16IfPresent;
  uint64_t v25;
  const opaqueCMFormatDescription *v26;
  signed int MediaSubType;
  int v28;
  unsigned __int16 v29;
  CMTime v30;
  CMTime v31;
  CMTime time2;
  CMSampleTimingInfo timingInfoOut;
  CMTime time1;

  if (!a4)
    goto LABEL_63;
  if (!sbuf)
    goto LABEL_63;
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  if (!FormatDescription || CMFormatDescriptionGetMediaType(FormatDescription) != 1936684398)
    goto LABEL_63;
  if (!FigAudioFormatDescriptionEmploysDependentPackets())
  {
    *(_OWORD *)&v30.value = *(_OWORD *)&a2->value;
    v30.epoch = a2->epoch;
    NumSamples = CMSampleBufferGetNumSamples(sbuf);
    if (NumSamples >= 1)
    {
      v19 = NumSamples;
      v20 = 0;
      while (1)
      {
        memset(&timingInfoOut, 0, sizeof(timingInfoOut));
        if (CMSampleBufferGetSampleTimingInfo(sbuf, v20, &timingInfoOut))
          return 0;
        time1 = timingInfoOut.presentationTimeStamp;
        time2 = v30;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          time1 = timingInfoOut.presentationTimeStamp;
          time2 = timingInfoOut.duration;
          CMTimeAdd(&v31, &time1, &time2);
          time1 = v30;
          if (CMTimeCompare(&time1, &v31) < 1)
            break;
        }
        if (v19 == ++v20)
          return 0;
      }
      time1 = timingInfoOut.presentationTimeStamp;
      v23 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], sbuf, 1u);
      LOWORD(timingInfoOut.duration.value) = 0;
      Int16IfPresent = FigCFDictionaryGetInt16IfPresent();
      v25 = -(uint64_t)SLOWORD(timingInfoOut.duration.value);
      if (v23)
        CFRelease(v23);
      if (!Int16IfPresent)
      {
        v26 = CMSampleBufferGetFormatDescription(sbuf);
        MediaSubType = CMFormatDescriptionGetMediaSubType(v26);
        v25 = 1;
        if (MediaSubType > 1667326831)
        {
          if (MediaSubType > 1902207847)
          {
            if (MediaSubType > 2053202791)
            {
              if (MediaSubType == 2053202792)
                goto LABEL_38;
              v28 = 2053202800;
            }
            else
            {
              if (MediaSubType == 1902207848)
                goto LABEL_38;
              v28 = 1902207856;
            }
          }
          else
          {
            if (MediaSubType > 1885430631)
            {
              if (MediaSubType == 1885430632)
                goto LABEL_38;
              v29 = 25456;
            }
            else
            {
              if (MediaSubType == 1667326832)
                goto LABEL_38;
              v29 = 24931;
            }
            v28 = v29 | 0x70610000;
          }
        }
        else if (MediaSubType <= 1633772388)
        {
          if (MediaSubType == 1633771875)
            goto LABEL_38;
          v28 = 1633772320;
        }
        else
        {
          if ((MediaSubType - 1633772389) <= 0xB && ((1 << (MediaSubType - 101)) & 0x80F) != 0)
            goto LABEL_38;
          v28 = 1667326824;
        }
        if (MediaSubType != v28)
          v25 = MediaSubType == 778924083;
      }
LABEL_38:
      *a4 = time1;
      a4[1].value = v25;
      if (a5)
        *a5 = v20;
      return 1;
    }
LABEL_63:
    FigSignalErrorAt();
    return 0;
  }
  v31 = *a2;
  v11 = CMSampleBufferGetNumSamples(sbuf);
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (!SampleAttachmentsArray)
    goto LABEL_63;
  v13 = SampleAttachmentsArray;
  if (a3)
    v14 = 0;
  else
    v14 = v11 - 1;
  Count = CFArrayGetCount(SampleAttachmentsArray);
  result = 0;
  if ((v14 & 0x8000000000000000) == 0 && v14 < v11)
  {
    if (a3)
      v17 = 1;
    else
      v17 = -1;
    do
    {
      memset(&timingInfoOut, 0, sizeof(timingInfoOut));
      if (CMSampleBufferGetSampleTimingInfo(sbuf, v14, &timingInfoOut))
        return 0;
      if (a3)
      {
        time1 = timingInfoOut.presentationTimeStamp;
        time2 = v31;
        if (CMTimeCompare(&time1, &time2) < 0)
          goto LABEL_23;
      }
      else
      {
        time1 = timingInfoOut.presentationTimeStamp;
        time2 = v31;
        if (CMTimeCompare(&time1, &time2) > 0)
          goto LABEL_23;
      }
      if (v14 < Count)
        CFArrayGetValueAtIndex(v13, v14);
      LOWORD(time2.value) = 0;
      if (FigCFDictionaryGetInt16IfPresent())
      {
        time1 = timingInfoOut.presentationTimeStamp;
        epoch = timingInfoOut.presentationTimeStamp.epoch;
        value_low = SLOWORD(time2.value);
        *(_OWORD *)&a4->value = *(_OWORD *)&timingInfoOut.presentationTimeStamp.value;
        a4->epoch = epoch;
        a4[1].value = value_low;
        if (a5)
          *a5 = v14;
        return 1;
      }
LABEL_23:
      result = 0;
      v14 += v17;
    }
    while (v14 >= 0 && v14 < v11);
  }
  return result;
}

double FigDecodeTimeForAudioRandomAccessInBufferQueue@<D0>(uint64_t a1@<X8>)
{
  double result;

  FigBufferQueueCallForEachBufferLastToFirst();
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t FigFindAudioRandomAccessPointInBufferAtOrBeforeTime(opaqueCMSampleBuffer *a1, CMTime *a2)
{
  uint64_t result;
  CMTime *v5;
  const opaqueCMFormatDescription *FormatDescription;
  const AudioStreamBasicDescription *StreamBasicDescription;
  CMTime v8;
  CMTime v9;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime v13;
  CMTime v14;

  v14 = *a2;
  memset(&v13, 0, sizeof(v13));
  CMSampleBufferGetPresentationTimeStamp(&v13, a1);
  time1 = v13;
  time2 = v14;
  if (CMTimeCompare(&time1, &time2) > 0)
    return 0;
  v5 = a2 + 1;
  while (1)
  {
    time1 = v14;
    result = FigGetClosestRandomAccessPointInAudioSBuf(a1, &time1, 0, a2 + 1, 0);
    if (!(_DWORD)result)
      break;
    FormatDescription = CMSampleBufferGetFormatDescription(a1);
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
    memset(&time1, 0, sizeof(time1));
    CMTimeMake(&rhs, a2[2].value * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
    *(_OWORD *)&time2.value = *(_OWORD *)&v5->value;
    time2.epoch = a2[1].epoch;
    CMTimeAdd(&time1, &time2, &rhs);
    time2 = time1;
    v9 = v14;
    if (CMTimeCompare(&time2, &v9) < 1)
      return 0xFFFFFFFFLL;
    CMTimeMake(&v8, StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
    *(_OWORD *)&time2.value = *(_OWORD *)&v5->value;
    time2.epoch = a2[1].epoch;
    CMTimeSubtract(&v14, &time2, &v8);
  }
  return result;
}

BOOL FigCreateReplacementAudioSBufByOmittingLeadingDependentPackets(opaqueCMSampleBuffer *a1, int a2, CMSampleBufferRef *a3)
{
  CMItemCount NumSamples;
  CMItemIndex v7;
  CMTimeValue v8;
  CFIndex v9;
  const opaqueCMFormatDescription *FormatDescription;
  const AudioStreamBasicDescription *StreamBasicDescription;
  CFDictionaryRef v12;
  int32_t mSampleRate;
  const __CFAllocator *v14;
  _BOOL8 v15;
  CMTime v17;
  CMTime v18;
  CMTime time1;
  CMTime time2;
  CMTime v21;
  CMTime v22;
  CMItemIndex v23;
  CMTime v24;
  CMTime v25;
  CFRange v26;

  memset(&v25, 0, sizeof(v25));
  CMSampleBufferGetPresentationTimeStamp(&v25, a1);
  NumSamples = CMSampleBufferGetNumSamples(a1);
  memset(&v24, 0, 32);
  v23 = -1;
  if (NumSamples < 1)
    return 0;
  v7 = NumSamples;
  v22 = v25;
  v8 = FigGetClosestRandomAccessPointInAudioSBuf(a1, &v22, 1, &v24, &v23) ? v23 : v7;
  if (v8 < 1)
    return 0;
  v9 = (v7 - v8) & ~((v7 - v8) >> 63);
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (a2)
  {
    FormatDescription = CMSampleBufferGetFormatDescription(a1);
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
    memset(&v21, 0, sizeof(v21));
    CMTimeMake(&v21, v8 * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
    v12 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, 1u);
    if (!FigCFDictionaryGetCMTimeIfPresent()
      || (v22.flags & 0x1D) != 1
      || (CMTimeMake(&time2, StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate),
          time1 = v22,
          CMTimeCompare(&time1, &time2) < 0))
    {
      v15 = 0;
      if (!v12)
        return v15;
      goto LABEL_18;
    }
    time1 = v22;
    v18 = v21;
    if (CMTimeCompare(&time1, &v18) < 0)
    {
      mSampleRate = (int)StreamBasicDescription->mSampleRate;
      time1 = v22;
      CMTimeConvertScale(&v17, &time1, mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
      v8 = v17.value / StreamBasicDescription->mFramesPerPacket;
      v9 = (v7 - v8) & ~((v7 - v8) >> 63);
    }
    if (v9)
    {
LABEL_13:
      v14 = CFGetAllocator(a1);
      v26.location = v8;
      v26.length = v9;
      v15 = CMSampleBufferCopySampleBufferForRange(v14, a1, v26, a3) == 0;
      if (!v12)
        return v15;
      goto LABEL_18;
    }
  }
  else
  {
    v12 = 0;
    if (v9)
      goto LABEL_13;
  }
  *a3 = 0;
  v15 = 1;
  if (v12)
LABEL_18:
    CFRelease(v12);
  return v15;
}

uint64_t FigGetCountOfSequentialSamplesWithSeamIdentifier(opaqueCMSampleBuffer *a1, uint64_t a2, int a3, CMTime *a4)
{
  CMItemCount NumSamples;
  const __CFArray *SampleAttachmentsArray;
  uint64_t v9;
  CMItemCount v10;
  const __CFArray *v11;
  CFIndex Count;
  CMItemIndex v13;
  const __CFDictionary *v14;
  const void *v15;
  uint64_t v16;
  CMTimeEpoch v17;
  const __CFDictionary *ValueAtIndex;
  int v19;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  CMTime rhs;
  CMTime lhs;
  CMSampleTimingInfo timingInfoOut;
  CMTime v29;

  v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  NumSamples = CMSampleBufferGetNumSamples(a1);
  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(a1, 0);
  v9 = 0;
  if (a2)
  {
    v10 = NumSamples - 1;
    if (NumSamples >= 1)
    {
      v11 = SampleAttachmentsArray;
      if (SampleAttachmentsArray)
        Count = CFArrayGetCount(SampleAttachmentsArray);
      else
        Count = 0;
      if (Count == NumSamples
        && (a3 ? (v13 = 0) : (v13 = NumSamples - 1),
            v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v13),
            v15 = (const void *)*MEMORY[0x1E0CA4E28],
            CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA4E28]),
            FigCFEqual()))
      {
        v16 = 1;
        v24 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
        v25 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
        v17 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
        v22 = *MEMORY[0x1E0CA2E90];
        v23 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
        do
        {
          v9 = v16;
          *(_OWORD *)&timingInfoOut.presentationTimeStamp.timescale = v25;
          *(_OWORD *)&timingInfoOut.decodeTimeStamp.value = v24;
          timingInfoOut.decodeTimeStamp.epoch = v17;
          *(_OWORD *)&timingInfoOut.duration.value = v22;
          *(_OWORD *)&timingInfoOut.duration.epoch = v23;
          CMSampleBufferGetSampleTimingInfo(a1, v13, &timingInfoOut);
          if ((timingInfoOut.duration.flags & 0x1D) == 1)
          {
            lhs = v29;
            rhs = timingInfoOut.duration;
            CMTimeAdd(&v29, &lhs, &rhs);
          }
          if (a3)
          {
            if (v13 == v10)
              break;
            ++v13;
          }
          else
          {
            if (!v13)
              break;
            --v13;
          }
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v11, v13);
          CFDictionaryGetValue(ValueAtIndex, v15);
          v19 = FigCFEqual();
          v16 = v9 + 1;
        }
        while (v19);
      }
      else
      {
        v9 = 0;
      }
    }
  }
  if (a4)
    *a4 = v29;
  return v9;
}

uint64_t FigValidateSampleSeamInSampleBufferQueue(opaqueCMBufferQueue *a1, uint64_t a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v9[2];
  __int128 v10;
  _BYTE v11[32];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v9[0] = 0;
  *(_OWORD *)&v11[16] = 0u;
  v9[1] = a2;
  v10 = a3;
  *(_OWORD *)v11 = 0uLL;
  *(_OWORD *)&v11[8] = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)&v11[24] = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v12 = *(_OWORD *)&v11[8];
  v13 = *(_QWORD *)&v11[24];
  v5 = 1;
  v14 = 1;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        CMBufferQueueCallForEachBuffer(a1, (OSStatus (__cdecl *)(CMBufferRef, void *))fsbqs_ValidateSampleBufferForSeam, v9);
        v5 = v14;
        if (!(_DWORD)v14)
        {
          if (a4)
            *a4 = *((_QWORD *)&v10 + 1);
          v5 = 0;
          if (a5)
          {
            *(_OWORD *)a5 = v12;
            *(_QWORD *)(a5 + 16) = v13;
          }
        }
      }
    }
  }
  return v5;
}

BOOL fsbqs_ValidateSampleBufferForSeam(opaqueCMSampleBuffer *a1, uint64_t a2)
{
  CMItemCount NumSamples;
  __int128 v5;
  CMTimeEpoch v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t CountOfSequentialSamplesWithSeamIdentifier;
  __int128 v12;
  __int128 v13;
  CMTime time2;
  CMTime time;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;
  CMTime v19;
  CMTime v20;
  CMTime v21;

  NumSamples = CMSampleBufferGetNumSamples(a1);
  if (CMGetAttachment(a1, *(CFStringRef *)(a2 + 16), 0))
  {
    if (*(_DWORD *)a2)
    {
      v9 = 3;
      goto LABEL_30;
    }
    *(_DWORD *)a2 = 1;
  }
  if (NumSamples >= 1)
  {
    memset(&v21, 0, sizeof(v21));
    CMSampleBufferGetDuration(&v21, a1);
    v5 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&v20.value = *MEMORY[0x1E0CA2E68];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v20.epoch = v6;
    v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    if (*(_DWORD *)a2 == 1)
    {
      v13 = v5;
      CountOfSequentialSamplesWithSeamIdentifier = FigGetCountOfSequentialSamplesWithSeamIdentifier(a1, *(_QWORD *)(a2 + 8), 1, &v20);
      lhs = v21;
      rhs = v20;
      CMTimeSubtract(&time1, &lhs, &rhs);
      v21 = time1;
      if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E0CA2728], &v19))
      {
        time1 = v19;
        lhs = v20;
        if (CMTimeCompare(&time1, &lhs) >= 1)
        {
          v9 = 7;
          goto LABEL_30;
        }
        lhs = *(CMTime *)(a2 + 64);
        rhs = v19;
        CMTimeAdd(&time1, &lhs, &rhs);
        *(CMTime *)(a2 + 64) = time1;
      }
      time1 = v21;
      *(_OWORD *)&lhs.value = v13;
      lhs.epoch = v6;
      if (CMTimeCompare(&time1, &lhs) >= 1)
      {
        if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E0CA2720], &v19))
        {
          time1 = v19;
          lhs = v21;
          if (CMTimeCompare(&time1, &lhs) >= 1)
          {
            v9 = 8;
            goto LABEL_30;
          }
        }
      }
      *(_QWORD *)(a2 + 32) += CountOfSequentialSamplesWithSeamIdentifier;
      if (CountOfSequentialSamplesWithSeamIdentifier < NumSamples)
      {
        memset(&time1, 0, sizeof(time1));
        CMTimeMake(&time1, 1, *(_DWORD *)(a2 + 48));
        memset(&lhs, 0, sizeof(lhs));
        if (*(_QWORD *)(a2 + 32) == *(_QWORD *)(a2 + 24))
        {
          rhs = *(CMTime *)(a2 + 40);
          time2 = *(CMTime *)(a2 + 64);
          CMTimeSubtract(&time, &rhs, &time2);
          CMTimeAbsoluteValue(&lhs, &time);
          rhs = lhs;
          time2 = time1;
          if (CMTimeCompare(&rhs, &time2) < 1)
          {
            *(_DWORD *)(a2 + 88) = 0;
LABEL_27:
            *(_DWORD *)a2 = 2;
            return *(_DWORD *)a2 == 2;
          }
          v9 = 10;
        }
        else
        {
          v9 = 9;
        }
LABEL_30:
        *(_DWORD *)(a2 + 88) = v9;
        goto LABEL_27;
      }
    }
    else if (!*(_DWORD *)a2)
    {
      v12 = v5;
      v7 = FigGetCountOfSequentialSamplesWithSeamIdentifier(a1, *(_QWORD *)(a2 + 8), 0, &v20);
      lhs = v21;
      rhs = v20;
      CMTimeSubtract(&time1, &lhs, &rhs);
      v21 = time1;
      if (v7 <= 0)
      {
        *(_DWORD *)(a2 + 88) = 2;
        goto LABEL_27;
      }
      v8 = *(_QWORD *)(a2 + 24);
      if (v8 >= 1 && v7 != NumSamples)
      {
        v9 = 4;
        goto LABEL_30;
      }
      *(_QWORD *)(a2 + 24) = v8 + v7;
      lhs = *(CMTime *)(a2 + 40);
      rhs = v20;
      CMTimeAdd(&time1, &lhs, &rhs);
      *(CMTime *)(a2 + 40) = time1;
      if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E0CA2720], &v19))
      {
        time1 = v19;
        lhs = v20;
        if (CMTimeCompare(&time1, &lhs) >= 1)
        {
          v9 = 6;
          goto LABEL_30;
        }
        lhs = *(CMTime *)(a2 + 40);
        rhs = v19;
        CMTimeSubtract(&time1, &lhs, &rhs);
        *(CMTime *)(a2 + 40) = time1;
      }
      time1 = v21;
      *(_OWORD *)&lhs.value = v12;
      lhs.epoch = v6;
      if (CMTimeCompare(&time1, &lhs) >= 1)
      {
        if (faq_getFigTimeAttachment(a1, (const __CFString *)*MEMORY[0x1E0CA2728], &v19))
        {
          time1 = v19;
          lhs = v21;
          if (CMTimeCompare(&time1, &lhs) >= 1)
          {
            v9 = 5;
            goto LABEL_30;
          }
        }
      }
    }
  }
  return *(_DWORD *)a2 == 2;
}

BOOL FigCreateReplacementSBufByOmittingTrailingSeamSamples(opaqueCMSampleBuffer *a1, uint64_t a2, CMSampleBufferRef *a3)
{
  CMItemCount NumSamples;
  _BOOL8 result;
  uint64_t CountOfSequentialSamplesWithSeamIdentifier;
  BOOL v9;
  CFIndex v10;
  const __CFAllocator *v11;
  CFRange v12;

  NumSamples = CMSampleBufferGetNumSamples(a1);
  result = 0;
  if (a2 && NumSamples >= 1)
  {
    CountOfSequentialSamplesWithSeamIdentifier = FigGetCountOfSequentialSamplesWithSeamIdentifier(a1, a2, 0, 0);
    if (CountOfSequentialSamplesWithSeamIdentifier < 1)
    {
      return 0;
    }
    else
    {
      v9 = NumSamples > (unint64_t)CountOfSequentialSamplesWithSeamIdentifier;
      v10 = NumSamples - CountOfSequentialSamplesWithSeamIdentifier;
      if (v9)
      {
        v11 = CFGetAllocator(a1);
        v12.location = 0;
        v12.length = v10;
        return CMSampleBufferCopySampleBufferForRange(v11, a1, v12, a3) == 0;
      }
      else
      {
        *a3 = 0;
        return 1;
      }
    }
  }
  return result;
}

uint64_t FigBandwidthPeriodicReporterSetReportingAgent(const void *a1, const void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t DerivedStorage;
  CFTypeRef v7;
  CFTypeRef v8;

  v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    v7 = CFRetain(a1);
  else
    v7 = 0;
  *v5 = v7;
  if (a2)
    v8 = CFRetain(a2);
  else
    v8 = 0;
  v5[1] = v8;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), v5, (dispatch_function_t)bpr_setReportingAgentDispatch);
  return 0;
}

void bpr_setReportingAgentDispatch(uint64_t a1)
{
  const void *v2;
  const void **DerivedStorage;
  const void *v4;
  const void *v5;

  v2 = *(const void **)(a1 + 8);
  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  v4 = *DerivedStorage;
  *DerivedStorage = v2;
  if (v2)
    CFRetain(v2);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v5 = *(const void **)(a1 + 8);
  if (v5)
    CFRelease(v5);
  free((void *)a1);
}

uint64_t RegisterFigBandwidthPeriodicReportingBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigBandwidthPeriodicReporterCreate(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, _OWORD *a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  uint64_t DerivedStorage;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  const void *v15;
  dispatch_source_t v16;
  NSObject *v17;
  uint64_t v18;
  dispatch_time_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a7)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigBandwidthPeriodicReportingGetClassID_sRegisterFigBandwidthPeriodicReportingBaseTypeOnce, RegisterFigBandwidthPeriodicReportingBaseType);
  v10 = CMDerivedObjectCreate();
  if ((_DWORD)v10)
    return v10;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = FigHTTPSchedulerRetain(0);
  *(_QWORD *)(DerivedStorage + 72) = v12;
  if (!v12)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 104) = FigGetUpTimeNanoseconds();
  v13 = *(NSObject **)(DerivedStorage + 72);
  if (!v13 || (v14 = FigCFWeakReferenceHolderCreateWithReferencedObject()) == 0)
  {
    v21 = FigSignalErrorAt();
    if ((_DWORD)v21)
      return v21;
LABEL_9:
    v10 = FigNetworkHistoryCopySharedPredictor();
    if (!(_DWORD)v10)
    {
      *(_QWORD *)(DerivedStorage + 8) = a2;
      *(_QWORD *)(DerivedStorage + 16) = FigNetworkHistoryGetBytesReceivedMaxResolution();
      v22 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)(DerivedStorage + 24) = v22;
      if (v22)
      {
        *(_OWORD *)(DerivedStorage + 32) = *a5;
        if (a3)
          v23 = CFRetain(a3);
        else
          v23 = 0;
        *(_QWORD *)(DerivedStorage + 56) = v23;
        v21 = 0;
        *a7 = 0;
        return v21;
      }
      return FigSignalErrorAt();
    }
    return v10;
  }
  v15 = (const void *)v14;
  v16 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, v13);
  if (v16)
  {
    v17 = v16;
    v18 = (uint64_t)((double)a2 / ceil((double)(a2 / 0x3B9ACA00uLL) / 10.0));
    v19 = dispatch_time(0, v18);
    dispatch_source_set_timer(v17, v19, v18, 0x3B9ACA00uLL);
    v20 = (void *)CFRetain(v15);
    dispatch_set_context(v17, v20);
    dispatch_source_set_event_handler_f(v17, (dispatch_function_t)bpr_timerCallback);
    dispatch_source_set_cancel_handler_f(v17, (dispatch_function_t)bpr_timerCancellationCallback);
    dispatch_resume(v17);
    v21 = 0;
    *(_QWORD *)(DerivedStorage + 80) = v17;
  }
  else
  {
    v21 = FigSignalErrorAt();
  }
  CFRelease(v15);
  if (!(_DWORD)v21)
    goto LABEL_9;
  return v21;
}

CFStringRef FigBandwidthPeriodicReportingCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigBandwidthPeriodicReporting %p]"), a1);
}

uint64_t bpr_invalidate(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), a1, (dispatch_function_t)bpr_invalidateDispatch);
  return 0;
}

void bpr_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  bpr_invalidateOnQueue(a1);
  v3 = *(NSObject **)(DerivedStorage + 72);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
}

void bpr_invalidateDispatch(const void *a1)
{
  bpr_invalidateOnQueue((uint64_t)a1);
  if (a1)
    CFRelease(a1);
}

void bpr_invalidateOnQueue(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 64))
  {
    v3 = DerivedStorage;
    bpr_logBandwidth(a1);
    *(_BYTE *)(v3 + 64) = 1;
    if (*(_QWORD *)v3)
      CFRelease(*(CFTypeRef *)v3);
    v4 = *(const void **)(v3 + 24);
    if (v4)
      CFRelease(v4);
    v5 = *(NSObject **)(v3 + 80);
    if (v5)
    {
      dispatch_source_cancel(v5);
      v5 = *(NSObject **)(v3 + 80);
    }
    dispatch_release(v5);
    v6 = *(const void **)(v3 + 88);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(v3 + 48);
    if (v7)
      CFRelease(v7);
    v8 = *(const void **)(v3 + 56);
    if (v8)
      CFRelease(v8);
    v9 = *(const void **)(v3 + 112);
    if (v9)
      CFRelease(v9);
  }
}

uint64_t bpr_logBandwidth(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  uint64_t result;
  BOOL v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  _QWORD v8[25];

  v8[24] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8[0] = 0;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  result = bpr_obtainObservedBandwidthForPreviousInterval(a1, UpTimeNanoseconds - *(_QWORD *)(DerivedStorage + 104), v8, &v7);
  if ((_DWORD)result)
    v5 = 1;
  else
    v5 = dword_1EE2A2D58 == 0;
  if (!v5)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_QWORD *)(DerivedStorage + 104) = UpTimeNanoseconds;
  return result;
}

uint64_t bpr_obtainObservedBandwidthForPreviousInterval(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD *, _OWORD *);
  uint64_t result;
  uint64_t v13;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  memset(v14, 0, sizeof(v14));
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!a3)
    return FigSignalErrorAt();
  v9 = UpTimeNanoseconds;
  v10 = *(_QWORD *)(DerivedStorage + 48);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
    return 4294954514;
  v19[0] = 0;
  v19[1] = 0;
  v19[2] = a2;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 9;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  result = v11(v10, v9, v19, v14);
  if (!(_DWORD)result)
  {
    v13 = v15;
    *a3 = *(_QWORD *)&v14[0];
    *a4 = v13;
  }
  return result;
}

void bpr_timerCallback()
{
  uint64_t UpTimeNanoseconds;
  uint64_t v1;
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  void (*v11)(uint64_t, __CFString *);
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t v18;
  void (*v19)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v20;
  void (*v21)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD);
  uint64_t *v22;
  CFTypeRef *v23;
  uint64_t v24;
  void (*v25)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  const __CFAllocator *v30;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v32;
  const __CFAllocator *v33;
  CFDictionaryRef Copy;
  CFDictionaryRef v35;
  const void *v36;
  CFDictionaryRef v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD context[3];

  v38 = 0;
  v39 = 0;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    v2 = (const void *)v1;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(DerivedStorage + 64))
    {
      v4 = DerivedStorage;
      bpr_logBandwidth((uint64_t)v2);
      v5 = UpTimeNanoseconds - *(_QWORD *)(v4 + 96);
      if ((unint64_t)(v5 + 1000000000) < *(_QWORD *)(v4 + 8))
        goto LABEL_38;
      if (FigCFDictionaryGetCount() >= 1
        && !bpr_obtainObservedBandwidthForPreviousInterval((uint64_t)v2, v5, &v39, &v38))
      {
        v7 = v38;
        v6 = v39;
        v8 = (uint64_t *)CMBaseObjectGetDerivedStorage();
        v9 = *v8;
        if (*v8)
        {
          v10 = v8;
          v11 = *(void (**)(uint64_t, __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
          if (v11)
            v11(v9, CFSTR("bandwidthPredictionStats"));
          if (FigCFDictionaryGetCount() >= 1)
          {
            context[0] = v2;
            context[1] = v6;
            context[2] = v7;
            CFDictionaryApplyFunction((CFDictionaryRef)v10[11], (CFDictionaryApplierFunction)bpr_reportPredictionApplier, context);
            v12 = *v10;
            if (*v10)
            {
              v13 = v10[1];
              v14 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (v14)
                v14(v12, CFSTR("bandwidthPredictionStats"), CFSTR("INTVL"), v13 / 0x3B9ACA00, 0);
            }
            v15 = *v10;
            if (*v10)
            {
              v16 = v10[2];
              v17 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
              if (v17)
                v17(v15, CFSTR("bandwidthPredictionStats"), CFSTR("BRMR"), v16 / 0xF4240, 0);
            }
            v18 = *v10;
            if (*v10)
            {
              v19 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 56);
              if (v19)
                v19(v18, CFSTR("bandwidthPredictionStats"), CFSTR("OB"), v6, 0);
              v20 = *v10;
              if (*v10)
              {
                v21 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                if (v21)
                  v21(v20, CFSTR("bandwidthPredictionStats"), CFSTR("OL"), v7 / 0xF4240, 0);
              }
            }
            v22 = (uint64_t *)CMBaseObjectGetDerivedStorage();
            v23 = (CFTypeRef *)(v22 + 14);
            FigNetworkWirelessReportingReportWiFiStats(*v22, v22[14]);
            if (*v23)
            {
              CFRelease(*v23);
              *v23 = 0;
            }
            FigNetworkWirelessReportingInterfaceCopyWifiStats(v23);
            v24 = *v10;
            if (v24)
            {
              v25 = *(void (**)(uint64_t, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
              if (v25)
                v25(v24, CFSTR("bandwidthPredictionStats"), 113, 0, 0);
            }
          }
        }
      }
      v26 = CMBaseObjectGetDerivedStorage();
      if (*(_QWORD *)(v26 + 40))
      {
        v27 = v26;
        v28 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v28)
        {
          v29 = (const void *)v28;
          v30 = CFGetAllocator(v2);
          Mutable = CFDictionaryCreateMutable(v30, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (Mutable)
          {
            v32 = Mutable;
            if ((*(unsigned int (**)(const void *, CFMutableDictionaryRef))(v27 + 40))(v29, Mutable))
            {
              FigSignalErrorAt();
              v35 = 0;
            }
            else
            {
              v33 = CFGetAllocator(v2);
              Copy = CFDictionaryCreateCopy(v33, v32);
              v35 = Copy;
              if (Copy)
              {
                v36 = *(const void **)(v27 + 88);
                *(_QWORD *)(v27 + 88) = Copy;
                CFRetain(Copy);
                if (v36)
                  CFRelease(v36);
                *(_QWORD *)(v27 + 96) = FigGetUpTimeNanoseconds();
              }
              else
              {
                FigSignalErrorAt();
              }
            }
            CFRelease(v29);
            CFRelease(v32);
            if (!v35)
              goto LABEL_38;
            v37 = v35;
          }
          else
          {
            FigSignalErrorAt();
            v37 = (CFDictionaryRef)v29;
          }
          CFRelease(v37);
LABEL_38:
          CFRelease(v2);
          return;
        }
      }
    }
    FigSignalErrorAt();
    goto LABEL_38;
  }
  FigSignalErrorAt();
}

void bpr_timerCancellationCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void bpr_reportPredictionApplier(const __CFString *a1, const __CFNumber *a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v7;
  CFStringRef v8;
  CFStringRef v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, __CFString *, const __CFString *, uint64_t, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, __CFString *, CFStringRef, uint64_t, _QWORD);
  uint64_t valuePtr;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  v7 = CFGetAllocator(*(CFTypeRef *)a3);
  v8 = CFStringCreateWithFormat(v7, 0, CFSTR("%@%@"), a1, CFSTR("E"));
  if (v8)
  {
    v9 = v8;
    CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
    v10 = *DerivedStorage;
    if (*DerivedStorage)
    {
      v11 = valuePtr;
      v12 = *(void (**)(uint64_t, __CFString *, const __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
      if (v12)
        v12(v10, CFSTR("bandwidthPredictionStats"), a1, v11, 0);
    }
    if (FigCFEqual())
    {
      v13 = *DerivedStorage;
      if (!v13)
      {
LABEL_13:
        CFRelease(v9);
        return;
      }
      v14 = *(_QWORD *)(a3 + 16);
    }
    else
    {
      if (FigCFEqual())
        goto LABEL_13;
      if (FigCFEqual())
        goto LABEL_13;
      if (CFStringFind(a1, CFSTR("STDDEV"), 1uLL).location != -1)
        goto LABEL_13;
      v13 = *DerivedStorage;
      if (!v13)
        goto LABEL_13;
      v14 = *(_QWORD *)(a3 + 8);
    }
    v15 = valuePtr;
    v16 = *(void (**)(uint64_t, __CFString *, CFStringRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
    if (v16)
      v16(v13, CFSTR("bandwidthPredictionStats"), v9, (uint64_t)((double)(v15 - v14) / (double)v14 * 10000.0), 0);
    goto LABEL_13;
  }
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(void *a1, CFTypeRef *a2)
{
  int int64;
  int v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  v9 = 0;
  if (!a2)
  {
    v6 = FigSignalErrorAt();
LABEL_14:
    v7 = v6;
    goto LABEL_6;
  }
  int64 = xpc_dictionary_get_int64(a1, ".ks_KeySystem");
  v5 = xpc_dictionary_get_int64(a1, ".ks_EncryptionMethod");
  v6 = FigXPCMessageCopyCFString();
  if ((_DWORD)v6)
    goto LABEL_14;
  v6 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v6)
    goto LABEL_14;
  v7 = FigContentKeySpecifierCreate(int64, cf, v5, v10, (uint64_t *)&v9);
  if (!(_DWORD)v7)
  {
    *a2 = v9;
    v9 = 0;
  }
LABEL_6:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  return v7;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeySpecifier(void *a1, uint64_t a2)
{
  unsigned int KeySystem;
  unsigned int EncryptionMethod;
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  KeySystem = FigContentKeySpecifierGetKeySystem(a2);
  xpc_dictionary_set_int64(a1, ".ks_KeySystem", KeySystem);
  EncryptionMethod = FigContentKeySpecifierGetEncryptionMethod(a2);
  xpc_dictionary_set_int64(a1, ".ks_EncryptionMethod", EncryptionMethod);
  FigContentKeySpecifierGetIdentifier(a2);
  result = FigXPCMessageSetCFString();
  if (!(_DWORD)result)
  {
    FigContentKeySpecifierGetSupportedProtocolVersions(a2);
    return FigXPCMessageSetCFArray();
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeyRequestParams(void *a1, CFTypeRef *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;

  v15 = 0;
  v16 = 0;
  cf = 0;
  v14 = 0;
  if (!a2)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_11;
  }
  v4 = FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(a1, &cf);
  if (!(_DWORD)v4)
  {
    xpc_dictionary_get_int64(a1, ".ks_KeySystem");
    xpc_dictionary_get_int64(a1, ".ks_EncryptionMethod");
    v5 = xpc_dictionary_get_BOOL(a1, ".ks_SupportsOfflineKey");
    v6 = xpc_dictionary_get_BOOL(a1, ".ks_ShouldAttemptToRetryKeyRequestWithTimeout");
    xpc_dictionary_get_BOOL(a1, ".ks_IsPreload");
    v4 = FigXPCMessageCopyCFString();
    if (!(_DWORD)v4)
    {
      v4 = FigXPCMessageCopyCFArray();
      if (!(_DWORD)v4)
      {
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v9 = Mutable;
          FigCFDictionarySetBoolean();
          v10 = FigGetAllocatorForMedia();
          v11 = FigContentKeyRequestParamsCreate(v10, cf, 0, 0, 0, 0, 0, 0, 0, v5, v6, (uint64_t)v9, (uint64_t *)&v14);
          if (!(_DWORD)v11)
          {
            *a2 = v14;
            v14 = 0;
          }
          CFRelease(v9);
          goto LABEL_9;
        }
        v4 = FigSignalErrorAt();
      }
    }
  }
  v11 = v4;
LABEL_9:
  if (cf)
    CFRelease(cf);
LABEL_11:
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  return v11;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeyRequestParams(void *a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  result = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(a1, *(_QWORD *)(a2 + 16));
  if (!(_DWORD)result)
  {
    xpc_dictionary_set_BOOL(a1, ".ks_SupportsOfflineKey", *(_BYTE *)(a2 + 64) != 0);
    xpc_dictionary_set_BOOL(a1, ".ks_ShouldAttemptToRetryKeyRequestWithTimeout", *(_BYTE *)(a2 + 65) != 0);
    xpc_dictionary_set_BOOL(a1, ".ks_IsPreload", *(_BYTE *)(a2 + 66) != 0);
    return 0;
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_CopySerializedKeySpecifiers(const __CFArray *a1, _QWORD *a2)
{
  xpc_object_t empty;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  xpc_object_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  empty = xpc_array_create_empty();
  if (empty)
  {
    if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
        v9 = xpc_dictionary_create_empty();
        v10 = v9;
        if (!v9)
          break;
        v11 = FigContentKeyBossClientServerXPC_SerializeKeySpecifier(v9, (uint64_t)ValueAtIndex);
        if ((_DWORD)v11)
          goto LABEL_11;
        xpc_array_append_value(empty, v10);
        xpc_release(v10);
        if (v6 == ++v7)
          goto LABEL_8;
      }
      v11 = FigSignalErrorAt();
LABEL_11:
      v12 = v11;
    }
    else
    {
LABEL_8:
      v12 = 0;
      *a2 = empty;
    }
  }
  else
  {
    v12 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v12;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifiers(void *a1, __CFArray **a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  int64_t count;
  int64_t v8;
  size_t v9;
  xpc_object_t v10;
  uint64_t v11;
  uint64_t v12;
  void *value;

  value = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v6 = Mutable;
  count = xpc_array_get_count(a1);
  if (count < 1)
  {
LABEL_8:
    v12 = 0;
    *a2 = v6;
  }
  else
  {
    v8 = count;
    v9 = 0;
    while (1)
    {
      v10 = xpc_array_get_value(a1, v9);
      v11 = FigContentKeyBossClientServerXPC_DeserializeAndCopyKeySpecifier(v10, (CFTypeRef *)&value);
      if ((_DWORD)v11)
        break;
      CFArrayAppendValue(v6, value);
      if (value)
      {
        CFRelease(value);
        value = 0;
      }
      if (v8 == ++v9)
        goto LABEL_8;
    }
    v12 = v11;
    if (value)
      CFRelease(value);
    CFRelease(v6);
  }
  return v12;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeyRequestDataParams(void *a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  result = FigXPCMessageSetCFData();
  if (!(_DWORD)result)
  {
    result = FigXPCMessageSetCFData();
    if (!(_DWORD)result)
    {
      result = FigXPCMessageSetCFData();
      if (!(_DWORD)result)
      {
        result = FigXPCMessageSetCFArray();
        if (!(_DWORD)result)
        {
          result = FigXPCMessageSetCFData();
          if (!(_DWORD)result)
          {
            xpc_dictionary_set_int64(a1, ".krs_EncryptionMethod", *(unsigned int *)(a2 + 56));
            xpc_dictionary_set_BOOL(a1, ".krs_SupportsAirPlayDecryption", *(_BYTE *)(a2 + 60) != 0);
            xpc_dictionary_set_BOOL(a1, ".krs_ProvidesPersistableKey", *(_BYTE *)(a2 + 61) != 0);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeyRequestDataParams(void *a1, CFTypeRef *a2)
{
  uint64_t v4;
  int int64;
  char v6;
  char v7;
  uint64_t AllocatorForMedia;
  uint64_t v9;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef cf;
  const void *v16;

  v16 = 0;
  v14 = 0;
  cf = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  if (!a2)
  {
    v4 = FigSignalErrorAt();
LABEL_23:
    v9 = v4;
    goto LABEL_9;
  }
  v4 = FigXPCMessageCopyCFData();
  if ((_DWORD)v4)
    goto LABEL_23;
  v4 = FigXPCMessageCopyCFData();
  if ((_DWORD)v4)
    goto LABEL_23;
  v4 = FigXPCMessageCopyCFData();
  if ((_DWORD)v4)
    goto LABEL_23;
  v4 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v4)
    goto LABEL_23;
  v4 = FigXPCMessageCopyCFData();
  if ((_DWORD)v4)
    goto LABEL_23;
  int64 = xpc_dictionary_get_int64(a1, ".krs_EncryptionMethod");
  v6 = xpc_dictionary_get_BOOL(a1, ".krs_SupportsAirPlayDecryption");
  v7 = xpc_dictionary_get_BOOL(a1, ".krs_ProvidesPersistableKey");
  AllocatorForMedia = FigGetAllocatorForMedia();
  v9 = FigContentKeyRequestDataParamsCreate(AllocatorForMedia, v16, cf, v14, v13, v12, int64, v6, v7, (uint64_t *)&v11);
  if (!(_DWORD)v9)
  {
    *a2 = v11;
    v11 = 0;
  }
LABEL_9:
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  return v9;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeKeyResponseSpecifier(void *a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  xpc_dictionary_set_int64(a1, ".krps_ResponseType", *(unsigned int *)(a2 + 16));
  result = FigXPCMessageSetCFDate();
  if (!(_DWORD)result)
  {
    result = FigXPCMessageSetCFData();
    if (!(_DWORD)result)
      return FigXPCMessageSetCFData();
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopyKeyResponseSpecifier(void *a1, CFTypeRef *a2)
{
  int int64;
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t v6;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  v8 = 0;
  v9 = 0;
  if (!a2)
  {
    v4 = FigSignalErrorAt();
LABEL_17:
    v6 = v4;
    goto LABEL_7;
  }
  int64 = xpc_dictionary_get_int64(a1, ".krps_ResponseType");
  v4 = FigXPCMessageCopyCFDate();
  if ((_DWORD)v4)
    goto LABEL_17;
  v4 = FigXPCMessageCopyCFData();
  if ((_DWORD)v4)
    goto LABEL_17;
  v4 = FigXPCMessageCopyCFData();
  if ((_DWORD)v4)
    goto LABEL_17;
  AllocatorForMedia = FigGetAllocatorForMedia();
  v6 = FigContentKeyResponseParamsCreate(AllocatorForMedia, int64, cf, v10, v9, &v8);
  if (!(_DWORD)v6)
  {
    *a2 = v8;
    v8 = 0;
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  return v6;
}

uint64_t FigContentKeyBossClientServerXPC_SerializeSecureTokenRequestSpecifier(void *a1, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  xpc_dictionary_set_int64(a1, ".strs_type", *(unsigned int *)(a2 + 16));
  result = FigXPCMessageSetCFData();
  if (!(_DWORD)result)
  {
    result = FigXPCMessageSetCFData();
    if (!(_DWORD)result)
    {
      result = FigXPCMessageSetCFArray();
      if (!(_DWORD)result)
      {
        result = FigXPCMessageSetCFData();
        if (!(_DWORD)result)
        {
          xpc_dictionary_set_int64(a1, ".strs_encryptionMethod", *(unsigned int *)(a2 + 56));
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t FigContentKeyBossClientServerXPC_DeserializeAndCopySecureTokenRequestSpecifier(void *a1, CFTypeRef *a2)
{
  int int64;
  uint64_t v5;
  int v6;
  uint64_t AllocatorForMedia;
  uint64_t v8;
  CFTypeRef v10;

  v10 = 0;
  int64 = xpc_dictionary_get_int64(a1, ".strs_type");
  v5 = FigXPCMessageCopyCFData();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFData();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFArray();
  if ((_DWORD)v5)
    return v5;
  v5 = FigXPCMessageCopyCFData();
  if ((_DWORD)v5)
    return v5;
  v6 = xpc_dictionary_get_int64(a1, ".strs_encryptionMethod");
  AllocatorForMedia = FigGetAllocatorForMedia();
  v8 = FigContentKeySecureTokenRequestParamsCreate(AllocatorForMedia, int64, 0, 0, 0, 0, v6, (uint64_t *)&v10);
  if ((_DWORD)v8)
  {
    if (v10)
      CFRelease(v10);
  }
  else
  {
    *a2 = v10;
    v10 = 0;
  }
  return v8;
}

uint64_t FigCaptionRendererOutputNodeProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCaptionRendererOutputNodeProtocolGetProtocolID_sRegisterFigCaptionRendererOutputNodeProtocolTypeOnce, RegisterFigCaptionRendererOutputNodeProtocolType);
  return sFigCaptionRendererOutputNodeProtocolID;
}

uint64_t RegisterFigCaptionRendererOutputNodeProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigNeroidStartServer()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return FigXPCServerStart();
}

uint64_t neroidServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t value;

  OpCode = FigXPCMessageGetOpCode();
  if (!(_DWORD)OpCode)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    value = 0;
    OpCode = FigXPCServerLookupAndRetainAssociatedObject();
    if (!(_DWORD)OpCode)
      OpCode = FigSignalErrorAt();
    if (!(_DWORD)OpCode)
      return 4294950606;
  }
  return OpCode;
}

uint64_t FigCDSFreeLayoutRegionCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *DerivedStorage;
  uint64_t v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  if (!a3)
    return FigSignalErrorAt();
  v18 = 0;
  MEMORY[0x19402F294](&FigCDSFreeLayoutRegionGetClassID_sRegisterFigCDSFreeLayoutRegionBaseTypeOnce, RegisterFigCDSFreeLayoutRegionBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v7 = v18;
    DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[7] = a2;
    DerivedStorage[8] = a1;
    v17 = 0;
    FigCDSNodeCreate(&v17);
    v9 = v17;
    *DerivedStorage = v17;
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v11 = *(_QWORD *)(ProtocolVTable + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 200);
        if (v12)
          v12(v9, 1);
      }
    }
    v13 = *DerivedStorage;
    FigCDSNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 216);
        if (v16)
          v16(v13, 1);
      }
    }
    result = 0;
    *a3 = v7;
  }
  return result;
}

void FigCDSFreeLayoutRegionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCDSFreeLayoutRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSFreeLayoutRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSFreeLayoutRegion_FigCDSBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSFreeLayoutRegion <FigCDSBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCDSFreeLayoutRegion";
  return 0;
}

__CFString *FigCDSFreeLayoutRegion_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSFreeLayoutRegion <FigCDSNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, char **);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _BYTE *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  void (*v21)(uint64_t, CFArrayRef *);
  CFIndex v22;
  const void *ValueAtIndex;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(const void *, char **);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(const void *, CFStringRef *);
  CFStringRef theString2;
  char *v33;
  CFArrayRef theArray;
  CFStringRef theString1;
  char *__s1;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCDSBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v8 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
LABEL_46:
    v16 = 4294954508;
LABEL_47:
    FigSignalErrorAt();
    return v16;
  }
  v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_49:
    v16 = 4294954514;
    goto LABEL_47;
  }
  v10 = v9(a2, &__s1);
  if ((_DWORD)v10)
  {
LABEL_51:
    v16 = v10;
    goto LABEL_47;
  }
  v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCDSStackLayoutRegion")
     || !strcmp(v11, "FigCDSCellStackLayoutRegion")
     || !strcmp(v11, "FigCDSiTTRegion")
     || !strcmp(v11, "FigCDSSRTRegion")
     || !strcmp(v11, "FigCDSFreeLayoutRegion")))
  {
    theString1 = 0;
    FigCDSRegionProtocolGetProtocolID();
    v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
        goto LABEL_45;
      v18 = *(_QWORD *)(v18 + 16);
      if (!v18)
        goto LABEL_45;
      ((void (*)(uint64_t, CFStringRef *))v18)(a2, &theString1);
      LOBYTE(v18) = (_BYTE)theString1;
      if (!theString1)
        goto LABEL_45;
      theArray = 0;
      FigCDSNodeProtocolGetProtocolID();
      v19 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v19)
      {
        v20 = *((_QWORD *)v19 + 2);
        if (v20 && (v21 = *(void (**)(uint64_t, CFArrayRef *))(v20 + 24)) != 0)
        {
          v21(a1, &theArray);
          v19 = theArray;
        }
        else
        {
          v19 = 0;
        }
      }
      if (CFArrayGetCount(v19) >= 1)
      {
        v22 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v22);
          v33 = 0;
          FigCDSBaseProtocolGetProtocolID();
          v24 = CMBaseObjectGetProtocolVTable();
          if (!v24)
            goto LABEL_46;
          v25 = *(_QWORD *)(v24 + 16);
          if (!v25)
            goto LABEL_46;
          v26 = *(uint64_t (**)(const void *, char **))(v25 + 8);
          if (!v26)
            goto LABEL_49;
          v10 = v26(ValueAtIndex, &v33);
          if ((_DWORD)v10)
            goto LABEL_51;
          v27 = v33;
          if (v33
            && (!strcmp(v33, "FigCDSStackLayoutRegion")
             || !strcmp(v27, "FigCDSCellStackLayoutRegion")
             || !strcmp(v27, "FigCDSiTTRegion")
             || !strcmp(v27, "FigCDSSRTRegion")
             || !strcmp(__s1, "FigCDSFreeLayoutRegion")))
          {
            theString2 = 0;
            FigCDSRegionProtocolGetProtocolID();
            v28 = CMBaseObjectGetProtocolVTable();
            if (v28)
            {
              v29 = *(_QWORD *)(v28 + 16);
              if (v29)
              {
                v30 = *(void (**)(const void *, CFStringRef *))(v29 + 16);
                if (v30)
                  v30(ValueAtIndex, &theString2);
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              LOBYTE(v18) = 1;
              goto LABEL_45;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v22);
      }
    }
    LOBYTE(v18) = 0;
LABEL_45:
    v16 = 0;
    *a3 = v18;
    return v16;
  }
  v12 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13)
    return 4294954508;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    return 4294954508;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(v14 + 32);
  if (v15)
    return v15(v12, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 240);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(const void *, CGRect *);
  const __CFDictionary *v8;
  const void *Value;
  double MidX;
  double MidY;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const void *, double, double);
  CGSize size;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, double, double);
  CGRect v20;

  v4 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v20.size = v4;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7)
        v7(a1, &v20);
    }
  }
  v8 = *(const __CFDictionary **)(a2 + 272);
  if (v8)
  {
    Value = CFDictionaryGetValue(v8, a1);
    MidX = CGRectGetMidX(v20);
    MidY = CGRectGetMidY(v20);
    FigCDSOutputNodeProtocolGetProtocolID();
    v12 = CMBaseObjectGetProtocolVTable();
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = *(void (**)(const void *, double, double))(v13 + 72);
        if (v14)
          v14(Value, MidX, MidY);
      }
    }
    size = v20.size;
    FigCDSOutputNodeProtocolGetProtocolID();
    v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = *(void (**)(const void *, double, double))(v17 + 88);
        if (v18)
          v18(Value, size.width, size.height);
      }
    }
  }
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *);
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __int128 *);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, __int128 *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, CGRect *);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, CFArrayRef *);
  CFIndex Count;
  CFIndex v29;
  const void *ValueAtIndex;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, char **);
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, int *);
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(const void *, __int128 *);
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, CGRect *);
  double MidX;
  double MidY;
  CGSize v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(const void *, double, double);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(const void *, uint64_t);
  double width;
  CGFloat v53;
  double v54;
  double height;
  double v56;
  double v57;
  double x;
  double y;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, double, double, double, double);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  CGSize v71;
  CGPoint v72;
  int v73;
  char *__s1;
  CFArrayRef theArray;
  uint64_t v76;
  CGRect v77;
  __int128 v78;
  CGSize v79;
  __int128 v80;
  __int128 v81;
  CGRect v82;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v76 = 0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v76);
        if (v76)
        {
          v8 = CMBaseObjectGetDerivedStorage();
          v9 = *(_DWORD *)(v8 + 16);
          v10 = (double)*(int *)(v8 + 20) * 0.0533;
          v11 = *(double *)(v8 + 40);
          v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0)
            v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          else
            v13 = 0.0;
          v14 = *(_QWORD *)v8;
          FigCDSNodeProtocolGetProtocolID();
          v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 16);
            if (v16)
            {
              v17 = *(void (**)(uint64_t, __int128 *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v78) = 1;
                *(_DWORD *)((char *)&v78 + 1) = 0;
                DWORD1(v78) = 0;
                *((double *)&v78 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v79.width) = 1;
                *(_DWORD *)((char *)&v79.width + 1) = 0;
                HIDWORD(v79.width) = 0;
                v79.height = v13;
                LOBYTE(v80) = 1;
                *(_DWORD *)((char *)&v80 + 1) = 0;
                DWORD1(v80) = 0;
                *((double *)&v80 + 1) = (double)v9 / 100.0;
                LOBYTE(v81) = 1;
                *(_DWORD *)((char *)&v81 + 1) = 0;
                DWORD1(v81) = 0;
                *((double *)&v81 + 1) = v10;
                v17(v14, &v78);
              }
            }
          }
          v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          v78 = CDSRectNull;
          v79 = (CGSize)unk_193301910;
          v80 = xmmword_193301920;
          v81 = unk_193301930;
          v71 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v72 = (CGPoint)*MEMORY[0x1E0C9D628];
          v77.origin = (CGPoint)*MEMORY[0x1E0C9D628];
          v77.size = v71;
          FigCDSNodeProtocolGetProtocolID();
          v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 16);
            if (v20)
            {
              v21 = *(void (**)(uint64_t, __int128 *))(v20 + 88);
              if (v21)
                v21(a1, &v78);
            }
          }
          FigCDSNodeProtocolGetProtocolID();
          v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 16);
            if (v23)
            {
              v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24)
                v24(a1, &v77);
            }
          }
          if (*((double *)&v80 + 1) != -1.0)
          {
            width = v77.size.width;
            v53 = v77.origin.x + *((double *)&v78 + 1);
            if ((_BYTE)v78)
              v53 = v77.origin.x + *((double *)&v78 + 1) * v77.size.width;
            v54 = v77.origin.y + v79.height;
            if (LOBYTE(v79.width))
              v54 = v77.origin.y + v79.height * v77.size.height;
            height = 1.0;
            if (!(_BYTE)v80)
              width = 1.0;
            if ((_BYTE)v81)
              height = v77.size.height;
            v57 = *((double *)&v81 + 1) * height;
            v56 = *((double *)&v80 + 1) * width;
            v82 = CGRectIntegral(*(CGRect *)&v53);
            x = v82.origin.x;
            y = v82.origin.y;
            v60 = v82.size.width;
            v61 = v82.size.height;
            v62 = *v18;
            FigCDSNodeProtocolGetProtocolID();
            v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              v64 = *(_QWORD *)(v63 + 16);
              if (v64)
              {
                v65 = *(void (**)(uint64_t, double, double, double, double))(v64 + 96);
                if (v65)
                  v65(v62, x, y, v60, v61);
              }
            }
          }
          theArray = 0;
          FigCDSNodeProtocolGetProtocolID();
          v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 16);
            if (v26)
            {
              v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27)
                v27(a1, &theArray);
            }
          }
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v29 = Count + 1;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v29 - 2);
              __s1 = 0;
              FigCDSBaseProtocolGetProtocolID();
              v31 = CMBaseObjectGetProtocolVTable();
              if (!v31)
                break;
              v32 = *(_QWORD *)(v31 + 16);
              if (!v32)
                break;
              v33 = *(unsigned int (**)(const void *, char **))(v32 + 8);
              if (!v33 || v33(ValueAtIndex, &__s1))
                break;
              if (__s1 && !strcmp(__s1, "FigCDSCaption"))
              {
                v73 = 0;
                FigCDSCaptionProtocolGetProtocolID();
                v34 = CMBaseObjectGetProtocolVTable();
                if (!v34)
                  break;
                v35 = *(_QWORD *)(v34 + 16);
                if (!v35)
                  break;
                v36 = *(unsigned int (**)(const void *, int *))(v35 + 48);
                if (!v36 || v36(ValueAtIndex, &v73))
                  break;
                if (v73 == 3)
                {
                  v78 = (__int128)v72;
                  v79 = v71;
                  FigCDSNodeProtocolGetProtocolID();
                  v37 = CMBaseObjectGetProtocolVTable();
                  if (!v37)
                    break;
                  v38 = *(_QWORD *)(v37 + 16);
                  if (!v38)
                    break;
                  v39 = *(unsigned int (**)(const void *, __int128 *))(v38 + 104);
                  if (!v39)
                    break;
                  if (v39(ValueAtIndex, &v78))
                    break;
                  v77.origin = v72;
                  v77.size = v71;
                  FigCDSNodeProtocolGetProtocolID();
                  v40 = CMBaseObjectGetProtocolVTable();
                  if (!v40)
                    break;
                  v41 = *(_QWORD *)(v40 + 16);
                  if (!v41)
                    break;
                  v42 = *(unsigned int (**)(const void *, CGRect *))(v41 + 72);
                  if (!v42 || v42(ValueAtIndex, &v77))
                    break;
                  MidX = CGRectGetMidX(v77);
                  MidY = CGRectGetMidY(v77);
                  v45 = v79;
                  FigCDSNodeProtocolGetProtocolID();
                  v46 = CMBaseObjectGetProtocolVTable();
                  if (v46)
                  {
                    v47 = *(_QWORD *)(v46 + 16);
                    if (v47)
                    {
                      v48 = *(void (**)(const void *, double, double))(v47 + 128);
                      if (v48)
                        v48(ValueAtIndex, MidX - v45.width * 0.5, MidY - v45.height * 0.5);
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  v49 = CMBaseObjectGetProtocolVTable();
                  if (v49)
                  {
                    v50 = *(_QWORD *)(v49 + 16);
                    if (v50)
                    {
                      v51 = *(void (**)(const void *, uint64_t))(v50 + 216);
                      if (v51)
                        v51(ValueAtIndex, 1);
                    }
                  }
                }
              }
              if ((unint64_t)--v29 <= 1)
                goto LABEL_69;
            }
            FigSignalErrorAt();
          }
        }
      }
    }
  }
LABEL_69:
  v66 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v67 = CMBaseObjectGetProtocolVTable();
  if (!v67)
    return 4294954508;
  v68 = *(_QWORD *)(v67 + 16);
  if (!v68)
    return 4294954508;
  v69 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 272);
  if (v69)
    return v69(v66, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int16 *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCDSNodeProtocolGetProtocolID();
          v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 16);
            if (v9)
            {
              v10 = *(void (**)(uint64_t, uint64_t))(v9 + 280);
              if (v10)
                v10(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __int16 *))(v12 + 224);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCDSNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
              if (v16)
                v16(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void (*v4)(_OWORD *);
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void (**)(_OWORD *))(DerivedStorage + 64);
  if (v4 && *(_QWORD *)(DerivedStorage + 56))
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    v4(v7);
  }
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 336);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 344);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCDSFreeLayoutRegion_FigCDSRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSFreeLayoutRegion <FigCDSRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetRegionID(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCDSFreeLayoutRegion_FigCDSRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCDSFreeLayoutRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSFreeLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSFreeLayoutRegion]"));
}

uint64_t FigBufferedAirPlayAudioChainSubPipePassthroughCreate(uint64_t a1, const void *a2, uint64_t a3, const __CFDictionary *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t DerivedStorage;
  uint64_t RichestDecodableFormatAndChannelLayout;
  CFTypeRef v14;
  dispatch_queue_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v17;
  uint64_t v18;
  void *value;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  value = 0;
  v21 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a5 && a3)
  {
    FigBufferedAirPlayAudioChainSubPipeGetClassID();
    v10 = CMDerivedObjectCreate();
    if ((_DWORD)v10)
      return v10;
    v11 = v21;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)DerivedStorage = 0;
    if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingID"), (const void **)&value))
      CFStringGetCString((CFStringRef)value, (char *)DerivedStorage, 20, 0x600u);
    RichestDecodableFormatAndChannelLayout = FigSampleBufferConsumerCreateForSampleBufferConsumer("SubPipePassthroughSbcForInput", (_QWORD *)(DerivedStorage + 40));
    if (!(_DWORD)RichestDecodableFormatAndChannelLayout)
    {
      RichestDecodableFormatAndChannelLayout = FigSampleBufferConsumerSbufInspectorCreate(a1, a2, (uint64_t)bapspPassthrough_inspectSampleBuffer, v11, "sbcSbufInspectForPassthrough", (_QWORD *)(DerivedStorage + 48));
      if (!(_DWORD)RichestDecodableFormatAndChannelLayout)
      {
        v14 = CFRetain(a2);
        *(_WORD *)(DerivedStorage + 32) = 0;
        *(_QWORD *)(DerivedStorage + 56) = v14;
        *(_QWORD *)(DerivedStorage + 64) = 0;
        v15 = dispatch_queue_create("com.apple.coremedia.bufferedAirPlayAudioChainPassthroughSubPipe.notificationQueue", 0);
        *(_QWORD *)(DerivedStorage + 24) = v15;
        if (!v15)
          return 4294954510;
        RichestDecodableFormatAndChannelLayout = CMAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout();
        if (!(_DWORD)RichestDecodableFormatAndChannelLayout)
        {
          if (dword_1EE2A2D78)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            if (dword_1EE2A2D78)
            {
              v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          v18 = 0;
          *a5 = v11;
          return v18;
        }
      }
    }
    return RichestDecodableFormatAndChannelLayout;
  }
  return FigSignalErrorAt();
}

uint64_t bapspPassthrough_inspectSampleBuffer(void *a1, const void *a2)
{
  CMTime v5;

  if (a1)
  {
    if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA4E50], 0))
      bapspPassthrough_postNotification(a2, (uint64_t)CFSTR("PlayResourceReleased"));
    if (CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA4E48], 0))
    {
      CMSampleBufferGetOutputPresentationTimeStamp(&v5, (CMSampleBufferRef)a1);
      bapspPassthrough_postNotification(a2, (uint64_t)CFSTR("FinishedProcessingData"));
    }
  }
  return 1;
}

uint64_t bapspPassthrough_invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 33))
    return 0;
  v1 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 32) = 0;
  v2 = bapspPassthrough_breakAudioChain();
  v3 = *(const void **)(v1 + 40);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v1 + 40) = 0;
  }
  v4 = *(const void **)(v1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v1 + 48) = 0;
  }
  v5 = *(const void **)(v1 + 56);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(v1 + 56) = 0;
  }
  v6 = *(const void **)(v1 + 64);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(v1 + 64) = 0;
  }
  *(_BYTE *)(v1 + 33) = 1;
  return v2;
}

void bapspPassthrough_finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  bapspPassthrough_invalidate();
  v1 = *(NSObject **)(DerivedStorage + 24);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
}

__CFString *bapspPassthrough_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigBufferedAirPlayAudioChainSubPipet %p>"), a1);
  return Mutable;
}

uint64_t bapspPassthrough_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("SourceSampleBufferConsumer")))
  {
    v7 = *(CFTypeRef *)(DerivedStorage + 40);
    if (v7)
LABEL_3:
      v7 = CFRetain(v7);
  }
  else
  {
    if (CFEqual(a2, CFSTR("IsStarted")))
    {
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!*(_BYTE *)(DerivedStorage + 32))
        v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    }
    else if (CFEqual(a2, CFSTR("SubPipeType")))
    {
      v10 = (CFTypeRef *)&kFigBufferedAirPlayAudioChainSubPipeSubPipeType_Passthrough;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("SpatializationEnabled")))
        return 4294954512;
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    }
    v7 = *v10;
    if (*v10)
      goto LABEL_3;
  }
  v8 = 0;
  *a4 = v7;
  return v8;
}

uint64_t bapspPassthrough_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CMAttachmentBearerRef v12;
  uint64_t (*v13)(uint64_t, CMAttachmentBearerRef);
  uint64_t v14;
  CMAttachmentBearerRef target;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(CFSTR("LoudnessInfo"), a2))
  {
    if (CFEqual(CFSTR("AudioProcessingTap"), a2) || CFEqual(CFSTR("ThreadPriority"), a2))
      return 0;
    return FigSignalErrorAt();
  }
  if (!a3)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(a3);
  if (v6 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  *(_QWORD *)(DerivedStorage + 64) = CFRetain(a3);
  v8 = CMBaseObjectGetDerivedStorage();
  target = 0;
  if (*(_QWORD *)(v8 + 64))
  {
    v9 = v8;
    v10 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if (!(_DWORD)v10)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA4E40], *(CFTypeRef *)(v9 + 64), 0);
      v11 = *(_QWORD *)(v9 + 56);
      v12 = target;
      v13 = *(uint64_t (**)(uint64_t, CMAttachmentBearerRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v13)
      {
        v14 = 4294954514;
LABEL_16:
        if (target)
          CFRelease(target);
        return v14;
      }
      v10 = v13(v11, v12);
    }
    v14 = v10;
    goto LABEL_16;
  }
  return 0;
}

uint64_t bapspPassthrough_breakAudioChain()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, const __CFString *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D78)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = *(_QWORD *)(DerivedStorage + 40);
  v3 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v3)
    return v3(v2, CFSTR("DownstreamConsumer"), 0);
  else
    return 4294954514;
}

uint64_t bapspPassthrough_startAudioChain()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef cf[23];

  cf[22] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (dword_1EE2A2D78)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = *(_QWORD *)(DerivedStorage + 40);
  v3 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v3)
    return 4294954514;
  v4 = v3(v2, CFSTR("DownstreamConsumer"), *MEMORY[0x1E0C9AE00], cf);
  v5 = cf[0];
  if ((_DWORD)v4)
    goto LABEL_11;
  if (!cf[0])
  {
    v4 = FigSignalErrorAt();
    v5 = cf[0];
LABEL_11:
    if (!v5)
      return v4;
    goto LABEL_7;
  }
  v4 = 0;
  *(_BYTE *)(DerivedStorage + 32) = 1;
LABEL_7:
  CFRelease(v5);
  return v4;
}

uint64_t bapspPassthrough_stopAudioChain()
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 32) = 0;
  return 0;
}

uint64_t bapspPassthrough_assembleAudioChain()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 40);
  v1 = *(_QWORD *)(DerivedStorage + 48);
  v3 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v3)
    return v3(v2, CFSTR("DownstreamConsumer"), v1);
  else
    return 4294954514;
}

uint64_t bapspPassthrough_flush()
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D78)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = DerivedStorage[5];
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v3)
    return 4294954514;
  result = v3(v2);
  if ((_DWORD)result)
    return result;
  v5 = DerivedStorage[6];
  v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v6)
    return 4294954514;
  result = v6(v5);
  if ((_DWORD)result)
    return result;
  v7 = DerivedStorage[7];
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v8)
    return v8(v7);
  else
    return 4294954514;
}

void bapspPassthrough_postNotification(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v5 = *(NSObject **)(DerivedStorage + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __bapspPassthrough_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_32;
  block[4] = a2;
  block[5] = a1;
  block[6] = 0;
  dispatch_async(v5, block);
}

void __bapspPassthrough_postNotification_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
}

uint64_t MoviePSSHData_GetPlayReadyProtectionSystemData(_QWORD *a1, CFIndex a2, void *a3, _DWORD *a4)
{
  char v8;
  const __CFData *LegacyConfigKeyIdentifier;
  const UInt8 *BytePtr;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFStringRef v16;
  size_t v17;
  const __CFAllocator *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  const char *v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  int v56;
  const char *CStringPtrAndBufferToFree;
  int Length;
  int v59;
  uint64_t v60;
  char usedBufLen;
  char usedBufLena;
  char usedBufLenb;
  char usedBufLenc;
  char usedBufLend;
  char usedBufLene;
  CFIndex v68;
  CFStringRef theString;
  int v70;
  unsigned int v71;
  __int16 v72;
  __int16 v73;
  uint64_t info;
  _DWORD __src[2];
  __int16 v76;
  char v77[2038];
  uint64_t v78;
  CFRange v79;

  v78 = *MEMORY[0x1E0C80C00];
  v70 = 0;
  bzero(__src, 0x800uLL);
  v68 = 0;
  theString = 0;
  if (!a1 || EC_GetEncryptionScheme((uint64_t)a1, &v70))
    goto LABEL_29;
  if (v70 == 3)
    goto LABEL_6;
  if (!v70)
    goto LABEL_29;
  if (EC_HasLegacyConfigInfo(a1))
LABEL_6:
    v8 = 0;
  else
    v8 = 1;
  if (EC_HasLegacyConfigInfo(a1))
  {
    LegacyConfigKeyIdentifier = (const __CFData *)EC_GetLegacyConfigKeyIdentifier(a1);
    if (!LegacyConfigKeyIdentifier)
      goto LABEL_29;
  }
  else
  {
    LegacyConfigKeyIdentifier = (const __CFData *)EC_GetPlayReadyKeyIdentifierForRange(a1, a2);
    if (!LegacyConfigKeyIdentifier)
      goto LABEL_29;
  }
  BytePtr = CFDataGetBytePtr(LegacyConfigKeyIdentifier);
  v16 = (CFStringRef)BytePtr;
  if (!BytePtr)
  {
LABEL_31:
    v60 = FigSignalErrorAt();
    goto LABEL_23;
  }
  __src[1] = 65537;
  if ((v8 & 1) == 0)
  {
    strcpy(v77, "<WRMHEADER xmlns=\"http://schemas.microsoft.com/DRM/2007/03/PlayReadyHeader\" version=\"4.0.0.0\"><DATA>");
    strcpy(&v77[100], "<PROTECTINFO><KEYLEN>16</KEYLEN><ALGID>AESCTR</ALGID></PROTECTINFO>");
    strcpy(&v77[167], "<KID>");
    v71 = bswap32(*(_DWORD *)BytePtr);
    v72 = bswap32(*((unsigned __int16 *)BytePtr + 2)) >> 16;
    v73 = bswap32(*((unsigned __int16 *)BytePtr + 3)) >> 16;
    info = *((_QWORD *)BytePtr + 1);
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (!FigCreateBase64EncodedStringFromBytes())
    {
      CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
      snprintf(&v77[172], 0x74AuLL, "%s", CStringPtrAndBufferToFree);
      free(0);
      Length = CFStringGetLength(theString);
      snprintf((char *)__src + (Length + 182), (1866 - Length), "</KID>");
      snprintf((char *)__src + (Length + 188), (1860 - Length), "</DATA>");
      snprintf((char *)__src + (Length + 195), (1853 - Length), "</WRMHEADER>");
      v56 = Length + 207;
      goto LABEL_18;
    }
LABEL_29:
    v60 = FigSignalErrorAt();
    v16 = 0;
    goto LABEL_23;
  }
  v17 = safe_snprintf(v77, 0x7F6uLL, "<WRMHEADER xmlns=\"http://schemas.microsoft.com/DRM/2007/03/PlayReadyHeader\" version=\"4.3.0.0\">", v11, v12, v13, v14, v15, usedBufLen);
  snprintf((char *)__src + (v17 + 10), (2038 - v17), "<DATA>");
  v71 = bswap32(v16->isa);
  v72 = bswap32(WORD2(v16->isa)) >> 16;
  v73 = bswap32(HIWORD(v16->isa)) >> 16;
  info = v16->info;
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (FigCreateBase64EncodedStringFromBytes())
    goto LABEL_29;
  FigCFStringGetCStringPtrAndBufferToFree();
  v24 = safe_snprintf((char *)__src + (v17 + 16), (2032 - v17), "<PROTECTINFO>", v19, v20, v21, v22, v23, usedBufLena)+ v17+ 16;
  v35 = v24
      + safe_snprintf((char *)__src + v24, (2048 - v24), "<KIDS>", v25, v26, v27, v28, v29, usedBufLenb);
  if (v70 == 3)
    v36 = "AESCTR";
  else
    v36 = "AESCBC";
  v37 = safe_snprintf((char *)__src + v35, (2048 - v35), "<KID ALGID=\"%s\" VALUE=\"%s\">", v30, v31, v32, v33, v34, (char)v36)+ v35;
  free(0);
  v43 = safe_snprintf((char *)__src + v37, (2048 - v37), "</KID>", v38, v39, v40, v41, v42, usedBufLenc)+ v37;
  v49 = v43
      + safe_snprintf((char *)__src + v43, (2048 - v43), "</KIDS>", v44, v45, v46, v47, v48, usedBufLend);
  v55 = v49
      + safe_snprintf((char *)__src + v49, (2048 - v49), "</PROTECTINFO>", v50, v51, v52, v53, v54, usedBufLene);
  snprintf((char *)__src + v55, (2048 - v55), "</DATA>");
  snprintf((char *)__src + (v55 + 7), (2041 - v55), "</WRMHEADER>");
  v56 = v55 + 19;
LABEL_18:
  v16 = CFStringCreateWithCString(v18, v77, 0x8000100u);
  v79.length = CFStringGetLength(v16);
  v79.location = 0;
  CFStringGetBytes(v16, v79, 0x100u, 0x3Fu, 0, (UInt8 *)v77, (2 * v56 - 19), &v68);
  if (HIDWORD(v68))
    goto LABEL_31;
  v59 = v68 + 10;
  __src[0] = v68 + 10;
  v76 = v68;
  if (a3)
    memcpy(a3, __src, (v68 + 10));
  v60 = 0;
  if (a4)
    *a4 = v59;
LABEL_23:
  if (theString)
    CFRelease(theString);
  if (v16)
    CFRelease(v16);
  return v60;
}

size_t safe_snprintf(char *a1, size_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  size_t result;

  LODWORD(result) = vsnprintf(a1, a2, a3, &a9);
  if (a2 - 1 >= (int)result)
    return (int)result;
  else
    return a2 - 1;
}

uint64_t mpd_CreateWidevinePSSHDataEntry()
{
  uint64_t v0;
  __CFDictionary **v1;
  __CFDictionary **v2;
  CFIndex v3;
  CFIndex v4;
  _QWORD *v5;
  const __CFAllocator *v6;
  uint64_t BlockBufferCopyingMemoryBlock;
  const __CFData *WidevineKeyIdentifierForRange;
  const __CFData *v9;
  CFIndex Length;
  unint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *BytePtr;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  void *v28;
  void *v29;
  __CFDictionary *MutableCopy;
  __CFDictionary *v31;
  uint64_t v32;
  CMBlockBufferRef destinationBuffer;
  void *value;
  int v36;
  void *v37;
  _BYTE sourceBytes[2048];
  _WORD v39[1024];
  uint64_t v40;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = (_QWORD *)v0;
  v40 = *MEMORY[0x1E0C80C00];
  destinationBuffer = 0;
  value = 0;
  bzero(sourceBytes, 0x800uLL);
  if (!v5 || !v2)
    goto LABEL_35;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
  if (!(_DWORD)BlockBufferCopyingMemoryBlock)
  {
    bzero(v39, 0x800uLL);
    v37 = 0;
    v36 = 0;
    if (!EC_GetEncryptionScheme((uint64_t)v5, &v36))
    {
      if (v36)
      {
        WidevineKeyIdentifierForRange = (const __CFData *)EC_GetWidevineKeyIdentifierForRange(v5, v4);
        if (WidevineKeyIdentifierForRange)
        {
          v9 = WidevineKeyIdentifierForRange;
          Length = CFDataGetLength(WidevineKeyIdentifierForRange);
          if (Length >= 1)
          {
            v11 = Length;
            if (v36 == 3)
            {
              v39[0] = 8;
              v12 = (char *)malloc_type_malloc(0xAuLL, 0x100004077774924uLL);
              *v12 = 1;
              snprintf((char *)v39 + 1, 0x7FFuLL, "%s", v12);
              v37 = 0;
              free(v12);
              v13 = 2;
            }
            else
            {
              v13 = 0;
            }
            snprintf((char *)&v39[v13 / 2], 2048 - v13, "%c", 18);
            v14 = v13 | 1;
            v15 = mpd_CreateVarint(v11, &v37);
            snprintf((char *)v39 + v14, v13 ^ 0x7FF, "%s", (const char *)v37);
            v16 = v37;
            if (v37)
            {
              v37 = 0;
              free(v16);
            }
            v17 = v14 + v15;
            BytePtr = (char *)CFDataGetBytePtr(v9);
            do
            {
              v24 = *BytePtr++;
              v17 += safe_snprintf((char *)v39 + v17, 2048 - v17, "%c", v18, v19, v20, v21, v22, v24);
              --v11;
            }
            while (v11);
            if ((v36 & 0xFFFFFFFE) == 2)
            {
              snprintf((char *)v39 + v17, 2048 - v17, "%c", 72);
              v25 = v17 + 1;
              if (v36 == 3)
                v26 = 1667591779;
              else
                v26 = 1667392371;
              v27 = mpd_CreateVarint(v26, &v37);
              snprintf((char *)v39 + v25, 2047 - v17, "%s", (const char *)v37);
              v28 = v37;
              if (v37)
              {
                v37 = 0;
                free(v28);
              }
              v17 = v25 + v27;
            }
            __memcpy_chk();
            v29 = v37;
            if (v37)
            {
              v37 = 0;
              free(v29);
            }
            if (v17)
            {
              BlockBufferCopyingMemoryBlock = CMBlockBufferCreateWithMemoryBlock(v6, 0, v17, v6, 0, 0, v17, 1u, &destinationBuffer);
              if ((_DWORD)BlockBufferCopyingMemoryBlock)
                goto LABEL_36;
              BlockBufferCopyingMemoryBlock = CMBlockBufferReplaceDataBytes(sourceBytes, destinationBuffer, 0, v17);
              if ((_DWORD)BlockBufferCopyingMemoryBlock)
                goto LABEL_36;
              MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
              if (MutableCopy)
              {
                v31 = MutableCopy;
                CFDictionarySetValue(MutableCopy, CFSTR("SystemID"), value);
                CFDictionarySetValue(v31, CFSTR("Data"), destinationBuffer);
                v32 = 0;
                *v2 = v31;
                goto LABEL_29;
              }
            }
            goto LABEL_35;
          }
        }
      }
    }
    BlockBufferCopyingMemoryBlock = FigSignalErrorAt();
    if (!(_DWORD)BlockBufferCopyingMemoryBlock)
LABEL_35:
      BlockBufferCopyingMemoryBlock = FigSignalErrorAt();
  }
LABEL_36:
  v32 = BlockBufferCopyingMemoryBlock;
LABEL_29:
  if (value)
    CFRelease(value);
  if (destinationBuffer)
    CFRelease(destinationBuffer);
  return v32;
}

uint64_t MoviePSSHData_CreatePSSHDataEntries(_QWORD *a1, __CFArray **a2)
{
  const __CFAllocator *v4;
  CFMutableArrayRef Mutable;
  __CFArray *v6;
  int BlockBufferCopyingMemoryBlock;
  CFIndex CurrentRangeIndex;
  __CFDictionary *MutableCopy;
  __CFDictionary *v10;
  int v11;
  __CFDictionary *cf;
  _DWORD dataLength[3];
  void *value;
  _BYTE sourceBytes[2048];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (a1 && a2)
  {
    if (!EC_HasPlayReadyInfo((uint64_t)a1)
      && !EC_HasWidevineInfo((uint64_t)a1)
      && !EC_HasLegacyConfigInfo(a1))
    {
      return 0;
    }
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v6 = Mutable;
      if (EC_ShouldWritePlayReadyPSSHAtom(a1) && EC_HasPlayReadyInfo((uint64_t)a1))
      {
        EC_GetCurrentRangeIndex((uint64_t)a1);
        value = 0;
        bzero(sourceBytes, 0x800uLL);
        memset(dataLength, 0, sizeof(dataLength));
        BlockBufferCopyingMemoryBlock = FigCreateBlockBufferCopyingMemoryBlock();
        if (BlockBufferCopyingMemoryBlock
          || (CurrentRangeIndex = EC_GetCurrentRangeIndex((uint64_t)a1),
              (BlockBufferCopyingMemoryBlock = MoviePSSHData_GetPlayReadyProtectionSystemData(a1, CurrentRangeIndex, sourceBytes, dataLength)) != 0)|| (BlockBufferCopyingMemoryBlock = CMBlockBufferCreateWithMemoryBlock(v4, 0, dataLength[0], v4, 0, 0, dataLength[0], 1u, (CMBlockBufferRef *)&dataLength[1])) != 0|| (BlockBufferCopyingMemoryBlock = CMBlockBufferReplaceDataBytes(sourceBytes, *(CMBlockBufferRef *)&dataLength[1], 0, dataLength[0])) != 0)
        {
          v11 = BlockBufferCopyingMemoryBlock;
          v10 = 0;
        }
        else
        {
          MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
          v10 = MutableCopy;
          if (MutableCopy)
          {
            CFDictionarySetValue(MutableCopy, CFSTR("SystemID"), value);
            CFDictionarySetValue(v10, CFSTR("Data"), *(const void **)&dataLength[1]);
            v11 = 0;
            cf = v10;
          }
          else
          {
            v11 = FigSignalErrorAt();
          }
        }
        if (value)
          CFRelease(value);
        if (*(_QWORD *)&dataLength[1])
          CFRelease(*(CFTypeRef *)&dataLength[1]);
        if (!v11)
        {
          CFArrayAppendValue(v6, v10);
          if (v10)
          {
            CFRelease(v10);
            cf = 0;
          }
        }
      }
      if (EC_ShouldWriteWidevinePSSHAtom(a1))
      {
        if (EC_HasWidevineInfo((uint64_t)a1))
        {
          EC_GetCurrentRangeIndex((uint64_t)a1);
          if (!mpd_CreateWidevinePSSHDataEntry())
          {
            CFArrayAppendValue(v6, cf);
            if (cf)
              CFRelease(cf);
          }
        }
      }
      *a2 = v6;
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t mpd_CreateVarint(unint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = malloc_type_malloc(0xAuLL, 0x100004077774924uLL);
  if (a1 < 0x80)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v4[v5] = v6 | 0x80;
      a1 = v6 >> 7;
      ++v5;
      v7 = v6 >> 14;
      v6 >>= 7;
    }
    while (v7);
  }
  v8 = v5 + 1;
  v4[v5] = a1;
  *a2 = v4;
  return v8;
}

uint64_t FigPlayerCentralCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *value;
  CFTypeRef v8;
  char __str[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  value = 0;
  v8 = 0;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)__str = 0u;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4)
    return FigSignalErrorAt();
  FigPlayerGetClassID();
  v5 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v5;
}

void playercentral_performStartupTaskConfirmingRouteChoiceWithRoutingSessionManager(const void *a1, uint64_t a2, const __CFDictionary *a3, void *a4, void (*a5)(void *, int, unsigned __int8))
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t UpTimeNanoseconds;
  uint64_t FigBaseObject;
  unsigned int (*v13)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (**v30)(void *, uint64_t);
  void (*v31)(const void *, void (*)(void (**)(void)), void (**)(void *, uint64_t));
  void (*v32)(void *, int, unsigned __int8);
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[10];
  int v36;
  os_log_type_t type;
  int v38;
  int valuePtr;
  CFNumberRef number;
  CFTypeRef v41;
  CFTypeRef cf;
  const void *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  number = 0;
  v41 = 0;
  valuePtr = 0;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    v10 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 24))
    {
      if (!*(_BYTE *)(DerivedStorage + 184))
      {
        UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        FigBaseObject = FigPlayerGetFigBaseObject(a1);
        v13 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v13)
        {
          v14 = *MEMORY[0x1E0C9AE00];
          if (!v13(FigBaseObject, CFSTR("AllowsAirPlayVideo"), *MEMORY[0x1E0C9AE00], &v41))
          {
            v33 = FigGetUpTimeNanoseconds();
            v15 = CMBaseObjectGetDerivedStorage();
            v43 = 0;
            cf = 0;
            v16 = *(_QWORD *)(v15 + 24);
            if (!v16)
              goto LABEL_17;
            v17 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v17)
            {
              v18 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(v17 + 48);
              if (v18)
              {
                if (!v18(v16, *MEMORY[0x1E0D498F0], v14, &cf))
                {
                  v19 = cf;
                  if (cf != (CFTypeRef)*MEMORY[0x1E0C9AE50])
                    goto LABEL_15;
                  if (in_audio_mx_server_process())
                    FigRoutingSessionManagerCopyLongFormVideoManager();
                  else
                    FigRoutingSessionManagerRemoteCopyLongFormVideoManager();
                }
              }
            }
            v19 = cf;
LABEL_15:
            if (v19)
              CFRelease(v19);
LABEL_17:
            v34 = UpTimeNanoseconds;
            v20 = v43;
            v21 = *(_QWORD *)(v10 + 24);
            if (v21)
            {
              v22 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
              if (!v22)
                goto LABEL_32;
              v23 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(v22 + 48);
              if (!v23 || v23(v21, *MEMORY[0x1E0D49878], v14, &number))
                goto LABEL_32;
              v32 = a5;
              if (number)
              {
                CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
                LODWORD(v21) = valuePtr;
              }
              else
              {
                LODWORD(v21) = 0;
              }
            }
            else
            {
              v32 = a5;
            }
            v24 = FigGetUpTimeNanoseconds();
            v25 = v24;
            if (v20 && v41 == (CFTypeRef)*MEMORY[0x1E0C9AE50] && (_DWORD)v21 != 32 && (_DWORD)v21 != 16)
            {
              if (dword_1EE2A2D98)
              {
                v28 = v24;
                v38 = 0;
                type = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                v25 = v28;
              }
              *(_BYTE *)(v10 + 184) = 1;
              if (a1)
                CFRetain(a1);
              aBlock[0] = MEMORY[0x1E0C809B0];
              aBlock[1] = 3221225472;
              aBlock[2] = ___ZL78playercentral_performStartupTaskConfirmingRouteChoiceWithRoutingSessionManagerPKviPK14__CFDictionaryPvPFvS4_ihE_block_invoke;
              aBlock[3] = &__block_descriptor_84_e8_v12__0i8l;
              aBlock[4] = a1;
              aBlock[5] = v33;
              aBlock[6] = v34;
              aBlock[7] = v25;
              aBlock[8] = v32;
              aBlock[9] = a4;
              v36 = a2;
              v30 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
              v31 = *(void (**)(const void *, void (*)(void (**)(void)), void (**)(void *, uint64_t)))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
              if (v31)
              {
                v31(v20, playercentral_invokeAndReleaseCallbackBlock, v30);
              }
              else if (v30)
              {
                v30[2](v30, 4294954514);
                _Block_release(v30);
              }
LABEL_33:
              CFRelease(v20);
              goto LABEL_45;
            }
            if (dword_1EE2A2D98)
            {
              v38 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            FigGetUpTimeNanoseconds();
            a5 = v32;
            if (dword_1EE2A2D98)
            {
              v38 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
LABEL_32:
            a5(a4, a2, 1u);
            if (!v20)
              goto LABEL_45;
            goto LABEL_33;
          }
        }
      }
    }
  }
  a5(a4, a2, 1u);
LABEL_45:
  if (v41)
    CFRelease(v41);
  if (number)
    CFRelease(number);
}

uint64_t playercentral_reflectSubPlayerNotification(uint64_t a1, OpaqueFigPlayer *a2, const void *a3)
{
  uint64_t result;
  uint64_t v6;
  void (*v7)(OpaqueFigPlayer *, CFTypeRef *);
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD, CFTypeRef *);
  int v12;
  CFTypeRef v13;
  BOOL v14;
  int v15;
  uint64_t FigBaseObject;
  void (*v17)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, _QWORD);
  CFBooleanRef BOOLean;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v6 = result;
    if (!*(_BYTE *)(result + 8))
    {
      if (CFEqual(a3, CFSTR("RateDidChange")))
      {
        LODWORD(cf[0]) = 0;
        if (!FigCFDictionaryGetFloat32IfPresent())
        {
          v7 = *(void (**)(OpaqueFigPlayer *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
          if (v7)
            v7(a2, cf);
        }
        if (*(float *)cf == 0.0)
          *(_BYTE *)(v6 + 184) = 0;
LABEL_9:
        playercentral_updateCMSessionIsPlayingState(a2);
        playercentral_updateVideoPlaybackAssertion(a2);
        goto LABEL_10;
      }
      if (!CFEqual(a3, CFSTR("IsNeroPlaybackActiveDidChange")))
      {
        if (!CFEqual(a3, CFSTR("CurrentItemDidChange")))
          goto LABEL_10;
        playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)a2, 0);
        goto LABEL_9;
      }
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = DerivedStorage;
      if (!*(_BYTE *)(DerivedStorage + 112))
      {
        v15 = 0;
LABEL_32:
        if (dword_1EE2A2D98)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v19 = *(_QWORD *)(v9 + 24);
        if (!v19)
          goto LABEL_37;
        if (*(unsigned __int8 *)(v9 + 113) != v15)
        {
          if (v15)
            v21 = (_QWORD *)MEMORY[0x1E0C9AE50];
          else
            v21 = (_QWORD *)MEMORY[0x1E0C9AE40];
          v22 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v22)
          {
            v23 = *(void (**)(uint64_t, _QWORD, _QWORD))(v22 + 56);
            if (v23)
              v23(v19, *MEMORY[0x1E0D499A8], *v21);
          }
          *(_BYTE *)(v9 + 113) = v15;
          goto LABEL_10;
        }
        if (dword_1EE2A2D98)
        {
LABEL_37:
          v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_10:
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterPostNotification();
      }
      cf[0] = 0;
      BOOLean = 0;
      v10 = *(_QWORD *)(DerivedStorage + 16);
      v11 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v11)
        goto LABEL_28;
      v12 = v11(v10, 0, cf);
      v13 = cf[0];
      if (v12)
        v14 = 1;
      else
        v14 = cf[0] == 0;
      if (v14)
      {
        v15 = 0;
        goto LABEL_30;
      }
      FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v9 + 16));
      v17 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
      if (v17 && (v17(FigBaseObject, CFSTR("IsNeroPlaybackActive"), 0, &BOOLean), BOOLean))
      {
        v15 = CFBooleanGetValue(BOOLean) != 0;
        if (BOOLean)
          CFRelease(BOOLean);
      }
      else
      {
LABEL_28:
        v15 = 0;
      }
      v13 = cf[0];
LABEL_30:
      if (v13)
        CFRelease(v13);
      goto LABEL_32;
    }
  }
  return result;
}

uint64_t FigPlayerSetProperty(OpaqueFigPlayer *a1, const __CFString *a2, const void *a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, const __CFString *, const void *);

  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(FigBaseObject, a2, a3);
  return result;
}

uint64_t playercentral_Invalidate(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t FigBaseObject;
  _QWORD *v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, _QWORD);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, _QWORD);
  const void *v28;
  const void *v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = DerivedStorage;
    *(_BYTE *)(DerivedStorage + 8) = 1;
    if (*(_QWORD *)(DerivedStorage + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v3 + 16));
      v5 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v5 >= 2uLL)
      {
        v6 = (void (*)(uint64_t))v5[8];
        if (v6)
          v6(FigBaseObject);
      }
    }
    if (*(_QWORD *)(v3 + 24))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      if (*(_BYTE *)(v3 + 72))
      {
        v7 = *(_QWORD *)(v3 + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v8)
          {
            v9 = *(void (**)(uint64_t, _QWORD, _QWORD))(v8 + 56);
            if (v9)
              v9(v7, *MEMORY[0x1E0D49CF0], 0);
          }
          v10 = *(_QWORD *)(v3 + 24);
          if (v10)
          {
            v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v11)
            {
              v12 = *(void (**)(uint64_t, _QWORD, _QWORD))(v11 + 56);
              if (v12)
                v12(v10, *MEMORY[0x1E0D49CF8], *MEMORY[0x1E0C9AE40]);
            }
          }
        }
        *(_BYTE *)(v3 + 72) = 0;
      }
    }
    v13 = *(const void **)(v3 + 48);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v3 + 48) = 0;
    }
    if (*(_QWORD *)(v3 + 64))
      FigCFWeakReferenceTableCopyValues();
    v14 = *(_QWORD *)(v3 + 16);
    if (v14)
    {
      v15 = *(_QWORD *)(v3 + 176);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
        if (v16)
          v16(v14, v15);
        v17 = *(const void **)(v3 + 176);
        if (v17)
        {
          CFRelease(v17);
          *(_QWORD *)(v3 + 176) = 0;
        }
      }
      v18 = FigPlayerGetFigBaseObject(*(_QWORD *)(v3 + 16));
      if (v18)
      {
        v19 = v18;
        v20 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v20)
          v20(v19);
      }
    }
    v21 = *(_QWORD *)(v3 + 24);
    if (v21)
    {
      if (*(_BYTE *)(v3 + 113))
      {
        if (!dword_1EE2A2D98
          || (os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
              fig_log_call_emit_and_clean_up_after_send_and_compose(),
              (v21 = *(_QWORD *)(v3 + 24)) != 0))
        {
          v23 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v23)
          {
            v24 = *(void (**)(uint64_t, _QWORD, _QWORD))(v23 + 56);
            if (v24)
              v24(v21, *MEMORY[0x1E0D499A8], *MEMORY[0x1E0C9AE40]);
          }
        }
      }
      if (*(_DWORD *)(v3 + 168) == 2 || *(_DWORD *)(v3 + 172) == 2)
      {
        v25 = *(_QWORD *)(v3 + 24);
        if (v25)
        {
          v26 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v26)
          {
            v27 = *(void (**)(uint64_t, _QWORD, _QWORD))(v26 + 56);
            if (v27)
              v27(v25, *MEMORY[0x1E0D49990], *MEMORY[0x1E0D492B0]);
          }
        }
      }
      if (*(_BYTE *)(v3 + 97) == 1)
        playercentral_updateAndSetAudioSessionPlayingState(a1, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v28 = *(const void **)(v3 + 24);
      if (v28)
      {
        CFRelease(v28);
        *(_QWORD *)(v3 + 24) = 0;
      }
    }
    v29 = *(const void **)(v3 + 80);
    if (v29)
    {
      CFRelease(v29);
      *(_QWORD *)(v3 + 80) = 0;
    }
    if (*(_QWORD *)(v3 + 88))
    {
      FigSimpleMutexDestroy();
      *(_QWORD *)(v3 + 88) = 0;
    }
  }
  return 0;
}

void playercentral_Finalize(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  playercentral_Invalidate(a1);
  v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 160);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 64);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 104);
  if (v7)
  {
    dispatch_release(v7);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v8 = *(NSObject **)(DerivedStorage + 128);
  if (v8)
  {
    dispatch_release(v8);
    *(_QWORD *)(DerivedStorage + 128) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 144);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
}

uint64_t playercentral_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v9;
  CFTypeRef *v10;
  int v11;
  CFTypeRef v12;
  OpaqueFigPlayer *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || !a4)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  if (CFEqual(a2, CFSTR("IsValid")))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_15:
    v12 = CFRetain(*v10);
    result = 0;
    *a4 = v12;
    return result;
  }
  if (CFEqual(a2, CFSTR("AllowsNeroPlayback")))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(v9 + 98);
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("UsesNeroWhileNeroPlayIsActive")))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(v9 + 99);
    goto LABEL_13;
  }
  if (CFEqual(a2, CFSTR("PreventAutomaticBackgroundingDuringVideoPlayback")))
  {
    v10 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    v11 = *(unsigned __int8 *)(v9 + 136);
LABEL_13:
    if (!v11)
      v10 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_15;
  }
  v13 = *(OpaqueFigPlayer **)(v9 + 16);
  if (v13)
    return FigPlayerCopyProperty(v13, a2, a3, a4);
  else
    return 4294954513;
}

uint64_t playercentral_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v13;
  char v15;
  CFTypeRef v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  cf = 0;
  v15 = 0;
  v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playercentral_handleSetProperty, &v15, &cf, &v16);
  if ((_DWORD)v7)
    goto LABEL_6;
  if (v15)
  {
    v13 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(DerivedStorage + 16);
    if (!v8)
    {
      v7 = FigSignalErrorAt();
      goto LABEL_6;
    }
    v10 = v16;
    v9 = cf;
    FigBaseObject = FigPlayerGetFigBaseObject(v8);
    v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v12)
    {
      v7 = v12(FigBaseObject, v9, v10);
LABEL_6:
      v13 = v7;
      goto LABEL_8;
    }
    v13 = 4294954514;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v13;
}

void playercentral_preferredVolumeChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  const void *Value;
  id v7;

  CMBaseObjectGetDerivedStorage();
  Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D48608]);
  v7 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithObjectsAndKeys:", Value, CFSTR("AVController_Volume"), CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D48600]), *MEMORY[0x1E0D48600], 0);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();

}

void playercentral_activeNeroVisualStreamInfoChangedNotificationCallback(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *v5;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 8))
    {
      v5 = *(NSObject **)(DerivedStorage + 104);
      if (v5)
      {
        if (a2)
        {
          CFRetain(a2);
          v5 = *(NSObject **)(v4 + 104);
        }
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___ZL67playercentral_activeNeroVisualStreamInfoChangedNotificationCallbackP26opaqueCMNotificationCenterPKvPK10__CFStringS2_S2__block_invoke;
        block[3] = &__block_descriptor_40_e5_v8__0l;
        block[4] = a2;
        dispatch_async(v5, block);
      }
    }
  }
}

uint64_t playercentral_InvalidateItem(const void *a1, const void *a2, void *a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  result = FigPlaybackItemGetFigBaseObject(a2);
  if (result)
  {
    v4 = result;
    result = CMBaseObjectGetVTable();
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v5)
      return v5(v4);
  }
  return result;
}

uint64_t playercentral_updateAndSetAudioSessionPlayingState(OpaqueFigPlayer *a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, _QWORD);

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 97) = a2;
  v4 = *(_QWORD *)(result + 24);
  if (v4)
  {
    if (a2)
      v5 = (_QWORD *)MEMORY[0x1E0C9AE50];
    else
      v5 = (_QWORD *)MEMORY[0x1E0C9AE40];
    result = CMBaseObjectGetVTable();
    v6 = *(_QWORD *)(result + 16);
    if (v6)
    {
      v7 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v6 + 56);
      if (v7)
        return v7(v4, *MEMORY[0x1E0D49908], *v5);
    }
  }
  return result;
}

void playercentral_mutePriorityChangedNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFMutableDictionaryRef Mutable;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24) == a4)
  {
    FigCFDictionaryGetBooleanIfPresent();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMBaseObjectGetDerivedStorage();
    FigCFDictionarySetValue();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void ___ZL67playercentral_activeNeroVisualStreamInfoChangedNotificationCallbackP26opaqueCMNotificationCenterPKvPK10__CFStringS2_S2__block_invoke(uint64_t a1)
{
  const void *v2;

  playercentral_updateNeroStatusBasedOnRouteAndSetting(*(OpaqueFigPlayer **)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void playercentral_updateNeroStatusBasedOnRouteAndSetting(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t v6;
  void (*v7)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *);
  const void *Value;
  const void *v9;
  uint64_t v10;
  uint64_t FigBaseObject;
  void (*v12)(uint64_t, const __CFString *, const void *);
  const void *v13;
  int v14;
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v17;
  OpaqueFigPlayer *v18;
  const void *v19;
  CFDictionaryRef theDict;
  unsigned __int8 v21;
  void *v22[17];

  v22[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  theDict = 0;
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = DerivedStorage;
    v4 = *(_QWORD *)(DerivedStorage + 24);
    if (v4)
    {
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v6
        && (v7 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFDictionaryRef *))(v6 + 8)) != 0
        && (v7(v4, CFSTR("FAS_NeroRouteInformation"), v5, &theDict), theDict))
      {
        FigCFDictionaryGetBooleanIfPresent();
        if (!v21)
          goto LABEL_23;
        Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA4780]);
        if (Value)
        {
          v9 = Value;
          v10 = *(_QWORD *)(v3 + 16);
          if (v10)
          {
            FigBaseObject = FigPlayerGetFigBaseObject(v10);
            v12 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
            if (v12)
              v12(FigBaseObject, CFSTR("NeroDisplaySize"), v9);
          }
        }
        v13 = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA47A8]);
      }
      else
      {
        v13 = 0;
      }
      if (v21)
      {
        v14 = *(unsigned __int8 *)(v3 + 112);
        if (!*(_BYTE *)(v3 + 112))
        {
          v15 = CMBaseObjectGetDerivedStorage();
          if (*(_BYTE *)(v15 + 98)
            && *(_BYTE *)(v15 + 99)
            && (!*(_BYTE *)(v3 + 56)
             || gFigPlayerCentralDeviceLockedStateNotifyTokenIsValid == 1 && SBSGetScreenLockStatus()))
          {
            if (dword_1EE2A2D98)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(_BYTE *)(v3 + 112) = 1;
            if (*(_QWORD *)(v3 + 16))
            {
              v22[0] = 0;
              fpc_createSendToNeroSettingsDictionary(v5, v21, v13, (__CFDictionary **)v22);
              v18 = *(OpaqueFigPlayer **)(v3 + 16);
              v19 = v22[0];
              FigPlayerSetProperty(v18, CFSTR("SendToNero"), v22[0]);
              if (v19)
                CFRelease(v19);
            }
            goto LABEL_33;
          }
          v14 = *(unsigned __int8 *)(v3 + 112);
        }
        if (v14 == 1)
        {
          v17 = CMBaseObjectGetDerivedStorage();
          if (!*(_BYTE *)(v17 + 98)
            || !*(_BYTE *)(v17 + 99)
            || *(_BYTE *)(v3 + 56)
            && (gFigPlayerCentralDeviceLockedStateNotifyTokenIsValid != 1 || !SBSGetScreenLockStatus()))
          {
            goto LABEL_32;
          }
        }
        goto LABEL_33;
      }
LABEL_23:
      if (*(_BYTE *)(v3 + 112) == 1)
LABEL_32:
        playercentral_turnOffNeroPlayback(a1);
LABEL_33:
      if (theDict)
        CFRelease(theDict);
    }
  }
}

void fpc_createSendToNeroSettingsDictionary(const __CFAllocator *a1, int a2, const void *a3, __CFDictionary **a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  const void *v9;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v8 = Mutable;
    if (a2)
      v9 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v9 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("Visuals"), v9);
    if (a3)
      CFDictionarySetValue(v8, CFSTR("NeroTransport"), a3);
    *a4 = v8;
  }
  else
  {
    FigSignalErrorAt();
  }
}

void playercentral_turnOffNeroPlayback(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  __CFDictionary *v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, __CFDictionary *);
  __CFDictionary *v7[17];

  v7[16] = *(__CFDictionary **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A2D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_BYTE *)(DerivedStorage + 112) = 0;
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    v7[0] = 0;
    fpc_createSendToNeroSettingsDictionary((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, 0, v7);
    v3 = *(_QWORD *)(DerivedStorage + 16);
    v4 = v7[0];
    FigBaseObject = FigPlayerGetFigBaseObject(v3);
    v6 = *(void (**)(uint64_t, const __CFString *, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (v6)
      v6(FigBaseObject, CFSTR("SendToNero"), v4);
    if (v4)
      CFRelease(v4);
  }
}

uint64_t FigPlayerCopyProperty(OpaqueFigPlayer *a1, const __CFString *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, const __CFAllocator *, void *);

  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
  if (v8)
    return v8(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t playercentral_handleSetProperty(OpaqueFigPlayer *a1, void *a2, const __CFString *a3, const void *a4, unsigned __int8 *a5, const __CFString **a6, const void **a7)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, _QWORD, const void *);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, _QWORD);
  const void *v25;
  const void *v26;
  CFTypeRef v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, _QWORD);
  uint64_t v30;
  void (*v31)(const void *, _QWORD, _QWORD);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, _QWORD);
  NSObject *v35;
  const __CFString *v36;
  CFTypeRef v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, _QWORD);
  CFTypeID TypeID;
  int Value;
  _QWORD *v42;
  CFTypeID v43;
  int v44;
  char v45;
  CFTypeID v46;
  uint64_t v47;
  int64_t v48;
  dispatch_time_t v49;
  NSObject *v50;
  CFTypeID v51;
  int v52;
  int v53;
  const void *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, _QWORD, _QWORD);
  CFTypeID v59;
  void *v60;
  CFTypeID v61;
  uint64_t v62;
  CFTypeID v63;
  int v64;
  unsigned int v66;
  CFTypeID v67;
  CFTypeID v68;
  int v69;
  _QWORD v70[5];
  _QWORD v71[6];
  char v72;
  _QWORD v73[6];
  char v74;
  _QWORD block[5];
  os_log_type_t type;
  int v77;
  float valuePtr[32];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v15 = DerivedStorage;
  if (CFEqual(a3, CFSTR("FigAudioSession")))
  {
    v16 = *(_QWORD *)(v15 + 24);
    if (v16)
    {
      if (*(_BYTE *)(v15 + 113))
      {
        if (!dword_1EE2A2D98
          || (v77 = 0,
              type = OS_LOG_TYPE_DEFAULT,
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type(),
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT),
              fig_log_call_emit_and_clean_up_after_send_and_compose(),
              (v16 = *(_QWORD *)(v15 + 24)) != 0))
        {
          v28 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v28)
          {
            v29 = *(void (**)(uint64_t, _QWORD, _QWORD))(v28 + 56);
            if (v29)
              v29(v16, *MEMORY[0x1E0D499A8], *MEMORY[0x1E0C9AE40]);
          }
        }
        *(_BYTE *)(v15 + 113) = 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      if (*(_BYTE *)(v15 + 97))
        playercentral_updateAndSetAudioSessionPlayingState(a1, 0);
      v25 = *(const void **)(v15 + 24);
      if (v25)
      {
        v30 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v30)
        {
          v31 = *(void (**)(const void *, _QWORD, _QWORD))(v30 + 56);
          if (v31)
            v31(v25, *MEMORY[0x1E0D49990], *MEMORY[0x1E0D492B8]);
        }
        v25 = *(const void **)(v15 + 24);
      }
    }
    else
    {
      v25 = 0;
    }
    *(_QWORD *)(v15 + 24) = a4;
    if (a4)
      CFRetain(a4);
    if (v25)
      CFRelease(v25);
    if (*(_QWORD *)(v15 + 24))
    {
      if (*(_QWORD *)(v15 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      playercentral_updateSessionMutePriority(a1);
      playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)a1, 0);
      if (FigCFEqual())
      {
        v32 = *(_QWORD *)(v15 + 24);
        if (v32)
        {
          v33 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v33)
          {
            v34 = *(void (**)(uint64_t, _QWORD, _QWORD))(v33 + 56);
            if (v34)
              v34(v32, *MEMORY[0x1E0D497E8], *MEMORY[0x1E0C9AE50]);
          }
        }
      }
      playercentral_updateAndSetAudioSessionPlayingState(a1, *(unsigned __int8 *)(v15 + 97));
      if (a1)
        CFRetain(a1);
      v35 = *(NSObject **)(v15 + 104);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_async(v35, block);
    }
    goto LABEL_52;
  }
  if (CFEqual(a3, CFSTR("Vibrator")))
  {
    v18 = *(_QWORD *)(v15 + 24);
    if (v18)
    {
      v19 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v19)
      {
        v20 = *(void (**)(uint64_t, _QWORD, const void *))(v19 + 56);
        if (v20)
          v20(v18, *MEMORY[0x1E0D49CF0], a4);
      }
      v21 = *(_QWORD *)(v15 + 24);
      v22 = *MEMORY[0x1E0D49CF8];
      if (a4)
      {
        if (v21)
        {
          v23 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v23)
          {
            v24 = *(void (**)(uint64_t, uint64_t, _QWORD))(v23 + 56);
            if (v24)
              v24(v21, v22, *MEMORY[0x1E0C9AE50]);
          }
        }
        result = 0;
        *(_BYTE *)(v15 + 72) = 1;
      }
      else
      {
        if (v21)
        {
          v38 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v38)
          {
            v39 = *(void (**)(uint64_t, uint64_t, _QWORD))(v38 + 56);
            if (v39)
              v39(v21, v22, *MEMORY[0x1E0C9AE40]);
          }
        }
        result = 0;
        *(_BYTE *)(v15 + 72) = 0;
      }
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  if (CFEqual(a3, CFSTR("ClientName")))
  {
    v26 = *(const void **)(v15 + 48);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(v15 + 48) = 0;
    }
    if (a4)
    {
      v27 = CFRetain(a4);
      result = 0;
      *(_QWORD *)(v15 + 48) = v27;
      goto LABEL_86;
    }
LABEL_85:
    result = 0;
    goto LABEL_86;
  }
  if (CFEqual(a3, CFSTR("AllowsNeroPlayback")))
  {
    if (!a4)
      goto LABEL_85;
    TypeID = CFBooleanGetTypeID();
    if (TypeID != CFGetTypeID(a4))
      goto LABEL_85;
    Value = CFBooleanGetValue((CFBooleanRef)a4);
    if (fpc_neroVideoPlaybackDisabled(void)::pred != -1)
      dispatch_once(&fpc_neroVideoPlaybackDisabled(void)::pred, &__block_literal_global_15);
    result = 0;
    if (fpc_neroVideoPlaybackDisabled(void)::disableViaCoreMediaDefaults)
      Value = 0;
    if (Value == *(unsigned __int8 *)(v15 + 98))
      goto LABEL_86;
    result = *(_QWORD *)(v15 + 104);
    if (!result)
      goto LABEL_86;
    if (a1)
    {
      CFRetain(a1);
      result = *(_QWORD *)(v15 + 104);
    }
    v73[0] = MEMORY[0x1E0C809B0];
    v73[1] = 3221225472;
    v73[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_2;
    v73[3] = &__block_descriptor_49_e5_v8__0l;
    v74 = Value;
    v73[4] = v15;
    v73[5] = a1;
    v42 = v73;
    goto LABEL_84;
  }
  if (CFEqual(a3, CFSTR("UsesNeroWhileNeroPlayIsActive")))
  {
    if (!a4 || (v43 = CFBooleanGetTypeID(), v43 != CFGetTypeID(a4)))
    {
      result = FigSignalErrorAt();
      goto LABEL_86;
    }
    v44 = CFBooleanGetValue((CFBooleanRef)a4);
    if (v44 == *(unsigned __int8 *)(v15 + 99))
      goto LABEL_85;
    v45 = v44;
    result = *(_QWORD *)(v15 + 104);
    if (result)
    {
      if (a1)
      {
        CFRetain(a1);
        result = *(_QWORD *)(v15 + 104);
      }
      v71[0] = MEMORY[0x1E0C809B0];
      v71[1] = 3221225472;
      v71[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_3;
      v71[3] = &__block_descriptor_49_e5_v8__0l;
      v72 = v45;
      v71[4] = v15;
      v71[5] = a1;
      v42 = v71;
LABEL_84:
      dispatch_async((dispatch_queue_t)result, v42);
      goto LABEL_85;
    }
LABEL_86:
    *a5 = 1;
    return result;
  }
  if (CFEqual(a3, CFSTR("ClientInBackground")))
  {
    if (a4)
    {
      v46 = CFBooleanGetTypeID();
      if (v46 == CFGetTypeID(a4))
      {
        *(_BYTE *)(v15 + 56) = CFBooleanGetValue((CFBooleanRef)a4);
        if (*(_QWORD *)(v15 + 24))
        {
          v47 = CMBaseObjectGetDerivedStorage();
          if (*(_BYTE *)(v47 + 98))
          {
            if (*(_BYTE *)(v47 + 99) && *(_QWORD *)(v15 + 104))
            {
              if (a1)
                CFRetain(a1);
              if (*(_BYTE *)(v15 + 56))
                v48 = 750000000;
              else
                v48 = 0;
              v49 = dispatch_time(0, v48);
              v50 = *(NSObject **)(v15 + 104);
              v70[0] = MEMORY[0x1E0C809B0];
              v70[1] = 3221225472;
              v70[2] = ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_4;
              v70[3] = &__block_descriptor_40_e5_v8__0l;
              v70[4] = a1;
              dispatch_after(v49, v50, v70);
            }
          }
        }
      }
    }
    goto LABEL_52;
  }
  if (!CFEqual(a3, CFSTR("PlayerRole")))
  {
    if (CFEqual(a3, CFSTR("PIPMutingPolicy")))
    {
      if (a4)
      {
        v59 = CFGetTypeID(a4);
        if (v59 == CFNumberGetTypeID())
        {
          v60 = (void *)(v15 + 168);
          goto LABEL_129;
        }
      }
LABEL_131:
      v62 = FigSignalErrorAt();
      result = 0;
      if (!(_DWORD)v62)
        goto LABEL_86;
      return v62;
    }
    if (CFEqual(a3, CFSTR("DefaultMutingPolicy")))
    {
      if (a4)
      {
        v61 = CFGetTypeID(a4);
        if (v61 == CFNumberGetTypeID())
        {
          v60 = (void *)(v15 + 172);
LABEL_129:
          CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, v60);
          result = playercentral_updateSessionMutePriority(a1);
          if ((_DWORD)result)
            return result;
          goto LABEL_86;
        }
      }
      goto LABEL_131;
    }
    if (CFEqual(a3, CFSTR("PlayerVolume")))
    {
      if (a4)
      {
        v63 = CFGetTypeID(a4);
        if (v63 == CFNumberGetTypeID())
        {
          valuePtr[0] = 0.0;
          v64 = CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, valuePtr);
          if (valuePtr[0] != 0.0 || v64 == 0)
            v66 = 4;
          else
            v66 = 3;
          goto LABEL_150;
        }
      }
    }
    else
    {
      if (!CFEqual(a3, CFSTR("PlayerMuted")))
      {
        if (!CFEqual(a3, CFSTR("PreventAutomaticBackgroundingDuringVideoPlayback")))
          goto LABEL_52;
        if (a4)
        {
          v68 = CFGetTypeID(a4);
          if (v68 == CFBooleanGetTypeID())
          {
            v69 = CFBooleanGetValue((CFBooleanRef)a4);
            if (*(unsigned __int8 *)(v15 + 136) != v69)
            {
              *(_BYTE *)(v15 + 136) = v69;
              playercentral_updateVideoPlaybackAssertion(a1);
            }
            result = 0;
            goto LABEL_86;
          }
        }
        v62 = FigSignalErrorAt();
        result = 0;
        if (!(_DWORD)v62)
          goto LABEL_86;
        return v62;
      }
      if (a4)
      {
        v67 = CFGetTypeID(a4);
        if (v67 == CFBooleanGetTypeID())
        {
          if ((const void *)*MEMORY[0x1E0C9AE50] == a4)
            v66 = 1;
          else
            v66 = 2;
LABEL_150:
          playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)a1, v66);
          goto LABEL_52;
        }
      }
    }
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    goto LABEL_52;
  }
  if (a4)
  {
    v51 = CFGetTypeID(a4);
    if (v51 != CFStringGetTypeID())
    {
      result = FigSignalErrorAt();
      if ((_DWORD)result)
        return result;
      goto LABEL_52;
    }
  }
  v52 = FigCFEqual();
  v53 = FigCFEqual();
  v54 = *(const void **)(v15 + 160);
  *(_QWORD *)(v15 + 160) = a4;
  if (a4)
    CFRetain(a4);
  if (v54)
    CFRelease(v54);
  if (v52 == v53)
    goto LABEL_163;
  v55 = *(_QWORD *)(v15 + 24);
  if (!v55)
    goto LABEL_163;
  if (v52)
    v56 = (_QWORD *)MEMORY[0x1E0C9AE50];
  else
    v56 = (_QWORD *)MEMORY[0x1E0C9AE40];
  v57 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v57)
    return 4294948075;
  v58 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v57 + 56);
  if (!v58)
    return 4294948071;
  result = v58(v55, *MEMORY[0x1E0D497E8], *v56);
  if (!(_DWORD)result)
  {
LABEL_163:
    result = playercentral_updateSessionMutePriority(a1);
    if (!(_DWORD)result)
    {
LABEL_52:
      *a5 = 0;
      if (a3)
        v36 = (const __CFString *)CFRetain(a3);
      else
        v36 = 0;
      *a6 = v36;
      if (a4)
        v37 = CFRetain(a4);
      else
        v37 = 0;
      result = 0;
      *a7 = v37;
    }
  }
  return result;
}

uint64_t playercentral_updateSessionMutePriority(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 24))
    return 0;
  v2 = DerivedStorage;
  v3 = *(_DWORD *)(DerivedStorage + 172);
  if (FigCFEqual())
    v3 = *(_DWORD *)(v2 + 168);
  if (v3)
  {
    if (v3 == 2)
    {
      v4 = (uint64_t *)MEMORY[0x1E0D492A8];
    }
    else
    {
      if (v3 != 1)
      {
        result = FigSignalErrorAt();
        v5 = 0;
        if ((_DWORD)result)
          return result;
        goto LABEL_12;
      }
      v4 = (uint64_t *)MEMORY[0x1E0D492B0];
    }
  }
  else
  {
    v4 = (uint64_t *)MEMORY[0x1E0D492B8];
  }
  v5 = *v4;
LABEL_12:
  v7 = *(_QWORD *)(v2 + 24);
  if (!v7)
    return 4294948075;
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v8)
    return 4294948075;
  v9 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v8 + 56);
  if (v9)
    return v9(v7, *MEMORY[0x1E0D49990], v5);
  else
    return 4294948071;
}

uint64_t playercentral_establishIfPlayerIsSilentAndTellMXSession(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFNumberRef *v7;
  uint64_t v8;
  void (*v9)(_QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t DerivedStorage;
  const char *v14;
  uint64_t FigBaseObject;
  void (*v16)(_QWORD, _QWORD, _QWORD, _QWORD);
  CFNumberRef v17;
  NSObject *v18;
  CFNumberRef *v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD, _QWORD);
  CFNumberRef v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  CFNumberRef *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, _QWORD, _QWORD);
  float type[2];
  os_log_type_t v44;
  os_log_type_t v45[4];
  CFNumberRef number;
  int v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(result + 24))
    return result;
  v5 = 0;
  if (a2 <= 6 && ((1 << a2) & 0x4A) != 0)
  {
    if (dword_1EE2A2D98)
    {
      LODWORD(number) = 0;
      LOBYTE(type[0]) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      v5 = 1;
    }
  }
  v7 = (CFNumberRef *)MEMORY[0x1E0C9AE50];
  if (a2 > 6 || ((1 << a2) & 0x4E) == 0)
  {
    number = 0;
    FigBaseObject = FigPlayerGetFigBaseObject(a1);
    v16 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v16)
      v16(FigBaseObject, CFSTR("PlayerMuted"), *MEMORY[0x1E0C9AE00], &number);
    v17 = number;
    if (number == *v7)
    {
      if (dword_1EE2A2D98)
      {
        type[0] = 0.0;
        v45[0] = OS_LOG_TYPE_DEFAULT;
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        v5 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v17 = number;
      }
      else
      {
        v5 = 1;
      }
    }
    else
    {
      v5 = 0;
    }
    if (v17)
      CFRelease(v17);
  }
  if (a2 != 4 && !v5)
  {
    number = 0;
    type[0] = 0.0;
    v8 = FigPlayerGetFigBaseObject(a1);
    v9 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v9(v8, CFSTR("PlayerVolume"), *MEMORY[0x1E0C9AE00], &number);
    if (number)
    {
      v5 = 0;
      if (CFNumberGetValue(number, kCFNumberFloat32Type, type) && type[0] == 0.0)
      {
        if (dword_1EE2A2D98)
        {
          *(_DWORD *)v45 = 0;
          v44 = OS_LOG_TYPE_DEFAULT;
          v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v11 = *(_DWORD *)v45;
          if (os_log_type_enabled(v10, v44))
            v12 = v11;
          else
            v12 = v11 & 0xFFFFFFFE;
          if (v12)
          {
            DerivedStorage = CMBaseObjectGetDerivedStorage();
            v14 = (const char *)(DerivedStorage + 114);
            v48 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
            v47 = 136315650;
            if (!DerivedStorage)
              v14 = "";
            v49 = 2048;
            v50 = a1;
            v51 = 2082;
            v52 = v14;
            _os_log_send_and_compose_impl();
          }
          v5 = 1;
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        else
        {
          v5 = 1;
        }
      }
      if (number)
        CFRelease(number);
    }
    else
    {
      v5 = 0;
    }
  }
  v19 = (CFNumberRef *)MEMORY[0x1E0C9AE40];
  if (a2 != 5 && !v5)
  {
    number = 0;
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v20)
    {
      v20(a1, 0, &number);
      if (number)
      {
        *(_QWORD *)type = 0;
        v21 = FigPlaybackItemGetFigBaseObject(number);
        v22 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v22)
        {
          v22(v21, CFSTR("HasEnabledAudio"), *MEMORY[0x1E0C9AE00], type);
          v23 = *(CFNumberRef *)type;
        }
        else
        {
          v23 = 0;
        }
        if (v23 == *v19)
        {
          if (dword_1EE2A2D98)
          {
            *(_DWORD *)v45 = 0;
            v44 = OS_LOG_TYPE_DEFAULT;
            v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v30 = *(_DWORD *)v45;
            if (os_log_type_enabled(v29, v44))
              v31 = v30;
            else
              v31 = v30 & 0xFFFFFFFE;
            if (v31)
            {
              v32 = CMBaseObjectGetDerivedStorage();
              v33 = (const char *)(v32 + 114);
              v48 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
              v47 = 136315650;
              if (!v32)
                v33 = "";
              v49 = 2048;
              v50 = a1;
              v51 = 2082;
              v52 = v33;
              _os_log_send_and_compose_impl();
            }
            v5 = 1;
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v23 = *(CFNumberRef *)type;
          }
          else
          {
            v5 = 1;
          }
        }
        else
        {
          v5 = 0;
        }
        if (v23)
          CFRelease(v23);
LABEL_69:
        if (number)
          CFRelease(number);
        goto LABEL_71;
      }
    }
    if (dword_1EE2A2D98)
    {
      type[0] = 0.0;
      v45[0] = OS_LOG_TYPE_DEFAULT;
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v25 = LODWORD(type[0]);
      if (os_log_type_enabled(v24, v45[0]))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if (v26)
      {
        v27 = CMBaseObjectGetDerivedStorage();
        v28 = (const char *)(v27 + 114);
        v48 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
        v47 = 136315650;
        if (!v27)
          v28 = "";
        v49 = 2048;
        v50 = a1;
        v51 = 2082;
        v52 = v28;
        _os_log_send_and_compose_impl();
      }
      v5 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_69;
    }
    v5 = 1;
  }
LABEL_71:
  if (!v5 && dword_1EE2A2D98)
  {
    LODWORD(number) = 0;
    LOBYTE(type[0]) = 0;
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v35 = number;
    if (os_log_type_enabled(v34, LOBYTE(type[0])))
      v36 = v35;
    else
      v36 = v35 & 0xFFFFFFFE;
    if (v36)
    {
      v37 = CMBaseObjectGetDerivedStorage();
      v38 = (const char *)(v37 + 114);
      v48 = "playercentral_establishIfPlayerIsSilentAndTellMXSession";
      v47 = 136315650;
      if (!v37)
        v38 = "";
      v49 = 2048;
      v50 = a1;
      v51 = 2082;
      v52 = v38;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  result = CMBaseObjectGetDerivedStorage();
  v39 = *(_QWORD *)(result + 24);
  if (v39)
  {
    if (v5)
      v40 = v7;
    else
      v40 = v19;
    result = CMBaseObjectGetVTable();
    v41 = *(_QWORD *)(result + 16);
    if (v41)
    {
      v42 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v41 + 56);
      if (v42)
        return v42(v39, *MEMORY[0x1E0D49760], *v40);
    }
  }
  return result;
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke(uint64_t a1)
{
  const void *v2;

  playercentral_updateNeroStatusBasedOnRouteAndSetting(*(OpaqueFigPlayer **)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_2(uint64_t a1)
{
  char v2;
  OpaqueFigPlayer *v3;
  uint64_t v4;
  const void *v5;

  v2 = *(_BYTE *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(OpaqueFigPlayer **)(a1 + 40);
  *(_BYTE *)(v4 + 98) = v2;
  playercentral_updateNeroStatusBasedOnRouteAndSetting(v3);
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_3(uint64_t a1)
{
  char v2;
  OpaqueFigPlayer *v3;
  uint64_t v4;
  const void *v5;

  v2 = *(_BYTE *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(OpaqueFigPlayer **)(a1 + 40);
  *(_BYTE *)(v4 + 99) = v2;
  playercentral_updateNeroStatusBasedOnRouteAndSetting(v3);
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRelease(v5);
}

void ___ZL31playercentral_handleSetPropertyP15OpaqueFigPlayerPvPK10__CFStringPKvPhPS4_PS6__block_invoke_4(uint64_t a1)
{
  const void *v2;

  playercentral_updateNeroStatusBasedOnRouteAndSetting(*(OpaqueFigPlayer **)(a1 + 32));
  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
}

void playercentral_updateVideoPlaybackAssertion(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    v3 = DerivedStorage;
    if (a1)
      CFRetain(a1);
    v4 = *(NSObject **)(v3 + 128);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = ___ZL42playercentral_updateVideoPlaybackAssertionP15OpaqueFigPlayer_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v3;
    v5[5] = a1;
    dispatch_async(v4, v5);
  }
}

uint64_t ___ZL29fpc_neroVideoPlaybackDisabledv_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  fpc_neroVideoPlaybackDisabled(void)::disableViaCoreMediaDefaults = (_DWORD)result != 0;
  return result;
}

void ___ZL42playercentral_updateVideoPlaybackAssertionP15OpaqueFigPlayer_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, float *);
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v16;
  uint64_t FigBaseObject;
  void (*v18)(uint64_t, const __CFString *, uint64_t, _BYTE *);
  _BOOL4 v19;
  const void *v20;
  uint64_t UpTimeNanoseconds;
  uint64_t v22;
  uint64_t v23;
  int v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t DerivedStorage;
  const char *v30;
  uint64_t v31;
  int v32;
  NSObject *v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  float v40;
  _BYTE cf[12];
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  _QWORD v47[2];
  CFTypeRef v48[17];

  v48[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x19403137C]();
  v3 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v3 + 136))
    goto LABEL_3;
  if (*(_BYTE *)(v3 + 8))
    goto LABEL_3;
  v40 = 0.0;
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(void (**)(uint64_t, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v13)
    goto LABEL_3;
  v13(v12, &v40);
  if (v40 == 0.0)
    goto LABEL_3;
  v48[0] = 0;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v15)
    goto LABEL_3;
  v15(v14, 0, v48);
  if (!v48[0])
    goto LABEL_3;
  *(_QWORD *)cf = 0;
  v16 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigPlaybackItemGetFigBaseObject(v48[0]);
  v18 = *(void (**)(uint64_t, const __CFString *, uint64_t, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v18)
  {
    v18(FigBaseObject, CFSTR("HasEnabledVideo"), v16, cf);
    v19 = *(_QWORD *)cf == *MEMORY[0x1E0C9AE50];
    if (*(_QWORD *)cf)
      CFRelease(*(CFTypeRef *)cf);
  }
  else
  {
    v19 = *MEMORY[0x1E0C9AE50] == 0;
  }
  if (v48[0])
    CFRelease(v48[0]);
  if (v19)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144))
    {
      UpTimeNanoseconds = FigGetUpTimeNanoseconds();
      v22 = *(_QWORD *)(a1 + 32);
      if ((unint64_t)(UpTimeNanoseconds - *(_QWORD *)(v22 + 152)) >= 0x3B9ACA01)
      {
        v23 = UpTimeNanoseconds;
        v24 = FigSFBSKeepForegroundAssertionCreate(v16, *(_QWORD *)(v22 + 40), *(_DWORD *)(v22 + 32), (uint64_t *)(v22 + 144));
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144))
        {
          if (dword_1EE2A2D98)
          {
            v40 = 0.0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v26 = v40;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
              v27 = LODWORD(v26);
            else
              v27 = LODWORD(v26) & 0xFFFFFFFE;
            if (v27)
            {
              v28 = *(_QWORD *)(a1 + 40);
              DerivedStorage = CMBaseObjectGetDerivedStorage();
              v30 = (const char *)(DerivedStorage + 114);
              v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
              if (!DerivedStorage)
                v30 = "";
              *(_DWORD *)cf = 136315906;
              *(_QWORD *)&cf[4] = "playercentral_updateVideoPlaybackAssertion_block_invoke";
              v42 = 2048;
              v43 = v28;
              v44 = 2082;
              v45 = v30;
              v46 = 2114;
              v47[0] = v31;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          v32 = v24;
          v40 = 0.0;
          v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v34 = v40;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            v35 = LODWORD(v34);
          else
            v35 = LODWORD(v34) & 0xFFFFFFFE;
          if (v35)
          {
            v36 = *(_QWORD *)(a1 + 40);
            v37 = CMBaseObjectGetDerivedStorage();
            v38 = "";
            v39 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
            if (v37)
              v38 = (const char *)(v37 + 114);
            *(_DWORD *)cf = 136316162;
            *(_QWORD *)&cf[4] = "playercentral_updateVideoPlaybackAssertion_block_invoke";
            v42 = 2048;
            v43 = v36;
            v44 = 2082;
            v45 = v38;
            v46 = 1024;
            LODWORD(v47[0]) = v32;
            WORD2(v47[0]) = 2114;
            *(_QWORD *)((char *)v47 + 6) = v39;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152) = v23;
        }
      }
    }
  }
  else
  {
LABEL_3:
    v4 = *(const void **)(*(_QWORD *)(a1 + 32) + 144);
    if (v4)
    {
      if (!dword_1EE2A2D98)
        goto LABEL_20;
      v40 = 0.0;
      v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v6 = v40;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = LODWORD(v6);
      else
        v7 = LODWORD(v6) & 0xFFFFFFFE;
      if (v7)
      {
        v8 = *(_QWORD *)(a1 + 40);
        v9 = CMBaseObjectGetDerivedStorage();
        v10 = (const char *)(v9 + 114);
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
        if (!v9)
          v10 = "";
        *(_DWORD *)cf = 136315906;
        *(_QWORD *)&cf[4] = "playercentral_updateVideoPlaybackAssertion_block_invoke";
        v42 = 2048;
        v43 = v8;
        v44 = 2082;
        v45 = v10;
        v46 = 2114;
        v47[0] = v11;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v4 = *(const void **)(*(_QWORD *)(a1 + 32) + 144);
      if (v4)
      {
LABEL_20:
        CFRelease(v4);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 144) = 0;
      }
    }
  }
  v20 = *(const void **)(a1 + 40);
  if (v20)
    CFRelease(v20);
  objc_autoreleasePoolPop(v2);
}

uint64_t playercentral_GetRate(OpaqueFigPlayer *a1, float *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, float *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playercentral_SetRateWithFade(OpaqueFigPlayer *a1, float a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  uint64_t SetRateOptions;
  uint64_t v7;
  CFTypeRef v9;
  uint64_t (*v10)(OpaqueFigPlayer *, CFTypeRef, float);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 8) || !*(_QWORD *)(DerivedStorage + 16))
  {
    SetRateOptions = FigSignalErrorAt();
LABEL_3:
    v7 = SetRateOptions;
    goto LABEL_4;
  }
  SetRateOptions = FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)SetRateOptions)
    goto LABEL_3;
  FigCFDictionarySetCMTime();
  v9 = cf;
  v10 = *(uint64_t (**)(OpaqueFigPlayer *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v10)
  {
    SetRateOptions = v10(a1, v9, a2);
    goto LABEL_3;
  }
  v7 = 4294954514;
LABEL_4:
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t playercentral_StartPreroll(OpaqueFigPlayer *a1, float a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, float);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 16);
  if (!v7)
    return FigSignalErrorAt();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v8)
    return v8(v7, a3, a2);
  else
    return 4294954514;
}

uint64_t playercentral_StepByCount(OpaqueFigPlayer *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playercentral_SetRateAndAnchorTime(OpaqueFigPlayer *a1, float a2, CMTime *a3, CMTime *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, __int128 *, __int128 *, uint64_t, float);
  __int128 v14;
  CMTimeEpoch v15;
  __int128 v16;
  CMTimeEpoch epoch;
  __int128 v18;
  CMTimeEpoch v19;
  __int128 v20;
  CMTimeEpoch v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v12 = *(_QWORD *)(DerivedStorage + 16);
  if (!v12)
    return FigSignalErrorAt();
  if (a2 == 0.0)
    *(_BYTE *)(DerivedStorage + 184) = 0;
  v16 = *(_OWORD *)&a3->value;
  epoch = a3->epoch;
  v14 = *(_OWORD *)&a4->value;
  v15 = a4->epoch;
  v13 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 88);
  if (!v13)
    return 4294954514;
  v20 = v16;
  v21 = epoch;
  v18 = v14;
  v19 = v15;
  result = v13(v12, &v20, &v18, a5, a2);
  if (!(_DWORD)result)
  {
    playercentral_updateVideoPlaybackAssertion(a1);
    return 0;
  }
  return result;
}

uint64_t playercentral_CreatePlaybackItemFromAsset(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CFStringRef theString;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theString = 0;
  cf = 0;
  if (!a5 || !*(_QWORD *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  CFGetAllocator(a1);
  FigPlaybackItemGetClassID();
  v8 = CMDerivedObjectCreate();
  FigSignalErrorAt();
  return v8;
}

uint64_t playercentral_SetRateWithOptions(OpaqueFigPlayer *a1, float a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFDictionary *, float);
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(DerivedStorage + 16);
  if (!v7)
    return FigSignalErrorAt();
  if (a2 == 0.0)
    *(_BYTE *)(DerivedStorage + 184) = 0;
  v8 = *(uint64_t (**)(uint64_t, const __CFDictionary *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 104);
  if (!v8)
    return 4294954514;
  result = v8(v7, a3, a2);
  if (!(_DWORD)result)
  {
    playercentral_updateVideoPlaybackAssertion(a1);
    return 0;
  }
  return result;
}

uint64_t playercentral_SetProperties(OpaqueFigPlayer *a1, const __CFDictionary *a2, const __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v16;
  CFTypeRef v17;
  BOOL v18;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v18 = 0;
  v16 = 0;
  v17 = 0;
  if (!a2)
    goto LABEL_21;
  v7 = DerivedStorage;
  v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification((uint64_t)a1, a2, 0, (uint64_t)playercentral_handleSetProperty, &v18, &cf, &v17);
  if ((_DWORD)v8)
  {
LABEL_10:
    v13 = v8;
    goto LABEL_12;
  }
  if (v18)
  {
    v14 = 0;
LABEL_9:
    v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v17, v14, (uint64_t *)a3);
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v7 + 16);
  if (!v9)
  {
LABEL_21:
    v12 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v10 = cf;
  v11 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v11)
  {
    v12 = v11(v9, v10, &v16);
LABEL_7:
    v13 = v12;
    if ((_DWORD)v12)
      goto LABEL_12;
    v14 = v16;
    goto LABEL_9;
  }
  v13 = 4294954514;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v13;
}

uint64_t playercentral_ReevaluateRouteConfiguration(OpaqueFigPlayer *a1, const __CFDictionary *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const __CFDictionary *);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v3)
    return 0;
  v4 = *(uint64_t (**)(uint64_t, const __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t playercentral_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v3)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t playercentral_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v3)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

void itemcentral_reflectSubItemNotification(uint64_t a1, CFTypeRef a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  OpaqueFigPlayer *v10;
  const void *v11;
  void (*v12)(OpaqueFigPlayer *, _QWORD, CFTypeRef *);
  CFTypeRef v13;
  unsigned int v14;
  CFTypeRef cf;
  CFTypeRef v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    if (!*(_BYTE *)(DerivedStorage + 16))
    {
      v9 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v9)
      {
        v10 = (OpaqueFigPlayer *)v9;
        if (CFEqual(a3, CFSTR("ItemWasRemovedFromPlayQueue")))
        {
          if (!a5 || (v11 = (const void *)*MEMORY[0x1E0C9AE50], v11 != CFDictionaryGetValue(a5, CFSTR("AsRequested"))))
            playercentral_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v10, a2);
        }
        else if (CFEqual(a3, CFSTR("HasEnabledVideoChanged")))
        {
          playercentral_updateVideoPlaybackAssertion(v10);
        }
        else if (CFEqual(a3, CFSTR("HasEnabledAudioChanged")))
        {
          v16 = 0;
          v12 = *(void (**)(OpaqueFigPlayer *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
          if (v12)
          {
            v12(v10, 0, &v16);
            v13 = v16;
          }
          else
          {
            v13 = 0;
          }
          if (v13 == a2)
          {
            cf = 0;
            FigPlaybackItemCopyProperty((uint64_t)a2, (uint64_t)CFSTR("HasEnabledAudio"), *MEMORY[0x1E0C9AE00], (uint64_t)&cf);
            if (cf == (CFTypeRef)*MEMORY[0x1E0C9AE50])
              v14 = 5;
            else
              v14 = 6;
            playercentral_establishIfPlayerIsSilentAndTellMXSession((uint64_t)v10, v14);
            if (cf)
              CFRelease(cf);
            v13 = v16;
          }
          if (v13)
            CFRelease(v13);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v10);
      }
    }
  }
}

uint64_t itemcentral_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  _QWORD *v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 16))
  {
    v4 = DerivedStorage;
    v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    v6 = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(v4 + 16) = 1;
    if (*(_QWORD *)(v4 + 8))
    {
      if (v6)
        FigCFWeakReferenceTableRemoveValue();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v4 + 8));
      v8 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v8 >= 2uLL)
      {
        v9 = (void (*)(uint64_t))v8[8];
        if (v9)
          v9(FigBaseObject);
      }
      v10 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v4 + 8));
      if (v10)
      {
        v11 = v10;
        v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v12)
        {
          v3 = v12(v11);
          if (!v5)
            return v3;
        }
        else
        {
          v3 = 4294954514;
          if (!v5)
            return v3;
        }
      }
      else
      {
        v3 = 4294954516;
        if (!v5)
          return v3;
      }
    }
    else
    {
      v3 = 0;
      if (!v5)
        return v3;
    }
    playercentral_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v5, a1);
    CFRelease(v5);
    return v3;
  }
  return 0;
}

void itemcentral_Finalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemcentral_Invalidate(a1);
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

uint64_t itemcentral_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(v8 + 8));
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v10)
    return v10(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcentral_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v14;
  char v16;
  CFTypeRef cf;
  CFTypeRef v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v18 = 0;
  v16 = 0;
  if (*(_BYTE *)(DerivedStorage + 16))
    goto LABEL_17;
  v7 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    goto LABEL_17;
  v8 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemcentral_handleSetProperty, &v16, &v18, &cf);
  if ((_DWORD)v8)
  {
LABEL_8:
    v14 = v8;
    goto LABEL_10;
  }
  if (v16)
  {
    v14 = 0;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
  {
LABEL_17:
    v8 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v11 = cf;
  v10 = v18;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(v9);
  v13 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v13)
  {
    v8 = v13(FigBaseObject, v10, v11);
    goto LABEL_8;
  }
  v14 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v14;
}

uint64_t itemcentral_isParentPlayerValid()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *(_BYTE *)(DerivedStorage + 16))
    return 0;
  v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v2 = CMBaseObjectGetDerivedStorage();
  if (!v2 || *(_BYTE *)(v2 + 8))
  {
    v3 = 0;
    if (!v1)
      return v3;
    goto LABEL_8;
  }
  v3 = 1;
  if (v1)
LABEL_8:
    CFRelease(v1);
  return v3;
}

uint64_t itemcentral_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  CFTypeRef v12;
  CFTypeRef v13;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 16) || !itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  *a5 = 0;
  if (a3)
    v12 = CFRetain(a3);
  else
    v12 = 0;
  *a6 = v12;
  if (a4)
    v13 = CFRetain(a4);
  else
    v13 = 0;
  *a7 = v13;
  return 0;
}

uint64_t itemcentral_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcentral_SetCurrentTime(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(v6 + 8);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v8)
    return 4294954514;
  v12 = v10;
  v13 = v11;
  return v8(v7, &v12, a3);
}

uint64_t itemcentral_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcentral_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
  if (v12)
    return v12(v11, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t itemcentral_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcentral_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcentral_GetNextThumbnailTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __int128 *, uint64_t, uint64_t);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(v8 + 8);
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  v10 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 80);
  if (!v10)
    return 4294954514;
  v14 = v12;
  v15 = v13;
  return v10(v9, &v14, a3, a4);
}

uint64_t itemcentral_SetCurrentTimeWithRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  v8 = *(_OWORD *)a4;
  v9 = *(_QWORD *)(a4 + 16);
  v6 = *(_OWORD *)a5;
  v7 = *(_QWORD *)(a5 + 16);
  return itemcentral_SetCurrentTimeWithRangeAndID(a1, &v10, a3, &v8, &v6, 0);
}

uint64_t itemcentral_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcentral_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcentral_SeekToDateWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 16) || !itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v8)
    return v8(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t itemcentral_SetCurrentTimeWithRangeAndID(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t);
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v12 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v13 = *(_QWORD *)(v12 + 8);
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  v18 = *a4;
  v19 = *((_QWORD *)a4 + 2);
  v16 = *a5;
  v17 = *((_QWORD *)a5 + 2);
  v14 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 144);
  if (!v14)
    return 4294954514;
  v26 = v20;
  v27 = v21;
  v24 = v18;
  v25 = v19;
  v22 = v16;
  v23 = v17;
  return v14(v13, &v26, a3, &v24, &v22, a6);
}

uint64_t itemcentral_CopyAsset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t itemcentral_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v16;
  CFTypeRef v17;
  BOOL v18;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v18 = 0;
  v16 = 0;
  v17 = 0;
  if (!a2)
    goto LABEL_24;
  v7 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 16) || !itemcentral_isParentPlayerValid())
    goto LABEL_24;
  v8 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemcentral_handleSetProperty, &v18, &cf, &v17);
  if ((_DWORD)v8)
  {
LABEL_12:
    v13 = v8;
    goto LABEL_14;
  }
  if (v18)
  {
    v14 = 0;
LABEL_11:
    v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v17, v14, a3);
    goto LABEL_12;
  }
  v9 = *(_QWORD *)(v7 + 8);
  if (!v9)
  {
LABEL_24:
    v12 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v10 = cf;
  v11 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (v11)
  {
    v12 = v11(v9, v10, &v16);
LABEL_9:
    v13 = v12;
    if ((_DWORD)v12)
      goto LABEL_14;
    v14 = v16;
    goto LABEL_11;
  }
  v13 = 4294954514;
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v16)
    CFRelease(v16);
  return v13;
}

uint64_t itemcentral_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v10)
    return v10(v9, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemcentral_SetCurrentTimeWithOptions(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 16))
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!itemcentral_isParentPlayerValid())
    return FigSignalErrorAt();
  v7 = *(_QWORD *)(v6 + 8);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v8)
    return 4294954514;
  v12 = v10;
  v13 = v11;
  return v8(v7, &v12, a3);
}

uint64_t playercentral_BeginInterruption(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(DerivedStorage + 16);
  if (!v3)
    return FigSignalErrorAt();
  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v4 && (v5 = *(uint64_t (**)(uint64_t))(v4 + 8)) != 0)
    return v5(v3);
  else
    return 4294954514;
}

uint64_t playercentral_EndInterruption(OpaqueFigPlayer *a1, const __CFString *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (!v5)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
  if (v6 && (v7 = *(uint64_t (**)(uint64_t, const __CFString *))(v6 + 16)) != 0)
    return v7(v5, a2);
  else
    return 4294954514;
}

uint64_t playercentral_SetConnectionActive(OpaqueFigPlayer *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if ((_DWORD)a2)
  {
    v6 = *(_QWORD *)(DerivedStorage + 16);
    if (!v6)
    {
LABEL_8:
      result = 0;
      *(_BYTE *)(v5 + 96) = 1;
      return result;
    }
    v7 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
    if (v7)
    {
      v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 24);
      if (v8)
      {
        result = v8(v6, a2);
        if ((_DWORD)result)
          return result;
        goto LABEL_8;
      }
    }
    return 4294954514;
  }
  *(_BYTE *)(DerivedStorage + 96) = 0;
  v9 = *(_QWORD *)(DerivedStorage + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
    if (v10)
    {
      v11 = *(uint64_t (**)(uint64_t, _QWORD))(v10 + 24);
      if (v11)
        return v11(v9, 0);
    }
    return 4294954514;
  }
  return 0;
}

uint64_t playercentral_DuckVolume(OpaqueFigPlayer *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, float, float);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v8 && (v9 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v8 + 8)) != 0)
    return v9(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t playercentral_SilentMute(OpaqueFigPlayer *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v4 && (v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16)) != 0)
    return v5(v3, a2);
  else
    return 4294954514;
}

void playercentral_updateCMSessionIsPlayingState(OpaqueFigPlayer *a1)
{
  uint64_t DerivedStorage;
  unsigned int (*v3)(OpaqueFigPlayer *, float *);
  uint64_t v4;
  unsigned int (*v5)(uint64_t, _QWORD, CFTypeRef *);
  int v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  float v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0.0;
  cf = 0;
  v3 = *(unsigned int (**)(OpaqueFigPlayer *, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v3 || v3(a1, &v9))
    goto LABEL_12;
  if (v9 == 0.0)
    goto LABEL_9;
  v4 = *(_QWORD *)(DerivedStorage + 16);
  v5 = *(unsigned int (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v5 || v5(v4, 0, &cf))
    goto LABEL_12;
  if (v9 == 0.0 || !cf)
LABEL_9:
    v6 = 0;
  else
    v6 = 1;
  playercentral_updateAndSetAudioSessionPlayingState(a1, v6);
  if (dword_1EE2A2D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_12:
  if (cf)
    CFRelease(cf);
}

void playercentral_invokeAndReleaseCallbackBlock(void (**a1)(void))
{
  if (a1)
  {
    a1[2]();
    _Block_release(a1);
  }
}

void ___ZL78playercentral_performStartupTaskConfirmingRouteChoiceWithRoutingSessionManagerPKviPK14__CFDictionaryPvPFvS4_ihE_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v3;
  const void *v4;

  if (dword_1EE2A2D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigGetUpTimeNanoseconds();
  if (dword_1EE2A2D98)
  {
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(a1 + 64))(*(_QWORD *)(a1 + 72), *(unsigned int *)(a1 + 80), 1);
  v4 = *(const void **)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

uint64_t FigTTMLCaptionGroupConverterFromSampleBufferCreate(_QWORD *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t DerivedStorage;
  CFTypeRef v9;
  CFTypeRef cf;

  v9 = 0;
  cf = 0;
  if (!a1 || !a3 || !*a1)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  FigCaptionGroupConverterFromSampleBufferGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
  {
LABEL_9:
    v6 = v5;
    goto LABEL_10;
  }
  v6 = TTMLParserCreate((uint64_t)cf, (uint64_t)fcgcfs_ttml_DeliverFigCaptionSampleBuffer, 0, &v9);
  if (!(_DWORD)v6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)DerivedStorage = *(_OWORD *)a1;
    *(_QWORD *)(DerivedStorage + 16) = v9;
    *a3 = cf;
    return v6;
  }
  if (v9)
    CFRelease(v9);
LABEL_10:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t fcgcfs_ttml_DeliverFigCaptionSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t CaptionGroup;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, CMTimeRange *, uint64_t);
  CMTimeRange v10;
  CMTime duration;
  CMTimeRange v12;
  CMTime lhs;
  CMTime v14;
  CMTime rhs;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  CaptionGroup = FigSampleBufferGetCaptionGroup();
  if (!CaptionGroup)
    return FigSignalErrorAt();
  v6 = CaptionGroup;
  memset(&v18, 0, sizeof(v18));
  CMSampleBufferGetPresentationTimeStamp(&v18, *(CMSampleBufferRef *)(v4 + 24));
  memset(&v17, 0, sizeof(v17));
  CMSampleBufferGetOutputPresentationTimeStamp(&v17, *(CMSampleBufferRef *)(v4 + 24));
  memset(&v16, 0, sizeof(v16));
  v10.start = v18;
  rhs = v17;
  CMTimeSubtract(&v16, &v10.start, &rhs);
  memset(&v14, 0, sizeof(v14));
  CMSampleBufferGetPresentationTimeStamp(&lhs, a2);
  v10.start = v16;
  CMTimeSubtract(&v14, &lhs, &v10.start);
  memset(&v12, 0, sizeof(v12));
  CMSampleBufferGetOutputDuration(&duration, a2);
  v10.start = v14;
  CMTimeRangeMake(&v12, &v10.start, &duration);
  v8 = *(uint64_t (**)(uint64_t, CMTimeRange *, uint64_t))v4;
  v7 = *(_QWORD *)(v4 + 8);
  v10 = v12;
  return v8(v6, &v10, v7);
}

void fcgcfs_ttml_Finalize()
{
  const void *v0;

  v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 16);
  if (v0)
    CFRelease(v0);
}

__CFString *fcgcfs_ttml_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigTTMLCaptionGroupConverterFromSampleBufferf %p>"), a1);
  return Mutable;
}

uint64_t fcgcfs_ttml_AddSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (CMFormatDescriptionGetMediaType(FormatDescription) != 1952807028
    && CMFormatDescriptionGetMediaType(FormatDescription) != 1935832172)
  {
    return FigSignalErrorAt();
  }
  if (CMFormatDescriptionGetMediaSubType(FormatDescription) != 1937010800)
    return FigSignalErrorAt();
  if (!CMSampleBufferGetNumSamples(a2))
    return 0;
  *(_QWORD *)(v4 + 24) = a2;
  if (!CMSampleBufferGetDataBuffer(a2))
    return 0;
  v6 = CMByteStreamCreateForBlockBuffer();
  if ((_DWORD)v6)
    return v6;
  else
    return TTMLParserParseStream(*(_QWORD *)(v4 + 16), 0);
}

uint64_t fcgcfs_ttml_Finish()
{
  return 0;
}

uint64_t FigXPCVideoTargetServerCopyVideoTargetForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigVideoTargetStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigVideoTargetStartServer_block_invoke;
  block[3] = &unk_1E2F8BE20;
  block[4] = &v3;
  if (FigVideoTargetStartServer_sFigVideoTargetServerSetupOnce != -1)
    dispatch_once(&FigVideoTargetStartServer_sFigVideoTargetServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t HandleVideoTargetMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v4)
    return v4;
  else
    return 4294951138;
}

uint64_t HandleVideoTargetNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  const void *v4;
  CFTypeID v5;
  uint64_t v6;
  _QWORD v8[5];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v13 = 0;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode
    || (xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]),
        OpCode = FigXPCServerLookupAndRetainAssociatedObject(),
        (_DWORD)OpCode))
  {
LABEL_7:
    v6 = OpCode;
    goto LABEL_9;
  }
  if (v13 == 1685024621)
  {
    v4 = (const void *)v10[3];
    if (v4 && (v5 = CFGetTypeID(v4), v5 == FigVideoTargetGetTypeID()))
      OpCode = FigXPCServerDisassociateObjectWithConnection();
    else
      OpCode = FigSignalErrorAt();
    goto LABEL_7;
  }
  v6 = 4294951138;
LABEL_9:
  if (v10[3])
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 0x40000000;
    v8[2] = __HandleVideoTargetNoReplyMessage_block_invoke;
    v8[3] = &unk_1E2F8BE48;
    v8[4] = &v9;
    dispatch_async((dispatch_queue_t)gCommonVideoTargetServerAsyncQueue, v8);
  }
  _Block_object_dispose(&v9, 8);
  return v6;
}

void DisposeServedVideoTargetState(void **a1)
{
  void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      os_release(v2);
    free(a1);
  }
}

const __CFData *FigFairplayPSSHAtomParserParseAndCreateRecordInProcess(uint64_t a1, const __CFData *a2, _QWORD *a3)
{
  const __CFData *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t CurrentAtomTypeAndDataLength;
  _OWORD v9[14];
  char v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v3 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  if (!a2)
  {
    FigSignalErrorAt();
    goto LABEL_12;
  }
  if (!a3)
  {
    FigSignalErrorAt();
    v3 = 0;
    goto LABEL_12;
  }
  v5 = malloc_type_calloc(1uLL, 0x18uLL, 0x10A0040FC6C5850uLL);
  v6 = v5;
  if (!v5)
  {
    FigSignalErrorAt();
    v3 = 0;
    goto LABEL_13;
  }
  v5[1] = 0;
  v5[2] = v5 + 1;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v22 = 0;
  if (CFDataGetLength(v3) > 0
    && CFDataGetBytePtr(v3)
    && ((CurrentAtomTypeAndDataLength = FigAtomStreamInitWithMemoryBlock(), (_DWORD)CurrentAtomTypeAndDataLength)
     || (CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength(),
         (_DWORD)CurrentAtomTypeAndDataLength))
    || (FigSignalErrorAt(),
        CurrentAtomTypeAndDataLength = FigAtomStreamInitWithParent(),
        (_DWORD)CurrentAtomTypeAndDataLength))
  {
    v3 = (const __CFData *)CurrentAtomTypeAndDataLength;
    goto LABEL_13;
  }
  v3 = (const __CFData *)ffpap_parseChildAtoms((uint64_t)v9, 2, (uint64_t)&FigFairplayPSSHAtomParserParseAndCreateRecordInProcess_atomDispatch, (uint64_t)v6);
  if (!(_DWORD)v3)
  {
    *a3 = v6;
LABEL_12:
    v6 = 0;
  }
LABEL_13:
  FigFairplayPSSHAtomParserDestroyRecord(v6);
  return v3;
}

uint64_t ffpap_parseFpsKeySystemInfoAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t ffpap_parseFpsKeySystemRequestAtom()
{
  uint64_t result;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  v9 = 0;
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  v2 = 0u;
  v3 = 0u;
  v1 = 0u;
  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t ffpap_parseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t (**v9)(uint64_t, uint64_t);
  uint64_t result;
  int v11;
  uint64_t (**v12)(uint64_t, uint64_t);
  int v13;
  int v14;
  char *v15;
  unsigned int v16;
  char v17;

  v8 = 0;
  v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (a2 >= 1)
    {
      v11 = 0;
      v12 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v12 += 2;
        if (a2 == v11)
          goto LABEL_12;
      }
      v13 = 1 << v11;
      if ((*((_BYTE *)v12 - 4) & 1) != 0 && (v13 & v8) != 0)
        return 4294949314;
      result = (*v12)(a1, a4);
      if ((_DWORD)result)
        return result;
      v8 |= v13;
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -12890)
        result = 0;
      else
        result = result;
      if (a2 >= 1)
      {
        v14 = 0;
        v15 = (char *)(a3 + 4);
        do
        {
          if (((v8 >> v14) & 1) != 0)
            v16 = result;
          else
            v16 = -17982;
          v17 = *v15;
          v15 += 16;
          if ((v17 & 2) != 0)
            result = v16;
          else
            result = result;
          ++v14;
        }
        while (a2 != v14);
      }
      return result;
    }
  }
}

uint64_t FigFairplayPSSHAtomParserDestroyRecord(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  const void *v5;
  const void *v6;

  if (a1)
  {
    while (1)
    {
      v2 = (_QWORD *)a1[1];
      if (!v2)
        break;
      v3 = v2[4];
      v4 = (_QWORD *)v2[5];
      if (v3)
      {
        *(_QWORD *)(v3 + 40) = v4;
        v4 = (_QWORD *)v2[5];
      }
      else
      {
        a1[2] = v4;
      }
      *v4 = v3;
      v5 = (const void *)v2[2];
      if (v5)
      {
        CFRelease(v5);
        v2[2] = 0;
      }
      v6 = (const void *)v2[3];
      if (v6)
        CFRelease(v6);
      free(v2);
    }
    free(a1);
  }
  return 0;
}

const __CFData *FigFairplayPSSHAtomParserParseAndCreateRecord(uint64_t a1, const __CFData *a2, _QWORD *a3)
{
  uint64_t v6;

  v6 = _os_feature_enabled_impl();
  if ((_DWORD)v6)
    return (const __CFData *)FigFairplayPSSHAtomParserParseAndCreateRecordRemote(a1, (uint64_t)a2, a3);
  else
    return FigFairplayPSSHAtomParserParseAndCreateRecordInProcess(v6, a2, a3);
}

uint64_t ffpap_parseFpsKeySystemRequestInfoAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t ffpap_parseFpsKeySystemAssetIdAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t ffpap_parseFpsKeySystemVersionListAtom()
{
  uint64_t CurrentAtomTypeAndDataLength;
  uint64_t v2;

  CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)CurrentAtomTypeAndDataLength)
    CurrentAtomTypeAndDataLength = FigSignalErrorAt();
  v2 = CurrentAtomTypeAndDataLength;
  free(0);
  return v2;
}

uint64_t FigPlayerRemoteCreateWithOptions(const __CFAllocator *a1, int a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t started;
  uint64_t v9;
  CFAllocatorRef *v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  CFMutableArrayRef Mutable;
  uint64_t v18;
  uint64_t v19;
  CFMutableDictionaryRef v20;
  xpc_object_t v21;
  char v22;
  uint64_t v23;
  __CFDictionary *MutableCopy;
  __CFBundle *MainBundle;
  uint64_t v26;
  uint64_t uint64;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *value;
  xpc_object_t xdict;
  char __str[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    started = FigSignalErrorAt();
    goto LABEL_35;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  started = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (remoteXPCPlayerClient_EnsureClientEstablished_err)
    goto LABEL_35;
  value = 0;
  xdict = 0;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)__str = 0u;
  FigPlayerGetClassID();
  v9 = CMDerivedObjectCreate();
  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((_DWORD)v9)
    goto LABEL_37;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 9) = 0;
  *(_QWORD *)(DerivedStorage + 16) = CFSetCreateMutable(a1, 0, 0);
  *(_QWORD *)(DerivedStorage + 24) = CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
  *(_BYTE *)(DerivedStorage + 192) = 0;
  if (a3 && CFDictionaryGetValueIfPresent(a3, CFSTR("LoggingIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 192), 10, 0x600u);
  v12 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 32) = v12;
  if (!v12)
    goto LABEL_36;
  *(_BYTE *)(DerivedStorage + 155) = 0;
  *(_WORD *)(DerivedStorage + 152) = 1;
  v13 = FigReadWriteLockCreate();
  *(_QWORD *)(DerivedStorage + 80) = v13;
  if (!v13)
    goto LABEL_36;
  v14 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 88) = v14;
  if (!v14)
    goto LABEL_36;
  v15 = xdict ? (const char *)(CMBaseObjectGetDerivedStorage() + 192) : "";
  snprintf(__str, 0x50uLL, "com.apple.coremedia.playerremote.transitiontimer.%s", v15);
  v16 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 128) = v16;
  if (!v16)
    goto LABEL_36;
  Mutable = CFArrayCreateMutable(*v10, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 112) = Mutable;
  if (!Mutable
    || (v18 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 120) = v18) == 0)
    || (v19 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 216) = v19) == 0)
    || (v20 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (*(_QWORD *)(DerivedStorage + 208) = v20) == 0))
  {
LABEL_36:
    v9 = FigSignalErrorAt();
    goto LABEL_37;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v9 = CMNotificationCenterAddListener();
  if ((_DWORD)v9)
  {
LABEL_37:
    started = v9;
    if (xdict)
      CFRelease(xdict);
    if ((_DWORD)started)
      goto LABEL_35;
    v21 = 0;
    goto LABEL_22;
  }
  v21 = xdict;
LABEL_22:
  xdict = 0;
  *(_QWORD *)__str = 0;
  LODWORD(value) = -1;
  v22 = dyld_program_sdk_at_least();
  v23 = FigXPCCreateBasicMessage();
  if ((_DWORD)v23)
  {
    started = v23;
    uint64 = 0;
    MutableCopy = 0;
  }
  else
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFDictionaryRemoveValue(MutableCopy, CFSTR("AsynchronousControlQueueHolder"));
    xpc_dictionary_set_uint64(*(xpc_object_t *)__str, "EngineTopology", a2 & 0xFFFFFFDF);
    xpc_dictionary_set_BOOL(*(xpc_object_t *)__str, "ClientSDKVersion2015AndLater", v22);
    FigXPCMessageSetCFDictionary();
    MainBundle = CFBundleGetMainBundle();
    CFBundleGetIdentifier(MainBundle);
    FigXPCMessageSetCFString();
    v26 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if ((_DWORD)v26)
    {
      started = v26;
      uint64 = 0;
    }
    else
    {
      uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
      if (uint64)
      {
        FigXPCRemoteClientGetServerPID();
        FigRemote_SetServerPid();
        started = 0;
      }
      else
      {
        started = FigSignalErrorAt();
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (!(_DWORD)started)
  {
    *(_QWORD *)CMBaseObjectGetDerivedStorage() = uint64;
    v28 = FigXPCRemoteClientAssociateObject();
    if ((_DWORD)v28)
    {
      started = v28;
    }
    else
    {
      v29 = CMBaseObjectGetDerivedStorage();
      if ((a2 & 0xF) != 4 && (a2 & 0x100) == 0)
      {
        v30 = v29;
        v31 = (void *)MEMORY[0x19403137C]();
        *(_QWORD *)(v30 + 144) = -[FigDisplayMirroringChangeObserver initWithPlayer:]([FigDisplayMirroringChangeObserver alloc], "initWithPlayer:", v21);
        objc_autoreleasePoolPop(v31);
      }
      started = FigStartMonitoringMediaServicesProcessDeath();
      if (!(_DWORD)started)
      {
        *a4 = v21;
        goto LABEL_35;
      }
    }
  }
  if (v21)
    CFRelease(v21);
LABEL_35:
  FigXPCRemoteClientKillServerOnTimeout();
  return started;
}

uint64_t FigSharedRemote_SetDiskCacheParams(CFStringRef URLString, int64_t a2, int64_t a3, int a4)
{
  uint64_t v8;

  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v8 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v8 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v8 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v8)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        v8 = FigXPCMessageSetCFString();
        if (!(_DWORD)v8)
        {
          xpc_dictionary_set_int64(0, "TargetSize", a2);
          xpc_dictionary_set_int64(0, "TargetFileSize", a3);
          xpc_dictionary_set_BOOL(0, "AutomaticallyManagesSize", a4 != 0);
          v8 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

const __CFString *fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(const __CFString *URLString)
{
  CFURLRef v1;
  CFURLRef v2;
  uint64_t v3;

  if (URLString)
  {
    v1 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], URLString, 0);
    if (v1)
    {
      v2 = v1;
      v3 = FigSandboxRegisterDirectoryURLWithProcess();
      CFRelease(v2);
      return (const __CFString *)v3;
    }
    else
    {
      return (const __CFString *)FigSignalErrorAt();
    }
  }
  return URLString;
}

uint64_t FigSharedRemote_CheckIntoAndOutOfDiskCache(CFStringRef URLString, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2 || !a3 || !a4)
  {
    v6 = FigSignalErrorAt();
LABEL_14:
    v5 = v6;
    goto LABEL_15;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v5 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v5 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v6 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v6)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        v6 = FigXPCMessageSetCFString();
        if (!(_DWORD)v6)
        {
          v6 = FigXPCMessageSetCFString();
          if (!(_DWORD)v6)
          {
            v6 = FigXPCMessageSetCFURL();
            if (!(_DWORD)v6)
            {
              v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!(_DWORD)v6)
                v6 = FigXPCMessageCopyCFString();
            }
          }
        }
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigSharedRemote_DeleteFromDiskCache(CFStringRef URLString, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
      dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
    v3 = remoteXPCPlayerClient_EnsureClientEstablished_err;
    if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
    {
      v3 = 4294949788;
      if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
      {
        v4 = FigXPCCreateBasicMessage();
        if ((_DWORD)v4
          || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), v4 = FigXPCMessageSetCFString(), (_DWORD)v4)
          || (v4 = FigXPCMessageSetCFString(), (_DWORD)v4))
        {
          v3 = v4;
        }
        else
        {
          v3 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    v3 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t FigSharedRemote_ReserveDiskCacheBacking(CFStringRef URLString, uint64_t a2, int64_t a3)
{
  uint64_t v5;

  if (a2)
  {
    if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
      dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
    v5 = remoteXPCPlayerClient_EnsureClientEstablished_err;
    if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
    {
      v5 = 4294949788;
      if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
      {
        v5 = FigXPCCreateBasicMessage();
        if (!(_DWORD)v5)
        {
          xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
          v5 = FigXPCMessageSetCFString();
          if (!(_DWORD)v5)
          {
            v5 = FigXPCMessageSetCFString();
            if (!(_DWORD)v5)
            {
              xpc_dictionary_set_int64(0, "DesiredByteSize", a3);
              v5 = FigXPCRemoteClientSendSyncMessage();
            }
          }
        }
      }
    }
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigSharedRemote_CopyDiskCacheCheckedInIDs(CFStringRef URLString, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!a2)
  {
    v4 = FigSignalErrorAt();
LABEL_10:
    v3 = v4;
    goto LABEL_11;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v3 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v3 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v4 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v4)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        v4 = FigXPCMessageSetCFString();
        if (!(_DWORD)v4)
        {
          v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)v4)
            v4 = FigXPCMessageCopyCFArray();
        }
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t FigSharedRemote_GetCacheFileSize(CFStringRef URLString, uint64_t a2, int64_t *a3)
{
  uint64_t v5;
  uint64_t v6;

  if (!a2 || !a3)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_14;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v5 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v5 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v6 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v6)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        v6 = FigXPCMessageSetCFString();
        if (!(_DWORD)v6)
        {
          v6 = FigXPCMessageSetCFString();
          if (!(_DWORD)v6)
          {
            v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!(_DWORD)v5)
              *a3 = xpc_dictionary_get_int64(0, "UsedFileSize");
            goto LABEL_12;
          }
        }
      }
LABEL_14:
      v5 = v6;
    }
  }
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t FigSharedRemote_CopyCacheProperty(CFStringRef URLString, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  if (!a2 || !a5 || !a3)
  {
    v7 = FigSignalErrorAt();
LABEL_14:
    v6 = v7;
    goto LABEL_15;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v6 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v6 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v7 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v7)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        v7 = FigXPCMessageSetCFString();
        if (!(_DWORD)v7)
        {
          v7 = FigXPCMessageSetCFString();
          if (!(_DWORD)v7)
          {
            v7 = FigXPCMessageSetCFString();
            if (!(_DWORD)v7)
            {
              v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
              if (!(_DWORD)v7)
                v7 = FigXPCMessageCopyCFObject();
            }
          }
        }
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigSharedRemote_MakeRoomInDiskCache(CFStringRef URLString, int a2, int64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v6 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v6 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      v7 = FigXPCCreateBasicMessage();
      if ((_DWORD)v7
        || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), v7 = FigXPCMessageSetCFString(), (_DWORD)v7))
      {
        v6 = v7;
      }
      else
      {
        xpc_dictionary_set_BOOL(0, "AllAvailable", a2 != 0);
        v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        v6 = v8;
        if (a3 && !(_DWORD)v8)
          *a3 = xpc_dictionary_get_int64(0, "BytesMadeAvailable");
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigSharedRemote_GetRentalInfo(const char *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  CFStringRef v12;
  uint64_t v13;

  if (!a2 || !a3 || !a4 || !a5)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v10 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (remoteXPCPlayerClient_EnsureClientEstablished_err)
    goto LABEL_18;
  v11 = FigXPCCreateBasicMessage();
  if ((_DWORD)v11)
  {
LABEL_17:
    v10 = v11;
LABEL_18:
    v12 = 0;
    goto LABEL_13;
  }
  xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
  v12 = CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1);
  if (!v12)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_20;
  }
  v13 = FigXPCMessageSetCFString();
  if ((_DWORD)v13)
  {
LABEL_20:
    v10 = v13;
    goto LABEL_13;
  }
  v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v10)
  {
    *a2 = xpc_dictionary_get_uint64(0, "RentalStartTime");
    *a3 = xpc_dictionary_get_uint64(0, "RentalDuration");
    *a4 = xpc_dictionary_get_uint64(0, "PlaybackStartTime");
    *a5 = xpc_dictionary_get_uint64(0, "PlaybackDuration");
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  if (v12)
    CFRelease(v12);
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t FigSharedRemote_CopyVideoCompressorSupportedPropertyDictionary(unsigned int a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;

  if (!a5)
  {
    v9 = FigSignalErrorAt();
LABEL_9:
    v8 = v9;
    goto LABEL_10;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v8 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v9 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v9)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      v9 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v9)
      {
        xpc_dictionary_set_uint64(0, "VideoCodecType", a1);
        xpc_dictionary_set_int64(0, "Width", a2);
        xpc_dictionary_set_int64(0, "Height", a3);
        v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v9)
          v9 = FigXPCMessageCopyCFDictionary();
      }
    }
    goto LABEL_9;
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t FigSharedRemote_EnsureReadyToCollectIncrementalCoverageDataWithPattern()
{
  uint64_t v0;

  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v0 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v0 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v0)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      FigXPCMessageSetCFString();
      v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t FigSharedRemote_EnsureReadyToCollectIncrementalCoverageData()
{
  uint64_t result;

  result = FigCopyCoverageFilePathPattern();
  if (!(_DWORD)result)
    return FigSharedRemote_EnsureReadyToCollectIncrementalCoverageDataWithPattern();
  return result;
}

uint64_t FigSharedRemote_BeginUpdatingIncrementalCodeCoverageData()
{
  uint64_t v0;

  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v0 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v0 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v0)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t FigSharedRemote_FinishUpdatingIncrementalCodeCoverageData()
{
  uint64_t v0;

  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  v0 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    v0 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v0)
    {
      xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
      v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v0;
}

uint64_t remoteXPCPlayerClient_DeadConnectionCallback(const void *a1)
{
  CFTypeID v2;
  CFTypeID v3;
  uint64_t result;

  v2 = CFGetTypeID(a1);
  if (v2 == FigPlayerGetTypeID() || (v3 = CFGetTypeID(a1), result = FigPlaybackItemGetTypeID(), v3 == result))
  {
    result = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(result + 8) = 1;
  }
  return result;
}

BOOL remoteXPCPlayerClient_NotificationFilter(CFTypeRef a1, const void *a2, void *a3, CFDictionaryRef a4)
{
  CFTypeID v8;
  uint64_t DerivedStorage;
  uint64_t v10;
  const void *v11;
  const __CFArray *v12;
  CFTypeID v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  __CFSet *v18;
  const void *v19;
  int v20;
  OSStatus v21;
  int v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  CFTypeID v25;
  const void *v26;
  CFTypeID v27;
  uint64_t v28;
  const void *v29;
  __CFDictionary *MutableCopy;
  __CFDictionary *v31;
  __CFDictionary *v33;
  const void *v34;
  const void *v35;
  CFTypeID v36;
  const __CFNumber *Value;
  const __CFNumber *v38;
  CFTypeID v39;
  CFTypeRef v40;
  const __CFDictionary *v41;
  uint64_t (*v42)(const void *, _QWORD, CGSize *);
  int v43;
  CGFloat width;
  unsigned int (*v45)(CFTypeRef, _QWORD, CFTypeRef *);
  CMTime *v46;
  const __CFDictionary *v47;
  const __CFArray *v48;
  const void *v49;
  uint64_t (*v50)(const void *, _QWORD, CFTypeRef *);
  int v51;
  __int128 v52;
  const __CFArray *v53;
  const void *v54;
  const __CFDictionary *v55;
  const __CFDictionary *v56;
  unsigned int (*v57)(CFTypeRef, _QWORD, CMTime *);
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  const __CFArray *v62;
  const void *v63;
  const __CFDictionary *v64;
  uint64_t v65;
  uint64_t v66;
  CMTimebaseRef *v67;
  const __CFDictionary *v68;
  const void *v69;
  const void *v70;
  const __CFDictionary *v71;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  const void *v74;
  dispatch_source_t v75;
  NSObject *v76;
  CMTimebaseRef *v77;
  const void *v78;
  OpaqueCMTimebase *v79;
  _BOOL4 isSyncItem;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v82;
  uint64_t (*v83)(const void *, _QWORD, CMTime *);
  int v84;
  const void *v85;
  int v86;
  int v87;
  CMTimeEpoch v88;
  const void *cf;
  CFTypeRef cfa[2];
  CFTypeRef cfb[2];
  const void *v92;
  uint64_t v93;
  CFDictionaryRef theDict;
  CMTime fireTime;
  CFTypeRef v96[7];
  CFTypeRef v97[2];
  void (*v98)(CFTypeRef *);
  void *v99;
  const void *v100;
  const void *v101;
  CFTypeRef v102;
  const void *v103;
  char v104;
  __CFDictionary *v105;
  CMTime handler;
  void *v107;
  NSObject *v108;
  const void *v109;
  CFTypeRef v110;
  const void *v111;
  const void *v112;
  char v113;
  BOOL v114;
  CGSize size;
  CFTypeRef (*v116)(_QWORD *);
  void *v117;
  const void *v118;
  const void *v119;
  CFTypeRef v120;
  const void *v121;
  CMTimeValue v122;
  CMTimeScale timescale;
  uint64_t v124;
  CFRange v125;

  v124 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v8 = CFGetTypeID(a1);
    if (v8 == FigPlayerGetTypeID())
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      size.width = 0.0;
      if (*(_BYTE *)(DerivedStorage + 9))
        goto LABEL_63;
      v10 = DerivedStorage;
      if (FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&size))
        goto LABEL_63;
      if (CFEqual(CFSTR("SynchronousFrameEnqueued"), a2))
      {
        FigReadWriteLockLockForRead();
        v11 = *(const void **)(v10 + 56);
        if (v11)
          v12 = (const __CFArray *)CFRetain(v11);
        else
          v12 = 0;
        FigReadWriteLockUnlockForRead();
        FPSupport_AppendDeferredTransactionChangeForCallingSetContentsChangedOnLayers(0, v12, (uint64_t)"remoteXPCPlayer_NotificationFilter");
        if (!v12)
          goto LABEL_64;
        v40 = v12;
      }
      else
      {
        if (CFEqual(CFSTR("Remote_RateWillChangeTo"), a2))
        {
          if (a4)
          {
            v36 = CFGetTypeID(a4);
            if (v36 == CFDictionaryGetTypeID())
            {
              Value = (const __CFNumber *)CFDictionaryGetValue(a4, CFSTR("Remote_NewRate"));
              if (Value)
              {
                v38 = Value;
                v39 = CFGetTypeID(Value);
                if (v39 == CFNumberGetTypeID())
                  CFNumberGetValue(v38, kCFNumberFloat32Type, (void *)(v10 + 172));
              }
            }
          }
          LODWORD(v12) = 1;
          goto LABEL_64;
        }
        if (CFEqual(CFSTR("CurrentItemDidChange"), a2))
        {
          v97[0] = 0;
          v45 = *(unsigned int (**)(CFTypeRef, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
          if (!v45 || v45(a1, 0, v97))
            goto LABEL_63;
          if (v97[0])
          {
            v46 = (CMTime *)CMBaseObjectGetDerivedStorage();
            handler = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            if (a4)
            {
              v47 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("CurrentDuration"));
              CMTimeMakeFromDictionary(&handler, v47);
              v48 = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("CurrentVideoSlotArray"));
              v49 = CFDictionaryGetValue(a4, CFSTR("CurrentVideoTrackMatrix"));
            }
            else
            {
              v48 = 0;
              v49 = 0;
            }
            v46[9] = handler;
            remoteXPCPlayer_connectVideoLayerToPlaybackItem(a1, v97[0], 0, v48 == 0, v48, v49, 0, 0, *(const void **)&size.width);
            remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)a1, (uint64_t)v97[0], 3, *(const void **)&size.width);
          }
          else if (remoteXPCPlayer_clearVideoLayer(a1, *(const void **)&size.width))
          {
            goto LABEL_63;
          }
          v40 = v97[0];
          if (!v97[0])
            goto LABEL_63;
        }
        else
        {
          if (!CFEqual(CFSTR("IsAirPlayVideoActiveDidChange"), a2))
          {
            if (CFEqual((CFTypeRef)*MEMORY[0x1E0CA4B88], a2))
              remoteXPCPlayer_clearVideoLayer(a1, *(const void **)&size.width);
            goto LABEL_63;
          }
          handler.value = 0;
          v57 = *(unsigned int (**)(CFTypeRef, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32);
          if (!v57 || v57(a1, 0, &handler))
            goto LABEL_63;
          remoteXPCPlayer_updateAirPlayVideoHostLayer((uint64_t)a1);
          if (handler.value)
          {
            v58 = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19402EEEC](*(_QWORD *)(v58 + 136));
            v59 = MEMORY[0x1E0CA2E40];
            v60 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
            *(_OWORD *)(v58 + 88) = *MEMORY[0x1E0CA2E40];
            *(_OWORD *)(v58 + 104) = v60;
            *(_OWORD *)(v58 + 120) = *(_OWORD *)(v59 + 32);
            *(_QWORD *)(v58 + 80) = 0;
            MEMORY[0x19402EF04](*(_QWORD *)(v58 + 136));
          }
          else
          {
            FigSignalErrorAt();
          }
          v40 = (CFTypeRef)handler.value;
          if (!handler.value)
          {
LABEL_63:
            LODWORD(v12) = 0;
LABEL_64:
            FigDeferredTransactionCommit(*(uint64_t *)&size.width);
            if (*(_QWORD *)&size.width)
              CFRelease(*(CFTypeRef *)&size.width);
            v33 = 0;
            goto LABEL_67;
          }
        }
      }
      CFRelease(v40);
      goto LABEL_63;
    }
    v13 = CFGetTypeID(a1);
    if (v13 != FigPlaybackItemGetTypeID())
    {
      if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1))
        return FigXPCPlaybackCoordinatorClientHandleNotificationFilter();
      FigSignalErrorAt();
      return 1;
    }
    v14 = CMBaseObjectGetDerivedStorage();
    v15 = (const void *)remoteXPCItem_copyOwningPlayer();
    v105 = 0;
    MEMORY[0x19402EA0C](*(_QWORD *)(v14 + 16));
    theDict = a4;
    if (*(_BYTE *)(v14 + 9) || !v15)
    {
      MEMORY[0x19402EA24](*(_QWORD *)(v14 + 16));
      v33 = 0;
      LODWORD(v12) = 0;
      v35 = 0;
      v34 = 0;
LABEL_45:
      if (v15)
        CFRelease(v15);
      if (v35)
        CFRelease(v35);
      if (v34)
        CFRelease(v34);
      a4 = theDict;
LABEL_67:
      if ((_DWORD)v12 == 4)
      {
        a4 = v33;
      }
      else
      {
        if ((_DWORD)v12 == 1)
          goto LABEL_73;
        if ((_DWORD)v12)
          a4 = 0;
      }
      fpr_deferPostNotificationToNotificationQueue(a1, a2, a4);
LABEL_73:
      if (v33)
        CFRelease(v33);
      return 1;
    }
    v16 = CMBaseObjectGetDerivedStorage();
    v92 = v15;
    v93 = v14;
    if (CFEqual(a2, CFSTR("ItemWasRemovedFromPlayQueue")))
    {
      if (!a4 || (v17 = (const void *)*MEMORY[0x1E0C9AE50], v17 != CFDictionaryGetValue(a4, CFSTR("AsRequested"))))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 32));
        v18 = *(__CFSet **)(v16 + 24);
        if (v18)
          CFSetRemoveValue(v18, a1);
        MEMORY[0x19402EF04](*(_QWORD *)(v16 + 32));
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 88));
      if (remoteXPCItem_isSyncItem(a1))
      {
        v19 = *(const void **)(v16 + 72);
        if (v19)
        {
          CFRelease(v19);
          *(_QWORD *)(v16 + 72) = 0;
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v16 + 88));
      remoteXPCItem_updateLayerSync((uint64_t)a1, 0, 0);
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("DurationChanged")))
    {
      size.width = 0.0;
      handler = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      if (a4)
      {
        v41 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("CurrentDuration"));
        CMTimeMakeFromDictionary(&handler, v41);
      }
      *(CMTime *)(v14 + 216) = handler;
      v42 = *(uint64_t (**)(const void *, _QWORD, CGSize *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (!v42)
        goto LABEL_22;
      v43 = v42(v15, 0, &size);
      width = size.width;
      if (!v43 && *(CFTypeRef *)&size.width == a1)
      {
        remoteXPCPlayer_updateLayerDurations((uint64_t)v15, (uint64_t)a1, 3, 0);
        width = size.width;
      }
      goto LABEL_135;
    }
    if (CFEqual(a2, CFSTR("ReadyForPlayback")))
    {
      v97[0] = 0;
      v50 = *(uint64_t (**)(const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
      if (!v50)
      {
LABEL_22:
        cf = 0;
        v20 = 0;
        LODWORD(v12) = 0;
        v21 = 0;
        v22 = 1;
LABEL_23:
        v23 = v105;
        if (v105)
          v24 = v105;
        else
          v24 = a4;
        if (v21
          || !v22
          || !v24
          || (v25 = CFGetTypeID(v24), v25 != CFDictionaryGetTypeID())
          || (v26 = CFDictionaryGetValue(v24, CFSTR("Server_CFError"))) == 0
          || (v27 = CFGetTypeID(v26), v27 != CFDictionaryGetTypeID())
          || (v28 = FigCFErrorCreateFromPropertyList()) == 0)
        {
          v29 = 0;
          v33 = 0;
          v34 = 0;
          v15 = v92;
          if (!v20)
            goto LABEL_41;
          goto LABEL_40;
        }
        v29 = (const void *)v28;
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v24);
        if (MutableCopy)
        {
          v31 = MutableCopy;
          CFDictionaryRemoveValue(MutableCopy, CFSTR("Server_CFError"));
          CFDictionarySetValue(v31, CFSTR("CFError"), v29);
          v15 = v92;
          if (v23)
            CFRelease(v23);
          v23 = v31;
LABEL_40:
          v105 = 0;
          LODWORD(v12) = 4;
          v33 = v23;
          v34 = v29;
          v23 = 0;
LABEL_41:
          MEMORY[0x19402EA24](*(_QWORD *)(v93 + 16));
          if (v21)
            LODWORD(v12) = 1;
          goto LABEL_43;
        }
LABEL_185:
        MEMORY[0x19402EA24](*(_QWORD *)(v93 + 16));
        v33 = 0;
        LODWORD(v12) = 1;
        v23 = v105;
        v34 = v29;
        v15 = v92;
LABEL_43:
        v35 = cf;
        if (v23)
          CFRelease(v23);
        goto LABEL_45;
      }
      v51 = v50(v15, 0, v97);
      width = *(double *)v97;
      if (!v51 && v97[0] == a1)
      {
        handler = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
        v52 = *MEMORY[0x1E0C9D820];
        size = (CGSize)*MEMORY[0x1E0C9D820];
        v96[0] = 0;
        if (a4)
        {
          *(_OWORD *)cfa = v52;
          v53 = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("CurrentVideoSlotArray"));
          v54 = CFDictionaryGetValue(a4, CFSTR("CurrentVideoTrackMatrix"));
          v55 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("CurrentDuration"));
          CMTimeMakeFromDictionary(&handler, v55);
          v56 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("CurrentDimensions"));
          if (!CGSizeMakeWithDictionaryRepresentation(v56, &size))
            size = *(CGSize *)cfa;
        }
        else
        {
          v53 = 0;
          v54 = 0;
        }
        *(CMTime *)(v14 + 216) = handler;
        *(CGSize *)(v14 + 240) = size;
        FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)v96);
        remoteXPCPlayer_connectVideoLayerToPlaybackItem(v15, a1, 0, v53 == 0, v53, v54, 0, 0, v96[0]);
        remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)v15, (uint64_t)a1, 3, v96[0]);
        FigDeferredTransactionCommit((uint64_t)v96[0]);
        if (v96[0])
          CFRelease(v96[0]);
        width = *(double *)v97;
      }
LABEL_135:
      if (width != 0.0)
        CFRelease(*(CFTypeRef *)&width);
      goto LABEL_22;
    }
    if (CFEqual(a2, CFSTR("DimensionsChanged")))
    {
      v61 = *MEMORY[0x1E0C9D820];
      *(_OWORD *)&handler.value = *MEMORY[0x1E0C9D820];
      if (a4)
      {
        *(_OWORD *)cfb = v61;
        v62 = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("CurrentVideoSlotArray"));
        v63 = CFDictionaryGetValue(a4, CFSTR("CurrentVideoTrackMatrix"));
        v64 = (const __CFDictionary *)CFDictionaryGetValue(a4, CFSTR("CurrentDimensions"));
        if (!CGSizeMakeWithDictionaryRepresentation(v64, (CGSize *)&handler))
          *(_OWORD *)&handler.value = *(_OWORD *)cfb;
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 88));
      isSyncItem = remoteXPCItem_isSyncItem(a1);
      MEMORY[0x19402EF04](*(_QWORD *)(v16 + 88));
      *(_OWORD *)(v14 + 240) = *(_OWORD *)&handler.value;
      if (isSyncItem)
        remoteXPCPlayer_connectVideoLayerToPlaybackItem(v15, a1, 1, v62 == 0, v62, v63, 0, 0, 0);
      goto LABEL_22;
    }
    if (CFEqual(CFSTR("ScheduleNextItemTransitionTimer"), a2))
    {
      if (a4)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 88));
        v65 = remoteXPCPlayer_copySyncItem((uint64_t)v15);
        MEMORY[0x19402EF04](*(_QWORD *)(v16 + 88));
        v66 = CMBaseObjectGetDerivedStorage();
        v22 = 0;
        LODWORD(v12) = 1;
        cf = (const void *)v65;
        if (!v65 || (CFTypeRef)v65 == a1)
        {
          v20 = 0;
          v21 = 0;
          goto LABEL_23;
        }
        v67 = (CMTimebaseRef *)v66;
        v104 = 0;
        v68 = a4;
        v69 = CFDictionaryGetValue(a4, CFSTR("CurrentVideoSlotArray"));
        v70 = CFDictionaryGetValue(v68, CFSTR("CurrentVideoTrackMatrix"));
        v71 = (const __CFDictionary *)CFDictionaryGetValue(v68, CFSTR("FigTime"));
        CMTimeMakeFromDictionary(&handler, v71);
        v122 = handler.value;
        flags = handler.flags;
        timescale = handler.timescale;
        epoch = handler.epoch;
        FigCFDictionaryGetBooleanIfPresent();
        v21 = 0;
        if ((flags & 1) == 0 || !v69 || !v70)
          goto LABEL_150;
        v88 = epoch;
        v74 = v70;
        remoteXPCPlayer_cancelAndClearNextItemTransitionTimer();
        v75 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v16 + 128));
        if (!v75)
        {
          v21 = 0;
          goto LABEL_150;
        }
        v76 = v75;
        *(_QWORD *)(v16 + 136) = v75;
        v77 = v67;
        v78 = (const void *)MEMORY[0x1E0C809B0];
        *(_QWORD *)&size.width = MEMORY[0x1E0C809B0];
        *(_QWORD *)&size.height = 3221225472;
        v116 = __remoteXPCPlaybackItem_NotificationFilter_block_invoke;
        v117 = &__block_descriptor_64_e5_v8__0l;
        v118 = v69;
        v119 = v74;
        v120 = a1;
        v121 = cf;
        v97[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
        v97[1] = (CFTypeRef)3221225472;
        v98 = (void (*)(CFTypeRef *))__remoteXPCPlaybackItem_NotificationFilter_block_invoke_2;
        v99 = &__block_descriptor_64_e5_v8__0l;
        v100 = v69;
        v101 = v74;
        v102 = a1;
        v103 = cf;
        __remoteXPCPlaybackItem_NotificationFilter_block_invoke(&size);
        handler.value = (CMTimeValue)v78;
        *(_QWORD *)&handler.timescale = 3221225472;
        handler.epoch = (CMTimeEpoch)__remoteXPCPlaybackItem_NotificationFilter_block_invoke_3;
        v107 = &unk_1E2F8BF40;
        v108 = v76;
        v109 = v92;
        v113 = v104;
        v114 = v69 != 0;
        v110 = a1;
        v111 = v69;
        v112 = v74;
        dispatch_source_set_event_handler(v76, &handler);
        v96[0] = v78;
        v96[1] = (CFTypeRef)3221225472;
        v96[2] = __remoteXPCPlaybackItem_NotificationFilter_block_invoke_4;
        v96[3] = &unk_1E2F8BF68;
        v96[4] = v76;
        v96[5] = v97;
        v96[6] = v77;
        dispatch_source_set_cancel_handler(v76, v96);
        dispatch_resume(v76);
        v21 = CMTimebaseAddTimerDispatchSource(v77[4], v76);
        if (!v21)
        {
          v79 = v77[4];
          fireTime.value = v122;
          fireTime.timescale = timescale;
          fireTime.flags = flags;
          fireTime.epoch = v88;
          v21 = CMTimebaseSetTimerDispatchSourceNextFireTime(v79, v76, &fireTime, 0);
          if (!v21)
          {
LABEL_150:
            v22 = 0;
            v20 = 0;
            LODWORD(v12) = 1;
LABEL_151:
            a4 = theDict;
            goto LABEL_23;
          }
          CMTimebaseRemoveTimerDispatchSource(v77[4], v76);
        }
        v98(v97);
        goto LABEL_150;
      }
LABEL_139:
      cf = 0;
      v22 = 0;
      v20 = 0;
      v21 = 0;
      LODWORD(v12) = 1;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("CancelNextItemTransitionTimer")))
    {
      remoteXPCPlayer_cancelAndClearNextItemTransitionTimer();
      goto LABEL_139;
    }
    if (CFEqual(a2, CFSTR("FirstVideoFrameEnqueued")))
    {
      if (dword_1ECDC8880)
      {
        LODWORD(v97[0]) = 0;
        LOBYTE(v96[0]) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      LODWORD(v12) = 1;
      *(_BYTE *)(v14 + 258) = 1;
      remoteXPCItem_handleFirstFrameNotificationLatch(a1, 0, 0);
      cf = 0;
      v22 = 0;
      v20 = 0;
      goto LABEL_153;
    }
    if (CFEqual(a2, CFSTR("DidRemoveImageQueue")) || CFEqual(a2, CFSTR("WillReprepareImageQueues")))
    {
      v22 = 1;
      remoteXPCItem_handleFirstFrameNotificationLatch(a1, 1, 0);
      cf = 0;
      v20 = 0;
      LODWORD(v12) = 0;
LABEL_153:
      v21 = 0;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("DidPrepareImageQueue")))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v16 + 88));
      LODWORD(v12) = remoteXPCItem_isSyncItem(a1);
      MEMORY[0x19402EF04](*(_QWORD *)(v16 + 88));
      if ((_DWORD)v12)
      {
        remoteXPCItem_handleFirstFrameNotificationLatch(a1, 3, 0);
        goto LABEL_157;
      }
      goto LABEL_169;
    }
    if (!CFEqual(a2, CFSTR("ReadyForInspection")))
    {
      if (CFEqual(a2, CFSTR("LegibleOutputChanged")))
      {
        v87 = fpr_copyLegibleOutputChangedNotificationPayloadFromMessage();
      }
      else
      {
        if (!CFEqual(a2, CFSTR("MetadataOutputChanged")))
        {
          if (CFEqual(a2, CFSTR("SeekDidComplete")))
          {
            remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, (uint64_t)a3);
          }
          else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4B88]))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          else if (CFEqual(a2, CFSTR("PleaseUpdateLastPlayedDate")))
          {
            FPSupport_ProcessPayloadForLastPlayedDateNotification((uint64_t)a4);
            goto LABEL_139;
          }
          goto LABEL_157;
        }
        v87 = fpr_copyMetadataOutputChangedNotificationPayloadFromMessage(a3, &v105);
      }
      cf = 0;
      if (v87)
      {
        v29 = 0;
        goto LABEL_185;
      }
      v21 = 0;
      LODWORD(v12) = 4;
      v22 = 1;
      v20 = 1;
      goto LABEL_151;
    }
    if (!a4)
    {
LABEL_157:
      cf = 0;
      v20 = 0;
      LODWORD(v12) = 0;
LABEL_170:
      v21 = 0;
      v22 = 1;
      goto LABEL_151;
    }
    v82 = (const __CFArray *)CFDictionaryGetValue(a4, CFSTR("Properties"));
    v12 = v82;
    if (!v82)
    {
LABEL_169:
      cf = 0;
      v20 = 0;
      goto LABEL_170;
    }
    v125.length = CFArrayGetCount(v82);
    v125.location = 0;
    if (!CFArrayContainsValue(v12, v125, CFSTR("AccurateDuration")))
      goto LABEL_157;
    handler.value = 0;
    v83 = *(uint64_t (**)(const void *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v83)
      goto LABEL_157;
    v84 = v83(v15, 0, &handler);
    v85 = (const void *)handler.value;
    if (!v84 && (CFTypeRef)handler.value == a1)
    {
      v86 = *(_DWORD *)(v14 + 176);
      *(_DWORD *)(v14 + 176) = 0;
      v85 = a1;
      if (!v86)
        goto LABEL_168;
      remoteXPCPlayer_updateLayerDurations((uint64_t)v15, (uint64_t)a1, v86, 0);
      v85 = (const void *)handler.value;
    }
    if (!v85)
      goto LABEL_157;
LABEL_168:
    CFRelease(v85);
    goto LABEL_157;
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t remoteXPCPlayerClient_MessageHandler(uint64_t result, uint64_t a2)
{
  const void *v3;

  if (result)
  {
    v3 = (const void *)result;
    result = FigXPCMessageGetOpCode();
    if (!(_DWORD)result)
    {
      if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(v3))
        return FigXPCPlaybackCoordinatorClientHandleMessage(v3, a2);
      else
        return 4294951138;
    }
  }
  return result;
}

void remoteXPCPlayerClient_ObjectPurgedCallback(const void *a1)
{
  CFTypeID v2;
  CFTypeID v3;
  CFMutableDictionaryRef Mutable;

  v2 = CFGetTypeID(a1);
  if (v2 == FigPlayerGetTypeID())
  {
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 264) = 1;
  }
  else
  {
    v3 = CFGetTypeID(a1);
    if (v3 != FigPlaybackItemGetTypeID())
      return;
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 270) = 1;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt64();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

void fpr_deferPostNotificationToNotificationQueue(const void *a1, const void *a2, const void *a3)
{
  NSObject *v6;
  CFTypeID v7;
  const void *v8;
  CFTypeID v9;
  uint64_t DerivedStorage;
  _QWORD block[7];

  if (!a1)
    goto LABEL_17;
  v6 = gRemotePlayerNotificationQueue;
  v7 = CFGetTypeID(a1);
  if (v7 == FigPlayerGetTypeID())
  {
    v8 = CFRetain(a1);
    goto LABEL_7;
  }
  v9 = CFGetTypeID(a1);
  if (v9 != FigPlaybackItemGetTypeID()
    || *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 9)
    || (v8 = (const void *)remoteXPCItem_copyOwningPlayer()) == 0)
  {
LABEL_17:
    FigSignalErrorAt();
    return;
  }
LABEL_7:
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 9))
  {
    FigSignalErrorAt();
    if (v8)
LABEL_15:
      CFRelease(v8);
  }
  else
  {
    if (*(_QWORD *)(DerivedStorage + 40))
      v6 = *(NSObject **)(DerivedStorage + 40);
    if (a2)
      CFRetain(a2);
    CFRetain(a1);
    if (a3)
      CFRetain(a3);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpr_deferPostNotificationToNotificationQueue_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a2;
    block[5] = a1;
    block[6] = a3;
    dispatch_async(v6, block);
    if (v8)
      goto LABEL_15;
  }
}

uint64_t remoteXPCPlayer_connectVideoLayerToPlaybackItem(const void *a1, const void *a2, int a3, int a4, const __CFArray *a5, const void *a6, char *a7, int *a8, const void *a9)
{
  CFTypeRef v15;
  uint64_t DerivedStorage;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const __CFArray *v22;
  CFIndex Count;
  uint64_t v24;
  int v25;
  void *v26;
  uint64_t FigBaseObject;
  uint64_t (*v29)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  char v30;
  int v32;
  uint64_t v34;
  CFTypeRef cf;
  CFTypeRef v36;

  v15 = a9;
  v34 = MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v36 = 0;
  if (!a9)
  {
    v18 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
    if ((_DWORD)v18)
    {
      v24 = v18;
      v20 = 0;
      goto LABEL_24;
    }
    v15 = cf;
  }
  v32 = a4;
  if (a7)
    *a7 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v19 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  if (v19 == a2 || !v19)
  {
    if (!v19)
      goto LABEL_11;
  }
  else
  {
    remoteXPCItem_updateLayerSync((uint64_t)v19, 0, v15);
  }
  CFRelease(v19);
LABEL_11:
  remoteXPCItem_updateLayerSync((uint64_t)a2, 1, v15);
  v20 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v21 = *(const void **)(DerivedStorage + 72);
  *(_QWORD *)(DerivedStorage + 72) = v20;
  if (v20)
    CFRetain(v20);
  if (v21)
    CFRelease(v21);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  *(_BYTE *)(v17 + 259) = 1;
  FigReadWriteLockLockForRead();
  v22 = *(const __CFArray **)(DerivedStorage + 56);
  if (!v22)
  {
    FigReadWriteLockUnlockForRead();
    goto LABEL_23;
  }
  Count = CFArrayGetCount(v22);
  FigReadWriteLockUnlockForRead();
  if (Count < 1)
  {
LABEL_23:
    FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue((uint64_t)v15, a1, *(NSObject **)(DerivedStorage + 128), (uint64_t)"remoteXPCPlayer_connectVideoLayerToPlaybackItem");
    v24 = 0;
    goto LABEL_24;
  }
  if (a5)
  {
    v24 = 0;
LABEL_19:
    if (CFArrayGetCount(a5) >= 1)
    {
      if (a3)
      {
        remoteXPCPlayer_connectImageQueueToVideoLayerArray(a1, a2, a5, a6, v15);
        v25 = 2;
      }
      else
      {
        v25 = 3;
      }
      goto LABEL_39;
    }
    goto LABEL_37;
  }
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
  v29 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v29)
  {
    v24 = 4294954514;
    goto LABEL_37;
  }
  v24 = v29(FigBaseObject, CFSTR("VideoSlotArray"), *MEMORY[0x1E0C9AE00], &v36);
  a5 = (const __CFArray *)v36;
  if (v36)
    goto LABEL_19;
LABEL_37:
  if (!v32)
  {
    if (a7)
    {
      v30 = 0;
      v25 = 3;
      v26 = (void *)v34;
      goto LABEL_41;
    }
LABEL_24:
    v26 = (void *)v34;
    goto LABEL_25;
  }
  remoteXPCPlayer_connectImageQueueToVideoLayerArray(a1, a2, 0, a6, v15);
  v25 = 4;
LABEL_39:
  v26 = (void *)v34;
  if (!a7)
  {
    remoteXPCItem_handleFirstFrameNotificationLatch(a2, v25, v15);
    goto LABEL_25;
  }
  v30 = 1;
LABEL_41:
  *a7 = v30;
  if (a8)
    *a8 = v25;
LABEL_25:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v36)
    CFRelease(v36);
  objc_autoreleasePoolPop(v26);
  return v24;
}

void remoteXPCPlayer_updateLayerDurationsWhenItemReady(uint64_t a1, uint64_t a2, int a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CFArrayRef v10;
  void (*v11)(uint64_t, CFArrayRef, char *);
  int v12;
  char v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  if ((a3 & 3) != 0 && !*(_BYTE *)(DerivedStorage + 9) && !*(_BYTE *)(v9 + 9))
  {
    *(_DWORD *)(DerivedStorage + 176) |= a3;
    v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemProperty_AccurateDuration, 1, MEMORY[0x1E0C9B378]);
    v11 = *(void (**)(uint64_t, CFArrayRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v11)
      v11(a2, v10, &v13);
    if (v10)
      CFRelease(v10);
    if (v13)
    {
      v12 = *(_DWORD *)(DerivedStorage + 176);
      *(_DWORD *)(DerivedStorage + 176) = 0;
      remoteXPCPlayer_updateLayerDurations(a1, a2, v12, a4);
    }
  }
}

uint64_t remoteXPCPlayer_clearVideoLayer(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  const __CFArray *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  FigReadWriteLockLockForRead();
  v6 = *(const void **)(v5 + 56);
  if (v6)
    v7 = (const __CFArray *)CFRetain(v6);
  else
    v7 = 0;
  FigReadWriteLockUnlockForRead();
  FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(a2, v7, 0, (uint64_t)"remoteXPCPlayer_clearVideoLayer");
  FPSupport_AppendDeferredTransactionChangeToRelease(a2, (uint64_t)v7, (uint64_t)"remoteXPCPlayer_clearVideoLayer");
  FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue((uint64_t)a2, a1, *(NSObject **)(v5 + 128), (uint64_t)"remoteXPCPlayer_clearVideoLayer");
  return 0;
}

void remoteXPCPlayer_updateAirPlayVideoHostLayer(uint64_t a1)
{
  void *v2;
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v6;
  BOOL v7;
  int v8;
  const void *v9;
  const __CFArray *v10;
  int v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  char v14;
  void *v15;
  const void *v16;
  unsigned int valuePtr;
  CFNumberRef number;
  CFTypeRef cf;

  v2 = (void *)MEMORY[0x19403137C]();
  number = 0;
  cf = 0;
  valuePtr = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v5)
  {
    v5(FigBaseObject, CFSTR("IsAirPlayVideoActive"), 0, &cf);
    v6 = cf;
  }
  else
  {
    v6 = 0;
  }
  if (v6)
    v7 = v6 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
  else
    v7 = 0;
  v8 = v7;
  FigReadWriteLockLockForRead();
  v9 = *(const void **)(DerivedStorage + 48);
  if (!v9)
  {
    FigReadWriteLockUnlockForRead();
    v10 = 0;
    goto LABEL_25;
  }
  v10 = (const __CFArray *)CFRetain(v9);
  FigReadWriteLockUnlockForRead();
  if (!v10)
  {
LABEL_25:
    v14 = 1;
LABEL_27:
    remoteXPCPlayer_removeAirPlayVideoHostLayer();
    goto LABEL_28;
  }
  if (CFArrayGetCount(v10) > 0)
    v11 = v8;
  else
    v11 = 0;
  if (v11 != 1)
  {
    v14 = 0;
    goto LABEL_27;
  }
  v12 = FigPlayerGetFigBaseObject(a1);
  v13 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v13)
    goto LABEL_39;
  v14 = 0;
  if (!v13(v12, CFSTR("AirPlayVideoScrubbingCAContextID"), 0, &number) && number)
  {
    if (CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr))
    {
      objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
      if (!pthread_main_np())
        objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
      objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", v6, *MEMORY[0x1E0CD3160]);
      v15 = *(void **)(DerivedStorage + 96);
      if (v15)
      {
        objc_msgSend(v15, "removeFromSuperlayer");
      }
      else
      {
        v16 = (const void *)objc_msgSend(MEMORY[0x1E0CD27B0], "layer");
        *(_QWORD *)(DerivedStorage + 96) = v16;
        if (!v16)
        {
LABEL_38:
          objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
          goto LABEL_39;
        }
        CFRetain(v16);
      }
      objc_msgSend(*(id *)(DerivedStorage + 96), "setContextId:", valuePtr);
      objc_msgSend((id)CFArrayGetValueAtIndex(v10, 0), "addSublayer:", *(_QWORD *)(DerivedStorage + 96));
      goto LABEL_38;
    }
LABEL_39:
    v14 = 0;
  }
LABEL_28:
  if (cf)
    CFRelease(cf);
  if (number)
    CFRelease(number);
  if ((v14 & 1) == 0)
    CFRelease(v10);
  objc_autoreleasePoolPop(v2);
}

uint64_t remoteXPCPlayer_copySyncItem(uint64_t a1)
{
  uint64_t DerivedStorage;

  if (a1
    && (DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(_BYTE *)(DerivedStorage + 9))
    && *(_QWORD *)(DerivedStorage + 72))
  {
    return FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else
  {
    return 0;
  }
}

void remoteXPCItem_updateLayerSync(uint64_t a1, int a2, CFTypeRef a3)
{
  void *v6;
  const void *v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  CFAllocatorRef *v11;
  const void *v12;
  const __CFArray *v13;
  uint64_t Count;
  const void *v15;
  const __CFArray *v16;
  __CFArray *Mutable;
  const __CFArray *v18;
  uint64_t v19;
  uint64_t *v20;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v22;
  NSObject *v23;
  const void *v24;
  const void *v25;
  void *v26;
  const void *v27;
  CFTypeRef cf[27];
  CFRange v29;

  cf[25] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  v6 = (void *)MEMORY[0x19403137C]();
  if (!a1)
  {
    v7 = 0;
    goto LABEL_49;
  }
  v7 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!v7)
    goto LABEL_49;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 9))
  {
    FigSignalErrorAt();
    goto LABEL_49;
  }
  v10 = v9;
  v11 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a3)
    goto LABEL_7;
  if (FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)cf))
  {
LABEL_49:
    v16 = 0;
    v13 = 0;
    goto LABEL_38;
  }
  a3 = cf[0];
LABEL_7:
  v27 = a3;
  FigReadWriteLockLockForRead();
  v12 = *(const void **)(v10 + 56);
  if (v12)
  {
    v13 = (const __CFArray *)CFRetain(v12);
    FigReadWriteLockUnlockForRead();
    if (v13)
    {
      Count = CFArrayGetCount(v13);
      goto LABEL_12;
    }
  }
  else
  {
    FigReadWriteLockUnlockForRead();
    v13 = 0;
  }
  Count = 0;
LABEL_12:
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 168));
  v15 = *(const void **)(DerivedStorage + 160);
  if (v15)
    v16 = (const __CFArray *)CFRetain(v15);
  else
    v16 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 168));
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 144));
  if (v16 && CFArrayGetCount(v16) > 0 || a2 && Count >= 1)
  {
    v26 = v6;
    Mutable = CFArrayCreateMutable(*v11, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v18 = Mutable;
      if (a2 && Count >= 1)
      {
        v29.location = 0;
        v29.length = Count;
        CFArrayAppendArray(Mutable, v13, v29);
      }
      v20 = (uint64_t *)(DerivedStorage + 152);
      v19 = *(_QWORD *)(DerivedStorage + 152);
      if (v19 || (FigLayerSynchronizerCreate((_QWORD *)(DerivedStorage + 152)), (v19 = *v20) != 0))
      {
        if (dword_1ECDC8880)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v19 = *v20;
        }
        FigLayerSynchronizerSetLayerArraysWithDeferredTransaction(v19, v18, v16, v27);
      }
      CFRelease(v18);
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 144));
    v24 = *(const void **)(DerivedStorage + 152);
    if (v24)
    {
      v25 = *(const void **)(DerivedStorage + 32);
      v6 = v26;
      if (v25)
        FigLayerSynchronizerSynchronizeToTimebaseWithDeferredTransaction(v24, v25, 0, (uint64_t)"remoteXPCItem_updateLayerSync", v27);
    }
    else
    {
      v6 = v26;
    }
  }
  else
  {
    v22 = *(_QWORD *)(DerivedStorage + 152);
    if (v22)
    {
      if (dword_1ECDC8880)
      {
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v22 = *(_QWORD *)(DerivedStorage + 152);
      }
      FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v22, 0, v27);
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 144));
  }
LABEL_38:
  FigDeferredTransactionCommit((uint64_t)cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
  if (v7)
    CFRelease(v7);
  if (v13)
    CFRelease(v13);
  if (v16)
    CFRelease(v16);
  objc_autoreleasePoolPop(v6);
}

void remoteXPCPlayer_connectImageQueueToVideoLayerArray(const void *a1, const void *a2, const __CFArray *a3, const void *a4, CFTypeRef a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *v12;
  const __CFArray *v13;
  const void *v14;
  const __CFArray *MutableCopy;
  CFIndex Count;
  const __CFArray *v17;
  const __CFArray *v18;
  const void *v19;
  CFIndex v20;
  const void **v21;
  const void *ValueAtIndex;
  CFRange v23;
  CFIndex FirstIndexOfValue;
  CFIndex v25;
  double v26;
  double v27;
  unsigned int v29;
  unsigned int v30;
  void (*v31)(const void *, char *, unint64_t *);
  __int128 v32;
  uint64_t FigBaseObject;
  uint64_t (*v34)(uint64_t, const __CFString *, const __CFAllocator *, const void **);
  int v35;
  int RotationAngleAndFlipsFromCGAffineTransform;
  double v37;
  double v38;
  double v39;
  double v40;
  const void *v41;
  CFIndex v42;
  CFIndex v43;
  CFIndex v44;
  CFIndex v45;
  const void *v46;
  const void *v47;
  const __CFArray *v48;
  int v49;
  int v50;
  __CFDictionary *v51;
  const void *v52;
  __CFDictionary *v53;
  uint64_t v54;
  void (*v55)(uint64_t, const __CFString *, __CFArray *);
  const void *v56;
  CFTypeRef v57;
  const __CFArray *v58;
  const __CFArray *v59;
  const void *v60;
  uint64_t v61;
  __CFArray *Mutable;
  const __CFAllocator *allocator;
  const __CFArray *theArray;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int16 v67;
  CFTypeRef cf;
  CGAffineTransform v69;
  unint64_t v70;
  CGAffineTransform newValues;
  const void *v72;
  CFRange v73;
  CFRange v74;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = CMBaseObjectGetDerivedStorage();
  v70 = 0;
  memset(&v69, 0, sizeof(v69));
  cf = 0;
  FigReadWriteLockLockForRead();
  v12 = *(const void **)(DerivedStorage + 56);
  if (v12)
    v13 = (const __CFArray *)CFRetain(v12);
  else
    v13 = 0;
  v14 = *(const void **)(DerivedStorage + 48);
  if (v14)
    theArray = (const __CFArray *)CFRetain(v14);
  else
    theArray = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  FigReadWriteLockUnlockForRead();
  if (a5)
  {
    if (a3)
      goto LABEL_9;
LABEL_13:
    FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(a5, v13, 0, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray");
    v17 = 0;
    goto LABEL_63;
  }
  if (FigDeferredTransactionCreate((uint64_t)allocator, (uint64_t *)&cf))
    goto LABEL_86;
  a5 = cf;
  if (!a3)
    goto LABEL_13;
LABEL_9:
  if (MutableCopy)
    Count = CFArrayGetCount(MutableCopy);
  else
    Count = 0;
  if (Count == CFArrayGetCount(a3))
  {
    v61 = DerivedStorage;
    v18 = (const __CFArray *)FigCFArrayCreateMutableCopy();
    if (Count >= 1)
    {
      v57 = a5;
      v58 = v13;
      v19 = a1;
      v20 = 0;
      v21 = (const void **)MEMORY[0x1E0C9B0D0];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v20);
        if (!FigCFEqual())
        {
          if (v18)
            v23.length = CFArrayGetCount(v18);
          else
            v23.length = 0;
          v23.location = 0;
          FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v18, v23, ValueAtIndex);
          if (FirstIndexOfValue == -1)
          {
            v73.location = v20;
            v73.length = 1;
            CFArrayReplaceValues(MutableCopy, v73, v21, 1);
          }
          else
          {
            CFArrayRemoveValueAtIndex(v18, FirstIndexOfValue);
          }
        }
        ++v20;
      }
      while (Count != v20);
      v25 = 0;
      a1 = v19;
      a5 = v57;
      v13 = v58;
      do
      {
        CFArrayGetValueAtIndex(MutableCopy, v25);
        if (FigCFEqual())
        {
          newValues.a = 0.0;
          *(_QWORD *)&newValues.a = CFArrayGetValueAtIndex(v18, 0);
          v74.location = v25;
          v74.length = 1;
          CFArrayReplaceValues(MutableCopy, v74, (const void **)&newValues, 1);
          CFArrayRemoveValueAtIndex(v18, 0);
        }
        ++v25;
      }
      while (Count != v25);
    }
    v17 = MutableCopy;
    DerivedStorage = v61;
    if (v18)
    {
      CFRelease(v18);
      v17 = MutableCopy;
    }
  }
  else
  {
    v17 = a3;
  }
  FPSupport_AppendDeferredTransactionChangeForSettingImageQueueSlotsOnVideoLayers(a5, v17, v13, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray");
  v27 = *(double *)(v11 + 240);
  v26 = *(double *)(v11 + 248);
  if (v27 == *MEMORY[0x1E0C9D820] && v26 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    v31 = *(void (**)(const void *, char *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
    if (v31)
      v31(a2, (char *)&v70 + 4, &v70);
  }
  else
  {
    *(float *)&v29 = v27;
    *(float *)&v30 = v26;
    v70 = __PAIR64__(v29, v30);
  }
  if (*(_BYTE *)(DerivedStorage + 153))
    FPSupport_AppendDeferredTransactionChangeForSettingBoundsOnLayers(a5, theArray, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray", 0.0, 0.0, *((float *)&v70 + 1), *(float *)&v70);
  *(_BYTE *)(DerivedStorage + 154) = 0;
  if (FPSupport_ShouldApplyVideoTrackMatrix(a1, a2))
  {
    v67 = 0;
    v72 = a4;
    if (a4)
    {
      CFRetain(a4);
    }
    else
    {
      FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
      v34 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v34)
      {
        RotationAngleAndFlipsFromCGAffineTransform = 0;
LABEL_56:
        CGAffineTransformMakeRotation(&t1, (double)RotationAngleAndFlipsFromCGAffineTransform * 3.14159265 / 180.0);
        v37 = -1.0;
        if ((_BYTE)v67)
          v38 = -1.0;
        else
          v38 = 1.0;
        if (!HIBYTE(v67))
          v37 = 1.0;
        CGAffineTransformMakeScale(&t2, v38, v37);
        CGAffineTransformConcat(&v69, &t1, &t2);
        goto LABEL_62;
      }
      v35 = v34(FigBaseObject, CFSTR("VideoTrackMatrix"), allocator, &v72);
      RotationAngleAndFlipsFromCGAffineTransform = 0;
      a4 = v72;
      if (v35 || !v72)
      {
LABEL_50:
        if (a4)
          CFRelease(a4);
        if (RotationAngleAndFlipsFromCGAffineTransform == 270 || RotationAngleAndFlipsFromCGAffineTransform == 90)
        {
          v70 = __PAIR64__(v70, HIDWORD(v70));
          *(_BYTE *)(DerivedStorage + 154) = 1;
        }
        goto LABEL_56;
      }
    }
    FigGetCGAffineTransformFrom3x3MatrixArray(a4, (uint64_t)&newValues);
    RotationAngleAndFlipsFromCGAffineTransform = FigGetRotationAngleAndFlipsFromCGAffineTransform(&newValues.a, (_BYTE *)&v67 + 1, &v67);
    a4 = v72;
    goto LABEL_50;
  }
  v32 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v69.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v69.c = v32;
  *(_OWORD *)&v69.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
LABEL_62:
  v39 = *MEMORY[0x1E0C9D538];
  v40 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  newValues = v69;
  FPSupport_AppendDeferredTransactionChangeForSettingTransformOnLayers(a5, 0, (__int128 *)&newValues, v13, (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray", v39, v40);
LABEL_63:
  FigReadWriteLockLockForWrite();
  v41 = *(const void **)(DerivedStorage + 64);
  *(_QWORD *)(DerivedStorage + 64) = v17;
  if (v17)
    CFRetain(v17);
  if (v41)
    CFRelease(v41);
  FigReadWriteLockUnlockForWrite();
  if (theArray)
  {
    v42 = CFArrayGetCount(theArray);
    if (!v17)
      goto LABEL_85;
LABEL_71:
    v43 = CFArrayGetCount(v17);
    if (v42 >= 1)
    {
      v44 = v43;
      if (v43 >= 1)
      {
        v60 = a2;
        v59 = v13;
        v56 = a1;
        Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
        v45 = 0;
        v46 = (const void *)*MEMORY[0x1E0C9AE50];
        v47 = (const void *)*MEMORY[0x1E0C9AE40];
        v48 = theArray;
        do
        {
          v49 = objc_msgSend((id)CFArrayGetValueAtIndex(v48, v45), "isForScrubbingOnly");
          LODWORD(newValues.a) = 0;
          if (v45 < v44)
          {
            v50 = v49;
            if (FigCFArrayGetInt32AtIndex())
            {
              v51 = CFDictionaryCreateMutable(allocator, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              FigCFDictionarySetInt32();
              if (v50)
                v52 = v46;
              else
                v52 = v47;
              CFDictionarySetValue(v51, CFSTR("UsedForScrubbingOnly"), v52);
              CFArrayAppendValue(Mutable, v51);
              v53 = v51;
              v48 = theArray;
              CFRelease(v53);
            }
          }
          ++v45;
        }
        while (v42 != v45);
        v54 = FigPlaybackItemGetFigBaseObject(v60);
        v55 = *(void (**)(uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
        if (v55)
          v55(v54, CFSTR("VideoSlotUsage"), Mutable);
        a1 = v56;
        v13 = v59;
        if (Mutable)
          CFRelease(Mutable);
      }
    }
    goto LABEL_85;
  }
  v42 = 0;
  if (v17)
    goto LABEL_71;
LABEL_85:
  FPSupport_AppendDeferredTransactionPostCommitChangeToReleasePlayerResourcesOnQueue((uint64_t)a5, a1, *(NSObject **)(DerivedStorage + 128), (uint64_t)"remoteXPCPlayer_connectImageQueueToVideoLayerArray");
LABEL_86:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v13)
    CFRelease(v13);
  if (theArray)
    CFRelease(theArray);
}

void remoteXPCItem_handleFirstFrameNotificationLatch(const void *a1, int a2, const void *a3)
{
  _BYTE *DerivedStorage;
  uint64_t v7;
  const void *v8;
  int Value;
  uint64_t FigBaseObject;
  unsigned int (*v11)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  BOOL v12;
  _BYTE *v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFBooleanRef BOOLean;
  CFArrayRef theArray[17];

  theArray[16] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v7 = remoteXPCItem_copyOwningPlayer();
  BOOLean = 0;
  if (v7)
  {
    v8 = (const void *)v7;
    Value = 0;
    if (a2 != 1 && a2 != 4)
    {
      FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
      v11 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
      if (!v11
        || (!v11(FigBaseObject, CFSTR("HasEnqueuedFirstVideoFrame"), *MEMORY[0x1E0C9AE00], &BOOLean)
          ? (v12 = BOOLean == 0)
          : (v12 = 1),
            v12))
      {
        Value = 0;
      }
      else
      {
        Value = CFBooleanGetValue(BOOLean);
      }
    }
    v13 = DerivedStorage + 256;
    if (FPSupport_ItemReadyToDisplayVideoLatch(a2, Value, DerivedStorage + 257, DerivedStorage + 256))
    {
      if (DerivedStorage[257])
      {
        if (!*v13)
        {
          theArray[0] = 0;
          v15 = FigPlaybackItemGetFigBaseObject(a1);
          v16 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
          if (v16)
          {
            v16(v15, CFSTR("VideoSlotArray"), *MEMORY[0x1E0C9AE00], theArray);
            if (theArray[0])
            {
              if (CFArrayGetCount(theArray[0]) >= 1)
              {
                remoteXPCPlayer_connectImageQueueToVideoLayerArray(v8, a1, theArray[0], 0, a3);
                *v13 = 1;
              }
              if (theArray[0])
                CFRelease(theArray[0]);
            }
          }
        }
      }
      if (DerivedStorage[258])
      {
        if (dword_1ECDC8880)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpr_deferPostNotificationToNotificationQueue(a1, CFSTR("FirstVideoFrameEnqueued"), 0);
        DerivedStorage[258] = 0;
      }
    }
    CFRelease(v8);
    if (BOOLean)
      CFRelease(BOOLean);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t remoteXPCItem_copyOwningPlayer()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 9))
  {
    if (*(_QWORD *)(DerivedStorage + 24))
      return FigCFWeakReferenceHolderCopyReferencedObject();
    FigSignalErrorAt();
  }
  return 0;
}

void remoteXPCPlayer_updateLayerDurations(uint64_t a1, uint64_t a2, char a3, CFTypeRef a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, CMTime *);
  const void *v11;
  const __CFArray *v12;
  const void *v13;
  const __CFArray *v14;
  CMTime v15;
  CMTime time1;
  CFTypeRef cf;
  CMTime v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = CMBaseObjectGetDerivedStorage();
  v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  cf = 0;
  if ((a3 & 3) != 0 && !*(_BYTE *)(DerivedStorage + 9))
  {
    v9 = v8;
    if (!*(_BYTE *)(v8 + 9))
    {
      if (!a4)
      {
        if (FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf))
        {
LABEL_24:
          FigDeferredTransactionCommit((uint64_t)cf);
          if (cf)
            CFRelease(cf);
          return;
        }
        a4 = cf;
      }
      time1 = *(CMTime *)(DerivedStorage + 216);
      v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      if (CMTimeCompare(&time1, &v15))
      {
        v18 = *(CMTime *)(DerivedStorage + 216);
      }
      else
      {
        v10 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v10)
          v10(a2, &v18);
      }
      time1 = v18;
      v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E10];
      if (!CMTimeCompare(&time1, &v15))
        v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
      if ((a3 & 2) != 0)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 168));
        v11 = *(const void **)(DerivedStorage + 160);
        if (v11)
        {
          v12 = (const __CFArray *)CFRetain(v11);
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 168));
          if (v12)
          {
            time1 = v18;
            FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(a4, (__int128 *)&time1.value, v12, (uint64_t)"remoteXPCPlayer_updateLayerDurations");
            CFRelease(v12);
          }
        }
        else
        {
          MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 168));
        }
      }
      if ((a3 & 1) != 0)
      {
        FigReadWriteLockLockForRead();
        v13 = *(const void **)(v9 + 56);
        if (v13)
          v14 = (const __CFArray *)CFRetain(v13);
        else
          v14 = 0;
        FigReadWriteLockUnlockForRead();
        time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
        FPSupport_AppendDeferredTransactionChangeForSettingDurationOnLayers(a4, (__int128 *)&time1.value, v14, (uint64_t)"remoteXPCPlayer_updateLayerDurations");
        if (v14)
          CFRelease(v14);
      }
      goto LABEL_24;
    }
  }
}

void remoteXPCPlayer_removeAirPlayVideoHostLayer()
{
  void *v0;
  uint64_t DerivedStorage;
  uint64_t v2;
  const void *v3;

  v0 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 96))
  {
    v2 = DerivedStorage;
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    if (!pthread_main_np())
      objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
    objc_msgSend(MEMORY[0x1E0CD28B0], "setValue:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD3160]);
    objc_msgSend(*(id *)(v2 + 96), "removeFromSuperlayer");
    v3 = *(const void **)(v2 + 96);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v2 + 96) = 0;
    }
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  objc_autoreleasePoolPop(v0);
}

BOOL remoteXPCItem_isSyncItem(const void *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)remoteXPCItem_copyOwningPlayer();
  v3 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)v2);
  v4 = v3;
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
  return v4 == a1;
}

void remoteXPCPlayer_cancelAndClearNextItemTransitionTimer()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(NSObject **)(DerivedStorage + 128);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __remoteXPCPlayer_cancelAndClearNextItemTransitionTimer_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = DerivedStorage;
  dispatch_sync(v1, block);
}

uint64_t fpr_copyLegibleOutputChangedNotificationPayloadFromMessage()
{
  CFMutableArrayRef Mutable;
  uint64_t v1;
  const void *MutableCopy;
  uint64_t v3;
  uint64_t v5;
  CFTypeRef v6;
  void *v7;
  CFTypeRef cf;

  cf = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v6 = 0;
  v7 = 0;
  v1 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v1)
  {
    v5 = v1;
  }
  else
  {
    MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
    v3 = FigXPCMessageCopyCFArray();
    if (!(_DWORD)v3)
      v3 = FigSignalErrorAt();
    v5 = v3;
    if (MutableCopy)
      CFRelease(MutableCopy);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t fpr_copyMetadataOutputChangedNotificationPayloadFromMessage(void *a1, __CFDictionary **a2)
{
  uint64_t v4;
  __CFDictionary *MutableCopy;
  void *v6;
  void *value;

  value = 0;
  v4 = FigXPCMessageCopyCFDictionary();
  if (!(_DWORD)v4)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    fpr_copySampleBuffersArrayFromMessage(a1, "MetadataOutputSamples", (__CFArray **)&value);
    v6 = value;
    CFDictionarySetValue(MutableCopy, CFSTR("SampleBuffers"), value);
    *a2 = MutableCopy;
    if (v6)
      CFRelease(v6);
  }
  return v4;
}

uint64_t remoteXPCItem_HandleTimebaseSynchronizationUpdate(const void *a1, uint64_t a2)
{
  CFTypeID v3;
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != FigPlaybackItemGetTypeID())
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  result = FigXPCMessageCopyCFData();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

void __remoteXPCPlayer_cancelAndClearNextItemTransitionTimer_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 136);
  if (v2)
  {
    if (!dispatch_source_testcancel(*(dispatch_source_t *)(v1 + 136)))
    {
      dispatch_source_cancel(v2);
      v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 136);
    }
    dispatch_release(v2);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136) = 0;
  }
}

void fpr_copySampleBuffersArrayFromMessage(void *a1, const char *a2, __CFArray **a3)
{
  xpc_object_t array;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  size_t count;
  size_t v8;
  size_t v9;
  xpc_object_t value;
  void *bytes_ptr;
  size_t length;
  int SampleBufferFromSerializedAtomDataBlockBuffer;
  CMBlockBufferCustomBlockSource customBlockSource;
  CFTypeRef cf;

  array = xpc_dictionary_get_array(a1, a2);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (array)
  {
    count = xpc_array_get_count(array);
    if (!count)
    {
LABEL_12:
      *a3 = Mutable;
      return;
    }
    v8 = count;
    v9 = 0;
    while (1)
    {
      value = xpc_array_get_value(array, v9);
      *(_QWORD *)&customBlockSource.version = 0;
      cf = 0;
      HIDWORD(customBlockSource.AllocateBlock) = 0;
      customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))fpr_bbufUtilXPCObjectReleaser;
      customBlockSource.refCon = value;
      bytes_ptr = (void *)xpc_data_get_bytes_ptr(value);
      if (bytes_ptr)
      {
        length = xpc_data_get_length(value);
        SampleBufferFromSerializedAtomDataBlockBuffer = CMBlockBufferCreateWithMemoryBlock(v5, bytes_ptr, length, 0, &customBlockSource, 0, length, 0, (CMBlockBufferRef *)&cf);
        if (!SampleBufferFromSerializedAtomDataBlockBuffer)
        {
          FigXPCRetain();
          SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
        }
        LODWORD(bytes_ptr) = SampleBufferFromSerializedAtomDataBlockBuffer;
      }
      if (cf)
        CFRelease(cf);
      if ((_DWORD)bytes_ptr)
        break;
      CFArrayAppendValue(Mutable, 0);
      if (v8 == ++v9)
        goto LABEL_12;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (Mutable)
    CFRelease(Mutable);
}

void remoteXPCItem_TimebaseSynchronizationUpdate(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 isSyncItem;
  const void *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  CMTime time2;
  __int128 v25;
  __int128 v26;
  _OWORD v27[4];
  __int128 v28;
  uint64_t v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v29 = 0;
  v28 = 0u;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v25 = 0u;
  v7 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (v7)
    v8 = CMBaseObjectGetDerivedStorage();
  else
    v8 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  if (v7 && !*(_BYTE *)(DerivedStorage + 9))
  {
    LODWORD(v25) = *(_DWORD *)a2;
    if ((_DWORD)v25 == 120)
    {
      v9 = *(_DWORD *)(a2 + 4);
      DWORD1(v25) = v9;
      *((_QWORD *)&v25 + 1) = *(_QWORD *)(a2 + 8);
      v26 = *(_OWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 32);
      *(_OWORD *)((char *)v27 + 8) = *(_OWORD *)(a2 + 40);
      v11 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)&v27[2] = *(_QWORD *)(a2 + 64);
      *((_QWORD *)&v27[3] + 1) = *(_QWORD *)(a2 + 88);
      *(_OWORD *)((char *)&v27[2] + 8) = *(_OWORD *)(a2 + 72);
      v29 = *(_QWORD *)(a2 + 112);
      v28 = *(_OWORD *)(a2 + 96);
      v12 = *(_DWORD *)(DerivedStorage + 68) & 0x1D;
      v13 = (_OWORD *)(DerivedStorage + 56);
      *(_QWORD *)&v27[0] = v10;
      *((_QWORD *)&v27[1] + 1) = v11;
      if (v12 != 1
        || (v18 = *(_OWORD *)(a2 + 40),
            *(_QWORD *)&v19 = *(_QWORD *)(a2 + 56),
            *(_OWORD *)&time2.value = *v13,
            time2.epoch = *(_QWORD *)(DerivedStorage + 72),
            (CMTimeCompare((CMTime *)&v18, &time2) & 0x80000000) == 0))
      {
        v14 = *((_QWORD *)&v27[1] + 1);
        *v13 = *(_OWORD *)((char *)v27 + 8);
        *(_QWORD *)(DerivedStorage + 72) = v14;
        v15 = *(_QWORD *)(DerivedStorage + 32);
        if (v15)
          FigTimebaseSynchronizeToMoment2(v15, *(_QWORD *)(DerivedStorage + 48), &v25);
        MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
        MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 88));
        isSyncItem = remoteXPCItem_isSyncItem(a1);
        MEMORY[0x19402EF04](*(_QWORD *)(v8 + 88));
        MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 144));
        v17 = *(const void **)(DerivedStorage + 152);
        if (v17 && isSyncItem)
        {
          if (*(_BYTE *)(DerivedStorage + 259))
          {
            DWORD1(v25) |= 3u;
            *(_BYTE *)(DerivedStorage + 259) = 0;
          }
          MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 144));
          *((_QWORD *)&v18 + 1) = *((_QWORD *)&v25 + 1);
          v19 = v26;
          v21 = *(_OWORD *)((char *)v27 + 8);
          LODWORD(v18) = 72;
          DWORD1(v18) = DWORD1(v25);
          v20 = *(_QWORD *)&v27[0];
          v22 = *((_QWORD *)&v27[1] + 1);
          v23 = *(_QWORD *)&v27[2];
          FigLayerSynchronizerSynchronizeToMomentWithDeferredTransaction(v17, (uint64_t)&v18, a3, (uint64_t)"remoteXPCItem_TimebaseSynchronizationUpdate", 0);
        }
        else
        {
          MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 144));
        }
        if (!*(_BYTE *)(DerivedStorage + 9) && (BYTE4(v25) & 2) != 0)
          fpr_deferPostNotificationToNotificationQueue(a1, CFSTR("TimeJumped"), 0);
        goto LABEL_25;
      }
      if ((v9 & 2) != 0)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
      }
    }
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
LABEL_25:
    CFRelease(v7);
    return;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  if (v7)
    goto LABEL_25;
}

void __fpr_deferPostNotificationToNotificationQueue_block_invoke(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    CFRelease(v4);
}

uint64_t remoteXPCPlayer_displayingClosedCaptionsChanged(uint64_t a1, const void *a2)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 120));
    remoteXPCPlayer_updateClosedCaptionHostLayerArray(a2);
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t remoteXPCPlayer_Invalidate(uint64_t a1)
{
  void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t FigBaseObject;
  _QWORD *v7;
  void (*v8)(uint64_t);
  const void *v9;
  const __CFAllocator *v10;
  const __CFSet *Copy;
  const __CFSet *v12;
  const void *v13;
  const __CFArray *v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  void *ValueAtIndex;
  void *v19;
  CFTypeRef cf[2];

  v2 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  cf[1] = 0;
  if (*(_BYTE *)(DerivedStorage + 9))
  {
    v5 = 0;
    goto LABEL_29;
  }
  v4 = DerivedStorage;
  FigStopMonitoringMediaServicesProcessDeath();
  v5 = FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(v4 + 8) && !*(_BYTE *)(v4 + 264))
  {
    v5 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v5)
      v5 = FigXPCRemoteClientSendAsyncMessage();
  }
  FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)cf);
  *(_BYTE *)(v4 + 9) = 1;
  *(_QWORD *)v4 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterRemoveListener();
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v7 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
  if (*v7 >= 2uLL)
  {
    v8 = (void (*)(uint64_t))v7[8];
    if (v8)
      v8(FigBaseObject);
  }
  v9 = *(const void **)(v4 + 16);
  if (v9)
  {
    v10 = CFGetAllocator(v9);
    Copy = CFSetCreateCopy(v10, *(CFSetRef *)(v4 + 16));
    if (Copy)
    {
      v12 = Copy;
      CFSetApplyFunction(Copy, (CFSetApplierFunction)remoteXPCPlayer_InvalidateItem, 0);
      CFRelease(v12);
    }
  }
  v13 = *(const void **)(v4 + 160);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(v4 + 160) = 0;
  }
  if (*(_QWORD *)(v4 + 128))
  {
    remoteXPCPlayer_cancelAndClearNextItemTransitionTimer();
    dispatch_sync(*(dispatch_queue_t *)(v4 + 128), &__block_literal_global_18);
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 120));
  remoteXPCPlayer_removeClosedCaptionHostLayerArray(a1, cf[0]);
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 120));
  remoteXPCPlayer_removeAirPlayVideoHostLayer();
  v14 = *(const __CFArray **)(v4 + 56);
  if (v14)
  {
    Count = CFArrayGetCount(v14);
    if (Count > 0)
    {
      v16 = Count;
      for (i = 0; i != v16; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 56), i);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        objc_msgSend(ValueAtIndex, "notificationBarrier");
      }
      goto LABEL_22;
    }
  }
  if (*(_QWORD *)(v4 + 48))
  {
LABEL_22:
    FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(cf[0], *(CFArrayRef *)(v4 + 56), 1, (uint64_t)"remoteXPCPlayer_Invalidate");
    FigReadWriteLockLockForWrite();
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(_QWORD *)(v4 + 56), (uint64_t)"remoteXPCPlayer_Invalidate");
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(_QWORD *)(v4 + 48), (uint64_t)"remoteXPCPlayer_Invalidate");
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = 0;
    FigReadWriteLockUnlockForWrite();
  }
  FigReadWriteLockLockForWrite();
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(_QWORD *)(v4 + 104), (uint64_t)"remoteXPCPlayer_Invalidate");
  *(_QWORD *)(v4 + 104) = 0;
  FigReadWriteLockUnlockForWrite();
  if (!*(_BYTE *)(v4 + 240))
    remoteXPCPlayer_removeAllSpatialTrackingLayers();
  v19 = *(void **)(v4 + 144);
  if (v19)
  {
    objc_msgSend(v19, "removeObserversOnCADisplays");
    objc_msgSend(*(id *)(v4 + 144), "removeReferenceToPlayer");

    *(_QWORD *)(v4 + 144) = 0;
  }
  FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(_QWORD *)(v4 + 112), (uint64_t)"remoteXPCPlayer_Invalidate");
  *(_QWORD *)(v4 + 112) = 0;
  FigDeferredTransactionCommit((uint64_t)cf[0]);
  if (cf[0])
    CFRelease(cf[0]);
LABEL_29:
  FigXPCRelease();
  objc_autoreleasePoolPop(v2);
  return v5;
}

void remoteXPCPlayer_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  remoteXPCPlayer_Invalidate(a1);
  v3 = (const void *)DerivedStorage[7];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[7] = 0;
  }
  v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  v5 = (const void *)DerivedStorage[8];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[8] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[15] = 0;
  v6 = (const void *)DerivedStorage[2];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[2] = 0;
  }
  v7 = (const void *)DerivedStorage[3];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[3] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[4] = 0;
  v8 = DerivedStorage[5];
  if (v8)
    dispatch_release(v8);
  DerivedStorage[5] = 0;
  FigReadWriteLockDestroy();
  DerivedStorage[10] = 0;
  v9 = (const void *)DerivedStorage[9];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[9] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[11] = 0;
  v10 = DerivedStorage[16];
  if (v10)
    dispatch_release(v10);
  DerivedStorage[16] = 0;
  FigSimpleMutexDestroy();
  DerivedStorage[27] = 0;
  v11 = (const void *)DerivedStorage[26];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[26] = 0;
  }
  v12 = (const void *)DerivedStorage[22];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[22] = 0;
  }
  v13 = (const void *)DerivedStorage[23];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[23] = 0;
  }
  v14 = (const void *)DerivedStorage[32];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[32] = 0;
  }
}

__CFString *remoteXPCPlayer_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  const char *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 9))
    v6 = " INVALIDATED";
  else
    v6 = "";
  if (*(_BYTE *)(DerivedStorage + 8))
    v7 = " SERVER DIED";
  else
    v7 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlayer(XPC) %p retainCount: %ld ObjectID: %016llx%s%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6, v7);
  return Mutable;
}

uint64_t remoteXPCPlayer_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CVPixelBufferRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t ObjectID;
  const void **v11;
  int v12;
  void *SInt32;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int int64;
  const void *HostTimeClock;
  void *v19;
  uint64_t UInt64;
  uint64_t v22;
  xpc_object_t xdict;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  if (!a2)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_31;
  }
  if (!a4)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_37;
  }
  v9 = DerivedStorage;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v22);
  if ((_DWORD)ObjectID)
  {
LABEL_37:
    v14 = ObjectID;
    goto LABEL_31;
  }
  if (CFEqual(a2, CFSTR("ApplyVideoTrackMatrix")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *(unsigned __int8 *)(v9 + 152);
LABEL_6:
    if (!v12)
      v11 = (const void **)MEMORY[0x1E0C9AE40];
    SInt32 = (void *)*v11;
LABEL_9:
    SInt32 = (void *)CFRetain(SInt32);
LABEL_10:
    v14 = 0;
    *a4 = (CVPixelBufferRef)SInt32;
    goto LABEL_31;
  }
  if (CFEqual(CFSTR("MasterClock"), a2))
  {
    v15 = CMBaseObjectGetDerivedStorage();
    v25 = 0;
    cf = 0;
    xdict = 0;
    v24 = 0;
    if (*(_BYTE *)(v15 + 168))
    {
      v14 = 0;
      goto LABEL_26;
    }
    v16 = remoteXPCPlayer_GetObjectID(a1, &v25);
    if (!(_DWORD)v16)
    {
      v16 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v16)
      {
        v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)v16)
        {
          int64 = xpc_dictionary_get_int64(xdict, "MasterClockType");
          if (int64 == 1)
          {
            HostTimeClock = CMClockGetHostTimeClock();
            if (HostTimeClock)
              HostTimeClock = CFRetain(HostTimeClock);
            goto LABEL_25;
          }
          if (int64 != 2)
          {
            HostTimeClock = 0;
            goto LABEL_25;
          }
          xpc_dictionary_get_uint64(xdict, "MasterClockObjectID");
          v16 = FigAudioDeviceClockXPCRemoteRetainCopiedClock();
          if (!(_DWORD)v16)
          {
            HostTimeClock = cf;
LABEL_25:
            v14 = 0;
            *(_BYTE *)(v15 + 168) = 1;
            *(_QWORD *)(v15 + 160) = HostTimeClock;
            cf = 0;
LABEL_26:
            v19 = *(void **)(v15 + 160);
            if (v19)
              v19 = (void *)CFRetain(v19);
            *a4 = (CVPixelBufferRef)v19;
            FigXPCRelease();
            FigXPCRelease();
            if (cf)
              CFRelease(cf);
            FigXPCRemoteClientKillServerOnTimeout();
            goto LABEL_31;
          }
        }
      }
    }
    v14 = v16;
    goto LABEL_26;
  }
  if (CFEqual(a2, CFSTR("DisallowVideoLayerDisplayCompositing")))
  {
    v11 = (const void **)MEMORY[0x1E0C9AE50];
    v12 = *(unsigned __int8 *)(v9 + 155);
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("Status")))
  {
    if (*(_BYTE *)(v9 + 8))
    {
      SInt32 = (void *)FigCFNumberCreateSInt32();
      goto LABEL_10;
    }
    goto LABEL_46;
  }
  if (CFEqual(CFSTR("CurrentlyDisplayedCVPixelBuffer"), a2))
  {
    ObjectID = remoteXPCPlayer_copyCurrentlyDisplayedCVPixelBuffer(a1, a3, a4);
    goto LABEL_37;
  }
  if (CFEqual(a2, CFSTR("STSLabel")))
  {
    if (remoteXPCPlayer_participatesInSTS_onceToken != -1)
      dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_22);
    if (remoteXPCPlayer_participatesInSTS_sParticipates)
    {
      if (!*(_BYTE *)(v9 + 240))
      {
        SInt32 = 0;
        goto LABEL_10;
      }
      SInt32 = *(void **)(v9 + 232);
      if (!SInt32)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  CFEqual(a2, CFSTR("PlaybackCoordinator"));
LABEL_46:
  ObjectID = FigXPCSendStdCopyPropertyMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_37;
  if (CFEqual(a2, CFSTR("PlaybackCoordinator")))
  {
    cf = 0;
    UInt64 = FigCFNumberGetUInt64();
    v14 = FigPlaybackCoordinatorRemoteRetainCopiedPlaybackCoordinator(UInt64, &cf);
    if (!(_DWORD)v14)
      *a4 = (CVPixelBufferRef)cf;
  }
  else
  {
    v14 = 0;
    *a4 = 0;
  }
LABEL_31:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

uint64_t remoteXPCPlayer_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v7;
  char v9;
  CFTypeRef v10;
  CFTypeRef cf;
  uint64_t v12;

  cf = 0;
  v12 = 0;
  v10 = 0;
  v9 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_6;
  }
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  ObjectID = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)remoteXPCPlayer_handleSetProperty, &v9, &cf, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  if (!v9)
  {
    ObjectID = FigXPCSendStdSetPropertyMessage();
LABEL_6:
    v7 = ObjectID;
    goto LABEL_7;
  }
  v7 = 0;
LABEL_7:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCPlayer_InvalidateItem(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  result = FigPlaybackItemGetFigBaseObject(a1);
  if (result)
  {
    v2 = result;
    result = CMBaseObjectGetVTable();
    v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
    if (v3)
      return v3(v2);
  }
  return result;
}

void remoteXPCPlayer_removeClosedCaptionHostLayerArray(uint64_t a1, CFTypeRef a2)
{
  void *v3;
  uint64_t DerivedStorage;
  const __CFArray *v5;
  int v6;
  CFTypeRef cf;

  v3 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v5 = *(const __CFArray **)(DerivedStorage + 112);
  if (v5 && CFArrayGetCount(v5) >= 1)
  {
    if (a2 || (v6 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf), a2 = cf, !v6))
    {
      FPSupport_AppendDeferredTransactionChangeForRemovingEachLayerInArrayFromItsSuperlayer(a2, *(_QWORD *)(DerivedStorage + 112), (uint64_t)"remoteXPCPlayer_removeClosedCaptionHostLayerArray");
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 112));
      a2 = cf;
    }
  }
  else
  {
    a2 = 0;
  }
  FigDeferredTransactionCommit((uint64_t)a2);
  if (cf)
    CFRelease(cf);
  objc_autoreleasePoolPop(v3);
}

void remoteXPCPlayer_layerBeingServicedStatusChanged(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  remoteXPCPlayer_updateVideoLayersBeingServicedAndDisplayList(a2, a4);
}

void remoteXPCPlayer_removeAllSpatialTrackingLayers()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (remoteXPCPlayer_participatesInSTS_onceToken != -1)
    dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_22);
  if (remoteXPCPlayer_participatesInSTS_sParticipates)
  {
    FigCFSetApplyBlock();
    v1 = *(const void **)(DerivedStorage + 248);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 248) = 0;
    }
  }
}

void remoteXPCPlayer_updateVideoLayersBeingServicedAndDisplayList(uint64_t a1, const void *a2)
{
  void *v3;
  uint64_t DerivedStorage;
  const __CFArray *v5;
  uint64_t Count;
  void *v7;
  CFIndex i;
  uint64_t v9;
  void *v10;
  CFRange v11;

  v3 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  v5 = *(const __CFArray **)(DerivedStorage + 56);
  if (v5)
  {
    Count = CFArrayGetCount(v5);
    if (!a2)
      goto LABEL_6;
LABEL_5:
    v11.location = 0;
    v11.length = Count;
    if (CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 56), v11, a2) == -1)
      goto LABEL_13;
    goto LABEL_6;
  }
  Count = 0;
  if (a2)
    goto LABEL_5;
LABEL_6:
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v9 = objc_msgSend((id)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), i), "layerDisplayName");
      if (v9)
        objc_msgSend(v7, "addObject:", v9);
    }
  }
  v10 = *(void **)(DerivedStorage + 144);
  if (v10)
    objc_msgSend(v10, "setBaseDisplayList:", objc_msgSend(v7, "allObjects"));
LABEL_13:
  FigReadWriteLockUnlockForRead();
  objc_autoreleasePoolPop(v3);
}

uint64_t __remoteXPCPlayer_removeAllSpatialTrackingLayers_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "setSTSLabel:", 0);
}

uint64_t __remoteXPCPlayer_participatesInSTS_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  remoteXPCPlayer_participatesInSTS_sParticipates = result;
  return result;
}

uint64_t remoteXPCPlayer_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9) || *(_BYTE *)(DerivedStorage + 264))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t remoteXPCPlayer_copyCurrentlyDisplayedCVPixelBuffer(uint64_t a1, const __CFAllocator *a2, CVPixelBufferRef *a3)
{
  uint64_t ObjectID;
  xpc_object_t value;
  __IOSurface *v7;
  __IOSurface *v8;
  uint64_t v9;
  uint64_t v11;
  CVPixelBufferRef pixelBufferOut;

  v11 = 0;
  pixelBufferOut = 0;
  if (!a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v9 = ObjectID;
    goto LABEL_11;
  }
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  value = xpc_dictionary_get_value(0, "CurrentlyDisplayedIOSurface");
  if (value && (v7 = IOSurfaceLookupFromXPCObject(value)) != 0)
  {
    v8 = v7;
    v9 = CVPixelBufferCreateWithIOSurface(a2, v7, 0, &pixelBufferOut);
    if ((_DWORD)v9)
    {
      if (pixelBufferOut)
        CFRelease(pixelBufferOut);
    }
    else
    {
      *a3 = pixelBufferOut;
      pixelBufferOut = 0;
    }
    CFRelease(v8);
  }
  else
  {
    v9 = 0;
    *a3 = 0;
    pixelBufferOut = 0;
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCPlayer_handleSetProperty(const void *a1, uint64_t a2, const void *a3, void *a4, _BYTE *a5, CFTypeRef *a6, _QWORD *a7)
{
  void *v13;
  uint64_t DerivedStorage;
  uint64_t v15;
  CFArrayRef v16;
  uint64_t updated;
  CFArrayRef v18;
  CFTypeID v19;
  uint64_t v20;
  uint64_t v21;
  const __CFArray *v22;
  CFTypeID v24;
  uint64_t v25;
  CFTypeRef v26;
  uint64_t ObjectID;
  CFTypeID v28;
  xpc_object_t v29;
  CFIndex Count;
  CFIndex v31;
  CFIndex v32;
  const void *ValueAtIndex;
  uint64_t v34;
  CFTypeID v35;
  uint64_t v36;
  CFTypeID v37;
  int v38;
  const void *v39;
  CFTypeID v40;
  CFTypeID v41;
  CFTypeRef v42;
  CFTypeID v43;
  CFTypeID v44;
  uint64_t v45;
  CFTypeID v46;
  const void *v47;
  const void *v48;
  _QWORD block[6];
  void *values;
  uint64_t value;
  xpc_object_t xdict;
  CFTypeRef cf[14];

  cf[12] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  values = a4;
  v13 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    goto LABEL_98;
  v15 = DerivedStorage;
  if (CFEqual(CFSTR("VideoLayer"), a3))
  {
    v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, a4 != 0, MEMORY[0x1E0C9B378]);
    updated = remoteXPCPlayer_setClientVideoLayerArray(a1, v16);
    if (!v16)
    {
LABEL_17:
      *a5 = 1;
      goto LABEL_18;
    }
    v18 = v16;
LABEL_16:
    CFRelease(v18);
    goto LABEL_17;
  }
  if (CFEqual(CFSTR("ClosedCaptionLayerArray"), a3))
  {
    if (!a4 || (v19 = CFGetTypeID(a4), v19 == CFArrayGetTypeID()))
    {
      cf[0] = 0;
      v20 = CMBaseObjectGetDerivedStorage();
      v21 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)cf);
      if ((_DWORD)v21)
      {
        updated = v21;
      }
      else
      {
        FigReadWriteLockLockForWrite();
        if (FigCFEqual())
        {
          FigReadWriteLockUnlockForWrite();
          updated = 0;
        }
        else
        {
          v22 = *(const __CFArray **)(v20 + 104);
          if (a4)
            v26 = CFRetain(a4);
          else
            v26 = 0;
          *(_QWORD *)(v20 + 104) = v26;
          FigReadWriteLockUnlockForWrite();
          MEMORY[0x19402EEEC](*(_QWORD *)(v20 + 120));
          updated = remoteXPCPlayer_updateClosedCaptionHostLayerArray(a1);
          MEMORY[0x19402EF04](*(_QWORD *)(v20 + 120));
          if (!v22 || CFArrayGetCount(v22) < 1)
          {
LABEL_12:
            FigDeferredTransactionCommit((uint64_t)cf[0]);
            if (cf[0])
              CFRelease(cf[0]);
            if (!v22)
              goto LABEL_17;
            v18 = v22;
            goto LABEL_16;
          }
          FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], (uint64_t)v22, (uint64_t)"remoteXPCPlayer_setClientClosedCaptionLayerArray");
        }
      }
      v22 = 0;
      goto LABEL_12;
    }
LABEL_98:
    updated = FigSignalErrorAt();
    goto LABEL_18;
  }
  if (CFEqual(CFSTR("VideoLayerArray"), a3))
  {
    if (a4)
    {
      v24 = CFGetTypeID(a4);
      if (v24 != CFArrayGetTypeID())
        goto LABEL_98;
    }
    v25 = remoteXPCPlayer_setClientVideoLayerArray(a1, a4);
LABEL_23:
    updated = v25;
    goto LABEL_17;
  }
  if (CFEqual(CFSTR("VideoTargetArray"), a3))
  {
    xdict = 0;
    cf[0] = 0;
    ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, cf);
    if (!(_DWORD)ObjectID)
    {
      if (a4)
      {
        v28 = CFGetTypeID(a4);
        if (v28 == CFArrayGetTypeID())
        {
          v29 = xpc_array_create(0, 0);
          if (v29)
          {
            Count = CFArrayGetCount((CFArrayRef)a4);
            if (Count < 1)
            {
LABEL_38:
              v36 = FigXPCCreateBasicMessage();
              if (!(_DWORD)v36)
              {
                xpc_dictionary_set_value(xdict, "VideoTargetIDArray", v29);
                v36 = FigXPCRemoteClientSendSyncMessage();
              }
              goto LABEL_40;
            }
            v31 = Count;
            v32 = 0;
            while (1)
            {
              value = 0;
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, v32);
              if (!ValueAtIndex)
                break;
              v34 = (uint64_t)ValueAtIndex;
              v35 = CFGetTypeID(ValueAtIndex);
              if (v35 != FigVideoTargetGetTypeID())
                break;
              v36 = FigVideoTargetXPCRemoteGetObjectID(v34, &value);
              if ((_DWORD)v36)
                goto LABEL_40;
              if (!value)
                break;
              xpc_array_set_uint64(v29, 0xFFFFFFFFFFFFFFFFLL, value);
              if (v31 == ++v32)
                goto LABEL_38;
            }
          }
          v36 = FigSignalErrorAt();
LABEL_40:
          updated = v36;
LABEL_41:
          FigXPCRelease();
          FigXPCRelease();
          FigXPCRemoteClientKillServerOnTimeout();
          goto LABEL_17;
        }
      }
      ObjectID = FigSignalErrorAt();
    }
    updated = ObjectID;
    goto LABEL_41;
  }
  if (CFEqual(CFSTR("VisualContext"), a3))
  {
    updated = 4294954436;
    goto LABEL_17;
  }
  if (CFEqual(a3, CFSTR("ApplyVideoTrackMatrix")))
  {
    if (!a4)
      goto LABEL_98;
    v37 = CFGetTypeID(a4);
    if (v37 != CFBooleanGetTypeID())
      goto LABEL_98;
    v38 = CFBooleanGetValue((CFBooleanRef)a4);
    if (v38 != *(unsigned __int8 *)(v15 + 152))
    {
      *(_BYTE *)(v15 + 152) = v38;
      MEMORY[0x19402EEEC](*(_QWORD *)(v15 + 88));
      v39 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)a1);
      MEMORY[0x19402EF04](*(_QWORD *)(v15 + 88));
      if (v39)
      {
        updated = remoteXPCPlayer_connectVideoLayerToPlaybackItem(a1, v39, 1, 1, 0, 0, 0, 0, 0);
        CFRelease(v39);
        goto LABEL_69;
      }
    }
LABEL_68:
    updated = 0;
    goto LABEL_69;
  }
  if (CFEqual(a3, CFSTR("SetVideoLayerBoundsAutomatically")))
  {
    if (a4)
    {
      v40 = CFGetTypeID(a4);
      if (v40 == CFBooleanGetTypeID())
      {
        updated = 0;
        *(_BYTE *)(v15 + 153) = CFBooleanGetValue((CFBooleanRef)a4);
        goto LABEL_17;
      }
    }
    goto LABEL_98;
  }
  if (CFEqual(a3, CFSTR("DisallowVideoLayerDisplayCompositing")))
  {
    if (a4)
    {
      v41 = CFGetTypeID(a4);
      if (v41 == CFBooleanGetTypeID())
      {
        updated = 0;
        *(_BYTE *)(v15 + 155) = CFBooleanGetValue((CFBooleanRef)a4);
        goto LABEL_17;
      }
    }
    goto LABEL_98;
  }
  if (CFEqual(CFSTR("NetworkCacheURL"), a3))
  {
    v25 = remoteXPCPlayer_setNetworkCacheURL((uint64_t)a1, a4);
    goto LABEL_23;
  }
  if (CFEqual(CFSTR("UseApplicationAudioSession"), a3))
  {
    AudioSessionCreateForPID();
    goto LABEL_68;
  }
  if (CFEqual(CFSTR("MasterClock"), a3))
  {
    if (a4)
    {
      v43 = CFGetTypeID(a4);
      if (v43 != CMClockGetTypeID())
        goto LABEL_98;
    }
    v25 = remoteXPCPlayer_setMasterClock((uint64_t)a1, (CMClockRef)a4);
    goto LABEL_23;
  }
  if (CFEqual(CFSTR("DisplayList"), a3))
  {
    updated = 4294954509;
    goto LABEL_17;
  }
  if (CFEqual(CFSTR("UsePerPlayerRemoteNotificationQueue"), a3))
  {
    if (a4)
    {
      v44 = CFGetTypeID(a4);
      if (v44 != CFBooleanGetTypeID())
        goto LABEL_98;
    }
    if ((void *)*MEMORY[0x1E0C9AE50] == a4)
    {
      snprintf((char *)cf, 0x60uLL, "com.apple.coremedia.playerremote.notifications.<%p>", a1);
      v45 = FigDispatchQueueCreateWithPriority();
    }
    else
    {
      v45 = 0;
    }
    if (a1)
      CFRetain(a1);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __remoteXPCPlayer_handleSetProperty_block_invoke;
    block[3] = &unk_1E2F8B008;
    block[4] = v45;
    block[5] = a1;
    dispatch_async((dispatch_queue_t)gRemotePlayerNotificationQueue, block);
LABEL_103:
    updated = 0;
    goto LABEL_17;
  }
  if (!CFEqual(CFSTR("STSLabel"), a3))
    goto LABEL_104;
  if (remoteXPCPlayer_participatesInSTS_onceToken != -1)
    dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_22);
  if (remoteXPCPlayer_participatesInSTS_sParticipates)
  {
    if (!a4)
    {
      if (*(_BYTE *)(v15 + 240))
      {
        v48 = *(const void **)(v15 + 232);
        if (v48)
        {
          CFRelease(v48);
          *(_QWORD *)(v15 + 232) = 0;
        }
        *(_BYTE *)(v15 + 240) = 0;
        remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary(a1);
      }
      goto LABEL_103;
    }
    v46 = CFGetTypeID(a4);
    if (v46 != CFStringGetTypeID())
      goto LABEL_98;
    remoteXPCPlayer_removeAllSpatialTrackingLayers();
    v47 = *(const void **)(v15 + 232);
    *(_QWORD *)(v15 + 232) = a4;
    CFRetain(a4);
    if (v47)
      CFRelease(v47);
    updated = 0;
    *(_BYTE *)(v15 + 240) = 1;
  }
  else
  {
LABEL_104:
    updated = 0;
    if (CFEqual(CFSTR("AsynchronousControlQueueHolder"), a3))
      goto LABEL_17;
  }
LABEL_69:
  *a5 = 0;
  *a6 = CFRetain(a3);
  if (a4)
    v42 = CFRetain(a4);
  else
    v42 = 0;
  *a7 = v42;
LABEL_18:
  objc_autoreleasePoolPop(v13);
  return updated;
}

uint64_t remoteXPCPlayer_setClientVideoLayerArray(const void *a1, const void *a2)
{
  void *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *v7;
  const __CFAllocator *v8;
  const __CFArray *MutableCopy;
  const void *v10;
  const __CFArray *v11;
  const void *v12;
  const void *v13;
  const __CFArray *v14;
  const void *v15;
  CFIndex v16;
  void *v17;
  CFIndex i;
  void *ValueAtIndex;
  const void *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  CFMutableArrayRef v25;
  const __CFArray *v26;
  CFIndex v27;
  BOOL v28;
  int v29;
  const void *v30;
  const void *v31;
  CFIndex FirstIndexOfValue;
  const void *v33;
  void *v34;
  id v35;
  FigVideoLayer *v36;
  FigVideoLayer *v37;
  const void *v38;
  const void *v39;
  CFIndex v40;
  CFNumberRef v41;
  uint64_t FigBaseObject;
  uint64_t (*v43)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v44;
  const void *v46;
  const void *v47;
  const void *v48;
  CFIndex j;
  void *v50;
  CFIndex v51;
  const __CFAllocator *allocator;
  const __CFArray *v53;
  const void *v54;
  const __CFArray *theArray;
  CFIndex Count;
  const __CFArray *v57;
  const __CFArray *v58;
  __CFArray *Mutable;
  int v60;
  char v61;
  CFTypeRef cf;
  uint64_t valuePtr;
  CFRange v64;

  v4 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = -1;
  cf = 0;
  v61 = 0;
  v60 = 2;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], (uint64_t *)&cf);
  if ((_DWORD)v6)
  {
    v44 = v6;
    v11 = 0;
    v14 = 0;
    v25 = 0;
    Mutable = 0;
    v53 = 0;
    v54 = 0;
    MutableCopy = 0;
    goto LABEL_81;
  }
  FigReadWriteLockLockForRead();
  v7 = *(const __CFArray **)(DerivedStorage + 56);
  if (v7)
  {
    v8 = allocator;
    MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v7);
  }
  else
  {
    MutableCopy = 0;
    v8 = allocator;
  }
  v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
    v11 = (const __CFArray *)CFRetain(v10);
  else
    v11 = 0;
  v12 = *(const void **)(DerivedStorage + 56);
  if (v12)
    v53 = (const __CFArray *)CFRetain(v12);
  else
    v53 = 0;
  v13 = *(const void **)(DerivedStorage + 64);
  if (v13)
    v14 = (const __CFArray *)CFRetain(v13);
  else
    v14 = 0;
  FigReadWriteLockUnlockForRead();
  if (FigCFEqual())
  {
    v25 = 0;
    Mutable = 0;
    v54 = 0;
    v44 = 0;
    goto LABEL_81;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v15 = (const void *)remoteXPCPlayer_copySyncItem((uint64_t)a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  if (v11)
  {
    Count = CFArrayGetCount(v11);
    if (v14)
    {
LABEL_17:
      v51 = CFArrayGetCount(v14);
      goto LABEL_20;
    }
  }
  else
  {
    Count = 0;
    if (v14)
      goto LABEL_17;
  }
  v51 = 0;
LABEL_20:
  v54 = v15;
  if (MutableCopy)
  {
    v16 = CFArrayGetCount(MutableCopy);
    valuePtr = v16;
    Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    if (v16 >= 1)
    {
      v57 = v11;
      v17 = v4;
      for (i = 0; i < v16; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(MutableCopy, i);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        objc_msgSend(ValueAtIndex, "notificationBarrier");
      }
      v4 = v17;
      v11 = v57;
      v8 = allocator;
    }
  }
  else
  {
    valuePtr = 0;
    Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
  }
  FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(cf, v53, 1, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FigReadWriteLockLockForWrite();
  v20 = *(const void **)(DerivedStorage + 56);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v21 = *(const void **)(DerivedStorage + 48);
  if (v21)
  {
    CFRelease(v21);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v22 = *(const void **)(DerivedStorage + 64);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  FigReadWriteLockUnlockForWrite();
  if (v15)
    remoteXPCItem_handleFirstFrameNotificationLatch(v15, 4, cf);
  if (!a2)
  {
    valuePtr = 0;
LABEL_56:
    v25 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    FigReadWriteLockLockForWrite();
    v38 = *(const void **)(DerivedStorage + 48);
    *(_QWORD *)(DerivedStorage + 48) = a2;
    if (a2)
      CFRetain(a2);
    if (v38)
      CFRelease(v38);
    v39 = *(const void **)(DerivedStorage + 56);
    *(_QWORD *)(DerivedStorage + 56) = v25;
    if (v25)
      CFRetain(v25);
    if (v39)
      CFRelease(v39);
    FigReadWriteLockUnlockForWrite();
    v40 = 0;
    if (!v25)
      goto LABEL_66;
    goto LABEL_65;
  }
  v23 = CFArrayGetCount((CFArrayRef)a2);
  valuePtr = 0;
  if (v23 < 1)
    goto LABEL_56;
  v24 = v23;
  theArray = v14;
  v50 = v4;
  v25 = CFArrayCreateMutable(v8, v23, MEMORY[0x1E0C9B378]);
  v26 = v11;
  v27 = 0;
  v58 = v26;
  if (v26)
    v28 = Count == v51;
  else
    v28 = 0;
  v29 = v28;
  v30 = (const void *)*MEMORY[0x1E0C9B0D0];
  while (1)
  {
    v31 = CFArrayGetValueAtIndex((CFArrayRef)a2, v27);
    if (v29)
    {
      v64.length = Count;
      v64.location = 0;
      FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v58, v64, v31);
      v33 = v30;
      if (FirstIndexOfValue != -1)
        v33 = CFArrayGetValueAtIndex(theArray, FirstIndexOfValue);
      CFArrayAppendValue(Mutable, v33);
    }
    if (!MutableCopy || CFArrayGetCount(MutableCopy) < 1)
      break;
    v34 = (void *)CFArrayGetValueAtIndex(MutableCopy, 0);
    v35 = v34;
    CFArrayRemoveValueAtIndex(MutableCopy, 0);
LABEL_53:
    CFArrayAppendValue(v25, v34);
    if (v24 == ++v27)
      goto LABEL_92;
  }
  v36 = [FigVideoLayer alloc];
  v37 = -[FigVideoLayer initWithDeferredTransaction:](v36, "initWithDeferredTransaction:", cf);
  if (v37)
  {
    v34 = v37;
    if (*(_BYTE *)(DerivedStorage + 155))
      FBLSupportAppendDeferredTransactionChangeToSetAllowsDisplayCompositing(cf, v37, 0, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
    goto LABEL_53;
  }
  if (v24 != v27)
  {
    v44 = 4294954434;
    v4 = v50;
    v14 = theArray;
    v11 = v58;
    goto LABEL_81;
  }
LABEL_92:
  v40 = CFArrayGetCount(v25);
  valuePtr = v40;
  FigReadWriteLockLockForWrite();
  v46 = *(const void **)(DerivedStorage + 64);
  *(_QWORD *)(DerivedStorage + 64) = Mutable;
  if (Mutable)
    CFRetain(Mutable);
  if (v46)
    CFRelease(v46);
  v47 = *(const void **)(DerivedStorage + 48);
  *(_QWORD *)(DerivedStorage + 48) = a2;
  CFRetain(a2);
  if (v47)
    CFRelease(v47);
  v48 = *(const void **)(DerivedStorage + 56);
  *(_QWORD *)(DerivedStorage + 56) = v25;
  if (v25)
    CFRetain(v25);
  if (v48)
    CFRelease(v48);
  FigReadWriteLockUnlockForWrite();
  if (v40 >= 1)
  {
    for (j = 0; j < v40; ++j)
    {
      CFArrayGetValueAtIndex(v25, j);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
  FPSupport_AppendDeferredTransactionChangeForAttachingFigVideoLayersToClientLayers(cf, (const __CFArray *)a2, v25, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeForSettingEdgeAntialiasingMaskOnLayers(cf, 0, v25, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  remoteXPCPlayer_updateVideoLayersBeingServicedAndDisplayList((uint64_t)a1, 0);
  v4 = v50;
  v14 = theArray;
  v11 = v58;
  v8 = allocator;
  if (v25)
LABEL_65:
    CFRelease(v25);
LABEL_66:
  if (!*(_BYTE *)(DerivedStorage + 240))
    remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary(a1);
  if (v54)
    remoteXPCItem_updateLayerSync((uint64_t)v54, v40 > 0, cf);
  v41 = CFNumberCreate(v8, kCFNumberCFIndexType, &valuePtr);
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v43 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (v43)
  {
    v44 = v43(FigBaseObject, CFSTR("RequiresNumVideoSlots"), v41);
    if (v41)
      goto LABEL_72;
  }
  else
  {
    v44 = 4294954514;
    if (v41)
LABEL_72:
      CFRelease(v41);
  }
  if (!(_DWORD)v44)
  {
    if (v54)
    {
      v44 = remoteXPCPlayer_connectVideoLayerToPlaybackItem(a1, v54, 1, 1, 0, 0, &v61, &v60, cf);
      remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)a1, (uint64_t)v54, 1, cf);
    }
    else
    {
      v44 = 0;
    }
    remoteXPCPlayer_updateAirPlayVideoHostLayer((uint64_t)a1);
  }
  v25 = 0;
LABEL_81:
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)MutableCopy, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)v11, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)v53, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)v25, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FPSupport_AppendDeferredTransactionChangeToRelease(cf, (uint64_t)v54, (uint64_t)"remoteXPCPlayer_setClientVideoLayerArray");
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v14)
    CFRelease(v14);
  if (v61 && v54)
    remoteXPCItem_handleFirstFrameNotificationLatch(v54, v60, 0);
  objc_autoreleasePoolPop(v4);
  return v44;
}

uint64_t remoteXPCPlayer_setNetworkCacheURL(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFTypeID v5;
  uint64_t ObjectID;
  const void *v7;
  CFTypeRef v8;
  uint64_t v9;
  _QWORD v11[2];
  CFTypeRef cf;

  v11[1] = 0;
  cf = 0;
  v11[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = CFGetTypeID(a2);
    if (v5 != CFURLGetTypeID())
    {
      ObjectID = FigSignalErrorAt();
LABEL_19:
      v9 = ObjectID;
      goto LABEL_15;
    }
    FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration();
  }
  ObjectID = remoteXPCPlayer_GetObjectID(a1, v11);
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  ObjectID = FigXPCMessageSetCFURL();
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  if (cf)
  {
    ObjectID = FigXPCMessageSetSandboxRegistration();
    if ((_DWORD)ObjectID)
      goto LABEL_19;
  }
  ObjectID = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  v7 = *(const void **)(DerivedStorage + 256);
  v8 = cf;
  *(_QWORD *)(DerivedStorage + 256) = cf;
  if (v8)
    CFRetain(v8);
  if (v7)
    CFRelease(v7);
  v9 = 0;
LABEL_15:
  if (cf)
    CFRelease(cf);
  FigXPCRelease();
  return v9;
}

uint64_t remoteXPCPlayer_setMasterClock(uint64_t a1, CMClockRef a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t ObjectID;
  int64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  CFTypeRef cf;
  uint64_t value;
  xpc_object_t xdict;
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  xdict = 0;
  v15 = 0;
  cf = 0;
  value = 0;
  if (*(CMClockRef *)(DerivedStorage + 160) == a2)
  {
    v10 = 0;
    goto LABEL_24;
  }
  v5 = DerivedStorage;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v15);
  if ((_DWORD)ObjectID)
    goto LABEL_26;
  if (!a2)
  {
    v8 = *(const void **)(v5 + 160);
    if (v8)
    {
      CFRelease(v8);
      v7 = 0;
      *(_QWORD *)(v5 + 160) = 0;
    }
    else
    {
      v7 = 0;
    }
    goto LABEL_16;
  }
  if (CMClockGetHostTimeClock() == a2)
  {
    v7 = 1;
LABEL_13:
    v9 = *(const void **)(v5 + 160);
    *(_QWORD *)(v5 + 160) = a2;
    CFRetain(a2);
    if (v9)
      CFRelease(v9);
LABEL_16:
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "MasterClockType", v7);
      if (value)
        xpc_dictionary_set_uint64(xdict, "MasterClockObjectID", value);
      ObjectID = FigXPCMessageSetCFObject();
      if (!(_DWORD)ObjectID)
      {
        v10 = FigXPCRemoteClientSendSyncMessage();
        if (!(_DWORD)v10)
          *(_BYTE *)(v5 + 168) = 1;
        goto LABEL_22;
      }
    }
    goto LABEL_26;
  }
  if (!CMClockIsAudioSessionClock())
  {
    ObjectID = FigAudioDeviceClockXPCRemoteGetObjectID();
    if (!(_DWORD)ObjectID)
      ObjectID = FigSignalErrorAt();
    goto LABEL_26;
  }
  ObjectID = FigAudioSessionClockCopyClockConfiguration((uint64_t)a2, (CFMutableDictionaryRef *)&cf);
  if (!(_DWORD)ObjectID)
  {
    v7 = 3;
    goto LABEL_13;
  }
LABEL_26:
  v10 = ObjectID;
LABEL_22:
  if (cf)
    CFRelease(cf);
LABEL_24:
  FigXPCRelease();
  return v10;
}

void __remoteXPCPlayer_handleSetProperty_block_invoke(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 40);
  if (v3)
    dispatch_release(v3);
  v4 = *(const void **)(a1 + 40);
  *(_QWORD *)(DerivedStorage + 40) = *(_QWORD *)(a1 + 32);
  if (v4)
    CFRelease(v4);
}

void remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  int v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFStringRef v14;
  CFStringRef v15;
  const void *v16;
  uint64_t v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (remoteXPCPlayer_participatesInSTS_onceToken != -1)
    dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_22);
  if (remoteXPCPlayer_participatesInSTS_sParticipates)
  {
    if (*(_BYTE *)(DerivedStorage + 240))
    {
      FigSignalErrorAt();
      return;
    }
    v3 = *(const void **)(DerivedStorage + 248);
    *(_QWORD *)(DerivedStorage + 248) = 0;
    FigReadWriteLockLockForRead();
    v4 = *(const void **)(DerivedStorage + 48);
    if (v4 && (v5 = (const __CFArray *)CFRetain(v4)) != 0)
    {
      v6 = v5;
      Count = CFArrayGetCount(v5);
      FigReadWriteLockUnlockForRead();
      if (Count >= 1)
      {
        if (*(_QWORD *)(DerivedStorage + 232))
        {
          v8 = 0;
        }
        else
        {
          v11 = CMBaseObjectGetDerivedStorage();
          if (remoteXPCPlayer_participatesInSTS_onceToken != -1)
            dispatch_once(&remoteXPCPlayer_participatesInSTS_onceToken, &__block_literal_global_22);
          if (remoteXPCPlayer_participatesInSTS_sParticipates)
          {
            v12 = getpid();
            v13 = FigAtomicIncrement32();
            v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("com.apple.coremedia.STS.%s.%d-%d"), v11 + 192, v12, v13);
            v15 = v14;
            v16 = *(const void **)(v11 + 232);
            *(_QWORD *)(v11 + 232) = v14;
            if (v14)
              CFRetain(v14);
            if (v16)
              CFRelease(v16);
            *(_BYTE *)(v11 + 240) = 0;
            if (v15)
              CFRelease(v15);
          }
          v8 = 1;
        }
        CFGetAllocator(a1);
        v17 = FigCFSetCreateFromArray();
        if (!v17)
        {
          FigSignalErrorAt();
LABEL_30:
          CFRelease(v6);
LABEL_31:
          if (v3)
            CFRelease(v3);
          return;
        }
        v10 = v17;
        FigCFSetApplyBlock();
LABEL_27:
        FigCFSetApplyBlock();
        *(_QWORD *)(DerivedStorage + 248) = v10;
        if (v8)
          FigXPCSendStdSetPropertyMessage();
        if (!v6)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
    else
    {
      FigReadWriteLockUnlockForRead();
      v6 = 0;
    }
    v9 = *(const void **)(DerivedStorage + 232);
    if (v9)
    {
      CFRelease(v9);
      v10 = 0;
      *(_QWORD *)(DerivedStorage + 232) = 0;
    }
    else
    {
      v10 = 0;
    }
    v8 = 1;
    goto LABEL_27;
  }
}

uint64_t remoteXPCPlayer_updateClosedCaptionHostLayerArray(const void *a1)
{
  void *v2;
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v6;
  uint64_t v7;
  CFTypeRef v8;
  __CFArray *Mutable;
  const __CFArray *v10;
  uint64_t v11;
  const void *v12;
  CFIndex Count;
  CFIndex v14;
  const void *SInt32;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, __CFString *, const void *);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, __CFString *, _QWORD, CFArrayRef *);
  const __CFArray *v20;
  const __CFArray *v21;
  const void *ValueAtIndex;
  const __CFArray *v24;
  _QWORD block[6];
  CFTypeRef cf;
  CFTypeRef v27;
  CFArrayRef theArray;

  v2 = (void *)MEMORY[0x19403137C]();
  theArray = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v27 = 0;
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    Mutable = 0;
    v10 = 0;
LABEL_7:
    v11 = 4294954514;
    goto LABEL_30;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = v5(FigBaseObject, CFSTR("DisplayingClosedCaptions"), *MEMORY[0x1E0C9AE00], &v27);
  if ((_DWORD)v7 || (v7 = FigDeferredTransactionCreate((uint64_t)v6, (uint64_t *)&cf), (_DWORD)v7))
  {
    v11 = v7;
    Mutable = 0;
    v10 = 0;
    goto LABEL_30;
  }
  v8 = cf;
  if (v27 != (CFTypeRef)*MEMORY[0x1E0C9AE50])
  {
    remoteXPCPlayer_removeClosedCaptionHostLayerArray((uint64_t)a1, cf);
    Mutable = 0;
    v10 = 0;
LABEL_29:
    v11 = 0;
    goto LABEL_30;
  }
  FigReadWriteLockLockForRead();
  v12 = *(const void **)(DerivedStorage + 104);
  if (!v12)
  {
    FigReadWriteLockUnlockForRead();
    v10 = 0;
LABEL_28:
    remoteXPCPlayer_removeClosedCaptionHostLayerArray((uint64_t)a1, v8);
    Mutable = 0;
    goto LABEL_29;
  }
  v10 = (const __CFArray *)CFRetain(v12);
  FigReadWriteLockUnlockForRead();
  if (!v10)
    goto LABEL_28;
  Count = CFArrayGetCount(v10);
  if (Count < 1)
    goto LABEL_28;
  v14 = Count;
  SInt32 = (const void *)FigCFNumberCreateSInt32();
  v16 = FigPlayerGetFigBaseObject(a1);
  v17 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v17)
  {
    v11 = v17(v16, CFSTR("RequiredNumberOfCAContextsForClosedCaptionLayers"), SInt32);
    if (!SInt32)
      goto LABEL_14;
    goto LABEL_13;
  }
  v11 = 4294954514;
  if (SInt32)
LABEL_13:
    CFRelease(SInt32);
LABEL_14:
  if ((_DWORD)v11)
  {
    Mutable = 0;
    goto LABEL_30;
  }
  v18 = FigPlayerGetFigBaseObject(a1);
  v19 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (!v19)
  {
    Mutable = 0;
    goto LABEL_7;
  }
  v11 = v19(v18, CFSTR("ClosedCaptionCAContextIDArray"), 0, &theArray);
  Mutable = 0;
  if (!(_DWORD)v11 && theArray)
  {
    if (v14 == CFArrayGetCount(theArray))
    {
      v20 = *(const __CFArray **)(DerivedStorage + 112);
      if (v20)
        v20 = (const __CFArray *)CFArrayGetCount(v20);
      if ((uint64_t)v20 <= v14)
      {
        if ((uint64_t)v20 < v14)
        {
          while (1)
          {
            v24 = *(const __CFArray **)(DerivedStorage + 112);
            if (v24)
              v24 = (const __CFArray *)CFArrayGetCount(v24);
            if ((uint64_t)v24 >= v14)
              break;
            CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 112), (const void *)+[FigBaseCALayerHost layer](FigBaseCALayerHost, "layer"));
          }
        }
        Mutable = 0;
      }
      else
      {
        Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
        while (1)
        {
          v21 = *(const __CFArray **)(DerivedStorage + 112);
          if (v21)
            v21 = (const __CFArray *)CFArrayGetCount(v21);
          if ((uint64_t)v21 <= v14)
            break;
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 112), 0);
          CFArrayAppendValue(Mutable, ValueAtIndex);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 112), 0);
        }
        FPSupport_AppendDeferredTransactionChangeForRemovingEachLayerInArrayFromItsSuperlayer(v8, (uint64_t)Mutable, (uint64_t)"remoteXPCPlayer_updateClosedCaptionHostLayerArray");
      }
      CFRetain(v10);
      if (a1)
        CFRetain(a1);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __remoteXPCPlayer_updateClosedCaptionHostLayerArray_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = v10;
      block[5] = a1;
      dispatch_async(MEMORY[0x1E0C80D38], block);
      FPSupport_AppendDeferredTransactionChangeForUpdatingHostLayersInLayers(v8, theArray, *(CFArrayRef *)(DerivedStorage + 112), v10, (uint64_t)"remoteXPCPlayer_updateClosedCaptionHostLayerArray");
      goto LABEL_29;
    }
    Mutable = 0;
    v11 = 4294954436;
  }
LABEL_30:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  if (v10)
    CFRelease(v10);
  if (theArray)
    CFRelease(theArray);
  if (v27)
    CFRelease(v27);
  objc_autoreleasePoolPop(v2);
  return v11;
}

void __remoteXPCPlayer_updateClosedCaptionHostLayerArray_block_invoke(uint64_t a1)
{
  CFIndex v2;
  const __CFAllocator *v3;
  const CFDictionaryKeyCallBacks *v4;
  const CFDictionaryValueCallBacks *v5;
  const __CFArray *Count;
  void *ValueAtIndex;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, CFMutableDictionaryRef);
  const void *v12;
  const void *v13;
  void *context;

  context = (void *)MEMORY[0x19403137C]();
  v2 = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  while (1)
  {
    Count = *(const __CFArray **)(a1 + 32);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (v2 >= (uint64_t)Count)
      break;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v2);
    Mutable = CFDictionaryCreateMutable(v3, 2, v4, v5);
    if (Mutable)
    {
      v9 = Mutable;
      FigCFDictionarySetCFIndex();
      objc_msgSend(ValueAtIndex, "bounds");
      FigCFDictionarySetCGRect();
      FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(a1 + 40));
      v11 = *(void (**)(uint64_t, const __CFString *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
      if (v11)
        v11(FigBaseObject, CFSTR("ClosedCaptionLayerBoundsUpdate"), v9);
      CFRelease(v9);
    }
    ++v2;
  }
  v12 = *(const void **)(a1 + 40);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 32);
  if (v13)
    CFRelease(v13);
  objc_autoreleasePoolPop(context);
}

uint64_t __remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(a2, "STSLabel"), "isEqual:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232));
  if ((result & 1) == 0)
    return objc_msgSend(a2, "setSTSLabel:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 232));
  return result;
}

uint64_t __remoteXPCPlayer_reevaluateSpatialTrackingLayersAndUpdateLabelIfNecessary_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t result;

  result = FigCFSetContainsValue();
  if (!(_DWORD)result)
    return objc_msgSend(a2, "setSTSLabel:", 0);
  return result;
}

uint64_t remoteXPCPlayer_AddToPlayQueue(const void *a1, const void *a2, uint64_t a3)
{
  void *v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;
  uint64_t value;
  uint64_t v14;

  v6 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  v14 = 0;
  v12 = 0;
  if (!a2)
    goto LABEL_15;
  v8 = DerivedStorage;
  ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, &v14);
  if ((_DWORD)ObjectID)
    goto LABEL_16;
  ObjectID = remoteXPCItem_GetObjectID((uint64_t)a2, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_16;
  if (!remoteXPCItem_isOwnedByPlayer((uint64_t)a2, a1))
    goto LABEL_15;
  if (a3)
  {
    ObjectID = remoteXPCItem_GetObjectID(a3, &v12);
    if ((_DWORD)ObjectID)
      goto LABEL_16;
    if (!remoteXPCItem_isOwnedByPlayer(a3, a1))
    {
LABEL_15:
      ObjectID = FigSignalErrorAt();
      goto LABEL_16;
    }
  }
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_16;
  xpc_dictionary_set_uint64(0, "ItemObjectID", value);
  xpc_dictionary_set_uint64(0, "AfterItemObjectID", v12);
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_16;
  MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 32));
  CFSetAddValue(*(CFMutableSetRef *)(v8 + 24), a2);
  MEMORY[0x19402EF04](*(_QWORD *)(v8 + 32));
  if (xpc_dictionary_get_BOOL(0, "AddedItemIsNowCurrent"))
  {
    ObjectID = FigXPCMessageCopyCFData();
    if (!(_DWORD)ObjectID)
      goto LABEL_15;
LABEL_16:
    v10 = ObjectID;
    goto LABEL_14;
  }
  v10 = 0;
LABEL_14:
  FigDeferredTransactionCommit(0);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  objc_autoreleasePoolPop(v6);
  return v10;
}

uint64_t remoteXPCPlayer_RemoveFromPlayQueue(const void *a1, const void *a2)
{
  _QWORD *DerivedStorage;
  uint64_t ObjectID;
  __CFSet *v6;
  uint64_t v7;
  const void *v8;
  BOOL v9;
  char v10;
  const void *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v15 = 0;
  v16 = 0;
  if (a2)
  {
    if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 9) || !remoteXPCItem_isOwnedByPlayer((uint64_t)a2, a1))
    {
      ObjectID = FigSignalErrorAt();
    }
    else
    {
      ObjectID = remoteXPCItem_GetObjectID((uint64_t)a2, &v15);
      if (!(_DWORD)ObjectID)
        goto LABEL_5;
    }
LABEL_30:
    v13 = ObjectID;
    goto LABEL_28;
  }
LABEL_5:
  ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, &v16);
  if ((_DWORD)ObjectID)
    goto LABEL_30;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_30;
  xpc_dictionary_set_uint64(0, "ItemObjectID", v15);
  ObjectID = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_30;
  MEMORY[0x19402EEEC](DerivedStorage[4]);
  v6 = (__CFSet *)DerivedStorage[3];
  if (a2)
    CFSetRemoveValue(v6, a2);
  else
    CFSetRemoveAllValues(v6);
  MEMORY[0x19402EF04](DerivedStorage[4]);
  MEMORY[0x19402EEEC](DerivedStorage[11]);
  v7 = remoteXPCPlayer_copySyncItem((uint64_t)a1);
  v8 = (const void *)v7;
  if (a2)
    v9 = v7 == (_QWORD)a2;
  else
    v9 = 1;
  v10 = v9;
  if (v9)
  {
    v11 = (const void *)DerivedStorage[9];
    if (v11)
    {
      CFRelease(v11);
      DerivedStorage[9] = 0;
    }
  }
  MEMORY[0x19402EF04](DerivedStorage[11]);
  v12 = v10 ^ 1;
  if (!v8)
    v12 = 1;
  if ((v12 & 1) == 0)
  {
    remoteXPCItem_updateLayerSync((uint64_t)v8, 0, 0);
LABEL_26:
    CFRelease(v8);
    goto LABEL_27;
  }
  if (v8)
    goto LABEL_26;
LABEL_27:
  v13 = 0;
LABEL_28:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v13;
}

uint64_t remoteXPCPlayer_CopyPlayQueueItem(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  if (!a3)
    goto LABEL_13;
  ObjectID = remoteXPCPlayer_GetObjectID((uint64_t)a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  if (a2)
  {
    if (remoteXPCItem_isOwnedByPlayer(a2, a1))
    {
      ObjectID = remoteXPCItem_GetObjectID(a2, &v8);
      if ((_DWORD)ObjectID)
        goto LABEL_10;
      goto LABEL_6;
    }
LABEL_13:
    ObjectID = FigSignalErrorAt();
    goto LABEL_10;
  }
LABEL_6:
  ObjectID = FigXPCCreateBasicMessage();
  if (!(_DWORD)ObjectID)
  {
    xpc_dictionary_set_uint64(0, "AfterItemObjectID", v8);
    ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)ObjectID)
    {
      if (!xpc_dictionary_get_uint64(0, "ItemObjectID"))
      {
        v6 = 0;
        goto LABEL_12;
      }
      ObjectID = FigXPCRemoteClientLookupAndRetainAssociatedObject();
    }
  }
LABEL_10:
  v6 = ObjectID;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_SetRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  float v5;
  uint64_t ObjectID;
  uint64_t v7;
  float v8;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v5 = *(float *)(DerivedStorage + 172);
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
  {
    v7 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_double(0, "Rate", a2);
    v7 = FigXPCRemoteClientSendSyncMessage();
    if ((_DWORD)v7)
      v8 = v5;
    else
      v8 = a2;
    *(float *)(DerivedStorage + 172) = v8;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCPlayer_GetRate(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 9))
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(DerivedStorage + 172);
  return 0;
}

uint64_t remoteXPCPlayer_SetRateWithFade(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (xpc_dictionary_set_double(0, "Rate", a2), ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID))
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v6)
      *(float *)(DerivedStorage + 172) = a2;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_StartPreroll(uint64_t a1, int a2, float a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v6)
    {
      xpc_dictionary_set_double(0, "Rate", a3);
      xpc_dictionary_set_int64(0, "PrerollID", a2);
      v6 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_StepByCount(uint64_t a1, int a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      xpc_dictionary_set_int64(0, "StepCount", a2);
      v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCPlayer_SetRateAndAnchorTime(uint64_t a1, float a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (xpc_dictionary_set_double(0, "Rate", a2), ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID))
  {
    v10 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, "Flags", a5);
    v10 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v10)
      *(float *)(DerivedStorage + 172) = a2;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCPlayer_CreatePlaybackItemFromAsset(uint64_t a1, uint64_t a2, unsigned int a3, const __CFDictionary *a4, _QWORD *a5)
{
  uint64_t ObjectID;
  const __CFAllocator *v10;
  uint64_t OnlyTimebase;
  uint64_t DerivedStorage;
  char *v13;
  OpaqueCMClock *HostTimeClock;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t uint64;
  _QWORD *v22;
  uint64_t v23;
  uint64_t started;
  uint64_t v26;
  uint64_t v27;
  void *value;
  CFTypeRef cf;
  char __str[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v27 = 0;
  if (!a2 || !a5)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_33;
  }
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v27);
  if ((_DWORD)ObjectID)
  {
LABEL_33:
    started = ObjectID;
    goto LABEL_23;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  value = 0;
  cf = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__str = 0u;
  FigPlaybackItemGetClassID();
  OnlyTimebase = CMDerivedObjectCreate();
  if (!(_DWORD)OnlyTimebase)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v13 = (char *)(DerivedStorage + 260);
    *(_BYTE *)(DerivedStorage + 260) = 0;
    if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingIdentifier"), (const void **)&value))
      CFStringGetCString((CFStringRef)value, v13, 10, 0x600u);
    HostTimeClock = CMClockGetHostTimeClock();
    OnlyTimebase = CMTimebaseCreateWithSourceClock(v10, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 48));
    if (!(_DWORD)OnlyTimebase)
    {
      OnlyTimebase = CMTimebaseCreateWithSourceTimebase(v10, *(CMTimebaseRef *)(DerivedStorage + 48), (CMTimebaseRef *)(DerivedStorage + 32));
      if (!(_DWORD)OnlyTimebase)
      {
        OnlyTimebase = CMTimebaseCreateReadOnlyTimebase();
        if (!(_DWORD)OnlyTimebase)
        {
          v15 = FigReentrantMutexCreate();
          *(_QWORD *)(DerivedStorage + 16) = v15;
          if (v15)
          {
            v16 = FigReentrantMutexCreate();
            *(_QWORD *)(DerivedStorage + 144) = v16;
            if (v16)
            {
              v17 = FigSimpleMutexCreate();
              *(_QWORD *)(DerivedStorage + 168) = v17;
              if (v17)
              {
                v18 = FigSimpleMutexCreate();
                *(_QWORD *)(DerivedStorage + 136) = v18;
                if (v18)
                {
                  snprintf(__str, 0x50uLL, "com.apple.coremedia.visualContextSyncQueue.%s", v13);
                  *(_QWORD *)(DerivedStorage + 184) = dispatch_queue_create(__str, 0);
                  v19 = cf;
                  goto LABEL_16;
                }
              }
            }
          }
          OnlyTimebase = FigSignalErrorAt();
        }
      }
    }
  }
  started = OnlyTimebase;
  if (cf)
    CFRelease(cf);
  if ((_DWORD)started)
    goto LABEL_23;
  v19 = 0;
LABEL_16:
  v20 = FigXPCCreateBasicMessage();
  if ((_DWORD)v20)
    goto LABEL_24;
  v20 = FigAssetXPCRemoteGetObjectID(a2, &v26);
  if ((_DWORD)v20)
    goto LABEL_24;
  xpc_dictionary_set_uint64(0, "AssetObjectID", v26);
  xpc_dictionary_set_uint64(0, "ItemCreateFlags", a3);
  v20 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v20
    || (v20 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v20)
    || (uint64 = xpc_dictionary_get_uint64(0, "ItemObjectID"),
        v22 = (_QWORD *)CMBaseObjectGetDerivedStorage(),
        v23 = CMBaseObjectGetDerivedStorage(),
        *v22 = uint64,
        v20 = FigXPCRemoteClientAssociateObject(),
        (_DWORD)v20))
  {
LABEL_24:
    started = v20;
  }
  else
  {
    v22[3] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFSetAddValue(*(CFMutableSetRef *)(v23 + 16), v19);
    started = FigStartMonitoringMediaServicesProcessDeath();
    if (!(_DWORD)started)
    {
      *a5 = v19;
      goto LABEL_23;
    }
  }
  if (v19)
    CFRelease(v19);
LABEL_23:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return started;
}

uint64_t remoteXPCPlayer_SetRateWithOptions(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (xpc_dictionary_set_double(0, "Rate", a2), ObjectID = FigXPCMessageSetCFDictionary(), (_DWORD)ObjectID))
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = FigXPCRemoteClientSendSyncMessage();
    if (!(_DWORD)v6)
      *(float *)(DerivedStorage + 172) = a2;
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCPlayer_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t ObjectID;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  CFTypeRef v13;
  BOOL v14;
  CFTypeRef cf[3];
  uint64_t v16;

  v16 = 0;
  memset(cf, 0, sizeof(cf));
  v14 = 0;
  v13 = 0;
  if (!a2)
  {
    v11 = FigSignalErrorAt();
LABEL_11:
    v8 = v11;
    if ((_DWORD)v11)
    {
LABEL_14:
      v10 = 0;
      goto LABEL_15;
    }
LABEL_12:
    ObjectID = FPSupport_CopyCombinedSetPropertiesErrDictionary(v13, 0, a3);
LABEL_13:
    v8 = ObjectID;
    goto LABEL_14;
  }
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v16);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)remoteXPCPlayer_handleSetProperty, &v14, cf, &v13);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  if (v14)
    goto LABEL_12;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v7)
  {
    v11 = FigXPCMessageCopyCFDictionary();
    goto LABEL_11;
  }
  v8 = v7;
  v9 = (const void *)FigCFDictionaryCopyArrayOfKeys();
  v10 = (const void *)FigCFCopyCompactDescription();
  if (v9)
    CFRelease(v9);
LABEL_15:
  FigXPCRemoteClientKillServerOnTimeout();
  if (cf[0])
    CFRelease(cf[0]);
  if (v13)
    CFRelease(v13);
  FigXPCRelease();
  FigXPCRelease();
  if (v10)
    CFRelease(v10);
  return v8;
}

uint64_t remoteXPCItem_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9) || *(_BYTE *)(DerivedStorage + 270))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

BOOL remoteXPCItem_isOwnedByPlayer(uint64_t a1, const void *a2)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)remoteXPCItem_copyOwningPlayer();
  v4 = v3;
  if (v3)
    CFRelease(v3);
  return v4 == a2;
}

uint64_t remoteXPCItem_Invalidate(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  __CFSet *v13;
  _QWORD v15[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15[5] = 0;
  if (*(_BYTE *)(DerivedStorage + 9))
  {
    FigXPCRelease();
    return 0;
  }
  else
  {
    v3 = DerivedStorage;
    v4 = (const void *)remoteXPCItem_copyOwningPlayer();
    if (v4)
      v5 = CMBaseObjectGetDerivedStorage();
    else
      v5 = 0;
    FigStopMonitoringMediaServicesProcessDeath();
    *(_BYTE *)(v3 + 9) = 1;
    v6 = FigXPCRemoteClientDisassociateObject();
    if (!*(_BYTE *)(v3 + 8) && !*(_BYTE *)(v3 + 270))
    {
      v6 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v6)
        v6 = FigXPCRemoteClientSendAsyncMessage();
    }
    MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 16));
    if (v5)
      CFSetRemoveValue(*(CFMutableSetRef *)(v5 + 16), a1);
    v7 = *(_QWORD *)(v3 + 152);
    if (v7)
      FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v7, 0, 0);
    MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 168));
    v8 = *(const void **)(v3 + 160);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(v3 + 160) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v3 + 168));
    v9 = *(NSObject **)(v3 + 184);
    if (v9)
    {
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __remoteXPCItem_Invalidate_block_invoke;
      v15[3] = &__block_descriptor_40_e5_v8__0l;
      v15[4] = v3;
      dispatch_sync(v9, v15);
    }
    v10 = *(const void **)(v3 + 200);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(v3 + 200) = 0;
    }
    v11 = *(const void **)(v3 + 208);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(v3 + 208) = 0;
    }
    if (v5)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 88));
      if (remoteXPCItem_isSyncItem(a1))
      {
        v12 = *(const void **)(v5 + 72);
        if (v12)
        {
          CFRelease(v12);
          *(_QWORD *)(v5 + 72) = 0;
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 88));
      MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 32));
      v13 = *(__CFSet **)(v5 + 24);
      if (v13)
        CFSetRemoveValue(v13, a1);
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 32));
    }
    FigXPCRelease();
    if (v4)
      CFRelease(v4);
    MEMORY[0x19402EA24](*(_QWORD *)(v3 + 16));
  }
  return v6;
}

uint64_t remoteXPCItem_Finalize(const void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  remoteXPCItem_Invalidate(a1);
  v3 = (const void *)DerivedStorage[19];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[19] = 0;
  }
  if (DerivedStorage[18])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[18] = 0;
  }
  if (DerivedStorage[21])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[21] = 0;
  }
  if (DerivedStorage[17])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[17] = 0;
  }
  v4 = (const void *)DerivedStorage[5];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[5] = 0;
  }
  v5 = (const void *)DerivedStorage[4];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[4] = 0;
  }
  v6 = (const void *)DerivedStorage[6];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[6] = 0;
  }
  v7 = (const void *)DerivedStorage[3];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[3] = 0;
  }
  v8 = DerivedStorage[23];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[23] = 0;
  }
  result = DerivedStorage[2];
  if (result)
  {
    result = FigSimpleMutexDestroy();
    DerivedStorage[2] = 0;
  }
  return result;
}

__CFString *remoteXPCItem_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  const char *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 9))
    v6 = " INVALIDATED";
  else
    v6 = "";
  if (*(_BYTE *)(DerivedStorage + 8))
    v7 = " SERVER DIED";
  else
    v7 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlaybackItemRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6, v7);
  return Mutable;
}

uint64_t remoteXPCItem_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDateRef *a4)
{
  _QWORD *DerivedStorage;
  const void *v8;
  uint64_t ObjectID;
  const __CFDate *v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t uint64;
  const __CFDate *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v20;
  _QWORD block[6];
  uint64_t v22;
  xpc_object_t xdict;
  uint64_t v24;
  CFTypeRef cf;
  uint64_t v26;

  v22 = 0;
  if (!a1 || !a2 || !a4)
  {
    v11 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_33;
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = (const void *)remoteXPCItem_copyOwningPlayer();
  ObjectID = remoteXPCItem_GetObjectID(a1, &v22);
  if ((_DWORD)ObjectID)
  {
LABEL_32:
    v11 = ObjectID;
    goto LABEL_33;
  }
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    v10 = (const __CFDate *)DerivedStorage[5];
    if (!v10)
    {
LABEL_8:
      v11 = 0;
      *a4 = v10;
      goto LABEL_33;
    }
LABEL_7:
    v10 = (const __CFDate *)CFRetain(v10);
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("SynchronizedLayers")))
  {
    MEMORY[0x19402EEEC](DerivedStorage[21]);
    v12 = (CFTypeRef)DerivedStorage[20];
    if (v12)
      v12 = CFRetain(v12);
    *a4 = (CFDateRef)v12;
    MEMORY[0x19402EF04](DerivedStorage[21]);
    goto LABEL_13;
  }
  if (!CFEqual(a2, CFSTR("CPEProtector")))
  {
    if (CFEqual(a2, CFSTR("ImageQueueGauge")))
    {
      v17 = a1;
      v18 = 1231647079;
LABEL_31:
      ObjectID = remoteXPCItem_copyImageQueueGauge(v17, v18, a4);
      goto LABEL_32;
    }
    if (CFEqual(a2, CFSTR("PriorImageQueueGauge")))
    {
      v17 = a1;
      v18 = 1232103783;
      goto LABEL_31;
    }
    if (CFEqual(a2, CFSTR("VisualContextArray")))
    {
      v20 = DerivedStorage[23];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __remoteXPCItem_CopyProperty_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = a4;
      block[5] = DerivedStorage;
      dispatch_sync(v20, block);
LABEL_13:
      v11 = 0;
      goto LABEL_33;
    }
    if (CFEqual(a2, CFSTR("VideoCompositor")))
    {
      v10 = (const __CFDate *)DerivedStorage[26];
      if (v10)
        goto LABEL_7;
    }
    else if (CFEqual(a2, CFSTR("currentDate")) || CFEqual(a2, CFSTR("currentDateAndTime")))
    {
      if (remoteXPCItem_copyCurrentDateProperty(a1, v22, a2, a4))
        goto LABEL_13;
    }
    else if (CFEqual(a2, CFSTR("MetricEventTimeline")))
    {
      remoteXPCItem_copyMetricEventTimeline(a1, (uint64_t)a4);
      goto LABEL_13;
    }
    ObjectID = FigXPCSendStdCopyPropertyMessage();
    goto LABEL_32;
  }
  v13 = CMBaseObjectGetDerivedStorage();
  v26 = 0;
  v24 = 0;
  cf = 0;
  xdict = 0;
  if (*(_BYTE *)(v13 + 9))
  {
    v14 = FigSignalErrorAt();
    goto LABEL_49;
  }
  v14 = remoteXPCItem_GetObjectID(a1, &v26);
  if ((_DWORD)v14)
    goto LABEL_49;
  v14 = FigXPCCreateBasicMessage();
  if ((_DWORD)v14)
    goto LABEL_49;
  v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v14)
    goto LABEL_49;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!uint64)
  {
    v16 = 0;
    goto LABEL_25;
  }
  v14 = FigCPEProtectorXPCRemoteRetainCopiedCPEProtector(uint64, &cf);
  if ((_DWORD)v14)
  {
LABEL_49:
    v11 = v14;
    goto LABEL_26;
  }
  v16 = (const __CFDate *)cf;
LABEL_25:
  v11 = 0;
  *a4 = v16;
  cf = 0;
LABEL_26:
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  FigXPCRemoteClientKillServerOnTimeout();
LABEL_33:
  FigXPCRelease();
  FigXPCRelease();
  if (v8)
    CFRelease(v8);
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteXPCItem_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t ObjectID;
  uint64_t v9;
  char v11;
  CFTypeRef cf;
  CFTypeRef v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  cf = 0;
  v11 = 0;
  if (!a2 || (v6 = remoteXPCItem_copyOwningPlayer()) == 0)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_10;
  }
  v7 = (const void *)v6;
  ObjectID = remoteXPCItem_GetObjectID(a1, &v14);
  if ((_DWORD)ObjectID)
    goto LABEL_7;
  ObjectID = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)remoteXPCItem_handleSetProperty, &v11, &v13, &cf);
  if ((_DWORD)ObjectID)
    goto LABEL_7;
  if (!v11)
  {
    ObjectID = FigXPCSendStdSetPropertyMessage();
LABEL_7:
    v9 = ObjectID;
    goto LABEL_8;
  }
  v9 = 0;
LABEL_8:
  CFRelease(v7);
  if (cf)
    CFRelease(cf);
LABEL_10:
  if (v13)
    CFRelease(v13);
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCItem_copyImageQueueGauge(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  uint64_t uint64;
  CFTypeRef v8;
  uint64_t v9;
  CFTypeRef cf;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v12 = 0;
  if (!a3 || *(_BYTE *)(DerivedStorage + 9))
  {
    ObjectID = FigSignalErrorAt();
  }
  else
  {
    ObjectID = remoteXPCItem_GetObjectID(a1, &v12);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
        {
          uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
          if (!uint64)
          {
            v8 = 0;
            goto LABEL_10;
          }
          ObjectID = FigImageQueueGaugeXPCRemoteRetainCopiedImageQueueGauge(uint64, &cf);
          if (!(_DWORD)ObjectID)
          {
            v8 = cf;
LABEL_10:
            v9 = 0;
            *a3 = v8;
            cf = 0;
            goto LABEL_11;
          }
        }
      }
    }
  }
  v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

BOOL remoteXPCItem_copyCurrentDateProperty(uint64_t a1, uint64_t a2, const void *a3, CFDateRef *a4)
{
  uint64_t DerivedStorage;
  double v8;
  __int128 v9;
  double v10;
  const void *Value;
  const __CFDictionary *v13;
  __int128 v14;
  double v15;
  CFDateRef v16;
  const __CFAllocator *v17;
  CMTime start;
  CMTimeRange time;
  CFDictionaryRef theDict;
  CMTime rhs;
  CMTimeRange range;
  CMTime v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v24, 0, sizeof(v24));
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
  v8 = 0.0;
  if (remoteXPCItem_GetCurrentTime(a1, (uint64_t)&v24))
    goto LABEL_8;
  if ((v24.flags & 1) == 0)
    goto LABEL_8;
  v9 = *(_OWORD *)(DerivedStorage + 104);
  *(_OWORD *)&range.start.value = *(_OWORD *)(DerivedStorage + 88);
  *(_OWORD *)&range.start.epoch = v9;
  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(DerivedStorage + 120);
  time.start = v24;
  if (!CMTimeRangeContainsTime(&range, &time.start))
    goto LABEL_8;
  memset(&range, 0, 24);
  time.start = v24;
  rhs = *(CMTime *)(DerivedStorage + 88);
  CMTimeSubtract(&range.start, &time.start, &rhs);
  v10 = *(double *)(DerivedStorage + 80);
  *(_OWORD *)&time.start.value = *(_OWORD *)&range.start.value;
  time.start.epoch = range.start.epoch;
  v8 = v10 + CMTimeGetSeconds(&time.start);
  if (v8 == 0.0)
  {
LABEL_8:
    theDict = 0;
    if (!FigXPCSendStdCopyPropertyMessage() && theDict != 0)
    {
      Value = CFDictionaryGetValue(theDict, CFSTR("date"));
      memset(&range, 0, sizeof(range));
      v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("timeRange"));
      CMTimeRangeMakeFromDictionary(&range, v13);
      if (Value)
      {
        if ((range.start.flags & 1) != 0
          && (range.duration.flags & 1) != 0
          && !range.duration.epoch
          && (range.duration.value & 0x8000000000000000) == 0)
        {
          time = range;
          rhs = v24;
          if (CMTimeRangeContainsTime(&time, &rhs))
          {
            memset(&time, 0, 24);
            rhs = v24;
            start = range.start;
            CMTimeSubtract(&time.start, &rhs, &start);
            v14 = *(_OWORD *)&range.start.epoch;
            *(_OWORD *)(DerivedStorage + 88) = *(_OWORD *)&range.start.value;
            *(_OWORD *)(DerivedStorage + 104) = v14;
            *(_OWORD *)(DerivedStorage + 120) = *(_OWORD *)&range.duration.timescale;
            v15 = MEMORY[0x194029D14](Value);
            *(double *)(DerivedStorage + 80) = v15;
            rhs = time.start;
            v8 = v15 + CMTimeGetSeconds(&rhs);
          }
        }
      }
      if (theDict)
        CFRelease(theDict);
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 136));
  if (v8 != 0.0)
  {
    if (CFEqual(a3, CFSTR("currentDate")))
    {
      v16 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8);
LABEL_23:
      *a4 = v16;
      return v8 != 0.0;
    }
    if (CFEqual(a3, CFSTR("currentDateAndTime")))
    {
      HIWORD(range.duration.flags) = 0;
      *(CMTimeScale *)((char *)&range.duration.timescale + 2) = 0;
      range.start = v24;
      v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      *(double *)&range.duration.value = v8;
      LOWORD(range.duration.timescale) = 257;
      v16 = FigDateTimeMomentCopyAsDictionary((uint64_t)&range, v17);
      goto LABEL_23;
    }
  }
  return v8 != 0.0;
}

uint64_t remoteXPCItem_copyMetricEventTimeline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  if (!a2 || *(_BYTE *)(DerivedStorage + 9))
  {
    FigSignalErrorAt();
  }
  else if (!remoteXPCItem_GetObjectID(a1, &v6)
         && !FigXPCCreateBasicMessage()
         && !FigXPCMessageSetCFString()
         && !FigXPCRemoteClientSendSyncMessageCreatingReply()
         && xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]))
  {
    FigMetricEventTimelineCreateRemoteWithObjectID();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t remoteXPCItem_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (*(_QWORD *)(DerivedStorage + 32))
  {
    CMTimebaseGetTimeClampedAboveAnchorTime();
    *(_OWORD *)a2 = v7;
    v4 = v8;
  }
  else
  {
    v5 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
    v4 = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)(a2 + 16) = v4;
  return 0;
}

uint64_t remoteXPCItem_handleSetProperty(const void *a1, uint64_t a2, const __CFString *a3, const __CFArray *MutableCopy, _BYTE *a5, CFTypeRef *a6, _QWORD *a7)
{
  void *v13;
  _QWORD *DerivedStorage;
  uint64_t v15;
  const void *v16;
  uint64_t ObjectID;
  uint64_t v18;
  uint64_t v19;
  const __CFAllocator *v20;
  CFTypeID v21;
  CFArrayRef Copy;
  uint64_t v23;
  const void *v24;
  _BOOL4 isSyncItem;
  uint64_t v26;
  CFTypeID v27;
  uint64_t v28;
  const __CFAllocator *v29;
  uint64_t Count;
  CFIndex v31;
  const void *ValueAtIndex;
  CFTypeID v33;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v35;
  CFIndex v36;
  const void *v37;
  uint64_t appended;
  const void *v39;
  CFTypeID v40;
  const void *v41;
  CFNumberRef v42;
  __CFString *v43;
  NSObject *v44;
  CFNumberRef v45;
  const __CFArray *v46;
  const __CFArray *v47;
  CFTypeID v48;
  const void *Value;
  const void *v50;
  CFTypeID v51;
  _BYTE *v52;
  const void *v53;
  CFTypeID v54;
  const void *v55;
  uint64_t v56;
  CFTypeID v57;
  CFTypeID v58;
  CMClockRef HostTimeClock;
  const __CFArray *v60;
  CFTypeRef v61;
  _BYTE *v63;
  void *v64;
  _QWORD *v65;
  CFTypeRef *v66;
  CMTime time;
  Float64 rateOut;
  CMTime v69;
  uint64_t v70;
  CMTime cf;
  void *v72;
  uint64_t v73;
  const __CFArray *v74;

  v13 = (void *)MEMORY[0x19403137C]();
  v70 = 0;
  if (!a3
    || (DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage(), (v15 = remoteXPCItem_copyOwningPlayer()) == 0))
  {
    v26 = FigSignalErrorAt();
    goto LABEL_93;
  }
  v16 = (const void *)v15;
  ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v70);
  if ((_DWORD)ObjectID)
    goto LABEL_102;
  v66 = a6;
  v18 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v18 + 9))
    goto LABEL_101;
  v19 = v18;
  if (CFEqual(a3, CFSTR("SynchronizedLayers")))
  {
    cf.value = 0;
    v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    ObjectID = FigDeferredTransactionCreate(*MEMORY[0x1E0C9AE00], &cf.value);
    if (!(_DWORD)ObjectID)
    {
      if (MutableCopy && (v21 = CFGetTypeID(MutableCopy), v21 == CFArrayGetTypeID()))
        Copy = CFArrayCreateCopy(v20, MutableCopy);
      else
        Copy = 0;
      MEMORY[0x19402EEEC](DerivedStorage[21]);
      v24 = (const void *)DerivedStorage[20];
      v23 = DerivedStorage[21];
      DerivedStorage[20] = Copy;
      MEMORY[0x19402EF04](v23);
      if (v24)
        CFRelease(v24);
      MEMORY[0x19402EEEC](*(_QWORD *)(v19 + 88));
      isSyncItem = remoteXPCItem_isSyncItem(a1);
      MEMORY[0x19402EF04](*(_QWORD *)(v19 + 88));
      remoteXPCItem_updateLayerSync((uint64_t)a1, isSyncItem, (CFTypeRef)cf.value);
      if (Copy)
        remoteXPCPlayer_updateLayerDurationsWhenItemReady((uint64_t)v16, (uint64_t)a1, 2, (const void *)cf.value);
      FigDeferredTransactionCommit(cf.value);
      if (cf.value)
        CFRelease((CFTypeRef)cf.value);
      v26 = 0;
      goto LABEL_18;
    }
LABEL_102:
    v26 = ObjectID;
    goto LABEL_19;
  }
  v65 = a7;
  if (!CFEqual(a3, CFSTR("VisualContextArray")))
  {
    v64 = v13;
    if (CFEqual(a3, CFSTR("VideoCompositor")))
    {
      v39 = (const void *)DerivedStorage[26];
      if (v39)
      {
        CFRelease(v39);
        DerivedStorage[26] = 0;
      }
      if (MutableCopy)
      {
        v40 = CFGetTypeID(MutableCopy);
        if (v40 == FigVideoCompositorGetTypeID())
        {
          cf.value = 0;
          ObjectID = FigVideoCompositorRemoteGetObjectID((uint64_t)MutableCopy, &cf);
          if ((_DWORD)ObjectID)
            goto LABEL_102;
          v63 = a5;
          v41 = (const void *)DerivedStorage[26];
          DerivedStorage[26] = MutableCopy;
          CFRetain(MutableCopy);
          if (v41)
            CFRelease(v41);
          v42 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &cf);
          MutableCopy = v42;
          v35 = 0;
          v43 = CFSTR("Server_VideoCompositorID");
          goto LABEL_67;
        }
      }
      goto LABEL_79;
    }
    if (CFEqual(a3, CFSTR("VideoCompositionProperties")))
    {
      if (MutableCopy)
      {
        v48 = CFGetTypeID(MutableCopy);
        if (v48 == CFDictionaryGetTypeID())
        {
          Value = CFDictionaryGetValue(MutableCopy, CFSTR("VideoCompositor"));
          v50 = (const void *)DerivedStorage[26];
          if (v50)
          {
            CFRelease(v50);
            DerivedStorage[26] = 0;
          }
          if (Value)
          {
            v51 = CFGetTypeID(Value);
            if (v51 == FigVideoCompositorGetTypeID())
            {
              cf.value = 0;
              ObjectID = FigVideoCompositorRemoteGetObjectID((uint64_t)Value, &cf);
              if ((_DWORD)ObjectID)
                goto LABEL_102;
              v52 = a5;
              v53 = (const void *)DerivedStorage[26];
              DerivedStorage[26] = Value;
              CFRetain(Value);
              if (v53)
                CFRelease(v53);
              MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MutableCopy);
              CFDictionaryRemoveValue(MutableCopy, CFSTR("VideoCompositor"));
              FigCFDictionarySetInt64();
              v47 = 0;
              v46 = MutableCopy;
              goto LABEL_80;
            }
          }
          goto LABEL_79;
        }
      }
LABEL_101:
      ObjectID = FigSignalErrorAt();
      goto LABEL_102;
    }
    if (CFEqual(CFSTR("AudioProcessingTap"), a3))
    {
      if (!MutableCopy)
        goto LABEL_101;
      v54 = CFGetTypeID(MutableCopy);
      if (v54 != MTAudioProcessingTapGetTypeID())
        goto LABEL_101;
      cf.value = 0;
      MEMORY[0x19402EA0C](DerivedStorage[2]);
      v55 = (const void *)DerivedStorage[25];
      DerivedStorage[25] = MutableCopy;
      CFRetain(MutableCopy);
      if (v55)
        CFRelease(v55);
      v63 = a5;
      MEMORY[0x19402EA24](DerivedStorage[2]);
      v56 = MTAudioProcessingTapXPCRemoteGetObjectID((uint64_t)MutableCopy, &cf);
      if (!(_DWORD)v56)
      {
        v42 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &cf);
        MutableCopy = v42;
        v35 = 0;
        v43 = CFSTR("Server_AudioProcessingTapID");
LABEL_67:
        v45 = v42;
        goto LABEL_48;
      }
LABEL_106:
      v26 = v56;
      goto LABEL_19;
    }
    if (!CFEqual(CFSTR("PriorImageQueueGauge"), a3))
    {
      if (CFEqual(CFSTR("TransientTimebaseForCoordinatedPlaybackSynchronization"), a3))
      {
        if (MutableCopy)
        {
          v58 = CFGetTypeID(MutableCopy);
          v52 = a5;
          if (v58 == CMTimebaseGetTypeID())
          {
            cf = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
            v69 = cf;
            rateOut = 0.0;
            CMTimebaseGetTimeAndRate(MutableCopy, &cf, &rateOut);
            if (rateOut != 0.0)
            {
              HostTimeClock = CMClockGetHostTimeClock();
              time = cf;
              CMSyncConvertTime(&v69, &time, MutableCopy, HostTimeClock);
            }
            MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            time = cf;
            FigCFDictionarySetCMTime();
            time = v69;
            FigCFDictionarySetCMTime();
            FigCFDictionarySetDouble();
            v46 = 0;
            a3 = CFSTR("Server-TransientTimebaseDict");
            v47 = MutableCopy;
            goto LABEL_80;
          }
          MutableCopy = 0;
        }
        else
        {
          v52 = a5;
        }
        v47 = 0;
        v46 = 0;
        a3 = CFSTR("Server-TransientTimebaseDict");
LABEL_80:
        v45 = 0;
        v35 = 0;
        *v52 = 0;
        v43 = (__CFString *)a3;
        goto LABEL_81;
      }
LABEL_79:
      v52 = a5;
      v47 = 0;
      v46 = 0;
      goto LABEL_80;
    }
    cf.value = 0;
    v63 = a5;
    if (MutableCopy)
    {
      v57 = CFGetTypeID(MutableCopy);
      if (v57 == FigImageQueueGaugeGetTypeID())
      {
        v56 = FigImageQueueGaugeXPCRemoteGetObjectID((uint64_t)MutableCopy, &cf);
        if ((_DWORD)v56)
          goto LABEL_106;
        MutableCopy = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &cf);
      }
      else
      {
        MutableCopy = 0;
      }
    }
    v35 = 0;
    v43 = CFSTR("Server_PriorImageQueueGaugeID");
    v45 = MutableCopy;
    goto LABEL_48;
  }
  if (!MutableCopy)
    goto LABEL_43;
  v27 = CFGetTypeID(MutableCopy);
  if (v27 != CFArrayGetTypeID())
    goto LABEL_43;
  v28 = CMBaseObjectGetDerivedStorage();
  v29 = CFGetAllocator(a1);
  Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    v31 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v31);
      if (!ValueAtIndex)
        goto LABEL_43;
      v33 = CFGetTypeID(ValueAtIndex);
      if (v33 != FigVisualContextGetTypeID())
        goto LABEL_43;
      if (Count == ++v31)
      {
        Mutable = CFArrayCreateMutable(v29, Count, MEMORY[0x1E0C9B378]);
        if (!Mutable)
          goto LABEL_43;
        v35 = Mutable;
        v36 = 0;
        while (1)
        {
          v37 = CFArrayGetValueAtIndex(MutableCopy, v36);
          v69.value = 0;
          appended = FigVisualContextXPCRemoteGetObjectID(v37, &v69);
          if ((_DWORD)appended)
            break;
          appended = FigCFArrayAppendInt64();
          if ((_DWORD)appended)
            break;
          if (Count == ++v36)
          {
            v63 = a5;
            goto LABEL_46;
          }
        }
        v26 = appended;
        CFRelease(v35);
        goto LABEL_18;
      }
    }
  }
  v63 = a5;
  v35 = CFArrayCreateMutable(v29, Count, MEMORY[0x1E0C9B378]);
  if (!v35)
  {
LABEL_43:
    v26 = FigSignalErrorAt();
    if ((_DWORD)v26)
    {
LABEL_18:
      *a5 = 1;
LABEL_19:
      CFRelease(v16);
      goto LABEL_93;
    }
    v63 = a5;
    v64 = v13;
    v35 = 0;
    goto LABEL_47;
  }
LABEL_46:
  v64 = v13;
  v44 = *(NSObject **)(v28 + 184);
  cf.value = MEMORY[0x1E0C809B0];
  *(_QWORD *)&cf.timescale = 3221225472;
  cf.epoch = (CMTimeEpoch)__remoteXPCItem_updateVisualContextArrayAndCopyIDArray_block_invoke;
  v72 = &__block_descriptor_48_e5_v8__0l;
  v73 = v28;
  v74 = MutableCopy;
  dispatch_sync(v44, &cf);
LABEL_47:
  v45 = 0;
  v43 = CFSTR("Server_VisualContextIDArray");
  MutableCopy = v35;
LABEL_48:
  v46 = 0;
  v47 = 0;
  *v63 = 0;
LABEL_81:
  v60 = v47;
  *v66 = CFRetain(v43);
  if (MutableCopy)
    v61 = CFRetain(MutableCopy);
  else
    v61 = 0;
  v13 = v64;
  *v65 = v61;
  if (v45)
    CFRelease(v45);
  if (v60)
    CFRelease(v60);
  if (v35)
    CFRelease(v35);
  CFRelease(v16);
  if (v46)
    CFRelease(v46);
  v26 = 0;
LABEL_93:
  FigXPCRemoteClientKillServerOnTimeout();
  objc_autoreleasePoolPop(v13);
  return v26;
}

void __remoteXPCItem_updateVisualContextArrayAndCopyIDArray_block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  v3 = *(const void **)(v2 + 192);
  *(_QWORD *)(v2 + 192) = v1;
  if (v1)
    CFRetain(v1);
  if (v3)
    CFRelease(v3);
}

uint64_t remoteXPCItem_GetDimensions(uint64_t a1, float *a2, float *a3)
{
  uint64_t ObjectID;
  double v6;
  double v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v12;

  v12 = 0;
  ObjectID = remoteXPCItem_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    v9 = ObjectID;
  }
  else
  {
    v6 = xpc_dictionary_get_double(0, "Width");
    v7 = xpc_dictionary_get_double(0, "Height");
    if (a2)
    {
      v8 = v6;
      *a2 = v8;
    }
    v9 = 0;
    if (a3)
    {
      v10 = v7;
      *a3 = v10;
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCItem_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectID;
  uint64_t CMTime;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  v6 = *MEMORY[0x1E0CA2E18];
  v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  ObjectID = remoteXPCItem_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)ObjectID))
  {
    CMTime = ObjectID;
  }
  else if (a2)
  {
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      *(_OWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v7;
    }
  }
  else
  {
    CMTime = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return CMTime;
}

uint64_t remoteXPCItem_SetCurrentTime(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v8);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID))
  {
    v6 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(0, "TimeFlags", a3);
    v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v6)
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCItem_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5)
{
  const void *v9;
  uint64_t ObjectID;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  xpc_object_t xdict;
  uint64_t v16;

  v14[0] = 0;
  v9 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!a3 || !a5)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_16;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, v14);
  if ((_DWORD)ObjectID)
    goto LABEL_16;
  if (!CFEqual(CFSTR("FormatDescriptionArray"), a3))
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_uint64(0, "TrackID", a2);
      ObjectID = FigXPCMessageSetCFString();
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)ObjectID)
          ObjectID = FigXPCMessageCopyCFObject();
      }
    }
LABEL_16:
    v12 = ObjectID;
    if (!v9)
      goto LABEL_11;
    goto LABEL_10;
  }
  xdict = 0;
  v16 = 0;
  v14[1] = 0;
  v11 = remoteXPCItem_GetObjectID(a1, &v16);
  if (!(_DWORD)v11)
  {
    v11 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v11)
    {
      xpc_dictionary_set_uint64(xdict, "TrackID", a2);
      v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)v11)
        v11 = FigXPCMessageCopyFormatDescriptionArray();
    }
  }
  v12 = v11;
  FigXPCRelease();
  FigXPCRelease();
  if (v9)
LABEL_10:
    CFRelease(v9);
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteXPCItem_MakeReadyForInspection(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  ObjectID = remoteXPCItem_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFArray(), (_DWORD)ObjectID))
  {
    v5 = ObjectID;
  }
  else
  {
    v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (a3 && !(_DWORD)v5)
      *a3 = xpc_dictionary_get_BOOL(0, "AlreadyReady");
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a4
    || (ObjectID = remoteXPCItem_GetObjectID(a1, &v7), !(_DWORD)ObjectID)
    && (ObjectID = FigXPCCreateBasicMessage(), !(_DWORD)ObjectID)
    && (ObjectID = FigXPCMessageSetCFArray(), !(_DWORD)ObjectID)
    && (ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply(), !(_DWORD)ObjectID)
    && (ObjectID = FigXPCMessageCopyCFData(), !(_DWORD)ObjectID))
  {
    ObjectID = FigSignalErrorAt();
  }
  v5 = ObjectID;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_CopyChapterImageData(uint64_t a1, int64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;

  v10 = 0;
  if (!a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_11:
    v8 = ObjectID;
    goto LABEL_9;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  xpc_dictionary_set_int64(0, "ChapterImageID", a2);
  xpc_dictionary_set_BOOL(0, "WantChapterImageFormatDesc", a4 != 0);
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCMessageCopyCFData();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  if (a4)
  {
    ObjectID = FigXPCMessageCopyFormatDescription();
    if ((_DWORD)ObjectID)
      goto LABEL_11;
  }
  v8 = 0;
  *a3 = 0;
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCItem_GetNextThumbnailTime(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t CMTime;
  uint64_t v8;

  v8 = 0;
  if (!a4)
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    CMTime = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCMessageSetCMTime();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  xpc_dictionary_set_uint64(0, "ThumbnailFlags", a3);
  CMTime = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)CMTime)
    CMTime = FigXPCMessageGetCMTime();
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return CMTime;
}

uint64_t remoteXPCItem_SetCurrentTimeWithRange(const void *a1, uint64_t a2, unsigned int a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v8);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID)
    || (xpc_dictionary_set_uint64(0, "TimeFlags", a3), ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID))
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v6)
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCItem_SetTrackProperty(uint64_t a1, int a2, const void *a3, CFNumberRef a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  uint64_t ObjectID;
  CFTypeID v11;
  const void *v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t updated;
  _QWORD v19[5];
  uint64_t valuePtr;

  v19[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!a3)
    goto LABEL_36;
  ObjectID = remoteXPCItem_GetObjectID(a1, v19);
  if ((_DWORD)ObjectID)
    goto LABEL_37;
  if (CFEqual(CFSTR("AudioProcessingTap"), a3))
  {
    valuePtr = 0;
    if (!a4 || (v11 = CFGetTypeID(a4), v11 == MTAudioProcessingTapGetTypeID()))
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
      v12 = *(const void **)(DerivedStorage + 200);
      *(_QWORD *)(DerivedStorage + 200) = a4;
      if (a4)
        CFRetain(a4);
      if (v12)
        CFRelease(v12);
      MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
      if (!a4)
        goto LABEL_13;
      ObjectID = MTAudioProcessingTapXPCRemoteGetObjectID((uint64_t)a4, &valuePtr);
      if (!(_DWORD)ObjectID)
      {
        a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
LABEL_13:
        v13 = a4;
        goto LABEL_14;
      }
LABEL_37:
      v15 = ObjectID;
      v13 = 0;
      goto LABEL_19;
    }
LABEL_36:
    ObjectID = FigSignalErrorAt();
    goto LABEL_37;
  }
  if (!CFEqual(CFSTR("ExtractionIDArray"), a3))
  {
    v13 = 0;
LABEL_14:
    v14 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v14)
    {
      xpc_dictionary_set_uint64(0, "TrackID", a2);
      v14 = FigXPCMessageSetCFString();
      if (!(_DWORD)v14)
      {
        v14 = FigXPCMessageSetCFObject();
        if (!(_DWORD)v14)
          v14 = FigXPCRemoteClientSendSyncMessage();
      }
    }
    v15 = v14;
    goto LABEL_19;
  }
  v17 = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  memset(&v19[1], 0, 32);
  if (*(_QWORD *)(v17 + 176))
  {
    v15 = 0;
  }
  else
  {
    updated = remoteXPCPlayer_GetObjectID((uint64_t)v9, &valuePtr);
    if (!(_DWORD)updated)
    {
      updated = FigXPCCreateBasicMessage();
      if (!(_DWORD)updated)
      {
        updated = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!(_DWORD)updated)
        {
          updated = FigXPCCreateBasicMessage();
          if (!(_DWORD)updated)
          {
            FigRemote_ShouldConnectToMediaparserdForFileParsing();
            FigRemote_ShouldConnectToMediaplaybackd();
            updated = FigMemoryRecipientCreateWithXPCMessage1AndUpdateXPCMessage2();
            if (!(_DWORD)updated)
              updated = FigXPCRemoteClientSendSyncMessageCreatingReply();
          }
        }
      }
    }
    v15 = updated;
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  v13 = 0;
  if (!(_DWORD)v15)
    goto LABEL_14;
LABEL_19:
  FigXPCRemoteClientKillServerOnTimeout();
  if (v9)
    CFRelease(v9);
  FigXPCRelease();
  if (v13)
    CFRelease(v13);
  return v15;
}

uint64_t remoteXPCItem_CopyFormatReader(uint64_t a1, CFTypeRef *a2)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v5;
  CFTypeRef cf;
  xpc_object_t xdict;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  cf = 0;
  xdict = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    v5 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  uint64 = xpc_dictionary_get_uint64(xdict, "FormatReaderObjectID");
  v5 = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 0, &cf);
  if ((_DWORD)v5)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
    cf = 0;
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_SeekToDateWithID(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
  {
LABEL_8:
    v5 = ObjectID;
    goto LABEL_6;
  }
  v5 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v5)
  {
    v5 = FigXPCMessageSetCFDate();
    if (!(_DWORD)v5)
    {
      xpc_dictionary_set_int64(0, "SeekID", a3);
      v5 = FigXPCRemoteClientSendSyncMessage();
    }
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_SetCurrentTimeWithRangeAndID(const void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v12);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID)
    || (xpc_dictionary_set_uint64(0, "TimeFlags", a3), ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID))
  {
    v10 = ObjectID;
  }
  else
  {
    xpc_dictionary_set_int64(0, "SeekID", a6);
    v10 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v10)
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCItem_CopyAsset(uint64_t a1, CFTypeRef *a2)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v5;
  CFTypeRef cf;
  xpc_object_t xdict;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  cf = 0;
  xdict = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    v5 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  uint64 = xpc_dictionary_get_uint64(xdict, "AssetObjectID");
  v5 = FigAssetXPCRemoteRetainCopiedAsset(uint64, &cf);
  if ((_DWORD)v5)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a2 = cf;
    cf = 0;
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCItem_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  const void *v6;
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  CFTypeRef v15;
  BOOL v16;
  CFTypeRef cf[3];
  uint64_t v18;

  v18 = 0;
  memset(cf, 0, sizeof(cf));
  v16 = 0;
  v15 = 0;
  if (!a2)
  {
    v9 = FigSignalErrorAt();
    v6 = 0;
    if ((_DWORD)v9)
    {
LABEL_15:
      FigXPCRemoteClientKillServerOnTimeout();
      v11 = 0;
      v13 = 0;
      if (!v6)
        goto LABEL_17;
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  v6 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (!v6)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_13;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, &v18);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)remoteXPCItem_handleSetProperty, &v16, cf, &v15);
    if (!(_DWORD)ObjectID)
    {
      if (!v16)
      {
        ObjectID = FigXPCCreateBasicMessage();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCMessageSetCFDictionary();
          if (!(_DWORD)ObjectID)
          {
            v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if ((_DWORD)v8)
            {
              v9 = v8;
              v10 = (const void *)FigCFDictionaryCopyArrayOfKeys();
              v11 = FigCFCopyCompactDescription();
              if (v10)
                CFRelease(v10);
              goto LABEL_11;
            }
            v12 = FigXPCMessageCopyCFDictionary();
LABEL_13:
            v9 = v12;
            if ((_DWORD)v12)
              goto LABEL_15;
            goto LABEL_14;
          }
        }
        goto LABEL_24;
      }
LABEL_14:
      v9 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v15, 0, a3);
      goto LABEL_15;
    }
  }
LABEL_24:
  v9 = ObjectID;
  v11 = 0;
LABEL_11:
  FigXPCRemoteClientKillServerOnTimeout();
LABEL_16:
  CFRelease(v6);
  v13 = (const void *)v11;
LABEL_17:
  if (cf[0])
    CFRelease(cf[0]);
  if (v15)
    CFRelease(v15);
  FigXPCRelease();
  FigXPCRelease();
  if (v13)
    CFRelease(v13);
  return v9;
}

uint64_t remoteXPCItem_ExtractAndRetainNextSampleBuffer(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  const void *v8;
  uint64_t ObjectID;
  uint64_t v10;
  uint64_t v12;

  CMBaseObjectGetDerivedStorage();
  v12 = 0;
  CMBaseObjectGetDerivedStorage();
  v8 = (const void *)remoteXPCItem_copyOwningPlayer();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 9))
  {
    ObjectID = FigSignalErrorAt();
LABEL_11:
    v10 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCItem_GetObjectID(a1, &v12);
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  xpc_dictionary_set_uint64(0, "TrackID", a2);
  xpc_dictionary_set_uint64(0, "ExtractionID", a3);
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_11;
  v10 = FigXPCMessageCopyCMSampleBuffer();
  if (!(_DWORD)v10)
    *a4 = 0;
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  if (v8)
    CFRelease(v8);
  return v10;
}

uint64_t remoteXPCItem_SetCurrentTimeWithOptions(const void *a1)
{
  uint64_t ObjectID;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = remoteXPCItem_GetObjectID((uint64_t)a1, &v5);
  if ((_DWORD)ObjectID
    || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCMTime(), (_DWORD)ObjectID)
    || (ObjectID = FigXPCMessageSetCFDictionary(), (_DWORD)ObjectID))
  {
    v3 = ObjectID;
  }
  else
  {
    v3 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v3)
      remoteXPCItem_HandleTimebaseSynchronizationUpdate(a1, 0);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlayer_BeginInterruption(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2)
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlayer_EndInterruption(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v5);
  if ((_DWORD)ObjectID)
  {
    v3 = ObjectID;
  }
  else
  {
    v2 = FigXPCCreateBasicMessage();
    if ((_DWORD)v2 || (v2 = FigXPCMessageSetCFString(), (_DWORD)v2))
      v3 = v2;
    else
      v3 = FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCPlayer_SetConnectionActive(uint64_t a1, int a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = remoteXPCPlayer_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      xpc_dictionary_set_BOOL(0, "Active", a2 != 0);
      v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t figremote_CreateCGImageParametersDictonary(CGImage *a1, const __CFAllocator *a2, CFDictionaryRef *a3)
{
  const __CFAllocator *v6;
  CGColorSpace *ColorSpace;
  CFPropertyListRef v8;
  int v9;
  uint64_t v10;
  CFIndex v11;
  const CGFloat *Decode;
  size_t NumberOfComponents;
  size_t v14;
  CFMutableArrayRef Mutable;
  __CFArray *v16;
  CFDictionaryRef *v17;
  uint64_t v18;
  CFNumberRef v19;
  CFNumberRef v20;
  _BOOL4 ShouldInterpolate;
  CFTypeRef *v22;
  CFDictionaryRef v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  CFTypeRef cf;
  uint64_t v29;
  uint64_t v30;
  int Type;
  int BytesPerRow;
  int BitsPerPixel;
  int BitsPerComponent;
  int Height;
  int valuePtr;
  void *values[6];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *keys[6];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v39 = 0u;
  v40 = 0u;
  v38 = 0u;
  v29 = 0;
  v30 = 0;
  keys[0] = CFSTR("CGImageWidth");
  valuePtr = CGImageGetWidth(a1);
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  keys[1] = CFSTR("CGImageHeight");
  Height = CGImageGetHeight(a1);
  values[1] = CFNumberCreate(v6, kCFNumberIntType, &Height);
  keys[2] = CFSTR("CGImageBitsPerComponent");
  BitsPerComponent = CGImageGetBitsPerComponent(a1);
  values[2] = CFNumberCreate(v6, kCFNumberIntType, &BitsPerComponent);
  keys[3] = CFSTR("CGImageBitsPerPixel");
  BitsPerPixel = CGImageGetBitsPerPixel(a1);
  values[3] = CFNumberCreate(v6, kCFNumberIntType, &BitsPerPixel);
  keys[4] = CFSTR("CGImageBytesPerRow");
  BytesPerRow = CGImageGetBytesPerRow(a1);
  values[4] = CFNumberCreate(v6, kCFNumberIntType, &BytesPerRow);
  ColorSpace = CGImageGetColorSpace(a1);
  Type = CGColorSpaceGetType();
  keys[5] = CFSTR("CGImageColorSpaceType");
  values[5] = CFNumberCreate(v6, kCFNumberIntType, &Type);
  if (Type == 1)
  {
    v8 = 0;
    v9 = 6;
  }
  else
  {
    v8 = CGColorSpaceCopyPropertyList(ColorSpace);
    v10 = MEMORY[0x19402EA30](v8, a2, &v30);
    if ((_DWORD)v10)
    {
      v24 = v10;
      LODWORD(v11) = 6;
      goto LABEL_18;
    }
    *(_QWORD *)&v43 = CFSTR("CGImageColorSpacePList");
    *(_QWORD *)&v38 = v30;
    v9 = 7;
  }
  keys[v9] = CFSTR("CGImageBitmapInfo");
  HIDWORD(v29) = CGImageGetBitmapInfo(a1);
  values[v9] = CFNumberCreate(v6, kCFNumberIntType, (char *)&v29 + 4);
  LODWORD(v11) = v9 + 1;
  Decode = CGImageGetDecode(a1);
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(ColorSpace);
  cf = v8;
  if (!Decode || (v14 = NumberOfComponents) == 0)
  {
    v17 = a3;
    goto LABEL_13;
  }
  Mutable = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v16 = Mutable;
    v17 = a3;
    v18 = 2 * v14;
    if (2 * v14)
    {
      do
      {
        v19 = CFNumberCreate(v6, kCFNumberCGFloatType, Decode);
        if (!v19)
          goto LABEL_25;
        v20 = v19;
        CFArrayAppendValue(v16, v19);
        CFRelease(v20);
        ++Decode;
      }
      while (--v18);
    }
    keys[v11] = CFSTR("CGImageDecodeArray");
    values[v11] = v16;
    LODWORD(v11) = v9 + 2;
LABEL_13:
    keys[v11] = CFSTR("CGImageShouldInterpolate");
    ShouldInterpolate = CGImageGetShouldInterpolate(a1);
    v22 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!ShouldInterpolate)
      v22 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    values[v11] = (void *)CFRetain(*v22);
    keys[(v11 + 1)] = CFSTR("CGImageRenderingIntent");
    LODWORD(v29) = CGImageGetRenderingIntent(a1);
    values[(v11 + 1)] = CFNumberCreate(v6, kCFNumberIntType, &v29);
    v11 = (v11 + 2);
    v23 = CFDictionaryCreate(a2, (const void **)keys, (const void **)values, v11, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v23)
    {
      v24 = 0;
      *v17 = v23;
LABEL_17:
      v8 = cf;
      goto LABEL_18;
    }
LABEL_25:
    v24 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v24 = FigSignalErrorAt();
LABEL_18:
  if (v8)
    CFRelease(v8);
  v25 = 0;
  do
  {
    v26 = values[v25];
    if (v26)
      CFRelease(v26);
    ++v25;
  }
  while (v11 != v25);
  return v24;
}

uint64_t figremote_CreateCGImageFromParametersDictionaryAndCGDataProvider(const __CFDictionary *a1, CGDataProvider *a2, uint64_t a3, CGImageRef *a4)
{
  const __CFNumber *Value;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  const __CFData *v14;
  const __CFData *v15;
  const UInt8 *BytePtr;
  CFIndex Length;
  CGColorSpace *DeviceRGB;
  const __CFNumber *v19;
  const __CFBoolean *v20;
  int v21;
  const __CFNumber *v22;
  const __CFArray *v23;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  CFIndex v27;
  CFPropertyListRef *v28;
  const __CFNumber *ValueAtIndex;
  CFPropertyListRef *decode;
  CGImageRef v31;
  uint64_t v32;
  uint64_t intent;
  size_t bytesPerRow;
  uint64_t v36;
  uint64_t valuePtr;
  CFPropertyListRef plist[7];

  plist[6] = *(CFPropertyListRef *)MEMORY[0x1E0C80C00];
  v36 = 0;
  valuePtr = 0;
  intent = 0;
  bytesPerRow = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageWidth"));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, (char *)&valuePtr + 4);
    v9 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageHeight"));
    if (!v9)
      return FigSignalErrorAt();
    CFNumberGetValue(v9, kCFNumberIntType, &valuePtr);
    v10 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageBitsPerComponent"));
    if (!v10)
      return FigSignalErrorAt();
    CFNumberGetValue(v10, kCFNumberIntType, (char *)&v36 + 4);
    v11 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageBitsPerPixel"));
    if (!v11)
      return FigSignalErrorAt();
    CFNumberGetValue(v11, kCFNumberIntType, &v36);
    v12 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageBytesPerRow"));
    if (!v12)
      return FigSignalErrorAt();
    CFNumberGetValue(v12, kCFNumberIntType, (char *)&bytesPerRow + 4);
    v13 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageColorSpaceType"));
    if (!v13)
      return FigSignalErrorAt();
    CFNumberGetValue(v13, kCFNumberIntType, &bytesPerRow);
    if ((_DWORD)bytesPerRow == 1)
      goto LABEL_13;
    plist[0] = 0;
    v14 = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("CGImageColorSpacePList"));
    if (!v14)
      goto LABEL_13;
    v15 = v14;
    BytePtr = CFDataGetBytePtr(v14);
    Length = CFDataGetLength(v15);
    MEMORY[0x19402EA9C](BytePtr, Length, a3, plist);
    if (!plist[0])
      goto LABEL_13;
    DeviceRGB = CGColorSpaceCreateWithPropertyList(plist[0]);
    if (plist[0])
      CFRelease(plist[0]);
    if (!DeviceRGB)
LABEL_13:
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
    v19 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageBitmapInfo"));
    if (!v19)
      goto LABEL_31;
    CFNumberGetValue(v19, kCFNumberIntType, (char *)&intent + 4);
    v20 = (const __CFBoolean *)CFDictionaryGetValue(a1, CFSTR("CGImageShouldInterpolate"));
    if (!v20)
      goto LABEL_31;
    v21 = CFBooleanGetValue(v20);
    v22 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("CGImageRenderingIntent"));
    if (!v22)
      goto LABEL_31;
    CFNumberGetValue(v22, kCFNumberIntType, &intent);
    v23 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("CGImageDecodeArray"));
    if (v23)
    {
      v24 = v23;
      Count = CFArrayGetCount(v23);
      if (Count > 6)
        goto LABEL_31;
      v26 = Count;
      if (Count >= 1)
      {
        v27 = 0;
        v28 = plist;
        while (1)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v24, v27);
          if (!ValueAtIndex)
            break;
          CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, v28);
          ++v27;
          ++v28;
          if (v26 == v27)
            goto LABEL_23;
        }
LABEL_31:
        v32 = FigSignalErrorAt();
        if (!DeviceRGB)
          return v32;
        goto LABEL_29;
      }
LABEL_23:
      decode = plist;
    }
    else
    {
      decode = 0;
    }
    v31 = CGImageCreate(SHIDWORD(valuePtr), (int)valuePtr, SHIDWORD(v36), (int)v36, SHIDWORD(bytesPerRow), DeviceRGB, HIDWORD(intent), a2, (const CGFloat *)decode, v21 != 0, (CGColorRenderingIntent)intent);
    *a4 = v31;
    if (v31)
      v32 = 0;
    else
      v32 = 4294954510;
    if (!DeviceRGB)
      return v32;
LABEL_29:
    CGColorSpaceRelease(DeviceRGB);
    return v32;
  }
  return FigSignalErrorAt();
}

uint64_t FigRemote_CreateSerializedDataForCGImage(CGImage *a1, vm_address_t *a2, _DWORD *a3, vm_size_t a4, vm_address_t *a5, _DWORD *a6)
{
  vm_map_t *v6;
  uint64_t v13;
  uint64_t v14;
  CFDictionaryRef v15;
  vm_size_t Length;
  uint64_t v17;
  void *v18;
  const UInt8 *BytePtr;
  _DWORD *v20;
  __IOSurface *Property;
  __IOSurface *v22;
  OSType PixelFormat;
  _DWORD *v24;
  mach_port_t MachPort;
  const __CFData *v26;
  CGDataProvider *DataProvider;
  const __CFData *v28;
  uint64_t v29;
  void *v30;
  const UInt8 *v31;
  uint64_t v32;
  const __CFDictionary *cf;
  vm_address_t v35;
  vm_address_t address;
  CFDataRef theData;
  CFDictionaryRef v38;

  theData = 0;
  v38 = 0;
  v35 = 0;
  address = 0;
  v6 = (vm_map_t *)MEMORY[0x1E0C83DA0];
  if (!a2 || !a3 || !a5 || !a6)
  {
    v32 = FigSignalErrorAt();
    a4 = 0;
    Length = 0;
    v26 = 0;
    goto LABEL_27;
  }
  v13 = *MEMORY[0x1E0C9AE00];
  v14 = figremote_CreateCGImageParametersDictonary(a1, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v38);
  v15 = v38;
  if ((_DWORD)v14 || (v14 = MEMORY[0x19402EA30](v38, v13, &theData), (_DWORD)v14))
  {
    v32 = v14;
    v26 = 0;
    Length = 0;
  }
  else
  {
    Length = CFDataGetLength(theData);
    if (Length)
    {
      v17 = vm_allocate(*v6, &address, Length, 1543503873);
      if (!(_DWORD)v17)
      {
        v18 = (void *)address;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v18, BytePtr, Length);
        v20 = (_DWORD *)MEMORY[0x1E0CA1FC0];
        if (*MEMORY[0x1E0CA1FC0] == 1)
          kdebug_trace();
        Property = (__IOSurface *)CGImageGetProperty();
        if (Property)
        {
          v22 = Property;
          PixelFormat = IOSurfaceGetPixelFormat(Property);
          if (PixelFormat == 1111970369 || PixelFormat == 1380411457)
          {
            cf = v15;
            v24 = (_DWORD *)a4;
            MachPort = IOSurfaceCreateMachPort(v22);
            v26 = 0;
            LODWORD(a4) = 0;
LABEL_21:
            v6 = (vm_map_t *)MEMORY[0x1E0C83DA0];
            v32 = 0;
            *a2 = v35;
            *a3 = a4;
            *a5 = address;
            *a6 = Length;
            *v24 = MachPort;
            Length = 0;
            a4 = 0;
            goto LABEL_22;
          }
          v32 = FigSignalErrorAt();
          v26 = 0;
        }
        else
        {
          DataProvider = CGImageGetDataProvider(a1);
          v28 = CGDataProviderCopyData(DataProvider);
          v26 = v28;
          if (v28)
          {
            cf = v15;
            v24 = (_DWORD *)a4;
            a4 = CFDataGetLength(v28);
            if (a4)
            {
              v29 = vm_allocate(*MEMORY[0x1E0C83DA0], &v35, a4, 1543503873);
              if (!(_DWORD)v29)
              {
                v30 = (void *)v35;
                v31 = CFDataGetBytePtr(v26);
                memcpy(v30, v31, a4);
                if (*v20 == 1)
                  kdebug_trace();
                MachPort = 0;
                goto LABEL_21;
              }
            }
            else
            {
              v29 = FigSignalErrorAt();
            }
            v32 = v29;
            v6 = (vm_map_t *)MEMORY[0x1E0C83DA0];
LABEL_22:
            v15 = cf;
            if (!cf)
              goto LABEL_27;
LABEL_26:
            CFRelease(v15);
            goto LABEL_27;
          }
          v32 = FigSignalErrorAt();
        }
        a4 = 0;
        v6 = (vm_map_t *)MEMORY[0x1E0C83DA0];
        if (!v15)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      v17 = FigSignalErrorAt();
    }
    v32 = v17;
    v26 = 0;
  }
  a4 = 0;
  if (v15)
    goto LABEL_26;
LABEL_27:
  if (theData)
    CFRelease(theData);
  if (v26)
    CFRelease(v26);
  if (a4 && v35)
    MEMORY[0x19403197C](*v6, v35, a4);
  if (Length && address)
    MEMORY[0x19403197C](*v6, address, Length);
  return v32;
}

uint64_t FigRemote_CreateCGImageFromSerializedDataInBlockBuffer(CMBlockBufferRef theBuffer, const __CFDictionary *a2, uint64_t a3, CGImageRef *a4)
{
  uint64_t DataPointer;
  CGDataProvider *v9;
  CGDataProvider *v10;
  uint64_t CGImageFromParametersDictionaryAndCGDataProvider;
  CMBlockBufferRef v12;
  char *dataPointerOut;
  size_t totalLengthOut;
  size_t lengthAtOffsetOut;

  if (theBuffer)
  {
    totalLengthOut = 0;
    lengthAtOffsetOut = 0;
    dataPointerOut = 0;
    if (a2)
    {
      DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
      if ((_DWORD)DataPointer)
      {
LABEL_11:
        CGImageFromParametersDictionaryAndCGDataProvider = DataPointer;
        v12 = theBuffer;
        goto LABEL_7;
      }
      if (lengthAtOffsetOut == totalLengthOut)
      {
        CFRetain(theBuffer);
        v9 = CGDataProviderCreateWithData(theBuffer, dataPointerOut, lengthAtOffsetOut, (CGDataProviderReleaseDataCallback)figremote_releaseImageDataBlockBufferForCGDataProvider);
        if (v9)
        {
          v10 = v9;
          CGImageFromParametersDictionaryAndCGDataProvider = figremote_CreateCGImageFromParametersDictionaryAndCGDataProvider(a2, v9, a3, a4);
          v12 = v10;
LABEL_7:
          CFRelease(v12);
          return CGImageFromParametersDictionaryAndCGDataProvider;
        }
      }
    }
    DataPointer = FigSignalErrorAt();
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

void figremote_releaseImageDataBlockBufferForCGDataProvider(CFTypeRef cf, uint64_t a2, uint64_t a3)
{
  if (cf && a2)
  {
    if (a3)
      CFRelease(cf);
  }
}

uint64_t FigRemote_SetSerializedAuth(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t, CFTypeRef);
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  v4 = MEMORY[0x19402EA9C](a2, a3, *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v4)
    return v4;
  v5 = cf;
  v6 = *(uint64_t (**)(uint64_t, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v6)
    v7 = v6(a1, v5);
  else
    v7 = 4294954514;
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t FigRemote_CreateCommonMetadataBinaryPListData(const __CFDictionary *a1, CFAllocatorRef allocator, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t v8;

  if (!a1)
    JUMPOUT(0x19402EA30);
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)figremote_convertMetadataLocalePropertyFromCFLocaleToCFString, Mutable);
  v8 = MEMORY[0x19402EA30](v7, allocator, a3);
  CFRelease(v7);
  return v8;
}

void figremote_convertMetadataLocalePropertyFromCFLocaleToCFString(const void *a1, const __CFDictionary *a2, void *cf)
{
  const __CFAllocator *v6;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const void *Value;
  __CFDictionary *v10;
  __CFDictionary *v11;

  if (a2)
  {
    if (a1)
    {
      if (cf)
      {
        v6 = CFGetAllocator(cf);
        MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
        if (MutableCopy)
        {
          v8 = MutableCopy;
          Value = CFDictionaryGetValue(MutableCopy, CFSTR("MetadataProperties"));
          if (Value)
          {
            v10 = FigRemote_CopyMetadataItemWithLocaleAsCFString(v6, Value);
            if (v10)
            {
              v11 = v10;
              CFDictionaryReplaceValue(v8, CFSTR("MetadataProperties"), v10);
              CFRelease(v11);
            }
          }
          CFDictionaryAddValue((CFMutableDictionaryRef)cf, a1, v8);
          CFRelease(v8);
        }
      }
    }
  }
}

uint64_t FigRemote_CreateCommonMetadataFromBinaryPListData(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFMutableDictionaryRef *a4)
{
  uint64_t v6;
  CFTypeID v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  if (!a4)
    return FigSignalErrorAt();
  v6 = MEMORY[0x19402EA9C](a1, a2, a3, &cf);
  if ((_DWORD)v6)
    goto LABEL_10;
  if (!cf)
  {
    v9 = 0;
    goto LABEL_8;
  }
  v7 = CFGetTypeID(cf);
  if (v7 != CFDictionaryGetTypeID()
    || (Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
  {
    v6 = FigSignalErrorAt();
LABEL_10:
    v10 = v6;
    goto LABEL_11;
  }
  v9 = Mutable;
  CFDictionaryApplyFunction((CFDictionaryRef)cf, (CFDictionaryApplierFunction)figremote_convertMetadataLocalePropertyFromCFStringToCFLocale, Mutable);
LABEL_8:
  v10 = 0;
  *a4 = v9;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v10;
}

void figremote_convertMetadataLocalePropertyFromCFStringToCFLocale(const void *a1, const __CFDictionary *a2, void *cf)
{
  const __CFAllocator *v6;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const void *Value;
  __CFDictionary *v10;
  __CFDictionary *v11;

  if (a2)
  {
    if (a1)
    {
      if (cf)
      {
        v6 = CFGetAllocator(cf);
        MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a2);
        if (MutableCopy)
        {
          v8 = MutableCopy;
          Value = CFDictionaryGetValue(MutableCopy, CFSTR("MetadataProperties"));
          if (Value)
          {
            v10 = FigRemote_CopyMetadataItemWithLocaleAsCFLocale(v6, Value);
            if (v10)
            {
              v11 = v10;
              CFDictionaryReplaceValue(v8, CFSTR("MetadataProperties"), v10);
              CFRelease(v11);
            }
          }
          CFDictionaryAddValue((CFMutableDictionaryRef)cf, a1, v8);
          CFRelease(v8);
        }
      }
    }
  }
}

uint64_t FigTTMLPCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  const CFArrayCallBacks *v10;
  uint64_t v11;

  if (!a4)
    return FigSignalErrorAt();
  FigTTMLNodeGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    return v8;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
  if ((_DWORD)v8)
    return v8;
  v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
  if ((_DWORD)v8)
    return v8;
  v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  *(_QWORD *)(DerivedStorage + 136) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 144) = CFArrayCreateMutable(a1, 0, v10);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v11 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLP_ConsumeChildNode, (uint64_t *)a3);
  if (!(_DWORD)v11)
    *a4 = 0;
  return v11;
}

uint64_t figTTMLP_ConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v7;
  uint64_t InlineClassNode;
  __CFArray *v9;
  void *v10;
  CFAllocatorRef v11;
  uint64_t v12;
  uint64_t v14;
  CFStringRef theString;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theString = 0;
  value = 0;
  v7 = CFGetAllocator(*a2);
  InlineClassNode = FigTTMLParseAndCreateInlineClassNode(v7, a1, (__int128 *)a2, (CFTypeRef *)&value);
  if ((_DWORD)InlineClassNode)
    goto LABEL_24;
  if (!value)
  {
    v11 = CFGetAllocator(*a2);
    InlineClassNode = FigTTMLParseAndCreateAnimationClassNode((uint64_t)v11, a1, (uint64_t)a2, &value);
    if (!(_DWORD)InlineClassNode)
    {
      v10 = value;
      if (!value)
      {
        v14 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
        v12 = v14;
        if (a3 && !(_DWORD)v14)
          goto LABEL_12;
        goto LABEL_14;
      }
      v9 = *(__CFArray **)(DerivedStorage + 144);
      goto LABEL_10;
    }
LABEL_24:
    v12 = InlineClassNode;
    goto LABEL_14;
  }
  InlineClassNode = FigTTMLNodeCopyNodeValue((uint64_t)value, &theString);
  if ((_DWORD)InlineClassNode)
    goto LABEL_24;
  if (theString && !CFStringGetLength(theString))
  {
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    goto LABEL_11;
  }
  v9 = *(__CFArray **)(DerivedStorage + 136);
  v10 = value;
LABEL_10:
  CFArrayAppendValue(v9, v10);
LABEL_11:
  if (a3)
  {
LABEL_12:
    v12 = 0;
    *a3 = value;
    value = 0;
    goto LABEL_16;
  }
  v12 = 0;
LABEL_14:
  if (value)
    CFRelease(value);
LABEL_16:
  if (theString)
    CFRelease(theString);
  return v12;
}

void figTTMLP_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
    CFRelease(v2);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLP_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("p: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLP_CopyChildNodeArray(uint64_t a1, uint64_t *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = FigCFArrayCreateConcatenationOfTwoArrays();
  return 0;
}

uint64_t FigTTMLP_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 4;
  return 0;
}

uint64_t FigStreamPlaylistParserStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigStreamPlaylistParserStartServer_block_invoke;
  block[3] = &unk_1E2F8C3A8;
  block[4] = &v3;
  if (FigStreamPlaylistParserStartServer_sFigStreamPlaylistParserServerSetupOnce != -1)
    dispatch_once(&FigStreamPlaylistParserStartServer_sFigStreamPlaylistParserServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t streamPlaylistParserServer_replyingMessageHandler()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t streamPlaylistParserServer_noReplyMessageHandler()
{
  uint64_t result;

  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
    return 4294951138;
  return result;
}

void streamPlaylistParserServerServerConnectionObj_finalize(_QWORD *a1)
{
  void *v2;
  const void *v3;
  const void *v4;

  v2 = (void *)a1[2];
  if (v2)
  {
    a1[2] = 0;
    xpc_release(v2);
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

CFStringRef streamPlaylistParserServerServerConnectionObj_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigPlaylistParserServerServerConnectionObj %p objectID %lld]"), a1, *(_QWORD *)(a1 + 24));
}

uint64_t FigMutableMovieRemoteCreateEmpty(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  const __CFAllocator *v9;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  uint64_t Internal;
  uint64_t uint64;
  uint64_t v15;

  if (!a5)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_20;
  }
  v8 = remoteXPCMutableMovieClient_EnsureClientEstablished();
  if ((_DWORD)v8)
    goto LABEL_20;
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
    goto LABEL_20;
  v8 = FigXPCMessageSetCFString();
  if ((_DWORD)v8)
    goto LABEL_20;
  if (a4)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (a3)
    {
      Count = CFDictionaryGetCount(a3);
      MutableCopy = CFDictionaryCreateMutableCopy(v9, Count + 4, a3);
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    }
    v12 = MutableCopy;
    if (MutableCopy)
    {
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(MutableCopy, CFSTR("PreferredVolume"), a4);
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(v12, CFSTR("PreferredRate"), a4);
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(v12, CFSTR("MovieMatrix"), a4);
      setOptionsDictionaryEntryForMoviePropertyFromFormatReader(v12, CFSTR("Metadata"), a4);
    }
    Internal = FigXPCMessageSetCFDictionary();
    if ((_DWORD)Internal)
      goto LABEL_16;
    goto LABEL_14;
  }
  v8 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v8)
  {
LABEL_20:
    v15 = v8;
    goto LABEL_18;
  }
  v12 = 0;
LABEL_14:
  Internal = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)Internal)
  {
    uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
    Internal = remoteXPCMutableMovie_CreateInternal(uint64, a5);
  }
LABEL_16:
  v15 = Internal;
  if (v12)
    CFRelease(v12);
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  return v15;
}

uint64_t remoteXPCMutableMovieClient_EnsureClientEstablished()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __remoteXPCMutableMovieClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E2F8C4B0;
  block[4] = &v3;
  if (gMutableMovieRemoteClientSetupOnce != -1)
    dispatch_once(&gMutableMovieRemoteClientSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void setOptionsDictionaryEntryForMoviePropertyFromFormatReader(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const void *, _QWORD, void **);
  void *value;

  value = 0;
  if (!CFDictionaryContainsKey(a1, a2))
  {
    FigBaseObject = FigFormatReaderGetFigBaseObject(a3);
    v7 = *(void (**)(uint64_t, const void *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
    {
      v7(FigBaseObject, a2, *MEMORY[0x1E0C9AE00], &value);
      if (value)
      {
        CFDictionaryAddValue(a1, a2, value);
        CFRelease(value);
      }
    }
  }
}

uint64_t remoteXPCMutableMovie_CreateInternal(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator *v4;
  uint64_t result;
  _QWORD *DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableSetRef v8;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigMutableMovieGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = a1;
    Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    DerivedStorage[3] = Mutable;
    if (Mutable && (v8 = CFSetCreateMutable(v4, 0, MEMORY[0x1E0C9B3B0]), (DerivedStorage[4] = v8) != 0))
    {
      FigXPCRemoteClientAssociateObject();
      result = FigStartMonitoringMediaServicesProcessDeath();
    }
    else
    {
      result = FigSignalErrorAt();
    }
  }
  *a2 = 0;
  return result;
}

uint64_t FigMutableMovieRemoteCreateFromFormatReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t ObjectID;
  uint64_t Internal;
  uint64_t uint64;
  uint64_t value;
  xpc_object_t v13;
  xpc_object_t xdict;

  v13 = 0;
  xdict = 0;
  value = 0;
  if (!a2 || !a5)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    Internal = ObjectID;
    goto LABEL_11;
  }
  ObjectID = remoteXPCMutableMovieClient_EnsureClientEstablished();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigFormatReaderXPCRemoteGetObjectID(a2, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  xpc_dictionary_set_uint64(xdict, "FormatReader", value);
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  if (a4)
  {
    ObjectID = FigXPCMessageSetCFDictionary();
    if ((_DWORD)ObjectID)
      goto LABEL_13;
  }
  Internal = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)Internal)
  {
    uint64 = xpc_dictionary_get_uint64(v13, (const char *)*MEMORY[0x1E0CA36A0]);
    Internal = remoteXPCMutableMovie_CreateInternal(uint64, a5);
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return Internal;
}

uint64_t FigMutableMovieRemoteCreateWithURL(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t uint64;
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef cf;
  CFTypeRef v14;
  CFTypeRef v15;
  xpc_object_t xdict;
  void *v17;

  xdict = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  cf = 0;
  if (!a2)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_19;
  }
  if (a5)
  {
    v8 = remoteXPCMutableMovieClient_EnsureClientEstablished();
    if (!(_DWORD)v8)
    {
      if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
      {
        v8 = FigXPCCreateBasicMessage();
        if ((_DWORD)v8)
          goto LABEL_26;
        v8 = remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage(a2, 0, v17, &cf);
        if ((_DWORD)v8)
          goto LABEL_26;
      }
      else
      {
        v8 = FigXPCCreateBasicMessage();
        if ((_DWORD)v8)
          goto LABEL_26;
        v8 = FigXPCMessageSetCFURL();
        if ((_DWORD)v8)
          goto LABEL_26;
        v8 = remoteXPCMutableMovie_SandboxRegisterURLAddToXPCMessageAndCopyRegistration((uint64_t)a2, (uint64_t)v17, 0x1932C95B5, &v14);
        if ((_DWORD)v8)
          goto LABEL_26;
      }
      v8 = FigXPCMessageSetCFString();
      if (!(_DWORD)v8)
      {
        if (!a4 || (v8 = FigXPCMessageSetCFDictionary(), !(_DWORD)v8))
        {
          v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)v8)
          {
            uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
            v10 = remoteXPCMutableMovie_CreateInternal(uint64, &v15);
            if (!(_DWORD)v10)
            {
              v11 = v15;
              remoteXPCMutableMovie_storeSandboxRegistration((uint64_t)v15, v14);
              *a5 = v11;
              v15 = 0;
            }
            goto LABEL_17;
          }
        }
      }
    }
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
LABEL_26:
  v10 = v8;
LABEL_17:
  if (cf)
    CFRelease(cf);
LABEL_19:
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v10;
}

uint64_t remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage(const __CFURL *a1, unsigned int a2, void *a3, CFTypeRef *a4)
{
  uint64_t ObjectID;
  uint64_t value;
  CFTypeRef cf;

  value = 0;
  cf = 0;
  ObjectID = remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID(a1, a2, &cf, &value);
  if ((_DWORD)ObjectID)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    xpc_dictionary_set_uint64(a3, "ByteStream", value);
    *a4 = cf;
  }
  return ObjectID;
}

uint64_t remoteXPCMutableMovie_SandboxRegisterURLAddToXPCMessageAndCopyRegistration(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
  if ((_DWORD)v5)
    return v5;
  v6 = 0;
  *a4 = 0;
  return v6;
}

void remoteXPCMutableMovie_storeSandboxRegistration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  __CFSet *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = *(__CFSet **)(DerivedStorage + 40);
  if (Mutable
    || (Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]),
        (*(_QWORD *)(DerivedStorage + 40) = Mutable) != 0))
  {
    if (a2)
      CFSetAddValue(Mutable, a2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigMutableMovieRemoteCreateFromData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t Internal;
  uint64_t uint64;

  if (!a2 || !a5)
  {
    v7 = FigSignalErrorAt();
LABEL_13:
    Internal = v7;
    goto LABEL_11;
  }
  v7 = remoteXPCMutableMovieClient_EnsureClientEstablished();
  if ((_DWORD)v7)
    goto LABEL_13;
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7)
    goto LABEL_13;
  v7 = FigXPCMessageSetCFObject();
  if ((_DWORD)v7)
    goto LABEL_13;
  v7 = FigXPCMessageSetCFString();
  if ((_DWORD)v7)
    goto LABEL_13;
  if (a4)
  {
    v7 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v7)
      goto LABEL_13;
  }
  Internal = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)Internal)
  {
    uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
    Internal = remoteXPCMutableMovie_CreateInternal(uint64, a5);
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return Internal;
}

uint64_t remoteXPCMutableMovieClient_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
    *(_BYTE *)(result + 9) = 1;
  return result;
}

uint64_t remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID(const __CFURL *a1, unsigned int a2, CFTypeRef *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t ObjectID;
  uint64_t v9;
  CFTypeRef cf;

  v9 = 0;
  cf = 0;
  v6 = FigByteStreamRemoteCreateWithURL(*MEMORY[0x1E0C9AE00], a1, a2, &cf);
  if ((_DWORD)v6)
  {
    ObjectID = v6;
  }
  else
  {
    ObjectID = FigByteStreamRemoteGetObjectID((uint64_t)cf, &v9);
    if (!(_DWORD)ObjectID)
    {
      *a3 = cf;
      *a4 = v9;
      return ObjectID;
    }
  }
  if (cf)
    CFRelease(cf);
  return ObjectID;
}

uint64_t remoteXPCMutableMovie_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t ObjectID;
  uint64_t v5;
  _QWORD v7[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[0] = 0;
  v7[1] = 0;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v5 = 0;
  }
  else
  {
    v3 = DerivedStorage;
    ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v7);
    if ((_DWORD)ObjectID
      || (*(_BYTE *)(v3 + 8) = 1,
          FigStopMonitoringMediaServicesProcessDeath(),
          FigXPCRemoteClientDisassociateObject(),
          !*(_BYTE *)(v3 + 9))
      && ((ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
       || (ObjectID = FigXPCRemoteClientSendSyncMessage(), (_DWORD)ObjectID)))
    {
      v5 = ObjectID;
    }
    else
    {
      v5 = 0;
      *(_QWORD *)v3 = 0;
    }
  }
  FigXPCRelease();
  return v5;
}

void remoteXPCMutableMovie_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  remoteXPCMutableMovie_Invalidate(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v2 = (const void *)DerivedStorage[2];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[2] = 0;
  }
  v3 = (const void *)DerivedStorage[3];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[3] = 0;
  }
  v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  v5 = (const void *)DerivedStorage[5];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[5] = 0;
  }
}

__CFString *remoteXPCMutableMovie_CopyDebugDescription(const void *a1)
{
  _QWORD *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  CFAllocatorRef v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  v6 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigMutableMovieXPCRemote %p retainCount: %ld allocator: %p ObjectID: %016llx>"), a1, v5, v6, *DerivedStorage);
  return Mutable;
}

uint64_t remoteXPCMutableMovie_CopyProperty(uint64_t a1, const void *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  v6 = 0;
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
    v4 = ObjectID;
  }
  else
  {
    v4 = FigXPCSendStdCopyPropertyMessage();
    if (!(_DWORD)v4)
      CFEqual(a2, CFSTR("Metadata"));
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableMovie_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t ObjectID;
  uint64_t MetadataBinaryPListData;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeID v10;
  uint64_t DerivedStorage;
  const void *v12;
  CFTypeRef cf;
  uint64_t v14;

  cf = 0;
  v14 = 0;
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v14);
  if ((_DWORD)ObjectID)
    goto LABEL_18;
  if (!CFEqual(a2, CFSTR("Metadata")))
  {
    if (!CFEqual(a2, CFSTR("DefaultMediaDataStorageURL")))
      goto LABEL_4;
    if (!a3 || (v10 = CFGetTypeID(a3), v10 == CFURLGetTypeID()))
    {
      if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
      {
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        v12 = *(const void **)(DerivedStorage + 16);
        *(_QWORD *)(DerivedStorage + 16) = a3;
        if (a3)
          CFRetain(a3);
        if (v12)
          CFRelease(v12);
      }
      goto LABEL_4;
    }
    ObjectID = FigSignalErrorAt();
LABEL_18:
    v8 = ObjectID;
    goto LABEL_6;
  }
  MetadataBinaryPListData = FigRemote_CreateMetadataBinaryPListData((const __CFArray *)a3, *MEMORY[0x1E0C9AE00], (uint64_t)&cf);
  v7 = cf;
  if ((_DWORD)MetadataBinaryPListData)
  {
    v8 = MetadataBinaryPListData;
    if (!cf)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_4:
  v8 = FigXPCSendStdSetPropertyMessage();
  v7 = cf;
  if (cf)
LABEL_5:
    CFRelease(v7);
LABEL_6:
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || !a2 || *(_BYTE *)(DerivedStorage + 9))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t remoteXPCMutableMovie_CopyFormatReader(uint64_t a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t ObjectID;
  uint64_t uint64;
  uint64_t v9;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t xdict;

  v12 = 0;
  xdict = 0;
  v11 = 0;
  if (a4)
  {
    ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v11);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        xpc_dictionary_set_BOOL(xdict, "MakeImmutableSnapshot", a2 != 0);
        if (!a3 || (ObjectID = FigXPCMessageSetCFDictionary(), !(_DWORD)ObjectID))
        {
          ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)ObjectID)
          {
            uint64 = xpc_dictionary_get_uint64(v12, "FormatReader");
            if (!uint64)
            {
              v9 = 0;
              goto LABEL_11;
            }
            ObjectID = FigFormatReaderXPCRemoteRetainCopiedFormatReader(uint64, 0, a4);
          }
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v9 = ObjectID;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableMovie_WriteHeader(uint64_t a1, uint64_t a2, const __CFURL *a3, uint64_t a4, int a5)
{
  uint64_t ObjectID;
  uint64_t v10;
  int DoesFileExist;
  int v12;
  unsigned int v13;
  uint64_t v14;
  CFTypeRef cf;
  CFTypeRef v17;
  uint64_t v18;
  xpc_object_t xdict;

  v18 = 0;
  xdict = 0;
  cf = 0;
  v17 = 0;
  if (!a3)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_29;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v18);
  if ((_DWORD)ObjectID)
  {
LABEL_29:
    v14 = ObjectID;
    goto LABEL_24;
  }
  if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
  {
    v10 = FigXPCCreateBasicMessage();
    if ((_DWORD)v10)
      goto LABEL_27;
    DoesFileExist = FigFileDoesFileExist();
    v12 = a5 ? 34 : 2;
    v13 = DoesFileExist ? v12 : 18;
    v10 = remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage(a3, v13, xdict, &cf);
    if ((_DWORD)v10)
      goto LABEL_27;
  }
  else
  {
    v10 = FigXPCCreateBasicMessage();
    if ((_DWORD)v10)
      goto LABEL_27;
    v10 = remoteXPCMutableMovie_SandboxRegisterURLAddToXPCMessageAndCopyRegistration((uint64_t)a3, (uint64_t)xdict, 0x1932C95B5, &v17);
    if ((_DWORD)v10)
      goto LABEL_27;
    v10 = FigXPCMessageSetCFURL();
    if ((_DWORD)v10)
      goto LABEL_27;
    xpc_dictionary_set_BOOL(xdict, "TruncateDestURL", a5 != 0);
  }
  v10 = FigXPCMessageSetCFString();
  if (!(_DWORD)v10)
  {
    if (!a4 || (v10 = FigXPCMessageSetCFDictionary(), !(_DWORD)v10))
    {
      v14 = FigXPCRemoteClientSendSyncMessage();
      if (!(_DWORD)v14)
        remoteXPCMutableMovie_storeSandboxRegistration(a1, v17);
      goto LABEL_22;
    }
  }
LABEL_27:
  v14 = v10;
LABEL_22:
  if (cf)
    CFRelease(cf);
LABEL_24:
  if (v17)
    CFRelease(v17);
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

uint64_t remoteXPCMutableMovie_CopyHeaderData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t ObjectID;
  uint64_t v8;
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  if (!a5)
  {
    ObjectID = FigSignalErrorAt();
LABEL_12:
    v8 = ObjectID;
    goto LABEL_10;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v10);
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  if (a3)
  {
    ObjectID = FigXPCMessageSetCFDictionary();
    if ((_DWORD)ObjectID)
      goto LABEL_12;
  }
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_12;
  v8 = FigXPCMessageCopyCFData();
  if (!(_DWORD)v8)
    *a5 = 0;
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_AddTrack(uint64_t a1, unsigned int a2, const __CFDictionary *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t ObjectID;
  const __CFAllocator *v10;
  CFIndex Count;
  __CFDictionary *MutableCopy;
  __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  xpc_object_t v18;
  xpc_object_t xdict;

  v18 = 0;
  xdict = 0;
  v17 = 0;
  if (!a5)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_19;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v17);
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  xpc_dictionary_set_int64(xdict, "MediaType", a2);
  if (!a4)
  {
    ObjectID = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)ObjectID)
    {
      v13 = 0;
      goto LABEL_13;
    }
LABEL_19:
    v15 = ObjectID;
    goto LABEL_17;
  }
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3)
  {
    Count = CFDictionaryGetCount(a3);
    MutableCopy = CFDictionaryCreateMutableCopy(v10, Count + 6, a3);
  }
  else
  {
    MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  v13 = MutableCopy;
  if (MutableCopy)
  {
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(MutableCopy, CFSTR("TrackEnabled"), a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, CFSTR("TrackLanguageCode"), a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, CFSTR("ExtendedLanguageTagString"), a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, CFSTR("TrackTimescale"), a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, CFSTR("Volume"), a4);
    setOptionsDictionaryEntryForTrackPropertyFromTrackReader(v13, CFSTR("TrackMatrix"), a4);
  }
  v14 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v14)
  {
    v15 = v14;
    if (!v13)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_13:
  v15 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v15)
    *a5 = xpc_dictionary_get_int64(v18, "TrackID");
  if (v13)
LABEL_16:
    CFRelease(v13);
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_DeleteTrack(uint64_t a1, int a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;
  xpc_object_t xdict;

  v6 = 0;
  xdict = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_7;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v6);
  if ((_DWORD)ObjectID)
  {
LABEL_7:
    v4 = ObjectID;
    goto LABEL_5;
  }
  v4 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v4)
  {
    xpc_dictionary_set_int64(xdict, "TrackID", a2);
    v4 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableMovie_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t ObjectID;
  uint64_t v9;
  _QWORD v11[2];
  xpc_object_t xdict;

  v11[1] = 0;
  xdict = 0;
  v11[0] = 0;
  if (!a2 || !a3 || !a5)
  {
    ObjectID = FigSignalErrorAt();
LABEL_17:
    v9 = ObjectID;
    goto LABEL_13;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v11);
  if ((_DWORD)ObjectID)
    goto LABEL_17;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_17;
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_17;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_17;
  if (!CFEqual(a3, CFSTR("FormatDescriptionArray")))
  {
    if (CFEqual(a3, CFSTR("Metadata")))
    {
      v9 = 0;
      goto LABEL_13;
    }
    v9 = FigXPCMessageCopyCFObject();
    if ((_DWORD)v9)
      goto LABEL_13;
    goto LABEL_10;
  }
  v9 = FigXPCMessageCopyFormatDescriptionArray();
  if (!(_DWORD)v9)
LABEL_10:
    *a5 = 0;
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableMovie_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFArray *a4)
{
  uint64_t ObjectID;
  CFTypeID v8;
  uint64_t DerivedStorage;
  const void *SInt32;
  __CFDictionary *v11;
  uint64_t v12;
  CFTypeRef cf;
  uint64_t v15;
  xpc_object_t xdict;

  v15 = 0;
  xdict = 0;
  cf = 0;
  if (!a2)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (!a3)
    goto LABEL_27;
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v15);
  if (!(_DWORD)ObjectID)
  {
    ObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ObjectID)
    {
      xpc_dictionary_set_int64(xdict, "TrackID", a2);
      ObjectID = FigXPCMessageSetCFString();
      if (!(_DWORD)ObjectID)
      {
        if (CFEqual(a3, CFSTR("FormatDescriptionArray")))
        {
          ObjectID = FigXPCMessageSetFormatDescriptionArray();
          if ((_DWORD)ObjectID)
            goto LABEL_21;
LABEL_20:
          ObjectID = FigXPCRemoteClientSendSyncMessage();
          goto LABEL_21;
        }
        if (CFEqual(a3, CFSTR("Metadata")))
        {
          ObjectID = FigRemote_CreateMetadataBinaryPListData(a4, *MEMORY[0x1E0C9AE00], (uint64_t)&cf);
          if ((_DWORD)ObjectID)
            goto LABEL_21;
LABEL_19:
          ObjectID = FigXPCMessageSetCFObject();
          if ((_DWORD)ObjectID)
            goto LABEL_21;
          goto LABEL_20;
        }
        if (!CFEqual(a3, CFSTR("MediaDataStorageURL")))
          goto LABEL_19;
        if (!a4 || (v8 = CFGetTypeID(a4), v8 == CFURLGetTypeID()))
        {
          if (!FigRemote_ShouldConnectToMediaparserdForFileParsing())
            goto LABEL_19;
          DerivedStorage = CMBaseObjectGetDerivedStorage();
          SInt32 = (const void *)FigCFNumberCreateSInt32();
          v11 = *(__CFDictionary **)(DerivedStorage + 24);
          if (a4)
          {
            CFDictionarySetValue(v11, SInt32, a4);
            if (!SInt32)
              goto LABEL_19;
          }
          else
          {
            CFDictionaryRemoveValue(v11, SInt32);
            if (!SInt32)
              goto LABEL_19;
          }
          CFRelease(SInt32);
          goto LABEL_19;
        }
LABEL_27:
        ObjectID = FigSignalErrorAt();
      }
    }
  }
LABEL_21:
  v12 = ObjectID;
  if (cf)
    CFRelease(cf);
LABEL_23:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t remoteXPCMutableMovie_AppendSampleBuffer(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t ObjectID;
  xpc_object_t XPCObject;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;
  _QWORD v18[2];
  xpc_object_t xdict;
  CMFormatDescriptionRef FormatDescription;
  IOSurfaceRef aSurface;
  uint64_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  FormatDescription = 0;
  aSurface = 0;
  v18[1] = 0;
  xdict = 0;
  cf = 0;
  v18[0] = 0;
  if (!(_DWORD)a2)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (a3)
  {
    ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v18);
    if ((_DWORD)ObjectID
      || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID)
      || FigRemote_ShouldConnectToMediaparserdForFileParsing()
      && (ObjectID = remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(a1, a2, xdict, &cf), (_DWORD)ObjectID)|| (xpc_dictionary_set_int64(xdict, "TrackID", (int)a2), FormatDescription = CMSampleBufferGetFormatDescription(a3), ObjectID = FigRemote_CreateSerializedAtomDataAndSurfaceForSampleBuffer(), (_DWORD)ObjectID)|| (ObjectID = FigXPCMessageSetAndConsumeVMData(), (_DWORD)ObjectID))
    {
      v15 = ObjectID;
      goto LABEL_21;
    }
    if (aSurface)
    {
      XPCObject = IOSurfaceCreateXPCObject(aSurface);
      xpc_dictionary_set_value(xdict, "IOSurface", XPCObject);
      if (!a4)
        goto LABEL_14;
    }
    else if (!a4)
    {
LABEL_14:
      v14 = FigXPCMessageSetFormatDescription();
      if (!(_DWORD)v14)
      {
        v14 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
        if (!(_DWORD)v14)
        {
          if (a5)
            FigXPCMessageGetCMTime();
          if (a6)
            FigXPCMessageGetCMTime();
          v15 = 0;
          goto LABEL_21;
        }
      }
      goto LABEL_27;
    }
    v14 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v14)
      goto LABEL_14;
  }
  else
  {
    v14 = FigSignalErrorAt();
  }
LABEL_27:
  v15 = v14;
LABEL_21:
  if (cf)
    CFRelease(cf);
LABEL_23:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_AppendMediaData(uint64_t a1, uint64_t a2, uint64_t a3, int64_t a4, int64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t ObjectID;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef cf;
  uint64_t v18;
  xpc_object_t v19;
  xpc_object_t xdict;

  v19 = 0;
  xdict = 0;
  cf = 0;
  v18 = 0;
  if (!(_DWORD)a2)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (a3)
  {
    ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v18);
    if (!(_DWORD)ObjectID)
    {
      ObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ObjectID)
      {
        if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()
          || (ObjectID = remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(a1, a2, xdict, &cf), !(_DWORD)ObjectID))
        {
          xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
          xpc_dictionary_set_int64(xdict, "DataOffset", a4);
          xpc_dictionary_set_int64(xdict, "DataLength", a5);
          ObjectID = FigXPCMessageSetBlockBuffer();
          if (!(_DWORD)ObjectID)
          {
            if (!a6 || (ObjectID = FigXPCMessageSetCFDictionary(), !(_DWORD)ObjectID))
            {
              v14 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
              v15 = v14;
              if (a7 && !(_DWORD)v14)
                *a7 = xpc_dictionary_get_uint64(v19, "DataOffset");
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v15 = ObjectID;
LABEL_13:
  if (cf)
    CFRelease(cf);
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_AppendSampleReferences(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t ObjectID;
  uint64_t v15;
  _QWORD v17[2];
  xpc_object_t xdict;

  v17[1] = 0;
  xdict = 0;
  v17[0] = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v15 = ObjectID;
    goto LABEL_11;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v17);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  xpc_dictionary_set_uint64(xdict, "DataOffset", a11);
  if (a12)
  {
    ObjectID = FigXPCMessageSetCFDictionary();
    if ((_DWORD)ObjectID)
      goto LABEL_13;
  }
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  v15 = a14;
  if (a13)
    FigXPCMessageGetCMTime();
  if (a14)
  {
    FigXPCMessageGetCMTime();
    v15 = 0;
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t remoteXPCMutableMovie_AppendSampleReferencesFromSampleCursor(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;

  if (!a2)
  {
    v11 = FigSignalErrorAt();
LABEL_14:
    v12 = v11;
    goto LABEL_12;
  }
  if (a7)
  {
    v11 = FigXPCMessageSetCFDictionary();
    if ((_DWORD)v11)
      goto LABEL_14;
  }
  v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v11)
    goto LABEL_14;
  if (a8)
    *a8 = xpc_dictionary_get_uint64(0, "NumSamplesAppended");
  if (a9)
    FigXPCMessageGetCMTime();
  if (a10)
    FigXPCMessageGetCMTime();
  v12 = 0;
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

BOOL remoteXPCMutableMovie_CanTrackAcceptFormatDescription(uint64_t a1, int a2, _BOOL8 a3)
{
  _BOOL8 v3;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t xdict;

  v7 = 0;
  xdict = 0;
  v6 = 0;
  if (!a2)
  {
    FigSignalErrorAt();
LABEL_10:
    v3 = 0;
    goto LABEL_8;
  }
  v3 = a3;
  if (!a3)
  {
    FigSignalErrorAt();
    goto LABEL_8;
  }
  if (remoteXPCMutableMovie_GetObjectID(a1, &v6))
    goto LABEL_10;
  if (FigXPCCreateBasicMessage())
    goto LABEL_10;
  xpc_dictionary_set_int64(xdict, "TrackID", a2);
  if (FigXPCMessageSetFormatDescription()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    goto LABEL_10;
  }
  v3 = xpc_dictionary_get_BOOL(v7, "CanTrackAcceptFormatDescription");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteXPCMutableMovie_GetTrackCompatibleWithTrackReader(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t value;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  value = 0;
  v9 = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v6 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigFormatReaderXPCRemoteGetObjectID(a2, &value);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  xpc_dictionary_set_uint64(xdict, "TrackReader", value);
  v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v6)
    *a3 = xpc_dictionary_get_int64(v10, "TrackID");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableMovie_InsertMediaIntoTrack(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t xdict;

  v9 = 0;
  xdict = 0;
  if (!a2
    || (*(_BYTE *)(a4 + 12) & 1) == 0
    || (*(_BYTE *)(a4 + 36) & 1) == 0
    || *(_QWORD *)(a4 + 40)
    || (*(_QWORD *)(a4 + 24) & 0x8000000000000000) != 0)
  {
    ObjectID = FigSignalErrorAt();
LABEL_6:
    v5 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v9);
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8
    || (xpc_dictionary_set_int64(xdict, "TrackID", a2), v8 = FigXPCMessageSetCMTimeRange(), (_DWORD)v8)
    || (v8 = FigXPCMessageSetCMTimeRange(), (_DWORD)v8))
  {
    v5 = v8;
  }
  else
  {
    v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableMovie_InsertEmptyTrackSegment(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t ObjectID;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CMTime time2;
  uint64_t v15;
  xpc_object_t v16;

  v15 = 0;
  v16 = 0;
  if (!a2
    || *((_QWORD *)a3 + 2)
    || (*((_DWORD *)a3 + 3) & 0x1D) != 1
    || *((_QWORD *)a3 + 5)
    || (*((_DWORD *)a3 + 9) & 0x1D) != 1
    || (*((_DWORD *)a3 + 3) & *((_DWORD *)a3 + 9) & 1) == 0
    || (*((_QWORD *)a3 + 3) & 0x8000000000000000) != 0)
  {
    ObjectID = FigSignalErrorAt();
LABEL_14:
    v9 = ObjectID;
    goto LABEL_15;
  }
  v11 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)&v12 = *((_QWORD *)a3 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v11, &time2))
  {
    v9 = 0;
    goto LABEL_15;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v15);
  if ((_DWORD)ObjectID)
    goto LABEL_14;
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7
    || (xpc_dictionary_set_int64(v16, "TrackID", a2),
        v8 = a3[1],
        v11 = *a3,
        v12 = v8,
        v13 = a3[2],
        v7 = FigXPCMessageSetCMTimeRange(),
        (_DWORD)v7))
  {
    v9 = v7;
  }
  else
  {
    v9 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCMutableMovie_InsertEmptySegment(uint64_t a1, __int128 *a2)
{
  uint64_t ObjectID;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CMTime time2;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  if (*((_QWORD *)a2 + 2)
    || (*((_DWORD *)a2 + 3) & 0x1D) != 1
    || *((_QWORD *)a2 + 5)
    || (*((_DWORD *)a2 + 9) & 0x1D) != 1
    || (*((_DWORD *)a2 + 3) & *((_DWORD *)a2 + 9) & 1) == 0
    || (*((_QWORD *)a2 + 3) & 0x8000000000000000) != 0)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v7 = ObjectID;
    goto LABEL_14;
  }
  v9 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)&v10 = *((_QWORD *)a2 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v9, &time2))
  {
    v7 = 0;
    goto LABEL_14;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v13);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5 || (v6 = a2[1], v9 = *a2, v10 = v6, v11 = a2[2], v5 = FigXPCMessageSetCMTimeRange(), (_DWORD)v5))
    v7 = v5;
  else
    v7 = FigXPCRemoteClientSendSyncMessage();
LABEL_14:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableMovie_DeleteTrackSegment(uint64_t a1, int a2, __int128 *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CMTime time2;
  uint64_t v15;
  xpc_object_t v16;

  v15 = 0;
  v16 = 0;
  if (!a2
    || (*((_BYTE *)a3 + 12) & 1) == 0
    || (*((_BYTE *)a3 + 36) & 1) == 0
    || *((_QWORD *)a3 + 5)
    || (*((_QWORD *)a3 + 3) & 0x8000000000000000) != 0)
  {
    ObjectID = FigSignalErrorAt();
LABEL_6:
    v5 = ObjectID;
    goto LABEL_7;
  }
  v11 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)&v12 = *((_QWORD *)a3 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v11, &time2))
  {
    v5 = 0;
    goto LABEL_7;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v15);
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  v9 = FigXPCCreateBasicMessage();
  if ((_DWORD)v9
    || (xpc_dictionary_set_int64(v16, "TrackID", a2),
        v10 = a3[1],
        v11 = *a3,
        v12 = v10,
        v13 = a3[2],
        v9 = FigXPCMessageSetCMTimeRange(),
        (_DWORD)v9))
  {
    v5 = v9;
  }
  else
  {
    v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableMovie_DeleteSegment(uint64_t a1, __int128 *a2)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CMTime time2;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  if ((*((_BYTE *)a2 + 12) & 1) == 0
    || (*((_BYTE *)a2 + 36) & 1) == 0
    || *((_QWORD *)a2 + 5)
    || (*((_QWORD *)a2 + 3) & 0x8000000000000000) != 0)
  {
    ObjectID = FigSignalErrorAt();
LABEL_5:
    v4 = ObjectID;
    goto LABEL_6;
  }
  v9 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)&v10 = *((_QWORD *)a2 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v9, &time2))
  {
    v4 = 0;
    goto LABEL_6;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v13);
  if ((_DWORD)ObjectID)
    goto LABEL_5;
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7 || (v8 = a2[1], v9 = *a2, v10 = v8, v11 = a2[2], v7 = FigXPCMessageSetCMTimeRange(), (_DWORD)v7))
    v4 = v7;
  else
    v4 = FigXPCRemoteClientSendSyncMessage();
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCMutableMovie_ScaleTrackSegment(uint64_t a1, int a2, __int128 *a3, __int128 *a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CMTime time2;
  uint64_t v17;
  xpc_object_t v18;

  v17 = 0;
  v18 = 0;
  if (!a2
    || (*((_BYTE *)a3 + 12) & 1) == 0
    || (*((_BYTE *)a3 + 36) & 1) == 0
    || *((_QWORD *)a3 + 5)
    || (*((_QWORD *)a3 + 3) & 0x8000000000000000) != 0)
  {
    ObjectID = FigSignalErrorAt();
LABEL_6:
    v6 = ObjectID;
    goto LABEL_7;
  }
  v13 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)&v14 = *((_QWORD *)a3 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v13, &time2))
  {
    v6 = 0;
    goto LABEL_7;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v17);
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  v11 = FigXPCCreateBasicMessage();
  if ((_DWORD)v11)
    goto LABEL_16;
  xpc_dictionary_set_int64(v18, "TrackID", a2);
  v12 = a3[1];
  v13 = *a3;
  v14 = v12;
  v15 = a3[2];
  v11 = FigXPCMessageSetCMTimeRange();
  if ((_DWORD)v11 || (v13 = *a4, *(_QWORD *)&v14 = *((_QWORD *)a4 + 2), v11 = FigXPCMessageSetCMTime(), (_DWORD)v11))
LABEL_16:
    v6 = v11;
  else
    v6 = FigXPCRemoteClientSendSyncMessage();
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCMutableMovie_ScaleSegment(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CMTime time2;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  if ((*((_BYTE *)a2 + 12) & 1) == 0
    || (*((_BYTE *)a2 + 36) & 1) == 0
    || *((_QWORD *)a2 + 5)
    || (*((_QWORD *)a2 + 3) & 0x8000000000000000) != 0)
  {
    ObjectID = FigSignalErrorAt();
LABEL_5:
    v5 = ObjectID;
    goto LABEL_6;
  }
  v11 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)&v12 = *((_QWORD *)a2 + 5);
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (!CMTimeCompare((CMTime *)&v11, &time2))
  {
    v5 = 0;
    goto LABEL_6;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, v15);
  if ((_DWORD)ObjectID)
    goto LABEL_5;
  v9 = FigXPCCreateBasicMessage();
  if ((_DWORD)v9)
    goto LABEL_14;
  v10 = a2[1];
  v11 = *a2;
  v12 = v10;
  v13 = a2[2];
  v9 = FigXPCMessageSetCMTimeRange();
  if ((_DWORD)v9 || (v11 = *a3, *(_QWORD *)&v12 = *((_QWORD *)a3 + 2), v9 = FigXPCMessageSetCMTime(), (_DWORD)v9))
LABEL_14:
    v5 = v9;
  else
    v5 = FigXPCRemoteClientSendSyncMessage();
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCMutableMovie_InsertSegmentFromTrackReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t ObjectID;
  uint64_t v8;
  CFTypeRef cf;
  uint64_t v16;
  uint64_t value;
  uint64_t v18;
  xpc_object_t xdict;

  v18 = 0;
  xdict = 0;
  v16 = 0;
  value = 0;
  cf = 0;
  if (a4)
  {
    if ((*(_BYTE *)(a5 + 12) & 1) == 0
      || (*(_BYTE *)(a5 + 36) & 1) == 0
      || *(_QWORD *)(a5 + 40)
      || (*(_QWORD *)(a5 + 24) & 0x8000000000000000) != 0
      || *(_QWORD *)(a6 + 16))
    {
      ObjectID = FigSignalErrorAt();
    }
    else
    {
      ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v18);
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCCreateBasicMessage();
        if (!(_DWORD)ObjectID)
        {
          if (!FigRemote_ShouldConnectToMediaparserdForFileParsing()
            || (ObjectID = remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(a1, a2, xdict, &cf), !(_DWORD)ObjectID))
          {
            ObjectID = FigFormatReaderXPCRemoteGetObjectID(a3, &value);
            if (!(_DWORD)ObjectID)
            {
              xpc_dictionary_set_uint64(xdict, "FormatReader", value);
              ObjectID = FigFormatReaderXPCRemoteGetObjectID(a4, &v16);
              if (!(_DWORD)ObjectID)
              {
                xpc_dictionary_set_uint64(xdict, "TrackReader", v16);
                xpc_dictionary_set_int64(xdict, "TrackID", (int)a2);
                ObjectID = FigXPCMessageSetCMTimeRange();
                if (!(_DWORD)ObjectID)
                {
                  ObjectID = FigXPCMessageSetCMTime();
                  if (!(_DWORD)ObjectID)
                  {
                    xpc_dictionary_set_uint64(xdict, "Flags", a7);
                    if ((a7 & 1) != 0)
                      ObjectID = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
                    else
                      ObjectID = FigXPCRemoteClientSendSyncMessage();
                  }
                }
              }
            }
          }
        }
      }
    }
    v8 = ObjectID;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_InsertSegmentFromFormatReader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t ObjectID;
  uint64_t v7;
  xpc_object_t v12;
  const __CFURL **DerivedStorage;
  xpc_object_t v14;
  __CFArray *Mutable;
  const __CFURL *v16;
  unsigned int v17;
  uint64_t v18;
  CFTypeRef v19;
  unint64_t Count;
  unint64_t v21;
  size_t v22;
  const void **v23;
  const void **v24;
  void *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  CFTypeRef v29;
  __CFArray *v30;
  __int128 v31;
  uint64_t v32;
  xpc_object_t xdict;
  CFTypeRef cf[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  xpc_object_t v39;
  uint64_t value;

  v38 = 0;
  v39 = 0;
  v37 = 0;
  if (!a2
    || (*(_BYTE *)(a3 + 12) & 1) == 0
    || (*(_BYTE *)(a3 + 36) & 1) == 0
    || *(_QWORD *)(a3 + 40)
    || (*(_QWORD *)(a3 + 24) & 0x8000000000000000) != 0
    || *(_QWORD *)(a4 + 16))
  {
    ObjectID = FigSignalErrorAt();
LABEL_6:
    v7 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v38);
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  ObjectID = FigFormatReaderXPCRemoteGetObjectID(a2, &v37);
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_6;
  if (FigRemote_ShouldConnectToMediaparserdForFileParsing())
  {
    v12 = v39;
    DerivedStorage = (const __CFURL **)CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    value = 0;
    v14 = xpc_array_create(0, 0);
    if (!v14)
    {
      v7 = FigSignalErrorAt();
      v30 = 0;
      Mutable = 0;
      goto LABEL_47;
    }
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
      goto LABEL_45;
    v16 = DerivedStorage[2];
    if (v16 && !CFSetContainsValue(DerivedStorage[4], v16))
    {
      if (FigFileDoesFileExist())
        v17 = 2;
      else
        v17 = 18;
      v18 = remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID(DerivedStorage[2], v17, cf, &value);
      if ((_DWORD)v18)
        goto LABEL_46;
      xpc_array_set_uint64(v14, 0xFFFFFFFFFFFFFFFFLL, value);
      v19 = cf[0];
      CFArrayAppendValue(Mutable, cf[0]);
      if (v19)
      {
        CFRelease(v19);
        cf[0] = 0;
      }
      CFSetAddValue(DerivedStorage[4], DerivedStorage[2]);
    }
    xdict = v12;
    Count = CFDictionaryGetCount(DerivedStorage[3]);
    if (Count)
    {
      v21 = Count;
      if (!(Count >> 61))
      {
        v22 = 8 * Count;
        if (8 * v21)
        {
          v23 = (const void **)malloc_type_malloc(v22, 0x5CC9CBA6uLL);
          if (v23)
          {
            v24 = v23;
            v25 = v14;
            CFDictionaryGetKeysAndValues(DerivedStorage[3], 0, v23);
            v26 = 0;
            while (1)
            {
              if (!CFSetContainsValue(DerivedStorage[4], v24[v26]))
              {
                if (FigFileDoesFileExist())
                  v27 = 2;
                else
                  v27 = 18;
                v28 = remoteXPCMutableMovie_CreateByteStreamForURLAndGetObjectID((const __CFURL *)v24[v26], v27, cf, &value);
                if ((_DWORD)v28)
                {
                  v7 = v28;
                  v30 = 0;
                  goto LABEL_48;
                }
                xpc_array_set_uint64(v25, 0xFFFFFFFFFFFFFFFFLL, value);
                v29 = cf[0];
                CFArrayAppendValue(Mutable, cf[0]);
                if (v29)
                {
                  CFRelease(v29);
                  cf[0] = 0;
                }
                CFSetAddValue(DerivedStorage[4], v24[v26]);
              }
              if (v21 == ++v26)
              {
                v14 = v25;
                goto LABEL_42;
              }
            }
          }
        }
      }
LABEL_45:
      v18 = FigSignalErrorAt();
LABEL_46:
      v7 = v18;
      v30 = 0;
LABEL_47:
      v24 = 0;
      goto LABEL_48;
    }
    v24 = 0;
LABEL_42:
    if (xpc_array_get_count(v14))
      xpc_dictionary_set_value(xdict, "ByteStreamArray", v14);
    v7 = 0;
    v30 = Mutable;
    Mutable = 0;
LABEL_48:
    free(v24);
    if (cf[0])
      CFRelease(cf[0]);
    if (Mutable)
      CFRelease(Mutable);
    FigXPCRelease();
    if ((_DWORD)v7)
      goto LABEL_59;
  }
  else
  {
    v30 = 0;
  }
  xpc_dictionary_set_uint64(v39, "FormatReader", v37);
  v31 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)cf = *(_OWORD *)a3;
  v35 = v31;
  v36 = *(_OWORD *)(a3 + 32);
  v32 = FigXPCMessageSetCMTimeRange();
  if (!(_DWORD)v32)
  {
    *(_OWORD *)cf = *(_OWORD *)a4;
    *(_QWORD *)&v35 = *(_QWORD *)(a4 + 16);
    v32 = FigXPCMessageSetCMTime();
    if (!(_DWORD)v32)
    {
      xpc_dictionary_set_uint64(v39, "Flags", a5);
      if ((a5 & 1) != 0)
        v32 = FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
      else
        v32 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  v7 = v32;
LABEL_59:
  if (v30)
    CFRelease(v30);
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteXPCMutableMovie_AddTrackReferenceToTrack(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  if (!a3 || !a4)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
  {
LABEL_8:
    v8 = ObjectID;
    goto LABEL_6;
  }
  v8 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackReferenceType", a2);
    xpc_dictionary_set_int64(xdict, "FromTrackID", a3);
    xpc_dictionary_set_int64(xdict, "ToTrackID", a4);
    v8 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCMutableMovie_DeleteTrackReferenceToTrack(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  if (!a3 || !a4)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_8;
  }
  ObjectID = remoteXPCMutableMovie_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
  {
LABEL_8:
    v8 = ObjectID;
    goto LABEL_6;
  }
  v8 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "TrackReferenceType", a2);
    xpc_dictionary_set_int64(xdict, "FromTrackID", a3);
    xpc_dictionary_set_int64(xdict, "ToTrackID", a4);
    v8 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_6:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

void setOptionsDictionaryEntryForTrackPropertyFromTrackReader(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const void *, _QWORD, void **);
  void *value;

  value = 0;
  if (!CFDictionaryContainsKey(a1, a2))
  {
    FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
    v7 = *(void (**)(uint64_t, const void *, _QWORD, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v7)
    {
      v7(FigBaseObject, a2, *MEMORY[0x1E0C9AE00], &value);
      if (value)
      {
        CFDictionaryAddValue(a1, a2, value);
        CFRelease(value);
      }
    }
  }
}

uint64_t remoteXPCMutableMovie_CreateByteStreamForTrackMediaDataStorageURLAndSetObjectIDInXPCMessageIfNecessary(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  void *v7;
  CFTypeRef v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cf;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFNumberCreateSInt32();
  cf = 0;
  value = 0;
  if (FigCFDictionaryGetValueIfPresent()
    || (v7 = *(void **)(DerivedStorage + 16), (value = v7) == 0)
    || CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 32), v7))
  {
    v8 = 0;
LABEL_10:
    v11 = 0;
    *a4 = v8;
    return v11;
  }
  if (FigFileDoesFileExist())
    v9 = 2;
  else
    v9 = 18;
  v10 = remoteXPCMutableMovie_CreateByteStreamForURLAndSetObjectIDToXPCMessage((const __CFURL *)value, v9, a3, &cf);
  if (!(_DWORD)v10)
  {
    CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 32), value);
    v8 = cf;
    goto LABEL_10;
  }
  v11 = v10;
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t FigManifoldCreateForGap(CFAllocatorRef Default, OpaqueCMBlockBuffer *a2, CMTime *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v15;
  const void *v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  CMTime *v19;
  __int128 v20;
  __int128 v21;
  CMTime v23;
  CMTime v24;
  CMTime duration;
  CMTime start;
  CMTimeRange v27;
  CMTime time2;
  CMTime time1;
  const void *v30;

  v30 = 0;
  if (a2)
  {
    memset(&v27, 0, 24);
    fgGetDurationFromBlockBuffer(a2, (uint64_t)&v27);
    if ((v27.start.flags & 1) == 0)
      return 4294951252;
    time1 = v27.start;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2) <= 0)
      return 4294951252;
  }
  if ((a3->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  FigManifoldGetClassID();
  v15 = CMDerivedObjectCreate();
  v16 = v30;
  if (!(_DWORD)v15)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = FigReentrantMutexCreate();
    *(_QWORD *)(DerivedStorage + 16) = v18;
    if (v18)
    {
      if (!Default)
        Default = CFAllocatorGetDefault();
      *(_QWORD *)DerivedStorage = CFRetain(Default);
      *(_QWORD *)(DerivedStorage + 128) = a5;
      *(_QWORD *)(DerivedStorage + 136) = a6;
      *(_QWORD *)(DerivedStorage + 144) = a7;
      *(_QWORD *)(DerivedStorage + 96) = 0xCA000000C9;
      *(_QWORD *)(DerivedStorage + 120) = 0x736F756E76696465;
      start = *a3;
      v19 = (CMTime *)MEMORY[0x1E0CA2E68];
      duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      CMTimeRangeMake(&v27, &start, &duration);
      v20 = *(_OWORD *)&v27.start.epoch;
      *(_OWORD *)(DerivedStorage + 152) = *(_OWORD *)&v27.start.value;
      *(_OWORD *)(DerivedStorage + 168) = v20;
      *(_OWORD *)(DerivedStorage + 184) = *(_OWORD *)&v27.duration.timescale;
      v24 = *a3;
      v23 = *v19;
      CMTimeRangeMake(&v27, &v24, &v23);
      v15 = 0;
      v21 = *(_OWORD *)&v27.start.epoch;
      *(_OWORD *)(DerivedStorage + 200) = *(_OWORD *)&v27.start.value;
      *(_OWORD *)(DerivedStorage + 216) = v21;
      *(_OWORD *)(DerivedStorage + 232) = *(_OWORD *)&v27.duration.timescale;
      *(_BYTE *)(DerivedStorage + 13) = a4;
      *a8 = v30;
      return v15;
    }
    v15 = FigSignalErrorAt();
    v16 = v30;
  }
  if (v16)
    CFRelease(v16);
  return v15;
}

const void *fgGetDurationFromBlockBuffer@<X0>(const void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  const __CFNumber *v4;
  CFTypeID v5;
  CMTime v6;
  Float64 valuePtr;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  valuePtr = 0.0;
  if (result)
  {
    result = CMGetAttachment(result, CFSTR("FBPAKey_ApproximateDuration"), 0);
    if (result)
    {
      v4 = (const __CFNumber *)result;
      v5 = CFGetTypeID(result);
      result = (const void *)CFNumberGetTypeID();
      if ((const void *)v5 == result)
      {
        if (CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr))
        {
          result = CMTimeMakeWithSeconds(&v6, valuePtr, 90000);
          *(CMTime *)a2 = v6;
        }
        else
        {
          return (const void *)FigSignalErrorAt();
        }
      }
    }
  }
  return result;
}

void fgInvalidate(const void *a1)
{
  CFRetain(a1);
  fgInvalidateGuts((uint64_t)a1);
}

uint64_t sub_192B9BD80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  return 0;
}

void fgFinalize(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  fgInvalidateGuts(a1);
}

uint64_t sub_192B9BDB8()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)v0)
  {
    CFRelease(*(CFTypeRef *)v0);
    *(_QWORD *)v0 = 0;
  }
  result = *(_QWORD *)(v0 + 16);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(v0 + 16) = 0;
  }
  return result;
}

__CFString *fgCopyDebugDescription()
{
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t v2;
  uint64_t v3;
  Float64 Seconds;
  Float64 v5;
  uint64_t v6;
  Float64 v7;
  double v8;
  uint64_t v9;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime rhs;
  CMTime lhs;
  CMTime v17;
  CMTime time;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (Mutable)
  {
    v2 = DerivedStorage;
    time = *(CMTime *)(DerivedStorage + 152);
    v3 = *(unsigned int *)(DerivedStorage + 96);
    Seconds = CMTimeGetSeconds(&time);
    lhs = *(CMTime *)(v2 + 152);
    rhs = *(CMTime *)(v2 + 176);
    CMTimeAdd(&v17, &lhs, &rhs);
    v5 = CMTimeGetSeconds(&v17);
    v14 = *(CMTime *)(v2 + 200);
    v6 = *(unsigned int *)(v2 + 100);
    v7 = CMTimeGetSeconds(&v14);
    v12 = *(CMTime *)(v2 + 200);
    v11 = *(CMTime *)(v2 + 224);
    CMTimeAdd(&v13, &v12, &v11);
    v8 = CMTimeGetSeconds(&v13);
    v9 = 89;
    if (!*(_BYTE *)(v2 + 8))
      v9 = 78;
    CFStringAppendFormat(Mutable, 0, CFSTR("FigFigGapManifold : pending gap duration Video[%d][%f, %f] Audio[%d][%f %f]. Invalidated[%c]"), v3, *(_QWORD *)&Seconds, *(_QWORD *)&v5, v6, *(_QWORD *)&v7, *(_QWORD *)&v8, v9);
  }
  return Mutable;
}

uint64_t fgCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFStringRef *a4)
{
  uint64_t DerivedStorage;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v9 = 4294954511;
  }
  else if (CFEqual(a2, CFSTR("FMFD_Type")))
  {
    v8 = CFStringCreateWithCString(a3, "GAP", 0x8000100u);
    v9 = 0;
    *a4 = v8;
  }
  else
  {
    v9 = 4294954512;
  }
  v10 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v10);
  return v9;
}

uint64_t fgSetProperty()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v1 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v1 + 1;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v2 = FigSignalErrorAt();
    v1 = *(_QWORD *)(DerivedStorage + 24) - 1;
  }
  else
  {
    v2 = 4294954512;
  }
  *(_QWORD *)(DerivedStorage + 24) = v1;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v2;
}

void fgInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _BOOL8 v4;
  _BOOL8 v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v3 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v3 + 1;
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    v4 = *(_BYTE *)(DerivedStorage + 13) != 0;
    do
    {
      v5 = v4;
      v6 = DerivedStorage + 8 * v4;
      v9 = *(const void **)(v6 + 104);
      v8 = (_QWORD *)(v6 + 104);
      v7 = v9;
      if (v9)
      {
        CFRelease(v7);
        *v8 = 0;
      }
      v4 = 1;
    }
    while (!v5);
    *(_BYTE *)(DerivedStorage + 8) = 1;
    fgEndAllTracks(a1, 4294951251);
    v3 = *(_QWORD *)(DerivedStorage + 24) - 1;
  }
  *(_QWORD *)(DerivedStorage + 24) = v3;
  JUMPOUT(0x19402EA24);
}

uint64_t fgEndAllTracks(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _BOOL8 v6;
  _BOOL8 v7;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(uint64_t, _QWORD, _QWORD, uint64_t);
  void (*v11)(uint64_t, _QWORD, _QWORD, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  FigManifoldGetFigBaseObject(a1);
  result = CMBaseObjectGetDerivedStorage();
  v5 = result;
  v6 = *(_BYTE *)(result + 13) != 0;
  do
  {
    v7 = v6;
    v8 = v5 + 24 * v6;
    v11 = *(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v8 + 48);
    v9 = (_QWORD *)(v8 + 48);
    v10 = v11;
    if (v11)
    {
      *v9 = 0;
      v12 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v12 >= 1)
      {
        v13 = v12;
        do
        {
          MEMORY[0x19402EA24](*(_QWORD *)(v5 + 16));
          --v13;
        }
        while (v13);
      }
      v10(a1, *(unsigned int *)(v5 + 4 * v7 + 96), *(_QWORD *)(v5 + 8 * v7 + 80), a2);
      do
      {
        result = MEMORY[0x19402EA0C](*(_QWORD *)(v5 + 16));
        v14 = *(_QWORD *)(v5 + 24) + 1;
        *(_QWORD *)(v5 + 24) = v14;
      }
      while (v14 < v12);
    }
    v6 = 1;
  }
  while (!v7);
  return result;
}

uint64_t fgManifoldInjectData(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CMTimeFlags flags;
  _BOOL8 v8;
  _BOOL8 v9;
  _BYTE *v10;
  uint64_t (*v11)(const void *, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  CMFormatDescriptionRef *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  CMTimeEpoch v28;
  uint64_t v29;
  int v30;
  CFAllocatorRef *v31;
  _OWORD *v32;
  uint64_t (*v33)(const void *, _QWORD, _QWORD, uint64_t, _QWORD, CMSampleBufferRef);
  __int128 v34;
  CMTimeEpoch v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  CMTimeEpoch v44;
  uint64_t v45;
  uint64_t (*v46)(const void *, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  int v52;
  _BOOL8 v53;
  void (*v54)(const void *, _QWORD);
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v61;
  CMTimeFlags v62;
  CMTimeEpoch epoch;
  const __CFString *key;
  const void *v65;
  const __CFString *v66;
  const __CFAllocator *v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t (**v70)(const void *, _QWORD, _QWORD, uint64_t, _QWORD, CMSampleBufferRef);
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  CMTime time1;
  CMTime v76;
  CMTime v77;
  CMTime v78;
  CMTime v79;
  CMTime v80;
  CMSampleTimingInfo sampleTimingArray;
  CMTime v82;
  CMTime v83;
  CMTime v84;
  CMTime v85;
  CMTime v86;
  CMTime v87;
  CMTime formatDescriptionOut;
  CMTime v89;
  CMTime v90;
  CMSampleBufferRef v91;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  fgGetDurationFromBlockBuffer(a4, (uint64_t)&sampleTimingArray);
  value = sampleTimingArray.duration.value;
  flags = sampleTimingArray.duration.flags;
  timescale = sampleTimingArray.duration.timescale;
  if ((sampleTimingArray.duration.flags & 0x1D) != 1)
    return FigSignalErrorAt();
  time1.value = value;
  time1.timescale = timescale;
  time1.flags = sampleTimingArray.duration.flags;
  epoch = sampleTimingArray.duration.epoch;
  time1.epoch = sampleTimingArray.duration.epoch;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) <= 0)
    return FigSignalErrorAt();
  CFRetain(a1);
  CFRetain(a4);
  MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 16));
  ++*(_QWORD *)(v6 + 24);
  if (*(_BYTE *)(v6 + 8) || *(_BYTE *)(v6 + 11))
  {
    v14 = FigSignalErrorAt();
    goto LABEL_91;
  }
  v8 = *(_BYTE *)(v6 + 13) != 0;
  v61 = a4;
  v67 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v66 = (const __CFString *)*MEMORY[0x1E0CA2678];
  v65 = (const void *)*MEMORY[0x1E0C9AE50];
  key = (const __CFString *)*MEMORY[0x1E0CA4E88];
  v62 = flags;
  while (1)
  {
    v9 = v8;
    *(_BYTE *)(v6 + 11) = 0;
    v10 = (_BYTE *)(v6 + v8 + 9);
    if (!*v10)
    {
      v11 = *(uint64_t (**)(const void *, _QWORD, _QWORD, _QWORD))(v6 + 128);
      if (v11)
      {
        v12 = *(_QWORD *)(v6 + 24);
        *(_QWORD *)(v6 + 24) = 0;
        if (v12 >= 1)
        {
          v13 = v12;
          do
          {
            MEMORY[0x19402EA24](*(_QWORD *)(v6 + 16));
            --v13;
          }
          while (v13);
        }
        v14 = v11(a1, *(_QWORD *)(v6 + 144), *(unsigned int *)(v6 + 4 * v9 + 120), *(unsigned int *)(v6 + 4 * v9 + 96));
        do
        {
          MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 16));
          v15 = *(_QWORD *)(v6 + 24) + 1;
          *(_QWORD *)(v6 + 24) = v15;
        }
        while (v15 < v12);
        if ((_DWORD)v14)
          goto LABEL_90;
        *v10 = 1;
        if (*(_BYTE *)(v6 + 8) || *(_BYTE *)(v6 + 12))
          break;
      }
    }
    v16 = v6 + 48 * v9;
    v17 = *(_OWORD *)(v16 + 176);
    lhs.epoch = *(_QWORD *)(v16 + 192);
    *(_OWORD *)&lhs.value = v17;
    rhs.value = value;
    rhs.timescale = timescale;
    rhs.flags = flags;
    rhs.epoch = epoch;
    CMTimeAdd(&sampleTimingArray.duration, &lhs, &rhs);
    v18 = *(_OWORD *)&sampleTimingArray.duration.value;
    *(_QWORD *)(v16 + 192) = sampleTimingArray.duration.epoch;
    *(_OWORD *)(v16 + 176) = v18;
    *(_WORD *)(v6 + 11) = 1;
    FigManifoldGetFigBaseObject(a1);
    v19 = CMBaseObjectGetDerivedStorage();
    v91 = 0;
    v20 = v19 + 8 * v9;
    v22 = *(_QWORD *)(v20 + 104);
    v21 = (CMFormatDescriptionRef *)(v20 + 104);
    v14 = v22 != 0;
    if (*(_BYTE *)(v19 + 8))
    {
      v14 = FigSignalErrorAt();
      goto LABEL_81;
    }
    v23 = v19;
    v24 = v19 + 48 * v9;
    if ((*(_BYTE *)(v24 + 164) & 1) == 0)
    {
      v14 = 0;
      goto LABEL_81;
    }
    v25 = v19 + 48 * v9;
    v26 = *(_OWORD *)(v25 + 176);
    v90.epoch = *(_QWORD *)(v25 + 192);
    *(_OWORD *)&v90.value = v26;
    v89 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&v90, &v89) >= 1)
    {
      v70 = (uint64_t (**)(const void *, _QWORD, _QWORD, uint64_t, _QWORD, CMSampleBufferRef))(v23 + 24 * v9 + 40);
      if (*v70)
      {
        v69 = v24;
        if (*v21)
          goto LABEL_22;
        v29 = v23 + 4 * v9;
        v30 = *(_DWORD *)(v29 + 96);
        v68 = (unsigned int *)(v29 + 96);
        FigManifoldGetFigBaseObject(a1);
        v31 = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
        formatDescriptionOut.value = 0;
        if (v30 == 202)
        {
          memset(&sampleTimingArray.duration.timescale, 0, 32);
          sampleTimingArray.duration.value = 0x40D5888000000000;
          sampleTimingArray.duration.timescale = 1633772320;
          HIDWORD(sampleTimingArray.duration.epoch) = 1024;
          HIDWORD(sampleTimingArray.presentationTimeStamp.value) = 2;
          CMAudioFormatDescriptionCreate(*v31, (const AudioStreamBasicDescription *)&sampleTimingArray, 0, 0, 0, 0, 0, (CMAudioFormatDescriptionRef *)&formatDescriptionOut);
        }
        else if (v30 == 201)
        {
          CMVideoFormatDescriptionCreate(*v31, 0x61766331u, 1, 1, 0, (CMVideoFormatDescriptionRef *)&formatDescriptionOut);
        }
        else
        {
          FigSignalErrorAt();
        }
        if (!formatDescriptionOut.value)
        {
          v14 = 4294954510;
          goto LABEL_81;
        }
        v45 = FigFormatDescriptionRetain();
        *v21 = (CMFormatDescriptionRef)v45;
        v46 = *(uint64_t (**)(const void *, _QWORD, _QWORD, uint64_t, _QWORD))(v23 + 24 * v9 + 32);
        if (v46)
        {
          v47 = *(_QWORD *)(v23 + 24);
          *(_QWORD *)(v23 + 24) = 0;
          if (v47 < 1)
          {
            v49 = v45;
          }
          else
          {
            v48 = v47;
            do
            {
              MEMORY[0x19402EA24](*(_QWORD *)(v23 + 16));
              --v48;
            }
            while (v48);
            v49 = (uint64_t)*v21;
          }
          v14 = v46(a1, *v68, *(_QWORD *)(v23 + 8 * v9 + 80), v49, 0);
          do
          {
            MEMORY[0x19402EA0C](*(_QWORD *)(v23 + 16));
            v50 = *(_QWORD *)(v23 + 24) + 1;
            *(_QWORD *)(v23 + 24) = v50;
          }
          while (v50 < v47);
          if ((_DWORD)v14)
          {
            flags = v62;
            goto LABEL_81;
          }
          flags = v62;
          if (!*(_BYTE *)(v23 + 8) && !*(_BYTE *)(v23 + 12))
          {
            v14 = 1;
            goto LABEL_63;
          }
        }
        else
        {
LABEL_63:
          v51 = *(_BYTE *)(v23 + 13) != 0;
          v52 = 1;
          do
          {
            v53 = v51;
            if (!*(_QWORD *)(v23 + 8 * v51 + 104))
              v52 = 0;
            v51 = 1;
          }
          while (!v53);
          v54 = *(void (**)(const void *, _QWORD))(v23 + 136);
          if (v54)
            v55 = v52 == 0;
          else
            v55 = 1;
          if (v55)
          {
            flags = v62;
LABEL_22:
            if ((_DWORD)v14)
            {
              v27 = v25 + 176;
              formatDescriptionOut = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
              memset(&v87, 0, sizeof(v87));
              CMTimeMakeWithSeconds(&v87, 0.5, 900000);
              v86 = formatDescriptionOut;
              v28 = *(_QWORD *)(v27 + 16);
              *(_OWORD *)&v85.value = *(_OWORD *)v27;
              v85.epoch = v28;
              if (CMTimeCompare(&v86, &v85) < 0)
              {
                v32 = (_OWORD *)(v69 + 152);
                while (1)
                {
                  v33 = *v70;
                  if (!*v70)
                  {
LABEL_44:
                    v14 = 0;
                    goto LABEL_45;
                  }
                  memset(&v84, 0, sizeof(v84));
                  v34 = *(_OWORD *)v27;
                  v83.epoch = *(_QWORD *)(v27 + 16);
                  *(_OWORD *)&v83.value = v34;
                  v82 = v87;
                  CMTimeMinimum(&v84, &v83, &v82);
                  sampleTimingArray.duration = v84;
                  v35 = *(_QWORD *)(v69 + 168);
                  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *v32;
                  sampleTimingArray.presentationTimeStamp.epoch = v35;
                  v36 = *v32;
                  sampleTimingArray.decodeTimeStamp.epoch = *(_QWORD *)(v69 + 168);
                  *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = v36;
                  v14 = 4294954510;
                  if (CMSampleBufferCreate(v67, 0, 1u, 0, 0, *v21, 0, 1, &sampleTimingArray, 0, 0, &v91)
                    || !v91)
                  {
                    goto LABEL_45;
                  }
                  CMSetAttachment(v91, v66, v65, 1u);
                  CMSetAttachment(v91, key, v65, 1u);
                  v37 = *(_QWORD *)(v23 + 24);
                  *(_QWORD *)(v23 + 24) = 0;
                  if (v37 >= 1)
                  {
                    v38 = v37;
                    do
                    {
                      MEMORY[0x19402EA24](*(_QWORD *)(v23 + 16));
                      --v38;
                    }
                    while (v38);
                  }
                  v14 = v33(a1, *(unsigned int *)(v23 + 4 * v9 + 96), *(_QWORD *)(v23 + 8 * v9 + 80), 3, 0, v91);
                  do
                  {
                    MEMORY[0x19402EA0C](*(_QWORD *)(v23 + 16));
                    v39 = *(_QWORD *)(v23 + 24) + 1;
                    *(_QWORD *)(v23 + 24) = v39;
                  }
                  while (v39 < v37);
                  if ((_DWORD)v14)
                    goto LABEL_45;
                  if (*(_BYTE *)(v23 + 8) || *(_BYTE *)(v23 + 12))
                    break;
                  v40 = *v32;
                  v79.epoch = *(_QWORD *)(v69 + 168);
                  *(_OWORD *)&v79.value = v40;
                  v78 = v84;
                  CMTimeAdd(&v80, &v79, &v78);
                  v41 = *(_OWORD *)&v80.value;
                  *(_QWORD *)(v69 + 168) = v80.epoch;
                  *v32 = v41;
                  v42 = *(_OWORD *)v27;
                  v77.epoch = *(_QWORD *)(v27 + 16);
                  *(_OWORD *)&v77.value = v42;
                  v76 = v84;
                  CMTimeSubtract(&v80, &v77, &v76);
                  v43 = *(_OWORD *)&v80.value;
                  *(_QWORD *)(v27 + 16) = v80.epoch;
                  *(_OWORD *)v27 = v43;
                  if (v91)
                  {
                    CFRelease(v91);
                    v91 = 0;
                  }
                  v86 = formatDescriptionOut;
                  v44 = *(_QWORD *)(v27 + 16);
                  *(_OWORD *)&v85.value = *(_OWORD *)v27;
                  v85.epoch = v44;
                  if ((CMTimeCompare(&v86, &v85) & 0x80000000) == 0)
                    goto LABEL_44;
                }
                v14 = 4294951251;
LABEL_45:
                flags = v62;
              }
              else
              {
                v14 = 0;
              }
              if (v91)
                CFRelease(v91);
            }
            goto LABEL_81;
          }
          v56 = *(_QWORD *)(v23 + 24);
          *(_QWORD *)(v23 + 24) = 0;
          if (v56 >= 1)
          {
            v57 = v56;
            do
            {
              MEMORY[0x19402EA24](*(_QWORD *)(v23 + 16));
              --v57;
            }
            while (v57);
          }
          v54(a1, *(_QWORD *)(v23 + 144));
          do
          {
            MEMORY[0x19402EA0C](*(_QWORD *)(v23 + 16));
            v58 = *(_QWORD *)(v23 + 24) + 1;
            *(_QWORD *)(v23 + 24) = v58;
          }
          while (v58 < v56);
          flags = v62;
          if (*(_BYTE *)(v23 + 8))
          {
            v14 = 4294951251;
            goto LABEL_81;
          }
          if (!*(_BYTE *)(v23 + 12))
            goto LABEL_22;
        }
        v14 = 4294951251;
        goto LABEL_81;
      }
    }
    v14 = 0;
LABEL_81:
    FigFormatDescriptionRelease();
    v8 = 1;
    if (v9)
      goto LABEL_90;
  }
  v14 = 4294951251;
LABEL_90:
  *(_BYTE *)(v6 + 11) = 0;
  a4 = v61;
LABEL_91:
  v59 = *(_QWORD *)(v6 + 16);
  --*(_QWORD *)(v6 + 24);
  MEMORY[0x19402EA24](v59);
  CFRelease(a4);
  CFRelease(a1);
  return v14;
}

uint64_t fgNoteStreamEnd(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 12) = 1;
    fgEndAllTracks((uint64_t)a1, a2);
    v5 = 0;
  }
  v6 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v6);
  CFRelease(a1);
  return v5;
}

uint64_t fgCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  _BOOL8 v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v8 = 4294951251;
  }
  else
  {
    v6 = *(_BYTE *)(DerivedStorage + 13) != 0;
    while (1)
    {
      v7 = v6;
      if (*(_DWORD *)(DerivedStorage + 4 * v6 + 96) == a2)
        break;
      v6 = 1;
      if (v7)
      {
        v8 = 4294951254;
        goto LABEL_9;
      }
    }
    if (*(_QWORD *)(DerivedStorage + 8 * v6 + 104))
    {
      v8 = 0;
      *a3 = FigFormatDescriptionRetain();
    }
    else
    {
      v8 = FigSignalErrorAt();
    }
  }
LABEL_9:
  v9 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v9);
  return v8;
}

uint64_t fgInstallCallbacksForTrack(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  _BOOL8 v9;
  _BOOL8 v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v8 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v8 + 1;
  if (a3 && *(_BYTE *)(DerivedStorage + 8))
  {
    v11 = 4294951251;
  }
  else
  {
    v9 = *(_BYTE *)(DerivedStorage + 13) != 0;
    while (1)
    {
      v10 = v9;
      if (*(_DWORD *)(DerivedStorage + 4 * v9 + 96) == a2)
        break;
      v9 = 1;
      if (v10)
      {
        v11 = 4294951254;
        goto LABEL_11;
      }
    }
    v12 = (_OWORD *)(DerivedStorage + 24 * v9 + 32);
    if (a3)
    {
      v13 = *a3;
      *(_QWORD *)(DerivedStorage + 24 * v10 + 48) = *((_QWORD *)a3 + 2);
      *v12 = v13;
    }
    else
    {
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(DerivedStorage + 24 * v10 + 40) = 0;
      *(_QWORD *)(DerivedStorage + 24 * v10 + 48) = 0;
    }
    v11 = 0;
    *(_QWORD *)(DerivedStorage + 8 * v10 + 80) = a4;
  }
LABEL_11:
  *(_QWORD *)(DerivedStorage + 24) = v8;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v11;
}

uint64_t fgFlush()
{
  return 0;
}

uint64_t fgCopyTrackProperty(uint64_t a1)
{
  FigManifoldGetFigBaseObject(a1);
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
    return 4294951251;
  else
    return 4294954512;
}

uint64_t FigCDSStackLayoutRegionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSStackLayoutRegionProtocolGetProtocolID_sRegisterFigCDSStackLayoutRegionProtocolTypeOnce, RegisterFigCDSStackLayoutRegionProtocolType);
  return sFigCDSStackLayoutRegionProtocolID;
}

uint64_t RegisterFigCDSStackLayoutRegionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigSCCFormatReaderCreateFromStream(const void *a1, const void *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  CFMutableArrayRef *DerivedStorage;
  uint64_t Instance;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t CMBaseObject;
  void (*v15)(uint64_t, __CFString *, _QWORD);
  uint64_t v16;
  uint64_t v17;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v19;
  CFMutableArrayRef v20;
  uint64_t v21;
  uint64_t v22;
  const __CFArray *v24;
  CFIndex Count;
  CFIndex v26;
  CFArrayRef *ValueAtIndex;
  CFArrayRef v28;
  const __CFArray *v29;
  CFIndex v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, __CFString *, uint64_t);
  CFIndex v34;
  const void *v35;
  CMTimeValue v36;
  uint64_t (*v37)(CMTimeValue, const void *);
  CMTimeValue v38;
  uint64_t (*v39)(CMTimeValue);
  const __CFArray *v40;
  CFIndex v41;
  CFIndex v42;
  uint64_t i;
  _QWORD *v44;
  const void *v45;
  CFIndex v46;
  uint64_t v47;
  CFIndex v48;
  CMTime v49;
  void *value[2];
  __int128 v51;
  CMTime v52;
  CMTime v53;

  if (!a1 || !a4)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_21;
  }
  FigCFDictionaryGetBooleanIfPresent();
  FigFormatReaderGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    v21 = v9;
    FigSignalErrorAt();
    goto LABEL_21;
  }
  DerivedStorage = (CFMutableArrayRef *)CMBaseObjectGetDerivedStorage();
  memset(&v52, 0, sizeof(v52));
  CMTimeMake(&v52, 1001, 30000);
  *(_OWORD *)value = 0u;
  v51 = 0u;
  if (sSCCInfoRegisterTypeOnce != -1)
    dispatch_once_f(&sSCCInfoRegisterTypeOnce, 0, (dispatch_function_t)sccInfoRegisterType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_67;
  }
  v12 = Instance;
  if (a2)
    v13 = CFRetain(a2);
  else
    v13 = 0;
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 24) = CFRetain(a1);
  *(_BYTE *)(v12 + 65) = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v15 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v15)
    v15(CMBaseObject, CFSTR("CFBS_EnableCaching"), *MEMORY[0x1E0C9AE50]);
  value[0] = 0;
  value[1] = sccInfoCaptionDataInfoCallback;
  *(_QWORD *)&v51 = sccInfoEndOfFileCallback;
  *((_QWORD *)&v51 + 1) = 0;
  v16 = FigSCCParserCreate(a1, value, v12, 1, (CFAllocatorRef)a2, (_QWORD *)(v12 + 56));
  if ((_DWORD)v16
    || (v49 = v52,
        v17 = *(_QWORD *)(v12 + 56),
        v53 = v52,
        v16 = FigSCCParserSetFrameDuration(v17, (__int128 *)&v53.value),
        (_DWORD)v16))
  {
LABEL_66:
    v21 = v16;
    CFRelease((CFTypeRef)v12);
LABEL_67:
    if ((_DWORD)v21)
      goto LABEL_21;
    goto LABEL_16;
  }
  *(CMTime *)(v12 + 32) = v49;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)a2, 0, 0);
  *(_QWORD *)(v12 + 80) = Mutable;
  if (!Mutable)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_66;
  }
  *DerivedStorage = (CFMutableArrayRef)v12;
LABEL_16:
  v19 = CFArrayCreateMutable((CFAllocatorRef)a2, 0, MEMORY[0x1E0C9B378]);
  DerivedStorage[1] = v19;
  if (v19)
  {
    v20 = *DerivedStorage;
    if (*((_BYTE *)*DerivedStorage + 64))
    {
LABEL_18:
      v21 = 0;
      *a4 = 0;
      goto LABEL_21;
    }
    v22 = FigSCCParserParse(*((_QWORD *)v20 + 7));
    v21 = 4294954450;
    switch(v22)
    {
      case 0xFFFFBF48:
      case 0xFFFFBF4B:
      case 0xFFFFBF4C:
      case 0xFFFFBF4D:
        v21 = 4294954448;
        goto LABEL_21;
      case 0xFFFFBF49:
      case 0xFFFFBF4A:
        goto LABEL_70;
      case 0xFFFFBF4E:
        v21 = 4294954447;
        goto LABEL_21;
      case 0xFFFFBF4F:
        v21 = 4294954516;
        goto LABEL_21;
      case 0xFFFFBF50:
        goto LABEL_21;
      default:
        if ((_DWORD)v22)
          goto LABEL_70;
        v24 = (const __CFArray *)*((_QWORD *)v20 + 10);
        if (!v24)
          goto LABEL_52;
        Count = CFArrayGetCount(v24);
        v53.value = 0;
        v46 = Count;
        if (Count < 1)
          goto LABEL_52;
        v26 = 0;
        v47 = *MEMORY[0x1E0C9AE40];
        break;
    }
    while (1)
    {
      ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*((CFArrayRef *)v20 + 10), v26);
      v28 = *ValueAtIndex;
      value[0] = 0;
      value[1] = 0;
      v29 = ValueAtIndex[7];
      v30 = v29 ? CFArrayGetCount(v29) : 0;
      value[0] = sccInfoCaptionCoverterOutputCallback;
      value[1] = ValueAtIndex;
      v31 = FigCLCPCaptionGroupConverterFromSampleBufferCreate(value, v28, &v53);
      if ((_DWORD)v31)
        break;
      v32 = FigCaptionGroupConverterFromSampleBufferGetCMBaseObject(v53.value);
      v33 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v33)
        goto LABEL_47;
      v48 = v26;
      v31 = v33(v32, CFSTR("FCGCFS_ShouldGenerateSpacingAttributeSpaceCharacters"), v47);
      if ((_DWORD)v31)
        break;
      if (v30 >= 1)
      {
        v34 = 0;
        while (1)
        {
          v35 = CFArrayGetValueAtIndex(ValueAtIndex[7], v34);
          v36 = v53.value;
          v37 = *(uint64_t (**)(CMTimeValue, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v37)
            break;
          v31 = v37(v36, v35);
          if ((_DWORD)v31)
            goto LABEL_48;
          if (v30 == ++v34)
            goto LABEL_39;
        }
LABEL_47:
        v21 = 4294954514;
        goto LABEL_49;
      }
LABEL_39:
      v38 = v53.value;
      v39 = *(uint64_t (**)(CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v39)
        goto LABEL_47;
      v31 = v39(v38);
      if ((_DWORD)v31)
        break;
      if (v53.value)
      {
        CFRelease((CFTypeRef)v53.value);
        v53.value = 0;
      }
      v26 = v48 + 1;
      if (v48 + 1 == v46)
      {
        v21 = 0;
        goto LABEL_49;
      }
    }
LABEL_48:
    v21 = v31;
LABEL_49:
    if (v53.value)
      CFRelease((CFTypeRef)v53.value);
    if (!(_DWORD)v21)
    {
LABEL_52:
      v40 = (const __CFArray *)*((_QWORD *)v20 + 10);
      if (v40)
      {
        v41 = CFArrayGetCount(v40);
        if (v41 >= 1)
        {
          v42 = v41;
          for (i = 0; i != v42; ++i)
          {
            value[0] = 0;
            FigTrackReaderGetClassID();
            if (CMDerivedObjectCreate())
            {
              FigSignalErrorAt();
            }
            else
            {
              v44 = (_QWORD *)CMBaseObjectGetDerivedStorage();
              *v44 = CFRetain(v20);
              v44[1] = i;
              v45 = value[0];
              if (value[0])
              {
                CFArrayAppendValue(DerivedStorage[1], value[0]);
                CFRelease(v45);
              }
            }
          }
        }
      }
      *((_BYTE *)v20 + 64) = 1;
      goto LABEL_18;
    }
  }
  else
  {
    v22 = FigSignalErrorAt();
LABEL_70:
    v21 = v22;
  }
LABEL_21:
  if (a5)
    *a5 = 0;
  return v21;
}

void sccFormatReader_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *sccFormatReader_CopyDebugDescription()
{
  uint64_t DerivedStorage;
  CFStringRef v1;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CFCopyDescription(*(CFTypeRef *)(*(_QWORD *)DerivedStorage + 24));
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SCCFormatReader: stream<%@>"), v1);
  if (v1)
    CFRelease(v1);
  return Mutable;
}

uint64_t sccFormatReader_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t *DerivedStorage;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  CMTime *ValueAtIndex;
  const __CFArray *v14;
  const __CFArray *v15;
  uint64_t result;
  const __CFAllocator *v17;
  CFNumberType v18;
  const void **v19;
  const void *v20;
  const void **v21;
  CMTime v22;
  CMTime time2;
  CMTime time1;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v8 = *DerivedStorage;
  if (CFEqual(a2, CFSTR("Duration")) || CFEqual(a2, CFSTR("NominalDuration")))
  {
    v9 = *(const __CFArray **)(v8 + 80);
    if (v9)
    {
      Count = CFArrayGetCount(v9);
      v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (Count >= 1)
      {
        v11 = Count;
        for (i = 0; i != v11; ++i)
        {
          ValueAtIndex = (CMTime *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 80), i);
          time1 = v22;
          time2 = ValueAtIndex[1];
          CMTimeMaximum(&v22, &time1, &time2);
        }
      }
    }
    else
    {
      v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    }
    time1 = v22;
    v14 = CMTimeCopyAsDictionary(&time1, a3);
    goto LABEL_12;
  }
  if (FigCFEqual())
  {
    LODWORD(time1.value) = *(_DWORD *)(v8 + 40);
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v18 = kCFNumberSInt32Type;
LABEL_16:
    v14 = CFNumberCreate(v17, v18, &time1);
LABEL_12:
    v15 = v14;
LABEL_13:
    result = 0;
    *a4 = v15;
    return result;
  }
  if (FigCFEqual())
  {
    v19 = (const void **)kFigFormatReaderIdentifier_SCC;
LABEL_21:
    v20 = *v19;
LABEL_22:
    v14 = (const __CFArray *)CFRetain(v20);
    goto LABEL_12;
  }
  if (FigCFEqual())
  {
    v19 = (const void **)MEMORY[0x1E0C9AE50];
    goto LABEL_21;
  }
  if (FigCFEqual())
    goto LABEL_24;
  if (FigCFEqual() || FigCFEqual())
  {
    LODWORD(time1.value) = 1065353216;
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v18 = kCFNumberFloat32Type;
    goto LABEL_16;
  }
  if (FigCFEqual())
    return sccInfoCopyFigMatrixAsArray(a3, a4);
  if (FigCFEqual())
  {
LABEL_24:
    v21 = (const void **)MEMORY[0x1E0C9AE50];
    goto LABEL_25;
  }
  if (FigCFEqual())
  {
    v20 = *(const void **)(v8 + 72);
    if (v20)
      goto LABEL_22;
    goto LABEL_26;
  }
  if (FigCFEqual())
  {
    v21 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(v8 + 65))
      v21 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_25:
    v20 = *v21;
    if (*v21)
      goto LABEL_22;
LABEL_26:
    v15 = 0;
    goto LABEL_13;
  }
  return 4294954512;
}

uint64_t sccInfoCopyFigMatrixAsArray(const __CFAllocator *a1, CFArrayRef *a2)
{
  uint64_t v4;
  uint64_t v5;
  const __CFAllocator *v6;
  char *v7;
  uint64_t v8;
  CFNumberRef v9;
  CFArrayRef v10;
  uint64_t v11;
  uint64_t i;
  const void *v13;
  _OWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  v4 = 0;
  LODWORD(v5) = 0;
  v17 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = (char *)&kIdentityMatrix;
LABEL_2:
  v8 = 0;
  v5 = (int)v5;
  while (1)
  {
    v9 = CFNumberCreate(v6, kCFNumberFloat32Type, &v7[v8]);
    *((_QWORD *)v15 + v5) = v9;
    if (!v9)
      break;
    ++v5;
    v8 += 4;
    if (v8 == 12)
    {
      ++v4;
      v7 += 12;
      if (v4 != 3)
        goto LABEL_2;
      v10 = CFArrayCreate(a1, (const void **)v15, 9, MEMORY[0x1E0C9B378]);
      if (v10)
      {
        v11 = 0;
        *a2 = v10;
        goto LABEL_9;
      }
      break;
    }
  }
  v11 = FigSignalErrorAt();
LABEL_9:
  for (i = 0; i != 72; i += 8)
  {
    v13 = *(const void **)((char *)v15 + i);
    if (v13)
      CFRelease(v13);
  }
  return v11;
}

uint64_t sccFormatReader_GetTrackCount(uint64_t a1, const __CFArray **a2)
{
  const __CFArray *Count;

  Count = *(const __CFArray **)(*(_QWORD *)CMBaseObjectGetDerivedStorage() + 80);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  *a2 = Count;
  return 0;
}

uint64_t sccFormatReader_CopyTrackByIndex(uint64_t a1, CFIndex a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  CFArrayRef *DerivedStorage;
  CFArrayRef v10;
  const __CFArray *v11;
  CFIndex Count;
  uint64_t result;
  const void *ValueAtIndex;
  _DWORD *v15;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  v10 = *DerivedStorage;
  v11 = (const __CFArray *)*((_QWORD *)*DerivedStorage + 10);
  if (v11)
    Count = CFArrayGetCount(v11);
  else
    Count = 0;
  result = 4294954453;
  if ((a2 & 0x8000000000000000) == 0 && Count > a2)
  {
    if (a3)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], a2);
      if (ValueAtIndex)
        ValueAtIndex = CFRetain(ValueAtIndex);
      *a3 = ValueAtIndex;
    }
    if (a4)
      *a4 = 1668047728;
    if (a5)
    {
      v15 = CFArrayGetValueAtIndex(*((CFArrayRef *)v10 + 10), a2);
      result = 0;
      *a5 = v15[2];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sccFormatReader_CopyTrackByID(uint64_t a1, int a2, _QWORD *a3, _DWORD *a4)
{
  CFArrayRef *DerivedStorage;
  CFArrayRef v8;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  _DWORD *ValueAtIndex;
  const void *v15;
  uint64_t result;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  v8 = *DerivedStorage;
  v9 = (const __CFArray *)*((_QWORD *)*DerivedStorage + 10);
  if (!v9)
    return 4294954453;
  Count = CFArrayGetCount(v9);
  if (Count < 1)
    return 4294954453;
  v11 = Count;
  if (*((_DWORD *)CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 10), 0) + 2) != a2)
  {
    v13 = 1;
    while (v11 != v13)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v8 + 10), v13++);
      if (ValueAtIndex[2] == a2)
      {
        v12 = v13 - 1;
        if (v13 - 1 >= v11)
          return 4294954453;
        goto LABEL_9;
      }
    }
    return 4294954453;
  }
  v12 = 0;
LABEL_9:
  if (a3)
  {
    v15 = CFArrayGetValueAtIndex(DerivedStorage[1], v12);
    if (v15)
      v15 = CFRetain(v15);
    *a3 = v15;
  }
  result = 0;
  if (a4)
    *a4 = 1668047728;
  return result;
}

uint64_t sccFormatReader_CopyTrackByType(uint64_t a1, CFIndex a2, int a3, _QWORD *a4, _DWORD *a5)
{
  CFArrayRef *DerivedStorage;
  CFArrayRef v10;
  const __CFArray *v11;
  CFIndex Count;
  uint64_t result;
  const void *ValueAtIndex;
  _DWORD *v15;

  DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  v10 = *DerivedStorage;
  v11 = (const __CFArray *)*((_QWORD *)*DerivedStorage + 10);
  if (v11)
    Count = CFArrayGetCount(v11);
  else
    Count = 0;
  result = 4294954453;
  if ((a2 & 0x8000000000000000) == 0 && a3 == 1668047728 && Count > a2)
  {
    if (a4)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], a2);
      if (ValueAtIndex)
        ValueAtIndex = CFRetain(ValueAtIndex);
      *a4 = ValueAtIndex;
    }
    if (a5)
    {
      v15 = CFArrayGetValueAtIndex(*((CFArrayRef *)v10 + 10), a2);
      result = 0;
      *a5 = v15[2];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sccInfoCaptionDataInfoCallback(_DWORD *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CMTimeEpoch v5;
  uint64_t Frame;
  uint64_t DTS;
  uint64_t Channel;
  unsigned int v9;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  _DWORD *ValueAtIndex;
  const __CFArray *v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  CFTypeRef v20;
  const __CFDictionary *v21;
  CFMutableDataRef Mutable;
  __CFData *v23;
  CFDictionaryRef v24;
  CFMutableArrayRef v25;
  CFMutableArrayRef v26;
  const __CFArray *v27;
  CMTimeEpoch v28;
  _QWORD **v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  const __CFData *v33;
  const UInt8 *BytePtr;
  size_t Length;
  int v36;
  _OWORD *v37;
  _OWORD *v38;
  uint64_t v39;
  __int128 v41;
  __int128 v42;
  CMTime formatDescriptionOut;
  CMSampleTimingInfo cf;
  void *values[2];
  _BYTE v46[32];
  __int128 v47;
  CMTimeEpoch v48;
  const void *v49;
  const void *v50;
  CFDataRef v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  CMTimeEpoch v55;
  int v56;
  UInt8 v57[4];
  UInt8 bytes[4];
  void *keys;

  v4 = *(const __CFAllocator **)(a2 + 16);
  v56 = 0;
  v42 = *MEMORY[0x1E0CA2E18];
  v54 = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v55 = v5;
  v53 = 0;
  v52 = 0;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  Frame = FigSCCParserCaptionDataInfoGetFrame((uint64_t)a1, 0, &v56);
  if ((_DWORD)Frame)
    return Frame;
  DTS = FigSCCParserCaptionDataInfoGetDTS((uint64_t)a1, (uint64_t)&v54);
  if ((_DWORD)DTS)
    goto LABEL_60;
  Channel = FigSCCParserCaptionDataInfoGetChannel(a1, (_DWORD *)&v53 + 1, &v53, &v52);
  if ((_DWORD)Channel || (_DWORD)v53 != 1668314222 || ((v52 - 1) | (HIDWORD(v53) - 1)) > 1)
    goto LABEL_54;
  v9 = v52 + 2 * HIDWORD(v53) - 2;
  v10 = *(const __CFArray **)(a2 + 80);
  if (!v10)
    goto LABEL_13;
  Count = CFArrayGetCount(v10);
  if (Count < 1)
  {
LABEL_11:
    v15 = *(const __CFArray **)(a2 + 80);
    if (v15)
    {
      v16 = CFArrayGetCount(v15);
      goto LABEL_14;
    }
LABEL_13:
    v16 = 0;
LABEL_14:
    v17 = CFAllocatorAllocate(v4, 72, 0);
    v18 = v17;
    if (!v17)
      goto LABEL_62;
    v19 = v16 + 1;
    v17[8] = 0;
    *((_OWORD *)v17 + 2) = 0u;
    *((_OWORD *)v17 + 3) = 0u;
    *(_OWORD *)v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    if (v4)
      v20 = CFRetain(v4);
    else
      v20 = 0;
    v21 = 0;
    *v18 = v20;
    *((_DWORD *)v18 + 2) = v19;
    *((_DWORD *)v18 + 3) = v9;
    values[0] = 0;
    cf.duration.value = 0;
    formatDescriptionOut.value = 0;
    if (v9 != 1)
    {
      keys = CFSTR("cccc");
      Mutable = CFDataCreateMutable(v4, 8);
      values[0] = Mutable;
      if (!Mutable
        || (v23 = Mutable,
            *(_DWORD *)bytes = 942683748,
            CFDataAppendBytes(Mutable, bytes, 4),
            *(_DWORD *)v57 = bswap32(v9),
            CFDataAppendBytes(v23, v57, 4),
            (cf.duration.value = (CMTimeValue)CFDictionaryCreate(v4, (const void **)&keys, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)|| (v24 = CFDictionaryCreate(v4, MEMORY[0x1E0CA2240], (const void **)&cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
      {
        Channel = FigSignalErrorAt();
        goto LABEL_27;
      }
      v21 = v24;
    }
    Channel = CMFormatDescriptionCreate(v4, 0x636C6370u, 0x63363038u, v21, (CMFormatDescriptionRef *)&formatDescriptionOut);
    if (!(_DWORD)Channel)
      v18[2] = formatDescriptionOut.value;
    if (v21)
      CFRelease(v21);
LABEL_27:
    if (cf.duration.value)
      CFRelease((CFTypeRef)cf.duration.value);
    if (values[0])
      CFRelease(values[0]);
    if ((_DWORD)Channel)
    {
      sccInfoTrackRelease((const __CFAllocator **)v18);
      goto LABEL_54;
    }
    v25 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
    v18[7] = v25;
    if (v25)
    {
      v26 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
      v18[8] = v26;
      if (v26)
      {
        sccInfoTrackRelease(0);
LABEL_35:
        CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 80), v18);
        goto LABEL_36;
      }
    }
LABEL_62:
    Channel = FigSignalErrorAt();
    sccInfoTrackRelease((const __CFAllocator **)v18);
    v18 = 0;
    if ((_DWORD)Channel)
      goto LABEL_54;
    goto LABEL_35;
  }
  v12 = Count;
  v13 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 80), v13);
    if (ValueAtIndex[3] == v9)
      break;
    if (v12 == ++v13)
      goto LABEL_11;
  }
  v18 = ValueAtIndex;
LABEL_36:
  DTS = FigSCCParserCaptionDataInfoGetCaptionData((uint64_t)a1, &v51);
  if ((_DWORD)DTS)
    goto LABEL_60;
  v27 = (const __CFArray *)v18[7];
  if (!v27 || !CFArrayGetCount(v27))
  {
    *(_OWORD *)values = v54;
    *(_QWORD *)v46 = v55;
    v41 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&cf.duration.value = *MEMORY[0x1E0CA2E68];
    v28 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    cf.duration.epoch = v28;
    if (CMTimeCompare((CMTime *)values, &cf.duration))
    {
      *(_OWORD *)values = v54;
      *(_QWORD *)v46 = v55;
      *(_OWORD *)&v46[8] = v41;
      *(_QWORD *)&v46[24] = v28;
      v47 = v42;
      v48 = v5;
      *(_OWORD *)&cf.presentationTimeStamp.timescale = *(_OWORD *)&v46[16];
      *(_OWORD *)&cf.decodeTimeStamp.value = v42;
      cf.decodeTimeStamp.epoch = v5;
      *(_OWORD *)&cf.duration.value = v54;
      *(_OWORD *)&cf.duration.epoch = *(_OWORD *)v46;
      DTS = sccInfoEmptyMediaSampleBufferCreate(&cf, v4, &v49);
      if ((_DWORD)DTS)
        goto LABEL_60;
      CFArrayAppendValue((CFMutableArrayRef)v18[7], v49);
    }
  }
  v29 = (_QWORD **)(v18 + 6);
  v30 = v18[6];
  if (v30)
  {
    *(_OWORD *)&cf.duration.value = v54;
    cf.duration.epoch = v55;
    v31 = *(_OWORD *)v30;
    formatDescriptionOut.epoch = *(_QWORD *)(v30 + 16);
    *(_OWORD *)&formatDescriptionOut.value = v31;
    CMTimeSubtract((CMTime *)values, &cf.duration, &formatDescriptionOut);
    *(_OWORD *)(v30 + 24) = *(_OWORD *)values;
    *(_QWORD *)(v30 + 40) = *(_QWORD *)v46;
    DTS = sccInfoSampleBufferCreate((__int128 *)v30, (const opaqueCMFormatDescription *)v18[2], v4, &v50);
    if (!(_DWORD)DTS)
    {
      CFArrayAppendValue((CFMutableArrayRef)v18[7], v50);
      goto LABEL_45;
    }
LABEL_60:
    Channel = DTS;
    goto LABEL_54;
  }
LABEL_45:
  v32 = v56;
  v33 = v51;
  *(_OWORD *)values = v54;
  *(_QWORD *)v46 = v55;
  BytePtr = CFDataGetBytePtr(v51);
  Length = CFDataGetLength(v33);
  formatDescriptionOut.value = 0;
  keys = 0;
  if (v9 - 1 >= 2)
    v36 = 1667527730;
  else
    v36 = 1667522932;
  v37 = CFAllocatorAllocate(v4, 64, 0);
  v38 = v37;
  cf.duration.value = (CMTimeValue)v37;
  if (v37)
  {
    v37[2] = 0u;
    v37[3] = 0u;
    *v37 = 0u;
    v37[1] = 0u;
    v39 = CMBlockBufferCreateWithMemoryBlock(v4, 0, Length + 8, v4, 0, 0, Length + 8, 1u, (CMBlockBufferRef *)&formatDescriptionOut);
    if ((_DWORD)v39
      || (keys = (void *)_byteswap_uint64(__PAIR64__((int)Length + 8, v36)),
          v39 = CMBlockBufferReplaceDataBytes(&keys, (CMBlockBufferRef)formatDescriptionOut.value, 0, 8uLL),
          (_DWORD)v39)
      || (v39 = CMBlockBufferReplaceDataBytes(BytePtr, (CMBlockBufferRef)formatDescriptionOut.value, 8uLL, Length),
          (_DWORD)v39))
    {
      Channel = v39;
      sccInfoSCCSampleReleaseAndClear(v4, &cf);
      goto LABEL_54;
    }
    *v38 = *(_OWORD *)values;
    *((_QWORD *)v38 + 2) = *(_QWORD *)v46;
    *((_DWORD *)v38 + 12) = v32;
    *((_QWORD *)v38 + 7) = formatDescriptionOut.value;
    cf.duration.value = 0;
    sccInfoSCCSampleReleaseAndClear(v4, &cf);
  }
  else
  {
    Channel = FigSignalErrorAt();
    sccInfoSCCSampleReleaseAndClear(v4, &cf);
    if ((_DWORD)Channel)
      goto LABEL_54;
  }
  sccInfoSCCSampleReleaseAndClear(v4, v29);
  Channel = 0;
  *v29 = v38;
LABEL_54:
  if (v49)
    CFRelease(v49);
  if (v50)
    CFRelease(v50);
  return Channel;
}

uint64_t sccInfoEndOfFileCallback(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  char *ValueAtIndex;
  _QWORD **v7;
  uint64_t v8;
  const opaqueCMFormatDescription **v9;
  int32_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  CMTime v16;
  CMTime time;
  CMTime v18;
  void *value;

  v2 = *(const __CFArray **)(a1 + 80);
  if (!v2)
    return 0;
  Count = CFArrayGetCount(v2);
  value = 0;
  if (Count < 1)
    return 0;
  v4 = Count;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v5);
    v7 = (_QWORD **)(ValueAtIndex + 48);
    v8 = *((_QWORD *)ValueAtIndex + 6);
    if (v8)
      break;
LABEL_9:
    if (v4 == ++v5)
      return 0;
  }
  v9 = (const opaqueCMFormatDescription **)ValueAtIndex;
  v10 = *(_DWORD *)(v8 + 48);
  time = *(CMTime *)(a1 + 32);
  CMTimeMultiply(&v18, &time, v10);
  *(CMTime *)(v8 + 24) = v18;
  v11 = sccInfoSampleBufferCreate((__int128 *)v8, v9[2], *(const __CFAllocator **)(a1 + 16), &value);
  v12 = value;
  if (!(_DWORD)v11)
  {
    CFArrayAppendValue(v9[7], value);
    v13 = *(_OWORD *)v8;
    time.epoch = *(_QWORD *)(v8 + 16);
    *(_OWORD *)&time.value = v13;
    v16 = *(CMTime *)(v8 + 24);
    CMTimeAdd(&v18, &time, &v16);
    *((CMTime *)v9 + 1) = v18;
    if (v12)
    {
      CFRelease(v12);
      value = 0;
    }
    sccInfoSCCSampleReleaseAndClear(*v9, v7);
    goto LABEL_9;
  }
  v14 = v11;
  if (value)
    CFRelease(value);
  return v14;
}

uint64_t sccInfoMalformedDataCallback(uint64_t a1, const void *a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFAllocator *v11;
  CFMutableArrayRef v12;
  CFMutableDictionaryRef v13;
  __CFDictionary *v14;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;

  v11 = *(const __CFAllocator **)(a9 + 16);
  if ((*(_QWORD *)(a9 + 72)
     || (v12 = CFArrayCreateMutable(*(CFAllocatorRef *)(a9 + 16), 0, MEMORY[0x1E0C9B378]),
         (*(_QWORD *)(a9 + 72) = v12) != 0))
    && (v13 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
  {
    v14 = v13;
    if (!FigCFDictionarySetInt32() && !FigCFDictionarySetInt32())
    {
      CFDictionarySetValue(v14, CFSTR("DiagnosticInformation"), a2);
      CFDictionarySetValue(v14, CFSTR("ReferencedText"), a3);
      FigCFDictionarySetInt32();
      Mutable = CFDictionaryCreateMutable(v11, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        v16 = Mutable;
        if (!FigCFDictionarySetCFIndex() && !FigCFDictionarySetCFIndex())
        {
          CFDictionarySetValue(v14, CFSTR("TextRange"), v16);
          v17 = CFDictionaryCreateMutable(v11, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v17)
          {
            v18 = v17;
            if (!FigCFDictionarySetCFIndex() && !FigCFDictionarySetCFIndex())
            {
              CFDictionarySetValue(v14, CFSTR("TextRangeInLine"), v18);
              CFArrayAppendValue(*(CFMutableArrayRef *)(a9 + 72), v14);
            }
            CFRelease(v18);
          }
          else
          {
            FigSignalErrorAt();
          }
        }
        CFRelease(v16);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    CFRelease(v14);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 1;
}

uint64_t sccInfoRegisterType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sSCCInfoID = result;
  return result;
}

double sccInfo_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void sccInfo_Finalize(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const void *v4;
  CFIndex i;
  const __CFAllocator **ValueAtIndex;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = *(const __CFArray **)(a1 + 80);
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (const __CFAllocator **)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), i);
      sccInfoTrackRelease(ValueAtIndex);
    }
  }
  v7 = *(const void **)(a1 + 80);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v8 = *(const void **)(a1 + 72);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 72) = 0;
  }
  FigSCCParserRelease(*(void **)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v9 = *(const void **)(a1 + 16);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sccInfoTrackRelease(const __CFAllocator **a1)
{
  const __CFAllocator *v2;
  const __CFAllocator *v3;
  const __CFAllocator *v4;
  const __CFAllocator *v5;

  if (a1)
  {
    v2 = *a1;
    v3 = a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    v4 = a1[7];
    if (v4)
    {
      CFRelease(v4);
      a1[7] = 0;
    }
    v5 = a1[8];
    if (v5)
    {
      CFRelease(v5);
      a1[8] = 0;
    }
    sccInfoSCCSampleReleaseAndClear(v2, (_QWORD **)a1 + 6);
    CFAllocatorDeallocate(v2, a1);
    if (v2)
      CFRelease(v2);
  }
}

void sccInfoSCCSampleReleaseAndClear(CFAllocatorRef allocator, _QWORD **a2)
{
  _QWORD *v3;
  const void *v5;

  if (a2)
  {
    v3 = *a2;
    if (v3)
    {
      v5 = (const void *)v3[7];
      if (v5)
      {
        CFRelease(v5);
        v3 = *a2;
      }
      CFAllocatorDeallocate(allocator, v3);
      *a2 = 0;
    }
  }
}

uint64_t sccInfoEmptyMediaSampleBufferCreate(CMSampleTimingInfo *sampleTimingArray, CFAllocatorRef allocator, _QWORD *a3)
{
  uint64_t v4;
  CMSampleBufferRef v6;

  v6 = 0;
  v4 = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 1, sampleTimingArray, 0, 0, &v6);
  if (!(_DWORD)v4)
  {
    CMSetAttachment(v6, (CFStringRef)*MEMORY[0x1E0CA2678], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
    *a3 = v6;
  }
  return v4;
}

uint64_t sccInfoSampleBufferCreate(__int128 *a1, const opaqueCMFormatDescription *a2, const __CFAllocator *a3, _QWORD *a4)
{
  __int128 v8;
  uint64_t result;
  CMSampleBufferRef v10;
  CMSampleTimingInfo sampleTimingArray;
  size_t sampleSizeArray;

  sampleSizeArray = CMBlockBufferGetDataLength(*((CMBlockBufferRef *)a1 + 7));
  v10 = 0;
  *(_OWORD *)&sampleTimingArray.duration.value = *(__int128 *)((char *)a1 + 24);
  sampleTimingArray.duration.epoch = *((_QWORD *)a1 + 5);
  v8 = *a1;
  sampleTimingArray.presentationTimeStamp.epoch = *((_QWORD *)a1 + 2);
  *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = v8;
  sampleTimingArray.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  result = CMSampleBufferCreate(a3, *((CMBlockBufferRef *)a1 + 7), 1u, 0, 0, a2, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v10);
  if (!(_DWORD)result)
    *a4 = v10;
  return result;
}

uint64_t sccInfoCaptionCoverterOutputCallback(uint64_t a1, uint64_t a2, const __CFAllocator **a3)
{
  const __CFAllocator *v5;
  uint64_t v6;
  const __CFArray *v7;
  CMTimeEpoch v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  __int128 v13;
  CMSampleTimingInfo time2;
  CMSampleTimingInfo time1;
  const void *v16;
  const void *v17;

  v5 = *a3;
  v16 = 0;
  v17 = 0;
  *(_OWORD *)&time1.duration.value = *(_OWORD *)a2;
  time1.duration.epoch = *(_QWORD *)(a2 + 16);
  *(_OWORD *)&time2.duration.value = *(_OWORD *)(a2 + 24);
  time2.duration.epoch = *(_QWORD *)(a2 + 40);
  v6 = FigSampleBufferCreateForCaptionGroup();
  if ((_DWORD)v6)
  {
    v11 = v6;
  }
  else
  {
    v7 = a3[8];
    if (v7 && CFArrayGetCount(v7)
      || (*(_OWORD *)&time1.duration.value = *(_OWORD *)a2,
          time1.duration.epoch = *(_QWORD *)(a2 + 16),
          v13 = *MEMORY[0x1E0CA2E68],
          *(_OWORD *)&time2.duration.value = *MEMORY[0x1E0CA2E68],
          v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16),
          time2.duration.epoch = v8,
          !CMTimeCompare(&time1.duration, &time2.duration)))
    {
      v10 = 0;
LABEL_8:
      CFArrayAppendValue(a3[8], v17);
      v11 = 0;
      if (!v10)
        goto LABEL_10;
      goto LABEL_9;
    }
    *(_OWORD *)&time1.duration.value = *(_OWORD *)a2;
    time1.duration.epoch = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&time1.presentationTimeStamp.value = v13;
    time1.presentationTimeStamp.epoch = v8;
    time1.decodeTimeStamp = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    time2 = time1;
    v9 = sccInfoEmptyMediaSampleBufferCreate(&time2, v5, &v16);
    if (!(_DWORD)v9)
    {
      v10 = v16;
      CFArrayAppendValue(a3[8], v16);
      goto LABEL_8;
    }
    v11 = v9;
    v10 = v16;
    if (v16)
LABEL_9:
      CFRelease(v10);
  }
LABEL_10:
  if (v17)
    CFRelease(v17);
  return v11;
}

void sccTrackReader_Finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *sccTrackReader_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SCCTrackReader %p>"), a1);
  return Mutable;
}

uint64_t sccTrackReader_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  CFIndex *DerivedStorage;
  _DWORD *v8;
  const void *ValueAtIndex;
  const void *v10;
  const __CFArray *v11;
  const __CFAllocator *v12;
  CFNumberType v13;
  const __CFArray *v14;
  uint64_t result;
  const __CFArray *Count;
  CMTime v17;

  DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  v8 = (_DWORD *)*DerivedStorage;
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]);
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v10 = ValueAtIndex;
  if (FigCFEqual())
  {
    v11 = CFArrayCreate(a3, (const void **)v10 + 2, 1, MEMORY[0x1E0C9B378]);
LABEL_10:
    v14 = v11;
    result = 0;
    *a4 = v14;
    return result;
  }
  if (FigCFEqual())
  {
    LODWORD(v17.value) = v8[10];
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = kCFNumberSInt32Type;
LABEL_7:
    v11 = CFNumberCreate(v12, v13, &v17);
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    v11 = (const __CFArray *)CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
    goto LABEL_10;
  }
  if (FigCFEqual())
    return sccInfoCopyFigMatrixAsArray(a3, a4);
  if (FigCFEqual() || FigCFEqual())
  {
    v17 = *(CMTime *)((_BYTE *)v10 + 1);
    v11 = CMTimeCopyAsDictionary(&v17, a3);
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    Count = (const __CFArray *)*((_QWORD *)v10 + 7);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    v17.value = (CMTimeValue)Count;
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v13 = kCFNumberCFIndexType;
    goto LABEL_7;
  }
  if (FigCFEqual())
    return sccCursorServiceCreate(v8, DerivedStorage[1], 1, (uint64_t)a3, a4);
  else
    return 4294954512;
}

uint64_t sccCursorServiceCreate(const void *a1, uint64_t a2, char a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  CFTypeRef v11;

  FigSampleCursorServiceGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1)
      v11 = CFRetain(a1);
    else
      v11 = 0;
    *(_QWORD *)DerivedStorage = v11;
    *(_QWORD *)(DerivedStorage + 8) = a2;
    *(_BYTE *)(DerivedStorage + 16) = a3;
    *a5 = 0;
  }
  return v9;
}

void sccCursorService_finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *sccCursorService_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SCCCursorService %p>"), a1);
  return Mutable;
}

uint64_t sccCursorService_CreateCursorAtPresentationTimeStamp(uint64_t a1, CMTime *a2, _QWORD *a3, char *a4, char *a5)
{
  uint64_t DerivedStorage;
  CFIndex v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  CMTime v17;
  uint64_t v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(_QWORD *)DerivedStorage;
  v10 = *(_QWORD *)(DerivedStorage + 8);
  v12 = *(unsigned __int8 *)(DerivedStorage + 16);
  v18 = 0;
  v13 = sccCursorCreate((CFArrayRef *)v11, v10, v12, *(_QWORD *)(v11 + 16), &v18);
  if (!(_DWORD)v13)
  {
    v14 = v18;
    v15 = (uint64_t *)CMBaseObjectGetDerivedStorage();
    v17 = *a2;
    sccCursorMoveToDTS(v15, &v17, a4, a5);
    *a3 = v14;
  }
  return v13;
}

uint64_t sccCursorService_CreateCursorNearPresentationTimeStamp(uint64_t a1, CMTime *a2, uint64_t a3, _QWORD *a4, char *a5, char *a6)
{
  CMTime v7;

  v7 = *a2;
  return sccCursorService_CreateCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t sccCursorService_CreateCursorAtFirstSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFIndex v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)DerivedStorage;
  v4 = *(_QWORD *)(DerivedStorage + 8);
  v6 = *(unsigned __int8 *)(DerivedStorage + 16);
  v10 = 0;
  v7 = sccCursorCreate((CFArrayRef *)v5, v4, v6, *(_QWORD *)(v5 + 16), &v10);
  if (!(_DWORD)v7)
  {
    v8 = v10;
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24) = 0;
    *a2 = v8;
  }
  return v7;
}

uint64_t sccCursorService_CreateCursorAtLastSampleInDecodeOrder(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  CFIndex v5;
  int v6;
  char *ValueAtIndex;
  uint64_t v8;
  const __CFArray *v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)DerivedStorage;
  v5 = *(_QWORD *)(DerivedStorage + 8);
  v6 = *(unsigned __int8 *)(DerivedStorage + 16);
  ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)DerivedStorage + 80), v5);
  v8 = 64;
  if (!v6)
    v8 = 56;
  v9 = *(const __CFArray **)&ValueAtIndex[v8];
  if (v9)
    v10 = CFArrayGetCount(v9) - 1;
  else
    v10 = -1;
  v14 = 0;
  v11 = sccCursorCreate((CFArrayRef *)v4, v5, v6, *(_QWORD *)(v4 + 16), &v14);
  if (!(_DWORD)v11)
  {
    v12 = v14;
    *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24) = v10;
    *a2 = v12;
  }
  return v11;
}

uint64_t sccCursorCreate(CFArrayRef *a1, CFIndex a2, int a3, uint64_t a4, _QWORD *a5)
{
  char *ValueAtIndex;
  uint64_t v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t DerivedStorage;

  ValueAtIndex = (char *)CFArrayGetValueAtIndex(a1[10], a2);
  v10 = 64;
  if (!a3)
    v10 = 56;
  v11 = *(const __CFArray **)&ValueAtIndex[v10];
  if (!v11 || !CFArrayGetCount(v11))
    return FigSignalErrorAt();
  FigSampleCursorGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
  {
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)DerivedStorage = CFRetain(a1);
    *(_QWORD *)(DerivedStorage + 8) = a2;
    *(_BYTE *)(DerivedStorage + 16) = a3;
    *a5 = 0;
  }
  return v12;
}

uint64_t sccCursorMoveToDTS(uint64_t *a1, CMTime *a2, char *a3, char *a4)
{
  uint64_t v8;
  CMTime *ValueAtIndex;
  CMTime *v10;
  uint64_t v11;
  const __CFArray *v12;
  CFIndex v13;
  int32_t v14;
  CMTimeEpoch epoch;
  uint64_t result;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  opaqueCMSampleBuffer *v20;
  char v21;
  char v22;
  CMTime v23;
  CMTime lhs;
  CMTime v25;
  CMTime time;
  CMTime time1;

  v8 = *a1;
  ValueAtIndex = (CMTime *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*a1 + 80), a1[1]);
  v10 = ValueAtIndex;
  v11 = 64;
  if (!*((_BYTE *)a1 + 16))
    v11 = 56;
  v12 = *(const __CFArray **)((char *)&ValueAtIndex->value + v11);
  if (v12)
    v13 = CFArrayGetCount(*(CFArrayRef *)((char *)&ValueAtIndex->value + v11)) - 1;
  else
    v13 = -1;
  v14 = *(_DWORD *)(v8 + 40);
  time = *a2;
  CMTimeConvertScale(&time1, &time, v14, kCMTimeRoundingMethod_RoundTowardZero);
  *(_OWORD *)&a2->value = *(_OWORD *)&time1.value;
  epoch = time1.epoch;
  a2->epoch = time1.epoch;
  *(_OWORD *)&time1.value = *(_OWORD *)&a2->value;
  time1.epoch = epoch;
  time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  result = CMTimeCompare(&time1, &time);
  if ((result & 0x80000000) != 0)
  {
    v13 = 0;
    v21 = 0;
    v22 = 1;
    goto LABEL_22;
  }
  time1 = v10[1];
  time = *a2;
  result = CMTimeCompare(&time1, &time);
  if ((int)result < 1)
  {
    v22 = 0;
    v21 = 1;
    goto LABEL_22;
  }
  time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  time = time1;
  v25 = time1;
  if (v13 < 0)
  {
LABEL_17:
    v13 = 0;
    goto LABEL_21;
  }
  v17 = 0;
  while (1)
  {
    v18 = v13 + v17;
    if (v13 + v17 < 0 != __OFADD__(v13, v17))
      ++v18;
    v19 = v18 >> 1;
    v20 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v12, v18 >> 1);
    CMSampleBufferGetPresentationTimeStamp(&time1, v20);
    CMSampleBufferGetDuration(&time, v20);
    lhs = time1;
    v23 = time;
    CMTimeAdd(&v25, &lhs, &v23);
    lhs = *a2;
    v23 = time1;
    result = CMTimeCompare(&lhs, &v23);
    if ((result & 0x80000000) != 0)
    {
      v13 = v19 - 1;
      goto LABEL_16;
    }
    lhs = v25;
    v23 = *a2;
    result = CMTimeCompare(&lhs, &v23);
    if ((int)result > 0)
      break;
    v17 = v19 + 1;
LABEL_16:
    if (v17 > v13)
      goto LABEL_17;
  }
  v13 = v19;
LABEL_21:
  v22 = 0;
  v21 = 0;
LABEL_22:
  a1[3] = v13;
  if (a3)
    *a3 = v22;
  if (a4)
    *a4 = v21;
  return result;
}

void sccCursor_Finalize()
{
  CFTypeRef *DerivedStorage;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *DerivedStorage = 0;
  }
}

__CFString *sccCursor_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<SCCSampleCursor %p>{curSampleNumber:%lld}"), a1, *(_QWORD *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t sccCursor_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  CFIndex *v7;
  CMTime *ValueAtIndex;
  opaqueCMSampleBuffer *CurrentSample;
  CFDictionaryRef v10;
  uint64_t result;
  CMTime v12;
  CMTime rhs;
  CMTime lhs;
  CMTime time;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4)
    return FigSignalErrorAt();
  v7 = (CFIndex *)DerivedStorage;
  if (!FigCFEqual())
    return 4294954512;
  ValueAtIndex = (CMTime *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*v7 + 80), v7[1]);
  CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample((uint64_t)v7);
  memset(&time, 0, sizeof(time));
  CMSampleBufferGetPresentationTimeStamp(&time, CurrentSample);
  memset(&v12, 0, sizeof(v12));
  lhs = ValueAtIndex[1];
  rhs = time;
  CMTimeSubtract(&v12, &lhs, &rhs);
  time = v12;
  v10 = CMTimeCopyAsDictionary(&time, a3);
  result = 0;
  *a4 = v10;
  return result;
}

const void *sccCursorGetCurrentSample(uint64_t a1)
{
  char *ValueAtIndex;
  uint64_t v3;

  ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)a1 + 80), *(_QWORD *)(a1 + 8));
  v3 = 64;
  if (!*(_BYTE *)(a1 + 16))
    v3 = 56;
  return CFArrayGetValueAtIndex(*(CFArrayRef *)&ValueAtIndex[v3], *(_QWORD *)(a1 + 24));
}

uint64_t sccCursor_Copy(uint64_t a1, _QWORD *a2)
{
  _OWORD *DerivedStorage;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  const void *v7;

  DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    v6 = DerivedStorage[1];
    *v5 = *DerivedStorage;
    v5[1] = v6;
    v7 = *(const void **)v5;
    if (v7)
      CFRetain(v7);
    *a2 = 0;
  }
  return v4;
}

uint64_t sccCursor_CompareInDecodeOrder()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD *)(DerivedStorage + 24);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v2 < v3;
  v5 = v2 > v3;
  if (v4)
    return -1;
  else
    return v5;
}

uint64_t sccCursor_GetPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *CurrentSample;
  CMTime v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample(DerivedStorage);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetPresentationTimeStamp(&v6, CurrentSample);
  *a2 = v6;
  return 0;
}

uint64_t sccCursor_GetDecodeTimeStamp(uint64_t a1, CMTime *a2)
{
  sccCursor_GetPresentationTimeStamp(a1, a2);
  return 0;
}

uint64_t sccCursor_GetDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  opaqueCMSampleBuffer *CurrentSample;
  CMTime v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample(DerivedStorage);
  memset(&v6, 0, sizeof(v6));
  CMSampleBufferGetDuration(&v6, CurrentSample);
  *a2 = v6;
  return 0;
}

uint64_t sccCursor_GetDependencyInfo(uint64_t a1, _BYTE *a2, _BYTE *a3, _DWORD *a4, _BYTE *a5)
{
  if (a2)
    *a2 = 1;
  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  return 0;
}

uint64_t sccCursor_CreateSampleBuffer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  CFIndex v6;
  uint64_t v7;
  char *ValueAtIndex;
  uint64_t v9;
  const __CFArray *v10;
  const void *v11;
  uint64_t v12;
  CFIndex v13;
  const void *v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(_QWORD *)(DerivedStorage + 24);
  v7 = *(_QWORD *)DerivedStorage;
  ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)DerivedStorage + 80), *(_QWORD *)(DerivedStorage + 8));
  v9 = 64;
  if (!*(_BYTE *)(DerivedStorage + 16))
    v9 = 56;
  v10 = *(const __CFArray **)&ValueAtIndex[v9];
  if (a2)
  {
    v11 = ValueAtIndex;
    v12 = CMBaseObjectGetDerivedStorage();
    if (v11 != CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 80), *(_QWORD *)(v12 + 8)))
      return FigSignalErrorAt();
    v13 = *(_QWORD *)(v12 + 24);
    if (v6 > v13 || v13 != v6)
      return FigSignalErrorAt();
  }
  v14 = CFArrayGetValueAtIndex(v10, v6);
  if (v14)
    v14 = CFRetain(v14);
  *a3 = v14;
  return 0;
}

uint64_t sccCursor_StepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t *DerivedStorage;
  opaqueCMSampleBuffer *CurrentSample;
  CMTime v6;
  CMTime lhs;
  __int16 v8;
  CMTime v9;
  CMTime v10;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v8 = 0;
  CurrentSample = (opaqueCMSampleBuffer *)sccCursorGetCurrentSample((uint64_t)DerivedStorage);
  memset(&lhs, 0, sizeof(lhs));
  CMSampleBufferGetPresentationTimeStamp(&lhs, CurrentSample);
  v10 = lhs;
  v6 = *a2;
  CMTimeAdd(&v9, &lhs, &v6);
  lhs = v9;
  sccCursorMoveToDTS(DerivedStorage, &lhs, (char *)&v8 + 1, (char *)&v8);
  if (HIBYTE(v8) | v8)
    return 4294954456;
  else
    return 0;
}

uint64_t sccCursor_StepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3;

  v3 = *a2;
  return sccCursor_StepByDecodeTime(a1, &v3);
}

uint64_t sccCursor_CopyFormatDescription(uint64_t a1, _QWORD *a2)
{
  CFIndex *DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  v4 = (CFTypeRef)*((_QWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]) + 2);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  return 0;
}

uint64_t sccCursor_StepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CFIndex *DerivedStorage;
  CFIndex *v6;
  CFIndex v7;
  uint64_t v8;
  char *ValueAtIndex;
  uint64_t v10;
  const __CFArray *Count;
  uint64_t v12;

  DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v7 = DerivedStorage[3];
  v8 = v7 + a2;
  if (a2 < 1)
  {
    v12 = v8 & ~(v8 >> 63);
  }
  else
  {
    ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]);
    v10 = 64;
    if (!*((_BYTE *)v6 + 16))
      v10 = 56;
    Count = *(const __CFArray **)&ValueAtIndex[v10];
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    v12 = (uint64_t)Count - 1;
    if ((uint64_t)Count > v8)
      v12 = v7 + a2;
  }
  v6[3] = v12;
  if (a3)
    *a3 = v12 - v7;
  return 0;
}

uint64_t sccCursor_StepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  sccCursor_StepInDecodeOrderAndReportStepsTaken(a1, a2, a3);
  return 0;
}

uint64_t sccTrackReader_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  CFIndex *DerivedStorage;

  if (a2)
  {
    DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
    *a2 = *((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(*DerivedStorage + 80), DerivedStorage[1]) + 2);
  }
  if (a3)
    *a3 = 1668047728;
  return 0;
}

uint64_t sccTrackReader_CopySampleCursorService(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return sccCursorServiceCreate(*(const void **)DerivedStorage, *(_QWORD *)(DerivedStorage + 8), 0, *(_QWORD *)(*(_QWORD *)DerivedStorage + 16), a2);
}

uint64_t FigAudioUnitRenderPipelineCreate(uint64_t a1, const __CFDictionary *a2, Float64 *a3)
{
  uint64_t v5;
  Float64 mSampleRate;
  uint64_t DerivedStorage;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  const void *Value;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const __CFNumber *v13;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v15;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioStreamBasicDescription *v17;
  OpaqueAudioComponent *Next;
  OpaqueAudioComponentInstance *v19;
  uint64_t v20;
  int CurrentOutputDevice;
  int v23;
  int v24;
  void *v25;
  uint64_t v26;
  opaqueCMBufferQueue *v27;
  CMTime v28;
  void *values;
  uint64_t valuePtr;
  AudioStreamBasicDescription outData;
  CMTime v32;
  CMTime v33;
  AudioComponentInstance outInstance;

  if (!a3)
    return FigSignalErrorAt();
  outData.mSampleRate = 0.0;
  FigRenderPipelineGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    mSampleRate = outData.mSampleRate;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    memset(&v33, 0, sizeof(v33));
    CMTimeMake(&v33, 1, 2);
    memset(&v32, 0, sizeof(v32));
    CMTimeMake(&v32, 1, 1);
    memset(&outData, 0, sizeof(outData));
    values = CFSTR("com.apple.coremedia.audiounitrenderpipeline");
    valuePtr = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!a2)
      goto LABEL_17;
    Value = CFDictionaryGetValue(a2, CFSTR("FormatDescription"));
    v11 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("PreparedQueueLowWaterLevel"));
    if (v11)
    {
      CMTimeMakeFromDictionary(&v28, v11);
      v33 = v28;
    }
    v12 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("PreparedQueueHighWaterLevel"));
    if (v12)
    {
      CMTimeMakeFromDictionary(&v28, v12);
      v32 = v28;
    }
    v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("AudioDeviceID"));
    if (v13)
      HIDWORD(valuePtr) = CFNumberGetValue(v13, kCFNumberIntType, (char *)&valuePtr + 4);
    if (!Value)
      goto LABEL_17;
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    v15 = CMBufferQueueCreate(v8, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 8));
    if ((_DWORD)v15)
    {
LABEL_19:
      if (v9)
        CFRelease(v9);
      if (!(_DWORD)v15)
        *a3 = mSampleRate;
      return v15;
    }
    *(_QWORD *)(DerivedStorage + 16) = Value;
    CFRetain(Value);
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(DerivedStorage + 16));
    if (!StreamBasicDescription)
      goto LABEL_17;
    v17 = StreamBasicDescription;
    outInstance = 0;
    *(_OWORD *)&v28.value = xmmword_1932FAA80;
    LODWORD(v28.epoch) = 0;
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)&v28);
    if (Next && !AudioComponentInstanceNew(Next, &outInstance))
    {
      v19 = outInstance;
      *(_QWORD *)(DerivedStorage + 32) = outInstance;
    }
    else
    {
      if (FigSignalErrorAt())
        goto LABEL_17;
      v19 = *(OpaqueAudioComponentInstance **)(DerivedStorage + 32);
    }
    LODWORD(valuePtr) = 40;
    if (!AudioUnitGetProperty(v19, 8u, 2u, 0, &outData, (UInt32 *)&valuePtr))
    {
      if (outData.mSampleRate == 0.0)
        outData.mSampleRate = v17->mSampleRate;
      if (!CMAudioFormatDescriptionCreate(v8, &outData, 0, 0, 0, 0, 0, (CMAudioFormatDescriptionRef *)(DerivedStorage + 24)))
      {
        LODWORD(valuePtr) = 40;
        if (!AudioUnitSetProperty(*(AudioUnit *)(DerivedStorage + 32), 8u, 1u, 0, v17, 0x28u))
        {
          if (HIDWORD(valuePtr))
            figAudioUnitSetOutputDevice(DerivedStorage, SHIDWORD(valuePtr), (_DWORD *)&valuePtr + 1);
          CurrentOutputDevice = figAudioUnitGetCurrentOutputDevice(DerivedStorage, (_DWORD *)&valuePtr + 1);
          v23 = HIDWORD(valuePtr);
          if (CurrentOutputDevice)
            v23 = 0;
          *(_DWORD *)(DerivedStorage + 84) = v23;
          *(_QWORD *)(DerivedStorage + 40) = figAudioUnit_RenderProc;
          *(_QWORD *)(DerivedStorage + 48) = DerivedStorage;
          if (!AudioUnitSetProperty(*(AudioUnit *)(DerivedStorage + 32), 0x17u, 1u, 0, (const void *)(DerivedStorage + 40), 0x10u)&& !AudioUnitInitialize(*(AudioUnit *)(DerivedStorage + 32)))
          {
            LODWORD(valuePtr) = 4;
            if (!AudioUnitGetProperty(*(AudioUnit *)(DerivedStorage + 32), 0xEu, 0, 0, (void *)(DerivedStorage + 120), (UInt32 *)&valuePtr))
            {
              v24 = *(_DWORD *)(DerivedStorage + 120);
              *(_DWORD *)(DerivedStorage + 144) = 0;
              *(_DWORD *)(DerivedStorage + 148) = 4 * v24;
              v25 = CFAllocatorAllocate(v8, v17->mBytesPerFrame * v24, 0);
              *(_QWORD *)(DerivedStorage + 112) = v25;
              if (v25)
              {
                if (!CMSimpleQueueCreate(v8, 32, (CMSimpleQueueRef *)(DerivedStorage + 136))
                  && !CMSimpleQueueCreate(v8, 32, (CMSimpleQueueRef *)(DerivedStorage + 152)))
                {
                  v26 = FigSemaphoreCreate();
                  *(_QWORD *)(DerivedStorage + 176) = v26;
                  if (v26)
                  {
                    *(_BYTE *)(DerivedStorage + 168) = 1;
                    if (!FigThreadCreate())
                    {
                      v27 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
                      v28 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                      v20 = CMBufferQueueInstallTrigger(v27, (CMBufferQueueTriggerCallback)faurpSourceDataBecameReady, (void *)DerivedStorage, 7, &v28, (CMBufferQueueTriggerToken *)(DerivedStorage + 128));
                      goto LABEL_18;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_17:
    v20 = FigSignalErrorAt();
LABEL_18:
    v15 = v20;
    goto LABEL_19;
  }
  return v5;
}

uint64_t figAudioUnitRenderPipelineInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  OpaqueAudioComponentInstance *v2;
  void *v3;
  opaqueCMBufferQueue *v4;
  opaqueCMBufferQueueTriggerToken *v5;
  opaqueCMSimpleQueue *v6;
  const void *v7;
  opaqueCMSimpleQueue *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      *(_BYTE *)DerivedStorage = 1;
      if (*(_QWORD *)(DerivedStorage + 160))
      {
        *(_BYTE *)(DerivedStorage + 168) = 0;
        FigMemoryBarrier();
        FigSemaphoreSignal();
        FigThreadJoin();
        *(_QWORD *)(v1 + 160) = 0;
      }
      if (*(_QWORD *)(v1 + 176))
      {
        FigSemaphoreDestroy();
        *(_QWORD *)(v1 + 176) = 0;
      }
      v2 = *(OpaqueAudioComponentInstance **)(v1 + 32);
      if (v2)
      {
        AudioUnitUninitialize(v2);
        AudioComponentInstanceDispose(*(AudioComponentInstance *)(v1 + 32));
        *(_QWORD *)(v1 + 32) = 0;
      }
      v3 = *(void **)(v1 + 112);
      if (v3 && *(_DWORD *)(v1 + 120))
      {
        CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3);
        *(_QWORD *)(v1 + 112) = 0;
        *(_DWORD *)(v1 + 120) = 0;
      }
      v4 = *(opaqueCMBufferQueue **)(v1 + 8);
      if (v4)
      {
        v5 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 128);
        if (v5)
        {
          CMBufferQueueRemoveTrigger(v4, v5);
          *(_QWORD *)(v1 + 128) = 0;
          v4 = *(opaqueCMBufferQueue **)(v1 + 8);
        }
        CFRelease(v4);
        *(_QWORD *)(v1 + 8) = 0;
      }
      v6 = *(opaqueCMSimpleQueue **)(v1 + 136);
      if (v6)
      {
        while (1)
        {
          v7 = CMSimpleQueueDequeue(v6);
          if (!v7)
            break;
          CFRelease(v7);
          v6 = *(opaqueCMSimpleQueue **)(v1 + 136);
        }
        FigSimpleQueueRelease();
        *(_QWORD *)(v1 + 136) = 0;
      }
      v8 = *(opaqueCMSimpleQueue **)(v1 + 152);
      if (v8)
      {
        while (1)
        {
          v9 = CMSimpleQueueDequeue(v8);
          if (!v9)
            break;
          CFRelease(v9);
          v8 = *(opaqueCMSimpleQueue **)(v1 + 152);
        }
        FigSimpleQueueRelease();
        *(_QWORD *)(v1 + 152) = 0;
      }
      v10 = *(const void **)(v1 + 16);
      if (v10)
      {
        CFRelease(v10);
        *(_QWORD *)(v1 + 16) = 0;
      }
      v11 = *(const void **)(v1 + 24);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v1 + 24) = 0;
      }
      v12 = *(const void **)(v1 + 184);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(v1 + 184) = 0;
      }
    }
  }
  return 0;
}

__CFString *figAudioUnitRenderPipelineCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAudioUnitRenderPipeline %p>"), a1);
  return Mutable;
}

uint64_t figAudioUnitRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CMClockRef *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  uint64_t result;
  AudioDeviceID v10;
  CFTypeRef *v11;
  OpaqueCMClock *v12;
  OpaqueCMClock *v13;
  const AudioStreamBasicDescription *StreamBasicDescription;
  CMTime v15;
  CMTime v16;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
  {
    *a4 = (CMClockRef)*((_QWORD *)v8 + 1);
    result = *((_QWORD *)v8 + 1);
    if (!result)
      return result;
LABEL_9:
    CFRetain((CFTypeRef)result);
    return 0;
  }
  if (CFEqual(CFSTR("Timebase"), a2))
  {
    *a4 = (CMClockRef)*((_QWORD *)v8 + 23);
    result = *((_QWORD *)v8 + 23);
    if (!result)
      return result;
    goto LABEL_9;
  }
  if (!CFEqual(CFSTR("PreferredClock"), a2))
  {
    if (CFEqual(CFSTR("IsRunning"), a2))
    {
      v11 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!v8[80])
        v11 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      v12 = (OpaqueCMClock *)CFRetain(*v11);
    }
    else
    {
      if (CFEqual(CFSTR("EndPresentationTimeForQueuedSamples"), a2))
      {
        memset(&v16, 0, sizeof(v16));
        CMBufferQueueGetEndPresentationTimeStamp(&v16, *((CMBufferQueueRef *)v8 + 1));
      }
      else
      {
        if (!CFEqual(CFSTR("PipelineLatency"), a2))
          return 4294954446;
        memset(&v16, 0, sizeof(v16));
        StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*((CMAudioFormatDescriptionRef *)v8
                                                                                   + 3));
        if (!StreamBasicDescription)
          return FigSignalErrorAt();
        CMTimeMake(&v16, *((unsigned int *)v8 + 30), (int)StreamBasicDescription->mSampleRate);
      }
      v15 = v16;
      v12 = CMTimeCopyAsDictionary(&v15, a3);
    }
    v13 = v12;
    result = 0;
    *a4 = v13;
    return result;
  }
  v10 = *((_DWORD *)v8 + 21);
  if (v10)
    return CMAudioDeviceClockCreateFromAudioDeviceID(a3, v10, a4);
  else
    return CMAudioDeviceClockCreate(a3, 0, a4);
}

uint64_t figAudioUnitRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v6;
  CFTypeID TypeID;
  const void *v9;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (!CFEqual(CFSTR("Timebase"), a2))
    return 4294954446;
  if (a3)
  {
    TypeID = CMTimebaseGetTypeID();
    if (TypeID != CFGetTypeID(a3))
      return FigSignalErrorAt();
  }
  v9 = (const void *)*((_QWORD *)v6 + 23);
  if (v9)
    CFRelease(v9);
  *((_QWORD *)v6 + 23) = a3;
  if (a3)
    CFRetain(a3);
  return 0;
}

uint64_t figAudioUnitRenderPipelineSetRateAndAnchorTime(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  double mSampleRate;
  uint64_t v8;
  CMTimeFlags v9;
  CMTimeEpoch v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  OpaqueCMTimebase *v14;
  CMClockOrTimebaseRef v15;
  OpaqueCMTimebase *v16;
  double v17;
  CMTime timebaseTime;
  CMTime immediateSourceTime;
  CMTimeValue v21;
  CMTimeScale v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1 == 1.0)
  {
    v6 = CMBaseObjectGetDerivedStorage();
    mSampleRate = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(v6 + 16))->mSampleRate;
    memset(&immediateSourceTime, 0, sizeof(immediateSourceTime));
    CMTimebaseGetTimeWithTimeScale(&immediateSourceTime, *(CMTimebaseRef *)(v6 + 184), (int)mSampleRate, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    v8 = AudioOutputUnitStart(*(AudioUnit *)(v6 + 32));
    if ((_DWORD)v8)
      FigSignalErrorAt();
    CMTimebaseSetRate(*(CMTimebaseRef *)(v6 + 184), a1);
    *(_BYTE *)(v6 + 80) = 1;
    return v8;
  }
  if (a1 != 0.0)
  {
    v13 = DerivedStorage;
    if (*(_BYTE *)(DerivedStorage + 80))
    {
      v8 = AudioOutputUnitStop(*(AudioUnit *)(DerivedStorage + 32));
      *(_BYTE *)(v13 + 80) = 0;
    }
    else
    {
      v8 = 0;
    }
    v14 = *(OpaqueCMTimebase **)(v13 + 184);
    v17 = a1;
    goto LABEL_17;
  }
  v21 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 12);
  v22 = *(_DWORD *)(a3 + 8);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = CMBaseObjectGetDerivedStorage();
  v12 = v11;
  if (*(_BYTE *)(v11 + 80))
  {
    v8 = AudioOutputUnitStop(*(AudioUnit *)(v11 + 32));
    *(_BYTE *)(v12 + 80) = 0;
  }
  else
  {
    v8 = 0;
  }
  v14 = *(OpaqueCMTimebase **)(v12 + 184);
  if ((v9 & 0x1D) != 1)
  {
    v17 = 0.0;
LABEL_17:
    CMTimebaseSetRate(v14, v17);
    return v8;
  }
  v15 = CMTimebaseCopySource(v14);
  v16 = *(OpaqueCMTimebase **)(v12 + 184);
  CMSyncGetTime(&immediateSourceTime, v15);
  timebaseTime.value = v21;
  timebaseTime.timescale = v22;
  timebaseTime.flags = v9;
  timebaseTime.epoch = v10;
  CMTimebaseSetRateAndAnchorTime(v16, 0.0, &timebaseTime, &immediateSourceTime);
  if (v15)
    CFRelease(v15);
  return v8;
}

uint64_t figAudioUnitSetOutputDevice(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;
  int inData;

  inData = a2;
  result = AudioUnitSetProperty(*(AudioUnit *)(a1 + 32), 0x7D0u, 0, 0, &inData, 4u);
  if (a3)
  {
    if (!(_DWORD)result)
      *a3 = inData;
  }
  return result;
}

uint64_t figAudioUnitGetCurrentOutputDevice(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int outData;
  UInt32 ioDataSize;

  outData = 0;
  ioDataSize = 4;
  result = AudioUnitGetProperty(*(AudioUnit *)(a1 + 32), 0x7D0u, 0, 0, &outData, &ioDataSize);
  if (a2)
  {
    if (!(_DWORD)result)
      *a2 = outData;
  }
  return result;
}

uint64_t figAudioUnit_RenderProc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  char *v9;
  const AudioStreamBasicDescription *StreamBasicDescription;
  const AudioStreamBasicDescription *v11;
  uint64_t v12;
  opaqueCMSampleBuffer *v13;
  opaqueCMSampleBuffer *v14;
  CMItemCount NumSamples;
  uint64_t v16;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t mBytesPerFrame;
  uint64_t v19;
  uint64_t v20;

  v9 = *(char **)(a1 + 112);
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 16));
  if (StreamBasicDescription && *(_DWORD *)(a1 + 120) >= a5)
  {
    v11 = StreamBasicDescription;
    v12 = 0;
    if (a5)
    {
      while (1)
      {
        while (1)
        {
          v13 = *(opaqueCMSampleBuffer **)(a1 + 88);
          if (v13)
          {
            NumSamples = *(_QWORD *)(a1 + 104);
            goto LABEL_12;
          }
          v14 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 136));
          *(_QWORD *)(a1 + 88) = v14;
          if (!v14)
            goto LABEL_19;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          if (!CMSampleBufferGetDataBuffer(v14))
            break;
          NumSamples = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(a1 + 88));
          *(_QWORD *)(a1 + 104) = NumSamples;
          *(_DWORD *)(a1 + 144) -= NumSamples;
          if (NumSamples)
            goto LABEL_10;
        }
        NumSamples = *(_QWORD *)(a1 + 104);
        if (NumSamples)
        {
LABEL_10:
          v13 = *(opaqueCMSampleBuffer **)(a1 + 88);
LABEL_12:
          if (a5 - v12 >= NumSamples - *(_QWORD *)(a1 + 96))
            v16 = NumSamples - *(_QWORD *)(a1 + 96);
          else
            v16 = a5 - v12;
          DataBuffer = CMSampleBufferGetDataBuffer(v13);
          CMBlockBufferCopyDataBytes(DataBuffer, *(_QWORD *)(a1 + 96) * v11->mBytesPerFrame, v16 * v11->mBytesPerFrame, v9);
          mBytesPerFrame = v11->mBytesPerFrame;
          v19 = *(_QWORD *)(a1 + 104);
          v20 = *(_QWORD *)(a1 + 96) + v16;
          *(_QWORD *)(a1 + 96) = v20;
          if (v20 == v19)
          {
            CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 152), *(const void **)(a1 + 88));
            *(_QWORD *)(a1 + 88) = 0;
            if (CMSimpleQueueGetCount(*(CMSimpleQueueRef *)(a1 + 136)) <= 0)
              FigSemaphoreSignal();
          }
          v9 += v16 * mBytesPerFrame;
          v12 += v16;
          if (v12 >= a5)
            break;
        }
      }
    }
LABEL_19:
    *(_QWORD *)(a6 + 16) = *(_QWORD *)(a1 + 112);
    *(_DWORD *)(a6 + 12) = v11->mBytesPerFrame * v12;
  }
  return 0;
}

uint64_t faurpTransferThread(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  opaqueCMSampleBuffer *v4;
  opaqueCMSampleBuffer *v5;
  int NumSamples;
  const void *v7;

  if (CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 16)))
  {
    while (1)
    {
      FigSemaphoreWaitRelative();
      if (!*(_BYTE *)(a1 + 168))
        break;
      v2 = *(_DWORD *)(a1 + 144);
      v3 = *(_DWORD *)(a1 + 148);
      while (v2 < v3)
      {
        v4 = (opaqueCMSampleBuffer *)CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(a1 + 8));
        if (!v4)
          break;
        v5 = v4;
        CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 136), v4);
        NumSamples = CMSampleBufferGetNumSamples(v5);
        v3 = *(_DWORD *)(a1 + 148);
        v2 = *(_DWORD *)(a1 + 144) + NumSamples;
        *(_DWORD *)(a1 + 144) = v2;
      }
      while (1)
      {
        v7 = CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 152));
        if (!v7)
          break;
        CFRelease(v7);
      }
    }
  }
  return 0;
}

_BYTE *faurpSourceDataBecameReady(_BYTE *result)
{
  if (!*result)
    return (_BYTE *)FigSemaphoreSignal();
  return result;
}

uint64_t FigVTTMetadataCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef *DerivedStorage;

  if (!a2)
    return FigSignalErrorAt();
  FigVTTNodeGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
    v3 = FigVTTInitializeNodeBaseStorage(DerivedStorage);
    if (!(_DWORD)v3)
      *a2 = 0;
  }
  return v3;
}

void figVTTMetadata_Finalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTMetadata_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("metadata: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figVTTMetadata_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 2;
  return 0;
}

uint64_t figVTTMetadata_copyNodeDocumentSerialization(uint64_t a1, CFStringRef *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 0;
  v4 = *(const void **)(DerivedStorage + 8);
  if (!v4)
    return FigSignalErrorAt();
  v5 = CFRetain(v4);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@\n"), v5);
  CFRelease(v6);
  return 0;
}

uint64_t figTextContainerRegisterFigTextContainer()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigTextContainerID = result;
  return result;
}

uint64_t FigTextContainerCreateWithCFData(const __CFAllocator *a1, CFDataRef theData, CFStringEncoding a3, uint64_t a4, uint64_t *a5)
{
  UInt8 *BytePtr;
  CFIndex Length;

  if (!theData || !a5)
    return FigSignalErrorAt();
  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  return figTextContainerCreateWithCFStringOrDataPtr_internal(a1, 0, BytePtr, Length, a3, a5);
}

uint64_t figTextContainerCreateWithCFStringOrDataPtr_internal(const __CFAllocator *a1, const __CFString *a2, UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, uint64_t *a6)
{
  CFStringRef Copy;
  const __CFString *v8;
  uint64_t Instance;
  uint64_t v10;
  uint64_t v12;

  if (a2)
    Copy = CFStringCreateCopy(a1, a2);
  else
    Copy = CFStringCreateWithBytes(a1, bytes, numBytes, encoding, 1u);
  v8 = Copy;
  if (!Copy)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigTextContainerGetTypeID_sRegisterFigTextContainerOnce, figTextContainerRegisterFigTextContainer);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v10 = Instance;
    *(_QWORD *)(Instance + 16) = v8;
    *(_QWORD *)(Instance + 24) = CFStringGetLength(v8);
    *a6 = v10;
    return 0;
  }
  else
  {
    v12 = FigSignalErrorAt();
    CFRelease(v8);
    return v12;
  }
}

uint64_t FigTextContainerGetLength(uint64_t a1, _QWORD *a2)
{
  if (!a1)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(a1 + 24);
  return 0;
}

uint64_t FigTextContainerGetCharacterAtIndex(uint64_t a1, CFRange buffer)
{
  UniChar *length;

  if (!a1 || buffer.location < 0 || *(_QWORD *)(a1 + 24) <= buffer.location)
    return FigSignalErrorAt();
  length = (UniChar *)buffer.length;
  buffer.length = 1;
  CFStringGetCharacters(*(CFStringRef *)(a1 + 16), buffer, length);
  return 0;
}

uint64_t FigTextContainerGetCharactersForRange(uint64_t a1, CFRange a2, UniChar *a3)
{
  CFIndex v3;

  if (!a1)
    return FigSignalErrorAt();
  if (a2.location < 0)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 24);
  if (a2.location >= v3 || a2.location + a2.length > v3)
    return FigSignalErrorAt();
  CFStringGetCharacters(*(CFStringRef *)(a1 + 16), a2, a3);
  return 0;
}

uint64_t figTextContainer_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void figTextContainer_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 16);
  if (v1)
    CFRelease(v1);
}

CFStringRef figTextContainer_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTextContainer %p]"), a1);
}

CFStringRef figTextContainer_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTextContainer %p], length=%ld, backing=%p"), a1, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 16));
}

uint64_t FigContentKeyCompoundBossCreate(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  const __CFAllocator *v8;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v10;
  const void *v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
    return FigSignalErrorAt();
  FigContentKeyBossGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)DerivedStorage = v7;
  if (!v7)
    return FigSignalErrorAt();
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 24) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v10 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 40) = v10;
  if (!v10)
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 48) = FigIsItOKToLogURLs();
  if (a2)
  {
    v11 = (const void *)*MEMORY[0x1E0C9AE50];
    if (v11 == CFDictionaryGetValue(a2, CFSTR("kCKBCO_DoNotLogURLs")))
      *(_BYTE *)(DerivedStorage + 48) = 0;
  }
  v5 = FigContentKeyBossCreate((uint64_t)v8, a2, (_QWORD *)(DerivedStorage + 16));
  if ((_DWORD)v5)
    return v5;
  if (dword_1EE2A2DB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v13 = 0;
  *a3 = 0;
  return v13;
}

uint64_t ckcb_invalidate(void *a1)
{
  dispatch_queue_t *DerivedStorage;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, a1, (dispatch_function_t)ckcb_invalidateOnQueue);
  return 0;
}

void ckcb_finalize()
{
  dispatch_object_t *DerivedStorage;

  DerivedStorage = (dispatch_object_t *)CMBaseObjectGetDerivedStorage();
  ckcb_invalidateOnQueue();
  if (*DerivedStorage)
    dispatch_release(*DerivedStorage);
}

CFStringRef ckcb_copyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigContentKeyCompoundBoss %p]"), a1);
}

uint64_t ckcb_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[3];
  uint64_t v9;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v9 = 0;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckcb_setPropertyDispatch);
  return v9;
}

void ckcb_invalidateOnQueue()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    v1 = *(const void **)(DerivedStorage + 16);
    if (v1)
      CFRelease(v1);
    v2 = *(const void **)(DerivedStorage + 32);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(DerivedStorage + 24);
    if (v3)
      CFRelease(v3);
    v4 = *(const void **)(DerivedStorage + 40);
    if (v4)
      CFRelease(v4);
  }
}

uint64_t ckcb_setPropertyDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t (*v8)(_QWORD, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    result = FigSignalErrorAt();
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(DerivedStorage + 16);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v6)
    goto LABEL_7;
  result = v6(v5, v2, v3);
  if (!(_DWORD)result)
  {
    if (!*(_QWORD *)(DerivedStorage + 32))
    {
      result = 0;
      goto LABEL_9;
    }
    v8 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v8)
    {
      result = v8(0, v2, v3);
      goto LABEL_9;
    }
LABEL_7:
    result = 4294954514;
  }
LABEL_9:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t ckcb_processRequestEntry(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[3];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  if (!a2 || !a10)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  LOBYTE(v21) = a4;
  *((_QWORD *)&v21 + 1) = a5;
  *(_QWORD *)&v22 = a6;
  *((_QWORD *)&v22 + 1) = a7;
  *(_QWORD *)&v23 = a8;
  *((_QWORD *)&v23 + 1) = a9;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckcb_processRequestDispatch);
  *a10 = v24;
  return DWORD2(v24);
}

uint64_t ckcb_destroyGroupEntry(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[2];
  uint64_t v7;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  context[1] = a2;
  v7 = 0;
  context[0] = a1;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckcb_destroyGroupDispatch);
  return v7;
}

uint64_t ckcb_setClientManagedBossEntry(uint64_t a1, uint64_t a2)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD context[2];
  uint64_t v7;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v7 = 0;
  if (!a2)
    return FigSignalErrorAt();
  context[0] = a1;
  context[1] = a2;
  dispatch_sync_f(*DerivedStorage, context, (dispatch_function_t)ckcb_setClientManagedBossDispatch);
  return v7;
}

uint64_t ckcb_copyAuthorizationTokenEntry(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  dispatch_queue_t *DerivedStorage;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v8[0] = a1;
  v8[1] = a2;
  dispatch_sync_f(*DerivedStorage, v8, (dispatch_function_t)ckcb_copyAuthorizationTokenDispatch);
  *a3 = v9;
  return v10;
}

void ckcb_processRequestDispatch(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  __int128 *v8;
  NSObject *v9;
  uint64_t *DerivedStorage;
  uint64_t v11;
  uint64_t NextRequestID;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _QWORD *, uint64_t, uint64_t, const void *, const void *, __int128 *, uint64_t, uint64_t, unint64_t *);
  int v16;
  const __CFDictionary *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, uint64_t, uint64_t, const void *, const void *, __int128 *, uint64_t, uint64_t, unint64_t *);
  int v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  CFTypeRef cf;
  unint64_t v28;
  __int128 v29;
  void (*v30)(const void *, uint64_t, uint64_t, unint64_t, void *, const void *);
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)a1[1];
  v4 = a1[2];
  v5 = *((unsigned __int8 *)a1 + 24);
  v6 = (const void *)a1[4];
  v7 = (const void *)a1[5];
  v8 = (__int128 *)a1[6];
  v26 = a1[7];
  v9 = a1[8];
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v29 = xmmword_1E2F8CE28;
  v30 = ckcb_requestDidFail;
  cf = 0;
  v28 = 0;
  v24 = v2;
  v25 = v3;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    v16 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v23 = v9;
  v11 = v4;
  NextRequestID = ckbutil_getNextRequestID();
  if (FigContentKeySpecifierGetKeySystem(v3[2]) != 1)
  {
    v13 = DerivedStorage[4];
    if (v13)
    {
      v14 = *DerivedStorage;
      v15 = *(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, const void *, const void *, __int128 *, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v15)
      {
        v16 = v15(v13, v25, v11, v5, v6, v7, &v29, v24, v14, &v28);
        if (!v16)
        {
          v16 = ckcbr_create(*MEMORY[0x1E0C9AE00], v25, v11, v5, v8, v26, v23, NextRequestID, v6, v7, (uint64_t *)&cf);
          if (!v16)
          {
            v17 = (const __CFDictionary *)DerivedStorage[5];
            goto LABEL_12;
          }
        }
        goto LABEL_21;
      }
LABEL_14:
      v21 = -12782;
      goto LABEL_15;
    }
  }
  v18 = DerivedStorage[2];
  v19 = *DerivedStorage;
  v20 = *(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, const void *, const void *, __int128 *, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v20)
    goto LABEL_14;
  v16 = v20(v18, v25, v11, v5, v6, v7, &v29, v24, v19, &v28);
  if (!v16)
  {
    v16 = ckcbr_create(*MEMORY[0x1E0C9AE00], v25, v11, v5, v8, v26, v23, NextRequestID, v6, v7, (uint64_t *)&cf);
    if (!v16)
    {
      v17 = (const __CFDictionary *)DerivedStorage[3];
LABEL_12:
      v16 = ckcb_setRequest(v17, (const void *)(v28 >> 8), cf);
      if (!v16)
      {
        v21 = 0;
        a1[9] = NextRequestID;
        goto LABEL_15;
      }
    }
  }
LABEL_21:
  v21 = v16;
LABEL_15:
  if (dword_1EE2A2DB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
    CFRelease(cf);
  *((_DWORD *)a1 + 20) = v21;
}

void ckcb_requestDidSucceed(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, const void *a6)
{
  uint64_t DerivedStorage;
  const void *v12;
  const __CFArray *v13;
  __CFDictionary *v14;
  const __CFArray *Value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    v12 = (const void *)(a4 >> 8);
    if (*(_QWORD *)(DerivedStorage + 16) == a2)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), v12);
      if (Value)
      {
        ckcb_sendStatusCallbackForRequests(a1, Value, a5, a6, 0);
        v14 = *(__CFDictionary **)(DerivedStorage + 24);
        goto LABEL_7;
      }
    }
    else
    {
      v13 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), v12);
      if (v13)
      {
        ckcb_sendStatusCallbackForRequests(a1, v13, a5, a6, 0);
        v14 = *(__CFDictionary **)(DerivedStorage + 40);
LABEL_7:
        CFDictionaryRemoveValue(v14, v12);
      }
    }
  }
}

void ckcb_requestDidFail(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, const void *a6)
{
  uint64_t DerivedStorage;
  const void *v12;
  const __CFArray *v13;
  const __CFArray *Value;
  const __CFArray *v15;
  CFIndex v16;
  unsigned __int8 *ValueAtIndex;
  const void *v18;
  const __CFArray *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, const void *, uint64_t, unint64_t *);
  int v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t (*v36)();
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v32 = a1;
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    FigSignalErrorAt();
  }
  else
  {
    v12 = (const void *)(a4 >> 8);
    if (*(_QWORD *)(DerivedStorage + 16) == a2)
    {
      Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 24), v12);
      if (Value)
      {
        v15 = Value;
        if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 32)
          && (FigCFErrorIsEqualToOSStatus((__CFError *)a5, (uint64_t)CFSTR("CoreMediaErrorDomain"), -17297)
           || FigCFErrorIsEqualToOSStatus((__CFError *)a5, (uint64_t)CFSTR("CoreMediaErrorDomain"), -17383)))
        {
          v30 = v12;
          v31 = DerivedStorage;
          v33 = CMBaseObjectGetDerivedStorage();
          v35 = xmmword_1E2F8CE28;
          v36 = ckcb_requestDidFail;
          v34 = 0;
          if (CFArrayGetCount(v15) >= 1)
          {
            v16 = 0;
            while (1)
            {
              ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v15, v16);
              if (!ValueAtIndex)
                break;
              v18 = ValueAtIndex;
              v19 = v15;
              v20 = *(_QWORD *)(v33 + 32);
              v21 = *((_QWORD *)ValueAtIndex + 5);
              v22 = *((_QWORD *)ValueAtIndex + 6);
              v23 = ValueAtIndex[56];
              v24 = *((_QWORD *)ValueAtIndex + 2);
              v25 = *((_QWORD *)ValueAtIndex + 3);
              v26 = *(_QWORD *)v33;
              v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, const void *, uint64_t, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v27)
                v28 = v27(v20, v21, v22, v23, v24, v25, &v35, v32, v26, &v34);
              else
                v28 = -12782;
              v15 = v19;
              if (dword_1EE2A2DB8)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (!v28
                && !ckcb_setRequest(*(const __CFDictionary **)(v33 + 40), (const void *)(v34 >> 8), v18)
                && ++v16 < CFArrayGetCount(v19))
              {
                continue;
              }
              goto LABEL_20;
            }
            FigSignalErrorAt();
          }
LABEL_20:
          v12 = v30;
          DerivedStorage = v31;
        }
        else
        {
          ckcb_sendStatusCallbackForRequests(v32, v15, 0, a6, a5);
        }
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 24), v12);
      }
    }
    else
    {
      v13 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 40), v12);
      if (v13)
      {
        ckcb_sendStatusCallbackForRequests(a1, v13, 0, a6, a5);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 40), v12);
      }
    }
  }
}

uint64_t ckcbr_create(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, __int128 *a5, uint64_t a6, NSObject *a7, uint64_t a8, const void *a9, const void *a10, uint64_t *a11)
{
  uint64_t Instance;
  uint64_t v18;
  CFTypeRef v19;
  __int128 v20;
  CFTypeRef v21;
  CFTypeRef v22;
  uint64_t result;
  __int128 context;

  if (!a2 || !a11)
    return FigSignalErrorAt();
  context = xmmword_1E2F8CEA0;
  if (ckcbr_getTypeID_once != -1)
    dispatch_once_f(&ckcbr_getTypeID_once, &context, (dispatch_function_t)ckbutil_registerClass);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v18 = Instance;
  v19 = (CFTypeRef)a2[2];
  if (v19)
    v19 = CFRetain(v19);
  *(_QWORD *)(v18 + 32) = v19;
  *(_QWORD *)(v18 + 40) = CFRetain(a2);
  *(_QWORD *)(v18 + 48) = a3;
  *(_BYTE *)(v18 + 56) = a4;
  if (a6)
    *(_QWORD *)(v18 + 88) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (a7)
    dispatch_retain(a7);
  *(_QWORD *)(v18 + 96) = a7;
  v20 = *a5;
  *(_QWORD *)(v18 + 80) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(v18 + 64) = v20;
  if (a9)
    v21 = CFRetain(a9);
  else
    v21 = 0;
  *(_QWORD *)(v18 + 16) = v21;
  if (a10)
    v22 = CFRetain(a10);
  else
    v22 = 0;
  result = 0;
  *(_QWORD *)(v18 + 24) = v22;
  *(_QWORD *)(v18 + 104) = a8;
  *a11 = v18;
  return result;
}

uint64_t ckcb_setRequest(const __CFDictionary *a1, const void *a2, const void *a3)
{
  void *Value;
  CFMutableArrayRef Mutable;

  Value = (void *)CFDictionaryGetValue(a1, a2);
  if (Value)
    goto LABEL_4;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    Value = Mutable;
    CFDictionarySetValue(a1, a2, Mutable);
    CFRelease(Value);
LABEL_4:
    CFArrayAppendValue((CFMutableArrayRef)Value, a3);
    return 0;
  }
  return FigSignalErrorAt();
}

CFIndex ckcb_sendStatusCallbackForRequests(const void *a1, CFArrayRef theArray, const void *a3, const void *a4, const void *a5)
{
  const __CFArray *v8;
  CFIndex result;
  CFIndex v11;
  dispatch_queue_t *ValueAtIndex;
  dispatch_queue_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef v19;
  CFTypeRef v20;
  const void *v21;
  const __CFArray *v22;

  v8 = theArray;
  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    v11 = 0;
    v21 = a4;
    v22 = v8;
    while (1)
    {
      ValueAtIndex = (dispatch_queue_t *)CFArrayGetValueAtIndex(v8, v11);
      if (!ValueAtIndex)
        break;
      v13 = ValueAtIndex;
      v14 = malloc_type_calloc(1uLL, 0x28uLL, 0x60040BD33DE68uLL);
      if (v14)
      {
        v15 = v14;
        if (dword_1EE2A2DB8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a4 = v21;
          v8 = v22;
        }
        if (a1)
          v17 = CFRetain(a1);
        else
          v17 = 0;
        *v15 = v17;
        v15[1] = CFRetain(v13);
        if (a5)
          v18 = CFRetain(a5);
        else
          v18 = 0;
        v15[2] = v18;
        if (a3)
          v19 = CFRetain(a3);
        else
          v19 = 0;
        v15[3] = v19;
        if (a4)
          v20 = CFRetain(a4);
        else
          v20 = 0;
        v15[4] = v20;
        dispatch_async_f(v13[12], v15, (dispatch_function_t)ckcb_sendStatusCallbackOnQueue);
      }
      else
      {
        FigSignalErrorAt();
      }
      ++v11;
      result = CFArrayGetCount(v8);
      if (v11 >= result)
        return result;
    }
    return FigSignalErrorAt();
  }
  return result;
}

void ckcb_sendStatusCallbackOnQueue(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, _QWORD);
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    FigSignalErrorAt();
    v3 = 0;
  }
  else
  {
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    v3 = (const void *)v2;
    if (!v2)
      goto LABEL_9;
    v5 = *(_QWORD **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 && (v6 = (void (*)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, _QWORD))v5[10]) != 0)
    {
      v7 = *(CFTypeRef *)a1;
      v8 = v5[4];
      v9 = v5[13];
    }
    else
    {
      v6 = (void (*)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, _QWORD))v5[9];
      if (!v6)
        goto LABEL_9;
      v7 = *(CFTypeRef *)a1;
      v8 = v5[4];
      v9 = v5[13];
      v4 = *(_QWORD *)(a1 + 24);
    }
    v6(v2, v7, v8, v9, v4, *(_QWORD *)(a1 + 32));
  }
LABEL_9:
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(a1 + 24);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 16);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(a1 + 32);
  if (v13)
    CFRelease(v13);
  if (v3)
    CFRelease(v3);
  free((void *)a1);
}

void ckcbr_finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  v2 = (const void *)a1[4];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[11];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[3];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[2];
  if (v6)
    CFRelease(v6);
  v7 = a1[12];
  if (v7)
    dispatch_release(v7);
}

CFStringRef ckcbr_copyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%lld/%lld"), *(_QWORD *)(a1 + 104) >> 8, *(_QWORD *)(a1 + 104));
}

uint64_t ckcb_destroyGroupDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t);
  int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(_QWORD *)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    result = FigSignalErrorAt();
    v7 = result;
  }
  else
  {
    v4 = *(_QWORD *)(DerivedStorage + 16);
    result = CMBaseObjectGetVTable();
    v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 72);
    if (v6)
    {
      result = v6(v4, v2);
      v7 = result;
    }
    else
    {
      v7 = -12782;
    }
    v8 = *(_QWORD *)(DerivedStorage + 32);
    if (v8)
    {
      result = CMBaseObjectGetVTable();
      v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 72);
      if (v9)
      {
        result = v9(v8, v2);
        v7 = result;
      }
      else
      {
        v7 = -12782;
      }
    }
    if (dword_1EE2A2DB8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  *(_DWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t ckcb_setClientManagedBossDispatch(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  void (*v6)(uint64_t, const __CFString *, _QWORD);
  uint64_t v7;
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (ckcb_setClientManagedBoss_getDefaultOnce != -1)
    dispatch_once_f(&ckcb_setClientManagedBoss_getDefaultOnce, &ckcb_setClientManagedBoss_shouldDisableCustomURLLoaderForClientManagedBoss, (dispatch_function_t)ckcb_getShouldDisableCustomURLLoaderForClientManagedBossDefault);
  if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 8))
  {
    result = FigSignalErrorAt();
    LODWORD(v10) = result;
  }
  else
  {
    v4 = *(const void **)(DerivedStorage + 32);
    *(_QWORD *)(DerivedStorage + 32) = v2;
    if (v2)
      CFRetain(v2);
    if (v4)
      CFRelease(v4);
    v5 = *(_QWORD *)(DerivedStorage + 16);
    v6 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v6)
      v6(v5, CFSTR("kCKBP_CanRetryRequests"), *MEMORY[0x1E0C9AE40]);
    v7 = *(_QWORD *)(DerivedStorage + 16);
    result = CMBaseObjectGetVTable();
    v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 120);
    if (v9)
      result = v9(v7, 4);
    if (ckcb_setClientManagedBoss_shouldDisableCustomURLLoaderForClientManagedBoss)
    {
      v10 = *(_QWORD *)(DerivedStorage + 32);
      if (!v10)
        goto LABEL_17;
      result = CMBaseObjectGetVTable();
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 120);
      if (v11)
        result = v11(v10, 10);
    }
    LODWORD(v10) = 0;
  }
LABEL_17:
  if (dword_1EE2A2DB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 16) = v10;
  return result;
}

_BYTE *ckcb_getShouldDisableCustomURLLoaderForClientManagedBossDefault(_BYTE *result)
{
  *result = 0;
  return result;
}

uint64_t ckcb_copyAuthorizationTokenDispatch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 16;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 8))
  {
    result = FigSignalErrorAt();
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(DerivedStorage + 32);
  if (!v6)
    goto LABEL_8;
  result = CMBaseObjectGetVTable();
  v7 = *(_QWORD **)(result + 16);
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v7[13];
  if (v8 && *v7 >= 2uLL)
  {
    result = v8(v6, v2, v3);
LABEL_6:
    LODWORD(v6) = result;
    goto LABEL_8;
  }
  LODWORD(v6) = -12782;
LABEL_8:
  if (dword_1EE2A2DB8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t FigCDSCALayerOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  if (a2 && a3 && a4 && a8)
  {
    *a8 = 0;
    FigCDSOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

double FigCDSCALayerOutputGetOverscan()
{
  void *v0;
  int v1;
  double result;
  double v3;

  v0 = (void *)objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "getLayerDisplay");
  v1 = objc_msgSend(v0, "isOverscanned");
  result = 1.0;
  if (v1)
  {
    objc_msgSend(v0, "overscanAmounts", 1.0);
    return v3;
  }
  return result;
}

uint64_t FigCDSCALayerOutputGetOrientation()
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "contentsAreFlipped") ^ 1;
}

uint64_t FigCDSCALayerOutputGetDisplayScale()
{
  float v0;

  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "getDisplayScale");
  return (int)v0;
}

void FigCDSCALayerOutput_Finalize()
{
  id *DerivedStorage;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  objc_msgSend(*DerivedStorage, "removeFromSuperlayer");

}

__CFString *FigCDSCALayerOutput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCDSCALayerOutput %p>"), a1);
  return Mutable;
}

uint64_t transactionBegin_0()
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  return 0;
}

uint64_t transactionFlush_0()
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "flush");
  return 0;
}

uint64_t transactionCommit_0()
{
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  return 0;
}

uint64_t setNeedsDisplayInRect_0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  id *DerivedStorage;
  CGRect v10;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectEqualToRect(v10, *MEMORY[0x1E0C9D628]);
  objc_msgSend(*DerivedStorage, "setNeedsDisplay");
  return 0;
}

uint64_t getBounds_0()
{
  return objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "bounds");
}

uint64_t setBounds_0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  id *DerivedStorage;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  double v13;
  double v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  CGRect v20;
  CGRect v21;

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  objc_msgSend(*DerivedStorage, "position");
  v10 = v9;
  objc_msgSend(*DerivedStorage, "bounds");
  v12 = v10 - v11 * 0.5;
  objc_msgSend(*DerivedStorage, "position");
  v14 = v13;
  objc_msgSend(*DerivedStorage, "bounds");
  v16 = v14 - v15 * 0.5;
  objc_msgSend(*DerivedStorage, "bounds");
  v18 = v17;
  objc_msgSend(*DerivedStorage, "bounds");
  v20.origin.x = v12;
  v20.origin.y = v16;
  v20.size.width = v18;
  v21.origin.x = a1;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  if (!CGRectEqualToRect(v20, v21))
  {
    objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
    objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
    objc_msgSend(*DerivedStorage, "setBounds:", 0.0, 0.0, a3, a4);
    objc_msgSend(*DerivedStorage, "setPosition:", a3 * 0.5, a4 * 0.5);
    objc_msgSend(*DerivedStorage, "setNeedsLayout");
    objc_msgSend(*DerivedStorage, "setNeedsDisplay");
    objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  }
  return 0;
}

uint64_t setVideoBounds_0(double a1, double a2, double a3, double a4)
{
  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "setVideoBounds:", a1, a2, a3, a4);
  return 0;
}

int clear_0(void)
{
  double v0;
  double v1;
  double v2;
  double v3;

  objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "clear:", v0, v1, v2, v3);
  return 0;
}

void TextParserBase::TextParserBase(TextParserBase *this, int a2, int (*a3)(uint64_t, uint64_t *, uint64_t *, __CFData *, __CFData *, void *), void *a4)
{
  *(_QWORD *)this = off_1E2F8CF80;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = a2;
  *((_QWORD *)this + 3) = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
}

void TextParserBase::~TextParserBase(TextParserBase *this)
{
  const void *v1;

  *(_QWORD *)this = off_1E2F8CF80;
  v1 = (const void *)*((_QWORD *)this + 3);
  if (v1)
    CFRelease(v1);
}

void TextRendererBase::TextRendererBase(TextRendererBase *this)
{
  *(_QWORD *)this = off_1E2F8CFC8;
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 2) = 0;
}

void TextRendererBase::SetProperties(TextRendererBase *this, CFDictionaryRef theDict)
{
  int64_t Count;
  size_t v5;
  const void **v6;
  const void **v7;
  const void **v8;
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  Count = CFDictionaryGetCount(theDict);
  if (Count >= 1)
  {
    v5 = Count;
    v6 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    v7 = (const void **)malloc_type_calloc(v5, 8uLL, 0xC0040B8AA526DuLL);
    v8 = v7;
    if (v6 && v7)
    {
      CFDictionaryGetKeysAndValues(theDict, v6, v7);
      v9 = v6;
      v10 = v8;
      do
      {
        v12 = (uint64_t)*v9++;
        v11 = v12;
        v13 = (uint64_t)*v10++;
        (*(void (**)(TextRendererBase *, uint64_t, uint64_t))(*(_QWORD *)this + 48))(this, v11, v13);
        --v5;
      }
      while (v5);
    }
    free(v6);
    free(v8);
  }
}

uint64_t TextRendererBase::SetProperty(TextRendererBase *this, CFTypeRef cf1, const __CFBoolean *a3)
{
  int Value;
  uint64_t result;

  if (!CFEqual(cf1, CFSTR("DoDisplay")))
    return 4294965101;
  Value = CFBooleanGetValue(a3);
  result = 0;
  *((_BYTE *)this + 8) = Value != 0;
  return result;
}

uint64_t TextRendererBase::GetCurrentTime(TextRendererBase *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t TextRendererBase::SetCurrentTime(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = a2;
  return this;
}

uint64_t TextRendererBase::GetTimeScale(TextRendererBase *this)
{
  return 0;
}

uint64_t FigCSSSimpleTokenCreate(uint64_t a1, int a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeRef cf;

  cf = 0;
  v4 = FigCSSBaseTokenCreate(a1, a2, 0, (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = cf;
  }
  return v4;
}

uint64_t FigCSSCodePointTokenCreate(const __CFAllocator *a1, int a2, int a3, CFTypeRef *a4)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  uint64_t v11;
  int valuePtr;
  CFTypeRef cf;

  cf = 0;
  valuePtr = a3;
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (v9)
  {
    v10 = v9;
    CFDictionarySetValue(v8, CFSTR("code_point"), v9);
    v11 = FigCSSBaseTokenCreate((uint64_t)a1, a2, (uint64_t)v8, (uint64_t *)&cf);
    if (!(_DWORD)v11)
    {
      *a4 = cf;
      cf = 0;
    }
    CFRelease(v10);
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  CFRelease(v8);
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t FigCSSNumberTokenCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, CFTypeRef *a4, double a5)
{
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (!a2 || a3 >= 2 || !a4)
    return FigSignalErrorAt();
  v6 = figCSSNumericTokenCreate_internal(a1, 22, a2, a3, 0, &cf, a5);
  if ((_DWORD)v6)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a4 = cf;
  }
  return v6;
}

uint64_t figCSSNumericTokenCreate_internal(CFAllocatorRef allocator, int a2, uint64_t a3, unsigned int a4, const void *a5, CFTypeRef *a6, double a7)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  const __CFString *v16;
  const __CFString *v17;
  uint64_t v18;
  const __CFString *v19;
  CFTypeRef cf;
  double valuePtr;

  valuePtr = a7;
  cf = 0;
  if (!a3 || a4 >= 2 || !a6 || a2 == 23 && !a5)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v13 = Mutable;
  v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  if (v14)
  {
    v15 = v14;
    v16 = CFSTR("integer");
    if (a4)
      v16 = 0;
    if (a4 == 1)
      v17 = CFSTR("number");
    else
      v17 = v16;
    if (v17)
    {
      CFDictionarySetValue(v13, CFSTR("number_value"), v14);
      CFDictionarySetValue(v13, CFSTR("number_type"), v17);
      if (a2 == 23)
        CFDictionarySetValue(v13, CFSTR("dimension_units"), a5);
      v18 = FigCSSBaseTokenCreate((uint64_t)allocator, a2, (uint64_t)v13, (uint64_t *)&cf);
      if (!(_DWORD)v18)
      {
        *a6 = cf;
        cf = 0;
      }
      CFRelease(v15);
      v19 = v17;
    }
    else
    {
      v18 = FigSignalErrorAt();
      v19 = (const __CFString *)v15;
    }
    CFRelease(v19);
  }
  else
  {
    v18 = FigSignalErrorAt();
  }
  CFRelease(v13);
  if (cf)
    CFRelease(cf);
  return v18;
}

uint64_t FigCSSDimensionTokenCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, const void *a4, CFTypeRef *a5, double a6)
{
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  v7 = figCSSNumericTokenCreate_internal(a1, 23, a2, a3, a4, &cf, a6);
  if ((_DWORD)v7)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a5 = cf;
  }
  return v7;
}

uint64_t FigCSSPercentageTokenCreate(const __CFAllocator *a1, uint64_t a2, unsigned int a3, CFTypeRef *a4, double a5)
{
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v6 = figCSSNumericTokenCreate_internal(a1, 24, a2, a3, 0, &cf, a5);
  if ((_DWORD)v6)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a4 = cf;
  }
  return v6;
}

uint64_t FigCSSStringValueTokenCreate(const __CFAllocator *a1, int a2, const void *a3, CFTypeRef *a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("value"), a3);
  v10 = FigCSSBaseTokenCreate((uint64_t)a1, a2, (uint64_t)v9, (uint64_t *)&cf);
  if (!(_DWORD)v10)
  {
    *a4 = cf;
    cf = 0;
  }
  CFRelease(v9);
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t FigCSSHashTokenCreate(const __CFAllocator *a1, unsigned int a2, const void *a3, CFTypeRef *a4)
{
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t v12;
  CFTypeRef cf;

  cf = 0;
  if (a2 >= 2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  v10 = CFSTR("unrestricted");
  if (a2)
    v10 = 0;
  if (a2 == 1)
    v11 = CFSTR("id");
  else
    v11 = v10;
  if (v11)
  {
    CFDictionarySetValue(Mutable, CFSTR("hash_type"), v11);
    CFDictionarySetValue(v9, CFSTR("value"), a3);
    v12 = FigCSSBaseTokenCreate((uint64_t)a1, 11, (uint64_t)v9, (uint64_t *)&cf);
    if (!(_DWORD)v12)
    {
      *a4 = cf;
      cf = 0;
    }
    CFRelease(v11);
  }
  else
  {
    v12 = FigSignalErrorAt();
  }
  CFRelease(v9);
  if (cf)
    CFRelease(cf);
  return v12;
}

uint64_t FigCSSEOFTokenCreate(uint64_t a1, CFTypeRef *a2)
{
  return FigCSSSimpleTokenCreate(a1, 1, a2);
}

uint64_t FigCSSTokenCreateSerializationString(const __CFAllocator *a1, CFTypeRef cf, CFStringRef *a3)
{
  CFTypeID v6;
  uint64_t TokenType;
  const __CFNumber *v8;
  CFStringRef v9;
  const __CFNumber *v10;
  const void *v11;
  char v12;
  uint64_t v13;
  const char *v14;
  const __CFNumber *v15;
  const void *v16;
  uint64_t v17;
  const void *Value;
  const __CFNumber *v20;
  double valuePtr;
  UniChar chars;
  CFDictionaryRef theDict;
  int v24;

  v24 = 0;
  theDict = 0;
  if (!cf)
    return FigSignalErrorAt();
  v6 = CFGetTypeID(cf);
  if (v6 == FigCSSTokenGetTypeID() && a3)
  {
    TokenType = FigCSSTokenGetTokenType((uint64_t)cf, &v24);
    if (!(_DWORD)TokenType)
    {
      TokenType = FigCSSTokenCopyAttributes((uint64_t)cf, &theDict);
      if (!(_DWORD)TokenType)
      {
        switch(v24)
        {
          case 0:
            v14 = "INVALID";
            goto LABEL_46;
          case 1:
            v14 = "EOF";
            goto LABEL_46;
          case 2:
            v14 = " ";
            goto LABEL_46;
          case 3:
            Value = CFDictionaryGetValue(theDict, CFSTR("value"));
            v9 = CFStringCreateWithFormat(a1, 0, CFSTR("\"%@\""), Value);
            goto LABEL_58;
          case 4:
            v14 = "TODO{<bad-string-token>}";
            goto LABEL_46;
          case 5:
            LODWORD(valuePtr) = 0;
            v15 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("code_point"));
            CFNumberGetValue(v15, kCFNumberSInt32Type, &valuePtr);
            chars = LOWORD(valuePtr);
            v9 = CFStringCreateWithCharacters(a1, &chars, 1);
            goto LABEL_58;
          case 6:
            v14 = "TODO{<unicode-range-token>}";
            goto LABEL_46;
          case 7:
          case 8:
          case 11:
          case 32:
            v8 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("value"));
            switch(v24)
            {
              case 8:
                v9 = CFStringCreateWithFormat(a1, 0, CFSTR("@%@"), v8);
                goto LABEL_58;
              case 32:
                v9 = CFStringCreateWithFormat(a1, 0, CFSTR("%@("), v8);
                goto LABEL_58;
              case 11:
                v9 = CFStringCreateWithFormat(a1, 0, CFSTR("#%@"), v8);
                goto LABEL_58;
            }
            v20 = v8;
            goto LABEL_54;
          case 9:
            v14 = "TODO{<url-token>}";
            goto LABEL_46;
          case 10:
            v14 = "TODO{<bad-url-token>}";
            goto LABEL_46;
          case 12:
            v14 = ",";
            goto LABEL_46;
          case 13:
            v14 = ":";
            goto LABEL_46;
          case 14:
            v14 = ";";
            goto LABEL_46;
          case 15:
            v14 = "||";
            goto LABEL_46;
          case 16:
            v14 = "(";
            goto LABEL_46;
          case 17:
            v14 = ")";
            goto LABEL_46;
          case 18:
            v14 = "{";
            goto LABEL_46;
          case 19:
            v14 = "}";
            goto LABEL_46;
          case 20:
            v14 = "[";
            goto LABEL_46;
          case 21:
            v14 = "]";
            goto LABEL_46;
          case 22:
          case 23:
          case 24:
            v10 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("number_value"));
            v11 = CFDictionaryGetValue(theDict, CFSTR("number_type"));
            if (v11 && CFEqual(v11, CFSTR("integer")))
            {
              valuePtr = -1.0;
              CFNumberGetValue(v10, kCFNumberDoubleType, &valuePtr);
              v12 = 0;
              v13 = (uint64_t)valuePtr;
            }
            else
            {
              v13 = 0;
              v12 = 1;
            }
            if (v24 == 23)
            {
              v16 = CFDictionaryGetValue(theDict, CFSTR("dimension_units"));
              if ((v12 & 1) != 0)
                v9 = CFStringCreateWithFormat(a1, 0, CFSTR("%@%@"), v10, v16);
              else
                v9 = CFStringCreateWithFormat(a1, 0, CFSTR("%lld%@"), v13, v16);
            }
            else if (v24 == 24)
            {
              if ((v12 & 1) != 0)
                v9 = CFStringCreateWithFormat(a1, 0, CFSTR("%@%%"), v10);
              else
                v9 = CFStringCreateWithFormat(a1, 0, CFSTR("%lld%%"), v13);
            }
            else if ((v12 & 1) != 0)
            {
              v20 = v10;
LABEL_54:
              v9 = CFStringCreateWithFormat(a1, 0, CFSTR("%@"), v20);
            }
            else
            {
              v9 = CFStringCreateWithFormat(a1, 0, CFSTR("%lld"), v13);
            }
LABEL_58:
            v17 = 0;
            *a3 = v9;
            break;
          case 25:
            v14 = "-->";
            goto LABEL_46;
          case 26:
            v14 = "<!--";
            goto LABEL_46;
          case 27:
            v14 = "^=";
            goto LABEL_46;
          case 28:
            v14 = "$=";
            goto LABEL_46;
          case 29:
            v14 = "*=";
            goto LABEL_46;
          case 30:
            v14 = "~=";
            goto LABEL_46;
          case 31:
            v14 = "|=";
            goto LABEL_46;
          default:
            v14 = "{UNKNOWN}";
LABEL_46:
            v9 = CFStringCreateWithCString(a1, v14, 0x8000100u);
            goto LABEL_58;
        }
        goto LABEL_59;
      }
    }
  }
  else
  {
    TokenType = FigSignalErrorAt();
  }
  v17 = TokenType;
LABEL_59:
  if (theDict)
    CFRelease(theDict);
  return v17;
}

uint64_t SecureKeyValutStubDefault()
{
  FigSignalErrorAt();
  return 0;
}

uint64_t FigRecalcSumIndex(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)(result + 8))
      off_1EE2871A0[0] = *(uint64_t (**)())(result + 8);
  }
  return result;
}

uint64_t FigCaptionRendererPaintOnCaptionSetCurrentTime(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  void (*v10)(uint64_t, CMTime *);
  const void *value;
  const void *v12;
  __int128 *v13;
  double Seconds;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, __int128 *);
  __int128 v20;
  Float64 v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t *);
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  double FigBaseObject;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, __int128 *);
  const __CFAttributedString *v35;
  uint64_t Length;
  __int128 v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, __int128 *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD *);
  __int128 v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, CMTime *);
  BOOL v60;
  double v61;
  CFIndex v62;
  CFRange v63;
  CFAttributedStringRef v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, CFAttributedStringRef);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  __int128 v75;
  __int128 v76;
  _QWORD v77[2];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  CMTime cf;
  __int128 v82;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 8) = *(_OWORD *)a2;
    *(_QWORD *)(DerivedStorage + 24) = v7;
    if (!*(_QWORD *)(DerivedStorage + 64))
    {
      cf.value = 0;
      FigCaptionRendererCaptionProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable
        && (v9 = *(_QWORD *)(ProtocolVTable + 16)) != 0
        && (v10 = *(void (**)(uint64_t, CMTime *))(v9 + 32)) != 0)
      {
        v10(a1, &cf);
        value = (const void *)cf.value;
        v12 = *(const void **)(DerivedStorage + 64);
        *(_QWORD *)(DerivedStorage + 64) = cf.value;
        if (value)
          CFRetain(value);
      }
      else
      {
        v12 = *(const void **)(DerivedStorage + 64);
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
      if (v12)
        CFRelease(v12);
    }
    v13 = (__int128 *)(DerivedStorage + 8);
    cf = *(CMTime *)(DerivedStorage + 32);
    Seconds = CMTimeGetSeconds(&cf);
    *(_QWORD *)&v78 = FigBytePumpGetFigBaseObject(v15);
    *((_QWORD *)&v78 + 1) = v16;
    FigCaptionRendererIntervalProtocolGetProtocolID();
    v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 16);
      if (v18)
      {
        v19 = *(void (**)(uint64_t, __int128 *))(v18 + 8);
        if (v19)
          v19(a1, &v78);
      }
    }
    v20 = *v13;
    cf.epoch = *(_QWORD *)(DerivedStorage + 24);
    *(_OWORD *)&cf.value = v20;
    v21 = CMTimeGetSeconds(&cf);
    if (v21 == *(double *)&v78)
    {
      *(_BYTE *)(DerivedStorage + 56) = 1;
      if (a3)
      {
        v80 = 0;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v22 = CMBaseObjectGetProtocolVTable();
        if (v22
          && (v23 = *(_QWORD *)(v22 + 16)) != 0
          && (v24 = *(void (**)(uint64_t, uint64_t *))(v23 + 16)) != 0)
        {
          v24(a1, &v80);
          v25 = v80;
        }
        else
        {
          v25 = 0;
        }
        v45 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        v78 = *MEMORY[0x1E0C9D628];
        v79 = v45;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v46 = CMBaseObjectGetProtocolVTable();
        if (v46)
        {
          v47 = *(_QWORD *)(v46 + 16);
          if (v47)
          {
            v48 = *(uint64_t (**)(uint64_t, __int128 *))(v47 + 104);
            if (v48)
              v46 = v48(v25, &v78);
          }
        }
        v77[0] = FigBytePumpGetFigBaseObject(v46);
        v77[1] = v49;
        FigCaptionRendererIntervalProtocolGetProtocolID();
        v50 = CMBaseObjectGetProtocolVTable();
        if (v50)
        {
          v51 = *(_QWORD *)(v50 + 16);
          if (v51)
          {
            v52 = *(void (**)(uint64_t, _QWORD *))(v51 + 8);
            if (v52)
              v52(a1, v77);
          }
        }
        v53 = *v13;
        cf.epoch = *(_QWORD *)(DerivedStorage + 24);
        *(_OWORD *)&cf.value = v53;
        v54 = CMTimeGetSeconds(&cf);
        v55 = *(double *)v77;
        v75 = v78;
        v76 = v79;
        *(_QWORD *)(DerivedStorage + 72) = 0x2100000021;
        v56 = v80;
        FigCaptionRendererNodeProtocolGetProtocolID();
        v57 = CMBaseObjectGetProtocolVTable();
        if (v57)
        {
          v58 = *(_QWORD *)(v57 + 16);
          if (v58)
          {
            v59 = *(void (**)(uint64_t, CMTime *))(v58 + 312);
            if (v59)
            {
              LODWORD(cf.value) = 0;
              HIDWORD(cf.value) = (int)((Seconds - (v54 - v55)) * 1000.0);
              *(_OWORD *)&cf.timescale = v75;
              v82 = v76;
              v59(v56, &cf);
            }
          }
        }
        return 0;
      }
    }
    else
    {
      *(_BYTE *)(DerivedStorage + 56) = 0;
    }
    v26 = *(_DWORD *)(DerivedStorage + 72);
    v27 = __OFSUB__(v26, 33);
    v26 -= 33;
    *(_DWORD *)(DerivedStorage + 72) = v26;
    if (!((v26 < 0) ^ v27 | (v26 == 0)))
      return 0;
    *(_DWORD *)(DerivedStorage + 72) = *(_DWORD *)(DerivedStorage + 76);
    v28 = CMBaseObjectGetDerivedStorage();
    FigBaseObject = FigBytePumpGetFigBaseObject(v28);
    v31 = v30;
    *(double *)&v78 = FigBaseObject;
    *((double *)&v78 + 1) = v30;
    FigCaptionRendererIntervalProtocolGetProtocolID();
    v32 = CMBaseObjectGetProtocolVTable();
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 16);
      if (v33)
      {
        v34 = *(void (**)(uint64_t, __int128 *))(v33 + 8);
        if (v34)
        {
          v34(a1, &v78);
          v31 = *((double *)&v78 + 1);
        }
      }
    }
    if (v31 <= 0.0)
    {
      FigSignalErrorAt();
      return 0;
    }
    v35 = *(const __CFAttributedString **)(v28 + 64);
    Length = CFAttributedStringGetLength(v35);
    v37 = *(_OWORD *)(v28 + 8);
    cf.epoch = *(_QWORD *)(v28 + 24);
    *(_OWORD *)&cf.value = v37;
    v38 = CMTimeGetSeconds(&cf);
    cf = *(CMTime *)(v28 + 32);
    v39 = CMTimeGetSeconds(&cf);
    v40 = v38 - *(double *)&v78;
    if (v39 <= 0.0 || Length <= 0)
    {
      v43 = (double)Length;
    }
    else
    {
      v41 = v40 * 1000.0 / 33.0;
      v42 = v41 + v41;
      if (v41 < 0.0)
        v42 = 0.0;
      v43 = (double)Length;
      v44 = v42 / (double)Length;
      if (v44 <= 1.0)
        goto LABEL_50;
    }
    v44 = 1.0;
LABEL_50:
    v60 = (v39 - v40) * 1000.0 < 66.0;
    v61 = 1.0;
    if (!v60)
      v61 = v44;
    LODWORD(v62) = llround(v43 * v61);
    if ((int)v62 <= 1)
      v62 = 1;
    else
      v62 = v62;
    if (Length >= v62)
      v63.length = v62;
    else
      v63.length = Length;
    v63.location = 0;
    v64 = CFAttributedStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v35, v63);
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v65 = CMBaseObjectGetProtocolVTable();
    if (v65)
    {
      v66 = *(_QWORD *)(v65 + 16);
      if (v66)
      {
        v67 = *(void (**)(uint64_t, CFAttributedStringRef))(v66 + 24);
        if (v67)
          v67(a1, v64);
      }
    }
    if (v64)
      CFRelease(v64);
    FigCaptionRendererNodeProtocolGetProtocolID();
    v68 = CMBaseObjectGetProtocolVTable();
    if (v68)
    {
      v69 = *(_QWORD *)(v68 + 16);
      if (v69)
      {
        v70 = *(void (**)(uint64_t, uint64_t))(v69 + 232);
        if (v70)
          v70(a1, 1);
      }
    }
    FigCaptionRendererNodeProtocolGetProtocolID();
    v71 = CMBaseObjectGetProtocolVTable();
    if (v71)
    {
      v72 = *(_QWORD *)(v71 + 16);
      if (v72)
      {
        v73 = *(void (**)(uint64_t, uint64_t))(v72 + 216);
        if (v73)
          v73(a1, 1);
      }
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererPaintOnCaptionSetAnimationEnabled(uint64_t a1, char a2)
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 56) = a2;
  return 0;
}

uint64_t FigCaptionRendererPaintOnCaptionSetAnimationDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)a2;
  *(_QWORD *)(DerivedStorage + 48) = v4;
  return 0;
}

uint64_t FigCaptionRendererPaintOnCaptionCreate(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *DerivedStorage;
  uint64_t v6;
  uint64_t v7;

  *a1 = 0;
  v7 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererPaintOnCaptionGetClassID_sRegisterFigCaptionRendererPaintOnCaptionBaseTypeOnce, RegisterFigCaptionRendererPaintOnCaptionBaseType);
  v2 = CMDerivedObjectCreate();
  if (!(_DWORD)v2)
  {
    v3 = v7;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v6 = 0;
    FigCaptionRendererCaptionCreate(&v6);
    *DerivedStorage = v6;
    *a1 = v3;
  }
  return v2;
}

void FigCaptionRendererPaintOnCaptionFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 64);
  if (v1)
    CFRelease(v1);
}

__CFString *FigCaptionRendererPaintOnCaptionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererPaintOnCaption: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererPaintOnCaption <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererPaintOnCaption";
  return 0;
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererPaintOnCaption <FigCaptionRendererIntervalProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(uint64_t, double, double);
  CMTime v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeMake(&v10, (uint64_t)a2, 1);
  *(CMTime *)(DerivedStorage + 32) = v10;
  v5 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererIntervalProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v7 = *(_QWORD *)(ProtocolVTable + 16);
    if (v7)
    {
      v8 = *(void (**)(uint64_t, double, double))(v7 + 16);
      if (v8)
        v8(v5, a1, a2);
    }
  }
  return 0;
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererPaintOnCaption <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 288);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererPaintOnCaption <FigCaptionRendererCaptionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetExtendedLanguageTagString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 56);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetExtendedLanguageTagString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetTextHighlightArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetTextHighlightArray(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_SetInvisible(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCaption_FigCaptionRendererCaptionProtocol_GetInvisible(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_GetSuggestLineHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetWritingMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 112);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererPaintOnCaption_FigCaptionRendererCaptionProtocol_SetLayoutSampleWithCTAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCaptionProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t RegisterFigCaptionRendererPaintOnCaptionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererPaintOnCaptionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererPaintOnCaption]"));
}

uint64_t PostProcessPurchasedItem(const __CFDictionary *a1, const __CFString *a2, _QWORD *a3, void (*a4)(uint64_t, float), uint64_t a5)
{
  CFURLRef v10;
  CFURLRef v11;
  uint64_t v12;
  uint64_t v13;

  v10 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, kCFURLPOSIXPathStyle, 0);
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v12 = CMByteStreamCreateForFileURL();
  if ((_DWORD)v12)
    v13 = v12;
  else
    v13 = PostProcessPurchasedItemInternal(a1, a2, a3, 0, a4, a5);
  CFRelease(v11);
  return v13;
}

uint64_t PostProcessPurchasedItemInternal(const __CFDictionary *a1, const __CFString *a2, _QWORD *a3, uint64_t a4, void (*a5)(uint64_t, float), uint64_t a6)
{
  const __CFArray *Value;
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int **v16;
  _QWORD *v17;
  _DWORD *v18;
  CFIndex v19;
  int v20;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v22;
  const __CFNumber *v23;
  int v24;
  const __CFData *v25;
  const __CFData *v26;
  CFIndex v27;
  const __CFData *v28;
  const __CFData *v29;
  const __CFData *v30;
  const __CFData *v31;
  const __CFData *v32;
  uint64_t v33;
  void *v34;
  const __CFBoolean *v35;
  const __CFBoolean *v36;
  CFTypeID v37;
  uint64_t ByteStreamSize;
  unint64_t v39;
  float v40;
  unint64_t v41;
  void (*v42)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *);
  unint64_t v43;
  void (*v44)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *);
  unint64_t v45;
  int v46;
  unsigned int *v47;
  void (*v48)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *);
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *);
  int v51;
  unsigned int v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t, __int128 *, unint64_t *);
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  unsigned int v59;
  unsigned int v60;
  size_t v61;
  uint64_t v62;
  int MovieUInt16;
  unsigned int MovieUInt32;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *);
  unsigned int v76;
  void (*v77)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *);
  unsigned int v78;
  void (*v79)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *);
  int v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  unsigned int v84;
  uint64_t v85;
  size_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  float v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  void (*v95)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  unsigned int v96;
  unsigned int v97;
  void (*v98)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  unsigned int v99;
  int v100;
  unint64_t v101;
  _DWORD *v102;
  _DWORD *v103;
  size_t v104;
  void (*v105)(uint64_t, _QWORD, size_t, _DWORD *, unint64_t *);
  unsigned int *v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *);
  void (*v114)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *);
  unint64_t v115;
  void *v116;
  void (*v117)(uint64_t, size_t, unint64_t, void *, _QWORD);
  void (*v118)(uint64_t, size_t, unint64_t, void *, _QWORD);
  uint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v123;
  int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v128;
  unsigned int v129;
  int64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  unsigned int v133;
  unsigned int v134;
  unsigned int *v135;
  unsigned int v136;
  size_t v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int v140;
  void (*v141)(uint64_t, _QWORD, uint64_t, unsigned int *, unint64_t *);
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t *v150;
  unsigned int v151;
  uint64_t *v152;
  size_t v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int *v156;
  size_t v157;
  uint64_t *v158;
  uint64_t v159;
  size_t v160;
  size_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, size_t, uint64_t, unsigned int *, unint64_t *);
  size_t v164;
  void (*v165)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *);
  void (*v166)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *);
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  void (*v171)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *);
  int v172;
  unint64_t v173;
  void (*v175)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *);
  int v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *);
  unsigned int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t, uint64_t, __int128 *, unint64_t *);
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  size_t v187;
  uint64_t v188;
  unsigned int v189;
  int ImageDescriptionExtensionOffset;
  void (*v191)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *);
  size_t v192;
  void (*v193)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *);
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int **v197;
  unsigned int **v198;
  int *v199;
  uint64_t v200;
  int v201;
  int v202;
  int v204;
  uint64_t v205;
  void (*v206)(uint64_t, float);
  unsigned int v207;
  uint64_t v208;
  size_t v209;
  int v210;
  void (*v211)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *);
  unint64_t v212;
  void (*v213)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *);
  signed int v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *);
  void (*v217)(uint64_t, uint64_t, unint64_t, unint64_t *, _QWORD);
  int v219;
  void (*v220)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, _QWORD, uint64_t, unsigned int *, unint64_t *);
  unsigned int v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  void (*v228)(uint64_t, uint64_t, uint64_t, unsigned int *, unint64_t *);
  void (*v229)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  void (*v230)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  void (*v231)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  void (*v232)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *);
  uint64_t v233;
  unint64_t Length;
  unint64_t v235;
  int v237;
  unsigned int v238;
  unsigned int *v239;
  unsigned int v240;
  int v241;
  uint64_t v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  int v251;
  size_t v252;
  uint64_t v253;
  uint64_t v254;
  const __CFString *theString;
  CFStringRef theStringa;
  unint64_t v257;
  _QWORD *v258;
  size_t v259;
  int v260;
  int v261;
  unint64_t v262;
  uint64_t v263;
  unsigned int v264;
  unsigned int *v265;
  size_t __len;
  size_t __lena;
  unsigned int __lenb;
  unsigned int __src;
  uint64_t *__srca;
  unsigned int __srcb;
  void (*v273)(uint64_t, float);
  int v274;
  uint64_t v275;
  unsigned int v276;
  unint64_t v277;
  _DWORD *v279;
  _QWORD *v280;
  unsigned int **v281;
  const __CFArray *v282;
  uint64_t v283;
  int v284;
  void *v285;
  void *v286;
  int v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int v291;
  unsigned __int8 v292;
  __int128 valuePtr;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  int v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  unsigned int size;
  size_t size_4;
  unsigned int v307;
  size_t v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  size_t v312;
  unsigned int v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  unsigned int __pattern4;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void (*v322)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *);
  unint64_t v323;
  _DWORD *v324;
  void *v325;
  size_t v326;
  uint64_t v327;
  CFRange v328;

  v327 = *MEMORY[0x1E0C80C00];
  if (a3)
    *a3 = 0;
  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("sinfs"));
  v10 = Value;
  v273 = a5;
  if (!Value)
  {
    LODWORD(v12) = 0;
    v279 = 0;
    v280 = 0;
    v16 = 0;
    v34 = 0;
    v15 = 0;
    goto LABEL_290;
  }
  Count = CFArrayGetCount(Value);
  v12 = Count;
  if (!(_DWORD)Count)
    return 0;
  v13 = Count;
  v14 = malloc_type_calloc(Count, 4uLL, 0x100004052888210uLL);
  if (!v14)
    return 4294967188;
  v15 = v14;
  v286 = malloc_type_calloc(v12, 8uLL, 0x10040436913F5uLL);
  if (!v286)
  {
    v279 = 0;
    v280 = 0;
    v16 = 0;
    v10 = 0;
    v34 = 0;
    ByteStreamSize = 4294967188;
    goto LABEL_462;
  }
  v282 = (const __CFArray *)malloc_type_calloc(v12, 4uLL, 0x100004052888210uLL);
  if (!v282)
  {
    v279 = 0;
    v280 = 0;
    v16 = 0;
    v10 = 0;
    ByteStreamSize = 4294967188;
    v34 = v286;
    goto LABEL_462;
  }
  v16 = (unsigned int **)malloc_type_calloc(v12, 8uLL, 0x10040436913F5uLL);
  if (!v16 || (v17 = malloc_type_calloc(1uLL, 8 * v13, 0x10040436913F5uLL)) == 0)
  {
    v279 = 0;
    v280 = 0;
LABEL_485:
    ByteStreamSize = 4294967188;
    v34 = v286;
    v10 = v282;
    goto LABEL_462;
  }
  v280 = v17;
  v18 = malloc_type_calloc(1uLL, 4 * v13, 0x100004052888210uLL);
  if (!v18)
  {
    v279 = 0;
    goto LABEL_485;
  }
  theString = a2;
  v258 = a3;
  v279 = v18;
  v281 = v16;
  v19 = 0;
  v20 = 0;
  v283 = v12;
  v285 = v15;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, v19);
    if (!ValueAtIndex)
    {
      ByteStreamSize = 4294966618;
      goto LABEL_477;
    }
    v22 = ValueAtIndex;
    if ((_DWORD)v12 == 1
      || (LODWORD(valuePtr) = 0, (v23 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("id"))) == 0))
    {
      v24 = 0;
    }
    else
    {
      CFNumberGetValue(v23, kCFNumberSInt32Type, &valuePtr);
      v24 = valuePtr;
    }
    v25 = (const __CFData *)CFDictionaryGetValue(v22, CFSTR("sinf"));
    v26 = v25;
    if (v25)
    {
      *((_QWORD *)v286 + v19) = CFDataGetBytePtr(v25);
      *((_DWORD *)v282 + v19) = CFDataGetLength(v26);
    }
    v27 = v12;
    v28 = (const __CFData *)CFDictionaryGetValue(v22, CFSTR("sinf2"));
    if (v28)
      v16[v19] = (unsigned int *)CFDataGetBytePtr(v28);
    v29 = (const __CFData *)CFDictionaryGetValue(v22, CFSTR("pinf"));
    v30 = v29;
    if (v29 && !*((_QWORD *)v286 + v19))
    {
      *((_QWORD *)v286 + v19) = CFDataGetBytePtr(v29);
      *((_DWORD *)v282 + v19) = CFDataGetLength(v30);
    }
    v31 = (const __CFData *)CFDictionaryGetValue(v22, CFSTR("dpInfo"));
    if (v31)
    {
      v32 = v31;
      v280[v19] = CFDataGetBytePtr(v31);
      v279[v19] = CFDataGetLength(v32);
      v20 = 1;
    }
    v15 = v285;
    *((_DWORD *)v285 + v19) = v24;
    if (!((unint64_t)v26 | (unint64_t)v30))
    {
      ByteStreamSize = FigSignalErrorAt();
      v34 = v286;
      v10 = v282;
      goto LABEL_462;
    }
    ++v19;
    v33 = v283;
    v12 = v27;
  }
  while (v283 != v19);
  v34 = v286;
  v10 = v282;
  if (!v20)
  {
LABEL_290:
    v168 = a4;
    v319 = -1;
    v320 = -1;
    LODWORD(v290) = 0;
    LODWORD(v288) = 0;
    v318 = -1;
    __pattern4 = 0;
    v316 = -1;
    v315 = 0;
    v314 = -1;
    v313 = 0;
    v312 = -1;
    ByteStreamSize = 4294967246;
    v311 = 0;
    if (!a4)
      goto LABEL_461;
    if (!v34)
      goto LABEL_461;
    v321 = 0;
    ByteStreamSize = GetByteStreamSize(a4, &v321);
    if ((_DWORD)ByteStreamSize)
      goto LABEL_461;
    v281 = v16;
    v169 = v321;
    if (v321 < 1)
    {
      ByteStreamSize = 4294967246;
      goto LABEL_460;
    }
    v282 = v10;
    v285 = v15;
    v286 = v34;
    v170 = 0;
    __lenb = 0;
LABEL_295:
    if ((uint64_t)v169 <= 0
      || (LODWORD(v323) = 0,
          (v171 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0))
    {
LABEL_457:
      ByteStreamSize = FigSignalErrorAt();
LABEL_458:
      v34 = v286;
      goto LABEL_459;
    }
    *(_QWORD *)&valuePtr = 0;
    v171(v168, 4, v170, &v323, &valuePtr);
    v172 = v323;
    v173 = bswap32(v323);
    if ((_DWORD)v323 == 0x1000000)
    {
      if (v169 < 0x10)
        goto LABEL_457;
    }
    else if (v169 < v173 || v173 < 8)
    {
      goto LABEL_457;
    }
    LODWORD(v323) = 0;
    v175 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v175)
    {
      *(_QWORD *)&valuePtr = 0;
      v175(v168, 4, v170 + 4, &v323, &valuePtr);
      v176 = v323;
    }
    else
    {
      v176 = 0;
    }
    v177 = v170 + 8;
    if (v172 == 0x1000000)
    {
      v323 = 0;
      v178 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v178)
      {
        *(_QWORD *)&valuePtr = 0;
        v178(a4, 8, v170 + 8, &v323, &valuePtr);
        v178 = (void (*)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))v323;
      }
      v173 = bswap64((unint64_t)v178);
      if (v173 > v169 || v173 < 0x10)
        goto LABEL_457;
      v172 = 0x1000000;
      v177 = v170 + 16;
    }
    v284 = v172;
    if (v176 != 1987014509)
    {
      v180 = 0;
      v168 = a4;
      goto LABEL_446;
    }
    v310 = -1;
    v309 = 0;
    v308 = -1;
    v307 = 0;
    size_4 = -1;
    size = 0;
    v304 = -1;
    v303 = 0;
    v302 = -1;
    v301 = 0;
    v300 = -1;
    v299 = 0;
    v298 = 0;
    v296 = 0u;
    v297 = 0u;
    v294 = 0u;
    v295 = 0u;
    valuePtr = 0u;
    v179 = v173 - 8;
    v168 = a4;
    v180 = 0;
    if ((_DWORD)v173 == 8)
      goto LABEL_445;
    v181 = v177;
LABEL_317:
    if (!FindAtomOffsetOfType(v168, 1953653099, v181, v179, &v310, &v309))
      goto LABEL_445;
    if (!FindAtomOffsetOfType(v168, 1953196132, v310, v309, &v300, &v299)
      || !FindAtomOffsetOfType(v168, 1835297121, v310, v309, &v308, &v307)
      || !FindAtomOffsetOfType(v168, 1835626086, v308, v307, &size_4, &size)
      || !FindAtomOffsetOfType(v168, 1937007212, size_4, size, &v302, &v301))
    {
      goto LABEL_366;
    }
    v182 = v168;
    v183 = v300;
    v184 = *(void (**)(uint64_t, uint64_t, uint64_t, __int128 *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
    if (v184)
    {
      v323 = 0;
      v184(v182, 84, v183, &valuePtr, &v323);
    }
    HIDWORD(valuePtr) = bswap32(HIDWORD(valuePtr));
    v168 = v182;
    if (!FindAtomOffsetOfType(v182, 1751411826, v308, v307, &v304, &v303) || v303 < 0xC)
      goto LABEL_366;
    FindAtomOffsetOfType(v182, 1937011555, v302, v301, &v320, &v290);
    FindAtomOffsetOfType(v182, 1937011578, v302, v301, &v316, &v315);
    if (v316 == -1)
      FindAtomOffsetOfType(v182, 1937013298, v302, v301, &v316, &v315);
    FindAtomOffsetOfType(v182, 1937007471, v302, v301, &v319, &v288);
    FindAtomOffsetOfType(v182, 1668232756, v302, v301, &v318, &__pattern4);
    if (!FindAtomOffsetOfType(v182, 1937011556, v302, v301, &v312, &v311))
    {
LABEL_366:
      v319 = -1;
      v320 = -1;
      v318 = -1;
      v316 = -1;
      v314 = -1;
      v300 = -1;
      goto LABEL_367;
    }
    v185 = v304;
    LODWORD(v322) = 0;
    v186 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 8);
    if (v186)
    {
      v323 = 0;
      v186(v182, 4, v185 + 8, &v322, &v323);
      LODWORD(v186) = (_DWORD)v322;
    }
    v187 = v312;
    v188 = v312 + 8;
    v312 += 8;
    v189 = bswap32(v186);
    v311 -= 8;
    if (v189 != 1936684398)
    {
      if (v189 == 1986618469)
      {
        v168 = a4;
        if (!FindImageDescriptionExtensionOffset(a4, v188, 1936289382, &v314, &v313))
        {
          ImageDescriptionExtensionOffset = FindImageDescriptionExtensionOffset(a4, v312, 1885957734, &v314, &v313);
          if (!ImageDescriptionExtensionOffset)
            goto LABEL_366;
          goto LABEL_353;
        }
      }
      else
      {
        v168 = a4;
        if (!FindSampleDescriptionExtensionOffset(a4, v188, 1936289382, &v314, &v313))
        {
          ImageDescriptionExtensionOffset = FindSampleDescriptionExtensionOffset(a4, v312, 1885957734, &v314, &v313);
          if (!ImageDescriptionExtensionOffset)
            goto LABEL_366;
          goto LABEL_353;
        }
      }
      ImageDescriptionExtensionOffset = 0;
LABEL_353:
      if (v320 == -1)
        goto LABEL_367;
      v260 = ImageDescriptionExtensionOffset;
      if ((v319 & v318) == 0xFFFFFFFFFFFFFFFFLL)
        goto LABEL_367;
      if (v316 == -1)
        goto LABEL_367;
      v253 = v314;
      if (v314 == -1)
        goto LABEL_367;
      __srcb = v189;
      v196 = __lenb;
      if (!(_DWORD)v12)
        goto LABEL_375;
      v197 = (unsigned int **)v286;
      v198 = v281;
      if (v285)
      {
        v199 = (int *)v285;
        v197 = (unsigned int **)v286;
        v200 = v12;
        v198 = v281;
        while (1)
        {
          v202 = *v199++;
          v201 = v202;
          if (HIDWORD(valuePtr) == v202 || v201 == 0)
            break;
          ++v198;
          ++v197;
          if (!--v200)
            goto LABEL_374;
        }
      }
      if (!*v197)
      {
LABEL_374:
        v205 = FigSignalErrorAt();
        if (!(_DWORD)v205)
        {
LABEL_375:
          ByteStreamSize = FigSignalErrorAt();
          goto LABEL_376;
        }
        ByteStreamSize = v205;
LABEL_477:
        v15 = v285;
        v34 = v286;
LABEL_459:
        v10 = v282;
LABEL_460:
        v16 = v281;
        goto LABEL_461;
      }
      v250 = bswap32(**v197);
      if (v250 <= 7)
        goto LABEL_375;
      v244 = *v197;
      if (*v198)
      {
        v248 = bswap32(**v198);
        if (v248 <= 0x17)
          goto LABEL_375;
      }
      else
      {
        v248 = 0;
      }
      ByteStreamSize = 0;
      v246 = v314 - 8;
      v262 = v313 + 8;
      v265 = *v198;
      v212 = v314 + v313;
      theStringa = (CFStringRef)(v312 + v311);
      v277 = v169;
      while (1)
      {
        if (v212 > (unint64_t)&theStringa[-1].length)
          goto LABEL_413;
        LODWORD(v322) = 0;
        v213 = *(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v213)
        {
          v323 = 0;
          v213(a4, 4, v212, &v322, &v323);
          LODWORD(v213) = (_DWORD)v322;
        }
        v214 = bswap32(v213);
        if ((uint64_t)((uint64_t)theStringa - v212) < v214)
          break;
        v215 = v214;
        if (v214 <= 7)
        {
          ByteStreamSize = FigSignalErrorAt();
          v169 = v277;
          v168 = a4;
          goto LABEL_442;
        }
        LODWORD(v322) = 0;
        v168 = a4;
        v216 = *(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v216)
        {
          v196 = __lenb;
          v169 = v277;
          goto LABEL_416;
        }
        v323 = 0;
        v216(a4, 4, v212 + 4, &v322, &v323);
        if (v265 && (_DWORD)v322 == 1145656661)
        {
          if (v215 <= 0x17)
          {
            ByteStreamSize = FigSignalErrorAt();
            v219 = 4;
            goto LABEL_406;
          }
          v217 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v217)
          {
            v322 = 0;
            v217(a4, 16, v212 + 8, &v323, &v322);
          }
          if (v323 != *((_QWORD *)v265 + 1) || v324 != *((_DWORD **)v265 + 2))
          {
            v219 = 10;
LABEL_406:
            v169 = v277;
            if (v219 != 10)
            {
              v206 = v273;
              v168 = a4;
              v196 = __lenb;
              if (!(_DWORD)ByteStreamSize)
                goto LABEL_377;
              goto LABEL_477;
            }
LABEL_413:
            v168 = a4;
LABEL_414:
            v196 = __lenb;
LABEL_416:
            if (v248 + v250 > v262)
              goto LABEL_375;
            LODWORD(v322) = bswap32(v262);
            v220 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
            if (v220)
            {
              v323 = 0;
              v220(v168, 4, v246, &v322, &v323);
            }
            v221 = v168;
            v222 = v253 - 4;
            v223 = *(void (**)(uint64_t, _QWORD, uint64_t, unsigned int *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (v223)
            {
              v323 = 0;
              v223(v221, (v250 - 4), v222, v244 + 1, &v323);
            }
            v224 = v262 - v250;
            v225 = v262 - v250 - v248;
            v226 = v250 - 4 + v222;
            if (v265)
            {
              v263 = v226;
              v227 = v225;
              v228 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v228)
              {
                v323 = 0;
                v228(a4, v248, v263, v265, &v323);
              }
              if (v227 >= 8)
              {
                LODWORD(v225) = v227;
                v226 = v248 + v263;
                v196 = __lenb;
                goto LABEL_428;
              }
              LODWORD(v322) = bswap32(v224);
              v231 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
              if (v231)
              {
                v323 = 0;
                v231(a4, 4, v263, &v322, &v323);
              }
              v196 = __lenb;
            }
            else
            {
              v196 = __lenb;
              if (v225 > 7)
              {
LABEL_428:
                LODWORD(v322) = bswap32(v225);
                v229 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (v229)
                {
                  v323 = 0;
                  v229(a4, 4, v226, &v322, &v323);
                }
                LODWORD(v322) = 1701147238;
                v230 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                if (v230)
                {
                  v323 = 0;
                  v230(a4, 4, v226 + 4, &v322, &v323);
                }
              }
              else
              {
                LODWORD(v250) = v262 - v248;
              }
            }
            LODWORD(v322) = bswap32(v250);
            v168 = a4;
            v232 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
            if (v232)
            {
              v323 = 0;
              v232(a4, 4, v246, &v322, &v323);
            }
LABEL_376:
            v206 = v273;
            if ((_DWORD)ByteStreamSize)
              goto LABEL_477;
LABEL_377:
            v207 = v196 + 1;
            if (v206)
              v206(a6, (float)v207 / (float)v12);
            __lenb = v207;
            if (v260)
            {
LABEL_380:
              v180 = 1;
            }
            else
            {
              if (__srcb == 1986618469)
              {
                v208 = v168;
                v209 = v312;
                v210 = 1768780388;
              }
              else
              {
                if (__srcb != 1936684398)
                  goto LABEL_380;
                v208 = v168;
                v209 = v312;
                v210 = 1936552548;
              }
              LODWORD(v322) = v210;
              v211 = *(void (**)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 16);
              if (v211)
              {
                v323 = 0;
                v211(v208, 4, v209 + 4, &v322, &v323);
              }
              v180 = 1;
              v168 = v208;
            }
LABEL_367:
            v204 = v181 - v310;
            v181 = v310 + v309;
            v179 = v179 - v309 + v204;
            if (!v179)
            {
LABEL_445:
              v15 = v285;
LABEL_446:
              v233 = -16;
              if (v284 != 0x1000000)
                v233 = -8;
              v170 = v173 + v177 + v233;
              v169 -= v173;
              if (v180)
              {
                ByteStreamSize = 0;
                goto LABEL_458;
              }
              goto LABEL_295;
            }
            goto LABEL_317;
          }
          v169 = v277;
        }
        else
        {
          v169 = v277;
          if ((_DWORD)v322 != 1701147238)
          {
            v168 = a4;
            goto LABEL_414;
          }
        }
        v262 += v215;
        v212 += v215;
      }
      ByteStreamSize = FigSignalErrorAt();
      v168 = a4;
LABEL_442:
      v196 = __lenb;
      goto LABEL_376;
    }
    LOWORD(v322) = 0;
    v191 = *(void (**)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
    if (v191)
    {
      v323 = 0;
      v191(a4, 2, v187 + 24, &v322, &v323);
      if ((int)bswap32((unsigned __int16)v322) >> 16 > 1)
      {
        v192 = v312;
        LODWORD(v322) = 0;
        v193 = *(void (**)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 8);
        if (v193)
        {
          v323 = 0;
          v193(a4, 4, v192 + 36, &v322, &v323);
          LODWORD(v193) = (_DWORD)v322;
        }
        v194 = bswap32(v193);
LABEL_350:
        v195 = v311 - v194;
        if (FindAtomOffsetOfType(a4, 1936289382, v312 + v194, v311 - v194, &v314, &v313))
        {
          ImageDescriptionExtensionOffset = 0;
          v168 = a4;
          v189 = 1936684398;
        }
        else
        {
          ImageDescriptionExtensionOffset = FindAtomOffsetOfType(a4, 1885957734, v312 + v194, v195, &v314, &v313);
          v168 = a4;
          v189 = 1936684398;
          if (!ImageDescriptionExtensionOffset)
            goto LABEL_366;
        }
        goto LABEL_353;
      }
      if ((unsigned __int16)v322 == 256)
      {
        if (IsSoundDescriptionISOv1(a4, v312, v311))
          v194 = 36;
        else
          v194 = 52;
        goto LABEL_350;
      }
    }
    v194 = 36;
    goto LABEL_350;
  }
  v318 = -1;
  v315 = 0;
  v316 = -1;
  v313 = 0;
  v314 = -1;
  v311 = 0;
  v312 = -1;
  v309 = 0;
  v310 = -1;
  v307 = 0;
  v308 = -1;
  size = 0;
  v35 = (const __CFBoolean *)CFPreferencesCopyAppValue(CFSTR("UseChunkedDecrypt"), CFSTR("com.apple.coremedia"));
  if (v35)
  {
    v36 = v35;
    v37 = CFGetTypeID(v35);
    if (v37 == CFBooleanGetTypeID())
      CFBooleanGetValue(v36);
    CFRelease(v36);
  }
  if (!a4)
    goto LABEL_450;
  v319 = 0;
  ByteStreamSize = GetByteStreamSize(a4, &v319);
  if ((_DWORD)ByteStreamSize)
    goto LABEL_461;
  if (v319 < 1)
  {
LABEL_450:
    ByteStreamSize = FigSignalErrorAt();
    goto LABEL_451;
  }
  v240 = 0;
  v39 = 0;
  v274 = 0;
  v40 = (float)v27;
  v41 = v319;
  while (1)
  {
    if (!v41)
    {
LABEL_287:
      v34 = v286;
      v10 = v282;
      if (v274)
        goto LABEL_452;
      ByteStreamSize = 4294954764;
LABEL_462:
      free(v15);
      goto LABEL_463;
    }
    if ((uint64_t)v41 <= 0
      || (LODWORD(v323) = 0,
          (v42 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8)) == 0))
    {
LABEL_475:
      ByteStreamSize = FigSignalErrorAt();
      v34 = v286;
      v10 = v282;
      goto LABEL_451;
    }
    *(_QWORD *)&valuePtr = 0;
    v42(a4, 4, v39, &v323, &valuePtr);
    v43 = bswap32(v323);
    v261 = v323;
    if ((_DWORD)v323 == 0x1000000)
    {
      if (v41 <= 0xF)
        goto LABEL_475;
    }
    else if (v41 < v43 || v43 <= 7)
    {
      goto LABEL_475;
    }
    LODWORD(v323) = 0;
    v44 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v44)
    {
      *(_QWORD *)&valuePtr = 0;
      v45 = v39 + 4;
      v44(a4, 4, v39 + 4, &v323, &valuePtr);
      v46 = v323;
    }
    else
    {
      v45 = v39 + 4;
      v46 = 0;
    }
    v47 = (unsigned int *)(v39 + 8);
    if (v261 == 0x1000000)
    {
      v323 = 0;
      v48 = *(void (**)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v48)
      {
        *(_QWORD *)&valuePtr = 0;
        v48(a4, 8, v39 + 8, &v323, &valuePtr);
        v48 = (void (*)(uint64_t, uint64_t, unint64_t, unint64_t *, __int128 *))v323;
      }
      v43 = bswap64((unint64_t)v48);
      if (v43 > v41 || v43 <= 0xF)
      {
        v145 = FigSignalErrorAt();
LABEL_488:
        ByteStreamSize = v145;
LABEL_489:
        v34 = v286;
        goto LABEL_490;
      }
      v47 = (unsigned int *)(v39 + 16);
    }
    if (v46 == 1987014509)
      break;
    v51 = 0;
    v16 = v281;
LABEL_284:
    v167 = -8;
    if (v261 == 0x1000000)
      v167 = -16;
    v39 = (unint64_t)v47 + v43 + v167;
    v41 -= v43;
    if (v51)
      goto LABEL_287;
  }
  v249 = v41;
  v257 = v43;
  size_4 = -1;
  v303 = 0;
  v304 = -1;
  v301 = 0;
  v302 = -1;
  v299 = 0;
  v300 = -1;
  v291 = 0;
  v290 = -1;
  v289 = 0;
  v288 = -1;
  v287 = 0;
  v298 = 0;
  v296 = 0u;
  v297 = 0u;
  v294 = 0u;
  v295 = 0u;
  valuePtr = 0u;
  LODWORD(v322) = 1987014504;
  v49 = a4;
  v50 = *(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 16);
  if (v50)
  {
    v323 = 0;
    v50(a4, 4, v45, &v322, &v323);
  }
  v247 = v45;
  valuePtr = 0u;
  v294 = 0u;
  v295 = 0u;
  v296 = 0u;
  v297 = 0u;
  v298 = 0;
  v51 = 0;
  v52 = v257 - 8;
  if ((_DWORD)v257 == 8)
  {
LABEL_281:
    LODWORD(v322) = 1987014509;
    v166 = *(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 16);
    if (v166)
    {
      v323 = 0;
      v166(v49, 4, v247, &v322, &v323);
    }
    v274 = 1;
    v43 = v257;
    v16 = v281;
    v41 = v249;
    goto LABEL_284;
  }
  v53 = v47;
  while (1)
  {
    if (!FindAtomOffsetOfType(v49, 1953653099, (uint64_t)v53, v52, &size_4, &v303))
      goto LABEL_281;
    if (!FindAtomOffsetOfType(v49, 1953196132, size_4, v303, &v288, &v287)
      || !FindAtomOffsetOfType(v49, 1835297121, size_4, v303, &v304, &v301)
      || !FindAtomOffsetOfType(v49, 1835626086, v304, v301, &v302, &v299)
      || !FindAtomOffsetOfType(v49, 1937007212, v302, v299, &v290, &v289))
    {
      goto LABEL_119;
    }
    v54 = v49;
    v55 = v288;
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t, __int128 *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 8);
    if (v56)
    {
      v323 = 0;
      v56(v54, 84, v55, &valuePtr, &v323);
    }
    HIDWORD(valuePtr) = bswap32(HIDWORD(valuePtr));
    v49 = v54;
    if (!FindAtomOffsetOfType(v54, 1751411826, v304, v301, &v300, &v291) || v291 < 0xC)
      goto LABEL_119;
    FindAtomOffsetOfType(v54, 1937011555, v290, v289, &v318, &v315);
    FindAtomOffsetOfType(v54, 1937011578, v290, v289, &v312, &v309);
    v259 = v312;
    if (v312 == -1)
      FindAtomOffsetOfType(v54, 1937013298, v290, v289, &v312, &v309);
    FindAtomOffsetOfType(v54, 1937007471, v290, v289, &v316, &v313);
    FindAtomOffsetOfType(v54, 1668232756, v290, v289, &v314, &v311);
    if (!FindAtomOffsetOfType(v54, 1937011556, v290, v289, &v308, &size))
      goto LABEL_119;
    v57 = v300;
    LODWORD(v322) = 0;
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
    if (v58)
    {
      v323 = 0;
      v58(v54, 4, v57 + 8, &v322, &v323);
      v59 = v322;
    }
    else
    {
      v59 = 0;
    }
    v49 = v54;
    v60 = bswap32(v59);
    v61 = v308;
    v62 = v308 + 8;
    v308 += 8;
    size -= 8;
    if (v60 == 1668047728)
      break;
    if (v60 == 1936684398)
    {
      MovieUInt16 = (__int16)ReadMovieUInt16(v54, v61 + 24);
      if (MovieUInt16 < 2)
      {
        if (MovieUInt16 == 1)
        {
          if (IsSoundDescriptionISOv1(v54, v308, size))
            MovieUInt32 = 36;
          else
            MovieUInt32 = 52;
        }
        else
        {
          MovieUInt32 = 36;
        }
      }
      else
      {
        MovieUInt32 = ReadMovieUInt32(v54, v308 + 36);
      }
      if (FindAtomOffsetOfType(v54, 1936289382, v308 + MovieUInt32, size - MovieUInt32, &v310, &v307))
        goto LABEL_85;
    }
    else if (v60 == 1986618469)
    {
      if (FindImageDescriptionExtensionOffset(v54, v62, 1936289382, &v310, &v307))
        goto LABEL_85;
    }
    else if (FindSampleDescriptionExtensionOffset(v54, v62, 1936289382, &v310, &v307))
    {
      goto LABEL_85;
    }
LABEL_119:
    v318 = -1;
    v316 = -1;
    v314 = -1;
    v312 = -1;
    v310 = -1;
    v288 = -1;
LABEL_120:
    v80 = (_DWORD)v53 - size_4;
    v53 = (unsigned int *)(size_4 + v303);
    v52 = v52 - v303 + v80;
    if (!v52)
      goto LABEL_281;
  }
  if (ReadMovieUInt32(v54, v61 + 12) != 1882599480)
    goto LABEL_119;
  if (!FindAtomOffsetOfType(v54, 1936289382, v308 + 16, size - 16, &v310, &v307))
  {
    v310 = 0;
    v307 = 0;
  }
LABEL_85:
  v241 = (int)v53;
  v65 = v318;
  if (v318 == -1)
  {
LABEL_230:
    LODWORD(v53) = v241;
    goto LABEL_120;
  }
  v66 = v316;
  v67 = v314;
  if ((v316 & v314) == 0xFFFFFFFFFFFFFFFFLL)
  {
    v15 = v285;
    goto LABEL_230;
  }
  v68 = v312;
  if (v312 == -1 || v310 == -1)
  {
    v15 = v285;
    goto LABEL_230;
  }
  v69 = 0;
  v239 = v47;
  do
  {
    v70 = *((_DWORD *)v285 + v69);
    if (HIDWORD(valuePtr) == v70 || v70 == 0)
      goto LABEL_102;
    ++v69;
  }
  while (v33 != v69);
  v72 = FigSignalErrorAt();
  if ((_DWORD)v72)
    goto LABEL_494;
  v65 = v318;
  v66 = v316;
  v67 = v314;
  LODWORD(v69) = -1;
  v68 = v312;
LABEL_102:
  v238 = v59;
  __len = v319;
  v237 = v69;
  __pattern4 = 0;
  v320 = 0;
  v321 = 0;
  v292 = 0;
  GetDefaultFairPlayContextID(0);
  NOAHabXy();
  ByteStreamSize = FAIRPLAY_CALL_LOG(v73);
  if ((_DWORD)ByteStreamSize == -42032)
  {
    GetDefaultFairPlayContextID(1);
    NOAHabXy();
    ByteStreamSize = FAIRPLAY_CALL_LOG(v74);
  }
  if (!(_DWORD)ByteStreamSize)
  {
    if (v259 != -1)
    {
      LODWORD(v322) = 0;
      v75 = *(void (**)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 8);
      if (v75)
      {
        v323 = 0;
        v75(a4, 4, v68 + 4, &v322, &v323);
        LODWORD(v75) = (_DWORD)v322;
      }
      v76 = 0;
      __src = bswap32(v75);
      __pattern4 = __src;
      goto LABEL_109;
    }
    LODWORD(v322) = 0;
    v79 = *(void (**)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
    if (v79)
    {
      v323 = 0;
      v79(a4, 4, v68 + 4, &v322, &v323);
      LODWORD(v79) = (_DWORD)v322;
    }
    v76 = bswap32(v79);
    if (v76 > 0xFF || (__src = 0, v76 != 16) && v76 != 8)
    {
LABEL_116:
      ByteStreamSize = 4294966630;
      goto LABEL_194;
    }
LABEL_109:
    LODWORD(v322) = 0;
    v77 = *(void (**)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
    if (v77)
    {
      v323 = 0;
      v77(a4, 4, v68 + 8, &v322, &v323);
      v78 = v322;
    }
    else
    {
      v78 = 0;
    }
    v81 = v66 + 8;
    if (v66 == -1)
      v81 = -1;
    v254 = v81;
    v82 = v67 + 8;
    if (v67 == -1)
      v82 = -1;
    v275 = v82;
    LODWORD(v322) = 0;
    v83 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
    if (v83)
    {
      v323 = 0;
      v83(a4, 4, v65 + 4, &v322, &v323);
      v84 = v322;
    }
    else
    {
      v84 = 0;
    }
    v85 = FigThreadRegisterAbortAction();
    if (!(_DWORD)v85 || (ByteStreamSize = v85, (_DWORD)v85 == -17561))
    {
      ByteStreamSize = 0;
      if (v78)
      {
        if (!v292)
        {
          LODWORD(v86) = 0;
          v87 = bswap32(v78);
          v252 = v68 + 12;
          v88 = v65 + 8;
          v243 = bswap32(v84);
          v245 = v76 >> 3;
          if (v259 == -1)
            v89 = v76 >> 3;
          else
            v89 = 4;
          v251 = v89;
          v90 = (float)v87;
          LODWORD(v91) = 1;
          v264 = v87;
          v92 = v87;
          while (v243)
          {
            LODWORD(v322) = 0;
            v93 = a4;
            v94 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 8);
            if (v94)
            {
              v323 = 0;
              v94(a4, 4, v88, &v322, &v323);
            }
            LODWORD(v322) = 0;
            v95 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 8);
            if (v95)
            {
              v323 = 0;
              v95(a4, 4, v88 + 4, &v322, &v323);
              LODWORD(v95) = (_DWORD)v322;
            }
            v96 = __src;
            LODWORD(v86) = bswap32(v95);
            v88 += 12;
            v97 = v243 - 1;
            if (v243 == 1)
              goto LABEL_148;
            LODWORD(v322) = 0;
            v98 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 8);
            if (v98)
            {
              v323 = 0;
              v98(a4, 4, v88, &v322, &v323);
              LODWORD(v98) = (_DWORD)v322;
            }
            v99 = bswap32(v98);
LABEL_149:
            v100 = v292;
            v243 = v97;
            if (v91 < v99 && !v292)
            {
              v242 = v88;
              v91 = v91;
              v101 = v99;
              while (1)
              {
                if (v86 >= v92)
                  v86 = v92;
                else
                  v86 = v86;
                v102 = malloc_type_calloc(v86, 4uLL, 0x100004052888210uLL);
                v103 = v102;
                if (v96)
                {
                  memset_pattern4(v102, &__pattern4, 4 * v86);
                  v104 = v86 * v96;
                }
                else
                {
                  v105 = *(void (**)(uint64_t, _QWORD, size_t, _DWORD *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                  if (v105)
                  {
                    v323 = 0;
                    v105(v93, (v86 * v251), v252 + (v264 - v92) * v251, v103, &v323);
                  }
                  if (v259 == -1)
                  {
                    if (v245 == 2)
                    {
                      v111 = (v86 - 1);
                      if ((int)v86 - 1 >= 0)
                      {
                        v104 = 0;
                        do
                        {
                          v112 = bswap32(*((unsigned __int16 *)v103 + v111)) >> 16;
                          v103[v111] = v112;
                          v104 += v112;
                          --v111;
                        }
                        while (v111 != -1);
                        goto LABEL_175;
                      }
                    }
                    else if (v245 == 1)
                    {
                      v109 = (v86 - 1);
                      if ((int)v86 - 1 >= 0)
                      {
                        v104 = 0;
                        do
                        {
                          v110 = *((unsigned __int8 *)v103 + v109);
                          v103[v109] = v110;
                          v104 += v110;
                          --v109;
                        }
                        while (v109 != -1);
                        goto LABEL_175;
                      }
                    }
                  }
                  else if ((_DWORD)v86)
                  {
                    v104 = 0;
                    v106 = &v103[(v86 - 1)];
                    v107 = v86;
                    do
                    {
                      v108 = bswap32(*v106);
                      *v106-- = v108;
                      v104 += v108;
                      --v107;
                    }
                    while (v107);
                    goto LABEL_175;
                  }
                  v104 = 0;
                }
LABEL_175:
                if (v275 == -1)
                {
                  LODWORD(v322) = 0;
                  v114 = *(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                  if (v114)
                  {
                    v323 = 0;
                    v114(v93, 4, ((4 * v91 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + v254, &v322, &v323);
                    LODWORD(v114) = (_DWORD)v322;
                  }
                  v115 = bswap32(v114);
                }
                else
                {
                  v322 = 0;
                  v113 = *(void (**)(uint64_t, uint64_t, unint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                  if (v113)
                  {
                    v323 = 0;
                    v113(v93, 8, ((8 * v91 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + v275, &v322, &v323);
                    v113 = v322;
                  }
                  v115 = bswap64((unint64_t)v113);
                }
                if (v115 + v104 > __len)
                  goto LABEL_116;
                v116 = malloc_type_malloc(v104, 0x21A3CDBAuLL);
                v117 = *(void (**)(uint64_t, size_t, unint64_t, void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 8);
                if (v117)
                  v117(a4, v104, v115, v116, 0);
                v324 = v103;
                v323 = v86;
                v325 = v116;
                v326 = v104;
                T40gmCiYgO7uIqkoes4oO6isuYo();
                v118 = *(void (**)(uint64_t, size_t, unint64_t, void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 16);
                if (v118)
                  v118(a4, v104, v115, v116, 0);
                free(v116);
                free(v103);
                v92 -= v86;
                if (v273)
                  v273(a6, (float)((float)((float)(v264 - v92) / v90) + (float)v240) / v40);
                ++v91;
                v100 = v292;
                v93 = a4;
                v96 = __src;
                if (v91 >= v101 || v292)
                {
                  v88 = v242;
                  break;
                }
              }
            }
            ByteStreamSize = 0;
            if (!v92 || v100)
              goto LABEL_194;
          }
          v93 = a4;
          v96 = __src;
LABEL_148:
          v97 = 0;
          v99 = v91 + 1;
          goto LABEL_149;
        }
      }
    }
  }
LABEL_194:
  if (v320)
    FigThreadUnregisterAbortAction();
  v15 = v285;
  v34 = v286;
  v10 = v282;
  LODWORD(v53) = v241;
  if (v292)
    ByteStreamSize = FigSignalErrorAt();
  if (v321)
  {
    v119 = Hz73b(v321);
    FAIRPLAY_CALL_LOG(v119);
  }
  v33 = v283;
  if ((_DWORD)ByteStreamSize)
    goto LABEL_491;
  if (!v307)
  {
    v47 = v239;
    if (v238 != 942683760)
    {
      ByteStreamSize = 4294966630;
      goto LABEL_491;
    }
    v135 = 0;
    v136 = 1664495672;
    goto LABEL_275;
  }
  v53 = (unsigned int *)*((_QWORD *)v286 + v237);
  v120 = v307 + 8;
  if (!v53)
    goto LABEL_234;
  v121 = bswap32(*v53);
  if (v121 <= *((_DWORD *)v282 + v237) && v121 >= 8)
  {
    v123 = v121 - 8;
    v124 = 0;
    if (v121 != 8)
    {
      v125 = v53 + 2;
      while (1)
      {
        v126 = bswap32(*v125);
        if (v126 < 8 || v123 <= v126)
          break;
        if (v125[1] == 1701147238)
          v128 = 0;
        else
          v128 = v126;
        v124 += v128;
        v125 = (unsigned int *)((char *)v125 + v126);
        v123 -= v126;
        if (!v123)
          goto LABEL_219;
      }
      FigSignalErrorAt();
    }
LABEL_219:
    v129 = v124 + 8;
    if (v124 + 8 > v120)
    {
      v130 = v308 + size;
      v131 = v310 + v307;
      if (v131 + 8 <= (unint64_t)v130
        && (LODWORD(v322) = 0,
            (v132 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 8)) != 0))
      {
        v323 = 0;
        v132(a4, 4, v131 + 4, &v322, &v323);
        v33 = v283;
        if ((_DWORD)v322 == 1701147238)
        {
          v133 = ReadMovieUInt32(a4, v131);
          if (v131 + v133 <= v130)
            v134 = v133;
          else
            v134 = 0;
          v120 += v134;
        }
      }
      else
      {
        v33 = v283;
      }
    }
    if (v129 <= v120)
    {
LABEL_234:
      v137 = v120;
      v138 = (unsigned int *)malloc_type_malloc(v120, 0xFC1AEE35uLL);
      if (v138)
      {
        v135 = v138;
        v139 = v310;
        v140 = v307;
        v141 = *(void (**)(uint64_t, _QWORD, uint64_t, unsigned int *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v141)
        {
          v323 = 0;
          v141(a4, v140 + 8, v139 - 8, v135, &v323);
        }
        v142 = bswap32(*v135) - 8;
        v47 = v239;
        if (v142)
        {
          v143 = v135 + 2;
          while (1)
          {
            if (!*v143)
            {
LABEL_242:
              v276 = 0;
              goto LABEL_252;
            }
            if (v143[1] == 1634562662)
              break;
            v144 = bswap32(*v143);
            v143 = (unsigned int *)((char *)v143 + v144);
            v142 -= v144;
            if (!v142)
              goto LABEL_242;
          }
          v146 = bswap32(v143[2]);
          if (v146)
            v147 = v146 == 1061109567;
          else
            v147 = 1;
          if (v147)
            v146 = 0;
          v276 = v146;
        }
        else
        {
          v276 = 0;
        }
LABEL_252:
        if (v53)
        {
          v149 = *v53;
          v148 = v53[1];
          v150 = (uint64_t *)malloc_type_malloc(v137, 0x37E2C04BuLL);
          __srca = v150;
          if (!v150)
          {
            ByteStreamSize = FigSignalErrorAt();
            v150 = 0;
            if ((_DWORD)ByteStreamSize)
              goto LABEL_489;
          }
          v151 = bswap32(v149);
          *v150 = bswap32(v137) | (unint64_t)(v148 << 32);
          v152 = v150 + 1;
          __lena = v137;
          v153 = (v137 - 8);
          v154 = v151 - 8;
          if (v151 == 8)
          {
            if (v153 > 7)
            {
              v160 = v153;
              v158 = v150 + 1;
              v47 = v239;
              LODWORD(v53) = v241;
              goto LABEL_265;
            }
            bzero(v150 + 1, v153);
            v47 = v239;
            LODWORD(v53) = v241;
            v137 = __lena;
          }
          else
          {
            v155 = 0;
            v156 = v53 + 2;
            LODWORD(v53) = v241;
            do
            {
              v157 = bswap32(*v156);
              v158 = v152;
              if (v156[1] != 1701147238)
              {
                memmove(v152, v156, v157);
                v159 = bswap32(*(_DWORD *)v152);
                v158 = (uint64_t *)((char *)v152 + v159);
                LODWORD(v153) = v153 - v159;
                v155 = (unsigned int *)v152;
                v152 = (uint64_t *)((char *)v152 + v159);
              }
              v156 = (unsigned int *)((char *)v156 + v157);
              v154 -= v157;
            }
            while (v154);
            v160 = v153;
            if (v153 <= 7)
            {
              bzero(v158, v153);
              v47 = v239;
              v137 = __lena;
              if (v155)
                *v155 = bswap32(bswap32(*v155) + v153);
            }
            else
            {
              v47 = v239;
LABEL_265:
              v137 = __lena;
              *v158 = bswap32(v153) | 0x6565726600000000;
              v161 = v160 - 8;
              if (v161)
                bzero(v158 + 1, v161);
            }
          }
          memmove(v135, __srca, v137);
          v15 = v285;
          if (__srca)
            free(__srca);
        }
        else
        {
          v135[1] = 1701147238;
          bzero(v135 + 2, v307);
          LODWORD(v53) = v241;
        }
        v162 = v310;
        v163 = *(void (**)(uint64_t, size_t, uint64_t, unsigned int *, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v163)
        {
          v323 = 0;
          v163(a4, v137, v162 - 8, v135, &v323);
        }
        v136 = v276;
      }
      else
      {
        v145 = FigSignalErrorAt();
        if ((_DWORD)v145)
          goto LABEL_488;
        v136 = 0;
        v135 = 0;
        v47 = v239;
        LODWORD(v53) = v241;
      }
LABEL_275:
      v164 = v308;
      LODWORD(v322) = bswap32(v136);
      v165 = *(void (**)(uint64_t, uint64_t, size_t, _QWORD, unint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 16);
      if (v165)
      {
        v323 = 0;
        v165(a4, 4, v164 + 4, &v322, &v323);
      }
      ++v240;
      if (v135)
        free(v135);
      v51 = 1;
      v49 = a4;
      goto LABEL_120;
    }
  }
  v72 = FigSignalErrorAt();
LABEL_494:
  ByteStreamSize = v72;
  v15 = v285;
  v34 = v286;
LABEL_490:
  v10 = v282;
LABEL_491:
  v16 = v281;
LABEL_451:
  if (!(_DWORD)ByteStreamSize)
  {
LABEL_452:
    if (v258
      && (Length = CFStringGetLength(theString), v235 = CFStringGetLength(CFSTR(".m4p")), Length >= v235)
      && (v328.length = v235,
          v328.location = Length - v235,
          CFStringCompareWithOptions(theString, CFSTR(".m4p"), v328, 1uLL) == kCFCompareEqualTo))
    {
      ByteStreamSize = 0;
      *v258 = CFSTR("m4a");
    }
    else
    {
      ByteStreamSize = 0;
    }
    goto LABEL_462;
  }
LABEL_461:
  if (v15)
    goto LABEL_462;
LABEL_463:
  if (v34)
    free(v34);
  if (v10)
    free(v10);
  if (v16)
    free(v16);
  if (v280)
    free(v280);
  if (v279)
    free(v279);
  return ByteStreamSize;
}

uint64_t ObtainSinfInfoFromMedia(CFStringRef filePath, uint64_t a2)
{
  CFURLRef v2;
  CFURLRef v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD size[5];
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!filePath)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v2 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], filePath, kCFURLPOSIXPathStyle, 0);
  if (!v2)
    return FigSignalErrorAt();
  v3 = v2;
  v4 = CMByteStreamCreateForFileURL();
  if ((_DWORD)v4)
  {
    v5 = v4;
  }
  else
  {
    v18 = -1;
    v17 = 0;
    v16 = -1;
    v15 = 0;
    v14 = -1;
    v13 = 0;
    v12 = -1;
    v11 = 0;
    v10 = -1;
    v9 = 0;
    v8 = -1;
    size[4] = 0;
    *(_QWORD *)&size[1] = -1;
    size[0] = 0;
    v5 = 4294967246;
  }
  CFRelease(v3);
  return v5;
}

uint64_t PPGetRentalInfoFromSinfInfo(const __CFArray *a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  uint64_t v6;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t DefaultFairPlayContextID;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  void *value;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v5 = Count;
  v6 = 0;
  for (i = 0; i != v5; ++i)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
    value = 0;
    if (CFDictionaryGetValueIfPresent(ValueAtIndex, CFSTR("sinf"), (const void **)&value))
    {
      Length = CFDataGetLength((CFDataRef)value);
      BytePtr = CFDataGetBytePtr((CFDataRef)value);
      v18 = 0;
      v19 = 0;
      DefaultFairPlayContextID = GetDefaultFairPlayContextID(0);
      RbFpir(DefaultFairPlayContextID, (uint64_t)BytePtr, Length, (uint64_t)&v18);
      v6 = FAIRPLAY_CALL_LOG(v12);
      if ((_DWORD)v6 == -42032)
      {
        v13 = GetDefaultFairPlayContextID(1);
        RbFpir(v13, (uint64_t)BytePtr, Length, (uint64_t)&v18);
        v6 = FAIRPLAY_CALL_LOG(v14);
      }
      if (!(_DWORD)v6)
      {
        v15 = v19;
        if (*(_DWORD *)(a2 + 8) - 1 >= v19)
        {
          *(_QWORD *)a2 = v18;
          v16 = HIDWORD(v19);
          *(_DWORD *)(a2 + 8) = v15;
          *(_DWORD *)(a2 + 12) = v16;
        }
        v6 = 0;
      }
    }
  }
  return v6;
}

uint64_t GetDefaultFairPlayContextID(int a1)
{
  const __CFString *v2;
  const __CFString *v3;
  CFIndex Length;
  uint64_t CStringPtrAndBufferToFree;
  uint64_t v6;
  uid_t v7;
  passwd *v8;
  uint64_t v9;
  _QWORD v11[3];
  char __str[1024];
  char v13[40];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402F294](&sInitFPCtxtLockOnce, createInitFPCtxtLock);
  MEMORY[0x19402EEEC](sInitFPCtxtLock);
  if (a1 || !sFairPlayContext)
  {
    v2 = (const __CFString *)MGCopyAnswer();
    if (v2)
    {
      v3 = v2;
      memset(v11, 0, sizeof(v11));
      Length = CFStringGetLength(v2);
      CFStringGetSystemEncoding();
      CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
      zxcm2Qme0x(CStringPtrAndBufferToFree, Length, (uint64_t)v11);
      LODWORD(Length) = FAIRPLAY_CALL_LOG(v6);
      free(0);
      if (!(_DWORD)Length)
      {
        strcpy(v13, "/Media/iTunes_Control/iTunes/");
        v7 = getuid();
        v8 = getpwuid(v7);
        if (v8)
        {
          snprintf(__str, 0x400uLL, "%s%s", v8->pw_dir, v13);
          v9 = XtCqEf5X(0, (uint64_t)v11, (uint64_t)__str, (uint64_t)&sFairPlayContext);
          FAIRPLAY_CALL_LOG(v9);
        }
      }
      CFRelease(v3);
    }
  }
  MEMORY[0x19402EF04](sInitFPCtxtLock);
  return sFairPlayContext;
}

uint64_t PostProcessGetRentalInfo(const __CFString *a1, _DWORD *a2)
{
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (CFStringGetCString(a1, buffer, 1024, 0x8000100u))
    return FigSharedRemote_GetRentalInfo(buffer, a2, a2 + 1, a2 + 2, a2 + 3);
  return 4294967246;
}

uint64_t EncryptedFileMD5Check(const __CFDictionary *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  void *v8;
  unsigned int ByteStreamSize;
  uint64_t v10;
  const __CFData *Value;
  const __CFData *v12;
  CFTypeID v13;
  const __CFArray *v14;
  const __CFArray *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  const __CFNumber *v18;
  CFTypeID v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, unint64_t, uint64_t, void *, uint64_t *);
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  const __CFData *ValueAtIndex;
  unsigned int v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t, uint64_t *);
  char v38;
  int v39;
  CFIndex v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  const __CFArray *theArray;
  const __CFData *v46;
  CFIndex idx;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t valuePtr;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  _QWORD v56[3];

  v56[2] = *MEMORY[0x1E0C80C00];
  v55 = 0;
  v53 = 0;
  v54 = 0;
  v51 = 0;
  valuePtr = 0;
  v50 = 0;
  CMByteStreamGetCMBaseObject();
  FigCRABSGetClassID();
  if (CMBaseObjectIsMemberOfClass())
    v7 = a2;
  else
    v7 = 0;
  v8 = malloc_type_malloc(0x8000uLL, 0x49C605EEuLL);
  if (!v8)
    goto LABEL_80;
  ByteStreamSize = GetByteStreamSize(a2, &v53);
  if (ByteStreamSize)
  {
LABEL_81:
    v25 = ByteStreamSize;
    v21 = 0;
    v22 = 0;
    goto LABEL_71;
  }
  if (a4)
  {
    MEMORY[0x19402EEEC](*a4);
    v10 = v53;
    a4[1] = 0;
    a4[2] = v10;
    MEMORY[0x19402EF04](*a4);
  }
  if (!a1)
  {
    v21 = 0;
    theArray = 0;
    goto LABEL_18;
  }
  if ((Value = (const __CFData *)CFDictionaryGetValue(a1, CFSTR("FileMD5")), (v12 = Value) != 0)
    && (v13 = CFGetTypeID(Value), v13 != CFDataGetTypeID())
    || (v14 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("ChunkMD5Array")), (v15 = v14) != 0)
    && (v16 = CFGetTypeID(v14), v16 != CFArrayGetTypeID()))
  {
LABEL_80:
    ByteStreamSize = FigSignalErrorAt();
    goto LABEL_81;
  }
  theArray = v15;
  v17 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("MD5ChunkSize"));
  if (v17)
  {
    v18 = v17;
    v19 = CFGetTypeID(v17);
    if (v19 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v18, kCFNumberSInt64Type, &valuePtr);
      v20 = v12 != 0;
      v46 = v12;
      if (v12)
        v21 = FigDigestMD5Create();
      else
        v21 = 0;
      v22 = FigDigestMD5Create();
      v23 = 0;
      goto LABEL_23;
    }
    goto LABEL_80;
  }
  if (v12)
  {
    v46 = v12;
    v23 = 1;
    v21 = FigDigestMD5Create();
    v22 = 0;
    v20 = 1;
    goto LABEL_23;
  }
  v21 = 0;
LABEL_18:
  v46 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 1;
LABEL_23:
  v24 = FigThreadRegisterAbortAction();
  if (v24)
  {
    v25 = v24;
    if (v24 != -17561)
      goto LABEL_71;
  }
  v25 = 0;
  if (v55)
    goto LABEL_71;
  v26 = v53;
  if (v53 < 1)
    goto LABEL_71;
  idx = 0;
  v48 = v21;
  v43 = v7;
  v44 = 0;
  v42 = 0;
  v41 = 0;
  v27 = 0;
  v28 = 0;
  while (1)
  {
    v49 = 0;
    v29 = valuePtr;
    v30 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, void *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 8);
    if (!v30)
    {
      v25 = -12782;
      goto LABEL_70;
    }
    v31 = v26 - v28;
    if ((unint64_t)(v26 - v28) >= 0x8000)
      v31 = 0x8000;
    v32 = v29 - v27;
    if (v31 < v29 - v27)
      v32 = v31;
    v33 = v23 ? v31 : v32;
    v34 = v30(a2, v33, v28, v8, &v49);
    if (v34)
      break;
    if (v20)
      MEMORY[0x19402DCF8](v48, v8, v49);
    if (v23)
    {
      v28 += v49;
      goto LABEL_57;
    }
    MEMORY[0x19402DCF8](v22, v8, v49);
    v28 += v49;
    v27 += v49;
    if (v27 < valuePtr && v28 != v53)
      goto LABEL_57;
    FigDigestMD5GetDigest();
    if (CFArrayGetCount(theArray) > idx
      && (ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, idx)) != 0)
    {
      v36 = CompareMD5(ValueAtIndex, v56);
    }
    else
    {
      v36 = FigSignalErrorAt();
    }
    v25 = v36;
    if (!v36)
    {
      ++idx;
      MEMORY[0x19402DD28](v22);
      v27 = 0;
      v44 = v28;
LABEL_57:
      v38 = !v20;
      if (v28 < v53)
        v38 = 1;
      if ((v38 & 1) == 0)
      {
        FigDigestMD5GetDigest();
        if (CompareMD5(v46, v56))
        {
LABEL_68:
          v34 = FigSignalErrorAt();
          break;
        }
      }
      goto LABEL_61;
    }
    if (!v43 || v42 && v41 == idx)
      goto LABEL_68;
    v50 = v44;
    v51 = valuePtr;
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 24)
                                                                              + 8);
    if (!v37)
      goto LABEL_70;
    v21 = v48;
    if (v37(v43, 8, 1, &v50))
      goto LABEL_71;
    MEMORY[0x19402DD28](v22);
    if (v20)
      MEMORY[0x19402DD28](v48);
    MEMORY[0x19402DD28](v22);
    v28 = 0;
    v27 = 0;
    v44 = 0;
    v42 = 1;
    v41 = idx;
    idx = 0;
LABEL_61:
    if (a4)
    {
      MEMORY[0x19402EEEC](*a4);
      a4[1] = v28;
      MEMORY[0x19402EF04](*a4);
    }
    if (!v55)
    {
      v26 = v53;
      if (v28 < v53)
        continue;
    }
    v25 = 0;
    goto LABEL_70;
  }
  v25 = v34;
LABEL_70:
  v21 = v48;
LABEL_71:
  if (v54)
    FigThreadUnregisterAbortAction();
  v39 = v55;
  free(v8);
  if (v21)
    MEMORY[0x19402DD10](v21);
  if (v22)
    MEMORY[0x19402DD10](v22);
  if (v39)
    return 4294954762;
  else
    return v25;
}

uint64_t GetByteStreamSize(uint64_t a1, void *a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFNumberRef *);
  uint64_t result;
  CFNumberRef number;

  number = 0;
  CMBaseObject = CMByteStreamGetCMBaseObject();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
    return 4294954514;
  result = v4(CMBaseObject, *MEMORY[0x1E0CA2070], 0, &number);
  if (!(_DWORD)result)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, a2);
    CFRelease(number);
    return 0;
  }
  return result;
}

_BYTE *EncryptedFileMD5CheckAbortAction(_BYTE *result)
{
  *result = 1;
  return result;
}

uint64_t CompareMD5(const __CFData *a1, _QWORD *a2)
{
  const UInt8 *BytePtr;
  BOOL v5;

  if (CFDataGetLength(a1) == 16
    && ((BytePtr = CFDataGetBytePtr(a1), *a2 == *(_QWORD *)BytePtr)
      ? (v5 = a2[1] == *((_QWORD *)BytePtr + 1))
      : (v5 = 0),
        v5))
  {
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

