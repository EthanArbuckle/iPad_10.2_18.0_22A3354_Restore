void FigRemotePropertyCacheTeardown(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    dispatch_release(*(dispatch_object_t *)a1);
    *(_QWORD *)a1 = 0;
  }
}

uint64_t ASSETTRACK_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY()
{
  return FigXPCRemoteClientSendSyncMessageWithNoTimeoutCreatingReply();
}

uint64_t remoteXPCAssetTrack_DeserializeAndCreateAssetTrackPropertyValueFromXPCDictionary(int a1, CFTypeRef cf1, _QWORD *a3)
{
  uint64_t result;

  if (CFEqual(cf1, CFSTR("FormatDescriptionArray")))
  {
    result = FigXPCMessageCopyFormatDescriptionArray();
    if (!(_DWORD)result)
      *a3 = 0;
  }
  else if (CFEqual(cf1, CFSTR("CommonMetadata"))
         || CFEqual(cf1, CFSTR("assetTrackProperty_QuickTimeMetadata"))
         || CFEqual(cf1, CFSTR("assetTrackProperty_QuickTimeUserData"))
         || CFEqual(cf1, CFSTR("assetTrackProperty_ISOUserData")))
  {
    return remoteXPCAsset_ConvertMetadataBinaryPListDataToArray();
  }
  else
  {
    return FigXPCMessageCopyCFObject();
  }
  return result;
}

uint64_t remoteXPCAssetTrack_GetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v9;
  uint64_t v11;
  xpc_object_t xdict;
  uint64_t v13;

  xdict = 0;
  v13 = 0;
  v11 = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
LABEL_15:
    v9 = ObjectID;
    goto LABEL_13;
  }
  ObjectID = remoteXPCAssetTrack_GetObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v9)
  {
    *a3 = xpc_dictionary_get_uint64(xdict, "LoadStatus");
    if (a4)
      *a4 = xpc_dictionary_get_int64(xdict, "LoadingError");
    if (a5)
      FigXPCMessageCopyCFError();
    v9 = 0;
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCAssetTrack_LoadValuesAsyncForProperties(uint64_t a1, CFArrayRef theArray, BOOL *a3, _DWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  v11 = 0;
  xdict = 0;
  v10 = 0;
  if (!theArray || !CFArrayGetCount(theArray))
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v8 = ObjectID;
    goto LABEL_11;
  }
  ObjectID = remoteXPCAssetTrack_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCMessageSetCFArray();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  xpc_dictionary_set_BOOL(xdict, "isBatch", a4 != 0);
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  if (a3)
    *a3 = xpc_dictionary_get_BOOL(v11, "AlreadyLoaded");
  v8 = 0;
  if (a4)
    *a4 = xpc_dictionary_get_uint64(v11, "BatchID");
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCAssetTrack_LoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;
  xpc_object_t xdict;
  uint64_t v9;

  xdict = 0;
  v9 = 0;
  v7 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v5 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteXPCAssetTrack_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (a3 && !(_DWORD)v5)
    *a3 = xpc_dictionary_get_BOOL(xdict, "AlreadyLoaded");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCAssetTrack_GetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 48))
    return FigSignalErrorAt();
  if (a2)
    *a2 = *(_DWORD *)(DerivedStorage + 8);
  if (a3)
    *a3 = *(_DWORD *)(DerivedStorage + 12);
  return 0;
}

uint64_t remoteXPCAssetTrack_ValidateAsync(uint64_t a1, CFTypeRef cf1, uint64_t a3, int64_t *a4, _DWORD *a5)
{
  uint64_t ObjectID;
  uint64_t v11;
  uint64_t v13;
  xpc_object_t xdict;
  uint64_t v15;

  xdict = 0;
  v15 = 0;
  v13 = 0;
  if (!cf1 || !a4)
    goto LABEL_18;
  if (CFEqual(cf1, CFSTR("validationCriteria_Custom")))
  {
    if (!a3)
    {
LABEL_18:
      ObjectID = FigSignalErrorAt();
LABEL_19:
      v11 = ObjectID;
      goto LABEL_17;
    }
  }
  else if (!CFEqual(cf1, CFSTR("validationCriteria_CameraRoll"))
         && !CFEqual(cf1, CFSTR("validationCriteria_MediaPlayback"))
         && !CFEqual(cf1, CFSTR("validationCriteria_MediaDecoding")))
  {
    goto LABEL_18;
  }
  ObjectID = remoteXPCAssetTrack_GetObjectID(a1, &v13);
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_19;
  if (a3)
  {
    ObjectID = FigXPCMessageSetCFDictionary();
    if ((_DWORD)ObjectID)
      goto LABEL_19;
  }
  v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v11)
  {
    *a4 = xpc_dictionary_get_int64(xdict, "ValidationStatus");
    v11 = 0;
    if (a5)
      *a5 = xpc_dictionary_get_int64(xdict, "ValidationResult");
  }
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

void remoteXPCAsset_sandboxRegisterURLdAddToXPCMessageAndCopyRegistration(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  if (!a1)
  {
    if (FigSandboxRegisterURLWithProcessAndCopyRegistration())
      return;
    goto LABEL_5;
  }
  if (!FigSandboxRegisterDirectoryURLWithProcessAndCopyRegistration())
LABEL_5:
    *a6 = 0;
}

void remoteXPCAsset_storeSandboxRegistration(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  __CFSet *Mutable;
  const __CFAllocator *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = *(__CFSet **)(DerivedStorage + 48);
  if (Mutable
    || (v6 = CFGetAllocator(a1),
        Mutable = CFSetCreateMutable(v6, 0, MEMORY[0x1E0C9B3B0]),
        (*(_QWORD *)(DerivedStorage + 48) = Mutable) != 0))
  {
    if (a2)
      CFSetAddValue(Mutable, a2);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t remoteXPCAsset_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigStopMonitoringMediaServicesProcessDeath();
  FigXPCRemoteClientDisassociateObject();
  if (!*(_BYTE *)(DerivedStorage + 40) && !*(_BYTE *)(DerivedStorage + 66) && !FigXPCCreateBasicMessage())
    FigXPCRemoteClientSendAsyncMessage();
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  FigRemotePropertyCacheTeardown(DerivedStorage + 8);
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *remoteXPCAsset_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 40))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigAssetRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCAsset_CopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, CFTypeRef *a4)
{
  uint64_t ObjectID;
  uint64_t DerivedStorage;
  NSObject *v9;
  int v10;
  uint64_t v11;
  CFTypeRef cf;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD block[10];

  block[9] = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (cf1 && a4)
  {
    *a4 = 0;
    if (!CFEqual(cf1, CFSTR("assetProperty_ContentByteStream"))
      && !CFEqual(cf1, CFSTR("assetProperty_ByteStreamProvider"))
      || (ObjectID = FigSignalErrorAt(), !(_DWORD)ObjectID))
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v14 = 0;
      v15 = &v14;
      v16 = 0x2000000000;
      v17 = 0;
      v9 = *(NSObject **)(DerivedStorage + 8);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __remoteXPCAsset_CopyCachedAssetPropertyValue_block_invoke;
      block[3] = &unk_1E2FAE1E8;
      block[6] = cf1;
      block[7] = &cf;
      block[4] = &v14;
      block[5] = DerivedStorage;
      dispatch_sync(v9, block);
      v10 = *((unsigned __int8 *)v15 + 24);
      _Block_object_dispose(&v14, 8);
      if (v10)
      {
LABEL_16:
        v11 = 0;
        *a4 = cf;
        cf = 0;
        goto LABEL_17;
      }
      v14 = 0;
      ObjectID = remoteXPCAsset_GetObjectID(a1, &v14);
      if (!(_DWORD)ObjectID)
      {
        ObjectID = FigXPCCreateBasicMessage();
        if (!(_DWORD)ObjectID)
        {
          ObjectID = FigXPCMessageSetCFString();
          if (!(_DWORD)ObjectID)
          {
            if (pthread_main_np())
              xpc_dictionary_set_BOOL(0, "RequestBlockageWarning", 1);
            ObjectID = ASSET_CLIENT_SYNCHRONOUSLY_COPYING_A_PROPERTY();
            if (!(_DWORD)ObjectID)
            {
              ObjectID = remoteXPCAsset_DeserializeAndCreateAssetPropertyValueFromXPCDictionary(a1, 0, cf1, (uint64_t *)&cf);
              if (!(_DWORD)ObjectID)
              {
                ObjectID = FigXPCMessageCopyCFString();
                if (!(_DWORD)ObjectID)
                {
                  remoteXPCAsset_SetCachedAssetPropertyValue(a1, (uint64_t)cf1, (uint64_t)cf);
                  goto LABEL_16;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v11 = ObjectID;
LABEL_17:
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteXPCAsset_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectID;
  uint64_t v4;
  uint64_t v6;

  if (a2 && a3)
  {
    v6 = 0;
    ObjectID = remoteXPCAsset_GetObjectID(a1, &v6);
    if (!(_DWORD)ObjectID)
      ObjectID = FigXPCSendStdSetPropertyMessage();
  }
  else
  {
    ObjectID = FigSignalErrorAt();
  }
  v4 = ObjectID;
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteXPCAsset_GetStatusOfValueForProperty(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t ObjectID;
  NSObject *v13;
  uint64_t v14;
  _QWORD block[10];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  xpc_object_t v22;
  uint64_t v23;

  v22 = 0;
  v23 = 0;
  v21 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  if (!a2 || !a3)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_15;
  }
  v11 = DerivedStorage;
  ObjectID = remoteXPCAsset_GetObjectID(a1, &v21);
  if ((_DWORD)ObjectID)
    goto LABEL_15;
  v13 = *(NSObject **)(v11 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __remoteXPCAsset_GetStatusOfValueForProperty_block_invoke;
  block[3] = &unk_1E2FAE210;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  block[9] = a5;
  block[4] = &v17;
  block[5] = v11;
  dispatch_sync(v13, block);
  if (*((_BYTE *)v18 + 24))
    goto LABEL_5;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID || (ObjectID = FigXPCMessageSetCFString(), (_DWORD)ObjectID))
  {
LABEL_15:
    v14 = ObjectID;
    goto LABEL_13;
  }
  v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v14)
    goto LABEL_13;
  *a3 = xpc_dictionary_get_uint64(v22, "LoadStatus");
  if (a4)
    *a4 = xpc_dictionary_get_int64(v22, "LoadingError");
  if (a5)
  {
    FigXPCMessageCopyCFError();
    v14 = 0;
    goto LABEL_13;
  }
LABEL_5:
  v14 = 0;
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  _Block_object_dispose(&v17, 8);
  return v14;
}

uint64_t remoteXPCAsset_LoadValuesAsyncForProperties(uint64_t a1, CFArrayRef theArray, BOOL *a3, _DWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t xdict;

  v11 = 0;
  xdict = 0;
  v10 = 0;
  if (!theArray || !CFArrayGetCount(theArray))
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v8 = ObjectID;
    goto LABEL_11;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCMessageSetCFArray();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  xpc_dictionary_set_BOOL(xdict, "isBatch", a4 != 0);
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  if (a3)
    *a3 = xpc_dictionary_get_BOOL(v11, "AlreadyLoaded");
  v8 = 0;
  if (a4)
    *a4 = xpc_dictionary_get_uint64(v11, "BatchID");
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCAsset_LoadValueAsyncForProperty(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v7;
  xpc_object_t xdict;
  uint64_t v9;

  xdict = 0;
  v9 = 0;
  v7 = 0;
  if (!a2)
  {
    ObjectID = FigSignalErrorAt();
LABEL_10:
    v5 = ObjectID;
    goto LABEL_8;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, &v7);
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_10;
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (a3 && !(_DWORD)v5)
    *a3 = xpc_dictionary_get_BOOL(xdict, "AlreadyLoaded");
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v5;
}

uint64_t remoteXPCAsset_ValidateAsync(uint64_t a1, uint64_t a2, uint64_t a3, int64_t *a4, _DWORD *a5)
{
  uint64_t ObjectID;
  uint64_t v9;
  uint64_t v11;
  xpc_object_t xdict;
  uint64_t v13;

  xdict = 0;
  v13 = 0;
  v11 = 0;
  if (!a2 || !a4)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v9 = ObjectID;
    goto LABEL_11;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, &v11);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCMessageSetCFString();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  if (a3)
  {
    ObjectID = FigXPCMessageSetCFDictionary();
    if ((_DWORD)ObjectID)
      goto LABEL_13;
  }
  v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v9)
  {
    *a4 = xpc_dictionary_get_int64(xdict, "ValidationStatus");
    v9 = 0;
    if (a5)
      *a5 = xpc_dictionary_get_int64(xdict, "ValidationResult");
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCAsset_CopyTrackByID(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t CMBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  unsigned int (*v12)(const void *, int *, _QWORD);
  uint64_t v14;
  CFTypeRef v15;
  int v17;
  CFArrayRef theArray;

  theArray = 0;
  if (!a2)
    goto LABEL_16;
  if (!a3)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_18;
  }
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v6 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (!v6)
    goto LABEL_16;
  if (v6(CMBaseObject, CFSTR("assetProperty_Tracks"), *MEMORY[0x1E0C9AE00], &theArray) || theArray == 0)
    goto LABEL_16;
  v17 = 0;
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
    goto LABEL_16;
  v9 = Count;
  v10 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
    v12 = *(unsigned int (**)(const void *, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v12)
    {
      if (!v12(ValueAtIndex, &v17, 0) && v17 == a2)
        break;
    }
    if (v9 == ++v10)
      goto LABEL_16;
  }
  v15 = CFRetain(ValueAtIndex);
  if (!v15)
  {
LABEL_16:
    v14 = FigSignalErrorAt();
    v15 = 0;
    if (!a3)
      goto LABEL_18;
    goto LABEL_17;
  }
  v14 = 0;
  if (a3)
LABEL_17:
    *a3 = v15;
LABEL_18:
  if (theArray)
    CFRelease(theArray);
  return v14;
}

uint64_t remoteXPCAsset_CopyTracksWithMediaType(uint64_t a1, int a2, __CFArray **a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v7;
  int v8;
  CFArrayRef v9;
  BOOL v10;
  __CFArray *Mutable;
  uint64_t v12;
  CFIndex Count;
  uint64_t v14;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v17)(const void *, _QWORD, int *);
  unsigned int v18;
  BOOL v19;
  int v21;
  CFArrayRef theArray;

  theArray = 0;
  if (!a3)
    return FigSignalErrorAt();
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v6)
    goto LABEL_23;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = v6(CMBaseObject, CFSTR("assetProperty_Tracks"), *MEMORY[0x1E0C9AE00], &theArray);
  v9 = theArray;
  if (v8)
    v10 = 1;
  else
    v10 = theArray == 0;
  if (!v10)
  {
    v21 = 0;
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v14 = Count;
      Mutable = CFArrayCreateMutable(v7, Count, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        if (v14 < 1)
        {
          v18 = 0;
        }
        else
        {
          for (i = 0; i != v14; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            v17 = *(uint64_t (**)(const void *, _QWORD, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 32);
            if (v17)
            {
              v18 = v17(ValueAtIndex, 0, &v21);
              if (v18)
                v19 = 0;
              else
                v19 = v21 == a2;
              if (v19)
              {
                CFArrayAppendValue(Mutable, ValueAtIndex);
                v18 = 0;
              }
            }
            else
            {
              v18 = -12782;
            }
          }
        }
        if (!CFArrayGetCount(Mutable))
        {
          CFRelease(Mutable);
          Mutable = 0;
        }
        if (Mutable)
          v12 = v18;
        else
          v12 = 4294955122;
      }
      else
      {
        v12 = FigSignalErrorAt();
      }
      goto LABEL_30;
    }
LABEL_23:
    Mutable = 0;
    v12 = 4294955122;
LABEL_30:
    v9 = theArray;
    goto LABEL_31;
  }
  Mutable = 0;
  v12 = 4294955122;
LABEL_31:
  *a3 = Mutable;
  if (v9)
    CFRelease(v9);
  return v12;
}

uint64_t remoteXPCAsset_CopyChapterData(uint64_t a1, int64_t a2, int64_t a3, int64_t a4, uint64_t a5)
{
  uint64_t ObjectID;
  uint64_t v9;
  _QWORD v11[2];
  xpc_object_t xdict;

  v11[1] = 0;
  xdict = 0;
  v11[0] = 0;
  if (!a4 || !a5)
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    v9 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, v11);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  xpc_dictionary_set_int64(xdict, "ChapterGroupIndex", a2);
  xpc_dictionary_set_int64(xdict, "ChapterIndex", a3);
  xpc_dictionary_set_int64(xdict, "ChapterCount", a4);
  v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!(_DWORD)v9)
    v9 = FigXPCMessageCopyCFArray();
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteXPCAsset_FetchChapterDataAsync(uint64_t a1, int64_t a2, int64_t a3, int64_t a4)
{
  uint64_t ObjectID;
  uint64_t v8;
  uint64_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  if (!a4)
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_7;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, &v10);
  if ((_DWORD)ObjectID)
  {
LABEL_7:
    v8 = ObjectID;
    goto LABEL_5;
  }
  v8 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v8)
  {
    xpc_dictionary_set_int64(xdict, "ChapterGroupIndex", a2);
    xpc_dictionary_set_int64(xdict, "ChapterIndex", a3);
    xpc_dictionary_set_int64(xdict, "ChapterCount", a4);
    v8 = FigXPCRemoteClientSendAsyncMessage();
  }
LABEL_5:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v8;
}

uint64_t remoteXPCAsset_LoadValuesAsyncForTrackProperties(uint64_t a1, const __CFArray *a2, CFArrayRef theArray, BOOL *a4, _DWORD *a5)
{
  uint64_t ObjectID;
  xpc_object_t v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  const void *ValueAtIndex;
  uint64_t v15;
  CFTypeID v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t value;
  uint64_t v21;
  xpc_object_t v22;
  xpc_object_t xdict;

  v22 = 0;
  xdict = 0;
  v21 = 0;
  if (theArray)
  {
    if (!CFArrayGetCount(theArray) || a2 && !CFArrayGetCount(a2))
    {
      ObjectID = FigSignalErrorAt();
      goto LABEL_26;
    }
    ObjectID = remoteXPCAsset_GetObjectID(a1, &v21);
    if ((_DWORD)ObjectID)
      goto LABEL_26;
    ObjectID = FigXPCCreateBasicMessage();
    if ((_DWORD)ObjectID)
      goto LABEL_26;
    ObjectID = FigXPCMessageSetCFArray();
    if ((_DWORD)ObjectID)
      goto LABEL_26;
    xpc_dictionary_set_BOOL(xdict, "isBatch", a5 != 0);
    if (!a2)
    {
LABEL_17:
      ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ObjectID)
      {
        if (a5)
          *a5 = xpc_dictionary_get_uint64(v22, "BatchID");
        v18 = 0;
        if (a4)
          *a4 = xpc_dictionary_get_BOOL(v22, "AlreadyLoaded");
        goto LABEL_22;
      }
LABEL_26:
      v18 = ObjectID;
      goto LABEL_22;
    }
    v10 = xpc_array_create(0, 0);
    if (v10)
    {
      Count = CFArrayGetCount(a2);
      if (Count >= 1)
      {
        v12 = Count;
        v13 = 0;
        do
        {
          value = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(a2, v13);
          if (!ValueAtIndex)
            goto LABEL_23;
          v15 = (uint64_t)ValueAtIndex;
          v16 = CFGetTypeID(ValueAtIndex);
          if (v16 != FigAssetTrackGetTypeID())
            goto LABEL_23;
          v17 = remoteXPCAssetTrack_GetObjectID(v15, &value);
          if ((_DWORD)v17)
            goto LABEL_24;
          xpc_array_set_uint64(v10, 0xFFFFFFFFFFFFFFFFLL, value);
        }
        while (v12 != ++v13);
      }
      xpc_dictionary_set_value(xdict, "Tracks", v10);
      xpc_release(v10);
      goto LABEL_17;
    }
  }
LABEL_23:
  v17 = FigSignalErrorAt();
LABEL_24:
  v18 = v17;
LABEL_22:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v18;
}

uint64_t remoteXPCAsset_DefineMacroProperty(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  if (!a2 || !theArray || !CFArrayGetCount(theArray))
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, v8);
  if ((_DWORD)ObjectID)
  {
LABEL_12:
    v6 = ObjectID;
    goto LABEL_9;
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5 || (v5 = FigXPCMessageSetCFString(), (_DWORD)v5) || (v5 = FigXPCMessageSetCFArray(), (_DWORD)v5))
    v6 = v5;
  else
    v6 = FigXPCRemoteClientSendSyncMessage();
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCAsset_DefineTrackMacroProperty(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  if (!a2 || !theArray || !CFArrayGetCount(theArray))
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, v8);
  if ((_DWORD)ObjectID)
  {
LABEL_12:
    v6 = ObjectID;
    goto LABEL_9;
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5 || (v5 = FigXPCMessageSetCFString(), (_DWORD)v5) || (v5 = FigXPCMessageSetCFArray(), (_DWORD)v5))
    v6 = v5;
  else
    v6 = FigXPCRemoteClientSendSyncMessage();
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteXPCAsset_DefineCrossTrackMacroProperty(uint64_t a1, uint64_t a2, CFArrayRef theArray)
{
  uint64_t ObjectID;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  if (!a2 || !theArray || !CFArrayGetCount(theArray))
  {
    ObjectID = FigSignalErrorAt();
    goto LABEL_12;
  }
  ObjectID = remoteXPCAsset_GetObjectID(a1, v8);
  if ((_DWORD)ObjectID)
  {
LABEL_12:
    v6 = ObjectID;
    goto LABEL_9;
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5 || (v5 = FigXPCMessageSetCFString(), (_DWORD)v5) || (v5 = FigXPCMessageSetCFArray(), (_DWORD)v5))
    v6 = v5;
  else
    v6 = FigXPCRemoteClientSendSyncMessage();
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t FigDataQueueGetClassID()
{
  MEMORY[0x19402F294](&FigDataQueueGetClassID_sRegisterFigDataQueueTypeOnce, RegisterFigDataQueueType);
  return sFigDataQueueClassID;
}

uint64_t RegisterFigDataQueueType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigDataQueueGetTypeID()
{
  MEMORY[0x19402F294](&FigDataQueueGetClassID_sRegisterFigDataQueueTypeOnce, RegisterFigDataQueueType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigDataQueueCreate(const __CFAllocator *a1, uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  CFMutableArrayRef Mutable;
  NSObject *TargetingWorkloopWithPriority;
  dispatch_source_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  CMTime v21;
  CMTime time1;
  CFTypeRef cf;

  cf = 0;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a5)
    goto LABEL_13;
  MEMORY[0x19402F294](&FigDataQueueGetClassID_sRegisterFigDataQueueTypeOnce, RegisterFigDataQueueType);
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
LABEL_14:
    v19 = v9;
    goto LABEL_15;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = FigReentrantMutexCreate();
  *(_QWORD *)DerivedStorage = v11;
  if (!v11)
    goto LABEL_13;
  if ((a4->flags & 0x1D) == 1 && (a3->flags & 0x1D) == 1)
  {
    time1 = *a4;
    v21 = *a3;
    if (CMTimeCompare(&time1, &v21) >= 1)
      goto LABEL_13;
  }
  v12 = *(_OWORD *)&a4->value;
  *(_QWORD *)(DerivedStorage + 56) = a4->epoch;
  *(_OWORD *)(DerivedStorage + 40) = v12;
  v13 = *(_OWORD *)&a3->value;
  *(_QWORD *)(DerivedStorage + 80) = a3->epoch;
  *(_OWORD *)(DerivedStorage + 64) = v13;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 8) = Mutable;
  if (!Mutable
    || (TargetingWorkloopWithPriority = FigDispatchQueueCreateTargetingWorkloopWithPriority(),
        (*(_QWORD *)(DerivedStorage + 144) = TargetingWorkloopWithPriority) == 0)
    || (v16 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, TargetingWorkloopWithPriority),
        (*(_QWORD *)(DerivedStorage + 136) = v16) == 0))
  {
LABEL_13:
    v9 = FigSignalErrorAt();
    goto LABEL_14;
  }
  v17 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (v17)
  {
    dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 136), v17);
    v18 = CMBaseObjectGetDerivedStorage();
    dispatch_source_set_timer(*(dispatch_source_t *)(v18 + 136), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 136), (dispatch_function_t)dq_PruneTimerFired);
    dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 136), (dispatch_function_t)FigCFRelease_7);
    dispatch_activate(*(dispatch_object_t *)(DerivedStorage + 136));
    v19 = 0;
    *a5 = cf;
    return v19;
  }
  v19 = 4294951505;
LABEL_15:
  if (cf)
    CFRelease(cf);
  return v19;
}

void dq_PruneTimerFired()
{
  uint64_t v0;
  const void *v1;
  _QWORD *DerivedStorage;

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*DerivedStorage);
    dq_Prune(v1);
    MEMORY[0x19402EA24](*DerivedStorage);
    CFRelease(v1);
  }
}

void FigCFRelease_7(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

CFStringRef FigDataQueueCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigDataQueue %p]"), a1);
}

uint64_t dq_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  v4 = (const void *)DerivedStorage[16];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[16] = 0;
  }
  v5 = DerivedStorage[14];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[14] = 0;
  }
  v6 = (const void *)DerivedStorage[13];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[13] = 0;
  }
  v7 = DerivedStorage[17];
  if (v7)
  {
    dispatch_source_cancel(v7);
    v8 = DerivedStorage[17];
    if (v8)
    {
      dispatch_release(v8);
      DerivedStorage[17] = 0;
    }
  }
  v9 = DerivedStorage[18];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[18] = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *dq_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;
  OpaqueCMTimebase *v4;
  Float64 Seconds;
  CMTime time;
  CMTime v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  MEMORY[0x19402EA0C](*DerivedStorage);
  memset(&v8, 0, sizeof(v8));
  v4 = (OpaqueCMTimebase *)DerivedStorage[2];
  if (v4)
    CMTimebaseGetTime(&v8, v4);
  else
    v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  time = v8;
  Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigDataQueue %p>: currentMediaTime:%.3f, generationCount:%llu"), a1, *(_QWORD *)&Seconds, DerivedStorage[3]);
  MEMORY[0x19402EA24](*DerivedStorage);
  return Mutable;
}

uint64_t dq_CopyProperty(const void *a1, uint64_t a2, const __CFAllocator *a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v9;
  uint64_t v10;
  const void *v11;
  CFTypeRef v12;
  const __CFArray *v13;
  CFIndex Count;
  CFDictionaryRef v15;
  CFDictionaryRef v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  CFMutableArrayRef Mutable;
  __CFArray *v23;
  CFIndex i;
  __CFDictionary *v25;
  const void **ValueAtIndex;
  __CFDictionary *v27;
  CFIndex v28;
  CFTypeRef cf;
  CFRange v31;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v9 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (!FigCFEqual())
    {
      if (FigCFEqual())
      {
        v13 = (const __CFArray *)v9[1];
        if (v13)
          Count = (int)CFArrayGetCount(v13);
        else
          Count = 0;
        v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
        if (Mutable)
        {
          v23 = Mutable;
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              v25 = CFDictionaryCreateMutable(v21, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              ValueAtIndex = (const void **)CFArrayGetValueAtIndex((CFArrayRef)v9[1], i);
              CFDictionarySetValue(v25, CFSTR("SampleBuffer"), ValueAtIndex[2]);
              FigCFDictionarySetInt32();
              FigCFDictionarySetInt64();
              CFArrayAppendValue(v23, v25);
              if (v25)
                CFRelease(v25);
            }
          }
          if (v9[4])
          {
            v27 = CFDictionaryCreateMutable(v21, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFDictionarySetValue(v27, CFSTR("SampleBuffer"), *(const void **)(v9[4] + 16));
            FigCFDictionarySetInt32();
            FigCFDictionarySetInt64();
            v31.length = CFArrayGetCount(v23);
            v31.location = 0;
            v28 = CFArrayBSearchValues(v23, v31, v27, (CFComparatorFunction)FigDataQueueDumpQueue_comparatorEntryPTS, 0);
            if (v28 > CFArrayGetCount(v23))
              v28 = CFArrayGetCount(v23);
            CFArrayInsertValueAtIndex(v23, v28, v27);
          }
          v20 = 0;
          *a4 = v23;
        }
        else
        {
          v20 = FigSignalErrorAt();
        }
      }
      else
      {
        v20 = 0;
        if (FigCFEqual())
          *a4 = dq_CopyDebugDescription((uint64_t)a1);
      }
      goto LABEL_32;
    }
    v10 = CMBaseObjectGetDerivedStorage();
    v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    cf = v11;
    if (v11)
    {
      v12 = v11;
LABEL_17:
      v20 = 0;
      *a4 = v12;
LABEL_32:
      MEMORY[0x19402EA24](*v9);
      return v20;
    }
    v15 = CFDictionaryCreate(a3, (const void **)&kFigSampleBufferConsumerForDataQueueOption_ConsumeAsynchronously, MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v15)
    {
      v20 = FigSignalErrorAt();
      v12 = 0;
      if ((_DWORD)v20)
        goto LABEL_32;
      goto LABEL_17;
    }
    v16 = v15;
    v17 = FigSampleBufferConsumerForDataQueueCreate(a1, (uint64_t)a3, (uint64_t)v15, &cf);
    if (!(_DWORD)v17)
    {
      v18 = *(const void **)(v10 + 128);
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(v10 + 128) = 0;
      }
      v19 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)(v10 + 128) = v19;
      if (v19)
      {
        v20 = 0;
        v12 = cf;
        cf = 0;
        goto LABEL_14;
      }
      v17 = FigSignalErrorAt();
    }
    v20 = v17;
    v12 = 0;
LABEL_14:
    CFRelease(v16);
    if (cf)
      CFRelease(cf);
    if ((_DWORD)v20)
      goto LABEL_32;
    goto LABEL_17;
  }
  return FigSignalErrorAt();
}

uint64_t dq_SetProperty(const void *a1, uint64_t a2, void *a3)
{
  CFTypeID TypeID;
  _QWORD *DerivedStorage;
  const void *v7;
  uint64_t v9;

  if (!a2)
    return FigSignalErrorAt();
  if (!FigCFEqual())
    return 4294954509;
  if (a3)
  {
    TypeID = CMTimebaseGetTypeID();
    if (TypeID != CFGetTypeID(a3))
      return FigSignalErrorAt();
  }
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (DerivedStorage[2])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v7 = (const void *)DerivedStorage[2];
  }
  else
  {
    v7 = 0;
  }
  DerivedStorage[2] = a3;
  if (a3)
    CFRetain(a3);
  if (v7)
    CFRelease(v7);
  if (a3
    && (CMNotificationCenterGetDefaultLocalCenter(),
        FigNotificationCenterAddWeakListener(),
        CMTimebaseGetRate((CMTimebaseRef)a3) != 0.0))
  {
    dq_Prune(a1);
  }
  else
  {
    v9 = CMBaseObjectGetDerivedStorage();
    dispatch_source_set_timer(*(dispatch_source_t *)(v9 + 136), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return 0;
}

uint64_t FigDataQueueDumpQueue_comparatorEntryPTS(const __CFDictionary *a1, const __CFDictionary *a2)
{
  opaqueCMSampleBuffer *Value;
  opaqueCMSampleBuffer *v4;
  CMTime v6;
  CMTime time1;
  CMTime v8;
  CMTime v9;

  Value = (opaqueCMSampleBuffer *)CFDictionaryGetValue(a1, CFSTR("SampleBuffer"));
  v4 = (opaqueCMSampleBuffer *)CFDictionaryGetValue(a2, CFSTR("SampleBuffer"));
  memset(&v9, 0, sizeof(v9));
  if (Value)
    CMSampleBufferGetOutputPresentationTimeStamp(&v9, Value);
  else
    v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  memset(&v8, 0, sizeof(v8));
  if (v4)
    CMSampleBufferGetOutputPresentationTimeStamp(&v8, v4);
  else
    v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  time1 = v9;
  v6 = v8;
  return CMTimeCompare(&time1, &v6);
}

void dq_TimebaseRateChangedCallback(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 16)) == 0.0)
  {
    v4 = CMBaseObjectGetDerivedStorage();
    dispatch_source_set_timer(*(dispatch_source_t *)(v4 + 136), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
  else
  {
    dq_Prune(a2);
  }
  JUMPOUT(0x19402EA24);
}

void dq_Prune(const void *a1)
{
  uint64_t DerivedStorage;
  __CFArray *ArrayRemovingStaleFrames;
  __CFArray *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  dispatch_time_t v8;
  CMTime v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ArrayRemovingStaleFrames = dq_CreateArrayRemovingStaleFrames(a1, 1);
  v4 = ArrayRemovingStaleFrames;
  v5 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = ArrayRemovingStaleFrames;
  if (ArrayRemovingStaleFrames)
    CFRetain(ArrayRemovingStaleFrames);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  dq_EvaluateAndFireLWMTriggerCallback(a1);
  v6 = CMBaseObjectGetDerivedStorage();
  v9 = *(CMTime *)(v6 + 40);
  v7 = (uint64_t)(CMTimeGetSeconds(&v9) * 500000000.0);
  v8 = dispatch_time(0, v7);
  dispatch_source_set_timer(*(dispatch_source_t *)(v6 + 136), v8, v7, 0);
}

__CFArray *dq_CreateArrayRemovingStaleFrames(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v5;
  CFIndex Count;
  const __CFAllocator *v7;
  __CFArray *Mutable;
  OpaqueCMTimebase *v9;
  float Rate;
  CFIndex i;
  CMSampleBufferRef *ValueAtIndex;
  CMTime v14;
  CMTime lhs;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(const __CFArray **)(DerivedStorage + 8);
  if (v5)
    Count = CFArrayGetCount(v5);
  else
    Count = 0;
  v19 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  memset(&v18, 0, sizeof(v18));
  if (a2)
    CMTimeMake(&v18, 50, 1000);
  else
    v18 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v7 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v9 = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    if (v9)
    {
      Rate = CMTimebaseGetRate(v9);
      CMTimebaseGetTime(&v19, *(CMTimebaseRef *)(DerivedStorage + 16));
    }
    else
    {
      Rate = 0.0;
    }
    if (Count >= 1)
    {
      for (i = 0; Count != i; ++i)
      {
        ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 8), i);
        memset(&v17, 0, sizeof(v17));
        CMSampleBufferGetOutputPresentationTimeStamp(&v17, ValueAtIndex[2]);
        if (*((_DWORD *)ValueAtIndex + 8) == 2 || *(CMSampleBufferRef *)(DerivedStorage + 24) != ValueAtIndex[3])
          continue;
        if (Rate <= 0.0)
        {
          if (Rate < 0.0)
          {
            memset(&v16, 0, sizeof(v16));
            lhs = v19;
            v14 = v18;
            CMTimeAdd(&v16, &lhs, &v14);
            lhs = v17;
            v14 = v16;
            if ((CMTimeCompare(&lhs, &v14) & 0x80000000) == 0)
              continue;
          }
        }
        else
        {
          memset(&v16, 0, sizeof(v16));
          lhs = v19;
          v14 = v18;
          CMTimeSubtract(&v16, &lhs, &v14);
          lhs = v17;
          v14 = v16;
          if (CMTimeCompare(&lhs, &v14) < 1)
            continue;
        }
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  return Mutable;
}

void dq_EvaluateAndFireLWMTriggerCallback(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  CFTypeRef v7;
  void (*v8)(_QWORD);
  CFTypeRef v9;
  void (*v10)(_QWORD);
  _QWORD block[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 96))
  {
    v3 = DerivedStorage;
    v4 = CMBaseObjectGetDerivedStorage();
    v5 = *(_DWORD *)(v4 + 88);
    dq_UpdateWaterLevelState(a1);
    if (*(_DWORD *)(v4 + 88) == 2 && (!*(_BYTE *)(v4 + 120) || v5 != 2))
    {
      *(_BYTE *)(v3 + 120) = 1;
      v7 = *(CFTypeRef *)(v3 + 104);
      v6 = *(NSObject **)(v3 + 112);
      v8 = *(void (**)(_QWORD))(v3 + 96);
      if (v6)
      {
        if (v7)
        {
          v10 = *(void (**)(_QWORD))(v3 + 96);
          v9 = CFRetain(*(CFTypeRef *)(v3 + 104));
          v8 = v10;
          v7 = v9;
          v6 = *(NSObject **)(v3 + 112);
        }
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = __dq_EvaluateAndFireLWMTriggerCallback_block_invoke;
        block[3] = &__block_descriptor_tmp_105;
        block[4] = v8;
        block[5] = v7;
        dispatch_async(v6, block);
      }
      else
      {
        v8(*(_QWORD *)(v3 + 104));
      }
    }
  }
}

void dq_UpdateWaterLevelState(const void *a1)
{
  uint64_t DerivedStorage;
  __CFArray *ArrayRemovingStaleFrames;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CMSampleBufferRef *ValueAtIndex;
  CMSampleBufferRef *v8;
  int v9;
  int v10;
  int v11;
  int32_t v12;
  int v13;
  CMTime v14;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v19;
  CMTime v20;
  CMTime v21;

  v21 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ArrayRemovingStaleFrames = dq_CreateArrayRemovingStaleFrames(a1, 0);
  v4 = ArrayRemovingStaleFrames;
  if (ArrayRemovingStaleFrames)
  {
    Count = CFArrayGetCount(ArrayRemovingStaleFrames);
    if (Count)
    {
      v6 = Count;
      ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex(v4, 0);
      memset(&v20, 0, sizeof(v20));
      CMSampleBufferGetOutputPresentationTimeStamp(&v20, ValueAtIndex[2]);
      CMSampleBufferGetOutputDuration(&v21, ValueAtIndex[2]);
      v8 = (CMSampleBufferRef *)CFArrayGetValueAtIndex(v4, v6 - 1);
      memset(&v19, 0, sizeof(v19));
      CMSampleBufferGetOutputPresentationTimeStamp(&lhs, v8[2]);
      CMSampleBufferGetOutputDuration(&rhs, v8[2]);
      CMTimeAdd(&v19, &lhs, &rhs);
      time2 = v19;
      v14 = v20;
      CMTimeSubtract(&time1, &time2, &v14);
      v21 = time1;
    }
  }
  v9 = *(_DWORD *)(DerivedStorage + 52) & 0x1D;
  v10 = *(_DWORD *)(DerivedStorage + 76);
  v11 = *(_DWORD *)(DerivedStorage + 88);
  if (v9 == 1)
  {
    time1 = v21;
    time2 = *(CMTime *)(DerivedStorage + 40);
    if (CMTimeCompare(&time1, &time2) <= 0)
    {
      *(_DWORD *)(DerivedStorage + 88) = 2;
      if (!v4)
        return;
      goto LABEL_16;
    }
  }
  if ((v10 & 0x1D) != 1
    || ((time1 = v21, time2 = *(CMTime *)(DerivedStorage + 64), v12 = CMTimeCompare(&time1, &time2), v12 < 0)
      ? (v13 = 1)
      : (v13 = 3),
        v12 < 0 && v9 != 1))
  {
    v13 = 0;
  }
  *(_DWORD *)(DerivedStorage + 88) = v13;
  if (v11 == 2)
    *(_BYTE *)(DerivedStorage + 120) = 0;
  if (v4)
LABEL_16:
    CFRelease(v4);
}

CMBlockBufferRef dq_EnqueueSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v5;
  CMBlockBufferRef result;
  uint64_t v7;
  _QWORD *Instance;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t v14;
  CMTime timeOut;
  CMTime time;
  CFRange v17;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return (CMBlockBufferRef)4294951506;
  v5 = (_QWORD *)DerivedStorage;
  result = CMSampleBufferGetDataBuffer(a2);
  if (result)
  {
    MEMORY[0x19402EA0C](*v5);
    v7 = v5[3];
    if (FigDataQueueBufferInfo_GetTypeID_sRegisterFigDataQueueBufferInfoTypeOnce != -1)
      dispatch_once(&FigDataQueueBufferInfo_GetTypeID_sRegisterFigDataQueueBufferInfoTypeOnce, &__block_literal_global_85);
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    Instance[2] = CFRetain(a2);
    Instance[3] = v7;
    v9 = (const __CFArray *)v5[1];
    if (v9)
    {
      Count = CFArrayGetCount(v9);
      v9 = (const __CFArray *)v5[1];
    }
    else
    {
      Count = 0;
    }
    v17.location = 0;
    v17.length = Count;
    v11 = CFArrayBSearchValues(v9, v17, Instance, (CFComparatorFunction)FigDataQueueBufferInfo_compareOutputPTS, 0);
    v12 = v11;
    if (v11 >= Count)
      v13 = Count;
    else
      v13 = v11;
    CFArrayInsertValueAtIndex((CFMutableArrayRef)v5[1], v13, Instance);
    if (Count > v12)
    {
      CFArrayGetValueAtIndex((CFArrayRef)v5[1], v13 + 1);
      if (FigCFEqual())
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)v5[1], v13 + 1);
    }
    dq_Prune(a1);
    v14 = 0;
    memset(&timeOut, 0, sizeof(timeOut));
    CMTimebaseGetTimeAndRate((CMTimebaseRef)v5[2], &timeOut, (Float64 *)&v14);
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      time = timeOut;
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
    CFRelease(Instance);
    MEMORY[0x19402EA24](*v5);
    return 0;
  }
  return result;
}

uint64_t dq_GetWaterLevelState(const void *a1)
{
  _QWORD *DerivedStorage;
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  dq_UpdateWaterLevelState(a1);
  v3 = *((unsigned int *)DerivedStorage + 22);
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

uint64_t dq_InstallLowWaterTrigger(const void *a1, uint64_t a2, const void *a3, NSObject *a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v9;
  CFTypeRef v10;
  uint64_t v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (v9[12] || (*((_DWORD *)v9 + 13) & 0x1D) != 1)
  {
    v11 = FigSignalErrorAt();
  }
  else
  {
    v9[12] = a2;
    if (a3)
      v10 = CFRetain(a3);
    else
      v10 = 0;
    v9[13] = v10;
    if (a4)
      dispatch_retain(a4);
    v9[14] = a4;
    dq_EvaluateAndFireLWMTriggerCallback(a1);
    v11 = 0;
  }
  MEMORY[0x19402EA24](*v9);
  return v11;
}

uint64_t dq_RemoveLowWaterTrigger()
{
  _QWORD *DerivedStorage;
  const void *v1;
  NSObject *v2;
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (DerivedStorage[12])
  {
    DerivedStorage[12] = 0;
    v1 = (const void *)DerivedStorage[13];
    if (v1)
    {
      CFRelease(v1);
      DerivedStorage[13] = 0;
    }
    v2 = DerivedStorage[14];
    if (v2)
    {
      dispatch_release(v2);
      v3 = 0;
      DerivedStorage[14] = 0;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

uint64_t dq_Flush(const void *a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  uint64_t v4;
  opaqueCMSampleBuffer *v5;
  const __CFAllocator *v6;
  Float64 Seconds;
  void *v8;
  const void *v9;
  CMTime time;
  CMTime v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  ++DerivedStorage[3];
  dq_Prune(a1);
  v3 = (const void *)FigCFCopyCompactDescription();
  v4 = DerivedStorage[4];
  if (v4 && (v5 = *(opaqueCMSampleBuffer **)(v4 + 16)) != 0)
  {
    memset(&v12, 0, sizeof(v12));
    CMSampleBufferGetOutputPresentationTimeStamp(&v12, v5);
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    time = v12;
    Seconds = CMTimeGetSeconds(&time);
    v8 = (void *)CFStringCreateWithFormat(v6, 0, CFSTR("lastSampledBuffer->pts: %1.3f"), *(_QWORD *)&Seconds);
  }
  else
  {
    v8 = (void *)CFRetain(CFSTR("lastSampledBuffer: NULL"));
  }
  v9 = v8;
  MEMORY[0x19402EA24](*DerivedStorage);
  if (v3)
    CFRelease(v3);
  if (v9)
    CFRelease(v9);
  return 0;
}

uint64_t dq_CopySampleBufferForTime(const void *a1, CMTime *a2, uint64_t a3, CMSampleBufferRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  _QWORD *v9;
  CMClockRef HostTimeClock;
  const void *v11;
  OpaqueCMTimebase *v12;
  float Rate;
  CMSampleBufferRef *v14;
  CFIndex i;
  const __CFArray *Count;
  CMSampleBufferRef *ValueAtIndex;
  CMSampleBufferRef v18;
  const void *v19;
  CFIndex j;
  const __CFArray *v21;
  CMSampleBufferRef *v22;
  uint64_t v23;
  CMSampleBufferRef v24;
  const void *v25;
  CMTimeRange time;
  CMTime rhs;
  CMTime duration;
  CMTime start;
  CMTimeRange v31;
  CMTime v32;
  CMTime v33;
  CMTime time2;
  CMTime time1;
  __int16 v36;
  CMTime v37;
  CMTime v38;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v38 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v37 = v38;
  v36 = 0;
  v8 = 4294951506;
  if (!a4 || (a2->flags & 1) == 0)
    return v8;
  v9 = (_QWORD *)DerivedStorage;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  MEMORY[0x19402EA0C](*v9);
  if (v9[2])
  {
    HostTimeClock = CMClockGetHostTimeClock();
    v11 = (const void *)v9[2];
    *(_OWORD *)&time.start.value = *(_OWORD *)&a2->value;
    time.start.epoch = a2->epoch;
    CMSyncConvertTime(&v38, &time.start, HostTimeClock, v11);
    v12 = (OpaqueCMTimebase *)v9[2];
    if (v12)
    {
      Rate = CMTimebaseGetRate(v12);
      goto LABEL_8;
    }
  }
  else
  {
    v38 = *a2;
  }
  Rate = 0.0;
LABEL_8:
  v14 = 0;
  for (i = 0; ; ++i)
  {
    Count = (const __CFArray *)v9[1];
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = (CMSampleBufferRef *)CFArrayGetValueAtIndex((CFArrayRef)v9[1], i);
    memset(&time, 0, 24);
    CMSampleBufferGetOutputPresentationTimeStamp(&time.start, ValueAtIndex[2]);
    if ((CMSampleBufferRef)v9[3] == ValueAtIndex[3])
    {
      if (Rate >= 0.0)
      {
        time1 = v38;
        time2 = time.start;
        if (CMTimeCompare(&time1, &time2) >= 0)
          v14 = ValueAtIndex;
      }
      else
      {
        time1 = v38;
        time2 = time.start;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          v14 = ValueAtIndex;
          break;
        }
      }
    }
  }
  if (HIBYTE(v36))
  {
    if (v14)
    {
      v18 = v14[2];
      if (!v18)
      {
LABEL_23:
        v8 = 0;
        *a4 = v18;
        goto LABEL_51;
      }
    }
    else
    {
      v23 = v9[4];
      if (!v23)
        goto LABEL_50;
      v18 = *(CMSampleBufferRef *)(v23 + 16);
      if (!v18)
        goto LABEL_23;
    }
    v18 = (CMSampleBufferRef)CFRetain(v18);
    goto LABEL_23;
  }
  v19 = (const void *)v9[4];
  if (v14)
  {
    v9[4] = v14;
    CFRetain(v14);
    if (v19)
      CFRelease(v19);
    CMSampleBufferGetOutputPresentationTimeStamp(&v37, v14[2]);
    for (j = 0; ; ++j)
    {
      v21 = (const __CFArray *)v9[1];
      if (v21)
        v21 = (const __CFArray *)CFArrayGetCount(v21);
      if (j >= (uint64_t)v21)
      {
        if (v9[4])
          goto LABEL_42;
LABEL_50:
        v8 = 4294951503;
        goto LABEL_51;
      }
      v22 = (CMSampleBufferRef *)CFArrayGetValueAtIndex((CFArrayRef)v9[1], j);
      memset(&time, 0, 24);
      CMSampleBufferGetOutputPresentationTimeStamp(&time.start, v22[2]);
      if (Rate <= 0.0)
      {
        if (Rate < 0.0)
        {
          time1 = v37;
          time2 = time.start;
          if (CMTimeCompare(&time1, &time2) <= 0)
          {
LABEL_36:
            *((_DWORD *)v22 + 8) = 2;
            continue;
          }
        }
      }
      else
      {
        time1 = v37;
        time2 = time.start;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
          goto LABEL_36;
      }
    }
  }
  v14 = (CMSampleBufferRef *)v9[4];
  if (!v19)
    goto LABEL_50;
LABEL_42:
  *((_DWORD *)v14 + 8) = 1;
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    *(_OWORD *)&time.start.value = *(_OWORD *)&a2->value;
    time.start.epoch = a2->epoch;
    CMTimeGetSeconds(&time.start);
    time.start = v37;
    CMTimeGetSeconds(&time.start);
    kdebug_trace();
  }
  v24 = v14[2];
  if (v24)
    v24 = (CMSampleBufferRef)CFRetain(v24);
  *a4 = v24;
  memset(&v33, 0, sizeof(v33));
  CMSampleBufferGetOutputPresentationTimeStamp(&v33, v14[2]);
  memset(&v32, 0, sizeof(v32));
  CMSampleBufferGetOutputDuration(&v32, v14[2]);
  memset(&v31, 0, sizeof(v31));
  time.start = v33;
  *(_OWORD *)&time1.value = kDefaultNonAlignedSBuf;
  time1.epoch = 0;
  CMTimeSubtract(&start, &time.start, &time1);
  *(_OWORD *)&time.start.value = kDefaultNonAlignedSBuf;
  time.start.epoch = 0;
  CMTimeMultiply(&rhs, &time.start, 2);
  time.start = v32;
  CMTimeAdd(&duration, &time.start, &rhs);
  CMTimeRangeMake(&v31, &start, &duration);
  time = v31;
  time1 = v38;
  if (!CMTimeRangeContainsTime(&time, &time1))
  {
    v25 = (const void *)FigCFCopyCompactDescription();
    CFRelease(v25);
  }
  dq_EvaluateAndFireLWMTriggerCallback(a1);
  v8 = 0;
LABEL_51:
  MEMORY[0x19402EA24](*v9);
  return v8;
}

uint64_t FigDataQueueBufferInfo_compareOutputPTS(uint64_t a1, uint64_t a2)
{
  opaqueCMSampleBuffer *v2;
  opaqueCMSampleBuffer *v3;
  CMTime v5;
  CMTime time1;
  CMTime v7;
  CMTime v8;

  v2 = *(opaqueCMSampleBuffer **)(a1 + 16);
  v3 = *(opaqueCMSampleBuffer **)(a2 + 16);
  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetOutputPresentationTimeStamp(&v8, v2);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputPresentationTimeStamp(&v7, v3);
  time1 = v8;
  v5 = v7;
  return CMTimeCompare(&time1, &v5);
}

_QWORD *FigDataQueueBufferInfo_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void FigDataQueueBufferInfo_Finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t FigDataQueueBufferInfo_Equal(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigCFEqual();
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return result;
}

CFHashCode FigDataQueueBufferInfo_Hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

CFStringRef FigDataQueueBufferInfo_CopyDebugDesc(uint64_t a1)
{
  opaqueCMSampleBuffer *v2;
  uint64_t v3;
  const char *v4;
  const __CFAllocator *v6;
  Float64 Seconds;
  CMTime time;
  CMTime v9;

  if (!a1)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[BufferInfo %p]"), 0);
  v2 = *(opaqueCMSampleBuffer **)(a1 + 16);
  memset(&v9, 0, sizeof(v9));
  CMSampleBufferGetOutputPresentationTimeStamp(&v9, v2);
  v3 = *(int *)(a1 + 32);
  if (v3 > 2)
    v4 = "Unknown";
  else
    v4 = off_1E2FAE408[v3];
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  time = v9;
  Seconds = CMTimeGetSeconds(&time);
  return CFStringCreateWithFormat(v6, 0, CFSTR("[%p] sbuf:%p pts:%.5f gen=%llu state=%s "), a1, v2, *(_QWORD *)&Seconds, *(_QWORD *)(a1 + 24), v4);
}

uint64_t FigVirtualDisplaySourceScreenCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if (FigVirtualFramebufferServerLivesInMediaProcess())
    return FigVirtualFramebufferServerSourceScreenCreateIOS(a1, a2, a3);
  else
    return FigVirtualFramebufferClientSourceScreenCreateIOS(a1, a2, a3);
}

uint64_t FigVirtualDisplaySourceScreenGetCurrent()
{
  return 0;
}

uint64_t FigHLSPersistentStoreGetClassID()
{
  MEMORY[0x19402F294](&FigHLSPersistentStoreGetClassID_sRegisterFigPersistentStoreBaseTypeOnce, RegisterFigHLSPersistentStoreBaseType);
  return sFigPersistentStoreClassID;
}

uint64_t RegisterFigHLSPersistentStoreBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigHLSPersistentStoreGetTypeID()
{
  MEMORY[0x19402F294](&FigHLSPersistentStoreGetClassID_sRegisterFigPersistentStoreBaseTypeOnce, RegisterFigHLSPersistentStoreBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigHLSPersistentStoreCreateAtURL(const void *a1, uint64_t a2, const __CFDictionary *a3, int a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  const void *Value;
  const __CFData *v12;
  const __CFData *v13;
  __int128 v14;
  const void *v15;
  CFTypeRef v16;
  const __CFAllocator *AllocatorForMedia;
  const CFDictionaryKeyCallBacks *v18;
  const CFDictionaryValueCallBacks *v19;
  const __CFAllocator *v20;
  const __CFAllocator *v21;
  const __CFAllocator *v22;
  const __CFURL **v23;
  const __CFAllocator *v24;
  const CFDictionaryKeyCallBacks *v25;
  const CFDictionaryValueCallBacks *v26;
  const __CFAllocator *v27;
  CFMutableDictionaryRef Mutable;
  const __CFURL *v29;
  const __CFAllocator *v30;
  CFURLRef v31;
  CFURLRef v32;
  const __CFAllocator *v33;
  CFURLRef v34;
  CFURLRef v35;
  _BOOL4 v36;
  char v37;
  const __CFURL *v38;
  const __CFAllocator *v39;
  CFStringRef v40;
  CFStringRef v41;
  uint64_t TempDirectory;
  int v43;
  const __CFAllocator *v44;
  CFURLRef v45;
  uint64_t BlockBufferWithCFString;
  const __CFAllocator *v47;
  const __CFURL *v48;
  uint64_t BootFromFile;
  uint64_t v50;
  const __CFAllocator *v51;
  CFURLRef v52;
  CFURLRef v53;
  const __CFAllocator *v54;
  uint64_t v55;
  uint64_t v56;
  const __CFAllocator *v57;
  CFURLRef v58;
  CFURLRef v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  CFStringRef *Child;
  uint64_t v66;
  int v67;
  CFStringRef *v68;
  const void *ContentAsCFString;
  CFTypeRef v70;
  UInt8 buffer[16];
  __int128 v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFURLRef url;
  OpaqueCMBlockBuffer *v77;
  CFRange v78;

  if (!a2 || !a5 || FigCFURLIsLocalResource() != 1)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigHLSPersistentStoreGetClassID_sRegisterFigPersistentStoreBaseTypeOnce, RegisterFigHLSPersistentStoreBaseType);
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
    return v9;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("HLSStoreClientAuditToken"));
    if (Value)
    {
      v12 = (const __CFData *)CFRetain(Value);
      *(_QWORD *)(DerivedStorage + 144) = v12;
      if (v12)
      {
        *(_OWORD *)buffer = 0u;
        v73 = 0u;
        if (CFDataGetLength(v12) != 32
          || (v13 = *(const __CFData **)(DerivedStorage + 144),
              v78.length = CFDataGetLength(v13),
              v78.location = 0,
              CFDataGetBytes(v13, v78, buffer),
              v14 = v73,
              *(_OWORD *)(DerivedStorage + 160) = *(_OWORD *)buffer,
              *(_OWORD *)(DerivedStorage + 176) = v14,
              FigServer_GetClientPIDFromAuditToken())
          && FigServer_IsWritableFileOpeningOrCreationPermittedForAuditToken() != 1)
        {
          BootFromFile = FigSignalErrorAt();
          if ((_DWORD)BootFromFile)
            return BootFromFile;
          goto LABEL_16;
        }
      }
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    v15 = CFDictionaryGetValue(a3, CFSTR("HLSStoreClientBundleIdentifier"));
    if (v15)
      v15 = CFRetain(v15);
    *(_QWORD *)(DerivedStorage + 152) = v15;
  }
LABEL_16:
  if (a1)
    v16 = CFRetain(a1);
  else
    v16 = 0;
  *(_QWORD *)(DerivedStorage + 104) = v16;
  *(_QWORD *)(DerivedStorage + 128) = 0;
  *(_QWORD *)(DerivedStorage + 120) = FigReadWriteLockCreate();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v18 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  *(_QWORD *)(DerivedStorage + 88) = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_QWORD *)(DerivedStorage + 56) = CFDictionaryCreateMutable(v20, 0, v18, v19);
  v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_QWORD *)(DerivedStorage + 208) = CFDictionaryCreateMutable(v21, 0, v18, v19);
  v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
  *(_QWORD *)(DerivedStorage + 216) = CFDictionaryCreateMutable(v22, 0, v18, v19);
  *(_BYTE *)(DerivedStorage + 136) = 0;
  FigCFDictionaryGetBooleanIfPresent();
  *(_BYTE *)(DerivedStorage + 136) = 0;
  if (!*(_QWORD *)(DerivedStorage + 56))
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 112) = a4 == 1;
  v23 = (const __CFURL **)(DerivedStorage + 8);
  v9 = FigFileConvertURLToAbsoluteAndMarkAsDirectory();
  if ((_DWORD)v9)
    return v9;
  v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v25 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v26 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  *(_QWORD *)(DerivedStorage + 96) = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v27 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v27, 0, v25, v26);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 96), CFSTR("Default"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  v29 = *v23;
  if (!FigCFURLDoesDirectoryExist())
    goto LABEL_37;
  v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v31 = CFURLCreateCopyAppendingPathComponent(v30, v29, CFSTR("root.xml"), 0);
  if (!v31)
  {
    FigSignalErrorAt();
    goto LABEL_37;
  }
  v32 = v31;
  v33 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v34 = CFURLCreateCopyAppendingPathComponent(v33, v29, CFSTR("boot.xml"), 0);
  if (!v34)
  {
    FigSignalErrorAt();
    CFRelease(v32);
    goto LABEL_37;
  }
  v35 = v34;
  v36 = FigFileDoesFileExist() && FigFileDoesFileExist() != 0;
  CFRelease(v32);
  CFRelease(v35);
  if (!v36)
  {
LABEL_37:
    if (*(_BYTE *)(DerivedStorage + 112))
    {
      v38 = *v23;
      v75 = 0;
      url = 0;
      v74 = 0;
      v39 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v40 = CFStringCreateWithCString(v39, "MoviePackage", 0x8000100u);
      if (!v40)
      {
        BootFromFile = FigSignalErrorAt();
        v48 = 0;
        v45 = 0;
        goto LABEL_76;
      }
      v41 = v40;
      TempDirectory = FigFileCreateTempDirectory();
      if (!(_DWORD)TempDirectory)
      {
        v43 = FigDirectoryEnableDirStatsTracking();
        if (v43 != -17916 && v43)
        {
          TempDirectory = FigSignalErrorAt();
        }
        else
        {
          FigGetAllocatorForMedia();
          TempDirectory = FigCreateBlockBufferWithCFString();
          if (!(_DWORD)TempDirectory)
          {
            v44 = (const __CFAllocator *)FigGetAllocatorForMedia();
            v45 = CFURLCreateCopyAppendingPathComponent(v44, url, CFSTR("root.xml"), 0);
            if (!v45
              || FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)v75, 0x1E2FEB7B8, v45))
            {
              BlockBufferWithCFString = FigSignalErrorAt();
            }
            else
            {
              FigGetAllocatorForMedia();
              BlockBufferWithCFString = FigCreateBlockBufferWithCFString();
              if (!(_DWORD)BlockBufferWithCFString)
              {
                v47 = (const __CFAllocator *)FigGetAllocatorForMedia();
                v48 = CFURLCreateCopyAppendingPathComponent(v47, url, CFSTR("boot.xml"), 0);
                if (!v48
                  || FigXMLNodeWriteXMLFileFromBlockBufferAtURL((OpaqueCMBlockBuffer *)v74, 0x1E2FEB7B8, v48))
                {
                  BootFromFile = FigSignalErrorAt();
                }
                else
                {
                  BootFromFile = FigFileRename();
                  if (*__error() == 18)
                  {
                    *(_QWORD *)buffer = 0;
                    v77 = 0;
                    if (!FigCFURLDoesDirectoryExist())
                      makeDirectoryAtURL();
                    if (FigCFURLDoesDirectoryExist())
                    {
                      v50 = FigFileForkOpenMainByCFURL();
                      if ((_DWORD)v50 || (v50 = FigFileLock(), (_DWORD)v50))
                      {
                        BootFromFile = v50;
                        v52 = 0;
                        goto LABEL_57;
                      }
                      v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      v52 = CFURLCreateCopyAppendingPathComponent(v51, v38, CFSTR("root.xml"), 0);
                      if (v52)
                      {
                        if (FigFileDoesFileExist())
                        {
                          BootFromFile = 0;
LABEL_57:
                          v53 = 0;
LABEL_68:
                          FigFileUnlock();
                          FigFileForkClose();
                          if (v52)
                            CFRelease(v52);
                          if (v53)
                            CFRelease(v53);
                          if (v77)
                            CFRelease(v77);
                          goto LABEL_74;
                        }
                        v54 = (const __CFAllocator *)FigGetAllocatorForMedia();
                        v53 = CFURLCreateCopyAppendingPathComponent(v54, v38, CFSTR("boot.xml"), 0);
                        if (v53)
                        {
                          if (FigFileDoesFileExist())
                          {
                            v55 = FigFileDeleteFile();
                            if ((_DWORD)v55)
                              goto LABEL_124;
                          }
                          FigGetAllocatorForMedia();
                          v55 = FigCreateBlockBufferWithCFString();
                          if ((_DWORD)v55)
                            goto LABEL_124;
                          if (!FigXMLNodeWriteXMLFileFromBlockBufferAtURL(0, 0x1E2FEB7B8, v53))
                          {
                            FigGetAllocatorForMedia();
                            v55 = FigCreateBlockBufferWithCFString();
                            if ((_DWORD)v55)
                            {
LABEL_124:
                              BootFromFile = v55;
                              goto LABEL_68;
                            }
                            if (!FigXMLNodeWriteXMLFileFromBlockBufferAtURL(v77, 0x1E2FEB7B8, v52))
                            {
                              BootFromFile = 0;
                              goto LABEL_68;
                            }
                          }
                        }
                      }
                      else
                      {
                        v53 = 0;
                      }
                    }
                    else
                    {
                      v52 = 0;
                      v53 = 0;
                    }
                    v55 = FigSignalErrorAt();
                    goto LABEL_124;
                  }
                }
LABEL_74:
                CFRelease(v41);
                if (url)
                  CFRelease(url);
LABEL_76:
                if (v74)
                  CFRelease(v74);
                if (v75)
                  CFRelease(v75);
                if (v48)
                  CFRelease(v48);
                if (v45)
                  CFRelease(v45);
                if ((_DWORD)BootFromFile)
                  return BootFromFile;
                goto LABEL_85;
              }
            }
            BootFromFile = BlockBufferWithCFString;
            v48 = 0;
            goto LABEL_74;
          }
        }
      }
      BootFromFile = TempDirectory;
      v48 = 0;
      v45 = 0;
      goto LABEL_74;
    }
    return FigSignalErrorAt();
  }
  if (!*(_BYTE *)(DerivedStorage + 112))
  {
    v37 = 1;
    goto LABEL_86;
  }
LABEL_85:
  v37 = 2;
LABEL_86:
  v9 = lockRoot(DerivedStorage, v37);
  if ((_DWORD)v9)
    return v9;
  v56 = CMBaseObjectGetDerivedStorage();
  v57 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v58 = CFURLCreateCopyAppendingPathComponent(v57, *(CFURLRef *)(v56 + 8), CFSTR("root.xml"), 0);
  if (!v58)
  {
    BootFromFile = FigSignalErrorAt();
LABEL_105:
    if (!(_DWORD)BootFromFile)
    {
      BootFromFile = loadBootFromFile();
      if (!(_DWORD)BootFromFile)
        *a5 = 0;
    }
    return BootFromFile;
  }
  v59 = v58;
  v60 = FigGetAllocatorForMedia();
  v61 = (uint64_t *)(v56 + 40);
  v62 = FigXMLNodeCreateFromURL(v60, (uint64_t)v59, (CFTypeRef *)(v56 + 40));
  if ((_DWORD)v62)
    goto LABEL_99;
  v63 = *v61;
  FigXMLNodeGetTag(*v61);
  v64 = FigCFEqual();
  if (!v63 || !v64)
  {
    FigSignalErrorAt();
    goto LABEL_98;
  }
  Child = FigXMLNodeGetChild(v63, CFSTR("MoviePackageType"));
  FigXMLNodeGetContentAsCFString((uint64_t)Child);
  if (FigCFEqual() != 1)
  {
LABEL_98:
    v62 = FigSignalErrorAt();
LABEL_99:
    BootFromFile = v62;
    goto LABEL_104;
  }
  v66 = *v61;
  FigXMLNodeGetTag(v66);
  v67 = FigCFEqual();
  if (!v66 || !v67)
  {
    BootFromFile = FigSignalErrorAt();
    if (!(_DWORD)BootFromFile)
      goto LABEL_101;
LABEL_104:
    CFRelease(v59);
    goto LABEL_105;
  }
  v68 = FigXMLNodeGetChild(v66, CFSTR("BootImage"));
  ContentAsCFString = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v68);
  if (!ContentAsCFString)
  {
LABEL_101:
    v70 = 0;
    goto LABEL_102;
  }
  v70 = CFRetain(ContentAsCFString);
LABEL_102:
  BootFromFile = FigFileValidateFileNameIsWithinParentDirectory();
  if (!(_DWORD)BootFromFile)
  {
    *(_QWORD *)(v56 + 80) = v70;
    goto LABEL_104;
  }
  CFRelease(v59);
  if (v70)
    CFRelease(v70);
  return BootFromFile;
}

uint64_t lockRoot(uint64_t a1, char a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 128))
    goto LABEL_7;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v5 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(a1 + 8), CFSTR("root.xml"), 0);
  if (FigFileDoesFileExist() == 1)
    v6 = FigFileForkOpenMainByCFURL();
  else
    v6 = FigSignalErrorAt();
  v7 = v6;
  if (v5)
    CFRelease(v5);
  if (!(_DWORD)v7)
  {
LABEL_7:
    v7 = FigFileLock();
    if ((_DWORD)v7 == -12206)
      v7 = FigSignalErrorAt();
    if (!(_DWORD)v7)
    {
      *(_BYTE *)(a1 + 112) = (a2 & 2) != 0;
      *(_BYTE *)(a1 + 113) = 1;
    }
  }
  return v7;
}

uint64_t loadBootFromFile()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  CFTypeRef *v3;
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  int v10;
  CFStringRef *StreamList;
  uint64_t v12;
  CFIndex v13;
  const void *ChildAtIndex;
  const void *Attribute;
  const __CFString *v16;
  const __CFAllocator *v17;
  CFURLRef v18;
  CFURLRef v19;
  const void *v20;
  const void *v21;
  CFStringRef *Child;
  int v23;
  const void *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  CFStringRef *v28;
  uint64_t v29;
  uint64_t v30;
  const __CFAllocator *v31;
  CFIndex v32;
  const void *v33;
  const __CFURL *v34;
  const __CFAllocator *v35;
  __CFDictionary *Mutable;
  CFStringRef *v37;
  const void *ContentAsCFString;
  CFStringRef *v39;
  const void *v40;
  CFStringRef *v41;
  const void *v42;
  CFStringRef *v43;
  uint64_t v44;
  const __CFString *v45;
  const __CFAllocator *v46;
  CFURLRef v47;
  CFStringRef *v48;
  uint64_t v49;
  const __CFString *v50;
  const __CFAllocator *v51;
  CFURLRef v52;
  CFStringRef *v53;
  const void *v54;
  CFStringRef *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const __CFAllocator *v59;
  uint64_t v60;
  int v61;
  CFStringRef *v62;
  uint64_t v63;
  uint64_t v64;
  const __CFAllocator *v65;
  CFIndex v66;
  const void *v67;
  const __CFString *Tag;
  const __CFAllocator *v69;
  CFMutableDictionaryRef v70;
  __CFDictionary *v71;
  CFStringRef *v72;
  CFStringRef *v73;
  uint64_t v74;
  const void *v75;
  const __CFString *v76;
  const __CFAllocator *v77;
  CFStringRef *v78;
  const void *v79;
  CFStringRef *v80;
  const __CFString *v81;
  const __CFAllocator *v82;
  CFURLRef v83;
  CFTypeRef v85;
  uint64_t *v86;
  void *value;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 80))
  {
    v1 = DerivedStorage;
    v3 = (CFTypeRef *)(DerivedStorage + 48);
    v2 = *(const void **)(DerivedStorage + 48);
    if (v2)
    {
      CFRelease(v2);
      *v3 = 0;
    }
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v5 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v1 + 8), *(CFStringRef *)(v1 + 80), 0);
    if (v5)
    {
      v6 = (uint64_t)v5;
      v7 = FigGetAllocatorForMedia();
      v85 = (CFTypeRef)v6;
      v8 = FigXMLNodeCreateFromURL(v7, v6, v3);
      if ((_DWORD)v8)
        goto LABEL_92;
      v9 = *v3;
      cf = 0;
      if (xmlCopyHLSMoviePackageType((uint64_t)v9, &cf))
        v10 = 0;
      else
        v10 = FigCFEqual();
      if (cf)
        CFRelease(cf);
      if (v10 != 1)
      {
        v8 = FigSignalErrorAt();
        goto LABEL_92;
      }
      v86 = (uint64_t *)v3;
      StreamList = xmlGetStreamList((uint64_t)*v3);
      if (!StreamList)
        goto LABEL_22;
      v12 = (uint64_t)StreamList;
      if ((uint64_t)FigXMLNodeGetCountOfChildren((uint64_t)StreamList) < 1)
        goto LABEL_22;
      v13 = 0;
      while (1)
      {
        ChildAtIndex = FigXMLNodeGetChildAtIndex(v12, v13);
        Attribute = (const void *)FigXMLNodeGetAttribute();
        v16 = (const __CFString *)FigXMLNodeGetAttribute();
        v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v18 = CFURLCreateCopyAppendingPathComponent(v17, *(CFURLRef *)(v1 + 8), v16, 1u);
        if (!v18)
          break;
        v19 = v18;
        v20 = (const void *)FigXMLNodeGetAttribute();
        v21 = (const void *)FigXMLNodeGetAttribute();
        if (!ChildAtIndex)
        {
          FigSignalErrorAt();
LABEL_19:
          v23 = 0;
          goto LABEL_20;
        }
        Child = FigXMLNodeGetChild((uint64_t)ChildAtIndex, CFSTR("Complete"));
        if (!Child)
          goto LABEL_19;
        FigXMLNodeGetContentAsCFString((uint64_t)Child);
        v23 = FigCFEqual();
LABEL_20:
        v24 = (const void *)addStreamToStreamList(v1, Attribute, v19, v20, v21, v23, 0);
        CFRelease(v19);
        if ((_DWORD)v24)
          goto LABEL_86;
        if (++v13 >= (uint64_t)FigXMLNodeGetCountOfChildren(v12))
          goto LABEL_22;
      }
      v8 = FigSignalErrorAt();
      if ((_DWORD)v8)
      {
LABEL_92:
        v24 = (const void *)v8;
        goto LABEL_86;
      }
LABEL_22:
      value = 0;
      cf = 0;
      v25 = v86;
      v26 = *v86;
      FigXMLNodeGetTag(*v86);
      v27 = FigCFEqual();
      if (v26 && v27)
      {
        v28 = FigXMLNodeGetChild(v26, CFSTR("DataItems"));
        if (!v28)
          goto LABEL_52;
        v29 = (uint64_t)v28;
        v30 = FigXMLNodeCopyAttributeAsCFString((uint64_t)v28, (uint64_t)CFSTR("Directory"), &cf);
        if (!(_DWORD)v30)
        {
          if (!*(_QWORD *)(v1 + 32))
          {
            v31 = (const __CFAllocator *)FigGetAllocatorForMedia();
            *(_QWORD *)(v1 + 32) = CFURLCreateCopyAppendingPathComponent(v31, *(CFURLRef *)(v1 + 8), (CFStringRef)cf, 1u);
          }
          if ((uint64_t)FigXMLNodeGetCountOfChildren(v29) >= 1)
          {
            v32 = 0;
            do
            {
              v33 = FigXMLNodeGetChildAtIndex(v29, v32);
              v34 = *(const __CFURL **)(v1 + 32);
              v35 = (const __CFAllocator *)FigGetAllocatorForMedia();
              Mutable = CFDictionaryCreateMutable(v35, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              v37 = FigXMLNodeGetChild((uint64_t)v33, CFSTR("ID"));
              ContentAsCFString = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v37);
              CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorID"), ContentAsCFString);
              v39 = FigXMLNodeGetChild((uint64_t)v33, CFSTR("Category"));
              v40 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v39);
              CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorCategory"), v40);
              v41 = FigXMLNodeGetChild((uint64_t)v33, CFSTR("Name"));
              v42 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v41);
              CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorName"), v42);
              v43 = FigXMLNodeGetChild((uint64_t)v33, CFSTR("DataPath"));
              v44 = FigXMLNodeGetContentAsCFString((uint64_t)v43);
              if (v44)
              {
                v45 = (const __CFString *)v44;
                v46 = (const __CFAllocator *)FigGetAllocatorForMedia();
                v47 = CFURLCreateWithString(v46, v45, v34);
                CFDictionarySetValue(Mutable, CFSTR("DataItemURL"), v47);
                CFDictionarySetValue(Mutable, CFSTR("DataItemFileName"), v45);
              }
              else
              {
                v47 = 0;
              }
              v48 = FigXMLNodeGetChild((uint64_t)v33, CFSTR("DescriptorPath"));
              v49 = FigXMLNodeGetContentAsCFString((uint64_t)v48);
              if (v49)
              {
                v50 = (const __CFString *)v49;
                v51 = (const __CFAllocator *)FigGetAllocatorForMedia();
                v52 = CFURLCreateWithString(v51, v50, v34);
                CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorURL"), v52);
                CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorFileName"), v50);
              }
              else
              {
                v52 = 0;
              }
              v53 = FigXMLNodeGetChild((uint64_t)v33, CFSTR("Role"));
              v54 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v53);
              if (v54)
                CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorRole"), v54);
              v55 = FigXMLNodeGetChild((uint64_t)v33, CFSTR("kDataItemNetworkURL"));
              v56 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v55);
              if (v56)
                CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorNetworkURL"), v56);
              if (v47)
                CFRelease(v47);
              if (v52)
                CFRelease(v52);
              v57 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorID"));
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 88), v57, Mutable);
              v58 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorCategory"));
              if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v1 + 96), v58, (const void **)&value))
              {
                CFDictionarySetValue((CFMutableDictionaryRef)value, v57, Mutable);
              }
              else
              {
                v59 = (const __CFAllocator *)FigGetAllocatorForMedia();
                value = CFDictionaryCreateMutable(v59, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 96), v58, value);
                CFDictionarySetValue((CFMutableDictionaryRef)value, v57, Mutable);
                if (value)
                  CFRelease(value);
              }
              if (Mutable)
                CFRelease(Mutable);
              ++v32;
            }
            while (v32 < (uint64_t)FigXMLNodeGetCountOfChildren(v29));
            v24 = 0;
            v25 = v86;
LABEL_53:
            if (cf)
              CFRelease(cf);
            if ((_DWORD)v24)
              goto LABEL_86;
            cf = 0;
            v60 = *v25;
            FigXMLNodeGetTag(*v25);
            v61 = FigCFEqual();
            if (v60 && v61)
            {
              v62 = FigXMLNodeGetChild(v60, CFSTR("InterstitialAssets"));
              if (!v62)
              {
LABEL_83:
                v24 = 0;
                goto LABEL_84;
              }
              v63 = (uint64_t)v62;
              v64 = FigXMLNodeCopyAttributeAsCFString((uint64_t)v62, (uint64_t)CFSTR("Directory"), &cf);
              if (!(_DWORD)v64)
              {
                if (!*(_QWORD *)(v1 + 200))
                {
                  v65 = (const __CFAllocator *)FigGetAllocatorForMedia();
                  *(_QWORD *)(v1 + 200) = CFURLCreateCopyAppendingPathComponent(v65, *(CFURLRef *)(v1 + 8), (CFStringRef)cf, 1u);
                }
                if ((uint64_t)FigXMLNodeGetCountOfChildren(v63) >= 1)
                {
                  v66 = 0;
                  while (1)
                  {
                    v67 = FigXMLNodeGetChildAtIndex(v63, v66);
                    Tag = (const __CFString *)FigXMLNodeGetTag((uint64_t)v67);
                    if (CFStringCompare(Tag, CFSTR("InterstitialAsset"), 0) == kCFCompareEqualTo)
                      break;
                    if (CFStringCompare(Tag, CFSTR("InterstitialAssetList"), 0))
                      goto LABEL_77;
                    if (!v67)
                      goto LABEL_81;
                    v69 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    v70 = CFDictionaryCreateMutable(v69, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    if (!v70)
                      goto LABEL_81;
                    v71 = v70;
                    v72 = FigXMLNodeGetChild((uint64_t)v67, CFSTR("NetworkURL"));
                    v73 = FigXMLNodeGetChild((uint64_t)v67, CFSTR("PathToLocalCopy"));
                    if (v72 && (v74 = (uint64_t)v73) != 0)
                    {
                      v75 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v72);
                      CFDictionarySetValue(v71, CFSTR("InterstitialAssetListNetworkURL"), v75);
                      v76 = (const __CFString *)FigXMLNodeGetContentAsCFString(v74);
                      v77 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      v24 = CFURLCreateWithString(v77, v76, *(CFURLRef *)(v1 + 200));
                      CFDictionarySetValue(v71, CFSTR("InterstitialAssetListFileName"), v24);
                      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 216), v76, v71);
                      if (v24)
                      {
                        CFRelease(v24);
                        v24 = 0;
                      }
                    }
                    else
                    {
                      v24 = (const void *)FigSignalErrorAt();
                    }
                    CFRelease(v71);
                    if ((_DWORD)v24)
                      goto LABEL_84;
LABEL_77:
                    if (++v66 >= (uint64_t)FigXMLNodeGetCountOfChildren(v63))
                      goto LABEL_83;
                  }
                  if (v67)
                  {
                    v78 = FigXMLNodeGetChild((uint64_t)v67, CFSTR("NetworkURL"));
                    v79 = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)v78);
                    v80 = FigXMLNodeGetChild((uint64_t)v67, CFSTR("PathToLocalCopy"));
                    v81 = (const __CFString *)FigXMLNodeGetContentAsCFString((uint64_t)v80);
                    v82 = (const __CFAllocator *)FigGetAllocatorForMedia();
                    v83 = CFURLCreateWithString(v82, v81, *(CFURLRef *)(v1 + 200));
                    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v1 + 208), v79, v83);
                    if (v83)
                      CFRelease(v83);
                    goto LABEL_77;
                  }
LABEL_81:
                  v24 = (const void *)FigSignalErrorAt();
                  if ((_DWORD)v24)
                    goto LABEL_84;
                  goto LABEL_77;
                }
                goto LABEL_83;
              }
            }
            else
            {
              v64 = FigSignalErrorAt();
            }
            v24 = (const void *)v64;
LABEL_84:
            if (cf)
              CFRelease(cf);
LABEL_86:
            CFRelease(v85);
            return (uint64_t)v24;
          }
LABEL_52:
          v24 = 0;
          goto LABEL_53;
        }
      }
      else
      {
        v30 = FigSignalErrorAt();
      }
      v24 = (const void *)v30;
      goto LABEL_53;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigHLSPersistentStoreRemovePersistentStore(uint64_t a1, const __CFDictionary *a2)
{
  const void *AllocatorForMedia;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, CFArrayRef *);
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, const void *);
  CFTypeRef v14;
  uint64_t (*v15)(CFTypeRef);
  uint64_t v16;
  CFArrayRef theArray;
  CFTypeRef cf;

  theArray = 0;
  cf = 0;
  if (!a1)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_15;
  }
  AllocatorForMedia = (const void *)FigGetAllocatorForMedia();
  v5 = FigHLSPersistentStoreCreateAtURL(AllocatorForMedia, a1, a2, 1, &cf);
  if ((_DWORD)v5)
  {
LABEL_15:
    v16 = v5;
    goto LABEL_17;
  }
  v6 = cf;
  v7 = *(uint64_t (**)(CFTypeRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v7)
  {
    v5 = v7(v6, &theArray);
    if (!(_DWORD)v5)
    {
      if (theArray)
      {
        Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          v9 = Count;
          v10 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
            v12 = cf;
            v13 = *(uint64_t (**)(CFTypeRef, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
            if (!v13)
              goto LABEL_16;
            v5 = v13(v12, ValueAtIndex);
            if ((_DWORD)v5)
              goto LABEL_15;
          }
          while (v9 != ++v10);
        }
      }
      v14 = cf;
      if (!cf)
        return 4294954516;
      v15 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (!v15)
        goto LABEL_16;
      v5 = v15(v14);
      if (!(_DWORD)v5)
        v5 = FigFileDeleteRecursive();
    }
    goto LABEL_15;
  }
LABEL_16:
  v16 = 4294954514;
LABEL_17:
  if (cf)
    CFRelease(cf);
  return v16;
}

CFStringRef FigHLSPersistentStoreCopyFormattingDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigHLSPersistentStore %p]"), a1);
}

uint64_t HLSPersistentStore_Invalidate()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
    return persistentStore_Invalidate(DerivedStorage);
  else
    return FigSignalErrorAt();
}

uint64_t persistentStore_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  persistentStore_Invalidate(DerivedStorage);
  result = FigReadWriteLockDestroy();
  *(_QWORD *)(v1 + 120) = 0;
  return result;
}

CFStringRef persistentStore_CopyDebugDescription()
{
  const __CFURL *v0;
  CFStringRef PathComponent;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v3;

  v0 = *(const __CFURL **)(CMBaseObjectGetDerivedStorage() + 8);
  if (v0)
    PathComponent = CFURLCopyLastPathComponent(v0);
  else
    PathComponent = 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v3 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigHLSPersistentStore]{%@}"), PathComponent);
  if (PathComponent)
    CFRelease(PathComponent);
  return v3;
}

uint64_t persistentStore_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFStringRef **a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFStringRef *Child;
  CFStringRef *v12;
  uint64_t v13;
  CFStringRef *ContentAsCFString;
  uint64_t v15;
  int v16;
  CFStringRef *v17;
  uint64_t v19;
  int v20;
  CFStringRef *v21;
  uint64_t v22;
  CFStringRef *v23;
  CFStringRef *v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v8 = DerivedStorage;
    v9 = FigReadWriteLockLockForRead();
    if ((_DWORD)v9)
      goto LABEL_40;
    if (!a2 || !a4 || *(_BYTE *)v8)
    {
      v9 = FigSignalErrorAt();
      goto LABEL_40;
    }
    if (CFEqual(a2, CFSTR("MasterPlaylistNetworkURL")))
    {
      v10 = *(_QWORD *)(v8 + 48);
      v23 = 0;
      v24 = 0;
      xmlGetMasterPlaylistNode(v10, &v24);
      if (!v24 || (Child = FigXMLNodeGetChild((uint64_t)v24, CFSTR("NetworkURL"))) == 0)
      {
        v12 = 0;
        goto LABEL_12;
      }
      v9 = FigXMLNodeCopyContentAsCFString((uint64_t)Child, &v23);
      if (!(_DWORD)v9)
      {
        v12 = v23;
LABEL_12:
        v13 = 0;
LABEL_13:
        *a4 = v12;
LABEL_23:
        FigReadWriteLockUnlockForRead();
        return v13;
      }
LABEL_40:
      v13 = v9;
      goto LABEL_23;
    }
    if (CFEqual(a2, CFSTR("HLSPersistentStoreURL")))
    {
      ContentAsCFString = *(CFStringRef **)(v8 + 8);
      if (!ContentAsCFString)
        goto LABEL_22;
      goto LABEL_21;
    }
    if (CFEqual(a2, CFSTR("MoviePackageBootVersion")))
    {
      v15 = *(_QWORD *)(v8 + 48);
      FigXMLNodeGetTag(v15);
      v16 = FigCFEqual();
      if (v15 && v16)
      {
        v17 = FigXMLNodeGetChild(v15, CFSTR("Version"));
        ContentAsCFString = (CFStringRef *)FigXMLNodeGetContentAsCFString((uint64_t)v17);
        if (!ContentAsCFString)
        {
LABEL_22:
          v13 = 0;
          *a4 = ContentAsCFString;
          goto LABEL_23;
        }
LABEL_21:
        ContentAsCFString = (CFStringRef *)CFRetain(ContentAsCFString);
        goto LABEL_22;
      }
    }
    else
    {
      if (!CFEqual(a2, CFSTR("MoviePackageRootVersion")))
      {
        if (CFEqual(a2, CFSTR("MoviePackageBootType")))
        {
          v24 = 0;
          v22 = xmlCopyHLSMoviePackageType(*(_QWORD *)(v8 + 48), &v24);
        }
        else
        {
          if (!CFEqual(a2, CFSTR("MoviePackageRootType")))
          {
            if (!CFEqual(a2, CFSTR("DataDirectory")))
            {
              v13 = 4294954512;
              goto LABEL_23;
            }
            ContentAsCFString = (CFStringRef *)CFURLCreateCopyAppendingPathComponent(a3, *(CFURLRef *)(v8 + 8), CFSTR("Data"), 1u);
            goto LABEL_22;
          }
          v24 = 0;
          v22 = xmlCopyRootType(*(_QWORD *)(v8 + 40), &v24);
        }
        v13 = v22;
        if ((_DWORD)v22)
          goto LABEL_23;
        v12 = v24;
        goto LABEL_13;
      }
      v19 = *(_QWORD *)(v8 + 40);
      FigXMLNodeGetTag(v19);
      v20 = FigCFEqual();
      if (v19 && v20)
      {
        v21 = FigXMLNodeGetChild(v19, CFSTR("Version"));
        ContentAsCFString = (CFStringRef *)FigXMLNodeGetContentAsCFString((uint64_t)v21);
        goto LABEL_22;
      }
    }
    v13 = FigSignalErrorAt();
    if ((_DWORD)v13)
      goto LABEL_23;
    ContentAsCFString = 0;
    goto LABEL_22;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  CFTypeID v8;
  uint64_t v9;
  CFStringRef *Child;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t AllocatorForMedia;
  CFTypeRef v16;
  CFStringRef *v18;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v6 = DerivedStorage;
    v7 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v7)
      return v7;
    if (a2 && !*(_BYTE *)v6 && *(_BYTE *)(v6 + 112) == 1)
    {
      if (!CFEqual(a2, CFSTR("MasterPlaylistNetworkURL")))
      {
        v12 = 4294954512;
        goto LABEL_27;
      }
      if (a3)
      {
        v8 = CFGetTypeID(a3);
        if (v8 == CFStringGetTypeID())
        {
          v9 = *(_QWORD *)(v6 + 48);
          v18 = 0;
          xmlGetMasterPlaylistNode(v9, &v18);
          if (v18)
          {
            Child = FigXMLNodeGetChild((uint64_t)v18, CFSTR("NetworkURL"));
            if (Child)
            {
              v11 = FigXMLNodeContentSetCFString((uint64_t)Child, a3);
              goto LABEL_12;
            }
            v12 = xmlAddTargetNode((uint64_t)v18, a3);
          }
          else
          {
            cf = 0;
            FigXMLNodeGetTag(v9);
            v14 = FigCFEqual();
            if (!v9 || !v14)
            {
              v11 = FigSignalErrorAt();
LABEL_12:
              v12 = v11;
              if ((_DWORD)v11)
                goto LABEL_27;
              goto LABEL_25;
            }
            AllocatorForMedia = FigGetAllocatorForMedia();
            v12 = FigXMLNodeCreateChildNode(AllocatorForMedia, v9, CFSTR("MasterPlaylist"), &cf);
            v16 = cf;
            if (!(_DWORD)v12)
            {
              v12 = xmlAddTargetNode((uint64_t)cf, a3);
              v16 = cf;
            }
            if (v16)
            {
              CFRelease(v16);
              if ((_DWORD)v12)
                goto LABEL_27;
              goto LABEL_25;
            }
          }
          if (!(_DWORD)v12)
          {
LABEL_25:
            v13 = writeBoot();
            goto LABEL_26;
          }
LABEL_27:
          FigReadWriteLockUnlockForWrite();
          return v12;
        }
      }
    }
    v13 = FigSignalErrorAt();
LABEL_26:
    v12 = v13;
    goto LABEL_27;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_Invalidate(uint64_t a1)
{
  uint64_t result;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;

  if (a1)
  {
    result = FigReadWriteLockLockForWrite();
    if ((_DWORD)result)
      return result;
    if (!*(_BYTE *)a1)
    {
      *(_BYTE *)a1 = 1;
      if (*(_QWORD *)(a1 + 128))
      {
        if (!FigFileUnlock())
          *(_WORD *)(a1 + 112) = 0;
        FigFileForkClose();
        *(_QWORD *)(a1 + 128) = 0;
      }
      v3 = *(const void **)(a1 + 8);
      if (v3)
        CFRelease(v3);
      v4 = *(const void **)(a1 + 24);
      if (v4)
        CFRelease(v4);
      v5 = *(const void **)(a1 + 32);
      if (v5)
        CFRelease(v5);
      v6 = *(const void **)(a1 + 48);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(a1 + 48) = 0;
      }
      v7 = *(const void **)(a1 + 40);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1 + 40) = 0;
      }
      v8 = *(const void **)(a1 + 72);
      if (v8)
        CFRelease(v8);
      v9 = *(const void **)(a1 + 64);
      if (v9)
        CFRelease(v9);
      v10 = *(const void **)(a1 + 80);
      if (v10)
        CFRelease(v10);
      v11 = *(const void **)(a1 + 16);
      if (v11)
        CFRelease(v11);
      v12 = *(const void **)(a1 + 56);
      if (v12)
        CFRelease(v12);
      v13 = *(const void **)(a1 + 104);
      if (v13)
        CFRelease(v13);
      v14 = *(const void **)(a1 + 144);
      if (v14)
        CFRelease(v14);
      v15 = *(const void **)(a1 + 152);
      if (v15)
        CFRelease(v15);
      v16 = *(const void **)(a1 + 96);
      if (v16)
        CFRelease(v16);
      v17 = *(const void **)(a1 + 88);
      if (v17)
        CFRelease(v17);
      v18 = *(const void **)(a1 + 192);
      if (v18)
        CFRelease(v18);
      v19 = *(const void **)(a1 + 200);
      if (v19)
        CFRelease(v19);
      v20 = *(const void **)(a1 + 208);
      if (v20)
        CFRelease(v20);
      v21 = *(const void **)(a1 + 216);
      if (v21)
        CFRelease(v21);
    }
    FigReadWriteLockUnlockForWrite();
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t xmlCopyHLSMoviePackageType(uint64_t a1, _QWORD *a2)
{
  int v4;
  CFStringRef *Child;
  const void *ContentAsCFString;

  if (!a2)
    return FigSignalErrorAt();
  FigXMLNodeGetTag(a1);
  v4 = FigCFEqual();
  if (!a1 || !v4)
    return FigSignalErrorAt();
  Child = FigXMLNodeGetChild(a1, CFSTR("HLSMoviePackageType"));
  ContentAsCFString = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
  if (ContentAsCFString)
    ContentAsCFString = CFRetain(ContentAsCFString);
  *a2 = ContentAsCFString;
  return 0;
}

uint64_t xmlCopyRootType(uint64_t a1, _QWORD *a2)
{
  int v4;
  CFStringRef *Child;
  const void *ContentAsCFString;

  FigXMLNodeGetTag(a1);
  v4 = FigCFEqual();
  if (!a1 || !v4)
    return FigSignalErrorAt();
  Child = FigXMLNodeGetChild(a1, CFSTR("MoviePackageType"));
  ContentAsCFString = (const void *)FigXMLNodeGetContentAsCFString((uint64_t)Child);
  if (ContentAsCFString)
    ContentAsCFString = CFRetain(ContentAsCFString);
  *a2 = ContentAsCFString;
  return 0;
}

CFStringRef *xmlGetMasterPlaylistNode(uint64_t a1, CFStringRef **a2)
{
  int v4;
  CFStringRef *result;

  FigXMLNodeGetTag(a1);
  v4 = FigCFEqual();
  result = 0;
  if (a1 && v4)
    result = FigXMLNodeGetChild(a1, CFSTR("MasterPlaylist"));
  if (a2)
    *a2 = result;
  return result;
}

uint64_t writeBoot()
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;
  const __CFURL *v2;
  const __CFURL *v3;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v2 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 8), *(CFStringRef *)(DerivedStorage + 80), 0);
  if (!v2)
    return FigSignalErrorAt();
  v3 = v2;
  v4 = FigXMLNodeWriteToFilePath(*(_QWORD *)(DerivedStorage + 48), v2);
  CFRelease(v3);
  return v4;
}

uint64_t xmlAddTargetNode(uint64_t a1, const void *a2)
{
  uint64_t AllocatorForMedia;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  AllocatorForMedia = FigGetAllocatorForMedia();
  v5 = FigXMLNodeCreateChildNode(AllocatorForMedia, a1, CFSTR("NetworkURL"), &cf);
  if (!(_DWORD)v5)
    v5 = FigXMLNodeContentSetCFString((uint64_t)cf, a2);
  v6 = v5;
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t persistentStore_GetAccessLevel(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2)
    return FigSignalErrorAt();
  v4 = (_BYTE *)DerivedStorage;
  *a2 = -1;
  v5 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v5)
    return v5;
  if (*v4)
  {
    v6 = FigSignalErrorAt();
  }
  else if (v4[112])
  {
    v6 = 0;
    *a2 = 1;
  }
  else
  {
    v6 = 0;
    if (v4[113])
      *a2 = 0;
  }
  FigReadWriteLockUnlockForWrite();
  return v6;
}

uint64_t persistentStore_SetAccessLevel(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t updated;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v7 = DerivedStorage;
    v8 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v8)
      return v8;
    if (!*(_BYTE *)v7)
    {
      switch(a2)
      {
        case -1:
          if (*(_QWORD *)(v7 + 128))
          {
            updated = FigFileUnlock();
            if ((_DWORD)updated)
              goto LABEL_15;
          }
          v10 = 0;
          *(_WORD *)(v7 + 112) = 0;
LABEL_16:
          FigReadWriteLockUnlockForWrite();
          return v10;
        case 0:
          if (*(unsigned __int8 *)(v7 + 112) == *(unsigned __int8 *)(v7 + 113))
            goto LABEL_8;
LABEL_13:
          v10 = 0;
          goto LABEL_16;
        case 1:
          if (!*(_BYTE *)(v7 + 112))
          {
LABEL_8:
            updated = updateRootLockOptions(a1, ((a2 == 0) | (2 * (a2 == 1))) | (4 * (a3 != 0)));
LABEL_15:
            v10 = updated;
            goto LABEL_16;
          }
          goto LABEL_13;
      }
    }
    updated = FigSignalErrorAt();
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyStreamIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *v6;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    v5 = FigReadWriteLockLockForRead();
    if (!(_DWORD)v5)
    {
      if (!*(_BYTE *)v4 && *(_BYTE *)(v4 + 113) == 1 && a2)
      {
        *a2 = 0;
        v6 = *(const __CFDictionary **)(v4 + 56);
        if (!v6 || CFDictionaryGetCount(v6) < 1)
        {
          v8 = 0;
          goto LABEL_11;
        }
        v7 = FigCFDictionaryCopyArrayOfKeys();
        if (v7)
        {
          v8 = 0;
          *a2 = v7;
LABEL_11:
          FigReadWriteLockUnlockForRead();
          return v8;
        }
      }
      v5 = FigSignalErrorAt();
    }
    v8 = v5;
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_GetAndRetainStreamInfoForStreamID(uint64_t a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  const __CFDictionary *v12;
  const void *Value;
  uint64_t StreamOptions;
  uint64_t AllocatorForMedia;
  CFTypeRef v16;
  __CFDictionary *v17;
  uint64_t v18;
  CFTypeRef cf;
  CFTypeRef v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v21 = 0;
  if (DerivedStorage)
  {
    v9 = DerivedStorage;
    v10 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v10)
      return v10;
    if (*(_BYTE *)v9)
      goto LABEL_23;
    v11 = *(const __CFDictionary **)(v9 + 56);
    if (!v11)
    {
      v18 = 0;
      goto LABEL_15;
    }
    if (a4 && a2 && (v12 = (const __CFDictionary *)CFDictionaryGetValue(v11, a2)) != 0)
    {
      Value = CFDictionaryGetValue(v12, CFSTR("StreamInformationRef"));
      v21 = Value;
      if (Value)
      {
        CFRetain(Value);
LABEL_14:
        v18 = 0;
        *a4 = v21;
        goto LABEL_15;
      }
      StreamOptions = persistentStore_CreateStreamOptions(v9, (__CFDictionary **)&cf, a3);
      if (!(_DWORD)StreamOptions)
      {
        AllocatorForMedia = FigGetAllocatorForMedia();
        StreamOptions = FigHLSPersistentStreamInfoCreate(AllocatorForMedia, a2, a1, *(const void **)(v9 + 8), (const __CFDictionary *)cf, &v21);
        if (!(_DWORD)StreamOptions)
        {
          v16 = v21;
          v17 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 56), a2);
          if (v17)
          {
            CFDictionarySetValue(v17, CFSTR("StreamInformationRef"), v16);
            goto LABEL_14;
          }
          v18 = FigSignalErrorAt();
          if (!(_DWORD)v18)
            goto LABEL_14;
LABEL_15:
          FigReadWriteLockUnlockForWrite();
          if (cf)
            CFRelease(cf);
          return v18;
        }
      }
    }
    else
    {
LABEL_23:
      StreamOptions = FigSignalErrorAt();
    }
    v18 = StreamOptions;
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_SetMasterPlaylist(uint64_t a1, const void *a2, const void *a3, const void *a4, OpaqueCMBlockBuffer *a5)
{
  _BYTE *DerivedStorage;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  const __CFDictionary *v15;
  const void *Value;
  uint64_t v17;
  const void *v18;
  OpaqueCMBlockBuffer *v19;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v22;
  uint64_t v23;
  CFDictionaryRef theDict;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  theDict = 0;
  v11 = FigCFEqual();
  v12 = FigCFEqual();
  if (DerivedStorage && a5 && a3)
  {
    v13 = v12;
    v14 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v14)
      return v14;
    if (!*DerivedStorage && DerivedStorage[112] == 1 && a2 && v11 | v13)
    {
      copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork((uint64_t)DerivedStorage, CFSTR("Playlist"), (uint64_t)CFSTR("DataItemDescriptorRole"), (CFTypeRef *)&theDict);
      v15 = theDict;
      if (theDict
        && ((Value = CFDictionaryGetValue(theDict, CFSTR("Master")), v11)
         && Value
         && (v17 = removeDataItem(a1, Value), (_DWORD)v17)
         || (v18 = CFDictionaryGetValue(v15, CFSTR("AvailableOfflineMaster"))) != 0
         && (v17 = removeDataItem(a1, v18), (_DWORD)v17)))
      {
        v23 = v17;
        FigReadWriteLockUnlockForWrite();
        v22 = 0;
      }
      else
      {
        v19 = a5;
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v22 = Mutable;
        if (a4)
          CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorPropertyListDescriptor"), a4);
        if (v11)
          CFDictionarySetValue(v22, CFSTR("DataItemDescriptorRole"), CFSTR("Master"));
        if (v13)
          CFDictionarySetValue(v22, CFSTR("DataItemDescriptorRole"), CFSTR("AvailableOfflineMaster"));
        CFDictionarySetValue(v22, CFSTR("DataItemDescriptorCategory"), CFSTR("Playlist"));
        CFDictionarySetValue(v22, CFSTR("DataItemDescriptorName"), a3);
        CFDictionarySetValue(v22, CFSTR("DataItemDescriptorPlaylistType"), a2);
        v23 = setDataItemWork(a1, v19, v22);
        FigReadWriteLockUnlockForWrite();
        if (!v15)
          goto LABEL_23;
      }
      CFRelease(v15);
LABEL_23:
      if (v22)
        CFRelease(v22);
      return v23;
    }
    v23 = FigSignalErrorAt();
    FigReadWriteLockUnlockForWrite();
    return v23;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyMasterPlaylist(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, CMBlockBufferRef *a6)
{
  _BYTE *DerivedStorage;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  const __CFDictionary *v16;
  const void *Value;
  const void *v18;
  const void *v19;
  const void *v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t v24;
  CFDictionaryRef v25;
  CFDictionaryRef v27;
  CFDictionaryRef theDict;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v27 = 0;
  theDict = 0;
  v12 = FigCFEqual();
  v13 = FigCFEqual();
  if (!DerivedStorage)
  {
    v24 = FigSignalErrorAt();
    goto LABEL_31;
  }
  v14 = v13;
  v15 = FigReadWriteLockLockForRead();
  if ((_DWORD)v15)
    goto LABEL_37;
  if (*DerivedStorage || !a2 || !(v12 | v14))
  {
    v15 = FigSignalErrorAt();
    goto LABEL_37;
  }
  copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork((uint64_t)DerivedStorage, CFSTR("Playlist"), (uint64_t)CFSTR("DataItemDescriptorRole"), (CFTypeRef *)&theDict);
  v16 = theDict;
  if (!theDict)
  {
    v24 = FigSignalErrorAt();
    FigReadWriteLockUnlockForRead();
    goto LABEL_31;
  }
  if (v12)
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("Master"));
    if (!v14)
      goto LABEL_10;
    goto LABEL_9;
  }
  Value = 0;
  if (v14)
LABEL_9:
    Value = CFDictionaryGetValue(v16, CFSTR("AvailableOfflineMaster"));
LABEL_10:
  v15 = copyDataItemWork((uint64_t)DerivedStorage, Value, &v27, a6);
  if (!(_DWORD)v15)
  {
    v18 = CFDictionaryGetValue(v27, CFSTR("DataItemDescriptorPropertyListDescriptor"));
    v19 = CFDictionaryGetValue(v27, CFSTR("DataItemDescriptorName"));
    v20 = CFDictionaryGetValue(v27, CFSTR("DataItemFileName"));
    if (a5)
    {
      if (v18)
        v21 = CFRetain(v18);
      else
        v21 = 0;
      *a5 = v21;
    }
    if (a3)
    {
      if (v19)
        v22 = CFRetain(v19);
      else
        v22 = 0;
      *a3 = v22;
    }
    if (a4)
    {
      if (v20)
        v23 = CFRetain(v20);
      else
        v23 = 0;
      v24 = 0;
      *a4 = v23;
    }
    else
    {
      v24 = 0;
    }
    goto LABEL_29;
  }
LABEL_37:
  v24 = v15;
LABEL_29:
  v25 = theDict;
  FigReadWriteLockUnlockForRead();
  if (v25)
    CFRelease(v25);
LABEL_31:
  if (v27)
    CFRelease(v27);
  return v24;
}

uint64_t persistentStore_SetStreamComplete(uint64_t a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *Value;
  const __CFDictionary *v9;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  const void **v13;
  const void *StreamNode;
  uint64_t v15;
  CFStringRef *Child;
  CFTypeRef v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  uint64_t v22;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  v7 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v7)
    return v7;
  if (!*(_BYTE *)v6 && *(_BYTE *)(v6 + 112) == 1)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2);
    if (Value)
    {
      v9 = Value;
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, v9);
      if (MutableCopy)
      {
        v12 = MutableCopy;
        v13 = (const void **)MEMORY[0x1E0C9AE50];
        if (a3 != 1)
          v13 = (const void **)MEMORY[0x1E0C9AE40];
        CFDictionarySetValue(MutableCopy, CFSTR("StreamInformationComplete"), *v13);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v6 + 56), a2, v12);
        StreamNode = xmlFindStreamNode(*(_QWORD *)(v6 + 48));
        if (!StreamNode)
        {
          v19 = FigSignalErrorAt();
          if ((_DWORD)v19)
            goto LABEL_23;
          goto LABEL_22;
        }
        v15 = (uint64_t)StreamNode;
        Child = FigXMLNodeGetChild((uint64_t)StreamNode, CFSTR("Complete"));
        if (Child)
        {
          v17 = CFRetain(Child);
          cf = v17;
          if (v17)
          {
LABEL_15:
            if (a3 == 1)
              v20 = CFSTR("YES");
            else
              v20 = CFSTR("NO");
            v19 = FigXMLNodeContentSetCFString((uint64_t)v17, v20);
            v17 = cf;
LABEL_19:
            if (v17)
              CFRelease(v17);
            if ((_DWORD)v19)
              goto LABEL_23;
LABEL_22:
            v19 = writeBoot();
LABEL_23:
            FigReadWriteLockUnlockForWrite();
            CFRelease(v12);
            return v19;
          }
        }
        else
        {
          cf = 0;
        }
        v18 = FigGetAllocatorForMedia();
        v19 = FigXMLNodeCreateChildNode(v18, v15, CFSTR("Complete"), &cf);
        v17 = cf;
        if ((_DWORD)v19)
          goto LABEL_19;
        goto LABEL_15;
      }
    }
  }
  v22 = FigSignalErrorAt();
  FigReadWriteLockUnlockForWrite();
  return v22;
}

uint64_t persistentStore_IsStreamComplete(uint64_t a1, const void *a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3)
  {
    v6 = DerivedStorage;
    v7 = FigReadWriteLockLockForRead();
    if (!(_DWORD)v7)
    {
      if (!*(_BYTE *)v6 && CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2))
      {
        FigCFDictionaryGetBooleanIfPresent();
        v8 = 0;
        *a3 = 0;
LABEL_7:
        FigReadWriteLockUnlockForRead();
        return v8;
      }
      v7 = FigSignalErrorAt();
    }
    v8 = v7;
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyNetworkURLForStreamID(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *Value;
  const void *v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3)
  {
    v6 = DerivedStorage;
    v7 = FigReadWriteLockLockForRead();
    if (!(_DWORD)v7)
    {
      if (!*(_BYTE *)v6)
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2);
        if (Value)
        {
          v9 = CFDictionaryGetValue(Value, CFSTR("StreamInformationNetworkURL"));
          if (v9)
            v9 = CFRetain(v9);
          v10 = 0;
          *a3 = v9;
          goto LABEL_9;
        }
      }
      v7 = FigSignalErrorAt();
    }
    v10 = v7;
LABEL_9:
    FigReadWriteLockUnlockForRead();
    return v10;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyUniqueTagForStreamID(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *Value;
  const void *v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a3)
  {
    v6 = DerivedStorage;
    v7 = FigReadWriteLockLockForRead();
    if (!(_DWORD)v7)
    {
      if (!*(_BYTE *)v6)
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v6 + 56), a2);
        if (Value)
        {
          v9 = CFDictionaryGetValue(Value, CFSTR("StreamInformationUniqueTag"));
          if (v9)
            v9 = CFRetain(v9);
          v10 = 0;
          *a3 = v9;
          goto LABEL_9;
        }
      }
      v7 = FigSignalErrorAt();
    }
    v10 = v7;
LABEL_9:
    FigReadWriteLockUnlockForRead();
    return v10;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_RemoveStreamInfoForStreamID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  const void *v8;
  uint64_t FigBaseObject;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    v5 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v5)
      return v5;
    if (!*(_BYTE *)v4 && *(_BYTE *)(v4 + 112) == 1)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v4 + 56), a2);
      if (Value)
      {
        v7 = Value;
        v8 = CFDictionaryGetValue(Value, CFSTR("StreamInformationRef"));
        if (v8)
        {
          FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v8);
          if (FigBaseObject)
          {
            v10 = FigBaseObject;
            v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
            if (v11)
              v11(v10);
          }
        }
        v12 = xmlRemoveStream(*(_QWORD *)(v4 + 48));
        if ((_DWORD)v12)
          goto LABEL_21;
        v12 = writeBoot();
        if ((_DWORD)v12)
          goto LABEL_21;
        if (CFDictionaryGetValue(v7, CFSTR("StreamInformationURL")))
        {
          v13 = FigFileDeleteRecursive();
          if (!(_DWORD)v13)
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v4 + 56), a2);
          goto LABEL_15;
        }
      }
    }
    v12 = FigSignalErrorAt();
LABEL_21:
    v13 = v12;
LABEL_15:
    FigReadWriteLockUnlockForWrite();
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_AddStreamInfo(uint64_t a1, const __CFDictionary *a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFDictionary *v9;
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v11;
  uint64_t DirectoryAtURL;
  const void *Value;
  uint64_t v14;
  CFStringRef *StreamList;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t StreamOptions;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v27 = 0;
  v28 = 0;
  if (!DerivedStorage)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_55;
  }
  v7 = DerivedStorage;
  v8 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v8)
  {
LABEL_55:
    v25 = v8;
    goto LABEL_41;
  }
  if (*(_BYTE *)v7)
    goto LABEL_58;
  v9 = *(const __CFDictionary **)(v7 + 56);
  if (!v9)
  {
    v25 = 0;
LABEL_59:
    FigReadWriteLockUnlockForWrite();
    goto LABEL_41;
  }
  if (*(_BYTE *)(v7 + 112) != 1 || CFDictionaryContainsKey(v9, a3))
  {
LABEL_58:
    v25 = FigSignalErrorAt();
    goto LABEL_59;
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v11 = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(v7 + 8), a3, 1u);
  if (FigCFURLDoesDirectoryExist())
  {
    DirectoryAtURL = FigSignalErrorAt();
  }
  else
  {
    DirectoryAtURL = makeDirectoryAtURL();
    if (!(_DWORD)DirectoryAtURL)
    {
      if (a2)
      {
        Value = CFDictionaryGetValue(a2, CFSTR("StreamInfoNetworkURL"));
        a2 = (const __CFDictionary *)CFDictionaryGetValue(a2, CFSTR("StreamInfoUniqueTag"));
      }
      else
      {
        Value = 0;
      }
      v14 = *(_QWORD *)(v7 + 48);
      v29 = 0;
      v30 = 0;
      StreamList = xmlGetStreamList(v14);
      if (StreamList)
      {
        cf = CFRetain(StreamList);
        if (cf)
          goto LABEL_19;
      }
      else
      {
        cf = 0;
      }
      FigXMLNodeGetTag(v14);
      v16 = FigCFEqual();
      if (!v14 || !v16)
      {
        v18 = FigSignalErrorAt();
        goto LABEL_28;
      }
      v17 = FigGetAllocatorForMedia();
      v18 = FigXMLNodeCreateChildNode(v17, v14, CFSTR("Streams"), &cf);
      if ((_DWORD)v18)
        goto LABEL_28;
LABEL_19:
      v19 = FigGetAllocatorForMedia();
      v18 = FigXMLNodeCreateChildNode(v19, (uint64_t)cf, CFSTR("Stream"), &v30);
      if (!(_DWORD)v18)
      {
        v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, (uint64_t)CFSTR("ID"), (uint64_t)a3);
        if (!(_DWORD)v18)
        {
          v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, (uint64_t)CFSTR("Path"), (uint64_t)a3);
          if (!(_DWORD)v18)
          {
            if (!Value
              || (v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, (uint64_t)CFSTR("NetworkURL"), (uint64_t)Value),
                  !(_DWORD)v18))
            {
              if (!a2
                || (v18 = FigXMLNodeAttributeSetCFString((uint64_t)v30, (uint64_t)CFSTR("UniqueTag"), (uint64_t)a2),
                    !(_DWORD)v18))
              {
                v20 = FigGetAllocatorForMedia();
                v18 = FigXMLNodeCreateChildNode(v20, (uint64_t)v30, CFSTR("Complete"), &v29);
                if (!(_DWORD)v18)
                  v18 = FigXMLNodeContentSetCFString((uint64_t)v29, CFSTR("NO"));
              }
            }
          }
        }
      }
LABEL_28:
      v21 = v18;
      if (cf)
        CFRelease(cf);
      if (v30)
        CFRelease(v30);
      if (v29)
        CFRelease(v29);
      if (!(_DWORD)v21)
      {
        StreamOptions = writeBoot();
        if ((_DWORD)StreamOptions
          || (StreamOptions = persistentStore_CreateStreamOptions(v7, (__CFDictionary **)&v27, 0),
              (_DWORD)StreamOptions)
          || (v23 = FigGetAllocatorForMedia(),
              StreamOptions = FigHLSPersistentStreamInfoCreate(v23, a3, a1, *(const void **)(v7 + 8), (const __CFDictionary *)v27, &v28), (_DWORD)StreamOptions))
        {
          v21 = StreamOptions;
        }
        else
        {
          v24 = addStreamToStreamList(v7, a3, v11, Value, a2, 0, v28);
          v25 = 0;
          if (!(_DWORD)v24)
            goto LABEL_39;
          v21 = v24;
          if (v28)
          {
            CFRelease(v28);
            v28 = 0;
          }
        }
        if (xmlRemoveStream(*(_QWORD *)(v7 + 48)))
          FigSignalErrorAt();
        if (writeBoot())
          FigSignalErrorAt();
      }
      if (FigFileDeleteRecursive())
        FigSignalErrorAt();
      v25 = v21;
      goto LABEL_39;
    }
  }
  v25 = DirectoryAtURL;
LABEL_39:
  FigReadWriteLockUnlockForWrite();
  if (v11)
    CFRelease(v11);
LABEL_41:
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  return v25;
}

uint64_t persistentStore_SetDataItem(uint64_t a1, OpaqueCMBlockBuffer *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3 || !a2 || !a4)
    return FigSignalErrorAt();
  v9 = (_BYTE *)DerivedStorage;
  v10 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v10)
    return v10;
  if (*v9 || v9[112] != 1)
    v11 = FigSignalErrorAt();
  else
    v11 = setDataItemWork(a1, a2, a3);
  v12 = v11;
  FigReadWriteLockUnlockForWrite();
  return v12;
}

uint64_t persistentStore_CopyDataItem(uint64_t a1, const void *a2, __CFDictionary **a3, CMBlockBufferRef *a4)
{
  uint64_t DerivedStorage;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = (_BYTE *)DerivedStorage;
  v9 = FigReadWriteLockLockForRead();
  if (!(_DWORD)v9)
  {
    if (*v8)
      v9 = FigSignalErrorAt();
    else
      v9 = copyDataItemWork((uint64_t)v8, a2, a3, a4);
  }
  v10 = v9;
  FigReadWriteLockUnlockForRead();
  return v10;
}

uint64_t persistentStore_CopyDataCategories(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a2)
  {
    v4 = (_BYTE *)DerivedStorage;
    v5 = FigReadWriteLockLockForRead();
    if (!(_DWORD)v5)
    {
      if (!*v4)
      {
        v6 = 0;
        *a2 = FigCFDictionaryCopyArrayOfKeys();
LABEL_6:
        FigReadWriteLockUnlockForRead();
        return v6;
      }
      v5 = FigSignalErrorAt();
    }
    v6 = v5;
    goto LABEL_6;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_CopyDataIDDictionaryFilteredByCategoryIndexedByAccessKey(uint64_t a1, const __CFString *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && a4)
  {
    v8 = (_BYTE *)DerivedStorage;
    v9 = FigReadWriteLockLockForRead();
    if (!(_DWORD)v9)
    {
      if (!*v8)
      {
        copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork((uint64_t)v8, a2, a3, a4);
        v10 = 0;
LABEL_6:
        FigReadWriteLockUnlockForRead();
        return v10;
      }
      v9 = FigSignalErrorAt();
    }
    v10 = v9;
    goto LABEL_6;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_RemoveDataItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2)
    return FigSignalErrorAt();
  v5 = (_BYTE *)DerivedStorage;
  v6 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v6)
    return v6;
  if (*v5 || v5[112] != 1)
    v7 = FigSignalErrorAt();
  else
    v7 = removeDataItem(a1, a2);
  v8 = v7;
  FigReadWriteLockUnlockForWrite();
  return v8;
}

uint64_t persistentStore_AddInterstitialAsset(uint64_t a1, const void *a2, __CFDictionary **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *Value;
  __CFDictionary *v11;
  __CFDictionary *v12;
  CFStringRef v13;
  const void *v14;
  uint64_t Base32EncodedSHA1HashFromCFString;
  const __CFAllocator *AllocatorForMedia;
  const __CFAllocator *v17;
  __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFDictionary *v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v7 = DerivedStorage;
    v8 = FigReadWriteLockLockForWrite();
    if ((_DWORD)v8)
      return v8;
    v9 = primeInterstitialAssetFolder();
    if (!(_DWORD)v9)
    {
      Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        v11 = (__CFDictionary *)CFRetain(Value);
        if (v11)
        {
          v12 = v11;
          v13 = 0;
          v14 = 0;
          goto LABEL_13;
        }
      }
      Base32EncodedSHA1HashFromCFString = FigCreateBase32EncodedSHA1HashFromCFString();
      if (Base32EncodedSHA1HashFromCFString)
      {
        v14 = (const void *)Base32EncodedSHA1HashFromCFString;
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        v13 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%@.%@"), v14, CFSTR("movpkg"));
        if (v13
          && !*(_BYTE *)v7
          && *(_BYTE *)(v7 + 112) == 1
          && (v17 = (const __CFAllocator *)FigGetAllocatorForMedia(),
              (v18 = CFURLCreateCopyAppendingPathComponent(v17, *(CFURLRef *)(v7 + 200), v13, 0)) != 0))
        {
          v12 = v18;
          v19 = addInterstitialAssetWork(a1, a2, v13, v18, 0);
          if (!(_DWORD)v19)
          {
LABEL_13:
            *a3 = v12;
            FigReadWriteLockUnlockForWrite();
            v20 = 0;
            v12 = 0;
            v21 = 0;
            v22 = 0;
            if (!v14)
            {
LABEL_15:
              if (v13)
                CFRelease(v13);
              if (v22)
                CFRelease(v22);
              return v21;
            }
LABEL_14:
            CFRelease(v14);
            v21 = v20;
            v22 = v12;
            goto LABEL_15;
          }
          v20 = v19;
        }
        else
        {
          v20 = FigSignalErrorAt();
          v12 = 0;
        }
        FigReadWriteLockUnlockForWrite();
        goto LABEL_14;
      }
      v9 = FigSignalErrorAt();
    }
    v21 = v9;
    FigReadWriteLockUnlockForWrite();
    return v21;
  }
  return FigSignalErrorAt();
}

uint64_t persistentStore_AddInterstitialAssetList(uint64_t a1, OpaqueCMBlockBuffer *a2, const void *a3, CFStringRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  const __CFAllocator *AllocatorForMedia;
  const __CFUUID *v12;
  const __CFAllocator *v13;
  CFStringRef v14;
  const __CFAllocator *v15;
  uint64_t DirectoryAtURL;
  const __CFAllocator *v17;
  CFStringRef v18;
  const __CFAllocator *v19;
  CFURLRef v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(_QWORD, uint64_t);
  uint64_t v24;
  uint64_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a3)
    return FigSignalErrorAt();
  v9 = DerivedStorage;
  v10 = FigReadWriteLockLockForWrite();
  if ((_DWORD)v10)
    return v10;
  if (!*(_BYTE *)v9 && *(_BYTE *)(v9 + 112) == 1)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v12 = CFUUIDCreate(AllocatorForMedia);
    v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v14 = CFUUIDCreateString(v13, v12);
    if (!*(_QWORD *)(v9 + 200))
    {
      v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
      *(_QWORD *)(v9 + 200) = CFURLCreateCopyAppendingPathComponent(v15, *(CFURLRef *)(v9 + 8), CFSTR("InterstitialAssets"), 1u);
    }
    if (!FigCFURLDoesDirectoryExist())
    {
      DirectoryAtURL = makeDirectoryAtURL();
      if ((_DWORD)DirectoryAtURL)
      {
        v24 = DirectoryAtURL;
        v20 = 0;
        v18 = 0;
LABEL_20:
        FigReadWriteLockUnlockForWrite();
        if (v12)
          CFRelease(v12);
        if (v14)
          CFRelease(v14);
        if (v20)
          CFRelease(v20);
        if (v18)
          CFRelease(v18);
        return v24;
      }
    }
    v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v18 = CFStringCreateWithFormat(v17, 0, CFSTR("%@.json"), v14);
    v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v20 = CFURLCreateCopyAppendingPathComponent(v19, *(CFURLRef *)(v9 + 200), v18, 0);
    FigGetAllocatorForMedia();
    v21 = CMByteStreamCreateForFileURL();
    if (!(_DWORD)v21)
    {
      CMBlockBufferGetDataLength(a2);
      v21 = CMByteStreamWriteBlockBuffer();
      if (!(_DWORD)v21)
      {
        v22 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
        if (*v22 < 2uLL || (v23 = (uint64_t (*)(_QWORD, uint64_t))v22[5]) == 0)
        {
          v24 = 4294954514;
          goto LABEL_17;
        }
        v21 = v23(0, 1);
      }
    }
    v24 = v21;
LABEL_17:
    if (!(_DWORD)v24)
    {
      v24 = addInterstitialAssetWork(a1, a3, v18, v20, 1);
      if (!(_DWORD)v24)
      {
        *a4 = v14;
        v14 = 0;
      }
    }
    goto LABEL_20;
  }
  v26 = FigSignalErrorAt();
  FigReadWriteLockUnlockForWrite();
  return v26;
}

uint64_t persistentStore_CopyInterstitialAssets(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = FigReadWriteLockLockForRead();
  if ((_DWORD)v5)
    return v5;
  if (*(_BYTE *)v4)
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    v6 = *(CFTypeRef *)(v4 + 208);
    if (v6)
      v6 = CFRetain(v6);
    v7 = 0;
    *a2 = v6;
  }
  FigReadWriteLockUnlockForRead();
  return v7;
}

uint64_t persistentStore_CopyInterstitialAssetLists(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || !a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  v5 = FigReadWriteLockLockForRead();
  if ((_DWORD)v5)
    return v5;
  if (*(_BYTE *)v4)
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    v6 = *(CFTypeRef *)(v4 + 216);
    if (v6)
      v6 = CFRetain(v6);
    v7 = 0;
    *a2 = v6;
  }
  FigReadWriteLockUnlockForRead();
  return v7;
}

uint64_t updateRootLockOptions(uint64_t a1, char a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = lockRoot(DerivedStorage, a2);
  if (!(_DWORD)result)
    return loadBootFromFile();
  return result;
}

uint64_t persistentStore_CreateStreamOptions(uint64_t a1, __CFDictionary **a2, const __CFDictionary *a3)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *v7;
  __CFDictionary *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;

  if (!a2)
    return FigSignalErrorAt();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v7 = a3
     ? CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, a3)
     : CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = v7;
  if (!v7)
    return FigSignalErrorAt();
  v9 = *(const void **)(a1 + 144);
  if (v9)
    CFDictionarySetValue(v7, CFSTR("StreamInfoClientAuditToken"), v9);
  v10 = *(const void **)(a1 + 152);
  if (v10)
    CFDictionarySetValue(v8, CFSTR("StreamInfoClientBundleIdentifier"), v10);
  if (*(_BYTE *)(a1 + 136))
    CFDictionarySetValue(v8, CFSTR("StreamInfoDoNotBlockOnLock"), (const void *)*MEMORY[0x1E0C9AE50]);
  v11 = persistentStore_ensureMemoryPool(a1);
  if ((_DWORD)v11)
  {
    v12 = v11;
    CFRelease(v8);
  }
  else
  {
    CFDictionarySetValue(v8, CFSTR("StreamInfoMemoryPool"), *(const void **)(a1 + 192));
    if (!CFDictionaryGetCount(v8))
    {
      CFRelease(v8);
      v8 = 0;
    }
    v12 = 0;
    *a2 = v8;
  }
  return v12;
}

uint64_t persistentStore_ensureMemoryPool(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  const __CFAllocator *v5;
  CFStringRef v6;
  CFStringRef v7;
  CMMemoryPoolRef v8;
  uint64_t v9;
  __CFDictionary *v10;

  if (*(_QWORD *)(a1 + 192))
    return 0;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v6 = CFStringCreateWithFormat(v5, 0, CFSTR("[FigHLSPersistentStore %p]"), a1);
    if (v6)
    {
      v7 = v6;
      CFDictionarySetValue(v4, (const void *)*MEMORY[0x1E0CA4BA0], v6);
      v8 = CMMemoryPoolCreate(v4);
      *(_QWORD *)(a1 + 192) = v8;
      if (v8)
        v9 = 0;
      else
        v9 = FigSignalErrorAt();
      CFRelease(v4);
      v10 = (__CFDictionary *)v7;
    }
    else
    {
      v9 = FigSignalErrorAt();
      v10 = v4;
    }
    CFRelease(v10);
    return v9;
  }
  return FigSignalErrorAt();
}

void copyDataIDDictionaryFilteredByCategoryIndexedByAccessKeyWork(uint64_t a1, const __CFString *a2, uint64_t a3, CFTypeRef *a4)
{
  const __CFString *v7;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *Value;
  CFMutableDictionaryRef v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if (a2)
    v7 = a2;
  else
    v7 = CFSTR("Default");
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 96), v7);
  if (Value)
  {
    v11 = Mutable;
    v12 = a3;
    CFDictionaryApplyFunction(Value, (CFDictionaryApplierFunction)retrieveDataIDsForKey, &v11);
  }
  if (Mutable)
  {
    *a4 = CFRetain(Mutable);
    CFRelease(Mutable);
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t removeDataItem(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const void *v6;
  __CFDictionary *v7;
  uint64_t v8;
  int v9;
  CFStringRef *v10;
  uint64_t v11;
  CFIndex v12;
  const void *ChildAtIndex;
  CFStringRef *Child;
  uint64_t v15;
  const void *v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  const void *v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 88), a2);
  if (Value)
  {
    v5 = Value;
    CFRetain(Value);
    v6 = CFDictionaryGetValue(v5, CFSTR("DataItemDescriptorCategory"));
    v7 = (__CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 96), v6);
    CFDictionaryRemoveValue(v7, a2);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), a2);
    v8 = *(_QWORD *)(DerivedStorage + 48);
    FigXMLNodeGetTag(v8);
    v9 = FigCFEqual();
    if (v8 && v9 && (v10 = FigXMLNodeGetChild(v8, CFSTR("DataItems"))) != 0)
    {
      v11 = (uint64_t)v10;
      if ((uint64_t)FigXMLNodeGetCountOfChildren((uint64_t)v10) >= 1)
      {
        v12 = 0;
        do
        {
          ChildAtIndex = FigXMLNodeGetChildAtIndex(v11, v12);
          FigXMLNodeGetTag((uint64_t)ChildAtIndex);
          if (FigCFEqual())
          {
            Child = FigXMLNodeGetChild((uint64_t)ChildAtIndex, CFSTR("ID"));
            if (Child)
            {
              if (FigXMLNodeGetContentAsCFString((uint64_t)Child) && FigCFEqual())
                break;
            }
          }
          ++v12;
        }
        while (v12 < (uint64_t)FigXMLNodeGetCountOfChildren(v11));
        v21 = ChildAtIndex;
        if (ChildAtIndex)
          FigXMLNodeRemoveAndClearChild(v11, &v21);
      }
    }
    else
    {
      v19 = FigSignalErrorAt();
      if ((_DWORD)v19)
        goto LABEL_23;
    }
    v15 = writeBoot();
    if (!(_DWORD)v15)
    {
      v16 = CFDictionaryGetValue(v5, CFSTR("DataItemURL"));
      v17 = CFDictionaryGetValue(v5, CFSTR("DataItemDescriptorURL"));
      v18 = v17;
      if (v16)
      {
        v19 = FigFileDeleteRecursive();
        if ((_DWORD)v19 || !v18)
          goto LABEL_23;
      }
      else if (!v17)
      {
        v19 = 0;
        goto LABEL_23;
      }
      v15 = FigFileDeleteRecursive();
    }
    v19 = v15;
LABEL_23:
    CFRelease(v5);
    return v19;
  }
  return FigSignalErrorAt();
}

uint64_t setDataItemWork(uint64_t a1, OpaqueCMBlockBuffer *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const __CFAllocator *AllocatorForMedia;
  uint64_t DirectoryAtURL;
  const __CFAllocator *v13;
  __CFDictionary *Mutable;
  uint64_t v15;
  const void *v16;
  const __CFAllocator *v17;
  const __CFUUID *v18;
  const __CFAllocator *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const __CFAllocator *v23;
  const void *v24;
  const __CFURL *v25;
  const void *v26;
  const void *v27;
  const __CFAllocator *v28;
  const __CFString *v29;
  const __CFAllocator *v30;
  CFURLRef v31;
  const __CFAllocator *v32;
  __CFWriteStream *v33;
  __CFWriteStream *v34;
  CFIndex v35;
  const __CFURL *v36;
  const void *v37;
  const void *v38;
  int v39;
  const __CFAllocator *v40;
  CFStringRef v41;
  const __CFString *v42;
  const __CFAllocator *v43;
  CFURLRef v44;
  uint64_t v45;
  CFErrorRef v46;
  _QWORD *v47;
  uint64_t (*v48)(CFErrorRef, uint64_t);
  uint64_t v49;
  int v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  CFStringRef *Child;
  uint64_t v60;
  uint64_t ChildNode;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  const __CFUUID *v74;
  CFTypeRef v75;
  void *value;
  CFTypeRef cf;
  CFTypeRef v78;
  CFTypeRef v79;
  CFTypeRef v80;
  CFTypeRef v81;
  CFTypeRef v82;
  CFTypeRef v83;
  CFTypeRef v84;
  CFTypeRef v85;
  CFErrorRef error;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  cf = 0;
  v7 = CFDictionaryGetValue(a3, CFSTR("DataItemDescriptorCategory"));
  if (v7)
  {
    v8 = v7;
    v9 = CFDictionaryGetValue(a3, CFSTR("DataItemDescriptorName"));
    if (v9)
    {
      v10 = v9;
      if (!*(_QWORD *)(DerivedStorage + 32))
      {
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        *(_QWORD *)(DerivedStorage + 32) = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 8), CFSTR("Data"), 1u);
      }
      if (!FigCFURLDoesDirectoryExist())
      {
        DirectoryAtURL = makeDirectoryAtURL();
        if ((_DWORD)DirectoryAtURL)
          return DirectoryAtURL;
      }
      v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (CFDictionaryGetValueIfPresent(a3, CFSTR("DataItemDescriptorID"), (const void **)&value))
      {
        v15 = removeDataItem(a1, value);
        if ((_DWORD)v15)
        {
          v35 = v15;
          if (!Mutable)
            return v35;
          goto LABEL_103;
        }
        v74 = 0;
        v75 = 0;
        v16 = value;
      }
      else
      {
        v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v18 = CFUUIDCreate(v17);
        v19 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v74 = v18;
        v16 = CFUUIDCreateString(v19, v18);
        v75 = v16;
      }
      CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorID"), v16);
      CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorCategory"), v8);
      CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorName"), v10);
      v20 = CFDictionaryGetValue(a3, CFSTR("DataItemDescriptorPropertyListDescriptor"));
      v21 = CFDictionaryGetValue(a3, CFSTR("DataItemDescriptorRole"));
      if (v21)
        CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorRole"), v21);
      v22 = CFDictionaryGetValue(a3, CFSTR("DataItemDescriptorNetworkURL"));
      if (v22)
        CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorNetworkURL"), v22);
      if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(DerivedStorage + 96), v8, &cf))
      {
        v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
        cf = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 96), v8, cf);
        if (cf)
          CFRelease(cf);
      }
      v24 = v75;
      if (!v20)
        goto LABEL_34;
      v25 = *(const __CFURL **)(DerivedStorage + 32);
      error = 0;
      v26 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorName"));
      v27 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorCategory"));
      v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v29 = CFStringCreateWithFormat(v28, 0, CFSTR("%@-%@-%@.%@"), v27, v26, v75, CFSTR("descriptor"));
      v30 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v31 = CFURLCreateCopyAppendingPathComponent(v30, v25, v29, 0);
      CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorURL"), v31);
      CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorFileName"), v29);
      v32 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v33 = CFWriteStreamCreateWithFile(v32, v31);
      v34 = v33;
      if (v33 && CFWriteStreamOpen(v33) == 1)
      {
        CFPropertyListWrite(v20, v34, kCFPropertyListXMLFormat_v1_0, 0, &error);
        v35 = reportIfError(error);
        if (error)
        {
          CFRelease(error);
          error = 0;
        }
        if (!(_DWORD)v35)
          CFWriteStreamClose(v34);
        if (v29)
          goto LABEL_26;
      }
      else
      {
        v35 = FigSignalErrorAt();
        if (v29)
LABEL_26:
          CFRelease(v29);
      }
      if (v31)
        CFRelease(v31);
      if (error)
        CFRelease(error);
      v24 = v75;
      if (v34)
        CFRelease(v34);
      if ((_DWORD)v35)
        goto LABEL_98;
LABEL_34:
      v36 = *(const __CFURL **)(DerivedStorage + 32);
      error = 0;
      v37 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorName"));
      v38 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorCategory"));
      v39 = FigCFEqual();
      v40 = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (v39)
        v41 = CFStringCreateWithFormat(v40, 0, CFSTR("%@-%@-%@"), v38, v24, v37, v73);
      else
        v41 = CFStringCreateWithFormat(v40, 0, CFSTR("%@-%@-%@.%@"), v38, v24, v37, CFSTR("data"));
      v42 = v41;
      v43 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v44 = CFURLCreateCopyAppendingPathComponent(v43, v36, v42, 0);
      CFDictionarySetValue(Mutable, CFSTR("DataItemURL"), v44);
      CFDictionarySetValue(Mutable, CFSTR("DataItemFileName"), v42);
      FigGetAllocatorForMedia();
      v45 = CMByteStreamCreateForFileURL();
      if (!(_DWORD)v45)
      {
        CMBlockBufferGetDataLength(a2);
        v45 = CMByteStreamWriteBlockBuffer();
        if (!(_DWORD)v45)
        {
          v46 = error;
          v47 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v47 < 2uLL || (v48 = (uint64_t (*)(CFErrorRef, uint64_t))v47[5]) == 0)
          {
            v35 = 4294954514;
LABEL_44:
            if (error)
              CFRelease(error);
            if (v42)
              CFRelease(v42);
            if (v44)
              CFRelease(v44);
            if (!(_DWORD)v35)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)cf, v24, Mutable);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 88), v24, Mutable);
              v49 = *(_QWORD *)(DerivedStorage + 48);
              v85 = 0;
              error = 0;
              v84 = 0;
              v82 = 0;
              v83 = 0;
              v80 = 0;
              v81 = 0;
              v78 = 0;
              v79 = 0;
              FigXMLNodeGetTag(v49);
              v50 = FigCFEqual();
              v51 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorRole"));
              v52 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorCategory"));
              v53 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorID"));
              v54 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorName"));
              v55 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorNetworkURL"));
              v56 = CFDictionaryGetValue(Mutable, CFSTR("DataItemDescriptorFileName"));
              v57 = CFDictionaryGetValue(Mutable, CFSTR("DataItemFileName"));
              if (!v49 || !v50)
              {
                ChildNode = FigSignalErrorAt();
                goto LABEL_110;
              }
              v58 = v57;
              Child = FigXMLNodeGetChild(v49, CFSTR("DataItems"));
              if (Child)
              {
                error = (CFErrorRef)CFRetain(Child);
                if (error)
                {
LABEL_59:
                  v62 = FigGetAllocatorForMedia();
                  ChildNode = FigXMLNodeCreateChildNode(v62, (uint64_t)error, CFSTR("DataItem"), &v85);
                  if (!(_DWORD)ChildNode)
                  {
                    v63 = FigGetAllocatorForMedia();
                    ChildNode = FigXMLNodeCreateChildNode(v63, (uint64_t)v85, CFSTR("ID"), &v84);
                    if (!(_DWORD)ChildNode)
                    {
                      ChildNode = FigXMLNodeContentSetCFString((uint64_t)v84, v53);
                      if (!(_DWORD)ChildNode)
                      {
                        v64 = FigGetAllocatorForMedia();
                        ChildNode = FigXMLNodeCreateChildNode(v64, (uint64_t)v85, CFSTR("Category"), &v83);
                        if (!(_DWORD)ChildNode)
                        {
                          ChildNode = FigXMLNodeContentSetCFString((uint64_t)v83, v52);
                          if (!(_DWORD)ChildNode)
                          {
                            v65 = FigGetAllocatorForMedia();
                            ChildNode = FigXMLNodeCreateChildNode(v65, (uint64_t)v85, CFSTR("Name"), &v82);
                            if (!(_DWORD)ChildNode)
                            {
                              ChildNode = FigXMLNodeContentSetCFString((uint64_t)v82, v54);
                              if (!(_DWORD)ChildNode)
                              {
                                if (!v55
                                  || (v66 = FigGetAllocatorForMedia(),
                                      v67 = FigXMLNodeCreateChildNode(v66, (uint64_t)v85, CFSTR("kDataItemNetworkURL"), &v81), !(_DWORD)v67)&& (v67 = FigXMLNodeContentSetCFString((uint64_t)v81, v55), !(_DWORD)v67))
                                {
                                  if (!v56
                                    || (v68 = FigGetAllocatorForMedia(),
                                        v67 = FigXMLNodeCreateChildNode(v68, (uint64_t)v85, CFSTR("DescriptorPath"), &v80), !(_DWORD)v67)&& (v67 = FigXMLNodeContentSetCFString((uint64_t)v80, v56), !(_DWORD)v67))
                                  {
                                    v69 = FigGetAllocatorForMedia();
                                    v67 = FigXMLNodeCreateChildNode(v69, (uint64_t)v85, CFSTR("DataPath"), &v79);
                                    if (!(_DWORD)v67)
                                    {
                                      v35 = FigXMLNodeContentSetCFString((uint64_t)v79, v58);
                                      v24 = v75;
                                      if (!(_DWORD)v35 && v51)
                                      {
                                        v70 = FigGetAllocatorForMedia();
                                        v71 = FigXMLNodeCreateChildNode(v70, (uint64_t)v85, CFSTR("Role"), &v78);
                                        if (!(_DWORD)v71)
                                          v71 = FigXMLNodeContentSetCFString((uint64_t)v78, v51);
                                        v35 = v71;
                                      }
                                      goto LABEL_78;
                                    }
                                  }
                                }
                                v35 = v67;
LABEL_111:
                                v24 = v75;
LABEL_78:
                                if (v85)
                                  CFRelease(v85);
                                if (error)
                                  CFRelease(error);
                                if (v84)
                                  CFRelease(v84);
                                if (v81)
                                  CFRelease(v81);
                                if (v79)
                                  CFRelease(v79);
                                if (v78)
                                  CFRelease(v78);
                                if (v82)
                                  CFRelease(v82);
                                if (v83)
                                  CFRelease(v83);
                                if (v80)
                                  CFRelease(v80);
                                if (!(_DWORD)v35)
                                  v35 = writeBoot();
                                goto LABEL_98;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_110:
                  v35 = ChildNode;
                  goto LABEL_111;
                }
              }
              else
              {
                error = 0;
              }
              v60 = FigGetAllocatorForMedia();
              ChildNode = FigXMLNodeCreateChildNode(v60, v49, CFSTR("DataItems"), (CFTypeRef *)&error);
              if ((_DWORD)ChildNode)
                goto LABEL_110;
              ChildNode = FigXMLNodeAttributeSetCFString((uint64_t)error, (uint64_t)CFSTR("Directory"), (uint64_t)CFSTR("Data"));
              if ((_DWORD)ChildNode)
                goto LABEL_110;
              goto LABEL_59;
            }
LABEL_98:
            if (v74)
              CFRelease(v74);
            if (v24)
              CFRelease(v24);
            if (!Mutable)
              return v35;
LABEL_103:
            CFRelease(Mutable);
            return v35;
          }
          v45 = v48(v46, 1);
        }
      }
      v35 = v45;
      goto LABEL_44;
    }
  }
  return FigSignalErrorAt();
}

void retrieveDataIDsForKey(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  const void *Value;

  Value = CFDictionaryGetValue(theDict, *(const void **)(a3 + 8));
  if (Value)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a3, Value, a1);
}

uint64_t makeDirectoryAtURL()
{
  uint64_t result;

  result = FigCFURLCreateDirectory();
  if (!(_DWORD)result)
  {
    LODWORD(result) = FigDirectoryEnableDirStatsTracking();
    if ((_DWORD)result == -17916)
      return 0;
    else
      return result;
  }
  return result;
}

CFIndex reportIfError(__CFError *a1)
{
  CFIndex Code;
  CFStringRef v3;

  if (!a1)
    return 0;
  Code = CFErrorGetCode(a1);
  v3 = CFErrorCopyFailureReason(a1);
  if (v3)
    CFRelease(v3);
  return Code;
}

uint64_t copyDataItemWork(uint64_t a1, const void *a2, __CFDictionary **a3, CMBlockBufferRef *a4)
{
  const __CFDictionary *Value;
  const __CFDictionary *v8;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const __CFURL *v17;
  const __CFAllocator *v18;
  __CFReadStream *v19;
  __CFError *v20;
  uint64_t v21;
  const __CFAllocator *v22;
  CFPropertyListRef v23;
  const void *v24;
  uint64_t BlockBuffer;
  uint64_t v26;
  uint64_t CMBaseObject;
  uint64_t (*v28)(uint64_t, _QWORD, uint64_t, CFNumberRef *);
  CFTypeRef v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(CFTypeRef, uint64_t, _QWORD, char *, uint64_t *);
  const void *v33;
  size_t lengthAtOffsetOut;
  size_t totalLengthOut;
  CMBlockBufferRef theBuffer;
  char *dataPointerOut;
  CFNumberRef number;
  uint64_t v40;
  uint64_t valuePtr;
  CFTypeRef cf;
  CFErrorRef error;

  cf = 0;
  error = 0;
  v40 = 0;
  valuePtr = 0;
  dataPointerOut = 0;
  number = 0;
  totalLengthOut = 0;
  theBuffer = 0;
  lengthAtOffsetOut = 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), a2);
  if (!Value)
  {
    v21 = FigSignalErrorAt();
    Mutable = 0;
    v17 = 0;
    goto LABEL_47;
  }
  v8 = Value;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = CFDictionaryGetValue(v8, CFSTR("DataItemDescriptorRole"));
  if (v11)
    CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorRole"), v11);
  v12 = CFDictionaryGetValue(v8, CFSTR("DataItemDescriptorCacheHeader"));
  if (v12)
    CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorCacheHeader"), v12);
  v13 = CFDictionaryGetValue(v8, CFSTR("DataItemDescriptorUniqueTag"));
  if (v13)
    CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorUniqueTag"), v13);
  v14 = CFDictionaryGetValue(v8, CFSTR("DataItemDescriptorCategory"));
  if (v14)
    CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorCategory"), v14);
  v15 = CFDictionaryGetValue(v8, CFSTR("DataItemDescriptorCacheHeader"));
  if (v15)
    CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorCacheHeader"), v15);
  v16 = CFDictionaryGetValue(v8, CFSTR("DataItemDescriptorName"));
  if (v16)
    CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorName"), v16);
  if (!a3)
  {
    v17 = 0;
LABEL_27:
    v23 = 0;
    if (!a4)
      goto LABEL_25;
    goto LABEL_28;
  }
  v17 = (const __CFURL *)CFDictionaryGetValue(v8, CFSTR("DataItemDescriptorURL"));
  if (!v17)
    goto LABEL_27;
  v18 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v19 = CFReadStreamCreateWithFile(v18, v17);
  v17 = v19;
  if (!v19)
  {
    v21 = FigSignalErrorAt();
    goto LABEL_47;
  }
  if (CFReadStreamOpen(v19))
    goto LABEL_21;
  v20 = CFReadStreamCopyError(v17);
  v21 = reportIfError(v20);
  if (v20)
    CFRelease(v20);
  if (!(_DWORD)v21)
  {
LABEL_21:
    v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v23 = CFPropertyListCreateWithStream(v22, v17, 0, 0, 0, &error);
    CFReadStreamClose(v17);
    v21 = reportIfError(error);
    if (error)
    {
      CFRelease(error);
      error = 0;
    }
    if ((_DWORD)v21)
    {
LABEL_45:
      if (!v23)
        goto LABEL_47;
      goto LABEL_46;
    }
    CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorPropertyListDescriptor"), v23);
    if (!a4)
    {
LABEL_25:
      v24 = CFDictionaryGetValue(v8, CFSTR("DataItemFileName"));
      CFDictionarySetValue(Mutable, CFSTR("DataItemFileName"), v24);
      goto LABEL_40;
    }
LABEL_28:
    if (!CFDictionaryGetValue(v8, CFSTR("DataItemURL")))
    {
LABEL_39:
      v33 = CFDictionaryGetValue(v8, CFSTR("DataItemFileName"));
      CFDictionarySetValue(Mutable, CFSTR("DataItemFileName"), v33);
      *a4 = theBuffer;
LABEL_40:
      theBuffer = 0;
      v21 = 0;
      if (a3)
        *a3 = Mutable;
      Mutable = 0;
      if (!v23)
        goto LABEL_47;
LABEL_46:
      CFRelease(v23);
      goto LABEL_47;
    }
    FigGetAllocatorForMedia();
    BlockBuffer = CMByteStreamCreateForFileURL();
    if (!(_DWORD)BlockBuffer)
    {
      v26 = FigGetAllocatorForMedia();
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v28 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
      if (!v28)
      {
LABEL_44:
        v21 = 4294954514;
        goto LABEL_45;
      }
      BlockBuffer = v28(CMBaseObject, *MEMORY[0x1E0CA2070], v26, &number);
      if (!(_DWORD)BlockBuffer)
      {
        CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
        BlockBuffer = persistentStore_ensureMemoryPool(a1);
        if (!(_DWORD)BlockBuffer)
        {
          BlockBuffer = FigMemoryPoolCreateBlockBuffer();
          if (!(_DWORD)BlockBuffer)
          {
            BlockBuffer = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
            if (!(_DWORD)BlockBuffer)
            {
              if (lengthAtOffsetOut != totalLengthOut)
              {
LABEL_62:
                BlockBuffer = FigSignalErrorAt();
                goto LABEL_63;
              }
              v30 = valuePtr;
              v29 = cf;
              v31 = dataPointerOut;
              v32 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 8);
              if (v32)
              {
                BlockBuffer = v32(v29, v30, 0, v31, &v40);
                if ((_DWORD)BlockBuffer)
                  goto LABEL_63;
                if (v40 == valuePtr)
                  goto LABEL_39;
                goto LABEL_62;
              }
              goto LABEL_44;
            }
          }
        }
      }
    }
LABEL_63:
    v21 = BlockBuffer;
    if (!v23)
      goto LABEL_47;
    goto LABEL_46;
  }
LABEL_47:
  if (error)
    CFRelease(error);
  if (v17)
    CFRelease(v17);
  if (cf)
    CFRelease(cf);
  if (number)
    CFRelease(number);
  if (theBuffer)
    CFRelease(theBuffer);
  if (Mutable)
    CFRelease(Mutable);
  return v21;
}

const void *xmlFindStreamNode(uint64_t a1)
{
  CFStringRef *StreamList;
  uint64_t v2;
  CFIndex v3;
  const void *ChildAtIndex;

  StreamList = xmlGetStreamList(a1);
  if (!StreamList)
    return 0;
  v2 = (uint64_t)StreamList;
  if ((uint64_t)FigXMLNodeGetCountOfChildren((uint64_t)StreamList) < 1)
    return 0;
  v3 = 0;
  do
  {
    ChildAtIndex = FigXMLNodeGetChildAtIndex(v2, v3);
    FigXMLNodeGetAttribute();
    if (FigCFEqual())
      break;
    ++v3;
  }
  while (v3 < (uint64_t)FigXMLNodeGetCountOfChildren(v2));
  return ChildAtIndex;
}

CFStringRef *xmlGetStreamList(uint64_t a1)
{
  int v2;

  FigXMLNodeGetTag(a1);
  v2 = FigCFEqual();
  if (a1 && v2)
    return FigXMLNodeGetChild(a1, CFSTR("Streams"));
  else
    return 0;
}

uint64_t xmlRemoveStream(uint64_t a1)
{
  CFStringRef *StreamList;
  uint64_t v3;
  const void *StreamNode;

  StreamList = xmlGetStreamList(a1);
  if (!StreamList)
    return FigSignalErrorAt();
  v3 = (uint64_t)StreamList;
  StreamNode = xmlFindStreamNode(a1);
  if (!StreamNode)
    return FigSignalErrorAt();
  FigXMLNodeRemoveAndClearChild(v3, &StreamNode);
  return 0;
}

uint64_t addStreamToStreamList(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, const void *a7)
{
  const void *v12;
  uint64_t v13;
  const void *Value;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *MutableCopy;
  char v19;
  const __CFAllocator *v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  int v27;
  char v28;
  uint64_t FigBaseObject;
  unsigned int (*v30)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  const void **v31;
  uint64_t v32;
  const __CFDictionary *v34;
  uint64_t v35;

  v12 = a2;
  v13 = a1;
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), a2);
  if (Value && (v15 = (const __CFDictionary *)CFRetain(Value)) != 0)
  {
    v16 = v15;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCopy = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, v16);
    v19 = 0;
  }
  else
  {
    v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCopy = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v16 = 0;
    v19 = 1;
  }
  if (!MutableCopy)
  {
    v32 = FigSignalErrorAt();
    if ((v19 & 1) != 0)
      return v32;
    goto LABEL_22;
  }
  if (FigCFDictionaryGetValue())
  {
    v34 = v16;
    v35 = 0;
    v21 = a3;
    v22 = v13;
    v23 = a4;
    v24 = v12;
    v25 = a5;
    v26 = a7;
    v27 = a6;
    v28 = v19;
    FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject();
    v30 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v30 && v30(FigBaseObject, &stru_1E2FD85F8, 0, &v35) == -12785)
      CFDictionaryRemoveValue(MutableCopy, CFSTR("StreamInformationRef"));
    v19 = v28;
    a6 = v27;
    a7 = v26;
    a5 = v25;
    v12 = v24;
    a4 = v23;
    v13 = v22;
    a3 = v21;
    v16 = v34;
  }
  if (a3)
    CFDictionarySetValue(MutableCopy, CFSTR("StreamInformationURL"), a3);
  v31 = (const void **)MEMORY[0x1E0C9AE50];
  if (a6 != 1)
    v31 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(MutableCopy, CFSTR("StreamInformationComplete"), *v31);
  if (a4)
    CFDictionarySetValue(MutableCopy, CFSTR("StreamInformationNetworkURL"), a4);
  if (a5)
    CFDictionarySetValue(MutableCopy, CFSTR("StreamInformationUniqueTag"), a5);
  if (a7)
    CFDictionarySetValue(MutableCopy, CFSTR("StreamInformationRef"), a7);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 56), v12, MutableCopy);
  CFRelease(MutableCopy);
  v32 = 0;
  if ((v19 & 1) == 0)
LABEL_22:
    CFRelease(v16);
  return v32;
}

uint64_t primeInterstitialAssetFolder()
{
  uint64_t DerivedStorage;
  const __CFAllocator *AllocatorForMedia;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 200))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    *(_QWORD *)(DerivedStorage + 200) = CFURLCreateCopyAppendingPathComponent(AllocatorForMedia, *(CFURLRef *)(DerivedStorage + 8), CFSTR("InterstitialAssets"), 1u);
  }
  if (FigCFURLDoesDirectoryExist())
    return 0;
  else
    return makeDirectoryAtURL();
}

uint64_t addInterstitialAssetWork(uint64_t a1, const void *a2, const void *a3, __CFDictionary *a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  uint64_t v15;
  int v16;
  const void *Value;
  const void *v18;
  CFStringRef *Child;
  uint64_t v20;
  int v21;
  CFStringRef *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __CFDictionary *v29;
  const void *v30;
  __CFDictionary *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3)
  {
    v10 = DerivedStorage;
    v11 = primeInterstitialAssetFolder();
    if ((_DWORD)v11)
      return v11;
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v14 = Mutable;
      if (a5)
      {
        if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(v10 + 216), a2))
        {
          CFDictionarySetValue(v14, CFSTR("InterstitialAssetListFileName"), a3);
          CFDictionarySetValue(v14, CFSTR("InterstitialAssetListNetworkURL"), a2);
          v15 = *(_QWORD *)(v10 + 48);
          v40 = 0;
          cf = 0;
          v38 = 0;
          v39 = 0;
          FigXMLNodeGetTag(v15);
          v16 = FigCFEqual();
          if (v15 && v16)
          {
            Value = CFDictionaryGetValue(v14, CFSTR("InterstitialAssetListNetworkURL"));
            v18 = CFDictionaryGetValue(v14, CFSTR("InterstitialAssetListFileName"));
            Child = FigXMLNodeGetChild(v15, CFSTR("InterstitialAssets"));
            if (Child)
            {
              cf = CFRetain(Child);
              if (cf)
                goto LABEL_21;
            }
            else
            {
              cf = 0;
            }
            v23 = FigGetAllocatorForMedia();
            v24 = FigXMLNodeCreateChildNode(v23, v15, CFSTR("InterstitialAssets"), &cf);
            if (!(_DWORD)v24)
            {
              v24 = FigXMLNodeAttributeSetCFString((uint64_t)cf, (uint64_t)CFSTR("Directory"), (uint64_t)CFSTR("InterstitialAssets"));
              if (!(_DWORD)v24)
              {
LABEL_21:
                v25 = FigGetAllocatorForMedia();
                v24 = FigXMLNodeCreateChildNode(v25, (uint64_t)cf, CFSTR("InterstitialAssetList"), &v40);
                if (!(_DWORD)v24)
                {
                  v26 = FigGetAllocatorForMedia();
                  v24 = FigXMLNodeCreateChildNode(v26, (uint64_t)v40, CFSTR("NetworkURL"), &v39);
                  if (!(_DWORD)v24)
                  {
                    v27 = FigGetAllocatorForMedia();
                    v24 = FigXMLNodeCreateChildNode(v27, (uint64_t)v40, CFSTR("PathToLocalCopy"), &v38);
                    if (!(_DWORD)v24)
                    {
                      v24 = FigXMLNodeContentSetCFString((uint64_t)v39, Value);
                      if (!(_DWORD)v24)
                        v24 = FigXMLNodeContentSetCFString((uint64_t)v38, v18);
                    }
                  }
                }
              }
            }
          }
          else
          {
            v24 = FigSignalErrorAt();
          }
          v28 = v24;
          if (cf)
            CFRelease(cf);
          if (v40)
            CFRelease(v40);
          if (v39)
            CFRelease(v39);
          if (v38)
            CFRelease(v38);
          if ((_DWORD)v28)
            goto LABEL_55;
          v29 = *(__CFDictionary **)(v10 + 216);
          v30 = a2;
          v31 = v14;
          goto LABEL_54;
        }
LABEL_60:
        v28 = 0;
        goto LABEL_55;
      }
      if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v10 + 208), a2))
        goto LABEL_60;
      v20 = *(_QWORD *)(v10 + 48);
      v40 = 0;
      cf = 0;
      v38 = 0;
      v39 = 0;
      FigXMLNodeGetTag(v20);
      v21 = FigCFEqual();
      if (v20 && v21)
      {
        v22 = FigXMLNodeGetChild(v20, CFSTR("InterstitialAssets"));
        if (v22)
        {
          cf = CFRetain(v22);
          if (cf)
            goto LABEL_39;
        }
        else
        {
          cf = 0;
        }
        v32 = FigGetAllocatorForMedia();
        v33 = FigXMLNodeCreateChildNode(v32, v20, CFSTR("InterstitialAssets"), &cf);
        if (!(_DWORD)v33)
        {
          v33 = FigXMLNodeAttributeSetCFString((uint64_t)cf, (uint64_t)CFSTR("Directory"), (uint64_t)CFSTR("InterstitialAssets"));
          if (!(_DWORD)v33)
          {
LABEL_39:
            v34 = FigGetAllocatorForMedia();
            v33 = FigXMLNodeCreateChildNode(v34, (uint64_t)cf, CFSTR("InterstitialAsset"), &v40);
            if (!(_DWORD)v33)
            {
              v35 = FigGetAllocatorForMedia();
              v33 = FigXMLNodeCreateChildNode(v35, (uint64_t)v40, CFSTR("NetworkURL"), &v38);
              if (!(_DWORD)v33)
              {
                v36 = FigGetAllocatorForMedia();
                v33 = FigXMLNodeCreateChildNode(v36, (uint64_t)v40, CFSTR("PathToLocalCopy"), &v39);
                if (!(_DWORD)v33)
                {
                  v33 = FigXMLNodeContentSetCFString((uint64_t)v38, a2);
                  if (!(_DWORD)v33)
                    v33 = FigXMLNodeContentSetCFString((uint64_t)v39, a3);
                }
              }
            }
          }
        }
      }
      else
      {
        v33 = FigSignalErrorAt();
      }
      v28 = v33;
      if (cf)
        CFRelease(cf);
      if (v40)
        CFRelease(v40);
      if (v39)
        CFRelease(v39);
      if (v38)
        CFRelease(v38);
      if ((_DWORD)v28)
        goto LABEL_55;
      v29 = *(__CFDictionary **)(v10 + 208);
      v30 = a2;
      v31 = a4;
LABEL_54:
      CFDictionarySetValue(v29, v30, v31);
      v28 = writeBoot();
LABEL_55:
      CFRelease(v14);
      return v28;
    }
  }
  return FigSignalErrorAt();
}

void figNSURLSessionAssertionFinalize(void *a1)
{
  objc_msgSend((id)sFigNSURLSessionRegistry, "releaseSession:", a1);

}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_192EE58A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

void _FigHTTPRequestSessionNoteNativeConnectionForNSURLSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  _QWORD v5[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(NSObject **)(DerivedStorage + 32);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___FigHTTPRequestSessionNoteNativeConnectionForNSURLSession_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a2;
  v5[5] = DerivedStorage;
  dispatch_sync(v4, v5);
}

uint64_t _FigHTTPRequestSessionCreateForNSURLSession()
{
  void *v0;
  uint64_t v2;
  CFTypeRef cf;
  CFTypeRef v4;

  cf = 0;
  v4 = 0;
  if (figNSURLSessionRegistryEnsureGlobalInit_sFigNSURLSessionInit != -1)
    dispatch_once(&figNSURLSessionRegistryEnsureGlobalInit_sFigNSURLSessionInit, &__block_literal_global_86);
  if (!sFigNSURLSessionRegistry)
    return FigSignalErrorAt();
  v0 = (void *)MEMORY[0x19403137C]();
  if (FigHTTPRequestSessionNSGetClassID_sRegisterFigHTTPRequestSessionNSTypeOnce != -1)
    dispatch_once(&FigHTTPRequestSessionNSGetClassID_sRegisterFigHTTPRequestSessionNSTypeOnce, &__block_literal_global_102);
  CMDerivedObjectCreate();
  v2 = FigSignalErrorAt();
  objc_autoreleasePoolPop(v0);
  if (cf)
    CFRelease(cf);
  return v2;
}

FigNSURLSessionRegistry *__figNSURLSessionRegistryEnsureGlobalInit_block_invoke()
{
  FigNSURLSessionRegistry *result;

  result = objc_alloc_init(FigNSURLSessionRegistry);
  sFigNSURLSessionRegistry = (uint64_t)result;
  return result;
}

void figHTTPRequestSessionNSFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();

  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 56);
  if (v3)
    CFRelease(v3);
  dispatch_release(*(dispatch_object_t *)(DerivedStorage + 32));
}

uint64_t figHTTPRequestSessionNSCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("FHRSP_MultiPathServiceType")))
    return 4294954512;
  v7 = *(CFTypeRef *)(DerivedStorage + 24);
  if (v7)
    v7 = CFRetain(v7);
  *a4 = v7;
  if (*(_QWORD *)(DerivedStorage + 24))
    return 0;
  else
    return 4294954513;
}

uint64_t figHTTPRequestSessionNSSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 32);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __figHTTPRequestSessionNSSetProperty_block_invoke;
  v9[3] = &unk_1E2F991F0;
  v9[6] = DerivedStorage;
  v9[7] = a3;
  v9[4] = &v10;
  v9[5] = a2;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_192EE63DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __figHTTPRequestSessionNSSetProperty_block_invoke(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;

  if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FHRSP_EnablePingReporting")))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + 48) = FigCFEqual();
  }
  else if (CFEqual(*(CFTypeRef *)(a1 + 40), CFSTR("FHRSP_CMCDHeaderVendor")))
  {
    v3 = *(_QWORD *)(a1 + 48);
    v2 = *(const void **)(a1 + 56);
    v4 = *(const void **)(v3 + 56);
    *(_QWORD *)(v3 + 56) = v2;
    if (v2)
      CFRetain(v2);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -12784;
  }
}

uint64_t figHTTPRequestSessionNSCreateHTTPRequest(uint64_t a1, const __CFAllocator *a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFDictionary *a6, const void *a7, int a8, _OWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t DerivedStorage;
  uint64_t v23;
  int v24;
  const void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __CFDictionary *MutableCopy;
  uint64_t v31;
  uint64_t v33;
  _OWORD v35[7];
  __CFDictionary *v36;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 48))
    v24 = a8 | 0x2000;
  else
    v24 = a8;
  v25 = *(const void **)(DerivedStorage + 56);
  if (!v25)
  {
    MutableCopy = 0;
LABEL_19:
    LODWORD(v33) = v24;
    v31 = _FigHTTPRequestCreateWithNSURLSession((uint64_t)a2, a3, a4, a5, (uint64_t)a6, a1, objc_msgSend(*(id *)(v23 + 8), "session"), *(_QWORD *)v23, objc_msgSend(*(id *)(v23 + 8), "dataDelegate"), objc_msgSend(*(id *)(v23 + 8), "dispatchQueue"), a7, v33, a10, a11, a12, a13, a14, a15);
    goto LABEL_20;
  }
  v26 = a9[5];
  v35[4] = a9[4];
  v35[5] = v26;
  v35[6] = a9[6];
  v27 = a9[1];
  v35[0] = *a9;
  v35[1] = v27;
  v28 = a9[3];
  v35[2] = a9[2];
  v35[3] = v28;
  v36 = 0;
  v29 = FigCMCDHeaderVendorCopyHeaders(v25, (uint64_t)v35, &v36);
  if ((_DWORD)v29)
  {
    v31 = v29;
    MutableCopy = 0;
    goto LABEL_16;
  }
  if (!FigCFDictionaryGetCount())
  {
    if (a6)
      MutableCopy = (__CFDictionary *)CFRetain(a6);
    else
      MutableCopy = 0;
    goto LABEL_15;
  }
  if (!FigCFDictionaryGetCount())
  {
    MutableCopy = v36;
    a6 = v36;
    goto LABEL_19;
  }
  MutableCopy = CFDictionaryCreateMutableCopy(a2, 0, a6);
  if (MutableCopy)
  {
    FigCFDictionarySetAllValuesFromDictionary();
LABEL_15:
    v31 = 0;
    goto LABEL_16;
  }
  v31 = FigSignalErrorAt();
LABEL_16:
  if (v36)
    CFRelease(v36);
  a6 = MutableCopy;
  if (!(_DWORD)v31)
    goto LABEL_19;
LABEL_20:
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v31;
}

uint64_t figHTTPRequestSessionNSSendPingWithPongHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[8];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v12 = *(NSObject **)(DerivedStorage + 32);
  v13 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __figHTTPRequestSessionNSSendPingWithPongHandler_block_invoke;
  v18[3] = &unk_1E2F87F08;
  v18[4] = &v19;
  v18[5] = DerivedStorage;
  dispatch_sync(v12, v18);
  v14 = (void *)v20[3];
  if (v14)
  {
    if (objc_msgSend((id)v20[3], "isValid"))
    {
      v23[0] = v13;
      v23[1] = 3221225472;
      v23[2] = __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke;
      v23[3] = &unk_1E2FAE770;
      v23[4] = a5;
      v23[5] = a7;
      v23[6] = a4;
      v23[7] = a6;
      objc_msgSend(v14, "sendPingWithReceiveHandler:", v23);
      v15 = 0;
    }
    else
    {
      v15 = 4294954511;
    }
  }
  else
  {
    v15 = FigSignalErrorAt();
  }
  v16 = (const void *)v20[3];
  if (v16)
    CFRelease(v16);
  _Block_object_dispose(&v19, 8);
  return v15;
}

void sub_192EE67F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *__figHTTPRequestSessionNSSendPingWithPongHandler_block_invoke(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[5];
  if (*(_BYTE *)(v1 + 48))
  {
    v2 = result;
    result = *(_QWORD **)(v1 + 40);
    if (result)
      result = CFRetain(result);
    *(_QWORD *)(*(_QWORD *)(v2[4] + 8) + 24) = result;
  }
  return result;
}

void __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v3;
  _QWORD block[5];
  __int128 v5;
  uint64_t v6;
  double v7;

  v3 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke_2;
  block[3] = &unk_1E2FAE748;
  block[4] = a2;
  v5 = *(_OWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = a3;
  dispatch_async(v3, block);
}

uint64_t __figHTTPRequestSessionNativeConnectionSendPingForNSURLSession_block_invoke_2(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
    v3 = objc_msgSend(v2, "code");
  else
    v3 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, double))(a1 + 48))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), v3, *(double *)(a1 + 64));
}

CFStringRef FigHTTPRequestSessionNSBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigHTTPRequestSessionNS %p]"), a1);
}

uint64_t FigVideoQueueServerStart()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  if (FigServer_IsMediaparserd())
    return FigRPCStartServer();
  FigServer_IsMediaplaybackd();
  if (!FigServer_IsMediaparserd())
    FigServer_IsMediaplaybackd();
  return FigRPCStartServerUsingMachChannel();
}

uint64_t FigVideoQueueRemoteServer_Destroy()
{
  uint64_t v0;
  uint64_t v1;

  v0 = FigRPCLookupClientConnection();
  if ((_DWORD)v0)
    return v0;
  v1 = FigRPCGetConnectionInfo();
  if (!(_DWORD)v1)
    FigRPCDisposeClientConnection();
  return v1;
}

uint64_t FigVideoQueueRemoteServer_Create(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, _DWORD *a6, _QWORD *a7, uint64_t *a8, _DWORD *a9, _OWORD *a10)
{
  __int128 v15;
  int ClientPIDFromAuditToken;
  const __CFAllocator *v17;
  int v18;
  CFStringRef v19;
  CFTypeRef v20;
  __int128 v21;
  int v22;
  uint64_t *v23;
  const __CFString *v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v26;
  unsigned int v27;
  uint64_t DerivedStorage;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t CMBaseObject;
  void (*v34)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v35;
  CFTypeRef v36;
  const void *v37;
  int UsingPrimaryCMSessionForAuditToken;
  int v39;
  __int128 v40;
  SecTaskRef v41;
  SecTaskRef v42;
  uint64_t v43;
  void (*v44)(uint64_t, const __CFString *, _QWORD);
  uint64_t v45;
  void (*v46)(uint64_t, const __CFString *, _QWORD);
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  int v51;
  _QWORD *v52;
  int v53;
  CFTypeRef SInt32;
  CFTypeRef v55;
  os_log_type_t type;
  unsigned int v57;
  uint64_t v58;
  CFTypeRef cf;
  audit_token_t v60;
  int v61;
  const char *v62;
  __int16 v63;
  CFTypeRef v64;
  __int16 v65;
  CFTypeRef v66;
  audit_token_t token;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  v15 = a10[1];
  *(_OWORD *)token.val = *a10;
  *(_OWORD *)&token.val[4] = v15;
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = FigVideoQueueCreateLocal(*MEMORY[0x1E0C9AE00], &v55);
  if (v18)
  {
    v39 = v18;
    v19 = 0;
    goto LABEL_53;
  }
  v52 = a7;
  if (a5)
    v19 = CFStringCreateWithCString(v17, a5, 0x8000100u);
  else
    v19 = 0;
  FigProcessInfoCreateWithDetails();
  v20 = v55;
  v21 = a10[1];
  *(_OWORD *)v60.val = *a10;
  *(_OWORD *)&v60.val[4] = v21;
  v58 = 0;
  cf = 0;
  SInt32 = (CFTypeRef)FigCFNumberCreateSInt32();
  FigVideoQueueGetClassID();
  v22 = CMDerivedObjectCreate();
  if (v22)
  {
    v39 = v22;
    goto LABEL_30;
  }
  v53 = a4;
  if (dword_1EE2A3348)
  {
    v51 = ClientPIDFromAuditToken;
    v23 = a8;
    v24 = v19;
    v57 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v26 = v57;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
      v27 = v26;
    else
      v27 = v26 & 0xFFFFFFFE;
    if (v27)
    {
      v61 = 136315650;
      v62 = "videoQueueServer_makeWrapperForVideoQueueInternal";
      v63 = 2048;
      v64 = cf;
      v65 = 2048;
      v66 = v20;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v19 = v24;
    a8 = v23;
    ClientPIDFromAuditToken = v51;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)DerivedStorage = v20;
  CFRetain(v20);
  *(_DWORD *)(DerivedStorage + 72) = ClientPIDFromAuditToken;
  *(_QWORD *)(DerivedStorage + 80) = 0;
  v29 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 56) = v29;
  if (!v29
    || (v30 = FigOSTransactionCreate(), (*(_QWORD *)(DerivedStorage + 24) = v30) == 0)
    || (v31 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 48) = v31) == 0))
  {
    v39 = FigSignalErrorAt();
    goto LABEL_60;
  }
  *(_QWORD *)(DerivedStorage + 64) = 0;
  v32 = FigRPCCreateClientConnectionWithNotifications();
  if (v32)
  {
LABEL_59:
    v39 = v32;
    goto LABEL_60;
  }
  CMBaseObject = FigVideoQueueGetCMBaseObject(*(_QWORD *)DerivedStorage);
  v34 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v34)
    v34(CMBaseObject, CFSTR("ClientPID"), SInt32);
  v35 = CMBaseObjectGetDerivedStorage();
  v36 = videoQueueServer_copySubVideoQueue();
  if (!v36)
  {
    v39 = FigSignalErrorAt();
    if (v39)
      goto LABEL_60;
    goto LABEL_27;
  }
  v37 = v36;
  if (in_audio_mx_server_process())
  {
    token = v60;
    UsingPrimaryCMSessionForAuditToken = FigAudioSessionCreateUsingPrimaryCMSessionForAuditToken((uint64_t)v17, (uint64_t)&token, (_QWORD *)(v35 + 16));
    if (UsingPrimaryCMSessionForAuditToken)
      goto LABEL_66;
  }
  else
  {
    token = v60;
    UsingPrimaryCMSessionForAuditToken = FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken((uint64_t)v17, &token, CFSTR("FigVideoQueue"), (_QWORD *)(v35 + 16));
    if (UsingPrimaryCMSessionForAuditToken)
      goto LABEL_66;
  }
  if (*(_QWORD *)(v35 + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    v39 = 0;
    goto LABEL_26;
  }
  UsingPrimaryCMSessionForAuditToken = FigSignalErrorAt();
LABEL_66:
  v39 = UsingPrimaryCMSessionForAuditToken;
LABEL_26:
  CFRelease(v37);
  if (!v39)
  {
LABEL_27:
    CMNotificationCenterGetDefaultLocalCenter();
    v32 = FigNotificationCenterAddWeakListener();
    if (!v32)
    {
      v39 = FigRPCGetConnectionInfo();
      a4 = v53;
      if (!v39)
      {
        *v52 = 0;
        v58 = 0;
      }
      goto LABEL_30;
    }
    goto LABEL_59;
  }
LABEL_60:
  a4 = v53;
LABEL_30:
  if (cf)
    CFRelease(cf);
  if (SInt32)
    CFRelease(SInt32);
  FigMachPortReleaseSendRight_();
  if (v58)
    FigRPCDisposeClientConnection();
  if (!v39)
  {
    v40 = a10[1];
    *(_OWORD *)token.val = *a10;
    *(_OWORD *)&token.val[4] = v40;
    v41 = SecTaskCreateWithAuditToken(v17, &token);
    if (v41)
    {
      v42 = v41;
      if (VTIsSecTaskEntitledForVP9Decode())
      {
        v43 = FigVideoQueueGetCMBaseObject(v55);
        v44 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
        if (v44)
          v44(v43, CFSTR("AllowAlternateVideoDecoderSelection"), *MEMORY[0x1E0C9AE50]);
      }
      CFRelease(v42);
    }
    if (!a4)
    {
      v45 = FigVideoQueueGetCMBaseObject(v55);
      v46 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v46)
        v46(v45, CFSTR("EnableFlushCAToRemoveImage"), *MEMORY[0x1E0C9AE40]);
    }
    *a8 = FigRemote_GetServerTimeoutToken();
    if (dword_1EE2A3348)
    {
      v60.val[0] = 0;
      LOBYTE(cf) = 0;
      v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v48 = v60.val[0];
      if (os_log_type_enabled(v47, (os_log_type_t)cf))
        v49 = v48;
      else
        v49 = v48 & 0xFFFFFFFE;
      if (v49)
      {
        v61 = 136315394;
        v62 = "FigVideoQueueRemoteServer_Create";
        v63 = 1024;
        LODWORD(v64) = ClientPIDFromAuditToken;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v39 = 0;
  }
LABEL_53:
  if (v55)
    CFRelease(v55);
  if (v19)
    CFRelease(v19);
  FigMachPortReleaseSendRight_();
  *a9 = v39;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_GetNextPendingNotification(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, vm_address_t *a5, unsigned int *a6)
{
  uint64_t v9;
  uint64_t PendingNotification;
  unsigned int Length;
  uint64_t v12;
  void *v13;
  const UInt8 *BytePtr;
  uint64_t v16;
  CFTypeRef v17;
  CFDataRef theData;
  CFStringRef theString;
  CFTypeRef cf;

  v16 = 0;
  v17 = 0;
  v9 = videoQueueServerCopyClientFromCommandPort(a1, &v16);
  if (!v17)
    return v9;
  theString = 0;
  cf = 0;
  theData = 0;
  PendingNotification = FigRPCFetchNextPendingNotification();
  if ((_DWORD)PendingNotification)
  {
    v12 = PendingNotification;
  }
  else
  {
    MEMORY[0x19402EA30](cf, *MEMORY[0x1E0C9AE00], &theData);
    CFStringGetCString(theString, a4, 512, 0);
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (theString)
    {
      CFRelease(theString);
      theString = 0;
    }
    if (theData && CFDataGetLength(theData))
    {
      Length = CFDataGetLength(theData);
      *a6 = Length;
      v12 = vm_allocate(*MEMORY[0x1E0C83DA0], a5, Length, 1560281089);
      if (!(_DWORD)v12)
      {
        v13 = (void *)*a5;
        BytePtr = CFDataGetBytePtr(theData);
        memcpy(v13, BytePtr, *a6);
      }
    }
    else
    {
      v12 = 0;
      *a5 = 0;
      *a6 = 0;
    }
  }
  if (theData)
    CFRelease(theData);
  CFRelease(v17);
  return v12;
}

uint64_t videoQueueServerCopyClientFromCommandPort(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = FigRPCLookupClientConnection();
  if (!(_DWORD)result)
  {
    result = FigRPCGetConnectionInfo();
    if (a2)
    {
      if (!(_DWORD)result)
        *a2 = 0;
    }
  }
  return result;
}

uint64_t FigVideoQueueRemoteServer_GetProperty(uint64_t a1, const char *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  const void *v5;
  uint64_t v6;
  CFStringRef v7;
  uint64_t (*v8)(const void *, CFStringRef, uint64_t, CFTypeRef *);
  uint64_t VMBufferFromPropertyList;
  CFTypeRef cf;
  CFTypeRef v12;

  cf = 0;
  v12 = 0;
  v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if ((_DWORD)v3)
    goto LABEL_15;
  CMBaseObjectGetDerivedStorage();
  v4 = videoQueueServer_copySubVideoQueue();
  if (!v4)
  {
    v3 = FigSignalErrorAt();
LABEL_15:
    VMBufferFromPropertyList = v3;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = *MEMORY[0x1E0C9AE00];
  v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
  v8 = *(uint64_t (**)(const void *, CFStringRef, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v8)
  {
    VMBufferFromPropertyList = v8(v5, v7, v6, &cf);
    if (!(_DWORD)VMBufferFromPropertyList)
      VMBufferFromPropertyList = FigRemote_CreateVMBufferFromPropertyList();
  }
  else
  {
    VMBufferFromPropertyList = 4294954514;
  }
  CFRelease(v5);
  if (v7)
    CFRelease(v7);
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return VMBufferFromPropertyList;
}

CFTypeRef videoQueueServer_copySubVideoQueue()
{
  uint64_t DerivedStorage;
  CFTypeRef v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
  if (*(_QWORD *)DerivedStorage)
    v1 = CFRetain(*(CFTypeRef *)DerivedStorage);
  else
    v1 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
  return v1;
}

uint64_t FigVideoQueueRemoteServer_SetProperty(uint64_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  CFTypeRef v8;
  const void *v9;
  const __CFAllocator *v10;
  const void *v11;
  uint64_t v12;
  const __CFArray *v13;
  CFTypeID v14;
  uint64_t v15;
  CFMutableArrayRef v16;
  CFMutableArrayRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFArray *v21;
  CFTypeID v22;
  uint64_t Count;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v25;
  uint64_t v26;
  uint64_t v27;
  CFTypeRef v28;
  uint64_t (*v29)(const void *, const void *, CFTypeRef);
  CFTypeRef cf;
  CFTypeRef v32;
  void *value;
  uint64_t v34;

  cf = 0;
  v32 = 0;
  v7 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (!(_DWORD)v7)
  {
    CMBaseObjectGetDerivedStorage();
    v8 = videoQueueServer_copySubVideoQueue();
    if (v8)
    {
      v9 = v8;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v11 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0);
      v12 = MEMORY[0x19402EA9C](a3, a4, v10, &cf);
      if ((_DWORD)v12)
        goto LABEL_48;
      if (!FigCFEqual())
      {
LABEL_24:
        if (!FigCFEqual())
        {
LABEL_46:
          v28 = cf;
          v29 = *(uint64_t (**)(const void *, const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
          if (!v29)
          {
            v20 = 4294954514;
            goto LABEL_50;
          }
          v12 = v29(v9, v11, v28);
LABEL_48:
          v20 = v12;
LABEL_50:
          CFRelease(v9);
          goto LABEL_51;
        }
        v21 = (const __CFArray *)cf;
        if (cf
          && (v22 = CFGetTypeID(cf), v22 == CFArrayGetTypeID())
          && (Count = CFArrayGetCount(v21), (Mutable = CFArrayCreateMutable(v10, Count, MEMORY[0x1E0C9B378])) != 0))
        {
          v25 = Mutable;
          if (Count < 1)
          {
LABEL_39:
            if (cf)
              CFRelease(cf);
            cf = v25;
            if (v11)
              CFRelease(v11);
            if (CFSTR("VideoTargetArray"))
              v11 = CFRetain(CFSTR("VideoTargetArray"));
            else
              v11 = 0;
            goto LABEL_46;
          }
          v26 = 0;
          while (1)
          {
            v34 = 0;
            if (!FigCFArrayGetInt64AtIndex())
              break;
            value = 0;
            v27 = FigXPCVideoTargetServerCopyVideoTargetForID();
            if ((_DWORD)v27)
              goto LABEL_37;
            CFArrayAppendValue(v25, value);
            if (value)
              CFRelease(value);
            if (Count == ++v26)
              goto LABEL_39;
          }
          v27 = FigSignalErrorAt();
LABEL_37:
          v20 = v27;
          CFRelease(v25);
          if ((_DWORD)v20)
            goto LABEL_50;
        }
        else
        {
          v20 = FigSignalErrorAt();
          if ((_DWORD)v20)
            goto LABEL_50;
        }
        v25 = 0;
        goto LABEL_39;
      }
      v13 = (const __CFArray *)cf;
      if (cf
        && (v14 = CFGetTypeID(cf), v14 == CFArrayGetTypeID())
        && (v15 = CFArrayGetCount(v13), (v16 = CFArrayCreateMutable(v10, v15, MEMORY[0x1E0C9B378])) != 0))
      {
        v17 = v16;
        if (v15 < 1)
        {
LABEL_17:
          if (cf)
            CFRelease(cf);
          cf = v17;
          if (v11)
            CFRelease(v11);
          if (CFSTR("VisualContextArray"))
            v11 = CFRetain(CFSTR("VisualContextArray"));
          else
            v11 = 0;
          goto LABEL_24;
        }
        v18 = 0;
        while (1)
        {
          v34 = 0;
          if (!FigCFArrayGetInt64AtIndex())
            break;
          value = 0;
          v19 = FigVisualContextServerRetainVisualContextForID();
          if ((_DWORD)v19)
            goto LABEL_15;
          CFArrayAppendValue(v17, value);
          CFRelease(value);
          if (v15 == ++v18)
            goto LABEL_17;
        }
        v19 = FigSignalErrorAt();
LABEL_15:
        v20 = v19;
        CFRelease(v17);
        if ((_DWORD)v20)
          goto LABEL_50;
      }
      else
      {
        v20 = FigSignalErrorAt();
        if ((_DWORD)v20)
          goto LABEL_50;
      }
      v17 = 0;
      goto LABEL_17;
    }
    v7 = FigSignalErrorAt();
  }
  v20 = v7;
  v11 = 0;
LABEL_51:
  if (v32)
    CFRelease(v32);
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  if (a3 && !(_DWORD)v20)
    MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a3, a4);
  return v20;
}

uint64_t FigVideoQueueRemoteServer_Start(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  const void *v5;
  uint64_t (*v6)(const void *, uint64_t);
  uint64_t v7;

  v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if ((_DWORD)v3)
    return v3;
  CMBaseObjectGetDerivedStorage();
  v4 = videoQueueServer_copySubVideoQueue();
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    v7 = v6(v5, a2);
  else
    v7 = 4294954514;
  CFRelease(v5);
  return v7;
}

uint64_t FigVideoQueueRemoteServer_EnqueueVideoSampleBuffer(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  int v27;
  CFTypeRef v28;
  int SampleBufferFromSerializedAtomData;
  uint64_t (*v30)(CFTypeRef, _QWORD, uint64_t, double, double, double, double, double, double, double, double);
  int v31;

  v27 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v27)
  {
    v31 = v27;
    v28 = 0;
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    v28 = videoQueueServer_copySubVideoQueue();
    if (v28)
    {
      SampleBufferFromSerializedAtomData = FigRemote_CreateSampleBufferFromSerializedAtomData();
      if (SampleBufferFromSerializedAtomData)
      {
LABEL_6:
        v31 = SampleBufferFromSerializedAtomData;
        a4 = 0;
        goto LABEL_8;
      }
      v30 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v30)
      {
        SampleBufferFromSerializedAtomData = v30(v28, 0, a5, a7, a8, a9, a10, a11, a12, a13, a14);
        goto LABEL_6;
      }
      a4 = 0;
      v31 = -12782;
    }
    else
    {
      v31 = FigSignalErrorAt();
    }
  }
LABEL_8:
  if (a2)
    FigMachPortReleaseSendRight_();
  if (a4)
    MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a3, a4);
  if (v28)
    CFRelease(v28);
  if (a6)
    *a6 = v31;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_EnqueueH264Frame(uint64_t a1, uint64_t a2, uint64_t a3, const UInt8 *a4, unsigned int a5, void *a6, unsigned int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, int *a18)
{
  int v32;
  CFTypeRef v33;
  CFDataRef v34;
  uint64_t v35;
  CMBlockBufferRef v36;
  const __CFAllocator *v37;
  OSStatus v38;
  uint64_t (*v39)(CFTypeRef, uint64_t, uint64_t, CFDataRef, CMBlockBufferRef, uint64_t, _QWORD, double, double, double, double, double, double, double, double);
  int v40;
  unsigned int *v41;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;

  blockBufferOut = 0;
  cf = 0;
  v32 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v32)
  {
    v40 = v32;
    v34 = 0;
    v33 = 0;
    goto LABEL_13;
  }
  CMBaseObjectGetDerivedStorage();
  v33 = videoQueueServer_copySubVideoQueue();
  if (!v33)
  {
    v40 = FigSignalErrorAt();
    v34 = 0;
    goto LABEL_13;
  }
  v34 = 0;
  if (a4)
  {
    if (a5)
    {
      v35 = a5;
      v34 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, a5);
      if (!v34)
      {
        v40 = -108;
LABEL_15:
        v41 = (unsigned int *)MEMORY[0x1E0C83DA0];
        MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a4, v35);
        if (!a7)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
  }
  v36 = 0;
  if (a6 && a7)
  {
    v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    sVMAllocatedDataBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate;
    v38 = CMBlockBufferCreateWithMemoryBlock(v37, a6, a7, v37, &sVMAllocatedDataBlockSource, 0, a7, 0, &blockBufferOut);
    if (v38)
    {
      v40 = v38;
      goto LABEL_13;
    }
    v36 = blockBufferOut;
  }
  v39 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFDataRef, CMBlockBufferRef, uint64_t, _QWORD, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v39)
  {
    v40 = v39(v33, a2, a3, v34, v36, a8, a17, a9, a10, a11, a12, a13, a14, a15, a16);
    a7 = 0;
  }
  else
  {
    a7 = 0;
    v40 = -12782;
  }
LABEL_13:
  if (a5)
  {
    v35 = a5;
    goto LABEL_15;
  }
  v41 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (a7)
LABEL_16:
    MEMORY[0x19403197C](*v41, a6, a7);
LABEL_17:
  if (v33)
    CFRelease(v33);
  if (v34)
    CFRelease(v34);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  if (a18)
    *a18 = v40;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_EnqueueH264FrameWithTimingInfoBaggage(uint64_t a1, uint64_t a2, uint64_t a3, const UInt8 *a4, unsigned int a5, void *a6, unsigned int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, uint64_t a18, unsigned int a19, int *a20)
{
  int v33;
  CFTypeRef v34;
  CFDataRef v35;
  uint64_t v36;
  const __CFAllocator *v37;
  OSStatus v38;
  CFTypeRef v39;
  int v40;
  CMBlockBufferRef v41;
  uint64_t v42;
  int v43;
  unsigned int *v44;
  CFTypeRef cf;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v50;

  blockBufferOut = 0;
  v50 = 0;
  cf = 0;
  v33 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v33)
  {
    v43 = v33;
    v35 = 0;
    v34 = 0;
  }
  else
  {
    CMBaseObjectGetDerivedStorage();
    v34 = videoQueueServer_copySubVideoQueue();
    if (v34)
    {
      v35 = 0;
      if (a4)
      {
        if (a5)
        {
          v36 = a5;
          v35 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, a5);
          if (!v35)
          {
            v43 = -108;
LABEL_19:
            v44 = (unsigned int *)MEMORY[0x1E0C83DA0];
            MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a4, v36);
            if (!a7)
              goto LABEL_21;
            goto LABEL_20;
          }
        }
      }
      if (a6
        && a7
        && (v37 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
            sVMAllocatedDataBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate,
            (v38 = CMBlockBufferCreateWithMemoryBlock(v37, a6, a7, v37, &sVMAllocatedDataBlockSource, 0, a7, 0, &blockBufferOut)) != 0))
      {
        v43 = v38;
      }
      else
      {
        v39 = 0;
        if (a18 && a19)
        {
          v40 = MEMORY[0x19402EA9C](a18, a19, *MEMORY[0x1E0C9AE00], &cf);
          if (v40)
          {
LABEL_15:
            v43 = v40;
            a7 = 0;
            goto LABEL_17;
          }
          v39 = cf;
        }
        v41 = blockBufferOut;
        v42 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (*(_QWORD *)(v42 + 24))
        {
          v40 = (*(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFDataRef, CMBlockBufferRef, uint64_t, _QWORD, CFTypeRef, double, double, double, double, double, double, double, double))(v42 + 32))(v34, a2, a3, v35, v41, a8, a17, v39, a9, a10, a11, a12, a13, a14, a15, a16);
          goto LABEL_15;
        }
        a7 = 0;
        v43 = -12782;
      }
    }
    else
    {
      v43 = FigSignalErrorAt();
      v35 = 0;
    }
  }
LABEL_17:
  if (a5)
  {
    v36 = a5;
    goto LABEL_19;
  }
  v44 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (a7)
LABEL_20:
    MEMORY[0x19403197C](*v44, a6, a7);
LABEL_21:
  if (a19)
    MEMORY[0x19403197C](*v44, a18, a19);
  if (v34)
    CFRelease(v34);
  if (v35)
    CFRelease(v35);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (cf)
    CFRelease(cf);
  if (v50)
    CFRelease(v50);
  if (a20)
    *a20 = v43;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(uint64_t a1, void *a2, int a3, void *a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, unsigned int a17, int *a18)
{
  uint64_t v21;
  uint64_t v23;
  int v33;
  CFTypeRef v34;
  const void *v35;
  const __CFAllocator *v36;
  OSStatus v37;
  const __CFAllocator *v38;
  OSStatus v39;
  CFTypeRef v40;
  int v41;
  CMBlockBufferRef v42;
  CMBlockBufferRef v43;
  uint64_t (*v44)(const void *, CMBlockBufferRef, CMBlockBufferRef, uint64_t, uint64_t, CFTypeRef, double, double, double, double, double, double, double, double);
  int v45;
  CFTypeRef cf;
  CMBlockBufferRef v48;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v50;

  LODWORD(v21) = a5;
  LODWORD(v23) = a3;
  blockBufferOut = 0;
  v50 = 0;
  cf = 0;
  v48 = 0;
  v33 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v33)
    goto LABEL_32;
  CMBaseObjectGetDerivedStorage();
  v34 = videoQueueServer_copySubVideoQueue();
  if (!v34)
  {
    v33 = FigSignalErrorAt();
LABEL_32:
    v45 = v33;
    v35 = 0;
    if (!(_DWORD)v23)
    {
LABEL_36:
      if (!(_DWORD)v21)
        goto LABEL_16;
      v21 = v21;
      goto LABEL_39;
    }
    v23 = v23;
LABEL_35:
    MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a2, v23);
    goto LABEL_36;
  }
  v35 = v34;
  if (a2)
  {
    if ((_DWORD)v23)
    {
      v36 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v23 = v23;
      sVMAllocatedDataBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate;
      v37 = CMBlockBufferCreateWithMemoryBlock(v36, a2, v23, v36, &sVMAllocatedDataBlockSource, 0, v23, 0, &blockBufferOut);
      if (v37)
      {
        v45 = v37;
        goto LABEL_35;
      }
    }
  }
  if (a4)
  {
    if ((_DWORD)v21)
    {
      v38 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v21 = v21;
      sVMAllocatedDataBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))videoQueueServer_blockDeallocate;
      v39 = CMBlockBufferCreateWithMemoryBlock(v38, a4, v21, v38, &sVMAllocatedDataBlockSource, 0, v21, 0, &v48);
      if (v39)
      {
        v45 = v39;
LABEL_39:
        MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a4, v21);
        goto LABEL_16;
      }
    }
  }
  v40 = 0;
  if (!a8 || !a17)
    goto LABEL_13;
  v41 = MEMORY[0x19402EA9C](a8, a17, *MEMORY[0x1E0C9AE00], &cf);
  if (!v41)
  {
    v40 = cf;
LABEL_13:
    v43 = v48;
    v42 = blockBufferOut;
    v44 = *(uint64_t (**)(const void *, CMBlockBufferRef, CMBlockBufferRef, uint64_t, uint64_t, CFTypeRef, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v44)
      v45 = v44(v35, v42, v43, a6, a7, v40, a9, a10, a11, a12, a13, a14, a15, a16);
    else
      v45 = -12782;
LABEL_16:
    if (!a17)
      goto LABEL_18;
    goto LABEL_17;
  }
  v45 = v41;
LABEL_17:
  MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a8, a17);
LABEL_18:
  if (v35)
    CFRelease(v35);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v48)
    CFRelease(v48);
  if (cf)
    CFRelease(cf);
  if (v50)
    CFRelease(v50);
  if (a18)
    *a18 = v45;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_SyncTimebaseToMoment(uint64_t a1, int a2, int *a3, int *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t DerivedStorage;
  _QWORD *v16;
  CFTypeRef v17;
  const void *v18;
  uint64_t v19;
  const __CFAllocator *v20;
  OpaqueCMClock *HostTimeClock;
  OSStatus v22;
  CFTypeRef v23;
  int v24;
  uint64_t v25;
  void (*v26)(uint64_t, const __CFString *, _QWORD);
  const void *v27;
  const void *v28;
  void *v29;
  uint64_t CMBaseObject;
  void (*v31)(uint64_t, const __CFString *, CFTypeRef);
  CMTimebaseRef sourceTimebase;
  CMTimebaseRef timebaseOut;
  __int128 v35;
  __int128 v36;
  _OWORD v37[4];
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  CFTypeRef v48;

  v39 = 0;
  v38 = 0u;
  v36 = 0u;
  memset(v37, 0, sizeof(v37));
  v35 = 0u;
  sourceTimebase = 0;
  timebaseOut = 0;
  v7 = *a3;
  v6 = a3[1];
  v8 = *((_QWORD *)a3 + 1);
  v9 = *((_OWORD *)a3 + 1);
  v47 = *((_QWORD *)a3 + 4);
  v48 = 0;
  v46 = v9;
  v10 = *(_OWORD *)(a3 + 10);
  v45 = *((_QWORD *)a3 + 7);
  v44 = v10;
  v11 = *((_QWORD *)a3 + 8);
  v12 = *(_OWORD *)(a3 + 18);
  v43 = *((_QWORD *)a3 + 11);
  v42 = v12;
  v13 = *((_OWORD *)a3 + 6);
  v41 = *((_QWORD *)a3 + 14);
  v40 = v13;
  v14 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (!v14)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v16 = (_QWORD *)DerivedStorage;
      v17 = videoQueueServer_copySubVideoQueue();
      if (!v17)
      {
        v24 = -12785;
        goto LABEL_27;
      }
      v18 = v17;
      MEMORY[0x19402EEEC](v16[6]);
      LODWORD(v35) = v7;
      if (v7 == 120)
      {
        DWORD1(v35) = v6;
        *((_QWORD *)&v35 + 1) = v8;
        v36 = v46;
        *(_QWORD *)&v37[0] = v47;
        *(_OWORD *)((char *)v37 + 8) = v44;
        *((_QWORD *)&v37[1] + 1) = v45;
        *(_QWORD *)&v37[2] = v11;
        *(_OWORD *)((char *)&v37[2] + 8) = v42;
        *((_QWORD *)&v37[3] + 1) = v43;
        v39 = v41;
        v38 = v40;
        if (a2)
        {
          v19 = v16[4];
          if (v19)
            goto LABEL_24;
          v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          HostTimeClock = CMClockGetHostTimeClock();
          v22 = CMTimebaseCreateWithSourceClock(v20, HostTimeClock, &sourceTimebase);
          if (v22 || (v22 = CMTimebaseCreateWithSourceTimebase(v20, sourceTimebase, &timebaseOut)) != 0)
          {
            v24 = v22;
            goto LABEL_26;
          }
          if (timebaseOut)
            v23 = CFRetain(timebaseOut);
          else
            v23 = 0;
          v16[4] = v23;
          v29 = sourceTimebase;
          if (sourceTimebase)
          {
            v29 = (void *)CFRetain(sourceTimebase);
            v23 = (CFTypeRef)v16[4];
          }
          v16[5] = v29;
          CMBaseObject = FigVideoQueueGetCMBaseObject(v18);
          v31 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
          if (v31)
            v31(CMBaseObject, CFSTR("VideoQueue_ControlTimebase"), v23);
          v19 = v16[4];
          if (v19)
LABEL_24:
            FigTimebaseSynchronizeToMoment2(v19, v16[5], &v35);
        }
        else
        {
          v25 = FigVideoQueueGetCMBaseObject(v18);
          v26 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
          if (v26)
            v26(v25, CFSTR("VideoQueue_ControlTimebase"), 0);
          v27 = (const void *)v16[4];
          if (v27)
          {
            CFRelease(v27);
            v16[4] = 0;
          }
          v28 = (const void *)v16[5];
          if (v28)
          {
            CFRelease(v28);
            v24 = 0;
            v16[5] = 0;
LABEL_26:
            CFRelease(v18);
            MEMORY[0x19402EF04](v16[6]);
            goto LABEL_27;
          }
        }
      }
      v24 = 0;
      goto LABEL_26;
    }
    v14 = FigSignalErrorAt();
  }
  v24 = v14;
LABEL_27:
  if (v48)
    CFRelease(v48);
  if (timebaseOut)
    CFRelease(timebaseOut);
  if (sourceTimebase)
    CFRelease(sourceTimebase);
  if (a4)
    *a4 = v24;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_Flush(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  const void *v5;
  uint64_t (*v6)(const void *, uint64_t);
  uint64_t v7;

  v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if ((_DWORD)v3)
    return v3;
  CMBaseObjectGetDerivedStorage();
  v4 = videoQueueServer_copySubVideoQueue();
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = *(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v6)
    v7 = v6(v5, a2);
  else
    v7 = 4294954514;
  CFRelease(v5);
  return v7;
}

uint64_t FigVideoQueueRemoteServer_IsAboveHighWaterLevel(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  const void *v5;
  uint64_t (*v6)(const void *);
  int v7;

  v3 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if ((_DWORD)v3)
    return v3;
  CMBaseObjectGetDerivedStorage();
  v4 = videoQueueServer_copySubVideoQueue();
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v6)
    v7 = v6(v5);
  else
    v7 = 0;
  *a2 = v7;
  CFRelease(v5);
  return 0;
}

uint64_t FigVideoQueueRemoteServer_RequestDecodeForPreroll(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  int v7;
  CFTypeRef v8;
  const void *v9;
  int v10;
  CFTypeRef v11;
  uint64_t (*v12)(const void *, CFTypeRef);
  int v13;
  CFTypeRef v15;
  CFTypeRef cf;

  v15 = 0;
  cf = 0;
  v7 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (!v7)
  {
    CMBaseObjectGetDerivedStorage();
    v8 = videoQueueServer_copySubVideoQueue();
    if (v8)
    {
      v9 = v8;
      v10 = MEMORY[0x19402EA9C](a2, a3, *MEMORY[0x1E0C9AE00], &v15);
      if (!v10)
      {
        v11 = v15;
        v12 = *(uint64_t (**)(const void *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
        if (!v12)
        {
          v13 = -12782;
          goto LABEL_8;
        }
        v10 = v12(v9, v11);
      }
      v13 = v10;
LABEL_8:
      CFRelease(v9);
      goto LABEL_9;
    }
    v7 = FigSignalErrorAt();
  }
  v13 = v7;
LABEL_9:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  if (a3)
    MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], a2, a3);
  if (a4)
    *a4 = v13;
  return 0;
}

uint64_t FigVideoQueueRemoteServer_CopyCurrentlyDisplayedCVPixelBuffer(uint64_t a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, int *a5)
{
  int v9;
  uint64_t DerivedStorage;
  CFTypeRef v11;
  const void *v12;
  uint64_t CMBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v15;
  int SerializedAtomDataForPixelBuffer;
  int v17;
  CFTypeRef v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  CFTypeRef cf;

  cf = 0;
  v22 = 0;
  v20 = 0;
  v21 = 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  v19 = 0;
  v9 = videoQueueServerCopyClientFromCommandPort(a1, 0);
  if (v9)
    goto LABEL_22;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = videoQueueServer_copySubVideoQueue();
  if (!v11)
  {
    v9 = FigSignalErrorAt();
LABEL_22:
    SerializedAtomDataForPixelBuffer = v9;
    goto LABEL_10;
  }
  v12 = v11;
  CMBaseObject = FigVideoQueueGetCMBaseObject(v11);
  v14 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v14)
  {
    v15 = v14(CMBaseObject, CFSTR("CurrentlyDisplayedCVPixelBuffer"), *MEMORY[0x1E0C9AE00], &v19);
    if (v15)
    {
      SerializedAtomDataForPixelBuffer = v15;
    }
    else
    {
      SerializedAtomDataForPixelBuffer = FigRemote_CreateSerializedAtomDataForPixelBuffer();
      if (SerializedAtomDataForPixelBuffer)
      {
        *(_QWORD *)(DerivedStorage + 64) = 0;
      }
      else
      {
        v17 = v20;
        *(_QWORD *)(DerivedStorage + 64) = (v20 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
        *a2 = v22;
        v22 = 0;
        *a3 = v21;
        *a4 = v17;
        v20 = 0;
        v21 = 0;
      }
    }
  }
  else
  {
    SerializedAtomDataForPixelBuffer = -12782;
  }
  CFRelease(v12);
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v22)
    FigMachPortReleaseSendRight_();
  if (v20)
    MEMORY[0x19403197C](*MEMORY[0x1E0C83DA0], v21);
  if (a5)
    *a5 = SerializedAtomDataForPixelBuffer;
  return 0;
}

uint64_t videoQueueServerReflectNotification()
{
  return CMNotificationCenterPostNotification();
}

uint64_t videoQueueServer_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v2;
  void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3348)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_QWORD *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(_QWORD *)DerivedStorage = 0;
    }
  }
  FigSimpleMutexDestroy();
  v3 = *(void **)(DerivedStorage + 24);
  if (v3)
  {
    os_release(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v4 = *(const void **)(DerivedStorage + 16);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
  }
  v5 = *(const void **)(DerivedStorage + 32);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 40);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  FigServer_RememberProcessInfoForAFewSeconds();
  v7 = *(const void **)(DerivedStorage + 80);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *videoQueueServer_CopyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  CFTypeRef v3;

  Mutable = CFStringCreateMutable(0, 0);
  v3 = videoQueueServer_copySubVideoQueue();
  CFStringAppendFormat(Mutable, 0, CFSTR("videoQueueClientObj %p [%@]"), a1, v3);
  if (v3)
    CFRelease(v3);
  return Mutable;
}

void videoQueueServer_mediaServicesProcessDeathNotification()
{
  CFTypeRef v0;
  const void *v1;

  CMBaseObjectGetDerivedStorage();
  v0 = videoQueueServer_copySubVideoQueue();
  if (v0)
  {
    v1 = v0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    CFRelease(v1);
  }
}

void videoQueueServer_appStateChangeListener(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CFTypeRef v6;
  uint64_t DerivedStorage;
  const __CFNumber *Value;
  int v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  const __CFAllocator *v12;
  CFDictionaryRef v13;
  uint64_t CMBaseObject;
  uint64_t v15;
  void (*v16)(uint64_t);
  int v17;
  const void *valuePtr[18];

  valuePtr[16] = *(const void **)MEMORY[0x1E0C80C00];
  v6 = videoQueueServer_copySubVideoQueue();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D492C0]);
    if (Value)
    {
      LODWORD(valuePtr[0]) = 0;
      if (CFNumberGetValue(Value, kCFNumberSInt32Type, valuePtr))
        v9 = (int)valuePtr[0];
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    if (dword_1EE2A3348)
    {
      v17 = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v9 == 4 || v9 == 2)
    {
      if (v6)
      {
        v17 = -12084;
        if (dword_1EE2A3348)
        {
          v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        valuePtr[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v17);
        v13 = CFDictionaryCreate(v12, (const void **)kFigVideoQueueNotificationParameter_OSStatus, valuePtr, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CMBaseObject = FigVideoQueueGetCMBaseObject(v6);
        if (CMBaseObject)
        {
          v15 = CMBaseObject;
          v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v16)
            v16(v15);
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        if (valuePtr[0])
          CFRelease(valuePtr[0]);
        if (v13)
          CFRelease(v13);
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 56));
      if (*(_QWORD *)DerivedStorage)
      {
        CFRelease(*(CFTypeRef *)DerivedStorage);
        *(_QWORD *)DerivedStorage = 0;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 56));
    }
  }
  if (v6)
    CFRelease(v6);
}

void videoQueueServer_blockDeallocate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    JUMPOUT(0x19403197CLL);
}

uint64_t FigFastStartRemakerCreateWithURLs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;

  if (a2)
  {
    if (FigCFURLIsLocalResource()
      && a3
      && FigCFURLIsLocalResource()
      && !FigFileDoesFileExist()
      && a5)
    {
      FigRemakerGetClassID();
      v7 = CMDerivedObjectCreate();
      if ((_DWORD)v7)
        return v7;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!CMByteStreamCreateForFileURL() && !CMByteStreamCreateForFileURL())
      {
        *(_QWORD *)DerivedStorage = 0;
        *(_DWORD *)(DerivedStorage + 40) = 512;
        v9 = 0;
        *(_QWORD *)(DerivedStorage + 16) = dispatch_queue_create("com.apple.coremedia.faststartremaker", 0);
        *a5 = 0;
        return v9;
      }
    }
    return FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

uint64_t fastStartRemaker_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v1 = DerivedStorage;
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    v2 = *(NSObject **)(DerivedStorage + 16);
    if (v2)
    {
      *(_BYTE *)(v1 + 9) = 1;
      dispatch_sync_f(v2, 0, (dispatch_function_t)doNothingDispatchFunction);
      dispatch_release(*(dispatch_object_t *)(v1 + 16));
      *(_QWORD *)(v1 + 16) = 0;
    }
    v3 = *(const void **)(v1 + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(v1 + 32) = 0;
    }
    v4 = *(const void **)(v1 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v1 + 24) = 0;
    }
  }
  return 0;
}

__CFString *fastStartRemaker_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  __CFString *Mutable;
  _QWORD *v6;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v12 = 0;
  cf = 0;
  if (!DerivedStorage)
    return 0;
  v3 = (_QWORD *)DerivedStorage;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FastStartRemaker %p>"), a1);
  CFStringAppendFormat(Mutable, 0, CFSTR(" { ftypAtomOffset: %llu ftypAtomLength: %llu moovAtomOffset: %llu moovAtomLength: %llu firstMdatAtomOffset: %llu wholeMdatAtomLength: %llu"), v3[8], v3[11], v3[9], v3[12], v3[10], v3[13]);
  v6 = (_QWORD *)MEMORY[0x1E0CA2098];
  if (v3[3])
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v8 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v8)
      v8(CMBaseObject, *v6, v4, &cf);
  }
  if (v3[4])
  {
    v9 = CMByteStreamGetCMBaseObject();
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v10)
    {
      v10(v9, *v6, v4, &v12);
      v10 = (void (*)(uint64_t, _QWORD, uint64_t, CFTypeRef *))v12;
    }
  }
  else
  {
    v10 = 0;
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(" sourceByteStream: %@ sourceURL: %@ outputByteStream: %@ outputURL: %@ }"), v3[3], cf, v3[4], v10);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return Mutable;
}

uint64_t fastStartRemaker_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  CFNumberRef v11;
  uint64_t result;
  float valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 8))
    return FigSignalErrorAt();
  if (!CFEqual(a2, CFSTR("Remaker_Progress")))
    return 4294954512;
  valuePtr = 0.0;
  if (*(_BYTE *)(v7 + 10))
  {
    v8 = *(_QWORD *)(v7 + 104);
    v9 = 0.0;
    if (v8)
    {
      v10 = (float)*(uint64_t *)(v7 + 48) / (float)v8;
      if (v10 >= 0.0)
      {
        v9 = (float)*(uint64_t *)(v7 + 48) / (float)v8;
        if (v10 > 1.0)
          v9 = 1.0;
      }
    }
    valuePtr = v9;
    goto LABEL_10;
  }
  result = FigSignalErrorAt();
  if (!(_DWORD)result)
  {
LABEL_10:
    v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
    result = 0;
    *a4 = v11;
  }
  return result;
}

uint64_t fastStartRemaker_StartOutput(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || *(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 10))
    return FigSignalErrorAt();
  *(_BYTE *)(DerivedStorage + 10) = 1;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 16), a1, (dispatch_function_t)writeFirstStartMovieDispatchFunction);
  return 0;
}

void writeFirstStartMovieDispatchFunction()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  int started;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, CFTypeRef *, CMBlockBufferRef *);
  int v7;
  int v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *);
  int v14;
  const __CFAllocator *v15;
  CFMutableArrayRef Mutable;
  int v17;
  CFIndex Count;
  OpaqueCMBlockBuffer *v19;
  char *v20;
  unsigned int v21;
  CFIndex v22;
  CFIndex v23;
  int v24;
  unint64_t v25;
  CFIndex i;
  _QWORD *ValueAtIndex;
  unint64_t v28;
  CMBlockBufferRef v29;
  OpaqueCMBlockBuffer *v30;
  int appended;
  int v32;
  int v33;
  uint64_t v34;
  CFIndex v35;
  size_t DataLength;
  CFIndex v37;
  CFIndex v38;
  CFIndex j;
  _DWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  size_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  const __CFAllocator *v53;
  OpaqueCMBlockBuffer *v54;
  size_t v55;
  size_t v56;
  size_t v57;
  size_t v58;
  int v59;
  size_t v60;
  CMBlockBufferRef v61;
  OpaqueCMBlockBuffer *v62;
  OpaqueCMBlockBuffer *v63;
  const __CFAllocator *v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  _BOOL4 v70;
  int v71;
  int v72;
  uint64_t v73;
  int DataPointer;
  CMBlockBufferRef v75;
  char *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  OpaqueCMBlockBuffer *v81;
  OpaqueCMBlockBuffer *v82;
  OpaqueCMBlockBuffer *v83;
  OSStatus v84;
  size_t v85;
  uint64_t v86;
  size_t v87;
  unint64_t v88;
  int v89;
  size_t v90;
  unint64_t v91;
  size_t v92;
  unint64_t v93;
  size_t v94;
  unint64_t v95;
  int v96;
  OpaqueCMBlockBuffer *v97;
  size_t v98;
  const __CFAllocator *v99;
  OSStatus v100;
  OSStatus v101;
  OpaqueCMBlockBuffer *v102;
  CFIndex v103;
  CFIndex v104;
  CFIndex k;
  void *v106;
  const __CFAllocator *v107;
  int v108;
  int v109;
  const __CFAllocator *v110;
  OSStatus v111;
  CFTypeRef v112;
  CFTypeRef v113;
  uint64_t v114;
  void *v115;
  CFAllocatorRef v116;
  uint64_t CMBaseObject;
  uint64_t (*v118)(uint64_t, _QWORD, CFAllocatorRef, CMBlockBufferRef *);
  int v119;
  int v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, uint64_t, uint64_t, void *, CFTypeRef *);
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, CFTypeRef *);
  const __CFAllocator *v132;
  CFDictionaryRef v133;
  int v134;
  CFTypeRef v135;
  OpaqueCMBlockBuffer *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  char *v140;
  OpaqueCMBlockBuffer *theBuffer;
  CMBlockBufferRef theBuffera;
  CMBlockBufferRef theBufferb;
  char *v144;
  uint64_t v145;
  OpaqueCMBlockBuffer *v146;
  CFTypeRef *v147;
  unsigned int sourceBytes;
  uint64_t v149;
  CMBlockBufferRef destinationBuffer;
  CFTypeRef cf[2];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  char *dataPointerOut;
  CMBlockBufferRef v159;
  CMBlockBufferRef blockBufferOut[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (v1 = DerivedStorage, *(_BYTE *)(DerivedStorage + 8)))
  {
    v8 = FigSignalErrorAt();
    if (!v8)
      goto LABEL_229;
    goto LABEL_220;
  }
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  *(_OWORD *)cf = 0u;
  started = FigAtomStreamInitWithByteStream();
  if (started)
    goto LABEL_247;
  started = fastStartRemaker_parseChildAtoms((uint64_t)cf, 3, (uint64_t)&fastStartRemaker_parseMovieFile_atomDispatch, v1);
  if (started)
    goto LABEL_247;
  if (!*(_QWORD *)(v1 + 96) || !*(_QWORD *)(v1 + 104))
  {
    started = FigSignalErrorAt();
    if (started)
      goto LABEL_247;
  }
  cf[0] = 0;
  v3 = *(_QWORD *)(v1 + 88);
  if (v3)
  {
    blockBufferOut[0] = 0;
    if (v3 < 0)
    {
      started = FigSignalErrorAt();
      v9 = 0;
      if (started)
      {
LABEL_247:
        v8 = started;
        goto LABEL_220;
      }
    }
    else
    {
      v4 = *(_QWORD *)(v1 + 24);
      v5 = *(_QWORD *)(v1 + 64);
      v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 32);
      if (!v6)
      {
        v8 = -12782;
        goto LABEL_220;
      }
      v7 = v6(v4, v3, v5, cf, blockBufferOut);
      if (v7)
      {
        v8 = v7;
        if (cf[0])
          CFRelease(cf[0]);
        goto LABEL_220;
      }
      v9 = cf[0];
      if (cf[0])
      {
        CMBlockBufferGetDataLength((CMBlockBufferRef)cf[0]);
        appended = CMByteStreamAppendBlockBuffer();
        if (appended)
        {
          v8 = appended;
LABEL_190:
          CFRelease(v9);
          goto LABEL_191;
        }
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v149 = 0;
  destinationBuffer = 0;
  sourceBytes = 0;
  v10 = *(_QWORD *)(v1 + 96);
  if (v10 < 0)
  {
    v8 = FigSignalErrorAt();
    v29 = 0;
    v30 = 0;
    goto LABEL_172;
  }
  v11 = *(_QWORD *)(v1 + 24);
  v12 = *(_QWORD *)(v1 + 72);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 32);
  if (!v13)
  {
    v29 = 0;
    v30 = 0;
    v8 = -12782;
    goto LABEL_172;
  }
  v135 = v9;
  v14 = v13(v11, v10, v12, &destinationBuffer, &v149);
  if (v14)
  {
LABEL_255:
    v8 = v14;
    goto LABEL_243;
  }
  v15 = CFGetAllocator(*(CFTypeRef *)v1);
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  *(_OWORD *)cf = 0u;
  Mutable = CFArrayCreateMutable(v15, 0, 0);
  if (!Mutable)
  {
    v14 = FigSignalErrorAt();
    if (!v14)
      goto LABEL_20;
    goto LABEL_255;
  }
  v17 = FigAtomStreamInitWithBBuf();
  if (v17 || (v17 = fastStartRemaker_parseChildAtoms((uint64_t)cf, 2, (uint64_t)"kart", (uint64_t)Mutable)) != 0)
  {
    v8 = v17;
    CFRelease(Mutable);
LABEL_243:
    v29 = 0;
    v30 = 0;
    v9 = v135;
    goto LABEL_172;
  }
LABEL_20:
  Count = CFArrayGetCount(Mutable);
  v19 = destinationBuffer;
  v147 = (CFTypeRef *)v1;
  if (Count)
  {
    v20 = (char *)Count;
    v21 = *(_DWORD *)(v1 + 40);
    v22 = CFArrayGetCount(Mutable);
    v144 = v20;
    if (v22 < 1)
    {
      v25 = 0;
    }
    else
    {
      v23 = v22;
      v24 = 0;
      v25 = 0;
      for (i = 0; i != v23; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        if (*((_DWORD *)ValueAtIndex + 22))
        {
          if (v25 >= ValueAtIndex[12])
            v28 = ValueAtIndex[12];
          else
            v28 = v25;
          if (v24)
            v25 = v28;
          else
            v25 = ValueAtIndex[12];
          v24 = 1;
        }
      }
    }
    v32 = 0;
    if (v21 <= 1)
      v33 = 1;
    else
      v33 = v21;
    v34 = v33;
    v139 = v33 - 1;
    theBuffer = v19;
    v35 = 1;
    do
    {
      DataLength = CMBlockBufferGetDataLength(theBuffer);
      v37 = CFArrayGetCount(Mutable);
      if (v37 >= 1)
      {
        v38 = v37;
        for (j = 0; j != v38; ++j)
        {
          v40 = CFArrayGetValueAtIndex(Mutable, j);
          v41 = v40[22];
          if (*((_BYTE *)v40 + 64))
          {
            v42 = 8;
          }
          else if (v41)
          {
            if ((unint64_t)(*((_QWORD *)v40 + 13) + v32) >> 32)
              v42 = 8;
            else
              v42 = 4;
          }
          else
          {
            v42 = 4;
          }
          DataLength = DataLength - *((_QWORD *)v40 + 10) + v42 * v41 + 16;
        }
      }
      v43 = *(_QWORD *)(v1 + 88) + DataLength + 8 * (*(_BYTE *)(v1 + 11) != 0) + v25 - *(_QWORD *)(v1 + 80);
      v44 = v43 % v34;
      if (v44)
        v45 = v34 - v44;
      else
        v45 = 0;
      v46 = v45;
      if ((unint64_t)(v45 - 1) <= 6)
        v46 = (v139 - v45 + 8) / v34 * v34 + v45;
      v47 = v46 + *(_QWORD *)(v1 + 88) + DataLength + 8 * (*(_BYTE *)(v1 + 11) != 0) - *(_QWORD *)(v1 + 80);
      if (v47 == v32)
        goto LABEL_65;
      if (v47 != (int)v47)
        break;
      v32 = v46 + v43 - v25;
      v128 = CFArrayGetCount(Mutable) + 2 <= v35++;
    }
    while (!v128);
    v48 = FigSignalErrorAt();
    if (v48)
      goto LABEL_231;
    v46 = 0;
    v32 = 0;
LABEL_65:
    v49 = v144;
    v137 = v46;
    if ((uint64_t)v144 > 0)
    {
      v138 = v32;
      v50 = v32;
      while (1)
      {
        v51 = (unsigned __int8 *)CFArrayGetValueAtIndex(Mutable, (CFIndex)(v49 - 1));
        if ((*((_QWORD *)v51 + 10) & 0x8000000000000000) != 0)
          goto LABEL_230;
        v52 = v51;
        v140 = v49 - 1;
        v145 = (uint64_t)v49;
        v53 = CFGetAllocator(*(CFTypeRef *)v1);
        v54 = destinationBuffer;
        v55 = *((_QWORD *)v52 + 9);
        v56 = *((_QWORD *)v52 + 10);
        v57 = CMBlockBufferGetDataLength(destinationBuffer);
        cf[0] = 0;
        v159 = 0;
        blockBufferOut[0] = 0;
        if ((v55 & 0x8000000000000000) != 0)
          break;
        v58 = v57;
        v59 = CMBlockBufferCreateWithBufferReference(v53, v54, 0, v55, 0, (CMBlockBufferRef *)cf);
        if (!v59)
        {
          v59 = CMBlockBufferCreateWithBufferReference(v53, v54, v55, v56, 0, blockBufferOut);
          if (!v59)
          {
            v60 = v56 + v55;
            if ((uint64_t)(v56 + v55) < 0)
              break;
            if (v58 == v60)
            {
              v61 = 0;
LABEL_76:
              v62 = (OpaqueCMBlockBuffer *)cf[0];
              v63 = blockBufferOut[0];
              goto LABEL_77;
            }
            v59 = CMBlockBufferCreateWithBufferReference(v53, v54, v60, v58 - v60, 0, &v159);
            if (!v59)
            {
              v61 = v159;
              goto LABEL_76;
            }
          }
        }
LABEL_135:
        v8 = v59;
        if (cf[0])
          CFRelease(cf[0]);
        if (blockBufferOut[0])
          CFRelease(blockBufferOut[0]);
        if (v159)
          CFRelease(v159);
        v61 = 0;
        v63 = 0;
        v62 = 0;
        v29 = 0;
        v30 = 0;
        v136 = 0;
        v97 = 0;
        theBufferb = 0;
        v81 = 0;
        if (v8)
          goto LABEL_159;
LABEL_77:
        theBuffera = v61;
        v64 = CFGetAllocator(*v147);
        v65 = *((_DWORD *)v52 + 22);
        v66 = v52[64];
        v67 = *((_QWORD *)v52 + 13);
        v159 = 0;
        blockBufferOut[0] = 0;
        dataPointerOut = 0;
        cf[0] = 0;
        cf[1] = 0;
        LODWORD(v152) = 0;
        v68 = (unint64_t)(v67 + v50) >> 32;
        v69 = v68 == 0;
        v70 = v68 != 0;
        if (v69)
          v71 = 4;
        else
          v71 = 8;
        if (!v65)
        {
          v71 = 4;
          v70 = 0;
        }
        if (v66)
        {
          v71 = 8;
          v72 = 1;
        }
        else
        {
          v72 = v70;
        }
        if ((int)(v71 * v65) <= -17)
        {
          DataPointer = FigSignalErrorAt();
          goto LABEL_144;
        }
        v73 = (int)(v71 * v65) + 16;
        DataPointer = CMBlockBufferCreateWithMemoryBlock(v64, 0, v73, v64, 0, 0, v73, 1u, blockBufferOut);
        if (DataPointer)
          goto LABEL_144;
        if (v65)
        {
          DataPointer = CMBlockBufferGetDataPointer(blockBufferOut[0], 0x10uLL, 0, 0, (char **)&v159);
          if (DataPointer)
            goto LABEL_144;
          DataPointer = CMBlockBufferGetDataPointer(v63, 0x10uLL, 0, 0, &dataPointerOut);
          if (DataPointer)
            goto LABEL_144;
          v76 = dataPointerOut;
          v75 = v159;
          v77 = v65;
          v78 = v65;
          if (v66)
          {
            if (v72)
            {
              do
              {
                *(_QWORD *)v75 = bswap64(bswap64(*(_QWORD *)v76) + v50);
                v76 = dataPointerOut + 8;
                v75 = (CMBlockBufferRef)((char *)v159 + 8);
                dataPointerOut += 8;
                v159 = (CMBlockBufferRef)((char *)v159 + 8);
                --v77;
              }
              while (v77);
            }
            else
            {
              do
              {
                *(_DWORD *)v75 = bswap32(v138 + bswap64(*(_QWORD *)v76));
                v76 = dataPointerOut + 8;
                v75 = (CMBlockBufferRef)((char *)v159 + 4);
                dataPointerOut += 8;
                v159 = (CMBlockBufferRef)((char *)v159 + 4);
                --v78;
              }
              while (v78);
            }
          }
          else if (v72)
          {
            do
            {
              *(_QWORD *)v75 = bswap64(bswap32(*(_DWORD *)v76) + v50);
              v76 = dataPointerOut + 4;
              v75 = (CMBlockBufferRef)((char *)v159 + 8);
              dataPointerOut += 4;
              v159 = (CMBlockBufferRef)((char *)v159 + 8);
              --v77;
            }
            while (v77);
          }
          else
          {
            do
            {
              *(_DWORD *)v75 = bswap32(bswap32(*(_DWORD *)v76) + v138);
              v76 = dataPointerOut + 4;
              v75 = (CMBlockBufferRef)((char *)v159 + 4);
              dataPointerOut += 4;
              v159 = (CMBlockBufferRef)((char *)v159 + 4);
              --v78;
            }
            while (v78);
          }
        }
        v79 = bswap32(v73);
        if (v72)
          v80 = 875982691;
        else
          v80 = 1868788851;
        cf[0] = (CFTypeRef)__PAIR64__(v80, v79);
        LODWORD(cf[1]) = 0;
        HIDWORD(cf[1]) = bswap32(v65);
        DataPointer = CMBlockBufferReplaceDataBytes(cf, blockBufferOut[0], 0, 0x10uLL);
        if (!DataPointer)
        {
          v81 = blockBufferOut[0];
          v19 = v62;
          v82 = theBuffera;
          v83 = v63;
          v1 = (uint64_t)v147;
          goto LABEL_105;
        }
LABEL_144:
        v8 = DataPointer;
        v19 = v62;
        v82 = theBuffera;
        v83 = v63;
        v1 = (uint64_t)v147;
        if (blockBufferOut[0])
          CFRelease(blockBufferOut[0]);
        v81 = 0;
        if (v8)
        {
          v30 = 0;
          v136 = v19;
          v29 = 0;
          goto LABEL_236;
        }
LABEL_105:
        v84 = CMBlockBufferAppendBufferReference(v19, v81, 0, 0, 0);
        v8 = v84;
        if (v82 && !v84)
          v8 = CMBlockBufferAppendBufferReference(v19, v82, 0, 0, 0);
        if (v8)
          goto LABEL_235;
        v85 = CMBlockBufferGetDataLength(v81);
        v86 = v85 - CMBlockBufferGetDataLength(v83);
        if (v86 < 0)
        {
          v89 = FigSignalErrorAt();
LABEL_234:
          v8 = v89;
LABEL_235:
          v30 = 0;
          v136 = v19;
          v29 = 0;
LABEL_236:
          v97 = v83;
          theBufferb = v82;
          goto LABEL_159;
        }
        v87 = *((_QWORD *)v52 + 3);
        if ((v87 & 0x8000000000000000) != 0)
          goto LABEL_133;
        v88 = *((_QWORD *)v52 + 7) + v86;
        if (HIDWORD(v88))
          goto LABEL_133;
        LODWORD(cf[0]) = bswap32(v88);
        v89 = CMBlockBufferReplaceDataBytes(cf, v19, v87, 4uLL);
        if (v89)
          goto LABEL_234;
        v90 = *((_QWORD *)v52 + 2);
        if ((v90 & 0x8000000000000000) != 0)
          goto LABEL_133;
        v91 = *((_QWORD *)v52 + 6) + v86;
        if (HIDWORD(v91))
          goto LABEL_133;
        LODWORD(cf[0]) = bswap32(v91);
        v89 = CMBlockBufferReplaceDataBytes(cf, v19, v90, 4uLL);
        if (v89)
          goto LABEL_234;
        v92 = *((_QWORD *)v52 + 1);
        if ((v92 & 0x8000000000000000) != 0)
          goto LABEL_133;
        v93 = *((_QWORD *)v52 + 5) + v86;
        if (HIDWORD(v93))
          goto LABEL_133;
        LODWORD(cf[0]) = bswap32(v93);
        v89 = CMBlockBufferReplaceDataBytes(cf, v19, v92, 4uLL);
        if (v89)
          goto LABEL_234;
        v94 = *(_QWORD *)v52;
        if ((*(_QWORD *)v52 & 0x8000000000000000) != 0 || (v95 = *((_QWORD *)v52 + 4) + v86, HIDWORD(v95)))
        {
LABEL_133:
          v96 = FigSignalErrorAt();
        }
        else
        {
          LODWORD(cf[0]) = bswap32(v95);
          v96 = CMBlockBufferReplaceDataBytes(cf, v19, v94, 4uLL);
        }
        v8 = v96;
        if (v96)
          goto LABEL_235;
        if (v83)
          CFRelease(v83);
        if (v81)
          CFRelease(v81);
        if (v82)
          CFRelease(v82);
        v49 = v140;
        if (destinationBuffer)
          CFRelease(destinationBuffer);
        destinationBuffer = v19;
        if (v145 <= 1)
          goto LABEL_149;
      }
      v59 = FigSignalErrorAt();
      goto LABEL_135;
    }
    v19 = destinationBuffer;
  }
  else
  {
    v137 = 0;
  }
LABEL_149:
  v98 = CMBlockBufferGetDataLength(v19);
  if (v98 != (int)v98)
  {
LABEL_230:
    v48 = FigSignalErrorAt();
    goto LABEL_231;
  }
  sourceBytes = bswap32(v98);
  v48 = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL);
  if (v48)
  {
LABEL_231:
    v8 = v48;
LABEL_232:
    v29 = 0;
    v30 = 0;
    v136 = 0;
    v97 = 0;
    theBufferb = 0;
    v81 = 0;
    goto LABEL_159;
  }
  if (v137)
  {
    cf[0] = 0;
    blockBufferOut[0] = 0;
    if (v137 < 8)
    {
      v134 = FigSignalErrorAt();
      v29 = 0;
      if (v134)
      {
        v8 = v134;
        v30 = 0;
        v136 = 0;
        v97 = 0;
        theBufferb = 0;
        v81 = 0;
        goto LABEL_159;
      }
    }
    else
    {
      v99 = CFGetAllocator(*(CFTypeRef *)v1);
      v100 = CMBlockBufferCreateWithMemoryBlock(v99, 0, v137, v99, 0, 0, v137, 1u, (CMBlockBufferRef *)cf);
      v29 = (CMBlockBufferRef)cf[0];
      if (v100)
        goto LABEL_156;
      v101 = CMBlockBufferFillDataBytes(0, (CMBlockBufferRef)cf[0], 0, 0);
      if (v101)
      {
        v8 = v101;
        v29 = (CMBlockBufferRef)cf[0];
LABEL_258:
        if (v29)
          CFRelease(v29);
        goto LABEL_232;
      }
      blockBufferOut[0] = (CMBlockBufferRef)(bswap32(v137) | 0x6565726600000000);
      v100 = CMBlockBufferReplaceDataBytes(blockBufferOut, (CMBlockBufferRef)cf[0], 0, 8uLL);
      v29 = (CMBlockBufferRef)cf[0];
      if (v100)
      {
LABEL_156:
        v8 = v100;
        goto LABEL_258;
      }
    }
  }
  else
  {
    v29 = 0;
  }
  v136 = 0;
  v97 = 0;
  theBufferb = 0;
  v81 = 0;
  v8 = 0;
  v30 = v29;
  v29 = destinationBuffer;
  destinationBuffer = 0;
LABEL_159:
  v1 = (uint64_t)v147;
  if (Mutable)
  {
    v146 = v97;
    v102 = v30;
    v103 = CFArrayGetCount(Mutable);
    if (v103 >= 1)
    {
      v104 = v103;
      for (k = 0; k != v104; ++k)
      {
        v106 = (void *)CFArrayGetValueAtIndex(Mutable, k);
        v107 = CFGetAllocator(Mutable);
        CFAllocatorDeallocate(v107, v106);
      }
    }
    CFRelease(Mutable);
    v30 = v102;
    v97 = v146;
  }
  if (v97)
    CFRelease(v97);
  v9 = v135;
  if (v81)
    CFRelease(v81);
  if (theBufferb)
    CFRelease(theBufferb);
  if (v136)
    CFRelease(v136);
LABEL_172:
  if (destinationBuffer)
    CFRelease(destinationBuffer);
  if (v8)
    goto LABEL_185;
  CMBlockBufferGetDataLength(v29);
  v108 = CMByteStreamAppendBlockBuffer();
  if (v108)
  {
    v8 = v108;
    goto LABEL_185;
  }
  if (!v30 || (CMBlockBufferGetDataLength(v30), (v109 = CMByteStreamAppendBlockBuffer()) == 0))
  {
    if (*(_BYTE *)(v1 + 11))
    {
      cf[0] = 0;
      blockBufferOut[0] = 0;
      v110 = CFGetAllocator(*(CFTypeRef *)v1);
      v111 = CMBlockBufferCreateWithMemoryBlock(v110, 0, 8uLL, v110, 0, 0, 8uLL, 1u, (CMBlockBufferRef *)cf);
      if (!v111)
      {
        blockBufferOut[0] = (CMBlockBufferRef)0x6564697708000000;
        v111 = CMBlockBufferReplaceDataBytes(blockBufferOut, (CMBlockBufferRef)cf[0], 0, 8uLL);
        if (!v111)
        {
          v112 = cf[0];
          CMBlockBufferGetDataLength((CMBlockBufferRef)cf[0]);
          v8 = CMByteStreamAppendBlockBuffer();
          if (!v112)
            goto LABEL_185;
          v113 = v112;
          goto LABEL_183;
        }
      }
      v8 = v111;
      v113 = cf[0];
      if (cf[0])
LABEL_183:
        CFRelease(v113);
    }
    else
    {
      v8 = 0;
    }
LABEL_185:
    if (!v30)
      goto LABEL_187;
    goto LABEL_186;
  }
  v8 = v109;
LABEL_186:
  CFRelease(v30);
LABEL_187:
  if (v29)
    CFRelease(v29);
  if (v9)
    goto LABEL_190;
LABEL_191:
  if (!v8)
  {
    v114 = *(_QWORD *)(v1 + 80);
    blockBufferOut[0] = 0;
    v115 = malloc_type_malloc(0x100000uLL, 0x6AD18DBDuLL);
    if (!v115)
    {
      v8 = FigSignalErrorAt();
      free(0);
      if (v8)
        goto LABEL_220;
LABEL_229:
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      return;
    }
    v116 = CFGetAllocator(*(CFTypeRef *)v1);
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v118 = *(uint64_t (**)(uint64_t, _QWORD, CFAllocatorRef, CMBlockBufferRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
    if (v118)
    {
      v119 = v118(CMBaseObject, *MEMORY[0x1E0CA2070], v116, blockBufferOut);
      if (v119)
      {
LABEL_239:
        v8 = v119;
LABEL_212:
        v120 = 0;
        goto LABEL_217;
      }
      CFNumberGetValue(blockBufferOut[0], kCFNumberSInt64Type, (void *)(v1 + 56));
      v120 = *(unsigned __int8 *)(v1 + 9);
      if (*(_BYTE *)(v1 + 9))
      {
LABEL_196:
        v8 = 0;
LABEL_217:
        if (blockBufferOut[0])
          CFRelease(blockBufferOut[0]);
        free(v115);
        if (v8)
          goto LABEL_220;
        if (v120)
          return;
        goto LABEL_229;
      }
      v121 = *(char **)(v1 + 48);
      v122 = 0x100000;
      while (1)
      {
        v123 = *(_QWORD *)(v1 + 104);
        if (v123 <= (uint64_t)v121)
          break;
        cf[0] = 0;
        v159 = 0;
        if (v123 < (unint64_t)&v121[v122])
          v122 = v123 - (_QWORD)v121;
        v124 = *(_QWORD *)(v1 + 24);
        v125 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 8);
        if (!v125)
        {
          v8 = -12782;
          goto LABEL_212;
        }
        v119 = v125(v124, v122, v114, v115, cf);
        if (v119)
          goto LABEL_239;
        v119 = CMByteStreamAppend();
        if (v119)
          goto LABEL_239;
        v114 += (uint64_t)v159;
        v121 = (char *)v159 + *(_QWORD *)(v1 + 48);
        *(_QWORD *)(v1 + 48) = v121;
        if (*(_BYTE *)(v1 + 9))
        {
          v8 = 0;
          v120 = 1;
          goto LABEL_217;
        }
      }
      v126 = *(_QWORD *)(v1 + 72);
      v127 = *(_QWORD *)(v1 + 80);
      v128 = v127 < v126 && v126 < v127 + v123;
      if (!v128)
      {
        v120 = 0;
        goto LABEL_196;
      }
      LODWORD(v159) = 1701147238;
      cf[0] = 0;
      v129 = *(_QWORD *)(v1 + 56);
      v130 = *(_QWORD *)(v1 + 32);
      v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 16);
      if (v131)
      {
        v8 = v131(v130, 4, v126 - v127 + v129 + 4, &v159, cf);
        if (!v8)
        {
          v120 = *(unsigned __int8 *)(v1 + 9);
          goto LABEL_217;
        }
        goto LABEL_212;
      }
    }
    v120 = 0;
    v8 = -12782;
    goto LABEL_217;
  }
LABEL_220:
  LODWORD(blockBufferOut[0]) = v8;
  v132 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, blockBufferOut);
  if (cf[0])
    v133 = CFDictionaryCreate(v132, (const void **)kFigRemakerNotificationParameter_OSStatus, cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  else
    v133 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v133)
    CFRelease(v133);
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t fastStartRemaker_getFileTypeAtom()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

uint64_t fastStartRemaker_getMovieAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t fastStartRemaker_getMovieDataAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a2 + 112))
    {
      result = 0;
      *(_QWORD *)(a2 + 104) = -*(_QWORD *)(a2 + 80);
    }
    else
    {
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(a2 + 112) = 1;
      result = FigAtomStreamGetCurrentAtomHeaderSize();
      if (!(_DWORD)result)
        return 4294955167;
    }
  }
  return result;
}

uint64_t fastStartRemaker_parseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t (**v9)(uint64_t, uint64_t);
  uint64_t result;
  int v11;
  uint64_t (**v12)(uint64_t, uint64_t);
  int v13;
  int v14;
  char *v15;
  char v16;

  v8 = 0;
  v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)result)
      return result;
    if (a2 >= 1)
    {
      v11 = 0;
      v12 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v12 += 2;
        if (a2 == v11)
          goto LABEL_12;
      }
      v13 = 1 << v11;
      if ((*((_BYTE *)v12 - 4) & 1) != 0 && (v13 & v8) != 0)
        return FigSignalErrorAt();
      v8 |= v13;
      result = (*v12)(a1, a4);
      if ((_DWORD)result == 1937010544)
      {
        result = 0;
        goto LABEL_17;
      }
      if ((_DWORD)result)
        return result;
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == -12890)
        result = 0;
      else
        result = result;
LABEL_17:
      if (a2 >= 1)
      {
        v14 = 0;
        v15 = (char *)(a3 + 4);
        do
        {
          v16 = *v15;
          v15 += 16;
          if ((v16 & 2) != 0 && ((v8 >> v14) & 1) == 0)
            result = FigSignalErrorAt();
          ++v14;
        }
        while (a2 != v14);
      }
      return result;
    }
  }
}

uint64_t fastStartRemaker_getTrackAtom(int a1, void *cf)
{
  const __CFAllocator *v3;
  _OWORD *v4;
  void *v5;
  uint64_t CurrentAtomGlobalOffset;
  uint64_t started;
  const __CFAllocator *v9;
  _OWORD v10[7];

  v3 = CFGetAllocator(cf);
  v4 = CFAllocatorAllocate(v3, 112, 0);
  if (!v4)
    return 4294955196;
  v5 = v4;
  memset(v10, 0, sizeof(v10));
  v4[5] = 0u;
  v4[6] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
  if ((_DWORD)CurrentAtomGlobalOffset
    || (CurrentAtomGlobalOffset = FigAtomStreamInitWithParent(), (_DWORD)CurrentAtomGlobalOffset))
  {
    started = CurrentAtomGlobalOffset;
    goto LABEL_8;
  }
  started = fastStartRemaker_parseChildAtoms((uint64_t)v10, 1, (uint64_t)&fastStartRemaker_getTrackAtom_atomDispatch, (uint64_t)v5);
  if ((_DWORD)started)
  {
LABEL_8:
    v9 = CFGetAllocator(cf);
    CFAllocatorDeallocate(v9, v5);
    return started;
  }
  CFArrayAppendValue((CFMutableArrayRef)cf, v5);
  return started;
}

uint64_t fastStartRemaker_getMovieExtendsAtom()
{
  return 4294955167;
}

uint64_t fastStartRemaker_getMediaAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!(_DWORD)result)
  {
    memset(v4, 0, sizeof(v4));
    result = FigAtomStreamInitWithParent();
    if (!(_DWORD)result)
      return fastStartRemaker_parseChildAtoms((uint64_t)v4, 1, (uint64_t)&fastStartRemaker_getMediaAtom_atomDispatch, a2);
  }
  return result;
}

uint64_t fastStartRemaker_getMediaInfoAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!(_DWORD)result)
  {
    memset(v4, 0, sizeof(v4));
    result = FigAtomStreamInitWithParent();
    if (!(_DWORD)result)
      return fastStartRemaker_parseChildAtoms((uint64_t)v4, 1, (uint64_t)&fastStartRemaker_getMediaInfoAtom_atomDispatch, a2);
  }
  return result;
}

uint64_t fastStartRemaker_getSampleTableAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _OWORD v4[7];

  result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!(_DWORD)result)
  {
    memset(v4, 0, sizeof(v4));
    result = FigAtomStreamInitWithParent();
    if (!(_DWORD)result)
      return fastStartRemaker_parseChildAtoms((uint64_t)v4, 2, (uint64_t)&fastStartRemaker_getSampleTableAtom_atomDispatch, a2);
  }
  return result;
}

uint64_t fastStartRemaker_getChunkOffsetAtom()
{
  return fastStartRemaker_getChunkOffsetAtomInfo();
}

uint64_t fastStartRemaker_getChunkOffset64Atom()
{
  return fastStartRemaker_getChunkOffsetAtomInfo();
}

uint64_t fastStartRemaker_getChunkOffsetAtomInfo()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

uint64_t RegisterFigReportingAgentBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigReportingAgentGetTypeID()
{
  MEMORY[0x19402F294](&FigReportingAgentGetClassID_sRegisterFigReportingAgentOnce, RegisterFigReportingAgentBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigReportingAgentCreateFromAsset(uint64_t a1, int a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  BOOL v14;
  CFMutableDictionaryRef v15;
  __CFString *v16;
  const void *v17;
  uint64_t v18;
  const __CFData *DataValue;
  const __CFDictionary *DictionaryValue;
  CFMutableDictionaryRef MutableCopy;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v25;
  int v26;
  const __CFString *v27;
  const __CFString *v28;
  __CFString *v29;
  const void *Value;
  const void *v31;
  CFTypeID v32;
  const void *v33;
  CFTypeID v34;
  int v35;
  const void *v36;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v38;
  _QWORD *v39;
  const __CFString *v40;
  CFTypeRef v41;
  CFTypeRef cf;
  CFTypeRef v43[25];

  v43[23] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf = 0;
  v43[0] = 0;
  v41 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CMBaseObject = FigAssetGetCMBaseObject(a1);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v9)
    goto LABEL_8;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v11 = v9(CMBaseObject, CFSTR("assetProperty_CreationOptionsDictionary"), *MEMORY[0x1E0C9AE00], &cf);
  if ((_DWORD)v11)
  {
LABEL_58:
    v18 = v11;
    v15 = 0;
    goto LABEL_60;
  }
  if (!cf)
  {
    v18 = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_14;
  }
  v12 = FigAssetGetCMBaseObject(a1);
  v13 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v13)
  {
LABEL_8:
    v15 = 0;
    goto LABEL_9;
  }
  v11 = v13(v12, CFSTR("assetProperty_InstanceUUID"), v10, v43);
  if ((_DWORD)v11)
    goto LABEL_58;
  v39 = a4;
  if (FigIsItOKToLogURLs())
    v14 = FPSupport_GetAssetDoNotLogURLs(a1) == 0;
  else
    v14 = 0;
  DataValue = (const __CFData *)FigCFDictionaryGetDataValue();
  DictionaryValue = (const __CFDictionary *)FigCFDictionaryGetDictionaryValue();
  if (a3)
    MutableCopy = CFDictionaryCreateMutableCopy(v10, 0, a3);
  else
    MutableCopy = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = MutableCopy;
  v23 = FigAssetGetCMBaseObject(a1);
  v24 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (v24)
  {
    v38 = v14;
    v25 = v24(v23, CFSTR("assetProperty_CreationURL"), v10, &v41);
    if (!(_DWORD)v25)
    {
      v26 = FigCFURLIsLocalResource();
      FigCFDictionarySetInt();
      v27 = (const __CFString *)FigCFHTTPCopyClientProcessName(DataValue);
      v28 = v27;
      v16 = 0;
      if (a2 == 2 && v26 && v27)
      {
        v29 = CFStringCreateMutableCopy(v10, 0, v27);
        v16 = v29;
        if (!v29)
        {
          v17 = 0;
          v18 = 4294955295;
LABEL_55:
          CFRelease(v28);
          goto LABEL_10;
        }
        CFStringAppend(v29, CFSTR("_offline"));
        CFRetain(v16);
        CFRelease(v28);
        v28 = v16;
      }
      v17 = (const void *)FigCFHTTPCopyClientBundleIdentifier(DataValue);
      v40 = v28;
      if (DictionaryValue)
      {
        Value = CFDictionaryGetValue(DictionaryValue, CFSTR("ServiceIdentifier"));
        if (!Value || (v31 = Value, v32 = CFGetTypeID(Value), v32 != CFStringGetTypeID()))
          v31 = 0;
        fra_setCFStringRefValueFromKeyInDict(v15, CFSTR("StorefrontID"), DictionaryValue);
        fra_setCFStringRefValueFromKeyInDict(v15, CFSTR("MediaIdentifier"), DictionaryValue);
        fra_setCFStringRefValueFromKeyInDict(v15, CFSTR("ContentProvider"), DictionaryValue);
        if (v15)
        {
          if (CFSTR("ServiceInformationKey"))
          {
            v33 = CFDictionaryGetValue(DictionaryValue, CFSTR("ServiceInformationKey"));
            if (v33)
            {
              v34 = CFGetTypeID(v33);
              if (v34 == CFDictionaryGetTypeID())
                FigCFDictionarySetValueFromKeyInDict();
            }
          }
        }
        v35 = a2;
        v36 = CFDictionaryGetValue(DictionaryValue, CFSTR("HierarchyToken"));
      }
      else
      {
        v35 = a2;
        v36 = 0;
        v31 = 0;
      }
      v18 = FigReportingAgentCreate(v43[0], v40, v31, v36, v17, v35, v15, v38, v39);
      if (!(_DWORD)v18)
      {
        if (dword_1EE2A3368)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v35 == 1 || v35 == 3 || v35 == 2)
          FigCAStatsReportingSubmitData();
      }
      v28 = v40;
      if (!v40)
        goto LABEL_10;
      goto LABEL_55;
    }
    v18 = v25;
LABEL_60:
    v16 = 0;
    v17 = 0;
    goto LABEL_10;
  }
LABEL_9:
  v16 = 0;
  v17 = 0;
  v18 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
LABEL_14:
  if (v43[0])
    CFRelease(v43[0]);
  if (v17)
    CFRelease(v17);
  if (v41)
    CFRelease(v41);
  if (v16)
    CFRelease(v16);
  return v18;
}

const void *fra_setCFStringRefValueFromKeyInDict(const void *result, void *key, CFDictionaryRef theDict)
{
  CFTypeID v3;

  if (result)
  {
    if (key)
    {
      result = CFDictionaryGetValue(theDict, key);
      if (result)
      {
        v3 = CFGetTypeID(result);
        result = (const void *)CFStringGetTypeID();
        if ((const void *)v3 == result)
          return (const void *)FigCFDictionarySetValueFromKeyInDict();
      }
    }
  }
  return result;
}

uint64_t FigReportingAgentCreate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, const __CFDictionary *a7, char a8, _QWORD *a9)
{
  uint64_t GlobalNetworkBufferingQueue;
  NSObject *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  __CFDictionary *Mutable;
  const __CFDictionary *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  dispatch_source_t v30;
  void *v31;
  NSObject *v32;
  dispatch_time_t v33;
  uint64_t v35;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a9)
    return 4294955296;
  MEMORY[0x19402F294](&FigReportingAgentCreate_sCreateStaticKeyArrayForTCPIStatsOnce, fra_createStaticKeyArrayForTCPIStats);
  GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
  if (!GlobalNetworkBufferingQueue)
    return 0;
  v14 = GlobalNetworkBufferingQueue;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigReportingAgentGetClassID_sRegisterFigReportingAgentOnce, RegisterFigReportingAgentBaseType);
  v16 = CMDerivedObjectCreate();
  if ((_DWORD)v16)
    return v16;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955295;
  v18 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 124) = CFPreferencesGetAppIntegerValue(CFSTR("force_reporting"), CFSTR("com.apple.coremedia"), 0) != 0;
  v19 = a2 ? CFRetain(a2) : 0;
  *(_QWORD *)(v18 + 16) = v19;
  v20 = a3 ? CFRetain(a3) : 0;
  *(_QWORD *)(v18 + 40) = v20;
  fra_setAdditionalReportingConfigParams(v18, a7);
  v21 = a1 ? CFRetain(a1) : 0;
  *(_QWORD *)(v18 + 24) = v21;
  v22 = a4 ? CFRetain(a4) : 0;
  *(_QWORD *)(v18 + 48) = v22;
  v23 = a5 ? CFRetain(a5) : 0;
  *(_QWORD *)(v18 + 56) = v23;
  *(_QWORD *)(v18 + 104) = v14;
  dispatch_retain(v14);
  *(_QWORD *)(v18 + 96) = FigSimpleMutexCreate();
  *(_DWORD *)(v18 + 120) = a6;
  *(_DWORD *)(v18 + 136) = 0;
  FigCFDictionaryGetIntIfPresent();
  *(_BYTE *)(v18 + 140) = 0;
  *(_BYTE *)(v18 + 160) = a8;
  v16 = FigReportingSessionStatsCreate((_QWORD *)v18);
  if ((_DWORD)v16)
    return v16;
  if (!*(_QWORD *)v18)
    return 4294955295;
  Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v25 = Mutable;
  if (a5 && Mutable)
    CFDictionarySetValue(Mutable, CFSTR("FRM_BundleName"), a5);
  switch(a6)
  {
    case 1:
      v26 = FigReportingModeratorCreateForHLS((uint64_t)v15, *(const void **)v18, v25, (_QWORD *)(v18 + 112));
      goto LABEL_30;
    case 2:
      goto LABEL_29;
    case 3:
      v26 = FigReportingModeratorCreateForStreamingAssetDownloader((uint64_t)v15, *(const void **)v18, (_QWORD *)(v18 + 112));
      goto LABEL_30;
    case 4:
      *(_BYTE *)(v18 + 142) = 1;
LABEL_29:
      v26 = FigReportingModeratorCreateForCRABS((uint64_t)v15, *(const void **)v18, (uint64_t)v25, (_QWORD *)(v18 + 112));
LABEL_30:
      v27 = v26;
      if ((_DWORD)v26)
        goto LABEL_40;
      if (!*(_QWORD *)(v18 + 112))
      {
        v35 = FigSignalErrorAt();
LABEL_48:
        v27 = v35;
        goto LABEL_40;
      }
      *(_BYTE *)(v18 + 125) = 1;
      *(_DWORD *)(v18 + 32) = arc4random();
      *(double *)(v18 + 144) = (double)arc4random() / 4294967300.0;
      if (*(_DWORD *)(v18 + 120) != 1)
      {
LABEL_38:
        v27 = 0;
        *a9 = 0;
        goto LABEL_40;
      }
      v28 = CMBaseObjectGetDerivedStorage();
      if (!v28)
      {
LABEL_39:
        v27 = 4294955296;
        goto LABEL_40;
      }
      v29 = v28;
      if (!*(_BYTE *)(v28 + 132))
      {
        *(_QWORD *)(v28 + 80) = FigGetUpTimeNanoseconds();
        v30 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(v29 + 104));
        *(_QWORD *)(v29 + 72) = v30;
        if (v30)
        {
          v31 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
          if (v31)
          {
            dispatch_set_context(*(dispatch_object_t *)(v29 + 72), v31);
            v32 = *(NSObject **)(v29 + 72);
            v33 = dispatch_walltime(0, 300000000000);
            dispatch_source_set_timer(v32, v33, 0x45D964B800uLL, 0xEE6B280uLL);
            dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v29 + 72), (dispatch_function_t)fra_handlePeriodicTimerCallback);
            dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v29 + 72), (dispatch_function_t)fra_handlePeriodicTimerCancelCallback);
            dispatch_resume(*(dispatch_object_t *)(v29 + 72));
            goto LABEL_38;
          }
        }
        v35 = FigSignalErrorAt();
        if (!(_DWORD)v35)
          goto LABEL_38;
        goto LABEL_48;
      }
      v27 = 4294955290;
LABEL_40:
      if (v25)
        CFRelease(v25);
      break;
    default:
      goto LABEL_39;
  }
  return v27;
}

CFArrayRef fra_createStaticKeyArrayForTCPIStats()
{
  CFArrayRef result;

  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigReportingTCPInfoKeyForTimeWeightedStats, 8, 0);
  kFigReportingEventKeyArray_TCPInfoKeyForTimeWeightedStats = (uint64_t)result;
  return result;
}

void fra_setAdditionalReportingConfigParams(uint64_t a1, const __CFDictionary *a2)
{
  const __CFDictionary *v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v7;
  const void *v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef v10;

  if (!a1)
    return;
  v4 = *(const __CFDictionary **)(a1 + 64);
  if (a2 && !v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = a2;
LABEL_8:
    MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, v4);
    goto LABEL_9;
  }
  if (!a2 && v4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    goto LABEL_8;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if ((unint64_t)a2 | (unint64_t)v4)
  {
    v10 = CFDictionaryCreateMutableCopy(v9, 0, v4);
    if (!v10)
      return;
    v7 = v10;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fra_mergeDictApplier, v10);
    goto LABEL_10;
  }
  MutableCopy = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
LABEL_9:
  v7 = MutableCopy;
  if (!MutableCopy)
    return;
LABEL_10:
  if (*(_BYTE *)(a1 + 124))
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
  }
  FigCFDictionarySetInt();
  v8 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  CFRetain(v7);
  if (v8)
    CFRelease(v8);
  CFRelease(v7);
}

void fra_handlePeriodicTimerCallback(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  uint64_t DerivedStorage;
  uint64_t v4;

  if (a1)
  {
    v1 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v1)
    {
      v2 = (const void *)v1;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        v4 = DerivedStorage;
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
        fra_issueAndCopyReportingEvent(v4, 110, 0, 0, 0, 0);
        MEMORY[0x19402EF04](*(_QWORD *)(v4 + 96));
      }
      CFRelease(v2);
    }
  }
}

void fra_handlePeriodicTimerCancelCallback(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigReportingAgentStatsUpdateSampleValueWithBool(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (a4)
    v4 = 100;
  else
    v4 = 0;
  if (!a1)
    return 4294955296;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v8)
    return v8(a1, a2, a3, v4);
  else
    return 4294954514;
}

uint64_t FigReportingAgentSetStatsForAllKeys(uint64_t a1, uint64_t a2)
{
  const __CFArray *v4;
  CFIndex v5;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t Value;
  uint64_t (*v9)(uint64_t, uint64_t, const void *, uint64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    return 0;
  v4 = (const __CFArray *)FigCFDictionaryCopyArrayOfKeys();
  v5 = 0;
  while (1)
  {
    if (v4)
      Count = CFArrayGetCount(v4);
    else
      Count = 0;
    if (v5 >= Count)
    {
      v11 = 0;
      if (!v4)
        return v11;
      goto LABEL_15;
    }
    ValueAtIndex = CFArrayGetValueAtIndex(v4, v5);
    Value = FigCFDictionaryGetValue();
    v9 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 48);
    if (!v9)
      break;
    v10 = v9(a1, a2, ValueAtIndex, Value, 0);
    ++v5;
    if ((_DWORD)v10)
    {
      v11 = v10;
      if (!v4)
        return v11;
      goto LABEL_15;
    }
  }
  v11 = 4294954514;
  if (!v4)
    return v11;
LABEL_15:
  CFRelease(v4);
  return v11;
}

CFStringRef FigReportingAgentCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigReportingAgent %p]"), a1);
}

uint64_t reportingAgentInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
  reportingAgentInvalidateGuts(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 96));
  return 0;
}

uint64_t reportingAgentFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  reportingAgentInvalidateGuts(a1);
  v3 = *(NSObject **)(DerivedStorage + 104);
  if (v3)
    dispatch_release(v3);
  return FigSimpleMutexDestroy();
}

__CFString *reportingAgentCopyDebugDescription()
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigReportingAgent : "));
  return Mutable;
}

uint64_t reportingAgentSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  uint64_t v8;
  CFTypeID v9;
  uint64_t v10;
  void (*v11)(uint64_t, const void *, const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955296;
  v6 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
  if (*(_BYTE *)(v6 + 132))
  {
    v8 = 4294955290;
    goto LABEL_13;
  }
  if (!CFEqual(a2, CFSTR("IssueEndEvents")))
  {
    if (CFEqual(a2, CFSTR("Timebase")))
    {
      if (!a3)
        goto LABEL_15;
      v9 = CFGetTypeID(a3);
      if (v9 != CMTimebaseGetTypeID())
        goto LABEL_15;
      v10 = *(_QWORD *)(v6 + 112);
      v11 = *(void (**)(uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v11)
        v11(v10, a2, a3);
    }
    v8 = 0;
    goto LABEL_13;
  }
  if (!a3 || (v7 = CFGetTypeID(a3), v7 != CFBooleanGetTypeID()))
  {
LABEL_15:
    v8 = 4294955296;
    goto LABEL_13;
  }
  v8 = 0;
  *(_BYTE *)(v6 + 125) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
LABEL_13:
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 96));
  return v8;
}

void reportingAgentInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 132))
    return;
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 125) && *(_DWORD *)(DerivedStorage + 120) != 3)
    fra_ensureRTCReportingConnection(a1, 0);
  v4 = *(NSObject **)(v3 + 72);
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(*(dispatch_object_t *)(v3 + 72));
  }
  if (*(_BYTE *)(v3 + 125))
  {
    v5 = *(_DWORD *)(v3 + 120);
    if ((v5 - 1) < 2 || v5 == 4)
    {
      fra_issueAndCopyReportingEvent(v3, 112, 0, 0, 1, 0);
      fra_issueAndCopyReportingEvent(v3, 110, 0, 0, 1, 0);
      v7 = v3;
      v8 = 101;
      v9 = 0;
LABEL_16:
      fra_issueAndCopyReportingEvent(v7, v8, 0, v9, 1, 0);
      goto LABEL_17;
    }
    if (v5 == 3)
    {
      v7 = v3;
      v8 = 701;
      v9 = 1;
      goto LABEL_16;
    }
  }
LABEL_17:
  if (*(_QWORD *)v3)
    CFRelease(*(CFTypeRef *)v3);
  v10 = *(const void **)(v3 + 8);
  if (v10)
    CFRelease(v10);
  v11 = *(const void **)(v3 + 16);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(v3 + 24);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(v3 + 40);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(v3 + 48);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(v3 + 56);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(v3 + 64);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(v3 + 112);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(v3 + 152);
  if (v18)
    CFRelease(v18);
  *(_BYTE *)(v3 + 132) = 1;
}

uint64_t fra_ensureRTCReportingConnection(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result;
  uint64_t v4;
  const __CFString *v5;
  const __CFString *v6;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = result;
    if (!*(_BYTE *)(result + 142)
      && (*(_DWORD *)(result + 136) & 0xFFFFFFFD) == 0
      && !*(_BYTE *)(result + 132)
      && !*(_QWORD *)(result + 8))
    {
      fra_setAdditionalReportingConfigParams(result, a2);
      if (*(_BYTE *)(v4 + 124))
      {
        v5 = CFSTR("com.apple.coremedia.apple_internal");
        v6 = CFSTR("CM_AppleInternal");
      }
      else
      {
        v6 = *(const __CFString **)(v4 + 16);
        v5 = *(const __CFString **)(v4 + 40);
      }
      result = FigRTCReportingCreate(*(_DWORD *)(v4 + 32), *(_QWORD *)(v4 + 24), *(_DWORD *)(v4 + 120), (uint64_t)v6, (uint64_t)v5, *(const void **)(v4 + 48), *(_QWORD *)(v4 + 56), *(const __CFDictionary **)(v4 + 64), *(_BYTE *)(v4 + 140), *(_BYTE *)(v4 + 160), (uint64_t *)(v4 + 8));
      if (!(_DWORD)result)
        *(_DWORD *)(v4 + 136) = 1;
    }
  }
  return result;
}

uint64_t fra_issueAndCopyReportingEvent(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4, int a5, CFDictionaryRef *a6)
{
  uint64_t UpTimeNanoseconds;
  CFAllocatorRef *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  CFMutableDictionaryRef Mutable;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, CFTypeRef *, CFTypeRef *);
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t (*v22)(uint64_t, CFTypeRef, CFMutableDictionaryRef);
  CFMutableDictionaryRef v23;
  CFMutableDictionaryRef v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, CFMutableDictionaryRef);
  uint64_t v28;
  CFTypeRef v29;
  uint64_t (*v30)(uint64_t, CFTypeRef, CFMutableDictionaryRef);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, CFTypeRef, CFMutableDictionaryRef);
  uint64_t v33;
  CFTypeRef v34;
  CFTypeRef v35;
  uint64_t (*v36)(uint64_t, CFTypeRef, CFTypeRef, CFMutableDictionaryRef);
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, CFMutableDictionaryRef);
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, int *, CFTypeRef *);
  const __CFArray *v47;
  CFMutableArrayRef v48;
  CFTypeRef v49;
  CFTypeRef v50;
  int v51;
  CFTypeRef v52;
  CFTypeRef cf;

  v52 = 0;
  cf = 0;
  v51 = 0;
  v50 = 0;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!a1)
  {
    v41 = 0;
    Mutable = 0;
    goto LABEL_58;
  }
  v14 = UpTimeNanoseconds;
  if (!a4 && !*(_QWORD *)(a1 + 8) && !*(_BYTE *)(a1 + 142))
  {
    Mutable = 0;
    goto LABEL_92;
  }
  if (*(_BYTE *)(a1 + 132))
  {
    Mutable = 0;
    goto LABEL_89;
  }
  if (a6)
    *a6 = 0;
  v15 = *v13;
  Mutable = CFDictionaryCreateMutable(*v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v41 = 4294955295;
    goto LABEL_58;
  }
  v17 = *(_QWORD *)(a1 + 112);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
  if (!v18)
    goto LABEL_57;
  v19 = v18(v17, a2, &cf, &v52);
  if ((_DWORD)v19)
    goto LABEL_94;
  if ((_DWORD)a2 == 101)
  {
    v20 = *(_QWORD *)a1;
    v21 = cf;
    v22 = *(uint64_t (**)(uint64_t, CFTypeRef, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 16);
    if (v22)
    {
      v19 = v22(v20, v21, Mutable);
      if (!(_DWORD)v19)
      {
        v23 = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v23)
        {
          v24 = v23;
          v25 = *(_QWORD *)a1;
          v26 = kFigReportingEventKeyArray_TCPInfoKeyForTimeWeightedStats;
          v27 = *(unsigned int (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 16);
          if (v27 && !v27(v25, v26, v24))
          {
            fra_updatePercentValue();
            fra_updatePercentValue();
            fra_updatePercentValue();
            fra_updatePercentValue();
          }
          CFRelease(v24);
        }
        goto LABEL_35;
      }
LABEL_94:
      v41 = v19;
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if ((int)a2 > 2000)
  {
    if ((a2 - 2001) < 2 || (_DWORD)a2 == 3001)
      goto LABEL_35;
LABEL_33:
    v33 = *(_QWORD *)a1;
    v35 = v52;
    v34 = cf;
    v36 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 32);
    if (v36)
    {
      v19 = v36(v33, v34, v35, Mutable);
      if (!(_DWORD)v19)
        goto LABEL_35;
      goto LABEL_94;
    }
LABEL_57:
    v41 = 4294954514;
    goto LABEL_58;
  }
  if ((_DWORD)a2 == 110)
  {
    v31 = *(_QWORD *)a1;
    v49 = cf;
    v32 = *(uint64_t (**)(uint64_t, CFTypeRef, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 8);
    if (!v32)
      goto LABEL_57;
    v19 = v32(v31, v49, Mutable);
    if ((_DWORD)v19)
      goto LABEL_94;
    if (a5)
      FigCFDictionarySetInt();
    FigCFDictionarySetInt64();
    *(_QWORD *)(a1 + 80) = v14;
  }
  else
  {
    if ((_DWORD)a2 != 112)
      goto LABEL_33;
    v28 = *(_QWORD *)a1;
    v29 = cf;
    v30 = *(uint64_t (**)(uint64_t, CFTypeRef, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 24);
    if (!v30)
      goto LABEL_57;
    v19 = v30(v28, v29, Mutable);
    if ((_DWORD)v19)
      goto LABEL_94;
  }
LABEL_35:
  v37 = *(_QWORD *)(a1 + 112);
  v38 = *(void (**)(uint64_t, uint64_t, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 24);
  if (v38)
    v38(v37, a2, Mutable);
  if (a3)
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)fra_mergeDictApplier, Mutable);
  if ((_DWORD)a2 == 110)
  {
    fra_issueDeferredRTCReportingEvents(a1);
    v39 = fra_issueRTCReportingEventRealTime(a1, 110, Mutable);
LABEL_49:
    v41 = v39;
    goto LABEL_50;
  }
  if ((a2 & 0xFFFFFFFE) == 0x320)
  {
    v40 = a2 == 800;
    if (!*(_BYTE *)(a1 + 132))
    {
      if (*(_BYTE *)(a1 + 142))
        goto LABEL_51;
      if (*(unsigned __int8 *)(a1 + 141) != v40)
      {
        *(_BYTE *)(a1 + 141) = v40;
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        v39 = FigNetworkInterfaceReporterReportStreamingActivity(Mutable);
        goto LABEL_49;
      }
LABEL_92:
      v41 = 4294955296;
      goto LABEL_58;
    }
LABEL_89:
    v41 = 4294955290;
    goto LABEL_58;
  }
  if ((_DWORD)a2 == 112)
  {
    if (!CFDictionaryGetCount(Mutable))
      goto LABEL_51;
LABEL_48:
    v39 = fra_issueRTCReportingEvent(a1, a2, Mutable, a4);
    goto LABEL_49;
  }
  if ((a2 - 2001) < 2)
    goto LABEL_51;
  if ((_DWORD)a2 == 113 && !a4)
  {
    v47 = *(const __CFArray **)(a1 + 152);
    if (v47 && CFArrayGetCount(v47) >= 10)
      fra_issueDeferredRTCReportingEvents(a1);
    if (!*(_BYTE *)(a1 + 142))
    {
      if (*(_QWORD *)(a1 + 152)
        || (v48 = CFArrayCreateMutable(v15, 0, MEMORY[0x1E0C9B378]), (*(_QWORD *)(a1 + 152) = v48) != 0))
      {
        FigCFDictionarySetInt();
        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 152), Mutable);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
    goto LABEL_51;
  }
  if ((_DWORD)a2 != 101)
  {
    if ((_DWORD)a2 == 3001)
      goto LABEL_51;
    if ((_DWORD)a2 == 901)
    {
      fra_issuePowerlogEvent((uint64_t *)a1);
      goto LABEL_51;
    }
    goto LABEL_48;
  }
  fra_issueDeferredRTCReportingEvents(a1);
  v41 = fra_issueRTCReportingEventRealTime(a1, 101, Mutable);
  CFDictionaryGetValue(Mutable, CFSTR("PlayTimeWC"));
  FigCFNumberGetFloat64();
  FigCAStatsReportingSubmitData();
LABEL_50:
  if ((_DWORD)v41)
    goto LABEL_58;
LABEL_51:
  v42 = *(_QWORD *)(a1 + 112);
  v43 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v43)
    goto LABEL_57;
  v19 = v43(v42, a2);
  if ((_DWORD)v19)
    goto LABEL_94;
  v44 = *(_QWORD *)(a1 + 112);
  v45 = *(void (**)(uint64_t, uint64_t, int *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v45)
  {
    v45(v44, a2, &v51, &v50);
    if (v51)
      fra_issueAndCopyReportingEvent(a1);
  }
  v41 = 0;
LABEL_58:
  if (cf)
    CFRelease(cf);
  if (v52)
    CFRelease(v52);
  if (!(_DWORD)v41 && a6 && Mutable)
  {
    *a6 = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Mutable);
    goto LABEL_68;
  }
  if (Mutable)
LABEL_68:
    CFRelease(Mutable);
  if (v50)
    CFRelease(v50);
  return v41;
}

void fra_mergeDictApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
  if (key && value)
  {
    if (theDict)
      CFDictionarySetValue(theDict, key, value);
  }
}

void fra_issueDeferredRTCReportingEvents(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (!*(_BYTE *)(a1 + 142))
    FigCFArrayApplyFunction();
  if (v1)
    CFRelease(v1);
}

uint64_t fra_issueRTCReportingEventRealTime(uint64_t result, uint64_t a2, const void *a3)
{
  if (result)
  {
    if (*(_BYTE *)(result + 142) || !*(_QWORD *)(result + 8))
    {
      return 0;
    }
    else if (*(_BYTE *)(result + 132))
    {
      return 4294955290;
    }
    else
    {
      return FigRTCReportingSendMsgRealTime(*(_QWORD *)(result + 8), a2, 0, a3);
    }
  }
  return result;
}

void fra_issuePowerlogEvent(uint64_t *a1)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v3;
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, __CFDictionary *);
  int v9;
  uint64_t v10;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = Mutable;
  v10 = 0;
  if (a1 && Mutable)
  {
    v4 = a1[14];
    v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
    if (v5)
    {
      if (!v5(v4, 900, &v10, 0))
      {
        v6 = v10;
        if (v10)
        {
          v7 = *a1;
          v8 = *(unsigned int (**)(uint64_t, uint64_t, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 16);
          if (v8)
          {
            if (!v8(v7, v6, v3))
            {
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValueFromKeyInDict();
              FigCFDictionarySetValueFromKeyInDict();
              CFDictionaryRemoveValue(v3, CFSTR("IBR"));
              CFDictionaryRemoveValue(v3, CFSTR("PlayerTWIBR"));
              CFDictionaryRemoveValue(v3, CFSTR("PlayerTWIABR"));
              CFDictionaryRemoveValue(v3, CFSTR("PowerLogID"));
              FigCFDictionarySetValue();
              v9 = *((_DWORD *)a1 + 30);
              if (v9 == 1 || v9 == 4 || v9 == 2)
                FigPlaybackLogPowerEvent();
            }
          }
        }
      }
    }
    goto LABEL_12;
  }
  if (Mutable)
LABEL_12:
    CFRelease(v3);
}

uint64_t fra_issueRTCReportingEvent(uint64_t result, uint64_t a2, __CFDictionary *a3, int a4)
{
  uint64_t v4;
  int v6;
  uint64_t v7;
  const __CFString *v8;
  const __CFString *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  uint64_t v12;

  if (result)
  {
    v4 = result;
    if (*(_BYTE *)(result + 142))
      return 0;
    v6 = a2;
    v7 = *(_QWORD *)(result + 8);
    if (!a4 && !v7)
      return 4294955296;
    if (*(_BYTE *)(v4 + 132))
      return 4294955290;
    ++*(_DWORD *)(v4 + 128);
    if (v7)
      return FigRTCReportingSendMsgWithErrors(v7, a2, 0, (uint64_t)a3);
    if (!a4)
      return 0;
    if (*(_BYTE *)(v4 + 124))
    {
      v8 = CFSTR("com.apple.coremedia.apple_internal");
      v9 = CFSTR("CM_AppleInternal");
    }
    else
    {
      v9 = *(const __CFString **)(v4 + 16);
      v8 = *(const __CFString **)(v4 + 40);
    }
    v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(v4 + 128));
    if (v10)
    {
      v11 = v10;
      CFDictionarySetValue(a3, CFSTR("EventNumber"), v10);
      v12 = FigRTCReportingSendOneMessageWithDictionary(*(_DWORD *)(v4 + 32), *(_QWORD *)(v4 + 24), *(_DWORD *)(v4 + 120), (uint64_t)v9, (uint64_t)v8, *(const void **)(v4 + 48), *(_QWORD *)(v4 + 56), *(const __CFDictionary **)(v4 + 64), v6, SHIWORD(v6), 0, 0, *(_BYTE *)(v4 + 160), (uint64_t)a3);
      CFRelease(v11);
      return v12;
    }
    else
    {
      return 4294955295;
    }
  }
  return result;
}

uint64_t fra_updatePercentValue()
{
  FigCFDictionaryGetInt64IfPresent();
  return FigCFDictionaryGetInt64IfPresent();
}

uint64_t fra_issueDeferredRTCReportingEventApplierFunc(__CFDictionary *a1, uint64_t a2)
{
  uint64_t result;

  result = FigCFDictionaryGetIntIfPresent();
  if ((_DWORD)result)
  {
    CFDictionaryRemoveValue(a1, CFSTR("deferredEventID"));
    return fra_issueRTCReportingEvent(a2, 0, a1, 0);
  }
  return result;
}

uint64_t reportingAgentIssueAndCopyRTCReportingEvent(uint64_t a1, uint64_t a2, uint64_t a3, int a4, CFDictionaryRef *a5)
{
  uint64_t result;
  uint64_t v9;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v9 = result;
    if (*(_BYTE *)(result + 132))
    {
      return 4294955290;
    }
    else
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 96));
      if ((a4 || *(_QWORD *)(v9 + 8) || *(_BYTE *)(v9 + 142)) && !*(_BYTE *)(v9 + 132))
        fra_issueAndCopyReportingEvent(v9, a3, 0, a4, 0, a5);
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 96));
      return 0;
    }
  }
  return result;
}

uint64_t reportingAgentIssueAndCopyRTCReportingEventWithPayload(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, int a5, CFDictionaryRef *a6)
{
  uint64_t DerivedStorage;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v11 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    if (!*(_BYTE *)(v11 + 132))
      fra_issueAndCopyReportingEvent(v11, a3, a4, a5, 0, a6);
    MEMORY[0x19402EF04](*(_QWORD *)(v11 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsCopy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t result;
  CFTypeRef v7;
  uint64_t v8;
  void (*v9)(uint64_t, CFTypeRef, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  result = 4294955296;
  if (a3 && DerivedStorage && v5 && (uint64_t *)v5 != DerivedStorage)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 96));
    if (*(_QWORD *)v5)
      v7 = CFRetain(*(CFTypeRef *)v5);
    else
      v7 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v5 + 96));
    MEMORY[0x19402EEEC](DerivedStorage[12]);
    v8 = *DerivedStorage;
    v9 = *(void (**)(uint64_t, CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 184);
    if (v9)
      v9(v8, v7, a3);
    MEMORY[0x19402EF04](DerivedStorage[12]);
    if (v7)
      CFRelease(v7);
    return 0;
  }
  return result;
}

uint64_t reportingAgentStatsAddToCountValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v8 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    if (!*(_BYTE *)(v8 + 132))
    {
      v9 = *(_QWORD *)v8;
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (v10)
        v10(v9, a2, a3, a4);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsUpdateSampleValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v8 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    if (!*(_BYTE *)(v8 + 132))
    {
      v9 = *(_QWORD *)v8;
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v10)
        v10(v9, a2, a3, a4);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v8 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsSetCFTypeValueWithOptions(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, const void *, uint64_t);
  int v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v10 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    if (!*(_BYTE *)(v10 + 132))
    {
      v11 = *(_QWORD *)v10;
      v12 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 80);
      if (v12)
      {
        v13 = v12(v11, a2, a3, a4);
        if (a5)
        {
          if (!v13)
            reportingAgentFreezeKey(*(_QWORD *)v10, a2, a3);
        }
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsSetIntValueWithOptions(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, int a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, const void *, uint64_t);
  int v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v10 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    if (!*(_BYTE *)(v10 + 132))
    {
      v11 = *(_QWORD *)v10;
      v12 = *(uint64_t (**)(uint64_t, uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 88);
      if (v12)
      {
        v13 = v12(v11, a2, a3, a4);
        if (a5)
        {
          if (!v13)
            reportingAgentFreezeKey(*(_QWORD *)v10, a2, a3);
        }
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 96));
  }
  return 0;
}

uint64_t reportingAgentStatsResetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v6 = result;
    result = 4294955296;
    if (a2)
    {
      if (a3)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(v6 + 96));
        if (!*(_BYTE *)(v6 + 132))
        {
          v7 = *(_QWORD *)v6;
          v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
          if (v8)
            v8(v7, a2, a3);
        }
        MEMORY[0x19402EF04](*(_QWORD *)(v6 + 96));
        return 0;
      }
    }
  }
  return result;
}

uint64_t reportingAgentStatsResetAll(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = result;
    if (*(_BYTE *)(result + 132))
    {
      return 4294955290;
    }
    else if (a2)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(result + 96));
      if (!*(_BYTE *)(v4 + 132))
      {
        v5 = *(_QWORD *)v4;
        v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (*(_QWORD *)(v6 + 160))
          (*(void (**)(uint64_t, uint64_t))(v6 + 168))(v5, a2);
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v4 + 96));
      return 0;
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

uint64_t reportingAgentPeriodicStatsResetValue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    if (!*(_BYTE *)(v4 + 132))
    {
      v5 = *(_QWORD *)v4;
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (v6)
        v6(v5, a2);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v4 + 96));
  }
  return 0;
}

uint64_t reportingAgentUpdateUserInfo(uint64_t a1, const void *a2, const void *a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v8 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 142))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
      if (!*(_BYTE *)(v8 + 132))
      {
        if (a2)
        {
          v9 = *(const void **)(v8 + 16);
          *(_QWORD *)(v8 + 16) = a2;
          CFRetain(a2);
          if (v9)
            CFRelease(v9);
        }
        if (a3 && !*(_QWORD *)(v8 + 40))
          *(_QWORD *)(v8 + 40) = CFRetain(a3);
        fra_setAdditionalReportingConfigParams(v8, a4);
        v10 = *(_QWORD *)(v8 + 8);
        if (v10)
        {
          if (*(_BYTE *)(v8 + 124))
          {
            v11 = CFSTR("com.apple.coremedia.apple_internal");
            v12 = CFSTR("CM_AppleInternal");
          }
          else
          {
            v12 = *(const __CFString **)(v8 + 16);
            v11 = *(const __CFString **)(v8 + 40);
          }
          FigRTCReportingSetUserInfo(v10, *(_QWORD *)(v8 + 24), (uint64_t)v12, *(_QWORD *)(v8 + 56), (uint64_t)v11, *(const __CFDictionary **)(v8 + 64), *(unsigned __int8 *)(v8 + 160), *(_DWORD *)(v8 + 120));
        }
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 96));
    }
  }
  return 0;
}

uint64_t reportingAgentSetIntValueAndIssuePeriodicEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t *);
  int v11;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v8 = result;
    if (*(_BYTE *)(result + 132))
      return 4294955290;
    if (!*(_QWORD *)(result + 8) && !*(_BYTE *)(result + 142))
      return 4294955296;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 96));
    if (*(_BYTE *)(v8 + 132))
      goto LABEL_20;
    v16 = 0;
    v9 = *(_QWORD *)v8;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 144);
    if (!v10)
      goto LABEL_20;
    v11 = v10(v9, a2, a3, &v16);
    if (!v11)
    {
      if (v16 == a4)
      {
LABEL_18:
        v14 = *(_QWORD *)v8;
        v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 88);
        if (v15)
          v15(v14, a2, a3, a4);
LABEL_20:
        MEMORY[0x19402EF04](*(_QWORD *)(v8 + 96));
        return 0;
      }
      v11 = fra_issueAndCopyReportingEvent(v8, 110, 0, 0, 0, 0);
    }
    if (v11 != -17513 && v11 != 0 && v11 != -12005)
      goto LABEL_20;
    goto LABEL_18;
  }
  return result;
}

uint64_t reportingAgentActivate(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955296;
  v5 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
  if (!*(_BYTE *)(v5 + 132))
    fra_ensureRTCReportingConnection(a1, a2);
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 96));
  return 0;
}

uint64_t reportingAgentDeactivate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 142))
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
      if (!*(_BYTE *)(v1 + 132))
      {
        v2 = *(const void **)(v1 + 8);
        if (v2)
        {
          CFRelease(v2);
          *(_QWORD *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 136) = 2;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(v1 + 96));
    }
  }
  return 0;
}

uint64_t reportingAgentStatsAppendCFTypeValueToArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v10 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
    if (!*(_BYTE *)(v10 + 132))
    {
      v11 = *(_QWORD *)v10;
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 192);
      if (v12)
        v12(v11, a2, a3, a4, a5);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 96));
  }
  return 0;
}

void reportingAgentFreezeKey(uint64_t a1, uint64_t a2, const void *a3)
{
  __CFSet *Mutable;
  __CFSet *v7;
  void (*v8)(uint64_t, uint64_t, __CFSet *);

  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B3B0]);
  if (Mutable)
  {
    v7 = Mutable;
    CFSetAddValue(Mutable, a3);
    v8 = *(void (**)(uint64_t, uint64_t, __CFSet *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 200);
    if (v8)
      v8(a1, a2, v7);
    CFRelease(v7);
  }
}

uint64_t FigPlayerSurrogateCreateWithOptions(const __CFAllocator *a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  CFTypeRef v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v12;
  const char *v13;
  uint64_t v14;
  CFTypeRef v15;
  const char *v16;
  __CFDictionary *Mutable;
  CFTypeRef v18;
  const char *v19;
  uint64_t v20;
  void *value;
  CFTypeRef cf;
  char __str[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  value = 0;
  cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
    return FigSignalErrorAt();
  FigPlayerGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    goto LABEL_23;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  *(_BYTE *)DerivedStorage = 0;
  if (a2)
  {
    v9 = CFRetain(a2);
    *(_BYTE *)(v8 + 120) = 0;
    *(_QWORD *)(v8 + 8) = v9;
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a2, CFSTR("LoggingIdentifier"), (const void **)&value))
      CFStringGetCString((CFStringRef)value, (char *)(v8 + 120), 10, 0x600u);
    FigCFDictionaryGetBooleanIfPresent();
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 8) = 0;
    *(_BYTE *)(DerivedStorage + 120) = 0;
  }
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = cf;
  v13 = cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 120) : "";
  snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlayer.notifications[%p.%s]", v12, v13);
  v14 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 16) = v14;
  v6 = FigCFWeakReferenceTableCreate();
  if ((_DWORD)v6)
  {
LABEL_23:
    v20 = v6;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *(_QWORD *)(v8 + 48) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
    v15 = cf;
    if (cf)
      v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
    else
      v16 = "";
    snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlayer[%p.%s]", v15, v16);
    *(_QWORD *)(v8 + 56) = FigDispatchQueueCreateWithPriority();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("ActionAtEnd"), CFSTR("Advance"));
    *(_QWORD *)(v8 + 72) = Mutable;
    v18 = cf;
    if (cf)
      v19 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
    else
      v19 = "";
    snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlayer.inboundNotifications[%p.%s]", v18, v19);
    v20 = 0;
    *(_QWORD *)(v8 + 64) = FigDispatchQueueCreateWithPriority();
    *(_BYTE *)(v8 + 89) = 1;
    *a3 = cf;
  }
  return v20;
}

uint64_t FigPlayerSurrogateCreate(const __CFAllocator *a1, CFTypeRef *a2)
{
  return FigPlayerSurrogateCreateWithOptions(a1, 0, a2);
}

uint64_t surrogatePlayer_Invalidate(void *a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294954511;
  v3 = DerivedStorage;
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *((_QWORD *)v3 + 2);
  if (v5)
    dispatch_sync_f(v5, 0, (dispatch_function_t)a_noop);
  dispatch_sync_f(*((dispatch_queue_t *)v3 + 7), a1, (dispatch_function_t)surrogatePlayer_invalidateInternal);
  return 0;
}

void surrogatePlayer_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  NSObject *v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  surrogatePlayer_Invalidate(a1);
  v4 = *(NSObject **)(DerivedStorage + 16);
  if (v4)
  {
    dispatch_sync_f(v4, 0, (dispatch_function_t)a_noop);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 16));
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 72);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 8);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 112);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 112) = 0;
  }
  v12 = *(NSObject **)(DerivedStorage + 56);
  if (v12)
  {
    dispatch_release(v12);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v13 = *(NSObject **)(DerivedStorage + 64);
  if (v13)
  {
    dispatch_release(v13);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
}

uint64_t surrogatePlayer_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  const __CFArray *Mutable;
  uint64_t v12;
  uint64_t FigBaseObject;
  uint64_t (*v14)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  int v19;
  CFTypeRef v20;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID v24;
  CFTypeID TypeID;
  CFTypeRef v26;
  CFIndex Count;
  const void *ValueAtIndex;
  CFTypeRef cf;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;

  cf = 0;
  v30 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v8 = 4294954511;
    goto LABEL_9;
  }
  if (!a4)
  {
    v8 = 4294954516;
    goto LABEL_7;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v8 = FigDispatchQueueHolderCreateWithDispatchQueue();
    if (!(_DWORD)v8)
      *a4 = 0;
    goto LABEL_7;
  }
  if (FigCFEqual())
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v31 = 0;
    v32 = 0;
    Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    v12 = *(_QWORD *)(DerivedStorage + 24);
    if (v12)
    {
      FigBaseObject = FigPlayerGetFigBaseObject(v12);
      v14 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v14)
        goto LABEL_26;
      v15 = v14(FigBaseObject, CFSTR("PerformanceHistoryArray"), a3, &v32);
      if ((_DWORD)v15)
        goto LABEL_57;
    }
    v16 = *(_QWORD *)(DerivedStorage + 32);
    if (!v16)
    {
LABEL_19:
      FigCFArrayAppendArray();
      FigCFArrayAppendArray();
      v8 = 0;
      *a4 = CFArrayCreateCopy(a3, Mutable);
LABEL_27:
      if (v32)
        CFRelease(v32);
      if (v31)
        CFRelease(v31);
      if (Mutable)
        CFRelease(Mutable);
      goto LABEL_7;
    }
    v17 = FigPlayerGetFigBaseObject(v16);
    v18 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v18)
    {
      v15 = v18(v17, CFSTR("PerformanceHistoryArray"), a3, &v31);
      if (!(_DWORD)v15)
        goto LABEL_19;
LABEL_57:
      v8 = v15;
      goto LABEL_27;
    }
LABEL_26:
    v8 = 4294954514;
    goto LABEL_27;
  }
  v19 = FigCFEqual();
  if (v19)
    a2 = CFSTR("VideoLayerArray");
  v8 = surrogatePlayer_copyPropertyFromCache(a1, (uint64_t)a2, &cf, &v30);
  v20 = v30;
  if (v30 || (_DWORD)v8 != -12784)
  {
    if ((_DWORD)v8 != -12784 && (_DWORD)v8 != 0)
      goto LABEL_7;
  }
  else
  {
    if (FigCFEqual())
    {
      v8 = 0;
      cf = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
    }
    else
    {
      v8 = 4294954512;
    }
    v20 = v30;
  }
  if (!v20)
    goto LABEL_43;
  v22 = FigPlayerGetFigBaseObject(v20);
  v23 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v23)
  {
    v8 = v23(v22, a2, *MEMORY[0x1E0C9AE00], &cf);
    if (!(_DWORD)v8)
    {
LABEL_43:
      if (!v19)
      {
LABEL_54:
        *a4 = cf;
        cf = 0;
        goto LABEL_9;
      }
      if (cf)
      {
        v24 = CFGetTypeID(cf);
        TypeID = CFArrayGetTypeID();
        v26 = cf;
        if (v24 == TypeID)
        {
          Count = CFArrayGetCount((CFArrayRef)cf);
          v26 = cf;
          if (Count > 0)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
            v26 = cf;
            cf = ValueAtIndex;
            if (ValueAtIndex)
              CFRetain(ValueAtIndex);
            goto LABEL_52;
          }
        }
      }
      else
      {
        v26 = 0;
      }
      cf = 0;
LABEL_52:
      if (v26)
        CFRelease(v26);
      goto LABEL_54;
    }
  }
  else
  {
    v8 = 4294954514;
  }
LABEL_7:
  if (cf)
    CFRelease(cf);
LABEL_9:
  if (v30)
    CFRelease(v30);
  return v8;
}

OpaqueFigPlayer *surrogatePlayer_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  OpaqueFigPlayer *v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, CFTypeRef, CFTypeRef);
  CFTypeRef v12;
  CFTypeRef cf;
  char v14;
  uint64_t context;
  uint64_t v16;
  OpaqueFigPlayer *v17;

  v14 = 0;
  v12 = 0;
  cf = 0;
  if (!a2)
  {
    v4 = FigSignalErrorAt();
    goto LABEL_20;
  }
  v4 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)surrogatePlayer_handleSetProperty, &v14, &cf, &v12);
  if ((_DWORD)v4)
  {
LABEL_20:
    v6 = (OpaqueFigPlayer *)v4;
    goto LABEL_14;
  }
  if (v14)
  {
LABEL_13:
    v6 = 0;
    goto LABEL_14;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v17 = 0;
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
  v6 = v17;
  if (v16)
  {
    v8 = v12;
    v7 = cf;
    FigBaseObject = FigPlayerGetFigBaseObject(v16);
    v10 = *(void (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v10)
      v10(FigBaseObject, v7, v8);
  }
  if (v6)
  {
    if (!FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual()
      && !FigCFEqual())
    {
      FigPlayerSetProperty(v6, (const __CFString *)cf, v12);
    }
    goto LABEL_13;
  }
LABEL_14:
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  return v6;
}

void surrogatePlayer_invalidateInternal()
{
  uint64_t DerivedStorage;
  _QWORD *v1;
  uint64_t FigBaseObject;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  __CFDictionary *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v1 = (_QWORD *)DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    if (*(_QWORD *)(DerivedStorage + 24))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      FigBaseObject = FigPlayerGetFigBaseObject(v1[3]);
      if (FigBaseObject)
      {
        v3 = FigBaseObject;
        v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v4)
          v4(v3);
      }
    }
    if (v1[4])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v5 = FigPlayerGetFigBaseObject(v1[4]);
      if (v5)
      {
        v6 = v5;
        v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v7)
          v7(v6);
      }
    }
    if (v1[5])
      FigCFWeakReferenceTableApplyFunction();
    v8 = (__CFDictionary *)v1[9];
    if (v8)
      CFDictionaryRemoveAllValues(v8);
  }
}

void surrogatePlayer_realPlayerNotificationWeakCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  _QWORD v11[4];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11[0] = a2;
  v11[1] = a4;
  v11[2] = a3;
  v11[3] = a5;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v11, (dispatch_function_t)surrogatePlayer_realPlayerNotificationWeakCallbackInternal);
  v10 = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  dispatch_async_f(*(dispatch_queue_t *)(v10 + 56), a2, (dispatch_function_t)_deferReleaseToSafeQ);
}

void surrogatePlayer_invalidateArrayPlaybackItem(uint64_t a1, const void *a2)
{
  surrogatePlaybackItem_invalidateInternalOnPlayerQ(a2);
}

void surrogatePlayer_realPlayerNotificationWeakCallbackInternal(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;
  const __CFDictionary *v4;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  void (*v9)(uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t v13;
  const void *v14;
  int v15;
  const void *v16;
  __CFDictionary *v17;
  int v18;
  uint64_t v19;
  const __CFArray *v20;
  CFIndex Count;
  CFIndex v22;
  CFIndex v23;
  const void *v24;
  uint64_t v25;
  __CFDictionary *MutableCopy;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  const __CFAllocator *v30;
  __CFDictionary *Mutable;
  uint64_t v32;
  uint64_t v34;
  void *value;
  CFTypeRef cf[5];

  v1 = *(const void **)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 16);
  v4 = *(const __CFDictionary **)(a1 + 24);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v6 = DerivedStorage;
    v7 = *(_QWORD *)(DerivedStorage + 80);
    v8 = !v7 || v7 == v2;
    if (v8 || FigCFEqual())
    {
      if (FigCFEqual())
      {
        cf[0] = 0;
        v9 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v9)
        {
          v9(v2, 0, cf);
          v10 = cf[0];
          if (cf[0])
            goto LABEL_15;
        }
        v11 = CMBaseObjectGetDerivedStorage();
        if (CFArrayGetCount(*(CFArrayRef *)(v11 + 48)) >= 1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v11 + 48), 0);
          v13 = CMBaseObjectGetDerivedStorage();
          if (!*(_BYTE *)(v13 + 146) && !*(_BYTE *)(v13 + 144))
            surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(v1, ValueAtIndex);
        }
        v10 = cf[0];
        if (cf[0])
LABEL_15:
          CFRelease(v10);
        v14 = CFDictionaryGetValue(v4, CFSTR("ReasonForCurrentItemDidChange"));
        if (!*(_BYTE *)(v6 + 96) && !FigCFEqual())
        {
          v32 = CMBaseObjectGetDerivedStorage();
          if (CFArrayGetCount(*(CFArrayRef *)(v32 + 48)) >= 1)
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v32 + 48), 0);
          v34 = CMBaseObjectGetDerivedStorage();
          if (v34 && !*(_BYTE *)(v34 + 154))
            *(_DWORD *)(v32 + 104) = 1;
        }
        v15 = *(_DWORD *)(v6 + 104);
        if (v15 == 2)
        {
          MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v4);
          CFDictionarySetValue(MutableCopy, CFSTR("ReasonForCurrentItemDidChange"), *(const void **)(v6 + 112));
          v27 = *(const void **)(v6 + 112);
          *(_DWORD *)(v6 + 104) = 0;
          if (v27)
          {
            CFRelease(v27);
            *(_QWORD *)(v6 + 112) = 0;
          }
          v18 = 1;
          v17 = MutableCopy;
        }
        else if (v15 == 1)
        {
          v16 = *(const void **)(v6 + 112);
          *(_QWORD *)(v6 + 112) = v14;
          if (v14)
            CFRetain(v14);
          if (v16)
            CFRelease(v16);
          v17 = 0;
          v18 = 0;
          *(_DWORD *)(v6 + 104) = 2;
        }
        else
        {
          v17 = 0;
          v18 = 1;
        }
        if (FigCFEqual())
        {
          v18 = *(unsigned __int8 *)(v6 + 96);
          *(_BYTE *)(v6 + 96) = 0;
        }
        if (!v18)
        {
          if (!v17)
            return;
          goto LABEL_40;
        }
      }
      else
      {
        if (FigCFEqual())
        {
          v19 = CMBaseObjectGetDerivedStorage();
          v20 = *(const __CFArray **)(v19 + 48);
          if (!v20)
            goto LABEL_55;
          Count = CFArrayGetCount(v20);
          if (Count < 1)
            goto LABEL_55;
          v22 = Count;
          v23 = 0;
          while (1)
          {
            v24 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v19 + 48), v23);
            v25 = CMBaseObjectGetDerivedStorage();
            if (!*(_BYTE *)(v25 + 146))
              break;
            if (v22 == ++v23)
              goto LABEL_55;
          }
          if (!v24 || *(_BYTE *)(v25 + 144) != 0)
          {
LABEL_55:
            v17 = 0;
            *(_BYTE *)(v19 + 88) = 1;
            goto LABEL_61;
          }
          surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(v1, v24);
        }
        else if (FigCFEqual())
        {
          CMBaseObjectGetDerivedStorage();
          value = 0;
          if (v3)
          {
            v28 = CFGetTypeID(v3);
            if (v28 == CFDictionaryGetTypeID())
            {
              v29 = CFDictionaryGetValue((CFDictionaryRef)v3, CFSTR("Remote_NewRate"));
              v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 17, (CFMutableDictionaryRef *)&value);
              Mutable = CFDictionaryCreateMutable(v30, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              CFDictionarySetValue(Mutable, CFSTR("Rate"), v29);
              CFDictionarySetValue(Mutable, CFSTR("SetRateOptions"), value);
              cf[0] = v1;
              cf[1] = CFSTR("CurrentRate");
              cf[3] = 0;
              cf[4] = 0;
              cf[2] = Mutable;
              surrogatePlayer_setPropertyInCacheInternal((uint64_t *)cf);
              if (value)
                CFRelease(value);
              if (Mutable)
                CFRelease(Mutable);
            }
          }
        }
        v17 = 0;
      }
LABEL_61:
      surrogatePlayer_deferPostNotification(v1);
      if (!v17)
        return;
LABEL_40:
      CFRelease(v17);
    }
  }
}

uint64_t surrogatePlayer_deferPostNotification(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDeferNotificationToDispatchQueue();
}

void surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(const void *a1, const void *a2)
{
  _QWORD v3[3];

  v3[2] = 1;
  v3[0] = CFRetain(a1);
  v3[1] = CFRetain(a2);
  surrogatePlayer_initiateLoadingOfItemAssetTypeInternal((uint64_t)v3);
}

void surrogatePlayer_initiateLoadingOfItemAssetTypeInternal(uint64_t a1)
{
  const void *v2;
  uint64_t DerivedStorage;
  const void *v4;
  _BYTE *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, char *);
  int v9;
  NSObject *v10;
  NSObject *v11;
  const void *v12;
  int v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, const __CFString *, int *, int *, _QWORD);
  BOOL v16;
  int v17;
  char v18;
  int v19;
  const void *v20;
  const void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)(a1 + 8);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)a1;
  v5 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v18 = 0;
  if (dword_1EE2A3388)
  {
    v17 = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*v5 && !*(_BYTE *)DerivedStorage)
  {
    *(_BYTE *)(DerivedStorage + 144) = *(_BYTE *)(a1 + 16);
    v7 = *(_QWORD *)(DerivedStorage + 40);
    v8 = *(uint64_t (**)(uint64_t, const __CFString *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v8)
    {
      v9 = v8(v7, CFSTR("assetProperty_AssetType"), &v18);
      if (!v9)
      {
        if (!v18)
          goto LABEL_15;
        if (dword_1EE2A3388)
        {
          v17 = 0;
          v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_BYTE *)(DerivedStorage + 144) = 0;
        v19 = 0;
        v17 = 0;
        v14 = *(_QWORD *)(DerivedStorage + 40);
        v15 = *(unsigned int (**)(uint64_t, const __CFString *, int *, int *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 8);
        if (v15)
        {
          if (v15(v14, CFSTR("assetProperty_AssetType"), &v19, &v17, 0))
            v16 = 1;
          else
            v16 = v19 == 3;
          if (!v16)
          {
            v20 = v4;
            v21 = v2;
            surrogatePlayer_respondToLoadingOfItemAssetTypeInternal((uint64_t *)&v20);
            goto LABEL_15;
          }
          v13 = v17;
        }
        else
        {
          v13 = 0;
        }
        v12 = v2;
LABEL_14:
        surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(v12, v13, 0, 0);
        v20 = v4;
        v21 = v2;
        surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal(&v20);
        goto LABEL_15;
      }
    }
    else
    {
      v9 = -12782;
    }
    if (dword_1EE2A3388)
    {
      v17 = 0;
      v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_BYTE *)(DerivedStorage + 144) = 0;
    v12 = v2;
    v13 = v9;
    goto LABEL_14;
  }
LABEL_15:
  _deferReleaseToSafeQ(*(void **)(a1 + 8));
  _deferReleaseToSafeQ(*(void **)a1);
  if (*(_BYTE *)(a1 + 17))
    free((void *)a1);
}

void surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(const void *a1, int a2, const void *a3, void *a4)
{
  const __CFAllocator *v8;
  __CFDictionary *Mutable;
  CFArrayRef v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *values[23];

  values[22] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = a4;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (a2)
    FigCFDictionarySetInt32();
  if (a3)
    CFDictionarySetValue(Mutable, CFSTR("CFError"), a3);
  if (a4)
  {
    v10 = CFArrayCreate(v8, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    CFDictionarySetValue(Mutable, CFSTR("Properties"), v10);
    if (v10)
      CFRelease(v10);
  }
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  surrogatePlaybackItem_deferPostNotification(a1);
  if (Mutable)
    CFRelease(Mutable);
}

void _deferReleaseToSafeQ(void *context)
{
  if (context)
  {
    if (_deferReleaseToSafeQ_deferredReleaseQOnce != -1)
      dispatch_once_f(&_deferReleaseToSafeQ_deferredReleaseQOnce, &_deferReleaseToSafeQ_deferredReleaseQ, (dispatch_function_t)_initDeferredReleaseQ);
    dispatch_async_f((dispatch_queue_t)_deferReleaseToSafeQ_deferredReleaseQ, context, (dispatch_function_t)_releaseCFType);
  }
}

_BYTE *surrogatePlaybackItem_deferPostNotification(const void *a1)
{
  _BYTE *result;

  result = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CFRetain(a1);
    CMNotificationCenterGetDefaultLocalCenter();
    return (_BYTE *)FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void surrogatePlaybackItem_postDeferredNotification(uint64_t a1, void *a2)
{
  void *v3;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v3 = 0;
  }
  else
  {
    v3 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  _deferReleaseToSafeQ(a2);
  _deferReleaseToSafeQ(v3);
}

uint64_t surrogatePlaybackItem_copyOwningPlayer()
{
  uint64_t DerivedStorage;
  uint64_t v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_QWORD *)(DerivedStorage + 80))
    v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  else
    v1 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  return v1;
}

void surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal(const void **a1)
{
  uint64_t DerivedStorage;
  _BYTE *v3;
  _BYTE *v4;
  CFIndex IndexOfItem;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *ItemAfterItem;
  BOOL v8;
  const void *v9;
  const __CFDictionary *v10;
  const __CFNumber *Value;
  __CFDictionary *RateDict;
  const void *v13;
  CFMutableDictionaryRef Mutable;
  _BYTE *v15;
  float valuePtr;
  __int128 v17;
  __CFDictionary *v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
  {
    v4 = v3;
    if (!*v3)
    {
      IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, a1[1]);
      if (dword_1EE2A3388)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v4[157] = 1;
      if (IndexOfItem != -1)
      {
        ItemAfterItem = surrogatePlayer_getItemAfterItem(DerivedStorage, a1[1]);
        CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 72), CFSTR("ActionAtEnd"));
        if (!*(_BYTE *)(DerivedStorage + 89)
          && (FigCFEqual() ? (v8 = ItemAfterItem == 0) : (v8 = 1), v8))
        {
          if (!v4[155] && !IndexOfItem)
          {
            v4[155] = 1;
            surrogatePlaybackItem_deferPostNotification(a1[1]);
            surrogatePlayer_deferPostCurrentItemDidChangeNotification(*a1, CFSTR("ReasonAddToPlayQueue"));
            if (FigCFEqual() || FigCFEqual())
            {
              v9 = *a1;
              CMBaseObjectGetDerivedStorage();
              valuePtr = 0.0;
              *(_QWORD *)&v17 = v9;
              *((_QWORD *)&v17 + 1) = CFSTR("CurrentRate");
              v19 = 0;
              v20 = 0;
              v18 = 0;
              surrogatePlayer_copyPropertyFromCacheInternal((uint64_t *)&v17);
              v10 = v18;
              if (v19)
                CFRelease(v19);
              if (v10)
              {
                Value = (const __CFNumber *)CFDictionaryGetValue(v10, CFSTR("Rate"));
                if (Value)
                  CFNumberGetValue(Value, kCFNumberFloat32Type, &valuePtr);
                CFRelease(v10);
                if (valuePtr != 0.0)
                {
                  RateDict = surrogatePlayer_makeRateDict(0, 0.0);
                  *(_QWORD *)&v17 = *a1;
                  *((_QWORD *)&v17 + 1) = CFSTR("CurrentRate");
                  v19 = 0;
                  v20 = 0;
                  v18 = RateDict;
                  surrogatePlayer_setPropertyInCacheInternal((uint64_t *)&v17);
                  if (RateDict)
                    CFRelease(RateDict);
                  v13 = *a1;
                  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  FigCFDictionarySetFloat32();
                  FigCFDictionarySetInt32();
                  surrogatePlayer_deferPostNotification(v13);
                  if (Mutable)
                    CFRelease(Mutable);
                }
              }
            }
          }
        }
        else
        {
          v19 = CFSTR("ReasonAdvanceDueToError");
          v20 = 0;
          v17 = *(_OWORD *)a1;
          v18 = 0;
          surrogatePlayer_carefullyRemoveItemInternal(&v17);
          if (!ItemAfterItem)
            goto LABEL_29;
          v15 = (_BYTE *)CMBaseObjectGetDerivedStorage();
          if (*v15)
            return;
          if (!v15[144])
            surrogatePlayer_initiateLoadingOfItemAssetTypeOnQ(*a1, ItemAfterItem);
          else
LABEL_29:
            *(_BYTE *)(DerivedStorage + 88) = 1;
        }
      }
    }
  }
}

CFIndex surrogatePlayer_getIndexOfItem(uint64_t a1, const void *a2)
{
  uint64_t Count;
  CFRange v6;

  if (!a2)
    return -1;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 48));
  if (Count < 1)
    return -1;
  v6.length = Count;
  v6.location = 0;
  return CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 48), v6, a2);
}

const void *surrogatePlayer_getItemAfterItem(uint64_t a1, const void *a2)
{
  uint64_t Count;
  CFIndex v5;
  CFIndex FirstIndexOfValue;
  CFIndex v7;
  BOOL v8;
  CFRange v10;

  if (a2
    && (Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 48)), Count >= 1)
    && ((v5 = Count,
         v10.location = 0,
         v10.length = Count,
         FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(a1 + 48), v10, a2),
         v7 = FirstIndexOfValue + 1,
         FirstIndexOfValue != -1)
      ? (v8 = v7 < v5)
      : (v8 = 0),
        v8))
  {
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), v7);
  }
  else
  {
    return 0;
  }
}

void surrogatePlayer_deferPostCurrentItemDidChangeNotification(const void *a1, const void *a2)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("ReasonForCurrentItemDidChange"), a2);
  surrogatePlayer_deferPostNotification(a1);
  if (Mutable)
    CFRelease(Mutable);
}

__CFDictionary *surrogatePlayer_makeRateDict(const void *a1, float a2)
{
  const __CFAllocator *v3;
  __CFDictionary *Mutable;
  CFNumberRef v5;
  CFNumberRef v6;
  float valuePtr;

  valuePtr = a2;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = CFNumberCreate(v3, kCFNumberFloat32Type, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionarySetValue(Mutable, CFSTR("Rate"), v5);
    if (a1)
      CFDictionarySetValue(Mutable, CFSTR("SetRateOptions"), a1);
    CFRelease(v6);
  }
  return Mutable;
}

CFDictionaryRef *surrogatePlayer_copyPropertyFromCacheInternal(uint64_t *a1)
{
  CFDictionaryRef *result;
  CFDictionaryRef *v3;
  uint64_t v4;
  CFTypeRef v5;
  int v6;
  uint64_t v7;
  CFTypeRef cf;
  uint64_t v9;

  result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)result)
  {
    v6 = -12785;
    goto LABEL_9;
  }
  v3 = result;
  v4 = *a1;
  cf = 0;
  v9 = 0;
  v7 = v4;
  surrogatePlayer_currentRealPlayerInternal((uint64_t)&v7);
  v5 = cf;
  if (!cf)
  {
    result = (CFDictionaryRef *)CFDictionaryGetValue(v3[9], (const void *)a1[1]);
    if (result)
    {
      if (result != (CFDictionaryRef *)*MEMORY[0x1E0C9B0D0])
      {
        result = (CFDictionaryRef *)CFRetain(result);
        v6 = 0;
        a1[2] = (uint64_t)result;
        a1[3] = 0;
        goto LABEL_10;
      }
      v6 = 0;
    }
    else
    {
      v6 = -12784;
    }
LABEL_9:
    a1[2] = 0;
    a1[3] = 0;
    goto LABEL_10;
  }
  a1[2] = 0;
  a1[3] = (uint64_t)v5;
  result = (CFDictionaryRef *)CFRetain(v5);
  v6 = 0;
LABEL_10:
  *((_DWORD *)a1 + 8) = v6;
  return result;
}

_QWORD *surrogatePlayer_currentRealPlayerInternal(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = result[10];
  v4 = result[3];
  if (!v3)
  {
    if (v4)
    {
      *(_QWORD *)(a1 + 8) = v4;
LABEL_6:
      v4 = result[4];
      goto LABEL_7;
    }
    v3 = result[4];
  }
  *(_QWORD *)(a1 + 8) = v3;
  if (v3 == v4)
    goto LABEL_6;
LABEL_7:
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

void surrogatePlayer_setPropertyInCacheInternal(uint64_t *a1)
{
  CFMutableDictionaryRef *DerivedStorage;
  CFMutableDictionaryRef *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;

  DerivedStorage = (CFMutableDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    v7 = 0uLL;
  }
  else
  {
    v3 = DerivedStorage;
    v4 = (const void *)a1[2];
    if (FigCFEqual())
      *((_BYTE *)v3 + 89) = FigCFEqual();
    v5 = *a1;
    v10 = 0uLL;
    v9 = v5;
    surrogatePlayer_currentRealPlayerInternal((uint64_t)&v9);
    v8 = v10;
    if (v4)
      v6 = v4;
    else
      v6 = (const void *)*MEMORY[0x1E0C9B0D0];
    CFDictionarySetValue(v3[9], (const void *)a1[1], v6);
    v7 = v8;
  }
  *(_OWORD *)(a1 + 3) = v7;
}

void surrogatePlayer_carefullyRemoveItemInternal(__int128 *a1)
{
  uint64_t DerivedStorage;
  char v3;
  const void *v4;
  unsigned __int8 v5;
  const void *v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  const void *ItemAfterItem;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (surrogatePlayer_getIndexOfItem(DerivedStorage, *((const void **)a1 + 1)))
  {
    v3 = *((_BYTE *)a1 + 16);
    v14 = 0;
    v13 = *a1;
    LOBYTE(v14) = v3;
    surrogatePlayer_removeItemFromPlayQueueInternal(&v13);
    *((_BYTE *)a1 + 32) = BYTE1(v14);
    *((_DWORD *)a1 + 9) = HIDWORD(v14);
    return;
  }
  v4 = (const void *)*((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a1 + 16);
  v6 = (const void *)*((_QWORD *)a1 + 3);
  v7 = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(v7 + 144) = 0;
  v8 = *(_BYTE *)(v7 + 146);
  v9 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (v9)
  {
    v10 = CMBaseObjectGetDerivedStorage();
    if (CFArrayGetCount(*(CFArrayRef *)(v10 + 48)) >= 1)
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 48), 0);
      if (FigCFEqual())
      {
        ItemAfterItem = surrogatePlayer_getItemAfterItem(v10, v4);
        if (*(_BYTE *)(v7 + 146))
        {
          *((_QWORD *)&v13 + 1) = v4;
          *(_QWORD *)&v13 = v9;
          v14 = v5;
          surrogatePlayer_removeItemFromPlayQueueInternal(&v13);
          if (!ItemAfterItem)
            goto LABEL_14;
LABEL_10:
          if (*(_BYTE *)(v10 + 89))
          {
            v12 = CMBaseObjectGetDerivedStorage();
            if (*(_BYTE *)(v12 + 146))
            {
              if (*(_QWORD *)(v12 + 56) != *(_QWORD *)(v10 + 80))
                surrogatePlaybackItem_deferPostNotification(ItemAfterItem);
            }
          }
          goto LABEL_14;
        }
        surrogatePlaybackItem_deferPostNotification(v4);
        *((_QWORD *)&v13 + 1) = v4;
        *(_QWORD *)&v13 = v9;
        v14 = v5;
        surrogatePlayer_removeItemFromPlayQueueInternal(&v13);
        surrogatePlaybackItem_deferPostNotification(v4);
        surrogatePlayer_deferPostCurrentItemDidChangeNotification(v9, v6);
        if (ItemAfterItem)
          goto LABEL_10;
      }
    }
  }
LABEL_14:
  _deferReleaseToSafeQ(v9);
  *((_BYTE *)a1 + 32) = v8;
}

uint64_t surrogatePlayer_removeItemFromPlayQueueInternal(_QWORD *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *Copy;
  CFIndex IndexOfItem;
  const __CFArray *v6;
  const __CFArray *v7;
  uint64_t result;
  CFRange v9;
  CFRange v10;
  CFRange v11;
  CFRange v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1[1])
  {
    if (!*(_BYTE *)DerivedStorage)
      goto LABEL_8;
LABEL_12:
    LOBYTE(Copy) = 0;
    result = 4294954511;
    goto LABEL_11;
  }
  v3 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    goto LABEL_12;
  if (!v3)
  {
LABEL_8:
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(DerivedStorage + 48));
    if (!Copy)
    {
      result = FigSignalErrorAt();
      goto LABEL_11;
    }
    v6 = *(const __CFArray **)(DerivedStorage + 48);
    v9.length = CFArrayGetCount(v6);
    v9.location = 0;
    CFArrayApplyFunction(v6, v9, (CFArrayApplierFunction)surrogatePlayer_resetIsEnqueuedWithRealPlayerForArrayPlaybackItem, 0);
    v7 = *(const __CFArray **)(DerivedStorage + 48);
    v10.length = CFArrayGetCount(v7);
    v10.location = 0;
    CFArrayApplyFunction(v7, v10, (CFArrayApplierFunction)surrogatePlayer_resetIsWaitingForVideoTargetForArrayPlaybackItem, 0);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 48));
    v11.length = CFArrayGetCount(Copy);
    v11.location = 0;
    CFArrayApplyFunction(Copy, v11, (CFArrayApplierFunction)surrogatePlayer_deferCancelPendingPrerollForArrayPlaybackItem, a1);
    v12.length = CFArrayGetCount(Copy);
    v12.location = 0;
    CFArrayApplyFunction(Copy, v12, (CFArrayApplierFunction)surrogatePlayer_deferItemWasRemovedFromPlayQueueNotificationForArrayPlaybackItem, a1);
    CFRelease(Copy);
    LOBYTE(Copy) = 0;
    goto LABEL_10;
  }
  LODWORD(Copy) = *(unsigned __int8 *)(v3 + 146);
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 146) = 0;
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 145) = 0;
  IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, (const void *)a1[1]);
  if (IndexOfItem != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 48), IndexOfItem);
    surrogatePlayer_deferCancelPendingPrerollForArrayPlaybackItem((const void *)a1[1]);
    if (!(_DWORD)Copy)
    {
      surrogatePlayer_deferItemWasRemovedFromPlayQueueNotificationForArrayPlaybackItem((const void *)a1[1], (uint64_t)a1);
      surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(*a1);
    }
  }
LABEL_10:
  result = 0;
LABEL_11:
  *((_BYTE *)a1 + 17) = (_BYTE)Copy;
  *((_DWORD *)a1 + 5) = result;
  return result;
}

uint64_t surrogatePlayer_resetIsEnqueuedWithRealPlayerForArrayPlaybackItem()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 146) = 0;
  return result;
}

uint64_t surrogatePlayer_resetIsWaitingForVideoTargetForArrayPlaybackItem()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 145) = 0;
  return result;
}

void surrogatePlayer_deferCancelPendingPrerollForArrayPlaybackItem(const void *a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  _WORD *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = malloc_type_malloc(0x10uLL, 0x1020040FFEA222EuLL);
  if (v3)
  {
    v4 = v3;
    *v3 = CFRetain(a1);
    v4[4] = 257;
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 128), v4, (dispatch_function_t)surrogatePlayerItem_cancelPendingPrerollInternal);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void surrogatePlayer_deferItemWasRemovedFromPlayQueueNotificationForArrayPlaybackItem(const void *a1, uint64_t a2)
{
  void **v3;
  CFDictionaryRef v4;
  void *values;

  if (*(_BYTE *)(a2 + 16))
    v3 = (void **)MEMORY[0x1E0C9AE50];
  else
    v3 = (void **)MEMORY[0x1E0C9AE40];
  values = *v3;
  v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)kFigPlaybackItemParameter_AsRequested, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  surrogatePlaybackItem_deferPostNotification(a1);
  if (v4)
    CFRelease(v4);
}

uint64_t surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v4[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4[0] = a1;
  v4[1] = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 72), CFSTR("ActionAtEnd"));
  return surrogatePlayer_setActionAtEndInternal(v4);
}

void surrogatePlayerItem_cancelPendingPrerollInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void *v4;
  CFMutableDictionaryRef Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage
    || (v3 = DerivedStorage, !CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), CFSTR("StartPreroll"))))
  {
    v4 = 0;
  }
  else
  {
    FigCFDictionaryGetInt32IfPresent();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 104), CFSTR("StartPreroll"));
    v4 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (v4)
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigCFDictionarySetInt32();
      surrogatePlayer_deferPostNotification(v4);
      if (Mutable)
        CFRelease(Mutable);
    }
  }
  _deferReleaseToSafeQ(v4);
  if (*(_BYTE *)(a1 + 9))
    _deferReleaseToSafeQ(*(void **)a1);
  if (*(_BYTE *)(a1 + 8))
    free((void *)a1);
}

uint64_t surrogatePlayer_setActionAtEndInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const __CFString *v4;
  uint64_t v5;
  uint64_t result;
  CFTypeRef v7;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFTypeRef v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFString *, const __CFString *);
  const void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v20;
  CFTypeRef cf;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  uint64_t v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)*a1;
  v4 = (const __CFString *)a1[1];
  v22 = 0;
  v23 = 0;
  cf = v3;
  surrogatePlayer_currentRealPlayerInternal((uint64_t)&cf);
  v5 = v22;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 72), CFSTR("ActionAtEnd"), v4);
  result = FigCFEqual();
  *(_BYTE *)(DerivedStorage + 89) = result;
  if (v5)
  {
    if (FigCFEqual())
    {
      v7 = 0;
      for (i = 0; ; ++i)
      {
        Count = *(const __CFArray **)(DerivedStorage + 48);
        if (Count)
          Count = (const __CFArray *)CFArrayGetCount(Count);
        if (i >= (uint64_t)Count)
          break;
        cf = 0;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), i);
        surrogatePlaybackItem_copyAssetType((uint64_t)ValueAtIndex, &cf);
        v11 = cf;
        if (!cf)
          break;
        if (v7)
        {
          if (!FigCFEqual())
          {
            *(_BYTE *)(DerivedStorage + 89) = 1;
            v4 = CFSTR("Advance");
            break;
          }
        }
        else
        {
          v7 = CFRetain(cf);
        }
        CFRelease(v11);
      }
      if (v7)
        CFRelease(v7);
      goto LABEL_26;
    }
    if (!FigCFEqual())
      goto LABEL_26;
    v20 = 0;
    FigBaseObject = FigPlayerGetFigBaseObject(v5);
    result = CMBaseObjectGetVTable();
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(result + 8) + 48);
    if (!v13)
      return result;
    result = v13(FigBaseObject, CFSTR("ActionAtEnd"), *MEMORY[0x1E0C9AE00], &v20);
    if ((_DWORD)result)
      return result;
    if (!FigCFEqual() && !FigCFEqual())
    {
LABEL_26:
      v18 = FigPlayerGetFigBaseObject(v5);
      result = CMBaseObjectGetVTable();
      v19 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(result + 8) + 56);
      if (v19)
        return v19(v18, CFSTR("ActionAtEnd"), v4);
      return result;
    }
    result = FigCFArrayGetValueAtIndex();
    if (result)
    {
      v14 = result;
      result = surrogatePlayer_isRealItemCurrentInRealPlayer(*a1, v5, result);
      if ((_DWORD)result)
      {
        v15 = FigPlayerGetFigBaseObject(v5);
        result = CMBaseObjectGetVTable();
        v16 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(result + 8) + 56);
        if (v16)
        {
          result = v16(v15, CFSTR("ActionAtEnd"), v4);
          if (!(_DWORD)result)
          {
            result = surrogatePlayer_isRealItemCurrentInRealPlayer(*a1, v5, v14);
            if (!(_DWORD)result)
            {
              v17 = (const void *)*a1;
              v24 = CFSTR("ReasonAdvanceAtEnd");
              v25 = 0;
              cf = v17;
              v22 = v14;
              v23 = 0;
              return surrogatePlayer_carefullyRemoveItemInternal(&cf);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t surrogatePlaybackItem_copyAssetType(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t context;
  uint64_t v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = 0;
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), &context, (dispatch_function_t)surrogatePlaybackItem_copyAssetTypeInternal);
  result = v8;
  if (!(_DWORD)v8)
    *a2 = v7;
  return result;
}

uint64_t surrogatePlayer_isRealItemCurrentInRealPlayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  uint64_t (*v6)(uint64_t, _QWORD, CFTypeRef *);
  int v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef cf;

  v3 = 0;
  cf = 0;
  if (a1 && a2)
  {
    v6 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v6)
      return 0;
    v7 = v6(a2, 0, &cf);
    v8 = cf;
    if (v7)
      goto LABEL_15;
    if (!(a3 | (unint64_t)cf))
      return 1;
    if (!a3)
    {
LABEL_15:
      v3 = 0;
      if (!cf)
        return v3;
      goto LABEL_13;
    }
    v9 = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 48);
    v8 = cf;
    if (v9)
      v3 = cf == v9;
    else
      v3 = 0;
    if (cf)
LABEL_13:
      CFRelease(v8);
  }
  return v3;
}

uint64_t surrogatePlaybackItem_copyAssetTypeInternal(uint64_t a1)
{
  uint64_t result;
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, uint64_t);

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  if (result)
  {
    CMBaseObject = FigAssetGetCMBaseObject(result);
    v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
    if (v4)
      result = v4(CMBaseObject, CFSTR("assetProperty_AssetType"), *MEMORY[0x1E0C9AE00], a1 + 8);
    else
      result = 4294954514;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void surrogatePlayer_respondToLoadingOfItemAssetTypeInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  uint64_t v6;
  int RealItem;
  int v8;
  const void *v9;
  const void *v10;
  CFIndex IndexOfItem;
  NSObject *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const void *ValueAtIndex;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char v28;
  const void *v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  const void *v39;
  const char *v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  int v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const void *v59;
  const __CFAllocator *v60;
  const void *SInt32;
  CFTypeRef v62;
  void (*v63)(const void *, CFTypeRef, float);
  uint64_t FigBaseObject;
  void (*v65)(uint64_t, const __CFString *, _QWORD);
  uint64_t v66;
  void (*v67)(uint64_t, const __CFString *, _QWORD);
  uint64_t v68;
  void (*v69)(uint64_t, const __CFString *, const void *);
  uint64_t v70;
  void (*v71)(uint64_t, const __CFString *, _QWORD);
  uint64_t v72;
  const char *v73;
  const char *v74;
  NSObject *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  const void *v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t (*v83)(const void *, const void *, _QWORD);
  int v84;
  uint64_t v85;
  uint64_t v86;
  const __CFDictionary *Value;
  const __CFDictionary *v88;
  const __CFNumber *v89;
  uint64_t (*v90)(const void *, float *);
  int v91;
  NSObject *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  const __CFDictionary *v96;
  const __CFDictionary *v97;
  uint64_t v98;
  __CFDictionary *v99;
  float v100;
  uint64_t v101;
  void (*v102)(const void *, __int128 *, _BYTE *, uint64_t, float);
  __CFDictionary *v103;
  CFMutableDictionaryRef MutableCopy;
  float v105;
  void (*v106)(const void *, CFMutableDictionaryRef, float);
  NSObject *v107;
  unsigned int v108;
  unsigned int v109;
  const char *v110;
  const void *v111;
  const char *v112;
  uint64_t v113;
  const void *v114;
  const void *v115;
  __int128 v116;
  CFTypeRef cf;
  float v118;
  uint64_t valuePtr;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unsigned int v124;
  os_log_type_t type[16];
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  float v129;
  _BYTE v130[24];
  const char *v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  const char *v135;
  __int16 v136;
  _BYTE v137[28];
  __int16 v138;
  const char *v139;
  __int16 v140;
  const char *v141;
  __int16 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v113 = v3;
  if (dword_1EE2A3388)
  {
    LODWORD(v127) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 136));
  if (*(_BYTE *)DerivedStorage || *(_BYTE *)v3)
  {
    v9 = 0;
    v10 = 0;
    v8 = -12785;
    goto LABEL_148;
  }
  *(_BYTE *)(v3 + 144) = 0;
  v5 = *a1;
  v6 = a1[1];
  *(_QWORD *)v130 = 0;
  *(_QWORD *)&v127 = 0;
  *(_QWORD *)type = 0;
  RealItem = surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItem(v6, (CFTypeRef *)type, (CFTypeRef *)v130, (CFTypeRef *)&v127);
  if (RealItem)
    goto LABEL_11;
  if (*(_QWORD *)v130 && (_QWORD)v127)
  {
    v8 = 0;
    goto LABEL_12;
  }
  *(_QWORD *)&v144 = v5;
  *((_QWORD *)&v144 + 1) = *(_QWORD *)type;
  v145 = 0;
  v146 = 0;
  surrogatePlayer_createRealPlayerInternal((uint64_t)&v144);
  v8 = v146;
  if (!(_DWORD)v146)
  {
    *(_QWORD *)v130 = v145;
    RealItem = surrogatePlaybackItem_createRealItem(v6, v145, (CFTypeRef *)&v127);
LABEL_11:
    v8 = RealItem;
  }
LABEL_12:
  v9 = *(const void **)v130;
  *(_QWORD *)v130 = 0;
  v10 = (const void *)v127;
  *(_QWORD *)&v127 = 0;
  if (*(_QWORD *)type)
    CFRelease(*(CFTypeRef *)type);
  if (v8)
    goto LABEL_148;
  IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, (const void *)a1[1]);
  if (dword_1EE2A3388)
  {
    LODWORD(v127) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v13 = v127;
    if (os_log_type_enabled(v12, type[0]))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if (v14)
    {
      v15 = *a1;
      if (*a1)
        v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      else
        v16 = "";
      v17 = a1[1];
      if (v17)
        v18 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      else
        v18 = "";
      *(_DWORD *)v130 = 136316930;
      *(_QWORD *)&v130[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      *(_WORD *)&v130[12] = 2048;
      *(_QWORD *)&v130[14] = v15;
      *(_WORD *)&v130[22] = 2082;
      v131 = v16;
      v132 = 2048;
      v133 = v17;
      v134 = 2082;
      v135 = v18;
      v136 = 1024;
      *(_DWORD *)v137 = IndexOfItem;
      *(_WORD *)&v137[4] = 2048;
      *(_QWORD *)&v137[6] = v9;
      *(_WORD *)&v137[14] = 2048;
      *(_QWORD *)&v137[16] = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v3 = v113;
  }
  if (IndexOfItem == -1)
  {
    v28 = 1;
    goto LABEL_123;
  }
  v19 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v19 + 90) && !*(_DWORD *)(v19 + 92))
  {
    *(_BYTE *)(v3 + 145) = 1;
    if (!dword_1EE2A3388)
      goto LABEL_147;
    LODWORD(v127) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v36 = v127;
    if (os_log_type_enabled(v35, type[0]))
      v37 = v36;
    else
      v37 = v36 & 0xFFFFFFFE;
    if (v37)
    {
      v114 = v9;
      v38 = *a1;
      v39 = v10;
      if (*a1)
        v40 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
      else
        v40 = "";
      v54 = a1[1];
      if (v54)
        v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
      else
        v55 = "";
      *(_DWORD *)v130 = 136316162;
      *(_QWORD *)&v130[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      *(_WORD *)&v130[12] = 2048;
      *(_QWORD *)&v130[14] = v38;
      *(_WORD *)&v130[22] = 2082;
      v131 = v40;
      v132 = 2048;
      v133 = v54;
      v134 = 2082;
      v135 = v55;
      _os_log_send_and_compose_impl();
      v10 = v39;
      v9 = v114;
    }
LABEL_87:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_147;
  }
  if (!IndexOfItem)
  {
    if (*(const void **)(DerivedStorage + 80) == v9)
    {
LABEL_122:
      v28 = 0;
      goto LABEL_123;
    }
    v29 = v10;
    if (dword_1EE2A3388)
    {
      LODWORD(v127) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v31 = v127;
      if (os_log_type_enabled(v30, type[0]))
        v32 = v31;
      else
        v32 = v31 & 0xFFFFFFFE;
      if (v32)
      {
        v33 = *a1;
        if (*a1)
          v34 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
        else
          v34 = "";
        v56 = a1[1];
        if (v56)
          v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
        else
          v57 = "";
        v58 = *(_QWORD *)(DerivedStorage + 80);
        *(_DWORD *)v130 = 136316674;
        *(_QWORD *)&v130[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
        *(_WORD *)&v130[12] = 2048;
        *(_QWORD *)&v130[14] = v33;
        *(_WORD *)&v130[22] = 2082;
        v131 = v34;
        v132 = 2048;
        v133 = v56;
        v134 = 2082;
        v135 = v57;
        v136 = 2048;
        *(_QWORD *)v137 = v58;
        *(_WORD *)&v137[8] = 2048;
        *(_QWORD *)&v137[10] = v9;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v59 = *(const void **)(DerivedStorage + 24);
    if (v9 == v59)
      v59 = *(const void **)(DerivedStorage + 32);
    if (v59)
    {
      v60 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      SInt32 = (const void *)FigCFNumberCreateSInt32();
      FPSupport_CreateSetRateOptions(v60, 16, (CFMutableDictionaryRef *)&cf);
      v62 = cf;
      v63 = *(void (**)(const void *, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v63)
        v63(v59, v62, 0.0);
      FigBaseObject = FigPlayerGetFigBaseObject(v59);
      v65 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v65)
        v65(FigBaseObject, CFSTR("VideoLayerArray"), 0);
      v66 = FigPlayerGetFigBaseObject(v59);
      v67 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v67)
        v67(v66, CFSTR("VideoTargetArray"), 0);
      v68 = FigPlayerGetFigBaseObject(v59);
      v69 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
      if (v69)
        v69(v68, CFSTR("RequiresNumVideoSlots"), SInt32);
      v70 = FigPlayerGetFigBaseObject(v59);
      v71 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v71)
        v71(v70, CFSTR("ClosedCaptionLayerArray"), 0);
      if (SInt32)
        CFRelease(SInt32);
    }
    v10 = v29;
    *(_QWORD *)(DerivedStorage + 80) = v9;
    *(_BYTE *)(DerivedStorage + 88) = 0;
    surrogatePlayer_setRealPlayerPropertyFromCache(DerivedStorage, (uint64_t)v9, CFSTR("VideoLayerArray"));
    surrogatePlayer_setRealPlayerPropertyFromCache(DerivedStorage, (uint64_t)v9, CFSTR("VideoTargetArray"));
    surrogatePlayer_setRealPlayerPropertyFromCache(DerivedStorage, (uint64_t)v9, CFSTR("ClosedCaptionLayerArray"));
    surrogatePlayer_setRealPlayerPropertyFromCache(DerivedStorage, (uint64_t)v9, CFSTR("RequiresNumVideoSlots"));
LABEL_111:
    v28 = 0;
    goto LABEL_112;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), IndexOfItem - 1);
  v21 = CMBaseObjectGetDerivedStorage();
  v22 = v21;
  if (*(_BYTE *)(v21 + 146) && *(const void **)(v21 + 56) == v9)
  {
    if (dword_1EE2A3388)
    {
      LODWORD(v127) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v42 = v127;
      if (os_log_type_enabled(v41, type[0]))
        v43 = v42;
      else
        v43 = v42 & 0xFFFFFFFE;
      if (v43)
      {
        v44 = *a1;
        if (*a1)
          v45 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
        else
          v45 = "";
        v112 = v45;
        v72 = a1[1];
        if (v72)
          v73 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
        else
          v73 = "";
        if (ValueAtIndex)
          v74 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
        else
          v74 = "";
        *(_DWORD *)v130 = 136316674;
        *(_QWORD *)&v130[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
        *(_WORD *)&v130[12] = 2048;
        *(_QWORD *)&v130[14] = v44;
        *(_WORD *)&v130[22] = 2082;
        v131 = v112;
        v132 = 2048;
        v133 = v72;
        v134 = 2082;
        v135 = v73;
        v136 = 2048;
        *(_QWORD *)v137 = ValueAtIndex;
        *(_WORD *)&v137[8] = 2082;
        *(_QWORD *)&v137[10] = v74;
        _os_log_send_and_compose_impl();
      }
      v3 = v113;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_122;
    }
    goto LABEL_111;
  }
  if (!dword_1EE2A3388)
  {
    v28 = 1;
LABEL_112:
    v3 = v113;
    goto LABEL_123;
  }
  LODWORD(v127) = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v24 = v127;
  if (os_log_type_enabled(v23, type[0]))
    v25 = v24;
  else
    v25 = v24 & 0xFFFFFFFE;
  if (v25)
  {
    v26 = *a1;
    if (*a1)
      v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
    else
      v27 = "";
    v110 = v27;
    v46 = a1[1];
    v111 = v10;
    if (v46)
      v47 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
    else
      v47 = "";
    v48 = *(_QWORD *)(v22 + 56);
    if (ValueAtIndex)
      v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
    else
      v49 = "";
    v50 = *(unsigned __int8 *)(v22 + 146);
    v51 = "does NOT match";
    v52 = *(_QWORD *)(DerivedStorage + 80);
    if (*(const void **)(v22 + 56) == v9)
      v51 = "MATCHES";
    *(_DWORD *)v130 = 136317698;
    *(_QWORD *)&v130[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
    v53 = "previous item IS enqueued with real player";
    *(_WORD *)&v130[12] = 2048;
    *(_QWORD *)&v130[14] = v26;
    if (!v50)
      v53 = "previous item is NOT enqueued with real player";
    *(_WORD *)&v130[22] = 2082;
    v131 = v110;
    v132 = 2048;
    v133 = v46;
    v134 = 2082;
    v135 = v47;
    v136 = 2048;
    *(_QWORD *)v137 = v48;
    *(_WORD *)&v137[8] = 2048;
    *(_QWORD *)&v137[10] = ValueAtIndex;
    *(_WORD *)&v137[18] = 2082;
    *(_QWORD *)&v137[20] = v49;
    v138 = 2082;
    v139 = v51;
    v140 = 2082;
    v141 = v53;
    v142 = 2048;
    v143 = v52;
    _os_log_send_and_compose_impl();
    v3 = v113;
    v10 = v111;
  }
  else
  {
    v3 = v113;
  }
  v28 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_123:
  if (*(_BYTE *)(v3 + 146))
  {
    if (!dword_1EE2A3388)
      goto LABEL_147;
    LODWORD(v127) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v107 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v108 = v127;
    if (os_log_type_enabled(v107, type[0]))
      v109 = v108;
    else
      v109 = v108 & 0xFFFFFFFE;
    if (v109)
    {
      *(_DWORD *)v130 = 136315138;
      *(_QWORD *)&v130[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
      _os_log_send_and_compose_impl();
    }
    goto LABEL_87;
  }
  if ((v28 & 1) == 0)
  {
    *(_BYTE *)(DerivedStorage + 88) = 0;
    if (dword_1EE2A3388)
    {
      LODWORD(v127) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v76 = v127;
      if (os_log_type_enabled(v75, type[0]))
        v77 = v76;
      else
        v77 = v76 & 0xFFFFFFFE;
      if (v77)
      {
        v115 = v9;
        v78 = *a1;
        v79 = v10;
        if (*a1)
          v80 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
        else
          v80 = "";
        v81 = a1[1];
        if (v81)
          v82 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
        else
          v82 = "";
        *(_DWORD *)v130 = 136316418;
        *(_QWORD *)&v130[4] = "surrogatePlayer_respondToLoadingOfItemAssetTypeInternal";
        *(_WORD *)&v130[12] = 2048;
        *(_QWORD *)&v130[14] = v78;
        *(_WORD *)&v130[22] = 2082;
        v131 = v80;
        v132 = 2048;
        v133 = v81;
        v134 = 2048;
        v10 = v79;
        v135 = (const char *)v79;
        v136 = 2082;
        *(_QWORD *)v137 = v82;
        _os_log_send_and_compose_impl();
        v9 = v115;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v83 = *(uint64_t (**)(const void *, const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v83)
    {
      v8 = -12782;
      goto LABEL_148;
    }
    v84 = v83(v9, v10, 0);
    if (v84)
      goto LABEL_196;
    *(_BYTE *)(v3 + 146) = 1;
  }
  surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(*a1);
  v85 = *a1;
  v86 = CMBaseObjectGetDerivedStorage();
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v86 + 72), CFSTR("CurrentRate"));
  if (!Value)
    goto LABEL_147;
  v88 = Value;
  valuePtr = 0;
  v89 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("Rate"));
  if (!v89)
  {
    v84 = FigSignalErrorAt();
LABEL_196:
    v8 = v84;
    goto LABEL_148;
  }
  CFNumberGetValue(v89, kCFNumberFloat32Type, (char *)&valuePtr + 4);
  v118 = 0.0;
  v90 = *(uint64_t (**)(const void *, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v90)
  {
    v91 = v90(v9, &v118);
    if (!v91)
    {
      if (v118 != *((float *)&valuePtr + 1))
      {
        if (!CFDictionaryGetValue(v88, CFSTR("AnchorTime")))
        {
          v103 = (__CFDictionary *)CFDictionaryGetValue(v88, CFSTR("SetRateOptions"));
          if (v103)
          {
            MutableCopy = v103;
            if (FigCFDictionaryGetInt32IfPresent() && (_DWORD)valuePtr == 17)
            {
              CFRetain(MutableCopy);
            }
            else
            {
              MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MutableCopy);
              FigCFDictionarySetInt32();
            }
          }
          else
          {
            *(_QWORD *)&v144 = 0;
            FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 17, (CFMutableDictionaryRef *)&v144);
            MutableCopy = (CFMutableDictionaryRef)v144;
          }
          v105 = *((float *)&valuePtr + 1);
          v106 = *(void (**)(const void *, CFMutableDictionaryRef, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 104);
          if (v106)
            v106(v9, MutableCopy, v105);
          if (MutableCopy)
            CFRelease(MutableCopy);
          goto LABEL_147;
        }
        v95 = CMBaseObjectGetDerivedStorage();
        v96 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(v95 + 72), CFSTR("CurrentRate"));
        if (v96)
        {
          v97 = v96;
          v129 = 0.0;
          if (FigCFDictionaryGetFloat32IfPresent())
          {
            if (!CFDictionaryGetValue(v97, CFSTR("AnchorTime")))
              goto LABEL_147;
            v116 = *MEMORY[0x1E0CA2E18];
            v127 = *MEMORY[0x1E0CA2E18];
            v98 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            v128 = v98;
            if (FigCFDictionaryGetCMTimeIfPresent()
              && ((BYTE12(v127) & 1) == 0 || (BYTE12(v127) & 0x1D) == 1))
            {
              *(_OWORD *)type = v116;
              v126 = v98;
              if (FigCFDictionaryGetCMTimeIfPresent())
              {
                if ((type[12] & 1) == 0 || (type[12] & 0x1D) == 1)
                {
                  v124 = 0;
                  if (FigCFDictionaryGetInt32IfPresent())
                  {
                    v99 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v97);
                    CFDictionaryRemoveValue(v99, CFSTR("AnchorTime"));
                    *(_QWORD *)&v144 = v85;
                    *((_QWORD *)&v144 + 1) = CFSTR("CurrentRate");
                    v146 = 0;
                    v147 = 0;
                    v145 = (uint64_t)v99;
                    surrogatePlayer_setPropertyInCacheInternal((uint64_t *)&v144);
                    CFRelease(v99);
                    v100 = v129;
                    v101 = v124;
                    v122 = v127;
                    v123 = v128;
                    v120 = *(_OWORD *)type;
                    v121 = v126;
                    v102 = *(void (**)(const void *, __int128 *, _BYTE *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
                    if (v102)
                    {
                      v144 = v122;
                      v145 = v123;
                      *(_OWORD *)v130 = v120;
                      *(_QWORD *)&v130[16] = v121;
                      v102(v9, &v144, v130, v101, v100);
                    }
                    goto LABEL_147;
                  }
                }
              }
            }
          }
          v84 = FigSignalErrorAt();
          if (v84)
            goto LABEL_196;
        }
      }
LABEL_147:
      v8 = 0;
      goto LABEL_148;
    }
    v8 = v91;
  }
  else
  {
    v8 = -12782;
  }
  LODWORD(v127) = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  v92 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v93 = v127;
  if (os_log_type_enabled(v92, type[0]))
    v94 = v93;
  else
    v94 = v93 & 0xFFFFFFFE;
  if (v94)
  {
    *(_DWORD *)v130 = 136315138;
    *(_QWORD *)&v130[4] = "surrogatePlayer_maybeSetRealPlayerRateFromCache";
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_148:
  MEMORY[0x19402EF04](*(_QWORD *)(v3 + 136));
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v8)
  {
    surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification((const void *)a1[1], v8, 0, 0);
    v144 = *(_OWORD *)a1;
    surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal((const void **)&v144);
  }
}

uint64_t surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItem(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t context;
  CFTypeRef cf;
  CFTypeRef v12;
  CFTypeRef v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0;
  v14 = 0;
  context = a1;
  cf = 0;
  v12 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), &context, (dispatch_function_t)surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItemInternal);
  if (!(_DWORD)v14)
  {
    if (a2)
    {
      *a2 = cf;
    }
    else if (cf)
    {
      CFRelease(cf);
    }
    if (a3)
    {
      *a3 = v12;
    }
    else if (v12)
    {
      CFRelease(v12);
    }
    if (a4)
    {
      *a4 = v13;
    }
    else if (v13)
    {
      CFRelease(v13);
    }
  }
  return v14;
}

uint64_t surrogatePlaybackItem_createRealItem(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _QWORD v8[2];
  CFTypeRef cf;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  cf = 0;
  v10 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), v8, (dispatch_function_t)surrogatePlaybackItem_createRealItemInternal);
  result = v10;
  if (!(_DWORD)v10)
  {
    if (a3)
    {
      result = 0;
      *a3 = cf;
    }
    else if (cf)
    {
      CFRelease(cf);
      return v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t CMBaseObject;
  uint64_t (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v6;
  const void *v7;
  const void *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  int v12;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v3 = *(_QWORD *)(DerivedStorage + 40);
  if (!v3)
    goto LABEL_4;
  CMBaseObject = FigAssetGetCMBaseObject(v3);
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v5)
  {
    v8 = 0;
    v7 = 0;
    v12 = -12782;
    goto LABEL_18;
  }
  v6 = v5(CMBaseObject, CFSTR("assetProperty_AssetType"), *MEMORY[0x1E0C9AE00], &cf);
  if (v6)
  {
    v12 = v6;
    v8 = 0;
    v7 = 0;
  }
  else
  {
LABEL_4:
    v7 = *(const void **)(DerivedStorage + 56);
    if (v7)
      CFRetain(*(CFTypeRef *)(DerivedStorage + 56));
    v8 = *(const void **)(DerivedStorage + 48);
    if (v8)
      CFRetain(v8);
    v9 = cf;
    if (cf)
      v9 = CFRetain(cf);
    *(_QWORD *)(a1 + 8) = v9;
    if (v7)
      v10 = CFRetain(v7);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 16) = v10;
    if (v8)
      v11 = CFRetain(v8);
    else
      v11 = 0;
    v12 = 0;
    *(_QWORD *)(a1 + 24) = v11;
  }
LABEL_18:
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  *(_DWORD *)(a1 + 32) = v12;
}

uint64_t surrogatePlayer_createRealPlayerInternal(uint64_t a1)
{
  _BYTE *DerivedStorage;
  _BYTE *v3;
  const void *v4;
  void **v5;
  uint64_t result;
  CFAllocatorRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v9;
  __CFDictionary *MutableCopy;
  void (*v11)(void *, __CFDictionary *, _QWORD);

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    result = 4294954511;
    goto LABEL_10;
  }
  v3 = DerivedStorage;
  if (!FigCFEqual())
  {
    v5 = (void **)(v3 + 24);
    v4 = (const void *)*((_QWORD *)v3 + 3);
    if (!v4)
    {
      v7 = CFGetAllocator(*(CFTypeRef *)a1);
      result = FigPlayerFileCreateWithOptions((uint64_t)v7, *((_QWORD *)v3 + 1), v5);
      if ((_DWORD)result)
        goto LABEL_10;
      if (dword_1EE2A3388 < 3)
        goto LABEL_14;
LABEL_13:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_14:
      v9 = *v5;
      *(_QWORD *)(a1 + 16) = v9;
      if (v9)
      {
        CFRetain(v9);
        CMNotificationCenterGetDefaultLocalCenter();
        result = FigNotificationCenterAddWeakListener();
        if ((_DWORD)result)
          goto LABEL_10;
        MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *((CFDictionaryRef *)v3 + 9));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("ConnectionActive"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("DuckVolume"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("SilentMute"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("CurrentRate"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("StartupTasks"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("VideoLayerArray"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("VideoTargetArray"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("RequiresNumVideoSlots"));
        CFDictionaryRemoveValue(MutableCopy, CFSTR("ClosedCaptionLayerArray"));
        v11 = *(void (**)(void *, __CFDictionary *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
        if (v11)
          v11(v9, MutableCopy, 0);
        CFDictionaryApplyFunction(*((CFDictionaryRef *)v3 + 9), (CFDictionaryApplierFunction)surrogatePlayer_applyCachedPanItemPropertyToRealPlayer, v9);
        if (MutableCopy)
          CFRelease(MutableCopy);
      }
      goto LABEL_9;
    }
LABEL_8:
    *(_QWORD *)(a1 + 16) = v4;
    CFRetain(v4);
LABEL_9:
    result = 0;
    goto LABEL_10;
  }
  v5 = (void **)(v3 + 32);
  v4 = (const void *)*((_QWORD *)v3 + 4);
  if (v4)
    goto LABEL_8;
  CFGetAllocator(*(CFTypeRef *)a1);
  result = FigPlayerStreamCreateWithOptions();
  if (!(_DWORD)result)
  {
    if (dword_1EE2A3388 < 3)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_10:
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t surrogatePlayer_applyCachedPanItemPropertyToRealPlayer(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  const __CFBoolean *Value;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  const __CFBoolean *v10;
  uint64_t v11;
  const __CFNumber *v12;
  const __CFNumber *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, float, float);
  uint64_t v17;
  CFIndex v18;
  const void *ValueAtIndex;
  void (*v20)(uint64_t, const void *);
  uint64_t valuePtr;

  if (FigCFEqual())
  {
    Value = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("Active"));
    v6 = CFBooleanGetValue(Value);
    result = CMBaseObjectGetVTable();
    v8 = *(_QWORD *)(result + 24);
    if (v8)
    {
      v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
      if (v9)
        return v9(a3, v6);
    }
  }
  else if (FigCFEqual())
  {
    v10 = (const __CFBoolean *)CFDictionaryGetValue(a2, CFSTR("DuckDown"));
    v11 = CFBooleanGetValue(v10);
    valuePtr = 0;
    v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("DuckVolume"));
    CFNumberGetValue(v12, kCFNumberFloat32Type, (char *)&valuePtr + 4);
    v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("RampDuration"));
    CFNumberGetValue(v13, kCFNumberFloat32Type, &valuePtr);
    v14 = valuePtr;
    result = CMBaseObjectGetVTable();
    v15 = *(_QWORD *)(result + 32);
    if (v15)
    {
      v16 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v15 + 8);
      if (v16)
        return v16(a3, v11, *((float *)&v14 + 1), *(float *)&v14);
    }
  }
  else if (FigCFEqual())
  {
    v6 = CFBooleanGetValue(a2);
    result = CMBaseObjectGetVTable();
    v17 = *(_QWORD *)(result + 32);
    if (v17)
    {
      v9 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 16);
      if (v9)
        return v9(a3, v6);
    }
  }
  else
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      v18 = 0;
      if (!a2)
        goto LABEL_16;
LABEL_15:
      for (result = CFArrayGetCount(a2); v18 < result; result = 0)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v18);
        v20 = *(void (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
        if (v20)
          v20(a3, ValueAtIndex);
        ++v18;
        if (a2)
          goto LABEL_15;
LABEL_16:
        ;
      }
    }
  }
  return result;
}

void surrogatePlaybackItem_createRealItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *);
  int v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, _QWORD);
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const void *, uint64_t);
  const void *v22;
  uint64_t FigBaseObject;
  uint64_t (*v24)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v25;
  BOOL v26;
  const __CFArray *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v29 = 0;
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    if (!*(_QWORD *)(DerivedStorage + 56))
    {
      v4 = *(const void **)(a1 + 8);
      *(_QWORD *)(v3 + 56) = v4;
      if (v4)
        CFRetain(v4);
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(DerivedStorage + 24);
    v7 = *(_QWORD *)(DerivedStorage + 32);
    v8 = *(_QWORD *)(DerivedStorage + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 96);
    if (!v9)
    {
      v12 = -12782;
      goto LABEL_44;
    }
    v10 = v9(v5, v8, v6, v7, &v29);
    if (v10)
      goto LABEL_47;
    if (dword_1EE2A3388)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    v10 = FigNotificationCenterAddWeakListener();
    if (v10)
    {
LABEL_47:
      v12 = v10;
      goto LABEL_44;
    }
    *(_BYTE *)(v3 + 151) = 1;
    v13 = (void *)v29;
    *(_QWORD *)(v3 + 48) = v29;
    v29 = 0;
    v14 = *(const void **)(a1 + 8);
    *(_QWORD *)(v3 + 56) = v14;
    if (v14)
    {
      CFRetain(v14);
      v13 = *(void **)(v3 + 48);
    }
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 112), (CFDictionaryApplierFunction)surrogatePlaybackItem_applyCachedItemPropertyToRealPlaybackItem, v13);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 112), CFSTR("SeekDate"));
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 112), CFSTR("CurrentTime"));
    v15 = *(_QWORD *)(v3 + 48);
    v16 = *(_QWORD *)(v3 + 112);
    v17 = *(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
    if (v17)
      v17(v15, v16, 0);
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 112));
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(v3 + 120), (CFDictionaryApplierFunction)surrogatePlaybackItem_applyCachedTrackPropertiesToRealPlaybackItem, *(void **)(v3 + 48));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v3 + 120));
  }
  v18 = *(_QWORD *)(v3 + 64);
  v19 = *(const void **)(v3 + 48);
  if (!v18)
    goto LABEL_24;
  v20 = *(_QWORD *)(v3 + 56);
  v21 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (v21)
    v12 = v21(v20, v19, v18);
  else
    v12 = -12782;
  v22 = *(const void **)(v3 + 64);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(v3 + 64) = 0;
  }
  if (!v12)
  {
    v19 = *(const void **)(v3 + 48);
LABEL_24:
    if (v19)
    {
      if (*(_BYTE *)(v3 + 152))
      {
        cf[0] = 0;
        FigBaseObject = FigPlaybackItemGetFigBaseObject(v19);
        v24 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (v24)
        {
          v12 = v24(FigBaseObject, CFSTR("BasicsReadyForInspection"), *MEMORY[0x1E0C9AE00], cf);
          v25 = cf[0];
          if (v12)
            v26 = 0;
          else
            v26 = cf[0] == (CFTypeRef)*MEMORY[0x1E0C9AE50];
          if (v26)
          {
            surrogatePlaybackItem_deferReadyForInspectionNotification(*(const void **)a1, 0);
            v25 = cf[0];
          }
          if (v25)
            CFRelease(v25);
        }
        else
        {
          v12 = -12782;
        }
        v19 = *(const void **)(v3 + 48);
        if (!v19)
          goto LABEL_42;
      }
      else
      {
        v12 = 0;
      }
      v27 = *(const __CFArray **)(v3 + 96);
      if (!v27
        || (v12 = surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem(*(const void **)a1, (uint64_t)v19, v27, 1, 0), CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v3 + 96)), (v19 = *(const void **)(v3 + 48)) != 0))
      {
        v28 = CFRetain(v19);
LABEL_43:
        *(_QWORD *)(a1 + 16) = v28;
        goto LABEL_44;
      }
    }
    else
    {
      v12 = 0;
    }
LABEL_42:
    v28 = 0;
    goto LABEL_43;
  }
LABEL_44:
  if (v29)
    CFRelease(v29);
  *(_DWORD *)(a1 + 24) = v12;
}

void surrogatePlaybackItem_realItemNotificationWeakCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  int v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  void (__cdecl *v13)(void *);
  void **v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeID v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFTypeID v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  void *value[3];

  if (FigCFEqual())
  {
    if (a5 && (value[0] = 0, CFDictionaryGetValueIfPresent(a5, CFSTR("AsRequested"), (const void **)value), value[0]))
    {
      v7 = CFBooleanGetValue((CFBooleanRef)value[0]);
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v9 = DerivedStorage;
      if (v7)
      {
        if (*(_BYTE *)(DerivedStorage + 153))
        {
          v10 = 0;
          *(_BYTE *)(DerivedStorage + 153) = 0;
          goto LABEL_24;
        }
        goto LABEL_22;
      }
    }
    else
    {
      v9 = CMBaseObjectGetDerivedStorage();
    }
    v10 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (!v10)
      goto LABEL_24;
    *(_BYTE *)(v9 + 153) = 0;
    v11 = CMBaseObjectGetDerivedStorage();
    value[1] = a2;
    value[2] = 0;
    value[0] = v10;
    v12 = *(NSObject **)(v11 + 56);
    v13 = (void (__cdecl *)(void *))surrogatePlayer_removeItemFromPlayQueueInternal;
    v14 = value;
    goto LABEL_10;
  }
  if (FigCFEqual())
  {
    v10 = 0;
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 156) = 1;
    goto LABEL_23;
  }
  if (FigCFEqual())
  {
    v10 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (!v10)
      goto LABEL_24;
    v15 = CMBaseObjectGetDerivedStorage();
    v16 = CMBaseObjectGetDerivedStorage();
    dispatch_sync_f(*(dispatch_queue_t *)(v15 + 56), (void *)(v16 + 154), (dispatch_function_t)surrogatePlaybackItem_setBooleanToTrue);
    v12 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 128);
    v13 = (void (__cdecl *)(void *))surrogatePlaybackItem_applyPropertiesToBeAppliedOnceWhenRealItemBecomesCurrentInternal;
    v14 = (void **)a2;
LABEL_10:
    dispatch_sync_f(v12, v14, v13);
LABEL_23:
    surrogatePlaybackItem_deferPostNotification(a2);
    goto LABEL_24;
  }
  if (!FigCFEqual()
    || a5
    && (v17 = CFGetTypeID(a5), v17 == CFDictionaryGetTypeID())
    && (v18 = (const __CFArray *)CFDictionaryGetValue(a5, CFSTR("Properties"))) != 0
    && ((v19 = v18, v20 = CFGetTypeID(v18), v20 != CFArrayGetTypeID()) || CFArrayGetCount(v19)))
  {
LABEL_22:
    v10 = 0;
    goto LABEL_23;
  }
  v21 = CMBaseObjectGetDerivedStorage();
  v22 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
  if (v22)
  {
    v23 = v22;
    *v22 = CFRetain(a2);
    dispatch_async_f(*(dispatch_queue_t *)(v21 + 128), v23, (dispatch_function_t)surrogatePlaybackItem_deferReadyForInspectionNotificationInternal);
  }
  else
  {
    FigSignalErrorAt();
  }
  v10 = 0;
LABEL_24:
  surrogatePlaybackItem_retainReleaseOnSafeQ(a2);
  _deferReleaseToSafeQ(v10);
}

uint64_t surrogatePlaybackItem_applyCachedItemPropertyToRealPlaybackItem(uint64_t a1, const __CFDictionary *a2, uint64_t a3)
{
  const __CFNumber *Value;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  const void *v10;
  uint64_t (*v11)(uint64_t, __int128 *, const void *);
  __int128 v12;
  uint64_t v13;
  __int128 valuePtr;
  uint64_t v15;

  if (FigCFEqual())
  {
    LODWORD(valuePtr) = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("SeekID"));
    if (Value)
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    result = (uint64_t)CFDictionaryGetValue(a2, CFSTR("Date"));
    if (result)
    {
      v7 = result;
      v8 = valuePtr;
      result = CMBaseObjectGetVTable();
      v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 128);
      if (v9)
        return v9(a3, v7, v8);
    }
  }
  else
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      v12 = *MEMORY[0x1E0CA2E18];
      v13 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      result = FigCFDictionaryGetCMTimeIfPresent();
      if ((_DWORD)result)
      {
        v10 = CFDictionaryGetValue(a2, CFSTR("Options"));
        result = CMBaseObjectGetVTable();
        v11 = *(uint64_t (**)(uint64_t, __int128 *, const void *))(*(_QWORD *)(result + 16) + 176);
        if (v11)
        {
          valuePtr = v12;
          v15 = v13;
          return v11(a3, &valuePtr, v10);
        }
      }
    }
  }
  return result;
}

void surrogatePlaybackItem_applyCachedTrackPropertiesToRealPlaybackItem(unsigned int a1, CFDictionaryRef theDict, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a3;
  v4[1] = a1;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)surrogatePlaybackItem_applyCachedTrackPropertyToRealPlaybackItemTrack, v4);
  CFDictionaryRemoveAllValues(theDict);
}

void surrogatePlaybackItem_deferReadyForInspectionNotification(const void *a1, void *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  CFDictionaryRef v6;
  CFTypeRef cf;
  void *values;

  values = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    cf = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v6 = CFDictionaryCreate(v5, (const void **)kFigPlaybackItemParameter_Properties, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (cf)
      CFRelease(cf);
    surrogatePlaybackItem_deferPostNotification(a1);
    if (v6)
      CFRelease(v6);
  }
  else if (!*(_BYTE *)(DerivedStorage + 148))
  {
    *(_BYTE *)(DerivedStorage + 148) = 1;
    surrogatePlaybackItem_deferPostNotification(a1);
  }
}

uint64_t surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem(const void *a1, uint64_t a2, CFArrayRef theArray, int a4, BOOL *a5)
{
  CFIndex Count;
  uint64_t result;
  BOOL v12;
  CFIndex v13;
  CFIndex i;
  void *ValueAtIndex;
  char v16;
  CFRange v17;

  v16 = 0;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  result = surrogatePlaybackItem_callMakeReadyForInspectionOnRealItemForProperty(a1, a2, 0, a4, &v16);
  if (!(_DWORD)result)
  {
    v12 = v16 != 0;
    if (surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialPropertiesOnce != -1)
      dispatch_once_f(&surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialPropertiesOnce, &surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties, (dispatch_function_t)surrogatePlaybackItem_initPropertiesWithSpecialHandlingWhenMakingReadyForInspection);
    if (surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties)
      v13 = CFArrayGetCount((CFArrayRef)surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties);
    else
      v13 = 0;
    if (Count >= 1)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
        v17.location = 0;
        v17.length = v13;
        if (CFArrayContainsValue((CFArrayRef)surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem_specialProperties, v17, ValueAtIndex))
        {
          v16 = 0;
          result = surrogatePlaybackItem_callMakeReadyForInspectionOnRealItemForProperty(a1, a2, ValueAtIndex, a4, &v16);
          if ((_DWORD)result)
            return result;
          if (!v16)
            v12 = 0;
        }
      }
    }
    result = 0;
    if (a5)
      *a5 = v12;
  }
  return result;
}

_BYTE *surrogatePlaybackItem_setBooleanToTrue(_BYTE *result)
{
  *result = 1;
  return result;
}

void surrogatePlaybackItem_deferReadyForInspectionNotificationInternal(const void **a1)
{
  CMBaseObjectGetDerivedStorage();
  surrogatePlaybackItem_deferReadyForInspectionNotification(*a1, 0);
  CFRelease(*a1);
  free(a1);
}

void surrogatePlaybackItem_retainReleaseOnSafeQ(void *a1)
{
  void *v2;
  uint64_t DerivedStorage;

  v2 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  CFRetain(a1);
  if (v2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), a1, (dispatch_function_t)_deferReleaseToSafeQ);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), v2, (dispatch_function_t)_deferReleaseToSafeQ);
  }
  else
  {
    _deferReleaseToSafeQ(a1);
  }
}

void surrogatePlaybackItem_applyPropertiesToBeAppliedOnceWhenRealItemBecomesCurrentInternal(void *a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 104), (CFDictionaryApplierFunction)surrogatePlaybackItem_applyPropertyWhenRealItemBecomesCurrentToItem, a1);
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 104));
}

uint64_t surrogatePlaybackItem_applyPropertyWhenRealItemBecomesCurrentToItem()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, _QWORD, float);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), CFSTR("StartPreroll"));
    if (result)
    {
      FigCFDictionaryGetFloat32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      v2 = *(_QWORD *)(DerivedStorage + 56);
      result = CMBaseObjectGetVTable();
      v3 = *(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)(result + 16) + 64);
      if (v3)
        return v3(v2, 0, 0.0);
    }
  }
  return result;
}

uint64_t surrogatePlaybackItem_applyCachedTrackPropertyToRealPlaybackItemTrack(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v5 = *a3;
  v6 = *((unsigned int *)a3 + 2);
  result = CMBaseObjectGetVTable();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 112);
  if (v8)
    return v8(v5, v6, a1, a2);
  return result;
}

uint64_t surrogatePlaybackItem_callMakeReadyForInspectionOnRealItemForProperty(const void *a1, uint64_t a2, void *a3, int a4, _BYTE *a5)
{
  CFArrayRef v9;
  uint64_t (*v10)(uint64_t, CFArrayRef, char *);
  uint64_t v11;
  uint64_t v12;
  char v14;
  void *values;

  values = a3;
  v14 = 0;
  if (a3)
    v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
  else
    v9 = 0;
  v10 = *(uint64_t (**)(uint64_t, CFArrayRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v10)
  {
    v12 = 4294954514;
    if (!a4)
      goto LABEL_15;
    goto LABEL_14;
  }
  v11 = v10(a2, v9, &v14);
  v12 = v11;
  if (a4)
  {
    if (!(_DWORD)v11)
    {
      if (v14)
        surrogatePlaybackItem_deferReadyForInspectionNotification(a1, values);
      v12 = 0;
      goto LABEL_10;
    }
LABEL_14:
    surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(a1, v12, 0, values);
    goto LABEL_15;
  }
LABEL_10:
  if (a5 && !(_DWORD)v12)
    *a5 = v14;
LABEL_15:
  if (v9)
    CFRelease(v9);
  return v12;
}

CFArrayRef surrogatePlaybackItem_initPropertiesWithSpecialHandlingWhenMakingReadyForInspection(CFArrayRef *a1)
{
  CFArrayRef result;
  const void *v3[6];

  v3[5] = *(const void **)MEMORY[0x1E0C80C00];
  v3[0] = CFSTR("CPEProtector");
  v3[1] = CFSTR("InitialSamples");
  v3[2] = CFSTR("AccurateDuration");
  v3[3] = CFSTR("iTunesGaplessInfo");
  v3[4] = CFSTR("Lyrics");
  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 5, MEMORY[0x1E0C9B378]);
  *a1 = result;
  return result;
}

uint64_t surrogatePlayer_setRealPlayerPropertyFromCache(uint64_t a1, uint64_t a2, void *key)
{
  uint64_t result;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, void *, uint64_t);
  uint64_t v9;

  result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), key);
  if (result)
  {
    v6 = result;
    FigBaseObject = FigPlayerGetFigBaseObject(a2);
    result = CMBaseObjectGetVTable();
    v8 = *(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)(result + 8) + 56);
    if (v8)
    {
      if (v6 == *MEMORY[0x1E0C9B0D0])
        v9 = 0;
      else
        v9 = v6;
      return v8(FigBaseObject, key, v9);
    }
  }
  return result;
}

dispatch_queue_t _initDeferredReleaseQ(dispatch_queue_t *a1)
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coremedia.surrogatePlayer.deferredRelease", 0);
  *a1 = result;
  return result;
}

void surrogatePlayer_postDeferredNotification(uint64_t a1, void *a2)
{
  if (!*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  _deferReleaseToSafeQ(a2);
}

void surrogatePlaybackItem_invalidateInternalOnPlayerQ(const void *a1)
{
  uint64_t DerivedStorage;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex IndexOfItem;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (v3)
  {
    v4 = CMBaseObjectGetDerivedStorage();
    v5 = v4;
    if (*(_BYTE *)(DerivedStorage + 146))
    {
      *(_BYTE *)(DerivedStorage + 146) = 0;
      IndexOfItem = surrogatePlayer_getIndexOfItem(v4, a1);
      if (IndexOfItem != -1)
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v5 + 48), IndexOfItem);
    }
    if (*(_QWORD *)(DerivedStorage + 88))
    {
      FigCFWeakReferenceTableRemoveValue();
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
  }
  _deferReleaseToSafeQ(v3);
}

uint64_t surrogatePlayer_copyPropertyFromCache(uint64_t a1, uint64_t a2, CFTypeRef *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  _QWORD context[2];
  CFTypeRef cf;
  CFTypeRef v12;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = a2;
  v12 = 0;
  v13 = 0;
  cf = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_copyPropertyFromCacheInternal);
  if (a3)
  {
    *a3 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  if (a4)
  {
    *a4 = v12;
  }
  else if (v12)
  {
    CFRelease(v12);
  }
  return v13;
}

uint64_t surrogatePlayer_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const __CFArray *a4, _BYTE *a5, const __CFString **a6, CFArrayRef *a7)
{
  CFArrayRef v10;
  uint64_t DerivedStorage;
  const __CFString *v14;
  CFTypeRef v15;
  const __CFString *v16;
  CFArrayRef v17;
  uint64_t RealPlayer;
  uint64_t v19;
  uint64_t v20;
  CFTypeID v22;
  int Value;
  CFTypeID v24;
  unsigned int Count;
  CFTypeID v26;
  const __CFArray *v27;
  NSObject *DispatchQueue;
  NSObject *v29;
  CFTypeID v30;
  const __CFArray *v31;
  NSObject *v32;
  const __CFArray *v33;
  _QWORD context[5];

  v10 = a4;
  v33 = a4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    v14 = (const __CFString *)CFRetain(a3);
    if (v10)
    {
LABEL_3:
      v15 = CFRetain(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v14 = 0;
    if (v10)
      goto LABEL_3;
  }
  v15 = 0;
LABEL_6:
  if (*(_BYTE *)DerivedStorage)
  {
    v20 = 4294954511;
    goto LABEL_62;
  }
  if (FigCFEqual())
  {
    if (v10)
      v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&v33, 1, MEMORY[0x1E0C9B378]);
    v16 = CFSTR("VideoLayerArray");
    if (CFSTR("VideoLayerArray"))
      CFRetain(CFSTR("VideoLayerArray"));
    if (v14)
      CFRelease(v14);
    if (v10)
      CFRetain(v10);
    if (v15)
      CFRelease(v15);
    v17 = v10;
    goto LABEL_24;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      if (v10)
      {
        v22 = CFGetTypeID(v10);
        if (v22 == CFBooleanGetTypeID())
        {
          Value = CFBooleanGetValue(v10);
          if (*(unsigned __int8 *)(DerivedStorage + 90) != Value)
            surrogatePlayer_handleWaitForVideoTargetConditionChange(a1, 1, Value, 0);
        }
      }
      goto LABEL_61;
    }
    if (FigCFEqual())
    {
      if (v10)
      {
        v24 = CFGetTypeID(v10);
        if (v24 != CFArrayGetTypeID())
          goto LABEL_23;
        Count = CFArrayGetCount(v10);
      }
      else
      {
        Count = 0;
      }
      if (*(_DWORD *)(DerivedStorage + 92) != Count)
        surrogatePlayer_handleWaitForVideoTargetConditionChange(a1, 2, 0, Count);
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      if (v10)
      {
        v26 = CFGetTypeID(v10);
        if (v26 == FigDispatchQueueHolderGetTypeID()
          && !*(_QWORD *)(DerivedStorage + 24)
          && !*(_QWORD *)(DerivedStorage + 32))
        {
          v27 = *(const __CFArray **)(DerivedStorage + 48);
          if (!v27 || !CFArrayGetCount(v27))
          {
            DispatchQueue = FigDispatchQueueHolderGetDispatchQueue();
            v29 = *(NSObject **)(DerivedStorage + 64);
            if (v29)
              dispatch_release(v29);
            *(_QWORD *)(DerivedStorage + 64) = DispatchQueue;
LABEL_60:
            dispatch_retain(DispatchQueue);
LABEL_61:
            v20 = 0;
            *a5 = 1;
            goto LABEL_62;
          }
        }
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        if (!FigCFEqual())
          goto LABEL_23;
        surrogatePlayer_setActionAtEndOnRealPlayer(a1, (uint64_t)v10);
        goto LABEL_61;
      }
      if (v10)
      {
        v30 = CFGetTypeID(v10);
        if (v30 == FigDispatchQueueHolderGetTypeID()
          && !*(_QWORD *)(DerivedStorage + 24)
          && !*(_QWORD *)(DerivedStorage + 32))
        {
          v31 = *(const __CFArray **)(DerivedStorage + 48);
          if (!v31 || !CFArrayGetCount(v31))
          {
            DispatchQueue = FigDispatchQueueHolderGetDispatchQueue();
            v32 = *(NSObject **)(DerivedStorage + 56);
            if (v32)
              dispatch_release(v32);
            *(_QWORD *)(DerivedStorage + 56) = DispatchQueue;
            goto LABEL_60;
          }
        }
      }
    }
    RealPlayer = FigSignalErrorAt();
LABEL_71:
    v20 = RealPlayer;
    goto LABEL_62;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    RealPlayer = surrogatePlayer_createRealPlayer(a1, (uint64_t)v10, 0);
    if (!(_DWORD)RealPlayer)
    {
LABEL_23:
      v17 = 0;
      v10 = (CFArrayRef)v15;
      v16 = v14;
LABEL_24:
      *a5 = 0;
      v19 = CMBaseObjectGetDerivedStorage();
      context[0] = a1;
      context[1] = v16;
      context[3] = 0;
      context[4] = 0;
      context[2] = v10;
      dispatch_sync_f(*(dispatch_queue_t *)(v19 + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
      *a6 = v16;
      *a7 = v10;
      if (v17)
        CFRelease(v17);
      return 0;
    }
    goto LABEL_71;
  }
  v20 = 0;
LABEL_62:
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  return v20;
}

uint64_t surrogatePlayer_createRealPlayer(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _QWORD v8[2];
  CFTypeRef cf;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8[0] = a1;
  v8[1] = a2;
  cf = 0;
  v10 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v8, (dispatch_function_t)surrogatePlayer_createRealPlayerInternal);
  result = v10;
  if (!(_DWORD)v10)
  {
    if (a3)
    {
      result = 0;
      *a3 = cf;
    }
    else if (cf)
    {
      CFRelease(cf);
      return v10;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void surrogatePlayer_handleWaitForVideoTargetConditionChange(uint64_t a1, int a2, unsigned __int8 a3, unsigned int a4)
{
  uint64_t DerivedStorage;
  uint64_t context;
  int v10;
  int v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_handleWaitForVideoTargetConditionChangeInternal);
}

void surrogatePlayer_setActionAtEndOnRealPlayer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD v5[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5[0] = a1;
  v5[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v5, (dispatch_function_t)surrogatePlayer_setActionAtEndInternal);
}

void surrogatePlayer_handleWaitForVideoTargetConditionChangeInternal(uint64_t a1)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v10;
  CFIndex Count;
  NSObject *v12;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 2)
  {
    v8 = *(_DWORD *)(DerivedStorage + 92);
    if (dword_1EE2A3388)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(v4 + 92) = *(_DWORD *)(a1 + 16);
    if (!v8)
      goto LABEL_10;
  }
  else if (v5 == 1)
  {
    v6 = *(unsigned __int8 *)(a1 + 12);
    *(_BYTE *)(DerivedStorage + 90) = v6;
    if (dword_1EE2A3388)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = *(unsigned __int8 *)(v4 + 90);
    }
    if (!v6)
    {
LABEL_10:
      v10 = *(const __CFArray **)(v4 + 48);
      if (v10)
        Count = CFArrayGetCount(v10);
      else
        Count = 0;
      if (dword_1EE2A3388)
      {
        v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 48), i);
          v15 = CMBaseObjectGetDerivedStorage();
          if (*(_BYTE *)(v15 + 145))
          {
            *(_BYTE *)(v15 + 145) = 0;
            v16[0] = v2;
            v16[1] = (uint64_t)ValueAtIndex;
            surrogatePlayer_respondToLoadingOfItemAssetTypeInternal(v16);
          }
        }
      }
    }
  }
}

uint64_t surrogatePlayer_AddToPlayQueue(const void *a1, const void *a2, uint64_t a3)
{
  dispatch_queue_t *DerivedStorage;
  dispatch_queue_t *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  _QWORD context[3];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  v11 = 0;
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  if (!a2)
    return 4294954516;
  v7 = DerivedStorage;
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  LOBYTE(v11) = 0;
  HIDWORD(v11) = 0;
  dispatch_sync_f(v7[7], context, (dispatch_function_t)surrogatePlaybackItem_addToPlayQueueInternal);
  result = HIDWORD(v11);
  if (!HIDWORD(v11))
  {
    if ((_BYTE)v11)
      return surrogatePlayer_deferInitiateLoadingOfItemAssetType(a1, a2, 1);
  }
  return result;
}

uint64_t surrogatePlayer_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t result;
  int v8;
  CFTypeRef v9;
  CFTypeRef v10;
  void (*v11)(CFTypeRef, CFTypeRef);
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD);
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  NSObject *v16;
  _QWORD v17[2];
  CFTypeRef cf;
  os_log_type_t type[8];
  _QWORD context[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3388)
  {
    LODWORD(v17[0]) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  v6 = CMBaseObjectGetDerivedStorage();
  context[3] = CFSTR("ReasonRemoveFromPlayqueue");
  v21 = 0;
  context[0] = a1;
  context[1] = a2;
  context[2] = 1;
  dispatch_sync_f(*(dispatch_queue_t *)(v6 + 56), context, (dispatch_function_t)surrogatePlayer_carefullyRemoveItemInternal);
  result = HIDWORD(v21);
  if (!HIDWORD(v21))
  {
    if (a2)
    {
      v8 = v21;
      cf = 0;
      *(_QWORD *)type = 0;
      surrogatePlaybackItem_copyRealItemAndRealPlayer(a2, (CFTypeRef *)type, &cf);
      v9 = *(CFTypeRef *)type;
      if (*(_QWORD *)type && (v10 = cf) != 0 && v8)
      {
        v11 = *(void (**)(CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v11)
          v11(v10, v9);
      }
      else
      {
        v17[0] = a1;
        v17[1] = 0;
        if (dword_1EE2A3388)
        {
          v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v17, (dispatch_function_t)surrogatePlayer_initiateEnqueueingOfCurrentItemIfNeededInternal);
      }
      if (*(_QWORD *)type)
        CFRelease(*(CFTypeRef *)type);
      if (cf)
        CFRelease(cf);
    }
    else
    {
      v12 = *(_QWORD *)(DerivedStorage + 24);
      if (v12)
      {
        v13 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v13)
          v13(v12, 0);
      }
      v14 = *(_QWORD *)(DerivedStorage + 32);
      if (v14)
      {
        v15 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v15)
          v15(v14, 0);
      }
    }
    return 0;
  }
  return result;
}

uint64_t surrogatePlayer_CopyPlayQueueItem(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  if (!a3)
    return 4294954516;
  v8[0] = a1;
  v8[1] = a2;
  v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), v8, (dispatch_function_t)surrogatePlaybackItem_copyPlayQueueItemInternal);
  if ((_DWORD)v10)
    return 0;
  result = 0;
  *a3 = v9;
  return result;
}

uint64_t surrogatePlayer_SetRate(uint64_t a1, float a2)
{
  return surrogatePlayer_SetRateWithFade(a1, a2);
}

uint64_t surrogatePlayer_GetRate(uint64_t a1, _DWORD *a2)
{
  CFTypeRef v4;
  uint64_t (*v5)(CFTypeRef, _DWORD *);
  uint64_t v6;
  const __CFNumber *Value;
  CFTypeRef cf;
  CFDictionaryRef theDict;

  cf = 0;
  theDict = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  if (!a2)
  {
    v6 = 4294954516;
    goto LABEL_10;
  }
  surrogatePlayer_copyPropertyFromCache(a1, (uint64_t)CFSTR("CurrentRate"), (CFTypeRef *)&theDict, &cf);
  v4 = cf;
  if (cf)
  {
    v5 = *(uint64_t (**)(CFTypeRef, _DWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v5)
      v6 = v5(v4, a2);
    else
      v6 = 4294954514;
    goto LABEL_10;
  }
  if (theDict)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("Rate"));
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberFloat32Type, a2);
      v6 = 0;
    }
    else
    {
      v6 = 4294954513;
    }
LABEL_10:
    if (theDict)
      CFRelease(theDict);
    goto LABEL_13;
  }
  v6 = 0;
  *a2 = 0;
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t surrogatePlayer_SetRateWithFade(uint64_t a1, float a2)
{
  CFMutableDictionaryRef Mutable;
  uint64_t (*v5)(uint64_t, CFMutableDictionaryRef, float);
  uint64_t v6;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetCMTime();
  v5 = *(uint64_t (**)(uint64_t, CFMutableDictionaryRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 104);
  if (!v5)
  {
    v6 = 4294954514;
    if (!Mutable)
      return v6;
    goto LABEL_3;
  }
  v6 = v5(a1, Mutable, a2);
  if (Mutable)
LABEL_3:
    CFRelease(Mutable);
  return v6;
}

uint64_t surrogatePlayer_StartPreroll(uint64_t a1, int a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t context;
  float v9;
  int v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  context = a1;
  v9 = a3;
  v10 = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_startPrerollInternal);
  return v11;
}

uint64_t surrogatePlayer_StepByCount(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t context;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = 0;
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
  v5 = v9;
  if (!v9)
    return FigSignalErrorAt();
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t surrogatePlayer_SetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, float a5)
{
  _BYTE *DerivedStorage;
  OpaqueCMClock *HostTimeClock;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, _BYTE *, CMTime *, uint64_t, float);
  NSObject *v17;
  CMTime type;
  __int128 v19;
  uint64_t v20;
  CMTime v21;
  CMTime rhs;
  _BYTE time[28];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  memset(&v21, 0, sizeof(v21));
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&v21, HostTimeClock);
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*DerivedStorage)
    return 4294954511;
  *(_OWORD *)&time[12] = *a2;
  v24 = *((_QWORD *)a2 + 2);
  v25 = *a3;
  v26 = *((_QWORD *)a3 + 2);
  *(_QWORD *)time = a1;
  *(float *)&time[8] = a5;
  v27 = a4;
  v28 = 0;
  v29 = 0;
  v13 = CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*(dispatch_queue_t *)(v13 + 56), time, (dispatch_function_t)surrogatePlayer_setRateAndAnchorTimeInCacheInternal);
  v14 = v29;
  if ((_DWORD)v29)
  {
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v14 = v28;
    if (v28)
    {
      v19 = *a2;
      v20 = *((_QWORD *)a2 + 2);
      *(_OWORD *)&type.value = *a3;
      type.epoch = *((_QWORD *)a3 + 2);
      v15 = *(uint64_t (**)(uint64_t, _BYTE *, CMTime *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 88);
      if (v15)
      {
        *(_OWORD *)time = v19;
        *(_QWORD *)&time[16] = v20;
        rhs = type;
        return v15(v14, time, &rhs, a4, a5);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  return v14;
}

uint64_t surrogatePlayer_CreatePlaybackItemFromAsset(const void *a1, const void *a2, int a3, const __CFDictionary *a4, _QWORD *a5)
{
  _BYTE *DerivedStorage;
  _BYTE *v11;
  const __CFAllocator *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const __CFAllocator *v16;
  const void *MutableCopy;
  CFTypeRef v18;
  CFTypeRef v19;
  uint64_t v20;
  const CFDictionaryValueCallBacks *v21;
  const void *v22;
  const char *v23;
  CFMutableDictionaryRef Mutable;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t Key;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v34;
  unsigned int v35;
  const char *v36;
  const char *v37;
  _QWORD *v39;
  int v40;
  void *value;
  _BYTE cf[12];
  __int16 v43;
  const void *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const void *v48;
  __int16 v49;
  const char *v50;
  char __str[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294954511;
  v11 = DerivedStorage;
  v40 = a3;
  v39 = a5;
  v12 = CFGetAllocator(a1);
  value = 0;
  *(_QWORD *)cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigPlaybackItemGetClassID();
  v13 = CMDerivedObjectCreate();
  if ((_DWORD)v13)
    return v13;
  v14 = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)v14 = 0;
  *(_BYTE *)(v14 + 158) = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(v14 + 158), 10, 0x600u);
  v13 = FigMetricEventTimelineCreate();
  if ((_DWORD)v13)
    return v13;
  v15 = a1;
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (const void *)FigCFDictionaryCreateMutableCopy();
  FigCFDictionarySetValue();
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  if (a2)
    v18 = CFRetain(a2);
  else
    v18 = 0;
  *(_QWORD *)(v14 + 40) = v18;
  *(_DWORD *)(v14 + 24) = v40;
  if (MutableCopy)
    v19 = CFRetain(MutableCopy);
  else
    v19 = 0;
  *(_QWORD *)(v14 + 32) = v19;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 80) = 0;
  v20 = FigSimpleMutexCreate();
  *(_QWORD *)(v14 + 72) = v20;
  if (v20)
  {
    *(_QWORD *)(v14 + 96) = 0;
    v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    *(_QWORD *)(v14 + 112) = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v14 + 120) = CFDictionaryCreateMutable(v12, 0, 0, v21);
    v22 = *(const void **)cf;
    v23 = *(_QWORD *)cf ? (const char *)(CMBaseObjectGetDerivedStorage() + 158) : "";
    snprintf(__str, 0x50uLL, "com.apple.coremedia.surrogatePlaybackItem[%p.%s]", v22, v23);
    *(_QWORD *)(v14 + 128) = FigDispatchQueueCreateWithPriority();
    *(_BYTE *)(v14 + 146) = 0;
    Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(v14 + 104) = Mutable;
    if (Mutable)
    {
      v25 = FigSimpleMutexCreate();
      *(_QWORD *)(v14 + 136) = v25;
      if (v25)
      {
        v26 = 0;
        v27 = *(const void **)cf;
        if (!MutableCopy)
          goto LABEL_21;
        goto LABEL_20;
      }
    }
  }
  v26 = FigSignalErrorAt();
  v27 = 0;
  if (MutableCopy)
LABEL_20:
    CFRelease(MutableCopy);
LABEL_21:
  if (!(_DWORD)v26)
  {
    v28 = CMBaseObjectGetDerivedStorage();
    v29 = FigCFWeakReferenceHolderCreateWithReferencedObject();
    *(_QWORD *)(v28 + 80) = v29;
    if (v29)
    {
      v30 = *((_QWORD *)v11 + 2);
      *(_QWORD *)(v28 + 8) = v30;
      if (v30 && (dispatch_retain(v30), v31 = *((_QWORD *)v11 + 8), (*(_QWORD *)(v28 + 16) = v31) != 0))
      {
        dispatch_retain(v31);
        Key = FigCFWeakReferenceTableAddValueAndGetKey();
        if (!(_DWORD)Key)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          Key = FigNotificationCenterAddWeakListener();
          if (!(_DWORD)Key)
          {
            *(_BYTE *)(v28 + 149) = 1;
            CMNotificationCenterGetDefaultLocalCenter();
            Key = FigNotificationCenterAddWeakListener();
            if (!(_DWORD)Key)
            {
              *(_BYTE *)(v28 + 150) = 1;
              if (!dword_1EE2A3388)
              {
LABEL_41:
                v26 = 0;
                *v39 = v27;
                return v26;
              }
              LODWORD(value) = 0;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v34 = value;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
                v35 = v34;
              else
                v35 = v34 & 0xFFFFFFFE;
              if (!v35)
              {
LABEL_40:
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                goto LABEL_41;
              }
              if (a1)
              {
                v36 = (const char *)(CMBaseObjectGetDerivedStorage() + 120);
                if (v27)
                {
LABEL_35:
                  v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
LABEL_39:
                  *(_DWORD *)cf = 136316162;
                  *(_QWORD *)&cf[4] = "surrogatePlayer_CreatePlaybackItemFromAsset";
                  v43 = 2048;
                  v44 = v15;
                  v45 = 2082;
                  v46 = v36;
                  v47 = 2048;
                  v48 = v27;
                  v49 = 2082;
                  v50 = v37;
                  _os_log_send_and_compose_impl();
                  goto LABEL_40;
                }
              }
              else
              {
                v36 = "";
                if (v27)
                  goto LABEL_35;
              }
              v37 = "";
              goto LABEL_39;
            }
          }
        }
        v26 = Key;
      }
      else
      {
        v26 = 4294954516;
      }
    }
    else
    {
      v26 = 4294954434;
    }
  }
  if (v27)
    CFRelease(v27);
  return v26;
}

uint64_t surrogatePlayer_SetRateWithOptions(uint64_t a1, const void *a2, float a3)
{
  __CFDictionary *RateDict;
  uint64_t DerivedStorage;
  uint64_t v8;
  void (*v9)(uint64_t, const void *, float);
  _QWORD context[3];
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  RateDict = surrogatePlayer_makeRateDict(a2, a3);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = CFSTR("CurrentRate");
  v12 = 0;
  v13 = 0;
  context[2] = RateDict;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  v8 = v12;
  if (v12)
  {
    v9 = *(void (**)(uint64_t, const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (v9)
      v9(v8, a2, a3);
  }
  if (RateDict)
    CFRelease(RateDict);
  return 0;
}

uint64_t surrogatePlayer_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  CFDictionaryRef v10;
  void (*v11)(uint64_t, CFDictionaryRef, CFTypeRef *);
  __CFDictionary *MutableCopy;
  CFDictionaryRef v13;
  CFDictionaryRef v14;
  void (*v15)(uint64_t, CFDictionaryRef, _QWORD);
  uint64_t v16;
  CFTypeRef v18;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  BOOL v21;
  uint64_t context;
  uint64_t v23;
  uint64_t v24;

  v21 = 0;
  cf = 0;
  theDict = 0;
  v18 = 0;
  if (a2)
  {
    v6 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)surrogatePlayer_handleSetProperty, &v21, &theDict, &cf);
    if ((_DWORD)v6)
    {
      v16 = v6;
      goto LABEL_23;
    }
    if (!v21)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v23 = 0;
      v24 = 0;
      context = a1;
      dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
      v9 = v23;
      v8 = v24;
      if (v23)
      {
        v10 = theDict;
        v11 = *(void (**)(uint64_t, CFDictionaryRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 112);
        if (v11)
          v11(v9, v10, &v18);
      }
      if (v8)
      {
        if (CFDictionaryContainsKey(a2, CFSTR("VideoLayerArray"))
          || CFDictionaryContainsKey(a2, CFSTR("VideoTargetArray"))
          || CFDictionaryContainsKey(a2, CFSTR("RequiresNumVideoSlots"))
          || CFDictionaryContainsKey(a2, CFSTR("ClosedCaptionLayerArray")))
        {
          MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
          CFDictionaryRemoveValue(MutableCopy, CFSTR("VideoLayerArray"));
          CFDictionaryRemoveValue(MutableCopy, CFSTR("VideoTargetArray"));
          CFDictionaryRemoveValue(MutableCopy, CFSTR("RequiresNumVideoSlots"));
          CFDictionaryRemoveValue(MutableCopy, CFSTR("ClosedCaptionLayerArray"));
          v13 = theDict;
          theDict = MutableCopy;
          if (MutableCopy)
            CFRetain(MutableCopy);
          if (v13)
            CFRelease(v13);
        }
        else
        {
          MutableCopy = 0;
        }
        v14 = theDict;
        v15 = *(void (**)(uint64_t, CFDictionaryRef, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
        if (v15)
          v15(v8, v14, 0);
        goto LABEL_21;
      }
    }
  }
  else
  {
    v16 = FigSignalErrorAt();
    if ((_DWORD)v16)
      goto LABEL_23;
  }
  MutableCopy = 0;
LABEL_21:
  v16 = FPSupport_CopyCombinedSetPropertiesErrDictionary(cf, v18, a3);
  if (MutableCopy)
    CFRelease(MutableCopy);
LABEL_23:
  if (theDict)
    CFRelease(theDict);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v16;
}

uint64_t surrogatePlayer_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t context;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = 0;
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_currentRealPlayerInternal);
  v5 = v9;
  if (!v9)
    return 0;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t surrogatePlayer_AddExternalStartupTask(uint64_t a1, const void *a2)
{
  __CFArray *MutableCopy;
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const void *);
  void (*v9)(uint64_t, const void *);
  CFTypeRef cf;
  _QWORD context[3];
  uint64_t v13;
  uint64_t v14;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  surrogatePlayer_copyPropertyFromCache(a1, (uint64_t)CFSTR("StartupTasks"), &cf, 0);
  MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
  CFArrayAppendValue(MutableCopy, a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = CFSTR("StartupTasks");
  v13 = 0;
  v14 = 0;
  context[2] = MutableCopy;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  v6 = v13;
  v7 = v14;
  if (!v13)
  {
LABEL_5:
    if (v7)
      goto LABEL_6;
    goto LABEL_8;
  }
  v8 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v8)
  {
    v6 = v8(v6, a2);
    goto LABEL_5;
  }
  v6 = 4294954514;
  if (v7)
  {
LABEL_6:
    v9 = *(void (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
    if (v9)
      v9(v7, a2);
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v6;
}

uint64_t surrogatePlayer_RemoveExternalStartupTask(uint64_t a1, const void *a2)
{
  const __CFArray *MutableCopy;
  CFIndex v5;
  CFIndex i;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const void *);
  void (*v11)(uint64_t, const void *);
  CFTypeRef cf;
  _QWORD context[3];
  uint64_t v15;
  uint64_t v16;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  surrogatePlayer_copyPropertyFromCache(a1, (uint64_t)CFSTR("StartupTasks"), &cf, 0);
  MutableCopy = (const __CFArray *)FigCFArrayCreateMutableCopy();
  v5 = 0;
  if (!MutableCopy)
    goto LABEL_4;
LABEL_3:
  for (i = CFArrayGetCount(MutableCopy); v5 < i; i = 0)
  {
    if (CFArrayGetValueAtIndex(MutableCopy, v5) == a2)
      CFArrayRemoveValueAtIndex(MutableCopy, v5);
    ++v5;
    if (MutableCopy)
      goto LABEL_3;
LABEL_4:
    ;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = CFSTR("StartupTasks");
  v15 = 0;
  v16 = 0;
  context[2] = MutableCopy;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  v8 = v15;
  v9 = v16;
  if (!v15)
  {
LABEL_13:
    if (v9)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (v10)
  {
    v8 = v10(v8, a2);
    goto LABEL_13;
  }
  v8 = 4294954514;
  if (v9)
  {
LABEL_14:
    v11 = *(void (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
    if (v11)
      v11(v9, a2);
  }
LABEL_16:
  if (cf)
    CFRelease(cf);
  if (MutableCopy)
    CFRelease(MutableCopy);
  return v8;
}

uint64_t surrogatePlayer_TransferOwnershipOfPlaybackItemFromPlayer(void *a1, uint64_t a2, void *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  dispatch_queue_t *v8;
  dispatch_queue_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  void *context;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a3 && a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v8 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)DerivedStorage || (v9 = v8, *(_BYTE *)v8))
    {
      a1 = 0;
      v14 = 4294954511;
    }
    else
    {
      v10 = CMBaseObjectGetDerivedStorage();
      v11 = surrogatePlaybackItem_copyOwningPlayer();
      if ((void *)v11 == a1)
      {
        v14 = 0;
      }
      else
      {
        v12 = (void *)v11;
        if ((void *)v11 == a3)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 72));
          v13 = *(const void **)(v10 + 80);
          if (v13)
          {
            CFRelease(v13);
            *(_QWORD *)(v10 + 80) = 0;
          }
          *(_QWORD *)(v10 + 80) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          MEMORY[0x19402EF04](*(_QWORD *)(v10 + 72));
          v17 = a2;
          v18 = 0;
          context = a3;
          dispatch_sync_f(v9[7], &context, (dispatch_function_t)surrogatePlayer_removeItemFromValidItems);
          v14 = v18;
          if (!(_DWORD)v18)
          {
            v17 = a2;
            v18 = 0;
            context = a1;
            dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlayer_receiveOwnershipOfItem);
            v14 = v18;
          }
          a1 = a3;
        }
        else
        {
          v14 = FigSignalErrorAt();
          a1 = v12;
        }
      }
    }
  }
  else
  {
    v14 = FigSignalErrorAt();
    a1 = 0;
  }
  _deferReleaseToSafeQ(a1);
  return v14;
}

void surrogatePlaybackItem_addToPlayQueueInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void *v4;
  CFIndex IndexOfItem;
  CFIndex Count;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v8;
  const void *v9;
  CFIndex v10;
  CFIndex v11;
  int v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, const __CFString *);
  CFIndex v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  CFIndex v24;
  CFIndex v25;
  uint64_t v26;
  int v28;
  CFIndex v29;
  const void *ValueAtIndex;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (*(_QWORD *)(a1 + 16))
    CMBaseObjectGetDerivedStorage();
  IndexOfItem = surrogatePlayer_getIndexOfItem(DerivedStorage, *(const void **)(a1 + 8));
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)v3)
    goto LABEL_11;
  v8 = -12780;
  if (v4 == *(void **)a1 && IndexOfItem == -1)
  {
    *(_DWORD *)(v3 + 154) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    v9 = *(const void **)(a1 + 16);
    if (!v9)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 48), *(const void **)(a1 + 8));
      v12 = 0;
      v13 = Count;
      goto LABEL_32;
    }
    v10 = surrogatePlayer_getIndexOfItem(DerivedStorage, v9);
    v11 = v10;
    if (v10)
    {
      if (v10 == -1)
      {
LABEL_11:
        v8 = -12780;
        goto LABEL_49;
      }
    }
    else
    {
      v14 = *(_QWORD *)(DerivedStorage + 80);
      if (v14)
      {
        FigBaseObject = FigPlayerGetFigBaseObject(v14);
        v16 = *(void (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
        if (v16)
          v16(FigBaseObject, CFSTR("ActionAtEnd"), CFSTR("None"));
        v12 = 1;
LABEL_18:
        v13 = v11 + 1;
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 48), v11 + 1, *(const void **)(a1 + 8));
        if (v11 + 2 <= Count)
        {
          CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v11 + 2);
          if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 146))
          {
            while (Count - 2 != v11)
            {
              CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v11 + 3);
              ++v11;
              if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 146))
              {
                v17 = v11 + 1;
                goto LABEL_25;
              }
            }
            v17 = Count;
          }
          else
          {
            v17 = 0;
          }
LABEL_25:
          if (v17 >= 1 && v17 > v13)
          {
            v18 = Count;
            do
            {
              CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v17);
              v19 = CMBaseObjectGetDerivedStorage();
              *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 146) = 0;
              *(_BYTE *)(v19 + 153) = 1;
              v22 = v19 + 48;
              v21 = *(_QWORD *)(v19 + 48);
              v20 = *(_QWORD *)(v22 + 8);
              v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
              if (v23)
                v23(v20, v21);
              --v17;
            }
            while (v17 > v13);
            Count = v18;
          }
        }
LABEL_32:
        if (Count)
        {
          if (*(_BYTE *)(DerivedStorage + 88))
          {
            v24 = Count;
            v25 = v13;
            do
            {
              v26 = v25;
              if (v25-- < 1)
                break;
              CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v25);
            }
            while (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 144));
            *(_BYTE *)(a1 + 24) = v26 < 1;
            Count = v24;
          }
          if (!v12)
            goto LABEL_40;
        }
        else
        {
          *(_BYTE *)(a1 + 24) = 1;
          *(_BYTE *)(DerivedStorage + 96) = 1;
          if (!v12)
            goto LABEL_40;
        }
        surrogatePlayer_setCachedActionAtEndOnRealPlayerOnQ(*(_QWORD *)a1);
LABEL_40:
        CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 72), CFSTR("ActionAtEnd"));
        v28 = FigCFEqual();
        v8 = 0;
        if (v13 == Count)
        {
          v29 = Count - 1;
          if (Count >= 1)
          {
            if (v28)
            {
              ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
              if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 157))
              {
                v31 = *(_QWORD *)a1;
                v32[1] = ValueAtIndex;
                v33 = 0;
                v32[0] = v31;
                surrogatePlayer_removeItemFromPlayQueueInternal(v32);
                v8 = HIDWORD(v33);
                if (!v29)
                {
                  surrogatePlaybackItem_deferPostNotification(ValueAtIndex);
                  *(_DWORD *)(DerivedStorage + 104) = 2;
                  *(_QWORD *)(DerivedStorage + 112) = CFSTR("ReasonAdvanceDueToError");
                  *(_BYTE *)(a1 + 24) = 1;
                }
              }
              else
              {
                v8 = 0;
              }
            }
          }
        }
        goto LABEL_49;
      }
    }
    v12 = 0;
    goto LABEL_18;
  }
LABEL_49:
  _deferReleaseToSafeQ(v4);
  *(_DWORD *)(a1 + 28) = v8;
}

uint64_t surrogatePlayer_deferInitiateLoadingOfItemAssetType(const void *a1, const void *a2, char a3)
{
  uint64_t DerivedStorage;
  _BYTE *v7;
  _QWORD *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = malloc_type_malloc(0x18uLL, 0x1020040839F2BD9uLL);
  if (!v7)
    return FigSignalErrorAt();
  v8 = v7;
  v7[17] = 1;
  *(_QWORD *)v7 = CFRetain(a1);
  v8[1] = CFRetain(a2);
  *((_BYTE *)v8 + 16) = a3;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), v8, (dispatch_function_t)surrogatePlayer_initiateLoadingOfItemAssetTypeInternal);
  return 0;
}

void surrogatePlaybackItem_copyRealItemAndRealPlayer(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  void *v3;
  uint64_t DerivedStorage;
  CFTypeRef v8;
  CFTypeRef v9;
  uint64_t context;
  CFTypeRef cf;
  CFTypeRef v12;

  v3 = 0;
  context = 0;
  cf = 0;
  v12 = 0;
  if ((unint64_t)a2 | (unint64_t)a3)
  {
    v3 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (v3)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)DerivedStorage)
      {
        context = a1;
        dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), &context, (dispatch_function_t)surrogatePlaybackItem_copyRealItemAndRealPlayerInternal);
        if (a2)
        {
          v8 = cf;
          *a2 = cf;
          if (v8)
            CFRetain(v8);
        }
        if (a3)
        {
          v9 = v12;
          *a3 = v12;
          if (v9)
            CFRetain(v9);
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  _deferReleaseToSafeQ(v3);
}

CFIndex surrogatePlayer_initiateEnqueueingOfCurrentItemIfNeededInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  CFIndex result;
  const void *ValueAtIndex;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
  if (result >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), 0);
    result = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(result + 146) && !*(_BYTE *)(result + 144))
    {
      if (dword_1EE2A3388)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      result = surrogatePlayer_deferInitiateLoadingOfItemAssetType(*(const void **)a1, ValueAtIndex, 1);
    }
  }
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

CFTypeRef surrogatePlaybackItem_copyRealItemAndRealPlayerInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CFTypeRef result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(DerivedStorage + 48);
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
    CFRetain(v3);
  result = *(CFTypeRef *)(DerivedStorage + 56);
  *(_QWORD *)(a1 + 16) = result;
  if (result)
    return CFRetain(result);
  return result;
}

const void *surrogatePlaybackItem_copyPlayQueueItemInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  const void *result;
  const void *v6;
  CFIndex Count;
  CFIndex v8;
  const __CFArray *v9;
  int v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *(const void **)(a1 + 8);
  if (v4)
  {
    result = (const void *)surrogatePlayer_getIndexOfItem(DerivedStorage, v4);
    if (result == (const void *)-1)
    {
      v10 = -12780;
      goto LABEL_11;
    }
    v6 = result;
    Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 48));
    v8 = (CFIndex)v6 + 1;
    if (Count > (uint64_t)v6 + 1)
    {
      v9 = *(const __CFArray **)(v3 + 48);
      goto LABEL_7;
    }
  }
  else if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48)) >= 1)
  {
    v9 = *(const __CFArray **)(v3 + 48);
    v8 = 0;
LABEL_7:
    result = CFArrayGetValueAtIndex(v9, v8);
    if (result)
      result = CFRetain(result);
    goto LABEL_10;
  }
  result = 0;
LABEL_10:
  v10 = 0;
  *(_QWORD *)(a1 + 16) = result;
LABEL_11:
  *(_DWORD *)(a1 + 24) = v10;
  return result;
}

void surrogatePlayer_startPrerollInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *v4;
  const void *ValueAtIndex;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  int v8;
  uint64_t v9;
  _QWORD context[3];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage
    && (v3 = DerivedStorage, (v4 = *(const __CFArray **)(DerivedStorage + 48)) != 0)
    && CFArrayGetCount(v4) > 0
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 48), 0),
        (Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0))
  {
    v7 = Mutable;
    v8 = FigCFDictionarySetFloat32();
    if (!v8)
    {
      FigCFDictionarySetInt32();
      v9 = CMBaseObjectGetDerivedStorage();
      context[0] = ValueAtIndex;
      context[1] = CFSTR("StartPreroll");
      context[2] = v7;
      dispatch_sync_f(*(dispatch_queue_t *)(v9 + 128), context, (dispatch_function_t)surrogatePlaybackItem_setPropertyToBeAppliedOnceWhenRealItemBecomesReadyInternal);
    }
    CFRelease(v7);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 16) = v8;
}

void surrogatePlaybackItem_setPropertyToBeAppliedOnceWhenRealItemBecomesReadyInternal(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), *(const void **)(a1 + 8), *(const void **)(a1 + 16));
  if (*(_QWORD *)(DerivedStorage + 48))
  {
    if (*(_BYTE *)(DerivedStorage + 146))
      surrogatePlaybackItem_applyPropertiesToBeAppliedOnceWhenRealItemBecomesCurrentInternal(*(void **)a1);
  }
}

uint64_t surrogatePlayer_setRateAndAnchorTimeInCacheInternal(uint64_t *a1)
{
  uint64_t DerivedStorage;
  const __CFArray *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __CFDictionary *RateDict;
  const __CFAllocator *v8;
  const CFDictionaryKeyCallBacks *v9;
  const CFDictionaryValueCallBacks *v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  uint64_t result;
  __int128 v14;
  __CFDictionary *v15;
  __int128 v16;
  __CFDictionary *v17;
  __int128 v18;
  __CFDictionary *v19;
  uint64_t v20;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
  {
    result = 4294954511;
    goto LABEL_18;
  }
  v3 = *(const __CFArray **)(DerivedStorage + 48);
  if (!v3 || CFArrayGetCount(v3) <= 0)
  {
    result = FigSignalErrorAt();
    goto LABEL_18;
  }
  FigCFArrayGetFirstValue();
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = *a1;
  v19 = 0;
  v18 = v5;
  surrogatePlayer_currentRealPlayerInternal((uint64_t)&v18);
  v6 = *((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) && *(_BYTE *)(v4 + 146))
  {
    RateDict = surrogatePlayer_makeRateDict(0, *((float *)a1 + 2));
    a1[8] = v6;
  }
  else
  {
    v16 = *(_OWORD *)((char *)a1 + 12);
    v17 = *(__CFDictionary **)((char *)a1 + 28);
    v14 = *(_OWORD *)((char *)a1 + 36);
    v15 = *(__CFDictionary **)((char *)a1 + 52);
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v10 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    RateDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    Mutable = CFDictionaryCreateMutable(v8, 3, v9, v10);
    v12 = Mutable;
    if (RateDict)
    {
      if (!Mutable)
      {
        CFRelease(RateDict);
        RateDict = 0;
        goto LABEL_14;
      }
      v18 = v16;
      v19 = v17;
      if (FigCFDictionarySetCMTime()
        || (v18 = v14, v19 = v15, FigCFDictionarySetCMTime())
        || FigCFDictionarySetInt32()
        || (CFDictionarySetValue(RateDict, CFSTR("AnchorTime"), v12), FigCFDictionarySetFloat32()))
      {
        CFRelease(RateDict);
        RateDict = 0;
      }
    }
    else if (!Mutable)
    {
      goto LABEL_14;
    }
    CFRelease(v12);
  }
LABEL_14:
  *(_QWORD *)&v18 = *a1;
  *((_QWORD *)&v18 + 1) = CFSTR("CurrentRate");
  v20 = 0;
  v21 = 0;
  v19 = RateDict;
  surrogatePlayer_setPropertyInCacheInternal((uint64_t *)&v18);
  if (RateDict)
    CFRelease(RateDict);
  result = 0;
LABEL_18:
  *((_DWORD *)a1 + 18) = result;
  return result;
}

void surrogatePlaybackItem_assetNotificationWeakCallback(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  void *v7;
  CFTypeID v8;
  NSObject *v9;
  void (__cdecl *v10)(void *);
  int v11;
  CFTypeID v12;
  void *Value;
  const __CFNumber *v14;
  const void *v15;
  CFTypeID v16;
  int v17;
  uint64_t DerivedStorage;
  int valuePtr;
  void *context;
  void *v21;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v7 = 0;
    goto LABEL_19;
  }
  v7 = (void *)surrogatePlaybackItem_copyOwningPlayer();
  if (v7 && !*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    if (FigCFEqual())
    {
      if (a5)
      {
        v8 = CFGetTypeID(a5);
        if (v8 == CFDictionaryGetTypeID())
        {
          CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("assetPayload_Property"));
          if (FigCFEqual())
          {
            context = v7;
            v21 = a2;
            v9 = *(NSObject **)(CMBaseObjectGetDerivedStorage() + 56);
            v10 = (void (__cdecl *)(void *))surrogatePlayer_respondToLoadingOfItemAssetTypeInternal;
LABEL_18:
            dispatch_sync_f(v9, &context, v10);
          }
        }
      }
    }
    else
    {
      v11 = FigCFEqual();
      if (a5)
      {
        if (v11)
        {
          v12 = CFGetTypeID(a5);
          if (v12 == CFDictionaryGetTypeID())
          {
            Value = (void *)CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("assetPayload_Property"));
            if (FigCFEqual())
            {
              v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("assetPayload_Result"));
              valuePtr = 0;
              v15 = CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("assetPayload_CFError"));
              if (v14 && (v16 = CFGetTypeID(v14), v16 == CFNumberGetTypeID()))
              {
                CFNumberGetValue(v14, kCFNumberSInt32Type, &valuePtr);
                v17 = valuePtr;
              }
              else
              {
                v17 = 0;
              }
              surrogatePlaybackItem_deferFailedToBecomeReadyForInspectionNotification(a2, v17, v15, Value);
              DerivedStorage = CMBaseObjectGetDerivedStorage();
              context = v7;
              v21 = a2;
              v9 = *(NSObject **)(DerivedStorage + 56);
              v10 = (void (__cdecl *)(void *))surrogatePlayer_respondToFailedLoadingOfItemAssetTypeInternal;
              goto LABEL_18;
            }
          }
        }
      }
    }
  }
LABEL_19:
  surrogatePlaybackItem_retainReleaseOnSafeQ(a2);
  _deferReleaseToSafeQ(v7);
}

uint64_t surrogatePlaybackItem_Invalidate(void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3388)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v6 = 4294954511;
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), a1, (dispatch_function_t)surrogatePlaybackItem_invalidateInternalOnItemQ);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 136));
    v4 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    if (v4)
    {
      v5 = CMBaseObjectGetDerivedStorage();
      dispatch_sync_f(*(dispatch_queue_t *)(v5 + 56), a1, (dispatch_function_t)surrogatePlaybackItem_invalidateInternalOnPlayerQ);
    }
    v6 = 0;
  }
  _deferReleaseToSafeQ(v4);
  return v6;
}

uint64_t surrogatePlaybackItem_Finalize(void *a1)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  NSObject *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  NSObject *v16;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3388 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  surrogatePlaybackItem_Invalidate(a1);
  v4 = DerivedStorage[1];
  if (v4)
    dispatch_release(v4);
  v5 = DerivedStorage[2];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)DerivedStorage[5];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[5] = 0;
  }
  v7 = (const void *)DerivedStorage[4];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[4] = 0;
  }
  v8 = (const void *)DerivedStorage[6];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[6] = 0;
  }
  v9 = (const void *)DerivedStorage[7];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[7] = 0;
  }
  v10 = (const void *)DerivedStorage[8];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[8] = 0;
  }
  v11 = (const void *)DerivedStorage[10];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[10] = 0;
  }
  v12 = (const void *)DerivedStorage[12];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[12] = 0;
  }
  v13 = (const void *)DerivedStorage[14];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[14] = 0;
  }
  v14 = (const void *)DerivedStorage[15];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[15] = 0;
  }
  v15 = (const void *)DerivedStorage[13];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[13] = 0;
  }
  v16 = DerivedStorage[16];
  if (v16)
    dispatch_release(v16);
  if (DerivedStorage[9])
    FigSimpleMutexDestroy();
  result = DerivedStorage[17];
  if (result)
    return FigSimpleMutexDestroy();
  return result;
}

__CFString *surrogatePlaybackItem_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const char *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (a1)
    v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 158);
  else
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("FigPlaybackItemSurrogate <%p|%s> realItem %p"), a1, v5, *(_QWORD *)(DerivedStorage + 48));
  return Mutable;
}

uint64_t surrogatePlaybackItem_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v9;
  CFTypeRef v10;
  void *v11;
  uint64_t FigBaseObject;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t v14;
  uint64_t v15;
  const void **v16;
  const void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const __CFString *, char *, uint64_t *, _QWORD);
  uint64_t v20;
  int v21;
  uint64_t v23;
  CFTypeRef v24;
  uint64_t v25;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v9 = DerivedStorage;
  cf = 0;
  if (a4)
    *a4 = 0;
  if (*DerivedStorage)
  {
    v11 = 0;
    v15 = 4294954511;
    goto LABEL_34;
  }
  surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &cf, 0);
  v10 = cf;
  if (cf)
    goto LABEL_5;
  if (FigCFEqual())
    goto LABEL_10;
  if (!FigCFEqual())
  {
    if (!FigCFEqual() && !FigCFEqual() && !FigCFEqual())
    {
      if (!FigCFEqual())
      {
        v17 = 0;
        goto LABEL_29;
      }
      v16 = (const void **)(v9 + 168);
      goto LABEL_11;
    }
LABEL_10:
    v16 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_11:
    v17 = *v16;
    goto LABEL_15;
  }
  v17 = 0;
LABEL_15:
  v25 = 0;
  v18 = *((_QWORD *)v9 + 5);
  v19 = *(uint64_t (**)(uint64_t, const __CFString *, char *, uint64_t *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 8);
  if (!v19)
  {
    v15 = 4294954514;
LABEL_22:
    v11 = 0;
    goto LABEL_34;
  }
  v20 = v19(v18, CFSTR("assetProperty_AssetType"), (char *)&v25 + 4, &v25, 0);
  if ((_DWORD)v20)
  {
    v15 = v20;
    goto LABEL_22;
  }
  if (HIDWORD(v25) == 3)
  {
    v15 = v25;
    goto LABEL_22;
  }
  if (SHIDWORD(v25) > 1)
  {
LABEL_29:
    v21 = 0;
    goto LABEL_30;
  }
  v21 = 1;
  if (FigCFEqual())
    v9[152] = 1;
LABEL_30:
  v10 = cf;
  if (cf)
    goto LABEL_5;
  if (FigCFEqual() || FigCFEqual())
  {
LABEL_33:
    v11 = 0;
    v15 = 0;
    goto LABEL_34;
  }
  v10 = cf;
  if (v21 || cf)
  {
    if (!cf)
    {
      if (v21)
      {
        if (a4)
        {
          if (v17)
            v24 = CFRetain(v17);
          else
            v24 = 0;
          v11 = 0;
          v15 = 0;
          *a4 = v24;
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      v11 = 0;
LABEL_49:
      v14 = FigSignalErrorAt();
      goto LABEL_8;
    }
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v23 = surrogatePlaybackItem_copyOwningPlayer();
  v11 = (void *)v23;
  if (!v23)
    goto LABEL_49;
  v14 = surrogatePlayer_createRealItemAndRealPlayer(v23, a1, &cf);
  if ((_DWORD)v14)
    goto LABEL_8;
  v10 = cf;
  if (!cf)
    goto LABEL_49;
LABEL_6:
  FigBaseObject = FigPlaybackItemGetFigBaseObject(v10);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v13)
  {
    v14 = v13(FigBaseObject, a2, a3, a4);
LABEL_8:
    v15 = v14;
    goto LABEL_34;
  }
  v15 = 4294954514;
LABEL_34:
  if (cf)
    CFRelease(cf);
  _deferReleaseToSafeQ(v11);
  return v15;
}

uint64_t surrogatePlaybackItem_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v11;
  char v13;
  CFTypeRef v14;
  CFTypeRef cf;
  CFTypeRef v16;

  cf = 0;
  v16 = 0;
  v14 = 0;
  v13 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v11 = 4294954511;
  }
  else
  {
    v6 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)surrogatePlaybackItem_handleSetProperty, &v13, &cf, &v14);
    if ((_DWORD)v6)
    {
LABEL_7:
      v11 = v6;
      goto LABEL_10;
    }
    if (v13 || (surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &v16, 0), !v16))
    {
      v11 = 0;
    }
    else
    {
      v8 = v14;
      v7 = cf;
      FigBaseObject = FigPlaybackItemGetFigBaseObject(v16);
      v10 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v10)
      {
        v6 = v10(FigBaseObject, v7, v8);
        goto LABEL_7;
      }
      v11 = 4294954514;
    }
  }
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v16)
    CFRelease(v16);
  return v11;
}

void surrogatePlaybackItem_invalidateInternalOnItemQ(uint64_t a1)
{
  uint64_t DerivedStorage;
  __CFArray *v3;
  __CFDictionary *v4;
  __CFDictionary *v5;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  const void *v10;
  _QWORD v11[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11[0] = a1;
  v11[1] = 0;
  surrogatePlayerItem_cancelPendingPrerollInternal((uint64_t)v11);
  *(_WORD *)DerivedStorage = 257;
  v3 = *(__CFArray **)(DerivedStorage + 96);
  if (v3)
    CFArrayRemoveAllValues(v3);
  v4 = *(__CFDictionary **)(DerivedStorage + 112);
  if (v4)
    CFDictionaryRemoveAllValues(v4);
  v5 = *(__CFDictionary **)(DerivedStorage + 120);
  if (v5)
    CFDictionaryRemoveAllValues(v5);
  if (*(_QWORD *)(DerivedStorage + 40))
  {
    if (*(_BYTE *)(DerivedStorage + 149))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(DerivedStorage + 149) = 0;
    }
    if (*(_BYTE *)(DerivedStorage + 150))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(DerivedStorage + 150) = 0;
    }
  }
  v6 = *(_QWORD *)(DerivedStorage + 48);
  if (v6)
  {
    if (*(_BYTE *)(DerivedStorage + 151))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(DerivedStorage + 151) = 0;
      v6 = *(_QWORD *)(DerivedStorage + 48);
    }
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v6);
    if (FigBaseObject)
    {
      v8 = FigBaseObject;
      v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v9)
        v9(v8);
    }
  }
  v10 = *(const void **)(DerivedStorage + 168);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
}

uint64_t surrogatePlayer_createRealItemAndRealPlayer(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;

  v11 = 0;
  cf = 0;
  v10 = 0;
  v6 = surrogatePlaybackItem_copyAssetTypeAndRealPlayerAndRealItem(a2, &v10, &cf, &v11);
  if (!(_DWORD)v6)
  {
    if (cf)
      v7 = v11 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = 0;
      if (!a3)
        goto LABEL_13;
      goto LABEL_12;
    }
    v6 = surrogatePlayer_createRealPlayer(a1, (uint64_t)v10, &cf);
    if (!(_DWORD)v6)
      v6 = surrogatePlaybackItem_createRealItem(a2, (uint64_t)cf, &v11);
  }
  v8 = v6;
  if (a3)
  {
LABEL_12:
    *a3 = v11;
    v11 = 0;
  }
LABEL_13:
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return v8;
}

uint64_t surrogatePlaybackItem_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t result;
  _QWORD v17[4];

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17[0] = a1;
  v17[1] = a3;
  v17[2] = a4;
  v17[3] = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), v17, (dispatch_function_t)surrogatePlaybackItem_setPropertyInCacheInternal);
  *a5 = 0;
  if (a3)
    v14 = CFRetain(a3);
  else
    v14 = 0;
  *a6 = v14;
  if (a4)
    v15 = CFRetain(a4);
  else
    v15 = 0;
  result = 0;
  *a7 = v15;
  return result;
}

void surrogatePlaybackItem_setPropertyInCacheInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFArray *v4;
  const __CFArray *Value;
  const __CFArray *MutableCopy;
  const __CFArray *v7;
  const __CFArray *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 1))
  {
    v3 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      if (*(_QWORD *)(DerivedStorage + 48))
      {
        *(_BYTE *)(a1 + 24) = 1;
      }
      else
      {
        v4 = *(const __CFArray **)(a1 + 16);
        if (v4
          && CFEqual(*(CFTypeRef *)(a1 + 8), CFSTR("SelectedMediaArray"))
          && (Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 112), CFSTR("SelectedMediaArray"))) != 0)
        {
          MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, Value);
          v7 = MutableCopy;
          if (MutableCopy)
          {
            FigAutomaticMediaSelectionCoalesceSelectedMediaArrays(MutableCopy, v4, 1);
            v4 = v7;
          }
        }
        else
        {
          v7 = 0;
        }
        if (v4)
          v8 = v4;
        else
          v8 = (const __CFArray *)*MEMORY[0x1E0C9B0D0];
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 112), *(const void **)(a1 + 8), v8);
        *(_BYTE *)(a1 + 24) = 0;
        if (v7)
          CFRelease(v7);
      }
    }
  }
}

uint64_t surrogatePlaybackItem_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(CFTypeRef, uint64_t, uint64_t);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v7 = 0;
    v11 = 4294954511;
    goto LABEL_12;
  }
  v6 = surrogatePlaybackItem_copyOwningPlayer();
  v7 = (void *)v6;
  if (!v6)
    goto LABEL_7;
  v8 = surrogatePlayer_createRealItemAndRealPlayer(v6, a1, &cf);
  if ((_DWORD)v8)
  {
LABEL_8:
    v11 = v8;
    goto LABEL_10;
  }
  v9 = cf;
  if (!cf)
  {
LABEL_7:
    v8 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v10 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v10)
  {
    v8 = v10(v9, a2, a3);
    goto LABEL_8;
  }
  v11 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  _deferReleaseToSafeQ(v7);
  return v11;
}

uint64_t surrogatePlaybackItem_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t (*v8)(CFTypeRef, uint64_t);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v5 = 0;
    v9 = 4294954511;
    goto LABEL_12;
  }
  v4 = surrogatePlaybackItem_copyOwningPlayer();
  v5 = (void *)v4;
  if (!v4)
    goto LABEL_7;
  v6 = surrogatePlayer_createRealItemAndRealPlayer(v4, a1, &cf);
  if ((_DWORD)v6)
  {
LABEL_8:
    v9 = v6;
    goto LABEL_10;
  }
  v7 = cf;
  if (!cf)
  {
LABEL_7:
    v6 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v8 = *(uint64_t (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v8)
  {
    v6 = v8(v7, a2);
    goto LABEL_8;
  }
  v9 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  _deferReleaseToSafeQ(v5);
  return v9;
}

uint64_t surrogatePlaybackItem_SetCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  return surrogatePlaybackItem_SetCurrentTimeWithRangeAndID(a1, &v4, a3, MEMORY[0x1E0CA2E28], MEMORY[0x1E0CA2E30]);
}

uint64_t surrogatePlaybackItem_GetCurrentTime(CMTimeValue a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  const void *epoch;
  const void *v6;
  uint64_t v7;
  uint64_t (*v8)(const void *, CMTime *);
  const __CFDictionary *Value;
  CMTime context;
  const void *v12;
  uint64_t v13;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context.value = a1;
  *(_QWORD *)&context.timescale = CFSTR("CurrentTime");
  v12 = 0;
  v13 = 0;
  context.epoch = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), &context, (dispatch_function_t)surrogatePlaybackItem_copyPropertyFromCacheInternal);
  epoch = (const void *)context.epoch;
  v6 = v12;
  v7 = v13;
  if ((_DWORD)v13)
  {
LABEL_6:
    if (!epoch)
      goto LABEL_7;
    goto LABEL_13;
  }
  if (!v12)
  {
    if (!context.epoch)
      return 0;
    Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)context.epoch, CFSTR("Time"));
    if (Value)
    {
      CMTimeMakeFromDictionary(&context, Value);
      v7 = 0;
      v6 = 0;
      *a2 = context;
    }
    else
    {
      v6 = 0;
      v7 = 4294954513;
    }
    goto LABEL_13;
  }
  v8 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
  {
    v7 = v8(v6, a2);
    goto LABEL_6;
  }
  v7 = 4294954514;
  if (!epoch)
  {
LABEL_7:
    if (!v6)
      return v7;
    goto LABEL_14;
  }
LABEL_13:
  CFRelease(epoch);
  if (v6)
LABEL_14:
    CFRelease(v6);
  return v7;
}

uint64_t surrogatePlaybackItem_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t (*v14)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v11 = 0;
    v15 = 4294954511;
    goto LABEL_12;
  }
  v10 = surrogatePlaybackItem_copyOwningPlayer();
  v11 = (void *)v10;
  if (!v10)
    goto LABEL_7;
  v12 = surrogatePlayer_createRealItemAndRealPlayer(v10, a1, &cf);
  if ((_DWORD)v12)
  {
LABEL_8:
    v15 = v12;
    goto LABEL_10;
  }
  v13 = cf;
  if (!cf)
  {
LABEL_7:
    v12 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v14 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 40);
  if (v14)
  {
    v12 = v14(v13, a2, a3, a4, a5);
    goto LABEL_8;
  }
  v15 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  _deferReleaseToSafeQ(v11);
  return v15;
}

uint64_t surrogatePlaybackItem_MakeReadyForInspection(const void *a1, const __CFArray *a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  _QWORD v8[2];
  int v9[2];
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  v8[0] = a1;
  v8[1] = a2;
  *(_QWORD *)v9 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 128), v8, (dispatch_function_t)surrogatePlaybackItem_MakeReadyForInspectionInternal);
  result = v10;
  if (!(_DWORD)v10)
  {
    if (*(_QWORD *)v9)
    {
      return surrogatePlaybackItem_callMakeReadyForInspectionOnRealItem(a1, *(uint64_t *)v9, a2, 0, a3);
    }
    else
    {
      result = 0;
      if (a3)
        *a3 = 0;
    }
  }
  return result;
}

uint64_t surrogatePlaybackItem_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v9 = 0;
    v13 = 4294954511;
    goto LABEL_12;
  }
  v8 = surrogatePlaybackItem_copyOwningPlayer();
  v9 = (void *)v8;
  if (!v8)
    goto LABEL_7;
  v10 = surrogatePlayer_createRealItemAndRealPlayer(v8, a1, &cf);
  if ((_DWORD)v10)
  {
LABEL_8:
    v13 = v10;
    goto LABEL_10;
  }
  v11 = cf;
  if (!cf)
  {
LABEL_7:
    v10 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v12)
  {
    v10 = v12(v11, a2, a3, a4);
    goto LABEL_8;
  }
  v13 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  _deferReleaseToSafeQ(v9);
  return v13;
}

uint64_t surrogatePlaybackItem_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v9 = 0;
    v13 = 4294954511;
    goto LABEL_12;
  }
  v8 = surrogatePlaybackItem_copyOwningPlayer();
  v9 = (void *)v8;
  if (!v8)
    goto LABEL_7;
  v10 = surrogatePlayer_createRealItemAndRealPlayer(v8, a1, &cf);
  if ((_DWORD)v10)
  {
LABEL_8:
    v13 = v10;
    goto LABEL_10;
  }
  v11 = cf;
  if (!cf)
  {
LABEL_7:
    v10 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v12 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v12)
  {
    v10 = v12(v11, a2, a3, a4);
    goto LABEL_8;
  }
  v13 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  _deferReleaseToSafeQ(v9);
  return v13;
}

uint64_t surrogatePlaybackItem_GetNextThumbnailTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t (*v12)(CFTypeRef, __int128 *, uint64_t, uint64_t);
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  CFTypeRef cf;
  __int128 v18;
  uint64_t v19;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v9 = 0;
    v13 = 4294954511;
    goto LABEL_12;
  }
  v8 = surrogatePlaybackItem_copyOwningPlayer();
  v9 = (void *)v8;
  if (!v8)
    goto LABEL_7;
  v10 = surrogatePlayer_createRealItemAndRealPlayer(v8, a1, &cf);
  if ((_DWORD)v10)
  {
LABEL_8:
    v13 = v10;
    goto LABEL_10;
  }
  v11 = cf;
  if (!cf)
  {
LABEL_7:
    v10 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  v12 = *(uint64_t (**)(CFTypeRef, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 80);
  if (v12)
  {
    v18 = v15;
    v19 = v16;
    v10 = v12(v11, &v18, a3, a4);
    goto LABEL_8;
  }
  v13 = 4294954514;
LABEL_10:
  if (cf)
    CFRelease(cf);
LABEL_12:
  _deferReleaseToSafeQ(v9);
  return v13;
}

uint64_t surrogatePlaybackItem_SetCurrentTimeWithRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  v8 = *(_OWORD *)a4;
  v9 = *(_QWORD *)(a4 + 16);
  v6 = *(_OWORD *)a5;
  v7 = *(_QWORD *)(a5 + 16);
  return surrogatePlaybackItem_SetCurrentTimeWithRangeAndID(a1, &v10, a3, &v8, &v6);
}

uint64_t surrogatePlaybackItem_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, unint64_t);
  _QWORD context[3];
  __int128 v15;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
    return 4294954511;
  v9 = DerivedStorage;
  v10 = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = a2;
  context[2] = a3;
  v15 = a4;
  dispatch_sync_f(*(dispatch_queue_t *)(v10 + 128), context, (dispatch_function_t)surrogatePlaybackItem_setTrackPropertyInCacheInternal);
  if (!BYTE8(v15))
    return 0;
  v11 = *((_QWORD *)v9 + 6);
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 112);
  if (v12)
    return v12(v11, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t surrogatePlaybackItem_CopyFormatReader(const void *a1, CFTypeRef *a2)
{
  _BYTE *DerivedStorage;
  _BYTE *v5;
  CFTypeRef v6;
  uint64_t (*v7)(CFTypeRef, CFTypeRef *);
  uint64_t v8;
  uint64_t v9;
  CFAllocatorRef v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v13;
  uint64_t v14;
  CFAllocatorRef v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  v20 = 0;
  cf = 0;
  v19 = 0;
  if (*DerivedStorage)
  {
    v8 = 4294954511;
    goto LABEL_15;
  }
  if (!a2)
  {
    v8 = 4294954516;
    goto LABEL_15;
  }
  v5 = DerivedStorage;
  surrogatePlaybackItem_copyRealItemAndRealPlayer((uint64_t)a1, &cf, 0);
  v6 = cf;
  if (cf)
  {
    v7 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
    if (v7)
      v8 = v7(v6, &v20);
    else
      v8 = 4294954514;
    goto LABEL_14;
  }
  v9 = *((_QWORD *)v5 + 5);
  v10 = CFGetAllocator(a1);
  CMBaseObject = FigAssetGetCMBaseObject(v9);
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
  if (!v12)
    goto LABEL_22;
  v13 = v12(CMBaseObject, CFSTR("assetProperty_AssetType"), v10, &v19);
  if ((_DWORD)v13)
    goto LABEL_26;
  if (!FigCFEqual())
  {
    v14 = *((_QWORD *)v5 + 5);
    v15 = CFGetAllocator(a1);
    v16 = FigAssetGetCMBaseObject(v14);
    v17 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
    if (v17)
    {
      v13 = v17(v16, CFSTR("assetProperty_FormatReader"), v15, &v20);
      if (!(_DWORD)v13)
        goto LABEL_11;
LABEL_26:
      v8 = v13;
      goto LABEL_15;
    }
LABEL_22:
    v8 = 4294954514;
    goto LABEL_15;
  }
LABEL_11:
  if (v20)
  {
    v8 = 0;
LABEL_14:
    *a2 = v20;
    v20 = 0;
    goto LABEL_15;
  }
  v8 = 4294954513;
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);
  return v8;
}

uint64_t surrogatePlaybackItem_SeekToDateWithID(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __CFDictionary *v10;
  __CFDictionary *Mutable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, const void *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  const __CFString *v19;
  __CFDictionary *v20;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  if (!a2)
    return 4294954516;
  v7 = DerivedStorage;
  v8 = *(_QWORD *)(DerivedStorage + 48);
  v9 = CMBaseObjectGetDerivedStorage();
  v18 = a1;
  v19 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(v9 + 128), &v18, (dispatch_function_t)surrogatePlayerItem_cancelPendingPrerollInternal);
  v10 = 0;
  if (v8)
    goto LABEL_8;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v10 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("Date"), a2);
  if ((_DWORD)a3 && (v12 = FigCFDictionarySetInt32(), (_DWORD)v12))
  {
    v16 = v12;
  }
  else
  {
    v13 = CMBaseObjectGetDerivedStorage();
    v18 = a1;
    v19 = CFSTR("SeekDate");
    v20 = v10;
    v21 = 0;
    dispatch_sync_f(*(dispatch_queue_t *)(v13 + 128), &v18, (dispatch_function_t)surrogatePlaybackItem_setPropertyInCacheInternal);
    if ((_BYTE)v21)
    {
LABEL_8:
      v14 = *(_QWORD *)(v7 + 48);
      v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
      if (v15)
      {
        v16 = v15(v14, a2, a3);
        if (!v10)
          return v16;
      }
      else
      {
        v16 = 4294954514;
        if (!v10)
          return v16;
      }
      goto LABEL_14;
    }
    v16 = 0;
  }
LABEL_14:
  CFRelease(v10);
  return v16;
}

uint64_t surrogatePlaybackItem_SetCurrentTimeWithRangeAndID(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  CFMutableDictionaryRef Mutable;
  uint64_t (*v10)(uint64_t, __int128 *, CFMutableDictionaryRef);
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  v15 = *a4;
  v16 = *((_QWORD *)a4 + 2);
  FigCFDictionarySetCMTime();
  v15 = *a5;
  v16 = *((_QWORD *)a5 + 2);
  FigCFDictionarySetCMTime();
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  v10 = *(uint64_t (**)(uint64_t, __int128 *, CFMutableDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 176);
  if (!v10)
  {
    v11 = 4294954514;
    if (!Mutable)
      return v11;
    goto LABEL_3;
  }
  v15 = v13;
  v16 = v14;
  v11 = v10(a1, &v15, Mutable);
  if (Mutable)
LABEL_3:
    CFRelease(Mutable);
  return v11;
}

uint64_t surrogatePlaybackItem_CopyAsset(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  CFTypeRef v5;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
    v5 = CFRetain(v4);
  else
    v5 = 0;
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t surrogatePlaybackItem_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, CFTypeRef, CFTypeRef *);
  uint64_t v10;
  CFTypeRef v11;
  CFTypeRef cf;
  CFTypeRef v14;
  CFTypeRef v15;
  BOOL v16;
  CFTypeRef v17;

  v17 = 0;
  v16 = 0;
  v14 = 0;
  v15 = 0;
  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
  {
    v10 = 4294954511;
    goto LABEL_14;
  }
  v6 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)surrogatePlaybackItem_handleSetProperty, &v16, &v17, &v15);
  if ((_DWORD)v6)
    goto LABEL_10;
  if (v16 || (surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &cf, 0), (v7 = cf) == 0))
  {
    v11 = 0;
LABEL_9:
    v6 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v15, v11, a3);
LABEL_10:
    v10 = v6;
    goto LABEL_12;
  }
  v8 = v17;
  v9 = *(uint64_t (**)(CFTypeRef, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (v9)
  {
    v10 = v9(v7, v8, &v14);
    if ((_DWORD)v10)
      goto LABEL_12;
    v11 = v14;
    goto LABEL_9;
  }
  v10 = 4294954514;
LABEL_12:
  if (cf)
    CFRelease(cf);
LABEL_14:
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v17)
    CFRelease(v17);
  return v10;
}

uint64_t surrogatePlaybackItem_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef v8;
  uint64_t (*v9)(CFTypeRef, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  CFTypeRef cf;

  cf = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  if (!a4)
    return 4294954516;
  surrogatePlaybackItem_copyRealItemAndRealPlayer(a1, &cf, 0);
  v8 = cf;
  if (!cf)
    return 4294954513;
  v9 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v9)
    v10 = v9(v8, a2, a3, a4);
  else
    v10 = 4294954514;
  if (cf)
    CFRelease(cf);
  return v10;
}

uint64_t surrogatePlaybackItem_SetCurrentTimeWithOptions(unint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFMutableDictionaryRef Mutable;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void (*v14)(uint64_t, __int128 *, uint64_t);
  __int128 v16;
  __CFDictionary *v17;
  __int128 context;
  CFMutableDictionaryRef v19;
  uint64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  v7 = DerivedStorage;
  v8 = *(_QWORD *)(DerivedStorage + 48);
  v9 = CMBaseObjectGetDerivedStorage();
  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(v9 + 128), &context, (dispatch_function_t)surrogatePlayerItem_cancelPendingPrerollInternal);
  if (v8)
    goto LABEL_6;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  context = *a2;
  v19 = (CFMutableDictionaryRef)*((_QWORD *)a2 + 2);
  FigCFDictionarySetCMTime();
  FigCFDictionarySetValue();
  v11 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)&context = a1;
  *((_QWORD *)&context + 1) = CFSTR("CurrentTime");
  v19 = Mutable;
  v20 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(v11 + 128), &context, (dispatch_function_t)surrogatePlaybackItem_setPropertyInCacheInternal);
  v12 = v20;
  if (Mutable)
    CFRelease(Mutable);
  if (v12)
  {
LABEL_6:
    v13 = *(_QWORD *)(v7 + 48);
    v16 = *a2;
    v17 = (__CFDictionary *)*((_QWORD *)a2 + 2);
    v14 = *(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
    if (v14)
    {
      context = v16;
      v19 = v17;
      v14(v13, &context, a3);
    }
  }
  return 0;
}

const void *surrogatePlaybackItem_copyPropertyFromCacheInternal(uint64_t a1)
{
  const void *result;
  const void *v3;
  int v4;

  result = (const void *)CMBaseObjectGetDerivedStorage();
  if (*((_BYTE *)result + 1) || *(_BYTE *)result)
    goto LABEL_9;
  v3 = (const void *)*((_QWORD *)result + 6);
  if (!v3)
  {
    result = CFDictionaryGetValue(*((CFDictionaryRef *)result + 14), *(const void **)(a1 + 8));
    if (!result)
    {
      v4 = -12784;
LABEL_10:
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      goto LABEL_11;
    }
    if (result != (const void *)*MEMORY[0x1E0C9B0D0])
    {
      result = CFRetain(result);
      v4 = 0;
      *(_QWORD *)(a1 + 16) = result;
      *(_QWORD *)(a1 + 24) = 0;
      goto LABEL_11;
    }
LABEL_9:
    v4 = 0;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v3;
  result = CFRetain(v3);
  v4 = 0;
LABEL_11:
  *(_DWORD *)(a1 + 32) = v4;
  return result;
}

void surrogatePlaybackItem_MakeReadyForInspectionInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;
  __CFArray *Mutable;
  const __CFAllocator *v8;
  const __CFArray *v9;
  void *v10;
  int v11;
  CFRange v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 48);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    *(_QWORD *)(a1 + 16) = v3;
  }
  else
  {
    v6 = DerivedStorage;
    Mutable = *(__CFArray **)(DerivedStorage + 96);
    if (Mutable
      || (v8 = CFGetAllocator(*(CFTypeRef *)a1),
          Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]),
          (*(_QWORD *)(v6 + 96) = Mutable) != 0))
    {
      v9 = *(const __CFArray **)(a1 + 8);
      if (v9)
      {
        v12.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 8));
        v12.location = 0;
        CFArrayAppendArray(Mutable, v9, v12);
      }
    }
    v10 = (void *)surrogatePlaybackItem_copyOwningPlayer();
    v4 = v10;
    if (v10)
      v11 = surrogatePlayer_deferInitiateLoadingOfItemAssetType(v10, *(const void **)a1, 0);
    else
      v11 = FigSignalErrorAt();
    v5 = v11;
  }
  _deferReleaseToSafeQ(v4);
  *(_DWORD *)(a1 + 24) = v5;
}

void surrogatePlaybackItem_setTrackPropertyInCacheInternal(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *Value;
  void *Mutable;
  const void *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 1))
  {
    v3 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      if (*(_QWORD *)(DerivedStorage + 48))
      {
        *(_BYTE *)(a1 + 32) = 1;
      }
      else
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 120), (const void *)*(int *)(a1 + 8));
        if (!Value || (Mutable = (void *)CFRetain(Value)) == 0)
        {
          Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 120), (const void *)*(int *)(a1 + 8), Mutable);
        }
        v6 = *(const void **)(a1 + 16);
        v7 = *(const void **)(a1 + 24);
        if (v7)
          CFDictionarySetValue((CFMutableDictionaryRef)Mutable, v6, v7);
        else
          CFDictionaryRemoveValue((CFMutableDictionaryRef)Mutable, v6);
        *(_BYTE *)(a1 + 32) = 0;
        if (Mutable)
          CFRelease(Mutable);
      }
    }
  }
}

uint64_t surrogatePlayer_removeItemFromValidItems(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  if (surrogatePlayer_getIndexOfItem(DerivedStorage, *(const void **)(a1 + 8)) == -1)
  {
    FigCFWeakReferenceTableRemoveValue();
    result = 0;
    *(_QWORD *)(v3 + 88) = 0;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

void surrogatePlayer_receiveOwnershipOfItem(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, const __CFString *, int *, _QWORD, _QWORD);
  int v6;
  int v7;
  const void *v8;
  CFTypeRef *v9;
  int Key;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  const void *v17;
  _QWORD context[3];
  int v19;
  const void *v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  v19 = 0;
  v4 = *(_QWORD *)(v3 + 40);
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, int *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 8);
  if (!v5)
  {
    Key = -12782;
    goto LABEL_28;
  }
  v6 = v5(v4, CFSTR("assetProperty_AssetType"), &v19, 0, 0);
  if (v6)
  {
    Key = v6;
    goto LABEL_28;
  }
  if (v19 != 2)
  {
    v8 = 0;
    goto LABEL_9;
  }
  v7 = surrogatePlaybackItem_copyAssetType(*(_QWORD *)(a1 + 8), &v20);
  v8 = v20;
  if (!v7)
  {
    if (FigCFEqual())
    {
      v9 = (CFTypeRef *)(DerivedStorage + 24);
      goto LABEL_12;
    }
    if (FigCFEqual())
    {
      v9 = (CFTypeRef *)(DerivedStorage + 32);
LABEL_12:
      v11 = *v9;
      if (*v9)
        CFRetain(*v9);
LABEL_14:
      v12 = *(_QWORD *)(a1 + 8);
      context[0] = *(_QWORD *)a1;
      context[1] = v11;
      context[2] = v12;
      MEMORY[0x19402EEEC](*(_QWORD *)(v3 + 136));
      dispatch_sync_f(*(dispatch_queue_t *)(v3 + 128), context, (dispatch_function_t)surrogatePlaybackItem_updateOwningPlayer);
      MEMORY[0x19402EF04](*(_QWORD *)(v3 + 136));
      v13 = *(_QWORD *)(v3 + 56);
      if (!v13)
        goto LABEL_23;
      v14 = *(_QWORD *)(v3 + 48);
      if (!v14)
        goto LABEL_23;
      v15 = *(_QWORD *)(v3 + 64);
      if (!v15)
        goto LABEL_23;
      v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
      if (v16)
        Key = v16(v13, v14, v15);
      else
        Key = -12782;
      v17 = *(const void **)(v3 + 64);
      if (v17)
      {
        CFRelease(v17);
        *(_QWORD *)(v3 + 64) = 0;
      }
      if (!Key)
LABEL_23:
        Key = FigCFWeakReferenceTableAddValueAndGetKey();
      if (!v8)
        goto LABEL_26;
      goto LABEL_25;
    }
LABEL_9:
    v11 = 0;
    goto LABEL_14;
  }
  Key = v7;
  v11 = 0;
  if (v20)
LABEL_25:
    CFRelease(v8);
LABEL_26:
  if (v11)
    CFRelease(v11);
LABEL_28:
  *(_DWORD *)(a1 + 16) = Key;
}

CFTypeRef surrogatePlaybackItem_updateOwningPlayer(uint64_t a1)
{
  uint64_t DerivedStorage;
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  CFTypeRef result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = v3[1];
  if (v4)
    dispatch_release(v4);
  v5 = *(NSObject **)(DerivedStorage + 16);
  v3[1] = v5;
  dispatch_retain(v5);
  v6 = v3[2];
  if (v6)
    dispatch_release(v6);
  v7 = *(NSObject **)(DerivedStorage + 64);
  v3[2] = v7;
  dispatch_retain(v7);
  v8 = v3[7];
  result = *(CFTypeRef *)(a1 + 8);
  v3[7] = result;
  v3[8] = v8;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t surrogatePlayer_SetConnectionActive(uint64_t a1, uint64_t a2)
{
  __CFDictionary *Mutable;
  __CFDictionary *v5;
  const void **v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  _QWORD context[3];
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    v6 = (const void **)MEMORY[0x1E0C9AE50];
    if (!(_DWORD)a2)
      v6 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("Active"), *v6);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    context[0] = a1;
    context[1] = CFSTR("ConnectionActive");
    v18 = 0;
    v19 = 0;
    context[2] = v5;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
    v9 = v18;
    v8 = v19;
    if (v18)
    {
      v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
      if (v10 && *(_QWORD *)(v10 + 24))
      {
        v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
        if (v11)
        {
          v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 24);
          if (v12)
          {
            v9 = v12(v9, a2);
            if (!v8)
              goto LABEL_20;
LABEL_14:
            v13 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
            if (v13)
            {
              if (*(_QWORD *)(v13 + 24))
              {
                v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
                if (v14)
                {
                  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 24);
                  if (v15)
                    v15(v8, a2);
                }
              }
            }
            goto LABEL_20;
          }
        }
        v9 = 4294954514;
        if (v8)
          goto LABEL_14;
LABEL_20:
        CFRelease(v5);
        return v9;
      }
      v9 = 0;
    }
    if (v8)
      goto LABEL_14;
    goto LABEL_20;
  }
  return FigSignalErrorAt();
}

uint64_t surrogatePlayer_DuckVolume(uint64_t a1, uint64_t a2, float a3, float a4)
{
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  const void **v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t DerivedStorage;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, float, float);
  float v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, float, float);
  CFNumberRef v23;
  int v25;
  float valuePtr;
  _QWORD context[3];
  uint64_t v28;
  uint64_t v29;

  valuePtr = a3;
  v25 = 0;
  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v9 = Mutable;
    v10 = (const void **)MEMORY[0x1E0C9AE50];
    if (!(_DWORD)a2)
      v10 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(Mutable, CFSTR("DuckDown"), *v10);
    v11 = CFNumberCreate(v7, kCFNumberFloat32Type, &valuePtr);
    if (v11)
    {
      v12 = v11;
      CFDictionarySetValue(v9, CFSTR("DuckVolume"), v11);
      v13 = CFNumberCreate(v7, kCFNumberFloat32Type, &v25);
      if (v13)
      {
        CFDictionarySetValue(v9, CFSTR("RampDuration"), v13);
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        context[0] = a1;
        context[1] = CFSTR("DuckVolume");
        v28 = 0;
        v29 = 0;
        context[2] = v9;
        dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
        v15 = v28;
        v16 = v29;
        if (v28)
        {
          v17 = valuePtr;
          v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
          if (v18 && (v19 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v18 + 8)) != 0)
            v15 = v19(v15, a2, v17, a4);
          else
            v15 = 4294954514;
        }
        if (v16)
        {
          v20 = valuePtr;
          v21 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
          if (v21)
          {
            v22 = *(void (**)(uint64_t, uint64_t, float, float))(v21 + 8);
            if (v22)
              v22(v16, a2, v20, a4);
          }
        }
      }
      else
      {
        v15 = FigSignalErrorAt();
      }
      CFRelease(v9);
      CFRelease(v12);
      if (!v13)
        return v15;
      v23 = v13;
    }
    else
    {
      v15 = FigSignalErrorAt();
      v23 = v9;
    }
    CFRelease(v23);
    return v15;
  }
  return FigSignalErrorAt();
}

uint64_t surrogatePlayer_SilentMute(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  _QWORD context[3];
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)CMBaseObjectGetDerivedStorage())
    return 4294954511;
  v4 = (uint64_t *)MEMORY[0x1E0C9AE50];
  if (!(_DWORD)a2)
    v4 = (uint64_t *)MEMORY[0x1E0C9AE40];
  v5 = *v4;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  context[0] = a1;
  context[1] = CFSTR("SilentMute");
  v15 = 0;
  v16 = 0;
  context[2] = v5;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 56), context, (dispatch_function_t)surrogatePlayer_setPropertyInCacheInternal);
  v8 = v15;
  v7 = v16;
  if (v15)
  {
    v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
    if (v9 && (v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16)) != 0)
      v8 = v10(v8, a2);
    else
      v8 = 4294954514;
  }
  if (v7)
  {
    v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
    if (v11)
    {
      v12 = *(void (**)(uint64_t, uint64_t))(v11 + 16);
      if (v12)
        v12(v7, a2);
    }
  }
  return v8;
}

uint64_t FigSampleBufferRenderSynchronizerCentralClientAccessProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigSampleBufferRenderSynchronizerCentralClientAccessProtocolGetProtocolID_sRegisterFigSampleBufferRenderSynchronizerCentralClientAccessProtocolTypeOnce, registerFigSampleBufferRenderSynchronizerCentralClientAccessProtocolType);
  return sFigSampleBufferRenderSynchronizerCentralClientAccessProtocolID;
}

uint64_t registerFigSampleBufferRenderSynchronizerCentralClientAccessProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigCDSCaptionProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSCaptionProtocolGetProtocolID_sRegisterFigCDSCaptionProtocolTypeOnce, RegisterFigCDSCaptionProtocolType);
  return sFigCDSCaptionProtocolID;
}

uint64_t RegisterFigCDSCaptionProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigMetricInitialLikelyToKeepUpEventDeserializeAndCopy(void *a1, _QWORD *a2)
{
  const __CFAllocator *AllocatorForMedia;
  const CFArrayCallBacks *v5;
  __CFArray *Mutable;
  const __CFAllocator *v7;
  __CFArray *v8;
  const __CFAllocator *v9;
  CFMutableArrayRef v10;
  __CFArray *v11;
  double v12;
  uint64_t CMTime;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  size_t v18;
  size_t v19;
  size_t v20;
  const __CFAllocator *v21;
  uint64_t v22;
  void *value[2];
  uint64_t v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef cf;
  __int128 v30;
  uint64_t v31;

  v30 = *MEMORY[0x1E0CA2E18];
  v31 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v28 = 0;
  cf = 0;
  v26 = 0;
  v27 = 0;
  if (a1 && a2)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v5 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v8 = CFArrayCreateMutable(v7, 0, v5);
    v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
    v10 = CFArrayCreateMutable(v9, 0, v5);
    v11 = v10;
    if (Mutable && v8 && v10)
    {
      v12 = xpc_dictionary_get_double(a1, "TimeTaken");
      CMTime = FigXPCMessageGetCMTime();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFDate();
        if (!(_DWORD)CMTime)
        {
          CMTime = FigXPCMessageCopyCFString();
          if (!(_DWORD)CMTime)
          {
            CMTime = FigXPCMessageCopyCFArray();
            if (!(_DWORD)CMTime)
            {
              v14 = xpc_dictionary_get_value(a1, "Variant");
              CMTime = FigAlternateCreateWithXPCObject(v14, 0, &v27);
              if (!(_DWORD)CMTime)
              {
                v15 = xpc_dictionary_get_value(a1, "MediaPlaylistRequestEvents");
                v16 = xpc_dictionary_get_value(a1, "MediaSegmentRequestEvents");
                v17 = xpc_dictionary_get_value(a1, "ContentKeyRequestEvents");
                if (FigXPCArrayGetCount())
                {
                  v18 = 0;
                  while (1)
                  {
                    value[0] = 0;
                    xpc_array_get_value(v15, v18);
                    CMTime = FigMetricEventDeserializeEvent();
                    if ((_DWORD)CMTime)
                      break;
                    CFArrayAppendValue(Mutable, value[0]);
                    if (FigXPCArrayGetCount() <= ++v18)
                      goto LABEL_15;
                  }
                }
                else
                {
LABEL_15:
                  if (FigXPCArrayGetCount())
                  {
                    v19 = 0;
                    while (1)
                    {
                      value[0] = 0;
                      xpc_array_get_value(v16, v19);
                      CMTime = FigMetricEventDeserializeEvent();
                      if ((_DWORD)CMTime)
                        break;
                      CFArrayAppendValue(v8, value[0]);
                      if (FigXPCArrayGetCount() <= ++v19)
                        goto LABEL_19;
                    }
                  }
                  else
                  {
LABEL_19:
                    if (FigXPCArrayGetCount())
                    {
                      v20 = 0;
                      while (1)
                      {
                        value[0] = 0;
                        xpc_array_get_value(v17, v20);
                        CMTime = FigMetricEventDeserializeEvent();
                        if ((_DWORD)CMTime)
                          break;
                        CFArrayAppendValue(v11, value[0]);
                        if (FigXPCArrayGetCount() <= ++v20)
                          goto LABEL_23;
                      }
                    }
                    else
                    {
LABEL_23:
                      v21 = (const __CFAllocator *)FigGetAllocatorForMedia();
                      *(_OWORD *)value = v30;
                      v25 = v31;
                      CMTime = FigMetricItemInitialLikelyToKeepUpEventCreate(v21, (__int128 *)value, cf, v28, v27, v26, Mutable, v8, v12, v11, a2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      CMTime = FigSignalErrorAt();
    }
    v22 = CMTime;
  }
  else
  {
    v22 = FigSignalErrorAt();
    Mutable = 0;
    v8 = 0;
    v11 = 0;
  }
  if (cf)
    CFRelease(cf);
  if (v28)
    CFRelease(v28);
  if (v27)
    CFRelease(v27);
  if (v26)
    CFRelease(v26);
  if (Mutable)
    CFRelease(Mutable);
  if (v8)
    CFRelease(v8);
  if (v11)
    CFRelease(v11);
  return v22;
}

uint64_t FigMetricItemInitialLikelyToKeepUpEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, double a9, const void *a10, _QWORD *a11)
{
  uint64_t v20;
  uint64_t DerivedStorage;
  uint64_t v22;
  void *v23;
  CFAbsoluteTime Current;
  __int128 v25;
  CFTypeRef v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;

  if (!a11)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v20 = CMDerivedObjectCreate();
  if (!(_DWORD)v20)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v22 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 104) = v22;
    if (v22)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 4;
      if (a3)
      {
        v23 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v23 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v23;
      v25 = *a2;
      *(_QWORD *)(DerivedStorage + 40) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 24) = v25;
      if (a4)
        v26 = CFRetain(a4);
      else
        v26 = 0;
      *(_QWORD *)(DerivedStorage + 48) = v26;
      if (a5)
        v27 = CFRetain(a5);
      else
        v27 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v27;
      *(double *)(DerivedStorage + 64) = a9;
      if (a6)
        v28 = CFRetain(a6);
      else
        v28 = 0;
      *(_QWORD *)(DerivedStorage + 72) = v28;
      if (a7)
        v29 = CFRetain(a7);
      else
        v29 = 0;
      *(_QWORD *)(DerivedStorage + 80) = v29;
      if (a8)
        v30 = CFRetain(a8);
      else
        v30 = 0;
      *(_QWORD *)(DerivedStorage + 88) = v30;
      if (a10)
        v31 = CFRetain(a10);
      else
        v31 = 0;
      *(_QWORD *)(DerivedStorage + 96) = v31;
      v20 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v20)
        *a11 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v20;
}

uint64_t FigMetricLikelyToKeepUpEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  double v4;
  uint64_t CMTime;
  xpc_object_t value;
  uint64_t AllocatorForMedia;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef cf;
  __int128 v16;
  uint64_t v17;

  v16 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v14 = 0;
  cf = 0;
  v12 = 0;
  v13 = 0;
  if (a1 && a2)
  {
    v4 = xpc_dictionary_get_double(a1, "TimeTaken");
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageCopyCFDate();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFString();
        if (!(_DWORD)CMTime)
        {
          CMTime = FigXPCMessageCopyCFArray();
          if (!(_DWORD)CMTime)
          {
            value = xpc_dictionary_get_value(a1, "Variant");
            CMTime = FigAlternateCreateWithXPCObject(value, 0, &v13);
            if (!(_DWORD)CMTime)
            {
              AllocatorForMedia = FigGetAllocatorForMedia();
              v10 = v16;
              v11 = v17;
              CMTime = FigMetricItemLikelyToKeepUpEventCreate(AllocatorForMedia, &v10, cf, v14, v13, v12, a2, v4);
            }
          }
        }
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v8 = CMTime;
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  return v8;
}

uint64_t FigMetricItemLikelyToKeepUpEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, const void *a6, _QWORD *a7, double a8)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  void *v19;
  CFAbsoluteTime Current;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;

  if (!a7)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 104) = v18;
    if (v18)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 5;
      if (a3)
      {
        v19 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v19 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v19;
      v21 = *a2;
      *(_QWORD *)(DerivedStorage + 40) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 24) = v21;
      if (a4)
        v22 = CFRetain(a4);
      else
        v22 = 0;
      *(_QWORD *)(DerivedStorage + 48) = v22;
      if (a5)
        v23 = CFRetain(a5);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v23;
      *(double *)(DerivedStorage + 64) = a8;
      if (a6)
        v24 = CFRetain(a6);
      else
        v24 = 0;
      *(_QWORD *)(DerivedStorage + 72) = v24;
      v16 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v16)
        *a7 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t FigMetricItemInternalInitialLikelyToKeepUpEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, const void *a6, _QWORD *a7, double a8)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  void *v19;
  CFAbsoluteTime Current;
  __int128 v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;

  if (!a7)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v16 = CMDerivedObjectCreate();
  if (!(_DWORD)v16)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v18 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 104) = v18;
    if (v18)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 3;
      if (a3)
      {
        v19 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v19 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v19;
      v21 = *a2;
      *(_QWORD *)(DerivedStorage + 40) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 24) = v21;
      if (a4)
        v22 = CFRetain(a4);
      else
        v22 = 0;
      *(_QWORD *)(DerivedStorage + 48) = v22;
      if (a5)
        v23 = CFRetain(a5);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v23;
      *(double *)(DerivedStorage + 64) = a8;
      if (a6)
        v24 = CFRetain(a6);
      else
        v24 = 0;
      *(_QWORD *)(DerivedStorage + 72) = v24;
      v16 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v16)
        *a7 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v16;
}

uint64_t FigMetricInternalInitialLikelyToKeepUpEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  double v4;
  uint64_t CMTime;
  xpc_object_t value;
  uint64_t AllocatorForMedia;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef cf;
  __int128 v16;
  uint64_t v17;

  v16 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v14 = 0;
  cf = 0;
  v12 = 0;
  v13 = 0;
  if (a1 && a2)
  {
    v4 = xpc_dictionary_get_double(a1, "TimeTaken");
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageCopyCFDate();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFString();
        if (!(_DWORD)CMTime)
        {
          CMTime = FigXPCMessageCopyCFArray();
          if (!(_DWORD)CMTime)
          {
            value = xpc_dictionary_get_value(a1, "Variant");
            CMTime = FigAlternateCreateWithXPCObject(value, 0, &v13);
            if (!(_DWORD)CMTime)
            {
              AllocatorForMedia = FigGetAllocatorForMedia();
              v10 = v16;
              v11 = v17;
              CMTime = FigMetricItemInternalInitialLikelyToKeepUpEventCreate(AllocatorForMedia, &v10, cf, v14, v13, v12, a2, v4);
            }
          }
        }
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v8 = CMTime;
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  return v8;
}

uint64_t meiltku_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[7];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[9];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[10];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[11];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[12];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)DerivedStorage[2];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)DerivedStorage[6];
  if (v7)
    CFRelease(v7);
  return FigSimpleMutexDestroy();
}

CFStringRef meiltku_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMetricItemLikelyToKeepUpEvent %p]"), a1);
}

void meiltku_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t meiltku_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 13));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 13));
  return v1;
}

uint64_t meiltku_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meiltku_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meiltku_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
  return v2;
}

uint64_t meiltku_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 48);
    *(_QWORD *)(DerivedStorage + 48) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
  return v5;
}

void meiltku_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 40);
  JUMPOUT(0x19402EF04);
}

uint64_t meiltku_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 104));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 24) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 104));
  return v4;
}

uint64_t meltku_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  int64_t v8;
  void (*v9)(__int128 *__return_ptr, uint64_t);
  void (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  const void *v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  double v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  xpc_object_t value;

  value = 0;
  if (!a1 || !a2)
  {
    v6 = FigSignalErrorAt();
LABEL_32:
    v17 = v6;
    goto LABEL_30;
  }
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 8);
  if (v4)
    v5 = v4(a1);
  else
    v5 = 0;
  v6 = FigAlternateCopyAsXPCObject(v5, &value);
  if ((_DWORD)v6)
    goto LABEL_32;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  v8 = v7 ? v7(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v8);
  v9 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v9)
  {
    v9(&v19, a1);
  }
  else
  {
    v19 = *MEMORY[0x1E0CA2E18];
    v20 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v6 = FigXPCMessageSetCMTime();
  if ((_DWORD)v6)
    goto LABEL_32;
  v10 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v10)
    v10(a1);
  v6 = FigXPCMessageSetCFDate();
  if ((_DWORD)v6)
    goto LABEL_32;
  v11 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v11)
    v12 = (const void *)v11(a1);
  else
    v12 = 0;
  v13 = FigXPCMessageSetCFString();
  if ((_DWORD)v13)
  {
    v17 = v13;
    if (!v12)
      goto LABEL_30;
    goto LABEL_29;
  }
  v14 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 48);
  if (v14)
    v14(a1);
  else
    v15 = 0.0;
  xpc_dictionary_set_double(a2, "TimeTaken", v15);
  v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 16);
  if (v16)
    v16(a1);
  v17 = FigXPCMessageSetCFArray();
  if (!(_DWORD)v17)
    xpc_dictionary_set_value(a2, "Variant", value);
  if (v12)
LABEL_29:
    CFRelease(v12);
LABEL_30:
  FigXPCRelease();
  return v17;
}

uint64_t meiltku_getVariant()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t meiltku_getLoadedTimeRanges()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72);
}

double meiltku_getTimeTaken()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t meiltku_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  const void *v5;
  const __CFArray *v6;
  uint64_t (*v7)(uint64_t);
  const void *v8;
  const __CFArray *v9;
  uint64_t (*v10)(uint64_t);
  const void *v11;
  const __CFArray *v12;
  xpc_object_t empty;
  xpc_object_t v14;
  xpc_object_t v15;
  void *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  CFIndex v20;
  CFIndex i;
  xpc_object_t v22;
  uint64_t ValueAtIndex;
  uint64_t (*v24)(uint64_t, xpc_object_t);
  CFIndex v25;
  CFIndex j;
  xpc_object_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, xpc_object_t);
  CFIndex v30;
  CFIndex k;
  xpc_object_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, xpc_object_t);
  uint64_t v35;
  uint64_t (*v37)(uint64_t);
  int64_t v38;
  void (*v39)(__int128 *__return_ptr, uint64_t);
  void (*v40)(uint64_t);
  uint64_t (*v41)(uint64_t);
  const void *v42;
  uint64_t v43;
  void (*v44)(uint64_t);
  double v45;
  void (*v46)(uint64_t);
  xpc_object_t xdict;
  __int128 v48;
  uint64_t v49;
  xpc_object_t value;

  value = 0;
  if (!a1 || !a2)
  {
    v35 = FigSignalErrorAt();
    FigXPCRelease();
    goto LABEL_53;
  }
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 24);
  if (v4 && (v5 = (const void *)v4(a1)) != 0)
    v6 = (const __CFArray *)CFRetain(v5);
  else
    v6 = 0;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 32);
  if (v7 && (v8 = (const void *)v7(a1)) != 0)
    v9 = (const __CFArray *)CFRetain(v8);
  else
    v9 = 0;
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 40);
  if (v10 && (v11 = (const void *)v10(a1)) != 0)
    v12 = (const __CFArray *)CFRetain(v11);
  else
    v12 = 0;
  empty = xpc_array_create_empty();
  v14 = xpc_array_create_empty();
  v15 = xpc_array_create_empty();
  v16 = v15;
  if (empty && v14 && v15)
  {
    v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 8);
    if (v17)
      v18 = v17(a1);
    else
      v18 = 0;
    v19 = FigAlternateCopyAsXPCObject(v18, &value);
    if ((_DWORD)v19)
      goto LABEL_79;
    xdict = a2;
    v20 = 0;
    if (!v6)
      goto LABEL_24;
LABEL_23:
    for (i = CFArrayGetCount(v6); v20 < i; i = 0)
    {
      v22 = xpc_dictionary_create_empty();
      ValueAtIndex = FigCFArrayGetValueAtIndex();
      v24 = *(uint64_t (**)(uint64_t, xpc_object_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (!v24)
      {
LABEL_46:
        v35 = 4294954514;
        goto LABEL_47;
      }
      v19 = v24(ValueAtIndex, v22);
      if ((_DWORD)v19)
        goto LABEL_79;
      xpc_array_append_value(empty, v22);
      FigXPCRelease();
      ++v20;
      if (v6)
        goto LABEL_23;
LABEL_24:
      ;
    }
    v25 = 0;
    if (!v9)
      goto LABEL_32;
LABEL_31:
    for (j = CFArrayGetCount(v9); v25 < j; j = 0)
    {
      v27 = xpc_dictionary_create_empty();
      v28 = FigCFArrayGetValueAtIndex();
      v29 = *(uint64_t (**)(uint64_t, xpc_object_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (!v29)
        goto LABEL_46;
      v19 = v29(v28, v27);
      if ((_DWORD)v19)
        goto LABEL_79;
      xpc_array_append_value(v14, v27);
      FigXPCRelease();
      ++v25;
      if (v9)
        goto LABEL_31;
LABEL_32:
      ;
    }
    v30 = 0;
    if (!v12)
      goto LABEL_40;
LABEL_39:
    for (k = CFArrayGetCount(v12); v30 < k; k = 0)
    {
      v32 = xpc_dictionary_create_empty();
      v33 = FigCFArrayGetValueAtIndex();
      v34 = *(uint64_t (**)(uint64_t, xpc_object_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (!v34)
        goto LABEL_46;
      v19 = v34(v33, v32);
      if ((_DWORD)v19)
        goto LABEL_79;
      xpc_array_append_value(v16, v32);
      FigXPCRelease();
      ++v30;
      if (v12)
        goto LABEL_39;
LABEL_40:
      ;
    }
    v37 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    v38 = v37 ? v37(a1) : -12782;
    xpc_dictionary_set_int64(xdict, "EventID", v38);
    v39 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
    if (v39)
    {
      v39(&v48, a1);
    }
    else
    {
      v48 = *MEMORY[0x1E0CA2E18];
      v49 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    }
    v19 = FigXPCMessageSetCMTime();
    if ((_DWORD)v19)
      goto LABEL_79;
    v40 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v40)
      v40(a1);
    v19 = FigXPCMessageSetCFDate();
    if ((_DWORD)v19)
    {
LABEL_79:
      v35 = v19;
    }
    else
    {
      v41 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v41)
        v42 = (const void *)v41(a1);
      else
        v42 = 0;
      v43 = FigXPCMessageSetCFString();
      if ((_DWORD)v43)
      {
        v35 = v43;
        if (!v42)
          goto LABEL_47;
      }
      else
      {
        v44 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 48);
        if (v44)
          v44(a1);
        else
          v45 = 0.0;
        xpc_dictionary_set_double(xdict, "TimeTaken", v45);
        v46 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 40) + 16);
        if (v46)
          v46(a1);
        v35 = FigXPCMessageSetCFArray();
        if (!(_DWORD)v35)
        {
          xpc_dictionary_set_value(xdict, "Variant", value);
          xpc_dictionary_set_value(xdict, "MediaPlaylistRequestEvents", empty);
          xpc_dictionary_set_value(xdict, "MediaSegmentRequestEvents", v14);
          xpc_dictionary_set_value(xdict, "ContentKeyRequestEvents", v16);
        }
        if (!v42)
          goto LABEL_47;
      }
      CFRelease(v42);
    }
  }
  else
  {
    FigSignalErrorAt();
    v35 = 0;
  }
LABEL_47:
  FigXPCRelease();
  if (v6)
    CFRelease(v6);
  if (v9)
    CFRelease(v9);
  if (v12)
    CFRelease(v12);
LABEL_53:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v35;
}

uint64_t meiltku_getPlaylistRequestEvents()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t meiltku_getMediaSegmentRequestEvents()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t meiltku_getContentKeyRequestEvents()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 96);
}

uint64_t FigCLCPCaptionGroupConverterFromSampleBufferCreate(_OWORD *a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  CFTypeRef v8;
  uint64_t v9;

  if (!a1 || !a3)
    return FigSignalErrorAt();
  FigCaptionGroupConverterFromSampleBufferGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
    v9 = v6;
    FigSignalErrorAt();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a2)
      v8 = CFRetain(a2);
    else
      v8 = 0;
    v9 = 0;
    *(_QWORD *)DerivedStorage = v8;
    *(_OWORD *)(DerivedStorage + 72) = *a1;
    *(_BYTE *)(DerivedStorage + 88) = 1;
    *a3 = 0;
  }
  return v9;
}

void clcpcgcfsb_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  clcpcgcfsbCaptionSlicerRelease(*(CFAllocatorRef *)DerivedStorage, *(CFTypeRef **)(DerivedStorage + 120));
  v1 = *(const void **)(DerivedStorage + 152);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 40);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *clcpcgcfsb_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCLCPCaptionGroupConverterFromSampleBufferf %p>"), a1);
  return Mutable;
}

uint64_t clcpcgcfsb_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef *v8;
  CFTypeRef v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!CFEqual(CFSTR("FCGCFS_ShouldGenerateSpacingAttributeSpaceCharacters"), a2))
    return 4294954512;
  v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!*(_BYTE *)(v7 + 88))
    v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v9 = CFRetain(*v8);
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t clcpcgcfsb_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  Boolean Value;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = DerivedStorage;
    if (!CFEqual(CFSTR("FCGCFS_ShouldGenerateSpacingAttributeSpaceCharacters"), a2))
      return 4294954512;
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 == CFBooleanGetTypeID())
      {
        Value = CFBooleanGetValue((CFBooleanRef)a3);
        result = 0;
        *(_BYTE *)(v6 + 88) = Value;
        return result;
      }
    }
  }
  return FigSignalErrorAt();
}

void clcpcgcfsbCaptionSlicerRelease(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  CFTypeRef v4;
  CFTypeRef v5;

  if (ptr)
  {
    if (*ptr)
      CFRelease(*ptr);
    v4 = ptr[1];
    if (v4)
      CFRelease(v4);
    v5 = ptr[2];
    if (v5)
      CFRelease(v5);
    CFAllocatorDeallocate(allocator, ptr);
  }
}

uint64_t clcpcgcfsb_AddSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, opaqueCMSampleBuffer *);
  uint64_t v8;
  const opaqueCMFormatDescription *FormatDescription;
  uint64_t v10;
  uint64_t ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription;
  uint64_t SInt32;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, __CFString *, const void *);
  CMTime v18;
  CMTime lhs;
  CMTime v20;
  unsigned int v21;
  unsigned int v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (!CMSampleBufferGetNumSamples(a2))
      return 0;
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
LABEL_4:
      v7 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v7)
        return 4294954514;
      v8 = v7(v6, a2);
      if (!(_DWORD)v8)
      {
        CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a2);
        CMSampleBufferGetOutputDuration(&v18, a2);
        CMTimeAdd(&v20, &lhs, &v18);
        *(CMTime *)(v5 + 48) = v20;
      }
      return v8;
    }
    FormatDescription = CMSampleBufferGetFormatDescription(a2);
    v10 = *(_QWORD *)v5;
    v20.value = 0;
    v22 = 0;
    v21 = 0;
    ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(FormatDescription, &v22, &v21);
    if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
      goto LABEL_20;
    if (!v21 || !v22 || v22 == 1681272888)
    {
      ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigCEA608CaptionDecoderCreate(v10, FormatDescription, (uint64_t)clcpcgcfsbCaptionDecoderCallback, a1, 0, (CFTypeRef *)&v20);
      if ((_DWORD)ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription)
      {
LABEL_20:
        v8 = ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription;
LABEL_21:
        if (v20.value)
          CFRelease((CFTypeRef)v20.value);
        if ((_DWORD)v8)
          return v8;
        v6 = *(_QWORD *)(v5 + 8);
        goto LABEL_4;
      }
      SInt32 = FigCFNumberCreateSInt32();
      if (SInt32)
      {
        v13 = (const void *)SInt32;
        FigBytePumpGetFigBaseObject(v20.value);
        v15 = v14;
        v16 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
        if (v16)
        {
          v8 = v16(v15, CFSTR("FigCaptionDecoderProperty_CaptionChannel"), v13);
          if (!(_DWORD)v8)
          {
            *(_QWORD *)(v5 + 8) = v20.value;
            v20.value = 0;
          }
        }
        else
        {
          v8 = 4294954514;
        }
        CFRelease(v13);
        goto LABEL_21;
      }
    }
    ClosedCaptionServiceFormatAndServiceIndexFromFormatDescription = FigSignalErrorAt();
    goto LABEL_20;
  }
  return FigSignalErrorAt();
}

uint64_t clcpcgcfsb_Finish()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, CMTime *, _QWORD);
  uint64_t result;
  CMTime v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 8);
  if (!v1)
  {
LABEL_4:
    v4 = *(CMTime *)(DerivedStorage + 48);
    return clcpcgcfsbOutputLastCaptionElements(DerivedStorage, &v4, 0);
  }
  v2 = *(uint64_t (**)(uint64_t, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
  {
    v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
    result = v2(v1, &v4, 0);
    if ((_DWORD)result)
      return result;
    goto LABEL_4;
  }
  return 4294954514;
}

__n128 clcpcgcfsbCaptionDecoderCallback(int a1, const __CFDictionary *a2, CMTime *a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 *DerivedStorage;
  const __CFArray *Value;
  const void *v9;
  __n128 result;
  CMTime v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == 7)
  {
    v12 = v3;
    v13 = v4;
    DerivedStorage = (__n128 *)CMBaseObjectGetDerivedStorage();
    Value = (const __CFArray *)CFDictionaryGetValue(a2, CFSTR("C"));
    v11 = *a3;
    clcpcgcfsbOutputLastCaptionElements((uint64_t)DerivedStorage, &v11, Value);
    v9 = (const void *)DerivedStorage[2].n128_u64[1];
    DerivedStorage[2].n128_u64[1] = (unint64_t)Value;
    if (Value)
      CFRetain(Value);
    if (v9)
      CFRelease(v9);
    result = *(__n128 *)&a3->value;
    DerivedStorage[2].n128_u64[0] = a3->epoch;
    DerivedStorage[1] = result;
  }
  return result;
}

uint64_t clcpcgcfsbOutputLastCaptionElements(uint64_t a1, CMTime *a2, const __CFArray *a3)
{
  uint64_t CaptionMode;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(__CFArray *, CMTimeRange *, _QWORD);
  __CFArray *v11;
  uint64_t v12;
  const __CFAllocator *v14;
  int v15;
  CMTimeEpoch v16;
  const __CFArray **v17;
  _QWORD *v18;
  uint64_t (*v19)(__CFArray *, CMTimeRange *, _QWORD);
  const void *v20;
  const __CFAllocator *v21;
  int v22;
  const __CFArray **v23;
  CFIndex Count;
  const __CFArray *v25;
  const __CFArray *v26;
  CFIndex v27;
  CFIndex v28;
  CFIndex v29;
  const __CFArray *v30;
  const void *ValueAtIndex;
  const __CFDictionary *v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, CMTimeRange *, uint64_t);
  CFIndex v35;
  uint64_t appended;
  const __CFArray *v37;
  CFIndex v38;
  const __CFArray *value;
  uint64_t FirstNewRowNumber;
  CFMutableArrayRef v41;
  CFArrayRef v42;
  const __CFArray *v43;
  CFIndex v44;
  CFIndex v45;
  CFIndex v46;
  const __CFArray *v47;
  const void *v48;
  const __CFDictionary *v49;
  uint64_t v50;
  uint64_t (*v51)(const void *, CMTimeRange *, uint64_t);
  uint64_t v52;
  const void *v53;
  const __CFArray *v54;
  CFIndex v55;
  const __CFArray *v56;
  CFIndex v57;
  CFIndex v58;
  uint64_t v59;
  __CFArray *v60;
  const __CFArray *v61;
  CMTimeValue v62;
  CFArrayRef v63;
  const void *v64;
  char v65;
  __int128 v66;
  CFArrayRef theArray[2];
  CMTimeEpoch epoch;
  int v69;
  CMTime duration;
  CMTimeRange time1;
  CMTimeRange lhs;
  CMTime rhs;
  const __CFArray *v74;
  CFMutableArrayRef v75;
  const __CFArray *v76;
  __CFArray *v77;
  CMTime time2;

  if ((*(_BYTE *)(a1 + 28) & 1) == 0)
    return 0;
  v69 = 0;
  CaptionMode = clcpcgcfsbGetCaptionMode(*(const __CFArray **)(a1 + 40), &v69);
  if ((_DWORD)CaptionMode)
    return CaptionMode;
  switch(v69)
  {
    case 0:
      *(_OWORD *)theArray = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      v77 = 0;
      v7 = (_OWORD *)(a1 + 92);
      if ((*(_BYTE *)(a1 + 104) & 1) == 0)
      {
        *v7 = *(_OWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 108) = *(_QWORD *)(a1 + 32);
      }
      if (a3)
      {
        LODWORD(lhs.start.value) = 0;
        v8 = clcpcgcfsbGetCaptionMode(a3, &lhs);
        if ((_DWORD)v8)
          return v8;
        if (!LODWORD(lhs.start.value))
          return 0;
      }
      v9 = clcpcgcfsbCreateCaptionGroupWithoutSlice(*(const __CFArray **)(a1 + 40), *(unsigned __int8 *)(a1 + 88), *(const __CFAllocator **)a1, &v77);
      if ((_DWORD)v9)
        goto LABEL_138;
      *(_OWORD *)&time1.start.value = *v7;
      time1.start.epoch = *(_QWORD *)(a1 + 108);
      memset(&time2, 0, sizeof(time2));
      *(_OWORD *)&lhs.start.value = *(_OWORD *)theArray;
      lhs.start.epoch = epoch;
      *(_OWORD *)&rhs.value = *v7;
      rhs.epoch = *(_QWORD *)(a1 + 108);
      CMTimeSubtract(&time2, &lhs.start, &rhs);
      v10 = *(uint64_t (**)(__CFArray *, CMTimeRange *, _QWORD))(a1 + 72);
      v11 = v77;
      rhs = time1.start;
      duration = time2;
      CMTimeRangeMake(&lhs, &rhs, &duration);
      v8 = v10(v11, &lhs, *(_QWORD *)(a1 + 80));
      if ((_DWORD)v8)
        goto LABEL_19;
      v12 = MEMORY[0x1E0CA2E18];
      *v7 = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(a1 + 108) = *(_QWORD *)(v12 + 16);
      if (!v11)
        return v8;
      goto LABEL_20;
    case 1:
      duration = *a2;
      v14 = *(const __CFAllocator **)a1;
      v15 = *(unsigned __int8 *)(a1 + 88);
      theArray[0] = 0;
      v76 = 0;
      v77 = 0;
      v74 = 0;
      v75 = 0;
      v66 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)&rhs.value = *MEMORY[0x1E0CA2E18];
      v16 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      rhs.epoch = v16;
      v18 = (_QWORD *)(a1 + 120);
      v17 = *(const __CFArray ***)(a1 + 120);
      if (v17)
      {
        if (!a3)
          goto LABEL_33;
      }
      else
      {
        if (clcpcgcfsbCaptionSlicerCreate(v14, (CFTypeRef **)(a1 + 120)))
          goto LABEL_126;
        *(_OWORD *)&lhs.start.value = *(_OWORD *)(a1 + 16);
        lhs.start.epoch = *(_QWORD *)(a1 + 32);
        if (FigCFArrayAppendCMTime())
          goto LABEL_126;
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 32);
        v17 = *(const __CFArray ***)(a1 + 120);
        if (!a3)
          goto LABEL_33;
      }
      LODWORD(lhs.start.value) = 0;
      if (clcpcgcfsbGetCaptionMode(a3, &lhs))
        goto LABEL_126;
      if (LODWORD(lhs.start.value) == 1)
      {
        if (clcpcgcfsbCreateCaptionDataArray(*(const __CFArray **)(a1 + 40), v15, v14, theArray)
          || clcpcgcfsbCreateCaptionDataArray(a3, v15, v14, &v77))
        {
          goto LABEL_126;
        }
        if (theArray[0])
          Count = CFArrayGetCount(theArray[0]);
        else
          Count = 0;
        v60 = v77;
        if (v77)
          v60 = (__CFArray *)CFArrayGetCount(v77);
        if (Count >= (uint64_t)v60)
        {
          if (Count <= (uint64_t)v60)
            goto LABEL_126;
          if (Count - (_QWORD)v60 == 1)
          {
            lhs.start = duration;
            if (FigCFArrayAppendCMTime())
              goto LABEL_126;
            clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(v17);
            *(_OWORD *)&lhs.start.value = v66;
            lhs.start.epoch = v16;
            if (FigCFArrayGetCMTimeAtIndex())
            {
              rhs = lhs.start;
            }
            else if (FigSignalErrorAt())
            {
              goto LABEL_126;
            }
            v65 = 1;
            goto LABEL_38;
          }
        }
        else if ((__CFArray *)((char *)v60 - Count) == (__CFArray *)1)
        {
          if (!clcpcgcfsbCreateBottomLineCaptionData(*(const __CFArray **)(a1 + 40), v15, 1, v14, &v76))
          {
            v61 = v76;
            CFArrayAppendValue(v17[2], v76);
            if (v61)
            {
              CFRelease(v61);
              v76 = 0;
            }
            lhs.start = duration;
            FigCFArrayAppendCMTime();
          }
          goto LABEL_126;
        }
        FigSignalErrorAt();
        goto LABEL_126;
      }
LABEL_33:
      if (!clcpcgcfsbCreateBottomLineCaptionData(*(const __CFArray **)(a1 + 40), v15, 0, v14, &v76))
      {
        v25 = v76;
        CFArrayAppendValue(v17[2], v76);
        if (v25)
        {
          CFRelease(v25);
          v76 = 0;
        }
        lhs.start = duration;
        if (!clcpcgcfsbCaptionSlicerSetAllPendingCaptionEndTimes((uint64_t)v17))
        {
          v65 = 0;
          rhs = duration;
LABEL_38:
          *(_OWORD *)&lhs.start.value = *(_OWORD *)(a1 + 128);
          lhs.start.epoch = *(_QWORD *)(a1 + 144);
          time1.start = rhs;
          if (clcpcgcfsbCaptionSlicerCreateCaptionGroupArray(v17, &lhs.start, (__int128 *)&time1.start.value, v14, &v75, &v74))goto LABEL_126;
          v26 = v75;
          if (v75)
          {
            v27 = CFArrayGetCount(v75);
            if (v27 >= 1)
            {
              v28 = v27;
              v29 = 0;
              v30 = v74;
              do
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v26, v29);
                memset(&lhs, 0, sizeof(lhs));
                v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v29);
                CMTimeRangeMakeFromDictionary(&lhs, v32);
                v34 = *(unsigned int (**)(const void *, CMTimeRange *, uint64_t))(a1 + 72);
                v33 = *(_QWORD *)(a1 + 80);
                time1 = lhs;
                if (v34(ValueAtIndex, &time1, v33))
                  goto LABEL_126;
                ++v29;
              }
              while (v28 != v29);
            }
          }
          if (*v17)
            v35 = CFArrayGetCount(*v17);
          else
            v35 = 0;
          v54 = v17[1];
          if (v54)
            v55 = CFArrayGetCount(v54);
          else
            v55 = 0;
          v56 = v17[2];
          if (v56)
            v57 = CFArrayGetCount(v56);
          else
            v57 = 0;
          if (v55 >= 1)
          {
            v58 = 0;
            while (1)
            {
              *(_OWORD *)&lhs.start.value = v66;
              lhs.start.epoch = v16;
              if (!FigCFArrayGetCMTimeAtIndex())
                break;
              *(_OWORD *)&time1.start.value = *(_OWORD *)&lhs.start.value;
              time1.start.epoch = lhs.start.epoch;
              time2 = rhs;
              if (CMTimeCompare(&time1.start, &time2) <= 0)
              {
                CFArrayRemoveValueAtIndex(v17[1], v58);
                if (v58 < v35)
                {
                  CFArrayRemoveValueAtIndex(*v17, v58);
                  --v35;
                }
                --v55;
                if (v58 < v57)
                {
                  CFArrayRemoveValueAtIndex(v17[2], v58);
                  --v57;
                }
              }
              else
              {
                ++v58;
              }
              if (v58 >= v55)
                goto LABEL_89;
            }
            if (FigSignalErrorAt())
              goto LABEL_126;
          }
LABEL_89:
          *(_OWORD *)(a1 + 128) = *(_OWORD *)&rhs.value;
          v59 = a1 + 128;
          *(_QWORD *)(v59 + 16) = rhs.epoch;
          if ((v65 & 1) == 0)
          {
            clcpcgcfsbCaptionSlicerRelease(v14, (CFTypeRef *)v17);
            *v18 = 0;
            *(_OWORD *)v59 = v66;
            *(_QWORD *)(v59 + 16) = v16;
          }
        }
      }
LABEL_126:
      if (v74)
        CFRelease(v74);
      if (v75)
        CFRelease(v75);
      if (v76)
        CFRelease(v76);
      if (v77)
        CFRelease(v77);
      if (theArray[0])
        CFRelease(theArray[0]);
      return 0;
    case 2:
      *(_OWORD *)theArray = *(_OWORD *)&a2->value;
      epoch = a2->epoch;
      v77 = 0;
      v9 = clcpcgcfsbCreateCaptionGroupWithoutSlice(*(const __CFArray **)(a1 + 40), *(unsigned __int8 *)(a1 + 88), *(const __CFAllocator **)a1, &v77);
      if ((_DWORD)v9)
      {
LABEL_138:
        v8 = v9;
        v11 = v77;
        if (!v77)
          return v8;
      }
      else
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)(a1 + 16);
        time1.start.epoch = *(_QWORD *)(a1 + 32);
        memset(&time2, 0, sizeof(time2));
        *(_OWORD *)&lhs.start.value = *(_OWORD *)theArray;
        lhs.start.epoch = epoch;
        rhs = *(CMTime *)(a1 + 16);
        CMTimeSubtract(&time2, &lhs.start, &rhs);
        v19 = *(uint64_t (**)(__CFArray *, CMTimeRange *, _QWORD))(a1 + 72);
        v11 = v77;
        rhs = time1.start;
        duration = time2;
        CMTimeRangeMake(&lhs, &rhs, &duration);
        v8 = v19(v11, &lhs, *(_QWORD *)(a1 + 80));
LABEL_19:
        if (!v11)
          return v8;
      }
LABEL_20:
      v20 = v11;
      goto LABEL_152;
    case 3:
      time2 = *a2;
      v21 = *(const __CFAllocator **)a1;
      v22 = *(unsigned __int8 *)(a1 + 88);
      rhs.value = 0;
      duration.value = 0;
      theArray[0] = 0;
      v76 = 0;
      v77 = 0;
      v75 = 0;
      LODWORD(v74) = 0;
      v23 = *(const __CFArray ***)(a1 + 120);
      if (v23)
      {
        if (!a3)
          goto LABEL_55;
      }
      else
      {
        appended = clcpcgcfsbCaptionSlicerCreate(v21, (CFTypeRef **)(a1 + 120));
        if ((_DWORD)appended)
          goto LABEL_156;
        *(_OWORD *)&lhs.start.value = *(_OWORD *)(a1 + 16);
        lhs.start.epoch = *(_QWORD *)(a1 + 32);
        appended = FigCFArrayAppendCMTime();
        if ((_DWORD)appended)
          goto LABEL_156;
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 32);
        v23 = *(const __CFArray ***)(a1 + 120);
        if (!a3)
          goto LABEL_55;
      }
      LODWORD(lhs.start.value) = 0;
      v8 = clcpcgcfsbGetCaptionMode(a3, &lhs);
      if ((_DWORD)v8)
        goto LABEL_143;
      if (LODWORD(lhs.start.value) != 3)
      {
LABEL_55:
        appended = clcpcgcfsbCreateCaptionDataArray(*(const __CFArray **)(a1 + 40), v22, v21, (__CFArray **)&rhs);
        if (!(_DWORD)appended)
        {
          value = (const __CFArray *)rhs.value;
          FirstNewRowNumber = clcpcgcfsbCreateCaptionDataRowNumberArray((const __CFArray *)rhs.value, v21, &v75);
          v41 = v75;
          if ((_DWORD)FirstNewRowNumber)
            goto LABEL_141;
          FirstNewRowNumber = clcpcgcfsbGetFirstNewRowNumber(*(CFArrayRef *)(a1 + 152), v75);
          if ((_DWORD)FirstNewRowNumber)
            goto LABEL_141;
          if ((_DWORD)v74)
          {
            FirstNewRowNumber = clcpcgcfsbCopyCaptionDataOnRowNumber(value, (int)v74, theArray);
            if (!(_DWORD)FirstNewRowNumber)
            {
              v42 = theArray[0];
              CFArrayAppendValue(v23[2], theArray[0]);
              if (v42)
              {
                CFRelease(v42);
                theArray[0] = 0;
              }
              lhs.start = time2;
              FirstNewRowNumber = clcpcgcfsbCaptionSlicerSetAllPendingCaptionEndTimes((uint64_t)v23);
              if (!(_DWORD)FirstNewRowNumber)
              {
                time1.start = time2;
                *(_OWORD *)&lhs.start.value = *(_OWORD *)(a1 + 128);
                lhs.start.epoch = *(_QWORD *)(a1 + 144);
                FirstNewRowNumber = clcpcgcfsbCaptionSlicerCreateCaptionGroupArray(v23, &lhs.start, (__int128 *)&time1.start.value, v21, &v77, &v76);
                if (!(_DWORD)FirstNewRowNumber)
                {
                  v43 = v77;
                  if (v77)
                  {
                    v44 = CFArrayGetCount(v77);
                    if (v44 >= 1)
                    {
                      v45 = v44;
                      v46 = 0;
                      v47 = v76;
                      do
                      {
                        v48 = CFArrayGetValueAtIndex(v43, v46);
                        memset(&lhs, 0, sizeof(lhs));
                        v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(v47, v46);
                        CMTimeRangeMakeFromDictionary(&lhs, v49);
                        v51 = *(uint64_t (**)(const void *, CMTimeRange *, uint64_t))(a1 + 72);
                        v50 = *(_QWORD *)(a1 + 80);
                        time1 = lhs;
                        FirstNewRowNumber = v51(v48, &time1, v50);
                        if ((_DWORD)FirstNewRowNumber)
                          goto LABEL_141;
                      }
                      while (v45 != ++v46);
                    }
                  }
                  clcpcgcfsbCaptionSlicerRelease(v21, (CFTypeRef *)v23);
                  v52 = MEMORY[0x1E0CA2E18];
                  *(_QWORD *)(a1 + 120) = 0;
                  *(_OWORD *)(a1 + 128) = *(_OWORD *)v52;
                  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v52 + 16);
                  v53 = *(const void **)(a1 + 152);
                  if (v53)
                  {
                    CFRelease(v53);
                    v8 = 0;
                    *(_QWORD *)(a1 + 152) = 0;
                    if (!v41)
                      goto LABEL_143;
LABEL_142:
                    CFRelease(v41);
                    goto LABEL_143;
                  }
LABEL_122:
                  v8 = 0;
                  if (!v41)
                    goto LABEL_143;
                  goto LABEL_142;
                }
              }
            }
            goto LABEL_141;
          }
          goto LABEL_140;
        }
        goto LABEL_156;
      }
      appended = clcpcgcfsbCreateCaptionDataArray(*(const __CFArray **)(a1 + 40), v22, v21, (__CFArray **)&rhs);
      if (!(_DWORD)appended)
      {
        appended = clcpcgcfsbCreateCaptionDataArray(a3, v22, v21, (__CFArray **)&duration);
        if (!(_DWORD)appended)
        {
          v37 = (const __CFArray *)rhs.value;
          if (rhs.value)
            v38 = CFArrayGetCount((CFArrayRef)rhs.value);
          else
            v38 = 0;
          v62 = duration.value;
          if (duration.value)
            v62 = CFArrayGetCount((CFArrayRef)duration.value);
          if (v62 <= v38)
          {
            v8 = 0;
            goto LABEL_143;
          }
          if (v62 - v38 == 1)
          {
            FirstNewRowNumber = clcpcgcfsbCreateCaptionDataRowNumberArray(v37, v21, &v75);
            v41 = v75;
            if ((_DWORD)FirstNewRowNumber)
              goto LABEL_141;
            FirstNewRowNumber = clcpcgcfsbGetFirstNewRowNumber(*(CFArrayRef *)(a1 + 152), v75);
            if ((_DWORD)FirstNewRowNumber)
              goto LABEL_141;
            if ((_DWORD)v74)
            {
              FirstNewRowNumber = clcpcgcfsbCopyCaptionDataOnRowNumber(v37, (int)v74, theArray);
              if (!(_DWORD)FirstNewRowNumber)
              {
                v63 = theArray[0];
                CFArrayAppendValue(v23[2], theArray[0]);
                if (v63)
                {
                  CFRelease(v63);
                  theArray[0] = 0;
                }
                lhs.start = time2;
                FirstNewRowNumber = FigCFArrayAppendCMTime();
                if (!(_DWORD)FirstNewRowNumber)
                {
                  v64 = *(const void **)(a1 + 152);
                  *(_QWORD *)(a1 + 152) = v41;
                  if (v41)
                    CFRetain(v41);
                  if (v64)
                    CFRelease(v64);
                  goto LABEL_122;
                }
              }
LABEL_141:
              v8 = FirstNewRowNumber;
              if (!v41)
                goto LABEL_143;
              goto LABEL_142;
            }
LABEL_140:
            FirstNewRowNumber = FigSignalErrorAt();
            goto LABEL_141;
          }
          appended = FigSignalErrorAt();
        }
      }
LABEL_156:
      v8 = appended;
LABEL_143:
      if (v76)
        CFRelease(v76);
      if (v77)
        CFRelease(v77);
      if (theArray[0])
        CFRelease(theArray[0]);
      if (duration.value)
        CFRelease((CFTypeRef)duration.value);
      v20 = (const void *)rhs.value;
      if (rhs.value)
LABEL_152:
        CFRelease(v20);
      return v8;
    default:
      return FigSignalErrorAt();
  }
}

uint64_t clcpcgcfsbGetCaptionMode(const __CFArray *a1, _DWORD *a2)
{
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  uint64_t result;

  if (a1)
  {
    if (CFArrayGetCount(a1))
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, 0);
      Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("R"));
      if (Value)
      {
        v6 = Value;
        if (CFArrayGetCount(Value))
        {
          v7 = (const __CFArray *)CFArrayGetValueAtIndex(v6, 0);
          if (v7)
          {
            v8 = v7;
            if (CFArrayGetCount(v7))
            {
              CFArrayGetValueAtIndex(v8, 0);
              if (!FigCFDictionaryGetInt32IfPresent())
                return FigSignalErrorAt();
            }
          }
        }
      }
    }
  }
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t clcpcgcfsbCreateCaptionGroupWithoutSlice(const __CFArray *a1, int a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t v5;
  CFIndex Count;
  unint64_t v7;
  size_t v8;
  uint64_t v10;
  void *v11;
  uint64_t Empty;
  void *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  CFArrayRef theArray;

  theArray = 0;
  v5 = clcpcgcfsbCreateCaptionDataArray(a1, a2, a3, &theArray);
  if ((_DWORD)v5)
    goto LABEL_10;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v7 = Count;
      v8 = 24 * Count;
      if (v7 <= 0xAAAAAAAAAAAAAAALL && v8 != 0)
      {
        v14 = malloc_type_malloc(v8, 0x5CC9CBA6uLL);
        if (v14)
        {
          v11 = v14;
          v15 = *MEMORY[0x1E0CA2E68];
          v16 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          v17 = v14;
          do
          {
            *(_OWORD *)v17 = v15;
            v17[2] = v16;
            v17 += 3;
            --v7;
          }
          while (v7);
          Empty = FigCaptionGroupCreate();
          if ((_DWORD)Empty)
            goto LABEL_20;
LABEL_12:
          v10 = 0;
          *a4 = 0;
          goto LABEL_13;
        }
      }
      v5 = FigSignalErrorAt();
LABEL_10:
      v10 = v5;
      v11 = 0;
      goto LABEL_13;
    }
  }
  Empty = FigCaptionGroupCreateEmpty();
  v11 = 0;
  if (!(_DWORD)Empty)
    goto LABEL_12;
LABEL_20:
  v10 = Empty;
LABEL_13:
  free(v11);
  if (theArray)
    CFRelease(theArray);
  return v10;
}

uint64_t clcpcgcfsbCreateCaptionDataArray(const __CFArray *a1, int a2, CFAllocatorRef allocator, __CFArray **a4)
{
  const __CFArray *v6;
  CFIndex Count;
  CFMutableArrayRef v8;
  __CFArray *Mutable;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *v12;
  const __CFArray *v13;
  CFIndex v14;
  CFMutableArrayRef v15;
  const __CFArray *v16;
  CFIndex v17;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex v21;
  CFIndex v22;
  const __CFDictionary *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  CFIndex v30;
  const __CFArray *v31;
  __CFArray *cf;
  CFIndex v33;
  void *value;
  CFRange v35;
  CFRange v36;

  if (!a1)
  {
    Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
      goto LABEL_25;
    return FigSignalErrorAt();
  }
  v6 = a1;
  Count = CFArrayGetCount(a1);
  v8 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (!v8)
    return FigSignalErrorAt();
  Mutable = v8;
  if (Count < 1)
  {
LABEL_25:
    v27 = 0;
    *a4 = Mutable;
    return v27;
  }
  v10 = 0;
  cf = v8;
  v30 = Count;
  v31 = v6;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v10);
    v12 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("R"));
    if (v12)
      break;
    v16 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    if (v16)
      goto LABEL_19;
LABEL_22:
    v26 = FigSignalErrorAt();
    if ((_DWORD)v26)
    {
      v27 = v26;
      goto LABEL_27;
    }
    v36.location = 0;
    v36.length = 0;
    CFArrayAppendArray(Mutable, 0, v36);
LABEL_20:
    if (++v10 == Count)
      goto LABEL_25;
  }
  v13 = v12;
  v14 = CFArrayGetCount(v12);
  v15 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (!v15)
    goto LABEL_22;
  v16 = v15;
  if (v14 < 1)
  {
LABEL_19:
    v35.length = CFArrayGetCount(v16);
    v35.location = 0;
    CFArrayAppendArray(Mutable, v16, v35);
    CFRelease(v16);
    goto LABEL_20;
  }
  v33 = v10;
  v17 = 0;
  while (1)
  {
    v18 = (const __CFArray *)CFArrayGetValueAtIndex(v13, v17);
    if (v18)
    {
      v19 = v18;
      v20 = CFArrayGetCount(v18);
      if (v20 >= 1)
        break;
    }
LABEL_16:
    if (++v17 == v14)
    {
      Mutable = cf;
      v10 = v33;
      Count = v30;
      v6 = v31;
      goto LABEL_19;
    }
  }
  v21 = v20;
  v22 = 0;
  while (1)
  {
    v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v22);
    value = 0;
    v24 = clcpcgcfsbCreateCaptionDataFromCommandData(v23, a2, 0, allocator, &value);
    if ((_DWORD)v24)
      break;
    v25 = value;
    if (value)
    {
      CFArrayAppendValue(v16, value);
      CFRelease(v25);
    }
    if (v21 == ++v22)
      goto LABEL_16;
  }
  v27 = v24;
  CFRelease(v16);
LABEL_27:
  CFRelease(cf);
  return v27;
}

uint64_t clcpcgcfsbCreateCaptionDataFromCommandData(const __CFDictionary *a1, int a2, int a3, const __CFAllocator *a4, _QWORD *a5)
{
  const __CFAttributedString *Value;
  const __CFAttributedString *v11;
  uint64_t v12;
  CFIndex Length;
  __CFAttributedString *MutableCopy;
  __CFAttributedString *v15;
  uint64_t Limit;
  int v17;
  CFIndex v18;
  const __CFBoolean *AttributeAndLongestEffectiveRange;
  int v20;
  CFRange v21;
  uint64_t v22;
  uint64_t Mutable;
  CFStringRef String;
  uint64_t (*v25)(_QWORD, CFStringRef);
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  CFIndex v29;
  uint64_t v30;
  CFTypeRef v31;
  CFIndex location;
  CFIndex v33;
  uint64_t (*v34)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFIndex v38;
  CFTypeRef v39;
  CFIndex v40;
  CFIndex v41;
  uint64_t (*v42)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  CFIndex v46;
  CFTypeRef v47;
  CFIndex v48;
  CFIndex v49;
  uint64_t (*v50)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CFIndex v54;
  uint64_t SInt32;
  const void *v56;
  uint64_t v57;
  CFTypeRef v58;
  CFIndex v59;
  CFIndex v60;
  uint64_t (*v61)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex);
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  const void *v67;
  const void *v68;
  uint64_t v69;
  const void *v70;
  uint64_t v71;
  CFIndex v72;
  uint64_t CMBaseObject;
  uint64_t (*v74)(uint64_t, _QWORD, CFIndex);
  CFTypeRef v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, _QWORD, CFTypeRef);
  CFTypeRef v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, _QWORD, CFTypeRef);
  uint64_t v81;
  uint64_t (*v82)(uint64_t, _QWORD, uint64_t);
  CFTypeRef v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, _QWORD, CFTypeRef);
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, _QWORD, uint64_t);
  int v90;
  const __CFDictionary *v91;
  _QWORD *v92;
  __CFAttributedString *v93;
  CFRange longestEffectiveRange;
  uint64_t v95;
  uint64_t v96;
  CFTypeRef cf;
  CFTypeRef v98;
  CFTypeRef v99;
  CFRange v100;
  CFRange v101;
  CFRange v102;
  CFRange v103;
  CFRange v104;

  Value = (const __CFAttributedString *)CFDictionaryGetValue(a1, CFSTR("S"));
  if (!Value || (v11 = Value, !CFAttributedStringGetLength(Value)))
  {
    v93 = 0;
    goto LABEL_6;
  }
  v91 = a1;
  v90 = a3;
  if (a2)
  {
    v93 = 0;
  }
  else
  {
    Length = CFAttributedStringGetLength(v11);
    MutableCopy = CFAttributedStringCreateMutableCopy(a4, Length, v11);
    if (MutableCopy)
    {
      v15 = MutableCopy;
      CFAttributedStringBeginEditing(MutableCopy);
      longestEffectiveRange.location = 0;
      longestEffectiveRange.length = 0;
      Limit = FigCFRangeGetLimit();
      if (Limit < FigCFRangeGetLimit())
      {
        v17 = 0;
        do
        {
          v18 = FigCFRangeGetLimit();
          v100.location = 0;
          v100.length = Length;
          AttributeAndLongestEffectiveRange = (const __CFBoolean *)CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v18, CFSTR("a"), v100, &longestEffectiveRange);
          v20 = CFBooleanGetValue(AttributeAndLongestEffectiveRange);
          v21.length = longestEffectiveRange.length;
          if (v20)
          {
            v21.location = longestEffectiveRange.location - v17;
            CFAttributedStringReplaceString(v15, v21, &stru_1E2FD85F8);
            v17 += LODWORD(longestEffectiveRange.length);
          }
          v22 = FigCFRangeGetLimit();
        }
        while (v22 < FigCFRangeGetLimit());
      }
      CFAttributedStringEndEditing(v15);
      v93 = v15;
      v11 = v15;
    }
    else
    {
      v12 = FigSignalErrorAt();
      v93 = 0;
      v11 = 0;
      if ((_DWORD)v12)
        goto LABEL_115;
    }
  }
  Mutable = FigCaptionDataCreateMutable();
  if ((_DWORD)Mutable)
    goto LABEL_127;
  String = CFAttributedStringGetString(v11);
  v25 = *(uint64_t (**)(_QWORD, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v25)
  {
    v12 = 4294954514;
    goto LABEL_115;
  }
  v92 = a5;
  Mutable = v25(0, String);
  if ((_DWORD)Mutable)
  {
LABEL_127:
    v12 = Mutable;
  }
  else
  {
    v26 = CFAttributedStringGetLength(v11);
    v99 = 0;
    longestEffectiveRange.location = 0;
    longestEffectiveRange.length = 0;
    v27 = FigCFRangeGetLimit();
    if (v27 < FigCFRangeGetLimit())
    {
      v28 = *MEMORY[0x1E0CA35E8];
      do
      {
        v29 = FigCFRangeGetLimit();
        v101.location = 0;
        v101.length = v26;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v29, CFSTR("t"), v101, &longestEffectiveRange))
        {
          if (v99)
          {
            CFRelease(v99);
            v99 = 0;
          }
          v30 = FigCaptionDynamicStyleCreate();
          if ((_DWORD)v30)
          {
LABEL_125:
            v12 = v30;
            goto LABEL_58;
          }
          v31 = v99;
          location = longestEffectiveRange.location;
          v33 = longestEffectiveRange.length;
          v34 = *(uint64_t (**)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 32);
          if (!v34)
          {
LABEL_57:
            v12 = 4294954514;
            goto LABEL_58;
          }
          v30 = v34(0, v28, v31, location, v33);
          if ((_DWORD)v30)
            goto LABEL_125;
        }
        v35 = FigCFRangeGetLimit();
      }
      while (v35 < FigCFRangeGetLimit());
    }
    longestEffectiveRange.location = 0;
    longestEffectiveRange.length = 0;
    v36 = FigCFRangeGetLimit();
    if (v36 < FigCFRangeGetLimit())
    {
      v37 = *MEMORY[0x1E0CA3558];
      do
      {
        v38 = FigCFRangeGetLimit();
        v102.location = 0;
        v102.length = v26;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v38, CFSTR("b"), v102, &longestEffectiveRange))
        {
          if (v99)
          {
            CFRelease(v99);
            v99 = 0;
          }
          v30 = FigCaptionDynamicStyleCreate();
          if ((_DWORD)v30)
            goto LABEL_125;
          v39 = v99;
          v40 = longestEffectiveRange.location;
          v41 = longestEffectiveRange.length;
          v42 = *(uint64_t (**)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 32);
          if (!v42)
            goto LABEL_57;
          v30 = v42(0, v37, v39, v40, v41);
          if ((_DWORD)v30)
            goto LABEL_125;
        }
        v43 = FigCFRangeGetLimit();
      }
      while (v43 < FigCFRangeGetLimit());
    }
    longestEffectiveRange.location = 0;
    longestEffectiveRange.length = 0;
    v44 = FigCFRangeGetLimit();
    if (v44 < FigCFRangeGetLimit())
    {
      v45 = *MEMORY[0x1E0CA3580];
      do
      {
        v46 = FigCFRangeGetLimit();
        v103.location = 0;
        v103.length = v26;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v46, CFSTR("i"), v103, &longestEffectiveRange))
        {
          FigCFEqual();
          if (v99)
          {
            CFRelease(v99);
            v99 = 0;
          }
          v30 = FigCaptionDynamicStyleCreate();
          if ((_DWORD)v30)
            goto LABEL_125;
          v47 = v99;
          v49 = longestEffectiveRange.location;
          v48 = longestEffectiveRange.length;
          v50 = *(uint64_t (**)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 32);
          if (!v50)
            goto LABEL_57;
          v30 = v50(0, v45, v47, v49, v48);
          if ((_DWORD)v30)
            goto LABEL_125;
        }
        v51 = FigCFRangeGetLimit();
      }
      while (v51 < FigCFRangeGetLimit());
    }
    longestEffectiveRange.location = 0;
    longestEffectiveRange.length = 0;
    v52 = FigCFRangeGetLimit();
    if (v52 < FigCFRangeGetLimit())
    {
      v53 = *MEMORY[0x1E0CA3560];
      do
      {
        v54 = FigCFRangeGetLimit();
        v104.location = 0;
        v104.length = v26;
        if (CFAttributedStringGetAttributeAndLongestEffectiveRange(v11, v54, CFSTR("u"), v104, &longestEffectiveRange))
        {
          FigCFEqual();
          SInt32 = FigCFNumberCreateSInt32();
          if (!SInt32)
          {
            v30 = FigSignalErrorAt();
            goto LABEL_125;
          }
          v56 = (const void *)SInt32;
          if (v99)
          {
            CFRelease(v99);
            v99 = 0;
          }
          v57 = FigCaptionDynamicStyleCreate();
          if ((_DWORD)v57)
          {
LABEL_126:
            v12 = v57;
            goto LABEL_122;
          }
          v58 = v99;
          v60 = longestEffectiveRange.location;
          v59 = longestEffectiveRange.length;
          v61 = *(uint64_t (**)(_QWORD, uint64_t, CFTypeRef, CFIndex, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 32);
          if (!v61)
          {
            v12 = 4294954514;
LABEL_122:
            CFRelease(v56);
            goto LABEL_58;
          }
          v57 = v61(0, v53, v58, v60, v59);
          if ((_DWORD)v57)
            goto LABEL_126;
          CFRelease(v56);
        }
        v62 = FigCFRangeGetLimit();
      }
      while (v62 < FigCFRangeGetLimit());
    }
    v12 = 0;
LABEL_58:
    a5 = v92;
    if (v99)
      CFRelease(v99);
    if (!(_DWORD)v12)
    {
      v95 = 0;
      v96 = 0;
      if (!FigCFDictionaryGetInt32IfPresent()
        || !CFDictionaryGetValue(v91, CFSTR("L"))
        || !FigCFDictionaryGetInt32IfPresent()
        || !FigCFDictionaryGetInt32IfPresent())
      {
LABEL_69:
        v12 = FigSignalErrorAt();
        goto LABEL_114;
      }
      switch(HIDWORD(v96))
      {
        case 0:
        case 2:
          LODWORD(v95) = 1;
          v63 = (uint64_t *)MEMORY[0x1E0CA3268];
          goto LABEL_71;
        case 1:
          if (!FigCFDictionaryGetInt32IfPresent())
            goto LABEL_69;
          v63 = (uint64_t *)MEMORY[0x1E0CA3260];
          v64 = (uint64_t *)MEMORY[0x1E0CA3388];
          goto LABEL_72;
        case 3:
          LODWORD(v95) = 1;
          v63 = (uint64_t *)MEMORY[0x1E0CA3260];
LABEL_71:
          v64 = (uint64_t *)MEMORY[0x1E0CA3380];
LABEL_72:
          if (v90)
            LODWORD(v96) = v96 + 1;
          v65 = *v63;
          v66 = *v64;
          CFGetAllocator(0);
          longestEffectiveRange.location = 0;
          v99 = 0;
          cf = 0;
          v98 = 0;
          v67 = (const void *)FigCaptionGeometryCopyCellBasedPointAsDictionary();
          if (v67)
          {
            v68 = (const void *)FigCaptionGeometryCopyCellBasedDimensionAsDictionary();
            if (v68)
            {
              v69 = FigCaptionGeometryCopyCellBasedDimensionAsDictionary();
              if (v69)
              {
                v70 = (const void *)v69;
                v71 = FigCaptionDynamicStyleCreate();
                if (!(_DWORD)v71)
                {
                  v71 = FigCaptionDynamicStyleCreate();
                  if (!(_DWORD)v71)
                  {
                    v71 = FigCaptionDynamicStyleCreate();
                    if (!(_DWORD)v71)
                    {
                      v71 = FigCaptionRegionCreateMutable();
                      if (!(_DWORD)v71)
                      {
                        v72 = longestEffectiveRange.location;
                        CMBaseObject = FigCaptionRegionGetCMBaseObject();
                        v74 = *(uint64_t (**)(uint64_t, _QWORD, CFIndex))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
                        if (!v74)
                          goto LABEL_90;
                        v71 = v74(CMBaseObject, *MEMORY[0x1E0CA3490], v72);
                        if (!(_DWORD)v71)
                        {
                          v75 = v99;
                          v76 = FigCaptionRegionGetCMBaseObject();
                          v77 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
                          if (!v77)
                            goto LABEL_90;
                          v71 = v77(v76, *MEMORY[0x1E0CA3428], v75);
                          if (!(_DWORD)v71)
                          {
                            v78 = v98;
                            v79 = FigCaptionRegionGetCMBaseObject();
                            v80 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                            if (!v80)
                              goto LABEL_90;
                            v71 = v80(v79, *MEMORY[0x1E0CA34B0], v78);
                            if (!(_DWORD)v71)
                            {
                              v81 = FigCaptionRegionGetCMBaseObject();
                              v82 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
                              if (v82)
                              {
                                v12 = v82(v81, *MEMORY[0x1E0CA33E0], v66);
                                if (!(_DWORD)v12)
                                {
                                  v83 = cf;
                                  cf = 0;
                                  goto LABEL_94;
                                }
LABEL_91:
                                if (cf)
                                  CFRelease(cf);
                                v83 = 0;
LABEL_94:
                                if (v98)
                                  CFRelease(v98);
                                if (v99)
                                  CFRelease(v99);
                                if (longestEffectiveRange.location)
                                  CFRelease((CFTypeRef)longestEffectiveRange.location);
                                if (v70)
                                  CFRelease(v70);
                                if (v68)
                                  CFRelease(v68);
                                a5 = v92;
                                if (v67)
                                  CFRelease(v67);
                                if ((_DWORD)v12)
                                {
LABEL_112:
                                  if (!v83)
                                    goto LABEL_114;
                                  goto LABEL_113;
                                }
                                v84 = FigCaptionDataGetCMBaseObject();
                                v85 = *(uint64_t (**)(uint64_t, _QWORD, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 56);
                                if (v85)
                                {
                                  v86 = v85(v84, *MEMORY[0x1E0CA3340], v83);
                                  if ((_DWORD)v86)
                                  {
LABEL_111:
                                    v12 = v86;
                                    goto LABEL_112;
                                  }
                                  v87 = FigCaptionDataGetCMBaseObject();
                                  v88 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 56);
                                  if (v88)
                                  {
                                    v86 = v88(v87, *MEMORY[0x1E0CA3300], v65);
                                    goto LABEL_111;
                                  }
                                }
                                v12 = 4294954514;
                                if (!v83)
                                {
LABEL_114:
                                  if ((_DWORD)v12)
                                    break;
LABEL_6:
                                  v12 = 0;
                                  *a5 = 0;
                                  break;
                                }
LABEL_113:
                                CFRelease(v83);
                                goto LABEL_114;
                              }
LABEL_90:
                              v12 = 4294954514;
                              goto LABEL_91;
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v12 = v71;
                goto LABEL_91;
              }
            }
          }
          else
          {
            v68 = 0;
          }
          v12 = FigSignalErrorAt();
          v70 = 0;
          goto LABEL_91;
        default:
          goto LABEL_69;
      }
    }
  }
LABEL_115:
  if (v93)
    CFRelease(v93);
  return v12;
}

uint64_t clcpcgcfsbCaptionSlicerCreate(const __CFAllocator *a1, CFTypeRef **a2)
{
  CFTypeRef *v4;
  CFTypeRef *v5;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v7;
  CFMutableArrayRef v8;
  uint64_t v9;

  v4 = (CFTypeRef *)CFAllocatorAllocate(a1, 24, 0);
  v5 = v4;
  if (!v4)
    goto LABEL_7;
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  *v5 = Mutable;
  if (!Mutable)
    goto LABEL_7;
  v7 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v5[1] = v7;
  if (v7 && (v8 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]), (v5[2] = v8) != 0))
  {
    v9 = 0;
    *a2 = v5;
    v5 = 0;
  }
  else
  {
LABEL_7:
    v9 = FigSignalErrorAt();
  }
  clcpcgcfsbCaptionSlicerRelease(a1, v5);
  return v9;
}

uint64_t clcpcgcfsbCreateCaptionDataRowNumberArray(const __CFArray *a1, CFAllocatorRef allocator, CFMutableArrayRef *a3)
{
  uint64_t Count;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  CFIndex v9;
  const void *ValueAtIndex;
  uint64_t PositionFromCaptionData;
  uint64_t v12;
  int v14;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    Mutable = CFArrayCreateMutable(allocator, Count, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v8 = Mutable;
      if (Count >= 1)
      {
        v9 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
          v14 = 0;
          PositionFromCaptionData = clcpcgcfsbGetPositionFromCaptionData((uint64_t)ValueAtIndex, &v14);
          if ((_DWORD)PositionFromCaptionData)
            break;
          FigCFArrayAppendInt32();
          if (Count == ++v9)
            goto LABEL_9;
        }
        v12 = PositionFromCaptionData;
        CFRelease(v8);
        return v12;
      }
LABEL_9:
      v12 = 0;
      *a3 = v8;
      return v12;
    }
  }
  else
  {
    v8 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
    if (v8)
      goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t clcpcgcfsbGetFirstNewRowNumber(CFArrayRef theArray, const __CFArray *a2)
{
  CFIndex Count;
  const __CFAllocator *v4;
  CFIndex v5;
  CFMutableArrayRef MutableCopy;
  __CFArray *v7;
  uint64_t i;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a2)
    v5 = CFArrayGetCount(a2);
  else
    v5 = 0;
  MutableCopy = CFArrayCreateMutableCopy(v4, v5, a2);
  if (!MutableCopy)
    return FigSignalErrorAt();
  v7 = MutableCopy;
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      FigCFArrayGetInt32AtIndex();
      if (CFArrayGetCount(v7) >= 1)
      {
        FigCFArrayGetInt32AtIndex();
        CFArrayRemoveValueAtIndex(v7, 0);
      }
    }
  }
  FigCFArrayGetInt32AtIndex();
  CFRelease(v7);
  return 0;
}

uint64_t clcpcgcfsbCopyCaptionDataOnRowNumber(const __CFArray *a1, int a2, _QWORD *a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  uint64_t result;
  CFTypeRef v11;
  int v12;

  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v7 = Count;
    v8 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      v12 = 0;
      result = clcpcgcfsbGetPositionFromCaptionData((uint64_t)ValueAtIndex, &v12);
      if ((_DWORD)result)
        break;
      if (v12 == a2)
        goto LABEL_8;
      if (v7 == ++v8)
      {
        ValueAtIndex = 0;
LABEL_8:
        if (!ValueAtIndex)
          goto LABEL_10;
        v11 = CFRetain(ValueAtIndex);
        goto LABEL_11;
      }
    }
  }
  else
  {
LABEL_10:
    v11 = 0;
LABEL_11:
    result = 0;
    *a3 = v11;
  }
  return result;
}

uint64_t clcpcgcfsbCaptionSlicerSetAllPendingCaptionEndTimes(uint64_t a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const __CFArray *v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(const __CFArray **)(a1 + 16);
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  v4 = *(const __CFArray **)(a1 + 8);
  if (v4)
    v4 = (const __CFArray *)CFArrayGetCount(v4);
  v5 = Count - (_QWORD)v4;
  if (v5 < 1)
    return 0;
  while (1)
  {
    result = FigCFArrayAppendCMTime();
    if ((_DWORD)result)
      break;
    if (!--v5)
      return 0;
  }
  return result;
}

uint64_t clcpcgcfsbCaptionSlicerCreateCaptionGroupArray(const __CFArray **a1, CMTime *a2, __int128 *a3, const __CFAllocator *a4, CFMutableArrayRef *a5, const __CFArray **a6)
{
  const __CFArray *NumCaptionDataWithStartAndEndTime;
  unint64_t v13;
  CFMutableArrayRef Mutable;
  char *v15;
  const __CFArray *v16;
  CFMutableArrayRef v17;
  uint64_t appended;
  CMTime *v19;
  CFIndex v20;
  CMTimeEpoch v21;
  const void *ValueAtIndex;
  CFIndex v23;
  const void *v24;
  __CFArray *v25;
  uint64_t v26;
  uint64_t Count;
  const __CFAllocator *v28;
  CFMutableArrayRef v29;
  const __CFArray *v30;
  CFMutableArrayRef v31;
  CFIndex v32;
  uint64_t v33;
  CMTimeEpoch v34;
  const __CFArray *v35;
  const __CFDictionary *v36;
  const __CFDictionary *v37;
  CFDictionaryRef v38;
  CFDictionaryRef v39;
  uint64_t v40;
  __CFArray *v41;
  CFIndex v42;
  const __CFDictionary *v43;
  CFIndex v44;
  int v45;
  char *v46;
  __int128 v47;
  char *v48;
  __int128 v49;
  const void *v50;
  uint64_t v51;
  uint64_t v53;
  CFMutableArrayRef *v54;
  const __CFArray **v55;
  __CFArray *v56;
  __CFArray *theArray;
  CFIndex theArraya;
  const __CFAllocator *allocator;
  CFArrayRef v60[2];
  CFArrayRef v61[2];
  char *v62;
  CMTime v63;
  CMTime v64;
  CMTimeRange lhs;
  CMTimeRange time2;
  CMTime v67;
  __int128 v68;
  CMTimeEpoch v69;
  CMTime start;
  void *value;
  CMTimeRange time1;
  CMTime rhs;
  CMTime duration;
  CMTimeRange v75;
  CFRange v76;

  NumCaptionDataWithStartAndEndTime = clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(a1);
  value = 0;
  if (!NumCaptionDataWithStartAndEndTime)
  {
    v15 = 0;
    v62 = 0;
    Mutable = 0;
    v40 = 0;
    goto LABEL_60;
  }
  v13 = (unint64_t)NumCaptionDataWithStartAndEndTime;
  allocator = a4;
  Mutable = CFArrayCreateMutable(a4, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable
    || v13 > 0xAAAAAAAAAAAAAAALL
    || !(24 * v13)
    || (v62 = (char *)malloc_type_malloc(24 * v13, 0x5CC9CBA6uLL)) == 0)
  {
    v40 = FigSignalErrorAt();
    v30 = 0;
    v62 = 0;
    v15 = 0;
LABEL_32:
    v41 = 0;
    goto LABEL_54;
  }
  v15 = (char *)malloc_type_malloc(24 * v13, 0x5CC9CBA6uLL);
  if (!v15)
  {
    v40 = FigSignalErrorAt();
    goto LABEL_75;
  }
  start = *a2;
  v68 = *a3;
  v69 = *((_QWORD *)a3 + 2);
  v16 = clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(a1);
  v17 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (!v17)
  {
    v53 = FigSignalErrorAt();
    v30 = 0;
    if ((_DWORD)v53)
    {
      v40 = v53;
      goto LABEL_71;
    }
    goto LABEL_51;
  }
  v75.start = start;
  theArray = v17;
  appended = FigCFArrayAppendCMTime();
  if ((_DWORD)appended)
  {
    v40 = appended;
    v25 = theArray;
LABEL_74:
    CFRelease(v25);
LABEL_75:
    v30 = 0;
    goto LABEL_32;
  }
  v54 = a5;
  v55 = a6;
  v19 = (CMTime *)MEMORY[0x1E0CA2E18];
  if ((uint64_t)v16 >= 1)
  {
    v20 = 0;
    *(_OWORD *)v60 = *MEMORY[0x1E0CA2E18];
    v21 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    do
    {
      *(_OWORD *)&v75.start.value = *(_OWORD *)v60;
      v75.start.epoch = v21;
      if (!FigCFArrayGetCMTimeAtIndex())
        goto LABEL_63;
      time1.start = start;
      *(_OWORD *)&time2.start.value = *(_OWORD *)&v75.start.value;
      time2.start.epoch = v75.start.epoch;
      if (CMTimeCompare(&time1.start, &time2.start) < 0)
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)&v75.start.value;
        time1.start.epoch = v75.start.epoch;
        *(_OWORD *)&time2.start.value = v68;
        time2.start.epoch = v69;
        if (CMTimeCompare(&time1.start, &time2.start) < 0)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*a1, v20);
          CFArrayAppendValue(theArray, ValueAtIndex);
        }
      }
      ++v20;
    }
    while (v16 != (const __CFArray *)v20);
    v23 = 0;
    while (1)
    {
      *(_OWORD *)&v75.start.value = *(_OWORD *)v60;
      v75.start.epoch = v21;
      if (!FigCFArrayGetCMTimeAtIndex())
        break;
      time1.start = start;
      *(_OWORD *)&time2.start.value = *(_OWORD *)&v75.start.value;
      time2.start.epoch = v75.start.epoch;
      if (CMTimeCompare(&time1.start, &time2.start) < 0)
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)&v75.start.value;
        time1.start.epoch = v75.start.epoch;
        *(_OWORD *)&time2.start.value = v68;
        time2.start.epoch = v69;
        if (CMTimeCompare(&time1.start, &time2.start) < 0)
        {
          v24 = CFArrayGetValueAtIndex(a1[1], v23);
          CFArrayAppendValue(theArray, v24);
        }
      }
      if (v16 == (const __CFArray *)++v23)
        goto LABEL_22;
    }
LABEL_63:
    v40 = FigSignalErrorAt();
    goto LABEL_64;
  }
LABEL_22:
  *(_OWORD *)&v75.start.value = v68;
  v75.start.epoch = v69;
  v25 = theArray;
  v26 = FigCFArrayAppendCMTime();
  if ((_DWORD)v26)
  {
    v40 = v26;
    goto LABEL_74;
  }
  Count = CFArrayGetCount(theArray);
  v76.location = 0;
  v76.length = Count;
  CFArraySortValues(theArray, v76, (CFComparatorFunction)clcpcgcfsbCaptionSlicerCompareSliceTime, 0);
  v28 = allocator;
  v29 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (!v29)
    goto LABEL_63;
  v30 = v29;
  v56 = Mutable;
  if (Count > 1)
  {
    v31 = v29;
    v32 = 0;
    v33 = Count - 2;
    *(_OWORD *)v61 = *MEMORY[0x1E0CA2E68];
    v34 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v35 = theArray;
    while (1)
    {
      memset(&time2, 0, 24);
      v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, v32);
      CMTimeMakeFromDictionary(&time2.start, v36);
      memset(&lhs, 0, 24);
      v37 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, ++v32);
      CMTimeMakeFromDictionary(&lhs.start, v37);
      memset(&v75, 0, sizeof(v75));
      *(_OWORD *)&time1.start.value = *(_OWORD *)&lhs.start.value;
      time1.start.epoch = lhs.start.epoch;
      rhs = time2.start;
      CMTimeSubtract(&duration, &time1.start, &rhs);
      *(_OWORD *)&time1.start.value = *(_OWORD *)&time2.start.value;
      time1.start.epoch = time2.start.epoch;
      CMTimeRangeMake(&v75, &time1.start, &duration);
      *(_OWORD *)&time1.start.value = *(_OWORD *)v61;
      time1.start.epoch = v34;
      rhs = v75.duration;
      if (CMTimeCompare(&time1.start, &rhs) < 0)
      {
        time1 = v75;
        v38 = CMTimeRangeCopyAsDictionary(&time1, allocator);
        if (!v38)
        {
          v40 = FigSignalErrorAt();
          CFRelease(v31);
          Mutable = v56;
LABEL_64:
          CFRelease(theArray);
          v30 = 0;
          a5 = v54;
          a6 = v55;
          if ((_DWORD)v40)
          {
LABEL_71:
            v41 = 0;
            goto LABEL_54;
          }
LABEL_51:
          v40 = 0;
          v41 = 0;
          *a5 = Mutable;
          *a6 = v30;
          v30 = 0;
          Mutable = 0;
          goto LABEL_54;
        }
        v39 = v38;
        CFArrayAppendValue(v31, v38);
        CFRelease(v39);
        v35 = theArray;
      }
      if (v32 - 1 == v33)
      {
        CFRelease(v35);
        v28 = allocator;
        v30 = v31;
        goto LABEL_34;
      }
    }
  }
  CFRelease(theArray);
LABEL_34:
  theArraya = CFArrayGetCount(v30);
  if (theArraya < 1)
  {
    a6 = v55;
    Mutable = v56;
    a5 = v54;
    goto LABEL_51;
  }
  v42 = 0;
LABEL_36:
  memset(&v75, 0, sizeof(v75));
  v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v30, v42);
  CMTimeRangeMakeFromDictionary(&v75, v43);
  v41 = CFArrayCreateMutable(v28, 0, MEMORY[0x1E0C9B378]);
  if (v41)
  {
    v44 = 0;
    v45 = 0;
    while (1)
    {
      duration = *v19;
      rhs = duration;
      if (!FigCFArrayGetCMTimeAtIndex() || !FigCFArrayGetCMTimeAtIndex())
        break;
      memset(&time1, 0, sizeof(time1));
      time2.start = rhs;
      lhs.start = duration;
      CMTimeSubtract(&v67, &time2.start, &lhs.start);
      time2.start = duration;
      CMTimeRangeMake(&time1, &time2.start, &v67);
      time2 = time1;
      lhs = v75;
      if (CMTimeRangeContainsTimeRange(&time2, &lhs))
      {
        v46 = &v62[24 * v45];
        *(_OWORD *)&lhs.start.value = *(_OWORD *)&v75.start.value;
        lhs.start.epoch = v75.start.epoch;
        start = time1.start;
        CMTimeSubtract(&time2.start, &lhs.start, &start);
        v47 = *(_OWORD *)&time2.start.value;
        *((_QWORD *)v46 + 2) = time2.start.epoch;
        *(_OWORD *)v46 = v47;
        v48 = &v15[24 * v45];
        time2 = time1;
        CMTimeRangeGetEnd(&v64, &time2);
        time2 = v75;
        CMTimeRangeGetEnd(&v63, &time2);
        CMTimeSubtract(&time2.start, &v64, &v63);
        v49 = *(_OWORD *)&time2.start.value;
        *((_QWORD *)v48 + 2) = time2.start.epoch;
        *(_OWORD *)v48 = v49;
        v50 = CFArrayGetValueAtIndex(a1[2], v44);
        CFArrayAppendValue(v41, v50);
        ++v45;
      }
      if (v13 == ++v44)
      {
        v28 = allocator;
        if (v45)
        {
          v51 = FigCaptionGroupCreate();
          if ((_DWORD)v51)
            goto LABEL_53;
          CFArrayAppendValue(v56, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          bzero(v62, 24 * v45);
          bzero(v15, 24 * v45);
          v28 = allocator;
        }
        CFRelease(v41);
        if (++v42 == theArraya)
        {
          a6 = v55;
          Mutable = v56;
          a5 = v54;
          goto LABEL_51;
        }
        goto LABEL_36;
      }
    }
  }
  v51 = FigSignalErrorAt();
LABEL_53:
  v40 = v51;
  Mutable = v56;
LABEL_54:
  if (value)
    CFRelease(value);
  if (v41)
    CFRelease(v41);
  if (v30)
    CFRelease(v30);
LABEL_60:
  free(v15);
  free(v62);
  if (Mutable)
    CFRelease(Mutable);
  return v40;
}

uint64_t clcpcgcfsbGetPositionFromCaptionData(uint64_t a1, _DWORD *a2)
{
  uint64_t CMBaseObject;
  uint64_t (*v4)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v5;
  uint64_t CellBasedPointFromDictionary;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  uint64_t v9;
  __int128 v11;
  CFTypeRef cf;
  CFTypeRef v13;

  cf = 0;
  v13 = 0;
  v11 = *MEMORY[0x1E0C9D538];
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v4 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v4)
    goto LABEL_10;
  v5 = *MEMORY[0x1E0C9AE00];
  CellBasedPointFromDictionary = v4(CMBaseObject, *MEMORY[0x1E0CA3340], *MEMORY[0x1E0C9AE00], &v13);
  if ((_DWORD)CellBasedPointFromDictionary)
  {
LABEL_17:
    v9 = CellBasedPointFromDictionary;
    goto LABEL_11;
  }
  if (!v13)
  {
LABEL_16:
    CellBasedPointFromDictionary = FigSignalErrorAt();
    goto LABEL_17;
  }
  v7 = FigCaptionRegionGetCMBaseObject();
  v8 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v8)
  {
LABEL_10:
    v9 = 4294954514;
    goto LABEL_11;
  }
  CellBasedPointFromDictionary = v8(v7, *MEMORY[0x1E0CA3490], v5, &cf);
  if ((_DWORD)CellBasedPointFromDictionary)
    goto LABEL_17;
  if (!cf)
    goto LABEL_16;
  FigCaptionDynamicStyleGetInitialValue();
  CellBasedPointFromDictionary = FigCaptionGeometryGetCellBasedPointFromDictionary();
  if ((_DWORD)CellBasedPointFromDictionary)
    goto LABEL_17;
  v9 = 0;
  if (a2)
    *a2 = (int)*((double *)&v11 + 1);
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v13)
    CFRelease(v13);
  return v9;
}

const __CFArray *clcpcgcfsbCaptionSlicerGetNumCaptionDataWithStartAndEndTime(const __CFArray **a1)
{
  const __CFArray *v2;
  CFIndex Count;
  const __CFArray *v4;
  CFIndex v5;
  const __CFArray *result;
  CFIndex v7;

  v2 = *a1;
  if (v2)
    Count = CFArrayGetCount(v2);
  else
    Count = 0;
  v4 = a1[1];
  if (v4)
    v5 = CFArrayGetCount(v4);
  else
    v5 = 0;
  result = a1[2];
  if (result)
    result = (const __CFArray *)CFArrayGetCount(result);
  if (v5 >= Count)
    v7 = Count;
  else
    v7 = v5;
  if (v7 < (uint64_t)result)
    return (const __CFArray *)v7;
  return result;
}

uint64_t clcpcgcfsbCaptionSlicerCompareSliceTime(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CMTime v4;
  CMTime time1;
  CMTime v6;
  CMTime v7;

  memset(&v7, 0, sizeof(v7));
  CMTimeMakeFromDictionary(&v7, a1);
  memset(&v6, 0, sizeof(v6));
  CMTimeMakeFromDictionary(&v6, a2);
  time1 = v7;
  v4 = v6;
  return CMTimeCompare(&time1, &v4);
}

uint64_t clcpcgcfsbCreateBottomLineCaptionData(const __CFArray *a1, int a2, int a3, const __CFAllocator *a4, _QWORD *a5)
{
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  const __CFArray *v13;
  CFIndex v14;
  const __CFArray *v15;
  const __CFArray *v16;
  CFIndex v17;
  const __CFDictionary *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  if (!a1)
    goto LABEL_9;
  Count = CFArrayGetCount(a1);
  v21 = 0;
  if (!Count)
    goto LABEL_9;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, Count - 1);
  Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("R"));
  if (Value
    && (v13 = Value, (v14 = CFArrayGetCount(Value)) != 0)
    && (v15 = (const __CFArray *)CFArrayGetValueAtIndex(v13, v14 - 1)) != 0
    && (v16 = v15, (v17 = CFArrayGetCount(v15)) != 0))
  {
    v18 = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v17 - 1);
    result = clcpcgcfsbCreateCaptionDataFromCommandData(v18, a2, a3, a4, &v21);
    if ((_DWORD)result)
      return result;
    v20 = v21;
  }
  else
  {
LABEL_9:
    v20 = 0;
  }
  result = 0;
  *a5 = v20;
  return result;
}

uint64_t FigTTMLDocumentWriterCreateLineBreaker(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    *(_QWORD *)CMBaseObjectGetDerivedStorage() = a2;
    CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterLineBreaker_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterLineBreaker_Finalize(uint64_t a1)
{
  const void *v1;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
    CFRelease(v1);
}

CFStringRef figTTMLDocumentWriterLineBreaker_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterLineBreaker[%p]"), a1);
}

uint64_t figTTMLDocumentWriterLineBreaker_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterLineBreaker_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterLineBreaker_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t (*v4)(uint64_t);
  const __CFString *v5;
  CFIndex Length;
  CFIndex v7;
  char v8;
  CFRange v9;
  CFStringRef v10;
  const __CFAllocator *v11;
  CFIndex v12;
  CFIndex v13;
  uint64_t started;
  uint64_t v15;
  CFIndex v17;
  CFIndex lineEndIndex;
  CFIndex lineBeginIndex;
  CFTypeRef cf;
  CFRange v21;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    v5 = (const __CFString *)v4(a2);
  else
    v5 = &stru_1E2FD85F8;
  Length = CFStringGetLength(v5);
  lineEndIndex = 0;
  lineBeginIndex = 0;
  v17 = 0;
  if (Length < 1)
    return 0;
  v7 = Length;
  v8 = 0;
  v9.location = 0;
  v10 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    v9.length = 1;
    CFStringGetLineBounds(v5, v9, &lineBeginIndex, &lineEndIndex, &v17);
    v12 = lineBeginIndex;
    v13 = v17;
    if (v10)
      CFRelease(v10);
    v21.length = v13 - v12;
    v21.location = v12;
    v10 = CFStringCreateWithSubstring(v11, v5, v21);
    if ((v8 & 1) != 0)
    {
      started = FigTTMLDocumentWriterStartElement(*DerivedStorage, 6);
      if ((_DWORD)started)
        break;
      started = FigTTMLDocumentWriterEndElement(*DerivedStorage);
      if ((_DWORD)started)
        break;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (CFStringGetLength(v10))
    {
      started = FigCaptionDataCreate();
      if ((_DWORD)started)
        break;
      started = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, (uint64_t)cf);
      if ((_DWORD)started)
        break;
    }
    v9.location = lineEndIndex;
    v8 = 1;
    if (v17 >= v7)
    {
      v15 = 0;
      goto LABEL_18;
    }
  }
  v15 = started;
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  return v15;
}

uint64_t figTTMLDocumentWriterLineBreaker_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterSetAttribute(*DerivedStorage, a2, a3);
}

uint64_t figTTMLDocumentWriterLineBreaker_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t FigCDSOutputNodeCreate(uint64_t a1, _QWORD *a2)
{
  const __CFAllocator *v4;
  uint64_t v5;
  _QWORD *DerivedStorage;
  _QWORD *v7;
  uint64_t v8;

  *a2 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCDSOutputNodeGetClassID_sRegisterFigCDSOutputNodeBaseTypeOnce, RegisterFigCDSOutputNodeBaseType);
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v7 = DerivedStorage;
    if (a1)
      v8 = a1;
    else
      v8 = 0;
    *DerivedStorage = v8;
    DerivedStorage[1] = 0;
    DerivedStorage[2] = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v7 + 3) = _Q0;
    *(_OWORD *)(v7 + 5) = *MEMORY[0x1E0C9D820];
    v7[7] = 0;
    *a2 = 0;
  }
  return v5;
}

void FigCDSOutputNodeFinalize()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRelease(*(CFTypeRef *)(DerivedStorage + 16));
  CGImageRelease(*(CGImageRef *)(DerivedStorage + 56));
}

__CFString *FigCDSOutputNodeCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSOutputNode: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSOutputNode_FigCDSOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSOutputNode <FigCDSOutputNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetParentNode(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  v5 = DerivedStorage[1];
  if (v5)
  {
    v6 = *DerivedStorage;
    FigCDSOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v8 = *(_QWORD *)(ProtocolVTable + 16);
      if (v8)
      {
        v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
        if (v9)
          v9(v5, v6);
      }
    }
  }
  if (a2)
  {
    v10 = *v4;
    FigCDSOutputNodeProtocolGetProtocolID();
    v11 = CMBaseObjectGetProtocolVTable();
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = *(void (**)(uint64_t, uint64_t))(v12 + 24);
        if (v13)
          v13(a2, v10);
      }
    }
  }
  v4[1] = a2;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_AddChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  uint64_t v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  void (*v9)(const void *, uint64_t);
  CFRange v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.length = CFArrayGetCount(v4);
  v10.location = 0;
  if (CFArrayGetFirstIndexOfValue(v4, v10, a2) == -1)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 16), a2);
    v6 = *(_QWORD *)DerivedStorage;
    FigCDSOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v8 = *(_QWORD *)(ProtocolVTable + 16);
      if (v8)
      {
        v9 = *(void (**)(const void *, uint64_t))(v8 + 16);
        if (v9)
          v9(a2, v6);
      }
    }
  }
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(const void *, _QWORD);
  CFRange v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFArray **)(DerivedStorage + 16);
  v10.length = CFArrayGetCount(v4);
  v10.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v10, a2);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 16), FirstIndexOfValue);
    FigCDSOutputNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v7 = *(_QWORD *)(ProtocolVTable + 16);
      if (v7)
      {
        v8 = *(void (**)(const void *, _QWORD))(v7 + 16);
        if (v8)
          v8(a2, 0);
      }
    }
  }
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetChildNodes(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_HasChildNode(uint64_t a1, const void *a2, BOOL *a3)
{
  const __CFArray *v5;
  CFRange v7;

  v5 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 16);
  v7.length = CFArrayGetCount(v5);
  v7.location = 0;
  *a3 = CFArrayGetFirstIndexOfValue(v5, v7, a2) != -1;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_RemovelAllChildNodes()
{
  uint64_t DerivedStorage;
  CFIndex v1;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v4;
  void (*v5)(const void *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    v1 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCDSOutputNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v4 = *(_QWORD *)(ProtocolVTable + 16);
        if (v4)
        {
          v5 = *(void (**)(const void *, _QWORD))(v4 + 16);
          if (v5)
            v5(ValueAtIndex, 0);
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetPosition(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetPosition(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetSize(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetSize(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_GetContent(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_SetContent(uint64_t a1, CGImage *a2)
{
  uint64_t DerivedStorage;
  CGImage *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(CGImage **)(DerivedStorage + 56);
  *(_QWORD *)(DerivedStorage + 56) = CGImageRetain(a2);
  CGImageRelease(v4);
  return 0;
}

uint64_t FigCDSOutputNode_FigCDSOutputNodeProtocol_DumpInfo()
{
  uint64_t DerivedStorage;
  CFIndex v1;
  const void *ValueAtIndex;
  uint64_t ProtocolVTable;
  uint64_t v4;
  void (*v5)(const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)) >= 1)
  {
    v1 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v1);
      FigCDSOutputNodeProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        v4 = *(_QWORD *)(ProtocolVTable + 16);
        if (v4)
        {
          v5 = *(void (**)(const void *))(v4 + 112);
          if (v5)
            v5(ValueAtIndex);
        }
      }
      ++v1;
    }
    while (v1 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16)));
  }
  return 0;
}

uint64_t RegisterFigCDSOutputNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSOutputNode]"));
}

uint64_t FigSurrogateAssetImageGeneratorCreateFromAsset(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  uint64_t (*v8)(const void *, const __CFString *, char *);
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  _QWORD *DerivedStorage;
  CFTypeRef v14;
  uint64_t v15;
  char v17;
  CFTypeRef v18;
  CFTypeRef cf;

  v18 = 0;
  v17 = 0;
  if (a2 && a4)
  {
    v8 = *(uint64_t (**)(const void *, const __CFString *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 24);
    if (!v8)
      return 4294954514;
    v9 = v8(a2, CFSTR("assetProperty_AssetType"), &v17);
    if (!(_DWORD)v9)
    {
      if (v17)
      {
        v10 = surrogateAIG_CreateSubGenerator(a1, a2, (uint64_t)a3, &v18);
        v11 = v18;
        goto LABEL_14;
      }
      cf = 0;
      FigAssetImageGeneratorGetClassID();
      v12 = CMDerivedObjectCreate();
      if (!(_DWORD)v12)
      {
        DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
        DerivedStorage[1] = CFRetain(a2);
        if (a3)
          v14 = CFRetain(a3);
        else
          v14 = 0;
        DerivedStorage[2] = v14;
        v15 = FigDispatchQueueCreateWithPriority();
        *DerivedStorage = v15;
        if (v15)
        {
          v10 = 0;
          v11 = cf;
          v18 = cf;
LABEL_14:
          if ((_DWORD)v10)
          {
            if (v11)
              CFRelease(v11);
          }
          else
          {
            *a4 = v11;
          }
          return v10;
        }
        v12 = FigSignalErrorAt();
      }
      v10 = v12;
      v11 = cf;
      if (cf)
      {
        CFRelease(cf);
        v11 = 0;
      }
      goto LABEL_14;
    }
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t surrogateAIG_CreateSubGenerator(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t CMBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v15;

  cf = 0;
  v15 = 0;
  CMBaseObject = FigAssetGetCMBaseObject(a2);
  v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (v9)
  {
    v10 = v9(CMBaseObject, CFSTR("assetProperty_AssetType"), a1, &cf);
    if ((_DWORD)v10)
    {
      v12 = v10;
    }
    else
    {
      if (FigCFEqual())
        v11 = FigStreamAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, a3, &v15);
      else
        v11 = FigAssetImageGeneratorCreateFromAssetWithOptions(a1, a2, a3, &v15);
      v12 = v11;
      if (!(_DWORD)v11)
      {
        *a4 = v15;
        v15 = 0;
      }
    }
  }
  else
  {
    v12 = 4294954514;
  }
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
  return v12;
}

uint64_t surrogateAIG_Invalidate()
{
  NSObject **DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  uint64_t FigBaseObject;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = &v9;
  v11 = 0x2000000000;
  v12 = 0;
  v1 = *DerivedStorage;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __surrogateAIG_Invalidate_block_invoke;
  v8[3] = &unk_1E2FAF330;
  v8[4] = &v9;
  v8[5] = DerivedStorage;
  dispatch_sync(v1, v8);
  v2 = v10[3];
  if (v2)
  {
    FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v2);
    if (FigBaseObject)
    {
      v4 = FigBaseObject;
      v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v5)
        v6 = v5(v4);
      else
        v6 = 4294954514;
    }
    else
    {
      v6 = 4294954516;
    }
    CFRelease((CFTypeRef)v10[3]);
  }
  else
  {
    v6 = 0;
  }
  _Block_object_dispose(&v9, 8);
  return v6;
}

void surrogateAIG_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

CFStringRef surrogateAIG_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  const void *v4;
  CFStringRef v5;
  const char *v6;
  CFStringRef v7;
  const char *v8;
  _QWORD block[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __surrogateAIG_CopyDebugDescription_block_invoke;
  block[3] = &unk_1E2FAF358;
  block[4] = &v11;
  block[5] = DerivedStorage;
  dispatch_sync(v3, block);
  v4 = (const void *)v12[3];
  if (v4)
  {
    v5 = CFCopyDescription(v4);
    if (*(_BYTE *)(DerivedStorage + 40))
      v6 = " INVALIDATED";
    else
      v6 = "";
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SurrogateAIG %p for asset %@ wrapping AIG {%@}%s"), a1, *(_QWORD *)(DerivedStorage + 8), v5, v6);
    if (v5)
      CFRelease(v5);
    CFRelease((CFTypeRef)v12[3]);
  }
  else
  {
    if (*(_BYTE *)(DerivedStorage + 40))
      v8 = " INVALIDATED";
    else
      v8 = "";
    v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("SurrogateAIG %p for asset %@ (has no subGenerator)%s"), a1, *(_QWORD *)(DerivedStorage + 8), v8);
  }
  _Block_object_dispose(&v11, 8);
  return v7;
}

uint64_t surrogateAIG_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  const void *v13;
  uint64_t v14;
  _QWORD v16[10];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    v12 = FigSignalErrorAt();
LABEL_7:
    v8 = v22;
    *((_DWORD *)v22 + 6) = v12;
    goto LABEL_8;
  }
  v7 = *(NSObject **)DerivedStorage;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = __surrogateAIG_SetProperty_block_invoke;
  v16[3] = &unk_1E2FAF380;
  v16[6] = DerivedStorage;
  v16[7] = a1;
  v16[4] = &v17;
  v16[5] = &v21;
  v16[8] = a2;
  v16[9] = a3;
  dispatch_sync(v7, v16);
  v8 = v22;
  if (!*((_DWORD *)v22 + 6))
  {
    v9 = v18[3];
    if (v9)
    {
      FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(v9);
      v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v11)
        v12 = v11(FigBaseObject, a2, a3);
      else
        v12 = -12782;
      goto LABEL_7;
    }
  }
LABEL_8:
  v13 = (const void *)v18[3];
  if (v13)
  {
    CFRelease(v13);
    v8 = v22;
  }
  v14 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  return v14;
}

uint64_t surrogateAIG_ReflectSubGeneratorNotification()
{
  return CMNotificationCenterPostNotification();
}

uint64_t surrogateAIG_CopyCGImageAtTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  NSObject *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  _QWORD block[8];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;

  v26 = 0;
  v27 = &v26;
  v28 = 0x2000000000;
  v29 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2000000000;
  v25 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    *((_DWORD *)v27 + 6) = FigSignalErrorAt();
  }
  else
  {
    v13 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __surrogateAIG_CopyCGImageAtTime_block_invoke;
    block[3] = &unk_1E2FAF3A8;
    block[4] = &v26;
    block[5] = &v22;
    block[6] = a1;
    block[7] = DerivedStorage;
    dispatch_sync(v13, block);
    v14 = v23[3];
    if (v14)
    {
      v19 = *a2;
      v20 = *((_QWORD *)a2 + 2);
      v15 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 8);
      if (v15)
      {
        v30 = v19;
        v31 = v20;
        v16 = v15(v14, &v30, a3, a4, a5, a6);
      }
      else
      {
        v16 = -12782;
      }
      *((_DWORD *)v27 + 6) = v16;
      CFRelease((CFTypeRef)v23[3]);
    }
  }
  v17 = *((unsigned int *)v27 + 6);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  return v17;
}

uint64_t surrogateAIG_RequestCGImageAtTimeAsync(const void *a1, __int128 *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  NSObject **v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, __int128 *, const void *, const void *);
  uint64_t v14;
  NSObject *v15;
  _QWORD v17[7];
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD block[6];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    v14 = FigSignalErrorAt();
  }
  else
  {
    v9 = (NSObject **)DerivedStorage;
    v10 = *(NSObject **)DerivedStorage;
    v11 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __surrogateAIG_RequestCGImageAtTimeAsync_block_invoke;
    block[3] = &unk_1E2FAF3D0;
    block[4] = &v23;
    block[5] = v9;
    dispatch_sync(v10, block);
    v12 = v24[3];
    if (v12)
    {
      v20 = *a2;
      v21 = *((_QWORD *)a2 + 2);
      v13 = *(uint64_t (**)(uint64_t, __int128 *, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 16);
      if (v13)
      {
        v27 = v20;
        v28 = v21;
        v14 = v13(v12, &v27, a3, a4);
      }
      else
      {
        v14 = 4294954514;
      }
      CFRelease((CFTypeRef)v24[3]);
    }
    else
    {
      CFRetain(a1);
      if (a3)
        CFRetain(a3);
      if (a4)
        CFRetain(a4);
      v15 = *v9;
      v17[0] = v11;
      v17[1] = 0x40000000;
      v17[2] = __surrogateAIG_RequestCGImageAtTimeAsync_block_invoke_2;
      v17[3] = &__block_descriptor_tmp_11_4;
      v18 = *a2;
      v19 = *((_QWORD *)a2 + 2);
      v17[4] = a1;
      v17[5] = a3;
      v17[6] = a4;
      dispatch_async(v15, v17);
      v14 = 0;
    }
  }
  _Block_object_dispose(&v23, 8);
  return v14;
}

uint64_t surrogateAIG_CancelAllCGImageAsyncRequests()
{
  uint64_t DerivedStorage;
  NSObject *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    v2 = FigSignalErrorAt();
  }
  else
  {
    v1 = *(NSObject **)DerivedStorage;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = __surrogateAIG_CancelAllCGImageAsyncRequests_block_invoke;
    v5[3] = &unk_1E2FAF418;
    v5[4] = &v6;
    v5[5] = DerivedStorage;
    dispatch_sync(v1, v5);
    v2 = v7[3];
    if (v2)
    {
      v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v3)
        v2 = v3(v2);
      else
        v2 = 4294954514;
      CFRelease((CFTypeRef)v7[3]);
    }
  }
  _Block_object_dispose(&v6, 8);
  return v2;
}

uint64_t surrogateAIG_EnsureSubGeneratorCreated(const void *a1)
{
  uint64_t DerivedStorage;
  CFTypeRef *v3;
  uint64_t v4;
  CFAllocatorRef v5;
  uint64_t result;
  const __CFDictionary *v7;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (CFTypeRef *)(DerivedStorage + 24);
  if (!*(_QWORD *)(DerivedStorage + 24))
  {
    v4 = DerivedStorage;
    v5 = CFGetAllocator(a1);
    result = surrogateAIG_CreateSubGenerator((uint64_t)v5, *(const void **)(v4 + 8), *(_QWORD *)(v4 + 16), v3);
    if ((_DWORD)result)
      return result;
    v7 = *(const __CFDictionary **)(v4 + 32);
    if (v7)
    {
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)surrogateAIG_SetSavedPropertyOnSubGenerator, *(void **)(v4 + 24));
      v8 = *(const void **)(v4 + 32);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(v4 + 32) = 0;
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  return 0;
}

uint64_t surrogateAIG_SetSavedPropertyOnSubGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  FigBaseObject = FigAssetImageGeneratorGetFigBaseObject(a3);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
    return v7(FigBaseObject, a1, a2);
  return result;
}

uint64_t FigVirtualFramebufferServerLivesInMediaProcess()
{
  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1)
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_87);
  return FigVirtualFramebufferServerLivesInMediaProcess_result;
}

uint64_t FigVirtualFramebufferGetMaxCount()
{
  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1)
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_87);
  if (FigVirtualFramebufferServerLivesInMediaProcess_result)
    return FigVirtualFramebufferServerGetMaxCount();
  if (fvfb_getProcessType_once != -1)
    dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_13);
  if (fvfb_getProcessType_procType != 1)
    return 1;
  if (fvfbserv_getVirtualFramebufMaxCount_once != -1)
    dispatch_once(&fvfbserv_getVirtualFramebufMaxCount_once, &__block_literal_global_16_1);
  return fvfbserv_getVirtualFramebufMaxCount_maxCount;
}

uint64_t FigVirtualFramebufferGetFramebufs(_QWORD *__dst, unint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1)
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_87);
  if (FigVirtualFramebufferServerLivesInMediaProcess_result)
    return FigVirtualFramebufferServerGetFramebufs(__dst, a2);
  if (fvfb_getProcessType_once != -1)
    dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_13);
  if (fvfb_getProcessType_procType != 1)
  {
    if (a2)
    {
      if (fvfbintern_getVirtualFramebuf_once != -1)
        dispatch_once(&fvfbintern_getVirtualFramebuf_once, &__block_literal_global_117_0);
      v6 = fvfbintern_getVirtualFramebuf_framebuf;
      *__dst = fvfbintern_getVirtualFramebuf_framebuf;
      if (v6)
        return 1;
LABEL_23:
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 0;
    }
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    v5 = 1;
LABEL_24:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v5;
  }
  if (fvfbserv_getVirtualFramebufMaxCount_once != -1)
    dispatch_once(&fvfbserv_getVirtualFramebufMaxCount_once, &__block_literal_global_16_1);
  v5 = fvfbserv_getVirtualFramebufMaxCount_maxCount;
  if (fvfbserv_getVirtualFramebufMaxCount_maxCount > a2)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    goto LABEL_24;
  }
  if (fvfbserv_getVirtualFramebufs_once != -1)
    dispatch_once(&fvfbserv_getVirtualFramebufs_once, &__block_literal_global_20);
  v5 = fvfbserv_getVirtualFramebufs_framebufCount;
  if (!fvfbserv_getVirtualFramebufs_framebufCount)
    goto LABEL_23;
  memcpy(__dst, (const void *)fvfbserv_getVirtualFramebufs_framebufs, 8 * fvfbserv_getVirtualFramebufs_framebufCount);
  return v5;
}

uint64_t FigVirtualFramebufferClientSourceScreenCreateIOS(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t DerivedStorage;
  NSObject *v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigVirtualDisplaySourceGetClassID();
  v4 = CMDerivedObjectCreate();
  if ((_DWORD)v4)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (fvfb_getClient_once != -1)
      dispatch_once(&fvfb_getClient_once, &__block_literal_global_130);
    *(_QWORD *)(DerivedStorage + 8) = fvfb_getClient_client;
    *(_DWORD *)DerivedStorage = 0;
    *(_QWORD *)(DerivedStorage + 32) = FigDispatchQueueCreateWithPriority();
    *(_QWORD *)(DerivedStorage + 40) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *a3 = 0;
  }
  return v4;
}

uint64_t FigVirtualFramebufferCopyFramebufDescriptions()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (FigVirtualFramebufferServerLivesInMediaProcess_once != -1)
    dispatch_once(&FigVirtualFramebufferServerLivesInMediaProcess_once, &__block_literal_global_87);
  if (!FigVirtualFramebufferServerLivesInMediaProcess_result)
  {
    if (fvfb_getProcessType_once != -1)
      dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_13);
    if ((fvfb_getProcessType_procType & 1) == 0)
    {
      if (FigXPCCreateBasicMessage())
        goto LABEL_13;
      if (fvfb_getClient_once != -1)
        dispatch_once(&fvfb_getClient_once, &__block_literal_global_130);
      if (FigXPCRemoteClientSendSyncMessageCreatingReply() || FigXPCMessageCopyCFString())
      {
LABEL_13:
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  return 0;
}

uint64_t __fvfb_getProcessType_block_invoke()
{
  pid_t v0;
  uint64_t result;
  _QWORD buffer[129];

  buffer[128] = *MEMORY[0x1E0C80C00];
  v0 = getpid();
  result = proc_pidpath(v0, buffer, 0x400u);
  if ((int)result >= 1
    && buffer[0] == 0x62696C2F7273752FLL
    && buffer[1] == 0x6361622F63657865
    && buffer[2] == 0x646472616F626BLL)
  {
    fvfb_getProcessType_procType = 1;
  }
  return result;
}

uint64_t __fvfbserv_getVirtualFramebufMaxCount_block_invoke()
{
  unsigned int CFPreferenceNumberWithDefault;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;

  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  fvfbserv_getVirtualFramebufMaxCount_maxCount = (int)CFPreferenceNumberWithDefault;
  if (CFPreferenceNumberWithDefault >= 9)
  {
    fvfbserv_getVirtualFramebufMaxCount_maxCount = 8;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void __fvfbserv_getVirtualFramebufs_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  uint64_t v3;
  int v4;
  uint64_t DerivedStorage;
  const char *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  NSObject *v16;
  unsigned int v17;
  unsigned int v18;
  const char *v19;
  CFMutableDictionaryRef Mutable;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  NSObject *v26;
  unsigned int v27;
  unsigned int v28;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  unsigned int v35;
  unsigned int v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  os_log_type_t v40[8];
  os_log_type_t v41[8];
  _BYTE handler[24];
  __int128 v43;
  os_log_type_t v44[4];
  CFRunLoopSourceContext context;
  _QWORD block[4];
  BOOL v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (fvfbserv_getVirtualFramebufMaxCount_once != -1)
    dispatch_once(&fvfbserv_getVirtualFramebufMaxCount_once, &__block_literal_global_16_1);
  v0 = fvfbserv_getVirtualFramebufMaxCount_maxCount;
  fvfbserv_getVirtualFramebufs_framebufs = (uint64_t)malloc_type_calloc(fvfbserv_getVirtualFramebufMaxCount_maxCount, 8uLL, 0x2004093837F09uLL);
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v1 = 0;
  if (v0)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v3 = fvfbserv_getVirtualFramebufs_framebufs;
      *(_QWORD *)v40 = 0;
      *(_QWORD *)v41 = 0;
      memset(&context, 0, sizeof(context));
      FigVirtualFramebufferGetClassID();
      v4 = CMDerivedObjectCreate();
      if (v4)
        break;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)DerivedStorage = FigSimpleMutexCreate();
      *(_QWORD *)(DerivedStorage + 64) = CFDictionaryCreateMutable(v2, 0, 0, MEMORY[0x1E0C9B3A0]);
      *(_DWORD *)(DerivedStorage + 8) = 0;
      *(_DWORD *)(DerivedStorage + 12) = v1 + 1;
      *(_DWORD *)(DerivedStorage + 88) = -1;
      context.version = 0;
      context.info = *(void **)v41;
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hotplugSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hotplugSourceCancel;
      context.perform = (void (__cdecl *)(void *))fvfbserv_hotplugSourcePerform;
      *(_QWORD *)(DerivedStorage + 112) = CFRunLoopSourceCreate(v2, 0, &context);
      asprintf((char **)v40, "VirtualFramebufVSyncQueue.%d", *(_DWORD *)(DerivedStorage + 12));
      *(_DWORD *)(DerivedStorage + 216) = 60;
      v6 = *(const char **)v40;
      v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
      v8 = dispatch_queue_create(v6, v7);
      *(_QWORD *)(DerivedStorage + 136) = v8;
      v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, v8);
      *(_QWORD *)(DerivedStorage + 144) = v9;
      *(_QWORD *)handler = MEMORY[0x1E0C809B0];
      *(_QWORD *)&handler[8] = 0x40000000;
      *(_QWORD *)&handler[16] = __fvfbserv_objCreateVirtualFramebuf_block_invoke;
      *(_QWORD *)&v43 = &__block_descriptor_tmp_22_6;
      *((_QWORD *)&v43 + 1) = *(_QWORD *)v41;
      dispatch_source_set_event_handler(v9, handler);
      dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 144), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
      dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 144));
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_vsyncSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_vsyncSourceCancel;
      context.perform = (void (__cdecl *)(void *))fvfbserv_vsyncSourcePerform;
      *(_QWORD *)(DerivedStorage + 160) = CFRunLoopSourceCreate(v2, 0, &context);
      context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hdcpSourceSchedule;
      context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbserv_hdcpSourceCancel;
      context.perform = (void (__cdecl *)(void *))fvfbserv_hdcpSourcePerform;
      *(_QWORD *)(DerivedStorage + 232) = CFRunLoopSourceCreate(v2, 0, &context);
      *(_QWORD *)(v3 + 8 * v1) = *(_QWORD *)v41;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      ++v1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      free(*(void **)v40);
      if (v0 == v1)
      {
        v1 = v0;
        goto LABEL_8;
      }
    }
    v32 = v4;
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)handler = 0;
    v44[0] = OS_LOG_TYPE_DEFAULT;
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v35 = *(_DWORD *)handler;
    if (os_log_type_enabled(v34, v44[0]))
      v36 = v35;
    else
      v36 = v35 & 0xFFFFFFFE;
    if (v36)
    {
      LODWORD(context.version) = 136315650;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)"fvfbserv_getVirtualFramebufs_block_invoke";
      WORD2(context.info) = 1024;
      *(_DWORD *)((char *)&context.info + 6) = 1864;
      WORD1(context.retain) = 1024;
      HIDWORD(context.retain) = v32;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_8:
  fvfbserv_getVirtualFramebufs_framebufCount = v1;
  *(_DWORD *)handler = 0;
  v44[0] = OS_LOG_TYPE_DEFAULT;
  v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v12 = *(_DWORD *)handler;
  if (os_log_type_enabled(v11, v44[0]))
    v13 = v12;
  else
    v13 = v12 & 0xFFFFFFFE;
  if (v13)
  {
    LODWORD(context.version) = 136315394;
    *(CFIndex *)((char *)&context.version + 4) = (CFIndex)"fvfbserv_getVirtualFramebufs_block_invoke";
    WORD2(context.info) = 1024;
    *(_DWORD *)((char *)&context.info + 6) = fvfbserv_getVirtualFramebufs_framebufCount;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (srmonitor_getShared_once != -1)
    dispatch_once(&srmonitor_getShared_once, &__block_literal_global_81);
  if (srmonitor_getShared_monitor_3)
  {
    MEMORY[0x19402EEEC](srmonitor_getShared_monitor_0);
    v14 = srmonitor_getShared_monitor_2;
    v15 = srmonitor_getShared_monitor_2 > 0;
    *(_DWORD *)handler = 0;
    v44[0] = OS_LOG_TYPE_DEFAULT;
    v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v17 = *(_DWORD *)handler;
    if (os_log_type_enabled(v16, v44[0]))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if (v18)
    {
      v19 = "not ";
      if (v14 > 0)
        v19 = "";
      LODWORD(context.version) = 136315394;
      *(CFIndex *)((char *)&context.version + 4) = (CFIndex)"srmonitor_postCurrentState";
      WORD2(context.info) = 2080;
      *(void **)((char *)&context.info + 6) = (void *)v19;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __srmonitor_postCurrentState_block_invoke;
    block[3] = &__block_descriptor_tmp_79_0;
    v47 = v15;
    dispatch_async((dispatch_queue_t)srmonitor_getShared_monitor_1, block);
    MEMORY[0x19402EF04](srmonitor_getShared_monitor_0);
  }
  *(_OWORD *)&context.version = xmmword_1E2FAF870;
  memset(&context.retain, 0, 32);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (fvfb_getProcessType_once != -1)
    dispatch_once(&fvfb_getProcessType_once, &__block_literal_global_13);
  if ((fvfb_getProcessType_procType & 1) == 0)
  {
    *(_DWORD *)v44 = 0;
    v41[0] = OS_LOG_TYPE_DEFAULT;
    v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v38 = *(_DWORD *)v44;
    if (os_log_type_enabled(v37, v41[0]))
      v39 = v38;
    else
      v39 = v38 & 0xFFFFFFFE;
    if (v39)
    {
      *(_DWORD *)handler = 136315394;
      *(_QWORD *)&handler[4] = "fvfbserv_startServer";
      *(_WORD *)&handler[12] = 1024;
      *(_DWORD *)&handler[14] = 1833;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_47;
  }
  *(_DWORD *)v44 = 0;
  v41[0] = OS_LOG_TYPE_DEFAULT;
  v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v22 = *(_DWORD *)v44;
  if (os_log_type_enabled(v21, v41[0]))
    v23 = v22;
  else
    v23 = v22 & 0xFFFFFFFE;
  if (v23)
  {
    *(_DWORD *)handler = 136315394;
    *(_QWORD *)&handler[4] = "fvfbserv_startServer";
    *(_WORD *)&handler[12] = 2080;
    *(_QWORD *)&handler[14] = "com.apple.backboardd.virtualframebuffer";
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  FigCFDictionarySetInt32();
  v24 = FigXPCServerStart();
  if (v24)
  {
    v25 = v24;
    *(_DWORD *)v44 = 0;
    v41[0] = OS_LOG_TYPE_DEFAULT;
    v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v27 = *(_DWORD *)v44;
    if (os_log_type_enabled(v26, v41[0]))
      v28 = v27;
    else
      v28 = v27 & 0xFFFFFFFE;
    if (v28)
    {
      *(_DWORD *)handler = 136315650;
      *(_QWORD *)&handler[4] = "fvfbserv_startServer";
      *(_WORD *)&handler[12] = 2080;
      *(_QWORD *)&handler[14] = "com.apple.backboardd.virtualframebuffer";
      *(_WORD *)&handler[22] = 1024;
      LODWORD(v43) = v25;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)v44 = 1;
  FigNote_GetValue();
  if (!*(_DWORD *)v44 && !FigNote_ChangeValue() && dword_1ECDC8940)
  {
    *(_DWORD *)v41 = 0;
    v40[0] = OS_LOG_TYPE_DEFAULT;
    v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v30 = *(_DWORD *)v41;
    if (os_log_type_enabled(v29, v40[0]))
      v31 = v30;
    else
      v31 = v30 & 0xFFFFFFFE;
    if (v31)
    {
      *(_DWORD *)handler = 136315906;
      *(_QWORD *)&handler[4] = "fvfbserv_setFigXPCNoteLevel";
      *(_WORD *)&handler[12] = 2112;
      *(_QWORD *)&handler[14] = CFSTR("figxpc_trace");
      *(_WORD *)&handler[22] = 1024;
      LODWORD(v43) = *(_DWORD *)v44;
      WORD2(v43) = 1024;
      *(_DWORD *)((char *)&v43 + 6) = 1;
      _os_log_send_and_compose_impl();
    }
LABEL_47:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t fvfbserv_hotplugSourceSchedule(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[13])
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[13] = a2;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t fvfbserv_hotplugSourceCancel(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[13] != a2)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[13] = 0;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t fvfbserv_hotplugSourcePerform()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(BOOL, uint64_t);
  int v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v2 = (uint64_t (*)(BOOL, uint64_t))DerivedStorage[15];
  v1 = DerivedStorage[16];
  v3 = *((_DWORD *)DerivedStorage + 2);
  MEMORY[0x19402EF04](*DerivedStorage);
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v2)
    return v2(v3 != 0, v1);
  return result;
}

void __fvfbserv_objCreateVirtualFramebuf_block_invoke()
{
  uint64_t DerivedStorage;
  int data;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  data = dispatch_source_get_data(*(dispatch_source_t *)(DerivedStorage + 144));
  if (data >= 1)
  {
    v2 = *(_QWORD *)(DerivedStorage + 192) + *(_QWORD *)(DerivedStorage + 200) * data;
    ++*(_QWORD *)(DerivedStorage + 184);
    *(_QWORD *)(DerivedStorage + 192) = v2;
    if (dword_1ECDC8940 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_QWORD *)(DerivedStorage + 152))
    {
      CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(DerivedStorage + 160));
      CFRunLoopWakeUp(*(CFRunLoopRef *)(DerivedStorage + 152));
    }
  }
}

void fvfbserv_vsyncSourceSchedule(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  _QWORD block[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_vsyncSourceSchedule_block_invoke;
  block[3] = &__block_descriptor_tmp_76_1;
  block[4] = DerivedStorage;
  block[5] = a2;
  dispatch_sync(v5, block);
}

void fvfbserv_vsyncSourceCancel(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  _QWORD block[6];
  os_log_type_t type;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    v8 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_vsyncSourceCancel_block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = DerivedStorage;
  block[5] = a2;
  dispatch_sync(v5, block);
}

void fvfbserv_vsyncSourcePerform()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD block[10];
  os_log_type_t type;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (dword_1ECDC8940 >= 2)
  {
    v6 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_vsyncSourcePerform_block_invoke;
  block[3] = &unk_1E2FAF7F0;
  block[4] = &v23;
  block[5] = &v19;
  block[6] = &v15;
  block[7] = &v11;
  block[8] = &v7;
  block[9] = DerivedStorage;
  dispatch_sync(v2, block);
  v3 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24[3];
  if (v3)
    v3(v16[3], v12[3], v8[3], v20[3]);
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
}

uint64_t fvfbserv_hdcpSourceSchedule(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[28])
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[28] = a2;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t fvfbserv_hdcpSourceCancel(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[28] != a2)
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[28] = 0;
  DerivedStorage[30] = 0;
  DerivedStorage[31] = 0;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t fvfbserv_hdcpSourcePerform()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(uint64_t, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = DerivedStorage[31];
  v3 = (uint64_t (*)(uint64_t, uint64_t))DerivedStorage[30];
  DerivedStorage[30] = 0;
  DerivedStorage[31] = 0;
  result = MEMORY[0x19402EF04](*DerivedStorage);
  if (v3)
    return v3(v1, 1);
  return result;
}

void fvfbserv_objFinalize()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  __break(1u);
}

__CFString *fvfbserv_objCopyDebugDesc(uint64_t a1)
{
  return fvfbserv_objCopyDescription(a1, 0);
}

uint64_t fvfbserv_objCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void **v8;
  const void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t UpTimeNanoseconds;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = 0;
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    if (!DerivedStorage[32] || !DerivedStorage[33])
    {
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = 3758097097;
      goto LABEL_13;
    }
    if (CFEqual(a2, CFSTR("SupportsRotation")))
    {
      v8 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*((_BYTE *)DerivedStorage + 60))
        v8 = (const void **)MEMORY[0x1E0C9AE40];
      v9 = *v8;
      goto LABEL_12;
    }
    if (CFEqual(a2, CFSTR("VirtualDisplayMode")))
    {
      v9 = (const void *)DerivedStorage[3];
      if (v9)
      {
LABEL_12:
        v10 = 0;
        *a4 = CFRetain(v9);
        goto LABEL_13;
      }
    }
    else if (!CFEqual(a2, CFSTR("DisplayContainerID"))
           && !CFEqual(a2, CFSTR("Transport"))
           && !CFEqual(a2, CFSTR("Time"))
           && !CFEqual(a2, CFSTR("DisplayAttributes")))
    {
      v12 = FigXPCCreateBasicMessage();
      if ((_DWORD)v12 || (v12 = FigXPCMessageSetCFString(), (_DWORD)v12))
      {
        v10 = v12;
        v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_13;
      }
      v13 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], v22, &v21);
      if ((_DWORD)v13)
      {
        v10 = v13;
        v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
      }
      else
      {
        v10 = FigXPCMessageCopyCFObject();
        if (!(_DWORD)v10)
        {
          *a4 = 0;
          goto LABEL_13;
        }
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_13;
    }
    v10 = 4294954512;
    goto LABEL_13;
  }
  v10 = 3758097111;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if ((unint64_t)(UpTimeNanoseconds - DerivedStorage[12]) >= 0xF4241)
  {
    v16 = UpTimeNanoseconds;
    v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    DerivedStorage[12] = v16;
  }
LABEL_13:
  MEMORY[0x19402EF04](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t fvfbserv_objSetProperty()
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
    v2 = 4294954512;
  else
    v2 = 3758097111;
  MEMORY[0x19402EF04](*DerivedStorage);
  return v2;
}

__CFString *fvfbserv_objCopyDescription(uint64_t a1, int a2)
{
  double *DerivedStorage;
  const __CFAllocator *v4;
  __CFString *Mutable;
  uint64_t v6;
  uint64_t v7;
  CFAbsoluteTime v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  const char *v16;
  CFStringRef StringWithAbsoluteTime;
  CFStringRef v18;
  const char *v19;
  const char *v20;

  DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (fvfbserv_objCopyDescription_once == -1)
  {
    if (a2)
      goto LABEL_3;
LABEL_31:
    CFStringAppendFormat(Mutable, 0, CFSTR("<VirtualFramebuffer %d state: %d>"), *((unsigned int *)DerivedStorage + 3), *((unsigned int *)DerivedStorage + 2));
    return Mutable;
  }
  dispatch_once(&fvfbserv_objCopyDescription_once, &__block_literal_global_24_2);
  if (!a2)
    goto LABEL_31;
LABEL_3:
  MEMORY[0x19402EEEC](*(_QWORD *)DerivedStorage);
  v6 = *((unsigned int *)DerivedStorage + 2);
  v7 = *((unsigned int *)DerivedStorage + 3);
  v8 = DerivedStorage[2];
  v9 = *((_QWORD *)DerivedStorage + 33);
  v10 = *((_QWORD *)DerivedStorage + 6);
  v11 = *((unsigned int *)DerivedStorage + 14);
  v12 = (const void *)*((_QWORD *)DerivedStorage + 3);
  if (v12)
    v13 = CFRetain(v12);
  else
    v13 = 0;
  v14 = (const void *)*((_QWORD *)DerivedStorage + 4);
  if (v14)
    v15 = CFRetain(v14);
  else
    v15 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)DerivedStorage);
  if (v6 > 2)
    v16 = "unknown";
  else
    v16 = FVFBStateNameForState[v6];
  CFStringAppendFormat(Mutable, 0, CFSTR("vfb %d: state: %s"), v7, v16);
  if (v9)
  {
    StringWithAbsoluteTime = CFDateFormatterCreateStringWithAbsoluteTime(v4, (CFDateFormatterRef)fvfbserv_objCopyDescription_dateFormatter, v8);
    v18 = StringWithAbsoluteTime;
    v19 = "activated";
    if (!(_DWORD)v6)
      v19 = "reserved";
    CFStringAppendFormat(Mutable, 0, CFSTR(", %s at %@"), v19, StringWithAbsoluteTime);
    if (v18)
      CFRelease(v18);
    if ((int)v11 >= 1)
    {
      FigServer_CopyProcessName();
      CFStringAppendFormat(Mutable, 0, CFSTR(" by process %@ (pid %d)"), 0, v11);
    }
    if (v15)
      CFStringAppendFormat(Mutable, 0, CFSTR(", client: %@"), v15);
    v20 = "yes";
    if (!v10)
      v20 = "no";
    CFStringAppendFormat(Mutable, 0, CFSTR(", protected: %s"), v20);
    if (!v13)
      goto LABEL_27;
    CFStringAppendFormat(Mutable, 0, CFSTR(", display mode: %@"), v13);
  }
  else if (!v13)
  {
    goto LABEL_27;
  }
  CFRelease(v13);
LABEL_27:
  if (v15)
    CFRelease(v15);
  return Mutable;
}

CFDateFormatterRef __fvfbserv_objCopyDescription_block_invoke()
{
  CFDateFormatterRef result;

  result = CFDateFormatterCreateISO8601Formatter((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0xFF3uLL);
  fvfbserv_objCopyDescription_dateFormatter = (uint64_t)result;
  return result;
}

uint64_t fvfb_sendMessageCreatingReply(_xpc_connection_s *a1, void *a2, _QWORD *a3)
{
  xpc_object_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int64_t int64;
  uint64_t v7;
  NSObject *v8;

  v4 = xpc_connection_send_message_with_reply_sync(a1, a2);
  if (MEMORY[0x194031C7C]() != MEMORY[0x1E0C812F8])
  {
    if (MEMORY[0x194031C7C](v4) == MEMORY[0x1E0C81310])
    {
      xpc_dictionary_get_string(v4, (const char *)*MEMORY[0x1E0C81270]);
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v7 = 4294951141;
LABEL_7:
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  int64 = xpc_dictionary_get_int64(v4, (const char *)*MEMORY[0x1E0CA3690]);
  v7 = int64;
  if ((_DWORD)int64)
  {
    if ((_DWORD)int64 == -536870187)
      goto LABEL_8;
    goto LABEL_7;
  }
  *a3 = v4;
LABEL_8:
  FigXPCRelease();
  return v7;
}

uint64_t fvfbserv_objGetSupportedDigitalOutModes(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  const void *v8;
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (!*((_DWORD *)DerivedStorage + 2))
  {
    if (dword_1ECDC8940)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v8 = (const void *)DerivedStorage[9];
    if (v8)
    {
      CFRelease(v8);
      DerivedStorage[9] = 0;
    }
    v9 = (const void *)DerivedStorage[10];
    if (v9)
    {
      CFRelease(v9);
      DerivedStorage[10] = 0;
    }
  }
  if (a2)
    *a2 = DerivedStorage[9];
  if (a3)
    *a3 = DerivedStorage[10];
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objSetDigitalOutMode(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  xpc_object_t xdict;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (int *)CMBaseObjectGetDerivedStorage();
  v14 = 0;
  xdict = 0;
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)DerivedStorage);
  if (DerivedStorage[2])
  {
    if (!*((_QWORD *)DerivedStorage + 32) || !*((_QWORD *)DerivedStorage + 33))
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v8 = 3758097097;
      goto LABEL_9;
    }
    v7 = FigXPCCreateBasicMessage();
    if ((_DWORD)v7)
    {
      v8 = v7;
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      xpc_dictionary_set_uint64(xdict, "ColorModeID", a2);
      xpc_dictionary_set_uint64(xdict, "TimingModeID", a3);
      v8 = fvfb_sendMessageCreatingReply(*((_xpc_connection_s **)DerivedStorage + 32), xdict, &v14);
      if (!(_DWORD)v8)
      {
        FigDisplayModes_ExtractVSyncRateFromTimingMode(*((const __CFArray **)DerivedStorage + 10), a3, DerivedStorage + 54);
        goto LABEL_9;
      }
      v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_9;
  }
  if (dword_1ECDC8940)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v8 = 0;
LABEL_9:
  MEMORY[0x19402EF04](*(_QWORD *)DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v8;
}

uint64_t fvfbserv_objSubmitSurface(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, int a10, int a11, int a12, uint64_t a13, int a14)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v29;
  uint64_t v30;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  _QWORD bytes[9];
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  xpc_object_t xdict;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v43 = 0;
  xdict = 0;
  bytes[0] = a13;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  *(double *)&bytes[3] = a3;
  *(double *)&bytes[4] = a4;
  *(double *)&bytes[5] = a5;
  *(double *)&bytes[6] = a6;
  *(double *)&bytes[7] = a7;
  *(double *)&bytes[8] = a8;
  v39 = a11;
  v40 = a10;
  v41 = a12;
  v42 = a14;
  if (dword_1ECDC8940 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    if (a10)
    {
      v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v30 = 4294955226;
      goto LABEL_9;
    }
    if (!DerivedStorage[32] || !DerivedStorage[33])
    {
      v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v30 = 3758097097;
      goto LABEL_9;
    }
    v29 = FigXPCCreateBasicMessage();
    if ((_DWORD)v29)
    {
      v30 = v29;
      v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      xpc_dictionary_set_data(xdict, "SurfaceData", bytes, 0x58uLL);
      v30 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v43);
      if (!(_DWORD)v30)
        goto LABEL_9;
      v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_9;
  }
  if (dword_1ECDC8940)
  {
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v30 = 0;
LABEL_9:
  MEMORY[0x19402EF04](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v30;
}

uint64_t fvfbserv_objSwapWaitWithTimeout()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1ECDC8940 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t fvfbserv_objSwapWaitSurfaceTimeout()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1ECDC8940 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t fvfbserv_objGetVSyncRunLoopSource()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(_QWORD *)(DerivedStorage + 160);
}

uint64_t fvfbserv_objEnableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  uint64_t v8;
  NSObject *v10;
  _QWORD block[8];
  os_log_type_t type;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    v7 = DerivedStorage[17];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvfbserv_objEnableVSyncNotifications_block_invoke;
    block[3] = &unk_1E2FAF6E8;
    block[6] = a2;
    block[7] = a3;
    block[4] = &v14;
    block[5] = DerivedStorage;
    dispatch_sync(v7, block);
  }
  else
  {
    v13 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *((_DWORD *)v15 + 6) = -536870185;
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  v8 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v8;
}

uint64_t fvfbserv_objDisableVSyncNotifications()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v2;
  _QWORD block[5];
  os_log_type_t type;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    v6 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = *(NSObject **)(DerivedStorage + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_objDisableVSyncNotifications_block_invoke;
  block[3] = &__block_descriptor_tmp_59_2;
  block[4] = DerivedStorage;
  dispatch_sync(v2, block);
  return 0;
}

uint64_t fvfbserv_objGetHotPlugRunLoopSource()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(_QWORD *)(DerivedStorage + 112);
}

uint64_t fvfbserv_objEnableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v7;
  uint64_t v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[15])
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v8 = 4294955219;
  }
  else
  {
    DerivedStorage[15] = a2;
    DerivedStorage[16] = a3;
    if (DerivedStorage[13])
    {
      CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
      CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
    }
    v8 = 0;
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v8;
}

uint64_t fvfbserv_objDisableHotPlugDetectNotifications()
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  DerivedStorage[15] = 0;
  DerivedStorage[16] = 0;
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objGetHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  fvfb_getHDCPDownstreamState(*((_DWORD *)DerivedStorage + 2) == 2, a2);
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objEnableMirroring(uint64_t a1, int a2)
{
  _QWORD *DerivedStorage;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  xpc_object_t xdict;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v12 = 0;
  xdict = 0;
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (!*((_DWORD *)DerivedStorage + 2))
  {
    if (dword_1ECDC8940)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_17;
  }
  if (*((_DWORD *)DerivedStorage + 22) == a2)
  {
LABEL_17:
    v6 = 0;
    goto LABEL_10;
  }
  *((_DWORD *)DerivedStorage + 22) = -1;
  if (!DerivedStorage[32] || !DerivedStorage[33])
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 3758097097;
    goto LABEL_10;
  }
  if (dword_1ECDC8940)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v5 = FigXPCCreateBasicMessage();
  if ((_DWORD)v5)
  {
    v6 = v5;
    v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
LABEL_16:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_10;
  }
  xpc_dictionary_set_BOOL(xdict, "Enabled", a2);
  v6 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v12);
  if ((_DWORD)v6)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    goto LABEL_16;
  }
  *((_DWORD *)DerivedStorage + 22) = a2;
LABEL_10:
  MEMORY[0x19402EF04](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t fvfbserv_objAcquireWritebackSurface(double a1, double a2, uint64_t a3, int a4, uint64_t a5, int a6, IOSurfaceID *a7, uint64_t *a8)
{
  _QWORD *DerivedStorage;
  BOOL v16;
  unsigned int v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v19;
  uint64_t v20;
  uint64_t v21;
  xpc_object_t v22;
  xpc_object_t value;
  __IOSurface *v24;
  __IOSurface *v25;
  IOSurfaceID ID;
  NSObject *v27;
  uint64_t v28;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  _QWORD bytes[3];
  int v38;
  int v39;
  uint64_t v40;
  xpc_object_t v41;
  xpc_object_t xdict;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v41 = 0;
  xdict = 0;
  if (a7)
    v16 = a8 == 0;
  else
    v16 = 1;
  v17 = !v16;
  bytes[0] = a5;
  *(double *)&bytes[1] = a1;
  *(double *)&bytes[2] = a2;
  v38 = a4;
  v39 = a6;
  v40 = v17;
  if (dword_1ECDC8940 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  v19 = *((_DWORD *)DerivedStorage + 2);
  if (v19 != 2)
  {
    if (v19)
    {
      v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v28 = 3758097112;
    }
    else
    {
      v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v28 = 3758097111;
    }
    goto LABEL_22;
  }
  if (!DerivedStorage[32] || !DerivedStorage[33])
  {
    v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
LABEL_33:
    v28 = 3758097097;
    goto LABEL_34;
  }
  v20 = FigXPCCreateBasicMessage();
  if ((_DWORD)v20)
  {
    v28 = v20;
    v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    goto LABEL_34;
  }
  xpc_dictionary_set_data(xdict, "SurfaceData", bytes, 0x28uLL);
  v21 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v41);
  if ((_DWORD)v21)
  {
    v28 = v21;
    if ((_DWORD)v21 == -536870187)
      goto LABEL_22;
    v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
LABEL_34:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_22;
  }
  if (!v17)
  {
    v28 = 0;
LABEL_22:
    MEMORY[0x19402EF04](*DerivedStorage);
    goto LABEL_24;
  }
  v22 = v41;
  value = xpc_dictionary_get_value(v41, "Surface");
  if (!value || (v24 = IOSurfaceLookupFromXPCObject(value)) == 0)
  {
    v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    goto LABEL_33;
  }
  v25 = v24;
  ID = IOSurfaceGetID(v24);
  if (ID != xpc_dictionary_get_uint64(v22, "SurfaceID"))
  {
    v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[8], (const void *)ID, v25);
  *a7 = ID;
  *a8 = xpc_dictionary_get_uint64(v22, "SurfaceRefCon");
  if (dword_1ECDC8940 >= 2)
  {
    v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  CFRelease(v25);
  v28 = 0;
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  return v28;
}

uint64_t fvfbserv_objRelinquishWritebackSurface(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t v10;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t bytes;
  unsigned int v18;
  int v19;
  uint64_t v20;
  xpc_object_t xdict;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v20 = 0;
  xdict = 0;
  bytes = a3;
  v18 = a2;
  v19 = a4;
  if (dword_1ECDC8940 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    if (!a2 || !a3)
    {
      v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = 4294955226;
      goto LABEL_10;
    }
    if (!DerivedStorage[32] || !DerivedStorage[33])
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = 3758097097;
      goto LABEL_10;
    }
    CFDictionaryRemoveValue((CFMutableDictionaryRef)DerivedStorage[8], (const void *)a2);
    v9 = FigXPCCreateBasicMessage();
    if ((_DWORD)v9)
    {
      v10 = v9;
      v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      xpc_dictionary_set_data(xdict, "SurfaceData", &bytes, 0x10uLL);
      v10 = fvfb_sendMessageCreatingReply((_xpc_connection_s *)DerivedStorage[32], xdict, &v20);
      if (!(_DWORD)v10)
        goto LABEL_10;
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_10;
  }
  if (dword_1ECDC8940)
  {
    v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v10 = 0;
LABEL_10:
  MEMORY[0x19402EF04](*DerivedStorage);
  FigXPCRelease();
  FigXPCRelease();
  return v10;
}

uint64_t fvfbserv_objGetHDCPRunLoopSource()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(_QWORD *)(DerivedStorage + 232);
}

uint64_t fvfbserv_objHDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  DerivedStorage[30] = a4;
  DerivedStorage[31] = a5;
  if (DerivedStorage[28])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[29]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[28]);
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t fvfbserv_objHDCPGetReply(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t result;
  NSObject *v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*a3 <= 0xFuLL)
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  else
  {
    MEMORY[0x19402EEEC](*DerivedStorage);
    fvfb_getHDCPDownstreamState(*((_DWORD *)DerivedStorage + 2) == 2, a2);
    MEMORY[0x19402EF04](*DerivedStorage);
    result = 0;
    *a3 = 16;
  }
  return result;
}

uint64_t fvfbserv_objGetProtectionOptions(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    MEMORY[0x19402EEEC](*DerivedStorage);
    *a2 = DerivedStorage[6];
    MEMORY[0x19402EF04](*DerivedStorage);
    return 0;
  }
  else
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
}

void __fvfbserv_objEnableVSyncNotifications_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  NSObject *v7;
  dispatch_time_t v8;

  v2 = a1[5];
  if (*(_QWORD *)(v2 + 168))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12077;
  }
  else
  {
    *(_QWORD *)(v2 + 168) = a1[6];
    *(_QWORD *)(a1[5] + 176) = a1[7];
    *(_QWORD *)(a1[5] + 208) = 0x3B9ACA00uLL / *(int *)(a1[5] + 216);
    *(_QWORD *)(a1[5] + 200) = FigNanosecondsToHostTime();
    v4 = mach_absolute_time();
    v5 = (_QWORD *)a1[5];
    v6 = v5[26];
    v5[24] = v5[25] + v4;
    v7 = v5[18];
    v8 = dispatch_time(0, v6);
    dispatch_source_set_timer(v7, v8, *(_QWORD *)(a1[5] + 208), 0xF4240uLL);
  }
}

void __fvfbserv_objDisableVSyncNotifications_block_invoke(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176) = 0;
  dispatch_source_set_timer(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 144), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
}

void fvfb_getHDCPDownstreamState(int a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0x1000150434448;
  *(_DWORD *)(a2 + 8) = 0x8000000;
  *(_BYTE *)(a2 + 12) = 0;
  *(_WORD *)(a2 + 14) = 0;
  if (!a1)
    goto LABEL_5;
  if (fvfb_demoModeEnabled_once != -1)
    dispatch_once(&fvfb_demoModeEnabled_once, &__block_literal_global_61);
  if (fvfb_demoModeEnabled_isDemoModeEnabled)
LABEL_5:
    *(_DWORD *)(a2 + 8) = 0;
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void __fvfb_demoModeEnabled_block_invoke()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (fvfb_isInternalBuild_once != -1)
    dispatch_once(&fvfb_isInternalBuild_once, &__block_literal_global_66);
  if (fvfb_isInternalBuild_isInternalBuild)
    fvfb_demoModeEnabled_isDemoModeEnabled = CFPreferencesGetAppBooleanValue(CFSTR("EnableTetheredDisplayPortMode"), (CFStringRef)*MEMORY[0x1E0C9B228], 0);
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t __fvfb_isInternalBuild_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  fvfb_isInternalBuild_isInternalBuild = result;
  return result;
}

uint64_t __fvfbserv_vsyncSourceSchedule_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v2 + 152))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = *(_QWORD *)(v1 + 32);
  }
  *(_QWORD *)(v2 + 152) = *(_QWORD *)(v1 + 40);
  return result;
}

uint64_t __fvfbserv_vsyncSourceCancel_block_invoke(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v1 + 152) != *(_QWORD *)(result + 40))
  {
    v2 = result;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    v1 = *(_QWORD *)(v2 + 32);
  }
  *(_QWORD *)(v1 + 152) = 0;
  return result;
}

_QWORD *__fvfbserv_vsyncSourcePerform_block_invoke(_QWORD *result)
{
  _QWORD *v1;

  *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 24) = *(_QWORD *)(result[9] + 168);
  *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = *(_QWORD *)(result[9] + 176);
  v1 = (_QWORD *)result[9];
  *(_QWORD *)(*(_QWORD *)(result[6] + 8) + 24) = v1[23];
  *(_QWORD *)(*(_QWORD *)(result[7] + 8) + 24) = v1[24];
  *(_QWORD *)(*(_QWORD *)(result[8] + 8) + 24) = v1[25];
  return result;
}

uint64_t __srmonitor_postCurrentState_block_invoke(uint64_t a1)
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(*(unsigned __int8 *)(a1 + 32));
}

uint64_t __srmonitor_getShared_block_invoke()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  srmonitor_getShared_monitor_3 = (_DWORD)result != 0;
  if ((_DWORD)result)
  {
    srmonitor_getShared_monitor_0 = FigSimpleMutexCreate();
    result = (uint64_t)dispatch_queue_create("ScreenRecordingMonitorNotifications", 0);
    srmonitor_getShared_monitor_1 = result;
    srmonitor_getShared_monitor_2 = 0;
  }
  return result;
}

uint64_t fvfbserv_handleClientMessage()
{
  uint64_t OpCode;
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
  {
    v3 = OpCode;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    goto LABEL_6;
  }
  if (dword_1ECDC8940 >= 3)
  {
    v1 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v3 = 4294955226;
  if (dword_1ECDC8940 >= 3)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
LABEL_6:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v3;
}

uint64_t fvfbserv_getAndRetainFramebufFromMessage(int a1, xpc_object_t xdict)
{
  uint64_t v2;
  NSObject *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;

  xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v2 = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)v2)
  {
    v6 = v2;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return v6;
}

uint64_t fvfbserv_startVirtualFramebuf(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v5;
  int v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (!*((_DWORD *)DerivedStorage + 2) && DerivedStorage[32] && DerivedStorage[33])
  {
    v5 = FigXPCMessageCopyCFArray();
    if ((_DWORD)v5 || (v5 = FigXPCMessageCopyCFArray(), (_DWORD)v5))
    {
      v10 = v5;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      FigXPCMessageCopyCFDictionary();
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetInt32IfPresent();
      if (xpc_dictionary_get_BOOL(a3, "SuspendOnStart"))
        v6 = 1;
      else
        v6 = 2;
      *((_DWORD *)DerivedStorage + 2) = v6;
      *((CFAbsoluteTime *)DerivedStorage + 2) = CFAbsoluteTimeGetCurrent();
      *((_BYTE *)DerivedStorage + 60) = xpc_dictionary_get_BOOL(a3, "Rotation");
      DerivedStorage[6] = xpc_dictionary_get_uint64(a3, "ProtFlags");
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetInt32IfPresent();
      DerivedStorage[3] = 0;
      FigXPCMessageCopyCFString();
      FigXPCMessageCopyCFData();
      v7 = (const void *)DerivedStorage[9];
      DerivedStorage[9] = 0;
      if (v7)
        CFRelease(v7);
      v8 = (const void *)DerivedStorage[10];
      DerivedStorage[10] = 0;
      if (v8)
        CFRelease(v8);
      *((_DWORD *)DerivedStorage + 22) = -1;
      FigCFDictionaryGetInt32IfPresent();
      *((_BYTE *)DerivedStorage + 61) = 0;
      if (DerivedStorage[13])
      {
        CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
        CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
      }
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v10 = 0;
    }
  }
  else
  {
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v10 = 4294955226;
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v10;
}

uint64_t fvfbserv_suspendVirtualFramebuf()
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  NSObject *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2))
  {
    *((_DWORD *)DerivedStorage + 2) = 1;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = 0;
  }
  else
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = 4294955226;
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v2;
}

uint64_t fvfbserv_resumeVirtualFramebuf()
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v2;
  NSObject *v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (*((_DWORD *)DerivedStorage + 2) == 1)
  {
    *((_DWORD *)DerivedStorage + 2) = 2;
    *((_DWORD *)DerivedStorage + 22) = -1;
    if (DerivedStorage[13])
    {
      CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
      CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
    }
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = 0;
  }
  else
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v2 = 4294955226;
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return v2;
}

uint64_t fvfbserv_clearVirtualFramebuf()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  BOOL v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _QWORD block[5];
  os_log_type_t type;
  unsigned int v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  DerivedStorage[6] = 0;
  *((_DWORD *)DerivedStorage + 14) = 0;
  v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  CFDictionaryRemoveAllValues((CFMutableDictionaryRef)DerivedStorage[8]);
  *((_DWORD *)DerivedStorage + 22) = -1;
  DerivedStorage[33] = 0;
  v4 = (void *)DerivedStorage[32];
  if (v4)
  {
    DerivedStorage[32] = 0;
    xpc_release(v4);
  }
  *((_DWORD *)DerivedStorage + 2) = 0;
  if (*((_BYTE *)DerivedStorage + 61))
  {
    if (srmonitor_getShared_once != -1)
      dispatch_once(&srmonitor_getShared_once, &__block_literal_global_81);
    if (srmonitor_getShared_monitor_3)
    {
      if (dword_1ECDC8940)
      {
        v16 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EEEC](srmonitor_getShared_monitor_0);
      v6 = srmonitor_getShared_monitor_2 == 1;
      if (srmonitor_getShared_monitor_2 >= 1)
      {
        --srmonitor_getShared_monitor_2;
        if (v6)
        {
          v16 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          dispatch_async((dispatch_queue_t)srmonitor_getShared_monitor_1, &__block_literal_global_88);
        }
      }
      MEMORY[0x19402EF04](srmonitor_getShared_monitor_0);
    }
    *((_BYTE *)DerivedStorage + 61) = 0;
  }
  v8 = DerivedStorage[17];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbserv_clearVirtualFramebuf_block_invoke;
  block[3] = &__block_descriptor_tmp_86_3;
  block[4] = DerivedStorage;
  dispatch_sync(v8, block);
  if (DerivedStorage[13])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[14]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[13]);
  }
  v16 = 0;
  type = OS_LOG_TYPE_DEFAULT;
  v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v10 = v16;
  if (os_log_type_enabled(v9, type))
    v11 = v10;
  else
    v11 = v10 & 0xFFFFFFFE;
  if (v11)
  {
    v12 = *((_DWORD *)DerivedStorage + 3);
    v17 = 136315394;
    v18 = "fvfbserv_clearVirtualFramebuf";
    v19 = 1024;
    v20 = v12;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return MEMORY[0x19402EF04](*DerivedStorage);
}

void __fvfbserv_clearVirtualFramebuf_block_invoke(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 168) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176) = 0;
  dispatch_source_set_timer(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 144), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
}

uint64_t __srmonitor_recordingStopped_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(0);
}

uint64_t __srmonitor_recordingStarted_block_invoke()
{
  return FigOutputMonitorSetVirtualDisplayIsProbablyBeingRecorded(1uLL);
}

uint64_t __fvfbintern_getVirtualFramebuf_block_invoke()
{
  const __CFAllocator *v0;
  _QWORD *DerivedStorage;
  NSObject *v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v5;
  CFRunLoopSourceContext context;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigVirtualFramebufferGetClassID();
  if (CMDerivedObjectCreate())
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = FigSimpleMutexCreate();
    memset(&context, 0, 56);
    context.schedule = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbintern_hdcpSourceSchedule;
    context.cancel = (void (__cdecl *)(void *, CFRunLoopRef, CFRunLoopMode))fvfbintern_hdcpSourceCancel;
    context.perform = (void (__cdecl *)(void *))fvfbintern_hdcpSourcePerform;
    DerivedStorage[2] = CFRunLoopSourceCreate(v0, 0, &context);
    fvfbintern_getVirtualFramebuf_framebuf = 0;
    v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  }
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

uint64_t fvfbintern_hdcpSourceSchedule(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[1])
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = a2;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t fvfbintern_hdcpSourceCancel(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  if (DerivedStorage[1] != a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage[1] = 0;
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  return MEMORY[0x19402EF04](*DerivedStorage);
}

uint64_t fvfbintern_hdcpSourcePerform()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t result;
  uint64_t (*v3)(uint64_t, uint64_t);

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*DerivedStorage);
  v1 = DerivedStorage[4];
  v3 = (uint64_t (*)(uint64_t, uint64_t))DerivedStorage[3];
  DerivedStorage[3] = 0;
  DerivedStorage[4] = 0;
  result = MEMORY[0x19402EF04](*DerivedStorage);
  if (v3)
    return v3(v1, 1);
  return result;
}

void fvfbintern_objFinalize()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  __break(1u);
}

CFStringRef fvfbintern_objCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigVirtualFramebufferInternal %p retainCount: %ld>"), a1, v3);
}

uint64_t fvfbintern_objGetHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  _BOOL4 v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v9;

  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
    goto LABEL_11;
  if (fvfb_getClient_once != -1)
    dispatch_once(&fvfb_getClient_once, &__block_literal_global_130);
  v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v4)
  {
LABEL_11:
    v7 = v4;
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    v5 = xpc_dictionary_get_BOOL(0, "IsAnyRunning");
    if (dword_1ECDC8940)
    {
      v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fvfb_getHDCPDownstreamState(v5, a2);
    v7 = 0;
  }
  FigXPCRelease();
  FigXPCRelease();
  return v7;
}

uint64_t fvfbintern_objGetHDCPRunLoopSource()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return *(_QWORD *)(DerivedStorage + 16);
}

uint64_t fvfbintern_objHDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*DerivedStorage);
  DerivedStorage[3] = a4;
  DerivedStorage[4] = a5;
  if (DerivedStorage[1])
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)DerivedStorage[2]);
    CFRunLoopWakeUp((CFRunLoopRef)DerivedStorage[1]);
  }
  MEMORY[0x19402EF04](*DerivedStorage);
  return 0;
}

uint64_t fvfbintern_objHDCPGetReply(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t HDCPDownstreamState;
  NSObject *v8;
  NSObject *v9;

  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    a1 = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2 && a3 && *a3 > 0xFuLL)
  {
    HDCPDownstreamState = fvfbintern_objGetHDCPDownstreamState(a1, a2);
    if ((_DWORD)HDCPDownstreamState)
    {
      v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      *a3 = 16;
    }
  }
  else
  {
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955226;
  }
  return HDCPDownstreamState;
}

uint64_t fvfbintern_objGetProtectionOptions(uint64_t a1, uint64_t *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;
  uint64_t v5;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;

  if (dword_1ECDC8940)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v5 = 4294955226;
    goto LABEL_9;
  }
  v4 = FigXPCCreateBasicMessage();
  if ((_DWORD)v4)
  {
    v5 = v4;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
LABEL_13:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_9;
  }
  if (fvfb_getClient_once != -1)
    dispatch_once(&fvfb_getClient_once, &__block_literal_global_130);
  v5 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v5)
  {
    v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    goto LABEL_13;
  }
  *a2 = xpc_dictionary_get_uint64(0, "ProtOptions");
LABEL_9:
  FigXPCRelease();
  FigXPCRelease();
  return v5;
}

void fvfbsrc_objFinalize()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (*(_DWORD *)DerivedStorage || *(_QWORD *)(DerivedStorage + 24))
  {
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    __break(1u);
  }
  else
  {
    v2 = *(const void **)(DerivedStorage + 40);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 48);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 56);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    v5 = *(NSObject **)(DerivedStorage + 32);
    if (v5)
    {
      dispatch_release(v5);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
  }
}

CFStringRef fvfbsrc_objCopyDebugDesc(const void *a1)
{
  unsigned int *DerivedStorage;
  const __CFAllocator *v3;
  uint64_t v4;
  CFIndex v5;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = *DerivedStorage;
  v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v3, 0, CFSTR("<VirtualFramebufSource %p state: %d retainCount: %ld>"), a1, v4, v5);
}

uint64_t fvfbsrc_objCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v8;
  uint64_t result;
  uint64_t v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, const void *, uint64_t, _QWORD *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(CFSTR("sourceType"), a2))
  {
    v8 = CFRetain(CFSTR("Screen"));
    result = 0;
    *a4 = v8;
  }
  else
  {
    v10 = *(_QWORD *)(DerivedStorage + 24);
    if (v10)
    {
      CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(v10);
      v12 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v12)
        return v12(CMBaseObject, a2, a3, a4);
      else
        return 4294954514;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 3758097097;
    }
  }
  return result;
}

uint64_t fvfbsrc_objSetProperty()
{
  return 4294954512;
}

uint64_t fvfbsrc_objPlugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v10;
  unsigned int v11;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvfbsrc_objPlugProcessor_block_invoke;
    block[3] = &unk_1E2FAFB38;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v15;
    dispatch_sync(v4, block);
    v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      v14 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if (v11)
      {
        v19 = 136315650;
        v20 = "fvfbsrc_objPlugProcessor";
        v21 = 1024;
        v22 = 2349;
        v23 = 1024;
        v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v14 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvfbsrc_objUnplugProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v10;
  unsigned int v11;
  _QWORD block[7];
  os_log_type_t type;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = *(NSObject **)(DerivedStorage + 32);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __fvfbsrc_objUnplugProcessor_block_invoke;
    block[3] = &unk_1E2FAFB60;
    block[5] = DerivedStorage;
    block[6] = a2;
    block[4] = &v15;
    dispatch_sync(v4, block);
    v5 = *((_DWORD *)v16 + 6);
    if (v5)
    {
      v14 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v10 = v14;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if (v11)
      {
        v19 = 136315650;
        v20 = "fvfbsrc_objUnplugProcessor";
        v21 = 1024;
        v22 = 2369;
        v23 = 1024;
        v24 = v5;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v6 = *((unsigned int *)v16 + 6);
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v14 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v6 = 4294955226;
    *((_DWORD *)v16 + 6) = -12070;
  }
  _Block_object_dispose(&v15, 8);
  return v6;
}

uint64_t fvfbsrc_objStart(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  _QWORD block[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbsrc_objStart_block_invoke;
  block[3] = &unk_1E2FAFB88;
  block[4] = &v10;
  block[5] = DerivedStorage;
  block[6] = a1;
  block[7] = a2;
  dispatch_sync(v5, block);
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t fvfbsrc_objStop(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD v5[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 32);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __fvfbsrc_objStop_block_invoke;
  v5[3] = &__block_descriptor_tmp_126_0;
  v5[4] = DerivedStorage;
  v5[5] = a1;
  dispatch_sync(v3, v5);
  return 0;
}

uint64_t fvfbsrc_objSuspend(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbsrc_objSuspend_block_invoke;
  block[3] = &unk_1E2FAFBD0;
  block[4] = &v8;
  block[5] = DerivedStorage;
  block[6] = a1;
  dispatch_sync(v3, block);
  v4 = 0;
  if (*((_DWORD *)v9 + 6))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v4 = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t fvfbsrc_objResume(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __fvfbsrc_objResume_block_invoke;
  block[3] = &unk_1E2FAFBF8;
  block[4] = &v8;
  block[5] = DerivedStorage;
  block[6] = a1;
  dispatch_sync(v3, block);
  v4 = 0;
  if (*((_DWORD *)v9 + 6))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v4 = *((unsigned int *)v9 + 6);
  }
  _Block_object_dispose(&v8, 8);
  return v4;
}

CFTypeRef *__fvfbsrc_objPlugProcessor_block_invoke(CFTypeRef *result)
{
  CFTypeRef *v1;
  _QWORD *v2;

  v1 = result;
  v2 = result[5];
  if (*(_DWORD *)v2 || v2[3])
  {
    *(_DWORD *)(*((_QWORD *)result[4] + 1) + 24) = -12073;
  }
  else
  {
    result = (CFTypeRef *)CFRetain(result[6]);
    *((_QWORD *)v1[5] + 3) = v1[6];
  }
  return result;
}

void __fvfbsrc_objUnplugProcessor_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = a1[5];
  if (!*(_DWORD *)v2 && (v3 = *(const void **)(v2 + 24), v3 == (const void *)a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1[5] + 24) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = -12070;
  }
}

uint64_t __fvfbsrc_objStart_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)v2 || !*(_QWORD *)(v2 + 24))
    result = 4294955226;
  else
    result = _fvfbsrc_start(*(_QWORD *)(a1 + 48), *(const __CFDictionary **)(a1 + 56));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t _fvfbsrc_start(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t DerivedStorage;
  const void *Value;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t uint64;
  uint64_t v9;
  uint64_t v10;
  uint64_t CMBaseObject;
  void (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  void (*v14)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  uint64_t (*v18)(uint64_t, CFTypeRef *, CFTypeRef *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t v26;
  uint64_t SInt64;
  const void *v28;
  const void *v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *v33;
  unsigned int v34;
  unsigned int v35;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  unsigned int v42;
  unsigned int v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  NSObject *v47;
  unsigned int v48;
  unsigned int v49;
  NSObject *v50;
  unsigned int v51;
  unsigned int v52;
  NSObject *v53;
  unsigned int v54;
  unsigned int v55;
  NSObject *v56;
  unsigned int v57;
  unsigned int v58;
  CFTypeRef v60;
  CFTypeRef v61;
  CFTypeRef v62;
  CFTypeRef v63;
  CFTypeRef cf[2];
  xpc_object_t v65;
  os_log_type_t type;
  int v67;
  xpc_object_t xdict;
  uint64_t v69;
  int v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[1] = 0;
  v65 = 0;
  v63 = 0;
  cf[0] = 0;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  if (a2)
  {
    Value = CFDictionaryGetValue(a2, CFSTR("clientName"));
    v5 = CFDictionaryGetValue(a2, CFSTR("clientAuditToken"));
  }
  else
  {
    Value = 0;
    v5 = 0;
  }
  v6 = CMBaseObjectGetDerivedStorage();
  xdict = 0;
  v69 = 0;
  if (*(_QWORD *)(v6 + 16))
  {
    v67 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = FigXPCCreateBasicMessage();
  if ((_DWORD)v7 || (v7 = FigXPCRemoteClientSendSyncMessageCreatingReply(), (_DWORD)v7))
  {
    v9 = v7;
    v67 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
    *(_QWORD *)(v6 + 16) = uint64;
    if (!uint64)
    {
      v67 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v9 = 4294955226;
      goto LABEL_10;
    }
    v9 = FigXPCRemoteClientAssociateObject();
    if (!(_DWORD)v9)
      goto LABEL_10;
    v67 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  if ((_DWORD)v9)
  {
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    goto LABEL_82;
  }
  FigCFDictionaryGetBooleanIfPresent();
  v10 = *MEMORY[0x1E0C9AE00];
  CMBaseObject = FigVirtualDisplayProcessorGetCMBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v12 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v12)
    v12(CMBaseObject, CFSTR("SupportsRotation"), v10, cf);
  v13 = FigVirtualDisplayProcessorGetCMBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v14 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v14)
    v14(v13, CFSTR("ProtectionFlags"), v10, &v60);
  v15 = FigVirtualDisplayProcessorGetCMBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v16)
    v16(v15, CFSTR("VirtualDisplayMode"), v10, &v63);
  v17 = *(_QWORD *)(DerivedStorage + 24);
  v18 = *(uint64_t (**)(uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (!v18)
  {
    v9 = 4294954514;
LABEL_40:
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v34 = v69;
    if (os_log_type_enabled(v33, (os_log_type_t)xdict))
      v35 = v34;
    else
      v35 = v34 & 0xFFFFFFFE;
    if (!v35)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2444;
    v74 = 1024;
    v75 = v9;
LABEL_45:
    _os_log_send_and_compose_impl();
LABEL_82:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_83;
  }
  v19 = v18(v17, &v62, &v61);
  if ((_DWORD)v19)
  {
    v9 = v19;
    goto LABEL_40;
  }
  v20 = FigXPCCreateBasicMessage();
  if ((_DWORD)v20)
  {
    v9 = v20;
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v42 = v69;
    if (os_log_type_enabled(v41, (os_log_type_t)xdict))
      v43 = v42;
    else
      v43 = v42 & 0xFFFFFFFE;
    if (!v43)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2447;
    v74 = 1024;
    v75 = v9;
    goto LABEL_45;
  }
  v21 = FigXPCMessageSetCFArray();
  if ((_DWORD)v21)
  {
    v9 = v21;
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v45 = v69;
    if (os_log_type_enabled(v44, (os_log_type_t)xdict))
      v46 = v45;
    else
      v46 = v45 & 0xFFFFFFFE;
    if (!v46)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2450;
    v74 = 1024;
    v75 = v9;
    goto LABEL_45;
  }
  v22 = FigXPCMessageSetCFArray();
  if ((_DWORD)v22)
  {
    v9 = v22;
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v48 = v69;
    if (os_log_type_enabled(v47, (os_log_type_t)xdict))
      v49 = v48;
    else
      v49 = v48 & 0xFFFFFFFE;
    if (!v49)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2453;
    v74 = 1024;
    v75 = v9;
    goto LABEL_45;
  }
  v23 = FigXPCMessageSetCFDictionary();
  if ((_DWORD)v23)
  {
    v9 = v23;
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v51 = v69;
    if (os_log_type_enabled(v50, (os_log_type_t)xdict))
      v52 = v51;
    else
      v52 = v51 & 0xFFFFFFFE;
    if (!v52)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2456;
    v74 = 1024;
    v75 = v9;
    goto LABEL_45;
  }
  v24 = FigXPCMessageSetCFString();
  if ((_DWORD)v24)
  {
    v9 = v24;
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v54 = v69;
    if (os_log_type_enabled(v53, (os_log_type_t)xdict))
      v55 = v54;
    else
      v55 = v54 & 0xFFFFFFFE;
    if (!v55)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2459;
    v74 = 1024;
    v75 = v9;
    goto LABEL_45;
  }
  v25 = FigXPCMessageSetCFData();
  if ((_DWORD)v25)
  {
    v9 = v25;
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v57 = v69;
    if (os_log_type_enabled(v56, (os_log_type_t)xdict))
      v58 = v57;
    else
      v58 = v57 & 0xFFFFFFFE;
    if (!v58)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2462;
    v74 = 1024;
    v75 = v9;
    goto LABEL_45;
  }
  xpc_dictionary_set_BOOL(v65, "Rotation", cf[0] == (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  xpc_dictionary_set_BOOL(v65, "SuspendOnStart", 0);
  v26 = v65;
  SInt64 = FigCFNumberGetSInt64();
  xpc_dictionary_set_uint64(v26, "ProtFlags", SInt64);
  v28 = *(const void **)(DerivedStorage + 48);
  *(_QWORD *)(DerivedStorage + 48) = Value;
  if (Value)
    CFRetain(Value);
  if (v28)
    CFRelease(v28);
  v29 = *(const void **)(DerivedStorage + 56);
  *(_QWORD *)(DerivedStorage + 56) = v5;
  if (v5)
    CFRetain(v5);
  if (v29)
    CFRelease(v29);
  *(_DWORD *)DerivedStorage = 2;
  v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v9)
  {
    LODWORD(v69) = 0;
    LOBYTE(xdict) = 0;
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v31 = v69;
    if (os_log_type_enabled(v30, (os_log_type_t)xdict))
      v32 = v31;
    else
      v32 = v31 & 0xFFFFFFFE;
    if (!v32)
      goto LABEL_82;
    v70 = 136315650;
    v71 = "_fvfbsrc_start";
    v72 = 1024;
    v73 = 2473;
    v74 = 1024;
    v75 = v9;
    goto LABEL_45;
  }
LABEL_83:
  if (cf[0])
    CFRelease(cf[0]);
  if (v60)
    CFRelease(v60);
  if (v63)
    CFRelease(v63);
  if (v62)
    CFRelease(v62);
  if (v61)
    CFRelease(v61);
  FigXPCRelease();
  FigXPCRelease();
  if ((_DWORD)v9 && *(_QWORD *)(DerivedStorage + 16))
  {
    fvfb_sendSyncMessage();
    _fvfbsrc_stop();
  }
  return v9;
}

uint64_t fvfb_sendSyncMessage()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;

  v0 = FigXPCCreateBasicMessage();
  if ((_DWORD)v0)
  {
    v1 = v0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_6:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_3;
  }
  v1 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v1)
  {
    v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    goto LABEL_6;
  }
LABEL_3:
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

void _fvfbsrc_stop()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    FigXPCRemoteClientDisassociateObject();
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 40));
  v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 56);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  *(_DWORD *)(DerivedStorage + 64) = 0;
  *(_DWORD *)DerivedStorage = 0;
}

void __fvfbsrc_objStop_block_invoke(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (**(_DWORD **)(a1 + 32))
  {
    fvfb_sendSyncMessage();
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    _fvfbsrc_stop();
  }
}

uint64_t __fvfbsrc_objSuspend_block_invoke(uint64_t result)
{
  uint64_t v1;
  int v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _DWORD *v4;

  v1 = result;
  v2 = **(_DWORD **)(result + 40);
  if (v2)
  {
    if (v2 == 2)
    {
      result = fvfb_sendSyncMessage();
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
      if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        result = fig_log_call_emit_and_clean_up_after_send_and_compose();
        v4 = *(_DWORD **)(v1 + 40);
        v4[16] = 0;
        *v4 = 1;
      }
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -12070;
  }
  return result;
}

uint64_t __fvfbsrc_objResume_block_invoke(uint64_t result)
{
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v1 = result;
  if (**(_DWORD **)(result + 40) == 1)
  {
    result = fvfb_sendSyncMessage();
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 8) + 24))
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      **(_DWORD **)(v1 + 40) = 2;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = -12070;
  }
  return result;
}

void __fvfb_getClient_block_invoke()
{
  __CFDictionary *Mutable;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v2;
  NSObject *v3;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA54A0], CFSTR("FVFBServerDied"));
  FigCFDictionarySetInt32();
  v2 = FigXPCRemoteClientCreate();
  if (Mutable)
    CFRelease(Mutable);
  if (v2)
  {
    v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void fvfbsrc_handleDeadConnection(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD v4[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  v3 = *(NSObject **)(DerivedStorage + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __fvfbsrc_handleDeadConnection_block_invoke;
  v4[3] = &__block_descriptor_tmp_133;
  v4[4] = DerivedStorage;
  v4[5] = a1;
  dispatch_async(v3, v4);
}

uint64_t fvfbsrc_handleServerMessage(int a1, xpc_object_t xdict)
{
  _xpc_connection_s *remote_connection;
  xpc_object_t reply;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;

  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    FigXPCMessageGetOpCode();
    if (dword_1ECDC8940 >= 4)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1ECDC8940 >= 4)
    {
      v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    xpc_dictionary_set_int64(reply, (const char *)*MEMORY[0x1E0CA3690], -536870199);
    xpc_connection_send_message(remote_connection, reply);
  }
  else
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  return 3758097097;
}

void __fvfbsrc_handleDeadConnection_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __CFDictionary *Mutable;
  NSObject *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)v2 && *(_QWORD *)(v2 + 24))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (**(_DWORD **)(a1 + 32) == 1)
      CFDictionarySetValue(Mutable, CFSTR("SuspendOnActivate"), (const void *)*MEMORY[0x1E0C9AE50]);
    _fvfbsrc_stop();
    _fvfbsrc_start(*(_QWORD *)(a1 + 40), Mutable);
    v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (Mutable)
      CFRelease(Mutable);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t FigVideoCompositionInstructionGetBackgroundColorARGB(const __CFDictionary *a1, uint64_t a2)
{
  const __CFArray *Value;
  const __CFArray *v4;
  CFTypeID v5;
  uint64_t i;

  Value = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("BackgroundColorARGB"));
  if (!Value)
    return 0;
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 == CFArrayGetTypeID() && CFArrayGetCount(v4) == 4)
  {
    for (i = 0; i != 4; ++i)
    {
      FigCFArrayGetFloat32AtIndex();
      a2 += 4;
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigVideoCompositorPropertiesGetRenderDimensions(const __CFDictionary *a1, CGSize *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v4;
  CFTypeID v5;
  uint64_t result;
  unsigned __int128 v7;

  v7 = 0uLL;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("RenderDimensions"));
  if (!Value)
    return FigSignalErrorAt();
  v4 = Value;
  v5 = CFGetTypeID(Value);
  if (v5 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  if (!CGSizeMakeWithDictionaryRepresentation(v4, (CGSize *)&v7))
    return FigSignalErrorAt();
  result = 0;
  *a2 = (CGSize)v7;
  return result;
}

uint64_t FigVideoCompositorSetDestinationPixelBufferColorProperties(__CVBuffer *a1, CFDictionaryRef theDict, const __CFArray *a3)
{
  const void *Value;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  CFIndex Count;
  CFStringRef *v13;
  CFIndex v14;
  const void *ValueAtIndex;
  __CVBuffer *SourcePixelBuffer;
  __CVBuffer *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  CFStringRef *v20;
  _BOOL4 v21;
  CFStringRef *v22;
  const __CFString *v23;
  CFTypeRef v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  CGColorSpaceRef ColorSpaceFromAttachments;

  Value = CFDictionaryGetValue(theDict, CFSTR("DestinationPixelBufferDesiredColorPrimaries"));
  if (Value)
    v7 = CFRetain(Value);
  else
    v7 = 0;
  v8 = CFDictionaryGetValue(theDict, CFSTR("DestinationPixelBufferDesiredTransferFunction"));
  if (v8)
    v9 = CFRetain(v8);
  else
    v9 = 0;
  v10 = CFDictionaryGetValue(theDict, CFSTR("DestinationPixelBufferDesiredYCbCrMatrix"));
  if (v10)
    v11 = CFRetain(v10);
  else
    v11 = 0;
  Count = CFArrayGetCount(a3);
  v13 = (CFStringRef *)MEMORY[0x1E0CA8D68];
  if (Count < 1)
  {
    v18 = 0;
    v17 = 0;
    if (!v7)
LABEL_15:
      v7 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8D88]);
  }
  else
  {
    v14 = CFArrayGetCount(a3);
    ValueAtIndex = CFArrayGetValueAtIndex(a3, v14 - 1);
    SourcePixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
    v17 = SourcePixelBuffer;
    v18 = SourcePixelBuffer != 0;
    if (!v7 && SourcePixelBuffer)
    {
      v7 = CVBufferCopyAttachment(SourcePixelBuffer, *v13, 0);
      v18 = 1;
    }
    if (!v7)
      goto LABEL_15;
  }
  if (v9)
    v19 = 0;
  else
    v19 = v18;
  v20 = (CFStringRef *)MEMORY[0x1E0CA8E98];
  if (v19)
    v9 = CVBufferCopyAttachment(v17, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
  if (!v9)
    v9 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8EB0]);
  if (v11)
    v21 = 0;
  else
    v21 = v18;
  v22 = (CFStringRef *)MEMORY[0x1E0CA8EE8];
  if (v21)
    v11 = CVBufferCopyAttachment(v17, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
  if (!v11)
    v11 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8F18]);
  v23 = (const __CFString *)*MEMORY[0x1E0CA8CE8];
  if (!v18 || (v24 = CVBufferCopyAttachment(v17, (CFStringRef)*MEMORY[0x1E0CA8CE8], 0)) == 0)
    v24 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8D10]);
  CVBufferSetAttachment(a1, *v13, v7, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachment(a1, *v20, v9, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachment(a1, *v22, v11, kCVAttachmentMode_ShouldPropagate);
  CVBufferSetAttachment(a1, v23, v24, kCVAttachmentMode_ShouldPropagate);
  v25 = CVBufferCopyAttachments(a1, kCVAttachmentMode_ShouldPropagate);
  if (v25)
  {
    v26 = v25;
    ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(v25);
    CFRelease(v26);
  }
  else
  {
    ColorSpaceFromAttachments = 0;
  }
  CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8CD8], ColorSpaceFromAttachments, kCVAttachmentMode_ShouldPropagate);
  CGColorSpaceRelease(ColorSpaceFromAttachments);
  if (v7)
    CFRelease(v7);
  if (v9)
    CFRelease(v9);
  if (v11)
    CFRelease(v11);
  if (v24)
    CFRelease(v24);
  return 0;
}

uint64_t FigVideoCompositorSetDestinationPixelBufferGeometricProperties(__CVBuffer *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeRef value;

  value = 0;
  v4 = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(a2, 0, 0, &value);
  if (!(_DWORD)v4)
  {
    if (value)
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8D50], value, kCVAttachmentMode_ShouldPropagate);
    v5 = CFDictionaryGetValue(a2, CFSTR("RenderPixelAspectRatio"));
    if (v5)
      CVBufferSetAttachment(a1, (CFStringRef)*MEMORY[0x1E0CA8E68], v5, kCVAttachmentMode_ShouldPropagate);
  }
  if (value)
    CFRelease(value);
  return v4;
}

uint64_t FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(const __CFDictionary *a1, _DWORD *a2, _OWORD *a3, _QWORD *a4)
{
  __int128 v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  CFTypeID v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const void *v14;
  const void *v15;
  CFTypeID v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  const void *v20;
  uint64_t v21;
  CFTypeID v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  __CFDictionary *v26;
  CGAffineTransform v28;
  CGAffineTransform t2;
  CGAffineTransform v30;
  uint64_t v31;
  uint64_t v32;
  __CFDictionary *v33;
  CGAffineTransform v34;
  float v35;
  CGSize size;

  size.width = 0.0;
  size.height = 0.0;
  v35 = 1.0;
  v8 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)&v34.a = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)&v34.c = v8;
  *(_OWORD *)&v34.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  v33 = 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("RenderDimensions"));
  if (!Value)
    return FigSignalErrorAt();
  v10 = Value;
  v11 = CFGetTypeID(Value);
  if (v11 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  if (!CGSizeMakeWithDictionaryRepresentation(v10, &size))
    return FigSignalErrorAt();
  v12 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("RenderPixelAspectRatio"));
  v13 = v12;
  if (v12)
  {
    v14 = (const void *)*MEMORY[0x1E0CA8E60];
    if (!CFDictionaryGetValue(v12, (const void *)*MEMORY[0x1E0CA8E60]))
      return FigSignalErrorAt();
    v15 = CFDictionaryGetValue(v13, v14);
    v16 = CFGetTypeID(v15);
    if (v16 != CFNumberGetTypeID())
      return FigSignalErrorAt();
    v17 = (const void *)*MEMORY[0x1E0CA8E70];
    if (!CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA8E70]))
      return FigSignalErrorAt();
    v18 = CFDictionaryGetValue(v13, v17);
    v19 = CFGetTypeID(v18);
    if (v19 != CFNumberGetTypeID())
      return FigSignalErrorAt();
  }
  v20 = CFDictionaryGetValue(a1, CFSTR("RenderEdgeProcessingPixels"));
  v21 = (uint64_t)v20;
  if (v20)
  {
    v22 = CFGetTypeID(v20);
    if (v22 != CFArrayGetTypeID())
      return FigSignalErrorAt();
  }
  FigCFDictionaryGetFloat32IfPresent();
  v31 = 0;
  v32 = 0;
  v23 = FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture((CFTypeID)v13, v21, &v32, &v31, (uint64_t)&v34, &v33, size.width, size.height, v35);
  if ((_DWORD)v23)
  {
    v26 = v33;
LABEL_22:
    if (v26)
      CFRelease(v26);
    return v23;
  }
  CGAffineTransformMakeScale(&t2, v35, v35);
  v28 = v34;
  CGAffineTransformConcat(&v30, &v28, &t2);
  v34 = v30;
  if (a2)
  {
    v24 = v31;
    *a2 = v32;
    a2[1] = v24;
  }
  if (a3)
  {
    v25 = *(_OWORD *)&v34.c;
    *a3 = *(_OWORD *)&v34.a;
    a3[1] = v25;
    a3[2] = *(_OWORD *)&v34.tx;
  }
  v26 = v33;
  if (!a4)
    goto LABEL_22;
  v23 = 0;
  *a4 = v33;
  return v23;
}

uint64_t FigVideoCompositorGetBestBitDepthForCompositorPropertiesAndLayerDefinitions(const __CFDictionary *a1, const __CFArray *a2)
{
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  int v6;
  const __CFAllocator *v7;
  const void *v8;
  const void *ValueAtIndex;
  CFTypeID v10;
  __CVBuffer *SourcePixelBuffer;
  OSType PixelFormatType;
  int UInt64;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  BOOL v16;
  unsigned int v17;

  CFDictionaryGetValue(a1, CFSTR("DestinationPixelBufferDesiredTransferFunction"));
  if (a2 && (Count = CFArrayGetCount(a2), Count >= 1))
  {
    v4 = Count;
    v5 = 0;
    v6 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v8 = (const void *)*MEMORY[0x1E0CA90F0];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v5);
      v10 = CFGetTypeID(ValueAtIndex);
      if (v10 != FigVCLayerDefinitionGetTypeID())
        break;
      SourcePixelBuffer = (__CVBuffer *)FigVCLayerDefinitionGetSourcePixelBuffer((uint64_t)ValueAtIndex);
      if (!SourcePixelBuffer)
        break;
      PixelFormatType = CVPixelBufferGetPixelFormatType(SourcePixelBuffer);
      if (PixelFormatType == 1380410945)
      {
        UInt64 = 32;
      }
      else
      {
        v14 = CVPixelFormatDescriptionCreateWithPixelFormatType(v7, PixelFormatType);
        if (v14)
        {
          v15 = v14;
          if (CFDictionaryGetValue(v14, v8))
            UInt64 = FigCFNumberGetUInt64();
          else
            UInt64 = 0;
          CFRelease(v15);
        }
        else
        {
          UInt64 = 0;
        }
      }
      if (UInt64 > v6)
        v6 = UInt64;
      ++v5;
    }
    while (v4 != v5);
  }
  else
  {
    v6 = 0;
  }
  if (FigCFEqual() || FigCFEqual())
  {
    v16 = v6 <= 10;
    v17 = 10;
  }
  else
  {
    v16 = v6 <= 8;
    v17 = 8;
  }
  if (v16)
    return v17;
  else
    return v6;
}

uint64_t FigVideoCompositorCreateDestinationPixelBufferPool(const __CFDictionary *a1, uint64_t a2, const void *a3, _QWORD *a4, int a5)
{
  uint64_t v9;
  __CFDictionary *Mutable;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  uint64_t v12;
  uint64_t v14;

  v14 = 0;
  CFDictionaryGetValue(a1, CFSTR("DestinationPixelBufferDesiredAttributes"));
  v9 = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(a1, &v14, 0, 0);
  if ((_DWORD)v9)
  {
    v12 = v9;
    Mutable = 0;
    goto LABEL_10;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryGetValue(a1, CFSTR("PixelBufferPoolSharingID"));
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], a3);
  if (a5)
  {
    FigGetAlignmentForIOSurfaceOutput();
    PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    {
LABEL_13:
      v12 = PixelBufferAttributesWithIOSurfaceSupport;
      goto LABEL_10;
    }
    if (Mutable)
      CFRelease(Mutable);
    Mutable = 0;
  }
  FigCFDictionaryGetInt32IfPresent();
  PixelBufferAttributesWithIOSurfaceSupport = VTCreatePixelBufferPoolAttributesWithName();
  if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
    goto LABEL_13;
  v12 = VTBuildPixelBufferPools2();
  if (!(_DWORD)v12)
  {
    v12 = 0;
    *a4 = 0;
  }
LABEL_10:
  if (Mutable)
    CFRelease(Mutable);
  return v12;
}

uint64_t FigVideoCompositorCreateDesiredSourcePixelBufferAttributes(uint64_t a1, CFIndex a2, CFMutableDictionaryRef *a3)
{
  const __CFAllocator *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef i;
  const void *IOSurfacePropertiesDictionary;
  uint64_t v12;
  uint64_t result;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  v9 = CFArrayCreateMutable(v6, a2, MEMORY[0x1E0C9B378]);
  if (!v9)
  {
    v12 = FigSignalErrorAt();
LABEL_10:
    CFRelease(v8);
    return v12;
  }
  for (i = v9; a2; --a2)
  {
    a1 += 4;
    FigCFArrayAppendInt32();
  }
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA9040], i);
  IOSurfacePropertiesDictionary = (const void *)FigCreateIOSurfacePropertiesDictionary();
  CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E0CA8FF0], IOSurfacePropertiesDictionary);
  if (a3)
  {
    *a3 = v8;
    v8 = 0;
  }
  if (IOSurfacePropertiesDictionary)
    CFRelease(IOSurfacePropertiesDictionary);
  CFRelease(i);
  v12 = 0;
  result = 0;
  if (v8)
    goto LABEL_10;
  return result;
}

uint64_t FigVideoCompositorCopyDestinationPixelBufferWithoutComposingIfPossible(const __CFDictionary *a1, const __CFArray *a2, _QWORD *a3)
{
  __int128 v6;
  CFMutableArrayRef Mutable;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[3];
  uint64_t v12;
  const void *v13;
  CFTypeRef v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  v6 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  v11[0] = *MEMORY[0x1E0C9BAA8];
  v11[1] = v6;
  v11[2] = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B378]);
  FigCFArrayAppendInt32();
  FigCFArrayAppendInt32();
  v8 = FigVideoCompositorCopyRenderPixelBufferDimensionsAndCleanAperture(a1, &v12, v11, &v13);
  if ((_DWORD)v8)
  {
    v9 = v8;
    if (Mutable)
LABEL_5:
      CFRelease(Mutable);
  }
  else
  {
    v9 = FigVCLayerDefinitionCopyDestinationPixelBufferWithoutComposingIfPossible(a2, (int *)&v12, v11, v13, Mutable, &v14);
    if (!(_DWORD)v9)
    {
      *a3 = v14;
      v14 = 0;
    }
    if (Mutable)
      goto LABEL_5;
  }
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  return v9;
}

uint64_t FigWebVTTFormatWriterCreateWithByteStream(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  _DWORD *v9;

  if (!a2 || !a4 || FigCFDictionaryGetStringValue() && !FigCFEqual())
    return FigSignalErrorAt();
  FigFormatWriterGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    FigFormatWriterGetFigBaseObject(0);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v9 = (_DWORD *)DerivedStorage;
      v7 = ffw_vtt_buildPipeline(a1, 0, a2);
      if (!(_DWORD)v7)
      {
        *v9 = 0;
        v9[12] = 0;
        *a4 = 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v7;
}

uint64_t ffw_vtt_buildPipeline(uint64_t a1, uint64_t a2, const void *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef cf;
  CFTypeRef v17;

  FigFormatWriterGetFigBaseObject(a2);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  v7 = FigCaptionTimelineGeneratorCreate(a1, (uint64_t)ffw_vtt_WriteFigCaptions, a2, (uint64_t *)&v14);
  if ((_DWORD)v7
    || (v7 = FigVTTSerializerCreateForByteStream(a1, a3, &v15), (_DWORD)v7)
    || (v7 = FigVTTDocumentWriterCreateForVTT(a1, v15, &cf), (_DWORD)v7))
  {
    v8 = v7;
  }
  else
  {
    v8 = FigVTTCaptionWriterCreateForDocument(a1, cf, &v17);
    if (!(_DWORD)v8)
    {
      v10 = cf;
      v9 = v17;
      cf = 0;
      v17 = 0;
      DerivedStorage[1] = v9;
      DerivedStorage[2] = v10;
      v12 = v14;
      v11 = v15;
      v14 = 0;
      v15 = 0;
      DerivedStorage[3] = v11;
      DerivedStorage[4] = v12;
      goto LABEL_6;
    }
  }
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
LABEL_6:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return v8;
}

uint64_t FigWebVTTFormatWriterCreateForWritingWebVTTSegments(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void *v16;
  CFTypeRef cf;
  CFTypeRef v18;

  cf = 0;
  v18 = 0;
  v16 = 0;
  if (!a2 || !a5 || FigCFDictionaryGetStringValue() && !FigCFEqual())
    goto LABEL_15;
  FigFormatWriterGetClassID();
  v9 = CMDerivedObjectCreate();
  if ((_DWORD)v9)
  {
LABEL_16:
    v14 = v9;
    goto LABEL_10;
  }
  FigFormatWriterGetFigBaseObject(v18);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
LABEL_15:
    v9 = FigSignalErrorAt();
    goto LABEL_16;
  }
  v11 = DerivedStorage;
  v12 = ffw_vtt_createByteStreamBasedOnBlockBuffer(a1, &v16, (CMBlockBufferRef *)&cf);
  v13 = v16;
  if ((_DWORD)v12)
  {
    v14 = v12;
  }
  else
  {
    v14 = ffw_vtt_buildPipeline((uint64_t)a1, (uint64_t)v18, v16);
    if (!(_DWORD)v14)
    {
      *(_DWORD *)v11 = 1;
      *(_DWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = a2;
      *(_QWORD *)(v11 + 64) = a3;
      *(_QWORD *)(v11 + 120) = cf;
      *(_QWORD *)(v11 + 128) = v13;
      *a5 = v18;
      cf = 0;
      v18 = 0;
      goto LABEL_10;
    }
  }
  if (v13)
    CFRelease(v13);
LABEL_10:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  return v14;
}

uint64_t ffw_vtt_createByteStreamBasedOnBlockBuffer(const __CFAllocator *a1, _QWORD *a2, CMBlockBufferRef *a3)
{
  uint64_t v5;
  uint64_t WritableForBlockBuffer;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  v5 = CMBlockBufferCreateEmpty(a1, 0, 0, &blockBufferOut);
  if ((_DWORD)v5)
  {
    WritableForBlockBuffer = v5;
  }
  else
  {
    WritableForBlockBuffer = CMByteStreamCreateWritableForBlockBuffer();
    if (!(_DWORD)WritableForBlockBuffer)
    {
      *a2 = 0;
      *a3 = blockBufferOut;
      return WritableForBlockBuffer;
    }
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return WritableForBlockBuffer;
}

uint64_t ffw_vtt_Invalidate(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigVTTCaptionWriterInvalidate(DerivedStorage[1]);
  FigVTTDocumentWriterInvalidate(DerivedStorage[2]);
  FigVTTSerializerInvalidate(DerivedStorage[3]);
  return 0;
}

void ffw_vtt_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  ffw_vtt_releasePipeline(a1);
  v3 = (const void *)DerivedStorage[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[15];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[16];
  if (v5)
    CFRelease(v5);
}

CFStringRef ffw_vtt_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigFormatWriter_VTT %p>"), a1);
}

uint64_t ffw_vtt_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CMTimeEpoch v9;
  CFDictionaryRef v10;
  uint64_t result;
  CMTime v12;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(CFSTR("PreferredOutputSegmentInterval"), a2))
  {
    *(_OWORD *)&v12.value = *(_OWORD *)(v8 + 72);
    v9 = *(_QWORD *)(v8 + 88);
  }
  else
  {
    if (!CFEqual(CFSTR("InitialSegmentStartTime"), a2))
      return 4294954666;
    *(_OWORD *)&v12.value = *(_OWORD *)(v8 + 96);
    v9 = *(_QWORD *)(v8 + 112);
  }
  v12.epoch = v9;
  v10 = CMTimeCopyAsDictionary(&v12, a3);
  result = 0;
  *a4 = v10;
  return result;
}

uint64_t ffw_vtt_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CMTime *v6;
  CFTypeID v7;
  uint64_t result;
  CFTypeID v9;
  CMTime v10;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = (CMTime *)DerivedStorage;
  if (CFEqual(CFSTR("PreferredOutputSegmentInterval"), a2))
  {
    if (a3)
    {
      v7 = CFGetTypeID(a3);
      if (v7 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&v10, (CFDictionaryRef)a3);
        result = 0;
        v6[3] = v10;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("InitialSegmentStartTime"), a2))
  {
    if (a3)
    {
      v9 = CFGetTypeID(a3);
      if (v9 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary(&v10, (CFDictionaryRef)a3);
        result = 0;
        v6[4] = v10;
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  return 4294954666;
}

void ffw_vtt_releasePipeline(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[3];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[3] = 0;
  }
  v4 = (const void *)DerivedStorage[1];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[1] = 0;
  }
  v5 = (const void *)DerivedStorage[2];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[2] = 0;
  }
}

uint64_t ffw_vtt_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 != 1952807028 || !a4 || *(_DWORD *)(DerivedStorage + 48))
    return FigSignalErrorAt();
  *(_DWORD *)(DerivedStorage + 48) = 1;
  *a4 = 1;
  return 0;
}

uint64_t ffw_vtt_CopyTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v10 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 48) != a2)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("LanguageTag"), a3) || CFEqual(CFSTR("ExtendedLanguageTag"), a3))
    return FigVTTDocumentWriterCopyProperty(*(_QWORD *)(v10 + 16), (uint64_t)CFSTR("languageIdentifier"), a4, a5);
  return 4294954512;
}

uint64_t ffw_vtt_SetTrackProperty(uint64_t a1, int a2, const void *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 48) != a2 || !a3 || !a4)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (CFEqual(CFSTR("LanguageTag"), a3) || CFEqual(CFSTR("ExtendedLanguageTag"), a3))
    return FigVTTDocumentWriterSetProperty(*(_QWORD *)(v8 + 16), (uint64_t)CFSTR("languageIdentifier"), a4);
  else
    return 4294954512;
}

CMItemCount ffw_vtt_AddSampleBufferToTrack(const void *a1, int a2, opaqueCMSampleBuffer *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CMItemCount result;
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  CMMediaType v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  CMTimeFlags v16;
  CMTimeEpoch v17;
  CMTimeFlags v18;
  CMTimeEpoch v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, opaqueCMSampleBuffer *);
  uint64_t v28;
  CFAllocatorRef v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, opaqueCMSampleBuffer *);
  CFTypeRef *v34;
  CFTypeRef v35;
  uint64_t (*v36)(CFTypeRef, opaqueCMSampleBuffer *);
  CFTypeRef v37;
  uint64_t (*v38)(CFTypeRef);
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  CMTimeRange time1;
  CMTime duration;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 48) != a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 52))
    return FigSignalErrorAt();
  result = CMSampleBufferGetNumSamples(a3);
  if (result)
  {
    FormatDescription = CMSampleBufferGetFormatDescription(a3);
    MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
    v11 = MediaType;
    v12 = *(_DWORD *)(v7 + 4);
    if (v12)
    {
      if (v12 != MediaType)
        return FigSignalErrorAt();
    }
    else
    {
      *(_DWORD *)(v7 + 4) = MediaType;
    }
    if (MediaType != 1952807028
      || *(_QWORD *)(v7 + 40)
      || (result = ffw_vtt_createCaptionGroupConverter(*MEMORY[0x1E0C9AE00], (uint64_t)a1, (CFTypeRef *)(v7 + 40)),
          !(_DWORD)result))
    {
      v13 = *(_DWORD *)v7;
      FigFormatWriterGetFigBaseObject(a1);
      v14 = CMBaseObjectGetDerivedStorage();
      v15 = v14;
      if (v13 != 1)
      {
        if (v11 == 1668310898)
          return FigCaptionTimelineGeneratorAddSampleBuffer(*(_QWORD *)(v14 + 32), a3);
        return FigSignalErrorAt();
      }
      v41 = 0uLL;
      v42 = 0;
      ffw_vtt_getSampleBufferOutputPresentationEndTime(a3, (uint64_t)&v41);
      FigFormatWriterGetFigBaseObject(a1);
      if ((~*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 84) & 0x11) == 0)
      {
        memset(&time1, 0, 24);
        CMSampleBufferGetOutputPresentationTimeStamp(&time1.start, a3);
        if (v11 != 1952807028)
        {
          if (v11 == 1668310898)
          {
            result = FigCaptionTimelineGeneratorAddSampleBuffer(*(_QWORD *)(v15 + 32), a3);
            if ((_DWORD)result)
              return result;
LABEL_40:
            *(_OWORD *)(v15 + 136) = *(_OWORD *)&time1.start.value;
            *(_QWORD *)(v15 + 152) = time1.start.epoch;
LABEL_45:
            result = 0;
            *(_OWORD *)(v15 + 184) = v41;
            *(_QWORD *)(v15 + 200) = v42;
            return result;
          }
          return FigSignalErrorAt();
        }
        v26 = *(_QWORD *)(v15 + 40);
        v27 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v27)
        {
          result = v27(v26, a3);
          if ((_DWORD)result)
            return result;
          goto LABEL_40;
        }
        return 4294954514;
      }
      if ((*(_BYTE *)(v15 + 148) & 1) == 0
        || (*(_BYTE *)(v15 + 172) & 1) == 0
        || *(_QWORD *)(v15 + 176)
        || (*(_QWORD *)(v15 + 160) & 0x8000000000000000) != 0)
      {
        lhs.value = *(_QWORD *)(v15 + 96);
        v16 = *(_DWORD *)(v15 + 108);
        lhs.timescale = *(_DWORD *)(v15 + 104);
        v17 = *(_QWORD *)(v15 + 112);
        rhs.value = *(_QWORD *)(v15 + 72);
        rhs.timescale = *(_DWORD *)(v15 + 80);
        if ((v16 & 0x1D) != 1)
          goto LABEL_62;
        v18 = *(_DWORD *)(v15 + 84);
        if ((v18 & 1) == 0)
          goto LABEL_62;
        v19 = *(_QWORD *)(v15 + 88);
        *(_OWORD *)&time1.start.value = *MEMORY[0x1E0CA2E68];
        time1.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        time2.value = *(_QWORD *)(v15 + 72);
        time2.timescale = *(_DWORD *)(v15 + 80);
        time2.flags = v18;
        time2.epoch = v19;
        if (CMTimeCompare(&time1.start, &time2) < 0)
        {
          duration.epoch = v19;
          time2.value = lhs.value;
          time2.timescale = lhs.timescale;
          time2.flags = v16;
          time2.epoch = v17;
          duration.value = rhs.value;
          duration.timescale = rhs.timescale;
          duration.flags = v18;
          CMTimeRangeMake(&time1, &time2, &duration);
          v20 = *(_OWORD *)&time1.start.epoch;
          *(_OWORD *)(v15 + 136) = *(_OWORD *)&time1.start.value;
          *(_OWORD *)(v15 + 152) = v20;
          *(_OWORD *)(v15 + 168) = *(_OWORD *)&time1.duration.timescale;
        }
        else
        {
LABEL_62:
          result = FigSignalErrorAt();
          if ((_DWORD)result)
            return result;
        }
      }
      if (v11 == 1952807028)
      {
        FigFormatWriterGetFigBaseObject(a1);
        v28 = CMBaseObjectGetDerivedStorage();
        v29 = CFGetAllocator(a1);
        memset(&time2, 0, sizeof(time2));
        ffw_vtt_getSampleBufferOutputPresentationEndTime(a3, (uint64_t)&time2);
        v30 = (_OWORD *)(v28 + 136);
        v31 = *(_OWORD *)(v28 + 152);
        *(_OWORD *)&time1.start.value = *(_OWORD *)(v28 + 136);
        *(_OWORD *)&time1.start.epoch = v31;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v28 + 168);
        CMTimeRangeGetEnd(&duration, &time1);
        time1.start = time2;
        if (CMTimeCompare(&duration, &time1.start) <= 0)
        {
          v34 = (CFTypeRef *)(v28 + 40);
          while (1)
          {
            v35 = *v34;
            v36 = *(uint64_t (**)(CFTypeRef, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
            if (!v36)
              break;
            result = v36(v35, a3);
            if ((_DWORD)result)
              return result;
            v37 = *v34;
            v38 = *(uint64_t (**)(CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
            if (!v38)
              break;
            result = v38(v37);
            if ((_DWORD)result)
              return result;
            v39 = *(_OWORD *)(v28 + 152);
            *(_OWORD *)&time1.start.value = *v30;
            *(_OWORD *)&time1.start.epoch = v39;
            *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v28 + 168);
            result = ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(a1, (__int128 *)&time1.start.value);
            if ((_DWORD)result)
              return result;
            if (*v34)
            {
              CFRelease(*v34);
              *v34 = 0;
            }
            result = ffw_vtt_createCaptionGroupConverter((uint64_t)v29, (uint64_t)a1, (CFTypeRef *)(v28 + 40));
            if ((_DWORD)result)
              return result;
            *(_OWORD *)&lhs.value = *v30;
            lhs.epoch = *(_QWORD *)(v28 + 152);
            rhs = *(CMTime *)(v28 + 72);
            CMTimeAdd(&time1.start, &lhs, &rhs);
            *v30 = *(_OWORD *)&time1.start.value;
            *(_QWORD *)(v28 + 152) = time1.start.epoch;
            v40 = *(_OWORD *)(v28 + 152);
            *(_OWORD *)&time1.start.value = *v30;
            *(_OWORD *)&time1.start.epoch = v40;
            *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v28 + 168);
            CMTimeRangeGetEnd(&duration, &time1);
            time1.start = time2;
            if (CMTimeCompare(&duration, &time1.start) >= 1)
              goto LABEL_42;
          }
        }
        else
        {
LABEL_42:
          *(_OWORD *)&time1.start.value = *v30;
          time1.start.epoch = *(_QWORD *)(v28 + 152);
          lhs = time2;
          if ((CMTimeCompare(&time1.start, &lhs) & 0x80000000) == 0)
            goto LABEL_45;
          v32 = *(_QWORD *)(v28 + 40);
          v33 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
          if (v33)
          {
            result = v33(v32, a3);
            if ((_DWORD)result)
              return result;
            goto LABEL_45;
          }
        }
        return 4294954514;
      }
      if (v11 != 1668310898)
        return FigSignalErrorAt();
      FigFormatWriterGetFigBaseObject(a1);
      v21 = CMBaseObjectGetDerivedStorage();
      memset(&time2, 0, sizeof(time2));
      ffw_vtt_getSampleBufferOutputPresentationEndTime(a3, (uint64_t)&time2);
      v22 = (_OWORD *)(v21 + 136);
      v23 = *(_OWORD *)(v21 + 152);
      *(_OWORD *)&time1.start.value = *(_OWORD *)(v21 + 136);
      *(_OWORD *)&time1.start.epoch = v23;
      *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v21 + 168);
      CMTimeRangeGetEnd(&duration, &time1);
      time1.start = time2;
      if (CMTimeCompare(&duration, &time1.start) > 0)
      {
LABEL_34:
        *(_OWORD *)&time1.start.value = *v22;
        time1.start.epoch = *(_QWORD *)(v21 + 152);
        lhs = time2;
        if ((CMTimeCompare(&time1.start, &lhs) & 0x80000000) == 0)
          goto LABEL_45;
        result = FigCaptionTimelineGeneratorAddSampleBuffer(*(_QWORD *)(v21 + 32), a3);
        if (!(_DWORD)result)
          goto LABEL_45;
      }
      else
      {
        while (1)
        {
          result = FigCaptionTimelineGeneratorAddSampleBuffer(*(_QWORD *)(v21 + 32), a3);
          if ((_DWORD)result)
            break;
          v24 = *(_OWORD *)(v21 + 152);
          *(_OWORD *)&time1.start.value = *v22;
          *(_OWORD *)&time1.start.epoch = v24;
          *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v21 + 168);
          result = ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(a1, (__int128 *)&time1.start.value);
          if ((_DWORD)result)
            break;
          *(_OWORD *)&lhs.value = *v22;
          lhs.epoch = *(_QWORD *)(v21 + 152);
          rhs = *(CMTime *)(v21 + 72);
          CMTimeAdd(&time1.start, &lhs, &rhs);
          *v22 = *(_OWORD *)&time1.start.value;
          *(_QWORD *)(v21 + 152) = time1.start.epoch;
          v25 = *(_OWORD *)(v21 + 152);
          *(_OWORD *)&time1.start.value = *v22;
          *(_OWORD *)&time1.start.epoch = v25;
          *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(v21 + 168);
          CMTimeRangeGetEnd(&duration, &time1);
          time1.start = time2;
          if (CMTimeCompare(&duration, &time1.start) >= 1)
            goto LABEL_34;
        }
      }
    }
  }
  return result;
}

uint64_t ffw_vtt_Flush(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  const void *v6;
  CMTimeRange v7;
  CMTime duration;
  CMTimeRange lhs;
  CMTime v10;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 40);
  if (v3)
  {
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v4)
      return 4294954514;
    result = v4(v3);
    if ((_DWORD)result)
      return result;
    v6 = *(const void **)(DerivedStorage + 40);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
  }
  if (*(_DWORD *)DerivedStorage == 1)
  {
    memset(&v10, 0, sizeof(v10));
    *(_OWORD *)&lhs.start.value = *(_OWORD *)(DerivedStorage + 184);
    lhs.start.epoch = *(_QWORD *)(DerivedStorage + 200);
    *(_OWORD *)&v7.start.value = *(_OWORD *)(DerivedStorage + 136);
    v7.start.epoch = *(_QWORD *)(DerivedStorage + 152);
    CMTimeSubtract(&v10, &lhs.start, &v7.start);
    if ((v10.flags & 1) == 0)
      goto LABEL_10;
    *(_OWORD *)&lhs.start.value = *MEMORY[0x1E0CA2E68];
    lhs.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    v7.start = v10;
    if ((CMTimeCompare(&lhs.start, &v7.start) & 0x80000000) == 0
      || (memset(&lhs, 0, sizeof(lhs)),
          *(_OWORD *)&v7.start.value = *(_OWORD *)(DerivedStorage + 136),
          v7.start.epoch = *(_QWORD *)(DerivedStorage + 152),
          duration = v10,
          CMTimeRangeMake(&lhs, &v7.start, &duration),
          v7 = lhs,
          result = ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(a1, (__int128 *)&v7.start.value),
          !(_DWORD)result))
    {
LABEL_10:
      FigFormatWriterGetFigBaseObject(a1);
      if ((~*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 84) & 0x11) == 0)
        return 0;
      result = 0;
      goto LABEL_16;
    }
  }
  else
  {
    result = ffw_vtt_finishPipeline((uint64_t)a1);
    if (!(_DWORD)result)
LABEL_16:
      *(_BYTE *)(DerivedStorage + 52) = 1;
  }
  return result;
}

uint64_t ffw_vtt_WriteHeader()
{
  return 0;
}

uint64_t ffw_vtt_BeginSession()
{
  return 0;
}

uint64_t ffw_vtt_EndSession()
{
  return 0;
}

uint64_t ffw_vtt_createCaptionGroupConverter(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeRef cf;
  _QWORD v7[2];

  cf = 0;
  v7[0] = ffw_vtt_CaptionGroupConverterCallback;
  v7[1] = a2;
  v4 = FigWebVTTCaptionGroupConverterFromSampleBufferCreate(v7, a1, &cf);
  if ((_DWORD)v4)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    *a3 = cf;
  }
  return v4;
}

uint64_t ffw_vtt_CaptionGroupConverterCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  FigFormatWriterGetFigBaseObject(a3);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    v6 = DerivedStorage;
    v7 = FigSampleBufferCreateForCaptionGroup();
    if ((_DWORD)v7)
    {
      v9 = v7;
      goto LABEL_5;
    }
    v8 = FigCaptionTimelineGeneratorAddSampleBuffer(*(_QWORD *)(v6 + 32), 0);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  v9 = v8;
  if ((_DWORD)v8)
LABEL_5:
    ffw_vtt_postErrorOccurredNotification(a3, v9);
  return v9;
}

void ffw_vtt_postErrorOccurredNotification(uint64_t a1, int a2)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  CFTypeRef cf;
  int valuePtr;

  valuePtr = a2;
  if (a2 == -17887)
    valuePtr = -17540;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (cf)
    v3 = CFDictionaryCreate(v2, (const void **)kFigFormatWriterNotificationParameter_OSStatus, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  else
    v3 = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v3)
    CFRelease(v3);
  if (cf)
    CFRelease(cf);
}

CMTime *ffw_vtt_getSampleBufferOutputPresentationEndTime@<X0>(opaqueCMSampleBuffer *a1@<X0>, uint64_t a2@<X8>)
{
  CMTime v5;
  CMTime lhs;
  CMTime v7;
  CMTime v8;

  memset(&v8, 0, sizeof(v8));
  CMSampleBufferGetOutputPresentationTimeStamp(&v8, a1);
  memset(&v7, 0, sizeof(v7));
  CMSampleBufferGetOutputDuration(&v7, a1);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  lhs = v8;
  v5 = v7;
  return CMTimeAdd((CMTime *)a2, &lhs, &v5);
}

uint64_t ffw_vtt_finishPipelineAndOutputSegmentAndRebuildPipeline(const void *a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v5;
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  uint64_t v9;
  CFArrayRef v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  const void *v15;
  CFTypeRef v16;
  const void *v17;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef cf;
  __int128 v25;
  uint64_t v26;
  void *values;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CFGetAllocator(a1);
  v23 = 0;
  cf = 0;
  v6 = ffw_vtt_finishPipeline((uint64_t)a1);
  if ((_DWORD)v6)
    return v6;
  v21 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  v19 = *(__int128 *)((char *)a2 + 24);
  v20 = *((_QWORD *)a2 + 5);
  values = 0;
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v11 = FigSignalErrorAt();
    v10 = 0;
    if ((_DWORD)v11)
      goto LABEL_28;
    goto LABEL_16;
  }
  v8 = Mutable;
  v9 = FigCFDictionarySetInt32();
  if ((_DWORD)v9)
    goto LABEL_35;
  values = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!values)
  {
    v11 = FigSignalErrorAt();
    v10 = 0;
LABEL_14:
    CFRelease(v8);
    goto LABEL_15;
  }
  v9 = FigCFDictionarySetInt32();
  if ((_DWORD)v9
    || (v9 = FigCFDictionarySetInt32(), (_DWORD)v9)
    || (v25 = v19, v26 = v20, v9 = FigCFDictionarySetCMTime(), (_DWORD)v9)
    || (v25 = v21, v26 = v22, v9 = FigCFDictionarySetCMTime(), (_DWORD)v9))
  {
LABEL_35:
    v11 = v9;
    v10 = 0;
  }
  else
  {
    v10 = CFArrayCreate(v5, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    if (v10)
    {
      CFDictionarySetValue(v8, CFSTR("SegmentReportKey_TrackReports"), v10);
      CFRelease(v10);
      v11 = 0;
      v10 = v8;
      v8 = 0;
    }
    else
    {
      v11 = FigSignalErrorAt();
    }
  }
  if (values)
    CFRelease(values);
  if (v8)
    goto LABEL_14;
LABEL_15:
  if ((_DWORD)v11)
    goto LABEL_28;
LABEL_16:
  v12 = (*(uint64_t (**)(_QWORD, _QWORD, CFArrayRef))(DerivedStorage + 56))(*(_QWORD *)(DerivedStorage + 64), *(_QWORD *)(DerivedStorage + 120), v10);
  if ((_DWORD)v12
    || (ffw_vtt_releasePipeline((uint64_t)a1),
        v12 = ffw_vtt_createByteStreamBasedOnBlockBuffer(v5, &v23, (CMBlockBufferRef *)&cf),
        (_DWORD)v12))
  {
    v11 = v12;
  }
  else
  {
    v13 = v23;
    v14 = ffw_vtt_buildPipeline((uint64_t)v5, (uint64_t)a1, v23);
    if ((_DWORD)v14)
    {
      v11 = v14;
      if (!v13)
        goto LABEL_30;
      goto LABEL_29;
    }
    v15 = *(const void **)(DerivedStorage + 120);
    v16 = cf;
    *(_QWORD *)(DerivedStorage + 120) = cf;
    if (v16)
      CFRetain(v16);
    if (v15)
      CFRelease(v15);
    v17 = *(const void **)(DerivedStorage + 128);
    *(_QWORD *)(DerivedStorage + 128) = v13;
    if (v13)
      CFRetain(v13);
    if (v17)
      CFRelease(v17);
    v11 = 0;
  }
LABEL_28:
  v13 = v23;
  if (v23)
LABEL_29:
    CFRelease(v13);
LABEL_30:
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  return v11;
}

uint64_t ffw_vtt_finishPipeline(uint64_t a1)
{
  uint64_t *DerivedStorage;
  uint64_t result;

  FigFormatWriterGetFigBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = FigCaptionTimelineGeneratorFinish(DerivedStorage[4]);
  if (!(_DWORD)result)
  {
    result = FigVTTCaptionWriterFinish(DerivedStorage[1]);
    if (!(_DWORD)result)
      return FigVTTSerializerFlush(DerivedStorage[3]);
  }
  return result;
}

uint64_t ffw_vtt_WriteFigCaptions(const __CFArray *a1, CMTime *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  __int128 *v11;
  const void *ValueAtIndex;
  void (*v13)(__int128 *__return_ptr, const void *);
  __int128 v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  CMTime time2;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CFTypeRef v28;

  FigFormatWriterGetFigBaseObject(a3);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = 0;
  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v8 = Count;
  v9 = 0;
  v10 = *MEMORY[0x1E0C9AE00];
  v11 = (__int128 *)MEMORY[0x1E0CA2E40];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    v13 = *(void (**)(__int128 *__return_ptr, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v13)
    {
      v13(&v25, ValueAtIndex);
    }
    else
    {
      v14 = v11[1];
      v25 = *v11;
      v26 = v14;
      v27 = v11[2];
    }
    v21 = v25;
    *(_QWORD *)&v22 = v26;
    time2 = *a2;
    if (!CMTimeCompare((CMTime *)&v21, &time2))
    {
      if (v28)
      {
        CFRelease(v28);
        v28 = 0;
      }
      CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
      v16 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (!v16)
      {
        v19 = 4294954514;
        goto LABEL_16;
      }
      v17 = v16(CMBaseObject, CFSTR("CaptionData"), v10, &v28);
      if ((_DWORD)v17)
        break;
      v18 = *(_QWORD *)(DerivedStorage + 8);
      v21 = v25;
      v22 = v26;
      v23 = v27;
      v17 = FigVTTCaptionWriterAddCaption(v18, (uint64_t)v28, &v21);
      if ((_DWORD)v17)
        break;
    }
    if (v8 == ++v9)
    {
      v19 = 0;
      goto LABEL_17;
    }
  }
  v19 = v17;
LABEL_16:
  ffw_vtt_postErrorOccurredNotification(a3, v19);
LABEL_17:
  if (v28)
    CFRelease(v28);
  return v19;
}

uint64_t FigAssertionCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, _QWORD *a4)
{
  const void *v6;
  uint64_t result;

  if (!a1 || !a4)
    return FigSignalErrorAt();
  if (!CFEqual(cf1, CFSTR("Assertion_HolderName")))
    return 4294954512;
  v6 = *(const void **)(a1 + 32);
  if (!v6)
    return 4294954513;
  CFRetain(v6);
  result = 0;
  *a4 = *(_QWORD *)(a1 + 32);
  return result;
}

uint64_t FigAssertionSetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  const void *v5;

  if (!a1 || !CFEqual(cf1, CFSTR("Assertion_HolderName")))
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a3;
  if (a3)
    CFRetain(a3);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t FigReadAheadAssertionGetTypeID()
{
  if (sRegisterFigReadAheadAssertionTypeOnce != -1)
    dispatch_once_f(&sRegisterFigReadAheadAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigReadAheadAssertionType);
  return sFigReadAheadAssertionID;
}

uint64_t RegisterFigReadAheadAssertionType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigReadAheadAssertionID = result;
  return result;
}

uint64_t FigReadAheadAssertionCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *Instance;
  uint64_t result;

  if (sRegisterFigReadAheadAssertionTypeOnce != -1)
    dispatch_once_f(&sRegisterFigReadAheadAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigReadAheadAssertionType);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    result = 0;
    Instance[2] = a3;
    Instance[3] = a2;
    Instance[5] = "FigReadAheadAssertion";
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *a4 = Instance;
  return result;
}

uint64_t FigPlaybackAssertionGetTypeID()
{
  if (sRegisterFigPlaybackAssertionTypeOnce != -1)
    dispatch_once_f(&sRegisterFigPlaybackAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigPlaybackAssertionType);
  return sFigPlaybackAssertionID;
}

uint64_t RegisterFigPlaybackAssertionType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPlaybackAssertionID = result;
  return result;
}

uint64_t FigPlaybackAssertionCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *Instance;
  uint64_t result;

  if (sRegisterFigPlaybackAssertionTypeOnce != -1)
    dispatch_once_f(&sRegisterFigPlaybackAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigPlaybackAssertionType);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    result = 0;
    Instance[2] = a3;
    Instance[3] = a2;
    Instance[5] = "FigPlaybackAssertion";
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *a4 = Instance;
  return result;
}

uint64_t FigNSURLSessionAssertionGetTypeID()
{
  if (sRegisterFigNSURLSessionAssertionTypeOnce != -1)
    dispatch_once_f(&sRegisterFigNSURLSessionAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigNSURLSessionAssertionType);
  return sFigNSURLSessionAssertionID;
}

uint64_t RegisterFigNSURLSessionAssertionType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigNSURLSessionAssertionID = result;
  return result;
}

uint64_t FigNSURLSessionAssertionCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *Instance;
  uint64_t result;

  if (sRegisterFigNSURLSessionAssertionTypeOnce != -1)
    dispatch_once_f(&sRegisterFigNSURLSessionAssertionTypeOnce, 0, (dispatch_function_t)RegisterFigNSURLSessionAssertionType);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    result = 0;
    Instance[2] = a3;
    Instance[3] = a2;
    Instance[5] = "FigNSURLSessionAssertion";
  }
  else
  {
    result = FigSignalErrorAt();
  }
  *a4 = Instance;
  return result;
}

double figAssertionInit(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figAssertionFinalize(_QWORD *a1)
{
  void (*v2)(_QWORD);
  const void *v3;

  v2 = (void (*)(_QWORD))a1[2];
  if (v2)
    v2(a1[3]);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
}

__CFString *figAssertionCopyDesc(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  const __CFString *v5;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  v5 = (const __CFString *)a1[4];
  if (!v5)
    v5 = CFSTR("undefined");
  CFStringAppendFormat(Mutable, 0, CFSTR("<%s %p holder %@>"), a1[5], a1, v5);
  return v4;
}

uint64_t FigTTMLRootGetParameters(uint64_t a1, _QWORD *a2)
{
  *a2 = CMBaseObjectGetDerivedStorage() + 136;
  return 0;
}

uint64_t FigTTMLRootCreate(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t active;
  uint64_t DerivedStorage;
  const __CFDictionary *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int32_t v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v19[3];
  CFTypeRef cf;
  CMTime time;
  CMTime time2;
  CMTime time1;
  void *value;

  cf = 0;
  if (a3)
  {
    FigTTMLNodeGetClassID();
    active = CMDerivedObjectCreate();
    if ((_DWORD)active)
      goto LABEL_82;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    active = FigTTMLInitializeNodeBaseStorage(DerivedStorage, 0);
    if ((_DWORD)active)
      goto LABEL_82;
    active = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
    if ((_DWORD)active)
      goto LABEL_82;
    v8 = *(const __CFDictionary **)(DerivedStorage + 24);
    *(_OWORD *)(DerivedStorage + 136) = 0u;
    value = 0;
    *(_OWORD *)(DerivedStorage + 152) = 0u;
    *(_OWORD *)(DerivedStorage + 168) = 0u;
    *(_OWORD *)(DerivedStorage + 184) = 0u;
    *(_OWORD *)(DerivedStorage + 200) = 0u;
    *(_OWORD *)(DerivedStorage + 216) = 0u;
    *(_OWORD *)(DerivedStorage + 232) = 0u;
    *(_OWORD *)(DerivedStorage + 248) = 0u;
    *(_OWORD *)(DerivedStorage + 264) = 0u;
    *(_OWORD *)(DerivedStorage + 280) = 0u;
    *(_OWORD *)(DerivedStorage + 296) = 0u;
    *(_OWORD *)(DerivedStorage + 312) = 0u;
    *(_QWORD *)(DerivedStorage + 328) = 0;
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter profile"), (const void **)&value))
      *(_QWORD *)(DerivedStorage + 136) = value;
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter clockMode"), (const void **)&value))
    {
      v9 = CFSTR("local");
      if (!CFEqual(value, CFSTR("local")))
      {
        v9 = CFSTR("gps");
        if (!CFEqual(value, CFSTR("gps")))
        {
          v9 = CFSTR("utc");
          if (!CFEqual(value, CFSTR("utc")))
            goto LABEL_61;
        }
      }
    }
    else
    {
      v9 = CFSTR("utc");
    }
    *(_QWORD *)(DerivedStorage + 144) = v9;
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter dropMode"), (const void **)&value))
    {
      v10 = CFSTR("dropNTSC");
      if (!CFEqual(value, CFSTR("dropNTSC")))
      {
        v10 = CFSTR("dropPAL");
        if (!CFEqual(value, CFSTR("dropPAL")))
        {
          v10 = CFSTR("nonDrop");
          if (!CFEqual(value, CFSTR("nonDrop")))
            goto LABEL_61;
        }
      }
    }
    else
    {
      v10 = CFSTR("nonDrop");
    }
    *(_QWORD *)(DerivedStorage + 152) = v10;
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter frameRate"), (const void **)&value))
    {
      active = FigTTMLParseFrameRate((const __CFString *)value, (_DWORD *)(DerivedStorage + 160));
      if ((_DWORD)active)
        goto LABEL_82;
    }
    else
    {
      *(_DWORD *)(DerivedStorage + 160) = 30;
    }
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter frameRateMultiplier"), (const void **)&value))
    {
      active = FigTTMLParseFrameRateMultiplier((const __CFString *)value, (CMTime *)(DerivedStorage + 164));
      if ((_DWORD)active)
        goto LABEL_82;
    }
    else
    {
      CMTimeMake(&time1, 1, 1);
      *(CMTime *)(DerivedStorage + 164) = time1;
    }
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter markerMode"), (const void **)&value))
    {
      v11 = CFSTR("continuous");
      if (!CFEqual(value, CFSTR("continuous")))
      {
        v11 = CFSTR("discontinuous");
        if (!CFEqual(value, CFSTR("discontinuous")))
          goto LABEL_61;
      }
    }
    else
    {
      v11 = CFSTR("discontinuous");
    }
    *(_QWORD *)(DerivedStorage + 192) = v11;
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter pixelAspectRatio"), (const void **)&value))
    {
      active = FigTTMLParsePixelAspectRatio((const __CFString *)value, (uint64_t *)(DerivedStorage + 200));
      if ((_DWORD)active)
        goto LABEL_82;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 200) = FigGeometryAspectRatioMake();
    }
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio"), (const void **)&value)|| CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter displayAspectRatio"), (const void **)&value))
    {
      active = FigTTMLParsePixelAspectRatio((const __CFString *)value, (uint64_t *)(DerivedStorage + 208));
      if ((_DWORD)active)
        goto LABEL_82;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 208) = *MEMORY[0x1E0CA4AC0];
    }
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#parameter activeArea"), (const void **)&value))
    {
      active = FigTTMLParseActiveArea((const __CFString *)value, (_OWORD *)(DerivedStorage + 216));
      if ((_DWORD)active)
        goto LABEL_82;
    }
    else
    {
      v12 = MEMORY[0x1E0CA4AE8];
      v13 = *(_OWORD *)(MEMORY[0x1E0CA4AE8] + 16);
      *(_OWORD *)(DerivedStorage + 216) = *MEMORY[0x1E0CA4AE8];
      *(_OWORD *)(DerivedStorage + 232) = v13;
      v14 = *(_OWORD *)(v12 + 48);
      *(_OWORD *)(DerivedStorage + 248) = *(_OWORD *)(v12 + 32);
      *(_OWORD *)(DerivedStorage + 264) = v14;
    }
    if (!CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter subFrameRate"), (const void **)&value)|| FigCFEqual()|| FigCFEqual()|| FigCFEqual())
    {
      *(_DWORD *)(DerivedStorage + 280) = 1;
    }
    else
    {
      active = FigTTMLParseFrameRate((const __CFString *)value, (_DWORD *)(DerivedStorage + 280));
      if ((_DWORD)active)
        goto LABEL_82;
      if (!*(_DWORD *)(DerivedStorage + 280))
        goto LABEL_61;
    }
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter tickRate"), (const void **)&value))
    {
      active = FigTTMLParseTickRate((const __CFString *)value, (CMTime *)(DerivedStorage + 284));
      if ((_DWORD)active)
        goto LABEL_82;
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      time2 = *(CMTime *)(DerivedStorage + 284);
      if (!CMTimeCompare(&time1, &time2))
        goto LABEL_61;
    }
    else
    {
      if (CFDictionaryContainsKey(v8, CFSTR("http://www.w3.org/ns/ttml#parameter frameRate")))
      {
        v15 = *(_DWORD *)(DerivedStorage + 160);
        time1 = *(CMTime *)(DerivedStorage + 164);
        CMTimeMultiply(&time, &time1, v15);
        CMTimeMultiply(&time1, &time, *(_DWORD *)(DerivedStorage + 280));
      }
      else
      {
        CMTimeMake(&time1, 1, 1);
      }
      *(CMTime *)(DerivedStorage + 284) = time1;
    }
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter timeBase"), (const void **)&value))
    {
      v16 = CFSTR("media");
      if (!CFEqual(value, CFSTR("media")))
      {
        v16 = CFSTR("smpte");
        if (!CFEqual(value, CFSTR("smpte")))
        {
          v16 = CFSTR("clock");
          if (!CFEqual(value, CFSTR("clock")))
            goto LABEL_61;
        }
      }
    }
    else
    {
      v16 = CFSTR("media");
    }
    *(_QWORD *)(DerivedStorage + 312) = v16;
    if (CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#parameter cellResolution"), (const void **)&value))
    {
      active = FigTTMLParseCellResolution((const __CFString *)value, (_DWORD *)(DerivedStorage + 320), (_DWORD *)(DerivedStorage + 324));
      if ((_DWORD)active)
        goto LABEL_82;
      if (!*(_DWORD *)(DerivedStorage + 320) || !*(_DWORD *)(DerivedStorage + 324))
        goto LABEL_61;
    }
    else
    {
      *(_QWORD *)(DerivedStorage + 320) = 0xF00000020;
    }
    if (!CFDictionaryGetValueIfPresent(v8, CFSTR("http://www.w3.org/ns/ttml#styling extent"), (const void **)&value))
      goto LABEL_74;
    active = FigTTMLParsePixelResolution((uint64_t)value, (_DWORD *)(DerivedStorage + 328), (_DWORD *)(DerivedStorage + 332));
    if ((_DWORD)active)
      goto LABEL_82;
    if (*(_DWORD *)(DerivedStorage + 328) && *(_DWORD *)(DerivedStorage + 332))
    {
LABEL_74:
      v19[0] = (uint64_t)cf;
      v19[1] = (uint64_t)cf;
      v19[2] = 0;
      active = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLRootConsumeChildNode, v19);
      if (!(_DWORD)active)
      {
        if (*(_QWORD *)(DerivedStorage + 336)
          || (active = FigTTMLHeadCreateDefault(a1, (uint64_t)v19, (_QWORD *)(DerivedStorage + 336)), !(_DWORD)active))
        {
          v17 = 0;
          *a3 = cf;
          return v17;
        }
      }
LABEL_82:
      v17 = active;
      if (cf)
        CFRelease(cf);
      return v17;
    }
LABEL_61:
    active = FigSignalErrorAt();
    if ((_DWORD)active)
      goto LABEL_82;
    goto LABEL_74;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLRootConsumeChildNode(uint64_t a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  const void *v10;
  CFTypeRef v11;
  const __CFAllocator *v12;
  uint64_t v13;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  cf = 0;
  v15 = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_16;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v16, (CFStringRef *)&v15);
  if ((_DWORD)v8)
    goto LABEL_26;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLHeadCreate(v9, a1, (uint64_t)a2, &cf);
    if (!(_DWORD)v8)
    {
      v10 = *(const void **)(DerivedStorage + 336);
      v11 = cf;
      *(_QWORD *)(DerivedStorage + 336) = cf;
      if (!v11)
        goto LABEL_9;
      goto LABEL_8;
    }
    goto LABEL_26;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_16:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_17:
      v13 = 0;
      if (a3)
      {
        *a3 = cf;
        cf = 0;
      }
      goto LABEL_19;
    }
    goto LABEL_26;
  }
  v12 = CFGetAllocator(*a2);
  v8 = FigTTMLBodyCreate(v12, a1, (uint64_t)a2, &cf);
  if (!(_DWORD)v8)
  {
    v10 = *(const void **)(DerivedStorage + 344);
    v11 = cf;
    *(_QWORD *)(DerivedStorage + 344) = cf;
    if (!v11)
    {
LABEL_9:
      if (v10)
        CFRelease(v10);
      goto LABEL_17;
    }
LABEL_8:
    CFRetain(v11);
    goto LABEL_9;
  }
LABEL_26:
  v13 = v8;
LABEL_19:
  if (v15)
    CFRelease(v15);
LABEL_21:
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
  return v13;
}

uint64_t FigTTMLRootGetBodyNode()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 344);
}

uint64_t FigTTMLRootGetHeadNode()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 336);
}

void figTTMLRoot_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 336);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 344);
  if (v2)
    CFRelease(v2);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLRoot_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("tt: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLRoot_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  uint64_t DerivedStorage;
  uint64_t v6;
  const void *v7;
  const void *v8;
  uint64_t v9;

  v3 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = DerivedStorage;
    v7 = *(const void **)(DerivedStorage + 336);
    if (v7)
      CFArrayAppendValue(Mutable, v7);
    v8 = *(const void **)(v6 + 344);
    if (v8)
      CFArrayAppendValue(Mutable, v8);
    v9 = 0;
    *a2 = Mutable;
  }
  else
  {
    v9 = FigSignalErrorAt();
    if (Mutable)
      CFRelease(Mutable);
  }
  return v9;
}

uint64_t figTTMLRoot_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 7;
  return 0;
}

uint64_t FigPKDCPECryptorCreate(const void *a1, unint64_t a2, uint64_t a3, const void *a4, const __CFAllocator *a5, const __CFDictionary *a6, CFTypeRef *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t DerivedStorage;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  dispatch_queue_t v18;
  CFTypeRef v19;
  void *v20;
  NSObject *global_queue;
  const void *Value;
  const void *v23;
  CFTypeID v24;
  const void *v25;
  CFTypeRef v26;
  CFTypeRef v27;
  __int128 v31;
  void (*v32)(uint64_t, void *);
  CFTypeRef v33;

  v33 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v12 = 4294955146;
  if (!a1 || !(a2 | a3) || !a6 || !a7)
    goto LABEL_30;
  if (sActiveCryptorsInitOnce != -1)
    dispatch_once_f(&sActiveCryptorsInitOnce, 0, (dispatch_function_t)InitActiveCryptorList);
  MEMORY[0x19402F294](&FigPKDCPECryptorGetClassID_sRegisterFigPKDCPECryptorTypeOnce, RegisterFigPKDCPECryptorType);
  v13 = CMDerivedObjectCreate();
  if ((_DWORD)v13)
    goto LABEL_29;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (v15 = DerivedStorage,
        v16 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(_QWORD *)(v15 + 8) = v16) == 0)
    || (v17 = FigSimpleMutexCreate(), (*(_QWORD *)(v15 + 24) = v17) == 0)
    || (v18 = dispatch_queue_create("AirPlayNotifications", 0), (*(_QWORD *)(v15 + 240) = v18) == 0))
  {
    v12 = 4294955145;
    goto LABEL_30;
  }
  *(_DWORD *)(v15 + 192) = 1;
  *(_QWORD *)v15 = CFRetain(a1);
  v13 = EnsureUUID_0(v33);
  if ((_DWORD)v13)
    goto LABEL_29;
  if (a2)
    v19 = CFRetain((CFTypeRef)a2);
  else
    v19 = 0;
  *(_QWORD *)(v15 + 32) = v19;
  if (a3)
  {
    *(_QWORD *)(v15 + 40) = CFRetain((CFTypeRef)a3);
    v31 = xmmword_1E2FAFF88;
    v32 = KeyRequestErrorOccurredCallback;
    v20 = *(void **)(v15 + 216);
    global_queue = dispatch_get_global_queue(0, 0);
    v12 = PKDKeyManagerInstallCallbacksForKeyID(a3, v20, (uint64_t)v33, global_queue, &v31);
    if ((_DWORD)v12)
      goto LABEL_30;
  }
  else
  {
    *(_QWORD *)(v15 + 40) = 0;
  }
  Value = CFDictionaryGetValue(a6, CFSTR("AuditToken"));
  if (Value)
  {
    v23 = Value;
    v24 = CFGetTypeID(Value);
    if (v24 == CFDataGetTypeID())
      *(_QWORD *)(v15 + 144) = CFRetain(v23);
  }
  FigCFDictionaryGetBooleanIfPresent();
  v25 = CFDictionaryGetValue(a6, CFSTR("CryptKeyAttributes"));
  if (!v25)
  {
    *(_QWORD *)(v15 + 224) = 0;
    goto LABEL_28;
  }
  v26 = CFRetain(v25);
  *(_QWORD *)(v15 + 224) = v26;
  if (!v26)
  {
LABEL_28:
    v13 = FigSignalErrorAt();
    goto LABEL_29;
  }
  if (a4)
  {
    v27 = CFRetain(a4);
    *(_QWORD *)(v15 + 152) = v27;
    *(_QWORD *)(v15 + 160) = CFRetain(v27);
    goto LABEL_34;
  }
  v13 = FigCPEExternalProtectionMonitorCreateForMethods(a5, 4u, 0, 0, (_QWORD *)(v15 + 152));
  if ((_DWORD)v13)
  {
LABEL_29:
    v12 = v13;
    goto LABEL_30;
  }
  *(_QWORD *)(v15 + 160) = CFRetain(*(CFTypeRef *)(v15 + 152));
  *(_BYTE *)(v15 + 168) = 1;
LABEL_34:
  FigCPEExternalProtectionMonitorBeginMonitoring(*(_QWORD *)(v15 + 152));
  v12 = AddWeakListenerOnExternalProtectionMonitor((uint64_t)v33, *(_QWORD *)(v15 + 152));
  if (!(_DWORD)v12)
  {
    *(_QWORD *)(v15 + 232) = 0;
    *a7 = v33;
    return v12;
  }
LABEL_30:
  if (v33)
    CFRelease(v33);
  return v12;
}

uint64_t InitActiveCryptorList()
{
  uint64_t result;

  sActiveCryptors = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  result = FigSimpleMutexCreate();
  sActiveCryptorsLock = result;
  return result;
}

uint64_t EnsureUUID_0(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  CFUUIDRef v5;
  const __CFUUID *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 216))
    return 0;
  v3 = DerivedStorage;
  v4 = CFGetAllocator(a1);
  v5 = CFUUIDCreate(v4);
  if (v5)
  {
    v6 = v5;
    v7 = CFGetAllocator(a1);
    v8 = CFUUIDCreateString(v7, v6);
    *(_QWORD *)(v3 + 216) = v8;
    if (v8)
      v9 = 0;
    else
      v9 = FigSignalErrorAt();
    CFRelease(v6);
    return v9;
  }
  return FigSignalErrorAt();
}

void PersistentKeyUpdatedCallback(uint64_t a1, void *a2)
{
  CFDictionaryRef v2;
  CFDictionaryRef v3;
  void *values;

  values = a2;
  CMBaseObjectGetDerivedStorage();
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA3188], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v2)
  {
    v3 = v2;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v3);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

void KeyRequestErrorOccurredCallback(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(DerivedStorage + 16))
    FigSignalErrorAt();
  else
    PostKeyRequestErrorOccurred(a1, a2);
  JUMPOUT(0x19402EF04);
}

uint64_t AddWeakListenerOnExternalProtectionMonitor(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterAddWeakListener();
}

void FigCFRelease_8(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigPKDCPELimitedCryptorCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return FigPKDCPELimitedCryptorCreateForBufferedAirPlay(a1, 0, 0, a2, a3);
}

uint64_t FigPKDCPELimitedCryptorCreateForBufferedAirPlay(uint64_t a1, const void *a2, const void *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef v15;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  v9 = 4294955146;
  if (a1 && a5)
  {
    MEMORY[0x19402F294](&FigPKDCPELimitedCryptorGetClassID_sRegisterFigPKDCPELimitedCryptorTypeOnce, RegisterFigPKDCPELimitedCryptorType);
    v10 = CMDerivedObjectCreate();
    if ((_DWORD)v10)
      return v10;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage)
      return 4294955145;
    v12 = DerivedStorage;
    v13 = FigSimpleMutexCreate();
    *(_QWORD *)(v12 + 8) = v13;
    if (!v13)
      return 4294955145;
    v10 = EnsureUUIDForLimitedCryptor(0);
    if ((_DWORD)v10)
      return v10;
    *(_QWORD *)(v12 + 16) = a1;
    if (a2)
      v14 = CFRetain(a2);
    else
      v14 = 0;
    *(_QWORD *)(v12 + 40) = v14;
    if (a3)
      v15 = CFRetain(a3);
    else
      v15 = 0;
    v9 = 0;
    *(_QWORD *)(v12 + 48) = v15;
    *(_DWORD *)(v12 + 24) = 0;
    *a5 = 0;
  }
  return v9;
}

uint64_t FigPKDCPELimitedCryptorCreateWithExternalProtectionMethods(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = FigPKDCPELimitedCryptorCreateForBufferedAirPlay(a1, 0, 0, a3, a4);
  v7 = v6;
  if (a4 && !(_DWORD)v6)
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 24) = a2;
  return v7;
}

uint64_t EnsureUUIDForLimitedCryptor(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFAllocator *v4;
  CFUUIDRef v5;
  const __CFUUID *v6;
  const __CFAllocator *v7;
  CFStringRef v8;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 72))
    return 0;
  v3 = DerivedStorage;
  v4 = CFGetAllocator(a1);
  v5 = CFUUIDCreate(v4);
  if (v5)
  {
    v6 = v5;
    v7 = CFGetAllocator(a1);
    v8 = CFUUIDCreateString(v7, v6);
    *(_QWORD *)(v3 + 72) = v8;
    if (v8)
      v9 = 0;
    else
      v9 = FigSignalErrorAt();
    CFRelease(v6);
    return v9;
  }
  return FigSignalErrorAt();
}

BOOL FigPKDCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDCPECryptorInvalidate(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  void *v25;
  const void *v26;
  const void *v27;
  CFRange v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A33A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(DerivedStorage + 16))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 16) = 1;
    *(_DWORD *)(DerivedStorage + 192) = 0;
    MEMORY[0x19402EEEC](sActiveCryptorsLock);
    v4 = (const __CFArray *)sActiveCryptors;
    v29.length = CFArrayGetCount((CFArrayRef)sActiveCryptors);
    v29.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v29, a1);
    if ((FirstIndexOfValue & 0x8000000000000000) == 0)
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)sActiveCryptors, FirstIndexOfValue);
    v6 = *(_QWORD *)(DerivedStorage + 80);
    if (v6)
    {
      N8pdwAfn(v6);
      *(_QWORD *)(DerivedStorage + 80) = 0;
    }
    MEMORY[0x19402EF04](sActiveCryptorsLock);
    v7 = *(_QWORD *)(DerivedStorage + 40);
    if (v7)
      PKDKeyManagerRemoveKeyID(v7, *(void **)(DerivedStorage + 216));
    v8 = *(_QWORD *)(DerivedStorage + 72);
    if (v8)
    {
      JE2f6WCx(v8);
      *(_QWORD *)(DerivedStorage + 72) = 0;
    }
    *(_QWORD *)(DerivedStorage + 208) = 0;
    *(_QWORD *)(DerivedStorage + 232) = 0;
    v9 = *(const void **)(DerivedStorage + 8);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 200));
    v10 = *(const void **)(DerivedStorage + 32);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v11 = *(const void **)(DerivedStorage + 40);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v12 = *(const void **)(DerivedStorage + 104);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 112);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 112) = 0;
    }
    v14 = *(const void **)(DerivedStorage + 128);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(DerivedStorage + 128) = 0;
    }
    *(_BYTE *)(DerivedStorage + 136) = 0;
    v15 = *(const void **)(DerivedStorage + 144);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 88);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 88) = 0;
    }
    v17 = *(_QWORD *)(DerivedStorage + 152);
    if (v17)
    {
      RemoveWeakListenerOnExternalProtectionMonitor((uint64_t)a1, v17);
      FigCPEExternalProtectionMonitorEndMonitoring(*(_QWORD *)(DerivedStorage + 152));
      v18 = *(const void **)(DerivedStorage + 152);
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(DerivedStorage + 152) = 0;
      }
    }
    v19 = *(const void **)(DerivedStorage + 160);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(DerivedStorage + 160) = 0;
    }
    v20 = *(const void **)DerivedStorage;
    *(_QWORD *)DerivedStorage = 0;
    v21 = *(const void **)(DerivedStorage + 184);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(DerivedStorage + 184) = 0;
    }
    v22 = *(const void **)(DerivedStorage + 216);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
    v23 = *(const void **)(DerivedStorage + 224);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(DerivedStorage + 224) = 0;
    }
    v24 = *(const void **)(DerivedStorage + 248);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(DerivedStorage + 248) = 0;
    }
    v25 = *(void **)(DerivedStorage + 256);
    if (v25)
    {
      *(_QWORD *)(DerivedStorage + 256) = 0;
      free(v25);
    }
    v26 = *(const void **)(DerivedStorage + 264);
    if (v26)
    {
      CFRelease(v26);
      *(_QWORD *)(DerivedStorage + 264) = 0;
    }
    v27 = *(const void **)(DerivedStorage + 272);
    if (v27)
    {
      CFRelease(v27);
      *(_QWORD *)(DerivedStorage + 272) = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
    if (v20)
    {
      FigPKDCPEProtectorCryptorWasInvalidated((uint64_t)v20, a1);
      CFRelease(v20);
    }
  }
  return 0;
}

void FigPKDCPECryptorFinalize(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDCPECryptorInvalidate(a1);
  if (*(_QWORD *)(DerivedStorage + 24))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v3 = *(NSObject **)(DerivedStorage + 240);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(DerivedStorage + 240) = 0;
  }
}

__CFString *FigPKDCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const __CFDictionary *Value;
  const __CFString *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (!*(_BYTE *)(DerivedStorage + 16))
  {
    if (Mutable)
    {
      Value = *(const __CFDictionary **)(DerivedStorage + 224);
      if (Value)
        Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA3030]);
    }
    else
    {
      Value = 0;
    }
    v6 = PKDLogPrivateData((uint64_t)Value);
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigCPECryptorPKD %p %@ %@>"), a1, v6, *(_QWORD *)(DerivedStorage + 216));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t FigPKDCPECryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, CFDataRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyRequestStateAndID;
  uint64_t v13;
  int IsDecryptContextAvailableForKeyID;
  const void **v15;
  const void **v16;
  const void *UInt32;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  BOOL v22;
  const __CFAllocator *v23;
  CFNumberType v24;
  uint64_t SInt32;
  const void *v26;
  uint64_t v27;
  const __CFData *v28;
  char Methods;
  int v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, const void *, uint64_t, CFDataRef *);
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 4294955146;
  if (a2 && a4)
  {
    v10 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
    if (*(_BYTE *)(v10 + 16))
    {
      v9 = 4294954511;
LABEL_30:
      MEMORY[0x19402EF04](*(_QWORD *)(v10 + 24));
      return v9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
    {
      v9 = 4294951076;
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E0]))
    {
      v11 = *(_QWORD *)(v10 + 40);
      if (v11)
      {
LABEL_9:
        KeyRequestStateAndID = PKDKeyManagerCopyPropertyForKeyID(v11, *(void **)(v10 + 216), a2, a4);
LABEL_10:
        v9 = KeyRequestStateAndID;
        goto LABEL_30;
      }
      UInt32 = *(const void **)(v10 + 264);
      if (!UInt32)
        goto LABEL_28;
      goto LABEL_27;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
    {
      v13 = *(_QWORD *)(v10 + 40);
      if (v13)
      {
        IsDecryptContextAvailableForKeyID = PKDKeyManagerIsDecryptContextAvailableForKeyID(v13, *(void **)(v10 + 216));
LABEL_14:
        v15 = (const void **)MEMORY[0x1E0C9AE50];
        v16 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_15:
        if (IsDecryptContextAvailableForKeyID)
          v15 = v16;
        goto LABEL_26;
      }
      if (*(_QWORD *)(v10 + 80) || *(_QWORD *)(v10 + 128) || *(_QWORD *)(v10 + 72) && *(_QWORD *)(v10 + 88))
      {
        v15 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_26:
        UInt32 = *v15;
LABEL_27:
        UInt32 = CFRetain(UInt32);
LABEL_28:
        v9 = 0;
        goto LABEL_29;
      }
LABEL_41:
      v15 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_26;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31D0]))
    {
      v11 = *(_QWORD *)(v10 + 40);
      if (v11)
        goto LABEL_9;
      IsDecryptContextAvailableForKeyID = IsLeaseExpired();
      v15 = (const void **)MEMORY[0x1E0C9AE40];
      v16 = (const void **)MEMORY[0x1E0C9AE50];
      goto LABEL_15;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3210]))
    {
      v19 = *(_QWORD *)(v10 + 40);
      if (v19)
      {
        IsDecryptContextAvailableForKeyID = PKDKeyManagerIsReadyToCreateKeyRequestForKeyID(v19, *(void **)(v10 + 216));
        goto LABEL_14;
      }
      v15 = (const void **)MEMORY[0x1E0C9AE50];
      v21 = (const void **)MEMORY[0x1E0C9AE40];
      v22 = *(_QWORD *)(v10 + 72) == 0;
LABEL_43:
      if (!v22)
        v15 = v21;
      goto LABEL_26;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E8]))
    {
      LODWORD(valuePtr) = 0;
      v20 = *(_QWORD *)(v10 + 40);
      if (v20)
      {
        KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(v20, *(void **)(v10 + 216), &valuePtr, 0);
        if ((_DWORD)KeyRequestStateAndID)
          goto LABEL_10;
      }
      else
      {
        LODWORD(valuePtr) = *(_DWORD *)(v10 + 192);
      }
      SInt32 = FigCFNumberCreateSInt32();
      *a4 = (CFDataRef)SInt32;
      if (SInt32)
        v9 = 0;
      else
        v9 = 4294949725;
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
    {
      valuePtr = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v10 + 152));
      v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v24 = kCFNumberSInt64Type;
LABEL_48:
      UInt32 = CFNumberCreate(v23, v24, &valuePtr);
      goto LABEL_28;
    }
    v26 = (const void *)*MEMORY[0x1E0CA31D8];
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31D8]) && !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C8]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3238]))
      {
        v11 = *(_QWORD *)(v10 + 40);
        if (v11)
          goto LABEL_9;
        v15 = (const void **)MEMORY[0x1E0C9AE40];
        v21 = (const void **)MEMORY[0x1E0C9AE50];
        v22 = *(_BYTE *)(v10 + 136) == 0;
        goto LABEL_43;
      }
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F8]))
      {
        v11 = *(_QWORD *)(v10 + 40);
        if (v11)
          goto LABEL_9;
        UInt32 = *(const void **)(v10 + 128);
        if (UInt32)
          goto LABEL_27;
      }
      else
      {
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
        {
          v11 = *(_QWORD *)(v10 + 40);
          if (!v11)
          {
            KeyRequestStateAndID = CreatePackagedPersistentKeyGuts(*(_QWORD *)(v10 + 32), *(const void **)(v10 + 128), a4);
            goto LABEL_10;
          }
          goto LABEL_9;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3220]))
        {
          v11 = *(_QWORD *)(v10 + 40);
          if (v11)
            goto LABEL_9;
          v9 = EnsureRequiredExternalProtectionMethod(a1);
          if ((_DWORD)v9)
            goto LABEL_30;
          UInt32 = (const void *)FigCFNumberCreateUInt32();
LABEL_29:
          *a4 = (CFDataRef)UInt32;
          goto LABEL_30;
        }
        if (CFEqual(a2, CFSTR("ExternalProtectionMethodsRequiredForPlayback")) && *(_BYTE *)(v10 + 168))
        {
          Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v10 + 152));
          v30 = Methods & 1;
          if ((Methods & 2) != 0)
            v30 = 2;
          LODWORD(valuePtr) = v30;
          v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v24 = kCFNumberSInt32Type;
          goto LABEL_48;
        }
        if (CFEqual(a2, CFSTR("DisplayList")) && *(_BYTE *)(v10 + 168))
        {
          KeyRequestStateAndID = FigCPEExternalProtectionMonitorCopyProperty(*(_QWORD *)(v10 + 152), CFSTR("DisplayList"), a3, (uint64_t)a4);
          goto LABEL_10;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3230]))
        {
          KeyRequestStateAndID = EnsureUUID_0(a1);
          if ((_DWORD)KeyRequestStateAndID)
            goto LABEL_10;
          UInt32 = *(const void **)(v10 + 216);
          if (!UInt32)
            goto LABEL_28;
          goto LABEL_27;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31B8]))
        {
          KeyRequestStateAndID = CopyCurrentRequestID_0(v10, (uint64_t *)a4);
          goto LABEL_10;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31B0]))
        {
          UInt32 = *(const void **)(v10 + 224);
          if (!UInt32)
            goto LABEL_28;
          goto LABEL_27;
        }
        if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3208]))
        {
          UInt32 = *(const void **)(v10 + 184);
          if (!UInt32)
            goto LABEL_28;
          goto LABEL_27;
        }
        if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A8]))
        {
          if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3228]))
          {
            v31 = *(_QWORD *)v10;
            if (!*(_QWORD *)v10)
            {
              v9 = 4294954512;
              goto LABEL_30;
            }
            v32 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFDataRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
            if (!v32)
            {
              v9 = 4294954514;
              goto LABEL_30;
            }
            KeyRequestStateAndID = v32(v31, a2, a3, a4);
            goto LABEL_10;
          }
          goto LABEL_41;
        }
        v11 = *(_QWORD *)(v10 + 40);
        if (v11)
          goto LABEL_9;
        UInt32 = *(const void **)(v10 + 272);
        if (UInt32)
          goto LABEL_27;
      }
      v9 = 4294955137;
      goto LABEL_30;
    }
    v27 = *(_QWORD *)(v10 + 40);
    if (v27)
    {
      KeyRequestStateAndID = PKDKeyManagerEnsureAndCopyLowValueKeyAndIVForKeyID(v27, *(void **)(v10 + 216), (_QWORD *)(v10 + 104), (_QWORD *)(v10 + 112));
      if ((_DWORD)KeyRequestStateAndID)
        goto LABEL_10;
    }
    else
    {
      KeyRequestStateAndID = EnsureLowValueKeyAndIV((uint64_t)a1);
      if ((_DWORD)KeyRequestStateAndID)
        goto LABEL_10;
    }
    if (CFEqual(a2, v26))
    {
      v28 = *(const __CFData **)(v10 + 104);
      if (!v28)
        goto LABEL_62;
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C8]))
      {
        if (*a4)
          goto LABEL_63;
        goto LABEL_71;
      }
      v28 = *(const __CFData **)(v10 + 112);
      if (!v28)
      {
LABEL_62:
        *a4 = v28;
        if (v28)
        {
LABEL_63:
          v9 = 0;
          goto LABEL_30;
        }
LABEL_71:
        v9 = 4294955145;
        goto LABEL_30;
      }
    }
    v28 = (const __CFData *)CFRetain(v28);
    goto LABEL_62;
  }
  return v9;
}

uint64_t FigPKDCPECryptorSetProperty(const void *a1, const void *a2, void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeID v9;
  uint64_t Methods;
  uint64_t KeyRequestStateAndID;
  CFTypeRef v12;
  CFTypeRef v13;
  const void *v14;
  CFTypeRef v15;
  CFTypeID v16;
  uint64_t v17;
  CFTypeID v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, const void *, void *);
  os_log_type_t type[8];
  uint64_t v31;
  CFTypeRef cf;
  _QWORD valuePtr[17];

  valuePtr[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v7 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (!*(_BYTE *)(v7 + 16))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31C0]))
    {
      valuePtr[0] = 0;
      if (a3)
      {
        v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v7 + 152));
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, valuePtr);
          if ((valuePtr[0] & ~Methods) == 0)
          {
LABEL_30:
            v8 = 0;
            goto LABEL_31;
          }
          cf = 0;
          KeyRequestStateAndID = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E0C9AE00], valuePtr[0] & ~(_DWORD)Methods, 0, *(CFTypeRef *)(v7 + 152), &cf);
          if (!(_DWORD)KeyRequestStateAndID)
          {
            v12 = *(CFTypeRef *)(v7 + 152);
            if (v12 == cf)
            {
              v13 = *(CFTypeRef *)(v7 + 152);
LABEL_24:
              *(_QWORD *)(v7 + 152) = v13;
              if (v13)
                CFRetain(v13);
              if (v12)
                CFRelease(v12);
              v15 = cf;
              if (!cf)
                goto LABEL_30;
              goto LABEL_29;
            }
            KeyRequestStateAndID = AddWeakListenerOnExternalProtectionMonitor((uint64_t)a1, (uint64_t)cf);
            if (!(_DWORD)KeyRequestStateAndID)
            {
              KeyRequestStateAndID = RemoveWeakListenerOnExternalProtectionMonitor((uint64_t)a1, *(_QWORD *)(v7 + 152));
              if (!(_DWORD)KeyRequestStateAndID)
              {
                v13 = cf;
                v12 = *(CFTypeRef *)(v7 + 152);
                goto LABEL_24;
              }
            }
          }
LABEL_38:
          v8 = KeyRequestStateAndID;
          goto LABEL_31;
        }
      }
      goto LABEL_69;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3208]))
    {
      v14 = *(const void **)(v7 + 184);
      *(_QWORD *)(v7 + 184) = a3;
      if (a3)
        CFRetain(a3);
      if (!v14)
        goto LABEL_30;
      v15 = v14;
LABEL_29:
      CFRelease(v15);
      goto LABEL_30;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31E0]))
    {
      if (a3)
      {
        v16 = CFGetTypeID(a3);
        if (v16 == CFErrorGetTypeID())
        {
          v17 = *(_QWORD *)(v7 + 40);
          if (!v17)
          {
            *(_DWORD *)(v7 + 192) = 1;
            v21 = *(const void **)(v7 + 264);
            *(_QWORD *)(v7 + 264) = a3;
            CFRetain(a3);
            if (v21)
              CFRelease(v21);
            v22 = *(_QWORD *)(v7 + 72);
            if (v22)
            {
              JE2f6WCx(v22);
              *(_QWORD *)(v7 + 72) = 0;
            }
            *(_QWORD *)(v7 + 208) = 0;
            PostKeyRequestErrorOccurred((uint64_t)a1, a3);
            goto LABEL_30;
          }
          KeyRequestStateAndID = PKDKeyManagerSetKeyRequestError(v17, *(void **)(v7 + 216), a3);
          goto LABEL_38;
        }
      }
LABEL_69:
      KeyRequestStateAndID = FigSignalErrorAt();
      goto LABEL_38;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3238]))
    {
      if (!a3)
        goto LABEL_69;
      v19 = CFGetTypeID(a3);
      if (v19 != CFBooleanGetTypeID())
        goto LABEL_69;
      v20 = *(_QWORD *)(v7 + 40);
      if (!v20)
      {
        if (dword_1EE2A33A8)
        {
          LODWORD(v31) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v8 = 0;
        *(_BYTE *)(v7 + 136) = CFBooleanGetValue((CFBooleanRef)a3);
        goto LABEL_31;
      }
LABEL_37:
      KeyRequestStateAndID = PKDKeyManagerSetPropertyForKeyID(v20, *(void **)(v7 + 216), a2, a3);
      goto LABEL_38;
    }
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31F0]))
    {
      if (CFEqual(a2, CFSTR("DisplayList")) && *(_BYTE *)(v7 + 168))
      {
        v26 = FigCPEExternalProtectionMonitorSetProperty(*(_QWORD **)(v7 + 152), CFSTR("DisplayList"), (CFArrayRef)a3);
        if (v26 == -12152)
          v8 = 0;
        else
          v8 = v26;
        goto LABEL_31;
      }
      v28 = *(_QWORD *)v7;
      if (!*(_QWORD *)v7)
      {
        v8 = 4294954512;
        goto LABEL_31;
      }
      v29 = *(uint64_t (**)(uint64_t, const void *, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v29)
      {
        v8 = 4294954514;
        goto LABEL_31;
      }
      KeyRequestStateAndID = v29(v28, a2, a3);
      goto LABEL_38;
    }
    v31 = 0;
    v23 = *(_QWORD *)(v7 + 40);
    if (v23)
    {
      KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(v23, *(void **)(v7 + 216), 0, &v31);
      if ((_DWORD)KeyRequestStateAndID)
        goto LABEL_38;
      v24 = *(_QWORD *)(v7 + 40);
      if (v24)
      {
        KeyRequestStateAndID = PKDKeyManagerSetUsedForLowValueDecryptionForKeyID(v24, *(void **)(v7 + 216), *(_BYTE *)(v7 + 120));
        if ((_DWORD)KeyRequestStateAndID)
          goto LABEL_38;
        v20 = *(_QWORD *)(v7 + 40);
        goto LABEL_37;
      }
    }
    else
    {
      v31 = *(_QWORD *)(v7 + 208);
    }
    *(_QWORD *)type = 0;
    if (dword_1EE2A33A8)
    {
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_BYTE *)(v7 + 136) = 1;
    KeyRequestStateAndID = CopyInfoFromPackagedPersistentKey(v7, a3, 0, 0, (CFTypeRef *)type);
    if (!(_DWORD)KeyRequestStateAndID)
    {
      v8 = SetPersistentKey(a1, *(const void **)type);
      CFRelease(*(CFTypeRef *)type);
      goto LABEL_31;
    }
    goto LABEL_38;
  }
  v8 = 4294954511;
LABEL_31:
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 24));
  return v8;
}

uint64_t RemoveWeakListenerOnExternalProtectionMonitor(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigNotificationCenterRemoveWeakListener();
}

uint64_t ExternalProtectionStatusChangedCallback_2()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t IsLeaseExpired()
{
  uint64_t result;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  if (result)
    return jSNXSLgDwR(result) == -42656;
  return result;
}

uint64_t EnsureLowValueKeyAndIV(uint64_t a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  uint64_t result;
  const void *v7;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[13])
    return 0;
  v3 = DerivedStorage;
  if (DerivedStorage[14])
    return 0;
  v4 = DerivedStorage[9];
  if (!v4)
    return FigSignalErrorAt();
  v5 = (const void *)DerivedStorage[11];
  if (!v5)
    return FigSignalErrorAt();
  result = ProcessKeyResponse(a1, v4, v5, 3);
  if (!(_DWORD)result)
  {
    v3[9] = 0;
    v7 = (const void *)v3[11];
    if (v7)
    {
      CFRelease(v7);
      v3[11] = 0;
      v7 = (const void *)v3[9];
    }
    JE2f6WCx((uint64_t)v7);
    return 0;
  }
  return result;
}

uint64_t CreatePackagedPersistentKeyGuts(uint64_t a1, const void *a2, CFDataRef *a3)
{
  const __CFAllocator *v5;
  const __CFDictionary *v6;
  __CFDictionary *MutableCopy;
  CFDataRef Data;
  uint64_t v9;

  if (a1 && a2 && a3)
  {
    *a3 = 0;
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = (const __CFDictionary *)PKDMovieIDGetInfo(a1);
    MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, v6);
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA4D40], a2);
    Data = CFPropertyListCreateData(v5, MutableCopy, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (Data)
    {
      v9 = 0;
      *a3 = Data;
      if (!MutableCopy)
        return v9;
    }
    else
    {
      v9 = FigSignalErrorAt();
      if (!MutableCopy)
        return v9;
    }
    CFRelease(MutableCopy);
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t EnsureRequiredExternalProtectionMethod(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;

  v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 176))
    return 0;
  v3 = DerivedStorage;
  EnsureDecryptContext(a1);
  v4 = *(_QWORD *)(v3 + 80);
  if (!v4)
    return FigSignalErrorAt();
  result = i2DzSgbBIIe95gyG0gW(v4, (uint64_t)&v7);
  if (!(_DWORD)result)
  {
    if (v7 == 0x285A0863BBA8E1D3)
      v6 = 2;
    else
      v6 = v7 == 0x40791AC78BD5C571;
    *(_DWORD *)(v3 + 172) = v6;
    *(_BYTE *)(v3 + 176) = 1;
  }
  return result;
}

uint64_t CopyCurrentRequestID_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t SInt64;
  uint64_t v7;

  v7 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    result = PKDKeyManagerGetKeyRequestStateAndID(v4, *(void **)(a1 + 216), 0, &v7);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 208);
  }
  SInt64 = FigCFNumberCreateSInt64();
  *a2 = SInt64;
  if (SInt64)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t ProcessKeyResponse(uint64_t a1, uint64_t a2, const void *a3, int a4)
{
  uint64_t DerivedStorage;
  _QWORD *v8;
  const __CFAllocator *v9;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  CFMutableDictionaryRef v12;
  const __CFDictionary *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  NSObject *v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v22;
  const void *Value;
  const void *v24;
  const void *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  if ((a4 - 1) >= 3)
    return FigSignalErrorAt();
  v8 = (_QWORD *)DerivedStorage;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v11 = Mutable;
  v12 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v12)
  {
    v13 = v12;
    if (a4 == 2)
    {
      v14 = (const void *)v8[16];
      if (v14)
      {
        CFRelease(v14);
        v8[16] = 0;
      }
      v15 = (const void *)v8[18];
      if (!v15)
        goto LABEL_48;
      CFDictionarySetValue(v11, CFSTR("lGxB4ky"), v15);
    }
    if (v8[10])
      FigCFDictionarySetInt64();
    CFDictionarySetValue(v11, CFSTR("RulIk"), a3);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt64();
    v16 = gojqbvrX305gQO((uint64_t)v11, (uint64_t)v13);
    if ((_DWORD)v16)
      goto LABEL_49;
    switch(a4)
    {
      case 1:
        if (FigCFDictionaryGetInt64IfPresent())
          v8[10] = 0;
        if (dword_1EE2A33A8)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!v8[10])
          goto LABEL_48;
        break;
      case 3:
        v22 = (const void *)v8[13];
        Value = CFDictionaryGetValue(v13, CFSTR("sPJ8AGu5PT"));
        v8[13] = Value;
        if (Value)
          CFRetain(Value);
        if (v22)
          CFRelease(v22);
        if (!v8[13])
          goto LABEL_48;
        v24 = (const void *)v8[14];
        v25 = CFDictionaryGetValue(v13, CFSTR("o9YYYJ64ntzC"));
        v8[14] = v25;
        if (v25)
          CFRetain(v25);
        if (v24)
          CFRelease(v24);
        if (dword_1EE2A33A8)
        {
          v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!v8[14])
          goto LABEL_48;
        break;
      case 2:
        v17 = (const void *)v8[16];
        v18 = CFDictionaryGetValue(v13, CFSTR("igoeg"));
        v8[16] = v18;
        if (v18)
          CFRetain(v18);
        if (v17)
          CFRelease(v17);
        if (dword_1EE2A33A8)
        {
          v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (!v8[16])
        {
LABEL_48:
          v16 = FigSignalErrorAt();
LABEL_49:
          v27 = v16;
          goto LABEL_43;
        }
        break;
    }
    v27 = 0;
LABEL_43:
    CFRelease(v11);
    CFRelease(v13);
    return v27;
  }
  v28 = FigSignalErrorAt();
  CFRelease(v11);
  return v28;
}

uint64_t EnsureDecryptContext(const void *a1)
{
  uint64_t result;

  result = EnsureDecryptContextGuts(a1);
  if ((_DWORD)result == -42670 || (_DWORD)result == -42786)
  {
    result = wnFx1xLULXLA();
    if (!(_DWORD)result)
      return EnsureDecryptContextGuts(a1);
  }
  return result;
}

uint64_t EnsureDecryptContextGuts(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t DecryptContextForKeyID;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  CFIndex FirstIndexOfValue;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  const __CFAllocator *v22;
  CFDictionaryRef v23;
  uint64_t v24;
  uint64_t v25;
  int Methods;
  unsigned int v27;
  CFTypeRef v28;
  uint64_t v29;
  CFTypeRef v30;
  CFTypeRef cf;
  void *values;
  CFRange v33;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 96))
  {
    v3 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 120))
    {
      v6 = (uint64_t *)(DerivedStorage + 80);
      v7 = *(_QWORD *)(DerivedStorage + 80);
      v8 = *(_QWORD *)(DerivedStorage + 40);
      if (v8)
      {
        DecryptContextForKeyID = PKDKeyManagerGetDecryptContextForKeyID(v8, *(void **)(v3 + 216), (_QWORD *)(v3 + 80));
        if ((_DWORD)DecryptContextForKeyID)
        {
          v4 = DecryptContextForKeyID;
          goto LABEL_72;
        }
        v10 = 0;
        *(_BYTE *)(v3 + 177) = v7 == *(_QWORD *)(v3 + 80);
        goto LABEL_8;
      }
      v11 = *(_QWORD *)(v3 + 72);
      if (!v7)
      {
        if (v11)
        {
          if (!*(_QWORD *)(v3 + 88))
            goto LABEL_73;
        }
        else
        {
          if (!*(_QWORD *)(v3 + 128))
          {
LABEL_73:
            v4 = FigSignalErrorAt();
            goto LABEL_71;
          }
          v11 = 0;
        }
      }
      v10 = *(const void **)(v3 + 88);
      *(_QWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 72) = 0;
      v14 = CMBaseObjectGetDerivedStorage();
      v15 = *(_QWORD *)(v14 + 80);
      MEMORY[0x19402EEEC](sActiveCryptorsLock);
      if (v15)
      {
        v16 = (const __CFArray *)sActiveCryptors;
        v33.length = CFArrayGetCount((CFArrayRef)sActiveCryptors);
        v33.location = 0;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v16, v33, a1);
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)sActiveCryptors, FirstIndexOfValue);
        CFArrayAppendValue((CFMutableArrayRef)sActiveCryptors, a1);
        MEMORY[0x19402EF04](sActiveCryptorsLock);
        if (v10 && v11)
        {
          v18 = ProcessKeyResponse((uint64_t)a1, v11, v10, 1);
          if ((_DWORD)v18)
          {
            v4 = v18;
            goto LABEL_70;
          }
          *(_BYTE *)(v14 + 177) = 0;
        }
        goto LABEL_8;
      }
      v19 = ZZUDP2EEn9tLDQ();
      if (v19)
      {
        v20 = v19;
        if (CFArrayGetCount((CFArrayRef)sActiveCryptors) >= 1)
        {
          CFArrayGetValueAtIndex((CFArrayRef)sActiveCryptors, 0);
          CFArrayRemoveValueAtIndex((CFMutableArrayRef)sActiveCryptors, 0);
          LODWORD(cf) = v20;
          v21 = CMBaseObjectGetDerivedStorage();
          v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &cf);
          v23 = CFDictionaryCreate(v22, MEMORY[0x1E0CA3140], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v24 = *(_QWORD *)(v21 + 80);
          if (v24)
          {
            N8pdwAfn(v24);
            *(_QWORD *)(v21 + 80) = 0;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
          }
          else
          {
            FigSignalErrorAt();
          }
          if (values)
            CFRelease(values);
          if (v23)
            CFRelease(v23);
        }
      }
      if (*(_QWORD *)(v14 + 128) && *(_BYTE *)(v14 + 136))
      {
        values = 0;
        v4 = PKDMovieIDGetValue(*(_QWORD *)(v14 + 32), 0, &values);
        if ((_DWORD)v4)
        {
LABEL_43:
          if ((_DWORD)v4)
          {
            MEMORY[0x19402EF04](sActiveCryptorsLock);
            if (v10)
              goto LABEL_70;
            goto LABEL_71;
          }
          CFArrayAppendValue((CFMutableArrayRef)sActiveCryptors, a1);
          MEMORY[0x19402EF04](sActiveCryptorsLock);
LABEL_8:
          if (*(_BYTE *)(v3 + 177))
          {
            v4 = 0;
            if (!v10)
              goto LABEL_71;
LABEL_70:
            CFRelease(v10);
            goto LABEL_71;
          }
          values = 0;
          v12 = i2DzSgbBIIe95gyG0gW(*v6, (uint64_t)&values);
          if ((_DWORD)v12)
          {
            v4 = v12;
LABEL_17:
            v13 = 2;
LABEL_51:
            Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v3 + 152));
            if ((~Methods & v13) == 0)
            {
LABEL_68:
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
              CMNotificationCenterGetDefaultLocalCenter();
              FigDispatchAsyncPostNotification();
LABEL_69:
              if (!v10)
                goto LABEL_71;
              goto LABEL_70;
            }
            cf = 0;
            v27 = FigCPEExternalProtectionMonitorCreateForMethods((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v13 & ~Methods, 0, *(CFTypeRef *)(v3 + 160), &cf);
            if (v27)
            {
              if ((_DWORD)v4)
                v4 = v4;
              else
                v4 = v27;
              goto LABEL_68;
            }
            v28 = *(CFTypeRef *)(v3 + 152);
            if (v28 == cf)
            {
              v30 = *(CFTypeRef *)(v3 + 152);
LABEL_62:
              *(_QWORD *)(v3 + 152) = v30;
              if (v30)
                CFRetain(v30);
              if (v28)
                CFRelease(v28);
              if (cf)
                CFRelease(cf);
              goto LABEL_68;
            }
            v29 = AddWeakListenerOnExternalProtectionMonitor((uint64_t)a1, (uint64_t)cf);
            if (!(_DWORD)v29)
            {
              v4 = RemoveWeakListenerOnExternalProtectionMonitor((uint64_t)a1, *(_QWORD *)(v3 + 152));
              if ((_DWORD)v4)
                goto LABEL_69;
              v30 = cf;
              v28 = *(CFTypeRef *)(v3 + 152);
              goto LABEL_62;
            }
            v4 = v29;
            if (v10)
              goto LABEL_70;
LABEL_71:
            if (!(_DWORD)v4)
              return v4;
LABEL_72:
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            return v4;
          }
          if (values == (void *)0xEF72894CA7895B78)
          {
            v13 = 0;
          }
          else if (values == (void *)0x285A0863BBA8E1D3)
          {
            v13 = 2;
          }
          else
          {
            if (values != (void *)0x40791AC78BD5C571)
            {
              v4 = 4294951071;
              goto LABEL_17;
            }
            v13 = 1;
          }
          v4 = 0;
          *(_BYTE *)(v3 + 177) = 1;
          goto LABEL_51;
        }
        v25 = ProcessOfflineKey((uint64_t)a1, (uint64_t)values, 4);
      }
      else
      {
        v25 = ProcessKeyResponse((uint64_t)a1, v11, v10, 1);
      }
      v4 = v25;
      goto LABEL_43;
    }
  }
  return 0;
}

uint64_t ProcessOfflineKey(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef v8;
  __CFDictionary *v9;
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *Value;
  CFTypeRef v18;
  const void *v19;
  const void *v20;
  uint64_t PackagedPersistentKeyGuts;
  CFDictionaryRef v22;
  uint64_t v23;
  void *values;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  values = 0;
  if (!a2)
    return FigSignalErrorAt();
  if ((a3 & 0xFFFFFFFD) == 4
    && (v6 = DerivedStorage,
        v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (v8 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0))
  {
    v9 = v8;
    Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v11 = Mutable;
      CFDictionarySetValue(v9, CFSTR("igoeg"), *(const void **)(v6 + 128));
      CFDictionarySetValue(v9, CFSTR("lGxB4ky"), *(const void **)(v6 + 144));
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt64();
      v12 = gojqbvrX305gQO((uint64_t)v9, (uint64_t)v11);
      if (!(_DWORD)v12)
      {
        if (a3 == 4)
        {
          if (FigCFDictionaryGetInt64IfPresent())
          {
            *(_QWORD *)(v6 + 80) = 0;
          }
          else if (*(_QWORD *)(v6 + 80))
          {
LABEL_18:
            Value = CFDictionaryGetValue(v11, CFSTR("igoeg"));
            if (Value)
            {
              v18 = CFRetain(Value);
              v19 = v18;
              if (v18)
              {
                v20 = *(const void **)(v6 + 128);
                *(_QWORD *)(v6 + 128) = v18;
                CFRetain(v18);
                if (v20)
                  CFRelease(v20);
                PackagedPersistentKeyGuts = CreatePackagedPersistentKeyGuts(*(_QWORD *)(v6 + 32), v19, (CFDataRef *)&values);
                if (!(_DWORD)PackagedPersistentKeyGuts)
                {
                  v22 = CFDictionaryCreate(v7, MEMORY[0x1E0CA3188], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  if (v22)
                  {
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigDispatchAsyncPostNotification();
                    v23 = 0;
                  }
                  else
                  {
                    v23 = FigSignalErrorAt();
                  }
LABEL_33:
                  CFRelease(v9);
                  CFRelease(v11);
                  if (v19)
                    CFRelease(v19);
                  goto LABEL_35;
                }
                v23 = PackagedPersistentKeyGuts;
              }
              else
              {
                v23 = 0;
              }
LABEL_32:
              v22 = 0;
              goto LABEL_33;
            }
            v23 = 0;
LABEL_26:
            v19 = 0;
            goto LABEL_32;
          }
        }
        else
        {
          if (a3 != 6)
            goto LABEL_18;
          v13 = *(const void **)(v6 + 104);
          v14 = CFDictionaryGetValue(v11, CFSTR("sPJ8AGu5PT"));
          *(_QWORD *)(v6 + 104) = v14;
          if (v14)
            CFRetain(v14);
          if (v13)
            CFRelease(v13);
          if (*(_QWORD *)(v6 + 104))
          {
            v15 = *(const void **)(v6 + 112);
            v16 = CFDictionaryGetValue(v11, CFSTR("o9YYYJ64ntzC"));
            *(_QWORD *)(v6 + 112) = v16;
            if (v16)
              CFRetain(v16);
            if (v15)
              CFRelease(v15);
            if (*(_QWORD *)(v6 + 112))
              goto LABEL_18;
          }
        }
        v12 = FigSignalErrorAt();
      }
      v23 = v12;
      goto LABEL_26;
    }
    v23 = FigSignalErrorAt();
    CFRelease(v9);
  }
  else
  {
    v23 = FigSignalErrorAt();
  }
  v22 = 0;
LABEL_35:
  if (values)
    CFRelease(values);
  if (v22)
    CFRelease(v22);
  return v23;
}

void PostKeyRequestErrorOccurred(uint64_t a1, void *a2)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFDictionaryRef v3;
  CFDictionaryRef v4;
  void *values[25];

  values[24] = *(void **)MEMORY[0x1E0C80C00];
  values[0] = a2;
  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A33A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v3 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA3120], (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v3)
  {
    v4 = v3;
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    CFRelease(v4);
  }
  else if (FigSignalErrorAt())
  {
    FigSignalErrorAt();
  }
}

uint64_t CopyInfoFromPackagedPersistentKey(uint64_t a1, CFTypeRef cf, CFTypeRef *a3, CFTypeRef *a4, CFTypeRef *a5)
{
  CFTypeID v10;
  const __CFDictionary *v11;
  const __CFDictionary *v13;
  CFTypeID v14;
  const void *Value;
  const void *v16;
  CFTypeID v17;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  const void *v21;
  uint64_t v22;
  const void *v23;
  CFTypeID v24;

  if (!cf)
    return FigSignalErrorAt();
  v10 = CFGetTypeID(cf);
  if (v10 != CFDataGetTypeID())
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v11 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDataRef)cf, 0, 0, 0);
  if (!v11)
    return FigSignalErrorAt();
  v13 = v11;
  v14 = CFGetTypeID(v11);
  if (v14 != CFDictionaryGetTypeID())
    goto LABEL_12;
  Value = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA4D40]);
  if (!Value)
    goto LABEL_12;
  v16 = Value;
  v17 = CFGetTypeID(Value);
  if (v17 != CFDataGetTypeID())
    goto LABEL_12;
  v18 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA4D10]);
  if (v18
    && (v19 = v18, v20 = CFGetTypeID(v18), v20 == CFDataGetTypeID())
    && (v21 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA4D48])) != 0
    && (v23 = v21, v24 = CFGetTypeID(v21), v24 == CFArrayGetTypeID()))
  {
    PKDMovieIDGetValue(*(_QWORD *)(a1 + 32), v13, 0);
    *a5 = CFRetain(v16);
    if (a4)
      *a4 = CFRetain(v23);
    v22 = 0;
    if (a3)
      *a3 = CFRetain(v19);
  }
  else
  {
LABEL_12:
    v22 = FigSignalErrorAt();
  }
  CFRelease(v13);
  return v22;
}

uint64_t SetPersistentKey(const void *a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t result;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 128))
  {
    if (!FigCFEqual())
      return FigSignalErrorAt();
    v5 = *(const void **)(DerivedStorage + 128);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(DerivedStorage + 128) = a2;
  if (a2)
    CFRetain(a2);
  if (v5)
    CFRelease(v5);
  if (!*(_BYTE *)(DerivedStorage + 120))
    return EnsureDecryptContext(a1);
  v7 = 0;
  result = PKDMovieIDGetValue(*(_QWORD *)(DerivedStorage + 32), 0, &v7);
  if (!(_DWORD)result)
    return ProcessOfflineKey((uint64_t)a1, v7, 6);
  return result;
}

uint64_t FigPKDCPECryptorGetNativeSession(const void *a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v5 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v5 + 16))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = EnsureDecryptContext(a1);
    if (!(_DWORD)v6)
      *a2 = *(_QWORD *)(v5 + 80);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 24));
  return v6;
}

uint64_t FigPKDCPECryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v4 + 16))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v4 + 152));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 24));
  return v5;
}

uint64_t FigPKDCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v5 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v5 + 16))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatus(*(_QWORD *)(v5 + 152));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 24));
  return v6;
}

uint64_t FigPKDCPECryptorDecryptSampleWithFormat(const void *a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t DataPointer;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  int v19;
  char *v20;
  char *dataPointerOut;
  size_t v22;
  size_t totalLengthOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = 0;
  totalLengthOut = 0;
  v20 = 0;
  dataPointerOut = 0;
  v9 = 4294955146;
  if (a2 && a3)
  {
    v10 = DerivedStorage;
    DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, &totalLengthOut, &dataPointerOut);
    if ((_DWORD)DataPointer)
      return DataPointer;
    DataPointer = CMBlockBufferGetDataPointer(a3, 0, 0, &v22, &v20);
    if ((_DWORD)DataPointer)
      return DataPointer;
    if (totalLengthOut != v22)
      return FigSignalErrorAt();
    MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 24));
    v9 = EnsureDecryptContext(a1);
    MEMORY[0x19402EF04](*(_QWORD *)(v10 + 24));
    if (!(_DWORD)v9)
    {
      if (a4 == 2053464883 || a4 == 2053319475)
      {
        v19 = 0;
        v18 = 0;
        DataPointer = GetAudioPacketDataForDecrypt(a2, &v19, &v18);
        if (!(_DWORD)DataPointer)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 24));
          GetCryptFormatForFormat(a4);
          v14 = v18;
          XgJ8VCncrBfn9DzTTUYPfkG();
          v9 = v15;
          MEMORY[0x19402EF04](*(_QWORD *)(v10 + 24));
          v13 = v14;
          goto LABEL_14;
        }
      }
      else
      {
        if (a4 != 1902212707)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 24));
          GetCryptFormatForFormat(a4);
          NfcRKVnxuKZy04KWbdFu71Ou();
          v9 = v16;
          MEMORY[0x19402EF04](*(_QWORD *)(v10 + 24));
          return v9;
        }
        v19 = 0;
        v18 = 0;
        DataPointer = GetSliceDataForDecrypt(a2, (uint64_t)&v19, (uint64_t)&v18);
        if (!(_DWORD)DataPointer)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v10 + 24));
          XgJ8VCncrBfn9DzTTUYPfkG();
          v9 = v12;
          MEMORY[0x19402EF04](*(_QWORD *)(v10 + 24));
          v13 = v18;
LABEL_14:
          free(v13);
          return v9;
        }
      }
      return DataPointer;
    }
  }
  return v9;
}

uint64_t FigPKDCPECryptorScrambleDecryptedSampleWithFormat(int a1, CMBlockBufferRef theBuffer)
{
  uint64_t result;
  char v3;
  size_t v4;
  char *v5;
  size_t totalLengthOut;

  v5 = 0;
  totalLengthOut = 0;
  if (!theBuffer)
    return 4294955146;
  result = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &v5);
  if (!(_DWORD)result)
  {
    if (totalLengthOut)
    {
      v3 = FigPKDCPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
      v4 = totalLengthOut - 1;
      do
      {
        v5[v4] = ((v3 ^ 0x4C) * (32 - v3)) ^ &FigPKDCPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        v3 = ++FigPKDCPECryptorScrambleDecryptedSampleWithFormat_sbCounter;
        --v4;
      }
      while (v4 != -1);
    }
    return 0;
  }
  return result;
}

uint64_t FigPKDCPECryptorReencryptSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorPairForReEncryption()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorCreateKeyRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyRequestStateAndID;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  CFTypeID v18;
  uint64_t v19;
  const void *v20;
  CFTypeRef v21;
  CFTypeRef v22;
  const __CFAllocator *v23;
  __CFDictionary *Mutable;
  __CFDictionary *v25;
  uint64_t v26;
  const void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFMutableDictionaryRef v30;
  CFMutableDictionaryRef v31;
  CFMutableDictionaryRef v32;
  const __CFDictionary *v33;
  const void *UInt64;
  const void *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  const void *v40;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  const __CFString *v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  CFTypeRef v53;
  os_log_type_t type[8];
  CFTypeRef cf;
  _BYTE value[12];
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  const __CFString *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  v9 = 4294955146;
  if (a2 && a4)
  {
    *a4 = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
    v52 = 0;
    if (*(_BYTE *)(v8 + 16))
    {
      v9 = 4294954511;
LABEL_75:
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 24));
      goto LABEL_76;
    }
    v10 = *(_QWORD *)(v8 + 40);
    if (v10)
    {
      KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(v10, *(void **)(v8 + 216), 0, &v52);
      if ((_DWORD)KeyRequestStateAndID)
        goto LABEL_91;
      v12 = v52;
    }
    else
    {
      v12 = *(_QWORD *)(v8 + 208);
      v52 = v12;
    }
    if (PKDKeyRequestIDsMatch((uint64_t)a2, v12))
    {
      v13 = *(_QWORD *)(v8 + 40);
      v14 = (const void **)MEMORY[0x1E0CA4D10];
      if (v13)
      {
        KeyRequestStateAndID = PKDKeyManagerCreateKeyRequestForKeyID(v13, *(void **)(v8 + 216), a2, *(const void **)(v8 + 184), a4);
        if ((_DWORD)KeyRequestStateAndID)
          goto LABEL_91;
LABEL_69:
        v39 = *(const void **)(v8 + 272);
        v40 = CFDictionaryGetValue(a2, *v14);
        *(_QWORD *)(v8 + 272) = v40;
        if (v40)
          CFRetain(v40);
        if (v39)
          CFRelease(v39);
        v9 = 0;
        if (*(_QWORD *)(v8 + 80))
          *(_BYTE *)(v8 + 96) = 1;
        goto LABEL_75;
      }
      if (!*(_QWORD *)(v8 + 72))
      {
        v15 = *(_QWORD *)(v8 + 32);
        v16 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D18]);
        v51 = (void *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D58]);
        cf = 0;
        *(_QWORD *)value = 0;
        *(_QWORD *)type = 0;
        v17 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D38]);
        v53 = 0;
        if (v16)
        {
          v18 = CFGetTypeID(v16);
          if (v18 != CFDataGetTypeID())
            goto LABEL_88;
        }
        if (!v15)
          goto LABEL_88;
        if (v17)
        {
          v19 = CopyInfoFromPackagedPersistentKey(v8, v17, (CFTypeRef *)value, &cf, &v53);
          if ((_DWORD)v19)
          {
            v9 = v19;
            v25 = 0;
            goto LABEL_57;
          }
          if (!*(_QWORD *)value)
          {
LABEL_88:
            v9 = FigSignalErrorAt();
            v25 = 0;
            goto LABEL_56;
          }
        }
        else
        {
          v20 = CFDictionaryGetValue(a2, *v14);
          if (v20)
            v21 = CFRetain(v20);
          else
            v21 = 0;
          *(_QWORD *)value = v21;
          v22 = *(CFTypeRef *)(v8 + 184);
          if (v22)
            v22 = CFRetain(v22);
          cf = v22;
          if (!v21)
            goto LABEL_88;
        }
        if (!cf)
          goto LABEL_88;
        v48 = (void *)v16;
        if (*(_QWORD *)(v8 + 184))
        {
          if (!FigCFEqual())
            goto LABEL_88;
        }
        v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v25 = Mutable;
        if (Mutable)
        {
          CFDictionarySetValue(Mutable, *v14, *(const void **)value);
          CFDictionarySetValue(v25, (const void *)*MEMORY[0x1E0CA4D48], cf);
          v26 = PKDMovieIDGetValue(v15, v25, type);
          if (!(_DWORD)v26)
          {
            if (*(_QWORD *)type)
            {
              v50 = a4;
              v27 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA4D68]);
              v28 = v53;
              v29 = cf;
              v67 = 0;
              v30 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              if (v30)
              {
                v31 = v30;
                v49 = a1;
                v32 = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (!v32)
                {
                  v9 = FigSignalErrorAt();
                  CFRelease(v31);
                  a4 = v50;
LABEL_55:
                  v14 = (const void **)MEMORY[0x1E0CA4D10];
                  goto LABEL_56;
                }
                v33 = v32;
                UInt64 = (const void *)FigCFNumberCreateUInt64();
                if (UInt64)
                {
                  if (v28)
                  {
                    CFDictionarySetValue(v31, CFSTR("igoeg"), v28);
                    v35 = *(const void **)(v8 + 144);
                    if (v35)
                    {
                      CFDictionarySetValue(v31, CFSTR("lGxB4ky"), v35);
LABEL_40:
                      a4 = v50;
                      CFDictionarySetValue(v31, CFSTR("P5h3ZgzLxs"), v29);
                      if (*(_QWORD *)(v8 + 80))
                        FigCFDictionarySetInt64();
                      if (v51)
                        CFDictionarySetValue(v31, CFSTR("xNJu5eepP"), v51);
                      CFDictionarySetValue(v31, CFSTR("aMII4QYJ"), UInt64);
                      FigCFDictionarySetInt32();
                      if (v27)
                        CFDictionarySetValue(v31, CFSTR("LBV3vEsw"), v27);
                      v36 = pC3lVfLuVJLMz((uint64_t)v31, (uint64_t)v33);
                      if ((_DWORD)v36)
                      {
                        v9 = v36;
                      }
                      else
                      {
                        if (FigCFDictionaryGetInt64IfPresent())
                          *(_QWORD *)(v8 + 72) = v67;
                        v37 = CFDictionaryGetValue(v33, CFSTR("yN1lNULD2GD"));
                        if (v37)
                          v37 = CFRetain(v37);
                        v9 = 0;
                        *v50 = v37;
                      }
                      goto LABEL_52;
                    }
                  }
                  else if (v48)
                  {
                    CFDictionarySetValue(v31, CFSTR("HJN6grNt"), v48);
                    goto LABEL_40;
                  }
                }
                v9 = FigSignalErrorAt();
                a4 = v50;
LABEL_52:
                CFRelease(v31);
                CFRelease(v33);
                if (UInt64)
                  CFRelease(UInt64);
                a1 = v49;
                goto LABEL_55;
              }
              v9 = FigSignalErrorAt();
              a4 = v50;
            }
            else
            {
              v9 = FigSignalErrorAt();
            }
LABEL_56:
            if (!(_DWORD)v9)
              goto LABEL_60;
            goto LABEL_57;
          }
          v9 = v26;
        }
        else
        {
          v9 = 4294955145;
        }
LABEL_57:
        v38 = *(_QWORD *)(v8 + 72);
        if (v38)
        {
          JE2f6WCx(v38);
          *(_QWORD *)(v8 + 72) = 0;
        }
        *(_QWORD *)(v8 + 208) = 0;
LABEL_60:
        if (v25)
          CFRelease(v25);
        if (*(_QWORD *)value)
          CFRelease(*(CFTypeRef *)value);
        if (cf)
          CFRelease(cf);
        if (v53)
          CFRelease(v53);
        if ((_DWORD)v9)
          goto LABEL_75;
        goto LABEL_69;
      }
    }
    KeyRequestStateAndID = FigSignalErrorAt();
LABEL_91:
    v9 = KeyRequestStateAndID;
    goto LABEL_75;
  }
LABEL_76:
  if (dword_1EE2A33A8)
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v42 = cf;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type[0]))
      v43 = v42;
    else
      v43 = v42 & 0xFFFFFFFE;
    if (v43)
    {
      v44 = *(_QWORD *)(v8 + 216);
      v45 = PKDLogPrivateData((uint64_t)a2);
      if (a4)
        v46 = *a4;
      else
        v46 = 0;
      *(_DWORD *)value = 136316418;
      *(_QWORD *)&value[4] = "FigPKDCPECryptorCreateKeyRequest";
      v57 = 2048;
      v58 = a1;
      v59 = 2114;
      v60 = v44;
      v61 = 2114;
      v62 = v45;
      v63 = 1024;
      v64 = v9;
      v65 = 2048;
      v66 = v46;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v9;
}

uint64_t FigPKDCPECryptorSetKeyRequestResponse(const void *a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  const __CFDate *Value;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t KeyRequestStateAndID;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  const void *v14;
  const __CFAllocator *v15;
  CFAbsoluteTime Current;
  const __CFDate *v17;
  double TimeIntervalSinceDate;
  double v19;
  dispatch_source_t *v20;
  NSObject *global_queue;
  NSObject *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  dispatch_time_t v26;
  uint64_t v27;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD v30[27];

  v30[25] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v30[0] = 0;
  if (a2)
  {
    if (a3)
    {
      Value = (const __CFDate *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4D70]);
      v8 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E0CA4D78]) == (const void *)*MEMORY[0x1E0C9AE50];
    }
    else
    {
      v8 = 0;
      Value = 0;
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
    if (*(_BYTE *)(DerivedStorage + 16))
    {
      v24 = 4294954511;
      goto LABEL_38;
    }
    v9 = *(_QWORD *)(DerivedStorage + 40);
    if (v9)
    {
      KeyRequestStateAndID = PKDKeyManagerGetKeyRequestStateAndID(v9, *(void **)(DerivedStorage + 216), 0, v30);
      if ((_DWORD)KeyRequestStateAndID)
        goto LABEL_47;
      v11 = *(_QWORD *)(DerivedStorage + 40);
      if (v11)
      {
        KeyRequestStateAndID = PKDKeyManagerSetUsedForLowValueDecryptionForKeyID(v11, *(void **)(DerivedStorage + 216), *(_BYTE *)(DerivedStorage + 120));
        if ((_DWORD)KeyRequestStateAndID)
          goto LABEL_47;
        KeyRequestStateAndID = PKDKeyManagerSetKeyRequestResponseForKeyID(*(_QWORD *)(DerivedStorage + 40), *(void **)(DerivedStorage + 216), a2);
        if ((_DWORD)KeyRequestStateAndID)
          goto LABEL_47;
LABEL_27:
        if (*(_BYTE *)(DerivedStorage + 280))
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigDispatchAsyncPostNotification();
          if (Value)
            goto LABEL_29;
        }
        else
        {
          *(_BYTE *)(DerivedStorage + 280) = 1;
          if (Value)
          {
LABEL_29:
            v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            Current = CFAbsoluteTimeGetCurrent();
            v17 = CFDateCreate(v15, Current);
            TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v17);
            if (TimeIntervalSinceDate > 0.0
              && (v19 = TimeIntervalSinceDate,
                  v20 = (dispatch_source_t *)(DerivedStorage + 200),
                  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 200)),
                  global_queue = dispatch_get_global_queue(0, 0),
                  v22 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, global_queue),
                  (*(_QWORD *)(DerivedStorage + 200) = v22) != 0))
            {
              if (*(_QWORD *)(DerivedStorage + 8))
              {
                CFRetain(*(CFTypeRef *)(DerivedStorage + 8));
                v22 = *(NSObject **)(DerivedStorage + 200);
                v23 = *(void **)(DerivedStorage + 8);
              }
              else
              {
                v23 = 0;
              }
              dispatch_set_context(v22, v23);
              v25 = *v20;
              v26 = dispatch_time(0, (uint64_t)(v19 * 1000000000.0));
              dispatch_source_set_timer(v25, v26, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
              dispatch_source_set_event_handler_f(*v20, (dispatch_function_t)RenewalTimerCallback_0);
              dispatch_source_set_cancel_handler_f(*v20, (dispatch_function_t)FigCFRelease_8);
              dispatch_resume(*v20);
              v24 = 0;
              if (!v17)
                goto LABEL_38;
            }
            else
            {
              v24 = FigSignalErrorAt();
              if (!v17)
                goto LABEL_38;
            }
            CFRelease(v17);
LABEL_38:
            MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
            v27 = v30[0];
            goto LABEL_39;
          }
        }
        v24 = 0;
        goto LABEL_38;
      }
    }
    else
    {
      v30[0] = *(_QWORD *)(DerivedStorage + 208);
    }
    if (*(_QWORD *)(DerivedStorage + 72))
    {
      v12 = *(const void **)(DerivedStorage + 128);
      if (v12)
      {
        CFRelease(v12);
        *(_QWORD *)(DerivedStorage + 128) = 0;
      }
      if (*(_BYTE *)(DerivedStorage + 136))
      {
        KeyRequestStateAndID = ProcessKeyResponse((uint64_t)a1, *(_QWORD *)(DerivedStorage + 72), a2, 2);
        if (!(_DWORD)KeyRequestStateAndID)
        {
          v13 = *(_QWORD *)(DerivedStorage + 72);
          if (v13)
          {
            JE2f6WCx(v13);
            *(_QWORD *)(DerivedStorage + 72) = 0;
          }
          *(_QWORD *)(DerivedStorage + 208) = 0;
          goto LABEL_27;
        }
      }
      else
      {
        v14 = *(const void **)(DerivedStorage + 88);
        *(_QWORD *)(DerivedStorage + 88) = a2;
        CFRetain(a2);
        if (v14)
          CFRelease(v14);
        *(_BYTE *)(DerivedStorage + 96) = 0;
        if (*(_BYTE *)(DerivedStorage + 120))
        {
          KeyRequestStateAndID = EnsureLowValueKeyAndIV((uint64_t)a1);
          if (!(_DWORD)KeyRequestStateAndID)
            goto LABEL_27;
        }
        else
        {
          KeyRequestStateAndID = EnsureDecryptContext(a1);
          if (!(_DWORD)KeyRequestStateAndID)
            goto LABEL_27;
        }
      }
    }
    else
    {
      KeyRequestStateAndID = FigSignalErrorAt();
    }
LABEL_47:
    v24 = KeyRequestStateAndID;
    goto LABEL_38;
  }
  v27 = 0;
  v8 = 0;
  v24 = 4294955146;
LABEL_39:
  PKDDispatchKeyResponseNotification((uint64_t)a1, v24, v27, v8);
  if (dword_1EE2A33A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v24;
}

uint64_t FigPKDCPECryptorGetMaximumRequiredOutputBufferSizeForSampleWithFormat()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorSetPropertyForFormat(const void *a1, const void *a2, uint64_t a3, void *a4)
{
  return FigPKDCPECryptorSetProperty(a1, a2, a4);
}

uint64_t FigPKDCPECryptorCopyPropertyForFormat(const void *a1, const void *a2, int a3, uint64_t a4, CFDataRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int CryptFormatForFormat;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  CFDataRef *v19;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = 4294955146;
  if (a2 && a5)
  {
    v12 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
    if (*(_BYTE *)(v12 + 16))
    {
      v11 = 4294954511;
LABEL_14:
      MEMORY[0x19402EF04](*(_QWORD *)(v12 + 24));
      return v11;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A0]))
    {
      EnsureDecryptContext(a1);
      v13 = *(_QWORD *)(v12 + 80);
      if (v13)
      {
        CryptFormatForFormat = GetCryptFormatForFormat(a3);
        v15 = FhS8L9pZ83yt(v13, CryptFormatForFormat);
        goto LABEL_11;
      }
      v21 = FigSignalErrorAt();
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3198]))
      {
        v16 = EnsureDecryptContext(a1);
        if ((_DWORD)v16)
        {
          v11 = v16;
          FigSignalErrorAt();
          goto LABEL_14;
        }
        v17 = *(_QWORD *)(v12 + 80);
        v18 = GetCryptFormatForFormat(a3);
        v15 = EKNEpfxz52bXl(v17, v18);
LABEL_11:
        v11 = 0;
        v19 = (CFDataRef *)MEMORY[0x1E0C9AE50];
        if (v15)
          v19 = (CFDataRef *)MEMORY[0x1E0C9AE40];
        *a5 = *v19;
        goto LABEL_14;
      }
      v21 = FigPKDCPECryptorCopyProperty(a1, a2, a4, a5);
    }
    v11 = v21;
    goto LABEL_14;
  }
  return v11;
}

uint64_t FigPKDCPECryptorTestAndSetKeyRequestState(uint64_t a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v18;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage;
  v21 = 0;
  v20 = 0;
  if (!a2 || !a3)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_26;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v10 + 16))
  {
    v16 = 4294954511;
  }
  else
  {
    v11 = *(_QWORD *)(v10 + 40);
    if (!v11)
    {
      if (*(_DWORD *)(v10 + 192) == a2)
      {
        *(_DWORD *)(v10 + 192) = a3;
        v21 = 1;
        v14 = a3;
        if (a3 < a2)
        {
          v15 = *(_QWORD *)(v10 + 72);
          v14 = a3;
          if (v15)
          {
            JE2f6WCx(v15);
            *(_QWORD *)(v10 + 72) = 0;
            v14 = *(_DWORD *)(v10 + 192);
          }
          *(_QWORD *)(v10 + 208) = 0;
        }
        if (v14 == 2)
          *(_QWORD *)(v10 + 208) = PKDGetNewRequestID();
        v13 = 1;
      }
      else
      {
        v13 = 0;
      }
      v20 = *(_QWORD *)(v10 + 208);
      goto LABEL_17;
    }
    v12 = PKDKeyManagerTestAndSetKeyRequestState(v11, *(void **)(v10 + 216), a2, a3, (char *)&v21, &v20);
    if (!(_DWORD)v12)
    {
      v13 = v21;
LABEL_17:
      v16 = 0;
      if (a3 == 2 && v13)
      {
        StopAndReleaseTimer((dispatch_object_t *)(v10 + 200));
        v16 = 0;
      }
      goto LABEL_20;
    }
    v16 = v12;
  }
LABEL_20:
  MEMORY[0x19402EF04](*(_QWORD *)(v10 + 24));
  if (a3 == 3 && !(_DWORD)v16 && v21)
  {
    if (dword_1EE2A33A8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    v16 = 0;
  }
LABEL_26:
  if (dword_1EE2A33A8)
  {
    v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4)
    *a4 = v21;
  if (a5)
    *a5 = v20;
  return v16;
}

uint64_t FigPKDCPECryptorCreatePackagedPersistentKey(uint64_t a1, const void *a2, CFDataRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t PackagedPersistentKeyForKeyID;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  *a3 = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v6 + 16))
  {
    v9 = 4294954511;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 40);
    if (v7)
      PackagedPersistentKeyForKeyID = PKDKeyManagerCreatePackagedPersistentKeyForKeyID(v7, *(void **)(v6 + 216), (uint64_t)a2, a3);
    else
      PackagedPersistentKeyForKeyID = CreatePackagedPersistentKeyGuts(*(_QWORD *)(v6 + 32), a2, a3);
    v9 = PackagedPersistentKeyForKeyID;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v6 + 24));
  return v9;
}

uint64_t FigPKDCPECryptorAbsorbKeyRequestContext(int a1, CFTypeRef cf)
{
  CFTypeID v2;
  uint64_t ClassID;
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  CFTypeRef v7;
  const void *v8;
  void *v9;
  const void *v10;
  CFTypeRef v11;
  const void *v12;
  void *v13;
  const void *v14;
  uint64_t v15;

  if (!cf)
    return 4294949726;
  v2 = CFGetTypeID(cf);
  if (v2 != FigCPECryptorGetTypeID())
    return 4294949726;
  ClassID = CMBaseObjectGetClassID();
  if (ClassID != CMBaseObjectGetClassID())
    return 4294949726;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(DerivedStorage + 16))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
    return 4294949723;
  }
  v6 = *(const void **)(DerivedStorage + 40);
  if (!v6 || *(_QWORD *)(DerivedStorage + 200))
  {
    v15 = FigSignalErrorAt();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
    v9 = 0;
    v7 = 0;
    if ((_DWORD)v15)
      return v15;
  }
  else
  {
    v7 = CFRetain(v6);
    v8 = *(const void **)(DerivedStorage + 216);
    if (v8)
      v9 = (void *)CFRetain(v8);
    else
      v9 = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v5 + 24));
  if (*(_BYTE *)(v5 + 16))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(v5 + 24));
    v13 = 0;
    v14 = 0;
    v15 = 4294949723;
  }
  else
  {
    v10 = *(const void **)(v5 + 40);
    if (!v10 || *(_QWORD *)(v5 + 200))
    {
      v15 = FigSignalErrorAt();
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 24));
      v13 = 0;
      if ((_DWORD)v15)
      {
        v14 = 0;
        goto LABEL_19;
      }
      v11 = 0;
    }
    else
    {
      v11 = CFRetain(v10);
      v12 = *(const void **)(v5 + 216);
      if (v12)
        v13 = (void *)CFRetain(v12);
      else
        v13 = 0;
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 24));
    }
    v14 = v13;
    v15 = PKDKeyManagerAbsorbKeyRequestContext((uint64_t)v7, (uint64_t)v11, v9, v13);
    v13 = (void *)v11;
  }
LABEL_19:
  if (v7)
    CFRelease(v7);
  if (v13)
    CFRelease(v13);
  if (v9)
    CFRelease(v9);
  if (v14)
    CFRelease(v14);
  return v15;
}

uint64_t FigPKDCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, _QWORD *a4, CFDataRef *a5)
{
  return FigPKDCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, 0, a3, a4, a5);
}

uint64_t FigPKDCPECryptorIsAggregateExternalProtectionStatusStable(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v4 + 16))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDetermined(*(_QWORD *)(v4 + 152));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 24));
  return v5;
}

uint64_t FigPKDCPECryptorReEncryptSampleWithFormatInPlace()
{
  return 4294954514;
}

uint64_t FigPKDCPECryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, char a3, CMBlockBufferRef *a4, _QWORD *a5, CFDataRef *a6)
{
  _QWORD *DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  const __CFAllocator *v14;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t DataPointer;
  size_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  UInt8 *v23;
  _QWORD *v24;
  CMBlockBufferRef *v25;
  CFDataRef *v26;
  const __CFDictionary *Extension;
  const __CFDictionary *v28;
  CFTypeID v29;
  const void *Value;
  uint64_t v31;
  CFTypeID v32;
  uint64_t v33;
  const void *v34;
  void *v35;
  int v36;
  uint64_t v37;
  CFDataRef v38;
  uint64_t v39;
  char v41;
  void *v42;
  char *v43;
  CMBlockBufferRef theBuffer;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  memset(v48, 0, sizeof(v48));
  dataPointerOut = 0;
  blockBufferOut = 0;
  theBuffer = 0;
  totalLengthOut = 0;
  v42 = 0;
  v43 = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  MEMORY[0x19402EEEC](DerivedStorage[3]);
  if (MediaSubType != 2053207651)
    goto LABEL_34;
  v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  DataPointer = CMBlockBufferCreateContiguous(v14, DataBuffer, v14, 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  DataPointer = CMBlockBufferCreateWithMemoryBlock(v14, 0, totalLengthOut, v14, 0, 0, totalLengthOut, 1u, &theBuffer);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v43);
  if ((_DWORD)DataPointer)
    goto LABEL_35;
  v17 = totalLengthOut;
  if (totalLengthOut < 5)
  {
LABEL_34:
    DataPointer = FigSignalErrorAt();
LABEL_35:
    v39 = DataPointer;
    v23 = 0;
    goto LABEL_36;
  }
  v18 = 0;
  v19 = (unsigned int *)dataPointerOut;
  while (1)
  {
    v20 = bswap32(*v19);
    if (v17 - 4 < v20)
      break;
    v21 = (v20 + 4);
    v19 = (unsigned int *)((char *)v19 + v21);
    v17 -= v21;
    --v18;
    if (v17 <= 4)
      goto LABEL_12;
  }
  if (!v18)
    goto LABEL_34;
LABEL_12:
  v22 = -v18;
  v23 = (UInt8 *)malloc_type_calloc(-v18, 0x18uLL, 0x1000040504FFAC1uLL);
  if ((const opaqueCMFormatDescription *)DerivedStorage[31] == FormatDescription)
    goto LABEL_25;
  v41 = a3;
  v24 = a5;
  v25 = a4;
  v26 = a6;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension
    || (v28 = Extension, v29 = CFGetTypeID(Extension), v29 != CFDictionaryGetTypeID())
    || (Value = CFDictionaryGetValue(v28, CFSTR("avcC"))) == 0
    || (v31 = (uint64_t)Value, v32 = CFGetTypeID(Value), v32 != CFDataGetTypeID()))
  {
LABEL_41:
    v33 = FigSignalErrorAt();
    goto LABEL_42;
  }
  v33 = CopyImageParamsFromAVCData(v31, &v42);
  if (!(_DWORD)v33)
  {
    v34 = (const void *)DerivedStorage[31];
    DerivedStorage[31] = FormatDescription;
    a6 = v26;
    if (FormatDescription)
      CFRetain(FormatDescription);
    a4 = v25;
    if (v34)
      CFRelease(v34);
    v35 = (void *)DerivedStorage[32];
    a5 = v24;
    if (v35)
    {
      DerivedStorage[32] = 0;
      free(v35);
    }
    a3 = v41;
    DerivedStorage[32] = v42;
    v42 = 0;
LABEL_25:
    *(_QWORD *)&v48[0] = DerivedStorage[10];
    if ((a3 & 1) != 0)
      v36 = 12;
    else
      v36 = 9;
    DWORD2(v48[0]) = v36;
    *(_QWORD *)((char *)v48 + 12) = 4;
    WORD2(v49) = 4;
    *((_QWORD *)&v49 + 1) = dataPointerOut;
    LODWORD(v50) = totalLengthOut;
    *((_QWORD *)&v50 + 1) = v43;
    LODWORD(v51) = totalLengthOut;
    BYTE4(v52) = 0;
    *(_QWORD *)((char *)&v54 + 4) = 0x9000000010;
    *((_QWORD *)&v52 + 1) = v23;
    LODWORD(v53) = v22;
    *((_QWORD *)&v53 + 1) = DerivedStorage[32];
    HIDWORD(v54) = 0;
    v33 = MDIwLzAxLzA5IDE((uint64_t)v48);
    if ((_DWORD)v33)
      goto LABEL_42;
    if ((_DWORD)v51 == (_DWORD)totalLengthOut && BYTE4(v52) == 1)
    {
      v37 = DWORD1(v53);
      if (DWORD1(v53))
      {
        if (v22 >= DWORD1(v53))
        {
          *a5 = *(_QWORD *)((char *)&v54 + 4);
          v38 = CFDataCreate(v14, v23, 24 * v37);
          v39 = 0;
          *a4 = theBuffer;
          theBuffer = 0;
          *a6 = v38;
          goto LABEL_36;
        }
      }
    }
    goto LABEL_41;
  }
LABEL_42:
  v39 = v33;
LABEL_36:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (theBuffer)
    CFRelease(theBuffer);
  free(v42);
  free(v23);
  MEMORY[0x19402EF04](DerivedStorage[3]);
  return v39;
}

uint64_t FigPKDCPECryptorGetAggregateExternalProtectionStatusIgnoringDisplays(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return 4294955146;
  v5 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v5 + 16))
  {
    v6 = 4294954511;
  }
  else
  {
    v6 = 0;
    *a3 = FigCPEExternalProtectionMonitorGetStatusIgnoringDisplays(*(_QWORD *)(v5 + 152));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v5 + 24));
  return v6;
}

uint64_t FigPKDCPECryptorIsAggregateExternalProtectionStatusStableIgnoringDisplays(uint64_t a1, _BYTE *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v4 + 16))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = FigCPEExternalProtectionMonitorStableStatusDeterminedIgnoringDisplays(*(_QWORD *)(v4 + 152));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 24));
  return v5;
}

uint64_t FigPKDCPECryptorCopySerializedCryptorRecipe(uint64_t a1, CFDataRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t *);
  uint64_t result;
  CFDataRef v8;
  uint64_t v9;
  UInt8 bytes[8];
  uint64_t Methods;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = 0;
  if (!DerivedStorage)
  {
    v8 = 0;
LABEL_7:
    result = 0;
    *a2 = v8;
    return result;
  }
  v5 = DerivedStorage;
  v6 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
  {
    result = v6(a1, &v9);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)bytes = v9;
    Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(v5 + 152));
    v12 = 2;
    v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
    if (!v8)
      return 4294955145;
    goto LABEL_7;
  }
  return 4294954514;
}

uint64_t FigPKDCPECryptorGetCryptorType(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (*(_BYTE *)(v4 + 16))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = 2;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 24));
  return v5;
}

uint64_t GetSliceDataForDecrypt(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t HLSfMP4ParsingInfoFromAVCCData;
  uint64_t v5;

  if (!a2 || !a3)
    goto LABEL_10;
  if (CMGetAttachment(a1, CFSTR("avcC"), 0))
  {
    HLSfMP4ParsingInfoFromAVCCData = FigH264Bridge_CreateHLSfMP4ParsingInfoFromAVCCData();
    if ((_DWORD)HLSfMP4ParsingInfoFromAVCCData)
    {
LABEL_11:
      v5 = HLSfMP4ParsingInfoFromAVCCData;
      goto LABEL_6;
    }
LABEL_10:
    HLSfMP4ParsingInfoFromAVCCData = FigSignalErrorAt();
    goto LABEL_11;
  }
  v5 = 4294955146;
LABEL_6:
  free(0);
  FigH264Bridge_HLSfMP4ParsingInfoDestroy();
  return v5;
}

uint64_t GetCryptFormatForFormat(int a1)
{
  int v1;

  if (a1 <= 1902928226)
  {
    if (a1 > 1902211170)
    {
      if (a1 <= 1902324530)
      {
        if (a1 != 1902211171)
        {
          if (a1 == 1902212707)
            return 7;
          return 0;
        }
        return 5;
      }
      if (a1 == 1902324531 || a1 == 1902469939)
        return 5;
      v1 = 1902537827;
    }
    else
    {
      if ((a1 - 1902207795) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0)
        return 5;
      if (a1 == 1700886115)
        return 2;
      v1 = 1902207331;
    }
LABEL_19:
    if (a1 != v1)
      return 0;
    return 5;
  }
  if (a1 > 2053202738)
  {
    if (a1 > 2053207650)
    {
      if (a1 == 2053464883 || a1 == 2053319475)
        return 8;
      if (a1 == 2053207651)
        return 4;
      return 0;
    }
    return (a1 - 2053202739) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0;
  }
  if (a1 <= 1903587384)
  {
    if (a1 == 1902928227)
      return 5;
    v1 = 1903522657;
    goto LABEL_19;
  }
  if (a1 == 1903587385)
    return 11;
  return a1 == 2053202275;
}

uint64_t GetAudioPacketDataForDecrypt(OpaqueCMBlockBuffer *a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int FrameSize;
  unint64_t v10;
  size_t v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *dataPointerOut;
  _DWORD totalLengthOut[3];
  _BYTE v18[580];

  *(_QWORD *)&v18[572] = *MEMORY[0x1E0C80C00];
  dataPointerOut = 0;
  *(_QWORD *)totalLengthOut = 0;
  result = CMBlockBufferGetDataPointer(a1, 0, 0, (size_t *)totalLengthOut, &dataPointerOut);
  if (!(_DWORD)result)
  {
    v6 = 0;
    LODWORD(v7) = 0;
    v8 = (unsigned int *)v18;
    do
    {
      FrameSize = DolbyGetFrameSize(&dataPointerOut[v7]);
      v10 = *(_QWORD *)totalLengthOut;
      if (*(_QWORD *)totalLengthOut - (unint64_t)v7 < FrameSize)
        return FigSignalErrorAt();
      *(v8 - 1) = v7;
      *v8 = FrameSize;
      v7 = FrameSize + v7;
      v11 = v6 + 1;
      if (v10 <= v7)
        break;
      v8 += 2;
    }
    while (v6++ < 0x47);
    if (!(_DWORD)v11)
      return FigSignalErrorAt();
    v13 = malloc_type_calloc(v11, 8uLL, 0x100004000313F17uLL);
    if (v13)
    {
      v14 = v13;
      v15 = 0;
      do
      {
        v13[v15] = *(_QWORD *)&totalLengthOut[2 * v15 + 2];
        ++v15;
      }
      while (v11 != v15);
      result = 0;
      *a2 = v11;
      *a3 = v14;
    }
    else
    {
      return 4294955145;
    }
  }
  return result;
}

void RenewalTimerCallback_0()
{
  const void *v0;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
    if (!*(_BYTE *)(DerivedStorage + 16))
    {
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 200));
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 24));
  }
  if (dword_1EE2A33A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0)
    CFRelease(v0);
}

uint64_t CopyImageParamsFromAVCData(uint64_t a1, _QWORD *a2)
{
  uint64_t SPSAndPPSCountFromAVCC;
  char *v4;
  void *v5;
  uint64_t v6;

  if (!a1)
  {
    SPSAndPPSCountFromAVCC = FigSignalErrorAt();
    goto LABEL_8;
  }
  SPSAndPPSCountFromAVCC = FigH264Bridge_GetSPSAndPPSCountFromAVCC();
  if ((_DWORD)SPSAndPPSCountFromAVCC)
  {
LABEL_8:
    v6 = SPSAndPPSCountFromAVCC;
    goto LABEL_5;
  }
  v4 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0xE3A0FE38uLL);
  v5 = v4;
  if (!v4)
  {
    v6 = 4294955145;
    goto LABEL_6;
  }
  *(_QWORD *)v4 = v4 + 48;
  *((_QWORD *)v4 + 3) = v4 + 48;
  *((_QWORD *)v4 + 1) = v4 + 48;
  *((_QWORD *)v4 + 4) = v4 + 48;
  *((_DWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 10) = 0;
  v6 = 0;
  *a2 = v4;
LABEL_5:
  v5 = 0;
LABEL_6:
  free(v5);
  return v6;
}

uint64_t RegisterFigPKDCPECryptorType()
{
  FigCPECryptorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDCPECryptorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigPKDCPECryptor]"));
}

uint64_t FigPKDCPELimitedCryptorInvalidate()
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A33A8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (!*(_BYTE *)DerivedStorage)
  {
    *(_BYTE *)DerivedStorage = 1;
    *(_QWORD *)(DerivedStorage + 16) = 0;
    v2 = *(const void **)(DerivedStorage + 72);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(DerivedStorage + 72) = 0;
    }
    v3 = *(const void **)(DerivedStorage + 48);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 40);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return 0;
}

uint64_t FigPKDCPELimitedCryptorFinalize()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDCPELimitedCryptorInvalidate();
  result = *(_QWORD *)(DerivedStorage + 8);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  return result;
}

uint64_t FigPKDCPELimitedCryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 4294955146;
  if (a2 && a4)
  {
    v9 = DerivedStorage;
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
    if (*(_BYTE *)v9)
    {
      v8 = 4294954511;
LABEL_18:
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
      return v8;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3208]))
    {
      v10 = *(CFTypeRef *)(v9 + 48);
      if (!v10)
        goto LABEL_17;
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3218]))
    {
      v10 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
      if (!*MEMORY[0x1E0C9AE50])
        goto LABEL_17;
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA31A8]))
    {
      v10 = *(CFTypeRef *)(v9 + 40);
      if (!v10)
      {
        v8 = 4294955137;
        goto LABEL_18;
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3228]))
    {
      v10 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    }
    else
    {
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA3230]))
      {
        v8 = 4294954512;
        goto LABEL_18;
      }
      v12 = EnsureUUIDForLimitedCryptor(a1);
      if ((_DWORD)v12)
      {
        v8 = v12;
        goto LABEL_18;
      }
      v10 = *(CFTypeRef *)(v9 + 72);
      if (!v10)
        goto LABEL_17;
    }
    v10 = CFRetain(v10);
LABEL_17:
    v8 = 0;
    *a4 = v10;
    goto LABEL_18;
  }
  return v8;
}

uint64_t FigPKDCPELimitedCryptorGetNativeSession(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v4)
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = *(_QWORD *)(v4 + 16);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 8));
  return v5;
}

uint64_t FigPKDCPELimitedCryptorGetExternalProtectionMethods(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v4 = DerivedStorage;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)v4)
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = *(_DWORD *)(v4 + 24);
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v4 + 8));
  return v5;
}

uint64_t FigPKDCPELimitedCryptorDecryptSampleWithFormat(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t DataPointer;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v18;
  int v19;
  char *v20;
  char *dataPointerOut;
  size_t length;
  size_t totalLengthOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  length = 0;
  totalLengthOut = 0;
  v20 = 0;
  dataPointerOut = 0;
  v8 = 4294955146;
  if (a2 && a3)
  {
    v9 = DerivedStorage;
    DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, &totalLengthOut, &dataPointerOut);
    if ((_DWORD)DataPointer)
      return DataPointer;
    DataPointer = CMBlockBufferGetDataPointer(a3, 0, 0, &length, &v20);
    if ((_DWORD)DataPointer)
      return DataPointer;
    if (totalLengthOut != length)
      return FigSignalErrorAt();
    if (!CMBlockBufferIsRangeContiguous(a2, 0, totalLengthOut) || !CMBlockBufferIsRangeContiguous(a3, 0, length))
      return 4294955140;
    MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
    v11 = EnsureDecryptContextGutsForLimitedCryptor();
    if ((_DWORD)v11 == -42670 || (v8 = v11, (_DWORD)v11 == -42786))
    {
      v12 = wnFx1xLULXLA();
      if ((_DWORD)v12)
        goto LABEL_22;
      v8 = EnsureDecryptContextGutsForLimitedCryptor();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
    if (!(_DWORD)v8)
    {
      if (a4 == 2053464883 || a4 == 2053319475)
      {
        v19 = 0;
        v18 = 0;
        DataPointer = GetAudioPacketDataForDecrypt(a2, &v19, &v18);
        if (!(_DWORD)DataPointer)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
          GetCryptFormatForFormat(a4);
          v15 = v18;
          XgJ8VCncrBfn9DzTTUYPfkG();
          v8 = v16;
          MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
          v14 = v15;
          goto LABEL_20;
        }
        return DataPointer;
      }
      if (a4 == 1902212707)
      {
        v19 = 0;
        v18 = 0;
        DataPointer = GetSliceDataForDecrypt(a2, (uint64_t)&v19, (uint64_t)&v18);
        if (!(_DWORD)DataPointer)
        {
          MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
          XgJ8VCncrBfn9DzTTUYPfkG();
          v8 = v13;
          MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
          v14 = v18;
LABEL_20:
          free(v14);
          return v8;
        }
        return DataPointer;
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v9 + 8));
      GetCryptFormatForFormat(a4);
      NfcRKVnxuKZy04KWbdFu71Ou();
LABEL_22:
      v8 = v12;
      MEMORY[0x19402EF04](*(_QWORD *)(v9 + 8));
    }
  }
  return v8;
}

uint64_t FigPKDCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryData(uint64_t a1, opaqueCMSampleBuffer *a2, CMBlockBufferRef *a3, _QWORD *a4, CFDataRef *a5)
{
  return FigPKDCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(a1, a2, (uint64_t)a3, a3, a4, a5);
}

uint64_t FigPKDCPELimitedCryptorCreateProcessedBlockBufferAndSubsampleAuxiliaryDataWithOptions(uint64_t a1, opaqueCMSampleBuffer *a2, uint64_t a3, CMBlockBufferRef *a4, _QWORD *a5, CFDataRef *a6)
{
  _QWORD *DerivedStorage;
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  const __CFAllocator *v13;
  OpaqueCMBlockBuffer *DataBuffer;
  uint64_t DataPointer;
  size_t v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  UInt8 *v22;
  const __CFDictionary *Extension;
  const __CFDictionary *v24;
  CFTypeID v25;
  const void *Value;
  uint64_t v27;
  CFTypeID v28;
  uint64_t v29;
  const void *v30;
  void *v31;
  uint64_t v32;
  CFDataRef v33;
  uint64_t v34;
  void *v36;
  char *v37;
  CMBlockBufferRef theBuffer;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  dataPointerOut = 0;
  blockBufferOut = 0;
  theBuffer = 0;
  totalLengthOut = 0;
  v36 = 0;
  v37 = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  MEMORY[0x19402EEEC](DerivedStorage[1]);
  if (MediaSubType != 2053207651)
    goto LABEL_31;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  DataPointer = CMBlockBufferCreateContiguous(v13, DataBuffer, v13, 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)DataPointer)
    goto LABEL_32;
  DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    goto LABEL_32;
  DataPointer = CMBlockBufferCreateWithMemoryBlock(v13, 0, totalLengthOut, v13, 0, 0, totalLengthOut, 1u, &theBuffer);
  if ((_DWORD)DataPointer)
    goto LABEL_32;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &v37);
  if ((_DWORD)DataPointer)
    goto LABEL_32;
  v16 = totalLengthOut;
  if (totalLengthOut < 5)
  {
LABEL_31:
    DataPointer = FigSignalErrorAt();
LABEL_32:
    v34 = DataPointer;
    v22 = 0;
    goto LABEL_33;
  }
  v17 = 0;
  v18 = (unsigned int *)dataPointerOut;
  while (1)
  {
    v19 = bswap32(*v18);
    if (v16 - 4 < v19)
      break;
    v20 = (v19 + 4);
    v18 = (unsigned int *)((char *)v18 + v20);
    v16 -= v20;
    --v17;
    if (v16 <= 4)
      goto LABEL_12;
  }
  if (!v17)
    goto LABEL_31;
LABEL_12:
  v21 = -v17;
  v22 = (UInt8 *)malloc_type_calloc(-v17, 0x18uLL, 0x1000040504FFAC1uLL);
  if ((const opaqueCMFormatDescription *)DerivedStorage[7] == FormatDescription)
  {
LABEL_25:
    *(_QWORD *)&v42 = DerivedStorage[2];
    *((_QWORD *)&v42 + 1) = 0x400000009;
    LODWORD(v43) = 0;
    WORD2(v44) = 4;
    *((_QWORD *)&v44 + 1) = dataPointerOut;
    LODWORD(v45) = totalLengthOut;
    *((_QWORD *)&v45 + 1) = v37;
    LODWORD(v46) = totalLengthOut;
    BYTE4(v47) = 0;
    *(_QWORD *)((char *)&v49 + 4) = 0x9000000010;
    *((_QWORD *)&v47 + 1) = v22;
    LODWORD(v48) = v21;
    *((_QWORD *)&v48 + 1) = DerivedStorage[8];
    HIDWORD(v49) = 0;
    v29 = MDIwLzAxLzA5IDE((uint64_t)&v42);
    if (!(_DWORD)v29)
    {
      if ((_DWORD)v46 == (_DWORD)totalLengthOut && BYTE4(v47) == 1)
      {
        v32 = DWORD1(v48);
        if (DWORD1(v48))
        {
          if (v21 >= DWORD1(v48))
          {
            *a5 = *(_QWORD *)((char *)&v49 + 4);
            v33 = CFDataCreate(v13, v22, 24 * v32);
            v34 = 0;
            *a4 = theBuffer;
            theBuffer = 0;
            *a6 = v33;
            goto LABEL_33;
          }
        }
      }
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(FormatDescription, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension
    || (v24 = Extension, v25 = CFGetTypeID(Extension), v25 != CFDictionaryGetTypeID())
    || (Value = CFDictionaryGetValue(v24, CFSTR("avcC"))) == 0
    || (v27 = (uint64_t)Value, v28 = CFGetTypeID(Value), v28 != CFDataGetTypeID()))
  {
LABEL_38:
    v29 = FigSignalErrorAt();
    goto LABEL_39;
  }
  v29 = CopyImageParamsFromAVCData(v27, &v36);
  if (!(_DWORD)v29)
  {
    v30 = (const void *)DerivedStorage[7];
    DerivedStorage[7] = FormatDescription;
    if (FormatDescription)
      CFRetain(FormatDescription);
    if (v30)
      CFRelease(v30);
    v31 = (void *)DerivedStorage[8];
    if (v31)
    {
      DerivedStorage[8] = 0;
      free(v31);
    }
    DerivedStorage[8] = v36;
    v36 = 0;
    goto LABEL_25;
  }
LABEL_39:
  v34 = v29;
LABEL_33:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (theBuffer)
    CFRelease(theBuffer);
  free(v36);
  free(v22);
  MEMORY[0x19402EF04](DerivedStorage[1]);
  return v34;
}

uint64_t FigPKDCPELimitedCryptorIsCompatibleWithSerializedCryptorRecipe(uint64_t a1, const __CFData *a2, BOOL *a3)
{
  uint64_t DerivedStorage;
  const UInt8 *BytePtr;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t *);
  uint64_t result;
  BOOL v13;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BytePtr = CFDataGetBytePtr(a2);
  if (CFDataGetLength(a2) != 24)
    return 4294949724;
  v8 = *(_QWORD *)BytePtr;
  v9 = *((_DWORD *)BytePtr + 2);
  v10 = *((unsigned int *)BytePtr + 4);
  v14 = 0;
  v11 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v11)
    return 4294954514;
  result = v11(a1, &v14);
  if (!(_DWORD)result)
  {
    v13 = v14 == v8 && *(_DWORD *)(DerivedStorage + 24) == v9 && v10 == 2;
    result = 0;
    *a3 = v13;
  }
  return result;
}

uint64_t EnsureDecryptContextGutsForLimitedCryptor()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 16);
  if (!v1)
    return FigSignalErrorAt();
  if (*(_BYTE *)(DerivedStorage + 80))
    return 0;
  v3 = 0;
  result = i2DzSgbBIIe95gyG0gW(v1, (uint64_t)&v3);
  if (!(_DWORD)result)
  {
    if (v3 == 0xEF72894CA7895B78 || v3 == 0x40791AC78BD5C571 || v3 == 0x285A0863BBA8E1D3)
    {
      result = 0;
      *(_BYTE *)(DerivedStorage + 80) = 1;
    }
    else
    {
      return 4294951071;
    }
  }
  return result;
}

uint64_t RegisterFigPKDCPELimitedCryptorType()
{
  FigCPEFairPlayCryptorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDCPELimitedCryptorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigPKDCPELimitedCryptor]"));
}

uint64_t FigRenderPipelineCreateForFanOutToArrayOfSampleBufferConsumers(const __CFAllocator *a1, const __CFArray *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  dispatch_queue_t v9;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v11;

  if (a3)
  {
    FigRenderPipelineGetClassID();
    v6 = CMDerivedObjectCreate();
    if (!(_DWORD)v6)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigSimpleMutexCreate();
      *(_QWORD *)(DerivedStorage + 32) = v8;
      if (v8
        && (v9 = dispatch_queue_create("com.apple.coremedia.frpfanout.providerSyncQ", 0),
            (*(_QWORD *)(DerivedStorage + 24) = v9) != 0))
      {
        CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
        v6 = CMBufferQueueCreate(a1, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)DerivedStorage);
        if (!(_DWORD)v6)
        {
          v6 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)a1, *(const void **)DerivedStorage, (CFTypeRef *)(DerivedStorage + 8));
          if (!(_DWORD)v6)
          {
            frpfanout_gracefullySetArrayOfSampleBufferConsumers(0, a2);
            CMBaseObjectGetDerivedStorage();
            CMNotificationCenterGetDefaultLocalCenter();
            v6 = FigNotificationCenterAddWeakListener();
            if (!(_DWORD)v6)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              v11 = FigNotificationCenterAddWeakListener();
              if (!(_DWORD)v11)
                *a3 = 0;
              return v11;
            }
          }
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v6;
  }
  return FigSignalErrorAt();
}

void frpfanout_gracefullySetArrayOfSampleBufferConsumers(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  uint64_t Count;
  const __CFArray *v6;
  uint64_t v7;
  CFIndex v8;
  __CFArray *Mutable;
  const __CFAllocator *v10;
  const void *ValueAtIndex;
  CFIndex i;
  const void *v13;
  void (*v14)(const void *, void (*)(), uint64_t, _QWORD);
  const void *v15;
  CFIndex v16;
  CFIndex v17;
  CFIndex j;
  const void *v19;
  void (*v20)(const void *, _QWORD);
  CFRange v21;
  CFRange v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    Count = CFArrayGetCount(a2);
  else
    Count = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  v6 = *(const __CFArray **)(DerivedStorage + 16);
  if (!v6)
  {
    if (!FigCFEqual())
    {
      v7 = 0;
      goto LABEL_18;
    }
LABEL_38:
    JUMPOUT(0x19402EF04);
  }
  v7 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 16));
  if (FigCFEqual())
    goto LABEL_38;
  if (v7 < 1)
  {
LABEL_18:
    Mutable = 0;
    goto LABEL_19;
  }
  v8 = 0;
  Mutable = 0;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v6, v8);
    if (!Count || (v21.location = 0, v21.length = Count, !CFArrayContainsValue(a2, v21, ValueAtIndex)))
    {
      if (!Mutable)
        Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
    ++v8;
  }
  while (v7 != v8);
LABEL_19:
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v13 = CFArrayGetValueAtIndex(a2, i);
      if (v7)
      {
        v22.location = 0;
        v22.length = v7;
        if (CFArrayContainsValue(v6, v22, v13))
          continue;
      }
      v14 = *(void (**)(const void *, void (*)(), uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 32);
      if (v14)
        v14(v13, frpfanout_dequeueProviderAndEnqueueConsumers, a1, 0);
    }
  }
  v15 = *(const void **)(DerivedStorage + 16);
  *(_QWORD *)(DerivedStorage + 16) = a2;
  if (a2)
    CFRetain(a2);
  if (v15)
    CFRelease(v15);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  if (Mutable)
  {
    v16 = CFArrayGetCount(Mutable);
    if (v16 >= 1)
    {
      v17 = v16;
      for (j = 0; j != v17; ++j)
      {
        v19 = CFArrayGetValueAtIndex(Mutable, j);
        v20 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (v20)
          v20(v19, 0);
      }
    }
    CFRelease(Mutable);
  }
}

uint64_t frpfanout_finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  NSObject *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  frpfanout_gracefullySetArrayOfSampleBufferConsumers(a1, 0);
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  if (!FigNotificationCenterRemoveWeakListener())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v4 = *(NSObject **)(DerivedStorage + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *frpfanout_copyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigRenderPipelineForFanOutToArrayOfSampleBufferConsumers %p: "), a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("SourceBufferQueue %@, SampleBufferConsumers %@"), *DerivedStorage, DerivedStorage[2]);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t frpfanout_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef *DerivedStorage;
  CFTypeRef v7;
  uint64_t result;

  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
    return 4294954446;
  if (*DerivedStorage)
    v7 = CFRetain(*DerivedStorage);
  else
    v7 = 0;
  result = 0;
  *a4 = v7;
  return result;
}

uint64_t frpfanout_setProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  CFTypeID v6;

  if (CFEqual(CFSTR("OutputArrayOfSampleBufferConsumers"), a2))
  {
    if (a3 && (v6 = CFGetTypeID(a3), v6 != CFArrayGetTypeID()))
    {
      return FigSignalErrorAt();
    }
    else
    {
      frpfanout_gracefullySetArrayOfSampleBufferConsumers(a1, a3);
      return 0;
    }
  }
  else if (CFEqual(CFSTR("Timebase"), a2))
  {
    return 0;
  }
  else
  {
    return 4294954446;
  }
}

void frpfanout_sourceQueueBecameReady()
{
  frpfanout_dequeueProviderAndEnqueueConsumers();
}

void frpfanout_resetOutput()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  frpfanout_resetOutputOfConsumers();
  JUMPOUT(0x19402EF04);
}

void frpfanout_dequeueProviderAndEnqueueConsumers()
{
  uint64_t DerivedStorage;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;
  unsigned int (*v7)(const void *);
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  opaqueCMSampleBuffer *v10;
  opaqueCMSampleBuffer *v11;
  const __CFArray *SampleAttachmentsArray;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  v1 = *(const __CFArray **)(DerivedStorage + 16);
  if (v1)
  {
    Count = CFArrayGetCount(v1);
    if (Count >= 1)
    {
      v3 = Count;
      v4 = 0;
      v5 = *MEMORY[0x1E0C9AE50];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), v4);
        while (1)
        {
          v7 = *(unsigned int (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
          if (v7)
          {
            if (v7(ValueAtIndex))
              break;
          }
          v8 = *(_QWORD *)(DerivedStorage + 8);
          v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (!v9)
            goto LABEL_15;
          v10 = (opaqueCMSampleBuffer *)v9(v8);
          if (!v10)
            goto LABEL_15;
          v11 = v10;
          SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray(v10, 0);
          if (SampleAttachmentsArray)
            CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
          if (FigCFDictionaryGetValue() != v5)
            FigCFArrayApplyFunction();
          CFRelease(v11);
        }
        ++v4;
      }
      while (v4 != v3);
    }
  }
LABEL_15:
  JUMPOUT(0x19402EF04);
}

uint64_t frpfanout_enqueueFrameApplierFunc(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v5)(uint64_t, uint64_t);

  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 8);
  if (v5)
    return v5(a1, a2);
  return result;
}

CFIndex frpfanout_resetOutputOfConsumers()
{
  uint64_t DerivedStorage;
  CFIndex result;
  CFIndex v2;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t (*v5)(const void *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(_QWORD *)(DerivedStorage + 16);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v2 = result;
      for (i = 0; i != v2; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 16), i);
        result = CMBaseObjectGetVTable();
        v5 = *(uint64_t (**)(const void *))(*(_QWORD *)(result + 16) + 72);
        if (v5)
          result = v5(ValueAtIndex);
      }
    }
  }
  return result;
}

uint64_t frpfanout_resetPipeline(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 32));
  v4 = CMBufferQueueReset(*(CMBufferQueueRef *)DerivedStorage);
  v5 = v4;
  if (a2 && !(_DWORD)v4)
    frpfanout_resetOutputOfConsumers();
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 32));
  return v5;
}

uint64_t FigVTTSerializerCreateForByteStream(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigVTTSerializerGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigBytePumpGetFigBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figVTTSerializerForByteStream_Invalidate(uint64_t a1)
{
  uint64_t CMBaseObject;
  uint64_t v2;
  void (*v3)(uint64_t);

  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    CMBaseObject = CMByteStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      v2 = CMBaseObject;
      v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v3)
        v3(v2);
    }
  }
  return 0;
}

void figVTTSerializerForByteStream_Finalize(uint64_t a1)
{
  CFTypeRef *DerivedStorage;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  figVTTSerializerForByteStream_Invalidate(a1);
  if (*DerivedStorage)
    CFRelease(*DerivedStorage);
}

CFStringRef figVTTSerializerForByteStream_CopyDebugDesc(uint64_t a1)
{
  _QWORD *DerivedStorage;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigVTTSerializerForByteStream: %@"), *DerivedStorage);
}

uint64_t figVTTSerializerForByteStream_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;

  if (!a1 || !a2 || !a4)
    return FigSignalErrorAt();
  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("IncludeDebugInfo")))
  {
    result = 0;
    v8 = (uint64_t *)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 8))
      v8 = (uint64_t *)MEMORY[0x1E0C9AE40];
    v9 = *v8;
  }
  else
  {
    v9 = 0;
    result = 4294954512;
  }
  *a4 = v9;
  return result;
}

uint64_t figVTTSerializerForByteStream_SetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  Boolean Value;
  uint64_t result;

  if (cf1 && a3)
  {
    if (!CFEqual(cf1, CFSTR("IncludeDebugInfo")))
      return 4294954512;
    FigBytePumpGetFigBaseObject(a1);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v6 = CFGetTypeID(a3);
    if (v6 == CFBooleanGetTypeID())
    {
      Value = CFBooleanGetValue((CFBooleanRef)a3);
      result = 0;
      *(_BYTE *)(DerivedStorage + 8) = Value;
      return result;
    }
  }
  return FigSignalErrorAt();
}

uint64_t figVTTSerializerForByteStream_AddText(uint64_t a1, const __CFString *a2)
{
  UInt8 *v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex usedBufLen;
  CFIndex maxBufLen[2];
  CFRange v9;
  CFRange v10;

  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  maxBufLen[0] = 0;
  maxBufLen[1] = 0;
  usedBufLen = 0;
  if (a2 && CFStringGetLength(a2) >= 1)
  {
    v9.length = CFStringGetLength(a2);
    v9.location = 0;
    if (CFStringGetBytes(a2, v9, 0x8000100u, 0, 0, 0, 0, maxBufLen))
    {
      v3 = (UInt8 *)malloc_type_malloc(maxBufLen[0], 0xFBF23D6BuLL);
      if (v3
        && (v10.length = CFStringGetLength(a2),
            v10.location = 0,
            CFStringGetBytes(a2, v10, 0x8000100u, 0, 0, v3, maxBufLen[0], &usedBufLen)))
      {
        v4 = CMByteStreamAppend();
      }
      else
      {
        v4 = FigSignalErrorAt();
      }
      v5 = v4;
    }
    else
    {
      v5 = FigSignalErrorAt();
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  free(v3);
  return v5;
}

uint64_t figVTTSerializerForByteStream_Flush(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t, uint64_t);

  FigBytePumpGetFigBaseObject(a1);
  v1 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v2 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v2 >= 2uLL)
  {
    v3 = (void (*)(uint64_t, uint64_t))v2[5];
    if (v3)
      v3(v1, 1);
  }
  return 0;
}

uint64_t FigPlayerInterstitialCoordinatorGetClassID()
{
  MEMORY[0x19402F294](&FigPlayerInterstitialCoordinatorGetClassID_sRegisterFigPlayerInterstitialCoordinatorTypeOnce, RegisterFigPlayerInterstitialCoordinatorType);
  return sFigPlayerInterstitialCoordinatorClassID;
}

uint64_t RegisterFigPlayerInterstitialCoordinatorType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPlayerInterstitialCoordinatorCreate(uint64_t a1, const void *a2, uint64_t a3, __int128 *a4, CFTypeRef *a5)
{
  int CFPreferenceNumberWithDefault;
  CFTypeRef *v10;
  const __CFAllocator *v11;
  uint64_t v12;
  _QWORD *DerivedStorage;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  const CFDictionaryKeyCallBacks *v23;
  const CFDictionaryValueCallBacks *v24;
  const CFArrayCallBacks *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  CMTime v32;
  CFTypeRef cf;

  cf = 0;
  CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (CFPreferenceNumberWithDefault)
  {
    CMTimeMake(&v32, CFPreferenceNumberWithDefault, 1000);
    *(CMTime *)gAudioTransitionScheduleAdvance = v32;
  }
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          if (!*(_QWORD *)a4)
          {
            v10 = a5;
            if (a5)
            {
              v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              MEMORY[0x19402F294](&FigPlayerInterstitialCoordinatorGetClassID_sRegisterFigPlayerInterstitialCoordinatorTypeOnce, RegisterFigPlayerInterstitialCoordinatorType);
              v12 = CMDerivedObjectCreate();
              if ((_DWORD)v12)
                goto LABEL_30;
              DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
              if (DerivedStorage)
              {
                v14 = DerivedStorage;
                *DerivedStorage = FigDispatchQueueCreateWithPriority();
                if (fpic_getTimerQueue_onceToken != -1)
                  dispatch_once(&fpic_getTimerQueue_onceToken, &__block_literal_global_89);
                v15 = fpic_getTimerQueue_sTimerQueue;
                if (fpic_getTimerQueue_sTimerQueue)
                  dispatch_retain((dispatch_object_t)fpic_getTimerQueue_sTimerQueue);
                v14[1] = v15;
                v14[2] = FigDispatchQueueCreateWithPriority();
                if (fpic_getNotificationQueue_onceToken != -1)
                  dispatch_once(&fpic_getNotificationQueue_onceToken, &__block_literal_global_106_1);
                v16 = fpic_getNotificationQueue_sNotificationQueue;
                if (fpic_getNotificationQueue_sNotificationQueue)
                  dispatch_retain((dispatch_object_t)fpic_getNotificationQueue_sNotificationQueue);
                v14[3] = v16;
                v17 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                v14[4] = v17;
                if (v17)
                {
                  v14[18] = FigSimpleMutexCreate();
                  v14[5] = CFRetain(a2);
                  v18 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                  v14[6] = v18;
                  if (v18)
                  {
                    v19 = *a4;
                    *(_OWORD *)(v14 + 9) = a4[1];
                    *(_OWORD *)(v14 + 7) = v19;
                    v20 = a4[2];
                    v21 = a4[3];
                    v22 = a4[4];
                    v14[17] = *((_QWORD *)a4 + 10);
                    *(_OWORD *)(v14 + 15) = v22;
                    *(_OWORD *)(v14 + 13) = v21;
                    *(_OWORD *)(v14 + 11) = v20;
                    v23 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
                    v24 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                    v14[22] = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                    v25 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
                    v14[23] = CFArrayCreateMutable(v11, 0, MEMORY[0x1E0C9B378]);
                    v14[75] = CFArrayCreateMutable(v11, 0, v25);
                    v14[76] = CFArrayCreateMutable(v11, 0, v25);
                    v14[78] = CFArrayCreateMutable(v11, 0, v25);
                    v14[77] = CFDictionaryCreateMutable(v11, 0, v23, v24);
                    v14[79] = CFSetCreateMutable(v11, 0, MEMORY[0x1E0C9B3B0]);
                    v14[80] = CFDictionaryCreateMutable(v11, 0, v23, v24);
                    *((_DWORD *)v14 + 180) = FPSupport_InitialSeekIDForSource(3);
                    v14[124] = CFSTR("Advance");
                    v26 = MEMORY[0x1E0CA2E18];
                    v27 = *MEMORY[0x1E0CA2E18];
                    *(_OWORD *)(v14 + 69) = *MEMORY[0x1E0CA2E18];
                    v28 = *(_QWORD *)(v26 + 16);
                    v14[71] = v28;
                    *(_OWORD *)(v14 + 109) = v27;
                    v14[111] = v28;
                    *(_QWORD *)((char *)v14 + 1020) = 0;
                    *(_OWORD *)(v14 + 125) = 0u;
                    if (v14[23])
                    {
                      if (v14[75] && v14[76] && v14[78] && v14[79] && v14[80])
                      {
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigNotificationCenterAddWeakListener();
                        v29 = 0;
                        *v10 = cf;
                        return v29;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v12 = FigSignalErrorAt();
LABEL_30:
  v29 = v12;
  if (cf)
    CFRelease(cf);
  return v29;
}

void fpic_NotifyServiceCurrentEvent(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t DerivedStorage;
  NSObject *v10;
  _QWORD block[9];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  CFRetain(a3);
  if (a4)
    CFRetain(a4);
  if (a5)
    CFRetain(a5);
  v10 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_NotifyServiceCurrentEvent_block_invoke;
  block[3] = &__block_descriptor_72_e5_v8__0l;
  block[4] = a2;
  block[5] = a3;
  block[6] = a4;
  block[7] = a5;
  block[8] = DerivedStorage;
  dispatch_async(v10, block);
}

void FigCFRelease_9(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigPlayerInterstitialRemoteCoordinatorCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t result;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a3 && a4 && a5 && !*a5 && a6)
  {
    MEMORY[0x19402F294](&FigPlayerInterstitialCoordinatorGetClassID_sRegisterFigPlayerInterstitialCoordinatorTypeOnce, RegisterFigPlayerInterstitialCoordinatorType);
    result = CMDerivedObjectCreate();
    if ((_DWORD)result)
      return result;
    CMBaseObjectGetDerivedStorage();
  }
  return FigSignalErrorAt();
}

uint64_t FigPlayerInterstitialCoordinatorIsRemote(uint64_t result)
{
  if (result)
  {
    MEMORY[0x19402F294](&FigPlayerInterstitialCoordinatorGetClassID_sRegisterFigPlayerInterstitialCoordinatorTypeOnce, RegisterFigPlayerInterstitialCoordinatorType);
    result = CMBaseObjectIsMemberOfClass();
    if ((_DWORD)result)
      return CMBaseObjectGetVTable() == (_QWORD)&kFigPlayerInterstitialRemoteCoordinatorVTable;
  }
  return result;
}

uint64_t FigPlayerInterstitialRemoteCoordinatorSetEvents(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[9];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v7 = *(NSObject **)(DerivedStorage + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigPlayerInterstitialRemoteCoordinatorSetEvents_block_invoke;
  block[3] = &unk_1E2F9A0C0;
  block[6] = a2;
  block[7] = a3;
  block[4] = &v10;
  block[5] = a1;
  block[8] = DerivedStorage;
  dispatch_sync(v7, block);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (!*((_BYTE *)v11 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  _Block_object_dispose(&v10, 8);
  return 0;
}

void sub_192F1D23C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t FigPlayerInterstitialRemoteCoordinatorSetCurrentEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  NSObject *v7;
  const void *v8;
  _BOOL8 v9;
  _QWORD v11[6];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return FigSignalErrorAt();
  v6 = (const void *)v5;
  v7 = *(NSObject **)(DerivedStorage + 16);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __FigPlayerInterstitialRemoteCoordinatorSetCurrentEvent_block_invoke;
  v11[3] = &__block_descriptor_48_e5_v8__0l;
  v11[4] = DerivedStorage;
  v11[5] = a2;
  dispatch_sync(v7, v11);
  v8 = (const void *)fpirc_CopyCurrentEvent(a1);
  v9 = v8 != 0;
  if (v8)
    CFRelease(v8);
  (*(void (**)(uint64_t, const void *, _BOOL8, double))(DerivedStorage + 120))(a1, v6, v9, NAN);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  CFRelease(v6);
  return 0;
}

uint64_t fpirc_CopyCurrentEvent(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = *(NSObject **)(DerivedStorage + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpirc_CopyCurrentEvent_block_invoke;
    block[3] = &unk_1E2F81FC0;
    block[4] = &v8;
    block[5] = a1;
    block[6] = v3;
    dispatch_sync(v4, block);
    CFRelease(v3);
  }
  v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_192F1D6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFStringRef figPlayerInterstitialCoordinator_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPlayerInterstitialCoordinator %p]"), a1);
}

void fpic_finalize(const void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const __CFArray *v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  const __CFArray *v24;

  v24 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  fpic_DisengageFromPrimaryItem(a1, (uint64_t)v3, (CFTypeRef *)&v24);
  v4 = v24;
  fpic_DequeueItemsFromInterstitialPlayer((uint64_t)a1, v24, (uint64_t)v3);
  v5 = CMBaseObjectGetDerivedStorage();
  StopAndReleaseTimer((dispatch_object_t *)(v5 + 648));
  *(_WORD *)(v5 + 704) = 0;
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 656));
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 664));
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (v3)
    CFRelease(v3);
  v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 40);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 48);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 640);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 640) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 616);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 616) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 632);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 632) = 0;
  }
  v12 = *(const void **)(DerivedStorage + 600);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 600) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 608);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 608) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 624);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 624) = 0;
  }
  v15 = *(const void **)(DerivedStorage + 176);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
  v16 = *(const void **)(DerivedStorage + 184);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(DerivedStorage + 184) = 0;
  }
  v17 = *(const void **)(DerivedStorage + 192);
  if (v17)
  {
    CFRelease(v17);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  v18 = *(const void **)(DerivedStorage + 984);
  if (v18)
  {
    CFRelease(v18);
    *(_QWORD *)(DerivedStorage + 984) = 0;
  }
  v19 = *(const void **)(DerivedStorage + 1072);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(DerivedStorage + 1072) = 0;
  }
  v20 = *(const void **)(DerivedStorage + 1032);
  if (v20)
  {
    CFRelease(v20);
    *(_QWORD *)(DerivedStorage + 1032) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v21 = *(NSObject **)(DerivedStorage + 8);
  if (v21)
  {
    dispatch_release(v21);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v22 = *(NSObject **)(DerivedStorage + 16);
  if (v22)
  {
    dispatch_release(v22);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v23 = *(NSObject **)(DerivedStorage + 24);
  if (v23)
  {
    dispatch_release(v23);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  FigSimpleMutexDestroy();
  if (v4)
    CFRelease(v4);
}

CFStringRef fpic_copyDebugDesc(uint64_t a1)
{
  void (*v2)(uint64_t, CFTypeRef *);
  CFStringRef v3;
  CFTypeRef cf;

  cf = 0;
  v2 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v2)
  {
    v2(a1, &cf);
    v2 = (void (*)(uint64_t, CFTypeRef *))cf;
  }
  v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPlayerInterstitialCoordinator %p, events %@]"), a1, v2);
  if (cf)
    CFRelease(cf);
  return v3;
}

uint64_t fpic_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject **DerivedStorage;
  const void *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[10];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = *DerivedStorage;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __fpic_SetProperty_block_invoke;
  v11[3] = &unk_1E2FB0708;
  v11[6] = a3;
  v11[7] = DerivedStorage;
  v11[4] = &v12;
  v11[5] = a2;
  v11[8] = a1;
  v11[9] = v7;
  dispatch_sync(v8, v11);
  if (v7)
    CFRelease(v7);
  v9 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v9;
}

void sub_192F1DB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fpic_DisengageFromPrimaryItem(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;
  uint64_t PrimaryPlayerAndCopyWrapper;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  __int128 v21;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 152))
  {
    v7 = DerivedStorage;
    if (dword_1EE2A33C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v9 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned __int8 *)(v9 + 352) | *(unsigned __int8 *)(v9 + 353))
    {
      cf[0] = 0;
      PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper((uint64_t)a1, cf);
      if (PrimaryPlayerAndCopyWrapper)
        fpic_TransitionPlayback((uint64_t)a1, PrimaryPlayerAndCopyWrapper, 1, a2);
      if (cf[0])
        CFRelease(cf[0]);
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_QWORD *)(v7 + 1048))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v11 = *(const void **)(v7 + 1048);
      if (v11)
      {
        CFRelease(v11);
        *(_QWORD *)(v7 + 1048) = 0;
      }
    }
    v12 = *(const void **)(v7 + 152);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(v7 + 152) = 0;
    }
    v13 = *(const void **)(v7 + 160);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(v7 + 160) = 0;
    }
    v14 = *(const void **)(v7 + 168);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v7 + 168) = 0;
    }
    v15 = *(const void **)(v7 + 1032);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(v7 + 1032) = 0;
    }
    v16 = *(const void **)(v7 + 984);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(v7 + 984) = 0;
    }
    *(_WORD *)(v7 + 974) = 0;
    v17 = MEMORY[0x1E0CA2E18];
    v21 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v7 + 896) = *MEMORY[0x1E0CA2E18];
    v18 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(v7 + 912) = v18;
    *(_OWORD *)(v7 + 872) = v21;
    *(_QWORD *)(v7 + 888) = v18;
    *(_OWORD *)(v7 + 552) = v21;
    *(_QWORD *)(v7 + 568) = v18;
    *(_OWORD *)(v7 + 360) = v21;
    *(_QWORD *)(v7 + 376) = v18;
    fpic_ForceCancelInitiatedSeek(a1);
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 728) = 0;
    *(_QWORD *)(v7 + 1020) = 0;
    *(_OWORD *)(v7 + 1000) = 0u;
    v19 = CMBaseObjectGetDerivedStorage();
    *(_WORD *)(v19 + 232) = 0;
    *(_WORD *)(v19 + 272) = 0;
    *(_OWORD *)(v19 + 408) = v21;
    *(_QWORD *)(v19 + 424) = v18;
    *(_OWORD *)(v19 + 456) = v21;
    *(_QWORD *)(v19 + 472) = v18;
    *(_BYTE *)(v19 + 976) = 0;
    *(_OWORD *)(v19 + 576) = v21;
    *(_QWORD *)(v19 + 592) = v18;
    *(_BYTE *)(v19 + 979) = 0;
    fpic_ResetCurrentEventList(a1, a2, a3);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(v7 + 184));
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v7 + 632));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v7 + 616));
    CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(v7 + 640));
    if (dword_1EE2A33C8)
    {
      v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
}

uint64_t fpic_DequeueItemsFromInterstitialPlayer(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  uint64_t (*v11)(uint64_t, uint64_t, const void *, _QWORD);
  const void *ValueAtIndex;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 0;
  v7 = DerivedStorage;
  Count = CFArrayGetCount(a2);
  if (Count < 1)
    return 0;
  v9 = Count;
  v10 = 0;
  while (1)
  {
    v11 = *(uint64_t (**)(uint64_t, uint64_t, const void *, _QWORD))(v7 + 120);
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v10);
    result = v11(a1, a3, ValueAtIndex, *(_QWORD *)(v7 + 40));
    if ((_DWORD)result)
      break;
    if (v9 == ++v10)
      return 0;
  }
  return result;
}

uint64_t fpic_GetPrimaryPlayerAndCopyWrapper(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  const void *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    goto LABEL_5;
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6
    || (v7 = (const void *)v6,
        v8 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 64))(a1, v6, v5),
        CFRelease(v7),
        !v8))
  {
    CFRelease(v5);
    v5 = 0;
LABEL_5:
    v8 = 0;
  }
  *a2 = v5;
  return v8;
}

__n128 fpic_TransitionPlayback(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __n128 result;
  uint64_t v12;
  uint64_t FigBaseObject;
  void (*v14)(uint64_t, const __CFString *, _QWORD);
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  _OWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(DerivedStorage + 64))(a1, a4, *(_QWORD *)(DerivedStorage + 40));
  if (dword_1EE2A33C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a3 && fpic_skipShowInterstitial(DerivedStorage))
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 136))(a1, a4, 1))
      return result;
    goto LABEL_15;
  }
  fpic_flipInterstitialAndPrimaryVisibility(a1, a3 == 0, a4, NAN);
  if ((*(unsigned int (**)(uint64_t, uint64_t, BOOL))(DerivedStorage + 136))(a1, a4, a3 == 0))
    return result;
  if (!a3)
  {
LABEL_15:
    v17 = MEMORY[0x1E0CA2E18];
    v24 = *(__n128 *)MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 924) = *MEMORY[0x1E0CA2E18];
    v18 = *(_QWORD *)(v17 + 16);
    *(_QWORD *)(DerivedStorage + 940) = v18;
    v19 = CMBaseObjectGetDerivedStorage();
    v20 = v19 + 240;
    if (!*(_BYTE *)(v19 + 272) && !*(_BYTE *)(v19 + 273))
      v20 = v19 + 200;
    v21 = *(_OWORD *)v20;
    v22 = *(_OWORD *)(v20 + 16);
    *(_QWORD *)(DerivedStorage + 352) = *(_QWORD *)(v20 + 32);
    *(_OWORD *)(DerivedStorage + 320) = v21;
    *(_OWORD *)(DerivedStorage + 336) = v22;
    fpic_GetEffectiveCurrentItemMoment(*(_QWORD *)(DerivedStorage + 152), (uint64_t)v25);
    v23 = v25[1];
    *(_OWORD *)(DerivedStorage + 280) = v25[0];
    *(_OWORD *)(DerivedStorage + 296) = v23;
    *(_QWORD *)(DerivedStorage + 312) = v26;
    result = v24;
    *(__n128 *)(DerivedStorage + 504) = v24;
    *(_QWORD *)(DerivedStorage + 520) = v18;
    *(__n128 *)(DerivedStorage + 528) = v24;
    *(_QWORD *)(DerivedStorage + 544) = v18;
    return result;
  }
  v12 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 948) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 964) = *(_QWORD *)(v12 + 16);
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 664));
  if (!v9)
    goto LABEL_12;
  FigBaseObject = FigPlayerGetFigBaseObject(v9);
  v14 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v14)
    v14(FigBaseObject, CFSTR("AllowVideoRenderingIfSendingVisualsToNero"), *MEMORY[0x1E0C9AE40]);
  v15 = FigPlayerGetFigBaseObject(a2);
  v16 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v16)
    v16(v15, CFSTR("AllowVideoRenderingIfSendingVisualsToNero"), *MEMORY[0x1E0C9AE50]);
  if (!fpic_SetRateWithReason(v9, 38, 0.0))
  {
LABEL_12:
    *(_WORD *)(DerivedStorage + 352) = 0;
    fpic_UngatePrimaryPlayback(a1);
    fpic_SetInterstitialActionAtEnd(a1, a4, (uint64_t)CFSTR("Advance"));
  }
  return result;
}

uint64_t fpic_ForceCancelInitiatedSeek(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  fpic_FinishInitiatedSeek(a1, 1);
  fpic_clearIntendedCurrentItemMoment();
  result = CMBaseObjectGetDerivedStorage();
  if (!(*(unsigned __int8 *)(result + 352) | *(unsigned __int8 *)(result + 353)))
    *(_BYTE *)(DerivedStorage + 920) = 0;
  return result;
}

void fpic_ResetCurrentEventList(const void *a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeID v6;
  __CFArray *Mutable;
  uint64_t FirstCurrentItem;

  if (*a3 && (v6 = CFGetTypeID(*a3), v6 == CFArrayGetTypeID()))
    Mutable = (__CFArray *)*a3;
  else
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    FirstCurrentItem = fpic_GetFirstCurrentItem((uint64_t)a1, a2);
    if (FirstCurrentItem)
      fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)a1, FirstCurrentItem);
    fpic_removeAllCurrentEvents(a1, Mutable, 0);
    *a3 = Mutable;
  }
  else
  {
    FigSignalErrorAt();
  }
}

BOOL fpic_skipShowInterstitial(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  uint64_t v4;
  __CFString *PerAssetPerEventTrackedObject;
  _BOOL8 result;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 600));
  if (Count < 1)
    return 1;
  v3 = Count;
  v4 = 1;
  while (fpic_GetPerEventTrackingCount(a1, v4 - 1) == 1)
  {
    PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(a1, v4 - 1, 0, CFSTR("PlaybackItem"));
    result = PerAssetPerEventTrackedObject == CFSTR("DummyItem");
    if (v4 < v3)
    {
      ++v4;
      if (PerAssetPerEventTrackedObject == CFSTR("DummyItem"))
        continue;
    }
    return result;
  }
  return 0;
}

uint64_t fpic_flipInterstitialAndPrimaryVisibility(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t DerivedStorage;
  uint64_t *v9;
  uint64_t UpTimeNanoseconds;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (uint64_t *)(DerivedStorage + 1056);
  if (*(_QWORD *)(DerivedStorage + 1056))
  {
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v11 = (_QWORD *)(DerivedStorage + 1056);
    if (UpTimeNanoseconds >= *v9)
    {
LABEL_5:
      *v11 = 0;
      goto LABEL_6;
    }
    if (*(unsigned __int8 *)(DerivedStorage + 1064) != (_DWORD)a2)
    {
      v12 = CMBaseObjectGetDerivedStorage();
      (*(void (**)(uint64_t, uint64_t, BOOL, double))(v12 + 128))(a1, a3, *(_BYTE *)(v12 + 1064) == 0, NAN);
      v11 = (_QWORD *)(v12 + 1056);
      goto LABEL_5;
    }
  }
LABEL_6:
  v13 = FigGetUpTimeNanoseconds();
  v14 = (uint64_t)(a4 * 1000000000.0);
  if (*v9 > v13 && *v9 - v13 < (unint64_t)(v14 + 1000000))
  {
    v15 = CMBaseObjectGetDerivedStorage();
    (*(void (**)(uint64_t, uint64_t, BOOL, double))(v15 + 128))(a1, a3, *(_BYTE *)(v15 + 1064) == 0, NAN);
    *(_QWORD *)(v15 + 1056) = 0;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(DerivedStorage + 128))(a1, a3, a2, a4);
  *(_BYTE *)(DerivedStorage + 1064) = a2;
  *(_QWORD *)(DerivedStorage + 1056) = v13 + v14;
  return result;
}

uint64_t fpic_SetRateWithReason(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t SetRateOptions;
  CFTypeRef v6;
  uint64_t (*v7)(uint64_t, CFTypeRef, float);
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  SetRateOptions = FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2, (CFMutableDictionaryRef *)&cf);
  if ((_DWORD)SetRateOptions)
    goto LABEL_4;
  v6 = cf;
  v7 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v7)
  {
    SetRateOptions = v7(a1, v6, a3);
LABEL_4:
    v8 = SetRateOptions;
    goto LABEL_6;
  }
  v8 = 4294954514;
LABEL_6:
  if (cf)
    CFRelease(cf);
  return v8;
}

void fpic_GetEffectiveCurrentItemMoment(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  __int128 v5;
  __int128 v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 800) || *(_BYTE *)(DerivedStorage + 801))
  {
    v5 = *(_OWORD *)(DerivedStorage + 768);
    v6 = *(_OWORD *)(DerivedStorage + 784);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(DerivedStorage + 800);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    fpic_CurrentItemMoment(a1, a2);
  }
}

void fpic_UngatePrimaryPlayback(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  CMTimeEpoch v4;
  uint64_t v5;
  void (*v6)(_QWORD, _QWORD);
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v9;
  uint64_t FigBaseObject;
  void (*v11)(_QWORD, _QWORD, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  __int128 v13;
  CMTime rhs;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime lhs;
  uint64_t v19;
  char v20;
  _DWORD v21[25];
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v13 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v16.value = *MEMORY[0x1E0CA2E18];
  v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v16.epoch = v4;
  v5 = *(_QWORD *)(DerivedStorage + 152);
  if (v5)
  {
    v6 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v6)
      v6(v5, &v16);
    CMTimeMake(&rhs, 5, 1000);
    *(_OWORD *)&lhs.value = kJumpForwardTolerance;
    lhs.epoch = 0;
    CMTimeAdd(&v15, &lhs, &rhs);
    v17 = v16;
    CMTimeAdd(&lhs, &v17, &v15);
    value = lhs.value;
    timescale = lhs.timescale;
    flags = lhs.flags;
    if ((lhs.flags & 0x1D) == 1)
    {
      epoch = lhs.epoch;
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 656));
      v9 = *(_QWORD *)(DerivedStorage + 152);
      lhs.value = value;
      lhs.timescale = timescale;
      lhs.flags = flags;
      lhs.epoch = epoch;
      v19 = 0;
      v20 = flags & 1;
      v21[0] = 0;
      *(_DWORD *)((char *)v21 + 3) = 0;
      fpic_CreateAndPrimeItemTimer(a1, v9, (uint64_t)&lhs, (void (__cdecl *)(void *))fpic_ServiceCurrentEventTimerProc, (NSObject **)(DerivedStorage + 656));
    }
    fpic_flipInterstitialAndPrimaryVisibility(a1, 0, (uint64_t)v3, NAN);
    FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 152));
    v11 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v11)
      v11(FigBaseObject, CFSTR("TimeToPausePlayback"), 0);
  }
  *(_OWORD *)(DerivedStorage + 896) = v13;
  *(_QWORD *)(DerivedStorage + 912) = v4;
  *(_BYTE *)(DerivedStorage + 920) = 0;
  if (dword_1EE2A33C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v3)
    CFRelease(v3);
}

uint64_t fpic_SetInterstitialActionAtEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(DerivedStorage + 64))(a1, a2, *(_QWORD *)(DerivedStorage + 40));
  if (result)
  {
    FigBaseObject = FigPlayerGetFigBaseObject(result);
    result = CMBaseObjectGetVTable();
    v9 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
    if (v9)
      return v9(FigBaseObject, CFSTR("ActionAtEnd"), a3);
  }
  return result;
}

CFIndex fpic_GetPerEventTrackingCount(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;
  const __CFArray *ValueAtIndex;

  if (idx < 0)
    return 0;
  Count = *(const __CFArray **)(a1 + 608);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 0;
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), idx);
  if (!ValueAtIndex)
    return 0;
  else
    return CFArrayGetCount(ValueAtIndex);
}

const void *fpic_GetPerAssetPerEventTrackedObject(uint64_t a1, CFIndex idx, CFIndex a3, const void *a4)
{
  const __CFArray *Count;
  const __CFArray *ValueAtIndex;
  const __CFArray *v10;
  const __CFDictionary *v11;

  Count = *(const __CFArray **)(a1 + 608);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 0;
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), idx);
  v10 = ValueAtIndex;
  if (ValueAtIndex)
    ValueAtIndex = (const __CFArray *)CFArrayGetCount(ValueAtIndex);
  if ((uint64_t)ValueAtIndex <= a3)
    return 0;
  v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(v10, a3);
  return CFDictionaryGetValue(v11, a4);
}

void fpic_CurrentItemMoment(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v4)
  {
    v4(FigBaseObject, CFSTR("currentDateAndTime"), *MEMORY[0x1E0C9AE00], &cf);
    v5 = cf;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  FigDateTimeMakeFromDictionary(v5, a2);
  if (cf)
    CFRelease(cf);
}

uint64_t fpic_CreateAndPrimeItemTimer(uint64_t a1, uint64_t a2, uint64_t a3, void (__cdecl *a4)(void *), NSObject **a5)
{
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, _QWORD, CMTimebaseRef *);
  uint64_t DerivedStorage;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  double v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v17;
  os_log_type_t type;
  int v20;
  _BYTE v21[40];
  CMTimebaseRef timebase;
  CMTime fireTime;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  timebase = 0;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
  v10 = *(void (**)(uint64_t, const __CFString *, _QWORD, CMTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v10)
  {
    v10(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &timebase);
    if (timebase)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v12 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 1uLL, *(dispatch_queue_t *)(DerivedStorage + 8));
      if (v12)
      {
        v13 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
        dispatch_set_context(v12, v13);
        dispatch_source_set_timer(v12, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
        dispatch_source_set_event_handler_f(v12, a4);
        dispatch_source_set_cancel_handler_f(v12, 0);
        dispatch_set_finalizer_f(v12, (dispatch_function_t)FigCFRelease_9);
        dispatch_resume(v12);
        v14 = CMTimebaseAddTimerDispatchSource(timebase, v12);
        if (!(_DWORD)v14)
        {
          if (!*(_BYTE *)(a3 + 32))
          {
            v15 = *(double *)(a3 + 24);
            fpic_CurrentItemMoment(a2, (uint64_t)v21);
            FigCreateTimeWithDateAndMoment((uint64_t)v21, (uint64_t)&fireTime, v15);
            *(CMTime *)a3 = fireTime;
          }
          fireTime = *(CMTime *)a3;
          v14 = CMTimebaseSetTimerDispatchSourceNextFireTime(timebase, v12, &fireTime, 1u);
          if (!(_DWORD)v14)
          {
            if (dword_1EE2A33C8)
            {
              v20 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v17 = 0;
            *a5 = v12;
            goto LABEL_13;
          }
        }
      }
      else
      {
        v14 = FigSignalErrorAt();
      }
      v17 = v14;
      goto LABEL_14;
    }
  }
  v17 = FigSignalErrorAt();
LABEL_13:
  v12 = 0;
LABEL_14:
  if (timebase)
    CFRelease(timebase);
  if (v12)
    CFRelease(v12);
  return v17;
}

void fpic_ServiceCurrentEventTimerProc()
{
  const void *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1EE2A33C8 >= 5)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0)
  {
    fpic_ServiceCurrentEvent(v0, MEMORY[0x1E0CA2E18]);
    CFRelease(v0);
  }
}

uint64_t fpic_ServiceCurrentEvent(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t PrimaryPlayerAndCopyWrapper;
  uint64_t v6;
  const void *v7;
  NSObject **v8;
  _BYTE *v9;
  NSObject *v10;
  const void *v11;
  int isInterstitialBufferingUngated;
  uint64_t v13;
  NSObject *v14;
  const __CFArray *v15;
  CFIndex Count;
  void (*v18)(uint64_t, const void *, const void *, _QWORD);
  const void *ValueAtIndex;
  const void *v20;
  NSObject **v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFAllocator *v26;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v28;
  CFMutableArrayRef v29;
  NSObject *v30;
  CFIndex v31;
  CFIndex v32;
  const void *v33;
  uint64_t v34;
  CFTypeRef *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, const void *, const void *, uint64_t, CFTypeRef *, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, _BYTE *);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void *v43;
  NSObject *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  int v48;
  uint64_t *v49;
  NSObject *v50;
  CFIndex i;
  const __CFArray *v52;
  const __CFArray *v53;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v55;
  unsigned int v56;
  const void *v57;
  const void *v58;
  const void *v59;
  NSObject **v60;
  NSObject *v61;
  NSObject **v62;
  NSObject *v63;
  const void *v64;
  NSObject **v65;
  NSObject *v66;
  NSObject **v67;
  NSObject *v68;
  uint64_t v70;
  __int128 v71;
  CFTypeRef cf;
  os_log_type_t type;
  unsigned int v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  void *v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE value[12];
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  const __CFArray *v124;
  _BYTE v125[24];
  void *v126;
  __int128 v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  const void *v134;
  __int128 block;
  void *v136;
  void *v137;
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
  v6 = FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (const void *)v6;
  if (!PrimaryPlayerAndCopyWrapper)
  {
    v23 = FigSignalErrorAt();
    if (!v7)
      goto LABEL_71;
LABEL_70:
    CFRelease(v7);
    goto LABEL_71;
  }
  if (!v6)
  {
    v23 = FigSignalErrorAt();
    goto LABEL_71;
  }
  *(_QWORD *)v125 = 0;
  *(_QWORD *)&v125[8] = v125;
  *(_QWORD *)&v125[16] = 0x2020000000;
  v126 = 0;
  v8 = (NSObject **)CMBaseObjectGetDerivedStorage();
  v75 = 0;
  v9 = *(_BYTE **)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v9)
  {
    ((void (*)(uint64_t, _QWORD, _BYTE **))v9)(PrimaryPlayerAndCopyWrapper, 0, &v75);
    v9 = v75;
  }
  v10 = *v8;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 3221225472;
  v136 = __fpic_EstablishCurrentPrimaryItem_block_invoke;
  v137 = &unk_1E2F9A0C0;
  v140 = (uint64_t)v8;
  v141 = a1;
  *(_QWORD *)&v142 = v7;
  v138 = v125;
  v139 = v9;
  dispatch_sync(v10, &block);
  fpic_DequeueItemsFromInterstitialPlayer(a1, *(const __CFArray **)(*(_QWORD *)&v125[8] + 24), (uint64_t)v7);
  v11 = *(const void **)(*(_QWORD *)&v125[8] + 24);
  if (v11)
    CFRelease(v11);
  _Block_object_dispose(v125, 8);
  if (!*(_QWORD *)(DerivedStorage + 152))
  {
    v23 = 0;
    goto LABEL_70;
  }
  isInterstitialBufferingUngated = fpic_isInterstitialBufferingUngated(a1);
  v142 = *a2;
  v143 = *((_QWORD *)a2 + 2);
  v13 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v125 = 0;
  *(_QWORD *)&v125[8] = v125;
  *(_QWORD *)&v125[16] = 0x2020000000;
  v126 = 0;
  v14 = *(NSObject **)v13;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 3221225472;
  v136 = __fpic_EstablishCurrentEventForCurrentItem_block_invoke;
  v137 = &unk_1E2FB0648;
  v140 = (uint64_t)v7;
  v141 = v13;
  v138 = v125;
  v139 = (_BYTE *)a1;
  dispatch_sync(v14, &block);
  v15 = *(const __CFArray **)(*(_QWORD *)&v125[8] + 24);
  if (v15)
  {
    Count = CFArrayGetCount(v15);
    while (Count-- >= 1)
    {
      v18 = *(void (**)(uint64_t, const void *, const void *, _QWORD))(v13 + 120);
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)&v125[8] + 24), Count);
      v18(a1, v7, ValueAtIndex, *(_QWORD *)(v13 + 40));
    }
    v20 = *(const void **)(*(_QWORD *)&v125[8] + 24);
    if (v20)
      CFRelease(v20);
  }
  _Block_object_dispose(v125, 8);
  if (!isInterstitialBufferingUngated)
    isInterstitialBufferingUngated = fpic_isInterstitialBufferingUngated(a1);
  v21 = (NSObject **)CMBaseObjectGetDerivedStorage();
  *(_QWORD *)v125 = 0;
  *(_QWORD *)&v125[8] = v125;
  *(_QWORD *)&v125[16] = 0x2020000000;
  LODWORD(v126) = 0;
  v22 = *v21;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 3221225472;
  v136 = __fpic_EnsureNextEventHasAssets_block_invoke;
  v137 = &unk_1E2FB0670;
  BYTE8(v142) = isInterstitialBufferingUngated;
  v140 = a1;
  v141 = (uint64_t)v7;
  *(_QWORD *)&v142 = PrimaryPlayerAndCopyWrapper;
  v138 = v125;
  v139 = v21;
  dispatch_sync(v22, &block);
  v23 = *(unsigned int *)(*(_QWORD *)&v125[8] + 24);
  _Block_object_dispose(v125, 8);
  if (!(_DWORD)v23)
  {
    v24 = CMBaseObjectGetDerivedStorage();
    v116 = 0;
    v117 = &v116;
    v118 = 0x2020000000;
    v119 = 0;
    v112 = 0;
    v113 = &v112;
    v114 = 0x2020000000;
    v115 = 0;
    v108 = 0;
    v109 = &v108;
    v110 = 0x2020000000;
    v111 = 0;
    v104 = 0;
    v105 = &v104;
    v106 = 0x2020000000;
    v107 = 0;
    v100 = 0;
    v101 = &v100;
    v102 = 0x2020000000;
    v103 = 0;
    v94 = 0;
    v95 = &v94;
    v96 = 0x3810000000;
    v71 = *MEMORY[0x1E0CA2E18];
    v98 = *MEMORY[0x1E0CA2E18];
    v25 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v97 = &unk_19339E166;
    v70 = v25;
    v99 = v25;
    v90 = 0;
    v91 = &v90;
    v92 = 0x2020000000;
    v93 = 0;
    v86 = 0;
    v87 = &v86;
    v88 = 0x2020000000;
    v89 = 0;
    MEMORY[0x19402EEEC](*(_QWORD *)(v24 + 144));
    if (isInterstitialBufferingUngated)
    {
      v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      v117[3] = (uint64_t)Mutable;
      v28 = CFArrayCreateMutable(v26, 0, MEMORY[0x1E0C9B378]);
      v113[3] = (uint64_t)v28;
      v29 = CFArrayCreateMutable(v26, 0, MEMORY[0x1E0C9B378]);
      v87[3] = (uint64_t)v29;
      if (v117[3] && v113[3] && v29)
      {
        v30 = *(NSObject **)v24;
        v75 = (_BYTE *)MEMORY[0x1E0C809B0];
        v76 = 3221225472;
        v77 = (uint64_t)__fpic_EnsureNextEventWillBuffer_block_invoke;
        v78 = &unk_1E2FB06B8;
        v83 = v24;
        v84 = a1;
        v85 = v7;
        v79 = &v94;
        v80 = &v90;
        v81 = &v116;
        v82 = &v100;
        dispatch_sync(v30, &v75);
        v31 = CFArrayGetCount((CFArrayRef)v117[3]);
        v105[3] = v31;
        if (v31 <= 0)
        {
LABEL_42:
          v50 = *(NSObject **)v24;
          *(_QWORD *)v125 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v125[8] = 3221225472;
          *(_QWORD *)&v125[16] = __fpic_EnsureNextEventWillBuffer_block_invoke_86;
          v126 = &unk_1E2FB06E0;
          *(_QWORD *)&v127 = &v104;
          *((_QWORD *)&v127 + 1) = &v116;
          v128 = &v112;
          v129 = &v90;
          v132 = a1;
          v133 = v24;
          v134 = v7;
          v130 = &v108;
          v131 = &v86;
          dispatch_sync(v50, v125);
          for (i = 0; ; ++i)
          {
            v52 = (const __CFArray *)v113[3];
            if (v52)
              v52 = (const __CFArray *)CFArrayGetCount(v52);
            if (i >= (uint64_t)v52)
              break;
            v53 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v113[3], i);
            if (dword_1EE2A33C8)
            {
              v74 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v55 = v74;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                v56 = v55;
              else
                v56 = v55 & 0xFFFFFFFE;
              if (v56)
              {
                *(_DWORD *)value = 136315650;
                *(_QWORD *)&value[4] = "fpic_EnsureNextEventWillBuffer";
                v121 = 2048;
                v122 = a1;
                v123 = 2112;
                v124 = v53;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            fpic_DequeueItemsFromInterstitialPlayer(a1, v53, (uint64_t)v7);
          }
          fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v87[3], (uint64_t)v7);
        }
        else
        {
          v32 = 0;
          while (1)
          {
            v33 = CFArrayGetValueAtIndex((CFArrayRef)v117[3], v32);
            v34 = (*(uint64_t (**)(uint64_t, const void *, const void *))(v24 + 80))(a1, v7, v33);
            v35 = FigPlayerInterstitialEventCopyIdentifier(v34);
            v36 = 0;
            *(_QWORD *)value = 0;
            if (!v32)
              v36 = v91[3];
            v37 = *(uint64_t (**)(uint64_t, const void *, const void *, uint64_t, CFTypeRef *, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, _BYTE *))(v24 + 112);
            v38 = *(_QWORD *)(v24 + 40);
            v39 = *(_QWORD *)(v24 + 160);
            v40 = *(_QWORD *)(v24 + 168);
            v41 = v101[3];
            block = *((_OWORD *)v95 + 2);
            v136 = (void *)v95[6];
            v42 = v37(a1, v7, v33, v38, v35, v39, v40, v41, &block, v36, value);
            *((_DWORD *)v109 + 6) = v42;
            if (v42)
              break;
            v43 = *(const void **)value;
            if (!*(_QWORD *)value)
            {
              *((_DWORD *)v109 + 6) = FigSignalErrorAt();
              break;
            }
            if (dword_1EE2A33C8)
            {
              v74 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v45 = v74;
              if (os_log_type_enabled(v44, type))
                v46 = v45;
              else
                v46 = v45 & 0xFFFFFFFE;
              if (v46)
              {
                v47 = (void *)v117[3];
                *(_DWORD *)v125 = 136315906;
                *(_QWORD *)&v125[4] = "fpic_EnsureNextEventWillBuffer";
                *(_WORD *)&v125[12] = 2048;
                *(_QWORD *)&v125[14] = a1;
                *(_WORD *)&v125[22] = 2048;
                v126 = v47;
                LOWORD(v127) = 2112;
                *(_QWORD *)((char *)&v127 + 2) = *(_QWORD *)value;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              v43 = *(const void **)value;
            }
            CFArrayAppendValue((CFMutableArrayRef)v113[3], v43);
            if (*(_QWORD *)value)
              v48 = CFArrayGetCount(*(CFArrayRef *)value);
            else
              v48 = 0;
            FigPlayerInterstitialEventSetItemSuccessCount(v34, v48);
            if (*(_QWORD *)value)
            {
              CFRelease(*(CFTypeRef *)value);
              *(_QWORD *)value = 0;
            }
            v101[3] = 0;
            v49 = v95;
            v95[6] = v70;
            *((_OWORD *)v49 + 2) = v71;
            if (v35)
              CFRelease(v35);
            if (++v32 >= v105[3])
              goto LABEL_42;
          }
        }
      }
      else
      {
        *((_DWORD *)v109 + 6) = FigSignalErrorAt();
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v24 + 144));
    v57 = (const void *)v117[3];
    if (v57)
      CFRelease(v57);
    v58 = (const void *)v113[3];
    if (v58)
      CFRelease(v58);
    v59 = (const void *)v87[3];
    if (v59)
      CFRelease(v59);
    v23 = *((unsigned int *)v109 + 6);
    _Block_object_dispose(&v86, 8);
    _Block_object_dispose(&v90, 8);
    _Block_object_dispose(&v94, 8);
    _Block_object_dispose(&v100, 8);
    _Block_object_dispose(&v104, 8);
    _Block_object_dispose(&v108, 8);
    _Block_object_dispose(&v112, 8);
    _Block_object_dispose(&v116, 8);
    if (!(_DWORD)v23)
    {
      v60 = (NSObject **)CMBaseObjectGetDerivedStorage();
      *(_QWORD *)v125 = 0;
      *(_QWORD *)&v125[8] = v125;
      *(_QWORD *)&v125[16] = 0x2020000000;
      LODWORD(v126) = 0;
      v61 = *v60;
      *(_QWORD *)&block = MEMORY[0x1E0C809B0];
      *((_QWORD *)&block + 1) = 3221225472;
      v136 = __fpic_EnsureNextEventWillPlay_block_invoke;
      v137 = &unk_1E2F9A0C0;
      v138 = v125;
      v139 = v60;
      v140 = a1;
      v141 = PrimaryPlayerAndCopyWrapper;
      *(_QWORD *)&v142 = v7;
      dispatch_sync(v61, &block);
      v23 = *(unsigned int *)(*(_QWORD *)&v125[8] + 24);
      _Block_object_dispose(v125, 8);
      if (!(_DWORD)v23)
      {
        v62 = (NSObject **)CMBaseObjectGetDerivedStorage();
        *(_QWORD *)v125 = 0;
        *(_QWORD *)&v125[8] = v125;
        *(_QWORD *)&v125[16] = 0x2020000000;
        LODWORD(v126) = 0;
        v75 = 0;
        v76 = (uint64_t)&v75;
        v77 = 0x2020000000;
        v78 = 0;
        v63 = *v62;
        *(_QWORD *)&block = MEMORY[0x1E0C809B0];
        *((_QWORD *)&block + 1) = 3221225472;
        v136 = __fpic_EnsureCurrentEventPlayoutLimitApplied_block_invoke;
        v137 = &unk_1E2FADA78;
        v140 = (uint64_t)v62;
        v141 = a1;
        *(_QWORD *)&v142 = v7;
        v138 = &v75;
        v139 = v125;
        dispatch_sync(v63, &block);
        fpic_DequeueItemsFromInterstitialPlayer(a1, *(const __CFArray **)(v76 + 24), (uint64_t)v7);
        v64 = *(const void **)(v76 + 24);
        if (v64)
          CFRelease(v64);
        v23 = *(unsigned int *)(*(_QWORD *)&v125[8] + 24);
        _Block_object_dispose(&v75, 8);
        _Block_object_dispose(v125, 8);
        if (!(_DWORD)v23)
        {
          v65 = (NSObject **)CMBaseObjectGetDerivedStorage();
          *(_QWORD *)v125 = 0;
          *(_QWORD *)&v125[8] = v125;
          *(_QWORD *)&v125[16] = 0x2020000000;
          LODWORD(v126) = 0;
          v66 = *v65;
          *(_QWORD *)&block = MEMORY[0x1E0C809B0];
          *((_QWORD *)&block + 1) = 3221225472;
          v136 = __fpic_EnsurePrimaryBufferingPosition_block_invoke;
          v137 = &unk_1E2F991F0;
          v140 = a1;
          v141 = (uint64_t)v7;
          v138 = v125;
          v139 = v65;
          dispatch_sync(v66, &block);
          v23 = *(unsigned int *)(*(_QWORD *)&v125[8] + 24);
          _Block_object_dispose(v125, 8);
          if (!(_DWORD)v23)
          {
            v23 = fpic_EnsurePrimaryWillResumeBuffering(a1, (uint64_t)v7);
            if (!(_DWORD)v23)
            {
              v67 = (NSObject **)CMBaseObjectGetDerivedStorage();
              *(_QWORD *)v125 = 0;
              *(_QWORD *)&v125[8] = v125;
              *(_QWORD *)&v125[16] = 0x2020000000;
              LODWORD(v126) = 0;
              v68 = *v67;
              *(_QWORD *)&block = MEMORY[0x1E0C809B0];
              *((_QWORD *)&block + 1) = 3221225472;
              v136 = __fpic_EnsurePrimaryWillResumePlaying_block_invoke;
              v137 = &unk_1E2F9A0C0;
              v138 = v125;
              v139 = (_BYTE *)a1;
              v140 = (uint64_t)v67;
              v141 = PrimaryPlayerAndCopyWrapper;
              *(_QWORD *)&v142 = v7;
              dispatch_sync(v68, &block);
              v23 = *(unsigned int *)(*(_QWORD *)&v125[8] + 24);
              _Block_object_dispose(v125, 8);
            }
          }
        }
      }
    }
  }
  if (v7)
    goto LABEL_70;
LABEL_71:
  if (cf)
    CFRelease(cf);
  return v23;
}

void sub_192F20030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_isInterstitialBufferingUngated(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  if (*(_QWORD *)(DerivedStorage + 152))
  {
    v3 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpic_isInterstitialBufferingUngated_block_invoke;
    block[3] = &unk_1E2F81FC0;
    block[5] = a1;
    block[6] = DerivedStorage;
    block[4] = &v7;
    dispatch_sync(v3, block);
    v4 = *((unsigned __int8 *)v8 + 24);
  }
  else
  {
    v4 = 0;
  }
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t fpic_EnsurePrimaryWillResumeBuffering(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  NSObject *v5;
  uint64_t v6;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v5 = *DerivedStorage;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __fpic_EnsurePrimaryWillResumeBuffering_block_invoke;
  v8[3] = &unk_1E2F991F0;
  v8[6] = a1;
  v8[7] = a2;
  v8[4] = &v9;
  v8[5] = DerivedStorage;
  dispatch_sync(v5, v8);
  v6 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v6;
}

uint64_t fpic_SwapToInterstitialPlayerLayerIfPrerollDetected(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184));
  if (result >= 1)
  {
    v6 = result;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 184), v7);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex);
      result = (uint64_t)FigPlayerInterstitialEventIsPreRoll(v9);
      if ((_DWORD)result)
        break;
      if (v6 == ++v7)
        return result;
    }
    result = fpic_flipInterstitialAndPrimaryVisibility(a1, 1, a2, NAN);
    if (dword_1EE2A33C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

double fpic_GetSeekableRange(uint64_t a1, int a2, CMTime *a3, CMTime *a4)
{
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFIndex Count;
  CFIndex v10;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  double result;
  CMTime v16;
  CMTime lhs;
  CMTime time1;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CFTypeRef v24[3];

  v24[0] = 0;
  v23 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v8)
  {
    v8(FigBaseObject, CFSTR("SeekableTimeIntervals"), *MEMORY[0x1E0C9AE00], v24);
    if (v24[0])
    {
      Count = CFArrayGetCount((CFArrayRef)v24[0]);
      if (Count >= 1)
      {
        v10 = Count;
        for (i = 0; i != v10; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v24[0], i);
          memset(&v21, 0, sizeof(v21));
          Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("startTime"));
          CMTimeMakeFromDictionary(&v21, Value);
          memset(&v20, 0, sizeof(v20));
          memset(&v19, 0, sizeof(v19));
          v14 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("endTime"));
          CMTimeMakeFromDictionary(&v19, v14);
          if (a2 && FigCFDictionaryGetCMTimeIfPresent())
          {
            lhs = v19;
            v16 = v20;
            CMTimeAdd(&time1, &lhs, &v16);
            v19 = time1;
          }
          time1 = v23;
          lhs = v21;
          if (CMTimeCompare(&time1, &lhs) >= 1)
            v23 = v21;
          time1 = v22;
          lhs = v19;
          if (CMTimeCompare(&time1, &lhs) < 0)
            v22 = v19;
        }
      }
      CFRelease(v24[0]);
    }
  }
  *a3 = v23;
  result = *(double *)&v22.value;
  *a4 = v22;
  return result;
}

void fpic_PostNotification(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  v8 = malloc_type_malloc(0x18uLL, 0xE004074F98F5AuLL);
  if (v8)
  {
    v9 = v8;
    *v8 = a2;
    if (a3)
      v10 = CFRetain(a3);
    else
      v10 = 0;
    v9[1] = v10;
    if (a4)
      v11 = CFRetain(a4);
    else
      v11 = 0;
    v9[2] = v11;
    if (dword_1EE2A33C8 >= 3)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 24), v9, (dispatch_function_t)fpic_PostNotificationFromDispatch);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fpic_UpdatePlaybackItemEventList(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const __CFArray *v5;
  uint64_t v6;
  CFIndex v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  uint64_t v10;
  const void *v11;
  CFIndex i;
  uint64_t (*v13)(uint64_t, const void *, const void *);
  const void *ValueAtIndex;
  uint64_t v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  uint64_t FigBaseObject;
  void (*v19)(uint64_t, const __CFString *, __CFArray *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = *(const __CFArray **)(DerivedStorage + 184);
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = v5 ? CFArrayGetCount(v5) : 0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v9 = Mutable;
      v10 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v10)
      {
        v11 = (const void *)v10;
        if (!fpic_ShouldIgnoreInterstitialsDueToExternalPlaybackStrategy(a1) && v7 >= 1)
        {
          for (i = 0; i != v7; ++i)
          {
            v13 = *(uint64_t (**)(uint64_t, const void *, const void *))(v6 + 80);
            ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
            v15 = v13(a1, v11, ValueAtIndex);
            v16 = FigPlayerInterstitialEventCopyAsDictionary(v15);
            if (!v16)
              break;
            v17 = v16;
            CFArrayAppendValue(v9, v16);
            CFRelease(v17);
          }
        }
        CFRelease(v11);
      }
      FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
      v19 = *(void (**)(uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
      if (v19)
        v19(FigBaseObject, CFSTR("interstitialEvents"), v9);
      CFRelease(v9);
    }
  }
}

void fpic_ReplaceNetworkURLsWithOfflineURLs(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t FigBaseObject;
  unsigned int (*v6)(uint64_t, const __CFString *);
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t v9;
  CFTypeRef *v10;
  const __CFArray *v11;
  CFIndex Count;
  __CFArray *MutableCopy;
  CFIndex i;
  const __CFURL *v15;
  uint64_t Value;
  const void *v17;
  CFTypeRef cf;
  CFTypeRef v20;

  v20 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = *(_QWORD *)(DerivedStorage + 152);
  if (v4)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v4);
    v6 = *(unsigned int (**)(uint64_t, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v6)
    {
      if (!v6(FigBaseObject, CFSTR("OfflineInterstitialURLs"))
        && CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184)) >= 1)
      {
        v7 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 184), v7);
          v9 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex);
          v10 = FigPlayerInterstitialEventCopyInterstitialAssetURLs(v9);
          if (!v10)
            break;
          v11 = (const __CFArray *)v10;
          Count = CFArrayGetCount((CFArrayRef)v10);
          MutableCopy = (__CFArray *)FigCFArrayCreateMutableCopy();
          if (Count >= 1)
          {
            for (i = 0; i != Count; ++i)
            {
              v15 = (const __CFURL *)CFArrayGetValueAtIndex(v11, i);
              if (!FigCFURLIsLocalResource())
              {
                CFURLGetString(v15);
                Value = FigCFDictionaryGetValue();
                if (Value)
                  v17 = (const void *)Value;
                else
                  v17 = v15;
                CFArraySetValueAtIndex(MutableCopy, i, v17);
              }
            }
          }
          FigPlayerInterstitialEventSetInterstitialAssetURLs(v9, MutableCopy);
          if (!FigCFEqual()
            && !(*(unsigned int (**)(const void *, uint64_t, uint64_t, _QWORD, CFTypeRef *))(DerivedStorage + 104))(a1, a2, v9, 0, &cf))
          {
            fpic_UpdateEventInAddOrder(a1, ValueAtIndex, cf);
          }
          CFRelease(v11);
          if (MutableCopy)
            CFRelease(MutableCopy);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          ++v7;
        }
        while (v7 < CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184)));
        if (cf)
          CFRelease(cf);
      }
    }
  }
  if (v20)
    CFRelease(v20);
}

void fpic_PostNotificationFromDispatch(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[2];
  if (v3)
    CFRelease(v3);
  free(a1);
}

BOOL fpic_ShouldIgnoreInterstitialsDueToExternalPlaybackStrategy(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t DerivedStorage;
  uint64_t PrimaryPlayerAndCopyWrapper;
  _BOOL8 v6;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, const void **);
  const void *v10;
  CFTypeRef cf;

  cf = 0;
  v2 = (const void *)*MEMORY[0x1E0C9AE40];
  v3 = (const void *)*MEMORY[0x1E0C9AE40];
  v10 = (const void *)*MEMORY[0x1E0C9AE40];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
  v6 = PrimaryPlayerAndCopyWrapper;
  if (PrimaryPlayerAndCopyWrapper)
  {
    if (*(_DWORD *)(DerivedStorage + 1084) == 1 && fpic_isAirplayVideoActive(PrimaryPlayerAndCopyWrapper))
    {
      FigBaseObject = FigPlayerGetFigBaseObject(v6);
      v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 48);
      if (v8)
      {
        v8(FigBaseObject, CFSTR("IsIntegratedTimelineSupportedByExternalPlayback"), *MEMORY[0x1E0C9AE00], &v10);
        v3 = v10;
      }
      v6 = v3 == v2;
    }
    else
    {
      v6 = 0;
    }
  }
  if (v3)
    CFRelease(v3);
  if (cf)
    CFRelease(cf);
  return v6;
}

BOOL fpic_isAirplayVideoActive(uint64_t a1)
{
  uint64_t v1;
  uint64_t FigBaseObject;
  void (*v3)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t v5;

  v1 = *MEMORY[0x1E0C9AE40];
  v5 = *MEMORY[0x1E0C9AE40];
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v3 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v3)
  {
    v3(FigBaseObject, CFSTR("IsAirPlayVideoActive"), *MEMORY[0x1E0C9AE00], &v5);
    v1 = v5;
  }
  return v1 == *MEMORY[0x1E0C9AE50];
}

void fpic_UpdateEventInAddOrder(const void *a1, CFTypeRef a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFIndex FirstIndexOfValue;
  CFIndex v8;
  CFIndex URLReq;
  CFIndex v10;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v13;
  const void *v14;
  const void *v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
  if (a2)
    a2 = CFRetain(a2);
  if (FirstIndexOfValue != -1)
  {
    fpic_ForgetPastEvent((uint64_t)a1, a2);
    CFArraySetValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 184), FirstIndexOfValue, a3);
    fpic_UpdatePlaybackItemEventList((uint64_t)a1, *(_QWORD *)(DerivedStorage + 152));
    CMBaseObjectGetDerivedStorage();
    v8 = FigCFArrayGetFirstIndexOfValue();
    if (v8 != -1)
    {
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 600), v8, a3);
      URLReq = fpic_FindURLReq((uint64_t)a1, CFSTR("FPICURLR_Event"), a2);
      if (URLReq != -1)
      {
        v10 = URLReq;
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), URLReq);
        Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("FPICURLR_Buffer"));
        v13 = CFDictionaryGetValue(ValueAtIndex, CFSTR("FPICURLR_HTTPRequest"));
        if (v13)
        {
          fpic_AddNewHttpReq((uint64_t)a1, a3, v13, Value);
        }
        else
        {
          v14 = CFDictionaryGetValue(ValueAtIndex, CFSTR("FPICURLR_CURLLoader"));
          if (v14)
          {
            v15 = v14;
            if (FigCFDictionaryGetInt64IfPresent())
              fpic_AddNewCustomURLReq((uint64_t)a1, a3, v15, 0, Value);
          }
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 624), v10);
      }
    }
    fpic_PostNotification(DerivedStorage, (uint64_t)CFSTR("fpiEventsDidChange"), a1, 0);
    if (*(CFTypeRef *)(DerivedStorage + 736) == a2)
      *(_QWORD *)(DerivedStorage + 736) = a3;
  }
  if (a2)
    CFRelease(a2);
}

void fpic_ForgetPastEvent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v5 = DerivedStorage;
    if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 632), a2))
    {
      v6 = fpic_UnwrapEvent(a1, (uint64_t)a2);
      v7 = FigPlayerInterstitialEventCopyIdentifier(v6);
      if (dword_1EE2A33C8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFSetRemoveValue(*(CFMutableSetRef *)(v5 + 632), a2);
      v9 = CMBaseObjectGetDerivedStorage();
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v9 + 616), a2);
      if (v7)
        CFRelease(v7);
    }
  }
}

uint64_t fpic_FindURLReq(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 624));
  while (Count-- >= 1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), Count);
    if (CFDictionaryGetValue(ValueAtIndex, a2) == a3)
      return Count;
  }
  return -1;
}

void fpic_AddNewHttpReq(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v9 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("FPICURLR_Event"), a2);
    CFDictionarySetValue(v9, CFSTR("FPICURLR_HTTPRequest"), a3);
    CFDictionarySetValue(v9, CFSTR("FPICURLR_Buffer"), a4);
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 624), v9);
    CFRelease(v9);
  }
}

void fpic_AddNewCustomURLReq(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  __CFDictionary *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v10 = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("FPICURLR_Event"), a2);
    CFDictionarySetValue(v10, CFSTR("FPICURLR_CURLLoader"), a3);
    FigCFDictionarySetInt64();
    CFDictionarySetValue(v10, CFSTR("FPICURLR_Buffer"), a5);
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 624), v10);
    CFRelease(v10);
  }
}

uint64_t fpic_UnwrapEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const void *v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCFWeakReferenceHolderCopyReferencedObject();
  if (result)
  {
    v6 = (const void *)result;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, result, a2);
    CFRelease(v6);
    return v7;
  }
  return result;
}

uint64_t __fpic_isInterstitialBufferingUngated_block_invoke(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t DerivedStorage;
  _BOOL4 v11;
  _BOOL4 v12;
  int32_t v13;
  int32_t v14;
  BOOL v15;
  int v16;
  CMTime v18;
  int v19;
  __int16 v20;
  CMTime v21;
  CMTime v22;
  CMTime rhs;
  CMTime v24;
  _BYTE time2[32];
  uint64_t v26;
  _BYTE time1[32];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  result = CMBaseObjectGetDerivedStorage();
  v3 = result + 240;
  if (!*(_BYTE *)(result + 272) && !*(_BYTE *)(result + 273))
    v3 = result + 200;
  v21 = *(CMTime *)v3;
  v4 = *(double *)(v3 + 24);
  v5 = *(unsigned __int8 *)(v3 + 32);
  v6 = *(unsigned __int8 *)(v3 + 33);
  v19 = *(_DWORD *)(v3 + 34);
  v20 = *(_WORD *)(v3 + 38);
  if (v5 | v6)
  {
    v7 = a1[6];
    if ((*(_BYTE *)(v7 + 588) & 1) != 0)
    {
      *(_OWORD *)time2 = *(_OWORD *)(v7 + 576);
      *(_QWORD *)&time2[16] = *(_QWORD *)(v7 + 592);
      *(_OWORD *)time1 = *(_OWORD *)v3;
      *(_QWORD *)&time1[16] = *(_QWORD *)(v3 + 16);
      *(double *)&time1[24] = v4;
      LOBYTE(v28) = v5;
      BYTE1(v28) = v6;
      *(_DWORD *)((char *)&v28 + 2) = *(_DWORD *)(v3 + 34);
      HIWORD(v28) = *(_WORD *)(v3 + 38);
      fpic_MakeMomentFromTime((uint64_t)time2, (uint64_t)time1, (uint64_t)&v31);
      *(_OWORD *)&v21.value = v31;
      v4 = *((double *)&v32 + 1);
      v21.epoch = v32;
      v5 = v33;
      v6 = BYTE1(v33);
      v19 = *(_DWORD *)((char *)&v33 + 2);
      v20 = HIWORD(v33);
      v7 = a1[6];
    }
    v8 = a1[5];
    v9 = *(_QWORD *)(v7 + 152);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(DerivedStorage + 974))
      v11 = *(_BYTE *)(DerivedStorage + 973) != 0;
    else
      v11 = 0;
    v18 = v21;
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    fpic_CurrentItemMoment(v9, (uint64_t)&v31);
    if (!(v5 | v6))
      goto LABEL_38;
    if (v11)
    {
      v30 = 0;
      v29 = kLiveInterstitialAdvanceInterval;
      if (v5)
        goto LABEL_16;
    }
    else
    {
      v29 = *MEMORY[0x1E0CA2E68];
      v30 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      if (v5)
        goto LABEL_16;
    }
    *(_OWORD *)time1 = v31;
    *(_OWORD *)&time1[16] = v32;
    v28 = v33;
    FigCreateTimeWithDateAndMoment((uint64_t)time1, (uint64_t)&v18, v4);
    LOBYTE(v5) = 1;
LABEL_16:
    *(CMTime *)time1 = v18;
    *(double *)&time1[24] = v4;
    LOBYTE(v28) = v5;
    BYTE1(v28) = v6;
    *(_DWORD *)((char *)&v28 + 2) = v19;
    HIWORD(v28) = v20;
    *(_OWORD *)time2 = v31;
    *(_OWORD *)&time2[16] = v32;
    v26 = v33;
    if (fpic_MomentsAreClose((uint64_t)time1, (uint64_t)time2))
    {
LABEL_17:
      result = 1;
      goto LABEL_25;
    }
    *(_OWORD *)time1 = v31;
    *(_OWORD *)&time1[16] = v32;
    v28 = v33;
    *(CMTime *)time2 = v18;
    *(double *)&time2[24] = v4;
    LOBYTE(v26) = v5;
    BYTE1(v26) = v6;
    *(_DWORD *)((char *)&v26 + 2) = v19;
    HIWORD(v26) = v20;
    v12 = fpic_MomentGreaterThan((uint64_t)time1, (uint64_t)time2);
    if (!v11 || v12)
    {
      if (v12)
        goto LABEL_17;
    }
    else
    {
      *(_OWORD *)time1 = v31;
      *(_QWORD *)&time1[16] = v32;
      *(CMTime *)time2 = v18;
      if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) <= 0)
      {
        *(CMTime *)time1 = v18;
        *(_OWORD *)time2 = kLiveInterstitialAdvanceInterval;
        *(_QWORD *)&time2[16] = 0;
        CMTimeSubtract(&v24, (CMTime *)time1, (CMTime *)time2);
        *(_OWORD *)time1 = v31;
        *(_QWORD *)&time1[16] = v32;
        if ((CMTimeCompare((CMTime *)time1, &v24) & 0x80000000) == 0)
          goto LABEL_17;
      }
    }
    *(CMTime *)time1 = v18;
    *(_OWORD *)time2 = v29;
    *(_QWORD *)&time2[16] = v30;
    result = fpic_BufferIncludesTime(v9, (CMTime *)time1, (CMTime *)time2);
LABEL_25:
    if (!(result | v11))
    {
      memset(time1, 0, 24);
      fpic_GetItemEndTime(v9, (uint64_t)time1);
      if ((time1[12] & 0x1D) == 1)
      {
        *(_OWORD *)time2 = *(_OWORD *)time1;
        *(_QWORD *)&time2[16] = *(_QWORD *)&time1[16];
        rhs = v18;
        v13 = CMTimeCompare((CMTime *)time2, &rhs);
        *(_OWORD *)time2 = *(_OWORD *)time1;
        *(_QWORD *)&time2[16] = *(_QWORD *)&time1[16];
        *(_OWORD *)&rhs.value = v31;
        rhs.epoch = v32;
        CMTimeSubtract(&v22, (CMTime *)time2, &rhs);
        *(_OWORD *)time2 = kPostRollTimeToPausePlaybackBuffer;
        *(_QWORD *)&time2[16] = 0;
        v14 = CMTimeCompare(&v22, (CMTime *)time2);
        if (!v13)
        {
          v16 = v14;
          result = fpic_IsItemBufferedToEnd(v8, v9) || v16 < 1;
          if ((_DWORD)result)
            goto LABEL_30;
          goto LABEL_38;
        }
      }
      result = 0;
    }
    if ((_DWORD)result)
    {
LABEL_30:
      v15 = 1;
LABEL_39:
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v15;
      return result;
    }
LABEL_38:
    result = CMBaseObjectGetDerivedStorage();
    v15 = *(_DWORD *)(result + 724) != 0;
    goto LABEL_39;
  }
  return result;
}

void fpic_MakeMomentFromTime(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5;
  double v6;
  CMTime v7;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = *(_BYTE *)(a1 + 12) & 1;
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a2 + 33))
    {
      v5 = *(double *)(a2 + 24);
      v7 = *(CMTime *)a1;
      v6 = v5 + CMTimeGetSeconds(&v7);
      v7 = *(CMTime *)a2;
      *(double *)(a3 + 24) = v6 - CMTimeGetSeconds(&v7);
      *(_BYTE *)(a3 + 33) = 1;
    }
  }
}

BOOL fpic_MomentsAreClose(uint64_t a1, uint64_t a2)
{
  Float64 v3;
  CMTime v4;
  CMTime time;

  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    time = *(CMTime *)a1;
    v4 = *(CMTime *)a2;
    return fpic_TimesAreClose(&time, &v4);
  }
  else if (*(_BYTE *)(a1 + 33) && *(_BYTE *)(a2 + 33))
  {
    v3 = vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24));
    *(_OWORD *)&time.value = kMomentsAreCloseThreshold;
    time.epoch = 0;
    return v3 <= CMTimeGetSeconds(&time);
  }
  else
  {
    return !*(_BYTE *)(a1 + 32)
        && !(*(unsigned __int8 *)(a2 + 32) | *(unsigned __int8 *)(a1 + 33))
        && !*(_BYTE *)(a2 + 33);
  }
}

BOOL fpic_MomentGreaterThan(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  CMTime v4;
  CMTime time1;

  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    time1 = *(CMTime *)a1;
    v4 = *(CMTime *)a2;
    v2 = CMTimeCompare(&time1, &v4) <= 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 33) || !*(_BYTE *)(a2 + 33))
      return 0;
    v2 = *(double *)(a1 + 24) <= *(double *)(a2 + 24) + 2.22044605e-16;
  }
  return !v2;
}

BOOL fpic_BufferIncludesTime(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  BOOL v10;
  int *v11;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFDictionary *v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v16;
  unsigned int v17;
  Float64 Seconds;
  Float64 v19;
  Float64 v20;
  _BOOL8 v21;
  NSObject *v22;
  CMTime *v25;
  CMTime rhs;
  CMTime v27;
  CMTime v28;
  CFArrayRef theArray;
  CMTime lhs;
  uint64_t v31;
  __int16 v32;
  Float64 v33;
  __int16 v34;
  Float64 v35;
  CMTime time;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  theArray = 0;
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v6
    && (v6(FigBaseObject, CFSTR("PlayableTimeIntervals"), *MEMORY[0x1E0C9AE00], &theArray), theArray)
    && (Count = CFArrayGetCount(theArray), Count >= 1))
  {
    v8 = Count;
    v9 = 0;
    v10 = 1;
    v11 = &dword_1EE2A3000;
    v25 = a3;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
      memset(&v28, 0, sizeof(v28));
      Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("startTime"));
      CMTimeMakeFromDictionary(&v28, Value);
      memset(&v27, 0, sizeof(v27));
      v14 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("endTime"));
      CMTimeMakeFromDictionary(&v27, v14);
      lhs = v27;
      rhs = *a3;
      CMTimeAdd(&time, &lhs, &rhs);
      v27 = time;
      if (v11[242] >= 7)
      {
        LODWORD(rhs.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v16 = rhs.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if (v17)
        {
          time = *a2;
          Seconds = CMTimeGetSeconds(&time);
          time = v28;
          v19 = CMTimeGetSeconds(&time);
          time = v27;
          v20 = CMTimeGetSeconds(&time);
          LODWORD(lhs.value) = 136316162;
          *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpic_BufferIncludesTime";
          LOWORD(lhs.flags) = 2048;
          *(Float64 *)((char *)&lhs.flags + 2) = Seconds;
          HIWORD(lhs.epoch) = 2048;
          v31 = a1;
          v32 = 2048;
          v33 = v19;
          v34 = 2048;
          v35 = v20;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a3 = v25;
        v11 = &dword_1EE2A3000;
      }
      time = v28;
      lhs = *a2;
      if (CMTimeCompare(&time, &lhs) <= 0)
      {
        time = v27;
        lhs = *a2;
        if ((CMTimeCompare(&time, &lhs) & 0x80000000) == 0)
          break;
      }
      v10 = ++v9 < v8;
    }
    while (v8 != v9);
    v21 = v10;
  }
  else
  {
    if (dword_1EE2A33C8 >= 7)
    {
      LODWORD(v28.value) = 0;
      LOBYTE(v27.value) = 0;
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v21 = 0;
  }
  if (theArray)
    CFRelease(theArray);
  return v21;
}

__n128 fpic_GetItemEndTime@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  void (*v8)(uint64_t, uint64_t);
  _OWORD *v9;
  CMTime v10;
  CMTime v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  FigCFCopyPropertyAsTime();
  if ((*(_DWORD *)(a2 + 12) & 0x1D) != 1 || (v6 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 864)) != 0 && v6 == a1)
  {
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v8)
      v8(a1, a2);
  }
  if (*(_QWORD *)(DerivedStorage + 152) == a1)
  {
    v9 = (_OWORD *)(DerivedStorage + 360);
    if ((*(_BYTE *)(DerivedStorage + 372) & 1) != 0)
    {
      v11 = *(CMTime *)a2;
      *(_OWORD *)&v10.value = *v9;
      v10.epoch = *(_QWORD *)(DerivedStorage + 376);
      if (!fpic_TimesAreClose(&v11, &v10))
      {
        result = *(__n128 *)v9;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(DerivedStorage + 376);
        *(__n128 *)a2 = result;
      }
    }
    else
    {
      result = *(__n128 *)a2;
      *(_QWORD *)(DerivedStorage + 376) = *(_QWORD *)(a2 + 16);
      *v9 = result;
    }
  }
  return result;
}

BOOL fpic_IsItemBufferedToEnd(uint64_t a1, uint64_t a2)
{
  CMTime v4;
  CMTime v5;

  memset(&v5, 0, sizeof(v5));
  fpic_GetItemEndTime(a2, (uint64_t)&v5);
  if ((v5.flags & 1) == 0 || (v5.flags & 0x1D) != 1)
    return 0;
  v4 = v5;
  return fpic_BufferIncludesTime(a2, &v4, (CMTime *)&kPostRollTimeToPausePlaybackBuffer);
}

BOOL fpic_TimesAreClose(CMTime *a1, CMTime *a2)
{
  CMTime v3;
  CMTime lhs;
  CMTime time;
  CMTime time1;

  lhs = *a1;
  v3 = *a2;
  CMTimeSubtract(&time, &lhs, &v3);
  CMTimeAbsoluteValue(&time1, &time);
  *(_OWORD *)&lhs.value = kMomentsAreCloseThreshold;
  lhs.epoch = 0;
  return CMTimeCompare(&time1, &lhs) < 1;
}

void fpic_EventDateTimeMoment(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeRef *started;
  __int128 v5;
  uint64_t v6;

  started = FigPlayerInterstitialEventCopyStartDate(a1);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 32) = 0;
  FigPlayerInterstitialEventGetStartTime(a1, (uint64_t)&v5);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = v5;
  *(_QWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = BYTE12(v5) & 1;
  if (started)
  {
    *(double *)(a2 + 24) = MEMORY[0x194029D14](started);
    *(_BYTE *)(a2 + 33) = 1;
    CFRelease(started);
  }
}

void fpic_PredictEventGroupDurationOnPrimary(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, CMTime *a6@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v19;
  BOOL v20;
  char v21;
  const void *v22;
  CMTime rhs;
  CMTime lhs;
  _BYTE v25[32];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v22 = a2;
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, a2);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  fpic_EventDateTimeMoment(v13, (uint64_t)&v33);
  v14 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a6->value = *MEMORY[0x1E0CA2E68];
  a6->epoch = *(_QWORD *)(v14 + 16);
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 184));
  if (Count >= 1)
  {
    v16 = Count;
    for (i = 0; i != v16; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 184), i);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, ValueAtIndex);
      v32 = 0;
      v30 = 0u;
      v31 = 0u;
      fpic_EventDateTimeMoment(v19, (uint64_t)&v30);
      v27 = v30;
      v28 = v31;
      v29 = v32;
      *(_OWORD *)v25 = v33;
      *(_OWORD *)&v25[16] = v34;
      v26 = v35;
      if (fpic_MomentsAreClose((uint64_t)&v27, (uint64_t)v25))
      {
        if (a4)
          v20 = FigPlayerInterstitialEventDidLastPlaybackFail(v19) != 0;
        else
          v20 = 0;
        v27 = 0uLL;
        *(_QWORD *)&v28 = 0;
        fpic_PredictEventDurationOnPrimary(a1, (uint64_t)ValueAtIndex, a3, (uint64_t)&v27);
        if (a5 && ValueAtIndex == v22)
        {
          *(_OWORD *)a5 = *(_OWORD *)&a6->value;
          *(_QWORD *)(a5 + 16) = a6->epoch;
        }
        v21 = (BYTE12(v27) & 1) == 0 || v20;
        if ((v21 & 1) == 0)
        {
          lhs = *a6;
          *(_OWORD *)&rhs.value = v27;
          rhs.epoch = v28;
          CMTimeAdd((CMTime *)v25, &lhs, &rhs);
          *(_OWORD *)&a6->value = *(_OWORD *)v25;
          a6->epoch = *(_QWORD *)&v25[16];
        }
      }
    }
  }
}

BOOL fpic_MomentCanBeCurrent(__int128 *a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = a2[1];
  v17 = *a2;
  v18 = v5;
  v19 = *((_QWORD *)a2 + 4);
  if ((*((_BYTE *)a3 + 12) & 1) != 0)
  {
    v6 = a2[1];
    v14 = *a2;
    v15 = v6;
    v16 = *((_QWORD *)a2 + 4);
    v11 = *a3;
    *(_QWORD *)&v12 = *((_QWORD *)a3 + 2);
    fpic_AddTimeToMoment((uint64_t)&v14, (CMTime *)&v11, (uint64_t)&v17);
  }
  v14 = v17;
  v15 = v18;
  v16 = v19;
  v7 = a1[1];
  v11 = *a1;
  v12 = v7;
  v13 = *((_QWORD *)a1 + 4);
  if (fpic_MomentGreaterThan((uint64_t)&v14, (uint64_t)&v11))
    return 1;
  v9 = a1[1];
  v14 = *a1;
  v15 = v9;
  v16 = *((_QWORD *)a1 + 4);
  v10 = a2[1];
  v11 = *a2;
  v12 = v10;
  v13 = *((_QWORD *)a2 + 4);
  return fpic_MomentsAreClose((uint64_t)&v14, (uint64_t)&v11);
}

double fpic_GetEarliestStartForPostroll@<D0>(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  CMTimeEpoch epoch;
  char flags;
  __int128 v13;
  CMTime v14;
  __int128 v15;
  CMTimeEpoch v16;
  int v17;
  __int16 v18;
  __int128 v19;
  __int128 v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = v3 + 240;
  if (!*(_BYTE *)(v3 + 272) && !*(_BYTE *)(v3 + 273))
    v4 = v3 + 200;
  v5 = *(_OWORD *)(v4 + 16);
  v19 = *(_OWORD *)v4;
  v20 = v5;
  v6 = *(unsigned __int8 *)(v4 + 32);
  v7 = *(unsigned __int8 *)(v4 + 33);
  v17 = *(_DWORD *)(v4 + 34);
  v18 = *(_WORD *)(v4 + 38);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  v8 = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(v8 + 974) && *(_BYTE *)(v8 + 973))
  {
    v9 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(v9 + 974) || !*(_BYTE *)(v9 + 973) || !*(_BYTE *)(DerivedStorage + 977))
    {
      CMTimeMake(&v14, -1352509440, 1);
      *(_DWORD *)(a1 + 36) = 0;
      *(_DWORD *)(a1 + 33) = 0;
      result = *(double *)&v14.value;
      *(_OWORD *)a1 = *(_OWORD *)&v14.value;
      epoch = v14.epoch;
      flags = v14.flags;
LABEL_13:
      *(_QWORD *)(a1 + 16) = epoch;
      *(_QWORD *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 32) = flags & 1;
      return result;
    }
  }
  else if (!*(_BYTE *)(DerivedStorage + 977) || !(v6 | v7))
  {
    fpic_GetItemEndTime(*(_QWORD *)(DerivedStorage + 152), (uint64_t)&v15);
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 33) = 0;
    result = *(double *)&v15;
    *(_OWORD *)a1 = v15;
    epoch = v16;
    flags = BYTE12(v15);
    goto LABEL_13;
  }
  result = *(double *)&v19;
  v13 = v20;
  *(_OWORD *)a1 = v19;
  *(_OWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 33) = v7;
  *(_DWORD *)(a1 + 34) = v17;
  *(_WORD *)(a1 + 38) = v18;
  return result;
}

void fpic_GatePrimaryBufferingAtCurrentEvent(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, CMTime *);
  CMTime *v10;
  const __CFAllocator *v11;
  CFDictionaryRef v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t FigBaseObject;
  unsigned int (*v21)(uint64_t, const __CFString *, uint64_t);
  uint64_t v22;
  unsigned int (*v23)(uint64_t, const __CFString *, CFDictionaryRef);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v25;
  CMTime v26;
  _BYTE time[32];
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = v4 + 240;
  if (!*(_BYTE *)(v4 + 272) && !*(_BYTE *)(v4 + 273))
    v5 = v4 + 200;
  memset(&v25, 0, sizeof(v25));
  if (*(_BYTE *)(v5 + 32))
    goto LABEL_5;
  if (!*(_BYTE *)(v5 + 33))
  {
    v5 = MEMORY[0x1E0CA2E18];
LABEL_5:
    v25 = *(CMTime *)v5;
    goto LABEL_8;
  }
  v6 = *(double *)(v5 + 24);
  v7 = *(_OWORD *)(DerivedStorage + 296);
  *(_OWORD *)time = *(_OWORD *)(DerivedStorage + 280);
  *(_OWORD *)&time[16] = v7;
  v28 = *(_QWORD *)(DerivedStorage + 312);
  FigCreateTimeWithDateAndMoment((uint64_t)time, (uint64_t)&v25, v6);
LABEL_8:
  if (*(_BYTE *)(DerivedStorage + 800) || *(_BYTE *)(DerivedStorage + 801))
  {
    v8 = *(_QWORD *)(DerivedStorage + 152);
    v9 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v9)
      v9(v8, &v25);
  }
  v10 = (CMTime *)(DerivedStorage + 872);
  *(_QWORD *)&time[16] = *(_QWORD *)(DerivedStorage + 888);
  *(_OWORD *)time = *(_OWORD *)(DerivedStorage + 872);
  v26 = v25;
  if (!fpic_TimesAreClose((CMTime *)time, &v26))
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(CMTime *)time = v25;
    v12 = CMTimeCopyAsDictionary((CMTime *)time, v11);
    if (a2)
    {
      v13 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724);
      v16 = *(_QWORD *)(DerivedStorage + 152);
      v15 = (_QWORD *)(DerivedStorage + 152);
      v14 = v16;
      if (!v13)
      {
        v17 = (uint64_t *)MEMORY[0x1E0C9AE50];
        goto LABEL_18;
      }
    }
    else
    {
      v18 = *(_QWORD *)(DerivedStorage + 152);
      v15 = (_QWORD *)(DerivedStorage + 152);
      v14 = v18;
    }
    v17 = (uint64_t *)MEMORY[0x1E0C9AE40];
LABEL_18:
    v19 = *v17;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v14);
    v21 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (v21)
    {
      if (!v21(FigBaseObject, CFSTR("SnapTimeToPausePlayback"), v19))
      {
        v22 = FigPlaybackItemGetFigBaseObject(*v15);
        v23 = *(unsigned int (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 56);
        if (v23)
        {
          if (!v23(v22, CFSTR("TimeToPauseBuffering"), v12))
          {
            if (dword_1EE2A33C8)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *v10 = v25;
          }
        }
      }
    }
    if (v12)
      CFRelease(v12);
  }
}

CFStringRef fpic_CreateMomentDesc(uint64_t a1)
{
  const void *v2;
  Float64 Seconds;
  const __CFAllocator *v4;
  CFDateRef v5;
  CFStringRef v6;
  CMTime time;

  v2 = CFRetain(&stru_1E2FD85F8);
  if (*(_BYTE *)(a1 + 32))
  {
    time = *(CMTime *)a1;
    Seconds = CMTimeGetSeconds(&time);
  }
  else
  {
    Seconds = NAN;
  }
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(a1 + 33))
  {
    v5 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFAbsoluteTime *)(a1 + 24));
    v2 = CFCopyDescription(v5);
    if (v5)
      CFRelease(v5);
  }
  v6 = CFStringCreateWithFormat(v4, 0, CFSTR("time: %f date: %@ (%f)"), *(_QWORD *)&Seconds, v2, *(_QWORD *)(a1 + 24));
  CFRelease(v2);
  return v6;
}

void fpic_EnsureEventHasResolvedProperties(const void *a1, uint64_t a2, const void *a3, int a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  CMTimeEpoch v10;
  CMTimeEpoch v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t FirstIndexOfValue;
  double v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  const __CFArray *v21;
  CMTime *v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v25;
  Float64 Seconds;
  Float64 v27;
  int v28;
  uint64_t v29;
  CFIndex v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  __int128 v35;
  unsigned __int8 SnapOptions;
  CFTypeRef *cf;
  __int128 v38;
  CMTime rhs;
  CMTime time1;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;
  CMTime lhs;
  CFTypeRef *v47;
  __int16 v48;
  Float64 v49;
  __int16 v50;
  Float64 v51;
  _BYTE time2[32];
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 88))(a1, a2, a3);
  if (!*(_BYTE *)(DerivedStorage + 975) || *(_QWORD *)(DerivedStorage + 152) != v9)
    return;
  *(_OWORD *)&v45.value = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v45.epoch = v10;
  v35 = *(_OWORD *)&v45.value;
  *(_OWORD *)&v44.value = *(_OWORD *)&v45.value;
  v44.epoch = v10;
  v38 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&v43.value = *MEMORY[0x1E0CA2E68];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v43.epoch = v11;
  v12 = CMBaseObjectGetDerivedStorage();
  v13 = fpic_UnwrapEvent((uint64_t)a1, (uint64_t)a3);
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
  cf = FigPlayerInterstitialEventCopyIdentifier(v13);
  memset(&v41, 0, sizeof(v41));
  fpic_PredictEventDurationOnPrimary((uint64_t)a1, (uint64_t)a3, a2, (uint64_t)&v41);
  SnapOptions = FigPlayerInterstitialEventGetSnapOptions(v13);
  if (FigPlayerInterstitialEventIsPostRoll(v13))
  {
    fpic_GetEarliestStartForPostroll((uint64_t)time2);
  }
  else
  {
    if (FirstIndexOfValue != -1)
    {
      v17 = CMBaseObjectGetDerivedStorage();
      v18 = v17 + 240;
      if (!*(_BYTE *)(v17 + 272) && !*(_BYTE *)(v17 + 273))
        v18 = v17 + 200;
      v42 = *(CMTime *)v18;
      v15 = *(double *)(v18 + 24);
      v19 = *(unsigned __int8 *)(v18 + 32);
      v16 = *(unsigned __int8 *)(v18 + 33);
      if (v19)
        goto LABEL_6;
LABEL_12:
      if (v16)
      {
        v20 = *(_OWORD *)(v12 + 296);
        *(_OWORD *)time2 = *(_OWORD *)(v12 + 280);
        *(_OWORD *)&time2[16] = v20;
        v53 = *(_QWORD *)(v12 + 312);
        FigCreateTimeWithDateAndMoment((uint64_t)time2, (uint64_t)&time1, v15);
      }
      else
      {
        *(_OWORD *)&time1.value = v35;
        time1.epoch = v10;
      }
      goto LABEL_16;
    }
    fpic_EventDateTimeMoment(v13, (uint64_t)time2);
  }
  v42 = *(CMTime *)time2;
  v15 = *(double *)&time2[24];
  v16 = BYTE1(v53);
  if (!(_BYTE)v53)
    goto LABEL_12;
LABEL_6:
  time1 = v42;
LABEL_16:
  *(_OWORD *)time2 = v38;
  *(_QWORD *)&time2[16] = v11;
  CMTimeMaximum(&v45, &time1, (CMTime *)time2);
  fpic_PredictEventGroupDurationOnPrimary((uint64_t)a1, a3, a2, 0, (uint64_t)&v43, (CMTime *)time2);
  *(CMTime *)time2 = v43;
  *(_OWORD *)&lhs.value = v38;
  lhs.epoch = v11;
  if (CMTimeCompare((CMTime *)time2, &lhs) >= 1)
  {
    lhs = v45;
    rhs = v43;
    CMTimeAdd((CMTime *)time2, &lhs, &rhs);
    v45 = *(CMTime *)time2;
  }
  v44 = v45;
  *(CMTime *)time2 = v41;
  *(_OWORD *)&lhs.value = v38;
  lhs.epoch = v11;
  if (CMTimeCompare((CMTime *)time2, &lhs) >= 1)
  {
    *(CMTime *)time2 = v44;
    lhs = v41;
    CMTimeAdd(&v44, (CMTime *)time2, &lhs);
  }
  if (fpic_GetCurrentlyPlayingEvent())
  {
    if ((*(_BYTE *)(v12 + 516) & 1) != 0 && FirstIndexOfValue != -1)
    {
      v21 = *(const __CFArray **)(v12 + 600);
      if (v21)
      {
        if (FirstIndexOfValue == CFArrayGetCount(v21) - 1 && (SnapOptions & 2) != 0)
        {
          v22 = (CMTime *)(v12 + 504);
          if (dword_1EE2A33C8)
          {
            LODWORD(rhs.value) = 0;
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            value = rhs.value;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
              v25 = value;
            else
              v25 = value & 0xFFFFFFFE;
            if (v25)
            {
              *(CMTime *)time2 = v44;
              Seconds = CMTimeGetSeconds((CMTime *)time2);
              *(_OWORD *)time2 = *(_OWORD *)&v22->value;
              *(_QWORD *)&time2[16] = v22->epoch;
              v27 = CMTimeGetSeconds((CMTime *)time2);
              LODWORD(lhs.value) = 136316162;
              *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpic_UpdateResolvedEventTimeIfNecessary";
              LOWORD(lhs.flags) = 2048;
              *(_QWORD *)((char *)&lhs.flags + 2) = a1;
              HIWORD(lhs.epoch) = 2112;
              v47 = cf;
              v48 = 2048;
              v49 = Seconds;
              v50 = 2048;
              v51 = v27;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v44 = *v22;
        }
      }
    }
  }
  FigPlayerInterstitialEventGetResolvedStartTime(v13, (uint64_t)time2);
  lhs = v45;
  if (fpic_TimesAreClose(&lhs, (CMTime *)time2)
    && (FigPlayerInterstitialEventGetResolvedEndTime(v13, (uint64_t)&lhs), rhs = v44, fpic_TimesAreClose(&rhs, &lhs)))
  {
    v28 = 0;
  }
  else
  {
    rhs = v45;
    FigPlayerInterstitialEventSetResolvedStartTime(v13, (uint64_t)&rhs);
    rhs = v44;
    FigPlayerInterstitialEventSetResolvedEndTime(v13, (uint64_t)&rhs);
    v28 = 1;
  }
  if (cf)
    CFRelease(cf);
  v29 = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  v30 = FigCFArrayGetFirstIndexOfValue();
  v31 = (*(uint64_t (**)(const void *, uint64_t, const void *))(v29 + 80))(a1, a2, a3);
  v32 = v31;
  if (v30 == -1)
  {
    FigPlayerInterstitialEventGetResolvedDuration(v31, (uint64_t)time2);
    if ((time2[12] & 1) != 0)
      goto LABEL_45;
  }
  memset(&lhs, 0, sizeof(lhs));
  fpic_GetProjectedDuration((uint64_t)a1, (uint64_t)a3, v30, a2, &lhs);
  if (!v30)
  {
    v45 = lhs;
    v44 = *(CMTime *)(v29 + 456);
    CMTimeAdd(&lhs, &v45, &v44);
  }
  FigPlayerInterstitialEventGetResolvedDuration(v32, (uint64_t)&v45);
  v44 = lhs;
  if (fpic_TimesAreClose(&v44, &v45))
  {
LABEL_45:
    v33 = 0;
  }
  else
  {
    v44 = lhs;
    FigPlayerInterstitialEventSetResolvedDuration(v32, (uint64_t)&v44);
    v33 = 1;
  }
  if (v33)
    v34 = 1;
  else
    v34 = v28;
  if (a4)
  {
    if (v34)
      fpic_PostNotification(DerivedStorage, (uint64_t)CFSTR("fpiResolvePropertiesChange"), a1, 0);
  }
}

__n128 fpic_PredictEventDurationOnPrimary@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  CMTimeEpoch epoch;
  CMTimeEpoch v13;
  __n128 v14;
  CMTime time2;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, a3, a2);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  FigPlayerInterstitialEventGetResumptionOffset(v9, a4);
  if (FigPlayerInterstitialEventIsPreRoll(v9) || FigPlayerInterstitialEventIsPostRoll(v9))
  {
    v10 = MEMORY[0x1E0CA2E68];
    result = *(__n128 *)MEMORY[0x1E0CA2E68];
    *(_OWORD *)a4 = *MEMORY[0x1E0CA2E68];
    epoch = *(_QWORD *)(v10 + 16);
LABEL_4:
    *(_QWORD *)(a4 + 16) = epoch;
    return result;
  }
  if ((*(_BYTE *)(a4 + 12) & 1) == 0)
  {
    fpic_GetEventDuration(a1, a2, a3, &time1);
    result.n128_u64[0] = time1.value;
    *(_OWORD *)a4 = *(_OWORD *)&time1.value;
    epoch = time1.epoch;
    goto LABEL_4;
  }
  time1 = *(CMTime *)a4;
  v14 = *(__n128 *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v13;
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    result = v14;
    *(__n128 *)a4 = v14;
    *(_QWORD *)(a4 + 16) = v13;
  }
  return result;
}

const void *fpic_GetCurrentlyPlayingEvent()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (!(*(unsigned __int8 *)(v1 + 352) | *(unsigned __int8 *)(v1 + 353)))
    return 0;
  v2 = CMBaseObjectGetDerivedStorage();
  v3 = v2 + 240;
  if (!*(_BYTE *)(v2 + 272) && !*(_BYTE *)(v2 + 273))
    v3 = v2 + 200;
  v4 = *(_OWORD *)(v3 + 16);
  v9[0] = *(_OWORD *)v3;
  v9[1] = v4;
  v10 = *(_QWORD *)(v3 + 32);
  v5 = *(_OWORD *)(DerivedStorage + 336);
  v7[0] = *(_OWORD *)(DerivedStorage + 320);
  v7[1] = v5;
  v8 = *(_QWORD *)(DerivedStorage + 352);
  if (!fpic_MomentsAreClose((uint64_t)v7, (uint64_t)v9))
    return 0;
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600)))
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), 0);
  else
    return 0;
}

uint64_t fpic_GetEventDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  CFIndex FirstIndexOfValue;
  uint64_t v13;
  CFIndex v14;
  CFIndex PerEventTrackingCount;
  CFIndex v16;
  CFIndex v17;
  CMTimeEpoch epoch;
  CMTimeFlags flags;
  CMTimeFlags v20;
  CMTimeFlags v21;
  CMTimeEpoch v22;
  uint64_t v23;
  CMTime v24;
  CMTime rhs;
  CMTime time2;
  CMTime time1;
  CMTime lhs;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, a3, a2);
  v10 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a4->value = *MEMORY[0x1E0CA2E18];
  a4->epoch = *(_QWORD *)(v10 + 16);
  if (result)
  {
    v11 = result;
    CMBaseObjectGetDerivedStorage();
    FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
    v13 = MEMORY[0x1E0CA2E68];
    if (FirstIndexOfValue != -1)
    {
      v14 = FirstIndexOfValue;
      PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, FirstIndexOfValue);
      value = *(_QWORD *)v13;
      timescale = *(_DWORD *)(v13 + 8);
      if (PerEventTrackingCount >= 1)
      {
        v16 = PerEventTrackingCount;
        v23 = v11;
        v17 = 0;
        epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        flags = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
        do
        {
          memset(&time1, 0, sizeof(time1));
          fpic_GetEventItemDuration(a1, a3, a2, v14, v17, (uint64_t)&time1);
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = flags;
          lhs.epoch = epoch;
          rhs = time1;
          CMTimeAdd(&time2, &lhs, &rhs);
          value = time2.value;
          flags = time2.flags;
          timescale = time2.timescale;
          epoch = time2.epoch;
          ++v17;
        }
        while (v16 != v17);
        v11 = v23;
        if ((time2.flags & 1) != 0)
        {
          a4->value = value;
          a4->timescale = timescale;
          a4->flags = flags;
          a4->epoch = epoch;
        }
      }
      if (!v14)
      {
        time1 = *(CMTime *)(DerivedStorage + 408);
        time2 = *(CMTime *)(DerivedStorage + 456);
        CMTimeAdd(&v24, &time1, &time2);
        time2 = *a4;
        CMTimeAdd(&time1, &time2, &v24);
        *a4 = time1;
      }
      v13 = MEMORY[0x1E0CA2E68];
    }
    v20 = a4->flags;
    if ((v20 & 1) == 0)
    {
      FigPlayerInterstitialEventGetStatedDuration(v11, (uint64_t)&time1);
      *a4 = time1;
      v20 = a4->flags;
    }
    if ((v20 & 1) == 0)
    {
      *(_OWORD *)&a4->value = *(_OWORD *)v13;
      a4->epoch = *(_QWORD *)(v13 + 16);
    }
    result = FigPlayerInterstitialEventGetPlayoutLimit(v11, (uint64_t)&time1);
    lhs.value = time1.value;
    v21 = time1.flags;
    lhs.timescale = time1.timescale;
    if ((time1.flags & 0x1D) == 1)
    {
      v22 = time1.epoch;
      time1.value = lhs.value;
      time1.timescale = lhs.timescale;
      time2 = *a4;
      result = CMTimeCompare(&time1, &time2);
      if ((result & 0x80000000) != 0)
      {
        a4->value = lhs.value;
        a4->timescale = lhs.timescale;
        a4->flags = v21;
        a4->epoch = v22;
      }
    }
  }
  return result;
}

double fpic_GetEventItemDuration@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFIndex a4@<X3>, CFIndex a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __CFString *PerAssetPerEventTrackedObject;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, const __CFString *, int *, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  unsigned int (*v24)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  CFDictionaryRef v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  Float64 v31;
  CMTime v33;
  CFDictionaryRef dictionaryRepresentation;
  int v35;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, a2, a3);
  v14 = MEMORY[0x1E0CA2E18];
  v15 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a6 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a6 + 16) = *(_QWORD *)(v14 + 16);
  if (v13)
  {
    v16 = v13;
    PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, a4, a5, CFSTR("PlaybackItem"));
    if (PerAssetPerEventTrackedObject != CFSTR("DummyItem"))
    {
      v18 = PerAssetPerEventTrackedObject;
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(DerivedStorage + 96))(a1, a2, PerAssetPerEventTrackedObject);
      if (v19)
      {
        v20 = v19;
        v35 = 0;
        dictionaryRepresentation = 0;
        v21 = *(unsigned int (**)(uint64_t, const __CFString *, int *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 8);
        if (v21)
        {
          if (!v21(v20, CFSTR("Duration"), &v35, 0, 0) && v35 == 2)
          {
            CMBaseObject = FigAssetGetCMBaseObject(v20);
            v24 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v24)
            {
              if (!v24(CMBaseObject, CFSTR("Duration"), *MEMORY[0x1E0C9AE00], &dictionaryRepresentation))
              {
                CMTimeMakeFromDictionary(&v33, dictionaryRepresentation);
                *(_QWORD *)&v15 = v33.value;
                *(_OWORD *)a6 = *(_OWORD *)&v33.value;
                v25 = dictionaryRepresentation;
                *(_QWORD *)(a6 + 16) = v33.epoch;
                if (v25)
                  CFRelease(v25);
              }
            }
          }
        }
      }
      v26 = *(_DWORD *)(a6 + 12);
      if ((v26 & 1) == 0)
      {
        v27 = CMBaseObjectGetDerivedStorage();
        if (a2)
        {
          if (v18)
          {
            v28 = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v27 + 72))(a1, a2, v18);
            if (v28)
            {
              v29 = v28;
              v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
              if (v30)
              {
                v30(v29, a6);
                v26 = *(_DWORD *)(a6 + 12);
              }
            }
          }
        }
      }
      if ((v26 & 1) == 0 && fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, a4, a5, CFSTR("DurationFromJSON")))
      {
        FigCFNumberGetFloat64();
        CMTimeMakeWithSeconds(&v33, v31, 1000000);
        *(_QWORD *)&v15 = v33.value;
        *(CMTime *)a6 = v33;
      }
      if ((*(_BYTE *)(a6 + 12) & 1) == 0 && fpic_GetPerEventTrackingCount(DerivedStorage, a4) == 1)
      {
        FigPlayerInterstitialEventGetStatedDuration(v16, (uint64_t)&v33);
        *(_QWORD *)&v15 = v33.value;
        *(CMTime *)a6 = v33;
      }
    }
  }
  return *(double *)&v15;
}

uint64_t fpic_GetProjectedDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, uint64_t a4@<X3>, CMTime *a5@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  CFIndex PerEventTrackingCount;
  uint64_t v13;
  CFIndex v14;
  CFIndex v15;
  __CFString *PerAssetPerEventTrackedObject;
  __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef *v21;
  uint64_t v22;
  CFIndex v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v26;
  uint64_t result;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  uint64_t v30;
  int v31;
  uint64_t v32;
  CMTime rhs;
  CMTime lhs;
  CMTime time2;
  uint64_t v36;
  __int16 v37;
  CFIndex v38;
  CMTime time1;
  CMTimeValue v40;
  CMTimeScale timescale;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v32 = a2;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, a4, a2);
  PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, a3);
  timescale = 0;
  v13 = MEMORY[0x1E0CA2E68];
  v40 = 0;
  *(_OWORD *)&a5->value = *MEMORY[0x1E0CA2E68];
  a5->epoch = *(_QWORD *)(v13 + 16);
  if (PerEventTrackingCount < 1)
    goto LABEL_25;
  v14 = PerEventTrackingCount;
  v30 = v11;
  v15 = 0;
  v31 = 1;
  do
  {
    PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, a3, v15, CFSTR("PlaybackItem"));
    if (PerAssetPerEventTrackedObject == CFSTR("DummyItem"))
    {
      v20 = fpic_UnwrapEvent(a1, v32);
      v21 = FigPlayerInterstitialEventCopyIdentifier(v20);
      if (dword_1EE2A33C8)
      {
        v22 = DerivedStorage;
        v23 = a3;
        LODWORD(lhs.value) = 0;
        LOBYTE(rhs.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = lhs.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, rhs.value))
          v26 = value;
        else
          v26 = value & 0xFFFFFFFE;
        if (v26)
        {
          LODWORD(time2.value) = 136315906;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpic_GetProjectedDuration";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = a1;
          HIWORD(time2.epoch) = 2112;
          v36 = v32;
          v37 = 2048;
          v38 = v15;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a3 = v23;
        DerivedStorage = v22;
      }
      if (v21)
        CFRelease(v21);
    }
    else
    {
      v17 = PerAssetPerEventTrackedObject;
      v18 = CMBaseObjectGetDerivedStorage();
      if (a4
        && v17
        && (v19 = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v18 + 72))(a1, a4, v17),
            memset(&time1, 0, sizeof(time1)),
            v19))
      {
        fpic_GetItemEndTime(v19, (uint64_t)&time1);
      }
      else
      {
        time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      }
      if ((time1.flags & 0x1D) == 1)
      {
        lhs = *a5;
        rhs = time1;
        CMTimeAdd(&time2, &lhs, &rhs);
        *a5 = time2;
      }
      else
      {
        v31 = 0;
      }
    }
    ++v15;
  }
  while (v14 != v15);
  v11 = v30;
  if (v31)
  {
    if (!a3)
    {
      time2 = *a5;
      lhs = *(CMTime *)(DerivedStorage + 408);
      CMTimeAdd(&time1, &time2, &lhs);
      *a5 = time1;
    }
  }
  else
  {
LABEL_25:
    fpic_GetEventDuration(a1, v32, a4, &time1);
    *a5 = time1;
  }
  result = FigPlayerInterstitialEventGetPlayoutLimit(v11, (uint64_t)&time1);
  v40 = time1.value;
  flags = time1.flags;
  timescale = time1.timescale;
  if ((time1.flags & 0x1D) == 1)
  {
    epoch = time1.epoch;
    time1.value = v40;
    time1.timescale = timescale;
    time2 = *a5;
    result = CMTimeCompare(&time1, &time2);
    if ((result & 0x80000000) != 0)
    {
      a5->value = v40;
      a5->timescale = timescale;
      a5->flags = flags;
      a5->epoch = epoch;
    }
  }
  return result;
}

void fpic_AddTimeToMoment(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  CMTime v7;
  CMTime lhs;
  CMTime time;

  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if ((a2->flags & 0x1D) == 1)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      lhs = *(CMTime *)a1;
      v7 = *a2;
      CMTimeAdd(&time, &lhs, &v7);
      *(CMTime *)a3 = time;
      *(_BYTE *)(a3 + 32) = 1;
    }
    if (*(_BYTE *)(a1 + 33))
    {
      v6 = *(double *)(a1 + 24);
      time = *a2;
      *(double *)(a3 + 24) = v6 + CMTimeGetSeconds(&time);
      *(_BYTE *)(a3 + 33) = 1;
    }
  }
}

double fpic_SubtractMomentFromMoment@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  CMTime v7;
  CMTime lhs;
  CMTime v9;

  v4 = MEMORY[0x1E0CA2E18];
  v5 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a3 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v4 + 16);
  if (*(_BYTE *)(a1 + 32) && *(_BYTE *)(a2 + 32))
  {
    lhs = *(CMTime *)a1;
    v7 = *(CMTime *)a2;
    CMTimeSubtract(&v9, &lhs, &v7);
LABEL_7:
    *(_QWORD *)&v5 = v9.value;
    *(CMTime *)a3 = v9;
    return *(double *)&v5;
  }
  if (*(_BYTE *)(a1 + 33) && *(_BYTE *)(a2 + 33))
  {
    CMTimeMakeWithSeconds(&v9, *(double *)(a1 + 24) - *(double *)(a2 + 24), 1000000);
    goto LABEL_7;
  }
  return *(double *)&v5;
}

BOOL fpic_isEventInSameGroupAsAnotherEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  uint64_t v5;
  CFTypeRef cf;

  v3 = 0;
  cf = 0;
  if (a2)
  {
    if (a3)
    {
      v5 = fpic_UnwrapEvent(a1, a3);
      fpic_copyEventsScheduledAtSameMomentAsEvent(a1, v5, (__CFArray **)&cf);
      v3 = FigCFArrayGetFirstIndexOfValue() != -1;
      if (cf)
        CFRelease(cf);
    }
  }
  return v3;
}

uint64_t fpic_copyEventsScheduledAtSameMomentAsEvent(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  for (i = 0; ; ++i)
  {
    Count = *(const __CFArray **)(v7 + 184);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if (i >= (uint64_t)Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 184), i);
    v13 = fpic_UnwrapEvent(a1, (uint64_t)ValueAtIndex);
    if (FigPlayerInterstitialEventDoStartTimesMatch(a2, v13))
      CFArrayAppendValue(v9, ValueAtIndex);
  }
  *a3 = v9;
  return 0;
}

uint64_t fpic_isEventResolvableOnPrimaryTimeline(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = fpic_UnwrapEvent(a1, a2);
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  fpic_GetEventStartMoment(v5, (uint64_t)&v11);
  if ((_BYTE)v13)
  {
    v9 = v11;
    v6 = v12;
  }
  else
  {
    if (BYTE1(v13))
    {
      v7 = *(_OWORD *)(DerivedStorage + 296);
      v14[0] = *(_OWORD *)(DerivedStorage + 280);
      v14[1] = v7;
      v15 = *(_QWORD *)(DerivedStorage + 312);
      FigCreateTimeWithDateAndMoment((uint64_t)v14, (uint64_t)&v9, *((double *)&v12 + 1));
      return BYTE12(v9) & 1;
    }
    v9 = *MEMORY[0x1E0CA2E18];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v10 = v6;
  return BYTE12(v9) & 1;
}

__n128 fpic_GetCurrentDepartureTime@<Q0>(__n128 *a1@<X8>)
{
  uint64_t DerivedStorage;
  __n128 result;
  double v4;
  __int128 v5;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 352))
  {
    result = *(__n128 *)(DerivedStorage + 320);
    a1[1].n128_u64[0] = *(_QWORD *)(DerivedStorage + 336);
    *a1 = result;
  }
  else if (*(_BYTE *)(DerivedStorage + 353))
  {
    v4 = *(double *)(DerivedStorage + 344);
    v5 = *(_OWORD *)(DerivedStorage + 296);
    v7[0] = *(_OWORD *)(DerivedStorage + 280);
    v7[1] = v5;
    v8 = *(_QWORD *)(DerivedStorage + 312);
    result.n128_f64[0] = FigCreateTimeWithDateAndMoment((uint64_t)v7, (uint64_t)a1, v4);
  }
  else
  {
    v6 = MEMORY[0x1E0CA2E18];
    result = *(__n128 *)MEMORY[0x1E0CA2E18];
    *a1 = *(__n128 *)MEMORY[0x1E0CA2E18];
    a1[1].n128_u64[0] = *(_QWORD *)(v6 + 16);
  }
  return result;
}

void fpic_GetEventStartMoment(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (FigPlayerInterstitialEventIsPostRoll(a1))
    fpic_GetEarliestStartForPostroll(a2);
  else
    fpic_EventDateTimeMoment(a1, a2);
}

__n128 fpic_AccumulateDuration(CMTime *a1, CMTime *a2)
{
  __n128 result;
  CMTime v4;
  CMTime lhs;
  CMTime v6;

  if ((a2->flags & 0x1D) == 1)
  {
    if ((a1->flags & 0x1D) == 1)
    {
      lhs = *a1;
      v4 = *a2;
      CMTimeAdd(&v6, &lhs, &v4);
      result.n128_u64[0] = v6.value;
      *a1 = v6;
    }
    else
    {
      result = *(__n128 *)&a2->value;
      a1->epoch = a2->epoch;
      *(__n128 *)&a1->value = result;
    }
  }
  return result;
}

void fpic_CopyNextItem(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v4;
  void (*v5)(uint64_t, CFTypeRef, const void **);
  const void *v6;

  v6 = 0;
  if (a1)
  {
    v4 = *a2;
    v5 = *(void (**)(uint64_t, CFTypeRef, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v5)
      v5(a1, v4, &v6);
  }
  if (*a2)
    CFRelease(*a2);
  *a2 = v6;
}

void fpic_GetOffsetForEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[40];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE time2[32];
  uint64_t v27;
  _BYTE time1[32];
  uint64_t v29;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(a1, a4, a2);
  v12 = MEMORY[0x1E0CA2E68];
  v16 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)a5 = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(a5 + 16) = v13;
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
  {
    if (*(_QWORD *)(DerivedStorage + 736) != a2)
    {
      *(_OWORD *)a5 = v16;
      *(_QWORD *)(a5 + 16) = v13;
      return;
    }
    goto LABEL_10;
  }
  if ((*(_BYTE *)(DerivedStorage + 756) & 1) != 0)
  {
LABEL_10:
    *(_QWORD *)(a5 + 16) = *(_QWORD *)(DerivedStorage + 760);
    *(_OWORD *)a5 = *(_OWORD *)(DerivedStorage + 744);
    return;
  }
  if ((*((_BYTE *)a3 + 12) & 1) != 0)
  {
    *(_OWORD *)time1 = *a3;
    *(_QWORD *)&time1[16] = *((_QWORD *)a3 + 2);
    *(_OWORD *)time2 = v16;
    *(_QWORD *)&time2[16] = v13;
    if (CMTimeCompare((CMTime *)time1, (CMTime *)time2) >= 1)
    {
      v29 = 0;
      memset(time1, 0, sizeof(time1));
      fpic_EventDateTimeMoment(v11, (uint64_t)time1);
      v27 = 0;
      memset(time2, 0, sizeof(time2));
      fpic_GetEffectiveCurrentItemMoment(*(_QWORD *)(DerivedStorage + 152), (uint64_t)time2);
      v23 = *(_OWORD *)time2;
      v24 = *(_OWORD *)&time2[16];
      v25 = v27;
      v20 = *(_OWORD *)time1;
      v21 = *(_OWORD *)&time1[16];
      v22 = v29;
      if (fpic_MomentGreaterThan((uint64_t)&v23, (uint64_t)&v20))
      {
        v23 = *(_OWORD *)time1;
        v24 = *(_OWORD *)&time1[16];
        v25 = v29;
        v20 = *a3;
        *(_QWORD *)&v21 = *((_QWORD *)a3 + 2);
        fpic_AddTimeToMoment((uint64_t)&v23, (CMTime *)&v20, (uint64_t)v19);
        v23 = *(_OWORD *)time2;
        v24 = *(_OWORD *)&time2[16];
        v25 = v27;
        if (fpic_MomentGreaterThan((uint64_t)v19, (uint64_t)&v23))
        {
          v23 = *(_OWORD *)time2;
          v24 = *(_OWORD *)&time2[16];
          v25 = v27;
          v20 = *(_OWORD *)time1;
          v21 = *(_OWORD *)&time1[16];
          v22 = v29;
          fpic_SubtractMomentFromMoment((uint64_t)&v23, (uint64_t)&v20, (uint64_t)&v17);
          *(_OWORD *)a5 = v17;
          v14 = v18;
        }
        else
        {
          v15 = MEMORY[0x1E0CA2E18];
          *(_OWORD *)a5 = *MEMORY[0x1E0CA2E18];
          v14 = *(_QWORD *)(v15 + 16);
        }
        *(_QWORD *)(a5 + 16) = v14;
      }
    }
  }
}

void fpic_RemovePerAssetPerEventTrackedObjects(uint64_t a1, CFIndex idx, CFIndex a3)
{
  const __CFArray *Count;
  const __CFArray *ValueAtIndex;
  __CFArray *v8;

  Count = *(const __CFArray **)(a1 + 608);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count > idx)
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), idx);
    v8 = ValueAtIndex;
    if (ValueAtIndex)
      ValueAtIndex = (const __CFArray *)CFArrayGetCount(ValueAtIndex);
    if ((uint64_t)ValueAtIndex > a3)
      CFArrayRemoveValueAtIndex(v8, a3);
  }
}

uint64_t fpic_AssertPostRoll(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v6;
  uint64_t result;
  uint64_t (*v8)(uint64_t, const __CFString *, const __CFString *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 978) = 1;
  FigBaseObject = FigPlayerGetFigBaseObject(a2);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v5)
    v5(FigBaseObject, CFSTR("ActionAtEnd"), *MEMORY[0x1E0C9AE00], DerivedStorage + 992);
  v6 = FigPlayerGetFigBaseObject(a2);
  result = CMBaseObjectGetVTable();
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(result + 8) + 56);
  if (v8)
    return v8(v6, CFSTR("ActionAtEnd"), CFSTR("None"));
  return result;
}

void fpic_SetPerAssetPerEventTrackedObject(uint64_t a1, CFIndex a2, CFIndex a3, const void *a4, const void *a5)
{
  CFIndex Count;
  const __CFAllocator *v11;
  uint64_t v12;
  const CFArrayCallBacks *v13;
  CFMutableArrayRef v14;
  CFMutableArrayRef v15;
  const __CFArray *ValueAtIndex;
  CFIndex v17;
  const __CFAllocator *v18;
  uint64_t v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v23;
  __CFDictionary *v24;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 608));
  if (Count > a2)
  {
LABEL_5:
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), a2);
    v17 = CFArrayGetCount(ValueAtIndex);
    if (v17 > a3)
    {
LABEL_9:
      v24 = (__CFDictionary *)CFArrayGetValueAtIndex(ValueAtIndex, a3);
      if (a5)
        CFDictionarySetValue(v24, a4, a5);
      else
        CFDictionaryRemoveValue(v24, a4);
    }
    else
    {
      v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v19 = a3 - v17 + 1;
      v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        Mutable = CFDictionaryCreateMutable(v18, 0, v20, v21);
        if (!Mutable)
          break;
        v23 = Mutable;
        CFArrayAppendValue(ValueAtIndex, Mutable);
        CFRelease(v23);
        if (!--v19)
          goto LABEL_9;
      }
    }
  }
  else
  {
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = a2 - Count + 1;
    v13 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    while (1)
    {
      v14 = CFArrayCreateMutable(v11, 0, v13);
      if (!v14)
        break;
      v15 = v14;
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 608), v14);
      CFRelease(v15);
      if (!--v12)
        goto LABEL_5;
    }
  }
}

uint64_t fpic_ScheduleAssetListReadForEvent(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, CMBlockBufferRef *a8)
{
  uint64_t DerivedStorage;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  CFIndex FirstIndexOfValue;
  Float64 Seconds;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, CFTypeRef *);
  uint64_t v23;
  const __CFAllocator *v24;
  uint64_t CMBaseObject;
  void (*v26)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v27;
  uint64_t v28;
  uint64_t (*v29)(CFTypeRef, uint64_t, _QWORD, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  CFTypeRef v34;
  uint64_t Mutable;
  uint64_t v36;
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  CFTypeRef v40;
  uint64_t (*v41)(uint64_t, const __CFAllocator *, _QWORD, CFTypeRef, _QWORD, CFTypeRef, CFTypeRef, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, unsigned int, int), CFTypeRef, CFTypeRef *, int *);
  CFTypeRef v42;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v46;
  CFTypeRef v47;
  CFTypeRef v48;
  uint64_t v49;
  uint64_t (*v50)(CFTypeRef, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t *);
  uint64_t v51;
  CFStringRef v52;
  CFStringRef v53;
  __int128 v56;
  uint64_t v57;
  CMTime v58;
  CFTypeRef v59;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef v61;
  CFTypeRef v62;
  CFTypeRef v63;
  CFTypeRef v64;
  CFTypeRef cf;
  CFTypeRef v66;
  uint64_t v67;
  CFTypeRef v68;
  CFTypeRef v69;
  int v70;
  CFTypeRef v71;
  CFTypeRef v72;
  CFTypeRef v73;
  _BYTE time[32];
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, a3);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 88))(a1, a2, a3);
  v72 = 0;
  v73 = 0;
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v67 = 0;
  v68 = 0;
  if (a4)
    v17 = (void *)CFRetain(a4);
  else
    v17 = FigPlayerInterstitialEventCopyAssetListUrl(v15);
  v18 = v17;
  cf = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  v59 = 0;
  blockBufferOut = 0;
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
  memset(&v58, 0, sizeof(v58));
  fpic_PredictEventGroupDurationOnPrimary(a1, a3, a2, 0, 0, &v58);
  v56 = 0uLL;
  v57 = 0;
  *(CMTime *)time = v58;
  fpic_GetOffsetForEvent(a1, (uint64_t)a3, (__int128 *)time, a2, (uint64_t)&v56);
  Seconds = 0.0;
  if ((BYTE12(v56) & 1) != 0)
  {
    *(_OWORD *)time = v56;
    *(_QWORD *)&time[16] = v57;
    Seconds = CMTimeGetSeconds((CMTime *)time);
  }
  if (!v18)
  {
    fpic_SetPerAssetPerEventTrackedObject(DerivedStorage, FirstIndexOfValue, 0, CFSTR("PlaybackItem"), CFSTR("DummyItem"));
    v21 = 0;
LABEL_38:
    v42 = 0;
    goto LABEL_39;
  }
  if (!v16)
  {
    v21 = 0;
    goto LABEL_37;
  }
  v22 = *(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (!v22)
    goto LABEL_36;
  v23 = v22(v16, &v73);
  if ((_DWORD)v23)
  {
LABEL_85:
    v21 = v23;
    goto LABEL_37;
  }
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(_QWORD *)(DerivedStorage + 1072))
    goto LABEL_18;
  CMBaseObject = FigAssetGetCMBaseObject(v73);
  v26 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v26)
    v26(CMBaseObject, CFSTR("assetProperty_StorageSession"), v24, &v72);
  v27 = v72;
  if (!v72)
  {
    v27 = FigURLStorageSessionCopyGlobalSession();
    v72 = v27;
    if (!v27)
    {
      v23 = FigSignalErrorAt();
      goto LABEL_85;
    }
  }
  v28 = *(_QWORD *)(DerivedStorage + 8);
  v29 = *(uint64_t (**)(CFTypeRef, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v29)
  {
LABEL_36:
    v21 = 4294954514;
LABEL_37:
    CFRelease(v18);
    goto LABEL_38;
  }
  v23 = v29(v27, v28, 0, DerivedStorage + 1072);
  if ((_DWORD)v23)
    goto LABEL_85;
LABEL_18:
  v30 = FigAssetGetCMBaseObject(v73);
  v31 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v31)
    goto LABEL_36;
  v23 = v31(v30, CFSTR("assetProperty_InstanceUUID"), v24, &v64);
  if ((_DWORD)v23)
    goto LABEL_85;
  v32 = FigAssetGetCMBaseObject(v73);
  v33 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (!v33)
    goto LABEL_36;
  v23 = v33(v32, CFSTR("assetProperty_CreationOptionsDictionary"), v24, &v63);
  if ((_DWORD)v23)
    goto LABEL_85;
  v23 = FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions(v24, (uint64_t)v63, (__CFDictionary **)&v62);
  if ((_DWORD)v23)
    goto LABEL_85;
  v23 = FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(v24, (uint64_t)v63, (unint64_t)v64, (__CFDictionary **)&v61);
  if ((_DWORD)v23)
    goto LABEL_85;
  v23 = FigCFHTTPCreateURLWithQueryParam((const __CFURL *)v18, CFSTR("_HLS_primary_id="), *(_QWORD *)(DerivedStorage + 160), &v66);
  if ((_DWORD)v23)
    goto LABEL_85;
  v53 = CFStringCreateWithFormat(v24, 0, CFSTR("%f"), *(_QWORD *)&Seconds);
  if (!FigCFHTTPCreateURLWithQueryParam((const __CFURL *)v66, CFSTR("_HLS_start_offset="), (uint64_t)v53, &cf))
  {
    v34 = v66;
    v66 = cf;
    if (cf)
      CFRetain(cf);
    if (v34)
      CFRelease(v34);
    if (cf)
      CFRelease(cf);
  }
  Mutable = CMBlockBufferCreateEmpty(v24, 0, 0, &blockBufferOut);
  if ((_DWORD)Mutable)
    goto LABEL_83;
  FigCFDictionaryGetBooleanIfPresent();
  if (FigCFHTTPIsHTTPBasedURL((const __CFURL *)v18))
  {
    FigRetainProxyCreate();
    v36 = *(_QWORD *)(DerivedStorage + 1072);
    v37 = v66;
    v38 = v61;
    v39 = v62;
    v40 = v59;
    v41 = *(uint64_t (**)(uint64_t, const __CFAllocator *, _QWORD, CFTypeRef, _QWORD, CFTypeRef, CFTypeRef, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, unsigned int, int), CFTypeRef, CFTypeRef *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v41)
    {
      v76 = 0u;
      v75 = 0u;
      memset(time, 0, sizeof(time));
      v77 = 0x900000000;
      v78 = 0u;
      v79 = 0u;
      v80 = 0;
      v21 = v41(v36, v24, 0, v37, 0, v38, v39, 0, time, 0, 0, 0, fpic_HTTPReadCallback, v40, &v71, &v70);
    }
    else
    {
      v21 = 4294954514;
    }
    v52 = v53;
    if (v59)
      CFRelease(v59);
    v51 = 0;
    v42 = 0;
    if ((_DWORD)v21)
      goto LABEL_80;
    goto LABEL_76;
  }
  v44 = FigAssetGetCMBaseObject(v73);
  v45 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 48);
  if (v45)
  {
    Mutable = v45(v44, CFSTR("assetProperty_CustomURLLoader"), v24, &v69);
    if (!(_DWORD)Mutable)
    {
      Mutable = FigCustomURLRequestInfoCreateMutable();
      if (!(_DWORD)Mutable)
      {
        Mutable = FigCustomURLRequestInfoSetHTTPHeaders();
        if (!(_DWORD)Mutable)
        {
          v42 = FigCFHTTPCreateUserAgent();
          v46 = FigCustomURLRequestInfoSetUserAgent();
          if ((_DWORD)v46)
          {
LABEL_86:
            v21 = v46;
            goto LABEL_79;
          }
          v47 = v69;
          v48 = v68;
          v49 = *(_QWORD *)(DerivedStorage + 16);
          v50 = *(uint64_t (**)(CFTypeRef, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (v50)
          {
            v46 = v50(v47, v48, a1, v49, fpic_customURLReadCallback, &v67);
            if (!(_DWORD)v46)
            {
              v51 = v67;
              v52 = v53;
LABEL_76:
              v21 = 0;
              *a5 = v71;
              v71 = 0;
              *a6 = v69;
              v69 = 0;
              *a7 = v51;
              *a8 = blockBufferOut;
              blockBufferOut = 0;
              goto LABEL_80;
            }
            goto LABEL_86;
          }
          goto LABEL_78;
        }
      }
    }
LABEL_83:
    v21 = Mutable;
    v42 = 0;
    goto LABEL_79;
  }
  v42 = 0;
LABEL_78:
  v21 = 4294954514;
LABEL_79:
  v52 = v53;
LABEL_80:
  CFRelease(v18);
  if (v52)
    CFRelease(v52);
LABEL_39:
  if (v73)
    CFRelease(v73);
  if (v72)
    CFRelease(v72);
  if (v64)
    CFRelease(v64);
  if (v63)
    CFRelease(v63);
  if (v62)
    CFRelease(v62);
  if (v66)
    CFRelease(v66);
  if (v61)
    CFRelease(v61);
  if (v71)
    CFRelease(v71);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v42)
    CFRelease(v42);
  if (v68)
    CFRelease(v68);
  if (v69)
    CFRelease(v69);
  return v21;
}

void fpic_ClearAssetListResponseAfterAssetListReadFailure(const void *a1, const void *a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  CFMutableDictionaryRef v10;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(DerivedStorage, v7, a2);
    FigPlayerInterstitialEventSetAssetListResponse(v9, 0);
    if (!(*(unsigned int (**)(const void *, const void *, uint64_t, _QWORD, CFTypeRef *))(DerivedStorage + 104))(a1, v8, v9, 0, &cf))fpic_UpdateEventInAddOrder(a1, a2, cf);
    v10 = fpic_CreateAssetListResponseStatusDidChangeNotificationPayload((uint64_t)cf, 2, a3);
    fpic_PostNotification(DerivedStorage, (uint64_t)CFSTR("fpiAssetListResponseStatusDidChange"), a1, v10);
    if (cf)
      CFRelease(cf);
    if (v10)
      CFRelease(v10);
    CFRelease(v8);
  }
}

void fpic_RemoveEvent(const void *a1, const void *a2, __CFArray *a3, int a4, int a5)
{
  uint64_t DerivedStorage;
  const void *v10;
  uint64_t FirstIndexOfValue;
  uint64_t v13;
  CFIndex v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v16;
  CFIndex PerEventTrackingCount;
  uint64_t FirstCurrentItem;
  uint64_t v19;
  CFIndex i;
  const __CFString *PerAssetPerEventTrackedObject;
  uint64_t v22;
  BOOL v23;
  CFTypeRef v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  CFIndex Count;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  CFTypeRef *v34;
  CFIndex v35;
  const void *ValueAtIndex;
  uint64_t v37;
  CFTypeRef *v38;
  NSObject *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  CFIndex idx;
  uint64_t v44;
  int v45;
  CFTypeRef *v46;
  const void *v47;
  _QWORD block[5];
  os_log_type_t type;
  unsigned int v51;
  int v52;
  const char *v53;
  __int16 v54;
  const void *v55;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
  if (FirstIndexOfValue != -1 && v10 != 0)
  {
    idx = FirstIndexOfValue;
    v45 = a4;
    v13 = (*(uint64_t (**)(const void *, const void *, const void *))(DerivedStorage + 80))(a1, v10, a2);
    v14 = FigCFArrayGetFirstIndexOfValue();
    v44 = v13;
    v46 = FigPlayerInterstitialEventCopyIdentifier(v13);
    if (dword_1EE2A33C8)
    {
      v51 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
    {
      fpic_UnwrapEvent((uint64_t)a1, *(_QWORD *)(DerivedStorage + 736));
      if (FigCFEqual())
      {
        if (dword_1EE2A33C8)
        {
          v51 = 0;
          type = OS_LOG_TYPE_DEFAULT;
          v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        fpic_ForceCancelInitiatedSeek(a1);
      }
    }
    CFRetain(a2);
    v47 = a2;
    if (v14 != -1)
    {
      PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, v14);
      FirstCurrentItem = fpic_GetFirstCurrentItem((uint64_t)a1, (uint64_t)v10);
      v19 = FirstCurrentItem;
      if (a3)
      {
        v42 = FirstCurrentItem;
        cf[0] = 0;
        fpic_CopyNextItemFromInterstitialPlayer((uint64_t)a1, (uint64_t)v10, cf);
        if (PerEventTrackingCount >= 1)
        {
          for (i = 0; i != PerEventTrackingCount; ++i)
          {
            PerAssetPerEventTrackedObject = (const __CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v14, i, CFSTR("PlaybackItem"));
            v22 = CMBaseObjectGetDerivedStorage();
            if (PerAssetPerEventTrackedObject)
              v23 = PerAssetPerEventTrackedObject == CFSTR("DummyItem");
            else
              v23 = 1;
            if (!v23)
            {
              v24 = (CFTypeRef)(*(uint64_t (**)(const void *, const void *, const __CFString *))(v22 + 72))(a1, v10, PerAssetPerEventTrackedObject);
              if (!a5 || cf[0] != v24)
                CFArrayAppendValue(a3, PerAssetPerEventTrackedObject);
            }
          }
        }
        if (cf[0])
          CFRelease(cf[0]);
        a2 = v47;
        v19 = v42;
      }
      fpic_RecordPastCurrentEventDuration((uint64_t)a1, a2);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 600), v14);
      fpic_RemovePerEventTrackedObjects(DerivedStorage, v14);
      CFSetSetValue(*(CFMutableSetRef *)(DerivedStorage + 632), a2);
      fpic_CancelPendingURLRequest((uint64_t)a1, a2);
      if (!CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600))
        && FigPlayerInterstitialEventIsPostRoll(v44))
      {
        fpic_DeassertPostRoll((uint64_t)a1);
      }
      if (!v14)
      {
        fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)a1, v19);
        fpic_SignalCurrentEvent(a1, (uint64_t)v10);
        v25 = MEMORY[0x1E0CA2E68];
        v26 = *MEMORY[0x1E0CA2E68];
        *(_OWORD *)(DerivedStorage + 408) = *MEMORY[0x1E0CA2E68];
        v27 = *(_QWORD *)(v25 + 16);
        *(_QWORD *)(DerivedStorage + 424) = v27;
        *(_OWORD *)(DerivedStorage + 456) = v26;
        *(_QWORD *)(DerivedStorage + 472) = v27;
      }
      CFRetain(a1);
      v28 = *(NSObject **)(DerivedStorage + 8);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __fpic_RemoveEvent_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a1;
      dispatch_async(v28, block);
    }
    v29 = CMBaseObjectGetDerivedStorage();
    Count = CFArrayGetCount(*(CFArrayRef *)(v29 + 600));
    v31 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v31)
    {
      v32 = (const void *)v31;
      v33 = (*(uint64_t (**)(const void *, uint64_t, const void *))(v29 + 80))(a1, v31, v47);
      v34 = FigPlayerInterstitialEventCopyIdentifier(v33);
      if (FigPlayerInterstitialEventIsPreRoll(v33))
      {
        if (Count < 1)
        {
LABEL_42:
          fpic_flipInterstitialAndPrimaryVisibility((uint64_t)a1, 0, (uint64_t)v32, NAN);
          if (dword_1EE2A33C8)
          {
            v51 = 0;
            type = OS_LOG_TYPE_DEFAULT;
            v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v40 = v51;
            if (os_log_type_enabled(v39, type))
              v41 = v40;
            else
              v41 = v40 & 0xFFFFFFFE;
            if (v41)
            {
              v52 = 136315394;
              v53 = "fpic_SwapToPrimaryItemPlayerLayerUponPrerollCancelation";
              v54 = 2048;
              v55 = a1;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          v35 = 0;
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v29 + 600), v35);
            v37 = (*(uint64_t (**)(const void *, const void *, const void *))(v29 + 80))(a1, v32, ValueAtIndex);
            v38 = FigPlayerInterstitialEventCopyIdentifier(v37);
            if (FigPlayerInterstitialEventIsPreRoll(v37))
            {
              if (!FigCFEqual())
                break;
            }
            if (v38)
              CFRelease(v38);
            if (Count == ++v35)
              goto LABEL_42;
          }
          if (v38)
            CFRelease(v38);
        }
      }
      CFRelease(v32);
      if (v34)
        CFRelease(v34);
    }
    if (v45)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 640), v46);
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 184), idx);
      fpic_ForgetPastEvent((uint64_t)a1, v47);
      fpic_UpdatePlaybackItemEventList((uint64_t)a1, *(_QWORD *)(DerivedStorage + 152));
    }
    CFRelease(v47);
    if (v46)
      CFRelease(v46);
  }
  if (v10)
    CFRelease(v10);
}

void fpic_GatePrimaryPlaybackAtCurrentEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *ValueAtIndex;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t);
  uint64_t v11;
  CMTime *v12;
  uint64_t v13;
  void (*v14)(uint64_t, CMTime *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime v16;
  char v17;
  CMTime v18;
  CMTime time;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v17 = 0;
  memset(&v16, 0, sizeof(v16));
  fpic_TimeToGatePrimaryPlaybackAtCurrentEvent(&v17, (uint64_t)&v16);
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600)) < 1
    || (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), 0),
        v6 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex),
        *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724)))
  {
    v7 = 0;
  }
  else
  {
    v7 = FigPlayerInterstitialEventGetSnapOptions(v6) & 1;
  }
  v8 = *(_QWORD *)(DerivedStorage + 152);
  if (v8)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v8);
    v10 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v10)
    {
      if (v7)
        v11 = *MEMORY[0x1E0C9AE50];
      else
        v11 = *MEMORY[0x1E0C9AE40];
      v10(FigBaseObject, CFSTR("SnapTimeToPausePlayback"), v11);
    }
    time = v16;
    FigCFSetPropertyToTime();
    *(CMTime *)(DerivedStorage + 896) = v16;
    v12 = (CMTime *)MEMORY[0x1E0CA2E18];
    *(_BYTE *)(DerivedStorage + 920) = v17;
    time = *v12;
    v13 = *(_QWORD *)(DerivedStorage + 152);
    v14 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v14)
      v14(v13, &time);
    v18 = time;
    fpic_CheckIfPlayheadHasReachedPrimaryPlaybackGate(a1, &v18);
  }
  if (dword_1EE2A33C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void fpic_HTTPReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, unsigned int a7, int a8)
{
  CFTypeRef v14;
  const void *Owner;
  uint64_t DerivedStorage;
  NSObject *v17;
  uint64_t v18;
  const __CFDictionary *v19;
  const void *Value;
  OpaqueCMBlockBuffer *v21;
  int v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v24;
  const void *v25;
  _QWORD v26[6];
  int v27;
  os_log_type_t type;
  int v29;
  _QWORD block[8];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated() || (Owner = (const void *)FigRetainProxyGetOwner()) == 0)
    v14 = 0;
  else
    v14 = CFRetain(Owner);
  FigRetainProxyUnlockMutex();
  if (v14)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v17 = *(NSObject **)DerivedStorage;
    v18 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpic_HTTPReadCallback_block_invoke;
    block[3] = &unk_1E2F991F0;
    block[4] = &v31;
    block[5] = v14;
    block[6] = a1;
    block[7] = DerivedStorage;
    dispatch_sync(v17, block);
    v19 = (const __CFDictionary *)v32[3];
    if (v19)
    {
      Value = CFDictionaryGetValue(v19, CFSTR("FPICURLR_Event"));
      v21 = (OpaqueCMBlockBuffer *)CFDictionaryGetValue((CFDictionaryRef)v32[3], CFSTR("FPICURLR_Buffer"));
      if (a8 || (a8 = fpic_HandleResponseData((uint64_t)v14, (uint64_t)Value, a4, a5, a6, v21, (a7 >> 1) & 1)) != 0)
      {
        v22 = *(_DWORD *)(DerivedStorage + 1024) + 1;
        *(_DWORD *)(DerivedStorage + 1024) = v22;
        fpic_setItemPropertyInt32(*(_QWORD *)(DerivedStorage + 152), (uint64_t)CFSTR("interstitialPlaybackFailureCount"), v22);
        v29 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        v24 = *(NSObject **)DerivedStorage;
        v26[0] = v18;
        v26[1] = 3221225472;
        v26[2] = __fpic_HTTPReadCallback_block_invoke_70;
        v26[3] = &__block_descriptor_52_e5_v8__0l;
        v26[4] = v14;
        v26[5] = Value;
        v27 = a8;
        dispatch_sync(v24, v26);
      }
      fpic_ServiceCurrentEvent(v14, MEMORY[0x1E0CA2E18]);
    }
    else
    {
      FigSignalErrorAt();
    }
    CFRelease(v14);
  }
  else
  {
    FigSignalErrorAt();
  }
  v25 = (const void *)v32[3];
  if (v25)
    CFRelease(v25);
  _Block_object_dispose(&v31, 8);
}

void sub_192F29420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void fpic_customURLReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, uint64_t a6)
{
  const void *v6;
  const void *SInt64;
  NSObject **DerivedStorage;
  NSObject *v13;
  const __CFDictionary *v14;
  const void *Value;
  int HTTPStatusCode;
  uint64_t *v17;
  uint64_t v18;
  CFURLRef v19;
  uint64_t *v20;
  OpaqueCMBlockBuffer *v21;
  NSObject *v22;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v24;
  const void *v25;
  _QWORD v26[8];
  os_log_type_t type;
  int v28;
  _QWORD v29[9];
  _QWORD block[8];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  CFTypeRef cf;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  SInt64 = (const void *)FigCFNumberCreateSInt64();
  cf = 0;
  v41 = 0;
  v39 = 0;
  v35 = 0;
  v36 = &v35;
  v37 = 0x2020000000;
  v38 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  if (!a1)
  {
    v19 = 0;
    *((_DWORD *)v36 + 6) = FigSignalErrorAt();
LABEL_23:
    fpic_ServiceCurrentEvent(a1, MEMORY[0x1E0CA2E18]);
    if (!v6)
      goto LABEL_25;
    goto LABEL_24;
  }
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v13 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_customURLReadCallback_block_invoke;
  block[3] = &unk_1E2F991F0;
  block[4] = &v31;
  block[5] = a1;
  block[6] = SInt64;
  block[7] = DerivedStorage;
  dispatch_sync(v13, block);
  v14 = (const __CFDictionary *)v32[3];
  if (v14)
  {
    Value = CFDictionaryGetValue(v14, CFSTR("FPICURLR_Event"));
    HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
    v17 = v36;
    *((_DWORD *)v36 + 6) = HTTPStatusCode;
    if (HTTPStatusCode == -17360)
    {
      *((_DWORD *)v17 + 6) = 0;
    }
    else if (HTTPStatusCode)
    {
      goto LABEL_34;
    }
    v18 = v41;
    if (!v41)
    {
      v18 = 200;
      v41 = 200;
    }
    HTTPStatusCode = FigCFHTTPCopyErrorCodeAndCommentForHTTPStatusCode(v18, &v39, 0);
    *((_DWORD *)v36 + 6) = HTTPStatusCode;
    if (!HTTPStatusCode)
    {
      v19 = 0;
      if (a6 || v39)
      {
LABEL_20:
        if (!a6)
          goto LABEL_21;
        goto LABEL_22;
      }
      if ((a5 & 1) == 0 || !FigCFHTTPIsStatusCodeRedirect(v41))
      {
        v21 = (OpaqueCMBlockBuffer *)CFDictionaryGetValue((CFDictionaryRef)v32[3], CFSTR("FPICURLR_Buffer"));
        HTTPStatusCode = fpic_HandleResponseData(a1, (uint64_t)Value, a4, 0, 0, v21, a5 & 1);
        goto LABEL_16;
      }
      HTTPStatusCode = FigCustomURLResponseInfoCopyHTTPHeaders();
      v20 = v36;
      *((_DWORD *)v36 + 6) = HTTPStatusCode;
      if (HTTPStatusCode == -17360)
      {
        *((_DWORD *)v20 + 6) = 0;
LABEL_18:
        v19 = FigCFHTTPCopyRedirectLocationFromHTTPHeaders((const __CFDictionary *)cf);
        if (v19)
        {
          v22 = *DerivedStorage;
          v29[0] = MEMORY[0x1E0C809B0];
          v29[1] = 3221225472;
          v29[2] = __fpic_customURLReadCallback_block_invoke_2;
          v29[3] = &unk_1E2F9A0C0;
          v29[4] = &v35;
          v29[5] = v6;
          v29[6] = a1;
          v29[7] = Value;
          v29[8] = v19;
          dispatch_sync(v22, v29);
          HTTPStatusCode = *((_DWORD *)v36 + 6);
          goto LABEL_20;
        }
        HTTPStatusCode = FigSignalErrorAt();
LABEL_16:
        v19 = 0;
        *((_DWORD *)v36 + 6) = HTTPStatusCode;
        goto LABEL_21;
      }
      if (!HTTPStatusCode)
        goto LABEL_18;
    }
LABEL_34:
    v19 = 0;
    if (!a6)
    {
LABEL_21:
      if (!HTTPStatusCode)
        goto LABEL_23;
    }
LABEL_22:
    v28 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v24 = *DerivedStorage;
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __fpic_customURLReadCallback_block_invoke_79;
    v26[3] = &unk_1E2F991F0;
    v26[4] = &v35;
    v26[5] = a1;
    v26[6] = Value;
    v26[7] = a6;
    dispatch_sync(v24, v26);
    goto LABEL_23;
  }
  v19 = 0;
  *((_DWORD *)v36 + 6) = FigSignalErrorAt();
  if (v6)
LABEL_24:
    CFRelease(v6);
LABEL_25:
  if (SInt64)
    CFRelease(SInt64);
  if (v19)
    CFRelease(v19);
  if (cf)
    CFRelease(cf);
  v25 = (const void *)v32[3];
  if (v25)
    CFRelease(v25);
  _Block_object_dispose(&v31, 8);
  _Block_object_dispose(&v35, 8);
}

void sub_192F29918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_HandleResponseData(uint64_t a1, uint64_t a2, OpaqueCMBlockBuffer *a3, size_t a4, size_t a5, OpaqueCMBlockBuffer *a6, int a7)
{
  uint64_t DerivedStorage;
  uint64_t appended;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  const __CFAllocator *v19;
  uint64_t CFDataWithBlockBufferNoCopy;
  CFTypeID v21;
  const __CFArray *Value;
  const __CFArray *v23;
  const CFArrayCallBacks *v24;
  __CFArray *Mutable;
  __CFArray *v26;
  CFIndex Count;
  CFIndex v28;
  CFIndex v29;
  const void *ValueAtIndex;
  CFTypeID v31;
  const __CFString *v32;
  const __CFString *v33;
  CFTypeID v34;
  const __CFURL *v35;
  const __CFURL *v36;
  CFStringRef v37;
  const void *v38;
  const void *v39;
  CFTypeID v40;
  NSObject *v41;
  uint64_t v43;
  NSObject **v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD block[11];
  const void *v48;
  CFTypeRef v49;
  CMBlockBufferRef blockBufferOut;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v49 = 0;
  blockBufferOut = 0;
  v48 = 0;
  if (a3)
  {
    appended = CMBlockBufferAppendBufferReference(a6, a3, a4, a5, 0);
    v16 = appended;
    v17 = 0;
    if (!a7 || (_DWORD)appended)
      goto LABEL_27;
  }
  else if (!a7)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_27;
  }
  v17 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v17)
  {
    v16 = 0;
    goto LABEL_27;
  }
  v18 = (*(uint64_t (**)(uint64_t, const void *, uint64_t))(DerivedStorage + 80))(DerivedStorage, v17, a2);
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFDataWithBlockBufferNoCopy = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
  if ((_DWORD)CFDataWithBlockBufferNoCopy
    || (CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy(), (_DWORD)CFDataWithBlockBufferNoCopy)
    || (CFDataWithBlockBufferNoCopy = FigJSONObjectCreateWithData(), (_DWORD)CFDataWithBlockBufferNoCopy))
  {
LABEL_41:
    v16 = CFDataWithBlockBufferNoCopy;
    goto LABEL_27;
  }
  v21 = CFGetTypeID(v48);
  if (v21 != CFDictionaryGetTypeID()
    || (Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v48, CFSTR("ASSETS"))) == 0)
  {
    CFDataWithBlockBufferNoCopy = FigSignalErrorAt();
    goto LABEL_41;
  }
  v23 = Value;
  v43 = v18;
  v44 = (NSObject **)DerivedStorage;
  v45 = a1;
  v46 = a2;
  v24 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]);
  v26 = CFArrayCreateMutable(v19, 0, v24);
  Count = CFArrayGetCount(v23);
  if (Count < 1)
  {
LABEL_22:
    v41 = *v44;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpic_HandleResponseData_block_invoke;
    block[3] = &__block_descriptor_88_e5_v8__0l;
    block[4] = v45;
    block[5] = v46;
    block[6] = Mutable;
    block[7] = v44;
    block[8] = v26;
    block[9] = v17;
    block[10] = v43;
    dispatch_sync(v41, block);
    FigPlayerInterstitialEventSetAssetListResponse(v43, v48);
    v16 = 0;
    if (!Mutable)
      goto LABEL_24;
  }
  else
  {
    v28 = Count;
    v29 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v23, v29);
      v31 = CFGetTypeID(ValueAtIndex);
      if (v31 != CFDictionaryGetTypeID())
        break;
      v32 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("URI"));
      if (!v32)
        break;
      v33 = v32;
      v34 = CFGetTypeID(v32);
      if (v34 != CFStringGetTypeID())
        break;
      v35 = CFURLCreateWithString(v19, v33, 0);
      if (!v35)
        break;
      v36 = v35;
      v37 = CFURLCopyHostName(v35);
      if (!v37)
      {
        CFRelease(v36);
        break;
      }
      CFRelease(v37);
      CFArrayAppendValue(Mutable, v36);
      CFRelease(v36);
      v38 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("DURATION"));
      if (!v38)
        break;
      v39 = v38;
      v40 = CFGetTypeID(v38);
      if (v40 != CFNumberGetTypeID())
        break;
      CFArrayAppendValue(v26, v39);
      if (v28 == ++v29)
        goto LABEL_22;
    }
    v16 = FigSignalErrorAt();
    if (!Mutable)
      goto LABEL_24;
  }
  CFRelease(Mutable);
LABEL_24:
  if (v26)
    CFRelease(v26);
LABEL_27:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  if (v48)
    CFRelease(v48);
  if (v49)
    CFRelease(v49);
  if (v17)
    CFRelease(v17);
  return v16;
}

void fpic_UpdateEventLastPlaybackFailed(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t FirstIndexOfValue;
  CFIndex v11;
  uint64_t v12;
  const __CFArray *Count;
  const void *ValueAtIndex;
  uint64_t v15;
  CMTime v16;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 80))(DerivedStorage, v7, a2);
    if (FigPlayerInterstitialEventDidLastPlaybackFail(v9) != a3)
    {
      CMBaseObjectGetDerivedStorage();
      FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
      if (FirstIndexOfValue != -1)
      {
        v11 = FirstIndexOfValue;
        FigPlayerInterstitialEventSetLastPlaybackFail(v9, a3);
        FigPlayerInterstitialEventGetResumptionOffset(v9, (uint64_t)&time1);
        v16 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (CMTimeCompare(&time1, &v16))
        {
          v12 = a3 ? 1 : -1;
          if ((v11 & 0x8000000000000000) == 0)
          {
            do
            {
              Count = *(const __CFArray **)(DerivedStorage + 600);
              if (Count)
                Count = (const __CFArray *)CFArrayGetCount(Count);
              if (v11 >= (uint64_t)Count)
                break;
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), v11);
              v15 = (*(uint64_t (**)(uint64_t, const void *, const void *))(DerivedStorage + 80))(DerivedStorage, v8, ValueAtIndex);
              FigPlayerInterstitialEventSetLastPlaybackFail(v15, a3);
              v11 += v12;
            }
            while (v11 >= 0);
          }
        }
        fpic_PostNotification(DerivedStorage, (uint64_t)CFSTR("fpiResolvePropertiesChange"), a1, 0);
      }
    }
    CFRelease(v8);
  }
}

const void *__fpic_customURLReadCallback_block_invoke(uint64_t a1)
{
  const void *result;

  result = (const void *)fpic_FindURLReq(*(_QWORD *)(a1 + 40), CFSTR("FPICURLR_CURLRequestID"), *(const void **)(a1 + 48));
  if (result != (const void *)-1)
  {
    result = CFArrayGetValueAtIndex(*(CFArrayRef *)(*(_QWORD *)(a1 + 56) + 624), (CFIndex)result);
    if (result)
      result = CFRetain(result);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

void __fpic_customURLReadCallback_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  const void *v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef cf;
  const void *v7;

  cf = 0;
  v7 = 0;
  v4 = 0;
  v5 = 0;
  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = fpic_ScheduleAssetListReadForEvent(*(_QWORD *)(a1 + 48), v1, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), &v7, &cf, &v5, &v4);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      FigSignalErrorAt();
      v3 = v7;
      if (v7)
        goto LABEL_5;
    }
    else
    {
      v3 = v7;
      if (v7)
      {
        fpic_AddNewHttpReq(*(_QWORD *)(a1 + 48), *(const void **)(a1 + 56), v7, v4);
LABEL_5:
        CFRelease(v3);
        goto LABEL_8;
      }
      if (!cf)
      {
        FigSignalErrorAt();
        goto LABEL_11;
      }
      fpic_AddNewCustomURLReq(*(_QWORD *)(a1 + 48), *(const void **)(a1 + 56), cf, v5, v4);
    }
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
LABEL_11:
  if (v4)
    CFRelease(v4);
}

void __fpic_customURLReadCallback_block_invoke_79(uint64_t a1)
{
  const void *v2;
  const void *v3;
  int Code;

  v3 = *(const void **)(a1 + 40);
  v2 = *(const void **)(a1 + 48);
  Code = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!Code)
    Code = CFErrorGetCode(*(CFErrorRef *)(a1 + 56));
  fpic_ClearAssetListResponseAfterAssetListReadFailure(v3, v2, Code);
  fpic_UpdateEventLastPlaybackFailed(*(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), 1);
  fpic_RemoveEvent(*(const void **)(a1 + 40), *(const void **)(a1 + 48), 0, 0, 0);
}

void fpic_setItemPropertyInt32(uint64_t a1, uint64_t a2, int a3)
{
  CFNumberRef v5;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, uint64_t, CFNumberRef);
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
  v7 = *(void (**)(uint64_t, uint64_t, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v7)
    v7(FigBaseObject, a2, v5);
  CFRelease(v5);
}

CFMutableDictionaryRef fpic_CreateAssetListResponseStatusDidChangeNotificationPayload(uint64_t a1, int a2, int a3)
{
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  CFErrorRef v7;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    FigCFDictionarySetValue();
    FigCFDictionarySetInt();
    if (a2 == 2)
    {
      if (a3)
      {
        v7 = CFErrorCreate(v5, CFSTR("CoreMediaErrorDomain"), a3, 0);
        FigCFDictionarySetValue();
        if (v7)
          CFRelease(v7);
      }
    }
  }
  return Mutable;
}

uint64_t fpic_GetFirstCurrentItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFIndex PerEventTrackingCount;
  CFIndex v6;
  uint64_t v7;
  __CFString *PerAssetPerEventTrackedObject;
  __CFString *v9;
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, 0);
  if (PerEventTrackingCount < 1)
  {
    v9 = CFSTR("DummyItem");
  }
  else
  {
    v6 = PerEventTrackingCount;
    v7 = 1;
    do
    {
      PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, 0, v7 - 1, CFSTR("PlaybackItem"));
      v9 = PerAssetPerEventTrackedObject;
      if (v7 >= v6)
        break;
      ++v7;
    }
    while (PerAssetPerEventTrackedObject == CFSTR("DummyItem"));
  }
  v10 = CMBaseObjectGetDerivedStorage();
  if (a2 && v9 && v9 != CFSTR("DummyItem"))
    return (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v10 + 72))(a1, a2, v9);
  else
    return 0;
}

uint64_t fpic_CopyNextItemFromInterstitialPlayer(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(DerivedStorage + 64))(a1, a2, *(_QWORD *)(DerivedStorage + 40));
  if (!a3)
    return FigSignalErrorAt();
  if (v7)
    fpic_CopyNextItem(v7, a3);
  else
    *a3 = 0;
  return 0;
}

uint64_t fpic_RecordPastCurrentEventDuration(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  CFIndex FirstIndexOfValue;
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  CMTime v11;
  CMTime lhs;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v5)
    return FigSignalErrorAt();
  v6 = (const void *)v5;
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
  fpic_GetProjectedDuration(a1, (uint64_t)a2, FirstIndexOfValue, (uint64_t)v6, &v13);
  if (!FirstIndexOfValue)
  {
    lhs = v13;
    v11 = *(CMTime *)(DerivedStorage + 456);
    CMTimeAdd(&v13, &lhs, &v11);
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  lhs = v13;
  v9 = CMTimeCopyAsDictionary(&lhs, v8);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 616), a2, v9);
  if (v9)
    CFRelease(v9);
  CFRelease(v6);
  return 0;
}

void fpic_RemovePerEventTrackedObjects(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;

  Count = *(const __CFArray **)(a1 + 608);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count > idx)
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 608), idx);
}

void fpic_CancelPendingURLRequest(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CFIndex URLReq;
  CFIndex v6;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v9;
  void (*v10)(const void *);
  const void *v11;
  const void *v12;
  void (*v13)(const void *, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  URLReq = fpic_FindURLReq(a1, CFSTR("FPICURLR_Event"), a2);
  if (URLReq != -1)
  {
    v6 = URLReq;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 624), URLReq);
    Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("FPICURLR_HTTPRequest"));
    if (Value)
    {
      v9 = Value;
      v10 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v10)
        v10(v9);
    }
    else
    {
      v11 = CFDictionaryGetValue(ValueAtIndex, CFSTR("FPICURLR_CURLLoader"));
      if (v11)
      {
        v12 = v11;
        if (FigCFDictionaryGetInt64IfPresent())
        {
          v13 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
          if (v13)
            v13(v12, 0);
        }
      }
    }
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 624), v6);
  }
}

void fpic_DeassertPostRoll(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t PrimaryPlayerAndCopyWrapper;
  uint64_t v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, uint64_t);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
  *(_BYTE *)(DerivedStorage + 978) = 0;
  if (PrimaryPlayerAndCopyWrapper)
  {
    v4 = *(_QWORD *)(DerivedStorage + 992);
    FigBaseObject = FigPlayerGetFigBaseObject(PrimaryPlayerAndCopyWrapper);
    v6 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v6)
      v6(FigBaseObject, CFSTR("ActionAtEnd"), v4);
  }
  if (cf)
    CFRelease(cf);
}

void fpic_StopRecordingActiveInterstitialItemPlayoutTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v7;
  Float64 Seconds;
  Float64 v9;
  uint64_t v10;
  CMTime rhs;
  CMTime v12;
  CMTime lhs;
  Float64 v14;
  __int16 v15;
  Float64 v16;
  CMTime time;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 492) & 0x1D) == 1)
  {
    v4 = DerivedStorage;
    memset(&v12, 0, sizeof(v12));
    fpic_GetItemPlayoutLimit(a2, (uint64_t)&v12);
    if ((v12.flags & 0x1D) == 1)
    {
      lhs = *(CMTime *)(v4 + 408);
      rhs = v12;
      CMTimeAdd(&time, &lhs, &rhs);
      *(CMTime *)(v4 + 408) = time;
    }
    if (dword_1EE2A33C8)
    {
      LODWORD(rhs.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      value = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
        v7 = value;
      else
        v7 = value & 0xFFFFFFFE;
      if (v7)
      {
        time = v12;
        Seconds = CMTimeGetSeconds(&time);
        time = *(CMTime *)(v4 + 408);
        v9 = CMTimeGetSeconds(&time);
        LODWORD(lhs.value) = 136315906;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpic_StopRecordingActiveInterstitialItemPlayoutTime";
        LOWORD(lhs.flags) = 2112;
        *(_QWORD *)((char *)&lhs.flags + 2) = a2;
        HIWORD(lhs.epoch) = 2048;
        v14 = Seconds;
        v15 = 2048;
        v16 = v9;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v10 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v4 + 480) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(v4 + 496) = *(_QWORD *)(v10 + 16);
  }
}

void fpic_SignalCurrentEvent(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  const void *ValueAtIndex;
  uint64_t v8;
  const __CFString *v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, const __CFString *, const __CFString *);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    goto LABEL_13;
  v6 = Mutable;
  if (!*(_QWORD *)(DerivedStorage + 152))
  {
    CFRelease(Mutable);
LABEL_13:
    v9 = &stru_1E2FD85F8;
LABEL_10:
    CFRelease(v9);
    return;
  }
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600))
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), 0)) != 0)
  {
    v8 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 80))(a1, a2, ValueAtIndex);
    v9 = (const __CFString *)FigPlayerInterstitialEventCopyIdentifier(v8);
  }
  else
  {
    v9 = &stru_1E2FD85F8;
  }
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 152));
  v11 = *(void (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (v11)
    v11(FigBaseObject, CFSTR("currentInterstitialEvent"), v9);
  FigCFDictionarySetValue();
  fpic_PostNotification(DerivedStorage, (uint64_t)CFSTR("fpiCurrentEventDidChange"), a1, v6);
  CFRelease(v6);
  if (v9)
    goto LABEL_10;
}

double fpic_GetItemPlayoutLimit@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  __int128 v6;
  CMTime *v7;
  void (*v8)(uint64_t, CMTime *);
  CMTime v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E18];
  v6 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
  if ((*(_DWORD *)(DerivedStorage + 492) & 0x1D) == 1)
  {
    v7 = (CMTime *)DerivedStorage;
    memset(&v14, 0, sizeof(v14));
    v8 = *(void (**)(uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v8)
    {
      v8(a1, &v14);
      if ((v14.flags & 0x1D) == 1)
      {
        time1 = v14;
        time2 = v7[20];
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
          memset(&time1, 0, sizeof(time1));
          fpic_GetItemEndTime(a1, (uint64_t)&time1);
          v11 = v14;
          v10 = time1;
          CMTimeMinimum(&time2, &v11, &v10);
          *(_QWORD *)&v6 = time2.value;
          *(CMTime *)a2 = time2;
        }
      }
    }
  }
  return *(double *)&v6;
}

void fpic_TimeToGatePrimaryPlaybackAtCurrentEvent(char *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;
  CMTime v17;
  CMTime lhs;
  __int128 v19;
  uint64_t v20;
  _BYTE v21[32];
  uint64_t v22;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CMBaseObjectGetDerivedStorage();
  v6 = v5 + 240;
  if (!*(_BYTE *)(v5 + 272) && !*(_BYTE *)(v5 + 273))
    v6 = v5 + 200;
  v19 = *(_OWORD *)v6;
  v20 = *(_QWORD *)(v6 + 16);
  v7 = *(double *)(v6 + 24);
  v8 = *(unsigned __int8 *)(v6 + 32);
  v9 = *(unsigned __int8 *)(v6 + 33);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (*(_BYTE *)(DerivedStorage + 975))
  {
    if (v8)
    {
      *(_OWORD *)a2 = v19;
      v10 = v20;
    }
    else
    {
      if (v9)
      {
        v11 = *(_OWORD *)(DerivedStorage + 296);
        *(_OWORD *)v21 = *(_OWORD *)(DerivedStorage + 280);
        *(_OWORD *)&v21[16] = v11;
        v22 = *(_QWORD *)(DerivedStorage + 312);
        FigCreateTimeWithDateAndMoment((uint64_t)v21, a2, v7);
        goto LABEL_11;
      }
      v16 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
      v10 = *(_QWORD *)(v16 + 16);
    }
    *(_QWORD *)(a2 + 16) = v10;
  }
  else
  {
    CMTimeMake((CMTime *)a2, 0, 1);
  }
LABEL_11:
  if (*(_BYTE *)(DerivedStorage + 800) || *(_BYTE *)(DerivedStorage + 801))
  {
    v12 = *(_QWORD *)(DerivedStorage + 152);
    v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v13)
      v13(v12, a2);
    v14 = 1;
  }
  else
  {
    v14 = *(_BYTE *)(DerivedStorage + 978);
    if (v14)
    {
      v15 = *(_QWORD *)(DerivedStorage + 152);
      if (v15)
      {
        fpic_GetItemEndTime(v15, (uint64_t)&lhs);
        *(_OWORD *)&v17.value = kPostRollTimeToPausePlaybackBuffer;
        v17.epoch = 0;
        CMTimeAdd((CMTime *)v21, &lhs, &v17);
        v14 = 0;
        *(_OWORD *)a2 = *(_OWORD *)v21;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)&v21[16];
      }
      else
      {
        v14 = 0;
      }
    }
  }
  if (a1)
    *a1 = v14;
}

void fpic_CheckIfPlayheadHasReachedPrimaryPlaybackGate(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  OpaqueCMTimebase *v7;
  OpaqueCMTimebase *v8;
  uint64_t UpTimeNanoseconds;
  CMTime v10;
  CMTime lhs;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 908) & 1) != 0)
  {
    v5 = DerivedStorage;
    lhs = *a2;
    *(_OWORD *)&v10.value = kMomentsAreCloseThreshold;
    v10.epoch = 0;
    CMTimeAdd(&time1, &lhs, &v10);
    lhs = *(CMTime *)(v5 + 896);
    if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0 && !*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 976))
    {
      v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      v7 = (OpaqueCMTimebase *)fpic_CopyCurrentInterstitialItemTimebase(a1, (uint64_t)v6);
      if (v7)
      {
        v8 = v7;
        if (CMTimebaseGetRate(v7) == 0.0)
          UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        else
          UpTimeNanoseconds = 0;
        *(_QWORD *)(v5 + 1000) = UpTimeNanoseconds;
        CFRelease(v8);
      }
      else
      {
        *(_QWORD *)(v5 + 1000) = FigGetUpTimeNanoseconds();
      }
      if (v6)
        CFRelease(v6);
      *(_BYTE *)(v5 + 976) = 1;
    }
  }
}

uint64_t fpic_CopyCurrentInterstitialItemTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t v5;

  v5 = 0;
  result = fpic_GetFirstCurrentItem(a1, a2);
  if (result)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(result);
    v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
    if (v4)
    {
      v4(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &v5);
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

__CFArray *fpic_CopyPerAssetPerEventTrackedObjects(uint64_t a1, CFIndex a2, const void *a3)
{
  __CFArray *Mutable;
  const __CFArray *Count;
  const __CFArray *ValueAtIndex;
  CFIndex v9;
  CFIndex i;
  const __CFDictionary *v11;
  const void *Value;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    Count = *(const __CFArray **)(a1 + 608);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count > a2)
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 608), a2);
      v9 = 0;
      if (!ValueAtIndex)
        goto LABEL_7;
LABEL_6:
      for (i = CFArrayGetCount(ValueAtIndex); v9 < i; i = 0)
      {
        v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(ValueAtIndex, v9);
        Value = CFDictionaryGetValue(v11, a3);
        if (Value)
          CFArrayAppendValue(Mutable, Value);
        ++v9;
        if (ValueAtIndex)
          goto LABEL_6;
LABEL_7:
        ;
      }
    }
  }
  return Mutable;
}

void fpic_UnpauseInterstitialPlayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t PrimaryPlayerAndCopyWrapper;
  const __CFArray *v8;
  void (*v9)(uint64_t, float *);
  float v10;
  uint64_t v11;
  uint64_t ValueAtIndex;
  uint64_t v13;
  uint64_t FigBaseObject;
  void (*v16)(uint64_t, const __CFString *, _QWORD);
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v20;
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, cf);
  v20 = 1.0;
  v8 = *(const __CFArray **)(DerivedStorage + 600);
  if (v8 && CFArrayGetCount(v8) > 0)
  {
    v9 = *(void (**)(uint64_t, float *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v9)
    {
      v9(PrimaryPlayerAndCopyWrapper, &v20);
      v10 = v20;
      if (v20 == 0.0 && *(_BYTE *)(DerivedStorage + 978))
      {
        v10 = *(float *)(DerivedStorage + 712);
        v20 = v10;
      }
      if (v10 == 0.0)
      {
        if (fpic_isAirplayVideoActive(PrimaryPlayerAndCopyWrapper))
        {
          v10 = *(float *)(DerivedStorage + 712);
          v20 = v10;
        }
        else
        {
          v10 = v20;
        }
      }
    }
    else
    {
      v10 = 1.0;
    }
    v11 = CMBaseObjectGetDerivedStorage();
    ValueAtIndex = FigCFArrayGetValueAtIndex();
    if (ValueAtIndex)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 80))(a1, a3, ValueAtIndex);
      if ((FigPlayerInterstitialEventGetRestrictions(v13) & 4) != 0 && v10 >= 1.0)
        v10 = 1.0;
    }
    v20 = v10;
    FigBaseObject = FigPlayerGetFigBaseObject(PrimaryPlayerAndCopyWrapper);
    v16 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v16)
      v16(FigBaseObject, CFSTR("AllowVideoRenderingIfSendingVisualsToNero"), *MEMORY[0x1E0C9AE40]);
    v17 = FigPlayerGetFigBaseObject(a2);
    v18 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v18)
      v18(v17, CFSTR("AllowVideoRenderingIfSendingVisualsToNero"), *MEMORY[0x1E0C9AE50]);
    fpic_SetRateWithReason(a2, 37, v20);
    if (dword_1EE2A33C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (cf[0])
    CFRelease(cf[0]);
}

void fpic_PruneCurrentEventsToQueue(const void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t DerivedStorage;
  CFIndex v8;
  CFIndex PerEventTrackingCount;
  CFIndex v10;
  CFIndex v11;
  __CFString *PerAssetPerEventTrackedObject;
  uint64_t v13;
  uint64_t v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v17;
  const char *v18;
  BOOL v19;
  BOOL v20;
  NSObject *v21;
  unsigned int v22;
  unsigned int v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t FigBaseObject;
  uint64_t (*v28)(uint64_t, const __CFString *, uint64_t, CMTime *);
  int v29;
  const void *v30;
  int v31;
  __CFString **v32;
  const void *ValueAtIndex;
  CFTypeRef v34;
  uint64_t v35;
  CFTypeRef *v36;
  NSObject *v37;
  unsigned int v38;
  unsigned int v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  __int128 v44;
  CMTimeEpoch v45;
  NSObject *v46;
  unsigned int v47;
  unsigned int v48;
  Float64 Seconds;
  unsigned int SnapOptions;
  CFTypeRef v51;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  CFMutableDictionaryRef v56;
  NSObject *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v68;
  BOOL v69;
  NSObject *v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  CMTime *v75;
  CMTime *v76;
  CMTime *v77;
  CMTime *v78;
  uint64_t v80;
  CFIndex Count;
  int v82;
  CFTypeRef v83;
  int v84;
  CFTypeRef *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  CMTime type;
  CMTime v90;
  CFTypeRef cf;
  CFIndex v92;
  CMTime valuePtr;
  _BYTE v94[10];
  _BYTE v95[10];
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  const char *v99;
  CMTime time;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v80 = (*(uint64_t (**)(const void *, uint64_t, _QWORD))(DerivedStorage + 64))(a1, a2, *(_QWORD *)(DerivedStorage + 40));
  v92 = -1;
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  fpic_findEventAndItemIndexForItemOnQueue((uint64_t)a1, a2, a3, &v92, 0);
  if (a3 && v92 == -1)
    return;
  v84 = 0;
  LOBYTE(v82) = 0;
  v88 = 0;
  if (v92 == -1)
    v8 = 0;
  else
    v8 = v92;
  v92 = v8;
  v77 = (CMTime *)(DerivedStorage + 456);
  v78 = (CMTime *)(DerivedStorage + 408);
  v74 = *MEMORY[0x1E0C9AE00];
  v76 = (CMTime *)(DerivedStorage + 384);
  v75 = (CMTime *)(DerivedStorage + 432);
  v86 = a2;
  v87 = DerivedStorage;
  do
  {
    PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, v8);
    if (PerEventTrackingCount < 1)
      continue;
    v10 = PerEventTrackingCount;
    v11 = 0;
    while (1)
    {
      PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v8, v11, CFSTR("PlaybackItem"));
      v13 = CMBaseObjectGetDerivedStorage();
      v14 = 0;
      if (a2 && PerAssetPerEventTrackedObject && PerAssetPerEventTrackedObject != CFSTR("DummyItem"))
        v14 = (*(uint64_t (**)(const void *, uint64_t, __CFString *))(v13 + 72))(a1, a2, PerAssetPerEventTrackedObject);
      if (dword_1EE2A33C8 >= 4)
      {
        LODWORD(v90.value) = 0;
        LOBYTE(type.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        value = v90.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
          v17 = value;
        else
          v17 = value & 0xFFFFFFFE;
        if (v17)
        {
          LODWORD(valuePtr.value) = 136316674;
          v18 = "";
          if (PerAssetPerEventTrackedObject == CFSTR("DummyItem"))
            v18 = "(dummy)";
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
          LOWORD(valuePtr.flags) = 2048;
          *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
          HIWORD(valuePtr.epoch) = 1024;
          *(_DWORD *)v94 = v8;
          *(_WORD *)&v94[4] = 1024;
          *(_DWORD *)&v94[6] = v11;
          *(_WORD *)v95 = 2048;
          *(_QWORD *)&v95[2] = a3;
          v96 = 2048;
          v97 = v14;
          v98 = 2080;
          v99 = v18;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a2 = v86;
        DerivedStorage = v87;
      }
      v19 = v88 || a3 == 0;
      if (v19 && v14)
        break;
      v20 = PerAssetPerEventTrackedObject == CFSTR("DummyItem");
      if (a3)
      {
        if (PerAssetPerEventTrackedObject == CFSTR("DummyItem"))
          goto LABEL_33;
        v20 = v14 == a3;
      }
      if (v20)
      {
LABEL_33:
        if (dword_1EE2A33C8)
        {
          LODWORD(v90.value) = 0;
          LOBYTE(type.value) = 0;
          v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v22 = v90.value;
          if (os_log_type_enabled(v21, type.value))
            v23 = v22;
          else
            v23 = v22 & 0xFFFFFFFE;
          if (v23)
          {
            LODWORD(valuePtr.value) = 136315906;
            *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
            LOWORD(valuePtr.flags) = 2048;
            *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
            HIWORD(valuePtr.epoch) = 2048;
            *(_QWORD *)v94 = v14;
            *(_WORD *)&v94[8] = 2112;
            *(_QWORD *)v95 = PerAssetPerEventTrackedObject;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          a2 = v86;
          DerivedStorage = v87;
        }
        if (v14)
        {
          if (a4)
          {
            v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
            if (v24)
              v24(v80, v14);
          }
          v25 = CMBaseObjectGetDerivedStorage();
          if (*(_QWORD *)(v25 + 152))
          {
            v26 = v25;
            time.value = 0;
            LODWORD(valuePtr.value) = 0;
            FigBaseObject = FigPlaybackItemGetFigBaseObject(v14);
            v28 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
            if (v28)
            {
              v29 = v28(FigBaseObject, CFSTR("Status"), v74, &time);
              v30 = (const void *)time.value;
              if (!v29 && time.value)
              {
                CFNumberGetValue((CFNumberRef)time.value, kCFNumberSInt32Type, &valuePtr);
                v30 = (const void *)time.value;
              }
              if (v30)
                CFRelease(v30);
            }
            if (LODWORD(valuePtr.value))
            {
              v31 = *(_DWORD *)(v26 + 1024) + 1;
              *(_DWORD *)(v26 + 1024) = v31;
              v32 = kFigPlaybackItemProperty_InterstitialPlaybackFailureCount;
            }
            else
            {
              v31 = *(_DWORD *)(v26 + 1020) + 1;
              *(_DWORD *)(v26 + 1020) = v31;
              v32 = kFigPlaybackItemProperty_InterstitialPlaybackSuccessCount;
            }
            fpic_setItemPropertyInt32(*(_QWORD *)(v26 + 152), (uint64_t)*v32, v31);
          }
          fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)a1, v14);
          fpic_UnregisterInterstitialItemNotifications((uint64_t)a1, v14, 0);
          v88 = 1;
        }
        fpic_updateEventLoadedTimeIntervalsOnQueue(a1, a2, v14, 0);
        fpic_RemovePerAssetPerEventTrackedObjects(DerivedStorage, v8, v11--);
        if (!--v10)
        {
          cf = 0;
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), v8);
          cf = ValueAtIndex;
          if (ValueAtIndex)
          {
            v83 = CFRetain(ValueAtIndex);
            v34 = cf;
          }
          else
          {
            v34 = 0;
            v83 = 0;
          }
          v35 = (*(uint64_t (**)(const void *, uint64_t, CFTypeRef))(DerivedStorage + 80))(a1, a2, v34);
          v36 = FigPlayerInterstitialEventCopyAssetListUrl(v35);
          v85 = FigPlayerInterstitialEventCopyIdentifier(v35);
          if (dword_1EE2A33C8)
          {
            LODWORD(v90.value) = 0;
            LOBYTE(type.value) = 0;
            v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v38 = v90.value;
            if (os_log_type_enabled(v37, type.value))
              v39 = v38;
            else
              v39 = v38 & 0xFFFFFFFE;
            if (v39)
            {
              LODWORD(valuePtr.value) = 136315650;
              *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
              LOWORD(valuePtr.flags) = 2048;
              *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
              HIWORD(valuePtr.epoch) = 2112;
              *(_QWORD *)v94 = v35;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            DerivedStorage = v87;
          }
          if (FigPlayerInterstitialEventDidAllItemsFail(v35))
          {
            if (dword_1EE2A33C8)
            {
              LODWORD(v90.value) = 0;
              LOBYTE(type.value) = 0;
              v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v41 = v90.value;
              if (os_log_type_enabled(v40, type.value))
                v42 = v41;
              else
                v42 = v41 & 0xFFFFFFFE;
              if (v42)
              {
                LODWORD(valuePtr.value) = 136315650;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
                LOWORD(valuePtr.flags) = 2048;
                *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
                HIWORD(valuePtr.epoch) = 2112;
                *(_QWORD *)v94 = v85;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              DerivedStorage = v87;
            }
            fpic_UpdateEventLastPlaybackFailed(a1, (uint64_t)cf, 1);
          }
          FigPlayerInterstitialEventResetItemSuccessCount(v35);
          memset(&v90, 0, sizeof(v90));
          FigPlayerInterstitialEventGetResumptionOffset(v35, (uint64_t)&v90);
          if ((v90.flags & 0x1D) != 1)
          {
            valuePtr = *v78;
            type = *v77;
            CMTimeAdd(&time, &valuePtr, &type);
            v90 = time;
          }
          time = v90;
          fpic_AccumulateDuration(v76, &time);
          time = *v78;
          fpic_AccumulateDuration(v75, &time);
          v43 = MEMORY[0x1E0CA2E68];
          v44 = *MEMORY[0x1E0CA2E68];
          *(_OWORD *)&v78->value = *MEMORY[0x1E0CA2E68];
          v45 = *(_QWORD *)(v43 + 16);
          v78->epoch = v45;
          *(_OWORD *)&v77->value = v44;
          v77->epoch = v45;
          if (dword_1EE2A33C8 >= 2)
          {
            LODWORD(type.value) = 0;
            v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            v47 = type.value;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              v48 = v47;
            else
              v48 = v47 & 0xFFFFFFFE;
            if (v48)
            {
              time = *v76;
              Seconds = CMTimeGetSeconds(&time);
              LODWORD(valuePtr.value) = 136315394;
              *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
              LOWORD(valuePtr.flags) = 2048;
              *(Float64 *)((char *)&valuePtr.flags + 2) = Seconds;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            DerivedStorage = v87;
          }
          SnapOptions = FigPlayerInterstitialEventGetSnapOptions(v35);
          fpic_RecordPastCurrentEventDuration((uint64_t)a1, cf);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 600), v8);
          fpic_RemovePerEventTrackedObjects(DerivedStorage, v8);
          fpic_CancelPendingURLRequest((uint64_t)a1, cf);
          v51 = *(CFTypeRef *)(DerivedStorage + 736);
          if (v51 && v51 == cf)
          {
            if (dword_1EE2A33C8)
            {
              LODWORD(type.value) = 0;
              v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v53 = type.value;
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
                v54 = v53;
              else
                v54 = v53 & 0xFFFFFFFE;
              if (v54)
              {
                v55 = *(_DWORD *)(v87 + 724);
                LODWORD(valuePtr.value) = 136315906;
                *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
                LOWORD(valuePtr.flags) = 2048;
                *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
                HIWORD(valuePtr.epoch) = 2112;
                *(_QWORD *)v94 = cf;
                *(_WORD *)&v94[8] = 1024;
                *(_DWORD *)v95 = v55;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              DerivedStorage = v87;
            }
            fpic_ForceCancelInitiatedSeek(a1);
          }
          if (v36)
          {
            FigPlayerInterstitialEventSetAssetListResponse(v35, 0);
            if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t, _QWORD, CFTypeRef *))(DerivedStorage + 104))(a1, v86, v35, 0, &cf))fpic_UpdateEventInAddOrder(a1, v83, cf);
            v56 = fpic_CreateAssetListResponseStatusDidChangeNotificationPayload((uint64_t)cf, 1, 0);
            fpic_PostNotification(DerivedStorage, (uint64_t)CFSTR("fpiAssetListResponseStatusDidChange"), a1, v56);
            if (cf)
              CFRelease(cf);
            if (v56)
              CFRelease(v56);
          }
          CFSetSetValue(*(CFMutableSetRef *)(DerivedStorage + 632), cf);
          if (!--Count)
          {
            if (*(_BYTE *)(DerivedStorage + 232) || *(_BYTE *)(DerivedStorage + 233))
            {
              if (dword_1EE2A33C8)
              {
                LODWORD(type.value) = 0;
                v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                v58 = type.value;
                if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
                  v59 = v58;
                else
                  v59 = v58 & 0xFFFFFFFE;
                if (v59)
                {
                  LODWORD(valuePtr.value) = 136315394;
                  *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
                  LOWORD(valuePtr.flags) = 2048;
                  *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
                  _os_log_send_and_compose_impl();
                }
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                DerivedStorage = v87;
              }
              v60 = CMBaseObjectGetDerivedStorage();
              *(_WORD *)(v60 + 232) = 0;
              *(_WORD *)(v60 + 272) = 0;
              v61 = MEMORY[0x1E0CA2E18];
              v62 = *MEMORY[0x1E0CA2E18];
              *(_OWORD *)(v60 + 408) = *MEMORY[0x1E0CA2E18];
              v63 = *(_QWORD *)(v61 + 16);
              *(_QWORD *)(v60 + 424) = v63;
              *(_OWORD *)(v60 + 456) = v62;
              *(_QWORD *)(v60 + 472) = v63;
              *(_BYTE *)(v60 + 976) = 0;
              *(_OWORD *)(v60 + 576) = v62;
              *(_QWORD *)(v60 + 592) = v63;
              *(_BYTE *)(v60 + 979) = 0;
            }
            if (FigPlayerInterstitialEventIsPostRoll(v35))
              fpic_DeassertPostRoll((uint64_t)a1);
          }
          if (v36)
            CFRelease(v36);
          a2 = v86;
          if (v85)
            CFRelease(v85);
          if (v83)
            CFRelease(v83);
          v10 = 0;
          v82 = (SnapOptions >> 1) & 1;
          --v8;
          v84 = 1;
        }
      }
      if (++v11 >= v10)
        goto LABEL_131;
    }
    if (dword_1EE2A33C8 >= 4)
    {
      LODWORD(v90.value) = 0;
      LOBYTE(type.value) = 0;
      v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v65 = v90.value;
      if (os_log_type_enabled(v64, type.value))
        v66 = v65;
      else
        v66 = v65 & 0xFFFFFFFE;
      if (v66)
      {
        LODWORD(valuePtr.value) = 136315906;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
        LOWORD(valuePtr.flags) = 2048;
        *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
        HIWORD(valuePtr.epoch) = 2048;
        *(_QWORD *)v94 = v14;
        *(_WORD *)&v94[8] = 2048;
        *(_QWORD *)v95 = a3;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      DerivedStorage = v87;
    }
LABEL_131:
    ;
  }
  while (v8++ < v92);
  v68 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 864);
  if (v68)
    v69 = v68 == a3;
  else
    v69 = 0;
  if (v69)
  {
    if (dword_1EE2A33C8)
    {
      LODWORD(v90.value) = 0;
      LOBYTE(type.value) = 0;
      v70 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v71 = v90.value;
      if (os_log_type_enabled(v70, type.value))
        v72 = v71;
      else
        v72 = v71 & 0xFFFFFFFE;
      if (v72)
      {
        v73 = *(_QWORD *)(DerivedStorage + 864);
        LODWORD(valuePtr.value) = 136315650;
        *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)"fpic_PruneCurrentEventsToQueue";
        LOWORD(valuePtr.flags) = 2048;
        *(_QWORD *)((char *)&valuePtr.flags + 2) = a1;
        HIWORD(valuePtr.epoch) = 2048;
        *(_QWORD *)v94 = v73;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_QWORD *)(DerivedStorage + 864) = 0;
  }
  if (v84 && !Count)
  {
    fpic_ApplyResumptionOffset((uint64_t)a1, 0, v82, a2, 0);
    goto LABEL_149;
  }
  if (v84)
LABEL_149:
    fpic_SignalCurrentEvent(a1, a2);
}

void fpic_UnregisterInterstitialItemNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  cf = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (a3
    || (FigBaseObject = FigPlaybackItemGetFigBaseObject(a2),
        (v6 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48)) != 0)
    && (v6(FigBaseObject, CFSTR("Timebase"), *MEMORY[0x1E0C9AE00], &cf), cf))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (cf)
      CFRelease(cf);
  }
}

uint64_t fpic_findEventAndItemIndexForItemOnQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, CFIndex *a5)
{
  uint64_t DerivedStorage;
  CFIndex v11;
  BOOL v12;
  CFIndex PerEventTrackingCount;
  CFIndex v14;
  CFIndex v15;
  BOOL v16;
  __CFString *PerAssetPerEventTrackedObject;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  CFIndex *v23;
  BOOL v24;
  CFIndex Count;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (Count < 1)
  {
    v11 = 0;
    v12 = 0;
    result = 0;
    v15 = -1;
    if (a4)
    {
LABEL_17:
      if (v12)
        v21 = v11;
      else
        v21 = -1;
      *a4 = v21;
    }
  }
  else
  {
    v22 = a4;
    v23 = a5;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v24 = v12;
      PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, v11);
      if (PerEventTrackingCount >= 1)
      {
        v14 = PerEventTrackingCount;
        v15 = 0;
        v16 = 1;
        while (1)
        {
          PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v11, v15, CFSTR("PlaybackItem"));
          v18 = CMBaseObjectGetDerivedStorage();
          v19 = 0;
          if (a2 && PerAssetPerEventTrackedObject && PerAssetPerEventTrackedObject != CFSTR("DummyItem"))
            v19 = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v18 + 72))(a1, a2, PerAssetPerEventTrackedObject);
          if (v19 == a3)
            break;
          v16 = ++v15 < v14;
          if (v14 == v15)
            goto LABEL_13;
        }
        if (v16)
          break;
      }
LABEL_13:
      v12 = ++v11 < Count;
      if (v11 == Count)
      {
        result = 0;
        v15 = -1;
        v11 = Count;
        a4 = v22;
        a5 = v23;
        if (v22)
          goto LABEL_17;
        goto LABEL_21;
      }
    }
    result = 1;
    a4 = v22;
    a5 = v23;
    v12 = v24;
    if (v22)
      goto LABEL_17;
  }
LABEL_21:
  if (a5)
    *a5 = v15;
  return result;
}

void fpic_updateEventLoadedTimeIntervalsOnQueue(const void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  CFIndex v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef *v12;
  CFIndex PerEventTrackingCount;
  CFIndex v14;
  __CFArray *v15;
  const __CFAllocator *v16;
  const __CFArray *PerAssetPerEventTrackedObject;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex i;
  const __CFDictionary *v22;
  __CFDictionary *Mutable;
  const __CFDictionary *Value;
  const __CFDictionary *v25;
  CFDictionaryRef v26;
  CFDictionaryRef v27;
  uint64_t v28;
  CFTypeRef *v29;
  CFIndex v30;
  CFIndex v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ValueAtIndex;
  CFIndex v35;
  CFIndex v36;
  CFIndex v37;
  CMTime v38;
  CMTime time;
  CMTime v40;
  CMTime lhs;
  CMTime rhs;
  CMTime v43;
  CMTime v44;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600)) >= 1)
  {
    v36 = 0;
    v37 = 0;
    if (fpic_findEventAndItemIndexForItemOnQueue((uint64_t)a1, a2, a3, &v37, &v36))
    {
      fpic_SetPerAssetPerEventTrackedObject(DerivedStorage, v37, v36, CFSTR("LoadedTimeInterval"), a4);
      v9 = v37;
      v44 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      v10 = CMBaseObjectGetDerivedStorage();
      ValueAtIndex = FigCFArrayGetValueAtIndex();
      v11 = (*(uint64_t (**)(const void *, uint64_t))(v10 + 80))(a1, a2);
      v12 = FigPlayerInterstitialEventCopyLoadedTimeIntervals(v11);
      PerEventTrackingCount = fpic_GetPerEventTrackingCount(v10, v9);
      if (FigPlayerInterstitialEventGetTimelineOccupancy(v11) == 1)
      {
        v28 = v11;
        v29 = v12;
        if (PerEventTrackingCount < 1)
        {
          v15 = 0;
        }
        else
        {
          v14 = 0;
          v15 = 0;
          v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v32 = a2;
          v33 = (uint64_t)a1;
          v30 = PerEventTrackingCount;
          v31 = v9;
          do
          {
            PerAssetPerEventTrackedObject = (const __CFArray *)fpic_GetPerAssetPerEventTrackedObject(v10, v9, v14, CFSTR("LoadedTimeInterval"));
            v35 = v14;
            if (PerAssetPerEventTrackedObject)
            {
              v18 = PerAssetPerEventTrackedObject;
              Count = CFArrayGetCount(PerAssetPerEventTrackedObject);
              if (Count >= 1)
              {
                v20 = Count;
                for (i = 0; i != v20; ++i)
                {
                  v22 = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, i);
                  Mutable = CFDictionaryCreateMutable(v16, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  memset(&v43, 0, sizeof(v43));
                  Value = (const __CFDictionary *)CFDictionaryGetValue(v22, CFSTR("startTime"));
                  CMTimeMakeFromDictionary(&rhs, Value);
                  lhs = v44;
                  CMTimeAdd(&v43, &lhs, &rhs);
                  memset(&lhs, 0, sizeof(lhs));
                  v25 = (const __CFDictionary *)CFDictionaryGetValue(v22, CFSTR("endTime"));
                  CMTimeMakeFromDictionary(&v40, v25);
                  time = v44;
                  CMTimeAdd(&lhs, &time, &v40);
                  time = v43;
                  v26 = CMTimeCopyAsDictionary(&time, v16);
                  time = lhs;
                  v27 = CMTimeCopyAsDictionary(&time, v16);
                  CFDictionarySetValue(Mutable, CFSTR("startTime"), v26);
                  CFDictionarySetValue(Mutable, CFSTR("endTime"), v27);
                  if (!v15)
                    v15 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
                  CFArrayAppendValue(v15, Mutable);
                  if (v26)
                    CFRelease(v26);
                  if (v27)
                    CFRelease(v27);
                  if (Mutable)
                    CFRelease(Mutable);
                }
              }
            }
            a1 = (const void *)v33;
            v9 = v31;
            fpic_GetEventItemDuration(v33, v32, ValueAtIndex, v31, v35, (uint64_t)&v38);
            v43 = v44;
            CMTimeAdd(&v44, &v43, &v38);
            v14 = v35 + 1;
          }
          while (v35 + 1 != v30);
        }
        v12 = v29;
        if (!FigCFEqual())
        {
          FigPlayerInterstitialEventSetLoadedTimeIntervals(v28, v15);
          fpic_PostNotification(v10, (uint64_t)CFSTR("fpiResolvePropertiesChange"), a1, 0);
        }
        if (!v29)
          goto LABEL_25;
      }
      else
      {
        v15 = 0;
        if (!v12)
        {
LABEL_25:
          if (v15)
            CFRelease(v15);
          return;
        }
      }
      CFRelease(v12);
      goto LABEL_25;
    }
  }
}

uint64_t fpic_ApplyResumptionOffset(uint64_t a1, int a2, unsigned int a3, uint64_t a4, char *a5)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v11;
  char v12;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t FigBaseObject;
  void (*v19)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  BOOL v20;
  int v21;
  uint64_t v22;
  int v23;
  CMTimeEpoch epoch;
  __int128 v25;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v28;
  Float64 Seconds;
  uint64_t v30;
  int v31;
  Float64 v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  CMTime time2;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  __n128 v44;
  CMTimeEpoch v45;
  CMTime v46;
  CMTime v47;
  CMTime rhs;
  Float64 v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  Float64 v57;
  CMTime lhs;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v38 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v47.value = *MEMORY[0x1E0CA2E18];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v47.epoch = v11;
  memset(&v46, 0, sizeof(v46));
  fpic_CurrentResumptionOffset(a1, a2, a4, &v47, &v46);
  if (*(_QWORD *)(DerivedStorage + 152) && (v47.flags & 1) != 0)
  {
    lhs = v47;
    FigCFSetPropertyToTime();
  }
  if ((v46.flags & 1) == 0)
    goto LABEL_37;
  if (!*(_BYTE *)(DerivedStorage + 352))
  {
    v12 = *(_BYTE *)(DerivedStorage + 353);
    if (!v12)
    {
LABEL_38:
      result = 0;
      if (!a5)
        return result;
      goto LABEL_39;
    }
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (!a3 && Count >= 1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), Count - 1);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a4, ValueAtIndex);
    a3 = (FigPlayerInterstitialEventGetSnapOptions(v15) >> 1) & 1;
  }
  if (*(_BYTE *)(DerivedStorage + 978) && *(_BYTE *)(DerivedStorage + 977))
  {
    a3 = 0;
    v46 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  }
  if (!*(_QWORD *)(DerivedStorage + 152))
  {
    result = FigSignalErrorAt();
    goto LABEL_46;
  }
  v44 = 0uLL;
  v45 = 0;
  fpic_GetCurrentDepartureTime(&v44);
  memset(&v43, 0, sizeof(v43));
  *(__n128 *)&lhs.value = v44;
  lhs.epoch = v45;
  rhs = v46;
  CMTimeAdd(&v43, &lhs, &rhs);
  if (a2)
  {
    v16 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v16 + 974))
    {
      if (!*(_BYTE *)(v16 + 973) && !*(_BYTE *)(DerivedStorage + 978) && !*(_BYTE *)(DerivedStorage + 977))
      {
        memset(&lhs, 0, sizeof(lhs));
        fpic_GetItemEndTime(*(_QWORD *)(DerivedStorage + 152), (uint64_t)&v42);
        CMTimeMake(&v41, 1, 1);
        CMTimeSubtract(&lhs, &v42, &v41);
        rhs = v43;
        time2 = lhs;
        if (CMTimeCompare(&rhs, &time2) >= 1)
          v43 = lhs;
      }
    }
  }
  lhs = *(CMTime *)(DerivedStorage + 504);
  rhs = v43;
  if (!CMTimeCompare(&lhs, &rhs) || (lhs = *(CMTime *)(DerivedStorage + 528), rhs = v43, !CMTimeCompare(&lhs, &rhs)))
  {
LABEL_37:
    v12 = 0;
    goto LABEL_38;
  }
  v37 = a5;
  v17 = *MEMORY[0x1E0C9AE40];
  v39 = *MEMORY[0x1E0C9AE40];
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 152));
  v19 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (v19)
  {
    v19(FigBaseObject, CFSTR("IsPlayingIFrameOnly"), *MEMORY[0x1E0C9AE00], &v39);
    v17 = v39;
  }
  if (a3)
    v20 = 1;
  else
    v20 = v17 == *MEMORY[0x1E0C9AE50];
  v21 = v20;
  v36 = v21;
  v22 = CMBaseObjectGetDerivedStorage();
  v23 = *(_DWORD *)(v22 + 720);
  *(_DWORD *)(v22 + 720) = FPSupport_IncrementSeekID(v23);
  *(_DWORD *)(DerivedStorage + 716) = v23;
  epoch = v43.epoch;
  *(_QWORD *)(DerivedStorage + 520) = v43.epoch;
  v25 = *(_OWORD *)&v43.value;
  *(_OWORD *)(DerivedStorage + 504) = *(_OWORD *)&v43.value;
  *(_QWORD *)(DerivedStorage + 544) = epoch;
  *(_OWORD *)(DerivedStorage + 528) = v25;
  fpic_passImageQueueGaugeBetweenPlayers(a1, *(_QWORD *)(DerivedStorage + 152), a4);
  if (dword_1EE2A33C8)
  {
    LODWORD(time2.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    value = time2.value;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v28 = value;
    else
      v28 = value & 0xFFFFFFFE;
    if (v28)
    {
      lhs = v46;
      Seconds = CMTimeGetSeconds(&lhs);
      v30 = *(_QWORD *)(DerivedStorage + 152);
      v31 = *(_DWORD *)(DerivedStorage + 716);
      lhs = v43;
      v32 = CMTimeGetSeconds(&lhs);
      LODWORD(rhs.value) = 136316674;
      *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"fpic_ApplyResumptionOffset";
      LOWORD(rhs.flags) = 2048;
      *(_QWORD *)((char *)&rhs.flags + 2) = a1;
      HIWORD(rhs.epoch) = 2048;
      v49 = Seconds;
      v50 = 2048;
      v51 = v30;
      v52 = 1024;
      v53 = v31;
      v54 = 1024;
      v55 = a3;
      v56 = 2048;
      v57 = v32;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v36)
    v34 = 502;
  else
    v34 = 501;
  v35 = *(_QWORD *)(DerivedStorage + 152);
  lhs = v43;
  *(_OWORD *)&rhs.value = v38;
  rhs.epoch = v11;
  *(_OWORD *)&time2.value = v38;
  time2.epoch = v11;
  result = FPSupport_SetCurrentTimeWithRangeIDAndReason(v35, (__int128 *)&lhs.value, v34, (__int128 *)&rhs.value, (__int128 *)&time2.value);
  a5 = v37;
  if (!(_DWORD)result)
  {
    v12 = 1;
    goto LABEL_38;
  }
LABEL_46:
  v12 = 0;
  if (a5)
LABEL_39:
    *a5 = v12;
  return result;
}

double fpic_CurrentResumptionOffset@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, CMTime *a4@<X3>, CMTime *a5@<X8>)
{
  uint64_t DerivedStorage;
  __int128 *v9;
  CFIndex Count;
  __int128 v11;
  CFIndex v12;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v15;
  CMTimeEpoch epoch;
  _BYTE v20[24];
  CMTime rhs;
  CMTime lhs;
  CMTime v23;
  __int128 v24;
  CMTimeEpoch v25;
  CMTime v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v26, 0, sizeof(v26));
  *(_OWORD *)&a5->value = *(_OWORD *)(DerivedStorage + 384);
  v9 = (__int128 *)MEMORY[0x1E0CA2E68];
  a5->epoch = *(_QWORD *)(DerivedStorage + 400);
  v24 = *v9;
  v25 = *((_QWORD *)v9 + 2);
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  v11 = *(_OWORD *)(DerivedStorage + 432);
  *(_OWORD *)&v23.value = v11;
  v23.epoch = *(_QWORD *)(DerivedStorage + 448);
  if (Count >= 1)
  {
    v12 = Count;
    for (i = 0; v12 != i; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), i);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(DerivedStorage + 80))(a1, a3, ValueAtIndex);
      if (i)
      {
        fpic_GetProjectedDuration(a1, (uint64_t)ValueAtIndex, i, a3, &lhs);
        v26 = lhs;
        epoch = lhs.epoch;
      }
      else
      {
        if (a2 || (*(_DWORD *)(DerivedStorage + 492) & 0x1D) != 1)
        {
          fpic_GetProjectedDuration(a1, (uint64_t)ValueAtIndex, 0, a3, &lhs);
          v26 = lhs;
          fpic_AccumulateDuration(&v23, &lhs);
          lhs = v26;
          rhs = *(CMTime *)(DerivedStorage + 456);
          CMTimeAdd(&v26, &lhs, &rhs);
          goto LABEL_9;
        }
        fpic_GetCurrentlyPlayingEventPlayoutTime(a1, (uint64_t)&v24, a3, &v26);
        *(_OWORD *)&lhs.value = v24;
        epoch = v25;
      }
      lhs.epoch = epoch;
      fpic_AccumulateDuration(&v23, &lhs);
LABEL_9:
      FigPlayerInterstitialEventGetResumptionOffset(v15, (uint64_t)v20);
      if ((v20[12] & 0x1D) == 1)
      {
        FigPlayerInterstitialEventGetResumptionOffset(v15, (uint64_t)&lhs);
        v26 = lhs;
      }
      lhs = v26;
      *(_QWORD *)&v11 = fpic_AccumulateDuration(a5, &lhs).n128_u64[0];
    }
  }
  if (a4)
  {
    *(_QWORD *)&v11 = v23.value;
    *a4 = v23;
  }
  return *(double *)&v11;
}

void fpic_passImageQueueGaugeBetweenPlayers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  CMTimeEpoch v12;
  uint64_t LastCurrentItem;
  uint64_t FigBaseObject;
  unsigned int (*v15)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v16;
  uint64_t v17;
  void (*v18)(uint64_t, const __CFString *, CFTypeRef);
  CMTime v19;
  CMTime v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  CFTypeRef v28;
  _BYTE time1[32];
  uint64_t v30;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = 0;
  v27 = 0uLL;
  v7 = *(_QWORD *)(DerivedStorage + 152);
  if (!v7)
    goto LABEL_20;
  if (v7 == a2)
  {
    LastCurrentItem = fpic_GetLastCurrentItem(a1, a3);
    if (!a2)
      goto LABEL_20;
    goto LABEL_15;
  }
  v8 = DerivedStorage;
  fpic_findEventAndItemIndexForItemOnQueue(a1, a3, a2, (uint64_t *)&v27 + 1, (CFIndex *)&v27);
  ValueAtIndex = FigCFArrayGetValueAtIndex();
  v10 = fpic_UnwrapEvent(a1, ValueAtIndex);
  if (v27 != 0)
    goto LABEL_20;
  v11 = v10;
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  fpic_GetEffectiveCurrentItemMoment(*(_QWORD *)(v8 + 152), (uint64_t)&v24);
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  fpic_EventDateTimeMoment(v11, (uint64_t)&v21);
  memset(&v20, 0, sizeof(v20));
  if ((_BYTE)v23)
  {
    *(_OWORD *)&v20.value = v21;
    v12 = v22;
  }
  else
  {
    if (BYTE1(v23))
    {
      *(_OWORD *)time1 = v24;
      *(_OWORD *)&time1[16] = v25;
      v30 = v26;
      FigCreateTimeWithDateAndMoment((uint64_t)time1, (uint64_t)&v20, *((double *)&v22 + 1));
      goto LABEL_11;
    }
    *(_OWORD *)&v20.value = *MEMORY[0x1E0CA2E18];
    v12 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v20.epoch = v12;
LABEL_11:
  *(_OWORD *)time1 = v24;
  *(_QWORD *)&time1[16] = v25;
  v19 = v20;
  if ((CMTimeCompare((CMTime *)time1, &v19) & 0x80000000) == 0
    || FigPlayerInterstitialEventIsPreRoll(v11)
    || *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
  {
    LastCurrentItem = 0;
    if (!a2)
      goto LABEL_20;
  }
  else
  {
    LastCurrentItem = *(_QWORD *)(v8 + 152);
    if (!a2)
      goto LABEL_20;
  }
LABEL_15:
  if (LastCurrentItem)
  {
    FigBaseObject = FigPlaybackItemGetFigBaseObject(LastCurrentItem);
    v15 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (v15)
    {
      if (!v15(FigBaseObject, CFSTR("ImageQueueGauge"), *MEMORY[0x1E0C9AE00], &v28))
      {
        v16 = v28;
        v17 = FigPlaybackItemGetFigBaseObject(a2);
        v18 = *(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
        if (v18)
          v18(v17, CFSTR("PriorImageQueueGauge"), v16);
      }
    }
  }
LABEL_20:
  if (v28)
    CFRelease(v28);
}

double fpic_GetCurrentlyPlayingEventPlayoutTime@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CMTime *a4@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t FirstCurrentItem;
  double result;
  CMTime v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = MEMORY[0x1E0CA2E68];
  *(_OWORD *)&a4->value = *MEMORY[0x1E0CA2E68];
  a4->epoch = *(_QWORD *)(v9 + 16);
  FirstCurrentItem = fpic_GetFirstCurrentItem(a1, a3);
  if (FirstCurrentItem)
  {
    fpic_GetItemPlayoutLimit(FirstCurrentItem, (uint64_t)&v12);
    *a4 = v12;
    v12 = *(CMTime *)(DerivedStorage + 408);
    fpic_AccumulateDuration(a4, &v12);
    if (a2)
    {
      *(_OWORD *)a2 = *(_OWORD *)&a4->value;
      *(_QWORD *)(a2 + 16) = a4->epoch;
    }
    v12 = *(CMTime *)(DerivedStorage + 456);
    *(_QWORD *)&result = fpic_AccumulateDuration(a4, &v12).n128_u64[0];
  }
  return result;
}

uint64_t fpic_GetLastCurrentItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFIndex Count;
  __CFArray *v6;
  const __CFArray *v7;
  CFIndex v8;
  const __CFString *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (Count < 1)
    return 0;
  v6 = fpic_CopyPerAssetPerEventTrackedObjects(DerivedStorage, Count - 1, CFSTR("PlaybackItem"));
  if (!v6)
    return 0;
  v7 = v6;
  if (CFArrayGetCount(v6) < 1)
  {
    v11 = 0;
  }
  else
  {
    v8 = CFArrayGetCount(v7);
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, v8 - 1);
    v10 = CMBaseObjectGetDerivedStorage();
    v11 = 0;
    if (a2)
    {
      if (ValueAtIndex)
        v12 = ValueAtIndex == CFSTR("DummyItem");
      else
        v12 = 1;
      if (!v12)
        v11 = (*(uint64_t (**)(uint64_t, uint64_t, const __CFString *))(v10 + 72))(a1, a2, ValueAtIndex);
    }
  }
  CFRelease(v7);
  return v11;
}

void fpic_FinishInitiatedSeek(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  CFAllocatorRef *v8;
  const void *v9;
  uint64_t v10;
  uint64_t FigBaseObject;
  unsigned int (*v12)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v14;
  unsigned int v15;
  CFMutableDictionaryRef Mutable;
  NSObject *v17;
  unsigned int v18;
  unsigned int v19;
  const char *v20;
  int v21;
  CFTypeRef cf;
  int v23;
  const char *v24;
  __int16 v25;
  const void *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
    v5 = CFSTR("fpiInitiatedSeekWasCanceled");
  else
    v5 = CFSTR("fpiInitiatedSeekDidComplete");
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
  {
    v6 = CMBaseObjectGetDerivedStorage();
    v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    cf = 0;
    v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v7)
    {
      v9 = (const void *)v7;
      v10 = (*(uint64_t (**)(const void *, uint64_t, _QWORD))(v6 + 64))(a1, v7, *(_QWORD *)(v6 + 40));
      if (v10)
      {
        FigBaseObject = FigPlayerGetFigBaseObject(v10);
        v12 = *(unsigned int (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v12)
        {
          if (!v12(FigBaseObject, CFSTR("ActionAtEnd"), *v8, &cf) && FigCFEqual())
          {
            if (dword_1EE2A33C8)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            fpic_SetInterstitialActionAtEnd((uint64_t)a1, (uint64_t)v9, (uint64_t)CFSTR("StopAtEndOfQueue"));
          }
        }
      }
      CFRelease(v9);
      if (cf)
        CFRelease(cf);
    }
    else
    {
      FigSignalErrorAt();
    }
    v14 = fpic_UnwrapEvent((uint64_t)a1, *(_QWORD *)(DerivedStorage + 736));
    v15 = FigPlayerInterstitialEventIsPostRoll(v14);
    if (!a2 && v15)
      *(_BYTE *)(DerivedStorage + 977) = 1;
    CMBaseObjectGetDerivedStorage();
    Mutable = CFDictionaryCreateMutable(*v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      if (FigCFDictionarySetInt32())
      {
LABEL_30:
        CFRelease(Mutable);
        return;
      }
    }
    else if (FigSignalErrorAt())
    {
      return;
    }
    if (dword_1EE2A33C8)
    {
      LODWORD(cf) = 0;
      v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v18 = cf;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if (v19)
      {
        v20 = "was canceled";
        v21 = *(_DWORD *)(DerivedStorage + 724);
        v24 = "fpic_FinishInitiatedSeek";
        v25 = 2048;
        v23 = 136315906;
        if (!a2)
          v20 = "did complete";
        v26 = a1;
        v27 = 2080;
        v28 = v20;
        v29 = 1024;
        v30 = v21;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpic_PostNotification(DerivedStorage, (uint64_t)v5, a1, Mutable);
    fpic_clearIntentionToSeekIntoEventState();
    if (Mutable)
      goto LABEL_30;
  }
}

double fpic_clearIntendedCurrentItemMoment()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  __int128 v2;
  CFStringRef MomentDesc;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double result;
  _OWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage + 768;
  if (*(_BYTE *)(DerivedStorage + 800) || *(_BYTE *)(DerivedStorage + 801))
  {
    v2 = *(_OWORD *)(DerivedStorage + 784);
    v6[0] = *(_OWORD *)v1;
    v6[1] = v2;
    v7 = *(_QWORD *)(DerivedStorage + 800);
    MomentDesc = fpic_CreateMomentDesc((uint64_t)v6);
    if (dword_1EE2A33C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (MomentDesc)
      CFRelease(MomentDesc);
  }
  *(_QWORD *)(v1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  return result;
}

__n128 fpic_clearIntentionToSeekIntoEventState()
{
  uint64_t DerivedStorage;
  BOOL v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v3;
  __n128 result;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(CMBaseObjectGetDerivedStorage() + 724))
    v1 = dword_1EE2A33C8 == 0;
  else
    v1 = 1;
  if (!v1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(_DWORD *)(DerivedStorage + 724) = 0;
  *(_QWORD *)(DerivedStorage + 736) = 0;
  v3 = MEMORY[0x1E0CA2E18];
  result = *(__n128 *)MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 744) = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(DerivedStorage + 760) = v5;
  *(__n128 *)(DerivedStorage + 808) = result;
  *(_QWORD *)(DerivedStorage + 824) = v5;
  *(__n128 *)(DerivedStorage + 832) = result;
  *(_QWORD *)(DerivedStorage + 848) = v5;
  *(_DWORD *)(DerivedStorage + 856) = 0;
  *(_WORD *)(DerivedStorage + 860) = 0;
  return result;
}

void fpic_removeAllCurrentEvents(const void *a1, __CFArray *a2, int a3)
{
  uint64_t DerivedStorage;
  const __CFArray *v7;
  CFIndex Count;
  unint64_t v9;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(const __CFArray **)(DerivedStorage + 600);
  if (!v7)
  {
    if (a2)
      return;
LABEL_9:
    FigSignalErrorAt();
    return;
  }
  Count = CFArrayGetCount(v7);
  if (!a2)
    goto LABEL_9;
  if (Count >= 1)
  {
    v9 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), v9 - 2);
      fpic_RemoveEvent(a1, ValueAtIndex, a2, 0, a3);
      --v9;
    }
    while (v9 > 1);
  }
}

uint64_t fpic_updateIntegratedTimelineOffsetTimesOnItemForEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef *v8;
  CFIndex FirstIndexOfValue;
  CFIndex PerEventTrackingCount;
  CFIndex v11;
  const __CFString *v12;
  __CFString *PerAssetPerEventTrackedObject;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  CFArrayRef v20;
  uint64_t FigBaseObject;
  uint64_t (*v22)(uint64_t, const __CFString *, CFArrayRef);
  uint64_t v23;
  uint64_t v24;
  CFTypeRef *cf;
  const __CFAllocator *allocator;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  CMTimeRange start;
  CMTimeRange rhs;
  __int128 v34;
  CMTimeEpoch epoch;
  CMTimeMapping lhs;
  CMTime duration;
  CMTimeRange v38;
  CMTimeRange v39;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = fpic_UnwrapEvent(a1, a3);
  v34 = *MEMORY[0x1E0CA2E18];
  epoch = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v28 = v7;
  v8 = FigPlayerInterstitialEventCopyIdentifier(v7);
  CMBaseObjectGetDerivedStorage();
  FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
  PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, FirstIndexOfValue);
  cf = v8;
  FigCFDictionaryGetCMTimeIfPresent();
  if ((BYTE12(v34) & 1) != 0)
  {
    if (!FirstIndexOfValue)
    {
      memset(&v38, 0, 24);
      *(_OWORD *)&lhs.source.start.value = *(_OWORD *)(DerivedStorage + 408);
      lhs.source.start.epoch = *(_QWORD *)(DerivedStorage + 424);
      *(_OWORD *)&rhs.start.value = *(_OWORD *)(DerivedStorage + 456);
      rhs.start.epoch = *(_QWORD *)(DerivedStorage + 472);
      CMTimeAdd(&v38.start, &lhs.source.start, &rhs.start);
      *(_OWORD *)&rhs.start.value = v34;
      rhs.start.epoch = epoch;
      *(_OWORD *)&start.start.value = *(_OWORD *)&v38.start.value;
      start.start.epoch = v38.start.epoch;
      CMTimeAdd(&lhs.source.start, &rhs.start, &start.start);
      v34 = *(_OWORD *)&lhs.source.start.value;
      epoch = lhs.source.start.epoch;
    }
    if (PerEventTrackingCount >= 1)
    {
      v11 = 0;
      allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v12 = CFSTR("PlaybackItem");
      do
      {
        PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, FirstIndexOfValue, v11, v12);
        v14 = CMBaseObjectGetDerivedStorage();
        if (!a2)
          goto LABEL_26;
        if (!PerAssetPerEventTrackedObject)
          goto LABEL_26;
        if (PerAssetPerEventTrackedObject == CFSTR("DummyItem"))
          goto LABEL_26;
        v15 = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v14 + 72))(a1, a2, PerAssetPerEventTrackedObject);
        if (!v15)
          goto LABEL_26;
        v16 = v15;
        v30 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
        v31 = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)&rhs.start.value = *MEMORY[0x1E0CA2E40];
        *(_OWORD *)&rhs.start.epoch = v30;
        v29 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
        *(_OWORD *)&rhs.duration.timescale = v29;
        if (FigPlayerInterstitialEventGetTimelineOccupancy(v28))
        {
          memset(&lhs, 0, 24);
          fpic_GetEventItemDuration(a1, a2, a3, FirstIndexOfValue, v11, (uint64_t)&lhs);
          if ((lhs.source.start.flags & 0x1D) == 1)
          {
            *(_OWORD *)&start.start.value = v34;
            start.start.epoch = epoch;
            duration = lhs.source.start;
            CMTimeRangeMake(&v38, &start.start, &duration);
            rhs = v38;
            *(_OWORD *)&start.start.value = v34;
            start.start.epoch = epoch;
            duration = lhs.source.start;
            CMTimeAdd(&v38.start, &start.start, &duration);
            v34 = *(_OWORD *)&v38.start.value;
            epoch = v38.start.epoch;
          }
          v17 = MEMORY[0x1E0CA2E68];
        }
        else
        {
          *(_OWORD *)&v38.start.value = v34;
          v38.start.epoch = epoch;
          v18 = MEMORY[0x1E0CA2E68];
          *(_OWORD *)&lhs.source.start.value = *MEMORY[0x1E0CA2E68];
          lhs.source.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
          CMTimeRangeMake(&rhs, &v38.start, &lhs.source.start);
          v17 = v18;
        }
        v19 = v12;
        start = rhs;
        *(_OWORD *)&v38.start.value = v31;
        *(_OWORD *)&v38.start.epoch = v30;
        *(_OWORD *)&v38.duration.timescale = v29;
        v39 = rhs;
        *(_OWORD *)&lhs.source.start.value = *(_OWORD *)v17;
        lhs.source.start.epoch = *(_QWORD *)(v17 + 16);
        duration = rhs.duration;
        CMTimeRangeMake(&v38, &lhs.source.start, &duration);
        lhs.source = v38;
        lhs.target = v39;
        lhs.source.start.value = (CMTimeValue)CMTimeMappingCopyAsDictionary(&lhs, allocator);
        if (lhs.source.start.value)
        {
          v20 = CFArrayCreate(allocator, (const void **)&lhs, 1, MEMORY[0x1E0C9B378]);
          if (!v20)
          {
            v23 = FigSignalErrorAt();
            goto LABEL_19;
          }
          FigBaseObject = FigPlaybackItemGetFigBaseObject(v16);
          v22 = *(uint64_t (**)(uint64_t, const __CFString *, CFArrayRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 56);
          if (v22)
          {
            v23 = v22(FigBaseObject, CFSTR("IntegratedTimelineTimeOffsets"), v20);
LABEL_19:
            v24 = v23;
            goto LABEL_21;
          }
          v24 = 4294954514;
        }
        else
        {
          v24 = FigSignalErrorAt();
          v20 = 0;
        }
LABEL_21:
        if (lhs.source.start.value)
          CFRelease((CFTypeRef)lhs.source.start.value);
        if (v20)
          CFRelease(v20);
        v12 = v19;
        if ((_DWORD)v24)
          goto LABEL_31;
LABEL_26:
        ++v11;
      }
      while (PerEventTrackingCount != v11);
    }
  }
  v24 = 0;
LABEL_31:
  if (cf)
    CFRelease(cf);
  return v24;
}

uint64_t fpic_CopyEvents(uint64_t a1, _QWORD *a2)
{
  NSObject **DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v5 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_CopyEvents_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  block[5] = a2;
  block[6] = DerivedStorage;
  dispatch_sync(v5, block);
  if (*a2)
    return 0;
  else
    return 4294954510;
}

uint64_t fpic_CopyCurrentEvent(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __fpic_CopyCurrentEvent_block_invoke;
  v5[3] = &unk_1E2F87F08;
  v5[4] = &v6;
  v5[5] = a1;
  dispatch_sync(v2, v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t fpic_SetEvents(const void *a1, const __CFArray *a2)
{
  if (a1)
    return fpic_SetEventsInternal(a1, a2, 1);
  else
    return FigSignalErrorAt();
}

uint64_t fpic_RemoveEvents(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject **v5;
  const void *v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  __int128 v11;
  uint64_t v12;
  _QWORD block[12];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  CFMutableArrayRef Mutable;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3810000000;
  v25 = &unk_19339E166;
  v26 = *MEMORY[0x1E0CA2E18];
  v27 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  if (a1)
  {
    v5 = (NSObject **)DerivedStorage;
    v14 = 0;
    v15 = &v14;
    v16 = 0x2020000000;
    Mutable = 0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (v15[3] && (v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
    {
      v7 = *v5;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __fpic_RemoveEvents_block_invoke;
      block[3] = &unk_1E2FB0780;
      block[8] = a2;
      block[9] = v5;
      block[4] = &v28;
      block[5] = &v14;
      block[10] = a1;
      block[11] = v6;
      block[6] = &v18;
      block[7] = &v22;
      dispatch_sync(v7, block);
      fpic_DequeueItemsFromInterstitialPlayer((uint64_t)a1, (const __CFArray *)v15[3], (uint64_t)v6);
      if (*((_BYTE *)v19 + 24))
      {
        v11 = *((_OWORD *)v23 + 2);
        v12 = v23[6];
        fpic_cancelCurrentEventPlayback((uint64_t)a1, &v11, 1);
      }
      if (v29[3] >= 1)
        fpic_PostNotification((uint64_t)v5, (uint64_t)CFSTR("fpiEventsDidChange"), a1, 0);
      v8 = fpic_ServiceCurrentEvent((uint64_t)a1, MEMORY[0x1E0CA2E18]);
      CFRelease(v6);
    }
    else
    {
      v8 = FigSignalErrorAt();
    }
    v9 = (const void *)v15[3];
    if (v9)
      CFRelease(v9);
    _Block_object_dispose(&v14, 8);
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v28, 8);
  return v8;
}

void sub_192F31B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Block_object_dispose((const void *)(v28 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_CancelCurrentEventPlayback(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  fpic_cancelCurrentEventPlayback(a1, &v4, 0);
  return fpic_ServiceCurrentEvent(a1, MEMORY[0x1E0CA2E18]);
}

uint64_t fpic_SetRemoteEvents(const void *a1, const __CFArray *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFMutableArrayRef Mutable;
  __CFArray *v9;
  uint64_t v10;
  const void *v11;
  CFIndex Count;
  CFIndex v13;
  CFIndex v14;
  const void *ValueAtIndex;
  uint64_t v16;
  uint64_t v17;
  void *value[17];

  value[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
    return FigSignalErrorAt();
  v5 = DerivedStorage;
  if (dword_1EE2A33C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v9 = Mutable;
  v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v10)
  {
    v11 = (const void *)v10;
    if (a2 && (Count = CFArrayGetCount(a2), Count >= 1))
    {
      v13 = Count;
      v14 = 0;
      while (1)
      {
        value[0] = 0;
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v14);
        v16 = (*(uint64_t (**)(const void *, const void *, const void *, _QWORD, void **))(v5 + 104))(a1, v11, ValueAtIndex, 0, value);
        if ((_DWORD)v16)
          break;
        CFArrayAppendValue(v9, value[0]);
        if (value[0])
          CFRelease(value[0]);
        if (v13 == ++v14)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      v16 = fpic_SetEventsInternal(a1, v9, 0);
    }
    v17 = v16;
    CFRelease(v11);
  }
  else
  {
    v17 = FigSignalErrorAt();
  }
  CFRelease(v9);
  return v17;
}

void fpic_WrappedPlayerDidChange(const void *a1)
{
  uint64_t DerivedStorage;
  NSObject *v3;
  _QWORD block[5];

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFRetain(a1);
    v3 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpic_WrappedPlayerDidChange_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_async(v3, block);
  }
}

void fpic_SetActionAtEnd(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  NSObject *v4;
  _QWORD v5[6];

  if (a1)
  {
    DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
    v4 = *DerivedStorage;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __fpic_SetActionAtEnd_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = DerivedStorage;
    v5[5] = a2;
    dispatch_sync(v4, v5);
  }
}

void fpic_WillSeekTo(uint64_t a1, __int128 *a2, int a3)
{
  NSObject **DerivedStorage;
  const void *v7;
  NSObject *v8;
  _QWORD block[7];
  int v10;
  __int128 v11;
  uint64_t v12;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_WillSeekTo_block_invoke;
  block[3] = &__block_descriptor_84_e5_v8__0l;
  v10 = a3;
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  block[4] = DerivedStorage;
  block[5] = a1;
  block[6] = v7;
  dispatch_sync(v8, block);
  if (v7)
    CFRelease(v7);
}

uint64_t fpic_CopyPlayableEventsForItem(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  NSObject **DerivedStorage;
  const void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  _QWORD v15[10];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a2 && a3 && a4 && v9)
  {
    v10 = *DerivedStorage;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __fpic_CopyPlayableEventsForItem_block_invoke;
    v15[3] = &unk_1E2FB0708;
    v15[4] = &v16;
    v15[5] = a3;
    v15[6] = DerivedStorage;
    v15[7] = a2;
    v15[8] = a1;
    v15[9] = v9;
    dispatch_sync(v10, v15);
    v11 = 0;
    v12 = v17;
    *a4 = v17[3];
    v12[3] = 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  v13 = (const void *)v17[3];
  if (v13)
    CFRelease(v13);
  if (v9)
    CFRelease(v9);
  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_192F321C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_InitiateSeekIntoEvent(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, int a6, int a7)
{
  NSObject **DerivedStorage;
  const void *v15;
  NSObject *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  NSObject *v22;
  const void *v23;
  uint64_t v24;
  _QWORD v26[8];
  _QWORD block[11];
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD v36[4];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  CFMutableArrayRef Mutable;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;

  v44 = 0;
  v45 = &v44;
  v46 = 0x2020000000;
  v47 = 0;
  v40 = 0;
  v41 = &v40;
  v42 = 0x2020000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x4810000000;
  v37 = 0u;
  v38 = 0u;
  v36[3] = &unk_19339E166;
  v39 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v15 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v15 && v41[3])
  {
    v16 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpic_InitiateSeekIntoEvent_block_invoke;
    block[3] = &unk_1E2FB07C8;
    block[8] = a2;
    block[9] = DerivedStorage;
    v28 = *a3;
    v17 = *((_QWORD *)a3 + 2);
    v30 = *a4;
    v18 = *a5;
    v19 = *((_QWORD *)a5 + 2);
    v31 = *((_QWORD *)a4 + 2);
    v33 = v19;
    v32 = v18;
    v34 = a7;
    v35 = a6;
    v29 = v17;
    block[10] = v15;
    block[4] = v36;
    block[5] = &v44;
    block[6] = &v40;
    block[7] = a1;
    dispatch_sync(v16, block);
    v20 = fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v41[3], (uint64_t)v15);
    *((_DWORD *)v45 + 6) = v20;
    if (!v20)
    {
      v21 = fpic_ServiceCurrentEvent(a1, MEMORY[0x1E0CA2E18]);
      *((_DWORD *)v45 + 6) = v21;
      v22 = *DerivedStorage;
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = __fpic_InitiateSeekIntoEvent_block_invoke_103;
      v26[3] = &unk_1E2F991F0;
      v26[6] = a2;
      v26[7] = DerivedStorage;
      v26[4] = v36;
      v26[5] = a1;
      dispatch_sync(v22, v26);
    }
  }
  else
  {
    *((_DWORD *)v45 + 6) = FigSignalErrorAt();
  }
  v23 = (const void *)v41[3];
  if (v23)
    CFRelease(v23);
  if (v15)
    CFRelease(v15);
  v24 = *((unsigned int *)v45 + 6);
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  return v24;
}

void sub_192F3248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v39 - 168), 8);
  _Block_object_dispose((const void *)(v39 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_ObserveSeekOutOfEvent(uint64_t a1, int a2)
{
  NSObject **DerivedStorage;
  const void *v5;
  NSObject *v6;
  int v7;
  const void *v8;
  uint64_t v9;
  _QWORD v11[9];
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  CFMutableArrayRef Mutable;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  Mutable = 0;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    if (v14[3])
    {
      v6 = *DerivedStorage;
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = __fpic_ObserveSeekOutOfEvent_block_invoke;
      v11[3] = &unk_1E2FB07F0;
      v11[6] = a1;
      v11[7] = DerivedStorage;
      v12 = a2;
      v11[8] = v5;
      v11[4] = &v17;
      v11[5] = &v13;
      dispatch_sync(v6, v11);
      v7 = fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v14[3], (uint64_t)v5);
    }
    else
    {
      v7 = FigSignalErrorAt();
    }
    *((_DWORD *)v18 + 6) = v7;
    CFRelease(v5);
  }
  else
  {
    *((_DWORD *)v18 + 6) = FigSignalErrorAt();
  }
  v8 = (const void *)v14[3];
  if (v8)
    CFRelease(v8);
  v9 = *((unsigned int *)v18 + 6);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v9;
}

void sub_192F32668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void fpic_GetCurrentTimeInCurrentEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject **DerivedStorage;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  uint64_t *v10;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  uint64_t v17;

  v12 = 0;
  v13 = &v12;
  v14 = 0x3810000000;
  v15 = &unk_19339E166;
  v16 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = (const void *)v7;
  if (a2 && v7)
  {
    v9 = *DerivedStorage;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __fpic_GetCurrentTimeInCurrentEvent_block_invoke;
    v11[3] = &unk_1E2F9A0C0;
    v11[4] = &v12;
    v11[5] = a1;
    v11[6] = v8;
    v11[7] = DerivedStorage;
    v11[8] = a2;
    dispatch_sync(v9, v11);
  }
  else if (!v7)
  {
    goto LABEL_5;
  }
  CFRelease(v8);
LABEL_5:
  v10 = v13;
  *(_OWORD *)a3 = *((_OWORD *)v13 + 2);
  *(_QWORD *)(a3 + 16) = v10[6];
  _Block_object_dispose(&v12, 8);
}

void sub_192F327A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_CreateWrappedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const void *v6;
  uint64_t v7;

  v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCFWeakReferenceHolderCopyReferencedObject();
  if (result)
  {
    v6 = (const void *)result;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *))(DerivedStorage + 104))(a1, result, a2, 0, &v7);
    CFRelease(v6);
    return v7;
  }
  return result;
}

uint64_t fpic_SetEventsInternal(const void *a1, CFArrayRef a2, char a3)
{
  NSObject **DerivedStorage;
  const __CFAllocator *v7;
  const void *v8;
  CFArrayRef v9;
  NSObject *v10;
  int v11;
  int v12;
  const void *v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  _QWORD block[15];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  CFMutableArrayRef Mutable;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v46 = 0;
  v47 = &v46;
  v48 = 0x2020000000;
  v49 = 0;
  v42 = 0;
  v43 = &v42;
  v44 = 0x2020000000;
  v45 = 0;
  v38 = 0;
  v39 = &v38;
  v40 = 0x2020000000;
  v41 = 0;
  v34 = 0;
  v35 = &v34;
  v36 = 0x2020000000;
  v37 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x2020000000;
  Mutable = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3810000000;
  v23 = &unk_19339E166;
  v24 = *MEMORY[0x1E0CA2E18];
  v25 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!v31[3] || (v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject()) == 0)
  {
    *((_DWORD *)v47 + 6) = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (a2)
  {
    v9 = 0;
  }
  else
  {
    a2 = CFArrayCreate(v7, 0, 0, MEMORY[0x1E0C9B378]);
    v9 = a2;
    if (!a2)
    {
      v12 = FigSignalErrorAt();
      v9 = 0;
      goto LABEL_14;
    }
  }
  v10 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_SetEventsInternal_block_invoke;
  block[3] = &unk_1E2FB0730;
  block[12] = a1;
  block[13] = v8;
  v19 = a3;
  block[14] = DerivedStorage;
  block[4] = &v46;
  block[5] = &v38;
  block[6] = &v34;
  block[7] = &v42;
  block[8] = &v30;
  block[9] = &v26;
  block[10] = &v20;
  block[11] = a2;
  dispatch_sync(v10, block);
  v11 = fpic_DequeueItemsFromInterstitialPlayer((uint64_t)a1, (const __CFArray *)v31[3], (uint64_t)v8);
  *((_DWORD *)v47 + 6) = v11;
  if (v11)
    goto LABEL_15;
  if (*((_BYTE *)v27 + 24))
  {
    v16 = *((_OWORD *)v21 + 2);
    v17 = v21[6];
    fpic_cancelCurrentEventPlayback((uint64_t)a1, &v16, 1);
  }
  if (v39[3] > 0 || v43[3] > 0 || v35[3] >= 1)
    fpic_PostNotification((uint64_t)DerivedStorage, (uint64_t)CFSTR("fpiEventsDidChange"), a1, 0);
  v12 = fpic_ServiceCurrentEvent((uint64_t)a1, MEMORY[0x1E0CA2E18]);
LABEL_14:
  *((_DWORD *)v47 + 6) = v12;
LABEL_15:
  CFRelease(v8);
  if (v9)
    CFRelease(v9);
LABEL_17:
  v13 = (const void *)v31[3];
  if (v13)
    CFRelease(v13);
  v14 = *((unsigned int *)v47 + 6);
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v38, 8);
  _Block_object_dispose(&v42, 8);
  _Block_object_dispose(&v46, 8);
  return v14;
}

void sub_192F32C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_setEventsInAddOrderForPlayerItem(const void *a1, __CFString *a2, const __CFArray *a3, uint64_t a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, __CFArray *a8, _BYTE *a9, uint64_t a10)
{
  uint64_t DerivedStorage;
  const __CFArray *Value;
  uint64_t v17;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v19;
  uint64_t v20;
  const __CFArray *v21;
  const __CFArray *v22;
  char v23;
  uint64_t v24;
  CFIndex v25;
  uint64_t v26;
  unint64_t v27;
  const void *ValueAtIndex;
  uint64_t v29;
  CFIndex FirstIndexOfValue;
  char v31;
  char v32;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v34;
  unsigned int v35;
  CFIndex v36;
  const char *v37;
  const void *v38;
  const __CFArray *v39;
  CFIndex v40;
  uint64_t v41;
  CFStringRef MomentDesc;
  uint64_t v43;
  uint64_t result;
  NSObject *v45;
  unsigned int v46;
  unsigned int v47;
  NSObject *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v55;
  uint64_t v56;
  __CFString *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CFIndex range;
  uint64_t rangea;
  int v67;
  uint64_t v68;
  CFIndex v69;
  CFArrayRef theArray;
  CFIndex Count;
  unsigned int v72;
  _BYTE v73[40];
  uint64_t v74;
  os_log_type_t type;
  int v76;
  const char *v77;
  __int16 v78;
  const void *v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  __CFString *v83;
  __int16 v84;
  CFStringRef v85;
  __int16 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  CFRange v91;
  CFRange v92;

  v90 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    Count = CFArrayGetCount(a3);
    if (!a2)
      goto LABEL_6;
  }
  else
  {
    Count = 0;
    if (!a2)
    {
LABEL_6:
      Value = *(const __CFArray **)(DerivedStorage + 184);
      v67 = 1;
      goto LABEL_11;
    }
  }
  if (fpic_doesPlayerItemWrapperBelongToCurrentlyEngagedPrimaryItem((uint64_t)a1, a2, a4))
    goto LABEL_6;
  v17 = CMBaseObjectGetDerivedStorage();
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v17 + 176), a2))
    goto LABEL_10;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v19 = Mutable;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(v17 + 176), a2, Mutable);
    CFRelease(v19);
LABEL_10:
    v20 = CMBaseObjectGetDerivedStorage();
    Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v20 + 176), a2);
    v67 = 0;
    goto LABEL_11;
  }
  result = FigSignalErrorAt();
  if ((_DWORD)result)
    return result;
  v67 = 0;
  Value = 0;
LABEL_11:
  v68 = CMBaseObjectGetDerivedStorage();
  if (a3)
    range = CFArrayGetCount(a3);
  else
    range = 0;
  LOBYTE(v72) = 0;
  v60 = a4;
  v57 = a2;
  v58 = DerivedStorage;
  theArray = Value;
  if (a2 && !fpic_doesPlayerItemWrapperBelongToCurrentlyEngagedPrimaryItem((uint64_t)a1, a2, a4))
  {
    v21 = a3;
    v24 = CMBaseObjectGetDerivedStorage();
    v22 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v24 + 176), a2);
    v23 = 0;
    if (!v22)
      goto LABEL_48;
LABEL_22:
    v55 = a7;
    v25 = CFArrayGetCount(v22);
    if (v25 < 1)
    {
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v27 = v25 + 1;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v22, v27 - 2);
        v29 = (*(uint64_t (**)(const void *, uint64_t, const void *))(v68 + 80))(a1, a4, ValueAtIndex);
        v91.location = 0;
        v91.length = range;
        FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v21, v91, ValueAtIndex);
        if (FirstIndexOfValue == -1)
          v31 = v23 ^ 1;
        else
          v31 = 1;
        if ((v31 & 1) != 0)
        {
          v32 = v23;
          if (FirstIndexOfValue != -1)
            v32 = 1;
          if ((v32 & 1) == 0)
          {
            CFArrayRemoveValueAtIndex(v22, v27 - 2);
            if (dword_1EE2A33C8)
            {
              LODWORD(v74) = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v34 = v74;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                v35 = v34;
              else
                v35 = v34 & 0xFFFFFFFE;
              if (v35)
              {
                v76 = 136315906;
                v77 = "fpic_removeEventsThatAreNotPartOfIncomingEventsForPlayerItem";
                v78 = 2048;
                v79 = a1;
                v80 = 2112;
                v81 = (const char *)ValueAtIndex;
                v82 = 2048;
                v83 = a2;
                _os_log_send_and_compose_impl();
              }
              a4 = v60;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
        }
        else
        {
          fpic_RemoveEventIfNotPlaying(a1, ValueAtIndex, a8, (char *)&v72);
          if (a10 && a9 && (_BYTE)v72)
          {
            *a9 = 1;
            FigPlayerInterstitialEventGetResumptionOffset(v29, (uint64_t)&v88);
            *(_OWORD *)a10 = v88;
            *(_QWORD *)(a10 + 16) = v89;
          }
          ++v26;
        }
        --v27;
      }
      while (v27 > 1);
    }
    DerivedStorage = v58;
    if (v55)
      *v55 += v26;
    goto LABEL_48;
  }
  if (!a8 || !a9 || !a10)
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    goto LABEL_49;
  }
  v21 = a3;
  v22 = *(const __CFArray **)(v68 + 184);
  v23 = 1;
  if (v22)
    goto LABEL_22;
LABEL_48:
  a3 = v21;
  Value = theArray;
LABEL_49:
  if (Value)
    v69 = CFArrayGetCount(Value);
  else
    v69 = 0;
  if (Count >= 1)
  {
    v36 = 0;
    v64 = 0;
    v62 = 0;
    rangea = *MEMORY[0x1E0C9AE40];
    v63 = *MEMORY[0x1E0C9AE50];
    v37 = "future";
    if (v67)
      v37 = "currently engaged";
    v59 = v37;
    v56 = DerivedStorage + 552;
    while (1)
    {
      v38 = CFArrayGetValueAtIndex(a3, v36);
      v92.location = 0;
      v92.length = v69;
      v39 = Value;
      v40 = CFArrayGetFirstIndexOfValue(Value, v92, v38);
      v41 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 80))(a1, a4, v38);
      v74 = rangea;
      fpic_EventDateTimeMoment(v41, (uint64_t)v73);
      MomentDesc = fpic_CreateMomentDesc((uint64_t)v73);
      if (v40 == -1)
        break;
      v38 = CFArrayGetValueAtIndex(v39, v40);
      v43 = (*(uint64_t (**)(const void *, uint64_t, const void *))(DerivedStorage + 80))(a1, a4, v38);
      result = FigPlayerInterstitialEventMerge(v43, v41, (const __CFArray *)&v74);
      if ((_DWORD)result)
        return result;
      if (v74 != v63)
        goto LABEL_73;
      if (dword_1EE2A33C8)
      {
        v72 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v45 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v46 = v72;
        if (os_log_type_enabled(v45, type))
          v47 = v46;
        else
          v47 = v46 & 0xFFFFFFFE;
        if (v47)
        {
          v76 = 136316418;
          v77 = "fpic_setEventsInAddOrderForPlayerItem";
          v78 = 2048;
          v79 = a1;
          v80 = 2080;
          v81 = v59;
          v82 = 2048;
          v83 = v57;
          v84 = 2112;
          v85 = MomentDesc;
          v86 = 2112;
          v87 = v43;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a4 = v60;
        DerivedStorage = v58;
      }
      ++v62;
      if (!MomentDesc)
        goto LABEL_75;
LABEL_74:
      CFRelease(MomentDesc);
LABEL_75:
      if (v67 && FigPlayerInterstitialEventIsPreRoll(v43))
      {
        if ((*(_BYTE *)(DerivedStorage + 908) & 1) == 0 && (*(_BYTE *)(DerivedStorage + 564) & 1) == 0)
        {
          fpic_GatePrimaryPlaybackAtCurrentEvent((uint64_t)a1, a4);
          fpic_SwapToInterstitialPlayerLayerIfPrerollDetected((uint64_t)a1, a4);
        }
        if (*(_BYTE *)(DerivedStorage + 975))
        {
          v88 = *(_OWORD *)v56;
          v89 = *(_QWORD *)(v56 + 16);
          FigPlayerInterstitialEventSetStartTime(v43, (uint64_t)&v88);
          fpic_EnsureEventHasResolvedProperties(a1, a4, v38, 1);
        }
      }
      ++v36;
      Value = theArray;
      if (Count == v36)
        goto LABEL_88;
    }
    CFArrayAppendValue(v39, v38);
    if (dword_1EE2A33C8)
    {
      v72 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v49 = v72;
      if (os_log_type_enabled(v48, type))
        v50 = v49;
      else
        v50 = v49 & 0xFFFFFFFE;
      if (v50)
      {
        v76 = 136316418;
        v77 = "fpic_setEventsInAddOrderForPlayerItem";
        v78 = 2048;
        v79 = a1;
        v80 = 2080;
        v81 = v59;
        v82 = 2048;
        v83 = v57;
        v84 = 2112;
        v85 = MomentDesc;
        v86 = 2112;
        v87 = v41;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      a4 = v60;
      DerivedStorage = v58;
    }
    ++v64;
    v43 = v41;
LABEL_73:
    if (!MomentDesc)
      goto LABEL_75;
    goto LABEL_74;
  }
  v62 = 0;
  v64 = 0;
LABEL_88:
  v51 = CMBaseObjectGetDerivedStorage();
  if (v57)
  {
    if (v57 != CFSTR("DummyItem"))
    {
      if (a4)
      {
        v52 = (*(uint64_t (**)(const void *, uint64_t))(v51 + 72))(a1, a4);
        if (v52)
          fpic_UpdatePlaybackItemEventList((uint64_t)a1, v52);
      }
    }
  }
  if (a5)
    *a5 += v64;
  if (!a6)
    return 0;
  result = 0;
  *a6 += v62;
  return result;
}

void fpic_cancelCurrentEventPlayback(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t DerivedStorage;
  NSObject **v7;
  CFMutableArrayRef Mutable;
  const void *v9;
  NSObject *v10;
  const void *v11;
  _QWORD block[7];
  __int128 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  if (a1)
  {
    v7 = (NSObject **)DerivedStorage;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v17[3] = (uint64_t)Mutable;
    if (Mutable && (v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
    {
      v10 = *v7;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __fpic_cancelCurrentEventPlayback_block_invoke;
      block[3] = &unk_1E2FB0758;
      v13 = *a2;
      v14 = *((_QWORD *)a2 + 2);
      v15 = a3;
      block[5] = a1;
      block[6] = v9;
      block[4] = &v16;
      dispatch_sync(v10, block);
      fpic_DequeueItemsFromInterstitialPlayer(a1, (const __CFArray *)v17[3], (uint64_t)v9);
      CFRelease(v9);
    }
    else
    {
      FigSignalErrorAt();
    }
    v11 = (const void *)v17[3];
    if (v11)
      CFRelease(v11);
  }
  else
  {
    FigSignalErrorAt();
  }
  _Block_object_dispose(&v16, 8);
}

void sub_192F33DE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t fpic_doesPlayerItemWrapperBelongToCurrentlyEngagedPrimaryItem(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  result = 0;
  if (a2 && a2 != CFSTR("DummyItem") && a3)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v7 + 72))(a1, a3, a2);
    if (result)
      return *(_QWORD *)(DerivedStorage + 152) == result;
  }
  return result;
}

void fpic_RemoveEventIfNotPlaying(const void *a1, const void *a2, __CFArray *a3, char *a4)
{
  char v8;

  if (fpic_GetCurrentlyPlayingEvent() == a2)
  {
    v8 = 1;
  }
  else
  {
    fpic_RemoveEvent(a1, a2, a3, 1, 0);
    v8 = 0;
  }
  *a4 = v8;
}

void __fpic_cancelCurrentEventPlayback_block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v2;
  CMTimeFlags v3;
  const void *v4;
  __CFArray *v5;
  CMTimeEpoch v6;
  uint64_t DerivedStorage;
  const void *CurrentlyPlayingEvent;
  const void *v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t FirstCurrentItem;
  CMTime rhs;
  CMTime type;
  CMTime lhs;
  CMTimeValue v15;
  CMTimeScale v16;
  CMTime v17;
  CMTime time;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned __int8 *)(a1 + 80);
  v2 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 56);
  v3 = *(_DWORD *)(a1 + 68);
  v16 = *(_DWORD *)(a1 + 64);
  v4 = *(const void **)(a1 + 40);
  v5 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = *(_QWORD *)(a1 + 72);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CurrentlyPlayingEvent = fpic_GetCurrentlyPlayingEvent();
  if (CurrentlyPlayingEvent)
  {
    v9 = CurrentlyPlayingEvent;
    if (dword_1EE2A33C8)
    {
      LODWORD(lhs.value) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FirstCurrentItem = fpic_GetFirstCurrentItem((uint64_t)v4, v2);
    fpic_StopRecordingActiveInterstitialItemPlayoutTime((uint64_t)v4, FirstCurrentItem);
    if ((v3 & 0x1D) == 1)
    {
      memset(&time, 0, sizeof(time));
      fpic_CurrentResumptionOffset((uint64_t)v4, 0, v2, 0, &time);
      memset(&v17, 0, sizeof(v17));
      lhs.timescale = v16;
      lhs.flags = v3;
      lhs.epoch = v6;
      type = time;
      lhs.value = v15;
      CMTimeSubtract(&v17, &lhs, &type);
      type = *(CMTime *)(DerivedStorage + 384);
      rhs = v17;
      CMTimeAdd(&lhs, &type, &rhs);
      *(CMTime *)(DerivedStorage + 384) = lhs;
    }
    fpic_ApplyResumptionOffset((uint64_t)v4, 0, 0, v2, 0);
    fpic_RemoveEvent(v4, v9, v5, v1, 0);
  }
}

uint64_t fpic_recordSeekIDAndShowInterstitialLayer(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *(_DWORD *)(result + 1040) = a3;
    if (a5)
      return fpic_flipInterstitialAndPrimaryVisibility(a1, a4, a2, NAN);
  }
  return result;
}

void fpic_StopInterstitialPlayerAtCurrentItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v5;
  unsigned int (*v6)(CFTypeRef, CMTime *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v8;
  CMTime v9;
  CFTypeRef cf;
  CMTime time;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (fpic_CopyNextItemFromInterstitialPlayer(a1, a2, &cf))
    goto LABEL_11;
  v5 = cf;
  if (!cf)
    return;
  v6 = *(unsigned int (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v6 || v6(v5, &v9))
    goto LABEL_11;
  if (dword_1EE2A33C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fpic_SetInterstitialActionAtEnd(a1, a2, (uint64_t)CFSTR("Stop"));
  time = v9;
  if (FigCFSetPropertyToTime())
  {
LABEL_11:
    v8 = cf;
    if (!cf)
      return;
  }
  else
  {
    v8 = cf;
    *(_QWORD *)(DerivedStorage + 864) = cf;
    if (!v8)
      return;
  }
  CFRelease(v8);
}

uint64_t fpic_AllowIntendedEventToSeekIntoToBeBeRescheduled(uint64_t a1)
{
  uint64_t result;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v8;

  result = CMBaseObjectGetDerivedStorage();
  v3 = *(const void **)(result + 736);
  if (v3)
  {
    v4 = result;
    result = CFSetContainsValue(*(CFSetRef *)(result + 632), v3);
    if ((_DWORD)result)
    {
      fpic_ForgetPastEvent(a1, *(const void **)(v4 + 736));
      v5 = fpic_UnwrapEvent(a1, *(_QWORD *)(v4 + 736));
      CMBaseObjectGetDerivedStorage();
      for (i = FigCFArrayGetFirstIndexOfValue() + 1; ; ++i)
      {
        result = *(_QWORD *)(v4 + 184);
        if (result)
          result = CFArrayGetCount((CFArrayRef)result);
        if (i >= result)
          break;
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 184), i);
        v8 = fpic_UnwrapEvent(a1, (uint64_t)ValueAtIndex);
        result = FigPlayerInterstitialEventDoStartTimesMatch(v5, v8);
        if (!(_DWORD)result)
          break;
        fpic_ForgetPastEvent(a1, ValueAtIndex);
      }
    }
  }
  return result;
}

uint64_t fpic_RemoveEventsAtSameMomentUpToIntendedEventToSeekInto(const void *a1, int a2, CFTypeRef *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  __CFArray *Mutable;
  uint64_t v9;
  CFTypeRef *v10;
  uint64_t v11;
  CFIndex v12;
  CFArrayRef Count;
  const void *ValueAtIndex;
  uint64_t FirstIndexOfValue;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef *v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v20;
  uint64_t v21;
  __CFArray *v23;
  CFArrayRef theArray[25];

  theArray[23] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  theArray[0] = 0;
  if (!*(_QWORD *)(DerivedStorage + 736))
    return 0;
  if (a3)
  {
    v6 = DerivedStorage;
    if (*a3 && (v7 = CFGetTypeID(*a3), v7 == CFArrayGetTypeID()))
      Mutable = (__CFArray *)*a3;
    else
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v9 = fpic_UnwrapEvent((uint64_t)a1, *(_QWORD *)(v6 + 736));
      v10 = FigPlayerInterstitialEventCopyIdentifier(v9);
      v11 = fpic_copyEventsScheduledAtSameMomentAsEvent((uint64_t)a1, v9, theArray);
      if (!(_DWORD)v11)
      {
        v12 = 0;
        v23 = Mutable;
        while (1)
        {
          Count = theArray[0];
          if (theArray[0])
            Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
          if (v12 >= (uint64_t)Count
            || (ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v12),
                CMBaseObjectGetDerivedStorage(),
                FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue(),
                *(const void **)(v6 + 736) == ValueAtIndex))
          {
            v21 = 0;
            *a3 = Mutable;
            Mutable = 0;
            goto LABEL_24;
          }
          v16 = FirstIndexOfValue;
          if (!CFSetContainsValue(*(CFSetRef *)(v6 + 632), ValueAtIndex))
          {
            v17 = fpic_UnwrapEvent((uint64_t)a1, (uint64_t)ValueAtIndex);
            v18 = FigPlayerInterstitialEventCopyIdentifier(v17);
            if (dword_1EE2A33C8)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              Mutable = v23;
            }
            if (v16 == -1)
            {
              CFSetSetValue(*(CFMutableSetRef *)(v6 + 632), ValueAtIndex);
              v20 = fpic_RecordPastCurrentEventDuration((uint64_t)a1, ValueAtIndex);
              if ((_DWORD)v20)
              {
                v21 = v20;
                goto LABEL_24;
              }
            }
            else
            {
              fpic_RemoveEvent(a1, ValueAtIndex, Mutable, 0, a2);
            }
            if (v18)
              CFRelease(v18);
          }
          ++v12;
        }
      }
      v21 = v11;
      goto LABEL_24;
    }
    v21 = FigSignalErrorAt();
  }
  else
  {
    v21 = FigSignalErrorAt();
    Mutable = 0;
  }
  v10 = 0;
LABEL_24:
  if (theArray[0])
    CFRelease(theArray[0]);
  if (Mutable)
    CFRelease(Mutable);
  if (v10)
    CFRelease(v10);
  return v21;
}

uint64_t __fpic_getTimerQueue_block_invoke()
{
  uint64_t result;

  result = FigDispatchQueueCreateWithPriority();
  fpic_getTimerQueue_sTimerQueue = result;
  return result;
}

uint64_t __fpic_getNotificationQueue_block_invoke()
{
  uint64_t result;

  result = FigDispatchQueueCreateWithPriority();
  fpic_getNotificationQueue_sNotificationQueue = result;
  return result;
}

void fpic_PruneCurrentEvents(uint64_t a1, uint64_t a2, char a3)
{
  NSObject **DerivedStorage;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  _QWORD v10[7];
  char v11;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = (const void *)v7;
    v9 = *DerivedStorage;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __fpic_PruneCurrentEvents_block_invoke;
    v10[3] = &__block_descriptor_57_e5_v8__0l;
    v10[4] = a1;
    v10[5] = v8;
    v10[6] = a2;
    v11 = a3;
    dispatch_sync(v9, v10);
    CFRelease(v8);
  }
}

void fpic_eventItemReadyStateChange(uint64_t a1, uint64_t a2, char a3)
{
  NSObject **DerivedStorage;
  const void *v7;
  NSObject *v8;
  _QWORD block[8];
  char v10;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_eventItemReadyStateChange_block_invoke;
  block[3] = &__block_descriptor_65_e5_v8__0l;
  block[4] = a1;
  block[5] = v7;
  block[6] = a2;
  block[7] = DerivedStorage;
  v10 = a3;
  dispatch_sync(v8, block);
  if (v7)
    CFRelease(v7);
}

void fpic_NoticeRateChange(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t PrimaryPlayerAndCopyWrapper;
  const void *v6;
  uint64_t v7;
  int Float32IfPresent;
  uint64_t v9;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v12)(uint64_t, CFTypeRef *);
  uint64_t v13;
  CFTypeRef v14;
  float v15;
  CFTypeRef cf[18];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v15 = 0.0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &v14);
  v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v7 = (*(uint64_t (**)(uint64_t, const void *, _QWORD))(DerivedStorage + 64))(a1, v6, *(_QWORD *)(DerivedStorage + 40));
  Float32IfPresent = FigCFDictionaryGetFloat32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  if (Float32IfPresent && v15 < 0.0)
  {
    if (PrimaryPlayerAndCopyWrapper == a2 || v7 == a2)
    {
      v9 = fpic_CopyCurrentEvent(a1);
      if (v9)
      {
        v10 = (const void *)v9;
        do
        {
          if (dword_1EE2A33C8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          fpic_cancelCurrentEventPlayback(a1, MEMORY[0x1E0CA2E68], 0);
          fpic_ServiceCurrentEvent(a1, MEMORY[0x1E0CA2E18]);
          CFRelease(v10);
          v10 = (const void *)fpic_CopyCurrentEvent(a1);
        }
        while (v10);
      }
    }
    if (PrimaryPlayerAndCopyWrapper == a2)
      *(_BYTE *)(DerivedStorage + 977) = 0;
  }
  if (Float32IfPresent && v15 > 0.0 && PrimaryPlayerAndCopyWrapper == a2)
  {
    LODWORD(cf[0]) = 0;
    if (v7)
    {
      v12 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v12 || (v12(v7, cf), *(float *)cf == 0.0))
      {
        v13 = CMBaseObjectGetDerivedStorage();
        if (*(unsigned __int8 *)(v13 + 352) | *(unsigned __int8 *)(v13 + 353))
          fpic_UnpauseInterstitialPlayer(a1, v7, (uint64_t)v6);
      }
    }
    *(float *)(DerivedStorage + 712) = v15;
  }
  if (v6)
    CFRelease(v6);
  if (v14)
    CFRelease(v14);
}

void fpic_HandleAirPlayVideoActiveDidChange(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  uint64_t PrimaryPlayerAndCopyWrapper;
  NSObject *v6;
  const __CFArray *v7;
  const void *v8;
  const void *v9;
  _QWORD block[10];
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v21 = 0;
  PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &v21);
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v16 = FigCFWeakReferenceHolderCopyReferencedObject();
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2020000000;
  v12 = 0;
  if (v14[3])
  {
    if (PrimaryPlayerAndCopyWrapper == a2)
    {
      v6 = *DerivedStorage;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __fpic_HandleAirPlayVideoActiveDidChange_block_invoke;
      block[3] = &unk_1E2FB0878;
      block[8] = a2;
      block[9] = DerivedStorage;
      block[4] = v11;
      block[5] = &v13;
      block[6] = &v17;
      block[7] = a1;
      dispatch_sync(v6, block);
    }
    v7 = (const __CFArray *)v18[3];
    if (v7)
      fpic_DequeueItemsFromInterstitialPlayer(a1, v7, v14[3]);
  }
  else
  {
    FigSignalErrorAt();
  }
  v8 = (const void *)v18[3];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)v14[3];
  if (v9)
    CFRelease(v9);
  if (v21)
    CFRelease(v21);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_192F3702C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void fpic_mediaSelectionsChanged(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  const void *v5;
  NSObject *v6;
  _QWORD block[9];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 1;
  v6 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_mediaSelectionsChanged_block_invoke;
  block[3] = &unk_1E2F9A0C0;
  block[6] = DerivedStorage;
  block[7] = a1;
  block[8] = v5;
  block[4] = &v8;
  block[5] = a2;
  dispatch_sync(v6, block);
  if (*((_BYTE *)v9 + 24))
    fpic_setMediaSelectionsForCurrentEventItems(a1);
  if (v5)
    CFRelease(v5);
  _Block_object_dispose(&v8, 8);
}

void sub_192F37134(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void fpic_coordinationIdentifierChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  NSObject *v5;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 152) == a2)
  {
    v5 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpic_coordinationIdentifierChanged_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = a2;
    block[6] = a1;
    dispatch_sync(v5, block);
  }
}

void fpic_setMediaSelectionsForCurrentEventItems(uint64_t a1)
{
  NSObject **DerivedStorage;
  const void *v3;
  NSObject *v4;
  _QWORD block[7];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v4 = *DerivedStorage;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __fpic_setMediaSelectionsForCurrentEventItems_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = DerivedStorage;
  block[5] = a1;
  block[6] = v3;
  dispatch_sync(v4, block);
  if (v3)
    CFRelease(v3);
}

void fpic_checkForSnappedTimeToPauseBuffering(uint64_t a1)
{
  NSObject **DerivedStorage;
  NSObject *v3;
  _QWORD v4[6];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v3 = *DerivedStorage;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __fpic_checkForSnappedTimeToPauseBuffering_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = DerivedStorage;
  v4[5] = a1;
  dispatch_sync(v3, v4);
}

void fpic_checkForSnapOut(uint64_t a1)
{
  NSObject **DerivedStorage;
  NSObject *v3;
  _QWORD v4[6];

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v3 = *DerivedStorage;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __fpic_checkForSnapOut_block_invoke;
  v4[3] = &__block_descriptor_48_e5_v8__0l;
  v4[4] = DerivedStorage;
  v4[5] = a1;
  dispatch_sync(v3, v4);
}

void fpic_schedulePrimaryToInterstitialTransition(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  _QWORD v5[5];
  __int128 v6;
  uint64_t v7;

  v4 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __fpic_schedulePrimaryToInterstitialTransition_block_invoke;
  v5[3] = &__block_descriptor_64_e5_v8__0l;
  v5[4] = a1;
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  dispatch_sync(v4, v5);
}

void fpic_HandleSeekDidFinishNotification(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  NSObject **DerivedStorage;
  char v8;
  char v9;
  CFTypeID v10;
  const void *v11;
  NSObject *v12;
  _QWORD v13[8];
  int v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v24 = -1;
  v22 = *MEMORY[0x1E0CA2E18];
  v23 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v8 = FigCFEqual();
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  if (a3)
  {
    v9 = v8;
    v10 = CFGetTypeID(a3);
    if (v10 == CFDictionaryGetTypeID())
    {
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      if (v24 >= 1)
      {
        v11 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
        if (v11)
        {
          v12 = *DerivedStorage;
          v13[0] = MEMORY[0x1E0C809B0];
          v13[1] = 3221225472;
          v13[2] = __fpic_HandleSeekDidFinishNotification_block_invoke;
          v13[3] = &unk_1E2FB08A0;
          v14 = v24;
          v15 = v22;
          v16 = v23;
          v13[4] = &v18;
          v13[5] = DerivedStorage;
          v13[6] = a1;
          v13[7] = v11;
          v17 = v9;
          dispatch_sync(v12, v13);
          if (*((_BYTE *)v19 + 24))
            fpic_EnsurePrimaryWillResumeBuffering(a1, (uint64_t)v11);
          if (a4 && (BYTE12(v22) & 0x1D) == 1)
          {
            *(_OWORD *)a4 = v22;
            *(_QWORD *)(a4 + 16) = v23;
          }
          CFRelease(v11);
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  _Block_object_dispose(&v18, 8);
}

void sub_192F37588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fpic_EnsureCurrentEventsHaveResolvedProperties(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    v4 = (const void *)v3;
    for (i = 0; ; ++i)
    {
      Count = *(const __CFArray **)(DerivedStorage + 600);
      if (Count)
        Count = (const __CFArray *)CFArrayGetCount(Count);
      if (i >= (uint64_t)Count)
        break;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 600), i);
      fpic_EnsureEventHasResolvedProperties(a1, (uint64_t)v4, ValueAtIndex, 1);
    }
    CFRelease(v4);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fpic_HandleEndTimeChangedNotification(uint64_t a1, uint64_t a2)
{
  NSObject **DerivedStorage;
  NSObject *v5;
  _QWORD v6[7];
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BYTE v11[7];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  int v18;

  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x2020000000;
  v18 = 0;
  DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
  v15 = *MEMORY[0x1E0CA2E18];
  v16 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  FigCFDictionaryGetCMTimeIfPresent();
  v5 = *DerivedStorage;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __fpic_HandleEndTimeChangedNotification_block_invoke;
  v6[3] = &unk_1E2FB08C8;
  v6[6] = DerivedStorage;
  v7 = v15;
  v8 = v16;
  v9 = 0;
  v10 = BYTE12(v15) & 1;
  memset(v11, 0, sizeof(v11));
  v13 = v15;
  v14 = v16;
  v12 = a1;
  v6[4] = v17;
  v6[5] = a2;
  dispatch_sync(v5, v6);
  _Block_object_dispose(v17, 8);
}

void sub_192F37764(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void fpic_ReportInterstitialPlaybackDeadTime(uint64_t a1, OpaqueCMTimebase *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t UpTimeNanoseconds;
  OpaqueCMTimebase *v10;
  double Rate;
  double v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    v6 = (const void *)v5;
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(DerivedStorage + 64))(a1, v5, *(_QWORD *)(DerivedStorage + 40));
    if (*(_QWORD *)(DerivedStorage + 152))
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
      goto LABEL_21;
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v10 = (OpaqueCMTimebase *)fpic_CopyCurrentInterstitialItemTimebase(a1, (uint64_t)v6);
    Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 1048));
    if (v10)
      v12 = CMTimebaseGetRate(v10);
    else
      v12 = 0.0;
    if (*(OpaqueCMTimebase **)(DerivedStorage + 1048) == a2
      && Rate > 0.0
      && (v13 = *(_QWORD *)(DerivedStorage + 1008)) != 0)
    {
      v14 = (_QWORD *)(DerivedStorage + 1008);
    }
    else
    {
      if (!a2)
        goto LABEL_19;
      if (v10 != a2)
        goto LABEL_19;
      if (v12 <= 0.0)
        goto LABEL_19;
      v13 = *(_QWORD *)(DerivedStorage + 1000);
      if (!v13)
        goto LABEL_19;
      v14 = (_QWORD *)(DerivedStorage + 1000);
    }
    v15 = *(_DWORD *)(DerivedStorage + 1016) + (UpTimeNanoseconds - v13) / 0xF4240uLL;
    *(_DWORD *)(DerivedStorage + 1016) = v15;
    fpic_setItemPropertyInt32(*(_QWORD *)(DerivedStorage + 152), (uint64_t)CFSTR("interstitialPlaybackDeadTime"), v15);
    *v14 = 0;
LABEL_19:
    if (v10)
      CFRelease(v10);
LABEL_21:
    CFRelease(v6);
  }
}

void fpic_updateEventLoadedTimeIntervals(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  _QWORD v9[8];

  v8 = *(NSObject **)CMBaseObjectGetDerivedStorage();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __fpic_updateEventLoadedTimeIntervals_block_invoke;
  v9[3] = &__block_descriptor_64_e5_v8__0l;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  v9[7] = a4;
  dispatch_sync(v8, v9);
}

void __fpic_eventItemReadyStateChange_block_invoke(uint64_t a1)
{
  const void *ValueAtIndex;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DerivedStorage;
  __int128 v7;
  CMTimeEpoch v8;
  CFIndex FirstIndexOfValue;
  CFIndex PerEventTrackingCount;
  CFIndex v11;
  __CFString *PerAssetPerEventTrackedObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFDictionaryRef v16;
  uint64_t FigBaseObject;
  unsigned int (*v18)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v19;
  CFAllocatorRef allocator[2];
  const __CFAllocator *allocatora;
  uint64_t v22;
  CFIndex v23;
  uint64_t v24;
  CMTimeRange lhs;
  CMTime v26;
  CMTime duration;
  CMTime rhs;
  CMTime v29;
  CMTime start;
  CMTimeRange v31;

  v23 = 0;
  v24 = 0;
  if (fpic_findEventAndItemIndexForItemOnQueue(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), &v24, &v23))
  {
    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    v3 = *(const void **)(a1 + 32);
    if (!*(_BYTE *)(a1 + 64))
    {
      v19 = fpic_UnwrapEvent((uint64_t)v3, (uint64_t)ValueAtIndex);
      FigPlayerInterstitialEventReportItemFailure(v19);
    }
    fpic_UpdateEventLastPlaybackFailed(v3, (uint64_t)ValueAtIndex, 0);
    fpic_EnsureEventHasResolvedProperties(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), ValueAtIndex, 1);
    fpic_updateIntegratedTimelineOffsetTimesOnItemForEvent(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)ValueAtIndex);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 40);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v7 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
    *(_OWORD *)&v31.start.value = *MEMORY[0x1E0CA2E40];
    *(_OWORD *)&v31.start.epoch = v7;
    *(_OWORD *)&v31.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
    *(_OWORD *)allocator = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&start.value = *MEMORY[0x1E0CA2E68];
    v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    start.epoch = v8;
    v29 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    CMBaseObjectGetDerivedStorage();
    v22 = (uint64_t)ValueAtIndex;
    FirstIndexOfValue = FigCFArrayGetFirstIndexOfValue();
    PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, FirstIndexOfValue);
    if (!FirstIndexOfValue)
    {
      lhs.start.epoch = *(_QWORD *)(DerivedStorage + 424);
      *(_OWORD *)&lhs.start.value = *(_OWORD *)(DerivedStorage + 408);
      rhs = *(CMTime *)(DerivedStorage + 456);
      CMTimeAdd(&v29, &lhs.start, &rhs);
      *(_OWORD *)&lhs.start.value = *(_OWORD *)allocator;
      lhs.start.epoch = v8;
      rhs = v29;
      CMTimeAdd(&start, &lhs.start, &rhs);
    }
    if (PerEventTrackingCount >= 1)
    {
      v11 = 0;
      allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        PerAssetPerEventTrackedObject = (__CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, FirstIndexOfValue, v11, CFSTR("PlaybackItem"));
        v13 = CMBaseObjectGetDerivedStorage();
        if (v5)
        {
          if (PerAssetPerEventTrackedObject)
          {
            if (PerAssetPerEventTrackedObject != CFSTR("DummyItem"))
            {
              v14 = (*(uint64_t (**)(uint64_t, uint64_t, __CFString *))(v13 + 72))(v4, v5, PerAssetPerEventTrackedObject);
              if (v14)
              {
                v15 = v14;
                memset(&rhs, 0, sizeof(rhs));
                fpic_GetEventItemDuration(v4, v5, v22, FirstIndexOfValue, v11, (uint64_t)&rhs);
                if ((rhs.flags & 0x1D) == 1)
                {
                  lhs.start = start;
                  duration = rhs;
                  CMTimeRangeMake(&v31, &lhs.start, &duration);
                  duration = start;
                  v26 = rhs;
                  CMTimeAdd(&lhs.start, &duration, &v26);
                  start = lhs.start;
                }
                lhs = v31;
                v16 = CMTimeRangeCopyAsDictionary(&lhs, allocatora);
                FigBaseObject = FigPlaybackItemGetFigBaseObject(v15);
                v18 = *(unsigned int (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                  + 56);
                if (!v18 || v18(FigBaseObject, CFSTR("InterstitialEventItemTimeOffset"), v16))
                  break;
                if (v16)
                  CFRelease(v16);
              }
            }
          }
        }
        ++v11;
      }
      while (PerEventTrackingCount != v11);
    }
    fpic_passImageQueueGaugeBetweenPlayers(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));
  }
}

void __fpic_mediaSelectionsChanged_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v2 = a1[5];
  if (v2 != *(_QWORD *)(a1[6] + 152))
  {
    if (!fpic_findEventAndItemIndexForItemOnQueue(a1[7], a1[8], v2, 0, 0))
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    goto LABEL_9;
  }
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1[5]);
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (!v4)
  {
    v8 = a1[6];
    v7 = *(const void **)(v8 + 984);
    *(_QWORD *)(v8 + 984) = 0;
    if (!v7)
      goto LABEL_9;
LABEL_8:
    CFRelease(v7);
    goto LABEL_9;
  }
  v4(FigBaseObject, CFSTR("SelectedMediaArray"), *MEMORY[0x1E0C9AE00], &cf);
  v5 = cf;
  v6 = a1[6];
  v7 = *(const void **)(v6 + 984);
  *(_QWORD *)(v6 + 984) = cf;
  if (v5)
    CFRetain(v5);
  if (v7)
    goto LABEL_8;
LABEL_9:
  if (cf)
    CFRelease(cf);
}

void __fpic_coordinationIdentifierChanged_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, uint64_t);
  uint64_t v6;
  uint64_t DerivedStorage;
  const void *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex PerEventTrackingCount;
  CFIndex v12;
  CFIndex v13;
  const __CFString *PerAssetPerEventTrackedObject;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, const __CFString *, uint64_t);
  CFIndex v21;

  v2 = a1[4];
  v3 = *(const void **)(v2 + 168);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1[4] + 168) = 0;
    v2 = a1[4];
  }
  FigBaseObject = FigPlaybackItemGetFigBaseObject(a1[5]);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
  if (v5)
    v5(FigBaseObject, CFSTR("CoordinationIdentifier"), *MEMORY[0x1E0C9AE00], v2 + 168);
  v6 = a1[6];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 600));
  if (v8)
  {
    v21 = Count;
    if (Count >= 1)
    {
      v10 = 0;
      while (1)
      {
        PerEventTrackingCount = fpic_GetPerEventTrackingCount(DerivedStorage, v10);
        if (PerEventTrackingCount >= 1)
          break;
LABEL_18:
        if (++v10 == v21)
          goto LABEL_19;
      }
      v12 = PerEventTrackingCount;
      v13 = 0;
      while (1)
      {
        PerAssetPerEventTrackedObject = (const __CFString *)fpic_GetPerAssetPerEventTrackedObject(DerivedStorage, v10, v13, CFSTR("PlaybackItem"));
        v15 = CMBaseObjectGetDerivedStorage();
        if (PerAssetPerEventTrackedObject && PerAssetPerEventTrackedObject != CFSTR("DummyItem"))
        {
          v17 = (*(uint64_t (**)(uint64_t, const void *, const __CFString *))(v15 + 72))(v6, v8, PerAssetPerEventTrackedObject);
          if (v17)
          {
            v18 = *(_QWORD *)(DerivedStorage + 168);
            v19 = FigPlaybackItemGetFigBaseObject(v17);
            v20 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 56);
            if (!v20 || v20(v19, CFSTR("CoordinationIdentifier"), v18))
              break;
          }
        }
        if (v12 == ++v13)
          goto LABEL_18;
      }
    }
LABEL_19:
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void __fpic_setMediaSelectionsForCurrentEventItems_block_invoke(uint64_t *a1)
{
  uint64_t *v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex v5;
  const __CFAllocator *v6;
  CFIndex i;
  const __CFString *PerAssetPerEventTrackedObject;
  uint64_t v9;
  uint64_t v10;
  uint64_t DerivedStorage;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, CFTypeRef *);
  CFTypeRef v17;
  unsigned int (*v18)(CFTypeRef, const __CFString *, int *, _QWORD, _QWORD);
  uint64_t CMBaseObject;
  unsigned int (*v21)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **);
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t FigBaseObject;
  unsigned int (*v27)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **);
  CFIndex v31;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *DictWithKeyValueInMediaArray;
  const __CFArray *v34;
  const __CFArray *v35;
  const __CFArray *v36;
  CFIndex v37;
  const __CFDictionary *v38;
  int v39;
  const __CFDictionary *v40;
  const __CFArray *v41;
  const __CFArray *v42;
  CFIndex v43;
  CFIndex v44;
  int v45;
  const __CFDictionary *v47;
  const __CFDictionary *v48;
  const void *v49;
  const void *v50;
  __CFDictionary *MutableCopy;
  uint64_t v52;
  void (*v53)(uint64_t, const __CFString *, __CFArray *);
  CFIndex v54;
  uint64_t *v55;
  const void *v56;
  CFIndex v57;
  uint64_t v58;
  _BOOL4 v59;
  __CFArray *Mutable;
  const __CFAllocator *v61;
  const __CFArray *v62;
  void *value;
  const __CFArray *theArray;
  CFIndex v65;
  CFIndex v66;
  CFIndex v67;
  const void *v68;
  const __CFArray *v69;
  CFIndex v70;
  CFIndex PerEventTrackingCount;
  int v72;
  const __CFArray *v73;
  CFTypeRef v74;
  const __CFArray *v75[2];

  v1 = a1;
  v2 = *(const __CFArray **)(a1[4] + 984);
  if (v2)
  {
    if (CFArrayGetCount(v2) >= 1)
    {
      Count = CFArrayGetCount(*(CFArrayRef *)(v1[4] + 600));
      if (Count >= 1)
      {
        v4 = Count;
        v5 = 0;
        v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v68 = (const void *)*MEMORY[0x1E0C9AE50];
        v56 = (const void *)*MEMORY[0x1E0C9AE40];
        v54 = Count;
        v55 = v1;
        v61 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          PerEventTrackingCount = fpic_GetPerEventTrackingCount(v1[4], v5);
          if (PerEventTrackingCount < 1)
            goto LABEL_91;
          for (i = 0; i != PerEventTrackingCount; ++i)
          {
            PerAssetPerEventTrackedObject = (const __CFString *)fpic_GetPerAssetPerEventTrackedObject(v1[4], v5, i, CFSTR("PlaybackItem"));
            v9 = v1[5];
            v10 = v1[6];
            DerivedStorage = CMBaseObjectGetDerivedStorage();
            if (PerAssetPerEventTrackedObject)
              v12 = PerAssetPerEventTrackedObject == CFSTR("DummyItem");
            else
              v12 = 1;
            if (v12 || v10 == 0)
              continue;
            v14 = (*(uint64_t (**)(uint64_t, uint64_t, const __CFString *))(DerivedStorage + 72))(v9, v10, PerAssetPerEventTrackedObject);
            if (!v14)
              continue;
            v15 = v14;
            v73 = 0;
            v74 = 0;
            v16 = *(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
            if (v16)
              v16(v15, &v74);
            v17 = v74;
            if (!v74)
              goto LABEL_27;
            v72 = 0;
            v18 = *(unsigned int (**)(CFTypeRef, const __CFString *, int *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
            if (!v18)
              goto LABEL_26;
            if (v18(v17, CFSTR("MediaSelectionArray"), &v72, 0, 0) || v72 != 2)
              goto LABEL_26;
            CMBaseObject = FigAssetGetCMBaseObject(v74);
            v21 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (!v21 || v21(CMBaseObject, CFSTR("MediaSelectionArray"), v6, &v73) || !v73 || CFArrayGetCount(v73) < 1)
              goto LABEL_26;
            v58 = v15;
            v22 = v1[5];
            v62 = v73;
            theArray = *(const __CFArray **)(v1[4] + 984);
            v65 = CFArrayGetCount(theArray);
            Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
            v23 = CMBaseObjectGetDerivedStorage();
            v75[0] = 0;
            v24 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
            v25 = (*(uint64_t (**)(uint64_t, const void *, _QWORD))(v23 + 64))(v22, v24, *(_QWORD *)(v23 + 40));
            if (v25)
            {
              if (v24)
              {
                FigBaseObject = FigPlayerGetFigBaseObject(v25);
                v27 = *(unsigned int (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
                v59 = v27 && !v27(FigBaseObject, CFSTR("MediaSelectionCriteria"), v6, v75) && v75[0] != 0;
                v28 = v58;
LABEL_40:
                CFRelease(v24);
                if (v75[0])
                  CFRelease(v75[0]);
                goto LABEL_42;
              }
              FigSignalErrorAt();
              v59 = 0;
              v28 = v58;
            }
            else
            {
              v59 = 0;
              v28 = v58;
              if (v24)
                goto LABEL_40;
            }
LABEL_42:
            v57 = v5;
            v75[0] = 0;
            v29 = FigPlaybackItemGetFigBaseObject(v28);
            v30 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
            if (v30)
              v30(v29, CFSTR("SelectedMediaArray"), v6, v75);
            if (v65 < 1)
              goto LABEL_82;
            v31 = 0;
            do
            {
              v66 = v31;
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v31);
              if (CFDictionaryGetValue(ValueAtIndex, CFSTR("AutomaticallySelected")) == v68)
                goto LABEL_81;
              value = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionGroupMediaType"));
              DictWithKeyValueInMediaArray = fpic_FindDictWithKeyValueInMediaArray(v62, (uint64_t)value, CFSTR("MediaSelectionGroupMediaType"), 0);
              if (!DictWithKeyValueInMediaArray)
                goto LABEL_81;
              v34 = (const __CFArray *)CFDictionaryGetValue(DictWithKeyValueInMediaArray, CFSTR("MediaSelectionGroupOptions"));
              if (!ValueAtIndex)
                goto LABEL_81;
              v35 = v34;
              if (!v34)
                goto LABEL_81;
              CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsLanguageCode"));
              v36 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"));
              v67 = v36 ? CFArrayGetCount(v36) : 0;
              v70 = CFArrayGetCount(v35);
              if (v70 < 1)
                goto LABEL_81;
              v69 = v35;
              v37 = 0;
              v38 = 0;
              v39 = -1;
              while (1)
              {
                v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(v69, v37);
                CFDictionaryGetValue(v40, CFSTR("MediaSelectionOptionsLanguageCode"));
                v41 = (const __CFArray *)CFDictionaryGetValue(v40, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"));
                v42 = v41;
                v43 = v41 ? CFArrayGetCount(v41) : 0;
                if (FigCFEqual()
                  && CFDictionaryGetValue(v40, CFSTR("MediaSelectionOptionsIsAuxiliaryContent")) != v68)
                {
                  break;
                }
LABEL_73:
                ++v37;
                v40 = v38;
                if (v37 == v70)
                  goto LABEL_74;
              }
              if (v43 < 1)
              {
                v45 = 0;
              }
              else
              {
                v44 = 0;
                v45 = 0;
                do
                {
                  CFArrayGetValueAtIndex(v42, v44);
                  if (FigCFArrayGetFirstIndexOfValue() != -1)
                    ++v45;
                  ++v44;
                }
                while (v43 != v44);
              }
              if (v67 != v45 || v67 != v43)
              {
                if (v45 > v39)
                {
                  v38 = v40;
                  v39 = v45;
                }
                goto LABEL_73;
              }
LABEL_74:
              v6 = v61;
              if (v40)
              {
                v47 = fpic_FindDictWithKeyValueInMediaArray(v75[0], (uint64_t)value, CFSTR("MediaSelectionGroupMediaType"), 1);
                if (!v47
                  || (v48 = v47,
                      CFDictionaryGetValue(v40, CFSTR("MediaSelectionOptionsPersistentID")),
                      CFDictionaryGetValue(v48, CFSTR("MediaSelectionOptionsPersistentID")),
                      v49 = CFDictionaryGetValue(v48, CFSTR("AutomaticallySelected")),
                      v50 = CFDictionaryGetValue(v48, CFSTR("PrimaryOverride")),
                      !v59)
                  && (v56 != v49 || v56 != v50)
                  && !FigCFEqual())
                {
                  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                  CFDictionarySetValue(MutableCopy, CFSTR("MediaSelectionGroupMediaType"), value);
                  CFDictionarySetValue(MutableCopy, CFSTR("PrimaryOverride"), v68);
                  CFArrayAppendValue(Mutable, MutableCopy);
                  CFRelease(MutableCopy);
                }
              }
LABEL_81:
              v31 = v66 + 1;
            }
            while (v66 + 1 != v65);
LABEL_82:
            if (CFArrayGetCount(Mutable) >= 1)
            {
              v52 = FigPlaybackItemGetFigBaseObject(v58);
              v53 = *(void (**)(uint64_t, const __CFString *, __CFArray *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
              if (v53)
                v53(v52, CFSTR("SelectedMediaArray"), Mutable);
            }
            v4 = v54;
            v1 = v55;
            v5 = v57;
            if (v75[0])
              CFRelease(v75[0]);
            CFRelease(Mutable);
LABEL_26:
            CFRelease(v74);
LABEL_27:
            if (v73)
              CFRelease(v73);
          }
LABEL_91:
          ++v5;
        }
        while (v5 != v4);
      }
    }
  }
}

const __CFDictionary *fpic_FindDictWithKeyValueInMediaArray(const __CFArray *a1, uint64_t a2, const void *a3, int a4)
{
  const __CFDictionary *ValueAtIndex;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *v11;

  ValueAtIndex = 0;
  if (a1 && a2 && a3)
  {
    Count = CFArrayGetCount(a1);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      v9 = Count;
      v10 = 0;
      v11 = (const void *)*MEMORY[0x1E0C9AE50];
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v10);
        CFDictionaryGetValue(ValueAtIndex, a3);
        if (FigCFEqual())
        {
          if (!a4 || CFDictionaryGetValue(ValueAtIndex, CFSTR("MediaSelectionOptionsIsAuxiliaryContent")) != v11)
            break;
        }
        if (v9 == ++v10)
          return 0;
      }
    }
  }
  return ValueAtIndex;
}

uint64_t __fpic_checkForSnappedTimeToPauseBuffering_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v5;
  CMTime time2;
  CMTime time1;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD *)(v2 + 152);
  if (result)
  {
    if ((*(_BYTE *)(v2 + 884) & 1) != 0 && !*(_BYTE *)(v2 + 920) && !*(_BYTE *)(v2 + 978))
    {
      result = FigCFCopyPropertyAsTime();
      if (!(_DWORD)result)
      {
        if ((unsigned __int128)0 >> 96)
        {
          time1 = *(CMTime *)(*(_QWORD *)(a1 + 32) + 872);
          memset(&time2, 0, sizeof(time2));
          result = fpic_TimesAreClose(&time1, &time2);
          if (!(_DWORD)result)
          {
            time1 = *(CMTime *)(*(_QWORD *)(a1 + 32) + 576);
            memset(&time2, 0, sizeof(time2));
            result = CMTimeCompare(&time1, &time2);
            if ((_DWORD)result)
            {
              if (dword_1EE2A33C8)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                result = fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v5 = *(_QWORD *)(a1 + 32);
              *(_OWORD *)(v5 + 576) = 0uLL;
              *(_QWORD *)(v5 + 592) = 0;
            }
          }
        }
      }
    }
  }
  return result;
}

void __fpic_checkForSnapOut_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  CFStringRef MomentDesc;
  uint64_t v12;
  __int128 v13;
  CFStringRef v14;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BYTE v19[40];
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 152) && (*(_BYTE *)(v1 + 232) || *(_BYTE *)(v1 + 233)))
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!(*(unsigned __int8 *)(DerivedStorage + 352) | *(unsigned __int8 *)(DerivedStorage + 353)))
    {
      v4 = *(_QWORD *)(a1 + 32);
      if (!*(_BYTE *)(v4 + 920) && !*(_BYTE *)(v4 + 978))
      {
        v23 = 0uLL;
        v24 = 0;
        if (!FigCFCopyPropertyAsTime() && (BYTE12(v23) & 1) != 0)
        {
          v22 = 0;
          v20 = 0u;
          v21 = 0u;
          v5 = *(_QWORD *)(a1 + 32);
          v25 = v23;
          *(_QWORD *)&v26 = v24;
          v6 = *(_OWORD *)(v5 + 216);
          v28 = *(_OWORD *)(v5 + 200);
          v29 = v6;
          v30 = *(_QWORD *)(v5 + 232);
          fpic_MakeMomentFromTime((uint64_t)&v25, (uint64_t)&v28, (uint64_t)&v20);
          v7 = *(_QWORD *)(a1 + 32);
          if ((!(_BYTE)v22 || !*(_BYTE *)(v7 + 232)) && (!BYTE1(v22) || !*(_BYTE *)(v7 + 233)))
          {
            fpic_CurrentItemMoment(*(_QWORD *)(v7 + 152), (uint64_t)v19);
            v28 = v23;
            *(_QWORD *)&v29 = v24;
            fpic_MakeMomentFromTime((uint64_t)&v28, (uint64_t)v19, (uint64_t)&v20);
            v7 = *(_QWORD *)(a1 + 32);
          }
          v28 = v20;
          v29 = v21;
          v30 = v22;
          v8 = *(_OWORD *)(v7 + 216);
          v25 = *(_OWORD *)(v7 + 200);
          v26 = v8;
          v27 = *(_QWORD *)(v7 + 232);
          if (!fpic_MomentsAreClose((uint64_t)&v28, (uint64_t)&v25))
          {
            v9 = *(_QWORD *)(a1 + 32);
            v28 = v20;
            v29 = v21;
            v30 = v22;
            v10 = *(_OWORD *)(v9 + 256);
            v25 = *(_OWORD *)(v9 + 240);
            v26 = v10;
            v27 = *(_QWORD *)(v9 + 272);
            if (!fpic_MomentsAreClose((uint64_t)&v28, (uint64_t)&v25))
            {
              v28 = v20;
              v29 = v21;
              v30 = v22;
              MomentDesc = fpic_CreateMomentDesc((uint64_t)&v28);
              v12 = *(_QWORD *)(a1 + 32);
              v13 = *(_OWORD *)(v12 + 216);
              v28 = *(_OWORD *)(v12 + 200);
              v29 = v13;
              v30 = *(_QWORD *)(v12 + 232);
              v14 = fpic_CreateMomentDesc((uint64_t)&v28);
              if (dword_1EE2A33C8)
              {
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              if (MomentDesc)
                CFRelease(MomentDesc);
              if (v14)
                CFRelease(v14);
              v16 = *(_QWORD *)(a1 + 32);
              v17 = v21;
              *(_OWORD *)(v16 + 240) = v20;
              *(_OWORD *)(v16 + 256) = v17;
              *(_QWORD *)(v16 + 272) = v22;
              v18 = *(_QWORD *)(a1 + 32);
              *(_OWORD *)(v18 + 896) = v23;
              *(_QWORD *)(v18 + 912) = v24;
              fpic_EnsureCurrentEventsHaveResolvedProperties(*(const void **)(a1 + 40));
            }
          }
        }
      }
    }
  }
}

void __fpic_schedulePrimaryToInterstitialTransition_block_invoke(uint64_t a1)
{
  CMTime *v2;
  uint64_t v3;
  CMTimeFlags v4;
  CMTimeEpoch v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  double Rate;
  double v9;
  const void *v10;
  Float64 Seconds;
  uint64_t v12;
  CMTime v13;
  CMTime time2;
  CMTime time1;
  CMTime v16;
  CMTimeValue v17;
  CMTimeScale v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (CMTime *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 52);
  v18 = *(_DWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((v4 & 1) != 0)
  {
    v7 = DerivedStorage;
    if (*(_QWORD *)(DerivedStorage + 1048))
    {
      if (!fpic_skipShowInterstitial(DerivedStorage))
      {
        Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v7 + 1048));
        if (Rate > 0.0)
        {
          v9 = Rate;
          v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
          memset(&v16, 0, sizeof(v16));
          CMTimebaseGetTime(&v16, *(CMTimebaseRef *)(v7 + 1048));
          time1.timescale = v18;
          time1.flags = v4;
          time1.epoch = v5;
          time2 = v16;
          time1.value = v17;
          if (CMTimeCompare(&time1, &time2) >= 1)
          {
            time2.value = v17;
            time2.timescale = v18;
            time2.flags = v4;
            time2.epoch = v5;
            v13 = v16;
            CMTimeSubtract(&time1, &time2, &v13);
            Seconds = CMTimeGetSeconds(&time1);
            fpic_flipInterstitialAndPrimaryVisibility(v3, 1, (uint64_t)v10, Seconds / v9);
          }
          if (v10)
            CFRelease(v10);
        }
      }
    }
  }
  v12 = *(_QWORD *)(a1 + 32);
  v16 = *v2;
  fpic_scheduleInterstitialAudioTransition(v12, (__int128 *)&v16.value, 1);
}

void fpic_scheduleInterstitialAudioTransition(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t DerivedStorage;
  const void *v7;
  uint64_t FirstCurrentItem;
  uint64_t v9;
  const void *v10;
  OpaqueCMTimebase *v11;
  CMTime *v12;
  uint64_t v13;
  uint64_t PrimaryPlayerAndCopyWrapper;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  CMTimeValue value;
  uint64_t v21;
  uint64_t FigBaseObject;
  void (*v23)(uint64_t, const __CFString *, uint64_t, CMTime *);
  CMTimeValue v24;
  uint64_t v25;
  CMTimeValue v26;
  uint64_t v27;
  void (*v28)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v29;
  void (*v30)(uint64_t, const __CFString *, uint64_t, CMTime *);
  uint64_t v31;
  double Rate;
  OpaqueCMClock *HostTimeClock;
  uint64_t v34;
  CMTimeValue v35;
  unsigned int (*v36)(uint64_t, CMTimeValue, float);
  float v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;
  CMTime rhs;
  CMTime lhs;
  CFTypeRef cf;
  CMTime time2;
  CMTime time1;
  CMTime v51;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  FirstCurrentItem = fpic_GetFirstCurrentItem(a1, (uint64_t)v7);
  v9 = fpic_CopyCurrentInterstitialItemTimebase(a1, (uint64_t)v7);
  v10 = (const void *)v9;
  if (a3)
  {
    v11 = *(OpaqueCMTimebase **)(DerivedStorage + 1048);
    v12 = (CMTime *)(DerivedStorage + 924);
  }
  else
  {
    v12 = (CMTime *)(DerivedStorage + 948);
    v11 = (OpaqueCMTimebase *)v9;
  }
  v51 = *v12;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
  {
    if (v11)
    {
      if (*(_QWORD *)(DerivedStorage + 152))
      {
        if (FirstCurrentItem)
        {
          time1 = v51;
          time2 = *(CMTime *)a2;
          if (CMTimeCompare(&time1, &time2))
          {
            v13 = CMBaseObjectGetDerivedStorage();
            time2.value = 0;
            PrimaryPlayerAndCopyWrapper = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &time2);
            v15 = PrimaryPlayerAndCopyWrapper;
            if (a3)
            {
              v16 = (*(uint64_t (**)(uint64_t, const void *, _QWORD))(v13 + 64))(a1, v7, *(_QWORD *)(v13 + 40));
              v17 = fpic_GetFirstCurrentItem(a1, (uint64_t)v7);
            }
            else
            {
              v17 = *(_QWORD *)(v13 + 152);
              v16 = PrimaryPlayerAndCopyWrapper;
            }
            if (fpic_isAirplayVideoActive(v16))
              goto LABEL_13;
            v42 = v17;
            v40 = v15;
            time1.value = *MEMORY[0x1E0C9AE40];
            value = time1.value;
            v21 = *MEMORY[0x1E0C9AE00];
            FigBaseObject = FigPlayerGetFigBaseObject(v16);
            v23 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
            v24 = value;
            if (v23)
            {
              v23(FigBaseObject, CFSTR("IsBufferedAirPlayActive"), v21, &time1);
              v24 = time1.value;
            }
            v41 = v21;
            v25 = *MEMORY[0x1E0C9AE50];
            if (v24 == *MEMORY[0x1E0C9AE50])
              goto LABEL_13;
            time1.value = value;
            v26 = value;
            if (v42)
            {
              v27 = FigPlaybackItemGetFigBaseObject(v42);
              v28 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
              v26 = value;
              if (v28)
              {
                v28(v27, CFSTR("HasEnabledAudio"), v41, &time1);
                v26 = time1.value;
              }
            }
            if (v26 != v25)
            {
LABEL_13:
              v18 = 1;
            }
            else
            {
              time1.value = value;
              v29 = FigPlayerGetFigBaseObject(v40);
              v30 = *(void (**)(uint64_t, const __CFString *, uint64_t, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
              if (v30)
              {
                v30(v29, CFSTR("IsNeroPlaybackActive"), v41, &time1);
                value = time1.value;
              }
              v18 = value == v25;
            }
            if (time2.value)
              CFRelease((CFTypeRef)time2.value);
            if (!v18)
            {
              cf = 0;
              if (a3)
                v19 = (*(uint64_t (**)(uint64_t, const void *, _QWORD))(DerivedStorage + 64))(a1, v7, *(_QWORD *)(DerivedStorage + 40));
              else
                v19 = fpic_GetPrimaryPlayerAndCopyWrapper(a1, &cf);
              v31 = v19;
              Rate = CMTimebaseGetRate(v11);
              memset(&time1, 0, sizeof(time1));
              CMTimebaseGetTime(&time1, v11);
              time2 = *(CMTime *)a2;
              lhs = time1;
              if (CMTimeCompare(&time2, &lhs) >= 1 && Rate > 0.0)
              {
                memset(&time2, 0, sizeof(time2));
                lhs = *(CMTime *)a2;
                rhs = time1;
                CMTimeSubtract(&time2, &lhs, &rhs);
                memset(&lhs, 0, sizeof(lhs));
                rhs = time2;
                CMTimeMultiplyByFloat64(&lhs, &rhs, 1.0 / Rate);
                memset(&rhs, 0, sizeof(rhs));
                HostTimeClock = CMClockGetHostTimeClock();
                CMClockGetTime(&rhs, HostTimeClock);
                memset(&v45, 0, sizeof(v45));
                v44 = rhs;
                v43 = lhs;
                CMTimeAdd(&v45, &v44, &v43);
                v43.value = 0;
                if (a3)
                  v34 = 42;
                else
                  v34 = 43;
                FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v34, (CFMutableDictionaryRef *)&v43);
                v44 = v45;
                FigCFDictionarySetCMTime();
                FigCFDictionarySetInt32();
                v35 = v43.value;
                v36 = *(unsigned int (**)(uint64_t, CMTimeValue, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 104);
                if (v36)
                {
                  v37 = Rate;
                  if (!v36(v31, v35, v37))
                  {
                    v38 = DerivedStorage + 924;
                    v39 = *a2;
                    if (!a3)
                      v38 = DerivedStorage + 948;
                    *(_QWORD *)(v38 + 16) = *((_QWORD *)a2 + 2);
                    *(_OWORD *)v38 = v39;
                  }
                }
                if (v43.value)
                  CFRelease((CFTypeRef)v43.value);
              }
              if (cf)
                CFRelease(cf);
            }
          }
        }
      }
    }
  }
  if (v10)
    CFRelease(v10);
  if (v7)
    CFRelease(v7);
}

uint64_t fpic_updateCurrentResumptionTimeIfPlayingPostroll()
{
  uint64_t result;
  uint64_t v1;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime time2;
  CMTime time1;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 978))
  {
    v1 = result;
    result = (uint64_t)fpic_GetCurrentlyPlayingEvent();
    if (result)
    {
      if ((*(_BYTE *)(v1 + 516) & 1) != 0)
      {
        time1 = *(CMTime *)(v1 + 504);
        time2 = *(CMTime *)(v1 + 360);
        result = CMTimeCompare(&time1, &time2);
        if ((int)result >= 1)
        {
          if (dword_1EE2A33C8)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            result = fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)(v1 + 504) = *(_OWORD *)(v1 + 360);
          *(_QWORD *)(v1 + 520) = *(_QWORD *)(v1 + 376);
        }
      }
    }
  }
  return result;
}

void fpic_SchedulePrimaryTransitionTimerProc()
{
  const void *v0;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject **DerivedStorage;
  NSObject *v3;
  _QWORD block[6];
  os_log_type_t type;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v0 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1EE2A33C8 >= 5)
  {
    v6 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v0)
  {
    DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
    v3 = *DerivedStorage;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __fpic_SchedulePrimaryTransitionTimerProc_block_invoke;
    block[3] = &__block_descriptor_48_e5_v8__0l;
    block[4] = DerivedStorage;
    block[5] = v0;
    dispatch_sync(v3, block);
    CFRelease(v0);
  }
}

void __fpic_updateEventLoadedTimeIntervals_block_invoke(uint64_t a1)
{
  fpic_updateEventLoadedTimeIntervalsOnQueue(*(const void **)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(const void **)(a1 + 56));
}

void __fpic_checkScheduledTransition_block_invoke(uint64_t a1)
{
  const void *v2;
  const void *v3;
  double Rate;
  const void *v5;
  uint64_t v6;
  uint64_t LastCurrentItem;
  uint64_t v8;
  int v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  Float64 Seconds;
  uint64_t v17;
  int v18;
  uint64_t v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  os_log_type_t type;
  unsigned int v24;
  CMTime time2;
  const char *v26;
  __int16 v27;
  double v28;
  __int16 v29;
  Float64 v30;
  CMTime time1;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  v3 = (const void *)fpic_CopyCurrentInterstitialItemTimebase(*(_QWORD *)(a1 + 40), (uint64_t)v2);
  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a1 + 48));
  memset(&v22, 0, sizeof(v22));
  CMTimebaseGetTime(&v22, *(CMTimebaseRef *)(a1 + 48));
  v5 = *(const void **)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  if (v5 == *(const void **)(v6 + 1048) && (*(_BYTE *)(a1 + 56) || Rate == 0.0))
  {
    memset(&v21, 0, sizeof(v21));
    if ((*(_BYTE *)(v6 + 908) & 1) != 0)
      v21 = *(CMTime *)(v6 + 896);
    else
      fpic_TimeToGatePrimaryPlaybackAtCurrentEvent(0, (uint64_t)&v21);
    time1 = v22;
    time2 = v21;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      time1 = v22;
      time2 = v21;
      if (!fpic_TimesAreClose(&time1, &time2))
      {
        v8 = *(_QWORD *)(a1 + 40);
        v9 = *(unsigned __int8 *)(a1 + 56);
        v20 = v22;
        DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (*(_QWORD *)(DerivedStorage + 1056))
        {
          v11 = DerivedStorage;
          if (FigGetUpTimeNanoseconds() < *(_QWORD *)(DerivedStorage + 1056))
          {
            if (dword_1EE2A33C8)
            {
              v24 = 0;
              type = OS_LOG_TYPE_DEFAULT;
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              v13 = v24;
              if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
                v14 = v13;
              else
                v14 = v13 & 0xFFFFFFFE;
              if (v14)
              {
                if (v9)
                  v15 = "jump";
                else
                  v15 = "rate change";
                time1 = v20;
                Seconds = CMTimeGetSeconds(&time1);
                LODWORD(time2.value) = 136316162;
                *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"fpic_cancelScheduledInterstitialFlip";
                LOWORD(time2.flags) = 2048;
                *(_QWORD *)((char *)&time2.flags + 2) = v8;
                HIWORD(time2.epoch) = 2080;
                v26 = v15;
                v27 = 2048;
                v28 = Rate;
                v29 = 2048;
                v30 = Seconds;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            v19 = CMBaseObjectGetDerivedStorage();
            fpic_flipInterstitialAndPrimaryVisibility(v8, (*(unsigned __int8 *)(v19 + 352) | *(unsigned __int8 *)(v19 + 353)) != 0, (uint64_t)v2, NAN);
          }
          *(_QWORD *)(v11 + 1056) = 0;
        }
        v17 = *(_QWORD *)(a1 + 40);
        v18 = 1;
        goto LABEL_33;
      }
    }
  }
  else if (v5 == v3 && (*(_BYTE *)(a1 + 56) || Rate == 0.0))
  {
    LastCurrentItem = fpic_GetLastCurrentItem(*(_QWORD *)(a1 + 40), (uint64_t)v2);
    memset(&time1, 0, sizeof(time1));
    if (LastCurrentItem)
      fpic_GetItemEndTime(LastCurrentItem, (uint64_t)&time1);
    else
      time1 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
    time2 = v22;
    v21 = time1;
    if (CMTimeCompare(&time2, &v21) < 0)
    {
      time2 = v22;
      v21 = time1;
      if (!fpic_TimesAreClose(&time2, &v21))
      {
        v17 = *(_QWORD *)(a1 + 40);
        v18 = 0;
LABEL_33:
        fpic_cancelScheduledAudioTransition(v17, v18, (uint64_t)v2);
      }
    }
  }
  if (v3)
    CFRelease(v3);
  if (v2)
    CFRelease(v2);
}

void fpic_cancelScheduledAudioTransition(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  uint64_t v13;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  cf[0] = 0;
  if (a2)
  {
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(DerivedStorage + 64))(a1, a3, *(_QWORD *)(DerivedStorage + 40));
    if ((*(_BYTE *)(v7 + 936) & 1) == 0)
      goto LABEL_11;
    v9 = v8;
    v10 = v7 + 924;
    if (dword_1EE2A33C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpic_SetRateWithReason(v9, 41, 0.0);
  }
  else
  {
    fpic_GetPrimaryPlayerAndCopyWrapper(a1, cf);
    if ((*(_BYTE *)(v7 + 960) & 1) == 0)
      goto LABEL_11;
    v10 = v7 + 948;
    if (dword_1EE2A33C8)
    {
      v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fpic_GatePrimaryPlaybackAtCurrentEvent(a1, a3);
  }
  v13 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)v10 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v13 + 16);
LABEL_11:
  if (cf[0])
    CFRelease(cf[0]);
}

void fpirc_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  NSObject *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[17];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[17] = 0;
  }
  v5 = (const void *)DerivedStorage[18];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[18] = 0;
  }
  v6 = DerivedStorage[2];
  if (v6)
  {
    dispatch_release(v6);
    DerivedStorage[2] = 0;
  }
}

uint64_t fpirc_CopyEvents(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  NSObject *v4;
  uint64_t *v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v4 = *(NSObject **)(DerivedStorage + 16);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __fpirc_CopyEvents_block_invoke;
  v7[3] = &unk_1E2F87F08;
  v7[4] = &v8;
  v7[5] = DerivedStorage;
  dispatch_sync(v4, v7);
  v5 = v9;
  *a2 = v9[3];
  v5[3] = 0;
  _Block_object_dispose(&v8, 8);
  return 0;
}

uint64_t fpirc_CopyPlayableEventsForItem(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v12;
  const void *v13;
  _QWORD v15[10];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v9 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (a2 && a3 && a4 && v9)
  {
    v10 = *(NSObject **)(DerivedStorage + 16);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __fpirc_CopyPlayableEventsForItem_block_invoke;
    v15[3] = &unk_1E2FB0708;
    v15[4] = &v16;
    v15[5] = a3;
    v15[6] = DerivedStorage;
    v15[7] = a1;
    v15[8] = v9;
    v15[9] = a2;
    dispatch_sync(v10, v15);
    v11 = 0;
    v12 = v17;
    *a4 = v17[3];
    v12[3] = 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  v13 = (const void *)v17[3];
  if (v13)
    CFRelease(v13);
  if (v9)
    CFRelease(v9);
  _Block_object_dispose(&v16, 8);
  return v11;
}

void sub_192F3AE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void fpirc_GetCurrentTimeInCurrentEvent(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  NSObject *v9;
  uint64_t *v10;
  _QWORD v11[9];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  uint64_t v17;

  v12 = 0;
  v13 = &v12;
  v14 = 0x3810000000;
  v15 = &unk_19339E166;
  v16 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  v8 = (const void *)v7;
  if (a2 && v7)
  {
    v9 = *(NSObject **)(DerivedStorage + 16);
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __fpirc_GetCurrentTimeInCurrentEvent_block_invoke;
    v11[3] = &unk_1E2F9A0C0;
    v11[6] = a1;
    v11[7] = v8;
    v11[4] = &v12;
    v11[5] = DerivedStorage;
    v11[8] = a2;
    dispatch_sync(v9, v11);
  }
  else if (!v7)
  {
    goto LABEL_5;
  }
  CFRelease(v8);
LABEL_5:
  v10 = v13;
  *(_OWORD *)a3 = *((_OWORD *)v13 + 2);
  *(_QWORD *)(a3 + 16) = v10[6];
  _Block_object_dispose(&v12, 8);
}

void sub_192F3AF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t fpirc_CreateWrappedEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  const void *v6;
  uint64_t v7;

  v7 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigCFWeakReferenceHolderCopyReferencedObject();
  if (result)
  {
    v6 = (const void *)result;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *))(DerivedStorage + 96))(a1, result, a2, 0, &v7);
    CFRelease(v6);
    return v7;
  }
  return result;
}

uint64_t fpirc_UnwrapEvent(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5)
  {
    v6 = (const void *)v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(DerivedStorage + 72))(a1, v5, a2);
    CFRelease(v6);
  }
  return 0;
}

const void *fpirc_GetCurrentEventWrapperOnQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const void *ValueAtIndex;
  uint64_t v11;
  CFTypeRef *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 144))
    return 0;
  v5 = DerivedStorage;
  v6 = *(const __CFArray **)(DerivedStorage + 136);
  if (!v6)
    return 0;
  Count = CFArrayGetCount(v6);
  if (Count < 1)
    return 0;
  v8 = Count;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 136), v9);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, const void *))(v5 + 72))(a1, a2, ValueAtIndex);
    v12 = FigPlayerInterstitialEventCopyIdentifier(v11);
    if (FigCFEqual())
      break;
    if (v12)
      CFRelease(v12);
    if (v8 == ++v9)
      return 0;
  }
  return ValueAtIndex;
}

uint64_t FigPKDCPEProtectorCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFMutableSetRef Mutable;
  uint64_t v12;

  if (!a3)
    return 4294955146;
  MEMORY[0x19402F294](&FigPKDCPEProtectorGetClassID_sRegisterFigPKDCPEProtectorTypeOnce, RegisterFigPKDCPEProtectorType);
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955145;
  v8 = DerivedStorage;
  if (a2)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  v9 = FigReadWriteLockCreate();
  *(_QWORD *)v8 = v9;
  if (!v9)
    return 4294955145;
  FigDispatchOnceInitWithinObject();
  FigDispatchOnceInitWithinObject();
  FigDispatchOnceInitWithinObject();
  v10 = FigReentrantMutexCreate();
  *(_QWORD *)(v8 + 16) = v10;
  if (!v10)
    return 4294955145;
  Mutable = CFSetCreateMutable(a1, 0, 0);
  *(_QWORD *)(v8 + 24) = Mutable;
  if (!Mutable)
    return 4294955145;
  if (!*(_BYTE *)(v8 + 96))
  {
    v6 = FigCPEExternalProtectionMonitorCreateForMethods(a1, 4u, 0, 0, (_QWORD *)(v8 + 88));
    if ((_DWORD)v6)
      return v6;
    CMNotificationCenterGetDefaultLocalCenter();
    v6 = FigNotificationCenterAddWeakListener();
    if ((_DWORD)v6)
      return v6;
  }
  v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t ExternalProtectionStatusChangedCallback_3()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t FigPKDCPEProtectorCryptorWasInvalidated(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  if (*(_BYTE *)(DerivedStorage + 9) && !*(_BYTE *)(DerivedStorage + 8))
  {
    v4 = 4294954511;
  }
  else
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
    if (!*(_BYTE *)(DerivedStorage + 96))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    if (!*(_BYTE *)(DerivedStorage + 9))
      CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 24), a2);
    MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
    v4 = 0;
  }
  FigReadWriteLockUnlockForRead();
  return v4;
}

uint64_t ExternalProtectionRequiredChangedCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

BOOL FigPKDCPEProtectorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDCPEProtectorInvalidate(void *a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    if (*DerivedStorage)
    {
      FigReadWriteLockLockForWrite();
      v4 = *((unsigned __int8 *)v3 + 9);
      *((_BYTE *)v3 + 8) = *((_BYTE *)v3 + 9) == 0;
      *((_BYTE *)v3 + 9) = 1;
      FigReadWriteLockUnlockForWrite();
      FigReadWriteLockLockForRead();
      if (!v4)
      {
        MEMORY[0x19402EA0C](v3[2]);
        CFSetApplyFunction((CFSetRef)v3[3], (CFSetApplierFunction)InvalidateCryptorSetApplier, a1);
        MEMORY[0x19402EA24](v3[2]);
        v5 = v3[10];
        if (v5)
        {
          PKDKeyManagerInvalidate(v5);
          v6 = (const void *)v3[10];
          if (v6)
          {
            CFRelease(v6);
            v3[10] = 0;
          }
        }
        v7 = (const void *)v3[6];
        if (v7)
        {
          CFRelease(v7);
          v3[6] = 0;
        }
        v8 = (const void *)v3[8];
        if (v8)
        {
          CFRelease(v8);
          v3[8] = 0;
        }
        v9 = (const void *)v3[9];
        if (v9)
        {
          CFRelease(v9);
          v3[9] = 0;
        }
        if (v3[11])
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
          v10 = (const void *)v3[11];
          if (v10)
          {
            CFRelease(v10);
            v3[11] = 0;
          }
        }
      }
      FigReadWriteLockUnlockForRead();
      FigReadWriteLockLockForWrite();
      *((_BYTE *)v3 + 8) = 0;
      v11 = (const void *)v3[3];
      if (v11)
      {
        CFRelease(v11);
        v3[3] = 0;
      }
      FigSimpleMutexDestroy();
      v3[2] = 0;
      FigReadWriteLockUnlockForWrite();
    }
  }
  return 0;
}

uint64_t FigPKDCPEProtectorFinalize(void *a1)
{
  uint64_t *DerivedStorage;
  uint64_t result;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigPKDCPEProtectorInvalidate(a1);
  result = *DerivedStorage;
  if (*DerivedStorage)
    return FigReadWriteLockDestroy();
  return result;
}

__CFString *FigPKDCPEProtectorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  CFMutableStringRef Mutable;
  __CFString *v5;
  CFIndex v6;
  const char *v7;
  CFAllocatorRef v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = Mutable;
  if (DerivedStorage && Mutable)
  {
    v6 = CFGetRetainCount(a1);
    if (*(_BYTE *)(DerivedStorage + 9))
      v7 = " (invalidated)";
    else
      v7 = "";
    v8 = CFGetAllocator(a1);
    CFStringAppendFormat(v5, 0, CFSTR("<FigPKDPKDCPEProtector %p retainCount: %ld%s allocator: %p, >"), a1, v6, v7, v8);
  }
  return v5;
}

uint64_t FigPKDCPEProtectorCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFDataRef *a4)
{
  uint64_t DerivedStorage;
  uint64_t result;
  CFTypeRef *v9;
  char Methods;
  int v11;
  const __CFString *v12;
  const __CFString *v13;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && a4)
  {
    if (CFEqual(a2, CFSTR("ExternalProtectionRequiredForPlayback")))
    {
      if (!*(_BYTE *)(DerivedStorage + 96))
      {
        if (FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(DerivedStorage + 88)))
          v9 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
        else
          v9 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
        if (!*v9)
        {
          v13 = 0;
          goto LABEL_20;
        }
        v12 = (const __CFString *)CFRetain(*v9);
LABEL_18:
        v13 = v12;
LABEL_20:
        result = 0;
LABEL_21:
        *a4 = (CFDataRef)v13;
        return result;
      }
      return 4294954509;
    }
    if (CFEqual(a2, CFSTR("ExternalProtectionMethodsRequiredForPlayback")))
    {
      if (!*(_BYTE *)(DerivedStorage + 96))
      {
        Methods = FigCPEExternalProtectionMonitorGetMethods(*(_QWORD *)(DerivedStorage + 88));
        v11 = Methods & 1;
        if ((Methods & 2) != 0)
          v11 = 2;
        valuePtr = v11;
        v12 = (const __CFString *)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        goto LABEL_18;
      }
      return 4294954509;
    }
    if (CFEqual(a2, CFSTR("DisplayList")))
    {
      if (!*(_BYTE *)(DerivedStorage + 96))
        return FigCPEExternalProtectionMonitorCopyProperty(*(_QWORD *)(DerivedStorage + 88), CFSTR("DisplayList"), a3, (uint64_t)a4);
      return 4294954509;
    }
    if (CFEqual(a2, CFSTR("ApplicationAuthorizationChallengeProvider")))
    {
      result = 0;
      v13 = CFSTR("ApplicationAuthorizationChallengeProviderNone");
      goto LABEL_21;
    }
    if (CFEqual(a2, CFSTR("SessionID")))
      return PKDKeyManagerCopySessionID(*(_QWORD *)(DerivedStorage + 80), a4);
    else
      return 4294954512;
  }
  return result;
}

uint64_t FigPKDCPEProtectorSetProperty(uint64_t a1, const void *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t result;
  const void *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294955146;
  v6 = DerivedStorage;
  if (CFEqual(a2, CFSTR("DisplayList")))
  {
    if (*(_BYTE *)(v6 + 96))
    {
      return 4294954509;
    }
    else
    {
      LODWORD(result) = FigCPEExternalProtectionMonitorSetProperty(*(_QWORD **)(v6 + 88), CFSTR("DisplayList"), a3);
      if ((_DWORD)result == -12152)
        return 0;
      else
        return result;
    }
  }
  else if (CFEqual(a2, CFSTR("NeroTransport")))
  {
    v8 = *(const void **)(v6 + 72);
    *(_QWORD *)(v6 + 72) = a3;
    if (a3)
      CFRetain(a3);
    if (v8)
      CFRelease(v8);
    return 0;
  }
  else
  {
    return 4294954512;
  }
}

uint64_t InvalidateCryptorSetApplier(uint64_t a1)
{
  uint64_t result;
  uint64_t (*v3)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(result + 96))
  {
    if (!a1)
      return result;
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    result = FigNotificationCenterRemoveWeakListener();
    if (!a1)
      return result;
  }
  result = CMBaseObjectGetVTable();
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 8) + 24);
  if (v3)
    return v3(a1);
  return result;
}

uint64_t FigPKDCPEProtectorGetAggregateExternalProtectionStatus(uint64_t a1, _DWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t result;
  int Status;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && DerivedStorage)
  {
    if (*(_BYTE *)(DerivedStorage + 96))
    {
      return 4294954509;
    }
    else
    {
      Status = FigCPEExternalProtectionMonitorGetStatus(*(_QWORD *)(DerivedStorage + 88));
      result = 0;
      *a2 = Status;
    }
  }
  return result;
}

uint64_t FigPKDCPEProtectorCreateCryptor(const void *a1, const __CFAllocator *a2, unsigned int a3, const __CFDictionary *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  const void *Value;
  const void *v13;
  CFTypeID v14;
  __CFDictionary *Mutable;
  __CFDictionary *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t context;
  __CFDictionary *v32;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (*(_BYTE *)(DerivedStorage + 9))
    return 4294954511;
  if (!a5)
  {
    v16 = 0;
    v28 = 4294955146;
    goto LABEL_21;
  }
  if (a3 > 3)
  {
    v16 = 0;
    goto LABEL_52;
  }
  if (!a4)
  {
    v16 = 0;
    goto LABEL_20;
  }
  v11 = DerivedStorage;
  Value = CFDictionaryGetValue(a4, CFSTR("AuditToken"));
  if (Value && (v13 = Value, v14 = CFGetTypeID(Value), v14 == CFDataGetTypeID()))
  {
    Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v16 = Mutable;
    if (!Mutable)
    {
      v28 = 4294955145;
LABEL_21:
      if (cf)
        CFRelease(cf);
      goto LABEL_46;
    }
    CFDictionarySetValue(Mutable, CFSTR("AuditToken"), v13);
  }
  else
  {
    v16 = 0;
  }
  v17 = CFDictionaryGetValue(a4, CFSTR("Destination"));
  v18 = CFDictionaryGetValue(a4, CFSTR("FormatType"));
  v19 = CFDictionaryGetValue(a4, CFSTR("SecureStopManager"));
  if (!v18)
  {
LABEL_20:
    v28 = 4294955141;
    goto LABEL_21;
  }
  v20 = v19;
  if (v17 && !CFEqual(v17, CFSTR("DestinationLocal")))
  {
    if (CFEqual(v17, CFSTR("DestinationNero")))
    {
      if (CFEqual(v18, CFSTR("FormatTypePastis")))
      {
        if (*(_QWORD *)(v11 + 32) != -1)
          dispatch_once_f((dispatch_once_t *)(v11 + 32), (void *)v11, (dispatch_function_t)InitMovieIDForPastis);
        if (*(_QWORD *)(v11 + 56) != -1)
          dispatch_once_f((dispatch_once_t *)(v11 + 56), (void *)v11, (dispatch_function_t)InitOctaviaMovieIDForPastis);
        v27 = FigCPEOctaviaPKDCryptorCreate(a1, *(unint64_t **)(v11 + 64), *(_QWORD **)(v11 + 88), a4, a2, *(const void **)(v11 + 72), &cf);
        goto LABEL_41;
      }
      if (CFEqual(v18, CFSTR("FormatTypeMSE")))
      {
        v29 = *(_QWORD *)(v11 + 32);
        context = v11 + 80;
        v32 = v16;
        if (v29 != -1)
          dispatch_once_f((dispatch_once_t *)(v11 + 32), &context, (dispatch_function_t)InitKeyManagerForMSE);
        if (*(_QWORD *)(v11 + 56) != -1)
          dispatch_once_f((dispatch_once_t *)(v11 + 56), (void *)v11, (dispatch_function_t)InitOctaviaMovieIDForMSE);
        v27 = FigCPEOctaviaPKDCryptorCreateForMSE(a1, *(const void **)(v11 + 64), *(const void **)(v11 + 80), *(_QWORD **)(v11 + 88), a4, a2, *(const void **)(v11 + 72), &cf);
        goto LABEL_41;
      }
      goto LABEL_20;
    }
    if (CFEqual(v17, CFSTR("DestinationAirPlayReceiver")))
    {
      v26 = *(_QWORD *)(v11 + 48);
      v24 = *(const void **)(v11 + 88);
      v25 = a1;
      v23 = 0;
      goto LABEL_18;
    }
LABEL_52:
    v28 = 4294955136;
    goto LABEL_21;
  }
  v21 = *(_QWORD *)(v11 + 40);
  context = v11 + 80;
  v32 = v16;
  if (v21 == -1)
  {
    if (!v20)
      goto LABEL_16;
  }
  else
  {
    dispatch_once_f((dispatch_once_t *)(v11 + 40), &context, (dispatch_function_t)InitKeyManagerForPastis);
    if (!v20)
      goto LABEL_16;
  }
  v22 = KeyManagerSetSecureStopManager(*(_QWORD *)(v11 + 80), v20);
  if ((_DWORD)v22)
  {
LABEL_53:
    v28 = v22;
    goto LABEL_21;
  }
LABEL_16:
  if (CFEqual(v18, CFSTR("FormatTypePastis")))
  {
    v23 = *(_QWORD *)(v11 + 80);
    v24 = *(const void **)(v11 + 88);
    v25 = a1;
    v26 = 0;
LABEL_18:
    v27 = FigPKDCPECryptorCreate(v25, v26, v23, v24, a2, a4, &cf);
    goto LABEL_41;
  }
  if (!CFEqual(v18, CFSTR("FormatTypeMSE")))
  {
    v28 = 4294955141;
    goto LABEL_42;
  }
  v27 = FigPKDMSECPECryptorCreate(a1, *(const void **)(v11 + 80), *(const void **)(v11 + 88), a2, a4, &cf);
LABEL_41:
  v28 = v27;
LABEL_42:
  if ((_DWORD)v28)
    goto LABEL_21;
  CFSetAddValue(*(CFMutableSetRef *)(v11 + 24), cf);
  if (!*(_BYTE *)(v11 + 96))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v22 = FigNotificationCenterAddWeakListener();
    if ((_DWORD)v22)
      goto LABEL_53;
  }
  v28 = 0;
  *a5 = cf;
  cf = 0;
LABEL_46:
  if (v16)
    CFRelease(v16);
  return v28;
}

uint64_t InitKeyManagerForPastis(uint64_t a1)
{
  uint64_t result;

  result = PKDKeyManagerCreateForPastis(*MEMORY[0x1E0C9AE00], *(const __CFDictionary **)(a1 + 8));
  **(_QWORD **)a1 = result;
  return result;
}

_QWORD *InitMovieIDForPastis(uint64_t a1)
{
  _QWORD *result;

  result = PKDMovieIDCreateForPastis();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

uint64_t InitOctaviaMovieIDForPastis(uint64_t a1)
{
  return FigCPEOctaviaPKDMovieIDCreate(*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 48), *(const void **)(a1 + 72), (_QWORD *)(a1 + 64));
}

uint64_t InitKeyManagerForMSE(uint64_t a1)
{
  uint64_t result;

  result = PKDKeyManagerCreateForMSE(*MEMORY[0x1E0C9AE00], *(const __CFDictionary **)(a1 + 8));
  **(_QWORD **)a1 = result;
  return result;
}

uint64_t InitOctaviaMovieIDForMSE(uint64_t a1)
{
  return FigCPEOctaviaPKDMovieIDCreateForMSE(*MEMORY[0x1E0C9AE00], *(_QWORD *)(a1 + 80), *(const void **)(a1 + 72), (_QWORD *)(a1 + 64));
}

uint64_t RegisterFigPKDCPEProtectorType()
{
  FigCPEProtectorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigPKDCPEProtectorCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigFPCPEProtector]"));
}

void FigInstallVirtualDisplay()
{
  if (FigInstallVirtualDisplay_once != -1)
    dispatch_once(&FigInstallVirtualDisplay_once, &__block_literal_global_90);
}

uint64_t FigVirtualFramebuffer_GetSupportedDigitalOutModes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_SetDigitalOutMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_SubmitSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double, double, double, double);

  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, double, double, double, double, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v28)
    return v28(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_SwapWaitWithTimeout(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, double);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_SwapWaitSurfaceTimeout(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, double);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_GetVSyncRunLoopSource(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v2)
    return v2(a1);
  else
    return 0;
}

uint64_t FigVirtualFramebuffer_EnableVSyncNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_DisableVSyncNotifications(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_GetHotPlugRunLoopSource(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v2)
    return v2(a1);
  else
    return 0;
}

uint64_t FigVirtualFramebuffer_EnableHotPlugDetectNotifications(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_DisableHotPlugDetectNotifications(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_GetHDCPDownstreamState(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_GetDisplayCapabilities(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeID v6;
  uint64_t v7;
  CFTypeRef cf;

  cf = 0;
  FigBytePumpGetFigBaseObject(a1);
  v4 = v3;
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v5)
  {
    v5(v4, CFSTR("SupportsRotation"), *MEMORY[0x1E0C9AE00], &cf);
    if (cf)
    {
      v6 = CFGetTypeID(cf);
      if (v6 == CFBooleanGetTypeID())
      {
        if (CFBooleanGetValue((CFBooleanRef)cf))
        {
          v7 = 0x5A0000010ELL;
          if (!a2)
            return 0;
          goto LABEL_8;
        }
      }
    }
  }
  v7 = 0;
  if (a2)
  {
LABEL_8:
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 4) = v7;
    *(_BYTE *)(a2 + 12) = 1;
    *(_WORD *)(a2 + 13) = 0;
    *(_BYTE *)(a2 + 15) = 0;
  }
  return 0;
}

uint64_t FigVirtualFramebuffer_EnableMirroring(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_AcquireWritebackSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double);

  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v16)
    return v16(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_RelinquishWritebackSurface(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  result = CMBaseObjectGetVTable();
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 120);
  if (v9)
    return v9(a1, a2, a3, a4);
  return result;
}

uint64_t FigVirtualFramebuffer_CopyProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, _QWORD, uint64_t *);
  uint64_t v7;

  v7 = 0;
  FigBytePumpGetFigBaseObject(a1);
  v4 = v3;
  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v5)
    return 0;
  v5(v4, a2, *MEMORY[0x1E0C9AE00], &v7);
  return v7;
}

uint64_t FigVirtualFramebuffer_GetHDCPRunLoopSource(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v2)
    return v2(a1);
  else
    return 0;
}

uint64_t FigVirtualFramebuffer_HDCPSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 136);
  if (v10)
    return v10(a1, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_HDCPGetReply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVirtualFramebuffer_GetProtectionOptions(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigMetricItemPlaybackSummaryEventDeserializeAndCopy(void *a1, _QWORD *a2)
{
  int64_t int64;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  int64_t v8;
  double v9;
  double v10;
  int64_t v11;
  int64_t v12;
  uint64_t CMTime;
  const __CFAllocator *AllocatorForMedia;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef cf;
  __int128 v22;
  uint64_t v23;

  v22 = *MEMORY[0x1E0CA2E18];
  v23 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v20 = 0;
  cf = 0;
  v19 = 0;
  if (a1 && a2)
  {
    int64 = xpc_dictionary_get_int64(a1, "RecoverableErrorCount");
    v5 = xpc_dictionary_get_int64(a1, "StallCount");
    v6 = xpc_dictionary_get_int64(a1, "VariantSwitchCount");
    v7 = xpc_dictionary_get_int64(a1, "PlaybackDuration");
    v8 = xpc_dictionary_get_int64(a1, "MediaResourceRequestCount");
    v9 = xpc_dictionary_get_double(a1, "TimeSpentRecoveringFromStall");
    v10 = xpc_dictionary_get_double(a1, "TimeSpentInInitialStartup");
    v11 = xpc_dictionary_get_int64(a1, "TimeWeightedAverageBitrate");
    v12 = xpc_dictionary_get_int64(a1, "TimeWeightedPeakBitrate");
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageCopyCFDate();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFString();
        if (!(_DWORD)CMTime)
        {
          if (!xpc_dictionary_get_value(a1, "ErrorEvent")
            || (CMTime = FigMetricEventDeserializeEvent(), !(_DWORD)CMTime))
          {
            AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            v17 = v22;
            v18 = v23;
            CMTime = FigMetricItemPlaybackSummaryEventCreate(AllocatorForMedia, &v17, cf, v20, v19, int64, v5, v6, v9, v10, v7, v8, v11, v12, a2);
          }
        }
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v15 = CMTime;
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  return v15;
}

uint64_t FigMetricItemPlaybackSummaryEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  uint64_t v25;
  uint64_t DerivedStorage;
  uint64_t v27;
  void *v28;
  CFAbsoluteTime Current;
  __int128 v30;
  CFTypeRef v31;
  CFTypeRef v32;

  if (!a15)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v25 = CMDerivedObjectCreate();
  if (!(_DWORD)v25)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v27 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 136) = v27;
    if (v27)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 14;
      if (a3)
      {
        v28 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v28 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v28;
      v30 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v30;
      if (a4)
        v31 = CFRetain(a4);
      else
        v31 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v31;
      if (a5)
        v32 = CFRetain(a5);
      else
        v32 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v32;
      *(_QWORD *)(DerivedStorage + 64) = a6;
      *(_QWORD *)(DerivedStorage + 72) = a7;
      *(_QWORD *)(DerivedStorage + 80) = a8;
      *(_QWORD *)(DerivedStorage + 88) = a11;
      *(_QWORD *)(DerivedStorage + 96) = a12;
      *(double *)(DerivedStorage + 104) = a9;
      *(double *)(DerivedStorage + 112) = a10;
      *(_QWORD *)(DerivedStorage + 120) = a13;
      *(_QWORD *)(DerivedStorage + 128) = a14;
      v25 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v25)
        *a15 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v25;
}

uint64_t mes_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[7];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[3];
  if (v3)
    CFRelease(v3);
  return FigSimpleMutexDestroy();
}

CFStringRef mes_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMetricItemPlaybackSummaryEvent %p]"), a1);
}

void mes_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t mes_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 17));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 17));
  return v1;
}

uint64_t mes_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t mes_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef mes_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 136));
  return v2;
}

uint64_t mes_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 136));
  return v5;
}

void mes_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 48);
  JUMPOUT(0x19402EF04);
}

uint64_t mes_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 136));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 136));
  return v4;
}

uint64_t mes_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  int64_t v5;
  void (*v6)(__int128 *__return_ptr, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  const void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  int64_t v13;
  uint64_t (*v14)(uint64_t);
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  int64_t v17;
  uint64_t (*v18)(uint64_t);
  int64_t v19;
  uint64_t (*v20)(uint64_t);
  int64_t v21;
  double (*v22)(uint64_t, double);
  double v23;
  double v24;
  double (*v25)(uint64_t);
  uint64_t (*v26)(uint64_t);
  int64_t v27;
  uint64_t (*v28)(uint64_t);
  int64_t v29;
  xpc_object_t empty;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, xpc_object_t);
  uint64_t v35;
  __int128 v37;
  uint64_t v38;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v4)
    v5 = v4(a1);
  else
    v5 = -12782;
  xpc_dictionary_set_int64(a2, "EventID", v5);
  v6 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v6)
  {
    v6(&v37, a1);
  }
  else
  {
    v37 = *MEMORY[0x1E0CA2E18];
    v38 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v7 = FigXPCMessageSetCMTime();
  if ((_DWORD)v7)
    return v7;
  v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
    v8(a1);
  v7 = FigXPCMessageSetCFDate();
  if ((_DWORD)v7)
    return v7;
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v9)
    v10 = (const void *)v9(a1);
  else
    v10 = 0;
  v11 = FigXPCMessageSetCFString();
  if ((_DWORD)v11)
  {
    v35 = v11;
    empty = 0;
  }
  else
  {
    v12 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 16);
    if (v12)
      v13 = v12(a1);
    else
      v13 = 0;
    xpc_dictionary_set_int64(a2, "RecoverableErrorCount", v13);
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 24);
    if (v14)
      v15 = v14(a1);
    else
      v15 = 0;
    xpc_dictionary_set_int64(a2, "StallCount", v15);
    v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 32);
    if (v16)
      v17 = v16(a1);
    else
      v17 = 0;
    xpc_dictionary_set_int64(a2, "VariantSwitchCount", v17);
    v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 40);
    if (v18)
      v19 = v18(a1);
    else
      v19 = 0;
    xpc_dictionary_set_int64(a2, "PlaybackDuration", v19);
    v20 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 48);
    if (v20)
      v21 = v20(a1);
    else
      v21 = 0;
    xpc_dictionary_set_int64(a2, "MediaResourceRequestCount", v21);
    v22 = *(double (**)(uint64_t, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 56);
    v23 = 0.0;
    v24 = 0.0;
    if (v22)
      v24 = v22(a1, 0.0);
    xpc_dictionary_set_double(a2, "TimeSpentRecoveringFromStall", v24);
    v25 = *(double (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 64);
    if (v25)
      v23 = v25(a1);
    xpc_dictionary_set_double(a2, "TimeSpentInInitialStartup", v23);
    v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 72);
    if (v26)
      v27 = v26(a1);
    else
      v27 = 0;
    xpc_dictionary_set_int64(a2, "TimeWeightedAverageBitrate", v27);
    v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 80);
    if (v28)
      v29 = v28(a1);
    else
      v29 = 0;
    xpc_dictionary_set_int64(a2, "TimeWeightedPeakBitrate", v29);
    empty = xpc_dictionary_create_empty();
    v31 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 72) + 8);
    if (v31 && (v32 = v31(a1)) != 0)
    {
      v33 = v32;
      v34 = *(uint64_t (**)(uint64_t, xpc_object_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v34)
      {
        v35 = v34(v33, empty);
        if (!(_DWORD)v35)
          xpc_dictionary_set_value(a2, "ErrorEvent", empty);
      }
      else
      {
        v35 = 4294954514;
      }
    }
    else
    {
      v35 = 0;
    }
  }
  if (v10)
    CFRelease(v10);
  if (empty)
    CFRelease(empty);
  return v35;
}

uint64_t mes_getError()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t mes_getRecoverableErrorCount()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t mes_getStallCount()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t mes_getVariantSwitchCount()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t mes_getPlaybackDuration()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t mes_getMediaResourceRequestCount()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 96);
}

double mes_getTimeSpentRecoveringFromStall()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 104);
}

double mes_getTimeSpentInInitialStartup()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 112);
}

uint64_t mes_getTimeWeightedAverageBitrate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 120);
}

uint64_t mes_getTimeWeightedPeakBitrate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 128);
}

uint64_t FigPhotoGetImageType(const void *a1)
{
  CFTypeID v2;
  uint64_t result;

  MEMORY[0x19402F294](&FigPhotoGetImageType_onceToken, _once_FigPhotoGetImageType);
  v2 = CFGetTypeID(a1);
  result = 1;
  while (v2 != sTypes[result])
  {
    if (++result == 5)
      return 0;
  }
  return result;
}

CFTypeID _once_FigPhotoGetImageType()
{
  CFTypeID result;

  sTypes = 0;
  qword_1ECDC8750 = IOSurfaceGetTypeID();
  qword_1ECDC8758 = CVPixelBufferGetTypeID();
  qword_1ECDC8760 = CMSampleBufferGetTypeID();
  result = CGImageGetTypeID();
  qword_1ECDC8768 = result;
  return result;
}

uint64_t FigMetadataReaderCreateWithSampleBufferForIcy(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t result;
  CFTypeRef *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigMetadataReaderGetClassID();
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
    FigIcyMetadataParseSampleBuffer(a2, DerivedStorage, DerivedStorage + 1);
    result = 0;
    *a3 = 0;
  }
  return result;
}

void FigIcyMetadataFinalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *FigIcyMetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int (*v9)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *);
  CFStringRef v10;
  CFStringRef v11;
  const void *Value;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v2 = *MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, CFSTR(" FigIcyMetadataReader %p\n"), DerivedStorage);
  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v5)
  {
    v6 = v5(a1, 0, 0);
    if (v6 >= 1)
    {
      v7 = v6;
      CFStringAppendFormat(Mutable, 0, CFSTR("  Item Count = %d\n"), v6);
      for (i = 0; i != v7; ++i)
      {
        theDict = 0;
        cf = 0;
        v9 = *(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v9 || v9(a1, 0, 0, i, v2, &cf, &theDict))
          break;
        CFStringAppendFormat(Mutable, 0, CFSTR("   [%d]:\n"), i);
        if (cf)
        {
          v10 = CFCopyDescription(cf);
          if (v10)
          {
            v11 = v10;
            CFStringAppendFormat(Mutable, 0, CFSTR("    Value = %@\n"), v10);
            CFRelease(v11);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("    Properties:\n"));
          Value = CFDictionaryGetValue(theDict, CFSTR("key"));
          if (Value)
            CFStringAppendFormat(Mutable, 0, CFSTR("     Key = %@\n"), Value);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigIcyMetadataCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  const __CFString *v5;
  CFTypeRef v6;
  uint64_t result;

  if (FigCFEqual())
  {
    v5 = (const __CFString *)*MEMORY[0x1E0C9AE50];
LABEL_5:
    v6 = CFRetain(v5);
    result = 0;
    *a4 = v6;
    return result;
  }
  if (FigCFEqual())
  {
    v5 = CFSTR("com.nullsoft.icy");
    goto LABEL_5;
  }
  return 4294954512;
}

uint64_t FigIcyMetadataCopyValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, CFTypeRef *, CFTypeRef *);
  CFTypeRef *v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeRef v19;
  CFTypeRef cf;

  v19 = 0;
  cf = 0;
  if (!a1 || !a3 || !a6)
  {
    v16 = FigSignalErrorAt();
LABEL_20:
    v17 = v16;
    goto LABEL_14;
  }
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (!v14)
  {
    v17 = 4294954514;
    goto LABEL_14;
  }
  if (a7)
    v15 = &v19;
  else
    v15 = 0;
  v16 = v14(a1, a2, a3, 0, a5, &cf, v15);
  if ((_DWORD)v16)
    goto LABEL_20;
  if (a4 && CFGetTypeID(cf) != a4)
  {
    v17 = 4294954688;
LABEL_14:
    if (cf)
      CFRelease(cf);
    goto LABEL_16;
  }
  *a6 = cf;
  cf = 0;
  v17 = 0;
  if (a7)
  {
    *a7 = v19;
    return v17;
  }
LABEL_16:
  if (v19)
    CFRelease(v19);
  return v17;
}

uint64_t FigIcyMetadataHasKey(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t result;
  const __CFString *v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = a3;
  if (!DerivedStorage || !a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  v6 = DerivedStorage;
  if (FigIcyMetadataMapKeyToIcyKeyspace(a2, a3, &v8))
    return 0;
  result = *(_QWORD *)(v6 + 8);
  if (result)
    return FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent() != 0;
  return result;
}

uint64_t FigIcyMetadataGetKeyCount(uint64_t a1, const void *a2)
{
  if (CMBaseObjectGetDerivedStorage() && (!a2 || CFEqual(a2, CFSTR("icy"))))
    return FigCFDictionaryGetCount();
  FigSignalErrorAt();
  return 0;
}

uint64_t FigIcyMetadataCopyKeyAtIndex(uint64_t a1, const void *a2, CFIndex a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  CFArrayRef *v9;
  const __CFArray *Count;
  const void *ValueAtIndex;
  CFTypeRef v12;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  v9 = (CFArrayRef *)DerivedStorage;
  if (a2)
  {
    if (!CFEqual(a2, CFSTR("icy")))
      return FigSignalErrorAt();
  }
  Count = *v9;
  if (*v9)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= a3)
    return 4294954692;
  ValueAtIndex = CFArrayGetValueAtIndex(*v9, a3);
  if (!ValueAtIndex)
    return 4294954692;
  v12 = CFRetain(ValueAtIndex);
  result = 0;
  *a5 = v12;
  return result;
}

uint64_t FigIcyMetadataGetItemCount(uint64_t a1, const void *a2, const __CFString *a3)
{
  if (a3)
    return FigIcyMetadataHasKey(a1, (uint64_t)a2, a3);
  else
    return FigIcyMetadataGetKeyCount(a1, a2);
}

uint64_t FigIcyMetadataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, const __CFString *a3, CFIndex a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t DerivedStorage;
  uint64_t v14;
  uint64_t result;
  const __CFString *v16;
  uint64_t v17;
  CFTypeRef v18;
  _BOOL4 v19;
  _BOOL4 v20;
  __CFDictionary *MutableCopy;
  __CFDictionary *v22;
  const void *Value;
  CFTypeRef v24;
  CFTypeRef cf;
  const __CFString *v26;
  CFDictionaryRef theDict;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v26 = 0;
  theDict = 0;
  if (!(a6 | a7))
    return FigSignalErrorAt();
  v14 = DerivedStorage;
  result = FigIcyMetadataMapKeyToIcyKeyspace((uint64_t)a2, a3, &v26);
  if ((_DWORD)result)
    return result;
  v16 = v26;
  if (FigIcyMetadataGetItemCount(a1, a2, v26) <= a4)
    return 4294954689;
  v18 = 0;
  cf = 0;
  if (!v16)
  {
    FigIcyMetadataCopyKeyAtIndex(a1, CFSTR("icy"), a4, v17, &cf);
    v18 = cf;
    v26 = (const __CFString *)cf;
  }
  if (*(_QWORD *)(v14 + 8))
  {
    v19 = FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent() != 0;
    v18 = cf;
    if (!cf)
      goto LABEL_9;
    goto LABEL_8;
  }
  v19 = 0;
  if (v18)
LABEL_8:
    CFRelease(v18);
LABEL_9:
  if (theDict)
    v20 = v19;
  else
    v20 = 0;
  if (!v20)
    return 4294954689;
  if (a7)
  {
    MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if (!MutableCopy)
      return FigSignalErrorAt();
    v22 = MutableCopy;
    CFDictionaryRemoveValue(MutableCopy, CFSTR("value"));
    *(_QWORD *)a7 = v22;
  }
  if (!a6)
    return 0;
  Value = CFDictionaryGetValue(theDict, CFSTR("value"));
  if (Value)
    v24 = CFRetain(Value);
  else
    v24 = 0;
  result = 0;
  *(_QWORD *)a6 = v24;
  return result;
}

uint64_t FigIcyMetadataMapKeyToIcyKeyspace(uint64_t result, const __CFString *a2, const __CFString **a3)
{
  const void *v5;
  int v6;

  if (result)
  {
    v5 = (const void *)result;
    if (CFEqual((CFTypeRef)result, CFSTR("icy")))
    {
      result = 0;
    }
    else if (CFEqual(v5, CFSTR("comn")))
    {
      v6 = FigCFEqual();
      if (v6)
        a2 = CFSTR("StreamTitle");
      else
        a2 = 0;
      if (v6)
        result = 0;
      else
        result = 4294954691;
    }
    else
    {
      a2 = 0;
      result = 4294954690;
    }
  }
  *a3 = a2;
  return result;
}

uint64_t FigImageQueueCreateForCacheAndFanOut(int a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFArrayRef theArray)
{
  uint64_t Count;
  uint64_t v21;
  uint64_t DerivedStorage;
  uint64_t v23;
  const __CFAllocator *v24;
  const CFArrayCallBacks *v25;
  __CFArray *Mutable;
  CFMutableArrayRef v27;
  __CFArray *v28;
  CFIndex v29;
  const void *v30;
  const void *v31;
  const __CFDictionary *ValueAtIndex;
  uint64_t v33;
  void *v34;
  const void *v35;
  CFArrayRef Copy;
  dispatch_queue_t v37;
  CFMutableArrayRef v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  CFTypeRef v43;
  uint64_t v45;
  const __CFAllocator *v46;
  const __CFArray *v47;
  char v48;
  CFTypeRef cf;
  void *value;
  char __str[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  cf = 0;
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4 || !a2 || !a3)
    return FigSignalErrorAt();
  Count = CFArrayGetCount(a2);
  if (Count != CFArrayGetCount(a3) || Count <= 0)
  {
LABEL_28:
    v21 = FigSignalErrorAt();
    goto LABEL_29;
  }
  FigImageQueueGetClassID();
  v21 = CMDerivedObjectCreate();
  if (!(_DWORD)v21)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v23 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 24) = v23;
    if (v23)
    {
      v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v25 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
      v27 = CFArrayCreateMutable(v24, Count, v25);
      v28 = v27;
      if (Mutable)
      {
        v46 = v24;
        v47 = a2;
        if (v27)
        {
          v29 = 0;
          v30 = (const void *)*MEMORY[0x1E0C9AE50];
          v31 = (const void *)*MEMORY[0x1E0C9AE40];
          while (1)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v29);
            value = 0;
            v48 = 0;
            v33 = fiqcfo_createPixelBufferConformerForOptions(a1, ValueAtIndex, &v48, &value);
            if ((_DWORD)v33)
              break;
            v34 = value;
            CFArrayAppendValue(v28, value);
            if (v48)
              v35 = v30;
            else
              v35 = v31;
            CFArrayAppendValue(Mutable, v35);
            if (v34)
              CFRelease(v34);
            if (Count == ++v29)
            {
              *(_QWORD *)(DerivedStorage + 8) = Mutable;
              *(_QWORD *)(DerivedStorage + 16) = v28;
              Copy = CFArrayCreateCopy(v46, v47);
              *(_QWORD *)DerivedStorage = Copy;
              if (Copy)
              {
                v37 = dispatch_queue_create("com.apple.coremedia.imagequeue.cache", 0);
                *(_QWORD *)(DerivedStorage + 40) = v37;
                if (v37)
                {
                  v38 = CFArrayCreateMutable(v46, 0, MEMORY[0x1E0C9B378]);
                  *(_QWORD *)(DerivedStorage + 48) = v38;
                  if (v38)
                  {
                    *(_DWORD *)(DerivedStorage + 88) = 0;
                    v39 = MEMORY[0x1E0CA2E18];
                    *(_OWORD *)(DerivedStorage + 56) = *MEMORY[0x1E0CA2E18];
                    *(_QWORD *)(DerivedStorage + 72) = *(_QWORD *)(v39 + 16);
                    *(_BYTE *)(DerivedStorage + 37) = 0;
                    *(_DWORD *)(DerivedStorage + 1036) = 3;
                    *(_QWORD *)(DerivedStorage + 112) = 1;
                    v40 = FigCFWeakReferenceHolderCreateWithReferencedObject();
                    *(_QWORD *)(DerivedStorage + 96) = v40;
                    if (v40)
                    {
                      v54 = 0u;
                      v55 = 0u;
                      v52 = 0u;
                      v53 = 0u;
                      *(_OWORD *)__str = 0u;
                      snprintf(__str, 0x50uLL, "com.apple.coremedia.imagequeue.memorypressure.%p", v47);
                      if (fiqcfo_createSharedMemoryPressureDispatchQueue_sCreateSharedMemoryPressureDispatchQueueOnce != -1)
                        dispatch_once(&fiqcfo_createSharedMemoryPressureDispatchQueue_sCreateSharedMemoryPressureDispatchQueueOnce, &__block_literal_global_91);
                      v41 = dispatch_queue_create_with_target_V2(__str, 0, (dispatch_queue_t)fiqcfo_createSharedMemoryPressureDispatchQueue_sFIQCFOSharedMemoryPressureDispatchQueue);
                      *(_QWORD *)(DerivedStorage + 120) = v41;
                      v42 = dispatch_source_create(MEMORY[0x1E0C80DA8], 0, 7uLL, v41);
                      *(_QWORD *)(DerivedStorage + 104) = v42;
                      if (v42)
                      {
                        dispatch_source_set_event_handler_f(v42, (dispatch_function_t)fiqcfo_MemoryPressureHandler);
                        dispatch_set_context(*(dispatch_object_t *)(DerivedStorage + 104), *(void **)(DerivedStorage + 96));
                        CFRetain(*(CFTypeRef *)(DerivedStorage + 96));
                        dispatch_set_finalizer_f(*(dispatch_object_t *)(DerivedStorage + 104), (dispatch_function_t)fiqcfo_FinalizeMemoryPressureSource);
                        dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 104));
                        v43 = cf;
                        CMBaseObjectGetDerivedStorage();
                        value = 0;
                        CMNotificationCenterGetDefaultLocalCenter();
                        fiqcfo_CopyImageQueueArray((uint64_t)v43, &value, 0, 0);
                      }
                    }
                  }
                }
              }
              goto LABEL_28;
            }
          }
        }
        else
        {
          v33 = FigSignalErrorAt();
        }
        v45 = v33;
        CFRelease(Mutable);
      }
      else
      {
        v45 = FigSignalErrorAt();
      }
      if (v28)
        CFRelease(v28);
      goto LABEL_35;
    }
    goto LABEL_28;
  }
LABEL_29:
  v45 = v21;
LABEL_35:
  if (cf)
    CFRelease(cf);
  return v45;
}

uint64_t fiqcfo_createPixelBufferConformerForOptions(int a1, const __CFDictionary *cf, _BYTE *a3, _QWORD *a4)
{
  const __CFDictionary *v6;
  CFTypeID v7;
  uint64_t v8;

  v6 = cf;
  if (cf)
  {
    v7 = CFGetTypeID(cf);
    if (v7 == CFDictionaryGetTypeID())
    {
      CFDictionaryGetValue(v6, CFSTR("DestinationPixelBufferAttributes"));
      LOBYTE(v6) = CFDictionaryGetValue(v6, CFSTR("EnsureModifiableImageBuffers")) == (const void *)*MEMORY[0x1E0C9AE50];
    }
    else
    {
      LOBYTE(v6) = 0;
    }
  }
  v8 = VTPixelBufferConformerCreateWithAttributes();
  if (!(_DWORD)v8)
  {
    *a3 = (_BYTE)v6;
    *a4 = 0;
  }
  return v8;
}

void fiqcfo_MemoryPressureHandler()
{
  void *v0;
  uint64_t DerivedStorage;

  v0 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), v0, (dispatch_function_t)fiqcfo_MemoryPressureHandlerNoLock);
    CFRelease(v0);
  }
}

void fiqcfo_finalize(uint64_t a1)
{
  CFArrayRef theArray;

  CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  theArray = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_copyProperty(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

uint64_t fiqcfo_setProperty(const void *a1, const void *a2, const void *a3)
{
  CFTypeID v6;
  uint64_t v7;
  CFTypeID TypeID;
  CFTypeID v9;
  CFTypeID v10;
  CFTypeID v11;
  uint64_t DerivedStorage;
  CFTypeRef v13;
  CFTypeID v14;
  CMTime v16;
  CMTime context;
  CFTypeRef cf;
  CFTypeRef v19;
  CFTypeRef v20;

  CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v20 = 0;
  cf = 0;
  if (CFEqual(CFSTR("PreventDisplaySleepDuringVideoPlayback"), a2))
  {
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 == CFBooleanGetTypeID())
        fiqcfo_CopyImageQueueArray((uint64_t)a1, &v20, 0, 0);
    }
    v7 = FigSignalErrorAt();
  }
  else
  {
    v7 = 0;
  }
  if (CFEqual(CFSTR("Duration"), a2))
  {
    if (a3)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3))
        fiqcfo_CopyImageQueueArray((uint64_t)a1, &v20, 0, 0);
    }
    v7 = FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("EnableImageQueueTiming"), a2)
    || CFEqual(CFSTR("FigImageQueueProperty_EnqueueResetsSystemSleepTimer"), a2))
  {
LABEL_14:
    if (a3)
    {
LABEL_15:
      v9 = CFGetTypeID(a3);
      v10 = CFBooleanGetTypeID();
      goto LABEL_16;
    }
LABEL_39:
    v7 = FigSignalErrorAt();
    goto LABEL_40;
  }
  if (CFEqual(CFSTR("FigImageQueueProperty_Timebase"), a2))
  {
    if (a3)
    {
      v11 = CFGetTypeID(a3);
      if (v11 != CMTimebaseGetTypeID())
        goto LABEL_39;
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    context.value = (CMTimeValue)CFRetain(a1);
    if (a3)
      v13 = CFRetain(a3);
    else
      v13 = 0;
    *(_QWORD *)&context.timescale = v13;
    dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), &context, (dispatch_function_t)fiqcfo_SetTimebaseNoLock);
    if (*(_QWORD *)&context.timescale)
      CFRelease(*(CFTypeRef *)&context.timescale);
  }
  else
  {
    if (CFEqual(CFSTR("FigImageQueueProperty_CAImageQueueCaptionsMayAppearHint"), a2))
      goto LABEL_14;
    if (CFEqual(CFSTR("FigImageQueueProperty_DurationAllowedForCachedVideoFrames"), a2))
    {
      context = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      CMTimeMakeFromDictionary(&context, (CFDictionaryRef)a3);
      v16 = context;
      fiqcfo_SetDurationAllowedForCachedVideoFrames(a1, (__int128 *)&v16.value);
      goto LABEL_40;
    }
    if (CFEqual(CFSTR("FigImageQueueProperty_DisableColorMatching"), a2))
    {
      if (!a3)
LABEL_17:
        fiqcfo_CopyImageQueueArray((uint64_t)a1, &v20, 0, 0);
      goto LABEL_15;
    }
    if (CFEqual(CFSTR("VideoEnhancementMode"), a2))
    {
      if (a3)
      {
        v9 = CFGetTypeID(a3);
        v10 = CFStringGetTypeID();
LABEL_16:
        if (v9 == v10)
          goto LABEL_17;
        goto LABEL_39;
      }
      goto LABEL_39;
    }
    if (CFEqual(CFSTR("FigImageQueueProperty_ImageQueueConfigurationArrayForFanout"), a2))
    {
      if (!a3 || (v14 = CFArrayGetTypeID(), v14 == CFGetTypeID(a3)))
        fiqcfo_CopyImageQueueArray((uint64_t)a1, &v20, &v19, &cf);
      goto LABEL_39;
    }
    v7 = 4294954512;
  }
LABEL_40:
  if (v20)
    CFRelease(v20);
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  return v7;
}

void fiqcfo_CopyImageQueueArray(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 24));
  if (a2)
  {
    v8 = *(CFTypeRef *)DerivedStorage;
    if (*(_QWORD *)DerivedStorage)
      v8 = CFRetain(v8);
    *a2 = v8;
  }
  if (a3)
  {
    v9 = *(CFTypeRef *)(DerivedStorage + 8);
    if (v9)
      v9 = CFRetain(v9);
    *a3 = v9;
  }
  if (a4)
  {
    v10 = *(CFTypeRef *)(DerivedStorage + 16);
    if (v10)
      v10 = CFRetain(v10);
    *a4 = v10;
  }
  JUMPOUT(0x19402EF04);
}

void fiqcfo_OccupancyChangedNotification(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterPostNotification();
  FigMemoryBarrier();
  if ((int)FigAtomicAdd32() >= 1)
    fiqcfo_UpdateCachedVideoFrames(a2, 1);
}

uint64_t fiqcfo_ImageReleasedNotification()
{
  return CMNotificationCenterPostNotification();
}

void fiqcfo_DisplaySizeChangedNotification(uint64_t a1, uint64_t a2)
{
  CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  fiqcfo_GetMaximumDisplaySize(a2);
}

void sub_192F3F82C()
{
  const void *v0;

  FigCFDictionarySetCGSize();
  CMNotificationCenterPostNotification();
  if (v0)
    CFRelease(v0);
}

void fiqcfo_UpdateCachedVideoFrames(const void *a1, int a2)
{
  uint64_t DerivedStorage;
  _QWORD *v5;
  NSObject *v6;
  _QWORD v7[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7[0] = 0;
  v7[1] = 0;
  if (a2)
  {
    v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040FFEA222EuLL);
    if (!v5)
      return;
  }
  else
  {
    v5 = v7;
  }
  *v5 = CFRetain(a1);
  *((_BYTE *)v5 + 8) = 0;
  *((_BYTE *)v5 + 9) = a2;
  v6 = *(NSObject **)(DerivedStorage + 40);
  if (a2)
    dispatch_async_f(v6, v5, (dispatch_function_t)fiqcfo_UpdateCachedVideoFramesNoLock);
  else
    dispatch_sync_f(v6, v5, (dispatch_function_t)fiqcfo_UpdateCachedVideoFramesNoLock);
}

void fiqcfo_UpdateCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  int v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  CMTimeEpoch v8;
  opaqueCMSampleBuffer *ValueAtIndex;
  __int128 v10;
  CMTime time2;
  CMTime time1;
  CMTime rhs;
  CMTime lhs;
  CMTime v15;
  CMTime v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 37))
  {
    memset(&v16, 0, sizeof(v16));
    CMTimebaseGetTime(&v16, *(CMTimebaseRef *)(DerivedStorage + 80));
    memset(&v15, 0, sizeof(v15));
    lhs = v16;
    rhs = *(CMTime *)(v3 + 56);
    CMTimeSubtract(&v15, &lhs, &rhs);
    memset(&lhs, 0, sizeof(lhs));
    rhs = v16;
    time1 = *(CMTime *)(v3 + 56);
    CMTimeAdd(&lhs, &rhs, &time1);
    if (!*(_BYTE *)(a1 + 8))
    {
      v4 = *(_DWORD *)(v3 + 32);
      if (v4 < 1)
      {
        if (v4 < 0)
          v15 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E28];
      }
      else
      {
        lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
      }
    }
    Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 48));
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      v10 = *MEMORY[0x1E0CA2E18];
      v8 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
      do
      {
        ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 48), v7);
        *(_OWORD *)&rhs.value = v10;
        rhs.epoch = v8;
        if (ValueAtIndex)
          CMSampleBufferGetOutputPresentationTimeStamp(&rhs, ValueAtIndex);
        time1 = rhs;
        time2 = v15;
        if (CMTimeCompare(&time1, &time2) < 0 || (time1 = rhs, time2 = lhs, CMTimeCompare(&time1, &time2) >= 1))
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v3 + 48), v7--);
          --v6;
          FigAtomicDecrement32();
        }
        ++v7;
      }
      while (v7 < v6);
    }
  }
  else
  {
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 48));
    FigAtomicBitAnd32();
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  if (*(_BYTE *)(a1 + 9))
    free((void *)a1);
}

void fiqcfo_GetMaximumDisplaySize(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_CopyCachedVideoFrames(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _QWORD v5[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5[0] = CFRetain(a1);
  v5[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), v5, (dispatch_function_t)fiqcfo_CopyCachedVideoFramesNoLock);
}

CFDictionaryRef fiqcfo_CopyCachedTimeRange(const void *a1, CFDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v5;
  __int128 v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  opaqueCMSampleBuffer *ValueAtIndex;
  const __CFAllocator *v11;
  CFDictionaryRef result;
  __int128 v13;
  CMTimeRange start;
  CMTime time2;
  CMTime time1;
  CMTimeRange v17;
  CMTime v18;
  CMTime v19;
  const __CFArray *v20;
  _QWORD context[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v20 = 0;
  *(_OWORD *)&v19.value = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v19.epoch = v5;
  v13 = *(_OWORD *)&v19.value;
  *(_OWORD *)&v18.value = *(_OWORD *)&v19.value;
  v18.epoch = v5;
  v6 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v17.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v17.start.epoch = v6;
  *(_OWORD *)&v17.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  *a2 = 0;
  fiqcfo_UpdateCachedVideoFrames(a1, 0);
  context[0] = CFRetain(a1);
  context[1] = &v20;
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), context, (dispatch_function_t)fiqcfo_CopyCachedVideoFramesNoLock);
  if (v20)
  {
    Count = CFArrayGetCount(v20);
    if (Count >= 1)
    {
      v8 = Count;
      for (i = 0; v8 != i; ++i)
      {
        ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(v20, i);
        *(_OWORD *)&start.start.value = v13;
        start.start.epoch = v5;
        if (ValueAtIndex)
          CMSampleBufferGetOutputPresentationTimeStamp(&start.start, ValueAtIndex);
        if (i)
        {
          time1 = start.start;
          time2 = v19;
          if (CMTimeCompare(&time1, &time2) < 0)
            v19 = start.start;
          time1 = start.start;
          time2 = v18;
          if (CMTimeCompare(&time1, &time2) < 1)
            continue;
        }
        else
        {
          v19 = start.start;
        }
        v18 = start.start;
      }
    }
    if (v20)
      CFRelease(v20);
  }
  start.start = v19;
  time1 = v18;
  CMTimeRangeFromTimeToTime(&v17, &start.start, &time1);
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  start = v17;
  result = CMTimeRangeCopyAsDictionary(&start, v11);
  *a2 = result;
  return result;
}

void fiqcfo_CopyGPURegistryIDIfSingular(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_CopyCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  **(_QWORD **)(a1 + 8) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(DerivedStorage + 48));
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void fiqcfo_SetDurationAllowedForCachedVideoFrames(const void *a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v5;
  __int128 v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CFRetain(a1);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  dispatch_sync_f(*(dispatch_queue_t *)(DerivedStorage + 40), &v5, (dispatch_function_t)fiqcfo_SetDurationAllowedForCachedVideoFramesNoLock);
}

uint64_t fiqcfo_AddListenersOnFanoutImageQueue()
{
  uint64_t v0;
  uint64_t result;
  BOOL v2;

  CMNotificationCenterGetDefaultLocalCenter();
  v0 = 0;
  do
  {
    result = FigNotificationCenterAddWeakListener();
    if ((_DWORD)result)
      break;
    v2 = v0 == 96;
    v0 += 24;
  }
  while (!v2);
  return result;
}

uint64_t fiqcfo_RemoveListenersOnFanoutImageQueue()
{
  uint64_t i;
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  for (i = 0; i != 120; i += 24)
    result = FigNotificationCenterRemoveWeakListener();
  return result;
}

void fiqcfo_SetTimebaseNoLock(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 80);
  *(_QWORD *)(DerivedStorage + 80) = *(_QWORD *)(a1 + 8);
  fiqcfo_UpdateCacheIsEnabledNoLock();
  *(_QWORD *)(a1 + 8) = v3;
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

uint64_t fiqcfo_UpdateCacheIsEnabledNoLock()
{
  uint64_t result;
  BOOL v2;
  uint64_t v3;

  result = CMBaseObjectGetDerivedStorage();
  v2 = (*(_DWORD *)(result + 68) & 0x1D) == 1 && *(_QWORD *)(result + 80) != 0;
  v3 = *(_QWORD *)(result + 112);
  if (v3 == 4 || v3 == 2)
    v2 = 0;
  *(_BYTE *)(result + 37) = v2;
  return result;
}

void fiqcfo_SetDurationAllowedForCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage;
  __int128 v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(DerivedStorage + 72) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(DerivedStorage + 56) = v3;
  fiqcfo_UpdateCacheIsEnabledNoLock();
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
}

void fiqcfo_flush(uint64_t a1)
{
  CFArrayRef theArray;

  CMBaseObjectGetDerivedStorage();
  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_canEnqueueImage(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_enqueueImage(uint64_t a1)
{
  CFArrayRef v2;
  CFArrayRef v3;
  CFArrayRef theArray[19];

  theArray[17] = *(CFArrayRef *)MEMORY[0x1E0C80C00];
  CMBaseObjectGetDerivedStorage();
  v3 = 0;
  theArray[0] = 0;
  v2 = 0;
  fiqcfo_CopyImageQueueArray(a1, theArray, &v3, &v2);
}

void fiqcfo_setAsync(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_setDirection(uint64_t a1)
{
  CFArrayRef theArray;

  CMBaseObjectGetDerivedStorage();
  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_setUpcomingImageInfo(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_getOccupancyInfo(uint64_t a1)
{
  uint64_t v1;

  v1 = 0;
  fiqcfo_CopyImageQueueArray(a1, &v1, 0, 0);
}

uint64_t fiqcfo_copyPerformanceDictionary(uint64_t a1, __CFDictionary **a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return PIQCopyPerformanceDictionaryForInstanceStatistics((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (int *)(DerivedStorage + 136), a2);
}

void fiqcfo_getSafeDisplayDuration(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)a2 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v3 + 16);
  v4 = 0;
  fiqcfo_CopyImageQueueArray(a1, &v4, 0, 0);
}

void fiqcfo_postNotification(uint64_t a1)
{
  CFArrayRef theArray;

  theArray = 0;
  fiqcfo_CopyImageQueueArray(a1, &theArray, 0, 0);
}

void fiqcfo_AddFrameToCachedVideoFramesNoLock(uint64_t a1)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  opaqueCMSampleBuffer *ValueAtIndex;
  CFIndex v8;
  const void *v10;
  __int128 v11;
  CMTime time2;
  CMTime time1;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v14.value = *MEMORY[0x1E0CA2E18];
  v3 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v14.epoch = v3;
  Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
  if (Count < 1)
  {
    v6 = 0;
  }
  else
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 48), v6);
      *(_OWORD *)&time1.value = v11;
      time1.epoch = v3;
      if (ValueAtIndex)
        CMSampleBufferGetOutputPresentationTimeStamp(&time1, ValueAtIndex);
      v14 = time1;
      time2 = *(CMTime *)(a1 + 24);
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        break;
      if (v5 == ++v6)
      {
        v6 = v5;
        break;
      }
    }
  }
  time1 = v14;
  time2 = *(CMTime *)(a1 + 24);
  if (CMTimeCompare(&time1, &time2))
  {
    CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 48), v6, *(const void **)(a1 + 8));
    FigAtomicIncrement32();
    v8 = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 48));
    if (v8 <= 2147483646 && v8 > *(int *)(DerivedStorage + 1032))
      *(_DWORD *)(DerivedStorage + 1032) = v8;
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v10 = *(const void **)(a1 + 8);
  if (v10)
    CFRelease(v10);
}

uint64_t __fiqcfo_createSharedMemoryPressureDispatchQueue_block_invoke()
{
  uint64_t result;

  result = FigDispatchQueueCreateWithPriority();
  fiqcfo_createSharedMemoryPressureDispatchQueue_sFIQCFOSharedMemoryPressureDispatchQueue = result;
  return result;
}

uint64_t fiqcfo_MemoryPressureHandlerNoLock(uint64_t a1)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    *(_QWORD *)(result + 112) = dispatch_source_get_data(*(dispatch_source_t *)(result + 104));
    return fiqcfo_UpdateCacheIsEnabledNoLock();
  }
  return result;
}

uint64_t FigCaptionRendererCALayerOutputNodeCreate(_QWORD *a1)
{
  uint64_t result;
  const void *v3;
  _QWORD *DerivedStorage;
  _QWORD v5[6];
  uint64_t v6;
  const void *v7;

  if (!a1)
    return FigSignalErrorAt();
  *a1 = 0;
  v7 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererCALayerOutputNodeGetClassID_sRegisterFigCaptionRendererCALayerOutputNodeBaseTypeOnce, RegisterFigCaptionRendererCALayerOutputNodeBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v3 = v7;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    v6 = 0;
    FigCaptionRendererOutputNodeCreate((uint64_t)v7, &v6);
    *DerivedStorage = v6;
    CFRetain(v3);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __FigCaptionRendererCALayerOutputNodeCreate_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = DerivedStorage;
    v5[5] = v3;
    dispatch_async(MEMORY[0x1E0C80D38], v5);
    result = 0;
    *a1 = 0;
  }
  return result;
}

uint64_t FigCaptionRendererCALayerOutputNodeAttachToCALayer(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  double v4;
  double v5;
  double v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  objc_msgSend(a2, "bounds");
  objc_msgSend(*(id *)(DerivedStorage + 8), "setBounds:");
  objc_msgSend(a2, "bounds");
  v5 = v4 * 0.5;
  objc_msgSend(a2, "bounds");
  objc_msgSend(*(id *)(DerivedStorage + 8), "setPosition:", v5, v6 * 0.5);
  objc_msgSend(a2, "addSublayer:", *(_QWORD *)(DerivedStorage + 8));
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  return 0;
}

void FigCaptionRendererCALayerOutputNodeFinalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  _QWORD block[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNodeFinalize_block_invoke;
  block[3] = &unk_1E2F88548;
  block[4] = v1;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

__CFString *FigCaptionRendererCALayerOutputNodeCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigCaptionRendererCALayerOutputNode: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererCALayerOutputNode <FigCaptionRendererOutputNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_AddChildNode(const void *a1, const void *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const void *);
  _QWORD v10[6];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_AddChildNode_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 24);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveChildNode(uint64_t a1, const void *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const void *);
  _QWORD block[5];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2)
    CFRetain(a2);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveChildNode_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v4 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, const void *))(v6 + 32);
  if (v7)
    return v7(v4, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetChildNodes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveAllChildNodes(const void *a1)
{
  uint64_t *DerivedStorage;
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  _QWORD block[5];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_RemoveAllChildNodes_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a1;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v3 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t))(v5 + 56);
  if (v6)
    return v6(v3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetPosition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetPosition(const void *a1, double a2, double a3)
{
  uint64_t *DerivedStorage;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, double, double);
  _QWORD block[7];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetPosition_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  *(double *)&block[5] = a2;
  *(double *)&block[6] = a3;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v7 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 72);
  if (v10)
    return v10(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSize(const void *a1, double a2, double a3)
{
  uint64_t *DerivedStorage;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, double, double);
  _QWORD block[7];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSize_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  *(double *)&block[5] = a2;
  *(double *)&block[6] = a3;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v7 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, double, double))(v9 + 88);
  if (v10)
    return v10(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetClipToBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 96);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetClipToBounds(const void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  _QWORD v10[5];
  char v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetClipToBounds_block_invoke;
  v10[3] = &__block_descriptor_41_e5_v8__0l;
  v10[4] = a1;
  v11 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 104);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 112);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetContent(const void *a1, const void *a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const void *);
  _QWORD v10[6];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetContent_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  v10[5] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, const void *))(v7 + 120);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_BeginScene()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_57_1);
  return 0;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_EndScene()
{
  dispatch_async(MEMORY[0x1E0C80D38], &__block_literal_global_58);
  return 0;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetCornerRadius(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 144);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetCornerRadius(const void *a1, double a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, double);
  _QWORD v10[6];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetCornerRadius_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  *(double *)&v10[5] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, double))(v7 + 152);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_GetWindowOpacity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetWindowOpacity(const void *a1, double a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, double);
  _QWORD v10[6];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetWindowOpacity_block_invoke;
  v10[3] = &__block_descriptor_48_e5_v8__0l;
  v10[4] = a1;
  *(double *)&v10[5] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, double))(v7 + 168);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_AddAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t ProtocolVTable;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  objc_msgSend(MEMORY[0x1E0CD28B0], "begin");
  if (!pthread_main_np())
    objc_msgSend(MEMORY[0x1E0CD28B0], "activateBackground:", 1);
  objc_msgSend(MEMORY[0x1E0CD28B0], "setDisableActions:", 1);
  objc_msgSend(*(id *)(DerivedStorage + 8), "addAnimation:forKey:", a2, a3);
  objc_msgSend(MEMORY[0x1E0CD28B0], "commit");
  v6 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v8 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v8)
    return 4294954508;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 176);
  if (v9)
    return v9(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetOptions(const void *a1, const void *a2, const void *a3)
{
  uint64_t *DerivedStorage;
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const void *, const void *);
  _QWORD block[7];

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  if (a2)
    CFRetain(a2);
  if (a3)
    CFRetain(a3);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetOptions_block_invoke;
  block[3] = &__block_descriptor_56_e5_v8__0l;
  block[4] = a1;
  block[5] = a3;
  block[6] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], block);
  v7 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, const void *, const void *))(v9 + 184);
  if (v10)
    return v10(v7, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSeparated(const void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  _QWORD v10[5];
  char v11;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_SetSeparated_block_invoke;
  v10[3] = &__block_descriptor_41_e5_v8__0l;
  v10[4] = a1;
  v11 = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v10);
  v5 = *DerivedStorage;
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 192);
  if (v8)
    return v8(v5, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererCALayerOutputNode_FigCaptionRendererOutputNodeProtocol_DumpInfo()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererOutputNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 200);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t RegisterFigCaptionRendererCALayerOutputNodeBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererCALayerOutputNodeBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererCALayerOutputNode]"));
}

uint64_t FigSampleBufferConsumerForDataQueueCreate(const void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  _QWORD *DerivedStorage;
  uint64_t v9;
  const __CFBoolean *BooleanValue;
  uint64_t v11;

  v4 = 4294951506;
  if (a1 && a4)
  {
    fig_note_initialize_category_with_default_work_cf();
    fig_note_initialize_category_with_default_work_cf();
    FigSampleBufferConsumerGetClassID();
    v7 = CMDerivedObjectCreate();
    if (!(_DWORD)v7)
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      v9 = FigReentrantMutexCreate();
      DerivedStorage[1] = v9;
      if (!v9)
        return 4294951505;
      *DerivedStorage = CFRetain(a1);
      BooleanValue = (const __CFBoolean *)FigCFDictionaryGetBooleanValue();
      if (!BooleanValue
        || !CFBooleanGetValue(BooleanValue)
        || (v11 = FigDispatchQueueCreateWithPriority(), (DerivedStorage[6] = v11) != 0))
      {
        v4 = 0;
        *a4 = 0;
        return v4;
      }
      return FigSignalErrorAt();
    }
    return v7;
  }
  return v4;
}

uint64_t sbcdq_finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  const void *v4;
  NSObject *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    v2 = *(_QWORD *)DerivedStorage;
    v3 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v3)
      v3(v2);
  }
  v4 = *(const void **)(v1 + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v1 + 32) = 0;
  }
  v5 = *(NSObject **)(v1 + 48);
  if (v5)
  {
    dispatch_release(v5);
    *(_QWORD *)(v1 + 48) = 0;
  }
  if (*(_QWORD *)v1)
  {
    CFRelease(*(CFTypeRef *)v1);
    *(_QWORD *)v1 = 0;
  }
  return FigSimpleMutexDestroy();
}

__CFString *sbcdq_copyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigSampleBufferConsumerForDataQueue (%p) dataQueue(%p) LWM:<Callback:(%p), RefCon:(%p)>"), a1, *DerivedStorage, DerivedStorage[2], DerivedStorage[3]);
  return Mutable;
}

uint64_t sbcdq_setProperty()
{
  return 4294954509;
}

uint64_t sbcdq_SendSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

BOOL sbcdq_IsQueueAtOrAboveHighWater()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  return v1 && v1(v0) == 3;
}

BOOL sbcdq_IsQueueBelowLowWater()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  return v1 && v1(v0) == 2;
}

uint64_t sbcdq_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, void (*)(), uint64_t, uint64_t);
  uint64_t v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  if (*(_QWORD *)(DerivedStorage + 16) || !a2)
  {
    v13 = FigSignalErrorAt();
  }
  else
  {
    *(_QWORD *)(DerivedStorage + 16) = a2;
    *(_QWORD *)(DerivedStorage + 24) = a3;
    if (a4)
      *a4 = DerivedStorage + 16;
    v8 = *(_QWORD *)(DerivedStorage + 32);
    if (!v8)
    {
      v9 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      if (!v9)
      {
        v13 = 4294954536;
        goto LABEL_12;
      }
      v8 = v9;
      *(_QWORD *)(DerivedStorage + 32) = v9;
    }
    v10 = *(_QWORD *)DerivedStorage;
    v11 = *(_QWORD *)(DerivedStorage + 48);
    v12 = *(uint64_t (**)(uint64_t, void (*)(), uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 24);
    if (v12)
    {
      v13 = v12(v10, sbcdq_LowWaterTriggerCallbackAsync, v8, v11);
      if (!(_DWORD)v13)
        *(_BYTE *)(DerivedStorage + 40) = 1;
    }
    else
    {
      v13 = 4294954514;
    }
  }
LABEL_12:
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v13;
}

uint64_t sbcdq_RemoveLowWaterTrigger(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 8));
  v4 = (_QWORD *)(DerivedStorage + 16);
  if (a2 && v4 != a2)
  {
    v7 = FigSignalErrorAt();
  }
  else
  {
    *v4 = 0;
    *(_QWORD *)(DerivedStorage + 24) = 0;
    v5 = *(_QWORD *)DerivedStorage;
    v6 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v6)
    {
      v7 = v6(v5);
      if (!(_DWORD)v7)
        *(_BYTE *)(DerivedStorage + 40) = 0;
    }
    else
    {
      v7 = 4294954514;
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 8));
  return v7;
}

uint64_t sbcdq_Flush()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v1)
    return v1(v0);
  else
    return 4294954514;
}

void sbcdq_LowWaterTriggerCallbackAsync()
{
  uint64_t v0;
  const void *v1;
  _QWORD *DerivedStorage;
  void (*v3)(_QWORD);

  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](DerivedStorage[1]);
    v3 = (void (*)(_QWORD))DerivedStorage[2];
    if (v3)
      v3(DerivedStorage[3]);
    MEMORY[0x19402EA24](DerivedStorage[1]);
    CFRelease(v1);
  }
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared()
{
  uint64_t v0;
  _QWORD block[5];
  _QWORD v3[3];
  int v4;

  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2000000000;
  v4 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_block_invoke;
  block[3] = &unk_1E2FB12E8;
  block[4] = v3;
  if (FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_onceToken != -1)
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_onceToken, block);
  v0 = FigBufferedAirPlayGlobalRoutingRegistryRemoteGetShared_sGlobalRoutingRegistry;
  _Block_object_dispose(v3, 8);
  return v0;
}

uint64_t remoteGlobalRoutingRegistry_bufferedClientUpdateNotificationCallback()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t remoteGlobalRoutingRegistry_registerClient(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char buffer[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v7 = 4294949576;
  if (!a1 || !a2 || !a3)
    goto LABEL_7;
  if (!*DerivedStorage)
  {
    v7 = 4294951137;
    goto LABEL_7;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
  {
    v7 = v8;
    goto LABEL_7;
  }
  CFStringGetCString(a3, buffer, 64, 0x600u);
  xpc_dictionary_set_string(0, "RoutingContextUUID", buffer);
  xpc_dictionary_set_uint64(0, "ClientID", a2);
  xpc_dictionary_set_uint64(0, "RemoteClientID", a1);
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v7)
  {
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteGlobalRoutingRegistry_unRegisterClient(uint64_t a1, uint64_t a2, const __CFString *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char buffer[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a3)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v7 = 4294949576;
  if (!a1 || !a2)
    goto LABEL_7;
  if (!*DerivedStorage)
  {
    v7 = 4294951137;
    goto LABEL_7;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8)
  {
    v7 = v8;
    goto LABEL_7;
  }
  CFStringGetCString(a3, buffer, 64, 0x600u);
  xpc_dictionary_set_string(0, "RoutingContextUUID", buffer);
  xpc_dictionary_set_uint64(0, "ClientID", a2);
  xpc_dictionary_set_uint64(0, "RemoteClientID", a1);
  v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v7)
  {
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t remoteGlobalRoutingRegistry_getCountOfRunningClientsForRoutingContext(uint64_t a1, const __CFString *a2, uint64_t *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t uint64;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char buffer[64];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v7 = 4294949576;
  if (!a1 || !a2)
    goto LABEL_11;
  if (!*DerivedStorage)
  {
    v7 = 4294951137;
    goto LABEL_11;
  }
  v8 = FigXPCCreateBasicMessage();
  if ((_DWORD)v8
    || (CFStringGetCString(a2, buffer, 64, 0x600u),
        xpc_dictionary_set_string(0, "RoutingContextUUID", buffer),
        xpc_dictionary_set_uint64(0, "RemoteClientID", a1),
        v8 = FigXPCRemoteClientSendSyncMessageCreatingReply(),
        (_DWORD)v8))
  {
    v7 = v8;
LABEL_11:
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_8;
  }
  uint64 = xpc_dictionary_get_uint64(0, "ClientCount");
  v7 = 0;
  if (a3)
    *a3 = uint64;
LABEL_8:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

void remoteGlobalRoutingRegistry_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v1 = *(NSObject **)(DerivedStorage + 16);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  FigBytePumpRelease(*(CFTypeRef *)(DerivedStorage + 8));
  __break(1u);
}

CFStringRef remoteGlobalRoutingRegistry_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<remoteGlobalRoutingRegistry: %p retainCount: %ld>"), a1, v3);
}

uint64_t FigCaptionRendererNotificationInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  _QWORD *DerivedStorage;
  dispatch_queue_t v13;
  char __str[256];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || !a4 || !a6)
    return FigSignalErrorAt();
  *a6 = 0;
  FigCaptionRendererInputGetClassID();
  v11 = CMDerivedObjectCreate();
  if (!(_DWORD)v11)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[2] = a1;
    DerivedStorage[3] = a2;
    DerivedStorage[4] = a3;
    DerivedStorage[5] = a4;
    DerivedStorage[6] = 0;
    v11 = FigCaptionSerializerCreate();
    if (!(_DWORD)v11)
    {
      snprintf(__str, 0x100uLL, "com.apple.coremedia.ckmediainput.messagequeue<%p>", 0);
      v13 = dispatch_queue_create(__str, 0);
      *DerivedStorage = v13;
      v11 = 0;
      if (v13)
        *a6 = 0;
    }
  }
  return v11;
}

uint64_t FigCaptionRendererNotificationInputSetPlayer(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];

  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(_QWORD *)v4[0])
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)setPlayerDo_2);
  return 0;
}

void setPlayerDo_2(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFArray *Value;
  char v7;
  CFDictionaryRef theDict;
  CFTypeRef cf;

  v1 = *a1;
  v2 = (const void *)a1[1];
  theDict = 0;
  cf = 0;
  v7 = 0;
  if (*(_QWORD *)(v1 + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v3 = *(const void **)(v1 + 8);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v1 + 8) = v2;
  if (v2)
    CFRetain(v2);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)(v1 + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v1 + 8));
    v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v5)
    {
      v5(FigBaseObject, CFSTR("LastSentSubtitleSample"), *MEMORY[0x1E0C9AE00], &cf);
      if (!cf)
        goto LABEL_18;
      if (!FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(cf, &theDict, &v7, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24)))
      {
        if (theDict)
        {
          Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContent"));
          if (Value)
          {
            if (CFArrayGetCount(Value) >= 1)
              digestSubtitleSample_0(1, (dispatch_queue_t *)v1, cf);
          }
        }
      }
    }
  }
  if (cf)
    CFRelease(cf);
LABEL_18:
  if (theDict)
    CFRelease(theDict);
}

uint64_t FigCaptionRendererNotificationInputAddSample(uint64_t a1, const void *a2)
{
  dispatch_queue_t *DerivedStorage;

  DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  digestSubtitleSample_0(0, DerivedStorage, a2);
  return 0;
}

void digestSubtitleSample_0(int a1, dispatch_queue_t *a2, CFTypeRef cf)
{
  uint64_t v6[2];

  if (cf)
    CFRetain(cf);
  v6[0] = (uint64_t)a2;
  v6[1] = (uint64_t)cf;
  if (a1)
  {
    digestSubtitleSampleDo_3(v6);
  }
  else if (*a2)
  {
    dispatch_sync_f(*a2, v6, (dispatch_function_t)digestSubtitleSampleDo_3);
  }
}

void figFCRNotificationInput_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    v1 = *(const void **)(DerivedStorage + 8);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
  }
  if (*(_QWORD *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v2 = *(const void **)(DerivedStorage + 48);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
}

__CFString *figFCRNotificationInput_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererNotificationInput %p>"), a1);
  return Mutable;
}

void subtitleChangedCallback_1(int a1, dispatch_queue_t *a2, int a3, int a4, CFTypeRef cf)
{
  if (cf)
    digestSubtitleSample_0(0, a2, cf);
}

uint64_t start_2()
{
  return 0;
}

uint64_t stop_2()
{
  return 0;
}

void digestSubtitleSampleDo_3(uint64_t *a1)
{
  uint64_t v1;
  const void *v2;
  const __CFArray *v3;
  const __CFArray *v4;
  const __CFDictionary *ValueAtIndex;
  uint64_t v6;
  const __CFNumber *v7;
  int v8;
  const __CFDictionary *v9;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  uint64_t SliceCount;
  const __CFDictionary *v18;
  CFMutableDictionaryRef v19;
  const __CFDictionary *v20;
  uint64_t v21;
  uint64_t CaptionData;
  uint64_t v23;
  const __CFDictionary *v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  const __CFDictionary *v27;
  const __CFDictionary *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  double v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  double v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  const void *Float32;
  const void *v63;
  const void *v64;
  const void *v65;
  CFRange v66;
  __CFAttributedString *v67;
  const __CFString *v68;
  const void *v69;
  const __CFDictionary *v70;
  const __CFDictionary *v71;
  const __CFDictionary *v72;
  int64_t Count;
  size_t v74;
  const void **v75;
  const void **v76;
  uint64_t v77;
  const void *v78;
  const void *v79;
  const void *v80;
  CFTypeID v81;
  const void *v82;
  CFTypeID v83;
  const void *v84;
  const __CFDictionary *v85;
  const __CFDictionary *v86;
  const void *v87;
  CMTimeValue v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(CMTimeValue, const void *);
  const void *v92;
  uint64_t v93;
  const __CFDictionary *v94;
  const __CFDictionary *v95;
  uint64_t v96;
  __CFDictionary *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  CMTimeValue v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(CMTimeValue, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef);
  const void *v108;
  const __CFNumber *v109;
  CMTimeValue v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(CMTimeValue, double);
  __int128 v115;
  const void *v116;
  const void *v117;
  void *v118;
  CFTypeID v119;
  CGColorRef v120;
  CGColor *v121;
  CFIndex location;
  uint64_t ProtocolVTable;
  uint64_t v124;
  void (*v125)(CFIndex, const void *);
  CFIndex v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(CFIndex, _QWORD);
  const __CFNumber *v131;
  CFIndex v132;
  uint64_t value_low;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(CFIndex, uint64_t);
  CFIndex v137;
  double v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(CFIndex, double, double);
  CFIndex v143;
  double v144;
  double v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(CFIndex, double, double);
  const void *v149;
  CFTypeID v150;
  CFIndex j;
  const void *v152;
  CFTypeID v153;
  CGColorSpace *v154;
  CGColorSpace *v155;
  const __CFNumber *v156;
  CGColorSpace *v157;
  const CGFloat *Components;
  uint64_t i;
  const void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  const __CFArray *v177;
  const __CFArray *v178;
  CFIndex v179;
  CFIndex v180;
  CFIndex k;
  const __CFAttributedString *v182;
  const __CFAttributedString *v183;
  CFTypeRef v184;
  CFTypeRef v185;
  const void *v186;
  const void *v187;
  __CFDictionary *v188;
  CFMutableDictionaryRef v189;
  const __CFString *v190;
  uint64_t v191;
  CFStringRef v192;
  CFStringRef v193;
  const void *v194;
  const void *v195;
  const __CFString *v196;
  CFStringRef v197;
  const __CFString *name;
  const __CFString *namea;
  void *v200;
  void *v201;
  void *v202;
  void *v203;
  const __CFString *v204;
  CFStringRef v205;
  const __CFString *v206;
  CFStringRef v207;
  const __CFAllocator *v208;
  void *v209;
  __CFArray *v210;
  void *v211;
  int v212;
  const void *v213;
  const __CFString *attrName;
  CFStringRef attrNamea;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  void *v223;
  void *v224;
  void *v225;
  void *v226;
  void *v227;
  void *v228;
  void *v229;
  const void *v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;
  void *key;
  void *keya;
  const __CFDictionary *v237;
  void *v238;
  uint64_t v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  const void *v244;
  int v245;
  const void *v246;
  const __CFAttributedString *aStr;
  CFAttributedStringRef aStra;
  void *value;
  int v250;
  int valuePtr;
  CFTypeRef cf;
  char v253;
  CFDictionaryRef theDict;
  CMTime v255;
  CMTime v256;
  CMTime v257;
  CFRange effectiveRange;
  uint64_t v259;
  CMTime v260;
  CMTime v261;
  __CFAttributedString *v262;
  _BYTE v263[32];
  CFRange v264;
  __int128 v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = (const void *)a1[1];
  theDict = 0;
  v253 = 0;
  cf = 0;
  if (FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v2, &theDict, &v253, *MEMORY[0x1E0C9D628], *(CGFloat *)(MEMORY[0x1E0C9D628] + 8), *(CGFloat *)(MEMORY[0x1E0C9D628] + 16), *(CGFloat *)(MEMORY[0x1E0C9D628] + 24)))goto LABEL_10;
  if (!theDict || !CFDictionaryGetCount(theDict))
  {
    v6 = v1;
LABEL_9:
    outputCueAsFigCaptionRendererCaption_0(v6, 5, 0, 0);
    goto LABEL_10;
  }
  cueHighlightFocusIndexStart = 0;
  if (CFDictionaryContainsKey(theDict, CFSTR("SubtitleTextHighlightArray")))
  {
    v3 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleTextHighlightArray"));
    v4 = v3;
    if (v3)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
      CFDictionaryGetValue(ValueAtIndex, CFSTR("CMTextHighlightAttributeKey_StringToHighlight"));
    }
    (*(void (**)(const __CFArray *, _QWORD))(v1 + 32))(v4, *(_QWORD *)(v1 + 40));
    goto LABEL_10;
  }
  valuePtr = 0;
  v250 = -1;
  FigCFDictionaryGetInt32IfPresent();
  v239 = v1;
  v7 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("SubtitleFormat"));
  CFNumberGetValue(v7, kCFNumberSInt32Type, &valuePtr);
  v240 = 4;
  v8 = 1;
  if (valuePtr != 1937142900 && valuePtr != 2004251764 && valuePtr != 2021028980)
  {
    v8 = 0;
    v240 = 3;
  }
  value = 0;
  if (CFDictionaryGetValueIfPresent(theDict, CFSTR("SubtitleSerializedCaptionGroup"), (const void **)&value))
  {
    if (FigCaptionSerializerCreateCaptionGroupFromCFData())
      goto LABEL_10;
    if (cf)
    {
      v9 = theDict;
      v262 = 0;
      v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v12 = Mutable;
        v264 = (CFRange)0;
        *(_QWORD *)&v265 = 0;
        CMTimeMake((CMTime *)&v264, 0, 0);
        memset(v263, 0, 24);
        CMTimeMake((CMTime *)v263, 0, 0);
        v188 = v9;
        v13 = (const __CFArray *)CFDictionaryGetValue(v9, CFSTR("SubtitleTimeRange"));
        if (v13)
        {
          v14 = v13;
          v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(v13, 0);
          v16 = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, 1);
          memset(&v261, 0, sizeof(v261));
          CMTimeMakeFromDictionary(&v261, v15);
          memset(&v260, 0, sizeof(v260));
          CMTimeMakeFromDictionary(&v260, v16);
          v264 = *(CFRange *)&v261.value;
          *(_QWORD *)&v265 = v261.epoch;
          *(CMTime *)v263 = v260;
        }
        v194 = v2;
        SliceCount = FigCaptionGroupGetSliceCount();
        v18 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v18 && (v19 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)
        {
          v20 = v19;
          if (SliceCount >= 1)
          {
            v21 = 0;
            key = (void *)*MEMORY[0x1E0CA2C38];
            v233 = (void *)*MEMORY[0x1E0CA3468];
            v231 = (void *)*MEMORY[0x1E0CA2C98];
            v226 = (void *)*MEMORY[0x1E0CA29A8];
            v224 = (void *)*MEMORY[0x1E0CA2990];
            v222 = (void *)*MEMORY[0x1E0CA2998];
            v220 = (void *)*MEMORY[0x1E0CA29A0];
            v218 = (void *)*MEMORY[0x1E0CA2980];
            v216 = (void *)*MEMORY[0x1E0CA2988];
            attrName = (const __CFString *)*MEMORY[0x1E0CA2B40];
            v206 = (const __CFString *)*MEMORY[0x1E0CA2B48];
            v204 = (const __CFString *)*MEMORY[0x1E0CA2B20];
            name = (const __CFString *)*MEMORY[0x1E0CA29E0];
            v185 = (CFTypeRef)*MEMORY[0x1E0CA2BA0];
            v187 = (const void *)*MEMORY[0x1E0CA2BA8];
            v202 = (void *)*MEMORY[0x1E0CA2BB0];
            v192 = (CFStringRef)*MEMORY[0x1E0CA2A80];
            v190 = (const __CFString *)*MEMORY[0x1E0CA2A88];
            v196 = (const __CFString *)*MEMORY[0x1E0CA29D8];
            v184 = (CFTypeRef)*MEMORY[0x1E0CA2B88];
            v186 = (const void *)*MEMORY[0x1E0CA2B90];
            v200 = (void *)*MEMORY[0x1E0CA2B98];
            v212 = v8;
            v208 = v10;
            v210 = v12;
            v228 = (void *)SliceCount;
            v237 = v19;
            while (1)
            {
              CaptionData = FigCaptionGroupGetCaptionData();
              if (CaptionData)
                break;
LABEL_86:
              if (SliceCount == ++v21)
                goto LABEL_87;
            }
            v23 = CaptionData;
            if (v262)
            {
              CFRelease(v262);
              v262 = 0;
            }
            memset(&v261, 0, sizeof(v261));
            FigCaptionGroupGetDurationBeforeSlice();
            memset(&v260, 0, sizeof(v260));
            FigCaptionGroupGetDurationAfterSlice();
            effectiveRange = v264;
            v259 = v265;
            v257 = *(CMTime *)v263;
            v256 = v261;
            v255 = v260;
            FigCaptionDataToMarkupBasedAttributedString(v10, v23, (uint64_t)&effectiveRange, &v257, &v256, (uint64_t)&v255, &v262, v18, v20);
            if (!v8)
            {
LABEL_85:
              CFArrayAppendValue(v12, v262);
              goto LABEL_86;
            }
            aStr = v262;
            v24 = (const __CFDictionary *)CFDictionaryGetValue(v18, key);
            if (!v24
              || (v25 = (const __CFDictionary *)CFDictionaryGetValue(v24, v233)) == 0
              || (v26 = (const __CFDictionary *)CFDictionaryGetValue(v25, v231)) == 0)
            {
LABEL_84:
              v20 = v237;
              goto LABEL_85;
            }
            v27 = v26;
            v28 = v18;
            v29 = CFDictionaryGetValue(v26, v226);
            v30 = CFDictionaryGetValue(v27, v224);
            v31 = CFDictionaryGetValue(v27, v222);
            v32 = CFDictionaryGetValue(v27, v220);
            v33 = CFDictionaryGetValue(v27, v218);
            v34 = CFDictionaryGetValue(v27, v216);
            FigGeometryDimensionMake();
            v241 = v35;
            FigGeometryDimensionMake();
            v242 = v36;
            *(double *)&v37 = COERCE_DOUBLE(FigGeometryDimensionMake());
            v243 = v38;
            v39 = *(double *)&v37;
            FigGeometryDimensionMake();
            v41 = v40;
            *(double *)&v42 = COERCE_DOUBLE(FigGeometryDimensionMake());
            v245 = v43;
            v44 = *(double *)&v42;
            effectiveRange.location = 0;
            effectiveRange.length = 0;
            if (CFAttributedStringGetAttribute(aStr, 0, attrName, &effectiveRange))
            {
              if (v30)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                v241 = v45;
              }
              if (v31)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                v41 = v46;
              }
              v18 = v28;
              if (v32)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                v242 = v47;
              }
              if (v33)
              {
                *(double *)&v48 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                v245 = v49;
                v44 = *(double *)&v48;
              }
              SliceCount = (uint64_t)v228;
              if (v34)
              {
                *(double *)&v50 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                v243 = v51;
                v39 = *(double *)&v50;
              }
              v8 = v212;
              v12 = v210;
              if (FigCFEqual())
              {
                FigGeometryDimensionMakeMirrored();
                v41 = v52;
                *(double *)&v53 = COERCE_DOUBLE(FigGeometryDimensionMakeMirrored());
                v245 = v54;
                v44 = *(double *)&v53;
              }
            }
            else
            {
              if (v29)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                v241 = v55;
              }
              v18 = v28;
              if (v31)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                v242 = v56;
              }
              if (v32)
              {
                FigTextMarkupDimensionMakeFromSimplifiedDictionary();
                v41 = v57;
              }
              if (v33)
              {
                *(double *)&v58 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                v243 = v59;
                v39 = *(double *)&v58;
              }
              SliceCount = (uint64_t)v228;
              if (v34)
              {
                *(double *)&v60 = COERCE_DOUBLE(FigTextMarkupDimensionMakeFromSimplifiedDictionary());
                v245 = v61;
                v44 = *(double *)&v60;
              }
              v8 = v212;
              v12 = v210;
            }
            v10 = v208;
            if (v241 == 622862368)
            {
              Float32 = (const void *)FigCFNumberCreateFloat32();
              CFAttributedStringSetAttribute(aStr, effectiveRange, v206, Float32);
              if (Float32)
                CFRelease(Float32);
            }
            if (v242 == 622862368)
            {
              v63 = (const void *)FigCFNumberCreateFloat32();
              CFAttributedStringSetAttribute(aStr, effectiveRange, v204, v63);
              if (v63)
                CFRelease(v63);
            }
            if (v243 == 622862368)
            {
              v64 = v202;
              if (v39 == 0.0 || (v64 = v187, v39 == 50.0) || (v64 = v185, v39 == 100.0))
                CFAttributedStringSetAttribute(aStr, effectiveRange, name, v64);
            }
            if (v41 == 1818848869)
            {
              v65 = (const void *)FigCFNumberCreateFloat32();
              v66 = effectiveRange;
              v67 = aStr;
              v68 = v192;
            }
            else
            {
              if (v41 != 622862368)
              {
LABEL_79:
                if (v245 == 622862368)
                {
                  v69 = v200;
                  if (v44 == 0.0 || (v69 = v186, v44 == 50.0) || (v69 = v184, v44 == 100.0))
                    CFAttributedStringSetAttribute(aStr, effectiveRange, v196, v69);
                }
                goto LABEL_84;
              }
              v65 = (const void *)FigCFNumberCreateFloat32();
              v66 = effectiveRange;
              v67 = aStr;
              v68 = v190;
            }
            CFAttributedStringSetAttribute(v67, v66, v68, v65);
            if (v65)
              CFRelease(v65);
            goto LABEL_79;
          }
LABEL_87:
          CFDictionarySetValue(v188, CFSTR("SubtitleContent"), v12);
        }
        else
        {
          v20 = 0;
        }
        v2 = v194;
        if (v18)
          CFRelease(v18);
        if (v20)
          CFRelease(v20);
        if (v262)
          CFRelease(v262);
        CFRelease(v12);
      }
    }
  }
  v70 = (const __CFDictionary *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContentMetadata"));
  if (v70)
  {
    v71 = (const __CFDictionary *)CFDictionaryGetValue(v70, (const void *)*MEMORY[0x1E0CA2C38]);
    if (v71)
    {
      v72 = v71;
      Count = CFDictionaryGetCount(v71);
      if (Count >= 1)
      {
        v74 = Count;
        v195 = v2;
        v75 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
        v76 = (const void **)malloc_type_calloc(v74, 8uLL, 0xC0040B8AA526DuLL);
        CFDictionaryGetKeysAndValues(v72, v75, v76);
        v77 = 0;
        v78 = (const void *)*MEMORY[0x1E0CA2C98];
        v79 = (const void *)*MEMORY[0x1E0CA2AA8];
        v246 = (const void *)*MEMORY[0x1E0C9AE50];
        v238 = (void *)*MEMORY[0x1E0CA29E8];
        keya = (void *)*MEMORY[0x1E0CA29F0];
        v234 = (void *)*MEMORY[0x1E0CA2A90];
        v207 = (CFStringRef)*MEMORY[0x1E0CA2C70];
        v205 = (CFStringRef)*MEMORY[0x1E0CA2C68];
        v203 = (void *)*MEMORY[0x1E0CA2C80];
        v201 = (void *)*MEMORY[0x1E0CA2C78];
        v232 = (void *)*MEMORY[0x1E0CA29C8];
        v230 = (const void *)*MEMORY[0x1E0CA2B58];
        v229 = (void *)*MEMORY[0x1E0CA29B0];
        v227 = (void *)*MEMORY[0x1E0CA2B50];
        v225 = (void *)*MEMORY[0x1E0CA2B08];
        aStra = (CFAttributedStringRef)*MEMORY[0x1E0CA2968];
        namea = (const __CFString *)*MEMORY[0x1E0C9DA10];
        v193 = (CFStringRef)*MEMORY[0x1E0CA2A78];
        v223 = (void *)*MEMORY[0x1E0CA2AB8];
        v221 = (void *)*MEMORY[0x1E0CA29A8];
        v219 = (void *)*MEMORY[0x1E0CA2990];
        v217 = (void *)*MEMORY[0x1E0CA2998];
        attrNamea = (CFStringRef)*MEMORY[0x1E0CA29A0];
        v211 = (void *)*MEMORY[0x1E0CA2CA8];
        v209 = (void *)*MEMORY[0x1E0CA2CC0];
        v197 = (CFStringRef)*MEMORY[0x1E0CA2CB0];
        while (1)
        {
          v80 = v76[v77];
          if (!v80)
            goto LABEL_198;
          v81 = CFGetTypeID(v80);
          if (v81 != CFDictionaryGetTypeID())
            goto LABEL_198;
          v82 = v75[v77];
          if (!v82)
            goto LABEL_198;
          v83 = CFGetTypeID(v82);
          if (v83 != CFStringGetTypeID())
            goto LABEL_198;
          v84 = v75[v77];
          v85 = (const __CFDictionary *)v76[v77];
          if (!CFDictionaryGetValue(v85, v78))
          {
            v264.location = 0;
            FigCaptionRendererStackLayoutRegionCreate(&v264);
            *(_QWORD *)v263 = 0;
            LODWORD(v256.value) = 0;
            v261.value = 0;
            v260.value = 0;
            effectiveRange.location = 0;
            v257.value = 0;
            location = v264.location;
            FigCaptionRendererRegionProtocolGetProtocolID();
            ProtocolVTable = CMBaseObjectGetProtocolVTable();
            if (ProtocolVTable)
            {
              v124 = *(_QWORD *)(ProtocolVTable + 16);
              if (v124)
              {
                v125 = *(void (**)(CFIndex, const void *))(v124 + 8);
                if (v125)
                  v125(location, v84);
              }
            }
            if (FigCFDictionaryGetCGFloatIfPresent())
            {
              v126 = v264.location;
              v127 = *(double *)v263;
              FigCaptionRendererRegionProtocolGetProtocolID();
              v128 = CMBaseObjectGetProtocolVTable();
              if (v128)
              {
                v129 = *(_QWORD *)(v128 + 16);
                if (v129)
                {
                  v130 = *(void (**)(CFIndex, _QWORD))(v129 + 24);
                  if (v130)
                    v130(v126, (int)v127);
                }
              }
              v131 = (const __CFNumber *)CFDictionaryGetValue(v85, v211);
              if (v131)
              {
                CFNumberGetValue(v131, kCFNumberIntType, &v256);
                v132 = v264.location;
                value_low = LODWORD(v256.value);
                FigCaptionRendererRegionProtocolGetProtocolID();
                v134 = CMBaseObjectGetProtocolVTable();
                if (v134)
                {
                  v135 = *(_QWORD *)(v134 + 16);
                  if (v135)
                  {
                    v136 = *(void (**)(CFIndex, uint64_t))(v135 + 40);
                    if (v136)
                      v136(v132, value_low);
                  }
                }
                if (CFDictionaryGetValue(v85, v209)
                  && FigCFDictionaryGetCGFloatIfPresent()
                  && FigCFDictionaryGetCGFloatIfPresent())
                {
                  v137 = v264.location;
                  v138 = *(double *)&v261.value;
                  v139 = *(double *)&v260.value;
                  FigCaptionRendererRegionProtocolGetProtocolID();
                  v140 = CMBaseObjectGetProtocolVTable();
                  if (v140)
                  {
                    v141 = *(_QWORD *)(v140 + 16);
                    if (v141)
                    {
                      v142 = *(void (**)(CFIndex, double, double))(v141 + 72);
                      if (v142)
                        v142(v137, v138, 100.0 - v139);
                    }
                  }
                  if (CFDictionaryGetValue(v85, v197)
                    && FigCFDictionaryGetCGFloatIfPresent()
                    && FigCFDictionaryGetCGFloatIfPresent())
                  {
                    v143 = v264.location;
                    v144 = *(double *)&effectiveRange.location;
                    v145 = *(double *)&v257.value;
                    FigCaptionRendererRegionProtocolGetProtocolID();
                    v146 = CMBaseObjectGetProtocolVTable();
                    if (v146)
                    {
                      v147 = *(_QWORD *)(v146 + 16);
                      if (v147)
                      {
                        v148 = *(void (**)(CFIndex, double, double))(v147 + 56);
                        if (v148)
                          v148(v143, v144, v145);
                      }
                    }
                    (*(void (**)(CFIndex, _QWORD))(v239 + 24))(v264.location, *(_QWORD *)(v239 + 40));
                  }
                }
              }
            }
            v149 = (const void *)v264.location;
            if (!v264.location)
              goto LABEL_198;
LABEL_197:
            CFRelease(v149);
            goto LABEL_198;
          }
          v261.value = 0;
          v86 = (const __CFDictionary *)CFDictionaryGetValue(v85, v78);
          v87 = CFDictionaryGetValue(v86, v79);
          if (!v87 || v87 != v246)
            break;
LABEL_196:
          v149 = (const void *)v261.value;
          if (v261.value)
            goto LABEL_197;
LABEL_198:
          if (++v77 == v74)
          {
            free(v75);
            free(v76);
            v2 = v195;
            goto LABEL_201;
          }
        }
        if (FigCaptionRendererTTMLRegionCreate(&v261))
        {
          FigSignalErrorAt();
          goto LABEL_196;
        }
        v88 = v261.value;
        FigCaptionRendererRegionProtocolGetProtocolID();
        v89 = CMBaseObjectGetProtocolVTable();
        if (v89)
        {
          v90 = *(_QWORD *)(v89 + 16);
          if (v90)
          {
            v91 = *(void (**)(CMTimeValue, const void *))(v90 + 8);
            if (v91)
              v91(v88, v84);
          }
        }
        v92 = CFDictionaryGetValue(v86, v238);
        if (v92)
          FigCaptionRendererTTMLRegionSetDisplayAlignment(v261.value, v92);
        v244 = v79;
        v213 = v78;
        if (CFDictionaryGetValue(v86, keya))
        {
          v93 = FigTextMarkupAspectRatioMakeFromSimplifiedDictionary();
          FigCaptionRendererTTMLRegionSetDisplayAspectRatio(v261.value, v93);
        }
        v94 = (const __CFDictionary *)CFDictionaryGetValue(v86, v234);
        if (v94)
        {
          v95 = v94;
          CFDictionaryGetValue(v94, v207);
          v96 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v189 = v97;
          v191 = v96;
          CFDictionaryGetValue(v95, v205);
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          CFDictionaryGetValue(v95, v203);
          v98 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v100 = v99;
          CFDictionaryGetValue(v95, v201);
          v101 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v103 = v102;
          v104 = v261.value;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v105 = CMBaseObjectGetProtocolVTable();
          if (v105)
          {
            v106 = *(_QWORD *)(v105 + 16);
            if (v106)
            {
              v107 = *(void (**)(CMTimeValue, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFMutableDictionaryRef))(v106 + 144);
              if (v107)
                v107(v104, v98, v100, v101, v103, v191, v189);
            }
          }
        }
        v108 = CFDictionaryGetValue(v86, v232);
        if (v108)
          FigCaptionRendererTTMLRegionSetClipOverflow(v261.value, (uint64_t)v108);
        v109 = (const __CFNumber *)CFDictionaryGetValue(v86, v230);
        if (v109)
        {
          v264.location = 0;
          CFNumberGetValue(v109, kCFNumberCGFloatType, &v264);
          v110 = v261.value;
          v111 = *(double *)&v264.location;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v112 = CMBaseObjectGetProtocolVTable();
          if (v112)
          {
            v113 = *(_QWORD *)(v112 + 16);
            if (v113)
            {
              v114 = *(void (**)(CMTimeValue, double))(v113 + 256);
              if (v114)
                v114(v110, v111);
            }
          }
        }
        if (CFDictionaryGetValue(v86, v229))
        {
          v115 = *(_OWORD *)(MEMORY[0x1E0CA4AF0] + 16);
          v264 = (CFRange)*MEMORY[0x1E0CA4AF0];
          v265 = v115;
          FigTextMarkupSizeMakeFromSimplifiedDictionary();
          *(CFRange *)v263 = v264;
          *(_OWORD *)&v263[16] = v265;
          FigCaptionRendererTTMLRegionSetCellResolution(v261.value, v263);
        }
        v116 = CFDictionaryGetValue(v86, v227);
        v78 = v213;
        v79 = v244;
        if (v116)
          FigCaptionRendererTTMLRegionSetWritingMode(v261.value, v116);
        v117 = CFDictionaryGetValue(v86, v225);
        if (v117)
          FigCaptionRendererTTMLRegionSetShowBackground(v261.value, v117);
        if (!v86 || !aStra || !CFDictionaryContainsKey(v86, aStra))
          goto LABEL_185;
        v118 = (void *)CFDictionaryGetValue(v86, aStra);
        v119 = CFGetTypeID(v118);
        if (v119 == CGColorGetTypeID())
        {
          v120 = CGColorRetain((CGColorRef)v118);
          if (v120)
          {
            v121 = v120;
            v79 = v244;
LABEL_176:
            v156 = (const __CFNumber *)CFDictionaryGetValue(v86, v193);
            if (v156)
            {
              *(_QWORD *)v263 = 0x3FF0000000000000;
              CFNumberGetValue(v156, kCFNumberCGFloatType, v263);
              v157 = CGColorSpaceCreateWithName(namea);
              Components = CGColorGetComponents(v121);
              for (i = 0; i != 3; ++i)
                *(CGFloat *)((char *)&v264.location + i * 8) = Components[i];
              *((_QWORD *)&v265 + 1) = *(_QWORD *)v263;
              if (v157)
              {
                CFRelease(v121);
                v121 = CGColorCreate(v157, (const CGFloat *)&v264.location);
                CGColorSpaceRelease(v157);
              }
              FigCaptionRendererTTMLRegionSetColor(v261.value, v121);
              if (!v121)
                goto LABEL_185;
            }
            else
            {
              FigCaptionRendererTTMLRegionSetColor(v261.value, v121);
            }
            CFRelease(v121);
LABEL_185:
            v160 = CFDictionaryGetValue(v86, v223);
            if (v160)
              FigCaptionRendererTTMLRegionSetInvisible(v261.value, (uint64_t)v160);
            v161 = FigGeometryDimensionMake();
            v163 = v162;
            if (CFDictionaryGetValue(v86, v221))
            {
              v161 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              v163 = v164;
            }
            FigCaptionRendererTTMLRegionSetWidth(v261.value, v161, v163);
            v165 = FigGeometryDimensionMake();
            v167 = v166;
            if (CFDictionaryGetValue(v86, v219))
            {
              v165 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              v167 = v168;
            }
            FigCaptionRendererTTMLRegionSetHeight(v261.value, v165, v167);
            v169 = FigGeometryDimensionMake();
            v171 = v170;
            if (CFDictionaryGetValue(v86, v217))
            {
              v169 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              v171 = v172;
            }
            FigCaptionRendererTTMLRegionSetPositionX(v261.value, v169, v171);
            v173 = FigGeometryDimensionMake();
            v175 = v174;
            if (CFDictionaryGetValue(v86, attrNamea))
            {
              v173 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
              v175 = v176;
            }
            FigCaptionRendererTTMLRegionSetPositionY(v261.value, v173, v175);
            (*(void (**)(CMTimeValue, _QWORD))(v239 + 24))(v261.value, *(_QWORD *)(v239 + 40));
            goto LABEL_196;
          }
        }
        else
        {
          v150 = CFGetTypeID(v118);
          if (v150 == CFArrayGetTypeID())
          {
            for (j = 0; j != 4; ++j)
            {
              v152 = CFArrayGetValueAtIndex((CFArrayRef)v118, j);
              *(_QWORD *)v263 = 0;
              v153 = CFGetTypeID(v152);
              if (v153 != CFNumberGetTypeID())
                break;
              CFNumberGetValue((CFNumberRef)v152, kCFNumberCGFloatType, v263);
              *(&v264.location + (((_BYTE)j - 1) & 3)) = *(_QWORD *)v263;
            }
          }
        }
        v154 = CGColorSpaceCreateWithName(namea);
        v79 = v244;
        if (!v154)
          goto LABEL_185;
        v155 = v154;
        v121 = CGColorCreate(v154, (const CGFloat *)&v264.location);
        CGColorSpaceRelease(v155);
        if (!v121)
          goto LABEL_185;
        goto LABEL_176;
      }
    }
  }
LABEL_201:
  v177 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContent"));
  if (!v177)
    goto LABEL_10;
  v178 = v177;
  v179 = CFArrayGetCount(v177);
  if (!v179)
  {
    v6 = v239;
    goto LABEL_9;
  }
  v180 = v179;
  if (v179 >= 1)
  {
    for (k = 0; k != v180; ++k)
    {
      v182 = (const __CFAttributedString *)CFArrayGetValueAtIndex(v178, k);
      if (v182)
      {
        v183 = v182;
        if (CFAttributedStringGetLength(v182))
          outputCueAsFigCaptionRendererCaption_0(v239, v240, v183, theDict);
      }
    }
  }
LABEL_10:
  if (theDict)
    CFRelease(theDict);
  if (v2)
    CFRelease(v2);
  if (cf)
    CFRelease(cf);
}

void outputCueAsFigCaptionRendererCaption_0(uint64_t a1, uint64_t a2, const __CFAttributedString *a3, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  const void *v9;
  const void *v10;
  const void *v11;
  CFTypeRef v12;
  __CFDictionary *Mutable;
  BOOL v14;
  CFTypeRef v15;
  uint64_t ProtocolVTable;
  uint64_t v17;
  uint64_t (*v18)(CFTypeRef, uint64_t);
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v20;
  CFTypeRef v21;
  double FigBaseObject;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(CFTypeRef, double, double);
  CFTypeRef v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(CFTypeRef, const void *);
  CFTypeRef v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(CFTypeRef, __CFDictionary *);
  CFTypeRef Attribute;
  CFTypeRef v37;
  const void *v38;
  CFTypeRef v39;
  const void *v40;
  CFTypeRef v41;
  const void *v42;
  CFTypeRef v43;
  const void *v44;
  CFTypeRef v45;
  const void *v46;
  CFTypeRef v47;
  const void *v48;
  CFTypeRef v49;
  const void *v50;
  CFTypeRef v51;
  const void *v52;
  CFTypeRef v53;
  const void *v54;
  CFTypeRef v55;
  CFTypeRef v56;
  CFTypeRef v57;
  CFTypeRef v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(CFTypeRef, CFTypeRef);
  CFTypeRef v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(CFTypeRef, const __CFAttributedString *);
  CMTime v66;
  CMTime v67;
  CMTime v68;
  CFTypeRef cf;
  CFRange effectiveRange;

  cf = 0;
  if (theDict)
  {
    Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleTimeRange"));
    v9 = CFDictionaryGetValue(theDict, CFSTR("kFigSubtitleRenderer_TextBox"));
    v10 = CFDictionaryGetValue(theDict, CFSTR("SubtitleExtendedLanguageTag"));
    v11 = CFDictionaryGetValue(theDict, CFSTR("kFigSubtitleRenderer_ObeySubtitleFormatting"));
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    Value = 0;
  }
  effectiveRange.location = 0;
  effectiveRange.length = 0;
  if (!a3
    || ((v12 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA29D0], &effectiveRange),
         Mutable = 0,
         v12)
      ? (v14 = v12 == (CFTypeRef)*MEMORY[0x1E0C9AE50])
      : (v14 = 0),
        !v14))
  {
    FigCaptionRendererCaptionCreate(&cf);
    v15 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v17 = *(_QWORD *)(ProtocolVTable + 16);
      if (v17)
      {
        v18 = *(uint64_t (**)(CFTypeRef, uint64_t))(v17 + 40);
        if (v18)
          ProtocolVTable = v18(v15, a2);
      }
    }
    if ((_DWORD)a2 == 5)
    {
      (*(void (**)(CFTypeRef, _QWORD))(a1 + 16))(cf, *(_QWORD *)(a1 + 40));
LABEL_15:
      Mutable = 0;
      goto LABEL_69;
    }
    if (!a3)
      goto LABEL_15;
    if (Value)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 0);
      v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, 1);
      memset(&v68, 0, sizeof(v68));
      CMTimeMakeFromDictionary(&v68, ValueAtIndex);
      memset(&v67, 0, sizeof(v67));
      CMTimeMakeFromDictionary(&v67, v20);
      v66 = v68;
      CMTimeGetSeconds(&v66);
      v66 = v67;
      CMTimeGetSeconds(&v66);
    }
    v21 = cf;
    FigBaseObject = FigBytePumpGetFigBaseObject(ProtocolVTable);
    v24 = v23;
    FigCaptionRendererIntervalProtocolGetProtocolID();
    v25 = CMBaseObjectGetProtocolVTable();
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        v27 = *(void (**)(CFTypeRef, double, double))(v26 + 16);
        if (v27)
          v27(v21, FigBaseObject, v24);
      }
    }
    v28 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v29 = CMBaseObjectGetProtocolVTable();
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v31 = *(void (**)(CFTypeRef, const void *))(v30 + 56);
        if (v31)
          v31(v28, v10);
      }
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v32 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v33 = CMBaseObjectGetProtocolVTable();
    if (v33)
    {
      v34 = *(_QWORD *)(v33 + 16);
      if (v34)
      {
        v35 = *(void (**)(CFTypeRef, __CFDictionary *))(v34 + 8);
        if (v35)
          v35(v32, Mutable);
      }
    }
    Attribute = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2AB0], &effectiveRange);
    if (Attribute
      || (v37 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2960], &effectiveRange),
          (_DWORD)a2 == 7)
      && (Attribute = v37) != 0)
    {
      CFDictionarySetValue(Mutable, CFSTR("region"), Attribute);
    }
    if (v9)
      CFDictionarySetValue(Mutable, CFSTR("textbox"), v9);
    if (v11)
      CFDictionarySetValue(Mutable, CFSTR("obeysubtitleformat"), v11);
    v38 = (const void *)*MEMORY[0x1E0CA2958];
    v39 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2958], &effectiveRange);
    if (v39)
      CFDictionarySetValue(Mutable, v38, v39);
    if ((_DWORD)a2 == 7)
    {
      v56 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2A48], &effectiveRange);
      if (v56)
      {
        v57 = v56;
        v58 = cf;
        FigCaptionRendererCaptionProtocolGetProtocolID();
        v59 = CMBaseObjectGetProtocolVTable();
        if (v59)
        {
          v60 = *(_QWORD *)(v59 + 16);
          if (v60)
          {
            v61 = *(void (**)(CFTypeRef, CFTypeRef))(v60 + 88);
            if (v61)
              v61(v58, v57);
          }
        }
      }
    }
    else if ((_DWORD)a2 == 4)
    {
      v40 = (const void *)*MEMORY[0x1E0CA2B40];
      v41 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2B40], &effectiveRange);
      if (v41)
        CFDictionarySetValue(Mutable, v40, v41);
      v42 = (const void *)*MEMORY[0x1E0CA2B20];
      v43 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2B20], &effectiveRange);
      if (v43)
        CFDictionarySetValue(Mutable, v42, v43);
      v44 = (const void *)*MEMORY[0x1E0CA2A88];
      v45 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2A88], &effectiveRange);
      if (v45)
        CFDictionarySetValue(Mutable, v44, v45);
      v46 = (const void *)*MEMORY[0x1E0CA2A80];
      v47 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2A80], &effectiveRange);
      if (v47)
        CFDictionarySetValue(Mutable, v46, v47);
      v48 = (const void *)*MEMORY[0x1E0CA29D8];
      v49 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA29D8], &effectiveRange);
      if (v49)
        CFDictionarySetValue(Mutable, v48, v49);
      v50 = (const void *)*MEMORY[0x1E0CA29E0];
      v51 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA29E0], &effectiveRange);
      if (v51)
        CFDictionarySetValue(Mutable, v50, v51);
      v52 = (const void *)*MEMORY[0x1E0CA2B48];
      v53 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2B48], &effectiveRange);
      if (v53)
        CFDictionarySetValue(Mutable, v52, v53);
      v54 = (const void *)*MEMORY[0x1E0CA2B10];
      v55 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E0CA2B10], &effectiveRange);
      if (v55)
        CFDictionarySetValue(Mutable, v54, v55);
    }
    v62 = cf;
    FigCaptionRendererCaptionProtocolGetProtocolID();
    v63 = CMBaseObjectGetProtocolVTable();
    if (v63)
    {
      v64 = *(_QWORD *)(v63 + 16);
      if (v64)
      {
        v65 = *(void (**)(CFTypeRef, const __CFAttributedString *))(v64 + 24);
        if (v65)
          v65(v62, a3);
      }
    }
    (*(void (**)(CFTypeRef, _QWORD))(a1 + 16))(cf, *(_QWORD *)(a1 + 40));
  }
LABEL_69:
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t MTSampleBufferCopyClosedCaptionSEIBlockBuffer(opaqueCMSampleBuffer *a1, CMBlockBufferRef *a2)
{
  const opaqueCMFormatDescription *FormatDescription;
  FourCharCode MediaSubType;
  int UnitTypesForCodecType;
  int v7;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v9;
  uint64_t result;
  int v11;
  int v12;
  size_t v14;
  unint64_t v15;
  OpaqueCMBlockBuffer *v16;
  int v17;
  size_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const __CFAllocator *v24;
  CMBlockBufferRef *v25;
  int v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CMBlockBufferRef theSourceBuffer[2];
  CMBlockBufferRef theBuffer;
  unsigned int v33;
  _QWORD destination[2];

  destination[1] = *MEMORY[0x1E0C80C00];
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  theBuffer = 0;
  v30 = 0u;
  *(_OWORD *)theSourceBuffer = 0u;
  v28 = 0u;
  v29 = 0u;
  UnitTypesForCodecType = ccu_getUnitTypesForCodecType(MediaSubType);
  if (!FormatDescription
    || !a1
    || !a2
    || (v7 = UnitTypesForCodecType, !(_BYTE)UnitTypesForCodecType)
    || (DataBuffer = CMSampleBufferGetDataBuffer(a1)) == 0)
  {
    result = FigSignalErrorAt();
    goto LABEL_40;
  }
  v9 = DataBuffer;
  CMBlockBufferGetDataLength(DataBuffer);
  result = UnitIteratorInit(FormatDescription);
  v33 = result;
  if ((_DWORD)result)
  {
LABEL_41:
    if (theBuffer)
    {
      CFRelease(theBuffer);
      return v33;
    }
  }
  else
  {
    v25 = a2;
    if (((unsigned int (*)(__int128 *, unsigned int *))theSourceBuffer[1])(&v28, &v33))
    {
      v11 = BYTE1(v7);
      v12 = BYTE2(v7);
      v26 = v12;
      v27 = v11;
      do
      {
        if (v28 == v11 || v28 == v12)
        {
          v14 = v29;
          v15 = *((_QWORD *)&v29 + 1) + v29;
          v16 = theSourceBuffer[0];
          LOBYTE(destination[0]) = 0;
          if ((unint64_t)(v29 + 3) < *((_QWORD *)&v29 + 1) + (_QWORD)v29)
          {
            v17 = 0;
LABEL_16:
            while (1)
            {
              v18 = v14;
              result = CMBlockBufferCopyDataBytes(v16, v14, 1uLL, destination);
              if ((_DWORD)result)
                break;
              v17 += LOBYTE(destination[0]);
              ++v14;
              if (v18 + 1 >= v15 || LOBYTE(destination[0]) != 255)
              {
                v19 = 0;
                v20 = v18 + 4;
                while (1)
                {
                  v21 = v19;
                  result = CMBlockBufferCopyDataBytes(v16, v20 - 3, 1uLL, destination);
                  if ((_DWORD)result)
                    goto LABEL_40;
                  v22 = LOBYTE(destination[0]);
                  v19 += LOBYTE(destination[0]);
                  v23 = v20 - 2;
                  ++v20;
                  if (v23 >= v15 || LOBYTE(destination[0]) != 255)
                  {
                    v14 = v20 - 3 + v19;
                    if (v14 > v15)
                      goto LABEL_35;
                    v33 = 0;
                    if (v17 == 4 && v19 > 9)
                    {
                      destination[0] = 0;
                      result = CMBlockBufferCopyDataBytes(v16, v20 - 3, 8uLL, destination);
                      if ((_DWORD)result)
                        goto LABEL_40;
                      v33 = 0;
                      if (destination[0] == 0x3343941473100B5)
                      {
                        if (theBuffer)
                        {
                          result = CMBlockBufferAppendBufferReference(theBuffer, v9, v20, v19 - 3, 0);
                        }
                        else
                        {
                          v24 = CFGetAllocator(v9);
                          result = CMBlockBufferCreateWithBufferReference(v24, v9, v20, v19 - 3, 0, &theBuffer);
                        }
                        v33 = result;
                        if ((_DWORD)result)
                          goto LABEL_41;
                      }
                    }
                    else
                    {
                      v33 = 0;
                    }
                    v17 = 0;
                    LOBYTE(destination[0]) = 0;
                    if (v21 + v22 + v20 < v15)
                      goto LABEL_16;
                    goto LABEL_35;
                  }
                }
              }
            }
LABEL_40:
            v33 = result;
            goto LABEL_41;
          }
LABEL_35:
          v33 = 0;
          v12 = v26;
          v11 = v27;
        }
      }
      while (((unsigned int (*)(__int128 *, unsigned int *))theSourceBuffer[1])(&v28, &v33));
    }
    result = v33;
    if (v33)
      goto LABEL_41;
    *v25 = theBuffer;
  }
  return result;
}

uint64_t ccu_getUnitTypesForCodecType(int a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;

  result = 807937827;
  v3 = 403047945;
  if (a1 > 1752589104)
  {
    if (a1 <= 1902405732)
    {
      if (a1 > 1902212706)
      {
        if (a1 == 1902212707 || a1 == 1902212709)
          return v3;
        v5 = 1902405681;
      }
      else
      {
        if (a1 == 1752589105 || a1 == 1836415073)
          return result;
        v5 = 1869117027;
      }
      goto LABEL_29;
    }
    if (a1 <= 1902671458)
    {
      if (a1 == 1902405733 || a1 == 1902407032)
        return result;
      v5 = 1902667126;
      goto LABEL_29;
    }
    if (a1 != 1902671459 && a1 != 1902998904)
    {
      v4 = 2053207651;
      goto LABEL_34;
    }
  }
  else
  {
    if (a1 > 1685220712)
    {
      if (a1 > 1700886114)
      {
        if (a1 != 1700886115)
        {
          if (a1 == 1718908520)
            return result;
          v5 = 1751479857;
          goto LABEL_29;
        }
      }
      else if (a1 != 1685220713)
      {
        if (a1 == 1685481521)
          return result;
        v5 = 1685481573;
        goto LABEL_29;
      }
      return v3;
    }
    if (a1 <= 1667524656)
    {
      if (a1 == 1635148593 || a1 == 1635148595)
        return v3;
      v4 = 1667331683;
LABEL_34:
      if (a1 == v4)
        return v3;
      return 0;
    }
    if (a1 != 1667524657 && a1 != 1667790435)
    {
      v5 = 1684895096;
LABEL_29:
      if (a1 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t UnitIteratorInit(const opaqueCMFormatDescription *a1)
{
  signed int MediaSubType;
  const __CFDictionary *Extensions;
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  CFTypeID v6;
  const __CFString *v7;
  int v8;
  int v9;
  const __CFData *v10;
  const __CFData *ValueAtIndex;
  CFTypeID v12;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  Extensions = CMFormatDescriptionGetExtensions(a1);
  if (!Extensions)
    return FigSignalErrorAt();
  Value = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E0CA2240]);
  if (!Value)
    return FigSignalErrorAt();
  v5 = Value;
  v6 = CFGetTypeID(Value);
  if (v6 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v7 = CFSTR("avcC");
  v8 = 1635148593;
  if (MediaSubType <= 1752589104)
  {
    if (MediaSubType <= 1685220712)
    {
      if (MediaSubType <= 1667524656)
      {
        if (MediaSubType != 1635148593 && MediaSubType != 1635148595 && MediaSubType != 1667331683)
          return FigSignalErrorAt();
        goto LABEL_38;
      }
      if (MediaSubType == 1667524657 || MediaSubType == 1667790435)
        goto LABEL_37;
      v9 = 1684895096;
      goto LABEL_36;
    }
    if (MediaSubType <= 1700886114)
    {
      if (MediaSubType != 1685220713)
      {
        if (MediaSubType != 1685481521)
        {
          v9 = 1685481573;
          goto LABEL_36;
        }
LABEL_37:
        v8 = 1752589105;
        v7 = CFSTR("hvcC");
        goto LABEL_38;
      }
      goto LABEL_38;
    }
    if (MediaSubType == 1700886115)
      goto LABEL_38;
    if (MediaSubType == 1718908520)
      goto LABEL_37;
    v9 = 1751479857;
LABEL_36:
    if (MediaSubType != v9)
      return FigSignalErrorAt();
    goto LABEL_37;
  }
  if (MediaSubType > 1902405732)
  {
    if (MediaSubType > 1902671458)
    {
      if (MediaSubType == 1902671459)
        goto LABEL_37;
      if (MediaSubType == 2053207651)
        goto LABEL_38;
      v9 = 1902998904;
    }
    else
    {
      if (MediaSubType == 1902405733 || MediaSubType == 1902407032)
        goto LABEL_37;
      v9 = 1902667126;
    }
    goto LABEL_36;
  }
  if (MediaSubType <= 1902212706)
  {
    if (MediaSubType != 1752589105 && MediaSubType != 1836415073)
    {
      v9 = 1869117027;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (MediaSubType != 1902212707 && MediaSubType != 1902212709)
  {
    v9 = 1902405681;
    goto LABEL_36;
  }
LABEL_38:
  v10 = (const __CFData *)CFDictionaryGetValue(v5, v7);
  if (v10)
  {
    ValueAtIndex = v10;
    v12 = CFGetTypeID(v10);
    if (v12 != CFArrayGetTypeID()
      || CFArrayGetCount(ValueAtIndex) < 1
      || (ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
    {
      if (v8 == 1635148593)
      {
        CFDataGetBytePtr(ValueAtIndex);
        CFDataGetLength(ValueAtIndex);
        FigH264Bridge_GetNALUnitHeaderLengthFromAVCC();
      }
      else
      {
        FigHEVCBridge_GetNALUnitHeaderLengthFromHVCC();
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t MTSampleBufferCreateCopyIncorporatingClosedCaptionSEI(opaqueCMSampleBuffer *a1, OpaqueCMBlockBuffer *a2, _QWORD *a3)
{
  const opaqueCMFormatDescription *FormatDescription;
  unsigned int UnitTypesForCodecType;
  unsigned int v8;
  OpaqueCMBlockBuffer *DataBuffer;
  OpaqueCMBlockBuffer *v10;
  size_t v11;
  uint64_t v12;
  size_t v13;
  unsigned int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  CMBlockBufferRef v20;
  size_t v21;
  size_t v22;
  OpaqueCMBlockBuffer *v23;
  unint64_t v24;
  int v25;
  size_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  OSStatus v31;
  uint64_t v32;
  const __CFAllocator *v33;
  OSStatus appended;
  uint64_t v35;
  const __CFAllocator *v36;
  OSStatus v37;
  OpaqueCMBlockBuffer *v38;
  int v40;
  int v41;
  _QWORD *v42;
  size_t dataLength;
  uint64_t v44;
  unint64_t v45;
  OpaqueCMBlockBuffer *theBuffer;
  FourCharCode MediaSubType;
  size_t v48;
  int v49;
  BOOL v50;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  CMBlockBufferRef theSourceBuffer[2];
  unsigned int CopyWithNewSizesAndDataBuffer;
  _QWORD destination[3];

  destination[1] = *MEMORY[0x1E0C80C00];
  v55 = 0u;
  *(_OWORD *)theSourceBuffer = 0u;
  v53 = 0u;
  v54 = 0u;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  UnitTypesForCodecType = ccu_getUnitTypesForCodecType(MediaSubType);
  blockBufferOut = 0;
  cf = 0;
  if (!a1)
  {
    CopyWithNewSizesAndDataBuffer = FigSignalErrorAt();
    goto LABEL_81;
  }
  if (!FormatDescription
    || !a3
    || (v8 = UnitTypesForCodecType, CMSampleBufferGetNumSamples(a1) != 1)
    || (v49 = v8, !(_BYTE)v8)
    || (DataBuffer = CMSampleBufferGetDataBuffer(a1)) == 0)
  {
LABEL_84:
    v27 = FigSignalErrorAt();
LABEL_85:
    CopyWithNewSizesAndDataBuffer = v27;
    goto LABEL_79;
  }
  v10 = DataBuffer;
  v11 = CMBlockBufferGetDataLength(DataBuffer);
  theBuffer = a2;
  if (a2)
    v50 = CMBlockBufferGetDataLength(a2) > 7;
  else
    v50 = 0;
  v48 = v11;
  CopyWithNewSizesAndDataBuffer = UnitIteratorInit(FormatDescription);
  if (CopyWithNewSizesAndDataBuffer)
    goto LABEL_79;
  v12 = 0;
  v13 = 0;
  v14 = HIBYTE(v8);
  v15 = BYTE1(v8);
  v16 = BYTE2(v8);
  do
  {
    while (1)
    {
      while (1)
      {
        do
        {
          if (!((unsigned int (*)(__int128 *, unsigned int *))theSourceBuffer[1])(&v53, &CopyWithNewSizesAndDataBuffer))
          {
            if (CopyWithNewSizesAndDataBuffer)
              goto LABEL_79;
            if (!v50)
              goto LABEL_72;
            goto LABEL_84;
          }
        }
        while (v14 <= v53);
        if (v49 != v53)
          break;
        v12 = (unsigned __int16)v55;
      }
      if (v15 != v53 && v16 != v53)
        break;
      v44 = v12;
      v40 = v16;
      v41 = v15;
      v42 = a3;
      v21 = v54;
      v22 = *((_QWORD *)&v54 + 1) + v54;
      v23 = theSourceBuffer[0];
      LOBYTE(destination[0]) = 0;
      v24 = v54 + 3;
      while (2)
      {
        if (v24 < v22)
        {
          v25 = 0;
          v26 = v21;
          do
          {
            v27 = CMBlockBufferCopyDataBytes(v23, v26, 1uLL, destination);
            if (v27)
              goto LABEL_85;
            v25 += LOBYTE(destination[0]);
            ++v26;
          }
          while (v26 < v22 && LOBYTE(destination[0]) == 255);
          v28 = 0;
          do
          {
            v29 = v28;
            v27 = CMBlockBufferCopyDataBytes(v23, v26, 1uLL, destination);
            if (v27)
              goto LABEL_85;
            v30 = LOBYTE(destination[0]);
            v28 = v29 + LOBYTE(destination[0]);
            ++v26;
          }
          while (v26 < v22 && LOBYTE(destination[0]) == 255);
          v21 = v28 + v26;
          if (v28 + v26 > v22)
            break;
          v31 = 0;
          CopyWithNewSizesAndDataBuffer = 0;
          if (v25 == 4 && v28 >= 0xA)
          {
            v45 = v28 + v26;
            destination[0] = 0;
            v31 = CMBlockBufferCopyDataBytes(v23, v26, 8uLL, destination);
            if (!v31)
            {
              CopyWithNewSizesAndDataBuffer = 0;
              if (destination[0] != 0x3343941473100B5)
                goto LABEL_51;
              v32 = *((_QWORD *)&v53 + 1);
              if (blockBufferOut)
              {
                if (*((_QWORD *)&v53 + 1) == v13)
                {
                  CopyWithNewSizesAndDataBuffer = 0;
                  goto LABEL_45;
                }
                appended = CMBlockBufferAppendBufferReference(blockBufferOut, v10, v13, *((_QWORD *)&v53 + 1) - v13, 0);
              }
              else
              {
                dataLength = *((_QWORD *)&v53 + 1) - v13;
                v33 = CFGetAllocator(v10);
                if (v32 == v13)
                  appended = CMBlockBufferCreateEmpty(v33, 0, 0, &blockBufferOut);
                else
                  appended = CMBlockBufferCreateWithBufferReference(v33, v10, v13, dataLength, 0, &blockBufferOut);
              }
              CopyWithNewSizesAndDataBuffer = appended;
              if (appended)
                goto LABEL_79;
LABEL_45:
              if ((_DWORD)v44)
                v35 = v44;
              else
                v35 = (unsigned __int16)v55;
              v44 = v35;
              if (!v50
                || (CopyWithNewSizesAndDataBuffer = ccu_appendCaptionBuffer(MediaSubType, blockBufferOut, theBuffer, v35)) == 0)
              {
                v50 = 0;
                v13 = *((_QWORD *)&v54 + 1) + v54;
LABEL_51:
                v21 = v45;
LABEL_52:
                LOBYTE(destination[0]) = 0;
                v24 = v29 + v30 + v26 + 3;
                continue;
              }
              goto LABEL_79;
            }
            v21 = v45;
          }
          CopyWithNewSizesAndDataBuffer = v31;
          goto LABEL_52;
        }
        break;
      }
      CopyWithNewSizesAndDataBuffer = 0;
      a3 = v42;
      v16 = v40;
      v15 = v41;
      v12 = v44;
    }
    if (!v50)
      goto LABEL_67;
    v17 = a3;
    v18 = *((_QWORD *)&v53 + 1);
    v19 = *((_QWORD *)&v53 + 1) - v13;
    v20 = blockBufferOut;
    if (!blockBufferOut)
    {
      v36 = CFGetAllocator(v10);
      if (v18 == v13)
        v37 = CMBlockBufferCreateEmpty(v36, 0, 0, &blockBufferOut);
      else
        v37 = CMBlockBufferCreateWithBufferReference(v36, v10, v13, v19, 0, &blockBufferOut);
      goto LABEL_60;
    }
    if (*((_QWORD *)&v53 + 1) != v13)
    {
      v37 = CMBlockBufferAppendBufferReference(blockBufferOut, v10, v13, *((_QWORD *)&v53 + 1) - v13, 0);
LABEL_60:
      a3 = v17;
      CopyWithNewSizesAndDataBuffer = v37;
      if (v37)
        goto LABEL_79;
      v20 = blockBufferOut;
      goto LABEL_62;
    }
    CopyWithNewSizesAndDataBuffer = 0;
    a3 = v17;
LABEL_62:
    if ((_DWORD)v12)
      v12 = v12;
    else
      v12 = (unsigned __int16)v55;
    CopyWithNewSizesAndDataBuffer = ccu_appendCaptionBuffer(MediaSubType, v20, theBuffer, v12);
    if (CopyWithNewSizesAndDataBuffer)
      goto LABEL_79;
    v13 = *((_QWORD *)&v53 + 1);
LABEL_67:
    v50 = 0;
  }
  while (v15 != v16);
  if (CopyWithNewSizesAndDataBuffer)
    goto LABEL_79;
LABEL_72:
  v38 = blockBufferOut;
  if (!blockBufferOut)
  {
    CFRetain(a1);
    *a3 = a1;
    goto LABEL_79;
  }
  if (v48 > v13)
  {
    CopyWithNewSizesAndDataBuffer = CMBlockBufferAppendBufferReference(blockBufferOut, v10, v13, v48 - v13, 0);
    if (CopyWithNewSizesAndDataBuffer)
      goto LABEL_79;
    v38 = blockBufferOut;
  }
  destination[0] = CMBlockBufferGetDataLength(v38);
  CFGetAllocator(a1);
  CopyWithNewSizesAndDataBuffer = FigSampleBufferCreateCopyWithNewSizesAndDataBuffer();
  if (!CopyWithNewSizesAndDataBuffer)
  {
    *a3 = cf;
    cf = 0;
  }
LABEL_79:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
LABEL_81:
  if (cf)
    CFRelease(cf);
  return CopyWithNewSizesAndDataBuffer;
}

uint64_t ccu_appendCaptionBuffer(int a1, void *a2, CMBlockBufferRef theBuffer, __int16 a4)
{
  size_t DataLength;
  unint64_t v9;
  size_t v10;
  BOOL v11;
  char v12;
  const __CFAllocator *v13;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  int v18;
  size_t v19;
  const __CFAllocator *v20;
  char v21;
  char v22;
  char v23;
  _DWORD destination[2];
  char v25;
  _BYTE v26[2];
  unsigned int sourceBytes;
  CMBlockBufferRef destinationBuffer;

  DataLength = CMBlockBufferGetDataLength(theBuffer);
  if (DataLength >= 9)
  {
    v9 = DataLength;
    v10 = 0;
    if (a2)
      v11 = theBuffer == 0;
    else
      v11 = 1;
    v12 = v11;
    v23 = v12;
    v22 = HIBYTE(a4);
    v21 = a4 & 1 | 0x4E;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    while (1)
    {
      memset(destination, 0, 7);
      result = CMBlockBufferCopyDataBytes(theBuffer, v10, 7uLL, destination);
      if ((_DWORD)result)
        return result;
      if (destination[0] == 876167495 && LOBYTE(destination[1]) == 3)
        break;
      v16 = 1;
LABEL_62:
      v10 += v16;
      if (v10 + 8 >= v9)
        return 0;
    }
    v17 = 3 * (BYTE1(destination[1]) & 0x1F);
    v16 = v17 + 8;
    if (v9 - v10 < v17 + 8)
      return result;
    destinationBuffer = 0;
    sourceBytes = 0;
    v25 = 0;
    if ((v23 & 1) != 0)
    {
LABEL_60:
      if (destinationBuffer)
        CFRelease(destinationBuffer);
      goto LABEL_62;
    }
    if (a1 > 1752589104)
    {
      if (a1 > 1902405732)
      {
        if (a1 > 1902671458)
        {
          if (a1 == 1902671459)
            goto LABEL_50;
          if (a1 == 2053207651)
            goto LABEL_51;
          v18 = 1902998904;
        }
        else
        {
          if (a1 == 1902405733 || a1 == 1902407032)
            goto LABEL_50;
          v18 = 1902667126;
        }
      }
      else if (a1 > 1902212706)
      {
        if (a1 == 1902212707 || a1 == 1902212709)
          goto LABEL_51;
        v18 = 1902405681;
      }
      else
      {
        if (a1 == 1752589105 || a1 == 1836415073)
          goto LABEL_50;
        v18 = 1869117027;
      }
      goto LABEL_49;
    }
    if (a1 > 1685220712)
    {
      if (a1 > 1700886114)
      {
        if (a1 == 1700886115)
          goto LABEL_51;
        if (a1 != 1718908520)
        {
          v18 = 1751479857;
LABEL_49:
          if (a1 != v18)
            goto LABEL_64;
        }
      }
      else
      {
        if (a1 == 1685220713)
          goto LABEL_51;
        if (a1 != 1685481521)
        {
          v18 = 1685481573;
          goto LABEL_49;
        }
      }
    }
    else
    {
      if (a1 <= 1667524656)
      {
        if (a1 != 1635148593 && a1 != 1635148595 && a1 != 1667331683)
        {
LABEL_64:
          v19 = 0;
          if (FigSignalErrorAt())
            goto LABEL_60;
LABEL_52:
          v20 = CFGetAllocator(a2);
          if (!CMBlockBufferCreateWithMemoryBlock(v20, 0, v19 + 9, 0, 0, 0, v19 + 9, 1u, &destinationBuffer))
          {
            sourceBytes = bswap32(v19 + 5 + v16 + 1);
            if (!CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL)
              && !CMBlockBufferReplaceDataBytes(v26, destinationBuffer, 4uLL, v19)
              && !CMBlockBufferReplaceDataBytes(&ccu_appendSEIUnitWithCCData_kSEI_ITUt35_ATSC_Header, destinationBuffer, v19 | 4, 5uLL))
            {
              v25 = v17 + 11;
              if (!CMBlockBufferReplaceDataBytes(&v25, destinationBuffer, v19 + 5, 1uLL)
                && !CMBlockBufferAppendBufferReference((CMBlockBufferRef)a2, destinationBuffer, 0, 0, 0)
                && !CMBlockBufferAppendBufferReference((CMBlockBufferRef)a2, theBuffer, v10, v17 + 8, 0))
              {
                CMBlockBufferAppendMemoryBlock((CMBlockBufferRef)a2, &ccu_appendSEIUnitWithCCData_kRBSPTrailingBits, 1uLL, v13, 0, 0, 1uLL, 0);
              }
            }
          }
          goto LABEL_60;
        }
LABEL_51:
        v26[0] = 6;
        v19 = 1;
        goto LABEL_52;
      }
      if (a1 != 1667524657 && a1 != 1667790435)
      {
        v18 = 1684895096;
        goto LABEL_49;
      }
    }
LABEL_50:
    v26[0] = v21;
    v26[1] = v22;
    v19 = 2;
    goto LABEL_52;
  }
  return 0;
}

uint64_t ui_iteratorHEVC(uint64_t a1, _DWORD *a2)
{
  size_t v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t destination;

  destination = 0;
  v3 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 16);
  if (v3 + 6 > *(_QWORD *)(a1 + 40))
  {
    v5 = 0;
    goto LABEL_12;
  }
  v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3, 4uLL, &destination);
  if (v5)
    goto LABEL_12;
  v6 = bswap32(destination);
  destination = v6;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8 || v3 + 4 > v9 || v6 <= 1)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_12;
  }
  v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3 + 4, 2uLL, (void *)(a1 + 32));
  if (v5)
  {
LABEL_12:
    v10 = 0;
    goto LABEL_9;
  }
  *(_BYTE *)a1 = (*(_BYTE *)(a1 + 32) >> 1) & 0x3F;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v3 + 6;
  *(_QWORD *)(a1 + 24) = destination - 2;
  v10 = 1;
LABEL_9:
  *a2 = v5;
  return v10;
}

uint64_t ui_iteratorAVC(uint64_t a1, _DWORD *a2)
{
  size_t v3;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t destination;

  destination = 0;
  v3 = *(_QWORD *)(a1 + 24) + *(_QWORD *)(a1 + 16);
  if (v3 + 5 > *(_QWORD *)(a1 + 40))
  {
    v5 = 0;
    goto LABEL_11;
  }
  v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3, 4uLL, &destination);
  if (v5)
    goto LABEL_11;
  v6 = destination;
  destination = bswap32(destination);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 < destination || v3 + 4 > v7 - destination || !v6)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_11;
  }
  v5 = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + 48), v3 + 4, 1uLL, (void *)(a1 + 32));
  if (v5)
  {
LABEL_11:
    v8 = 0;
    goto LABEL_8;
  }
  *(_BYTE *)a1 = *(_BYTE *)(a1 + 32) & 0x1F;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v3 + 5;
  *(_QWORD *)(a1 + 24) = destination - 1;
  v8 = 1;
LABEL_8:
  *a2 = v5;
  return v8;
}

uint64_t FigXPCMessageCopyDataChannelConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v5;
  CFIndex ChannelCount;
  CFIndex v7;
  CFIndex v8;
  uint64_t v9;
  CFTypeRef v11;
  CFTypeRef v12;

  v11 = 0;
  v12 = 0;
  if (!a1)
  {
LABEL_23:
    v5 = FigSignalErrorAt();
    goto LABEL_24;
  }
  v5 = FigXPCMessageCopyCFDictionary();
  if ((_DWORD)v5)
    goto LABEL_24;
  v5 = FigDataChannelConfigurationCreateFromDictionary((const __CFAllocator *)*MEMORY[0x1E0C9AE00], (CFDictionaryRef)v12, &v11);
  if ((_DWORD)v5)
    goto LABEL_24;
  ChannelCount = FigDataChannelConfigurationGetChannelCount((uint64_t)v11);
  if (ChannelCount >= 1)
  {
    v7 = ChannelCount;
    v8 = 0;
    do
    {
      if (FigDataChannelConfigurationGetOutputQueueTypeAtIndex((uint64_t)v11, v8) == 2)
      {
        if (!FigDataChannelConfigurationGetFigDataQueueObjectIDAtIndex((uint64_t)v11, v8))
          goto LABEL_23;
        v5 = FigDataQueueServer_CopyDataQueueForID();
        if ((_DWORD)v5)
          goto LABEL_24;
        v5 = FigDataChannelConfigurationSetFigDataQueueAtIndex((uint64_t)v11, v8, 0);
        if ((_DWORD)v5)
          goto LABEL_24;
      }
    }
    while (v7 != ++v8);
  }
  if (FigDataChannelConfigurationGetResourceCount((uint64_t)v11) >= 1)
  {
    if (FigDataChannelConfigurationGetFigDataChannelResourceObjectIDAtIndex((uint64_t)v11, 0))
    {
      v5 = FigXPCServerLookupAndRetainAssociatedObject();
      if ((_DWORD)v5)
        goto LABEL_24;
    }
    goto LABEL_23;
  }
  v5 = FigXPCMessageCopyFormatDescriptionArray();
  if ((_DWORD)v5)
  {
LABEL_24:
    v9 = v5;
    goto LABEL_18;
  }
  v9 = FigDataChannelConfigurationSetFormatDescriptions(v11);
  if (!(_DWORD)v9)
  {
    *a4 = v11;
    v11 = 0;
  }
LABEL_18:
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  return v9;
}

_QWORD *figVideoReceiverConnectionHelperInit(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figVideoReceiverConnectionHelperFinalize(_QWORD *a1)
{
  const void *v2;
  void *v3;
  void *v4;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[3] = 0;
    xpc_release(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[4] = 0;
    xpc_release(v4);
  }
}

CFMutableStringRef figVideoReceiverConnectionHelperCopyDebugDesc(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateMutable(v1, 0);
}

uint64_t FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint(uint64_t a1, uint64_t a2, xpc_endpoint_t *a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v7;
  _xpc_connection_s *v8;
  void *v9;
  xpc_endpoint_t v10;
  uint64_t v11;
  _QWORD handler[5];

  if (FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_onceToken != -1)
    dispatch_once(&FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_onceToken, &__block_literal_global_15_3);
  if (FigVideoReceiverConnectionHelperGetTypeID_onceToken != -1)
    dispatch_once(&FigVideoReceiverConnectionHelperGetTypeID_onceToken, &__block_literal_global_93);
  Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    v7 = Instance;
    *(_QWORD *)(Instance + 16) = FigCFWeakReferenceHolderCreateWithReferencedObject();
    v8 = xpc_connection_create(0, (dispatch_queue_t)FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_sharedBootstrapQueue);
    v9 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    xpc_connection_set_context(v8, v9);
    xpc_connection_set_finalizer_f(v8, (xpc_finalizer_t)sharedConnectionFinalize);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 0x40000000;
    handler[2] = __FigVideoReceiverConnectionHelperCreateForVideoReceiverAndCopyBootstrapEndpoint_block_invoke_2;
    handler[3] = &__block_descriptor_tmp_18_5;
    handler[4] = v8;
    xpc_connection_set_event_handler(v8, handler);
    xpc_connection_activate(v8);
    *(_QWORD *)(v7 + 24) = v8;
    v10 = xpc_endpoint_create(v8);
    v11 = 0;
    *a3 = v10;
    *a4 = v7;
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  FigXPCRelease();
  return v11;
}

void sharedConnectionFinalize(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t __connectionHelper_handleNewBootstrapConnection_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  _xpc_connection_s *v5;
  _QWORD *v6;
  xpc_object_t reply;
  const void *v8;
  const void *pid;
  __CFDictionary *v10;
  CFMutableDictionaryRef Mutable;
  int v12;
  int v13;
  int v14;
  const char *v15;
  pid_t v16;
  CFTypeRef *v17;
  void *v18;
  void *v19;

  result = MEMORY[0x194031C7C](a2);
  if (result != MEMORY[0x1E0C812F8])
    return result;
  v5 = *(_xpc_connection_s **)(a1 + 32);
  xpc_connection_get_context(v5);
  v6 = (_QWORD *)FigCFWeakReferenceHolderCopyReferencedObject();
  reply = xpc_dictionary_create_reply(a2);
  if (!v6)
  {
    v13 = FigSignalErrorAt();
    v17 = 0;
    v8 = 0;
    if (!reply)
      goto LABEL_21;
    goto LABEL_20;
  }
  v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v8)
  {
    v14 = FigSignalErrorAt();
LABEL_38:
    v13 = v14;
    goto LABEL_18;
  }
  pid = (const void *)xpc_connection_get_pid(v5);
  if (figVideoReceiverGetXPCServerForRemoteClient_onceToken == -1)
  {
    if ((_DWORD)pid)
      goto LABEL_6;
LABEL_36:
    v13 = FigSignalErrorAt();
    goto LABEL_40;
  }
  dispatch_once(&figVideoReceiverGetXPCServerForRemoteClient_onceToken, &__block_literal_global_21_1);
  if (!(_DWORD)pid)
    goto LABEL_36;
LABEL_6:
  MEMORY[0x19402EEEC](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
  if (!CFDictionaryGetValue((CFDictionaryRef)figVideoReceiverGetXPCServerForRemoteClient_serverDictionary, pid))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v10 = Mutable;
      FigCFDictionarySetInt32();
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E0CA54E0], (const void *)*MEMORY[0x1E0C9AE50]);
      v12 = FigXPCServerStartWithNewXPCEndpoint();
      if (v12)
      {
        v13 = v12;
        MEMORY[0x19402EF04](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
LABEL_13:
        CFRelease(v10);
        if (v13)
          goto LABEL_18;
        goto LABEL_14;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)figVideoReceiverGetXPCServerForRemoteClient_serverDictionary, pid, 0);
      goto LABEL_11;
    }
    v13 = FigSignalErrorAt();
    MEMORY[0x19402EF04](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
LABEL_40:
    if (v13)
      goto LABEL_18;
    goto LABEL_14;
  }
  v10 = 0;
LABEL_11:
  MEMORY[0x19402EF04](figVideoReceiverGetXPCServerForRemoteClient_serverMutex);
  if (v10)
  {
    v13 = 0;
    goto LABEL_13;
  }
LABEL_14:
  v14 = FigXPCServerCopyXPCEndpoint();
  if (v14)
    goto LABEL_38;
  xpc_dictionary_set_value(reply, (const char *)kFigVideoReceiverEndpoint, 0);
  v15 = (const char *)kFigVideoReceiverServerPID;
  v16 = getpid();
  xpc_dictionary_set_uint64(reply, v15, v16);
  v17 = (CFTypeRef *)malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (!v17)
  {
    v14 = FigSignalErrorAt();
    if (v14)
      goto LABEL_38;
  }
  v13 = FigXPCServerAssociateObjectWithNeighborProcess();
  if (v13)
    goto LABEL_19;
  *v17 = CFRetain(v8);
  xpc_dictionary_set_uint64(reply, (const char *)*MEMORY[0x1E0CA36A0], 0);
LABEL_18:
  v17 = 0;
LABEL_19:
  if (reply)
  {
LABEL_20:
    xpc_dictionary_set_int64(reply, (const char *)*MEMORY[0x1E0CA3690], v13);
    xpc_connection_send_message(v5, reply);
  }
LABEL_21:
  if (v6)
  {
    v18 = (void *)v6[4];
    if (v18)
    {
      v6[4] = 0;
      xpc_release(v18);
    }
    v19 = (void *)v6[3];
    if (v19)
    {
      v6[3] = 0;
      xpc_release(v19);
    }
  }
  DisposeServedVideoReceiverState(v17);
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  FigXPCRelease();
  return FigXPCRelease();
}

void DisposeServedVideoReceiverState(CFTypeRef *a1)
{
  CFTypeRef v2;
  CFTypeRef v3;
  void (*v4)(CFTypeRef, CFTypeRef, uint64_t, __int128 *);
  CFTypeRef cf;
  __int128 v6;
  uint64_t v7;

  if (a1)
  {
    if (*a1)
    {
      cf = 0;
      FigDataChannelConfigurationCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 0, (uint64_t *)&cf);
      v2 = cf;
      if (cf)
      {
        v3 = *a1;
        v4 = *(void (**)(CFTypeRef, CFTypeRef, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 56);
        if (v4)
        {
          v6 = *MEMORY[0x1E0CA2E18];
          v7 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
          v4(v3, v2, 1, &v6);
        }
        if (cf)
          CFRelease(cf);
      }
      if (*a1)
        CFRelease(*a1);
    }
    free(a1);
  }
}

uint64_t figVideoReceiverServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  OpCode = FigXPCServerLookupAndRetainAssociatedObject();
  if ((_DWORD)OpCode)
    return OpCode;
  if (!xpc_dictionary_get_uint64(a2, "DataChannelResourceID"))
    return 4294951138;
  v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)v4)
    return FigSignalErrorAt();
  return v4;
}

uint64_t figVideoReceiverServer_handleRemoteNoReplyMessage(uint64_t a1, void *a2)
{
  uint64_t result;

  if (!a2)
    return FigSignalErrorAt();
  result = FigXPCMessageGetOpCode();
  if (!(_DWORD)result)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
    result = FigXPCServerLookupAndRetainAssociatedObject();
    if (!(_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

CFMutableDictionaryRef __figVideoReceiverGetXPCServerForRemoteClient_block_invoke()
{
  CFMutableDictionaryRef result;

  figVideoReceiverGetXPCServerForRemoteClient_serverMutex = FigSimpleMutexCreate();
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  figVideoReceiverGetXPCServerForRemoteClient_serverDictionary = (uint64_t)result;
  return result;
}

uint64_t videoReceiverServer_createImageQueue(uint64_t a1, xpc_object_t xdict)
{
  uint64_t uint64;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t value;
  xpc_object_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, xpc_object_t);

  uint64 = xpc_dictionary_get_uint64(xdict, "ImageQueueID");
  if (uint64)
  {
    v5 = uint64;
    v6 = FigXPCMessageCopyCFDictionary();
    if (!(_DWORD)v6)
    {
      value = xpc_dictionary_get_value(xdict, "ImageQueueMessage");
      if (value)
      {
        v8 = value;
        v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, xpc_object_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 24);
        if (!v9)
          return 4294954514;
        return v9(a1, v5, 0, v8);
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v6;
  }
  return FigSignalErrorAt();
}

uint64_t videoReceiverServer_releaseImageQueue(uint64_t a1, xpc_object_t xdict)
{
  uint64_t uint64;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  uint64 = xpc_dictionary_get_uint64(xdict, "ImageQueueID");
  if (!uint64)
    return FigSignalErrorAt();
  v4 = uint64;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v5)
    return v5(a1, v4);
  else
    return 4294954514;
}

uint64_t videoReceiverServer_setImageQueueMessage(uint64_t a1, xpc_object_t xdict)
{
  uint64_t uint64;
  uint64_t v5;
  xpc_object_t value;
  xpc_object_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, xpc_object_t);

  uint64 = xpc_dictionary_get_uint64(xdict, "ImageQueueID");
  if (!uint64)
    return FigSignalErrorAt();
  v5 = uint64;
  value = xpc_dictionary_get_value(xdict, "ImageQueueMessage");
  if (!value)
    return FigSignalErrorAt();
  v7 = value;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, xpc_object_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v8)
    return v8(a1, v5, v7);
  else
    return 4294954514;
}

uint64_t videoReceiverServer_addConfiguration(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  CFTypeRef v6;
  CFTypeID v7;
  _BOOL8 v8;
  uint64_t CMTime;
  uint64_t (*v10)(uint64_t, CFTypeRef, _BOOL8, __int128 *);
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  CFTypeRef cf;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v16 = *MEMORY[0x1E0CA2E18];
  v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  cf = 0;
  v5 = FigXPCMessageCopyDataChannelConfiguration((uint64_t)a3, (uint64_t)"ChannelConfiguration", a1, &cf);
  v6 = cf;
  if ((_DWORD)v5)
  {
LABEL_12:
    v11 = v5;
    if (!v6)
      return v11;
    goto LABEL_9;
  }
  if (!cf || (v7 = CFGetTypeID(cf), v7 != FigDataChannelConfigurationGetTypeID()))
  {
    v5 = FigSignalErrorAt();
    goto LABEL_12;
  }
  v8 = xpc_dictionary_get_BOOL(a3, "Immediate");
  CMTime = FigXPCMessageGetCMTime();
  if (!(_DWORD)CMTime)
  {
    v13 = v16;
    v14 = v17;
    v10 = *(uint64_t (**)(uint64_t, CFTypeRef, _BOOL8, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 56);
    if (!v10)
    {
      v11 = 4294954514;
      goto LABEL_9;
    }
    v18 = v13;
    v19 = v14;
    CMTime = v10(a2, v6, v8, &v18);
  }
  v11 = CMTime;
LABEL_9:
  CFRelease(v6);
  return v11;
}

uint64_t FigXPCMessageSetDataChannelConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const __CFAllocator *v4;
  uint64_t ObjectID;
  CFIndex ChannelCount;
  CFIndex v7;
  CFIndex v8;
  const void *FigDataQueueAtIndex;
  CFIndex ResourceCount;
  CFIndex v11;
  CFIndex v12;
  const void *FigDataChannelResourceAtIndex;
  uint64_t v14;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;
  CFTypeRef v19;

  cf = 0;
  v19 = 0;
  v17 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ObjectID = FigDataChannelConfigurationCreateCopy((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a3, &v17);
  if ((_DWORD)ObjectID)
    goto LABEL_27;
  ChannelCount = FigDataChannelConfigurationGetChannelCount((uint64_t)v17);
  if (ChannelCount >= 1)
  {
    v7 = ChannelCount;
    v8 = 0;
    do
    {
      if (FigDataChannelConfigurationGetOutputQueueTypeAtIndex((uint64_t)v17, v8) == 2)
      {
        v16 = 0;
        FigDataQueueAtIndex = FigDataChannelConfigurationGetFigDataQueueAtIndex((uint64_t)v17, v8);
        if (!FigDataQueueAtIndex)
          goto LABEL_26;
        ObjectID = FigDataQueueRemoteGetObjectID((uint64_t)FigDataQueueAtIndex, &v16);
        if ((_DWORD)ObjectID)
          goto LABEL_27;
        ObjectID = (uint64_t)FigDataChannelConfigurationSetFigDataQueueObjectIDAtIndex((uint64_t)v17, v8);
        if ((_DWORD)ObjectID)
          goto LABEL_27;
      }
    }
    while (v7 != ++v8);
  }
  ResourceCount = FigDataChannelConfigurationGetResourceCount((uint64_t)v17);
  if (ResourceCount >= 1)
  {
    v11 = ResourceCount;
    v12 = 0;
    while (1)
    {
      v16 = 0;
      FigDataChannelResourceAtIndex = FigDataChannelConfigurationGetFigDataChannelResourceAtIndex((uint64_t)v17, v12);
      if (!FigDataChannelResourceAtIndex)
        break;
      ObjectID = FigDataChannelResourceRemoteGetObjectID((uint64_t)FigDataChannelResourceAtIndex, &v16);
      if ((_DWORD)ObjectID)
        goto LABEL_27;
      ObjectID = (uint64_t)FigDataChannelConfigurationSetFigDataChannelResourceObjectIDAtIndex((uint64_t)v17, v12);
      if ((_DWORD)ObjectID)
        goto LABEL_27;
      if (v11 == ++v12)
        goto LABEL_15;
    }
LABEL_26:
    ObjectID = FigSignalErrorAt();
    goto LABEL_27;
  }
LABEL_15:
  ObjectID = FigDataChannelConfigurationCopyFormatDescriptions(a3, (uint64_t)v4, (uint64_t *)&cf);
  if ((_DWORD)ObjectID || (ObjectID = FigXPCMessageSetFormatDescriptionArray(), (_DWORD)ObjectID))
  {
LABEL_27:
    v14 = ObjectID;
    goto LABEL_19;
  }
  v14 = FigDataChannelConfigurationCopyAsDictionaryWithoutOutputQueues((uint64_t)v17, v4, (__CFDictionary **)&v19);
  if (!(_DWORD)v14)
    FigXPCMessageSetCFDictionary();
LABEL_19:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  if (v19)
    CFRelease(v19);
  return v14;
}

uint64_t FigVideoReceiverRemoteDisassociateAndDisposeObjectID()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage
    && (v1 = DerivedStorage, *(_QWORD *)(DerivedStorage + 8))
    && (FigXPCRemoteClientDisassociateObject(), !*(_BYTE *)(v1 + 24)))
  {
    v4 = FigXPCCreateBasicMessage();
    if ((_DWORD)v4)
      v2 = v4;
    else
      v2 = FigXPCRemoteClientSendSyncMessage();
  }
  else
  {
    v2 = 0;
  }
  FigXPCRelease();
  return v2;
}

uint64_t FigVideoReceiverCreateRemote(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  _xpc_endpoint_s *value;
  _xpc_endpoint_s *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *DerivedStorage;
  _xpc_connection_s *v12;
  xpc_object_t v13;
  int64_t int64;
  uint64_t uint64;
  uint64_t v16;
  const void *v17;
  const void *v18;
  CFMutableDictionaryRef Mutable;
  uint64_t v20;
  uint64_t v21;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v24;
  _QWORD *v25;
  xpc_object_t v26;

  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigVideoReceiverGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
    return v6;
  value = (_xpc_endpoint_s *)xpc_dictionary_get_value(a2, (const char *)kFigVideoReceiverEndpoint);
  if (!value)
    return FigSignalErrorAt();
  v8 = value;
  v9 = MEMORY[0x194031C7C]();
  v10 = MEMORY[0x1E0C81308];
  if (v9 != MEMORY[0x1E0C81308])
    return FigSignalErrorAt();
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v12 = xpc_connection_create_from_endpoint(v8);
  xpc_connection_set_event_handler(v12, &__block_literal_global_94);
  xpc_connection_activate(v12);
  v26 = xpc_dictionary_create(0, 0, 0);
  v13 = xpc_connection_send_message_with_reply_sync(v12, v26);
  int64 = xpc_dictionary_get_int64(v13, (const char *)*MEMORY[0x1E0CA3690]);
  if ((_DWORD)int64)
  {
    v24 = 0;
    goto LABEL_24;
  }
  uint64 = xpc_dictionary_get_uint64(v13, (const char *)*MEMORY[0x1E0CA36A0]);
  if (!xpc_dictionary_get_value(v13, (const char *)kFigVideoReceiverEndpoint) || MEMORY[0x194031C7C]() != v10)
  {
    int64 = FigSignalErrorAt();
    v24 = 0;
    goto LABEL_24;
  }
  v25 = a4;
  v16 = xpc_dictionary_get_uint64(v13, (const char *)kFigVideoReceiverServerPID);
  if (!v16)
  {
    int64 = FigSignalErrorAt();
    goto LABEL_22;
  }
  v17 = (const void *)v16;
  if (remoteVideoReceiver_getClientList_onceToken != -1)
    dispatch_once(&remoteVideoReceiver_getClientList_onceToken, &__block_literal_global_11);
  MEMORY[0x19402EEEC](remoteVideoReceiver_getClientList_sClientList_0);
  v18 = CFDictionaryGetValue((CFDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v17);
  if (v18)
  {
    v24 = CFRetain(v18);
    goto LABEL_20;
  }
  if (remoteVideoReceiver_getClientList_onceToken != -1)
    dispatch_once(&remoteVideoReceiver_getClientList_onceToken, &__block_literal_global_11);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  v20 = FigXPCRemoteClientCreateWithXPCEndpoint();
  if ((_DWORD)v20)
  {
LABEL_41:
    int64 = v20;
    if (!Mutable)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v17))
  {
    v20 = FigSignalErrorAt();
    goto LABEL_41;
  }
  CFDictionarySetValue((CFMutableDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v17, 0);
  int64 = 0;
  if (Mutable)
LABEL_16:
    CFRelease(Mutable);
LABEL_17:
  if ((_DWORD)int64)
  {
    MEMORY[0x19402EF04](remoteVideoReceiver_getClientList_sClientList_0);
    goto LABEL_22;
  }
  v24 = 0;
LABEL_20:
  MEMORY[0x19402EF04](remoteVideoReceiver_getClientList_sClientList_0);
  int64 = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)int64)
  {
    DerivedStorage[1] = v24;
    DerivedStorage[2] = v17;
    *DerivedStorage = uint64;
LABEL_22:
    v24 = 0;
  }
  a4 = v25;
LABEL_24:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if (v24)
    CFRelease(v24);
  if (!(_DWORD)int64)
  {
    v21 = CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
    if (*(_BYTE *)(v21 + 25) && dword_1EE2A2D38)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    int64 = FigXPCRemoteClientCopyMemoryOrigin();
    if (!(_DWORD)int64)
      *a4 = 0;
  }
  return int64;
}

void remoteVideoReceiver_HandleDeadServerConnection()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (remoteVideoReceiver_getClientList_onceToken != -1)
    dispatch_once(&remoteVideoReceiver_getClientList_onceToken, &__block_literal_global_11);
  *(_BYTE *)(DerivedStorage + 24) = 1;
  MEMORY[0x19402EEEC](remoteVideoReceiver_getClientList_sClientList_0);
  v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)remoteVideoReceiver_getClientList_sClientList_1, v1);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  JUMPOUT(0x19402EF04);
}

void videoReceiverRemote_Finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[4];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[4] = 0;
  }
  v2 = (const void *)DerivedStorage[5];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[5] = 0;
  }
  if (DerivedStorage[1])
  {
    FigVideoReceiverRemoteDisassociateAndDisposeObjectID();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    v3 = (const void *)DerivedStorage[1];
    if (v3)
    {
      CFRelease(v3);
      DerivedStorage[1] = 0;
    }
  }
}

__CFString *videoReceiverRemote_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 24))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoReceiverRemote(XPC) %p retainCount: %ld objectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t videoReceiverRemote_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ClientAndObjectID;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  if (!a2 || !a4)
    return FigSignalErrorAt();
  *a4 = 0;
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v7, &v8);
  v5 = v7;
  if (!(_DWORD)ClientAndObjectID)
  {
    ClientAndObjectID = FigXPCSendStdCopyPropertyMessage();
    v5 = v7;
  }
  if (v5)
    FigXPCRemoteClientKillServerOnTimeout();
  return ClientAndObjectID;
}

uint64_t videoReceiverRemote_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ClientAndObjectID;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v6, &v7);
  v4 = v6;
  if (!(_DWORD)ClientAndObjectID)
  {
    ClientAndObjectID = FigXPCSendStdSetPropertyMessage();
    v4 = v6;
  }
  if (v4)
    FigXPCRemoteClientKillServerOnTimeout();
  return ClientAndObjectID;
}

uint64_t videoReceiverRemote_GetClientAndObjectID(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3 || *(_BYTE *)(DerivedStorage + 24))
    return FigSignalErrorAt();
  v6 = *(_QWORD *)DerivedStorage;
  *a2 = *(_QWORD *)(DerivedStorage + 8);
  *a3 = v6;
  return 0;
}

uint64_t videoReceiverRemote_CreateImageQueueReceiver(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t ClientAndObjectID;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  v9 = 0;
  if (!a2 || !a4)
  {
    ClientAndObjectID = FigSignalErrorAt();
    goto LABEL_11;
  }
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v10);
  if ((_DWORD)ClientAndObjectID)
  {
LABEL_11:
    v7 = ClientAndObjectID;
    goto LABEL_7;
  }
  v7 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v7)
  {
    xpc_dictionary_set_uint64(xdict, "ImageQueueID", a2);
    v7 = FigXPCMessageSetCFDictionary();
    if (!(_DWORD)v7)
    {
      xpc_dictionary_set_value(xdict, "ImageQueueMessage", a4);
      v7 = FigXPCRemoteClientSendSyncMessage();
    }
  }
LABEL_7:
  FigXPCRelease();
  if (v9)
    FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t videoReceiverRemote_ReleaseImageQueueReceiver(uint64_t a1, uint64_t a2)
{
  uint64_t ClientAndObjectID;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t xdict;

  v7 = 0;
  xdict = 0;
  v6 = 0;
  if (a2)
  {
    ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v6, &v7);
    if (!(_DWORD)ClientAndObjectID)
    {
      ClientAndObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ClientAndObjectID)
      {
        xpc_dictionary_set_uint64(xdict, "ImageQueueID", a2);
        if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 25))
          ClientAndObjectID = FigXPCRemoteClientSendAsyncMessage();
        else
          ClientAndObjectID = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    ClientAndObjectID = FigSignalErrorAt();
  }
  v4 = ClientAndObjectID;
  FigXPCRelease();
  if (v6)
    FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t videoReceiverRemote_SetImageQueueMessage(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t ClientAndObjectID;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  v9 = 0;
  if (a2 && a3)
  {
    CAXPCImageQueueCommandForMessage();
    ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v10);
    if (!(_DWORD)ClientAndObjectID)
    {
      ClientAndObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ClientAndObjectID)
      {
        xpc_dictionary_set_uint64(xdict, "ImageQueueID", a2);
        xpc_dictionary_set_value(xdict, "ImageQueueMessage", a3);
        if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 25))
          ClientAndObjectID = FigXPCRemoteClientSendAsyncMessage();
        else
          ClientAndObjectID = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  else
  {
    ClientAndObjectID = FigSignalErrorAt();
  }
  v7 = ClientAndObjectID;
  FigXPCRelease();
  if (v9)
    FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t videoReceiverRemote_CreateDataQueue(const void *a1, uint64_t a2, CMTime *a3, CMTime *a4, CFTypeRef *a5)
{
  uint64_t ClientAndObjectID;
  const __CFAllocator *v11;
  uint64_t uint64;
  CFAllocatorRef v13;
  uint64_t v14;
  CMTime v16;
  CMTime v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t xdict;
  uint64_t v22;

  v22 = 0;
  v20 = 0;
  xdict = 0;
  v19 = 0;
  v18 = 0;
  if (a5)
  {
    ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID((uint64_t)a1, &v20, &v19);
    if (!(_DWORD)ClientAndObjectID)
    {
      ClientAndObjectID = FigXPCRemoteClientGetServerPID();
      if (!(_DWORD)ClientAndObjectID)
      {
        v11 = CFGetAllocator(a1);
        ClientAndObjectID = FigDataQueueRemoteSetupRemoteXPCClientIfNecessary(v11, v18, (uint64_t (*)(uint64_t, CFTypeRef *))videoReceiverRemote_startDataQueueServerAndCreateEndpoint, (uint64_t)a1);
        if (!(_DWORD)ClientAndObjectID)
        {
          ClientAndObjectID = FigXPCCreateBasicMessage();
          if (!(_DWORD)ClientAndObjectID)
          {
            ClientAndObjectID = FigXPCMessageSetCFDictionary();
            if (!(_DWORD)ClientAndObjectID)
            {
              v17 = *a3;
              ClientAndObjectID = FigXPCMessageSetCMTime();
              if (!(_DWORD)ClientAndObjectID)
              {
                v17 = *a4;
                ClientAndObjectID = FigXPCMessageSetCMTime();
                if (!(_DWORD)ClientAndObjectID)
                {
                  ClientAndObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
                  if (!(_DWORD)ClientAndObjectID)
                  {
                    uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
                    v13 = CFGetAllocator(a1);
                    v17 = *a3;
                    v16 = *a4;
                    ClientAndObjectID = FigDataQueueRemoteCreateWithObjectID(v18, uint64, (uint64_t)v13, a2, &v17, &v16, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    ClientAndObjectID = FigSignalErrorAt();
  }
  v14 = ClientAndObjectID;
  FigXPCRelease();
  FigXPCRelease();
  if (v20)
    FigXPCRemoteClientKillServerOnTimeout();
  return v14;
}

uint64_t videoReceiverRemote_AddDataChannelConfiguration(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t ClientAndObjectID;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t xdict;

  v9 = 0;
  xdict = 0;
  v8 = 0;
  if (a2)
  {
    ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v8, &v9);
    if (!(_DWORD)ClientAndObjectID)
    {
      ClientAndObjectID = FigXPCCreateBasicMessage();
      if (!(_DWORD)ClientAndObjectID)
      {
        ClientAndObjectID = FigXPCMessageSetDataChannelConfiguration((uint64_t)xdict, 0x1932E909DLL, a2);
        if (!(_DWORD)ClientAndObjectID)
        {
          xpc_dictionary_set_BOOL(xdict, "Immediate", a3 != 0);
          ClientAndObjectID = FigXPCMessageSetCMTime();
          if (!(_DWORD)ClientAndObjectID)
          {
            if (*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 25))
              ClientAndObjectID = FigXPCRemoteClientSendAsyncMessage();
            else
              ClientAndObjectID = FigXPCRemoteClientSendSyncMessage();
          }
        }
      }
    }
  }
  else
  {
    ClientAndObjectID = FigSignalErrorAt();
  }
  v6 = ClientAndObjectID;
  FigXPCRelease();
  if (v8)
    FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t videoReceiverRemote_CreateDataChannelResource(uint64_t a1, uint64_t a2, const void *a3, CFTypeRef *a4)
{
  uint64_t ClientAndObjectID;
  uint64_t v9;
  uint64_t uint64;
  uint64_t v11;
  CFTypeRef cf;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t xdict;
  uint64_t v17;

  xdict = 0;
  v17 = 0;
  v14 = 0;
  v15 = 0;
  cf = 0;
  if (!a4)
  {
    ClientAndObjectID = FigSignalErrorAt();
LABEL_20:
    v11 = ClientAndObjectID;
    a3 = 0;
    goto LABEL_12;
  }
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v15, &v14);
  if ((_DWORD)ClientAndObjectID)
    goto LABEL_20;
  ClientAndObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ClientAndObjectID)
    goto LABEL_20;
  ClientAndObjectID = FigXPCMessageSetCFDictionary();
  if ((_DWORD)ClientAndObjectID)
    goto LABEL_20;
  if (a3)
  {
    a3 = (const void *)MEMORY[0x19402EFD0](a3, *MEMORY[0x1E0C9AE00]);
    if (a3)
    {
      v9 = FigXPCMessageSetCFDictionary();
      if (!(_DWORD)v9)
        goto LABEL_8;
    }
    else
    {
      v9 = FigSignalErrorAt();
    }
LABEL_22:
    v11 = v9;
    goto LABEL_12;
  }
LABEL_8:
  v9 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)v9)
    goto LABEL_22;
  uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E0CA36A0]);
  v9 = FigDataChannelResourceRemoteCreate(0, a2, uint64, a1, &cf);
  if ((_DWORD)v9)
    goto LABEL_22;
  v11 = FigXPCRemoteClientAssociateObject();
  if (!(_DWORD)v11)
  {
    *a4 = cf;
    cf = 0;
  }
LABEL_12:
  FigXPCRelease();
  FigXPCRelease();
  if (cf)
    CFRelease(cf);
  if (a3)
    CFRelease(a3);
  if (v15)
    FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t videoReceiverRemote_ProvideDataChannelResourcePayload(uint64_t a1, uint64_t a2)
{
  uint64_t ClientAndObjectID;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t xdict;

  v9 = 0;
  xdict = 0;
  CMBaseObjectGetDerivedStorage();
  v8 = 0;
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v8);
  if ((_DWORD)ClientAndObjectID)
  {
    v6 = ClientAndObjectID;
  }
  else
  {
    v5 = FigXPCCreateBasicMessage();
    if ((_DWORD)v5
      || (xpc_dictionary_set_uint64(xdict, "DataChannelResourceID", a2),
          v5 = FigXPCMessageSetBlockBufferUsingMemoryOrigin(),
          (_DWORD)v5))
    {
      v6 = v5;
    }
    else
    {
      v6 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  if (v9)
    FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t videoReceiverRemote_SetDataChannelResourcePayloadState(uint64_t a1, uint64_t a2)
{
  uint64_t ClientAndObjectID;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t xdict;

  v7 = 0;
  xdict = 0;
  v6 = 0;
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v7, &v6);
  if ((_DWORD)ClientAndObjectID)
  {
    v4 = ClientAndObjectID;
  }
  else
  {
    v4 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v4)
    {
      xpc_dictionary_set_uint64(xdict, "DataChannelResourceID", a2);
      FigXPCMessageSetInt32();
      v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  if (v7)
    FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t videoReceiverRemote_GetDataChannelResourceProcessingState(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t ClientAndObjectID;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t xdict;

  v10 = 0;
  xdict = 0;
  v8 = 0;
  v9 = 0;
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v9, &v8);
  if ((_DWORD)ClientAndObjectID || (ClientAndObjectID = FigXPCCreateBasicMessage(), (_DWORD)ClientAndObjectID))
  {
    v6 = ClientAndObjectID;
  }
  else
  {
    xpc_dictionary_set_uint64(xdict, "DataChannelResourceID", a2);
    v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v6)
      *a3 = xpc_dictionary_get_int64(v10, "DataChannelResourceProcessingState");
  }
  FigXPCRelease();
  FigXPCRelease();
  if (v9)
    FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t videoReceiverRemote_startDataQueueServerAndCreateEndpoint(uint64_t a1, uint64_t *a2)
{
  uint64_t ClientAndObjectID;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t xdict;
  uint64_t v9;

  xdict = 0;
  v9 = 0;
  v6 = 0;
  v7 = 0;
  ClientAndObjectID = videoReceiverRemote_GetClientAndObjectID(a1, &v7, &v6);
  if (!(_DWORD)ClientAndObjectID)
  {
    ClientAndObjectID = FigXPCCreateBasicMessage();
    if (!(_DWORD)ClientAndObjectID)
    {
      ClientAndObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
      if (!(_DWORD)ClientAndObjectID)
      {
        if (xpc_dictionary_get_value(xdict, "Endpoint") && MEMORY[0x194031C7C]() == MEMORY[0x1E0C81308])
        {
          v4 = 0;
          *a2 = FigXPCRetain();
          goto LABEL_7;
        }
        ClientAndObjectID = FigSignalErrorAt();
      }
    }
  }
  v4 = ClientAndObjectID;
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  if (v7)
    FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

CFMutableDictionaryRef __remoteVideoReceiver_getClientList_block_invoke()
{
  CFMutableDictionaryRef result;

  remoteVideoReceiver_getClientList_sClientList_0 = FigSimpleMutexCreate();
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  remoteVideoReceiver_getClientList_sClientList_1 = (uint64_t)result;
  return result;
}

uint64_t remoteVideoReceiver_DeadConnectionCallback(const void *a1)
{
  CFTypeID v2;
  uint64_t result;
  CFTypeID v4;

  v2 = CFGetTypeID(a1);
  if (v2 == FigVideoReceiverGetTypeID())
  {
    result = CMBaseObjectGetDerivedStorage();
    *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    v4 = CFGetTypeID(a1);
    result = FigDataChannelResourceGetTypeID();
    if (v4 == result)
      return FigDataChannelResourceRemoteHandleDeadConnection((uint64_t)a1);
  }
  return result;
}

uint64_t FigTTMLDocumentWriterCreateForIMSC(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *DerivedStorage;
  CFTypeRef v10;
  CFTypeRef cf;

  v10 = 0;
  cf = 0;
  if (!a2 || !a3)
  {
    v6 = FigSignalErrorAt();
    goto LABEL_8;
  }
  FigTTMLDocumentWriterGetClassID();
  v6 = CMDerivedObjectCreate();
  if ((_DWORD)v6)
  {
LABEL_8:
    v7 = v6;
    goto LABEL_9;
  }
  v7 = FigTTMLDocumentWriterStateCreate(a1, &v10);
  if (!(_DWORD)v7)
  {
    FigTTMLDocumentWriterGetCMBaseObject(cf);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    DerivedStorage[1] = v10;
    *a3 = cf;
    return v7;
  }
  if (v10)
    CFRelease(v10);
LABEL_9:
  if (cf)
    CFRelease(cf);
  return v7;
}

uint64_t figTTMLDocumentWriterForIMSC_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterForIMSC_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

CFStringRef figTTMLDocumentWriterForIMSC_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigTTMLDocumentWriterForIMSC[%p]"), a1);
}

uint64_t figTTMLDocumentWriterForIMSC_StartElement(void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  unsigned int CurrentElementType;
  unsigned int started;
  uint64_t v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  uint64_t v11;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CurrentElementType = FigTTMLDocumentWriterStateGetCurrentElementType(DerivedStorage[1]);
  started = FigTTMLDocumentWriterStateStartTagClosed(DerivedStorage[1]);
  if (CurrentElementType)
  {
    if (CurrentElementType == 7 && started == 0)
    {
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      v8 = CMBaseObjectGetDerivedStorage();
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter profile"), CFSTR("http://www.w3.org/ns/ttml/profile/imsc1/text"));
      CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter timeBase"), CFSTR("media"));
      *(_DWORD *)(v8 + 24) = 0;
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)writeAttributesIfNotWrittenYet, a1);
      v10 = *(unsigned int *)(v8 + 24);
      if (Mutable)
        CFRelease(Mutable);
      if ((_DWORD)v10)
        return v10;
    }
    FigTTMLDocumentWriterStateCloseStartTag(DerivedStorage[1]);
  }
  v11 = FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
  if (!(_DWORD)v11)
    return FigTTMLDocumentWriterStateStartElement(DerivedStorage[1], a2);
  return v11;
}

uint64_t figTTMLDocumentWriterForIMSC_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;
  uint64_t result;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = FigTTMLDocumentWriterEndElement(*DerivedStorage);
  if (!(_DWORD)result)
    return FigTTMLDocumentWriterStateEndElement(DerivedStorage[1]);
  return result;
}

uint64_t figTTMLDocumentWriterForIMSC_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t result;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = FigTTMLDocumentWriterStateCloseStartTag(DerivedStorage[1]);
  if (!(_DWORD)result)
    return FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, a2);
  return result;
}

uint64_t figTTMLDocumentWriterForIMSC_SetAttribute(uint64_t a1, const __CFString *a2, const void *a3)
{
  uint64_t *DerivedStorage;
  const __CFDictionary *v7;
  uint64_t (*Value)(uint64_t, const void *);
  uint64_t result;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402F294](&getAttributeValidatorDict_sOnce_0, initAttributeValidatorDict_0);
  v7 = (const __CFDictionary *)sAttributeValidatorDict_0;
  if (!CFDictionaryContainsKey((CFDictionaryRef)sAttributeValidatorDict_0, a2))
  {
    result = CFStringHasPrefix(a2, CFSTR("xmlns:"));
    if (!(_DWORD)result)
      return result;
    goto LABEL_6;
  }
  Value = (uint64_t (*)(uint64_t, const void *))CFDictionaryGetValue(v7, a2);
  if (!Value || (result = Value(a1, a3), (_DWORD)result))
  {
LABEL_6:
    result = FigTTMLDocumentWriterSetAttribute(*DerivedStorage, (uint64_t)a2, (uint64_t)a3);
    if (!(_DWORD)result)
      return FigTTMLDocumentWriterStateSetAttribute(DerivedStorage[1], a2, a3);
  }
  return result;
}

uint64_t figTTMLDocumentWriterForIMSC_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t writeAttributesIfNotWrittenYet(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t result;

  FigTTMLDocumentWriterGetCMBaseObject(a3);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = (uint64_t)FigTTMLDocumentWriterStateGetAttributes(*(_QWORD *)(DerivedStorage + 8));
  if (!*(_DWORD *)(DerivedStorage + 24))
  {
    result = CFDictionaryContainsKey((CFDictionaryRef)result, a1);
    if (!(_DWORD)result)
    {
      result = FigTTMLDocumentWriterSetAttribute(a3, (uint64_t)a1, a2);
      if ((_DWORD)result)
        *(_DWORD *)(DerivedStorage + 24) = result;
    }
  }
  return result;
}

void initAttributeValidatorDict_0()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("begin"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("dur"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("end"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("region"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("timeContainer"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("style"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("use"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("value"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/XML/1998/namespace id"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/XML/1998/namespace space"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/XML/1998/namespace lang"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/XML/1998/namespace base"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter clockMode"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter dropMode"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter frameRate"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter frameRateMultiplier"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter markerMode"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter pixelAspectRatio"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter profile"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter subFrameRate"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter tickRate"), prohibited_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter timeBase"), validateTimeBase_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#parameter cellResolution"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#parameter activeArea"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling color"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling direction"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling display"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling displayAlign"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling extent"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontFamily"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontSize"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontStyle"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling fontWeight"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling lineHeight"), validateLineHeight);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling opacity"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling origin"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling overflow"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling padding"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling showBackground"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textAlign"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textDecoration"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling textOutline"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi"), validateUnicodeBidi_0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling visibility"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling wrapOption"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling writingMode"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml#styling zIndex"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby position"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#ruby align"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("urn:ebu:tt:style linePadding"), 0);
  CFDictionaryAddValue(Mutable, CFSTR("urn:ebu:tt:style multiRowAlign"), 0);
  sAttributeValidatorDict_0 = (uint64_t)Mutable;
}

uint64_t prohibited_0()
{
  return 0;
}

uint64_t validateTimeBase_0()
{
  return FigCFEqual();
}

BOOL validateLineHeight()
{
  return FigCFEqual() == 0;
}

BOOL validateUnicodeBidi_0()
{
  return FigCFEqual() || FigCFEqual() || FigCFEqual() != 0;
}

uint64_t EC_GetCurrentRangeIndex(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)(result + 32))
      return *(_QWORD *)(result + 40);
    else
      return 0;
  }
  return result;
}

uint64_t EC_GetEncryptionScheme(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = 4294951916;
  if (a1)
  {
    if (a2)
    {
      result = 0;
      *a2 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

_QWORD *EC_HasWidevineInfo(uint64_t a1)
{
  _QWORD *result;

  result = ec_GetEncryptionRange(a1, *(_QWORD *)(a1 + 40));
  if (result)
    return (_QWORD *)(result[9] != 0);
  return result;
}

_QWORD *EC_HasPlayReadyInfo(uint64_t a1)
{
  _QWORD *result;

  result = ec_GetEncryptionRange(a1, *(_QWORD *)(a1 + 40));
  if (result)
    return (_QWORD *)(result[8] != 0);
  return result;
}

_QWORD *EC_HasLegacyConfigInfo(_QWORD *result)
{
  if (result)
  {
    result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result)
      return (_QWORD *)(result[6] != 0);
  }
  return result;
}

_QWORD *EC_GetLegacyConfigKeyIdentifier(_QWORD *result)
{
  uint64_t v1;

  if (result)
  {
    result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result)
    {
      v1 = result[6];
      if (v1)
        return *(_QWORD **)v1;
      else
        return 0;
    }
  }
  return result;
}

const void *ec_GetEncryptionRange(uint64_t a1, CFIndex a2)
{
  const __CFArray *v3;

  if (a1 && (v3 = *(const __CFArray **)(a1 + 32)) != 0 && CFArrayGetCount(v3) > a2)
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
  else
    return 0;
}

_QWORD *EC_GetPlayReadyKeyIdentifierForRange(_QWORD *result, CFIndex a2)
{
  uint64_t v2;

  if (result)
  {
    result = ec_GetEncryptionRange((uint64_t)result, a2);
    if (result)
    {
      v2 = result[8];
      if (v2)
        return *(_QWORD **)v2;
      else
        return 0;
    }
  }
  return result;
}

_QWORD *EC_GetPlayReadyKeyIdentifier(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  result = ec_GetEncryptionRange(a1, *(_QWORD *)(a1 + 40));
  if (result)
  {
    v2 = result[8];
    if (v2)
      return *(_QWORD **)v2;
    else
      return 0;
  }
  return result;
}

_QWORD *EC_ShouldWritePlayReadyPSSHAtom(_QWORD *result)
{
  uint64_t v1;

  if (result)
  {
    result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result)
    {
      v1 = result[8];
      if (v1)
        return (_QWORD *)*(unsigned __int8 *)(v1 + 16);
      else
        return 0;
    }
  }
  return result;
}

const void *ec_CopyURIParamsForRange(uint64_t a1, CFIndex a2, int a3)
{
  _QWORD *EncryptionRange;
  uint64_t v5;
  const void *v6;

  if (!a1)
    return 0;
  EncryptionRange = ec_GetEncryptionRange(a1, a2);
  if (!EncryptionRange)
    return 0;
  if (a3 == 2)
  {
    v5 = EncryptionRange[9];
    if (!v5)
      return 0;
  }
  else
  {
    if (a3 != 1)
      return 0;
    v5 = EncryptionRange[8];
    if (!v5)
      return 0;
  }
  v6 = *(const void **)(v5 + 8);
  if (v6)
    CFRetain(v6);
  return v6;
}

_QWORD *EC_GetWidevineKeyIdentifierForRange(_QWORD *result, CFIndex a2)
{
  uint64_t v2;

  if (result)
  {
    result = ec_GetEncryptionRange((uint64_t)result, a2);
    if (result)
    {
      v2 = result[9];
      if (v2)
        return *(_QWORD **)v2;
      else
        return 0;
    }
  }
  return result;
}

_QWORD *EC_GetWidevineKeyIdentifier(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  result = ec_GetEncryptionRange(a1, *(_QWORD *)(a1 + 40));
  if (result)
  {
    v2 = result[9];
    if (v2)
      return *(_QWORD **)v2;
    else
      return 0;
  }
  return result;
}

_QWORD *EC_ShouldWriteWidevinePSSHAtom(_QWORD *result)
{
  uint64_t v1;

  if (result)
  {
    result = ec_GetEncryptionRange((uint64_t)result, result[5]);
    if (result)
    {
      v1 = result[9];
      if (v1)
        return (_QWORD *)*(unsigned __int8 *)(v1 + 16);
      else
        return 0;
    }
  }
  return result;
}

uint64_t EncryptionConfigGetTypeID()
{
  if (sRegisterEncryptionConfigTypeOnce != -1)
    dispatch_once_f(&sRegisterEncryptionConfigTypeOnce, 0, (dispatch_function_t)RegisterEncryptionConfigType);
  return sEncryptionConfigID;
}

uint64_t RegisterEncryptionConfigType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sEncryptionConfigID = result;
  return result;
}

__CFString *er_EncryptionRangeCopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  __CFString *v4;
  const char *v5;
  const char *v6;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = Mutable;
  v5 = "true";
  if (*(_BYTE *)(a1 + 16))
    v6 = "true";
  else
    v6 = "false";
  if (!*(_BYTE *)(a1 + 32))
    v5 = "false";
  CFStringAppendFormat(Mutable, 0, CFSTR("<EncryptionRange %p> encrypted: %s segmentCount: %lld key: %p IV: %p keepIVConstant: %s legacyConfigInfo: %p fairPlayInfo: %p playReadyInfo: %p widevineInfo: %p"), a1, v6, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24), v5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  return v4;
}

double ec_EncryptionConfigInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void ec_EncryptionConfigFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 24);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
}

__CFString *ec_CopyDesc(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFArrayRef *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  __CFString *v7;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = (CFArrayRef *)(a1 + 32);
  CFStringAppendFormat(Mutable, 0, CFSTR("<EncryptionConfig %p> scheme %d encryptionRangeList %p"), a1, *(unsigned int *)(a1 + 16), a1 + 32);
  CFStringAppendFormat(Mutable, 0, CFSTR(" allowed-cpc %@"), *(_QWORD *)(a1 + 24));
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) >= 1)
  {
    v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*v4, v5);
      v7 = er_EncryptionRangeCopyDebugDesc((uint64_t)ValueAtIndex);
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\t%@"), v7);
      if (v7)
        CFRelease(v7);
      ++v5;
    }
    while (v5 < CFArrayGetCount(*v4));
  }
  return Mutable;
}

uint64_t FigManifoldFactoryCreateManifold(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, unsigned int a3, CMTime *a4, char a5, uint64_t a6, uint64_t a7, int a8, CFArrayRef theArray, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  _QWORD *v12;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  CMTime v26;
  uint64_t v27;

  v12 = a12;
  v27 = 0;
  if (!a10)
  {
LABEL_24:
    v20 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if ((a10 & 1) != 0)
  {
    v26 = *a4;
    v20 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, a7, 1, a11, &v27);
    v19 = 4294951252;
    if ((_DWORD)v20 != -16044)
    {
LABEL_25:
      v19 = v20;
      goto LABEL_23;
    }
  }
  else
  {
    v19 = 0;
  }
  v24 = a7;
  if ((a10 & 2) == 0
    || !manifoldFactory_isManifoldAllowable(CFSTR("com.apple.coremedia.formatreader.webvtt"), theArray))
  {
    v22 = 0;
    if ((a10 & 4) == 0)
      goto LABEL_14;
LABEL_11:
    if (manifoldFactory_isManifoldAllowable(CFSTR("com.apple.coremedia.formatreader.mpeg"), theArray))
    {
      v26 = *a4;
      v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, v24, 4, a11, &v27);
      if ((_DWORD)v21 != -16044)
        goto LABEL_21;
      v22 = 1;
      v19 = 4294951252;
    }
    goto LABEL_14;
  }
  v26 = *a4;
  v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, a7, 2, a11, &v27);
  if ((_DWORD)v21 != -16044)
    goto LABEL_21;
  v22 = 1;
  v19 = 4294951252;
  if ((a10 & 4) != 0)
    goto LABEL_11;
LABEL_14:
  if ((a10 & 8) == 0
    || !manifoldFactory_isManifoldAllowable(CFSTR("com.apple.coremedia.formatreader.quicktime-iso"), theArray))
  {
    goto LABEL_18;
  }
  v26 = *a4;
  v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, v24, 8, a11, &v27);
  if ((_DWORD)v21 == -16044)
  {
    v22 = 1;
    v19 = 4294951252;
LABEL_18:
    if ((a10 & 0x10) != 0
      && manifoldFactory_isManifoldAllowable(CFSTR("com.apple.coremedia.formatreader.audiofilestream"), theArray))
    {
      v26 = *a4;
      v21 = manifoldFactory_createManifold(a1, a2, a3, &v26, a5, a6, v24, 16, a11, &v27);
      goto LABEL_21;
    }
    v12 = a12;
    if (v22)
      goto LABEL_23;
    goto LABEL_24;
  }
LABEL_21:
  v19 = v21;
  v12 = a12;
LABEL_23:
  *v12 = v27;
  return v19;
}

uint64_t manifoldFactory_createManifold(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, unsigned int a3, CMTime *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t result;
  CMTime v19;
  void *v20;

  v20 = 0;
  result = _os_feature_enabled_impl();
  if ((_DWORD)result)
  {
    result = 0;
    switch(a8)
    {
      case 1:
        goto LABEL_5;
      case 2:
        result = FigManifoldCreateRemoteForWebVTT((uint64_t)a1, a2, a6, 0, a9, &v20);
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        result = FigManifoldCreateRemoteForMPEG2((uint64_t)a1, a2, a6, a7, 0, a9, &v20);
        break;
      case 8:
        result = FigManifoldCreateRemoteForMovieFragmentStream((uint64_t)a1, a2, a6, 0, a9, a3, &v20);
        break;
      default:
        if (a8 == 16)
          result = FigManifoldCreateRemoteForICY((uint64_t)a1, a2, a6, 0, a9, &v20);
        break;
    }
  }
  else
  {
    switch(a8)
    {
      case 1:
LABEL_5:
        v19 = *a4;
        result = FigManifoldCreateForGap(a1, a2, &v19, a5, a6, 0, a9, &v20);
        break;
      case 2:
        result = FigManifoldCreateForWebVTT(a1, a2, a6, 0, a9, &v20);
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        break;
      case 4:
        result = FigManifoldCreateForMPEG2((uint64_t)a1, a2, a6, a7, 0, a9, (CFTypeRef *)&v20);
        break;
      case 8:
        result = FigManifoldCreateForMovieFragmentStream(a1, (uint64_t)a2, a6, 0, a9, a3, (CFTypeRef *)&v20);
        break;
      default:
        if (a8 == 16)
          result = FigManifoldCreateForICY(a1, a2, a6, 0, a9, &v20);
        break;
    }
  }
  *a10 = v20;
  return result;
}

uint64_t manifoldFactory_isManifoldAllowable(const void *a1, CFArrayRef theArray)
{
  CFTypeRef v4;
  CFIndex v5;
  uint64_t v6;

  if (!theArray || CFArrayGetCount(theArray) < 1)
    return 1;
  v4 = FigCopyUTITypesForFormatReaderIdentifier(a1);
  if (CFArrayGetCount(theArray) < 1)
  {
LABEL_7:
    v6 = 0;
    if (!v4)
      return v6;
    goto LABEL_11;
  }
  v5 = 0;
  while (1)
  {
    CFArrayGetValueAtIndex(theArray, v5);
    if (FigCFArrayContainsValue())
      break;
    if (++v5 >= CFArrayGetCount(theArray))
      goto LABEL_7;
  }
  v6 = 1;
  if (v4)
LABEL_11:
    CFRelease(v4);
  return v6;
}

uint64_t FigVirtualFramebufferGetClassID()
{
  MEMORY[0x19402F294](&FigVirtualFramebufferGetClassID_sRegisterFigVirtualFramebufferTypeOnce, RegisterFigVirtualFramebufferType);
  return sFigVirtualFramebufferClassID;
}

uint64_t RegisterFigVirtualFramebufferType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigVirtualFramebufferGetTypeID()
{
  MEMORY[0x19402F294](&FigVirtualFramebufferGetClassID_sRegisterFigVirtualFramebufferTypeOnce, RegisterFigVirtualFramebufferType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigStreamingNetworkErrorGetRecommendedAction(__CFError *a1, uint64_t *a2, uint64_t *a3)
{
  int Code;
  CFDictionaryRef v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t Int32IfPresent;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  Code = CFErrorGetCode(a1);
  CFErrorGetDomain(a1);
  v7 = CFErrorCopyUserInfo(a1);
  if (!Code)
  {
    Int32IfPresent = FigSignalErrorAt();
    if (!v7)
      return Int32IfPresent;
    goto LABEL_40;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual() || FigCFEqual())
    {
      if (Code == -1009 || Code == -1005)
      {
        v8 = 3;
        v9 = 2;
        goto LABEL_35;
      }
      if (Code == 2)
      {
        Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
        v8 = 2;
        if ((_DWORD)Int32IfPresent)
          goto LABEL_39;
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    if (FigCFEqual())
    {
      if ((Code + 9829) <= 0x16 && ((1 << (Code + 101)) & 0x410011) != 0)
      {
        v8 = 2;
        v9 = 5;
        goto LABEL_35;
      }
    }
    else
    {
      if (!FigCFEqual())
      {
        v9 = 0;
        v8 = 2;
        goto LABEL_35;
      }
      if (Code == 61)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_33:
        v8 = 2;
        goto LABEL_34;
      }
    }
    v8 = 3;
LABEL_34:
    v9 = 4;
    goto LABEL_35;
  }
  v8 = 2;
  v9 = 3;
  if (Code <= -12939)
  {
    v10 = Code - 44;
    if ((Code + 16852) <= 0xC)
    {
      if (((1 << v10) & 0x3D) == 0)
      {
        if (((1 << v10) & 0xB00) != 0 || ((1 << v10) & 0x1400) == 0)
          goto LABEL_23;
        goto LABEL_21;
      }
      goto LABEL_35;
    }
    goto LABEL_23;
  }
  if (Code <= -12669)
  {
    if (Code == -12938)
      goto LABEL_35;
    goto LABEL_23;
  }
  if (Code == -12660)
  {
LABEL_21:
    v9 = 1;
    v8 = 1;
    goto LABEL_35;
  }
  if (Code != -12661)
  {
LABEL_23:
    v8 = 2;
    v9 = 1;
  }
LABEL_35:
  if (a2)
    *a2 = v8;
  Int32IfPresent = 0;
  if (a3)
    *a3 = v9;
LABEL_39:
  if (v7)
LABEL_40:
    CFRelease(v7);
  return Int32IfPresent;
}

const __CFString *FigStreamingNetworkErrorGetStringForErrorAction(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown action");
  else
    return off_1E2FB1950[a1];
}

uint64_t OVCGLObjectCacheGetObjectForSurfaceAndPlane(unint64_t *a1, int a2, uint64_t a3, int a4, _DWORD *a5, BOOL *a6)
{
  if (a2)
    return ovcgloc_getObjectForSurfaceOrAttributes(a1, a2, 0, 0, 0, a3, a4, a5, a6);
  else
    return FigSignalErrorAt();
}

uint64_t ovcgloc_getObjectForSurfaceOrAttributes(unint64_t *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, _DWORD *a8, BOOL *a9)
{
  _DWORD *v9;
  unint64_t v16;
  _DWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  GLuint *v24;
  BOOL *v25;

  if (!a1)
    return FigSignalErrorAt();
  v9 = a8;
  if (!a8)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[3]);
  v16 = *a1;
  if (*a1)
  {
    v17 = v9;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = a1[2];
    v23 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      if (*(_BYTE *)(v22 + 56))
      {
        if (*(_DWORD *)v22 == a2
          && *(_QWORD *)(v22 + 32) == a6
          && *(_DWORD *)(v22 + 24) == a3
          && *(_QWORD *)(v22 + 8) == a4
          && *(_QWORD *)(v22 + 16) == a5
          && *(_DWORD *)(v22 + 40) == a7)
        {
          *v17 = *(_DWORD *)(v22 + 44);
          *(_QWORD *)(v22 + 48) = mach_absolute_time();
          v25 = a9;
          if (a9)
            goto LABEL_28;
          goto LABEL_29;
        }
        if (*(_QWORD *)(v22 + 48) < v23)
        {
          v23 = *(_QWORD *)(v22 + 48);
          v20 = v22;
        }
      }
      else if (!v19)
      {
        v19 = v22;
      }
      v18 = ++v21 >= v16;
      v22 += 64;
      if (v16 == v21)
      {
        v9 = v17;
        if (v19)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
  }
  v20 = 0;
LABEL_21:
  ots_destroyCacheEntry(v20);
  --a1[1];
  v19 = v20;
LABEL_22:
  *(_QWORD *)(v19 + 48) = mach_absolute_time();
  *(_BYTE *)(v19 + 56) = 1;
  *(_DWORD *)v19 = a2;
  *(_DWORD *)(v19 + 24) = a3;
  *(_QWORD *)(v19 + 8) = a4;
  *(_QWORD *)(v19 + 16) = a5;
  *(_QWORD *)(v19 + 32) = a6;
  *(_DWORD *)(v19 + 40) = a7;
  if (a7 == 36160)
  {
    glGenFramebuffers(1, (GLuint *)(v19 + 44));
  }
  else
  {
    v24 = (GLuint *)(v19 + 44);
    if (a7 == 36161)
      glGenRenderbuffers(1, v24);
    else
      glGenTextures(1, v24);
  }
  v25 = a9;
  ++a1[1];
  *v9 = *(_DWORD *)(v19 + 44);
  v18 = 1;
  if (a9)
LABEL_28:
    *v25 = v18;
LABEL_29:
  MEMORY[0x19402EF04](a1[3]);
  return 0;
}

uint64_t OVCGLObjectCacheGetObjectForAttributesAndPlane(unint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7, BOOL *a8)
{
  if (a2 && a3 && a4)
    return ovcgloc_getObjectForSurfaceOrAttributes(a1, 0, a2, a3, a4, a5, a6, a7, a8);
  else
    return FigSignalErrorAt();
}

uint64_t OVCGLObjectCacheCreate(int64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 && a1 > 0)
  {
    v4 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040AB73632BuLL);
    v5 = v4;
    if (!v4
      || (*v4 = a1, v6 = malloc_type_calloc(a1, 0x40uLL, 0x100004084D3BC0BuLL), (v5[2] = v6) == 0)
      || (v7 = FigSimpleMutexCreate(), (v5[3] = v7) == 0))
    {
      v8 = FigSignalErrorAt();
      goto LABEL_8;
    }
    v8 = 0;
    *a2 = v5;
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  v5 = 0;
LABEL_8:
  OVCGLObjectCacheDestroy(v5);
  return v8;
}

void OVCGLObjectCacheDestroy(void *a1)
{
  uint64_t v2;
  unint64_t v3;

  if (a1)
  {
    if (*(_QWORD *)a1)
    {
      v2 = 0;
      v3 = 0;
      do
      {
        ots_destroyCacheEntry(*((_QWORD *)a1 + 2) + v2);
        ++v3;
        v2 += 64;
      }
      while (v3 < *(_QWORD *)a1);
    }
    *((_QWORD *)a1 + 1) = 0;
    FigSimpleMutexDestroy();
    free(*((void **)a1 + 2));
    free(a1);
  }
}

uint64_t OVCGLObjectCacheFlushObjectsForSurface(unint64_t *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[3]);
  v4 = *a1;
  if (*a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = a1[2] + v5;
      if (*(_BYTE *)(v7 + 56))
      {
        if (*(_DWORD *)v7 == a2)
        {
          ots_destroyCacheEntry(v7);
          v4 = *a1;
          --a1[1];
        }
      }
      ++v6;
      v5 += 64;
    }
    while (v6 < v4);
  }
  MEMORY[0x19402EF04](a1[3]);
  return 0;
}

double ots_destroyCacheEntry(uint64_t a1)
{
  int v2;
  const GLuint *v3;
  double result;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(_DWORD *)(a1 + 40);
    if (v2 == 36160)
    {
      glDeleteFramebuffers(1, (const GLuint *)(a1 + 44));
    }
    else
    {
      v3 = (const GLuint *)(a1 + 44);
      if (v2 == 36161)
        glDeleteRenderbuffers(1, v3);
      else
        glDeleteTextures(1, v3);
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t FigCDSLayoutDecouple_GetReferenceNode(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 200);
  return result;
}

uint64_t FigCDSLayoutDecouple_Decouple(const __CFArray *a1, BOOL *a2, double a3, double a4, double a5, double a6)
{
  const __CFArray *v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  CFMutableDataRef Mutable;
  uint64_t v15;
  double v16;
  double v17;
  double v22;
  double v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex i;
  __CFArray **ValueAtIndex;
  __CFArray **v28;
  __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex v32;
  int v33;
  CFIndex v34;
  CFIndex v35;
  double *v36;
  double *v37;
  CFIndex v38;
  double *v39;
  double *v40;
  uint64_t v41;
  CFIndex j;
  double *v43;
  __CFArray *MutableCopy;
  const __CFArray *v45;
  double *v46;
  double *v47;
  CFIndex k;
  double v49;
  double v50;
  double *v51;
  double *v52;
  CFIndex m;
  double v54;
  double v55;
  CFIndex v56;
  CFIndex v57;
  CFIndex v58;
  CFIndex v59;
  char *v60;
  char *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  CFIndex v66;
  CFIndex v67;
  CFIndex v68;
  double v69;
  double *v70;
  double *v71;
  double v72;
  double *v73;
  double *v74;
  double *v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double *v82;
  double *v83;
  double v84;
  double v85;
  double v86;
  double *v87;
  double *v88;
  CGFloat v89;
  CGFloat v90;
  double v91;
  double v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  double v102;
  char *v103;
  CFIndex v104;
  uint64_t v105;
  int64_t v106;
  const UInt8 *BytePtr;
  uint64_t v108;
  int v109;
  CFIndex v110;
  const UInt8 *v111;
  const void *v112;
  CFIndex v113;
  const UInt8 *v114;
  CFIndex v115;
  CFIndex v116;
  CFIndex n;
  uint64_t v120;
  const __CFData *theData;
  const __CFAllocator *allocator;
  uint64_t v123;
  double v124;
  double v125;
  double v126;
  double v127;
  CFIndex v128;
  const __CFArray *theArray;
  char v130;
  __int128 v131;
  int v132;
  CFIndex v133;
  CFIndex v134;
  double v135;
  CFRange v136;
  CFRange v137;

  v10 = a1;
  Count = CFArrayGetCount(a1);
  v12 = Count - 1;
  if (Count >= 1
    && (v13 = Count,
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0)) != 0))
  {
    v120 = v12 * v13;
    theData = Mutable;
    if (v12 * v13 < 1)
    {
      v15 = 0;
      LOBYTE(v33) = 1;
      goto LABEL_111;
    }
    v15 = 0;
    v16 = a3 + a5;
    v17 = a4 + a6;
    __asm { FMOV            V0.2D, #-1.0 }
    v131 = _Q0;
    v22 = -1.0;
    v23 = 1.0;
    theArray = v10;
    v126 = a3;
    v127 = a4;
    v124 = v17;
    v125 = v16;
    do
    {
      if (!v10)
        goto LABEL_110;
      v24 = CFArrayGetCount(v10);
      if (v24 >= 1)
      {
        v25 = v24;
        for (i = 0; i != v25; ++i)
        {
          ValueAtIndex = (__CFArray **)CFArrayGetValueAtIndex(v10, i);
          if (ValueAtIndex)
          {
            v28 = ValueAtIndex;
            v29 = ValueAtIndex[4];
            if (v29)
              CFArrayRemoveAllValues(v29);
            *(_OWORD *)(v28 + 5) = v131;
            *(_OWORD *)(v28 + 7) = v131;
            v28[22] = 0;
            v28[23] = 0;
            v28[21] = 0;
            *(_OWORD *)(v28 + 9) = 0u;
            *(_OWORD *)(v28 + 11) = 0u;
            *(_OWORD *)(v28 + 13) = 0u;
            *(_OWORD *)(v28 + 15) = 0u;
            *(_OWORD *)(v28 + 17) = 0u;
            *(_OWORD *)(v28 + 19) = 0u;
          }
        }
      }
      v30 = CFArrayGetCount(v10);
      if (v30 <= 1)
        goto LABEL_110;
      v31 = v30;
      v32 = 0;
      v33 = 0;
      v34 = v30 - 2;
      do
      {
        v35 = v32;
        v36 = (double *)CFArrayGetValueAtIndex(v10, v32++);
        if (v36 && v32 < v31)
        {
          v37 = v36;
          v38 = v32;
          do
          {
            v39 = (double *)CFArrayGetValueAtIndex(v10, v38);
            if (v39)
            {
              v40 = v39;
              if (vabdd_f64(*v37 + v37[2] * 0.5, *v39 + v39[2] * 0.5) < v37[2] * 0.5 + v39[2] * 0.5 + -3.0
                && vabdd_f64(v37[1] + v37[3] * 0.5, v39[1] + v39[3] * 0.5) < v39[3] * 0.5 + v37[3] * 0.5 + -3.0)
              {
                CFArrayAppendValue(*((CFMutableArrayRef *)v37 + 4), v39);
                CFArrayAppendValue(*((CFMutableArrayRef *)v40 + 4), v37);
                v33 = 1;
              }
            }
            ++v38;
          }
          while (v31 != v38);
        }
      }
      while (v35 != v34);
      if (!v33)
      {
LABEL_110:
        LOBYTE(v33) = 0;
        ++v15;
        break;
      }
      v41 = CFArrayGetCount(v10);
      if (v41 >= 1)
      {
        for (j = 0; j != v41; ++j)
        {
          v43 = (double *)CFArrayGetValueAtIndex(v10, j);
          v43[5] = a3;
          v43[6] = v16;
          v43[7] = v17;
          v43[8] = a4;
        }
      }
      MutableCopy = CFArrayCreateMutableCopy(allocator, 0, v10);
      if (MutableCopy)
      {
        v45 = MutableCopy;
        v136.location = 0;
        v136.length = v41;
        CFArraySortValues(MutableCopy, v136, (CFComparatorFunction)cds_objComparatorX, 0);
        v46 = (double *)CFArrayGetValueAtIndex(v45, 0);
        v47 = v46;
        v46[5] = a3;
        if (v41 >= 2)
        {
          for (k = 1; k != v41; ++k)
          {
            v46 = (double *)CFArrayGetValueAtIndex(v45, k);
            v49 = v46[2] * 0.5;
            v50 = v47[2] * 0.5;
            v47[6] = v50 + *v46 + v49 + v22;
            v46[5] = v50 + *v47 + v23 - v49;
            v47 = v46;
          }
        }
        v46[6] = v16;
        v137.location = 0;
        v137.length = v41;
        CFArraySortValues(v45, v137, (CFComparatorFunction)cds_objComparatorY, 0);
        v51 = (double *)CFArrayGetValueAtIndex(v45, 0);
        v52 = v51;
        v51[8] = a4;
        if (v41 >= 2)
        {
          for (m = 1; m != v41; ++m)
          {
            v51 = (double *)CFArrayGetValueAtIndex(v45, m);
            v54 = v51[3] * 0.5;
            v55 = v52[3] * 0.5;
            v52[7] = v55 + v51[1] + v54 + v22;
            v51[8] = v55 + v52[1] + v23 - v54;
            v52 = v51;
          }
        }
        v51[7] = v17;
        CFRelease(v45);
      }
      v56 = CFArrayGetCount(v10);
      if (v56 < 1)
        break;
      v57 = v56;
      v123 = v15;
      v132 = 0;
      v58 = 0;
      v59 = -1;
      v135 = 0.0;
      v130 = v33;
      v128 = v56;
      do
      {
        v60 = (char *)CFArrayGetValueAtIndex(v10, v58);
        if (!v60)
          goto LABEL_79;
        v61 = v60;
        if (*((int *)v60 + 48) > 0)
        {
          v132 = 1;
          goto LABEL_79;
        }
        v133 = v58;
        v134 = v59;
        v62 = *((double *)v60 + 5);
        v63 = *((double *)v60 + 6);
        v65 = *((double *)v60 + 7);
        v64 = *((double *)v60 + 8);
        v66 = CFArrayGetCount(*((CFArrayRef *)v60 + 4));
        if (v66 >= 1)
        {
          v67 = v66;
          v68 = 0;
          v69 = *(double *)v61 + *((double *)v61 + 2) * 0.5;
          v70 = (double *)(v61 + 96);
          v71 = (double *)(v61 + 72);
          v72 = *((double *)v61 + 1) + *((double *)v61 + 3) * 0.5;
          v73 = (double *)(v61 + 128);
          v74 = (double *)(v61 + 152);
          do
          {
            v75 = (double *)CFArrayGetValueAtIndex(*((CFArrayRef *)v61 + 4), v68);
            v76 = v75[3];
            v77 = v75[2] * 0.5;
            v78 = v75[1];
            v79 = *v75 + v77;
            v80 = *((double *)v61 + 3);
            v81 = v77 + *((double *)v61 + 2) * 0.5 - vabdd_f64(v69, v79);
            if (v69 >= v79)
            {
              v82 = (double *)(v61 + 96);
              v83 = (double *)(v61 + 112);
              if (*v70 == 0.0 || (v82 = (double *)(v61 + 96), v83 = (double *)(v61 + 112), v81 < *v70))
LABEL_49:
                *v82 = v81;
            }
            else
            {
              v82 = (double *)(v61 + 72);
              v83 = (double *)(v61 + 88);
              if (*v71 == 0.0)
                goto LABEL_49;
              v82 = (double *)(v61 + 72);
              v83 = (double *)(v61 + 88);
              if (v81 < *v71)
                goto LABEL_49;
            }
            v84 = v76 * 0.5;
            v85 = v78 + v84;
            v86 = v84 + v80 * 0.5 - vabdd_f64(v72, v78 + v84);
            *v83 = v86 + *v83;
            if (v72 >= v85)
            {
              v87 = (double *)(v61 + 128);
              v88 = (double *)(v61 + 136);
              if (*v73 != 0.0)
              {
                v87 = (double *)(v61 + 128);
                v88 = (double *)(v61 + 136);
                if (v86 >= *v73)
                  goto LABEL_57;
              }
            }
            else
            {
              v87 = (double *)(v61 + 152);
              v88 = (double *)(v61 + 160);
              if (*v74 != 0.0)
              {
                v87 = (double *)(v61 + 152);
                v88 = (double *)(v61 + 160);
                if (v86 >= *v74)
                  goto LABEL_57;
              }
            }
            *v87 = v86;
LABEL_57:
            *v88 = v81 + *v88;
            ++v68;
          }
          while (v67 != v68);
        }
        v89 = v63 - v62;
        v90 = v65 - v64;
        *((double *)v61 + 9) = -*((double *)v61 + 9);
        *((double *)v61 + 19) = -*((double *)v61 + 19);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 72), v62, v64, v89, v90);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 96), v62, v64, v89, v90);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 144), v62, v64, v89, v90);
        fcr_validateMove((CGRect *)v61, (uint64_t)(v61 + 120), v62, v64, v89, v90);
        v91 = *((double *)v61 + 11);
        v92 = *((double *)v61 + 14);
        v93 = v91 <= v92;
        if (v91 <= v92)
          v91 = *((double *)v61 + 14);
        v94 = 96;
        if (!v93)
          v94 = 72;
        v95 = *(_QWORD *)&v61[v94];
        v96 = *((double *)v61 + 17);
        v97 = *((double *)v61 + 20);
        v98 = v96 <= v97;
        if (v96 <= v97)
          v96 = *((double *)v61 + 20);
        v99 = 152;
        if (!v98)
          v99 = 128;
        v100 = *(_QWORD *)&v61[v99];
        if (v91 > 0.0 || v96 > 0.0)
        {
          _NF = v91 > 0.0 && *((double *)v61 + 2) < *((double *)v61 + 3);
          a3 = v126;
          a4 = v127;
          v17 = v124;
          v16 = v125;
          v22 = -1.0;
          v23 = 1.0;
          LOBYTE(v33) = v130;
          v58 = v133;
          v59 = v134;
          v57 = v128;
          if (_NF)
          {
            *((_QWORD *)v61 + 21) = v95;
            *((_QWORD *)v61 + 22) = 0;
            *((double *)v61 + 23) = v91;
          }
          else
          {
            *((_QWORD *)v61 + 21) = 0;
            v91 = v96;
            *((_QWORD *)v61 + 22) = v100;
            *((double *)v61 + 23) = v96;
          }
          v10 = theArray;
        }
        else
        {
          *((_QWORD *)v61 + 21) = 0;
          *((_QWORD *)v61 + 22) = 0;
          v91 = 0.0;
          *((_QWORD *)v61 + 23) = 0;
          a3 = v126;
          a4 = v127;
          v57 = v128;
          v10 = theArray;
          v17 = v124;
          v16 = v125;
          v22 = -1.0;
          v23 = 1.0;
          LOBYTE(v33) = v130;
          v58 = v133;
          v59 = v134;
        }
        v102 = v135;
        if (v135 < v91)
        {
          v59 = v58;
          v102 = v91;
        }
        v135 = v102;
LABEL_79:
        ++v58;
      }
      while (v58 != v57);
      if (v135 <= 0.0 || v59 < 0)
      {
        v15 = v123;
        if (!v132)
          break;
        v115 = CFArrayGetCount(v10);
        if (v115 >= 1)
        {
          v116 = v115;
          for (n = 0; n != v116; ++n)
            *((_DWORD *)CFArrayGetValueAtIndex(v10, n) + 48) = 0;
        }
        v15 = v123 - 1;
      }
      else
      {
        v103 = (char *)CFArrayGetValueAtIndex(v10, v59);
        v15 = v123;
        if (v103)
        {
          *(float64x2_t *)v103 = vaddq_f64(*(float64x2_t *)(v103 + 168), *(float64x2_t *)v103);
          ++*((_DWORD *)v103 + 48);
        }
        v104 = CFArrayGetCount(v10);
        if (v104)
        {
          v105 = v104;
          v106 = CFDataGetLength(theData) / (unint64_t)(208 * v104);
          if (v106 >= 1)
          {
            BytePtr = CFDataGetBytePtr(theData);
            v108 = 0;
            while (1)
            {
              if (v105 < 1)
              {
                v109 = 0;
              }
              else
              {
                v109 = 0;
                v110 = 0;
                v111 = BytePtr;
                do
                {
                  v112 = CFArrayGetValueAtIndex(theArray, v110);
                  if (!memcmp(v111, v112, 0xD0uLL))
                    ++v109;
                  ++v110;
                  v111 += 208;
                }
                while (v105 != v110);
              }
              if (v105 == v109)
                break;
              ++v108;
              BytePtr += 208 * v105;
              LOBYTE(v33) = v130;
              if (v108 == v106)
                goto LABEL_96;
            }
            LOBYTE(v33) = v130;
            break;
          }
LABEL_96:
          if (v105 < 1)
          {
            v10 = theArray;
          }
          else
          {
            v113 = 0;
            v10 = theArray;
            do
            {
              v114 = (const UInt8 *)CFArrayGetValueAtIndex(theArray, v113);
              CFDataAppendBytes(theData, v114, 208);
              ++v113;
            }
            while (v105 != v113);
          }
        }
      }
      ++v15;
    }
    while (v15 < v120);
LABEL_111:
    CFRelease(theData);
  }
  else
  {
    v15 = 0;
    LOBYTE(v33) = 1;
  }
  if (a2)
    *a2 = v15 > 1;
  return v33;
}

uint64_t cds_objComparatorX(double *a1, double *a2)
{
  double v2;
  double v3;

  v2 = *a1 + a1[2] * 0.5;
  v3 = *a2 + a2[2] * 0.5;
  if (v2 < v3)
    return -1;
  else
    return v2 > v3;
}

uint64_t cds_objComparatorY(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)(a1 + 8) + *(double *)(a1 + 24) * 0.5;
  v3 = *(double *)(a2 + 8) + *(double *)(a2 + 24) * 0.5;
  if (v2 < v3)
    return -1;
  else
    return v2 > v3;
}

uint64_t FigCaptionDataToMarkupBasedAttributedString(const __CFAllocator *a1, uint64_t a2, uint64_t a3, CMTime *a4, CMTime *a5, uint64_t a6, __CFAttributedString **a7, const __CFDictionary *a8, const __CFDictionary *a9)
{
  __int128 v15;
  __CFAttributedString *Mutable;
  uint64_t (*v17)(uint64_t);
  const __CFString *v18;
  uint64_t CMBaseObject;
  uint64_t (*v20)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *);
  uint64_t v21;
  const __CFArray *Value;
  CFIndex Length;
  const __CFString *v24;
  CFTypeRef v25;
  CFIndex v26;
  int v27;
  const void *v28;
  const void *v29;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, const void *, const __CFAllocator *, CMTime *);
  int v34;
  CFTypeRef v35;
  int ColorRGBAFromColorStyleDynamicProperty;
  const __CFString *InitialValue;
  CFTypeID v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  uint64_t v43;
  const void *v44;
  const void *v45;
  CFTypeID v46;
  uint64_t (*v47)(uint64_t);
  const __CFString *v48;
  uint64_t v49;
  CFIndex v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, _QWORD, const __CFAllocator *, const __CFArray **);
  int v53;
  CFIndex v54;
  int v55;
  __CFString *v56;
  const __CFString *v57;
  const void *v58;
  const void *v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, const void *, const __CFAllocator *, const __CFString **, CMTime *);
  int v62;
  const void *v63;
  CFTypeRef v64;
  int v65;
  uint64_t UInt32;
  const __CFString *v67;
  CFTypeID v68;
  const void *v69;
  const __CFNumber *v70;
  const __CFNumber *v71;
  CFTypeID v72;
  char v73;
  const __CFString *SInt8;
  const __CFString *v75;
  CFTypeID v76;
  const __CFString *v77;
  CFTypeID v78;
  uint64_t v79;
  const void *v80;
  __int128 v81;
  const void *v82;
  const void *v83;
  const __CFString *v84;
  uint64_t v85;
  CFMutableDictionaryRef v86;
  __CFDictionary *v87;
  const void *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  const void *v100;
  const void *v101;
  const void *v102;
  const void *v103;
  const void *v104;
  const __CFString *v105;
  uint64_t (*v106)(const __CFString *);
  const __CFString *v107;
  const void *v108;
  CFTypeID v109;
  int TextMarkupFromTextEmphasis;
  CFMutableDictionaryRef v111;
  __CFDictionary *v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *);
  int v115;
  const void *v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *);
  int v124;
  const void **v125;
  int v126;
  const void *v127;
  CFAttributedStringRef v128;
  CFAttributedStringRef v129;
  const void *v130;
  CFTypeID v131;
  CFTypeID v132;
  CFMutableArrayRef v133;
  CFIndex v134;
  const __CFString *v135;
  CFTypeID v136;
  uint64_t v137;
  CFTypeRef v138;
  CFIndex v139;
  CFIndex v140;
  const __CFArray *v141;
  const __CFArray *v142;
  CFStringRef *v143;
  CFIndex v144;
  uint64_t v145;
  uint64_t (*v146)(uint64_t, CFTypeRef, const __CFAllocator *, const __CFArray **);
  int v147;
  int v148;
  BOOL v149;
  CFStringRef Copy;
  CFTypeRef v151;
  const __CFDictionary *v152;
  const __CFDictionary *v153;
  const void *v154;
  BOOL v155;
  const void *v156;
  __CFDictionary *v157;
  CFIndex v158;
  CFIndex v159;
  const void *v160;
  CFIndex v161;
  const void *v162;
  uint64_t v163;
  uint64_t (*v164)(uint64_t, const void *, const __CFAllocator *, CFStringRef *);
  int v165;
  __CFDictionary *v166;
  const void *v167;
  int TextMarkupFromAbstractPosition;
  const __CFString *v169;
  const void *v170;
  const void *v171;
  CFTypeID v172;
  const void *v173;
  void *v174;
  const void *v175;
  uint64_t v176;
  const void *v177;
  __CFDictionary *v178;
  const void *v179;
  CFTypeRef v180;
  const void *v181;
  CFTypeID v182;
  const __CFDictionary *v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const void *v188;
  __CFDictionary *v189;
  const void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const void *v194;
  uint64_t v195;
  CFTypeID v196;
  __int128 v197;
  uint64_t v198;
  __CFDictionary *v199;
  const void *v200;
  const __CFDictionary *Attributes;
  const void *v202;
  const void *v203;
  CFTypeID v204;
  int v205;
  CFTypeRef *v206;
  int v207;
  CFTypeRef v208;
  const void *v209;
  const void *v210;
  CFTypeID v211;
  CFTypeRef v212;
  const void *v213;
  CFTypeRef v214;
  __CFDictionary *v215;
  CFStringRef v216;
  const void *v217;
  CFTypeRef v218;
  const void *v219;
  CFTypeRef v220;
  CFTypeID v221;
  uint64_t v222;
  const void *v223;
  const void *v224;
  int v225;
  CFTypeRef *v226;
  int v227;
  CFTypeRef v228;
  const __CFString *v229;
  CFTypeID v230;
  const void *v231;
  const void *v232;
  const void *v233;
  const void *v234;
  const __CFString *v235;
  CFTypeID v236;
  const __CFString *v237;
  CFTypeID v238;
  const void *v239;
  CFTypeID v240;
  uint64_t v241;
  char v242;
  const void *v243;
  const void *v244;
  __CFDictionary *v245;
  CFMutableDictionaryRef v246;
  CFMutableDictionaryRef v247;
  __CFDictionary *v248;
  CFTypeRef v250;
  const void *v251;
  CFTypeRef v252;
  CFTypeRef v253;
  const void *v254;
  CFTypeRef v255;
  const void *v256;
  CFTypeRef v257;
  const void *v258;
  const void *v259;
  CFTypeRef v260;
  uint64_t v261;
  uint64_t v262;
  const void *v263;
  CFTypeRef v264;
  CFTypeRef v265;
  void *v266;
  void *v267;
  void *key;
  const void *v269;
  CFTypeRef v270;
  CFTypeRef v271;
  const void *v272;
  CFTypeRef v273;
  const void *v274;
  CFTypeRef v275;
  CFTypeRef v276;
  CFTypeRef v277;
  CFTypeRef v278;
  const void *v279;
  const __CFString *v280;
  CFTypeRef v281;
  CFTypeRef v282;
  CFTypeRef v283;
  CFTypeRef v284;
  CFTypeRef v285;
  CFTypeRef v286;
  void *v287;
  void *v288;
  CFTypeRef v289;
  CFTypeRef v290;
  void *v291;
  void *v292;
  CFTypeRef v293;
  CFTypeRef v294;
  CFTypeRef v295;
  CFTypeRef v296;
  void *v297;
  void *v298;
  CFTypeRef v299;
  CFTypeRef v300;
  CFTypeRef v301;
  CFTypeRef v302;
  CFTypeRef v303;
  const __CFString *v304;
  CFTypeRef v305;
  CFTypeRef v306;
  CFTypeRef v307;
  CFTypeRef v308;
  CFTypeRef v309;
  CFTypeRef v310;
  CFTypeRef v311;
  CFTypeRef v312;
  CFTypeRef v313;
  CFTypeRef v314;
  CFTypeRef v315;
  CFTypeRef v316;
  CFTypeRef v317;
  CFTypeRef v318;
  const void *v319;
  const void *v320;
  CFTypeRef v321;
  CFTypeRef v322;
  CFTypeRef v323;
  CFTypeRef v324;
  const void *v325;
  const void *v326;
  CFTypeRef v327;
  CFTypeRef v328;
  CFTypeRef v329;
  CFTypeRef v330;
  CFTypeRef v331;
  CFTypeRef v332;
  CFTypeRef v333;
  CFTypeRef v334;
  CFTypeRef v335;
  CFTypeRef v336;
  CFTypeRef v337;
  CFTypeRef v338;
  CFTypeRef v339;
  CFTypeRef v340;
  CFTypeRef v341;
  CFTypeRef v342;
  CFTypeRef v343;
  CFTypeRef v344;
  CFTypeRef v345;
  CFTypeRef v346;
  CFTypeRef v347;
  CFTypeRef v348;
  CFTypeRef v349;
  CFTypeRef v350;
  CFTypeRef v351;
  CFTypeRef v352;
  CFTypeRef v353;
  CFTypeRef v354;
  CFTypeRef v355;
  CFTypeRef v356;
  const void *v357;
  const void *v358;
  const void *v359;
  CFTypeRef v360;
  CFTypeRef v361;
  CFTypeRef v362;
  CFTypeRef v363;
  CFTypeRef v364;
  CFTypeRef v365;
  CFTypeRef v366;
  CFTypeRef v367;
  CFTypeRef v368;
  CFTypeRef v369;
  CFTypeRef v370;
  CFTypeRef v371;
  CFTypeRef v372;
  CFTypeRef v373;
  CFTypeRef v374;
  CFTypeRef v375;
  CFTypeRef v376;
  CFTypeRef v377;
  CFTypeRef v378;
  CFTypeRef v379;
  CFTypeRef v380;
  CFTypeRef v381;
  CFTypeRef v382;
  CFTypeRef v383;
  CFTypeRef v384;
  CFTypeRef v385;
  CFTypeRef v386;
  CFTypeRef v387;
  CFTypeRef v388;
  CFTypeRef v389;
  CFTypeRef v390;
  const __CFDictionary *v391;
  CFTypeRef v392;
  const __CFAllocator *v393;
  CFTypeRef v394;
  CFTypeRef v395;
  CFTypeRef v396;
  CFTypeRef v397;
  CFTypeRef v398;
  CFTypeRef v399;
  CFTypeRef v400;
  CFTypeRef v401;
  CFTypeRef v402;
  CFTypeRef v403;
  __CFAttributedString **v404;
  CFTypeRef range;
  CFTypeRef rangea;
  CFTypeRef rangeb;
  CFTypeRef v408;
  CFTypeRef v409;
  CFTypeRef v410;
  CFTypeRef v411;
  CFTypeRef v412;
  CFTypeRef v413;
  CFTypeRef v414;
  CFTypeRef v415;
  CFStringRef v416;
  CFTypeRef v417;
  CFTypeRef v418;
  CFTypeRef v419;
  CFTypeRef cf;
  CFTypeRef v421;
  CFTypeRef v422;
  CFTypeRef v423;
  const void *v424;
  CFIndex Count;
  char v426;
  CFTypeRef v427;
  CFTypeRef v428;
  CFTypeRef v429;
  CFTypeRef cf2;
  CFTypeRef cf2a;
  CFTypeRef cf2b;
  __CFAttributedString *aStr;
  CFTypeRef v434;
  CFTypeRef v435;
  CFTypeRef v436;
  const __CFAllocator *allocator;
  CMTime end;
  CMTimeRange start;
  CMTime lhs;
  CMTime v441;
  CMTime v442;
  CMTimeRange v443;
  CFTypeRef v444;
  const __CFString *v445;
  const __CFArray *v446;
  CFStringRef v447;
  CMTime duration[2];
  CFRange v449;
  CFRange v450;
  CFRange v451;
  CFRange v452;
  CFRange v453;

  v444 = 0;
  v15 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
  *(_OWORD *)&v443.start.value = *MEMORY[0x1E0CA2E50];
  *(_OWORD *)&v443.start.epoch = v15;
  *(_OWORD *)&v443.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
  v442 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v441 = v442;
  *(_OWORD *)&start.start.value = *(_OWORD *)a3;
  start.start.epoch = *(_QWORD *)(a3 + 16);
  duration[0] = *a4;
  CMTimeRangeMake(&v443, &start.start, duration);
  *(_OWORD *)&start.start.value = *(_OWORD *)&v443.start.value;
  start.start.epoch = v443.start.epoch;
  duration[0] = *a5;
  CMTimeSubtract(&v442, &start.start, duration);
  start = v443;
  CMTimeRangeGetEnd(&lhs, &start);
  *(_OWORD *)&start.start.value = *(_OWORD *)a6;
  start.start.epoch = *(_QWORD *)(a6 + 16);
  CMTimeAdd(&v441, &lhs, &start.start);
  duration[0] = v442;
  end = v441;
  CMTimeRangeFromTimeToTime(&start, duration, &end);
  allocator = a1;
  Mutable = CFAttributedStringCreateMutable(a1, 0);
  if (!Mutable)
    goto LABEL_600;
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v17)
    v18 = (const __CFString *)v17(a2);
  else
    v18 = &stru_1E2FD85F8;
  v449.location = 0;
  v449.length = 0;
  CFAttributedStringReplaceString(Mutable, v449, v18);
  CMBaseObject = FigCaptionDataGetCMBaseObject();
  v20 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
  if (!v20)
  {
    v49 = 4294954514;
    goto LABEL_588;
  }
  v391 = a8;
  v404 = a7;
  v21 = v20(CMBaseObject, *MEMORY[0x1E0CA3340], a1, &v444);
  if ((_DWORD)v21)
    goto LABEL_601;
  duration[0].value = 0;
  MEMORY[0x19402F294](&fcctx_GetCaptionPropertyInfoDictionary_sGetCaptionPropertyInfoOnce, fcctx_BuildCaptionPropertyInfoDictionary);
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)sCAPRPCaptionPropertyInfoDictionary, CFSTR("caption"));
  aStr = Mutable;
  Length = CFAttributedStringGetLength(Mutable);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = (const void *)*MEMORY[0x1E0CA3308];
  cf = (CFTypeRef)*MEMORY[0x1E0CA2968];
  v29 = (const void *)*MEMORY[0x1E0CA3378];
  v434 = (CFTypeRef)*MEMORY[0x1E0CA2958];
  cf2 = (CFTypeRef)*MEMORY[0x1E0CA3670];
  v424 = (const void *)*MEMORY[0x1E0CA2948];
  v421 = (CFTypeRef)*MEMORY[0x1E0CA3658];
  v414 = (CFTypeRef)*MEMORY[0x1E0CA2928];
  v408 = (CFTypeRef)*MEMORY[0x1E0CA3650];
  v401 = (CFTypeRef)*MEMORY[0x1E0CA2938];
  v395 = (CFTypeRef)*MEMORY[0x1E0CA3660];
  v387 = (CFTypeRef)*MEMORY[0x1E0CA2930];
  v375 = (CFTypeRef)*MEMORY[0x1E0CA3668];
  v369 = (CFTypeRef)*MEMORY[0x1E0CA2940];
  v427 = (CFTypeRef)*MEMORY[0x1E0CA3328];
  v389 = (CFTypeRef)*MEMORY[0x1E0CA2A60];
  v417 = (CFTypeRef)*MEMORY[0x1E0CA3330];
  v411 = (CFTypeRef)*MEMORY[0x1E0CA2A68];
  range = (CFTypeRef)*MEMORY[0x1E0CA3320];
  v398 = (CFTypeRef)*MEMORY[0x1E0CA29D0];
  v392 = (CFTypeRef)*MEMORY[0x1E0CA3338];
  v384 = (CFTypeRef)*MEMORY[0x1E0CA2A70];
  v381 = (CFTypeRef)*MEMORY[0x1E0CA32F8];
  v378 = (CFTypeRef)*MEMORY[0x1E0CA2C60];
  v366 = (CFTypeRef)*MEMORY[0x1E0CA32E8];
  v363 = (CFTypeRef)*MEMORY[0x1E0CA2C50];
  v360 = (CFTypeRef)*MEMORY[0x1E0CA32F0];
  v357 = (const void *)*MEMORY[0x1E0CA2C58];
  v354 = (CFTypeRef)*MEMORY[0x1E0CA32E0];
  v351 = (CFTypeRef)*MEMORY[0x1E0CA2C48];
  v372 = (CFTypeRef)*MEMORY[0x1E0CA3358];
  if (!Value)
    goto LABEL_9;
LABEL_8:
  for (i = CFArrayGetCount(Value); v26 < i; i = 0)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(Value, v26);
    if (duration[0].value)
    {
      CFRelease((CFTypeRef)duration[0].value);
      duration[0].value = 0;
    }
    if (v24)
      CFRelease(v24);
    if (v25)
      CFRelease(v25);
    v32 = FigCaptionDataGetCMBaseObject();
    v33 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                           + 48);
    if (!v33)
    {
      v24 = 0;
      v25 = 0;
      v27 = -12782;
      goto LABEL_86;
    }
    v34 = v33(v32, ValueAtIndex, allocator, duration);
    if (v34)
    {
      v27 = v34;
      v24 = 0;
      v25 = 0;
      goto LABEL_86;
    }
    v24 = (const __CFString *)duration[0].value;
    if (!duration[0].value)
    {
      v25 = 0;
LABEL_85:
      v27 = 0;
      goto LABEL_86;
    }
    start.start.value = 0;
    if (!ValueAtIndex)
    {
      v27 = FigSignalErrorAt();
      v24 = 0;
      v25 = 0;
      goto LABEL_81;
    }
    if (CFEqual(ValueAtIndex, v28))
    {
      v35 = CFRetain(cf);
      ColorRGBAFromColorStyleDynamicProperty = fcctx_createColorRGBAFromColorStyleDynamicProperty((uint64_t)v24, &start.start.value);
      if (!ColorRGBAFromColorStyleDynamicProperty)
        goto LABEL_70;
      goto LABEL_25;
    }
    if (CFEqual(ValueAtIndex, v29))
    {
      InitialValue = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
      v24 = InitialValue;
      if (!InitialValue)
        goto LABEL_42;
      v38 = CFGetTypeID(InitialValue);
      if (v38 == CFStringGetTypeID())
      {
        v35 = CFRetain(v434);
        if (CFEqual(v24, cf2))
        {
          v39 = v424;
          goto LABEL_69;
        }
        if (CFEqual(v24, v421))
        {
          v39 = v414;
          goto LABEL_69;
        }
        if (CFEqual(v24, v408))
        {
LABEL_45:
          v39 = v401;
        }
        else if (CFEqual(v24, v395))
        {
          v39 = v387;
        }
        else
        {
          if (!CFEqual(v24, v375))
            goto LABEL_45;
          v39 = v369;
        }
LABEL_69:
        start.start.value = (CMTimeValue)CFRetain(v39);
        goto LABEL_70;
      }
      v24 = 0;
      v25 = 0;
      v27 = -1;
    }
    else
    {
      if (CFEqual(ValueAtIndex, v427))
      {
        v24 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
        if (v24)
        {
          v40 = v389;
          goto LABEL_40;
        }
        goto LABEL_42;
      }
      if (CFEqual(ValueAtIndex, v417))
      {
        v24 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
        if (v24)
        {
          v40 = v411;
LABEL_40:
          v35 = CFRetain(v40);
          FigGeometryDimensionMakeFromDictionary();
          v41 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          if (v41)
          {
            v42 = v41;
            start.start.value = (CMTimeValue)CFRetain(v41);
            CFRelease(v42);
          }
          else
          {
            start.start.value = 0;
          }
          goto LABEL_70;
        }
LABEL_42:
        v35 = 0;
        goto LABEL_73;
      }
      if (CFEqual(ValueAtIndex, range))
      {
        v43 = FigCaptionDynamicStyleGetInitialValue();
        v35 = CFRetain(v398);
        if (v43)
        {
          v39 = (const void *)v43;
          goto LABEL_69;
        }
        goto LABEL_70;
      }
      if (CFEqual(ValueAtIndex, v392))
      {
        v44 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        v35 = CFRetain(v384);
        if (CFEqual(v44, v381))
        {
          v39 = v378;
          goto LABEL_69;
        }
        if (CFEqual(v44, v366))
        {
          v39 = v363;
          goto LABEL_69;
        }
        if (CFEqual(v44, v360))
        {
          v39 = v357;
          goto LABEL_69;
        }
        if (CFEqual(v44, v354))
        {
          v39 = v351;
          goto LABEL_69;
        }
LABEL_70:
        if (v35)
        {
          v24 = (const __CFString *)CFRetain(v35);
          goto LABEL_73;
        }
LABEL_72:
        v24 = 0;
LABEL_73:
        if (start.start.value)
          v25 = CFRetain((CFTypeRef)start.start.value);
        else
          v25 = 0;
        v27 = 0;
        goto LABEL_77;
      }
      if (!CFEqual(ValueAtIndex, v372))
      {
        v35 = 0;
        goto LABEL_72;
      }
      v45 = (const void *)FigCaptionDynamicStyleGetInitialValue();
      if (v45)
      {
        v46 = CFGetTypeID(v45);
        if (v46 == FigCaptionRubyReserveGetTypeID())
        {
          v35 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA2AF8]);
          ColorRGBAFromColorStyleDynamicProperty = FigTextMarkupCreateTextMarkupFromRubyReserve();
          if (!ColorRGBAFromColorStyleDynamicProperty)
            goto LABEL_70;
LABEL_25:
          v27 = ColorRGBAFromColorStyleDynamicProperty;
          v24 = 0;
          v25 = 0;
LABEL_77:
          if (v35)
            CFRelease(v35);
          goto LABEL_79;
        }
      }
      v27 = FigSignalErrorAt();
      v24 = 0;
      v25 = 0;
    }
LABEL_79:
    if (start.start.value)
      CFRelease((CFTypeRef)start.start.value);
LABEL_81:
    if (!v27 && v24 && v25)
    {
      v450.location = 0;
      v450.length = Length;
      CFAttributedStringSetAttribute(aStr, v450, v24, v25);
      goto LABEL_85;
    }
LABEL_86:
    ++v26;
    if (Value)
      goto LABEL_8;
LABEL_9:
    ;
  }
  if (duration[0].value)
  {
    CFRelease((CFTypeRef)duration[0].value);
    duration[0].value = 0;
  }
  if (v24)
    CFRelease(v24);
  if (v25)
    CFRelease(v25);
  if (v27)
  {
    v49 = FigSignalErrorAt();
    Mutable = aStr;
    goto LABEL_588;
  }
  v445 = 0;
  v446 = 0;
  v47 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  v48 = v47 ? (const __CFString *)v47(a2) : &stru_1E2FD85F8;
  v50 = CFStringGetLength(v48);
  v51 = FigCaptionDataGetCMBaseObject();
  v52 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                             + 48);
  if (v52)
  {
    v53 = v52(v51, *MEMORY[0x1E0CA3368], allocator, &v446);
    if (v53)
    {
      v55 = v53;
      v57 = 0;
      v56 = 0;
    }
    else
    {
      Count = CFArrayGetCount(v446);
      if (Count)
      {
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v435 = (CFTypeRef)*MEMORY[0x1E0CA35E8];
        cf2a = (CFTypeRef)*MEMORY[0x1E0CA2A20];
        v428 = (CFTypeRef)*MEMORY[0x1E0CA3558];
        v422 = (CFTypeRef)*MEMORY[0x1E0CA29B8];
        v418 = (CFTypeRef)*MEMORY[0x1E0CA35A0];
        v412 = (CFTypeRef)*MEMORY[0x1E0CA2978];
        v409 = (CFTypeRef)*MEMORY[0x1E0CA35B0];
        v415 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
        v399 = (CFTypeRef)*MEMORY[0x1E0CA35A8];
        v402 = (CFTypeRef)*MEMORY[0x1E0C9AE50];
        rangea = (CFTypeRef)*MEMORY[0x1E0CA3560];
        v396 = (CFTypeRef)*MEMORY[0x1E0CA2B38];
        v382 = (CFTypeRef)*MEMORY[0x1E0CA3580];
        v379 = (CFTypeRef)*MEMORY[0x1E0CA2A50];
        v376 = (CFTypeRef)*MEMORY[0x1E0CA3590];
        v364 = (CFTypeRef)*MEMORY[0x1E0CA3588];
        v352 = (CFTypeRef)*MEMORY[0x1E0CA3598];
        v367 = (CFTypeRef)*MEMORY[0x1E0CA3570];
        v335 = (CFTypeRef)*MEMORY[0x1E0CA2A28];
        v373 = (CFTypeRef)*MEMORY[0x1E0CA3290];
        v370 = (CFTypeRef)*MEMORY[0x1E0CA2BE0];
        v361 = (CFTypeRef)*MEMORY[0x1E0CA32D0];
        v358 = (const void *)*MEMORY[0x1E0CA2C20];
        v347 = (CFTypeRef)*MEMORY[0x1E0CA32C8];
        v345 = (CFTypeRef)*MEMORY[0x1E0CA2C18];
        v339 = (CFTypeRef)*MEMORY[0x1E0CA32A0];
        v337 = (CFTypeRef)*MEMORY[0x1E0CA2BF0];
        v327 = (CFTypeRef)*MEMORY[0x1E0CA32C0];
        v325 = (const void *)*MEMORY[0x1E0CA2C10];
        v321 = (CFTypeRef)*MEMORY[0x1E0CA32B8];
        v319 = (const void *)*MEMORY[0x1E0CA2C08];
        v311 = (CFTypeRef)*MEMORY[0x1E0CA32B0];
        v309 = (CFTypeRef)*MEMORY[0x1E0CA2C00];
        v299 = (CFTypeRef)*MEMORY[0x1E0CA32A8];
        v297 = (void *)*MEMORY[0x1E0CA2BF8];
        v289 = (CFTypeRef)*MEMORY[0x1E0CA3280];
        v287 = (void *)*MEMORY[0x1E0CA2BD0];
        v281 = (CFTypeRef)*MEMORY[0x1E0CA3288];
        v279 = (const void *)*MEMORY[0x1E0CA2BD8];
        v273 = (CFTypeRef)*MEMORY[0x1E0CA3298];
        v272 = (const void *)*MEMORY[0x1E0CA2BE8];
        v264 = (CFTypeRef)*MEMORY[0x1E0CA32D8];
        v263 = (const void *)*MEMORY[0x1E0CA2C28];
        v333 = (CFTypeRef)*MEMORY[0x1E0CA2A00];
        v393 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v385 = (CFTypeRef)*MEMORY[0x1E0CA3278];
        v349 = (CFTypeRef)*MEMORY[0x1E0CA2A08];
        v355 = (CFTypeRef)*MEMORY[0x1E0CA3578];
        v343 = (CFTypeRef)*MEMORY[0x1E0CA2A10];
        v341 = (CFTypeRef)*MEMORY[0x1E0CA35D0];
        v331 = (CFTypeRef)*MEMORY[0x1E0CA35B8];
        v329 = (CFTypeRef)*MEMORY[0x1E0CA2A18];
        v323 = (CFTypeRef)*MEMORY[0x1E0CA35F0];
        v317 = (CFTypeRef)*MEMORY[0x1E0CA3608];
        v307 = (CFTypeRef)*MEMORY[0x1E0CA35F8];
        v305 = (CFTypeRef)*MEMORY[0x1E0CA2A38];
        v295 = (CFTypeRef)*MEMORY[0x1E0CA3610];
        v285 = (CFTypeRef)*MEMORY[0x1E0CA3620];
        v277 = (CFTypeRef)*MEMORY[0x1E0CA3618];
        v271 = (CFTypeRef)*MEMORY[0x1E0CA3600];
        v315 = (CFTypeRef)*MEMORY[0x1E0CA35C0];
        v313 = (CFTypeRef)*MEMORY[0x1E0CA2A30];
        v303 = (CFTypeRef)*MEMORY[0x1E0CA35C8];
        v301 = (CFTypeRef)*MEMORY[0x1E0CA2A48];
        v293 = (CFTypeRef)*MEMORY[0x1E0CA35D8];
        v291 = (void *)*MEMORY[0x1E0CA2A98];
        v283 = (CFTypeRef)*MEMORY[0x1E0CA3630];
        v274 = (const void *)*MEMORY[0x1E0CA29C0];
        v275 = (CFTypeRef)*MEMORY[0x1E0CA3568];
        v270 = (CFTypeRef)*MEMORY[0x1E0CA35E0];
        v262 = *MEMORY[0x1E0CA3348];
        v259 = (const void *)*MEMORY[0x1E0CA2CE0];
        v269 = (const void *)*MEMORY[0x1E0CA2D10];
        v256 = (const void *)*MEMORY[0x1E0CA2D00];
        v254 = (const void *)*MEMORY[0x1E0CA2CE8];
        v251 = (const void *)*MEMORY[0x1E0CA2CF0];
        key = (void *)*MEMORY[0x1E0CA2AE0];
        v261 = *MEMORY[0x1E0CA3350];
        v258 = (const void *)*MEMORY[0x1E0CA2D20];
        v266 = (void *)*MEMORY[0x1E0CA2B00];
        v267 = (void *)*MEMORY[0x1E0CA2AF0];
        v265 = (CFTypeRef)*MEMORY[0x1E0CA2AD8];
        v260 = (CFTypeRef)*MEMORY[0x1E0CA3628];
        v257 = (CFTypeRef)*MEMORY[0x1E0CA3638];
        v255 = (CFTypeRef)*MEMORY[0x1E0CA3648];
        v252 = (CFTypeRef)*MEMORY[0x1E0CA3640];
        v253 = (CFTypeRef)*MEMORY[0x1E0CA2A40];
        v250 = (CFTypeRef)*MEMORY[0x1E0CA2B30];
        while (1)
        {
          v58 = CFArrayGetValueAtIndex(v446, v54);
          if (v50)
            break;
LABEL_343:
          if (++v54 == Count)
            goto LABEL_347;
        }
        v59 = v58;
        v60 = 0;
        while (2)
        {
          *(_QWORD *)&end.timescale = 0;
          end.value = 0;
          if (v445)
          {
            CFRelease(v445);
            v445 = 0;
          }
          if (v57)
            CFRelease(v57);
          if (v56)
            CFRelease(v56);
          v61 = *(uint64_t (**)(uint64_t, uint64_t, const void *, const __CFAllocator *, const __CFString **, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (!v61)
          {
            v57 = 0;
            v56 = 0;
            v55 = -12782;
            goto LABEL_183;
          }
          v62 = v61(a2, v60, v59, allocator, &v445, &end);
          if (v62)
          {
            v55 = v62;
            v57 = 0;
            v56 = 0;
            goto LABEL_183;
          }
          v57 = v445;
          if (!v445)
          {
            v56 = 0;
            goto LABEL_182;
          }
          v447 = 0;
          if (!v59)
          {
            v55 = FigSignalErrorAt();
            v57 = 0;
            v56 = 0;
            if (v55)
              goto LABEL_347;
            goto LABEL_179;
          }
          if (CFEqual(v59, v435))
          {
            v63 = cf2a;
            goto LABEL_124;
          }
          if (CFEqual(v59, v428))
          {
            v63 = v422;
LABEL_124:
            v64 = CFRetain(v63);
            v65 = fcctx_createColorRGBAFromColorStyleDynamicProperty((uint64_t)v57, (uint64_t *)&v447);
            v57 = 0;
            if (!v65)
            {
              UInt32 = 0;
              goto LABEL_126;
            }
            v55 = v65;
            v56 = 0;
            UInt32 = 0;
LABEL_172:
            if (v64)
              CFRelease(v64);
LABEL_174:
            if (v447)
            {
              CFRelease(v447);
              v447 = 0;
            }
            if (UInt32)
              CFRelease((CFTypeRef)UInt32);
            if (v55)
              goto LABEL_347;
LABEL_179:
            if (v57 && v56)
            {
              v451.location = end.value;
              v451.length = *(_QWORD *)&end.timescale;
              CFAttributedStringSetAttribute(aStr, v451, v57, v56);
            }
LABEL_182:
            v55 = 0;
            v60 += *(_QWORD *)&end.timescale;
LABEL_183:
            if (v60 == v50)
              goto LABEL_343;
            continue;
          }
          break;
        }
        if (CFEqual(v59, v418))
        {
          v67 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          v57 = v67;
          if (v67)
          {
            v68 = CFGetTypeID(v67);
            if (v68 == CFStringGetTypeID())
            {
              v64 = CFRetain(v412);
              if (!CFEqual(v57, v409) && CFEqual(v57, v399))
                goto LABEL_143;
LABEL_132:
              v69 = v415;
              goto LABEL_144;
            }
LABEL_329:
            v57 = 0;
          }
LABEL_330:
          v56 = 0;
          UInt32 = 0;
          v55 = -1;
          goto LABEL_174;
        }
        if (CFEqual(v59, rangea))
        {
          LODWORD(start.start.value) = 0;
          v70 = (const __CFNumber *)FigCaptionDynamicStyleGetInitialValue();
          if (!v70)
            goto LABEL_329;
          v71 = v70;
          v72 = CFGetTypeID(v70);
          if (v72 != CFNumberGetTypeID())
            goto LABEL_329;
          v64 = CFRetain(v396);
          CFNumberGetValue(v71, kCFNumberSInt32Type, &start);
          v73 = start.start.value;
          if (!LODWORD(start.start.value))
            goto LABEL_140;
          if ((start.start.value & 1) != 0)
          {
            v447 = (CFStringRef)CFRetain(v402);
            v73 = start.start.value;
          }
          if ((v73 & 6) != 0)
LABEL_140:
            v447 = (CFStringRef)CFRetain(v415);
LABEL_141:
          UInt32 = 0;
LABEL_126:
          if (v64)
          {
            v57 = (const __CFString *)CFRetain(v64);
LABEL_168:
            if (v447)
              v56 = (__CFString *)CFRetain(v447);
            else
              v56 = 0;
            v55 = 0;
            goto LABEL_172;
          }
LABEL_167:
          v57 = 0;
          goto LABEL_168;
        }
        if (CFEqual(v59, v382))
        {
          v75 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          v57 = v75;
          if (!v75)
            goto LABEL_330;
          v76 = CFGetTypeID(v75);
          if (v76 != CFStringGetTypeID())
            goto LABEL_329;
          v64 = CFRetain(v379);
          if (CFEqual(v57, v376))
            goto LABEL_132;
          if (!CFEqual(v57, v364))
            CFEqual(v57, v352);
LABEL_143:
          v69 = v402;
LABEL_144:
          SInt8 = (const __CFString *)CFRetain(v69);
          goto LABEL_145;
        }
        if (CFEqual(v59, v367))
        {
          v77 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          v57 = v77;
          if (!v77)
            goto LABEL_330;
          v78 = CFGetTypeID(v77);
          if (v78 != FigCaptionFontFamilyNameListGetTypeID())
            goto LABEL_329;
          v79 = FigCaptionFontFamilyNameListGetCount();
          UInt32 = v79;
          if (!v79)
          {
            v64 = 0;
            goto LABEL_167;
          }
          if (v79 == 1)
          {
            LODWORD(duration[0].value) = 0;
            start.start.value = 0;
            if (!FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex())
            {
              if (LODWORD(duration[0].value))
              {
                if (LODWORD(duration[0].value) == 1)
                {
                  v64 = CFRetain(v333);
                  goto LABEL_161;
                }
                v64 = 0;
LABEL_333:
                v102 = (const void *)start.start.value;
                if (!start.start.value)
                  goto LABEL_141;
LABEL_334:
                CFRelease(v102);
                goto LABEL_141;
              }
              v64 = CFRetain(v335);
              if (CFEqual((CFTypeRef)start.start.value, v373))
              {
                v80 = v370;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v361))
              {
                v80 = v358;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v347))
              {
                v80 = v345;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v339))
              {
                v80 = v337;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v327))
              {
                v80 = v325;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v321))
              {
                v80 = v319;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v311))
              {
                v80 = v309;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v299))
              {
                v80 = v297;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v289))
              {
                v80 = v287;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v281))
              {
                v80 = v279;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v273))
              {
                v80 = v272;
              }
              else if (CFEqual((CFTypeRef)start.start.value, v264))
              {
                v80 = v263;
              }
              else
              {
                v80 = v402;
              }
LABEL_332:
              v447 = (CFStringRef)CFRetain(v80);
              goto LABEL_333;
            }
LABEL_245:
            v57 = 0;
            v56 = 0;
LABEL_246:
            v55 = 0;
LABEL_247:
            UInt32 = 0;
            goto LABEL_174;
          }
          v56 = (__CFString *)CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          if (!v56)
          {
            v57 = 0;
            goto LABEL_246;
          }
          if (UInt32 < 1)
          {
LABEL_210:
            v64 = CFRetain(v349);
            UInt32 = 0;
            v447 = v56;
            goto LABEL_126;
          }
          v85 = 0;
          while (2)
          {
            LODWORD(duration[0].value) = 0;
            start.start.value = 0;
            v86 = CFDictionaryCreateMutable(v393, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            if (!v86)
              goto LABEL_245;
            v87 = v86;
            FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex();
            if (LODWORD(duration[0].value))
            {
              if (LODWORD(duration[0].value) == 1)
              {
                FigCFDictionarySetInt32();
                v88 = (const void *)start.start.value;
                goto LABEL_206;
              }
            }
            else
            {
              FigCFDictionarySetInt32();
              v89 = CFEqual((CFTypeRef)start.start.value, v373);
              v88 = v370;
              if (!v89)
              {
                v90 = CFEqual((CFTypeRef)start.start.value, v361);
                v88 = v358;
                if (!v90)
                {
                  v91 = CFEqual((CFTypeRef)start.start.value, v347);
                  v88 = v345;
                  if (!v91)
                  {
                    v92 = CFEqual((CFTypeRef)start.start.value, v339);
                    v88 = v337;
                    if (!v92)
                    {
                      v93 = CFEqual((CFTypeRef)start.start.value, v327);
                      v88 = v325;
                      if (!v93)
                      {
                        v94 = CFEqual((CFTypeRef)start.start.value, v321);
                        v88 = v319;
                        if (!v94)
                        {
                          v95 = CFEqual((CFTypeRef)start.start.value, v311);
                          v88 = v309;
                          if (!v95)
                          {
                            v96 = CFEqual((CFTypeRef)start.start.value, v299);
                            v88 = v297;
                            if (!v96)
                            {
                              v97 = CFEqual((CFTypeRef)start.start.value, v289);
                              v88 = v287;
                              if (!v97)
                              {
                                v98 = CFEqual((CFTypeRef)start.start.value, v281);
                                v88 = v279;
                                if (!v98)
                                {
                                  v99 = CFEqual((CFTypeRef)start.start.value, v273);
                                  v88 = v272;
                                  if (!v99)
                                  {
                                    if (CFEqual((CFTypeRef)start.start.value, v264))
                                      v88 = v263;
                                    else
                                      v88 = v402;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
LABEL_206:
              CFDictionaryAddValue(v87, v385, v88);
            }
            CFArrayAppendValue((CFMutableArrayRef)v56, v87);
            CFRelease(v87);
            if (start.start.value)
              CFRelease((CFTypeRef)start.start.value);
            if (UInt32 == ++v85)
              goto LABEL_210;
            continue;
          }
        }
        if (CFEqual(v59, v355))
        {
          v57 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          if (v57)
          {
            v81 = *(_OWORD *)(MEMORY[0x1E0CA4AF0] + 16);
            *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA4AF0];
            *(_OWORD *)&start.start.epoch = v81;
            v64 = CFRetain(v343);
            FigGeometrySizeMakeFromDictionary();
            *(_OWORD *)&duration[0].value = *(_OWORD *)&start.start.value;
            *(_OWORD *)&duration[0].epoch = *(_OWORD *)&start.start.epoch;
            v82 = (const void *)FigTextMarkupSizeCopyAsSimplifiedDictionary();
            if (v82)
            {
              v83 = v82;
              v84 = (const __CFString *)CFRetain(v82);
              CFRelease(v83);
            }
            else
            {
              v84 = 0;
            }
            UInt32 = 0;
            v447 = v84;
            goto LABEL_126;
          }
          goto LABEL_234;
        }
        if (CFEqual(v59, v341))
        {
          v57 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          if (v57)
          {
            v64 = CFRetain(v389);
            FigGeometryDimensionMakeFromDictionary();
            v100 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
            if (!v100)
            {
              UInt32 = 0;
              v447 = 0;
              goto LABEL_126;
            }
            goto LABEL_214;
          }
LABEL_234:
          v64 = 0;
          UInt32 = 0;
          goto LABEL_168;
        }
        if (CFEqual(v59, v331))
        {
          v103 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          v104 = v329;
LABEL_225:
          v64 = CFRetain(v104);
          if (!v103)
            goto LABEL_141;
LABEL_226:
          v69 = v103;
          goto LABEL_144;
        }
        if (CFEqual(v59, v323))
        {
          v105 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          v57 = v105;
          if (!v105)
            goto LABEL_234;
          if (CFEqual(v105, v317))
          {
            v56 = 0;
            v57 = 0;
            goto LABEL_182;
          }
          if (CFEqual(v57, v307)
            || CFEqual(v57, v295)
            || CFEqual(v57, v285)
            || CFEqual(v57, v277)
            || CFEqual(v57, v271))
          {
            v64 = CFRetain(v305);
            SInt8 = (const __CFString *)FigCFNumberCreateSInt8();
LABEL_145:
            UInt32 = 0;
            v447 = SInt8;
            goto LABEL_126;
          }
          goto LABEL_259;
        }
        if (CFEqual(v59, v315))
        {
          v103 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          v104 = v313;
          goto LABEL_225;
        }
        if (CFEqual(v59, v303))
        {
          v103 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          v104 = v301;
          goto LABEL_225;
        }
        if (CFEqual(v59, v293))
        {
          v103 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          v104 = v291;
          goto LABEL_225;
        }
        if (CFEqual(v59, v283))
        {
LABEL_259:
          v64 = 0;
          UInt32 = 0;
          goto LABEL_167;
        }
        if (CFEqual(v59, v275))
        {
          v103 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          v104 = v274;
          goto LABEL_225;
        }
        if (CFEqual(v59, v270))
        {
          v106 = *(uint64_t (**)(const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (v106)
            v107 = (const __CFString *)v106(v57);
          else
            v107 = &stru_1E2FD85F8;
          v111 = CFDictionaryCreateMutable(v393, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v111)
          {
            v112 = v111;
            start.start.value = 0;
            v113 = FigCaptionDataGetCMBaseObject();
            v114 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
            if (v114)
              v114(v113, v262, v393, &start);
            FigCaptionDynamicStyleGetInitialValue();
            if (start.start.value)
            {
              CFRelease((CFTypeRef)start.start.value);
              start.start.value = 0;
            }
            v115 = FigCFEqual();
            v116 = v269;
            if (!v115)
            {
              v117 = FigCFEqual();
              v116 = v259;
              if (!v117)
              {
                v118 = FigCFEqual();
                v116 = v256;
                if (!v118)
                {
                  v119 = FigCFEqual();
                  v116 = v254;
                  if (!v119)
                  {
                    v120 = FigCFEqual();
                    v116 = v251;
                    if (!v120)
                    {
                      v121 = FigCFEqual();
                      v116 = v259;
                      if (v121)
                        v116 = (const void *)*MEMORY[0x1E0CA2CF8];
                    }
                  }
                }
              }
            }
            CFDictionarySetValue(v112, key, v116);
            v122 = FigCaptionDataGetCMBaseObject();
            v123 = *(void (**)(uint64_t, uint64_t, const __CFAllocator *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
            if (v123)
              v123(v122, v261, v393, &start);
            FigCaptionDynamicStyleGetInitialValue();
            if (start.start.value)
            {
              CFRelease((CFTypeRef)start.start.value);
              start.start.value = 0;
            }
            v124 = FigCFEqual();
            v125 = (const void **)MEMORY[0x1E0CA2D18];
            if (v124 || (v126 = FigCFEqual(), v125 = (const void **)MEMORY[0x1E0CA2D30], v127 = v258, v126))
              v127 = *v125;
            CFDictionarySetValue(v112, v267, v127);
            UInt32 = FigCFNumberCreateUInt32();
            if (UInt32)
            {
              CFDictionarySetValue(v112, v266, (const void *)UInt32);
              v128 = CFAttributedStringCreate(v393, v107, v112);
              if (v128)
              {
                v129 = v128;
                CFRelease(v112);
                v64 = CFRetain(v265);
                v447 = (CFStringRef)CFRetain(v129);
                CFRelease(v129);
                goto LABEL_126;
              }
              v55 = FigSignalErrorAt();
            }
            else
            {
              v55 = 0;
            }
            v57 = 0;
            v56 = 0;
            goto LABEL_174;
          }
          v55 = FigSignalErrorAt();
          v57 = 0;
          v56 = 0;
          goto LABEL_247;
        }
        if (CFEqual(v59, v260))
        {
          v108 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          start.start.value = 0;
          v64 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA2B18]);
          if (!v108)
            goto LABEL_141;
          v109 = CFGetTypeID(v108);
          if (v109 != FigCaptionTextEmphasisGetTypeID())
            goto LABEL_141;
          TextMarkupFromTextEmphasis = FigTextMarkupCreateTextMarkupFromTextEmphasis();
          if (TextMarkupFromTextEmphasis)
            goto LABEL_310;
        }
        else
        {
          if (!CFEqual(v59, v257))
          {
            if (CFEqual(v59, v255))
            {
              v103 = (const void *)FigCaptionDynamicStyleGetInitialValue();
              v64 = CFRetain(v253);
              if (!v103)
                goto LABEL_141;
              v132 = CFGetTypeID(v103);
              if (v132 != CFArrayGetTypeID())
                goto LABEL_141;
              if (CFArrayGetCount((CFArrayRef)v103) >= 1)
              {
                v133 = 0;
                v134 = 0;
                do
                {
                  LODWORD(start.start.value) = 0;
                  if (FigCFArrayGetInt32AtIndex())
                  {
                    if (!v133)
                      v133 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                    FigCFArrayAppendInt32();
                  }
                  ++v134;
                }
                while (v134 < CFArrayGetCount((CFArrayRef)v103));
              }
              goto LABEL_226;
            }
            if (CFEqual(v59, v252))
            {
              v135 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
              v57 = v135;
              if (!v135)
                goto LABEL_330;
              v136 = CFGetTypeID(v135);
              if (v136 != CFDictionaryGetTypeID())
                goto LABEL_329;
              start.start.value = FigGeometryDimensionMakeFromDictionary();
              *(_QWORD *)&start.start.timescale = v137;
              if ((v137 & 0x1FFFFFFFFLL) != 0x125202020)
              {
                v64 = 0;
                goto LABEL_141;
              }
              v64 = CFRetain(v250);
              v100 = CFNumberCreate(v393, kCFNumberCGFloatType, &start);
              if (!v100)
              {
                v447 = 0;
                goto LABEL_141;
              }
LABEL_214:
              v101 = v100;
              v447 = (CFStringRef)CFRetain(v100);
              v102 = v101;
              goto LABEL_334;
            }
            goto LABEL_259;
          }
          v130 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          start.start.value = 0;
          v64 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA2B28]);
          if (!v130)
            goto LABEL_141;
          v131 = CFGetTypeID(v130);
          if (v131 != FigCaptionTextShadowGetTypeID())
            goto LABEL_141;
          TextMarkupFromTextEmphasis = FigTextMarkupCreateTextMarkupFromTextShadowList();
          if (TextMarkupFromTextEmphasis)
          {
LABEL_310:
            v55 = TextMarkupFromTextEmphasis;
            v57 = 0;
            v56 = 0;
            UInt32 = 0;
            goto LABEL_172;
          }
        }
LABEL_161:
        v80 = (const void *)start.start.value;
        goto LABEL_332;
      }
      v57 = 0;
      v56 = 0;
      v55 = 0;
    }
  }
  else
  {
    v57 = 0;
    v56 = 0;
    v55 = -12782;
  }
LABEL_347:
  if (v445)
  {
    CFRelease(v445);
    v445 = 0;
  }
  Mutable = aStr;
  if (v57)
    CFRelease(v57);
  if (v56)
    CFRelease(v56);
  if (v446)
    CFRelease(v446);
  if (v55)
    goto LABEL_600;
  v138 = v444;
  v446 = 0;
  v447 = 0;
  v139 = CFAttributedStringGetLength(aStr);
  if (!v138)
  {
    Copy = 0;
    v151 = 0;
    v152 = 0;
    v148 = 0;
    goto LABEL_575;
  }
  v140 = v139;
  MEMORY[0x19402F294](&fcctx_GetCaptionPropertyInfoDictionary_sGetCaptionPropertyInfoOnce, fcctx_BuildCaptionPropertyInfoDictionary);
  v141 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)sCAPRPCaptionPropertyInfoDictionary, CFSTR("region"));
  v142 = v141;
  v143 = (CFStringRef *)MEMORY[0x1E0CA2960];
  rangeb = (CFTypeRef)v140;
  if (v141)
  {
    v144 = CFArrayGetCount(v141);
    v436 = (CFTypeRef)*MEMORY[0x1E0CA3438];
    if (v144 < 1)
    {
      v426 = 0;
      v148 = 0;
    }
    else
    {
      v145 = FigCaptionRegionGetCMBaseObject();
      v146 = *(uint64_t (**)(uint64_t, CFTypeRef, const __CFAllocator *, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v146)
      {
        v147 = v146(v145, v436, allocator, &v446);
        if (v147)
        {
          v148 = v147;
          v149 = 1;
          goto LABEL_366;
        }
        v153 = a9;
        if (CFStringGetLength((CFStringRef)v446))
        {
          v148 = 0;
          v149 = CFStringCompare((CFStringRef)v446, (CFStringRef)*MEMORY[0x1E0CA3468], 0) != kCFCompareEqualTo;
        }
        else
        {
          if (v446)
          {
            CFRelease(v446);
            v148 = 0;
            v446 = 0;
          }
          else
          {
            v148 = 0;
          }
          v149 = 1;
        }
      }
      else
      {
        v149 = 1;
        v148 = -12782;
LABEL_366:
        v153 = a9;
      }
      v154 = CFDictionaryGetValue(v153, v138);
      if (v154)
        v155 = v149;
      else
        v155 = 0;
      if (v155)
        goto LABEL_380;
      if (v446)
      {
        v156 = CFRetain(v446);
        v157 = a9;
      }
      else
      {
        v157 = a9;
        v158 = CFDictionaryGetCount(a9);
        v156 = CFStringCreateWithFormat(allocator, 0, CFSTR("ttml_region_%d"), v158);
      }
      CFDictionarySetValue(v157, v138, v156);
      if (v156)
        CFRelease(v156);
      if (v154 || (v154 = CFDictionaryGetValue(a9, v138)) != 0)
      {
LABEL_380:
        v426 = v155;
        v452.location = 0;
        v452.length = v140;
        CFAttributedStringSetAttribute(aStr, v452, *v143, v154);
      }
      else
      {
        v426 = 0;
      }
    }
  }
  else
  {
    v426 = 0;
    v148 = 0;
    v436 = (CFTypeRef)*MEMORY[0x1E0CA3438];
  }
  Copy = 0;
  v151 = 0;
  v152 = 0;
  v159 = 0;
  cf2b = (CFTypeRef)*MEMORY[0x1E0CA33E8];
  v429 = (CFTypeRef)*MEMORY[0x1E0CA34B8];
  v423 = (CFTypeRef)*MEMORY[0x1E0CA34D8];
  v413 = (CFTypeRef)*MEMORY[0x1E0CA2DB8];
  v403 = (CFTypeRef)*MEMORY[0x1E0CA34E0];
  v397 = (CFTypeRef)*MEMORY[0x1E0CA2DC0];
  v388 = (CFTypeRef)*MEMORY[0x1E0CA34F0];
  v380 = (CFTypeRef)*MEMORY[0x1E0CA2DD0];
  v383 = (CFTypeRef)*MEMORY[0x1E0CA2B40];
  v377 = (CFTypeRef)*MEMORY[0x1E0CA2DE0];
  v374 = (CFTypeRef)*MEMORY[0x1E0CA34E8];
  v368 = (CFTypeRef)*MEMORY[0x1E0CA2DC8];
  v365 = (CFTypeRef)*MEMORY[0x1E0CA2DD8];
  v410 = (CFTypeRef)*MEMORY[0x1E0CA2B50];
  v419 = (CFTypeRef)*MEMORY[0x1E0CA3490];
  v394 = (CFTypeRef)*MEMORY[0x1E0CA2998];
  v390 = (CFTypeRef)*MEMORY[0x1E0CA29A0];
  v400 = (CFTypeRef)*MEMORY[0x1E0CA33C8];
  v386 = (CFTypeRef)*MEMORY[0x1E0CA34B0];
  v359 = (const void *)*MEMORY[0x1E0CA29A8];
  v371 = (CFTypeRef)*MEMORY[0x1E0CA3428];
  v353 = (CFTypeRef)*MEMORY[0x1E0CA2990];
  v362 = (CFTypeRef)*MEMORY[0x1E0CA33D8];
  v344 = (CFTypeRef)*MEMORY[0x1E0CA2980];
  v342 = (CFTypeRef)*MEMORY[0x1E0CA2988];
  v356 = (CFTypeRef)*MEMORY[0x1E0CA33F0];
  v348 = (CFTypeRef)*MEMORY[0x1E0CA29B0];
  v350 = (CFTypeRef)*MEMORY[0x1E0CA3400];
  v346 = (CFTypeRef)*MEMORY[0x1E0CA3408];
  v340 = (CFTypeRef)*MEMORY[0x1E0CA3398];
  v334 = (CFTypeRef)*MEMORY[0x1E0CA3390];
  v330 = (CFTypeRef)*MEMORY[0x1E0CA33A0];
  v336 = (CFTypeRef)*MEMORY[0x1E0CA29E8];
  v338 = (CFTypeRef)*MEMORY[0x1E0CA3420];
  v328 = (CFTypeRef)*MEMORY[0x1E0CA2AA0];
  v332 = (CFTypeRef)*MEMORY[0x1E0CA3430];
  v326 = (const void *)*MEMORY[0x1E0CA2AA8];
  v416 = *v143;
  v324 = (CFTypeRef)*MEMORY[0x1E0CA3470];
  v320 = (const void *)*MEMORY[0x1E0CA2AB8];
  v322 = (CFTypeRef)*MEMORY[0x1E0CA33F8];
  v316 = (CFTypeRef)*MEMORY[0x1E0CA29C8];
  v318 = (CFTypeRef)*MEMORY[0x1E0CA3410];
  v312 = (CFTypeRef)*MEMORY[0x1E0CA29F0];
  v314 = (CFTypeRef)*MEMORY[0x1E0CA34A0];
  v310 = (CFTypeRef)*MEMORY[0x1E0CA34C8];
  v308 = (CFTypeRef)*MEMORY[0x1E0CA2B08];
  v306 = (CFTypeRef)*MEMORY[0x1E0CA3480];
  v304 = (const __CFString *)*MEMORY[0x1E0CA2A78];
  v302 = (CFTypeRef)*MEMORY[0x1E0CA3488];
  v300 = (CFTypeRef)*MEMORY[0x1E0CA33B0];
  v298 = (void *)*MEMORY[0x1E0CA2C70];
  v296 = (CFTypeRef)*MEMORY[0x1E0CA33A8];
  v294 = (CFTypeRef)*MEMORY[0x1E0CA2C68];
  v292 = (void *)*MEMORY[0x1E0CA33C0];
  v290 = (CFTypeRef)*MEMORY[0x1E0CA2C80];
  v288 = (void *)*MEMORY[0x1E0CA33B8];
  v286 = (CFTypeRef)*MEMORY[0x1E0CA2C78];
  v284 = (CFTypeRef)*MEMORY[0x1E0CA2A90];
  v282 = (CFTypeRef)*MEMORY[0x1E0CA34C0];
  v280 = (const __CFString *)*MEMORY[0x1E0CA2B58];
  v278 = (CFTypeRef)*MEMORY[0x1E0CA3478];
  v276 = (CFTypeRef)*MEMORY[0x1E0CA34A8];
  v160 = cf;
  if (!v142)
    goto LABEL_383;
  while (2)
  {
    v161 = CFArrayGetCount(v142);
LABEL_384:
    if (v159 < v161)
    {
      v162 = CFArrayGetValueAtIndex(v142, v159);
      if (v447)
      {
        CFRelease(v447);
        v447 = 0;
      }
      if (Copy)
        CFRelease(Copy);
      if (v151)
        CFRelease(v151);
      v163 = FigCaptionRegionGetCMBaseObject();
      v164 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, CFStringRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (!v164)
      {
        Copy = 0;
        v151 = 0;
        v148 = -12782;
        goto LABEL_484;
      }
      v165 = v164(v163, v162, allocator, &v447);
      if (v165)
      {
        v148 = v165;
        Copy = 0;
        v151 = 0;
LABEL_484:
        ++v159;
        if (v142)
          continue;
LABEL_383:
        v161 = 0;
        goto LABEL_384;
      }
      if (!CFEqual(v162, v436) || CFStringGetLength(v447))
      {
        Copy = v447;
        if (v447)
          goto LABEL_398;
LABEL_405:
        v151 = 0;
        v148 = 0;
        goto LABEL_484;
      }
      if (v447)
      {
        CFRelease(v447);
        v447 = 0;
      }
      v169 = (const __CFString *)CFDictionaryGetValue(a9, v138);
      Copy = CFStringCreateCopy(allocator, v169);
      v447 = Copy;
      if (!Copy)
        goto LABEL_405;
LABEL_398:
      end.value = 0;
      if (!v162)
      {
        v148 = FigSignalErrorAt();
        v183 = 0;
        Copy = 0;
        v151 = 0;
        if (v148)
          goto LABEL_479;
        goto LABEL_492;
      }
      v166 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (CFEqual(v162, cf2b))
      {
        v167 = CFRetain(v160);
        TextMarkupFromAbstractPosition = fcctx_createColorRGBAFromColorStyleDynamicProperty((uint64_t)Copy, &end.value);
        if (!TextMarkupFromAbstractPosition)
        {
          CFDictionaryAddValue(v166, v160, (const void *)end.value);
LABEL_460:
          if (!FigCFDictionaryGetCount() && v166)
          {
            CFRelease(v166);
            v166 = 0;
          }
          if (v167)
            Copy = (CFStringRef)CFRetain(v167);
          else
            Copy = 0;
          if (end.value)
          {
            v151 = CFRetain((CFTypeRef)end.value);
            if (v166)
              goto LABEL_468;
LABEL_470:
            v183 = 0;
          }
          else
          {
            v151 = 0;
            if (!v166)
              goto LABEL_470;
LABEL_468:
            v183 = (const __CFDictionary *)CFRetain(v166);
          }
          v148 = 0;
LABEL_472:
          if (v167)
            CFRelease(v167);
LABEL_474:
          if (end.value)
          {
            CFRelease((CFTypeRef)end.value);
            end.value = 0;
          }
          if (v166)
            CFRelease(v166);
          Mutable = aStr;
          if (v148)
          {
LABEL_479:
            if (v183)
            {
              if (!v152)
                v152 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              start.start.value = (CMTimeValue)v152;
              CFDictionaryApplyFunction(v183, (CFDictionaryApplierFunction)addOneKeyAndValueApplyFunction, &start);
              CFRelease(v183);
            }
            v160 = cf;
            goto LABEL_484;
          }
LABEL_492:
          *(_QWORD *)&start.start.timescale = 0;
          start.start.value = 0;
          Attributes = CFAttributedStringGetAttributes(Mutable, 0, (CFRange *)&start);
          if (Copy && v151 && !CFDictionaryContainsKey(Attributes, Copy))
          {
            v453.location = 0;
            v453.length = (CFIndex)rangeb;
            CFAttributedStringSetAttribute(Mutable, v453, Copy, v151);
          }
          goto LABEL_479;
        }
LABEL_427:
        v148 = TextMarkupFromAbstractPosition;
        v183 = 0;
        Copy = 0;
        v151 = 0;
        goto LABEL_472;
      }
      if (CFEqual(v162, v429))
      {
        v170 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v170)
          goto LABEL_459;
        v171 = v170;
        v172 = CFGetTypeID(v170);
        if (v172 == CFStringGetTypeID())
        {
          if (CFEqual(v171, v423))
          {
            v173 = v413;
LABEL_421:
            v180 = CFRetain(v173);
            v167 = 0;
            if (!v180)
              goto LABEL_460;
LABEL_422:
            CFDictionaryAddValue(v166, v410, v180);
            CFRelease(v180);
            goto LABEL_460;
          }
          if (CFEqual(v171, v403))
          {
            v173 = v397;
            goto LABEL_421;
          }
          if (CFEqual(v171, v388))
          {
            v180 = CFRetain(v380);
            v167 = CFRetain(v383);
            v184 = v377;
            goto LABEL_437;
          }
          if (CFEqual(v171, v374))
          {
            v180 = CFRetain(v368);
            v167 = CFRetain(v383);
            v184 = v365;
LABEL_437:
            end.value = (CMTimeValue)CFRetain(v184);
            if (!v180)
              goto LABEL_460;
            goto LABEL_422;
          }
LABEL_459:
          v167 = 0;
          goto LABEL_460;
        }
LABEL_505:
        v183 = 0;
        Copy = 0;
        v151 = 0;
        v148 = -1;
        goto LABEL_474;
      }
      if (CFEqual(v162, v419))
      {
        if (!FigCaptionDynamicStyleGetInitialValue())
          goto LABEL_459;
        memset(&start, 0, 32);
        FigGeometryPointMakeFromDictionary();
        *(_OWORD *)&duration[0].value = *(_OWORD *)&start.start.value;
        *(_OWORD *)&duration[0].epoch = *(_OWORD *)&start.start.epoch;
        v174 = (void *)FigGeometryPointCopyDescription();
        if ((start.start.flags & 1) != 0 || (start.duration.value & 0x100000000) != 0)
        {
          v175 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          v176 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          v177 = (const void *)v176;
          if (v175 && v176)
          {
            CFDictionaryAddValue(v166, v394, v175);
            v178 = v166;
            v179 = v390;
            goto LABEL_418;
          }
LABEL_452:
          if (v175)
            goto LABEL_453;
          goto LABEL_454;
        }
        goto LABEL_457;
      }
      if (CFEqual(v162, v400))
      {
        v181 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v181 || (v182 = CFGetTypeID(v181), v182 != FigCaptionPositionGetTypeID()))
        {
          v148 = FigSignalErrorAt();
          v183 = 0;
          Copy = 0;
          v151 = 0;
          goto LABEL_474;
        }
        v167 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA2950]);
        TextMarkupFromAbstractPosition = FigTextMarkupCreateTextMarkupFromAbstractPosition();
        if (!TextMarkupFromAbstractPosition)
          goto LABEL_460;
        goto LABEL_427;
      }
      if (CFEqual(v162, v386))
      {
        if (!FigCaptionDynamicStyleGetInitialValue())
          goto LABEL_459;
        FigGeometryDimensionMakeFromDictionary();
        v186 = v185;
        v174 = (void *)FigGeometryDimensionCopyDescription();
        if ((v186 & 0x100000000) == 0)
          goto LABEL_457;
        v187 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
        if (!v187)
          goto LABEL_457;
        v188 = (const void *)v187;
        v189 = v166;
        v190 = v359;
LABEL_444:
        CFDictionaryAddValue(v189, v190, v188);
        v194 = v188;
LABEL_456:
        CFRelease(v194);
        goto LABEL_457;
      }
      if (CFEqual(v162, v371))
      {
        if (!FigCaptionDynamicStyleGetInitialValue())
          goto LABEL_459;
        FigGeometryDimensionMakeFromDictionary();
        v192 = v191;
        v174 = (void *)FigGeometryDimensionCopyDescription();
        if ((v192 & 0x100000000) == 0)
          goto LABEL_457;
        v193 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
        if (!v193)
          goto LABEL_457;
        v188 = (const void *)v193;
        v189 = v166;
        v190 = v353;
        goto LABEL_444;
      }
      if (CFEqual(v162, v362))
      {
        if (!FigCaptionDynamicStyleGetInitialValue())
          goto LABEL_459;
        memset(&start, 0, 32);
        FigGeometryPointMakeFromDictionary();
        *(_OWORD *)&duration[0].value = *(_OWORD *)&start.start.value;
        *(_OWORD *)&duration[0].epoch = *(_OWORD *)&start.start.epoch;
        v174 = (void *)FigGeometryPointCopyDescription();
        if ((start.start.flags & 1) != 0 && (start.duration.value & 0x100000000) != 0)
        {
          v175 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          v195 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          v177 = (const void *)v195;
          if (!v175 || !v195)
            goto LABEL_452;
          CFDictionaryAddValue(v166, v344, v175);
          v178 = v166;
          v179 = v342;
LABEL_418:
          CFDictionaryAddValue(v178, v179, v177);
LABEL_453:
          CFRelease(v175);
LABEL_454:
          if (v177)
          {
            v194 = v177;
            goto LABEL_456;
          }
        }
LABEL_457:
        if (!v174)
          goto LABEL_459;
LABEL_458:
        CFRelease(v174);
        goto LABEL_459;
      }
      if (CFEqual(v162, v356))
      {
        v196 = CFGetTypeID(Copy);
        if (v196 != CFDictionaryGetTypeID())
          goto LABEL_459;
        v197 = *(_OWORD *)(MEMORY[0x1E0CA4AF0] + 16);
        *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA4AF0];
        *(_OWORD *)&start.start.epoch = v197;
        FigGeometrySizeMakeFromDictionary();
        *(_OWORD *)&duration[0].value = *(_OWORD *)&start.start.value;
        *(_OWORD *)&duration[0].epoch = *(_OWORD *)&start.start.epoch;
        v198 = FigTextMarkupSizeCopyAsSimplifiedDictionary();
        if (!v198)
          goto LABEL_459;
        v174 = (void *)v198;
        v199 = v166;
        v200 = v348;
        goto LABEL_490;
      }
      if (CFEqual(v162, v350))
        goto LABEL_459;
      if (CFEqual(v162, v346))
      {
        v202 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v202)
          goto LABEL_459;
        v203 = v202;
        v204 = CFGetTypeID(v202);
        if (v204 != CFStringGetTypeID())
          goto LABEL_505;
        v205 = CFEqual(v203, v340);
        v206 = (CFTypeRef *)MEMORY[0x1E0CA2BC0];
        if (!v205)
        {
          v207 = CFEqual(v203, v334);
          v206 = (CFTypeRef *)MEMORY[0x1E0CA2BB8];
          if (!v207)
          {
            CFEqual(v203, v330);
            v206 = (CFTypeRef *)MEMORY[0x1E0CA2BC8];
          }
        }
        v208 = CFRetain(*v206);
        if (!v208)
          goto LABEL_459;
        v174 = (void *)v208;
        v199 = v166;
        v200 = v336;
        goto LABEL_490;
      }
      if (CFEqual(v162, v338))
      {
        v209 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v209)
          goto LABEL_459;
        v210 = v209;
        v211 = CFGetTypeID(v209);
        if (v211 != CFBooleanGetTypeID())
          goto LABEL_459;
        v212 = CFRetain(v210);
        if (!v212)
          goto LABEL_459;
        v174 = (void *)v212;
        v199 = v166;
        v200 = v328;
        goto LABEL_490;
      }
      if (CFEqual(v162, v332))
      {
        v213 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v213)
          goto LABEL_459;
        v214 = CFRetain(v213);
        if (!v214)
          goto LABEL_459;
        v174 = (void *)v214;
        v199 = v166;
        v200 = v326;
        goto LABEL_490;
      }
      if (CFEqual(v162, v436))
      {
        v215 = v166;
        v216 = v416;
LABEL_518:
        CFDictionaryAddValue(v215, v216, Copy);
        goto LABEL_459;
      }
      if (CFEqual(v162, v324))
      {
        v217 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v217)
          goto LABEL_459;
        v218 = CFRetain(v217);
        if (!v218)
          goto LABEL_459;
        v174 = (void *)v218;
        v199 = v166;
        v200 = v320;
      }
      else if (CFEqual(v162, v322))
      {
        v219 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v219)
          goto LABEL_459;
        v220 = CFRetain(v219);
        if (!v220)
          goto LABEL_459;
        v174 = (void *)v220;
        v199 = v166;
        v200 = v316;
      }
      else if (CFEqual(v162, v318))
      {
        v221 = CFGetTypeID(Copy);
        if (v221 != CFDictionaryGetTypeID())
          goto LABEL_459;
        FigGeometryAspectRatioMakeFromDictionary();
        v222 = FigTextMarkupAspectRatioCopyAsSimplifiedDictionary();
        if (!v222)
          goto LABEL_459;
        v174 = (void *)v222;
        v199 = v166;
        v200 = v312;
      }
      else if (CFEqual(v162, v314))
      {
        v223 = (const void *)FigCaptionDynamicStyleGetInitialValue();
        if (!v223)
          goto LABEL_459;
        v224 = v223;
        v225 = CFEqual(v223, v310);
        v226 = (CFTypeRef *)MEMORY[0x1E0CA2D40];
        if (!v225)
        {
          v227 = CFEqual(v224, v308);
          v226 = (CFTypeRef *)MEMORY[0x1E0CA2D48];
          if (!v227)
            goto LABEL_459;
        }
        v228 = CFRetain(*v226);
        if (!v228)
          goto LABEL_459;
        v174 = (void *)v228;
        v199 = v166;
        v200 = v308;
      }
      else
      {
        if (CFEqual(v162, v306))
        {
          v229 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
          if (!v229)
            goto LABEL_459;
          Copy = v229;
          v230 = CFGetTypeID(v229);
          if (v230 != CFNumberGetTypeID())
            goto LABEL_459;
          v215 = v166;
          v216 = v304;
          goto LABEL_518;
        }
        if (CFEqual(v162, v302))
        {
          v167 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          if (!v167)
            goto LABEL_460;
          v174 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFDictionaryGetValue((CFDictionaryRef)v167, v300);
          FigGeometryDimensionMakeFromDictionary();
          v231 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v174, v298, v231);
          if (v231)
            CFRelease(v231);
          CFDictionaryGetValue((CFDictionaryRef)v167, v296);
          FigGeometryDimensionMakeFromDictionary();
          v232 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v174, v294, v232);
          if (v232)
            CFRelease(v232);
          CFDictionaryGetValue((CFDictionaryRef)v167, v292);
          FigGeometryDimensionMakeFromDictionary();
          v233 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v174, v290, v233);
          if (v233)
            CFRelease(v233);
          CFDictionaryGetValue((CFDictionaryRef)v167, v288);
          FigGeometryDimensionMakeFromDictionary();
          v234 = (const void *)FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          CFDictionaryAddValue((CFMutableDictionaryRef)v174, v286, v234);
          if (v234)
            CFRelease(v234);
          if (!v174)
            goto LABEL_459;
          v199 = v166;
          v200 = v284;
        }
        else
        {
          if (CFEqual(v162, v282))
          {
            v235 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
            if (!v235)
              goto LABEL_459;
            Copy = v235;
            v236 = CFGetTypeID(v235);
            if (v236 != CFNumberGetTypeID())
              goto LABEL_459;
            v215 = v166;
            v216 = v280;
            goto LABEL_518;
          }
          if (CFEqual(v162, v278))
          {
            v237 = (const __CFString *)FigCaptionDynamicStyleGetInitialValue();
            if (!v237)
              goto LABEL_459;
            Copy = v237;
            v238 = CFGetTypeID(v237);
            if (v238 != CFNumberGetTypeID())
              goto LABEL_459;
            v216 = (CFStringRef)*MEMORY[0x1E0CA2AC0];
            v215 = v166;
            goto LABEL_518;
          }
          if (!CFEqual(v162, v276))
            goto LABEL_459;
          v239 = (const void *)FigCaptionDynamicStyleGetInitialValue();
          if (!v239)
            goto LABEL_459;
          v240 = CFGetTypeID(v239);
          if (v240 != CFDictionaryGetTypeID())
            goto LABEL_459;
          FigGeometryDimensionMakeFromDictionary();
          v241 = FigTextMarkupDimensionCopyAsSimplifiedDictionary();
          if (!v241)
            goto LABEL_459;
          v174 = (void *)v241;
          v200 = (const void *)*MEMORY[0x1E0CA2AC8];
          v199 = v166;
        }
      }
LABEL_490:
      CFDictionaryAddValue(v199, v200, v174);
      goto LABEL_458;
    }
    break;
  }
  v242 = v426;
  if (!v152)
    v242 = 1;
  if ((v242 & 1) == 0)
  {
    v243 = CFDictionaryGetValue(v152, v416);
    v244 = (const void *)*MEMORY[0x1E0CA2C38];
    v245 = (__CFDictionary *)CFDictionaryGetValue(v391, (const void *)*MEMORY[0x1E0CA2C38]);
    if (!v245)
    {
      v246 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v246)
      {
        v247 = v246;
        CFDictionaryAddValue(v391, v244, v246);
        CFRelease(v247);
      }
      v245 = (__CFDictionary *)CFDictionaryGetValue(v391, v244);
    }
    v248 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(v248, (const void *)*MEMORY[0x1E0CA2CA0], v243);
    CFDictionaryAddValue(v248, (const void *)*MEMORY[0x1E0CA2C98], v152);
    CFDictionarySetValue(v245, v243, v248);
    if (v248)
      CFRelease(v248);
  }
LABEL_575:
  if (v447)
  {
    CFRelease(v447);
    v447 = 0;
  }
  if (Copy)
    CFRelease(Copy);
  if (v151)
    CFRelease(v151);
  if (v152)
    CFRelease(v152);
  if (v446)
    CFRelease(v446);
  if (v148)
  {
LABEL_600:
    v21 = FigSignalErrorAt();
LABEL_601:
    v49 = v21;
    goto LABEL_588;
  }
  v49 = 0;
  if (v404)
  {
    *v404 = Mutable;
    Mutable = 0;
  }
LABEL_588:
  if (v444)
    CFRelease(v444);
  if (Mutable)
    CFRelease(Mutable);
  return v49;
}

CFDictionaryRef fcctx_BuildCaptionPropertyInfoDictionary()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  const __CFAllocator *v19;
  const CFArrayCallBacks *v20;
  CFDictionaryRef result;
  const void *v22[3];
  void *keys[3];
  void *v24[19];
  void *v25[15];
  void *values[8];

  values[7] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CA3320];
  values[0] = *(void **)MEMORY[0x1E0CA3308];
  values[1] = v0;
  v1 = (void *)*MEMORY[0x1E0CA3330];
  values[2] = *(void **)MEMORY[0x1E0CA3328];
  values[3] = v1;
  v2 = (void *)*MEMORY[0x1E0CA3378];
  values[4] = *(void **)MEMORY[0x1E0CA3338];
  values[5] = v2;
  values[6] = *(void **)MEMORY[0x1E0CA3358];
  v3 = (void *)*MEMORY[0x1E0CA3560];
  v25[0] = *(void **)MEMORY[0x1E0CA3558];
  v25[1] = v3;
  v4 = (void *)*MEMORY[0x1E0CA35A0];
  v25[2] = *(void **)MEMORY[0x1E0CA3578];
  v25[3] = v4;
  v5 = (void *)*MEMORY[0x1E0CA3570];
  v25[4] = *(void **)MEMORY[0x1E0CA3580];
  v25[5] = v5;
  v6 = (void *)*MEMORY[0x1E0CA35B8];
  v25[6] = *(void **)MEMORY[0x1E0CA35D0];
  v25[7] = v6;
  v7 = (void *)*MEMORY[0x1E0CA35D8];
  v25[8] = *(void **)MEMORY[0x1E0CA35C0];
  v25[9] = v7;
  v8 = (void *)*MEMORY[0x1E0CA3630];
  v25[10] = *(void **)MEMORY[0x1E0CA35E8];
  v25[11] = v8;
  v9 = (void *)*MEMORY[0x1E0CA3628];
  v25[12] = *(void **)MEMORY[0x1E0CA3568];
  v25[13] = v9;
  v25[14] = *(void **)MEMORY[0x1E0CA3638];
  v10 = (void *)*MEMORY[0x1E0CA33F0];
  v24[0] = *(void **)MEMORY[0x1E0CA33E8];
  v24[1] = v10;
  v11 = (void *)*MEMORY[0x1E0CA3408];
  v24[2] = *(void **)MEMORY[0x1E0CA3400];
  v24[3] = v11;
  v12 = (void *)*MEMORY[0x1E0CA3490];
  v24[4] = *(void **)MEMORY[0x1E0CA3420];
  v24[5] = v12;
  v13 = (void *)*MEMORY[0x1E0CA3428];
  v24[6] = *(void **)MEMORY[0x1E0CA34B0];
  v24[7] = v13;
  v14 = (void *)*MEMORY[0x1E0CA3438];
  v24[8] = *(void **)MEMORY[0x1E0CA3430];
  v24[9] = v14;
  v15 = (void *)*MEMORY[0x1E0CA33F8];
  v24[10] = *(void **)MEMORY[0x1E0CA3470];
  v24[11] = v15;
  v16 = (void *)*MEMORY[0x1E0CA34A0];
  v24[12] = *(void **)MEMORY[0x1E0CA3410];
  v24[13] = v16;
  v17 = (void *)*MEMORY[0x1E0CA3488];
  v24[14] = *(void **)MEMORY[0x1E0CA3480];
  v24[15] = v17;
  v18 = (void *)*MEMORY[0x1E0CA34B8];
  v24[16] = *(void **)MEMORY[0x1E0CA33D8];
  v24[17] = v18;
  v24[18] = *(void **)MEMORY[0x1E0CA34C0];
  keys[0] = CFSTR("caption");
  v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v20 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v22[0] = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 7, MEMORY[0x1E0C9B378]);
  keys[1] = CFSTR("style");
  v22[1] = CFArrayCreate(v19, (const void **)v25, 15, v20);
  keys[2] = CFSTR("region");
  v22[2] = CFArrayCreate(v19, (const void **)v24, 19, v20);
  result = CFDictionaryCreate(v19, (const void **)keys, v22, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sCAPRPCaptionPropertyInfoDictionary = (uint64_t)result;
  return result;
}

uint64_t fcctx_createColorRGBAFromColorStyleDynamicProperty(uint64_t a1, uint64_t *a2)
{
  uint64_t InitialValue;
  const void *v4;
  CFTypeID TypeID;

  InitialValue = FigCaptionDynamicStyleGetInitialValue();
  if (!InitialValue)
  {
    *a2 = 0;
    return 0;
  }
  v4 = (const void *)InitialValue;
  TypeID = CGColorGetTypeID();
  if (TypeID == CFGetTypeID(v4))
  {
    *a2 = FigTextMarkupCreateARGBColorArrayFromCGColor();
    return 0;
  }
  return FigSignalErrorAt();
}

void addOneKeyAndValueApplyFunction(void *key, void *value, CFMutableDictionaryRef *a3)
{
  if (a3)
  {
    if (*a3)
      CFDictionaryAddValue(*a3, key, value);
  }
}

uint64_t FigVideoCompositorCreateOpenGL(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  CFMutableDictionaryRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  char *String;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  const __CFAllocator *v19;
  CFDictionaryValueCallBacks v21;
  CFTypeRef cf;
  void *v23;
  GLuint shader[2];
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  cf = 0;
  memset(&v21, 0, sizeof(v21));
  FigVideoCompositorGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    goto LABEL_45;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 516) = 1065353216;
  *(_BYTE *)(DerivedStorage + 384) = 1;
  *(_QWORD *)(DerivedStorage + 760) = 0x7FFFFFFFLL;
  *(_QWORD *)(DerivedStorage + 792) = 0x7FFFFFFFLL;
  *(_BYTE *)(DerivedStorage + 592) = 0;
  *(_DWORD *)(DerivedStorage + 596) = 1;
  v21.version = 0;
  v21.retain = (CFDictionaryRetainCallBack)ovc_cloneInFlightEntry;
  v21.copyDescription = 0;
  v21.equal = 0;
  v21.release = (CFDictionaryReleaseCallBack)ovc_freeInFlightEntry;
  v7 = CFDictionaryCreateMutable(a1, 0, 0, &v21);
  *(_QWORD *)(DerivedStorage + 600) = v7;
  if (!v7
    || (v8 = FigSemaphoreCreate(), (*(_QWORD *)(DerivedStorage + 608) = v8) == 0)
    || (*(_DWORD *)(DerivedStorage + 616) = 0,
        v9 = FigDispatchQueueCreateWithPriority(),
        (*(_QWORD *)(DerivedStorage + 632) = v9) == 0)
    || (v10 = FigDispatchQueueCreateWithPriority(), (*(_QWORD *)(DerivedStorage + 640) = v10) == 0))
  {
    v5 = FigSignalErrorAt();
LABEL_45:
    v17 = v5;
    goto LABEL_46;
  }
  v11 = cf;
  v12 = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  v13 = OVCCreateOpenGLContext((uint64_t *)&v23);
  if ((_DWORD)v13)
    goto LABEL_48;
  v13 = OVCSetCurrentOpenGLContext((uint64_t)v23);
  if ((_DWORD)v13)
    goto LABEL_48;
  String = (char *)glGetString(0x1F03u);
  if (String)
    v15 = strstr(String, "GL_EXT_texture_rg") != 0;
  else
    v15 = 0;
  *(_BYTE *)(v12 + 521) = v15;
  v27[0] = 0;
  v25 = 0u;
  v26 = 0u;
  *(_QWORD *)shader = 0;
  v16 = OVCCreateShader("uniform mat3 affine_transform; \n"
          " \t\n"
          " \tattribute vec2 vertex_coord; \n"
          "attribute vec2 texture_coord0; \n"
          "\n"
          "varying vec2 fragment_texture_coord0; \n"
          "void main() \n"
          " \t{ \n"
          " \t\tvec3 position_2D = affine_transform * vec3( vertex_coord, 1.0); \n"
          " \t\tgl_Position = vec4( position_2D.xy, 0.0, 1.0); \n"
          "fragment_texture_coord0 = texture_coord0; \n"
          "}",
          0x8B31u,
          shader);
  if (!(_DWORD)v16)
  {
    v16 = OVCCreateShader("precision mediump float; \n"
            "uniform sampler2D source_buffer_plane0 ; \n"
            "varying vec2 fragment_texture_coord0; \n"
            "uniform float opacity; \n"
            " \t\n"
            " \tvarying vec2 fragment_texture_coord; \n"
            " \t\n"
            " \tvoid main() \n"
            " \t{ \n"
            " \t\tvec4 local_color = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
            " \t\tgl_FragColor = local_color * opacity;\t\t\t// color components are premultiplied \n"
            " \t}",
            0x8B30u,
            (GLuint *)&v25);
    if (!(_DWORD)v16)
    {
      v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 24), shader[0], v25);
      if (!(_DWORD)v16)
      {
        v16 = OVCCreateShader("precision mediump float; \n"
                "uniform sampler2D source_buffer_plane0 ; \n"
                "uniform sampler2D source_buffer_plane1 ; \n"
                "varying vec2 fragment_texture_coord0; \n"
                "uniform mat4 color_matrix; \n"
                " \tuniform float opacity; \n"
                " \tuniform int g_index;
                " \t\n"
                " \tvoid main() \n"
                " \t{ \n"
                " \t\tvec4 local_color_y = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
                " \t\tvec4 local_color_uv = texture2D( source_buffer_plane1, fragment_texture_coord0); \n"
                " \t\tvec4 local_color_yuv = vec4( local_color_y.r, local_color_uv.r, local_color_uv[g_index], 1.0); \n"
                " \t\t\n"
                " \t\tvec4 local_color_rgba = color_matrix * local_color_yuv; \n"
                " \t\t\n"
                " \t\tgl_FragColor = local_color_rgba * opacity;\t\t\t// color components are premultiplied \n"
                " \t}",
                0x8B30u,
                (GLuint *)&v25 + 1);
        if (!(_DWORD)v16)
        {
          v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 60), shader[0], DWORD1(v25));
          if (!(_DWORD)v16)
          {
            if (!*(_BYTE *)(v12 + 521))
            {
              v17 = 0;
              goto LABEL_35;
            }
            v16 = OVCCreateShader("precision mediump float; \n"
                    "uniform sampler2D source_buffer_plane0 ; \n"
                    "uniform sampler2D source_buffer_plane1 ; \n"
                    "varying vec2 fragment_texture_coord0; \n"
                    "uniform mat4 color_matrix; \n"
                    " \t\n"
                    " \tvoid main() \n"
                    " \t{ \n"
                    " \t\tvec4 color_vector = vec4( color_matrix[0][0], color_matrix[1][0], color_matrix[2][0], color_mat"
                    "rix[3][0]);\n"
                    " \t\tvec4 local_color_y = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
                    " \t\tvec4 local_color_uv = texture2D( source_buffer_plane1, fragment_texture_coord0); \n"
                    " \t\tvec4 local_color_yuv = vec4( local_color_y.r, local_color_uv.r, local_color_uv.g, 1.0); \n"
                    " \t\t\n"
                    " \t\tgl_FragColor.r = dot( local_color_yuv, color_vector); \n"
                    " \t}",
                    0x8B30u,
                    (GLuint *)&v25 + 2);
            if (!(_DWORD)v16)
            {
              v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 96), shader[0], DWORD2(v25));
              if (!(_DWORD)v16)
              {
                v16 = OVCCreateShader("precision mediump float; \n"
                        "uniform sampler2D source_buffer_plane0 ; \n"
                        "uniform sampler2D source_buffer_plane1 ; \n"
                        "varying vec2 fragment_texture_coord0; \n"
                        "uniform mat4 color_matrix; \n"
                        " \t\n"
                        " \tvoid main() \n"
                        " \t{ \n"
                        " \t\tvec4 color_vector_u = vec4( color_matrix[0][1], color_matrix[1][1], color_matrix[2][1], col"
                        "or_matrix[3][1]);\n"
                        " \t\tvec4 color_vector_v = vec4( color_matrix[0][2], color_matrix[1][2], color_matrix[2][2], col"
                        "or_matrix[3][2]);\n"
                        " \t\tvec4 local_color_y = texture2D( source_buffer_plane0, fragment_texture_coord0); \n"
                        " \t\tvec4 local_color_uv = texture2D( source_buffer_plane1, fragment_texture_coord0); \n"
                        " \t\tvec4 local_color_yuv = vec4( local_color_y.r, local_color_uv.r, local_color_uv.g, 1.0); \n"
                        " \t\t\n"
                        " \t\tgl_FragColor.r = dot( local_color_yuv, color_vector_u); \n"
                        " \t\tgl_FragColor.g = dot( local_color_yuv, color_vector_v); \n"
                        " \t}",
                        0x8B30u,
                        (GLuint *)((unint64_t)&v25 | 0xC));
                if (!(_DWORD)v16)
                {
                  v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 132), shader[0], HIDWORD(v25));
                  if (!(_DWORD)v16)
                  {
                    v16 = OVCCreateShader("precision mediump float; \n"
                            "uniform sampler2D source_buffer_plane0 ; \n"
                            "varying vec2 fragment_texture_coord0; \n"
                            "void main() \n"
                            " \t{ \n"
                            " \t\tgl_FragColor.r = texture2D( source_buffer_plane0, fragment_texture_coord0).r; \n"
                            " \t}",
                            0x8B30u,
                            (GLuint *)&v26);
                    if (!(_DWORD)v16)
                    {
                      v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 168), shader[0], v26);
                      if (!(_DWORD)v16)
                      {
                        v16 = OVCCreateShader("precision mediump float; \n"
                                "uniform sampler2D source_buffer_plane1 ; \n"
                                "varying vec2 fragment_texture_coord0; \n"
                                "void main() \n"
                                " \t{ \n"
                                " \t\tgl_FragColor.rg = texture2D( source_buffer_plane1, fragment_texture_coord0).rg; \n"
                                " \t\t\n"
                                " \t}",
                                0x8B30u,
                                (GLuint *)&v26 + 1);
                        if (!(_DWORD)v16)
                        {
                          v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 204), shader[0], DWORD1(v26));
                          if (!(_DWORD)v16)
                          {
                            v16 = OVCCreateShader("precision mediump float; \n"
                                    "uniform sampler2D source_buffer_plane0 ; \n"
                                    "varying vec2 fragment_texture_coord0; \n"
                                    "uniform mat4 color_matrix; \n"
                                    " \tuniform float opacity; \n"
                                    " \t\n"
                                    " \tvoid main() \n"
                                    " \t{ \n"
                                    " \t\tvec4 color_vector = vec4( color_matrix[0][0], color_matrix[1][0], color_matrix["
                                    "2][0], color_matrix[3][0]);\n"
                                    " \t\tvec4 local_color_rgba = texture2D( source_buffer_plane0, fragment_texture_coord"
                                    "0); \n"
                                    " \t\t\n"
                                    " \t\tgl_FragColor.r = dot( vec4( local_color_rgba.rgb, 1.0), color_vector);
                                    "premultiplication here  \n"
                                    " \t\tgl_FragColor.a = local_color_rgba.a * opacity; \n"
                                    " \t}",
                                    0x8B30u,
                                    (GLuint *)&v26 + 2);
                            if (!(_DWORD)v16)
                            {
                              v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 240), shader[0], DWORD2(v26));
                              if (!(_DWORD)v16)
                              {
                                v16 = OVCCreateShader("precision mediump float; \n"
                                        "uniform sampler2D source_buffer_plane0 ; \n"
                                        "varying vec2 fragment_texture_coord0; \n"
                                        "uniform mat4 color_matrix; \n"
                                        " \tuniform float opacity; \n"
                                        " \t\n"
                                        " \tvoid main() \n"
                                        " \t{ \n"
                                        " \t\tvec4 color_vector_u = vec4( color_matrix[0][1], color_matrix[1][1], color_m"
                                        "atrix[2][1], color_matrix[3][1]);\n"
                                        " \t\tvec4 color_vector_v = vec4( color_matrix[0][2], color_matrix[1][2], color_m"
                                        "atrix[2][2], color_matrix[3][2]);\n"
                                        " \t\tvec4 local_color_rgba = texture2D( source_buffer_plane0, fragment_texture_c"
                                        "oord0); \n"
                                        " \t\tvec4 local_color_rgb = vec4( local_color_rgba.rgb, 1.0); \n"
                                        " \t\t\n"
                                        " \t\tgl_FragColor.r = dot( vec4( local_color_rgba.rgb, 1.0), color_vector_u); "
                                        "// no premultiplication here  \n"
                                        " \t\tgl_FragColor.g = dot( vec4( local_color_rgba.rgb, 1.0), color_vector_v); "
                                        "// no premultiplication here  \n"
                                        " \t\tgl_FragColor.a = local_color_rgba.a * opacity; \n"
                                        " \t}",
                                        0x8B30u,
                                        (GLuint *)&v26 + 3);
                                if (!(_DWORD)v16)
                                {
                                  v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 276), shader[0], HIDWORD(v26));
                                  if (!(_DWORD)v16)
                                  {
                                    v16 = OVCCreateShader("attribute vec2 vertex_coord; \n"
                                            "attribute vec2 texture_coord0; \n"
                                            "\n"
                                            "varying vec2 fragment_texture_coord0; \n"
                                            "void main() \n"
                                            " \t{ \n"
                                            " \t\tgl_Position = vec4( vertex_coord.xy, 0.0, 1.0); \n"
                                            "fragment_texture_coord0 = texture_coord0; \n"
                                            "}",
                                            0x8B31u,
                                            &shader[1]);
                                    if (!(_DWORD)v16)
                                    {
                                      v16 = OVCCreateShader("precision mediump float; \n"
                                              "uniform sampler2D source_buffer_plane0 ; \n"
                                              "varying vec2 fragment_texture_coord0; \n"
                                              "void main() \n"
                                              " \t{ \n"
                                              " \t\tgl_FragColor.r = texture2D( source_buffer_plane0, fragment_texture_co"
                                              "ord0).r; \n"
                                              " \t}",
                                              0x8B30u,
                                              (GLuint *)v27);
                                      if (!(_DWORD)v16)
                                      {
                                        v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 312), shader[1], v27[0]);
                                        if (!(_DWORD)v16)
                                        {
                                          v16 = OVCCreateShader("precision mediump float; \n"
                                                  "uniform sampler2D source_buffer_plane1 ; \n"
                                                  "varying vec2 fragment_texture_coord0; \n"
                                                  "void main() \n"
                                                  " \t{ \n"
                                                  " \t\tgl_FragColor.rg = texture2D( source_buffer_plane1, fragment_textu"
                                                  "re_coord0).rg; \n"
                                                  " \t}",
                                                  0x8B30u,
                                                  (GLuint *)v27 + 1);
                                          if (!(_DWORD)v16)
                                            v16 = ovc_createAndConfigureGLProgram((GLuint *)(v12 + 348), shader[1], HIDWORD(v27[0]));
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v17 = v16;
LABEL_35:
  glDeleteShader(shader[0]);
  glDeleteShader(shader[1]);
  for (i = 0; i != 40; i += 4)
    glDeleteShader(*(_DWORD *)((char *)&v25 + i));
  if ((_DWORD)v17)
    goto LABEL_41;
  v13 = OVCGLObjectCacheCreate(60, (_QWORD *)(v12 + 576));
  if ((_DWORD)v13)
  {
LABEL_48:
    v17 = v13;
    goto LABEL_41;
  }
  v19 = CFGetAllocator(v11);
  v17 = FigOVCGLObjectCacheWrapperCreate(v19, *(_QWORD *)(v12 + 576), (_QWORD *)(v12 + 584));
  if (!(_DWORD)v17)
  {
    *(_QWORD *)v12 = v23;
    v23 = 0;
  }
LABEL_41:
  OVCDestroyOpenGLContext(v23);
  OVCSetCurrentOpenGLContext(0);
  if (!(_DWORD)v17)
  {
    *a3 = cf;
    return v17;
  }
LABEL_46:
  if (cf)
    CFRelease(cf);
  return v17;
}

_QWORD *ovc_cloneInFlightEntry(const __CFAllocator *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  const void *v5;

  v3 = CFAllocatorAllocate(a1, 24, 0);
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v3 = *(_OWORD *)a2;
  v3[2] = v4;
  if (*v3)
    CFRetain((CFTypeRef)*v3);
  v5 = (const void *)v3[2];
  if (v5)
    CFRetain(v5);
  return v3;
}

void ovc_freeInFlightEntry(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  CFTypeRef v4;

  if (*ptr)
    CFRelease(*ptr);
  v4 = ptr[2];
  if (v4)
    CFRelease(v4);
  CFAllocatorDeallocate(allocator, ptr);
}

void openglVideoCompositor_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t i;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  _QWORD v21[6];
  _QWORD block[6];
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v2 = *(NSObject **)(v1 + 640);
  if (v2)
  {
    if (*(_QWORD *)(v1 + 608))
    {
      v3 = MEMORY[0x1E0C809B0];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __openglVideoCompositor_flush_block_invoke;
      block[3] = &unk_1E2F87F08;
      block[4] = &v23;
      block[5] = v1;
      dispatch_sync(v2, block);
      if (v24[3] >= 1)
      {
        do
        {
          FigSemaphoreWaitRelative();
          v4 = *(NSObject **)(v1 + 640);
          v21[0] = v3;
          v21[1] = 3221225472;
          v21[2] = __openglVideoCompositor_flush_block_invoke_2;
          v21[3] = &unk_1E2F87F08;
          v21[4] = &v23;
          v21[5] = v1;
          dispatch_sync(v4, v21);
        }
        while (v24[3] > 0);
      }
    }
  }
  _Block_object_dispose(&v23, 8);
  v5 = *(NSObject **)(DerivedStorage + 632);
  if (v5)
  {
    dispatch_sync(v5, &__block_literal_global_95);
    v6 = *(NSObject **)(DerivedStorage + 632);
    if (v6)
      dispatch_release(v6);
    *(_QWORD *)(DerivedStorage + 632) = 0;
  }
  v7 = *(NSObject **)(DerivedStorage + 640);
  if (v7)
  {
    dispatch_sync(v7, &__block_literal_global_6_0);
    v8 = *(NSObject **)(DerivedStorage + 640);
    if (v8)
      dispatch_release(v8);
    *(_QWORD *)(DerivedStorage + 640) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 608))
  {
    FigSemaphoreDestroy();
    *(_QWORD *)(DerivedStorage + 608) = 0;
  }
  if (OVCSetCurrentOpenGLContext(*(_QWORD *)DerivedStorage))
  {
    glBindFramebuffer(0x8D40u, 0);
    glDeleteFramebuffers(2, (const GLuint *)(DerivedStorage + 16));
    glDeleteTextures(2, (const GLuint *)(DerivedStorage + 388));
    for (i = 24; i != 384; i += 36)
      glDeleteProgram(*(_DWORD *)(DerivedStorage + i));
    glFinish();
  }
  OVCBicubicPrescalerDestroy(*(char **)(DerivedStorage + 8));
  FigOVCGLObjectCacheWrapperInvalidate(*(_QWORD *)(DerivedStorage + 584));
  OVCGLObjectCacheDestroy(*(void **)(DerivedStorage + 576));
  v10 = *(const void **)(DerivedStorage + 584);
  if (v10)
    CFRelease(v10);
  OVCSetCurrentOpenGLContext(0);
  OVCDestroyOpenGLContext(*(void **)DerivedStorage);
  v11 = *(const void **)(DerivedStorage + 568);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(DerivedStorage + 552);
  if (v12)
    CFRelease(v12);
  v13 = *(const void **)(DerivedStorage + 528);
  if (v13)
    CFRelease(v13);
  v14 = *(const void **)(DerivedStorage + 536);
  if (v14)
    CFRelease(v14);
  v15 = *(const void **)(DerivedStorage + 544);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(DerivedStorage + 488);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(DerivedStorage + 496);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(DerivedStorage + 504);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(DerivedStorage + 560);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(DerivedStorage + 600);
  if (v20)
    CFRelease(v20);
  ovc_releaseLayerArrays();
}

void sub_192F5126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *openglVideoCompositor_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  CFAllocatorRef v5;
  CFTypeRef cf;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  cf = 0;
  v4 = CFGetRetainCount(a1);
  v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoCompositor_OpenGL %p retainCount: %ld allocator: %p "), a1, v4, v5);
  ovc_copyPerformanceDictionary((uint64_t)a1, (CFDictionaryRef *)&cf);
  if (cf)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR(", performanceDictionary %@"), cf);
    if (cf)
      CFRelease(cf);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t openglVideoCompositor_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  const __CFDictionary *DictionaryRepresentation;
  const void *v10;
  const void **v12;
  int v13;
  const __CFAllocator *v14;
  __int128 v15;
  CMTimeRange v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("RenderDimensions")))
  {
    DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(DerivedStorage + 424));
LABEL_3:
    *a4 = DictionaryRepresentation;
    return 0;
  }
  if (CFEqual(a2, CFSTR("RenderPixelAspectRatio")))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 496);
    v10 = *(const void **)(DerivedStorage + 496);
    if (!v10)
      return 0;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("RenderEdgeProcessingPixels")))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 504);
    v10 = *(const void **)(DerivedStorage + 504);
    if (!v10)
      return 0;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredAttributes")))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 552);
    v10 = *(const void **)(DerivedStorage + 552);
    if (!v10)
      return 0;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredYCbCrMatrix")))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 528);
    v10 = *(const void **)(DerivedStorage + 528);
    if (!v10)
      return 0;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredColorPrimaries")))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 544);
    v10 = *(const void **)(DerivedStorage + 544);
    if (!v10)
      return 0;
    goto LABEL_21;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredTransferFunction")))
  {
    *a4 = *(CFDictionaryRef *)(DerivedStorage + 536);
    v10 = *(const void **)(DerivedStorage + 536);
    if (!v10)
      return 0;
LABEL_21:
    CFRetain(v10);
    return 0;
  }
  if (CFEqual(a2, CFSTR("SourcePixelBufferAttributes")))
    return ovc_createPixelBufferAttributesDictionary(a3, a4);
  if (CFEqual(a2, CFSTR("RenderScale")))
  {
    DictionaryRepresentation = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, (const void *)(DerivedStorage + 516));
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("CanApplyRenderScale")))
  {
    v12 = (const void **)MEMORY[0x1E0C9AE50];
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("HighQualityRendering")))
  {
    v12 = (const void **)MEMORY[0x1E0C9AE50];
    v13 = *(unsigned __int8 *)(DerivedStorage + 520);
    goto LABEL_33;
  }
  if (CFEqual(a2, CFSTR("WaitForBufferCompletion")))
  {
    v12 = (const void **)MEMORY[0x1E0C9AE50];
    v13 = *(unsigned __int8 *)(DerivedStorage + 592);
LABEL_33:
    if (!v13)
      v12 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_35:
    DictionaryRepresentation = (const __CFDictionary *)*v12;
    if (!*v12)
      goto LABEL_3;
LABEL_36:
    DictionaryRepresentation = (const __CFDictionary *)CFRetain(DictionaryRepresentation);
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("PixelBufferPoolSharingID")))
  {
    DictionaryRepresentation = *(const __CFDictionary **)(DerivedStorage + 560);
    if (!DictionaryRepresentation)
      goto LABEL_3;
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("LoopTimeRange")))
  {
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v15 = *(_OWORD *)(DerivedStorage + 712);
    *(_OWORD *)&v16.start.value = *(_OWORD *)(DerivedStorage + 696);
    *(_OWORD *)&v16.start.epoch = v15;
    *(_OWORD *)&v16.duration.timescale = *(_OWORD *)(DerivedStorage + 728);
    DictionaryRepresentation = CMTimeRangeCopyAsDictionary(&v16, v14);
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("PerformanceDictionary")))
  {
    ovc_copyPerformanceDictionary(a1, a4);
    return 0;
  }
  if (CFEqual(a2, CFSTR("SourceColorConformanceCapabilityLevel")))
  {
    DictionaryRepresentation = (const __CFDictionary *)FigCFNumberCreateUInt32();
    goto LABEL_3;
  }
  return FigSignalErrorAt();
}

uint64_t openglVideoCompositor_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  CFTypeID v7;
  const void *Value;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  CFTypeID v12;
  const void *v13;
  CFTypeID v15;
  CFIndex v16;
  CFTypeID v17;
  const void *ValueAtIndex;
  CFTypeID v19;
  __CFDictionary **v20;
  const void *v21;
  CFTypeID v22;
  uint64_t v23;
  float v24;
  const void *v25;
  CFTypeID v26;
  const void *v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  int v32;
  const void *v33;
  CFTypeID v34;
  Boolean v35;
  CFTypeID v36;
  void *v37;
  CFTypeID v38;
  CFTypeID v39;
  CFTypeID v40;
  _OWORD *v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  CMTimeRange size;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(CFSTR("RenderDimensions"), a2))
  {
    size.start.value = 0;
    *(_QWORD *)&size.start.timescale = 0;
    if (a3)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3)
        && CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a3, (CGSize *)&size)
        && *(double *)&size.start.value > 0.0
        && *(double *)&size.start.timescale > 0.0)
      {
        *(_OWORD *)(DerivedStorage + 424) = *(_OWORD *)&size.start.value;
LABEL_38:
        v20 = (__CFDictionary **)(DerivedStorage + 488);
        v21 = *(const void **)(DerivedStorage + 488);
        if (v21)
        {
          CFRelease(v21);
          *v20 = 0;
        }
        v22 = *(_QWORD *)(DerivedStorage + 496);
        v23 = *(_QWORD *)(DerivedStorage + 504);
        v24 = *(float *)(DerivedStorage + 516);
LABEL_41:
        a3 = (const void *)FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture(v22, v23, (_QWORD *)(DerivedStorage + 408), (_QWORD *)(DerivedStorage + 416), DerivedStorage + 440, v20, *(double *)(DerivedStorage + 424), *(double *)(DerivedStorage + 432), v24);
        *(_BYTE *)(DerivedStorage + 384) = 1;
        v25 = *(const void **)(DerivedStorage + 568);
        if (v25)
        {
          CFRelease(v25);
          *(_QWORD *)(DerivedStorage + 568) = 0;
        }
        return (uint64_t)a3;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(CFSTR("RenderPixelAspectRatio"), a2))
  {
    if (!a3)
    {
      v13 = *(const void **)(DerivedStorage + 496);
      *(_QWORD *)(DerivedStorage + 496) = 0;
      if (!v13)
        goto LABEL_38;
      goto LABEL_37;
    }
    v7 = CFDictionaryGetTypeID();
    if (v7 != CFGetTypeID(a3))
      return FigSignalErrorAt();
    Value = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8E60]);
    v9 = CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8E70]);
    LODWORD(size.start.value) = 0;
    valuePtr = 0;
    if (!Value)
      return FigSignalErrorAt();
    v10 = v9;
    v11 = CFNumberGetTypeID();
    if (v11 != CFGetTypeID(Value))
      return FigSignalErrorAt();
    CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &size);
    if (SLODWORD(size.start.value) < 1)
      return FigSignalErrorAt();
    if (!v10)
      return FigSignalErrorAt();
    v12 = CFNumberGetTypeID();
    if (v12 != CFGetTypeID(v10))
      return FigSignalErrorAt();
    CFNumberGetValue((CFNumberRef)v10, kCFNumberIntType, &valuePtr);
    if (valuePtr < 1)
      return FigSignalErrorAt();
    v13 = *(const void **)(DerivedStorage + 496);
    *(_QWORD *)(DerivedStorage + 496) = a3;
    goto LABEL_34;
  }
  if (CFEqual(CFSTR("RenderEdgeProcessingPixels"), a2))
  {
    if (a3)
    {
      v15 = CFArrayGetTypeID();
      if (v15 == CFGetTypeID(a3) && CFArrayGetCount((CFArrayRef)a3) == 4)
      {
        v16 = 0;
        while (1)
        {
          v17 = CFNumberGetTypeID();
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a3, v16);
          if (v17 != CFGetTypeID(ValueAtIndex))
            break;
          if (++v16 == 4)
          {
            v13 = *(const void **)(DerivedStorage + 504);
            *(_QWORD *)(DerivedStorage + 504) = a3;
            goto LABEL_34;
          }
        }
      }
      return FigSignalErrorAt();
    }
    v13 = *(const void **)(DerivedStorage + 504);
    *(_QWORD *)(DerivedStorage + 504) = 0;
    if (!v13)
      goto LABEL_38;
LABEL_37:
    CFRelease(v13);
    goto LABEL_38;
  }
  if (!CFEqual(CFSTR("DestinationPixelBufferDesiredAttributes"), a2))
  {
    if (CFEqual(CFSTR("DestinationPixelBufferDesiredYCbCrMatrix"), a2))
    {
      if (!a3)
      {
        v27 = *(const void **)(DerivedStorage + 528);
        *(_QWORD *)(DerivedStorage + 528) = 0;
        goto LABEL_67;
      }
      v26 = CFStringGetTypeID();
      if (v26 != CFGetTypeID(a3))
        return FigSignalErrorAt();
      v27 = *(const void **)(DerivedStorage + 528);
      *(_QWORD *)(DerivedStorage + 528) = a3;
      goto LABEL_58;
    }
    if (CFEqual(CFSTR("DestinationPixelBufferDesiredColorPrimaries"), a2))
    {
      if (a3)
      {
        v28 = CFStringGetTypeID();
        if (v28 != CFGetTypeID(a3))
          return FigSignalErrorAt();
        v27 = *(const void **)(DerivedStorage + 544);
        *(_QWORD *)(DerivedStorage + 544) = a3;
        goto LABEL_58;
      }
      v27 = *(const void **)(DerivedStorage + 544);
      *(_QWORD *)(DerivedStorage + 544) = 0;
      goto LABEL_67;
    }
    if (CFEqual(CFSTR("DestinationPixelBufferDesiredTransferFunction"), a2))
    {
      if (a3)
      {
        v29 = CFStringGetTypeID();
        if (v29 != CFGetTypeID(a3))
          return FigSignalErrorAt();
        v27 = *(const void **)(DerivedStorage + 536);
        *(_QWORD *)(DerivedStorage + 536) = a3;
LABEL_58:
        CFRetain(a3);
        goto LABEL_67;
      }
      v27 = *(const void **)(DerivedStorage + 536);
      *(_QWORD *)(DerivedStorage + 536) = 0;
LABEL_67:
      if (v27)
        CFRelease(v27);
      return 0;
    }
    if (CFEqual(CFSTR("RenderScale"), a2))
    {
      LODWORD(size.start.value) = 1065353216;
      if (a3)
      {
        v30 = CFGetTypeID(a3);
        if (v30 != CFNumberGetTypeID()
          || (CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &size),
              v24 = *(float *)&size.start.value,
              *(float *)&size.start.value <= 0.0))
        {
          a3 = (const void *)FigSignalErrorAt();
          if ((_DWORD)a3)
            return (uint64_t)a3;
          v24 = *(float *)&size.start.value;
        }
      }
      else
      {
        v24 = 1.0;
      }
      *(float *)(DerivedStorage + 516) = v24;
      v20 = (__CFDictionary **)(DerivedStorage + 488);
      v33 = *(const void **)(DerivedStorage + 488);
      if (v33)
      {
        CFRelease(v33);
        *(_QWORD *)(DerivedStorage + 488) = 0;
        v24 = *(float *)(DerivedStorage + 516);
      }
      v22 = *(_QWORD *)(DerivedStorage + 496);
      v23 = *(_QWORD *)(DerivedStorage + 504);
      goto LABEL_41;
    }
    if (CFEqual(CFSTR("HighQualityRendering"), a2))
    {
      if (!a3)
      {
        *(_BYTE *)(DerivedStorage + 520) = 0;
        return (uint64_t)a3;
      }
      v31 = CFBooleanGetTypeID();
      if (v31 == CFGetTypeID(a3))
      {
        v32 = CFBooleanGetValue((CFBooleanRef)a3);
        if (!v32 || *(_BYTE *)(DerivedStorage + 521))
        {
          a3 = 0;
          *(_BYTE *)(DerivedStorage + 520) = v32;
          return (uint64_t)a3;
        }
      }
      return FigSignalErrorAt();
    }
    if (CFEqual(CFSTR("ThrottleForBackground"), a2))
    {
      if (!a3)
      {
        v35 = 0;
        goto LABEL_90;
      }
      v34 = CFGetTypeID(a3);
      if (v34 == CFBooleanGetTypeID())
      {
        v35 = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_90:
        *(_BYTE *)(DerivedStorage + 624) = v35;
        openglVideoCompositor_setOpenGLContextPriority();
      }
      return 0;
    }
    if (CFEqual(CFSTR("ClientPID"), a2))
    {
      if (!a3)
      {
        *(_DWORD *)(DerivedStorage + 620) = 0;
        goto LABEL_104;
      }
      v36 = CFGetTypeID(a3);
      if (v36 != CFNumberGetTypeID())
        return 0;
      v37 = (void *)(DerivedStorage + 620);
    }
    else
    {
      if (!CFEqual(CFSTR("WorkerThreadPriority"), a2))
      {
        if (CFEqual(CFSTR("WaitForBufferCompletion"), a2))
        {
          if (!a3 || (v39 = CFBooleanGetTypeID(), v39 == CFGetTypeID(a3)))
          {
            a3 = 0;
            if (FigCFEqual())
              *(_BYTE *)(DerivedStorage + 592) = 1;
            else
              *(_BYTE *)(DerivedStorage + 592) = 0;
            return (uint64_t)a3;
          }
          return FigSignalErrorAt();
        }
        if (!CFEqual(CFSTR("PixelBufferPoolSharingID"), a2))
        {
          if (CFEqual(CFSTR("LoopTimeRange"), a2))
          {
            if (!a3)
            {
              v43 = MEMORY[0x1E0CA2E40];
              v44 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
              *(_OWORD *)(DerivedStorage + 696) = *MEMORY[0x1E0CA2E40];
              *(_OWORD *)(DerivedStorage + 712) = v44;
              *(_OWORD *)(DerivedStorage + 728) = *(_OWORD *)(v43 + 32);
              return (uint64_t)a3;
            }
            v40 = CFGetTypeID(a3);
            if (v40 == CFDictionaryGetTypeID())
            {
              v41 = (_OWORD *)(DerivedStorage + 696);
              CMTimeRangeMakeFromDictionary(&size, (CFDictionaryRef)a3);
              a3 = 0;
              v42 = *(_OWORD *)&size.start.epoch;
              *v41 = *(_OWORD *)&size.start.value;
              v41[1] = v42;
              v41[2] = *(_OWORD *)&size.duration.timescale;
              return (uint64_t)a3;
            }
          }
          return FigSignalErrorAt();
        }
        v27 = *(const void **)(DerivedStorage + 560);
        *(_QWORD *)(DerivedStorage + 560) = a3;
        if (!a3)
          goto LABEL_67;
        goto LABEL_58;
      }
      if (!a3)
      {
        *(_DWORD *)(DerivedStorage + 616) = 0;
        goto LABEL_104;
      }
      v38 = CFGetTypeID(a3);
      if (v38 != CFNumberGetTypeID())
        return 0;
      v37 = (void *)(DerivedStorage + 616);
    }
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v37);
LABEL_104:
    openglVideoCompositor_setDispatchQueueClientPidAndThreadPriority();
    return 0;
  }
  if (!a3)
  {
    v13 = *(const void **)(DerivedStorage + 552);
    *(_QWORD *)(DerivedStorage + 552) = 0;
    if (!v13)
      goto LABEL_38;
    goto LABEL_37;
  }
  v19 = CFDictionaryGetTypeID();
  if (v19 == CFGetTypeID(a3))
  {
    v13 = *(const void **)(DerivedStorage + 552);
    *(_QWORD *)(DerivedStorage + 552) = a3;
LABEL_34:
    CFRetain(a3);
    if (!v13)
      goto LABEL_38;
    goto LABEL_37;
  }
  return FigSignalErrorAt();
}

void ovc_releaseLayerArrays()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  CFTypeRef *v3;
  uint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;
  CFTypeRef *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  v2 = *(_QWORD *)(DerivedStorage + 664);
  if (v2)
  {
    v3 = *(CFTypeRef **)(DerivedStorage + 672);
    do
    {
      if (*v3)
      {
        CFRelease(*v3);
        *v3 = 0;
      }
      ++v3;
      --v2;
    }
    while (v2);
    v4 = *(_QWORD *)(v1 + 664);
    if (v4)
    {
      v5 = *(CFTypeRef **)(v1 + 680);
      do
      {
        if (*v5)
        {
          CFRelease(*v5);
          *v5 = 0;
        }
        ++v5;
        --v4;
      }
      while (v4);
      v6 = *(_QWORD *)(v1 + 664);
      if (v6)
      {
        v7 = *(CFTypeRef **)(v1 + 688);
        do
        {
          if (*v7)
          {
            CFRelease(*v7);
            *v7 = 0;
          }
          ++v7;
          --v6;
        }
        while (v6);
      }
    }
  }
  free(*(void **)(v1 + 672));
  *(_QWORD *)(v1 + 672) = 0;
  free(*(void **)(v1 + 680));
  *(_QWORD *)(v1 + 680) = 0;
  free(*(void **)(v1 + 688));
  *(_QWORD *)(v1 + 688) = 0;
  *(_QWORD *)(v1 + 664) = 0;
}

CFIndex __openglVideoCompositor_flush_block_invoke(uint64_t a1)
{
  CFIndex result;

  result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 600));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFIndex __openglVideoCompositor_flush_block_invoke_2(uint64_t a1)
{
  CFIndex result;

  result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 600));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ovc_copyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  unsigned int v5;
  CFIndex v6;
  void **v7;
  double v8;
  int valuePtr;
  void *values[5];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  void *keys[5];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v27 = 0;
    v26 = 0u;
    v25 = 0u;
    v24 = 0u;
    v23 = 0u;
    v22 = 0u;
    v21 = 0u;
    v20 = 0u;
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    v8 = 0.0;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    valuePtr = *(_DWORD *)(DerivedStorage + 816) - *(_DWORD *)(DerivedStorage + 756);
    keys[0] = CFSTR("NumberOfSinglePassCompositions");
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    keys[1] = CFSTR("NumberOfMultiPassCompositions");
    values[1] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 756));
    keys[2] = CFSTR("NumberOfSourceFramesPassedThrough");
    values[2] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 744));
    keys[3] = CFSTR("TotalNumberOfLayers");
    values[3] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 748));
    keys[4] = CFSTR("TotalNumberOfPreProcessedLayers");
    values[4] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 752));
    if (*(int *)(DerivedStorage + 784) < 1)
    {
      v5 = 5;
    }
    else
    {
      v8 = (float)((float)*(uint64_t *)(DerivedStorage + 760) / 1000000.0);
      *(_QWORD *)&v20 = 0x1E3004E18;
      *(_QWORD *)&v11 = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      v8 = (float)((float)*(uint64_t *)(DerivedStorage + 768) / 1000000.0);
      *((_QWORD *)&v20 + 1) = 0x1E3004E38;
      *((_QWORD *)&v11 + 1) = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      v8 = (float)((float)*(uint64_t *)(DerivedStorage + 776) / (float)((float)*(int *)(DerivedStorage + 784) * 1000000.0));
      *(_QWORD *)&v21 = 0x1E3004E58;
      *(_QWORD *)&v12 = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      v5 = 8;
    }
    if (*(int *)(DerivedStorage + 816) >= 1)
    {
      v8 = (float)((float)*(uint64_t *)(DerivedStorage + 792) / 1000000.0);
      keys[v5] = CFSTR("MinProcessingTime");
      values[v5] = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      v8 = (float)((float)*(uint64_t *)(DerivedStorage + 800) / 1000000.0);
      keys[v5 + 1] = CFSTR("MaxProcessingTime");
      values[v5 + 1] = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      v8 = (float)((float)*(uint64_t *)(DerivedStorage + 808) / (float)((float)*(int *)(DerivedStorage + 816) * 1000000.0));
      keys[v5 | 2] = CFSTR("AverageProcessingTime");
      values[v5 | 2] = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
      v5 += 3;
    }
    v6 = v5;
    v7 = values;
    *a2 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, v6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    do
    {
      if (*v7)
        CFRelease(*v7);
      ++v7;
      --v6;
    }
    while (v6);
  }
}

uint64_t ovc_createPixelBufferAttributesDictionary(const __CFAllocator *a1, _QWORD *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  CFMutableArrayRef v6;
  __CFArray *v7;
  uint64_t v8;
  const __CFAllocator *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  qmemcpy(v14, "v024f024ARGB", 12);
  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return 4294954510;
  v5 = Mutable;
  v6 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (v6)
  {
    v7 = v6;
    v8 = 0;
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v10 = CFNumberCreate(v9, kCFNumberSInt32Type, (char *)v14 + v8);
      if (!v10)
      {
        CFRelease(v5);
        PixelBufferAttributesWithIOSurfaceSupport = 4294954510;
        v5 = v7;
        goto LABEL_11;
      }
      v11 = v10;
      CFArrayAppendValue(v7, v10);
      CFRelease(v11);
      v8 += 4;
    }
    while (v8 != 12);
    CFDictionaryAddValue(v5, (const void *)*MEMORY[0x1E0CA9040], v7);
    CFRelease(v7);
    FigGetAlignmentForIOSurfaceOutput();
    PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if (!(_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
      *a2 = 0;
  }
  else
  {
    PixelBufferAttributesWithIOSurfaceSupport = 4294954510;
  }
LABEL_11:
  CFRelease(v5);
  return PixelBufferAttributesWithIOSurfaceSupport;
}

void ovc_CFDictionarySetInt(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t openglVideoCompositor_setOpenGLContextPriority()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return OVCSetOpenGLContextPriority(*(void **)DerivedStorage, *(_BYTE *)(DerivedStorage + 624) == 0);
}

uint64_t openglVideoCompositor_setDispatchQueueClientPidAndThreadPriority()
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 632))
    FigDispatchQueueSetPriorityAndClientPID();
  result = *(_QWORD *)(DerivedStorage + 640);
  if (result)
    return FigDispatchQueueSetPriorityAndClientPID();
  return result;
}

uint64_t openglVideoCompositor_RenderFrame(const void *a1, int a2, uint64_t a3, __CVBuffer **a4, uint64_t a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, CGFloat a18)
{
  NSObject *v11;
  int v12;
  uint64_t v13;
  const __CFAllocator *v14;
  __CFDictionary *Mutable;
  const __CFAllocator *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  __CFArray *v19;
  __CFArray *v20;
  char v21;
  int appended;
  CGFloat *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  const void *v30;
  const void *v31;
  float v32;
  float v33;
  double v34;
  const __CFArray *v35;
  CFTypeID v36;
  uint64_t v37;
  CFIndex v38;
  CGSize v39;
  char *v40;
  const void *ValueAtIndex;
  CFTypeID TypeID;
  const void *v43;
  CFTypeID v44;
  uint64_t v45;
  __CVBuffer *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  const void *v50;
  _OWORD *v51;
  CFTypeID v52;
  __int128 v53;
  __int128 v54;
  const __CFNumber *v55;
  CFTypeID v56;
  const void *v57;
  CFTypeID v58;
  CFTypeRef v59;
  CFTypeRef v60;
  size_t Width;
  size_t Height;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  CFTypeRef v75;
  const __CFArray *v76;
  CFTypeID v77;
  __int128 v78;
  __int128 v79;
  const void *v80;
  CFTypeID v81;
  const void *v82;
  CFTypeID v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  float v89;
  CGFloat x;
  CGFloat y;
  CGFloat v92;
  CGFloat v93;
  __CVBuffer *v94;
  __int128 v95;
  float v96;
  float v97;
  uint64_t v98;
  void *v99;
  void *v100;
  void *v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float *v109;
  __CVBuffer *v110;
  const __CFAllocator *v111;
  CVReturn v112;
  OSType v113;
  _OWORD *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  BOOL v120;
  int v121;
  __CVBuffer **v122;
  signed int PixelFormatType;
  int v124;
  CFTypeRef v126;
  __CVBuffer *v127;
  const void *v128;
  CFStringRef *v129;
  const void *v130;
  CFStringRef *v131;
  const void *v132;
  CFStringRef *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  __CVBuffer *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  const void *v143;
  const void *v144;
  const __CFArray *v145;
  CFTypeID v146;
  CFIndex v147;
  __int128 *v148;
  const __CFNumber *v149;
  CFTypeID v150;
  __CVBuffer *v151;
  uint64_t v152;
  size_t PlaneCount;
  uint64_t v154;
  size_t i;
  GLsizei WidthOfPlane;
  GLsizei HeightOfPlane;
  GLsizei v158;
  size_t v159;
  size_t v160;
  size_t v161;
  uint64_t v162;
  int ColorMatrixForPixelFormatConversion;
  int32x2_t v164;
  float v165;
  int v166;
  __CVBuffer *v167;
  size_t v168;
  size_t v169;
  uint64_t v170;
  uint64_t v171;
  size_t v172;
  size_t v173;
  int v174;
  double *v175;
  unint64_t v176;
  __CVBuffer *v177;
  double v178;
  double v179;
  double v180;
  double v181;
  size_t v182;
  size_t v183;
  OSType v184;
  size_t v185;
  float v186;
  GLenum v187;
  GLenum v188;
  GLenum v189;
  int v190;
  uint64_t v191;
  OSType v192;
  CFTypeRef v193;
  int v194;
  GLuint *v195;
  int v196;
  int v197;
  GLint v198;
  GLint v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  size_t v209;
  __CVBuffer *v210;
  uint64_t v211;
  size_t v212;
  size_t v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  CVPixelBufferRef v219;
  void **v220;
  __CFArray *v221;
  const void **v222;
  uint64_t v223;
  const void **v224;
  NSObject *v225;
  CGFloat v226;
  void *v227;
  uint64_t v228;
  int v229;
  NSObject *v230;
  uint64_t v231;
  uint64_t v232;
  NSObject *v233;
  NSObject *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  NSObject *v239;
  unint64_t v240;
  uint64_t v241;
  int v243;
  double *v244;
  __int128 v245;
  __int128 v246;
  const void *v247;
  uint64_t v248;
  uint64_t v249;
  CGFloat v250;
  CGFloat v251;
  CGFloat v252;
  CGFloat v253;
  unint64_t v254;
  unint64_t v255;
  int v256;
  uint64_t v257;
  const void *v258;
  __CVBuffer *v259;
  size_t v260;
  size_t v261;
  int v262;
  uint64_t v263;
  const void *v264;
  const void *v265;
  uint64_t v266;
  const void *v267;
  char v269;
  uint64_t UpTimeNanoseconds;
  CFTypeRef v272;
  CFTypeRef v273;
  const __CFString *v274;
  const __CFString *v275;
  const void *v276;
  int64_t count;
  void *v278;
  char *v279;
  int v280;
  size_t v281;
  CFTypeRef value;
  CFTypeRef valuea;
  const __CFString *key;
  int theDicta;
  uint64_t DerivedStorage;
  _QWORD v289[8];
  GLfloat *v290;
  CGAffineTransform v291;
  _QWORD block[6];
  CGAffineTransform v293;
  CVPixelBufferRef pixelBufferOut;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  int v298;
  __int16 v299;
  uint64_t v300;
  CGRect valuePtr;
  __int128 v302;
  CGAffineTransform ptr;
  CGAffineTransform v304;
  CVPixelBufferRef v305;
  uint64_t v306;
  __CFArray *v307;
  CGAffineTransform t1;
  uint64_t v309;
  CGRect v310;
  CGRect v311;
  CGRect v312;
  CGRect v313;
  CGRect v314;
  CGRect v315;

  v309 = *MEMORY[0x1E0C80C00];
  v295 = 0;
  v296 = &v295;
  v297 = 0x2020000000;
  v298 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  pixelBufferOut = 0;
  v302 = xmmword_1932FA180;
  memset(&v293, 0, sizeof(v293));
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v11 = *(NSObject **)(DerivedStorage + 632);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __openglVideoCompositor_RenderFrame_block_invoke;
  block[3] = &unk_1E2F87F08;
  block[4] = &v295;
  block[5] = DerivedStorage;
  dispatch_sync(v11, block);
  if (*((_DWORD *)v296 + 6))
    goto LABEL_362;
  if (*(double *)(DerivedStorage + 424) <= 0.0 || *(double *)(DerivedStorage + 432) <= 0.0)
  {
    ColorMatrixForPixelFormatConversion = FigSignalErrorAt();
    v126 = 0;
    v272 = 0;
    v273 = 0;
    valuea = 0;
    v279 = 0;
    goto LABEL_357;
  }
  v12 = OVCSetCurrentOpenGLContext(*(_QWORD *)DerivedStorage);
  *((_DWORD *)v296 + 6) = v12;
  if (v12)
  {
LABEL_362:
    v126 = 0;
    v272 = 0;
    v273 = 0;
    valuea = 0;
    v279 = 0;
    goto LABEL_316;
  }
  FigOVCGLObjectCacheWrapperFlushCacheEntriesForDeletedBackings(*(_QWORD *)(DerivedStorage + 584));
  if (*(_QWORD *)(DerivedStorage + 568))
    goto LABEL_27;
  v13 = CMBaseObjectGetDerivedStorage();
  v304.a = 0.0;
  t1.a = 0.0;
  ptr.a = 0.0;
  v300 = 0;
  v299 = 0;
  v14 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  LODWORD(valuePtr.origin.x) = *(_QWORD *)(v13 + 408);
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v17 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA90E0], v17);
  CFRelease(v17);
  LODWORD(v290) = *(_QWORD *)(v13 + 416);
  v18 = CFNumberCreate(v16, kCFNumberSInt32Type, &v290);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FD8], v18);
  CFRelease(v18);
  v19 = CFArrayCreateMutable(v16, 0, MEMORY[0x1E0C9B378]);
  v20 = v19;
  if (v19)
  {
    v21 = *(_BYTE *)(v13 + 521);
    if (v21)
    {
      appended = ovc_appendIntToArray(v19, 875704438);
      if (appended)
        goto LABEL_16;
      v21 = 1;
    }
    *(_BYTE *)(v13 + 512) = v21;
    appended = ovc_appendIntToArray(v20, 1111970369);
    if (!appended)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v20);
      FigGetAlignmentForIOSurfaceOutput();
      ovc_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CA9048], SHIDWORD(v300));
      ovc_CFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CA8F68], v300);
      appended = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
      if (!appended)
      {
        appended = VTCreatePixelBufferPoolAttributesWithName();
        if (!appended)
        {
          CFGetAllocator(a1);
          v23 = (CGFloat *)(v13 + 568);
          appended = VTBuildPixelBufferPools2();
          if (!appended)
          {
            appended = 0;
            if (!*(_QWORD *)v23)
            {
              *v23 = ptr.a;
              LOBYTE(v299) = HIBYTE(v299);
              ptr.a = 0.0;
            }
          }
        }
      }
    }
  }
  else
  {
    appended = FigSignalErrorAt();
  }
LABEL_16:
  if (*(_QWORD *)&v304.a)
    CFRelease(*(CFTypeRef *)&v304.a);
  if (Mutable)
    CFRelease(Mutable);
  if (v20)
    CFRelease(v20);
  if (*(_QWORD *)&ptr.a)
    CFRelease(*(CFTypeRef *)&ptr.a);
  if (*(_QWORD *)&t1.a)
    CFRelease(*(CFTypeRef *)&t1.a);
  *((_DWORD *)v296 + 6) = appended;
  if (appended)
    goto LABEL_362;
LABEL_27:
  v24 = CMBaseObjectGetDerivedStorage();
  t1.a = 0.0;
  *(_QWORD *)&t1.b = &t1;
  *(_QWORD *)&t1.c = 0x2020000000;
  t1.d = 0.0;
  v25 = *(NSObject **)(v24 + 640);
  *(_QWORD *)&v304.a = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v304.b = 3221225472;
  *(_QWORD *)&v304.c = __ovc_adjustMaxInFlightBuffers_block_invoke;
  *(_QWORD *)&v304.d = &unk_1E2F87F08;
  *(_QWORD *)&v304.tx = &t1;
  *(_QWORD *)&v304.ty = v24;
  dispatch_sync(v25, &v304);
  v26 = 0;
  if (!*(_BYTE *)(v24 + 592))
  {
    v27 = *(_QWORD *)(*(_QWORD *)&t1.b + 24);
    v28 = 1;
    if (v27 >= 0)
      v28 = v27 + 1;
    v29 = v27 < 3;
    v26 = 3;
    if (v29)
      v26 = v28;
  }
  *(_QWORD *)(*(_QWORD *)&t1.b + 24) = v26;
  if (v26 < *(int *)(v24 + 596))
    *(_DWORD *)(v24 + 596) = v26;
  _Block_object_dispose(&t1, 8);
  *((_DWORD *)v296 + 6) = 0;
  v30 = CFDictionaryGetValue(a8, CFSTR("ContainsTweening"));
  v31 = (const void *)*MEMORY[0x1E0C9AE50];
  v32 = 0.0;
  if ((const void *)*MEMORY[0x1E0C9AE50] == v30)
  {
    *(_OWORD *)&v304.a = *(_OWORD *)a17;
    v304.c = *(CGFloat *)(a17 + 16);
    FigVideoCompositionInstructionGetNormalizedTime(a8, (CMTime *)&v304);
    v32 = v33;
  }
  CGAffineTransformMakeTranslation(&v293, -1.0, -1.0);
  v34 = *(float *)(DerivedStorage + 516) + *(float *)(DerivedStorage + 516);
  t1 = v293;
  CGAffineTransformScale(&v304, &t1, v34 / (double)*(unint64_t *)(DerivedStorage + 408), v34 / (double)*(unint64_t *)(DerivedStorage + 416));
  v293 = v304;
  v35 = (const __CFArray *)CFDictionaryGetValue(a8, CFSTR("LayerStack"));
  if (v35 && (v36 = CFArrayGetTypeID(), v36 == CFGetTypeID(v35)))
  {
    count = CFArrayGetCount(v35);
    v279 = (char *)malloc_type_calloc(count, 0xD8uLL, 0x102004000196C1CuLL);
    if (!v279)
    {
      v126 = 0;
      v272 = 0;
      v273 = 0;
      valuea = 0;
      v279 = 0;
      *((_DWORD *)v296 + 6) = -12786;
      goto LABEL_316;
    }
    if (count >= 1)
    {
      v276 = v31;
      v37 = 0;
      v38 = 0;
      v275 = (const __CFString *)*MEMORY[0x1E0CA8E68];
      v39 = (CGSize)0;
      v274 = (const __CFString *)*MEMORY[0x1E0CA8D50];
      v40 = v279;
      while (1)
      {
        LODWORD(v290) = 0;
        valuePtr.origin = (CGPoint)v39;
        valuePtr.size = v39;
        v300 = 0;
        value = (CFTypeRef)v38;
        ValueAtIndex = CFArrayGetValueAtIndex(v35, v38);
        if (!ValueAtIndex)
          break;
        TypeID = CFDictionaryGetTypeID();
        if (TypeID != CFGetTypeID(ValueAtIndex))
          break;
        v43 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("SourceVideoTrackID"));
        if (!v43)
          break;
        v44 = CFNumberGetTypeID();
        if (v44 != CFGetTypeID(v43))
          break;
        CFNumberGetValue((CFNumberRef)v43, kCFNumberSInt32Type, &v290);
        v39 = (CGSize)0;
        if (a2 < 1)
          break;
        v45 = 0;
        while (*(_DWORD *)(a3 + 4 * v45) != (_DWORD)v290)
        {
          if (a2 == ++v45)
            goto LABEL_127;
        }
        v46 = a4[v45];
        *(_QWORD *)v40 = v46;
        *((_QWORD *)v40 + 1) = v45;
        if (v46)
        {
          v47 = MEMORY[0x1E0C9BAA8];
          v48 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
          *(_OWORD *)(v40 + 24) = *MEMORY[0x1E0C9BAA8];
          *(_OWORD *)(v40 + 40) = v48;
          *(_OWORD *)(v40 + 56) = *(_OWORD *)(v47 + 32);
          *((_DWORD *)v40 + 4) = 1065353216;
          v49 = *(_OWORD *)(MEMORY[0x1E0C9D5E0] + 16);
          *((_OWORD *)v40 + 5) = *MEMORY[0x1E0C9D5E0];
          *((_OWORD *)v40 + 6) = v49;
          v50 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("ConstantAffineMatrix"));
          v51 = v40 + 24;
          if (v50)
          {
            v52 = CFArrayGetTypeID();
            if (v52 != CFGetTypeID(v50))
              break;
            FigGetCGAffineTransformFrom3x2MatrixArray((const __CFArray *)v50, &v304.a);
            v54 = *(_OWORD *)&v304.c;
            v53 = *(_OWORD *)&v304.tx;
            *v51 = *(_OWORD *)&v304.a;
            *(_OWORD *)(v40 + 40) = v54;
            *(_OWORD *)(v40 + 56) = v53;
          }
          v55 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("ConstantOpacity"));
          if (v55)
          {
            v56 = CFNumberGetTypeID();
            if (v56 == CFGetTypeID(v55))
            {
              LODWORD(v304.a) = 0;
              CFNumberGetValue(v55, kCFNumberFloat32Type, &v304);
              *((_DWORD *)v40 + 4) = LODWORD(v304.a);
            }
          }
          v57 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("ConstantCropRectangle"));
          if (v57)
          {
            v58 = CFDictionaryGetTypeID();
            if (v58 == CFGetTypeID(v57)
              && !CGRectMakeWithDictionaryRepresentation((CFDictionaryRef)v57, (CGRect *)(v40 + 80)))
            {
              break;
            }
          }
          if (v276 == v30)
          {
            v76 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("TweenedAffineMatrix"));
            if (v76)
            {
              v77 = CFArrayGetTypeID();
              if (v77 == CFGetTypeID(v76))
              {
                FigVideoCompositionInstructionEvaluateTweenedAffineMatrix(v76, (uint64_t)&v304, v32);
                v79 = *(_OWORD *)&v304.c;
                v78 = *(_OWORD *)&v304.tx;
                *v51 = *(_OWORD *)&v304.a;
                *(_OWORD *)(v40 + 40) = v79;
                *(_OWORD *)(v40 + 56) = v78;
                v40[72] = 1;
              }
            }
            v80 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("TweenedOpacity"));
            if (v80)
            {
              v81 = CFArrayGetTypeID();
              if (v81 == CFGetTypeID(v80))
                *((float *)v40 + 4) = FigVideoCompositionInstructionEvaluateTweenedOpacity(v80, v32);
            }
            v82 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, CFSTR("TweenedCropRectangle"));
            if (v82)
            {
              v83 = CFArrayGetTypeID();
              if (v83 == CFGetTypeID(v82))
              {
                FigVideoCompositionInstructionEvaluateTweenedCropRectangle((uint64_t)v82, v32);
                *((_QWORD *)v40 + 10) = v84;
                *((_QWORD *)v40 + 11) = v85;
                *((_QWORD *)v40 + 12) = v86;
                *((_QWORD *)v40 + 13) = v87;
              }
            }
          }
          v59 = CVBufferCopyAttachment(*(CVBufferRef *)v40, v275, 0);
          FigVideoCompositorUtilityGetPixelAspectRatio((CFTypeID)v59, (_DWORD *)&v300 + 1, &v300);
          if (v59)
            CFRelease(v59);
          v60 = CVBufferCopyAttachment(*(CVBufferRef *)v40, v274, 0);
          Width = CVPixelBufferGetWidth(*(CVPixelBufferRef *)v40);
          Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)v40);
          bvc_getCleanApertureRect(v60, Width, Height, &valuePtr.origin.x);
          *((_DWORD *)v296 + 6) = v63;
          if (v60)
          {
            CFRelease(v60);
            v63 = *((_DWORD *)v296 + 6);
          }
          if (v63)
            goto LABEL_128;
          v314.origin.x = *((double *)v40 + 10) + valuePtr.origin.x;
          v314.origin.y = *((double *)v40 + 11) + valuePtr.origin.y;
          v314.size.width = *((CGFloat *)v40 + 12);
          v314.size.height = *((CGFloat *)v40 + 13);
          *(CGRect *)(v40 + 112) = CGRectIntersection(valuePtr, v314);
          v64 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&t1.a = *v51;
          *(_OWORD *)&t1.c = v64;
          *(_OWORD *)&t1.tx = *(_OWORD *)(v40 + 56);
          CGAffineTransformScale(&v304, &t1, (double)SHIDWORD(v300) / (double)(int)v300, 1.0);
          v66 = *(_OWORD *)&v304.c;
          v65 = *(_OWORD *)&v304.tx;
          *v51 = *(_OWORD *)&v304.a;
          *(_OWORD *)(v40 + 40) = v66;
          *(_OWORD *)(v40 + 56) = v65;
          v67 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&t1.a = *v51;
          *(_OWORD *)&t1.c = v67;
          *(_OWORD *)&t1.tx = *(_OWORD *)(v40 + 56);
          CGAffineTransformTranslate(&v304, &t1, -valuePtr.origin.x, -valuePtr.origin.y);
          v69 = *(_OWORD *)&v304.c;
          v68 = *(_OWORD *)&v304.tx;
          *v51 = *(_OWORD *)&v304.a;
          *(_OWORD *)(v40 + 40) = v69;
          *(_OWORD *)(v40 + 56) = v68;
          v70 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&t1.a = *v51;
          *(_OWORD *)&t1.c = v70;
          *(_OWORD *)&t1.tx = *(_OWORD *)(v40 + 56);
          v71 = *(_OWORD *)(DerivedStorage + 456);
          *(_OWORD *)&ptr.a = *(_OWORD *)(DerivedStorage + 440);
          *(_OWORD *)&ptr.c = v71;
          *(_OWORD *)&ptr.tx = *(_OWORD *)(DerivedStorage + 472);
          CGAffineTransformConcat(&v304, &t1, &ptr);
          v73 = *(_OWORD *)&v304.c;
          v72 = *(_OWORD *)&v304.tx;
          *v51 = *(_OWORD *)&v304.a;
          *(_OWORD *)(v40 + 40) = v73;
          *(_OWORD *)(v40 + 56) = v72;
          v74 = *(_OWORD *)(v40 + 40);
          *(_OWORD *)&v304.a = *v51;
          *(_OWORD *)&v304.c = v74;
          *(_OWORD *)&v304.tx = *(_OWORD *)(v40 + 56);
          if (OVCIsAffineTransformInvertible(&v304.a))
          {
            if (*(_BYTE *)(DerivedStorage + 520) && !v40[72])
            {
              memset(&t1, 0, 32);
              bvc_getCleanApertureRect(*(const void **)(DerivedStorage + 488), *(_QWORD *)(DerivedStorage + 408), *(_QWORD *)(DerivedStorage + 416), &t1.a);
              *((_DWORD *)v296 + 6) = v88;
              if (v88)
                goto LABEL_128;
              v89 = *(float *)(DerivedStorage + 516);
              CGAffineTransformMakeScale(&v291, (float)(1.0 / v89), (float)(1.0 / v89));
              v310.origin.x = t1.a;
              v310.origin.y = t1.b;
              v310.size.width = t1.c;
              v310.size.height = t1.d;
              v311 = CGRectApplyAffineTransform(v310, &v291);
              x = v311.origin.x;
              y = v311.origin.y;
              v92 = v311.size.width;
              v93 = v311.size.height;
              t1.a = v311.origin.x;
              t1.b = v311.origin.y;
              t1.c = v311.size.width;
              t1.d = v311.size.height;
              v94 = *(__CVBuffer **)v40;
              v312 = *(CGRect *)(v40 + 112);
              v95 = *(_OWORD *)(v40 + 40);
              *(_OWORD *)&v304.a = *v51;
              *(_OWORD *)&v304.c = v95;
              *(_OWORD *)&v304.tx = *(_OWORD *)(v40 + 56);
              ovc_getPrescalingParameters(v94, &v304, v40 + 208, (double *)v40 + 18, (unint64_t *)v40 + 22, (double *)v40 + 14, (size_t *)v40 + 24, v40 + 24, v312.origin.x, v312.origin.y, v312.size.width, v312.size.height, x, y, v92, v93, v89);
              *((_DWORD *)v296 + 6) = 0;
            }
            else
            {
              *((_QWORD *)v40 + 24) = CVPixelBufferGetWidth(*(CVPixelBufferRef *)v40);
              *((_QWORD *)v40 + 25) = CVPixelBufferGetHeight(*(CVPixelBufferRef *)v40);
            }
            v75 = value;
            v96 = *((float *)v40 + 4);
            v97 = 0.0;
            if (v96 <= 0.0 || (v97 = 1.0, v96 >= 1.0))
              *((float *)v40 + 4) = v97;
            ++v37;
            v40 += 216;
          }
          else
          {
            v75 = value;
          }
          v39 = (CGSize)0;
        }
        else
        {
          v75 = value;
        }
        v38 = (CFIndex)v75 + 1;
        if (v38 == count)
          goto LABEL_91;
      }
LABEL_127:
      *((_DWORD *)v296 + 6) = FigSignalErrorAt();
      goto LABEL_128;
    }
    v37 = 0;
  }
  else
  {
    count = 0;
    v37 = 0;
    v279 = 0;
  }
LABEL_91:
  v98 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 520))
  {
    if (count != *(_QWORD *)(DerivedStorage + 664))
    {
      ovc_releaseLayerArrays();
      v99 = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL);
      *(_QWORD *)(DerivedStorage + 672) = v99;
      if (!v99
        || (v100 = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL), (*(_QWORD *)(DerivedStorage + 688) = v100) == 0)
        || (v101 = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL), (*(_QWORD *)(DerivedStorage + 680) = v101) == 0))
      {
        FigSignalErrorAt();
        v126 = 0;
        v272 = 0;
        v273 = 0;
        valuea = 0;
        goto LABEL_316;
      }
      v98 = DerivedStorage;
      *(_QWORD *)(DerivedStorage + 664) = count;
    }
    v103 = *(_QWORD *)(v98 + 8);
    v102 = (_QWORD *)(v98 + 8);
    if (!v103)
    {
      v104 = OVCBicubicPrescalerCreate(0, *(_QWORD *)(DerivedStorage + 576), *(const void **)(DerivedStorage + 584), v102);
      *((_DWORD *)v296 + 6) = v104;
      if (v104)
        goto LABEL_128;
    }
  }
  else
  {
    v105 = *(char **)(DerivedStorage + 8);
    if (v105)
    {
      OVCBicubicPrescalerDestroy(v105);
      *(_QWORD *)(DerivedStorage + 8) = 0;
      ovc_releaseLayerArrays();
    }
  }
  if (v37 < 1)
    goto LABEL_106;
  v106 = 0;
  v107 = 0;
  v108 = v37;
  while (1)
  {
    v109 = (float *)&v279[v106];
    if (*(float *)&v279[v106 + 16] != 0.0)
      break;
    v107 += 8;
    v106 += 216;
    if (!--v108)
      goto LABEL_106;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)v109);
  v124 = 0;
  if (PixelFormatType > 875704421)
  {
    if (PixelFormatType == 875704422 || PixelFormatType == 875704438)
      goto LABEL_336;
    if (PixelFormatType != 1111970369)
      goto LABEL_333;
    goto LABEL_335;
  }
  if (PixelFormatType == 32)
  {
LABEL_335:
    v124 = 1;
    goto LABEL_336;
  }
  if (PixelFormatType == 846624121)
  {
LABEL_336:
    *((_DWORD *)v296 + 6) = 0;
    goto LABEL_337;
  }
LABEL_333:
  v243 = FigSignalErrorAt();
  *((_DWORD *)v296 + 6) = v243;
  if (v243)
    goto LABEL_128;
  v124 = 0;
LABEL_337:
  if (!v124 && v109[4] == 1.0)
  {
    v244 = (double *)&v279[v106];
    v245 = *(_OWORD *)&v279[v106 + 24];
    v246 = *(_OWORD *)&v279[v106 + 56];
    *(_OWORD *)&v304.c = *(_OWORD *)&v279[v106 + 40];
    *(_OWORD *)&v304.tx = v246;
    *(_OWORD *)&v304.a = v245;
    if (CGAffineTransformIsIdentity(&v304))
    {
      v247 = *(const void **)(DerivedStorage + 488);
      v249 = *((_QWORD *)v244 + 24);
      v248 = *((_QWORD *)v244 + 25);
      v250 = v244[14];
      v251 = v244[15];
      v252 = v244[16];
      v253 = v244[17];
      v255 = *(_QWORD *)(DerivedStorage + 408);
      v254 = *(_QWORD *)(DerivedStorage + 416);
      memset(&v304, 0, 32);
      bvc_getCleanApertureRect(v247, v255, v254, &v304.a);
      if (!v256 && v249 == v255 && v248 == v254)
      {
        v315.origin.x = v304.a;
        v315.origin.y = v304.b;
        v315.size.width = v304.c;
        v315.size.height = v304.d;
        v313.origin.x = v250;
        v313.origin.y = v251;
        v313.size.width = v252;
        v313.size.height = v253;
        if (CGRectEqualToRect(v313, v315))
        {
          if (v279[v106 + 208])
          {
            v257 = DerivedStorage;
            v258 = *(const void **)(*(_QWORD *)(DerivedStorage + 680) + v107);
            if (v258)
            {
              CFRelease(v258);
              v257 = DerivedStorage;
              *(_QWORD *)(*(_QWORD *)(DerivedStorage + 680) + v107) = 0;
            }
            ++*(_DWORD *)(v257 + 752);
            v259 = *(__CVBuffer **)&v279[v106];
            v260 = CVPixelBufferGetWidth(v259);
            v261 = CVPixelBufferGetHeight(*(CVPixelBufferRef *)&v279[v106]);
            v262 = ovc_preScaleBuffer(v259, *((_QWORD *)v244 + 24), *((_QWORD *)v244 + 25), *(_QWORD *)(DerivedStorage + 8), (CVPixelBufferPoolRef *)(*(_QWORD *)(DerivedStorage + 672) + v107), (CVPixelBufferRef *)(*(_QWORD *)(DerivedStorage + 680) + v107), 0.0, 0.0, (double)v260, (double)v261);
            *((_DWORD *)v296 + 6) = v262;
            if (v262)
              goto LABEL_128;
            v263 = *(_QWORD *)(DerivedStorage + 688);
            v264 = *(const void **)(v263 + v107);
            v265 = *(const void **)&v279[v106];
            *(_QWORD *)(v263 + v107) = v265;
            if (v265)
              CFRetain(v265);
            if (v264)
              CFRelease(v264);
            v266 = DerivedStorage;
            v267 = *(const void **)(*(_QWORD *)(DerivedStorage + 680) + v107);
            *(_QWORD *)&v279[v106] = v267;
          }
          else
          {
            v267 = *(const void **)&v279[v106];
            v266 = DerivedStorage;
          }
          ++*(_DWORD *)(v266 + 744);
          v110 = (__CVBuffer *)CFRetain(v267);
          v269 = 0;
          pixelBufferOut = v110;
          goto LABEL_107;
        }
      }
    }
  }
LABEL_106:
  v269 = 1;
  v110 = pixelBufferOut;
LABEL_107:
  if (v110)
  {
    v272 = 0;
    v273 = 0;
    valuea = 0;
    goto LABEL_313;
  }
  v111 = CFGetAllocator(a1);
  v112 = CVPixelBufferPoolCreatePixelBuffer(v111, *(CVPixelBufferPoolRef *)(DerivedStorage + 568), &pixelBufferOut);
  *((_DWORD *)v296 + 6) = v112;
  if (!v112)
  {
    v113 = CVPixelBufferGetPixelFormatType(pixelBufferOut);
    if (v37 < 1)
    {
      LOBYTE(v280) = 0;
      if (a2 < 1)
      {
        v127 = 0;
        goto LABEL_133;
      }
      v122 = a4;
    }
    else
    {
      v280 = 0;
      v114 = v279 + 24;
      v115 = v37;
      do
      {
        v116 = *v114;
        v117 = v114[2];
        *(_OWORD *)&t1.c = v114[1];
        *(_OWORD *)&t1.tx = v117;
        *(_OWORD *)&t1.a = v116;
        ptr = v293;
        CGAffineTransformConcat(&v304, &t1, &ptr);
        v118 = *(_OWORD *)&v304.a;
        v119 = *(_OWORD *)&v304.tx;
        v114[1] = *(_OWORD *)&v304.c;
        v114[2] = v119;
        *v114 = v118;
        v120 = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)v114 - 3)) == 1111970369 && v113 == 875704438;
        v121 = v280;
        if (v120)
          v121 = 1;
        v280 = v121;
        v114 = (_OWORD *)((char *)v114 + 216);
        --v115;
      }
      while (v115);
      v122 = (__CVBuffer **)&v279[216 * v37 - 216];
    }
    v127 = *v122;
LABEL_133:
    v128 = *(const void **)(DerivedStorage + 528);
    v129 = (CFStringRef *)MEMORY[0x1E0CA8EE8];
    if (!v128 || (valuea = CFRetain(v128)) == 0)
    {
      valuea = CVBufferCopyAttachment(v127, *v129, 0);
      if (!valuea)
        valuea = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8F18]);
    }
    v130 = *(const void **)(DerivedStorage + 544);
    v131 = (CFStringRef *)MEMORY[0x1E0CA8D68];
    if (!v130 || (v273 = CFRetain(v130)) == 0)
    {
      v273 = CVBufferCopyAttachment(v127, *v131, 0);
      if (!v273)
        v273 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8D88]);
    }
    v132 = *(const void **)(DerivedStorage + 536);
    v133 = (CFStringRef *)MEMORY[0x1E0CA8E98];
    if (!v132 || (v272 = CFRetain(v132)) == 0)
    {
      v272 = CVBufferCopyAttachment(v127, *v133, 0);
      if (!v272)
        v272 = CFRetain((CFTypeRef)*MEMORY[0x1E0CA8EB0]);
    }
    key = *v129;
    CVBufferSetAttachment(pixelBufferOut, *v129, valuea, kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(pixelBufferOut, *v131, v273, kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(pixelBufferOut, *v133, v272, kCVAttachmentMode_ShouldPropagate);
    if (*(_BYTE *)(DerivedStorage + 520) && count >= 1)
    {
      v134 = count + 1;
      v135 = 216 * count;
      v136 = 8 * count - 8;
      do
      {
        v137 = &v279[v135];
        if (v279[v135 - 8])
        {
          v138 = (__CVBuffer *)*((_QWORD *)v137 - 27);
          if (v138 != *(__CVBuffer **)(*(_QWORD *)(DerivedStorage + 688) + v136))
          {
            v139 = *(_QWORD *)(DerivedStorage + 680);
            if (*(_QWORD *)(v139 + v136))
            {
              CFRelease(*(CFTypeRef *)(v139 + v136));
              v140 = DerivedStorage;
              *(_QWORD *)(*(_QWORD *)(DerivedStorage + 680) + v136) = 0;
              v138 = (__CVBuffer *)*((_QWORD *)v137 - 27);
              v139 = *(_QWORD *)(DerivedStorage + 680);
            }
            else
            {
              v140 = DerivedStorage;
            }
            ++*(_DWORD *)(v140 + 752);
            v141 = ovc_preScaleBuffer(v138, *(_QWORD *)&v279[v135 - 40], *(_QWORD *)&v279[v135 - 32], *(_QWORD *)(v140 + 8), (CVPixelBufferPoolRef *)(*(_QWORD *)(v140 + 672) + v136), (CVPixelBufferRef *)(v139 + v136), *(CGFloat *)&v279[v135 - 72], *(CGFloat *)&v279[v135 - 64], *(CGFloat *)&v279[v135 - 56], *(CGFloat *)&v279[v135 - 48]);
            *((_DWORD *)v296 + 6) = v141;
            if (v141)
              goto LABEL_315;
            v142 = *(_QWORD *)(DerivedStorage + 688);
            v143 = *(const void **)(v142 + v136);
            v144 = (const void *)*((_QWORD *)v137 - 27);
            *(_QWORD *)(v142 + v136) = v144;
            if (v144)
              CFRetain(v144);
            if (v143)
              CFRelease(v143);
          }
          *((_QWORD *)v137 - 27) = *(_QWORD *)(*(_QWORD *)(DerivedStorage + 680) + v136);
        }
        --v134;
        v135 -= 216;
        v136 -= 8;
      }
      while (v134 > 1);
    }
    v145 = (const __CFArray *)CFDictionaryGetValue(a8, CFSTR("BackgroundColorARGB"));
    if (v145)
    {
      v146 = CFArrayGetTypeID();
      if (v146 == CFGetTypeID(v145))
      {
        v147 = 0;
        v148 = &v302;
        do
        {
          v149 = (const __CFNumber *)CFArrayGetValueAtIndex(v145, v147);
          if (v149)
          {
            v150 = CFNumberGetTypeID();
            if (v150 == CFGetTypeID(v149))
              CFNumberGetValue(v149, kCFNumberFloat32Type, v148);
          }
          ++v147;
          v148 = (__int128 *)((char *)v148 + 4);
        }
        while (v147 != 4);
      }
    }
    if (*(_BYTE *)(DerivedStorage + 384))
    {
      v151 = pixelBufferOut;
      v152 = CMBaseObjectGetDerivedStorage();
      PlaneCount = CVPixelBufferGetPlaneCount(v151);
      if (PlaneCount <= 1)
        v154 = 1;
      else
        v154 = PlaneCount;
      *(_QWORD *)(v152 + 400) = v154;
      glDeleteFramebuffers(2, (const GLuint *)(v152 + 16));
      glDeleteTextures(2, (const GLuint *)(v152 + 388));
      *(_QWORD *)(v152 + 16) = 0;
      *(_QWORD *)(v152 + 388) = 0;
      if (*(_BYTE *)(v152 + 512))
      {
        glGenFramebuffers(v154, (GLuint *)(v152 + 16));
        glGenTextures(v154, (GLuint *)(v152 + 388));
      }
      for (i = 0; i != v154; ++i)
      {
        WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(v151, i);
        HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(v151, i);
        if (*(_BYTE *)(v152 + 512))
        {
          v158 = HeightOfPlane;
          v159 = v152 + 4 * i;
          glBindTexture(0xDE1u, *(_DWORD *)(v159 + 388));
          glTexParameteri(0xDE1u, 0x2802u, 33071);
          glTexParameteri(0xDE1u, 0x2803u, 33071);
          glTexParameteri(0xDE1u, 0x2800u, 9728);
          glTexParameteri(0xDE1u, 0x2801u, 9728);
          glTexImage2D(0xDE1u, 0, 6408, WidthOfPlane, v158, 0, 0x80E1u, 0x1401u, 0);
          glBindFramebuffer(0x8D40u, *(_DWORD *)(v159 + 16));
          glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, *(_DWORD *)(v159 + 388), 0);
        }
      }
      *(_BYTE *)(DerivedStorage + 384) = 0;
    }
    v160 = CVPixelBufferGetPlaneCount(pixelBufferOut);
    v161 = 0;
    if (v160 <= 1)
      v162 = 1;
    else
      v162 = v160;
    v278 = (void *)v162;
    theDicta = v113;
    while (1)
    {
      valuePtr.origin = (CGPoint)xmmword_1932FED60;
      v304.a = 0.0;
      ColorMatrixForPixelFormatConversion = ovc_getColorMatrixForPixelFormatConversion(1111970369, 0, v113, valuea, &v304);
      if (ColorMatrixForPixelFormatConversion)
      {
LABEL_356:
        v126 = 0;
LABEL_357:
        *((_DWORD *)v296 + 6) = ColorMatrixForPixelFormatConversion;
        goto LABEL_316;
      }
      v164 = (int32x2_t)vadd_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(*(_QWORD *)&v304.a + 16), *((float *)&v302 + 2)), **(float32x2_t **)&v304.a, *((float *)&v302 + 1)), *(float32x2_t *)(*(_QWORD *)&v304.a + 32), *((float *)&v302 + 3)), *(float32x2_t *)(*(_QWORD *)&v304.a + 48));
      v165 = *(float *)(*(_QWORD *)&v304.a + 56)
           + (float)((float)((float)(*((float *)&v302 + 2) * *(float *)(*(_QWORD *)&v304.a + 24))
                           + (float)(*((float *)&v302 + 1) * *(float *)(*(_QWORD *)&v304.a + 8)))
                   + (float)(*((float *)&v302 + 3) * *(float *)(*(_QWORD *)&v304.a + 40)));
      if (v113 == 875704438)
      {
        if (v161 == 1)
        {
          *(_QWORD *)&valuePtr.origin.x = __PAIR64__(LODWORD(v165), v164.u32[1]);
          LODWORD(valuePtr.origin.y) = v164.i32[1];
          goto LABEL_191;
        }
        if (!v161)
        {
          *(int32x2_t *)&valuePtr.origin.x = vdup_lane_s32(v164, 0);
          LODWORD(valuePtr.origin.y) = v164.i32[0];
          v165 = *(float *)v164.i32;
          goto LABEL_191;
        }
      }
      else if (v113 == 1111970369)
      {
        *(int32x2_t *)&valuePtr.origin.x = v164;
        *(float *)&valuePtr.origin.y = v165;
        LODWORD(v165) = v302;
LABEL_191:
        *((float *)&valuePtr.origin.y + 1) = v165;
        *((_DWORD *)v296 + 6) = 0;
        goto LABEL_193;
      }
      v166 = FigSignalErrorAt();
      *((_DWORD *)v296 + 6) = v166;
      if (v166)
        goto LABEL_315;
LABEL_193:
      v167 = pixelBufferOut;
      v281 = v161;
      if ((_BYTE)v280)
      {
        v168 = OVCCVPixelBufferGetWidthOfPlane(pixelBufferOut, v161);
        v169 = OVCCVPixelBufferGetHeightOfPlane(pixelBufferOut, v161);
        v170 = CMBaseObjectGetDerivedStorage();
        glBindFramebuffer(0x8D40u, *(_DWORD *)(v170 + 4 * v161 + 16));
        glEnable(0xBE2u);
        ColorMatrixForPixelFormatConversion = ovc_setupViewPortAndClear((uint64_t)a1, v168, v169, (GLfloat *)&valuePtr);
        if (ColorMatrixForPixelFormatConversion)
          goto LABEL_356;
        if (glCheckFramebufferStatus(0x8D40u) == 36053)
          goto LABEL_200;
      }
      else
      {
        v171 = CMBaseObjectGetDerivedStorage();
        v172 = OVCCVPixelBufferGetWidthOfPlane(v167, v161);
        v173 = OVCCVPixelBufferGetHeightOfPlane(v167, v161);
        glEnable(0xBE2u);
        ColorMatrixForPixelFormatConversion = OVCRegisterPixelBufferAsRenderTarget(*(void **)v171, *(_QWORD *)(v171 + 584), v167, v161);
        if (ColorMatrixForPixelFormatConversion)
          goto LABEL_356;
        ColorMatrixForPixelFormatConversion = ovc_setupViewPortAndClear((uint64_t)a1, v172, v173, (GLfloat *)&valuePtr);
        if (ColorMatrixForPixelFormatConversion)
          goto LABEL_356;
        if (glCheckFramebufferStatus(0x8D40u) == 36053)
        {
LABEL_200:
          *((_DWORD *)v296 + 6) = 0;
          goto LABEL_202;
        }
      }
      v174 = FigSignalErrorAt();
      *((_DWORD *)v296 + 6) = v174;
      if (v174)
        goto LABEL_315;
LABEL_202:
      if (count >= 1)
      {
        v175 = (double *)&v279[216 * count - 104];
        v176 = count + 1;
        while (2)
        {
          memset(&v304, 0, 36);
          v290 = 0;
          v177 = (__CVBuffer *)*((_QWORD *)v175 - 14);
          if (!v177 || *((float *)v175 - 24) < 0.002)
            goto LABEL_264;
          v179 = *v175;
          v178 = v175[1];
          v181 = v175[2];
          v180 = v175[3];
          v126 = CVBufferCopyAttachment(v177, key, 0);
          v182 = CVPixelBufferGetWidth(*((CVPixelBufferRef *)v175 - 14));
          v183 = CVPixelBufferGetHeight(*((CVPixelBufferRef *)v175 - 14));
          v184 = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)v175 - 14));
          v185 = CVPixelBufferGetPlaneCount(*((CVPixelBufferRef *)v175 - 14));
          if (theDicta == 1111970369)
          {
            v189 = 772;
          }
          else
          {
            if (theDicta != 875704438)
              goto LABEL_220;
            v186 = *((float *)v175 - 24);
            if (v184 == 875704422)
              goto LABEL_211;
            if (v184 != 1111970369)
            {
              if (v184 == 875704438)
              {
LABEL_211:
                if (v186 >= 0.998)
                {
                  v187 = 0;
                  v188 = 1;
                }
                else
                {
                  glBlendColor(0.0, 0.0, 0.0, v186);
                  v187 = 32772;
                  v188 = 32771;
                }
                glBlendFunc(v188, v187);
LABEL_219:
                glBlendEquation(0x8006u);
                *((_DWORD *)v296 + 6) = 0;
LABEL_221:
                v191 = CMBaseObjectGetDerivedStorage();
                v192 = CVPixelBufferGetPixelFormatType(*((CVPixelBufferRef *)v175 - 14));
                v193 = CVBufferCopyAttachment(*((CVBufferRef *)v175 - 14), key, 0);
                if (theDicta != 875704438)
                {
                  if (theDicta != 1111970369)
                    goto LABEL_243;
                  if (v192 == 875704422 || v192 == 875704438)
                  {
                    v194 = 0;
                    v195 = (GLuint *)(v191 + 60);
                  }
                  else
                  {
                    if (v192 == 1111970369)
                    {
                      v194 = 0;
                      v195 = (GLuint *)(v191 + 24);
                      goto LABEL_244;
                    }
LABEL_243:
                    v194 = FigSignalErrorAt();
                    v195 = 0;
                  }
                  goto LABEL_244;
                }
                switch(v192)
                {
                  case 0x34323066u:
                    if (v281 != 1)
                    {
                      if (v281)
                        goto LABEL_243;
LABEL_242:
                      v194 = 0;
                      v195 = (GLuint *)(v191 + 96);
                      goto LABEL_244;
                    }
                    break;
                  case 0x34323076u:
                    if (v281 != 1)
                    {
                      if (v281)
                        goto LABEL_243;
                      if (FigCFEqual())
                      {
                        v194 = 0;
                        v195 = (GLuint *)(v191 + 168);
                        goto LABEL_244;
                      }
                      goto LABEL_242;
                    }
                    if (FigCFEqual())
                    {
                      v194 = 0;
                      v195 = (GLuint *)(v191 + 204);
                      goto LABEL_244;
                    }
                    break;
                  case 0x42475241u:
                    if (v281 == 1)
                    {
                      v194 = 0;
                      v195 = (GLuint *)(v191 + 276);
                    }
                    else
                    {
                      if (v281)
                        goto LABEL_243;
                      v194 = 0;
                      v195 = (GLuint *)(v191 + 240);
                    }
LABEL_244:
                    if (v193)
                      CFRelease(v193);
                    *((_DWORD *)v296 + 6) = v194;
                    if (v194)
                      goto LABEL_316;
                    glUseProgram(*v195);
                    if ((v195[4] & 0x80000000) == 0)
                    {
                      glActiveTexture(0x84C0u);
                      glUniform1i(v195[4], 0);
                      v196 = OVCRegisterPixelBufferAsTexture(*(void **)DerivedStorage, *(_QWORD *)(DerivedStorage + 584), *((CVPixelBufferRef *)v175 - 14), 0, *(_BYTE *)(DerivedStorage + 521) != 0);
                      *((_DWORD *)v296 + 6) = v196;
                      if (v196)
                        goto LABEL_316;
                      glTexParameteri(0xDE1u, 0x2800u, 9729);
                      glTexParameteri(0xDE1u, 0x2801u, 9729);
                      glTexParameteri(0xDE1u, 0x2802u, 33071);
                      glTexParameteri(0xDE1u, 0x2803u, 33071);
                    }
                    if (v185 >= 2 && (v195[5] & 0x80000000) == 0)
                    {
                      glActiveTexture(0x84C1u);
                      glUniform1i(v195[5], 1);
                      v197 = OVCRegisterPixelBufferAsTexture(*(void **)DerivedStorage, *(_QWORD *)(DerivedStorage + 584), *((CVPixelBufferRef *)v175 - 14), 1uLL, *(_BYTE *)(DerivedStorage + 521) != 0);
                      *((_DWORD *)v296 + 6) = v197;
                      if (v197)
                        goto LABEL_316;
                      glTexParameteri(0xDE1u, 0x2800u, 9729);
                      glTexParameteri(0xDE1u, 0x2801u, 9729);
                      glTexParameteri(0xDE1u, 0x2802u, 33071);
                      glTexParameteri(0xDE1u, 0x2803u, 33071);
                    }
                    v198 = v195[1];
                    if ((v198 & 0x80000000) == 0)
                    {
                      if (*(_BYTE *)(DerivedStorage + 521))
                        v199 = 1;
                      else
                        v199 = 3;
                      glUniform1i(v198, v199);
                    }
                    glUniform1f(v195[3], *((GLfloat *)v175 - 24));
                    *(float32x2_t *)&v304.a = vcvt_f32_f64(*(float64x2_t *)(v175 - 11));
                    LODWORD(v304.b) = 0;
                    *(float32x2_t *)((char *)&v304.b + 4) = vcvt_f32_f64(*(float64x2_t *)(v175 - 9));
                    HIDWORD(v304.c) = 0;
                    *(float32x2_t *)&v304.d = vcvt_f32_f64(*(float64x2_t *)(v175 - 7));
                    LODWORD(v304.tx) = 1065353216;
                    glUniformMatrix3fv(v195[2], 1, 0, (const GLfloat *)&v304);
                    if ((v195[6] & 0x80000000) == 0)
                    {
                      v200 = ovc_getColorMatrixForPixelFormatConversion(v184, v126, theDicta, valuea, &v290);
                      *((_DWORD *)v296 + 6) = v200;
                      if (v200)
                        goto LABEL_316;
                      glUniformMatrix4fv(v195[6], 1, 0, v290);
                    }
                    *(float *)&v201 = v179;
                    *(float *)&v202 = v178;
                    *(_QWORD *)&t1.a = __PAIR64__(v202, v201);
                    *(float *)&v203 = v179 + v181;
                    *(_QWORD *)&t1.b = __PAIR64__(v202, v203);
                    *(float *)&v204 = v178 + v180;
                    *(_QWORD *)&t1.c = __PAIR64__(v204, v201);
                    *(_QWORD *)&t1.d = __PAIR64__(v204, v203);
                    *(float *)&v205 = v179 / (double)v182;
                    *(float *)&v206 = v178 / (double)v183;
                    *(_QWORD *)&ptr.a = __PAIR64__(v206, v205);
                    *(float *)&v207 = (v179 + v181) / (double)v182;
                    *(_QWORD *)&ptr.b = __PAIR64__(v206, v207);
                    *(float *)&v208 = (v178 + v180) / (double)v183;
                    *(_QWORD *)&ptr.c = __PAIR64__(v208, v205);
                    *(_QWORD *)&ptr.d = __PAIR64__(v208, v207);
                    glVertexAttribPointer(v195[7], 2, 0x1406u, 0, 0, &t1);
                    glEnableVertexAttribArray(v195[7]);
                    glVertexAttribPointer(v195[8], 2, 0x1406u, 0, 0, &ptr);
                    glEnableVertexAttribArray(v195[8]);
                    ++*(_DWORD *)(DerivedStorage + 748);
                    glDrawArrays(5u, 0, 4);
                    if (v126)
                      CFRelease(v126);
LABEL_264:
                    --v176;
                    v175 -= 27;
                    if (v176 <= 1)
                      goto LABEL_270;
                    continue;
                  default:
                    goto LABEL_243;
                }
                v194 = 0;
                v195 = (GLuint *)(v191 + 132);
                goto LABEL_244;
              }
LABEL_220:
              v190 = FigSignalErrorAt();
              *((_DWORD *)v296 + 6) = v190;
              if (v190)
                goto LABEL_316;
              goto LABEL_221;
            }
            glBlendColor(0.0, 0.0, 0.0, v186);
            v189 = 770;
          }
          break;
        }
        glBlendFuncSeparate(v189, 0x303u, 0, 1u);
        goto LABEL_219;
      }
LABEL_270:
      v161 = v281 + 1;
      v113 = theDicta;
      if ((void *)(v281 + 1) == v278)
      {
        if (!(_BYTE)v280)
        {
LABEL_293:
          v219 = pixelBufferOut;
          v220 = (void **)CMBaseObjectGetDerivedStorage();
          v221 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          if (v221)
          {
            v222 = (const void **)a4;
            if (a2)
            {
              v223 = a2;
              do
              {
                v224 = v222;
                if (*v222)
                  CFArrayAppendValue(v221, *v222);
                v222 = v224 + 1;
                --v223;
              }
              while (v223);
            }
            v225 = v220[80];
            v226 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v304.a = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v304.b = 3221225472;
            *(_QWORD *)&v304.c = __ovc_setNewInFlightEntry_block_invoke;
            *(_QWORD *)&v304.d = &__block_descriptor_72_e5_v8__0l;
            *(_QWORD *)&v304.tx = v220;
            v304.ty = a18;
            v305 = v219;
            v306 = UpTimeNanoseconds;
            v307 = v221;
            dispatch_sync(v225, &v304);
            v227 = *v220;
            v228 = (uint64_t)v220[79];
            t1.a = v226;
            *(_QWORD *)&t1.b = 3221225472;
            *(_QWORD *)&t1.c = __ovc_setNewInFlightEntry_block_invoke_2;
            *(_QWORD *)&t1.d = &__block_descriptor_48_e5_v8__0l;
            *(_QWORD *)&t1.tx = a1;
            t1.ty = a18;
            v229 = OVCRegisterFenceBlock(v227, v228, (uint64_t)&t1);
            if (v229)
            {
              v230 = v220[80];
              *(_QWORD *)&ptr.a = MEMORY[0x1E0C809B0];
              *(_QWORD *)&ptr.b = 3221225472;
              *(_QWORD *)&ptr.c = __ovc_setNewInFlightEntry_block_invoke_3;
              *(_QWORD *)&ptr.d = &__block_descriptor_48_e5_v8__0l;
              *(_QWORD *)&ptr.tx = v220;
              ptr.ty = a18;
              dispatch_sync(v230, &ptr);
            }
            CFRelease(v221);
          }
          else
          {
            v229 = FigSignalErrorAt();
          }
          *((_DWORD *)v296 + 6) = v229;
          if (v229)
            goto LABEL_315;
          glFlush();
          CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E0CA8D50], *(CFTypeRef *)(DerivedStorage + 488), kCVAttachmentMode_ShouldPropagate);
          CVBufferSetAttachment(pixelBufferOut, (CFStringRef)*MEMORY[0x1E0CA8E68], *(CFTypeRef *)(DerivedStorage + 496), kCVAttachmentMode_ShouldPropagate);
          v231 = FigGetUpTimeNanoseconds();
          v232 = CMBaseObjectGetDerivedStorage();
          ptr.a = 0.0;
          *(_QWORD *)&ptr.b = &ptr;
          *(_QWORD *)&ptr.c = 0x2020000000;
          ptr.d = 0.0;
          v233 = *(NSObject **)(v232 + 640);
          *(_QWORD *)&v304.a = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v304.b = 3221225472;
          *(_QWORD *)&v304.c = __ovc_enforceMaxInFlightBufferCount_block_invoke;
          *(_QWORD *)&v304.d = &unk_1E2F87F08;
          *(_QWORD *)&v304.tx = &ptr;
          *(_QWORD *)&v304.ty = v232;
          dispatch_sync(v233, &v304);
          if (*(_QWORD *)(*(_QWORD *)&ptr.b + 24) > *(int *)(v232 + 596))
          {
            do
            {
              FigSemaphoreWaitRelative();
              v234 = *(NSObject **)(v232 + 640);
              *(_QWORD *)&t1.a = MEMORY[0x1E0C809B0];
              *(_QWORD *)&t1.b = 3221225472;
              *(_QWORD *)&t1.c = __ovc_enforceMaxInFlightBufferCount_block_invoke_2;
              *(_QWORD *)&t1.d = &unk_1E2F87F08;
              *(_QWORD *)&t1.tx = &ptr;
              *(_QWORD *)&t1.ty = v232;
              dispatch_sync(v234, &t1);
              v235 = *(int *)(v232 + 596);
            }
            while (*(_QWORD *)(*(_QWORD *)&ptr.b + 24) > v235);
            if ((int)v235 <= 2 && !*(_BYTE *)(v232 + 592))
              *(_DWORD *)(v232 + 596) = v235 + 1;
          }
          _Block_object_dispose(&ptr, 8);
          *((_DWORD *)v296 + 6) = 0;
          v236 = FigGetUpTimeNanoseconds();
          v237 = (v236 - v231) / 1000;
          ++*(_DWORD *)(DerivedStorage + 784);
          *(_QWORD *)(DerivedStorage + 776) += v237;
          v238 = *(_QWORD *)(DerivedStorage + 760);
          if (v238 >= v237)
            v238 = (v236 - v231) / 1000;
          *(_QWORD *)(DerivedStorage + 760) = v238;
          if (*(_QWORD *)(DerivedStorage + 768) > v237)
            v237 = *(_QWORD *)(DerivedStorage + 768);
          *(_QWORD *)(DerivedStorage + 768) = v237;
          FigOVCGLObjectCacheWrapperFlushCacheEntriesForDeletedBackings(*(_QWORD *)(DerivedStorage + 584));
LABEL_313:
          if ((v269 & 1) == 0)
          {
            v239 = *(NSObject **)(DerivedStorage + 632);
            v289[0] = MEMORY[0x1E0C809B0];
            v289[1] = 3221225472;
            v289[2] = __openglVideoCompositor_RenderFrame_block_invoke_2;
            v289[3] = &__block_descriptor_64_e5_v8__0l;
            v289[4] = DerivedStorage;
            v289[5] = UpTimeNanoseconds;
            *(CGFloat *)&v289[6] = a18;
            v289[7] = pixelBufferOut;
            dispatch_sync(v239, v289);
          }
LABEL_315:
          v126 = 0;
          goto LABEL_316;
        }
        v209 = 0;
        ++*(_DWORD *)(DerivedStorage + 756);
        while (2)
        {
          v210 = pixelBufferOut;
          v211 = CMBaseObjectGetDerivedStorage();
          ptr.b = 0.0;
          ptr.a = 0.0;
          v212 = OVCCVPixelBufferGetWidthOfPlane(v210, v209);
          v213 = OVCCVPixelBufferGetHeightOfPlane(v210, v209);
          glDisable(0xBE2u);
          v214 = OVCRegisterPixelBufferAsRenderTarget(*(void **)v211, *(_QWORD *)(v211 + 584), v210, v209);
          if (v214 || (v214 = ovc_setupViewPortAndClear((uint64_t)a1, v212, v213, (GLfloat *)&ptr)) != 0)
          {
            *((_DWORD *)v296 + 6) = v214;
            goto LABEL_315;
          }
          if (glCheckFramebufferStatus(0x8D40u) == 36053)
          {
            *((_DWORD *)v296 + 6) = 0;
          }
          else
          {
            v215 = FigSignalErrorAt();
            *((_DWORD *)v296 + 6) = v215;
            if (v215)
              goto LABEL_315;
          }
          v216 = CMBaseObjectGetDerivedStorage();
          if (theDicta != 875704438)
            goto LABEL_285;
          if (v209 == 1)
          {
            v217 = v216 + 348;
LABEL_284:
            *((_DWORD *)v296 + 6) = 0;
          }
          else
          {
            if (!v209)
            {
              v217 = v216 + 312;
              goto LABEL_284;
            }
LABEL_285:
            v218 = FigSignalErrorAt();
            *((_DWORD *)v296 + 6) = v218;
            if (v218)
              goto LABEL_315;
            v217 = 0;
          }
          glUseProgram(*(_DWORD *)v217);
          *(_OWORD *)&t1.a = xmmword_1932FED20;
          *(_OWORD *)&t1.c = xmmword_1932FED30;
          if ((*(_DWORD *)(v217 + 16) & 0x80000000) == 0)
          {
            glActiveTexture(0x84C0u);
            glUniform1i(*(_DWORD *)(v217 + 16), 0);
            glBindTexture(0xDE1u, *(_DWORD *)(DerivedStorage + 388));
          }
          if (*(_QWORD *)(DerivedStorage + 400) >= 2uLL && (*(_DWORD *)(v217 + 20) & 0x80000000) == 0)
          {
            glActiveTexture(0x84C1u);
            glUniform1i(*(_DWORD *)(v217 + 20), 1);
            glBindTexture(0xDE1u, *(_DWORD *)(DerivedStorage + 392));
          }
          *(_OWORD *)&v304.a = xmmword_1932FED40;
          *(_OWORD *)&v304.c = xmmword_1932FED50;
          glVertexAttribPointer(*(_DWORD *)(v217 + 28), 2, 0x1406u, 0, 0, &v304);
          glEnableVertexAttribArray(*(_DWORD *)(v217 + 28));
          glVertexAttribPointer(*(_DWORD *)(v217 + 32), 2, 0x1406u, 0, 0, &t1);
          glEnableVertexAttribArray(*(_DWORD *)(v217 + 32));
          ++*(_DWORD *)(DerivedStorage + 748);
          glDrawArrays(5u, 0, 4);
          if (v278 == (void *)++v209)
            goto LABEL_293;
          continue;
        }
      }
    }
  }
LABEL_128:
  v126 = 0;
  v272 = 0;
  v273 = 0;
  valuea = 0;
LABEL_316:
  OVCSetCurrentOpenGLContext(0);
  if (*(_BYTE *)(DerivedStorage + 520) && *(_QWORD *)(DerivedStorage + 664))
  {
    v240 = 0;
    do
      CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(*(_QWORD *)(DerivedStorage + 672) + 8 * v240++), 0);
    while (v240 < *(_QWORD *)(DerivedStorage + 664));
  }
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(DerivedStorage + 568), 0);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  free(v279);
  if (valuea)
    CFRelease(valuea);
  if (v273)
    CFRelease(v273);
  if (v272)
    CFRelease(v272);
  if (v126)
    CFRelease(v126);
  v241 = *((unsigned int *)v296 + 6);
  _Block_object_dispose(&v295, 8);
  return v241;
}

void sub_192F54BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  _Block_object_dispose(&a69, 8);
  _Unwind_Resume(a1);
}

uint64_t openglVideoCompositor_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 632);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __openglVideoCompositor_SetOutputCallback_block_invoke;
  v9[3] = &unk_1E2F991F0;
  v9[6] = a2;
  v9[7] = a3;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

void sub_192F54D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ovc_getPrescalingParameters(__CVBuffer *a1, _OWORD *a2, char *a3, double *a4, unint64_t *a5, double *a6, size_t *a7, _OWORD *a8, double a9, double a10, double a11, CGFloat a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, float a17)
{
  __int128 v31;
  double b;
  double a;
  double d;
  double c;
  size_t Width;
  size_t Height;
  unint64_t v38;
  double v39;
  double v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  CGFloat v44;
  CGFloat v45;
  double y;
  double x;
  double v48;
  double v49;
  __int128 v50;
  double v51;
  double v52;
  CGFloat v53;
  double v54;
  double v55;
  double v56;
  __int128 v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  CGAffineTransform v64;
  CGAffineTransform v65;
  CGAffineTransform v66;
  double v67;
  double v68;
  CGAffineTransform v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;

  memset(&v69, 0, sizeof(v69));
  v67 = 0.0;
  v68 = 0.0;
  if (a3 && a4 && a5 && a6 && a7 && a8)
  {
    v31 = a2[1];
    *(_OWORD *)&v66.a = *a2;
    *(_OWORD *)&v66.c = v31;
    *(_OWORD *)&v66.tx = a2[2];
    FigVideoCompositionInstructionCGAffineTransformDecompose(&v66, 0, 0, &v69, &v68, &v67, 0);
    b = 0.0;
    a = 0.0;
    if (fabs(v69.a) >= 0.00001)
    {
      a = 1.0;
      if (fabs(v69.a + -1.0) >= 0.00001)
      {
        a = v69.a;
        if (fabs(v69.a + 1.0) < 0.00001)
          a = -1.0;
      }
    }
    v69.a = a;
    if (fabs(v69.b) >= 0.00001)
    {
      b = 1.0;
      if (fabs(v69.b + -1.0) >= 0.00001)
      {
        b = v69.b;
        if (fabs(v69.b + 1.0) < 0.00001)
          b = -1.0;
      }
    }
    v69.b = b;
    d = 0.0;
    c = 0.0;
    if (fabs(v69.c) >= 0.00001)
    {
      c = 1.0;
      if (fabs(v69.c + -1.0) >= 0.00001)
      {
        c = v69.c;
        if (fabs(v69.c + 1.0) < 0.00001)
          c = -1.0;
      }
    }
    v69.c = c;
    if (fabs(v69.d) >= 0.00001)
    {
      d = 1.0;
      if (fabs(v69.d + -1.0) >= 0.00001)
      {
        d = v69.d;
        if (fabs(v69.d + 1.0) < 0.00001)
          d = -1.0;
      }
    }
    v69.d = d;
    v67 = v67 * a17;
    v68 = v68 * a17;
    Width = CVPixelBufferGetWidth(a1);
    Height = CVPixelBufferGetHeight(a1);
    v38 = Height;
    v39 = v68;
    if (fabs(v68 + -1.0) < 0.00001)
    {
      v68 = 1.0;
      v39 = 1.0;
    }
    v40 = v67;
    if (fabs(v67 + -1.0) < 0.00001)
    {
      v67 = 1.0;
      v40 = 1.0;
    }
    if (v39 == 1.0 && v40 == 1.0)
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = 0.0;
      v45 = 0.0;
      y = 0.0;
      x = 0.0;
      v48 = a9;
    }
    else
    {
      v49 = (double)Height;
      v50 = a2[1];
      *(_OWORD *)&v66.a = *a2;
      *(_OWORD *)&v66.c = v50;
      *(_OWORD *)&v66.tx = a2[2];
      CGAffineTransformInvert(&v65, &v66);
      v70.origin.x = a13;
      v70.origin.y = a14;
      v70.size.width = a15;
      v70.size.height = a16;
      v75 = CGRectApplyAffineTransform(v70, &v65);
      v71.origin.x = 0.0;
      v71.origin.y = 0.0;
      v71.size.width = (double)Width;
      v58 = (double)Width;
      v71.size.height = (double)v38;
      v72 = CGRectIntersection(v71, v75);
      x = v72.origin.x;
      y = v72.origin.y;
      v45 = v72.size.width;
      v59 = v72.size.height;
      v60 = a10;
      v51 = v68;
      v43 = (unint64_t)(v72.size.width * v68 + 0.5);
      v61 = a11;
      v52 = v67;
      v42 = (unint64_t)(v72.size.height * v67 + 0.5);
      Width = (unint64_t)((double)Width * v68 + 0.5);
      v38 = (unint64_t)(v49 * v67 + 0.5);
      v64 = v69;
      CGAffineTransformScale(&v66, &v64, (float)(1.0 / a17), (float)(1.0 / a17));
      v69 = v66;
      v64 = v66;
      CGAffineTransformTranslate(&v66, &v64, v51 * x, y * v52);
      v69 = v66;
      v53 = (double)v38 / v49;
      v44 = v59;
      CGAffineTransformMakeScale(&v66, (double)Width / v58, v53);
      v73.size.width = v61;
      v73.origin.x = a9 - x;
      v73.origin.y = v60 - y;
      v76.origin.x = 0.0;
      v76.origin.y = 0.0;
      v73.size.height = a12;
      v76.size.width = v45;
      v76.size.height = v59;
      v74 = CGRectIntersection(v73, v76);
      v64 = v66;
      *(CGRect *)&v48 = CGRectApplyAffineTransform(v74, &v64);
      a10 = v54;
      a11 = v55;
      a12 = v56;
      v41 = 1;
    }
    *a4 = x;
    a4[1] = y;
    a4[2] = v45;
    a4[3] = v44;
    *a7 = Width;
    a7[1] = v38;
    *a5 = v43;
    a5[1] = v42;
    v57 = *(_OWORD *)&v69.c;
    *a8 = *(_OWORD *)&v69.a;
    a8[1] = v57;
    a8[2] = *(_OWORD *)&v69.tx;
    *a6 = v48;
    a6[1] = a10;
    a6[2] = a11;
    a6[3] = a12;
    *a3 = v41;
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t ovc_preScaleBuffer(__CVBuffer *a1, uint64_t a2, uint64_t a3, uint64_t a4, CVPixelBufferPoolRef *a5, CVPixelBufferRef *a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  OSType PixelFormatType;
  const void **v21;
  const void **v22;
  const __CFDictionary *PixelBufferAttributes;
  const __CFDictionary *v24;
  const __CFNumber *Value;
  const __CFNumber *v26;
  const __CFNumber *v27;
  __CVPixelBufferPool *v28;
  __CFDictionary *MutableCopy;
  const __CFAllocator *v30;
  uint64_t v31;
  uint64_t v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  uint64_t v39;
  OSType v41;
  CFDictionaryRef poolAttributes;
  CFDictionaryRef theDict;
  CVPixelBufferRef pixelBufferOut;
  CVPixelBufferPoolRef poolOut;
  int v46;
  uint64_t valuePtr;

  pixelBufferOut = 0;
  poolOut = 0;
  poolAttributes = 0;
  theDict = 0;
  v41 = 0;
  if (!a1 || !a4 || !a5 || !a6)
  {
    v31 = FigSignalErrorAt();
LABEL_16:
    v32 = v31;
    MutableCopy = 0;
    goto LABEL_31;
  }
  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  v21 = (const void **)MEMORY[0x1E0CA8FD8];
  v22 = (const void **)MEMORY[0x1E0CA9040];
  if (*a5)
  {
    PixelBufferAttributes = CVPixelBufferPoolGetPixelBufferAttributes(*a5);
    if (!PixelBufferAttributes)
      goto LABEL_17;
    v24 = PixelBufferAttributes;
    Value = (const __CFNumber *)CFDictionaryGetValue(PixelBufferAttributes, (const void *)*MEMORY[0x1E0CA90E0]);
    if (!Value)
      goto LABEL_17;
    valuePtr = 0;
    v46 = 0;
    CFNumberGetValue(Value, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v26 = (const __CFNumber *)CFDictionaryGetValue(v24, *v21);
    if (v26
      && (CFNumberGetValue(v26, kCFNumberSInt32Type, &valuePtr),
          (v27 = (const __CFNumber *)CFDictionaryGetValue(v24, *v22)) != 0))
    {
      CFNumberGetValue(v27, kCFNumberSInt32Type, &v46);
      if (a2 == SHIDWORD(valuePtr) && a3 == (int)valuePtr && v46 == PixelFormatType)
      {
        v28 = *a5;
        if (*a5)
        {
          MutableCopy = 0;
          v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          goto LABEL_28;
        }
        goto LABEL_20;
      }
    }
    else
    {
LABEL_17:
      FigSignalErrorAt();
    }
    if (*a5)
    {
      CFRelease(*a5);
      *a5 = 0;
    }
  }
LABEL_20:
  v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v31 = ovc_createPixelBufferAttributesDictionary((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &theDict);
  if ((_DWORD)v31)
    goto LABEL_16;
  MutableCopy = CFDictionaryCreateMutableCopy(v30, 0, theDict);
  if (!MutableCopy)
    goto LABEL_42;
  v41 = a2;
  v33 = CFNumberCreate(v30, kCFNumberIntType, &v41);
  if (!v33)
    goto LABEL_42;
  v34 = v33;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA90E0], v33);
  CFRelease(v34);
  v41 = a3;
  v35 = CFNumberCreate(v30, kCFNumberIntType, &v41);
  if (!v35
    || (v36 = v35,
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA8FD8], v35),
        CFRelease(v36),
        v41 = PixelFormatType,
        (v37 = CFNumberCreate(v30, kCFNumberIntType, &v41)) == 0))
  {
LABEL_42:
    v39 = FigSignalErrorAt();
    goto LABEL_43;
  }
  v38 = v37;
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA9040], v37);
  CFRelease(v38);
  v39 = VTCreatePixelBufferPoolAttributesWithName();
  if ((_DWORD)v39)
    goto LABEL_43;
  v39 = CVPixelBufferPoolCreate(v30, poolAttributes, MutableCopy, &poolOut);
  if ((_DWORD)v39)
    goto LABEL_43;
  v28 = poolOut;
  *a5 = poolOut;
  poolOut = 0;
LABEL_28:
  v39 = CVPixelBufferPoolCreatePixelBuffer(v30, v28, &pixelBufferOut);
  if ((_DWORD)v39)
  {
LABEL_43:
    v32 = v39;
    goto LABEL_31;
  }
  v32 = OVCBicubicPrescalerScalePixelBuffer(a4, a1, pixelBufferOut, a7, a8, a9, a10);
  if (!(_DWORD)v32)
  {
    *a6 = pixelBufferOut;
    pixelBufferOut = 0;
  }
LABEL_31:
  if (poolOut)
    CFRelease(poolOut);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (theDict)
    CFRelease(theDict);
  if (poolAttributes)
    CFRelease(poolAttributes);
  return v32;
}

uint64_t ovc_getColorMatrixForPixelFormatConversion(int a1, CFTypeRef cf1, int a3, CFTypeRef a4, _QWORD *a5)
{
  void *v7;
  const void *v9;
  const void *v10;

  if (a1 != 875704422)
  {
    if (a1 != 875704438)
    {
      if (a1 != 1111970369)
        return FigSignalErrorAt();
      if (a3 != 1111970369)
      {
        if (a3 == 875704438)
        {
          if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
            v7 = &kOVCColorMatrix_32BGRA_YUV709;
          else
            v7 = &kOVCColorMatrix_32BGRA_YUV601;
          goto LABEL_41;
        }
        return FigSignalErrorAt();
      }
      goto LABEL_39;
    }
    if (a3 != 875704438)
    {
      if (a3 == 1111970369)
      {
        if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
          v7 = &kOVCColorMatrix_YUV709_32BGRA;
        else
          v7 = &kOVCColorMatrix_YUV601_32BGRA;
        goto LABEL_41;
      }
      return FigSignalErrorAt();
    }
    if (cf1 && (v10 = (const void *)*MEMORY[0x1E0CA8F18], CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA8F18])))
    {
      if (!a4 || !CFEqual(a4, v10))
      {
        v7 = &kOVCColorMatrix_YUV709_YUV601;
        goto LABEL_41;
      }
    }
    else if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
    {
      v7 = &kOVCColorMatrix_YUV601_YUV709;
      goto LABEL_41;
    }
LABEL_39:
    v7 = &kOVCColorMatrixIdentity;
    goto LABEL_41;
  }
  if (a3 != 875704438)
  {
    if (a3 == 1111970369)
    {
      if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
        v7 = &kOVCColorMatrix_YUV709f_32BGRA;
      else
        v7 = &kOVCColorMatrix_YUV601f_32BGRA;
      goto LABEL_41;
    }
    return FigSignalErrorAt();
  }
  if (!cf1 || (v9 = (const void *)*MEMORY[0x1E0CA8F18], !CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E0CA8F18])))
  {
    if (a4 && CFEqual(a4, (CFTypeRef)*MEMORY[0x1E0CA8F18]))
    {
      v7 = &kOVCColorMatrix_YUV601f_YUV709;
      goto LABEL_41;
    }
LABEL_40:
    v7 = &kOVCColorMatrix_YUVf_YUV;
    goto LABEL_41;
  }
  if (a4 && CFEqual(a4, v9))
    goto LABEL_40;
  v7 = &kOVCColorMatrix_YUV709f_YUV601;
LABEL_41:
  *a5 = v7;
  return 0;
}

uint64_t ovc_appendIntToArray(__CFArray *a1, int a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

CFIndex __ovc_adjustMaxInFlightBuffers_block_invoke(uint64_t a1)
{
  CFIndex result;

  result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 600));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ovc_setupViewPortAndClear(uint64_t a1, unint64_t a2, unint64_t a3, GLfloat *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  __int128 v13;
  __int128 v14;
  CGRect v15;
  CGRect v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = 0u;
  v14 = 0u;
  glViewport(0, 0, a2, a3);
  glEnable(0xC11u);
  glScissor(0, 0, a2, a3);
  glClearColor(*a4, a4[1], a4[2], a4[3]);
  glClear(0x4000u);
  bvc_getCleanApertureRect(*(const void **)(DerivedStorage + 488), *(_QWORD *)(DerivedStorage + 408), *(_QWORD *)(DerivedStorage + 416), (double *)&v13);
  v9 = v8;
  if (!(_DWORD)v8)
  {
    v10 = (float)((float)a2 / (float)*(unint64_t *)(DerivedStorage + 408));
    v15.size.width = *(double *)&v14 * v10;
    v11 = (float)((float)a3 / (float)*(unint64_t *)(DerivedStorage + 416));
    *(double *)&v13 = *(double *)&v13 * v10;
    v15.origin.x = *(double *)&v13;
    *((double *)&v13 + 1) = *((double *)&v13 + 1) * v11;
    v15.origin.y = *((double *)&v13 + 1);
    *(CGFloat *)&v14 = v15.size.width;
    *((double *)&v14 + 1) = *((double *)&v14 + 1) * v11;
    v15.size.height = *((double *)&v14 + 1);
    v16 = CGRectIntegral(v15);
    *(CGFloat *)&v13 = v16.origin.x;
    *((_QWORD *)&v13 + 1) = *(_QWORD *)&v16.origin.y;
    *(CGFloat *)&v14 = v16.size.width;
    *((_QWORD *)&v14 + 1) = *(_QWORD *)&v16.size.height;
    glScissor((int)v16.origin.x, (int)v16.origin.y, (int)v16.size.width, (int)v16.size.height);
  }
  return v9;
}

void __ovc_setNewInFlightEntry_block_invoke(uint64_t a1)
{
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 600), *(const void **)(a1 + 40), (const void *)(a1 + 48));
}

void __ovc_setNewInFlightEntry_block_invoke_2(uint64_t a1)
{
  const void *v1;
  uint64_t DerivedStorage;
  CFTypeRef *Value;
  CFTypeRef *v4;
  CFTypeRef v5;
  uint64_t UpTimeNanoseconds;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void (*v11)(_QWORD, const void *, uint64_t, CFTypeRef *);
  _QWORD v12[6];

  v1 = *(const void **)(a1 + 40);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Value = (CFTypeRef *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 600), v1);
  v4 = Value;
  if (Value)
  {
    v5 = Value[1];
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v7 = (UpTimeNanoseconds - (uint64_t)v5) / 1000;
    ++*(_DWORD *)(DerivedStorage + 816);
    *(_QWORD *)(DerivedStorage + 808) += v7;
    v8 = *(_QWORD *)(DerivedStorage + 792);
    if (v8 >= v7)
      v8 = (UpTimeNanoseconds - (uint64_t)v5) / 1000;
    *(_QWORD *)(DerivedStorage + 792) = v8;
    if (*(_QWORD *)(DerivedStorage + 800) > v7)
      v7 = *(_QWORD *)(DerivedStorage + 800);
    *(_QWORD *)(DerivedStorage + 800) = v7;
    if (*v4)
    {
      v4 = (CFTypeRef *)CFRetain(*v4);
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v4 = 0;
    }
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
  v10 = *(NSObject **)(DerivedStorage + 640);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __ovc_glFenceCallback_block_invoke;
  v12[3] = &__block_descriptor_48_e5_v8__0l;
  v12[4] = DerivedStorage;
  v12[5] = v1;
  dispatch_async(v10, v12);
  v11 = *(void (**)(_QWORD, const void *, uint64_t, CFTypeRef *))(DerivedStorage + 648);
  if (v11)
    v11(*(_QWORD *)(DerivedStorage + 656), v1, v9, v4);
  if (v4)
    CFRelease(v4);
}

void __ovc_setNewInFlightEntry_block_invoke_3(uint64_t a1)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 600), *(const void **)(a1 + 40));
}

uint64_t __ovc_glFenceCallback_block_invoke(uint64_t a1)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(*(_QWORD *)(a1 + 32) + 600), *(const void **)(a1 + 40));
  return FigSemaphoreSignal();
}

CFIndex __ovc_enforceMaxInFlightBufferCount_block_invoke(uint64_t a1)
{
  CFIndex result;

  result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 600));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

CFIndex __ovc_enforceMaxInFlightBufferCount_block_invoke_2(uint64_t a1)
{
  CFIndex result;

  result = CFDictionaryGetCount(*(CFDictionaryRef *)(*(_QWORD *)(a1 + 40) + 600));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ovc_createAndConfigureGLProgram(GLuint *a1, GLuint a2, GLuint a3)
{
  uint64_t v4;
  int UniformLocation;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int AttribLocation;
  int v18;
  uint64_t v19;

  v4 = OVCCreateGLProgram(a2, a3, a1);
  if ((_DWORD)v4)
  {
    v19 = v4;
    if (!a1)
      return v19;
LABEL_26:
    glDeleteProgram(*a1);
    return v19;
  }
  UniformLocation = glGetUniformLocation(*a1, "g_index");
  if (UniformLocation < 0)
    v6 = -1;
  else
    v6 = UniformLocation;
  a1[1] = v6;
  v7 = glGetUniformLocation(*a1, "affine_transform");
  if (v7 < 0)
    v8 = -1;
  else
    v8 = v7;
  a1[2] = v8;
  v9 = glGetUniformLocation(*a1, "opacity");
  if (v9 < 0)
    v10 = -1;
  else
    v10 = v9;
  a1[3] = v10;
  v11 = glGetUniformLocation(*a1, "source_buffer_plane0");
  if (v11 < 0)
    v12 = -1;
  else
    v12 = v11;
  a1[4] = v12;
  v13 = glGetUniformLocation(*a1, "source_buffer_plane1");
  if (v13 < 0)
    v14 = -1;
  else
    v14 = v13;
  a1[5] = v14;
  v15 = glGetUniformLocation(*a1, "color_matrix");
  if (v15 < 0)
    v16 = -1;
  else
    v16 = v15;
  a1[6] = v16;
  AttribLocation = glGetAttribLocation(*a1, "vertex_coord");
  if (AttribLocation < 0 || (a1[7] = AttribLocation, v18 = glGetAttribLocation(*a1, "texture_coord0"), v18 < 0))
  {
    v19 = FigSignalErrorAt();
    goto LABEL_26;
  }
  v19 = 0;
  a1[8] = v18;
  return v19;
}

uint64_t FigTTMLBrCreate(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;

  if (!a4)
    return FigSignalErrorAt();
  FigTTMLNodeGetClassID();
  v7 = CMDerivedObjectCreate();
  if (!(_DWORD)v7)
  {
    FigBytePumpGetFigBaseObject(0);
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v9 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
    if ((_DWORD)v9)
    {
      return v9;
    }
    else
    {
      v7 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
      if (!(_DWORD)v7)
      {
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        v7 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLBrConsumeChildNode, (uint64_t *)a3);
        if (!(_DWORD)v7)
          *a4 = 0;
      }
    }
  }
  return v7;
}

uint64_t figTTMLBrConsumeChildNode(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  uint64_t result;

  FigBytePumpGetFigBaseObject(*a2);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigTTMLSkipNode(a1, a2, *(__CFArray **)(DerivedStorage + 128));
  if (a3)
  {
    if (!(_DWORD)result)
      *a3 = 0;
  }
  return result;
}

void figTTMLBr_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;

  FigBytePumpGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLBr_CopyDebugDesc(uint64_t a1)
{
  const void *v1;
  CFStringRef v2;

  FigBytePumpGetFigBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  v1 = (const void *)FigCFCopyCompactDescription();
  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("br: %@"), v1);
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t figTTMLBr_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v3;

  if (a2)
  {
    v3 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLBr_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 6;
  return 0;
}

uint64_t FigTTMLSerializerGetClassID()
{
  MEMORY[0x19402F294](&FigTTMLSerializerGetClassID_sRegisterFigTTMLSerializerBaseTypeOnce, figTTMLSerializer_RegisterFigTTMLSerializerBaseType);
  return sFigTTMLSerializerClassID;
}

uint64_t figTTMLSerializer_RegisterFigTTMLSerializerBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigTTMLSerializerGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLSerializerGetClassID_sRegisterFigTTMLSerializerBaseTypeOnce, figTTMLSerializer_RegisterFigTTMLSerializerBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigTTMLSerializerSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigTTMLSerializerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigTTMLSerializerInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  if (!a1)
    return 4294954516;
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigTTMLSerializerStartElement(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigTTMLSerializerSetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigTTMLSerializerEndElement(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigTTMLSerializerAddText(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigTTMLSerializerFlush(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

CFStringRef figTTMLSerializer_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLSerializer %p]"), a1);
}

uint64_t FigDisplayModes_ExtractDimensionsFromTimingMode(const __CFArray *a1, int a2, double *a3)
{
  const __CFDictionary *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1)
  {
    v4 = lookupTimingModeByID(a1, a2);
    if (v4)
      return getTimingModeDimensions(v4, a3);
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954516;
}

const __CFDictionary *lookupTimingModeByID(const __CFArray *a1, int a2)
{
  unint64_t Count;
  unint64_t v5;
  const __CFDictionary *result;
  const __CFDictionary *v7;
  int valuePtr;

  Count = CFArrayGetCount(a1);
  if (!Count)
    return 0;
  v5 = 0;
  do
  {
    result = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v5);
    if (result)
    {
      v7 = result;
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("ID"));
      valuePtr = -1;
      if (result)
      {
        CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr == a2)
          result = v7;
        else
          result = 0;
      }
    }
    ++v5;
  }
  while (v5 < Count && !result);
  return result;
}

uint64_t getTimingModeDimensions(const __CFDictionary *a1, double *a2)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  uint64_t result;
  double v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  _QWORD valuePtr[21];

  valuePtr[20] = *MEMORY[0x1E0C80C00];
  valuePtr[0] = 0;
  if (a1
    && a2
    && (Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("HorizontalAttributes"))) != 0
    && (v5 = Value, (v6 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("VerticalAttributes"))) != 0)
    && (v7 = v6,
        v8 = (const __CFNumber *)CFDictionaryGetValue(v5, CFSTR("Active")),
        v9 = (const __CFNumber *)CFDictionaryGetValue(v7, CFSTR("Active")),
        v8)
    && (v10 = v9) != 0)
  {
    CFNumberGetValue(v8, kCFNumberSInt32Type, (char *)valuePtr + 4);
    CFNumberGetValue(v10, kCFNumberSInt32Type, valuePtr);
    result = 0;
    v12 = (double)SLODWORD(valuePtr[0]);
    *a2 = (double)SHIDWORD(valuePtr[0]);
    a2[1] = v12;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_ExtractOverscanInfoFromTimingMode(const __CFArray *a1, int a2, BOOL *a3)
{
  const __CFDictionary *v4;
  uint64_t result;
  uint64_t v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1 && (v4 = lookupTimingModeByID(a1, a2)) != 0)
  {
    result = (uint64_t)CFDictionaryGetValue(v4, CFSTR("IsOverscanned"));
    if (result)
    {
      v6 = result;
      result = 0;
      *a3 = v6 == *MEMORY[0x1E0C9AE50];
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

const __CFDictionary *FigDisplayModes_ExtractVSyncRateFromTimingMode(const __CFArray *a1, int a2, int *a3)
{
  const __CFDictionary *v4;
  const __CFDictionary *result;
  int UInt64;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1 && (v4 = lookupTimingModeByID(a1, a2)) != 0)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(v4, CFSTR("VerticalAttributes"));
    if (result)
    {
      result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("SyncRate"));
      if (result)
      {
        UInt64 = FigCFNumberGetUInt64();
        result = 0;
        *a3 = UInt64 / 0x10000;
      }
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return (const __CFDictionary *)4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_LookupTimingModeIDByIndex(const __CFArray *a1, unsigned int a2, int *a3)
{
  const __CFDictionary *ValueAtIndex;
  const __CFNumber *Value;
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int valuePtr;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (CFArrayGetCount(a1) > a2
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, a2)) != 0
    && (Value = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, CFSTR("ID"))) != 0)
  {
    valuePtr = -1;
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    result = 0;
    *a3 = valuePtr;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_DetermineSenderSurfaceDimensionsFromDisplayModeAndCurrentSenderDisplaySize(int a1, float64x2_t *a2, double a3, double a4, float64x2_t a5, float64_t a6, double a7)
{
  double v7;
  double v8;
  double v9;
  double v10;
  int32x2_t v11;
  int64x2_t v12;

  v7 = a3 / a5.f64[0];
  v8 = a4 / a6;
  if (v7 >= v8)
    v7 = v8;
  v9 = 1.0;
  v10 = 1.0 - a7;
  if (a1)
    v9 = v10;
  a5.f64[1] = a6;
  v11 = vadd_s32(vmovn_s64(vcvtq_s64_f64(vmulq_n_f64(a5, v9 * v7))), (int32x2_t)0x100000001);
  v12.i64[0] = (int)(v11.i32[0] & 0xFFFFFFFE);
  v12.i64[1] = (int)(v11.i32[1] & 0xFFFFFFFE);
  *a2 = vcvtq_f64_s64(v12);
  return 0;
}

uint64_t FigDisplayModes_ConvertSquarePixelSizeToNonSquarePixelSize(unsigned int a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unsigned int v9;
  double v10;
  double v11;
  unsigned int v12;
  unsigned int v13;
  double v14;
  BOOL v15;
  int v16;
  double v17;
  int v18;

  v9 = a1 % 0xB4;
  if (a1 % 0xB4 == 90)
    v10 = a3;
  else
    v10 = a4;
  if (v9 == 90)
    a3 = a4;
  v11 = a5 / a6;
  if (a9 <= 0.0 || a9 == 1.0)
  {
    v13 = (int)v10;
    v14 = v11 * (a8 / a7);
    if (v14 <= 1.01)
    {
      v12 = (int)a3;
      if (v14 < 0.99)
        v13 = ((int)(v10 * v14) + 1) & 0xFFFFFFFE;
    }
    else
    {
      v12 = ((int)(a3 / v14) + 1) & 0xFFFFFFFE;
    }
  }
  else
  {
    v12 = ((int)(a7 * (a3 / (a8 * a9) / v11)) + 1) & 0xFFFFFFFE;
    v13 = ((int)(a8 * (v10 / (a8 * a9))) + 1) & 0xFFFFFFFE;
  }
  v15 = v9 == 90;
  if (v9 == 90)
    v16 = v12;
  else
    v16 = v13;
  v17 = (double)v16;
  if (v15)
    v18 = v13;
  else
    v18 = v12;
  *a2 = (double)v18;
  a2[1] = v17;
  return 0;
}

uint64_t FigDisplayModes_ConvertSquarePixelRectToNonSquarePixelRect(unsigned int a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  signed int v17;
  int v18;
  unsigned int v19;
  int v20;
  signed int v21;
  double v22;
  double v23;
  BOOL v24;
  int v25;
  int v26;

  v17 = (int)a5;
  v18 = (int)a3;
  v19 = a1 % 0xB4;
  if (a1 % 0xB4 == 90)
    v20 = (int)a3;
  else
    v20 = (int)a4;
  if (v19 == 90)
  {
    v18 = (int)a4;
    v21 = (int)a5;
  }
  else
  {
    v21 = (int)a6;
  }
  if (v19 == 90)
    v17 = (int)a6;
  v22 = a7 / a8;
  if (a11 <= 0.0 || a11 == 1.0)
  {
    v23 = v22 * (a10 / a9);
    if (v23 <= 1.01)
    {
      if (v23 < 0.99)
      {
        v20 = (int)(v23 * (double)v20);
        v21 = ((int)(v23 * (double)v21) + 1) & 0xFFFFFFFE;
      }
    }
    else
    {
      v18 = (int)((double)v18 / v23);
      v17 = ((int)((double)v17 / v23) + 1) & 0xFFFFFFFE;
    }
  }
  else
  {
    v18 = (int)(a9 * ((double)v18 / (a10 * a11) / v22));
    v17 = ((int)(a9 * ((double)v17 / (a10 * a11) / v22)) + 1) & 0xFFFFFFFE;
    v20 = (int)(a10 * ((double)v20 / (a10 * a11)));
    v21 = ((int)(a10 * ((double)v21 / (a10 * a11))) + 1) & 0xFFFFFFFE;
  }
  v24 = v19 == 90;
  if (v19 == 90)
    v25 = v20;
  else
    v25 = v18;
  if (v24)
  {
    v20 = v18;
    v26 = v21;
  }
  else
  {
    v26 = v17;
  }
  if (v24)
    v21 = v17;
  *a2 = (double)v25;
  a2[1] = (double)v20;
  a2[2] = (double)v26;
  a2[3] = (double)v21;
  return 0;
}

uint64_t FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  signed int v9;
  signed int v10;
  double v11;

  v8 = a4 / a5;
  if (a8 <= 0.0 || a8 == 1.0)
  {
    v10 = (int)a3;
    v11 = v8 * a7 / a6;
    if (v11 <= 1.01)
    {
      v9 = (int)a2;
      if (v11 < 0.99)
        v10 = ((int)(a3 / v11) + 1) & 0xFFFFFFFE;
    }
    else
    {
      v9 = ((int)(a2 * v11) + 1) & 0xFFFFFFFE;
    }
  }
  else
  {
    v9 = ((int)(v8 * (a3 * a8)) + 1) & 0xFFFFFFFE;
    v10 = (int)(a3 * a8);
  }
  *a1 = (double)v9;
  a1[1] = (double)v10;
  return 0;
}

void FigDisplayModes_BuildColorAndTimingModes(int a1, int a2, int a3, int a4, unsigned int a5, int a6, int a7, __CFDictionary **a8, __CFDictionary **a9)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator **v16;
  __CFDictionary *Mutable;
  const __CFAllocator *v18;
  const CFDictionaryKeyCallBacks *v19;
  const CFDictionaryValueCallBacks *v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  __CFDictionary *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  int v28;
  int v29;

  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  v29 = a6;
  v28 = a1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  v16 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (a8)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    setNumberInCFDictionary(Mutable, CFSTR("ID"), a7);
    setNumberInCFDictionary(Mutable, CFSTR("Score"), a5);
    *a8 = Mutable;
  }
  if (a9)
  {
    v18 = *v16;
    v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    v21 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = CFDictionaryCreateMutable(v18, 0, v19, v20);
    v23 = CFDictionaryCreateMutable(v18, 0, v19, v20);
    setNumberInCFDictionary(v21, CFSTR("ID"), a7);
    setNumberInCFDictionary(v21, CFSTR("Score"), a5);
    v24 = (const void *)*MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v21, CFSTR("IsInterlaced"), (const void *)*MEMORY[0x1E0C9AE40]);
    v25 = (const void *)*MEMORY[0x1E0C9AE50];
    if (a3)
      v26 = (const void *)*MEMORY[0x1E0C9AE50];
    else
      v26 = v24;
    CFDictionarySetValue(v21, CFSTR("IsOverscanned"), v26);
    setNumberInCFDictionary(v22, CFSTR("Active"), v28);
    CFDictionarySetValue(v21, CFSTR("HorizontalAttributes"), v22);
    CFRelease(v22);
    setNumberInCFDictionary(v23, CFSTR("Active"), a2);
    setNumberInCFDictionary(v23, CFSTR("SyncRate"), a4 << 16);
    CFDictionarySetValue(v21, CFSTR("VerticalAttributes"), v23);
    CFRelease(v23);
    if (v29)
      v27 = v25;
    else
      v27 = v24;
    CFDictionarySetValue(v21, CFSTR("MirroringOnlyMode"), v27);
    *a9 = v21;
  }
}

void setNumberInCFDictionary(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  CFNumberRef v6;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  if (v5)
  {
    v6 = v5;
    CFDictionarySetValue(a1, a2, v5);
    CFRelease(v6);
  }
}

void FigDisplayModes_BuildColorModesFromHDRMode(const void *a1, const __CFDictionary *a2, int a3, unsigned int a4, __CFDictionary **a5)
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  setNumberInCFDictionary(Mutable, CFSTR("Score"), a4);
  setNumberInCFDictionary(Mutable, CFSTR("ID"), a3);
  if (a1 && !CFEqual(a1, CFSTR("SDR")))
  {
    if (CFEqual(a1, CFSTR("HDR10")) || CFEqual(a1, CFSTR("DoVi")))
    {
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("DynamicRange"), 0))
    {
      if (!CFEqual(0, CFSTR("LimitedRange")))
        CFEqual(0, CFSTR("FullRange"));
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("Gamut"), 0))
    {
      if (!CFEqual(0, CFSTR("Gamut_PQ")))
        CFEqual(0, CFSTR("Gamut_HLG"));
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("ColorSpace"), 0))
    {
      if (!CFEqual(0, CFSTR("ColorSpace_HDR10")))
        CFEqual(0, CFSTR("ColorSpace_DoVi"));
      FigCFDictionarySetInt();
    }
    if (CFDictionaryGetValueIfPresent(a2, CFSTR("PixelFormat"), 0))
    {
      if (!CFEqual(0, CFSTR("RGB")) && !CFEqual(0, CFSTR("YCrCb420")) && !CFEqual(0, CFSTR("YCrCb422")))
        CFEqual(0, CFSTR("YCrCb444"));
      FigCFDictionarySetInt();
    }
  }
  if (a5)
  {
    *a5 = Mutable;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t FigDisplayModes_CreateColorAndTimingModesArraysWithPreferredMode(const void *a1, const void *a2, __CFArray **a3, __CFArray **a4)
{
  const __CFAllocator *v8;
  const CFArrayCallBacks *v9;
  __CFArray *Mutable;
  CFMutableArrayRef v11;
  BOOL v12;
  __CFArray *v13;
  uint64_t result;
  NSObject *v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a1 && a2)
  {
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v11 = CFArrayCreateMutable(v8, 0, v9);
    if (Mutable)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (v12)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954510;
    }
    else
    {
      v13 = v11;
      CFArrayAppendValue(Mutable, a1);
      CFArrayAppendValue(v13, a2);
      result = 0;
      *a3 = Mutable;
      *a4 = v13;
    }
  }
  else
  {
    v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t FigDisplayModes_CreateSquarePixelTimingModeForTimingMode(const __CFDictionary *a1, CFMutableDictionaryRef *a2, double a3, double a4, double a5)
{
  uint64_t TimingModeDimensions;
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFAllocator *v15;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v17;
  __int128 v18;
  __int128 v19;
  __CFDictionary *v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  __CFDictionary *v23;
  uint64_t v24;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v31 = *MEMORY[0x1E0C9D820];
  v32 = v31;
  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_16:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  TimingModeDimensions = getTimingModeDimensions(a1, (double *)&v32);
  if ((_DWORD)TimingModeDimensions)
  {
    v24 = TimingModeDimensions;
    v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return v24;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("HorizontalAttributes"));
  if (!Value
    || (v12 = Value, (v13 = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("VerticalAttributes"))) == 0))
  {
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    goto LABEL_16;
  }
  v14 = v13;
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
  if (!MutableCopy)
  {
    v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954510;
  }
  v17 = MutableCopy;
  v18 = v32;
  FigDisplayModes_ConvertNonSquarePixelSizeToSquarePixelSize((double *)&v31, *(double *)&v32, *((double *)&v32 + 1), a3, a4, *(double *)&v32, *((double *)&v32 + 1), a5);
  v19 = v31;
  if (*(double *)&v18 == *(double *)&v31 && *((double *)&v18 + 1) == *((double *)&v31 + 1))
    goto LABEL_11;
  v20 = CFDictionaryCreateMutableCopy(v15, 0, v12);
  if (!v20
    || (v21 = v20,
        setNumberInCFDictionary(v20, CFSTR("Active"), (uint64_t)*(double *)&v19),
        CFDictionarySetValue(v17, CFSTR("HorizontalAttributes"), v21),
        CFRelease(v21),
        (v22 = CFDictionaryCreateMutableCopy(v15, 0, v14)) == 0))
  {
    v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFRelease(v17);
    return 4294954510;
  }
  v23 = v22;
  setNumberInCFDictionary(v22, CFSTR("Active"), (uint64_t)*((double *)&v19 + 1));
  CFDictionarySetValue(v17, CFSTR("VerticalAttributes"), v23);
  CFRelease(v23);
LABEL_11:
  v24 = 0;
  *a2 = v17;
  return v24;
}

uint64_t FigDisplayModes_CreateSquarePixelTimingModesArrayFromTimingModesAndDisplaySize(const __CFArray *a1, __CFArray **a2, double a3, double a4, double a5)
{
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  uint64_t Count;
  CFIndex v13;
  const __CFDictionary *ValueAtIndex;
  uint64_t SquarePixelTimingModeForTimingMode;
  const void *v16;
  uint64_t v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  void *value[21];

  value[20] = *(void **)MEMORY[0x1E0C80C00];
  if (a1)
  {
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v11 = Mutable;
      Count = CFArrayGetCount(a1);
      if (Count)
      {
        v13 = 0;
        while (1)
        {
          value[0] = 0;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v13);
          if (!ValueAtIndex)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            v17 = 4294954516;
            goto LABEL_14;
          }
          SquarePixelTimingModeForTimingMode = FigDisplayModes_CreateSquarePixelTimingModeForTimingMode(ValueAtIndex, (CFMutableDictionaryRef *)value, a3, a4, a5);
          if ((_DWORD)SquarePixelTimingModeForTimingMode)
            break;
          v16 = value[0];
          CFArrayAppendValue(v11, value[0]);
          if (v16)
            CFRelease(v16);
          if (Count == ++v13)
            goto LABEL_10;
        }
        v17 = SquarePixelTimingModeForTimingMode;
        v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_14:
        CFRelease(v11);
      }
      else
      {
LABEL_10:
        v17 = 0;
        *a2 = v11;
      }
    }
    else
    {
      v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954510;
    }
  }
  else
  {
    v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return v17;
}

uint64_t FigDisplayModes_CopyTimingModeAppendingPreferredUIScale(CFDictionaryRef theDict, int a2, CFMutableDictionaryRef *a3)
{
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v5;
  uint64_t result;
  NSObject *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (theDict && a2 && a3)
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theDict);
    if (MutableCopy)
    {
      v5 = MutableCopy;
      FigCFDictionarySetInt();
      result = 0;
      *a3 = v5;
    }
    else
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      return 4294954510;
    }
  }
  else
  {
    v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294954516;
  }
  return result;
}

uint64_t MTGetCGAffineTransformFrom3x3MatrixArray(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t valuePtr;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  if (CFArrayGetCount((CFArrayRef)a1) != 9)
    return FigSignalErrorAt();
  valuePtr = 0;
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  FigCFArrayGetCGFloatAtIndex();
  FigCFArrayGetCGFloatAtIndex();
  FigCFArrayGetCGFloatAtIndex();
  if (1.0 != 0.0)
    return FigSignalErrorAt();
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 0);
  CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
  v6 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 1);
  CFNumberGetValue(v6, kCFNumberCGFloatType, &v21);
  v7 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 3);
  CFNumberGetValue(v7, kCFNumberCGFloatType, &v20);
  v8 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 4);
  CFNumberGetValue(v8, kCFNumberCGFloatType, &v19);
  v9 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 6);
  CFNumberGetValue(v9, kCFNumberCGFloatType, &v18);
  v10 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)a1, 7);
  CFNumberGetValue(v10, kCFNumberCGFloatType, &v17);
  result = 0;
  if (a2)
  {
    v12 = v17;
    v13 = v18;
    v14 = v19;
    v15 = v20;
    v16 = v21;
    *a2 = valuePtr;
    a2[1] = v16;
    a2[2] = v15;
    a2[3] = v14;
    a2[4] = v13;
    a2[5] = v12;
  }
  return result;
}

uint64_t MTCreate3x3MatrixArrayFromCGAffineTransform(const __CFAllocator *a1, double *a2, __CFArray **a3)
{
  __CFArray *Mutable;
  __CFArray *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    Mutable = CFArrayCreateMutable(a1, 9, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v6 = Mutable;
      v7 = fcgs_AddCGFloatToArray(Mutable, *a2);
      if ((_DWORD)v7
        || (v7 = fcgs_AddCGFloatToArray(v6, a2[1]), (_DWORD)v7)
        || (v7 = fcgs_AddCGFloatToArray(v6, 0.0), (_DWORD)v7)
        || (v7 = fcgs_AddCGFloatToArray(v6, a2[2]), (_DWORD)v7)
        || (v7 = fcgs_AddCGFloatToArray(v6, a2[3]), (_DWORD)v7)
        || (v7 = fcgs_AddCGFloatToArray(v6, 0.0), (_DWORD)v7)
        || (v7 = fcgs_AddCGFloatToArray(v6, a2[4]), (_DWORD)v7)
        || (v7 = fcgs_AddCGFloatToArray(v6, a2[5]), (_DWORD)v7))
      {
        v8 = v7;
      }
      else
      {
        v8 = fcgs_AddCGFloatToArray(v6, 1.0);
        if (!(_DWORD)v8)
        {
          *a3 = v6;
          return v8;
        }
      }
      CFRelease(v6);
      return v8;
    }
  }
  return FigSignalErrorAt();
}

uint64_t fcgs_AddCGFloatToArray(__CFArray *a1, double a2)
{
  CFNumberRef v3;
  CFNumberRef v4;
  double valuePtr;

  valuePtr = a2;
  if (!a1)
    return FigSignalErrorAt();
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &valuePtr);
  if (!v3)
    return FigSignalErrorAt();
  v4 = v3;
  CFArrayAppendValue(a1, v3);
  CFRelease(v4);
  return 0;
}

uint64_t FigGetCGAffineTransformFrom3x3MatrixArray@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = MEMORY[0x1E0C9BAA8];
  v4 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a2 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v3 + 32);
  return MTGetCGAffineTransformFrom3x3MatrixArray(a1, (_QWORD *)a2);
}

__CFArray *FigCreate3x3MatrixArrayFromCGAffineTransform(const __CFAllocator *a1, _OWORD *a2)
{
  __int128 v2;
  _OWORD v4[3];
  __CFArray *v5;

  v5 = 0;
  v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  v4[2] = a2[2];
  MTCreate3x3MatrixArrayFromCGAffineTransform(a1, (double *)v4, &v5);
  return v5;
}

double FigGetCGAffineTransformFrom3x2MatrixArray@<D0>(const __CFArray *a1@<X0>, double *a2@<X8>)
{
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  const __CFNumber *v8;
  const __CFNumber *v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double valuePtr;

  valuePtr = 0.0;
  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 0);
  CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
  v5 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 1);
  CFNumberGetValue(v5, kCFNumberCGFloatType, &v20);
  v6 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 2);
  CFNumberGetValue(v6, kCFNumberCGFloatType, &v19);
  v7 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 3);
  CFNumberGetValue(v7, kCFNumberCGFloatType, &v18);
  v8 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 4);
  CFNumberGetValue(v8, kCFNumberCGFloatType, &v17);
  v9 = (const __CFNumber *)CFArrayGetValueAtIndex(a1, 5);
  CFNumberGetValue(v9, kCFNumberCGFloatType, &v16);
  result = valuePtr;
  v12 = v19;
  v11 = v20;
  v14 = v17;
  v13 = v18;
  v15 = v16;
  *a2 = valuePtr;
  *((_QWORD *)a2 + 1) = v11;
  *((_QWORD *)a2 + 2) = v12;
  *((_QWORD *)a2 + 3) = v13;
  *((_QWORD *)a2 + 4) = v14;
  *((_QWORD *)a2 + 5) = v15;
  return result;
}

__CFArray *FigCreate3x2MatrixArrayFromCGAffineTransform(const __CFAllocator *a1, double *a2)
{
  __CFArray *Mutable;
  __CFArray *v4;

  Mutable = CFArrayCreateMutable(a1, 6, MEMORY[0x1E0C9B378]);
  v4 = Mutable;
  if (Mutable)
  {
    if (fcgs_AddCGFloatToArray(Mutable, *a2)
      || fcgs_AddCGFloatToArray(v4, a2[1])
      || fcgs_AddCGFloatToArray(v4, a2[2])
      || fcgs_AddCGFloatToArray(v4, a2[3])
      || fcgs_AddCGFloatToArray(v4, a2[4])
      || fcgs_AddCGFloatToArray(v4, a2[5]))
    {
      CFRelease(v4);
      return 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return v4;
}

uint64_t FigGetRotationAngleAndFlipsFromCGAffineTransform(double *a1, _BYTE *a2, _BYTE *a3)
{
  double v3;
  int v4;
  int v5;
  double v6;
  int v7;
  int v8;
  double v9;
  double v10;
  int v11;
  int v12;
  double v13;
  int v14;
  unsigned int v15;
  uint64_t result;

  v3 = *a1 * 65536.0;
  if (v3 >= -2147483650.0)
    v4 = (int)v3;
  else
    v4 = 0x80000000;
  if (v3 <= 2147483650.0)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  v6 = a1[1] * 65536.0;
  if (v6 >= -2147483650.0)
    v7 = (int)v6;
  else
    v7 = 0x80000000;
  if (v6 <= 2147483650.0)
    v8 = v7;
  else
    v8 = 0x7FFFFFFF;
  v9 = a1[3];
  v10 = a1[2] * 65536.0;
  if (v10 >= -2147483650.0)
    v11 = (int)v10;
  else
    v11 = 0x80000000;
  if (v10 <= 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFF;
  v13 = v9 * 65536.0;
  if (v9 * 65536.0 <= 2147483650.0)
  {
    if (v13 >= -2147483650.0)
    {
      v14 = (int)v13;
      if (v5)
        goto LABEL_32;
    }
    else
    {
      v14 = 0x80000000;
      if (v5)
        goto LABEL_32;
    }
  }
  else
  {
    v14 = 0x7FFFFFFF;
    if (v5)
      goto LABEL_32;
  }
  if (v14 || !v8 || !v12)
  {
LABEL_32:
    result = 0;
    if (!v5 || v8 || v12)
    {
      LOBYTE(v15) = 0;
      LOBYTE(v12) = 0;
    }
    else
    {
      LOBYTE(v15) = 0;
      LOBYTE(v12) = 0;
      if (v14)
      {
        if ((v5 & 0x80000000) == 0)
        {
          result = 0;
          LOBYTE(v12) = 0;
          v15 = v14 >> 31;
          if (!a2)
            goto LABEL_44;
LABEL_43:
          *a2 = v15;
          goto LABEL_44;
        }
        LOBYTE(v15) = 0;
        LOBYTE(v12) = v14 > 0;
        if (v14 <= 0)
          result = 180;
        else
          result = 0;
        if (a2)
          goto LABEL_43;
        goto LABEL_44;
      }
    }
    if (!a2)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (v8 >= 1)
  {
    LOBYTE(v15) = 0;
    LOBYTE(v12) = v12 > 0;
    result = 90;
    if (!a2)
      goto LABEL_44;
    goto LABEL_43;
  }
  LOBYTE(v15) = 0;
  v12 = v12 >> 31;
  result = 270;
  if (a2)
    goto LABEL_43;
LABEL_44:
  if (a3)
    *a3 = v12;
  return result;
}

uint64_t FigAssetTableAddAsset()
{
  if (PerformOneTimeAssetTableInitialization_sAssetTableInit != -1)
    dispatch_once_f(&PerformOneTimeAssetTableInitialization_sAssetTableInit, 0, (dispatch_function_t)figAssetTable_InitializeAssetTable);
  return FigCFWeakReferenceTableAddValueAndGetKey();
}

uint64_t FigAssetTableRemoveAsset()
{
  if (PerformOneTimeAssetTableInitialization_sAssetTableInit != -1)
    dispatch_once_f(&PerformOneTimeAssetTableInitialization_sAssetTableInit, 0, (dispatch_function_t)figAssetTable_InitializeAssetTable);
  return FigCFWeakReferenceTableRemoveValue();
}

uint64_t FigAssetTableCopyAsset(uint64_t a1, uint64_t *a2)
{
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = 0;
  if (PerformOneTimeAssetTableInitialization_sAssetTableInit != -1)
    dispatch_once_f(&PerformOneTimeAssetTableInitialization_sAssetTableInit, 0, (dispatch_function_t)figAssetTable_InitializeAssetTable);
  *a2 = FigCFWeakReferenceTableCopyValue();
  return 0;
}

uint64_t FigAssetCopyAssetWithDownloadToken(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  result = FigAssetTableCopyAsset(a1, a2);
  if (!*a2)
    return FigSignalErrorAt();
  return result;
}

uint64_t figAssetTable_InitializeAssetTable()
{
  return FigCFWeakReferenceTableCreate();
}

uint64_t FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared()
{
  if (FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_onceToken != -1)
    dispatch_once(&FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_onceToken, &__block_literal_global_96);
  return FigBufferedAirPlayGlobalRoutingRegistryLocalGetShared_sGlobalRegistry;
}

uint64_t localGlobalRoutingRegistry_bufferedClientUpdateNotificationCallback()
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3480)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

uint64_t localGlobalRoutingRegistry_registerClient()
{
  CMBaseObjectGetDerivedStorage();
  return FigBufferedAirPlayClientRoutingRegistryRegisterClientWithRemoteID();
}

uint64_t localGlobalRoutingRegistry_registerClientWithRemoteID()
{
  CMBaseObjectGetDerivedStorage();
  return FigBufferedAirPlayClientRoutingRegistryRegisterClientWithRemoteID();
}

uint64_t localGlobalRoutingRegistry_unRegisterClient()
{
  CMBaseObjectGetDerivedStorage();
  return FigBufferedAirPlayClientRoutingRegistryUnregisterClientWithRemoteID();
}

uint64_t localGlobalRoutingRegistry_unRegisterClientWithRemoteID()
{
  CMBaseObjectGetDerivedStorage();
  return FigBufferedAirPlayClientRoutingRegistryUnregisterClientWithRemoteID();
}

uint64_t localGlobalRoutingRegistry_getCountOfRunningClientsForRoutingContext()
{
  CMBaseObjectGetDerivedStorage();
  return FigBufferedAirPlayClientRoutingRegistryGetCountOfRunningClientsForRoutingContext();
}

uint64_t localGlobalRoutingRegistry_clearAllClientWithRemoteID()
{
  CMBaseObjectGetDerivedStorage();
  return FigBufferedAirPlayClientRoutingRegistryClearAllClientsWithRemoteID();
}

void localGlobalRoutingRegistry_Finalize()
{
  uint64_t DerivedStorage;
  NSObject *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  v1 = *(NSObject **)(DerivedStorage + 8);
  if (v1)
  {
    dispatch_release(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  FigBytePumpRelease(*(CFTypeRef *)DerivedStorage);
  __break(1u);
}

CFStringRef localGlobalRoutingRegistry_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<LocalGlobalRoutingRegistry: %p retainCount: %ld>"), a1, v3);
}

uint64_t FigMediaparserdUtilities_StartMediaparserdUtilitiesServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigMediaparserdUtilities_StartMediaparserdUtilitiesServer_block_invoke;
  block[3] = &unk_1E2FB1D10;
  block[4] = &v3;
  if (FigMediaparserdUtilities_StartMediaparserdUtilitiesServer_sFigMediaparserdUtilitiesServerSetupOnce != -1)
    dispatch_once(&FigMediaparserdUtilities_StartMediaparserdUtilitiesServer_sFigMediaparserdUtilitiesServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigMediaparserdUtilities_handleMessage()
{
  return 0;
}

uint64_t FigMediaparserdUtilities_noReplyHandleMessage()
{
  return 0;
}

uint64_t oobtcontroller_initOnce(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t FigOutOfBandTrackControllerCreate(uint64_t a1, const void *a2, const void *a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v8;
  dispatch_queue_t v9;
  CFTypeRef v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  if (!a2 || !a4)
    return FigSignalErrorAt();
  if (FigOutOfBandTrackControllerGetTypeID_oobTCInitOnce != -1)
    dispatch_once_f(&FigOutOfBandTrackControllerGetTypeID_oobTCInitOnce, &FigOutOfBandTrackControllerGetTypeID_oobTCTypeID, (dispatch_function_t)oobtcontroller_initOnce);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294954434;
  v8 = Instance;
  v9 = dispatch_queue_create("com.apple.coremedia.oobtc_workqueue", 0);
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    *(_QWORD *)(v8 + 40) = CFRetain(a2);
    if (a3)
      v10 = CFRetain(a3);
    else
      v10 = 0;
    *(_QWORD *)(v8 + 48) = v10;
    *(_DWORD *)(v8 + 232) = 0;
    v11 = MEMORY[0x1E0CA2E18];
    v12 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(v8 + 184) = *MEMORY[0x1E0CA2E18];
    v13 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v8 + 200) = v13;
    *(_OWORD *)(v8 + 208) = v12;
    *(_QWORD *)(v8 + 224) = v13;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRegisterForBarrierSupport();
    result = 0;
    *a4 = v8;
  }
  else
  {
    v15 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v8);
    return v15;
  }
  return result;
}

void FigOutOfBandTrackControllerInvalidate(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD);
  uint64_t FigBaseObject;
  _QWORD *v6;
  void (*v7)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;

  if (!*(_BYTE *)(a1 + 16))
  {
    v2 = *(NSObject **)(a1 + 24);
    if (v2)
      dispatch_sync(v2, &__block_literal_global_97);
    v3 = *(_QWORD *)(a1 + 168);
    if (v3)
    {
      v4 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v4)
        v4(v3, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(a1 + 168));
      v6 = *(_QWORD **)(CMBaseObjectGetVTable() + 8);
      if (*v6 >= 2uLL)
      {
        v7 = (void (*)(uint64_t))v6[8];
        if (v7)
          v7(FigBaseObject);
      }
    }
    *(_BYTE *)(a1 + 16) = 1;
    if (*(_QWORD *)(a1 + 176))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    v8 = *(NSObject **)(a1 + 24);
    if (v8)
    {
      dispatch_sync(v8, &__block_literal_global_26_0);
      dispatch_release(*(dispatch_object_t *)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
    }
    v9 = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(a1 + 176));
    if (v9)
    {
      v10 = v9;
      v11 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v11)
        v11(v10);
    }
    v12 = *(const void **)(a1 + 176);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 176) = 0;
    }
    v13 = FigPlayerGetFigBaseObject(*(_QWORD *)(a1 + 168));
    if (v13)
    {
      v14 = v13;
      v15 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v15)
        v15(v14);
    }
    v16 = *(const void **)(a1 + 168);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a1 + 168) = 0;
    }
    v17 = *(const void **)(a1 + 160);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a1 + 160) = 0;
    }
    v18 = *(const void **)(a1 + 152);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v19 = *(const void **)(a1 + 144);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(a1 + 144) = 0;
    }
    v20 = *(const void **)(a1 + 40);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v21 = *(const void **)(a1 + 48);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v22 = *(const void **)(a1 + 104);
    if (v22)
    {
      CFRelease(v22);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v23 = *(const void **)(a1 + 120);
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(a1 + 120) = 0;
    }
    v24 = *(const void **)(a1 + 128);
    if (v24)
    {
      CFRelease(v24);
      *(_QWORD *)(a1 + 128) = 0;
    }
    v25 = *(const void **)(a1 + 136);
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(a1 + 136) = 0;
    }
  }
}

void oobtcontroller_handlePlayerNotification(int a1, uint64_t a2, CFTypeRef cf1)
{
  if (a2 && !*(_BYTE *)(a2 + 16))
  {
    if (CFEqual(cf1, CFSTR("SubtitleChanged")))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
}

void oobtcontroller_handlePlaybackItemNotification(int a1, uint64_t a2, CFTypeRef cf1)
{
  if (a2
    && !*(_BYTE *)(a2 + 16)
    && (CFEqual(cf1, CFSTR("FailedToBecomeReadyForInspection"))
     || CFEqual(cf1, CFSTR("FailedToBecomeReadyForPlayback"))
     || CFEqual(cf1, CFSTR("FailedToPlayToEnd"))))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

uint64_t FigOutOfBandTrackControllerSetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  CFTypeID v6;
  uint64_t result;
  const __CFBoolean *v8;
  int v9;
  int Value;
  const void *v11;
  const void *v12;
  CFTypeID v13;
  const void *v14;
  const __CFString *v15;
  uint64_t v16;
  CFTypeID v17;
  const void *v18;
  const __CFString *v19;
  uint64_t v20;
  CFTypeID v21;
  const void *v22;
  NSObject *v23;
  _QWORD *v24;
  const void *v25;
  CFTypeID v26;
  const void *v27;
  _QWORD v28[5];
  _QWORD block[5];

  if (!a1)
    return FigSignalErrorAt();
  if (CFEqual(cf1, CFSTR("UsingNeroVideo")))
  {
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 == CFDictionaryGetTypeID())
      {
        result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("Visuals"));
        if (!result)
          return result;
        v8 = (const __CFBoolean *)result;
        v9 = *(unsigned __int8 *)(a1 + 112);
        if (v9 != CFBooleanGetValue((CFBooleanRef)result))
        {
          Value = CFBooleanGetValue(v8);
          *(_BYTE *)(a1 + 112) = Value;
          if (Value)
          {
            v11 = CFDictionaryGetValue((CFDictionaryRef)a3, CFSTR("NeroTransport"));
            if (v11)
            {
              v12 = *(const void **)(a1 + 240);
              *(_QWORD *)(a1 + 240) = v11;
              CFRetain(v11);
              if (v12)
                CFRelease(v12);
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
            v25 = *(const void **)(a1 + 240);
            if (v25)
            {
              CFRelease(v25);
              *(_QWORD *)(a1 + 240) = 0;
            }
          }
          oobtcontroller_updateNeroVideoMode(a1);
        }
        return 0;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, CFSTR("NeroVideoDimensions")))
  {
    if (!a3)
      return FigSignalErrorAt();
    v13 = CFGetTypeID(a3);
    if (v13 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
    v14 = *(const void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = a3;
    CFRetain(a3);
    if (v14)
      CFRelease(v14);
    if (!*(_BYTE *)(a1 + 16) && FigAtomicCompareAndSwap32())
    {
      CFRetain((CFTypeRef)a1);
      v23 = *(NSObject **)(a1 + 24);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __FigOutOfBandTrackControllerSetProperty_block_invoke;
      block[3] = &__block_descriptor_tmp_27_5;
      block[4] = a1;
      v24 = block;
LABEL_39:
      dispatch_async(v23, v24);
      return 0;
    }
    result = *(_QWORD *)(a1 + 176);
    if (!result)
      return result;
    v15 = CFSTR("OutOfBandTextRenderingVideoDimensions");
    v16 = *(_QWORD *)(a1 + 120);
    goto LABEL_19;
  }
  if (CFEqual(cf1, CFSTR("NeroDisplaySize")))
  {
    if (!a3)
      return FigSignalErrorAt();
    v17 = CFGetTypeID(a3);
    if (v17 != CFDictionaryGetTypeID())
      return FigSignalErrorAt();
    v18 = *(const void **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = a3;
    CFRetain(a3);
    if (v18)
      CFRelease(v18);
    result = *(_QWORD *)(a1 + 168);
    if (result)
    {
      v19 = CFSTR("NeroDisplaySize");
      v20 = *(_QWORD *)(a1 + 128);
      goto LABEL_35;
    }
  }
  else
  {
    if (!CFEqual(cf1, CFSTR("NeroVideoGravity")))
    {
      if (!CFEqual(cf1, CFSTR("TextMarkupArray")))
        return 4294954436;
      if (!a3)
        return FigSignalErrorAt();
      v26 = CFGetTypeID(a3);
      if (v26 != CFArrayGetTypeID())
        return FigSignalErrorAt();
      v27 = *(const void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = a3;
      CFRetain(a3);
      if (v27)
        CFRelease(v27);
      if (!*(_BYTE *)(a1 + 16) && FigAtomicCompareAndSwap32())
      {
        CFRetain((CFTypeRef)a1);
        v23 = *(NSObject **)(a1 + 24);
        v28[0] = MEMORY[0x1E0C809B0];
        v28[1] = 0x40000000;
        v28[2] = __FigOutOfBandTrackControllerSetProperty_block_invoke_2;
        v28[3] = &__block_descriptor_tmp_28_3;
        v28[4] = a1;
        v24 = v28;
        goto LABEL_39;
      }
      result = *(_QWORD *)(a1 + 176);
      if (!result)
        return result;
      v15 = CFSTR("TextMarkupArray");
      v16 = *(_QWORD *)(a1 + 104);
LABEL_19:
      result = FigPlaybackItemSetProperty(result, (uint64_t)v15, v16);
      if (!(_DWORD)result)
        return result;
      return FigSignalErrorAt();
    }
    if (!a3)
      return FigSignalErrorAt();
    v21 = CFGetTypeID(a3);
    if (v21 != CFStringGetTypeID())
      return FigSignalErrorAt();
    v22 = *(const void **)(a1 + 136);
    *(_QWORD *)(a1 + 136) = a3;
    CFRetain(a3);
    if (v22)
      CFRelease(v22);
    result = *(_QWORD *)(a1 + 168);
    if (result)
    {
      v19 = CFSTR("NeroVideoGravity");
      v20 = *(_QWORD *)(a1 + 136);
LABEL_35:
      result = FigPlayerSetProperty(result, (uint64_t)v19, v20);
      if (!(_DWORD)result)
        return result;
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t oobtcontroller_updateNeroVideoMode(uint64_t result)
{
  uint64_t v1;
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, __CFDictionary *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t);
  uint64_t v13;

  if (!*(_QWORD *)(result + 168))
    return result;
  v1 = result;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v3 = Mutable;
  v4 = *MEMORY[0x1E0C9AE50];
  v5 = *MEMORY[0x1E0C9AE40];
  if (*(_BYTE *)(v1 + 112))
    v6 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v6 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(Mutable, CFSTR("Visuals"), v6);
  if (*(_BYTE *)(v1 + 112))
    CFDictionarySetValue(v3, CFSTR("NeroTransport"), *(const void **)(v1 + 168));
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v1 + 168));
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, __CFDictionary *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (!v8)
  {
    CFRelease(v3);
    return FigSignalErrorAt();
  }
  v9 = v8(FigBaseObject, CFSTR("SendToNero"), v3);
  CFRelease(v3);
  if (v9)
    return FigSignalErrorAt();
  v10 = *(unsigned __int8 *)(v1 + 112);
  v11 = FigPlayerGetFigBaseObject(*(_QWORD *)(v1 + 168));
  v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v10 ? v4 : v5;
  result = v12(v11, CFSTR("OutOfBandTextRenderingForNeroVideo"), v13);
  if ((_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigOutOfBandTrackControllerPrepare(uint64_t a1)
{
  _QWORD *v2;
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, const __CFString *);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, const __CFString *, uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, uint64_t);
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, const __CFString *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, const __CFString *, uint64_t);
  NSObject *v18;
  _QWORD block[5];

  v2 = (_QWORD *)(a1 + 168);
  if (!*(_QWORD *)(a1 + 168))
  {
    if (FigPlayerFileCreate(*MEMORY[0x1E0C9AE00], v2))
      return FigSignalErrorAt();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(a1 + 168));
    v4 = *(void (**)(uint64_t, const __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
    if (v4)
      v4(FigBaseObject, CFSTR("ActionAtEnd"), CFSTR("None"));
    v5 = *MEMORY[0x1E0C9AE50];
    v6 = FigPlayerGetFigBaseObject(*v2);
    v7 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v7)
      v7(v6, CFSTR("DisplayNonForcedSubtitles"), v5);
    v8 = FigPlayerGetFigBaseObject(*v2);
    v9 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v9)
      v9(v8, CFSTR("PrepareItemOnDispatchQueue"), v5);
  }
  v10 = *v2;
  v11 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v11)
    v11(v10, 0);
  oobtcontroller_updateNeroVideoMode(a1);
  if (!*(_BYTE *)(a1 + 112)
    || ((v12 = *(_QWORD *)(a1 + 128)) == 0
     || (v13 = FigPlayerGetFigBaseObject(*v2),
         (v14 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56)) != 0)
     && !v14(v13, CFSTR("NeroDisplaySize"), v12))
    && ((v15 = *(_QWORD *)(a1 + 136)) == 0
     || (v16 = FigPlayerGetFigBaseObject(*v2),
         (v17 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56)) != 0)
     && !v17(v16, CFSTR("NeroVideoGravity"), v15)))
  {
    CFRetain((CFTypeRef)a1);
    v18 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigOutOfBandTrackControllerPrepare_block_invoke;
    block[3] = &__block_descriptor_tmp_29_5;
    block[4] = a1;
    dispatch_async(v18, block);
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigOutOfBandTrackControllerSetCurrentTime(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, __int128 *, _QWORD);
  uint64_t result;
  NSObject *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD block[5];
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 16) || !FigAtomicCompareAndSwap32())
  {
    v4 = *(_QWORD *)(a1 + 176);
    if (v4)
    {
      v10 = *a2;
      v11 = *((_QWORD *)a2 + 2);
      v5 = *(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (v5)
      {
        v15 = v10;
        v16 = v11;
        return v5(v4, &v15, 0);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      result = 0;
      v8 = *a2;
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 184) = v8;
      v9 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(a1 + 208) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(v9 + 16);
    }
  }
  else
  {
    CFRetain((CFTypeRef)a1);
    v7 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigOutOfBandTrackControllerSetCurrentTime_block_invoke;
    block[3] = &__block_descriptor_tmp_30_2;
    block[4] = a1;
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    dispatch_async(v7, block);
    return 0;
  }
  return result;
}

uint64_t FigOutOfBandTrackControllerSetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, float a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, __int128 *, __int128 *, _QWORD, float);
  uint64_t result;
  NSObject *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD block[5];
  float v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  if (*(_BYTE *)(a1 + 16) || !FigAtomicCompareAndSwap32())
  {
    v8 = *(_QWORD *)(a1 + 168);
    if (v8)
    {
      v16 = *a2;
      v17 = *((_QWORD *)a2 + 2);
      v14 = *a3;
      v15 = *((_QWORD *)a3 + 2);
      v9 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, _QWORD, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 88);
      if (v9)
      {
        v26 = v16;
        v27 = v17;
        v24 = v14;
        v25 = v15;
        return v9(v8, &v26, &v24, 0, a4);
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      result = 0;
      *(float *)(a1 + 232) = a4;
      v12 = *a2;
      *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(a1 + 184) = v12;
      v13 = *a3;
      *(_QWORD *)(a1 + 224) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(a1 + 208) = v13;
    }
  }
  else
  {
    CFRetain((CFTypeRef)a1);
    v11 = *(NSObject **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __FigOutOfBandTrackControllerSetRateAndAnchorTime_block_invoke;
    block[3] = &__block_descriptor_tmp_31_5;
    block[4] = a1;
    v19 = a4;
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    v22 = *a3;
    v23 = *((_QWORD *)a3 + 2);
    dispatch_async(v11, block);
    return 0;
  }
  return result;
}

double oobtcontroller_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t oobtcontroller_finalize(uint64_t a1)
{
  FigOutOfBandTrackControllerInvalidate(a1);
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterUnregisterForBarrierSupport();
}

CFStringRef oobtcontroller_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigOutOfBandTrackController %p]"), a1);
}

__CFString *oobtcontroller_copyDebugDesc(uint64_t a1)
{
  __CFString *Mutable;
  const char *v3;

  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigOutOfBandTrackController: %p"), a1);
  if (*(_QWORD *)(a1 + 40))
    CFStringAppendFormat(Mutable, 0, CFSTR(" SourceURL: %@"), *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 168))
    CFStringAppendFormat(Mutable, 0, CFSTR(" Player: %p"), *(_QWORD *)(a1 + 168));
  if (*(_QWORD *)(a1 + 176))
    CFStringAppendFormat(Mutable, 0, CFSTR(" Item: %p"), *(_QWORD *)(a1 + 176));
  if (*(_BYTE *)(a1 + 112))
    v3 = "ACTIVE";
  else
    v3 = "Inactive";
  CFStringAppendFormat(Mutable, 0, CFSTR(" NeroVideo is %s"), v3);
  CFStringAppendFormat(Mutable, 0, CFSTR(">\n"));
  return Mutable;
}

uint64_t RegisterFigPropertyStorageIDType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPropertyStorageID = result;
  return result;
}

uint64_t FigPropertyStorageCreate(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;
  uint64_t v4;

  if (sRegisterFigPropertyStorageTypeOnce != -1)
    dispatch_once_f(&sRegisterFigPropertyStorageTypeOnce, 0, (dispatch_function_t)RegisterFigPropertyStorageIDType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = Instance;
  *(_QWORD *)(Instance + 16) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(v4 + 24) = dispatch_queue_create("com.apple.coremedia.figplayerstoragequeue", MEMORY[0x1E0C80D50]);
  *a2 = v4;
  return 0;
}

void FigPropertyStorageInvalidate(dispatch_queue_t *context)
{
  dispatch_barrier_sync_f(context[3], context, (dispatch_function_t)_figPropertyStorageInvalidate);
}

uint64_t _figPropertyStorageInvalidate(uint64_t result)
{
  *(_BYTE *)(result + 32) = 1;
  return result;
}

uint64_t FigPropertyStorageCopyValue(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD v5[3];
  uint64_t v6;

  v5[0] = 0;
  v5[1] = a1;
  v5[2] = a2;
  v6 = 0;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 24), v5, (dispatch_function_t)_figPropertyStorageCopyValue);
  *a3 = v6;
  return LODWORD(v5[0]);
}

char *_figPropertyStorageCopyValue(char *result)
{
  int *v1;
  uint64_t v2;
  int v3;
  CFTypeRef *v4;

  v1 = (int *)result;
  v2 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v2 + 32))
  {
    v3 = -12785;
LABEL_3:
    *v1 = v3;
    return result;
  }
  v4 = (CFTypeRef *)(result + 24);
  result = (char *)CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v2 + 16), *((const void **)result + 2), (const void **)result + 3);
  if (!(_DWORD)result)
  {
    v3 = -12784;
    goto LABEL_3;
  }
  result = (char *)*v4;
  if (*v4)
    return (char *)CFRetain(result);
  return result;
}

void FigPropertyStorageSetValue(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFTypeID v6;
  CFTypeRef v7;
  _QWORD v8[4];

  v8[0] = 0;
  v8[1] = a1;
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (v6 == CFStringGetTypeID())
    {
      v8[2] = CFRetain(cf);
      if (a3)
        v7 = CFRetain(a3);
      else
        v7 = 0;
      v8[3] = v7;
      dispatch_barrier_sync_f(*(dispatch_queue_t *)(a1 + 24), v8, (dispatch_function_t)_figPropertyStorageSetValue);
    }
  }
}

void _figPropertyStorageSetValue(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  NSObject *global_queue;
  const void *v6;
  const void *v7;
  void *value;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 16), *(const void **)(a1 + 16), v3);
  }
  else
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(v2 + 16), *(const void **)(a1 + 16), (const void **)&value))
    {
      if (value)
      {
        CFRetain(value);
        v4 = value;
      }
      else
      {
        v4 = 0;
      }
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_async_f(global_queue, v4, (dispatch_function_t)_figPropertyStorageReleaseAsync);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v2 + 16), *(const void **)(a1 + 16));
  }
  v6 = *(const void **)(a1 + 24);
  if (v6)
    CFRelease(v6);
  v7 = *(const void **)(a1 + 16);
  if (v7)
    CFRelease(v7);
}

_QWORD *figPropertyStorageInit(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figPropertyStorageFinalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
}

__CFString *figPropertyStorageCopyDesc(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t v4;
  const void *v5;
  const __CFString *v6;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  v4 = FigCFCopyCompactDescription();
  v5 = (const void *)v4;
  if (a1[2])
    v6 = (const __CFString *)v4;
  else
    v6 = CFSTR("<No property values stored>");
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPropertyStorageRef %p>\n\tProperties:\n\t\t%@"), a1, v6);
  if (v5)
    CFRelease(v5);
  return Mutable;
}

void _figPropertyStorageReleaseAsync(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigCRABSCachePrimerStart(dispatch_queue_t *context)
{
  dispatch_async_f(context[3], context, (dispatch_function_t)figCachePrimer_PerformCacheTransfer);
  return 0;
}

void figCachePrimer_PerformCacheTransfer(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  CFTypeRef cf;
  int valuePtr;

  if (!*(_DWORD *)(a1 + 16))
  {
    *(_DWORD *)(a1 + 16) = 1;
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 40);
    if (v3)
    {
      valuePtr = v3(v2, a1, 0, figCachePrimer_WriteBytes);
      if (!valuePtr)
      {
        *(_DWORD *)(a1 + 16) = 2;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        return;
      }
    }
    else
    {
      valuePtr = -12782;
    }
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
    v5 = CFDictionaryCreate(v4, (const void **)&kFigCRABSCachePrimerParameter_Result, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v5)
      CFRelease(v5);
    if (cf)
      CFRelease(cf);
    if (*(_DWORD *)(a1 + 16) == 1)
      *(_DWORD *)(a1 + 16) = 3;
  }
}

uint64_t RegisterFigCRABSCachePrimerType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCRABSCachePrimerID = result;
  return result;
}

uint64_t FigCRABSCachePrimerCreate(uint64_t a1, const void *a2, const void *a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v8;
  dispatch_queue_t v9;
  uint64_t v11;

  if (!a2 || !a3 || !a4)
    return FigSignalErrorAt();
  if (sRegisterFigCRABSCachePrimerTypeOnce != -1)
    dispatch_once_f(&sRegisterFigCRABSCachePrimerTypeOnce, 0, (dispatch_function_t)RegisterFigCRABSCachePrimerType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v8 = Instance;
  v9 = dispatch_queue_create("CRABSCachePrimerWorkQueue", 0);
  *(_QWORD *)(v8 + 24) = v9;
  if (v9)
  {
    *(_QWORD *)(v8 + 32) = CFRetain(a2);
    *(_QWORD *)(v8 + 40) = CFRetain(a3);
    *(_DWORD *)(v8 + 16) = 0;
    *a4 = v8;
    return 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
    CFRelease((CFTypeRef)v8);
    return v11;
  }
}

uint64_t figCachePrimer_WriteBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  if (*(_BYTE *)(a1 + 20))
  {
    *(_DWORD *)(a1 + 16) = 4;
    return 4294955234;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 16);
    if (v9)
      return v9(v8, a2, a3, a4, 0);
    else
      return 4294954514;
  }
}

double figCRABSCachePrimerInit(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figCRABSCachePrimerFinalize(_QWORD *context)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  NSObject *v5;

  if (!*((_BYTE *)context + 20))
  {
    v2 = context[3];
    if (v2)
    {
      *((_BYTE *)context + 20) = 1;
      dispatch_sync_f(v2, context, (dispatch_function_t)figCachePrimer_EmptyBlock);
    }
  }
  v3 = (const void *)context[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)context[5];
  if (v4)
    CFRelease(v4);
  v5 = context[3];
  if (v5)
    dispatch_release(v5);
}

__CFString *figCRABSCachePrimerCopyDesc(unsigned int *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCRABSCachePrimer %p status %d>"), a1, a1[4]);
  return Mutable;
}

uint64_t _FigNeroPlayServerSetDeviceUID(uint64_t a1, const void *a2)
{
  const void *v4;
  char *v5;
  char *v6;
  int v7;

  if (FigCFEqual())
    return 0;
  v4 = *(const void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  if (a2)
  {
    v5 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
    *(_QWORD *)(a1 + 208) = v5;
    if (v5)
    {
      *(_QWORD *)v5 = 0x40E7700000000000;
      *(_OWORD *)(v5 + 8) = xmmword_1932FCFC0;
      *(_OWORD *)(v5 + 24) = xmmword_1932FCFD0;
      *(int64x2_t *)(v5 + 40) = vdupq_n_s64(0x40E7700000000000uLL);
      *(_DWORD *)(a1 + 216) = 1;
    }
    if (!*(_BYTE *)(a1 + 220))
      goto LABEL_14;
    v6 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
    *(_QWORD *)(a1 + 224) = v6;
    if (!v6)
      goto LABEL_14;
    *(_QWORD *)v6 = 0x40E7700000000000;
    *(_OWORD *)(v6 + 8) = xmmword_1932FCFC0;
    *(_OWORD *)(v6 + 24) = xmmword_1932FCFD0;
    *(int64x2_t *)(v6 + 40) = vdupq_n_s64(0x40E7700000000000uLL);
    v7 = 1;
  }
  else
  {
    free(*(void **)(a1 + 208));
    *(_QWORD *)(a1 + 208) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    free(*(void **)(a1 + 224));
    v7 = 0;
    *(_QWORD *)(a1 + 224) = 0;
  }
  *(_DWORD *)(a1 + 232) = v7;
LABEL_14:
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if (*(_QWORD *)(a1 + 24))
    _FigNeroTellOctaviaSinkAttachedStateChanged(a1);
  return 0;
}

void _FigNeroTellOctaviaSinkAttachedStateChanged(uint64_t a1)
{
  double v2;
  double v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  double v5;
  const __CFAllocator *v6;
  const __CFAllocator *v7;
  CFDataRef v8;
  CFDataRef v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  const UInt8 *v12;
  CFDataRef v13;
  CFDataRef v14;
  CFStringRef Copy;
  CFNumberRef v16;
  __CFData *v17;
  __CFData *v18;
  __CFData *v19;
  __CFData *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  UInt32 ioDataSize;
  uint64_t v24;
  double v25;
  int valuePtr;
  const __CFString *outData;
  CFTypeRef cf;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  outData = 0;
  cf = 0;
  valuePtr = 0;
  v24 = 0;
  v25 = 0.0;
  if (!*(_QWORD *)(a1 + 24))
    goto LABEL_34;
  if (!*(_QWORD *)(a1 + 256))
  {
    NeroTransportSendAsyncMessage();
    goto LABEL_34;
  }
  if (*(_DWORD *)(a1 + 216) && *(_QWORD *)(a1 + 208))
  {
    FigGetCFPreferenceDoubleWithDefault();
    v3 = v2;
    if (v2 != 0.0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(double *)(a1 + 320) = v3;
    v5 = v3 + 0.033;
    v25 = v5;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const UInt8 **)(a1 + 208), 56 * *(unsigned int *)(a1 + 216), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v8)
    {
      v9 = v8;
      Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v11 = Mutable;
      if (Mutable)
      {
        CFDictionarySetValue(Mutable, CFSTR("formats"), v9);
        v12 = *(const UInt8 **)(a1 + 224);
        if (!v12)
        {
LABEL_13:
          ioDataSize = 8;
          if (AudioUnitGetProperty(*(AudioUnit *)(a1 + 48), 0x3585u, 0, 0, &outData, &ioDataSize))
          {
            Copy = CFStringCreateCopy(v6, CFSTR("Unknown HDMI Audio Device Name"));
            outData = Copy;
          }
          else
          {
            Copy = outData;
          }
          CFDictionarySetValue(v11, CFSTR("deviceName"), Copy);
          CFDictionarySetValue(v11, CFSTR("deviceUID"), *(const void **)(a1 + 256));
          ioDataSize = 4;
          if (AudioUnitGetProperty(*(AudioUnit *)(a1 + 48), 0x65414333u, 0, 0, &valuePtr, &ioDataSize))
            valuePtr = 0;
          v16 = CFNumberCreate(v6, kCFNumberSInt32Type, &valuePtr);
          CFDictionarySetValue(v11, CFSTR("EDIDAC3Support"), v16);
          v17 = _FigNeroPlayServerCopyAudioProperty(a1, 0x73726E64u);
          if (v17)
          {
            v18 = v17;
            CFDictionarySetValue(v11, CFSTR("PreferredAudioChannelLayout"), v17);
            CFRelease(v18);
          }
          v19 = _FigNeroPlayServerCopyAudioProperty(a1, 0x73726464u);
          if (v19)
          {
            v20 = v19;
            CFDictionarySetValue(v11, CFSTR("DefaultAudioChannelLayout"), v19);
            CFRelease(v20);
          }
          v24 = 0x3FA47AE147AE147BLL;
          v25 = v5 + 0.04;
          v21 = CFNumberCreate(v6, kCFNumberFloat64Type, &v25);
          CFDictionarySetValue(v11, CFSTR("BufferAheadInterval"), v21);
          v22 = CFNumberCreate(v6, kCFNumberFloat64Type, &v24);
          CFDictionarySetValue(v11, CFSTR("ScreenLatency"), v22);
          if (!FigRemote_CreateSerializedAtomDataBlockBufferForCFType())
            NeroTransportSendAsyncMessage();
          if (v16)
            CFRelease(v16);
          if (v21)
            CFRelease(v21);
          if (v22)
            CFRelease(v22);
          goto LABEL_30;
        }
        v13 = CFDataCreateWithBytesNoCopy(v6, v12, 56 * *(unsigned int *)(a1 + 232), v7);
        if (v13)
        {
          v14 = v13;
          CFDictionarySetValue(v11, CFSTR("inputFormats"), v13);
          CFRelease(v14);
          goto LABEL_13;
        }
      }
LABEL_30:
      CFRelease(v9);
      if (outData)
        CFRelease(outData);
      if (v11)
        CFRelease(v11);
    }
  }
LABEL_34:
  if (cf)
    CFRelease(cf);
}

uint64_t FigNeroPlayServerCreate(uint64_t a1, NSObject *a2, const void *a3, const void *a4, char a5, uint64_t *a6)
{
  uint64_t Instance;
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;
  OpaqueAudioComponent *Next;
  OpaqueAudioComponentInstance *v17;
  NSObject *v18;
  const __CFAllocator *v19;
  const void *v20;
  const void *v21;
  OpaqueAudioComponentInstance *v22;
  _QWORD inData[2];
  AudioComponentInstance outInstance;
  _BYTE inDesc[24];
  void *v27;
  uint64_t v28;

  if (FigNeroPlayServerGetTypeID_sFigNeroPlayServerInitOnce != -1)
    dispatch_once(&FigNeroPlayServerGetTypeID_sFigNeroPlayServerInitOnce, &__block_literal_global_98);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return 4294950594;
  v12 = Instance;
  *(_QWORD *)(Instance + 40) = a2;
  dispatch_retain(a2);
  if (a3)
    v13 = CFRetain(a3);
  else
    v13 = 0;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 192) = dispatch_semaphore_create(0);
  *(_QWORD *)(v12 + 24) = 0;
  if (a4)
    v14 = CFRetain(a4);
  else
    v14 = 0;
  *(_QWORD *)(v12 + 16) = v14;
  *(_BYTE *)(v12 + 220) = a5;
  if (!*(_QWORD *)(v12 + 32))
  {
    outInstance = 0;
    *(_OWORD *)inDesc = xmmword_1932FAA80;
    *(_DWORD *)&inDesc[16] = 0;
    Next = AudioComponentFindNext(0, (const AudioComponentDescription *)inDesc);
    if (Next)
    {
      v15 = AudioComponentInstanceNew(Next, &outInstance);
      v17 = outInstance;
      if ((_DWORD)v15)
      {
        if (outInstance)
          AudioComponentInstanceDispose(outInstance);
        goto LABEL_21;
      }
      *(_QWORD *)(v12 + 48) = outInstance;
    }
    else
    {
      v15 = FigSignalErrorAt();
      if ((_DWORD)v15)
        goto LABEL_21;
      v17 = *(OpaqueAudioComponentInstance **)(v12 + 48);
    }
    inData[0] = _FigNeroPlayServerRenderProc;
    inData[1] = v12;
    v15 = AudioUnitSetProperty(v17, 0x17u, 1u, 0, inData, 0x10u);
    if (!(_DWORD)v15)
    {
      v18 = *(NSObject **)(v12 + 40);
      *(_QWORD *)inDesc = MEMORY[0x1E0C809B0];
      *(_QWORD *)&inDesc[8] = 0x40000000;
      *(_QWORD *)&inDesc[16] = ___FigNeroPlayServerDeviceUIDChanged_block_invoke;
      v27 = &__block_descriptor_tmp_32_1;
      v28 = v12;
      dispatch_async(v18, inDesc);
      v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v15 = CMSimpleQueueCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 32, (CMSimpleQueueRef *)(v12 + 96));
      if (!(_DWORD)v15)
      {
        v15 = CMSimpleQueueCreate(v19, 32, (CMSimpleQueueRef *)(v12 + 104));
        if (!(_DWORD)v15)
          goto LABEL_11;
      }
    }
LABEL_21:
    v20 = *(const void **)(v12 + 104);
    if (v20)
    {
      CFRelease(v20);
      *(_QWORD *)(v12 + 104) = 0;
    }
    v21 = *(const void **)(v12 + 96);
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v12 + 96) = 0;
    }
    v22 = *(OpaqueAudioComponentInstance **)(v12 + 48);
    if (v22)
    {
      AudioComponentInstanceDispose(v22);
      *(_QWORD *)(v12 + 48) = 0;
    }
    goto LABEL_27;
  }
LABEL_11:
  v15 = NeroTransportRegisterObject();
  if ((_DWORD)v15)
  {
LABEL_27:
    CFRelease((CFTypeRef)v12);
    return v15;
  }
  *a6 = v12;
  return v15;
}

uint64_t FigNeroPlayServerSetOctaviaSender(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  if (*(_QWORD *)(a1 + 24) != a2)
  {
    *(_QWORD *)(a1 + 24) = a2;
    if (a2)
    {
      v2 = *(NSObject **)(a1 + 40);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __FigNeroPlayServerSetOctaviaSender_block_invoke;
      block[3] = &__block_descriptor_tmp_5_7;
      block[4] = a1;
      dispatch_async(v2, block);
    }
  }
  return 0;
}

double _FigNeroPlayServerInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 320) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void _FigNeroPlayServerFinalize(uint64_t a1)
{
  OpaqueAudioComponentInstance *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  NSObject *v10;
  const void *v11;
  const void *v12;

  NeroTransportUnregisterObject();
  v2 = *(OpaqueAudioComponentInstance **)(a1 + 48);
  if (v2)
  {
    AudioOutputUnitStop(v2);
    AudioUnitUninitialize(*(AudioUnit *)(a1 + 48));
    AudioComponentInstanceDispose(*(AudioComponentInstance *)(a1 + 48));
  }
  v3 = *(const void **)(a1 + 240);
  if (v3)
    CFRelease(v3);
  free(*(void **)(a1 + 224));
  v4 = *(const void **)(a1 + 264);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 256);
  if (v5)
    CFRelease(v5);
  free(*(void **)(a1 + 208));
  v6 = *(const void **)(a1 + 112);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 112) = 0;
  }
  _FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(a1 + 96), 0);
  v7 = *(const void **)(a1 + 96);
  if (v7)
    CFRelease(v7);
  _FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(a1 + 104), 0);
  v8 = *(const void **)(a1 + 104);
  if (v8)
    CFRelease(v8);
  v9 = *(NSObject **)(a1 + 40);
  if (v9)
    dispatch_release(v9);
  v10 = *(NSObject **)(a1 + 192);
  if (v10)
    dispatch_release(v10);
  v11 = *(const void **)(a1 + 32);
  if (v11)
    CFRelease(v11);
  v12 = *(const void **)(a1 + 16);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t _FigNeroPlayServerDrainQueue(opaqueCMSimpleQueue *a1, CMTimeValue *a2)
{
  opaqueCMSampleBuffer *v4;
  opaqueCMSampleBuffer *v5;
  uint64_t v6;
  OpaqueCMBlockBuffer *DataBuffer;
  CMTimeValue value;
  CMTimeValue v9;
  CMTimeValue v10;
  CMTimeValue v11;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  if (!a1 || (v4 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(a1)) == 0)
  {
    value = 0;
    v11 = 0;
    v6 = 0;
    if (!a2)
      return v6;
LABEL_8:
    *a2 = value;
    a2[1] = v11;
    return v6;
  }
  v5 = v4;
  v6 = 0;
  do
  {
    DataBuffer = CMSampleBufferGetDataBuffer(v5);
    v6 += CMBlockBufferGetDataLength(DataBuffer);
    CMSampleBufferGetOutputPresentationTimeStamp(&v15, v5);
    value = v15.value;
    CMSampleBufferGetPresentationTimeStamp(&v14, v5);
    v9 = v14.value;
    CMSampleBufferGetDuration(&v13, v5);
    v10 = v13.value;
    CFRelease(v5);
    v5 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(a1);
  }
  while (v5);
  v11 = v10 + v9;
  if (a2)
    goto LABEL_8;
  return v6;
}

__CFData *_FigNeroPlayServerCopyAudioProperty(uint64_t a1, AudioUnitPropertyID a2)
{
  __CFData *v4;
  __CFData *Mutable;
  UInt8 *MutableBytePtr;
  UInt32 outDataSize;

  outDataSize = 0;
  v4 = 0;
  if (!AudioUnitGetPropertyInfo(*(AudioUnit *)(a1 + 48), a2, 0, 0, &outDataSize, 0))
  {
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], outDataSize);
    v4 = Mutable;
    if (Mutable)
    {
      CFDataIncreaseLength(Mutable, outDataSize);
      MutableBytePtr = CFDataGetMutableBytePtr(v4);
      if (MutableBytePtr)
        AudioUnitGetProperty(*(AudioUnit *)(a1 + 48), a2, 0, 0, MutableBytePtr, &outDataSize);
    }
  }
  return v4;
}

uint64_t _FigNeroPlayServerRenderProc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  size_t v7;
  char *v8;
  opaqueCMSampleBuffer *v10;
  CFTypeRef *v11;
  unint64_t v12;
  OpaqueCMBlockBuffer *DataBuffer;
  size_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  CMTimeValue v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  int v22;
  size_t v23;
  size_t v24;
  char *v25;
  size_t v26;
  opaqueCMSampleBuffer *v27;
  int64_t v28;
  CMTime v29;
  CMTime v30;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;

  LODWORD(v7) = *(_DWORD *)(a1 + 80) * a5;
  v8 = *(char **)(a6 + 16);
  if (*(_BYTE *)(a1 + 184))
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 192));
    bzero(v8, (int)v7);
    *(_BYTE *)(a1 + 184) = 0;
  }
  else if ((int)v7 >= 1)
  {
    v11 = (CFTypeRef *)(a1 + 112);
    v10 = *(opaqueCMSampleBuffer **)(a1 + 112);
    do
    {
      lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      v12 = *(int *)(a1 + 80);
      if (v10
        && (DataBuffer = CMSampleBufferGetDataBuffer(v10)) != 0
        && !CMBlockBufferGetDataPointer(DataBuffer, *(_QWORD *)(a1 + 120), &lengthAtOffsetOut, 0, &dataPointerOut))
      {
        CMSampleBufferGetPresentationTimeStamp(&v30, *(CMSampleBufferRef *)(a1 + 112));
        v17 = *(_QWORD *)(a1 + 120);
        v18 = v17 / v12 + v30.value;
        v19 = *(_QWORD *)(a1 + 200);
        if (v19 >= v18)
        {
          if (v19 <= v18)
          {
            LODWORD(v14) = 0;
          }
          else if (*(_DWORD *)(a1 + 64) == 1667326771)
          {
            LODWORD(v14) = 0;
            *(_QWORD *)(a1 + 200) = v18;
          }
          else
          {
            LODWORD(v14) = 0;
            v23 = (v12 * (v19 - v18));
            v24 = lengthAtOffsetOut;
            if (lengthAtOffsetOut >= v23)
              v23 = v23;
            else
              v23 = lengthAtOffsetOut;
            v25 = &dataPointerOut[v23];
            *(_QWORD *)(a1 + 120) = v17 + v23;
            lengthAtOffsetOut = v24 - v23;
            dataPointerOut = v25;
          }
          v21 = v8;
          v22 = v7;
        }
        else
        {
          v20 = v12 * (v18 - v19);
          if (v20 >= v7)
            v14 = v7;
          else
            v14 = v20;
          bzero(v8, v14);
          v21 = &v8[v14];
          v22 = v7 - v14;
          *(_QWORD *)(a1 + 200) += v14 / v12;
        }
        LODWORD(v15) = 0;
        v26 = lengthAtOffsetOut;
        if (v22 >= 1 && lengthAtOffsetOut)
        {
          if (lengthAtOffsetOut <= v22)
            v15 = lengthAtOffsetOut;
          else
            v15 = v22;
          memcpy(v21, dataPointerOut, v15);
          *(_QWORD *)(a1 + 120) += v15;
          v26 -= v15;
          lengthAtOffsetOut = v26;
          *(_QWORD *)(a1 + 200) += v15 / v12;
        }
        if (!v26)
        {
          v27 = *(opaqueCMSampleBuffer **)(a1 + 112);
          v28 = mach_absolute_time();
          CMTimeMake(&v29, v28, 1);
          CMSampleBufferSetOutputPresentationTimeStamp(v27, &v29);
          if (CMSimpleQueueEnqueue(*(CMSimpleQueueRef *)(a1 + 104), *(const void **)(a1 + 112)) && *v11)
            CFRelease(*v11);
          *v11 = 0;
          *(_QWORD *)(a1 + 120) = 0;
        }
      }
      else
      {
        LODWORD(v14) = 0;
        LODWORD(v15) = 0;
      }
      v16 = (v15 + v14);
      v7 = (v7 - v16);
      if (!(_DWORD)v7)
        break;
      v8 += v16;
      v10 = (opaqueCMSampleBuffer *)*v11;
      if (!*v11)
      {
        v10 = (opaqueCMSampleBuffer *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 96));
        *(_QWORD *)(a1 + 112) = v10;
        if (!v10)
        {
          if ((int)v7 >= 1)
          {
            bzero(v8, v7);
            *(_QWORD *)(a1 + 200) += v7 / *(_DWORD *)(a1 + 80);
          }
          return 0;
        }
        *(_QWORD *)(a1 + 120) = 0;
      }
    }
    while ((int)v7 > 0);
  }
  return 0;
}

uint64_t _FigNeroPlayServerStopAudio(uint64_t result)
{
  uint64_t v1;
  OpaqueCMBlockBuffer *DataBuffer;
  const void *v3;

  if (*(_BYTE *)(result + 248))
  {
    v1 = result;
    *(_BYTE *)(result + 248) = 0;
    result = *(_QWORD *)(result + 48);
    if (result)
    {
      result = AudioOutputUnitStop((AudioUnit)result);
      if (!(_DWORD)result)
      {
        result = AudioUnitUninitialize(*(AudioUnit *)(v1 + 48));
        if (!(_DWORD)result)
        {
          DataBuffer = CMSampleBufferGetDataBuffer(*(CMSampleBufferRef *)(v1 + 112));
          CMBlockBufferGetDataLength(DataBuffer);
          v3 = *(const void **)(v1 + 112);
          if (v3)
          {
            CFRelease(v3);
            *(_QWORD *)(v1 + 112) = 0;
          }
          *(_QWORD *)(v1 + 120) = 0;
          *(_QWORD *)(v1 + 200) = 0;
          _FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(v1 + 104), 0);
          return _FigNeroPlayServerDrainQueue(*(opaqueCMSimpleQueue **)(v1 + 96), 0);
        }
      }
    }
  }
  return result;
}

uint64_t _FigNeroPlayServerUpdateDesiredOctaviaSampleRate(uint64_t result)
{
  uint64_t v1;
  int v2;
  double v3;
  int v4;
  int v5;
  int v6;
  int32x4_t v7;
  int v8;

  if (*(uint64_t *)(result + 128) >= 1)
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 136);
    result = FigHostTimeToNanoseconds();
    v3 = *(double *)(v1 + 56);
    v4 = *(_DWORD *)(v1 + 152) - v2 + (int)(result * (uint64_t)v3) / -1000000000;
    v5 = *(_DWORD *)(v1 + 164) - v4;
    if (v5 < 0)
      v5 = v4 - *(_DWORD *)(v1 + 164);
    if (v5 < 0x3E9)
    {
      *(_DWORD *)(v1 + 172) = 0;
      v8 = *(_DWORD *)(v1 + 168) - v4;
      if (v8 < 0)
        v8 = v4 - *(_DWORD *)(v1 + 168);
      if (v8 >= 0x12D)
      {
        *(double *)(v1 + 176) = v3 + (double)(*(_DWORD *)(v1 + 160) - v4) / 300.0;
        *(_DWORD *)(v1 + 168) = v4;
      }
      *(_DWORD *)(v1 + 164) = v4;
    }
    else
    {
      v6 = *(_DWORD *)(v1 + 172);
      *(_DWORD *)(v1 + 172) = v6 + 1;
      if (v6 >= 10)
      {
        v7 = vzip1q_s32((int32x4_t)v4, (int32x4_t)v4);
        v7.i32[2] = v4;
        *(int32x4_t *)(v1 + 160) = v7;
        if (v4 <= 1999)
          *(_DWORD *)(v1 + 160) = 2000;
      }
    }
  }
  return result;
}

uint64_t FigManifoldCreateForWebVTT(CFAllocatorRef Default, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  OSStatus v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t DerivedStorage;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *returnedPointerOut;
  _BYTE temporaryBlock[10];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!theBuffer)
    goto LABEL_12;
  if (CMBlockBufferGetDataLength(theBuffer) < 0xA)
  {
    v12 = -16044;
    goto LABEL_4;
  }
  returnedPointerOut = 0;
  v12 = CMBlockBufferAccessDataBytes(theBuffer, 0, 0xAuLL, temporaryBlock, &returnedPointerOut);
  if (v12)
  {
LABEL_4:
    v13 = 1;
    v14 = 1;
LABEL_5:
    v15 = -16044;
    v16 = v13;
    v17 = v12;
    goto LABEL_7;
  }
  v18 = WebVTTBufferLooksLikeWebVTTFile(returnedPointerOut, 0xAuLL);
  v13 = 0;
  v12 = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v14 = !v18;
  if (!v18)
    goto LABEL_5;
LABEL_7:
  if (v16)
    v19 = v17;
  else
    v19 = v15;
  if ((v16 & 1) == 0 && !v14)
  {
LABEL_12:
    FigManifoldGetClassID();
    v20 = CMDerivedObjectCreate();
    if ((_DWORD)v20)
      return v20;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!Default)
      Default = CFAllocatorGetDefault();
    *(_QWORD *)DerivedStorage = CFRetain(Default);
    *(_QWORD *)(DerivedStorage + 80) = a3;
    *(_QWORD *)(DerivedStorage + 88) = a4;
    *(_QWORD *)(DerivedStorage + 96) = a5;
    *(_DWORD *)(DerivedStorage + 64) = 200;
    *(_QWORD *)(DerivedStorage + 112) = 0;
    *(_QWORD *)(DerivedStorage + 120) = 0;
    v22 = MEMORY[0x1E0CA2E18];
    v23 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 144) = *MEMORY[0x1E0CA2E18];
    v24 = *(_QWORD *)(v22 + 16);
    *(_QWORD *)(DerivedStorage + 160) = v24;
    *(_OWORD *)(DerivedStorage + 168) = v23;
    *(_QWORD *)(DerivedStorage + 184) = v24;
    v25 = FigReentrantMutexCreate();
    *(_QWORD *)(DerivedStorage + 16) = v25;
    if (v25)
    {
      v19 = WebVTTParserCreate(0, (uint64_t)wvmHeaderCallback, (uint64_t)wvmSampleCallback, 0, (_QWORD *)(DerivedStorage + 104));
      if (!(_DWORD)v19)
      {
        *a6 = 0;
        return v19;
      }
    }
    else
    {
      v19 = FigSignalErrorAt();
    }
    CFRelease(0);
  }
  return v19;
}

uint64_t wvmHeaderCallback(void *a1, char *a2, unsigned __int8 *a3, double *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int64_t v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  const char *v25;
  unsigned int v26;
  int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned __int8 *i;
  double Seconds;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  CMTime v38;
  CMTime rhs;
  CMTime lhs;
  CMTime v41;
  CMTime time2;
  CMTime time1;
  CMTime v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  double v49;
  const char *v50;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a3 = 0;
  v8 = MEMORY[0x1E0C80978];
  while (1)
  {
    v9 = *a2;
    if ((v9 & 0x80000000) != 0)
    {
      if (!__maskrune(v9, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000) == 0)
    {
      break;
    }
    if (!*a2)
      break;
    v50 = ++a2;
  }
  if (strncasecmp("X-TIMESTAMP-MAP", a2, 0xFuLL))
    return 0;
  v11 = (unsigned __int8 *)(a2 + 15);
  do
  {
    v50 = (const char *)v11;
    v12 = (char)*v11;
    if ((v12 & 0x80000000) != 0)
      v13 = __maskrune(v12, 0x4000uLL);
    else
      v13 = *(_DWORD *)(v8 + 4 * v12 + 60) & 0x4000;
    ++v11;
  }
  while (v13);
  v14 = *(v11 - 1);
  if (v14 != 61 && v14 != 58)
    return 0;
  v49 = 0.0;
  v15 = *(v11 - 1) == 61 ? 58 : 61;
  v50 = (const char *)v11;
  LOBYTE(v16) = *v11;
  if (!*v11)
    return 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
LABEL_23:
  while (1)
  {
    v20 = (v16 & 0x80) != 0
        ? __maskrune((char)v16, 0x4000uLL)
        : *(_DWORD *)(v8 + 4 * (char)v16 + 60) & 0x4000;
    v21 = v50;
    if (!v20)
      break;
    ++v50;
    LOBYTE(v16) = v21[1];
  }
  if (!strncasecmp(v50, "LOCAL", 5uLL))
  {
    v28 = (unsigned __int8 *)(v21 + 5);
    do
    {
      v50 = (const char *)v28;
      v29 = (char)*v28;
      if ((v29 & 0x80000000) != 0)
        v30 = __maskrune(v29, 0x4000uLL);
      else
        v30 = *(_DWORD *)(v8 + 4 * v29 + 60) & 0x4000;
      v28 = (unsigned __int8 *)(v50 + 1);
    }
    while (v30);
    if (*(unsigned __int8 *)v50 == v15)
    {
      v48.value = 0;
      do
      {
        while (1)
        {
          v31 = *++v50;
          if ((v31 & 0x80000000) != 0)
            break;
          if ((*(_DWORD *)(v8 + 4 * v31 + 60) & 0x4000) == 0)
            goto LABEL_52;
        }
      }
      while (__maskrune(v31, 0x4000uLL));
LABEL_52:
      v48.value = strlen(v50);
      result = FigWebVTTReadTime((unsigned __int8 **)&v50, (unint64_t *)&v48, &v49, 0, 0);
      if ((_DWORD)result)
        return result;
      v19 = 1;
    }
  }
  else if (!strncasecmp(v21, "MPEGTS", 6uLL))
  {
    v22 = (unsigned __int8 *)(v21 + 6);
    do
    {
      v50 = (const char *)v22;
      v23 = (char)*v22;
      if ((v23 & 0x80000000) != 0)
        v24 = __maskrune(v23, 0x4000uLL);
      else
        v24 = *(_DWORD *)(v8 + 4 * v23 + 60) & 0x4000;
      v25 = v50;
      v22 = (unsigned __int8 *)(v50 + 1);
    }
    while (v24);
    if (*(unsigned __int8 *)v50 == v15)
    {
      do
      {
        v50 = v25 + 1;
        v26 = v25[1];
        if ((v26 & 0x80000000) != 0)
          v27 = __maskrune(v26, 0x4000uLL);
        else
          v27 = *(_DWORD *)(v8 + 4 * v26 + 60) & 0x4000;
        v25 = v50;
      }
      while (v27);
      v17 = strtoull(v50, 0, 10);
      v18 = 1;
    }
  }
  for (i = (unsigned __int8 *)v50; *i++; v50 = (const char *)i)
  {
    if (*(i - 1) == 44)
    {
      v50 = (const char *)i;
      v16 = *i;
      if (v16)
        goto LABEL_23;
      break;
    }
  }
  result = 0;
  if (v19 && v18)
  {
    Seconds = (double)v17 / 90000.0 - v49;
    memset(&v48, 0, sizeof(v48));
    if (Seconds >= 0.0)
      v34 = 0.00000555555556;
    else
      v34 = -0.00000555555556;
    CMTimeMakeWithSeconds(&v48, Seconds + v34, 90000);
    memset(&v47, 0, sizeof(v47));
    v35 = *(double *)(DerivedStorage + 112);
    if (v35 >= 0.0)
      v36 = 0.00000555555556;
    else
      v36 = -0.00000555555556;
    CMTimeMakeWithSeconds(&v47, v35 + v36, 90000);
    memset(&v46, 0, sizeof(v46));
    v45 = v47;
    v44 = v48;
    fmi_CalculateMPEG2WrapForTime(&v45, &v44, &v46);
    time1 = v46;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2))
    {
      lhs = v48;
      rhs = v46;
      CMTimeAdd(&v41, &lhs, &rhs);
      v48 = v41;
      if (Seconds != *(double *)(DerivedStorage + 120))
        *(double *)(DerivedStorage + 120) = Seconds;
      v38 = v48;
      Seconds = CMTimeGetSeconds(&v38);
    }
    if (Seconds != *(double *)(DerivedStorage + 112))
    {
      *a3 = 1;
      *a4 = Seconds;
      *(double *)(DerivedStorage + 112) = Seconds;
      if ((*(_DWORD *)(DerivedStorage + 156) & 0x1D) == 1)
      {
        v37 = MEMORY[0x1E0CA2E18];
        *(_OWORD *)(DerivedStorage + 168) = *MEMORY[0x1E0CA2E18];
        *(_QWORD *)(DerivedStorage + 184) = *(_QWORD *)(v37 + 16);
      }
    }
    return 0;
  }
  return result;
}

uint64_t wvmSampleCallback(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  uint64_t FormatCallback;
  _OWORD *v8;
  CMTimeEpoch epoch;
  CMTimeEpoch v10;
  uint64_t v11;
  uint64_t v12;
  CMSampleBufferRef v13;
  CMFormatDescriptionRef FormatDescription;
  CMFormatDescriptionRef v15;
  const void *v16;
  CMSampleBufferRef v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, CMSampleBufferRef);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMSampleBufferRef sbuf;
  CMTime rhs;
  CMTime lhs;
  CMTime v36;
  CMTime v37;
  CMTime v38;

  sbuf = 0;
  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E68];
  v32 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v31 = v32;
  if (!a2)
  {
LABEL_29:
    v12 = 0;
LABEL_41:
    v13 = sbuf;
    goto LABEL_42;
  }
  v6 = DerivedStorage;
  FormatCallback = WebVTTGetSamplePTS(a2, &v32);
  if ((_DWORD)FormatCallback)
    goto LABEL_45;
  if ((v32.flags & 0x1D) == 1)
  {
    v8 = (_OWORD *)(v6 + 168);
    if ((*(_DWORD *)(v6 + 180) & 0x1D) != 1)
    {
      if ((*(_DWORD *)(v6 + 156) & 0x1D) == 1)
      {
        v37 = *(CMTime *)(v6 + 144);
        v36 = v32;
        fmi_CalculateMPEG2WrapForTime(&v37, &v36, &v38);
        *v8 = *(_OWORD *)&v38.value;
        epoch = v38.epoch;
      }
      else
      {
        *v8 = *(_OWORD *)v5;
        epoch = *(_QWORD *)(v5 + 16);
      }
      *(_QWORD *)(v6 + 184) = epoch;
    }
    lhs = v32;
    *(_OWORD *)&rhs.value = *v8;
    rhs.epoch = *(_QWORD *)(v6 + 184);
    CMTimeAdd(&v38, &lhs, &rhs);
    v32 = v38;
    v10 = v38.epoch;
    *(_OWORD *)(v6 + 144) = *(_OWORD *)&v38.value;
    *(_QWORD *)(v6 + 160) = v10;
    *(_OWORD *)&v31.value = *v8;
    v31.epoch = *(_QWORD *)(v6 + 184);
  }
  v11 = *(_QWORD *)(v6 + 104);
  v30 = v31;
  v12 = WebVTTCreateSampleBufferFromSample(v11, a2, &v30, &sbuf);
  v13 = sbuf;
  if (!(_DWORD)v12 && sbuf)
  {
    FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
    if (!FormatDescription)
    {
      v12 = 4294951255;
      goto LABEL_41;
    }
    v15 = FormatDescription;
    if (!FigCFEqual())
    {
      v16 = *(const void **)(v6 + 72);
      *(_QWORD *)(v6 + 72) = v15;
      CFRetain(v15);
      if (v16)
      {
        CFRelease(v16);
        FormatCallback = wvmMakeFormatCallback(a1, v6);
        if ((_DWORD)FormatCallback)
          goto LABEL_45;
      }
      else
      {
        FormatCallback = wvmMakeFormatCallback(a1, v6);
        if ((_DWORD)FormatCallback)
          goto LABEL_45;
        v25 = *(void (**)(uint64_t, _QWORD))(v6 + 88);
        if (v25)
        {
          v26 = *(_QWORD *)(v6 + 24);
          *(_QWORD *)(v6 + 24) = 0;
          if (v26 >= 1)
          {
            v27 = v26;
            do
            {
              MEMORY[0x19402EA24](*(_QWORD *)(v6 + 16));
              --v27;
            }
            while (v27);
            v25 = *(void (**)(uint64_t, _QWORD))(v6 + 88);
          }
          v25(a1, *(_QWORD *)(v6 + 96));
          do
          {
            MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 16));
            v28 = *(_QWORD *)(v6 + 24) + 1;
            *(_QWORD *)(v6 + 24) = v28;
          }
          while (v28 < v26);
          if (*(_BYTE *)(v6 + 8) || *(_BYTE *)(v6 + 11))
            goto LABEL_40;
        }
      }
    }
    v17 = sbuf;
    FigManifoldGetFigBaseObject(a1);
    v18 = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(v18 + 8))
    {
      v12 = 4294954511;
      goto LABEL_41;
    }
    v19 = v18;
    v20 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, CMSampleBufferRef))(v18 + 40);
    if (!v20)
      goto LABEL_29;
    if (!*(_BYTE *)(v18 + 128))
    {
LABEL_21:
      v21 = *(_QWORD *)(v19 + 56);
      v22 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 24) = 0;
      if (v22 >= 1)
      {
        v23 = v22;
        do
        {
          MEMORY[0x19402EA24](*(_QWORD *)(v19 + 16));
          --v23;
        }
        while (v23);
      }
      v12 = v20(a1, *(unsigned int *)(v19 + 64), v21, 0, 0, v17);
      do
      {
        MEMORY[0x19402EA0C](*(_QWORD *)(v19 + 16));
        v24 = *(_QWORD *)(v19 + 24) + 1;
        *(_QWORD *)(v19 + 24) = v24;
      }
      while (v24 < v22);
      if ((_DWORD)v12)
        goto LABEL_41;
      if (!*(_BYTE *)(v19 + 8) && !*(_BYTE *)(v19 + 11))
        goto LABEL_29;
LABEL_40:
      v12 = 4294951251;
      goto LABEL_41;
    }
    FormatCallback = wvmMakeFormatCallback(a1, v18);
    if (!(_DWORD)FormatCallback)
    {
      v20 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, CMSampleBufferRef))(v19 + 40);
      goto LABEL_21;
    }
LABEL_45:
    v12 = FormatCallback;
    goto LABEL_41;
  }
LABEL_42:
  if (v13)
    CFRelease(v13);
  return v12;
}

void wvmInvalidate(const void *a1)
{
  CFRetain(a1);
  wvmInvalidateGuts((uint64_t)a1);
}

uint64_t sub_192F5DFB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  return 0;
}

void wvmFinalize(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  wvmInvalidateGuts(a1);
}

uint64_t sub_192F5DFF0()
{
  uint64_t v0;
  const void *v1;
  const void *v2;
  uint64_t result;

  WebVTTParserDestroy(*(_QWORD **)(v0 + 104));
  *(_QWORD *)(v0 + 104) = 0;
  v1 = *(const void **)(v0 + 136);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(v0 + 136) = 0;
  }
  if (*(_QWORD *)v0)
  {
    CFRelease(*(CFTypeRef *)v0);
    *(_QWORD *)v0 = 0;
  }
  v2 = *(const void **)(v0 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(v0 + 72) = 0;
  }
  result = *(_QWORD *)(v0 + 16);
  if (result)
  {
    result = FigSimpleMutexDestroy();
    *(_QWORD *)(v0 + 16) = 0;
  }
  return result;
}

__CFString *wvmCopyDebugDescription()
{
  __CFString *Mutable;
  __CFString *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("FigWebVTTManifold :"));
  return v1;
}

uint64_t wvmCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v9 = 4294954511;
    goto LABEL_7;
  }
  if (CFEqual(a2, CFSTR("FMFD_ParserState")))
  {
    valuePtr = 2 * (*(_BYTE *)(DerivedStorage + 9) != 0);
    v8 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  }
  else
  {
    if (!CFEqual(a2, CFSTR("FMFD_Type")))
    {
      v9 = 4294954512;
      goto LABEL_7;
    }
    v8 = (void *)CFStringCreateWithCString(a3, "WEBVTT", 0x8000100u);
  }
  v9 = 0;
  *a4 = v8;
LABEL_7:
  v10 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v10);
  return v9;
}

uint64_t wvmSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  CMTimeFlags flags;
  uint64_t v8;
  CMTimeEpoch epoch;
  uint64_t v10;
  uint64_t v11;
  CMTime v13;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
    goto LABEL_9;
  if (!CFEqual(a2, CFSTR("FMFD_HintForStartTime")))
  {
    v8 = 4294954512;
    goto LABEL_8;
  }
  if (!a3
    || (v6 = CFGetTypeID(a3), v6 != CFDictionaryGetTypeID())
    || (CMTimeMakeFromDictionary(&v13, (CFDictionaryRef)a3),
        value = v13.value,
        flags = v13.flags,
        timescale = v13.timescale,
        (v13.flags & 0x1D) != 1))
  {
LABEL_9:
    v8 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v8 = 0;
  epoch = v13.epoch;
  *(_QWORD *)(DerivedStorage + 144) = value;
  *(_DWORD *)(DerivedStorage + 152) = timescale;
  *(_DWORD *)(DerivedStorage + 156) = flags;
  *(_QWORD *)(DerivedStorage + 160) = epoch;
  v10 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 168) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 184) = *(_QWORD *)(v10 + 16);
LABEL_8:
  v11 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v11);
  return v8;
}

void wvmInvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v3 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v3 + 1;
  if (!*(_BYTE *)(DerivedStorage + 8))
  {
    *(_BYTE *)(DerivedStorage + 8) = 1;
    wvmEndAllTracks(a1, 4294954511);
    v3 = *(_QWORD *)(DerivedStorage + 24) - 1;
  }
  *(_QWORD *)(DerivedStorage + 24) = v3;
  JUMPOUT(0x19402EA24);
}

_QWORD *wvmEndAllTracks(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  void (*v5)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  FigManifoldGetFigBaseObject(a1);
  result = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))result[6];
  if (v5)
  {
    v6 = result;
    result[6] = 0;
    v7 = result[7];
    v8 = result[3];
    result[3] = 0;
    if (v8 >= 1)
    {
      v9 = v8;
      do
      {
        MEMORY[0x19402EA24](v6[2]);
        --v9;
      }
      while (v9);
    }
    v5(a1, *((unsigned int *)v6 + 16), v7, a2);
    do
    {
      result = (_QWORD *)MEMORY[0x19402EA0C](v6[2]);
      v10 = v6[3] + 1;
      v6[3] = v10;
    }
    while (v10 < v8);
  }
  return result;
}

uint64_t wvmManifoldInjectData(const void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(const void *, _QWORD, uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  void (*v15)(const void *);
  const void *v16;
  int IsRangeContiguous;
  OpaqueCMBlockBuffer *v18;
  uint64_t v19;
  uint64_t v20;
  CMBlockBufferRef blockBufferOut;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  blockBufferOut = 0;
  if (a4)
  {
    v8 = DerivedStorage;
    CFRetain(a1);
    CFRetain(a4);
    MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 16));
    v9 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = v9 + 1;
    if (*(_BYTE *)(v8 + 8) || *(_BYTE *)(v8 + 10))
    {
      v12 = FigSignalErrorAt();
      goto LABEL_37;
    }
    if (!*(_BYTE *)(v8 + 9))
    {
      v10 = *(uint64_t (**)(const void *, _QWORD, uint64_t, _QWORD))(v8 + 80);
      if (v10)
      {
        *(_QWORD *)(v8 + 24) = 0;
        if ((v9 & 0x8000000000000000) == 0)
        {
          v11 = v9 + 1;
          do
          {
            MEMORY[0x19402EA24](*(_QWORD *)(v8 + 16));
            --v11;
          }
          while (v11);
          v10 = *(uint64_t (**)(const void *, _QWORD, uint64_t, _QWORD))(v8 + 80);
        }
        v12 = v10(a1, *(_QWORD *)(v8 + 96), 1935832172, *(unsigned int *)(v8 + 64));
        do
        {
          MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 16));
          v13 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 24) = v13 + 1;
        }
        while (v13 < v9);
        if ((_DWORD)v12)
          goto LABEL_36;
        if (*(_BYTE *)(v8 + 8) || *(_BYTE *)(v8 + 11))
        {
          v12 = 4294951251;
          goto LABEL_36;
        }
        *(_BYTE *)(v8 + 9) = 1;
      }
    }
    v14 = CMGetAttachment(a4, CFSTR("FMFD_BufferDecryptor"), 0);
    if (!FigCFEqual())
    {
      v15 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v15)
        v15(a1);
      v16 = *(const void **)(v8 + 136);
      *(_QWORD *)(v8 + 136) = v14;
      if (v14)
        CFRetain(v14);
      if (v16)
        CFRelease(v16);
      *(_BYTE *)(v8 + 128) = 1;
    }
    if (!CMBlockBufferGetDataLength((CMBlockBufferRef)a4))
    {
      LODWORD(v12) = 0;
      if ((a3 & 2) != 0)
      {
LABEL_29:
        if (!(_DWORD)v12)
          WebVTTParserFlush(*(_QWORD *)(v8 + 104), 0, 1);
      }
LABEL_31:
      if ((_DWORD)v12 == -16045)
        v12 = 0;
      else
        v12 = v12;
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      goto LABEL_36;
    }
    IsRangeContiguous = CMBlockBufferIsRangeContiguous((CMBlockBufferRef)a4, 0, 0);
    v18 = (OpaqueCMBlockBuffer *)a4;
    if (IsRangeContiguous)
    {
LABEL_28:
      *(_WORD *)(v8 + 10) = 1;
      LODWORD(v12) = WebVTTParserParseBlockBuffer(*(_QWORD *)(v8 + 104), v18);
      if ((a3 & 2) != 0)
        goto LABEL_29;
      goto LABEL_31;
    }
    v19 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CMBlockBufferRef)a4, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0, 0, &blockBufferOut);
    if (!(_DWORD)v19)
    {
      v18 = blockBufferOut;
      goto LABEL_28;
    }
    v12 = v19;
LABEL_36:
    *(_BYTE *)(v8 + 10) = 0;
LABEL_37:
    v20 = *(_QWORD *)(v8 + 16);
    --*(_QWORD *)(v8 + 24);
    MEMORY[0x19402EA24](v20);
    CFRelease(a4);
    CFRelease(a1);
    return v12;
  }
  return FigSignalErrorAt();
}

uint64_t wvmNoteStreamEnd(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    if (!*(_BYTE *)(DerivedStorage + 10))
      WebVTTParserFlush(*(_QWORD *)(DerivedStorage + 104), 1, 0);
    *(_BYTE *)(DerivedStorage + 11) = 1;
    wvmEndAllTracks((uint64_t)a1, a2);
    v5 = 0;
  }
  v6 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v6);
  CFRelease(a1);
  return v5;
}

uint64_t wvmCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v6 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 64) == a2)
  {
    if (*(_QWORD *)(DerivedStorage + 72))
    {
      v6 = 0;
      *a3 = FigFormatDescriptionRetain();
    }
    else
    {
      v6 = FigSignalErrorAt();
    }
  }
  else
  {
    v6 = 4294951254;
  }
  v7 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v7);
  return v6;
}

uint64_t wvmInstallCallbacksForTrack(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v8 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v8 + 1;
  if (a3 && *(_BYTE *)(DerivedStorage + 8))
  {
    v11 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 64) == a2)
  {
    v9 = (_OWORD *)(DerivedStorage + 32);
    if (a3)
    {
      v10 = *a3;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a3 + 2);
      *v9 = v10;
    }
    else
    {
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(DerivedStorage + 40) = 0;
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    v11 = 0;
    *(_QWORD *)(DerivedStorage + 56) = a4;
  }
  else
  {
    v11 = 4294951254;
  }
  *(_QWORD *)(DerivedStorage + 24) = v8;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v11;
}

uint64_t wvmFlush(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  ++*(_QWORD *)(DerivedStorage + 24);
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v3 = 4294954511;
  }
  else if (*(_BYTE *)(DerivedStorage + 10))
  {
    v3 = FigSignalErrorAt();
  }
  else
  {
    WebVTTParserFlush(*(_QWORD *)(DerivedStorage + 104), 1, 0);
    v3 = 0;
    *(_BYTE *)(DerivedStorage + 11) = 1;
  }
  v4 = *(_QWORD *)(DerivedStorage + 16);
  --*(_QWORD *)(DerivedStorage + 24);
  MEMORY[0x19402EA24](v4);
  CFRelease(a1);
  return v3;
}

uint64_t wvmCopyTrackProperty(uint64_t a1, int a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;

  FigManifoldGetFigBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 16));
  v6 = *(_QWORD *)(DerivedStorage + 24);
  *(_QWORD *)(DerivedStorage + 24) = v6 + 1;
  if (*(_BYTE *)(DerivedStorage + 8))
  {
    v7 = 4294954511;
  }
  else if (*(_DWORD *)(DerivedStorage + 64) == a2)
  {
    if (CFEqual(a3, CFSTR("FMFD_TrackEstimatedDataRate")))
      v7 = 4294954513;
    else
      v7 = 4294954512;
    v6 = *(_QWORD *)(DerivedStorage + 24) - 1;
  }
  else
  {
    v7 = 4294951254;
  }
  *(_QWORD *)(DerivedStorage + 24) = v6;
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 16));
  return v7;
}

uint64_t wvmMakeFormatCallback(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(a2 + 32);
  if (!v2)
    return 0;
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a2 + 128) = 0;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v6 >= 1)
  {
    v7 = v6;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a2 + 16));
      --v7;
    }
    while (v7);
  }
  v8 = v2(a1, *(unsigned int *)(a2 + 64), v5, *(_QWORD *)(a2 + 72), 0);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 16));
    v9 = *(_QWORD *)(a2 + 24) + 1;
    *(_QWORD *)(a2 + 24) = v9;
  }
  while (v9 < v6);
  if (!(_DWORD)v8)
  {
    if (*(_BYTE *)(a2 + 8) || *(_BYTE *)(a2 + 11))
      return 4294951251;
    return 0;
  }
  return v8;
}

void FigAudioSessionTriggerAVAudioSessionReset(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x19403137C]();
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CFF1D0], "defaultManager"), "triggerMediaServicesResetNotifications:daemonName:", a1, 0);
  objc_autoreleasePoolPop(v2);
}

uint64_t FigAudioSessionCreateWithAVAudioSession(uint64_t a1, void *a2, _QWORD *a3)
{
  void *v5;
  uint64_t Key;
  _QWORD *DerivedStorage;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const __CFString *v11;
  void *v12;
  uint64_t v13;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;

  v5 = (void *)MEMORY[0x19403137C]();
  FigKTraceInit();
  if (!a2)
    goto LABEL_20;
  FigAudioSessionGetClassID();
  Key = CMDerivedObjectCreate();
  if ((_DWORD)Key)
    goto LABEL_21;
  if (audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken, &__block_literal_global_11_0);
  Key = FigCFWeakReferenceTableAddValueAndGetKey();
  if ((_DWORD)Key)
    goto LABEL_21;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  *DerivedStorage = a2;
  DerivedStorage[16] = 0;
  v8 = FigDispatchQueueCreateWithPriority();
  DerivedStorage[17] = v8;
  if (!v8)
  {
LABEL_20:
    Key = FigSignalErrorAt();
LABEL_21:
    v24 = Key;
    goto LABEL_19;
  }
  v9 = (void *)MEMORY[0x19403137C]();
  v10 = CMBaseObjectGetDerivedStorage();
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_7);
  if (audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    v11 = (const __CFString *)objc_msgSend(*(id *)v10, "getMXSessionProperty:error:", *MEMORY[0x1E0D495D8], 0);
    if (v11)
      CFStringGetCString(v11, (char *)(v10 + 8), 96, 0x600u);
  }
  objc_autoreleasePoolPop(v9);
  v12 = (void *)MEMORY[0x19403137C]();
  v13 = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v15 = Mutable;
    FigAudioSessionGetMXNotificationTranslationInternal();
    FigCFDictionaryApplyBlock();
    *(_QWORD *)(v13 + 104) = v15;
    objc_autoreleasePoolPop(v12);
  }
  else
  {
    v24 = FigSignalErrorAt();
    objc_autoreleasePoolPop(v12);
    if ((_DWORD)v24)
      goto LABEL_19;
  }
  v16 = (void *)MEMORY[0x19403137C]();
  v17 = CMBaseObjectGetDerivedStorage();
  audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(0, 1, *MEMORY[0x1E0CFF1A0], (uint64_t)&__block_literal_global_16_2, (uint64_t *)(v17 + 112));
  v18 = *(void **)(v17 + 112);
  if (v18)
    v19 = v18;
  objc_autoreleasePoolPop(v16);
  v20 = (void *)MEMORY[0x19403137C]();
  v21 = CMBaseObjectGetDerivedStorage();
  audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(0, 1, *MEMORY[0x1E0CFF058], (uint64_t)&__block_literal_global_17, (uint64_t *)(v21 + 120));
  v22 = *(void **)(v21 + 120);
  if (v22)
    v23 = v22;
  objc_autoreleasePoolPop(v20);
  v24 = 0;
  *a3 = 0;
LABEL_19:
  objc_autoreleasePoolPop(v5);
  return v24;
}

uint64_t FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4, _QWORD *a5)
{
  void *v10;
  id v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[2];

  v10 = (void *)MEMORY[0x19403137C]();
  if (!a5)
    goto LABEL_8;
  if (!a4)
  {
LABEL_9:
    v13 = FigSignalErrorAt();
    goto LABEL_6;
  }
  if (!(_DWORD)a2)
  {
LABEL_8:
    v14 = FigSignalErrorAt();
    a4 = 0;
    goto LABEL_7;
  }
  v11 = objc_alloc(MEMORY[0x1E0CFF1C8]);
  v12 = a3[1];
  v16[0] = *a3;
  v16[1] = v12;
  a4 = (void *)objc_msgSend(v11, "initSiblingSession:auditToken:clientIdentifier:", a2, v16, a4);
  if (!a4)
    goto LABEL_9;
  v13 = FigAudioSessionCreateWithAVAudioSession(a1, a4, a5);
LABEL_6:
  v14 = v13;
LABEL_7:

  objc_autoreleasePoolPop(v10);
  return v14;
}

uint64_t FigAudioSessionCreateWithAVAudioSessionSiblingForFigAudioSession(uint64_t a1, uint64_t a2, _OWORD *a3, void *a4, _QWORD *a5)
{
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v13;
  CFTypeRef v14;
  uint64_t UInt32;
  __int128 v16;
  _OWORD v18[2];
  CFTypeRef cf;

  v10 = (void *)MEMORY[0x19403137C]();
  cf = 0;
  if (a2 && (v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) != 0)
  {
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(v11 + 8);
    if (v12)
    {
      v13 = v12(a2, CFSTR("FAS_CoreSessionID"), a1, &cf);
      v14 = cf;
      if (!(_DWORD)v13)
      {
        UInt32 = FigCFNumberGetUInt32();
        v16 = a3[1];
        v18[0] = *a3;
        v18[1] = v16;
        v13 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(a1, UInt32, v18, a4, a5);
        v14 = cf;
      }
      if (v14)
        CFRelease(v14);
    }
    else
    {
      v13 = 4294948071;
    }
  }
  else
  {
    v13 = 4294948075;
  }
  objc_autoreleasePoolPop(v10);
  return v13;
}

uint64_t FigAudioSessionCreateUsingPrimaryAVAudioSessionSiblingForAuditToken(uint64_t a1, _OWORD *a2, void *a3, _QWORD *a4)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  return FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(a1, 0xFFFFFFFFLL, v6, a3, a4);
}

uint64_t FigAudioSessionCreateUsingAuxiliaryAVAudioSession(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v8;
  uint64_t v9;
  const void *SInt32;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t (*v13)(CFTypeRef, _QWORD, const void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(CFTypeRef, _QWORD, uint64_t);
  CFTypeRef cf;

  v8 = (void *)MEMORY[0x19403137C]();
  cf = 0;
  if (!a4)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_25;
  }
  if (!a3)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_28;
  }
  v9 = FigAudioSessionCreateWithAVAudioSession(a1, (void *)objc_msgSend(MEMORY[0x1E0CFF1C8], "auxiliarySession"), &cf);
  if ((_DWORD)v9)
  {
LABEL_28:
    v14 = v9;
    goto LABEL_20;
  }
  if (a2)
  {
    FigServer_GetClientPIDFromAuditToken();
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    v11 = cf;
    if (!cf)
      goto LABEL_17;
    v12 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v12)
      goto LABEL_17;
    v13 = *(uint64_t (**)(CFTypeRef, _QWORD, const void *))(v12 + 56);
    if (!v13)
      goto LABEL_22;
    v14 = v13(v11, *MEMORY[0x1E0D495E8], SInt32);
    if ((_DWORD)v14)
      goto LABEL_18;
  }
  else
  {
    v11 = cf;
    if (!cf)
    {
      v14 = 4294948075;
      goto LABEL_25;
    }
    SInt32 = 0;
  }
  v15 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v15)
  {
LABEL_17:
    v14 = 4294948075;
    goto LABEL_18;
  }
  v16 = *(uint64_t (**)(CFTypeRef, _QWORD, uint64_t))(v15 + 56);
  if (v16)
  {
    v14 = v16(v11, *MEMORY[0x1E0D495D8], a3);
    if (!(_DWORD)v14)
    {
      *a4 = v11;
      cf = 0;
      if (!SInt32)
        goto LABEL_20;
LABEL_19:
      CFRelease(SInt32);
      goto LABEL_20;
    }
LABEL_18:
    if (!SInt32)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_22:
  v14 = 4294948071;
  if (SInt32)
    goto LABEL_19;
LABEL_20:
  if (cf)
    CFRelease(cf);
LABEL_25:
  objc_autoreleasePoolPop(v8);
  return v14;
}

void audioSessionAVAudioSession_Finalize()
{
  void *v0;
  id *DerivedStorage;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;

  v0 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  FigCFDictionaryApplyBlock();
  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v2, "removeObserver:name:object:", DerivedStorage[14], *MEMORY[0x1E0CFF1A0], *DerivedStorage);
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  objc_msgSend(v3, "removeObserver:name:object:", DerivedStorage[15], *MEMORY[0x1E0CFF058], *DerivedStorage);
  if (audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken, &__block_literal_global_11_0);
  FigCFWeakReferenceTableRemoveValue();
  v4 = DerivedStorage[13];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[13] = 0;
  }

  DerivedStorage[14] = 0;
  DerivedStorage[15] = 0;
  v5 = DerivedStorage[17];
  if (v5)
    dispatch_release(v5);

  *DerivedStorage = 0;
  objc_autoreleasePoolPop(v0);
}

CFStringRef audioSessionAVAudioSession_CopyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<FigAudioSession(AV): %p %s>"), a1, DerivedStorage + 8);
}

uint64_t audioSessionAVAudioSession_CopyResolvedConfigurationForProperty(uint64_t a1, void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  void *v8;
  id *DerivedStorage;
  void *MXSessionPropertyForResolvedFigAudioSessionPropertyInternal;
  _DWORD *v11;
  void *v12;
  id *v13;
  int v14;
  __CFDictionary **v15;
  uint64_t v16;
  __CFDictionary *UInt32;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, void *, const __CFAllocator *, __CFDictionary **);
  uint64_t IsAvailable;
  void *v21;
  uint64_t v23;
  const __CFAllocator *v24;
  uint64_t v25;

  v8 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForResolvedFigAudioSessionPropertyInternal = (void *)FigAudioSessionGetMXSessionPropertyForResolvedFigAudioSessionPropertyInternal(a2);
  v11 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (MXSessionPropertyForResolvedFigAudioSessionPropertyInternal
    && !audioSessionAVAudioSession_propertyIsInDenyList(MXSessionPropertyForResolvedFigAudioSessionPropertyInternal))
  {
    if (!a1 || (v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0)
    {
      v16 = 4294948075;
      goto LABEL_27;
    }
    v19 = *(uint64_t (**)(uint64_t, void *, const __CFAllocator *, __CFDictionary **))(v18 + 48);
    if (!v19)
    {
      v16 = 4294948071;
      goto LABEL_27;
    }
    IsAvailable = v19(a1, MXSessionPropertyForResolvedFigAudioSessionPropertyInternal, a3, a4);
    goto LABEL_23;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      objc_msgSend(*DerivedStorage, "sourceSessionID");
      UInt32 = (__CFDictionary *)FigCFNumberCreateUInt32();
LABEL_15:
      v16 = 0;
      *a4 = UInt32;
      goto LABEL_27;
    }
    if (FigCFEqual())
    {
      IsAvailable = audioSessionAVAudioSession_copyRoutingContext();
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      v21 = (void *)objc_msgSend(*DerivedStorage, "inputTimeObserver");
LABEL_34:
      UInt32 = v21;
      goto LABEL_15;
    }
    if (FigCFEqual())
    {
      v21 = (void *)objc_msgSend(*DerivedStorage, "outputTimeObserver");
      goto LABEL_34;
    }
    if (FigCFEqual())
    {
      v23 = a1;
      v24 = a3;
      v25 = 1836019574;
LABEL_39:
      IsAvailable = audioSessionAVAudioSession_copySpatializationCapabilities(v23, v24, v25, a4);
      goto LABEL_23;
    }
    if (FigCFEqual())
    {
      v23 = a1;
      v24 = a3;
      v25 = 1936684398;
      goto LABEL_39;
    }
    if (FigCFEqual())
    {
      IsAvailable = audioSessionAVAudioSession_copyNeroInformationDictionary(a1, a3, a4);
    }
    else
    {
      if (!FigCFEqual())
      {
        v16 = 4294948074;
        goto LABEL_27;
      }
      IsAvailable = audioSessionAVAudioSession_copyAudioDeviceIsAvailable(a1, (CFTypeRef *)a4);
    }
LABEL_23:
    v16 = IsAvailable;
    goto LABEL_27;
  }
  v12 = (void *)MEMORY[0x19403137C]();
  v13 = (id *)CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v14 = objc_msgSend(*v13, "isActive");
    v15 = (__CFDictionary **)MEMORY[0x1E0C9AE50];
    if (!v14)
      v15 = (__CFDictionary **)MEMORY[0x1E0C9AE40];
    *a4 = *v15;
  }
  objc_autoreleasePoolPop(v12);
  v16 = 0;
LABEL_27:
  if (*v11 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  objc_autoreleasePoolPop(v8);
  return v16;
}

uint64_t audioSessionAVAudioSession_CopyRequestedConfigurationForProperty(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  void *v8;
  id *DerivedStorage;
  void *MXSessionPropertyForRequestedFigAudioSessionPropertyInternal;
  _DWORD *v11;
  const void *UInt32;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, void *, uint64_t, _QWORD *);

  v8 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = (void *)FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(a2);
  v11 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal
    && !audioSessionAVAudioSession_propertyIsInDenyList(MXSessionPropertyForRequestedFigAudioSessionPropertyInternal))
  {
    if (a1 && (v14 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) != 0)
    {
      v15 = *(uint64_t (**)(uint64_t, void *, uint64_t, _QWORD *))(v14 + 48);
      if (v15)
        v13 = v15(a1, MXSessionPropertyForRequestedFigAudioSessionPropertyInternal, a3, a4);
      else
        v13 = 4294948071;
    }
    else
    {
      v13 = 4294948075;
    }
  }
  else
  {
    if (FigCFEqual())
    {
      objc_msgSend(*DerivedStorage, "opaqueSessionID");
      UInt32 = (const void *)FigCFNumberCreateUInt32();
LABEL_9:
      v13 = 0;
      *a4 = UInt32;
      goto LABEL_10;
    }
    if (FigCFEqual())
    {
      UInt32 = (const void *)objc_msgSend(*DerivedStorage, "category");
      if (UInt32)
        UInt32 = CFRetain(UInt32);
      goto LABEL_9;
    }
    v13 = 4294948074;
  }
LABEL_10:
  if (*v11 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  objc_autoreleasePoolPop(v8);
  return v13;
}

uint64_t audioSessionAVAudioSession_RequestConfigurationForProperty(uint64_t a1, void *key, uint64_t a3)
{
  const void *MXSessionPropertyForRequestedFigAudioSessionPropertyInternal;
  _DWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const void *, uint64_t);
  uint64_t v10;

  MXSessionPropertyForRequestedFigAudioSessionPropertyInternal = FigAudioSessionGetMXSessionPropertyForRequestedFigAudioSessionPropertyInternal(key);
  v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (key)
      CFHash(key);
    kdebug_trace();
  }
  if (MXSessionPropertyForRequestedFigAudioSessionPropertyInternal)
  {
    if (a1 && (v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) != 0)
    {
      v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(v8 + 56);
      if (v9)
        v10 = v9(a1, MXSessionPropertyForRequestedFigAudioSessionPropertyInternal, a3);
      else
        v10 = 4294948071;
    }
    else
    {
      v10 = 4294948075;
    }
  }
  else
  {
    v10 = 4294948074;
  }
  if (*v7 == 1)
  {
    if (key)
      CFHash(key);
    kdebug_trace();
  }
  return v10;
}

uint64_t audioSessionAVAudioSession_CopyCMSessionProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (!a1)
    return 4294948075;
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v8)
    return 4294948075;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v9)
    return v9(a1, a2, a3, a4);
  else
    return 4294948071;
}

uint64_t audioSessionAVAudioSession_SetCMSessionProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  if (!a1)
    return 4294948075;
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v6)
    return 4294948075;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 56);
  if (v7)
    return v7(a1, a2, a3);
  else
    return 4294948071;
}

uint64_t audioSessionAVAudioSession_CopyMXSessionProperty(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  void *v6;
  _DWORD *v7;
  id *DerivedStorage;
  CFTypeRef v9;
  uint64_t v10;
  id v12;

  v6 = (void *)MEMORY[0x19403137C]();
  v12 = 0;
  v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (audioSessionAVAudioSession_propertyIsInDenyList(a2))
    goto LABEL_13;
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_7);
  if (!audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    v10 = FigSignalErrorAt();
    goto LABEL_18;
  }
  v9 = (CFTypeRef)objc_msgSend(*DerivedStorage, "getMXSessionProperty:error:", a2, &v12);
  if (v9)
    v9 = CFRetain(v9);
  *a4 = v9;
  if (v12)
  {
    objc_msgSend(v12, "code");
LABEL_13:
    v10 = FigSignalErrorAt();
    goto LABEL_14;
  }
  v10 = 0;
LABEL_14:
  if (*v7 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
LABEL_18:
  objc_autoreleasePoolPop(v6);
  return v10;
}

uint64_t audioSessionAVAudioSession_SetMXSessionProperty(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id *DerivedStorage;
  _DWORD *v7;
  uint64_t v8;
  id v10;

  v5 = (void *)MEMORY[0x19403137C]();
  v10 = 0;
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v7 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
  if (audioSessionAVAudioSession_propertyIsInDenyList(a2))
    goto LABEL_11;
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_7);
  if (!audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_16;
  }
  objc_msgSend(*DerivedStorage, "setMXSessionProperty:value:error:", a2, a3, &v10);
  if (v10)
  {
    objc_msgSend(v10, "code");
LABEL_11:
    v8 = FigSignalErrorAt();
    goto LABEL_12;
  }
  v8 = 0;
LABEL_12:
  if (*v7 == 1)
  {
    if (a2)
      CFHash(a2);
    kdebug_trace();
  }
LABEL_16:
  objc_autoreleasePoolPop(v5);
  return v8;
}

uint64_t audioSessionAVAudioSession_Activate()
{
  void *v0;
  id *DerivedStorage;
  _DWORD *v2;
  uint64_t v3;
  id v5;

  v0 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v5 = 0;
  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  objc_msgSend(*DerivedStorage, "setActive:withOptions:error:", 1, 0x20000000, &v5);
  v3 = objc_msgSend(v5, "code");
  if (*v2 == 1)
    kdebug_trace();
  objc_autoreleasePoolPop(v0);
  return v3;
}

uint64_t audioSessionAVAudioSession_Deactivate()
{
  void *v0;
  id *DerivedStorage;
  _DWORD *v2;
  uint64_t v3;
  id v5;
  char v6;

  v0 = (void *)MEMORY[0x19403137C]();
  v6 = 0;
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v2 = (_DWORD *)MEMORY[0x1E0CA1FC0];
  if (*MEMORY[0x1E0CA1FC0] == 1)
    kdebug_trace();
  v5 = 0;
  if (FigCFDictionaryGetBooleanIfPresent())
    objc_msgSend(*DerivedStorage, "handleRemoteInterruption:postInterruptionNotification:error:", 0, v6 != 0, &v5);
  else
    objc_msgSend(*DerivedStorage, "setActive:error:", 0, &v5);
  v3 = objc_msgSend(v5, "code", v5);
  if (*v2 == 1)
    kdebug_trace();
  objc_autoreleasePoolPop(v0);
  return v3;
}

uint64_t audioSessionAVAudioSession_IsRelatedSessionID(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;

  v3 = (void *)MEMORY[0x19403137C]();
  v4 = objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "isRelatedSessionID:", a2);
  objc_autoreleasePoolPop(v3);
  return v4;
}

uint64_t audioSessionAVAudioSession_SetMXSessionPropertiesAndCopyErrors(uint64_t a1, const __CFDictionary *a2, _QWORD *a3)
{
  void *v5;
  id *DerivedStorage;
  uint64_t v7;
  int64_t Count;
  const void **v9;
  CFMutableDictionaryRef MutableCopy;
  __CFDictionary *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  const void **v17;
  const void *v18;
  const void *v19;
  id *v20;
  int v21;
  const void *v22;
  const void *v23;
  const void *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  const void **v37;
  _QWORD *v38;
  void *v39;
  __CFDictionary *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  id v49;
  _BYTE v50[128];
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v49 = 0;
  CFDictionaryGetKeysAndValues(a2, 0, 0);
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_7);
  v7 = audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe != 0;
  if (!audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    FigSignalErrorAt();
    v9 = 0;
    goto LABEL_59;
  }
  Count = FigCFDictionaryGetCount();
  v9 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  CFDictionaryGetKeysAndValues(a2, v9, 0);
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
  if (!MutableCopy)
  {
LABEL_59:
    free(v9);
    goto LABEL_56;
  }
  v11 = MutableCopy;
  if (Count >= 1)
  {
    v12 = (void **)v9;
    do
    {
      v13 = *v12;
      if (audioSessionAVAudioSession_propertyIsInDenyList(*v12))
        CFDictionaryRemoveValue(v11, v13);
      ++v12;
      --Count;
    }
    while (Count);
  }
  v14 = FigCFDictionaryGetCount();
  if (v14 < 1)
  {
    v7 = 1;
  }
  else
  {
    v15 = v14;
    v40 = v11;
    v16 = (int *)MEMORY[0x1E0CA1FC0];
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      if (*v9)
        CFHash(*v9);
      if (v15 < 2)
      {
        v17 = v9;
      }
      else
      {
        v17 = v9;
        v18 = v9[1];
        if (v18)
          CFHash(v18);
        if (v15 >= 3)
        {
          v19 = v9[2];
          if (v19)
            CFHash(v19);
        }
      }
      kdebug_trace();
      v9 = v17;
    }
    if (a3)
      v20 = &v49;
    else
      v20 = 0;
    v7 = objc_msgSend(*DerivedStorage, "setMXProperties:propertyErrors:", a2, v20);
    v21 = *v16;
    v11 = v40;
    if (v21 == 1)
    {
      if (v15 >= 4)
      {
        v22 = v9[3];
        if (v22)
          CFHash(v22);
        if (v15 >= 5)
        {
          v23 = v9[4];
          if (v23)
            CFHash(v23);
          if (v15 >= 6)
          {
            v24 = v9[5];
            if (v24)
              CFHash(v24);
          }
        }
      }
      kdebug_trace();
    }
    if (a3)
    {
      v37 = v9;
      v38 = a3;
      v39 = v5;
      v25 = (void *)objc_opt_new();
      v45 = 0u;
      v46 = 0u;
      v47 = 0u;
      v48 = 0u;
      v26 = v49;
      v27 = objc_msgSend(v49, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
      if (v27)
      {
        v28 = v27;
        v29 = *(_QWORD *)v46;
        do
        {
          for (i = 0; i != v28; ++i)
          {
            if (*(_QWORD *)v46 != v29)
              objc_enumerationMutation(v26);
            v31 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * i);
            v41 = 0u;
            v42 = 0u;
            v43 = 0u;
            v44 = 0u;
            v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
            if (v32)
            {
              v33 = v32;
              v34 = *(_QWORD *)v42;
              do
              {
                for (j = 0; j != v33; ++j)
                {
                  if (*(_QWORD *)v42 != v34)
                    objc_enumerationMutation(v31);
                  objc_msgSend(v25, "setObject:forKeyedSubscript:", objc_msgSend(v31, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * j)), *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * j));
                }
                v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v41, v50, 16);
              }
              while (v33);
            }
          }
          v28 = objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v45, v51, 16);
        }
        while (v28);
      }
      v5 = v39;
      *v38 = v25;
      v9 = v37;
      v11 = v40;
      v7 = v7;
    }
  }
  free(v9);
  CFRelease(v11);
LABEL_56:
  objc_autoreleasePoolPop(v5);
  return v7;
}

uint64_t audioSessionAVAudioSession_CopyMXSessionPropertiesAndErrors(uint64_t a1, const __CFArray *a2, _QWORD *a3, _QWORD *a4)
{
  void *v7;
  id *DerivedStorage;
  const __CFArray *MutableCopy;
  CFIndex v10;
  void *ValueAtIndex;
  CFIndex Count;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  const void *v20;
  const void *v21;
  uint64_t v22;

  v7 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  if (audioSessionAVAudioSession_canUseGenericPipe_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_canUseGenericPipe_onceToken, &__block_literal_global_7);
  if (audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe)
  {
    MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a2);
    v10 = 0;
    if (!MutableCopy)
      goto LABEL_7;
    while (v10 < CFArrayGetCount(MutableCopy))
    {
      while (1)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(MutableCopy, v10);
        if (audioSessionAVAudioSession_propertyIsInDenyList(ValueAtIndex))
          CFArrayRemoveValueAtIndex(MutableCopy, v10--);
        ++v10;
        if (MutableCopy)
          break;
LABEL_7:
        if ((v10 & 0x8000000000000000) == 0)
        {
          v14 = 0;
          v13 = 0;
          if (*MEMORY[0x1E0CA1FC0] == 1)
            goto LABEL_27;
          goto LABEL_28;
        }
      }
    }
    Count = CFArrayGetCount(MutableCopy);
    v14 = Count;
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      if (Count >= 1)
      {
        v15 = CFArrayGetValueAtIndex(a2, 0);
        if (v15)
          CFHash(v15);
        if (v14 < 2)
        {
          v14 = 1;
        }
        else
        {
          v16 = CFArrayGetValueAtIndex(a2, 1);
          if (v16)
            CFHash(v16);
          if (v14 < 3)
          {
            v14 = 2;
          }
          else
          {
            v17 = CFArrayGetValueAtIndex(a2, 2);
            if (v17)
              CFHash(v17);
          }
        }
      }
LABEL_27:
      kdebug_trace();
    }
LABEL_28:
    v18 = (CFTypeRef)objc_msgSend(*DerivedStorage, "getMXProperties:propertyErrors:", a2, 0, v13);
    if (v18)
      v18 = CFRetain(v18);
    *a3 = v18;
    if (*MEMORY[0x1E0CA1FC0] == 1)
    {
      if ((uint64_t)v14 >= 4)
      {
        v19 = CFArrayGetValueAtIndex(a2, 3);
        if (v19)
          CFHash(v19);
        if (v14 >= 5)
        {
          v20 = CFArrayGetValueAtIndex(a2, 4);
          if (v20)
            CFHash(v20);
          if (v14 >= 6)
          {
            v21 = CFArrayGetValueAtIndex(a2, 5);
            if (v21)
              CFHash(v21);
          }
        }
      }
      kdebug_trace();
    }
    if (a4)
      *a4 = 0;
    if (MutableCopy)
      CFRelease(MutableCopy);
    v22 = 0;
  }
  else
  {
    v22 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v7);
  return v22;
}

uint64_t audioSessionAVAudioSession_propertyIsInDenyList(void *value)
{
  if (audioSessionAVAudioSession_propertyIsInDenyList_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_propertyIsInDenyList_onceToken, &__block_literal_global_99);
  return CFSetContainsValue((CFSetRef)audioSessionAVAudioSession_propertyIsInDenyList_denyList, value);
}

uint64_t audioSessionAVAudioSession_copyRoutingContext()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v0 = (void *)MEMORY[0x19403137C]();
  v1 = objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "routingContextUID");
  if (v1)
  {
    v5 = *MEMORY[0x1E0D48BE0];
    v6[0] = v1;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
    v2 = FigRoutingContextRemoteCopyContextForUUID();
  }
  else
  {
    v2 = FigSignalErrorAt();
  }
  v3 = v2;
  objc_autoreleasePoolPop(v0);
  return v3;
}

uint64_t audioSessionAVAudioSession_copySpatializationCapabilities(uint64_t a1, const __CFAllocator *a2, uint64_t a3, __CFDictionary **a4)
{
  void *v7;
  uint64_t v8;
  void *v9;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v11;
  CFMutableArrayRef v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x19403137C]();
  v8 = objc_msgSend(*(id *)CMBaseObjectGetDerivedStorage(), "spatialPreferences:", a3);
  if (!v8
    || (v9 = (void *)v8, (Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
  {
    v24 = FigSignalErrorAt();
    goto LABEL_23;
  }
  v11 = Mutable;
  v12 = CFArrayCreateMutable(a2, 0, MEMORY[0x1E0C9B378]);
  if (!v12)
  {
    v18 = FigSignalErrorAt();
    goto LABEL_26;
  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v13 = (void *)objc_msgSend(v9, "spatialAudioSources", 0);
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v27 != v16)
          objc_enumerationMutation(v13);
        objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * i), "intValue");
        FigCFArrayAppendInt32();
      }
      v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
    }
    while (v15);
  }
  if (objc_msgSend((id)objc_msgSend(v9, "spatialAudioSources"), "count")
    && objc_msgSend(v9, "prefersHeadTrackedSpatialization"))
  {
    FigCFArrayAppendInt32();
  }
  CFDictionarySetValue(v11, CFSTR("SpatialCapabilitiesKey_spatialAudioSources"), v12);
  objc_msgSend(v9, "maximumSpatializableChannels");
  v18 = FigCFDictionarySetInt32();
  if ((_DWORD)v18)
  {
LABEL_26:
    v24 = v18;
    CFRelease(v11);
    if (!v12)
      goto LABEL_23;
    goto LABEL_22;
  }
  v19 = objc_msgSend(v9, "prefersLossyAudioSources");
  v20 = (const void *)*MEMORY[0x1E0C9AE50];
  v21 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v19)
    v22 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v22 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v11, CFSTR("SpatialCapabilitiesKey_prefersLossyAudioSources"), v22);
  if (objc_msgSend(v9, "alwaysSpatialize"))
    v23 = v20;
  else
    v23 = v21;
  CFDictionarySetValue(v11, CFSTR("SpatialCapabilitiesKey_alwaysSpatialize"), v23);
  v24 = 0;
  *a4 = v11;
LABEL_22:
  CFRelease(v12);
LABEL_23:
  objc_autoreleasePoolPop(v7);
  return v24;
}

uint64_t audioSessionAVAudioSession_copyNeroInformationDictionary(uint64_t a1, const __CFAllocator *a2, CFMutableDictionaryRef *a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *);
  uint64_t v8;
  CFMutableDictionaryRef Mutable;
  uint64_t v10;
  CFDictionaryRef theDict;

  theDict = 0;
  if (a3)
  {
    if (!a1 || (v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0)
    {
      v10 = 4294948075;
      goto LABEL_12;
    }
    v7 = *(uint64_t (**)(uint64_t, _QWORD, const __CFAllocator *, CFDictionaryRef *))(v6 + 32);
    if (!v7)
    {
      v10 = 4294948071;
      goto LABEL_12;
    }
    v8 = v7(a1, *MEMORY[0x1E0D48650], a2, &theDict);
    if (!(_DWORD)v8)
    {
      if (theDict)
      {
        Mutable = CFDictionaryCreateMutable(a2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        FigCFDictionaryGetBooleanIfPresent();
      }
      else
      {
        Mutable = 0;
      }
      *a3 = Mutable;
      v10 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  v10 = v8;
LABEL_12:
  if (theDict)
    CFRelease(theDict);
  return v10;
}

uint64_t audioSessionAVAudioSession_copyAudioDeviceIsAvailable(uint64_t a1, CFTypeRef *a2)
{
  void *v4;
  uint64_t DerivedStorage;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, _QWORD, uint64_t, CFTypeRef *);
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t (*v13)(CFTypeRef, CFTypeRef, CFTypeRef *);
  uint64_t v14;
  CFTypeRef v15;
  void *v16;
  CFTypeRef *v17;
  CFTypeRef cf;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef v22;

  v4 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v21 = 0;
  v22 = 0;
  cf = 0;
  v20 = 0;
  if (!a2)
  {
    v8 = FigSignalErrorAt();
    goto LABEL_30;
  }
  v6 = (id *)DerivedStorage;
  v7 = *MEMORY[0x1E0C9AE00];
  v8 = audioSessionAVAudioSession_copyRoutingContext();
  if ((_DWORD)v8)
  {
LABEL_30:
    v14 = v8;
    goto LABEL_20;
  }
  if (FigCFNumberGetSInt32() == 12)
  {
    if (!a1 || (v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0)
    {
      v14 = 4294948075;
      goto LABEL_20;
    }
    v10 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, CFTypeRef *))(v9 + 48);
    if (!v10)
    {
      v14 = 4294948071;
      goto LABEL_20;
    }
    v8 = v10(a1, *MEMORY[0x1E0D49BB0], v7, &v20);
    if (!(_DWORD)v8)
    {
      v11 = v22;
      v12 = v20;
      v13 = *(uint64_t (**)(CFTypeRef, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 144);
      if (!v13)
      {
        v14 = 4294954514;
        goto LABEL_20;
      }
      v14 = v13(v11, v12, &cf);
      v15 = cf;
      if ((_DWORD)v14)
        goto LABEL_17;
      if (!cf)
        goto LABEL_15;
      goto LABEL_14;
    }
    goto LABEL_30;
  }
  v16 = (void *)objc_msgSend(*v6, "availableOutputs");
  if (!v16 || !objc_msgSend(v16, "count"))
  {
LABEL_15:
    v17 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    goto LABEL_16;
  }
LABEL_14:
  v17 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
LABEL_16:
  v14 = 0;
  *a2 = CFRetain(*v17);
  v15 = cf;
LABEL_17:
  if (v15)
    CFRelease(v15);
LABEL_20:
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
  if (v22)
    CFRelease(v22);
  objc_autoreleasePoolPop(v4);
  return v14;
}

CFSetRef __audioSessionAVAudioSession_propertyIsInDenyList_block_invoke()
{
  void *v0;
  CFSetRef result;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0D49600];
  values[0] = *(void **)MEMORY[0x1E0D49BF8];
  values[1] = v0;
  result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B3B0]);
  audioSessionAVAudioSession_propertyIsInDenyList_denyList = (uint64_t)result;
  return result;
}

void __audioSessionAVAudioSession_canUseGenericPipe_block_invoke()
{
  __SecTask *v0;
  __SecTask *v1;
  const __CFBoolean *v2;
  const __CFBoolean *v3;
  CFTypeID v4;
  Boolean Value;

  v0 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v0)
  {
    v1 = v0;
    v2 = (const __CFBoolean *)SecTaskCopyValueForEntitlement(v0, CFSTR("com.apple.private.coreaudio.mxsessionPropertyPipe"), 0);
    if (v2)
    {
      v3 = v2;
      v4 = CFGetTypeID(v2);
      if (v4 == CFBooleanGetTypeID())
        Value = CFBooleanGetValue(v3);
      else
        Value = 0;
      CFRelease(v3);
    }
    else
    {
      Value = 0;
    }
    CFRelease(v1);
  }
  else
  {
    Value = 0;
  }
  audioSessionAVAudioSession_canUseGenericPipe_canUseGenericPipe = Value;
}

uint64_t __audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_block_invoke()
{
  return FigCFWeakReferenceTableCreate();
}

void __audioSessionAVAudioSession_registerMXNotificationTranslationCallbacks_block_invoke(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v6[5];
  const void *v7;

  v7 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __audioSessionAVAudioSession_registerMXNotificationTranslationCallbacks_block_invoke_2;
  v6[3] = &__block_descriptor_40_e51_v24__0__OpaqueFigAudioSession__8__NSNotification_16l;
  v6[4] = a3;
  audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(v5, 2, (uint64_t)a2, (uint64_t)v6, (uint64_t *)&v7);
  if (v7)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, v7);
}

void audioSessionAVAudioSession_addAVAudioSessionObserverForNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  void *v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[6];

  v9 = (void *)MEMORY[0x19403137C]();
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = *(_QWORD *)(DerivedStorage + 128);
  v12 = *(void **)DerivedStorage;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __audioSessionAVAudioSession_addAVAudioSessionObserverForNotification_block_invoke;
  v14[3] = &unk_1E2FB2390;
  v14[4] = a4;
  v14[5] = v11;
  v13 = objc_msgSend(v12, "addObserverForType:name:block:", a2, a3, v14);
  if (a5)
    *a5 = v13;
  objc_autoreleasePoolPop(v9);
}

uint64_t __audioSessionAVAudioSession_registerMXNotificationTranslationCallbacks_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  objc_msgSend(a3, "userInfo");
  return FigDispatchAsyncPostNotification();
}

void __audioSessionAVAudioSession_addAVAudioSessionObserverForNotification_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken != -1)
    dispatch_once(&audioSessionAVAudioSession_getFigAudioSessionWeakReferenceTable_onceToken, &__block_literal_global_11_0);
  v2 = FigCFWeakReferenceTableCopyValue();
  if (v2)
  {
    v3 = (const void *)v2;
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    CFRelease(v3);
  }
}

uint64_t __audioSessionAVAudioSession_registerSpatialNotificationTranslationCallbacks_block_invoke()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return FigDispatchAsyncPostNotification();
}

void __audioSessionAVAudioSession_registerLossNotificationCallbacks_block_invoke()
{
  CFMutableDictionaryRef Mutable;

  CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt64();
  FigServer_IsServerProcess();
  FigCFDictionarySetValue();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

BOOL FigCGRectEqualToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v8 = fabs(a1);
  v9 = fabs(a2);
  v10 = fabs(a5);
  v11 = fabs(a6);
  if (v8 == INFINITY || v9 == INFINITY)
  {
    return v11 == INFINITY || v10 == INFINITY;
  }
  else
  {
    v14 = v10 == INFINITY || v11 == INFINITY;
    if (!v14 && (__figCGRectStandardize(&v19), __figCGRectStandardize(&v15), v19 == v15) && v20 == v16 && v21 == v17)
      return v22 == v18;
    else
      return 0;
  }
}

double *__figCGRectStandardize(double *result)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  double v8;
  double v9;

  v1 = result[2];
  if (v1 < 0.0 || result[3] < 0.0)
  {
    v2 = result[1];
    v3 = fabs(v2);
    v4 = INFINITY;
    if (fabs(*result) == INFINITY || v3 == INFINITY)
    {
      v6 = 0.0;
      v7 = 0.0;
      v8 = INFINITY;
    }
    else
    {
      v9 = result[3];
      v7 = -v1;
      if (v1 >= 0.0)
      {
        v7 = result[2];
        v1 = -0.0;
      }
      v8 = *result + v1;
      v6 = -v9;
      if (v9 >= 0.0)
      {
        v6 = result[3];
        v9 = -0.0;
      }
      v4 = v2 + v9;
    }
    *result = v8;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
  }
  return result;
}

__CFDictionary *FigCGSizeCreateDictionaryRepresentation(double a1, double a2)
{
  __CFDictionary *Mutable;
  CFDictionaryRef DictionaryRepresentation;
  CGSize v7;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  figCGAddSizeToDictionary(Mutable, a1, a2);
  v7.width = a1;
  v7.height = a2;
  DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v7);
  if (!FigCFEqual())
  {
    FigSignalErrorAt();
    if (!DictionaryRepresentation)
      return Mutable;
    goto LABEL_3;
  }
  if (DictionaryRepresentation)
LABEL_3:
    CFRelease(DictionaryRepresentation);
  return Mutable;
}

void figCGAddSizeToDictionary(__CFDictionary *a1, double a2, double a3)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  double v7;
  double v8;

  v7 = a2;
  v8 = a3;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &v7);
  v6 = CFNumberCreate(v4, kCFNumberCGFloatType, &v8);
  CFDictionaryAddValue(a1, CFSTR("Width"), v5);
  CFDictionaryAddValue(a1, CFSTR("Height"), v6);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
}

uint64_t FigCGSizeMakeWithDictionaryRepresentation(CFDictionaryRef theDict, _OWORD *a2)
{
  uint64_t v4;
  char i;
  char v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;

  v4 = 0;
  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0uLL;
  for (i = 1; ; i = 0)
  {
    v6 = i;
    result = (uint64_t)CFDictionaryGetValue(theDict, *((const void **)&off_1E2FB2430 + v4));
    if (!result)
      break;
    result = CFNumberGetValue((CFNumberRef)result, kCFNumberCGFloatType, (char *)&v8 + 8 * v4);
    if (!(_DWORD)result)
      break;
    v4 = 1;
    if ((v6 & 1) == 0)
    {
      *a2 = v8;
      return 1;
    }
  }
  return result;
}

uint64_t FigCGRectMakeWithDictionaryRepresentation(CFDictionaryRef theDict, _OWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v4 = 0;
  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  while (1)
  {
    result = (uint64_t)CFDictionaryGetValue(theDict, *(const void **)((char *)&off_1E2FB2440 + v4));
    if (!result)
      break;
    result = CFNumberGetValue((CFNumberRef)result, kCFNumberCGFloatType, (char *)&v7 + v4);
    if (!(_DWORD)result)
      break;
    v4 += 8;
    if (v4 == 32)
    {
      v6 = v8;
      *a2 = v7;
      a2[1] = v6;
      return 1;
    }
  }
  return result;
}

uint64_t FigToolViewCreateWithOptions(const __CFAllocator *a1, const __CFDictionary *a2, CFMutableArrayRef **a3, _QWORD *a4)
{
  CFMutableArrayRef *v8;
  uint64_t v9;
  uint64_t v10;
  dispatch_semaphore_t v11;
  uint64_t Basic;
  void *v13;
  uint64_t v14;
  void *value;

  v8 = (CFMutableArrayRef *)malloc_type_calloc(1uLL, 0x118uLL, 0x10600407AE0150EuLL);
  value = 0;
  if (a2)
    LODWORD(a2) = CFDictionaryGetValue(a2, CFSTR("StartImmediately")) == (const void *)*MEMORY[0x1E0C9AE40];
  *v8 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v8[2] = (CFMutableArrayRef)FigSimpleMutexCreate();
  v9 = FigSimpleMutexCreate();
  v8[19] = (CFMutableArrayRef)v9;
  if (!v9)
    return 0;
  v10 = FigSimpleMutexCreate();
  v8[26] = (CFMutableArrayRef)v10;
  if (!v10)
    return 0;
  v11 = dispatch_semaphore_create(0);
  v8[7] = (CFMutableArrayRef)v11;
  if (!v11)
    return 0;
  if (a4)
  {
    Basic = FigVisualContextCreateBasic((uint64_t)a1, 0, (CFTypeRef *)&value);
    v13 = value;
    if ((_DWORD)Basic)
      goto LABEL_18;
    CFArrayAppendValue(*v8, value);
  }
  if ((_DWORD)a2)
  {
    v13 = value;
    goto LABEL_12;
  }
  Basic = FigToolViewStart((uint64_t)v8);
  v13 = value;
  if ((_DWORD)Basic)
  {
LABEL_18:
    v14 = Basic;
    if (!v13)
      return v14;
    goto LABEL_15;
  }
LABEL_12:
  *a3 = v8;
  v14 = 0;
  if (a4)
    *a4 = v13;
  if (v13)
LABEL_15:
    CFRelease(v13);
  return v14;
}

uint64_t FigToolViewStart(uint64_t a1)
{
  CFDictionaryRef v2;
  uint64_t v3;
  void *values;

  if (*(_QWORD *)(a1 + 40))
    return FigSignalErrorAt();
  values = CFSTR("figtoolview.display");
  v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = FigThreadCreate();
  if (!(_DWORD)v3)
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 56), 0xFFFFFFFFFFFFFFFFLL);
  if (v2)
    CFRelease(v2);
  return v3;
}

uint64_t ftvFramebufferThread(uint64_t a1)
{
  int SecondaryDisplay;
  __CFRunLoopSource *VSyncRunLoopSource;
  const __CFString *v4;
  __CFRunLoopSource *HotPlugRunLoopSource;
  int v6;

  *(_QWORD *)(a1 + 48) = CFRunLoopGetCurrent();
  SecondaryDisplay = IOMobileFramebufferGetSecondaryDisplay();
  if (!SecondaryDisplay)
  {
    VSyncRunLoopSource = (__CFRunLoopSource *)IOMobileFramebufferGetVSyncRunLoopSource();
    if (!VSyncRunLoopSource
      || (v4 = (const __CFString *)*MEMORY[0x1E0C9B280],
          CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 48), VSyncRunLoopSource, (CFRunLoopMode)*MEMORY[0x1E0C9B280]),
          (HotPlugRunLoopSource = (__CFRunLoopSource *)IOMobileFramebufferGetHotPlugRunLoopSource()) == 0))
    {
LABEL_8:
      v6 = 0;
      goto LABEL_9;
    }
    CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 48), HotPlugRunLoopSource, v4);
    SecondaryDisplay = IOMobileFramebufferEnableHotPlugDetectNotifications();
    if (!SecondaryDisplay)
    {
      SecondaryDisplay = IOMobileFramebufferGetDigitalOutState();
      if (!SecondaryDisplay)
      {
        dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
        CFRunLoopRun();
        IOMobileFramebufferDisableHotPlugDetectNotifications();
        if (*(_BYTE *)(a1 + 64))
          ftvIOMFHotPlugNotificationCallback(0, 0, a1);
        goto LABEL_8;
      }
    }
  }
  v6 = SecondaryDisplay;
LABEL_9:
  if (v6)
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
  return 0;
}

uint64_t FigToolViewCopyPixelBufferAttributes(uint64_t a1, uint64_t a2, __CFDictionary **a3)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  __CFArray *v6;
  uint64_t v7;
  char v8;
  char v9;
  CFNumberRef v10;
  const void *IOSurfacePropertiesDictionary;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v13[0] = 0x3432306634323076;
  FigGetAlignmentForIOSurfaceOutputToDisplayService();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = CFArrayCreateMutable(v4, 0, MEMORY[0x1E0C9B378]);
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = CFNumberCreate(v4, kCFNumberSInt32Type, (char *)v13 + 4 * v7);
    CFArrayAppendValue(v6, v10);
    if (v10)
      CFRelease(v10);
    v8 = 0;
    v7 = 1;
  }
  while ((v9 & 1) != 0);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v6);
  if (v6)
    CFRelease(v6);
  IOSurfacePropertiesDictionary = (const void *)FigCreateIOSurfacePropertiesDictionary();
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8FF0], IOSurfacePropertiesDictionary);
  CFRelease(IOSurfacePropertiesDictionary);
  *a3 = Mutable;
  return 0;
}

uint64_t FigToolViewSetVideoGravity(uint64_t a1, unsigned int a2)
{
  if (a2 >= 3)
    return FigSignalErrorAt();
  if (*(_DWORD *)(a1 + 224) != a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 208));
    *(_DWORD *)(a1 + 224) = a2;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 208));
  }
  return 0;
}

uint64_t FigToolViewAddVisualContext(uint64_t a1, const void *a2)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  CFArrayAppendValue(*(CFMutableArrayRef *)a1, a2);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return 0;
}

uint64_t FigToolViewRemoveVisualContext(uint64_t a1, const void *a2)
{
  const __CFArray *v4;
  CFIndex FirstIndexOfValue;
  uint64_t v6;
  CFRange v8;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  v4 = *(const __CFArray **)a1;
  v8.length = CFArrayGetCount(*(CFArrayRef *)a1);
  v8.location = 0;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v4, v8, a2);
  if (FirstIndexOfValue == -1)
  {
    v6 = 4294954481;
  }
  else
  {
    if (*(const void **)(a1 + 8) == a2)
      *(_QWORD *)(a1 + 8) = 0;
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)a1, FirstIndexOfValue);
    v6 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v6;
}

void FigToolViewMarkNeedsClear(uint64_t a1)
{
  uint64_t v2;
  char i;
  char v4;
  uint64_t v5;
  const void *v6;
  _QWORD *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  _QWORD *v11;
  const void *v12;

  *(_BYTE *)(a1 + 25) = 1;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 152));
  v2 = 0;
  for (i = 1; ; i = 0)
  {
    v4 = i;
    v5 = a1 + 16 * v2;
    v8 = *(const void **)(v5 + 160);
    v7 = (_QWORD *)(v5 + 160);
    v6 = v8;
    if (v8)
    {
      CFRelease(v6);
      *v7 = 0;
    }
    *(_BYTE *)(a1 + 16 * v2 + 168) = 1;
    v9 = a1 + 8 * v2;
    v12 = *(const void **)(v9 + 192);
    v11 = (_QWORD *)(v9 + 192);
    v10 = v12;
    if (v12)
    {
      CFRelease(v10);
      *v11 = 0;
    }
    v2 = 1;
    if ((v4 & 1) == 0)
      JUMPOUT(0x19402EF04);
  }
}

void FigToolViewWaitUntilDoneThenDispose(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;

  FigThreadJoin();
  *(_QWORD *)(a1 + 8) = 0;
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)a1);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  FigSimpleMutexDestroy();
  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_release(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (*(_QWORD *)(a1 + 152))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 152) = 0;
  }
  if (*(_QWORD *)(a1 + 208))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(a1 + 208) = 0;
  }
  v3 = 0;
  v4 = 1;
  do
  {
    v5 = v4;
    v6 = a1 + 16 * v3;
    v9 = *(const void **)(v6 + 160);
    v8 = (_QWORD *)(v6 + 160);
    v7 = v9;
    if (v9)
    {
      CFRelease(v7);
      *v8 = 0;
    }
    v10 = a1 + 8 * v3;
    v13 = *(const void **)(v10 + 192);
    v12 = (_QWORD *)(v10 + 192);
    v11 = v13;
    if (v13)
    {
      CFRelease(v11);
      *v12 = 0;
    }
    v4 = 0;
    v3 = 1;
  }
  while ((v5 & 1) != 0);
  v14 = *(const void **)(a1 + 248);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v15 = *(const void **)(a1 + 232);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 232) = 0;
  }
  v16 = *(const void **)(a1 + 240);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v17 = *(const void **)(a1 + 32);
  if (v17)
    CFRelease(v17);
  free((void *)a1);
}

uint64_t FigToolViewSetOverlayImage(uint64_t result, unsigned int a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;

  if (a2 <= 1)
  {
    v5 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 152));
    v6 = a2;
    v7 = v5 + 16 * a2;
    v8 = *(const void **)(v7 + 160);
    *(_QWORD *)(v7 + 160) = a3;
    if (a3)
      CFRetain(a3);
    if (v8)
      CFRelease(v8);
    *(_BYTE *)(v5 + 16 * v6 + 168) = 1;
    JUMPOUT(0x19402EF04);
  }
  return result;
}

void ftvIOMFHotPlugNotificationCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  const void *v10;
  _QWORD *v11;
  const void *v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  const void *v17;
  _QWORD *v18;
  const void *v19;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v21;
  __CFDictionary *DictionaryRepresentation;
  __CFDictionary *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v25;
  _DWORD v26[32];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a3 + 64))
  {
    v26[0] = 0;
    IOMobileFramebufferDisableVSyncNotifications();
    if (!ftvClearIOMFLayers(a1, v26))
      IOMobileFramebufferSwapWait();
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = v7;
      v9 = a3 + 32 * v6;
      v12 = *(const void **)(v9 + 80);
      v11 = (_QWORD *)(v9 + 80);
      v10 = v12;
      *((_DWORD *)v11 - 2) = 0;
      if (v12)
      {
        CFRelease(v10);
        *v11 = 0;
      }
      v13 = 0;
      v14 = 1;
      do
      {
        v15 = v14;
        v16 = a3 + 32 * v6 + 8 * v13;
        v19 = *(const void **)(v16 + 88);
        v18 = (_QWORD *)(v16 + 88);
        v17 = v19;
        if (v19)
        {
          CFRelease(v17);
          *v18 = 0;
        }
        v14 = 0;
        v13 = 1;
      }
      while ((v15 & 1) != 0);
      v7 = 0;
      v6 = 1;
    }
    while ((v8 & 1) != 0);
    *(_DWORD *)(a3 + 68) = 0;
    *(_QWORD *)(a3 + 136) = 0;
    *(_QWORD *)(a3 + 144) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  if (a2)
  {
    v25 = 0;
    if (!IOMobileFramebufferSetDisplayDevice()
      && !FigIOMFSelectBestDigitalOutMode()
      && !IOMobileFramebufferGetID()
      && !IOMobileFramebufferGetDisplaySize()
      && !ftvClearIOMFLayers(a1, &v25))
    {
      *(_DWORD *)(a3 + 72) = v25;
      if (!IOMobileFramebufferEnableVSyncNotifications())
      {
        *(_BYTE *)(a3 + 64) = 1;
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
        {
          v21 = Mutable;
          DictionaryRepresentation = FigCGSizeCreateDictionaryRepresentation(*(double *)(a3 + 136), *(double *)(a3 + 144));
          if (DictionaryRepresentation)
          {
            v23 = DictionaryRepresentation;
            CFDictionarySetValue(v21, CFSTR("DisplaySize"), DictionaryRepresentation);
            CFDictionarySetValue(v21, CFSTR("IsOverscanned"), (const void *)*MEMORY[0x1E0C9AE40]);
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CFRelease(v23);
          }
          CFRelease(v21);
        }
      }
    }
  }
}

uint64_t ftvClearIOMFLayers(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  int v4;

  result = IOMobileFramebufferSwapBegin();
  if (!(_DWORD)result)
  {
    v4 = 0;
    while (1)
    {
      result = IOMobileFramebufferSwapSetLayer();
      if ((_DWORD)result)
        break;
      if (++v4 == 3)
      {
        result = IOMobileFramebufferSwapSetBackgroundColor();
        if (!(_DWORD)result)
        {
          result = IOMobileFramebufferSwapEnd();
          if (!(_DWORD)result)
            *a2 = 0;
        }
        return result;
      }
    }
  }
  return result;
}

void ftvIOMFVSyncCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const void *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  const void *v14;
  CFIndex Count;
  int v16;
  char v17;
  uint64_t v18;
  CFIndex v19;
  uint64_t v20;
  const void *ValueAtIndex;
  void (*v22)(const void *, __int128 *, __int128 *);
  void (*v23)(const void *, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t (*v24)(const void *, __int128 *);
  void (*v25)(const void *, __int128 *, __int128 *);
  uint64_t (*v26)(const void *, __int128 *);
  unsigned int (*v27)(const void *, uint64_t, __int128 *, uint64_t, char *, _QWORD, _QWORD);
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  CFTypeRef v36;
  __CVBuffer *v37;
  const __CFDictionary *v38;
  const __CFDictionary *v39;
  CFTypeID v40;
  const __CFDictionary *v41;
  const __CFDictionary *v42;
  CFTypeID v43;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  double v46;
  CFTypeID v47;
  double v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __CVBuffer *v52;
  const __CFDictionary *v53;
  const __CFDictionary *v54;
  CFTypeID v55;
  const __CFNumber *Value;
  const __CFNumber *v57;
  CFTypeID v58;
  const __CFNumber *v59;
  const __CFNumber *v60;
  CFTypeID v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  const void *v66;
  const void *v67;
  void *v68;
  CFTypeRef v69;
  uint64_t v70;
  char v71;
  char v72;
  const void *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 valuePtr;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;

  v79 = 0u;
  v78 = 0u;
  v76 = 0u;
  v80 = 0xAuLL;
  v77 = (unint64_t)(a4 + a3);
  *(_QWORD *)&v78 = FigHostTimeToNanoseconds();
  DWORD1(v76) = 1000000000;
  memset(v90, 0, sizeof(v90));
  if (*(_BYTE *)(a5 + 26))
  {
    *(_BYTE *)(a5 + 26) = 0;
    if (*(_BYTE *)(a5 + 64))
    {
      ftvIOMFHotPlugNotificationCallback(a1, 0, a5);
      ftvIOMFHotPlugNotificationCallback(a1, 1, a5);
    }
  }
  if (*(_DWORD *)(a5 + 104))
  {
    if (IOMobileFramebufferSwapWait())
      goto LABEL_110;
    v7 = *(const void **)(a5 + 112);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a5 + 112) = 0;
    }
    v8 = 0;
    v9 = 1;
    do
    {
      v10 = v9;
      v11 = a5 + 8 * v8;
      v14 = *(const void **)(v11 + 120);
      v13 = (_QWORD *)(v11 + 120);
      v12 = v14;
      if (v14)
      {
        CFRelease(v12);
        *v13 = 0;
      }
      v9 = 0;
      v8 = 1;
    }
    while ((v10 & 1) != 0);
    *(_DWORD *)(a5 + 104) = 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a5 + 16));
  Count = CFArrayGetCount(*(CFArrayRef *)a5);
  if (Count >= 1)
  {
    v16 = 0;
    v17 = 0;
    v18 = *MEMORY[0x1E0C9AE00];
    v19 = Count + 1;
    v75 = *MEMORY[0x1E0CA2E68];
    v20 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    while (1)
    {
      v88 = v75;
      v89 = v20;
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a5, v19 - 2);
      v22 = *(void (**)(const void *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                        + 56);
      if (v22)
        v22(ValueAtIndex, &v76, &v88);
      if (v17)
      {
        v91 = v88;
        *(_QWORD *)&v92 = v89;
        v23 = *(void (**)(const void *, uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v23)
        {
          valuePtr = v91;
          *(_QWORD *)&v84 = v92;
          v23(ValueAtIndex, v18, &valuePtr, 1, 0, 0, 0);
        }
        v17 = 1;
        goto LABEL_40;
      }
      v91 = v88;
      *(_QWORD *)&v92 = v89;
      v24 = *(uint64_t (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v24 || (valuePtr = v91, *(_QWORD *)&v84 = v92, (v16 = v24(ValueAtIndex, &valuePtr)) == 0))
      {
        v85 = v78;
        v86 = v79;
        v87 = v80;
        valuePtr = v76;
        v84 = v77;
        *(_QWORD *)&v84 = v84 + FigNanosecondsToHostTime();
        v25 = *(void (**)(const void *, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 56);
        if (v25)
          v25(ValueAtIndex, &valuePtr, &v88);
        v81 = v88;
        v82 = v89;
        v26 = *(uint64_t (**)(const void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
        if (!v26)
          goto LABEL_32;
        v91 = v81;
        *(_QWORD *)&v92 = v82;
        v16 = v26(ValueAtIndex, &v91);
        if (!v16)
        {
          LOBYTE(v26) = 0;
          goto LABEL_36;
        }
      }
      v91 = v88;
      *(_QWORD *)&v92 = v89;
      v27 = *(unsigned int (**)(const void *, uint64_t, __int128 *, uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v27)
      {
        valuePtr = v91;
        *(_QWORD *)&v84 = v92;
        if (!v27(ValueAtIndex, v18, &valuePtr, 1, (char *)v90 + 8, 0, 0))
        {
          v28 = 0;
          if (*(const void **)(a5 + 8) != ValueAtIndex)
            *(_QWORD *)(a5 + 8) = ValueAtIndex;
          LOBYTE(v26) = 1;
          goto LABEL_37;
        }
      }
      if (!*((_QWORD *)&v90[0] + 1))
      {
        LOBYTE(v26) = 0;
LABEL_32:
        v16 = 0;
        goto LABEL_36;
      }
      CFRelease(*((CFTypeRef *)&v90[0] + 1));
      LOBYTE(v26) = 0;
      v16 = 0;
      *((_QWORD *)&v90[0] + 1) = 0;
LABEL_36:
      v28 = 1;
LABEL_37:
      if ((v28 & (*(_QWORD *)(a5 + 8) == (_QWORD)ValueAtIndex)) != 0)
        v17 = 1;
      else
        v17 = (char)v26;
LABEL_40:
      if ((unint64_t)--v19 <= 1)
        goto LABEL_44;
    }
  }
  v16 = 0;
LABEL_44:
  MEMORY[0x19402EF04](*(_QWORD *)(a5 + 16));
  LOWORD(v81) = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(a5 + 152));
  v29 = 0;
  v30 = 0;
  v31 = 1;
  do
  {
    v32 = v31;
    v33 = a5 + 16 * v29;
    v35 = *(unsigned __int8 *)(v33 + 168);
    v34 = (_BYTE *)(v33 + 168);
    *((_BYTE *)&v81 + v29) = v35;
    if (v35)
    {
      v36 = *(CFTypeRef *)(a5 + 16 * v29 + 160);
      if (v36)
        v36 = CFRetain(v36);
      *((_QWORD *)&v90[1] + v29) = v36;
      *v34 = 0;
      v30 = 1;
    }
    v31 = 0;
    v29 = 1;
  }
  while ((v32 & 1) != 0);
  MEMORY[0x19402EF04](*(_QWORD *)(a5 + 152));
  if (v16 | v30 && !IOMobileFramebufferSwapBegin())
  {
    if (!v16)
      goto LABEL_85;
    v37 = (__CVBuffer *)*((_QWORD *)&v90[0] + 1);
    if (*((_QWORD *)&v90[0] + 1))
    {
      valuePtr = 0u;
      v84 = 0u;
      v91 = 0u;
      v92 = 0u;
      v88 = 0uLL;
      v38 = (const __CFDictionary *)CVBufferCopyAttachment(*((CVBufferRef *)&v90[0] + 1), CFSTR("SourceRect"), 0);
      v39 = v38;
      if (v38)
      {
        v40 = CFGetTypeID(v38);
        if (v40 == CFDictionaryGetTypeID())
          FigCGRectMakeWithDictionaryRepresentation(v39, &valuePtr);
      }
      v41 = (const __CFDictionary *)CVBufferCopyAttachment(v37, CFSTR("DestRect"), 0);
      v42 = v41;
      if (v41)
      {
        v43 = CFGetTypeID(v41);
        if (v43 == CFDictionaryGetTypeID())
          FigCGRectMakeWithDictionaryRepresentation(v42, &v91);
      }
      v44 = (const __CFDictionary *)CVBufferCopyAttachment(v37, CFSTR("VirtualDisplaySizeForDestRect"), 0);
      v45 = v44;
      v46 = 0.0;
      if (v44)
      {
        v47 = CFGetTypeID(v44);
        v48 = 0.0;
        if (v47 == CFDictionaryGetTypeID())
        {
          FigCGSizeMakeWithDictionaryRepresentation(v45, &v88);
          v46 = *((double *)&v88 + 1);
          v48 = *(double *)&v88;
        }
      }
      else
      {
        v48 = 0.0;
      }
      v49 = valuePtr;
      v74 = v84;
      v50 = v91;
      v51 = v92;
      if (v39)
        CFRelease(v39);
      if (v42)
        CFRelease(v42);
      if (v45)
        CFRelease(v45);
      if (FigCGRectEqualToRect(*(double *)&v50, *((double *)&v50 + 1), *(double *)&v51, *((double *)&v51 + 1), 0.0, 0.0, 0.0, 0.0)|| v48 == 0.0 && v46 == 0.0|| FigCGRectEqualToRect(*(double *)&v49, *((double *)&v49 + 1), *(double *)&v74, *((double *)&v74 + 1), 0.0, 0.0, 0.0, 0.0))
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(a5 + 208));
        MEMORY[0x19402EF04](*(_QWORD *)(a5 + 208));
        CVImageBufferGetCleanRect(*((CVImageBufferRef *)&v90[0] + 1));
        v52 = (__CVBuffer *)*((_QWORD *)&v90[0] + 1);
        CVImageBufferGetCleanRect(*((CVImageBufferRef *)&v90[0] + 1));
        v53 = (const __CFDictionary *)CVBufferCopyAttachment(v52, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
        if (v53)
        {
          v54 = v53;
          v55 = CFGetTypeID(v53);
          if (v55 == CFDictionaryGetTypeID())
          {
            LODWORD(valuePtr) = 1;
            LODWORD(v91) = 1;
            Value = (const __CFNumber *)CFDictionaryGetValue(v54, (const void *)*MEMORY[0x1E0CA8E60]);
            if (Value)
            {
              v57 = Value;
              v58 = CFGetTypeID(Value);
              if (v58 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v57, kCFNumberSInt32Type, &valuePtr);
                v59 = (const __CFNumber *)CFDictionaryGetValue(v54, (const void *)*MEMORY[0x1E0CA8E70]);
                if (v59)
                {
                  v60 = v59;
                  v61 = CFGetTypeID(v59);
                  if (v61 == CFNumberGetTypeID())
                    CFNumberGetValue(v60, kCFNumberSInt32Type, &v91);
                }
              }
            }
          }
          CFRelease(v54);
        }
      }
      CVPixelBufferGetIOSurface(*((CVPixelBufferRef *)&v90[0] + 1));
    }
    if (!IOMobileFramebufferSwapSetLayer())
    {
LABEL_85:
      v62 = 0;
      v63 = 1;
      do
      {
        v64 = v63;
        if (*((_BYTE *)&v81 + v62))
        {
          v65 = a5 + 8 * v62;
          v66 = *(const void **)(v65 + 192);
          v67 = (const void *)*((_QWORD *)&v90[1] + v62);
          *(_QWORD *)(v65 + 192) = v67;
          if (v67)
            CFRetain(v67);
          if (v66)
            CFRelease(v66);
        }
        v63 = 0;
        v62 = 1;
      }
      while ((v64 & 1) != 0);
      if (!v30)
      {
        v68 = 0;
LABEL_100:
        if (!IOMobileFramebufferSwapSetBackgroundColor() && !IOMobileFramebufferSwapEnd())
        {
          if (v16)
          {
            *(_QWORD *)(a5 + 112) = *(_QWORD *)(a5 + 80);
            *(_QWORD *)(a5 + 80) = *((_QWORD *)&v90[0] + 1);
            *((_QWORD *)&v90[0] + 1) = 0;
          }
          if (v30)
          {
            *(_QWORD *)(a5 + 120) = *(_QWORD *)(a5 + 88);
            if (v68)
              v69 = CFRetain(v68);
            else
              v69 = 0;
            *(_QWORD *)(a5 + 88) = v69;
          }
          *(_DWORD *)(a5 + 104) = *(_DWORD *)(a5 + 72);
          *(_DWORD *)(a5 + 72) = v90[0];
        }
        goto LABEL_110;
      }
      v68 = *(void **)(a5 + 200);
      if (!v68)
        v68 = *(void **)(a5 + 192);
      if (v68 == *(void **)(a5 + 88))
        goto LABEL_100;
      if (v68)
      {
        CVImageBufferGetCleanRect((CVImageBufferRef)v68);
        CVPixelBufferGetIOSurface((CVPixelBufferRef)v68);
      }
      if (!IOMobileFramebufferSwapSetLayer())
        goto LABEL_100;
    }
  }
LABEL_110:
  if (*((_QWORD *)&v90[0] + 1))
    CFRelease(*((CFTypeRef *)&v90[0] + 1));
  v70 = 0;
  v71 = 1;
  do
  {
    v72 = v71;
    v73 = (const void *)*((_QWORD *)&v90[1] + v70);
    if (v73)
      CFRelease(v73);
    v71 = 0;
    v70 = 1;
  }
  while ((v72 & 1) != 0);
}

void ftvCFDictionarySetSInt32Value(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t FigSampleBufferRenderSynchronizerServerStart()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t synchronizerServer_handleMessageWithReply(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v5;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v5 = synchronizerServer_lookupAndRetainSBRSByObjectIDForConnection();
  if ((_DWORD)v5)
    return v5;
  else
    return 4294951138;
}

uint64_t synchronizerServer_handleMessageNoReply(uint64_t a1, void *a2)
{
  uint64_t OpCode;
  uint64_t v4;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E0CA36A0]);
  v4 = synchronizerServer_lookupAndRetainSBRSByObjectIDForConnection();
  if ((_DWORD)v4)
    return v4;
  else
    return 4294951138;
}

uint64_t synchronizerServer_lookupAndRetainSBRSByObjectIDForConnection()
{
  uint64_t result;

  result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

void synchronizerServer_disposeFSBRSServer(uint64_t a1)
{
  if (a1)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 56));
    *(_BYTE *)(a1 + 64) = 1;
    *(_QWORD *)(a1 + 72) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 56));
    CFRelease((CFTypeRef)a1);
  }
}

void synchronizerServer_Finalize(_QWORD *a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  void *v5;
  const void *v6;

  v2 = (const void *)a1[4];
  if (v2)
  {
    FigSyncMomentSourceDestroy(v2);
    a1[4] = 0;
  }
  v3 = a1[5];
  if (v3)
  {
    dispatch_release(v3);
    a1[5] = 0;
  }
  v4 = a1[6];
  if (v4)
  {
    dispatch_release(v4);
    a1[6] = 0;
  }
  FigSimpleMutexDestroy();
  v5 = (void *)a1[10];
  if (v5)
  {
    os_release(v5);
    a1[10] = 0;
  }
  v6 = (const void *)a1[3];
  if (v6)
  {
    CFRelease(v6);
    a1[3] = 0;
  }
}

void synchronizerServer_timebaseSyncUpdateCallback(const void *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1)
  {
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      v5 = v4;
      MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 56));
      if (!*(_BYTE *)(v5 + 64))
      {
        v6 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
        if (!v6)
          goto LABEL_8;
        v7 = malloc_type_malloc(0x78uLL, 0x1000040A9FC9F90uLL);
        if (!v7)
          goto LABEL_8;
        v8 = v7;
        v9 = *a2;
        v10 = a2[1];
        v11 = a2[3];
        v7[2] = a2[2];
        v7[3] = v11;
        *v7 = v9;
        v7[1] = v10;
        v12 = a2[4];
        v13 = a2[5];
        v14 = a2[6];
        *((_QWORD *)v7 + 14) = *((_QWORD *)a2 + 14);
        v7[5] = v13;
        v7[6] = v14;
        v7[4] = v12;
        *v6 = CFRetain(a1);
        v6[1] = v8;
        dispatch_async_f(*(dispatch_queue_t *)(v5 + 48), v6, (dispatch_function_t)synchronizerServer_timebaseSyncUpdateCallback_Async);
      }
      v6 = 0;
LABEL_8:
      MEMORY[0x19402EF04](*(_QWORD *)(v5 + 56));
      free(v6);
      CFRelease((CFTypeRef)v5);
    }
  }
}

void synchronizerServer_syncMomentDestructor(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void synchronizerServer_timebaseSyncUpdateCallback_Async(const void **a1)
{
  UInt8 *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  CFDataRef v6;
  CFDataRef v7;

  v3 = *a1;
  v2 = (UInt8 *)a1[1];
  if (*a1)
  {
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    v5 = v4;
    if (v4)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 56));
      if (*(_BYTE *)(v5 + 64) || FigXPCCreateBasicMessage() || (v6 = CFDataCreate(0, v2, 120)) == 0)
      {
        MEMORY[0x19402EF04](*(_QWORD *)(v5 + 56));
      }
      else
      {
        v7 = v6;
        if (!FigXPCMessageSetCFData())
          xpc_connection_send_message(*(xpc_connection_t *)(v5 + 72), 0);
        MEMORY[0x19402EF04](*(_QWORD *)(v5 + 56));
        CFRelease(v7);
      }
    }
    FigXPCRelease();
    CFRelease(v3);
  }
  else
  {
    FigXPCRelease();
    v5 = 0;
  }
  free(v2);
  free(a1);
  if (v5)
    CFRelease((CFTypeRef)v5);
}

uint64_t FigPlayerCelesteOneTimeInitialization()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __FigPlayerCelesteOneTimeInitialization_block_invoke;
  block[3] = &unk_1E2F91F58;
  block[4] = &v3;
  if (FigPlayerCelesteOneTimeInitialization_onceToken != -1)
    dispatch_once(&FigPlayerCelesteOneTimeInitialization_onceToken, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

void playerceleste_dumpPlayers(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  void (*v7)(uint64_t, _QWORD, CFTypeRef *);
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v10;
  void (*v11)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v12;
  void (*v13)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, const __CFString *, uint64_t, CFNumberRef *);
  const char *v17;
  CFIndex Count;
  const char *v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFArrayRef theArray;
  CFTypeRef v22;
  int v23;
  CFNumberRef v24;
  uint64_t valuePtr;
  CFNumberRef number;
  CFTypeRef cf;
  CFTypeRef v28;
  CFTypeRef v29;
  _OWORD v30[16];
  _OWORD __str[16];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  v29 = 0;
  number = 0;
  cf = 0;
  v24 = 0;
  valuePtr = 0;
  v23 = 0;
  theArray = 0;
  v22 = 0;
  memset(__str, 0, sizeof(__str));
  memset(v30, 0, sizeof(v30));
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *MEMORY[0x1E0C9AE00];
  FigBaseObject = FigPlayerGetFigBaseObject(a2);
  v6 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (v6)
  {
    v6(FigBaseObject, CFSTR("RequiresNumVideoSlots"), v4, &number);
    if (number)
      CFNumberGetValue(number, kCFNumberCFIndexType, &valuePtr);
  }
  v7 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v7)
    v7(a2, 0, &v29);
  if (v29)
  {
    v8 = FigPlaybackItemGetFigBaseObject(v29);
    v9 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
    if (v9)
      v9(v8, CFSTR("HasEnabledAudio"), v4, &cf);
    v10 = FigPlaybackItemGetFigBaseObject(v29);
    v11 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v11)
      v11(v10, CFSTR("HasEnabledVideo"), v4, &v28);
    v12 = FigPlaybackItemGetFigBaseObject(v29);
    v13 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v13)
      v13(v12, CFSTR("VisualContextArray"), v4, &theArray);
  }
  v14 = *(_QWORD *)(DerivedStorage + 88);
  if (v14)
  {
    v15 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v15)
    {
      v16 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFNumberRef *))(v15 + 16);
      if (v16)
      {
        v16(v14, CFSTR("FAS_AudioSessionID"), v4, &v24);
        if (v24)
          CFNumberGetValue(v24, kCFNumberSInt32Type, &v23);
      }
    }
  }
  FigServer_CopyProcessName();
  if (valuePtr < 1)
  {
    strcpy((char *)__str, ", has no attached video layers");
  }
  else
  {
    if (valuePtr == 1)
      v17 = "";
    else
      v17 = "s";
    snprintf((char *)__str, 0x100uLL, ", has %d attached video layer%s", valuePtr, v17);
  }
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      if (Count == 1)
        v19 = "";
      else
        v19 = "s";
      snprintf((char *)v30, 0x100uLL, " with %d visual context%s", Count, v19);
    }
  }
  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (cf)
    CFRelease(cf);
  if (v28)
    CFRelease(v28);
  if (theArray)
    CFRelease(theArray);
  if (number)
    CFRelease(number);
  if (v24)
    CFRelease(v24);
  if (v29)
    CFRelease(v29);
  if (v22)
    CFRelease(v22);
}

uint64_t FigPlayerCelesteCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  CFTypeRef cf;
  uint64_t v12;
  void *value;
  CFTypeRef v14;
  __int128 __str;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  value = 0;
  v14 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  __str = 0u;
  cf = 0;
  v12 = 0;
  v6 = FigPlayerCelesteOneTimeInitialization();
  if ((_DWORD)v6)
    goto LABEL_13;
  if (!a2 || !a4)
  {
    v6 = FigSignalErrorAt();
LABEL_13:
    v10 = v6;
    v7 = 0;
    goto LABEL_14;
  }
  v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
  if (!v7 || (FigPlayerGetClassID(), v8 = CMDerivedObjectCreate(), !(_DWORD)v8))
    v8 = FigSignalErrorAt();
  v10 = v8;
LABEL_14:
  if (v14)
    CFRelease(v14);
  if (cf)
    CFRelease(cf);
  free(v7);
  return v10;
}

uint64_t playerceleste_createFigAudioSessionUsingAudioSessionID(const __CFAllocator *a1, uint64_t a2, const __CFNumber *a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage;
  const void *v9;
  const void *v10;
  uint64_t v11;
  const void *SInt32;
  __CFString *v13;
  const char *v14;
  __CFString *v15;
  __int128 v16;
  uint64_t v17;
  CFTypeRef v18;
  uint64_t v19;
  uint64_t (*v20)(CFTypeRef, _QWORD, const void *);
  uint64_t v21;
  _OWORD v23[2];
  CFTypeRef cf;
  unsigned int valuePtr;

  valuePtr = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
  if (FPSupport_CanUseCMSession())
  {
    v9 = (const void *)AudioSessionCopyCMSessionForSessionID();
    if (v9)
    {
      v10 = v9;
      v11 = FigAudioSessionCreateWithCMSession((uint64_t)a1, v9, &cf);
      SInt32 = 0;
      if ((_DWORD)v11)
      {
        v21 = v11;
        v13 = 0;
        goto LABEL_18;
      }
      v13 = 0;
LABEL_10:
      SInt32 = (const void *)FigCFNumberCreateSInt32();
      v18 = cf;
      if (cf && (v19 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) != 0)
      {
        v20 = *(uint64_t (**)(CFTypeRef, _QWORD, const void *))(v19 + 56);
        if (!v20)
        {
          v21 = 4294948071;
          if (!v10)
          {
LABEL_19:
            if (!v13)
              goto LABEL_21;
            goto LABEL_20;
          }
LABEL_18:
          CFRelease(v10);
          goto LABEL_19;
        }
        v21 = v20(v18, *MEMORY[0x1E0D49608], SInt32);
        if (!(_DWORD)v21)
        {
          *a4 = cf;
          cf = 0;
          if (!v10)
            goto LABEL_19;
          goto LABEL_18;
        }
      }
      else
      {
        v21 = 4294948075;
      }
      if (!v10)
        goto LABEL_19;
      goto LABEL_18;
    }
LABEL_30:
    v21 = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (a2)
    v14 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
  else
    v14 = "";
  v15 = (__CFString *)CFStringCreateWithFormat(a1, 0, CFSTR("FigPlayer %s"), v14);
  if (!v15)
    goto LABEL_30;
  v13 = v15;
  v16 = *(_OWORD *)(DerivedStorage + 36);
  v23[0] = *(_OWORD *)(DerivedStorage + 20);
  v23[1] = v16;
  v17 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID((uint64_t)a1, valuePtr, v23, v15, &cf);
  v10 = 0;
  if (!(_DWORD)v17)
    goto LABEL_10;
  v21 = v17;
  SInt32 = 0;
LABEL_20:
  CFRelease(v13);
LABEL_21:
  if (SInt32)
    CFRelease(SInt32);
LABEL_23:
  if (cf)
    CFRelease(cf);
  return v21;
}

uint64_t playerceleste_updatePlayerAudioSession(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  void *v5;
  uint64_t v6;
  const __CFAllocator *v7;
  uint64_t i;
  uint64_t j;
  uint64_t started;
  const void *v11;
  uint64_t FigBaseObject;
  void (*v13)(uint64_t, const __CFString *, const void *);
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  __CFString *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const __CFString *, CFTypeRef);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, CFArrayRef, CFTypeRef *, _QWORD);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  CFMutableDictionaryRef Mutable;
  CFArrayRef v35;
  CFTypeRef v36;
  int v37;
  unsigned __int8 v38;
  CFTypeRef cf;
  __int128 v40[8];
  void *values[6];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v38 = 0;
  v5 = (void *)*MEMORY[0x1E0D49540];
  values[0] = *(void **)MEMORY[0x1E0D494E8];
  values[1] = v5;
  values[2] = *(void **)MEMORY[0x1E0D49800];
  v37 = 0;
  v36 = 0;
  if (a2)
  {
    v6 = DerivedStorage;
    if (!*(_BYTE *)(DerivedStorage + 96)
      || FigAudioSessionIsRelatedSession(*(_QWORD *)(DerivedStorage + 88), (uint64_t)a2))
    {
      return 0;
    }
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v35 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 3, MEMORY[0x1E0C9B378]);
    if (v35)
    {
      if (*(_QWORD *)(v6 + 88))
      {
        for (i = 0; i != 128; i += 16)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
        }
        FigStopForwardingMediaServicesProcessDeathNotification();
      }
      for (j = 0; j != 128; j += 16)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
      }
      started = FigStartForwardingMediaServicesProcessDeathNotification();
      if ((_DWORD)started)
      {
        v24 = started;
LABEL_45:
        CFRelease(v35);
        if (v36)
          CFRelease(v36);
        return v24;
      }
      v11 = *(const void **)(v6 + 88);
      *(_QWORD *)(v6 + 88) = a2;
      CFRetain(a2);
      if (v11)
        CFRelease(v11);
      FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(v6 + 80));
      v13 = *(void (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
      if (v13)
        v13(FigBaseObject, CFSTR("FigAudioSession"), a2);
      cf = 0;
      v14 = CMBaseObjectGetDerivedStorage();
      if (!*(_BYTE *)(v14 + 164))
      {
        v24 = 0;
        v17 = 0;
        goto LABEL_26;
      }
      v15 = v14;
      if (a1)
        v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
      else
        v16 = "";
      v17 = (__CFString *)CFStringCreateWithFormat(v7, 0, CFSTR("FigPlayer %s (2)"), v16);
      if (v17)
      {
        v18 = *(_OWORD *)(v15 + 36);
        v40[0] = *(_OWORD *)(v15 + 20);
        v40[1] = v18;
        v19 = FigAudioSessionCreateSiblingSession((uint64_t)v7, (uint64_t)a2, v40, v17, &cf);
        if (!(_DWORD)v19)
        {
          v20 = *(_QWORD *)(v15 + 80);
          v21 = cf;
          v22 = FigPlayerGetFigBaseObject(v20);
          v23 = *(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
          if (!v23)
          {
            v24 = 4294954514;
            goto LABEL_26;
          }
          v19 = v23(v22, CFSTR("FigAudioSession2"), v21);
        }
      }
      else
      {
        v19 = FigSignalErrorAt();
      }
      v24 = v19;
LABEL_26:
      if (cf)
        CFRelease(cf);
      if (v17)
        CFRelease(v17);
      if (!(_DWORD)v24)
      {
        v25 = *(_QWORD *)(v6 + 88);
        if (v25)
        {
          v26 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v26)
          {
            v27 = *(void (**)(uint64_t, CFArrayRef, CFTypeRef *, _QWORD))(v26 + 112);
            if (v27)
              v27(v25, v35, &v36, 0);
          }
        }
        FigCFDictionaryGetInt32IfPresent();
        playerceleste_updatePlayerBasedOnAppState(a1, v37);
        FigCFDictionaryGetValue();
        if (FigCFDictionaryGetBooleanIfPresent())
        {
          if (dword_1EE2A34A0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          v29 = *(_QWORD *)(v6 + 80);
          v30 = v38;
          v31 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
          if (v31)
          {
            v32 = *(void (**)(uint64_t, uint64_t))(v31 + 16);
            if (v32)
              v32(v29, v30);
          }
        }
        if (FigCFDictionaryGetValue())
        {
          Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          FigCFDictionarySetValue();
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (Mutable)
            CFRelease(Mutable);
        }
        v24 = 0;
      }
      goto LABEL_45;
    }
    return FigSignalErrorAt();
  }
  return FigSignalErrorAt();
}

uint64_t playerceleste_callSetConnectionActive(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  v4 = *(_QWORD *)(result + 80);
  if (v4)
  {
    result = CMBaseObjectGetVTable();
    v5 = *(_QWORD *)(result + 24);
    if (v5)
    {
      v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
      if (v6)
        return v6(v4, a2);
    }
  }
  return result;
}

void playerceleste_reflectSubPlayerNotificationToClient(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  __CFString *v9;
  const void *Value;
  _QWORD block[5];

  if (a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a3, CFSTR("RenderingStoppedForConfigurationChange")))
    {
      CFRetain(a2);
      if (playerceleste_getSharedQueue_onceToken != -1)
        dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_14_1);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __playerceleste_handleSubPlayerConfigurationChange_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = a2;
      dispatch_async((dispatch_queue_t)playerceleste_getSharedQueue_sharedQueue, block);
    }
    else
    {
      if (*(_BYTE *)(DerivedStorage + 120) && CFEqual(a3, CFSTR("UserVolumeDidChange")))
      {
        v9 = playerceleste_copyUniqueClientID();
        if (a5)
        {
          Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D48600]);
          if (Value)
          {
            if (CFEqual(v9, Value))
            {
              CFRelease(v9);
              return;
            }
          }
        }
        CFRelease(v9);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
  }
}

uint64_t __playerceleste_getSharedQueue_block_invoke()
{
  uint64_t result;

  result = FigDispatchQueueCreateWithPriority();
  playerceleste_getSharedQueue_sharedQueue = result;
  if (!result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigServer_SleepCallBack(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  void (*v14)(uint64_t, CFTypeRef, float);
  uint64_t v15;
  void (*v16)(uint64_t, float);
  CFTypeRef cf;

  MEMORY[0x19402F2AC](gServerState);
  if (a3 == -536870112)
  {
    FigPlayerCMSession_SystemWillPowerOn();
    return MEMORY[0x19402F2AC](gServerState, 0);
  }
  if (a3 != -536870272)
  {
    if (a3 == -536870288)
      goto LABEL_13;
    return MEMORY[0x19402F2AC](gServerState, 0);
  }
  cf = 0;
  MEMORY[0x19402EEEC](qword_1EE2A1FA8);
  v6 = (_QWORD *)qword_1EE2A1FA0;
  if (!qword_1EE2A1FA0)
  {
LABEL_11:
    MEMORY[0x19402EF04](qword_1EE2A1FA8);
    goto LABEL_12;
  }
  while (1)
  {
    v7 = FigCFWeakReferenceTableCopyValue();
    if (v7)
      break;
LABEL_10:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_11;
  }
  v8 = (const void *)v7;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
  {
    CFRelease(v8);
    goto LABEL_10;
  }
  v11 = DerivedStorage;
  MEMORY[0x19402EF04](qword_1EE2A1FA8);
  if (*(_BYTE *)(v11 + 130))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v11 + 152));
    playerceleste_notifyImminentRateChange();
    if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104))
    {
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 11, (CFMutableDictionaryRef *)&cf);
      v12 = *(_QWORD *)(v11 + 80);
      v13 = cf;
      v14 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v14)
        v14(v12, v13, 0.0);
    }
    else
    {
      v15 = *(_QWORD *)(v11 + 80);
      v16 = *(void (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v16)
        v16(v15, 0.0);
    }
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
    MEMORY[0x19402EF04](*(_QWORD *)(v11 + 152));
  }
  if (playerceleste_canCallSetConnectionActive())
    playerceleste_callSetConnectionActive((uint64_t)v8, 0);
  *(_BYTE *)(v11 + 128) = 0;
  CFRelease(v8);
  if (cf)
    CFRelease(cf);
LABEL_12:
  FigPlayerCMSession_SystemWillSleep();
LABEL_13:
  IOAllowPowerChange(gRootPowerDomainPort, a4);
  return MEMORY[0x19402F2AC](gServerState, 0);
}

uint64_t playerceleste_canCallSetConnectionActive()
{
  uint64_t result;
  uint64_t v1;

  result = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  if (result)
  {
    v1 = *(_QWORD *)(CMBaseObjectGetVTable() + 24);
    return v1 && *(_QWORD *)(v1 + 24);
  }
  return result;
}

void playerceleste_notifyImminentRateChange()
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v1;

  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80))
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v1 = Mutable;
      FigCFDictionarySetFloat32();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v1);
    }
  }
}

__CFString *playerceleste_copyUniqueClientID()
{
  uint64_t DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%u-%lld"), *(unsigned int *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 8));
  return Mutable;
}

void __playerceleste_handleSubPlayerConfigurationChange_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v3)
    v3(v2, 0);
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void playerceleste_updatePlayerBasedOnAppState(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  id v4;
  uint64_t FigBaseObject;
  void (*v6)(uint64_t, __CFString *, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, __CFString *, uint64_t);
  uint64_t v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(id *)(DerivedStorage + 176);
  voucher_adopt();
  FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
  switch(a2)
  {
    case 0:
    case 8:
      goto LABEL_8;
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_9;
    case 4:
      FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 80));
      v6 = *(void (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v6)
        v6(FigBaseObject, CFSTR("ClientSuspended"), *MEMORY[0x1E0C9AE40]);
      v7 = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 80));
      v8 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v8)
        goto LABEL_15;
      v9 = *MEMORY[0x1E0C9AE50];
      v10 = v7;
      goto LABEL_14;
    default:
      if (a2 == 16 || a2 == 32)
      {
LABEL_8:
        v11 = *(_QWORD *)(DerivedStorage + 80);
        v12 = (uint64_t *)MEMORY[0x1E0C9AE40];
      }
      else
      {
LABEL_9:
        v11 = *(_QWORD *)(DerivedStorage + 80);
        v12 = (uint64_t *)MEMORY[0x1E0C9AE50];
      }
      v13 = *v12;
      v14 = FigPlayerGetFigBaseObject(v11);
      v15 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (v15)
        v15(v14, CFSTR("ClientSuspended"), v13);
      v16 = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 80));
      v8 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v8)
        goto LABEL_15;
      v10 = v16;
      v9 = v13;
LABEL_14:
      v8(v10, CFSTR("ClientInBackground"), v9);
LABEL_15:

      return;
  }
}

void playerceleste_InterruptionNotification(int a1, CFTypeRef cf)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (cf)
  {
    if (dword_1EE2A34A0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRetain(cf);
    if (playerceleste_getSharedQueue_onceToken != -1)
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_14_1);
    FigDeferNotificationToDispatchQueue();
  }
}

uint64_t playerceleste_availableFormatsChangedNotification(uint64_t a1, const void *a2)
{
  uint64_t result;

  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    CFRetain(a2);
    if (playerceleste_getSharedQueue_onceToken != -1)
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_14_1);
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

uint64_t playerceleste_ApplicationStateDidChangeNotification(int a1, CFTypeRef cf)
{
  uint64_t result;

  if (cf)
  {
    CFRetain(cf);
    if (playerceleste_getSharedQueue_onceToken != -1)
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_14_1);
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void playerceleste_PiPIsPossibleDidChangeNotification(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef v2;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  if (a2)
  {
    FigCFDictionaryGetBooleanIfPresent();
    keys[0] = CFSTR("PiPPossible");
    values = (void *)*MEMORY[0x1E0C9AE40];
    v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v2)
      CFRelease(v2);
  }
}

void playerceleste_DisplayLayoutDidChangeNotification(uint64_t a1, uint64_t a2)
{
  char v2;
  CFTypeRef cf;

  cf = 0;
  v2 = 0;
  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    FigCFDictionaryGetBooleanIfPresent();
  }
}

void playerceleste_ActiveAudioRouteDidChangeNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v7;
  const void *v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t (*v13)(const void *, _QWORD, CFTypeRef *);
  int v14;
  _BOOL4 v15;
  CFTypeRef v16;
  uint64_t FigBaseObject;
  void (*v18)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v19;
  char v20;
  NSObject *v21;
  char v22;
  _QWORD block[5];
  os_log_type_t v24;
  os_log_type_t type[4];
  void *value;
  int v27;
  CFTypeRef cf;
  CFTypeRef v29[17];

  v29[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v27 = 0;
  v7 = FigCFCopyCompactDescription();
  if (a2)
  {
    v8 = (const void *)v7;
    if (dword_1EE2A34A0)
    {
      LODWORD(value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_BYTE *)(DerivedStorage + 128))
    {
      if (a5)
      {
        v11 = DerivedStorage;
        if (*(_BYTE *)(DerivedStorage + 130))
        {
          v12 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
          value = (void *)*MEMORY[0x1E0C9AE40];
          FigCFDictionaryGetIntIfPresent();
          CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D485D0]);
          CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D485B8]);
          if (CFDictionaryGetValueIfPresent(a5, (const void *)*MEMORY[0x1E0D485E0], (const void **)&value)
            && CFBooleanGetValue((CFBooleanRef)value))
          {
            if (*(_BYTE *)(v11 + 162))
            {
              v29[0] = 0;
              v13 = *(uint64_t (**)(const void *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 32);
              if (v13)
              {
                v14 = v13(a2, 0, v29);
                v15 = 0;
                v16 = v29[0];
                if (!v14 && v29[0])
                {
                  cf = 0;
                  FigBaseObject = FigPlaybackItemGetFigBaseObject(v29[0]);
                  v18 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
                  if (v18)
                  {
                    v18(FigBaseObject, CFSTR("HasEnabledAudio"), *MEMORY[0x1E0C9AE00], &cf);
                    v19 = cf;
                    if (cf)
                      CFRelease(cf);
                  }
                  else
                  {
                    v19 = 0;
                  }
                  v15 = v19 == v12;
                  v16 = v29[0];
                }
                if (v16)
                  CFRelease(v16);
              }
              else
              {
                v15 = 0;
              }
              v20 = 0;
            }
            else
            {
              v20 = 0;
              v15 = 0;
            }
          }
          else
          {
            v15 = 0;
            v20 = 1;
          }
          if (v27 == 2)
          {
            if (dword_1EE2A34A0)
            {
              *(_DWORD *)type = 0;
              v24 = OS_LOG_TYPE_DEFAULT;
              v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (v15)
              v22 = 1;
            else
              v22 = v20;
            if ((v22 & 1) == 0)
              playerceleste_pauseCurrentlyPlayingMovie((uint64_t)a2, 12);
          }
          if (playerceleste_shouldPauseAndResumeForAirPlayRouteChange_onceToken != -1)
            dispatch_once(&playerceleste_shouldPauseAndResumeForAirPlayRouteChange_onceToken, &__block_literal_global_45_0);
        }
      }
    }
    CFRetain(a2);
    if (playerceleste_getSharedQueue_onceToken != -1)
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_14_1);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __playerceleste_ActiveAudioRouteDidChangeNotification_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a2;
    dispatch_async((dispatch_queue_t)playerceleste_getSharedQueue_sharedQueue, block);
    if (v8)
      CFRelease(v8);
  }
}

uint64_t playerceleste_PickableRoutesDidChangeNotification(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigDispatchAsyncPostNotification();
  }
  return result;
}

uint64_t playerceleste_AudioSessionIsActiveDidChangeNotification(int a1, CFTypeRef cf)
{
  uint64_t result;

  if (cf)
  {
    CFRetain(cf);
    if (playerceleste_getSharedQueue_onceToken != -1)
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_14_1);
    return FigDeferNotificationToDispatchQueue();
  }
  return result;
}

void playerceleste_deferredInterruptionNotification(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;
  void *Value;
  const void *v12;
  const void *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  const char *v16;
  void *v17;
  const void *v18;
  CMTime *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFStringRef v25;
  uint64_t v26;
  CFTypeRef v27;
  unsigned int (*v28)(uint64_t, CFTypeRef, float);
  void (*v29)(const void *, float);
  CFTypeRef cf;
  char v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v31 = 0;
  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a5)
  {
    v8 = DerivedStorage;
    if (FigCFDictionaryGetInt32IfPresent())
    {
      FigCFDictionaryGetBooleanIfPresent();
      if (dword_1EE2A34A0)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 144));
      v10 = *(_QWORD *)(v8 + 80);
      if (v10)
      {
        switch(v32)
        {
          case 0:
          case 4:
            Value = (void *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D49278]);
            v12 = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D49270]);
            if (*(_BYTE *)(v8 + 128))
            {
              v13 = v12;
              playerceleste_notifyInterruptionWithInterruptorNameAndStatus((uint64_t)a2, (uint64_t)CFSTR("PlaybackWasInterrupted"), Value, 0);
              if (v13)
              {
                v14 = CMBaseObjectGetDerivedStorage();
                MEMORY[0x19402EEEC](*(_QWORD *)(v14 + 184));
                v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                if (a2)
                  v16 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
                else
                  v16 = "";
                v25 = CFStringCreateWithFormat(v15, 0, CFSTR("%@_%s"), CFSTR("PlayerInterrupted"), v16);
                if (!*(_QWORD *)(v14 + 192))
                {
                  FigGetCFPreferenceNumberWithDefault();
                  FigProcessStateMonitorCreateExpiringAssertionOnBehalfOfProcessWithPID();
                }
                MEMORY[0x19402EF04](*(_QWORD *)(v14 + 184));
                if (v25)
                  CFRelease(v25);
              }
            }
            if (*(_BYTE *)(v8 + 130))
            {
              playerceleste_notifyImminentRateChange();
              FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 13, (CFMutableDictionaryRef *)&cf);
              MEMORY[0x19402EEEC](*(_QWORD *)(v8 + 152));
              v26 = *(_QWORD *)(v8 + 80);
              v27 = cf;
              v28 = *(unsigned int (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 104);
              if (!v28 || v28(v26, v27, 0.0) == -12782)
              {
                v29 = *(void (**)(const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
                if (v29)
                  v29(a2, 0.0);
              }
              *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
              MEMORY[0x19402EF04](*(_QWORD *)(v8 + 152));
            }
            if (playerceleste_canCallSetConnectionActive())
              playerceleste_callSetConnectionActive((uint64_t)a2, 0);
            if (*(_BYTE *)(v8 + 128))
              *(_WORD *)(v8 + 128) = 256;
            goto LABEL_41;
          case 1:
            v17 = (void *)CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D49278]);
            v18 = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E0D49290]);
            playerceleste_notifyInterruptionWithInterruptorNameAndStatus((uint64_t)a2, (uint64_t)CFSTR("PlaybackInterruptionDidEnd"), v17, (uint64_t)v18);
            goto LABEL_18;
          case 5:
            playerceleste_notifyImminentRateChange();
            FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 14, (CFMutableDictionaryRef *)&cf);
            v19 = (CMTime *)MEMORY[0x1E0CA2E68];
            v33 = *MEMORY[0x1E0CA2E68];
            v34 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
            FigCFDictionarySetCMTime();
            playerceleste_setRateInternal((uint64_t)a2, (CMTime *)cf, 0, 0, v19, (uint64_t)v19, 0, *(float *)(v8 + 124));
            if (!*(_BYTE *)(v8 + 122))
              goto LABEL_41;
            if (*(float *)(v8 + 124) != 0.0)
            {
              if (playerceleste_canCallSetConnectionActive())
                playerceleste_callSetConnectionActive((uint64_t)a2, 1);
              *(_BYTE *)(v8 + 128) = 1;
            }
            *(_BYTE *)(v8 + 129) = 0;
            *(_BYTE *)(v8 + 122) = 0;
LABEL_18:
            playerceleste_revokePurgeAssertionIfNecessary();
          case 6:
            v20 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
            if (!v20)
              goto LABEL_41;
            v21 = *(void (**)(uint64_t, uint64_t))(v20 + 16);
            if (!v21)
              goto LABEL_41;
            v22 = v10;
            v23 = 1;
            break;
          case 7:
            v24 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
            if (!v24)
              goto LABEL_41;
            v21 = *(void (**)(uint64_t, uint64_t))(v24 + 16);
            if (!v21)
              goto LABEL_41;
            v22 = v10;
            v23 = 0;
            break;
          default:
            goto LABEL_41;
        }
        v21(v22, v23);
      }
LABEL_41:
      MEMORY[0x19402EF04](*(_QWORD *)(v8 + 144));
    }
    if (cf)
      CFRelease(cf);
  }
  if (a2)
    CFRelease(a2);
}

void playerceleste_notifyInterruptionWithInterruptorNameAndStatus(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  CFIndex v4;
  CFDictionaryRef v5;
  void *values;
  uint64_t v7;
  void *keys;
  const __CFString *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  keys = CFSTR("InterruptorName");
  v9 = 0;
  values = a3;
  v7 = 0;
  if (a4)
  {
    v9 = CFSTR("InterruptionStatus");
    v7 = a4;
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }
  v5 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)&values, v4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5)
    CFRelease(v5);
}

uint64_t playerceleste_setRateInternal(uint64_t a1, CMTime *a2, uint64_t a3, int a4, CMTime *a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t DerivedStorage;
  const void *v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFAllocator *v19;
  CFMutableDictionaryRef Mutable;
  uint64_t v21;
  __CFArray *v22;
  __CFDictionary *NotificationPayloadForProperties;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, CMTime *, __n128);
  __n128 v26;
  uint64_t v27;
  CMTime *v28;
  uint64_t v29;
  CMTime *v30;
  uint64_t (*v31)(uint64_t, CMTime *, __n128);
  __n128 v32;
  uint64_t v33;
  CMTime *v34;
  uint64_t v35;
  CMTime *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, CMTime *, CMTime *, uint64_t, float);
  uint64_t v39;
  uint64_t v40;
  CFTypeRef v41;
  uint64_t (*v42)(uint64_t, CFTypeRef, float);
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, float);
  int v47;
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime v51;
  CMTime v52;
  os_log_type_t type;
  int v54;
  CFTypeRef cf;
  CMTime v56;
  CMTime v57[5];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v54 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 152));
  FigCFDictionaryGetInt32IfPresent();
  if (a8 != 0.0)
  {
    v47 = a4;
    FigCFDictionaryGetBooleanIfPresent();
    v17 = (const void *)FigCFCopyCompactDescription();
    if (dword_1EE2A34A0)
    {
      LODWORD(v52.value) = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v17)
      CFRelease(v17);
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetValue();
    v21 = playerceleste_beginInterruptionInternal(a1, (uint64_t)Mutable);
    if (Mutable)
      CFRelease(Mutable);
    if ((_DWORD)v21)
    {
      v22 = CFArrayCreateMutable(v19, 0, MEMORY[0x1E0C9B378]);
      CFArrayAppendValue(v22, CFSTR("CurrentRate"));
      CFArrayAppendValue(v22, CFSTR("CurrentPlaybackState"));
      NotificationPayloadForProperties = FPSupport_CreateNotificationPayloadForProperties(a1, 0, v22);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (NotificationPayloadForProperties)
        CFRelease(NotificationPayloadForProperties);
      if (v22)
        CFRelease(v22);
      goto LABEL_47;
    }
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 130) = 1;
    a4 = v47;
  }
  if (!a2)
  {
    if (a8 == 0.0 && *(float *)(DerivedStorage + 116) != 0.0)
    {
      if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104))
      {
        FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a3, (CFMutableDictionaryRef *)&cf);
        CMTimeMakeWithSeconds(&v51, *(float *)(DerivedStorage + 116), 1000);
        FigCFDictionarySetCMTime();
        v29 = *(_QWORD *)(DerivedStorage + 80);
        v30 = (CMTime *)cf;
        v31 = *(uint64_t (**)(uint64_t, CMTime *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        if (!v31)
          goto LABEL_38;
        v33 = v29;
        v32.n128_f32[0] = a8;
        v34 = v30;
      }
      else
      {
        v43 = *(_QWORD *)(DerivedStorage + 80);
        CMTimeMakeWithSeconds(&v50, *(float *)(DerivedStorage + 116), 1000);
        v31 = *(uint64_t (**)(uint64_t, CMTime *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
        if (!v31)
          goto LABEL_38;
        v32 = *(__n128 *)&v50.value;
        v57[0] = v50;
        v34 = v57;
        v33 = v43;
        v32.n128_f32[0] = a8;
      }
      v21 = v31(v33, v34, v32);
      if ((_DWORD)v21 != -12782)
        goto LABEL_44;
LABEL_38:
      CMTimeMakeWithSeconds(&v49, *(float *)(DerivedStorage + 116), 1000);
      v36 = &v49;
      goto LABEL_39;
    }
    v37 = *(_QWORD *)(DerivedStorage + 80);
    if (a4)
    {
      v52 = *a5;
      *(_OWORD *)&v48.value = *(_OWORD *)a6;
      v48.epoch = *(_QWORD *)(a6 + 16);
      v38 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 88);
      if (!v38)
      {
        v21 = 4294954514;
        goto LABEL_44;
      }
      v57[0] = v52;
      v56 = v48;
      v39 = v38(v37, v57, &v56, a7, a8);
LABEL_43:
      v21 = v39;
      goto LABEL_44;
    }
    if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104))
    {
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a3, (CFMutableDictionaryRef *)&cf);
      v40 = *(_QWORD *)(DerivedStorage + 80);
      v41 = cf;
      v42 = *(uint64_t (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v42)
      {
        v39 = v42(v40, v41, a8);
        goto LABEL_43;
      }
    }
    else
    {
      v44 = *(_QWORD *)(DerivedStorage + 80);
      v45 = *(uint64_t (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v45)
      {
        v39 = v45(v44, a8);
        goto LABEL_43;
      }
    }
    v21 = 4294954514;
    goto LABEL_47;
  }
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104))
  {
    v24 = *(_QWORD *)(DerivedStorage + 80);
    v25 = *(uint64_t (**)(uint64_t, CMTime *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
    if (!v25)
    {
LABEL_27:
      v57[0] = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      FigCFDictionaryGetCMTimeIfPresent();
      v56 = v57[0];
      v36 = &v56;
LABEL_39:
      playerceleste_setRateWithManualFade(a8, a1, v36);
      v21 = 0;
      goto LABEL_44;
    }
    v27 = v24;
    v26.n128_f32[0] = a8;
    v28 = a2;
    goto LABEL_25;
  }
  v56 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  FigCFDictionaryGetCMTimeIfPresent();
  v35 = *(_QWORD *)(DerivedStorage + 80);
  v52 = v56;
  v25 = *(uint64_t (**)(uint64_t, CMTime *, __n128))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v25)
  {
    v26 = *(__n128 *)&v52.value;
    v57[0] = v52;
    v28 = v57;
    v27 = v35;
    v26.n128_f32[0] = a8;
LABEL_25:
    v21 = v25(v27, v28, v26);
    goto LABEL_26;
  }
  v21 = 4294954514;
LABEL_26:
  if ((_DWORD)v21 == -12782)
    goto LABEL_27;
LABEL_44:
  if (a8 == 0.0 && !(_DWORD)v21)
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
LABEL_47:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 152));
  if (cf)
    CFRelease(cf);
  return v21;
}

void playerceleste_revokePurgeAssertionIfNecessary()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 184));
  v1 = *(const void **)(DerivedStorage + 192);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  JUMPOUT(0x19402EF04);
}

uint64_t playerceleste_beginInterruptionInternal(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD);
  uint64_t v15;
  NSObject *v16;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *);
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  CFBooleanRef BOOLean;
  os_log_type_t type;
  int v26;
  CFTypeRef cf[17];

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOLean = 0;
  if (!*(_QWORD *)(DerivedStorage + 88))
    return 0;
  v5 = DerivedStorage;
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = (_QWORD *)MEMORY[0x1E0C9AE00];
  if (!*(_BYTE *)(v6 + 163))
  {
    if (dword_1EE2A34A0)
    {
      v26 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_18:
    v18 = *(_QWORD *)(v5 + 88);
    if (v18)
    {
      v19 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v19)
      {
        v20 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFBooleanRef *))(v19 + 8);
        if (v20)
        {
          v15 = v20(v18, CFSTR("FAS_IsActive"), *v7, &BOOLean);
          if (!(_DWORD)v15)
          {
            if (CFBooleanGetValue(BOOLean))
            {
LABEL_29:
              *(_BYTE *)(v5 + 121) = 1;
              if (!*(_BYTE *)(v5 + 128))
              {
                if (playerceleste_canCallSetConnectionActive())
                  playerceleste_callSetConnectionActive(a1, 1);
                *(_WORD *)(v5 + 128) = 1;
                playerceleste_revokePurgeAssertionIfNecessary();
              }
              v21 = 0;
              goto LABEL_34;
            }
            v15 = FigSignalErrorAt();
          }
          goto LABEL_24;
        }
        goto LABEL_26;
      }
    }
LABEL_25:
    v21 = 4294948075;
    goto LABEL_34;
  }
  cf[0] = 0;
  v8 = *(_QWORD *)(v6 + 88);
  if (v8)
  {
    v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (v9)
    {
      v10 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(v9 + 16);
      if (v10)
      {
        if (!v10(v8, CFSTR("FAS_AudioCategory"), *v7, cf))
        {
          v11 = FigCFEqual();
          if (cf[0])
            CFRelease(cf[0]);
          if (v11)
            goto LABEL_18;
        }
      }
    }
  }
  v12 = *(_QWORD *)(v5 + 88);
  if (!v12)
    goto LABEL_25;
  v13 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v13)
    goto LABEL_25;
  v14 = *(uint64_t (**)(uint64_t, _QWORD))(v13 + 80);
  if (v14)
  {
    v15 = v14(v12, 0);
    if (!(_DWORD)v15)
    {
      if (dword_1EE2A34A0)
      {
        v26 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
      if (v22)
        v22(a1, a2);
      goto LABEL_29;
    }
LABEL_24:
    v21 = v15;
    goto LABEL_34;
  }
LABEL_26:
  v21 = 4294948071;
LABEL_34:
  if (BOOLean)
    CFRelease(BOOLean);
  return v21;
}

void playerceleste_setRateWithManualFade(float a1, uint64_t a2, CMTime *a3)
{
  uint64_t DerivedStorage;
  useconds_t v6;
  uint64_t FigBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  float v9;
  float v10;
  uint64_t v11;
  void (*v12)(uint64_t, float);
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  void (*v17)(uint64_t, float);
  CMTime v18;
  float valuePtr;
  CFNumberRef number;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  number = 0;
  valuePtr = 0.0;
  v18 = *a3;
  if (CMTimeGetSeconds(&v18) >= 5.0)
  {
    v6 = 500000;
  }
  else
  {
    v18 = *a3;
    v6 = (CMTimeGetSeconds(&v18) * 100000.0);
  }
  FigBaseObject = FigPlayerGetFigBaseObject(*(_QWORD *)(DerivedStorage + 80));
  v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  v9 = 0.0;
  if (v8)
  {
    v8(FigBaseObject, CFSTR("UserVolume"), *MEMORY[0x1E0C9AE00], &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
      CFRelease(number);
      v9 = valuePtr;
    }
  }
  v10 = v9 / 10.0;
  if (a1 == 0.0)
  {
    while (v9 > 0.0)
    {
      v9 = v9 - v10;
      if (v9 <= 0.0)
        v15 = 0.0;
      else
        v15 = v9;
      fpcel_setMovieVolumeOnSubPlayer(*(_QWORD *)(DerivedStorage + 80), v15);
      usleep(v6);
    }
    v16 = *(_QWORD *)(DerivedStorage + 80);
    v17 = *(void (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v17)
      v17(v16, a1);
  }
  else
  {
    fpcel_setMovieVolumeOnSubPlayer(*(_QWORD *)(DerivedStorage + 80), 0.0);
    v11 = *(_QWORD *)(DerivedStorage + 80);
    v12 = *(void (**)(uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v12)
      v12(v11, a1);
    v13 = valuePtr;
    if (valuePtr > 0.0)
    {
      v14 = 0.0;
      do
      {
        if ((float)(v10 + v14) >= v13)
          v14 = v13;
        else
          v14 = v10 + v14;
        fpcel_setMovieVolumeOnSubPlayer(*(_QWORD *)(DerivedStorage + 80), v14);
        usleep(v6);
        v13 = valuePtr;
      }
      while (v14 < valuePtr);
    }
  }
  fpcel_setMovieVolumeOnSubPlayer(*(_QWORD *)(DerivedStorage + 80), valuePtr);
  *(float *)(DerivedStorage + 124) = a1;
}

void fpcel_setMovieVolumeOnSubPlayer(uint64_t a1, float a2)
{
  CFNumberRef v3;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, CFNumberRef);
  float valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, &valuePtr);
  FigBaseObject = FigPlayerGetFigBaseObject(a1);
  v5 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v5)
    v5(FigBaseObject, CFSTR("UserVolume"), v3);
  CFRelease(v3);
}

void playerceleste_deferredAvailableFormatsChangedNotification(uint64_t a1, const void *a2)
{
  void (*v3)(const void *, _QWORD);

  v3 = *(void (**)(const void *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v3)
    v3(a2, 0);
  CFRelease(a2);
}

uint64_t playerceleste_deferredAppStateChangeListener(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402F2AC](gServerState, &gServerState);
  MEMORY[0x19402EEEC](qword_1EE2A1FA8);
  v4 = &qword_1EE2A1FA0;
  while (1)
  {
    v4 = (uint64_t *)*v4;
    if (!v4)
      break;
    if (v4[1] == *(_QWORD *)(DerivedStorage + 8))
    {
      MEMORY[0x19402EF04](qword_1EE2A1FA8);
      FigCFDictionaryGetInt32IfPresent();
      playerceleste_updatePlayerBasedOnAppState((uint64_t)a2, 0);
      if (!a2)
        return MEMORY[0x19402F2AC](gServerState, 0);
      goto LABEL_7;
    }
  }
  MEMORY[0x19402EF04](qword_1EE2A1FA8);
  if (!a2)
    return MEMORY[0x19402F2AC](gServerState, 0);
LABEL_7:
  CFRelease(a2);
  return MEMORY[0x19402F2AC](gServerState, 0);
}

uint64_t playerceleste_pauseCurrentlyPlayingMovie(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  playerceleste_notifyImminentRateChange();
  result = playerceleste_setRateInternal(a1, 0, a2, 0, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E68], 0, 0.0);
  *(_DWORD *)(DerivedStorage + 124) = 0;
  return result;
}

void playerceleste_deferredAudioSessionIsActiveDidChangeNotification(int a1, const void *a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t (*v9)(const void *, _QWORD, uint64_t *);
  int v10;
  const void *v11;
  BOOL v12;
  uint64_t FigBaseObject;
  void (*v14)(uint64_t, const __CFString *, _QWORD, const void **);
  const void *v15;
  uint64_t v16;

  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0D492F8]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage;
  if (Value == (const void *)*MEMORY[0x1E0C9AE40] && *(_BYTE *)(DerivedStorage + 128))
  {
    v15 = 0;
    v16 = 0;
    v9 = *(uint64_t (**)(const void *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (!v9)
      goto LABEL_15;
    v10 = v9(a2, 0, &v16);
    v11 = 0;
    if (v10)
      v12 = 1;
    else
      v12 = v16 == 0;
    if (v12)
      goto LABEL_16;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v16);
    v14 = *(void (**)(uint64_t, const __CFString *, _QWORD, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v14)
    {
      v14(FigBaseObject, CFSTR("HasEnabledAudio"), *MEMORY[0x1E0C9AE00], &v15);
      v11 = v15;
    }
    else
    {
LABEL_15:
      v11 = 0;
    }
LABEL_16:
    if (v11 != Value)
    {
      if (*(_BYTE *)(v8 + 130))
        playerceleste_pauseCurrentlyPlayingMovie((uint64_t)a2, 28);
      if (playerceleste_canCallSetConnectionActive())
        playerceleste_callSetConnectionActive((uint64_t)a2, 0);
      *(_BYTE *)(v8 + 128) = 0;
      Value = v15;
    }
    if (Value)
      CFRelease(Value);
    playerceleste_deferObjectRelease(v16);
    goto LABEL_25;
  }
  if (Value == (const void *)*MEMORY[0x1E0C9AE50] && !*(_BYTE *)(DerivedStorage + 128))
  {
    if (playerceleste_canCallSetConnectionActive())
      playerceleste_callSetConnectionActive((uint64_t)a2, 1);
    *(_WORD *)(v8 + 128) = 1;
    playerceleste_revokePurgeAssertionIfNecessary();
  }
LABEL_25:
  if (a2)
    CFRelease(a2);
}

void playerceleste_deferObjectRelease(uint64_t a1)
{
  _QWORD block[5];

  if (a1)
  {
    if (playerceleste_getSharedQueue_onceToken != -1)
      dispatch_once(&playerceleste_getSharedQueue_onceToken, &__block_literal_global_14_1);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __playerceleste_deferObjectRelease_block_invoke;
    block[3] = &__block_descriptor_40_e5_v8__0l;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)playerceleste_getSharedQueue_sharedQueue, block);
  }
}

void __playerceleste_deferObjectRelease_block_invoke(uint64_t a1)
{
  MEMORY[0x19402F2AC](gServerState, &gServerState);
  CFRelease(*(CFTypeRef *)(a1 + 32));
  JUMPOUT(0x19402F2ACLL);
}

uint64_t playerceleste_Invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  CFTypeRef v7;
  void (*v8)(uint64_t, CFTypeRef, float);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (!*(_BYTE *)DerivedStorage)
  {
    v4 = DerivedStorage;
    *(_BYTE *)DerivedStorage = 1;
    if (*(_QWORD *)(DerivedStorage + 88))
    {
      for (i = 0; i != 128; i += 16)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      FigStopForwardingMediaServicesProcessDeathNotification();
    }
    if (*(_BYTE *)(v4 + 128) && *(_BYTE *)(v4 + 130) && *(_QWORD *)(v4 + 80))
    {
      FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E0C9AE00], 22, (CFMutableDictionaryRef *)&cf);
      MEMORY[0x19402EEEC](*(_QWORD *)(v4 + 152));
      v6 = *(_QWORD *)(v4 + 80);
      v7 = cf;
      v8 = *(void (**)(uint64_t, CFTypeRef, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      if (v8)
        v8(v6, v7, 0.0);
      MEMORY[0x19402EF04](*(_QWORD *)(v4 + 152));
      *(_DWORD *)(v4 + 124) = 0;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
    }
    *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 130) = 0;
    if (*(_BYTE *)(v4 + 128))
    {
      if (playerceleste_canCallSetConnectionActive())
        playerceleste_callSetConnectionActive(a1, 0);
      *(_BYTE *)(v4 + 128) = 0;
    }
    if (*(_QWORD *)(v4 + 80))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    playerceleste_revokePurgeAssertionIfNecessary();
  }
  return 4294954511;
}

void playerceleste_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  NSObject *v9;
  void *v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
    playerceleste_Invalidate(a1);
  v3 = *(const void **)(DerivedStorage + 136);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 88);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 88) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 64);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 72);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 80);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 144) = 0;
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 152) = 0;
  FigSimpleMutexDestroy();
  *(_QWORD *)(DerivedStorage + 184) = 0;
  v9 = *(NSObject **)(DerivedStorage + 104);
  if (v9)
  {
    dispatch_sync(v9, &__block_literal_global_48);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 104));
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v10 = *(void **)(DerivedStorage + 176);
  if (v10)
  {

    *(_QWORD *)(DerivedStorage + 176) = 0;
  }
}

__CFString *playerceleste_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const char *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (a1)
    v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 165);
  else
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPlayerCeleste %p %{public}s celestePlayerID %lld subPlayer %p>"), a1, v5, *(_QWORD *)(DerivedStorage + 8), *(_QWORD *)(DerivedStorage + 80));
  return Mutable;
}

uint64_t playerceleste_CopyProperty(uint64_t a1, const __CFString *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *);
  __CFString **v11;
  uint64_t v12;
  const void *Float32;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  uint64_t v20;
  const __CFAllocator *v21;
  uint64_t v23;
  uint64_t FigBaseObject;
  uint64_t (*v25)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *);
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  const void **v33;
  uint64_t v34;
  uint64_t v35;
  OpaqueFigPlayer *v36;
  CFTypeID v37;
  CFTypeID TypeID;
  int v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("UserVolume")))
  {
    v8 = *(_QWORD *)(DerivedStorage + 88);
    if (v8)
    {
      v9 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v9)
      {
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v9 + 48);
        if (v10)
        {
          v11 = (__CFString **)MEMORY[0x1E0D49CD0];
LABEL_34:
          v19 = *v11;
          v20 = v8;
          v21 = a3;
          return v10(v20, v19, v21, a4);
        }
        return 4294948071;
      }
      return 4294948075;
    }
    Float32 = (const void *)FigCFNumberCreateFloat32();
    goto LABEL_12;
  }
  if (CFEqual(a2, CFSTR("ActivationContext")))
  {
    v8 = *(_QWORD *)(DerivedStorage + 88);
    if (v8)
    {
      v12 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v12)
      {
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v12 + 48);
        if (v10)
        {
          v11 = (__CFString **)MEMORY[0x1E0D49480];
          goto LABEL_34;
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (CFEqual(a2, CFSTR("AudioCategory")))
  {
    v8 = *(_QWORD *)(DerivedStorage + 88);
    if (v8)
    {
      v15 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v15)
      {
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v15 + 48);
        if (v10)
        {
          v11 = (__CFString **)MEMORY[0x1E0D494F8];
          goto LABEL_34;
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (CFEqual(a2, CFSTR("AudioMode")))
  {
    v8 = *(_QWORD *)(DerivedStorage + 88);
    if (v8)
    {
      v16 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v16)
      {
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v16 + 48);
        if (v10)
        {
          v11 = (__CFString **)MEMORY[0x1E0D49528];
          goto LABEL_34;
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (CFEqual(a2, CFSTR("AudioRouteInitiationDescription")))
  {
    v8 = *(_QWORD *)(DerivedStorage + 88);
    if (v8)
    {
      v17 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v17)
      {
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v17 + 48);
        if (v10)
        {
          v11 = (__CFString **)MEMORY[0x1E0D49820];
          goto LABEL_34;
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (CFEqual(a2, CFSTR("UserMuted")))
  {
    v8 = *(_QWORD *)(DerivedStorage + 88);
    if (v8)
    {
      v18 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v18)
      {
        v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v18 + 48);
        if (v10)
        {
          v11 = (__CFString **)MEMORY[0x1E0D49CC0];
          goto LABEL_34;
        }
        return 4294948071;
      }
      return 4294948075;
    }
    return 4294950074;
  }
  if (!CFEqual(a2, CFSTR("IsValid")))
  {
    if (CFEqual(a2, CFSTR("DeviceSupportsPiP")))
    {
      v27 = *(_QWORD *)(DerivedStorage + 88);
      if (!v27)
        return 4294950074;
      v28 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v28)
      {
        v29 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *))(v28 + 32);
        if (v29)
        {
          v30 = (_QWORD *)MEMORY[0x1E0D48688];
LABEL_46:
          v29(v27, *v30, a3, a4);
          return 0;
        }
      }
      return 0;
    }
    if (CFEqual(a2, CFSTR("PiPIsPossible")))
    {
      v27 = *(_QWORD *)(DerivedStorage + 88);
      if (v27)
      {
        v31 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (!v31)
          return 0;
        v29 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *))(v31 + 48);
        if (!v29)
          return 0;
        v30 = (_QWORD *)MEMORY[0x1E0D49A08];
        goto LABEL_46;
      }
      v33 = (const void **)MEMORY[0x1E0C9AE40];
    }
    else
    {
      if (CFEqual(a2, CFSTR("IsLongFormAudio")))
      {
        v27 = *(_QWORD *)(DerivedStorage + 88);
        if (!v27)
          return 4294950074;
        v32 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v32)
        {
          v29 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *))(v32 + 48);
          if (v29)
          {
            v30 = (_QWORD *)MEMORY[0x1E0D498E0];
            goto LABEL_46;
          }
        }
        return 0;
      }
      if (CFEqual(a2, CFSTR("CanBeginInterruption")))
      {
        v27 = *(_QWORD *)(DerivedStorage + 88);
        if (!v27)
          return 4294950074;
        v34 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v34)
        {
          v29 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, _QWORD *))(v34 + 48);
          if (v29)
          {
            v30 = (_QWORD *)MEMORY[0x1E0D495A0];
            goto LABEL_46;
          }
        }
        return 0;
      }
      if (CFEqual(a2, CFSTR("UseApplicationAudioSession")))
      {
        Float32 = (const void *)*MEMORY[0x1E0C9AE50];
        if (!*MEMORY[0x1E0C9AE50])
          goto LABEL_12;
        goto LABEL_62;
      }
      if (CFEqual(a2, CFSTR("AudioSessionID")))
      {
        v8 = *(_QWORD *)(DerivedStorage + 88);
        if (v8)
        {
          v35 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v35)
          {
            v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v35 + 16);
            if (v10)
            {
              v11 = kFigAudioSessionProperty_AudioSessionID;
              goto LABEL_34;
            }
            return 4294948071;
          }
          return 4294948075;
        }
        return 4294950074;
      }
      if (CFEqual(a2, CFSTR("AllowPixelBufferPoolSharing")))
      {
        v36 = *(OpaqueFigPlayer **)(DerivedStorage + 80);
        if (v36)
        {
          cf = 0;
          v14 = FigPlayerCopyProperty(v36, a2, a3, &cf);
          Float32 = cf;
          if (cf)
          {
            v37 = CFGetTypeID(cf);
            TypeID = CFNumberGetTypeID();
            Float32 = cf;
            if (v37 == TypeID)
            {
              CFRelease(cf);
              Float32 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
            }
          }
          goto LABEL_13;
        }
      }
      if (CFEqual(a2, CFSTR("DisableAutoPauseOnRouteRemovalIfNoAudio")))
      {
        v33 = (const void **)MEMORY[0x1E0C9AE50];
        v39 = *(unsigned __int8 *)(DerivedStorage + 162);
      }
      else
      {
        if (!CFEqual(a2, CFSTR("EnsuresActiveAudioSessionWhenStartingPlayback")))
        {
          if (CFEqual(a2, CFSTR("MXSessionID")))
          {
            v40 = *(_QWORD *)(DerivedStorage + 88);
            if (!v40)
              return FigSignalErrorAt();
            v41 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v41)
            {
              v10 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, _QWORD *))(v41 + 48);
              if (v10)
              {
                v19 = (__CFString *)*MEMORY[0x1E0D49800];
                v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v20 = v40;
                return v10(v20, v19, v21, a4);
              }
              return 4294948071;
            }
            return 4294948075;
          }
          if (!CFEqual(a2, CFSTR("FigAudioSession")))
            goto LABEL_38;
          Float32 = *(const void **)(DerivedStorage + 88);
          if (!Float32)
          {
LABEL_12:
            v14 = 0;
LABEL_13:
            *a4 = Float32;
            return v14;
          }
LABEL_62:
          Float32 = CFRetain(Float32);
          goto LABEL_12;
        }
        v33 = (const void **)MEMORY[0x1E0C9AE50];
        v39 = *(unsigned __int8 *)(DerivedStorage + 163);
      }
      if (!v39)
        v33 = (const void **)MEMORY[0x1E0C9AE40];
    }
    Float32 = *v33;
    goto LABEL_62;
  }
LABEL_38:
  v23 = *(_QWORD *)(DerivedStorage + 80);
  if (!v23)
    return FigSignalErrorAt();
  FigBaseObject = FigPlayerGetFigBaseObject(v23);
  v25 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
  if (v25)
    return v25(FigBaseObject, a2, a3, a4);
  return 4294954514;
}

uint64_t playerceleste_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v13;
  char v15;
  CFTypeRef v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  cf = 0;
  v15 = 0;
  v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playerceleste_handleSetProperty, &v15, &cf, &v16);
  if ((_DWORD)v7)
    goto LABEL_6;
  if (v15)
  {
    v13 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(DerivedStorage + 80);
    if (!v8)
    {
      v7 = FigSignalErrorAt();
      goto LABEL_6;
    }
    v10 = v16;
    v9 = cf;
    FigBaseObject = FigPlayerGetFigBaseObject(v8);
    v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v12)
    {
      v7 = v12(FigBaseObject, v9, v10);
LABEL_6:
      v13 = v7;
      goto LABEL_8;
    }
    v13 = 4294954514;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v13;
}

void fpcel_destroyPlaybackItemFromPlayer()
{
  uint64_t v0;
  const void *v1;
  uint64_t FigBaseObject;
  uint64_t v3;
  void (*v4)(uint64_t);

  CMBaseObjectGetDerivedStorage();
  v0 = FigCFWeakReferenceTableCopyValue();
  if (v0)
  {
    v1 = (const void *)v0;
    if (!FigCFWeakReferenceTableRemoveValue())
    {
      FigBaseObject = FigPlaybackItemGetFigBaseObject(v1);
      if (FigBaseObject)
      {
        v3 = FigBaseObject;
        v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
        if (v4)
          v4(v3);
      }
    }
    CFRelease(v1);
  }
}

uint64_t playerceleste_handleSetProperty(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t DerivedStorage;
  const void *v14;
  CFTypeRef v15;
  uint64_t v16;
  CFAllocatorRef *v17;
  __CFString *v18;
  void *v19;
  CFDictionaryRef v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, _QWORD, CFDictionaryRef);
  uint64_t v24;
  CFTypeRef v25;
  CFTypeRef v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, const void *);
  uint64_t *v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, CFAllocatorRef, CFBooleanRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeID v45;
  void *v46;
  CFTypeID v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFTypeID v55;
  CFTypeID v56;
  NSObject *v57;
  CFTypeID v58;
  CFNumberRef v59;
  uint64_t v60;
  NSObject *v61;
  CFTypeID v62;
  CFTypeID v63;
  uint64_t updated;
  CFBooleanRef BOOLean;
  CFTypeRef v66;
  void *values[2];
  void *keys[18];

  keys[16] = *(void **)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v66 = 0;
  if (CFEqual(a3, CFSTR("ClientName")))
  {
    v14 = *(const void **)(DerivedStorage + 64);
    *(_QWORD *)(DerivedStorage + 64) = a4;
    if (a4)
      CFRetain(a4);
    if (v14)
      CFRelease(v14);
LABEL_6:
    if (*(_QWORD *)(DerivedStorage + 80))
    {
      *a5 = 0;
      if (a3)
        v15 = CFRetain(a3);
      else
        v15 = 0;
      *a6 = v15;
      if (a4)
        v26 = CFRetain(a4);
      else
        v26 = 0;
      v24 = 0;
      *a7 = v26;
      return v24;
    }
    goto LABEL_18;
  }
  if (CFEqual(a3, CFSTR("UserVolume")))
  {
    v16 = *(_QWORD *)(DerivedStorage + 88);
    if (v16)
    {
      v17 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
      if (!*(_BYTE *)(DerivedStorage + 128))
      {
        BOOLean = 0;
        v31 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v31)
        {
          v32 = *(void (**)(uint64_t, _QWORD, CFAllocatorRef, CFBooleanRef *))(v31 + 48);
          if (v32)
          {
            v32(v16, *MEMORY[0x1E0D49958], *v17, &BOOLean);
            if (BOOLean)
            {
              if (CFBooleanGetValue(BOOLean))
              {
                if (dword_1EE2A34A0)
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                playerceleste_beginInterruptionInternal(a1, 0);
              }
              CFRelease(BOOLean);
            }
          }
        }
      }
      if (*(_BYTE *)(DerivedStorage + 120))
      {
        v18 = playerceleste_copyUniqueClientID();
        v19 = (void *)*MEMORY[0x1E0D49F38];
        keys[0] = *(void **)MEMORY[0x1E0D49F40];
        keys[1] = v19;
        values[0] = (void *)a4;
        values[1] = v18;
        v20 = CFDictionaryCreate(*v17, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v21 = *(_QWORD *)(DerivedStorage + 88);
        if (v21)
        {
          v22 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v22)
          {
            v23 = *(void (**)(uint64_t, _QWORD, CFDictionaryRef))(v22 + 56);
            if (v23)
              v23(v21, *MEMORY[0x1E0D49CD8], v20);
          }
        }
        CFRelease(v18);
        CFRelease(v20);
        goto LABEL_52;
      }
      v27 = *(_QWORD *)(DerivedStorage + 88);
      if (!v27
        || (v34 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) == 0
        || (v29 = *(void (**)(uint64_t, uint64_t, const void *))(v34 + 56)) == 0)
      {
LABEL_52:
        v25 = 0;
LABEL_53:
        v24 = 0;
        goto LABEL_54;
      }
      v30 = (uint64_t *)MEMORY[0x1E0D49CD0];
      goto LABEL_50;
    }
    return 4294950074;
  }
  if (CFEqual(a3, CFSTR("ActivationContext")))
  {
LABEL_26:
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (v27)
    {
      v28 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (!v28)
        goto LABEL_52;
      v29 = *(void (**)(uint64_t, uint64_t, const void *))(v28 + 56);
      if (!v29)
        goto LABEL_52;
      v30 = (uint64_t *)MEMORY[0x1E0D49480];
      goto LABEL_50;
    }
    return 4294950074;
  }
  if (CFEqual(a3, CFSTR("AudioCategory")))
  {
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (!v27)
      return 4294950074;
    v35 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v35)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v35 + 56);
    if (!v29)
      goto LABEL_52;
    v30 = (uint64_t *)MEMORY[0x1E0D494F8];
LABEL_50:
    v37 = *v30;
    v38 = v27;
    v39 = a4;
LABEL_51:
    v29(v38, v37, v39);
    goto LABEL_52;
  }
  if (CFEqual(a3, CFSTR("AudioMode")))
  {
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (!v27)
      return 4294950074;
    v36 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v36)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v36 + 56);
    if (!v29)
      goto LABEL_52;
    v30 = (uint64_t *)MEMORY[0x1E0D49528];
    goto LABEL_50;
  }
  if (CFEqual(a3, CFSTR("AudioRouteInitiationDescription")))
    goto LABEL_26;
  if (CFEqual(a3, CFSTR("ClientPriority")))
  {
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (!v27)
      return 4294950074;
    v41 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v41)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v41 + 56);
    if (!v29)
      goto LABEL_52;
    v30 = (uint64_t *)MEMORY[0x1E0D495F8];
    goto LABEL_50;
  }
  if (CFEqual(a3, CFSTR("UserMuted")))
  {
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (!v27)
      return 4294950074;
    v42 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v42)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v42 + 56);
    if (!v29)
      goto LABEL_52;
    v30 = (uint64_t *)MEMORY[0x1E0D49CC0];
    goto LABEL_50;
  }
  if (CFEqual(a3, CFSTR("WantsVolumeChangesWhenPaused")))
  {
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (!v27)
      return 4294950074;
    v43 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v43)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v43 + 56);
    if (!v29)
      goto LABEL_52;
    v30 = (uint64_t *)MEMORY[0x1E0D49D28];
    goto LABEL_50;
  }
  if (CFEqual(a3, CFSTR("WantsExternalVolumeChangesOnly")))
  {
    if (*(_QWORD *)(DerivedStorage + 88))
    {
      v25 = 0;
      v24 = 0;
      *(_BYTE *)(DerivedStorage + 120) = *MEMORY[0x1E0C9AE50] == (_QWORD)a4;
      goto LABEL_54;
    }
    return 4294950074;
  }
  if (CFEqual(a3, CFSTR("WantsVolumeChangesWhenPausedOrInactive")))
  {
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (!v27)
      return 4294950074;
    v44 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v44)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v44 + 56);
    if (!v29)
      goto LABEL_52;
    v30 = (uint64_t *)MEMORY[0x1E0D49D30];
    goto LABEL_50;
  }
  if (CFEqual(a3, CFSTR("InterruptionHandlingFadeOutDuration")))
  {
    if (a4)
    {
      v45 = CFGetTypeID(a4);
      if (v45 == CFNumberGetTypeID())
      {
        v46 = (void *)(DerivedStorage + 112);
LABEL_92:
        CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, v46);
        goto LABEL_52;
      }
    }
    goto LABEL_18;
  }
  if (CFEqual(a3, CFSTR("StoppingFadeOutDuration")))
  {
    if (a4)
    {
      v47 = CFGetTypeID(a4);
      if (v47 == CFNumberGetTypeID())
      {
        v46 = (void *)(DerivedStorage + 116);
        goto LABEL_92;
      }
    }
LABEL_18:
    v24 = FigSignalErrorAt();
LABEL_19:
    v25 = 0;
LABEL_54:
    *a5 = 1;
    goto LABEL_55;
  }
  if (CFEqual(a3, CFSTR("AllowGaplessTransitions")))
    goto LABEL_6;
  if (CFEqual(a3, CFSTR("AudioModeIsMoviePlayback")))
  {
    v48 = *(_QWORD *)(DerivedStorage + 88);
    if (!v48)
      return 4294950074;
    v49 = *MEMORY[0x1E0D49528];
    if ((const void *)*MEMORY[0x1E0C9AE50] == a4)
    {
      v50 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (!v50)
        goto LABEL_52;
      v29 = *(void (**)(uint64_t, uint64_t, const void *))(v50 + 56);
      if (!v29)
        goto LABEL_52;
      v51 = (const void **)MEMORY[0x1E0D49108];
      goto LABEL_106;
    }
    goto LABEL_103;
  }
  if (CFEqual(a3, CFSTR("AudioModeIsSpokenAudio")))
  {
    v48 = *(_QWORD *)(DerivedStorage + 88);
    if (!v48)
      return 4294950074;
    v49 = *MEMORY[0x1E0D49528];
    if ((const void *)*MEMORY[0x1E0C9AE50] == a4)
    {
      v54 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (!v54)
        goto LABEL_52;
      v29 = *(void (**)(uint64_t, uint64_t, const void *))(v54 + 56);
      if (!v29)
        goto LABEL_52;
      v51 = (const void **)MEMORY[0x1E0D491B0];
LABEL_106:
      v39 = *v51;
      v38 = v48;
      v37 = v49;
      goto LABEL_51;
    }
LABEL_103:
    v52 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v52)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v52 + 56);
    if (!v29)
      goto LABEL_52;
    v51 = (const void **)MEMORY[0x1E0D49090];
    goto LABEL_106;
  }
  if (CFEqual(a3, CFSTR("IsLongFormAudio")))
  {
    v27 = *(_QWORD *)(DerivedStorage + 88);
    if (!v27)
      return 4294950074;
    v53 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
    if (!v53)
      goto LABEL_52;
    v29 = *(void (**)(uint64_t, uint64_t, const void *))(v53 + 56);
    if (!v29)
      goto LABEL_52;
    v30 = (uint64_t *)MEMORY[0x1E0D498E0];
    goto LABEL_50;
  }
  if (CFEqual(a3, CFSTR("UseApplicationAudioSession")))
    goto LABEL_52;
  if (!CFEqual(a3, CFSTR("FigAudioSession")))
  {
    if (!CFEqual(a3, CFSTR("AudioSessionID")))
    {
      if (CFEqual(a3, CFSTR("AllowPixelBufferPoolSharing")))
      {
        if (a4)
        {
          if (*(_QWORD *)(DerivedStorage + 80))
          {
            v58 = CFGetTypeID(a4);
            if (v58 == CFBooleanGetTypeID())
            {
              LODWORD(keys[0]) = 0;
              if (CFBooleanGetValue((CFBooleanRef)a4))
                LODWORD(keys[0]) = *(_DWORD *)(DerivedStorage + 16);
              v59 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, keys);
              v24 = FigPlayerSetProperty(*(_QWORD *)(DerivedStorage + 80), (uint64_t)CFSTR("AllowPixelBufferPoolSharing"), (uint64_t)v59);
              if (v59)
                CFRelease(v59);
              goto LABEL_19;
            }
          }
        }
      }
      else
      {
        if (CFEqual(a3, CFSTR("DisableAutoPauseOnRouteRemovalIfNoAudio")))
        {
          if (a4)
          {
            v62 = CFGetTypeID(a4);
            if (v62 == CFBooleanGetTypeID())
            {
              v25 = 0;
              v24 = 0;
              *(_BYTE *)(DerivedStorage + 162) = CFBooleanGetValue((CFBooleanRef)a4);
              goto LABEL_54;
            }
          }
          goto LABEL_18;
        }
        if (CFEqual(a3, CFSTR("EnsuresActiveAudioSessionWhenStartingPlayback")))
        {
          if (a4)
          {
            v63 = CFGetTypeID(a4);
            if (v63 == CFBooleanGetTypeID())
            {
              v25 = 0;
              v24 = 0;
              *(_BYTE *)(DerivedStorage + 163) = CFBooleanGetValue((CFBooleanRef)a4);
              goto LABEL_54;
            }
          }
          goto LABEL_18;
        }
      }
      goto LABEL_6;
    }
    LODWORD(BOOLean) = 0;
    if (a4 && (v56 = CFGetTypeID(a4), v56 == CFNumberGetTypeID()))
    {
      CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &BOOLean);
      if (FigAudioSessionIsRelatedToAudioSessionID(*(_QWORD *)(DerivedStorage + 88), BOOLean))
      {
        if (dword_1EE2A34A0)
        {
          v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_52;
      }
      v60 = playerceleste_createFigAudioSessionUsingAudioSessionID((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a1, (const __CFNumber *)a4, &v66);
      if ((_DWORD)v60)
      {
        v24 = v60;
        v25 = v66;
      }
      else
      {
        if (dword_1EE2A34A0)
        {
          v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        v25 = v66;
        updated = playerceleste_updatePlayerAudioSession(a1, v66);
        if (!(_DWORD)updated)
          goto LABEL_53;
        v24 = updated;
      }
    }
    else
    {
      v24 = FigSignalErrorAt();
      v25 = 0;
    }
LABEL_55:
    if (v25)
      CFRelease(v25);
    return v24;
  }
  if (a4)
  {
    v55 = CFGetTypeID(a4);
    if (v55 == FigAudioSessionGetTypeID())
    {
      v24 = playerceleste_updatePlayerAudioSession(a1, a4);
      if (!(_DWORD)v24)
        goto LABEL_19;
      return v24;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigAudioSessionIsRelatedToAudioSessionID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  if (a1
    && (v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)) != 0
    && (v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 96)) != 0)
  {
    return v5(a1, a2);
  }
  else
  {
    return 0;
  }
}

uint64_t playerceleste_AddToPlayQueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t FigBaseObject;
  void (*v11)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[23];

  cf[21] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = CMBaseObjectGetDerivedStorage();
  if (a3)
    v8 = CMBaseObjectGetDerivedStorage();
  else
    v8 = 0;
  v9 = *(_QWORD *)(DerivedStorage + 80);
  if (!v9)
  {
    v14 = FigSignalErrorAt();
    goto LABEL_17;
  }
  FigBaseObject = FigPlayerGetFigBaseObject(v9);
  v11 = *(void (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (v11)
  {
    v11(FigBaseObject, CFSTR("IsSetupForAirPlayVideo"), *MEMORY[0x1E0C9AE00], cf);
    v11 = (void (*)(uint64_t, __CFString *, _QWORD, CFTypeRef *))cf[0];
  }
  if ((!*(_BYTE *)(DerivedStorage + 161)
     || v11 == (void (*)(uint64_t, __CFString *, _QWORD, CFTypeRef *))*MEMORY[0x1E0C9AE50])
    && !*(_BYTE *)(DerivedStorage + 129))
  {
    if (dword_1EE2A34A0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v14 = playerceleste_beginInterruptionInternal(a1, 0);
    if ((_DWORD)v14)
    {
      if (!*(_BYTE *)(DerivedStorage + 160))
        goto LABEL_17;
    }
  }
  if (a2)
    a2 = *(_QWORD *)(v7 + 24);
  if (a3)
    a3 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(DerivedStorage + 80);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v13)
  {
    v14 = v13(v12, a2, a3);
LABEL_17:
    v15 = v14;
    goto LABEL_19;
  }
  v15 = 4294954514;
LABEL_19:
  if (cf[0])
    CFRelease(cf[0]);
  return v15;
}

uint64_t playerceleste_RemoveFromPlayQueue(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = *(_QWORD *)(DerivedStorage + 80);
  if (!v5)
    return FigSignalErrorAt();
  if (a2)
    a2 = *(_QWORD *)(v4 + 24);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t playerceleste_CopyPlayQueueItem(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef v10;
  BOOL v11;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = DerivedStorage;
  if (a2)
  {
    v5 = CMBaseObjectGetDerivedStorage();
    v6 = *(_QWORD *)(v4 + 80);
    if (!v6)
      goto LABEL_12;
    v7 = *(_QWORD *)(v5 + 24);
  }
  else
  {
    v6 = *(_QWORD *)(DerivedStorage + 80);
    if (!v6)
      goto LABEL_12;
    v7 = 0;
  }
  v8 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v8)
  {
    v9 = 4294954514;
    goto LABEL_14;
  }
  v9 = v8(v6, v7, &cf);
  v10 = cf;
  if ((_DWORD)v9)
    v11 = 1;
  else
    v11 = cf == 0;
  if (v11)
    goto LABEL_15;
  FigCFWeakReferenceTableApplyFunction();
LABEL_12:
  v9 = FigSignalErrorAt();
LABEL_14:
  v10 = cf;
LABEL_15:
  if (v10)
    CFRelease(v10);
  return v9;
}

uint64_t playerceleste_SetRate(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = playerceleste_setRateInternal(a1, 0, 0, 0, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E68], 0, a2);
  *(float *)(DerivedStorage + 124) = a2;
  return result;
}

uint64_t playerceleste_GetRate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t playerceleste_SetRateWithFade(uint64_t a1, float a2)
{
  uint64_t DerivedStorage;
  CMTime *Mutable;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Mutable = (CMTime *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetCMTime();
  v6 = playerceleste_setRateInternal(a1, Mutable, 0, 0, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E68], 0, a2);
  *(float *)(DerivedStorage + 124) = a2;
  if (Mutable)
    CFRelease(Mutable);
  return v6;
}

uint64_t playerceleste_StartPreroll(float a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, float);

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v6)
    return v6(v5, a3, a1);
  else
    return 4294954514;
}

uint64_t playerceleste_StepByCount(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t playerceleste_SetRateAndAnchorTime(uint64_t a1, CMTime *a2, __int128 *a3, uint64_t a4, float a5)
{
  uint64_t DerivedStorage;
  uint64_t result;
  __int128 v12;
  uint64_t v13;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = *a2;
  v12 = *a3;
  v13 = *((_QWORD *)a3 + 2);
  result = playerceleste_setRateInternal(a1, 0, 0, 1, &v14, (uint64_t)&v12, a4, a5);
  *(float *)(DerivedStorage + 124) = a5;
  return result;
}

void playerceleste_CreatePlaybackItemFromAsset()
{
  *(_BYTE *)(CMBaseObjectGetDerivedStorage() + 129) = 0;
  playerceleste_revokePurgeAssertionIfNecessary();
}

uint64_t sub_192F6A2E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *value, CFTypeRef a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  const __CFDictionary *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, CFTypeRef *);
  uint64_t v27;
  CFTypeRef v28;
  uint64_t DerivedStorage;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t Key;
  CFTypeRef v34;
  CFTypeRef v36;
  const __CFString *v37;
  CFTypeRef v38;

  v25 = *(_QWORD *)(v24 + 80);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                 + 96);
  if (v26)
  {
    v27 = v26(v25, v23, v21, v22, &v36);
    if ((_DWORD)v27)
    {
      v30 = v27;
    }
    else
    {
      v28 = v36;
      v38 = 0;
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v37 = 0;
      FigPlaybackItemGetClassID();
      v30 = CMDerivedObjectCreate();
      if (v38)
      {
        v31 = CMBaseObjectGetDerivedStorage();
        *(_BYTE *)(v31 + 42) = 0;
        if (v22 && CFDictionaryGetValueIfPresent(v22, CFSTR("LoggingIdentifier"), (const void **)&v37))
          CFStringGetCString(v37, (char *)(v31 + 42), 10, 0x600u);
        *(_QWORD *)(v31 + 8) = *(_QWORD *)(DerivedStorage + 8);
        *(_QWORD *)(v31 + 24) = CFRetain(v28);
        v32 = *(const void **)(DerivedStorage + 56);
        *(_QWORD *)(v31 + 32) = v32;
        if (v32)
          CFRetain(v32);
        Key = FigCFWeakReferenceTableAddValueAndGetKey();
        if (!(_DWORD)Key)
        {
          Key = FigCFWeakReferenceTableAddValueAssociatedWithKey();
          if (!(_DWORD)Key)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            Key = FigNotificationCenterAddWeakListener();
            if (!(_DWORD)Key)
            {
              *(_BYTE *)(v31 + 41) = 1;
              v34 = v38;
LABEL_13:
              v30 = 0;
              *v20 = v34;
              goto LABEL_15;
            }
          }
        }
        v30 = Key;
      }
      else
      {
        FigSignalErrorAt();
      }
      if (v38)
        CFRelease(v38);
      if (!(_DWORD)v30)
      {
        v34 = 0;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v30 = 4294954514;
  }
LABEL_15:
  if (v36)
    CFRelease(v36);
  return v30;
}

uint64_t playerceleste_SetRateWithOptions(uint64_t a1, CMTime *a2, float a3)
{
  uint64_t DerivedStorage;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = playerceleste_setRateInternal(a1, a2, 0, 0, MEMORY[0x1E0CA2E68], MEMORY[0x1E0CA2E68], 0, a3);
  *(float *)(DerivedStorage + 124) = a3;
  return result;
}

uint64_t playerceleste_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  uint64_t (*v11)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v12;
  uint64_t v13;
  CFTypeRef v14;
  CFTypeRef cf;
  CFTypeRef v17;
  CFTypeRef v18;
  BOOL v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  v17 = 0;
  v18 = 0;
  cf = 0;
  if (!a2)
    goto LABEL_21;
  v7 = DerivedStorage;
  v8 = FPSupport_HandlePlayerSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)playerceleste_handleSetProperty, &v19, &cf, &v18);
  if ((_DWORD)v8)
  {
LABEL_10:
    v13 = v8;
    goto LABEL_12;
  }
  if (v19)
  {
    v14 = 0;
LABEL_9:
    v8 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v18, v14, a3);
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(v7 + 80);
  if (!v9)
  {
LABEL_21:
    v12 = FigSignalErrorAt();
    goto LABEL_7;
  }
  v10 = cf;
  v11 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v11)
  {
    v12 = v11(v9, v10, &v17);
LABEL_7:
    v13 = v12;
    if ((_DWORD)v12)
      goto LABEL_12;
    v14 = v17;
    goto LABEL_9;
  }
  v13 = 4294954514;
LABEL_12:
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  return v13;
}

uint64_t playerceleste_ReevaluateRouteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  if (!v3)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t playerceleste_AddExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  if (!v3)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t playerceleste_RemoveExternalStartupTask(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  if (!v3)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 136);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t fpcel_findCelesteItemIDForSubItem(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 24) == *a3)
    a3[1] = *(_QWORD *)(result + 16);
  return result;
}

void itemceleste_reflectSubItemNotificationToClient(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  _BYTE *v8;
  int v9;
  const __CFArray *Value;
  const __CFArray *v11;
  int v12;
  CFRange v13;

  if (a2)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (CFEqual(a3, CFSTR("ReadyForInspection")))
    {
      if (!a5)
        goto LABEL_12;
      v9 = *(unsigned __int8 *)(DerivedStorage + 40);
      v8 = (_BYTE *)(DerivedStorage + 40);
      if (!v9)
        goto LABEL_12;
      Value = (const __CFArray *)CFDictionaryGetValue(a5, CFSTR("Properties"));
      if (!Value)
        goto LABEL_12;
      v11 = Value;
      v13.length = CFArrayGetCount(Value);
      v13.location = 0;
      if (!CFArrayContainsValue(v11, v13, CFSTR("InitialSamples")))
        goto LABEL_12;
    }
    else
    {
      if (!CFEqual(a3, CFSTR("FailedToBecomeReadyForInspection")))
        goto LABEL_12;
      v12 = *(unsigned __int8 *)(DerivedStorage + 40);
      v8 = (_BYTE *)(DerivedStorage + 40);
      if (!v12)
        goto LABEL_12;
    }
    *v8 = 0;
LABEL_12:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
}

uint64_t itemceleste_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)DerivedStorage)
    return 4294954511;
  v2 = DerivedStorage;
  *(_BYTE *)DerivedStorage = 1;
  if (*(_BYTE *)(DerivedStorage + 40))
    *(_BYTE *)(DerivedStorage + 40) = 0;
  result = *(_QWORD *)(DerivedStorage + 24);
  if (result)
  {
    if (*(_BYTE *)(v2 + 41))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(_BYTE *)(v2 + 41) = 0;
      result = *(_QWORD *)(v2 + 24);
    }
    result = FigPlaybackItemGetFigBaseObject(result);
    if (result)
    {
      v3 = result;
      v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v4)
        v4(v3);
      return 0;
    }
  }
  return result;
}

void itemceleste_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)DerivedStorage)
    itemceleste_Invalidate();
  v1 = FigCFWeakReferenceTableCopyValue();
  if (v1)
  {
    v2 = v1;
    CMBaseObjectGetDerivedStorage();
    FigCFWeakReferenceTableRemoveValue();
    playerceleste_deferObjectRelease(v2);
  }
  FigCFWeakReferenceTableRemoveValue();
  v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 32);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  *(_QWORD *)(DerivedStorage + 8) = 0;
  *(_QWORD *)(DerivedStorage + 16) = 0;
}

__CFString *itemceleste_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const char *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (a1)
    v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 42);
  else
    v5 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCelestePlaybackItem %p %s celesteItemID %lld subItem %p>"), a1, v5, *(_QWORD *)(DerivedStorage + 16), *(_QWORD *)(DerivedStorage + 24));
  return Mutable;
}

uint64_t itemceleste_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigBaseObject = FigPlaybackItemGetFigBaseObject(*(_QWORD *)(DerivedStorage + 24));
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v9)
    return v9(FigBaseObject, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemceleste_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  CFTypeRef v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, CFTypeRef, CFTypeRef);
  uint64_t v13;
  char v15;
  CFTypeRef v16;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  cf = 0;
  v15 = 0;
  v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemceleste_handleSetProperty, &v15, &cf, &v16);
  if ((_DWORD)v7)
    goto LABEL_6;
  if (v15)
  {
    v13 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(DerivedStorage + 24);
    if (!v8)
    {
      v7 = FigSignalErrorAt();
      goto LABEL_6;
    }
    v10 = v16;
    v9 = cf;
    FigBaseObject = FigPlaybackItemGetFigBaseObject(v8);
    v12 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v12)
    {
      v7 = v12(FigBaseObject, v9, v10);
LABEL_6:
      v13 = v7;
      goto LABEL_8;
    }
    v13 = 4294954514;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v13;
}

uint64_t itemceleste_handleSetProperty(int a1, int a2, CFTypeRef cf, const void *a4, _BYTE *a5, _QWORD *a6, _QWORD *a7)
{
  CFTypeRef v10;
  CFTypeRef v11;

  *a5 = 0;
  if (cf)
    v10 = CFRetain(cf);
  else
    v10 = 0;
  *a6 = v10;
  if (a4)
    v11 = CFRetain(a4);
  else
    v11 = 0;
  *a7 = v11;
  return 0;
}

uint64_t itemceleste_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t itemceleste_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t itemceleste_SetCurrentTime(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, __int128 *, uint64_t);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  v6 = *(_QWORD *)(DerivedStorage + 24);
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v7 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v7)
    return 4294954514;
  v11 = v9;
  v12 = v10;
  return v7(v6, &v11, a3);
}

uint64_t itemceleste_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t itemceleste_CopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 40);
  if (v10)
    return v10(v9, a2, a3, a4, a5);
  else
    return 4294954514;
}

uint64_t itemceleste_MakeReadyForInspection(uint64_t a1, const __CFArray *a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  const __CFString *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFArray *, char *);
  uint64_t result;
  BOOL v10;
  char v11;
  CFRange v12;

  v11 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v12.length = CFArrayGetCount(a2);
    v12.location = 0;
    if (CFArrayContainsValue(a2, v12, CFSTR("InitialSamples")))
    {
      *(_BYTE *)(DerivedStorage + 40) = 1;
      v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("CoreMedia Playback - %s"), DerivedStorage + 42);
      FigResetDisplaySleepTimer(v6);
      if (v6)
        CFRelease(v6);
    }
  }
  v7 = *(_QWORD *)(DerivedStorage + 24);
  v8 = *(uint64_t (**)(uint64_t, const __CFArray *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v8)
  {
    result = v8(v7, a2, &v11);
    LOBYTE(v8) = v11;
    if ((_DWORD)result)
      v10 = 0;
    else
      v10 = v11 == 0;
    if (v10)
    {
      LOBYTE(v8) = 0;
      result = 0;
      goto LABEL_15;
    }
  }
  else
  {
    result = 4294954514;
  }
  if (*(_BYTE *)(DerivedStorage + 40))
    *(_BYTE *)(DerivedStorage + 40) = 0;
LABEL_15:
  *a3 = (_BYTE)v8;
  return result;
}

uint64_t itemceleste_CopyCommonMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemceleste_CopyChapterImageData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemceleste_GetNextThumbnailTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t, uint64_t);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (!v8)
    return 4294954514;
  v12 = v10;
  v13 = v11;
  return v8(v7, &v12, a3, a4);
}

uint64_t itemceleste_SetCurrentTimeWithRange(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *);
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  v10 = *(_QWORD *)(DerivedStorage + 24);
  v17 = *a2;
  v18 = *((_QWORD *)a2 + 2);
  v15 = *a4;
  v16 = *((_QWORD *)a4 + 2);
  v13 = *a5;
  v14 = *((_QWORD *)a5 + 2);
  v11 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 104);
  if (!v11)
    return 4294954514;
  v23 = v17;
  v24 = v18;
  v21 = v15;
  v22 = v16;
  v19 = v13;
  v20 = v14;
  return v11(v10, &v23, a3, &v21, &v19);
}

uint64_t itemceleste_SetTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 112);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemceleste_CopyFormatReader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 120);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t itemceleste_SeekToDateWithID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  v6 = *(_QWORD *)(DerivedStorage + 24);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 128);
  if (v7)
    return v7(v6, a2, a3);
  else
    return 4294954514;
}

uint64_t itemceleste_SetCurrentTimeWithRangeAndID(uint64_t a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t);
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  v12 = *(_QWORD *)(DerivedStorage + 24);
  v19 = *a2;
  v20 = *((_QWORD *)a2 + 2);
  v17 = *a4;
  v18 = *((_QWORD *)a4 + 2);
  v15 = *a5;
  v16 = *((_QWORD *)a5 + 2);
  v13 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 144);
  if (!v13)
    return 4294954514;
  v25 = v19;
  v26 = v20;
  v23 = v17;
  v24 = v18;
  v21 = v15;
  v22 = v16;
  return v13(v12, &v25, a3, &v23, &v21, a6);
}

uint64_t itemceleste_CopyAsset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t itemceleste_SetProperties(uint64_t a1, const __CFDictionary *a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t (*v10)(uint64_t, CFTypeRef, CFTypeRef *);
  uint64_t v11;
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef v15;
  CFTypeRef v16;
  BOOL v17;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v17 = 0;
  v15 = 0;
  v16 = 0;
  v7 = FPSupport_HandlePlaybackItemSetPropertiesAndCopyModification(a1, a2, 0, (uint64_t)itemceleste_handleSetProperty, &v17, &cf, &v16);
  if ((_DWORD)v7)
    goto LABEL_9;
  if (v17)
  {
    v13 = 0;
LABEL_8:
    v7 = FPSupport_CopyCombinedSetPropertiesErrDictionary(v16, v13, a3);
LABEL_9:
    v12 = v7;
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(DerivedStorage + 24);
  if (!v8)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_6;
  }
  v9 = cf;
  v10 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
  if (v10)
  {
    v11 = v10(v8, v9, &v15);
LABEL_6:
    v12 = v11;
    if ((_DWORD)v11)
      goto LABEL_11;
    v13 = v15;
    goto LABEL_8;
  }
  v12 = 4294954514;
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  if (v15)
    CFRelease(v15);
  return v12;
}

uint64_t itemceleste_ExtractAndRetainNextSampleBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
  if (v8)
    return v8(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t itemceleste_SetCurrentTimeWithOptions(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, __int128 *, uint64_t);
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  itemceleste_interruptIfNecessaryForSeeking();
  v6 = *(_QWORD *)(DerivedStorage + 24);
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v7 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 176);
  if (!v7)
    return 4294954514;
  v11 = v9;
  v12 = v10;
  return v7(v6, &v11, a3);
}

void itemceleste_interruptIfNecessaryForSeeking()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, CFTypeRef *);
  CFTypeRef v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf[27];

  cf[26] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = FigCFWeakReferenceTableCopyValue();
  if (v1)
  {
    v2 = v1;
    v3 = CMBaseObjectGetDerivedStorage();
    if (!*(_BYTE *)(v3 + 128) && !*(_BYTE *)(v3 + 161))
    {
      cf[0] = 0;
      v4 = *(_QWORD *)(v3 + 80);
      v5 = *(void (**)(uint64_t, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v5)
      {
        v5(v4, 0, cf);
        v6 = cf[0];
        if (cf[0])
        {
          if (cf[0] != *(CFTypeRef *)(DerivedStorage + 24))
            goto LABEL_12;
          if (dword_1EE2A34A0)
          {
            os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          playerceleste_beginInterruptionInternal(v2, 0);
          v6 = cf[0];
          if (cf[0])
LABEL_12:
            CFRelease(v6);
        }
      }
    }
    playerceleste_deferObjectRelease(v2);
  }
}

uint64_t playerceleste_BeginInterruption(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A34A0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return playerceleste_beginInterruptionInternal(a1, 0);
}

uint64_t playerceleste_EndInterruption(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD);
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A34A0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 121) != 1)
    return 0;
  v4 = DerivedStorage;
  *(_BYTE *)(DerivedStorage + 121) = 0;
  if (*(_BYTE *)(DerivedStorage + 130))
    playerceleste_pauseCurrentlyPlayingMovie(a1, 15);
  v5 = *(_QWORD *)(v4 + 88);
  if (!v5)
    return 4294948075;
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v6)
    return 4294948075;
  v7 = *(uint64_t (**)(uint64_t, _QWORD))(v6 + 88);
  if (!v7)
    return 4294948071;
  result = v7(v5, 0);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v4 + 128))
    {
      if (playerceleste_canCallSetConnectionActive())
        playerceleste_callSetConnectionActive(a1, 0);
      result = 0;
      *(_BYTE *)(v4 + 128) = 0;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t playerceleste_SetConnectionActive(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t DerivedStorage;
  uint64_t v5;

  if (a2)
    return 4294954514;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(DerivedStorage + 128))
    return 0;
  v5 = DerivedStorage;
  if (playerceleste_canCallSetConnectionActive())
    playerceleste_callSetConnectionActive(a1, 0);
  result = 0;
  *(_BYTE *)(v5 + 128) = 0;
  return result;
}

uint64_t playerceleste_DuckVolume(float a1, float a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, float, float);

  v7 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  v8 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v8 && (v9 = *(uint64_t (**)(uint64_t, uint64_t, float, float))(v8 + 8)) != 0)
    return v9(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t playerceleste_SilentMute(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 80);
  v4 = *(_QWORD *)(CMBaseObjectGetVTable() + 32);
  if (v4 && (v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16)) != 0)
    return v5(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCreateHapticPatternDictionaryFromAppleHapticBBuf(uint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v7;

  v5 = (void *)MEMORY[0x19403137C]();
  if (a2 | a3
    && !FigAtomStreamInitWithBBuf()
    && !FigAtomStreamPositionAtFirstAtomWithType())
  {
    FigAtomStreamGetCurrentAtomTypeAndDataLength();
  }
  v7 = FigSignalErrorAt();

  if (!(_DWORD)v7)
  {
    if (a2)
      *(_QWORD *)a2 = 0;
    if (a3)
      *(_QWORD *)a3 = 0;
  }
  objc_autoreleasePoolPop(v5);
  return v7;
}

void *ffs_hapticFilterPatternDictionary(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = (void *)objc_msgSend(a1, "objectForKey:", CFSTR("Pattern"));
  v3 = (void *)objc_msgSend(v2, "indexesOfObjectsPassingTest:", &__block_literal_global_6_1);
  if (objc_msgSend(v3, "count"))
  {
    v1 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithDictionary:", v1);
    v4 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithArray:", v2);
    objc_msgSend(v4, "removeObjectsAtIndexes:", v3);
    objc_msgSend(v1, "setObject:forKey:", v4, CFSTR("Pattern"));
  }
  return v1;
}

uint64_t FigCreateHapticPatternDictionaryFromAppleHapticRawBBuf(OpaqueCMBlockBuffer *a1, _QWORD *a2, _QWORD *a3)
{
  void *v6;
  size_t DataLength;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  id v16;

  v6 = (void *)MEMORY[0x19403137C]();
  v16 = 0;
  if (!a1)
  {
    v8 = 0;
    goto LABEL_8;
  }
  DataLength = CMBlockBufferGetDataLength(a1);
  v8 = malloc_type_malloc(DataLength, 0x3B9DBB41uLL);
  if (!v8)
  {
LABEL_18:
    v13 = FigSignalErrorAt();
LABEL_19:
    if ((_DWORD)v13)
      goto LABEL_12;
    goto LABEL_8;
  }
  v9 = CMBlockBufferCopyDataBytes(a1, 0, DataLength, v8);
  if ((_DWORD)v9)
  {
    v13 = v9;
    FigSignalErrorAt();
    free(v8);
    goto LABEL_12;
  }
  v10 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytesNoCopy:length:deallocator:", v8, DataLength, &__block_literal_global_102);
  v15 = 0;
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v10, 0, &v15);
  if (!v11)
  {
    objc_msgSend(v15, "code");
    v13 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_19;
  }
  v8 = ffs_hapticFilterPatternDictionary(v11);
  if (a3)
  {
    v12 = objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v8, 1, &v15);
    if (v8)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:", v12, 0, &v16, 0);
      if (v16)
        goto LABEL_8;
    }
    else
    {
      objc_msgSend(v15, "code");
    }
    goto LABEL_18;
  }
LABEL_8:
  if (a2)
    *a2 = v8;
  v13 = 0;
  if (a3)
    *a3 = v16;
LABEL_12:
  objc_autoreleasePoolPop(v6);
  return v13;
}

uint64_t __ffs_hapticFilterPatternDictionary_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("Event")), "objectForKeyedSubscript:", CFSTR("EventType")), "isEqualToString:", CFSTR("AudioCustom"));
}

uint64_t OVCBicubicPrescalerScalePixelBuffer(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  OSType PixelFormatType;
  size_t PlaneCount;
  uint64_t v16;
  OSType v17;
  size_t Width;
  size_t Height;
  size_t v20;
  size_t v21;
  double v22;
  double x;
  double y;
  double v25;
  CGFloat v26;
  CFTypeRef v27;
  uint64_t v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  size_t v33;
  _DWORD *v34;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  size_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  unint64_t v42;
  uint64_t ProgramForPixelFormatAndPlane;
  double v44;
  double v45;
  GLfloat v46;
  GLfloat v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  size_t v56;
  size_t v57;
  size_t v58;
  GLsizei v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  GLfloat v69;
  GLfloat v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  CFDictionaryRef v78;
  unint64_t v80;
  unint64_t v81;
  const __CFString *key;
  CFTypeRef v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  uint64_t v94;
  int v95;
  CGFloat v96;
  CGFloat v97;
  CGAffineTransform v98;
  uint64_t v99;
  CGAffineTransform v100;
  CGAffineTransform v101;
  __int128 v102;
  CGSize v103;
  CFDictionaryRef v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  __int128 ptr;
  __int128 v114;
  _QWORD v115[3];
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;
  CGRect v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;

  v115[1] = *MEMORY[0x1E0C80C00];
  v115[0] = 0;
  v104 = 0;
  v102 = 0u;
  v103 = (CGSize)0;
  memset(&v101, 0, sizeof(v101));
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (OVCGetCurrentOpenGLContext() == *(_QWORD *)a1)
        {
          PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
          if (PixelFormatType == CVPixelBufferGetPixelFormatType(a3))
          {
            glDisable(0xBE2u);
            PlaneCount = CVPixelBufferGetPlaneCount(a2);
            if (PlaneCount <= 1)
              v16 = 1;
            else
              v16 = PlaneCount;
            v94 = v16;
            v17 = CVPixelBufferGetPixelFormatType(a2);
            Width = CVPixelBufferGetWidth(a2);
            Height = CVPixelBufferGetHeight(a2);
            v20 = CVPixelBufferGetWidth(a3);
            v21 = CVPixelBufferGetHeight(a3);
            v130.size.width = (double)Width;
            v22 = (double)Height;
            v130.origin.x = 0.0;
            v130.origin.y = 0.0;
            v116.origin.x = a4;
            v116.origin.y = a5;
            v116.size.width = a6;
            v116.size.height = a7;
            v90 = (double)Width;
            v130.size.height = (double)Height;
            v117 = CGRectIntersection(v116, v130);
            x = v117.origin.x;
            y = v117.origin.y;
            v25 = v117.size.width;
            v26 = v117.size.height;
            key = (const __CFString *)*MEMORY[0x1E0CA8D50];
            v27 = CVBufferCopyAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
            bvc_getCleanApertureRect(v27, Width, Height, (double *)&v102);
            if ((_DWORD)v28)
            {
LABEL_32:
              v77 = v28;
              if (!v27)
                return v77;
            }
            else
            {
              v95 = v17;
              v83 = v27;
              *(double *)&v102 = *(double *)&v102 - x;
              v118.origin.x = *(double *)&v102;
              *((double *)&v102 + 1) = *((double *)&v102 + 1) - y;
              v118.origin.y = *((double *)&v102 + 1);
              v118.size = v103;
              v131.origin.x = 0.0;
              v131.origin.y = 0.0;
              v131.size.width = v25;
              v131.size.height = v26;
              v119 = CGRectIntersection(v118, v131);
              v29 = v119.origin.x;
              v30 = v119.origin.y;
              v119.origin.y = v26;
              v31 = v119.size.width;
              v32 = v119.size.height;
              *(CGFloat *)&v102 = v119.origin.x;
              *((CGFloat *)&v102 + 1) = v30;
              v103.width = v119.size.width;
              v103.height = v119.size.height;
              v80 = v21;
              v81 = v20;
              v96 = v119.origin.y;
              v97 = v25;
              v85 = (double)v20;
              v84 = (double)v21;
              CGAffineTransformMakeScale(&v101, (double)v20 / v25, (double)v21 / v119.origin.y);
              v100 = v101;
              v120.origin.x = v29;
              v120.origin.y = v30;
              v120.size.width = v31;
              v120.size.height = v32;
              v121 = CGRectApplyAffineTransform(v120, &v100);
              v88 = v121.origin.y;
              v89 = v121.origin.x;
              v86 = v121.size.width;
              v87 = v121.size.height;
              v33 = 0;
              v34 = v115;
              v92 = y;
              v93 = x;
              while (1)
              {
                v99 = 0;
                WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(a2, v33);
                HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(a2, v33);
                v37 = OVCCVPixelBufferGetWidthOfPlane(a3, v33);
                OVCCVPixelBufferGetHeightOfPlane(a3, v33);
                CGAffineTransformMakeScale(&v100, (double)WidthOfPlane / v90, (double)HeightOfPlane / v22);
                v98 = v100;
                v122.origin.x = x;
                v122.origin.y = y;
                v122.size.height = v96;
                v122.size.width = v97;
                v123 = CGRectApplyAffineTransform(v122, &v98);
                v38 = v123.origin.x;
                v39 = v123.size.width;
                v124 = CGRectIntegral(v123);
                v40 = v124.origin.y;
                v41 = v124.size.height;
                v42 = (unint64_t)v124.size.height;
                ProgramForPixelFormatAndPlane = OVCRegisterTextureAsRenderTargetForAttributes(*(unint64_t **)(a1 + 16), v95, v37, (unint64_t)v124.size.height, v33, v34);
                if ((_DWORD)ProgramForPixelFormatAndPlane)
                  break;
                ProgramForPixelFormatAndPlane = ovcbp_getProgramForPixelFormatAndPlane(a1, v95, v33, 0, &v99);
                if ((_DWORD)ProgramForPixelFormatAndPlane)
                  break;
                glUseProgram(*(_DWORD *)v99);
                glDisable(0xC11u);
                glViewport(0, 0, v37, v42);
                glClearColor(0.0, 0.0, 0.0, 0.0);
                glClear(0x4000u);
                if (glCheckFramebufferStatus(0x8D40u) != 36053)
                {
                  ProgramForPixelFormatAndPlane = FigSignalErrorAt();
                  break;
                }
                glActiveTexture(0x84C0u);
                glUniform1i(*(_DWORD *)(v99 + 12), 0);
                ProgramForPixelFormatAndPlane = OVCRegisterPixelBufferAsTexture(*(void **)a1, *(_QWORD *)(a1 + 24), a2, v33, 1);
                if ((_DWORD)ProgramForPixelFormatAndPlane)
                  break;
                v44 = 1.0 / (double)WidthOfPlane;
                v45 = 1.0 / (double)HeightOfPlane;
                glTexParameteri(0xDE1u, 0x2800u, 9728);
                glTexParameteri(0xDE1u, 0x2801u, 9728);
                glTexParameteri(0xDE1u, 0x2802u, 33071);
                glTexParameteri(0xDE1u, 0x2803u, 33071);
                glUniform2f(*(_DWORD *)(v99 + 4), (float)WidthOfPlane, (float)HeightOfPlane);
                v46 = v44;
                v47 = v45;
                glUniform2f(*(_DWORD *)(v99 + 8), v46, v47);
                glActiveTexture(0x84C1u);
                glUniform1i(*(_DWORD *)(v99 + 16), 1);
                glBindTexture(0xDE1u, *(_DWORD *)(a1 + 40));
                ptr = xmmword_1933005B0;
                v114 = xmmword_1933005C0;
                v48 = v38;
                v49 = v40 + v41;
                v50 = v40;
                v51 = v38 + v39;
                v52 = v44 * v48;
                v53 = v45 * v49;
                v105 = v52;
                v106 = v53;
                v54 = v45 * v50;
                v107 = v52;
                v108 = v54;
                v55 = v44 * v51;
                v109 = v55;
                v110 = v54;
                v111 = v55;
                v112 = v53;
                glVertexAttribPointer(*(_DWORD *)(v99 + 20), 2, 0x1406u, 0, 0, &ptr);
                glEnableVertexAttribArray(*(_DWORD *)(v99 + 20));
                glVertexAttribPointer(*(_DWORD *)(v99 + 24), 2, 0x1406u, 0, 0, &v105);
                glEnableVertexAttribArray(*(_DWORD *)(v99 + 24));
                glDrawArrays(6u, 0, 4);
                ++v33;
                ++v34;
                y = v92;
                x = v93;
                if (v94 == v33)
                {
                  v56 = 0;
                  v27 = v83;
                  while (1)
                  {
                    v99 = 0;
                    v57 = OVCCVPixelBufferGetWidthOfPlane(a3, v56);
                    v58 = OVCCVPixelBufferGetHeightOfPlane(a3, v56);
                    v59 = v58;
                    CGAffineTransformMakeScale(&v100, (double)v57 / v85, (double)v58 / v84);
                    v98 = v100;
                    v125.origin.x = x;
                    v125.origin.y = y;
                    v125.size.height = v96;
                    v125.size.width = v97;
                    v126 = CGRectApplyAffineTransform(v125, &v98);
                    v60 = v126.origin.y;
                    v91 = v126.size.height;
                    v127 = CGRectIntegral(v126);
                    v61 = v127.origin.y;
                    v62 = v127.size.height;
                    v98 = v100;
                    v127.origin.y = v88;
                    v127.origin.x = v89;
                    v127.size.width = v86;
                    v127.size.height = v87;
                    v128 = CGRectApplyAffineTransform(v127, &v98);
                    v129 = CGRectIntegral(v128);
                    v63 = v129.origin.x;
                    v64 = v129.origin.y;
                    v65 = v129.size.width;
                    v66 = v129.size.height;
                    v28 = OVCRegisterPixelBufferAsRenderTarget(*(void **)a1, *(_QWORD *)(a1 + 24), a3, v56);
                    if ((_DWORD)v28)
                      goto LABEL_32;
                    v28 = ovcbp_getProgramForPixelFormatAndPlane(a1, v95, v56, 1, &v99);
                    if ((_DWORD)v28)
                      goto LABEL_32;
                    glUseProgram(*(_DWORD *)v99);
                    glViewport(0, 0, v57, v59);
                    glEnable(0xC11u);
                    glScissor(0, 0, v57, v59);
                    glClearColor(0.0, 0.0, 0.0, 0.0);
                    glClear(0x4000u);
                    glScissor((int)v63, (int)v64, (int)v65, (int)v66);
                    if (glCheckFramebufferStatus(0x8D40u) != 36053)
                    {
                      v28 = FigSignalErrorAt();
                      goto LABEL_32;
                    }
                    v67 = 1.0 / (double)v57;
                    v68 = 1.0 / (double)(unint64_t)v62;
                    glActiveTexture(0x84C0u);
                    glUniform1i(*(_DWORD *)(v99 + 12), 0);
                    glBindTexture(0xDE1u, *((_DWORD *)v115 + v56));
                    glTexParameteri(0xDE1u, 0x2800u, 9728);
                    glTexParameteri(0xDE1u, 0x2801u, 9728);
                    glTexParameteri(0xDE1u, 0x2802u, 33071);
                    glTexParameteri(0xDE1u, 0x2803u, 33071);
                    glUniform2f(*(_DWORD *)(v99 + 4), (float)v57, (float)(unint64_t)v62);
                    v69 = v67;
                    v70 = v68;
                    glUniform2f(*(_DWORD *)(v99 + 8), v69, v70);
                    glActiveTexture(0x84C1u);
                    glUniform1i(*(_DWORD *)(v99 + 16), 1);
                    glBindTexture(0xDE1u, *(_DWORD *)(a1 + 40));
                    ptr = xmmword_1933005B0;
                    v114 = xmmword_1933005C0;
                    v71 = v91 + v60 - v61;
                    v72 = v60 - v61;
                    v73 = v67 * 0.0;
                    v74 = v68 * v71;
                    v105 = v73;
                    v106 = v74;
                    v75 = v68 * v72;
                    v107 = v73;
                    v108 = v75;
                    v76 = v67 * (float)v57;
                    v109 = v76;
                    v110 = v75;
                    v111 = v76;
                    v112 = v74;
                    glVertexAttribPointer(*(_DWORD *)(v99 + 20), 2, 0x1406u, 0, 0, &ptr);
                    glEnableVertexAttribArray(*(_DWORD *)(v99 + 20));
                    glVertexAttribPointer(*(_DWORD *)(v99 + 24), 2, 0x1406u, 0, 0, &v105);
                    glEnableVertexAttribArray(*(_DWORD *)(v99 + 24));
                    glDrawArrays(6u, 0, 4);
                    ++v56;
                    y = v92;
                    x = v93;
                    if (v94 == v56)
                    {
                      glFlush();
                      CVBufferPropagateAttachments(a2, a3);
                      v77 = OVCCreateCleanApertureDictionaryFromRect(v81, v80, &v104, v89, v88, v86, v87);
                      v78 = v104;
                      if (!(_DWORD)v77)
                      {
                        CVBufferSetAttachment(a3, key, v104, kCVAttachmentMode_ShouldNotPropagate);
                        v78 = v104;
                      }
                      if (!v78)
                        goto LABEL_28;
                      CFRelease(v78);
                      if (v83)
                        goto LABEL_29;
                      return v77;
                    }
                  }
                }
              }
              v77 = ProgramForPixelFormatAndPlane;
              v27 = v83;
LABEL_28:
              if (!v27)
                return v77;
            }
LABEL_29:
            CFRelease(v27);
            return v77;
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t ovcbp_getProgramForPixelFormatAndPlane(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t v5;

  if (!a5 || !a1)
    return FigSignalErrorAt();
  if (a2 == 875704422 || a2 == 875704438)
  {
    if (a3 == 1)
    {
      if (a4 == 1)
      {
        v5 = a1 + 156;
        goto LABEL_23;
      }
      if (!a4)
      {
        v5 = a1 + 184;
        goto LABEL_23;
      }
    }
    else if (!a3)
    {
      if (a4 == 1)
      {
        v5 = a1 + 100;
        goto LABEL_23;
      }
      if (!a4)
      {
        v5 = a1 + 128;
        goto LABEL_23;
      }
    }
    return FigSignalErrorAt();
  }
  if (a2 != 1111970369 || a3)
    return FigSignalErrorAt();
  if (a4 == 1)
  {
    v5 = a1 + 44;
    goto LABEL_23;
  }
  if (a4)
    return FigSignalErrorAt();
  v5 = a1 + 72;
LABEL_23:
  *a5 = v5;
  return 0;
}

void OVCBicubicPrescalerDestroy(char *a1)
{
  const void *v2;
  uint64_t i;

  if (a1)
  {
    if (a1[8])
    {
      FigOVCGLObjectCacheWrapperInvalidate(*((_QWORD *)a1 + 3));
      OVCGLObjectCacheDestroy(*((void **)a1 + 2));
    }
    *((_QWORD *)a1 + 2) = 0;
    v2 = (const void *)*((_QWORD *)a1 + 3);
    if (v2)
    {
      CFRelease(v2);
      *((_QWORD *)a1 + 3) = 0;
    }
    OVCGLObjectCacheDestroy(*((void **)a1 + 4));
    *((_QWORD *)a1 + 4) = 0;
    if (OVCGetCurrentOpenGLContext() == *(_QWORD *)a1)
    {
      glDeleteTextures(1, (const GLuint *)a1 + 10);
      *((_DWORD *)a1 + 10) = 0;
      for (i = 44; i != 212; i += 28)
      {
        glDeleteProgram(*(_DWORD *)&a1[i]);
        *(_DWORD *)&a1[i] = 0;
      }
    }
    free(a1);
  }
}

uint64_t OVCBicubicPrescalerCreate(const void *a1, uint64_t a2, const void *a3, _QWORD *a4)
{
  CFTypeID TypeID;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  _DWORD *v15;
  _DWORD *pixels;
  uint64_t v17;
  float v18;
  float v19;
  float32x4_t v20;
  int16x8_t v21;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  GLuint textures[2];
  GLuint v28;
  GLuint shader[2];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(a1))
    {
      v13 = FigSignalErrorAt();
      goto LABEL_32;
    }
  }
  v9 = malloc_type_calloc(1uLL, 0xD8uLL, 0x10E00405B1E1B7CuLL);
  if (!v9)
    goto LABEL_34;
  v10 = OVCGetCurrentOpenGLContext();
  *(_QWORD *)v9 = v10;
  if (!v10)
    goto LABEL_34;
  if (a2)
  {
    if (a3)
    {
      *((_QWORD *)v9 + 2) = a2;
      *((_QWORD *)v9 + 3) = CFRetain(a3);
      goto LABEL_12;
    }
LABEL_34:
    v11 = FigSignalErrorAt();
    goto LABEL_36;
  }
  if (a3)
    goto LABEL_34;
  v11 = OVCGLObjectCacheCreate(40, (_QWORD *)v9 + 2);
  if ((_DWORD)v11)
    goto LABEL_36;
  v11 = FigOVCGLObjectCacheWrapperCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], *((_QWORD *)v9 + 2), (_QWORD *)v9 + 3);
  if ((_DWORD)v11)
    goto LABEL_36;
  *((_BYTE *)v9 + 8) = 1;
LABEL_12:
  v11 = OVCGLObjectCacheCreate(20, (_QWORD *)v9 + 4);
  if ((_DWORD)v11)
    goto LABEL_36;
  *(_QWORD *)shader = 0;
  v28 = 0;
  *(_QWORD *)textures = 0;
  v12 = OVCCreateShader("uniform vec2 tex_dim; \n"
          " \tuniform vec2 tex_dim_rcp;\n"
          " \tattribute vec2 position; \n"
          " \tattribute vec2 texcoord; \n"
          " \t\n"
          " \tvarying vec2 tc_pix[4]; \n"
          " \tvarying highp vec2 tc_kernel; \n"
          " \tvoid main() \n"
          " \t{ \n"
          " \t\tgl_Position = vec4(position, 0.0, 1.0); \n"
          " \t\tfloat d; \n"
          " \t\t\n"
          "tc_pix[0] = texcoord + tex_dim_rcp * vec2(0.0, -1.0); \n"
          " \t\ttc_pix[1] = texcoord; \n"
          " \t\ttc_pix[2] = texcoord + tex_dim_rcp * vec2(0.0, 1.0); \n"
          " \t\ttc_pix[3] = texcoord + tex_dim_rcp * vec2(0.0, 2.0); \n"
          " \t\t\n"
          " \t\td = texcoord.y * tex_dim.y; \n"
          "tc_kernel = vec2(d, 0.0); \n"
          " \t}",
          0x8B31u,
          shader);
  if (!(_DWORD)v12)
  {
    v12 = OVCCreateShader("uniform vec2 tex_dim; \n"
            " \tuniform vec2 tex_dim_rcp;\n"
            " \tattribute vec2 position; \n"
            " \tattribute vec2 texcoord; \n"
            " \t\n"
            " \tvarying vec2 tc_pix[4]; \n"
            " \tvarying highp vec2 tc_kernel; \n"
            " \tvoid main() \n"
            " \t{ \n"
            " \t\tgl_Position = vec4(position, 0.0, 1.0); \n"
            " \t\tfloat d; \n"
            " \t\t\n"
            "tc_pix[0] = texcoord + tex_dim_rcp * vec2(-1.0, 0.0); \n"
            " \t\ttc_pix[1] = texcoord; \n"
            " \t\ttc_pix[2] = texcoord + tex_dim_rcp * vec2(1.0, 0.0); \n"
            " \t\ttc_pix[3] = texcoord + tex_dim_rcp * vec2(2.0, 0.0); \n"
            " \t\t\n"
            " \t\td = texcoord.x * tex_dim.x; \n"
            "tc_kernel = vec2(d, 0.0); \n"
            " \t}",
            0x8B31u,
            &shader[1]);
    if (!(_DWORD)v12)
    {
      v12 = OVCCreateShader("precision mediump float; \n"
              "uniform sampler2D sampler_pixels;\n"
              " \tuniform sampler2D sampler_kernel; \n"
              " \tvarying vec2 tc_pix[4]; \n"
              " \tvarying highp vec2 tc_kernel; \n"
              " \t\n"
              " \tvoid main() \n"
              " \t{ \n"
              " \t\tvec4 t[4], w, s; \n"
              " \t\t\n"
              " \t\tt[0] = texture2D(sampler_pixels, tc_pix[0]); \n"
              " \t\tt[1] = texture2D(sampler_pixels, tc_pix[1]); \n"
              " \t\tt[2] = texture2D(sampler_pixels, tc_pix[2]); \n"
              " \t\tt[3] = texture2D(sampler_pixels, tc_pix[3]); \n"
              " \t\t\n"
              " \t\tw = texture2D(sampler_kernel, tc_kernel); \n"
              " \t\t\n"
              " \t\ts  = t[0] * w.xxxx; \n"
              " \t\ts += t[1] * w.yyyy; \n"
              " \t\ts += t[2] * w.zzzz; \n"
              " \t\ts += t[3] * w.wwww; \n"
              " \t\t\n"
              " \t\tgl_FragColor = s; \n"
              " \t}",
              0x8B30u,
              textures);
      if (!(_DWORD)v12)
      {
        v12 = OVCCreateShader("precision mediump float; \n"
                "uniform sampler2D sampler_pixels;\n"
                " \tuniform sampler2D sampler_kernel; \n"
                " \tvarying vec2 tc_pix[4]; \n"
                " \tvarying highp vec2 tc_kernel; \n"
                " \t\n"
                " \tvoid main() \n"
                " \t{ \n"
                " \t\tfloat s; \n"
                " \t\tvec4 w, t; \n"
                " \t\t\n"
                " \t\tt[0] = texture2D(sampler_pixels, tc_pix[0]).x; \n"
                " \t\tt[1] = texture2D(sampler_pixels, tc_pix[1]).x; \n"
                " \t\tt[2] = texture2D(sampler_pixels, tc_pix[2]).x; \n"
                " \t\tt[3] = texture2D(sampler_pixels, tc_pix[3]).x; \n"
                " \t\t\n"
                " \t\tw = texture2D(sampler_kernel, tc_kernel); \n"
                " \t\t\n"
                " \t\ts = dot( t, w); \n"
                " \t\t\n"
                " \t\tgl_FragColor.x = s; \n"
                " \t}",
                0x8B30u,
                &textures[1]);
        if (!(_DWORD)v12)
        {
          v12 = OVCCreateShader("precision mediump float; \n"
                  "uniform sampler2D sampler_pixels;\n"
                  " \tuniform sampler2D sampler_kernel; \n"
                  " \tvarying vec2 tc_pix[4]; \n"
                  " \tvarying highp vec2 tc_kernel; \n"
                  " \t\n"
                  " \tvoid main() \n"
                  " \t{ \n"
                  " \t\tvec2 t[4], s; \n"
                  " \t\tvec4 w; \n"
                  " \t\t\n"
                  " \t\tt[0] = texture2D(sampler_pixels, tc_pix[0]).xy; \n"
                  " \t\tt[1] = texture2D(sampler_pixels, tc_pix[1]).xy; \n"
                  " \t\tt[2] = texture2D(sampler_pixels, tc_pix[2]).xy; \n"
                  " \t\tt[3] = texture2D(sampler_pixels, tc_pix[3]).xy; \n"
                  " \t\t\n"
                  " \t\tw = texture2D(sampler_kernel, tc_kernel); \n"
                  " \t\t\n"
                  " \t\ts  = t[0] * w.xx; \n"
                  " \t\ts += t[1] * w.yy; \n"
                  " \t\ts += t[2] * w.zz; \n"
                  " \t\ts += t[3] * w.ww; \n"
                  " \t\t\n"
                  " \t\tgl_FragColor.xy = s; \n"
                  " \t}",
                  0x8B30u,
                  &v28);
          if (!(_DWORD)v12)
          {
            v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 11, shader[0], textures[0]);
            if (!(_DWORD)v12)
            {
              v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 18, shader[1], textures[0]);
              if (!(_DWORD)v12)
              {
                v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 25, shader[0], textures[1]);
                if (!(_DWORD)v12)
                {
                  v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 32, shader[1], textures[1]);
                  if (!(_DWORD)v12)
                  {
                    v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 39, shader[0], v28);
                    if (!(_DWORD)v12)
                      v12 = ovcbp_createAndSetupProgram((GLuint *)v9 + 46, shader[1], v28);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v13 = v12;
  glDeleteShader(shader[0]);
  glDeleteShader(shader[1]);
  for (i = 0; i != 3; ++i)
    glDeleteShader(textures[i]);
  if (!(_DWORD)v13)
  {
    textures[0] = 0;
    v15 = malloc_type_malloc(0x400uLL, 0x716A2680uLL);
    if (v15)
    {
      pixels = v15;
      v17 = 0;
      v23 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        v18 = (float)(int)v17 / 255.0;
        v26 = ovcbp_polynomial(v18 + 1.0);
        v25 = ovcbp_polynomial(v18);
        v24 = ovcbp_polynomial(1.0 - v18);
        v19 = ovcbp_polynomial(2.0 - v18);
        v20.i64[0] = __PAIR64__(LODWORD(v25), LODWORD(v26));
        v20.i64[1] = __PAIR64__(LODWORD(v19), LODWORD(v24));
        v21 = (int16x8_t)vcvtq_s32_f32(vrndaq_f32(vmulq_f32(v20, v23)));
        *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
        pixels[v17++] = vmovn_s16(v21).u32[0];
      }
      while (v17 != 256);
      glGenTextures(1, textures);
      glBindTexture(0xDE1u, textures[0]);
      glTexParameteri(0xDE1u, 0x2802u, 10497);
      glTexParameteri(0xDE1u, 0x2803u, 33071);
      glTexParameteri(0xDE1u, 0x2800u, 9728);
      glTexParameteri(0xDE1u, 0x2801u, 9728);
      glTexImage2D(0xDE1u, 0, 6408, 256, 1, 0, 0x1908u, 0x1401u, pixels);
      *((_DWORD *)v9 + 10) = textures[0];
      free(pixels);
      goto LABEL_31;
    }
    v11 = FigSignalErrorAt();
    if (!(_DWORD)v11)
    {
LABEL_31:
      v13 = 0;
      *a4 = v9;
LABEL_32:
      v9 = 0;
      goto LABEL_33;
    }
LABEL_36:
    v13 = v11;
  }
LABEL_33:
  OVCBicubicPrescalerDestroy((char *)v9);
  return v13;
}

uint64_t ovcbp_createAndSetupProgram(GLuint *a1, GLuint a2, GLuint a3)
{
  uint64_t v4;
  int UniformLocation;
  int v6;
  int AttribLocation;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v4 = OVCCreateGLProgram(a2, a3, a1);
  if ((_DWORD)v4)
  {
    v11 = v4;
    if (!a1)
      return v11;
    goto LABEL_11;
  }
  UniformLocation = glGetUniformLocation(*a1, "tex_dim");
  if (UniformLocation < 0)
    goto LABEL_10;
  a1[1] = UniformLocation;
  v6 = glGetUniformLocation(*a1, "tex_dim_rcp");
  if (v6 < 0)
    goto LABEL_10;
  a1[2] = v6;
  AttribLocation = glGetAttribLocation(*a1, "position");
  if (AttribLocation < 0
    || (a1[5] = AttribLocation, v8 = glGetAttribLocation(*a1, "texcoord"), v8 < 0)
    || (a1[6] = v8, v9 = glGetUniformLocation(*a1, "sampler_pixels"), v9 < 0)
    || (a1[3] = v9, v10 = glGetUniformLocation(*a1, "sampler_kernel"), v10 < 0))
  {
LABEL_10:
    v11 = FigSignalErrorAt();
LABEL_11:
    glDeleteProgram(*a1);
    return v11;
  }
  v11 = 0;
  a1[4] = v10;
  return v11;
}

float ovcbp_polynomial(float a1)
{
  float v1;
  float v2;
  float v3;
  double v4;
  double v5;
  float result;

  v1 = fabsf(a1);
  v2 = a1 * a1;
  v3 = (float)(a1 * a1) * v1;
  if (v1 >= 1.0)
  {
    result = 0.0;
    if (v1 >= 2.0)
      return result;
    v4 = v2 * 6.0 - v3 + v1 * -12.0;
    v5 = 8.0;
  }
  else
  {
    v4 = v2 * -6.0 + v3 * 3.0;
    v5 = 4.0;
  }
  return (v4 + v5) * 0.1666666;
}

BOOL OVCIsAffineTransformInvertible(double *a1)
{
  _BOOL8 result;
  double v3;
  double v4;
  double v5;

  result = 0;
  if (fabs(*a1) != INFINITY)
  {
    result = 0;
    v3 = a1[1];
    if (fabs(v3) != INFINITY)
    {
      result = 0;
      v4 = a1[2];
      if (fabs(v4) != INFINITY)
      {
        result = 0;
        v5 = a1[3];
        if (fabs(v5) != INFINITY)
        {
          result = 0;
          if (fabs(a1[4]) != INFINITY)
          {
            result = 0;
            if (fabs(a1[5]) != INFINITY)
              return fabs(*a1 * v5 - v3 * v4) >= 1.0e-10;
          }
        }
      }
    }
  }
  return result;
}

size_t OVCCVPixelBufferGetWidthOfPlane(__CVBuffer *a1, size_t a2)
{
  if (CVPixelBufferIsPlanar(a1))
    return CVPixelBufferGetWidthOfPlane(a1, a2);
  if (a2)
    return 0;
  return CVPixelBufferGetWidth(a1);
}

size_t OVCCVPixelBufferGetHeightOfPlane(__CVBuffer *a1, size_t a2)
{
  if (CVPixelBufferIsPlanar(a1))
    return CVPixelBufferGetHeightOfPlane(a1, a2);
  if (a2)
    return 0;
  return CVPixelBufferGetHeight(a1);
}

uint64_t OVCCreateCleanApertureDictionaryFromRect(unint64_t a1, unint64_t a2, CFDictionaryRef *a3, double a4, double a5, double a6, double a7)
{
  const __CFAllocator *v8;
  CFDictionaryRef v9;
  uint64_t v10;
  uint64_t i;
  const void *v12;
  double v14;
  double v15;
  double v16;
  double valuePtr;
  void *keys[2];
  __int128 v19;
  void *values[2];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0.0;
  valuePtr = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  *(_OWORD *)values = 0u;
  v21 = 0u;
  *(_OWORD *)keys = 0u;
  v19 = 0u;
  if (!a3)
    goto LABEL_13;
  v16 = a5 + (a7 - (double)a2) * 0.5;
  valuePtr = a4 + (a6 - (double)a1) * 0.5;
  v14 = a7;
  v15 = a6;
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  if (!values[0])
    goto LABEL_13;
  keys[0] = *(void **)MEMORY[0x1E0CA8D48];
  values[1] = CFNumberCreate(v8, kCFNumberDoubleType, &v16);
  if (!values[1])
    goto LABEL_13;
  keys[1] = *(void **)MEMORY[0x1E0CA8D58];
  *(_QWORD *)&v21 = CFNumberCreate(v8, kCFNumberDoubleType, &v15);
  if ((_QWORD)v21
    && (*(_QWORD *)&v19 = *MEMORY[0x1E0CA8D60],
        (*((_QWORD *)&v21 + 1) = CFNumberCreate(v8, kCFNumberDoubleType, &v14)) != 0)
    && (*((_QWORD *)&v19 + 1) = *MEMORY[0x1E0CA8D40],
        (v9 = CFDictionaryCreate(v8, (const void **)keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0))
  {
    v10 = 0;
    *a3 = v9;
  }
  else
  {
LABEL_13:
    v10 = FigSignalErrorAt();
  }
  for (i = 0; i != 4; ++i)
  {
    v12 = values[i];
    if (v12)
      CFRelease(v12);
  }
  return v10;
}

uint64_t OVCCreateOpenGLContext(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return FigSignalErrorAt();
  v2 = (void *)MEMORY[0x19403137C]();
  v3 = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObject:forKey:", *MEMORY[0x1E0C9AE50], *MEMORY[0x1E0CD0D20]);
  if (v3 && (v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0CD0958]), "initWithAPI:properties:", 2, v3)) != 0)
  {
    v5 = 0;
    *a1 = v4;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v2);
  return v5;
}

void OVCDestroyOpenGLContext(void *a1)
{
  void *v2;

  if (a1)
  {
    v2 = (void *)MEMORY[0x19403137C]();

    objc_autoreleasePoolPop(v2);
  }
}

uint64_t OVCSetCurrentOpenGLContext(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)MEMORY[0x19403137C]();
  if ((objc_msgSend(MEMORY[0x1E0CD0958], "setCurrentContext:", a1) & 1) != 0)
    v3 = 0;
  else
    v3 = FigSignalErrorAt();
  objc_autoreleasePoolPop(v2);
  return v3;
}

uint64_t OVCSetOpenGLContextPriority(void *a1, int a2)
{
  void *v4;
  int v5;
  uint64_t v6;
  int v8;

  v8 = 0;
  v4 = (void *)MEMORY[0x19403137C]();
  if (a2 == 2)
  {
    v8 = 0;
  }
  else
  {
    if (a2 == 1)
    {
      v5 = 1;
    }
    else
    {
      if (a2)
      {
        v6 = FigSignalErrorAt();
        goto LABEL_10;
      }
      v5 = 2;
    }
    v8 = v5;
  }
  objc_msgSend(a1, "setParameter:to:", 608, &v8);
  v6 = 0;
LABEL_10:
  objc_autoreleasePoolPop(v4);
  return v6;
}

uint64_t OVCGetCurrentOpenGLContext()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MEMORY[0x19403137C]();
  v1 = objc_msgSend(MEMORY[0x1E0CD0958], "currentContext");
  objc_autoreleasePoolPop(v0);
  return v1;
}

uint64_t OVCCreateShader(GLchar *a1, GLenum type, GLuint *a3)
{
  GLuint Shader;
  GLuint v5;
  uint64_t v6;
  uint64_t v7;
  GLint params;
  GLchar *string;

  string = a1;
  params = 0;
  Shader = glCreateShader(type);
  v5 = Shader;
  if (Shader)
  {
    glShaderSource(Shader, 1, (const GLchar *const *)&string, 0);
    glCompileShader(v5);
    glGetShaderiv(v5, 0x8B81u, &params);
    if (params == 1 || (v6 = FigSignalErrorAt(), !(_DWORD)v6))
    {
      v7 = 0;
      *a3 = v5;
      v5 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  v7 = v6;
LABEL_6:
  glDeleteShader(v5);
  return v7;
}

uint64_t OVCCreateGLProgram(GLuint a1, GLuint a2, GLuint *a3)
{
  GLuint Program;
  uint64_t v7;
  uint64_t v8;
  GLint params;

  params = 0;
  Program = glCreateProgram();
  glAttachShader(Program, a1);
  glAttachShader(Program, a2);
  glLinkProgram(Program);
  glGetProgramiv(Program, 0x8B82u, &params);
  if (params != 1 && (v7 = FigSignalErrorAt(), (_DWORD)v7))
  {
    v8 = v7;
  }
  else
  {
    v8 = 0;
    *a3 = Program;
    Program = 0;
  }
  glDeleteProgram(Program);
  return v8;
}

uint64_t OVCTexImagePixelBuffer(void *a1, __CVBuffer *a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, int a9)
{
  void *v17;
  IOSurfaceRef IOSurface;
  char v19;
  uint64_t v20;
  uint64_t v22;

  v17 = (void *)MEMORY[0x19403137C]();
  if (!a2
    || (IOSurface = CVPixelBufferGetIOSurface(a2)) == 0
    || (BYTE4(v22) = 0,
        LODWORD(v22) = a9,
        v19 = objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", IOSurface, a3, a4, a5, a6, a7, a8, v22), v20 = 0, (v19 & 1) == 0))
  {
    v20 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v17);
  return v20;
}

uint64_t OVCRegisterPixelBufferAsTexture(void *a1, uint64_t a2, CVPixelBufferRef pixelBuffer, size_t a4, int a5)
{
  OSType PixelFormatType;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  BOOL v16;
  GLuint texture;

  v16 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(pixelBuffer, a4);
  HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(pixelBuffer, a4);
  if (PixelFormatType != 875704422 && PixelFormatType != 875704438)
  {
    if (PixelFormatType == 1111970369 && !a4)
    {
      v13 = 32993;
      v14 = 6408;
      goto LABEL_14;
    }
    return FigSignalErrorAt();
  }
  if (a4)
  {
    if (a4 != 1)
      return FigSignalErrorAt();
    if (a5)
    {
      if (a5 != 1)
        return FigSignalErrorAt();
      v14 = 33319;
      v13 = 33319;
    }
    else
    {
      v14 = 6410;
      v13 = 6410;
    }
  }
  else
  {
    v14 = 6409;
    v13 = 6409;
  }
LABEL_14:
  texture = 0;
  result = FigOVCGLObjectCacheWrapperGetObjectForPixelBufferAndPlane(a2, pixelBuffer, a4, 3553, &texture, &v16);
  if (!(_DWORD)result)
  {
    glBindTexture(0xDE1u, texture);
    if (v16)
      return OVCTexImagePixelBuffer(a1, pixelBuffer, 0xDE1u, v14, WidthOfPlane, HeightOfPlane, v13, 0x1401u, a4);
    else
      return 0;
  }
  return result;
}

uint64_t OVCRegisterTextureAsRenderTargetForAttributes(unint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result;
  __int16 v13;
  GLuint framebuffer;
  GLuint texture[2];
  uint64_t v16;

  *(_QWORD *)texture = 0;
  v16 = 0;
  framebuffer = 0;
  v13 = 0;
  result = ovc_getTextureAttributesForRendering(a2, a5, (int *)&v16 + 1, (int *)&v16, &texture[1]);
  if (!(_DWORD)result)
  {
    result = OVCGLObjectCacheGetObjectForAttributesAndPlane(a1, a2, a3, a4, a5, 3553, texture, (BOOL *)&v13 + 1);
    if (!(_DWORD)result)
    {
      glBindTexture(0xDE1u, texture[0]);
      if (HIBYTE(v13))
      {
        glTexParameteri(0xDE1u, 0x2802u, 33071);
        glTexParameteri(0xDE1u, 0x2803u, 33071);
        glTexParameteri(0xDE1u, 0x2800u, 9728);
        glTexParameteri(0xDE1u, 0x2801u, 9728);
        glTexImage2D(0xDE1u, 0, SHIDWORD(v16), a3, a4, 0, v16, texture[1], 0);
      }
      result = OVCGLObjectCacheGetObjectForAttributesAndPlane(a1, a2, a3, a4, a5, 36160, &framebuffer, (BOOL *)&v13);
      if (!(_DWORD)result)
      {
        glBindFramebuffer(0x8D40u, framebuffer);
        if (HIBYTE(v13) | v13)
          glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, texture[0], 0);
        result = 0;
        if (a6)
          *a6 = texture[0];
      }
    }
  }
  return result;
}

uint64_t ovc_getTextureAttributesForRendering(int a1, uint64_t a2, int *a3, int *a4, _DWORD *a5)
{
  int v6;
  int v7;

  if (a1 != 875704422 && a1 != 875704438)
  {
    if (a1 != 1111970369 || a2)
      return FigSignalErrorAt();
    v7 = 32993;
    v6 = 6408;
    if (!a3)
      goto LABEL_15;
LABEL_14:
    *a3 = v6;
    goto LABEL_15;
  }
  if (!a2)
  {
    v6 = 6403;
    v7 = 6403;
    if (!a3)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (a2 != 1)
    return FigSignalErrorAt();
  v6 = 33319;
  v7 = 33319;
  if (a3)
    goto LABEL_14;
LABEL_15:
  if (a4)
    *a4 = v7;
  if (a5)
    *a5 = 5121;
  return 0;
}

uint64_t OVCRegisterPixelBufferAsRenderTarget(void *a1, uint64_t a2, CVPixelBufferRef pixelBuffer, size_t a4)
{
  OSType PixelFormatType;
  size_t WidthOfPlane;
  size_t HeightOfPlane;
  uint64_t result;
  __int16 v12;
  GLuint framebuffer;
  GLuint texture[2];
  uint64_t v15;

  *(_QWORD *)texture = 0;
  v15 = 0;
  framebuffer = 0;
  v12 = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  WidthOfPlane = OVCCVPixelBufferGetWidthOfPlane(pixelBuffer, a4);
  HeightOfPlane = OVCCVPixelBufferGetHeightOfPlane(pixelBuffer, a4);
  result = ovc_getTextureAttributesForRendering(PixelFormatType, a4, (int *)&v15 + 1, (int *)&v15, &texture[1]);
  if (!(_DWORD)result)
  {
    result = FigOVCGLObjectCacheWrapperGetObjectForPixelBufferAndPlane(a2, pixelBuffer, a4, 3553, texture, (BOOL *)&v12 + 1);
    if (!(_DWORD)result)
    {
      glBindTexture(0xDE1u, texture[0]);
      if (!HIBYTE(v12)
        || (result = OVCTexImagePixelBuffer(a1, pixelBuffer, 0xDE1u, HIDWORD(v15), WidthOfPlane, HeightOfPlane, v15, texture[1], a4), !(_DWORD)result))
      {
        result = FigOVCGLObjectCacheWrapperGetObjectForPixelBufferAndPlane(a2, pixelBuffer, a4, 36160, &framebuffer, (BOOL *)&v12);
        if (!(_DWORD)result)
        {
          glBindFramebuffer(0x8D40u, framebuffer);
          if (HIBYTE(v12) | v12)
            glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, texture[0], 0);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t OVCRegisterFenceBlock(void *a1, uint64_t a2, uint64_t a3)
{
  if ((objc_msgSend(a1, "setBlockFence:onQueue:", a3, a2) & 1) != 0)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t MTProxyAudioProcessingTapCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;

  MEMORY[0x19402F294](&paptap_OneTimeInitialization_sInitializationOnce, paptap_OneTimeInitializationWork);
  MTAudioProcessingTapGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    *(_QWORD *)CMBaseObjectGetDerivedStorage() = a2;
    *a3 = 0;
  }
  return v5;
}

uint64_t MTAudioProcessingTapIsProxyTap(uint64_t result)
{
  if (result)
  {
    MTAudioProcessingTapGetClassID();
    result = CMBaseObjectIsMemberOfClass();
    if ((_DWORD)result)
      return CMBaseObjectGetVTable() == (_QWORD)&paptap_VTable;
  }
  return result;
}

uint64_t MTProxyAudioProcessingTapGetObjectID(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!MTAudioProcessingTapIsProxyTap(a1))
    return FigSignalErrorAt();
  *a2 = *DerivedStorage;
  return 0;
}

__CFString *paptap_BaseClass_CopyDebugDescription(const void *a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;
  CFIndex v4;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<MTProxyAudioProcessingTap %p> Retain count %d Created with object ID %016llx"), a1, v4, *DerivedStorage);
  return Mutable;
}

uint64_t FigCaptionConversionValidatorGetClassID()
{
  MEMORY[0x19402F294](&FigCaptionConversionValidatorGetClassID_sRegisterFigCaptionConversionValidatorBaseTypeOnce, RegisterFigCaptionConversionValidatorBaseType);
  return sFigCaptionConversionValidatorClassID;
}

uint64_t RegisterFigCaptionConversionValidatorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigCaptionConversionValidatorGetTypeID()
{
  MEMORY[0x19402F294](&FigCaptionConversionValidatorGetClassID_sRegisterFigCaptionConversionValidatorBaseTypeOnce, RegisterFigCaptionConversionValidatorBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigCaptionConversionValidatorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigCaptionConversionValidator %p]"), a1);
}

uint64_t FigCDSNodeProtocolGetProtocolID()
{
  MEMORY[0x19402F294](&FigCDSNodeProtocolGetProtocolID_sRegisterFigCDSNodeProtocolTypeOnce, RegisterFigCDSNodeProtocolType);
  return sFigCDSNodeProtocolID;
}

uint64_t RegisterFigCDSNodeProtocolType()
{
  return FigBaseProtocolRegisterProtocol();
}

uint64_t FigMetricItemVariantChangeEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t CMTime;
  xpc_object_t value;
  xpc_object_t v7;
  uint64_t AllocatorForMedia;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef cf;
  __int128 v18;
  uint64_t v19;

  v18 = *MEMORY[0x1E0CA2E18];
  v19 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v16 = 0;
  cf = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  if (a1 && a2)
  {
    v4 = xpc_dictionary_get_BOOL(a1, "DidSucceed");
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageCopyCFDate();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFString();
        if (!(_DWORD)CMTime)
        {
          CMTime = FigXPCMessageCopyCFArray();
          if (!(_DWORD)CMTime)
          {
            value = xpc_dictionary_get_value(a1, "FromVariant");
            CMTime = FigAlternateCreateWithXPCObject(value, 0, &v15);
            if (!(_DWORD)CMTime)
            {
              v7 = xpc_dictionary_get_value(a1, "ToVariant");
              CMTime = FigAlternateCreateWithXPCObject(v7, 0, &v14);
              if (!(_DWORD)CMTime)
              {
                AllocatorForMedia = FigGetAllocatorForMedia();
                v11 = v18;
                v12 = v19;
                CMTime = FigMetricItemVariantChangeEventCreate(AllocatorForMedia, &v11, cf, v16, v14, v15, v13, v4, a2);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v9 = CMTime;
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v13)
    CFRelease(v13);
  return v9;
}

uint64_t FigMetricItemVariantChangeEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, char a8, _QWORD *a9)
{
  uint64_t v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  void *v20;
  CFAbsoluteTime Current;
  __int128 v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;

  if (!a9)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v17 = CMDerivedObjectCreate();
  if (!(_DWORD)v17)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v19 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 88) = v19;
    if (v19)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 6;
      if (a3)
      {
        v20 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v20 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v20;
      v22 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v22;
      if (a4)
        v23 = CFRetain(a4);
      else
        v23 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v23;
      if (a5)
        v24 = CFRetain(a5);
      else
        v24 = 0;
      *(_QWORD *)(DerivedStorage + 56) = v24;
      if (a6)
        v25 = CFRetain(a6);
      else
        v25 = 0;
      *(_QWORD *)(DerivedStorage + 64) = v25;
      if (a7)
        v26 = CFRetain(a7);
      else
        v26 = 0;
      *(_QWORD *)(DerivedStorage + 72) = v26;
      *(_BYTE *)(DerivedStorage + 80) = a8;
      v17 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v17)
        *a9 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v17;
}

uint64_t meivc_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[7];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[8];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[9];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[2];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[3];
  if (v5)
    CFRelease(v5);
  return FigSimpleMutexDestroy();
}

CFStringRef meivc_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMetricItemVariantChangeEvent %p]"), a1);
}

void meivc_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t meivc_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 11));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 11));
  return v1;
}

uint64_t meivc_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meivc_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meivc_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  return v2;
}

uint64_t meivc_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  return v5;
}

void meivc_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 48);
  JUMPOUT(0x19402EF04);
}

uint64_t meivc_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  return v4;
}

uint64_t meivc_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  int64_t v10;
  void (*v11)(__int128 *__return_ptr, uint64_t);
  void (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t);
  const void *v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  unsigned int (*v17)(uint64_t);
  BOOL v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  xpc_object_t v23;
  xpc_object_t value;

  v23 = 0;
  value = 0;
  if (!a1 || !a2)
  {
    v6 = FigSignalErrorAt();
LABEL_35:
    v19 = v6;
    goto LABEL_33;
  }
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 56) + 8);
  if (v4)
    v5 = v4(a1);
  else
    v5 = 0;
  v6 = FigAlternateCopyAsXPCObject(v5, &value);
  if ((_DWORD)v6)
    goto LABEL_35;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 56) + 16);
  v8 = v7 ? v7(a1) : 0;
  v6 = FigAlternateCopyAsXPCObject(v8, &v23);
  if ((_DWORD)v6)
    goto LABEL_35;
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  v10 = v9 ? v9(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v10);
  v11 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v11)
  {
    v11(&v21, a1);
  }
  else
  {
    v21 = *MEMORY[0x1E0CA2E18];
    v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v6 = FigXPCMessageSetCMTime();
  if ((_DWORD)v6)
    goto LABEL_35;
  v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v12)
    v12(a1);
  v6 = FigXPCMessageSetCFDate();
  if ((_DWORD)v6)
    goto LABEL_35;
  v13 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v13)
    v14 = (const void *)v13(a1);
  else
    v14 = 0;
  v15 = FigXPCMessageSetCFString();
  if ((_DWORD)v15)
    goto LABEL_36;
  v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 56) + 24);
  if (v16)
    v16(a1);
  v15 = FigXPCMessageSetCFArray();
  if ((_DWORD)v15)
  {
LABEL_36:
    v19 = v15;
    if (!v14)
      goto LABEL_33;
    goto LABEL_32;
  }
  v17 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 56) + 32);
  if (v17)
    v18 = v17(a1) != 0;
  else
    v18 = 0;
  xpc_dictionary_set_BOOL(a2, "DidSucceed", v18);
  xpc_dictionary_set_value(a2, "ToVariant", value);
  xpc_dictionary_set_value(a2, "FromVariant", v23);
  v19 = 0;
  if (v14)
LABEL_32:
    CFRelease(v14);
LABEL_33:
  FigXPCRelease();
  FigXPCRelease();
  return v19;
}

uint64_t meivc_getToVariant()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t meivc_getFromVariant()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t meivc_getLoadedTimeRanges()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t meivc_didSucceed()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t FigAlternateFilterMonitorCreateForContentSteering(void *a1, const void *a2, const void *a3, const __CFSet *a4, int a5, uint64_t a6, int a7, const void *a8, const void *a9, const void *a10, CFTypeRef cf, const void *a12, char a13, _QWORD *a14)
{
  uint64_t v21;
  uint64_t DerivedStorage;
  uint64_t v23;
  CFTypeRef v24;
  CFTypeRef v25;
  const __CFAllocator *v26;
  CFTypeRef v27;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  uint64_t v31;
  uint64_t v32;
  __CFArray *Mutable;
  __CFArray *v34;
  const void *v35;
  uint64_t v36;
  CFTypeRef v37;

  FigAlternateFilterMonitorGetClassID();
  v21 = CMDerivedObjectCreate();
  if ((_DWORD)v21)
    return v21;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v23 = FigReentrantMutexCreate();
  *(_QWORD *)DerivedStorage = v23;
  if (!v23)
    return FigSignalErrorAt();
  v21 = FigRetainProxyCreate();
  if ((_DWORD)v21)
    return v21;
  v24 = a2 ? CFRetain(a2) : 0;
  *(_QWORD *)(DerivedStorage + 40) = v24;
  v25 = a3 ? CFRetain(a3) : 0;
  *(_QWORD *)(DerivedStorage + 48) = v25;
  v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(DerivedStorage + 88) = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4);
  *(_QWORD *)(DerivedStorage + 80) = CFArrayCreateMutable(v26, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 96) = 0x4072C00000000000;
  *(int64x2_t *)(DerivedStorage + 104) = vdupq_n_s64(0x8000000000000000);
  *(_QWORD *)(DerivedStorage + 168) = FigHTTPSchedulerRetain(0);
  *(_DWORD *)(DerivedStorage + 184) = a7 | 1;
  v27 = a8 ? CFRetain(a8) : 0;
  *(_QWORD *)(DerivedStorage + 192) = v27;
  v28 = a9 ? CFRetain(a9) : 0;
  *(_QWORD *)(DerivedStorage + 200) = v28;
  v29 = a10 ? CFRetain(a10) : 0;
  *(_QWORD *)(DerivedStorage + 208) = v29;
  v30 = a12 ? CFRetain(a12) : 0;
  *(_QWORD *)(DerivedStorage + 240) = v30;
  *(_QWORD *)(DerivedStorage + 128) = a6;
  *(_BYTE *)(DerivedStorage + 152) = a13;
  v21 = FigNetworkHistoryCopySharedPredictor();
  if ((_DWORD)v21)
    return v21;
  v31 = CMBaseObjectGetDerivedStorage();
  v32 = FigCFSetCopyValuesAsCFArray();
  if (!(_DWORD)v32)
  {
    Mutable = CFArrayCreateMutable(v26, 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v34 = Mutable;
      v35 = *(const void **)(v31 + 48);
      if (v35)
        CFArrayInsertValueAtIndex(Mutable, 0, v35);
      v36 = 0;
      *(_QWORD *)(v31 + 56) = v34;
      goto LABEL_28;
    }
    v32 = FigSignalErrorAt();
  }
  v36 = v32;
LABEL_28:
  if (!(_DWORD)v36)
  {
    v37 = cf;
    if (cf)
      v37 = CFRetain(cf);
    *(_QWORD *)(DerivedStorage + 160) = v37;
    v36 = FigAlternatePathwayPreferenceFilterCreate(a1, *(const void **)(DerivedStorage + 48), *(const void **)(DerivedStorage + 56), (_QWORD *)(DerivedStorage + 24));
    if (!(_DWORD)v36)
      *a14 = 0;
  }
  return v36;
}

uint64_t famcs_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  const void *v20;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[1];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[1] = 0;
  }
  v2 = (const void *)DerivedStorage[7];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[7] = 0;
  }
  v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  v4 = (const void *)DerivedStorage[6];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[6] = 0;
  }
  v5 = (const void *)DerivedStorage[11];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[11] = 0;
  }
  v6 = (const void *)DerivedStorage[3];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[3] = 0;
  }
  v7 = (const void *)DerivedStorage[10];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[10] = 0;
  }
  v8 = (const void *)DerivedStorage[4];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[4] = 0;
  }
  v9 = (const void *)DerivedStorage[15];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[15] = 0;
  }
  v10 = (const void *)DerivedStorage[8];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[8] = 0;
  }
  v11 = (const void *)DerivedStorage[17];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[17] = 0;
  }
  v12 = (const void *)DerivedStorage[9];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[9] = 0;
  }
  v13 = (const void *)DerivedStorage[18];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[18] = 0;
  }
  v14 = (const void *)DerivedStorage[24];
  if (v14)
  {
    CFRelease(v14);
    DerivedStorage[24] = 0;
  }
  v15 = (const void *)DerivedStorage[20];
  if (v15)
  {
    CFRelease(v15);
    DerivedStorage[20] = 0;
  }
  v16 = (const void *)DerivedStorage[21];
  if (v16)
  {
    CFRelease(v16);
    DerivedStorage[21] = 0;
  }
  v17 = (const void *)DerivedStorage[25];
  if (v17)
  {
    CFRelease(v17);
    DerivedStorage[25] = 0;
  }
  v18 = (const void *)DerivedStorage[26];
  if (v18)
  {
    CFRelease(v18);
    DerivedStorage[26] = 0;
  }
  v19 = CMBaseObjectGetDerivedStorage();
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v19 + 176));
  famcs_clearNetworkRequestState();
  v20 = (const void *)DerivedStorage[30];
  if (v20)
  {
    CFRelease(v20);
    DerivedStorage[30] = 0;
  }
  return FigSimpleMutexDestroy();
}

CFStringRef famcs_copyDebugDesc()
{
  _QWORD *DerivedStorage;
  const void *v1;
  CFStringRef v2;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v1 = (const void *)FigCFCopyCompactDescription();
  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigAlternateFilterMonitorForContentSteering pathways=%@ currentPathway=%@]"), v1, DerivedStorage[6]);
  MEMORY[0x19402EA24](*DerivedStorage);
  if (v1)
    CFRelease(v1);
  return v2;
}

uint64_t famcs_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  _QWORD *DerivedStorage;
  void *Copy;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  CFMutableArrayRef Mutable;
  __CFArray *v14;
  CFIndex v15;
  const void *ValueAtIndex;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_PathwayPriorityList")))
  {
    Copy = (void *)DerivedStorage[7];
    if (!Copy)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_DefinedPathwayIDs")))
  {
    Copy = (void *)DerivedStorage[11];
    if (Copy)
LABEL_6:
      Copy = (void *)CFRetain(Copy);
LABEL_7:
    v9 = 0;
    *a4 = (__CFArray *)Copy;
    goto LABEL_8;
  }
  if (!CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_KnownPathwayPriorityList")))
  {
    if (!CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_CurrentPathwayID")))
    {
      if (!CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_Expanders")))
      {
        v9 = 4294951681;
        goto LABEL_8;
      }
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFArrayRef)DerivedStorage[10]);
      goto LABEL_7;
    }
    Copy = (void *)DerivedStorage[6];
    if (Copy)
      goto LABEL_6;
    goto LABEL_7;
  }
  v11 = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(v11 + 56))
  {
    if (a4 && (v12 = v11, (Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378])) != 0))
    {
      v14 = Mutable;
      if (CFArrayGetCount(*(CFArrayRef *)(v12 + 56)) >= 1)
      {
        v15 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v12 + 56), v15);
          if (CFSetContainsValue(*(CFSetRef *)(v12 + 88), ValueAtIndex) || FigCFEqual())
            CFArrayAppendValue(v14, ValueAtIndex);
          ++v15;
        }
        while (v15 < CFArrayGetCount(*(CFArrayRef *)(v12 + 56)));
      }
      v9 = 0;
      *a4 = v14;
    }
    else
    {
      v9 = FigSignalErrorAt();
    }
  }
  else
  {
    v9 = 0;
  }
LABEL_8:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v9;
}

uint64_t famcs_setProperty(const void *a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  CFAllocatorRef v19;
  const void *v20;
  CFTypeRef v21;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t PathwayIDDescriptionGivenPathwayClones;
  NSObject *v27;
  const void *v28;
  const void *v29;
  uint64_t v30;
  const __CFAllocator *v31;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v33;
  CFMutableDictionaryRef v34;
  CFMutableDictionaryRef v35;
  CFIndex i;
  const __CFArray *Count;
  const void *ValueAtIndex;
  const void *BaseID;
  const void *ID;
  CFMutableArrayRef v41;
  CFMutableArrayRef v42;
  __CFArray *Value;
  uint64_t TimestampClientDidPause;
  CFMutableArrayRef v45;
  CFMutableArrayRef v46;
  uint64_t v47;
  CFIndex v48;
  CFTypeRef v49;
  const void *v50;
  const __CFArray *v51;
  uint64_t v52;
  __CFArray *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[2];
  int v57;
  os_log_type_t type[8];
  CFTypeRef v59;
  CFTypeRef cf[18];
  CFRange v61;
  CFRange v62;

  cf[16] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  v56[0] = 0;
  v7 = DerivedStorage[2];
  if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_PathwayPriorityList")))
  {
    v8 = CMBaseObjectGetDerivedStorage();
    if (!FigCFEqual())
    {
      v9 = (const void *)FigCFCopyCompactDescription();
      v10 = (const void *)FigCFCopyCompactDescription();
      if (dword_1EE2A30C8)
      {
        LODWORD(v59) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v12 = *(const void **)(v8 + 56);
      *(_QWORD *)(v8 + 56) = a3;
      if (a3)
        CFRetain(a3);
      if (v12)
        CFRelease(v12);
      v56[0] = 1;
      if (v9)
        CFRelease(v9);
      if (v10)
        CFRelease(v10);
    }
    goto LABEL_15;
  }
  if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_DefinedPathwayIDs")))
  {
    famcs_setDefinedPathwayIDs((uint64_t)a1, a3, v56);
LABEL_15:
    v13 = 0;
    v14 = 0;
    goto LABEL_16;
  }
  if (!CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_CurrentPathwayID")))
  {
    if (!CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_PathwayClones")))
    {
      if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_ReportingAgent")))
      {
        famcs_setReportingAgent((uint64_t)a1, a3);
        goto LABEL_15;
      }
      if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_LastTimestampClientDidPause")))
      {
        TimestampClientDidPause = famcs_setLastTimestampClientDidPause((uint64_t)a1, (const __CFNumber *)a3);
      }
      else if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_SelectedAlternate")))
      {
        TimestampClientDidPause = famcs_setSelectedAlternate((uint64_t)a1, a3);
      }
      else if (CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_SelectedMediaArray")))
      {
        TimestampClientDidPause = famcs_setSelectedMediaArray((uint64_t)a1, a3);
      }
      else
      {
        if (!CFEqual(a2, CFSTR("AlternateFilterMonitorProperty_StreamingCache")))
        {
          v13 = 0;
          v14 = 4294951681;
          goto LABEL_16;
        }
        TimestampClientDidPause = famcs_setStreamingCache((uint64_t)a1, a3);
      }
      v14 = TimestampClientDidPause;
      v13 = 0;
      goto LABEL_16;
    }
    v25 = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)type = 0;
    v59 = 0;
    v54 = v7;
    if (FigCFEqual())
    {
      v13 = 0;
      v45 = 0;
LABEL_100:
      v14 = 0;
LABEL_101:
      if (v59)
        CFRelease(v59);
      if (*(_QWORD *)type)
        CFRelease(*(CFTypeRef *)type);
      if (v45)
        CFRelease(v45);
      v7 = v54;
      goto LABEL_16;
    }
    PathwayIDDescriptionGivenPathwayClones = famcs_createPathwayIDDescriptionGivenPathwayClones(*(const __CFArray **)(v25 + 64), (uint64_t *)&v59);
    if ((_DWORD)PathwayIDDescriptionGivenPathwayClones
      || (PathwayIDDescriptionGivenPathwayClones = famcs_createPathwayIDDescriptionGivenPathwayClones((const __CFArray *)a3, (uint64_t *)type), (_DWORD)PathwayIDDescriptionGivenPathwayClones))
    {
      v14 = PathwayIDDescriptionGivenPathwayClones;
      v13 = 0;
      v45 = 0;
      goto LABEL_101;
    }
    v55 = v25;
    if (dword_1EE2A30C8)
    {
      v57 = 0;
      v56[1] = 0;
      v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v29 = *(const void **)(v25 + 64);
    *(_QWORD *)(v25 + 64) = a3;
    if (a3)
      CFRetain(a3);
    if (v29)
      CFRelease(v29);
    CMBaseObjectGetDerivedStorage();
    cf[0] = 0;
    v30 = CMBaseObjectGetDerivedStorage();
    v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v33 = Mutable;
      v34 = CFDictionaryCreateMutable(v31, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v34)
      {
        v35 = v34;
        for (i = 0; ; ++i)
        {
          Count = *(const __CFArray **)(v30 + 64);
          if (Count)
            Count = (const __CFArray *)CFArrayGetCount(Count);
          if (i >= (uint64_t)Count)
            break;
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v30 + 64), i);
          BaseID = (const void *)FigPathwayCloneGetBaseID();
          ID = (const void *)FigPathwayCloneGetID();
          if (!CFDictionaryContainsKey(v35, BaseID))
          {
            v41 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E0C9B378]);
            if (!v41)
            {
              v14 = FigSignalErrorAt();
              CFRelease(v35);
              goto LABEL_76;
            }
            v42 = v41;
            CFDictionaryAddValue(v35, BaseID, v41);
            CFRelease(v42);
          }
          Value = (__CFArray *)CFDictionaryGetValue(v35, BaseID);
          CFArrayAppendValue(Value, ID);
          CFDictionaryAddValue(v33, ID, ValueAtIndex);
        }
        goto LABEL_78;
      }
      v14 = FigSignalErrorAt();
LABEL_76:
      CFRelease(v33);
    }
    else
    {
      v14 = FigSignalErrorAt();
    }
    v33 = 0;
    v35 = 0;
    v45 = 0;
    v46 = 0;
    if ((_DWORD)v14)
    {
LABEL_92:
      if (cf[0])
        CFRelease(cf[0]);
      if (v46)
        CFRelease(v46);
      if ((_DWORD)v14)
      {
        v13 = 0;
        goto LABEL_101;
      }
      v53 = *(__CFArray **)(v55 + 80);
      if (v45)
      {
        v61.length = CFArrayGetCount(v45);
        v61.location = 0;
        CFArrayAppendArray(v53, v45, v61);
        v13 = CFArrayGetCount(v45) > 0;
      }
      else
      {
        v62.location = 0;
        v62.length = 0;
        CFArrayAppendArray(v53, 0, v62);
        v13 = 0;
      }
      goto LABEL_100;
    }
LABEL_78:
    v47 = FigCFSetCopyValuesAsCFArray();
    if ((_DWORD)v47)
    {
      v14 = v47;
      v45 = 0;
    }
    else
    {
      v46 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E0C9B378]);
      if (!v46)
      {
        v52 = FigSignalErrorAt();
LABEL_85:
        v14 = v52;
        v45 = 0;
        if (!v35)
          goto LABEL_90;
LABEL_89:
        CFRelease(v35);
LABEL_90:
        if (v33)
          CFRelease(v33);
        goto LABEL_92;
      }
      v48 = 0;
      while (1)
      {
        v49 = cf[0];
        if (cf[0])
          v49 = (CFTypeRef)CFArrayGetCount((CFArrayRef)cf[0]);
        if (v48 >= (uint64_t)v49)
          break;
        v50 = CFArrayGetValueAtIndex((CFArrayRef)cf[0], v48);
        v51 = (const __CFArray *)CFDictionaryGetValue(v35, v50);
        v52 = famcs_recursivelyProcessPathwayClonesAndAddToExpanderArray((uint64_t)a1, v51, v35, v33, v46);
        ++v48;
        if ((_DWORD)v52)
          goto LABEL_85;
      }
      v14 = 0;
      v45 = v46;
    }
    v46 = 0;
    if (!v35)
      goto LABEL_90;
    goto LABEL_89;
  }
  v23 = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
    goto LABEL_15;
  if (dword_1EE2A30C8)
  {
    LODWORD(v59) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v28 = *(const void **)(v23 + 48);
  *(_QWORD *)(v23 + 48) = a3;
  if (a3)
    CFRetain(a3);
  if (v28)
    CFRelease(v28);
  v13 = 0;
  v14 = 0;
  v56[0] = 1;
LABEL_16:
  if (v56[0])
    v15 = v7 + 1;
  else
    v15 = v7;
  v16 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v17 = v16;
  cf[0] = 0;
  v18 = v16[2];
  if (v18 == v15)
  {
    MEMORY[0x19402EA24](*v16);
    if (v13)
      FigAlternateFilterMonitorUtilityPostExpandersAddedNotification();
  }
  else
  {
    v19 = CFGetAllocator(a1);
    if (FigAlternatePathwayPreferenceFilterCreate(v19, (const void *)v17[6], (const void *)v17[7], cf))
    {
      v20 = 0;
    }
    else
    {
      v20 = (const void *)v17[3];
      v21 = cf[0];
      if (cf[0])
        v21 = CFRetain(cf[0]);
      v17[2] = v15;
      v17[3] = v21;
    }
    MEMORY[0x19402EA24](*v17);
    if (!v13 || !FigAlternateFilterMonitorUtilityPostExpandersAddedNotification())
      FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewStateIfNecessary(a1, v20, cf[0], v18, v15);
    if (v20)
      CFRelease(v20);
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v14;
}

uint64_t famcs_clearNetworkRequestState()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t result;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 216);
  if (v1)
  {
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (!v2)
      return 4294954514;
    result = v2(v1);
    if ((_DWORD)result)
      return result;
    v4 = *(const void **)(DerivedStorage + 216);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 216) = 0;
    }
  }
  v5 = *(const void **)(DerivedStorage + 232);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 232) = 0;
  }
  *(_DWORD *)(DerivedStorage + 224) = 0;
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = *(_QWORD *)(v6 + 240);
  if (!v7)
    return 0;
  v8 = v6;
  v9 = *(_QWORD *)(v6 + 248);
  if (!v9)
    return 0;
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v10)
    return 4294954514;
  result = v10(v7, v9);
  if (!(_DWORD)result)
    *(_QWORD *)(v8 + 248) = 0;
  return result;
}

void famcs_setDefinedPathwayIDs(uint64_t a1, const void *a2, _BYTE *a3)
{
  uint64_t DerivedStorage;
  const void *v6;
  const void *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    v6 = (const void *)FigCFCopyCompactDescription();
    v7 = (const void *)FigCFCopyCompactDescription();
    if (dword_1EE2A30C8)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v9 = *(const void **)(DerivedStorage + 88);
    *(_QWORD *)(DerivedStorage + 88) = a2;
    if (a2)
      CFRetain(a2);
    if (v9)
      CFRelease(v9);
    if (a3)
      *a3 = 1;
    if (v6)
      CFRelease(v6);
    if (v7)
      CFRelease(v7);
  }
}

void famcs_setReportingAgent(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
    v4 = *(const void **)(DerivedStorage + 120);
    *(_QWORD *)(DerivedStorage + 120) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
  }
}

uint64_t famcs_setLastTimestampClientDidPause(uint64_t a1, const __CFNumber *a2)
{
  uint64_t DerivedStorage;
  uint64_t valuePtr;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  valuePtr = 0;
  CFNumberGetValue(a2, kCFNumberSInt64Type, &valuePtr);
  *(_QWORD *)(DerivedStorage + 104) = valuePtr;
  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_setSelectedAlternate(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
    return 0;
  v5 = *(const void **)(DerivedStorage + 136);
  *(_QWORD *)(DerivedStorage + 136) = a2;
  if (a2)
    CFRetain(a2);
  if (v5)
    CFRelease(v5);
  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_setSelectedMediaArray(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
    return 0;
  v5 = *(const void **)(DerivedStorage + 72);
  *(_QWORD *)(DerivedStorage + 72) = a2;
  if (a2)
    CFRetain(a2);
  if (v5)
    CFRelease(v5);
  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_setStreamingCache(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
    return 0;
  v5 = *(const void **)(DerivedStorage + 144);
  *(_QWORD *)(DerivedStorage + 144) = a2;
  if (a2)
    CFRetain(a2);
  if (v5)
    CFRelease(v5);
  return famcs_ensureSteeringReloadTimerIsScheduled(a1);
}

uint64_t famcs_createPathwayIDDescriptionGivenPathwayClones(const __CFArray *a1, uint64_t *a2)
{
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  CFIndex v6;
  CFIndex i;
  const void *ID;

  if (!a2)
    return FigSignalErrorAt();
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  v6 = 0;
  if (!a1)
    goto LABEL_5;
LABEL_4:
  for (i = CFArrayGetCount(a1); v6 < i; i = 0)
  {
    CFArrayGetValueAtIndex(a1, v6);
    ID = (const void *)FigPathwayCloneGetID();
    CFArrayAppendValue(v5, ID);
    ++v6;
    if (a1)
      goto LABEL_4;
LABEL_5:
    ;
  }
  *a2 = FigCFCopyCompactDescription();
  CFRelease(v5);
  return 0;
}

uint64_t famcs_recursivelyProcessPathwayClonesAndAddToExpanderArray(uint64_t a1, const __CFArray *a2, const __CFDictionary *a3, const __CFDictionary *a4, __CFArray *a5)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  CFIndex v12;
  const __CFAllocator *v13;
  const void *ValueAtIndex;
  __CFSet *MutableCopy;
  const void *v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (!a2)
    return 0;
  v11 = DerivedStorage;
  if (CFArrayGetCount(a2) < 1)
    return 0;
  v12 = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
    if (CFSetContainsValue(*(CFSetRef *)(v11 + 88), ValueAtIndex))
      goto LABEL_10;
    MutableCopy = CFSetCreateMutableCopy(v13, 0, *(CFSetRef *)(v11 + 88));
    CFSetAddValue(MutableCopy, ValueAtIndex);
    famcs_setDefinedPathwayIDs(a1, MutableCopy, 0);
    if (MutableCopy)
      CFRelease(MutableCopy);
    v16 = CFDictionaryGetValue(a4, ValueAtIndex);
    v17 = FigAlternatePathwayCloningExpanderCreate((uint64_t)v13, v16, &value);
    if ((_DWORD)v17)
      break;
    CFArrayAppendValue(a5, value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
LABEL_10:
    v18 = CFDictionaryGetValue(a3, ValueAtIndex);
    v17 = famcs_recursivelyProcessPathwayClonesAndAddToExpanderArray(a1, v18, a3, a4, a5);
    if ((_DWORD)v17)
      break;
    if (++v12 >= CFArrayGetCount(a2))
    {
      v19 = 0;
      goto LABEL_13;
    }
  }
  v19 = v17;
LABEL_13:
  if (value)
    CFRelease(value);
  return v19;
}

uint64_t famcs_ensureSteeringReloadTimerIsScheduled(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  _QWORD *v4;
  double v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(DerivedStorage + 104) == 0x8000000000000000)
    return 0;
  v3 = DerivedStorage;
  v4 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (v4[22] || v4[27] || v4[31])
    return 0;
  if (famcs_shouldSendSteeringManifestRequest())
    return famcs_sendContentSteeringManifestRequest(a1, *(const __CFURL **)(v3 + 40));
  if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 112) == 0x8000000000000000)
    return 0;
  v6 = *(double *)(v3 + 96) + (double)(FigGetUpTimeNanoseconds() - *(_QWORD *)(v3 + 112)) / -1000000000.0;
  return famcs_setSteeringRequestReloadTimer(v6);
}

BOOL famcs_shouldSendSteeringManifestRequest()
{
  uint64_t DerivedStorage;
  uint64_t UpTimeNanoseconds;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  CFArrayRef v5;
  CFArrayRef v6;
  CFTypeRef v7;
  unsigned int (*v8)(CFTypeRef, CFArrayRef, CFArrayRef *);
  _BOOL4 v9;
  CFArrayRef theArray;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (UpTimeNanoseconds - (uint64_t)fmax(*(double *)(CMBaseObjectGetDerivedStorage() + 96) * 1000000000.0, 3.0e10) >= *(_QWORD *)(DerivedStorage + 104)
    || (double)UpTimeNanoseconds + *(double *)(DerivedStorage + 96) * -1000000000.0 <= (double)*(uint64_t *)(DerivedStorage + 112))
  {
    return 0;
  }
  v2 = CMBaseObjectGetDerivedStorage();
  theArray = 0;
  cf = 0;
  if (*(_QWORD *)(v2 + 136))
  {
    v3 = v2;
    if (*(_QWORD *)(v2 + 72))
    {
      if (*(_QWORD *)(v2 + 144))
      {
        v4 = (void *)*MEMORY[0x1E0C9AE00];
        v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)(v2 + 136), 1, MEMORY[0x1E0C9B378]);
        if (v5)
        {
          v6 = v5;
          v9 = !FigAlternateOfflinePlayableForMediaSelectionFilterCreate(v4, *(_QWORD *)(v3 + 144), *(const __CFArray **)(v3 + 72), 1, &cf)&& (v7 = cf, (v8 = *(unsigned int (**)(CFTypeRef, CFArrayRef, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)+ 24)) != 0)&& !v8(v7, v6, &theArray)&& theArray&& CFArrayGetCount(theArray) == 1;
          CFRelease(v6);
          if (theArray)
            CFRelease(theArray);
          goto LABEL_16;
        }
        FigSignalErrorAt();
      }
    }
  }
  v9 = 0;
LABEL_16:
  if (cf)
    CFRelease(cf);
  return !v9;
}

uint64_t famcs_sendContentSteeringManifestRequest(uint64_t a1, const __CFURL *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  NSObject *v6;
  _BOOL4 v7;
  CFAllocatorRef *v8;
  uint64_t v9;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  __CFArray *v12;
  uint64_t v13;
  uint64_t UpTimeNanoseconds;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, CFTypeRef *, __int128 *);
  CFStringRef v17;
  CFStringRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v28;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v30;
  uint64_t v31;
  CFIndex Count;
  CFIndex v33;
  CFIndex v34;
  const __CFString *ValueAtIndex;
  CFIndex v36;
  const void *v37;
  uint64_t Param;
  const __CFURL *v39;
  CFAllocatorRef v40;
  __CFDictionary *MutableCopy;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, CFAllocatorRef, _QWORD, const __CFURL *, _QWORD, uint64_t, __CFDictionary *, uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, int), uint64_t, os_log_type_t *, int *);
  uint64_t v49;
  void (*v50)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v52;
  int v53;
  os_log_type_t type[8];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  CFTypeRef cf[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[6];
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = famcs_clearNetworkRequestState();
  if ((_DWORD)v5)
    return v5;
  *(_QWORD *)(DerivedStorage + 112) = FigGetUpTimeNanoseconds();
  if ((*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 128) & 1) != 0
    && (FigCFHTTPIsHTTPBasedURL(a2) || FigCFHTTPIsDataURL(a2)))
  {
    v7 = FigCFHTTPIsHTTPBasedURL(a2);
    v8 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v7)
    {
      v9 = CMBaseObjectGetDerivedStorage();
      v10 = *v8;
      Mutable = CFArrayCreateMutable(*v8, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v12 = Mutable;
        v13 = CMBaseObjectGetDerivedStorage();
        UpTimeNanoseconds = FigGetUpTimeNanoseconds();
        v60 = 0;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v55 = 0u;
        v15 = *(_QWORD *)(v13 + 32);
        v16 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 8);
        if (v16)
        {
          memset(v65, 0, sizeof(v65));
          v63 = 0u;
          v64 = 0u;
          *(_OWORD *)cf = 0u;
          v62 = 0u;
          v66 = 0;
          v67 = 9;
          v68 = 0u;
          v69 = 0u;
          v70 = 0u;
          if (!v16(v15, UpTimeNanoseconds, cf, &v55))
          {
            v17 = CFStringCreateWithFormat(v10, 0, CFSTR("%lld"), (_QWORD)v55);
            if (v17)
            {
              v18 = v17;
              CFArrayAppendValue(v12, CFSTR("_HLS_throughput="));
              CFArrayAppendValue(v12, v18);
LABEL_33:
              if (*(_QWORD *)(v9 + 48))
              {
                CFArrayAppendValue(v12, CFSTR("_HLS_pathway="));
                CFArrayAppendValue(v12, *(const void **)(v9 + 48));
              }
              if (v18)
                CFRelease(v18);
LABEL_37:
              if (dword_1EE2A30C8)
              {
                type[0] = OS_LOG_TYPE_DEFAULT;
                os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              v30 = CMBaseObjectGetDerivedStorage();
              *(_QWORD *)type = 0;
              v53 = 0;
              v55 = 0u;
              v56 = 0u;
              v57 = 0u;
              v58 = 0u;
              LODWORD(v59) = 0;
              v31 = famcs_clearNetworkRequestState();
              if ((_DWORD)v31)
              {
                v28 = v31;
                a2 = 0;
                goto LABEL_67;
              }
              cf[0] = 0;
              if (a2)
                a2 = (const __CFURL *)CFRetain(a2);
              if (v12)
              {
                Count = CFArrayGetCount(v12);
                if (Count >= 2 && (Count & 1) == 0)
                {
                  v33 = 0;
                  v34 = Count - 1;
                  while (1)
                  {
                    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v12, v33);
                    v36 = v33 + 1;
                    v37 = CFArrayGetValueAtIndex(v12, v33 + 1);
                    Param = FigCFHTTPCreateURLWithQueryParam(a2, ValueAtIndex, (uint64_t)v37, cf);
                    v39 = (const __CFURL *)cf[0];
                    if ((_DWORD)Param)
                      break;
                    if (cf[0])
                      CFRetain(cf[0]);
                    if (a2)
                      CFRelease(a2);
                    if (cf[0])
                    {
                      CFRelease(cf[0]);
                      cf[0] = 0;
                    }
                    v33 += 2;
                    a2 = v39;
                    if (v36 + 1 >= v34)
                      goto LABEL_54;
                  }
                  v28 = Param;
                  if (cf[0])
                    CFRelease(cf[0]);
LABEL_67:
                  if (*(_QWORD *)type)
                    CFRelease(*(CFTypeRef *)type);
                  if (a2)
                    CFRelease(a2);
                  if ((_DWORD)v28)
                    goto LABEL_76;
                  goto LABEL_72;
                }
              }
              v39 = a2;
LABEL_54:
              v40 = *v8;
              MutableCopy = CFDictionaryCreateMutableCopy(*v8, 0, *(CFDictionaryRef *)(v30 + 200));
              if (MutableCopy)
              {
                v42 = nw_activity_create();
                if (v42)
                {
                  v43 = (const void *)v42;
                  if (*(_QWORD *)(v30 + 208))
                    nw_activity_set_parent_activity();
                  CFDictionarySetValue(MutableCopy, CFSTR("FHRP_NetworkActivity"), v43);
                  CFRelease(v43);
                }
              }
              else
              {
                v52 = FigSignalErrorAt();
                if ((_DWORD)v52)
                {
                  v28 = v52;
                  goto LABEL_66;
                }
              }
              v44 = *(_QWORD *)(v30 + 160);
              v45 = *(_QWORD *)(v30 + 192);
              v46 = *(unsigned int *)(v30 + 184);
              v47 = *(_QWORD *)(v30 + 8);
              v48 = *(uint64_t (**)(uint64_t, CFAllocatorRef, _QWORD, const __CFURL *, _QWORD, uint64_t, __CFDictionary *, uint64_t, CFTypeRef *, _QWORD, _QWORD, _QWORD, void (*)(uint64_t, int, uint64_t, OpaqueCMBlockBuffer *, size_t, size_t, char, int), uint64_t, os_log_type_t *, int *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
              if (v48)
              {
                v63 = v57;
                v64 = v58;
                *(_OWORD *)cf = v55;
                v62 = v56;
                memset((char *)v65 + 8, 0, 40);
                *(_QWORD *)&v65[0] = v59 | 0x900000000;
                v28 = v48(v44, v40, 0, v39, 0, v45, MutableCopy, v46, cf, 0, 0, 0, famcs_steeringManifestHTTPReadCallback, v47, type, &v53);
                if (!(_DWORD)v28)
                {
                  *(_QWORD *)(v30 + 216) = *(_QWORD *)type;
                  *(_DWORD *)(v30 + 224) = v53;
                  *(_QWORD *)type = 0;
                }
                if (!MutableCopy)
                  goto LABEL_66;
              }
              else
              {
                v28 = 4294954514;
                if (!MutableCopy)
                {
LABEL_66:
                  a2 = v39;
                  goto LABEL_67;
                }
              }
              CFRelease(MutableCopy);
              goto LABEL_66;
            }
            FigSignalErrorAt();
          }
        }
        v18 = 0;
        goto LABEL_33;
      }
      v28 = FigSignalErrorAt();
      if ((_DWORD)v28)
        return v28;
    }
    v12 = 0;
    goto LABEL_37;
  }
  if (dword_1EE2A30C8)
  {
    type[0] = OS_LOG_TYPE_DEFAULT;
    v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v19 = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!*(_QWORD *)(v19 + 240) || (v20 = v19, v21 = v19 + 248, *(_QWORD *)(v19 + 248)))
  {
    v22 = FigSignalErrorAt();
    goto LABEL_28;
  }
  v22 = FigCustomURLRequestInfoCreateMutable();
  if ((_DWORD)v22)
  {
LABEL_28:
    v28 = v22;
    goto LABEL_24;
  }
  v23 = FigCFHTTPCreateUserAgent();
  v24 = FigCustomURLRequestInfoSetUserAgent();
  if ((_DWORD)v24 || (v24 = FigCustomURLRequestInfoSetAcceptEncoding(), (_DWORD)v24))
  {
LABEL_20:
    v28 = v24;
    if (!v23)
      goto LABEL_24;
    goto LABEL_23;
  }
  v25 = *(_QWORD *)(v20 + 240);
  v26 = *(_QWORD *)(v20 + 168);
  v27 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 24);
  if (v27)
  {
    v24 = v27(v25, cf[0], a1, v26, famcs_steeringManifestCustomURLReadCallback, v21);
    goto LABEL_20;
  }
  v28 = 4294954514;
  if (v23)
LABEL_23:
    CFRelease(v23);
LABEL_24:
  if ((_DWORD)v28)
    return v28;
  v12 = 0;
LABEL_72:
  v49 = *(_QWORD *)(DerivedStorage + 120);
  if (v49)
  {
    v50 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 32);
    if (v50)
      v50(v49, CFSTR("bytePumpStats"), CFSTR("SteeringManifestRequests"), 1);
  }
  v28 = 0;
LABEL_76:
  if (v12)
    CFRelease(v12);
  return v28;
}

uint64_t famcs_setSteeringRequestReloadTimer(double a1)
{
  double v1;
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v4;

  v1 = fmax(a1, 0.0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigHTTPStopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 176));
  if (dword_1EE2A30C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v4 = CMBaseObjectGetDerivedStorage();
  return FigHTTPCreateTimer(*(const void **)(v4 + 8), (uint64_t)famcs_steeringRequestReloadTimerCallback, *(NSObject **)(v4 + 168), (dispatch_object_t *)(v4 + 176), v1);
}

void famcs_steeringManifestHTTPReadCallback(uint64_t a1, int a2, uint64_t a3, OpaqueCMBlockBuffer *a4, size_t a5, size_t a6, char a7, int a8)
{
  _QWORD *DerivedStorage;
  uint64_t (*v16)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  uint64_t v17;
  int BB;
  CFDateRef v19;
  void (*v20)(uint64_t, __CFString *, uint64_t, CFTypeRef *);
  OpaqueCMBlockBuffer *v21;
  int appended;
  const void *v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef v25;
  CFTypeRef v26;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  v26 = 0;
  cf[0] = 0;
  v25 = 0;
  if (!famcs_copyMonitorFromRetainProxy(a3, cf))
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (DerivedStorage[27] == a1 && *((_DWORD *)DerivedStorage + 56) == a2)
    {
      v16 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
      if (!v16)
      {
        v19 = 0;
        v21 = 0;
        a8 = -12782;
        goto LABEL_22;
      }
      v17 = *MEMORY[0x1E0C9AE00];
      BB = v16(a1, CFSTR("FHRP_HTTPResponseHeaders"), *MEMORY[0x1E0C9AE00], &v26);
      if (BB)
      {
        v19 = 0;
        v21 = 0;
LABEL_21:
        a8 = BB;
LABEL_22:
        MEMORY[0x19402EA24](*DerivedStorage);
        if (!a8)
          goto LABEL_25;
        goto LABEL_23;
      }
      v19 = FigCFHTTPCopyRetryAfterDateFromHTTPResponse((__CFHTTPMessage *)v26);
      if (a8)
      {
        v20 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
        if (v20)
          v20(a1, CFSTR("FHRP_ErrorReturned"), v17, &v25);
        famcs_handleSteeringManifestNetworkError((uint64_t)cf[0], (uint64_t)v19, a8);
        goto LABEL_15;
      }
      if (!a4 || (appended = famcs_appendBlockBuffers((uint64_t)cf[0], a4, a5, a6)) == 0)
      {
        if ((a7 & 2) == 0)
        {
          v21 = 0;
          a8 = 0;
          goto LABEL_22;
        }
        v23 = (const void *)DerivedStorage[29];
        if (v23)
          v21 = (OpaqueCMBlockBuffer *)CFRetain(v23);
        else
          v21 = 0;
        BB = famcs_clearNetworkRequestState();
        if (!BB)
          BB = famcs_evaluateContentSteeringManifestFromReadBB((uint64_t)cf[0], v21);
        goto LABEL_21;
      }
      a8 = appended;
    }
    else
    {
      a8 = FigSignalErrorAt();
      v19 = 0;
    }
LABEL_15:
    v21 = 0;
    goto LABEL_22;
  }
  v19 = 0;
  v21 = 0;
LABEL_23:
  if (dword_1EE2A30C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_25:
  if (cf[0])
    CFRelease(cf[0]);
  if (v19)
    CFRelease(v19);
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  if (v21)
    CFRelease(v21);
}

uint64_t famcs_copyMonitorFromRetainProxy(uint64_t a1, _QWORD *a2)
{
  const void *Owner;
  CFTypeRef v4;
  CFTypeID v5;
  uint64_t v6;

  if (a2)
  {
    FigRetainProxyLockMutex();
    if (!FigRetainProxyIsInvalidated())
    {
      Owner = (const void *)FigRetainProxyGetOwner();
      if (Owner)
      {
        v4 = CFRetain(Owner);
        *a2 = v4;
        if (v4)
        {
          v5 = CFGetTypeID(v4);
          if (v5 == FigAlternateFilterMonitorGetTypeID())
          {
            v6 = 0;
LABEL_9:
            FigRetainProxyUnlockMutex();
            return v6;
          }
        }
      }
      else
      {
        *a2 = 0;
      }
    }
    v6 = FigSignalErrorAt();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t famcs_handleSteeringManifestNetworkError(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage;
  double v6;
  double v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = 0.0;
  if (a3 == -12668)
  {
LABEL_6:
    *(double *)(DerivedStorage + 96) = v6;
    goto LABEL_7;
  }
  if (a2 && a3 == -16853)
  {
    v7 = MEMORY[0x194029D14](a2, 0.0);
    v6 = v7 - CFAbsoluteTimeGetCurrent();
    if (v6 < 1.0)
      v6 = 1.0;
    goto LABEL_6;
  }
LABEL_7:
  if (dword_1EE2A30C8)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return famcs_setSteeringRequestReloadTimer(*(double *)(DerivedStorage + 96));
}

size_t famcs_appendBlockBuffers(uint64_t a1, OpaqueCMBlockBuffer *a2, size_t a3, size_t a4)
{
  CMBlockBufferRef *v7;
  size_t result;

  v7 = (CMBlockBufferRef *)(CMBaseObjectGetDerivedStorage() + 232);
  if (*v7 || (result = CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, v7), !(_DWORD)result))
  {
    result = CMBlockBufferGetDataLength(a2);
    if (result)
      return CMBlockBufferAppendBufferReference(*v7, a2, a3, a4, 0);
  }
  return result;
}

uint64_t famcs_evaluateContentSteeringManifestFromReadBB(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const void *ReloadURI;
  const void *v7;
  double TTL;
  double v9;
  uint64_t PathwayClones;
  uint64_t (*v11)(uint64_t, const __CFString *, uint64_t);
  uint64_t PathwayPriorityList;
  uint64_t (*v13)(uint64_t, const __CFString *, uint64_t);
  uint64_t v14;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v5 = FigSteeringManifestCreate((const __CFAllocator *)*MEMORY[0x1E0C9AE00], a2, *(const __CFURL **)(DerivedStorage + 40), 0, 0, 0, (const __CFDictionary **)&cf);
  if ((_DWORD)v5)
    goto LABEL_11;
  ReloadURI = (const void *)FigSteeringManifestGetReloadURI();
  if (ReloadURI)
  {
    v7 = *(const void **)(DerivedStorage + 40);
    *(_QWORD *)(DerivedStorage + 40) = ReloadURI;
    CFRetain(ReloadURI);
    if (v7)
      CFRelease(v7);
  }
  TTL = FigSteeringManifestGetTTL();
  v9 = 1.0;
  if (TTL > 1.0)
    v9 = FigSteeringManifestGetTTL();
  *(double *)(DerivedStorage + 96) = v9;
  PathwayClones = FigSteeringManifestGetPathwayClones();
  v11 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v11)
  {
    v5 = v11(a1, CFSTR("AlternateFilterMonitorProperty_PathwayClones"), PathwayClones);
    if ((_DWORD)v5)
    {
LABEL_11:
      v14 = v5;
      goto LABEL_13;
    }
    PathwayPriorityList = FigSteeringManifestGetPathwayPriorityList();
    v13 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (v13)
    {
      v5 = v13(a1, CFSTR("AlternateFilterMonitorProperty_PathwayPriorityList"), PathwayPriorityList);
      goto LABEL_11;
    }
  }
  v14 = 4294954514;
LABEL_13:
  famcs_setSteeringRequestReloadTimer(*(double *)(DerivedStorage + 96));
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t famcs_invokeTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, const __CFString *, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v4)
    return v4(a1, CFSTR("AlternateFilterMonitorProperty_PathwayPriorityList"), a2);
  else
    return 4294954514;
}

void famcs_steeringManifestCustomURLReadCallback(uint64_t a1, uint64_t a2, uint64_t a3, OpaqueCMBlockBuffer *a4, char a5, __CFError *a6)
{
  _QWORD *DerivedStorage;
  int HTTPStatusCode;
  int appended;
  int v14;
  int Code;
  CFURLRef v16;
  uint64_t v17;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v19;
  unsigned int v20;
  const __CFString *v21;
  const __CFString *v22;
  CFDateRef v23;
  OpaqueCMBlockBuffer *v24;
  const void *v25;
  int v26;
  const void *v27;
  int BB;
  NSObject *v29;
  unsigned int v30;
  unsigned int v31;
  CFErrorRef v32;
  CFTypeRef cf;
  os_log_type_t type;
  unsigned int v35;
  int v36;
  const char *v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  const __CFString *v41;
  __int16 v42;
  const __CFString *v43;
  const __CFString *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v32 = 0;
  cf = 0;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (DerivedStorage[31] != a2)
  {
    appended = FigSignalErrorAt();
    goto LABEL_45;
  }
  HTTPStatusCode = FigCustomURLResponseInfoGetHTTPStatusCode();
  if (HTTPStatusCode)
  {
    appended = HTTPStatusCode;
    if (HTTPStatusCode != -17360)
      goto LABEL_45;
  }
  v14 = FigCustomURLResponseInfoCopyHTTPHeaders();
  if (v14 == -17360)
    appended = 0;
  else
    appended = v14;
  if (a6)
    goto LABEL_10;
  appended = FigCFHTTPCreateCFErrorFromHTTPStatusCode(0, &v32);
  if (appended)
  {
LABEL_45:
    v23 = 0;
    v24 = 0;
    v16 = 0;
    goto LABEL_46;
  }
  a6 = v32;
  if (v32)
  {
LABEL_10:
    Code = CFErrorGetCode(a6);
    goto LABEL_11;
  }
  Code = 0;
LABEL_11:
  if (FigCFHTTPIsStatusCodeRedirect(0))
  {
    v16 = FigCFHTTPCopyRedirectLocationFromHTTPHeaders((const __CFDictionary *)cf);
    if (v16)
    {
      v17 = CMBaseObjectGetDerivedStorage();
      if (dword_1EE2A30C8)
      {
        v35 = 0;
        type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v19 = v35;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if (v20)
        {
          v21 = *(const __CFString **)(v17 + 40);
          v22 = CFSTR("[]");
          if (*(_BYTE *)(v17 + 152))
            v22 = (const __CFString *)v16;
          else
            v21 = CFSTR("[]");
          v36 = 136315906;
          v37 = "famcs_redirectSteeringManifestRequest";
          v38 = 2048;
          v39 = a1;
          v40 = 2112;
          v41 = v21;
          v42 = 2112;
          v43 = v22;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v25 = *(const void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = v16;
      CFRetain(v16);
      if (v25)
        CFRelease(v25);
      v26 = famcs_clearNetworkRequestState();
      if (!v26)
      {
        appended = famcs_sendContentSteeringManifestRequest(a1, *(_QWORD *)(v17 + 40));
        if (appended)
        {
LABEL_32:
          v23 = 0;
          v24 = 0;
          goto LABEL_46;
        }
        goto LABEL_31;
      }
    }
    else
    {
      v26 = FigSignalErrorAt();
    }
    appended = v26;
    goto LABEL_32;
  }
  if (Code)
  {
    v44 = 0;
    if (FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent())
      v23 = FigCFHTTPCreateDateFromHTTPDateStringOrDelayString(v44);
    else
      v23 = 0;
    famcs_handleSteeringManifestNetworkError(a1, (uint64_t)v23, Code);
    v24 = 0;
    v16 = 0;
    appended = 1;
    goto LABEL_46;
  }
  if (a4)
  {
    appended = famcs_appendBlockBuffers(a1, a4, 0, 0);
    v23 = 0;
    if (appended)
    {
      v24 = 0;
      v16 = 0;
      goto LABEL_46;
    }
    v16 = 0;
  }
  else
  {
    v16 = 0;
  }
LABEL_31:
  if ((a5 & 1) == 0)
    goto LABEL_32;
  v27 = (const void *)DerivedStorage[29];
  if (v27)
    v24 = (OpaqueCMBlockBuffer *)CFRetain(v27);
  else
    v24 = 0;
  BB = famcs_clearNetworkRequestState();
  if (!BB)
    BB = famcs_evaluateContentSteeringManifestFromReadBB(a1, v24);
  appended = BB;
  v23 = 0;
LABEL_46:
  MEMORY[0x19402EA24](*DerivedStorage);
  if (appended && dword_1EE2A30C8)
  {
    v35 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v30 = v35;
    if (os_log_type_enabled(v29, type))
      v31 = v30;
    else
      v31 = v30 & 0xFFFFFFFE;
    if (v31)
    {
      v36 = 136315394;
      v37 = "famcs_steeringManifestCustomURLReadCallback";
      v38 = 2048;
      v39 = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v23)
    CFRelease(v23);
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  if (v24)
    CFRelease(v24);
}

void famcs_steeringRequestReloadTimerCallback(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  uint64_t v5;
  CFTypeRef cf[21];

  cf[20] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (!famcs_copyMonitorFromRetainProxy(a2, cf))
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (famcs_shouldSendSteeringManifestRequest())
    {
      if (dword_1EE2A30C8)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      famcs_sendContentSteeringManifestRequest(cf[0], DerivedStorage[5]);
    }
    else
    {
      if (dword_1EE2A30C8)
      {
        v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v5 = CMBaseObjectGetDerivedStorage();
      FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v5 + 176));
    }
    MEMORY[0x19402EA24](*DerivedStorage);
  }
  if (cf[0])
    CFRelease(cf[0]);
}

uint64_t famcs_setFilterForState()
{
  return 4294951681;
}

uint64_t famcs_setState()
{
  return 4294951681;
}

uint64_t famcs_copyFilterForCurrentState(uint64_t a1, _QWORD *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  CFTypeRef v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  v5 = (CFTypeRef)v4[3];
  if (v5)
    v5 = CFRetain(v5);
  *a2 = v5;
  MEMORY[0x19402EA24](*v4);
  return 0;
}

uint64_t MovieProxyDataCreateForByteStream(const __CFAllocator *a1, uint64_t a2, CFTypeRef *a3)
{
  CFURLRef v3;
  const __CFAllocator *v6;
  uint64_t v7;
  const __CFString *v8;
  uint64_t CMBaseObject;
  void (*v10)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *);
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *FileTypeForMovieFamilyExtension;
  uint64_t CFDataWithBlockBufferNoCopy;
  CFTypeRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  CFTypeRef v21;
  CMBlockBufferRef blockBufferOut;
  CFTypeRef cf[2];
  __int128 v24;
  CFURLRef url;
  void *ptr[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  CFTypeRef v30[14];

  v3 = (CFURLRef)a2;
  v21 = 0;
  blockBufferOut = 0;
  v20 = 0;
  if (!a2)
  {
    CFDataWithBlockBufferNoCopy = FigSignalErrorAt();
    goto LABEL_38;
  }
  if (!a3)
  {
    CFDataWithBlockBufferNoCopy = FigSignalErrorAt();
    v3 = 0;
    goto LABEL_38;
  }
  MovieUsesFragments(a2, &v20, 0);
  if (v20)
  {
    v30[0] = 0;
    url = 0;
    ptr[0] = 0;
    cf[0] = 0;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = MovieInformationCreate(*MEMORY[0x1E0C9AE00], 0, (uint64_t *)v30);
    if ((_DWORD)v7
      || (v7 = MoovParseByteStream((uint64_t)v30[0], 10, v3, 0), (_DWORD)v7)
      || (v7 = MovieHeaderMakerCreateWithMovieInformation(v6, v30[0], 2, ptr), (_DWORD)v7))
    {
      CFDataWithBlockBufferNoCopy = v7;
      v15 = 0;
      v12 = 0;
    }
    else
    {
      v8 = CFSTR("com.apple.quicktime-movie");
      CMBaseObject = CMByteStreamGetCMBaseObject();
      v10 = *(void (**)(uint64_t, _QWORD, const __CFAllocator *, CFURLRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
      if (v10 && (v10(CMBaseObject, *MEMORY[0x1E0CA2098], v6, &url), url))
      {
        v11 = CFURLCopyPathExtension(url);
        v12 = v11;
        if (v11)
        {
          FileTypeForMovieFamilyExtension = FigGetFileTypeForMovieFamilyExtension(v11);
          if (FileTypeForMovieFamilyExtension)
            v8 = FileTypeForMovieFamilyExtension;
        }
      }
      else
      {
        v12 = 0;
      }
      CFDataWithBlockBufferNoCopy = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)ptr[0], v6, (uint64_t)v8, url, (CMBlockBufferRef *)cf);
      if ((_DWORD)CFDataWithBlockBufferNoCopy)
      {
        v15 = 0;
      }
      else
      {
        v15 = cf[0];
        cf[0] = 0;
      }
    }
    if (url)
      CFRelease(url);
    if (v30[0])
      CFRelease(v30[0]);
    if (cf[0])
      CFRelease(cf[0]);
    if (v12)
      CFRelease(v12);
    MovieHeaderMakerRelease((const __CFAllocator **)ptr[0]);
    if ((_DWORD)CFDataWithBlockBufferNoCopy)
      goto LABEL_51;
  }
  else
  {
    v15 = 0;
  }
  memset(v30, 0, sizeof(v30));
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)ptr = 0u;
  url = 0;
  *(_OWORD *)cf = 0u;
  v24 = 0u;
  v16 = FigAtomStreamInitWithByteStream();
  if ((_DWORD)v16)
  {
    CFDataWithBlockBufferNoCopy = v16;
  }
  else
  {
    v17 = CMBlockBufferCreateEmpty(a1, 0x10u, 0, &url);
    v3 = url;
    if (!(_DWORD)v17)
    {
      v17 = FigAtomWriterInitWithBlockBuffer();
      v3 = url;
      if (!(_DWORD)v17)
      {
        cf[1] = url;
        if (v15)
          cf[0] = v15;
        v17 = ProcessChildAtoms((uint64_t)v30, (uint64_t)ptr, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))"voom", 1, (uint64_t (*)(_QWORD))TopLevelOmitFilter, (uint64_t)cf);
        v3 = url;
        if (!(_DWORD)v17)
        {
          v18 = CMBlockBufferCreateContiguous(a1, url, a1, 0, 0, 0, 0, &blockBufferOut);
          if ((_DWORD)v18)
          {
            CFDataWithBlockBufferNoCopy = v18;
          }
          else
          {
            CFDataWithBlockBufferNoCopy = FigCreateCFDataWithBlockBufferNoCopy();
            if (!(_DWORD)CFDataWithBlockBufferNoCopy)
            {
              *a3 = v21;
              v21 = 0;
            }
          }
          goto LABEL_36;
        }
      }
    }
    CFDataWithBlockBufferNoCopy = v17;
    if (v3)
      CFRelease(v3);
  }
LABEL_51:
  v3 = 0;
LABEL_36:
  if (v15)
    CFRelease(v15);
LABEL_38:
  if (v21)
    CFRelease(v21);
  if (v3)
    CFRelease(v3);
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return CFDataWithBlockBufferNoCopy;
}

uint64_t ProcessMovieAtom(_OWORD *a1, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  uint64_t result;
  _OWORD v8[7];

  if (*a4)
  {
    memset(v8, 0, sizeof(v8));
    result = FigAtomStreamInitWithBBuf();
    if ((_DWORD)result)
      return result;
    a1 = v8;
  }
  result = ProcessContainerAtom((uint64_t)a1, a2, 1836019574, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))"kart", 2, (uint64_t (*)(_QWORD))CommonOmitFilter, (uint64_t)a4);
  *a3 = 1;
  return result;
}

uint64_t ProcessChildAtoms(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t, char *, uint64_t), uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t CurrentAtomTypeAndDataLength;
  BOOL v14;
  uint64_t (**v15)(uint64_t, uint64_t, char *, uint64_t);
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  unsigned int Atom;
  uint64_t v21;
  char v23;
  CMBlockBufferRef theBuffer;
  uint64_t v25;
  unsigned int v26;

  v26 = 0;
  theBuffer = 0;
  v25 = 0;
  v23 = 0;
  v12 = a4 - 1;
  do
  {
    CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if ((_DWORD)CurrentAtomTypeAndDataLength)
    {
LABEL_35:
      v21 = CurrentAtomTypeAndDataLength;
      goto LABEL_32;
    }
    if (a4 < 1)
      goto LABEL_12;
    if (v26 != *(_DWORD *)a3)
    {
      v16 = 0;
      v15 = a3;
      while (v12 != v16)
      {
        v17 = *((_DWORD *)v15 + 4);
        v15 += 2;
        ++v16;
        if (v26 == v17)
        {
          v14 = v16 >= a4;
          goto LABEL_10;
        }
      }
LABEL_12:
      v18 = 0;
      v14 = 1;
      goto LABEL_13;
    }
    v14 = 0;
    v15 = a3;
LABEL_10:
    CurrentAtomTypeAndDataLength = v15[1](a1, a2, &v23, a6);
    if ((_DWORD)CurrentAtomTypeAndDataLength)
      goto LABEL_35;
    v18 = 1;
LABEL_13:
    if (v23)
    {
      v21 = 0;
      goto LABEL_32;
    }
    v19 = !v14;
    if (!a5)
      v19 = 1;
    if ((v19 & 1) == 0)
      v18 = a5(v26);
    if (!v18)
    {
      CurrentAtomTypeAndDataLength = FigAtomWriterBeginAtom();
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_35;
      if (v25)
      {
        CurrentAtomTypeAndDataLength = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_35;
        CMBlockBufferGetDataLength(theBuffer);
        CurrentAtomTypeAndDataLength = FigAtomWriterAppendBlockBufferData();
        if ((_DWORD)CurrentAtomTypeAndDataLength)
          goto LABEL_35;
        if (theBuffer)
          CFRelease(theBuffer);
        theBuffer = 0;
      }
      CurrentAtomTypeAndDataLength = FigAtomWriterEndAtom();
      if ((_DWORD)CurrentAtomTypeAndDataLength)
        goto LABEL_35;
    }
    Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  if (Atom == -12890)
    v21 = 0;
  else
    v21 = Atom;
LABEL_32:
  if (theBuffer)
    CFRelease(theBuffer);
  return v21;
}

BOOL TopLevelOmitFilter(int a1)
{
  return a1 != 1836019574 && a1 != 1718909296;
}

uint64_t ProcessTrackAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1953653099, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))"aidm", 2, (uint64_t (*)(_QWORD))CommonOmitFilter, a4);
}

uint64_t ProcessMetaAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1835365473, 0, 0, (uint64_t (*)(_QWORD))CommonOmitFilter, a4);
}

uint64_t ProcessContainerAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t, char *, uint64_t), uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7)
{
  uint64_t result;
  _OWORD v12[3];
  uint64_t v13;
  _OWORD v14[7];

  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  result = FigAtomStreamInitWithParent();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      result = FigAtomWriterInitWithParent();
      if (!(_DWORD)result)
      {
        result = ProcessChildAtoms((uint64_t)v14, (uint64_t)v12, a4, a5, a6, a7);
        if (!(_DWORD)result)
          return FigAtomWriterEndAtom();
      }
    }
  }
  return result;
}

BOOL CommonOmitFilter(int a1)
{
  return a1 == 1718773093;
}

uint64_t ProcessMediaAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1835297121, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))"fnim", 1, (uint64_t (*)(_QWORD))CommonOmitFilter, a4);
}

uint64_t ProcessMediaInfoAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ProcessContainerAtom(a1, a2, 1835626086, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))"lbts", 1, (uint64_t (*)(_QWORD))CommonOmitFilter, a4);
}

uint64_t ProcessSampleTableAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int destination;

  v5 = ProcessContainerAtom(a1, a2, 1937007212, (uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))"stts", 10, (uint64_t (*)(_QWORD))SampleTableOmitFilter, a4);
  if (!(_DWORD)v5)
  {
    destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a4 + 8), *(_QWORD *)(a4 + 16), 4uLL, &destination);
    destination = bswap32(*(_DWORD *)(a4 + 24));
    CMBlockBufferReplaceDataBytes(&destination, *(CMBlockBufferRef *)(a4 + 8), *(_QWORD *)(a4 + 16), 4uLL);
  }
  return v5;
}

uint64_t ProcessTimeToSampleNumAtom()
{
  uint64_t CurrentAtomData;
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;

  v7 = 0;
  v5 = 0;
  v6 = 0;
  v3 = 0u;
  v4 = 0u;
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!(_DWORD)CurrentAtomData)
  {
    CurrentAtomData = FigAtomWriterBeginAtom();
    if (!(_DWORD)CurrentAtomData)
    {
      CurrentAtomData = FigAtomWriterAppendData();
      if (!(_DWORD)CurrentAtomData)
        CurrentAtomData = FigAtomWriterEndAtom();
    }
  }
  v1 = CurrentAtomData;
  if (v7)
    CFRelease(v7);
  return v1;
}

uint64_t ProcessCompositionOffsetAtom()
{
  uint64_t CurrentAtomData;
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  CFTypeRef v8;

  v8 = 0;
  v7 = 0;
  v5 = 0;
  v6 = 0;
  v3 = 0u;
  v4 = 0u;
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!(_DWORD)CurrentAtomData)
  {
    v7 = bswap32(v7);
    CurrentAtomData = FigAtomWriterBeginAtom();
    if (!(_DWORD)CurrentAtomData)
    {
      CurrentAtomData = FigAtomWriterAppendData();
      if (!(_DWORD)CurrentAtomData)
        CurrentAtomData = FigAtomWriterEndAtom();
    }
  }
  v1 = CurrentAtomData;
  if (v8)
    CFRelease(v8);
  return v1;
}

uint64_t ProcessSampleToChunkAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CurrentAtomData;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  signed int v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  size_t lengthAtOffsetOut;
  char *dataPointerOut;
  uint64_t v25;
  __int128 v26;
  int v27;
  CMBlockBufferRef theBuffer;

  theBuffer = 0;
  v26 = 0uLL;
  v27 = 0;
  v25 = 0;
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!(_DWORD)CurrentAtomData)
  {
    v6 = bswap32(DWORD1(v26));
    if ((int)v6 >= 1)
    {
      lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      CurrentAtomData = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
      if ((_DWORD)CurrentAtomData)
        goto LABEL_22;
      CurrentAtomData = CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      if ((_DWORD)CurrentAtomData)
        goto LABEL_22;
      if (lengthAtOffsetOut != 12 * v6)
      {
LABEL_25:
        CurrentAtomData = FigSignalErrorAt();
        goto LABEL_22;
      }
      if (v6 >= 2)
      {
        v7 = 0;
        v8 = v6 - 1;
        v9 = (unsigned int *)dataPointerOut;
        v10 = dataPointerOut;
        while (1)
        {
          v11 = *((_DWORD *)v10 + 3);
          v10 += 12;
          v12 = bswap32(*v9);
          v13 = bswap32(v11);
          v14 = __OFSUB__(v13, v12);
          v15 = v13 - v12;
          if (v14)
            goto LABEL_25;
          v16 = (int)bswap32(v9[1]) * (uint64_t)v15;
          v17 = v16 != (int)v16;
          v14 = __OFADD__(v7, (_DWORD)v16);
          v7 += v16;
          v18 = v14;
          if (v17 || v18)
            goto LABEL_25;
          v9 = (unsigned int *)v10;
          if (!--v8)
            goto LABEL_17;
        }
      }
      v7 = 0;
LABEL_17:
      v19 = bswap32(*(_DWORD *)&dataPointerOut[12 * (v6 - 1) + 4]);
      v14 = __OFADD__(v19, v7);
      v20 = v19 + v7;
      if (v14)
        goto LABEL_25;
      *(_QWORD *)((char *)&v26 + 4) = 0x100000001000000;
      HIDWORD(v26) = bswap32(v20);
      v27 = 0x1000000;
    }
    CurrentAtomData = FigAtomWriterBeginAtom();
    if (!(_DWORD)CurrentAtomData)
    {
      FigAtomWriterGetAtomGlobalDataOffset();
      *(_QWORD *)(a4 + 16) = v25 + 12;
      CurrentAtomData = FigAtomWriterAppendData();
      if (!(_DWORD)CurrentAtomData)
        CurrentAtomData = FigAtomWriterEndAtom();
    }
  }
LABEL_22:
  v21 = CurrentAtomData;
  if (theBuffer)
    CFRelease(theBuffer);
  return v21;
}

uint64_t ProcessSampleSizeAtom(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CurrentAtomData;
  uint64_t v6;
  CMBlockBufferRef theBuffer;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  theBuffer = 0;
  CurrentAtomData = FigAtomStreamReadCurrentAtomData();
  if (!(_DWORD)CurrentAtomData)
  {
    *(_DWORD *)(a4 + 24) = bswap32(v10);
    CurrentAtomData = FigAtomWriterBeginAtom();
    if (!(_DWORD)CurrentAtomData)
    {
      CurrentAtomData = FigAtomWriterAppendData();
      if (!(_DWORD)CurrentAtomData)
        CurrentAtomData = FigAtomWriterEndAtom();
    }
  }
  v6 = CurrentAtomData;
  if (theBuffer)
    CFRelease(theBuffer);
  return v6;
}

uint64_t ProcessChunkOffsetAtom()
{
  uint64_t result;

  result = FigAtomWriterBeginAtom();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterAppendData();
    if (!(_DWORD)result)
      return FigAtomWriterEndAtom();
  }
  return result;
}

uint64_t ProcessChunkOffset64Atom()
{
  uint64_t result;

  result = FigAtomWriterBeginAtom();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterAppendData();
    if (!(_DWORD)result)
      return FigAtomWriterEndAtom();
  }
  return result;
}

uint64_t ProcessSampleDependencyAtom()
{
  uint64_t result;

  result = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (!(_DWORD)result)
  {
    result = FigAtomWriterBeginAtom();
    if (!(_DWORD)result)
    {
      if (CMBlockBufferGetDataLength(0) <= 0x1F4)
        CMBlockBufferGetDataLength(0);
      result = FigAtomWriterAppendBlockBufferData();
      if (!(_DWORD)result)
        return FigAtomWriterEndAtom();
    }
  }
  return result;
}

uint64_t ProcessSampleToGroupAtom()
{
  uint64_t result;

  result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!(_DWORD)result)
  {
    result = FigAtomStreamGetCurrentAtomVersionAndFlags();
    if (!(_DWORD)result)
      return FigSignalErrorAt();
  }
  return result;
}

uint64_t ProcessMOVCompactSampleToGroupAtom()
{
  return FigAtomStreamGetCurrentAtomTypeAndDataLength();
}

BOOL SampleTableOmitFilter(int a1)
{
  return a1 != 1937011556 && a1 != 1936158820;
}

uint64_t FigVCPInvalidatePrologue()
{
  uint64_t v0;

  v0 = 1;
  if (!FigAtomicCompareAndSwap32())
  {
    FigAtomicCompareAndSwap32();
    return 0;
  }
  return v0;
}

uint64_t FigVCPInvalidateEpilogue()
{
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPIsValid()
{
  return FigAtomicCompareAndSwap32();
}

BOOL FigVCPDirectionIsForwardOrPaused(int a1)
{
  return a1 >= 0;
}

BOOL FigVCPDirectionIsBackwardOrPaused(int a1)
{
  return a1 < 1;
}

CMTime *FigVCPGetFoldedTime@<X0>(CMTime *result@<X0>, uint64_t a2@<X1>, CMTime *a3@<X8>)
{
  CMTime *v5;
  CMTimeEpoch v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  CMTimeRange time1;
  CMTime time2;

  *(_OWORD *)&a3->value = *(_OWORD *)&result->value;
  a3->epoch = result->epoch;
  if ((*(_DWORD *)(a2 + 12) & 0x1D) == 1)
  {
    v5 = result;
    *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
    time1.start.epoch = *(_QWORD *)(a2 + 16);
    v9 = *MEMORY[0x1E0CA2E68];
    *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    time2.epoch = v6;
    result = (CMTime *)CMTimeCompare(&time1.start, &time2);
    if ((result & 0x80000000) == 0 && (*(_DWORD *)(a2 + 36) & 0x1D) == 1)
    {
      *(_OWORD *)&time1.start.value = *(_OWORD *)(a2 + 24);
      time1.start.epoch = *(_QWORD *)(a2 + 40);
      *(_OWORD *)&time2.value = v9;
      time2.epoch = v6;
      result = (CMTime *)CMTimeCompare(&time1.start, &time2);
      if ((int)result >= 1)
      {
        *(_OWORD *)&time1.start.value = *(_OWORD *)&v5->value;
        time1.start.epoch = v5->epoch;
        time2 = *(CMTime *)a2;
        result = (CMTime *)CMTimeCompare(&time1.start, &time2);
        if ((int)result >= 1)
        {
          v7 = *(_OWORD *)&v5->value;
          time2.epoch = v5->epoch;
          v8 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
          *(_OWORD *)&time1.start.epoch = v8;
          *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a2 + 32);
          *(_OWORD *)&time2.value = v7;
          return CMTimeFoldIntoRange(a3, &time2, &time1);
        }
      }
    }
  }
  return result;
}

uint64_t FigVCPGetFoldedTimeRanges(__int128 *a1, CMTime *a2, uint64_t a3, CMTime *a4, CMTime *a5, CMTime *a6, CMTime *a7)
{
  CMTimeEpoch v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CMTimeEpoch epoch;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  CMTime lhs;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime rhs;
  CMTime v35;
  CMTimeRange time1;
  CMTime time2;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;

  v41 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v40 = v41;
  v39 = v41;
  v38 = v41;
  if ((*((_BYTE *)a1 + 12) & 1) == 0)
    return FigSignalErrorAt();
  if ((*(_DWORD *)(a3 + 12) & 0x1D) != 1)
    goto LABEL_11;
  *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
  time1.start.epoch = *(_QWORD *)(a3 + 16);
  v29 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v14;
  if (CMTimeCompare(&time1.start, &time2) < 0)
    goto LABEL_11;
  if ((*(_DWORD *)(a3 + 36) & 0x1D) == 1
    && (v15 = (_OWORD *)(a3 + 24),
        *(_OWORD *)&time1.start.value = *(_OWORD *)(a3 + 24),
        time1.start.epoch = *(_QWORD *)(a3 + 40),
        *(_OWORD *)&time2.value = v29,
        time2.epoch = v14,
        CMTimeCompare(&time1.start, &time2) > 0))
  {
    *(_OWORD *)&time1.start.value = *a1;
    time1.start.epoch = *((_QWORD *)a1 + 2);
    time2 = *a2;
    if (!CMTimeCompare(&time1.start, &time2))
    {
      v23 = *a1;
      time2.epoch = *((_QWORD *)a1 + 2);
      v24 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
      *(_OWORD *)&time1.start.epoch = v24;
      *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
      *(_OWORD *)&time2.value = v23;
      FigVCPGetFoldedTime(&time2, (uint64_t)&time1, &v41);
      *(_OWORD *)&v40.value = *(_OWORD *)&v41.value;
      epoch = v41.epoch;
      goto LABEL_13;
    }
    v16 = *a1;
    time2.epoch = *((_QWORD *)a1 + 2);
    v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
    *(_OWORD *)&time1.start.epoch = v17;
    *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
    *(_OWORD *)&time2.value = v16;
    FigVCPGetFoldedTime(&time2, (uint64_t)&time1, &v41);
    *(_OWORD *)&time1.start.value = *a1;
    time1.start.epoch = *((_QWORD *)a1 + 2);
    time2 = *a2;
    if (CMTimeCompare(&time1.start, &time2) < 0)
    {
      v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
      *(_OWORD *)&time1.start.epoch = v25;
      *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
      CMTimeRangeGetEnd(&v35, &time1);
      *(_OWORD *)&time1.start.value = *(_OWORD *)&a2->value;
      time1.start.epoch = a2->epoch;
      if ((CMTimeCompare(&time1.start, &v35) & 0x80000000) == 0)
      {
        v26 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
        *(_OWORD *)&time1.start.epoch = v26;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
        CMTimeRangeGetEnd(&v40, &time1);
        v39 = *(CMTime *)a3;
        memset(&time2, 0, sizeof(time2));
        *(_OWORD *)&time1.start.value = *(_OWORD *)&a2->value;
        time1.start.epoch = a2->epoch;
        rhs = *(CMTime *)a1;
        CMTimeSubtract(&time2, &time1.start, &rhs);
        memset(&rhs, 0, sizeof(rhs));
        time1.start = v40;
        v33 = v41;
        CMTimeSubtract(&rhs, &time1.start, &v33);
        memset(&v33, 0, sizeof(v33));
        time1.start = time2;
        v32 = rhs;
        CMTimeSubtract(&v33, &time1.start, &v32);
        time1.start = v33;
        *(_OWORD *)&v32.value = *v15;
        v32.epoch = *(_QWORD *)(a3 + 40);
        if (CMTimeCompare(&time1.start, &v32) < 0)
        {
          *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
          time1.start.epoch = *(_QWORD *)(a3 + 16);
          v32 = v33;
          CMTimeAdd(&v38, &time1.start, &v32);
        }
        else
        {
          v27 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
          *(_OWORD *)&time1.start.epoch = v27;
          *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
          CMTimeRangeGetEnd(&v38, &time1);
        }
        goto LABEL_14;
      }
    }
    else
    {
      v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
      *(_OWORD *)&time1.start.epoch = v18;
      *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
      CMTimeRangeGetEnd(&v31, &time1);
      *(_OWORD *)&time1.start.value = *a1;
      time1.start.epoch = *((_QWORD *)a1 + 2);
      if ((CMTimeCompare(&time1.start, &v31) & 0x80000000) == 0)
      {
        v19 = *(_OWORD *)(a3 + 16);
        v40 = *(CMTime *)a3;
        v20 = *(_OWORD *)(a3 + 32);
        *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
        *(_OWORD *)&time1.start.epoch = v19;
        *(_OWORD *)&time1.duration.timescale = v20;
        CMTimeRangeGetEnd(&v39, &time1);
        memset(&time2, 0, sizeof(time2));
        *(_OWORD *)&time1.start.value = *a1;
        time1.start.epoch = *((_QWORD *)a1 + 2);
        rhs = *a2;
        CMTimeSubtract(&time2, &time1.start, &rhs);
        memset(&rhs, 0, sizeof(rhs));
        time1.start = v41;
        v33 = *(CMTime *)a3;
        CMTimeSubtract(&rhs, &time1.start, &v33);
        memset(&v33, 0, sizeof(v33));
        time1.start = time2;
        v32 = rhs;
        CMTimeSubtract(&v33, &time1.start, &v32);
        time1.start = v33;
        *(_OWORD *)&v32.value = *v15;
        v32.epoch = *(_QWORD *)(a3 + 40);
        if (CMTimeCompare(&time1.start, &v32) < 0)
        {
          v28 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)&time1.start.value = *(_OWORD *)a3;
          *(_OWORD *)&time1.start.epoch = v28;
          *(_OWORD *)&time1.duration.timescale = *(_OWORD *)(a3 + 32);
          CMTimeRangeGetEnd(&lhs, &time1);
          time1.start = v33;
          CMTimeSubtract(&v38, &lhs, &time1.start);
        }
        else
        {
          v38 = *(CMTime *)a3;
        }
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_11:
    v41 = *(CMTime *)a1;
  }
  *(_OWORD *)&v40.value = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
LABEL_13:
  v40.epoch = epoch;
LABEL_14:
  if (a4)
    *a4 = v41;
  if (a5)
    *a5 = v40;
  if (a6)
    *a6 = v39;
  if (a7)
    *a7 = v38;
  return 0;
}

uint64_t FigVCPPreprocessParametersGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register);
  return sFigVCPPreprocessParametersID;
}

uint64_t fvcp_preprocessParameters_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPPreprocessParametersID = result;
  return result;
}

uint64_t FigVCPPreprocessParametersSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t (*Value)(uint64_t, uint64_t);

  MEMORY[0x19402F294](&fvcp_preprocessParameters_getSetPropertyDispatchDictionary_sSetPropertyDispatchDictionaryOnce, fvcp_preprocessParameters_initSetPropertyDispatchDictionary);
  Value = (uint64_t (*)(uint64_t, uint64_t))CFDictionaryGetValue((CFDictionaryRef)fvcp_preprocessParameters_setPropertyDispatchDictionary, a2);
  if (Value)
    return Value(a1, a3);
  else
    return 4294954512;
}

float FigVCPPreprocessParametersGetRenderScale(uint64_t a1)
{
  return *(float *)(a1 + 16);
}

uint64_t FigVCPPreprocessParametersGetPixelBufferAttributes(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t FigVCPPreprocessParametersGetYCbCrMatrix(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t FigVCPPreprocessParametersGetColorPrimaries(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigVCPPreprocessParametersGetTransferFunction(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t FigVCPPreprocessParametersGetColorConformanceLevel(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t FigVCPPreprocessParametersCreate(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Mutable;
  CFMutableDictionaryRef v6;
  _DWORD *v7;
  CFTypeRef cf;

  cf = 0;
  if (!a3)
    return FigSignalErrorAt();
  Mutable = FigVCPPreprocessParametersCreateMutable((uint64_t)a1, (uint64_t *)&cf);
  if ((_DWORD)Mutable)
  {
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v6 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    FigCFDictionarySetInt();
    v7 = cf;
    *((_QWORD *)cf + 3) = v6;
    v7[16] = 100;
    *a3 = v7;
  }
  return Mutable;
}

uint64_t FigVCPPreprocessParametersCreateMutable(uint64_t a1, uint64_t *a2)
{
  uint64_t Instance;

  if (!a2)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  *(_DWORD *)(Instance + 16) = 1065353216;
  *a2 = Instance;
  return 0;
}

uint64_t FigVCPPreprocessParametersCreateCopy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;

  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = Instance;
  *(_DWORD *)(Instance + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(CFTypeRef *)(a2 + 24);
  if (v7)
    v7 = CFRetain(v7);
  *(_QWORD *)(v6 + 24) = v7;
  v8 = *(CFTypeRef *)(a2 + 32);
  if (v8)
    v8 = CFRetain(v8);
  *(_QWORD *)(v6 + 32) = v8;
  v9 = *(CFTypeRef *)(a2 + 40);
  if (v9)
    v9 = CFRetain(v9);
  *(_QWORD *)(v6 + 40) = v9;
  v10 = *(CFTypeRef *)(a2 + 48);
  if (v10)
    v10 = CFRetain(v10);
  *(_QWORD *)(v6 + 48) = v10;
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(a2 + 64);
  *a3 = v6;
  return 0;
}

uint64_t FigVCPSourceInvalidate(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  if (!CMBaseObjectGetDerivedStorage() || !FigVCPInvalidatePrologue())
    return 0;
  if (a1)
  {
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
    if (v2)
      v3 = v2(a1);
    else
      v3 = 4294954514;
  }
  else
  {
    v3 = 4294954516;
  }
  FigAtomicCompareAndSwap32();
  return v3;
}

uint64_t FigVCPSourceStartOver(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v2)
    return v2(a1);
  else
    return 4294954514;
}

uint64_t FigVCPSourceCheckSampleAvailability(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t);
  __int128 v14;
  uint64_t v15;

  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 24);
  if (!v12)
    return 4294954514;
  v14 = *a4;
  v15 = *((_QWORD *)a4 + 2);
  return v12(a1, a2, a3, &v14, a5, a6);
}

uint64_t FigVCPSourceSetCurrentTime(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, __int128 *);
  __int128 v8;
  uint64_t v9;

  v6 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v6)
    return 4294954514;
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  return v6(a1, a2, &v8);
}

uint64_t FigVCPSourceCopyConformedImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVCPSourceCopySampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVCPSourceCopyConformedTimedImages(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (v8)
    return v8(a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVCPSourceCopyTimedSampleBuffers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v6)
    return v6(a1, a2, a3);
  else
    return 4294954514;
}

uint64_t FigVCPSourceHasNoMoreSamples(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v2)
    return v2(a1);
  else
    return 0;
}

uint64_t FigVCPSourceGetEarliestSequentialSampleTimeAfterTime(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t, __int128 *, uint64_t, uint64_t);
  __int128 v10;
  uint64_t v11;

  v8 = *(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v8)
    return 4294954514;
  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  return v8(a1, &v10, a3, a4);
}

uint64_t FigVCPSourceThrottleForBackground(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v5)(uint64_t, uint64_t);

  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(result + 16) + 72);
  if (v5)
    return v5(a1, a2);
  return result;
}

uint64_t FigVCPSourceCopyPerformanceDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v4)
    return v4(a1, a2);
  else
    return 4294954514;
}

uint64_t FigVCPSourceSetPreprocessParameters(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v4;
  const void *v5;
  const void *v6;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 16) == 1986618469)
  {
    v4 = result;
    MEMORY[0x19402EEEC](*(_QWORD *)(result + 24));
    if (!FigCFEqual())
    {
      v5 = *(const void **)(v4 + 32);
      *(_QWORD *)(v4 + 32) = a2;
      if (a2)
        CFRetain(a2);
      if (v5)
        CFRelease(v5);
      v6 = *(const void **)(v4 + 40);
      if (v6)
      {
        CFRelease(v6);
        *(_QWORD *)(v4 + 40) = 0;
      }
      ++*(_DWORD *)(v4 + 48);
    }
    JUMPOUT(0x19402EF04);
  }
  return result;
}

uint64_t FigVCPSourceRequiresWindowedSampling(uint64_t a1, int a2)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BOOL4 IsZeroWhenNotSeeking;
  _OWORD v8[6];

  result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    v4 = *(_OWORD *)(result + 168);
    v8[2] = *(_OWORD *)(result + 152);
    v8[3] = v4;
    v5 = *(_OWORD *)(result + 200);
    v8[4] = *(_OWORD *)(result + 184);
    v8[5] = v5;
    v6 = *(_OWORD *)(result + 136);
    v8[0] = *(_OWORD *)(result + 120);
    v8[1] = v6;
    if (a2)
      IsZeroWhenNotSeeking = FigVideoCompositionTimeWindowDurationIsZeroWhenNotSeeking((uint64_t)v8);
    else
      IsZeroWhenNotSeeking = FigVideoCompositionTimeWindowDurationIsZeroWhenSeeking((uint64_t)v8);
    return !IsZeroWhenNotSeeking;
  }
  return result;
}

uint64_t FigVCPSourceHoldTriggerUntilAvailabilityChanges()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = FigAtomicCompareAndSwap32();
  if ((_DWORD)result)
    return FigAtomicCompareAndSwap32();
  return result;
}

uint64_t FigVCPSourceShouldTriggerWhenAvailabilityChanges()
{
  uint64_t result;

  CMBaseObjectGetDerivedStorage();
  result = FigAtomicCompareAndSwap32();
  if ((_DWORD)result)
    return FigAtomicCompareAndSwap32();
  return result;
}

uint64_t FigVCPSourceGetSourceImageAtCurrentTime()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 88);
}

uint64_t FigVCPSourceGetTrackID()
{
  return *(unsigned int *)CMBaseObjectGetDerivedStorage();
}

uint64_t FigVCPSourceGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t fvcp_source_createCommon(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v14;
  uint64_t DerivedStorage;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t (*v20)(const void *, void (*)(uint64_t, CMTime *, uint64_t, uint64_t), _QWORD);
  uint64_t (*v21)(const void *, void (*)(uint64_t, uint64_t), _QWORD);
  uint64_t v22;

  if (a2)
  {
    if (!a4 || !a8 || !a6)
      return FigSignalErrorAt();
    MEMORY[0x19402F294](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);
    v14 = CMDerivedObjectCreate();
    if (!(_DWORD)v14)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(_DWORD *)DerivedStorage = a2;
      *(_QWORD *)(DerivedStorage + 24) = FigSimpleMutexCreate();
      *(_DWORD *)(DerivedStorage + 104) = 0;
      *(_QWORD *)(DerivedStorage + 8) = a7;
      v16 = CMBaseObjectGetDerivedStorage();
      *(_QWORD *)(v16 + 216) = CFRetain(a4);
      *(_QWORD *)(v16 + 224) = 0;
      *(_DWORD *)(v16 + 16) = a3;
      v17 = MEMORY[0x1E0CA2E18];
      v18 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)(v16 + 240) = *MEMORY[0x1E0CA2E18];
      v19 = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v16 + 256) = v19;
      *(_OWORD *)(v16 + 264) = v18;
      *(_QWORD *)(v16 + 280) = v19;
      *(_QWORD *)(v16 + 288) = a5;
      *(_QWORD *)(v16 + 232) = FigSimpleMutexCreate();
      *(_QWORD *)(v16 + 296) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      v20 = *(uint64_t (**)(const void *, void (*)(uint64_t, CMTime *, uint64_t, uint64_t), _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (!v20)
        return 4294954514;
      v14 = v20(a4, fvcp_source_sourceImageAvailable, 0);
      if (!(_DWORD)v14)
      {
        v21 = *(uint64_t (**)(const void *, void (*)(uint64_t, uint64_t), _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v21)
        {
          v14 = v21(a4, fvcp_source_noMoreImages, 0);
          if (!(_DWORD)v14)
          {
            CMNotificationCenterGetDefaultLocalCenter();
            v14 = FigNotificationCenterAddWeakListener();
            if (!(_DWORD)v14)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              v22 = FigNotificationCenterAddWeakListener();
              if (!(_DWORD)v22)
                *a8 = 0;
              return v22;
            }
          }
          return v14;
        }
        return 4294954514;
      }
    }
    return v14;
  }
  return FigSignalErrorAt();
}

uint64_t FigVCPVisualContextSourceCreateWithSamplingWindow(const __CFAllocator *a1, int a2, int a3, const void *a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v11;
  uint64_t DerivedStorage;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v21[6];
  CFTypeRef v22;

  v22 = 0;
  v11 = fvcp_source_createCommon((uint64_t)a1, a2, a3, a4, a6, a7, a8, &v22);
  if (!(_DWORD)v11)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v13 = a5[3];
    v21[2] = a5[2];
    v21[3] = v13;
    v14 = a5[5];
    v21[4] = a5[4];
    v21[5] = v14;
    v15 = a5[1];
    v21[0] = *a5;
    v21[1] = v15;
    if (FigVideoCompositionTimeWindowDurationIsZero((uint64_t)v21))
    {
      if (a9)
      {
LABEL_4:
        *a9 = v22;
        return v11;
      }
    }
    else
    {
      v16 = *a5;
      *(_OWORD *)(DerivedStorage + 136) = a5[1];
      *(_OWORD *)(DerivedStorage + 120) = v16;
      v17 = a5[2];
      v18 = a5[3];
      v19 = a5[4];
      *(_OWORD *)(DerivedStorage + 200) = a5[5];
      *(_OWORD *)(DerivedStorage + 184) = v19;
      *(_OWORD *)(DerivedStorage + 168) = v18;
      *(_OWORD *)(DerivedStorage + 152) = v17;
      *(_QWORD *)(DerivedStorage + 328) = FigSimpleMutexCreate();
      *(_QWORD *)(DerivedStorage + 336) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      if (a9)
        goto LABEL_4;
    }
  }
  if (v22)
    CFRelease(v22);
  return v11;
}

uint64_t FigVCPCoreAnimationSourceCreate(const __CFAllocator *a1, int a2, const void *a3, const void *a4, uint64_t a5, CFTypeRef *a6, double a7, double a8)
{
  uint64_t v16;
  uint64_t DerivedStorage;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  CFTypeRef v21;
  const void *v23;
  CFTypeRef cf;

  v23 = 0;
  cf = 0;
  if (!a6 || !a2 || !a3)
  {
    v16 = FigSignalErrorAt();
    goto LABEL_16;
  }
  MEMORY[0x19402F294](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);
  v16 = CMDerivedObjectCreate();
  if ((_DWORD)v16)
  {
LABEL_16:
    v19 = v16;
    goto LABEL_12;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)DerivedStorage = a2;
  *(_QWORD *)(DerivedStorage + 24) = FigSimpleMutexCreate();
  *(_DWORD *)(DerivedStorage + 104) = 0;
  *(_QWORD *)(DerivedStorage + 8) = a5;
  v18 = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(v18 + 16) = 1986618469;
  v19 = FigVCPPreprocessParametersCreate(a1, 1111970369, &v23);
  v20 = v23;
  if (!(_DWORD)v19)
  {
    *(_QWORD *)(v18 + 32) = v23;
    v23 = 0;
    *(double *)(v18 + 240) = a7;
    *(double *)(v18 + 248) = a8;
    *(_QWORD *)(v18 + 256) = CFRetain(a3);
    if (a4)
      v21 = CFRetain(a4);
    else
      v21 = 0;
    *(_QWORD *)(v18 + 264) = v21;
    *(_QWORD *)(v18 + 288) = 0x7FFFFFFFLL;
    v20 = v23;
    *a6 = cf;
    cf = 0;
  }
  if (v20)
    CFRelease(v20);
LABEL_12:
  if (cf)
    CFRelease(cf);
  return v19;
}

uint64_t FigVCPBufferQueueSourceCreate(const __CFAllocator *a1, int a2, const void *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v16;
  const void *v17;
  uint64_t DerivedStorage;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v32[6];
  const void *v33;

  v33 = 0;
  if (!a2 || !a3 || !a9 || !a7)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPSourceGetClassID_sRegisterFigVCPSourceBaseTypeOnce, fvcp_source_RegisterFigVCPSourceBaseType);
  v16 = CMDerivedObjectCreate();
  v17 = v33;
  if ((_DWORD)v16)
    goto LABEL_12;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)DerivedStorage = a2;
  *(_QWORD *)(DerivedStorage + 24) = FigSimpleMutexCreate();
  *(_DWORD *)(DerivedStorage + 104) = 0;
  *(_QWORD *)(DerivedStorage + 8) = a8;
  v19 = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(v19 + 216) = CFRetain(a3);
  *(_QWORD *)(v19 + 224) = 0;
  *(_BYTE *)(v19 + 264) = 0;
  v20 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(v19 + 268) = *(_OWORD *)a4;
  *(_QWORD *)(v19 + 284) = v20;
  v21 = MEMORY[0x1E0CA2E18];
  v22 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(v19 + 304) = *MEMORY[0x1E0CA2E18];
  v23 = *(_QWORD *)(v21 + 16);
  *(_QWORD *)(v19 + 320) = v23;
  *(_OWORD *)(v19 + 328) = v22;
  *(_QWORD *)(v19 + 344) = v23;
  *(_QWORD *)(v19 + 352) = a6;
  *(_QWORD *)(v19 + 296) = FigSimpleMutexCreate();
  *(_QWORD *)(v19 + 232) = FigSimpleMutexCreate();
  *(_QWORD *)(v19 + 360) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v24 = a5[3];
  v32[2] = a5[2];
  v32[3] = v24;
  v25 = a5[5];
  v32[4] = a5[4];
  v32[5] = v25;
  v26 = a5[1];
  v32[0] = *a5;
  v32[1] = v26;
  if (!FigVideoCompositionTimeWindowDurationIsZero((uint64_t)v32))
  {
    v27 = *a5;
    *(_OWORD *)(v19 + 136) = a5[1];
    *(_OWORD *)(v19 + 120) = v27;
    v28 = a5[2];
    v29 = a5[3];
    v30 = a5[4];
    *(_OWORD *)(v19 + 200) = a5[5];
    *(_OWORD *)(v19 + 184) = v30;
    *(_OWORD *)(v19 + 168) = v29;
    *(_OWORD *)(v19 + 152) = v28;
    *(_QWORD *)(v19 + 256) = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  v16 = FigNotificationCenterAddWeakListener();
  v17 = v33;
  if ((_DWORD)v16)
  {
LABEL_12:
    if (v17)
      CFRelease(v17);
  }
  else
  {
    *a9 = v33;
  }
  return v16;
}

uint64_t fvcp_bq_source_resetOutput()
{
  uint64_t DerivedStorage;
  uint64_t result;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  const void *v5;
  __CFArray *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = FigAtomicCompareAndSwap32();
  if ((_DWORD)result)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 296));
    v2 = MEMORY[0x1E0CA2E18];
    v3 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 304) = *MEMORY[0x1E0CA2E18];
    v4 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(DerivedStorage + 320) = v4;
    *(_OWORD *)(DerivedStorage + 328) = v3;
    *(_QWORD *)(DerivedStorage + 344) = v4;
    FigAtomicCompareAndSwap32();
    FigAtomicCompareAndSwap32();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 296));
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
    v5 = *(const void **)(DerivedStorage + 240);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 240) = 0;
    }
    v6 = *(__CFArray **)(DerivedStorage + 256);
    if (v6)
      CFArrayRemoveAllValues(v6);
    result = MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
    *(_BYTE *)(DerivedStorage + 264) = 0;
  }
  return result;
}

uint64_t FigVCPPendingFrameGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPPendingFrameGetTypeID_sRegisterFigVCPPendingFrameOnce, fvcp_pendingFrame_Register);
  return sFigVCPPendingFrameID;
}

uint64_t fvcp_pendingFrame_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPPendingFrameID = result;
  return result;
}

__n128 FigVCPPendingFrameGetFrameTime@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[2];
  *a2 = result;
  a2[1].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

__n128 FigVCPPendingFrameGetFoldedFrameTime@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 56);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 72);
  return result;
}

uint64_t FigVCPPendingFrameGetCompletionStatus(uint64_t a1)
{
  uint64_t result;

  if (!FigAtomicCompareAndSwap32() && !FigAtomicCompareAndSwap32())
    return 4294954989;
  result = FigAtomicCompareAndSwapPtr();
  if ((_DWORD)result)
    return *(unsigned int *)(a1 + 176);
  return result;
}

uint64_t FigVCPPendingFrameGetOrder(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t FigVCPPendingFrameIsImmediateFrame(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t FigVCPPendingFrameGetComposedFrame(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160);
}

uint64_t FigVCPPendingFrameSkipCoreAnimationPostProcessing(uint64_t a1)
{
  CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("EnablePostProcessing"));
  return FigCFEqual();
}

void FigVCPPendingFrameReleaseAndClearSourceFrames(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t i;
  const void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t j;
  const void *v11;
  void *v12;
  void *v13;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(const void **)(a1 + 96);
    if (v2)
    {
      CFRelease(v2);
      *(_QWORD *)(a1 + 96) = 0;
    }
    v3 = *(const void **)(a1 + 104);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 104) = 0;
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 112);
    if (v4 >= 1)
    {
      for (i = 0; i < v4; ++i)
      {
        v6 = *(const void **)(*(_QWORD *)(a1 + 128) + 8 * i);
        if (v6)
        {
          CFRelease(v6);
          *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * i) = 0;
          v4 = *(_QWORD *)(a1 + 112);
        }
      }
    }
    v7 = *(void **)(a1 + 128);
    if (v7)
    {
      *(_QWORD *)(a1 + 128) = 0;
      free(v7);
    }
    v8 = *(void **)(a1 + 120);
    if (v8)
    {
      *(_QWORD *)(a1 + 120) = 0;
      free(v8);
    }
    *(_QWORD *)(a1 + 112) = 0;
    v9 = *(_QWORD *)(a1 + 136);
    if (v9 >= 1)
    {
      for (j = 0; j < v9; ++j)
      {
        v11 = *(const void **)(*(_QWORD *)(a1 + 152) + 8 * j);
        if (v11)
        {
          CFRelease(v11);
          *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * j) = 0;
          v9 = *(_QWORD *)(a1 + 136);
        }
      }
    }
    v12 = *(void **)(a1 + 152);
    if (v12)
    {
      *(_QWORD *)(a1 + 152) = 0;
      free(v12);
    }
    v13 = *(void **)(a1 + 144);
    if (v13)
    {
      *(_QWORD *)(a1 + 144) = 0;
      free(v13);
    }
    *(_QWORD *)(a1 + 136) = 0;
  }
}

uint64_t FigVCPPendingFrameGetCompositionStartTime(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

uint64_t FigVCPPendingFrameCreateWithWindowedSamples(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, char a6, int a7, int a8, char a9, CFTypeRef cf, const void *a11, uint64_t *a12)
{
  uint64_t v12;
  CFTypeRef v13;
  uint64_t v14;
  CFTypeRef v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = 0;
  v19 = *(_OWORD *)a4;
  v20 = *(_QWORD *)(a4 + 16);
  v17 = *(_OWORD *)a5;
  v18 = *(_QWORD *)(a5 + 16);
  v12 = figvcp_pendingFrame_createCommon(a1, a2, a3, &v19, &v17, a6, a7, a8, a9, &v21);
  if ((_DWORD)v12)
  {
    FigSignalErrorAt();
    v14 = v21;
    if (!v21)
      return v12;
LABEL_11:
    CFRelease((CFTypeRef)v14);
    return v12;
  }
  if (cf)
    v13 = CFRetain(cf);
  else
    v13 = 0;
  v14 = v21;
  *(_QWORD *)(v21 + 96) = v13;
  if (a11)
  {
    v15 = CFRetain(a11);
    v14 = v21;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)(v14 + 104) = v15;
  *(_BYTE *)(v14 + 88) = 1;
  if (!a12)
    goto LABEL_11;
  *a12 = v14;
  return v12;
}

uint64_t figvcp_pendingFrame_createCommon(uint64_t a1, int a2, const void *a3, __int128 *a4, __int128 *a5, char a6, int a7, int a8, char a9, uint64_t *a10)
{
  uint64_t Instance;
  uint64_t v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;

  if (!a3 || (*((_DWORD *)a4 + 3) & 0x1D) != 1 || (*((_DWORD *)a5 + 3) & 1) != 0 && (*((_DWORD *)a5 + 3) & 0x1D) != 1)
    return FigSignalErrorAt();
  if (!a10)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPPendingFrameGetTypeID_sRegisterFigVCPPendingFrameOnce, fvcp_pendingFrame_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v18 = Instance;
  *(_DWORD *)(Instance + 16) = a2;
  *(_QWORD *)(Instance + 24) = CFRetain(a3);
  v19 = *a4;
  *(_QWORD *)(v18 + 48) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(v18 + 32) = v19;
  if ((*((_DWORD *)a5 + 3) & 1) != 0)
    v20 = a5;
  else
    v20 = a4;
  v21 = *v20;
  *(_QWORD *)(v18 + 72) = *((_QWORD *)v20 + 2);
  *(_OWORD *)(v18 + 56) = v21;
  *(_BYTE *)(v18 + 80) = a6;
  *(_DWORD *)(v18 + 84) = a7;
  *(_DWORD *)(v18 + 216) = a8;
  *(_BYTE *)(v18 + 180) = a9;
  *(_QWORD *)(v18 + 224) = FigGetUpTimeNanoseconds();
  *a10 = v18;
  return 0;
}

uint64_t FigVCPPendingFrameCreate(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, char a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16)
{
  uint64_t v23;
  void *v24;
  void *v25;
  CFTypeRef *v26;
  CFTypeRef *v27;
  uint64_t i;
  CFTypeRef v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  CFTypeRef *v33;
  CFTypeRef *v34;
  uint64_t j;
  CFTypeRef v36;
  uint64_t v37;
  _QWORD *v38;
  CFTypeRef *v40;
  CFTypeRef *v41;
  char v42;
  uint64_t v43;
  int v44;
  const void *v45;
  _QWORD *v46;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  CFTypeRef v52[2];

  v52[0] = 0;
  if (!a3
    || (*(_DWORD *)(a4 + 12) & 0x1D) != 1
    || (*(_DWORD *)(a5 + 12) & 1) != 0 && (*(_DWORD *)(a5 + 12) & 0x1D) != 1
    || !a16)
  {
    goto LABEL_31;
  }
  v23 = a10;
  if (a10 < 1)
  {
    v45 = a3;
    v46 = a16;
    v43 = a1;
    v44 = a2;
    v25 = 0;
    v27 = 0;
    goto LABEL_19;
  }
  if ((unint64_t)a10 >> 62 || !(4 * a10) || (v24 = malloc_type_malloc(4 * a10, 0x5CC9CBA6uLL)) == 0)
  {
LABEL_31:
    v37 = FigSignalErrorAt();
LABEL_35:
    v25 = 0;
LABEL_38:
    free(v25);
    v32 = 0;
    goto LABEL_39;
  }
  v25 = v24;
  v46 = a16;
  if ((unint64_t)a10 >> 61
    || !(8 * a10)
    || (v26 = (CFTypeRef *)malloc_type_malloc(8 * a10, 0x5CC9CBA6uLL)) == 0)
  {
    v37 = FigSignalErrorAt();
    goto LABEL_38;
  }
  v27 = v26;
  v43 = a1;
  v44 = a2;
  v45 = a3;
  for (i = 0; i != a10; ++i)
  {
    *((_DWORD *)v25 + i) = *(_DWORD *)(a11 + 4 * i);
    v29 = *(CFTypeRef *)(a12 + 8 * i);
    if (v29)
      v29 = CFRetain(v29);
    v27[i] = v29;
  }
LABEL_19:
  v30 = a13;
  if (a13 < 1)
  {
    v32 = 0;
    v34 = 0;
    goto LABEL_33;
  }
  if ((unint64_t)a13 >> 62 || !(4 * a13) || (v31 = malloc_type_malloc(4 * a13, 0x5CC9CBA6uLL)) == 0)
  {
    v37 = FigSignalErrorAt();
    v32 = 0;
    goto LABEL_43;
  }
  v32 = v31;
  if ((unint64_t)a13 >> 61
    || !(8 * a13)
    || (v33 = (CFTypeRef *)malloc_type_malloc(8 * a13, 0x5CC9CBA6uLL)) == 0)
  {
    v37 = FigSignalErrorAt();
LABEL_43:
    v34 = 0;
    if (!v27)
      goto LABEL_50;
LABEL_44:
    if (a10 >= 1)
    {
      v40 = v27;
      do
      {
        if (*v40)
          CFRelease(*v40);
        ++v40;
        --v23;
      }
      while (v23);
    }
    free(v27);
    goto LABEL_50;
  }
  v34 = v33;
  v42 = a6;
  for (j = 0; j != a13; ++j)
  {
    v32[j] = *(_DWORD *)(a14 + 4 * j);
    v36 = *(CFTypeRef *)(a15 + 8 * j);
    if (v36)
      v36 = CFRetain(v36);
    v34[j] = v36;
  }
  a6 = v42;
LABEL_33:
  v50 = *(_OWORD *)a4;
  v51 = *(_QWORD *)(a4 + 16);
  v48 = *(_OWORD *)a5;
  v49 = *(_QWORD *)(a5 + 16);
  v37 = figvcp_pendingFrame_createCommon(v43, v44, v45, &v50, &v48, a6, a7, a8, a9, (uint64_t *)v52);
  if (!(_DWORD)v37)
  {
    v38 = v52[0];
    *((_QWORD *)v52[0] + 14) = a10;
    v38[15] = v25;
    v38[16] = v27;
    v38[17] = a13;
    v38[18] = v32;
    v38[19] = v34;
    *v46 = v38;
    v52[0] = 0;
    goto LABEL_35;
  }
  FigSignalErrorAt();
  if (v27)
    goto LABEL_44;
LABEL_50:
  free(v25);
  if (v34)
  {
    if (a13 >= 1)
    {
      v41 = v34;
      do
      {
        if (*v41)
          CFRelease(*v41);
        ++v41;
        --v30;
      }
      while (v30);
    }
    free(v34);
  }
LABEL_39:
  free(v32);
  if (v52[0])
    CFRelease(v52[0]);
  return v37;
}

uint64_t FigVCPPendingFrameShouldGenerateHDRStats(uint64_t a1, CVBufferRef buffer)
{
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef v6;
  BOOL v7;

  if (buffer)
  {
    if ((*(_BYTE *)(a1 + 184) & 1) != 0)
    {
      v4 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8D68], 0);
      v5 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8E98], 0);
      v6 = CVBufferCopyAttachment(buffer, (CFStringRef)*MEMORY[0x1E0CA8EE8], 0);
      v7 = FigCFEqual() && FigCFEqual() && FigCFEqual();
      *(_BYTE *)(a1 + 180) = v7;
      if (v4)
        CFRelease(v4);
      if (v5)
        CFRelease(v5);
      if (v6)
        CFRelease(v6);
    }
    else
    {
      *(_BYTE *)(a1 + 180) = 0;
    }
  }
  return *(unsigned __int8 *)(a1 + 180);
}

void FigVCPPendingFrameSetRenderedFrame(uint64_t a1, CFTypeRef cf)
{
  __CVBuffer *v3;
  CFTypeRef v4;
  uint64_t v5;
  CFTypeRef v6;
  const void *v7;

  if (cf)
  {
    v3 = (__CVBuffer *)CFRetain(cf);
    *(_QWORD *)(a1 + 168) = v3;
    if (v3 && !*(_BYTE *)(a1 + 88))
    {
      v4 = CVBufferCopyAttachment(v3, CFSTR("SceneIllumination"), 0);
      if (v4)
      {
        v7 = v4;
LABEL_13:
        CFRelease(v7);
        return;
      }
      if (*(uint64_t *)(a1 + 112) >= 1)
      {
        v5 = 0;
        while (1)
        {
          v6 = CVBufferCopyAttachment(*(CVBufferRef *)(*(_QWORD *)(a1 + 128) + 8 * v5), CFSTR("SceneIllumination"), 0);
          if (v6)
            break;
          if (++v5 >= *(_QWORD *)(a1 + 112))
            return;
        }
        v7 = v6;
        CVBufferSetAttachment(*(CVBufferRef *)(a1 + 168), CFSTR("SceneIllumination"), v6, kCVAttachmentMode_ShouldPropagate);
        goto LABEL_13;
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 168) = 0;
  }
}

uint64_t FigVCPPendingFrameSetRenderComplete()
{
  FigAtomicCompareAndSwap32();
  FigAtomicCompareAndSwap32();
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPPendingFrameGetRenderedFrameWithHDRMetadata(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 188) && (*(_BYTE *)(a1 + 184) & 1) != 0)
    VTHDRMetadataGenerationSessionCreateDataFromStatistics();
  return *(_QWORD *)(a1 + 168);
}

uint64_t FigVCPTimingGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPTimingGetTypeID_sRegisterFigVCPTimingOnce, fvcp_timing_Register);
  return sFigVCPTimingID;
}

uint64_t fvcp_timing_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPTimingID = result;
  return result;
}

CFTypeRef FigVCPTimingCopyTimebase(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  v2 = *(const void **)(a1 + 72);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
  return v3;
}

__n128 FigVCPTimingGetOutputFrameDuration@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[2];
  *a2 = result;
  a2[1].n128_u64[0] = a1[3].n128_u64[0];
  return result;
}

uint64_t FigVCPTimingSetTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  CFTypeRef v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = FigVCPTimingCopyTimebase(a1);
  v5 = v4;
  if (a2)
  {
    if (v4)
    {
      v6 = fvcp_timing_removeTimebaseListeners();
      if ((_DWORD)v6)
      {
        v8 = v6;
        goto LABEL_7;
      }
    }
    fvcp_timing_setTimebase(a1, a2);
    CMNotificationCenterGetDefaultLocalCenter();
    v7 = FigNotificationCenterAddWeakListener();
    if (!(_DWORD)v7)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      v7 = FigNotificationCenterAddWeakListener();
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  v8 = v7;
  if (v5)
LABEL_7:
    CFRelease(v5);
  return v8;
}

uint64_t fvcp_timing_removeTimebaseListeners()
{
  uint64_t result;

  CMNotificationCenterGetDefaultLocalCenter();
  result = FigNotificationCenterRemoveWeakListener();
  if (!(_DWORD)result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t fvcp_timing_setTimebase(uint64_t a1, CMTimebaseRef timebase)
{
  __n128 v4;
  int v5;
  int v6;
  const void *v7;
  Float64 rateOut;
  CMTime timeOut;

  timeOut = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  rateOut = 0.0;
  CMTimebaseGetTimeAndRate(timebase, &timeOut, &rateOut);
  v4.n128_f64[0] = rateOut;
  if (rateOut > 0.0)
    v5 = 1;
  else
    v5 = -1;
  if (rateOut == 0.0)
    v6 = 0;
  else
    v6 = v5;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80), v4);
  *(CMTime *)(a1 + 188) = timeOut;
  *(_DWORD *)(a1 + 164) = v6;
  *(_BYTE *)(a1 + 214) = 0;
  ++*(_DWORD *)(a1 + 184);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 64));
  v7 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = timebase;
  if (timebase)
    CFRetain(timebase);
  if (v7)
    CFRelease(v7);
  return MEMORY[0x19402EF04](*(_QWORD *)(a1 + 64));
}

BOOL FigVCPTimingUsesTimebase(uint64_t a1)
{
  CFTypeRef v1;
  CFTypeRef v2;

  v1 = FigVCPTimingCopyTimebase(a1);
  v2 = v1;
  if (v1)
    CFRelease(v1);
  return v2 != 0;
}

uint64_t FigVCPTimingSetLoopTimeRange(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _OWORD *v7;
  CMTimeEpoch v8;
  __int128 v9;
  CMTime time2;
  CMTime time1;

  if ((*(_DWORD *)(a2 + 12) & 1) != 0 && (*(_BYTE *)(a2 + 36) & 1) != 0 && !*(_QWORD *)(a2 + 40))
  {
    v7 = (_OWORD *)(a2 + 24);
    if ((*(_QWORD *)(a2 + 24) & 0x8000000000000000) == 0)
    {
      if ((*(_DWORD *)(a2 + 12) & 0x1D) != 1)
        return FigSignalErrorAt();
      time1 = *(CMTime *)a2;
      v9 = *MEMORY[0x1E0CA2E68];
      *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
      v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      time2.epoch = v8;
      if (CMTimeCompare(&time1, &time2) < 0)
        return FigSignalErrorAt();
      if ((*(_DWORD *)(a2 + 36) & 0x1D) != 1)
        return FigSignalErrorAt();
      *(_OWORD *)&time1.value = *v7;
      time1.epoch = *(_QWORD *)(a2 + 40);
      *(_OWORD *)&time2.value = v9;
      time2.epoch = v8;
      if (CMTimeCompare(&time1, &time2) <= 0)
        return FigSignalErrorAt();
    }
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v4;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  return 0;
}

void FigVCPTimingGetLoopTimeRange(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  v4 = *(_OWORD *)(a1 + 128);
  *a2 = *(_OWORD *)(a1 + 112);
  a2[1] = v4;
  a2[2] = *(_OWORD *)(a1 + 144);
  JUMPOUT(0x19402EF04);
}

void FigVCPTimingStartOver(uint64_t a1, CMTime *a2, __int128 *a3, int a4, int a5)
{
  _BOOL4 v9;
  CMTime v10;
  CMTime time1;
  int v12;
  int v13;

  v12 = a5;
  v13 = a4;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  *(_BYTE *)(a1 + 168) = 0;
  if (a5 == -1)
  {
    *(_BYTE *)(a1 + 169) = 1;
  }
  else
  {
    time1 = *a2;
    v10 = *(CMTime *)a3;
    *(_BYTE *)(a1 + 169) = CMTimeCompare(&time1, &v10) == 0;
    if (a5 == 1)
    {
      time1 = *a2;
      v10 = *(CMTime *)a3;
      if (!CMTimeCompare(&time1, &v10) && !FigVCPTimingUsesTimebase(a1))
        *(_BYTE *)(a1 + 170) = 1;
    }
  }
  ++*(_DWORD *)(a1 + 184);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  v9 = FigVCPTimingUsesTimebase(a1);
  fvcp_timing_setNextFrameTime(a1, (__int128 *)&a2->value, a3, &v13, &v12, v9, a5 == 0);
}

uint64_t sub_192F765D0()
{
  return 0;
}

void fvcp_timing_setNextFrameTime(uint64_t a1, __int128 *a2, __int128 *a3, _DWORD *a4, _DWORD *a5, int a6, int a7)
{
  __int128 v14;
  __int128 v15;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  if (a2)
  {
    v14 = *a2;
    *(_QWORD *)(a1 + 204) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 188) = v14;
  }
  if (a3)
  {
    v15 = *a3;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 88) = v15;
  }
  if (a4)
    *(_DWORD *)(a1 + 160) = *a4;
  if (a5)
    *(_DWORD *)(a1 + 164) = *a5;
  if (a6)
    *(_BYTE *)(a1 + 213) = *(_DWORD *)(a1 + 164) == 0;
  if (a7)
    *(_BYTE *)(a1 + 212) = 1;
  *(_BYTE *)(a1 + 214) = 0;
  ++*(_DWORD *)(a1 + 184);
  JUMPOUT(0x19402EF04);
}

uint64_t FigVCPTimingResetNextFrameTimeToCurrentTimebaseTime(uint64_t a1)
{
  OpaqueCMTimebase *v2;
  CMTime v4;

  v4 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v2 = (OpaqueCMTimebase *)FigVCPTimingCopyTimebase(a1);
  if (v2)
    CMTimebaseGetTime(&v4, v2);
  if ((v4.flags & 1) != 0)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
    *(CMTime *)(a1 + 188) = v4;
    *(_BYTE *)(a1 + 213) = *(_DWORD *)(a1 + 164) == 0;
    *(_BYTE *)(a1 + 214) = 0;
    ++*(_DWORD *)(a1 + 184);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  }
  return 0;
}

uint64_t FigVCPTimingRepeatIdenticalFrames(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 60);
}

uint64_t FigVCPTimingGetSourceTrackIDForFrameTiming(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t FigVCPTimingCopyProcessingState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  v4 = *(_OWORD *)(a1 + 104);
  v5 = *(_OWORD *)(a1 + 136);
  v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v4;
  v7 = *(_OWORD *)(a1 + 168);
  v8 = *(_OWORD *)(a1 + 200);
  v9 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 112) = v8;
  *(_OWORD *)(a2 + 64) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  result = MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 24);
  return result;
}

void FigVCPTimingSaveProcessingState(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  v4 = *(_DWORD *)(a1 + 184);
  if (v4 == *(_DWORD *)(a2 + 96))
  {
    v5 = *(_OWORD *)(a2 + 100);
    *(_QWORD *)(a1 + 204) = *(_QWORD *)(a2 + 116);
    *(_OWORD *)(a1 + 188) = v5;
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(a1 + 184) = v4 + 1;
  }
  JUMPOUT(0x19402EF04);
}

void FigVCPTimingInvalidate(uint64_t a1)
{
  CFTypeRef v2;
  const void *v3;

  if (a1 && FigVCPInvalidatePrologue())
  {
    v2 = FigVCPTimingCopyTimebase(a1);
    if (v2)
    {
      v3 = v2;
      if (!fvcp_timing_removeTimebaseListeners())
        FigAtomicCompareAndSwap32();
      CFRelease(v3);
    }
    else
    {
      FigAtomicCompareAndSwap32();
    }
  }
}

BOOL FigVCPTimingIsProcessingStateFresh(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  v4 = *(_DWORD *)(a1 + 184) == *(_DWORD *)(a2 + 96) && *(unsigned __int8 *)(a1 + 168) == *(unsigned __int8 *)(a2 + 80);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  return v4;
}

uint64_t FigVCPTimingCreate(const __CFAllocator *a1, uint64_t a2, int a3, char a4, int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t Instance;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  uint64_t v20;
  OpaqueCMClock *HostTimeClock;
  uint64_t v22;
  CMTimebaseRef v23;
  uint64_t v24;
  CMTimebaseRef timebaseOut;

  timebaseOut = 0;
  if (!a7)
    return FigSignalErrorAt();
  if ((*(_DWORD *)(a2 + 12) & 0x1D) != 1)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPTimingGetTypeID_sRegisterFigVCPTimingOnce, fvcp_timing_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v15 = Instance;
  *(_QWORD *)(Instance + 64) = FigSimpleMutexCreate();
  v16 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)a2;
  *(_QWORD *)(v15 + 48) = v16;
  *(_DWORD *)(v15 + 56) = a3;
  *(_BYTE *)(v15 + 60) = a4;
  *(_QWORD *)(v15 + 24) = a6;
  v17 = FigSimpleMutexCreate();
  v18 = (__int128 *)MEMORY[0x1E0CA2E18];
  *(_QWORD *)(v15 + 80) = v17;
  v19 = *v18;
  *(_OWORD *)(v15 + 188) = *v18;
  v20 = *((_QWORD *)v18 + 2);
  *(_QWORD *)(v15 + 204) = v20;
  *(_BYTE *)(v15 + 214) = 0;
  *(_WORD *)(v15 + 212) = 0;
  *(_OWORD *)(v15 + 88) = v19;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 160) = 0;
  *(_WORD *)(v15 + 169) = 0;
  if (a5)
  {
    HostTimeClock = CMClockGetHostTimeClock();
    v22 = CMTimebaseCreateWithSourceClock(a1, HostTimeClock, &timebaseOut);
    v23 = timebaseOut;
    if ((_DWORD)v22)
    {
      v24 = v22;
      if (!timebaseOut)
        goto LABEL_10;
      goto LABEL_9;
    }
    fvcp_timing_setTimebase(v15, timebaseOut);
    v23 = timebaseOut;
  }
  else
  {
    v23 = 0;
  }
  v24 = 0;
  *a7 = v15;
  v15 = 0;
  if (v23)
LABEL_9:
    CFRelease(v23);
LABEL_10:
  if (v15)
    CFRelease((CFTypeRef)v15);
  return v24;
}

BOOL FigVCPProcessingStateHasReachedTheEnd(uint64_t a1)
{
  CMTimeFlags v1;
  CMTimeFlags v4;
  CMTimeValue *v5;
  CMTimeEpoch v6;
  int v7;
  CMTimeValue v8;
  CMTimeValue v9;
  CMTimeValue v10;
  CMTimeValue v11;
  CMTime v12;
  CMTime time1;

  v1 = *(_DWORD *)(a1 + 112);
  if ((~v1 & 5) == 0 || (*(_DWORD *)(a1 + 112) & 9) == 9)
    return 1;
  v4 = *(_DWORD *)(a1 + 12);
  if ((v4 & 0x1D) == 1)
  {
    v5 = (CMTimeValue *)(a1 + 100);
    v6 = *(_QWORD *)(a1 + 116);
    v7 = *(_DWORD *)(a1 + 76);
    if (*(_BYTE *)(a1 + 81))
    {
      if ((v7 & 0x80000000) == 0)
      {
        v8 = *v5;
        v12.epoch = *(_QWORD *)(a1 + 16);
        time1.value = v8;
        time1.timescale = *(_DWORD *)(a1 + 108);
        time1.flags = v1;
        time1.epoch = v6;
        v12.value = *(_QWORD *)a1;
        v12.timescale = *(_DWORD *)(a1 + 8);
        v12.flags = v4;
        return CMTimeCompare(&time1, &v12) > 0;
      }
      v10 = *v5;
      v12.epoch = *(_QWORD *)(a1 + 16);
      time1.value = v10;
      time1.timescale = *(_DWORD *)(a1 + 108);
      time1.flags = v1;
      time1.epoch = v6;
      v12.value = *(_QWORD *)a1;
      v12.timescale = *(_DWORD *)(a1 + 8);
      v12.flags = v4;
      if (CMTimeCompare(&time1, &v12) < 0)
        return 1;
    }
    else
    {
      if ((v7 & 0x80000000) == 0)
      {
        v9 = *v5;
        v12.epoch = *(_QWORD *)(a1 + 16);
        time1.value = v9;
        time1.timescale = *(_DWORD *)(a1 + 108);
        time1.flags = v1;
        time1.epoch = v6;
        v12.value = *(_QWORD *)a1;
        v12.timescale = *(_DWORD *)(a1 + 8);
        v12.flags = v4;
        return (CMTimeCompare(&time1, &v12) & 0x80000000) == 0;
      }
      v11 = *v5;
      v12.epoch = *(_QWORD *)(a1 + 16);
      time1.value = v11;
      time1.timescale = *(_DWORD *)(a1 + 108);
      time1.flags = v1;
      time1.epoch = v6;
      v12.value = *(_QWORD *)a1;
      v12.timescale = *(_DWORD *)(a1 + 8);
      v12.flags = v4;
      if (CMTimeCompare(&time1, &v12) <= 0)
        return 1;
    }
  }
  return 0;
}

uint64_t FigVCPProcessingStateAdvanceCurrentTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  const void *SourceWithTrackID;
  CMTimeValue v7;
  int32_t v8;
  int v9;
  CMTime *v10;
  char v12;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a3 + 56);
  v12 = 0;
  if (!v5
    || (SourceWithTrackID = FigVCPSourceArrayGetSourceWithTrackID(a2, v5)) == 0
    || (fvcp_processingState_advanceCurrentTimeWithSourceTiming(a1, (uint64_t)SourceWithTrackID, &v12), !v12))
  {
    v7 = *(_QWORD *)(a3 + 32);
    v8 = *(_DWORD *)(a3 + 40);
    v16 = *(_QWORD *)(a3 + 44);
    v17 = *(_DWORD *)(a3 + 52);
    v9 = *(_DWORD *)(a1 + 76);
    v10 = (CMTime *)(a1 + 100);
    time = *v10;
    if (v9 < 0)
    {
      CMTimeConvertScale(&lhs, &time, v8, kCMTimeRoundingMethod_RoundTowardPositiveInfinity);
      lhs.value += ((v7 - lhs.value) % v7 + v7) % v7;
      rhs.value = v7;
      rhs.timescale = v8;
      *(_QWORD *)&rhs.flags = v16;
      HIDWORD(rhs.epoch) = v17;
      CMTimeSubtract(&time, &lhs, &rhs);
    }
    else
    {
      CMTimeConvertScale(&lhs, &time, v8, kCMTimeRoundingMethod_RoundTowardNegativeInfinity);
      lhs.value += (lhs.value % v7 + v7) / v7 * v7 - (lhs.value % v7 + v7);
      rhs.value = v7;
      rhs.timescale = v8;
      *(_QWORD *)&rhs.flags = v16;
      HIDWORD(rhs.epoch) = v17;
      CMTimeAdd(&time, &lhs, &rhs);
    }
    *v10 = time;
  }
  return 0;
}

const void *FigVCPSourceArrayGetSourceWithTrackID(uint64_t a1, int a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;

  v3 = *(const __CFArray **)(a1 + 32);
  if (!v3)
    return 0;
  Count = CFArrayGetCount(v3);
  if (Count < 1)
    return 0;
  v6 = Count;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v7);
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == a2)
      break;
    if (v6 == ++v7)
      return 0;
  }
  return ValueAtIndex;
}

uint64_t fvcp_processingState_advanceCurrentTimeWithSourceTiming(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  uint64_t (*v7)(uint64_t, __int128 *, __int128 *, char *);
  char v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v14 = 0;
  v12 = *(_OWORD *)(a1 + 100);
  v13 = *(_QWORD *)(a1 + 116);
  v10 = *MEMORY[0x1E0CA2E18];
  v11 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  *(_BYTE *)(a1 + 126) = 0;
  result = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(result + 88)
    && (result = CMBaseObjectGetVTable(),
        (v7 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, char *))(*(_QWORD *)(result + 16) + 64)) != 0)
    && (v15 = v12, v16 = v13, result = v7(a2, &v15, &v10, &v14), !(_DWORD)result))
  {
    if (v14)
    {
      if ((*(_DWORD *)(a1 + 76) & 0x80000000) != 0)
        v9 = (__int128 *)MEMORY[0x1E0CA2E28];
      else
        v9 = (__int128 *)MEMORY[0x1E0CA2E30];
      v10 = *v9;
      v11 = *((_QWORD *)v9 + 2);
    }
    if ((BYTE12(v10) & 1) != 0)
    {
      *(_OWORD *)(a1 + 100) = v10;
      *(_QWORD *)(a1 + 116) = v11;
      v8 = 1;
    }
    else
    {
      v8 = 1;
      *(_BYTE *)(a1 + 126) = 1;
      result = FigVCPSourceHoldTriggerUntilAvailabilityChanges();
    }
  }
  else
  {
    v8 = 0;
  }
  if (a3)
    *a3 = v8;
  return result;
}

uint64_t FigVCPProcessingStateSetCurrentTimeWithSourceFrameTiming(uint64_t a1, uint64_t a2)
{
  fvcp_processingState_advanceCurrentTimeWithSourceTiming(a1, a2, 0);
  return 0;
}

uint64_t FigVCPOutputGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPOutputGetTypeID_sRegisterFigVCPOutputOnce, fvcp_output_Register);
  return sFigVCPOutputID;
}

uint64_t fvcp_output_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPOutputID = result;
  return result;
}

uint64_t FigVCPOutputGetOutputDurationWaterLevels(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;

  v5 = fvcp_output_copyOutputDurationWaterLevel(a1);
  if (a2)
  {
    v6 = v5[1];
    *(_QWORD *)(a2 + 16) = *((_QWORD *)v5 + 4);
    *(_OWORD *)a2 = v6;
  }
  if (a3)
  {
    v7 = *(_OWORD *)((char *)v5 + 40);
    *(_QWORD *)(a3 + 16) = *((_QWORD *)v5 + 7);
    *(_OWORD *)a3 = v7;
LABEL_6:
    CFRelease(v5);
    return 0;
  }
  if (v5)
    goto LABEL_6;
  return 0;
}

CFTypeRef fvcp_output_copyOutputDurationWaterLevel(uint64_t a1)
{
  const void *v2;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
  v2 = *(const void **)(a1 + 88);
  if (v2)
    v3 = CFRetain(v2);
  else
    v3 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
  return v3;
}

__n128 FigVCPOutputDurationWaterLevelGetUpperBound@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[1];
  *a2 = result;
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  return result;
}

__n128 FigVCPOutputDurationWaterLevelGetLowerBound@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 40);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 56);
  return result;
}

uint64_t FigVCPOutputCreate(uint64_t a1, const void *a2, CMTime *a3, CMTime *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t Instance;
  _QWORD *v13;
  uint64_t v14;
  CFIndex Count;
  CFIndex v16;
  CFIndex v17;
  CMTime *v18;
  const void *ValueAtIndex;
  void (*v20)(const void *, uint64_t, CMTime *, CMTime *);
  uint64_t v21;
  CMTime v23;
  CMTime v24;

  if (a2)
  {
    if (a6)
    {
      MEMORY[0x19402F294](&FigVCPOutputGetTypeID_sRegisterFigVCPOutputOnce, fvcp_output_Register);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v13 = (_QWORD *)Instance;
        v24 = *a3;
        v23 = *a4;
        v14 = FigVCPOutputDurationWaterLevelCreate(a1, &v24, &v23, (uint64_t *)(Instance + 88));
        if (!(_DWORD)v14)
        {
          v13[10] = FigSimpleMutexCreate();
          v13[9] = CFRetain(a2);
          v13[3] = a5;
          v13[6] = FigSimpleMutexCreate();
          Count = CFArrayGetCount((CFArrayRef)a2);
          if (Count < 1)
          {
LABEL_11:
            v21 = 0;
            *a6 = v13;
            return v21;
          }
          v16 = Count;
          v17 = 0;
          v18 = (CMTime *)MEMORY[0x1E0CA2E18];
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v17);
            v20 = *(void (**)(const void *, uint64_t, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 56);
            if (v20)
            {
              v24 = *v18;
              v23 = v24;
              v20(ValueAtIndex, 1, &v24, &v23);
            }
            CMNotificationCenterGetDefaultLocalCenter();
            v14 = FigNotificationCenterAddWeakListener();
            if ((_DWORD)v14)
              break;
            if (v16 == ++v17)
              goto LABEL_11;
          }
        }
        v21 = v14;
        CFRelease(v13);
        return v21;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVCPOutputDurationWaterLevelCreate(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  CMTime v12;
  CMTime time1;

  if (!a4 || (a2->flags & 0x1D) != 1 || (a3->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  time1 = *a2;
  v12 = *a3;
  if (CMTimeCompare(&time1, &v12) <= 0)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPOutputDurationWaterLevelGetTypeID_sRegisterFigVCPOutputDurationWaterLevelOnce, fvcp_outputDurationWaterLevel_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v8 = Instance;
  result = 0;
  v10 = *(_OWORD *)&a2->value;
  *(_QWORD *)(v8 + 32) = a2->epoch;
  *(_OWORD *)(v8 + 16) = v10;
  v11 = *(_OWORD *)&a3->value;
  *(_QWORD *)(v8 + 56) = a3->epoch;
  *(_OWORD *)(v8 + 40) = v11;
  *a4 = v8;
  return result;
}

void fvcp_output_OutputOccupancyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE **v5;
  void (*v6)(CMTime *__return_ptr, uint64_t);
  CMTime v7;
  CMTime time1;
  CMTime v9;
  CMTime v10;

  v5 = (_BYTE **)fvcp_output_copyOutputDurationWaterLevel(a2);
  v10 = *(CMTime *)(v5 + 5);
  memset(&v9, 0, sizeof(v9));
  v6 = *(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v6)
    v6(&v9, a4);
  else
    v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  time1 = v9;
  v7 = v10;
  if (CMTimeCompare(&time1, &v7) <= 0)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(v5);
}

uint64_t FigVCPOutputInvalidate(uint64_t result)
{
  uint64_t v1;
  const __CFArray *v2;
  CFIndex Count;
  CFIndex v4;
  CFIndex i;

  if (result)
  {
    v1 = result;
    result = FigVCPInvalidatePrologue();
    if ((_DWORD)result)
    {
      v2 = *(const __CFArray **)(v1 + 72);
      if (v2)
      {
        Count = CFArrayGetCount(v2);
        if (Count >= 1)
        {
          v4 = Count;
          for (i = 0; i != v4; ++i)
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 72), i);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
          }
        }
      }
      return FigAtomicCompareAndSwap32();
    }
  }
  return result;
}

uint64_t FigVCPOutputSetOutputDurationHighAndLowWaterLevels(uint64_t a1, CMTime *a2, CMTime *a3)
{
  CMTimeEpoch v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  __int128 v12;
  CMTime time2;
  CMTime time1;
  const void *v15;

  v15 = 0;
  if ((a3->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  time1 = *a3;
  v12 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v6;
  if (CMTimeCompare(&time1, &time2) < 0)
    return FigSignalErrorAt();
  if ((a2->flags & 0x1D) != 1)
    return FigSignalErrorAt();
  time1 = *a2;
  *(_OWORD *)&time2.value = v12;
  time2.epoch = v6;
  if (CMTimeCompare(&time1, &time2) <= 0)
    return FigSignalErrorAt();
  time1 = *a3;
  time2 = *a2;
  if (CMTimeCompare(&time1, &time2) >= 1)
    return FigSignalErrorAt();
  v7 = *MEMORY[0x1E0C9AE00];
  time1 = *a2;
  time2 = *a3;
  v8 = FigVCPOutputDurationWaterLevelCreate(v7, &time1, &time2, (uint64_t *)&v15);
  v9 = v15;
  if (!(_DWORD)v8)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 80));
    v10 = *(const void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v9;
    if (v9)
      CFRetain(v9);
    if (v10)
      CFRelease(v10);
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 80));
    v9 = v15;
  }
  if (v9)
    CFRelease(v9);
  return v8;
}

uint64_t FigVCPOutputAllOutputsCanAccomodateFrame(uint64_t a1, uint64_t a2)
{
  _BYTE **v4;
  CFIndex Count;
  CFIndex v6;
  CMTime *v7;
  const void *ValueAtIndex;
  void (*v9)(CMTime *__return_ptr, const void *);
  unsigned int v10;
  uint64_t v11;
  CFIndex v12;
  const void *v13;
  uint64_t (*v14)(const void *);
  int v15;
  CMTime v17;
  CMTime time1;
  CMTime v19;
  CMTime v20;
  CMTime v21;

  v4 = (_BYTE **)fvcp_output_copyOutputDurationWaterLevel(a1);
  v21 = *(CMTime *)(v4 + 2);
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  v20 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
  if (Count >= 1)
  {
    v6 = 0;
    v7 = (CMTime *)MEMORY[0x1E0CA2E18];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v6);
      memset(&v19, 0, sizeof(v19));
      v9 = *(void (**)(CMTime *__return_ptr, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v9)
        v9(&v19, ValueAtIndex);
      else
        v19 = *v7;
      time1 = v20;
      v17 = v19;
      CMTimeMinimum(&v20, &time1, &v17);
      ++v6;
    }
    while (Count != v6);
  }
  v19 = v20;
  time1 = v21;
  v10 = CMTimeCompare(&v19, &time1);
  v11 = v10 >> 31;
  if ((v10 & 0x80000000) == 0 || Count < 1)
  {
LABEL_16:
    if (!v4)
      return v11;
LABEL_17:
    CFRelease(v4);
    return v11;
  }
  v12 = 0;
  while (1)
  {
    v13 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v12);
    v14 = *(uint64_t (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    v15 = v14 ? v14(v13) : 0;
    if (v15 <= a2)
      break;
    if (Count == ++v12)
    {
      v11 = 1;
      goto LABEL_16;
    }
  }
  v11 = 0;
  if (v4)
    goto LABEL_17;
  return v11;
}

uint64_t FigVCPOutputSetUpcomingImageInfo(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  uint64_t (*v12)(const void *, uint64_t, __int128 *, __int128 *);
  uint64_t result;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count < 1)
    return 0;
  v9 = Count;
  v10 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v10);
    v16 = *a3;
    v17 = *((_QWORD *)a3 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a4 + 2);
    v12 = *(uint64_t (**)(const void *, uint64_t, __int128 *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 56);
    if (!v12)
      break;
    v20 = v16;
    v21 = v17;
    v18 = v14;
    v19 = v15;
    result = v12(ValueAtIndex, a2, &v20, &v18);
    if ((_DWORD)result)
      return result;
    if (v9 == ++v10)
      return 0;
  }
  return 4294954514;
}

uint64_t FigVCPOutputSetDirection(uint64_t a1, int a2)
{
  CFIndex Count;
  float v5;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t (*v9)(const void *, float);
  uint64_t result;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (a2 >= 0)
    v5 = 1.0;
  else
    v5 = -1.0;
  if (Count < 1)
    return 0;
  v6 = Count;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v7);
    v9 = *(uint64_t (**)(const void *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v9)
      break;
    result = v9(ValueAtIndex, v5);
    if ((_DWORD)result)
      return result;
    if (v6 == ++v7)
      return 0;
  }
  return 4294954514;
}

uint64_t FigVCPOutputGetHDRDisplayMetadataPolicy(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t FigVCPOutputSetHDRDisplayMetadataPolicy(uint64_t a1, const void *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;

  if (!FigCFEqual())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
    if (FigCFEqual())
    {
      v5 = *(const void **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = a2;
      if (a2)
        CFRetain(a2);
      if (v5)
        CFRelease(v5);
      v6 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 40) |= 1u;
      if (!v6)
      {
        v7 = VTHDRMetadataGenerationSessionCreate();
        if ((_DWORD)v7)
          goto LABEL_12;
      }
      if (!*(_QWORD *)(a1 + 56))
      {
        v7 = VTHDRImageStatisticsGenerationSessionCreate();
LABEL_12:
        v4 = v7;
LABEL_20:
        MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
        return v4;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 40) = 0;
      v8 = *(const void **)(a1 + 32);
      if (v8)
      {
        CFRelease(v8);
        *(_QWORD *)(a1 + 32) = 0;
      }
      v9 = *(const void **)(a1 + 64);
      if (v9)
      {
        CFRelease(v9);
        *(_QWORD *)(a1 + 64) = 0;
      }
      v10 = *(const void **)(a1 + 56);
      if (v10)
      {
        CFRelease(v10);
        v4 = 0;
        *(_QWORD *)(a1 + 56) = 0;
        goto LABEL_20;
      }
    }
    v4 = 0;
    goto LABEL_20;
  }
  return 0;
}

uint64_t FigVCPOutputFlush(uint64_t a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex i;
  const void *ValueAtIndex;
  void (*v6)(const void *);

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count >= 1)
  {
    v3 = Count;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), i);
      v6 = *(void (**)(const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v6)
        v6(ValueAtIndex);
    }
  }
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPOutputWasJustFlushed()
{
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPOutputEnqueueImage(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  uint64_t v11;
  const void *ValueAtIndex;
  uint64_t (*v13)(const void *, uint64_t, _QWORD, __int128 *, uint64_t);
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
  if (Count < 1)
    return 0;
  v9 = Count;
  v10 = 0;
  if (a4)
    v11 = 3;
  else
    v11 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v10);
    v15 = *a3;
    v16 = *((_QWORD *)a3 + 2);
    v13 = *(uint64_t (**)(const void *, uint64_t, _QWORD, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 32);
    if (!v13)
      break;
    v17 = v15;
    v18 = v16;
    result = v13(ValueAtIndex, a2, 0, &v17, v11);
    if ((_DWORD)result)
      return result;
    if (v9 == ++v10)
      return 0;
  }
  return 4294954514;
}

uint64_t FigVCPOutputCalculateAndStoreHDRStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Statistics;
  CFTypeRef v6;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  Statistics = VTHDRImageStatisticsGenerationSessionCreateStatistics();
  if (!(_DWORD)Statistics)
  {
    *(_BYTE *)(a3 + 188) = 1;
    FigAtomicCompareAndSwap32();
    v6 = *(CFTypeRef *)(a1 + 64);
    if (v6)
      v6 = CFRetain(v6);
    *(_QWORD *)(a3 + 192) = v6;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return Statistics;
}

uint64_t FigVCPSourceArrayGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
  return sFigVCPSourceArrayID;
}

uint64_t fvcp_sourceArray_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPSourceArrayID = result;
  return result;
}

const __CFArray *FigVCPSourceArrayGetCount(uint64_t a1)
{
  const __CFArray *result;

  result = *(const __CFArray **)(a1 + 32);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const void *FigVCPSourceArrayGetSourceAtIndex(uint64_t a1, CFIndex a2)
{
  return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a2);
}

uint64_t FigVCPSourceArrayNoMoreImagesOnAnySource(uint64_t a1)
{
  const __CFArray *v1;
  unsigned __int8 context;
  CFRange v4;

  context = 1;
  v1 = *(const __CFArray **)(a1 + 32);
  v4.length = CFArrayGetCount(v1);
  v4.location = 0;
  CFArrayApplyFunction(v1, v4, (CFArrayApplierFunction)fvcp_sourceArray_noMoreImagesOnAnySource, &context);
  return context;
}

uint64_t fvcp_sourceArray_noMoreImagesOnAnySource(uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  if (*a2)
  {
    v3 = result;
    result = CMBaseObjectGetVTable();
    v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 56);
    if (!v4 || (result = v4(v3), !(_DWORD)result))
      *a2 = 0;
  }
  return result;
}

CFIndex FigVCPSourceArrayApplyFunction(uint64_t a1, uint64_t (*a2)(const void *, uint64_t), uint64_t a3)
{
  CFIndex result;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v7 = result;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        result = a2(ValueAtIndex, a3);
      }
    }
  }
  return result;
}

BOOL FigVCPSourceArrayContainsCoreAnimationSource(uint64_t a1)
{
  return CFSetGetCount(*(CFSetRef *)(a1 + 40)) != 0;
}

uint64_t FigVCPSourceArrayCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigVCPSourceArrayApplyFunction(a1, (uint64_t (*)(const void *, uint64_t))fvcp_sourceArray_appendToPerformanceDictionary, (uint64_t)Mutable);
  if (a2)
  {
    *a2 = Mutable;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
  return 0;
}

void fvcp_sourceArray_appendToPerformanceDictionary(uint64_t a1, void *a2)
{
  void (*v4)(uint64_t, CFDictionaryRef *);
  CFDictionaryRef theDict;

  theDict = 0;
  v4 = *(void (**)(uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v4)
  {
    v4(a1, &theDict);
    if (theDict)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, a2);
      if (theDict)
        CFRelease(theDict);
    }
  }
}

uint64_t FigVCPSourceArrayCopyAndAddNewVisualContext(const __CFAllocator *a1, uint64_t a2, int a3, int a4, const void *a5, const void *a6, _OWORD *a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *Instance;
  const __CFAllocator *v19;
  __CFArray *Mutable;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __CFSet *MutableCopy;
  CFNumberRef v27;
  uint64_t v28;
  int v30;
  _OWORD v31[6];
  const void *v32;
  int valuePtr;

  valuePtr = a3;
  v32 = 0;
  if (!a10)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v30 = a4;
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(*(const __CFArray **)(a2 + 32), Mutable, a3);
    if (!a5)
    {
LABEL_6:
      MutableCopy = CFSetCreateMutableCopy(a1, 0, *(CFSetRef *)(a2 + 40));
      v27 = CFNumberCreate(v19, kCFNumberSInt32Type, &valuePtr);
      CFSetRemoveValue(MutableCopy, v27);
      Instance[4] = Mutable;
      Instance[5] = MutableCopy;
      Instance[3] = *(_QWORD *)(a2 + 24);
      *a10 = Instance;
      if (v27)
        CFRelease(v27);
      Mutable = 0;
      Instance = 0;
      v28 = 0;
      goto LABEL_9;
    }
    v21 = *(_QWORD *)(a2 + 24);
    v22 = a7[3];
    v31[2] = a7[2];
    v31[3] = v22;
    v23 = a7[5];
    v31[4] = a7[4];
    v31[5] = v23;
    v24 = a7[1];
    v31[0] = *a7;
    v31[1] = v24;
    v25 = FigVCPVisualContextSourceCreateWithSamplingWindow(a1, a3, v30, a5, v31, a8, a9, v21, &v32);
    if (!(_DWORD)v25)
    {
      FigVCPSourceSetPreprocessParameters((uint64_t)v32, a6);
      CFArrayAppendValue(Mutable, v32);
      goto LABEL_6;
    }
    v28 = v25;
  }
  else
  {
    v28 = FigSignalErrorAt();
    Mutable = 0;
  }
LABEL_9:
  if (v32)
    CFRelease(v32);
  if (Mutable)
    CFRelease(Mutable);
  if (Instance)
    CFRelease(Instance);
  return v28;
}

void fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(const __CFArray *a1, __CFArray *a2, int a3)
{
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  const void *ValueAtIndex;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
        if (*(_DWORD *)CMBaseObjectGetDerivedStorage() == a3)
          FigVCPSourceInvalidate((uint64_t)ValueAtIndex);
        else
          CFArrayAppendValue(a2, ValueAtIndex);
      }
    }
  }
}

uint64_t FigVCPSourceArrayCopyAndAddNewCoreAnimationSource(const __CFAllocator *a1, uint64_t a2, int a3, const void *a4, const void *a5, const void *a6, _QWORD *a7, double a8, double a9)
{
  _QWORD *Instance;
  const __CFAllocator *v19;
  __CFArray *Mutable;
  uint64_t v21;
  __CFSet *MutableCopy;
  CFNumberRef v23;
  uint64_t v24;
  void *value;
  int valuePtr;

  valuePtr = a3;
  value = 0;
  if (!a7)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v19 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(*(const __CFArray **)(a2 + 32), Mutable, a3);
    v21 = FigVCPCoreAnimationSourceCreate(a1, a3, a4, a5, *(_QWORD *)(a2 + 24), (CFTypeRef *)&value, a8, a9);
    if ((_DWORD)v21)
    {
      v24 = v21;
    }
    else
    {
      FigVCPSourceSetPreprocessParameters((uint64_t)value, a6);
      CFArrayAppendValue(Mutable, value);
      MutableCopy = CFSetCreateMutableCopy(a1, 0, *(CFSetRef *)(a2 + 40));
      v23 = CFNumberCreate(v19, kCFNumberSInt32Type, &valuePtr);
      CFSetAddValue(MutableCopy, v23);
      Instance[4] = Mutable;
      Instance[5] = MutableCopy;
      *a7 = Instance;
      if (v23)
        CFRelease(v23);
      Mutable = 0;
      Instance = 0;
      v24 = 0;
    }
  }
  else
  {
    v24 = FigSignalErrorAt();
    Mutable = 0;
  }
  if (value)
    CFRelease(value);
  if (Mutable)
    CFRelease(Mutable);
  if (Instance)
    CFRelease(Instance);
  return v24;
}

uint64_t FigVCPSourceArrayCopyAndAddNewBufferQueue(const __CFAllocator *a1, uint64_t a2, int a3, const void *a4, __int128 *a5, _OWORD *a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  _QWORD *Instance;
  const __CFAllocator *v18;
  __CFArray *Mutable;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  CFNumberRef v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[6];
  __int128 v32;
  uint64_t v33;
  const void *v34;
  int valuePtr[3];

  valuePtr[0] = a3;
  v34 = 0;
  if (!a9)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v29 = a7;
    v30 = a8;
    v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    fvcp_sourceArray_appendEachSourceToArrayExceptTrackID(*(const __CFArray **)(a2 + 32), Mutable, a3);
    if (!a4)
    {
LABEL_6:
      v26 = CFNumberCreate(v18, kCFNumberSInt32Type, valuePtr);
      Instance[4] = Mutable;
      Instance[3] = *(_QWORD *)(a2 + 24);
      *a9 = Instance;
      if (v26)
        CFRelease(v26);
      Mutable = 0;
      Instance = 0;
      v27 = 0;
      goto LABEL_9;
    }
    v20 = *(_QWORD *)(a2 + 24);
    v21 = *a5;
    v33 = *((_QWORD *)a5 + 2);
    v22 = a6[3];
    v31[2] = a6[2];
    v31[3] = v22;
    v23 = a6[5];
    v31[4] = a6[4];
    v31[5] = v23;
    v32 = v21;
    v24 = a6[1];
    v31[0] = *a6;
    v31[1] = v24;
    v25 = FigVCPBufferQueueSourceCreate(a1, a3, a4, (uint64_t)&v32, v31, v29, v30, v20, &v34);
    if (!(_DWORD)v25)
    {
      CFArrayAppendValue(Mutable, v34);
      goto LABEL_6;
    }
    v27 = v25;
  }
  else
  {
    v27 = FigSignalErrorAt();
    Mutable = 0;
  }
LABEL_9:
  if (v34)
    CFRelease(v34);
  if (Mutable)
    CFRelease(Mutable);
  if (Instance)
    CFRelease(Instance);
  return v27;
}

uint64_t FigVCPSourceArrayCreateEmpty(const __CFAllocator *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Instance;
  uint64_t v7;

  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPSourceArrayGetTypeID_sRegisterFigVCPSourceArrayOnce, fvcp_sourceArray_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  *(_QWORD *)(Instance + 32) = CFArrayCreate(a1, 0, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(v7 + 40) = CFSetCreate(a1, 0, 0, MEMORY[0x1E0C9B3B0]);
  *(_QWORD *)(v7 + 24) = a2;
  *a3 = v7;
  return 0;
}

uint64_t FigVCPCoreAnimationPostProcessorGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPCoreAnimationPostProcessorGetTypeID_sRegisterFigVCPCoreAnimationPostProcessorOnce, fvcp_coreAnimationPostProcessor_Register);
  return sFigVCPCoreAnimationPostProcessorID;
}

uint64_t fvcp_coreAnimationPostProcessor_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPCoreAnimationPostProcessorID = result;
  return result;
}

uint64_t FigVCPCoreAnimationPostProcessorThrottleForBackground(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;

  v1 = (uint64_t *)(a1 + 48);
  result = FigAtomicCompareAndSwapPtr();
  if (!(_DWORD)result)
    return FigCoreAnimationRendererSetProperty(*v1);
  return result;
}

uint64_t FigVCPCoreAnimationPostProcessorCopyPixelBufferAtTime(uint64_t a1, uint64_t a2, __CVBuffer *a3, uint64_t a4, CFTypeRef *a5)
{
  int v9;
  const __CFAllocator *v10;
  const __CFDictionary *MutableCopy;
  __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const void *v15;
  const void *Value;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  __CFArray *Mutable;
  uint64_t UpTimeNanoseconds;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CMTime v29;
  CMTime cf;
  CFTypeRef v31;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  *(_OWORD *)&v29.value = *(_OWORD *)a2;
  v29.epoch = *(_QWORD *)(a2 + 16);
  v31 = 0;
  v9 = FigAtomicCompareAndSwapPtr();
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v9)
  {
    cf.value = 0;
    MutableCopy = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
    FigCFDictionarySetInt32();
    CVPixelBufferGetWidth(a3);
    FigCFDictionarySetInt32();
    CVPixelBufferGetHeight(a3);
    FigCFDictionarySetInt32();
    v12 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    v13 = CVBufferCopyAttachments(a3, kCVAttachmentMode_ShouldPropagate);
    v14 = v13;
    if (v13)
    {
      v15 = (const void *)*MEMORY[0x1E0CA8EE8];
      if (CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA8EE8]))
      {
        Value = CFDictionaryGetValue(v14, v15);
        CFDictionarySetValue(v12, v15, Value);
      }
      v17 = (const void *)*MEMORY[0x1E0CA8E98];
      if (CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA8E98]))
      {
        v18 = CFDictionaryGetValue(v14, v17);
        CFDictionarySetValue(v12, v17, v18);
      }
      v19 = (const void *)*MEMORY[0x1E0CA8D68];
      if (CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E0CA8D68]))
      {
        v20 = CFDictionaryGetValue(v14, v19);
        CFDictionarySetValue(v12, v19, v20);
      }
    }
    v21 = FigCoreAnimationRendererCreate(v10, MutableCopy, *(_QWORD *)(a1 + 24), *(const __CFArray **)(a1 + 32), v12, &cf.value);
    Mutable = (__CFArray *)cf.value;
    if ((_DWORD)v21)
    {
      if (cf.value)
      {
        CFRelease((CFTypeRef)cf.value);
        Mutable = 0;
      }
    }
    else
    {
      cf.value = 0;
    }
    if (MutableCopy)
      CFRelease(MutableCopy);
    if (v12)
      CFRelease(v12);
    if (v14)
      CFRelease(v14);
    if ((_DWORD)v21)
      goto LABEL_31;
    if (!FigAtomicCompareAndSwapPtr())
    {
      v21 = FigSignalErrorAt();
      if (!Mutable)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E0C9B378]);
  CFArrayAppendValue(Mutable, a3);
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v24 = *(_QWORD *)(a1 + 48);
  cf = v29;
  v21 = FigCoreAnimationRendererCopyPixelBufferAtTime(v24, &cf, Mutable, (CVPixelBufferRef *)&v31, 0);
  v25 = FigGetUpTimeNanoseconds();
  v26 = (v25 - UpTimeNanoseconds) / 1000;
  ++*(_DWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) += v26;
  v27 = *(_QWORD *)(a1 + 64);
  if (v27 >= v26)
    v27 = (v25 - UpTimeNanoseconds) / 1000;
  if (*(_QWORD *)(a1 + 56) > v26)
    v26 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v26;
  *(_QWORD *)(a1 + 64) = v27;
  if (a5 && !(_DWORD)v21)
  {
    *a5 = v31;
    v31 = 0;
    if (!Mutable)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v31)
    CFRelease(v31);
LABEL_31:
  if (Mutable)
LABEL_32:
    CFRelease(Mutable);
LABEL_33:
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v21;
}

uint64_t FigVCPCoreAnimationPostProcessorCreate(int a1, const void *a2, CFArrayRef theArray, const void *a4, _QWORD *a5)
{
  uint64_t Instance;
  _QWORD *v10;
  CFTypeRef v11;

  if (!a5)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  if (!theArray)
    return FigSignalErrorAt();
  if (CFArrayGetCount(theArray) <= 0)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPCoreAnimationPostProcessorGetTypeID_sRegisterFigVCPCoreAnimationPostProcessorOnce, fvcp_coreAnimationPostProcessor_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v10 = (_QWORD *)Instance;
  *(_QWORD *)(Instance + 16) = FigSimpleMutexCreate();
  v10[3] = CFRetain(a2);
  v10[4] = CFRetain(theArray);
  if (a4)
    v11 = CFRetain(a4);
  else
    v11 = 0;
  v10[5] = v11;
  v10[8] = 0x7FFFFFFFLL;
  *a5 = v10;
  return 0;
}

uint64_t FigVCPCoreAnimationPostProcessorCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 48);
  FigMemoryBarrier();
  *a2 = fvcp_createCoreAnimationPerformanceDictionary(a1 + 56, v4);
  return 0;
}

CFMutableDictionaryRef fvcp_createCoreAnimationPerformanceDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFDictionaryRef theDict;

  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  if (*(int *)(a1 + 24) >= 1)
  {
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
  }
  if (a2)
  {
    theDict = 0;
    FigCoreAnimationRendererCopyProperty(a2, CFSTR("FCARPerformanceDictionary"), v4, &theDict);
    if (theDict)
    {
      CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, Mutable);
      if (theDict)
        CFRelease(theDict);
    }
  }
  return Mutable;
}

uint64_t FigVCPOutputDurationWaterLevelGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPOutputDurationWaterLevelGetTypeID_sRegisterFigVCPOutputDurationWaterLevelOnce, fvcp_outputDurationWaterLevel_Register);
  return sFigVCPOutputDurationWaterLevelID;
}

uint64_t fvcp_outputDurationWaterLevel_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPOutputDurationWaterLevelID = result;
  return result;
}

uint64_t FigVCPInstructionSourceGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPInstructionSourceGetTypeID_sRegisterFigVCPInstructionSourceOnce, fvcp_instructionGetter_Register);
  return sFigVCPInstructionSourceID;
}

uint64_t fvcp_instructionGetter_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPInstructionSourceID = result;
  return result;
}

uint64_t FigVCPInstructionSourceInvalidateCache()
{
  return FigAtomicCompareAndSwap32();
}

uint64_t FigVCPInstructionSourceCopyInstructionAtTime(_QWORD *a1, uint64_t a2, BOOL *a3, _QWORD *a4)
{
  const void *v8;
  CFTypeRef v9;
  int v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, CMTime *, CFTypeRef *);
  uint64_t v14;
  CFTypeID v15;
  const void *v16;
  CFTypeRef v17;
  uint64_t v18;
  CMTime v20;
  CFTypeRef cf;
  CMTime time2;
  CMTime time1;
  CMTime v24;
  CMTime v25;

  cf = 0;
  if (!a4)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[6]);
  v8 = (const void *)a1[7];
  if (v8)
    v9 = CFRetain(v8);
  else
    v9 = 0;
  MEMORY[0x19402EF04](a1[6]);
  v10 = FigAtomicCompareAndSwap32();
  if (v9)
  {
    if (!v10)
    {
      *(_OWORD *)&v20.value = *(_OWORD *)a2;
      v20.epoch = *(_QWORD *)(a2 + 16);
      memset(&v25, 0, sizeof(v25));
      memset(&v24, 0, sizeof(v24));
      if (FigCFDictionaryGetCMTimeIfPresent())
      {
        time1 = v25;
        time2 = v20;
        if (CMTimeCompare(&time1, &time2) <= 0)
        {
          if (FigCFDictionaryGetCMTimeIfPresent())
          {
            time1 = v20;
            time2 = v24;
            if (CMTimeCompare(&time1, &time2) < 0)
            {
              v11 = CFRetain(v9);
              if (!a3)
                goto LABEL_24;
              goto LABEL_23;
            }
          }
        }
      }
    }
  }
  v13 = (uint64_t (*)(uint64_t, CMTime *, CFTypeRef *))a1[3];
  v12 = a1[4];
  v25 = *(CMTime *)a2;
  v14 = v13(v12, &v25, &cf);
  if ((_DWORD)v14)
  {
LABEL_29:
    v18 = v14;
    if (cf)
      CFRelease(cf);
    goto LABEL_25;
  }
  if (!cf)
  {
    v18 = 4294954995;
    goto LABEL_25;
  }
  v15 = CFGetTypeID(cf);
  if (v15 != CFDictionaryGetTypeID()
    || (memset(&v25, 0, sizeof(v25)), !FigCFDictionaryGetCMTimeIfPresent())
    || !FigCFDictionaryGetCMTimeIfPresent())
  {
    v14 = FigSignalErrorAt();
    goto LABEL_29;
  }
  MEMORY[0x19402EEEC](a1[6]);
  v16 = (const void *)a1[7];
  v17 = cf;
  a1[7] = cf;
  if (v17)
    CFRetain(v17);
  if (v16)
    CFRelease(v16);
  MEMORY[0x19402EF04](a1[6]);
  v11 = cf;
  if (!a3)
    goto LABEL_24;
LABEL_23:
  *a3 = v9 != v11;
LABEL_24:
  v18 = 0;
  *a4 = v11;
  cf = 0;
LABEL_25:
  if (v9)
    CFRelease(v9);
  return v18;
}

uint64_t FigVCPInstructionSourceCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *Instance;
  _QWORD *v10;

  if (!a2)
    return FigSignalErrorAt();
  if (!a5)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPInstructionSourceGetTypeID_sRegisterFigVCPInstructionSourceOnce, fvcp_instructionGetter_Register);
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v10 = Instance;
  Instance[3] = a2;
  Instance[4] = a3;
  Instance[6] = FigSimpleMutexCreate();
  v10[2] = a4;
  *a5 = v10;
  return 0;
}

uint64_t FigVCPOutputConformerGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPOutputConformerGetTypeID_sRegisterFigVCPOutputConformerOnce, fvcp_outputConformer_Register);
  return sFigVCPOutputConformerID;
}

uint64_t fvcp_outputConformer_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPOutputConformerID = result;
  return result;
}

uint64_t FigVCPOutputConformerCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t (*Value)(uint64_t);
  const void *v8;
  const void *v9;
  uint64_t result;

  MEMORY[0x19402F294](&fvcp_outputConformer_getCopyPropertyDispatchDictionary_sCopyPropertyDispatchDictionaryOnce, fvcp_outputConformer_initCopyPropertyDispatchDictionary);
  Value = (uint64_t (*)(uint64_t))CFDictionaryGetValue((CFDictionaryRef)fvcp_outputConformer_copyPropertyDispatchDictionary, a2);
  if (!Value)
    return 4294954512;
  v8 = (const void *)Value(a1);
  v9 = v8;
  if (a4)
  {
    result = 0;
    *a4 = v9;
  }
  else
  {
    if (v8)
      CFRelease(v8);
    return 0;
  }
  return result;
}

uint64_t FigVCPOutputConformerSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t (*Value)(uint64_t, uint64_t);

  MEMORY[0x19402F294](&fvcp_outputConformer_getSetPropertyDispatchDictionary_sSetPropertyDispatchDictionaryOnce, fvcp_outputConformer_initSetPropertyDispatchDictionary);
  Value = (uint64_t (*)(uint64_t, uint64_t))CFDictionaryGetValue((CFDictionaryRef)fvcp_outputConformer_setPropertyDispatchDictionary, a2);
  if (Value)
    return Value(a1, a3);
  else
    return 4294954512;
}

uint64_t FigVCPOutputConformerCopyConformedPixelBuffer(uint64_t a1, CVPixelBufferRef pixelBuffer, CVPixelBufferRef *a3)
{
  const void *v5;
  const __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  void *v10;
  const void *v11;
  OpaqueVTPixelTransferSession *v12;
  OSType v13;
  CFMutableDictionaryRef v14;
  const __CFAllocator *v15;
  int IsCompatibleWithAttributes;
  OSType v17;
  const __CFDictionary *DescriptionWithPixelFormatType;
  _BOOL4 HaveRequestedColorParameters;
  __CVPixelBufferPool *v20;
  CFMutableDictionaryRef Mutable;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t UpTimeNanoseconds;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __CVBuffer *v32;
  __CVBuffer *v33;
  const void *v34;
  CFTypeRef v35;
  const void *v36;
  VTPixelTransferSessionRef v37;
  OSType v39;
  int v40;
  const __CFString *v42;
  const __CFString *v43;
  const __CFString *propertyKey;
  const void *v45;
  const __CFDictionary *propertyDictionary;
  const void *v47;
  void *key;
  const void *v49;
  OSType PixelFormatType;
  CFTypeRef propertyValue;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  void *v53;
  CVPixelBufferRef pixelBufferOut;

  v53 = 0;
  pixelBufferOut = 0;
  pixelTransferSessionOut = 0;
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  v40 = *(_DWORD *)(a1 + 32);
  v5 = *(const void **)(a1 + 40);
  if (v5)
    CFRetain(*(CFTypeRef *)(a1 + 40));
  v6 = *(const __CFDictionary **)(a1 + 48);
  if (v6)
    CFRetain(*(CFTypeRef *)(a1 + 48));
  v7 = *(const void **)(a1 + 56);
  if (v7)
    CFRetain(*(CFTypeRef *)(a1 + 56));
  v8 = *(const void **)(a1 + 72);
  if (v8)
    CFRetain(*(CFTypeRef *)(a1 + 72));
  propertyValue = v8;
  v9 = *(const void **)(a1 + 64);
  if (v9)
    CFRetain(*(CFTypeRef *)(a1 + 64));
  v10 = *(void **)(a1 + 88);
  v53 = v10;
  if (v10)
    CFRetain(v10);
  v11 = *(const void **)(a1 + 80);
  if (v11)
    CFRetain(*(CFTypeRef *)(a1 + 80));
  v45 = v11;
  propertyDictionary = v6;
  v12 = *(OpaqueVTPixelTransferSession **)(a1 + 96);
  pixelTransferSessionOut = v12;
  if (v12)
    CFRetain(v12);
  v13 = *(_DWORD *)(a1 + 104);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  v14 = 0;
  key = (void *)*MEMORY[0x1E0CA9188];
  v47 = (const void *)*MEMORY[0x1E0C9AE50];
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  propertyKey = (const __CFString *)*MEMORY[0x1E0CED7E0];
  v43 = (const __CFString *)*MEMORY[0x1E0CED7D8];
  v42 = (const __CFString *)*MEMORY[0x1E0CED7C0];
  v39 = v13;
  v49 = v7;
  while (1)
  {
    if (!v5)
    {
      if (pixelBuffer)
        v32 = (__CVBuffer *)CFRetain(pixelBuffer);
      else
        v32 = 0;
      v14 = 0;
      pixelBufferOut = v32;
      v13 = v39;
LABEL_66:
      MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
      if (*(_DWORD *)(a1 + 32) == v40)
      {
        v34 = *(const void **)(a1 + 88);
        v35 = v53;
        *(_QWORD *)(a1 + 88) = v53;
        if (v35)
          CFRetain(v35);
        if (v34)
          CFRelease(v34);
        v36 = *(const void **)(a1 + 96);
        v37 = pixelTransferSessionOut;
        *(_QWORD *)(a1 + 96) = pixelTransferSessionOut;
        if (v37)
          CFRetain(v37);
        if (v36)
          CFRelease(v36);
        *(_DWORD *)(a1 + 104) = v13;
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
      v28 = 0;
      *a3 = pixelBufferOut;
      pixelBufferOut = 0;
LABEL_77:
      v24 = v45;
      goto LABEL_78;
    }
    IsCompatibleWithAttributes = CVPixelBufferIsCompatibleWithAttributes();
    v17 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
    if (*(_DWORD *)(a1 + 112) == v17)
    {
      if (!*(_BYTE *)(a1 + 116))
        v7 = 0;
    }
    else
    {
      DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
      *(_BYTE *)(a1 + 116) = CFDictionaryGetValue(DescriptionWithPixelFormatType, key) == v47;
    }
    *(_DWORD *)(a1 + 112) = v17;
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
    HaveRequestedColorParameters = fvcp_doesPixelBufferHaveRequestedColorParameters(pixelBuffer, (uint64_t)v7, (uint64_t)propertyValue, (uint64_t)v9);
    if (IsCompatibleWithAttributes && HaveRequestedColorParameters)
    {
      if (pixelBuffer)
        v33 = (__CVBuffer *)CFRetain(pixelBuffer);
      else
        v33 = 0;
      v7 = v49;
      pixelBufferOut = v33;
      goto LABEL_66;
    }
    v20 = (__CVPixelBufferPool *)v53;
    if (v53)
    {
      v7 = v49;
      goto LABEL_34;
    }
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
    Mutable = CFDictionaryCreateMutable(v15, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
      break;
    PixelBufferAttributesWithIOSurfaceSupport = FigCFDictionarySetInt32();
    if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
      goto LABEL_101;
    FigGetAlignmentForIOSurfaceOutput();
    PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
      goto LABEL_101;
    v14 = 0;
    CFRelease(Mutable);
    v7 = v49;
    v23 = VTCreatePixelBufferPoolAttributesWithName();
    if ((_DWORD)v23)
    {
      v28 = v23;
      Mutable = 0;
      goto LABEL_103;
    }
    v24 = v45;
    v25 = VTBuildPixelBufferPools2();
    if ((_DWORD)v25)
    {
      v28 = v25;
      Mutable = 0;
      goto LABEL_105;
    }
    v20 = (__CVPixelBufferPool *)v53;
    v13 = PixelFormatType;
LABEL_34:
    v26 = CVPixelBufferPoolCreatePixelBuffer(v15, v20, &pixelBufferOut);
    if ((_DWORD)v26)
      goto LABEL_99;
    if (!pixelTransferSessionOut)
    {
      v26 = VTPixelTransferSessionCreate(v15, &pixelTransferSessionOut);
      if ((_DWORD)v26)
      {
LABEL_99:
        v28 = v26;
        goto LABEL_77;
      }
      if (propertyDictionary)
        VTSessionSetProperties(pixelTransferSessionOut, propertyDictionary);
      if (v7)
        VTSessionSetProperty(pixelTransferSessionOut, propertyKey, v7);
      if (propertyValue)
        VTSessionSetProperty(pixelTransferSessionOut, v43, propertyValue);
      if (v9)
        VTSessionSetProperty(pixelTransferSessionOut, v42, v9);
    }
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    v28 = VTPixelTransferSessionTransferImage(pixelTransferSessionOut, pixelBuffer, pixelBufferOut);
    v29 = FigGetUpTimeNanoseconds();
    v30 = (v29 - UpTimeNanoseconds) / 1000;
    ++*(_DWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 136) += v30;
    v31 = *(_QWORD *)(a1 + 128);
    if (v31 >= v30)
      v31 = (v29 - UpTimeNanoseconds) / 1000;
    if (*(_QWORD *)(a1 + 120) > v30)
      v30 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v30;
    *(_QWORD *)(a1 + 128) = v31;
    if ((_DWORD)v28)
    {
      if (PixelFormatType == v13)
        goto LABEL_77;
      if (v53)
      {
        CFRelease(v53);
        v53 = 0;
      }
      if (pixelBufferOut)
      {
        CFRelease(pixelBufferOut);
        pixelBufferOut = 0;
      }
    }
    else if (pixelBufferOut)
    {
      goto LABEL_66;
    }
  }
  PixelBufferAttributesWithIOSurfaceSupport = FigSignalErrorAt();
LABEL_101:
  v28 = PixelBufferAttributesWithIOSurfaceSupport;
LABEL_103:
  v24 = v45;
LABEL_105:
  v14 = Mutable;
  v7 = v49;
LABEL_78:
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(a1 + 88), 0);
  if (v14)
    CFRelease(v14);
  if (v24)
    CFRelease(v24);
  if (pixelTransferSessionOut)
    CFRelease(pixelTransferSessionOut);
  if (v53)
    CFRelease(v53);
  if (v9)
    CFRelease(v9);
  if (propertyValue)
    CFRelease(propertyValue);
  if (v7)
    CFRelease(v7);
  if (propertyDictionary)
    CFRelease(propertyDictionary);
  if (v5)
    CFRelease(v5);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  return v28;
}

uint64_t FigVCPTallyUpdateTimingInfo(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (a3 - a2) / 1000;
  ++*(_DWORD *)(result + 24);
  *(_QWORD *)(result + 16) += v3;
  v4 = *(_QWORD *)(result + 8);
  if (v4 >= v3)
    v4 = (a3 - a2) / 1000;
  if (*(_QWORD *)result > v3)
    v3 = *(_QWORD *)result;
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 8) = v4;
  return result;
}

uint64_t FigVCPOutputConformerCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v6;
  uint64_t v7;

  if (!a3)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigVCPOutputConformerGetTypeID_sRegisterFigVCPOutputConformerOnce, fvcp_outputConformer_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v6 = (_QWORD *)Instance;
  v7 = FigSimpleMutexCreate();
  v6[2] = a2;
  v6[3] = v7;
  v6[16] = 0x7FFFFFFFLL;
  *a3 = v6;
  return 0;
}

uint64_t FigVCPOutputConformerCopyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  CFMutableDictionaryRef Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  FigCFDictionarySetInt32();
  if (*(int *)(a1 + 144) >= 1)
  {
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
    FigCFDictionarySetDouble();
  }
  *a2 = Mutable;
  return 0;
}

uint64_t FigVCPCompositorHostGetTypeID()
{
  MEMORY[0x19402F294](&FigVCPCompositorHostGetTypeID_sRegisterFigVCPCompositorHostOnce, fvcp_compositorHost_Register);
  return sFigVCPCompositorHostID;
}

uint64_t fvcp_compositorHost_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigVCPCompositorHostID = result;
  return result;
}

uint64_t FigVCPCompositorHostInvalidate(uint64_t result)
{
  uint64_t v1;
  dispatch_time_t v2;
  int v3;
  dispatch_time_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, _QWORD);

  if (result)
  {
    v1 = result;
    result = FigVCPInvalidatePrologue();
    if ((_DWORD)result)
    {
      FigVCPCompositorHostStopAcceptingRequest(v1);
      FigVCPCompositorHostCancelPendingFrames((_QWORD *)v1);
      v2 = dispatch_time(0, 100000000);
      if (dispatch_group_wait(*(dispatch_group_t *)(v1 + 64), v2))
      {
        v3 = 6;
        while (--v3)
        {
          FigVCPCompositorHostCancelPendingFrames((_QWORD *)v1);
          v4 = dispatch_time(0, 100000000);
          if (!dispatch_group_wait(*(dispatch_group_t *)(v1 + 64), v4))
            goto LABEL_9;
        }
        FigVCPCompositorHostPurgeCancellingFrames(v1);
      }
LABEL_9:
      v5 = *(_QWORD *)(v1 + 40);
      v6 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
      if (v6)
        v6(v5, 0, 0);
      v7 = *(_QWORD *)(v1 + 40);
      v8 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
      if (v8)
        v8(v7, 0, 0);
      return FigAtomicCompareAndSwap32();
    }
  }
  return result;
}

void FigVCPCompositorHostStopAcceptingRequest(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  if (*(_DWORD *)(a1 + 32) == 1)
    JUMPOUT(0x19402EF04);
  *(_DWORD *)(a1 + 32) = 1;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  FigAtomicCompareAndSwap32();
  if (FigAtomicCompareAndSwap32())
  {
    FigAtomicCompareAndSwap32();
    if (*(_QWORD *)(a1 + 112))
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        (*(void (**)(void))(a1 + 112))();
        CFRelease(v3);
      }
    }
  }
}

void FigVCPCompositorHostCancelPendingFrames(_QWORD *a1)
{
  CFMutableArrayRef Mutable;
  uint64_t v3;
  void (*v4)(uint64_t);
  const __CFArray *v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex i;
  _DWORD *ValueAtIndex;
  CFRange v10;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = a1[5];
  v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v4)
    v4(v3);
  MEMORY[0x19402EEEC](a1[6]);
  v5 = (const __CFArray *)a1[7];
  v10.length = (int)FigAtomicAdd32();
  v10.location = 0;
  CFArrayApplyFunction(v5, v10, (CFArrayApplierFunction)fvcp_compositorHost_markPendingFrameAsCancelled, Mutable);
  MEMORY[0x19402EF04](a1[6]);
  if (Mutable)
  {
    Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      v7 = Count;
      for (i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        fvcp_compositorHost_FrameCompletion((uint64_t)a1, ValueAtIndex[4], -12508, 0);
      }
    }
    CFRelease(Mutable);
  }
}

BOOL FigVCPCompositorHostWaitForAllPendingFramesToComplete(uint64_t a1, int64_t a2)
{
  dispatch_time_t v3;

  if (a2 < 0)
    v3 = -1;
  else
    v3 = dispatch_time(0, a2);
  return dispatch_group_wait(*(dispatch_group_t *)(a1 + 64), v3) == 0;
}

void FigVCPCompositorHostPurgeCancellingFrames(uint64_t a1)
{
  CFMutableArrayRef Mutable;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  _DWORD *ValueAtIndex;
  CFRange v8;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  v3 = *(const __CFArray **)(a1 + 56);
  v8.length = (int)FigAtomicAdd32();
  v8.location = 0;
  CFArrayApplyFunction(v3, v8, (CFArrayApplierFunction)fvcp_compositorHost_collectCancellingFrames, Mutable);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  if (Mutable)
  {
    Count = CFArrayGetCount(Mutable);
    if (Count >= 1)
    {
      v5 = Count;
      for (i = 0; i != v5; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
        fvcp_compositorHost_FrameCompletion(a1, ValueAtIndex[4], -12508, 0);
      }
    }
    CFRelease(Mutable);
  }
}

uint64_t FigVCPCompositorHostSetOutputCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v5 = (const void *)v4;
  if (*(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 80))
  {
    v6 = FigSignalErrorAt();
    if (v5)
      CFRelease(v5);
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(a1 + 80) = a2;
    *(_QWORD *)(a1 + 88) = v4;
  }
  return v6;
}

uint64_t FigVCPCompositorHostSetCompletePrerollCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v5 = (const void *)v4;
  if (*(_QWORD *)(a1 + 104) || *(_QWORD *)(a1 + 96))
  {
    v6 = FigSignalErrorAt();
    if (v5)
      CFRelease(v5);
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(a1 + 96) = a2;
    *(_QWORD *)(a1 + 104) = v4;
  }
  return v6;
}

uint64_t FigVCPCompositorHostSetDidReachEndOfOutputCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;

  v4 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  v5 = (const void *)v4;
  if (*(_QWORD *)(a1 + 120) || *(_QWORD *)(a1 + 112))
  {
    v6 = FigSignalErrorAt();
    if (v5)
      CFRelease(v5);
  }
  else
  {
    v6 = 0;
    *(_QWORD *)(a1 + 112) = a2;
    *(_QWORD *)(a1 + 120) = v4;
  }
  return v6;
}

uint64_t FigVCPCompositorHostPrepareToComposeFromWindow(uint64_t a1, const void *a2, __int128 *a3, __int128 *a4, char a5, int a6, int a7, const void *a8, const void *a9)
{
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *value;

  value = 0;
  if (!a2)
    return FigSignalErrorAt();
  v17 = FigAtomicIncrement32();
  v18 = *(_DWORD *)(a1 + 132) != 0;
  v19 = *MEMORY[0x1E0C9AE00];
  v25 = *a3;
  v26 = *((_QWORD *)a3 + 2);
  v23 = *a4;
  v24 = *((_QWORD *)a4 + 2);
  v20 = FigVCPPendingFrameCreateWithWindowedSamples(v19, v17, a2, (uint64_t)&v25, (uint64_t)&v23, a5, a6, a7, v18, a8, a9, (uint64_t *)&value);
  if ((_DWORD)v20)
  {
    v21 = v20;
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
    if (*(_DWORD *)(a1 + 32))
    {
      v21 = FigSignalErrorAt();
    }
    else
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), value);
      FigAtomicIncrement32();
      v21 = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  }
  if (value)
    CFRelease(value);
  return v21;
}

uint64_t FigVCPCompositorHostPrepareToCompose(uint64_t a1, const void *a2, __int128 *a3, __int128 *a4, char a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  const void *v31;

  v31 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v18 = FigAtomicIncrement32();
  v19 = *(_DWORD *)(a1 + 132) != 0;
  v20 = *MEMORY[0x1E0C9AE00];
  v29 = *a3;
  v30 = *((_QWORD *)a3 + 2);
  v27 = *a4;
  v28 = *((_QWORD *)a4 + 2);
  v21 = FigVCPPendingFrameCreate(v20, v18, a2, (uint64_t)&v29, (uint64_t)&v27, a5, a6, a7, v19, a8, a9, a10, a11, a12, a13, &v31);
  if ((_DWORD)v21)
  {
    v22 = v21;
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
    if (*(_DWORD *)(a1 + 32))
    {
      v22 = FigSignalErrorAt();
    }
    else
    {
      dispatch_group_enter(*(dispatch_group_t *)(a1 + 64));
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 56), v31);
      FigAtomicIncrement32();
      v22 = 0;
    }
    MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  }
  if (v31)
    CFRelease(v31);
  return v22;
}

uint64_t FigVCPCompositorHostGetCompositorInstanceID(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, CFNumberRef *);
  uint64_t v4;
  CFNumberRef number;

  v4 = 0;
  number = 0;
  FigBaseObject = FigVideoCompositorGetFigBaseObject(*(_QWORD *)(a1 + 40));
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
  if (v2)
  {
    v2(FigBaseObject, CFSTR("CompositorInstanceID"), *MEMORY[0x1E0C9AE00], &number);
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, &v4);
      if (number)
        CFRelease(number);
    }
  }
  return v4;
}

uint64_t FigVCPCompositorHostGetCompositor(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t FigVCPCompositorHostAnticipateRendering(uint64_t a1, CMTime *a2, uint64_t a3, int a4, __int128 *a5)
{
  CMTimeFlags v6;
  CMTimeEpoch v7;
  uint64_t v8;
  __int128 v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, __int128 *, CMTime *, CMTime *, CMTime *);
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTimeValue v28;
  CMTimeScale v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v24 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v23 = v24;
  v22 = v24;
  v21 = v24;
  v28 = *(_QWORD *)a3;
  v6 = *(_DWORD *)(a3 + 12);
  v29 = *(_DWORD *)(a3 + 8);
  v7 = *(_QWORD *)(a3 + 16);
  if ((v6 & 0x1D) != 1)
  {
    if (a4 == -1)
    {
      v8 = MEMORY[0x1E0CA2E28];
    }
    else
    {
      if (a4 != 1)
        goto LABEL_7;
      v8 = MEMORY[0x1E0CA2E30];
    }
    v28 = *(_QWORD *)v8;
    v6 = *(_DWORD *)(v8 + 12);
    v29 = *(_DWORD *)(v8 + 8);
    v7 = *(_QWORD *)(v8 + 16);
  }
LABEL_7:
  v27 = *a2;
  v26.value = v28;
  v26.timescale = v29;
  v26.flags = v6;
  v26.epoch = v7;
  v9 = a5[1];
  v18 = *a5;
  v19 = v9;
  v20 = a5[2];
  result = FigVCPGetFoldedTimeRanges((__int128 *)&v27.value, &v26, (uint64_t)&v18, &v24, &v23, &v22, &v21);
  if (!(_DWORD)result)
  {
    v11 = *(_QWORD *)(a1 + 40);
    v17 = v24;
    v16 = v23;
    v15 = v22;
    v14 = v21;
    v12 = *(uint64_t (**)(uint64_t, __int128 *, CMTime *, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 56);
    if (v12)
    {
      v18 = *(_OWORD *)&v17.value;
      *(_QWORD *)&v19 = v17.epoch;
      v27 = v16;
      v26 = v15;
      v25 = v14;
      LODWORD(result) = v12(v11, &v18, &v27, &v26, &v25);
    }
    else
    {
      LODWORD(result) = -12782;
    }
    if ((_DWORD)result == -12509 || (_DWORD)result == -12782)
      return 0;
    else
      return result;
  }
  return result;
}

uint64_t FigVCPCompositorHostPrerollForRendering(uint64_t a1, CMTime *a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6)
{
  CMTimeFlags v8;
  CMTimeEpoch v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, __int128 *, CMTime *, CMTime *, CMTime *, uint64_t);
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTime v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CMTime v22;
  CMTime v23;
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  CMTimeValue v29;
  CMTimeScale v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v24 = v25;
  v23 = v25;
  v22 = v25;
  v29 = *(_QWORD *)a3;
  v8 = *(_DWORD *)(a3 + 12);
  v30 = *(_DWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  if ((v8 & 0x1D) != 1)
  {
    if (a4 == -1)
    {
      v10 = MEMORY[0x1E0CA2E28];
      goto LABEL_6;
    }
    if (a4 == 1)
    {
      v10 = MEMORY[0x1E0CA2E30];
LABEL_6:
      v29 = *(_QWORD *)v10;
      v8 = *(_DWORD *)(v10 + 12);
      v30 = *(_DWORD *)(v10 + 8);
      v9 = *(_QWORD *)(v10 + 16);
    }
  }
  v28 = *a2;
  v27.value = v29;
  v27.timescale = v30;
  v27.flags = v8;
  v27.epoch = v9;
  v11 = a5[1];
  v19 = *a5;
  v20 = v11;
  v21 = a5[2];
  result = FigVCPGetFoldedTimeRanges((__int128 *)&v28.value, &v27, (uint64_t)&v19, &v25, &v24, &v23, &v22);
  if (!(_DWORD)result)
  {
    v13 = *(_QWORD *)(a1 + 40);
    v18 = v25;
    v17 = v24;
    v16 = v23;
    v15 = v22;
    v14 = *(uint64_t (**)(uint64_t, __int128 *, CMTime *, CMTime *, CMTime *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 64);
    if (!v14
      || (v19 = *(_OWORD *)&v18.value,
          *(_QWORD *)&v20 = v18.epoch,
          v28 = v17,
          v27 = v16,
          v26 = v15,
          result = v14(v13, &v19, &v28, &v27, &v26, a6),
          (_DWORD)result == -12509)
      || (_DWORD)result == -12782)
    {
      fvcp_compositorHost_CompletePreroll(a1, a6, 0);
      return 0;
    }
  }
  return result;
}

void fvcp_compositorHost_CompletePreroll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const void *v7;

  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 96))
  {
    v6 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v6)
    {
      v7 = (const void *)v6;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 96))(a2, a3, v6);
      CFRelease(v7);
    }
  }
}

uint64_t FigVCPCompositorHostComposeFrameAsync(_QWORD *a1)
{
  CFMutableArrayRef Mutable;
  const __CFArray *v3;
  CFIndex v4;
  uint64_t v5;
  int *ValueAtIndex;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t);
  _QWORD *v24;
  uint64_t v25;
  __CFArray *v26;
  CFIndex Count;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  CFRange v34;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  MEMORY[0x19402EEEC](a1[6]);
  v3 = (const __CFArray *)a1[7];
  v34.length = (int)FigAtomicAdd32();
  v34.location = 0;
  CFArrayApplyFunction(v3, v34, (CFArrayApplierFunction)fvcp_compositorHost_appendPendingFrameIfPreparing, Mutable);
  MEMORY[0x19402EF04](a1[6]);
  if (!Mutable)
    return 0;
  Count = CFArrayGetCount(Mutable);
  if (Count < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v26 = Mutable;
    v24 = a1;
    do
    {
      ValueAtIndex = (int *)CFArrayGetValueAtIndex(Mutable, v4);
      v7 = (uint64_t)ValueAtIndex;
      v8 = a1[5];
      if (*((_BYTE *)ValueAtIndex + 88))
      {
        v9 = *((_QWORD *)ValueAtIndex + 12);
        v10 = *((_QWORD *)ValueAtIndex + 13);
        v11 = *((_QWORD *)ValueAtIndex + 3);
        v12 = ValueAtIndex[4];
        v13 = ValueAtIndex[21];
        v28 = *(_OWORD *)(ValueAtIndex + 14);
        v30 = *((_QWORD *)ValueAtIndex + 9);
        v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        if (v14)
        {
          v32 = v28;
          v33 = v30;
          v14(v8, v9, v10, v11, &v32, v12, v13);
        }
      }
      else
      {
        v15 = *((_QWORD *)ValueAtIndex + 14);
        v16 = *((_QWORD *)ValueAtIndex + 15);
        v17 = *((_QWORD *)ValueAtIndex + 16);
        v18 = *((_QWORD *)ValueAtIndex + 17);
        v19 = *((_QWORD *)ValueAtIndex + 18);
        v20 = *((_QWORD *)ValueAtIndex + 19);
        v25 = *((_QWORD *)ValueAtIndex + 3);
        v21 = ValueAtIndex[4];
        v29 = *(_OWORD *)(ValueAtIndex + 14);
        v31 = *((_QWORD *)ValueAtIndex + 9);
        v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v22)
        {
          v32 = v29;
          v33 = v31;
          v5 = v22(v8, v15, v16, v17, v18, v19, v20, v25, &v32, v21);
        }
        else
        {
          v5 = 4294954514;
        }
        a1 = v24;
      }
      Mutable = v26;
      if ((_DWORD)v5)
        fvcp_compositorHost_FrameCompletion((uint64_t)a1, *(_DWORD *)(v7 + 16), v5, 0);
      FigVCPPendingFrameReleaseAndClearSourceFrames(v7);
      ++v4;
    }
    while (Count != v4);
  }
  CFRelease(Mutable);
  return v5;
}

uint64_t FigVCPCompositorHostGetPendingFramesCount()
{
  return (int)FigAtomicAdd32();
}

void fvcp_compositorHost_appendPendingFrameIfPreparing(const void *a1, __CFArray *a2)
{
  if (FigAtomicCompareAndSwap32())
    CFArrayAppendValue(a2, a1);
}

void fvcp_compositorHost_FrameCompletion(uint64_t a1, int a2, int a3, CFTypeRef cf)
{
  CFTypeID v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  CFTypeRef v12;
  uint64_t v13;
  const void *v14;

  if (!a3)
  {
    if (!cf)
      goto LABEL_13;
    v8 = CFGetTypeID(cf);
    if (v8 != CVPixelBufferGetTypeID())
      goto LABEL_13;
  }
  v9 = *(_DWORD *)(a1 + 132);
  v10 = fvcp_compositorHost_copyPendingFrameFromArray(a1, a2);
  v11 = (uint64_t)v10;
  if ((v9 & 1) != 0)
  {
    if (!v10)
    {
LABEL_13:
      FigSignalErrorAt();
      FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(a1, 0);
      return;
    }
    v10[46] = *(_DWORD *)(a1 + 132);
  }
  else if (!v10)
  {
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 88) || !*(_QWORD *)(a1 + 80))
    goto LABEL_20;
  v12 = cf ? CFRetain(cf) : 0;
  *(_QWORD *)(v11 + 160) = v12;
  *(_DWORD *)(v11 + 176) = a3;
  if (FigAtomicCompareAndSwap32())
    *(_DWORD *)(v11 + 176) = -12508;
  else
    FigAtomicCompareAndSwap32();
  v13 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v13)
  {
    v14 = (const void *)v13;
    (*(void (**)(uint64_t, uint64_t))(a1 + 80))(v11, v13);
    FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(a1, v11);
    CFRelease(v14);
  }
  else
  {
LABEL_20:
    FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(a1, v11);
  }
  CFRelease((CFTypeRef)v11);
}

uint64_t FigVCPCompositorHostGetUpcomingImageInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  const __CFArray *v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  CFRange v13;

  v9 = *MEMORY[0x1E0CA2E18];
  v10 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v11 = v9;
  v12 = v10;
  if (!a2 || !a3)
  {
    FigSignalErrorAt();
    return 0;
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  v6 = *(_DWORD *)(a1 + 32);
  v7 = *(const __CFArray **)(a1 + 56);
  v13.length = (int)FigAtomicAdd32();
  v13.location = 0;
  CFArrayApplyFunction(v7, v13, (CFArrayApplierFunction)fvcp_compositorHost_upcomingImageInfoApplierFunction, &v9);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  if (!FigAtomicAdd32() && v6 == 1)
    return 3;
  if ((BYTE12(v9) & 1) == 0 || (BYTE12(v11) & 1) == 0)
    return 0;
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v12;
  return 2;
}

__n128 fvcp_compositorHost_upcomingImageInfoApplierFunction(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __n128 *v5;
  __n128 result;
  CMTime v7;
  CMTime time1;

  if ((*(_BYTE *)(a2 + 12) & 1) == 0
    || (time1 = *(CMTime *)(a1 + 32), v7 = *(CMTime *)a2, CMTimeCompare(&time1, &v7) < 0))
  {
    v4 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 48);
    *(_OWORD *)a2 = v4;
  }
  v5 = (__n128 *)(a2 + 24);
  if ((*(_BYTE *)(a2 + 36) & 1) == 0
    || (time1 = *(CMTime *)(a1 + 32),
        *(__n128 *)&v7.value = *v5,
        v7.epoch = *(_QWORD *)(a2 + 40),
        CMTimeCompare(&time1, &v7) >= 1))
  {
    result = *(__n128 *)(a1 + 32);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 48);
    *v5 = result;
  }
  return result;
}

BOOL FigVCPCompositorHostIsAcceptingRequest(uint64_t a1)
{
  _BOOL8 v2;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  v2 = *(_DWORD *)(a1 + 32) == 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v2;
}

uint64_t FigVCPCompositorHostStartAcceptingRequest(uint64_t a1)
{
  if (!FigAtomicCompareAndSwap32())
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  *(_DWORD *)(a1 + 32) = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return 0;
}

void fvcp_compositorHost_markPendingFrameAsCancelled(const void *a1, __CFArray *a2)
{
  if (FigAtomicCompareAndSwap32())
    CFArrayAppendValue(a2, a1);
  else
    FigAtomicCompareAndSwap32();
}

void fvcp_compositorHost_collectCancellingFrames(void *value, CFMutableArrayRef theArray)
{
  if (*((_DWORD *)value + 5) == 2)
    CFArrayAppendValue(theArray, value);
}

uint64_t FigVCPCompositorHostCopyPerformanceDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, uint64_t);

  FigBaseObject = FigVideoCompositorGetFigBaseObject(*(_QWORD *)(a1 + 40));
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 48);
  if (v4)
    return v4(FigBaseObject, CFSTR("PerformanceDictionary"), *MEMORY[0x1E0C9AE00], a2);
  else
    return 4294954514;
}

uint64_t FigVCPCompositorHostSupportsRenderScale(uint64_t a1)
{
  uint64_t FigBaseObject;
  void (*v2)(uint64_t, const __CFString *, _QWORD, uint64_t *);
  uint64_t v4;

  v4 = 0;
  FigBaseObject = FigVideoCompositorGetFigBaseObject(*(_QWORD *)(a1 + 40));
  v2 = *(void (**)(uint64_t, const __CFString *, _QWORD, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v2)
    v2(FigBaseObject, CFSTR("CanApplyRenderScale"), *MEMORY[0x1E0C9AE00], &v4);
  return FigCFEqual();
}

void FigVCPCompositorHostDropEarlierPendingFrames(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  while (FigAtomicAdd32())
  {
    v4 = *((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0) + 4);
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 == v4 || (int)FigAtomicAdd32() <= (uint64_t)(v5 - v4))
      break;
    FigAtomicDecrement32();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), 0);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  }
  JUMPOUT(0x19402EF04);
}

CFTypeRef FigVCPCompositorHostRemoveRetainedPendingFrameForOutput(uint64_t a1)
{
  _BYTE *ValueAtIndex;
  CFTypeRef v3;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  if (FigAtomicAdd32()
    && (ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), 0)) != 0
    && (!ValueAtIndex[180] || ValueAtIndex[188]))
  {
    v3 = CFRetain(ValueAtIndex);
    FigAtomicDecrement32();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), 0);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
    FigVCPPendingFrameSetRenderComplete();
  }
  else
  {
    v3 = 0;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v3;
}

uint64_t FigVCPCompositorHostCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  const void *Value;
  const void *v9;
  uint64_t FigBaseObject;
  uint64_t (*v11)(uint64_t, const void *, uint64_t, uint64_t);

  MEMORY[0x19402F294](&fvcp_composirotHost_getProcessorToCompositorPropertyKeyMapping_sProcessorToCompositorPropertyKeyMappingOnce, fvcp_compositorHost_initProcessorToCompositorPropertyKeyMapping);
  Value = CFDictionaryGetValue((CFDictionaryRef)fvcp_compositorHost_processorToCompositorPropertyKeyMapping, a2);
  if (!Value)
    return 4294954512;
  v9 = Value;
  FigBaseObject = FigVideoCompositorGetFigBaseObject(*(_QWORD *)(a1 + 40));
  v11 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 48);
  if (v11)
    return v11(FigBaseObject, v9, a3, a4);
  else
    return 4294954514;
}

uint64_t FigVCPCompositorHostSetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *Value;
  const void *v7;
  uint64_t FigBaseObject;
  uint64_t (*v9)(uint64_t, const void *, uint64_t);

  MEMORY[0x19402F294](&fvcp_composirotHost_getProcessorToCompositorPropertyKeyMapping_sProcessorToCompositorPropertyKeyMappingOnce, fvcp_compositorHost_initProcessorToCompositorPropertyKeyMapping);
  Value = CFDictionaryGetValue((CFDictionaryRef)fvcp_compositorHost_processorToCompositorPropertyKeyMapping, a2);
  if (!Value)
    return 4294954512;
  v7 = Value;
  FigBaseObject = FigVideoCompositorGetFigBaseObject(*(_QWORD *)(a1 + 40));
  v9 = *(uint64_t (**)(uint64_t, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v9)
    return v9(FigBaseObject, v7, a3);
  else
    return 4294954514;
}

uint64_t FigVCPCompositorHostGetRenderSize(uint64_t a1, CGSize *a2)
{
  uint64_t FigBaseObject;
  uint64_t (*v4)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *);
  uint64_t v5;
  uint64_t v6;
  CGSize size;
  CFDictionaryRef dict;

  size.height = 0.0;
  dict = 0;
  size.width = 0.0;
  FigBaseObject = FigVideoCompositorGetFigBaseObject(*(_QWORD *)(a1 + 40));
  v4 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
  if (v4)
  {
    v5 = v4(FigBaseObject, CFSTR("RenderDimensions"), *MEMORY[0x1E0C9AE00], &dict);
    if ((_DWORD)v5)
    {
      v6 = v5;
    }
    else
    {
      CGSizeMakeWithDictionaryRepresentation(dict, &size);
      v6 = 0;
      if (a2)
        *a2 = size;
    }
  }
  else
  {
    v6 = 4294954514;
  }
  if (dict)
    CFRelease(dict);
  return v6;
}

uint64_t FigVCPCompositorHostDoesRequireDifferentSourcePixelBufferAttributesForMultiSource(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v2 == 2 && (v3 = (uint64_t (*)(uint64_t))v2[11]) != 0)
    return v3(v1);
  else
    return 0;
}

uint64_t FigVCPCompositorHostCopySourcePixelBufferAttributesForMultiSource(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, _QWORD *);

  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
  if (*v4 == 2)
  {
    v5 = (uint64_t (*)(uint64_t, _QWORD *))v4[12];
    if (v5)
      return v5(v3, a2);
  }
  if (a2)
    *a2 = 0;
  return 0;
}

uint64_t FigVCPCompositorHostSetHDRDisplayMetadataPolicy(uint64_t a1)
{
  uint64_t result;
  int v3;

  result = FigCFEqual();
  if ((_DWORD)result)
    v3 = *(_DWORD *)(a1 + 132) | 1;
  else
    v3 = 0;
  *(_DWORD *)(a1 + 132) = v3;
  return result;
}

void FigVCPCompositorHostRemovePendingFrameIfNotPendingOrCompleted(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  if (a2 && !FigAtomicCompareAndSwap32() && !FigAtomicCompareAndSwap32())
  {
    v4 = fvcp_compositorHost_removeRetainedPendingFrameFromArray(a1, *(_DWORD *)(a2 + 16));
    if (v4)
      CFRelease(v4);
    FigVCPCompositorHostFinishOutputFrame(a1);
  }
}

_DWORD *fvcp_compositorHost_removeRetainedPendingFrameFromArray(uint64_t a1, int a2)
{
  _DWORD *PendingFrameFromArray;
  _DWORD *v5;
  CFIndex idx;

  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 48));
  idx = 0;
  PendingFrameFromArray = fvcp_compositorHost_getPendingFrameFromArray(a1, a2, &idx);
  v5 = PendingFrameFromArray;
  if (PendingFrameFromArray)
  {
    CFRetain(PendingFrameFromArray);
    FigAtomicDecrement32();
    CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 56), idx);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 48));
  return v5;
}

void FigVCPCompositorHostFinishOutputFrame(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  if (!FigAtomicAdd32() && FigAtomicCompareAndSwap32() && *(_QWORD *)(a1 + 112))
  {
    v2 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v2)
    {
      v3 = (const void *)v2;
      (*(void (**)(void))(a1 + 112))();
      CFRelease(v3);
    }
  }
}

void FigVCPCompositorHostRemovePendingFrame(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  if (a2 && !FigAtomicCompareAndSwap32())
  {
    v4 = fvcp_compositorHost_removeRetainedPendingFrameFromArray(a1, *(_DWORD *)(a2 + 16));
    if (v4)
      CFRelease(v4);
    FigVCPCompositorHostFinishOutputFrame(a1);
  }
}

uint64_t FigVCPCompositorHostCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t Instance;
  _QWORD *v9;
  uint64_t (*v10)(const void *, void (*)(uint64_t, int, int, CFTypeRef), _QWORD *);
  uint64_t v11;
  uint64_t (*v12)(const void *, _QWORD, _QWORD *);
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    if (a4)
    {
      MEMORY[0x19402F294](&FigVCPCompositorHostGetTypeID_sRegisterFigVCPCompositorHostOnce, fvcp_compositorHost_Register);
      Instance = _CFRuntimeCreateInstance();
      if (Instance)
      {
        v9 = (_QWORD *)Instance;
        *(_QWORD *)(Instance + 40) = CFRetain(a2);
        v9[6] = FigSimpleMutexCreate();
        v9[7] = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
        v9[8] = dispatch_group_create();
        v9[3] = a3;
        v10 = *(uint64_t (**)(const void *, void (*)(uint64_t, int, int, CFTypeRef), _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (v10)
        {
          v11 = v10(a2, fvcp_compositorHost_FrameCompletion, v9);
          if ((_DWORD)v11)
          {
            v14 = v11;
          }
          else
          {
            v12 = *(uint64_t (**)(const void *, _QWORD, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 80);
            if (!v12
              || (v13 = v12(a2, fvcp_compositorHost_CompletePreroll, v9), !(_DWORD)v13)
              || (v14 = v13, (_DWORD)v13 == -12782))
            {
              v14 = 0;
              *a4 = v9;
              return v14;
            }
          }
        }
        else
        {
          v14 = 4294954514;
        }
        CFRelease(v9);
        return v14;
      }
    }
  }
  return FigSignalErrorAt();
}

_DWORD *FigVCPTallyUpdateSkips(_DWORD *result, double a2, double a3, double a4)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float64x2_t v9;
  uint64x2_t v10;
  float64x2_t v11;
  uint64_t v12;
  float64x2_t v13;
  _DWORD *v14;
  float64x2_t v20;
  int32x2_t v21;
  float64x2_t v22;

  v4 = (int)(a3 / a4 + 0.5);
  v5 = result[1];
  if (v4 >= 1 && v5 <= 499)
  {
    v6 = 0;
    v7 = v5;
    v8 = 499 - v5;
    if (v8 >= (v4 - 1))
      v8 = (v4 - 1);
    v9 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    v10 = (uint64x2_t)vdupq_n_s64(v8);
    v11 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
    v12 = (v8 + 2) & 0x1FFFFFFFELL;
    v13 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
    v14 = &result[v7 + 4];
    __asm { FMOV            V5.2D, #0.5 }
    do
    {
      v20.f64[0] = (double)(int)v6;
      v20.f64[1] = (double)((int)v6 + 1);
      v21 = vmovn_s64((int64x2_t)vcgeq_u64(v10, (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v6), (int8x16_t)xmmword_1932FAB00)));
      v22 = vmlaq_f64(_Q5, v9, vmlaq_f64(v13, v20, v11));
      if ((v21.i8[0] & 1) != 0)
        *(v14 - 1) = (int)v22.f64[0];
      if ((v21.i8[4] & 1) != 0)
        *v14 = (int)v22.f64[1];
      v6 += 2;
      v14 += 2;
    }
    while (v12 != v6);
    v5 = result[1];
  }
  ++*result;
  result[1] = v5 + v4;
  if (result[2] > v4)
    v4 = result[2];
  result[2] = v4;
  return result;
}

uint64_t FigVCPTallyCopyPerformanceDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __CFDictionary **a6)
{
  const __CFAllocator *v12;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v14;
  int v15;
  CFIndex v16;
  uint64_t v17;
  CFMutableArrayRef v18;
  const __CFDictionary *v19;
  uint64_t v20;
  const __CFDictionary *CoreAnimationPerformanceDictionary;
  const __CFDictionary *v22;
  CFDictionaryRef v23;
  CFDictionaryRef theDict;

  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v14 = Mutable;
  if (a6)
  {
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    if (*(int *)(a1 + 24) >= 1)
    {
      FigCFDictionarySetDouble();
      FigCFDictionarySetDouble();
      FigCFDictionarySetDouble();
    }
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    v15 = *(_DWORD *)(a1 + 36);
    if (v15 >= 1)
    {
      v16 = v15 >= 500 ? 500 : v15;
      v17 = a1 + 44;
      v18 = CFArrayCreateMutable(v12, v16, MEMORY[0x1E0C9B378]);
      do
      {
        v17 += 4;
        FigCFArrayAppendDouble();
        --v16;
      }
      while (v16);
      CFDictionarySetValue(v14, CFSTR("DisplayTimesOfSkippedFrames"), v18);
      if (v18)
        CFRelease(v18);
    }
    if (a3)
    {
      theDict = 0;
      FigVCPCompositorHostCopyPerformanceDictionary(a3, (uint64_t)&theDict);
      if (theDict)
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        if (theDict)
          CFRelease(theDict);
      }
    }
    if (a2)
    {
      v19 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      FigVCPSourceArrayApplyFunction(a2, (uint64_t (*)(const void *, uint64_t))fvcp_sourceArray_appendToPerformanceDictionary, (uint64_t)v19);
      if (v19)
      {
        CFDictionaryApplyFunction(v19, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        CFRelease(v19);
      }
    }
    if (a5)
    {
      v20 = *(_QWORD *)(a5 + 48);
      FigMemoryBarrier();
      CoreAnimationPerformanceDictionary = fvcp_createCoreAnimationPerformanceDictionary(a5 + 56, v20);
      if (CoreAnimationPerformanceDictionary)
      {
        v22 = CoreAnimationPerformanceDictionary;
        CFDictionaryApplyFunction(CoreAnimationPerformanceDictionary, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        CFRelease(v22);
      }
    }
    if (a4)
    {
      theDict = 0;
      FigVCPOutputConformerCopyPerformanceDictionary(a4, &theDict);
      v23 = theDict;
      if (theDict)
      {
        CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fvcp_addEntriesToDictionaryAux, v14);
        CFRelease(v23);
      }
    }
    *a6 = v14;
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
  }
  return 0;
}

double fvcp_preprocessParameters_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void fvcp_preprocessParameters_Finalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[3];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[4];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[6];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[7];
  if (v6)
    CFRelease(v6);
}

uint64_t fvcp_preprocessParameters_Equal(float *cf, float *a2)
{
  CFTypeID v4;
  uint64_t result;
  CFTypeID v6;

  if (cf == a2)
    return 1;
  if (!cf)
    return 0;
  v4 = CFGetTypeID(cf);
  MEMORY[0x19402F294](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register);
  result = 0;
  if (!a2 || v4 != sFigVCPPreprocessParametersID)
    return result;
  v6 = CFGetTypeID(a2);
  MEMORY[0x19402F294](&FigVCPPreprocessParametersGetTypeID_sRegisterFigVCPPreprocessParametersOnce, fvcp_preprocessParameters_Register);
  if (v6 != sFigVCPPreprocessParametersID || cf[4] != a2[4])
    return 0;
  result = FigCFEqual();
  if ((_DWORD)result)
  {
    result = FigCFEqual();
    if ((_DWORD)result)
    {
      result = FigCFEqual();
      if ((_DWORD)result)
      {
        result = FigCFEqual();
        if ((_DWORD)result)
          return FigCFEqual() != 0;
      }
    }
  }
  return result;
}

void fvcp_preprocessParameters_initSetPropertyDispatchDictionary()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_RenderScale"), fvcp_preprocessParameters_setRenderScaleProperty);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_SourcePixelBufferAttributes"), fvcp_preprocessParameters_setPixelBufferAttributes);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_CompositionYCbCrMatrix"), fvcp_preprocessParameters_setYCbCrMatrix);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_CompositionColorPrimaries"), fvcp_preprocessParameters_setColorPrimaries);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_CompositionTransferFunction"), fvcp_preprocessParameters_setTransferFunction);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_PixelBufferPoolSharingID"), fvcp_preprocessParameters_setPoolSharingID);
  CFDictionaryAddValue(Mutable, CFSTR("FigVCPPreprocessParametersProperty_ColorConformanceLevel"), fvcp_preprocessParameters_setColorConformanceLevel);
  CFDictionaryAddValue(Mutable, CFSTR("VideoCompositionProcessor_DestinationPixelBufferDesiredAttributes"), fvcp_preprocessParameters_setDestinationPixelBufferDesiredAttributes);
  fvcp_preprocessParameters_setPropertyDispatchDictionary = (uint64_t)Mutable;
}

uint64_t fvcp_preprocessParameters_setRenderScaleProperty(uint64_t a1, const __CFNumber *cf)
{
  CFTypeID v4;
  int valuePtr;

  if (cf && (v4 = CFGetTypeID(cf), v4 == CFNumberGetTypeID()))
  {
    valuePtr = 1065353216;
    CFNumberGetValue(cf, kCFNumberFloatType, &valuePtr);
    *(_DWORD *)(a1 + 16) = valuePtr;
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t fvcp_preprocessParameters_setPixelBufferAttributes(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t fvcp_preprocessParameters_setYCbCrMatrix(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t fvcp_preprocessParameters_setColorPrimaries(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t fvcp_preprocessParameters_setTransferFunction(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  const void *v5;

  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  v5 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = cf;
  CFRetain(cf);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t fvcp_preprocessParameters_setPoolSharingID(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4;
  CFTypeID v5;
  const void *v6;

  if (!cf)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(cf);
  if (v4 != CFNumberGetTypeID())
  {
    v5 = CFGetTypeID(cf);
    if (v5 != CFBooleanGetTypeID())
      return FigSignalErrorAt();
  }
  v6 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = cf;
  CFRetain(cf);
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t fvcp_preprocessParameters_setColorConformanceLevel(uint64_t a1)
{
  *(_DWORD *)(a1 + 64) = FigCFNumberGetUInt64();
  return 0;
}

uint64_t fvcp_preprocessParameters_setDestinationPixelBufferDesiredAttributes(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v3;
  const void *v4;
  const void *Value;
  const void *v6;
  const void *v7;
  CFTypeID v8;
  CFTypeID v10;
  uint64_t Count;
  CFIndex FirstIndexOfValue;
  CFIndex v13;
  const __CFAllocator *v14;
  CFIndex v15;
  __CFArray *MutableCopy;
  __CFDictionary *v17;
  __CFDictionary *v18;
  const void *v19;
  uint64_t v20;
  CFRange v22;

  if (!cf)
    return 0;
  v3 = CFGetTypeID(cf);
  if (v3 == CFDictionaryGetTypeID())
  {
    v4 = (const void *)*MEMORY[0x1E0CA9040];
    Value = (const void *)FigCFDictionaryGetValue();
    v6 = (const void *)FigCFDictionaryGetValue();
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID() && Value != 0)
      {
        v10 = CFGetTypeID(Value);
        if (v10 == CFArrayGetTypeID())
        {
          Count = CFArrayGetCount((CFArrayRef)Value);
          if (Count >= 2)
          {
            v22.length = Count;
            v22.location = 0;
            FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)Value, v22, v7);
            if ((unint64_t)(FirstIndexOfValue - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v13 = FirstIndexOfValue;
              v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v15 = CFArrayGetCount((CFArrayRef)Value);
              MutableCopy = CFArrayCreateMutableCopy(v14, v15, (CFArrayRef)Value);
              CFArrayRemoveValueAtIndex(MutableCopy, v13);
              CFArrayInsertValueAtIndex(MutableCopy, 0, v7);
              v17 = CFDictionaryCreateMutableCopy(v14, 0, *(CFDictionaryRef *)(a1 + 24));
              if (v17)
              {
                v18 = v17;
                CFDictionarySetValue(v17, v4, MutableCopy);
                v19 = *(const void **)(a1 + 24);
                *(_QWORD *)(a1 + 24) = v18;
                CFRetain(v18);
                if (v19)
                  CFRelease(v19);
                CFRelease(v18);
                v20 = 0;
                if (!MutableCopy)
                  return v20;
              }
              else
              {
                v20 = FigSignalErrorAt();
                if (!MutableCopy)
                  return v20;
              }
              CFRelease(MutableCopy);
              return v20;
            }
          }
        }
      }
    }
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fvcp_source_RegisterFigVCPSourceBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFStringRef fvcp_source_CopyFormattingDesc(uint64_t a1)
{
  unsigned int *DerivedStorage;

  DerivedStorage = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigVCPSource %p] trackID: %d"), a1, *DerivedStorage);
}

void fvcp_source_sourceImageAvailable(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  const void *v12;
  CMTime v13;
  CMTime time1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
    v7 = (_OWORD *)(DerivedStorage + 240);
    if ((*(_BYTE *)(DerivedStorage + 252) & 1) == 0
      || (time1 = *a2,
          *(_OWORD *)&v13.value = *v7,
          v13.epoch = *(_QWORD *)(DerivedStorage + 256),
          CMTimeCompare(&time1, &v13) < 0))
    {
      v8 = *(_OWORD *)&a2->value;
      *(_QWORD *)(DerivedStorage + 256) = a2->epoch;
      *v7 = v8;
    }
    v9 = (_OWORD *)(DerivedStorage + 264);
    if ((*(_BYTE *)(DerivedStorage + 276) & 1) == 0
      || (time1 = *a2,
          *(_OWORD *)&v13.value = *v9,
          v13.epoch = *(_QWORD *)(DerivedStorage + 280),
          CMTimeCompare(&time1, &v13) >= 1))
    {
      v10 = *(_OWORD *)&a2->value;
      *(_QWORD *)(DerivedStorage + 280) = a2->epoch;
      *v9 = v10;
    }
    FigAtomicCompareAndSwap32();
    FigAtomicCompareAndSwap32();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
    v11 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v11)
    {
      v12 = (const void *)v11;
      (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 288))(a4, v11);
      CFRelease(v12);
    }
  }
}

void fvcp_source_noMoreImages(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    FigAtomicCompareAndSwap32();
    FigAtomicCompareAndSwap32();
    FigVCPSourceHoldTriggerUntilAvailabilityChanges();
    v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      v5 = (const void *)v4;
      (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 288))(a2, v4);
      CFRelease(v5);
    }
  }
}

uint64_t fvcp_vc_source_sourceFlushed(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
  v4 = MEMORY[0x1E0CA2E18];
  v5 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 240) = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(DerivedStorage + 256) = v6;
  *(_OWORD *)(DerivedStorage + 264) = v5;
  *(_QWORD *)(DerivedStorage + 280) = v6;
  FigAtomicCompareAndSwap32();
  FigAtomicCompareAndSwap32();
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
  if (FigVCPSourceRequiresWindowedSampling(a2, 0)
    || (result = FigVCPSourceRequiresWindowedSampling(a2, 1), (_DWORD)result))
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 328));
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 336));
    *(_QWORD *)(DerivedStorage + 408) = 0;
    *(_OWORD *)(DerivedStorage + 376) = 0u;
    *(_OWORD *)(DerivedStorage + 392) = 0u;
    *(_OWORD *)(DerivedStorage + 344) = 0u;
    *(_OWORD *)(DerivedStorage + 360) = 0u;
    JUMPOUT(0x19402EF04);
  }
  return result;
}

void fvcp_vc_source_newTimeRangeAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  _OWORD *v4;
  int v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  const void *v9;
  CMTime v10;
  CMTime time1;
  CMTime v12;
  CMTime v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v13 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v12 = v13;
  if (FigAtomicCompareAndSwap32())
  {
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
    if ((v13.flags & 1) != 0
      && ((v4 = (_OWORD *)(DerivedStorage + 240), (*(_BYTE *)(DerivedStorage + 252) & 1) == 0)
       || (time1 = v13,
           *(_OWORD *)&v10.value = *v4,
           v10.epoch = *(_QWORD *)(DerivedStorage + 256),
           CMTimeCompare(&time1, &v10) < 0)))
    {
      *v4 = *(_OWORD *)&v13.value;
      *(_QWORD *)(DerivedStorage + 256) = v13.epoch;
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    if ((v12.flags & 1) != 0)
    {
      v6 = (_OWORD *)(DerivedStorage + 264);
      if ((*(_BYTE *)(DerivedStorage + 276) & 1) == 0
        || (*(_OWORD *)&time1.value = *v6,
            time1.epoch = *(_QWORD *)(DerivedStorage + 280),
            v10 = v12,
            CMTimeCompare(&time1, &v10) < 0))
      {
        *v6 = *(_OWORD *)&v12.value;
        *(_QWORD *)(DerivedStorage + 280) = v12.epoch;
        v5 = 1;
      }
    }
    v7 = FigAtomicCompareAndSwap32();
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
    if (v5 || v7)
    {
      v8 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v8)
      {
        v9 = (const void *)v8;
        (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 288))(a2, v8);
        CFRelease(v9);
      }
    }
  }
}

uint64_t fvcp_vc_source_Invalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD, _QWORD);
  uint64_t v3;
  void (*v4)(uint64_t, _QWORD, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(_QWORD *)(DerivedStorage + 216);
  v2 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v2)
    v2(v1, 0, 0);
  v3 = *(_QWORD *)(DerivedStorage + 216);
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v4)
    v4(v3, 0, 0);
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  return 0;
}

void fvcp_vc_source_Finalize(uint64_t a1)
{
  _QWORD *DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigVCPSourceInvalidate(a1);
  v3 = (const void *)DerivedStorage[27];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[37];
  if (v4)
    CFRelease(v4);
  FigSimpleMutexDestroy();
  v5 = (const void *)DerivedStorage[42];
  if (v5)
    CFRelease(v5);
  FigSimpleMutexDestroy();
  fvcp_source_finalize();
}

CFStringRef fvcp_vc_source_CopyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  unsigned int *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = (unsigned int *)CMBaseObjectGetDerivedStorage();
  return CFStringCreateWithFormat(v3, 0, CFSTR("[FigVCPVisualContextSource(%p)] trackID=%d VC=%p"), a1, *v4, *(_QWORD *)(DerivedStorage + 216));
}

void fvcp_source_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  v1 = (const void *)DerivedStorage[4];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[5];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[7];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[11];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)DerivedStorage[12];
  if (v5)
    CFRelease(v5);
}

uint64_t fvcp_vc_source_StartOver()
{
  CMBaseObjectGetDerivedStorage();
  FigAtomicCompareAndSwap32();
  CMBaseObjectGetDerivedStorage();
  FigAtomicCompareAndSwap32();
  return 0;
}

uint64_t fvcp_vc_source_GetVisualContext()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 216);
}

uint64_t fvcp_vc_source_CheckSampleAvailability(uint64_t a1, int a2, int a3, uint64_t a4, BOOL *a5, _BYTE *a6)
{
  uint64_t DerivedStorage;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CMTime *v18;
  CMTimeEpoch v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  CMTimeFlags v23;
  CMTimeEpoch v24;
  int v25;
  CMTimeValue v26;
  CMTimeFlags v27;
  CMTimeFlags v28;
  CMTimeFlags v30;
  CMTimeEpoch v31;
  CMTimeValue v32;
  CMTimeFlags v33;
  CMTimeEpoch v34;
  CMTimeValue v35;
  CMTimeFlags v36;
  CMTimeEpoch v37;
  CMTimeFlags v38;
  CMTimeValue v39;
  uint64_t v40;
  uint64_t v41;
  CMTimeFlags v42;
  CMTimeEpoch v43;
  CMTimeValue v44;
  CMTimeFlags v45;
  CMTimeEpoch v46;
  CMTimeValue v47;
  CMTimeFlags v48;
  CMTimeEpoch v49;
  CMTimeFlags v50;
  CMTimeEpoch v51;
  CMTimeEpoch v52;
  CMTimeFlags v53;
  CMTimeEpoch v54;
  _BYTE *v55;
  CMTime v56;
  __int128 time1;
  _OWORD time1_16[2];
  __int128 v59;
  _OWORD v60[2];
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  uint64_t v65;
  unsigned int v66;
  CMTimeValue v67;
  CMTimeScale v68;
  CMTimeValue v69;
  CMTimeScale v70;
  CMTime v71;
  CMTime v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 232));
  if (FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    *(_OWORD *)&v56.value = *(_OWORD *)a4;
    v56.epoch = *(_QWORD *)(a4 + 16);
    v13 = CMBaseObjectGetDerivedStorage();
    v14 = v13;
    v15 = *(_OWORD *)(v13 + 168);
    time1_16[1] = *(_OWORD *)(v13 + 152);
    v59 = v15;
    v16 = *(_OWORD *)(v13 + 200);
    v60[0] = *(_OWORD *)(v13 + 184);
    v60[1] = v16;
    v17 = *(_OWORD *)(v13 + 136);
    time1 = *(_OWORD *)(v13 + 120);
    time1_16[0] = v17;
    v55 = a6;
    if (a2)
    {
      v72 = *(CMTime *)(v13 + 120);
      v18 = (CMTime *)((char *)time1_16 + 8);
    }
    else
    {
      *(_OWORD *)&v72.value = v59;
      v72.epoch = *(_QWORD *)&v60[0];
      v18 = (CMTime *)((char *)v60 + 8);
    }
    v71 = *v18;
    time = v56;
    lhs = v72;
    CMTimeSubtract((CMTime *)&time1, &time, &lhs);
    v67 = time1;
    v27 = HIDWORD(time1);
    v68 = DWORD2(time1);
    v54 = *(_QWORD *)&time1_16[0];
    time = v56;
    lhs = v71;
    CMTimeAdd((CMTime *)&time1, &time, &lhs);
    v69 = time1;
    v28 = HIDWORD(time1);
    v70 = DWORD2(time1);
    v52 = *(_QWORD *)&time1_16[0];
    if (FigAtomicCompareAndSwap32())
    {
      v21 = 0;
      v22 = 0;
      if (FigAtomicCompareAndSwap32())
        goto LABEL_18;
      v21 = 1;
      v22 = 1;
      if (FigAtomicCompareAndSwap32())
        goto LABEL_18;
      if (a2 == -1)
      {
        v65 = *(_QWORD *)(v14 + 264);
        v66 = *(_DWORD *)(v14 + 272);
        v36 = *(_DWORD *)(v14 + 276);
        v37 = *(_QWORD *)(v14 + 280);
        v38 = v27;
        if ((v36 & 0x1F) == 3 || (v28 & 0x1F) == 3)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          v39 = *(_QWORD *)(v14 + 264);
          lhs.timescale = *(_DWORD *)(v14 + 272);
          lhs.flags = v36;
          lhs.epoch = v37;
          rhs.value = v69;
          rhs.timescale = v70;
          rhs.flags = v28;
          rhs.epoch = v52;
          lhs.value = v39;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.value = time1;
          lhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0)
            goto LABEL_41;
        }
        *(_QWORD *)&time1 = v65;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v36, v66);
        *(_QWORD *)&time1_16[0] = v37;
        lhs.value = v69;
        lhs.timescale = v70;
        lhs.flags = v28;
        lhs.epoch = v52;
        if ((CMTimeCompare((CMTime *)&time1, &lhs) & 0x80000000) == 0)
        {
LABEL_41:
          v41 = *(_QWORD *)(v14 + 240);
          v40 = v14 + 240;
          v65 = v41;
          v42 = *(_DWORD *)(v40 + 12);
          v66 = *(_DWORD *)(v40 + 8);
          v43 = *(_QWORD *)(v40 + 16);
          if ((v42 & 0x1F) != 3 && (v38 & 0x1F) != 3)
            goto LABEL_68;
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          v44 = *(_QWORD *)v40;
          lhs.timescale = *(_DWORD *)(v40 + 8);
          lhs.flags = v42;
          lhs.epoch = v43;
          rhs.value = v67;
          rhs.timescale = v68;
          rhs.flags = v38;
          rhs.epoch = v54;
          lhs.value = v44;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.value = time1;
          lhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_68:
            *(_QWORD *)&time1 = v65;
            *((_QWORD *)&time1 + 1) = __PAIR64__(v42, v66);
            *(_QWORD *)&time1_16[0] = v43;
            lhs.value = v67;
            lhs.timescale = v68;
            lhs.flags = v38;
            lhs.epoch = v54;
            if (CMTimeCompare((CMTime *)&time1, &lhs) > 0)
            {
              v22 = 0;
              v21 = 1;
              goto LABEL_18;
            }
          }
          goto LABEL_47;
        }
LABEL_46:
        v21 = a3 != 0;
        v22 = a3 != 0;
        goto LABEL_18;
      }
      if (a2 == 1)
      {
        v65 = *(_QWORD *)(v14 + 240);
        v30 = *(_DWORD *)(v14 + 252);
        v66 = *(_DWORD *)(v14 + 248);
        v31 = *(_QWORD *)(v14 + 256);
        if ((v30 & 0x1F) == 3 || (v27 & 0x1F) == 3)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          v32 = *(_QWORD *)(v14 + 240);
          lhs.timescale = *(_DWORD *)(v14 + 248);
          lhs.flags = v30;
          lhs.epoch = v31;
          rhs.value = v67;
          rhs.timescale = v68;
          rhs.flags = v27;
          rhs.epoch = v54;
          lhs.value = v32;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.value = time1;
          lhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0)
            goto LABEL_32;
        }
        *(_QWORD *)&time1 = v65;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v30, v66);
        *(_QWORD *)&time1_16[0] = v31;
        lhs.value = v67;
        lhs.timescale = v68;
        lhs.flags = v27;
        lhs.epoch = v54;
        if (CMTimeCompare((CMTime *)&time1, &lhs) <= 0)
        {
LABEL_32:
          v65 = *(_QWORD *)(v14 + 264);
          v66 = *(_DWORD *)(v14 + 272);
          v33 = *(_DWORD *)(v14 + 276);
          v34 = *(_QWORD *)(v14 + 280);
          if ((v33 & 0x1F) != 3 && (v28 & 0x1F) != 3)
            goto LABEL_69;
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          v35 = *(_QWORD *)(v14 + 264);
          lhs.timescale = *(_DWORD *)(v14 + 272);
          lhs.flags = v33;
          lhs.epoch = v34;
          rhs.value = v69;
          rhs.timescale = v70;
          rhs.flags = v28;
          rhs.epoch = v52;
          lhs.value = v35;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.value = time1;
          lhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_69:
            *(_QWORD *)&time1 = v65;
            *((_QWORD *)&time1 + 1) = __PAIR64__(v33, v66);
            *(_QWORD *)&time1_16[0] = v34;
            lhs.value = v69;
            lhs.timescale = v70;
            lhs.flags = v28;
            lhs.epoch = v52;
            if (CMTimeCompare((CMTime *)&time1, &lhs) < 0)
              goto LABEL_36;
          }
LABEL_47:
          v21 = 1;
          v22 = 1;
          goto LABEL_18;
        }
        goto LABEL_46;
      }
    }
    else
    {
      v21 = 0;
    }
LABEL_36:
    v22 = 0;
LABEL_18:
    a6 = v55;
    goto LABEL_19;
  }
  v71.value = *(_QWORD *)a4;
  v53 = *(_DWORD *)(a4 + 12);
  v71.timescale = *(_DWORD *)(a4 + 8);
  v19 = *(_QWORD *)(a4 + 16);
  v20 = CMBaseObjectGetDerivedStorage();
  if (!FigAtomicCompareAndSwap32())
  {
    v21 = 0;
    v22 = 0;
    goto LABEL_19;
  }
  v21 = 0;
  v22 = 0;
  if (!FigAtomicCompareAndSwap32())
  {
    v21 = 1;
    v22 = 1;
    if (!FigAtomicCompareAndSwap32())
    {
      if (a2 == -1)
      {
        v72.value = *(_QWORD *)(v20 + 264);
        v72.timescale = *(_DWORD *)(v20 + 272);
        v45 = *(_DWORD *)(v20 + 276);
        v46 = *(_QWORD *)(v20 + 280);
        v25 = v53 & 0x1F;
        if ((v45 & 0x1F) == 3 || v25 == 3)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          v47 = *(_QWORD *)(v20 + 264);
          rhs.epoch = v19;
          lhs.value = v47;
          lhs.timescale = *(_DWORD *)(v20 + 272);
          lhs.flags = v45;
          lhs.epoch = v46;
          rhs.value = v71.value;
          rhs.timescale = v71.timescale;
          rhs.flags = v53;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.value = time1;
          lhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0)
            goto LABEL_54;
        }
        *(_QWORD *)&time1 = v72.value;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v45, v72.timescale);
        *(_QWORD *)&time1_16[0] = v46;
        lhs.value = v71.value;
        lhs.timescale = v71.timescale;
        lhs.flags = v53;
        lhs.epoch = v19;
        if ((CMTimeCompare((CMTime *)&time1, &lhs) & 0x80000000) == 0)
          goto LABEL_54;
      }
      else
      {
        if (a2 != 1)
        {
          v25 = v53 & 0x1F;
LABEL_54:
          v72.value = *(_QWORD *)(v20 + 240);
          v48 = *(_DWORD *)(v20 + 252);
          v72.timescale = *(_DWORD *)(v20 + 248);
          v49 = *(_QWORD *)(v20 + 256);
          if (v25 != 3 && (v48 & 0x1F) != 3)
            goto LABEL_70;
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          rhs.epoch = v49;
          lhs.value = v71.value;
          lhs.timescale = v71.timescale;
          lhs.flags = v53;
          lhs.epoch = v19;
          rhs.value = *(_QWORD *)(v20 + 240);
          rhs.timescale = *(_DWORD *)(v20 + 248);
          rhs.flags = v48;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.value = time1;
          lhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) > 0)
          {
LABEL_70:
            *(_QWORD *)&time1 = v71.value;
            *((_QWORD *)&time1 + 1) = __PAIR64__(v53, v71.timescale);
            *(_QWORD *)&time1_16[0] = v19;
            lhs.value = v72.value;
            lhs.timescale = v72.timescale;
            lhs.flags = v48;
            lhs.epoch = v49;
            if (CMTimeCompare((CMTime *)&time1, &lhs) < 0)
              goto LABEL_62;
          }
          v72.value = *(_QWORD *)(v20 + 264);
          v72.timescale = *(_DWORD *)(v20 + 272);
          v50 = *(_DWORD *)(v20 + 276);
          v51 = *(_QWORD *)(v20 + 280);
          if (v25 == 3 || (*(_DWORD *)(v20 + 276) & 0x1F) == 3)
          {
            time1 = 0uLL;
            *(_QWORD *)&time1_16[0] = 0;
            rhs.epoch = v51;
            lhs.value = v71.value;
            lhs.timescale = v71.timescale;
            lhs.flags = v53;
            lhs.epoch = v19;
            rhs.value = *(_QWORD *)(v20 + 264);
            rhs.timescale = *(_DWORD *)(v20 + 272);
            rhs.flags = v50;
            CMTimeSubtract(&time, &lhs, &rhs);
            CMTimeAbsoluteValue((CMTime *)&time1, &time);
            CMTimeMake(&time2, 1, 1000000000);
            *(_OWORD *)&lhs.value = time1;
            lhs.epoch = *(_QWORD *)&time1_16[0];
            if (CMTimeCompare(&lhs, &time2) <= 0)
              goto LABEL_63;
          }
          *(_QWORD *)&time1 = v71.value;
          *((_QWORD *)&time1 + 1) = __PAIR64__(v53, v71.timescale);
          *(_QWORD *)&time1_16[0] = v19;
          lhs.value = v72.value;
          lhs.timescale = v72.timescale;
          lhs.flags = v50;
          lhs.epoch = v51;
          if (CMTimeCompare((CMTime *)&time1, &lhs) <= 0)
          {
LABEL_63:
            v21 = 1;
            v22 = 1;
          }
          else
          {
LABEL_62:
            v22 = 0;
            v21 = 1;
          }
          goto LABEL_19;
        }
        v72.value = *(_QWORD *)(v20 + 240);
        v23 = *(_DWORD *)(v20 + 252);
        v72.timescale = *(_DWORD *)(v20 + 248);
        v24 = *(_QWORD *)(v20 + 256);
        v25 = v53 & 0x1F;
        if ((v23 & 0x1F) == 3 || v25 == 3)
        {
          time1 = 0uLL;
          *(_QWORD *)&time1_16[0] = 0;
          v26 = *(_QWORD *)(v20 + 240);
          rhs.epoch = v19;
          lhs.value = v26;
          lhs.timescale = *(_DWORD *)(v20 + 248);
          lhs.flags = v23;
          lhs.epoch = v24;
          rhs.value = v71.value;
          rhs.timescale = v71.timescale;
          rhs.flags = v53;
          CMTimeSubtract(&time, &lhs, &rhs);
          CMTimeAbsoluteValue((CMTime *)&time1, &time);
          CMTimeMake(&time2, 1, 1000000000);
          *(_OWORD *)&lhs.value = time1;
          lhs.epoch = *(_QWORD *)&time1_16[0];
          if (CMTimeCompare(&lhs, &time2) <= 0)
            goto LABEL_54;
        }
        *(_QWORD *)&time1 = v72.value;
        *((_QWORD *)&time1 + 1) = __PAIR64__(v23, v72.timescale);
        *(_QWORD *)&time1_16[0] = v24;
        lhs.value = v71.value;
        lhs.timescale = v71.timescale;
        lhs.flags = v53;
        lhs.epoch = v19;
        if (CMTimeCompare((CMTime *)&time1, &lhs) <= 0)
          goto LABEL_54;
      }
      v21 = a3 != 0;
      v22 = a3 != 0;
    }
  }
LABEL_19:
  if (!v22)
    FigVCPSourceHoldTriggerUntilAvailabilityChanges();
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 232));
  if (a5)
    *a5 = v21;
  if (a6)
    *a6 = v22;
  return 0;
}

uint64_t fvcp_vc_source_SetCurrentTime(uint64_t a1, unsigned int a2, CMTime *a3)
{
  CMTimeEpoch v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CMTime *v11;
  CMTime *DerivedStorage;
  CMTimeValue value;
  uint64_t (*v14)(CMTimeValue, uint64_t, __int128 *, uint64_t, CMTime *, _QWORD, CMTimeEpoch *);
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  BOOL v18;
  const void *epoch;
  CMTime *v20;
  CMTime *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, __int128 *, uint64_t, CFTypeRef *, _QWORD, CMTime *);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  const __CFArray *v29;
  CFIndex Count;
  uint64_t v31;
  CMTimeValue v32;
  CMTimeFlags v33;
  CMTimeScale v34;
  _OWORD *ValueAtIndex;
  CMTimeFlags v36;
  CMTimeEpoch v37;
  char *v38;
  CMTimeFlags *v39;
  CMTimeEpoch *v40;
  const void *v42;
  unint64_t v43;
  _OWORD *v44;
  const __CFArray *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, _QWORD, __int128 *, CMTime *, char *);
  const void *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, __int128 *, _QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  const __CFArray *v55;
  char *v56;
  const __CFArray *v57;
  CFIndex v58;
  char *v59;
  BOOL v60;
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, __int128 *, _QWORD, CFTypeRef *, _QWORD, CMTime *);
  CMTimeEpoch v66;
  CFTypeRef v67;
  CMTimeFlags flags;
  uint64_t v69;
  uint64_t Instance;
  _QWORD *v71;
  CFTypeRef v72;
  const __CFArray *v73;
  uint64_t v74;
  void (*v75)(uint64_t, _QWORD, __int128 *, CMTime *, char *);
  CMTimeValue v76;
  CMTimeScale v77;
  uint64_t v78;
  CMTimeFlags v79;
  CMTimeEpoch v80;
  uint64_t v81;
  CMTimeFlags v82;
  CMTimeEpoch v83;
  const void *v84;
  CMTimeScale v86;
  CMTimeValue v87;
  CMTimeFlags v88;
  unsigned int v89;
  __int128 v90;
  __int128 v91;
  CMTimeEpoch v92;
  char v93;
  CMTime v94;
  CMTime v95;
  CMTime v96;
  CMTime v97;
  CMTime v98;
  CMTime v99;
  CMTime v100;
  CMTime v101;
  CMTime v102;
  CMTime v103;
  CFTypeRef v104;
  CMTime time2;
  CMTime v106;
  CMTime cf;
  CMTimeValue v108;
  CMTimeScale v109;
  __int128 lhs;
  _BYTE lhs_16[32];
  __int128 v112;
  _OWORD v113[2];
  CMTimeValue v114;
  CMTimeScale v115;
  CMTimeValue v116;
  CMTimeScale timescale;
  CMTime rhs;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  if (!FigVCPSourceRequiresWindowedSampling(a1, a2))
  {
    rhs = *a3;
    cf.value = 0;
    DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
    value = DerivedStorage[9].value;
    v14 = *(uint64_t (**)(CMTimeValue, uint64_t, __int128 *, uint64_t, CMTime *, _QWORD, CMTimeEpoch *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v14)
    {
      v15 = *MEMORY[0x1E0C9AE00];
      lhs = *(_OWORD *)&rhs.value;
      *(_QWORD *)lhs_16 = rhs.epoch;
      v16 = v14(value, v15, &lhs, 1, &cf, 0, &DerivedStorage[12].epoch);
      v17 = (const void *)cf.value;
      if ((_DWORD)v16)
        v18 = 1;
      else
        v18 = cf.value == 0;
      if (!v18)
      {
        MEMORY[0x19402EEEC](DerivedStorage[9].epoch);
        if ((a2 & 0x80000000) != 0 || (DerivedStorage[10] = rhs, !a2))
          DerivedStorage[11] = rhs;
        MEMORY[0x19402EF04](DerivedStorage[9].epoch);
        v17 = (const void *)cf.value;
      }
      epoch = (const void *)DerivedStorage[3].epoch;
      if (v17 == epoch)
      {
LABEL_141:
        v84 = (const void *)cf.value;
        if (!cf.value)
          return v16;
        goto LABEL_138;
      }
      DerivedStorage[3].epoch = (CMTimeEpoch)v17;
      if (v17)
        CFRetain(v17);
      if (!epoch)
      {
LABEL_54:
        v42 = (const void *)DerivedStorage[4].value;
        if (v42)
        {
          CFRelease(v42);
          DerivedStorage[4].value = 0;
        }
        goto LABEL_141;
      }
    }
    else
    {
      epoch = (const void *)DerivedStorage[3].epoch;
      if (!epoch)
      {
        v16 = 4294954514;
        goto LABEL_141;
      }
      DerivedStorage[3].epoch = 0;
      v16 = 4294954514;
    }
    CFRelease(epoch);
    goto LABEL_54;
  }
  v91 = *(_OWORD *)&a3->value;
  v92 = a3->epoch;
  v104 = 0;
  v103 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v90 = *(_OWORD *)&v103.value;
  v5 = v103.epoch;
  v6 = CMBaseObjectGetDerivedStorage();
  v7 = v6;
  v102 = v103;
  v101 = v103;
  v100 = v103;
  v99 = v103;
  v96 = v103;
  v95 = v103;
  v94 = v103;
  v93 = 0;
  v8 = *(_OWORD *)(v6 + 168);
  *(_OWORD *)&lhs_16[16] = *(_OWORD *)(v6 + 152);
  v112 = v8;
  v9 = *(_OWORD *)(v6 + 200);
  v113[0] = *(_OWORD *)(v6 + 184);
  v113[1] = v9;
  v10 = *(_OWORD *)(v6 + 136);
  lhs = *(_OWORD *)(v6 + 120);
  *(_OWORD *)lhs_16 = v10;
  if (a2)
  {
    v102 = *(CMTime *)(v6 + 120);
    v11 = (CMTime *)&lhs_16[8];
  }
  else
  {
    *(_OWORD *)&v102.value = v112;
    v102.epoch = *(_QWORD *)&v113[0];
    v11 = (CMTime *)((char *)v113 + 8);
  }
  v101 = *v11;
  lhs = v91;
  *(_QWORD *)lhs_16 = v92;
  rhs = v102;
  CMTimeSubtract(&v99, (CMTime *)&lhs, &rhs);
  lhs = v91;
  *(_QWORD *)lhs_16 = v92;
  rhs = v101;
  CMTimeAdd(&v100, (CMTime *)&lhs, &rhs);
  if (a2 >= 2)
    v20 = &v99;
  else
    v20 = &v100;
  if (a2 >= 2)
    v21 = &v100;
  else
    v21 = &v99;
  v98 = *v20;
  v97 = *v21;
  FigVisualContextGetEarliestSequentialImageTime(*(_QWORD *)(v7 + 216), 0, (uint64_t)&v94, 0);
  if ((v94.flags & 1) != 0)
  {
    lhs = *(_OWORD *)&v97.value;
    *(_QWORD *)lhs_16 = v97.epoch;
    rhs = v94;
    if (fvcp_timeIsEarlierOrEqualInPlayback((uint64_t)&lhs, (uint64_t)&rhs, a2))
      v97 = v94;
    v22 = *(_QWORD *)(v7 + 216);
    v23 = *MEMORY[0x1E0C9AE00];
    v24 = *(void (**)(uint64_t, uint64_t, __int128 *, uint64_t, CFTypeRef *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (v24)
    {
      lhs = *(_OWORD *)&v97.value;
      *(_QWORD *)lhs_16 = v97.epoch;
      v24(v22, v23, &lhs, 1, &v104, 0, &v95);
    }
    if (v104)
    {
      CFRelease(v104);
      v104 = 0;
    }
    v25 = *(_QWORD *)(v7 + 216);
    v26 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 48);
    if (!v26)
    {
      v16 = 4294954514;
      goto LABEL_137;
    }
    v89 = a2;
    lhs = v91;
    *(_QWORD *)lhs_16 = v92;
    v27 = v26(v25, v23, &lhs, 0, 0, 0);
    if (!(_DWORD)v27)
    {
      MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 328));
      v106 = v99;
      time2 = v100;
      v28 = CMBaseObjectGetDerivedStorage();
      v29 = *(const __CFArray **)(v28 + 336);
      if (v29)
      {
        Count = CFArrayGetCount(v29);
        if (Count >= 1)
        {
          v31 = Count;
          v32 = *MEMORY[0x1E0CA2E18];
          v34 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
          v33 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
          while (1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v28 + 336), 0);
            lhs = v90;
            *(_QWORD *)lhs_16 = v5;
            if (ValueAtIndex)
            {
              lhs = ValueAtIndex[1];
              *(_QWORD *)lhs_16 = *((_QWORD *)ValueAtIndex + 4);
            }
            v116 = v32;
            timescale = v34;
            v36 = v33;
            v37 = v5;
            if (v31 != 1)
            {
              v38 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v28 + 336), 1);
              rhs.value = v32;
              rhs.timescale = v34;
              if (v38)
              {
                rhs.value = *((_QWORD *)v38 + 2);
                rhs.timescale = *((_DWORD *)v38 + 6);
                v39 = (CMTimeFlags *)(v38 + 28);
                v40 = (CMTimeEpoch *)(v38 + 32);
              }
              else
              {
                v39 = (CMTimeFlags *)(MEMORY[0x1E0CA2E18] + 12);
                v40 = (CMTimeEpoch *)(MEMORY[0x1E0CA2E18] + 16);
              }
              v36 = *v39;
              v37 = *v40;
              v116 = rhs.value;
              timescale = rhs.timescale;
            }
            if ((v36 & 1) == 0)
              break;
            *(_OWORD *)&rhs.value = lhs;
            rhs.epoch = *(_QWORD *)lhs_16;
            cf = v106;
            if ((CMTimeCompare(&rhs, &cf) & 0x80000000) == 0)
              break;
            rhs.value = v116;
            rhs.timescale = timescale;
            rhs.flags = v36;
            rhs.epoch = v37;
            cf = v106;
            if (CMTimeCompare(&rhs, &cf) > 0)
              break;
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v28 + 336), 0);
            if (v31-- <= 1)
              goto LABEL_62;
          }
          if (v31 >= 1)
          {
            v43 = v31 + 1;
            do
            {
              v44 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v28 + 336), v43 - 2);
              lhs = v90;
              *(_QWORD *)lhs_16 = v5;
              if (v44)
              {
                lhs = v44[1];
                *(_QWORD *)lhs_16 = *((_QWORD *)v44 + 4);
              }
              *(_OWORD *)&rhs.value = lhs;
              rhs.epoch = *(_QWORD *)lhs_16;
              cf = time2;
              if (CMTimeCompare(&rhs, &cf) <= 0)
                break;
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v28 + 336), v43 - 2);
              --v43;
            }
            while (v43 > 1);
          }
        }
      }
LABEL_62:
      *(_OWORD *)&rhs.value = v90;
      rhs.epoch = v5;
      v45 = *(const __CFArray **)(CMBaseObjectGetDerivedStorage() + 336);
      v46 = v89;
      if (v45 && CFArrayGetCount(v45) >= 1)
      {
        v47 = FigCFArrayGetValueAtIndex();
        lhs = v90;
        *(_QWORD *)lhs_16 = v5;
        if (v47)
        {
          lhs = *(_OWORD *)(v47 + 16);
          *(_QWORD *)lhs_16 = *(_QWORD *)(v47 + 32);
        }
        *(_OWORD *)&rhs.value = lhs;
        rhs.epoch = *(_QWORD *)lhs_16;
      }
      v96 = rhs;
      if ((rhs.flags & 1) != 0)
      {
        v48 = *(_QWORD *)(v7 + 216);
        rhs = v96;
        v49 = *(void (**)(uint64_t, _QWORD, __int128 *, CMTime *, char *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 64);
        if (v49)
        {
          lhs = *(_OWORD *)&rhs.value;
          *(_QWORD *)lhs_16 = rhs.epoch;
          v49(v48, 0, &lhs, &v96, &v93);
        }
      }
      else
      {
        v96 = v97;
      }
      if ((v96.flags & 1) == 0)
      {
LABEL_72:
        v50 = *(const void **)(v7 + 88);
        if (v50)
        {
          CFRelease(v50);
          *(_QWORD *)(v7 + 88) = 0;
        }
        v51 = *(_QWORD *)(v7 + 216);
        v52 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, _QWORD, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v52)
        {
          lhs = v91;
          *(_QWORD *)lhs_16 = v92;
          v53 = v52(v51, v23, &lhs, 0, v7 + 88, 0, v7 + 304);
          if (!(_DWORD)v53)
          {
            v54 = CMBaseObjectGetDerivedStorage();
            lhs = v90;
            *(_QWORD *)lhs_16 = v5;
            *(_OWORD *)&lhs_16[8] = v90;
            *(_QWORD *)&lhs_16[24] = v5;
            v112 = v90;
            *(_QWORD *)&v113[0] = v5;
            v55 = *(const __CFArray **)(v54 + 336);
            if (v55 && CFArrayGetCount(v55) >= 1)
            {
              v56 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v54 + 336), 0);
              *(_OWORD *)&rhs.value = v90;
              rhs.epoch = v5;
              if (v56)
                rhs = *(CMTime *)(v56 + 16);
              lhs = *(_OWORD *)&rhs.value;
              *(_QWORD *)lhs_16 = rhs.epoch;
              v57 = *(const __CFArray **)(v54 + 336);
              v58 = CFArrayGetCount(v57);
              v59 = (char *)CFArrayGetValueAtIndex(v57, v58 - 1);
              *(_OWORD *)&rhs.value = v90;
              rhs.epoch = v5;
              if (v59)
                rhs = *(CMTime *)(v59 + 16);
              *(CMTime *)&lhs_16[8] = rhs;
              v112 = *(_OWORD *)(v54 + 304);
              *(_QWORD *)&v113[0] = *(_QWORD *)(v54 + 320);
            }
            *(_OWORD *)&rhs.value = lhs;
            rhs.epoch = *(_QWORD *)lhs_16;
            cf = *(CMTime *)(v7 + 344);
            if (CMTimeCompare(&rhs, &cf)
              || (rhs = *(CMTime *)&lhs_16[8], cf = *(CMTime *)(v7 + 368), CMTimeCompare(&rhs, &cf)))
            {
              v60 = 1;
            }
            else
            {
              *(_OWORD *)&rhs.value = v112;
              rhs.epoch = *(_QWORD *)&v113[0];
              cf = *(CMTime *)(v7 + 392);
              v60 = CMTimeCompare(&rhs, &cf) != 0;
            }
            *(_BYTE *)(v7 + 416) = v60;
            v61 = v112;
            *(_OWORD *)(v7 + 376) = *(_OWORD *)&lhs_16[16];
            *(_OWORD *)(v7 + 392) = v61;
            *(_QWORD *)(v7 + 408) = *(_QWORD *)&v113[0];
            v62 = *(_OWORD *)lhs_16;
            *(_OWORD *)(v7 + 344) = lhs;
            *(_OWORD *)(v7 + 360) = v62;
            MEMORY[0x19402EF04](*(_QWORD *)(v7 + 328));
            v63 = (_QWORD *)(v7 + 232);
            MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 232));
            if ((v89 & 0x80000000) != 0 || (*(CMTime *)(v7 + 240) = v95, !v89))
            {
              v16 = 0;
              *(CMTime *)(v7 + 264) = v95;
            }
            else
            {
              v16 = 0;
            }
            goto LABEL_136;
          }
LABEL_145:
          v16 = v53;
        }
        else
        {
LABEL_133:
          v16 = 4294954514;
        }
        v63 = (_QWORD *)(v7 + 328);
LABEL_136:
        MEMORY[0x19402EF04](*v63);
        goto LABEL_137;
      }
      v88 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
      while (1)
      {
        lhs = *(_OWORD *)&v96.value;
        *(_QWORD *)lhs_16 = v96.epoch;
        rhs = v98;
        if (!fvcp_timeIsEarlierOrEqualInPlayback((uint64_t)&lhs, (uint64_t)&rhs, v46) || v93)
          goto LABEL_72;
        if (v104)
        {
          CFRelease(v104);
          v104 = 0;
        }
        v64 = *(_QWORD *)(v7 + 216);
        rhs = v96;
        v65 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, _QWORD, CFTypeRef *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v65)
          goto LABEL_133;
        lhs = *(_OWORD *)&rhs.value;
        *(_QWORD *)lhs_16 = rhs.epoch;
        v53 = v65(v64, v23, &lhs, 0, &v104, 0, &v103);
        if ((_DWORD)v53)
          goto LABEL_145;
        v66 = v103.epoch;
        v67 = v104;
        v108 = v103.value;
        flags = v103.flags;
        v109 = v103.timescale;
        v69 = CMBaseObjectGetDerivedStorage();
        if ((flags & 0x1D) == 1)
        {
          MEMORY[0x19402F294](&FigVCPTimedImagePairGetTypeID_once, figVCPTimedImagePair_register);
          Instance = _CFRuntimeCreateInstance();
          if (Instance)
            break;
        }
        v71 = 0;
        if (!FigSignalErrorAt())
          goto LABEL_102;
LABEL_111:
        v74 = *(_QWORD *)(v7 + 216);
        rhs = v103;
        v75 = *(void (**)(uint64_t, _QWORD, __int128 *, CMTime *, char *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 64);
        if (v75)
        {
          lhs = *(_OWORD *)&rhs.value;
          *(_QWORD *)lhs_16 = rhs.epoch;
          v75(v74, 0, &lhs, &v96, &v93);
        }
        if ((v96.flags & 1) == 0)
          goto LABEL_72;
      }
      v71 = (_QWORD *)Instance;
      *(_BYTE *)(Instance + 40) = 0;
      *(_QWORD *)(Instance + 16) = v108;
      *(_DWORD *)(Instance + 24) = v109;
      *(_DWORD *)(Instance + 28) = flags;
      *(_QWORD *)(Instance + 32) = v66;
      if (v67)
        v72 = CFRetain(v67);
      else
        v72 = 0;
      v71[6] = v72;
LABEL_102:
      v73 = *(const __CFArray **)(v69 + 336);
      if (v73)
      {
        CFArrayGetCount(v73);
        v73 = *(const __CFArray **)(v69 + 336);
        if (v73)
        {
          if (CFArrayGetCount(v73))
          {
            if (v46 == -1)
            {
              CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v69 + 336), 0, v71);
LABEL_109:
              if (v71)
                CFRelease(v71);
              goto LABEL_111;
            }
            if (v46 != 1)
            {
              v114 = *MEMORY[0x1E0CA2E18];
              v76 = v114;
              v115 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
              v77 = v115;
              v78 = FigCFArrayGetValueAtIndex();
              v87 = v76;
              *(_QWORD *)&lhs = v76;
              v86 = v77;
              DWORD2(lhs) = v77;
              v79 = v88;
              v80 = v5;
              if (v78)
              {
                *(_QWORD *)&lhs = *(_QWORD *)(v78 + 16);
                v79 = *(_DWORD *)(v78 + 28);
                DWORD2(lhs) = *(_DWORD *)(v78 + 24);
                v80 = *(_QWORD *)(v78 + 32);
              }
              v116 = lhs;
              timescale = DWORD2(lhs);
              if ((flags & 0x1F) == 3 || (v79 & 0x1F) == 3)
              {
                lhs = 0uLL;
                *(_QWORD *)lhs_16 = 0;
                cf.value = v108;
                cf.timescale = v109;
                cf.flags = flags;
                cf.epoch = v66;
                v106.value = v116;
                v106.timescale = timescale;
                v106.flags = v79;
                v106.epoch = v80;
                CMTimeSubtract(&rhs, &cf, &v106);
                CMTimeAbsoluteValue((CMTime *)&lhs, &rhs);
                CMTimeMake(&time2, 1, 1000000000);
                *(_OWORD *)&cf.value = lhs;
                cf.epoch = *(_QWORD *)lhs_16;
                if (CMTimeCompare(&cf, &time2) <= 0)
                  goto LABEL_122;
              }
              *(_QWORD *)&lhs = v108;
              *((_QWORD *)&lhs + 1) = __PAIR64__(flags, v109);
              *(_QWORD *)lhs_16 = v66;
              cf.value = v116;
              cf.timescale = timescale;
              cf.flags = v79;
              cf.epoch = v80;
              if ((CMTimeCompare((CMTime *)&lhs, &cf) & 0x80000000) == 0)
              {
LABEL_122:
                v81 = FigCFArrayGetValueAtIndex();
                *(_QWORD *)&lhs = v87;
                DWORD2(lhs) = v86;
                v82 = v88;
                v83 = v5;
                if (v81)
                {
                  *(_QWORD *)&lhs = *(_QWORD *)(v81 + 16);
                  v82 = *(_DWORD *)(v81 + 28);
                  DWORD2(lhs) = *(_DWORD *)(v81 + 24);
                  v83 = *(_QWORD *)(v81 + 32);
                }
                v114 = lhs;
                v115 = DWORD2(lhs);
                if ((flags & 0x1F) != 3 && (v82 & 0x1F) != 3)
                  goto LABEL_149;
                lhs = 0uLL;
                *(_QWORD *)lhs_16 = 0;
                cf.value = v108;
                cf.timescale = v109;
                cf.flags = flags;
                cf.epoch = v66;
                v106.value = v114;
                v106.timescale = v115;
                v106.flags = v82;
                v106.epoch = v83;
                CMTimeSubtract(&rhs, &cf, &v106);
                CMTimeAbsoluteValue((CMTime *)&lhs, &rhs);
                CMTimeMake(&time2, 1, 1000000000);
                *(_OWORD *)&cf.value = lhs;
                cf.epoch = *(_QWORD *)lhs_16;
                if (CMTimeCompare(&cf, &time2) > 0)
                {
LABEL_149:
                  *(_QWORD *)&lhs = v108;
                  *((_QWORD *)&lhs + 1) = __PAIR64__(flags, v109);
                  *(_QWORD *)lhs_16 = v66;
                  cf.value = v114;
                  cf.timescale = v115;
                  cf.flags = v82;
                  cf.epoch = v83;
                  if (CMTimeCompare((CMTime *)&lhs, &cf) >= 1)
                    CFArrayAppendValue(*(CFMutableArrayRef *)(v69 + 336), v71);
                }
              }
              else
              {
                CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(v69 + 336), 0, v71);
              }
              v46 = v89;
              goto LABEL_109;
            }
          }
          v73 = *(const __CFArray **)(v69 + 336);
        }
      }
      CFArrayAppendValue(v73, v71);
      goto LABEL_109;
    }
    v16 = v27;
  }
  else
  {
    v16 = 0;
  }
LABEL_137:
  v84 = v104;
  if (v104)
LABEL_138:
    CFRelease(v84);
  return v16;
}

