uint64_t bvc_SimpleMixing_32BGRA_420v709_420v709_arm(uint64_t a1, uint64_t a2, _QWORD *a3, const char **a4, _QWORD *a5, uint8x16_t **a6, uint64_t *a7, int8x8_t **a8, float a9)
{
  int32x4_t v9;
  int32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint8x16_t *v16;
  const char *v17;
  uint8x16_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t *v22;
  uint64_t v23;
  int8x8_t *v24;
  int8x8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int16x8_t v28;
  uint64_t i;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  uint8x16_t v62;
  uint8x16_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  uint64_t v87;
  int8x8_t v88;
  int8x8_t v89;
  int8x8_t v90;
  int8x8_t v91;
  int8x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  uint32x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  int16x8_t v100;
  int16x4_t v101;
  int16x4_t v102;
  int16x4_t v103;
  int16x4_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int8x16x4_t v108;
  int8x16x4_t v109;

  v11 = a2 >> 1;
  if (v11)
  {
    v12 = a1 >> 1;
    v28.i16[0] = vcvts_n_u32_f32(a9, 8uLL);
    v28.i16[1] = (v28.u16[0] << 8) / 0xFFu;
    v13 = *a4;
    v14 = &(*a4)[*a3];
    v15 = 2 * *a3 - 8 * v12;
    v16 = *a6;
    v17 = (const char *)a6[1];
    v18 = (uint8x16_t *)((char *)*a6 + *a5);
    v19 = 2 * *a5 - 2 * v12;
    v20 = a5[1] - 2 * v12;
    v21 = *a7;
    v22 = *a8;
    v23 = a7[1];
    v24 = a8[1];
    v25 = (int8x8_t *)((char *)v22 + *a7);
    v26 = 2 * v21 - 2 * v12;
    v27 = v23 - 2 * v12;
    v28.i32[1] = 1082132552;
    v28.i64[1] = 0xF31E07F04E9F175FLL;
    do
    {
      for (i = v12 >> 3; i; v24 += 2)
      {
        v108 = vld4q_s8(v13);
        v13 += 64;
        v109 = vld4q_s8(v14);
        v14 += 64;
        v30 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[0].i8);
        v31 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[0]);
        v32 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[1].i8);
        v33 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[1]);
        v34 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        v35 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[0]);
        v36 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        v37 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[1]);
        v38 = vmull_laneq_s16(*(int16x4_t *)v30.i8, v28, 6);
        v39 = vmull_high_laneq_s16(v30, v28, 6);
        v40 = vmull_laneq_s16(*(int16x4_t *)v31.i8, v28, 6);
        v41 = vmull_high_laneq_s16(v31, v28, 6);
        v42 = vmull_laneq_s16(*(int16x4_t *)v34.i8, v28, 6);
        v43 = vmull_high_laneq_s16(v34, v28, 6);
        v44 = vmull_laneq_s16(*(int16x4_t *)v35.i8, v28, 6);
        v45 = vmull_high_laneq_s16(v35, v28, 6);
        v46 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[2].i8);
        v47 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[2]);
        v48 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[2].i8);
        v49 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[2]);
        v50 = vmlal_laneq_s16(v38, *(int16x4_t *)v32.i8, v28, 5);
        v51 = vmlal_high_laneq_s16(v39, v32, v28, 5);
        v52 = vmlal_laneq_s16(v40, *(int16x4_t *)v33.i8, v28, 5);
        v53 = vmlal_high_laneq_s16(v41, v33, v28, 5);
        v54 = vmlal_laneq_s16(v42, *(int16x4_t *)v36.i8, v28, 5);
        v55 = vmlal_high_laneq_s16(v43, v36, v28, 5);
        v56 = vmlal_laneq_s16(v44, *(int16x4_t *)v37.i8, v28, 5);
        v57 = vmlal_high_laneq_s16(v45, v37, v28, 5);
        v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v108.val[3].i8);
        v59 = (int16x8_t)vmovl_high_u8((uint8x16_t)v108.val[3]);
        v60 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v109.val[3].i8);
        v61 = (int16x8_t)vmovl_high_u8((uint8x16_t)v109.val[3]);
        v62 = *v16++;
        v63 = *v18++;
        v64 = vmlal_laneq_s16(v50, *(int16x4_t *)v46.i8, v28, 4);
        v65 = vmlal_high_laneq_s16(v51, v46, v28, 4);
        v66 = vmlal_laneq_s16(v52, *(int16x4_t *)v47.i8, v28, 4);
        v67 = vmlal_high_laneq_s16(v53, v47, v28, 4);
        v68 = vmlal_laneq_s16(v54, *(int16x4_t *)v48.i8, v28, 4);
        v69 = vmlal_high_laneq_s16(v55, v48, v28, 4);
        v70 = vmlal_laneq_s16(v56, *(int16x4_t *)v49.i8, v28, 4);
        v71 = vmlal_high_laneq_s16(v57, v49, v28, 4);
        v72 = vmovl_u8(*(uint8x8_t *)v62.i8);
        v73 = vmovl_high_u8(v62);
        v74 = vmovl_u8(*(uint8x8_t *)v63.i8);
        v75 = vmovl_high_u8(v63);
        v76 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v64, *(int16x4_t *)v58.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v65, v58, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v77 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v66, *(int16x4_t *)v59.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v67, v59, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v78 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v68, *(int16x4_t *)v60.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v69, v60, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v79 = vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(v70, *(int16x4_t *)v61.i8, *(int16x4_t *)v28.i8, 2), 0xFuLL), vmlal_high_lane_s16(v71, v61, *(int16x4_t *)v28.i8, 2), 0xFuLL);
        v64.i64[0] = 0x1000000010000;
        v64.i64[1] = 0x1000000010000;
        v65.i64[0] = 0x1000000010000;
        v65.i64[1] = 0x1000000010000;
        v66.i64[0] = 0x1000000010000;
        v66.i64[1] = 0x1000000010000;
        v67.i64[0] = 0x1000000010000;
        v67.i64[1] = 0x1000000010000;
        v68.i64[0] = 0x1000000010000;
        v68.i64[1] = 0x1000000010000;
        v69.i64[0] = 0x1000000010000;
        v69.i64[1] = 0x1000000010000;
        v70.i64[0] = 0x1000000010000;
        v70.i64[1] = 0x1000000010000;
        v71.i64[0] = 0x1000000010000;
        v71.i64[1] = 0x1000000010000;
        v80 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v64, *(uint16x4_t *)v58.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v65, (uint16x8_t)v58, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v72)), 8uLL);
        v81 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v66, *(uint16x4_t *)v59.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v67, (uint16x8_t)v59, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v73)), 8uLL);
        v82 = vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v70, *(uint16x4_t *)v61.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v71, (uint16x8_t)v61, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v75)), 8uLL);
        v83 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[0]);
        v84 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[1]);
        v109.val[0] = (int8x16_t)vld2_s8(v17);
        v17 += 16;
        *(int8x8_t *)v65.i8 = vaddhn_s16(v81, vmulq_n_s16(v77, v28.i16[0]));
        *(int8x8_t *)v67.i8 = vaddhn_s16(v82, vmulq_n_s16(v79, v28.i16[0]));
        v85 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[2]);
        v86 = (int16x8_t)vpaddlq_u8((uint8x16_t)v109.val[3]);
        *v22 = vaddhn_s16(v80, vmulq_n_s16(v76, v28.i16[0]));
        v22[1] = *(int8x8_t *)v65.i8;
        v22 += 2;
        *v25 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16((uint32x4_t)v68, *(uint16x4_t *)v60.i8, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16(*(uint16x4_t *)v74.i8)), 8uLL), vmulq_s32((int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v69, (uint16x8_t)v60, *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_high_u16(v74)), 8uLL), vmulq_n_s16(v78, v28.i16[0]));
        v25[1] = *(int8x8_t *)v67.i8;
        v25 += 2;
        v109.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        v109.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[1].i8);
        v108.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[0]), v83);
        v108.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[1]), v84);
        v72.i64[0] = 0x1000000010000;
        v72.i64[1] = 0x1000000010000;
        v83.i64[0] = 0x1000000010000;
        v83.i64[1] = 0x1000000010000;
        v74.i64[0] = 0x1000000010000;
        v74.i64[1] = 0x1000000010000;
        v84.i64[0] = 0x1000000010000;
        v84.i64[1] = 0x1000000010000;
        v108.val[0] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[0], 2uLL);
        v108.val[1] = (int8x16_t)vshrq_n_u16((uint16x8_t)v108.val[1], 2uLL);
        v108.val[2] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[2]), v85), 2uLL);
        v108.val[3] = (int8x16_t)vshrq_n_u16((uint16x8_t)vaddq_s16((int16x8_t)vpaddlq_u8((uint8x16_t)v108.val[3]), v86), 2uLL);
        v9 = (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v83, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1);
        v10 = vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 0), *(int16x4_t *)v108.val[2].i8, v28, 7), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3);
        --i;
        *(int8x8_t *)v109.val[0].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[2].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v72, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[2]), v9), 8uLL), vmulq_n_s16(vshrn_high_n_s32(vshrn_n_s32(v10, 0xFuLL), vmlal_high_lane_s16(vmlal_high_laneq_s16(vmlal_high_lane_s16(vmull_high_lane_s16(
                                                    (int16x8_t)v108.val[0],
                                                    (int16x4_t)0xFADBCCEF3838D4ABLL,
                                                    1),
                                                  (int16x8_t)v108.val[1],
                                                  (int16x4_t)0xFADBCCEF3838D4ABLL,
                                                  0),
                                                (int16x8_t)v108.val[2],
                                                v28,
                                                7),
                                              (int16x8_t)v108.val[3],
                                              *(int16x4_t *)v28.i8,
                                              3),
                                            0xFuLL),
                                          v28.i16[0]));
        *(int8x8_t *)v109.val[1].i8 = vaddhn_s16(vshrn_high_n_s32(vshrn_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v109.val[3].i8), (int32x4_t)vmlsl_lane_u16((uint32x4_t)v74, *(uint16x4_t *)v108.val[3].i8, *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_s32((int32x4_t)vmovl_high_u16((uint16x8_t)v109.val[3]), (int32x4_t)vmlsl_high_lane_u16((uint32x4_t)v84, (uint16x8_t)v108.val[3], *(uint16x4_t *)v28.i8, 1)), 8uLL), vmulq_n_s16(
                                          vshrn_high_n_s32(vshrn_n_s32(vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v108.val[0].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 3), *(int16x4_t *)v108.val[1].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 2), *(int16x4_t *)v108.val[2].i8, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), *(int16x4_t *)v108.val[3].i8, *(int16x4_t *)v28.i8, 3), 0xFuLL), vmlal_high_lane_s16(
                                              vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16((int16x8_t)v108.val[0], (int16x4_t)0xFADBCCEF3838D4ABLL, 3), (int16x8_t)v108.val[1], (int16x4_t)0xFADBCCEF3838D4ABLL, 2), (int16x8_t)v108.val[2], (int16x4_t)0xFADBCCEF3838D4ABLL, 1), (int16x8_t)v108.val[3], *(int16x4_t *)v28.i8, 3), 0xFuLL), v28.i16[0]));
        *v24 = vzip1_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
        v24[1] = vzip2_s8(*(int8x8_t *)v109.val[0].i8, *(int8x8_t *)v109.val[1].i8);
      }
      v87 = v12 & 7;
      if ((v12 & 7) != 0)
      {
        do
        {
          v88 = *(int8x8_t *)v13;
          v13 += 8;
          v89 = v88;
          v90 = *(int8x8_t *)v14;
          v14 += 8;
          v91 = vuzp1_s8(v89, v90);
          v92 = vuzp2_s8(v89, v90);
          v93 = vmovl_u8((uint8x8_t)vuzp1_s8(v91, v92));
          v94 = vmovl_u8((uint8x8_t)vuzp2_s8(v91, v92));
          v90.i16[0] = v16->i16[0];
          v16 = (uint8x16_t *)((char *)v16 + 2);
          v92.i16[0] = v90.i16[0];
          v92.i16[1] = v18->i16[0];
          v18 = (uint8x16_t *)((char *)v18 + 2);
          v95.i64[0] = 0x1000000010000;
          v95.i64[1] = 0x1000000010000;
          v96 = vpadd_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v93.i8);
          v97 = vpadd_s16((int16x4_t)v93.u64[1], (int16x4_t)v93.u64[1]);
          v98 = vpadd_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v94.i8);
          v99 = vpadd_s16((int16x4_t)v94.u64[1], (int16x4_t)v94.u64[1]);
          v100 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v28, 6), (int16x4_t)v93.u64[1], v28, 5), *(int16x4_t *)v94.i8, v28, 4), (int16x4_t)v94.u64[1], *(int16x4_t *)v28.i8, 2);
          v101 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v96, v96), 2uLL);
          v102 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v97, v97), 2uLL);
          v103 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v98, v98), 2uLL);
          v104 = (int16x4_t)vshr_n_u16((uint16x4_t)vpadd_s16(v99, v99), 2uLL);
          v90.i16[0] = *(_WORD *)v17;
          v17 += 2;
          v9.i16[0] = v90.i16[0];
          v9.i64[0] = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v9.i8)).u64[0];
          *(int16x4_t *)v100.i8 = vadd_s16(vmul_n_s16(vshrn_n_s32((int32x4_t)v100, 0xFuLL), v28.i16[0]), vshrn_n_s32(vmulq_s32((int32x4_t)vmlsl_lane_u16(v95, (uint16x4_t)v94.u64[1], *(uint16x4_t *)v28.i8, 1), (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)v92))), 8uLL));
          v100.i32[0] = vshrn_n_s16(v100, 8uLL).u32[0];
          v22->i16[0] = v100.i16[0];
          v22 = (int8x8_t *)((char *)v22 + 2);
          v25->i16[0] = v100.i16[1];
          v25 = (int8x8_t *)((char *)v25 + 2);
          v105 = (int16x8_t)vmlal_lane_s16(vmlal_laneq_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), v102, (int16x4_t)0xFADBCCEF3838D4ABLL, 0), v103, v28, 7), v104, *(int16x4_t *)v28.i8, 3);
          v106 = (int16x8_t)vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(v101, (int16x4_t)0xFADBCCEF3838D4ABLL, 3), v102, (int16x4_t)0xFADBCCEF3838D4ABLL, 2), v103, (int16x4_t)0xFADBCCEF3838D4ABLL, 1), v104, *(int16x4_t *)v28.i8, 3);
          v10.i64[0] = 0x1000000010000;
          v105.i32[1] = v106.i32[0];
          v10 = (int32x4_t)vmlsl_lane_u16((uint32x4_t)v10, (uint16x4_t)v104, *(uint16x4_t *)v28.i8, 1);
          *(int16x4_t *)v105.i8 = vshrn_n_s32((int32x4_t)v105, 0xFuLL);
          *(int32x2_t *)v10.i8 = vmul_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v10.i8);
          *(int16x4_t *)v106.i8 = vadd_s16(vshrn_n_s32(v10, 8uLL), (int16x4_t)*(_OWORD *)&vmulq_n_s16(v105, v28.i16[0]));
          v24->i16[0] = vshrn_n_s16(v106, 8uLL).u16[0];
          v24 = (int8x8_t *)((char *)v24 + 2);
          --v87;
        }
        while (v87);
      }
      --v11;
      v22 = (int8x8_t *)((char *)v22 + v26);
      v25 = (int8x8_t *)((char *)v25 + v26);
      v24 = (int8x8_t *)((char *)v24 + v27);
      v13 += v15;
      v14 += v15;
      v16 = (uint8x16_t *)((char *)v16 + v19);
      v18 = (uint8x16_t *)((char *)v18 + v19);
      v17 += v20;
    }
    while (v11);
  }
  return 0;
}

uint64_t FigDataChannelGroupGetTypeID()
{
  if (FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce != -1)
    dispatch_once(&FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce, &__block_literal_global_123);
  return FigDataChannelGroupGetTypeID_sDataChannelGroupTypeID;
}

uint64_t dataChannelGroup_init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void dataChannelGroup_finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t dataChannelGroup_equal()
{
  return FigCFEqual();
}

CFHashCode dataChannelGroup_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 16));
}

__CFString *dataChannelGroup_copyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigChannelDataGroup %p>: %@"), a1, a1[2]);
  return Mutable;
}

uint64_t FigDataChannelGroupCreate(const __CFAllocator *a1, _QWORD *a2)
{
  if (a2)
    return dataChannelGroup_createDataChannelGroup(a1, a2);
  else
    return FigSignalErrorAt();
}

uint64_t dataChannelGroup_createDataChannelGroup(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v5;
  CFMutableArrayRef Mutable;
  uint64_t v8;

  if (FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce != -1)
    dispatch_once(&FigDataChannelGroupGetTypeID_sRegisterDataChannelGroupTypeOnce, &__block_literal_global_123);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v5 = (_QWORD *)Instance;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  v5[2] = Mutable;
  if (Mutable)
  {
    *a2 = v5;
    return 0;
  }
  else
  {
    v8 = FigSignalErrorAt();
    CFRelease(v5);
    return v8;
  }
}

uint64_t FigDataChannelGroupCreateFromDataChannelList(const __CFAllocator *a1, CFArrayRef theArray, _QWORD *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  __CFArray *v8;
  uint64_t v9;
  CFTypeRef cf;
  CFRange v12;

  cf = 0;
  if (!a3 || !theArray || CFArrayGetCount(theArray) <= 0)
    return FigSignalErrorAt();
  v6 = dataChannelGroup_createDataChannelGroup(a1, &cf);
  v7 = cf;
  if ((_DWORD)v6)
  {
    v9 = v6;
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v8 = (__CFArray *)*((_QWORD *)cf + 2);
    v12.length = CFArrayGetCount(theArray);
    v12.location = 0;
    CFArrayAppendArray(v8, theArray, v12);
    v9 = 0;
    *a3 = v7;
  }
  return v9;
}

uint64_t FigDataChannelGroupCreateForUseCase(const __CFAllocator *a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v49;
  __int128 *v50;
  __int128 v51;
  __int128 *v52;
  __int128 v53;
  __int128 *v54;
  __int128 v55;
  __int128 *v56;
  __int128 v57;
  __int128 v58;
  __int128 *v59;
  __int128 v60;
  __int128 v61;
  const void *v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v62 = 0;
  if (a3)
  {
    LODWORD(v4) = a2;
    v5 = dataChannelGroup_createDataChannelGroup(a1, &v62);
    if ((_DWORD)v5)
    {
LABEL_8:
      v9 = v5;
LABEL_23:
      v6 = v62;
LABEL_24:
      if (!v6)
        return v9;
LABEL_25:
      CFRelease(v6);
      return v9;
    }
    if ((_DWORD)v4)
    {
      if (v4 <= 4)
      {
        v6 = v62;
        v4 = v4;
        v7 = (__int128 *)MEMORY[0x1E0CA5228];
        while (v4)
        {
          v64 = *v7;
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v8;
          v5 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v6, (uint64_t)&v64, 2);
          --v4;
          if ((_DWORD)v5)
            goto LABEL_8;
        }
        goto LABEL_46;
      }
      if (v4 <= 0xC)
      {
        v63[0] = xmmword_193301760;
        v6 = v62;
        v12 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v62, (uint64_t)v63, 1);
        if ((_DWORD)v12)
        {
          v9 = v12;
          if (!v6)
            return v9;
          goto LABEL_25;
        }
        if (v4 <= 0xB
          && (((1 << v4) & 0x220) != 0 || ((1 << v4) & 0x440) != 0 || ((1 << v4) & 0x880) != 0))
        {
          *(_QWORD *)&v64 = FigTagMakeWithOSTypeValue();
          *((_QWORD *)&v64 + 1) = v15;
        }
        else
        {
          if ((v4 & 0xFFFFFFFB) != 8)
            goto LABEL_46;
          v64 = *MEMORY[0x1E0CA5220];
        }
        *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
        *((_QWORD *)&v65 + 1) = v16;
        v9 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v6, (uint64_t)&v64, 2);
        if ((_DWORD)v9)
          goto LABEL_23;
LABEL_46:
        v9 = 0;
        *a3 = v6;
        return v9;
      }
      switch((int)v4)
      {
        case 'd':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v13;
          v14 = *MEMORY[0x1E0CA5278];
          v66 = *MEMORY[0x1E0CA5240];
          v67 = v14;
          goto LABEL_30;
        case 'e':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v17;
          *(_QWORD *)&v66 = FigTagMakeWithOSTypeValue();
          *((_QWORD *)&v66 + 1) = v18;
          *(_QWORD *)&v67 = FigTagMakeWithFlagsValue();
          *((_QWORD *)&v67 + 1) = v19;
LABEL_30:
          v20 = (__int128 *)MEMORY[0x1E0CA5250];
          goto LABEL_32;
        case 'f':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v21;
          *(_QWORD *)&v66 = FigTagMakeWithOSTypeValue();
          *((_QWORD *)&v66 + 1) = v22;
          *(_QWORD *)&v67 = FigTagMakeWithFlagsValue();
          *((_QWORD *)&v67 + 1) = v23;
          v20 = (__int128 *)MEMORY[0x1E0CA5260];
LABEL_32:
          v68 = *v20;
          v6 = v62;
          v10 = (uint64_t)v62;
          v11 = 5;
          goto LABEL_10;
        case 'g':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v24;
          v25 = *MEMORY[0x1E0CA5278];
          v66 = *MEMORY[0x1E0CA5240];
          v67 = v25;
          goto LABEL_35;
        case 'h':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v26;
          *(_QWORD *)&v66 = FigTagMakeWithOSTypeValue();
          *((_QWORD *)&v66 + 1) = v27;
          *(_QWORD *)&v67 = FigTagMakeWithFlagsValue();
          *((_QWORD *)&v67 + 1) = v28;
LABEL_35:
          v29 = (__int128 *)MEMORY[0x1E0CA5250];
          goto LABEL_37;
        case 'i':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v30;
          *(_QWORD *)&v66 = FigTagMakeWithOSTypeValue();
          *((_QWORD *)&v66 + 1) = v31;
          *(_QWORD *)&v67 = FigTagMakeWithFlagsValue();
          *((_QWORD *)&v67 + 1) = v32;
          v29 = (__int128 *)MEMORY[0x1E0CA5260];
LABEL_37:
          v33 = *v29;
          v34 = (__int128 *)MEMORY[0x1E0CA5268];
          goto LABEL_43;
        case 'j':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v35;
          v36 = *MEMORY[0x1E0CA5278];
          v66 = *MEMORY[0x1E0CA5240];
          v67 = v36;
          goto LABEL_40;
        case 'k':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v37;
          *(_QWORD *)&v66 = FigTagMakeWithOSTypeValue();
          *((_QWORD *)&v66 + 1) = v38;
          *(_QWORD *)&v67 = FigTagMakeWithFlagsValue();
          *((_QWORD *)&v67 + 1) = v39;
LABEL_40:
          v40 = (__int128 *)MEMORY[0x1E0CA5250];
          goto LABEL_42;
        case 'l':
          v64 = *MEMORY[0x1E0CA5228];
          *(_QWORD *)&v65 = FigTagMakeWithSInt64Value();
          *((_QWORD *)&v65 + 1) = v41;
          *(_QWORD *)&v66 = FigTagMakeWithOSTypeValue();
          *((_QWORD *)&v66 + 1) = v42;
          *(_QWORD *)&v67 = FigTagMakeWithFlagsValue();
          *((_QWORD *)&v67 + 1) = v43;
          v40 = (__int128 *)MEMORY[0x1E0CA5260];
LABEL_42:
          v33 = *v40;
          v34 = (__int128 *)MEMORY[0x1E0CA5270];
LABEL_43:
          v44 = *v34;
          v68 = v33;
          v69 = v44;
          v6 = v62;
          v10 = (uint64_t)v62;
          v11 = 6;
          goto LABEL_10;
        case 'm':
          v45 = *MEMORY[0x1E0CA5230];
          v64 = *MEMORY[0x1E0CA5228];
          v65 = v45;
          v46 = *MEMORY[0x1E0CA5250];
          v66 = *MEMORY[0x1E0CA5278];
          v67 = v46;
          v47 = *MEMORY[0x1E0CA5210];
          v63[0] = *MEMORY[0x1E0CA5220];
          v63[1] = v47;
          v6 = v62;
          v5 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v62, (uint64_t)&v64, 4);
          if (!(_DWORD)v5)
          {
            v5 = FigDataChannelGroupAddDataChannelWithFigTags((uint64_t)v6, (uint64_t)v63, 2);
            if (!(_DWORD)v5)
              goto LABEL_46;
          }
          goto LABEL_8;
        case 'n':
          v49 = *MEMORY[0x1E0CA5230];
          v64 = *MEMORY[0x1E0CA5228];
          v65 = v49;
          v50 = (__int128 *)MEMORY[0x1E0CA5288];
          goto LABEL_54;
        case 'o':
          v51 = *MEMORY[0x1E0CA5240];
          v64 = *MEMORY[0x1E0CA5228];
          v65 = v51;
          v52 = (__int128 *)MEMORY[0x1E0CA5288];
          goto LABEL_57;
        case 'p':
          v53 = *MEMORY[0x1E0CA5228];
          v54 = (__int128 *)MEMORY[0x1E0CA5230];
          goto LABEL_53;
        case 'q':
          v55 = *MEMORY[0x1E0CA5228];
          v56 = (__int128 *)MEMORY[0x1E0CA5230];
          goto LABEL_56;
        case 'r':
          v53 = *MEMORY[0x1E0CA5228];
          v54 = (__int128 *)MEMORY[0x1E0CA5238];
LABEL_53:
          v57 = *v54;
          v64 = v53;
          v65 = v57;
          v50 = (__int128 *)MEMORY[0x1E0CA5278];
LABEL_54:
          v58 = *v50;
          v59 = (__int128 *)MEMORY[0x1E0CA5248];
          break;
        case 's':
          v55 = *MEMORY[0x1E0CA5228];
          v56 = (__int128 *)MEMORY[0x1E0CA5240];
LABEL_56:
          v60 = *v56;
          v64 = v55;
          v65 = v60;
          v52 = (__int128 *)MEMORY[0x1E0CA5278];
LABEL_57:
          v58 = *v52;
          v59 = (__int128 *)MEMORY[0x1E0CA5258];
          break;
        default:
          v9 = 4294951536;
          goto LABEL_23;
      }
      v61 = *v59;
      v66 = v58;
      v67 = v61;
      v6 = v62;
      v10 = (uint64_t)v62;
      v11 = 4;
    }
    else
    {
      v64 = xmmword_193301760;
      v6 = v62;
      v10 = (uint64_t)v62;
      v11 = 1;
    }
LABEL_10:
    v9 = FigDataChannelGroupAddDataChannelWithFigTags(v10, (uint64_t)&v64, v11);
    if ((_DWORD)v9)
      goto LABEL_24;
    goto LABEL_46;
  }
  return FigSignalErrorAt();
}

uint64_t FigDataChannelGroupAddDataChannelWithFigTags(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  if (a3 <= 0)
    return FigSignalErrorAt();
  result = FigTagCollectionCreate();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigDataChannelGroupCopyDataChannelList(uint64_t a1, CFAllocatorRef allocator, CFArrayRef *a3)
{
  CFArrayRef Copy;

  if (a1 && a3 && (Copy = CFArrayCreateCopy(allocator, *(CFArrayRef *)(a1 + 16)), (*a3 = Copy) != 0))
    return 0;
  else
    return FigSignalErrorAt();
}

CFIndex FigDataChannelGroupGetCountOfDataChannels(uint64_t a1)
{
  const __CFArray *v1;

  if (a1)
  {
    v1 = *(const __CFArray **)(a1 + 16);
    if (v1)
      return CFArrayGetCount(v1);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigDataChannelGroupAddDataChannel(uint64_t a1, void *value)
{
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  const OpaqueCMTagCollection *ValueAtIndex;

  if (a1 && value)
  {
    v4 = *(const __CFArray **)(a1 + 16);
    if (!v4 || (Count = CFArrayGetCount(v4), Count < 1))
    {
LABEL_8:
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 16), value);
      return 0;
    }
    v6 = Count;
    v7 = 0;
    while (1)
    {
      ValueAtIndex = (const OpaqueCMTagCollection *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v7);
      if (CMTagCollectionContainsTagsOfCollection(ValueAtIndex, (CMTagCollectionRef)value))
        break;
      if (v6 == ++v7)
        goto LABEL_8;
    }
  }
  return FigSignalErrorAt();
}

const void *FigDataChannelGroupGetDataChannelByIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;

  if (a1 && (idx & 0x8000000000000000) == 0)
  {
    Count = *(const __CFArray **)(a1 + 16);
    if (Count)
      Count = (const __CFArray *)CFArrayGetCount(Count);
    if ((uint64_t)Count > idx)
      return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), idx);
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t FigDataChannelGroupRemoveDataChannelByIndex(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;

  if (!a1 || idx < 0)
    return FigSignalErrorAt();
  Count = *(const __CFArray **)(a1 + 16);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return FigSignalErrorAt();
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 16), idx);
  return 0;
}

uint64_t channelgroup_copyAsDictionary(uint64_t a1, CFAllocatorRef allocator, CFDictionaryRef *a3)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const void *ValueAtIndex;
  const void *v13;
  const void *v14;
  CFDictionaryRef v15;
  uint64_t v16;
  void *values;

  values = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    goto LABEL_14;
  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  values = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  v8 = *(const __CFArray **)(a1 + 16);
  if (v8)
  {
    Count = CFArrayGetCount(v8);
    if (Count >= 1)
    {
      v10 = Count;
      v11 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v11);
        v13 = (const void *)MEMORY[0x19402EFD0](ValueAtIndex, allocator);
        if (!v13)
          goto LABEL_14;
        v14 = v13;
        CFArrayAppendValue(v7, v13);
        CFRelease(v14);
      }
      while (v10 != ++v11);
    }
  }
  v15 = CFDictionaryCreate(allocator, (const void **)kFigDataChannelGroupKey_ChannelList, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v15)
  {
LABEL_14:
    v16 = FigSignalErrorAt();
    goto LABEL_11;
  }
  v16 = 0;
  *a3 = v15;
LABEL_11:
  if (values)
    CFRelease(values);
  return v16;
}

uint64_t channelgroup_createFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  CFMutableArrayRef Mutable;
  __CFArray *v11;
  CFIndex v12;
  const void *ValueAtIndex;
  uint64_t v14;
  CFTypeRef v15;
  __CFArray *v16;
  uint64_t v17;
  void *value;
  CFTypeRef cf;
  CFRange v21;

  cf = 0;
  if (!theDict)
    return FigSignalErrorAt();
  if (!a3)
    goto LABEL_20;
  v5 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("ChannelList"));
  if (!v5)
    goto LABEL_20;
  v6 = v5;
  v7 = dataChannelGroup_createDataChannelGroup(a1, &cf);
  if ((_DWORD)v7)
  {
LABEL_21:
    v17 = v7;
    goto LABEL_14;
  }
  Count = CFArrayGetCount(v6);
  if (Count <= 0)
  {
    v11 = 0;
    v15 = cf;
LABEL_12:
    v17 = 0;
    *a3 = v15;
    cf = 0;
    if (!v11)
      goto LABEL_14;
    goto LABEL_13;
  }
  v9 = Count;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_20:
    v7 = FigSignalErrorAt();
    goto LABEL_21;
  }
  v11 = Mutable;
  v12 = 0;
  while (1)
  {
    value = 0;
    ValueAtIndex = CFArrayGetValueAtIndex(v6, v12);
    v14 = MEMORY[0x19402F00C](ValueAtIndex, a1, &value);
    if ((_DWORD)v14)
      break;
    CFArrayAppendValue(v11, value);
    CFRelease(value);
    if (v9 == ++v12)
    {
      v15 = cf;
      v16 = (__CFArray *)*((_QWORD *)cf + 2);
      v21.length = CFArrayGetCount(v11);
      v21.location = 0;
      CFArrayAppendArray(v16, v11, v21);
      goto LABEL_12;
    }
  }
  v17 = v14;
LABEL_13:
  CFRelease(v11);
LABEL_14:
  if (cf)
    CFRelease(cf);
  return v17;
}

uint64_t FigDataChannelGroupsArrayCopyAsDictionary(const __CFArray *a1, CFAllocatorRef allocator, CFDictionaryRef *a3)
{
  CFMutableArrayRef Mutable;
  __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  const void *ValueAtIndex;
  uint64_t v12;
  CFDictionaryRef v13;
  uint64_t v14;
  void *value;
  void *values;

  values = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a3)
    goto LABEL_16;
  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  values = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v7 = Mutable;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v9 = Count;
    v10 = 0;
    do
    {
      value = 0;
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v10);
      v12 = channelgroup_copyAsDictionary((uint64_t)ValueAtIndex, allocator, (CFDictionaryRef *)&value);
      if ((_DWORD)v12)
        goto LABEL_17;
      CFArrayAppendValue(v7, value);
      CFRelease(value);
    }
    while (v9 != ++v10);
  }
  v13 = CFDictionaryCreate(allocator, (const void **)&kFigDataChannelGroupKey_GroupsList, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v13)
  {
LABEL_16:
    v12 = FigSignalErrorAt();
LABEL_17:
    v14 = v12;
    goto LABEL_10;
  }
  v14 = 0;
  *a3 = v13;
LABEL_10:
  if (values)
    CFRelease(values);
  return v14;
}

uint64_t FigDataChannelGroupsArrayCreateFromDictionary(const __CFAllocator *a1, CFDictionaryRef theDict, __CFArray **a3)
{
  const __CFArray *v5;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  CFMutableArrayRef Mutable;
  __CFArray *v10;
  CFIndex v11;
  const __CFDictionary *ValueAtIndex;
  uint64_t v13;
  uint64_t v14;
  void *value;

  if (!theDict)
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v5 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("DataChannelGroupsList"));
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  Count = CFArrayGetCount(v5);
  if (Count <= 0)
    return FigSignalErrorAt();
  v8 = Count;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v10 = Mutable;
  v11 = 0;
  while (1)
  {
    value = 0;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, v11);
    v13 = channelgroup_createFromDictionary(a1, ValueAtIndex, &value);
    if ((_DWORD)v13)
      break;
    CFArrayAppendValue(v10, value);
    CFRelease(value);
    if (v8 == ++v11)
    {
      v14 = 0;
      *a3 = v10;
      return v14;
    }
  }
  v14 = v13;
  CFRelease(v10);
  return v14;
}

BOOL FigNetworkInterfaceReporterECNRefused(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t FigNetworkInterfaceReporterDoesSupportSACK(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t FigNetworkInterfaceReporterGetPredictedWirelessThroughput()
{
  void *v0;
  id v1;
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v0 = (void *)MEMORY[0x19403137C]();
  FigGetUpTimeNanoseconds();
  v1 = objc_alloc_init(getWRM_iRATInterfaceClass());
  if (v1)
  {
    v2 = dispatch_semaphore_create(0);
    if (v2)
    {
      v3 = dispatch_queue_create("com.apple.coremedia.wirelesscoex", 0);
      if (v3)
      {
        FigGetUpTimeNanoseconds();
        objc_msgSend(v1, "registerClient:queue:", 34, v3);
        FigGetUpTimeNanoseconds();
        v7[0] = MEMORY[0x1E0C809B0];
        v7[1] = 3221225472;
        v7[2] = __FigNetworkInterfaceReporterGetPredictedWirelessThroughput_block_invoke;
        v7[3] = &unk_1E2FB9380;
        v7[4] = v2;
        v7[5] = &v8;
        objc_msgSend(v1, "getMLPredictedThroughput:options:", v7, 0);
        v4 = dispatch_time(0, 1000000000);
        dispatch_semaphore_wait(v2, v4);
        FigGetUpTimeNanoseconds();
        objc_msgSend(v1, "unregisterClient");
      }
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    v2 = 0;
  }

  if (v3)
    dispatch_release(v3);
  if (v2)
    dispatch_release(v2);
  objc_autoreleasePoolPop(v0);
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_193003D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FigNetworkInterfaceReporterSamplePhysicalStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int (*v10)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *);
  uint64_t AllocatorForMedia;
  unsigned int (*v12)(uint64_t, __CFString *, uint64_t, CFBooleanRef *);
  int Value;
  uint64_t *v14;
  const __CFDictionary *v15;
  const __CFString *v16;
  void (*v17)(uint64_t, uint64_t, __CFString *, uint64_t);
  __CFString *v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, __CFString *, uint64_t);
  void (*v21)(uint64_t, uint64_t, __CFString *, uint64_t);
  unint64_t v22;
  void (*v23)(uint64_t, uint64_t, __CFString *, unint64_t, _QWORD);
  void (*v24)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  const __CFString *v25;
  const __CFString *v26;
  uint64_t v27;
  const __CFString *v28;
  int Int32IfPresent;
  int v30;
  int v31;
  int v32;
  void (*v33)(uint64_t, uint64_t, __CFString *, _QWORD);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  void (*v37)(uint64_t, uint64_t, __CFString *, uint64_t);
  const void *v38;
  uint64_t v39;
  const void *v40;
  uint64_t v41;
  int v42;
  void (*v43)(uint64_t, uint64_t, __CFString *, _QWORD);
  int v44;
  void (*v45)(uint64_t, uint64_t, __CFString *, _QWORD, _QWORD);
  const __CFDictionary *v46;
  const __CFDictionary *v47;
  const __CFDictionary *v48;
  const __CFDictionary *v49;
  const void *v50;
  const void *v51;
  const __CFData *v52;
  const __CFData *v53;
  const __CFData *v54;
  const __CFData *v55;
  const UInt8 *BytePtr;
  const UInt8 *v57;
  const UInt8 *v58;
  const UInt8 *v59;
  unsigned int v60;
  int v61;
  const void *v62;
  double v63;
  const __CFDictionary *v64;
  int v65;
  unint64_t v66;
  void (*v67)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, __CFString *, uint64_t);
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  void (*v84)(uint64_t, uint64_t, __CFString *, _QWORD);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, __CFString *, uint64_t);
  int v90;
  int v91;
  void (*v92)(uint64_t, uint64_t, __CFString *, _QWORD);
  int v93;
  __CFString *v94;
  void (*v95)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, __CFString *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, __CFString *, uint64_t);
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  void (*v110)(uint64_t, uint64_t, __CFString *, _QWORD);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t, __CFString *, uint64_t);
  int v116;
  int v117;
  void (*v118)(uint64_t, uint64_t, __CFString *, _QWORD);
  int v119;
  int v120;
  void (*v121)(uint64_t, uint64_t, __CFString *, _QWORD);
  void (*v122)(uint64_t, uint64_t, __CFString *, uint64_t);
  void (*v123)(uint64_t, uint64_t, __CFString *, uint64_t);
  void (*v124)(uint64_t, uint64_t, __CFString *, uint64_t);
  __CFString *v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD);
  int v140;
  uint64_t v141;
  float v142;
  double v143;
  uint64_t v144;
  int v145;
  double *v146;
  void (*v147)(uint64_t, uint64_t, __CFString *, uint64_t);
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  CFBooleanRef BOOLean;
  CFDictionaryRef theDict;
  double v160;
  char buffer[8];
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  theDict = 0;
  if (a1)
  {
    if (!a2)
    {
      if (!*(_QWORD *)(a1 + 328))
        goto LABEL_193;
      v14 = (uint64_t *)(a1 + 328);
      goto LABEL_178;
    }
    BOOLean = 0;
    v10 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
    if (!v10 || v10(a2, CFSTR("FHRP_CFNetworkTimingData"), *MEMORY[0x1E0C9AE00], &theDict))
      goto LABEL_193;
    AllocatorForMedia = FigGetAllocatorForMedia();
    v12 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFBooleanRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
    if (v12 && !v12(a2, CFSTR("FHRP_IsExpensive"), AllocatorForMedia, &BOOLean))
    {
      Value = CFBooleanGetValue(BOOLean);
      if (!a3)
        goto LABEL_164;
    }
    else
    {
      Value = 0;
      if (!a3)
        goto LABEL_164;
    }
    if (!a4)
      goto LABEL_164;
    v15 = theDict;
    if (!theDict)
      goto LABEL_159;
    buffer[0] = 0;
    LOBYTE(v165) = 0;
    v16 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("_kCFNTimingDataNetworkProtocolName"));
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    if (!v16)
      goto LABEL_21;
    if (CFStringCompare(v16, CFSTR("http/1.1"), 1uLL) == kCFCompareEqualTo)
    {
      if (buffer[0])
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoHTTPRace");
          goto LABEL_38;
        }
      }
      else
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoHTTP");
          goto LABEL_38;
        }
      }
      goto LABEL_39;
    }
    if (CFStringCompare(v16, CFSTR("h2"), 1uLL) == kCFCompareEqualTo)
    {
      if (buffer[0])
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoHTTP2Race");
          goto LABEL_38;
        }
      }
      else
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoHTTP2");
          goto LABEL_38;
        }
      }
      goto LABEL_39;
    }
    if (CFStringHasPrefix(v16, CFSTR("h3")))
    {
      if (buffer[0])
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoHTTP3Race");
LABEL_38:
          v17(a3, a4, v18, 1);
        }
      }
      else
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoHTTP3");
          goto LABEL_38;
        }
      }
    }
    else
    {
LABEL_21:
      if (buffer[0])
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoOtherRace");
          goto LABEL_38;
        }
      }
      else
      {
        v17 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v17)
        {
          v18 = CFSTR("ProtoOther");
          goto LABEL_38;
        }
      }
    }
LABEL_39:
    v160 = 0.0;
    *(double *)buffer = 0.0;
    *(_QWORD *)&v165 = 0;
    if (FigCFDictionaryGetDoubleIfPresent()
      && *(double *)buffer > 0.0
      && FigCFDictionaryGetDoubleIfPresent()
      && *(double *)&v165 > 0.0
      && FigCFDictionaryGetDoubleIfPresent()
      && v160 > 0.0
      && v160 > *(double *)buffer
      && *(double *)&v165 > *(double *)buffer)
    {
      v19 = (uint64_t)((v160 - *(double *)buffer) * 1000.0);
      v20 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 32);
      if (v20)
        v20(a3, a4, CFSTR("DownloadTime"), v19);
      if (Value)
      {
        v21 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v21)
          v21(a3, a4, CFSTR("DownloadTimeX"), v19);
      }
      if (!*(_QWORD *)(a1 + 312))
      {
        v22 = (unint64_t)(*(double *)buffer * -1000.0 + *(double *)&v165 * 1000.0);
        *(_QWORD *)(a1 + 312) = v22;
        v23 = *(void (**)(uint64_t, uint64_t, __CFString *, unint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 56);
        if (v23)
          v23(a3, a4, CFSTR("FBTime"), v22, 0);
      }
      if (a5)
      {
        v24 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 56);
        if (v24)
          v24(a3, a4, CFSTR("SDTTCP"), v19, 0);
      }
    }
    v25 = (const __CFString *)CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataNetworkProtocolName"));
    if (!v25)
      goto LABEL_159;
    v26 = v25;
    v27 = FigCFDictionaryGetValue();
    v157 = a4;
    if (v27)
    {
      v28 = (const __CFString *)v27;
      LODWORD(v160) = 0;
      MEMORY[0x19402EEEC](sFigNetworkInterfaceNameToTypeMutex);
      Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
      MEMORY[0x19402EF04](sFigNetworkInterfaceNameToTypeMutex);
      if (!Int32IfPresent)
      {
        v30 = socket(2, 2, 0);
        if ((v30 & 0x80000000) == 0)
        {
          v31 = v30;
          v165 = 0u;
          v166 = 0u;
          if (CFStringGetCString(v28, buffer, 256, 0x8000100u))
          {
            __strlcpy_chk();
            if ((ioctl(v31, 0xC02069ADuLL, &v165) & 0x80000000) == 0)
              LODWORD(v160) = v166;
            close(v31);
            MEMORY[0x19402EEEC](sFigNetworkInterfaceNameToTypeMutex);
            FigCFDictionarySetInt32();
            MEMORY[0x19402EF04](sFigNetworkInterfaceNameToTypeMutex);
          }
        }
      }
      v32 = LODWORD(v160);
      v33 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 96);
      if (v33)
        v33(a3, a4, CFSTR("IfTy"), v32);
      if (v32 == 3)
      {
        v34 = *(_QWORD *)(a1 + 320);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 32);
          v36 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 48);
          if (v36)
            v36(a3, a4, CFSTR("WiFiFreq"), v35, 0);
        }
      }
      if (*(_DWORD *)(a1 + 152) != v32)
      {
        v37 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 32);
        if (v37)
          v37(a3, a4, CFSTR("IfChgCount"), 1);
      }
      if (v32)
        *(_DWORD *)(a1 + 152) = v32;
    }
    if (CFStringCompare(v26, CFSTR("http/1.1"), 1uLL) && CFStringCompare(v26, CFSTR("h2"), 1uLL))
    {
      if (CFStringHasPrefix(v26, CFSTR("h3")))
      {
        *(_DWORD *)buffer = 0;
        v38 = CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataConnectionStartTimeCounts"));
        if (v38)
        {
          v39 = (uint64_t)v38;
          v40 = CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataConnectionStopTimeCounts"));
          if (v40)
          {
            v41 = (uint64_t)v40;
            if (CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataConnectionUUID")))
            {
              FigCFDictionaryGetIntIfPresent();
              v42 = *(_DWORD *)buffer;
              v43 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 16)
                                                                                  + 40);
              if (v43)
                v43(a3, a4, CFSTR("QUICI_RTT"), v42 / 1000);
              figNetworkInterfaceAddToCountValue(v39, v41, (uint64_t)CFSTR("_kCFNTimingDataQConnStatsBytesReceived"), a3, a4, 0x1E301CFB8);
              figNetworkInterfaceAddToCountValue(v39, v41, (uint64_t)CFSTR("_kCFNTimingDataQConnPacketsReordered"), a3, a4, 0x1E301CFD8);
              figNetworkInterfaceAddToCountValue(v39, v41, (uint64_t)CFSTR("_kCFNTimingDataQConnStatsPacketsReceived"), a3, a4, 0x1E301CFF8);
              if (a5)
              {
                v44 = *(_DWORD *)buffer;
                v45 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 56);
                if (v45)
                  v45(a3, a4, CFSTR("QUICI_SSegRTT"), v44 / 1000, 0);
                figNetworkInterfaceAddToCountValue(v39, v41, (uint64_t)CFSTR("_kCFNTimingDataQConnStatsBytesReceived"), a3, a4, 0x1E301D038);
                figNetworkInterfaceAddToCountValue(v39, v41, (uint64_t)CFSTR("_kCFNTimingDataQConnStatsStreamBytesReceived"), a3, a4, 0x1E301D058);
              }
            }
          }
        }
      }
      goto LABEL_159;
    }
    v46 = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataTCPInfoAtStart"));
    if (v46)
    {
      v47 = v46;
      v48 = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataTCPInfoAtStop"));
      if (v48)
      {
        v49 = v48;
        v50 = CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataConnectionInterfaceIdentifier"));
        if (v50)
        {
          v51 = v50;
          if (CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataConnectionUUID")))
          {
            v52 = (const __CFData *)CFDictionaryGetValue(v47, v51);
            if (v52)
            {
              v53 = v52;
              v54 = (const __CFData *)CFDictionaryGetValue(v49, v51);
              if (v54)
              {
                v55 = v54;
                BytePtr = CFDataGetBytePtr(v53);
                if (BytePtr)
                {
                  v57 = BytePtr;
                  v58 = CFDataGetBytePtr(v55);
                  if (v58)
                  {
                    v59 = v58;
                    if (*((_DWORD *)v57 + 70) == *((_DWORD *)v58 + 70))
                    {
                      v60 = v58[1];
                      if ((v60 & 8) != 0)
                        v61 = 2;
                      else
                        v61 = ((*((_DWORD *)v58 + 61) >> 15) & 1) == 0;
                      *(_DWORD *)(a1 + 8) = v61;
                      *(_DWORD *)(a1 + 12) = (v60 >> 1) & 1;
                      v162 = 0;
                      v163 = 0;
                      v164 = 0;
                      v62 = CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataTCPInfoAtStart"));
                      if (v62
                        && (v63 = *(double *)&v62,
                            (v64 = (const __CFDictionary *)CFDictionaryGetValue(v15, CFSTR("_kCFNTimingDataTCPInfoAtStop"))) != 0))
                      {
                        *(double *)buffer = v63;
                        CFDictionaryApplyFunction(v64, (CFDictionaryApplierFunction)figNetworkInterfaceTCPInfoGetByteCountsForEachInterface, buffer);
                        v154 = v163;
                        v152 = v162;
                        v153 = v164;
                      }
                      else
                      {
                        v153 = 0;
                        v154 = 0;
                        v152 = 0;
                      }
                      v65 = *(_DWORD *)(a1 + 152);
                      v66 = *((unsigned int *)v59 + 61);
                      v67 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                      if (v67)
                        v67(a3, a4, CFSTR("TCPI_ECNS"), (v66 >> 17) & 1, 0);
                      v68 = *((unsigned int *)v59 + 6);
                      v155 = v65;
                      v156 = a5;
                      if ((v59[246] & 2) != 0)
                      {
                        v95 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 40);
                        if (v95)
                          v95(a3, a4, CFSTR("TCPI_ERTT"), v68);
                        v96 = *((unsigned int *)v59 + 7);
                        v97 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 40);
                        if (v97)
                          v97(a3, a4, CFSTR("TCPI_ERTTV"), v96);
                        v98 = *(_QWORD *)(v59 + 124);
                        v99 = *(_QWORD *)(v57 + 124);
                        v100 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
                        if (v100)
                          v100(a3, a4, CFSTR("TCPI_EOOB"), v98 - v99);
                        v101 = *(_QWORD *)(v59 + 108);
                        v102 = *(_QWORD *)(v57 + 108);
                        v103 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
                        if (v103)
                          v103(a3, a4, CFSTR("TCPI_EBytesRecv"), v101 - v102);
                        v149 = *((_DWORD *)v57 + 67);
                        v151 = *((_DWORD *)v59 + 67);
                        v104 = *((_DWORD *)v59 + 65);
                        v105 = *((_DWORD *)v57 + 65);
                        v106 = *((_DWORD *)v59 + 68);
                        v107 = *((_DWORD *)v57 + 68);
                        v108 = *((_DWORD *)v59 + 69);
                        v109 = *((_DWORD *)v57 + 69);
                        v110 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                        if (v110)
                          v110(a3, v157, CFSTR("TCPI_EPacketsReor"), (v151 + v104 + v106 + v108 - (v149 + v105 + v107 + v109)));
                        v111 = *(_QWORD *)(v59 + 100);
                        v112 = *(_QWORD *)(v57 + 100);
                        v113 = *(_QWORD *)(v59 + 68);
                        v114 = *(_QWORD *)(v57 + 68);
                        v115 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
                        a4 = v157;
                        if (v115)
                          v115(a3, v157, CFSTR("TCPI_ETotalPkts"), v111 + v113 - (v112 + v114));
                        v116 = *((_DWORD *)v59 + 62);
                        v117 = *((_DWORD *)v57 + 62);
                        v118 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                        if (v118)
                          v118(a3, v157, CFSTR("TCPI_EPCE"), (v116 - v117));
                        v119 = *((_DWORD *)v59 + 63);
                        v120 = *((_DWORD *)v57 + 63);
                        v121 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                        v93 = v155;
                        if (v121)
                          v121(a3, v157, CFSTR("TCPI_EPCWR"), (v119 - v120));
                        v90 = *((_DWORD *)v59 + 66);
                        v91 = *((_DWORD *)v57 + 66);
                        v92 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
                        if (v92)
                        {
                          v94 = CFSTR("TCPI_ESACK");
                          goto LABEL_139;
                        }
                      }
                      else
                      {
                        v69 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 40);
                        if (v69)
                          v69(a3, a4, CFSTR("TCPI_RTT"), v68);
                        v70 = *((unsigned int *)v59 + 7);
                        v71 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 40);
                        if (v71)
                          v71(a3, a4, CFSTR("TCPI_RTTV"), v70);
                        v72 = *(_QWORD *)(v59 + 124);
                        v73 = *(_QWORD *)(v57 + 124);
                        v74 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                        if (v74)
                          v74(a3, a4, CFSTR("TCPI_OOB"), v72 - v73);
                        v75 = *(_QWORD *)(v59 + 108);
                        v76 = *(_QWORD *)(v57 + 108);
                        v77 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                        if (v77)
                          v77(a3, a4, CFSTR("TCPI_BytesRecv"), v75 - v76);
                        v148 = *((_DWORD *)v57 + 67);
                        v150 = *((_DWORD *)v59 + 67);
                        v78 = *((_DWORD *)v59 + 65);
                        v79 = *((_DWORD *)v57 + 65);
                        v80 = *((_DWORD *)v59 + 68);
                        v81 = *((_DWORD *)v57 + 68);
                        v82 = *((_DWORD *)v59 + 69);
                        v83 = *((_DWORD *)v57 + 69);
                        v84 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
                        if (v84)
                          v84(a3, v157, CFSTR("TCPI_PacketsReor"), (v150 + v78 + v80 + v82 - (v148 + v79 + v81 + v83)));
                        v85 = *(_QWORD *)(v59 + 100);
                        v86 = *(_QWORD *)(v57 + 100);
                        v87 = *(_QWORD *)(v59 + 68);
                        v88 = *(_QWORD *)(v57 + 68);
                        v89 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                        a4 = v157;
                        if (v89)
                          v89(a3, v157, CFSTR("TCPI_TotalPkts"), v85 + v87 - (v86 + v88));
                        v90 = *((_DWORD *)v59 + 66);
                        v91 = *((_DWORD *)v57 + 66);
                        v92 = *(void (**)(uint64_t, uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
                        v93 = v155;
                        if (v92)
                        {
                          v94 = CFSTR("TCPI_SACK");
LABEL_139:
                          v92(a3, a4, v94, (v90 - v91));
                        }
                      }
                      v122 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
                      if (v122)
                        v122(a3, a4, CFSTR("WANBytes"), v152);
                      v123 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                            + 32);
                      if (v123)
                        v123(a3, a4, CFSTR("WWANBytes"), v153);
                      if (v93 == 4)
                      {
                        v124 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
                        if (!v124)
                          goto LABEL_150;
                        v125 = CFSTR("WiFiAWDLBytes");
                      }
                      else
                      {
                        v124 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 32);
                        if (!v124)
                          goto LABEL_150;
                        v125 = CFSTR("WiFiBytes");
                      }
                      v124(a3, a4, v125, v154);
LABEL_150:
                      if (v156)
                      {
                        v126 = *((unsigned int *)v59 + 5);
                        v127 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                        if (v127)
                          v127(a3, a4, CFSTR("CurSegRTT"), v126, 0);
                        v128 = *((unsigned int *)v59 + 6);
                        v129 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                        if (v129)
                          v129(a3, a4, CFSTR("SSegRTT"), v128, 0);
                        v130 = *((unsigned int *)v59 + 7);
                        v131 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                        if (v131)
                          v131(a3, a4, CFSTR("SegRTTVar"), v130, 0);
                        v132 = *(_QWORD *)(v59 + 108);
                        v133 = *(_QWORD *)(v57 + 108);
                        v134 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
                        if (v134)
                          v134(a3, a4, CFSTR("SSTCP"), v132 - v133, 0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_159:
    v135 = *(_QWORD *)(a1 + 320);
    if (v135)
    {
      v136 = *(_QWORD *)(v135 + 64);
      v137 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
      if (v137)
        v137(a3, a4, CFSTR("IBwMin"), v136 << 10, 0);
      v138 = *(_QWORD *)(*(_QWORD *)(a1 + 320) + 72);
      v139 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 56);
      if (v139)
        v139(a3, a4, CFSTR("IBwMax"), v138 << 10, 0);
    }
LABEL_164:
    if (!*(_QWORD *)(a1 + 328))
      goto LABEL_193;
    v140 = *(_DWORD *)(a1 + 152);
    v14 = (uint64_t *)(a1 + 328);
    if (v140)
    {
      if (*(_DWORD *)a1)
      {
        if (*(_DWORD *)a1 != v140)
          *(_BYTE *)(a1 + 4) = 1;
        if ((v140 - 3) > 1)
          goto LABEL_178;
LABEL_176:
        if (!*(_QWORD *)(a1 + 320))
          *(_QWORD *)(a1 + 320) = figNetworkInterfaceRetainGlobalWifiMonitor();
        goto LABEL_178;
      }
      *(_DWORD *)a1 = v140;
      if ((v140 - 5) > 0xFFFFFFFD)
        goto LABEL_176;
      if (*(_QWORD *)(a1 + 320))
      {
        if (sFigNetworkinterfaceWifiMonitor)
          dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, &__block_literal_global_91_0);
        *(_QWORD *)(a1 + 320) = 0;
      }
    }
LABEL_178:
    v141 = *(_QWORD *)(a1 + 320);
    if (v141)
    {
      v142 = *(float *)(v141 + 40);
      if (v142 != -1.0)
      {
        v143 = v142;
        v144 = *v14;
        if (!*v14)
        {
LABEL_189:
          if (a3)
          {
            if (a4)
            {
              v147 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 40);
              if (v147)
                v147(a3, a4, CFSTR("RSSI"), (uint64_t)(v143 * 1000.0));
            }
          }
          goto LABEL_193;
        }
        v145 = *(_DWORD *)(v144 + 32);
        if (v145)
        {
          if (*(double *)v144 > v143)
            *(double *)v144 = v143;
          v146 = (double *)(v144 + 8);
          if (*(double *)(v144 + 8) >= v143)
            goto LABEL_188;
        }
        else
        {
          *(double *)v144 = v143;
          v146 = (double *)(v144 + 8);
        }
        *v146 = v143;
LABEL_188:
        *(double *)(v144 + 16) = *(double *)(v144 + 16) + v143;
        *(double *)(v144 + 24) = v143;
        *(_DWORD *)(v144 + 32) = v145 + 1;
        goto LABEL_189;
      }
    }
LABEL_193:
    if (theDict)
      CFRelease(theDict);
  }
}

void FigAccessLogUpdateWithPhysicalStatistcs(__CFDictionary *a1, CFDictionaryRef theDict)
{
  void *value;

  value = 0;
  if (theDict)
  {
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rssi"), (const void **)&value))
      CFDictionarySetValue(a1, CFSTR("c-rssi"), value);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rsmn"), (const void **)&value))
      CFDictionarySetValue(a1, CFSTR("c-rssi-min"), value);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rsmx"), (const void **)&value))
      CFDictionarySetValue(a1, CFSTR("c-rssi-max"), value);
    if (CFDictionaryGetValueIfPresent(theDict, CFSTR("rsav"), (const void **)&value))
      CFDictionarySetValue(a1, CFSTR("c-rssi-avg"), value);
  }
}

void FigReportingAgentUpdateFinalTransactionMetrics(uint64_t a1, uint64_t a2, _BOOL4 a3, int a4)
{
  unsigned int (*v8)(uint64_t, unint64_t *, unint64_t *, _QWORD, unint64_t *, unint64_t *, unint64_t *, unint64_t *, char *, unint64_t *, unsigned int *, nw_data_transfer_report_t *, void **);
  unint64_t v9;
  void (*v10)(uint64_t, __CFString *, __CFString *, unint64_t);
  unint64_t v11;
  void (*v12)(uint64_t, __CFString *, __CFString *, unint64_t);
  unint64_t v13;
  void (*v14)(uint64_t, __CFString *, __CFString *, unint64_t);
  unint64_t v15;
  void (*v16)(uint64_t, __CFString *, __CFString *, unint64_t);
  unint64_t v17;
  void (*v18)(uint64_t, __CFString *, __CFString *, unint64_t);
  unint64_t v19;
  void (*v20)(uint64_t, __CFString *, __CFString *, unint64_t);
  void (*v21)(uint64_t, __CFString *, __CFString *, _QWORD);
  unint64_t v22;
  void (*v23)(uint64_t, __CFString *, __CFString *, unint64_t);
  uint64_t (*v24)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  NSObject *v25;
  uint32_t path_count;
  uint32_t v27;
  uint32_t i;
  nw_interface_radio_type_t path_radio_type;
  uint64_t received_application_byte_count;
  __CFString **v31;
  __CFString *v32;
  void (*v33)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v34;
  void (*v35)(uint64_t, __CFString *, uint64_t, uint64_t);
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *obj;
  nw_data_transfer_report_t report;
  unsigned int v46;
  CFTypeRef v47;
  uint64_t v48;

  v47 = 0;
  v46 = 0;
  obj = 0;
  report = 0;
  v42 = 0;
  v43 = 0;
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v36 = 0;
  if (a1)
  {
    if (a2)
    {
      v8 = *(unsigned int (**)(uint64_t, unint64_t *, unint64_t *, _QWORD, unint64_t *, unint64_t *, unint64_t *, unint64_t *, char *, unint64_t *, unsigned int *, nw_data_transfer_report_t *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v8)
      {
        if (!v8(a2, &v43, &v42, 0, &v41, &v40, &v39, &v38, &v37, &v36, &v46, &report, &obj))
        {
          if (a4 == 1)
          {
            v9 = v43;
            v10 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
            if (v10)
              v10(a1, CFSTR("byteFlumeStats"), CFSTR("DNSTime"), v9 / 0xF4240);
            v11 = v42;
            v12 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
            if (v12)
              v12(a1, CFSTR("byteFlumeStats"), CFSTR("TLSTime"), v11 / 0xF4240);
            v13 = v41;
            v14 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
            if (v14)
              v14(a1, CFSTR("byteFlumeStats"), CFSTR("ConnTime"), v13 / 0xF4240);
            v15 = v40;
            v16 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
            if (v16)
              v16(a1, CFSTR("byteFlumeStats"), CFSTR("RequestTime"), v15 / 0xF4240);
            v17 = v39;
            v18 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
            if (v18)
              v18(a1, CFSTR("byteFlumeStats"), CFSTR("ResponseTime"), v17 / 0xF4240);
            v19 = v38;
            v20 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
            if (v20)
              v20(a1, CFSTR("byteFlumeStats"), CFSTR("SchedulingDelay"), v19 / 0xF4240);
            v21 = *(void (**)(uint64_t, __CFString *, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 40);
            if (v21)
              v21(a1, CFSTR("byteFlumeStats"), CFSTR("IsReusedConn"), 0);
            v22 = v36;
            v23 = *(void (**)(uint64_t, __CFString *, __CFString *, unint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 40);
            if (v23)
              v23(a1, CFSTR("byteFlumeStats"), CFSTR("RedirectCount"), v22 / 0xF4240);
          }
          if (!a3)
          {
            v24 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 48);
            if (v24)
              a3 = v24(a2, CFSTR("FHRP_ErrorReturned"), *MEMORY[0x1E0C9AE00], &v47) == 0;
            else
              a3 = 0;
          }
          figReportingAgentUpdatePrivacyStance(a1, v46, a3);
          v25 = report;
          if (report)
          {
            path_count = nw_data_transfer_report_get_path_count(report);
            if (path_count)
            {
              v27 = path_count;
              for (i = 0; i != v27; ++i)
              {
                path_radio_type = nw_data_transfer_report_get_path_radio_type(v25, i);
                received_application_byte_count = nw_data_transfer_report_get_received_application_byte_count(v25, i);
                switch(path_radio_type)
                {
                  case nw_interface_radio_type_cell_lte:
                    v31 = kFigReportingEventKey_PerRATRxBytes_4G;
                    break;
                  case nw_interface_radio_type_cell_endc_sub6:
                    v31 = kFigReportingEventKey_PerRATRxBytes_5G_NSA_FR1;
                    break;
                  case nw_interface_radio_type_cell_endc_mmw:
                    v31 = kFigReportingEventKey_PerRATRxBytes_5G_NSA_FR2;
                    break;
                  case nw_interface_radio_type_cell_nr_sa_sub6:
                    v31 = kFigReportingEventKey_PerRATRxBytes_5G_SA_FR1;
                    break;
                  case nw_interface_radio_type_cell_nr_sa_mmw:
                    v31 = kFigReportingEventKey_PerRATRxBytes_5G_SA_FR2;
                    break;
                  case nw_interface_radio_type_cell_wcdma:
                  case nw_interface_radio_type_cell_evdo:
                    v31 = kFigReportingEventKey_PerRATRxBytes_3G;
                    break;
                  case nw_interface_radio_type_cell_gsm:
                  case nw_interface_radio_type_cell_cdma:
                    v31 = kFigReportingEventKey_PerRATRxBytes_LegacyCell;
                    break;
                  default:
                    if (path_radio_type - 1 >= 6)
                      v31 = kFigReportingEventKey_PerRATRxBytes_Other;
                    else
                      v31 = kFigReportingEventKey_PerRATRxBytes_Wifi;
                    break;
                }
                v32 = *v31;
                if (*v31)
                {
                  v33 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                             + 32);
                  if (v33)
                    v33(a1, CFSTR("playerStats"), v32, received_application_byte_count);
                }
              }
            }
          }
          if (obj)
          {
            v48 = 0;
            nw_establishment_report_get_accurate_ecn_state();
            if (HIDWORD(v48) <= 9)
            {
              v34 = (uint64_t)*(&off_1E2FB9460)[SHIDWORD(v48)];
              if (v34)
              {
                v35 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 32);
                if (v35)
                  v35(a1, CFSTR("playerStats"), v34, 1);
              }
            }
          }
        }
      }
    }
  }
  if (v47)
    CFRelease(v47);
  if (report)
    nw_release(report);
  if (obj)
    nw_release(obj);
}

uint64_t figReportingAgentUpdatePrivacyStance(uint64_t result, unsigned int a2, int a3)
{
  __CFString ***v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, __CFString *, __CFString *, uint64_t);

  if (a2 <= 4)
  {
    v3 = &(&off_1E2FB94B0)[a2];
    if (!a3)
      v3 = &(&off_1E2FB94D8)[a2];
    v4 = **v3;
    if (v4)
    {
      v5 = result;
      if (result)
      {
        result = CMBaseObjectGetVTable();
        v6 = *(uint64_t (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(result + 16) + 32);
        if (v6)
          return v6(v5, CFSTR("playerStats"), v4, 1);
      }
    }
  }
  return result;
}

uint64_t FigReportingAgentUpdateFinalReportFromCustomURLResponse(uint64_t result, CFDictionaryRef theDict, int a3)
{
  uint64_t v4;
  unsigned int SInt64;
  void *value;

  value = 0;
  if (theDict)
  {
    v4 = result;
    result = CFDictionaryGetValueIfPresent(theDict, (const void *)*MEMORY[0x1E0CA36F0], (const void **)&value);
    if ((_DWORD)result)
    {
      SInt64 = FigCFNumberGetSInt64();
      return figReportingAgentUpdatePrivacyStance(v4, SInt64, a3);
    }
  }
  return result;
}

__CFDictionary *FigNetworkInterfaceReporterCopyPhysicalStatistics(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFDictionary *Mutable;
  uint64_t v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  unsigned int v8;
  double v9;
  CFNumberRef v10;
  _QWORD block[6];
  double valuePtr;

  if (!a1 || !*(_QWORD *)(a1 + 328))
    return 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    if (*(_QWORD *)(a1 + 320))
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __FigNetworkInterfaceReporterCopyPhysicalStatistics_block_invoke;
      block[3] = &__block_descriptor_48_e5_v8__0l;
      block[4] = a1;
      block[5] = Mutable;
      dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
    }
    v4 = *(_QWORD *)(a1 + 328);
    if (v4)
    {
      v5 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)(v4 + 24));
      v6 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)v4);
      v7 = CFNumberCreate(v2, kCFNumberDoubleType, (const void *)(v4 + 8));
      v8 = *(_DWORD *)(v4 + 32);
      if (v8)
        v9 = *(double *)(v4 + 16) / (double)v8;
      else
        v9 = 0.0;
      valuePtr = v9;
      v10 = CFNumberCreate(v2, kCFNumberDoubleType, &valuePtr);
      if (v5)
        CFDictionarySetValue(Mutable, CFSTR("rssi"), v5);
      if (v6)
        CFDictionarySetValue(Mutable, CFSTR("rsmn"), v6);
      if (v7)
        CFDictionarySetValue(Mutable, CFSTR("rsmx"), v7);
      if (v10)
        CFDictionarySetValue(Mutable, CFSTR("rsav"), v10);
      if (v5)
        CFRelease(v5);
      if (v6)
        CFRelease(v6);
      if (v7)
        CFRelease(v7);
      if (v10)
        CFRelease(v10);
    }
  }
  return Mutable;
}

CFMutableDictionaryRef FigNetworkInterfaceReporterCopyBandwidthEstimates(uint64_t a1)
{
  CFMutableDictionaryRef Mutable;
  BOOL v3;
  uint64_t v4;

  Mutable = 0;
  if (a1 && (sFigIRATPermanentlyDisabled & 1) == 0)
  {
    v3 = *(_DWORD *)a1 > 4u || ((1 << *(_DWORD *)a1) & 0x19) == 0;
    if (!v3
      && (*(_QWORD *)(a1 + 320)
       || (v4 = figNetworkInterfaceRetainGlobalWifiMonitor(), (*(_QWORD *)(a1 + 320) = v4) != 0)))
    {
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
      }
    }
    else
    {
      return 0;
    }
  }
  return Mutable;
}

uint64_t figNetworkInterfaceRetainGlobalWifiMonitor()
{
  BOOL v0;
  uint64_t v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  if (sFigNetworkInterfaceMonitorWifiOnce != -1)
    dispatch_once_f(&sFigNetworkInterfaceMonitorWifiOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitWifiOnce);
  if (sFigNetworkInterfaceMonitorDispatchQueue)
    v0 = sFigNetworkInterfaceMonitorWifiManagerMessagingQueue == 0;
  else
    v0 = 1;
  if (!v0)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke;
    block[3] = &unk_1E2F91F58;
    block[4] = &v4;
    dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
  }
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t FigNetworkInterfaceReporterReportStreamingActivity(const __CFDictionary *a1)
{
  _QWORD block[6];
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *value;

  v10 = 0;
  value = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  if (!a1 || (sFigIRATPermanentlyDisabled & 1) != 0)
    return 0;
  figNetworkMonitorInterfaceIRATEnsureService();
  if (sFigNetworkInterfaceMonitorDispatchQueue)
  {
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt64IfPresent();
    FigCFDictionaryGetInt64IfPresent();
    CFDictionaryGetValueIfPresent(a1, CFSTR("_CMSessID"), (const void **)&value);
    if (value)
    {
      CFRetain(a1);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __FigNetworkInterfaceReporterReportStreamingActivity_block_invoke;
      block[3] = &__block_descriptor_49_e5_v8__0l;
      v4 = v5;
      block[4] = value;
      block[5] = a1;
      dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
    }
    return 0;
  }
  return FigSignalErrorAt();
}

void figNetworkMonitorInterfaceIRATEnsureService()
{
  BOOL v0;

  if (sFigNetworkInterfaceMonitorOnce != -1)
    dispatch_once_f(&sFigNetworkInterfaceMonitorOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitOnce);
  if (sFigNetworkInterfaceMonitorDispatchQueue)
    v0 = sFigIRATXPCConnection == 0;
  else
    v0 = 0;
  if (v0)
    dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, &__block_literal_global_79_1);
}

xpc_object_t figNetworkMonitorInterfaceCreateIRATStatusUpdateMessageApplicationEntry()
{
  xpc_object_t v0;
  xpc_object_t v1;

  v0 = xpc_dictionary_create(0, 0, 0);
  v1 = v0;
  if (v0)
    xpc_dictionary_set_uint64(v0, "kWRMApplicationType", 0xC8uLL);
  return v1;
}

void *figNetworkMonitorInterfaceCreateIRATStatusUpdateMessage(void *a1)
{
  xpc_object_t v2;
  void *v3;
  xpc_object_t v4;
  void *v5;
  xpc_object_t v6;
  void *v7;

  v2 = xpc_array_create(0, 0);
  if (!v2)
    return 0;
  v3 = v2;
  xpc_array_append_value(v2, a1);
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4)
  {
    v5 = v4;
    xpc_dictionary_set_value(v4, "kWRMApplicationTypeList", v3);
    v6 = xpc_dictionary_create(0, 0, 0);
    v7 = v6;
    if (v6)
    {
      xpc_dictionary_set_uint64(v6, "kMessageId", 0x195uLL);
      xpc_dictionary_set_value(v7, "kMessageArgs", v5);
    }
    xpc_release(v3);
  }
  else
  {
    v7 = 0;
    v5 = v3;
  }
  xpc_release(v5);
  return v7;
}

uint64_t FigNetworkInterfaceReporterReportEstimatedMaximumDemand(const void *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v6[6];

  if ((sFigIRATPermanentlyDisabled & 1) != 0)
    return 0;
  figNetworkMonitorInterfaceIRATEnsureService();
  v4 = sFigNetworkInterfaceMonitorDispatchQueue;
  if (sFigNetworkInterfaceMonitorDispatchQueue)
  {
    if (a1)
    {
      CFRetain(a1);
      v4 = sFigNetworkInterfaceMonitorDispatchQueue;
    }
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __FigNetworkInterfaceReporterReportEstimatedMaximumDemand_block_invoke;
    v6[3] = &__block_descriptor_48_e5_v8__0l;
    v6[4] = a2;
    v6[5] = a1;
    dispatch_async(v4, v6);
    return 0;
  }
  return FigSignalErrorAt();
}

_BYTE *FigNetworkInterfaceReporterGetInterfaceType(_BYTE *result)
{
  if (result)
  {
    if (result[4])
      return 0;
    else
      return (_BYTE *)*(unsigned int *)result;
  }
  return result;
}

uint64_t FigNetworkInterfaceResetStatistics(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = 0;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_QWORD *)(result + 152) = 0;
    v1 = *(_QWORD *)(result + 328);
    if (v1)
    {
      *(_DWORD *)(v1 + 32) = 0;
      *(_OWORD *)v1 = 0uLL;
      *(_OWORD *)(v1 + 16) = 0uLL;
    }
  }
  return result;
}

void FigNetworkInterfaceReporterDestroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    if (a1[40])
    {
      if (sFigNetworkinterfaceWifiMonitor)
        dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, &__block_literal_global_91_0);
      a1[40] = 0;
    }
    v2 = (void *)a1[41];
    if (v2)
    {
      free(v2);
      a1[41] = 0;
    }
    if (sFigPeriodicBandwidthMonitor)
    {
      if (sFigPeriodicBandwidthMonitorQueue)
        dispatch_sync_f((dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue, 0, (dispatch_function_t)fni_releasePeriodicBandwidthMonitor);
    }
    free(a1);
  }
}

_QWORD *FigNetworkInterfaceReporterCreate()
{
  _QWORD *v0;
  void *v1;

  v0 = malloc_type_calloc(1uLL, 0x150uLL, 0x102004042D7ED1DuLL);
  if (v0)
  {
    if (sFigNetworkInterfaceMonitorOnce != -1)
      dispatch_once_f(&sFigNetworkInterfaceMonitorOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitOnce);
    if (sFigNetworkInterfaceMonitorDispatchQueue
      && sFigNetworkInterfaceMonitorWifiManagerMessagingQueue
      && (v1 = malloc_type_calloc(1uLL, 0x28uLL, 0x10000407A37F5ACuLL), (v0[41] = v1) != 0))
    {
      v0[40] = figNetworkInterfaceRetainGlobalWifiMonitor();
      if (sFigPeriodicBandwidthMonitorOnce != -1)
        dispatch_once_f(&sFigPeriodicBandwidthMonitorOnce, 0, (dispatch_function_t)figPeriodicBandwidthMonitorInitOnce);
      if (sFigPeriodicBandwidthMonitor && sFigPeriodicBandwidthMonitorQueue)
        dispatch_sync_f((dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue, 0, (dispatch_function_t)fni_retainPeriodicBandwidthMonitor);
    }
    else
    {
      FigNetworkInterfaceReporterDestroy(v0);
      return 0;
    }
  }
  return v0;
}

uint64_t figNetworkinterfaceMonitorInitOnce()
{
  uint64_t result;

  sFigNetworkInterfaceMonitorDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.FigNetworkInterfaceMonitor", 0);
  sFigNetworkInterfaceMonitorWifiManagerMessagingQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.FigNetworkInterfaceMonitor.setup", 0);
  sFigNetworkInterfaceNameToTypeMap = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  result = FigSimpleMutexCreate();
  sFigNetworkInterfaceNameToTypeMutex = result;
  return result;
}

Class initWRM_iRATInterface()
{
  Class result;

  if (WirelessCoexLibrary_sOnce != -1)
    dispatch_once(&WirelessCoexLibrary_sOnce, &__block_literal_global_124);
  result = objc_getClass("WRM_iRATInterface");
  classWRM_iRATInterface = (uint64_t)result;
  getWRM_iRATInterfaceClass = WRM_iRATInterfaceFunction;
  return result;
}

uint64_t WRM_iRATInterfaceFunction()
{
  return classWRM_iRATInterface;
}

_QWORD *figNetworkInterfaceTCPInfoGetByteCountsForEachInterface(const void *a1, CFDataRef theData, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = CFDataGetBytePtr(theData);
  if (result)
  {
    v6 = result;
    result = CFDictionaryGetValue(*(CFDictionaryRef *)a3, a1);
    if (result && (result = CFDataGetBytePtr((CFDataRef)result)) != 0)
    {
      v7 = result[27];
      v8 = result[23];
      v9 = result[19];
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
    }
    v10 = *(_QWORD *)(a3 + 16);
    v11 = v6[23];
    *(_QWORD *)(a3 + 8) += v6[27] - v7;
    *(_QWORD *)(a3 + 16) = v11 - v8 + v10;
    *(_QWORD *)(a3 + 24) += v6[19] - v9;
  }
  return result;
}

uint64_t figNetworkInterfaceAddToCountValue(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result && a2 && a3)
  {
    if (a6)
    {
      FigCFDictionaryGetInt64IfPresent();
      return FigCFDictionaryGetInt64IfPresent();
    }
  }
  return result;
}

void figNetworkinterfaceMonitorInitWifiOnce()
{
  BOOL v0;

  if (sFigNetworkInterfaceMonitorOnce != -1)
    dispatch_once_f(&sFigNetworkInterfaceMonitorOnce, 0, (dispatch_function_t)figNetworkinterfaceMonitorInitOnce);
  if (sFigNetworkInterfaceMonitorDispatchQueue)
    v0 = sFigNetworkInterfaceMonitorWifiManagerMessagingQueue == 0;
  else
    v0 = 1;
  if (!v0)
  {
    dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorWifiManagerMessagingQueue, &__block_literal_global_56_0);
    figNetworkMonitorInterfaceIRATEnsureService();
  }
}

void __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke(uint64_t a1)
{
  BOOL v1;
  uint64_t v3;
  int *v4;
  int v5;
  NSObject *v6;
  _QWORD block[5];

  if (sFigNetworkinterfaceWifiMonitor)
    v1 = sFigNetworkInterfaceMonitorWifiManagerClient == 0;
  else
    v1 = 1;
  if (!v1)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sFigNetworkinterfaceWifiMonitor;
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(int **)(*(_QWORD *)(v3 + 8) + 24);
    v5 = *v4;
    if (!*v4)
    {
      v6 = *((_QWORD *)v4 + 1);
      if (v6)
      {
        dispatch_source_cancel(v6);
        dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8));
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) + 8) = 0;
        v3 = *(_QWORD *)(a1 + 32);
      }
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke_2;
      block[3] = &unk_1E2F91F58;
      block[4] = v3;
      dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorWifiManagerMessagingQueue, block);
      v4 = *(int **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v5 = *v4;
    }
    *v4 = v5 + 1;
  }
}

uint64_t __figNetworkInterfaceRetainGlobalWifiMonitor_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 24);
    if (result)
    {
      sMobileWiFiWiFiDeviceClientRegisterLQMCallback(result, figNetworkInterfaceMonitorWiFiLQMCallback, v1);
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 8) + 24);
      return sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallback(*(_QWORD *)(v3 + 24), figNetworkInterfaceMonitorBssidChangedCallback, v3);
    }
  }
  return result;
}

void figNetworkInterfaceMonitorWiFiLQMCallback(int a1, CFTypeRef cf, uint64_t a3)
{
  _QWORD v5[6];

  if (cf)
  {
    CFRetain(cf);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __figNetworkInterfaceMonitorWiFiLQMCallback_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = a3;
    v5[5] = cf;
    dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, v5);
  }
}

void figNetworkInterfaceMonitorBssidChangedCallback(int a1, CFTypeRef cf, uint64_t a3)
{
  _QWORD v5[6];

  if (cf)
  {
    CFRetain(cf);
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __figNetworkInterfaceMonitorBssidChangedCallback_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = a3;
    v5[5] = cf;
    dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, v5);
  }
}

void __figNetworkMonitorInterfaceMobileWifiInit_block_invoke()
{
  void *v0;
  void *v1;
  const __CFArray *v2;
  const __CFArray *v3;
  const void *ValueAtIndex;
  const void *v5;
  uint64_t InterfaceName;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  const __CFNumber *v10;
  const __CFNumber *v11;
  void (*v12)(uint64_t, uint64_t, _QWORD);
  uint64_t v13;
  uint64_t GlobalNetworkBufferingRunloop;
  _QWORD block[5];

  v0 = dlopen("/System/Library/PrivateFrameworks/MobileWiFi.framework/MobileWiFi", 1);
  if (v0)
  {
    v1 = v0;
    sMobileWiFiWiFiManagerClientCopyDevices = (uint64_t (*)(void))dlsym(v0, "WiFiManagerClientCopyDevices");
    if (sMobileWiFiWiFiManagerClientCopyDevices)
    {
      sMobileWiFiWiFiManagerClientGetDevice = (uint64_t)dlsym(v1, "WiFiManagerClientGetDevice");
      if (sMobileWiFiWiFiManagerClientGetDevice)
      {
        sMobileWiFiWiFiManagerClientCreate = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "WiFiManagerClientCreate");
        if (sMobileWiFiWiFiManagerClientCreate)
        {
          sMobileWiFiDeviceClientGetInterfaceName = (uint64_t (*)(void))dlsym(v1, "WiFiDeviceClientGetInterfaceName");
          if (sMobileWiFiDeviceClientGetInterfaceName)
          {
            sMobileWiFiWiFiDeviceClientCopyCurrentNetwork = (uint64_t (*)(_QWORD))dlsym(v1, "WiFiDeviceClientCopyCurrentNetwork");
            if (sMobileWiFiWiFiDeviceClientCopyCurrentNetwork)
            {
              sMobileWiFiWiFiNetworkGetChannel = (uint64_t (*)(void))dlsym(v1, "WiFiNetworkGetChannel");
              if (sMobileWiFiWiFiNetworkGetChannel)
              {
                sMobileWiFiWiFiNetworkGetChannelFreqBand = (uint64_t (*)(_QWORD))dlsym(v1, "WiFiNetworkGetChannelFreqBand");
                if (sMobileWiFiWiFiNetworkGetChannelFreqBand)
                {
                  sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallback = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v1, "WiFiDeviceClientRegisterBssidChangeCallback");
                  if (sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallback)
                  {
                    sMobileWiFiWiFiDeviceClientRegisterLQMCallback = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v1, "WiFiDeviceClientRegisterLQMCallback");
                    if (sMobileWiFiWiFiDeviceClientRegisterLQMCallback)
                    {
                      sMobileWiFiWiFiManagerClientScheduleWithRunLoop = dlsym(v1, "WiFiManagerClientScheduleWithRunLoop");
                      if (sMobileWiFiWiFiManagerClientScheduleWithRunLoop)
                      {
                        sFigNetworkInterfaceMonitorWifiManagerClient = sMobileWiFiWiFiManagerClientCreate(*MEMORY[0x1E0C9AE00], 0);
                        if (sFigNetworkInterfaceMonitorWifiManagerClient)
                        {
                          v2 = (const __CFArray *)sMobileWiFiWiFiManagerClientCopyDevices();
                          if (v2)
                          {
                            v3 = v2;
                            if (CFArrayGetCount(v2) >= 1)
                            {
                              ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
                              if (ValueAtIndex)
                              {
                                v5 = ValueAtIndex;
                                InterfaceName = sMobileWiFiDeviceClientGetInterfaceName();
                                if (InterfaceName)
                                {
                                  v7 = (const void *)InterfaceName;
                                  v8 = malloc_type_calloc(1uLL, 0x58uLL, 0x10E0040EF2F2C8EuLL);
                                  if (v8)
                                  {
                                    v9 = v8;
                                    v8[3] = CFRetain(v5);
                                    v9[2] = CFRetain(v7);
                                    *(_DWORD *)v9 = 0;
                                    *((_DWORD *)v9 + 10) = -1082130432;
                                    v10 = (const __CFNumber *)sMobileWiFiWiFiDeviceClientCopyCurrentNetwork(v9[3]);
                                    if (v10)
                                    {
                                      v11 = v10;
                                      figNetworkInterfaceMonitorCopyWifiFrequency(v10, (const __CFNumber **)v9 + 4);
                                      CFRelease(v11);
                                    }
                                    block[0] = MEMORY[0x1E0C809B0];
                                    block[1] = 3221225472;
                                    block[2] = __figNetworkMonitorInterfaceMobileWifiInit_block_invoke_2;
                                    block[3] = &__block_descriptor_40_e5_v8__0l;
                                    block[4] = v9;
                                    dispatch_sync((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, block);
                                    v12 = (void (*)(uint64_t, uint64_t, _QWORD))sMobileWiFiWiFiManagerClientScheduleWithRunLoop;
                                    v13 = sFigNetworkInterfaceMonitorWifiManagerClient;
                                    GlobalNetworkBufferingRunloop = FigThreadGetGlobalNetworkBufferingRunloop();
                                    v12(v13, GlobalNetworkBufferingRunloop, *MEMORY[0x1E0C9B280]);
                                  }
                                }
                              }
                            }
                            CFRelease(v3);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

const __CFNumber *figNetworkInterfaceMonitorCopyWifiFrequency(const __CFNumber *result, const __CFNumber **a2)
{
  int v3;
  uint64_t v4;
  int valuePtr;

  if (result)
  {
    result = (const __CFNumber *)sMobileWiFiWiFiNetworkGetChannel();
    if (result)
    {
      v4 = 0;
      CFNumberGetValue(result, kCFNumberCFIndexType, &v4);
      result = (const __CFNumber *)sMobileWiFiWiFiNetworkGetChannelFreqBand(v4);
      if ((_DWORD)result == 1)
      {
        v3 = 2;
      }
      else
      {
        if ((_DWORD)result != 2)
          return result;
        v3 = 5;
      }
      valuePtr = v3;
      result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
      *a2 = result;
    }
  }
  return result;
}

uint64_t __figNetworkMonitorInterfaceMobileWifiInit_block_invoke_2(uint64_t result)
{
  sFigNetworkinterfaceWifiMonitor = *(_QWORD *)(result + 32);
  return result;
}

void __figNetworkInterfaceMonitorWiFiLQMCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  const __CFNumber *v5;
  const __CFNumber *v6;
  const __CFNumber *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  double valuePtr;

  v2 = *(_QWORD *)(a1 + 32);
  Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("SCALED_RSSI"));
  v4 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("SCALED_LQM"));
  v5 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("CCA"));
  v6 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("NOISE"));
  v7 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), CFSTR("SNR"));
  if (Value)
  {
    valuePtr = 0.0;
    CFNumberGetValue(Value, kCFNumberDoubleType, &valuePtr);
    v8 = valuePtr;
    *(float *)(v2 + 40) = v8;
  }
  if (v4)
  {
    valuePtr = 0.0;
    CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
    v9 = valuePtr;
    *(float *)(v2 + 52) = v9;
  }
  if (v5)
  {
    valuePtr = 0.0;
    CFNumberGetValue(v5, kCFNumberDoubleType, &valuePtr);
    v10 = valuePtr;
    *(float *)(v2 + 44) = v10;
  }
  if (v6)
  {
    valuePtr = 0.0;
    CFNumberGetValue(v6, kCFNumberDoubleType, &valuePtr);
    v11 = valuePtr;
    *(float *)(v2 + 48) = v11;
  }
  if (v7)
  {
    LODWORD(valuePtr) = 0;
    CFNumberGetValue(v7, kCFNumberIntType, &valuePtr);
    *(_DWORD *)(v2 + 56) = LODWORD(valuePtr);
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __figNetworkInterfaceMonitorBssidChangedCallback_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const __CFNumber **v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = *(const void **)(v2 + 32);
  v4 = (const __CFNumber **)(v2 + 32);
  v3 = v5;
  if (v5)
  {
    CFRelease(v3);
    *v4 = 0;
  }
  figNetworkInterfaceMonitorCopyWifiFrequency(*(const __CFNumber **)(a1 + 40), v4);
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

void __figNetworkMonitorInterfaceIRATEnsureService_block_invoke()
{
  if ((sFigIRATPermanentlyDisabled & 1) == 0)
    figNetworkMonitorInterfaceIRATInit();
}

void figNetworkMonitorInterfaceIRATInit()
{
  _xpc_connection_s *mach_service;
  xpc_object_t v1;
  void *v2;
  xpc_object_t v3;
  void *v4;
  xpc_object_t v5;
  void *v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  void *v10;
  xpc_object_t v11;

  if ((sFigIRATPermanentlyDisabled & 1) == 0 && !sFigIRATXPCConnection)
  {
    mach_service = xpc_connection_create_mach_service("com.apple.WirelessCoexManager", (dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, 0);
    sFigIRATXPCConnection = (uint64_t)mach_service;
    if (mach_service)
    {
      xpc_connection_set_event_handler(mach_service, &__block_literal_global_82);
      xpc_connection_set_target_queue((xpc_connection_t)sFigIRATXPCConnection, (dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue);
      xpc_connection_resume((xpc_connection_t)sFigIRATXPCConnection);
      v1 = xpc_dictionary_create(0, 0, 0);
      if (v1)
      {
        v2 = v1;
        xpc_dictionary_set_uint64(v1, "kWCMRegisterProcess_ProcessId", 0xDuLL);
        v3 = xpc_dictionary_create(0, 0, 0);
        if (!v3)
        {
LABEL_15:
          xpc_release(v2);
          return;
        }
        v4 = v3;
        xpc_dictionary_set_uint64(v3, "kMessageId", 1uLL);
        xpc_dictionary_set_value(v4, "kMessageArgs", v2);
        xpc_release(v2);
        xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, v4);
        xpc_release(v4);
        v5 = xpc_dictionary_create(0, 0, 0);
        if (v5)
        {
          v6 = v5;
          xpc_dictionary_set_uint64(v5, "kWRMApplicationType", 0xC8uLL);
          v7 = xpc_array_create(0, 0);
          if (v7)
          {
            v8 = v7;
            xpc_array_append_value(v7, v6);
            v9 = xpc_dictionary_create(0, 0, 0);
            v10 = v9;
            if (v9)
            {
              xpc_dictionary_set_value(v9, "kWRMApplicationTypeList", v8);
              v11 = xpc_dictionary_create(0, 0, 0);
              v2 = v11;
              if (v11)
              {
                xpc_dictionary_set_uint64(v11, "kMessageId", 0x194uLL);
                xpc_dictionary_set_value(v2, "kMessageArgs", v10);
              }
            }
            else
            {
              v2 = 0;
            }
            xpc_release(v6);
            xpc_release(v8);
            if (!v10)
            {
LABEL_13:
              if (v2)
              {
                xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, v2);
                goto LABEL_15;
              }
              return;
            }
          }
          else
          {
            v2 = 0;
            v10 = v6;
          }
          xpc_release(v10);
          goto LABEL_13;
        }
      }
    }
  }
}

void __figNetworkMonitorInterfaceIRATInit_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  xpc_object_t value;
  void *v8;
  xpc_object_t v9;
  void *v10;
  size_t count;
  size_t v12;
  size_t v13;
  xpc_object_t v14;
  void *v15;
  const char *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t uint64;
  uint64_t v21;

  v3 = MEMORY[0x194031C7C](a2);
  if (v3 == MEMORY[0x1E0C81310])
  {
    v16 = (const char *)*MEMORY[0x1E0C81270];
    if (a2 == (void *)MEMORY[0x1E0C81260])
    {
      xpc_dictionary_get_string(MEMORY[0x1E0C81260], v16);
      sFigIRATPermanentlyDisabled = 1;
      v18 = (void *)sFigIRATXPCConnection;
      if (sFigIRATXPCConnection)
      {
        sFigIRATXPCConnection = 0;
        xpc_release(v18);
      }
    }
    else
    {
      xpc_dictionary_get_string(a2, v16);
      v17 = (void *)sFigIRATXPCConnection;
      if (sFigIRATXPCConnection)
      {
        sFigIRATXPCConnection = 0;
        xpc_release(v17);
      }
      figNetworkMonitorInterfaceIRATInit();
    }
  }
  else
  {
    v4 = v3;
    v5 = (void *)MEMORY[0x194031B2C](a2);
    if (v5)
      free(v5);
    v6 = MEMORY[0x1E0C812F8];
    if (v4 == MEMORY[0x1E0C812F8] && xpc_dictionary_get_uint64(a2, "kMessageId") == 1302)
    {
      value = xpc_dictionary_get_value(a2, "kMessageArgs");
      if (value)
      {
        v8 = value;
        if (MEMORY[0x194031C7C]() == v6)
        {
          v9 = xpc_dictionary_get_value(v8, "kWRMApplicationTypeList");
          if (v9)
          {
            v10 = v9;
            if (MEMORY[0x194031C7C]() == MEMORY[0x1E0C812C8])
            {
              count = xpc_array_get_count(v10);
              if (count)
              {
                v12 = count;
                v13 = 0;
                while (1)
                {
                  v14 = xpc_array_get_value(v10, v13);
                  if (v14)
                  {
                    v15 = v14;
                    if (MEMORY[0x194031C7C]() == v6 && xpc_dictionary_get_uint64(v15, "kWRMApplicationType") == 200)
                      break;
                  }
                  if (v12 == ++v13)
                    return;
                }
                if (xpc_dictionary_get_uint64(v15, "kWRMLinkType") == 1)
                {
                  v19 = sFigNetworkinterfaceWifiMonitor;
                  if (sFigNetworkinterfaceWifiMonitor)
                  {
                    uint64 = xpc_dictionary_get_uint64(v15, "kWRMCurrentLinkBandwidthEstimateMin");
                    v21 = xpc_dictionary_get_uint64(v15, "kWRMCurrentLinkBandwidthEstimateMax");
                    *(_QWORD *)(v19 + 64) = uint64;
                    *(_QWORD *)(v19 + 72) = v21;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke()
{
  uint64_t v0;
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *v4;
  _QWORD handler[5];

  v0 = sFigNetworkinterfaceWifiMonitor;
  if ((*(_DWORD *)sFigNetworkinterfaceWifiMonitor)-- == 1)
  {
    v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue);
    *(_QWORD *)(v0 + 8) = v2;
    v3 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    v4 = *(NSObject **)(v0 + 8);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_2;
    handler[3] = &__block_descriptor_40_e5_v8__0l;
    handler[4] = v0;
    dispatch_source_set_event_handler(v4, handler);
    dispatch_resume(*(dispatch_object_t *)(v0 + 8));
  }
}

void __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  if (*(int *)v1 <= 0)
  {
    if (*(_QWORD *)(v1 + 24))
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_3;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = v1;
      dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorWifiManagerMessagingQueue, block);
      v1 = *(_QWORD *)(a1 + 32);
    }
    v3 = *(NSObject **)(v1 + 8);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = 0;
    }
  }
}

uint64_t __figNetworkInterfaceReleaseGlobalWifiMonitor_block_invoke_3(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 24);
    if (result)
    {
      sMobileWiFiWiFiDeviceClientRegisterLQMCallback(result, 0, 0);
      return sMobileWiFiWiFiDeviceClientRegisterBssidChangeCallback(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 24), 0, 0);
    }
  }
  return result;
}

void fni_releasePeriodicBandwidthMonitor()
{
  dispatch_object_t *v0;
  NSObject *v2;
  dispatch_time_t v3;

  v0 = (dispatch_object_t *)sFigPeriodicBandwidthMonitor;
  if ((*(_DWORD *)sFigPeriodicBandwidthMonitor)-- == 1)
  {
    v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue);
    v0[1] = v2;
    v3 = dispatch_time(0, 15000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_set_context(v0[1], v0);
    dispatch_source_set_event_handler_f(v0[1], (dispatch_function_t)periodicBandwidthMonitorTimer);
    dispatch_resume(v0[1]);
  }
}

void periodicBandwidthMonitorTimer(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  if (*(int *)a1 <= 0)
  {
    v2 = *(NSObject **)(a1 + 16);
    if (v2)
      dispatch_suspend(v2);
    v3 = *(NSObject **)(a1 + 8);
    if (v3)
    {
      dispatch_release(v3);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
}

void figPeriodicBandwidthMonitorInitOnce()
{
  _QWORD *v0;
  _QWORD *v1;
  dispatch_source_t v2;
  NSObject *v3;
  dispatch_time_t v4;

  figNetworkMonitorInterfaceIRATEnsureService();
  sFigPeriodicBandwidthMonitorQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.FigPeriodicBandwidthMonitor", 0);
  v0 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A00402946438FuLL);
  if (v0)
  {
    v1 = v0;
    FigNetworkHistoryGetGlobal();
    if (!FigNetworkHistoryCopySharedPredictor())
    {
      v2 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)sFigPeriodicBandwidthMonitorQueue);
      if (v2)
      {
        v3 = v2;
        v4 = dispatch_time(0, 5000000000);
        dispatch_source_set_timer(v3, v4, 0x12A05F200uLL, 0);
        dispatch_set_context(v3, 0);
        dispatch_source_set_event_handler_f(v3, (dispatch_function_t)figPeriodicBandwidthMonitorTimerCallback);
        v1[2] = v3;
LABEL_5:
        *(_DWORD *)v1 = 0;
        sFigPeriodicBandwidthMonitor = (uint64_t)v1;
        return;
      }
      if (!FigSignalErrorAt())
        goto LABEL_5;
    }
    free(v1);
  }
}

void fni_retainPeriodicBandwidthMonitor()
{
  uint64_t v0;
  NSObject *v1;

  v0 = sFigPeriodicBandwidthMonitor;
  if (sFigPeriodicBandwidthMonitor)
  {
    if (!*(_DWORD *)sFigPeriodicBandwidthMonitor)
    {
      v1 = *(NSObject **)(sFigPeriodicBandwidthMonitor + 8);
      if (v1)
      {
        dispatch_source_cancel(v1);
        dispatch_release(*(dispatch_object_t *)(v0 + 8));
        *(_QWORD *)(v0 + 8) = 0;
      }
      else
      {
        dispatch_resume(*(dispatch_object_t *)(sFigPeriodicBandwidthMonitor + 16));
      }
    }
    ++*(_DWORD *)v0;
  }
}

void figPeriodicBandwidthMonitorTimerCallback()
{
  uint64_t UpTimeNanoseconds;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t *, _OWORD *);
  int v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t block;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  v1 = *(_QWORD *)(sFigPeriodicBandwidthMonitor + 24);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v2)
  {
    block = 0;
    v15 = 0;
    v16 = 5000000000;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 9;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v3 = v2(v1, UpTimeNanoseconds, &block, v9);
    v4 = (v3 + 17738) < 2 || v3 == 0;
    if (v4 && (sFigIRATPermanentlyDisabled & 1) == 0)
    {
      if (sFigNetworkInterfaceMonitorDispatchQueue && sFigNetworkinterfaceWifiMonitor)
      {
        v5 = *(_QWORD *)&v9[0] / 1000;
        v6 = (unint64_t)v10 / 0xF4240;
        v7 = (unint64_t)v11 / 0xF4240;
        v8 = (unint64_t)v11 / 0xF4240 * (*(_QWORD *)&v9[0] / 8000);
        figNetworkMonitorInterfaceIRATEnsureService();
        block = MEMORY[0x1E0C809B0];
        v15 = 3221225472;
        v16 = (uint64_t)__figNetworkInterfaceReporterReportPeriodicDownloadActivity_block_invoke;
        *(_QWORD *)&v17 = &__block_descriptor_64_e5_v8__0l;
        *((_QWORD *)&v17 + 1) = v5;
        *(_QWORD *)&v18 = v6;
        *((_QWORD *)&v18 + 1) = v8;
        *(_QWORD *)&v19 = v7;
        dispatch_async((dispatch_queue_t)sFigNetworkInterfaceMonitorDispatchQueue, &block);
      }
      else
      {
        FigSignalErrorAt();
      }
    }
  }
}

void __figNetworkInterfaceReporterReportPeriodicDownloadActivity_block_invoke(uint64_t *a1)
{
  xpc_object_t IRATStatusUpdateMessageApplicationEntry;
  void *v3;
  void *IRATStatusUpdateMessage;
  void *v5;

  if (sFigIRATXPCConnection)
  {
    IRATStatusUpdateMessageApplicationEntry = figNetworkMonitorInterfaceCreateIRATStatusUpdateMessageApplicationEntry();
    if (IRATStatusUpdateMessageApplicationEntry)
    {
      v3 = IRATStatusUpdateMessageApplicationEntry;
      xpc_dictionary_set_uint64(IRATStatusUpdateMessageApplicationEntry, "kWRMCurrentLinkBandwidthAchieved", a1[4]);
      xpc_dictionary_set_uint64(v3, "kSesLatency", a1[5]);
      xpc_dictionary_set_uint64(v3, "kWRMStreamingDataSentCount", a1[6] >> 10);
      xpc_dictionary_set_uint64(v3, "kWRMStreamingDataSentDuration", a1[7]);
      IRATStatusUpdateMessage = figNetworkMonitorInterfaceCreateIRATStatusUpdateMessage(v3);
      if (IRATStatusUpdateMessage)
      {
        v5 = IRATStatusUpdateMessage;
        xpc_connection_send_message((xpc_connection_t)sFigIRATXPCConnection, IRATStatusUpdateMessage);
        xpc_release(v5);
      }
      xpc_release(v3);
    }
  }
}

uint64_t FigSessionDataParserStartServer()
{
  uint64_t v0;
  _QWORD block[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigSessionDataParserStartServer_block_invoke;
  block[3] = &unk_1E2FB9538;
  block[4] = &v3;
  if (FigSessionDataParserStartServer_sFigSessionDataParserServerSetupOnce != -1)
    dispatch_once(&FigSessionDataParserStartServer_sFigSessionDataParserServerSetupOnce, block);
  v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t fsd_replyingMessageHandler()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

__CFString *FigMediaCharacteristicsGetMajorIntrinsicCharacteristicForMediaType(int a1)
{
  __CFString *result;
  __CFString **v3;

  result = 0;
  if (a1 > 1936684397)
  {
    if (a1 == 1936684398)
    {
      v3 = kFigStdAssetMediaCharacteristic_Audible;
      return *v3;
    }
    if (a1 != 1952807028)
    {
      if (a1 != 1986618469)
        return result;
      v3 = kFigStdAssetMediaCharacteristic_Visual;
      return *v3;
    }
LABEL_8:
    v3 = kFigStdAssetMediaCharacteristic_Legible;
    return *v3;
  }
  if (a1 == 1668047728 || a1 == 1935832172)
    goto LABEL_8;
  return result;
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsForMediaType(const __CFAllocator *a1, int a2, __CFArray **a3)
{
  __CFArray *Mutable;
  __CFArray *v6;
  __CFString **v7;

  if (!a3)
    return 0;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v6 = Mutable;
    if (a2 <= 1936684397)
    {
      if (a2 != 1668047728 && a2 != 1935832172)
        goto LABEL_19;
    }
    else
    {
      if (a2 == 1986618469)
      {
        v7 = kFigStdAssetMediaCharacteristic_Visual;
        goto LABEL_12;
      }
      if (a2 != 1952807028)
      {
        if (a2 == 1936684398)
        {
          v7 = kFigStdAssetMediaCharacteristic_Audible;
LABEL_12:
          if (*v7)
            CFArrayAppendValue(Mutable, *v7);
          if (a2 == 1668047728 || a2 == 1952807028 || a2 == 1935832172)
          {
            CFArrayAppendValue(v6, CFSTR("public.visual"));
            if (a2 == 1668047728)
            {
              CFArrayAppendValue(v6, CFSTR("public.accessibility.transcribes-spoken-dialog"));
              CFArrayAppendValue(v6, CFSTR("public.accessibility.describes-music-and-sound"));
            }
          }
        }
LABEL_19:
        *a3 = v6;
        return 0;
      }
    }
    v7 = kFigStdAssetMediaCharacteristic_Legible;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t FigMediaCharacteristicsCreateMediaCharacteristicsForMediaOption(const __CFAllocator *a1, const __CFArray *a2, const __CFDictionary *a3, __CFArray **a4)
{
  CFMutableArrayRef Mutable;
  __CFArray *v8;
  const __CFArray *Value;
  const __CFArray *v10;
  const __CFBoolean *v11;
  __CFString **v12;
  CFRange v14;
  CFRange v15;

  if (!a4)
    return 0;
  Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v8 = Mutable;
    if (a2)
    {
      v14.length = CFArrayGetCount(a2);
      v14.location = 0;
      CFArrayAppendArray(v8, a2, v14);
    }
    Value = (const __CFArray *)CFDictionaryGetValue(a3, CFSTR("MediaSelectionOptionsTaggedMediaCharacteristics"));
    if (Value)
    {
      v10 = Value;
      v15.length = CFArrayGetCount(Value);
      v15.location = 0;
      CFArrayAppendArray(v8, v10, v15);
    }
    v11 = (const __CFBoolean *)CFDictionaryGetValue(a3, CFSTR("MediaSelectionOptionsIsAuxiliaryContent"));
    if (v11 && CFBooleanGetValue(v11))
      v12 = kFigStdAssetMediaCharacteristic_TaggedIsAuxiliaryContent;
    else
      v12 = kFigStdAssetMediaCharacteristic_TaggedIsMainProgramContent;
    CFArrayAppendValue(v8, *v12);
    CFDictionaryGetValue(a3, CFSTR("MediaSelectionOptionsMediaType"));
    FigCFStringGetOSTypeValue();
    *a4 = v8;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForTrackReader(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  __CFArray *v5;
  __CFArray *v7;
  __CFArray *v8;

  v7 = 0;
  v8 = 0;
  if (a3)
  {
    v4 = _produceUserDataAssetTrackProperty(a2, &v8);
    v5 = v8;
    if ((_DWORD)v4 || !v8)
    {
      if (!v8)
      {
LABEL_7:
        *a3 = v7;
        return v4;
      }
    }
    else
    {
      v4 = _createTaggedMediaCharacteristicsFromUserData(v8, &v7);
    }
    CFRelease(v5);
    goto LABEL_7;
  }
  return FigSignalErrorAt();
}

uint64_t _produceUserDataAssetTrackProperty(uint64_t a1, __CFArray **a2)
{
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  const __CFAllocator *v6;
  CFIndex Count;
  uint64_t v8;
  void (*v9)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  const __CFArray *v13;
  __CFArray *v14;
  uint64_t MutableCopy;
  __CFArray *v16;
  uint64_t v17;
  CFTypeRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  CFTypeRef cf;
  CFArrayRef theArray;
  CFRange v24;
  CFRange v25;
  CFRange v26;

  cf = 0;
  theArray = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v5 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (!v5
    || (v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        v5(FigBaseObject, CFSTR("MetadataReaderTypes"), *MEMORY[0x1E0C9AE00], &theArray),
        !theArray))
  {
    v17 = 0;
    goto LABEL_22;
  }
  Count = CFArrayGetCount(theArray);
  v24.location = 0;
  v24.length = Count;
  if (!CFArrayContainsValue(theArray, v24, CFSTR("QuickTimeUserDataReader"))
    || (v8 = FigTrackReaderGetFigBaseObject(a1),
        (v9 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
    || (v9(v8, CFSTR("QuickTimeUserDataReader"), v6, &cf), !cf)
    || (v10 = _copyAllMetadataItems(v6, (uint64_t)cf, (__CFArray **)&v21), !(_DWORD)v10))
  {
    v25.location = 0;
    v25.length = Count;
    if (!CFArrayContainsValue(theArray, v25, CFSTR("ISOUserDataReader"))
      || (v11 = FigTrackReaderGetFigBaseObject(a1),
          (v12 = *(void (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48)) == 0)
      || (v12(v11, CFSTR("ISOUserDataReader"), v6, &v20), !v20))
    {
      v14 = (__CFArray *)v21;
      if (!v21)
      {
        v13 = 0;
        goto LABEL_19;
      }
LABEL_16:
      v17 = 0;
      *a2 = v14;
      v21 = 0;
      goto LABEL_20;
    }
    v10 = _copyAllMetadataItems(v6, (uint64_t)v20, (__CFArray **)&v19);
    if (!(_DWORD)v10)
    {
      v13 = (const __CFArray *)v19;
      v14 = (__CFArray *)v21;
      if (v21 && v19)
      {
        MutableCopy = FigCFArrayCreateMutableCopy();
        if (MutableCopy)
        {
          v16 = (__CFArray *)MutableCopy;
          v26.length = CFArrayGetCount(v13);
          v26.location = 0;
          CFArrayAppendArray(v16, v13, v26);
          v17 = 0;
          *a2 = v16;
          goto LABEL_20;
        }
        v10 = FigSignalErrorAt();
        goto LABEL_34;
      }
      if (!v21)
      {
LABEL_19:
        v17 = 0;
        *a2 = v13;
        v19 = 0;
        goto LABEL_20;
      }
      goto LABEL_16;
    }
  }
LABEL_34:
  v17 = v10;
LABEL_20:
  if (theArray)
    CFRelease(theArray);
LABEL_22:
  if (cf)
    CFRelease(cf);
  if (v21)
    CFRelease(v21);
  if (v20)
    CFRelease(v20);
  if (v19)
    CFRelease(v19);
  return v17;
}

uint64_t _createTaggedMediaCharacteristicsFromUserData(const __CFArray *a1, __CFArray **a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const void *v9;
  const void *v10;
  CFTypeID v11;
  CFTypeID v12;
  const void *v13;
  __CFArray **v15;
  __CFArray *theArray;
  int valuePtr;
  unsigned int v18;

  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
    return FigSignalErrorAt();
  v15 = a2;
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    v5 = Count;
    for (i = 0; v5 != i; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
      Value = CFDictionaryGetValue(ValueAtIndex, CFSTR("keyspace"));
      if (CFEqual(CFSTR("udta"), Value) || CFEqual(CFSTR("uiso"), Value))
      {
        v9 = CFDictionaryGetValue(ValueAtIndex, CFSTR("key"));
        if (v9)
        {
          v10 = v9;
          v11 = CFGetTypeID(v9);
          if (v11 == CFStringGetTypeID())
          {
            if (CFEqual(v10, CFSTR("tagc")))
              goto LABEL_14;
          }
          else
          {
            v12 = CFGetTypeID(v10);
            if (v12 != CFNumberGetTypeID()
              || (v18 = 0,
                  !FigMetadataStringKeyToOSTypeKeyWithKeySpace((uint64_t)Value, CFSTR("tagc"), &v18))
              || (valuePtr = 0, CFNumberGetValue((CFNumberRef)v10, kCFNumberSInt32Type, &valuePtr)) && v18 == valuePtr)
            {
LABEL_14:
              v13 = CFDictionaryGetValue(ValueAtIndex, CFSTR("value"));
              if (v13)
                CFArrayAppendValue(theArray, v13);
            }
          }
        }
      }
    }
  }
  if (v15)
    *v15 = theArray;
  else
    CFRelease(theArray);
  return 0;
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, int *), __CFArray **a4)
{
  __CFArray **v4;
  uint64_t v8;
  const __CFAllocator *v9;
  __CFArray *Mutable;
  uint64_t v11;
  const __CFArray *v12;
  uint64_t (*v13)(uint64_t, uint64_t, CFArrayRef *);
  uint64_t v14;
  const __CFArray *v15;
  uint64_t (*v16)(uint64_t, char *);
  CFIndex v17;
  CFIndex v18;
  CFIndex v19;
  __CFString **v20;
  const opaqueCMFormatDescription *v21;
  uint64_t (*v22)(uint64_t, uint64_t, CFTypeRef *);
  CFIndex Count;
  CFIndex v24;
  CFIndex v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  const __CFString *v31;
  const __CFString *v32;
  const opaqueCMFormatDescription *ValueAtIndex;
  __CFArray **v35;
  __CFArray *v36;
  const __CFString *extensionKey;
  int v38;
  CMTextDisplayFlags displayFlagsOut;
  char v40;
  CFArrayRef v41;
  CFArrayRef v42;
  CFTypeRef cf;
  CFArrayRef theArray;
  int v45;
  CFRange v46;
  CFRange v47;
  CFRange v48;

  v45 = 0;
  cf = 0;
  theArray = 0;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  if (!*a3 || (v4 = a4, !a3[1]) && !a3[2] || !a3[4])
  {
    v8 = FigSignalErrorAt();
    goto LABEL_86;
  }
  if (!a4)
  {
    Mutable = 0;
    goto LABEL_32;
  }
  v8 = (*a3)(a2, &v45);
  if ((_DWORD)v8)
  {
LABEL_86:
    v14 = v8;
    goto LABEL_73;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
LABEL_32:
    v14 = 0;
    goto LABEL_74;
  }
  v11 = FigMediaCharacteristicsCopyMediaCharacteristicsForMediaType(v9, v45, &theArray);
  if ((_DWORD)v11)
    goto LABEL_87;
  v12 = theArray;
  if (theArray)
  {
    v47.length = CFArrayGetCount(theArray);
    v47.location = 0;
    CFArrayAppendArray(Mutable, v12, v47);
  }
  v13 = (uint64_t (*)(uint64_t, uint64_t, CFArrayRef *))a3[1];
  if (v13)
  {
    v14 = v13(a2, a1, &v42);
LABEL_13:
    v15 = v42;
    if (v42)
    {
      v48.length = CFArrayGetCount(v42);
      v48.location = 0;
      CFArrayAppendArray(Mutable, v15, v48);
    }
    v16 = (uint64_t (*)(uint64_t, char *))a3[3];
    if (v16)
    {
      v14 = v16(a2, &v40);
      if (v40)
        CFArrayAppendValue(Mutable, CFSTR("public.auxiliary-content"));
      v46.length = CFArrayGetCount(Mutable);
      v46.location = 0;
      if (!CFArrayContainsValue(Mutable, v46, CFSTR("public.auxiliary-content")))
        CFArrayAppendValue(Mutable, CFSTR("public.main-program-content"));
    }
    if (v45 != 1935832172)
    {
      if (v45 == 1986618469)
      {
        v11 = ((uint64_t (*)(uint64_t, uint64_t, CFArrayRef *))a3[4])(a2, a1, &v41);
        if (!(_DWORD)v11)
        {
          if (!v41)
            goto LABEL_71;
          Count = CFArrayGetCount(v41);
          if (Count < 1)
            goto LABEL_71;
          v24 = Count;
          v35 = v4;
          v36 = Mutable;
          v25 = 0;
          v26 = 0;
          v38 = 0;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = (const __CFString *)*MEMORY[0x1E0CA49F8];
          extensionKey = (const __CFString *)*MEMORY[0x1E0CA4A50];
          v32 = (const __CFString *)*MEMORY[0x1E0CA2208];
          do
          {
            ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v41, v25);
            if (FigVideoFormatDescriptionContainsWideColor())
              v30 = 1;
            if (FigVideoFormatDescriptionContainsHDR())
              v29 = 1;
            if (FigVideoFormatDescriptionContainsAlphaChannel())
              v28 = 1;
            if (FigVideoFormatDescriptionContainsStereoMultiviewVideo())
              v27 = 1;
            if (CMFormatDescriptionGetExtension(ValueAtIndex, v31)
              || CMFormatDescriptionGetExtension(ValueAtIndex, extensionKey))
            {
              v38 = 1;
            }
            if (CMFormatDescriptionGetExtension(ValueAtIndex, v32))
              v26 = 1;
            ++v25;
          }
          while (v24 != v25);
          Mutable = v36;
          if (v30)
            CFArrayAppendValue(v36, CFSTR("public.uses-wide-gamut-color-space"));
          if (v29)
            CFArrayAppendValue(v36, CFSTR("public.contains-hdr-video"));
          if (v28)
            CFArrayAppendValue(v36, CFSTR("public.contains-alpha-channel"));
          if (v27)
            CFArrayAppendValue(v36, CFSTR("public.contains-stereo-multiview-video"));
          if (v38)
            CFArrayAppendValue(v36, CFSTR("com.apple.quicktime.video.stereo-metadata"));
          v4 = v35;
          if (!v26)
            goto LABEL_71;
          v20 = kFigStdAssetMediaCharacteristic_IndicatesHorizontalFieldOfView;
LABEL_70:
          CFArrayAppendValue(Mutable, *v20);
LABEL_71:
          v14 = 0;
          goto LABEL_72;
        }
        goto LABEL_87;
      }
      if (v45 != 1952807028)
      {
LABEL_72:
        *v4 = Mutable;
LABEL_73:
        Mutable = 0;
        goto LABEL_74;
      }
    }
    v11 = ((uint64_t (*)(uint64_t, uint64_t, CFArrayRef *))a3[4])(a2, a1, &v41);
    if (!(_DWORD)v11)
    {
      if (!v41)
        goto LABEL_71;
      v17 = CFArrayGetCount(v41);
      if (v17 < 1)
        goto LABEL_71;
      v18 = v17;
      v19 = 0;
      v20 = kFigStdAssetMediaCharacteristic_TaggedContainsOnlyForcedSubtitles;
      while (1)
      {
        v21 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v41, v19);
        displayFlagsOut = 0;
        if (CMTextFormatDescriptionGetDisplayFlags(v21, &displayFlagsOut) || (displayFlagsOut & 0x80000000) == 0)
          break;
        if (v18 == ++v19)
          goto LABEL_70;
      }
      if (v18 != v19)
        goto LABEL_71;
      v20 = kFigStdAssetMediaCharacteristic_TaggedContainsOnlyForcedSubtitles;
      goto LABEL_70;
    }
LABEL_87:
    v14 = v11;
    goto LABEL_74;
  }
  v22 = (uint64_t (*)(uint64_t, uint64_t, CFTypeRef *))a3[2];
  if (!v22)
  {
    v14 = 0;
    goto LABEL_13;
  }
  v14 = v22(a2, a1, &cf);
  if (!cf)
    goto LABEL_13;
  v14 = _createTaggedMediaCharacteristicsFromUserData((const __CFArray *)cf, &v42);
  if (!(_DWORD)v14)
    goto LABEL_13;
LABEL_74:
  if (theArray)
    CFRelease(theArray);
  if (cf)
    CFRelease(cf);
  if (v42)
    CFRelease(v42);
  if (v41)
    CFRelease(v41);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsForTrackReader(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  return FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks(a1, a2, (uint64_t (**)(uint64_t, int *))&off_1E2FB9558, a3);
}

uint64_t FigTrackReaderGetMediaType(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, _QWORD, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (v4)
    return v4(a1, 0, a2);
  else
    return 4294954514;
}

uint64_t FigTrackReaderCopyUserData(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  return _produceUserDataAssetTrackProperty(a1, a3);
}

uint64_t FigTrackReaderGetIsExcludedFromAutoSelection(uint64_t a1, BOOL *a2)
{
  uint64_t FigBaseObject;
  void (*v4)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef v5;
  CFTypeRef cf;

  cf = 0;
  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v4 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v4)
  {
    v4(FigBaseObject, CFSTR("TrackExcludeFromAutoSelection"), *MEMORY[0x1E0C9AE00], &cf);
    v5 = cf;
    *a2 = cf == (CFTypeRef)*MEMORY[0x1E0C9AE50];
    if (v5)
      CFRelease(v5);
  }
  else
  {
    *a2 = *MEMORY[0x1E0C9AE50] == 0;
  }
  return 0;
}

uint64_t FigTrackReaderCopyFormatDescriptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t (*v6)(uint64_t, const __CFString *, uint64_t, uint64_t);

  FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  v6 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
  if (v6)
    return v6(FigBaseObject, CFSTR("TrackFormatDescriptionArray"), a2, a3);
  else
    return 4294954514;
}

uint64_t FigMediaCharacteristicsCopyMediaCharacteristicsForTrackInformation(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  return FigMediaCharacteristicsCopyMediaCharacteristicsWithTrackCallbacks(a1, a2, (uint64_t (**)(uint64_t, int *))&off_1E2FB9580, a3);
}

uint64_t FigTrackInformationGetMediaType(uint64_t a1, _DWORD *a2)
{
  return MovieTrackGetBasicInfo(a1, a2, 0);
}

uint64_t FigTrackInformationCopyUserData(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFDictionary *TrackMetadataItemArray;
  const __CFDictionary *v6;
  const __CFArray *v7;
  BOOL v8;
  uint64_t MutableCopy;
  __CFArray *v10;
  __CFArray *v11;
  CFRange v13;

  TrackMetadataItemArray = MovieTrackGetTrackMetadataItemArray(a1, CFSTR("com.apple.quicktime.udta"));
  v6 = MovieTrackGetTrackMetadataItemArray(a1, CFSTR("org.mp4ra"));
  v7 = v6;
  if (TrackMetadataItemArray)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (TrackMetadataItemArray)
    {
      v6 = TrackMetadataItemArray;
    }
    else if (!v6)
    {
      v11 = 0;
      goto LABEL_12;
    }
    v11 = (__CFArray *)CFRetain(v6);
LABEL_12:
    *a3 = v11;
    return 0;
  }
  MutableCopy = FigCFArrayCreateMutableCopy();
  if (MutableCopy)
  {
    v10 = (__CFArray *)MutableCopy;
    v13.length = CFArrayGetCount(v7);
    v13.location = 0;
    CFArrayAppendArray(v10, v7, v13);
    *a3 = v10;
    return 0;
  }
  return FigSignalErrorAt();
}

uint64_t FigTrackInformationGetIsExcludedFromAutoSelection(uint64_t a1, _BYTE *a2)
{
  *a2 = MovieTrackIsExcludedFromAutoSelection(a1);
  return 0;
}

uint64_t FigTrackInformationCopyFormatDescriptions(uint64_t a1, uint64_t a2, CFArrayRef *a3)
{
  *a3 = MovieTrackCopyFormatDescriptionArray(a1);
  return 0;
}

uint64_t FigMediaCharacteristicsCopyTaggedMediaCharacteristicsForAudioCompositionPresetDescription(uint64_t a1, uint64_t a2, __CFArray **a3)
{
  const __CFArray *ArrayValue;
  CFIndex Count;
  CFIndex v6;
  uint64_t v7;
  __CFArray *Mutable;
  const __CFAllocator *v9;
  const CFArrayCallBacks *v10;
  uint64_t StringValue;
  const void *v12;

  if (_getAPACAudioCharacteristicToTaggedMediaCharacteristicMapping_sOnceToken != -1)
    dispatch_once_f(&_getAPACAudioCharacteristicToTaggedMediaCharacteristicMapping_sOnceToken, 0, (dispatch_function_t)_createAPACCharacteristicToTaggedMediaCharacteristicMappingOnce);
  ArrayValue = (const __CFArray *)FigCFDictionaryGetArrayValue();
  if (ArrayValue)
  {
    Count = CFArrayGetCount(ArrayValue);
    if (Count >= 1)
    {
      v6 = Count;
      v7 = 0;
      Mutable = 0;
      v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      while (1)
      {
        FigCFArrayGetValueAtIndex();
        StringValue = FigCFDictionaryGetStringValue();
        if (StringValue)
        {
          v12 = (const void *)StringValue;
          if (!Mutable)
          {
            Mutable = CFArrayCreateMutable(v9, 0, v10);
            if (!Mutable)
              return FigSignalErrorAt();
          }
          CFArrayAppendValue(Mutable, v12);
        }
        if (v6 == ++v7)
          goto LABEL_13;
      }
    }
  }
  Mutable = 0;
LABEL_13:
  *a3 = Mutable;
  return 0;
}

uint64_t _copyAllMetadataItems(const __CFAllocator *a1, uint64_t a2, __CFArray **a3)
{
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD);
  CFIndex v7;
  uint64_t v8;
  __CFArray *Mutable;
  uint64_t i;
  uint64_t (*v11)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *);
  int v12;
  CFDictionaryRef v13;
  __CFDictionary *MutableCopy;
  __CFDictionary *v15;
  uint64_t v16;
  void *value;
  CFDictionaryRef theDict;

  value = 0;
  theDict = 0;
  v6 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (!v6 || (v7 = v6(a2, 0, 0)) == 0)
  {
    Mutable = 0;
LABEL_22:
    v16 = 0;
    goto LABEL_23;
  }
  v8 = v7;
  Mutable = CFArrayCreateMutable(a1, v7, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (v8 >= 1)
    {
      for (i = 0; i != v8; ++i)
      {
        v11 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (v11)
          v12 = v11(a2, 0, 0, i, a1, &value, &theDict);
        else
          v12 = -12782;
        v13 = theDict;
        if (!v12 && value && theDict)
        {
          MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
          if (!MutableCopy)
            break;
          v15 = MutableCopy;
          CFDictionaryAddValue(MutableCopy, CFSTR("value"), value);
          CFArrayAppendValue(Mutable, v15);
          CFRelease(v15);
          v13 = theDict;
        }
        if (v13)
        {
          CFRelease(v13);
          theDict = 0;
        }
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
      }
      if (theDict)
      {
        CFRelease(theDict);
        v16 = 0;
        theDict = 0;
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  v16 = FigSignalErrorAt();
LABEL_23:
  if (value)
  {
    CFRelease(value);
    value = 0;
  }
  if ((_DWORD)v16 && Mutable)
  {
    CFRelease(Mutable);
    Mutable = 0;
  }
  *a3 = Mutable;
  return v16;
}

CFDictionaryRef _createAPACCharacteristicToTaggedMediaCharacteristicMappingOnce()
{
  void *v0;
  void *v1;
  void *v2;
  CFDictionaryRef result;
  void *values[7];
  void *keys[8];

  keys[7] = *(void **)MEMORY[0x1E0C80C00];
  v0 = (void *)*MEMORY[0x1E0CA4B48];
  keys[0] = *(void **)MEMORY[0x1E0CA4B40];
  keys[1] = v0;
  v1 = (void *)*MEMORY[0x1E0CA4B60];
  keys[2] = *(void **)MEMORY[0x1E0CA4B68];
  keys[3] = v1;
  v2 = (void *)*MEMORY[0x1E0CA4B70];
  keys[4] = *(void **)MEMORY[0x1E0CA4B50];
  keys[5] = v2;
  keys[6] = *(void **)MEMORY[0x1E0CA4B58];
  values[0] = CFSTR("public.accessibility.describes-video");
  values[1] = CFSTR("public.auxiliary-content");
  values[2] = CFSTR("public.original-content");
  values[3] = CFSTR("public.translation");
  values[4] = CFSTR("public.translation.dubbed");
  values[5] = CFSTR("public.translation.voice-over");
  values[6] = CFSTR("public.accessibility.enhances-speech-intelligibility");
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  sAPACAudioCharacteristicToTaggedMediaCharacteristicMapping = (uint64_t)result;
  return result;
}

uint64_t FigClosedCaptionStringConformerNew(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  if (a1 && (v2 = malloc_type_calloc(1uLL, 0x18uLL, 0x6004045F868BCuLL)) != 0)
  {
    v3 = v2;
    v2[2] = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  }
  else
  {
    v6 = FigSignalErrorAt();
    if ((_DWORD)v6)
    {
      v4 = v6;
      keyManager_releaseCallbackContext(0);
      return v4;
    }
    v3 = 0;
  }
  v4 = 0;
  *a1 = v3;
  return v4;
}

const void *FigClosedCaptionStringConformerPushCommand(uint64_t a1, int a2, const __CFDictionary *a3, int a4, char *a5, double a6, double a7)
{
  const void *v13;
  const void *v14;
  CFTypeRef v15;
  const __CFArray *v16;
  const __CFArray *v17;
  __CFString *v18;
  const __CFArray *v19;
  CFIndex Count;
  CFIndex v21;
  CFIndex v22;
  const void *v23;
  const __CFArray **ValueAtIndex;
  const __CFArray **v25;
  const __CFArray *v26;
  __CFArray *Mutable;
  CFIndex v28;
  const void *v29;
  CFTypeID v30;
  CFIndex v31;
  const void *v32;
  CFTypeID v33;
  const void *v34;
  CFTypeID v35;
  CFIndex Length;
  const __CFNumber *v37;
  const __CFNumber *v38;
  CFTypeID v39;
  const __CTLine *v40;
  int ConformedAttributedStringFromCommandDataStringAndSuggestedAlignment;
  const void *v42;
  const __CFAttributedString *JoinedStringFromElementWithSeparator;
  int v44;
  const void *v45;
  const void *v46;
  const void *v47;
  char v48;
  const void *v50;
  char *v51;
  const void *v52;
  CFIndex v53;
  const __CFArray *v54;
  const __CFAllocator *allocator;
  __CFArray *theArray;
  CFIndex v57;
  const __CFArray *v58;
  CFIndex v59;
  void *value[2];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __CFArray *v87;
  uint64_t valuePtr[2];
  CFRange v89;

  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v74 = 0u;
  if (a1)
  {
    FigCaptionLayoutGetMAXSettingsForPreferringContentAsAuthored((uint64_t)value);
    v84 = v71;
    v85 = v72;
    v86 = v73;
    v80 = v67;
    v81 = v68;
    v82 = v69;
    v83 = v70;
    v76 = v63;
    v77 = v64;
    v78 = v65;
    v79 = v66;
    v74 = *(_OWORD *)value;
    v75 = v62;
    switch(a2)
    {
      case 1:
        v51 = a5;
        v15 = ccstringconformer_copyFontDescriptorAttributeForMediaAccessibilityFontStyle((const __CFString *)*MEMORY[0x1E0CA8380]);
        if (!a4)
          FigCaptionLayoutCopyMAXCaptionSystemSettings((uint64_t)&v74);
        v17 = *(const __CFArray **)a1;
        v16 = *(const __CFArray **)(a1 + 8);
        v87 = 0;
        *(_OWORD *)value = *MEMORY[0x1E0C9D820];
        valuePtr[0] = 0;
        v18 = FigCaptionLayoutCopyEffectiveFontNamePlusInfoAndCreateElementGeometryArrays(v15, 1, v16, v17, 0, 0, 0, 1, 0.0, 0.0, a6, a7, (uint64_t)&v74, 0, valuePtr, 0, 0, 0, 0,
                &v87,
                (double *)value,
                0);
        CFRelease(v18);
        v19 = v87;
        allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        if (v19)
        {
          Count = CFArrayGetCount(v19);
          if (Count >= 1)
          {
            v21 = Count;
            v22 = 0;
            v50 = (const void *)*MEMORY[0x1E0CA2928];
            v52 = (const void *)*MEMORY[0x1E0CA2938];
            v23 = (const void *)*MEMORY[0x1E0CA2948];
            v53 = Count;
            v54 = v19;
            do
            {
              ValueAtIndex = (const __CFArray **)CFArrayGetValueAtIndex(v19, v22);
              v25 = ValueAtIndex;
              if (((_DWORD)ValueAtIndex[18] & 0xFFFFFFFD) == 1)
              {
                v57 = v22;
                v26 = ValueAtIndex[14];
                Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
                if (CFArrayGetCount(v26) >= 1)
                {
                  v28 = 0;
                  v58 = v26;
                  do
                  {
                    v59 = v28;
                    v29 = CFArrayGetValueAtIndex(v26, v28);
                    v30 = CFGetTypeID(v29);
                    if (v30 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)v29) >= 1)
                    {
                      v31 = 0;
                      do
                      {
                        value[0] = 0;
                        v32 = CFArrayGetValueAtIndex((CFArrayRef)v29, v31);
                        v33 = CFGetTypeID(v32);
                        if (v33 == CFDictionaryGetTypeID())
                        {
                          v34 = CFDictionaryGetValue((CFDictionaryRef)v32, CFSTR("S"));
                          v35 = CFGetTypeID(v34);
                          if (v35 == CFAttributedStringGetTypeID())
                          {
                            Length = CFAttributedStringGetLength((CFAttributedStringRef)v34);
                            valuePtr[0] = 0;
                            v37 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v32, CFSTR("OffsetXKey"));
                            if (v37)
                            {
                              v38 = v37;
                              v39 = CFGetTypeID(v37);
                              if (v39 == CFNumberGetTypeID())
                              {
                                CFNumberGetValue(v38, kCFNumberCGFloatType, valuePtr);
                                v40 = CTLineCreateWithAttributedString((CFAttributedStringRef)v34);
                                FigCaptionLayoutGetLineWidthWithRange(v40, 0, Length);
                                if (v40)
                                  CFRelease(v40);
                                if (ccstringConformer_getFontSizeForAnnotatedElementAttributedString((const __CFAttributedString *)v34) > 0.0)
                                {
                                  ConformedAttributedStringFromCommandDataStringAndSuggestedAlignment = ccstringconformer_c608_createConformedAttributedStringFromCommandDataStringAndSuggestedAlignment((const __CFAttributedString *)v34, v23, a4, (__CFAttributedString **)value);
                                  v42 = value[0];
                                  if (!ConformedAttributedStringFromCommandDataStringAndSuggestedAlignment)
                                    CFArrayAppendValue(Mutable, value[0]);
                                  if (v42)
                                    CFRelease(v42);
                                }
                              }
                            }
                          }
                        }
                        ++v31;
                      }
                      while (v31 < CFArrayGetCount((CFArrayRef)v29));
                    }
                    v26 = v58;
                    v28 = v59 + 1;
                  }
                  while (v59 + 1 < CFArrayGetCount(v58));
                }
                v89.length = CFArrayGetCount(Mutable);
                v89.location = 0;
                CFArrayAppendArray(theArray, Mutable, v89);
                CFRelease(Mutable);
                v21 = v53;
                v19 = v54;
                v22 = v57;
              }
              else
              {
                value[0] = 0;
                JoinedStringFromElementWithSeparator = FigCaptionLayoutCreateJoinedStringFromElementWithSeparator(ValueAtIndex[14], CFSTR(" "));
                v44 = FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(v25[13]);
                if (v44 == 4)
                {
                  v45 = v50;
                }
                else
                {
                  v45 = v52;
                  if (v44 != 2)
                  {
                    v45 = 0;
                    if (v44 == 1)
                      v45 = v23;
                  }
                }
                if (ccstringConformer_getFontSizeForAnnotatedElementAttributedString(JoinedStringFromElementWithSeparator) > 0.0)
                  ccstringconformer_c608_createConformedAttributedStringFromCommandDataStringAndSuggestedAlignment(JoinedStringFromElementWithSeparator, v45, a4, (__CFAttributedString **)value);
                if (JoinedStringFromElementWithSeparator)
                  CFRelease(JoinedStringFromElementWithSeparator);
                v46 = value[0];
                if (value[0])
                {
                  CFArrayAppendValue(theArray, value[0]);
                  CFRelease(v46);
                }
              }
              ++v22;
            }
            while (v22 != v21);
          }
        }
        FigCaptionLayoutReleaseCaptionElementArray(v87);
        v47 = *(const void **)(a1 + 16);
        if (v47)
          CFRelease(v47);
        *(_QWORD *)(a1 + 16) = theArray;
        a5 = v51;
        if (v15)
          CFRelease(v15);
        v14 = 0;
        v48 = 1;
        if (v51)
          goto LABEL_56;
        goto LABEL_57;
      case 7:
        v13 = CFDictionaryGetValue(a3, CFSTR("C"));
        v14 = *(const void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v13;
        if (!v13)
          goto LABEL_52;
        break;
      case 6:
        v13 = CFDictionaryGetValue(a3, CFSTR("W"));
        v14 = *(const void **)a1;
        *(_QWORD *)a1 = v13;
        if (!v13)
        {
LABEL_52:
          if (!v14)
            goto LABEL_55;
          CFRelease(v14);
          goto LABEL_54;
        }
        break;
      default:
LABEL_54:
        v14 = 0;
        goto LABEL_55;
    }
    CFRetain(v13);
    goto LABEL_52;
  }
  v14 = (const void *)FigSignalErrorAt();
LABEL_55:
  v48 = 0;
  if (a5)
LABEL_56:
    *a5 = v48;
LABEL_57:
  FigCaptionLayoutClearMAXCaptionSettings((uint64_t)&v74);
  return v14;
}

CFTypeRef FigClosedCaptionStringConformerCopyCurrentConformedStrings(uint64_t a1)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 16);
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef ccstringconformer_copyFontDescriptorAttributeForMediaAccessibilityFontStyle(const __CFString *a1)
{
  const __CTFontDescriptor *v2;
  CFTypeRef v3;

  v2 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainDefault, 0, kMACaptionAppearanceFontStyleMonospacedWithSerif);
  v3 = CTFontDescriptorCopyAttribute(v2, a1);
  if (v2)
    CFRelease(v2);
  return v3;
}

double ccstringConformer_getFontSizeForAnnotatedElementAttributedString(const __CFAttributedString *a1)
{
  uint64_t Length;
  double v3;
  CFRange v4;
  const __CTFont *AttributeAndLongestEffectiveRange;
  const __CTFont *v6;
  CFTypeID v7;
  CFRange v9;

  v9.location = 0;
  v9.length = 0;
  Length = CFAttributedStringGetLength(a1);
  v3 = 0.0;
  if (a1)
  {
    v4.length = Length;
    if (Length >= 1)
    {
      v4.location = 0;
      AttributeAndLongestEffectiveRange = (const __CTFont *)CFAttributedStringGetAttributeAndLongestEffectiveRange(a1, 0, (CFStringRef)*MEMORY[0x1E0CA8188], v4, &v9);
      if (AttributeAndLongestEffectiveRange)
      {
        v6 = AttributeAndLongestEffectiveRange;
        v7 = CFGetTypeID(AttributeAndLongestEffectiveRange);
        if (v7 == CTFontGetTypeID())
          return CTFontGetSize(v6);
      }
    }
  }
  return v3;
}

uint64_t ccstringconformer_c608_createConformedAttributedStringFromCommandDataStringAndSuggestedAlignment(const __CFAttributedString *a1, const void *a2, int a3, __CFAttributedString **a4)
{
  __CFAttributedString *Mutable;
  const __CFString *String;
  CFIndex v8;
  const void *v9;
  const __CFDictionary *Attributes;
  CFRange v11;
  __CFAttributedString *v12;
  const __CFString *v13;
  const void *v14;
  const __CTFontDescriptor *v15;
  CFTypeRef v16;
  uint64_t result;
  MACaptionAppearanceTextEdgeStyle TextEdgeStyle;
  uint64_t v19;
  const void *Value;
  BOOL v21;
  const void *v22;
  const void *v23;
  BOOL v24;
  const void *v25;
  const void *WhiteARGBColorArray;
  const void *ARGBColorArrayFromCGColor;
  const void *v28;
  const void *ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity;
  const void *v30;
  const void *BlackARGBColorArray;
  const void *v32;
  const void *v33;
  const void *ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity;
  const void *v35;
  const void *ClearARGBColorArray;
  const void *v37;
  __CFArray *ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity;
  CFIndex Length;
  const __CFString *v42;
  const void *v43;
  const void *v44;
  const __CFString *v45;
  const __CFString *attrName;
  const __CFString *v47;
  const __CFString *v48;
  const __CFString *attribute;
  const __CFString *v50;
  const __CFString *v51;
  const void *v52;
  const __CFString *v53;
  CFRange effectiveRange;
  CFRange v55;
  CFRange v56;
  CFRange v57;

  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  Length = CFAttributedStringGetLength(a1);
  String = CFAttributedStringGetString(a1);
  v55.location = 0;
  v55.length = 0;
  CFAttributedStringReplaceString(Mutable, v55, String);
  if (CFAttributedStringGetLength(a1) >= 1)
  {
    v8 = 0;
    attribute = (const __CFString *)*MEMORY[0x1E0CA8300];
    attrName = (const __CFString *)*MEMORY[0x1E0CA2A00];
    v45 = (const __CFString *)*MEMORY[0x1E0CA2978];
    v44 = (const void *)*MEMORY[0x1E0C9AE50];
    v43 = (const void *)*MEMORY[0x1E0CA2B70];
    v42 = (const __CFString *)*MEMORY[0x1E0CA29C0];
    v53 = (const __CFString *)*MEMORY[0x1E0CA2A28];
    v52 = (const void *)*MEMORY[0x1E0CA2BF0];
    v9 = (const void *)*MEMORY[0x1E0C9AE40];
    v51 = (const __CFString *)*MEMORY[0x1E0CA2A50];
    v50 = (const __CFString *)*MEMORY[0x1E0CA2B38];
    v48 = (const __CFString *)*MEMORY[0x1E0CA2A20];
    v47 = (const __CFString *)*MEMORY[0x1E0CA29B8];
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      Attributes = CFAttributedStringGetAttributes(a1, v8, &effectiveRange);
      if (a3)
      {
        v11 = effectiveRange;
        v12 = Mutable;
        v14 = v52;
        v13 = v53;
      }
      else
      {
        v15 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleDefault);
        v16 = CTFontDescriptorCopyAttribute(v15, attribute);
        if (v15)
          CFRelease(v15);
        if (!v16)
        {
          v16 = ccstringconformer_copyFontDescriptorAttributeForMediaAccessibilityFontStyle(attribute);
          if (!v16)
            v16 = CFRetain(CFSTR("Courier New"));
        }
        CFAttributedStringSetAttribute(Mutable, effectiveRange, attrName, v16);
        CFRelease(v16);
        result = FigCFAttributedStringSetDouble();
        if ((_DWORD)result)
          return result;
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v45, v44);
        TextEdgeStyle = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, 0);
        v19 = FigStringConformerEdgeStyleForMediaAccessibilityEdgeStyle(TextEdgeStyle);
        v13 = v42;
        if (v19)
          v14 = (const void *)v19;
        else
          v14 = v43;
        v11 = effectiveRange;
        v12 = Mutable;
      }
      CFAttributedStringSetAttribute(v12, v11, v13, v14);
      Value = CFDictionaryGetValue(Attributes, CFSTR("i"));
      if (Value)
        v21 = 0;
      else
        v21 = a3 == 0;
      if (v21)
        v22 = v9;
      else
        v22 = Value;
      if (v22)
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v51, v22);
      v23 = CFDictionaryGetValue(Attributes, CFSTR("u"));
      if (v23)
        v24 = 0;
      else
        v24 = a3 == 0;
      if (v24)
        v25 = v9;
      else
        v25 = v23;
      if (v25)
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v50, v25);
      WhiteARGBColorArray = (const void *)FigTextMarkupCreateWhiteARGBColorArray();
      if (CFDictionaryGetValue(Attributes, CFSTR("t")))
      {
        ARGBColorArrayFromCGColor = (const void *)FigTextMarkupCreateARGBColorArrayFromCGColor();
        v28 = ARGBColorArrayFromCGColor;
        if (a3)
        {
          if (!ARGBColorArrayFromCGColor)
            goto LABEL_36;
          ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity = CFRetain(ARGBColorArrayFromCGColor);
          CFRelease(WhiteARGBColorArray);
LABEL_39:
          CFRelease(v28);
          goto LABEL_40;
        }
      }
      else
      {
        if (a3)
        {
LABEL_36:
          v30 = WhiteARGBColorArray;
          goto LABEL_42;
        }
        v28 = 0;
      }
      ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity(v28, WhiteARGBColorArray);
      CFRelease(WhiteARGBColorArray);
      if (v28)
        goto LABEL_39;
LABEL_40:
      if (!ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity)
        goto LABEL_43;
      CFAttributedStringSetAttribute(Mutable, effectiveRange, v48, ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity);
      v30 = ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity;
LABEL_42:
      CFRelease(v30);
LABEL_43:
      BlackARGBColorArray = (const void *)FigTextMarkupCreateBlackARGBColorArray();
      if (!CFDictionaryGetValue(Attributes, CFSTR("b")))
      {
        if (a3)
        {
LABEL_48:
          v35 = BlackARGBColorArray;
LABEL_54:
          CFRelease(v35);
          goto LABEL_55;
        }
        v33 = 0;
LABEL_50:
        ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity(v33, BlackARGBColorArray);
        CFRelease(BlackARGBColorArray);
        if (!v33)
          goto LABEL_52;
        goto LABEL_51;
      }
      v32 = (const void *)FigTextMarkupCreateARGBColorArrayFromCGColor();
      v33 = v32;
      if (!a3)
        goto LABEL_50;
      if (!v32)
        goto LABEL_48;
      ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity = CFRetain(v32);
      CFRelease(BlackARGBColorArray);
LABEL_51:
      CFRelease(v33);
LABEL_52:
      if (ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity)
      {
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v47, ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity);
        v35 = ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity;
        goto LABEL_54;
      }
LABEL_55:
      v8 = effectiveRange.length + effectiveRange.location;
    }
    while (v8 < CFAttributedStringGetLength(a1));
  }
  if (a2)
  {
    v56.location = 0;
    v56.length = Length;
    CFAttributedStringSetAttribute(Mutable, v56, (CFStringRef)*MEMORY[0x1E0CA2958], a2);
  }
  ClearARGBColorArray = (const void *)FigTextMarkupCreateClearARGBColorArray();
  v37 = ClearARGBColorArray;
  if (a3)
    goto LABEL_61;
  ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedWindowARGBColorArrayUsingMAXColorAndOpacity(0, ClearARGBColorArray);
  CFRelease(v37);
  if (ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity)
  {
    v57.location = 0;
    v57.length = Length;
    CFAttributedStringSetAttribute(Mutable, v57, (CFStringRef)*MEMORY[0x1E0CA2968], ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity);
    ClearARGBColorArray = ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity;
LABEL_61:
    CFRelease(ClearARGBColorArray);
  }
  result = FigCFAttributedStringSetDouble();
  if (!(_DWORD)result)
  {
    result = FigCFAttributedStringSetDouble();
    if (!(_DWORD)result)
    {
      result = FigCFAttributedStringSetDouble();
      if (!(_DWORD)result)
      {
        if (a3 || (result = FigCFAttributedStringSetDouble(), !(_DWORD)result))
        {
          result = 0;
          *a4 = Mutable;
        }
      }
    }
  }
  return result;
}

uint64_t FigNetworkPredictionArbiterCreate(const void *a1, const void *a2, const __CFDictionary *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFTypeRef v10;
  const void *Value;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, _QWORD, const void *);
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v17;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a4)
    return FigSignalErrorAt();
  FigNetworkPredictorGetClassID();
  v8 = CMDerivedObjectCreate();
  if ((_DWORD)v8)
    return v8;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = a2 ? CFRetain(a2) : 0;
  *(_QWORD *)DerivedStorage = v10;
  v8 = FigNetworkHistoryCopySharedPredictor();
  if ((_DWORD)v8)
    return v8;
  FigNetworkHistoryGetGlobal();
  v8 = FigNetworkHistoryCopySharedPredictor();
  if ((_DWORD)v8)
    return v8;
  if (a3)
  {
    Value = CFDictionaryGetValue(a3, CFSTR("NetworkPredictorCreateOption_StoreBag"));
    if (Value)
      Value = CFRetain(Value);
    *(_QWORD *)(DerivedStorage + 32) = Value;
  }
  if (_os_feature_enabled_impl())
  {
    v12 = CMBaseObjectGetDerivedStorage();
    if (!CelestialIs1GBAudioAccessory()
      || !FigRCLGetNumberWithDefault(*(const __CFDictionary **)(v12 + 32), CFSTR("disableMLOn1GBAudioAccessory")))
    {
      v8 = FigMLBandwidthPredictorCreate(a1, (_QWORD *)(DerivedStorage + 24));
      if ((_DWORD)v8)
        return v8;
      v13 = *(_QWORD *)(DerivedStorage + 24);
      v14 = *(uint64_t (**)(uint64_t, _QWORD, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
      if (!v14)
        return 4294954514;
      v8 = v14(v13, *MEMORY[0x1E0CA4CF0], a2);
      if ((_DWORD)v8)
        return v8;
    }
  }
  v15 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 40) = v15;
  if (!v15)
    return FigSignalErrorAt();
  *(_QWORD *)(DerivedStorage + 48) = (uint64_t)FigRCLGetDoubleWithDefault(*(const __CFDictionary **)(DerivedStorage + 32), CFSTR("mlMixingWindowSize"));
  *(_QWORD *)(DerivedStorage + 56) = 0;
  *(_DWORD *)(DerivedStorage + 64) = 0;
  *(_BYTE *)(DerivedStorage + 68) = 0;
  if (dword_1EE2A35E0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v17 = 0;
  *a4 = 0;
  return v17;
}

void fnpa_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 32);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 80);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 104);
  if (v6)
    CFRelease(v6);
}

uint64_t fnpa_copyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, uint64_t);
  uint64_t v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  v7 = *MEMORY[0x1E0CA4CF0];
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E0CA4CF0]))
  {
    v8 = *(_QWORD *)(DerivedStorage + 8);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
    if (v9)
      v10 = v9(v8, v7, *MEMORY[0x1E0C9AE00], a4);
    else
      v10 = 4294954514;
  }
  else
  {
    v10 = 4294949566;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v10;
}

uint64_t fnpa_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, const void *);
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, const __CFString *, const void *);
  int v17;
  CFTypeID v18;
  const void *v19;
  CFTypeID v20;
  CFTypeID v22;
  const void *v23;
  CFTypeID v24;
  uint64_t UInt64;
  int v26;
  int v27;
  int valuePtr;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  valuePtr = 0;
  if (CFEqual(a2, CFSTR("NetworkPredictorProperty_EnableMLTraining")))
  {
    if (a3)
    {
      v6 = CFGetTypeID(a3);
      if (v6 == CFBooleanGetTypeID())
      {
        v7 = *(_QWORD *)(DerivedStorage + 24);
        if (v7)
        {
          v8 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
          if (v8)
          {
            v9 = CFSTR("NetworkPredictorProperty_EnableMLTraining");
LABEL_7:
            v10 = v8(v7, v9, a3);
LABEL_8:
            v11 = v10;
            goto LABEL_45;
          }
          goto LABEL_44;
        }
        goto LABEL_24;
      }
    }
    goto LABEL_65;
  }
  if (CFEqual(a2, CFSTR("NetworkPredictorProperty_EnableMLPredictions")))
  {
    *(_BYTE *)(DerivedStorage + 68) = *MEMORY[0x1E0C9AE50] == (_QWORD)a3;
    if (dword_1EE2A35E0)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_24;
  }
  if (!CFEqual(a2, CFSTR("NetworkPredictorProperty_InterfaceType")))
  {
    if (CFEqual(a2, CFSTR("NetworkPredictorProperty_CMSessionID")))
    {
      if (a3)
      {
        v18 = CFGetTypeID(a3);
        if (v18 == CFStringGetTypeID())
        {
          v7 = *(_QWORD *)(DerivedStorage + 24);
          if (v7)
          {
            v8 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
            if (v8)
            {
              v9 = CFSTR("NetworkPredictorProperty_CMSessionID");
              goto LABEL_7;
            }
LABEL_44:
            v11 = 4294954514;
            goto LABEL_45;
          }
LABEL_24:
          v11 = 0;
          goto LABEL_45;
        }
      }
LABEL_65:
      v10 = FigSignalErrorAt();
      goto LABEL_8;
    }
    if (CFEqual(a2, CFSTR("NetworkPredictorProperty_ReportingAgent")))
    {
      if (a3)
      {
        v19 = *(const void **)(DerivedStorage + 80);
        *(_QWORD *)(DerivedStorage + 80) = a3;
        CFRetain(a3);
        if (v19)
          CFRelease(v19);
        v7 = *(_QWORD *)(DerivedStorage + 24);
        if (v7)
        {
          v8 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 56);
          if (v8)
          {
            v9 = CFSTR("NetworkPredictorProperty_ReportingAgent");
            goto LABEL_7;
          }
          goto LABEL_44;
        }
        goto LABEL_24;
      }
    }
    else
    {
      if (CFEqual(a2, CFSTR("NetworkPredictorProperty_ClientBundleIdentifier")))
      {
        if (a3)
        {
          v20 = CFGetTypeID(a3);
          if (v20 == CFStringGetTypeID())
          {
            v7 = *(_QWORD *)(DerivedStorage + 24);
            if (v7)
            {
              v8 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                       + 56);
              if (v8)
              {
                v9 = CFSTR("NetworkPredictorProperty_ClientBundleIdentifier");
                goto LABEL_7;
              }
              goto LABEL_44;
            }
            goto LABEL_24;
          }
        }
        goto LABEL_65;
      }
      if (CFEqual(a2, CFSTR("NetworkPredictorProperty_SSID")))
      {
        if (a3)
        {
          v22 = CFGetTypeID(a3);
          if (v22 == CFStringGetTypeID())
          {
            if (!FigCFEqual())
            {
              *(_QWORD *)(DerivedStorage + 56) = FigGetUpTimeNanoseconds();
              *(_DWORD *)(DerivedStorage + 64) = 3;
            }
            v23 = *(const void **)(DerivedStorage + 104);
            *(_QWORD *)(DerivedStorage + 104) = a3;
            CFRetain(a3);
            if (v23)
              CFRelease(v23);
            goto LABEL_24;
          }
        }
        goto LABEL_65;
      }
      if (CFEqual(a2, CFSTR("NetworkPredictorProperty_RSSI")))
      {
        if (!a3)
          goto LABEL_65;
        v24 = CFGetTypeID(a3);
        if (v24 != CFNumberGetTypeID())
          goto LABEL_65;
        UInt64 = FigCFNumberGetUInt64();
        if (UInt64 <= -40)
          v26 = 2;
        else
          v26 = 3;
        if (UInt64 < -60)
          v27 = 1;
        else
          v27 = v26;
        if (*(_DWORD *)(DerivedStorage + 112) != v27)
        {
          *(_QWORD *)(DerivedStorage + 56) = FigGetUpTimeNanoseconds();
          *(_DWORD *)(DerivedStorage + 64) = 4;
        }
        v11 = 0;
        *(_DWORD *)(DerivedStorage + 112) = v27;
        goto LABEL_45;
      }
    }
    v11 = 4294949566;
    goto LABEL_45;
  }
  if (!a3)
    goto LABEL_65;
  v13 = CFGetTypeID(a3);
  if (v13 != CFNumberGetTypeID())
    goto LABEL_65;
  CFNumberGetValue((CFNumberRef)a3, kCFNumberIntType, &valuePtr);
  v14 = valuePtr;
  if (!valuePtr)
    goto LABEL_24;
  v15 = *(_QWORD *)(DerivedStorage + 24);
  if (v15)
  {
    v16 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (!v16)
      goto LABEL_44;
    v10 = v16(v15, CFSTR("NetworkPredictorProperty_InterfaceType"), a3);
    if ((_DWORD)v10)
      goto LABEL_8;
    v14 = valuePtr;
  }
  v17 = *(_DWORD *)(DerivedStorage + 72);
  if (v17 && v14 != v17)
  {
    *(_QWORD *)(DerivedStorage + 56) = FigGetUpTimeNanoseconds();
    *(_DWORD *)(DerivedStorage + 64) = 2;
    v14 = valuePtr;
  }
  v11 = 0;
  *(_DWORD *)(DerivedStorage + 72) = v14;
LABEL_45:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v11;
}

uint64_t fnpa_makePrediction(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  BOOL v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _BOOL4 v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t HeuristicPrediction;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  unsigned int v52;
  uint64_t FirstActiveTimestamp;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  double v69;
  uint64_t v70;
  unsigned int v71;
  double v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  char v76;
  __int128 *v77;
  uint64_t v79;
  uint64_t v80;
  double v81;
  double v82;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD);
  uint64_t v93;
  void (*v94)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v95;
  unsigned int (*v96)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  uint64_t v97;
  unsigned int (*v98)(uint64_t, uint64_t, _BYTE *, _OWORD *);
  uint64_t v99;
  double v100;
  double v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v113;
  void (*v114)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v115;
  void (*v116)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v117;
  void (*v118)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v119;
  void (*v120)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v121;
  void (*v122)(uint64_t, __CFString *, __CFString *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, __CFString *, __CFString *, uint64_t);
  char v127;
  char v128;
  char v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  _OWORD v141[2];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  _OWORD v146[2];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  _OWORD v151[2];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  double v155;
  _BYTE v156[64];
  _BYTE v157[112];
  _BYTE v158[32];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 40));
  if (!FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 32), CFSTR("useAdaptiveBayesianNetworkPrediction"))|| (*((_QWORD *)a3 + 21) & 0xFLL) == 1)
  {
    v9 = *((_QWORD *)a3 + 21);
    if (*(_BYTE *)(DerivedStorage + 68))
      v10 = 1;
    else
      v10 = (*((_QWORD *)a3 + 21) & 0xFLL) == 2;
    if (!v10)
    {
      v23 = a3[11];
      *(_OWORD *)&v157[96] = a3[10];
      *(_OWORD *)v158 = v23;
      v24 = a3[13];
      *(_OWORD *)&v158[16] = a3[12];
      v159 = v24;
      v25 = a3[7];
      *(_OWORD *)&v157[32] = a3[6];
      *(_OWORD *)&v157[48] = v25;
      v26 = a3[9];
      *(_OWORD *)&v157[64] = a3[8];
      *(_OWORD *)&v157[80] = v26;
      v27 = a3[3];
      *(_OWORD *)&v156[32] = a3[2];
      *(_OWORD *)&v156[48] = v27;
      v28 = a3[5];
      *(_OWORD *)v157 = a3[4];
      *(_OWORD *)&v157[16] = v28;
      v29 = a3[1];
      *(_OWORD *)v156 = *a3;
      *(_OWORD *)&v156[16] = v29;
      HeuristicPrediction = fnpa_makeHeuristicPrediction(a1, a2, (__int128 *)v156, a4);
LABEL_12:
      v31 = HeuristicPrediction;
      goto LABEL_136;
    }
    v11 = a3[9];
    v171 = a3[8];
    v172 = v11;
    v173 = *((_QWORD *)a3 + 20);
    v12 = a3[5];
    v167 = a3[4];
    v168 = v12;
    v13 = a3[7];
    v169 = a3[6];
    v170 = v13;
    v14 = a3[1];
    v163 = *a3;
    v164 = v14;
    v15 = a3[3];
    v165 = a3[2];
    v166 = v15;
    v16 = a3[12];
    v160 = a3[11];
    v161 = v16;
    v162 = a3[13];
    v155 = 0.0;
    v153 = 0u;
    v154 = 0u;
    v152 = 0u;
    memset(v151, 0, sizeof(v151));
    v150 = 0;
    v148 = 0u;
    v149 = 0u;
    v147 = 0u;
    memset(v146, 0, sizeof(v146));
    v145 = 0;
    v143 = 0u;
    v144 = 0u;
    v142 = 0u;
    memset(v141, 0, sizeof(v141));
    v17 = CMBaseObjectGetDerivedStorage();
    if ((~(_DWORD)v9 & 0xC) == 0)
    {
      HeuristicPrediction = FigSignalErrorAt();
      goto LABEL_12;
    }
    v18 = v17;
    if ((v9 & 4) != 0)
    {
      v50 = *(_QWORD *)(v17 + 16);
      v51 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
      if (v51)
      {
        *(_OWORD *)&v157[64] = v171;
        *(_OWORD *)&v157[80] = v172;
        *(_OWORD *)v157 = v167;
        *(_OWORD *)&v157[16] = v168;
        *(_OWORD *)&v157[32] = v169;
        *(_OWORD *)&v157[48] = v170;
        *(_OWORD *)v156 = v163;
        *(_OWORD *)&v156[16] = v164;
        *(_OWORD *)&v156[32] = v165;
        *(_OWORD *)&v156[48] = v166;
        *(_QWORD *)&v157[96] = v173;
        *(_QWORD *)&v157[104] = v9;
        *(_OWORD *)v158 = v160;
        *(_OWORD *)&v158[16] = v161;
        v159 = v162;
        v19 = v51(v50, a2, v156, v146);
        v22 = (double)*(uint64_t *)&v146[0];
      }
      else
      {
        v19 = -12782;
        v22 = 0.0;
      }
      v20 = 0;
      v71 = v19 + 17736;
    }
    else
    {
      if ((v9 & 8) == 0)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0.0;
        goto LABEL_49;
      }
      v58 = *(_QWORD *)(v17 + 8);
      v59 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 8);
      if (v59)
      {
        *(_OWORD *)&v157[64] = v171;
        *(_OWORD *)&v157[80] = v172;
        *(_OWORD *)v157 = v167;
        *(_OWORD *)&v157[16] = v168;
        *(_OWORD *)&v157[32] = v169;
        *(_OWORD *)&v157[48] = v170;
        *(_OWORD *)v156 = v163;
        *(_OWORD *)&v156[16] = v164;
        *(_OWORD *)&v156[32] = v165;
        *(_OWORD *)&v156[48] = v166;
        *(_QWORD *)&v157[96] = v173;
        *(_QWORD *)&v157[104] = v9;
        *(_OWORD *)v158 = v160;
        *(_OWORD *)&v158[16] = v161;
        v159 = v162;
        v20 = v59(v58, a2, v156, v151);
        v22 = (double)*(uint64_t *)&v151[0];
      }
      else
      {
        v20 = -12782;
        v22 = 0.0;
      }
      v19 = 0;
      v71 = v20 + 17736;
    }
    v21 = v71 < 0xFFFFFFFE;
LABEL_49:
    v72 = 0.0;
    v137 = DerivedStorage;
    v139 = a2;
    v135 = v19;
    v133 = v20;
    if ((v9 & 2) != 0)
    {
      v74 = *(_QWORD *)(v18 + 24);
      if (v74)
      {
        v75 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
        if (v75)
        {
          *(_OWORD *)&v157[64] = v171;
          *(_OWORD *)&v157[80] = v172;
          *(_OWORD *)v157 = v167;
          *(_OWORD *)&v157[16] = v168;
          *(_OWORD *)&v157[32] = v169;
          *(_OWORD *)&v157[48] = v170;
          *(_OWORD *)v156 = v163;
          *(_OWORD *)&v156[16] = v164;
          *(_OWORD *)&v156[32] = v165;
          *(_OWORD *)&v156[48] = v166;
          *(_QWORD *)&v157[96] = v173;
          *(_QWORD *)&v157[104] = v9;
          *(_OWORD *)v158 = v160;
          *(_OWORD *)&v158[16] = v161;
          v159 = v162;
          v31 = v75(v74, a2, v156, v141);
          v72 = (double)*(uint64_t *)&v141[0];
        }
        else
        {
          v31 = 4294954514;
        }
        v73 = v31 == 0;
      }
      else
      {
        v73 = 0;
        v31 = 4294948281;
      }
    }
    else
    {
      v31 = 0;
      v73 = 0;
    }
    v76 = (~v9 & 6) != 0 || v21;
    if ((v76 & 1) == 0)
    {
      FigNetworkHistoryGetGlobal();
      *(_QWORD *)(v18 + 56) = FigNetworkHistoryGetFirstActiveTimestamp();
      *(_DWORD *)(v18 + 64) = 1;
    }
    v77 = &v148;
    if (v73 && v21)
    {
      v79 = v139 - *(_QWORD *)(v18 + 56);
      v80 = CMBaseObjectGetDerivedStorage();
      v81 = 1.0 / (exp(((double)v79 + (double)*(uint64_t *)(v80 + 48) * -0.5) / -1000000000.0) + 1.0);
      v82 = 1.0 - v81;
      if ((v9 & 2) != 0)
      {
LABEL_67:
        v140 = *(_OWORD *)((char *)v141 + 8);
        *(_OWORD *)v156 = v143;
        *(_OWORD *)&v156[16] = v144;
        *(_QWORD *)&v156[32] = v145;
        if ((v9 & 4) != 0)
          v83 = v147;
        else
          v83 = v152;
        v84 = *((double *)&v147 + 1);
        if ((v9 & 4) != 0)
          v85 = *((double *)&v147 + 1);
        else
          v85 = *((double *)&v152 + 1);
        v86 = 0x3FECCCCCCCCCCCCDLL;
        if ((v9 & 1) == 0 || (_DWORD)v31 != -19015)
        {
LABEL_90:
          v88 = (uint64_t)(v72 * (v82 * (1.0 / (v82 + v81))) + v81 * (1.0 / (v82 + v81)) * v22);
          *(_QWORD *)a4 = v88;
          *(_OWORD *)(a4 + 8) = v140;
          *(_QWORD *)(a4 + 24) = v86;
          *(_QWORD *)(a4 + 32) = v83;
          *(double *)(a4 + 40) = v85;
          v89 = *(_OWORD *)&v156[16];
          *(_OWORD *)(a4 + 48) = *(_OWORD *)v156;
          *(_OWORD *)(a4 + 64) = v89;
          *(_QWORD *)(a4 + 80) = *(_QWORD *)&v156[32];
          if (v73)
          {
            v90 = *(int *)(v18 + 64);
            if ((_DWORD)v90)
            {
              v91 = *(_QWORD *)(v18 + 80);
              if (v91)
              {
                v92 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                  + 56);
                if (v92)
                  v92(v91, CFSTR("bandwidthPredictionStats"), CFSTR("MLUsed"), v90, 0);
              }
            }
            if (v139 - *(_QWORD *)(v18 + 56) < *(_QWORD *)(v18 + 48))
            {
              v93 = *(_QWORD *)(v18 + 80);
              if (v93)
              {
                v94 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                          + 40);
                if (v94)
                  v94(v93, CFSTR("bandwidthPredictionStats"), CFSTR("MLMixedValue"), v88);
              }
            }
            goto LABEL_136;
          }
LABEL_111:
          DerivedStorage = v137;
          goto LABEL_136;
        }
        if ((v9 & 4) == 0)
        {
          v140 = *(_OWORD *)((char *)v151 + 8);
          v81 = 1.0;
          v82 = 0.0;
          v86 = *((_QWORD *)&v151[1] + 1);
          v31 = v133;
          v84 = *((double *)&v152 + 1);
          v83 = v152;
LABEL_85:
          v77 = &v153;
LABEL_89:
          v87 = v77[1];
          *(_OWORD *)v156 = *v77;
          *(_OWORD *)&v156[16] = v87;
          *(_QWORD *)&v156[32] = *((_QWORD *)v77 + 4);
          v85 = v84;
          goto LABEL_90;
        }
        v140 = *(_OWORD *)((char *)v146 + 8);
        v81 = 1.0;
        v82 = 0.0;
        v86 = *((_QWORD *)&v146[1] + 1);
        v83 = v147;
        goto LABEL_88;
      }
    }
    else
    {
      v81 = 1.0;
      if (v73)
        v82 = 1.0;
      else
        v82 = 0.0;
      if (v73)
        v81 = 0.0;
      if ((v9 & 2) != 0)
        goto LABEL_67;
    }
    if ((v9 & 4) == 0)
    {
      v140 = *(_OWORD *)((char *)v151 + 8);
      v86 = *((_QWORD *)&v151[1] + 1);
      v84 = *((double *)&v152 + 1);
      v83 = v152;
      v31 = v133;
      goto LABEL_85;
    }
    v140 = *(_OWORD *)((char *)v146 + 8);
    v86 = *((_QWORD *)&v146[1] + 1);
    v84 = *((double *)&v147 + 1);
    v83 = v147;
LABEL_88:
    v31 = v135;
    goto LABEL_89;
  }
  v132 = a4;
  v137 = DerivedStorage;
  v138 = a2;
  v32 = *(__int128 *)((char *)a3 + 24);
  v141[0] = *(__int128 *)((char *)a3 + 8);
  v141[1] = v32;
  v142 = *(__int128 *)((char *)a3 + 40);
  v33 = *((_QWORD *)a3 + 8);
  *(_QWORD *)&v143 = *((_QWORD *)a3 + 7);
  v34 = *(__int128 *)((char *)a3 + 120);
  v35 = *(__int128 *)((char *)a3 + 152);
  v167 = *(__int128 *)((char *)a3 + 136);
  v168 = v35;
  *(_QWORD *)&v169 = *((_QWORD *)a3 + 21);
  v36 = *(__int128 *)((char *)a3 + 88);
  v163 = *(__int128 *)((char *)a3 + 72);
  v164 = v36;
  v165 = *(__int128 *)((char *)a3 + 104);
  v166 = v34;
  v37 = *((_BYTE *)a3 + 176);
  v38 = *(_QWORD *)((char *)a3 + 177);
  v39 = *((_BYTE *)a3 + 185);
  v129 = *((_BYTE *)a3 + 186);
  v40 = *((_QWORD *)a3 + 25);
  *(_QWORD *)((char *)&v160 + 5) = *((_QWORD *)a3 + 24);
  *(_QWORD *)&v160 = *(_QWORD *)((char *)a3 + 187);
  v42 = *((_QWORD *)a3 + 26);
  v41 = *((_QWORD *)a3 + 27);
  v136 = a1;
  v155 = 0.0;
  v153 = 0u;
  v154 = 0u;
  v152 = 0u;
  memset(v151, 0, sizeof(v151));
  v150 = 0;
  v148 = 0u;
  v149 = 0u;
  v147 = 0u;
  memset(v146, 0, sizeof(v146));
  v43 = CMBaseObjectGetDerivedStorage();
  v44 = *(_QWORD *)(v43 + 8);
  v45 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  v134 = v40;
  v131 = v38;
  v128 = v37;
  if (v45)
  {
    *(_OWORD *)&v156[8] = v141[0];
    *(_OWORD *)&v156[24] = v141[1];
    *(_OWORD *)&v156[40] = v142;
    *(_OWORD *)&v157[56] = v166;
    *(_OWORD *)&v157[72] = v167;
    *(_OWORD *)&v157[88] = v168;
    *(_OWORD *)&v157[8] = v163;
    *(_OWORD *)&v157[24] = v164;
    *(_QWORD *)v156 = 7;
    *(_QWORD *)&v156[56] = v143;
    *(_QWORD *)v157 = v33;
    v46 = v39;
    v47 = v33;
    *(_QWORD *)&v157[104] = v169;
    *(_OWORD *)&v157[40] = v165;
    v158[0] = v37;
    *(_QWORD *)&v158[1] = v38;
    v158[9] = v46;
    v158[10] = v129;
    *(_QWORD *)&v158[16] = *(_QWORD *)((char *)&v160 + 5);
    *(_QWORD *)&v158[11] = v160;
    *(_QWORD *)&v158[24] = v40;
    *(_QWORD *)&v159 = v42;
    *((_QWORD *)&v159 + 1) = v41;
    v48 = v138;
    v49 = v45(v44, v138, v156, v151);
  }
  else
  {
    v47 = v33;
    v49 = -12782;
    v48 = v138;
  }
  v52 = v49 + 17736;
  v130 = (v49 + 17736) < 0xFFFFFFFE;
  FirstActiveTimestamp = FigNetworkHistoryGetFirstActiveTimestamp();
  v54 = *(_DWORD *)(v43 + 64);
  if (v54 == 2 || v54 == 3 || v54 == 4)
  {
    v55 = v41;
    v56 = (_QWORD *)v43;
    v57 = *(_QWORD *)(v43 + 56);
    *(_QWORD *)(v43 + 88) = v57;
  }
  else
  {
    v55 = v41;
    v56 = (_QWORD *)v43;
    v57 = *(_QWORD *)(v43 + 88);
  }
  if (FirstActiveTimestamp <= v57)
    v60 = v57;
  else
    v60 = FirstActiveTimestamp;
  v61 = v48 - v60;
  if (v48 - v60 < v47 && v52 <= 0xFFFFFFFD)
  {
    v62 = v56[1];
    v63 = *(unsigned int (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
    v64 = v47;
    v65 = v132;
    if (!v63)
      goto LABEL_110;
    *(_OWORD *)&v156[8] = v141[0];
    *(_OWORD *)&v156[24] = v141[1];
    *(_OWORD *)&v156[40] = v142;
    *(_OWORD *)&v157[56] = v166;
    *(_OWORD *)&v157[72] = v167;
    *(_OWORD *)&v157[88] = v168;
    *(_OWORD *)&v157[8] = v163;
    *(_OWORD *)&v157[24] = v164;
    *(_QWORD *)v156 = 7;
    *(_QWORD *)&v156[56] = v143;
    *(_QWORD *)v157 = v64;
    *(_QWORD *)&v157[104] = v169;
    *(_OWORD *)&v157[40] = v165;
    v158[0] = v128;
    *(_QWORD *)&v158[1] = v131;
    v158[9] = 0;
    v158[10] = v130;
    *(_QWORD *)&v158[11] = v160;
    *(_QWORD *)&v158[16] = *(_QWORD *)((char *)&v160 + 5);
    *(_QWORD *)&v158[24] = v134;
    *(_QWORD *)&v159 = 0;
    *((_QWORD *)&v159 + 1) = v55;
    if (v63(v62, v48, v156, v151))
      goto LABEL_110;
    v127 = 0;
    v60 = 0;
    v66 = (unint64_t)(((((5 * v61) >> 8) & 0x7FFFFFFFFFFFFFLL) * (unsigned __int128)0x44B82FA09B5A53uLL) >> 64) >> 11;
    goto LABEL_38;
  }
  if (v61 <= 0xDF84757FFLL && v52 <= 0xFFFFFFFD)
  {
    v67 = v56[1];
    v68 = *(unsigned int (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
    v64 = v47;
    v65 = v132;
    if (!v68)
      goto LABEL_110;
    *(_OWORD *)&v156[8] = v141[0];
    *(_OWORD *)&v156[24] = v141[1];
    *(_OWORD *)&v156[40] = v142;
    *(_OWORD *)&v157[56] = v166;
    *(_OWORD *)&v157[72] = v167;
    *(_OWORD *)&v157[88] = v168;
    *(_OWORD *)&v157[8] = v163;
    *(_OWORD *)&v157[24] = v164;
    *(_QWORD *)v156 = 7;
    *(_QWORD *)&v156[56] = v143;
    *(_QWORD *)v157 = v64;
    *(_QWORD *)&v157[104] = v169;
    *(_OWORD *)&v157[40] = v165;
    v158[0] = v128;
    *(_QWORD *)&v158[1] = v131;
    v158[9] = 0;
    v158[10] = v130;
    *(_QWORD *)&v158[11] = v160;
    *(_QWORD *)&v158[16] = *(_QWORD *)((char *)&v160 + 5);
    *(_QWORD *)&v158[24] = v134;
    *(_QWORD *)&v159 = v60;
    *((_QWORD *)&v159 + 1) = v55;
    if (v68(v67, v48, v156, v151))
      goto LABEL_110;
    v127 = 0;
    v66 = v61 / 0x5F5E100;
LABEL_38:
    v69 = (double)v66;
    goto LABEL_103;
  }
  if (v52 > 0xFFFFFFFD)
  {
    v127 = 0;
    v69 = 0.0;
    v64 = v47;
    v65 = v132;
  }
  else
  {
    v70 = v56[12];
    if (v70 && (unint64_t)(v48 - v70) < 0x45D964B801)
    {
      v127 = 0;
    }
    else
    {
      v56[12] = v48;
      v127 = 1;
    }
    v64 = v47;
    v95 = v56[1];
    v96 = *(unsigned int (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
    v65 = v132;
    if (!v96)
      goto LABEL_110;
    *(_OWORD *)&v156[8] = v141[0];
    *(_OWORD *)&v156[24] = v141[1];
    *(_OWORD *)&v156[40] = v142;
    *(_OWORD *)&v157[56] = v166;
    *(_OWORD *)&v157[72] = v167;
    *(_OWORD *)&v157[88] = v168;
    *(_OWORD *)&v157[8] = v163;
    *(_OWORD *)&v157[24] = v164;
    *(_QWORD *)v156 = 7;
    *(_QWORD *)&v156[56] = v143;
    *(_QWORD *)v157 = v64;
    *(_QWORD *)&v157[104] = v169;
    *(_OWORD *)&v157[40] = v165;
    v158[0] = v128;
    *(_QWORD *)&v158[1] = v131;
    v158[9] = v127;
    v158[10] = v130;
    *(_QWORD *)&v158[16] = *(_QWORD *)((char *)&v160 + 5);
    *(_QWORD *)&v158[11] = v160;
    *(_QWORD *)&v158[24] = v134;
    *(_QWORD *)&v159 = v60;
    *((_QWORD *)&v159 + 1) = v55;
    if (v96(v95, v48, v156, v151))
      goto LABEL_110;
    v69 = (double)((unint64_t)(((((5 * v61) >> 8) & 0x7FFFFFFFFFFFFFLL) * (unsigned __int128)0x44B82FA09B5A53uLL) >> 64) >> 11);
    v134 = v154;
  }
LABEL_103:
  v97 = v56[3];
  v98 = *(unsigned int (**)(uint64_t, uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
  if (!v98)
    goto LABEL_110;
  *(_OWORD *)&v156[8] = v141[0];
  *(_OWORD *)&v156[24] = v141[1];
  *(_OWORD *)&v156[40] = v142;
  *(_OWORD *)&v157[56] = v166;
  *(_OWORD *)&v157[72] = v167;
  *(_OWORD *)&v157[88] = v168;
  *(_OWORD *)&v157[8] = v163;
  *(_OWORD *)&v157[24] = v164;
  *(_QWORD *)v156 = 7;
  *(_QWORD *)&v156[56] = v143;
  *(_QWORD *)v157 = v64;
  *(_QWORD *)&v157[104] = v169;
  *(_OWORD *)&v157[40] = v165;
  v158[0] = 1;
  *(_QWORD *)&v158[1] = v131;
  v158[9] = v127;
  v158[10] = v130;
  *(_QWORD *)&v158[11] = v160;
  *(_QWORD *)&v158[16] = *(_QWORD *)((char *)&v160 + 5);
  *(_QWORD *)&v158[24] = v134;
  *(_QWORD *)&v159 = v60;
  *((_QWORD *)&v159 + 1) = v55;
  if (v98(v97, v48, v156, v146))
  {
LABEL_110:
    v102 = a3[11];
    *(_OWORD *)&v157[96] = a3[10];
    *(_OWORD *)v158 = v102;
    v103 = a3[13];
    *(_OWORD *)&v158[16] = a3[12];
    v159 = v103;
    v104 = a3[7];
    *(_OWORD *)&v157[32] = a3[6];
    *(_OWORD *)&v157[48] = v104;
    v105 = a3[9];
    *(_OWORD *)&v157[64] = a3[8];
    *(_OWORD *)&v157[80] = v105;
    v106 = a3[3];
    *(_OWORD *)&v156[32] = a3[2];
    *(_OWORD *)&v156[48] = v106;
    v107 = a3[5];
    *(_OWORD *)v157 = a3[4];
    *(_OWORD *)&v157[16] = v107;
    v108 = a3[1];
    *(_OWORD *)v156 = *a3;
    *(_OWORD *)&v156[16] = v108;
    v31 = fnpa_makeHeuristicPrediction(v136, v48, (__int128 *)v156, v65);
    goto LABEL_111;
  }
  v99 = *(_QWORD *)&v146[0];
  if (!*(_QWORD *)&v146[0] || *((double *)v146 + 1) == 2.22044605e-16)
  {
    v101 = 0.0;
    v100 = v155;
  }
  else
  {
    v100 = v155;
    if (*((double *)v146 + 1) != 1.0 || v155 == 0.0)
      v101 = 1.0 / *((double *)v146 + 1);
    else
      v101 = v155;
  }
  DerivedStorage = v137;
  v109 = *((_QWORD *)&v154 + 1);
  v110 = (uint64_t)((v101 * (double)*(uint64_t *)&v146[0] + v69 * v100 * (double)*((uint64_t *)&v154 + 1))
                 / (v101 + v69 * v100));
  *(_QWORD *)v65 = v110;
  *(_OWORD *)(v65 + 8) = 0u;
  *(_OWORD *)(v65 + 24) = 0u;
  *(_OWORD *)(v65 + 40) = 0u;
  *(_OWORD *)(v65 + 56) = 0u;
  *(_OWORD *)(v65 + 72) = 0u;
  v111 = v56[10];
  if (v111)
  {
    v112 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 40);
    if (v112)
      v112(v111, CFSTR("bandwidthPredictionStats"), CFSTR("BBWPn"), (uint64_t)v69);
    v113 = v56[10];
    if (v113)
    {
      v114 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 16)
                                                                                 + 40);
      if (v114)
        v114(v113, CFSTR("bandwidthPredictionStats"), CFSTR("BBWPxbar"), v109);
      v115 = v56[10];
      if (v115)
      {
        v116 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 40);
        if (v116)
          v116(v115, CFSTR("bandwidthPredictionStats"), CFSTR("BBWPtao"), (uint64_t)v100);
        v117 = v56[10];
        if (v117)
        {
          v118 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 40);
          if (v118)
            v118(v117, CFSTR("bandwidthPredictionStats"), CFSTR("BBWPmu0"), v99);
          v119 = v56[10];
          if (v119)
          {
            v120 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 40);
            if (v120)
              v120(v119, CFSTR("bandwidthPredictionStats"), CFSTR("BBWPtao0"), (uint64_t)v101);
            v121 = v56[10];
            if (v121)
            {
              v122 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 40);
              if (v122)
                v122(v121, CFSTR("bandwidthPredictionStats"), CFSTR("BBWPfinalPred"), v110);
              v123 = v56[10];
              if (v123)
              {
                v124 = v154;
                v125 = *(void (**)(uint64_t, __CFString *, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                           + 40);
                if (v125)
                  v125(v123, CFSTR("bandwidthPredictionStats"), CFSTR("BBWPOptKS"), v124);
              }
            }
          }
        }
      }
    }
  }
  v31 = 0;
LABEL_136:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 40));
  return v31;
}

uint64_t fnpa_makeHeuristicPrediction(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, _OWORD *, uint64_t);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[14];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v8 = 16;
  if ((*((_QWORD *)a3 + 21) & 4) == 0)
    v8 = 8;
  v9 = *(_QWORD *)(DerivedStorage + v8);
  v22 = a3[10];
  v23 = a3[11];
  v24 = a3[12];
  v25 = a3[13];
  v18 = a3[6];
  v19 = a3[7];
  v20 = a3[8];
  v21 = a3[9];
  v14 = a3[2];
  v15 = a3[3];
  v16 = a3[4];
  v17 = a3[5];
  v12 = *a3;
  v13 = a3[1];
  v10 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v10)
    return 4294954514;
  v26[10] = v22;
  v26[11] = v23;
  v26[12] = v24;
  v26[13] = v25;
  v26[6] = v18;
  v26[7] = v19;
  v26[8] = v20;
  v26[9] = v21;
  v26[2] = v14;
  v26[3] = v15;
  v26[4] = v16;
  v26[5] = v17;
  v26[0] = v12;
  v26[1] = v13;
  return v10(v9, a2, v26, a4);
}

uint64_t FigCSSTokenGetTypeID()
{
  MEMORY[0x19402F294](&FigCSSTokenGetTypeID_sRegisterFigCSSTokenOnce, figCSSTokenRegisterFigCSSToken);
  return sFigCSSTokenID;
}

uint64_t figCSSTokenRegisterFigCSSToken()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCSSTokenID = result;
  return result;
}

uint64_t FigCSSTokenGetTokenType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = *(_DWORD *)(a1 + 16);
  return 0;
}

uint64_t FigCSSTokenCopyAttributes(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;

  if (!a2)
    return FigSignalErrorAt();
  v3 = *(CFTypeRef *)(a1 + 32);
  if (v3)
    v3 = CFRetain(v3);
  *a2 = v3;
  return 0;
}

uint64_t FigCSSBaseTokenCreate(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v7;
  const void *v8;

  if (!a4)
    return FigSignalErrorAt();
  MEMORY[0x19402F294](&FigCSSTokenGetTypeID_sRegisterFigCSSTokenOnce, figCSSTokenRegisterFigCSSToken);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = Instance;
  *(_DWORD *)(Instance + 16) = a2;
  *(_QWORD *)(Instance + 32) = FigCFDictionaryCreateMutableCopy();
  v8 = FigCSSTokenMapTokenTypeToName(a2);
  if (v8)
    v8 = CFRetain(v8);
  *(_QWORD *)(v7 + 24) = v8;
  *a4 = v7;
  return 0;
}

_QWORD *figCSSToken_Init(_QWORD *result)
{
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  return result;
}

void figCSSToken_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  *(_DWORD *)(a1 + 16) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

CFStringRef figCSSToken_CopyFormattingDesc(uint64_t a1)
{
  const void *v2;
  const __CFString *v3;
  CFStringRef v4;

  if (FigCFDictionaryGetCount() <= 0)
  {
    v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
  }
  else
  {
    v2 = (const void *)FigCFCopyCompactDescription();
    v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
    if (v2)
    {
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSToken: <%p> %@ %@ attributesDict = <%p>"), a1, v3, v2, *(_QWORD *)(a1 + 32));
      CFRelease(v2);
      return v4;
    }
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSToken: <%p> %@ attributesDict = <%p>"), a1, v3, *(_QWORD *)(a1 + 32));
}

CFStringRef figCSSToken_CopyDebugDesc(uint64_t a1)
{
  const void *v2;
  const __CFString *v3;
  CFStringRef v4;

  if (FigCFDictionaryGetCount() <= 0)
  {
    v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
  }
  else
  {
    v2 = (const void *)FigCFCopyCompactDescription();
    v3 = FigCSSTokenMapTokenTypeToName(*(_DWORD *)(a1 + 16));
    if (v2)
    {
      v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSToken: <%p> %@ %@ attributesDict = <%p>"), a1, v3, v2, *(_QWORD *)(a1 + 32));
      CFRelease(v2);
      return v4;
    }
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigCSSToken: <%p> %@ attributesDict = <%p>"), a1, v3, *(_QWORD *)(a1 + 32));
}

uint64_t FigReportingAgentOfflineAirPlayGetTypeID()
{
  if (FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce != -1)
    dispatch_once_f(&FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce, 0, (dispatch_function_t)registerFigReportingAgentOfflineAirPlayType);
  return sFigReportingAgentOfflineAirPlayID;
}

uint64_t registerFigReportingAgentOfflineAirPlayType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigReportingAgentOfflineAirPlayID = result;
  return result;
}

uint64_t fraoa_CreateOfflineAirPlayReportingPayload(uint64_t a1, __CFDictionary **a2)
{
  const __CFAllocator *v3;
  uint64_t MutableCopy;
  __CFDictionary *v5;
  uint64_t i;
  __CFString *v7;
  CFStringRef v8;
  CFStringRef v9;
  uint64_t v10;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
    return FigSignalErrorAt();
  v5 = (__CFDictionary *)MutableCopy;
  if (a2)
  {
    for (i = 0; i != 23; ++i)
    {
      v7 = FigReportingAgentOffilineAirplay_RTCJSMetadataKeys[i];
      if (FigCFDictionaryGetValueIfPresent())
      {
        v8 = CFStringCreateWithFormat(v3, 0, CFSTR("%@%@"), v7, CFSTR("_OA"));
        if (!v8)
          goto LABEL_10;
        v9 = v8;
        CFDictionaryRemoveValue(v5, v7);
        FigCFDictionarySetValue();
        CFRelease(v9);
      }
    }
    v10 = 0;
    *a2 = v5;
  }
  else
  {
LABEL_10:
    v10 = FigSignalErrorAt();
    CFRelease(v5);
  }
  return v10;
}

uint64_t FigReportingAgentOfflineAirPlayIssueReportingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t OfflineAirPlayReportingPayload;
  CFTypeRef v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  if (!FigCFDictionaryGetInt32IfPresent() || !FigCFDictionaryGetInt32IfPresent())
    return FigSignalErrorAt();
  OfflineAirPlayReportingPayload = fraoa_CreateOfflineAirPlayReportingPayload(a2, (__CFDictionary **)&cf);
  v5 = cf;
  if ((_DWORD)OfflineAirPlayReportingPayload)
  {
    v6 = OfflineAirPlayReportingPayload;
    if (!cf)
      return v6;
    goto LABEL_5;
  }
  v6 = FigRTCReportingSendMsgWithErrors(*(_QWORD *)(a1 + 16), 0, 0, (uint64_t)cf);
  v5 = cf;
  if (cf)
LABEL_5:
    CFRelease(v5);
  return v6;
}

uint64_t FigReportingAgentOfflineAirPlayCreate(_QWORD *a1)
{
  uint32_t v2;
  const __CFAllocator *v3;
  const __CFUUID *v4;
  const __CFUUID *v5;
  CFStringRef v6;
  CFStringRef v7;
  uint64_t Instance;
  const void *v9;
  uint64_t v10;

  v2 = arc4random();
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFUUIDCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (!v4)
    FigReportingAgentOfflineAirPlayCreate_cold_1();
  v5 = v4;
  v6 = CFUUIDCreateString(v3, v4);
  if (v6)
  {
    v7 = v6;
    if (!a1)
      goto LABEL_13;
    if (FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce != -1)
      dispatch_once_f(&FigReportingAgentOfflineAirPlayGetTypeID_sRegisterFigReportingAgentOfflineAirPlayTypeOnce, 0, (dispatch_function_t)registerFigReportingAgentOfflineAirPlayType);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v9 = (const void *)Instance;
      v10 = FigRTCReportingCreate(v2, (uint64_t)v7, 5, (uint64_t)CFSTR("OfflineAirPlay"), (uint64_t)CFSTR("com.apple.hlsjs.offline"), 0, 0, 0, 1u, 0, (uint64_t *)(Instance + 16));
      if ((_DWORD)v10)
        CFRelease(v9);
      else
        *a1 = v9;
    }
    else
    {
LABEL_13:
      v10 = FigSignalErrorAt();
    }
    CFRelease(v5);
  }
  else
  {
    v10 = FigSignalErrorAt();
    v7 = (CFStringRef)v5;
  }
  CFRelease(v7);
  return v10;
}

uint64_t FigReportingAgentOfflineAirPlay_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void FigReportingAgentOfflineAirPlay_Finalize(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef FigReportingAgentOfflineAirPlay_CopyFormattingDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigReportingAgentOfflineAirPlayRef %p>"), a1);
}

CFStringRef FigReportingAgentOfflineAirPlay_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<FigReportingAgentOfflineAirPlayRef %p>"), a1);
}

uint64_t FigPlayerResourceArbiterRegisterConsumer(uint64_t a1, uint64_t *a2)
{
  const __CFAllocator *AllocatorForMedia;
  const UInt8 *v5;
  const UInt8 *v6;
  const __CFAllocator *v7;
  const __CFData *v8;
  const void *UInt64;
  __CFDictionary *v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;

  if (a1 && a2)
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    v5 = (const UInt8 *)CFAllocatorAllocate(AllocatorForMedia, 24, 0);
    if (!v5
      || (v6 = v5,
          *(_QWORD *)v5 = 0,
          *((_QWORD *)v5 + 1) = 0,
          *((_QWORD *)v5 + 2) = 0,
          v7 = (const __CFAllocator *)FigGetAllocatorForMedia(),
          (v8 = CFDataCreateWithBytesNoCopy(v7, v6, 24, *(CFAllocatorRef *)(a1 + 16))) == 0))
    {
      v12 = FigSignalErrorAt();
      v8 = 0;
      if ((_DWORD)v12)
        return v12;
    }
    CFDataGetBytePtr(v8);
    MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
    FigGetAllocatorForMedia();
    UInt64 = (const void *)FigCFNumberCreateUInt64();
    if (UInt64)
    {
      v10 = *(__CFDictionary **)(a1 + 40);
      ++*(_QWORD *)(a1 + 32);
      CFDictionarySetValue(v10, UInt64, v8);
      *a2 = FigCFNumberGetUInt64();
      if (dword_1EE2A3600)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
      v12 = 0;
      if (!v8)
        goto LABEL_10;
    }
    else
    {
      v12 = FigSignalErrorAt();
      if (!v8)
      {
LABEL_10:
        if (UInt64)
          CFRelease(UInt64);
        return v12;
      }
    }
    CFRelease(v8);
    goto LABEL_10;
  }
  return FigSignalErrorAt();
}

void FigCFRelease_12(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

uint64_t FigPlayerResourceArbiterUnregisterConsumer(uint64_t a1)
{
  uint64_t UInt64;
  const void *v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  int v5;
  CFStringRef v6;
  NSObject *v7;

  if (!a1)
    return FigSignalErrorAt();
  FigGetAllocatorForMedia();
  UInt64 = FigCFNumberCreateUInt64();
  if (!UInt64)
    return FigSignalErrorAt();
  v3 = (const void *)UInt64;
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  if (dword_1EE2A3600)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v3);
  v5 = fpra_determineAndDistributeBudgetToConsumers(a1);
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  if (v5)
  {
    v6 = CFCopyDescription((CFTypeRef)a1);
    if (dword_1EE2A3600)
    {
      v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v6)
      CFRelease(v6);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  CFRelease(v3);
  return 0;
}

uint64_t fpra_determineAndDistributeBudgetToConsumers(uint64_t a1)
{
  int64_t Count;
  int64_t v3;
  const void **v4;
  uint64_t v5;
  uint64_t i;
  const UInt8 *ConsumerInfoFromConsumerCFNumber;
  uint64_t v8;
  uint64_t context;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  Count = FigCFDictionaryGetCount();
  if (Count < 1)
  {
    v4 = 0;
    goto LABEL_11;
  }
  v3 = Count;
  v4 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v4)
  {
LABEL_11:
    v5 = 0;
    goto LABEL_5;
  }
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v4, 0);
  v5 = 0;
  for (i = 0; i != v3; ++i)
  {
    ConsumerInfoFromConsumerCFNumber = fpra_getConsumerInfoFromConsumerCFNumber(a1, v4[i]);
    v5 += fpra_isActiveConsumer((uint64_t)ConsumerInfoFromConsumerCFNumber);
  }
LABEL_5:
  free(v4);
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  context = a1;
  if (v5 >= 1)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (v8 != -1)
    {
      *(_QWORD *)&v12 = v8 - *(_QWORD *)(a1 + 56) * (v5 - 1);
      *((_QWORD *)&v12 + 1) = v12;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)fpra_firstPassToAllocateAndSumPlayerNeeds, &context);
      if (*((_QWORD *)&v11 + 1))
      {
        fpra_allocateBudgetToConsumerByWeight((uint64_t)&context, *((uint64_t **)&v11 + 1), 1.0);
        *(_QWORD *)&v12 = v12 - *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8);
        *(_QWORD *)&v13 = *((_QWORD *)&v13 + 1);
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)fpra_secondPassAdjustRunningPixels, &context);
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)fpra_allocateBudgetToEachConsumerByWeight, &context);
      }
    }
  }
  return v11;
}

uint64_t FigPlayerResourceArbiterSetSpecifierForConsumer(_QWORD *a1, const void *a2)
{
  const UInt8 *ConsumerInfo;
  const void *v5;
  int v6;
  CFStringRef v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v10;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](a1[3]);
  ConsumerInfo = fpra_getConsumerInfo((uint64_t)a1);
  if (ConsumerInfo)
  {
    v5 = (const void *)*((_QWORD *)ConsumerInfo + 2);
    *((_QWORD *)ConsumerInfo + 2) = a2;
    if (a2)
      CFRetain(a2);
    if (v5)
      CFRelease(v5);
    if (a2)
      FigPlayerResourceArbiterPlayerSpecifierMarkAsImmutable((uint64_t)a2);
    v6 = fpra_determineAndDistributeBudgetToConsumers((uint64_t)a1);
    MEMORY[0x19402EF04](a1[3]);
    if (v6)
    {
      v7 = CFCopyDescription(a1);
      if (dword_1EE2A3600)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (v7)
        CFRelease(v7);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    return 0;
  }
  else
  {
    v10 = FigSignalErrorAt();
    MEMORY[0x19402EF04](a1[3]);
    return v10;
  }
}

const UInt8 *fpra_getConsumerInfo(uint64_t a1)
{
  const UInt8 *result;
  const UInt8 *v3;
  const UInt8 *ConsumerInfoFromConsumerCFNumber;

  FigGetAllocatorForMedia();
  result = (const UInt8 *)FigCFNumberCreateUInt64();
  if (result)
  {
    v3 = result;
    ConsumerInfoFromConsumerCFNumber = fpra_getConsumerInfoFromConsumerCFNumber(a1, result);
    CFRelease(v3);
    return ConsumerInfoFromConsumerCFNumber;
  }
  return result;
}

uint64_t FigPlayerResourceArbiterGetBudgetForConsumer(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const UInt8 *ConsumerInfo;
  uint64_t v6;

  if (!a1 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 24));
  ConsumerInfo = fpra_getConsumerInfo(a1);
  if (ConsumerInfo)
  {
    v6 = 0;
    *a3 = *((_QWORD *)ConsumerInfo + 1);
  }
  else
  {
    v6 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 24));
  return v6;
}

uint64_t FigPlayerResourceArbiterGetGlobalSingleton(_QWORD *a1)
{
  uint64_t result;

  if (a1)
  {
    if (FigPlayerResourceArbiterGetGlobalSingleton_sFigPlayerResourceAribtratorSetupOnce != -1)
      dispatch_once_f(&FigPlayerResourceArbiterGetGlobalSingleton_sFigPlayerResourceAribtratorSetupOnce, &FigPlayerResourceArbiterGetGlobalSingleton_globalResourceArbiterRec, (dispatch_function_t)fpra_getGlobalSingleton);
    *a1 = FigPlayerResourceArbiterGetGlobalSingleton_globalResourceArbiterRec;
    return dword_1EE2A2690;
  }
  else
  {
    result = FigSignalErrorAt();
    dword_1EE2A2690 = result;
  }
  return result;
}

uint64_t fpra_getGlobalSingleton(uint64_t a1)
{
  uint64_t CFPreferenceLongNumberWithDefault;
  uint64_t v3;
  uint64_t result;

  CFPreferenceLongNumberWithDefault = FigGetCFPreferenceLongNumberWithDefault();
  v3 = FigGetCFPreferenceLongNumberWithDefault();
  result = FigPlayerResourceArbiterCreateForTestOnly(CFPreferenceLongNumberWithDefault, v3, (_QWORD *)a1);
  *(_DWORD *)(a1 + 8) = result;
  return result;
}

uint64_t FigPlayerResourceArbiterCreateForTestOnly(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t Instance;
  _QWORD *v7;
  uint64_t v8;
  const __CFAllocator *AllocatorForMedia;
  CFAllocatorRef v10;
  const __CFAllocator *v11;
  CFMutableDictionaryRef Mutable;
  CFStringRef v13;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v15;
  CFAllocatorContext context;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  context.version = 0;
  context.info = (void *)FigGetAllocatorForMedia();
  context.retain = (CFAllocatorRetainCallBack)FigCFRetain_0;
  context.release = (CFAllocatorReleaseCallBack)FigCFRelease_12;
  memset(&context.copyDescription, 0, 24);
  context.deallocate = (CFAllocatorDeallocateCallBack)consumerInfoDeallocateCallback;
  context.preferredSize = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
    return FigSignalErrorAt();
  FigGetAllocatorForMedia();
  MEMORY[0x19402F294](&FigPlayerResourceArbiterGetTypeID_sFigPlayerResourceArbiterRegisterOnce, FigPlayerResourceArbiter_initOnce_0);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v7 = (_QWORD *)Instance;
  v8 = FigSimpleMutexCreate();
  v7[3] = v8;
  if (v8
    && (v7[4] = 0,
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v10 = CFAllocatorCreate(AllocatorForMedia, &context),
        (v7[2] = v10) != 0)
    && (v11 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]),
        (v7[5] = Mutable) != 0))
  {
    v7[6] = a1;
    v7[7] = a2;
    v13 = CFCopyDescription(v7);
    if (dword_1EE2A3600)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *a3 = v7;
    if (v13)
      CFRelease(v13);
    return 0;
  }
  else
  {
    v15 = FigSignalErrorAt();
    CFRelease(v7);
  }
  return v15;
}

unint64_t fpra_firstPassToAllocateAndSumPlayerNeeds(int a1, CFDataRef theData, uint64_t a3)
{
  UInt8 *BytePtr;
  unint64_t result;
  unint64_t v6;
  double ResolutionFloor;
  double v8;
  unint64_t v9;

  BytePtr = (UInt8 *)CFDataGetBytePtr(theData);
  result = fpra_isActiveConsumer((uint64_t)BytePtr);
  if ((_DWORD)result)
  {
    v6 = fpra_consumerInfoMaxPixelsNeeded((uint64_t)BytePtr);
    ResolutionFloor = FigPlayerResourceArbiterPlayerSpecifierGetResolutionFloor(*((_QWORD *)BytePtr + 2));
    v9 = (unint64_t)(ResolutionFloor * v8);
    *(_QWORD *)BytePtr = *((_QWORD *)BytePtr + 1);
    *(int64x2_t *)(a3 + 40) = vaddq_s64(*(int64x2_t *)(a3 + 40), vdupq_n_s64(v6));
    *((_QWORD *)BytePtr + 1) = v9;
    *(_QWORD *)(a3 + 32) -= v9;
    result = *(_QWORD *)(a3 + 16);
    if (!result || (result = fpra_consumerInfoMaxPixelsNeeded(result), v6 > result))
      *(_QWORD *)(a3 + 16) = BytePtr;
  }
  return result;
}

unint64_t fpra_allocateBudgetToConsumerByWeight(uint64_t a1, uint64_t *a2, float a3)
{
  unint64_t result;
  unint64_t v7;
  float v8;
  uint64_t v9;
  unint64_t v10;

  result = fpra_consumerInfoAdjustedPixelsNeeded((_QWORD *)a1, (uint64_t)a2);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (float)v7 * a3;
  if (v8 >= (float)result)
    v8 = (float)result;
  v9 = *a2;
  v10 = a2[1] + (unint64_t)v8;
  if (v10 <= 1)
    v10 = 1;
  a2[1] = v10;
  if (v9 != v10)
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 48) -= result;
  *(_QWORD *)(a1 + 32) = v7 - (unint64_t)v8;
  return result;
}

uint64_t fpra_secondPassAdjustRunningPixels(int a1, CFDataRef theData, _QWORD *a3)
{
  const UInt8 *BytePtr;
  uint64_t result;
  uint64_t v6;

  BytePtr = CFDataGetBytePtr(theData);
  result = fpra_isActiveConsumer((uint64_t)BytePtr);
  if ((_DWORD)result)
  {
    if (BytePtr != (const UInt8 *)a3[2])
    {
      v6 = fpra_consumerInfoMaxPixelsNeeded((uint64_t)BytePtr);
      result = fpra_consumerInfoAdjustedPixelsNeeded(a3, (uint64_t)BytePtr);
      a3[6] += result - v6;
    }
  }
  return result;
}

unint64_t fpra_allocateBudgetToEachConsumerByWeight(int a1, CFDataRef theData, _QWORD *a3)
{
  uint64_t *BytePtr;
  unint64_t result;
  float v6;

  BytePtr = (uint64_t *)CFDataGetBytePtr(theData);
  result = fpra_isActiveConsumer((uint64_t)BytePtr);
  if ((_DWORD)result)
  {
    if (BytePtr != (uint64_t *)a3[2])
    {
      v6 = (float)fpra_consumerInfoAdjustedPixelsNeeded(a3, (uint64_t)BytePtr) / (float)(unint64_t)a3[6];
      return fpra_allocateBudgetToConsumerByWeight((uint64_t)a3, BytePtr, v6);
    }
  }
  return result;
}

const UInt8 *fpra_getConsumerInfoFromConsumerCFNumber(uint64_t a1, const void *a2)
{
  const UInt8 *result;

  result = (const UInt8 *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
  if (result)
    return CFDataGetBytePtr((CFDataRef)result);
  return result;
}

uint64_t fpra_isActiveConsumer(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    FigPlayerResourceArbiterPlayerSpecifierGetPlayerRole(result);
    return FigCFEqual() == 0;
  }
  return result;
}

uint64_t fpra_consumerInfoMaxPixelsNeeded(uint64_t a1)
{
  uint64_t result;
  double DisplaySize;
  double v4;
  unint64_t v5;
  double ResolutionCeiling;
  double v7;
  unint64_t v8;
  double ResolutionFloor;
  double v10;
  double v11;
  unint64_t v12;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    DisplaySize = FigPlayerResourceArbiterPlayerSpecifierGetDisplaySize(result);
    v5 = (unint64_t)(DisplaySize * v4);
    ResolutionCeiling = FigPlayerResourceArbiterPlayerSpecifierGetResolutionCeiling(*(_QWORD *)(a1 + 16));
    v8 = (unint64_t)(ResolutionCeiling * v7);
    ResolutionFloor = FigPlayerResourceArbiterPlayerSpecifierGetResolutionFloor(*(_QWORD *)(a1 + 16));
    v11 = ResolutionFloor * v10;
    if (v8 >= v5)
      v12 = v5;
    else
      v12 = v8;
    if (!v5)
      v12 = v8;
    if (v12 <= (unint64_t)v11)
      return (unint64_t)v11;
    else
      return v12;
  }
  return result;
}

unint64_t fpra_consumerInfoAdjustedPixelsNeeded(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  double v8;
  BOOL v9;
  double v10;

  v4 = fpra_consumerInfoMaxPixelsNeeded(a2);
  if (a1[2] == a2)
  {
    v5 = 1.0;
    if (v4)
    {
LABEL_5:
      v6 = (float)*(unint64_t *)(a2 + 8) / (float)(unint64_t)v4;
      goto LABEL_8;
    }
  }
  else
  {
    v5 = (float)(unint64_t)a1[5] / (float)(unint64_t)a1[3];
    if (v5 < 1.0)
      v5 = 1.0;
    if (v4)
      goto LABEL_5;
  }
  v6 = 0.0;
LABEL_8:
  v7 = v5 * v6;
  v8 = 1.0 - v7;
  v9 = v7 < 1.0;
  v10 = 0.0;
  if (v9)
    v10 = v8;
  return (unint64_t)(v10 * (double)(unint64_t)v4);
}

CFTypeRef FigCFRetain_0(CFTypeRef cf)
{
  if (cf)
    return CFRetain(cf);
  return cf;
}

void consumerInfoDeallocateCallback(_QWORD *ptr, CFAllocatorRef allocator)
{
  const void *v4;

  v4 = (const void *)ptr[2];
  if (v4)
  {
    CFRelease(v4);
    ptr[2] = 0;
  }
  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigPlayerResourceArbiter_initOnce_0()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPlayerResourceArbiterID = result;
  return result;
}

double fpra_init(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void fpra_finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;

  FigSimpleMutexDestroy();
  v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v3 = *(const void **)(a1 + 16);
  if (v3)
    CFRelease(v3);
}

__CFString *fpra_copyFormattingDesc(uint64_t a1)
{
  int64_t Count;
  const __CFAllocator *AllocatorForMedia;
  __CFString *Mutable;
  const void **v5;
  uint64_t i;
  const UInt8 *ConsumerInfoFromConsumerCFNumber;
  const void *v8;
  CFStringRef v9;
  uint64_t UInt64;

  Count = FigCFDictionaryGetCount();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFStringCreateMutable(AllocatorForMedia, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%p: [Budget: %llu] [StepCost: %llu] {"), a1, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  if (Count < 1)
  {
    v5 = 0;
  }
  else
  {
    v5 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
    if (v5)
    {
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v5, 0);
      for (i = 0; i != Count; ++i)
      {
        ConsumerInfoFromConsumerCFNumber = fpra_getConsumerInfoFromConsumerCFNumber(a1, v5[i]);
        v8 = (const void *)*((_QWORD *)ConsumerInfoFromConsumerCFNumber + 2);
        if (v8)
        {
          v9 = CFCopyDescription(v8);
          UInt64 = FigCFNumberGetUInt64();
          CFStringAppendFormat(Mutable, 0, CFSTR("\n\t%lld: %@ [Budget: %llu]"), UInt64, v9, *((_QWORD *)ConsumerInfoFromConsumerCFNumber + 1));
          if (v9)
            CFRelease(v9);
        }
      }
    }
  }
  CFStringAppendFormat(Mutable, 0, CFSTR("\n}"));
  free(v5);
  return Mutable;
}

uint64_t FigPartialSampleTableGetTypeID()
{
  if (sRegisterFigPartialSampleTableTypeOnce != -1)
    dispatch_once_f(&sRegisterFigPartialSampleTableTypeOnce, 0, (dispatch_function_t)fpst_registerFigPartialSampleTableType);
  return sFigPartialSampleTableID;
}

uint64_t fpst_registerFigPartialSampleTableType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPartialSampleTableID = result;
  return result;
}

uint64_t FigPartialSampleTableTryAppendSampleInformation(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CMTimeValue value;
  uint64_t v16;
  CMTimeValue v17;
  uint64_t v18;
  CMTimeValue v19;
  uint64_t v20;
  CMTimeValue v21;
  uint64_t v22;
  CMTimeValue v23;
  uint64_t v24;
  CMTimeValue v25;
  uint64_t v26;
  CMTimeValue v27;
  CMTime *v28;
  _OWORD *v29;
  CMTimeEpoch v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;
  CMTimeValue v37;
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  CMTimeEpoch v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t *v45;
  CMTimeEpoch epoch;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  CMTimeValue v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  CMTimeValue v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t *v64;
  CMTimeEpoch v65;
  uint64_t v66;
  CMTimeValue v67;
  uint64_t v68;
  int v69;
  int v70;
  BOOL v71;
  CMTimeValue v72;
  __int16 v73;
  uint64_t v74;
  CMTimeValue v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  CMTimeValue v79;
  _QWORD *v80;
  __int128 v81;
  __int128 v82;
  uint64_t *v83;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time1;

  if (!a1 || !*(_QWORD *)(a1 + 176) || !a2)
    goto LABEL_166;
  v6 = *(uint64_t **)(a1 + 16);
  v7 = v6[1];
  if (*(_QWORD *)(a1 + 160) <= 0x260uLL)
  {
    if (v7 > 0)
    {
      result = 0;
LABEL_7:
      v9 = 0;
      goto LABEL_163;
    }
LABEL_166:
    result = FigSignalErrorAt();
    goto LABEL_7;
  }
  v10 = *v6;
  if ((v10 & 8) != 0)
  {
    time1.value = 0;
    v11 = *(_QWORD **)(a1 + 216);
    if (!v11
      || (v12 = v11[1], v13 = v7 - *v11, v14 = v11[2], *(_QWORD *)a2 != v12 + v14 * v13)
      || *(_QWORD *)(a2 + 8) != v14)
    {
      if (!*(_QWORD *)(a1 + 224))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 1, 8uLL, (void **)(a1 + 224));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 1, 0x18uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      value = time1.value;
      *(_QWORD *)time1.value = v7;
      *(_OWORD *)(value + 8) = *(_OWORD *)a2;
      ++**(_QWORD **)(a1 + 224);
      *(_QWORD *)(a1 + 216) = value;
      v10 = **(_QWORD **)(a1 + 16);
    }
  }
  if ((~(_BYTE)v10 & 0x18) == 0)
  {
    time1.value = 0;
    v16 = *(_QWORD *)(a1 + 256);
    if (!v16 || *(_QWORD *)(a2 + 24) && *(_QWORD *)(a2 + 16) - *(_QWORD *)a2 != *(_QWORD *)(v16 + 8))
    {
      if (!*(_QWORD *)(a1 + 264))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 2, 8uLL, (void **)(a1 + 264));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 2, 0x10uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      v17 = time1.value;
      *(_QWORD *)time1.value = v7;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(a2 + 16) - *(_QWORD *)a2;
      ++**(_QWORD **)(a1 + 264);
      *(_QWORD *)(a1 + 256) = v17;
    }
    time1.value = 0;
    v18 = *(_QWORD *)(a1 + 296);
    if (!v18 || *(_QWORD *)(a2 + 24) != *(_QWORD *)(v18 + 8))
    {
      if (!*(_QWORD *)(a1 + 304))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 3, 8uLL, (void **)(a1 + 304));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 3, 0x10uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      v19 = time1.value;
      *(_QWORD *)time1.value = v7;
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(a2 + 24);
      ++**(_QWORD **)(a1 + 304);
      *(_QWORD *)(a1 + 296) = v19;
    }
    v10 = **(_QWORD **)(a1 + 16);
  }
  if ((v10 & 4) != 0)
  {
    time1.value = 0;
    v20 = *(_QWORD *)(a1 + 456);
    if (!v20
      || *(unsigned __int8 *)(a2 + 58) != *(unsigned __int8 *)(v20 + 18)
      || *(unsigned __int8 *)(a2 + 56) != *(unsigned __int8 *)(v20 + 16)
      || *(unsigned __int8 *)(a2 + 57) != *(unsigned __int8 *)(v20 + 17)
      || *(_QWORD *)(a2 + 48) != *(_QWORD *)(v20 + 8)
      || *(_QWORD *)(a2 + 64) != *(_QWORD *)(v20 + 24) + v7 - *(_QWORD *)v20)
    {
      if (!*(_QWORD *)(a1 + 464))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 7, 8uLL, (void **)(a1 + 464));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 7, 0x20uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      v21 = time1.value;
      *(_QWORD *)time1.value = v7;
      *(_QWORD *)(v21 + 24) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(a2 + 48);
      ++**(_QWORD **)(a1 + 464);
      *(_QWORD *)(a1 + 456) = v21;
    }
    time1.value = 0;
    v22 = *(_QWORD *)(a1 + 336);
    if (!v22 || *(_QWORD *)(a2 + 32) != *(_QWORD *)(v22 + 8) || *(_QWORD *)(a2 + 40) != *(_QWORD *)(v22 + 16))
    {
      if (!*(_QWORD *)(a1 + 344))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 4, 8uLL, (void **)(a1 + 344));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 4, 0x18uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      v23 = time1.value;
      *(_QWORD *)time1.value = v7;
      *(_OWORD *)(v23 + 8) = *(_OWORD *)(a2 + 32);
      ++**(_QWORD **)(a1 + 344);
      *(_QWORD *)(a1 + 336) = v23;
    }
    v10 = **(_QWORD **)(a1 + 16);
  }
  if ((v10 & 0xC) != 0)
  {
    if ((v10 & 0x40) != 0)
    {
      time1.value = 0;
      v26 = *(_QWORD *)(a1 + 376);
      if (!v26 || *(_QWORD *)(a2 + 72) != *(_QWORD *)(v26 + 8))
      {
        if (!*(_QWORD *)(a1 + 384))
        {
          result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 5, 8uLL, (void **)(a1 + 384));
          if ((_DWORD)result)
            goto LABEL_7;
        }
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 5, 0x10uLL, (void **)&time1);
        if ((_DWORD)result)
          goto LABEL_7;
        v27 = time1.value;
        *(_QWORD *)time1.value = v7;
        *(_QWORD *)(v27 + 8) = *(_QWORD *)(a2 + 72);
        ++**(_QWORD **)(a1 + 384);
        *(_QWORD *)(a1 + 376) = v27;
      }
    }
    else
    {
      time1.value = 0;
      v24 = *(_QWORD *)(a1 + 416);
      if (!v24 || *(_QWORD *)(a2 + 80) != *(_QWORD *)(v24 + 16) || *(_QWORD *)(a2 + 72) != *(_QWORD *)(v24 + 8))
      {
        if (!*(_QWORD *)(a1 + 424))
        {
          result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 6, 8uLL, (void **)(a1 + 424));
          if ((_DWORD)result)
            goto LABEL_7;
        }
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 6, 0x18uLL, (void **)&time1);
        if ((_DWORD)result)
          goto LABEL_7;
        v25 = time1.value;
        *(_QWORD *)time1.value = v7;
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(a2 + 72);
        *(_QWORD *)(v25 + 16) = *(_QWORD *)(a2 + 80);
        ++**(_QWORD **)(a1 + 424);
        *(_QWORD *)(a1 + 416) = v25;
      }
    }
  }
  v83 = 0;
  v28 = (CMTime *)MEMORY[0x1E0CA2E68];
  if ((*(_BYTE *)(a2 + 100) & 1) == 0 || (*(_BYTE *)(a2 + 148) & 1) == 0)
    goto LABEL_167;
  v29 = (_OWORD *)(a2 + 136);
  v81 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time1.value = *MEMORY[0x1E0CA2E68];
  v30 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time1.epoch = v30;
  if ((*(_BYTE *)(a2 + 220) & 1) != 0)
  {
    lhs = *(CMTime *)(a2 + 208);
    *(_OWORD *)&rhs.value = *v29;
    rhs.epoch = *(_QWORD *)(a2 + 152);
    CMTimeSubtract(&time1, &lhs, &rhs);
  }
  v31 = *(_QWORD *)(a1 + 576);
  if (v31)
  {
    lhs = time1;
    rhs = *(CMTime *)(v31 + 32);
    if (!CMTimeCompare(&lhs, &rhs))
      goto LABEL_78;
  }
  memset(&time1, 0, sizeof(time1));
  CMTimeMake(&time1, 0, *(_DWORD *)(a2 + 96));
  if (!*(_QWORD *)(a1 + 584))
  {
    result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 10, 8uLL, (void **)(a1 + 584));
    if ((_DWORD)result)
      goto LABEL_77;
  }
  result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 10, 0x38uLL, (void **)&v83);
  if ((_DWORD)result)
    goto LABEL_77;
  if ((*(_BYTE *)(a2 + 220) & 1) != 0)
  {
    rhs = *(CMTime *)(a2 + 208);
    *(_OWORD *)&time2.value = *v29;
    time2.epoch = *(_QWORD *)(a2 + 152);
    CMTimeSubtract(&lhs, &rhs, &time2);
    time1 = lhs;
    *(_OWORD *)&rhs.value = v81;
    rhs.epoch = v30;
    if (CMTimeCompare(&lhs, &rhs) <= 0)
    {
LABEL_167:
      result = FigSignalErrorAt();
      if ((_DWORD)result)
        goto LABEL_7;
      goto LABEL_78;
    }
  }
  result = 0;
  v32 = v83;
  *v83 = v7;
  v33 = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(v32 + 1) = *v29;
  v32[3] = v33;
  *(CMTime *)(v32 + 4) = time1;
  ++**(_QWORD **)(a1 + 584);
  *(_QWORD *)(a1 + 576) = v32;
LABEL_77:
  if ((_DWORD)result)
    goto LABEL_7;
LABEL_78:
  rhs.value = 0;
  if ((*(_BYTE *)(a2 + 100) & 1) == 0
    || (v34 = (_OWORD *)(a2 + 88), time1 = *(CMTime *)(a2 + 88), lhs = *v28, CMTimeCompare(&time1, &lhs) < 0))
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      goto LABEL_7;
  }
  else
  {
    v35 = *(_QWORD *)(a1 + 616);
    if (!v35
      || (*(_OWORD *)&time1.value = *v34,
          time1.epoch = *(_QWORD *)(a2 + 104),
          v36 = *(_OWORD *)(v35 + 8),
          lhs.epoch = *(_QWORD *)(v35 + 24),
          *(_OWORD *)&lhs.value = v36,
          CMTimeCompare(&time1, &lhs)))
    {
      if (!*(_QWORD *)(a1 + 624))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 11, 8uLL, (void **)(a1 + 624));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 11, 0x20uLL, (void **)&rhs);
      if ((_DWORD)result)
        goto LABEL_7;
      v37 = rhs.value;
      *(_QWORD *)rhs.value = v7;
      v38 = *(_QWORD *)(a2 + 104);
      *(_OWORD *)(v37 + 8) = *v34;
      *(_QWORD *)(v37 + 24) = v38;
      ++**(_QWORD **)(a1 + 624);
      *(_QWORD *)(a1 + 616) = v37;
    }
  }
  v83 = 0;
  v39 = (_OWORD *)(a2 + 136);
  if ((*(_BYTE *)(a2 + 148) & 1) != 0 && (*(_BYTE *)(a2 + 124) & 1) != 0)
  {
    v40 = (_OWORD *)(a2 + 112);
    memset(&time1, 0, sizeof(time1));
    lhs = *(CMTime *)(a2 + 112);
    *(_OWORD *)&rhs.value = *v39;
    rhs.epoch = *(_QWORD *)(a2 + 152);
    CMTimeSubtract(&time1, &lhs, &rhs);
    v82 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&lhs.value = *MEMORY[0x1E0CA2E18];
    v41 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    lhs.epoch = v41;
    if ((*(_BYTE *)(a2 + 244) & 1) != 0)
    {
      rhs = *(CMTime *)(a2 + 232);
      *(_OWORD *)&time2.value = *v40;
      time2.epoch = *(_QWORD *)(a2 + 128);
      CMTimeSubtract(&lhs, &rhs, &time2);
    }
    v42 = *(_QWORD *)(a1 + 656);
    if (!v42
      || (rhs = time1,
          v43 = *(_OWORD *)(v42 + 8),
          time2.epoch = *(_QWORD *)(v42 + 24),
          *(_OWORD *)&time2.value = v43,
          CMTimeCompare(&rhs, &time2))
      || (v44 = *(_QWORD *)(a1 + 656), rhs = lhs, time2 = *(CMTime *)(v44 + 32), CMTimeCompare(&rhs, &time2)))
    {
      if (!*(_QWORD *)(a1 + 664))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 12, 8uLL, (void **)(a1 + 664));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 12, 0x38uLL, (void **)&v83);
      if ((_DWORD)result)
        goto LABEL_7;
      v45 = v83;
      *v83 = v7;
      *(_OWORD *)&lhs.value = *v40;
      lhs.epoch = *(_QWORD *)(a2 + 128);
      *(_OWORD *)&rhs.value = *v39;
      rhs.epoch = *(_QWORD *)(a2 + 152);
      CMTimeSubtract(&time1, &lhs, &rhs);
      epoch = time1.epoch;
      *(_OWORD *)(v45 + 1) = *(_OWORD *)&time1.value;
      v45[3] = epoch;
      v45[6] = v41;
      *((_OWORD *)v45 + 2) = v82;
      if ((*(_BYTE *)(a2 + 244) & 1) != 0)
      {
        lhs = *(CMTime *)(a2 + 232);
        *(_OWORD *)&rhs.value = *v40;
        rhs.epoch = *(_QWORD *)(a2 + 128);
        CMTimeSubtract(&time1, &lhs, &rhs);
        *(CMTime *)(v45 + 4) = time1;
      }
      ++**(_QWORD **)(a1 + 664);
      *(_QWORD *)(a1 + 656) = v45;
    }
  }
  else
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      goto LABEL_7;
  }
  v47 = **(_QWORD **)(a1 + 16);
  if ((v47 & 0x100) != 0)
  {
    rhs.value = 0;
    v48 = *(_QWORD *)(a1 + 776);
    if (!v48
      || (time1 = *(CMTime *)(a2 + 256),
          v49 = *(_OWORD *)(v48 + 8),
          lhs.epoch = *(_QWORD *)(v48 + 24),
          *(_OWORD *)&lhs.value = v49,
          CMTimeCompare(&time1, &lhs))
      || (v50 = *(_QWORD *)(a1 + 776),
          time1 = *(CMTime *)(a2 + 280),
          lhs = *(CMTime *)(v50 + 32),
          CMTimeCompare(&time1, &lhs)))
    {
      if (!*(_QWORD *)(a1 + 784))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 15, 8uLL, (void **)(a1 + 784));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 15, 0x38uLL, (void **)&rhs);
      if ((_DWORD)result)
        goto LABEL_7;
      v51 = rhs.value;
      v52 = *(_QWORD *)(a2 + 272);
      *(_OWORD *)(rhs.value + 8) = *(_OWORD *)(a2 + 256);
      *(_QWORD *)(v51 + 24) = v52;
      v53 = *(_QWORD *)(a2 + 296);
      *(_OWORD *)(v51 + 32) = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(v51 + 48) = v53;
      *(_QWORD *)v51 = v7;
      ++**(_QWORD **)(a1 + 784);
      *(_QWORD *)(a1 + 776) = v51;
    }
    v47 = **(_QWORD **)(a1 + 16);
  }
  if ((v47 & 0x200) != 0)
  {
    rhs.value = 0;
    v54 = *(_QWORD *)(a1 + 816);
    if (!v54
      || (time1 = *(CMTime *)(a2 + 304),
          v55 = *(_OWORD *)(v54 + 8),
          lhs.epoch = *(_QWORD *)(v54 + 24),
          *(_OWORD *)&lhs.value = v55,
          CMTimeCompare(&time1, &lhs))
      || (v56 = *(_QWORD *)(a1 + 816),
          time1 = *(CMTime *)(a2 + 328),
          lhs = *(CMTime *)(v56 + 32),
          CMTimeCompare(&time1, &lhs)))
    {
      if (!*(_QWORD *)(a1 + 824)
        && (LODWORD(result) = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 16, 8uLL, (void **)(a1 + 824)),
            (_DWORD)result)
        || (LODWORD(result) = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 16, 0x38uLL, (void **)&rhs),
            (_DWORD)result))
      {
        result = result;
        if ((_BYTE)result)
          goto LABEL_7;
      }
      else
      {
        v57 = rhs.value;
        v58 = *(_QWORD *)(a2 + 320);
        *(_OWORD *)(rhs.value + 8) = *(_OWORD *)(a2 + 304);
        *(_QWORD *)(v57 + 24) = v58;
        v59 = *(_QWORD *)(a2 + 344);
        *(_OWORD *)(v57 + 32) = *(_OWORD *)(a2 + 328);
        *(_QWORD *)(v57 + 48) = v59;
        *(_QWORD *)v57 = v7;
        ++**(_QWORD **)(a1 + 824);
        *(_QWORD *)(a1 + 816) = v57;
      }
    }
  }
  v60 = *(uint64_t **)(a1 + 16);
  v61 = *v60;
  if ((*v60 & 0x80) != 0)
  {
    v83 = 0;
    if (!*(_QWORD *)(a1 + 736))
      goto LABEL_178;
    lhs = *(CMTime *)(a2 + 160);
    *(_OWORD *)&rhs.value = *v39;
    rhs.epoch = *(_QWORD *)(a2 + 152);
    CMTimeSubtract(&time1, &lhs, &rhs);
    v62 = *(_QWORD *)(a1 + 736);
    v63 = *(_OWORD *)(v62 + 8);
    lhs.epoch = *(_QWORD *)(v62 + 24);
    *(_OWORD *)&lhs.value = v63;
    if (CMTimeCompare(&time1, &lhs)
      || (lhs = *(CMTime *)(a2 + 184),
          *(_OWORD *)&rhs.value = *v39,
          rhs.epoch = *(_QWORD *)(a2 + 152),
          CMTimeSubtract(&time2, &lhs, &rhs),
          lhs = *(CMTime *)(*(_QWORD *)(a1 + 736) + 32),
          CMTimeCompare(&time2, &lhs)))
    {
LABEL_178:
      if (!*(_QWORD *)(a1 + 744))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 14, 8uLL, (void **)(a1 + 744));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 14, 0x38uLL, (void **)&v83);
      if ((_DWORD)result)
        goto LABEL_7;
      v64 = v83;
      *v83 = v7;
      lhs = *(CMTime *)(a2 + 160);
      *(_OWORD *)&rhs.value = *v39;
      rhs.epoch = *(_QWORD *)(a2 + 152);
      CMTimeSubtract(&time1, &lhs, &rhs);
      v65 = time1.epoch;
      *(_OWORD *)(v64 + 1) = *(_OWORD *)&time1.value;
      v64[3] = v65;
      lhs = *(CMTime *)(a2 + 184);
      *(_OWORD *)&rhs.value = *v39;
      rhs.epoch = *(_QWORD *)(a2 + 152);
      CMTimeSubtract(&time1, &lhs, &rhs);
      *(CMTime *)(v64 + 4) = time1;
      ++**(_QWORD **)(a1 + 744);
      *(_QWORD *)(a1 + 736) = v64;
    }
    v60 = *(uint64_t **)(a1 + 16);
    v61 = *v60;
  }
  if ((v61 & 1) != 0)
  {
    time1.value = 0;
    v66 = *(_QWORD *)(a1 + 536);
    if (!v66 || *(_QWORD *)(a2 + 352) != *(_QWORD *)(v66 + 8))
    {
      if (!*(_QWORD *)(a1 + 544))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 9, 8uLL, (void **)(a1 + 544));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 9, 0x18uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      v67 = time1.value;
      *(_QWORD *)time1.value = v7;
      *(_QWORD *)(v67 + 8) = *(_QWORD *)(a2 + 352);
      ++**(_QWORD **)(a1 + 544);
      *(_QWORD *)(a1 + 536) = v67;
      v60 = *(uint64_t **)(a1 + 16);
    }
    v61 = *v60;
  }
  if ((v61 & 2) != 0)
  {
    time1.value = 0;
    v68 = *(_QWORD *)(a1 + 496);
    if (!v68
      || ((v69 = *(_DWORD *)(v68 + 8), v70 = *(unsigned __int16 *)(v68 + 12), *(_DWORD *)(a2 + 360) == v69)
        ? (v71 = *(unsigned __int16 *)(a2 + 364) == v70)
        : (v71 = 0),
          !v71))
    {
      if (!*(_QWORD *)(a1 + 504))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 8, 8uLL, (void **)(a1 + 504));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 8, 0x10uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      v72 = time1.value;
      *(_QWORD *)time1.value = v7;
      v73 = *(_WORD *)(a2 + 364);
      *(_DWORD *)(v72 + 8) = *(_DWORD *)(a2 + 360);
      *(_WORD *)(v72 + 12) = v73;
      ++**(_QWORD **)(a1 + 504);
      *(_QWORD *)(a1 + 496) = v72;
      v60 = *(uint64_t **)(a1 + 16);
    }
    v61 = *v60;
  }
  if ((v61 & 0x20) != 0)
  {
    time1.value = 0;
    v74 = *(_QWORD *)(a1 + 696);
    if (!v74 || memcmp((const void *)(a2 + 366), (const void *)(v74 + 8), 0x28uLL))
    {
      if (!*(_QWORD *)(a1 + 704))
      {
        result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 13, 8uLL, (void **)(a1 + 704));
        if ((_DWORD)result)
          goto LABEL_7;
      }
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 13, 0x30uLL, (void **)&time1);
      if ((_DWORD)result)
        goto LABEL_7;
      v75 = time1.value;
      *(_QWORD *)time1.value = v7;
      v76 = *(_QWORD *)(a2 + 398);
      v77 = *(_OWORD *)(a2 + 382);
      *(_OWORD *)(v75 + 8) = *(_OWORD *)(a2 + 366);
      *(_OWORD *)(v75 + 24) = v77;
      *(_QWORD *)(v75 + 40) = v76;
      ++**(_QWORD **)(a1 + 704);
      *(_QWORD *)(a1 + 696) = v75;
    }
  }
  time1.value = 0;
  v78 = *(_QWORD *)(a1 + 856);
  if (!v78 || *(_QWORD *)(a2 + 408) != *(_QWORD *)(v78 + 8))
  {
    if (!*(_QWORD *)(a1 + 864))
    {
      result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 17, 8uLL, (void **)(a1 + 864));
      if ((_DWORD)result)
        goto LABEL_7;
    }
    result = fpst_writing_reserveMemoryForChangeType((_QWORD *)a1, 17, 0x10uLL, (void **)&time1);
    if ((_DWORD)result)
      goto LABEL_7;
    v79 = time1.value;
    *(_QWORD *)time1.value = v7;
    *(_QWORD *)(v79 + 8) = *(_QWORD *)(a2 + 408);
    ++**(_QWORD **)(a1 + 864);
    *(_QWORD *)(a1 + 856) = v79;
  }
  v80 = *(_QWORD **)(a1 + 16);
  if ((*v80 & 7) == 4 && *(_BYTE *)(a2 + 58) && *(_BYTE *)(a2 + 56) && *(_BYTE *)(a2 + 57))
  {
    result = 0;
    v9 = *(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 64);
    v80[1] += v9;
  }
  else
  {
    result = 0;
    ++v80[1];
    v9 = 1;
  }
LABEL_163:
  if (a3)
    *a3 = v9;
  return result;
}

uint64_t FigPartialSampleTableFinishWriting(uint64_t a1)
{
  size_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t *v7;
  uint64_t result;
  void *destination;
  size_t lengthAtOffsetOut;

  if (!a1 || !*(_QWORD *)(a1 + 176))
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(a1 + 168);
  v3 = *(_QWORD **)(a1 + 184);
  if (v3)
    v2 += *v3;
  v4 = 0;
  v5 = 16;
  while (1)
  {
    v7 = (size_t *)(a1 + v4 + 192);
    v6 = *v7;
    if (v7 == *(size_t **)(a1 + 184))
    {
      if (v6)
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + v5) = *(_QWORD *)(a1 + 168);
      goto LABEL_14;
    }
    if (v6)
      break;
LABEL_14:
    v4 += 40;
    v5 += 8;
    if (v4 == 680)
      goto LABEL_15;
  }
  destination = 0;
  lengthAtOffsetOut = 0;
  if (*v7 <= CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + v4 + 208)))
  {
    result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 176), v2, &lengthAtOffsetOut, 0, (char **)&destination);
    if ((_DWORD)result)
      return result;
    result = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(a1 + v4 + 208), 0, *v7, destination);
    if ((_DWORD)result)
      return result;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + v5) = v2;
    v2 += *v7;
    goto LABEL_14;
  }
  result = FigSignalErrorAt();
  if (!(_DWORD)result)
  {
LABEL_15:
    result = 0;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;
  }
  return result;
}

uint64_t FigPartialSampleTableCreateForWriting(int a1, CMBlockBufferRef theBuffer, uint64_t a3, uint64_t *a4)
{
  uint64_t DataPointer;
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFAllocatorRef v12;
  const __CFAllocator *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t totalLengthOut;
  char *dataPointerOut;
  CMBlockBufferRef blockBufferOut;

  totalLengthOut = 0;
  dataPointerOut = 0;
  if (!a4 || !theBuffer)
    return FigSignalErrorAt();
  DataPointer = CMBlockBufferAssureBlockMemory(theBuffer);
  if ((_DWORD)DataPointer)
    return DataPointer;
  DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  if ((_DWORD)DataPointer)
    return DataPointer;
  if ((dataPointerOut & 3) != 0 || !CMBlockBufferIsRangeContiguous(theBuffer, 0, totalLengthOut))
    return FigSignalErrorAt();
  if (sRegisterFigPartialSampleTableTypeOnce != -1)
    dispatch_once_f(&sRegisterFigPartialSampleTableTypeOnce, 0, (dispatch_function_t)fpst_registerFigPartialSampleTableType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v9 = Instance;
  *(_QWORD *)(Instance + 160) = totalLengthOut;
  *(_QWORD *)(Instance + 176) = theBuffer;
  CFRetain(theBuffer);
  v10 = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v9 + 176), 0, 0, 0, (char **)(v9 + 16));
  if ((_DWORD)v10)
    goto LABEL_28;
  v11 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v11 + 144) = 0;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)v11 = 0u;
  **(_QWORD **)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 160) -= 152;
  *(_QWORD *)(v9 + 168) = 152;
  v12 = CFGetAllocator((CFTypeRef)v9);
  blockBufferOut = 0;
  if (!*(_QWORD *)(v9 + 16))
  {
    v10 = FigSignalErrorAt();
    if (!(_DWORD)v10)
    {
LABEL_18:
      v19 = 0;
      *a4 = v9;
      return v19;
    }
LABEL_28:
    v19 = v10;
    goto LABEL_22;
  }
  v13 = v12;
  v14 = 0;
  v15 = 1;
  while (1)
  {
    v16 = v9 + v14;
    if (!v14)
      break;
    v17 = fpst_sizeForChangeType(v15);
    *(_QWORD *)(v16 + 200) = 8;
    CMBlockBufferCreateWithMemoryBlock(v13, 0, 4 * v17 + 40, v13, 0, 0, 4 * v17 + 40, 0, &blockBufferOut);
LABEL_17:
    *(_QWORD *)(v9 + v14 + 208) = blockBufferOut;
    blockBufferOut = 0;
    ++v15;
    v14 += 40;
    if (v14 == 680)
      goto LABEL_18;
  }
  v18 = CMBlockBufferCreateWithBufferReference(v13, *(CMBlockBufferRef *)(v9 + 176), *(_QWORD *)(v9 + 168), *(_QWORD *)(v9 + 160), 0, &blockBufferOut);
  if (!(_DWORD)v18)
  {
    *(_QWORD *)(v9 + 184) = v16 + 192;
    goto LABEL_17;
  }
  v19 = v18;
  if (blockBufferOut)
    CFRelease(blockBufferOut);
LABEL_22:
  CFRelease((CFTypeRef)v9);
  return v19;
}

uint64_t FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, __int128 *a3, const void *a4, uint64_t *a5)
{
  uint64_t Instance;
  size_t DataLength;
  size_t v12;
  uint64_t DataPointer;
  CMBlockBufferRef v14;
  CFTypeRef v15;
  __int128 v16;
  __int128 v17;
  size_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  char *v24;
  CMBlockBufferRef blockBufferOut;

  v24 = 0;
  blockBufferOut = 0;
  if (!a5)
  {
    v22 = FigSignalErrorAt();
    goto LABEL_24;
  }
  if (sRegisterFigPartialSampleTableTypeOnce != -1)
    dispatch_once_f(&sRegisterFigPartialSampleTableTypeOnce, 0, (dispatch_function_t)fpst_registerFigPartialSampleTableType);
  Instance = _CFRuntimeCreateInstance();
  DataLength = CMBlockBufferGetDataLength(a2);
  if (CMBlockBufferIsRangeContiguous(a2, 0, DataLength))
  {
    blockBufferOut = a2;
    CFRetain(a2);
    goto LABEL_8;
  }
  v12 = CMBlockBufferGetDataLength(a2);
  DataPointer = CMBlockBufferCreateContiguous(a1, a2, a1, 0, 0, v12, 0, &blockBufferOut);
  if (!(_DWORD)DataPointer)
  {
    a2 = blockBufferOut;
LABEL_8:
    DataPointer = CMBlockBufferGetDataPointer(a2, 0, 0, 0, &v24);
    if (!(_DWORD)DataPointer)
    {
      if ((v24 & 3) != 0)
      {
        DataPointer = FigSignalErrorAt();
      }
      else
      {
        v14 = blockBufferOut;
        *(_QWORD *)(Instance + 16) = v24;
        *(_QWORD *)(Instance + 24) = v14;
        CFRetain(v14);
        if (a3)
        {
          if (a4)
            v15 = CFRetain(a4);
          else
            v15 = 0;
          *(_QWORD *)(Instance + 72) = v15;
          v16 = *a3;
          v17 = a3[1];
          *(_QWORD *)(Instance + 64) = *((_QWORD *)a3 + 4);
          *(_OWORD *)(Instance + 32) = v16;
          *(_OWORD *)(Instance + 48) = v17;
        }
        v18 = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(Instance + 24));
        v19 = *(_QWORD **)(Instance + 16);
        if ((uint64_t)v19[1] >= 1 && *v19 <= 0x3FFuLL)
        {
          v20 = 2;
          while (1)
          {
            v21 = v19[v20];
            if (v21 < 0 || v21 > (uint64_t)(v18 - 9))
              break;
            if (++v20 == 19)
              goto LABEL_23;
          }
        }
        DataPointer = FigSignalErrorAt();
        if (!(_DWORD)DataPointer)
        {
LABEL_23:
          v22 = 0;
          *a5 = Instance;
          goto LABEL_24;
        }
      }
    }
  }
  v22 = DataPointer;
  if (Instance)
    CFRelease((CFTypeRef)Instance);
LABEL_24:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v22;
}

uint64_t FigPartialSampleTableCreateFromBlockBufferUsingOutOfBandObjectRegistry(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, const void *a3, uint64_t *a4)
{
  __int128 v5[2];
  uint64_t v6;

  v5[0] = xmmword_1E2FB9938;
  v5[1] = *(_OWORD *)off_1E2FB9948;
  v6 = 0;
  return FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(a1, a2, v5, a3, a4);
}

uint64_t fpst_outOfBandRegistry_copyByteStreamTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeID v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(a1, CFSTR("ByteStream"), a2, &cf);
  if ((_DWORD)v4)
    goto LABEL_7;
  if (!cf || (v5 = CFGetTypeID(cf), v5 != CMByteStreamBaseGetTypeID()))
  {
    v4 = FigSignalErrorAt();
LABEL_7:
    v6 = v4;
    goto LABEL_8;
  }
  v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t fpst_outOfBandRegistry_copyDataSourceTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeID v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(a1, CFSTR("DataSourceURL"), a2, &cf);
  if ((_DWORD)v4)
    goto LABEL_7;
  if (!cf || (v5 = CFGetTypeID(cf), v5 != CFURLGetTypeID()))
  {
    v4 = FigSignalErrorAt();
LABEL_7:
    v6 = v4;
    goto LABEL_8;
  }
  v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t fpst_outOfBandRegistry_copyFormatDescriptionTranslatedFromOutOfBandID(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;
  CFTypeID v5;
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v4 = FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(a1, CFSTR("FormatDescription"), a2, &cf);
  if ((_DWORD)v4)
    goto LABEL_7;
  if (!cf || (v5 = CFGetTypeID(cf), v5 != CMFormatDescriptionGetTypeID()))
  {
    v4 = FigSignalErrorAt();
LABEL_7:
    v6 = v4;
    goto LABEL_8;
  }
  v6 = 0;
  if (a3)
  {
    *a3 = cf;
    return v6;
  }
LABEL_8:
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t FigPartialSampleTableCreateFromBlockBuffer(const __CFAllocator *a1, OpaqueCMBlockBuffer *a2, uint64_t *a3)
{
  return FigPartialSampleTableCreateFromBlockBufferUsingTranslationCallbacks(a1, a2, 0, 0, a3);
}

uint64_t FigPartialSampleTableCreateAccessorAtIndex(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  char *v6;
  uint64_t v7;

  if (!a1 || a2 < 0 || *(_QWORD *)(a1[2] + 8) <= a2)
  {
    v7 = FigSignalErrorAt();
    goto LABEL_8;
  }
  v6 = (char *)malloc_type_calloc(1uLL, 0x98uLL, 0x102004019573705uLL);
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  if (*(_QWORD *)v6)
    CFRelease(*(CFTypeRef *)v6);
  *(_QWORD *)v6 = a1;
  CFRetain(a1);
  v7 = fpst_accessor_moveToSampleIndex((uint64_t *)v6, a2);
  if (!(_DWORD)v7)
  {
    *a3 = v6;
LABEL_8:
    v6 = 0;
  }
  free(v6);
  return v7;
}

uint64_t fpst_accessor_moveToSampleIndex(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t *j;
  uint64_t v12;
  char *v13;
  char *dataPointerOut;

  if (a1[18] == a2)
    return 0;
  v4 = *a1;
  for (i = 1; i != 18; ++i)
  {
    if (a2)
    {
      v6 = a1[18];
      if (*(_QWORD *)(*(_QWORD *)(v4 + 16) + 8) - 1 == a2)
      {
        dataPointerOut = 0;
        result = fpst_reading_runForType(v4, (char)i, &dataPointerOut);
        if ((_DWORD)result == -17712)
          continue;
        if ((_DWORD)result)
          return result;
        a1[i] = *(_QWORD *)dataPointerOut - 1;
      }
      if (v6 >= a2)
      {
LABEL_16:
        if (v6 > a2)
        {
          for (j = &a1[i]; ; *j = v12)
          {
            v13 = 0;
            dataPointerOut = 0;
            result = fpst_reading_runForType(v4, (char)i, &v13);
            if ((_DWORD)result == -17712)
              break;
            if ((_DWORD)result)
              return result;
            if (!v13)
              break;
            v12 = *j - 1;
            if (*j < 1)
              break;
            result = fpst_reading_runSegmentAtIndex(v4, (char)i, *j, &dataPointerOut);
            if ((_DWORD)result)
              return result;
            if (*(_QWORD *)dataPointerOut <= a2)
              break;
          }
        }
      }
      else
      {
        v8 = &a1[i];
        while (1)
        {
          v13 = 0;
          dataPointerOut = 0;
          result = fpst_reading_runForType(v4, (char)i, &v13);
          if ((_DWORD)result == -17712)
            break;
          if ((_DWORD)result)
            return result;
          v9 = *v8 + 1;
          if (v9 >= *(_QWORD *)v13)
            break;
          result = fpst_reading_runSegmentAtIndex(v4, (char)i, *v8 + 1, &dataPointerOut);
          if ((_DWORD)result)
            return result;
          v10 = dataPointerOut;
          if (*(_QWORD *)dataPointerOut > a2)
            break;
          *v8 = v9;
          v6 = *(_QWORD *)v10;
          if (*(_QWORD *)v10 >= a2)
            goto LABEL_16;
        }
      }
    }
    else
    {
      a1[i] = 0;
    }
  }
  result = 0;
  a1[18] = a2;
  return result;
}

uint64_t FigPartialSampleTableAccessorStepInDecodeOrder(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  if (!a1)
  {
    result = FigSignalErrorAt();
    goto LABEL_15;
  }
  if (!a2)
  {
    result = 0;
LABEL_15:
    v8 = 0;
    if (!a3)
      return result;
    goto LABEL_10;
  }
  v4 = a1[18];
  v5 = v4 + a2;
  if (v4 + a2 < 0 != __OFADD__(v4, a2))
    v6 = -v4;
  else
    v6 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 8);
  if (v5 >= v7)
    v8 = ~v5 + a2 + v7;
  else
    v8 = v6;
  result = fpst_accessor_moveToSampleIndex(a1, v8 + v4);
  if (a3)
  {
LABEL_10:
    if (!(_DWORD)result)
      *a3 = v8;
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorStepByDecodeTime(uint64_t *a1, CMTime *a2, char *a3)
{
  CMTime v4;

  v4 = *a2;
  return fpst_accessor_stepByDecodeTimeInternal(a1, &v4, 0, a3);
}

uint64_t fpst_accessor_stepByDecodeTimeInternal(uint64_t *a1, CMTime *a2, int a3, char *a4)
{
  CMTimeEpoch v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  CMTimeValue value;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  CMTime v32;
  CMTime v33;
  char *v34;
  CMTime v35;
  CMTime rhs;
  char *dataPointerOut;
  CMTime time2;
  CMTime time1;
  char *v40;

  if (!a1)
    return FigSignalErrorAt();
  time1 = *a2;
  v31 = *MEMORY[0x1E0CA2E68];
  *(_OWORD *)&time2.value = *MEMORY[0x1E0CA2E68];
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  time2.epoch = v8;
  if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
  {
    v33 = *a2;
    time1 = *a2;
    v40 = 0;
    *(_OWORD *)&time2.value = v31;
    time2.epoch = v8;
    result = CMTimeCompare(&time1, &time2);
    if (!(_DWORD)result)
      return result;
    time1 = v33;
    *(_OWORD *)&time2.value = v31;
    time2.epoch = v8;
    if (CMTimeCompare(&time1, &time2) < 0)
      return FigSignalErrorAt();
    v10 = a1[18];
    v11 = a1[10];
    result = fpst_reading_runSegmentAtIndex(*a1, 10, v11, &v40);
    if ((_DWORD)result)
      return result;
    v12 = *a1;
    dataPointerOut = 0;
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 88);
    if (v13 >= 1)
    {
      result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v12 + 24), v13, 0, 0, &dataPointerOut);
      if ((_DWORD)result)
        return result;
      v14 = v40;
      if (!v40)
      {
        v20 = 0;
        v21 = 0;
        goto LABEL_34;
      }
      v15 = v11 + 1;
      while (1)
      {
        v34 = 0;
        v16 = *a1;
        if (v15 >= *(_QWORD *)dataPointerOut)
        {
          v17 = 0;
          v18 = (uint64_t *)(*(_QWORD *)(v16 + 16) + 8);
        }
        else
        {
          result = fpst_reading_runSegmentAtIndex(v16, 10, v15, &v34);
          if ((_DWORD)result)
            return result;
          v17 = v34;
          v18 = (uint64_t *)v34;
        }
        v19 = *v18;
        memset(&time1, 0, sizeof(time1));
        time2 = *(CMTime *)(v14 + 32);
        CMTimeMultiply(&time1, &time2, v19 - v10);
        time2 = time1;
        rhs = v33;
        if (CMTimeCompare(&time2, &rhs) >= 1)
          break;
        time2 = v33;
        rhs = time1;
        CMTimeSubtract(&v33, &time2, &rhs);
        ++v15;
        v10 = v19;
        v14 = v17;
        if (!v17)
        {
          v20 = v19 - 1;
          v21 = 1;
          goto LABEL_34;
        }
      }
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      rhs = v33;
      v35 = *(CMTime *)(v14 + 32);
      v28 = CMTimeDivide();
      if (!a3 || (rhs = time2, *(_OWORD *)&v35.value = v31, v35.epoch = v8, !CMTimeCompare(&rhs, &v35)))
      {
        v21 = 0;
        v20 = v28 + v10;
LABEL_34:
        result = fpst_accessor_moveToSampleIndex(a1, v20);
        if (a4)
        {
          if (!(_DWORD)result)
            *a4 = v21;
        }
        return result;
      }
      return FigSignalErrorAt();
    }
    return 4294949584;
  }
  time1 = *a2;
  CMTimeAbsoluteValue(&v32, &time1);
  v33.value = 0;
  time1 = v32;
  *(_OWORD *)&time2.value = v31;
  time2.epoch = v8;
  result = CMTimeCompare(&time1, &time2);
  if (!(_DWORD)result)
    return result;
  time1 = v32;
  *(_OWORD *)&time2.value = v31;
  time2.epoch = v8;
  if (CMTimeCompare(&time1, &time2) <= 0)
    return FigSignalErrorAt();
  v22 = a1[18];
  v23 = a1[10];
  result = fpst_reading_runSegmentAtIndex(*a1, 10, v23, &v33);
  if ((_DWORD)result)
    return result;
  v24 = *a1;
  v40 = 0;
  v25 = *(_QWORD *)(*(_QWORD *)(v24 + 16) + 88);
  if (v25 < 1)
    return 4294949584;
  result = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(v24 + 24), v25, 0, 0, &v40);
  if ((_DWORD)result)
    return result;
  value = v33.value;
  if (v33.value)
  {
    while (1)
    {
      dataPointerOut = 0;
      v27 = *(_QWORD *)value;
      memset(&time1, 0, sizeof(time1));
      time2 = *(CMTime *)(value + 32);
      CMTimeMultiply(&time1, &time2, v22 - v27);
      time2 = time1;
      rhs = v32;
      if ((CMTimeCompare(&time2, &rhs) & 0x80000000) == 0)
        break;
      v22 = v27;
      rhs = v32;
      v35 = time1;
      CMTimeSubtract(&time2, &rhs, &v35);
      v32 = time2;
      if (v23 > 0)
      {
        result = fpst_reading_runSegmentAtIndex(*a1, 10, --v23, &dataPointerOut);
        if ((_DWORD)result)
          return result;
        value = (CMTimeValue)dataPointerOut;
        if (dataPointerOut)
          continue;
      }
      result = fpst_accessor_moveToSampleIndex(a1, v27);
      if (!(_DWORD)result)
        *a4 = 1;
      return result;
    }
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    rhs = v32;
    v35 = *(CMTime *)(value + 32);
    v30 = CMTimeDivide();
    if (!a3 || (rhs = time2, *(_OWORD *)&v35.value = v31, v35.epoch = v8, !CMTimeCompare(&rhs, &v35)))
    {
      v29 = v22 - v30;
      return fpst_accessor_moveToSampleIndex(a1, v29);
    }
    return FigSignalErrorAt();
  }
  v29 = 0;
  return fpst_accessor_moveToSampleIndex(a1, v29);
}

uint64_t FigPartialSampleTableAccessorStepInPresentationOrder(uint64_t *a1, uint64_t a2, _QWORD *a3, CMTime *a4)
{
  __int128 v5;
  CMTimeEpoch v6;
  __int128 v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  CMTime *v14;
  __int128 v15;
  CMTimeRange lhs;
  CMTime rhs;
  char v18;
  CMTime v19;
  uint64_t v20;
  _OWORD v21[3];
  __int128 v22;
  CMTimeEpoch v23;
  CMTimeRange v24;
  CMTime v25;

  v5 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v25.value = *MEMORY[0x1E0CA2E18];
  v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v25.epoch = v6;
  v7 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v24.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v24.start.epoch = v7;
  *(_OWORD *)&v24.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  if (a1)
  {
    v15 = v5;
    FigPartialSampleTableGetDecodeTimeRange(*a1, &v24, 0);
    v11 = 0;
    if (a2)
    {
      if (a2 > 0)
        v12 = 1;
      else
        v12 = -1;
      while (1)
      {
        v23 = 0;
        v22 = 0u;
        memset(v21, 0, sizeof(v21));
        v20 = 0;
        v18 = 0;
        result = fpst_reading_runSegmentAtIndex(*a1, 14, a1[14], &v20);
        if ((_DWORD)result)
          break;
        v14 = (CMTime *)(v20 + 8);
        if (a2 <= 0)
          v14 = (CMTime *)(v20 + 32);
        v19 = *v14;
        result = FigPartialSampleTableAccessorGetSampleTiming(a1, (uint64_t)v21);
        if ((_DWORD)result)
          break;
        *(_OWORD *)&lhs.start.value = v22;
        lhs.start.epoch = v23;
        rhs = v19;
        CMTimeAdd(&v25, &lhs.start, &rhs);
        lhs = v24;
        rhs = v25;
        if (!CMTimeRangeContainsTime(&lhs, &rhs))
        {
          if (!a4)
            goto LABEL_18;
          result = 0;
          *a4 = v25;
          break;
        }
        lhs.start = v19;
        result = fpst_accessor_stepByDecodeTimeInternal(a1, &lhs.start, 1, &v18);
        if ((_DWORD)result)
          break;
        if (v18)
        {
          result = FigSignalErrorAt();
          break;
        }
        v11 += v12;
        if (a2 == v11)
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      if (a4)
      {
        result = 0;
        *(_OWORD *)&a4->value = v15;
        a4->epoch = v6;
      }
      else
      {
LABEL_18:
        result = 0;
      }
    }
  }
  else
  {
    result = FigSignalErrorAt();
    v11 = 0;
  }
  if (a3)
  {
    if (!(_DWORD)result)
      *a3 = v11;
  }
  return result;
}

uint64_t FigPartialSampleTableGetDecodeTimeRange(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v3;
  _OWORD *v7;
  uint64_t SampleTiming;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v15;
  CMTime v16;
  CMTime lhs;
  CMTime v18[3];
  CMTime v19;
  CMTime v20;
  __int128 v21;
  uint64_t v22;
  CMTimeRange v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;

  v25 = 0;
  v26 = 0;
  v24 = 0;
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *(_OWORD *)&v23.start.value = *MEMORY[0x1E0CA2E40];
  *(_OWORD *)&v23.start.epoch = v3;
  *(_OWORD *)&v23.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
  v21 = *MEMORY[0x1E0CA2E18];
  v22 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (!a2 || !a1)
  {
    v13 = FigSignalErrorAt();
    v9 = 0;
    goto LABEL_16;
  }
  v7 = (_OWORD *)(a1 + 104);
  if ((*(_BYTE *)(a1 + 116) & 1) == 0
    || (*(_BYTE *)(a1 + 140) & 1) == 0
    || *(_QWORD *)(a1 + 144)
    || (*(_QWORD *)(a1 + 128) & 0x8000000000000000) != 0)
  {
    memset(v18, 0, sizeof(v18));
    SampleTiming = FigPartialSampleTableCreateAccessorAtIndex((_QWORD *)a1, 0, &v26);
    v9 = v26;
    if (!(_DWORD)SampleTiming)
    {
      SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v26, (uint64_t)v18);
      if (!(_DWORD)SampleTiming)
      {
        v20 = v18[2];
        SampleTiming = FigPartialSampleTableAccessorStepInDecodeOrder(v9, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - 1, &v25);
        if (!(_DWORD)SampleTiming)
        {
          if (v25 == *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) - 1)
          {
            SampleTiming = FigPartialSampleTableAccessorGetSampleTiming(v9, (uint64_t)v18);
            if (!(_DWORD)SampleTiming)
            {
              v19 = v18[2];
              SampleTiming = fpst_reading_runSegmentAtIndex(*v9, 10, v9[10], &v24);
              if (!(_DWORD)SampleTiming)
              {
                v10 = v24;
                lhs = v19;
                v16 = *(CMTime *)(v24 + 32);
                CMTimeAdd(&v19, &lhs, &v16);
                lhs = v20;
                v16 = v19;
                CMTimeRangeFromTimeToTime(&v23, &lhs, &v16);
                v21 = *(_OWORD *)(v10 + 32);
                v22 = *(_QWORD *)(v10 + 48);
                if (!*(_QWORD *)(a1 + 176))
                {
                  v11 = *(_OWORD *)&v23.start.epoch;
                  *v7 = *(_OWORD *)&v23.start.value;
                  *(_OWORD *)(a1 + 120) = v11;
                  *(_OWORD *)(a1 + 136) = *(_OWORD *)&v23.duration.timescale;
                  *(_OWORD *)(a1 + 80) = v21;
                  *(_QWORD *)(a1 + 96) = v22;
                }
                goto LABEL_14;
              }
            }
          }
          else
          {
            SampleTiming = FigSignalErrorAt();
          }
        }
      }
    }
    v13 = SampleTiming;
    goto LABEL_16;
  }
  v9 = 0;
  v15 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v23.start.value = *v7;
  *(_OWORD *)&v23.start.epoch = v15;
  *(_OWORD *)&v23.duration.timescale = *(_OWORD *)(a1 + 136);
  v21 = *(_OWORD *)(a1 + 80);
  v22 = *(_QWORD *)(a1 + 96);
LABEL_14:
  v12 = *(_OWORD *)&v23.start.epoch;
  *a2 = *(_OWORD *)&v23.start.value;
  a2[1] = v12;
  a2[2] = *(_OWORD *)&v23.duration.timescale;
  v13 = 0;
  if (a3)
  {
    *(_OWORD *)a3 = v21;
    *(_QWORD *)(a3 + 16) = v22;
  }
LABEL_16:
  FigPartialSampleTableAccessorDestroy((const void **)v9);
  return v13;
}

uint64_t FigPartialSampleTableAccessorGetSampleTiming(uint64_t *a1, uint64_t a2)
{
  CMTimeEpoch v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v13;
  CMTime v14;
  CMTime lhs;
  CMTime time;
  CMTime rhs;
  CMTime v18;
  uint64_t v19;

  v19 = 0;
  if (a1)
  {
    if (!a2)
      return 0;
    v13 = *MEMORY[0x1E0CA2E18];
    *(_OWORD *)&v18.value = *MEMORY[0x1E0CA2E18];
    v4 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    v18.epoch = v4;
    v5 = fpst_reading_runSegmentAtIndex(*a1, 10, a1[10], &v19);
    if (!(_DWORD)v5)
    {
      v6 = v19;
      v7 = a1[18] - *(_QWORD *)v19;
      if (v7 >= 0x80000000)
      {
        return FigSignalErrorAt();
      }
      else
      {
        time = *(CMTime *)(v19 + 32);
        CMTimeMultiply(&rhs, &time, v7);
        v8 = *(_OWORD *)(v6 + 8);
        time.epoch = *(_QWORD *)(v6 + 24);
        *(_OWORD *)&time.value = v8;
        CMTimeAdd(&v18, &time, &rhs);
        *(CMTime *)(a2 + 48) = v18;
        v5 = fpst_reading_runSegmentAtIndex(*a1, 11, a1[11], &v19);
        if (!(_DWORD)v5)
        {
          v9 = *(_QWORD *)(v19 + 24);
          *(_OWORD *)a2 = *(_OWORD *)(v19 + 8);
          *(_QWORD *)(a2 + 16) = v9;
          *(_OWORD *)&time.value = v13;
          time.epoch = v4;
          v10 = fpst_reading_runSegmentAtIndex(*a1, 12, a1[12], &v19);
          if (!(_DWORD)v10)
          {
            lhs = v18;
            v11 = *(_OWORD *)(v19 + 8);
            v14.epoch = *(_QWORD *)(v19 + 24);
            *(_OWORD *)&v14.value = v11;
            CMTimeAdd(&time, &lhs, &v14);
            *(CMTime *)(a2 + 24) = time;
          }
          return v10;
        }
      }
    }
    return v5;
  }
  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableAccessorGetUnrefinedSampleLocationInByteStreamOrDataSourceURL(uint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;

  v18 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (a2 | a3)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 1, a1[1], &v18);
    if ((_DWORD)result)
      return result;
    v11 = v18[2];
    v12 = v18[1] + (a1[18] - *v18) * v11;
    if (a2)
    {
      *(_QWORD *)a2 = v12;
      *(_QWORD *)(a2 + 8) = v11;
    }
    if (a3)
    {
      result = fpst_reading_runSegmentAtIndex(*a1, 2, a1[2], &v18);
      if ((_DWORD)result == -17712)
      {
        v14 = 0;
        v15 = 0;
        v13 = 1;
      }
      else
      {
        if ((_DWORD)result)
          return result;
        v13 = 0;
        v14 = v18[1] + v12;
        v15 = 1;
      }
      *(_QWORD *)a3 = v14;
      result = fpst_reading_runSegmentAtIndex(*a1, 3, a1[3], &v18);
      if (v15 && (_DWORD)result == -17712)
        return FigSignalErrorAt();
      v16 = (_DWORD)result ? 0 : v13;
      if (v16 == 1)
        return FigSignalErrorAt();
      if ((_DWORD)result == -17712)
      {
        v17 = 0;
      }
      else
      {
        if ((_DWORD)result)
          return result;
        v17 = v18[1];
      }
      *(_QWORD *)(a3 + 8) = v17;
    }
  }
  if (a4 | a5)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 6, a1[6], &v18);
    if ((_DWORD)result)
      return result;
    if (a4)
      *(_QWORD *)a4 = v18[1];
    if (a5)
    {
      result = 0;
      *(_QWORD *)a5 = v18[2];
      return result;
    }
  }
  return 0;
}

uint64_t FigPartialSampleTableAccessorGetUnrefinedSampleLocationInByteSource(uint64_t *a1, unint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (a2 | a3)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 1, a1[1], &v16);
    if ((_DWORD)result)
      return result;
    v9 = v16[2];
    v10 = v16[1] + (a1[18] - *v16) * v9;
    if (a2)
    {
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v9;
    }
    if (a3)
    {
      result = fpst_reading_runSegmentAtIndex(*a1, 2, a1[2], &v16);
      if ((_DWORD)result == -17712)
      {
        v12 = 0;
        v13 = 0;
        v11 = 1;
      }
      else
      {
        if ((_DWORD)result)
          return result;
        v11 = 0;
        v12 = v16[1] + v10;
        v13 = 1;
      }
      *(_QWORD *)a3 = v12;
      result = fpst_reading_runSegmentAtIndex(*a1, 3, a1[3], &v16);
      if (v13 && (_DWORD)result == -17712)
        return FigSignalErrorAt();
      v14 = (_DWORD)result ? 0 : v11;
      if (v14 == 1)
        return FigSignalErrorAt();
      if ((_DWORD)result == -17712)
      {
        v15 = 0;
      }
      else
      {
        if ((_DWORD)result)
          return result;
        v15 = v16[1];
      }
      *(_QWORD *)(a3 + 8) = v15;
    }
  }
  if (!a4)
    return 0;
  result = fpst_reading_runSegmentAtIndex(*a1, 5, a1[5], &v16);
  if (!(_DWORD)result)
    *a4 = v16[1];
  return result;
}

uint64_t FigPartialSampleTableAccessorGetChunkDetailsInByteSource(uint64_t *a1, _OWORD *a2, _QWORD *a3, unint64_t a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 4, a1[4], &v12);
    if ((_DWORD)result)
      return result;
    *a2 = *(_OWORD *)(v12 + 8);
  }
  if (a3)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 5, a1[5], &v12);
    if ((_DWORD)result)
      return result;
    *a3 = *(_QWORD *)(v12 + 8);
  }
  if (a4 | a5)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 7, a1[7], &v12);
    if ((_DWORD)result)
      return result;
    if (a4)
      *(_OWORD *)a4 = *(_OWORD *)(v12 + 8);
    if (a5)
    {
      v11 = a1[18] - *(_QWORD *)v12 + *(_QWORD *)(v12 + 24);
      if (v11 != 0x7FFFFFFFFFFFFFFFLL)
      {
        result = 0;
        *(_QWORD *)a5 = v11;
        return result;
      }
      return FigSignalErrorAt();
    }
  }
  return 0;
}

uint64_t FigPartialSampleTableAccessorGetChunkDetailsInByteStreamOrDataSourceURL(uint64_t *a1, _OWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 4, a1[4], &v14);
    if ((_DWORD)result)
      return result;
    *a2 = *(_OWORD *)(v14 + 8);
  }
  if (a3 | a4)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 6, a1[6], &v14);
    if ((_DWORD)result)
      return result;
    if (a3)
      *(_QWORD *)a3 = *(_QWORD *)(v14 + 8);
    if (a4)
      *(_QWORD *)a4 = *(_QWORD *)(v14 + 16);
  }
  if (a5 | a6)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 7, a1[7], &v14);
    if ((_DWORD)result)
      return result;
    if (a5)
      *(_OWORD *)a5 = *(_OWORD *)(v14 + 8);
    if (a6)
    {
      v13 = a1[18] - *(_QWORD *)v14 + *(_QWORD *)(v14 + 24);
      if (v13 != 0x7FFFFFFFFFFFFFFFLL)
      {
        result = 0;
        *(_QWORD *)a6 = v13;
        return result;
      }
      return FigSignalErrorAt();
    }
  }
  return 0;
}

uint64_t FigPartialSampleTableAccessorGetFormatDescriptionIdentifier(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return 0;
  result = fpst_reading_runSegmentAtIndex(*a1, 17, a1[17], &v4);
  if (!(_DWORD)result)
    *a2 = *(_QWORD *)(v4 + 8);
  return result;
}

uint64_t FigPartialSampleTableAccessorGetSyncInfo(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return 0;
  result = fpst_reading_runSegmentAtIndex(*a1, 9, a1[9], &v4);
  if (!(_DWORD)result)
    *a2 = *(_QWORD *)(v4 + 8);
  return result;
}

uint64_t FigPartialSampleTableAccessorGetMinimumUpcomingPresentationTime(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  CMTimeScale v10;
  CMTimeFlags v11;
  CMTimeEpoch v12;
  uint64_t v13;
  uint64_t v14;
  CMTime v15;
  CMTime time1;
  CMTime v17[3];
  uint64_t v18;
  CMTimeValue v19;
  CMTimeScale v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if ((*(_BYTE *)(*(_QWORD *)(*a1 + 16) + 1) & 2) == 0)
    return 4294949584;
  if (!a3)
    return 0;
  result = fpst_reading_runSegmentAtIndex(*a1, 16, a1[16], &v18);
  if (!(_DWORD)result)
  {
    v8 = v18;
    v9 = *(_QWORD *)(v18 + 24);
    *(_OWORD *)a3 = *(_OWORD *)(v18 + 8);
    *(_QWORD *)(a3 + 16) = v9;
    v19 = *(_QWORD *)(v8 + 32);
    v10 = *(_DWORD *)(v8 + 40);
    v11 = *(_DWORD *)(v8 + 44);
    v12 = *(_QWORD *)(v8 + 48);
    *(_QWORD *)a4 = v19;
    v20 = v10;
    *(_DWORD *)(a4 + 8) = v10;
    *(_DWORD *)(a4 + 12) = v11;
    *(_QWORD *)(a4 + 16) = v12;
    if (a2)
    {
      if ((v11 & 1) != 0)
      {
        memset(v17, 0, sizeof(v17));
        FigPartialSampleTableAccessorGetSampleTiming(a2, (uint64_t)v17);
        time1.timescale = v20;
        time1.flags = v11;
        time1.epoch = v12;
        v15 = v17[2];
        time1.value = v19;
        if (CMTimeCompare(&time1, &v15) >= 1)
        {
          v13 = MEMORY[0x1E0CA2E30];
          *(_OWORD *)a3 = *MEMORY[0x1E0CA2E30];
          v14 = MEMORY[0x1E0CA2E18];
          *(_QWORD *)(a3 + 16) = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a4 = *(_OWORD *)v14;
          *(_QWORD *)(a4 + 16) = *(_QWORD *)(v14 + 16);
          return 4294949584;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetPresentationTimeRange(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  CMTimeFlags v7;
  CMTimeEpoch v8;
  __int128 v9;
  CMTime duration;
  CMTimeRange time1;
  CMTime time2;
  CMTime v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  CMTimeValue v17;
  CMTimeScale v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return 0;
  v4 = MEMORY[0x1E0CA2E40];
  v5 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *a2 = *MEMORY[0x1E0CA2E40];
  a2[1] = v5;
  a2[2] = *(_OWORD *)(v4 + 32);
  v15 = 0;
  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  result = FigPartialSampleTableAccessorGetSampleTiming(a1, (uint64_t)v13);
  if (!(_DWORD)result)
  {
    result = fpst_reading_runSegmentAtIndex(*a1, 12, a1[12], &v16);
    if (!(_DWORD)result)
    {
      v17 = *(_QWORD *)(v16 + 32);
      v7 = *(_DWORD *)(v16 + 44);
      v18 = *(_DWORD *)(v16 + 40);
      if ((v7 & 0x1D) == 1)
      {
        v8 = *(_QWORD *)(v16 + 48);
        time1.start.value = *(_QWORD *)(v16 + 32);
        time1.start.timescale = *(_DWORD *)(v16 + 40);
        time1.start.flags = v7;
        time1.start.epoch = v8;
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
        if (CMTimeCompare(&time1.start, &time2))
        {
          time2 = v13[1];
          duration.value = v17;
          duration.timescale = v18;
          duration.flags = v7;
          duration.epoch = v8;
          CMTimeRangeMake(&time1, &time2, &duration);
          v9 = *(_OWORD *)&time1.start.epoch;
          *a2 = *(_OWORD *)&time1.start.value;
          a2[1] = v9;
          a2[2] = *(_OWORD *)&time1.duration.timescale;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetDependencyInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int16 v4;
  uint64_t v5;

  v5 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return 0;
  result = fpst_reading_runSegmentAtIndex(*a1, 8, a1[8], &v5);
  if (!(_DWORD)result)
  {
    v4 = *(_WORD *)(v5 + 12);
    *(_DWORD *)a2 = *(_DWORD *)(v5 + 8);
    *(_WORD *)(a2 + 4) = v4;
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorGetExtendedDependencyAttributeInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v6 = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (!a2)
    return 0;
  result = fpst_reading_runSegmentAtIndex(*a1, 13, a1[13], &v6);
  if (!(_DWORD)result)
  {
    v4 = *(_QWORD *)(v6 + 40);
    v5 = *(_OWORD *)(v6 + 24);
    *(_OWORD *)a2 = *(_OWORD *)(v6 + 8);
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v4;
  }
  return result;
}

uint64_t FigPartialSampleTableAccessorCopy(uint64_t a1, _QWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (!a1 || !a2 || !*(_QWORD *)a1)
    return FigSignalErrorAt();
  v4 = malloc_type_calloc(1uLL, 0x98uLL, 0x102004019573705uLL);
  v5 = *(_OWORD *)(a1 + 16);
  *v4 = *(_OWORD *)a1;
  v4[1] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v8 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v4[4] = *(_OWORD *)(a1 + 64);
  v4[5] = v6;
  v4[2] = v8;
  v4[3] = v7;
  v10 = *(_OWORD *)(a1 + 112);
  v9 = *(_OWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 96);
  *((_QWORD *)v4 + 18) = *(_QWORD *)(a1 + 144);
  v4[7] = v10;
  v4[8] = v9;
  v4[6] = v11;
  CFRetain(*(CFTypeRef *)v4);
  *a2 = v4;
  return 0;
}

void FigPartialSampleTableAccessorDestroy(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    free(a1);
  }
}

uint64_t FigPartialSampleTableAccessorGetDecodeToPresentationTimeDeltaRange(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  if (!a1)
    return FigSignalErrorAt();
  result = fpst_reading_runSegmentAtIndex(*a1, 15, a1[15], &v8);
  if (!(_DWORD)result)
  {
    if (a2)
    {
      v6 = *(_QWORD *)(v8 + 24);
      *(_OWORD *)a2 = *(_OWORD *)(v8 + 8);
      *(_QWORD *)(a2 + 16) = v6;
    }
    result = 0;
    if (a3)
    {
      v7 = *(_QWORD *)(v8 + 48);
      *(_OWORD *)a3 = *(_OWORD *)(v8 + 32);
      *(_QWORD *)(a3 + 16) = v7;
    }
  }
  return result;
}

uint64_t FigPartialSampleTableGetSampleCount(uint64_t a1, _QWORD *a2)
{
  if (!a2 || !a1)
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  return 0;
}

uint64_t FigPartialSampleTableRecommendSampleTableFlagsForCursor(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;

  if (!a3)
    return FigSignalErrorAt();
  v5 = a1 & 0xFFFFFFFFFFFFFFBFLL;
  if ((a1 & 8) != 0)
  {
    if ((a1 & 0x10) != 0 && !*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 192))
      v5 = a1 & 0xFFFFFFFFFFFFFFAFLL;
    if ((v5 & 0x10) == 0 && !*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144))
      v5 &= 0xFFFFFFFFFFFFFFB7;
  }
  else if ((a1 & 0x10) != 0)
  {
    v5 = a1 & 0xFFFFFFFFFFFFFFAFLL;
  }
  v6 = v5 & 0xFFFFFFFFFFFFFFFDLL;
  if ((v5 & 4) != 0 && !*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152))
    v6 = v5 & 0xFFFFFFFFFFFFFFF9;
  if ((v6 & 0x100) != 0 && !*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 200))
    v6 &= ~0x100uLL;
  *a3 = v6 & 0xFFFFFFFFFFFFFFDFLL;
  return 0;
}

uint64_t FigPartialSampleTableAccessorCopyUnrefinedSampleLocationInTranslatedByteStreamOrDataSourceURL(uint64_t *a1, unint64_t a2, unint64_t a3, CFTypeRef *a4, CFTypeRef *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t UnrefinedSampleLocationInByteStreamOrDataSourceURL;
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  CFTypeRef v16;
  CFTypeRef cf;

  v16 = 0;
  cf = 0;
  v14 = 0;
  v15 = 0;
  if (!a1)
    goto LABEL_20;
  v7 = *a1;
  v8 = *(_QWORD *)(*a1 + 72);
  UnrefinedSampleLocationInByteStreamOrDataSourceURL = FigPartialSampleTableAccessorGetUnrefinedSampleLocationInByteStreamOrDataSourceURL(a1, a2, a3, (unint64_t)&v15, (unint64_t)&v14);
  if ((_DWORD)UnrefinedSampleLocationInByteStreamOrDataSourceURL)
    goto LABEL_21;
  if (a4 && v15)
  {
    v10 = *(uint64_t (**)(uint64_t))(v7 + 40);
    if (v10)
    {
      UnrefinedSampleLocationInByteStreamOrDataSourceURL = v10(v8);
      if (!(_DWORD)UnrefinedSampleLocationInByteStreamOrDataSourceURL)
        goto LABEL_7;
LABEL_21:
      v12 = UnrefinedSampleLocationInByteStreamOrDataSourceURL;
      goto LABEL_15;
    }
LABEL_20:
    UnrefinedSampleLocationInByteStreamOrDataSourceURL = FigSignalErrorAt();
    goto LABEL_21;
  }
LABEL_7:
  if (!a5 || !v14)
    goto LABEL_11;
  v11 = *(uint64_t (**)(uint64_t))(v7 + 48);
  if (!v11)
    goto LABEL_20;
  UnrefinedSampleLocationInByteStreamOrDataSourceURL = v11(v8);
  if ((_DWORD)UnrefinedSampleLocationInByteStreamOrDataSourceURL)
    goto LABEL_21;
LABEL_11:
  if (a4)
  {
    *a4 = cf;
    cf = 0;
  }
  v12 = 0;
  if (a5)
  {
    *a5 = v16;
    v16 = 0;
  }
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v16)
    CFRelease(v16);
  return v12;
}

uint64_t FigPartialSampleTableAccessorCopyTranslatedFormatDescription(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t FormatDescriptionIdentifier;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;
  CFTypeRef cf;

  v8 = 0;
  cf = 0;
  if (!a1)
    return FigSignalErrorAt();
  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 72);
  FormatDescriptionIdentifier = FigPartialSampleTableAccessorGetFormatDescriptionIdentifier(a1, &v8);
  if (!(_DWORD)FormatDescriptionIdentifier && a2 && v8)
  {
    v6 = *(uint64_t (**)(uint64_t))(v3 + 56);
    if (v6)
    {
      FormatDescriptionIdentifier = v6(v4);
      if ((_DWORD)FormatDescriptionIdentifier)
      {
        if (cf)
          CFRelease(cf);
      }
      else
      {
        *a2 = cf;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return FormatDescriptionIdentifier;
}

uint64_t FigPartialSampleTableAccessorCopyTranslatedSampleDependencyAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  if (a1)
  {
    v3 = 0;
    if (!a2 || a1[18] == -1)
      return v3;
    v4 = *(uint64_t (**)(_QWORD))(*a1 + 64);
    if (v4)
    {
      v3 = v4(*(_QWORD *)(*a1 + 72));
      if (!(_DWORD)v3)
        *a2 = 0;
      return v3;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableAccessorCopyChunkDetailsInTranslatedByteStreamOrDataSourceURL(uint64_t *a1, _OWORD *a2, CFTypeRef *a3, CFTypeRef *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t ChunkDetailsInByteStreamOrDataSourceURL;
  uint64_t (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;

  v17 = 0;
  cf = 0;
  v15 = 0;
  v16 = 0;
  if (!a1)
    goto LABEL_20;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 72);
  ChunkDetailsInByteStreamOrDataSourceURL = FigPartialSampleTableAccessorGetChunkDetailsInByteStreamOrDataSourceURL(a1, a2, (unint64_t)&v16, (unint64_t)&v15, a5, a6);
  if ((_DWORD)ChunkDetailsInByteStreamOrDataSourceURL)
    goto LABEL_21;
  if (a3 && v16)
  {
    v11 = *(uint64_t (**)(uint64_t))(v8 + 40);
    if (v11)
    {
      ChunkDetailsInByteStreamOrDataSourceURL = v11(v9);
      if (!(_DWORD)ChunkDetailsInByteStreamOrDataSourceURL)
        goto LABEL_7;
LABEL_21:
      v13 = ChunkDetailsInByteStreamOrDataSourceURL;
      goto LABEL_15;
    }
LABEL_20:
    ChunkDetailsInByteStreamOrDataSourceURL = FigSignalErrorAt();
    goto LABEL_21;
  }
LABEL_7:
  if (!a4 || !v15)
    goto LABEL_11;
  v12 = *(uint64_t (**)(uint64_t))(v8 + 48);
  if (!v12)
    goto LABEL_20;
  ChunkDetailsInByteStreamOrDataSourceURL = v12(v9);
  if ((_DWORD)ChunkDetailsInByteStreamOrDataSourceURL)
    goto LABEL_21;
LABEL_11:
  if (a3)
  {
    *a3 = cf;
    cf = 0;
  }
  v13 = 0;
  if (a4)
  {
    *a4 = v17;
    v17 = 0;
  }
LABEL_15:
  if (cf)
    CFRelease(cf);
  if (v17)
    CFRelease(v17);
  return v13;
}

uint64_t FigPartialSampleTableBuildFromFigSampleCursorAndWriteToBlockBuffer(const void *a1, OpaqueCMBlockBuffer *a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned __int8 a8, int a9, int a10, CMTimeValue *a11, _DWORD *a12, char *a13)
{
  _OWORD *v13;
  int v17;
  uint64_t FigBaseObject;
  void (*v19)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  void (*v20)(const void *, CMTimeRange *);
  CMTimeEpoch epoch;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t (*v25)(const void *, CFTypeRef *);
  uint64_t (*v26)(const void *, CMTime *);
  int v27;
  uint64_t v28;
  CFTypeRef v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(CFTypeRef, const void *, _QWORD);
  CFTypeRef v33;
  uint64_t (*v34)(CFTypeRef, CMTime *);
  __int128 v35;
  CFTypeRef v36;
  void (*v37)(CFTypeRef, uint64_t, uint64_t *);
  BOOL v38;
  CFTypeRef v39;
  uint64_t v40;
  uint64_t v41;
  CFTypeRef v42;
  void (*v43)(CFTypeRef, uint64_t, _QWORD);
  uint64_t (*v44)(const void *, CFTypeRef *);
  uint64_t v45;
  CFTypeRef v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(CFTypeRef, const void *, uint64_t);
  CFTypeRef v50;
  uint64_t (*v51)(CFTypeRef, CMTime *);
  CFTypeRef v52;
  void (*v53)(CFTypeRef, uint64_t, uint64_t *);
  CFTypeRef v54;
  uint64_t (*v55)(const void *, CFTypeRef);
  uint64_t (*v56)(const void *, CFTypeRef *);
  CFTypeRef v57;
  uint64_t (*v58)(CFTypeRef, CFTypeRef *);
  CFTypeRef v59;
  uint64_t (*v60)(CFTypeRef, uint64_t, uint64_t *);
  BOOL v61;
  int v62;
  uint64_t v64;
  int v65;
  CFTypeRef v66;
  CFTypeRef v67;
  CFTypeRef v68;
  CMTimeEpoch v69;
  CMTimeValue v70;
  uint64_t (*v71)(CFTypeRef, _BYTE *, CMTimeEpoch *, CMTime *, CMTime *);
  uint64_t appended;
  uint64_t (*v73)(CFTypeRef, CFTypeRef *, CFTypeRef *, _BYTE *, CMTimeEpoch *, uint64_t *, uint64_t *, char *, __int16 *, char *);
  CFTypeRef v74;
  uint64_t (*v75)(uint64_t);
  uint64_t (*v76)(uint64_t);
  uint64_t (*v77)(CFTypeRef, __int128 *);
  uint64_t (*v78)(CFTypeRef, _BYTE *);
  uint64_t (*v79)(CFTypeRef, _BYTE *);
  uint64_t (*v80)(CFTypeRef, _OWORD *, char *);
  uint64_t (*v81)(CFTypeRef, _OWORD *);
  void (*v82)(CFTypeRef, _BYTE *, _BYTE *, _BYTE *, _BYTE *);
  uint64_t (*v83)(CFTypeRef, CFDictionaryRef *);
  uint64_t v84;
  uint64_t (*v85)(CFTypeRef, CFTypeRef *);
  CFTypeRef v86;
  unsigned int (*v87)(CFTypeRef, uint64_t, CMTimeEpoch *);
  CFTypeRef v88;
  uint64_t (*v89)(CFTypeRef, _OWORD *);
  CFTypeRef v90;
  uint64_t (*v91)(CFTypeRef, char *);
  uint64_t (*v92)(CFTypeRef, CFTypeRef *);
  CFTypeRef v93;
  unsigned int (*v94)(CFTypeRef, uint64_t, CMTimeEpoch *);
  CFTypeRef v95;
  uint64_t (*v96)(CFTypeRef, char *);
  __int128 v97;
  uint64_t v98;
  CFTypeRef v99;
  uint64_t (*v100)(CFTypeRef, uint64_t, uint64_t *);
  uint64_t v101;
  void (*v102)(CFTypeRef, CMTimeRange *);
  CFTypeRef v103;
  uint64_t v104;
  uint64_t v105;
  CFTypeRef v106;
  uint64_t (*v107)(CFTypeRef, uint64_t, uint64_t *);
  uint64_t v108;
  CFTypeRef v109;
  CFTypeRef v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL4 v113;
  uint64_t (*v114)(CFTypeRef, CFTypeRef);
  CFTypeRef v115;
  uint64_t (*v116)(CFTypeRef, uint64_t, uint64_t *);
  int v117;
  uint64_t (*v119)(CFTypeRef, const void *);
  CFTypeRef v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(CFTypeRef, const void *);
  uint64_t (*v124)(const void *, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, CMTimeRange *, _QWORD, _QWORD, _QWORD);
  CFTypeRef v125;
  uint64_t (*v126)(CFTypeRef, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD);
  int v127;
  __int128 v128;
  CMTimeEpoch v130;
  uint64_t v132;
  int v133;
  CMTimeFlags flags;
  int v135;
  CMTimeEpoch v136;
  char v137;
  int v138;
  int v141;
  int v142;
  uint64_t v143;
  CMTimeValue v144;
  __int128 v145;
  uint64_t v146;
  CMTime time1;
  CMTime v148;
  CMTime rhs;
  CMTime lhs;
  CMTime v151;
  uint64_t v152;
  CFTypeRef cf;
  CFTypeRef v154;
  CFTypeRef v155;
  CFTypeRef v156;
  _BYTE time2[32];
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  char v161;
  __int16 v162;
  uint64_t v163;
  uint64_t v164;
  CMTimeEpoch v165;
  CFTypeRef v166;
  CFTypeRef v167;
  CFTypeRef v168;
  CFDictionaryRef dictionaryRepresentation;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTimeRange range;
  __int128 v173;
  __int128 v174;
  _QWORD v175[10];
  _OWORD v176[3];
  _OWORD v177[3];
  _OWORD v178[3];
  CMTime v179[2];
  _BYTE v180[48];
  __int128 v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v155 = 0;
  v156 = 0;
  cf = 0;
  v154 = 0;
  v13 = (_OWORD *)MEMORY[0x1E0CA2E18];
  v152 = 0;
  value = *MEMORY[0x1E0CA2E18];
  timescale = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 8);
  if (a10 <= 0)
  {
LABEL_309:
    v24 = FigSignalErrorAt();
LABEL_310:
    v84 = v24;
    goto LABEL_294;
  }
  flags = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v136 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  if (a10 >= a9)
    v17 = a9;
  else
    v17 = a10;
  v133 = v17;
  v132 = *MEMORY[0x1E0C9AE00];
  v141 = a10;
  v135 = a8;
  if (!a6
    || (char)a8 < 1
    || (dictionaryRepresentation = 0,
        FigBaseObject = FigSampleCursorGetFigBaseObject(a1),
        (v19 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48)) == 0))
  {
    epoch = v136;
LABEL_13:
    v130 = epoch;
    goto LABEL_14;
  }
  v19(FigBaseObject, CFSTR("CursorPlayableHorizon"), v132, &dictionaryRepresentation);
  v130 = v136;
  if (dictionaryRepresentation)
  {
    *(_OWORD *)&range.start.value = *v13;
    range.start.epoch = v136;
    memset(time2, 0, 24);
    CMTimeMakeFromDictionary((CMTime *)time2, dictionaryRepresentation);
    CFRelease(dictionaryRepresentation);
    v20 = *(void (**)(const void *, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v20)
      v20(a1, &range);
    lhs = range.start;
    rhs = *(CMTime *)time2;
    CMTimeAdd(&v151, &lhs, &rhs);
    value = v151.value;
    flags = v151.flags;
    timescale = v151.timescale;
    epoch = v151.epoch;
    goto LABEL_13;
  }
LABEL_14:
  v22 = 0;
  v143 = 0;
  v138 = 0;
  v144 = -1;
  v137 = 1;
  v23 = *v13;
  v145 = *v13;
  do
  {
    *(_OWORD *)&v151.value = v23;
    v151.epoch = v136;
    v24 = FigPartialSampleTableCreateForWriting(v132, a2, a5, (uint64_t *)&v156);
    if ((_DWORD)v24)
      goto LABEL_310;
    v25 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v25)
      goto LABEL_293;
    v24 = v25(a1, &v155);
    if ((_DWORD)v24)
      goto LABEL_310;
    v26 = *(uint64_t (**)(const void *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
    if (!v26)
      goto LABEL_293;
    v24 = v26(a1, &v151);
    if ((_DWORD)v24)
      goto LABEL_310;
    v27 = v135;
    if ((v135 & 0x80) != 0)
    {
      if ((*(_BYTE *)(a7 + 12) & 1) != 0
        && (*(_BYTE *)(a7 + 36) & 1) != 0
        && !*(_QWORD *)(a7 + 40)
        && (*(_QWORD *)(a7 + 24) & 0x8000000000000000) == 0)
      {
        v128 = *(_OWORD *)(a7 + 16);
        *(_OWORD *)&range.start.value = *(_OWORD *)a7;
        *(_OWORD *)&range.start.epoch = v128;
        *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a7 + 32);
        CMTimeRangeGetEnd(&v148, &range);
        range.start = v151;
        if ((CMTimeCompare(&range.start, &v148) & 0x80000000) == 0)
        {
          v27 = 1;
LABEL_22:
          v135 = v27;
          if ((*(_BYTE *)(a7 + 12) & 1) == 0
            || (*(_BYTE *)(a7 + 36) & 1) == 0
            || *(_QWORD *)(a7 + 40)
            || (*(_QWORD *)(a7 + 24) & 0x8000000000000000) != 0
            || (range.start = v151,
                *(_OWORD *)time2 = *(_OWORD *)a7,
                *(_QWORD *)&time2[16] = *(_QWORD *)(a7 + 16),
                CMTimeCompare(&range.start, (CMTime *)time2) > 0))
          {
            if (v133 >= 1)
            {
              v28 = 1;
              while (1)
              {
                if ((*(_BYTE *)(a7 + 12) & 1) == 0
                  || (*(_BYTE *)(a7 + 36) & 1) == 0
                  || *(_QWORD *)(a7 + 40)
                  || (*(_QWORD *)(a7 + 24) & 0x8000000000000000) != 0)
                {
                  if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
                    break;
                  v29 = v155;
                  v30 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                  if (a1)
                    v31 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
                  else
                    v31 = 0;
                  if (v30 == v31)
                  {
                    v32 = *(unsigned int (**)(CFTypeRef, const void *, _QWORD))(v30 + 80);
                    if (v32)
                    {
                      if (v32(v29, a1, 0))
                        goto LABEL_95;
                    }
                  }
                }
                else
                {
                  v33 = v155;
                  v34 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                  if (!v34)
                    goto LABEL_293;
                  v24 = v34(v33, &v151);
                  if ((_DWORD)v24)
                    goto LABEL_310;
                  v35 = *(_OWORD *)(a7 + 16);
                  *(_OWORD *)&range.start.value = *(_OWORD *)a7;
                  *(_OWORD *)&range.start.epoch = v35;
                  *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a7 + 32);
                  CMTimeRangeGetEnd(&time1, &range);
                  range.start = v151;
                  if ((CMTimeCompare(&time1, &range.start) & 0x80000000) == 0)
                    goto LABEL_95;
                }
                v36 = v155;
                v37 = *(void (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 168);
                if (v37)
                  v37(v36, -1, &v152);
                if (v152 == -1)
                {
                  v38 = v28++ < v133;
                  if (v38)
                    continue;
                }
                break;
              }
            }
            v39 = v155;
            v40 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (v39)
              v41 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            else
              v41 = 0;
            if (v40 == v41)
            {
              v55 = *(uint64_t (**)(const void *, CFTypeRef))(v40 + 32);
              if (v55)
              {
                if (v55(a1, v39))
                {
                  if (v155)
                  {
                    CFRelease(v155);
                    v155 = 0;
                  }
                  v56 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 8);
                  if (!v56)
                  {
LABEL_293:
                    v84 = 4294954514;
                    goto LABEL_294;
                  }
                  v24 = v56(a1, &v155);
                  if ((_DWORD)v24)
                    goto LABEL_310;
                }
              }
            }
            goto LABEL_95;
          }
          v135 = 255;
        }
      }
      v42 = v155;
      v43 = *(void (**)(CFTypeRef, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (v43)
        v43(v42, -15, 0);
      v44 = *(uint64_t (**)(const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (!v44)
        goto LABEL_293;
      v24 = v44(a1, &cf);
      if ((_DWORD)v24)
        goto LABEL_310;
      if (v133 >= 1)
      {
        v45 = 1;
        while (1)
        {
          if ((*(_BYTE *)(a7 + 12) & 1) == 0
            || (*(_BYTE *)(a7 + 36) & 1) == 0
            || *(_QWORD *)(a7 + 40)
            || (*(_QWORD *)(a7 + 24) & 0x8000000000000000) != 0)
          {
            if (!*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
              break;
            v46 = cf;
            v47 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            if (a1)
              v48 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
            else
              v48 = 0;
            if (v47 == v48)
            {
              v49 = *(unsigned int (**)(CFTypeRef, const void *, uint64_t))(v47 + 80);
              if (v49)
              {
                if (v49(v46, a1, 1))
                  goto LABEL_95;
              }
            }
          }
          else
          {
            v50 = cf;
            v51 = *(uint64_t (**)(CFTypeRef, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (!v51)
              goto LABEL_293;
            v24 = v51(v50, &v151);
            if ((_DWORD)v24)
              goto LABEL_310;
            *(_OWORD *)&range.start.value = *(_OWORD *)a7;
            range.start.epoch = *(_QWORD *)(a7 + 16);
            *(CMTime *)time2 = v151;
            if (CMTimeCompare(&range.start, (CMTime *)time2) < 1)
              goto LABEL_95;
          }
          v52 = cf;
          v53 = *(void (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
          if (v53)
            v53(v52, 1, &v152);
          if (v152 == 1)
          {
            v38 = v45++ < v133;
            if (v38)
              continue;
          }
          break;
        }
      }
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      if (a1)
        v54 = CFRetain(a1);
      else
        v54 = 0;
      goto LABEL_94;
    }
    if (v135)
      goto LABEL_22;
    if (a1)
      v54 = CFRetain(a1);
    else
      v54 = 0;
    v135 = 0;
LABEL_94:
    cf = v54;
LABEL_95:
    v57 = v155;
    v58 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (!v58)
      goto LABEL_293;
    v24 = v58(v57, &v154);
    if ((_DWORD)v24)
      goto LABEL_310;
    v59 = v154;
    v60 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
    if (!v60)
      goto LABEL_293;
    v24 = v60(v59, 1, &v152);
    v61 = v141 == 1 && (_DWORD)v24 == -12840;
    v62 = HIDWORD(v143);
    if (v61)
      v62 = 1;
    HIDWORD(v143) = v62;
    if ((_DWORD)v24 && (_DWORD)v24 != -12840)
      goto LABEL_310;
    if (v152 != 1 && v154)
    {
      CFRelease(v154);
      v154 = 0;
    }
    v142 = 0;
    v64 = 0;
    do
    {
      v65 = v22;
      v146 = 0;
      v66 = v154;
      if (!v154)
      {
        if (v138)
          goto LABEL_309;
        v138 = 1;
      }
      v67 = v155;
      v68 = v156;
      v181 = 0u;
      memset(v180, 0, sizeof(v180));
      memset(v179, 0, sizeof(v179));
      memset(v178, 0, sizeof(v178));
      memset(v177, 0, sizeof(v177));
      memset(v176, 0, sizeof(v176));
      v174 = 0u;
      memset(v175, 0, sizeof(v175));
      v173 = 0u;
      memset(&range, 0, sizeof(range));
      lhs.value = 0;
      rhs.value = 0;
      dictionaryRepresentation = 0;
      v168 = 0;
      v167 = 0;
      v166 = 0;
      if ((a5 & 8) != 0)
      {
        v69 = 0;
        v70 = 0;
        *(_QWORD *)time2 = 0;
        v165 = 0;
        if ((a5 & 0x10) == 0)
        {
          v71 = *(uint64_t (**)(CFTypeRef, _BYTE *, CMTimeEpoch *, CMTime *, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 144);
          if (!v71)
            goto LABEL_189;
          appended = v71(v67, time2, &v165, &lhs, &rhs);
          if ((_DWORD)appended)
            goto LABEL_168;
          v70 = *(_QWORD *)time2;
          v69 = v165;
        }
        range.start.value = v70;
        *(_QWORD *)&range.start.timescale = v69;
        range.start.epoch = 0;
        range.duration.value = 0;
      }
      if ((a5 & 4) != 0)
      {
        *(_QWORD *)time2 = 0;
        v165 = 0;
        v164 = 0;
        v163 = 0;
        v162 = 0;
        v161 = 0;
        v73 = *(uint64_t (**)(CFTypeRef, CFTypeRef *, CFTypeRef *, _BYTE *, CMTimeEpoch *, uint64_t *, uint64_t *, char *, __int16 *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
        if (!v73)
          goto LABEL_189;
        appended = v73(v67, &v168, &v167, time2, &v165, &v164, &v163, (char *)&v162 + 1, &v162, &v161);
        if ((_DWORD)appended)
          goto LABEL_168;
        BYTE10(v173) = v161;
        BYTE8(v173) = HIBYTE(v162);
        BYTE9(v173) = v162;
        *(_QWORD *)&v173 = v164;
        *(_QWORD *)&range.duration.timescale = *(_QWORD *)time2;
        range.duration.epoch = v165;
        *(_QWORD *)&v174 = v163;
        if (rhs.value)
        {
          if ((CFTypeRef)rhs.value != v167)
            goto LABEL_271;
        }
        else
        {
          rhs.value = (CMTimeValue)v167;
          v167 = 0;
        }
        v74 = v168;
        if (lhs.value)
        {
          if ((CFTypeRef)lhs.value != v168)
            goto LABEL_271;
        }
        else
        {
          lhs.value = (CMTimeValue)v168;
          v168 = 0;
          if (!v74)
          {
LABEL_137:
            *((_QWORD *)&v174 + 1) = 0;
            goto LABEL_138;
          }
        }
      }
      else if (!lhs.value)
      {
        goto LABEL_137;
      }
      *(_QWORD *)time2 = 0;
      v75 = (uint64_t (*)(uint64_t))a3[1];
      if (!v75)
        goto LABEL_271;
      appended = v75(a4);
      if ((_DWORD)appended)
        goto LABEL_168;
      *((_QWORD *)&v174 + 1) = *(_QWORD *)time2;
LABEL_138:
      if (rhs.value)
      {
        *(_QWORD *)time2 = 0;
        v76 = (uint64_t (*)(uint64_t))a3[2];
        if (!v76)
          goto LABEL_271;
        appended = v76(a4);
        if ((_DWORD)appended)
          goto LABEL_168;
        v175[0] = *(_QWORD *)time2;
      }
      else
      {
        v175[0] = 0;
      }
      v160 = 0;
      v158 = 0u;
      v159 = 0u;
      memset(time2, 0, sizeof(time2));
      v77 = *(uint64_t (**)(CFTypeRef, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (!v77)
        goto LABEL_189;
      appended = v77(v67, &v159);
      if ((_DWORD)appended)
        goto LABEL_168;
      v78 = *(uint64_t (**)(CFTypeRef, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (!v78)
        goto LABEL_189;
      appended = v78(v67, &time2[24]);
      if ((_DWORD)appended)
        goto LABEL_168;
      v79 = *(uint64_t (**)(CFTypeRef, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
      if (!v79)
        goto LABEL_189;
      appended = v79(v67, time2);
      if ((_DWORD)appended)
        goto LABEL_168;
      *(_OWORD *)&v175[5] = v158;
      *(_OWORD *)&v175[7] = v159;
      v175[9] = v160;
      *(_OWORD *)&v175[1] = *(_OWORD *)time2;
      *(_OWORD *)&v175[3] = *(_OWORD *)&time2[16];
      if ((a5 & 0x100) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 200))
        {
          v80 = *(uint64_t (**)(CFTypeRef, _OWORD *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 200);
          if (!v80)
            goto LABEL_189;
          appended = v80(v67, v178, (char *)&v178[1] + 8);
          if ((_DWORD)appended)
            goto LABEL_168;
        }
      }
      if ((a5 & 0x200) != 0)
        FigSampleCursorUtilityGetMinimumUpcomingPresentationTime((uint64_t)v67, 0, v179, &v179[1]);
      if (v66)
      {
        v81 = *(uint64_t (**)(CFTypeRef, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
        if (!v81)
          goto LABEL_189;
        appended = v81(v66, v177);
        if ((_DWORD)appended)
          goto LABEL_168;
      }
      if ((a5 & 0x80) != 0)
      {
        v165 = 0;
        v85 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v85)
          goto LABEL_189;
        appended = v85(v67, &v166);
        if ((_DWORD)appended)
          goto LABEL_168;
        v86 = v166;
        v87 = *(unsigned int (**)(CFTypeRef, uint64_t, CMTimeEpoch *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 176);
        if (v87)
        {
          if (!v87(v86, 1, &v165) && v165 == 1)
          {
            v88 = v166;
            v89 = *(uint64_t (**)(CFTypeRef, _OWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (!v89)
              goto LABEL_189;
            appended = v89(v88, v176);
            if ((_DWORD)appended)
              goto LABEL_168;
            v90 = v166;
            v91 = *(uint64_t (**)(CFTypeRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
            if (!v91)
              goto LABEL_189;
            appended = v91(v90, (char *)&v177[1] + 8);
            if ((_DWORD)appended)
              goto LABEL_168;
          }
        }
        if (v166)
        {
          CFRelease(v166);
          v166 = 0;
        }
        v92 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (!v92)
        {
LABEL_189:
          v84 = 4294954514;
          goto LABEL_190;
        }
        appended = v92(v67, &v166);
        if ((_DWORD)appended)
          goto LABEL_168;
        v93 = v166;
        v94 = *(unsigned int (**)(CFTypeRef, uint64_t, CMTimeEpoch *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 176);
        if (v94)
        {
          if (!v94(v93, -1, &v165) && v165 == -1)
          {
            v95 = v166;
            v96 = *(uint64_t (**)(CFTypeRef, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (!v96)
              goto LABEL_189;
            appended = v96(v95, (char *)&v176[1] + 8);
            if ((_DWORD)appended)
              goto LABEL_168;
          }
        }
        if (v166)
        {
          CFRelease(v166);
          v166 = 0;
        }
      }
      if ((a5 & 1) != 0)
      {
        if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64))
        {
          v82 = *(void (**)(CFTypeRef, _BYTE *, _BYTE *, _BYTE *, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 64);
          if (v82)
            v82(v67, v180, &v180[1], &v180[4], &v180[2]);
        }
      }
      *(_QWORD *)time2 = 0;
      if (!a3[3])
      {
LABEL_271:
        appended = FigSignalErrorAt();
        goto LABEL_168;
      }
      v83 = *(uint64_t (**)(CFTypeRef, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
      if (!v83)
        goto LABEL_189;
      appended = v83(v67, &dictionaryRepresentation);
      if (!(_DWORD)appended)
      {
        appended = ((uint64_t (*)(uint64_t, CFDictionaryRef, _BYTE *))a3[3])(a4, dictionaryRepresentation, time2);
        if (!(_DWORD)appended)
        {
          *((_QWORD *)&v181 + 1) = *(_QWORD *)time2;
          appended = FigPartialSampleTableTryAppendSampleInformation((uint64_t)v68, (uint64_t)&range, &v146);
        }
      }
LABEL_168:
      v84 = appended;
LABEL_190:
      v97 = v145;
      if (lhs.value)
      {
        CFRelease((CFTypeRef)lhs.value);
        v97 = v145;
      }
      if (v168)
      {
        CFRelease(v168);
        v97 = v145;
      }
      if (rhs.value)
      {
        CFRelease((CFTypeRef)rhs.value);
        v97 = v145;
      }
      if (v167)
      {
        CFRelease(v167);
        v97 = v145;
      }
      if (dictionaryRepresentation)
      {
        CFRelease(dictionaryRepresentation);
        v97 = v145;
      }
      if (v166)
      {
        CFRelease(v166);
        v97 = v145;
      }
      if ((_DWORD)v84)
        goto LABEL_294;
      v98 = v146;
      v99 = v154;
      if (v146 < 2)
        goto LABEL_212;
      if (!v154)
      {
        v137 = 0;
        goto LABEL_219;
      }
      v100 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (!v100)
        goto LABEL_293;
      v101 = v100(v99, v98 - 1, &v152);
      v97 = v145;
      if ((_DWORD)v101)
      {
        v84 = v101;
        if ((_DWORD)v101 != -12840)
          goto LABEL_294;
      }
      v137 = 0;
      v99 = v154;
      if (v152 == v98 - 1 || !v154)
      {
LABEL_212:
        if (v99 && (flags & 0x1D) == 1)
        {
          *(_OWORD *)&range.start.value = v97;
          range.start.epoch = v136;
          v102 = *(void (**)(CFTypeRef, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
          if (v102)
            v102(v99, &range);
          if ((range.start.flags & 0x1D) == 1)
          {
            *(_OWORD *)time2 = *(_OWORD *)&range.start.value;
            *(_QWORD *)&time2[16] = range.start.epoch;
            lhs.value = value;
            lhs.timescale = timescale;
            lhs.flags = flags;
            lhs.epoch = v130;
            LOBYTE(v143) = CMTimeCompare((CMTime *)time2, &lhs) >= 0;
          }
          else
          {
            LOBYTE(v143) = 0;
          }
        }
      }
      else
      {
        CFRelease(v154);
        v137 = 0;
        v154 = 0;
      }
LABEL_219:
      if (v144 == -1 && v146 >= 1)
      {
        v103 = v155;
        v104 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (a1)
          v105 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        else
          v105 = 0;
        if (v104 == v105
          && (v119 = *(uint64_t (**)(CFTypeRef, const void *))(v104 + 32)) != 0
          && v119(v103, a1))
        {
          if (v146 >= 2
            && ((v120 = v154) == 0
             || ((v121 = *(_QWORD *)(CMBaseObjectGetVTable() + 16), !a1)
               ? (v122 = 0)
               : (v122 = *(_QWORD *)(CMBaseObjectGetVTable() + 16)),
                 v121 == v122
              && (v123 = *(uint64_t (**)(CFTypeRef, const void *))(v121 + 32)) != 0
              && v123(v120, a1) == 1)))
          {
            range.start.value = 0;
            *(_QWORD *)time2 = 0;
            lhs.value = 0;
            rhs.value = 0;
            v124 = *(uint64_t (**)(const void *, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, CMTimeRange *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
            if (!v124)
              goto LABEL_293;
            v24 = v124(a1, 0, 0, &lhs, 0, 0, &range, 0, 0, 0);
            if ((_DWORD)v24)
              goto LABEL_310;
            v125 = v155;
            v126 = *(uint64_t (**)(CFTypeRef, _QWORD, _QWORD, CMTime *, _QWORD, _QWORD, _BYTE *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 152);
            if (!v126)
              goto LABEL_293;
            v24 = v126(v125, 0, 0, &rhs, 0, 0, time2, 0, 0, 0);
            if ((_DWORD)v24)
              goto LABEL_310;
            if (rhs.value != lhs.value)
              goto LABEL_309;
            v144 = range.start.value + v64 - *(_QWORD *)time2;
            v142 = 1;
          }
          else
          {
            v144 = -1;
          }
        }
        else
        {
          v142 = 1;
          v144 = v64;
        }
      }
      if (BYTE4(v143))
      {
        v144 = v146 - 1;
        goto LABEL_275;
      }
      if ((_BYTE)v143 && v142)
        goto LABEL_275;
      v106 = v154;
      if (v154)
      {
        v107 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                       + 168);
        if (!v107)
          goto LABEL_293;
        v108 = v107(v106, 1, &v152);
        if ((_DWORD)v108)
        {
          v84 = v108;
          if ((_DWORD)v108 != -12840)
            goto LABEL_294;
        }
        if (v152 != 1 && v154)
        {
          CFRelease(v154);
          v154 = 0;
        }
      }
      v109 = cf;
      if (cf)
      {
        v110 = v155;
        v111 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
        if (v111 == *(_QWORD *)(CMBaseObjectGetVTable() + 16)
          && (v114 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v111 + 32)) != 0)
        {
          v112 = v114(v110, v109);
        }
        else
        {
          v112 = 0;
        }
        v113 = v112 == -1;
      }
      else
      {
        v113 = 1;
      }
      v115 = v155;
      v116 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 168);
      if (v116)
        v117 = v116(v115, v98, &v152);
      else
        v117 = -12782;
      if (v98 <= 0 || !v113)
        break;
      if (v65 >= v141)
        break;
      if (v117)
        break;
      v64 += v98;
      v22 = v65 + 1;
    }
    while (v152 == v98);
    if (!v142)
    {
      v133 = 0;
      v127 = 0;
      v141 = 1;
      goto LABEL_277;
    }
LABEL_275:
    v24 = FigPartialSampleTableFinishWriting((uint64_t)v156);
    if ((_DWORD)v24)
      goto LABEL_310;
    v127 = 1;
LABEL_277:
    if (v155)
    {
      CFRelease(v155);
      v155 = 0;
    }
    if (v154)
    {
      CFRelease(v154);
      v154 = 0;
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v156)
    {
      CFRelease(v156);
      v156 = 0;
    }
    v22 = v65 + 1;
    v23 = v145;
  }
  while (!v127);
  if (a12)
    *a12 = v65 + 1;
  if (a11)
    *a11 = v144;
  v84 = 0;
  if (a13)
    *a13 = v137;
LABEL_294:
  if (v155)
    CFRelease(v155);
  if (v154)
    CFRelease(v154);
  if (cf)
    CFRelease(cf);
  if (v156)
    CFRelease(v156);
  return v84;
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryGetTypeID()
{
  if (FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce != -1)
    dispatch_once_f(&FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce, 0, (dispatch_function_t)registerFigPartialSampleTableOutOfBandObjectRegistryType);
  return sFigPartialSampleTableOutOfBandObjectRegistryID;
}

uint64_t registerFigPartialSampleTableOutOfBandObjectRegistryType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigPartialSampleTableOutOfBandObjectRegistryID = result;
  return result;
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t Instance;
  _QWORD *v4;
  CFMutableDictionaryRef Mutable;
  uint64_t v6;
  uint64_t v8;

  if (!a2)
    return FigSignalErrorAt();
  if (FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce != -1)
    dispatch_once_f(&FigPartialSampleTableOutOfBandObjectRegistryGetTypeID_sRegisterFigPartialSampleTableOutOfBandObjectRegistryTypeOnce, 0, (dispatch_function_t)registerFigPartialSampleTableOutOfBandObjectRegistryType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4[3] = Mutable;
  if (Mutable && (v6 = FigSimpleMutexCreate(), (v4[2] = v6) != 0))
  {
    *a2 = v4;
    return 0;
  }
  else
  {
    v8 = FigSignalErrorAt();
    CFRelease(v4);
    return v8;
  }
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryLookupAndRetainObjectForID(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  const __CFArray *Value;
  const __CFArray *v9;
  CFIndex v10;
  const void *ValueAtIndex;
  uint64_t v12;

  if (!a1 || !a2 || !a3 || !a4)
    return FigSignalErrorAt();
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
  Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
  if (Value && (v9 = Value, v10 = a3 - 1, CFArrayGetCount(Value) > v10))
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v9, v10);
    if (ValueAtIndex)
      ValueAtIndex = CFRetain(ValueAtIndex);
    v12 = 0;
    *a4 = ValueAtIndex;
  }
  else
  {
    v12 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
  return v12;
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryRegisterObjectForKnownID(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef cf)
{
  CFTypeID v8;
  void *Value;
  CFMutableArrayRef Mutable;
  CFIndex v11;
  const void *ValueAtIndex;
  CFTypeID v13;
  const void *v14;
  uint64_t v15;

  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (cf)
        {
          v8 = CFGetTypeID(cf);
          if (v8 != CFNullGetTypeID())
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
            Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
            if (!Value)
            {
              Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
              if (!Mutable)
                goto LABEL_20;
              Value = Mutable;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, Mutable);
              CFRelease(Value);
            }
            v11 = a3 - 1;
            if (CFArrayGetCount((CFArrayRef)Value) <= v11)
            {
              if (CFArrayGetCount((CFArrayRef)Value) < v11)
              {
                v14 = (const void *)*MEMORY[0x1E0C9B0D0];
                do
                  CFArrayAppendValue((CFMutableArrayRef)Value, v14);
                while (CFArrayGetCount((CFArrayRef)Value) < v11);
              }
              CFArrayAppendValue((CFMutableArrayRef)Value, cf);
              goto LABEL_17;
            }
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v11);
            if (ValueAtIndex)
            {
              v13 = CFGetTypeID(ValueAtIndex);
              if (v13 == CFNullGetTypeID())
              {
                CFArraySetValueAtIndex((CFMutableArrayRef)Value, v11, cf);
LABEL_17:
                v15 = 0;
LABEL_18:
                MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
                return v15;
              }
            }
LABEL_20:
            v15 = FigSignalErrorAt();
            goto LABEL_18;
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistryLookupOrMakeIDForObjectOfType(uint64_t a1, const void *a2, CFTypeRef cf, _QWORD *a4, char *a5)
{
  CFTypeID v10;
  const __CFArray *Value;
  const __CFArray *v12;
  CFIndex FirstIndexOfValue;
  char v14;
  CFMutableArrayRef Mutable;
  uint64_t v16;
  CFRange v18;

  if (a1)
  {
    if (a2)
    {
      if (cf)
      {
        if (a4)
        {
          v10 = CFGetTypeID(cf);
          if (v10 != CFNullGetTypeID())
          {
            MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 16));
            Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), a2);
            if (Value)
            {
              v12 = Value;
              v18.length = CFArrayGetCount(Value);
              v18.location = 0;
              FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v18, cf);
              if (FirstIndexOfValue != -1)
              {
                v14 = 0;
                goto LABEL_13;
              }
            }
            else
            {
              Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
              if (!Mutable)
                goto LABEL_17;
              v12 = Mutable;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, Mutable);
              CFRelease(v12);
            }
            if (CFArrayGetCount(v12) != -2)
            {
              CFArrayAppendValue(v12, cf);
              FirstIndexOfValue = CFArrayGetCount(v12) - 1;
              v14 = 1;
LABEL_13:
              *a4 = FirstIndexOfValue + 1;
              v16 = 0;
              if (a5)
                *a5 = v14;
              goto LABEL_15;
            }
LABEL_17:
            v16 = FigSignalErrorAt();
LABEL_15:
            MEMORY[0x19402EF04](*(_QWORD *)(a1 + 16));
            return v16;
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

void fpst_init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x358uLL);
}

void fpst_finalize(_QWORD *a1)
{
  uint64_t i;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  for (i = 26; i != 111; i += 5)
  {
    v3 = (const void *)a1[i];
    if (v3)
      CFRelease(v3);
  }
  v4 = (const void *)a1[22];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[3];
  if (v5)
    CFRelease(v5);
  v6 = (const void *)a1[9];
  if (v6)
    CFRelease(v6);
}

__CFString *fpst_copyFormattingDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t v4;
  char *v5;
  int64_t v6;
  const __CFAllocator *v7;
  void *v8;
  const void *v9;
  const char *v10;
  CMTime time;
  CMTime v13;
  char *dataPointerOut;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPartialSampleTable %p"), a1);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("NO header>"));
    return Mutable;
  }
  if (*(_QWORD *)(a1 + 176))
  {
    v5 = *(char **)(a1 + 584);
    dataPointerOut = v5;
    if (!v5)
    {
LABEL_9:
      v8 = (void *)CFRetain(CFSTR("-"));
      goto LABEL_10;
    }
  }
  else
  {
    dataPointerOut = 0;
    v6 = *(_QWORD *)(v4 + 88);
    if (v6 < 1)
      goto LABEL_9;
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 24), v6, 0, 0, &dataPointerOut);
    v5 = dataPointerOut;
    if (!dataPointerOut)
      goto LABEL_9;
  }
  v13 = *(CMTime *)(v5 + 16);
  v7 = CFGetAllocator(Mutable);
  time = v13;
  v8 = (void *)CMTimeCopyDescription(v7, &time);
LABEL_10:
  v9 = v8;
  v10 = "WRITING";
  if (!*(_QWORD *)(a1 + 176))
    v10 = "READING";
  CFStringAppendFormat(Mutable, 0, CFSTR(" (%s) (flags=0x%llx) - %lld samples - first DTS: %@>"), v10, **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), v8);
  if (v9)
    CFRelease(v9);
  return Mutable;
}

__CFString *fpst_copyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t v4;
  char *v5;
  int64_t v6;
  const __CFAllocator *v7;
  void *v8;
  const void *v9;
  const char *v10;
  OpaqueCMBlockBuffer *v11;
  uint64_t v12;
  double v13;
  size_t DataLength;
  uint64_t v15;
  double v16;
  OpaqueCMBlockBuffer *v17;
  uint64_t v18;
  size_t v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *value;
  const char *v25;
  const char *v26;
  uint64_t v28;
  uint64_t v29;
  CMTime time;
  CMTime v31;
  char *dataPointerOut;

  v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPartialSampleTable %p"), a1);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR("\tNO header"));
    return Mutable;
  }
  if (*(_QWORD *)(a1 + 176))
  {
    v5 = *(char **)(a1 + 584);
    dataPointerOut = v5;
    if (!v5)
    {
LABEL_9:
      v8 = (void *)CFRetain(CFSTR("-"));
      goto LABEL_10;
    }
  }
  else
  {
    dataPointerOut = 0;
    v6 = *(_QWORD *)(v4 + 88);
    if (v6 < 1)
      goto LABEL_9;
    CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 24), v6, 0, 0, &dataPointerOut);
    v5 = dataPointerOut;
    if (!dataPointerOut)
      goto LABEL_9;
  }
  v31 = *(CMTime *)(v5 + 16);
  v7 = CFGetAllocator(Mutable);
  time = v31;
  v8 = (void *)CMTimeCopyDescription(v7, &time);
LABEL_10:
  v9 = v8;
  if (*(_QWORD *)(a1 + 176))
    v10 = "WRITING";
  else
    v10 = "READING";
  CFStringAppendFormat(Mutable, 0, CFSTR(" (%s) (flags=0x%llx) - first DTS: %@"), v10, **(_QWORD **)(a1 + 16), v8);
  if (v9)
    CFRelease(v9);
  v11 = *(OpaqueCMBlockBuffer **)(a1 + 176);
  if (v11)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if (v12 <= 0)
    {
      v15 = *(_QWORD *)(a1 + 160);
      v16 = 0.0;
      v13 = 0.0;
    }
    else
    {
      v13 = (double)CMBlockBufferGetDataLength(v11) / (double)*(uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
      DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(a1 + 176));
      v15 = *(_QWORD *)(a1 + 160);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      v16 = (double)(DataLength - v15) / (double)v12;
    }
    v21 = "samples";
    if (v12 == 1)
      v21 = "sample";
    CFStringAppendFormat(Mutable, 0, CFSTR("\n\t%lld %s - %.2f used bytes per sample / %.2f bbuf bytes per sample - %zu bytes available"), v12, v21, *(_QWORD *)&v16, *(_QWORD *)&v13, v15);
  }
  else
  {
    v17 = *(OpaqueCMBlockBuffer **)(a1 + 24);
    if (v17)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      if (v18 < 1)
      {
        v20 = 0.0;
      }
      else
      {
        v19 = CMBlockBufferGetDataLength(v17);
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
        v20 = (double)v19 / (double)v18;
      }
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\t%lld samples - %.2f bbuf bytes per sample"), v18, *(_QWORD *)&v20, v29);
    }
  }
  v22 = 1;
  v23 = 224;
  do
  {
    v31.value = 0;
    if (*(_QWORD *)(a1 + 176))
    {
      value = *(_QWORD **)(a1 + v23);
      v31.value = (CMTimeValue)value;
    }
    else
    {
      fpst_reading_runForType(a1, (char)v22, (char **)&v31);
      value = (_QWORD *)v31.value;
    }
    v25 = fpst_descriptionForChangeType((char)v22);
    if (value)
    {
      if (*value == 1)
        v26 = "segment";
      else
        v26 = "segments";
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\t\t[%s] run - %lld %s"), v25, *value, v26);
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, CFSTR("\n\t\t[%s] run - no segments"), v25, v28, v29);
    }
    ++v22;
    v23 += 40;
  }
  while (v22 != 18);
  return Mutable;
}

uint64_t fpst_reading_runForType(uint64_t a1, int a2, char **dataPointerOut)
{
  int64_t v3;

  *dataPointerOut = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
  if (v3 < 1)
    return 4294949584;
  else
    return CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a1 + 24), v3, 0, 0, dataPointerOut);
}

const char *fpst_descriptionForChangeType(int a1)
{
  uint64_t v1;

  v1 = a1 - 1;
  if (v1 > 0x10)
    return "Unknown";
  else
    return off_1E2FB9A20[v1];
}

uint64_t fpst_writing_reserveMemoryForChangeType(_QWORD *a1, int a2, size_t a3, void **a4)
{
  size_t v4;
  BOOL v5;
  size_t v6;
  int v11;
  _QWORD *v12;
  CMBlockBufferRef *v13;
  OpaqueCMBlockBuffer *v14;
  size_t *v15;
  size_t DataLength;
  size_t v17;
  const __CFAllocator *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void *v24;
  size_t lengthAtOffsetOut;

  v24 = 0;
  lengthAtOffsetOut = 0;
  v4 = a1[20];
  v5 = v4 > a3;
  v6 = v4 - a3;
  if (!v5)
    return FigSignalErrorAt();
  v11 = a2 - 1;
  a1[20] = v6;
  v12 = &a1[5 * a2 - 5];
  v14 = (OpaqueCMBlockBuffer *)v12[26];
  v13 = (CMBlockBufferRef *)(v12 + 26);
  result = CMBlockBufferAssureBlockMemory(v14);
  if (!(_DWORD)result)
  {
    v15 = &a1[5 * v11 + 24];
    DataLength = CMBlockBufferGetDataLength(*v13);
    v17 = *v15;
    if (DataLength != *v15)
      goto LABEL_9;
    v18 = CFGetAllocator(a1);
    v19 = fpst_sizeForChangeType(a2);
    v20 = &a1[5 * v11];
    v21 = v20[25];
    v22 = 2 * v21;
    if (v21 >= 512)
      v22 = 1024;
    v20[25] = v22;
    result = CMBlockBufferAppendMemoryBlock(*v13, 0, (v19 + 8) * v21, v18, 0, 0, (v19 + 8) * v21, 1u);
    if (!(_DWORD)result)
    {
      v17 = *v15;
LABEL_9:
      result = CMBlockBufferGetDataPointer(*v13, v17, &lengthAtOffsetOut, 0, (char **)&v24);
      if (!(_DWORD)result)
      {
        if (lengthAtOffsetOut < a3)
        {
          return FigSignalErrorAt();
        }
        else
        {
          bzero(v24, a3);
          result = 0;
          *v15 += a3;
          *a4 = v24;
        }
      }
    }
  }
  return result;
}

uint64_t fpst_sizeForChangeType(int a1)
{
  uint64_t v1;

  v1 = a1 - 1;
  if (v1 > 0x10)
    return 0;
  else
    return qword_193301780[v1];
}

uint64_t fpst_reading_runSegmentAtIndex(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  char *v8;
  uint64_t v9;
  char *dataPointerOut;

  dataPointerOut = 0;
  result = fpst_reading_runForType(a1, a2, &dataPointerOut);
  if (!(_DWORD)result)
  {
    v8 = dataPointerOut;
    if (*(_QWORD *)dataPointerOut <= a3)
    {
      return FigSignalErrorAt();
    }
    else
    {
      v9 = fpst_sizeForChangeType(a2);
      result = 0;
      *a4 = &v8[(v9 + 8) * a3 + 8];
    }
  }
  return result;
}

uint64_t FigPartialSampleTableOutOfBandObjectRegistry_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void FigPartialSampleTableOutOfBandObjectRegistry_Finalize(uint64_t a1)
{
  const void *v2;

  FigSimpleMutexDestroy();
  *(_QWORD *)(a1 + 16) = 0;
  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

__CFString *FigPartialSampleTableOutOfBandObjectRegistry_CopyDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigPartialSampleTableOutOfBandObjectRegistry %p>"), a1);
  return Mutable;
}

uint64_t FigAgglomeratorNew(const void ***a1)
{
  const void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = (const void **)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (v2 && (v3 = FigReadWriteLockCreate(), (v2[1] = (const void *)v3) != 0))
  {
    *v2 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    v6 = FigSignalErrorAt();
    if ((_DWORD)v6)
    {
      v4 = v6;
      FigAgglomeratorDispose(v2);
      return v4;
    }
  }
  v4 = 0;
  *a1 = v2;
  return v4;
}

void FigAgglomeratorDispose(const void **a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      CFRelease(v2);
    if (a1[1])
      FigReadWriteLockDestroy();
    free(a1);
  }
}

uint64_t FigAgglomeratorSetObjectForKey(__CFDictionary **a1, const void *a2, const void *a3)
{
  __CFDictionary *v6;

  if (!a1 || !a3)
    return FigSignalErrorAt();
  FigReadWriteLockLockForWrite();
  v6 = *a1;
  if (a2)
    CFDictionarySetValue(v6, a3, a2);
  else
    CFDictionaryRemoveValue(v6, a3);
  FigReadWriteLockUnlockForWrite();
  return 0;
}

CFMutableArrayRef FigAgglomeratorCopyCurrentAgglomeration(CFDictionaryRef *a1)
{
  CFMutableArrayRef Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  FigReadWriteLockLockForRead();
  CFDictionaryApplyFunction(*a1, (CFDictionaryApplierFunction)agglomerator_addDictionaryValueToMutableArray, Mutable);
  FigReadWriteLockUnlockForRead();
  return Mutable;
}

void agglomerator_addDictionaryValueToMutableArray(int a1, const void *a2, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, a2);
}

uint64_t FigSampleBufferAudioRendererCreateWithOptions(const __CFAllocator *a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  const __CFAllocator *v6;
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  dispatch_queue_t v10;
  dispatch_queue_t v11;
  uint64_t v12;
  CFMutableDictionaryRef Mutable;
  _BYTE *v14;
  const __CFString *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  dispatch_source_t v19;
  const void *v20;
  const void *v21;
  NSObject *v22;
  void *v23;
  CFTypeRef v24;
  uint64_t v25;
  CMClockRef HostTimeClock;
  OpaqueCMClock *v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  const char *v31;
  OSStatus v32;
  OSStatus v33;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v35;
  unsigned int v36;
  const char *v37;
  uint64_t v38;
  CMClockRef v39;
  CFTypeRef v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeID v44;
  CFTypeID v45;
  int CFPreferenceNumberWithDefault;
  int v47;
  NSObject *v48;
  _BYTE *v49;
  CFStringRef v50;
  NSObject *v51;
  unsigned int v52;
  unsigned int v53;
  CFTypeRef v54;
  const char *v55;
  int v56;
  int v57;
  const void *v58;
  const __CFAllocator *alloc;
  CFTypeRef cf;
  const __CFDictionary *v62;
  os_log_type_t type[4];
  void *value;
  CFTypeRef v65;
  int valuePtr;
  CMClockRef clockOut;
  int v68;
  const char *v69;
  __int16 v70;
  CFTypeRef v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  _BYTE v75[10];
  uint64_t v76;
  char __str[128];
  CMTimebaseRef timebaseOut[17];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  value = 0;
  v65 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
  {
    v58 = 0;
    v43 = 4294950916;
    goto LABEL_89;
  }
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  FigSampleBufferAudioRendererGetClassID();
  v7 = CMDerivedObjectCreate();
  if ((_DWORD)v7)
  {
    v43 = v7;
    v58 = 0;
    goto LABEL_89;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 448) = 0;
  if (a2 && CFDictionaryGetValueIfPresent(a2, CFSTR("LoggingIdentifier"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 448), 10, 0x600u);
  v9 = FigReentrantMutexCreate();
  *(_QWORD *)DerivedStorage = v9;
  if (!v9)
    goto LABEL_83;
  snprintf(__str, 0x80uLL, "com.apple.coremedia.audiorenderer.notification[%p]", v65);
  v10 = dispatch_queue_create(__str, 0);
  *(_QWORD *)(DerivedStorage + 8) = v10;
  if (!v10)
    goto LABEL_83;
  snprintf(__str, 0x80uLL, "com.apple.coremedia.audiorenderer.task[%p]", v65);
  v11 = dispatch_queue_create(__str, 0);
  *(_QWORD *)(DerivedStorage + 16) = v11;
  if (!v11)
    goto LABEL_83;
  *(_DWORD *)(DerivedStorage + 96) = 0;
  *(_BYTE *)(DerivedStorage + 100) = 0;
  *(_BYTE *)(DerivedStorage + 104) = 0;
  *(_DWORD *)(DerivedStorage + 108) = 1065353216;
  *(_QWORD *)(DerivedStorage + 112) = 0;
  *(_QWORD *)(DerivedStorage + 120) = 0;
  v12 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 220) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 236) = *(_QWORD *)(v12 + 16);
  Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(DerivedStorage + 80) = Mutable;
  if (!Mutable)
    goto LABEL_83;
  *(_BYTE *)(DerivedStorage + 136) = 0;
  v14 = (_BYTE *)(DerivedStorage + 136);
  FigCFDictionaryGetBooleanIfPresent();
  if (*(_BYTE *)(DerivedStorage + 136))
    v15 = 0;
  else
    v15 = CFSTR("TimeDomain");
  *(_QWORD *)(DerivedStorage + 128) = v15;
  v16 = (const void *)*MEMORY[0x1E0C9AE50];
  *(_QWORD *)(DerivedStorage + 176) = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
  v17 = (const void *)*MEMORY[0x1E0C9AE40];
  *(_QWORD *)(DerivedStorage + 184) = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE40]);
  *(_BYTE *)(DerivedStorage + 192) = 0;
  *(_QWORD *)(DerivedStorage + 200) = CFRetain(v17);
  v18 = (const void *)FigCFDictionaryGetValue();
  if (v18)
    v18 = CFRetain(v18);
  *(_QWORD *)(DerivedStorage + 168) = v18;
  if (FPSupport_GetAudioSpatializationPreferencesMonitor())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FPSupport_GetAudioSpatializationPreferencesMonitor();
    FigNotificationCenterAddWeakListener();
  }
  v19 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, *(dispatch_queue_t *)(DerivedStorage + 16));
  *(_QWORD *)(DerivedStorage + 360) = v19;
  if (!v19 || (v20 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject()) == 0)
  {
LABEL_83:
    v58 = 0;
    v43 = 4294950914;
    goto LABEL_89;
  }
  v21 = v20;
  alloc = v6;
  v62 = a2;
  v22 = *(NSObject **)(DerivedStorage + 360);
  v23 = (void *)CFRetain(v20);
  dispatch_set_context(v22, v23);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 360), (dispatch_function_t)audioRenderer_underrunTimerFire);
  dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(DerivedStorage + 360), (dispatch_function_t)MEMORY[0x1E0C98BC0]);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 360));
  v24 = v65;
  clockOut = 0;
  v25 = CMBaseObjectGetDerivedStorage();
  cf = v21;
  if (!FigPreferAudioSessionClock())
  {
    v32 = CMAudioDeviceClockCreate(a1, CFSTR("VirtualAudioDevice_Default"), &clockOut);
    if (!dword_1EE2A3620)
    {
LABEL_41:
      v27 = clockOut;
      goto LABEL_42;
    }
    v33 = v32;
    valuePtr = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v35 = valuePtr;
    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
      v36 = v35;
    else
      v36 = v35 & 0xFFFFFFFE;
    if (v36)
    {
      if (v24)
        v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
      else
        v37 = "";
      v68 = 136316162;
      v69 = "audioRenderer_copyDefaultClock";
      v70 = 2048;
      v71 = v24;
      v72 = 2082;
      v73 = v37;
      v74 = 2112;
      *(_QWORD *)v75 = CFSTR("VirtualAudioDevice_Default");
      *(_WORD *)&v75[8] = 1024;
      LODWORD(v76) = v33;
      _os_log_send_and_compose_impl();
    }
LABEL_40:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_41;
  }
  HostTimeClock = CMClockGetHostTimeClock();
  v27 = (OpaqueCMClock *)CFRetain(HostTimeClock);
  clockOut = v27;
  if (dword_1EE2A3620)
  {
    valuePtr = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v29 = valuePtr;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      v30 = v29;
    else
      v30 = v29 & 0xFFFFFFFE;
    if (v30)
    {
      if (v24)
        v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
      else
        v31 = "";
      v38 = *(_QWORD *)(v25 + 160);
      v68 = 136316162;
      v69 = "audioRenderer_copyDefaultClock";
      v70 = 2048;
      v71 = v24;
      v72 = 2082;
      v73 = v31;
      v74 = 2112;
      *(_QWORD *)v75 = v38;
      *(_WORD *)&v75[8] = 1024;
      LODWORD(v76) = 0;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_40;
  }
LABEL_42:
  if (!v27)
  {
    v39 = CMClockGetHostTimeClock();
    v27 = (OpaqueCMClock *)CFRetain(v39);
  }
  *(_QWORD *)(DerivedStorage + 64) = v27;
  *(_BYTE *)(DerivedStorage + 32) = 1;
  audioRenderer_setPropertyOnAudioRenderPipeline((uint64_t)v65, CFSTR("IsTimebaseStarter"), v16, 1);
  v40 = v65;
  v41 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  timebaseOut[0] = 0;
  MEMORY[0x19402EA0C](*v41);
  if (*((_BYTE *)v41 + 433))
  {
    v43 = 0;
  }
  else
  {
    v42 = CMTimebaseCreateWithSourceClock(0, (CMClockRef)v41[8], timebaseOut);
    if (!(_DWORD)v42)
      v42 = audioRenderer_setMasterTimebase((uint64_t)v40, timebaseOut[0]);
    v43 = v42;
  }
  MEMORY[0x19402EA24](*v41);
  if (timebaseOut[0])
    CFRelease(timebaseOut[0]);
  if (!(_DWORD)v43)
  {
    *(_WORD *)(DerivedStorage + 101) = 0;
    *(_BYTE *)(DerivedStorage + 103) = 1;
    valuePtr = 500;
    *(_DWORD *)type = 1000;
    clockOut = 0;
    if (v62)
    {
      if (CFDictionaryGetValueIfPresent(v62, CFSTR("LowWaterMarkMs"), (const void **)&clockOut))
      {
        if (clockOut)
        {
          v44 = CFGetTypeID(clockOut);
          if (v44 == CFNumberGetTypeID())
            CFNumberGetValue(clockOut, kCFNumberIntType, &valuePtr);
        }
      }
      if (CFDictionaryGetValueIfPresent(v62, CFSTR("HighWaterMarkMs"), (const void **)&clockOut))
      {
        if (clockOut)
        {
          v45 = CFGetTypeID(clockOut);
          if (v45 == CFNumberGetTypeID())
            CFNumberGetValue(clockOut, kCFNumberIntType, type);
        }
      }
    }
    CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake((CMTime *)timebaseOut, CFPreferenceNumberWithDefault, 1000);
    *(CMTime *)(DerivedStorage + 268) = *(CMTime *)timebaseOut;
    v47 = FigGetCFPreferenceNumberWithDefault();
    CMTimeMake((CMTime *)timebaseOut, v47, 1000);
    *(CMTime *)(DerivedStorage + 244) = *(CMTime *)timebaseOut;
    if (dword_1EE2A3620)
    {
      v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v49 = (_BYTE *)(DerivedStorage + 292);
    *(_BYTE *)(DerivedStorage + 292) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    v50 = CFStringCreateWithFormat(alloc, 0, CFSTR("SBAR-%p"), v65);
    *(_QWORD *)(DerivedStorage + 440) = v50;
    if (v50)
    {
      if (dword_1EE2A3620)
      {
        LODWORD(clockOut) = 0;
        LOBYTE(valuePtr) = 0;
        v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v52 = clockOut;
        if (os_log_type_enabled(v51, (os_log_type_t)valuePtr))
          v53 = v52;
        else
          v53 = v52 & 0xFFFFFFFE;
        if (v53)
        {
          v54 = v65;
          if (v65)
            v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
          else
            v55 = "";
          if (*v49)
            v56 = 84;
          else
            v56 = 70;
          if (*v14)
            v57 = 84;
          else
            v57 = 70;
          v68 = 136316162;
          v69 = "FigSampleBufferAudioRendererCreateWithOptions";
          v70 = 2048;
          v71 = v54;
          v72 = 2082;
          v73 = v55;
          v74 = 1024;
          *(_DWORD *)v75 = v56;
          *(_WORD *)&v75[4] = 1024;
          *(_DWORD *)&v75[6] = v57;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v43 = 0;
      *a3 = v65;
      v65 = 0;
      v58 = cf;
LABEL_81:
      CFRelease(v58);
      return v43;
    }
    v43 = 4294950914;
  }
  v58 = cf;
LABEL_89:
  if (v65)
    CFRelease(v65);
  if (v58)
    goto LABEL_81;
  return v43;
}

void audioRenderer_spatialAudioPreferencesChanged(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  uint64_t v4;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v7)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  int v8;
  CFTypeRef cf;

  cf = 0;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 433) || (v4 = DerivedStorage[7]) == 0 || !DerivedStorage[19])
    JUMPOUT(0x19402EA24);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v4);
  v7 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v7)
  {
    v7(FigBaseObject, CFSTR("SpatializationEnabled"), AllocatorForMedia, &cf);
    v7 = (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))cf;
  }
  v8 = v7 == (void (*)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))*MEMORY[0x1E0C9AE50];
  if (audioRenderer_shouldEnableSpatialization(a2, DerivedStorage[19]) == v8)
  {
    MEMORY[0x19402EA24](*DerivedStorage);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a2, 0, 0, 1);
    MEMORY[0x19402EA24](*DerivedStorage);
    audioRenderer_postNotification();
  }
  if (cf)
    CFRelease(cf);
}

void audioRenderer_underrunTimerFire()
{
  uint64_t v0;
  const void *v1;
  _QWORD *DerivedStorage;
  __n128 v3;
  OpaqueCMTimebase *v4;
  _OWORD *v5;
  OpaqueCMTimebase *v6;
  NSObject *v7;
  CMTime v8;
  CMTime time1;
  CMTime v10;

  v10 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    v1 = (const void *)v0;
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*DerivedStorage);
    if ((DerivedStorage[48] & 1) != 0 && (DerivedStorage[51] & 1) != 0)
    {
      time1 = *(CMTime *)((char *)DerivedStorage + 396);
      v3 = audioRenderer_endUnderrun((uint64_t)v1, &time1);
    }
    v4 = (OpaqueCMTimebase *)DerivedStorage[3];
    if (v4 && (DerivedStorage[29] & 1) != 0)
    {
      v5 = (_OWORD *)((char *)DerivedStorage + 220);
      CMTimebaseGetTime(&v10, v4);
      time1 = *(CMTime *)((char *)DerivedStorage + 220);
      v8 = v10;
      if (CMTimeCompare(&time1, &v8) < 0)
      {
        *(_OWORD *)&time1.value = *v5;
        time1.epoch = *(_QWORD *)((char *)DerivedStorage + 236);
        v3 = audioRenderer_beginUnderrun((uint64_t)v1, (__n128 *)&time1);
      }
      else
      {
        v6 = (OpaqueCMTimebase *)DerivedStorage[3];
        v7 = DerivedStorage[45];
        *(_OWORD *)&time1.value = *v5;
        time1.epoch = *(_QWORD *)((char *)DerivedStorage + 236);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v6, v7, &time1, 0);
      }
    }
    else
    {
      *((_BYTE *)DerivedStorage + 368) = 0;
    }
    MEMORY[0x19402EA24](*DerivedStorage, v3);
    CFRelease(v1);
  }
}

uint64_t audioRenderer_setPropertyOnAudioRenderPipeline(uint64_t a1, const void *a2, const void *a3, int a4)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  uint64_t FigBaseObject;
  uint64_t (*v10)(uint64_t, const void *, const void *);
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = DerivedStorage[7];
  if (!v8)
  {
    if (a4 != 1)
      return 0;
LABEL_7:
    if (!a3)
      a3 = (const void *)*MEMORY[0x1E0C9B0D0];
    MEMORY[0x19402EA0C](*DerivedStorage);
    CFDictionarySetValue((CFMutableDictionaryRef)DerivedStorage[10], a2, a3);
    MEMORY[0x19402EA24](*DerivedStorage);
    return 0;
  }
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v8);
  v10 = *(uint64_t (**)(uint64_t, const void *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v10)
    return 4294954514;
  result = v10(FigBaseObject, a2, a3);
  if (a4 == 1 && !(_DWORD)result)
    goto LABEL_7;
  return result;
}

uint64_t audioRenderer_invalidate(uint64_t a1)
{
  _QWORD *DerivedStorage;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  NSObject *v21;
  NSObject *v22;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v3 = DerivedStorage;
  v4 = *DerivedStorage;
  if (*DerivedStorage)
    MEMORY[0x19402EA0C](*DerivedStorage);
  if (!*((_BYTE *)v3 + 433))
  {
    *((_BYTE *)v3 + 433) = 1;
    audioRenderer_tearDownFARP(a1, 0);
    audioRenderer_removeNotificationListenerFromTimebase(a1, (OpaqueCMTimebase *)v3[3]);
    FigStopForwardingMediaServicesProcessDeathNotification();
    v5 = (const void *)v3[20];
    if (v5)
    {
      CFRelease(v5);
      v3[20] = 0;
    }
    v6 = (const void *)v3[8];
    if (v6)
    {
      CFRelease(v6);
      v3[8] = 0;
    }
    audioRenderer_bapOutputRemoveWeakListeners(a1, v3[9]);
    v7 = (const void *)v3[9];
    if (v7)
    {
      CFRelease(v7);
      v3[9] = 0;
    }
    v8 = (const void *)v3[3];
    if (v8)
    {
      CFRelease(v8);
      v3[3] = 0;
    }
    v9 = (const void *)v3[11];
    if (v9)
    {
      CFRelease(v9);
      v3[11] = 0;
    }
    v10 = (const void *)v3[14];
    if (v10)
    {
      CFRelease(v10);
      v3[14] = 0;
    }
    v11 = (const void *)v3[15];
    if (v11)
    {
      CFRelease(v11);
      v3[15] = 0;
    }
    v12 = (const void *)v3[16];
    if (v12)
    {
      CFRelease(v12);
      v3[16] = 0;
    }
    v13 = (const void *)v3[18];
    if (v13)
    {
      CFRelease(v13);
      v3[18] = 0;
    }
    v14 = (const void *)v3[10];
    if (v14)
    {
      CFRelease(v14);
      v3[10] = 0;
    }
    v15 = (const void *)v3[22];
    if (v15)
    {
      CFRelease(v15);
      v3[22] = 0;
    }
    v16 = (const void *)v3[23];
    if (v16)
    {
      CFRelease(v16);
      v3[23] = 0;
    }
    v17 = (const void *)v3[25];
    if (v17)
    {
      CFRelease(v17);
      v3[25] = 0;
    }
    v18 = (const void *)v3[55];
    if (v18)
    {
      CFRelease(v18);
      v3[55] = 0;
    }
    v19 = (const void *)v3[21];
    if (v19)
    {
      CFRelease(v19);
      v3[21] = 0;
    }
    if (FPSupport_GetAudioSpatializationPreferencesMonitor())
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FPSupport_GetAudioSpatializationPreferencesMonitor();
      FigNotificationCenterRemoveWeakListener();
    }
    if (v3[26])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v20 = (const void *)v3[26];
      if (v20)
      {
        CFRelease(v20);
        v3[26] = 0;
      }
    }
    v21 = v3[45];
    if (v21)
    {
      dispatch_source_cancel(v21);
      v22 = v3[45];
      if (v22)
      {
        dispatch_release(v22);
        v3[45] = 0;
      }
    }
  }
  if (v4)
    MEMORY[0x19402EA24](*v3);
  return 0;
}

uint64_t audioRenderer_finalize(uint64_t a1)
{
  uint64_t *DerivedStorage;
  NSObject *v3;
  NSObject *v4;
  uint64_t result;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  audioRenderer_invalidate(a1);
  v3 = DerivedStorage[1];
  if (v3)
    dispatch_release(v3);
  v4 = DerivedStorage[2];
  if (v4)
    dispatch_release(v4);
  result = *DerivedStorage;
  if (*DerivedStorage)
  {
    result = FigSimpleMutexDestroy();
    *DerivedStorage = 0;
  }
  return result;
}

__CFString *audioRenderer_copyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 433))
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferAudioRenderer=%p retainCount=%d%s allocator=%p"), a1, v5, v6, v7);
  if (*(_BYTE *)(DerivedStorage + 32))
    v8 = "yes";
  else
    v8 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR(" timebaseStarter=%s"), v8);
  CFStringAppendFormat(Mutable, 0, CFSTR(" masterControlTimebase=%@"), *(_QWORD *)(DerivedStorage + 24));
  CFStringAppendFormat(Mutable, 0, CFSTR(" synchronizerWeakReference=%@"), *(_QWORD *)(DerivedStorage + 88));
  CFStringAppendFormat(Mutable, 0, CFSTR(" audioOutputDeviceUniqueID=%@"), *(_QWORD *)(DerivedStorage + 120));
  CFStringAppendFormat(Mutable, 0, CFSTR(" audioTimePitchAlgorithm=%@"), *(_QWORD *)(DerivedStorage + 128));
  CFStringAppendFormat(Mutable, 0, CFSTR(" volume=%1.3f"), *(float *)(DerivedStorage + 108));
  if (*(_BYTE *)(DerivedStorage + 104))
    v9 = "yes";
  else
    v9 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR(" muted=%s"), v9);
  if (*(_BYTE *)(DerivedStorage + 432))
    v10 = "yes";
  else
    v10 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR(" silentMuted=%s"), v10);
  if (*(_BYTE *)(DerivedStorage + 424))
    v11 = "yes";
  else
    v11 = "no";
  CFStringAppendFormat(Mutable, 0, CFSTR(" ducked=%s"), v11);
  CFStringAppendFormat(Mutable, 0, CFSTR(" volumeCurvesDictionary=%@"), *(_QWORD *)(DerivedStorage + 112));
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t audioRenderer_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *DerivedStorage;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t);
  const void **v14;
  const void *v15;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  int v20;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = 4294950916;
  if (a2 && a4)
  {
    v9 = DerivedStorage;
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (*((_BYTE *)v9 + 433))
    {
      v8 = 4294954511;
      goto LABEL_20;
    }
    if (CFEqual(a2, CFSTR("IsBelowPrerollLevel")))
    {
      if (!v9[6])
      {
LABEL_15:
        v14 = (const void **)MEMORY[0x1E0C9AE50];
LABEL_17:
        v15 = *v14;
LABEL_18:
        v15 = CFRetain(v15);
LABEL_19:
        v8 = 0;
        *a4 = v15;
LABEL_20:
        MEMORY[0x19402EA24](*v9);
        return v8;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
      v11 = v9[6];
      v12 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v10)
      {
        v13 = *(unsigned int (**)(uint64_t))(v12 + 104);
        if (!v13)
          goto LABEL_16;
      }
      else
      {
        v13 = *(unsigned int (**)(uint64_t))(v12 + 24);
        if (!v13)
          goto LABEL_16;
      }
      if (v13(v11))
        goto LABEL_15;
LABEL_16:
      v14 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("Muted")))
    {
      v14 = (const void **)MEMORY[0x1E0C9AE50];
      if (!*((_BYTE *)v9 + 104))
        v14 = (const void **)MEMORY[0x1E0C9AE40];
      goto LABEL_17;
    }
    if (CFEqual(a2, CFSTR("Volume")))
    {
      v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat32Type, (char *)v9 + 108);
      goto LABEL_19;
    }
    if (CFEqual(a2, CFSTR("VolumeCurves")))
    {
      v15 = (const void *)v9[14];
      if (!v15)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("AudioOutputDeviceUniqueID")))
    {
      v15 = (const void *)v9[15];
      if (!v15)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("AudioTimePitchAlgorithm")))
    {
      if (!*((_BYTE *)v9 + 136))
      {
        v15 = (const void *)v9[16];
        if (!v15)
          goto LABEL_19;
        goto LABEL_18;
      }
LABEL_58:
      v18 = FigSignalErrorAt();
      goto LABEL_40;
    }
    if (CFEqual(a2, CFSTR("AudioProcessingTap")))
    {
      v15 = (const void *)v9[18];
      if (!v15)
        goto LABEL_19;
      goto LABEL_18;
    }
    if (CFEqual(a2, CFSTR("WillTrimShortDurationSamples")))
    {
      v17 = v9[7];
      if (v17)
      {
        v18 = FigRenderPipelineCopyProperty(v17, (uint64_t)CFSTR("WillTrimShortDurationSamples"), a3, (uint64_t)a4);
LABEL_40:
        v8 = v18;
        goto LABEL_20;
      }
      v19 = (const void **)MEMORY[0x1E0C9AE50];
    }
    else
    {
      if (CFEqual(a2, CFSTR("ShouldFillDiscontinuitiesWithSilence")))
      {
        v19 = (const void **)MEMORY[0x1E0C9AE50];
        v20 = *((unsigned __int8 *)v9 + 103);
      }
      else if (CFEqual(a2, CFSTR("ShouldAttemptImmediatePlaybackStart")))
      {
        v19 = (const void **)MEMORY[0x1E0C9AE50];
        v20 = *((unsigned __int8 *)v9 + 100);
      }
      else if (CFEqual(a2, CFSTR("NonBAOPlaybackIsDisallowed")))
      {
        v19 = (const void **)MEMORY[0x1E0C9AE50];
        v20 = *((unsigned __int8 *)v9 + 101);
      }
      else
      {
        if (!CFEqual(a2, CFSTR("FARPAlwaysNotifyLatencyChange")))
        {
          if (CFEqual(a2, CFSTR("IsUnaccompaniedByVisuals")))
          {
            v15 = (const void *)v9[25];
            if (!v15)
              goto LABEL_19;
            goto LABEL_18;
          }
          goto LABEL_58;
        }
        v19 = (const void **)MEMORY[0x1E0C9AE50];
        v20 = *((unsigned __int8 *)v9 + 102);
      }
      if (!v20)
        v19 = (const void **)MEMORY[0x1E0C9AE40];
    }
    v15 = *v19;
    if (!*v19)
      goto LABEL_19;
    goto LABEL_18;
  }
  return v8;
}

uint64_t audioRenderer_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  _BYTE *v7;
  CFTypeID v8;
  _QWORD *v9;
  uint64_t v10;
  CFTypeID v11;
  CFTypeID v12;
  uint64_t v13;
  const void *v14;
  CFTypeID v16;
  const void **v17;
  CFTypeID v18;
  CFTypeID v19;
  uint64_t v20;
  const void *v21;
  CFTypeID v22;
  uint64_t v23;
  CFTypeID v24;
  CFTypeID v25;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  __CFString **v32;
  unsigned int v33;
  CFTypeID v34;
  int v35;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeID v37;
  CFTypeID v38;
  CFTypeID v39;
  uint64_t v40;
  _QWORD valuePtr[17];

  valuePtr[16] = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950916;
  v7 = (_BYTE *)DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 433))
    return 4294954511;
  if (CFEqual(a2, CFSTR("Muted")))
  {
    if (a3)
    {
      v8 = CFGetTypeID(a3);
      if (v8 == CFBooleanGetTypeID())
      {
        v9 = (_QWORD *)CMBaseObjectGetDerivedStorage();
        MEMORY[0x19402EA0C](*v9);
        if (!*((_BYTE *)v9 + 433) && CFBooleanGetValue((CFBooleanRef)a3) != *((unsigned __int8 *)v9 + 104))
        {
          v10 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, CFSTR("Muted"), a3, 1);
          if (!(_DWORD)v10)
            *((_BYTE *)v9 + 104) = CFBooleanGetValue((CFBooleanRef)a3);
          goto LABEL_26;
        }
        goto LABEL_25;
      }
    }
    return 4294950915;
  }
  if (CFEqual(a2, CFSTR("Volume")))
  {
    if (!a3)
      return 4294950915;
    v11 = CFGetTypeID(a3);
    if (v11 != CFNumberGetTypeID())
      return 4294950915;
    v9 = (_QWORD *)CMBaseObjectGetDerivedStorage();
    LODWORD(valuePtr[0]) = 0;
    MEMORY[0x19402EA0C](*v9);
    if (!*((_BYTE *)v9 + 433))
    {
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, valuePtr);
      if (*(float *)valuePtr != *((float *)v9 + 27))
      {
        v10 = audioRenderer_applySoftwareVolume(a1, CFSTR("SoftwareVolume1"), 0, *(float *)valuePtr, 0.0);
        if (!(_DWORD)v10)
          *((_DWORD *)v9 + 27) = valuePtr[0];
        goto LABEL_26;
      }
    }
LABEL_25:
    v10 = 0;
LABEL_26:
    MEMORY[0x19402EA24](*v9);
    return v10;
  }
  if (CFEqual(a2, CFSTR("VolumeCurves")))
  {
    if (!a3)
      return 4294950915;
    v12 = CFGetTypeID(a3);
    if (v12 != CFDictionaryGetTypeID())
      return 4294950915;
    if (CFDictionaryContainsKey((CFDictionaryRef)a3, CFSTR("AudioCurve_Volume")))
    {
      v9 = (_QWORD *)CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EA0C](*v9);
      if (!*((_BYTE *)v9 + 433))
      {
        v13 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, CFSTR("AudioCurves"), a3, 1);
        if ((_DWORD)v13)
        {
          v10 = v13;
          goto LABEL_26;
        }
        v14 = (const void *)v9[14];
        v9[14] = a3;
        CFRetain(a3);
        if (v14)
          CFRelease(v14);
      }
      goto LABEL_25;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(a2, CFSTR("AudioOutputDeviceUniqueID")))
  {
    if (!a3)
      return 4294950915;
    v16 = CFGetTypeID(a3);
    if (v16 != CFStringGetTypeID())
      return 4294950915;
    v17 = (const void **)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EA0C](*v17);
    if (*((_BYTE *)v17 + 433))
    {
      MEMORY[0x19402EA24](*v17);
    }
    else
    {
      audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v17 + 15, a3, 0);
      MEMORY[0x19402EA24](*v17);
      audioRenderer_postNotification();
    }
    return 0;
  }
  if (CFEqual(a2, CFSTR("AudioTimePitchAlgorithm")))
  {
    if (v7[136])
      return FigSignalErrorAt();
    if (!a3)
      return 4294950915;
    v18 = CFGetTypeID(a3);
    if (v18 != CFStringGetTypeID())
      return 4294950915;
    return audioRenderer_setAudioTimePitchAlgorithm(a1, a3);
  }
  if (CFEqual(a2, CFSTR("AudioProcessingTap")))
  {
    if (a3)
    {
      v19 = CFGetTypeID(a3);
      if (v19 != MTAudioProcessingTapGetTypeID())
        return 4294950915;
    }
    v20 = a1;
    v21 = a3;
LABEL_58:
    audioRenderer_setAudioProcessingTap(v20, v21);
    return 0;
  }
  if (CFEqual(a2, CFSTR("AudioProcessingTapID")))
  {
    if (a3)
    {
      v22 = CFGetTypeID(a3);
      if (v22 != CFNumberGetTypeID())
        return 4294950915;
      valuePtr[0] = 0;
      v40 = 0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v40);
      if (v40)
      {
        v23 = MTAudioProcessingTapXPCServerCopyTapForID(v40, valuePtr);
        if ((_DWORD)v23)
          return v23;
        v21 = (const void *)valuePtr[0];
      }
      else
      {
        v21 = 0;
      }
    }
    else
    {
      v21 = 0;
      valuePtr[0] = 0;
      v40 = 0;
    }
    v20 = a1;
    goto LABEL_58;
  }
  if (CFEqual(a2, CFSTR("FigAudioSession")))
  {
    if (!a3)
      return 4294950915;
    v24 = CFGetTypeID(a3);
    if (v24 != FigAudioSessionGetTypeID())
      return 4294950915;
    return audioRenderer_setAudioSession(a1, a3);
  }
  else if (CFEqual(a2, CFSTR("MultichannelAudioSpatializationAllowed")))
  {
    if (!a3)
      return 4294950915;
    v25 = CFGetTypeID(a3);
    if (v25 != CFBooleanGetTypeID())
      return 4294950915;
    return audioRenderer_setMultichannelAudioSpatializationAllowed(a1, a3);
  }
  else if (CFEqual(a2, CFSTR("StereoAudioSpatializationAllowed")))
  {
    if (!a3)
      return 4294950915;
    v26 = CFGetTypeID(a3);
    if (v26 != CFBooleanGetTypeID())
      return 4294950915;
    return audioRenderer_setStereoAudioSpatializationAllowed(a1, a3);
  }
  else if (CFEqual(a2, CFSTR("IsUnaccompaniedByVisuals")))
  {
    if (!a3)
      return 4294950915;
    v27 = CFGetTypeID(a3);
    if (v27 != CFBooleanGetTypeID())
      return 4294950915;
    return audioRenderer_setIsUnaccompaniedByVisuals(a1, a3);
  }
  else if (CFEqual(a2, CFSTR("ClockDevice")))
  {
    if (!a3)
      return 4294950915;
    v28 = CFGetTypeID(a3);
    if (v28 != CFStringGetTypeID())
      return 4294950915;
    return audioRenderer_setPropertyOnAudioRenderPipeline(a1, CFSTR("AudioQueueClockDevice"), a3, 1);
  }
  else
  {
    if (CFEqual(a2, CFSTR("ShouldAttemptImmediatePlaybackStart")))
    {
      if (!a3)
        return 4294950915;
      v29 = CFGetTypeID(a3);
      if (v29 != CFBooleanGetTypeID())
        return 4294950915;
      v7[100] = CFBooleanGetValue((CFBooleanRef)a3);
      return 0;
    }
    if (!CFEqual(a2, CFSTR("BufferedAirPlayOutput")))
    {
      if (CFEqual(a2, CFSTR("STSLabel")))
      {
        if (a3)
        {
          v31 = CFGetTypeID(a3);
          if (v31 != CFStringGetTypeID())
            return 4294950915;
        }
        v32 = kFigAudioRenderPipelineProperty_STSLabel;
      }
      else
      {
        if (CFEqual(a2, CFSTR("ShouldFillDiscontinuitiesWithSilence")))
        {
          if (!a3)
            return 4294950915;
          v34 = CFGetTypeID(a3);
          if (v34 != CFBooleanGetTypeID())
            return 4294950915;
          v35 = v7[103];
          if (v35 != CFBooleanGetValue((CFBooleanRef)a3))
          {
            v7[103] = CFBooleanGetValue((CFBooleanRef)a3);
            if (dword_1EE2A3620)
            {
              os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          return 0;
        }
        if (CFEqual(a2, CFSTR("NonBAOPlaybackIsDisallowed")))
        {
          if (!a3)
            return 4294950915;
          v37 = CFGetTypeID(a3);
          if (v37 != CFBooleanGetTypeID())
            return 4294950915;
          v7[101] = CFBooleanGetValue((CFBooleanRef)a3);
          return 0;
        }
        if (CFEqual(a2, CFSTR("FARPAlwaysNotifyLatencyChange")))
        {
          if (!a3)
            return 4294950915;
          v38 = CFGetTypeID(a3);
          if (v38 != CFBooleanGetTypeID())
            return 4294950915;
          v7[102] = CFBooleanGetValue((CFBooleanRef)a3);
          return 0;
        }
        if (!CFEqual(a2, CFSTR("FARPMATOriginalSourceFormat")))
          return 4294950910;
        if (!a3)
          return 4294950915;
        v39 = CFGetTypeID(a3);
        if (v39 != CFNumberGetTypeID())
          return 4294950915;
        v32 = kFigAudioRenderPipelineProperty_MATOriginalSourceFormat;
      }
      v33 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, *v32, a3, 1);
      if (v33 == -12850)
        return 0;
      else
        return v33;
    }
    if (a3)
    {
      v30 = CFGetTypeID(a3);
      if (v30 != FigBufferedAirPlayOutputGetTypeID())
        return 4294950915;
    }
    return audioRenderer_setBufferedAirPlayOutput(a1, a3);
  }
}

void audioRenderer_tearDownFARP(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  CMTimeEpoch v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t FigBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  const void *v15;
  const void *v16;
  const void *v17;
  float v18;
  __int128 v19;
  CMTime v20;
  __int128 v21;
  uint64_t v22;
  CMTime v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)&v20.value = *MEMORY[0x1E0CA2E18];
  v5 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v20.epoch = v5;
  if (dword_1EE2A3620 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_QWORD *)(DerivedStorage + 56))
  {
    if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    CMTimebaseGetTime(&v20, *(CMTimebaseRef *)(DerivedStorage + 24));
    FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(DerivedStorage + 56));
    if (FigBaseObject)
    {
      v8 = FigBaseObject;
      v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
      if (v9)
        v9(v8);
    }
    v10 = CMBaseObjectGetDerivedStorage();
    v11 = *(_QWORD *)(v10 + 48);
    if (v11)
    {
      v12 = v10;
      v13 = *(_QWORD *)(v10 + 40);
      v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
      if (v14)
        v14(v11, v13);
      v15 = *(const void **)(v12 + 48);
      if (v15)
      {
        CFRelease(v15);
        *(_QWORD *)(v12 + 48) = 0;
      }
    }
    v16 = *(const void **)(DerivedStorage + 56);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(DerivedStorage + 56) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 152);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(DerivedStorage + 152) = 0;
    }
    *(_OWORD *)(DerivedStorage + 220) = v19;
    *(_QWORD *)(DerivedStorage + 236) = v5;
    if (*(_BYTE *)(DerivedStorage + 296) && !*(_BYTE *)(DerivedStorage + 433))
    {
      v18 = *(float *)(DerivedStorage + 300);
      v23[0] = *(CMTime *)(DerivedStorage + 304);
      v21 = *(_OWORD *)(DerivedStorage + 328);
      v22 = *(_QWORD *)(DerivedStorage + 344);
      audioRenderer_setRateAndTimeWithoutFARP(v18, a1, (uint64_t)v23, (uint64_t)&v21);
      *(_WORD *)(DerivedStorage + 296) = 0;
    }
    if (a2 == 1)
    {
      v23[0] = v20;
      audioRenderer_postWasFlushedAutomaticallyNotificationForTime(a1, v23);
    }
  }
}

uint64_t audioRenderer_removeNotificationListenerFromTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  uint64_t result;
  uint64_t v4;

  result = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v4 = result;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    return CMTimebaseRemoveTimerDispatchSource(a2, *(dispatch_source_t *)(v4 + 360));
  }
  return result;
}

uint64_t audioRenderer_bapOutputRemoveWeakListeners(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListeners();
  }
  return result;
}

void audioRenderer_readyToDecryptChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (!*(_BYTE *)(DerivedStorage + 433))
    audioRenderer_updateFARPSuspendedState(a2, *(_QWORD *)(DerivedStorage + 56));
  JUMPOUT(0x19402EA24);
}

uint64_t audioRenderer_setRateAndTimeWithoutFARP(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  OpaqueCMTimebase *v9;
  const void *v10;
  uint64_t v11;
  CMClockOrTimebaseRef v12;
  CMClockRef HostTimeClock;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  OpaqueCMTimebase *v15;
  CMTime v17;
  CMTime immediateSourceTime;
  CMTime time;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v17, 0, sizeof(v17));
  if (!*(_BYTE *)(DerivedStorage + 32))
    return 0;
  v8 = DerivedStorage;
  v9 = *(OpaqueCMTimebase **)(DerivedStorage + 24);
  if (!v9)
    return 0;
  if ((*(_BYTE *)(a3 + 12) & 1) != 0)
  {
    v12 = CMTimebaseCopySource(v9);
    v10 = v12;
    if ((*(_BYTE *)(a4 + 12) & 1) != 0)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      time = *(CMTime *)a4;
      CMSyncConvertTime(&v17, &time, HostTimeClock, v10);
    }
    else
    {
      CMSyncGetTime(&v17, v12);
    }
  }
  else
  {
    v10 = 0;
    v17 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  }
  if (dword_1EE2A3620)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v15 = *(OpaqueCMTimebase **)(v8 + 24);
  time = *(CMTime *)a3;
  immediateSourceTime = v17;
  v11 = CMTimebaseSetRateAndAnchorTime(v15, a1, &time, &immediateSourceTime);
  if (v10)
    CFRelease(v10);
  return v11;
}

void audioRenderer_postWasFlushedAutomaticallyNotificationForTime(uint64_t a1, CMTime *a2)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  __CFDictionary *Mutable;
  CMTime v5;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v5 = *a2;
  v3 = CMTimeCopyAsDictionary(&v5, v2);
  Mutable = CFDictionaryCreateMutable(v2, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("FlushMediaTime"), v3);
  audioRenderer_postNotification();
  if (v3)
    CFRelease(v3);
  if (Mutable)
    CFRelease(Mutable);
}

void audioRenderer_renderPipelineDecodeError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (!*(_BYTE *)(DerivedStorage + 433) && *(_QWORD *)(DerivedStorage + 56) == a4)
    audioRenderer_flushWithType(a2, 1);
  JUMPOUT(0x19402EA24);
}

uint64_t audioRenderer_renderPipelineDeviceOrLatencyChanged(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3620)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (!*((_BYTE *)DerivedStorage + 433) && DerivedStorage[7] == a4)
  {
    if (*((_BYTE *)DerivedStorage + 296))
      *((_BYTE *)DerivedStorage + 297) = 1;
    else
      audioRenderer_resynchronize(a2);
  }
  return MEMORY[0x19402EA24](*DerivedStorage);
}

uint64_t audioRenderer_renderPipelinePrerollLost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  CMTime v8;
  CMTime v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v9 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (!*((_BYTE *)DerivedStorage + 433) && DerivedStorage[7] == a4)
  {
    CMTimebaseGetTime(&v9, (CMTimebaseRef)DerivedStorage[3]);
    v8 = v9;
    audioRenderer_postWasFlushedAutomaticallyNotificationForTime(a2, &v8);
  }
  return MEMORY[0x19402EA24](*DerivedStorage);
}

void audioRenderer_renderPipelineRebuildCouldBenefitFidelity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  if (!*(_BYTE *)(DerivedStorage + 433) && *(_QWORD *)(DerivedStorage + 56) == a4)
    audioRenderer_postNotification();
  JUMPOUT(0x19402EA24);
}

uint64_t audioRenderer_flushWithType(uint64_t a1, uint64_t a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  __n128 v8;
  CMTime v10;
  os_log_type_t type;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (dword_1EE2A3620)
  {
    v12 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 433))
  {
    MEMORY[0x19402EA24](*DerivedStorage);
    return 4294954511;
  }
  else
  {
    v6 = DerivedStorage[7];
    if (v6)
    {
      v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
      if (v7)
        v7(v6, 1);
    }
    audioRenderer_tearDownFARP(a1, a2);
    v8.n128_u32[0] = *((_DWORD *)DerivedStorage + 24);
    if (v8.n128_f32[0] != 0.0)
    {
      CMTimebaseGetTime(&v10, (CMTimebaseRef)DerivedStorage[3]);
      v8 = audioRenderer_beginUnderrun(a1, (__n128 *)&v10);
    }
    MEMORY[0x19402EA24](*DerivedStorage, v8);
    audioRenderer_postNotification();
    return 0;
  }
}

__n128 audioRenderer_beginUnderrun(uint64_t a1, __n128 *a2)
{
  uint64_t DerivedStorage;
  __n128 result;
  __n128 *v5;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  __n128 v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 384) & 1) == 0)
  {
    v5 = (__n128 *)(DerivedStorage + 372);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v7 = Mutable;
      FigCFDictionarySetCMTime();
      audioRenderer_postNotification();
      v8 = *a2;
      v5[1].n128_u64[0] = a2[1].n128_u64[0];
      *v5 = v8;
      CFRelease(v7);
    }
    else
    {
      result = *a2;
      v5[1].n128_u64[0] = a2[1].n128_u64[0];
      *v5 = result;
    }
  }
  return result;
}

uint64_t audioRenderer_postNotification()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(result + 433))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigDispatchAsyncPostNotification();
  }
  return result;
}

uint64_t audioRenderer_resynchronize(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (dword_1EE2A3620)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, 0, 0, 1);
}

void audioRenderer_disturbPlaybackSwapPointerRestorePlayback(uint64_t a1, const void **a2, const void *a3, int a4)
{
  uint64_t DerivedStorage;
  _BOOL4 v9;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v11;
  const void *v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    if (!a4)
      return;
    if (dword_1EE2A3620 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    goto LABEL_11;
  }
  if (a4)
    v9 = 1;
  else
    v9 = FigCFEqual() == 0;
  if (dword_1EE2A3620 >= 2)
  {
    v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v9)
  {
LABEL_11:
    if (*(_QWORD *)(DerivedStorage + 56))
      audioRenderer_tearDownFARP(a1, 1);
    if (a2)
    {
      v12 = *a2;
      *a2 = a3;
      if (a3)
        CFRetain(a3);
      if (v12)
        CFRelease(v12);
    }
  }
}

void audioRenderer_timebaseRateChangedListener(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  _QWORD *v6;

  if (!*(_BYTE *)(CMBaseObjectGetDerivedStorage() + 433) && CMTimebaseGetRate((CMTimebaseRef)a4) != 0.0)
  {
    if (audioRenderer_timebaseRateChangedListener_sSetupAudioRendererTimebaseListenerQueueOnce != -1)
      dispatch_once_f(&audioRenderer_timebaseRateChangedListener_sSetupAudioRendererTimebaseListenerQueueOnce, &audioRenderer_timebaseRateChangedListener_sAudioRendererTimebaseListenerQueue, (dispatch_function_t)audioRenderer_setupTimebaseRateChangedListenerAsyncQueue);
    v6 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
    CFRetain(a2);
    *v6 = a2;
    CFRetain(a4);
    v6[1] = a4;
    dispatch_async_f((dispatch_queue_t)audioRenderer_timebaseRateChangedListener_sAudioRendererTimebaseListenerQueue, v6, (dispatch_function_t)audioRenderer_timebaseRateChangedListenerAsync);
  }
}

dispatch_queue_t audioRenderer_setupTimebaseRateChangedListenerAsyncQueue(dispatch_queue_t *a1)
{
  dispatch_queue_t result;

  result = dispatch_queue_create("com.apple.coremedia.audiorenderer.timebaselistener", 0);
  *a1 = result;
  return result;
}

void audioRenderer_timebaseRateChangedListenerAsync(const void **a1)
{
  const void *v2;
  _QWORD *DerivedStorage;
  const void *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  os_log_type_t type;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = a1[1];
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (v4 == (const void *)DerivedStorage[3])
  {
    if (dword_1EE2A3620)
    {
      v7 = 0;
      type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *((_BYTE *)DerivedStorage + 296) = 0;
    if (*((_BYTE *)DerivedStorage + 297))
    {
      audioRenderer_resynchronize((uint64_t)v2);
      *((_BYTE *)DerivedStorage + 297) = 0;
    }
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  CFRelease(v2);
  CFRelease(v4);
  free(a1);
}

void audioRenderer_bapOutputActiveConfigurationDidBecomeInvalid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  uint64_t CMBaseObject;
  void (*v8)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  void (*v10)(uint64_t);
  CFTypeRef cf[25];

  cf[24] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (!*((_BYTE *)DerivedStorage + 433) && DerivedStorage[9] == a4)
  {
    CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(a4);
    v8 = *(void (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 48);
    if (v8)
      v8(CMBaseObject, CFSTR("IsActiveConfigurationInvalid"), *MEMORY[0x1E0C9AE00], cf);
    if (FigCFEqual())
    {
      if (dword_1EE2A3620)
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v10 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v10)
        v10(a4);
      audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a2, 0, 0, 1);
    }
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  if (cf[0])
    CFRelease(cf[0]);
}

void audioRenderer_updateFARPSuspendedState(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t *v5;
  void (*v6)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t *v7;
  uint64_t v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, const __CFString *, uint64_t);
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (a2 && !*(_BYTE *)(DerivedStorage + 433))
  {
    v4 = *(_QWORD *)(DerivedStorage + 208);
    v5 = (uint64_t *)MEMORY[0x1E0C9AE40];
    if (v4)
    {
      v6 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
      if (v6)
        v6(v4, *MEMORY[0x1E0CA3218], *MEMORY[0x1E0C9AE00], &cf);
      v7 = (uint64_t *)MEMORY[0x1E0C9AE50];
      if (!FigCFEqual())
        v5 = v7;
    }
    v8 = *v5;
    FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
    v10 = *(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v10)
      v10(FigBaseObject, CFSTR("Suspended"), v8);
  }
  if (cf)
    CFRelease(cf);
}

uint64_t audioRenderer_setAudioTimePitchAlgorithm(uint64_t a1, const void *a2)
{
  const void **DerivedStorage;
  const void **v5;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950916;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)v5 + 433))
  {
    MEMORY[0x19402EA24](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 16, a2, 0);
    MEMORY[0x19402EA24](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setAudioProcessingTap(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 433))
    JUMPOUT(0x19402EA24);
  audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, (const void **)DerivedStorage + 18, a2, 0);
  MEMORY[0x19402EA24](*DerivedStorage);
  return audioRenderer_postNotification();
}

uint64_t audioRenderer_setAudioSession(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  const void *v6;
  uint64_t started;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950916;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)v5 + 433) || (v6 = (const void *)v5[20], v6 == a2))
  {
    started = 0;
LABEL_10:
    MEMORY[0x19402EA24](*v5);
    return started;
  }
  if (v6)
    FigStopForwardingMediaServicesProcessDeathNotification();
  audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, (const void **)v5 + 20, a2, 0);
  started = FigStartForwardingMediaServicesProcessDeathNotification();
  if ((_DWORD)started)
    goto LABEL_10;
  MEMORY[0x19402EA24](*v5);
  audioRenderer_postNotification();
  return started;
}

uint64_t audioRenderer_setMultichannelAudioSpatializationAllowed(uint64_t a1, const void *a2)
{
  const void **DerivedStorage;
  const void **v5;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950916;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)v5 + 433))
  {
    MEMORY[0x19402EA24](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 22, a2, 0);
    MEMORY[0x19402EA24](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setStereoAudioSpatializationAllowed(uint64_t a1, const void *a2)
{
  const void **DerivedStorage;
  const void **v5;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950916;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)v5 + 433))
  {
    MEMORY[0x19402EA24](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 23, a2, 0);
    *((_BYTE *)v5 + 192) = 1;
    MEMORY[0x19402EA24](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setIsUnaccompaniedByVisuals(uint64_t a1, const void *a2)
{
  const void **DerivedStorage;
  const void **v5;

  DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950916;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)v5 + 433))
  {
    MEMORY[0x19402EA24](*v5);
  }
  else
  {
    audioRenderer_disturbPlaybackSwapPointerRestorePlayback(a1, v5 + 25, a2, 0);
    MEMORY[0x19402EA24](*v5);
    audioRenderer_postNotification();
  }
  return 0;
}

uint64_t audioRenderer_setBufferedAirPlayOutput(uint64_t a1, const void *a2)
{
  const char *DerivedStorage;
  uint64_t v5;
  const void *v6;
  CFStringRef v7;
  CFStringRef v8;
  uint64_t CMBaseObject;
  uint64_t (*v10)(uint64_t, const __CFString *, CFStringRef);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, const __CFString *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, const __CFString *, uint64_t);

  DerivedStorage = (const char *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
  v5 = *((_QWORD *)DerivedStorage + 9);
  if ((const void *)v5 != a2)
  {
    audioRenderer_bapOutputRemoveWeakListeners(a1, v5);
    v6 = (const void *)*((_QWORD *)DerivedStorage + 9);
    *((_QWORD *)DerivedStorage + 9) = a2;
    if (a2)
      CFRetain(a2);
    if (v6)
      CFRelease(v6);
    if (*((_QWORD *)DerivedStorage + 9)
      && (CMNotificationCenterGetDefaultLocalCenter(),
          FigNotificationCenterAddWeakListeners(),
          *((_QWORD *)DerivedStorage + 9)))
    {
      v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], DerivedStorage + 448, 0x8000100u);
      if (v7)
      {
        v8 = v7;
        CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*((_QWORD *)DerivedStorage + 9));
        v10 = *(uint64_t (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
        if (v10)
          v11 = v10(CMBaseObject, CFSTR("LoggingID"), v8);
        else
          v11 = 4294954514;
        v12 = *((_QWORD *)DerivedStorage + 20);
        if (v12)
        {
          v13 = FigBufferedAirPlayOutputGetCMBaseObject(*((_QWORD *)DerivedStorage + 9));
          v14 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
          if (!v14)
            goto LABEL_21;
          v11 = v14(v13, CFSTR("FigAudioSession"), v12);
          if ((_DWORD)v11)
            goto LABEL_22;
        }
        v15 = *((_QWORD *)DerivedStorage + 21);
        if (!v15)
        {
LABEL_20:
          audioRenderer_tearDownFARP(a1, 1);
          goto LABEL_22;
        }
        v16 = FigBufferedAirPlayOutputGetCMBaseObject(*((_QWORD *)DerivedStorage + 9));
        v17 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 56);
        if (v17)
        {
          v11 = v17(v16, CFSTR("ClientAuditToken"), v15);
          if (!(_DWORD)v11)
            goto LABEL_20;
LABEL_22:
          CFRelease(v8);
          goto LABEL_23;
        }
LABEL_21:
        v11 = 4294954514;
        goto LABEL_22;
      }
    }
    else
    {
      audioRenderer_tearDownFARP(a1, 1);
    }
  }
  v11 = 0;
LABEL_23:
  MEMORY[0x19402EA24](*(_QWORD *)DerivedStorage);
  return v11;
}

uint64_t audioRenderer_applySoftwareVolume(uint64_t a1, CFTypeRef cf1, int a3, float a4, float a5)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v10;
  __CFString **v11;
  __CFString *v12;
  const __CFAllocator *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v20;
  float valuePtr;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = a5;
  valuePtr = a4;
  if (dword_1EE2A3620)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CFEqual(cf1, CFSTR("SoftwareVolume1")))
  {
    v10 = 0;
    v11 = kFigAudioRenderPipelineProperty_SoftwareVolume1RampDuration;
LABEL_7:
    v12 = *v11;
    goto LABEL_8;
  }
  if (CFEqual(cf1, CFSTR("SoftwareVolume2")))
  {
    v10 = 0;
    v11 = kFigAudioRenderPipelineProperty_SoftwareVolume2RampDuration;
    goto LABEL_7;
  }
  if (!CFEqual(cf1, CFSTR("SoftwareVolume5")))
    return FigSignalErrorAt();
  v12 = 0;
  v10 = 1;
LABEL_8:
  if (a5 < 0.0)
    v20 = 0.0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  v15 = CFNumberCreate(v13, kCFNumberFloatType, &v20);
  if ((v10 & 1) != 0 || (v16 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, v12, v15, 0), !(_DWORD)v16))
  {
    v17 = audioRenderer_setPropertyOnAudioRenderPipeline(a1, cf1, v14, 1);
    v18 = v17;
    if (a3 == 1 && !(_DWORD)v17)
    {
      if (v20 > 0.0)
        usleep((v20 * 1000.0 * 1000.0));
      v18 = 0;
    }
    if (!v15)
      goto LABEL_19;
    goto LABEL_18;
  }
  v18 = v16;
  if (v15)
LABEL_18:
    CFRelease(v15);
LABEL_19:
  if (v14)
    CFRelease(v14);
  return v18;
}

__CFString *audioRenderer_deviceRendererProtocolCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("FigSampleBufferAudioRenderer <FigSampleBufferAudioDeviceRendererProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t audioRenderer_DuckVolume(uint64_t a1, int a2, float a3, float a4)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v10;
  uint64_t v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (dword_1EE2A3620)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((_BYTE *)DerivedStorage + 433))
  {
    v12 = 4294954511;
    goto LABEL_16;
  }
  v10 = 0.0;
  if (a3 >= 0.0)
    v10 = a3;
  if (a2)
  {
    if (v10 < 1.0 && *((_BYTE *)DerivedStorage + 424) == 0)
    {
      *((float *)DerivedStorage + 107) = v10;
      *((_BYTE *)DerivedStorage + 424) = 1;
      audioRenderer_applySoftwareVolume(a1, CFSTR("SoftwareVolume2"), 1, v10, a4);
    }
    goto LABEL_15;
  }
  if (!*((_BYTE *)DerivedStorage + 424))
  {
LABEL_15:
    v12 = 0;
    goto LABEL_16;
  }
  audioRenderer_applySoftwareVolume(a1, CFSTR("SoftwareVolume2"), 0, v10, a4);
  v12 = 0;
  *((_BYTE *)DerivedStorage + 424) = 0;
LABEL_16:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v12;
}

uint64_t audioRenderer_SilentMute(uint64_t a1, int a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  char v6;
  float v7;
  uint64_t v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (dword_1EE2A3620)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((_BYTE *)DerivedStorage + 433))
  {
    v8 = 4294954511;
    goto LABEL_11;
  }
  if (!a2)
  {
    if (*((_BYTE *)DerivedStorage + 432))
    {
      v6 = 0;
      v7 = 1.0;
      goto LABEL_9;
    }
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  if (*((_BYTE *)DerivedStorage + 432))
    goto LABEL_10;
  v6 = 1;
  v7 = 0.0;
LABEL_9:
  audioRenderer_applySoftwareVolume(a1, CFSTR("SoftwareVolume5"), 1, v7, 0.0);
  v8 = 0;
  *((_BYTE *)DerivedStorage + 432) = v6;
LABEL_11:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v8;
}

uint64_t audioRenderer_queueIsAboveHighWaterLevel()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 433))
  {
    v3 = 1;
  }
  else if (DerivedStorage[7]
         && (v1 = DerivedStorage[6],
             (v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16)) != 0))
  {
    v3 = v2(v1);
  }
  else
  {
    v3 = 0;
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return v3;
}

uint64_t audioRenderer_enqueueSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  const void *Decryptor;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  _QWORD *v11;
  CMFormatDescriptionRef FormatDescription;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  int shouldEnableSpatialization;
  uint64_t v18;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v20;
  unsigned int v21;
  const char *v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int v25;
  unsigned int v26;
  const char *v27;
  NSObject *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t CMBaseObject;
  void (*v34)(uint64_t, const __CFString *, _QWORD, CMTimeRange *);
  CMTimeValue value;
  NSObject *v36;
  unsigned int v37;
  unsigned int v38;
  const char *v39;
  NSObject *v40;
  unsigned int v41;
  unsigned int v42;
  const char *v43;
  uint64_t v44;
  __CFDictionary *Mutable;
  __CFDictionary *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  CFStringRef v56;
  CFStringRef v57;
  const void *v58;
  uint64_t v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  const char *v63;
  NSObject *v64;
  unsigned int v65;
  unsigned int v66;
  const char *v67;
  uint64_t v68;
  uint64_t FigBaseObject;
  uint64_t (*v70)(uint64_t, const __CFString *, const void *);
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, const __CFString *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, const __CFString *, uint64_t);
  void *v78;
  _QWORD *v79;
  CMTimeValue v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int (*v83)(uint64_t, const __CFString *, _QWORD, CMTime *);
  uint64_t v84;
  uint64_t (*v85)(uint64_t, const __CFString *, _QWORD, CMTime *);
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  const void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(const void *, uint64_t (*)(), uint64_t, uint64_t);
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, const __CFString *, uint64_t, __int128 *);
  NSObject *v98;
  unsigned int v99;
  unsigned int v100;
  const char *v101;
  CMTimeValue v102;
  const void *v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(uint64_t, const __CFString *, uint64_t);
  uint64_t v108;
  CFNumberRef v109;
  uint64_t v110;
  void (*v111)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v112;
  uint64_t (*v113)(uint64_t);
  uint64_t v114;
  uint64_t v115;
  CMTime *v116;
  CMTimeValue v117;
  CMTimeScale timescale;
  uint64_t v119;
  const __CFString *v120;
  const __CFDictionary *v121;
  CMTime *v122;
  NSObject *v123;
  unsigned int v124;
  unsigned int v125;
  const char *v126;
  CMSampleTimingInfo *v127;
  uint64_t SampleTimingInfoArray;
  int32_t v129;
  CMItemCount v130;
  CMItemCount v131;
  CMTime *p_presentationTimeStamp;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  CFDictionaryRef v136;
  CMSampleBufferRef v137;
  CFDictionaryRef v138;
  Float64 Seconds;
  uint64_t v140;
  int v141;
  Float64 v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, opaqueCMSampleBuffer *);
  uint64_t v145;
  int v146;
  OpaqueCMTimebase *v147;
  NSObject *v148;
  CMTimeEpoch epoch;
  OpaqueCMTimebase *v150;
  NSObject *v151;
  CMSampleBufferRef v153;
  const opaqueCMFormatDescription *v154;
  int v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  const char *v159;
  CMTime v160;
  CMTime v161;
  CMTime lhs;
  CMTime v163;
  CMTime v164;
  CMTime v165;
  CMTime v166;
  CMTime v167;
  CMTime time1;
  CMTime duration;
  CMTime start;
  CMSampleBufferRef sampleBufferOut;
  CMTime rhs;
  CMTime valuePtr;
  CMTime v174;
  CMTime v175;
  CMTime v176;
  CMTime v177;
  CMTime type;
  CMItemCount timingArrayEntriesNeededOut;
  CMSampleBufferRef v180;
  CMTime time2;
  const char *v182;
  __int16 v183;
  CMTimeValue v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  int v188;
  __int16 v189;
  Float64 v190;
  __int16 v191;
  CMTimeValue v192;
  __int16 v193;
  CMTimeScale v194;
  CMTimeRange cf[2];
  __int128 v196;
  __int128 v197;
  int epoch_high;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v165 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (!a2)
    return 4294950916;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)v5 + 433))
  {
    v86 = 4294954511;
    goto LABEL_255;
  }
  Decryptor = (const void *)FigSampleBufferGetDecryptor();
  v7 = CMBaseObjectGetDerivedStorage();
  v8 = *(const void **)(v7 + 208);
  if (v8 != Decryptor)
  {
    v9 = v7;
    if (v8)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v10 = *(const void **)(v9 + 208);
    }
    else
    {
      v10 = 0;
    }
    *(_QWORD *)(v9 + 208) = Decryptor;
    if (Decryptor)
      CFRetain(Decryptor);
    if (v10)
      CFRelease(v10);
    if (Decryptor)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    audioRenderer_updateFARPSuspendedState(a1, *(_QWORD *)(v9 + 56));
  }
  if (v5[7])
    goto LABEL_209;
  v11 = (_QWORD *)CMBaseObjectGetDerivedStorage();
  valuePtr.value = 0;
  MEMORY[0x19402EA0C](*v11);
  if (*((_BYTE *)v11 + 433))
  {
    v86 = 4294954511;
    goto LABEL_203;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  v13 = CMBaseObjectGetDerivedStorage();
  v176.value = 0;
  v175.value = 0;
  v174.value = 0;
  if (!FormatDescription)
  {
    v86 = 4294950916;
    goto LABEL_187;
  }
  v14 = v13;
  if (FPSupport_CopyAndCheckClientOnAllowListForPrefDomainKey(*(_QWORD *)(v13 + 160), 1, 0x1E2FE86B8, (CFTypeRef *)&v174)&& !*(_BYTE *)(v14 + 192))
  {
    v15 = *(const void **)(v14 + 184);
    v16 = (const void *)*MEMORY[0x1E0C9AE50];
    *(_QWORD *)(v14 + 184) = *MEMORY[0x1E0C9AE50];
    if (v16)
      CFRetain(v16);
    if (v15)
      CFRelease(v15);
  }
  shouldEnableSpatialization = audioRenderer_shouldEnableSpatialization(a1, (uint64_t)FormatDescription);
  v18 = CMBaseObjectGetDerivedStorage();
  v157 = v11;
  v158 = v14;
  v154 = FormatDescription;
  v155 = shouldEnableSpatialization;
  if (*(_BYTE *)(v18 + 292))
  {
    if (dword_1EE2A3620)
    {
      LODWORD(v196) = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v20 = v196;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if (v21)
      {
        if (a1)
          v22 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
        else
          v22 = "";
        LODWORD(time2.value) = 136315650;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 2082;
        v182 = v22;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v31 = 0;
      FormatDescription = v154;
      goto LABEL_90;
    }
LABEL_89:
    v31 = 0;
    goto LABEL_90;
  }
  v23 = *MEMORY[0x1E0C9AE50];
  if (*MEMORY[0x1E0C9AE50] == *(_QWORD *)(v18 + 176))
  {
    if (dword_1EE2A3620)
    {
      LODWORD(v196) = 0;
      LOBYTE(type.value) = 0;
      v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v29 = v196;
      if (os_log_type_enabled(v28, type.value))
        v30 = v29;
      else
        v30 = v29 & 0xFFFFFFFE;
      if (!v30)
        goto LABEL_60;
      if (!a1)
      {
        v27 = "";
        goto LABEL_59;
      }
      goto LABEL_39;
    }
    goto LABEL_48;
  }
  if (FigGetCFPreferenceBooleanWithDefault())
  {
    if (dword_1EE2A3620)
    {
      LODWORD(v196) = 0;
      LOBYTE(type.value) = 0;
      v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v25 = v196;
      if (os_log_type_enabled(v24, type.value))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if (!v26)
        goto LABEL_60;
      if (!a1)
      {
        v27 = "";
        goto LABEL_59;
      }
LABEL_39:
      v27 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
LABEL_59:
      LODWORD(time2.value) = 136315650;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
      LOWORD(time2.flags) = 2048;
      *(_QWORD *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 2082;
      v182 = v27;
      _os_log_send_and_compose_impl();
LABEL_60:
      FormatDescription = v154;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v31 = 0;
      goto LABEL_90;
    }
LABEL_48:
    v31 = 0;
    goto LABEL_84;
  }
  cf[0].start.value = 0;
  v32 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 72);
  if (v32)
  {
    CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(v32);
    v34 = *(void (**)(uint64_t, const __CFString *, _QWORD, CMTimeRange *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
    if (v34)
    {
      v34(CMBaseObject, CFSTR("AtmosIsSupported"), 0, cf);
      value = cf[0].start.value;
      if (cf[0].start.value)
        CFRelease((CFTypeRef)cf[0].start.value);
    }
    else
    {
      value = 0;
    }
    if (v23 == value)
    {
      if (dword_1EE2A3620)
      {
        LODWORD(v196) = 0;
        LOBYTE(type.value) = 0;
        v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v41 = v196;
        if (os_log_type_enabled(v40, type.value))
          v42 = v41;
        else
          v42 = v41 & 0xFFFFFFFE;
        if (v42)
        {
          if (a1)
            v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
          else
            v43 = "";
          LODWORD(time2.value) = 136315650;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = a1;
          HIWORD(time2.epoch) = 2082;
          v182 = v43;
          _os_log_send_and_compose_impl();
        }
        FormatDescription = v154;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_89;
      }
      v31 = 0;
LABEL_84:
      FormatDescription = v154;
      goto LABEL_90;
    }
  }
  if (!dword_1EE2A3620)
  {
    v31 = 1;
    goto LABEL_84;
  }
  LODWORD(v196) = 0;
  LOBYTE(type.value) = 0;
  v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  v37 = v196;
  if (os_log_type_enabled(v36, type.value))
    v38 = v37;
  else
    v38 = v37 & 0xFFFFFFFE;
  if (v38)
  {
    if (a1)
      v39 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
    else
      v39 = "";
    LODWORD(time2.value) = 136315650;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_shouldAllowAtmosDecode";
    LOWORD(time2.flags) = 2048;
    *(_QWORD *)((char *)&time2.flags + 2) = a1;
    HIWORD(time2.epoch) = 2082;
    v182 = v39;
    _os_log_send_and_compose_impl();
  }
  FormatDescription = v154;
  v31 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_90:
  v44 = CMBaseObjectGetDerivedStorage();
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v86 = 4294950914;
    goto LABEL_187;
  }
  v46 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("FormatDescription"), FormatDescription);
  v47 = *(const void **)(v44 + 120);
  if (v47)
    CFDictionarySetValue(v46, CFSTR("AudioDeviceUID"), v47);
  v48 = (const void *)*MEMORY[0x1E0C9AE50];
  v49 = (const void *)*MEMORY[0x1E0C9AE40];
  if (v155)
    v50 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v50 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v46, CFSTR("EnableSpatialization"), v50);
  if (v31)
    v51 = v49;
  else
    v51 = v48;
  CFDictionarySetValue(v46, CFSTR("AllowAtmosDecode"), v51);
  v52 = *(const void **)(v44 + 200);
  if (v52)
    CFDictionarySetValue(v46, CFSTR("AudioOnly"), v52);
  if (*(_BYTE *)(v44 + 102))
    v53 = v48;
  else
    v53 = v49;
  CFDictionarySetValue(v46, CFSTR("AlwaysNotifyLatencyChange"), v53);
  if (*(_BYTE *)(v44 + 136))
    v54 = v48;
  else
    v54 = v49;
  CFDictionarySetValue(v46, CFSTR("DisallowTimePitch"), v54);
  v55 = *(const void **)(v44 + 160);
  if (v55)
    CFDictionarySetValue(v46, CFSTR("AudioSession"), v55);
  v156 = *MEMORY[0x1E0C9AE00];
  v56 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)(v44 + 448), 0x8000100u);
  if (v56)
  {
    v57 = v56;
    CFDictionarySetValue(v46, CFSTR("LoggingID"), v56);
    CFRelease(v57);
  }
  else
  {
    v86 = FigSignalErrorAt();
    CFRelease(v46);
    v46 = 0;
    if ((_DWORD)v86)
    {
      v11 = v157;
      goto LABEL_187;
    }
  }
  v58 = *(const void **)(v14 + 72);
  if (v58)
  {
    v59 = FigBufferedAirPlayAudioRenderPipelineCreate(0, v58, v46, &v176.value);
    if ((_DWORD)v59)
      goto LABEL_265;
    if (!dword_1EE2A3620)
      goto LABEL_135;
    LODWORD(v196) = 0;
    LOBYTE(type.value) = 0;
    v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v61 = v196;
    if (os_log_type_enabled(v60, type.value))
      v62 = v61;
    else
      v62 = v61 & 0xFFFFFFFE;
    if (!v62)
      goto LABEL_134;
    if (a1)
      v63 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
    else
      v63 = "";
    v68 = *(_QWORD *)(v14 + 72);
    LODWORD(time2.value) = 136316162;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_createFARPWithFormatDescription";
    LOWORD(time2.flags) = 2048;
    *(_QWORD *)((char *)&time2.flags + 2) = a1;
    HIWORD(time2.epoch) = 2082;
    v182 = v63;
    v183 = 2048;
    v184 = v176.value;
    v185 = 2048;
    v186 = v68;
    goto LABEL_133;
  }
  v59 = FigAudioQueueRenderPipelineCreate(0, v46, &v176);
  if ((_DWORD)v59)
    goto LABEL_265;
  if (dword_1EE2A3620)
  {
    LODWORD(v196) = 0;
    LOBYTE(type.value) = 0;
    v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    v65 = v196;
    if (os_log_type_enabled(v64, type.value))
      v66 = v65;
    else
      v66 = v65 & 0xFFFFFFFE;
    if (!v66)
      goto LABEL_134;
    if (a1)
      v67 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
    else
      v67 = "";
    LODWORD(time2.value) = 136315906;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_createFARPWithFormatDescription";
    LOWORD(time2.flags) = 2048;
    *(_QWORD *)((char *)&time2.flags + 2) = a1;
    HIWORD(time2.epoch) = 2082;
    v182 = v67;
    v183 = 2048;
    v184 = v176.value;
LABEL_133:
    _os_log_send_and_compose_impl();
LABEL_134:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    v14 = v158;
  }
LABEL_135:
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v176.value);
  v70 = *(uint64_t (**)(uint64_t, const __CFString *, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
  if (!v70)
  {
    v86 = 4294954514;
LABEL_153:
    v11 = v157;
    goto LABEL_185;
  }
  v59 = v70(FigBaseObject, CFSTR("HandleFormatDescriptionChanges"), v48);
  if ((_DWORD)v59)
  {
LABEL_265:
    v86 = v59;
    goto LABEL_153;
  }
  v71 = *(_QWORD *)(v14 + 128);
  v11 = v157;
  if (!v71 || *(_BYTE *)(v14 + 136))
    goto LABEL_141;
  v72 = FigRenderPipelineGetFigBaseObject(v176.value);
  v73 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v73)
    goto LABEL_173;
  v74 = v73(v72, CFSTR("TimePitchAlgorithm"), v71);
  if (!(_DWORD)v74)
  {
LABEL_141:
    v75 = *(_QWORD *)(v14 + 144);
    v76 = FigRenderPipelineGetFigBaseObject(v176.value);
    v77 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
    if (!v77)
      goto LABEL_173;
    v74 = v77(v76, CFSTR("AudioProcessingTap"), v75);
    if (!(_DWORD)v74)
    {
      v78 = (void *)v176.value;
      v79 = (_QWORD *)CMBaseObjectGetDerivedStorage();
      MEMORY[0x19402EA0C](*v79);
      CFDictionaryApplyFunction((CFDictionaryRef)v79[10], (CFDictionaryApplierFunction)audioRenderer_applyCachedPropertiesToFARPApplierFunction, v78);
      MEMORY[0x19402EA24](*v79);
      audioRenderer_updateFARPSuspendedState(a1, v176.value);
      v80 = v176.value;
      v81 = CMBaseObjectGetDerivedStorage();
      memset(cf, 0, 24);
      audioRenderer_getLowWaterDurationScaledForRate(&cf[0].start, *(float *)(v81 + 96));
      memset(&time2, 0, sizeof(time2));
      audioRenderer_getHighWaterDurationScaledForRate(&time2, *(float *)(v81 + 96));
      v177.value = 0;
      v82 = FigRenderPipelineGetFigBaseObject(v80);
      v83 = *(unsigned int (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
      if (v83 && !v83(v82, CFSTR("SourceSampleBufferConsumer"), 0, &v175))
      {
        v88 = v158;
      }
      else
      {
        v84 = FigRenderPipelineGetFigBaseObject(v80);
        v85 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CMTime *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (!v85)
          goto LABEL_173;
        v86 = v85(v84, CFSTR("SourceSampleBufferQueue"), 0, &v177);
        v87 = (const void *)v177.value;
        if (!(_DWORD)v86)
        {
          v196 = *(_OWORD *)&time2.value;
          *(_QWORD *)&v197 = time2.epoch;
          type = cf[0].start;
          v86 = FigSampleBufferConsumerCreateForBufferQueue(v177.value, (uint64_t)&v196, (uint64_t)&type, &v175);
          v87 = (const void *)v177.value;
        }
        v88 = v158;
        if (v87)
          CFRelease(v87);
        if ((_DWORD)v86)
          goto LABEL_185;
      }
      v89 = (const void *)v175.value;
      v90 = CMBaseObjectGetDerivedStorage();
      if (!v89)
      {
        v86 = 4294950916;
        goto LABEL_185;
      }
      v91 = v90;
      *(_QWORD *)(v90 + 48) = CFRetain(v89);
      v92 = *(uint64_t (**)(const void *, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 16)
                                                                                    + 32);
      if (v92)
      {
        v74 = v92(v89, audioRenderer_consumerReachedLowWaterCallback, a1, v91 + 40);
        if (!(_DWORD)v74)
        {
          *(_QWORD *)(v88 + 56) = v176.value;
          v93 = *(const void **)(v88 + 152);
          *(_QWORD *)(v88 + 152) = v154;
          CFRetain(v154);
          if (v93)
            CFRelease(v93);
          v176.value = 0;
          if (*(_QWORD *)(CMBaseObjectGetDerivedStorage() + 56))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
          }
          v94 = CMBaseObjectGetDerivedStorage();
          *(_QWORD *)&v196 = 0;
          v95 = *(_QWORD *)(v94 + 56);
          if (v95)
          {
            v96 = FigRenderPipelineGetFigBaseObject(v95);
            v97 = *(void (**)(uint64_t, const __CFString *, uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
            if (v97)
            {
              v97(v96, CFSTR("PreferredClock"), v156, &v196);
              if ((_QWORD)v196)
              {
                if (CMSyncMightDrift(*(CMClockOrTimebaseRef *)(v94 + 64), (CMClockOrTimebaseRef)v196))
                {
                  if (dword_1EE2A3620)
                  {
                    LODWORD(type.value) = 0;
                    LOBYTE(v177.value) = 0;
                    v98 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    v99 = type.value;
                    if (os_log_type_enabled(v98, v177.value))
                      v100 = v99;
                    else
                      v100 = v99 & 0xFFFFFFFE;
                    if (v100)
                    {
                      if (a1)
                        v101 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
                      else
                        v101 = "";
                      v102 = *(_QWORD *)(v94 + 64);
                      LODWORD(time2.value) = 136316162;
                      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_updateAudioClockFromFARP";
                      LOWORD(time2.flags) = 2048;
                      *(_QWORD *)((char *)&time2.flags + 2) = a1;
                      HIWORD(time2.epoch) = 2082;
                      v182 = v101;
                      v183 = 2112;
                      v184 = v102;
                      v185 = 2112;
                      v186 = v196;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    v11 = v157;
                  }
                  audioRenderer_postNotification();
                  v103 = *(const void **)(v94 + 64);
                  v104 = (const void *)v196;
                  *(_QWORD *)(v94 + 64) = v196;
                  if (v104)
                    CFRetain(v104);
                  if (v103)
                    CFRelease(v103);
                }
                if ((_QWORD)v196)
                  CFRelease((CFTypeRef)v196);
              }
            }
          }
          v86 = 0;
          goto LABEL_185;
        }
        goto LABEL_281;
      }
LABEL_173:
      v86 = 4294954514;
      goto LABEL_185;
    }
  }
LABEL_281:
  v86 = v74;
LABEL_185:
  if (v46)
    CFRelease(v46);
LABEL_187:
  if (v176.value)
    CFRelease((CFTypeRef)v176.value);
  if (v175.value)
    CFRelease((CFTypeRef)v175.value);
  if (v174.value)
    CFRelease((CFTypeRef)v174.value);
  if ((_DWORD)v86)
    goto LABEL_203;
  v105 = v11[3];
  v106 = FigRenderPipelineGetFigBaseObject(v11[7]);
  v107 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v107)
  {
    v86 = 4294954514;
LABEL_203:
    MEMORY[0x19402EA24](*v11);
    goto LABEL_207;
  }
  v108 = v107(v106, CFSTR("Timebase"), v105);
  if ((_DWORD)v108)
  {
    v86 = v108;
    goto LABEL_203;
  }
  valuePtr.value = CMTimebaseGetRate((CMTimebaseRef)v11[3]);
  if (*(double *)&valuePtr.value == 0.0)
  {
    v86 = 0;
    goto LABEL_203;
  }
  v109 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &valuePtr);
  v110 = FigRenderPipelineGetFigBaseObject(v11[7]);
  v111 = *(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                         + 56);
  if (v111)
    v111(v110, CFSTR("PipelineRate"), v109);
  v112 = v11[7];
  v113 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v113)
    v86 = v113(v112);
  else
    v86 = 4294954514;
  MEMORY[0x19402EA24](*v11);
  if (v109)
    CFRelease(v109);
LABEL_207:
  if (!(_DWORD)v86)
  {
    if (!v5[7])
    {
LABEL_254:
      v86 = 0;
      goto LABEL_255;
    }
LABEL_209:
    v114 = CMBaseObjectGetDerivedStorage();
    sampleBufferOut = 0;
    if ((*(_BYTE *)(v114 + 232) & 1) == 0)
      goto LABEL_216;
    v115 = v114;
    v116 = (CMTime *)(v114 + 220);
    CMSampleBufferGetOutputPresentationTimeStamp(&start, a2);
    CMSampleBufferGetOutputDuration(&duration, a2);
    CMTimeRangeMake(cf, &start, &duration);
    v117 = cf[0].start.value;
    v196 = *(_OWORD *)&cf[0].start.flags;
    v197 = *(_OWORD *)((char *)&cf[0].duration.value + 4);
    timescale = cf[0].start.timescale;
    epoch_high = HIDWORD(cf[0].duration.epoch);
    *(_OWORD *)&cf[0].start.value = *(_OWORD *)&v116->value;
    cf[0].start.epoch = v116->epoch;
    time2.value = v117;
    *(_QWORD *)&time2.flags = v196;
    time2.timescale = timescale;
    HIDWORD(time2.epoch) = DWORD2(v196);
    if (!CMTimeCompare(&cf[0].start, &time2))
    {
LABEL_216:
      CFRetain(a2);
      goto LABEL_241;
    }
    cf[0].start.value = v117;
    *(_OWORD *)&cf[0].start.flags = v196;
    *(_OWORD *)((char *)&cf[0].duration.value + 4) = v197;
    cf[0].start.timescale = timescale;
    HIDWORD(cf[0].duration.epoch) = epoch_high;
    CMTimeRangeGetEnd(&time1, cf);
    *(_OWORD *)&cf[0].start.value = *(_OWORD *)&v116->value;
    cf[0].start.epoch = v116->epoch;
    if (CMTimeCompare(&time1, &cf[0].start) <= 0)
      goto LABEL_254;
    cf[0].start.value = v117;
    *(_QWORD *)&cf[0].start.flags = v196;
    cf[0].start.timescale = timescale;
    HIDWORD(cf[0].start.epoch) = DWORD2(v196);
    time2 = *v116;
    if (CMTimeCompare(&cf[0].start, &time2) < 0)
    {
      memset(&v167, 0, sizeof(v167));
      *(_OWORD *)&cf[0].start.value = *(_OWORD *)&v116->value;
      cf[0].start.epoch = v116->epoch;
      time2.value = v117;
      *(_QWORD *)&time2.flags = v196;
      time2.timescale = timescale;
      HIDWORD(time2.epoch) = DWORD2(v196);
      CMTimeSubtract(&v167, &cf[0].start, &time2);
      v166 = v167;
      v180 = 0;
      timingArrayEntriesNeededOut = 0;
      memset(cf, 0, 24);
      memset(&time2, 0, sizeof(time2));
      memset(&type, 0, sizeof(type));
      memset(&v177, 0, sizeof(v177));
      memset(&v176, 0, sizeof(v176));
      memset(&v175, 0, sizeof(v175));
      v120 = (const __CFString *)*MEMORY[0x1E0CA2728];
      v121 = (const __CFDictionary *)CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E0CA2728], 0);
      v122 = (CMTime *)MEMORY[0x1E0CA2E68];
      if (v121)
        CMTimeMakeFromDictionary(&v176, v121);
      else
        v176 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      CMSampleBufferGetOutputPresentationTimeStamp(&cf[0].start, a2);
      CMSampleBufferGetPresentationTimeStamp(&time2, a2);
      v174 = cf[0].start;
      valuePtr = v176;
      CMTimeSubtract(&type, &v174, &valuePtr);
      v174 = type;
      valuePtr = time2;
      CMTimeSubtract(&v177, &v174, &valuePtr);
      CMSampleBufferGetSampleTimingInfoArray(a2, 0, 0, &timingArrayEntriesNeededOut);
      if (!timingArrayEntriesNeededOut)
      {
        v86 = FigSignalErrorAt();
        if ((_DWORD)v86)
          goto LABEL_255;
        goto LABEL_240;
      }
      v127 = (CMSampleTimingInfo *)malloc_type_calloc(timingArrayEntriesNeededOut, 0x48uLL, 0x1000040FF89C88EuLL);
      SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a2, timingArrayEntriesNeededOut, v127, &timingArrayEntriesNeededOut);
      if ((_DWORD)SampleTimingInfoArray)
      {
        v86 = SampleTimingInfoArray;
        free(v127);
        goto LABEL_255;
      }
      v174 = v177;
      valuePtr = *v122;
      v129 = CMTimeCompare(&v174, &valuePtr);
      v130 = timingArrayEntriesNeededOut;
      if (v129 && timingArrayEntriesNeededOut >= 1)
      {
        v131 = 0;
        p_presentationTimeStamp = &v127->presentationTimeStamp;
        do
        {
          v133 = *(_OWORD *)&p_presentationTimeStamp->value;
          valuePtr.epoch = p_presentationTimeStamp->epoch;
          *(_OWORD *)&valuePtr.value = v133;
          rhs = v177;
          CMTimeAdd(&v174, &valuePtr, &rhs);
          v134 = *(_OWORD *)&v174.value;
          p_presentationTimeStamp->epoch = v174.epoch;
          *(_OWORD *)&p_presentationTimeStamp->value = v134;
          p_presentationTimeStamp += 3;
          ++v131;
          v130 = timingArrayEntriesNeededOut;
        }
        while (timingArrayEntriesNeededOut > v131);
      }
      v135 = CMSampleBufferCreateCopyWithNewTiming((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, v130, v127, &v180);
      if ((_DWORD)v135)
      {
        v86 = v135;
        v137 = v180;
      }
      else
      {
        v174 = v166;
        valuePtr = v176;
        CMTimeAdd(&v175, &v174, &valuePtr);
        v174 = v175;
        v136 = CMTimeCopyAsDictionary(&v174, 0);
        v137 = v180;
        if (v136)
        {
          v138 = v136;
          CMSetAttachment(v180, v120, v136, 1u);
          sampleBufferOut = v180;
          v180 = 0;
          free(v127);
          CFRelease(v138);
          goto LABEL_240;
        }
        v86 = 4294950914;
      }
      free(v127);
      if (!v137)
        goto LABEL_255;
      v153 = v137;
    }
    else
    {
      v119 = CMSampleBufferCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, &sampleBufferOut);
      if (!(_DWORD)v119)
      {
        if (*(_BYTE *)(v115 + 103))
        {
          CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E0CA2698], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u);
        }
        else if (dword_1EE2A3620)
        {
          LODWORD(type.value) = 0;
          LOBYTE(v177.value) = 0;
          v123 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v124 = type.value;
          if (os_log_type_enabled(v123, v177.value))
            v125 = v124;
          else
            v125 = v124 & 0xFFFFFFFE;
          if (v125)
          {
            if (a1)
              v126 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
            else
              v126 = "";
            v159 = v126;
            *(_OWORD *)&cf[0].start.value = *(_OWORD *)&v116->value;
            cf[0].start.epoch = v116->epoch;
            Seconds = CMTimeGetSeconds(&cf[0].start);
            v140 = *(_QWORD *)(v115 + 220);
            v141 = *(_DWORD *)(v115 + 228);
            cf[0].start.value = v117;
            *(_QWORD *)&cf[0].start.flags = v196;
            cf[0].start.timescale = timescale;
            HIDWORD(cf[0].start.epoch) = DWORD2(v196);
            v142 = CMTimeGetSeconds(&cf[0].start);
            LODWORD(time2.value) = 136317186;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_copySBufUpdatedTimingForEnqueueing";
            LOWORD(time2.flags) = 2048;
            *(_QWORD *)((char *)&time2.flags + 2) = a1;
            HIWORD(time2.epoch) = 2082;
            v182 = v159;
            v183 = 2048;
            v184 = *(_QWORD *)&Seconds;
            v185 = 2048;
            v186 = v140;
            v187 = 1024;
            v188 = v141;
            v189 = 2048;
            v190 = v142;
            v191 = 2048;
            v192 = v117;
            v193 = 1024;
            v194 = timescale;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_240:
        a2 = sampleBufferOut;
        if (sampleBufferOut)
        {
LABEL_241:
          FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
          v143 = v5[6];
          v144 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 8);
          if (!v144)
          {
            v86 = 4294954514;
            goto LABEL_258;
          }
          v145 = v144(v143, a2);
          if ((_DWORD)v145)
          {
            v86 = v145;
            goto LABEL_258;
          }
          CMSampleBufferGetOutputPresentationTimeStamp(&v164, a2);
          if ((v164.flags & 1) != 0)
          {
            CMSampleBufferGetOutputDuration(&v163, a2);
            if ((v163.flags & 1) != 0)
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&lhs, a2);
              CMSampleBufferGetOutputDuration(&v161, a2);
              CMTimeAdd(&cf[0].start, &lhs, &v161);
              *(_OWORD *)((char *)v5 + 220) = *(_OWORD *)&cf[0].start.value;
              *(_QWORD *)((char *)v5 + 236) = cf[0].start.epoch;
            }
          }
          CMTimebaseGetTime(&v165, (CMTimebaseRef)v5[3]);
          v146 = *((_DWORD *)v5 + 96);
          if ((v146 & 1) != 0 && (v5[51] & 1) == 0)
          {
            cf[0].start = v165;
            time2 = *(CMTime *)((char *)v5 + 220);
            if (CMTimeCompare(&cf[0].start, &time2) < 0)
            {
              CMSampleBufferGetOutputPresentationTimeStamp(&v160, a2);
              time2 = v165;
              CMTimeMaximum(&cf[0].start, &v160, &time2);
              *(_OWORD *)((char *)v5 + 396) = *(_OWORD *)&cf[0].start.value;
              epoch = cf[0].start.epoch;
              *(_QWORD *)((char *)v5 + 412) = cf[0].start.epoch;
              v150 = (OpaqueCMTimebase *)v5[3];
              v151 = v5[45];
              *(_OWORD *)&cf[0].start.value = *(_OWORD *)((char *)v5 + 396);
              cf[0].start.epoch = epoch;
              CMTimebaseSetTimerDispatchSourceNextFireTime(v150, v151, &cf[0].start, 0);
              goto LABEL_257;
            }
            v146 = *((_DWORD *)v5 + 96);
          }
          if ((v146 & 1) == 0 && !*((_BYTE *)v5 + 368))
          {
            v147 = (OpaqueCMTimebase *)v5[3];
            v148 = v5[45];
            *(_OWORD *)&cf[0].start.value = *(_OWORD *)((char *)v5 + 220);
            cf[0].start.epoch = *(_QWORD *)((char *)v5 + 236);
            CMTimebaseSetTimerDispatchSourceNextFireTime(v147, v148, &cf[0].start, 0);
            v86 = 0;
            *((_BYTE *)v5 + 368) = 1;
LABEL_258:
            MEMORY[0x19402EA24](*v5);
            CFRelease(a2);
            return v86;
          }
LABEL_257:
          v86 = 0;
          goto LABEL_258;
        }
        goto LABEL_254;
      }
      v86 = v119;
      v153 = sampleBufferOut;
      if (!sampleBufferOut)
        goto LABEL_255;
    }
    CFRelease(v153);
  }
LABEL_255:
  MEMORY[0x19402EA24](*v5);
  return v86;
}

uint64_t audioRenderer_flush(uint64_t a1)
{
  return audioRenderer_flushWithType(a1, 0);
}

uint64_t audioRenderer_attachToSynchronizer(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3)
{
  _QWORD *DerivedStorage;
  int *v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  OpaqueCMClock *HostTimeClock;
  uint64_t v12;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t (*v14)(uint64_t, CMTimebaseRef *);
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  char v18;
  int v19;
  const void **v20;
  NSObject *v21;
  uint64_t v22;
  const void *v23;
  uint64_t (*v24)(uint64_t);
  CMTimebaseRef timebaseOut[27];

  timebaseOut[25] = *(CMTimebaseRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  timebaseOut[0] = 0;
  v7 = &dword_1EE2A3000;
  if (!a2)
  {
    if (a3)
      return 4294950915;
    HostTimeClock = CMClockGetHostTimeClock();
    v12 = CMTimebaseCreateWithSourceClock(0, HostTimeClock, timebaseOut);
    if ((_DWORD)v12)
    {
      v17 = v12;
      v9 = 0;
      goto LABEL_35;
    }
    if (dword_1EE2A3620)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      v18 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v9 = 0;
      v19 = 0;
      goto LABEL_18;
    }
    v9 = 0;
    goto LABEL_15;
  }
  v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v8)
    return 4294950914;
  v9 = (const void *)v8;
  if (a3)
  {
    timebaseOut[0] = a3;
    CFRetain(a3);
    if (dword_1EE2A3620)
    {
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      v18 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v19 = 0;
      v7 = &dword_1EE2A3000;
      goto LABEL_18;
    }
LABEL_15:
    v19 = 0;
    v18 = 1;
    goto LABEL_18;
  }
  v14 = *(uint64_t (**)(uint64_t, CMTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v14)
  {
    v15 = v14(a2, timebaseOut);
    if ((_DWORD)v15)
    {
      v17 = v15;
      goto LABEL_35;
    }
    if (dword_1EE2A3620)
    {
      v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      v19 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v18 = 0;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
LABEL_18:
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (*((_BYTE *)DerivedStorage + 433))
    {
      v17 = 4294954511;
      goto LABEL_34;
    }
    *((_BYTE *)DerivedStorage + 32) = v18;
    v20 = (const void **)MEMORY[0x1E0C9AE40];
    if (!v19)
      v20 = (const void **)MEMORY[0x1E0C9AE50];
    audioRenderer_setPropertyOnAudioRenderPipeline(a1, CFSTR("IsTimebaseStarter"), *v20, 1);
    if (v7[392])
    {
      v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v22 = audioRenderer_setMasterTimebase(a1, timebaseOut[0]);
    if (!(_DWORD)v22)
    {
      v23 = (const void *)DerivedStorage[11];
      DerivedStorage[11] = v9;
      if (v9)
        CFRetain(v9);
      if (v23)
        CFRelease(v23);
      if (a2)
      {
        v17 = 0;
LABEL_34:
        MEMORY[0x19402EA24](*DerivedStorage);
        goto LABEL_35;
      }
      v24 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
      if (!v24)
      {
        v17 = 4294954514;
        goto LABEL_34;
      }
      v22 = v24(a1);
    }
    v17 = v22;
    goto LABEL_34;
  }
  v17 = 4294954514;
LABEL_35:
  if (timebaseOut[0])
    CFRelease(timebaseOut[0]);
  if (v9)
    CFRelease(v9);
  return v17;
}

uint64_t audioRenderer_copyClock(uint64_t a1, CFTypeRef *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  uint64_t v5;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950916;
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)v4 + 433))
  {
    v5 = 4294954511;
  }
  else
  {
    v5 = 0;
    *a2 = CFRetain((CFTypeRef)v4[8]);
  }
  MEMORY[0x19402EA24](*v4);
  return v5;
}

uint64_t audioRenderer_setRateAndTime(uint64_t a1, CMTime *a2, float a3)
{
  CMTime v4;

  v4 = *a2;
  return audioRenderer_setRateAndAnchorTime(a1, &v4, MEMORY[0x1E0CA2E18], a3);
}

uint64_t audioRenderer_flushFromMediaTime(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  CFTypeRef v9;
  uint64_t v10;
  NSObject *global_queue;

  v8 = (char *)malloc_type_calloc(1uLL, 0x30uLL, 0x10A00407482C56DuLL);
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *(_QWORD *)v8 = v9;
  v10 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 8) = *(_OWORD *)a2;
  *((_QWORD *)v8 + 3) = v10;
  *((_QWORD *)v8 + 4) = a3;
  *((_QWORD *)v8 + 5) = a4;
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async_f(global_queue, v8, (dispatch_function_t)audioRenderer_flushFromMediaTimeDispatchAsync);
  return 0;
}

uint64_t audioRenderer_setRateAndAnchorTime(uint64_t a1, CMTime *a2, CMTime *a3, float a4)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v10;
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  CMTimeFlags v13;
  uint64_t v14;
  uint64_t FigBaseObject;
  uint64_t (*v16)(uint64_t, const __CFString *, _QWORD, CMBufferQueueRef *);
  uint64_t v17;
  CFDictionaryRef v18;
  uint64_t v19;
  uint64_t v20;
  CFAllocatorRef *v21;
  int v22;
  CFDictionaryRef v23;
  uint64_t v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  CFNumberRef v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v32;
  CMClockOrTimebaseRef v33;
  CFDictionaryRef v34;
  Float64 v35;
  Float64 v36;
  CMTimeEpoch v37;
  int v38;
  Float64 v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, CMTime *, CMTime *, float, float);
  CMTimeFlags v42;
  CMTimeValue v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v46;
  CFDictionaryRef v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, const __CFString *, CFDictionaryRef);
  uint64_t v50;
  NSObject *v52;
  unsigned int v53;
  unsigned int v54;
  const char *v55;
  Float64 Seconds;
  Float64 v57;
  CMTimeEpoch v58;
  int v59;
  Float64 Rate;
  uint64_t v61;
  CMTimeFlags v62;
  OpaqueCMTimebase *v63;
  CMClockRef HostTimeClock;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, const __CFString *, CFNumberRef);
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  const char *v69;
  const __CFDictionary *v70;
  CMTimeFlags v71;
  CMTimeFlags v72;
  CMTimeFlags v73;
  int v74;
  CMTimeEpoch v75;
  CMTime v76;
  CMTime v77;
  CMTime v78;
  CMTime v79;
  os_log_type_t v80;
  unsigned int v81;
  CMSampleBufferRef sampleBufferOut;
  CMAttachmentBearerRef target;
  void *values;
  CMBufferQueueRef queue;
  double valuePtr;
  os_log_type_t type[8];
  CMTimeScale v88;
  CMTimeValue value;
  CMTimeScale timescale;
  CMTime time2;
  const char *v92;
  __int16 v93;
  double v94;
  __int16 v95;
  Float64 v96;
  __int16 v97;
  Float64 v98;
  __int16 v99;
  int v100;
  __int16 v101;
  Float64 v102;
  __int16 v103;
  uint64_t v104;
  CMTime time;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v79 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v78 = v79;
  v77 = v79;
  v76 = v79;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 433))
  {
    v34 = 0;
    v20 = 0;
    goto LABEL_97;
  }
  if (dword_1EE2A3620)
  {
    LODWORD(value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 != 0.0 && !DerivedStorage[9] && *((_BYTE *)DerivedStorage + 101))
  {
    if (dword_1EE2A3620)
    {
      LODWORD(value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v34 = 0;
    v20 = 4294950909;
LABEL_97:
    MEMORY[0x19402EA24](*DerivedStorage);
    if (!v34)
      return v20;
    goto LABEL_94;
  }
  *((_WORD *)DerivedStorage + 148) = 0;
  CMTimebaseGetTime(&v79, (CMTimebaseRef)DerivedStorage[3]);
  if (!DerivedStorage[7])
  {
    time = *a2;
    time2 = *a3;
    v19 = audioRenderer_setRateAndTimeWithoutFARP(a4, a1, (uint64_t)&time, (uint64_t)&time2);
    if (!(_DWORD)v19)
      goto LABEL_73;
    v20 = v19;
LABEL_122:
    v34 = 0;
    goto LABEL_97;
  }
  value = a2->value;
  flags = a2->flags;
  timescale = a2->timescale;
  epoch = a2->epoch;
  *(_QWORD *)type = a3->value;
  v13 = a3->flags;
  v88 = a3->timescale;
  v75 = a3->epoch;
  v14 = CMBaseObjectGetDerivedStorage();
  valuePtr = a4;
  values = 0;
  queue = 0;
  sampleBufferOut = 0;
  target = 0;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v14 + 56));
  v16 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CMBufferQueueRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                          + 48);
  if (!v16)
  {
    v18 = 0;
    goto LABEL_51;
  }
  v17 = v16(FigBaseObject, CFSTR("SourceSampleBufferQueue"), 0, &queue);
  if ((_DWORD)v17)
  {
    v20 = v17;
    v18 = 0;
    goto LABEL_125;
  }
  if (a4 == 0.0)
  {
    v18 = 0;
    v74 = 0;
  }
  else
  {
    v21 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (!*(_BYTE *)(v14 + 296) && CMTimebaseGetRate(*(CMTimebaseRef *)(v14 + 24)) == 0.0)
    {
      v74 = 0;
      v18 = 0;
    }
    else
    {
      v22 = *(_DWORD *)(v14 + 216);
      *(_DWORD *)(v14 + 216) = v22 + 1;
      LODWORD(time.value) = v22;
      values = CFNumberCreate(0, kCFNumberIntType, &time);
      if (!values
        || (v23 = CFDictionaryCreate(*v21, MEMORY[0x1E0CA2748], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
      {
        v18 = 0;
        v33 = 0;
        v29 = 0;
LABEL_127:
        v20 = 4294950914;
        goto LABEL_58;
      }
      v18 = v23;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      v74 = 1;
    }
    if (*(_BYTE *)(v14 + 100))
    {
      v24 = CMSampleBufferCreateReady(*v21, 0, 0, 0, 0, 0, 0, 0, &sampleBufferOut);
      if ((_DWORD)v24
        || (CMSetAttachment(sampleBufferOut, (CFStringRef)*MEMORY[0x1E0CA4E48], (CFTypeRef)*MEMORY[0x1E0C9AE50], 1u),
            v24 = CMBufferQueueEnqueue(queue, sampleBufferOut),
            (_DWORD)v24))
      {
LABEL_124:
        v20 = v24;
LABEL_125:
        v33 = 0;
        v29 = 0;
        goto LABEL_58;
      }
    }
  }
  if (*(_BYTE *)(v14 + 32))
  {
    v73 = v13;
    if ((v13 & 1) != 0
      && a4 != 0.0
      && (flags & 1) != 0
      && !*(_BYTE *)(v14 + 296)
      && CMTimebaseGetRate(*(CMTimebaseRef *)(v14 + 24)) == 0.0)
    {
      if (dword_1EE2A3620)
      {
        v72 = flags;
        v81 = 0;
        v80 = OS_LOG_TYPE_DEFAULT;
        v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        v53 = v81;
        if (os_log_type_enabled(v52, v80))
          v54 = v53;
        else
          v54 = v53 & 0xFFFFFFFE;
        if (v54)
        {
          if (a1)
            v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
          else
            v55 = "";
          v69 = v55;
          time.value = value;
          time.timescale = timescale;
          time.flags = v72;
          time.epoch = epoch;
          Seconds = CMTimeGetSeconds(&time);
          time.value = *(_QWORD *)type;
          time.timescale = v88;
          time.flags = v13;
          time.epoch = v75;
          v57 = CMTimeGetSeconds(&time);
          v58 = epoch;
          v59 = *(unsigned __int8 *)(v14 + 296);
          Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(v14 + 24));
          v61 = *(_QWORD *)(v14 + 24);
          LODWORD(time2.value) = 136317186;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_setRateAndTimeWithFARP";
          LOWORD(time2.flags) = 2048;
          *(_QWORD *)((char *)&time2.flags + 2) = a1;
          HIWORD(time2.epoch) = 2082;
          v92 = v69;
          v93 = 2048;
          v94 = a4;
          v95 = 2048;
          v96 = Seconds;
          v97 = 2048;
          v98 = v57;
          v99 = 1024;
          v100 = v59;
          epoch = v58;
          v101 = 2048;
          v102 = Rate;
          v103 = 2048;
          v104 = v61;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        flags = v72;
      }
      v62 = flags;
      v29 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &valuePtr);
      if (v29)
      {
        v33 = CMTimebaseCopySource(*(CMTimebaseRef *)(v14 + 24));
        if (v33)
        {
          v63 = *(OpaqueCMTimebase **)(v14 + 24);
          HostTimeClock = CMClockGetHostTimeClock();
          time2.value = *(_QWORD *)type;
          time2.timescale = v88;
          time2.flags = v73;
          time2.epoch = v75;
          CMSyncConvertTime(&time, &time2, HostTimeClock, v33);
          time2.value = value;
          time2.timescale = timescale;
          time2.flags = v62;
          time2.epoch = epoch;
          v32 = CMTimebaseSetRateAndAnchorTime(v63, a4, &time2, &time);
          if (!(_DWORD)v32)
          {
            v65 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v14 + 56));
            v66 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 8)
                                                                                     + 56);
            if (!v66)
              goto LABEL_52;
            v32 = v66(v65, CFSTR("PipelineRate"), v29);
            if (!(_DWORD)v32)
            {
              v67 = *(_QWORD *)(v14 + 56);
              v68 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
              if (v68)
              {
                v32 = v68(v67);
                if ((_DWORD)v32)
                  goto LABEL_129;
                goto LABEL_54;
              }
LABEL_52:
              v20 = 4294954514;
              goto LABEL_58;
            }
          }
        }
        else
        {
          v32 = FigSignalErrorAt();
        }
        goto LABEL_129;
      }
      goto LABEL_126;
    }
    if (dword_1EE2A3620)
    {
      v71 = flags;
      v81 = 0;
      v80 = OS_LOG_TYPE_DEFAULT;
      v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v26 = v81;
      if (os_log_type_enabled(v25, v80))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if (v27)
      {
        v70 = v18;
        if (a1)
          v28 = (const char *)(CMBaseObjectGetDerivedStorage() + 448);
        else
          v28 = "";
        time.value = value;
        time.timescale = timescale;
        time.flags = v71;
        time.epoch = epoch;
        v35 = CMTimeGetSeconds(&time);
        time.value = *(_QWORD *)type;
        time.timescale = v88;
        time.flags = v13;
        time.epoch = v75;
        v36 = CMTimeGetSeconds(&time);
        v37 = epoch;
        v38 = *(unsigned __int8 *)(v14 + 296);
        v39 = CMTimebaseGetRate(*(CMTimebaseRef *)(v14 + 24));
        LODWORD(time2.value) = 136316930;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"audioRenderer_setRateAndTimeWithFARP";
        LOWORD(time2.flags) = 2048;
        *(_QWORD *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 2082;
        v92 = v28;
        v93 = 2048;
        v94 = a4;
        v95 = 2048;
        v96 = v35;
        v97 = 2048;
        v98 = v36;
        v99 = 1024;
        v100 = v38;
        epoch = v37;
        v101 = 2048;
        v102 = v39;
        _os_log_send_and_compose_impl();
        v18 = v70;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      flags = v71;
    }
    v40 = *(_QWORD *)(v14 + 56);
    v41 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, float, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 8);
    if (v41)
    {
      time.value = value;
      time.timescale = timescale;
      time.flags = flags;
      time.epoch = epoch;
      time2.value = *(_QWORD *)type;
      time2.timescale = v88;
      time2.flags = v73;
      time2.epoch = v75;
      v24 = v41(v40, &time, &time2, a4, a4);
      if (!(_DWORD)v24)
      {
        if (a4 == 0.0)
        {
          v33 = 0;
          v29 = 0;
        }
        else
        {
          v42 = flags;
          v33 = 0;
          v29 = 0;
          *(_BYTE *)(v14 + 296) = 1;
          *(_QWORD *)(v14 + 304) = value;
          *(_DWORD *)(v14 + 312) = timescale;
          *(float *)(v14 + 300) = a4;
          *(_DWORD *)(v14 + 316) = v42;
          v43 = *(_QWORD *)type;
          *(_QWORD *)(v14 + 320) = epoch;
          *(_QWORD *)(v14 + 328) = v43;
          *(_DWORD *)(v14 + 336) = v88;
          *(_DWORD *)(v14 + 340) = v73;
          *(_QWORD *)(v14 + 344) = v75;
        }
        goto LABEL_54;
      }
      goto LABEL_124;
    }
LABEL_51:
    v33 = 0;
    v29 = 0;
    goto LABEL_52;
  }
  v29 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloat64Type, &valuePtr);
  if (!v29)
  {
LABEL_126:
    v33 = 0;
    goto LABEL_127;
  }
  v30 = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v14 + 56));
  v31 = *(uint64_t (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 56);
  if (!v31)
  {
    v33 = 0;
    goto LABEL_52;
  }
  v32 = v31(v30, CFSTR("PipelineRate"), v29);
  v33 = 0;
  if (!(_DWORD)v32)
  {
LABEL_54:
    if (!v74)
    {
      v20 = 0;
      goto LABEL_58;
    }
    v20 = CMSampleBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target);
    if (target)
    {
      CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E0CA26E0], values, 1u);
      CMBufferQueueEnqueue(queue, target);
      goto LABEL_58;
    }
    goto LABEL_127;
  }
LABEL_129:
  v20 = v32;
LABEL_58:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (v29)
    CFRelease(v29);
  if (queue)
    CFRelease(queue);
  if (v33)
    CFRelease(v33);
  if (target)
    CFRelease(target);
  if (v18)
    CFRelease(v18);
  if (values)
    CFRelease(values);
  if ((_DWORD)v20)
    goto LABEL_122;
LABEL_73:
  if ((a2->flags & 1) != 0)
    v78 = *a2;
  else
    CMTimebaseGetTime(&v78, (CMTimebaseRef)DerivedStorage[3]);
  if (a4 == 0.0)
  {
    time = v79;
    audioRenderer_endUnderrun(a1, &time);
  }
  else
  {
    time = v78;
    time2 = v79;
    if (CMTimeCompare(&time, &time2) < 0)
    {
      time = v79;
      audioRenderer_endUnderrun(a1, &time);
    }
    if ((DerivedStorage[29] & 1) == 0
      || (time = *(CMTime *)((char *)DerivedStorage + 220), time2 = v78, CMTimeCompare(&time, &time2) <= 0))
    {
      time = v78;
      audioRenderer_beginUnderrun(a1, (__n128 *)&time);
    }
  }
  if (!DerivedStorage[6])
  {
    v34 = 0;
    v47 = 0;
LABEL_90:
    v20 = 0;
    *((float *)DerivedStorage + 24) = a4;
    goto LABEL_91;
  }
  audioRenderer_getLowWaterDurationScaledForRate(&v77, a4);
  time = v77;
  v34 = CMTimeCopyAsDictionary(&time, 0);
  v44 = DerivedStorage[6];
  v45 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (!v45)
  {
    v20 = 4294954514;
    goto LABEL_97;
  }
  v46 = v45(v44, CFSTR("LowWaterDuration"), v34);
  if ((_DWORD)v46)
  {
    v20 = v46;
    goto LABEL_97;
  }
  audioRenderer_getHighWaterDurationScaledForRate(&v76, a4);
  time = v76;
  v47 = CMTimeCopyAsDictionary(&time, 0);
  v48 = DerivedStorage[6];
  v49 = *(uint64_t (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 56);
  if (v49)
  {
    v50 = v49(v48, CFSTR("HighWaterDuration"), v47);
    if ((_DWORD)v50)
    {
      v20 = v50;
      goto LABEL_91;
    }
    goto LABEL_90;
  }
  v20 = 4294954514;
LABEL_91:
  MEMORY[0x19402EA24](*DerivedStorage);
  if (v47)
    CFRelease(v47);
  if (v34)
LABEL_94:
    CFRelease(v34);
  return v20;
}

uint64_t audioRenderer_shouldEnableSpatialization(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;

  result = FPSupport_GetAudioFormatDescriptionSpatializationEligibility(a2, 0);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 2)
    {
      v4 = a1;
      v5 = 0;
    }
    else
    {
      if ((_DWORD)result != 1)
        return 1;
      v4 = a1;
      v5 = 1;
    }
    result = audioRenderer_isSpatializationAllowed(v4, v5);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  return result;
}

uint64_t audioRenderer_isSpatializationAllowed(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;
  CFDictionaryRef v6;
  const __CFArray *Value;
  const __CFArray *v8;
  CFIndex v9;
  CFDictionaryRef theDict;

  CMBaseObjectGetDerivedStorage();
  v3 = FigCFEqual();
  theDict = 0;
  v4 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 160);
  if (v4)
  {
    v5 = v3 ? 1936684398 : 1836019574;
    if (!FPSupport_CreateAudioSessionSpatializationCapabilities(v4, v5, (CFTypeRef *)&theDict))
    {
      v6 = theDict;
      if (theDict)
      {
        Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SpatialCapabilitiesKey_spatialAudioSources"));
        if (Value)
        {
          v8 = Value;
          FigCFDictionaryGetBooleanIfPresent();
          if (CFArrayGetCount(v8) >= 1)
          {
            v9 = 0;
            do
            {
              FigCFArrayGetInt32AtIndex();
              ++v9;
            }
            while (v9 < CFArrayGetCount(v8));
          }
          if (a2 <= 1)
            FigCFEqual();
        }
        CFRelease(v6);
      }
    }
  }
  return 0;
}

uint64_t audioRenderer_applyCachedPropertiesToFARPApplierFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t FigBaseObject;
  uint64_t result;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  FigBaseObject = FigRenderPipelineGetFigBaseObject(a3);
  result = CMBaseObjectGetVTable();
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v7)
  {
    if (*MEMORY[0x1E0C9B0D0] == a2)
      v8 = 0;
    else
      v8 = a2;
    return v7(FigBaseObject, a1, v8);
  }
  return result;
}

CMTime *audioRenderer_getLowWaterDurationScaledForRate@<X0>(CMTime *a1@<X8>, float a2@<S0>)
{
  CMTime *result;
  uint64_t v5;
  __int128 v6;
  CMTime v7;

  result = (CMTime *)CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a1->value = *MEMORY[0x1E0CA2E18];
  a1->epoch = *(_QWORD *)(v5 + 16);
  if (a2 <= 1.0)
  {
    v6 = *(_OWORD *)((char *)&result[11].value + 4);
    a1->epoch = *(CMTimeEpoch *)((char *)&result[11].epoch + 4);
    *(_OWORD *)&a1->value = v6;
  }
  else
  {
    v7 = *(CMTime *)((char *)result + 268);
    return CMTimeMultiplyByFloat64(a1, &v7, a2);
  }
  return result;
}

CMTime *audioRenderer_getHighWaterDurationScaledForRate@<X0>(CMTime *a1@<X8>, float a2@<S0>)
{
  CMTime *result;
  uint64_t v5;
  __int128 v6;
  CMTime v7;

  result = (CMTime *)CMBaseObjectGetDerivedStorage();
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)&a1->value = *MEMORY[0x1E0CA2E18];
  a1->epoch = *(_QWORD *)(v5 + 16);
  if (a2 <= 1.0)
  {
    v6 = *(_OWORD *)((char *)&result[10].value + 4);
    a1->epoch = *(CMTimeEpoch *)((char *)&result[10].epoch + 4);
    *(_OWORD *)&a1->value = v6;
  }
  else
  {
    v7 = *(CMTime *)((char *)result + 244);
    return CMTimeMultiplyByFloat64(a1, &v7, a2);
  }
  return result;
}

uint64_t audioRenderer_consumerReachedLowWaterCallback()
{
  return audioRenderer_postNotification();
}

uint64_t audioRenderer_setMasterTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t (*v8)(uint64_t, const __CFString *, OpaqueCMTimebase *);
  uint64_t v9;
  float Rate;
  OpaqueCMTimebase *v11;
  const void *v12;
  OpaqueCMTimebase *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CMTime time2;
  CMTime time1;
  os_log_type_t type;
  int v21;
  CMTime v22;
  CMTime v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  if (dword_1EE2A3620)
  {
    v21 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a2)
    return 4294950916;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 433))
  {
    v16 = 0;
    goto LABEL_20;
  }
  v6 = DerivedStorage[7];
  if (!v6)
    goto LABEL_8;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
  v8 = *(uint64_t (**)(uint64_t, const __CFString *, OpaqueCMTimebase *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                             + 8)
                                                                                 + 56);
  if (!v8)
  {
    v16 = 4294954514;
    goto LABEL_20;
  }
  v9 = v8(FigBaseObject, CFSTR("Timebase"), a2);
  if (!(_DWORD)v9)
  {
LABEL_8:
    Rate = CMTimebaseGetRate(a2);
    *((float *)DerivedStorage + 24) = Rate;
    v11 = (OpaqueCMTimebase *)DerivedStorage[3];
    if (v11 != a2)
    {
      if (!v11 || (CMTimebaseGetTime(&time1, v11), CMTimebaseGetTime(&time2, a2), CMTimeCompare(&time1, &time2)))
        CMTimebaseGetTime(&v22, a2);
      audioRenderer_removeNotificationListenerFromTimebase(a1, (OpaqueCMTimebase *)DerivedStorage[3]);
      v12 = (const void *)DerivedStorage[3];
      DerivedStorage[3] = a2;
      CFRetain(a2);
      if (v12)
        CFRelease(v12);
      v13 = (OpaqueCMTimebase *)DerivedStorage[3];
      v14 = CMBaseObjectGetDerivedStorage();
      if (v13)
      {
        v15 = v14;
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        CMTimebaseAddTimerDispatchSource(v13, *(dispatch_source_t *)(v15 + 360));
      }
      *((_BYTE *)DerivedStorage + 368) = 0;
      Rate = *((float *)DerivedStorage + 24);
    }
    v23 = v22;
    v9 = audioRenderer_setRateAndAnchorTime(a1, &v23, MEMORY[0x1E0CA2E18], Rate);
  }
  v16 = v9;
LABEL_20:
  MEMORY[0x19402EA24](*DerivedStorage);
  return v16;
}

void audioRenderer_flushFromMediaTimeDispatchAsync(uint64_t a1)
{
  uint64_t v2;
  CFTypeRef v3;
  CMTimeFlags v4;
  uint64_t v5;
  CMTimeEpoch v6;
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTimeValue *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *);
  int v12;
  uint64_t v13;
  uint64_t FigBaseObject;
  uint64_t (*v15)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  OSStatus v16;
  const __CFAllocator *v17;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  const CMBufferCallbacks *v19;
  int v20;
  OpaqueCMTimebase *v21;
  NSObject *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  opaqueCMSampleBuffer *Head;
  const void *v27;
  CMTime type;
  CMTime lhs;
  CMBufferQueueRef queueOut;
  CMBufferQueueRef v31;
  CFTypeRef cf;
  CMTimeValue v33;
  CMTimeScale v34;
  CMTime time2;
  __int128 time;
  __int128 time_16;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(CFTypeRef *)a1;
  v33 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 20);
  v34 = *(_DWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v27 = v3;
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((_BYTE *)DerivedStorage + 433))
  {
    v20 = -12785;
    goto LABEL_35;
  }
  if (dword_1EE2A3620)
  {
    LODWORD(lhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if ((v4 & 1) == 0 || (v4 & 8) != 0 || (v4 & 0x10) != 0)
  {
    v12 = FigSignalErrorAt();
LABEL_42:
    v20 = v12;
    goto LABEL_35;
  }
  if ((DerivedStorage[29] & 1) == 0
    || (v9 = (_QWORD *)((char *)DerivedStorage + 220),
        time = *(_OWORD *)((char *)DerivedStorage + 220),
        *(_QWORD *)&time_16 = *(_QWORD *)((char *)DerivedStorage + 236),
        time2.value = v33,
        time2.timescale = v34,
        time2.flags = v4,
        time2.epoch = v6,
        CMTimeCompare((CMTime *)&time, &time2) < 1))
  {
LABEL_34:
    v20 = 0;
    goto LABEL_35;
  }
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88))
  {
    v10 = DerivedStorage[7];
    v11 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
    if (!v11)
    {
      v20 = -12782;
      goto LABEL_35;
    }
    *(_QWORD *)&time = v33;
    *((_QWORD *)&time + 1) = __PAIR64__(v4, v34);
    *(_QWORD *)&time_16 = v6;
    v12 = v11(v10, &time);
    if (!v12)
    {
      *v9 = v33;
      *((_DWORD *)DerivedStorage + 57) = v34;
      *((_DWORD *)DerivedStorage + 58) = v4;
      *(_QWORD *)((char *)DerivedStorage + 236) = v6;
      goto LABEL_32;
    }
    goto LABEL_42;
  }
  v13 = CMBaseObjectGetDerivedStorage();
  v31 = 0;
  cf = 0;
  queueOut = 0;
  v39 = 0;
  time_16 = 0u;
  v38 = 0u;
  time = 0u;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(*(_QWORD *)(v13 + 56));
  v15 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
  if (!v15)
  {
    v20 = -12782;
    goto LABEL_25;
  }
  v16 = v15(FigBaseObject, CFSTR("SourceSampleBufferQueue"), 0, &cf);
  if (!v16)
  {
    v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
    v16 = CMBufferQueueCreate(v17, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
    if (!v16)
    {
      v19 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
      v16 = CMBufferQueueCreate(v17, 0, v19, &v31);
      if (!v16)
      {
        *(_QWORD *)&time = v27;
        *((_QWORD *)&time + 1) = queueOut;
        *(_QWORD *)&time_16 = v31;
        *((_QWORD *)&time_16 + 1) = v33;
        *(_QWORD *)&v38 = __PAIR64__(v4, v34);
        *((_QWORD *)&v38 + 1) = v6;
        LODWORD(v39) = 0;
        MEMORY[0x19402B01C](cf, audioRenderer_flushFromMediaTimeOnRenderPipelineInputQueueResetCallback, &time);
        if (!(_DWORD)v39)
        {
          if (CMBufferQueueIsEmpty(*((CMBufferQueueRef *)&time + 1)))
          {
            LODWORD(v39) = -16385;
          }
          else if (!(_DWORD)v39)
          {
            Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*((CMBufferQueueRef *)&time + 1));
            MEMORY[0x19402B01C](*((_QWORD *)&time + 1), audioRenderer_stealBuffer, cf);
            CMSampleBufferGetOutputPresentationTimeStamp(&lhs, Head);
            CMSampleBufferGetOutputDuration(&type, Head);
            CMTimeAdd(&time2, &lhs, &type);
            *(CMTime *)(v13 + 220) = time2;
            goto LABEL_24;
          }
        }
        MEMORY[0x19402B01C](time_16, audioRenderer_stealBuffer, cf);
LABEL_24:
        v20 = v39;
        goto LABEL_25;
      }
    }
  }
  v20 = v16;
LABEL_25:
  if (cf)
    CFRelease(cf);
  if (v31)
    CFRelease(v31);
  if (queueOut)
    CFRelease(queueOut);
  if (!v20)
  {
LABEL_32:
    if ((DerivedStorage[48] & 1) == 0)
    {
      v21 = (OpaqueCMTimebase *)DerivedStorage[3];
      v22 = DerivedStorage[45];
      time = *(_OWORD *)v9;
      *(_QWORD *)&time_16 = *(_QWORD *)((char *)DerivedStorage + 236);
      CMTimebaseSetTimerDispatchSourceNextFireTime(v21, v22, (CMTime *)&time, 0);
      v20 = 0;
      *((_BYTE *)DerivedStorage + 368) = 1;
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_35:
  v23 = CMBaseObjectGetDerivedStorage();
  v24 = malloc_type_calloc(1uLL, 0x20uLL, 0x10A0040D98738FAuLL);
  if (v24)
  {
    v25 = v24;
    *v24 = CFRetain(v27);
    v25[1] = v5;
    v25[2] = v2;
    *((_DWORD *)v25 + 6) = v20;
    dispatch_async_f(*(dispatch_queue_t *)(v23 + 8), v25, (dispatch_function_t)audioRenderer_callFlushFromMediaTimeCallbackAsync);
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

void audioRenderer_flushFromMediaTimeOnRenderPipelineInputQueueResetCallback(void *buf, uint64_t a2)
{
  CMTimeEpoch v4;
  const __CFAllocator *v5;
  const __CFAllocator *v6;
  OSStatus v7;
  const __CFString *v8;
  const __CFDictionary *v9;
  CMSampleBufferRef v10;
  CFDictionaryRef v11;
  __int128 v12;
  CMTime rhs;
  CMTime lhs;
  CMTime v15;
  CMTime v16;
  CMTime v17;
  CMTimeRange time2;
  CMTime v19;
  CMTime duration;
  CMTimeRange time1;
  CMSampleBufferRef sampleBufferOut;
  CMTime v23;

  memset(&v23, 0, sizeof(v23));
  sampleBufferOut = 0;
  CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 16), buf);
  if (!*(_DWORD *)(a2 + 48))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v23, (CMSampleBufferRef)buf);
    *(_OWORD *)&time1.start.value = *(_OWORD *)(a2 + 24);
    time1.start.epoch = *(_QWORD *)(a2 + 40);
    time2.start = v23;
    if (CMTimeCompare(&time1.start, &time2.start) < 0)
    {
      if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(a2 + 8)))
        *(_DWORD *)(a2 + 48) = -16385;
    }
    else
    {
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputDuration(&duration, (CMSampleBufferRef)buf);
      time2.start = v23;
      CMTimeRangeMake(&time1, &time2.start, &duration);
      time2 = time1;
      CMTimeRangeGetEnd(&v19, &time2);
      *(_OWORD *)&time2.start.value = *(_OWORD *)(a2 + 24);
      time2.start.epoch = *(_QWORD *)(a2 + 40);
      if (CMTimeCompare(&v19, &time2.start) <= 0)
      {
        CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 8), buf);
      }
      else
      {
        *(_OWORD *)&v17.value = *MEMORY[0x1E0CA2E68];
        v4 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
        v17.epoch = v4;
        *(_OWORD *)&v16.value = *(_OWORD *)&v17.value;
        v16.epoch = v4;
        v12 = *(_OWORD *)&v17.value;
        *(_OWORD *)&v15.value = *(_OWORD *)&v17.value;
        v15.epoch = v4;
        v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v6 = CFGetAllocator((CFTypeRef)*MEMORY[0x1E0C9AE00]);
        v7 = CMSampleBufferCreateCopy(v6, (CMSampleBufferRef)buf, &sampleBufferOut);
        *(_DWORD *)(a2 + 48) = v7;
        if (!v7)
        {
          time2 = time1;
          CMTimeRangeGetEnd(&lhs, &time2);
          *(_OWORD *)&time2.start.value = *(_OWORD *)(a2 + 24);
          time2.start.epoch = *(_QWORD *)(a2 + 40);
          CMTimeSubtract(&v16, &lhs, &time2.start);
          v8 = (const __CFString *)*MEMORY[0x1E0CA2720];
          v9 = (const __CFDictionary *)CMGetAttachment(buf, (CFStringRef)*MEMORY[0x1E0CA2720], 0);
          if (v9)
          {
            CMTimeMakeFromDictionary(&v17, v9);
          }
          else
          {
            *(_OWORD *)&v17.value = v12;
            v17.epoch = v4;
          }
          time2.start = v17;
          rhs = v16;
          CMTimeAdd(&v15, &time2.start, &rhs);
          v10 = sampleBufferOut;
          time2.start = v15;
          v11 = CMTimeCopyAsDictionary(&time2.start, v5);
          CMSetAttachment(v10, v8, v11, 1u);
          if (v11)
            CFRelease(v11);
          CMBufferQueueEnqueue(*(CMBufferQueueRef *)(a2 + 8), sampleBufferOut);
        }
        if (sampleBufferOut)
          CFRelease(sampleBufferOut);
      }
    }
  }
}

uint64_t audioRenderer_stealBuffer(CMBufferRef buf, CMBufferQueueRef queue)
{
  return CMBufferQueueEnqueue(queue, buf);
}

void audioRenderer_callFlushFromMediaTimeCallbackAsync(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(a1 + 8))(*(unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 16));
  CFRelease(*(CFTypeRef *)a1);
  free((void *)a1);
}

__n128 audioRenderer_endUnderrun(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage;
  __n128 result;
  uint64_t v5;
  CMTime *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  uint64_t v9;
  __int128 v10;
  CMTimeEpoch v11;
  uint64_t v12;
  CMTimeEpoch v13;
  CMTime v14;
  CMTime start;
  CMTimeRange v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_BYTE *)(DerivedStorage + 384) & 1) != 0)
  {
    v5 = DerivedStorage;
    v6 = (CMTime *)(DerivedStorage + 372);
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v8 = Mutable;
      start = *v6;
      v14 = *a2;
      CMTimeRangeFromTimeToTime(&v16, &start, &v14);
      FigCFDictionarySetCMTimeRange();
      audioRenderer_postNotification();
      v9 = MEMORY[0x1E0CA2E18];
      v10 = *MEMORY[0x1E0CA2E18];
      *(_OWORD *)&v6->value = *MEMORY[0x1E0CA2E18];
      v11 = *(_QWORD *)(v9 + 16);
      v6->epoch = v11;
      *(_OWORD *)(v5 + 396) = v10;
      *(_QWORD *)(v5 + 412) = v11;
      CFRelease(v8);
    }
    else
    {
      v12 = MEMORY[0x1E0CA2E18];
      result = *(__n128 *)MEMORY[0x1E0CA2E18];
      *(_OWORD *)&v6->value = *MEMORY[0x1E0CA2E18];
      v13 = *(_QWORD *)(v12 + 16);
      v6->epoch = v13;
      *(__n128 *)(v5 + 396) = result;
      *(_QWORD *)(v5 + 412) = v13;
    }
  }
  return result;
}

uint64_t FigSampleBufferRenderSynchronizerCentralCreate(const __CFAllocator *a1, const void *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *DerivedStorage;
  CFMutableSetRef Mutable;
  uint64_t v10;

  v3 = 4294950926;
  if (a2 && a3)
  {
    FigSampleBufferRenderSynchronizerGetClassID();
    v7 = CMDerivedObjectCreate();
    if ((_DWORD)v7)
    {
      return v7;
    }
    else
    {
      DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
      *DerivedStorage = a2;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CFRetain(a2);
      Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E0C9B3B0]);
      DerivedStorage[2] = Mutable;
      if (Mutable && (v10 = FigSimpleMutexCreate(), (DerivedStorage[1] = v10) != 0))
      {
        v3 = 0;
        *a3 = 0;
      }
      else
      {
        return 4294950924;
      }
    }
  }
  return v3;
}

uint64_t synchronizerCentral_subSynchronizerNotificationHandler()
{
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t synchronizerCentral_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const __CFSet *v4;
  const __CFSet *Copy;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(_QWORD *)DerivedStorage)
    {
      CFRelease(*(CFTypeRef *)DerivedStorage);
      *(_QWORD *)DerivedStorage = 0;
    }
  }
  v3 = CMBaseObjectGetDerivedStorage();
  v4 = *(const __CFSet **)(v3 + 16);
  if (v4)
  {
    if (CFSetGetCount(v4) >= 1)
    {
      Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFSetRef *)(v3 + 16));
      CFSetApplyFunction(Copy, (CFSetApplierFunction)synchronizerCentral_unstashAllRenderersInFinalizeSetApplierFunction, a1);
      if (Copy)
        CFRelease(Copy);
    }
  }
  v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  return FigSimpleMutexDestroy();
}

CFMutableStringRef synchronizerCentral_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateMutable(v1, 0);
}

uint64_t synchronizerCentral_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, CFTypeRef *);
  uint64_t v9;
  CFTypeRef cf;

  cf = 0;
  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (v8)
    v9 = v8(v7, a2, a3, &cf);
  else
    v9 = 4294954514;
  if (a4)
  {
    *a4 = cf;
  }
  else if (cf)
  {
    CFRelease(cf);
  }
  return v9;
}

uint64_t synchronizerCentral_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v6)
    return v6(v5, a2, a3);
  else
    return 4294954514;
}

void synchronizerCentral_unstashAllRenderersInFinalizeSetApplierFunction(const void *a1, uint64_t a2)
{
  synchronizerCentral_unstashRenderer(a2, a1);
}

void synchronizerCentral_unstashRenderer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a2))
  {
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  JUMPOUT(0x19402EF04);
}

void synchronizerCentral_audioRendererInterruptedNotificationHandler(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t, CMTime *, float);
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, CMTimebaseRef *);
  uint64_t v13;
  CMTimeEpoch epoch;
  CMTimebaseRef timebase;
  CMTime context;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  timebase = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 52) || !CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a4))
    goto LABEL_12;
  if (*(float *)(DerivedStorage + 24) != 0.0)
  {
    v7 = CMBaseObjectGetDerivedStorage();
    context.epoch = 1;
    *(_OWORD *)&context.value = a2;
    CFSetApplyFunction(*(CFSetRef *)(v7 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
    v8 = *(_QWORD *)DerivedStorage;
    v9 = *(unsigned int (**)(uint64_t, CMTime *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (!v9)
      goto LABEL_12;
    context = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
    if (v9(v8, &context, 0.0))
      goto LABEL_12;
    v10 = CMBaseObjectGetDerivedStorage();
    context.epoch = 0;
    *(_OWORD *)&context.value = a2;
    CFSetApplyFunction(*(CFSetRef *)(v10 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
  }
  v11 = *(_QWORD *)DerivedStorage;
  v12 = *(unsigned int (**)(uint64_t, CMTimebaseRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v12 && !v12(v11, &timebase))
  {
    CMTimebaseGetTime(&context, timebase);
    *(_OWORD *)(DerivedStorage + 28) = *(_OWORD *)&context.value;
    epoch = context.epoch;
  }
  else
  {
    v13 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E0CA2E18];
    epoch = *(_QWORD *)(v13 + 16);
  }
  *(_QWORD *)(DerivedStorage + 44) = epoch;
  *(_BYTE *)(DerivedStorage + 52) = 1;
LABEL_12:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  if (timebase)
    CFRelease(timebase);
}

void synchronizerCentral_audioRendererInterruptionEndedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  if (*(_BYTE *)(DerivedStorage + 52))
  {
    if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a4))
    {
      *(_BYTE *)(DerivedStorage + 52) = 0;
      v6 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(DerivedStorage + 44) = *(_QWORD *)(v6 + 16);
    }
  }
  JUMPOUT(0x19402EF04);
}

uint64_t synchronizerCentral_processRateChangeWithRenderersSetApplier(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, float);

  if (!*(_DWORD *)(a2 + 8))
  {
    v3 = result;
    FigSampleBufferRenderSynchronizerCentralClientAccessProtocolGetProtocolID();
    result = CMBaseObjectImplementsProtocol();
    if ((_DWORD)result)
    {
      v4 = *(unsigned __int8 *)(a2 + 16);
      v5 = *(float *)(a2 + 12);
      FigSampleBufferRenderSynchronizerCentralClientAccessProtocolGetProtocolID();
      ProtocolVTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable && (v7 = *(_QWORD *)(ProtocolVTable + 16)) != 0)
      {
        v8 = *(uint64_t (**)(uint64_t, uint64_t, float))(v7 + 8);
        if (v8)
          result = v8(v3, v4, v5);
        else
          result = 4294954514;
      }
      else
      {
        result = 4294954508;
      }
      *(_DWORD *)(a2 + 8) = result;
    }
  }
  return result;
}

uint64_t synchronizerCentral_AddAudioRenderer(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, const void *);
  uint64_t result;
  uint64_t DerivedStorage;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
  if (!v4)
    return 4294954514;
  result = v4(v3, a2);
  if (!(_DWORD)result)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
    if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 16), a2))
    {
      CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 16), a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
    return 0;
  }
  return result;
}

uint64_t synchronizerCentral_RemoveAudioRenderer(uint64_t a1, const void *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, const void *);
  uint64_t result;

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v5 = *(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v5)
    return 4294954514;
  result = v5(v4, a2);
  if (!(_DWORD)result)
    synchronizerCentral_unstashRenderer(a1, a2);
  return result;
}

uint64_t synchronizerCentral_SetRateAndTime(uint64_t a1, uint64_t a2, float a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  return synchronizerCentral_SetRateAndAnchorTime(a1, &v4, MEMORY[0x1E0CA2E18], a3);
}

uint64_t synchronizerCentral_CopyReadOnlyTimebase(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t synchronizerCentral_AcquirePlaybackAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t synchronizerCentral_ReleasePlaybackAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t synchronizerCentral_SetRateAndAnchorTime(uint64_t a1, __int128 *a2, __int128 *a3, float a4)
{
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, __int128 *, __int128 *, float);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 context;
  uint64_t v23;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 8));
  v9 = CMBaseObjectGetDerivedStorage();
  v23 = 1;
  *(_QWORD *)&context = a1;
  DWORD2(context) = 0;
  *((float *)&context + 3) = a4;
  CFSetApplyFunction(*(CFSetRef *)(v9 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
  v10 = *(_QWORD *)DerivedStorage;
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  v16 = *a3;
  v17 = *((_QWORD *)a3 + 2);
  v11 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 56);
  if (v11)
  {
    context = v18;
    v23 = v19;
    v20 = v16;
    v21 = v17;
    v12 = v11(v10, &context, &v20, a4);
    if (!(_DWORD)v12)
    {
      v13 = CMBaseObjectGetDerivedStorage();
      v23 = 0;
      *(_QWORD *)&context = a1;
      DWORD2(context) = 0;
      *((float *)&context + 3) = a4;
      CFSetApplyFunction(*(CFSetRef *)(v13 + 16), (CFSetApplierFunction)synchronizerCentral_processRateChangeWithRenderersSetApplier, &context);
      *(float *)(DerivedStorage + 24) = a4;
      *(_BYTE *)(DerivedStorage + 52) = 0;
      v14 = MEMORY[0x1E0CA2E18];
      *(_OWORD *)(DerivedStorage + 28) = *MEMORY[0x1E0CA2E18];
      *(_QWORD *)(DerivedStorage + 44) = *(_QWORD *)(v14 + 16);
    }
  }
  else
  {
    v12 = 4294954514;
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 8));
  return v12;
}

uint64_t synchronizerCentral_ConvertTime(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, __int128 *, uint64_t);
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v10 = *a3;
  v11 = *((_QWORD *)a3 + 2);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v8)
    return 4294954514;
  v12 = v10;
  v13 = v11;
  return v8(v7, a2, &v12, a4);
}

uint64_t FigTTMLDocumentWriterCreateLanguageIdentifierInserter(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterLanguageIdentifierInserter_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

CFStringRef figTTMLDocumentWriterLanguageIdentifierInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterLanguageIdentifierInserter[%p]"), a1);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t result;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!CFEqual(CFSTR("languageIdentifier"), a2))
    return 4294954512;
  v8 = *(const void **)(v7 + 8);
  if (v8)
    v9 = CFRetain(v8);
  else
    v9 = 0;
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  const void *v8;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!CFEqual(CFSTR("languageIdentifier"), a2))
    return 4294954512;
  v7 = CFGetTypeID(a3);
  if (v7 != CFStringGetTypeID())
    return FigSignalErrorAt();
  v8 = *(const void **)(v6 + 8);
  *(_QWORD *)(v6 + 8) = a3;
  CFRetain(a3);
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_StartElement(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t result;
  uint64_t v6;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = FigTTMLDocumentWriterStartElement(*DerivedStorage, a2);
  if ((_DWORD)a2 == 7 && !(_DWORD)result)
  {
    v6 = DerivedStorage[1];
    if (v6)
      return FigTTMLDocumentWriterSetAttribute(a1, (uint64_t)CFSTR("http://www.w3.org/XML/1998/namespace lang"), v6);
    else
      return 4294950719;
  }
  return result;
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_EndElement(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterEndElement(*DerivedStorage);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_AddCaptionData(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, a2);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_SetAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterSetAttribute(*DerivedStorage, a2, a3);
}

uint64_t figTTMLDocumentWriterLanguageIdentifierInserter_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t fapu_registerClass()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigAudioProcessingUnitCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  if (!a4)
  {
LABEL_5:
    *((_DWORD *)v8 + 6) = FigSignalErrorAt();
    goto LABEL_6;
  }
  MEMORY[0x19402F294](&FigAudioProcessingUnitGetClassID_sRegisterFigAudioProcessingUnitOnce, fapu_registerClass);
  v4 = CMDerivedObjectCreate();
  *((_DWORD *)v8 + 6) = v4;
  if (!v4)
  {
    CMBaseObjectGetDerivedStorage();
    if (FigCFDictionaryGetValueIfPresent())
      FigCFDictionaryGetValueIfPresent();
    goto LABEL_5;
  }
LABEL_6:
  v5 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v5;
}

uint64_t fapu_updateLoggingIDCStr(unsigned int *a1, const void *a2, const void *a3)
{
  char *v6;
  char v8[18];
  char v9[18];
  char v10[18];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = (char *)(a1 + 4);
  fapu_FourCCToPrintableStr((uint64_t)v10, a1[28]);
  fapu_FourCCToPrintableStr((uint64_t)v9, a1[29]);
  fapu_FourCCToPrintableStr((uint64_t)v8, a1[30]);
  return snprintf(v6, 0x5FuLL, "FAPU %p:%p %s/%s/%s", a2, a3, v10, v9, v8);
}

uint64_t FigAudioProcessingUnitCreateCopy(uint64_t a1, const void *a2, const void *a3, const void *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, const __CFString *, uint64_t);
  uint64_t v16;
  uint64_t (*v17)(_QWORD, const __CFString *, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(_QWORD, const __CFString *, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(_QWORD, const __CFString *, uint64_t);
  uint64_t v22;

  if (a4)
  {
    if (!a5)
      return FigSignalErrorAt();
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19402F294](&FigAudioProcessingUnitGetClassID_sRegisterFigAudioProcessingUnitOnce, fapu_registerClass);
    v11 = CMDerivedObjectCreate();
    if ((_DWORD)v11)
      return v11;
    v12 = CMBaseObjectGetDerivedStorage();
    v13 = *(_OWORD *)(DerivedStorage + 112);
    *(_DWORD *)(v12 + 128) = *(_DWORD *)(DerivedStorage + 128);
    *(_OWORD *)(v12 + 112) = v13;
    *(_DWORD *)(v12 + 132) = *(_DWORD *)(DerivedStorage + 132);
    *(_QWORD *)v12 = CFRetain(a4);
    FigAudioQueueTimingShimGetAudioQueue((uint64_t)a4);
    v11 = ATAudioProcessingNodeInstantiate();
    if ((_DWORD)v11)
      return v11;
    fapu_updateLoggingIDCStr((unsigned int *)v12, a2, a3);
    v14 = *(_QWORD *)(DerivedStorage + 136);
    if (v14)
    {
      v15 = *(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (!v15)
        return 4294954514;
      v11 = v15(0, CFSTR("prrp"), v14);
      if ((_DWORD)v11)
        return v11;
    }
    v16 = *(_QWORD *)(DerivedStorage + 144);
    if (v16)
    {
      v17 = *(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (!v17)
        return 4294954514;
      v11 = v17(0, CFSTR("prsp"), v16);
      if ((_DWORD)v11)
        return v11;
    }
    v18 = *(_QWORD *)(DerivedStorage + 152);
    if (v18)
    {
      v19 = *(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                          + 56);
      if (!v19)
        return 4294954514;
      v11 = v19(0, CFSTR("ausp"), v18);
      if ((_DWORD)v11)
        return v11;
    }
    v20 = *(_QWORD *)(DerivedStorage + 160);
    if (!v20)
    {
LABEL_17:
      v22 = 0;
      *a6 = 0;
      return v22;
    }
    v21 = *(uint64_t (**)(_QWORD, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v21)
    {
      v11 = v21(0, CFSTR("grtx"), v20);
      if (!(_DWORD)v11)
        goto LABEL_17;
      return v11;
    }
    return 4294954514;
  }
  return FigSignalErrorAt();
}

CFStringRef fapu_CopyFormattingDesc(uint64_t a1)
{
  const __CFAllocator *v1;
  const char *v2;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a1)
    v2 = (const char *)(CMBaseObjectGetDerivedStorage() + 16);
  else
    v2 = "";
  return CFStringCreateWithCString(v1, v2, 0x600u);
}

void fapu_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ATAudioProcessingNodeDispose();
  *(_QWORD *)(DerivedStorage + 8) = 0;
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 136) = 0;
  }
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(DerivedStorage + 144) = 0;
  }
  v3 = *(const void **)(DerivedStorage + 152);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(DerivedStorage + 152) = 0;
  }
  v4 = *(const void **)(DerivedStorage + 160);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 160) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
}

CFStringRef fapu_CopyDebugDescription(uint64_t a1)
{
  const __CFAllocator *v1;
  const char *v2;

  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a1)
    v2 = (const char *)(CMBaseObjectGetDerivedStorage() + 16);
  else
    v2 = "";
  return CFStringCreateWithCString(v1, v2, 0x600u);
}

uint64_t fapu_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  _QWORD *DerivedStorage;
  const void *v6;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    v6 = (const void *)DerivedStorage[17];
LABEL_9:
    *a4 = CFRetain(v6);
    return 0;
  }
  if (FigCFEqual())
  {
    v6 = (const void *)DerivedStorage[18];
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    v6 = (const void *)DerivedStorage[19];
    goto LABEL_9;
  }
  if (FigCFEqual())
  {
    v6 = (const void *)DerivedStorage[20];
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t fapu_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  _QWORD *DerivedStorage;
  CFTypeID v6;
  const void *v7;
  uint64_t v8;
  CFTypeID v9;
  CFTypeID v10;
  CFTypeID v12;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (!DerivedStorage[17])
      {
        if (a2)
        {
          v6 = CFGetTypeID(a2);
          if (v6 == CFStringGetTypeID())
          {
            v7 = (const void *)DerivedStorage[17];
            DerivedStorage[17] = a3;
            if (!a3)
            {
LABEL_8:
              if (v7)
                CFRelease(v7);
              v8 = ATAudioProcessingNodeSetProperty();
              if ((_DWORD)v8)
                FigSignalErrorAt();
              return v8;
            }
LABEL_7:
            CFRetain(a3);
            goto LABEL_8;
          }
        }
      }
      return FigSignalErrorAt();
    }
    return 0;
  }
  if (FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (!DerivedStorage[18])
      {
        if (a2)
        {
          v9 = CFGetTypeID(a2);
          if (v9 == CFDictionaryGetTypeID())
          {
            v7 = (const void *)DerivedStorage[18];
            DerivedStorage[18] = a3;
            if (!a3)
              goto LABEL_8;
            goto LABEL_7;
          }
        }
      }
      return FigSignalErrorAt();
    }
    return 0;
  }
  if (FigCFEqual())
  {
    if (!FigCFEqual())
    {
      if (!DerivedStorage[19])
      {
        if (a2)
        {
          v10 = CFGetTypeID(a2);
          if (v10 == CFDictionaryGetTypeID())
          {
            v7 = (const void *)DerivedStorage[19];
            DerivedStorage[19] = a3;
            if (!a3)
              goto LABEL_8;
            goto LABEL_7;
          }
        }
      }
      return FigSignalErrorAt();
    }
    return 0;
  }
  if (!FigCFEqual())
    return FigSignalErrorAt();
  if (FigCFEqual())
    return 0;
  if (!DerivedStorage[20])
  {
    if (a2)
    {
      v12 = CFGetTypeID(a2);
      if (v12 == CFStringGetTypeID())
      {
        v7 = (const void *)DerivedStorage[20];
        DerivedStorage[20] = a3;
        if (!a3)
          goto LABEL_8;
        goto LABEL_7;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t fapu_ScheduleParameters(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  CMTime **v4;
  CFTypeID v5;
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const void *ValueAtIndex;
  CFTypeID v10;
  CFTypeID v11;
  CFTypeID v12;
  unint64_t Length;
  unint64_t v14;
  CMTime *v15;
  uint64_t result;
  CMTime v17;
  CMTime v18;
  CFTypeRef v19;
  CFTypeRef cf;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CMTime v25;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0;
  cf = 0;
  if (!a2)
    return FigSignalErrorAt();
  v4 = (CMTime **)DerivedStorage;
  v5 = CFGetTypeID(a2);
  if (v5 != CFArrayGetTypeID())
    return FigSignalErrorAt();
  Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count < 1)
    return 0;
  v7 = Count;
  v8 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
    if (!ValueAtIndex)
      break;
    v10 = CFGetTypeID(ValueAtIndex);
    if (v10 != CFDictionaryGetTypeID())
      break;
    if (!FigCFDictionaryGetCMTimeIfPresent())
      break;
    if (!FigCFDictionaryGetValueIfPresent())
      break;
    if (!cf)
      break;
    v11 = CFGetTypeID(cf);
    if (v11 != CFDataGetTypeID())
      break;
    if (!FigCFDictionaryGetValueIfPresent())
      break;
    if (!v19)
      break;
    v12 = CFGetTypeID(v19);
    if (v12 != CFDataGetTypeID())
      break;
    Length = CFDataGetLength((CFDataRef)cf);
    if (Length <= 0xB)
      break;
    v14 = Length / 0xC;
    if (12 * (Length / 0xC) != CFDataGetLength((CFDataRef)cf) || CFDataGetLength((CFDataRef)v19) != 4 * v14)
      break;
    CFDataGetBytePtr((CFDataRef)cf);
    CFDataGetBytePtr((CFDataRef)v19);
    v15 = *v4;
    v17 = v25;
    FigAudioQueueTimingShimConvertTimingShimTimeToAQTime(v15, &v17, &v18);
    *(double *)&v21 = (double)v18.value;
    DWORD2(v24) = 1;
    result = ATAudioProcessingNodeScheduleParameters();
    if ((_DWORD)result)
      return result;
    if (v7 == ++v8)
      return 0;
  }
  return FigSignalErrorAt();
}

uint64_t fapu_SetParameters(uint64_t a1, CFDictionaryRef theDict)
{
  _QWORD context[2];
  unsigned int v4;

  v4 = 0;
  context[0] = &v4;
  context[1] = a1;
  if (!theDict)
    return 0;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fapu_SetParametersApplier, context);
  return v4;
}

uint64_t fapu_CancelScheduledParameters()
{
  CMBaseObjectGetDerivedStorage();
  return ATAudioProcessingNodeCancelScheduledParameters();
}

uint64_t fapu_SetParametersApplier(const __CFData *a1, uint64_t a2, _DWORD **a3)
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  if (!**a3)
  {
    CFDataGetBytePtr(a1);
    FigCFNumberGetFloat32();
    result = ATAudioProcessingNodeSetParameter();
    **a3 = result;
  }
  return result;
}

uint64_t fapu_FourCCToPrintableStr(uint64_t a1, unsigned int a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  char v12;

  v4 = 0;
  v5 = 24;
  v6 = MEMORY[0x1E0C80978];
  do
  {
    v7 = a2 >> v5;
    v8 = (a2 >> v5);
    if (v8 > 0x7F)
      v9 = __maskrune((a2 >> v5), 0x40000uLL);
    else
      v9 = *(_DWORD *)(v6 + 4 * (a2 >> v5) + 60) & 0x40000;
    if (v9)
    {
      *(_BYTE *)(a1 + v4) = v7;
    }
    else
    {
      *(_BYTE *)(a1 + v4) = 92;
      v10 = v4 + 2;
      *(_BYTE *)(a1 + (v4 + 1)) = 120;
      if (v8 <= 0x9F)
        v11 = 48;
      else
        v11 = 55;
      v4 += 3;
      *(_BYTE *)(a1 + v10) = v11 + ((a2 >> v5) >> 4);
      if (((a2 >> v5) & 0xF) <= 9)
        v12 = 48;
      else
        v12 = 55;
      *(_BYTE *)(a1 + v4) = v12 + (v7 & 0xF);
    }
    ++v4;
    v5 -= 8;
  }
  while (v5 != -8);
  *(_BYTE *)(a1 + v4) = 0;
  return a1;
}

CFTypeRef PKDCopyDisposeStorageAllocator()
{
  CFTypeRef result;

  if (PKDCopyDisposeStorageAllocator_once != -1)
    dispatch_once_f(&PKDCopyDisposeStorageAllocator_once, &PKDCopyDisposeStorageAllocator_initContext, (dispatch_function_t)PKDDisposeStorageAllocatorInitOnce);
  result = (CFTypeRef)qword_1EE2888C8;
  if (qword_1EE2888C8)
    return CFRetain((CFTypeRef)qword_1EE2888C8);
  return result;
}

CFAllocatorRef PKDDisposeStorageAllocatorInitOnce(uint64_t a1)
{
  void *v2;
  CFAllocatorRef result;
  CFAllocatorContext v4;

  v2 = *(void **)a1;
  v4.version = 0;
  memset(&v4.retain, 0, 56);
  v4.info = v2;
  v4.allocate = (CFAllocatorAllocateCallBack)PKDDisposeStorageAllocatorAllocateCallback;
  v4.deallocate = (CFAllocatorDeallocateCallBack)PKDDisposeStorageAllocatorDeallocateCallback;
  result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

CFTypeRef PKDMSECopyDisposeStorageAllocator()
{
  CFTypeRef result;

  if (PKDMSECopyDisposeStorageAllocator_once != -1)
    dispatch_once_f(&PKDMSECopyDisposeStorageAllocator_once, &PKDMSECopyDisposeStorageAllocator_initContext, (dispatch_function_t)PKDDisposeStorageAllocatorInitOnce);
  result = (CFTypeRef)qword_1EE2888D8;
  if (qword_1EE2888D8)
    return CFRetain((CFTypeRef)qword_1EE2888D8);
  return result;
}

_QWORD *PKDMovieIDCreateForPastis()
{
  _QWORD *result;

  result = CreateCommon();
  result[2] = Qhl17oSYJtCJIxM;
  result[3] = MzdSdcDIXg8COV;
  return result;
}

_QWORD *CreateCommon()
{
  _QWORD *Instance;
  dispatch_queue_t v1;

  PKDMovieIDGetTypeID();
  Instance = (_QWORD *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    v1 = dispatch_queue_create("com.apple.PKDMovieID", 0);
    Instance[4] = v1;
    if (!v1)
    {
      CFRelease(Instance);
      return 0;
    }
  }
  return Instance;
}

uint64_t PKDMovieIDGetTypeID()
{
  __int128 v1;

  v1 = xmmword_1E2FB9EA8;
  if (PKDMovieIDGetTypeID_once != -1)
    dispatch_once_f(&PKDMovieIDGetTypeID_once, &v1, (dispatch_function_t)CFRuntimeClassRegisterOnce_0);
  return PKDMovieIDGetTypeID_typeID;
}

double PKDMovieIDInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void PKDMovieIDFinalize(void *context)
{
  NSObject *v2;

  v2 = *((_QWORD *)context + 4);
  if (v2)
  {
    dispatch_sync_f(v2, context, (dispatch_function_t)FinalizeGuts);
    dispatch_release(*((dispatch_object_t *)context + 4));
  }
}

uint64_t CFRuntimeClassRegisterOnce_0(uint64_t a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  **(_QWORD **)(a1 + 8) = result;
  return result;
}

uint64_t PKDMovieIDGetInfo(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t PKDMovieIDGetValue(uint64_t a1, CFDictionaryRef theDict, _QWORD *a3)
{
  const void *v6;
  const void *v7;
  __CFDictionary *Mutable;
  const void *Value;
  const void *v10;
  uint64_t result;
  uint64_t context;
  CFTypeRef cf;
  uint64_t v14;

  cf = 0;
  v14 = 0;
  context = a1;
  if (theDict)
  {
    v6 = (const void *)*MEMORY[0x1E0CA4D10];
    if (!CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA4D10])
      || (v7 = (const void *)*MEMORY[0x1E0CA4D48], !CFDictionaryContainsKey(theDict, (const void *)*MEMORY[0x1E0CA4D48])))
    {
      result = 4294955136;
      LODWORD(v14) = -12160;
      goto LABEL_8;
    }
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    Value = CFDictionaryGetValue(theDict, v6);
    CFDictionarySetValue(Mutable, v6, Value);
    v10 = CFDictionaryGetValue(theDict, v7);
    CFDictionarySetValue(Mutable, v7, v10);
    cf = Mutable;
  }
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 32), &context, (dispatch_function_t)GetMovieIDGuts);
  result = v14;
  if (a3 && !(_DWORD)v14)
    *a3 = *(_QWORD *)(a1 + 40);
LABEL_8:
  if (cf)
  {
    CFRelease(cf);
    return v14;
  }
  return result;
}

void GetMovieIDGuts(uint64_t a1)
{
  _QWORD *v2;
  const __CFDictionary *v3;
  const void *v4;
  int v5;
  char *v6;
  const __CFData *Value;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  char *v12;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v14;
  CFTypeID v15;
  int v16;
  uint64_t (*v17)(const UInt8 *, CFIndex, char *, CFIndex, uint64_t *);
  const UInt8 *BytePtr;
  CFIndex Length;
  CFTypeRef v20;
  CFDataRef theData;
  uint64_t v22;

  v2 = *(_QWORD **)a1;
  v3 = *(const __CFDictionary **)(*(_QWORD *)a1 + 48);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      v4 = (const void *)*MEMORY[0x1E0CA4D10];
      CFDictionaryGetValue(v3, (const void *)*MEMORY[0x1E0CA4D10]);
      CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), v4);
      if (!FigCFEqual())
      {
        v5 = FigSignalErrorAt();
        goto LABEL_6;
      }
    }
  }
  if (v2[5])
  {
    v5 = 0;
LABEL_6:
    v6 = 0;
    goto LABEL_20;
  }
  v22 = 0;
  Value = (const __CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E0CA4D10]);
  v8 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), (const void *)*MEMORY[0x1E0CA4D48]);
  Count = CFArrayGetCount(v8);
  v10 = Count;
  if ((_DWORD)Count)
  {
    theData = Value;
    v6 = (char *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
    v11 = 0;
    v12 = v6;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v8, v11);
      if (!ValueAtIndex)
        break;
      v14 = ValueAtIndex;
      v15 = CFGetTypeID(ValueAtIndex);
      if (v15 != CFNumberGetTypeID())
        break;
      if (!CFNumberGetValue(v14, kCFNumberSInt32Type, v12))
      {
        v16 = FigSignalErrorAt();
        if (v16)
          goto LABEL_22;
      }
      ++v11;
      v12 += 4;
      if (v10 == v11)
      {
        Value = theData;
        goto LABEL_16;
      }
    }
    v16 = FigSignalErrorAt();
LABEL_22:
    v5 = v16;
    goto LABEL_20;
  }
  v6 = 0;
LABEL_16:
  v17 = (uint64_t (*)(const UInt8 *, CFIndex, char *, CFIndex, uint64_t *))v2[2];
  BytePtr = CFDataGetBytePtr(Value);
  Length = CFDataGetLength(Value);
  v16 = v17(BytePtr, Length, v6, v10, &v22);
  if (v16)
    goto LABEL_22;
  v20 = *(CFTypeRef *)(a1 + 8);
  if (v20)
    v20 = CFRetain(v20);
  v5 = 0;
  v2[5] = v22;
  v2[6] = v20;
LABEL_20:
  free(v6);
  *(_DWORD *)(a1 + 16) = v5;
}

uint64_t PKDGetSchemeFromSinf(const __CFData *a1, unsigned int *a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (a1)
  {
    v10 = 1935894637;
    v8 = 0;
    v9 = 0;
    BytePtr = CFDataGetBytePtr(a1);
    Length = CFDataGetLength(a1);
    result = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)&v10, 1, &v9, &v8);
    if ((_DWORD)result)
    {
      v7 = 0;
      if (!a2)
        return result;
      goto LABEL_11;
    }
    if (v8 != 12)
    {
      v7 = 0;
      result = 4294955137;
      if (!a2)
        return result;
      goto LABEL_11;
    }
    result = 0;
    v7 = bswap32(*(_DWORD *)(v9 + 4));
    if (a2)
LABEL_11:
      *a2 = v7;
  }
  else
  {
    v7 = 0;
    result = 4294955146;
    if (a2)
      goto LABEL_11;
  }
  return result;
}

uint64_t PKDCopyDefaultKeyIDFromSinf(const __CFData *a1, CFDataRef *a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t result;
  CFDataRef v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v9 = 0;
    v10[0] = 0x74656E6373636869;
    v8 = 0;
    BytePtr = CFDataGetBytePtr(a1);
    Length = CFDataGetLength(a1);
    result = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)v10, 2, &v9, &v8);
    if ((_DWORD)result)
    {
      v7 = 0;
      if (!a2)
        return result;
      goto LABEL_11;
    }
    if (v8 < 0x18)
    {
      v7 = 0;
      result = 4294955137;
      if (!a2)
        return result;
      goto LABEL_11;
    }
    v7 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)(v9 + 8), 16);
    result = 0;
    if (a2)
LABEL_11:
      *a2 = v7;
  }
  else
  {
    v7 = 0;
    result = 4294955146;
    if (a2)
      goto LABEL_11;
  }
  return result;
}

uint64_t PKDDispatchKeyResponseNotification(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v7;
  CFErrorRef v8;
  CFErrorRef v9;
  __CFDictionary *v10;

  if (!a4)
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable)
    {
      FigSignalErrorAt();
      return a2;
    }
    v7 = Mutable;
    if ((_DWORD)a2)
    {
      v8 = CFErrorCreate(v5, (CFErrorDomain)*MEMORY[0x1E0C9AFC8], (int)a2, 0);
      if (v8)
      {
        v9 = v8;
        CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E0CA3128], v8);
        FigCFDictionarySetInt64();
        dispatch_get_global_queue(0, 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        CFRelease(v7);
        v10 = v9;
LABEL_8:
        CFRelease(v10);
        return a2;
      }
      FigSignalErrorAt();
    }
    else
    {
      FigCFDictionarySetInt64();
      dispatch_get_global_queue(0, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    v10 = v7;
    goto LABEL_8;
  }
  return a2;
}

uint64_t PKDCopyInfoFromPackagedPersistentKey(const void *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  CFTypeID v10;
  const __CFDictionary *v11;
  const __CFDictionary *v13;
  CFTypeID v14;
  const void *Value;
  const void *v16;
  CFTypeRef v17;
  CFTypeID v18;
  const void *v19;
  CFTypeRef v20;
  CFTypeID v21;
  const void *v22;
  CFTypeRef v23;
  CFTypeID v24;

  if (!a1)
    return FigSignalErrorAt();
  v10 = CFGetTypeID(a1);
  if (v10 != CFDataGetTypeID())
    return FigSignalErrorAt();
  v11 = (const __CFDictionary *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDataRef)a1, 0, 0, 0);
  if (!v11)
    return FigSignalErrorAt();
  v13 = v11;
  v14 = CFGetTypeID(v11);
  if (v14 != CFDictionaryGetTypeID())
    goto LABEL_26;
  if (a2)
  {
    Value = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA4D90]);
    if (Value)
      Value = CFRetain(Value);
    *a2 = Value;
  }
  if (a3)
  {
    v16 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA4D10]);
    if (!v16)
      goto LABEL_25;
    v17 = CFRetain(v16);
    *a3 = v17;
    if (!v17)
      goto LABEL_26;
    v18 = CFGetTypeID(v17);
    if (v18 != CFDataGetTypeID())
      goto LABEL_26;
  }
  if (a4)
  {
    v19 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA4D48]);
    if (!v19)
    {
      a3 = a4;
      goto LABEL_25;
    }
    v20 = CFRetain(v19);
    *a4 = v20;
    if (!v20)
      goto LABEL_26;
    v21 = CFGetTypeID(v20);
    if (v21 != CFArrayGetTypeID())
      goto LABEL_26;
  }
  if (a5)
  {
    v22 = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0CA4D40]);
    if (v22)
    {
      v23 = CFRetain(v22);
      *a5 = v23;
      if (v23)
      {
        v24 = CFGetTypeID(v23);
        if (v24 == CFDataGetTypeID())
        {
          a5 = 0;
          goto LABEL_27;
        }
      }
LABEL_26:
      a5 = (_QWORD *)FigSignalErrorAt();
      goto LABEL_27;
    }
    a3 = a5;
LABEL_25:
    *a3 = 0;
    goto LABEL_26;
  }
LABEL_27:
  CFRelease(v13);
  return (uint64_t)a5;
}

uint64_t PKDCopyDefaultKeyIDFromSinfArray(CFArrayRef theArray, CFDataRef *a2)
{
  uint64_t v4;
  CFIndex v5;
  CFIndex i;
  const __CFData *ValueAtIndex;
  const __CFData *v8;
  CFDataRef v9;
  CFDataRef v11;
  unsigned int v12;

  v12 = 0;
  v11 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v4 = 0;
  v5 = 0;
  *a2 = 0;
  if (!theArray)
    goto LABEL_4;
LABEL_3:
  for (i = CFArrayGetCount(theArray); ; i = 0)
  {
    if (v5 >= i)
    {
      v9 = v11;
      goto LABEL_13;
    }
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, v5);
    if (ValueAtIndex)
    {
      v8 = ValueAtIndex;
      if (!PKDGetSchemeFromSinf(ValueAtIndex, &v12))
      {
        v4 = PKDCopyDefaultKeyIDFromSinf(v8, &v11);
        if (!(_DWORD)v4)
        {
          v9 = v11;
          if (v11)
            break;
        }
      }
    }
    ++v5;
    if (theArray)
      goto LABEL_3;
LABEL_4:
    ;
  }
  v4 = 0;
LABEL_13:
  *a2 = v9;
  return v4;
}

uint64_t PKDPersistentKeyIsForCTRModeDecryption(const void *a1, _BYTE *a2)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  *a2 = 0;
  v3 = PKDCopyInfoFromPackagedPersistentKey(a1, &cf, 0, 0, 0);
  v4 = cf;
  if (!(_DWORD)v3)
  {
    *a2 = FigCFEqual();
    v4 = cf;
  }
  if (v4)
    CFRelease(v4);
  return v3;
}

BOOL PKDKeyRequestIDsMatch(uint64_t a1, uint64_t a2)
{
  return !FigCFDictionaryGetInt64IfPresent() || a2 == 0;
}

uint64_t PKDGetNewRequestID()
{
  return (int)FigAtomicIncrement32();
}

uint64_t PKDCopyDecryptFormatTypeFromSinfArray(CFArrayRef theArray, _QWORD *a2)
{
  CFIndex v4;
  CFIndex i;
  const __CFData *ValueAtIndex;
  CFTypeRef v7;
  __CFString **v8;
  unsigned int v10;

  v10 = 0;
  if (!a2)
    return FigSignalErrorAt();
  v4 = 0;
  *a2 = 0;
  if (!theArray)
    goto LABEL_4;
LABEL_3:
  for (i = CFArrayGetCount(theArray); ; i = 0)
  {
    if (v4 >= i)
    {
      v7 = 0;
      goto LABEL_18;
    }
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, v4);
    if (!ValueAtIndex || PKDGetSchemeFromSinf(ValueAtIndex, &v10))
      goto LABEL_11;
    if (v10 == 1667392306)
      goto LABEL_14;
    if (v10 == 1667591779)
      break;
    if (v10 == 1667392371)
    {
LABEL_14:
      v8 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
      goto LABEL_16;
    }
LABEL_11:
    ++v4;
    if (theArray)
      goto LABEL_3;
LABEL_4:
    ;
  }
  v8 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
LABEL_16:
  v7 = *v8;
  if (*v8)
    v7 = CFRetain(v7);
LABEL_18:
  *a2 = v7;
  return 0;
}

uint64_t FigPKDParsePSSHAndCopyContentKeyInfo(const __CFData *a1, __CFString **a2, CFMutableArrayRef *a3)
{
  __CFString **v3;
  CFMutableArrayRef *v4;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  CFDataRef v14;
  CFDataRef v15;
  __CFDictionary *v16;
  __CFDictionary *v17;
  const __CFData *v18;
  const __CFArray *v19;
  int v20;
  __CFString **v22;
  uint64_t v23;
  __CFString **v25;
  CFMutableArrayRef *v26;
  _QWORD *v27;

  v27 = 0;
  if (!a1
    || (v3 = a2) == 0
    || (v4 = a3) == 0
    || (v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378])) == 0))
  {
    v23 = FigSignalErrorAt();
    v10 = 0;
    goto LABEL_28;
  }
  v8 = Mutable;
  v9 = (uint64_t)FigFairplayPSSHAtomParserParseAndCreateRecord((uint64_t)v6, a1, &v27);
  if ((_DWORD)v9)
  {
LABEL_30:
    v23 = v9;
LABEL_32:
    CFRelease(v8);
    v10 = v27;
    goto LABEL_28;
  }
  v10 = v27;
  v11 = v27[1];
  if (v11)
  {
    v25 = v3;
    v26 = v4;
    v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    while (1)
    {
      v14 = CFDataCreate(v6, (const UInt8 *)v11, 16);
      if (!v14)
      {
        v9 = FigSignalErrorAt();
        goto LABEL_30;
      }
      v15 = v14;
      v16 = CFDictionaryCreateMutable(v6, 0, v12, v13);
      if (!v16)
        break;
      v17 = v16;
      CFDictionarySetValue(v16, CFSTR("PKDPSSH_KeyID"), v15);
      v18 = *(const __CFData **)(v11 + 16);
      if (v18 && CFDataGetLength(v18) >= 1)
        CFDictionarySetValue(v17, CFSTR("PKDPSSH_ContentIdentifier"), *(const void **)(v11 + 16));
      v19 = *(const __CFArray **)(v11 + 24);
      if (v19 && CFArrayGetCount(v19) >= 1)
        CFDictionarySetValue(v17, CFSTR("PKDPSSH_VersionList"), *(const void **)(v11 + 24));
      CFArrayAppendValue(v8, v17);
      CFRelease(v15);
      CFRelease(v17);
      v11 = *(_QWORD *)(v11 + 32);
      if (!v11)
      {
        v4 = v26;
        v10 = v27;
        v3 = v25;
        goto LABEL_18;
      }
    }
    v23 = FigSignalErrorAt();
    CFRelease(v15);
    goto LABEL_32;
  }
LABEL_18:
  v20 = *(_DWORD *)v10;
  if (*(_DWORD *)v10 == 1667392306 || v20 == 1667392371)
  {
    v22 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
LABEL_26:
    *v3 = *v22;
    goto LABEL_27;
  }
  if (v20 == 1667591779)
  {
    v22 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
    goto LABEL_26;
  }
LABEL_27:
  v23 = 0;
  *v4 = v8;
LABEL_28:
  FigFairplayPSSHAtomParserDestroyRecord(v10);
  return v23;
}

uint64_t PKDGetCPCBitfieldFromLabels(const __CFArray *a1, _QWORD *a2)
{
  CFIndex v4;
  uint64_t v5;
  uint64_t i;
  uint64_t result;
  uint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  if (CFArrayGetCount(a1) < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      CFArrayGetValueAtIndex(a1, v4);
      for (i = 0; i != 80; i += 16)
      {
        if (FigCFEqual())
        {
          v8 = 1 << *(_DWORD *)((char *)&off_1E2FB9EF8 + i + 8);
          goto LABEL_10;
        }
      }
      result = FigSignalErrorAt();
      if ((_DWORD)result)
        return result;
      v8 = 1;
LABEL_10:
      v5 |= v8;
      ++v4;
    }
    while (v4 < CFArrayGetCount(a1));
  }
  result = 0;
  if (a2)
    *a2 = v5;
  return result;
}

uint64_t PKDGetSystemCPC(_QWORD *a1)
{
  uint64_t result;

  if (PKDGetSystemCPC_getCPCOnceToken != -1)
    dispatch_once(&PKDGetSystemCPC_getCPCOnceToken, &__block_literal_global_125);
  if (PKDGetSystemCPC_err)
  {
    FigSignalErrorAt();
    return PKDGetSystemCPC_err;
  }
  else
  {
    result = 0;
    if (a1)
      *a1 = PKDGetSystemCPC_sSystemCPC;
  }
  return result;
}

uint64_t PKDCopyDecryptFormatTypeFromCodecType(int a1, _QWORD *a2)
{
  CFTypeRef v4;
  __CFString **v5;
  int v6;
  unsigned __int16 v7;

  v4 = 0;
  v5 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_Pastis;
  if (a1 <= 1902407031)
  {
    if (a1 > 1902207794)
    {
      if (a1 > 1902212706)
      {
        if (a1 == 1902212707 || a1 == 1902403958)
          goto LABEL_34;
        v6 = 1902405681;
LABEL_29:
        if (a1 != v6)
          goto LABEL_36;
        goto LABEL_34;
      }
      if (a1 == 1902207795 || a1 == 1902211171)
        goto LABEL_34;
      v7 = 30257;
LABEL_20:
      v6 = v7 | 0x71610000;
      goto LABEL_29;
    }
    if (a1 <= 1667790434)
    {
      if (a1 != 1667331683 && a1 != 1667524657)
        goto LABEL_36;
    }
    else if (a1 != 1667790435)
    {
      if (a1 == 1700886115)
        goto LABEL_34;
      v7 = 24931;
      goto LABEL_20;
    }
    v5 = kFigCPEProtectorCryptorCreationOptionDecryptFormatType_MSE;
    goto LABEL_34;
  }
  if (a1 > 2053202274)
  {
    if (a1 > 2053207650)
    {
      if (a1 == 2053207651)
        goto LABEL_34;
      v6 = 2053464883;
    }
    else
    {
      if ((a1 - 2053202739) <= 0x3D && ((1 << (a1 - 51)) & 0x2020000000000001) != 0)
        goto LABEL_34;
      v6 = 2053202275;
    }
    goto LABEL_29;
  }
  if (a1 > 1902928226)
  {
    if (a1 == 1902928227 || a1 == 1902998904)
      goto LABEL_34;
    v6 = 1903522657;
    goto LABEL_29;
  }
  if (a1 != 1902407032 && a1 != 1902537827)
  {
    v6 = 1902671459;
    goto LABEL_29;
  }
LABEL_34:
  v4 = *v5;
  if (*v5)
    v4 = CFRetain(v4);
LABEL_36:
  *a2 = v4;
  return 0;
}

uint64_t PKDCopyDecryptFormatTypeFromFormatDescription(const opaqueCMFormatDescription *a1, _QWORD *a2)
{
  FourCharCode MediaSubType;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  PKDCopyDecryptFormatTypeFromCodecType(MediaSubType, a2);
  return 0;
}

const __CFString *PKDLogPrivateData(uint64_t a1)
{
  uint64_t v1;

  if (!a1)
    return CFSTR("[]");
  v1 = a1;
  if (!FigIsItOKToLogURLs())
    return CFSTR("[]");
  return (const __CFString *)v1;
}

uint64_t PKDIsContentKeyBossEnabled()
{
  return 1;
}

uint64_t FigPKDStartAirPlaySenderSession()
{
  return 4294954514;
}

uint64_t FigPKDStopAirPlaySenderSession()
{
  return 4294954514;
}

uint64_t FigPKDStartAirPlayReceiverSession()
{
  return 4294954514;
}

uint64_t FigPKDStopAirPlayReceiverSession()
{
  return 4294954514;
}

uint64_t PKDCopyIdentifierForFormatDescription(const opaqueCMFormatDescription *a1, char *a2, _QWORD *a3)
{
  const __CFDictionary *Extension;
  const __CFDictionary *v7;
  CFTypeID v8;
  __CFArray *Mutable;
  const __CFArray *Value;
  const __CFArray *v11;
  CFTypeID v12;
  CFIndex v13;
  const void *ValueAtIndex;
  CFTypeID v15;
  CFTypeID v16;
  uint64_t Base64EncodedStringFromCFData;
  char v18;
  char v19;
  signed int MediaSubType;
  unsigned __int16 v21;
  int v22;
  uint64_t v23;
  CFTypeRef v25;
  CFTypeRef cf;

  v25 = 0;
  cf = 0;
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension || (v7 = Extension, v8 = CFGetTypeID(Extension), v8 != CFDictionaryGetTypeID()))
  {
    Mutable = 0;
LABEL_46:
    v19 = 1;
LABEL_19:
    MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
    v18 = 0;
    if (MediaSubType <= 2053202738)
    {
      if (MediaSubType > 1902212706)
      {
        if (MediaSubType != 1902212707)
        {
          v21 = 24931;
          goto LABEL_29;
        }
      }
      else if (MediaSubType != 1667331683)
      {
        v22 = 1700886115;
        goto LABEL_30;
      }
    }
    else if (((MediaSubType - 2053202739) > 0x3D
            || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
           && MediaSubType != 2053464883)
    {
      v21 = 30307;
LABEL_29:
      v22 = v21 | 0x7A610000;
LABEL_30:
      if (MediaSubType != v22)
        goto LABEL_32;
    }
    v25 = CFRetain(CFSTR("TransportStreamIdentifier"));
    v18 = 1;
    goto LABEL_32;
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
  {
    FigSignalErrorAt();
    goto LABEL_46;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(v7, CFSTR("sinf"));
  if (Value)
  {
    v11 = Value;
    v12 = CFGetTypeID(Value);
    if (v12 == CFArrayGetTypeID())
    {
      if (CFArrayGetCount(v11) >= 1)
      {
        v13 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v11, v13);
          v15 = CFGetTypeID(ValueAtIndex);
          if (v15 == CFDataGetTypeID())
            CFArrayAppendValue(Mutable, ValueAtIndex);
          ++v13;
        }
        while (v13 < CFArrayGetCount(v11));
      }
    }
    else
    {
      v16 = CFGetTypeID(v11);
      if (v16 == CFDataGetTypeID())
        CFArrayAppendValue(Mutable, v11);
    }
  }
  if (CFArrayGetCount(Mutable) < 1)
  {
    v19 = 0;
    goto LABEL_19;
  }
  Base64EncodedStringFromCFData = PKDCopyDefaultKeyIDFromSinfArray(Mutable, (CFDataRef *)&cf);
  if ((_DWORD)Base64EncodedStringFromCFData
    || (v18 = 1,
        Base64EncodedStringFromCFData = FigCreateBase64EncodedStringFromCFData(),
        (_DWORD)Base64EncodedStringFromCFData))
  {
    v23 = Base64EncodedStringFromCFData;
LABEL_37:
    CFRelease(Mutable);
    goto LABEL_38;
  }
  v19 = 0;
LABEL_32:
  if (a2)
    *a2 = v18;
  v23 = 0;
  if (a3)
  {
    *a3 = v25;
    v25 = 0;
  }
  if ((v19 & 1) == 0)
    goto LABEL_37;
LABEL_38:
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  return v23;
}

const __CFString *PKDGetIdentifierForTransportStream()
{
  return CFSTR("TransportStreamIdentifier");
}

const __CFString *PKDCreateTransportStreamEncryptionInitData(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v2;
  const __CFString *result;
  const __CFString *v4;
  CFDataRef ExternalRepresentation;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("{\n  \"codc\" : %u,\n  \"mtyp\" : %u,\n  \"cont\" : \"mpts\"\n}"), a2, a1);
  if (result)
  {
    v4 = result;
    ExternalRepresentation = CFStringCreateExternalRepresentation(v2, result, 0x600u, 0x20u);
    CFRelease(v4);
    return (const __CFString *)ExternalRepresentation;
  }
  return result;
}

uint64_t PKDDisposeStorageAllocatorAllocateCallback()
{
  return 0;
}

void FinalizeGuts(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(a1 + 24))();
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
}

uint64_t FigNeroidLayerViewCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *DerivedStorage;

  FigLayerViewGetClassID();
  v3 = CMDerivedObjectCreate();
  if (!(_DWORD)v3)
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CAImageQueueCreate();
    CAImageQueueSetFlags();
    *a2 = 0;
  }
  return v3;
}

void flv_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

__CFString *flv_CopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigLayerView %p %@>"), a1, *DerivedStorage);
  return Mutable;
}

uint64_t flv_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage;
  __CFDictionary *Mutable;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  BOOL v11;
  const void *v12;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("PixelBufferAttributes")))
  {
    Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = CFArrayCreateMutable(a3, 0, MEMORY[0x1E0C9B378]);
    v10 = v9;
    if (Mutable)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (v11)
    {
      if (!v9)
        goto LABEL_14;
    }
    else
    {
      FigCFArrayAppendInt32();
      FigCFArrayAppendInt32();
      CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA9040], v10);
    }
    CFRelease(v10);
LABEL_14:
    result = 0;
    *a4 = Mutable;
    return result;
  }
  if (CFEqual(a2, CFSTR("DisplayInfo")))
  {
    v12 = *(const void **)(DerivedStorage + 8);
    if (!v12)
    {
      Mutable = 0;
      goto LABEL_14;
    }
LABEL_13:
    Mutable = (__CFDictionary *)CFRetain(v12);
    goto LABEL_14;
  }
  if (CFEqual(a2, CFSTR("ImageQueue")))
  {
    v12 = *(const void **)DerivedStorage;
    goto LABEL_13;
  }
  return 4294954512;
}

uint64_t flv_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, CFSTR("DisplayInfo")))
    return 4294954512;
  v6 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = a3;
  if (a3)
    CFRetain(a3);
  if (v6)
    CFRelease(v6);
  return 0;
}

uint64_t RegisterFigFramePrefetcherType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigFramePrefetcherID = result;
  return result;
}

uint64_t FigFramePrefetcherActivate(uint64_t a1)
{
  uint64_t Step;
  uint64_t v3;
  uint64_t v5;
  CMTime v6;

  if (sInitActiveGlobalsOnce != -1)
    dispatch_once_f(&sInitActiveGlobalsOnce, 0, (dispatch_function_t)InitActiveGlobals);
  MEMORY[0x19402EA0C](sActivePrefetcherLock);
  if (sActivePrefetcher == a1)
  {
    Step = 0;
  }
  else
  {
    ffp_DeactivateActivePrefetcher();
    sActivePrefetcher = a1;
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      Step = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 82) = FigHTTPRequestPerformingMandatoryActivity();
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      v3 = *(_QWORD *)(a1 + 32);
      if (v3)
        FigStreamingCacheSetProperty(v3, CFSTR("FSC_IsDonor"), (const void *)*MEMORY[0x1E0C9AE40]);
      if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48) && (*(_BYTE *)(a1 + 68) & 1) != 0)
      {
        *(_QWORD *)(a1 + 88) = 0;
        CMTimeMakeWithSeconds(&v6, 62.0, 2);
        *(CMTime *)(a1 + 128) = v6;
        v5 = MEMORY[0x1E0CA2E68];
        *(_OWORD *)(a1 + 104) = *MEMORY[0x1E0CA2E68];
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(v5 + 16);
        Step = ffp_TakeNextStep(a1);
      }
      else
      {
        Step = 0;
      }
      *(_BYTE *)(a1 + 81) = (_DWORD)Step == 0;
    }
    FigRetainProxyUnlockMutex();
  }
  MEMORY[0x19402EA24](sActivePrefetcherLock);
  return Step;
}

uint64_t InitActiveGlobals()
{
  uint64_t result;

  result = FigReentrantMutexCreate();
  sActivePrefetcherLock = result;
  return result;
}

void ffp_DeactivateActivePrefetcher()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sActivePrefetcher;
  if (sActivePrefetcher)
  {
    sActivePrefetcher = 0;
    FigRetainProxyLockMutex();
    *(_BYTE *)(v0 + 80) = 0;
    v1 = *(_QWORD *)(v0 + 32);
    if (v1)
      FigStreamingCacheSetProperty(v1, CFSTR("FSC_IsDonor"), (const void *)*MEMORY[0x1E0C9AE50]);
    FigRetainProxyUnlockMutex();
  }
}

uint64_t ffp_StartRun(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CMTime v5;

  if (a2 > 3)
  {
    *(_BYTE *)(a1 + 81) = 0;
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  else
  {
    *(_QWORD *)(a1 + 88) = a2;
    CMTimeMakeWithSeconds(&v5, kFFPRunIntervals[a2], 2);
    *(CMTime *)(a1 + 128) = v5;
    v3 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)(a1 + 104) = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(v3 + 16);
    return ffp_TakeNextStep(a1);
  }
}

uint64_t FigFramePrefetcherDeactivate(uint64_t a1)
{
  if (sInitActiveGlobalsOnce != -1)
    dispatch_once_f(&sInitActiveGlobalsOnce, 0, (dispatch_function_t)InitActiveGlobals);
  MEMORY[0x19402EA0C](sActivePrefetcherLock);
  if (sActivePrefetcher == a1)
    ffp_DeactivateActivePrefetcher();
  MEMORY[0x19402EA24](sActivePrefetcherLock);
  return 0;
}

uint64_t FigFramePrefetcherCreate(uint64_t a1, uint64_t a2, const void *a3, const void *a4, _QWORD *a5)
{
  uint64_t Instance;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  __CFDictionary *Mutable;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD);
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD, uint64_t);
  uint64_t v18;

  if (!a5 || !a3 || !a2 || !a4)
    return FigSignalErrorAt();
  if (sRegisterFigFramePrefetcherTypeOnce != -1)
    dispatch_once_f(&sRegisterFigFramePrefetcherTypeOnce, 0, (dispatch_function_t)RegisterFigFramePrefetcherType);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v10 = (_QWORD *)Instance;
  v11 = (uint64_t *)(Instance + 16);
  v12 = FigRetainProxyCreate();
  if ((_DWORD)v12)
  {
    v18 = v12;
    CFRelease(v10);
  }
  else
  {
    v10[3] = CFRetain(a4);
    v10[4] = CFRetain(a3);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    CFDictionarySetValue(Mutable, CFSTR("PlayerType"), CFSTR("scrub"));
    if (!FigReportingAgentCreateFromAsset(a2, 1, Mutable, v10 + 21))
    {
      v14 = v10[21];
      if (v14)
      {
        v15 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 104);
        if (v15)
          v15(v14, 0);
      }
    }
    if (Mutable)
      CFRelease(Mutable);
    FigRetainProxyRetain();
    v16 = *v11;
    v17 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (v17)
      v18 = v17(a2, ffp_PumpTransferCallback, v16);
    else
      v18 = 4294954514;
    *a5 = v10;
  }
  return v18;
}

uint64_t ffp_NoteMandatoryActivityLevelChange(int a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  dispatch_get_global_queue(0, 0);
  return FigDeferNotificationToDispatchQueue();
}

uint64_t ffp_PumpTransferCallback(int a1, const void *a2, CFErrorRef err)
{
  int Code;
  _QWORD *Owner;
  uint64_t GlobalNetworkBufferingLowPriorityQueue;
  BOOL v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __CFString *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t (*)(int, int, OpaqueCMBlockBuffer *, char, int, int, int, __int128 *, uint64_t, uint64_t, uint64_t, CFErrorRef), uint64_t (*)(), uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, __CFString *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, __CFString *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, __CFString *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, __CFString *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, __CFString *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, __CFString *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, __CFString *, const __CFString *);
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  CFTypeRef cf;

  if (err)
    Code = CFErrorGetCode(err);
  else
    Code = 0;
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
    goto LABEL_39;
  Owner = (_QWORD *)FigRetainProxyGetOwner();
  cf = 0;
  GlobalNetworkBufferingLowPriorityQueue = FigThreadGetGlobalNetworkBufferingLowPriorityQueue();
  if (Code)
    v7 = 0;
  else
    v7 = a2 == 0;
  if (v7)
    Code = -19310;
  if (Code)
    goto LABEL_38;
  v8 = GlobalNetworkBufferingLowPriorityQueue;
  v9 = FigBytePumpRetain(a2);
  Owner[5] = v9;
  v10 = Owner[21];
  if (v10)
  {
    FigBytePumpGetFigBaseObject(v9);
    v12 = v11;
    v13 = *(void (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (v13)
      v13(v12, CFSTR("FBP_ReportingAgent"), v10);
  }
  v14 = Owner[5];
  v15 = Owner[2];
  v16 = *(uint64_t (**)(uint64_t, uint64_t (*)(int, int, OpaqueCMBlockBuffer *, char, int, int, int, __int128 *, uint64_t, uint64_t, uint64_t, CFErrorRef), uint64_t (*)(), uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  Code = v16 ? v16(v14, ffp_BytePumpFn, ffp_DateMappingCallback, v15) : -12782;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterAddListener();
  if (Code)
    goto LABEL_38;
  v17 = Owner[4];
  FigBytePumpGetFigBaseObject(Owner[5]);
  v19 = v18;
  v20 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v20)
    goto LABEL_37;
  Code = v20(v19, CFSTR("FBP_SegmentCache"), v17);
  if (Code)
    goto LABEL_38;
  FigBytePumpGetFigBaseObject(Owner[5]);
  v22 = v21;
  v23 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v23)
  {
LABEL_37:
    Code = -12782;
    goto LABEL_38;
  }
  v24 = *MEMORY[0x1E0C9AE50];
  Code = v23(v22, CFSTR("FBP_CacheIFrames"), *MEMORY[0x1E0C9AE50]);
  if (Code)
  {
LABEL_38:
    ffp_Halt((uint64_t)Owner, Code);
    goto LABEL_39;
  }
  FigBytePumpGetFigBaseObject(Owner[5]);
  v26 = v25;
  v27 = *(uint64_t (**)(uint64_t, __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v27)
    goto LABEL_37;
  v28 = *MEMORY[0x1E0C9AE40];
  Code = v27(v26, CFSTR("FBP_CacheNonIFrames"), *MEMORY[0x1E0C9AE40]);
  if (Code)
    goto LABEL_38;
  FigBytePumpGetFigBaseObject(Owner[5]);
  v30 = v29;
  v31 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v31)
    goto LABEL_37;
  Code = v31(v30, CFSTR("FBP_NetworkReadsAreOpportunistic"), v24);
  if (Code)
    goto LABEL_38;
  FigBytePumpGetFigBaseObject(Owner[5]);
  v33 = v32;
  v34 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v34)
    goto LABEL_37;
  Code = v34(v33, CFSTR("FBP_NetworkReadsContributeToGlobalHistory"), v28);
  if (Code)
    goto LABEL_38;
  FigBytePumpGetFigBaseObject(Owner[5]);
  v36 = v35;
  v37 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (!v37)
    goto LABEL_37;
  Code = v37(v36, CFSTR("FBP_Scheduler"), v8);
  if (Code)
    goto LABEL_38;
  FigBytePumpGetFigBaseObject(Owner[5]);
  v39 = v38;
  v40 = *(uint64_t (**)(uint64_t, __CFString *, const __CFString *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
  if (!v40)
    goto LABEL_37;
  Code = v40(v39, CFSTR("FBP_PumpClientName"), CFSTR("SFPrefetcher"));
  if (Code)
    goto LABEL_38;
  FigBytePumpGetFigBaseObject(Owner[5]);
  v42 = v41;
  v43 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                              + 8)
                                                                                  + 48);
  if (!v43 || v43(v42, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &cf))
  {
    v44 = Owner[5];
    v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v45)
    {
      Code = v45(v44);
      if (!Code)
        goto LABEL_39;
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  if (Owner[3])
    ffp_AlternateListChanged((uint64_t)Owner, (CFDictionaryRef)cf);
  CFRelease(cf);
LABEL_39:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

double figFramePrefetcherInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void figFramePrefetcherFinalize(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  MEMORY[0x19402EA0C](sActivePrefetcherLock);
  if ((_QWORD *)sActivePrefetcher == a1)
    ffp_DeactivateActivePrefetcher();
  MEMORY[0x19402EA24](sActivePrefetcherLock);
  FigRetainProxyLockMutex();
  if (a1[5])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  FigRetainProxyInvalidate();
  v2 = (const void *)a1[6];
  if (v2)
  {
    CFRelease(v2);
    a1[6] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  v6 = (const void *)a1[21];
  if (v6)
    CFRelease(v6);
  a1[21] = 0;
  FigRetainProxyUnlockMutex();
  v7 = (const void *)a1[2];
  if (v7)
  {
    CFRelease(v7);
    a1[2] = 0;
  }
}

CFStringRef figFramePrefetcherCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigFramePrefetcher %p]"), a1);
}

CFStringRef figFramePrefetcherCopyDebugDesc(_QWORD *a1)
{
  const __CFAllocator *v2;
  CFIndex v3;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("[FigFramePrefetcher %p (%d) pump %p]"), a1, v3, a1[5]);
}

uint64_t ffp_NoteAlternateListChanged()
{
  uint64_t Owner;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, __CFString *, _QWORD, CFTypeRef *);
  CFTypeRef cf;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = FigRetainProxyGetOwner();
    cf = 0;
    FigBytePumpGetFigBaseObject(*(_QWORD *)(Owner + 40));
    v2 = v1;
    v3 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 8)
                                                                                   + 48);
    if (v3 && !v3(v2, CFSTR("FBP_AlternateInfo"), *MEMORY[0x1E0C9AE00], &cf) && *(_QWORD *)(Owner + 24))
      ffp_AlternateListChanged(Owner, (CFDictionaryRef)cf);
    if (cf)
      CFRelease(cf);
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t ffp_NoteDurationChanged()
{
  uint64_t Owner;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = FigRetainProxyGetOwner();
    ffp_EstablishDuration(Owner);
  }
  return FigRetainProxyUnlockMutex();
}

void ffp_AlternateListChanged(uint64_t a1, CFDictionaryRef theDict)
{
  const __CFArray *Value;
  const __CFArray *v4;
  const void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const void *, _QWORD, _QWORD, _QWORD, uint64_t, CMTimeRange *, CMTime *, _QWORD, int *, _QWORD, _QWORD);
  CMTimeEpoch epoch;
  int v9;
  const void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, CMTimeRange *, _QWORD, _QWORD, _QWORD, CMTime *, _QWORD);
  int v13;
  __int128 v14;
  CMTimeRange v15;
  int v16;
  CMTimeRange start;
  CMTime duration;
  uint64_t v19;
  CFRange v20;

  v19 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 48))
  {
    v5 = *(const void **)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(uint64_t (**)(uint64_t, const void *, _QWORD, _QWORD, _QWORD, uint64_t, CMTimeRange *, CMTime *, _QWORD, int *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v7)
    {
      v16 = 0;
      *(_OWORD *)&start.start.value = *MEMORY[0x1E0CA2E68];
      start.start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
      epoch = start.start.epoch;
      v14 = *(_OWORD *)&start.start.value;
      duration = start.start;
      v9 = v7(v6, v5, 0, 0, 0, 1, &start, &duration, 0, &v16, 0, 0);
      if (v9)
      {
        v13 = v9;
        goto LABEL_15;
      }
      v10 = *(const void **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v5;
      if (v5)
        CFRetain(v5);
      if (v10)
        CFRelease(v10);
      v11 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)&start.start.value = v14;
      start.start.epoch = epoch;
      duration = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
      CMTimeRangeMake(&v15, &start.start, &duration);
      v12 = *(uint64_t (**)(uint64_t, CMTimeRange *, _QWORD, _QWORD, _QWORD, CMTime *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
      if (v12)
      {
        start = v15;
        v13 = v12(v11, &start, 0, 0, 0, &duration, 0);
        ffp_EstablishDuration(a1);
        if (!v13)
          return;
        goto LABEL_16;
      }
    }
    v13 = -12782;
LABEL_15:
    ffp_EstablishDuration(a1);
LABEL_16:
    ffp_Halt(a1, v13);
    return;
  }
  Value = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("FBPAIK_FigAlternateArray"));
  if (Value)
  {
    v4 = Value;
    v20.length = CFArrayGetCount(Value);
    v20.location = 0;
    if (!CFArrayContainsValue(v4, v20, *(const void **)(a1 + 48)))
      ffp_Halt(a1, -19312);
  }
}

void ffp_EstablishDuration(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *);
  uint64_t v5;
  uint64_t v6;
  int Step;
  CFDictionaryRef dictionaryRepresentation;
  CMTime v9;

  if ((*(_BYTE *)(a1 + 68) & 1) == 0)
  {
    FigBytePumpGetFigBaseObject(*(_QWORD *)(a1 + 40));
    v3 = v2;
    v4 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
    if (v4)
    {
      v5 = *MEMORY[0x1E0C9AE00];
      dictionaryRepresentation = 0;
      if (!v4(v3, CFSTR("FBP_Duration"), v5, &dictionaryRepresentation))
      {
        CMTimeMakeFromDictionary(&v9, dictionaryRepresentation);
        *(CMTime *)(a1 + 56) = v9;
        if (*(_BYTE *)(a1 + 81))
        {
          *(_QWORD *)(a1 + 88) = 0;
          CMTimeMakeWithSeconds(&v9, 62.0, 2);
          *(CMTime *)(a1 + 128) = v9;
          v6 = MEMORY[0x1E0CA2E68];
          *(_OWORD *)(a1 + 104) = *MEMORY[0x1E0CA2E68];
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(v6 + 16);
          Step = ffp_TakeNextStep(a1);
          if (Step)
            ffp_Halt(a1, Step);
        }
        CFRelease(dictionaryRepresentation);
      }
    }
  }
}

void ffp_Halt(uint64_t a1, int a2)
{
  const __CFAllocator *v3;
  CFErrorRef v4;
  CFErrorRef v5;
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (a2)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFErrorDomain)*MEMORY[0x1E0C9AFC8], a2, 0);
    if (v4)
    {
      v5 = v4;
      Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v7 = Mutable;
      if (Mutable)
        CFDictionaryAddValue(Mutable, CFSTR("FFP_Finished_Err"), v5);
      CFRelease(v5);
    }
    else
    {
      v7 = 0;
    }
    if (dword_1EE2A3640)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    v7 = 0;
  }
  *(_BYTE *)(a1 + 81) = 0;
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v7)
    CFRelease(v7);
}

uint64_t ffp_TakeNextStep(uint64_t a1)
{
  uint64_t UpTimeNanoseconds;
  uint64_t v3;
  uint64_t v5;
  double v6;
  uint64_t (*v7)(uint64_t, CMTime *, uint64_t, CMTime *, uint64_t, int *, float);
  float v8;
  uint64_t v9;
  CMTime v10;
  CMTime v11;
  int v12;
  CMTime v13;
  CMTime rhs;
  CMTime v15;
  CMTime v16;
  CMTime lhs;

  memset(&v15, 0, sizeof(v15));
  CMTimeMake(&rhs, 10, 1000);
  lhs = *(CMTime *)(a1 + 104);
  CMTimeAdd(&v15, &lhs, &rhs);
  memset(&v13, 0, sizeof(v13));
  lhs = *(CMTime *)(a1 + 104);
  v16 = *(CMTime *)(a1 + 128);
  CMTimeAdd(&v13, &lhs, &v16);
  v12 = 0;
  UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (!*(_BYTE *)(a1 + 80) || *(_BYTE *)(a1 + 82))
    return 0;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = UpTimeNanoseconds;
    v6 = kFFPRunIntervals[*(_QWORD *)(a1 + 88)];
    v11 = v15;
    v10 = v13;
    v7 = *(uint64_t (**)(uint64_t, CMTime *, uint64_t, CMTime *, uint64_t, int *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                               + 80);
    if (v7)
    {
      v8 = v6;
      lhs = v11;
      v16 = v10;
      v9 = v7(v3, &lhs, v5 + 10000000, &v16, 1, &v12, v8);
      v3 = v9;
      if ((_DWORD)v9 == -12648)
        return v3;
      if (!(_DWORD)v9)
      {
        *(CMTime *)(a1 + 104) = v13;
        *(_BYTE *)(a1 + 83) = 0;
        ++*(_QWORD *)(a1 + 96);
        return v3;
      }
    }
    else
    {
      v3 = 4294954514;
    }
    ffp_Halt(a1, v3);
  }
  return v3;
}

uint64_t ffp_DeferredNoteMandatoryActivityLevelChange()
{
  uint64_t Owner;
  int v1;

  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = FigRetainProxyGetOwner();
    v1 = FigHTTPRequestPerformingMandatoryActivity();
    if (v1 != *(unsigned __int8 *)(Owner + 82))
    {
      *(_BYTE *)(Owner + 82) = v1;
      if (!v1)
      {
        if (*(_BYTE *)(Owner + 81))
          ffp_TakeNextStep(Owner);
      }
    }
  }
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

uint64_t ffp_BytePumpFn(int a1, int a2, OpaqueCMBlockBuffer *a3, char a4, int a5, int a6, int a7, __int128 *a8, uint64_t a9, uint64_t a10, uint64_t a11, CFErrorRef err)
{
  int Code;
  uint64_t Owner;
  _QWORD *v18;
  __int128 v19;
  size_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, __CFString *, __CFString *, size_t);

  if (err)
    Code = CFErrorGetCode(err);
  else
    Code = 0;
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = FigRetainProxyGetOwner();
    v18 = (_QWORD *)Owner;
    if (Code == -12648)
    {
      ffp_StartRun(Owner, *(_QWORD *)(Owner + 88) + 1);
    }
    else if (Code)
    {
      ffp_Halt(Owner, Code);
    }
    else
    {
      if ((a4 & 0x10) != 0 && (*((_BYTE *)a8 + 12) & 1) != 0)
      {
        v19 = *a8;
        *(_QWORD *)(Owner + 120) = *((_QWORD *)a8 + 2);
        *(_OWORD *)(Owner + 104) = v19;
        *(_BYTE *)(Owner + 83) = 1;
      }
      if ((a4 & 0x20) != 0 && *(_BYTE *)(Owner + 83))
      {
        if (*(_QWORD *)(Owner + 88) == 3)
          ++*(_QWORD *)(Owner + 160);
        if (ffp_TakeNextStep(Owner) == -12648)
          ffp_StartRun((uint64_t)v18, v18[11] + 1);
      }
      if (a3)
      {
        if (v18[11] == 3)
        {
          v20 = v18[19] + CMBlockBufferGetDataLength(a3);
          v18[19] = v20;
          v21 = v18[21];
          if (v21)
          {
            v22 = *(void (**)(uint64_t, __CFString *, __CFString *, size_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                 + 16)
                                                                                     + 40);
            if (v22)
              v22(v21, CFSTR("prefetcherStats"), CFSTR("IFrMem"), v20 >> 10);
          }
        }
      }
    }
  }
  return FigRetainProxyUnlockMutex();
}

CFStringRef FigTTMLCGColorCopyAsTTMLColorSyntax(CGColor *a1)
{
  CGColorSpace *ColorSpace;
  const CGFloat *Components;
  float32x4_t v4;
  float32_t v5;
  float v6;
  float v7;

  ColorSpace = CGColorGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB && CGColorGetNumberOfComponents(a1) == 4)
  {
    Components = CGColorGetComponents(a1);
    *(CGFloat *)v4.i64 = *Components;
    v4.f32[0] = *Components;
    v5 = Components[1];
    v6 = Components[2];
    v7 = Components[3];
    return FigTTMLCopyRGBAColorAsColorSyntax(v4, v5, v6, v7);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

CFStringRef FigTTMLCMTimeCopyAsClockTimeSyntax(CMTime *a1, int32_t a2, CMTime *a3)
{
  uint64_t v5;
  uint64_t Seconds;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const __CFAllocator *v21;
  CMTime v23;
  CMTime time;
  CMTime v25;

  memset(&v25, 0, sizeof(v25));
  time = *a3;
  CMTimeMultiply(&v25, &time, a2);
  time = *a1;
  CMTimeMultiplyByRatio(&v23, &time, v25.value, v25.timescale);
  v5 = 0;
  Seconds = (uint64_t)CMTimeGetSeconds(&v23);
  v7 = a2;
  v8 = 60 * a2;
  v9 = 1;
  do
  {
    v10 = v9;
    v11 = (v5 + Seconds) / v8;
    if (FigCFEqual())
    {
      v5 = 2 * (v11 / -10 + (v5 + Seconds) / v8);
    }
    else if (FigCFEqual())
    {
      if (v11 >= 0)
        v12 = (v5 + Seconds) / v8;
      else
        v12 = v11 + 1;
      v5 = 4 * (v11 / -20 + (v12 >> 1));
    }
    v9 = 0;
  }
  while ((v10 & 1) != 0);
  v13 = 3600 * a2;
  v14 = (v5 + Seconds) / v13;
  v15 = v5 + Seconds - (int)v14 * v13;
  v16 = v15 / v8;
  v17 = v15 - (int)(v15 / v8) * v8;
  v18 = v17 / v7;
  v19 = v17 % v7;
  v20 = FigCFEqual();
  v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v20)
    return CFStringCreateWithFormat(v21, 0, CFSTR("%02d:%02d:%02d:%02d"), v14, v16, v18, v19);
  else
    return CFStringCreateWithFormat(v21, 0, CFSTR("%02d:%02d:%02d;%02d"), v14, v16, v18, v19);
}

__CFString *FigTTMLCMTimeCopyAsOffsetTimeSyntax(CMTime *a1)
{
  __CFString *Mutable;
  double Seconds;
  double v4;
  CMTime time;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  time = *a1;
  Seconds = CMTimeGetSeconds(&time);
  CFStringAppendFormat(Mutable, 0, CFSTR("%lld"), (uint64_t)Seconds);
  v4 = vabdd_f64(Seconds, (double)(uint64_t)Seconds) * 100.0 + 0.5;
  if (v4)
    CFStringAppendFormat(Mutable, 0, CFSTR(".%02u"), v4);
  CFStringAppend(Mutable, CFSTR("s"));
  return Mutable;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Identifier(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/XML/1998/namespace id"), a1);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Position(const void *a1)
{
  CFTypeID v1;

  if (a1)
  {
    v1 = CFGetTypeID(a1);
    if (v1 == CFDictionaryGetTypeID())
      FigGeometryPointMakeFromDictionary();
  }
  return FigSignalErrorAt();
}

void figTTMLStringifyFigGeometryDimensionAndAppend(CFMutableStringRef theString, uint64_t a2, int a3)
{
  const __CFString *v5;

  if (vabdd_f64(*(double *)&a2, (double)(uint64_t)*(double *)&a2) <= 0.001)
    CFStringAppendFormat(theString, 0, CFSTR("%lld"), (uint64_t)*(double *)&a2);
  else
    CFStringAppendFormat(theString, 0, CFSTR("%f"), a2);
  if (a3 > 1701650463)
  {
    if (a3 == 1701650464)
    {
      v5 = CFSTR("em");
      goto LABEL_14;
    }
    if (a3 == 1886920736)
    {
      v5 = CFSTR("px");
      goto LABEL_14;
    }
  }
  else
  {
    if (a3 == 622862368)
    {
      v5 = CFSTR("%");
      goto LABEL_14;
    }
    if (a3 == 1667591276)
    {
      v5 = CFSTR("c");
LABEL_14:
      CFStringAppend(theString, v5);
    }
  }
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ClipOverflow(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  if (FigCFEqual())
    v4 = (const void **)&kFigTTML_AttributeValue_tts_overflow_hidden;
  else
    v4 = (const void **)&kFigTTML_AttributeValue_tts_overflow_visible;
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling overflow"), *v4);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ShowBackground(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_showBackground_whenActive;
LABEL_7:
        CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling showBackground"), *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_showBackground_always;
        goto LABEL_7;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Opacity(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  CFStringRef v5;
  uint64_t valuePtr;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, &valuePtr);
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%3.1f"), valuePtr);
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling opacity"), v5);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ForcedDisplay(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const __CFString *v4;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  if (FigCFEqual())
    v4 = CFSTR("true");
  else
    v4 = CFSTR("false");
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay"), v4);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_BackgroundColor(void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  CFStringRef v5;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CGColorGetTypeID())
    return FigSignalErrorAt();
  v5 = FigTTMLCGColorCopyAsTTMLColorSyntax((CGColor *)a1);
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling backgroundColor"), v5);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_WritingMode(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_writingMode_LeftToRightAndTopToBottom;
LABEL_11:
        CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling writingMode"), *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_writingMode_RightToLeftAndTopToBottom;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_writingMode_TopToBottomAndRightToLeft;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_writingMode_TopToBottomAndLeftToRight;
        goto LABEL_11;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAlign(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_displayAlign_before;
LABEL_9:
        CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling displayAlign"), *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_displayAlign_center;
        goto LABEL_9;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_displayAlign_after;
        goto LABEL_9;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Hidden(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  if (FigCFEqual())
    v4 = (const void **)&kFigTTML_AttributeValue_tts_display_none;
  else
    v4 = (const void **)&kFigTTML_AttributeValue_tts_display_auto;
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling display"), *v4);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Invisible(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  if (FigCFEqual())
    v4 = (const void **)&kFigTTML_AttributeValue_tts_visibility_hidden;
  else
    v4 = (const void **)&kFigTTML_AttributeValue_tts_visibility_visible;
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling visibility"), *v4);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Padding(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __CFString *Mutable;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E0CA33B0]);
  v5 = FigGeometryDimensionMakeFromDictionary();
  v7 = v6;
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E0CA33B8]);
  v8 = FigGeometryDimensionMakeFromDictionary();
  v10 = v9;
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E0CA33A8]);
  v11 = FigGeometryDimensionMakeFromDictionary();
  v13 = v12;
  CFDictionaryGetValue((CFDictionaryRef)a1, (const void *)*MEMORY[0x1E0CA33C0]);
  v14 = FigGeometryDimensionMakeFromDictionary();
  if ((v7 & 0x100000000) == 0)
    return FigSignalErrorAt();
  if ((v10 & 0x100000000) == 0)
    return FigSignalErrorAt();
  if ((v13 & 0x100000000) == 0)
    return FigSignalErrorAt();
  v16 = v15;
  if ((v15 & 0x100000000) == 0)
    return FigSignalErrorAt();
  v17 = v14;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v5, v7);
  CFStringAppend(Mutable, CFSTR(" "));
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v8, v10);
  CFStringAppend(Mutable, CFSTR(" "));
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v11, v13);
  CFStringAppend(Mutable, CFSTR(" "));
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v17, v16);
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling padding"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ZIndex(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  CFStringRef v5;
  unsigned int valuePtr;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  valuePtr = 0;
  CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d"), valuePtr);
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling zIndex"), v5);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_DisplayAspectRatio(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  unint64_t v4;
  CFStringRef v5;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  v4 = FigGeometryAspectRatioMakeFromDictionary();
  if (!FigGeometryAspectRatioIsValid())
    return FigSignalErrorAt();
  v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d %d"), v4, HIDWORD(v4));
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio"), v5);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_ActiveArea(const void *a1)
{
  CFTypeID v1;

  if (!a1)
    return FigSignalErrorAt();
  v1 = CFGetTypeID(a1);
  if (v1 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  FigGeometryRectMakeFromDictionary();
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_CellResolution(const void *a1)
{
  CFTypeID v1;

  if (a1)
  {
    v1 = CFGetTypeID(a1);
    if (v1 == CFDictionaryGetTypeID())
      FigGeometrySizeMakeFromDictionary();
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextColor(void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  CFStringRef v5;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CGColorGetTypeID())
    return FigSignalErrorAt();
  v5 = FigTTMLCGColorCopyAsTTMLColorSyntax((CGColor *)a1);
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling color"), v5);
  if (v5)
    CFRelease(v5);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontWeight(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  const void **v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA35B0]))
      {
        v5 = (const void **)&kFigTTML_AttributeValue_tts_fontWeight_normal;
LABEL_7:
        CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling fontWeight"), *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA35A8]))
      {
        v5 = (const void **)&kFigTTML_AttributeValue_tts_fontWeight_bold;
        goto LABEL_7;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontStyle(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  const void **v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3590]))
      {
        v5 = (const void **)&kFigTTML_AttributeValue_tts_fontStyle_normal;
LABEL_9:
        CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling fontStyle"), *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3588]))
      {
        v5 = (const void **)&kFigTTML_AttributeValue_tts_fontStyle_italic;
        goto LABEL_9;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3598]))
      {
        v5 = (const void **)&kFigTTML_AttributeValue_tts_fontStyle_oblique;
        goto LABEL_9;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_Decoration(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  int v5;
  CFMutableStringRef Mutable;
  __CFString *v7;
  uint64_t v8;
  int v9;
  int valuePtr;
  _DWORD v12[2];
  const __CFString *v13;
  int v14;
  const __CFString *v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  v5 = valuePtr;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = 0;
    v9 = 1;
    v12[0] = 1;
    v13 = CFSTR("underline");
    v14 = 2;
    v15 = CFSTR("lineThrough");
    v16 = 4;
    v17 = CFSTR("overline");
    do
    {
      if ((v12[v8] & v5) != 0)
      {
        if (!v9)
          CFStringAppend(v7, CFSTR(" "));
        CFStringAppend(v7, *(CFStringRef *)&v12[v8 + 2]);
        v9 = 0;
      }
      v8 += 4;
    }
    while (v8 != 12);
    if (!CFStringGetLength(v7))
      CFStringAppend(v7, CFSTR("none"));
    CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling textDecoration"), v7);
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
    CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling textDecoration"), 0);
  }
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextAlign(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_start;
LABEL_13:
        CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling textAlign"), *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_end;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_center;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_left;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_tts_textAlign_right;
        goto LABEL_13;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextCombine(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  const void **v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3608]))
      {
        v5 = (const void **)&kFigTTML_AttributeValue_tts_textCombine_none;
LABEL_7:
        CFDictionarySetValue(a2, CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine"), *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA35F8]))
      {
        v5 = (const void **)&kFigTTML_AttributeValue_tts_textCombine_all;
        goto LABEL_7;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_LinePadding(const void *a1, __CFDictionary *a2)
{
  __CFString *Mutable;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!a1
    || (v5 = CFGetTypeID(a1), v5 != CFDictionaryGetTypeID())
    || (v6 = FigGeometryDimensionMakeFromDictionary(), (v7 & 0x100000000) == 0))
  {
    v8 = FigSignalErrorAt();
    if (!Mutable)
      return v8;
    goto LABEL_5;
  }
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v6, v7);
  CFDictionarySetValue(a2, CFSTR("urn:ebu:tt:style linePadding"), Mutable);
  v8 = 0;
  if (Mutable)
LABEL_5:
    CFRelease(Mutable);
  return v8;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_LineHeight(const void *a1, __CFDictionary *a2)
{
  __CFString *Mutable;
  CFTypeID v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!a1
    || (v5 = CFGetTypeID(a1), v5 != CFDictionaryGetTypeID())
    || (v6 = FigGeometryDimensionMakeFromDictionary(), (v7 & 0x100000000) == 0))
  {
    v8 = FigSignalErrorAt();
    if (!Mutable)
      return v8;
    goto LABEL_5;
  }
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v6, v7);
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling lineHeight"), Mutable);
  v8 = 0;
  if (Mutable)
LABEL_5:
    CFRelease(Mutable);
  return v8;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_MultiRowAlign(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_ebutts_multiRowAlign_start;
LABEL_11:
        CFDictionarySetValue(a2, CFSTR("urn:ebu:tt:style multiRowAlign"), *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_ebutts_multiRowAlign_center;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_ebutts_multiRowAlign_end;
        goto LABEL_11;
      }
      if (FigCFEqual())
      {
        v4 = (const void **)&kFigTTML_AttributeValue_ebutts_multiRowAlign_auto;
        goto LABEL_11;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_TextOutline(const void *a1, __CFDictionary *a2)
{
  __CFString *Mutable;
  CFTypeID v5;
  uint64_t Thickness;
  int v7;
  int v8;
  CGColor *Color;
  const __CFString *v10;
  uint64_t v11;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (!a1 || (v5 = CFGetTypeID(a1), v5 != FigCaptionTextOutlineGetTypeID()))
  {
    v11 = FigSignalErrorAt();
    if (!Mutable)
      return v11;
    goto LABEL_11;
  }
  Thickness = FigCaptionTextOutlineGetThickness();
  v8 = v7;
  if (FigGeometryDimensionEqualToDimension())
  {
    CFStringAppend(Mutable, CFSTR("none"));
    CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling textOutline"), Mutable);
  }
  else
  {
    Color = (CGColor *)FigCaptionTextOutlineGetColor();
    if (Color)
    {
      v10 = FigTTMLCGColorCopyAsTTMLColorSyntax(Color);
      CFStringAppend(Mutable, v10);
      CFStringAppend(Mutable, CFSTR(" "));
    }
    else
    {
      v10 = 0;
    }
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, Thickness, v8);
    CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling textOutline"), Mutable);
    if (v10)
      CFRelease(v10);
  }
  v11 = 0;
  if (Mutable)
LABEL_11:
    CFRelease(Mutable);
  return v11;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_PreventLineWrapping(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const void **v4;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  if (FigCFEqual())
    v4 = (const void **)&kFigTTML_AttributeValue_tts_wrapOption_noWrap;
  else
    v4 = (const void **)&kFigTTML_AttributeValue_tts_wrapOption_wrap;
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling wrapOption"), *v4);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontFamily(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  __CFString *Mutable;
  uint64_t Count;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *Value;
  uint64_t v10;

  if (a1 && (v3 = CFGetTypeID(a1), v3 == FigCaptionFontFamilyNameListGetTypeID()))
  {
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    Count = FigCaptionFontFamilyNameListGetCount();
    if (Count)
    {
      v6 = Count;
      v7 = 0;
      while (1)
      {
        v8 = FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex();
        if ((_DWORD)v8)
          break;
        if (v7)
          CFStringAppend(Mutable, CFSTR(","));
        MEMORY[0x19402F294](&figTTMLDocumentWriter_getTTMLFontFamilyName_once, initMapFromFigCaptionFontFamilyToTTMLFontFamily);
        Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)sMapFromFigCaptionFontFamilyToTTMLFontFamily, 0);
        if (!Value)
        {
          v8 = FigSignalErrorAt();
          break;
        }
        CFStringAppend(Mutable, Value);
        if (v6 == ++v7)
          goto LABEL_10;
      }
      v10 = v8;
    }
    else
    {
LABEL_10:
      CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling fontFamily"), Mutable);
      v10 = 0;
    }
  }
  else
  {
    v10 = FigSignalErrorAt();
    Mutable = 0;
  }
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FontSize(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  __CFString *Mutable;
  int v5;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  FigGeometrySizeMakeFromDictionary();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v5 = FigGeometryDimensionEqualToDimension();
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
  if (!v5)
  {
    CFStringAppend(Mutable, CFSTR(" "));
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
  }
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling fontSize"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_WritingDirection(CFTypeRef cf, __CFDictionary *a2)
{
  CFTypeID v4;
  int v5;
  const void **v6;
  const void **v7;
  int valuePtr;

  if ((CFTypeRef)*MEMORY[0x1E0C9B0D0] == cf)
  {
    v7 = (const void **)&kFigTTML_AttributeValue_tts_unicodeBidi_normal;
    goto LABEL_12;
  }
  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
      v5 = valuePtr & 0xE;
      if ((valuePtr & 1) != 0)
        v6 = (const void **)&kFigTTML_AttributeValue_tts_direction_rtl;
      else
        v6 = (const void **)&kFigTTML_AttributeValue_tts_direction_ltr;
      CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling direction"), *v6);
      if (v5 == 2)
      {
        v7 = (const void **)&kFigTTML_AttributeValue_tts_unicodeBidi_bidiOverride;
      }
      else
      {
        if (v5)
          return 0;
        v7 = (const void **)&kFigTTML_AttributeValue_tts_unicodeBidi_embed;
      }
LABEL_12:
      CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml#styling unicodeBidi"), *v7);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterMapPropertyToAttribute_FillLineGap(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  const __CFString *v4;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFBooleanGetTypeID())
    return FigSignalErrorAt();
  if (FigCFEqual())
    v4 = CFSTR("true");
  else
    v4 = CFSTR("false");
  CFDictionarySetValue(a2, CFSTR("http://www.w3.org/ns/ttml/profile/imsc1#styling fillLineGap"), v4);
  return 0;
}

uint64_t FigTTMLDocumentWriterMapWidthAndHeightPropertiesToExtentAttributeAndSet(const void *a1, const void *a2, CMTime *a3, uint64_t a4)
{
  CMTime *v4;
  double Seconds;
  uint64_t v8;
  char v9;
  char v10;
  const void *InitialValue;
  CFMutableStringRef Mutable;
  CFTypeID v13;
  CFTypeID v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  CFDictionaryRef v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  CFTypeRef *v29;
  CMTime *v31;
  const __CFAllocator *alloc;
  __CFString *v34;
  CMTime time;
  CFTypeRef v36[3];
  double v37;
  double v38;
  _QWORD v39[2];
  CFTypeRef cf;
  CFTypeRef v41;
  uint64_t v42;

  v4 = a3;
  v42 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v41 = 0;
  v39[0] = 0;
  v39[1] = 0;
  v37 = 0.0;
  v38 = 0.0;
  time = *a3;
  Seconds = CMTimeGetSeconds(&time);
  v8 = 0;
  v36[1] = a1;
  v36[2] = a2;
  v9 = 1;
  do
  {
    v10 = v9;
    InitialValue = (const void *)FigCaptionDynamicStyleGetInitialValue();
    if (InitialValue)
      InitialValue = CFRetain(InitialValue);
    v9 = 0;
    *(&cf + v8) = InitialValue;
    v8 = 1;
  }
  while ((v10 & 1) != 0);
  Mutable = 0;
  if (fabs(Seconds) == INFINITY)
  {
LABEL_37:
    v20 = 0;
    goto LABEL_38;
  }
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v31 = v4;
  while (cf)
  {
    v13 = CFGetTypeID(cf);
    if (v13 != CFDictionaryGetTypeID())
      break;
    if (!v41)
      break;
    v14 = CFGetTypeID(v41);
    if (v14 != CFDictionaryGetTypeID())
      break;
    if (Mutable)
      CFRelease(Mutable);
    Mutable = CFStringCreateMutable(alloc, 0);
    v15 = FigGeometryDimensionMakeFromDictionary();
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v15, v16);
    CFStringAppend(Mutable, CFSTR(" "));
    v17 = FigGeometryDimensionMakeFromDictionary();
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, v17, v18);
    if ((v4->flags & 0x1D) != 1)
    {
      v36[0] = 0;
LABEL_23:
      FigTTMLDocumentWriterElementSetAttribute(a4, CFSTR("http://www.w3.org/ns/ttml#styling extent"), Mutable);
      goto LABEL_24;
    }
    time = *v4;
    v19 = Seconds - CMTimeGetSeconds(&time);
    v36[0] = 0;
    if (v19 == 0.0)
      goto LABEL_23;
    v20 = FigTTMLDocumentWriterElementCreate((uint64_t)alloc, 1, a4, (uint64_t *)v36);
    if (!(_DWORD)v20)
    {
      FigTTMLDocumentWriterElementSetAttribute((uint64_t)v36[0], CFSTR("http://www.w3.org/ns/ttml#styling extent"), Mutable);
      CMTimeMakeWithSeconds(&time, v19, 1000);
      v21 = CMTimeCopyAsDictionary(&time, alloc);
      FigTTMLDocumentWriterElementSetAttribute((uint64_t)v36[0], CFSTR("begin"), v21);
      FigTTMLDocumentWriterElementAddChildElement(a4, v36[0]);
      if (v21)
        CFRelease(v21);
    }
    if (v36[0])
      CFRelease(v36[0]);
    if ((_DWORD)v20)
      goto LABEL_38;
LABEL_24:
    v34 = Mutable;
    v22 = 0;
    LOBYTE(time.value) = v37 <= v38;
    BYTE1(time.value) = v38 <= v37;
    v23 = 1;
    do
    {
      v24 = v23;
      if (*((_BYTE *)&time.value + v22))
      {
        v25 = v39[v22] + 1;
        if (v25 == FigCaptionDynamicStyleGetKeyFrameCount())
        {
          *(&v37 + v22) = INFINITY;
        }
        else
        {
          v39[v22] = v25;
          FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
        }
      }
      v23 = 0;
      v22 = 1;
    }
    while ((v24 & 1) != 0);
    v26 = 0;
    LOBYTE(v36[0]) = v37 <= v38;
    BYTE1(v36[0]) = v38 <= v37;
    v27 = 1;
    Mutable = v34;
    do
    {
      v28 = v27;
      if (*((_BYTE *)v36 + v26))
      {
        v29 = &cf + v26;
        if (*v29)
        {
          CFRelease(*v29);
          *v29 = 0;
        }
        FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
        Seconds = *(&v37 + v26);
      }
      v27 = 0;
      v26 = 1;
    }
    while ((v28 & 1) != 0);
    v4 = v31;
    if (fabs(Seconds) == INFINITY)
      goto LABEL_37;
  }
  v20 = FigSignalErrorAt();
LABEL_38:
  if (cf)
    CFRelease(cf);
  if (v41)
    CFRelease(v41);
  if (Mutable)
    CFRelease(Mutable);
  return v20;
}

void initMapFromFigCaptionFontFamilyToTTMLFontFamily()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3290], CFSTR("default"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32D0], CFSTR("serif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32C8], CFSTR("sansSerif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32A0], CFSTR("monospace"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32C0], CFSTR("proportionalSerif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32B8], CFSTR("proportionalSansSerif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32B0], CFSTR("monospaceSerif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32A8], CFSTR("monospaceSansSerif"));
  sMapFromFigCaptionFontFamilyToTTMLFontFamily = (uint64_t)Mutable;
}

uint64_t FigSubtitleStringConformerCopyConformedStringsForSubtitleSample(unsigned int *a1, __CFArray **a2)
{
  uint64_t v3;
  NSObject *v4;
  CGFloat v5;
  double v6;
  double v7;
  uint64_t v8;
  const __CFArray *v9;
  const __CFArray *v10;
  uint64_t Count;
  __CFArray *Mutable;
  uint64_t v13;
  uint64_t (*v14)(const __CFAttributedString *, int, __CFAttributedString **, double, double);
  CFIndex v15;
  const __CFAttributedString *ValueAtIndex;
  CGSize v17;
  CFTypeRef v18;
  __int128 v19;
  __CFDictionary *MutableCopy;
  const __CFArray *v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t (*v25)(const __CFAttributedString *, int, __CFAttributedString **, double, double);
  uint64_t Length;
  CFIndex v27;
  __CFArray *v28;
  uint64_t v29;
  const __CFArray *v30;
  uint64_t v31;
  const __CFNumber *AttributeAndLongestEffectiveRange;
  const __CFDictionary *v33;
  const __CFNumber *v34;
  uint64_t v35;
  __CFArray **v37;
  const __CFAllocator *allocator;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  NSObject *v44;
  int v45;
  unsigned int v46;
  const __CFDictionary *theDict;
  const __CFAttributedString *v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  void *value;
  CFTypeRef cf;
  CFRange v54;
  double v55;
  double v56;
  double v57;
  double v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  char v62;
  __int16 v63;
  char v64;
  uint64_t v65;
  int v66;
  CFRange longestEffectiveRange;
  CGSize v68;
  CFTypeRef v69;
  CFDictionaryRef v70;
  uint64_t valuePtr;
  CGRect rect;
  CFRange v73;
  CFRange v74;

  v3 = *a1;
  v39 = *(_QWORD *)(a1 + 1);
  v4 = *(NSObject **)(a1 + 3);
  theDict = *(const __CFDictionary **)(a1 + 5);
  v45 = *((unsigned __int8 *)a1 + 29);
  v46 = *((unsigned __int8 *)a1 + 28);
  v50 = *((double *)a1 + 5);
  v51 = *((double *)a1 + 4);
  v5 = *((double *)a1 + 7);
  v49 = *((double *)a1 + 6);
  v6 = *((double *)a1 + 8);
  v7 = *((double *)a1 + 9);
  v8 = *((unsigned __int8 *)a1 + 80);
  if (((_DWORD)v3 || !v39) && ((_DWORD)v3 != 1 || !v4))
    return FigSignalErrorAt();
  v9 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("SubtitleContent"));
  v10 = v9;
  if (v9)
    Count = CFArrayGetCount(v9);
  else
    Count = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  LODWORD(v54.location) = 0;
  v44 = v4;
  FigCFDictionaryGetInt32IfPresent();
  v13 = FigSignalErrorAt();
  v14 = 0;
  if ((_DWORD)v13)
    return v13;
  if (Count >= 1)
  {
    v37 = a2;
    v15 = 0;
    v42 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v43 = *MEMORY[0x1E0C9D628];
    v40 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v41 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    while (1)
    {
      ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v10, v15);
      value = 0;
      if (!(_DWORD)v8)
        break;
LABEL_32:
      v35 = v14(ValueAtIndex, v8, (__CFAttributedString **)&value, v6, v7);
      if (!(_DWORD)v35)
        CFArrayAppendValue(Mutable, value);
      if (value)
        CFRelease(value);
      if (Count == ++v15)
      {
        a2 = v37;
        goto LABEL_40;
      }
    }
    v17 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    rect.size = v17;
    v70 = 0;
    valuePtr = 0;
    v69 = 0;
    longestEffectiveRange = (CFRange)rect.origin;
    v68 = v17;
    if ((_DWORD)v3)
    {
      FigCaptionRendererSessionClear(v44, v43, v42, v41, v40);
      FigCaptionRendererSessionSetLayoutContext_Viewport((uint64_t)v44, 0.0, 0.0, v6, v7);
      FigCaptionRendererSessionSetLayoutContext_VideoSize(v44, v6, v7);
      FigCaptionRendererSessionSetLayoutContext_Gravity(v44, 0);
      FigCaptionRendererSessionSetLayoutContext_Overscan(v44, 0);
      FigSubtitleSampleCreatePropertyList(theDict, v46, v45, &v70, v51, v50, v49, v5);
      v54.location = 0;
      FigCaptionRendererLayoutContextCreate(&v54);
      if (!v54.location)
      {
        v23 = 0;
LABEL_26:
        if (v69)
          CFRelease(v69);
        if (v70)
          CFRelease(v70);
        if (v23)
          CFRelease(v23);
        goto LABEL_32;
      }
      FigCaptionRendererSessionSetCaptionSample(v44, (uint64_t)v70, v54.location);
      FigCaptionRendererSessionUpdateLegibleOutputContext(v44, v54.location);
      cf = 0;
      FigCaptionRendererLayoutContextGetSubtitleSample(v54.location, &cf);
      if (cf)
        v18 = CFRetain(cf);
      else
        v18 = 0;
      v69 = v18;
      if (v54.location)
        CFRelease((CFTypeRef)v54.location);
    }
    else
    {
      v64 = 0;
      v63 = 0;
      v19 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      v59 = *MEMORY[0x1E0C9BAA8];
      v60 = v19;
      v61 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
      MutableCopy = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
      FigSubtitleSampleInsertInfoForRenderer(MutableCopy, v51, v50, v49, v5, 0.0, 0.0, v6, v7 * 0.15, v46, v45);
      v54.location = 0;
      v54.length = 0;
      v55 = v6;
      v56 = v7;
      v57 = v6;
      v58 = v7;
      v62 = 0;
      v65 = 0x3FF0000000000000;
      v66 = 1;
      FigSubtitleRendererLayout(v39, (uint64_t)MutableCopy, &v54, (uint64_t)&longestEffectiveRange, (uint64_t)&v69);
      if (MutableCopy)
        CFRelease(MutableCopy);
      v18 = v69;
    }
    v21 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v18, CFSTR("SubtitleContent"));
    v22 = CFArrayGetValueAtIndex(v21, v15);
    v23 = v22;
    if (v22)
    {
      v48 = ValueAtIndex;
      v24 = v8;
      v25 = v14;
      CFRetain(v22);
      Length = CFAttributedStringGetLength((CFAttributedStringRef)v23);
      if (Length > 0)
      {
        v27 = Length;
        v54.location = 0;
        v54.length = 0;
        longestEffectiveRange.location = 0;
        longestEffectiveRange.length = 0;
        v73.location = 0;
        v73.length = Length;
        v28 = Mutable;
        v29 = Count;
        v30 = v10;
        v31 = v3;
        AttributeAndLongestEffectiveRange = (const __CFNumber *)CFAttributedStringGetAttributeAndLongestEffectiveRange((CFAttributedStringRef)v23, 0, CFSTR("kFigSubtitleRenderer_FontSizeToUse"), v73, &v54);
        v74.location = 0;
        v74.length = v27;
        v33 = (const __CFDictionary *)CFAttributedStringGetAttributeAndLongestEffectiveRange((CFAttributedStringRef)v23, 0, CFSTR("kFigSubtitleRenderer_SuggestTextLayout"), v74, &longestEffectiveRange);
        v34 = AttributeAndLongestEffectiveRange;
        v3 = v31;
        v10 = v30;
        Count = v29;
        Mutable = v28;
        CFNumberGetValue(v34, kCFNumberCGFloatType, &valuePtr);
        CGRectMakeWithDictionaryRepresentation(v33, &rect);
      }
      v14 = v25;
      v8 = v24;
      ValueAtIndex = v48;
    }
    goto LABEL_26;
  }
  v35 = 0;
LABEL_40:
  *a2 = Mutable;
  return v35;
}

uint64_t sbtlstringconformer_tx3g_createConformedAttributedStringForAttributedString(const __CFAttributedString *a1, int a2, __CFAttributedString **a3, double a4, double a5)
{
  __CFAttributedString *Mutable;
  const __CFString *String;
  CFIndex v12;
  const __CFString *v13;
  const void *v14;
  const __CFString *v15;
  const __CFDictionary *Attributes;
  const void *Value;
  BOOL v18;
  const void *v19;
  const void *v20;
  BOOL v21;
  const void *v22;
  CFIndex Length;
  CFIndex v24;
  __CFDictionary *FontFamilyAttributes;
  uint64_t v26;
  uint64_t v27;
  CFRange effectiveRange;
  CFRange v30;
  CFRange v31;
  CFRange v32;
  CFRange v33;

  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  String = CFAttributedStringGetString(a1);
  v30.location = 0;
  v30.length = 0;
  CFAttributedStringReplaceString(Mutable, v30, String);
  if (CFAttributedStringGetLength(a1) >= 1)
  {
    v12 = 0;
    v13 = (const __CFString *)*MEMORY[0x1E0CA2A50];
    v14 = (const void *)*MEMORY[0x1E0C9AE40];
    v15 = (const __CFString *)*MEMORY[0x1E0CA2B38];
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      Attributes = CFAttributedStringGetAttributes(a1, v12, &effectiveRange);
      sbtlstringconformer_addColorAttributesToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      Value = CFDictionaryGetValue(Attributes, v13);
      if (Value)
        v18 = 0;
      else
        v18 = a2 == 0;
      if (v18)
        v19 = v14;
      else
        v19 = Value;
      if (v19)
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v13, v19);
      v20 = CFDictionaryGetValue(Attributes, v15);
      if (v20)
        v21 = 0;
      else
        v21 = a2 == 0;
      if (v21)
        v22 = v14;
      else
        v22 = v20;
      if (v22)
        CFAttributedStringSetAttribute(Mutable, effectiveRange, v15, v22);
      sbtlstringconformer_addCharacterEdgeStyleAttributeToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      FigCFDictionaryGetInt64IfPresent();
      if (!a2)
        sbtlstringconformer_addPositioningAttributesToString(a4, a5);
      v12 = effectiveRange.length + effectiveRange.location;
    }
    while (v12 < CFAttributedStringGetLength(a1));
  }
  Length = CFAttributedStringGetLength(a1);
  if (a2)
    goto LABEL_27;
  v24 = Length;
  v31.location = 0;
  v31.length = Length;
  CFAttributedStringSetAttribute(Mutable, v31, (CFStringRef)*MEMORY[0x1E0CA2958], (CFTypeRef)*MEMORY[0x1E0CA2938]);
  FontFamilyAttributes = sbtlstringconformer_createFontFamilyAttributes(0, 0, 0);
  v32.location = 0;
  v32.length = v24;
  CFAttributedStringSetAttributes(Mutable, v32, FontFamilyAttributes, 0);
  if (FontFamilyAttributes)
    CFRelease(FontFamilyAttributes);
  v26 = FigCFAttributedStringSetDouble();
  if ((_DWORD)v26
    || (v33.location = 0,
        v33.length = v24,
        CFAttributedStringSetAttribute(Mutable, v33, (CFStringRef)*MEMORY[0x1E0CA2978], (CFTypeRef)*MEMORY[0x1E0C9AE50]),
        v26 = FigCFAttributedStringSetDouble(),
        (_DWORD)v26))
  {
    v27 = v26;
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
LABEL_27:
    v27 = 0;
    *a3 = Mutable;
  }
  return v27;
}

uint64_t sbtlstringconformer_wvtt_createConformedAttributedStringForAttributedString(const __CFAttributedString *a1, int a2, __CFAttributedString **a3, double a4, double a5)
{
  __CFAttributedString *Mutable;
  const __CFString *String;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  const void *v16;
  const void *v17;
  const __CFDictionary *Attributes;
  uint64_t i;
  const __CFString *v20;
  const void *Value;
  const __CFString *v22;
  const void *v23;
  __CFDictionary *FontFamilyAttributes;
  uint64_t v25;
  uint64_t v26;
  CFRange effectiveRange;
  _QWORD v30[11];
  CFRange v31;

  v30[9] = *MEMORY[0x1E0C80C00];
  Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFAttributedStringGetLength(a1);
  String = CFAttributedStringGetString(a1);
  v31.location = 0;
  v31.length = 0;
  CFAttributedStringReplaceString(Mutable, v31, String);
  if (!a2)
    sbtlstringconformer_addPositioningAttributesToString(a4, a5);
  v11 = *MEMORY[0x1E0CA2A50];
  v30[0] = *MEMORY[0x1E0CA2978];
  v30[1] = v11;
  v12 = *MEMORY[0x1E0CA2AD0];
  v30[2] = *MEMORY[0x1E0CA2B38];
  v30[3] = v12;
  v13 = *MEMORY[0x1E0CA2958];
  v30[4] = *MEMORY[0x1E0CA2B40];
  v30[5] = v13;
  v14 = *MEMORY[0x1E0CA2A88];
  v30[6] = *MEMORY[0x1E0CA2B20];
  v30[7] = v14;
  v30[8] = *MEMORY[0x1E0CA2B48];
  if (CFAttributedStringGetLength(a1) >= 1)
  {
    v15 = 0;
    v16 = (const void *)*MEMORY[0x1E0CA2A00];
    v17 = (const void *)*MEMORY[0x1E0CA2A28];
    do
    {
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      Attributes = CFAttributedStringGetAttributes(a1, v15, &effectiveRange);
      for (i = 0; i != 9; ++i)
      {
        v20 = (const __CFString *)v30[i];
        Value = CFDictionaryGetValue(Attributes, v20);
        if (Value)
          CFAttributedStringSetAttribute(Mutable, effectiveRange, v20, Value);
      }
      sbtlstringconformer_addColorAttributesToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      v22 = (const __CFString *)CFDictionaryGetValue(Attributes, v16);
      v23 = CFDictionaryGetValue(Attributes, v17);
      FontFamilyAttributes = sbtlstringconformer_createFontFamilyAttributes(v22, v23, a2);
      CFAttributedStringSetAttributes(Mutable, effectiveRange, FontFamilyAttributes, 0);
      if (FontFamilyAttributes)
        CFRelease(FontFamilyAttributes);
      sbtlstringconformer_addCharacterEdgeStyleAttributeToStringBasedOnContentAndMAXSettings(Mutable, Attributes, effectiveRange.location, effectiveRange.length, a2);
      v15 = effectiveRange.length + effectiveRange.location;
    }
    while (v15 < CFAttributedStringGetLength(a1));
  }
  if (!a2 && (v25 = FigCFAttributedStringSetDouble(), (_DWORD)v25))
  {
    v26 = v25;
    if (Mutable)
      CFRelease(Mutable);
  }
  else
  {
    v26 = 0;
    *a3 = Mutable;
  }
  return v26;
}

void sbtlstringconformer_addColorAttributesToStringBasedOnContentAndMAXSettings(__CFAttributedString *a1, const __CFDictionary *a2, CFIndex a3, CFIndex a4, int a5)
{
  const void *WhiteARGBColorArray;
  const __CFString *v11;
  const void *Value;
  const void *ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity;
  const void *v14;
  const void *BlackARGBColorArray;
  const __CFString *v16;
  const void *v17;
  const void *ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity;
  const void *v19;
  const void *ClearARGBColorArray;
  const __CFString *v21;
  const void *v22;
  const void *ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity;
  const void *v24;
  CFRange v25;
  CFRange v26;
  CFRange v27;

  WhiteARGBColorArray = (const void *)FigTextMarkupCreateWhiteARGBColorArray();
  v11 = (const __CFString *)*MEMORY[0x1E0CA2A20];
  Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA2A20]);
  if (a5)
  {
    if (!Value)
      goto LABEL_7;
    ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity = CFRetain(Value);
  }
  else
  {
    ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity(Value, WhiteARGBColorArray);
  }
  v14 = ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity;
  if (ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity)
  {
    v25.location = a3;
    v25.length = a4;
    CFAttributedStringSetAttribute(a1, v25, v11, ResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity);
    CFRelease(v14);
  }
LABEL_7:
  CFRelease(WhiteARGBColorArray);
  BlackARGBColorArray = (const void *)FigTextMarkupCreateBlackARGBColorArray();
  v16 = (const __CFString *)*MEMORY[0x1E0CA2968];
  v17 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA2968]);
  if (a5)
  {
    if (!v17)
      goto LABEL_13;
    ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity = CFRetain(v17);
  }
  else
  {
    ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedWindowARGBColorArrayUsingMAXColorAndOpacity(v17, BlackARGBColorArray);
  }
  v19 = ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity;
  if (ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity)
  {
    v26.location = a3;
    v26.length = a4;
    CFAttributedStringSetAttribute(a1, v26, v16, ResolvedWindowARGBColorArrayUsingMAXColorAndOpacity);
    CFRelease(v19);
  }
LABEL_13:
  CFRelease(BlackARGBColorArray);
  ClearARGBColorArray = (const void *)FigTextMarkupCreateClearARGBColorArray();
  v21 = (const __CFString *)*MEMORY[0x1E0CA29B8];
  v22 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E0CA29B8]);
  if (a5)
  {
    if (!v22)
      goto LABEL_19;
    ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity = CFRetain(v22);
  }
  else
  {
    ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity = FigStringConformerCreateResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity(v22, ClearARGBColorArray);
  }
  v24 = ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity;
  if (ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity)
  {
    v27.location = a3;
    v27.length = a4;
    CFAttributedStringSetAttribute(a1, v27, v21, ResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity);
    CFRelease(v24);
  }
LABEL_19:
  CFRelease(ClearARGBColorArray);
}

void sbtlstringconformer_addCharacterEdgeStyleAttributeToStringBasedOnContentAndMAXSettings(__CFAttributedString *a1, CFDictionaryRef theDict, CFIndex a3, CFIndex a4, int a5)
{
  const __CFString *v9;
  const void *Value;
  MACaptionAppearanceTextEdgeStyle TextEdgeStyle;
  MACaptionAppearanceBehavior behavior;
  CFRange v13;

  v9 = (const __CFString *)*MEMORY[0x1E0CA29C0];
  Value = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CA29C0]);
  if (a5)
    goto LABEL_9;
  behavior = kMACaptionAppearanceBehaviorUseContentIfAvailable;
  TextEdgeStyle = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &behavior);
  if (behavior == kMACaptionAppearanceBehaviorUseValue)
  {
LABEL_5:
    Value = (const void *)FigStringConformerEdgeStyleForMediaAccessibilityEdgeStyle(TextEdgeStyle);
    goto LABEL_7;
  }
  if (behavior == kMACaptionAppearanceBehaviorUseContentIfAvailable)
  {
    if (Value)
      goto LABEL_7;
    goto LABEL_5;
  }
  Value = 0;
LABEL_7:
  if (!Value)
    Value = (const void *)*MEMORY[0x1E0CA2B70];
LABEL_9:
  if (Value)
  {
    v13.location = a3;
    v13.length = a4;
    CFAttributedStringSetAttribute(a1, v13, v9, Value);
  }
}

void sbtlstringconformer_addPositioningAttributesToString(double a1, double a2)
{
  if (a1 > 0.0
    && a2 > 0.0
    && !FigCFAttributedStringSetDouble()
    && !FigCFAttributedStringSetDouble())
  {
    FigCFAttributedStringSetDouble();
  }
}

__CFDictionary *sbtlstringconformer_createFontFamilyAttributes(const __CFString *a1, const void *a2, int a3)
{
  __CFDictionary *Mutable;
  const __CFString *v7;
  const __CTFontDescriptor *v8;
  const __CTFontDescriptor *v9;
  CFTypeRef v10;
  const __CTFontDescriptor *v11;
  const __CTFontDescriptor *v12;
  MACaptionAppearanceFontStyle fontStyle;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!a3)
  {
    if (a1 || !a2)
    {
      fontStyle = kMACaptionAppearanceFontStyleMonospacedWithSerif;
      v12 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, (MACaptionAppearanceBehavior *)&fontStyle, kMACaptionAppearanceFontStyleDefault);
      if (fontStyle == kMACaptionAppearanceFontStyleDefault
        || (v10 = 0, fontStyle == kMACaptionAppearanceFontStyleMonospacedWithSerif)
        && (!a1 || (v10 = CFRetain(a1)) == 0))
      {
        v10 = CTFontDescriptorCopyAttribute(v12, (CFStringRef)*MEMORY[0x1E0CA8300]);
      }
      if (!v12)
      {
LABEL_17:
        if (v10)
        {
LABEL_20:
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA2A00], v10);
          CFRelease(v10);
          return Mutable;
        }
        goto LABEL_18;
      }
      v11 = v12;
    }
    else
    {
      fontStyle = kMACaptionAppearanceFontStyleDefault;
      if (!FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle()
        || (v8 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, fontStyle)) == 0)
      {
LABEL_18:
        v7 = CFSTR("Helvetica");
        goto LABEL_19;
      }
      v9 = v8;
      v10 = CTFontDescriptorCopyAttribute(v8, (CFStringRef)*MEMORY[0x1E0CA8300]);
      v11 = v9;
    }
    CFRelease(v11);
    goto LABEL_17;
  }
  if (!a1)
    goto LABEL_21;
  v7 = a1;
LABEL_19:
  v10 = CFRetain(v7);
  if (v10)
    goto LABEL_20;
LABEL_21:
  if (a2)
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA2A28], a2);
  return Mutable;
}

int64_t FigWebVTTCaptionGroupConverterFromSampleBufferCreateRemote(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  return remoteXPCFigCaptionGroupConverter_CreateConverter(a1, a2, 2004251764, a3);
}

int64_t remoteXPCFigCaptionGroupConverter_CreateConverter(_OWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int64_t int64;
  uint64_t v7;
  uint64_t uint64;
  _QWORD *DerivedStorage;
  _QWORD *v10;
  uint64_t v11;

  if (remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_gFCGConverterRemoteClientSetupOnce != -1)
    dispatch_once(&remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_gFCGConverterRemoteClientSetupOnce, &__block_literal_global_126);
  int64 = remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_err;
  if (!remoteXPCFigCaptionGroupConverterClient_EnsureClientEstablished_err)
  {
    FigCaptionGroupConverterFromSampleBufferGetClassID();
    v7 = CMDerivedObjectCreate();
    if (!(_DWORD)v7)
    {
      v7 = FigXPCCreateBasicMessage();
      if (!(_DWORD)v7)
      {
        CMBaseObjectGetDerivedStorage();
        v7 = FigXPCRemoteClientCopyMemoryOrigin();
        if (!(_DWORD)v7)
        {
          v7 = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!(_DWORD)v7)
          {
            int64 = xpc_dictionary_get_int64(0, (const char *)*MEMORY[0x1E0CA3690]);
            if ((_DWORD)int64)
              goto LABEL_14;
            uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
            DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
            if (!DerivedStorage)
            {
              v11 = FigSignalErrorAt();
LABEL_12:
              int64 = v11;
              if (!(_DWORD)v11)
                *a4 = 0;
              goto LABEL_14;
            }
            v10 = DerivedStorage;
            *DerivedStorage = uint64;
            DerivedStorage[8] = FigSemaphoreCreate();
            *(_OWORD *)(v10 + 3) = *a1;
            v7 = FigXPCRemoteClientAssociateObject();
            if (!(_DWORD)v7)
            {
              v10[5] = 0;
              v10[6] = 0;
              v10[7] = 0;
              v11 = FigCaptionSerializerCreate();
              goto LABEL_12;
            }
          }
        }
      }
    }
    int64 = v7;
  }
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  return int64;
}

int64_t FigTX3GCaptionGroupConverterFromSampleBufferCreateRemote(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  return remoteXPCFigCaptionGroupConverter_CreateConverter(a1, a2, 1954034535, a3);
}

uint64_t remoteXPCFigCaptionGroupConverterClient_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 9) = 1;
  return result;
}

uint64_t remoteXPCFigCaptionGroupConverterClient_HandleServerMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294951138;
}

uint64_t remoteXPCFigCaptionGroupConverter_Finalize()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = DerivedStorage;
  if (DerivedStorage)
  {
    if (!*(_BYTE *)(DerivedStorage + 8))
    {
      *(_BYTE *)(DerivedStorage + 8) = 1;
      if (!FigXPCRemoteClientDisassociateObject()
        && (*(_BYTE *)(v1 + 9)
         || !FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessage()))
      {
        *(_QWORD *)v1 = 0;
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  FigXPCRelease();
  v2 = *(const void **)(v1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(v1 + 40) = 0;
  }
  v3 = *(const void **)(v1 + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v1 + 48) = 0;
  }
  v4 = *(const void **)(v1 + 56);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(v1 + 56) = 0;
  }
  v5 = *(const void **)(v1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(v1 + 16) = 0;
  }
  return FigSemaphoreDestroy();
}

__CFString *remoteXPCFigCaptionGroupConverter_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 9))
    v6 = " SERVER DIED";
  else
    v6 = "";
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionGroupConverterRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>"), a1, v5, *(_QWORD *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteXPCFigCaptionGroupConverter_CopyProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteXPCFigCaptionGroupConverter_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

int64_t remoteXPCFigCaptionGroupConverter_AddSampleBuffer(uint64_t a1)
{
  uint64_t ObjectID;
  int64_t int64;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v4);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  if (!CMBaseObjectGetDerivedStorage())
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    int64 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCMessageAddCMSampleBuffer();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  int64 = xpc_dictionary_get_int64(0, (const char *)*MEMORY[0x1E0CA3690]);
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return int64;
}

uint64_t remoteXPCFigCaptionGroupConverter_Finish(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  ObjectID = remoteXPCMutableComposition_GetObjectID(a1, v4);
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  if (!CMBaseObjectGetDerivedStorage())
  {
    ObjectID = FigSignalErrorAt();
LABEL_9:
    v2 = ObjectID;
    goto LABEL_7;
  }
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  ObjectID = FigXPCRemoteClientSendSyncMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_9;
  v2 = FigSemaphoreWaitRelative();
  if ((_DWORD)v2)
    FigSignalErrorAt();
LABEL_7:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigSampleBufferProcessorCreateForTemporalMetadataFilter(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  CFTypeRef v7;

  if (!a3)
    return FigSignalErrorAt();
  FigSampleBufferProcessorGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a2)
      v7 = CFRetain(a2);
    else
      v7 = 0;
    v5 = 0;
    *(_QWORD *)(DerivedStorage + 56) = v7;
    *(_BYTE *)(DerivedStorage + 80) = 1;
    *a3 = 0;
  }
  return v5;
}

uint64_t sbp_tmf_invalidate()
{
  *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16) = 0;
  return 0;
}

void sbp_tmf_finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 64);
  if (v5)
    CFRelease(v5);
  v6 = *(const void **)(DerivedStorage + 72);
  if (v6)
    CFRelease(v6);
}

__CFString *sbp_tmf_copyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferProcessor_TemporalMetadataFilter %p>"), a1);
  return Mutable;
}

uint64_t sbp_tmf_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  _QWORD *v7;
  const void *v8;
  CFTypeRef v9;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4 || !a2)
    return FigSignalErrorAt();
  v7 = (_QWORD *)DerivedStorage;
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_TransferMetadataWhitelistIdentifiers")))
  {
    v8 = (const void *)v7[7];
    if (v8)
    {
LABEL_5:
      v9 = CFRetain(v8);
LABEL_9:
      result = 0;
      *a4 = v9;
      return result;
    }
LABEL_8:
    v9 = 0;
    goto LABEL_9;
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_TransferMetadataBlacklistIdentifiers")))
  {
    v8 = (const void *)v7[8];
    if (v8)
      goto LABEL_5;
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("SampleBufferProcessor_TransferMetadataKeepValidIdentifiers")))
  {
    v8 = (const void *)v7[9];
    if (v8)
      goto LABEL_5;
    goto LABEL_8;
  }
  return 4294954501;
}

uint64_t sbp_tmf_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  _QWORD *v6;
  const void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v6 = (_QWORD *)DerivedStorage;
  if (!CFEqual(a2, CFSTR("SampleBufferProcessor_TransferMetadataWhitelistIdentifiers")))
  {
    if (CFEqual(a2, CFSTR("SampleBufferProcessor_TransferMetadataBlacklistIdentifiers")))
    {
      v7 = (const void *)v6[8];
      v6[8] = a3;
      if (!a3)
        goto LABEL_5;
    }
    else
    {
      if (!CFEqual(a2, CFSTR("SampleBufferProcessor_TransferMetadataKeepValidIdentifiers")))
        return 4294954501;
      v7 = (const void *)v6[9];
      v6[9] = a3;
      if (!a3)
        goto LABEL_5;
    }
    goto LABEL_4;
  }
  v7 = (const void *)v6[7];
  v6[7] = a3;
  if (a3)
LABEL_4:
    CFRetain(a3);
LABEL_5:
  if (v7)
    CFRelease(v7);
  return 0;
}

uint64_t sbp_tmf_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 16) = a2;
  *(_QWORD *)(DerivedStorage + 24) = a3;
  return 0;
}

uint64_t sbp_tmf_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage;
  CMFormatDescriptionRef FormatDescription;
  CMFormatDescriptionRef v5;
  const void *v6;
  FourCharCode MediaSubType;
  const __CFAllocator *v8;
  const CFArrayCallBacks *v9;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  const void *v12;
  const void *v13;
  CFDictionaryRef Extensions;
  const __CFDictionary *v15;
  const void **v16;
  CFTypeID v17;
  const __CFDictionary *Value;
  const __CFDictionary *v19;
  int64_t Count;
  const __CFArray *v21;
  CFIndex v22;
  void (*v23)(_QWORD, _QWORD, opaqueCMSampleBuffer *);
  uint64_t v24;
  uint64_t v25;
  const void **v26;
  const __CFArray *v27;
  CFIndex v28;
  uint64_t v29;
  const void *IdentifierForLocalID;
  const __CFArray *v31;
  const __CFArray *v32;
  CMTimeEpoch v33;
  CMTimeEpoch v34;
  OpaqueCMBlockBuffer *v35;
  const opaqueCMFormatDescription *v36;
  CFDictionaryRef v37;
  CFDictionaryRef v38;
  const __CFArray *Identifiers;
  CMTimeValue v40;
  const void *v41;
  const __CFDictionary *v42;
  const __CFDictionary *v43;
  const __CFDictionary *v44;
  uint64_t v45;
  uint64_t appended;
  uint64_t v47;
  size_t v48;
  int LocalIDOfItemAtIndex;
  uint64_t SizeOfItemAtIndex;
  uint64_t v51;
  size_t v52;
  CMFormatDescriptionRef v53;
  CFTypeRef v54;
  const __CFArray *v55;
  const __CFArray *v56;
  CFMutableArrayRef v57;
  CFMutableArrayRef v58;
  CFNumberRef v59;
  int isSubsetOf;
  BOOL v61;
  CFIndex v62;
  CFIndex v63;
  CFIndex v64;
  CFIndex v65;
  const void *ValueAtIndex;
  int v67;
  BOOL v68;
  __CFArray *MetadataItemsFromSampleBuffer;
  const __CFArray *v70;
  const __CFArray *v71;
  CFIndex v72;
  const __CFAllocator *v73;
  CFMutableArrayRef v74;
  CFMutableArrayRef v75;
  CFIndex v76;
  const __CFArray *v77;
  const __CFDictionary *v78;
  CFIndex v79;
  const void *v80;
  const void *v81;
  const __CFString *v82;
  const __CFString *v83;
  CFTypeID v84;
  OSStatus IdentifierForKeyAndKeySpace;
  int v86;
  CFTypeRef v87;
  const __CFData *Data;
  uint64_t BlockBufferWithCFDataNoCopy;
  CMSampleTimingInfo *p_timingArrayOut;
  opaqueCMSampleBuffer *v91;
  uint64_t SampleTimingInfoArray;
  CMSampleTimingInfo *v93;
  size_t v94;
  malloc_type_id_t v95;
  OpaqueCMBlockBuffer *v96;
  opaqueCMSampleBuffer *v97;
  OpaqueCMBlockBuffer *DataLength;
  const opaqueCMFormatDescription *v99;
  CMSampleTimingInfo *v100;
  uint64_t OutputSampleTimingInfoArray;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(_QWORD, _QWORD);
  const void *v105;
  uint64_t v106;
  void (*v107)(_QWORD, _QWORD);
  opaqueCMSampleBuffer *v109;
  opaqueCMSampleBuffer *v110;
  opaqueCMSampleBuffer *v111;
  const __CFDictionary *v112;
  int v113;
  OpaqueCMBlockBuffer *targetBBuf;
  __CFArray *targetBBufa;
  const opaqueCMFormatDescription **v116;
  uint64_t NumberOfItems;
  CFIndex v118;
  const __CFAllocator *allocator;
  const __CFAllocator *allocatora;
  uint64_t v121;
  CMBlockBufferRef theBuffer[2];
  CFTypeRef v123[2];
  CFTypeRef cf[2];
  CFTypeRef v125[2];
  char v126;
  CMItemCount valuePtr;
  CMBlockBufferRef blockBufferOut;
  CMFormatDescriptionRef desc;
  CMSampleTimingInfo timingArrayOut;
  uint64_t v131;
  CFRange v132;
  CFRange v133;
  CFRange v134;
  CFRange v135;

  v131 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  targetBBuf = CMSampleBufferGetDataBuffer(a2);
  if (!FormatDescription)
  {
    if (a2)
    {
      v23 = *(void (**)(_QWORD, _QWORD, opaqueCMSampleBuffer *))(DerivedStorage + 16);
      if (v23)
        v23(*(_QWORD *)(DerivedStorage + 24), 0, a2);
    }
    return 0;
  }
  v121 = DerivedStorage;
  if (!CMFormatDescriptionEqual(*(CMFormatDescriptionRef *)DerivedStorage, FormatDescription))
  {
    v5 = *(CMFormatDescriptionRef *)DerivedStorage;
    *(_QWORD *)DerivedStorage = FormatDescription;
    CFRetain(FormatDescription);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(DerivedStorage + 8);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
    *(_DWORD *)(DerivedStorage + 32) = MediaSubType;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (MediaSubType != 1835360888)
    {
      v25 = CMFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x6D657461u, 0x706C7374u, 0, (CMFormatDescriptionRef *)(DerivedStorage + 8));
      if ((_DWORD)v25)
        return v25;
      goto LABEL_88;
    }
    v109 = a2;
    v9 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E0C9B378]);
    v11 = CFArrayCreateMutable(v8, 0, v9);
    v12 = *(const void **)(DerivedStorage + 40);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v13 = *(const void **)(DerivedStorage + 48);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(DerivedStorage + 48) = 0;
    }
    v116 = (const opaqueCMFormatDescription **)(DerivedStorage + 8);
    Extensions = CMFormatDescriptionGetExtensions(FormatDescription);
    v15 = Extensions;
    v16 = (const void **)MEMORY[0x1E0CA2138];
    allocator = v8;
    if (Extensions)
    {
      v17 = CFGetTypeID(Extensions);
      if (v17 == CFDictionaryGetTypeID())
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(v15, *v16);
        if (Value)
        {
          v19 = Value;
          Count = CFDictionaryGetCount(Value);
          v21 = *(const __CFArray **)(DerivedStorage + 56);
          if (v21)
            v22 = CFArrayGetCount(v21);
          else
            v22 = 0;
          v27 = *(const __CFArray **)(v121 + 64);
          if (v27)
            v28 = CFArrayGetCount(v27);
          else
            v28 = 0;
          v15 = (const __CFDictionary *)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
          v26 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
          CFDictionaryGetKeysAndValues(v19, (const void **)v15, v26);
          if (Count >= 1)
          {
            v112 = v15;
            v29 = 0;
            while (1)
            {
              FigMetadataKeyGetLocalIDUInt32();
              IdentifierForLocalID = (const void *)FigMetadataFormatDescriptionGetIdentifierForLocalID();
              v31 = *(const __CFArray **)(v121 + 56);
              if (v31)
              {
                v132.location = 0;
                v132.length = v22;
                if (CFArrayContainsValue(v31, v132, IdentifierForLocalID))
                {
                  if (FigCFArrayAppendInt32())
                    break;
                }
              }
              v32 = *(const __CFArray **)(v121 + 64);
              if (v32)
              {
                v133.location = 0;
                v133.length = v28;
                if (CFArrayContainsValue(v32, v133, IdentifierForLocalID))
                {
                  if (FigCFArrayAppendInt32())
                    break;
                }
              }
              if (Count == ++v29)
              {
                DerivedStorage = v121;
                v15 = v112;
                goto LABEL_39;
              }
            }
            DerivedStorage = v121;
            v15 = v112;
LABEL_43:
            free(v26);
            free(v15);
            if (v11)
              CFRelease(v11);
            if (Mutable)
              CFRelease(Mutable);
            v34 = *(_QWORD *)(DerivedStorage + 40);
            v33 = *(_QWORD *)(DerivedStorage + 48);
            v35 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 72);
            blockBufferOut = 0;
            v36 = (const opaqueCMFormatDescription *)CFRetain(FormatDescription);
            desc = v36;
            v37 = CMFormatDescriptionGetExtensions(v36);
            a2 = v109;
            if (v37)
              v38 = (CFDictionaryRef)CFRetain(v37);
            else
              v38 = 0;
            Identifiers = CMMetadataFormatDescriptionGetIdentifiers(FormatDescription);
            if (Identifiers)
            {
              if (v35 && !sbp_tmf_isSubsetOf(Identifiers, v35))
              {
                theBuffer[0] = FormatDescription;
                theBuffer[1] = v35;
                timingArrayOut.duration.value = *MEMORY[0x1E0CA2138];
                memset(&timingArrayOut.duration.timescale, 0, 24);
                *(_QWORD *)&timingArrayOut.presentationTimeStamp.timescale = sbp_tmf_selectKeyByIdentifier;
                timingArrayOut.presentationTimeStamp.epoch = (CMTimeEpoch)theBuffer;
                v40 = *MEMORY[0x1E0CA2508];
                *(_QWORD *)&timingArrayOut.decodeTimeStamp.timescale = 0;
                timingArrayOut.decodeTimeStamp.epoch = 0;
                timingArrayOut.decodeTimeStamp.value = v40;
                *(_OWORD *)cf = 0u;
                *(_OWORD *)v125 = 0u;
                *(_OWORD *)v123 = 0u;
                LODWORD(v123[0]) = 1;
                if (v38)
                {
                  v41 = (const void *)*MEMORY[0x1E0C9AE50];
                  v123[1] = *(CFTypeRef *)MEMORY[0x1E0CA2540];
                  cf[0] = v41;
                  cf[1] = CFArrayCreateMutable(allocator, 0, 0);
                  v125[0] = CFArrayCreateMutable(allocator, 0, 0);
                  sbp_tmf_cfda_walk(0, v38, (uint64_t)&timingArrayOut, 0, 3uLL, (uint64_t)v123);
                  if (cf[1])
                    CFRelease(cf[1]);
                  if (v125[0])
                    CFRelease(v125[0]);
                  v42 = (const __CFDictionary *)v125[1];
                  if (!v125[1])
                    v42 = (const __CFDictionary *)CFRetain(v38);
                  CFRelease(v38);
                }
                else
                {
                  FigSignalErrorAt();
                  v42 = 0;
                }
                v38 = v42;
              }
              if (v34)
              {
                timingArrayOut.duration.value = *MEMORY[0x1E0CA2138];
                memset(&timingArrayOut.duration.timescale, 0, 24);
                *(_QWORD *)&timingArrayOut.presentationTimeStamp.timescale = sbp_tmf_doesNotContainLocalID;
                timingArrayOut.presentationTimeStamp.epoch = v34;
                v43 = (const __CFDictionary *)sbp_tmf_CFDictionaryAccessorCreateAndRemoveValue(v38, (uint64_t)&timingArrayOut);
                if (v38)
                  CFRelease(v38);
                v38 = v43;
              }
              if (v33)
              {
                timingArrayOut.duration.value = *MEMORY[0x1E0CA2138];
                memset(&timingArrayOut.duration.timescale, 0, 24);
                *(_QWORD *)&timingArrayOut.presentationTimeStamp.timescale = sbp_tmf_containsLocalID;
                timingArrayOut.presentationTimeStamp.epoch = v33;
                v44 = (const __CFDictionary *)sbp_tmf_CFDictionaryAccessorCreateAndRemoveValue(v38, (uint64_t)&timingArrayOut);
                if (v38)
                  CFRelease(v38);
                v38 = v44;
              }
              v36 = desc;
              if (v38 != CMFormatDescriptionGetExtensions(desc))
              {
                if (v36)
                {
                  CFRelease(v36);
                  desc = 0;
                }
                v45 = CMFormatDescriptionCreate(allocator, 0x6D657461u, 0x6D656278u, v38, &desc);
                if ((_DWORD)v45)
                  goto LABEL_78;
                v45 = CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(allocator, desc, 0, &blockBufferOut);
                if ((_DWORD)v45)
                  goto LABEL_78;
                if (desc)
                {
                  CFRelease(desc);
                  desc = 0;
                }
                v45 = CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(allocator, blockBufferOut, 0, &desc);
                if ((_DWORD)v45)
                {
LABEL_78:
                  v24 = v45;
                  goto LABEL_81;
                }
                v36 = desc;
              }
            }
            v24 = 0;
            *v116 = v36;
            desc = 0;
LABEL_81:
            if (v38)
              CFRelease(v38);
            if (blockBufferOut)
              CFRelease(blockBufferOut);
            if (desc)
              CFRelease(desc);
            if ((_DWORD)v24)
              return v24;
            goto LABEL_88;
          }
          DerivedStorage = v121;
        }
        else
        {
          v15 = 0;
          v26 = 0;
        }
LABEL_39:
        if (*(_QWORD *)(DerivedStorage + 56))
        {
          *(_QWORD *)(DerivedStorage + 40) = Mutable;
          Mutable = 0;
        }
        if (*(_QWORD *)(DerivedStorage + 64))
        {
          *(_QWORD *)(DerivedStorage + 48) = v11;
          v11 = 0;
        }
        goto LABEL_43;
      }
      v15 = 0;
    }
    v26 = 0;
    goto LABEL_43;
  }
LABEL_88:
  if (*(_DWORD *)(DerivedStorage + 32) == 1835360888)
  {
    desc = 0;
    timingArrayOut.duration.value = 0;
    v123[0] = 0;
    theBuffer[0] = 0;
    blockBufferOut = 0;
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    appended = FigBoxedMetadataCreateFromBlockBuffer();
    if (!(_DWORD)appended)
    {
      v110 = a2;
      NumberOfItems = FigBoxedMetadataGetNumberOfItems();
      if (NumberOfItems >= 1)
      {
        v47 = 0;
        v113 = 0;
        v48 = 0;
        while (1)
        {
          LocalIDOfItemAtIndex = FigBoxedMetadataGetLocalIDOfItemAtIndex();
          SizeOfItemAtIndex = FigBoxedMetadataGetSizeOfItemAtIndex();
          if (SizeOfItemAtIndex)
            break;
LABEL_126:
          if (++v47 == NumberOfItems)
            goto LABEL_158;
        }
        v51 = SizeOfItemAtIndex;
        if (v123[0])
        {
          CFRelease(v123[0]);
          v123[0] = 0;
        }
        appended = FigBoxedMetadataCopyValueOfItemAtIndexAsCFType();
        if ((_DWORD)appended)
          goto LABEL_213;
        v52 = v51 + 8;
        v53 = *(CMFormatDescriptionRef *)DerivedStorage;
        v54 = v123[0];
        v56 = *(const __CFArray **)(DerivedStorage + 40);
        v55 = *(const __CFArray **)(DerivedStorage + 48);
        LODWORD(valuePtr) = LocalIDOfItemAtIndex;
        if (!((unint64_t)v56 | (unint64_t)v55))
          goto LABEL_121;
        v57 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E0C9B378]);
        if (!v57)
        {
LABEL_120:
          v113 = 1;
LABEL_125:
          v48 += v52;
          goto LABEL_126;
        }
        v58 = v57;
        if (v56 && !FigMetadataFormatDescriptionQuickTimeWellKnownTypeIsRecognized()
          || sbp_tmf_isARecordOrArrayCollection()
          && ((v126 = 0, sbp_tmf_getLocalIDs((uint64_t)v53, (uint64_t)v54, v58, &v126)) || v56 && !v126))
        {
          CFRelease(v58);
          goto LABEL_120;
        }
        v59 = CFNumberCreate(allocatora, kCFNumberSInt32Type, &valuePtr);
        CFArrayAppendValue(v58, v59);
        if (v56)
        {
          isSubsetOf = sbp_tmf_isSubsetOf(v58, v56);
          v61 = isSubsetOf == 0;
          if (!isSubsetOf || !v55)
            goto LABEL_117;
        }
        else if (!v55)
        {
          goto LABEL_116;
        }
        v62 = CFArrayGetCount(v55);
        v63 = CFArrayGetCount(v58);
        v64 = v63 - 1;
        if (v63 >= 1)
        {
          v65 = 0;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v58, v65);
            v134.location = 0;
            v134.length = v62;
            v67 = CFArrayContainsValue(v55, v134, ValueAtIndex);
            v61 = v67 != 0;
            if (v67)
              break;
            v68 = v64 == v65++;
          }
          while (!v68);
LABEL_117:
          CFRelease(v58);
          if (v59)
            CFRelease(v59);
          DerivedStorage = v121;
          if (v61)
            goto LABEL_120;
LABEL_121:
          if (theBuffer[0])
          {
            appended = CMBlockBufferAppendBufferReference(theBuffer[0], targetBBuf, v48, v52, 0);
            if ((_DWORD)appended)
              goto LABEL_213;
          }
          else
          {
            appended = CMBlockBufferCreateWithBufferReference(0, targetBBuf, v48, v52, 0, theBuffer);
            if ((_DWORD)appended)
              goto LABEL_213;
          }
          goto LABEL_125;
        }
LABEL_116:
        v61 = 0;
        goto LABEL_117;
      }
      v113 = 0;
LABEL_158:
      v96 = theBuffer[0];
      if (theBuffer[0])
      {
        *(_BYTE *)(DerivedStorage + 80) = 1;
        v97 = v110;
        goto LABEL_164;
      }
      v97 = v110;
      if (!*(_BYTE *)(DerivedStorage + 80))
      {
        v96 = 0;
LABEL_164:
        DataLength = (OpaqueCMBlockBuffer *)CMBlockBufferGetDataLength(v96);
        blockBufferOut = DataLength;
        if (v97)
          v99 = (const opaqueCMFormatDescription *)CFRetain(v97);
        else
          v99 = 0;
        desc = v99;
        if (*(_QWORD *)DerivedStorage == *(_QWORD *)(DerivedStorage + 8) && !v113)
        {
          v100 = 0;
          if (!DataLength)
            goto LABEL_183;
          goto LABEL_180;
        }
        valuePtr = 0;
        OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(v97, 0, 0, &valuePtr);
        v24 = OutputSampleTimingInfoArray;
        if (!(_DWORD)OutputSampleTimingInfoArray || (_DWORD)OutputSampleTimingInfoArray == -12736)
        {
          v100 = (CMSampleTimingInfo *)malloc_type_calloc(valuePtr, 0x48uLL, 0x1000040FF89C88EuLL);
          if (v100)
          {
            v102 = CMSampleBufferGetOutputSampleTimingInfoArray(v97, valuePtr, v100, 0);
            if (!(_DWORD)v102 || (v24 = v102, (_DWORD)v102 == -12736))
            {
              if (v99)
              {
                CFRelease(v99);
                desc = 0;
              }
              v103 = CMSampleBufferCreate(allocatora, theBuffer[0], 1u, 0, 0, *(CMFormatDescriptionRef *)(DerivedStorage + 8), 1, valuePtr, v100, 1, (const size_t *)&blockBufferOut, &desc);
              if (!(_DWORD)v103)
              {
                CMPropagateAttachments(v97, desc);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E0CA2728]);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E0CA2720]);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E0CA2708]);
                CMRemoveAttachment(desc, (CFStringRef)*MEMORY[0x1E0CA26E8]);
                if (!blockBufferOut)
                {
LABEL_183:
                  v24 = 0;
                  goto LABEL_184;
                }
LABEL_180:
                if (desc)
                {
                  v104 = *(void (**)(_QWORD, _QWORD))(DerivedStorage + 16);
                  if (v104)
                    v104(*(_QWORD *)(DerivedStorage + 24), 0);
                }
                goto LABEL_183;
              }
              v24 = v103;
            }
          }
LABEL_184:
          free(v100);
          if (desc)
            CFRelease(desc);
          if (theBuffer[0])
            CFRelease(theBuffer[0]);
          if (v123[0])
            CFRelease(v123[0]);
          v105 = (const void *)timingArrayOut.duration.value;
          if (!timingArrayOut.duration.value)
            return v24;
LABEL_211:
          CFRelease(v105);
          return v24;
        }
LABEL_214:
        v100 = 0;
        goto LABEL_184;
      }
      appended = CMBlockBufferCreateWithMemoryBlock(allocatora, &sbp_tmf_filterMetadataBox_emptyMetadata, 8uLL, (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, 8uLL, 0, theBuffer);
      if (!(_DWORD)appended)
      {
        *(_BYTE *)(DerivedStorage + 80) = 0;
        v96 = theBuffer[0];
        goto LABEL_164;
      }
    }
LABEL_213:
    v24 = appended;
    goto LABEL_214;
  }
  theBuffer[0] = 0;
  blockBufferOut = 0;
  desc = 0;
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  valuePtr = 0;
  MetadataItemsFromSampleBuffer = FigMetadataCreateMetadataItemsFromSampleBuffer(a2);
  v70 = MetadataItemsFromSampleBuffer;
  if (MetadataItemsFromSampleBuffer)
  {
    v71 = *(const __CFArray **)(DerivedStorage + 56);
    v72 = CFArrayGetCount(MetadataItemsFromSampleBuffer);
    v73 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v74 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v75 = v74;
    v118 = v72;
    if (v72 >= 1)
    {
      targetBBufa = v74;
      v111 = a2;
      v76 = 0;
      v77 = v70;
      do
      {
        v78 = (const __CFDictionary *)CFArrayGetValueAtIndex(v70, v76);
        v123[0] = 0;
        if (v71)
          v79 = CFArrayGetCount(v71);
        else
          v79 = 0;
        v80 = CFDictionaryGetValue(v78, CFSTR("key"));
        if (v80
          && (v81 = v80, (v82 = (const __CFString *)CFDictionaryGetValue(v78, CFSTR("keyspace"))) != 0)
          && (v83 = v82, v84 = CFGetTypeID(v82), v68 = v84 == CFStringGetTypeID(), DerivedStorage = v121, v68))
        {
          IdentifierForKeyAndKeySpace = CMMetadataCreateIdentifierForKeyAndKeySpace(v73, v81, v83, (CFStringRef *)v123);
          v86 = 0;
          v87 = v123[0];
          if (v71 && !IdentifierForKeyAndKeySpace)
          {
            v135.location = 0;
            v135.length = v79;
            v86 = CFArrayContainsValue(v71, v135, v123[0]);
            v87 = v123[0];
          }
          v70 = v77;
          if (v87)
            CFRelease(v87);
          if (v86)
            CFArrayAppendValue(targetBBufa, v78);
        }
        else
        {
          v70 = v77;
        }
        ++v76;
      }
      while (v118 != v76);
      a2 = v111;
      v75 = targetBBufa;
    }
  }
  else
  {
    v73 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v75 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  }
  Data = CFPropertyListCreateData(v73, v75, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (!Data)
  {
    BlockBufferWithCFDataNoCopy = FigSignalErrorAt();
    goto LABEL_217;
  }
  BlockBufferWithCFDataNoCopy = FigCreateBlockBufferWithCFDataNoCopy();
  if ((_DWORD)BlockBufferWithCFDataNoCopy)
  {
LABEL_217:
    v24 = BlockBufferWithCFDataNoCopy;
    v93 = 0;
    goto LABEL_201;
  }
  valuePtr = CFDataGetLength(Data);
  p_timingArrayOut = &timingArrayOut;
  v91 = a2;
  SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a2, 1, &timingArrayOut, (CMItemCount *)&blockBufferOut);
  v93 = 0;
  if ((_DWORD)SampleTimingInfoArray)
  {
    v24 = SampleTimingInfoArray;
    if ((_DWORD)SampleTimingInfoArray != -12737)
      goto LABEL_195;
    if (blockBufferOut)
    {
      v93 = 0;
      if ((unint64_t)blockBufferOut > 0x38E38E38E38E38ELL)
        goto LABEL_194;
      v94 = 72 * (_QWORD)blockBufferOut;
      if (!(72 * (_QWORD)blockBufferOut))
        goto LABEL_194;
      v95 = 1556728742;
    }
    else
    {
      v94 = 0;
      v95 = 1270757447;
    }
    v93 = (CMSampleTimingInfo *)malloc_type_malloc(v94, v95);
LABEL_194:
    v24 = CMSampleBufferGetSampleTimingInfoArray(v91, (CMItemCount)blockBufferOut, v93, 0);
LABEL_195:
    p_timingArrayOut = v93;
    if ((_DWORD)v24)
      goto LABEL_201;
  }
  v106 = CMSampleBufferCreateReady(v73, theBuffer[0], *(CMFormatDescriptionRef *)(DerivedStorage + 8), 1, (CMItemCount)blockBufferOut, p_timingArrayOut, 1, (const size_t *)&valuePtr, &desc);
  if ((_DWORD)v106)
  {
    v24 = v106;
  }
  else
  {
    CMPropagateAttachments(v91, desc);
    if (desc)
    {
      v107 = *(void (**)(_QWORD, _QWORD))(DerivedStorage + 16);
      if (v107)
        v107(*(_QWORD *)(DerivedStorage + 24), 0);
    }
    v24 = 0;
  }
LABEL_201:
  free(v93);
  if (desc)
    CFRelease(desc);
  if (theBuffer[0])
    CFRelease(theBuffer[0]);
  if (Data)
    CFRelease(Data);
  if (v70)
    CFRelease(v70);
  if (v75)
  {
    v105 = v75;
    goto LABEL_211;
  }
  return v24;
}

uint64_t sbp_tmf_isSubsetOf(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  CFIndex v7;
  const void *ValueAtIndex;
  uint64_t result;
  CFRange v10;

  Count = CFArrayGetCount(theArray);
  v5 = CFArrayGetCount(a1);
  if (v5 < 1)
    return 1;
  v6 = v5;
  v7 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v7);
    v10.location = 0;
    v10.length = Count;
    result = CFArrayContainsValue(theArray, v10, ValueAtIndex);
    if (!(_DWORD)result)
      break;
    if (v6 == ++v7)
      return 1;
  }
  return result;
}

uint64_t sbp_tmf_selectKeyByIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v6;
  CFIndex Count;
  uint64_t v8;

  FigMetadataKeyGetLocalIDUInt32();
  FigMetadataFormatDescriptionGetIdentifierForLocalID();
  FigMetadataFormatDescriptionGetDataTypeForLocalID();
  if (CFArrayGetCount(*(CFArrayRef *)(a2 + 8)) < 2)
    return 1;
  v3 = 0;
  for (i = 1; ; i += 2)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), i - 1);
    v6 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), i);
    if ((!ValueAtIndex || FigCFEqual()) && (!v6 || FigCFEqual()))
      break;
    ++v3;
    Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 8));
    if (Count >= 0)
      v8 = Count;
    else
      v8 = Count + 1;
    if (v3 >= v8 >> 1)
      return 1;
  }
  return 0;
}

BOOL sbp_tmf_doesNotContainLocalID(const __CFDictionary *a1, const __CFArray *a2)
{
  return sbp_tmf_containsLocalID(a1, a2) == 0;
}

CFTypeRef sbp_tmf_CFDictionaryAccessorCreateAndRemoveValue(const void *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFTypeRef result;
  __int128 v6;
  CFTypeRef cf[2];
  CFTypeRef v8[2];

  *(_OWORD *)cf = 0u;
  *(_OWORD *)v8 = 0u;
  v6 = 0u;
  LODWORD(v6) = 2;
  if (a1)
  {
    if (a2)
    {
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      cf[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
      v8[0] = CFArrayCreateMutable(v4, 0, 0);
      sbp_tmf_cfda_walk(0, a1, a2, 0, 2uLL, (uint64_t)&v6);
      if (cf[1])
        CFRelease(cf[1]);
      if (v8[0])
        CFRelease(v8[0]);
    }
    else
    {
      FigSignalErrorAt();
    }
    result = v8[1];
    if (!v8[1])
      return CFRetain(a1);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return result;
}

uint64_t sbp_tmf_containsLocalID(const __CFDictionary *a1, const __CFArray *cf)
{
  CFTypeID v4;
  CFTypeID v5;
  const void *Value;
  CFRange v8;

  if (cf
    && (v4 = CFGetTypeID(cf), v4 == CFArrayGetTypeID())
    && a1
    && (v5 = CFGetTypeID(a1), v5 == CFDictionaryGetTypeID()))
  {
    Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA24F0]);
    v8.length = CFArrayGetCount(cf);
    v8.location = 0;
    return CFArrayContainsValue(cf, v8, Value);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void sbp_tmf_cfda_walk(const void *a1, const void *a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12;
  const void **v13;
  int64_t Count;
  const void **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  const void **v19;
  const void **v20;
  const void *v21;
  const void **v22;
  const void **v23;
  void *value;

  CFArrayAppendValue(*(CFMutableArrayRef *)(a6 + 24), a2);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a6 + 32), 0);
  if (a4 < a5)
  {
    v13 = (const void **)(a3 + 24 * a4);
    value = 0;
    if (*v13)
    {
      if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a2, *v13, (const void **)&value))
        sbp_tmf_cfda_walk(*v13, value, a3, a4 + 1, a5, a6);
    }
    else
    {
      v21 = a1;
      Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      v15 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      v22 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      v23 = v15;
      CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v15, v22);
      if (Count >= 1)
      {
        v16 = a3 + 24 * a4;
        v17 = (_QWORD *)(v16 + 8);
        v18 = (_QWORD *)(v16 + 16);
        v19 = v22;
        v20 = v23;
        do
        {
          if (!*v17 || ((unsigned int (*)(const void *, _QWORD))*v17)(*v19, *v18))
            sbp_tmf_cfda_walk(*v20, *v19, a3, a4 + 1, a5, a6);
          ++v19;
          ++v20;
          --Count;
        }
        while (Count);
      }
      free(v22);
      free(v23);
      a1 = v21;
    }
  }
  sbp_tmf_cfda_updateAfter(a1, v12, a4, a5, (int *)a6);
}

void sbp_tmf_cfda_updateAfter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  int v8;
  const __CFArray *v9;
  CFIndex v10;
  const __CFArray *v11;
  __CFDictionary *v12;
  CFIndex v13;
  __CFArray *v14;
  __CFDictionary *v15;
  const __CFArray *v16;
  CFIndex Count;
  const __CFArray *v18;
  const __CFArray *v19;
  CFIndex v20;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *MutableCopy;
  const __CFArray *v23;
  CFIndex v24;
  const __CFArray *v25;
  const void *v26;
  unsigned int v27;
  unsigned int v28;
  const __CFArray *v29;
  CFIndex v30;
  void *v31;
  const __CFArray *v32;
  CFIndex v33;
  const __CFArray *v34;
  CFIndex v35;
  const __CFDictionary *v36;
  const __CFArray *v37;
  CFIndex v38;
  const __CFArray *v39;
  CFIndex v40;
  CFTypeRef v41;

  if (a3 == a4)
  {
    v8 = *a5;
    if (*a5 == 2)
    {
      v16 = (const __CFArray *)*((_QWORD *)a5 + 4);
      Count = CFArrayGetCount(v16);
      CFArraySetValueAtIndex(v16, Count - 1, (const void *)3);
      v18 = (const __CFArray *)*((_QWORD *)a5 + 3);
      v13 = CFArrayGetCount(v18) - 1;
      v14 = v18;
      v15 = 0;
    }
    else if (v8 == 1)
    {
      v19 = (const __CFArray *)*((_QWORD *)a5 + 3);
      v20 = CFArrayGetCount(v19);
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, v20 - 1);
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, ValueAtIndex);
      CFDictionarySetValue(MutableCopy, *((const void **)a5 + 1), *((const void **)a5 + 2));
      v23 = (const __CFArray *)*((_QWORD *)a5 + 4);
      v24 = CFArrayGetCount(v23);
      CFArraySetValueAtIndex(v23, v24 - 1, (const void *)2);
      v25 = (const __CFArray *)*((_QWORD *)a5 + 3);
      v13 = CFArrayGetCount(v25) - 1;
      v14 = v25;
      v15 = MutableCopy;
    }
    else
    {
      if (v8)
        goto LABEL_9;
      v9 = (const __CFArray *)*((_QWORD *)a5 + 4);
      v10 = CFArrayGetCount(v9);
      CFArraySetValueAtIndex(v9, v10 - 1, (const void *)1);
      v12 = (__CFDictionary *)*((_QWORD *)a5 + 2);
      v11 = (const __CFArray *)*((_QWORD *)a5 + 3);
      v13 = CFArrayGetCount(v11) - 1;
      v14 = v11;
      v15 = v12;
    }
    CFArraySetValueAtIndex(v14, v13, v15);
  }
LABEL_9:
  v26 = sbp_tmf_cfda_stackPop(*((const __CFArray **)a5 + 3));
  v27 = sbp_tmf_cfda_stackPop(*((const __CFArray **)a5 + 4));
  v28 = v27;
  if (a3)
  {
    if (!v27)
      return;
    v29 = (const __CFArray *)*((_QWORD *)a5 + 3);
    v30 = CFArrayGetCount(v29);
    v31 = (void *)CFArrayGetValueAtIndex(v29, v30 - 1);
    v32 = (const __CFArray *)*((_QWORD *)a5 + 4);
    v33 = CFArrayGetCount(v32);
    if (!CFArrayGetValueAtIndex(v32, v33 - 1))
    {
      v34 = (const __CFArray *)*((_QWORD *)a5 + 3);
      v35 = CFArrayGetCount(v34);
      v36 = (const __CFDictionary *)CFArrayGetValueAtIndex(v34, v35 - 1);
      v31 = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v36);
      v37 = (const __CFArray *)*((_QWORD *)a5 + 3);
      v38 = CFArrayGetCount(v37);
      CFArraySetValueAtIndex(v37, v38 - 1, v31);
      v39 = (const __CFArray *)*((_QWORD *)a5 + 4);
      v40 = CFArrayGetCount(v39);
      CFArraySetValueAtIndex(v39, v40 - 1, (const void *)2);
    }
    if (v28 == 3)
    {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)v31, a1);
      return;
    }
    CFDictionaryReplaceValue((CFMutableDictionaryRef)v31, a1, v26);
  }
  else
  {
    if (v26)
      v41 = CFRetain(v26);
    else
      v41 = 0;
    *((_QWORD *)a5 + 5) = v41;
  }
  if (v28 == 2)
  {
    if (v26)
      CFRelease(v26);
  }
}

const void *sbp_tmf_cfda_stackPop(const __CFArray *a1)
{
  CFIndex Count;
  const void *ValueAtIndex;
  CFIndex v4;

  Count = CFArrayGetCount(a1);
  ValueAtIndex = CFArrayGetValueAtIndex(a1, Count - 1);
  v4 = CFArrayGetCount(a1);
  CFArrayRemoveValueAtIndex(a1, v4 - 1);
  return ValueAtIndex;
}

const __CFArray *sbp_tmf_isARecordOrArrayCollection()
{
  const __CFArray *result;
  const __CFArray *v1;
  CFIndex Count;
  int v3;
  CFRange v4;
  CFRange v5;

  result = (const __CFArray *)FigMetadataFormatDescriptionGetConformingDataTypesForLocalID();
  if (result)
  {
    v1 = result;
    Count = CFArrayGetCount(result);
    v4.location = 0;
    v4.length = Count;
    v3 = CFArrayContainsValue(v1, v4, (const void *)*MEMORY[0x1E0CA4BC8]);
    v5.location = 0;
    v5.length = Count;
    return (const __CFArray *)((v3 | CFArrayContainsValue(v1, v5, (const void *)*MEMORY[0x1E0CA4BB0])) != 0);
  }
  return result;
}

uint64_t sbp_tmf_getLocalIDs(uint64_t a1, uint64_t a2, __CFArray *a3, char *a4)
{
  uint64_t NumberOfItems;
  uint64_t v8;
  char v9;
  uint64_t v10;
  const __CFAllocator *v11;
  CFNumberRef v12;
  uint64_t LocalIDs;
  uint64_t v14;
  int LocalIDOfItemAtIndex;
  char v17;
  CFTypeRef cf;

  cf = 0;
  v17 = 0;
  NumberOfItems = FigBoxedMetadataGetNumberOfItems();
  if (NumberOfItems < 1)
  {
LABEL_13:
    v14 = 0;
    v9 = 1;
    goto LABEL_15;
  }
  v8 = NumberOfItems;
  v9 = 0;
  v10 = 0;
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  while (1)
  {
    LocalIDOfItemAtIndex = 0;
    LocalIDOfItemAtIndex = FigBoxedMetadataGetLocalIDOfItemAtIndex();
    if (!FigMetadataFormatDescriptionQuickTimeWellKnownTypeIsRecognized())
    {
LABEL_14:
      v14 = 0;
      goto LABEL_15;
    }
    v12 = CFNumberCreate(v11, kCFNumberSInt32Type, &LocalIDOfItemAtIndex);
    CFArrayAppendValue(a3, v12);
    if (v12)
      CFRelease(v12);
    if (sbp_tmf_isARecordOrArrayCollection())
      break;
LABEL_12:
    if (v8 == ++v10)
      goto LABEL_13;
  }
  LocalIDs = FigBoxedMetadataCopyValueOfItemAtIndexAsCFType();
  if (!(_DWORD)LocalIDs)
  {
    LocalIDs = sbp_tmf_getLocalIDs(a1, cf, a3, &v17);
    v9 = v17;
    if (!(_DWORD)LocalIDs)
    {
      if (!v17)
        goto LABEL_14;
      if (cf)
      {
        CFRelease(cf);
        cf = 0;
      }
      goto LABEL_12;
    }
  }
  v14 = LocalIDs;
LABEL_15:
  *a4 = v9;
  if (cf)
    CFRelease(cf);
  return v14;
}

uint64_t FigTTMLDocumentWriterRegionTimelineAddRegionSlice(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t Mutable;
  uint64_t v5;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t CMBaseObject;
  uint64_t (*v12)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  uint64_t v13;
  CFIndex Count;
  CFIndex v15;
  CFIndex v16;
  const void *ValueAtIndex;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const void *, uint64_t, const void **);
  CFTypeID v20;
  __int128 v21;
  uint64_t KeyFrameCount;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CFIndex v29;
  CMTimeRange otherRange;
  CMTimeRange time;
  CMTimeRange v32;
  const void *v33;
  CFTypeRef v34[3];

  v33 = 0;
  v34[0] = 0;
  if (!a1)
  {
    v5 = FigSignalErrorAt();
    goto LABEL_10;
  }
  if (!a3
    || (*((_BYTE *)a2 + 12) & 1) == 0
    || (*((_BYTE *)a2 + 36) & 1) == 0
    || *((_QWORD *)a2 + 5)
    || (*((_QWORD *)a2 + 3) & 0x8000000000000000) != 0)
  {
    Mutable = FigSignalErrorAt();
    goto LABEL_7;
  }
  v8 = (_OWORD *)(a1 + 16);
  if ((*(_BYTE *)(a1 + 28) & 1) == 0
    || (*(_BYTE *)(a1 + 52) & 1) == 0
    || *(_QWORD *)(a1 + 56)
    || (*(_QWORD *)(a1 + 40) & 0x8000000000000000) != 0)
  {
    v9 = *a2;
    v10 = a2[2];
    *(_OWORD *)(a1 + 32) = a2[1];
    *(_OWORD *)(a1 + 48) = v10;
    *v8 = v9;
  }
  else
  {
    v26 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)&time.start.value = *v8;
    *(_OWORD *)&time.start.epoch = v26;
    *(_OWORD *)&time.duration.timescale = *(_OWORD *)(a1 + 48);
    v27 = a2[1];
    *(_OWORD *)&otherRange.start.value = *a2;
    *(_OWORD *)&otherRange.start.epoch = v27;
    *(_OWORD *)&otherRange.duration.timescale = a2[2];
    CMTimeRangeGetUnion(&v32, &time, &otherRange);
    v28 = *(_OWORD *)&v32.start.epoch;
    *v8 = *(_OWORD *)&v32.start.value;
    v8[1] = v28;
    v8[2] = *(_OWORD *)&v32.duration.timescale;
  }
  CMBaseObject = FigCaptionRegionGetCMBaseObject();
  v12 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
  if (!v12)
  {
LABEL_48:
    v5 = 4294954514;
    goto LABEL_8;
  }
  v13 = *MEMORY[0x1E0C9AE00];
  Mutable = v12(CMBaseObject, *MEMORY[0x1E0CA3498], *MEMORY[0x1E0C9AE00], v34);
  if ((_DWORD)Mutable)
  {
LABEL_7:
    v5 = Mutable;
    goto LABEL_8;
  }
  if (v34[0])
  {
    Count = CFArrayGetCount((CFArrayRef)v34[0]);
    if (Count >= 1)
    {
      v15 = Count;
      v16 = 0;
      v29 = Count;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v34[0], v16);
        if (v33)
        {
          CFRelease(v33);
          v33 = 0;
        }
        v18 = FigCaptionRegionGetCMBaseObject();
        v19 = *(uint64_t (**)(uint64_t, const void *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 8)
                                                                                      + 48);
        if (!v19)
          goto LABEL_48;
        Mutable = v19(v18, ValueAtIndex, v13, &v33);
        if ((_DWORD)Mutable)
          goto LABEL_7;
        if (v33)
        {
          v20 = CFGetTypeID(v33);
          if (v20 == FigCaptionDynamicStyleGetTypeID())
          {
            if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), ValueAtIndex))
            {
              FigCaptionDynamicStyleGetInitialValue();
              Mutable = FigCaptionDynamicStyleCreateMutable();
              if ((_DWORD)Mutable)
                goto LABEL_7;
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), ValueAtIndex, 0);
            }
            v21 = a2[1];
            *(_OWORD *)&v32.start.value = *a2;
            *(_OWORD *)&v32.start.epoch = v21;
            *(_OWORD *)&v32.duration.timescale = a2[2];
            *(_OWORD *)&time.start.value = *(_OWORD *)&v32.start.value;
            time.start.epoch = *((_QWORD *)a2 + 2);
            CMTimeGetSeconds(&time.start);
            time.start = v32.duration;
            CMTimeGetSeconds(&time.start);
            time.start.value = 0;
            KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
            if (KeyFrameCount < 1)
            {
LABEL_41:
              v5 = 0;
            }
            else
            {
              v23 = KeyFrameCount;
              v24 = 0;
              while (1)
              {
                otherRange.start.value = 0;
                if (time.start.value)
                {
                  CFRelease((CFTypeRef)time.start.value);
                  time.start.value = 0;
                }
                v25 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
                if ((_DWORD)v25)
                  break;
                v25 = FigCaptionDynamicStyleAddKeyFrameValue();
                if ((_DWORD)v25)
                  break;
                if (v23 == ++v24)
                  goto LABEL_41;
              }
              v5 = v25;
            }
            v15 = v29;
            if (time.start.value)
              CFRelease((CFTypeRef)time.start.value);
            if ((_DWORD)v5)
              goto LABEL_8;
          }
          else if (v33)
          {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), ValueAtIndex, v33);
          }
        }
        v5 = 0;
        if (++v16 == v15)
          goto LABEL_8;
      }
    }
  }
  v5 = 0;
LABEL_8:
  if (v33)
    CFRelease(v33);
LABEL_10:
  if (v34[0])
    CFRelease(v34[0]);
  return v5;
}

uint64_t FigTTMLDocumentWriterRegionTimelineIsAnimated(uint64_t a1)
{
  unsigned __int8 context;

  context = 0;
  if (a1)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)propertyIsAnimated, &context);
    return context;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

void propertyIsAnimated(int a1, CFTypeRef cf, _BYTE *a3)
{
  CFTypeID v4;

  if (cf)
  {
    v4 = CFGetTypeID(cf);
    if (v4 == FigCaptionDynamicStyleGetTypeID() && FigCaptionDynamicStyleGetKeyFrameCount() >= 2)
      *a3 = 1;
  }
}

uint64_t FigTTMLDocumentWriterRegionTimelineCopyProperty(uint64_t a1, CFTypeRef cf, _QWORD *a3)
{
  CFTypeID v6;
  const void *Value;
  const void *v8;

  if (a1)
  {
    if (cf)
    {
      v6 = CFGetTypeID(cf);
      if (v6 == CFStringGetTypeID())
      {
        Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), cf);
        v8 = Value;
        if (Value)
        {
          CFRetain(Value);
          if (!a3)
          {
            CFRelease(v8);
            return 0;
          }
        }
        else if (!a3)
        {
          return 0;
        }
        *a3 = v8;
        return 0;
      }
    }
  }
  return FigSignalErrorAt();
}

_OWORD *FigTTMLDocumentWriterRegionTimelineGetTimeRange@<X0>(_OWORD *result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = MEMORY[0x1E0CA2E40];
  v3 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
  *a2 = *MEMORY[0x1E0CA2E40];
  a2[1] = v3;
  a2[2] = *(_OWORD *)(v2 + 32);
  if (!result)
    return (_OWORD *)FigSignalErrorAt();
  v4 = result[2];
  *a2 = result[1];
  a2[1] = v4;
  a2[2] = result[3];
  return result;
}

uint64_t FigTTMLDocumentWriterRegionTimelineWriteAttributesAndSetElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[3];
  uint64_t v5;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v4[0] = a1;
  v4[1] = a2;
  v4[2] = a3;
  v5 = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 64), (CFDictionaryApplierFunction)writeEachPropertyToAttributeAndSetElements, v4);
  return v5;
}

void writeEachPropertyToAttributeAndSetElements(void *key, const void *a2, uint64_t a3)
{
  uint64_t (*Value)(CFTypeRef, CFMutableDictionaryRef);
  CFDictionaryRef v6;
  uint64_t (*v7)(CFTypeRef, CFMutableDictionaryRef);
  CFMutableDictionaryRef Mutable;
  CFTypeID v9;
  uint64_t KeyFrameCount;
  uint64_t v11;
  uint64_t v12;
  const __CFAllocator *v13;
  int v14;
  double v15;
  double Seconds;
  CMTime v17;
  CMTime time;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  CFTypeRef cf;
  CFTypeRef v24;

  v24 = 0;
  cf = 0;
  Value = (uint64_t (*)(CFTypeRef, CFMutableDictionaryRef))CFDictionaryGetValue(*(CFDictionaryRef *)(a3 + 16), key);
  v6 = 0;
  if (!a2)
  {
    Mutable = 0;
    goto LABEL_26;
  }
  v7 = Value;
  Mutable = 0;
  if (!Value)
    goto LABEL_26;
  v9 = CFGetTypeID(a2);
  if (v9 == FigCaptionDynamicStyleGetTypeID())
  {
    KeyFrameCount = FigCaptionDynamicStyleGetKeyFrameCount();
    if (KeyFrameCount < 1)
    {
      v6 = 0;
      Mutable = 0;
      goto LABEL_26;
    }
    v11 = KeyFrameCount;
    v12 = 0;
    v6 = 0;
    Mutable = 0;
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      if (v24)
      {
        CFRelease(v24);
        v24 = 0;
      }
      v22 = 0.0;
      v14 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
      if (v14)
        break;
      if (Mutable)
        CFRelease(Mutable);
      Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v14 = v7(v24, Mutable);
      if (v14)
        break;
      if (v12)
      {
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        v14 = FigTTMLDocumentWriterElementCreate((uint64_t)v13, 1, *(_QWORD *)(a3 + 8), (uint64_t *)&cf);
        if (v14)
          break;
        CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement_0, (void *)cf);
        v20 = 0u;
        v21 = 0u;
        v19 = 0u;
        FigTTMLDocumentWriterRegionTimelineGetTimeRange(*(_OWORD **)a3, &v19);
        v15 = v22;
        *(_OWORD *)&time.value = v19;
        time.epoch = v20;
        Seconds = CMTimeGetSeconds(&time);
        if (v6)
          CFRelease(v6);
        CMTimeMakeWithSeconds(&v17, v15 - Seconds, 1000);
        v6 = CMTimeCopyAsDictionary(&v17, v13);
        FigTTMLDocumentWriterElementSetAttribute((uint64_t)cf, CFSTR("begin"), v6);
        FigTTMLDocumentWriterElementAddChildElement(*(_QWORD *)(a3 + 8), cf);
      }
      else
      {
        CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement_0, *(void **)(a3 + 8));
      }
      if (v11 == ++v12)
        goto LABEL_26;
    }
  }
  else
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = v7(a2, Mutable);
    if (!v14)
    {
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)setAttributeToElement_0, *(void **)(a3 + 8));
      v6 = 0;
      goto LABEL_26;
    }
    v6 = 0;
  }
  *(_DWORD *)(a3 + 24) = v14;
LABEL_26:
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  if (Mutable)
    CFRelease(Mutable);
  if (v24)
    CFRelease(v24);
}

uint64_t FigTTMLDocumentWriterRegionTimelineCreate(_QWORD *a1)
{
  const __CFAllocator *v2;
  uint64_t Instance;
  _QWORD *v4;
  CFMutableDictionaryRef Mutable;
  uint64_t v7;

  if (!a1)
    return FigSignalErrorAt();
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&figTTMLDocumentWriterRegionTimeline_GetTypeID_sRegisterRegionTimelineOnce, figTTMLDocumentWriterRegionTimeline_Register);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v4 = (_QWORD *)Instance;
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4[8] = Mutable;
  if (Mutable)
  {
    *a1 = v4;
    return 0;
  }
  else
  {
    v7 = FigSignalErrorAt();
    CFRelease(v4);
    return v7;
  }
}

void setAttributeToElement_0(const void *a1, const void *a2, uint64_t a3)
{
  FigTTMLDocumentWriterElementSetAttribute(a3, a1, a2);
}

uint64_t figTTMLDocumentWriterRegionTimeline_Register()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sRegionTimelineID = result;
  return result;
}

double figTTMLDocumentWriterRegionTimeline_Init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void figTTMLDocumentWriterRegionTimeline_Finalize(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 64);
  if (v1)
    CFRelease(v1);
}

uint64_t flom_registerFigLegibleOutputManager()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigLegibleOutputManagerID = result;
  return result;
}

uint64_t FigLegibleOutputManagerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v9;
  uint64_t Instance;
  uint64_t v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v15;
  int v16;
  dispatch_queue_t v17;
  dispatch_queue_t v18;
  NSObject *v19;
  NSObject **v20;
  uint64_t v21;
  char __str[256];
  char label[256];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v9 = a2 | a3;
  if (a4)
  {
    if (!v9)
      return FigSignalErrorAt();
  }
  else if (v9)
  {
    return FigSignalErrorAt();
  }
  if (!a5)
    return FigSignalErrorAt();
  *a5 = 0;
  MEMORY[0x19402F294](&FigLegibleOutputManagerGetTypeID_sRegisterFigLegibleOutputManagerOnce, flom_registerFigLegibleOutputManager);
  Instance = _CFRuntimeCreateInstance();
  if (!Instance)
    return FigSignalErrorAt();
  v12 = Instance;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
  *(_QWORD *)(v12 + 72) = Mutable;
  if (!Mutable
    || (v15 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], 0), (*(_QWORD *)(v12 + 64) = v15) == 0))
  {
LABEL_23:
    v21 = FigSignalErrorAt();
    goto LABEL_24;
  }
  *(_BYTE *)(v12 + 108) = 0;
  v16 = FigSubtitleRendererUseCoreTextRendererByDefault();
  *(_BYTE *)(v12 + 109) = v16;
  if (v16)
  {
    FigCoreTextSubtitleRendererCreate((uint64_t)v13, (const void **)(v12 + 112));
LABEL_11:
    snprintf(__str, 0x100uLL, "com.apple.coremedia.legibleoutput.notificationqueue<%p>", (const void *)v12);
    v17 = dispatch_queue_create(__str, 0);
    *(_QWORD *)(v12 + 24) = v17;
    if (v17)
    {
      snprintf(label, 0x100uLL, "com.apple.coremedia.legibleoutput.messagequeue<%p>", (const void *)v12);
      v18 = dispatch_queue_create(label, 0);
      *(_QWORD *)(v12 + 16) = v18;
      if (v18)
      {
        if (a4)
        {
          if (a2 | a3)
          {
            *(_QWORD *)(v12 + 32) = a2;
            *(_QWORD *)(v12 + 40) = a3;
            *(_QWORD *)(v12 + 48) = FigCFWeakReferenceHolderCreateWithReferencedObject();
          }
        }
        v19 = 0;
        *a5 = CFRetain((CFTypeRef)v12);
        goto LABEL_22;
      }
    }
    goto LABEL_23;
  }
  v20 = (NSObject **)(v12 + 120);
  v21 = FigCaptionRendererSessionCreate(0, 0, v12, (uint64_t *)(v12 + 120));
  if ((_DWORD)v21)
    goto LABEL_24;
  if (!*v20)
  {
LABEL_26:
    v19 = 0;
    goto LABEL_22;
  }
  v21 = FigCaptionSerializerCreate();
  if ((_DWORD)v21)
  {
LABEL_24:
    v19 = v21;
    goto LABEL_22;
  }
  if (!*(_QWORD *)(v12 + 128))
    goto LABEL_26;
  v19 = FigCaptionRendererSessionSetLegibleOutputDevice(*v20, 0, 0, 1, 0.0, 0.0, 320.0, 240.0);
  if (!(_DWORD)v19)
    goto LABEL_11;
LABEL_22:
  CFRelease((CFTypeRef)v12);
  return (uint64_t)v19;
}

uint64_t FigLegibleOutputManagerSetLegibleOutputsDict(dispatch_queue_t *cf, CFTypeRef a2)
{
  dispatch_queue_t *v3;
  CFTypeRef v4;
  _QWORD v6[2];

  v3 = cf;
  if (cf)
    cf = (dispatch_queue_t *)CFRetain(cf);
  v6[0] = cf;
  if (a2)
    v4 = CFRetain(a2);
  else
    v4 = 0;
  v6[1] = v4;
  dispatch_sync_f(v3[2], v6, (dispatch_function_t)flom_setLegibleOutputsDictDo);
  return 0;
}

void flom_setLegibleOutputsDictDo(const __CFDictionary ***a1)
{
  const __CFDictionary *v2;
  const __CFDictionary **v3;
  const __CFDictionary *v4;
  const __CFDictionary **v5;
  const __CFDictionary *v6;
  const __CFDictionary **v7;

  v3 = *a1;
  v2 = (const __CFDictionary *)a1[1];
  v4 = v3[7];
  v3[7] = v2;
  if (v2)
    CFRetain(v2);
  if (v4)
    CFRelease(v4);
  v5 = *a1;
  CFDictionaryApplyFunction((*a1)[9], (CFDictionaryApplierFunction)flo_finalizeFigLegibleOutputApplier, 0);
  CFDictionaryRemoveAllValues(v5[9]);
  CFDictionaryRemoveAllValues(v5[8]);
  v6 = v5[7];
  if (v6)
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)flom_rebuildFigLegibleOutputs_applier, v5);
  if (*a1)
    CFRelease(*a1);
  v7 = a1[1];
  if (v7)
    CFRelease(v7);
}

uint64_t FigLegibleOutputManagerSetVideoDisplaySize(dispatch_queue_t *cf, double a2, double a3)
{
  dispatch_queue_t *v5;
  _QWORD context[3];

  v5 = cf;
  if (cf)
    cf = (dispatch_queue_t *)CFRetain(cf);
  context[0] = cf;
  *(double *)&context[1] = a2;
  *(double *)&context[2] = a3;
  dispatch_sync_f(v5[2], context, (dispatch_function_t)flom_setVideoDisplaySizeDo);
  return 0;
}

void flom_setVideoDisplaySizeDo(uint64_t a1)
{
  const void *v1;

  *(_OWORD *)(*(_QWORD *)a1 + 80) = *(_OWORD *)(a1 + 8);
  v1 = *(const void **)a1;
  if (v1)
    CFRelease(v1);
}

uint64_t FigLegibleOutputManagerSetCaptionPipelineStrategy(dispatch_queue_t *cf, unsigned int a2)
{
  dispatch_queue_t *v3;
  _QWORD v5[2];

  v3 = cf;
  if (cf)
    cf = (dispatch_queue_t *)CFRetain(cf);
  v5[0] = cf;
  v5[1] = a2;
  dispatch_sync_f(v3[2], v5, (dispatch_function_t)flom_setCaptionPipelineStrategyDo);
  return 0;
}

void flom_setCaptionPipelineStrategyDo(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  char v3;

  v1 = *((_DWORD *)a1 + 2);
  v2 = *a1;
  *(_DWORD *)(v2 + 100) = v1;
  if (!v1)
  {
    v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    v3 = 0;
LABEL_5:
    *(_BYTE *)(v2 + 108) = v3;
  }
  CFRelease((CFTypeRef)v2);
}

uint64_t FigLegibleOutputManagerSetCaptionRenderingStrategy(dispatch_queue_t *cf, unsigned int a2)
{
  dispatch_queue_t *v3;
  _QWORD v5[2];

  v3 = cf;
  if (cf)
    cf = (dispatch_queue_t *)CFRetain(cf);
  v5[0] = cf;
  v5[1] = a2;
  dispatch_sync_f(v3[2], v5, (dispatch_function_t)flom_setCaptionRenderingStrategyDo);
  return 0;
}

void flom_setCaptionRenderingStrategyDo(uint64_t *a1)
{
  int v1;
  uint64_t v2;
  char v3;

  v1 = *((_DWORD *)a1 + 2);
  v2 = *a1;
  *(_DWORD *)(v2 + 104) = v1;
  if (!v1)
  {
    v3 = 1;
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    v3 = 0;
LABEL_5:
    *(_BYTE *)(v2 + 109) = v3;
  }
  CFRelease((CFTypeRef)v2);
}

uint64_t FigLegibleOutputManagerSetNonForcedEnabledForMediaType(dispatch_queue_t *cf, int a2, unsigned __int8 a3)
{
  dispatch_queue_t *v5;
  dispatch_queue_t *v7;
  int v8;
  int v9;

  v5 = cf;
  if (cf)
    cf = (dispatch_queue_t *)CFRetain(cf);
  v7 = cf;
  v8 = a2;
  v9 = a3;
  dispatch_sync_f(v5[2], &v7, (dispatch_function_t)flom_setNonForcedEnabledForMediaTypeDo);
  return 0;
}

void flom_setNonForcedEnabledForMediaTypeDo(uint64_t a1)
{
  int v2;
  int v3;
  CFDictionaryRef *v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  int v6;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 == 1935832172)
  {
    v6 = *(unsigned __int8 *)(a1 + 12);
    v4 = *(CFDictionaryRef **)a1;
    *(_BYTE *)(*(_QWORD *)a1 + 97) = v6;
    if (!v6)
    {
      CFDictionaryApplyFunction(v4[9], (CFDictionaryApplierFunction)flo_clearPreviousSubtitles, 0);
      v4 = *(CFDictionaryRef **)a1;
      v5 = flo_clearPreviousNativeSamples;
      goto LABEL_7;
    }
  }
  else
  {
    if (v2 != 1668047728)
      goto LABEL_8;
    v3 = *(unsigned __int8 *)(a1 + 12);
    v4 = *(CFDictionaryRef **)a1;
    *(_BYTE *)(*(_QWORD *)a1 + 96) = v3;
    if (!v3)
    {
      v5 = flo_clearPreviousClosedCaptions;
LABEL_7:
      CFDictionaryApplyFunction(v4[9], (CFDictionaryApplierFunction)v5, 0);
LABEL_8:
      v4 = *(CFDictionaryRef **)a1;
      if (!*(_QWORD *)a1)
        return;
    }
  }
  CFRelease(v4);
}

CFMutableArrayRef FigLegibleOutputManagerEnsureRenderPipelinesForFormat(dispatch_queue_t *a1, const void *a2)
{
  return flom_ensureRenderPipelinesForFormat(a1, a2, 0);
}

CFMutableArrayRef flom_ensureRenderPipelinesForFormat(dispatch_queue_t *a1, const void *a2, unsigned __int8 a3)
{
  CFMutableArrayRef Mutable;
  CFTypeRef v7;
  CFTypeRef v8;
  _QWORD v10[4];

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    if (a1)
      v7 = CFRetain(a1);
    else
      v7 = 0;
    v10[0] = v7;
    if (a2)
      v8 = CFRetain(a2);
    else
      v8 = 0;
    v10[2] = Mutable;
    v10[1] = v8;
    v10[3] = a3;
    dispatch_sync_f(a1[2], v10, (dispatch_function_t)flom_ensureRenderPipelinesForFormatDo);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

CFMutableArrayRef FigLegibleOutputManagerCreateAndRegisterRenderPipelinesForFormat(dispatch_queue_t *a1, const void *a2)
{
  return flom_ensureRenderPipelinesForFormat(a1, a2, 1u);
}

uint64_t FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipelines(uint64_t a1)
{
  uint64_t context;

  context = a1;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), &context, (dispatch_function_t)flom_forgetAboutLegibleOutputRenderPipelinesDo);
  return 0;
}

void flom_forgetAboutLegibleOutputRenderPipelinesDo(uint64_t a1)
{
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(*(_QWORD *)a1 + 64));
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(*(_QWORD *)a1 + 72), (CFDictionaryApplierFunction)flo_forgetAboutRenderPipelines, 0);
}

uint64_t FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipeline(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a1;
  v3[1] = a2;
  dispatch_sync_f(*(dispatch_queue_t *)(a1 + 16), v3, (dispatch_function_t)flom_forgetAboutLegibleOutputRenderPipelineDo);
  return 0;
}

void flom_forgetAboutLegibleOutputRenderPipelineDo(const void **a1)
{
  _QWORD *Value;
  _QWORD *v3;
  const void *v4;
  const void *v5;
  __CFDictionary **v6;
  const void *v7;
  __CFDictionary ***v8;

  Value = CFDictionaryGetValue(*((CFDictionaryRef *)*a1 + 8), a1[1]);
  if (Value)
  {
    v3 = Value;
    v4 = (const void *)Value[8];
    v5 = a1[1];
    if (v4 == v5)
    {
      if (v4)
      {
        CFRelease(v4);
        v3[8] = 0;
        v7 = a1[1];
      }
      else
      {
        v7 = 0;
      }
      v8 = (__CFDictionary ***)(v3 + 2);
    }
    else
    {
      if ((const void *)v3[9] == v5)
      {
        if (v5)
        {
          CFRelease(a1[1]);
          v3[9] = 0;
          v5 = a1[1];
        }
        v6 = (__CFDictionary **)v3[2];
      }
      else
      {
        FigAgglomeratorSetObjectForKey((__CFDictionary **)v3[2], 0, v5);
        v6 = (__CFDictionary **)v3[2];
        v5 = a1[1];
      }
      FigAgglomeratorSetObjectForKey(v6, 0, v5);
      v8 = (__CFDictionary ***)(v3 + 3);
      v7 = a1[1];
    }
    FigAgglomeratorSetObjectForKey(*v8, 0, v7);
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)*a1 + 8), a1[1]);
  }
}

double flom_init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void flom_finalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  const __CFDictionary *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 16);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v5 = *(const void **)(a1 + 64);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v6 = *(const __CFDictionary **)(a1 + 72);
  if (v6)
  {
    CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)flo_finalizeFigLegibleOutputApplier, 0);
    v7 = *(const void **)(a1 + 72);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(a1 + 72) = 0;
    }
  }
  v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v9 = *(const void **)(a1 + 112);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 112) = 0;
  }
  if (!*(_BYTE *)(a1 + 109))
  {
    v10 = *(const void **)(a1 + 120);
    if (v10)
      CFRelease(v10);
    v11 = *(const void **)(a1 + 128);
    if (v11)
      CFRelease(v11);
  }
}

__CFString *flom_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigLegibleOutputManager %p>"), a1);
  return Mutable;
}

void flo_finalizeFigLegibleOutputApplier(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  if (a2)
  {
    v3 = *(const void **)(a2 + 64);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a2 + 64) = 0;
    }
    v4 = *(const void **)(a2 + 72);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a2 + 72) = 0;
    }
    keyManager_releaseCallbackContext(*(const void ***)(a2 + 8));
    *(_QWORD *)(a2 + 8) = 0;
    if (*(_QWORD *)a2)
    {
      CFRelease(*(CFTypeRef *)a2);
      *(_QWORD *)a2 = 0;
    }
    FigAgglomeratorDispose(*(const void ***)(a2 + 16));
    *(_QWORD *)(a2 + 16) = 0;
    FigAgglomeratorDispose(*(const void ***)(a2 + 24));
    free((void *)a2);
  }
}

uint64_t flom_rebuildFigLegibleOutputs_applier(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  const __CFNumber *Value;
  void *v7;
  _BYTE *v8;
  uint64_t result;
  CFTypeRef v10;
  CMTime seconds;
  CMTime v12;

  v12 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("LegibleOutputKey_AdvanceInterval"));
  if (Value)
  {
    seconds.value = 0;
    CFNumberGetValue(Value, kCFNumberDoubleType, &seconds);
    CMTimeMakeWithSeconds(&v12, *(Float64 *)&seconds.value, 1000);
  }
  seconds = v12;
  v7 = malloc_type_calloc(1uLL, 0x50uLL, 0x10600401B4FB782uLL);
  v8 = v7;
  if (!v7)
  {
    result = FigSignalErrorAt();
    if ((_DWORD)result)
      return result;
    goto LABEL_11;
  }
  result = FigAgglomeratorNew((const void ***)v7 + 2);
  if (!(_DWORD)result)
  {
    result = FigAgglomeratorNew((const void ***)v8 + 3);
    if (!(_DWORD)result)
    {
      result = FigClosedCaptionStringConformerNew((_QWORD *)v8 + 1);
      if (!(_DWORD)result)
      {
        if (a1)
          v10 = CFRetain(a1);
        else
          v10 = 0;
        *(_QWORD *)v8 = v10;
        *(CMTime *)(v8 + 32) = seconds;
LABEL_11:
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 72), a1, v8);
        CFDictionaryGetValue(theDict, CFSTR("LegibleOutputKey_TextStylingResolution"));
        result = FigCFEqual();
        if ((_DWORD)result)
          v8[56] = 1;
        else
          v8[56] = 0;
      }
    }
  }
  return result;
}

uint64_t flo_clearPreviousClosedCaptions(uint64_t a1, uint64_t a2)
{
  return FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 64));
}

uint64_t flo_clearPreviousSubtitles(uint64_t a1, uint64_t a2)
{
  return FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 72));
}

uint64_t flo_clearPreviousNativeSamples(uint64_t a1, uint64_t a2)
{
  return FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 24), 0, *(const void **)(a2 + 72));
}

void flom_ensureRenderPipelinesForFormatDo(CFDictionaryRef **a1)
{
  CFDictionaryRef *v2;
  CFDictionaryRef *v3;

  v2 = *a1;
  if (!v2[7])
    goto LABEL_6;
  if (CFDictionaryGetCount(v2[7]) >= 1 && a1[2])
    CFDictionaryApplyFunction((*a1)[7], (CFDictionaryApplierFunction)flom_ensureRenderPipelinesForFormatDo_applier, a1);
  v2 = *a1;
  if (*a1)
LABEL_6:
    CFRelease(v2);
  v3 = a1[1];
  if (v3)
    CFRelease(v3);
}

void flom_ensureRenderPipelinesForFormatDo_applier(void *key, const __CFDictionary *a2, CFMutableArrayRef *a3)
{
  char *Value;
  CFTypeRef *v6;
  CFDictionaryRef v7;
  const __CFDictionary *v8;
  const opaqueCMFormatDescription *v9;
  uint64_t v10;
  CFTypeRef v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  int v16;
  uint64_t FigBaseObject;
  unsigned int (*v18)(uint64_t, const __CFString *, uint64_t);
  uint64_t v19;
  CFTypeRef v20;
  __int128 v21;
  uint64_t v22;

  Value = (char *)CFDictionaryGetValue(*((CFDictionaryRef *)*a3 + 9), key);
  if (CMFormatDescriptionGetMediaType(a3[1]) != 1668047728)
  {
    if (CMFormatDescriptionGetMediaType(a3[1]) != 1935832172 && CMFormatDescriptionGetMediaType(a3[1]) != 1952807028)
      return;
    v6 = (CFTypeRef *)(Value + 72);
    v11 = (CFTypeRef)*((_QWORD *)Value + 9);
    if (v11)
    {
      if (!*((_BYTE *)a3 + 24))
        goto LABEL_19;
      CFRelease(v11);
      *v6 = 0;
    }
    v12 = CFDictionaryGetValue(a2, CFSTR("LegibleOutputKey_SubTypesForNativeSamples"));
    v14 = (uint64_t)*a3;
    v13 = (uint64_t)a3[1];
    v15 = (__int128 *)(Value + 32);
    if (*((_BYTE *)*a3 + 108))
    {
      v21 = *v15;
      v22 = *((_QWORD *)Value + 6);
      if (FigCreateSubtitleRenderPipeline(v13, (uint64_t)flom_subtitleRenderPipelineDidProduceStrings, v14, (uint64_t)flom_subtitleRenderPipelineDidProduceNativeSample, v14, (uint64_t)flom_renderPipelineDidFlush, v14, v12, &v21, 0, (CFTypeRef *)Value + 9))return;
    }
    else
    {
      v21 = *v15;
      v22 = *((_QWORD *)Value + 6);
      if (FigCreateCaptionRenderPipeline(v13, (uint64_t)flom_FigCaptionRenderPipelineDidProduceStrings, v14, (uint64_t)flom_subtitleRenderPipelineDidProduceNativeSample, v14, (uint64_t)flom_renderPipelineDidFlush, v14, v12, &v21, 0, (CFTypeRef *)Value + 9))return;
    }
    v11 = *v6;
LABEL_19:
    v16 = *((unsigned __int8 *)*a3 + 97);
    FigBaseObject = FigRenderPipelineGetFigBaseObject(v11);
    v18 = *(unsigned int (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                              + 56);
    if (!v18)
      return;
    v19 = v16 ? *MEMORY[0x1E0C9AE50] : *MEMORY[0x1E0C9AE40];
    if (v18(FigBaseObject, CFSTR("DisplayNonForcedSubtitles"), v19))
      return;
    goto LABEL_24;
  }
  v6 = (CFTypeRef *)(Value + 64);
  if (*((_QWORD *)Value + 8) && !*((_BYTE *)a3 + 24))
  {
LABEL_24:
    v8 = 0;
    goto LABEL_25;
  }
  v7 = CFDictionaryCreate(0, (const void **)kFigRenderPipelineOption_SortSampleBufferQueueByOutputPTS, MEMORY[0x1E0C9AE50], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v7)
  {
    FigSignalErrorAt();
    return;
  }
  v8 = v7;
  if (*v6)
  {
    CFRelease(*v6);
    *v6 = 0;
  }
  v10 = (uint64_t)*a3;
  v9 = a3[1];
  v21 = *((_OWORD *)Value + 2);
  v22 = *((_QWORD *)Value + 6);
  if (FigCreateClosedCaptionRenderPipeline(v9, (uint64_t)flom_closedCaptionRenderPipelineDidProduceCommand, v10, (uint64_t)flom_renderPipelineDidFlush, v10, &v21, v8, (CFTypeRef *)Value + 8))goto LABEL_28;
LABEL_25:
  v20 = *v6;
  if (v20)
  {
    CFDictionaryAddValue(*((CFMutableDictionaryRef *)*a3 + 8), v20, Value);
    CFArrayAppendValue(a3[2], v20);
  }
  if (v8)
LABEL_28:
    CFRelease(v8);
}

void flom_closedCaptionRenderPipelineDidProduceCommand(const void *a1, int a2, const void *a3, __int128 *a4, dispatch_queue_t *a5)
{
  _QWORD *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  __int128 v14;

  v10 = malloc_type_calloc(1uLL, 0x38uLL, 0x10600400D19BD01uLL);
  if (a5)
    v11 = CFRetain(a5);
  else
    v11 = 0;
  *v10 = v11;
  if (a1)
    v12 = CFRetain(a1);
  else
    v12 = 0;
  v10[1] = v12;
  *((_DWORD *)v10 + 4) = a2;
  if (a3)
    v13 = CFRetain(a3);
  else
    v13 = 0;
  v10[3] = v13;
  v14 = *a4;
  v10[6] = *((_QWORD *)a4 + 2);
  *((_OWORD *)v10 + 2) = v14;
  dispatch_async_f(a5[2], v10, (dispatch_function_t)flom_closedCaptionRenderPipelineDidProduceCommandDo);
}

void flom_renderPipelineDidFlush(const void *a1, dispatch_queue_t *a2)
{
  _QWORD *v4;
  CFTypeRef v5;
  CFTypeRef v6;

  v4 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *v4 = v5;
  if (a1)
    v6 = CFRetain(a1);
  else
    v6 = 0;
  v4[1] = v6;
  dispatch_async_f(a2[2], v4, (dispatch_function_t)flom_renderPipelineDidFlushDo);
}

void flom_subtitleRenderPipelineDidProduceStrings(const void *a1, const void *a2, __int128 *a3, char a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  _QWORD *v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  __int128 v25;

  v20 = malloc_type_calloc(1uLL, 0x60uLL, 0x106004052824D3DuLL);
  if (a6)
    v21 = CFRetain((CFTypeRef)a6);
  else
    v21 = 0;
  *v20 = v21;
  if (a1)
    v22 = CFRetain(a1);
  else
    v22 = 0;
  v20[1] = v22;
  v23 = *(CFTypeRef *)(a6 + 112);
  if (v23)
    v23 = CFRetain(v23);
  v20[2] = v23;
  if (a2)
    v24 = CFRetain(a2);
  else
    v24 = 0;
  v20[3] = v24;
  v25 = *a3;
  v20[6] = *((_QWORD *)a3 + 2);
  *((_OWORD *)v20 + 2) = v25;
  *((_BYTE *)v20 + 56) = a4;
  *((_BYTE *)v20 + 57) = a5;
  *((double *)v20 + 8) = a7;
  *((double *)v20 + 9) = a8;
  *((double *)v20 + 10) = a9;
  *((double *)v20 + 11) = a10;
  dispatch_async_f(*(dispatch_queue_t *)(a6 + 16), v20, (dispatch_function_t)flom_subtitleRenderPipelineDidProduceStringsDo);
}

void flom_subtitleRenderPipelineDidProduceNativeSample(const void *a1, const void *a2, __int128 *a3, char a4, dispatch_queue_t *a5)
{
  char *v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFTypeRef v13;
  __int128 v14;

  v10 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x1020040F1C605A7uLL);
  if (a5)
    v11 = CFRetain(a5);
  else
    v11 = 0;
  *(_QWORD *)v10 = v11;
  if (a1)
    v12 = CFRetain(a1);
  else
    v12 = 0;
  *((_QWORD *)v10 + 1) = v12;
  if (a2)
    v13 = CFRetain(a2);
  else
    v13 = 0;
  *((_QWORD *)v10 + 2) = v13;
  v14 = *a3;
  *((_QWORD *)v10 + 5) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v10 + 24) = v14;
  v10[48] = a4;
  dispatch_async_f(a5[2], v10, (dispatch_function_t)flom_subtitleRenderPipelineDidProduceNativeSampleDo);
}

void flom_FigCaptionRenderPipelineDidProduceStrings(const void *a1, const void *a2, __int128 *a3, char a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  char *v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  __int128 v26;

  v20 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x106004060991E7AuLL);
  if (a6)
    v21 = CFRetain((CFTypeRef)a6);
  else
    v21 = 0;
  *(_QWORD *)v20 = v21;
  if (a1)
    v22 = CFRetain(a1);
  else
    v22 = 0;
  *((_QWORD *)v20 + 1) = v22;
  if (!*(_BYTE *)(a6 + 109))
  {
    v25 = *(CFTypeRef *)(a6 + 120);
    if (v25)
      v25 = CFRetain(v25);
    *((_QWORD *)v20 + 3) = v25;
    if (a2)
      goto LABEL_11;
LABEL_15:
    v24 = 0;
    goto LABEL_16;
  }
  v23 = *(CFTypeRef *)(a6 + 112);
  if (v23)
    v23 = CFRetain(v23);
  *((_QWORD *)v20 + 2) = v23;
  if (!a2)
    goto LABEL_15;
LABEL_11:
  v24 = CFRetain(a2);
LABEL_16:
  *((_QWORD *)v20 + 4) = v24;
  v26 = *a3;
  *((_QWORD *)v20 + 7) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v20 + 40) = v26;
  v20[64] = a4;
  v20[65] = a5;
  *((double *)v20 + 9) = a7;
  *((double *)v20 + 10) = a8;
  *((double *)v20 + 11) = a9;
  *((double *)v20 + 12) = a10;
  dispatch_async_f(*(dispatch_queue_t *)(a6 + 16), v20, (dispatch_function_t)flom_FigCaptionRenderPipelineDidProduceStringsDo);
}

void flom_closedCaptionRenderPipelineDidProduceCommandDo(char *a1)
{
  const void *v2;
  _QWORD *Value;
  uint64_t v4;
  CFTypeRef v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  CMTime v11;
  char v12;

  v12 = 0;
  v2 = (const void *)*((_QWORD *)a1 + 1);
  if (v2)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a1 + 64), v2);
    if (Value)
    {
      v4 = (uint64_t)Value;
      if (!FigClosedCaptionStringConformerPushCommand(Value[1], *((_DWORD *)a1 + 4), *((const __CFDictionary **)a1 + 3), *((unsigned __int8 *)Value + 56), &v12, *(double *)(*(_QWORD *)a1 + 80), *(double *)(*(_QWORD *)a1 + 88))&& *(_BYTE *)(*(_QWORD *)a1 + 96)&& v12 != 0)
      {
        v6 = FigClosedCaptionStringConformerCopyCurrentConformedStrings(*(_QWORD *)(v4 + 8));
        v7 = *(_QWORD *)a1;
        v8 = (const void *)*((_QWORD *)a1 + 1);
        v11 = *(CMTime *)(a1 + 32);
        flom_addAttributedStringsAndInvokeCallback(v7, v4, v8, &v11, v6);
        if (v6)
          CFRelease(v6);
      }
    }
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v9 = (const void *)*((_QWORD *)a1 + 1);
  if (v9)
    CFRelease(v9);
  v10 = (const void *)*((_QWORD *)a1 + 3);
  if (v10)
    CFRelease(v10);
  free(a1);
}

void flom_addAttributedStringsAndInvokeCallback(uint64_t a1, uint64_t a2, const void *a3, CMTime *a4, const void *a5)
{
  CMTime v8;

  if (!FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), a5, a3))
  {
    v8 = *a4;
    flom_collectAttributedStringsAndSampleBuffersAndInvokeCallbackForItemTime(a1, a2, &v8);
  }
}

void flom_collectAttributedStringsAndSampleBuffersAndInvokeCallbackForItemTime(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CFMutableArrayRef v6;
  const __CFAllocator *v7;
  CFMutableArrayRef Mutable;
  const __CFArray *v9;
  CFDictionaryRef v10;
  const void *v11;
  CFDictionaryRef v12;
  uint64_t v13;
  const void *v14;
  _QWORD *v15;
  CFTypeRef v16;
  const void *v17[4];
  CMTime time;
  const __CFString *v19;
  uint64_t v20;
  CFRange v21;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = FigAgglomeratorCopyCurrentAgglomeration(*(CFDictionaryRef **)(a2 + 24));
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v9 = FigAgglomeratorCopyCurrentAgglomeration(*(CFDictionaryRef **)(a2 + 16));
  v21.length = CFArrayGetCount(v9);
  v21.location = 0;
  CFArrayApplyFunction(v9, v21, (CFArrayApplierFunction)flom_combineArrayOfArraysIntoFlatArray, Mutable);
  CFRelease(v9);
  time = *a3;
  v10 = CMTimeCopyAsDictionary(&time, v7);
  v11 = *(const void **)a2;
  time.value = (CMTimeValue)CFSTR("LegibleOutputKey");
  *(_QWORD *)&time.timescale = CFSTR("LegibleOutputAttributedString");
  v17[0] = v11;
  v17[1] = Mutable;
  time.epoch = (CMTimeEpoch)CFSTR("FigTime");
  v19 = CFSTR("LegibleOutputNativeSamples");
  v17[2] = v10;
  v17[3] = v6;
  v12 = CFDictionaryCreate(v7, (const void **)&time, v17, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(v10);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(const void **)(a1 + 48);
  v15 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
  *v15 = CFRetain(v12);
  v15[1] = v13;
  if (v14)
    v16 = CFRetain(v14);
  else
    v16 = 0;
  v15[2] = v16;
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 24), v15, (dispatch_function_t)flom_invokeCallbackAndDisposeContext);
  CFRelease(v12);
  CFRelease(Mutable);
  CFRelease(v6);
}

void flom_combineArrayOfArraysIntoFlatArray(const void *a1, __CFArray *a2)
{
  CFTypeID v4;
  CFRange v5;

  v4 = CFGetTypeID(a1);
  if (v4 == CFArrayGetTypeID())
  {
    v5.length = CFArrayGetCount((CFArrayRef)a1);
    v5.location = 0;
    CFArrayAppendArray(a2, (CFArrayRef)a1, v5);
  }
}

void flom_invokeCallbackAndDisposeContext(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  if (*(_QWORD *)(a1 + 8))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        (*(void (**)(_QWORD, uint64_t))(a1 + 8))(*(_QWORD *)a1, v2);
        CFRelease(v3);
      }
    }
  }
  CFRelease(*(CFTypeRef *)a1);
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  free((void *)a1);
}

void flom_renderPipelineDidFlushDo(_QWORD *a1)
{
  const void *v2;
  const void *Value;
  const void *v4;
  __CFDictionary **v5;
  const void *v6;
  uint64_t v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  const void *v11;

  v2 = (const void *)a1[1];
  if (v2)
  {
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(*a1 + 64), v2);
    if (Value)
    {
      v4 = Value;
      FigAgglomeratorSetObjectForKey(*((__CFDictionary ***)Value + 2), 0, *((const void **)Value + 8));
      FigAgglomeratorSetObjectForKey(*((__CFDictionary ***)v4 + 2), 0, *((const void **)v4 + 9));
      FigAgglomeratorSetObjectForKey(*((__CFDictionary ***)v4 + 3), 0, *((const void **)v4 + 9));
      v5 = *(__CFDictionary ***)v4;
      v7 = *(_QWORD *)(*a1 + 40);
      v6 = *(const void **)(*a1 + 48);
      v8 = malloc_type_calloc(1uLL, 0x18uLL, 0xE00403260BBE2uLL);
      if (v5)
        v9 = CFRetain(v5);
      else
        v9 = 0;
      *v8 = v9;
      v8[1] = v7;
      if (v6)
        v10 = CFRetain(v6);
      else
        v10 = 0;
      v8[2] = v10;
      dispatch_async_f(*(dispatch_queue_t *)(*a1 + 24), v8, (dispatch_function_t)flom_invokeFlushCallbackAndDisposeContext);
    }
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v11 = (const void *)a1[1];
  if (v11)
    CFRelease(v11);
  free(a1);
}

void flom_invokeFlushCallbackAndDisposeContext(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  if (a1[1])
  {
    if (a1[2])
    {
      v2 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v2)
      {
        v3 = (const void *)v2;
        ((void (*)(_QWORD, uint64_t))a1[1])(*a1, v2);
        CFRelease(v3);
      }
    }
  }
  if (*a1)
    CFRelease((CFTypeRef)*a1);
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
  free(a1);
}

void flom_subtitleRenderPipelineDidProduceStringsDo(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const __CFDictionary *MutableCopy;
  int updated;
  __CFArray *v9;
  unint64_t v10;
  __int16 v11;
  __int128 v12;
  char v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  _BYTE v19[28];
  __int16 v20;
  __int16 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int16 v26;
  char v27;
  void *value;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  const __CFDictionary *v32;
  __CFArray *v33;

  v32 = 0;
  v33 = 0;
  v2 = *(const void **)(a1 + 8);
  if (!v2)
    goto LABEL_33;
  v3 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a1 + 64), v2);
  if (!v3)
    goto LABEL_33;
  v4 = (uint64_t)v3;
  v5 = *(const __CFDictionary **)(a1 + 24);
  if (v5)
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + 97) || *(_BYTE *)(a1 + 56))
    {
      value = 0;
      if (!CFDictionaryGetValueIfPresent(v5, CFSTR("SubtitleSerializedCaptionGroup"), (const void **)&value))
      {
        MutableCopy = 0;
        v6 = *(const __CFDictionary **)(a1 + 24);
LABEL_14:
        v10 = *(_QWORD *)(a1 + 16);
        v11 = *(_WORD *)(a1 + 56);
        v12 = *(_OWORD *)(a1 + 80);
        v30 = *(_OWORD *)(a1 + 64);
        v31 = v12;
        v29 = *(_OWORD *)(*(_QWORD *)a1 + 80);
        v13 = *(_BYTE *)(v4 + 56);
        *(_DWORD *)v19 = 0;
        *(_OWORD *)&v19[4] = v10;
        *(_QWORD *)&v19[20] = v6;
        v20 = v11;
        v21 = 0;
        v22 = v30;
        v23 = v12;
        v24 = v29;
        v25 = v13;
        v26 = 0;
        v27 = 0;
        if (FigSubtitleStringConformerCopyConformedStringsForSubtitleSample((unsigned int *)v19, &v33))
          goto LABEL_18;
        v9 = v33;
        goto LABEL_16;
      }
      if (!FigCaptionSerializerCreateCaptionGroupFromCFData())
      {
        v6 = v32;
        if (v32)
        {
          MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a1 + 24));
          updated = updateSubtitleSampleWithFigCaptionGroup(MutableCopy, (uint64_t)v32);
          v6 = MutableCopy;
          if (updated)
            goto LABEL_18;
        }
        else
        {
          MutableCopy = 0;
        }
        goto LABEL_14;
      }
    }
LABEL_33:
    MutableCopy = 0;
    goto LABEL_18;
  }
  v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  MutableCopy = 0;
  v33 = v9;
LABEL_16:
  if (v9)
  {
    v14 = *(_QWORD *)a1;
    v15 = *(const void **)(a1 + 8);
    *(_OWORD *)v19 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)&v19[16] = *(_QWORD *)(a1 + 48);
    flom_addAttributedStringsAndInvokeCallback(v14, v4, v15, (CMTime *)v19, v9);
  }
LABEL_18:
  if (v33)
    CFRelease(v33);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v32)
    CFRelease(v32);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v16 = *(const void **)(a1 + 16);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a1 + 8);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a1 + 24);
  if (v18)
    CFRelease(v18);
  free((void *)a1);
}

uint64_t updateSubtitleSampleWithFigCaptionGroup(const __CFDictionary *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  const __CFNumber *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  uint64_t SliceCount;
  const __CFDictionary *Mutable;
  CFMutableDictionaryRef v12;
  const __CFDictionary *v13;
  uint64_t v14;
  uint64_t CaptionData;
  uint64_t v16;
  __CFAttributedString *v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFDictionary *v20;
  const __CFDictionary *v21;
  const void *v22;
  const __CFAttributedString *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  double v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  double v38;
  __CFAttributedString *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t Mirrored;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  const void *Float32;
  BOOL v60;
  const void *v61;
  const void *v62;
  const void *v63;
  CFRange v64;
  __CFAttributedString *v65;
  const __CFString *v66;
  const void *v67;
  uint64_t v68;
  CFTypeRef v70;
  CFTypeRef value;
  const __CFDictionary *v72;
  const void *v73;
  const void *v74;
  const __CFString *v75;
  CFStringRef v76;
  const __CFString *v77;
  const __CFString *v78;
  const void *v79;
  const void *v80;
  const __CFString *v81;
  const __CFString *v82;
  const __CFAllocator *v83;
  const __CFString *attrName;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  const __CFDictionary *v92;
  const __CFDictionary *v93;
  void *v94;
  void *v95;
  void *key;
  unsigned int v97;
  __CFArray *theArray;
  const void *v99;
  int v100;
  int v101;
  int v102;
  CMTime v103;
  CMTime v104;
  CMTime v105;
  CFRange effectiveRange;
  CMTimeEpoch epoch;
  CMTime v108;
  CMTime v109;
  CMTime v110;
  CMTime v111;
  int valuePtr;
  __CFAttributedString *v113;

  v113 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!theArray)
    return 4294954510;
  valuePtr = 0;
  v5 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("SubtitleFormat"));
  CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr);
  if (a2)
  {
    memset(&v111, 0, sizeof(v111));
    CMTimeMake(&v111, 0, 0);
    memset(&v110, 0, sizeof(v110));
    CMTimeMake(&v110, 0, 0);
    v6 = (const __CFArray *)CFDictionaryGetValue(a1, CFSTR("SubtitleTimeRange"));
    if (v6)
    {
      v7 = v6;
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, 0);
      v9 = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 1);
      memset(&v109, 0, sizeof(v109));
      CMTimeMakeFromDictionary(&v109, ValueAtIndex);
      memset(&v108, 0, sizeof(v108));
      CMTimeMakeFromDictionary(&v108, v9);
      v111 = v109;
      v110 = v108;
    }
    SliceCount = FigCaptionGroupGetSliceCount();
    Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!Mutable || (v12 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0)
    {
      v13 = 0;
      v68 = 4294954510;
      if (!Mutable)
        goto LABEL_74;
      goto LABEL_73;
    }
    v13 = v12;
    v72 = a1;
    if (SliceCount >= 1)
    {
      v14 = 0;
      v97 = 0;
      key = (void *)*MEMORY[0x1E0CA2C38];
      v95 = (void *)*MEMORY[0x1E0CA3468];
      v94 = (void *)*MEMORY[0x1E0CA2C98];
      v90 = (void *)*MEMORY[0x1E0CA29A8];
      v89 = (void *)*MEMORY[0x1E0CA2990];
      v88 = (void *)*MEMORY[0x1E0CA2998];
      v87 = (void *)*MEMORY[0x1E0CA29A0];
      v86 = (void *)*MEMORY[0x1E0CA2980];
      v85 = (void *)*MEMORY[0x1E0CA2988];
      attrName = (const __CFString *)*MEMORY[0x1E0CA2B40];
      v82 = (const __CFString *)*MEMORY[0x1E0CA2B48];
      v81 = (const __CFString *)*MEMORY[0x1E0CA2B20];
      v78 = (const __CFString *)*MEMORY[0x1E0CA29E0];
      value = (CFTypeRef)*MEMORY[0x1E0CA2BA0];
      v74 = (const void *)*MEMORY[0x1E0CA2BA8];
      v80 = (const void *)*MEMORY[0x1E0CA2BB0];
      v76 = (CFStringRef)*MEMORY[0x1E0CA2A80];
      v75 = (const __CFString *)*MEMORY[0x1E0CA2A88];
      v77 = (const __CFString *)*MEMORY[0x1E0CA29D8];
      v70 = (CFTypeRef)*MEMORY[0x1E0CA2B88];
      v73 = (const void *)*MEMORY[0x1E0CA2B90];
      v79 = (const void *)*MEMORY[0x1E0CA2B98];
      v83 = v4;
      v92 = v12;
      v93 = Mutable;
      v91 = SliceCount;
      while (1)
      {
        CaptionData = FigCaptionGroupGetCaptionData();
        if (CaptionData)
          break;
LABEL_67:
        if (SliceCount == ++v14)
          goto LABEL_71;
      }
      v16 = CaptionData;
      if (v113)
      {
        CFRelease(v113);
        v113 = 0;
      }
      memset(&v109, 0, sizeof(v109));
      FigCaptionGroupGetDurationBeforeSlice();
      memset(&v108, 0, sizeof(v108));
      FigCaptionGroupGetDurationAfterSlice();
      effectiveRange = *(CFRange *)&v111.value;
      epoch = v111.epoch;
      v105 = v110;
      v104 = v109;
      v103 = v108;
      v97 = FigCaptionDataToMarkupBasedAttributedString(v4, v16, (uint64_t)&effectiveRange, &v105, &v104, (uint64_t)&v103, &v113, Mutable, v13);
      if (valuePtr != 1937142900 && valuePtr != 2021028980 && valuePtr != 2004251764
        || (v17 = v113, (v18 = (const __CFDictionary *)CFDictionaryGetValue(Mutable, key)) == 0)
        || (v19 = (const __CFDictionary *)CFDictionaryGetValue(v18, v95)) == 0
        || (v20 = (const __CFDictionary *)CFDictionaryGetValue(v19, v94)) == 0)
      {
LABEL_66:
        CFArrayAppendValue(theArray, v113);
        goto LABEL_67;
      }
      v21 = v20;
      v22 = CFDictionaryGetValue(v20, v90);
      v23 = v17;
      v24 = CFDictionaryGetValue(v21, v89);
      v25 = CFDictionaryGetValue(v21, v88);
      v26 = CFDictionaryGetValue(v21, v87);
      v27 = CFDictionaryGetValue(v21, v86);
      v99 = CFDictionaryGetValue(v21, v85);
      FigGeometryDimensionMake();
      v100 = v28;
      FigGeometryDimensionMake();
      v30 = v29;
      v31 = FigGeometryDimensionMake();
      v101 = v32;
      v33 = *(double *)&v31;
      FigGeometryDimensionMake();
      v35 = v34;
      v36 = FigGeometryDimensionMake();
      v102 = v37;
      v38 = *(double *)&v36;
      effectiveRange.location = 0;
      effectiveRange.length = 0;
      v39 = v23;
      if (CFAttributedStringGetAttribute(v23, 0, attrName, &effectiveRange))
      {
        if (v24)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v100 = v40;
        }
        if (v25)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v35 = v41;
        }
        v42 = v30;
        if (v26)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v42 = v43;
        }
        SliceCount = v91;
        if (v27)
        {
          v44 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v102 = v45;
          v38 = *(double *)&v44;
        }
        if (v99)
        {
          v46 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v101 = v47;
          v33 = *(double *)&v46;
        }
        if (FigCFEqual())
        {
          FigGeometryDimensionMakeMirrored();
          v35 = v48;
          Mirrored = FigGeometryDimensionMakeMirrored();
          v102 = v50;
          v38 = *(double *)&Mirrored;
        }
        v4 = v83;
        v51 = v100;
      }
      else
      {
        v51 = v100;
        if (v22)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v51 = v52;
        }
        v42 = v30;
        if (v25)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v42 = v53;
        }
        if (v26)
        {
          FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v35 = v54;
        }
        SliceCount = v91;
        if (v27)
        {
          v55 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v101 = v56;
          v33 = *(double *)&v55;
        }
        if (v99)
        {
          v57 = FigTextMarkupDimensionMakeFromSimplifiedDictionary();
          v102 = v58;
          v38 = *(double *)&v57;
        }
        v4 = v83;
      }
      if (v51 == 622862368)
      {
        Float32 = (const void *)FigCFNumberCreateFloat32();
        CFAttributedStringSetAttribute(v39, effectiveRange, v82, Float32);
        if (Float32)
          CFRelease(Float32);
      }
      v60 = v42 == 622862368;
      v13 = v92;
      if (v60)
      {
        v61 = (const void *)FigCFNumberCreateFloat32();
        CFAttributedStringSetAttribute(v39, effectiveRange, v81, v61);
        if (v61)
          CFRelease(v61);
      }
      if (v101 == 622862368)
      {
        v62 = v80;
        if (v33 == 0.0 || (v62 = v74, v33 == 50.0) || (v62 = value, v33 == 100.0))
          CFAttributedStringSetAttribute(v39, effectiveRange, v78, v62);
      }
      Mutable = v93;
      if (v35 == 1818848869)
      {
        v63 = (const void *)FigCFNumberCreateFloat32();
        v64 = effectiveRange;
        v65 = v39;
        v66 = v76;
      }
      else
      {
        if (v35 != 622862368)
        {
LABEL_61:
          if (v102 == 622862368)
          {
            v67 = v79;
            if (v38 == 0.0 || (v67 = v73, v38 == 50.0) || (v67 = v70, v38 == 100.0))
              CFAttributedStringSetAttribute(v39, effectiveRange, v77, v67);
          }
          goto LABEL_66;
        }
        v63 = (const void *)FigCFNumberCreateFloat32();
        v64 = effectiveRange;
        v65 = v39;
        v66 = v75;
      }
      CFAttributedStringSetAttribute(v65, v64, v66, v63);
      if (v63)
        CFRelease(v63);
      goto LABEL_61;
    }
    v97 = 0;
LABEL_71:
    a1 = v72;
    v68 = v97;
  }
  else
  {
    v13 = 0;
    Mutable = 0;
    v68 = 0;
  }
  CFDictionarySetValue(a1, CFSTR("SubtitleContent"), theArray);
  if (Mutable)
LABEL_73:
    CFRelease(Mutable);
LABEL_74:
  if (v13)
    CFRelease(v13);
  if (v113)
    CFRelease(v113);
  CFRelease(theArray);
  return v68;
}

void flom_subtitleRenderPipelineDidProduceNativeSampleDo(void *a1)
{
  const void *v2;
  __CFDictionary ***Value;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  CMTime v8;

  if (*(_BYTE *)(*(_QWORD *)a1 + 97) || *((_BYTE *)a1 + 48))
  {
    v2 = (const void *)*((_QWORD *)a1 + 1);
    if (v2)
    {
      Value = (__CFDictionary ***)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a1 + 64), v2);
      if (Value)
      {
        v4 = (uint64_t)Value;
        if (!FigAgglomeratorSetObjectForKey(Value[3], *((const void **)a1 + 2), *((const void **)a1 + 1)))
        {
          v5 = *(_QWORD *)a1;
          v8 = *(CMTime *)((_BYTE *)a1 + 1);
          flom_collectAttributedStringsAndSampleBuffersAndInvokeCallbackForItemTime(v5, v4, &v8);
        }
      }
    }
  }
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v6 = (const void *)*((_QWORD *)a1 + 1);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)a1 + 2);
  if (v7)
    CFRelease(v7);
  free(a1);
}

void flom_FigCaptionRenderPipelineDidProduceStringsDo(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __CFArray *v9;
  __CFDictionary *MutableCopy;
  CFArrayRef v11;
  __CFDictionary *v12;
  const __CFAllocator *v13;
  uint64_t v14;
  uint64_t CaptionData;
  uint64_t (*v16)(uint64_t);
  const __CFString *v17;
  int updated;
  __int16 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  _BYTE v28[28];
  __int16 v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int16 v35;
  char v36;
  void *value;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __CFDictionary *v41;
  __CFArray *v42;

  v41 = 0;
  v42 = 0;
  v2 = *(const void **)(a1 + 8);
  if (!v2)
    goto LABEL_25;
  v3 = CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a1 + 64), v2);
  if (!v3)
    goto LABEL_25;
  v4 = (uint64_t)v3;
  v5 = *(const __CFDictionary **)(a1 + 32);
  if (!v5)
  {
    v9 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
    MutableCopy = 0;
    v11 = 0;
    v42 = v9;
LABEL_29:
    if (v9)
    {
      v22 = *(_QWORD *)a1;
      v23 = *(const void **)(a1 + 8);
      *(_OWORD *)v28 = *(_OWORD *)(a1 + 40);
      *(_QWORD *)&v28[16] = *(_QWORD *)(a1 + 56);
      flom_addAttributedStringsAndInvokeCallback(v22, v4, v23, (CMTime *)v28, v9);
    }
    goto LABEL_31;
  }
  if (!*(_BYTE *)(*(_QWORD *)a1 + 97) && !*(_BYTE *)(a1 + 64))
    goto LABEL_25;
  if (*(_BYTE *)(*(_QWORD *)a1 + 109))
  {
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v8 = 0;
    v6 = *(_QWORD *)(a1 + 24);
    v7 = 1;
  }
  value = 0;
  if (!CFDictionaryGetValueIfPresent(v5, CFSTR("SubtitleSerializedCaptionGroup"), (const void **)&value))
  {
    MutableCopy = 0;
    v11 = 0;
    v12 = *(__CFDictionary **)(a1 + 32);
    goto LABEL_27;
  }
  if (FigCaptionSerializerCreateCaptionGroupFromCFData())
  {
LABEL_25:
    v11 = 0;
    MutableCopy = 0;
    goto LABEL_31;
  }
  v12 = v41;
  if (!v41)
  {
    MutableCopy = 0;
    v11 = 0;
    goto LABEL_27;
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFDictionaryRef *)(a1 + 32));
  if (FigCaptionGroupGetSliceCount() < 1)
  {
LABEL_21:
    v11 = CFArrayCreate(v13, 0, 0, MEMORY[0x1E0C9B378]);
    if (v11)
    {
      CFDictionarySetValue(MutableCopy, CFSTR("SubtitleContent"), v11);
      v12 = MutableCopy;
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  v14 = 0;
  while (1)
  {
    CaptionData = FigCaptionGroupGetCaptionData();
    v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
    if (v16)
      break;
    v17 = &stru_1E2FD85F8;
    if (CaptionData)
      goto LABEL_19;
LABEL_20:
    if (++v14 >= FigCaptionGroupGetSliceCount())
      goto LABEL_21;
  }
  v17 = (const __CFString *)v16(CaptionData);
  if (!CaptionData)
    goto LABEL_20;
LABEL_19:
  if (CFStringGetLength(v17) <= 0)
    goto LABEL_20;
  updated = updateSubtitleSampleWithFigCaptionGroup(MutableCopy, (uint64_t)v41);
  v11 = 0;
  v12 = MutableCopy;
  if (!updated)
  {
LABEL_27:
    v19 = *(_WORD *)(a1 + 64);
    v20 = *(_OWORD *)(a1 + 88);
    v39 = *(_OWORD *)(a1 + 72);
    v40 = v20;
    v38 = *(_OWORD *)(*(_QWORD *)a1 + 80);
    v21 = *(_BYTE *)(v4 + 56);
    *(_DWORD *)v28 = v7;
    *(_QWORD *)&v28[4] = v8;
    *(_QWORD *)&v28[12] = v6;
    *(_QWORD *)&v28[20] = v12;
    v29 = v19;
    v30 = 0;
    v31 = v39;
    v32 = v20;
    v33 = v38;
    v34 = v21;
    v35 = 0;
    v36 = 0;
    if (!FigSubtitleStringConformerCopyConformedStringsForSubtitleSample((unsigned int *)v28, &v42))
    {
      v9 = v42;
      goto LABEL_29;
    }
  }
LABEL_31:
  if (v42)
    CFRelease(v42);
  if (v11)
    CFRelease(v11);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v41)
    CFRelease(v41);
  v24 = *(const void **)(a1 + 24);
  if (v24)
    CFRelease(v24);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  v25 = *(const void **)(a1 + 16);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(a1 + 8);
  if (v26)
    CFRelease(v26);
  v27 = *(const void **)(a1 + 32);
  if (v27)
    CFRelease(v27);
  free((void *)a1);
}

void flo_forgetAboutRenderPipelines(uint64_t a1, uint64_t a2)
{
  const void *v3;
  const void *v4;

  FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 64));
  v3 = *(const void **)(a2 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a2 + 64) = 0;
  }
  FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 16), 0, *(const void **)(a2 + 72));
  FigAgglomeratorSetObjectForKey(*(__CFDictionary ***)(a2 + 24), 0, *(const void **)(a2 + 72));
  v4 = *(const void **)(a2 + 72);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 72) = 0;
  }
}

uint64_t CreatePesPrivateForPSLPCM(_QWORD *a1)
{
  void *v2;

  a1[105] = PSLPCMProcessData;
  a1[106] = PSLPCMCleanPrivateData;
  a1[107] = PSLPCMDeletePrivateData;
  v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x10000401C7CE48EuLL);
  a1[6] = v2;
  if (v2)
    return 0;
  else
    return FigSignalErrorAt();
}

uint64_t PSLPCMProcessData(uint64_t a1, CMBlockBufferRef theSourceBuffer, size_t offsetToData, char *__src, unint64_t a5, uint64_t a6)
{
  unint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  OpaqueCMBlockBuffer *v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  unsigned int started;
  uint64_t v21;
  int v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  size_t offset;
  size_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  int v38;

  v6 = a5;
  v7 = __src;
  v8 = offsetToData;
  v11 = *(_QWORD *)(a1 + 48);
  v38 = 0;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v34 = 0;
  if (*(_BYTE *)(a6 + 24))
  {
    v12 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)v11 = *(_OWORD *)a6;
    *(_OWORD *)(v11 + 16) = v12;
    v13 = 7;
    *(_QWORD *)(v11 + 32) = 7;
  }
  else
  {
    v13 = *(_QWORD *)(v11 + 32);
    if (!v13)
    {
      v16 = 0;
      offset = 0;
      goto LABEL_25;
    }
  }
  if (v13 >= a5)
    v14 = a5;
  else
    v14 = v13;
  v15 = v11 - v13;
  if (__src)
  {
    memcpy((void *)(v15 + 63), __src, v14);
    v16 = 0;
    offset = 0;
    v7 += v14;
  }
  else
  {
    v17 = CMBlockBufferCopyDataBytes(theSourceBuffer, offsetToData, v14, (void *)(v15 + 63));
    if ((_DWORD)v17)
      goto LABEL_62;
    v7 = 0;
    if (v14 == 7)
      v16 = theSourceBuffer;
    else
      v16 = 0;
    if (v14 == 7)
      v18 = v8;
    else
      v18 = 0;
    offset = v18;
    v8 += v14;
  }
  v6 -= v14;
  v19 = *(_QWORD *)(v11 + 32) - v14;
  *(_QWORD *)(v11 + 32) = v19;
  if (v19)
  {
LABEL_25:
    v22 = 0;
    goto LABEL_26;
  }
  v17 = PSLPCMCheckHeader((_BYTE *)(v11 + 56));
  if ((_DWORD)v17)
  {
LABEL_62:
    v28 = v17;
LABEL_63:
    PesErrorHandling(a1, v28);
    return v28;
  }
  started = PSLPCMGetByteOffsetToStartFrameOfPacket(v11 + 56);
  v21 = started;
  if (started > 3)
    v21 = started - 4;
  *(_QWORD *)(v11 + 48) = v21;
  if (!v21 || !*(_BYTE *)(v11 + 40))
    goto LABEL_25;
  v22 = v21 - *(_DWORD *)(a1 + 624) + *(_DWORD *)(a1 + 616);
  *(_QWORD *)(v11 + 48) = 0;
LABEL_26:
  v23 = *(_QWORD *)(v11 + 48);
  if (v23)
  {
    if (v23 >= v6)
      v23 = v6;
    v6 -= v23;
    v24 = v7 == 0;
    if (v7)
      v7 += v23;
    else
      v7 = 0;
    if (!v24)
      v23 = 0;
    v8 += v23;
  }
  while (v6)
  {
    if (v35 || !*(_BYTE *)(v11 + 40))
    {
      if (!*(_BYTE *)(v11 + 24))
        return 0;
      v17 = PSLPCMGetSampleFrequency(v11 + 56, &v38);
      if ((_DWORD)v17)
        goto LABEL_62;
      if (v38 != *(_DWORD *)(a1 + 768))
        FigMPEG2ParserSetAudioCharacteristics(a1, v38);
      v17 = PSLPCMGetSamplesPerFrame(v11 + 56, &v37);
      if ((_DWORD)v17)
        goto LABEL_62;
      v17 = PSLPCMGetBytesPerFrame(v11 + 56, &v36);
      if ((_DWORD)v17)
        goto LABEL_62;
      v25 = v36;
      v26 = v25 * PSLPCMGetFrameCountOfPacket(v11 + 56) + 7;
      *(_QWORD *)(a1 + 624) = v26;
      if (v16)
        v27 = PesAddBlockBufferToFrameBlockBuffer(a1, v16, offset, 7uLL, v26, &v34, &v35);
      else
        v27 = PesAddMemoryToFrameMemory(a1, (const void *)(v11 + 56), 7uLL, v26, &v34, &v35);
      v28 = v27;
      if ((_DWORD)v27)
        goto LABEL_63;
      v29 = v37;
      *(_DWORD *)(a1 + 584) = PSLPCMGetFrameCountOfPacket(v11 + 56) * v29;
      v30 = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)v11;
      *(_OWORD *)(a1 + 496) = v30;
      *(_WORD *)(v11 + 24) = 0;
      *(_BYTE *)(v11 + 40) = 1;
      v35 = 0;
    }
    if (v7)
      v31 = PesAddMemoryToFrameMemory(a1, v7, v6, *(_QWORD *)(a1 + 624), &v34, &v35);
    else
      v31 = PesAddBlockBufferToFrameBlockBuffer(a1, theSourceBuffer, v8, v6, *(_QWORD *)(a1 + 624), &v34, &v35);
    v28 = v31;
    if ((_DWORD)v31)
      goto LABEL_63;
    v6 -= v34;
    v8 += v34;
    if (v35)
    {
      v17 = FigMPEG2AudioFrameQueueEntryAdjustTimestampsAndEmit(a1, a1 + 456);
      if ((_DWORD)v17)
        goto LABEL_62;
      v8 += v22;
      if (v22)
        v6 = (v22 + (_DWORD)v6) & ~((v22 + (int)v6) >> 31);
      PesCleanAfterFrameEmit(a1);
      *(_BYTE *)(v11 + 40) = 0;
    }
  }
  return 0;
}

uint64_t PSLPCMCleanPrivateData(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 48);
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  return result;
}

void PSLPCMDeletePrivateData(uint64_t a1)
{
  free(*(void **)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
}

uint64_t FigSupportsIOSurfaceTimingInfo()
{
  return 0;
}

uint64_t FigGetIOSurfaceTimingStatsFromTimingInfoDictionary()
{
  return 4294954514;
}

uint64_t FigSampleBufferRenderSynchronizerCreateWithOptions(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t OnlyTimebase;
  uint64_t DerivedStorage;
  uint64_t v7;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v9;
  OpaqueCMClock *HostTimeClock;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v12;

  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a3)
    return 4294950926;
  FigSampleBufferRenderSynchronizerGetClassID();
  OnlyTimebase = CMDerivedObjectCreate();
  if ((_DWORD)OnlyTimebase)
    return OnlyTimebase;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = FigReentrantMutexCreate();
  *(_QWORD *)DerivedStorage = v7;
  if (!v7)
    return 4294950924;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(DerivedStorage + 24) = Mutable;
  if (!Mutable)
    return 4294950924;
  v9 = CFArrayCreateMutable(0, 0, 0);
  *(_QWORD *)(DerivedStorage + 40) = v9;
  if (!v9)
    return 4294950924;
  *(_DWORD *)(DerivedStorage + 48) = 0;
  *(_BYTE *)(DerivedStorage + 52) = 0;
  HostTimeClock = CMClockGetHostTimeClock();
  OnlyTimebase = CMTimebaseCreateWithSourceClock(a1, HostTimeClock, (CMTimebaseRef *)(DerivedStorage + 8));
  if ((_DWORD)OnlyTimebase)
    return OnlyTimebase;
  if (*(_QWORD *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  OnlyTimebase = CMTimebaseCreateReadOnlyTimebase();
  if ((_DWORD)OnlyTimebase)
    return OnlyTimebase;
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t synchronizer_invalidate()
{
  uint64_t DerivedStorage;
  __CFArray *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    MEMORY[0x19402EA0C]();
  if (!*(_BYTE *)(DerivedStorage + 53))
  {
    *(_BYTE *)(DerivedStorage + 53) = 1;
    if (*(_QWORD *)(DerivedStorage + 8))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
    v1 = *(__CFArray **)(DerivedStorage + 24);
    if (v1)
    {
      CFArrayRemoveAllValues(v1);
      v2 = *(const void **)(DerivedStorage + 24);
      if (v2)
      {
        CFRelease(v2);
        *(_QWORD *)(DerivedStorage + 24) = 0;
      }
    }
    v3 = *(const void **)(DerivedStorage + 32);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 32) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 40);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(DerivedStorage + 40) = 0;
    }
    v5 = *(const void **)(DerivedStorage + 8);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(DerivedStorage + 8) = 0;
    }
    v6 = *(const void **)(DerivedStorage + 16);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
  }
  if (*(_QWORD *)DerivedStorage)
    MEMORY[0x19402EA24]();
  return 0;
}

uint64_t synchronizer_finalize()
{
  uint64_t *DerivedStorage;
  uint64_t result;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  synchronizer_invalidate();
  result = *DerivedStorage;
  if (*DerivedStorage)
    return FigSimpleMutexDestroy();
  return result;
}

__CFString *synchronizer_copyDebugDesc(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  uint64_t DerivedStorage;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 53))
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSampleBufferRenderSynchronizer=%p retainCount=%d%s allocator=%p"), a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(" rate=%1.3f"), *(float *)(DerivedStorage + 48));
  CFStringAppendFormat(Mutable, 0, CFSTR(" masterTimebase=%@"), *(_QWORD *)(DerivedStorage + 8));
  CFStringAppendFormat(Mutable, 0, CFSTR(" readonlyTimebase=%@"), *(_QWORD *)(DerivedStorage + 16));
  CFStringAppendFormat(Mutable, 0, CFSTR(" audioRenderers=%@"), *(_QWORD *)(DerivedStorage + 24));
  CFStringAppendFormat(Mutable, 0, CFSTR(" timebaseStarter=%@"), *(_QWORD *)(DerivedStorage + 32));
  CFStringAppendFormat(Mutable, 0, CFSTR(" disturbPlaybackAssertions=%@"), *(_QWORD *)(DerivedStorage + 40));
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t synchronizer_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  _QWORD *DerivedStorage;
  uint64_t result;
  CFTypeRef *v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  result = 4294950925;
  if (a2 && a4)
  {
    if (FigCFEqual())
    {
      MEMORY[0x19402EA0C](*DerivedStorage);
      v8 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
      if (!*((_BYTE *)DerivedStorage + 52))
        v8 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
      *a4 = CFRetain(*v8);
      MEMORY[0x19402EA24](*DerivedStorage);
      return 0;
    }
    else
    {
      return 4294954509;
    }
  }
  return result;
}

uint64_t synchronizer_setProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeID v4;
  int Value;
  _QWORD *DerivedStorage;

  if (!FigCFEqual())
    return 4294954509;
  if (!a3)
    return 4294950925;
  v4 = CFGetTypeID(a3);
  if (v4 != CFBooleanGetTypeID())
    return 4294950925;
  Value = CFBooleanGetValue((CFBooleanRef)a3);
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (*((unsigned __int8 *)DerivedStorage + 52) != Value)
  {
    *((_BYTE *)DerivedStorage + 52) = Value;
    FigCFArrayApplyFunction();
  }
  MEMORY[0x19402EA24](*DerivedStorage);
  return 0;
}

uint64_t synchronizer_timebaseRateChangedListener(int a1, int a2, int a3, CMTimebaseRef timebase)
{
  uint64_t result;

  if (*MEMORY[0x1E0CA1FC0] == 1)
  {
    CMTimebaseGetRate(timebase);
    return kdebug_trace();
  }
  return result;
}

uint64_t synchronizer_applyShouldAttemptImmediatePlaybackStart(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v5)(uint64_t, const __CFString *, uint64_t);

  result = CMBaseObjectGetVTable();
  v5 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(result + 8) + 56);
  if (v5)
    return v5(a1, CFSTR("ShouldAttemptImmediatePlaybackStart"), a2);
  return result;
}

uint64_t synchronizer_addAudioRenderer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  _QWORD *v5;
  CFTypeID v6;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  int v9;
  uint64_t (*v10)(const void *, const __CFString *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(const void *, uint64_t, uint64_t);
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFRange v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950926;
  v5 = (_QWORD *)DerivedStorage;
  v6 = CFGetTypeID(a2);
  if (v6 != FigSampleBufferAudioRendererGetTypeID())
    return 4294950925;
  MEMORY[0x19402EA0C](*v5);
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((_BYTE *)v5 + 53))
  {
    v18 = 4294954511;
    goto LABEL_22;
  }
  Count = CFArrayGetCount((CFArrayRef)v5[3]);
  v20.location = 0;
  v20.length = Count;
  if (CFArrayContainsValue((CFArrayRef)v5[3], v20, a2))
  {
    v12 = FigSignalErrorAt();
    goto LABEL_28;
  }
  CFArrayAppendValue((CFMutableArrayRef)v5[3], a2);
  v9 = *((unsigned __int8 *)v5 + 52);
  v10 = *(uint64_t (**)(const void *, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
  if (!v10)
    goto LABEL_21;
  if (v9)
    v11 = *MEMORY[0x1E0C9AE50];
  else
    v11 = *MEMORY[0x1E0C9AE40];
  v12 = v10(a2, CFSTR("ShouldAttemptImmediatePlaybackStart"), v11);
  if ((_DWORD)v12)
    goto LABEL_28;
  v12 = synchronizer_disturbPlayback(a1);
  if ((_DWORD)v12)
    goto LABEL_28;
  if (Count)
  {
    v13 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
    if (v13)
    {
      v14 = a2;
      v15 = a1;
      v16 = 0;
      goto LABEL_19;
    }
LABEL_21:
    v18 = 4294954514;
    goto LABEL_22;
  }
  v12 = synchronizer_setUpAudioRendererAsTimebaseStarter(a1, a2);
  if ((_DWORD)v12)
  {
LABEL_28:
    v18 = v12;
    goto LABEL_22;
  }
  v17 = v5[1];
  v13 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v13)
    goto LABEL_21;
  v14 = a2;
  v15 = a1;
  v16 = v17;
LABEL_19:
  v12 = v13(v14, v15, v16);
  if ((_DWORD)v12)
    goto LABEL_28;
  synchronizer_restorePlayback(a1);
  v18 = 0;
LABEL_22:
  MEMORY[0x19402EA24](*v5);
  return v18;
}

uint64_t synchronizer_removeAudioRenderer(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFIndex Count;
  uint64_t v8;
  CFIndex FirstIndexOfValue;
  CFIndex v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t (*v17)(const void *, _QWORD, _QWORD);
  const void *ValueAtIndex;
  uint64_t v19;
  uint64_t (*v20)(const void *, uint64_t, uint64_t);
  uint64_t v21;
  OpaqueCMTimebase *v22;
  OpaqueCMClock *HostTimeClock;
  CFRange v25;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950926;
  v5 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*((_BYTE *)v5 + 53))
  {
    v21 = 4294954511;
    goto LABEL_25;
  }
  Count = CFArrayGetCount((CFArrayRef)v5[3]);
  if (!Count)
  {
    v21 = 4294950925;
    goto LABEL_25;
  }
  v8 = Count;
  v25.location = 0;
  v25.length = Count;
  FirstIndexOfValue = CFArrayGetFirstIndexOfValue((CFArrayRef)v5[3], v25, a2);
  if (FirstIndexOfValue == -1)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_31;
  }
  v10 = FirstIndexOfValue;
  v11 = (const void *)v5[4];
  v12 = synchronizer_disturbPlayback(a1);
  if ((_DWORD)v12)
    goto LABEL_31;
  if (v11 == a2)
  {
    v13 = CMBaseObjectGetDerivedStorage();
    v14 = *(_QWORD *)(v13 + 32);
    if (v14)
    {
      v15 = v13;
      CMNotificationCenterGetDefaultLocalCenter();
      FigSampleBufferAudioRendererGetFigBaseObject(v14);
      v12 = FigNotificationCenterRemoveWeakListener();
      if ((_DWORD)v12)
        goto LABEL_31;
      CMNotificationCenterGetDefaultLocalCenter();
      FigSampleBufferAudioRendererGetFigBaseObject(v14);
      v12 = FigNotificationCenterRemoveWeakListener();
      if ((_DWORD)v12)
        goto LABEL_31;
      v16 = *(const void **)(v15 + 32);
      if (v16)
      {
        CFRelease(v16);
        *(_QWORD *)(v15 + 32) = 0;
      }
    }
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)v5[3], v10);
  v17 = *(uint64_t (**)(const void *, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v17)
  {
LABEL_22:
    v21 = 4294954514;
    goto LABEL_25;
  }
  v12 = v17(a2, 0, 0);
  if ((_DWORD)v12)
  {
LABEL_31:
    v21 = v12;
    goto LABEL_25;
  }
  if (v11 != a2)
  {
LABEL_24:
    synchronizer_restorePlayback(a1);
    v21 = 0;
    goto LABEL_25;
  }
  if (v8 < 2)
  {
    v22 = (OpaqueCMTimebase *)v5[1];
    HostTimeClock = CMClockGetHostTimeClock();
    v12 = CMTimebaseSetSourceClock(v22, HostTimeClock);
    if ((_DWORD)v12)
      goto LABEL_31;
    goto LABEL_24;
  }
  ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v5[3], 0);
  v12 = synchronizer_setUpAudioRendererAsTimebaseStarter(a1, ValueAtIndex);
  if ((_DWORD)v12)
    goto LABEL_31;
  v19 = v5[1];
  v20 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v20)
    goto LABEL_22;
  v21 = v20(ValueAtIndex, a1, v19);
  if (!(_DWORD)v21)
    goto LABEL_24;
LABEL_25:
  MEMORY[0x19402EA24](*v5);
  return v21;
}

uint64_t synchronizer_setRateAndTime(uint64_t a1, __int128 *a2, float a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 2);
  return synchronizer_setRateAndAnchorTime(a1, (uint64_t)&v4, MEMORY[0x1E0CA2E18], a3);
}

uint64_t synchronizer_copyReadOnlyTimebase(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950926;
  v4 = DerivedStorage;
  if (*(_BYTE *)(DerivedStorage + 53))
    return 0;
  v5 = *(const void **)(DerivedStorage + 16);
  if (v5)
  {
    CFRetain(v5);
    v6 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    v6 = 0;
  }
  result = 0;
  *a2 = v6;
  return result;
}

uint64_t synchronizer_acquirePlaybackAssertion(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v6;
  CFRange v8;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950926;
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*((_BYTE *)v4 + 53))
  {
    v6 = (const __CFArray *)v4[5];
    v8.length = CFArrayGetCount(v6);
    v8.location = 0;
    if (!CFArrayContainsValue(v6, v8, a2))
      CFArrayAppendValue((CFMutableArrayRef)v4[5], a2);
  }
  MEMORY[0x19402EA24](*v4);
  return 0;
}

uint64_t synchronizer_releasePlaybackAssertion(uint64_t a1, const void *a2)
{
  _QWORD *DerivedStorage;
  _QWORD *v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const __CFArray *v6;
  CFIndex FirstIndexOfValue;
  uint64_t v8;
  CFRange v10;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (!a2)
    return 4294950926;
  v4 = DerivedStorage;
  MEMORY[0x19402EA0C](*DerivedStorage);
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*((_BYTE *)v4 + 53))
  {
    v6 = (const __CFArray *)v4[5];
    v10.length = CFArrayGetCount(v6);
    v10.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v6, v10, a2);
    if (FirstIndexOfValue == -1)
    {
      v8 = 4294950925;
      goto LABEL_8;
    }
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)v4[5], FirstIndexOfValue);
  }
  v8 = 0;
LABEL_8:
  MEMORY[0x19402EA24](*v4);
  return v8;
}

uint64_t synchronizer_setRateAndAnchorTime(uint64_t a1, uint64_t a2, __int128 *a3, float a4)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  float v10;
  uint64_t v11;
  uint64_t v12;
  CFTypeRef cf;
  __int128 v15;
  uint64_t v16;
  CMTime time;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a4 < 0.0)
  {
    v11 = 4294950925;
  }
  else
  {
    MEMORY[0x19402EA0C](*(_QWORD *)DerivedStorage);
    if (*(_BYTE *)(DerivedStorage + 53))
    {
      v11 = 4294954511;
    }
    else
    {
      v10 = *(float *)(DerivedStorage + 48);
      if (v10 == a4 && (*(_BYTE *)(a2 + 12) & 1) == 0)
      {
        v11 = 0;
LABEL_13:
        MEMORY[0x19402EA24](*(_QWORD *)DerivedStorage);
        goto LABEL_14;
      }
      if (a4 == 0.0
        || v10 == 0.0
        || (v12 = synchronizer_setRateAndAnchorTimeLowLevel(0.0, a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0),
            !(_DWORD)v12))
      {
        time = *(CMTime *)a2;
        v15 = *a3;
        v16 = *((_QWORD *)a3 + 2);
        v11 = synchronizer_setRateAndAnchorTimeLowLevel(a4, a1, &time, (uint64_t)&v15, &cf);
        if (!(_DWORD)v11)
        {
          *(float *)(DerivedStorage + 48) = a4;
          goto LABEL_13;
        }
      }
      else
      {
        v11 = v12;
      }
    }
  }
  if (a4 != 0.0)
    synchronizer_setRateAndAnchorTimeLowLevel(0.0, a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
  if (a4 >= 0.0)
    goto LABEL_13;
LABEL_14:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t synchronizer_convertTime(uint64_t a1, int a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  CMClockRef v9;
  CMClockRef HostTimeClock;
  OpaqueCMClock *v11;
  uint64_t result;
  CMTime v13;
  CMTime v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 53))
    return 4294954511;
  if (!a4)
    return 4294950926;
  v8 = DerivedStorage;
  if (a2 == 1831681640)
  {
    v11 = *(OpaqueCMClock **)(DerivedStorage + 16);
    HostTimeClock = CMClockGetHostTimeClock();
    v13 = *a3;
    v9 = v11;
  }
  else
  {
    if (a2 != 1747795565)
      return FigSignalErrorAt();
    v9 = CMClockGetHostTimeClock();
    HostTimeClock = *(CMClockRef *)(v8 + 16);
    v13 = *a3;
  }
  CMSyncConvertTime(&v14, &v13, v9, HostTimeClock);
  result = 0;
  *a4 = v14;
  return result;
}

uint64_t synchronizer_disturbPlayback(uint64_t a1)
{
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  if (*(float *)(CMBaseObjectGetDerivedStorage() + 48) == 0.0)
    return 0;
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return synchronizer_setRateAndAnchorTimeLowLevel(0.0, a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
}

uint64_t synchronizer_setUpAudioRendererAsTimebaseStarter(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t (*v4)(const void *, CMClockRef *);
  uint64_t v5;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v7;
  CMClockRef newSourceClock[25];

  newSourceClock[24] = *(CMClockRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  newSourceClock[0] = 0;
  v4 = *(uint64_t (**)(const void *, CMClockRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
  {
    v5 = v4(a2, newSourceClock);
    if ((_DWORD)v5)
      goto LABEL_13;
    if (dword_1EE2A3660)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    v5 = CMTimebaseSetSourceClock(*(CMTimebaseRef *)(DerivedStorage + 8), newSourceClock[0]);
    if ((_DWORD)v5
      || (CMNotificationCenterGetDefaultLocalCenter(),
          FigSampleBufferAudioRendererGetFigBaseObject(a2),
          v5 = FigNotificationCenterAddWeakListener(),
          (_DWORD)v5))
    {
LABEL_13:
      v7 = v5;
    }
    else
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigSampleBufferAudioRendererGetFigBaseObject(a2);
      v7 = FigNotificationCenterAddWeakListener();
      if (!(_DWORD)v7)
      {
        *(_QWORD *)(DerivedStorage + 32) = a2;
        CFRetain(a2);
      }
    }
  }
  else
  {
    v7 = 4294954514;
  }
  if (newSourceClock[0])
    CFRelease(newSourceClock[0]);
  return v7;
}

uint64_t synchronizer_restorePlayback(uint64_t a1)
{
  uint64_t result;
  float v3;
  uint64_t v4;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  v3 = *(float *)(result + 48);
  if (v3 != 0.0)
  {
    if (dword_1EE2A3660)
    {
      v4 = result;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v3 = *(float *)(v4 + 48);
    }
    return synchronizer_setRateAndAnchorTimeLowLevel(v3, a1, MEMORY[0x1E0CA2E18], MEMORY[0x1E0CA2E18], 0);
  }
  return result;
}

uint64_t synchronizer_setRateAndAnchorTimeLowLevel(float a1, uint64_t a2, CMTime *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v12;
  CFIndex Count;
  CFIndex v14;
  CFIndex v15;
  const void *ValueAtIndex;
  uint64_t (*v17)(const void *, CMTime *, CMTime *, float);
  uint64_t v18;
  uint64_t (*v19)(const void *, CMTime *, CMTime *, float);
  uint64_t v20;
  CMClockOrTimebaseRef v21;
  const void *v22;
  NSObject *v23;
  CMClockRef HostTimeClock;
  NSObject *v25;
  OpaqueCMTimebase *v26;
  CMTime type;
  CMTime typea;
  CMTime v30;
  CMTime immediateSourceTime;
  CMTime time;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v10 = DerivedStorage;
  if (a1 != 0.0 && CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40)))
  {
    if (dword_1EE2A3660)
    {
      LODWORD(v30.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (dword_1EE2A3660)
  {
    LODWORD(v30.value) = 0;
    v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(_QWORD *)(v10 + 32))
  {
    if ((a3->flags & 0x1D) == 1)
    {
      v21 = CMTimebaseCopySource(*(CMTimebaseRef *)(v10 + 8));
      v22 = v21;
      memset(&v30, 0, sizeof(v30));
      if ((*(_BYTE *)(a4 + 12) & 1) != 0)
      {
        HostTimeClock = CMClockGetHostTimeClock();
        time = *(CMTime *)a4;
        CMSyncConvertTime(&v30, &time, HostTimeClock, v22);
      }
      else
      {
        CMSyncGetTime(&v30, v21);
      }
      if (dword_1EE2A3660)
      {
        v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v26 = *(OpaqueCMTimebase **)(v10 + 8);
      time = *a3;
      immediateSourceTime = v30;
      v20 = CMTimebaseSetRateAndAnchorTime(v26, a1, &time, &immediateSourceTime);
      if (v22)
        CFRelease(v22);
      ValueAtIndex = 0;
      if (!a5)
        return v20;
    }
    else
    {
      if (dword_1EE2A3660)
      {
        LODWORD(v30.value) = 0;
        v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      v20 = CMTimebaseSetRate(*(CMTimebaseRef *)(v10 + 8), a1);
      ValueAtIndex = 0;
      if (!a5)
        return v20;
    }
    goto LABEL_34;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)(v10 + 24));
  if (Count >= 2)
  {
    v14 = Count;
    v15 = 1;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 24), v15);
      if (!ValueAtIndex)
        break;
      v30 = *a3;
      *(_OWORD *)&type.value = *(_OWORD *)a4;
      type.epoch = *(_QWORD *)(a4 + 16);
      v17 = *(uint64_t (**)(const void *, CMTime *, CMTime *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 64);
      if (!v17)
        goto LABEL_21;
      time = v30;
      immediateSourceTime = type;
      v18 = v17(ValueAtIndex, &time, &immediateSourceTime, a1);
      if ((_DWORD)v18)
        goto LABEL_16;
      if (v14 == ++v15)
        goto LABEL_14;
    }
    v20 = 4294950925;
    if (!a5)
      return v20;
    goto LABEL_34;
  }
LABEL_14:
  ValueAtIndex = *(const void **)(v10 + 32);
  v30 = *a3;
  *(_OWORD *)&typea.value = *(_OWORD *)a4;
  typea.epoch = *(_QWORD *)(a4 + 16);
  v19 = *(uint64_t (**)(const void *, CMTime *, CMTime *, float))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                          + 64);
  if (!v19)
  {
LABEL_21:
    v20 = 4294954514;
    if (!a5)
      return v20;
    goto LABEL_34;
  }
  time = v30;
  immediateSourceTime = typea;
  v18 = v19(ValueAtIndex, &time, &immediateSourceTime, a1);
LABEL_16:
  v20 = v18;
  if (a5)
  {
LABEL_34:
    if ((_DWORD)v20)
    {
      if (ValueAtIndex)
        CFRetain(ValueAtIndex);
      *a5 = ValueAtIndex;
    }
  }
  return v20;
}

void synchronizer_audioRendererClockChangedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int (*v7)(uint64_t, CMClockRef *);
  CMClockRef v8;
  NSObject *v9;
  NSObject *v10;
  CMClockRef newSourceClock[25];

  newSourceClock[24] = *(CMClockRef *)MEMORY[0x1E0C80C00];
  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  newSourceClock[0] = 0;
  if (dword_1EE2A3660)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  v7 = *(unsigned int (**)(uint64_t, CMClockRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v7 && !v7(a4, newSourceClock))
  {
    MEMORY[0x19402EA0C](*DerivedStorage);
    if (!*((_BYTE *)DerivedStorage + 53))
    {
      if (DerivedStorage[4] == a4)
      {
        v8 = CMTimebaseCopySourceClock((CMTimebaseRef)DerivedStorage[1]);
        if (!CMTimebaseSetSourceClock((CMTimebaseRef)DerivedStorage[1], newSourceClock[0]) && dword_1EE2A3660)
        {
          v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19402EA24](*DerivedStorage);
        if (v8)
          CFRelease(v8);
        goto LABEL_12;
      }
      if (dword_1EE2A3660)
      {
        v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    MEMORY[0x19402EA24](*DerivedStorage);
  }
LABEL_12:
  if (newSourceClock[0])
    CFRelease(newSourceClock[0]);
}

uint64_t synchronizer_audioRendererEndpointPreemptedNotificationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t (*v4)(uint64_t, __int128 *, float);
  __int128 v5;
  uint64_t v6;

  result = CMBaseObjectGetVTable();
  v4 = *(uint64_t (**)(uint64_t, __int128 *, float))(*(_QWORD *)(result + 16) + 24);
  if (v4)
  {
    v5 = *MEMORY[0x1E0CA2E18];
    v6 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
    return v4(a2, &v5, 0.0);
  }
  return result;
}

__CFArray *FigStringConformerCreateResolvedForegroundARGBColorArrayUsingMAXColorAndOpacity(const void *a1, const void *a2)
{
  return stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(a1, a2, (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x1E0CC1B78], (double (*)(uint64_t, uint64_t *))MEMORY[0x1E0CC1BB0]);
}

__CFArray *stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(const void *a1, const void *a2, uint64_t (*a3)(uint64_t, uint64_t *), double (*a4)(uint64_t, uint64_t *))
{
  CGColor *v7;
  const __CFAllocator *v8;
  CFNumberRef v9;
  uint64_t v10;
  uint64_t ARGBColorArrayFromCGColor;
  const __CFArray *v12;
  const void *ValueAtIndex;
  CFTypeRef v14;
  const void *v15;
  __CFArray *MutableCopy;
  double valuePtr;
  uint64_t v19;
  uint64_t v20;

  v20 = 1;
  v7 = (CGColor *)a3(1, &v20);
  v19 = 1;
  valuePtr = a4(1, &v19);
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &valuePtr);
  v10 = v19;
  if (v20 == 1)
  {
    if (a1)
    {
      ARGBColorArrayFromCGColor = (uint64_t)CFRetain(a1);
LABEL_6:
      v12 = (const __CFArray *)ARGBColorArrayFromCGColor;
      if (ARGBColorArrayFromCGColor)
        goto LABEL_10;
      goto LABEL_9;
    }
    if (v7)
    {
LABEL_3:
      ARGBColorArrayFromCGColor = FigTextMarkupCreateARGBColorArrayFromCGColor();
      goto LABEL_6;
    }
  }
  else if (!v20)
  {
    goto LABEL_3;
  }
LABEL_9:
  v12 = (const __CFArray *)CFRetain(a2);
LABEL_10:
  if (v10 == 1)
  {
    if (a1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, 0);
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    goto LABEL_18;
  }
  if (v9)
  {
    ValueAtIndex = v9;
LABEL_17:
    v14 = CFRetain(ValueAtIndex);
    if (v14)
      goto LABEL_19;
  }
LABEL_18:
  v15 = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
  v14 = CFRetain(v15);
LABEL_19:
  MutableCopy = CFArrayCreateMutableCopy(v8, 0, v12);
  CFArraySetValueAtIndex(MutableCopy, 0, v14);
  CFRelease(v12);
  CFRelease(v14);
  CGColorRelease(v7);
  if (v9)
    CFRelease(v9);
  return MutableCopy;
}

__CFArray *FigStringConformerCreateResolvedBackgroundARGBColorArrayUsingMAXColorAndOpacity(const void *a1, const void *a2)
{
  return stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(a1, a2, (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x1E0CC1B60], (double (*)(uint64_t, uint64_t *))MEMORY[0x1E0CC1BA0]);
}

__CFArray *FigStringConformerCreateResolvedWindowARGBColorArrayUsingMAXColorAndOpacity(const void *a1, const void *a2)
{
  return stringconformer_createResolvedARGBColorUsingMAXColorAndOpacityFromFunctions(a1, a2, (uint64_t (*)(uint64_t, uint64_t *))MEMORY[0x1E0CC1B98], (double (*)(uint64_t, uint64_t *))MEMORY[0x1E0CC1BD8]);
}

uint64_t FigStringConformerEdgeStyleForMediaAccessibilityEdgeStyle(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;

  switch(a1)
  {
    case 1:
      v1 = (uint64_t *)MEMORY[0x1E0CA2B70];
      goto LABEL_8;
    case 2:
      v1 = (uint64_t *)MEMORY[0x1E0CA2B78];
      goto LABEL_8;
    case 3:
      v1 = (uint64_t *)MEMORY[0x1E0CA2B60];
      goto LABEL_8;
    case 4:
      v1 = (uint64_t *)MEMORY[0x1E0CA2B80];
      goto LABEL_8;
    case 5:
      v1 = (uint64_t *)MEMORY[0x1E0CA2B68];
LABEL_8:
      result = *v1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t FigCaptionRendererFreeLayoutRegionCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *DerivedStorage;
  uint64_t v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  if (!a3)
    return FigSignalErrorAt();
  v18 = 0;
  MEMORY[0x19402F294](&FigCaptionRendererFreeLayoutRegionGetClassID_sRegisterFigCaptionRendererFreeLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererFreeLayoutRegionBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v7 = v18;
    DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
    DerivedStorage[7] = a2;
    DerivedStorage[8] = a1;
    v17 = 0;
    FigCaptionRendererNodeCreate(&v17);
    v9 = v17;
    *DerivedStorage = v17;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v11 = *(_QWORD *)(ProtocolVTable + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 216);
        if (v12)
          v12(v9, 1);
      }
    }
    v13 = *DerivedStorage;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 232);
        if (v16)
          v16(v13, 1);
      }
    }
    result = 0;
    *a3 = v7;
  }
  return result;
}

void FigCaptionRendererFreeLayoutRegionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCaptionRendererFreeLayoutRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererFreeLayoutRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendererFreeLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererFreeLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendererFreeLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererFreeLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, char **);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _BYTE *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  void (*v21)(uint64_t, CFArrayRef *);
  CFIndex v22;
  const void *ValueAtIndex;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(const void *, char **);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(const void *, CFStringRef *);
  CFStringRef theString2;
  char *v33;
  CFArrayRef theArray;
  CFStringRef theString1;
  char *__s1;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v8 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
LABEL_48:
    v16 = 4294954508;
LABEL_49:
    FigSignalErrorAt();
    return v16;
  }
  v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_51:
    v16 = 4294954514;
    goto LABEL_49;
  }
  v10 = v9(a2, &__s1);
  if ((_DWORD)v10)
  {
LABEL_53:
    v16 = v10;
    goto LABEL_49;
  }
  v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererTTMLRegion")
     || !strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendereriTTRegion")
     || !strcmp(v11, "FigCaptionRendererSRTRegion")
     || !strcmp(v11, "FigCaptionRendererFreeLayoutRegion")))
  {
    theString1 = 0;
    FigCaptionRendererRegionProtocolGetProtocolID();
    v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
        goto LABEL_47;
      v18 = *(_QWORD *)(v18 + 16);
      if (!v18)
        goto LABEL_47;
      ((void (*)(uint64_t, CFStringRef *))v18)(a2, &theString1);
      LOBYTE(v18) = (_BYTE)theString1;
      if (!theString1)
        goto LABEL_47;
      theArray = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v19 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v19)
      {
        v20 = *((_QWORD *)v19 + 2);
        if (v20 && (v21 = *(void (**)(uint64_t, CFArrayRef *))(v20 + 24)) != 0)
        {
          v21(a1, &theArray);
          v19 = theArray;
        }
        else
        {
          v19 = 0;
        }
      }
      if (CFArrayGetCount(v19) >= 1)
      {
        v22 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v22);
          v33 = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          v24 = CMBaseObjectGetProtocolVTable();
          if (!v24)
            goto LABEL_48;
          v25 = *(_QWORD *)(v24 + 16);
          if (!v25)
            goto LABEL_48;
          v26 = *(uint64_t (**)(const void *, char **))(v25 + 8);
          if (!v26)
            goto LABEL_51;
          v10 = v26(ValueAtIndex, &v33);
          if ((_DWORD)v10)
            goto LABEL_53;
          v27 = v33;
          if (v33
            && (!strcmp(v33, "FigCaptionRendererStackLayoutRegion")
             || !strcmp(v27, "FigCaptionRendererTTMLRegion")
             || !strcmp(v27, "FigCaptionRendererCellStackLayoutRegion")
             || !strcmp(v27, "FigCaptionRendereriTTRegion")
             || !strcmp(v27, "FigCaptionRendererSRTRegion")
             || !strcmp(__s1, "FigCaptionRendererFreeLayoutRegion")))
          {
            theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v28 = CMBaseObjectGetProtocolVTable();
            if (v28)
            {
              v29 = *(_QWORD *)(v28 + 16);
              if (v29)
              {
                v30 = *(void (**)(const void *, CFStringRef *))(v29 + 16);
                if (v30)
                  v30(ValueAtIndex, &theString2);
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              LOBYTE(v18) = 1;
              goto LABEL_47;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v22);
      }
    }
    LOBYTE(v18) = 0;
LABEL_47:
    v16 = 0;
    *a3 = v18;
    return v16;
  }
  v12 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13)
    return 4294954508;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    return 4294954508;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(v14 + 32);
  if (v15)
    return v15(v12, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(const void *, CGRect *);
  const __CFDictionary *v8;
  const void *Value;
  double MidX;
  double MidY;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const void *, double, double);
  CGSize size;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, double, double);
  CGRect v20;

  v4 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v20.size = v4;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7)
        v7(a1, &v20);
    }
  }
  if (a1)
  {
    v8 = *(const __CFDictionary **)(a2 + 296);
    if (v8)
    {
      Value = CFDictionaryGetValue(v8, a1);
      MidX = CGRectGetMidX(v20);
      MidY = CGRectGetMidY(v20);
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v12 = CMBaseObjectGetProtocolVTable();
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          v14 = *(void (**)(const void *, double, double))(v13 + 72);
          if (v14)
            v14(Value, MidX, MidY);
        }
      }
      size = v20.size;
      FigCaptionRendererOutputNodeProtocolGetProtocolID();
      v16 = CMBaseObjectGetProtocolVTable();
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = *(void (**)(const void *, double, double))(v17 + 88);
          if (v18)
            v18(Value, size.width, size.height);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *);
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __int128 *);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, __int128 *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, CGRect *);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, CFArrayRef *);
  CFIndex Count;
  CFIndex v29;
  const void *ValueAtIndex;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(const void *, char **);
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(const void *, int *);
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(const void *, __int128 *);
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, CGRect *);
  double MidX;
  double MidY;
  CGSize v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(const void *, double, double);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(const void *, uint64_t);
  double width;
  CGFloat v53;
  double v54;
  double height;
  double v56;
  double v57;
  double x;
  double y;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, double, double, double, double);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  CGSize v71;
  CGPoint v72;
  int v73;
  char *__s1;
  CFArrayRef theArray;
  uint64_t v76;
  CGRect v77;
  __int128 v78;
  CGSize v79;
  __int128 v80;
  __int128 v81;
  CGRect v82;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v76 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v76);
        if (v76)
        {
          v8 = CMBaseObjectGetDerivedStorage();
          v9 = *(_DWORD *)(v8 + 16);
          v10 = (double)*(int *)(v8 + 20) * 0.0533;
          v11 = *(double *)(v8 + 40);
          v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0)
            v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          else
            v13 = 0.0;
          v14 = *(_QWORD *)v8;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 16);
            if (v16)
            {
              v17 = *(void (**)(uint64_t, __int128 *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v78) = 1;
                *(_DWORD *)((char *)&v78 + 1) = 0;
                DWORD1(v78) = 0;
                *((double *)&v78 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v79.width) = 1;
                *(_DWORD *)((char *)&v79.width + 1) = 0;
                HIDWORD(v79.width) = 0;
                v79.height = v13;
                LOBYTE(v80) = 1;
                *(_DWORD *)((char *)&v80 + 1) = 0;
                DWORD1(v80) = 0;
                *((double *)&v80 + 1) = (double)v9 / 100.0;
                LOBYTE(v81) = 1;
                *(_DWORD *)((char *)&v81 + 1) = 0;
                DWORD1(v81) = 0;
                *((double *)&v81 + 1) = v10;
                v17(v14, &v78);
              }
            }
          }
          v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          v78 = FCRRectNull;
          v79 = *(CGSize *)&byte_1932FABC0;
          v80 = xmmword_1932FABD0;
          v81 = *(_OWORD *)&byte_1932FABE0;
          v71 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v72 = (CGPoint)*MEMORY[0x1E0C9D628];
          v77.origin = (CGPoint)*MEMORY[0x1E0C9D628];
          v77.size = v71;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 16);
            if (v20)
            {
              v21 = *(void (**)(uint64_t, __int128 *))(v20 + 88);
              if (v21)
                v21(a1, &v78);
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 16);
            if (v23)
            {
              v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24)
                v24(a1, &v77);
            }
          }
          if (*((double *)&v80 + 1) != -1.0)
          {
            width = v77.size.width;
            v53 = v77.origin.x + *((double *)&v78 + 1);
            if ((_BYTE)v78)
              v53 = v77.origin.x + *((double *)&v78 + 1) * v77.size.width;
            v54 = v77.origin.y + v79.height;
            if (LOBYTE(v79.width))
              v54 = v77.origin.y + v79.height * v77.size.height;
            height = 1.0;
            if (!(_BYTE)v80)
              width = 1.0;
            if ((_BYTE)v81)
              height = v77.size.height;
            v57 = *((double *)&v81 + 1) * height;
            v56 = *((double *)&v80 + 1) * width;
            v82 = CGRectIntegral(*(CGRect *)&v53);
            x = v82.origin.x;
            y = v82.origin.y;
            v60 = v82.size.width;
            v61 = v82.size.height;
            v62 = *v18;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v63 = CMBaseObjectGetProtocolVTable();
            if (v63)
            {
              v64 = *(_QWORD *)(v63 + 16);
              if (v64)
              {
                v65 = *(void (**)(uint64_t, double, double, double, double))(v64 + 96);
                if (v65)
                  v65(v62, x, y, v60, v61);
              }
            }
          }
          theArray = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 16);
            if (v26)
            {
              v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27)
                v27(a1, &theArray);
            }
          }
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v29 = Count + 1;
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v29 - 2);
              __s1 = 0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              v31 = CMBaseObjectGetProtocolVTable();
              if (!v31)
                break;
              v32 = *(_QWORD *)(v31 + 16);
              if (!v32)
                break;
              v33 = *(unsigned int (**)(const void *, char **))(v32 + 8);
              if (!v33 || v33(ValueAtIndex, &__s1))
                break;
              if (__s1 && !strcmp(__s1, "FigCaptionRendererCaption"))
              {
                v73 = 0;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                v34 = CMBaseObjectGetProtocolVTable();
                if (!v34)
                  break;
                v35 = *(_QWORD *)(v34 + 16);
                if (!v35)
                  break;
                v36 = *(unsigned int (**)(const void *, int *))(v35 + 48);
                if (!v36 || v36(ValueAtIndex, &v73))
                  break;
                if (v73 == 3)
                {
                  v78 = (__int128)v72;
                  v79 = v71;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v37 = CMBaseObjectGetProtocolVTable();
                  if (!v37)
                    break;
                  v38 = *(_QWORD *)(v37 + 16);
                  if (!v38)
                    break;
                  v39 = *(unsigned int (**)(const void *, __int128 *))(v38 + 104);
                  if (!v39)
                    break;
                  if (v39(ValueAtIndex, &v78))
                    break;
                  v77.origin = v72;
                  v77.size = v71;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v40 = CMBaseObjectGetProtocolVTable();
                  if (!v40)
                    break;
                  v41 = *(_QWORD *)(v40 + 16);
                  if (!v41)
                    break;
                  v42 = *(unsigned int (**)(const void *, CGRect *))(v41 + 72);
                  if (!v42 || v42(ValueAtIndex, &v77))
                    break;
                  MidX = CGRectGetMidX(v77);
                  MidY = CGRectGetMidY(v77);
                  v45 = v79;
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v46 = CMBaseObjectGetProtocolVTable();
                  if (v46)
                  {
                    v47 = *(_QWORD *)(v46 + 16);
                    if (v47)
                    {
                      v48 = *(void (**)(const void *, double, double))(v47 + 128);
                      if (v48)
                        v48(ValueAtIndex, MidX - v45.width * 0.5, MidY - v45.height * 0.5);
                    }
                  }
                  FigCaptionRendererNodeProtocolGetProtocolID();
                  v49 = CMBaseObjectGetProtocolVTable();
                  if (v49)
                  {
                    v50 = *(_QWORD *)(v49 + 16);
                    if (v50)
                    {
                      v51 = *(void (**)(const void *, uint64_t))(v50 + 232);
                      if (v51)
                        v51(ValueAtIndex, 1);
                    }
                  }
                }
              }
              if ((unint64_t)--v29 <= 1)
                goto LABEL_69;
            }
            FigSignalErrorAt();
          }
        }
      }
    }
  }
LABEL_69:
  v66 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v67 = CMBaseObjectGetProtocolVTable();
  if (!v67)
    return 4294954508;
  v68 = *(_QWORD *)(v67 + 16);
  if (!v68)
    return 4294954508;
  v69 = *(uint64_t (**)(uint64_t, uint64_t))(v68 + 288);
  if (v69)
    return v69(v66, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int16 *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 16);
            if (v9)
            {
              v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10)
                v10(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16)
                v16(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void (*v4)(_OWORD *);
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void (**)(_OWORD *))(DerivedStorage + 64);
  if (v4 && *(_QWORD *)(DerivedStorage + 56))
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    v4(v7);
  }
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendererFreeLayoutRegion <FigCaptionRendererRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererFreeLayoutRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCaptionRendererFreeLayoutRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererFreeLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendererFreeLayoutRegion]"));
}

FigCPEFPAirPlaySession *FigFairPlayAirPlaySessionCreateWithProtectionInfo(uint64_t a1, uint64_t a2, void *a3)
{
  return -[FigCPEFPAirPlaySession initWithFairPlayContext:protectionInfo:routeInfo:playbackSession:mediaControlUUID:]([FigCPEFPAirPlaySession alloc], "initWithFairPlayContext:protectionInfo:routeInfo:playbackSession:mediaControlUUID:", a1, a2, objc_msgSend(a3, "objectForKey:", CFSTR("RouteInfo")), objc_msgSend(a3, "objectForKey:", CFSTR("EndpointPlaybackSession")), objc_msgSend(a3, "objectForKey:", CFSTR("MediaControlUUID")));
}

FigCPEFPAirPlaySession *FigFairPlayAirPlaySessionCreateWithContentInfo(uint64_t a1, uint64_t a2, void *a3)
{
  return -[FigCPEFPAirPlaySession initWithFairPlayContext:contentInfo:routeInfo:playbackSession:mediaControlUUID:]([FigCPEFPAirPlaySession alloc], "initWithFairPlayContext:contentInfo:routeInfo:playbackSession:mediaControlUUID:", a1, a2, objc_msgSend(a3, "objectForKey:", CFSTR("RouteInfo")), objc_msgSend(a3, "objectForKey:", CFSTR("EndpointPlaybackSession")), objc_msgSend(a3, "objectForKey:", CFSTR("MediaControlUUID")));
}

void FigFairPlayAirPlaySessionDestroy(void *a1)
{
  objc_msgSend(a1, "endSession");

}

uint64_t FigFairPlayAirPlaySessionBeginAsync(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __FigFairPlayAirPlaySessionBeginAsync_block_invoke;
  v4[3] = &unk_1E2FBB4F0;
  v4[4] = a3;
  objc_msgSend(a1, "beginSessionWithCompletionQueue:completionHandler:", a2, v4);
  return 0;
}

void authorizeItemCompletionHandler(CFTypeRef cf, CFTypeRef a2, int a3, uint64_t a4)
{
  NSObject *v8;
  _QWORD v9[7];
  int v10;

  if (cf)
    CFRetain(cf);
  if (a2)
    CFRetain(a2);
  v8 = *(NSObject **)(*(_QWORD *)a4 + 72);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __authorizeItemCompletionHandler_block_invoke;
  v9[3] = &__block_descriptor_60_e5_v8__0l;
  v9[4] = a4;
  v9[5] = cf;
  v9[6] = a2;
  v10 = a3;
  dispatch_async(v8, v9);
}

void __authorizeItemCompletionHandler_block_invoke(uint64_t a1)
{
  void *v2;
  CFTypeRef *v3;
  const void *v4;
  const void *v5;

  v2 = (void *)MEMORY[0x19403137C]();
  objc_msgSend(**(id **)(a1 + 32), "authorizeItemCompletionHandler_objc:picData:playerGUID:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56));

  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 16));
  v3 = *(CFTypeRef **)(a1 + 32);
  if (v3[1])
  {
    CFRelease(v3[1]);
    v3 = *(CFTypeRef **)(a1 + 32);
  }
  free(v3);
  objc_autoreleasePoolPop(v2);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
}

BOOL FigSpeedRampIsCMTimeMappingArrayDataContinuous(const __CFData *a1)
{
  const UInt8 *BytePtr;
  unint64_t Length;
  CMTimeFlags v4;
  CMTimeEpoch v5;
  uint64_t v6;
  CMTimeFlags v7;
  CMTimeEpoch v8;
  int v9;
  CMTimeFlags v11;
  CMTimeEpoch v12;
  CMTimeValue v13;
  CMTimeFlags v14;
  CMTimeEpoch v15;
  CMTimeValue v16;
  CMTimeValue v17;
  CMTimeScale v18;
  CMTimeFlags v19;
  CMTimeEpoch v20;
  CMTimeValue v21;
  unint64_t v23;
  CMTimeEpoch *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  CMTimeFlags v28;
  CMTimeEpoch v29;
  CMTimeFlags v30;
  CMTimeEpoch v31;
  __int128 v32;
  __int128 v33;
  CMTimeFlags v34;
  CMTimeEpoch v35;
  CMTimeFlags v36;
  CMTimeEpoch v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  CMTime v41;
  CMTimeRange time1;
  CMTime v43;
  CMTime time2;
  CMTime rhs;
  CMTime lhs;
  CMTime time;
  CMTimeValue v48;
  CMTimeScale v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  v48 = *(_QWORD *)BytePtr;
  v4 = *((_DWORD *)BytePtr + 3);
  v49 = *((_DWORD *)BytePtr + 2);
  v5 = *((_QWORD *)BytePtr + 2);
  v6 = MEMORY[0x1E0CA2E68];
  v7 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
  v8 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  v9 = v7 & 0x1F;
  if ((v4 & 0x1F) != 3 && v9 != 3)
    goto LABEL_52;
  memset(&time1, 0, 24);
  rhs.epoch = v8;
  lhs.value = v48;
  lhs.timescale = v49;
  lhs.flags = v4;
  lhs.epoch = v5;
  rhs.value = *MEMORY[0x1E0CA2E68];
  rhs.timescale = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 8);
  rhs.flags = v7;
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&time1.start, &time);
  CMTimeMake(&time2, 1, 1000000000);
  lhs = time1.start;
  if (CMTimeCompare(&lhs, &time2) > 0)
  {
LABEL_52:
    time1.start.value = v48;
    time1.start.timescale = v49;
    time1.start.flags = v4;
    time1.start.epoch = v5;
    lhs.value = *(_QWORD *)v6;
    lhs.timescale = *(_DWORD *)(v6 + 8);
    lhs.flags = v7;
    lhs.epoch = v8;
    if (CMTimeCompare(&time1.start, &lhs))
      return 0;
  }
  v48 = *((_QWORD *)BytePtr + 6);
  v11 = *((_DWORD *)BytePtr + 15);
  v49 = *((_DWORD *)BytePtr + 14);
  v12 = *((_QWORD *)BytePtr + 8);
  if ((v11 & 0x1F) != 3 && v9 != 3)
    goto LABEL_50;
  memset(&time1, 0, 24);
  v13 = *((_QWORD *)BytePtr + 6);
  rhs.epoch = v8;
  lhs.value = v13;
  lhs.timescale = *((_DWORD *)BytePtr + 14);
  lhs.flags = v11;
  lhs.epoch = v12;
  rhs.value = *(_QWORD *)v6;
  rhs.timescale = *(_DWORD *)(v6 + 8);
  rhs.flags = v7;
  CMTimeSubtract(&time, &lhs, &rhs);
  CMTimeAbsoluteValue(&time1.start, &time);
  CMTimeMake(&time2, 1, 1000000000);
  lhs = time1.start;
  if (CMTimeCompare(&lhs, &time2) > 0)
  {
LABEL_50:
    time1.start.value = v48;
    time1.start.timescale = v49;
    time1.start.flags = v11;
    time1.start.epoch = v12;
    lhs.value = *(_QWORD *)v6;
    lhs.timescale = *(_DWORD *)(v6 + 8);
    lhs.flags = v7;
    lhs.epoch = v8;
    if (CMTimeCompare(&time1.start, &lhs))
      return 0;
  }
  v14 = *((_DWORD *)BytePtr + 9);
  if ((v14 & 0x1D) != 1)
    return 0;
  v48 = *((_QWORD *)BytePtr + 3);
  v49 = *((_DWORD *)BytePtr + 8);
  v15 = *((_QWORD *)BytePtr + 5);
  if ((v14 & 0x1F) == 3 || v9 == 3)
  {
    memset(&time1, 0, 24);
    v16 = *((_QWORD *)BytePtr + 3);
    rhs.epoch = v8;
    lhs.value = v16;
    lhs.timescale = *((_DWORD *)BytePtr + 8);
    lhs.flags = v14;
    lhs.epoch = v15;
    rhs.value = *(_QWORD *)v6;
    rhs.timescale = *(_DWORD *)(v6 + 8);
    rhs.flags = v7;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&time1.start, &time);
    CMTimeMake(&time2, 1, 1000000000);
    lhs = time1.start;
    if (CMTimeCompare(&lhs, &time2) <= 0)
      return 0;
  }
  time1.start.value = v48;
  time1.start.timescale = v49;
  time1.start.flags = v14;
  time1.start.epoch = v15;
  v17 = *(_QWORD *)v6;
  lhs.value = *(_QWORD *)v6;
  v18 = *(_DWORD *)(v6 + 8);
  lhs.timescale = v18;
  lhs.flags = v7;
  lhs.epoch = v8;
  if (CMTimeCompare(&time1.start, &lhs) < 1)
    return 0;
  v19 = *((_DWORD *)BytePtr + 21);
  if ((v19 & 0x1D) != 1)
    return 0;
  v48 = *((_QWORD *)BytePtr + 9);
  v49 = *((_DWORD *)BytePtr + 20);
  v20 = *((_QWORD *)BytePtr + 11);
  if ((v19 & 0x1F) == 3 || v9 == 3)
  {
    memset(&time1, 0, 24);
    v21 = *((_QWORD *)BytePtr + 9);
    rhs.epoch = v8;
    lhs.value = v21;
    lhs.timescale = *((_DWORD *)BytePtr + 20);
    lhs.flags = v19;
    lhs.epoch = v20;
    rhs.value = v17;
    rhs.timescale = v18;
    rhs.flags = v7;
    CMTimeSubtract(&time, &lhs, &rhs);
    CMTimeAbsoluteValue(&time1.start, &time);
    CMTimeMake(&time2, 1, 1000000000);
    lhs = time1.start;
    if (CMTimeCompare(&lhs, &time2) <= 0)
      return 0;
  }
  time1.start.value = v48;
  time1.start.timescale = v49;
  time1.start.flags = v19;
  time1.start.epoch = v20;
  lhs.value = v17;
  lhs.timescale = v18;
  lhs.flags = v7;
  lhs.epoch = v8;
  if (CMTimeCompare(&time1.start, &lhs) < 1)
    return 0;
  if (Length >= 0xC0)
  {
    v40 = 0;
    v23 = 2;
    if (Length / 0x60 > 2)
      v23 = Length / 0x60;
    v38 = v23;
    v39 = Length / 0x60;
    v24 = (CMTimeEpoch *)(BytePtr + 184);
    v25 = 1;
    do
    {
      v26 = *(_OWORD *)(v24 - 23);
      v27 = *(_OWORD *)(v24 - 19);
      *(_OWORD *)&time1.start.epoch = *(_OWORD *)(v24 - 21);
      *(_OWORD *)&time1.duration.timescale = v27;
      *(_OWORD *)&time1.start.value = v26;
      CMTimeRangeGetEnd(&v43, &time1);
      v48 = *(v24 - 11);
      v28 = *((_DWORD *)v24 - 19);
      v49 = *((_DWORD *)v24 - 20);
      v29 = *(v24 - 9);
      if ((v43.flags & 0x1F) != 3 && (v28 & 0x1F) != 3)
        goto LABEL_49;
      memset(&time1, 0, 24);
      lhs = v43;
      rhs.value = v48;
      rhs.timescale = v49;
      rhs.flags = v28;
      rhs.epoch = v29;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1.start, &time);
      CMTimeMake(&time2, 1, 1000000000);
      lhs = time1.start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_49:
        time1.start = v43;
        lhs.value = v48;
        lhs.timescale = v49;
        lhs.flags = v28;
        lhs.epoch = v29;
        if (CMTimeCompare(&time1.start, &lhs))
          break;
      }
      v48 = *(v24 - 8);
      v30 = *((_DWORD *)v24 - 13);
      v49 = *((_DWORD *)v24 - 14);
      v31 = *(v24 - 6);
      if ((v30 & 0x1F) == 3 || v9 == 3)
      {
        memset(&time1, 0, 24);
        rhs.epoch = v8;
        lhs.value = v48;
        lhs.timescale = v49;
        lhs.flags = v30;
        lhs.epoch = v31;
        rhs.value = v17;
        rhs.timescale = v18;
        rhs.flags = v7;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1.start, &time);
        CMTimeMake(&time2, 1, 1000000000);
        lhs = time1.start;
        if (CMTimeCompare(&lhs, &time2) <= 0)
          break;
      }
      time1.start.value = v48;
      time1.start.timescale = v49;
      time1.start.flags = v30;
      time1.start.epoch = v31;
      lhs.value = v17;
      lhs.timescale = v18;
      lhs.flags = v7;
      lhs.epoch = v8;
      if (CMTimeCompare(&time1.start, &lhs) < 1)
        break;
      v32 = *(_OWORD *)(v24 - 17);
      v33 = *(_OWORD *)(v24 - 13);
      *(_OWORD *)&time1.start.epoch = *(_OWORD *)(v24 - 15);
      *(_OWORD *)&time1.duration.timescale = v33;
      *(_OWORD *)&time1.start.value = v32;
      CMTimeRangeGetEnd(&v41, &time1);
      v48 = *(v24 - 5);
      v34 = *((_DWORD *)v24 - 7);
      v49 = *((_DWORD *)v24 - 8);
      v35 = *(v24 - 3);
      if ((v41.flags & 0x1F) != 3 && (v34 & 0x1F) != 3)
        goto LABEL_51;
      memset(&time1, 0, 24);
      lhs = v41;
      rhs.value = v48;
      rhs.timescale = v49;
      rhs.flags = v34;
      rhs.epoch = v35;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&time1.start, &time);
      CMTimeMake(&time2, 1, 1000000000);
      lhs = time1.start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_51:
        time1.start = v41;
        lhs.value = v48;
        lhs.timescale = v49;
        lhs.flags = v34;
        lhs.epoch = v35;
        if (CMTimeCompare(&time1.start, &lhs))
          break;
      }
      v48 = *(v24 - 2);
      v36 = *((_DWORD *)v24 - 1);
      v49 = *((_DWORD *)v24 - 2);
      v37 = *v24;
      if ((v36 & 0x1F) == 3 || v9 == 3)
      {
        memset(&time1, 0, 24);
        rhs.epoch = v8;
        lhs.value = v48;
        lhs.timescale = v49;
        lhs.flags = v36;
        lhs.epoch = v37;
        rhs.value = v17;
        rhs.timescale = v18;
        rhs.flags = v7;
        CMTimeSubtract(&time, &lhs, &rhs);
        CMTimeAbsoluteValue(&time1.start, &time);
        CMTimeMake(&time2, 1, 1000000000);
        lhs = time1.start;
        if (CMTimeCompare(&lhs, &time2) <= 0)
          break;
      }
      time1.start.value = v48;
      time1.start.timescale = v49;
      time1.start.flags = v36;
      time1.start.epoch = v37;
      lhs.value = v17;
      lhs.timescale = v18;
      lhs.flags = v7;
      lhs.epoch = v8;
      if (CMTimeCompare(&time1.start, &lhs) <= 0)
        break;
      v40 = v39 <= ++v25;
      v24 += 12;
    }
    while (v38 != v25);
  }
  else
  {
    return 1;
  }
  return v40;
}

CMTime *FigGetDefaultLowWaterDurationForSpeedRampRenderPipelines@<X0>(CMTime *a1@<X8>)
{
  return CMTimeMake(a1, 1000, 1000);
}

uint64_t FigSpeedRampRenderPipelineCreate(const __CFAllocator *a1, const void *a2, CMTime *a3, const __CFDictionary *a4, void **a5)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t DerivedStorage;
  __int128 v14;
  const CMBufferCallbacks *CallbacksForUnsortedSampleBuffers;
  uint64_t v16;
  uint64_t FigBaseObject;
  uint64_t (*v18)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, const __CFString *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  uint64_t v25;
  void *v26;
  uint64_t (*v27)(uint64_t, void (*)(uint64_t), void *);
  opaqueCMBufferQueue *v28;
  opaqueCMBufferQueue *v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CMTime rhs;
  CMTime v35;
  void *value;
  void *refcon;
  CMTime lhs;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  value = 0;
  refcon = 0;
  memset(&v35, 0, sizeof(v35));
  CMTimeMake(&rhs, 1, 2);
  lhs = *a3;
  CMTimeAdd(&v35, &lhs, &rhs);
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a5 || !a2)
    return FigSignalErrorAt();
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8))
    v10 = 3;
  else
    v10 = 0;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80))
    v10 |= 4u;
  if (*(_QWORD *)(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88))
    v11 = v10 | 8;
  else
    v11 = v10;
  *(_QWORD *)&lhs.timescale = 0;
  lhs.value = v11;
  if (sSpeedRampRenderPipelineVTableSetupOnce != -1)
    dispatch_once_f(&sSpeedRampRenderPipelineVTableSetupOnce, 0, (dispatch_function_t)speedRampRenderPipelineSetupOnce);
  dispatch_sync_f((dispatch_queue_t)sSpeedRampRenderPipelineVTableQueue, &lhs, (dispatch_function_t)speedRamp_RenderPipeline_getVTableWithOptionalMethodsWork);
  FigRenderPipelineGetClassID();
  v12 = CMDerivedObjectCreate();
  if ((_DWORD)v12)
  {
    v31 = v12;
LABEL_38:
    if (refcon)
      CFRelease(refcon);
    goto LABEL_40;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(DerivedStorage + 200) = 0;
  if (a4 && CFDictionaryGetValueIfPresent(a4, CFSTR("LoggingID"), (const void **)&value))
    CFStringGetCString((CFStringRef)value, (char *)(DerivedStorage + 200), 16, 0x600u);
  v14 = *(_OWORD *)&a3->value;
  *(_QWORD *)(DerivedStorage + 56) = a3->epoch;
  *(_OWORD *)(DerivedStorage + 40) = v14;
  *(CMTime *)(DerivedStorage + 64) = v35;
  *(_DWORD *)(DerivedStorage + 36) = 1;
  CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
  v16 = CMBufferQueueCreate(a1, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(DerivedStorage + 8));
  if ((_DWORD)v16)
    goto LABEL_44;
  CFRetain(a2);
  *(_QWORD *)(DerivedStorage + 144) = a2;
  FigBaseObject = FigRenderPipelineGetFigBaseObject(a2);
  v18 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
  if (!v18)
  {
LABEL_37:
    v31 = 4294954514;
    goto LABEL_38;
  }
  v16 = v18(FigBaseObject, CFSTR("SourceSampleBufferQueue"), a1, DerivedStorage + 152);
  if ((_DWORD)v16)
    goto LABEL_44;
  v19 = FigRenderPipelineGetFigBaseObject(a2);
  v20 = *(void (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v20)
    v20(v19, CFSTR("ExpectScaledEdits"), *MEMORY[0x1E0C9AE50]);
  v21 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 88) = v21;
  if (!v21
    || (v22 = FigSimpleMutexCreate(), (*(_QWORD *)(DerivedStorage + 184) = v22) == 0)
    || (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        Mutable = CFArrayCreateMutable(AllocatorForMedia, 4, MEMORY[0x1E0C9B378]),
        (*(_QWORD *)(DerivedStorage + 136) = Mutable) == 0))
  {
LABEL_43:
    v16 = FigSignalErrorAt();
    goto LABEL_44;
  }
  v16 = FigActivitySchedulerCreateForNewThread((uint64_t)a1, 3, CFSTR("com.apple.coremedia.speedramp"), (_QWORD *)(DerivedStorage + 24));
  if ((_DWORD)v16)
  {
LABEL_44:
    v31 = v16;
    goto LABEL_38;
  }
  v25 = *(_QWORD *)(DerivedStorage + 24);
  v26 = refcon;
  v27 = *(uint64_t (**)(uint64_t, void (*)(uint64_t), void *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
  if (!v27)
    goto LABEL_37;
  v16 = v27(v25, speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel, v26);
  if ((_DWORD)v16)
    goto LABEL_44;
  *(_BYTE *)(DerivedStorage + 32) = 1;
  v28 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
  lhs = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v16 = CMBufferQueueInstallTrigger(v28, (CMBufferQueueTriggerCallback)speedramp_dataBecameReady, refcon, 7, &lhs, (CMBufferQueueTriggerToken *)(DerivedStorage + 160));
  if ((_DWORD)v16)
    goto LABEL_44;
  v29 = *(opaqueCMBufferQueue **)(DerivedStorage + 152);
  lhs = *a3;
  v16 = CMBufferQueueInstallTrigger(v29, (CMBufferQueueTriggerCallback)speedramp_downstreamBufferQueueLowWater, refcon, 2, &lhs, (CMBufferQueueTriggerToken *)(DerivedStorage + 168));
  if ((_DWORD)v16)
    goto LABEL_44;
  if (FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueueSetupOnce != -1)
    dispatch_once_f(&FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueueSetupOnce, &FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueue, (dispatch_function_t)speedRampRenderPipelineTimerQueueSetupOnce);
  v30 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)FigSpeedRampRenderPipelineCreate_sSpeedRampRenderPipelineTimerQueue);
  *(_QWORD *)(DerivedStorage + 176) = v30;
  if (!v30)
    goto LABEL_43;
  dispatch_set_context(v30, refcon);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(DerivedStorage + 176), (dispatch_function_t)speedramp_wakeUpAndCheckTheTimebase);
  dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 176));
  CMNotificationCenterGetDefaultLocalCenter();
  v16 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v16)
    goto LABEL_44;
  CMNotificationCenterGetDefaultLocalCenter();
  v31 = FigNotificationCenterAddWeakListener();
  if ((_DWORD)v31)
    goto LABEL_38;
  *a5 = refcon;
  refcon = 0;
LABEL_40:
  if (dword_1EE2A3680)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v31;
}

void speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v2;
  __int128 *v3;
  CMBufferRef v4;
  CMTimeValue v5;
  CMTimeScale v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  opaqueCMSampleBuffer *v10;
  _OWORD *v11;
  CMTimeFlags v12;
  CMTimeEpoch v13;
  int v14;
  CFTypeRef v15;
  const void *v16;
  OpaqueCMTimebase *ValueAtIndex;
  CMItemCount NumSamples;
  CMTimeValue v19;
  CFIndex v20;
  opaqueCMSampleBuffer *v21;
  CMTimeFlags flags;
  CMSampleTimingInfo *v23;
  __int128 v24;
  CMSampleTimingInfo *v25;
  __int128 v26;
  CMTimeEpoch epoch;
  const __CFData *v28;
  unint64_t Length;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  const UInt8 *v35;
  CMTimeFlags v36;
  CMTimeEpoch v37;
  __int128 v38;
  __int128 v39;
  opaqueCMSampleBuffer *v40;
  CMTimeFlags v41;
  CMTimeEpoch v42;
  CMItemCount v43;
  CMSampleTimingInfo *v44;
  uint64_t v45;
  uint64_t v46;
  CMTimeEpoch *p_epoch;
  CMTimeFlags v48;
  CMTimeEpoch v49;
  uint64_t v50;
  const void *v51;
  void *v52;
  OSStatus v53;
  CMItemCount v54;
  int v55;
  const void *v56;
  const __CFAllocator *AllocatorForMedia;
  const __CFDictionary *v58;
  OSStatus v59;
  const void *v60;
  opaqueCMSampleBuffer *v61;
  const __CFData *v62;
  CMTimeScale v63;
  CMTimeFlags v64;
  CMTimeValue v65;
  CMTimeEpoch v66;
  CMTimeFlags v67;
  CMTimeEpoch v68;
  double Seconds;
  double v70;
  const __CFNumber *v71;
  const __CFNumber *v72;
  CFTypeID v73;
  CFNumberRef v74;
  CFNumberRef v75;
  double v76;
  double v77;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  Float64 v82;
  CMSampleBufferRef v83;
  Float64 v84;
  double v85;
  double v86;
  Float64 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  int v91;
  CMTimeFlags v92;
  OpaqueCMTimebase *v93;
  NSObject *v94;
  CMSampleTimingInfo *v95;
  CMTimeFlags v96;
  CMTimeFlags v97;
  CFIndex v98;
  CFIndex v99;
  CMItemCount v100;
  CMItemCount v101;
  CMTimeEpoch v102;
  const __CFString *key;
  const __CFAllocator *allocator;
  const __CFString *v105;
  uint64_t v106;
  unint64_t v108;
  CMTimeEpoch v109;
  __int128 v110;
  const UInt8 *BytePtr;
  CMTime v112;
  CMTime v113;
  CMTime v114;
  CMTime v115;
  CMTime v116;
  CMTime v117;
  CMTime start;
  CMSampleBufferRef sampleBufferOut;
  double valuePtr;
  CMTime v121;
  CMTime v122;
  CMTime time2;
  CMTime time1;
  CMTime lhs;
  CMTime rhs;
  uint64_t v127;
  __int16 v128;
  void *v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  Float64 v137;
  __int16 v138;
  CMSampleBufferRef v139;
  __int16 v140;
  Float64 v141;
  __int16 v142;
  double v143;
  __int16 v144;
  double v145;
  __int16 v146;
  Float64 v147;
  CMTimeRange time[2];
  CMTime v149;
  CMTimeValue v150;
  CMTimeScale v151;
  CMTime v152;
  CMItemCount timingArrayEntriesNeededOut;
  CMTimeScale v154;
  CMTime v155;
  CMTimeValue value;
  CMTimeScale timescale;
  uint64_t v158;
  CFRange v159;

  v158 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  sampleBufferOut = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v2 = MEMORY[0x1E0CA2E18];
  v3 = (__int128 *)MEMORY[0x1E0CA2E68];
  v97 = *(_DWORD *)(MEMORY[0x1E0CA2E18] + 12);
  v109 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v96 = *(_DWORD *)(MEMORY[0x1E0CA2E68] + 12);
  key = (const __CFString *)*MEMORY[0x1E0CA2718];
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v105 = (const __CFString *)*MEMORY[0x1E0CA2708];
  v102 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  while (1)
  {
    if (*(_QWORD *)(DerivedStorage + 96))
    {
      v106 = *(_QWORD *)(DerivedStorage + 104);
    }
    else
    {
      v4 = CMBufferQueueDequeueIfDataReadyAndRetain(*(CMBufferQueueRef *)(DerivedStorage + 8));
      *(_QWORD *)(DerivedStorage + 96) = v4;
      if (!v4)
      {
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
        v58 = 0;
        goto LABEL_146;
      }
      LODWORD(v106) = 0;
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    v5 = *(_QWORD *)v2;
    v150 = *(_QWORD *)v2;
    v6 = *(_DWORD *)(v2 + 8);
    v151 = v6;
    v7 = CMBaseObjectGetDerivedStorage();
    v8 = v7;
    v9 = *(_DWORD *)(v7 + 36);
    if (v9 == 1)
      break;
    if (v9 || !CMBufferQueueTestTrigger(*(CMBufferQueueRef *)(v7 + 152), *(CMBufferQueueTriggerToken *)(v7 + 168)))
    {
      v92 = v97;
      goto LABEL_138;
    }
    memset(time, 0, 24);
    CMBufferQueueGetDuration(&rhs, *(CMBufferQueueRef *)(v8 + 152));
    lhs = *(CMTime *)(v8 + 64);
    CMTimeSubtract(&time[0].start, &lhs, &rhs);
    start = time[0].start;
LABEL_25:
    v15 = CMGetAttachment(*(CMAttachmentBearerRef *)(DerivedStorage + 96), key, 0);
    if (v15)
    {
      v16 = v15;
      if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136)) >= 2
        && v16 == CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 136), 0))
      {
        ValueAtIndex = (OpaqueCMTimebase *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 136), 1);
        speedramp_setTimebase(a1, ValueAtIndex);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 136), 0);
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 136), 0);
      }
    }
    NumSamples = CMSampleBufferGetNumSamples(*(CMSampleBufferRef *)(DerivedStorage + 96));
    v19 = *(_QWORD *)(DerivedStorage + 104);
    v20 = NumSamples - v19;
    if (NumSamples - v19 < 2)
      goto LABEL_84;
    v149.value = v5;
    v149.timescale = v6;
    v21 = *(opaqueCMSampleBuffer **)(DerivedStorage + 96);
    time1.value = 0;
    *(_OWORD *)&time[0].start.value = *(_OWORD *)v2;
    time[0].start.epoch = v109;
    if (v19 < 0)
    {
      v23 = 0;
      epoch = v109;
      flags = v97;
    }
    else
    {
      flags = v97;
      if (CMSampleBufferGetNumSamples(v21) <= v19)
      {
        v23 = 0;
        epoch = v109;
      }
      else
      {
        if (CMSampleBufferGetOutputSampleTimingInfoArray(v21, 0, 0, &time1.value))
        {
          v23 = 0;
LABEL_153:
          v95 = v23;
          goto LABEL_156;
        }
        if (time1.value < 1)
        {
          v23 = 0;
LABEL_132:
          v90 = FigSignalErrorAt();
          free(v23);
          epoch = v109;
          if (v90)
            goto LABEL_141;
          goto LABEL_42;
        }
        v23 = (CMSampleTimingInfo *)malloc_type_malloc(72 * time1.value, 0x1000040FF89C88EuLL);
        if (!v23)
          goto LABEL_132;
        if (CMSampleBufferGetOutputSampleTimingInfoArray(v21, time1.value, v23, 0))
          goto LABEL_153;
        if (time1.value == 1)
        {
          v24 = *(_OWORD *)&v23->duration.value;
          lhs.epoch = v23->duration.epoch;
          *(_OWORD *)&lhs.value = v24;
          CMTimeMultiply(&rhs, &lhs, v19);
          lhs = v23->presentationTimeStamp;
          CMTimeAdd(&time[0].start, &lhs, &rhs);
        }
        else
        {
          if (time1.value <= v19)
            goto LABEL_132;
          v25 = &v23[v19];
          v26 = *(_OWORD *)&v25->presentationTimeStamp.value;
          time[0].start.epoch = v25->presentationTimeStamp.epoch;
          *(_OWORD *)&time[0].start.value = v26;
        }
        v149.value = time[0].start.value;
        flags = time[0].start.flags;
        v149.timescale = time[0].start.timescale;
        epoch = time[0].start.epoch;
      }
    }
    free(v23);
LABEL_42:
    memset(&v121, 0, sizeof(v121));
    v28 = *(const __CFData **)(DerivedStorage + 192);
    v152.value = v149.value;
    v152.timescale = v149.timescale;
    if (!v28 || (flags & 0x1D) != 1)
    {
      v121 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
      goto LABEL_60;
    }
    v98 = v20;
    v100 = NumSamples;
    BytePtr = CFDataGetBytePtr(v28);
    Length = CFDataGetLength(v28);
    if (Length < 0x60)
    {
LABEL_57:
      v121 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E30];
      goto LABEL_58;
    }
    v30 = 0;
    v108 = Length / 0x60;
    v31 = Length / 0x60 - 1;
    v32 = flags & 0x1F;
    v33 = v31;
    while (1)
    {
      v34 = v31 >> 1;
      v35 = &BytePtr[96 * (v31 >> 1)];
      v155.value = *(_QWORD *)v35;
      v155.timescale = *((_DWORD *)v35 + 2);
      v36 = *((_DWORD *)v35 + 3);
      v37 = *((_QWORD *)v35 + 2);
      if (v32 != 3 && (*((_DWORD *)v35 + 3) & 0x1F) != 3)
        goto LABEL_159;
      memset(time, 0, 24);
      lhs.value = v152.value;
      lhs.timescale = v152.timescale;
      lhs.flags = flags;
      lhs.epoch = epoch;
      time1.value = v155.value;
      time1.timescale = v155.timescale;
      time1.flags = v36;
      time1.epoch = v37;
      CMTimeSubtract(&rhs, &lhs, &time1);
      CMTimeAbsoluteValue(&time[0].start, &rhs);
      CMTimeMake(&time2, 1, 1000000000);
      lhs = time[0].start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_159:
        time[0].start.value = v152.value;
        time[0].start.timescale = v152.timescale;
        time[0].start.flags = flags;
        time[0].start.epoch = epoch;
        lhs.value = v155.value;
        lhs.timescale = v155.timescale;
        lhs.flags = v36;
        lhs.epoch = v37;
        if (CMTimeCompare(&time[0].start, &lhs) < 0)
        {
          v33 = v34 - 1;
          goto LABEL_56;
        }
      }
      v38 = *(_OWORD *)v35;
      v39 = *((_OWORD *)v35 + 2);
      *(_OWORD *)&time[0].start.epoch = *((_OWORD *)v35 + 1);
      *(_OWORD *)&time[0].duration.timescale = v39;
      *(_OWORD *)&time[0].start.value = v38;
      CMTimeRangeGetEnd(&v122, time);
      if (v32 != 3 && (v122.flags & 0x1F) != 3)
        goto LABEL_160;
      memset(time, 0, 24);
      lhs.value = v152.value;
      lhs.timescale = v152.timescale;
      lhs.flags = flags;
      lhs.epoch = epoch;
      time1 = v122;
      CMTimeSubtract(&rhs, &lhs, &time1);
      CMTimeAbsoluteValue(&time[0].start, &rhs);
      CMTimeMake(&time2, 1, 1000000000);
      lhs = time[0].start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_160:
        time[0].start.value = v152.value;
        time[0].start.timescale = v152.timescale;
        time[0].start.flags = flags;
        time[0].start.epoch = epoch;
        lhs = v122;
        if (CMTimeCompare(&time[0].start, &lhs) < 0)
          break;
      }
      v30 = v34 + 1;
LABEL_56:
      v31 = v33 + v30;
      if (v30 >= v108)
        goto LABEL_57;
    }
    v88 = *(_OWORD *)v35;
    v89 = *((_OWORD *)v35 + 2);
    *(_OWORD *)&time[0].start.epoch = *((_OWORD *)v35 + 1);
    *(_OWORD *)&time[0].duration.timescale = v89;
    *(_OWORD *)&time[0].start.value = v88;
    CMTimeRangeGetEnd(&v121, time);
LABEL_58:
    v20 = v98;
    NumSamples = v100;
LABEL_60:
    memset(&v122, 0, sizeof(v122));
    time[0].start.value = v149.value;
    time[0].start.timescale = v149.timescale;
    time[0].start.flags = flags;
    time[0].start.epoch = epoch;
    rhs = start;
    CMTimeAdd(&v122, &time[0].start, &rhs);
    memset(&v155, 0, sizeof(v155));
    time[0].start = v121;
    rhs = v122;
    CMTimeMinimum(&v155, &time[0].start, &rhs);
    v40 = *(opaqueCMSampleBuffer **)(DerivedStorage + 96);
    value = v155.value;
    v41 = v155.flags;
    timescale = v155.timescale;
    v42 = v155.epoch;
    timingArrayEntriesNeededOut = 0;
    v43 = CMSampleBufferGetNumSamples(v40);
    if (CMSampleBufferGetOutputSampleTimingInfoArray(v40, 0, 0, &timingArrayEntriesNeededOut))
    {
      v44 = 0;
LABEL_155:
      v95 = v44;
LABEL_156:
      free(v95);
LABEL_141:
      v58 = 0;
      v52 = 0;
      goto LABEL_144;
    }
    if (timingArrayEntriesNeededOut < 1)
    {
      v44 = 0;
LABEL_134:
      v91 = FigSignalErrorAt();
      free(v44);
      v46 = 0;
      v2 = MEMORY[0x1E0CA2E18];
      if (!v91)
        goto LABEL_80;
      goto LABEL_141;
    }
    v44 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut, 0x1000040FF89C88EuLL);
    if (!v44)
      goto LABEL_134;
    if (CMSampleBufferGetOutputSampleTimingInfoArray(v40, timingArrayEntriesNeededOut, v44, 0))
      goto LABEL_155;
    if (timingArrayEntriesNeededOut == 1)
    {
      memset(time, 0, 24);
      rhs.value = value;
      rhs.timescale = timescale;
      rhs.flags = v41;
      rhs.epoch = v42;
      lhs = v44->presentationTimeStamp;
      CMTimeSubtract(&time[0].start, &rhs, &lhs);
      rhs = time[0].start;
      v45 = vcvtmd_s64_f64(CMTimeGetSeconds(&rhs) * (double)v44->duration.timescale / (double)v44->duration.value + 1.0);
      if (v43 < v45)
        v45 = v43;
      v46 = v45 & ~(v45 >> 63);
      goto LABEL_79;
    }
    if (timingArrayEntriesNeededOut < 1)
      goto LABEL_134;
    if (v43 < 1)
    {
      v46 = 0;
    }
    else
    {
      v99 = v20;
      v101 = NumSamples;
      v46 = 0;
      p_epoch = &v44->presentationTimeStamp.epoch;
      while (1)
      {
        v152.value = *(p_epoch - 2);
        v152.timescale = *((_DWORD *)p_epoch - 2);
        v48 = *((_DWORD *)p_epoch - 1);
        v49 = *p_epoch;
        if ((v41 & 0x1F) != 3 && (*((_DWORD *)p_epoch - 1) & 0x1F) != 3)
          goto LABEL_161;
        memset(time, 0, 24);
        lhs.value = value;
        lhs.timescale = timescale;
        lhs.flags = v41;
        lhs.epoch = v42;
        time1.value = v152.value;
        time1.timescale = v152.timescale;
        time1.flags = v48;
        time1.epoch = v49;
        CMTimeSubtract(&rhs, &lhs, &time1);
        CMTimeAbsoluteValue(&time[0].start, &rhs);
        CMTimeMake(&time2, 1, 1000000000);
        lhs = time[0].start;
        if (CMTimeCompare(&lhs, &time2) > 0)
        {
LABEL_161:
          time[0].start.value = value;
          time[0].start.timescale = timescale;
          time[0].start.flags = v41;
          time[0].start.epoch = v42;
          lhs.value = v152.value;
          lhs.timescale = v152.timescale;
          lhs.flags = v48;
          lhs.epoch = v49;
          if (CMTimeCompare(&time[0].start, &lhs) < 0)
            break;
        }
        p_epoch += 9;
        if (v43 == ++v46)
        {
          v46 = v43;
          break;
        }
      }
      v20 = v99;
      NumSamples = v101;
    }
LABEL_79:
    free(v44);
    v2 = MEMORY[0x1E0CA2E18];
LABEL_80:
    v50 = v46 - *(_QWORD *)(DerivedStorage + 104);
    if (v50 <= 1)
      v50 = 1;
    if (v20 >= v50)
      v20 = v50;
LABEL_84:
    v51 = *(const void **)(DerivedStorage + 96);
    if (v51)
      v52 = (void *)CFRetain(v51);
    else
      v52 = 0;
    v3 = (__int128 *)MEMORY[0x1E0CA2E68];
    if (NumSamples < 1)
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v58 = CMCopyDictionaryOfAttachments(AllocatorForMedia, v52, 0);
      v59 = CMSampleBufferCreateCopy(allocator, (CMSampleBufferRef)v52, &sampleBufferOut);
      v60 = *(const void **)(DerivedStorage + 96);
      if (v60)
      {
        CFRelease(v60);
        *(_QWORD *)(DerivedStorage + 96) = 0;
      }
      if (!v59)
      {
        v55 = NumSamples;
        if (v58)
        {
          CMSetAttachments(sampleBufferOut, v58, 0);
          CFRelease(v58);
        }
        goto LABEL_98;
      }
      goto LABEL_144;
    }
    v159.location = *(_QWORD *)(DerivedStorage + 104);
    v159.length = v20;
    v53 = CMSampleBufferCopySampleBufferForRange(allocator, *(CMSampleBufferRef *)(DerivedStorage + 96), v159, &sampleBufferOut);
    v54 = *(_QWORD *)(DerivedStorage + 104) + v20;
    *(_QWORD *)(DerivedStorage + 104) = v54;
    v55 = NumSamples;
    if (v54 >= NumSamples)
    {
      v56 = *(const void **)(DerivedStorage + 96);
      if (v56)
      {
        CFRelease(v56);
        *(_QWORD *)(DerivedStorage + 96) = 0;
      }
    }
    if (v53)
    {
LABEL_151:
      v58 = 0;
      goto LABEL_144;
    }
LABEL_98:
    memset(&v149, 0, sizeof(v149));
    CMSampleBufferGetOutputPresentationTimeStamp(&v149, sampleBufferOut);
    v61 = sampleBufferOut;
    v62 = *(const __CFData **)(DerivedStorage + 192);
    if (v62)
    {
      CFDataGetBytePtr(*(CFDataRef *)(DerivedStorage + 192));
      CFDataGetLength(v62);
      *(_OWORD *)&v122.value = *(_OWORD *)v2;
      v122.epoch = v109;
      *(_OWORD *)&v121.value = *(_OWORD *)&v122.value;
      v121.epoch = v109;
      valuePtr = 1.0;
      CMSampleBufferGetOutputPresentationTimeStamp(&v122, v61);
      CMSampleBufferGetOutputDuration(&time[0].start, v61);
      v63 = time[0].start.timescale;
      v64 = time[0].start.flags;
      timescale = time[0].start.timescale;
      v65 = time[0].start.value;
      value = time[0].start.value;
      v66 = time[0].start.epoch;
      time[0].start = v122;
      rhs.value = v65;
      rhs.timescale = v63;
      rhs.flags = v64;
      rhs.epoch = v66;
      CMTimeAdd(&v121, &time[0].start, &rhs);
      v155 = v122;
      time[0].start = v122;
      CMSpeedRampMapTimeFromSourceToTarget();
      v152 = v121;
      time[0].start = v121;
      CMSpeedRampMapTimeFromSourceToTarget();
      rhs = v152;
      lhs = v155;
      CMTimeSubtract(&time[0].start, &rhs, &lhs);
      v67 = time[0].start.flags;
      v154 = time[0].start.timescale;
      timingArrayEntriesNeededOut = time[0].start.value;
      v68 = time[0].start.epoch;
      *(_OWORD *)&rhs.value = *v3;
      rhs.epoch = v102;
      if (CMTimeCompare(&time[0].start, &rhs))
      {
        if ((v67 & 0x1F) != 3 && (v64 & 0x1F) != 3)
          goto LABEL_103;
        memset(time, 0, 24);
        lhs.value = timingArrayEntriesNeededOut;
        lhs.timescale = v154;
        lhs.flags = v67;
        lhs.epoch = v68;
        time1.value = value;
        time1.timescale = timescale;
        time1.flags = v64;
        time1.epoch = v66;
        CMTimeSubtract(&rhs, &lhs, &time1);
        CMTimeAbsoluteValue(&time[0].start, &rhs);
        CMTimeMake(&time2, 1, 1000000000);
        lhs = time[0].start;
        if (CMTimeCompare(&lhs, &time2) > 0)
        {
LABEL_103:
          time[0].start.value = timingArrayEntriesNeededOut;
          time[0].start.timescale = v154;
          time[0].start.flags = v67;
          time[0].start.epoch = v68;
          lhs.value = value;
          lhs.timescale = timescale;
          lhs.flags = v64;
          lhs.epoch = v66;
          if (CMTimeCompare(&time[0].start, &lhs))
          {
            time[0].start.value = timingArrayEntriesNeededOut;
            time[0].start.timescale = v154;
            time[0].start.flags = v67;
            time[0].start.epoch = v68;
            Seconds = CMTimeGetSeconds(&time[0].start);
            time[0].start.value = value;
            time[0].start.timescale = timescale;
            time[0].start.flags = v64;
            time[0].start.epoch = v66;
            v70 = CMTimeGetSeconds(&time[0].start);
            v71 = (const __CFNumber *)CMGetAttachment(v61, v105, 0);
            if (v71)
            {
              v72 = v71;
              v73 = CFGetTypeID(v71);
              if (v73 == CFNumberGetTypeID())
                CFNumberGetValue(v72, kCFNumberDoubleType, &valuePtr);
            }
            valuePtr = valuePtr / (Seconds / v70);
            v74 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
            if (v74)
            {
              v75 = v74;
              CMSetAttachment(v61, v105, v74, 1u);
              CFRelease(v75);
            }
          }
        }
      }
      time[0].start = v155;
      CMSampleBufferSetOutputPresentationTimeStamp(v61, &time[0].start);
      v61 = sampleBufferOut;
      v2 = MEMORY[0x1E0CA2E18];
    }
    if (CMGetAttachment(v61, v105, 0))
    {
      FigCFNumberGetFloat64();
      v77 = v76;
    }
    else
    {
      v77 = 1.0;
    }
    if (dword_1EE2A3680)
    {
      LODWORD(lhs.value) = 0;
      LOBYTE(time1.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      v79 = lhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, time1.value))
        v80 = v79;
      else
        v80 = v79 & 0xFFFFFFFE;
      if (v80)
      {
        v81 = *(_QWORD *)(DerivedStorage + 104);
        time[0].start = v149;
        v82 = CMTimeGetSeconds(&time[0].start);
        v83 = sampleBufferOut;
        CMSampleBufferGetOutputPresentationTimeStamp(&v117, sampleBufferOut);
        v84 = CMTimeGetSeconds(&v117);
        CMSampleBufferGetOutputPresentationTimeStamp(&v116, sampleBufferOut);
        v85 = CMTimeGetSeconds(&v116);
        CMTimebaseGetTime(&v115, *(CMTimebaseRef *)(DerivedStorage + 16));
        v86 = v85 - CMTimeGetSeconds(&v115);
        CMTimebaseGetTime(&v114, *(CMTimebaseRef *)(DerivedStorage + 16));
        v87 = CMTimeGetSeconds(&v114);
        LODWORD(rhs.value) = 136318210;
        *(CMTimeValue *)((char *)&rhs.value + 4) = (CMTimeValue)"speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel";
        LOWORD(rhs.flags) = 2082;
        *(_QWORD *)((char *)&rhs.flags + 2) = DerivedStorage + 200;
        HIWORD(rhs.epoch) = 2048;
        v127 = a1;
        v128 = 2048;
        v129 = v52;
        v130 = 1024;
        v131 = v106;
        v132 = 1024;
        v133 = v81;
        v134 = 1024;
        v135 = v55;
        v136 = 2048;
        v137 = v82;
        v138 = 2048;
        v139 = v83;
        v140 = 2048;
        v141 = v84;
        v142 = 2048;
        v143 = v77;
        v144 = 2048;
        v145 = v86;
        v146 = 2048;
        v147 = v87;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      v3 = (__int128 *)MEMORY[0x1E0CA2E68];
    }
    if (CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 152), sampleBufferOut))
      goto LABEL_151;
    CMSampleBufferGetOutputPresentationTimeStamp(&v113, sampleBufferOut);
    CMSampleBufferGetOutputDuration(&v112, sampleBufferOut);
    CMTimeAdd(&time[0].start, &v113, &v112);
    *(_OWORD *)(DerivedStorage + 112) = *(_OWORD *)&time[0].start.value;
    *(_QWORD *)(DerivedStorage + 128) = time[0].start.epoch;
    if (sampleBufferOut)
    {
      CFRelease(sampleBufferOut);
      sampleBufferOut = 0;
    }
    if (v52)
      CFRelease(v52);
  }
  *(_OWORD *)&time[0].start.value = *(_OWORD *)v2;
  time[0].start.epoch = v109;
  *(_OWORD *)&lhs.value = *(_OWORD *)&time[0].start.value;
  lhs.epoch = v109;
  v10 = *(opaqueCMSampleBuffer **)(v7 + 96);
  if (v10)
  {
    if (CMSampleBufferGetNumSamples(v10))
    {
      CMSampleBufferGetOutputDuration(&time1, *(CMSampleBufferRef *)(v8 + 96));
      v110 = *v3;
      *(_OWORD *)&time2.value = *v3;
      time2.epoch = v102;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        memset(&time2, 0, sizeof(time2));
        CMTimebaseGetTime(&time2, *(CMTimebaseRef *)(v8 + 16));
        v149.value = *(_QWORD *)v3;
        v149.timescale = *((_DWORD *)v3 + 2);
        v11 = (_OWORD *)(v8 + 112);
        v12 = v96;
        v13 = v102;
        if ((*(_DWORD *)(v8 + 124) & 0x1D) == 1)
        {
          *(_OWORD *)&v121.value = *v11;
          v121.epoch = *(_QWORD *)(v8 + 128);
          v155 = time2;
          CMTimeSubtract(&v122, &v121, &v155);
          v149.value = v122.value;
          v12 = v122.flags;
          v149.timescale = v122.timescale;
          v13 = v122.epoch;
        }
        v122.value = v149.value;
        v122.timescale = v149.timescale;
        v122.flags = v12;
        v122.epoch = v13;
        v121 = *(CMTime *)(v8 + 64);
        if (CMTimeCompare(&v122, &v121) > 0)
        {
          *(_OWORD *)&v122.value = *v11;
          v122.epoch = *(_QWORD *)(v8 + 128);
          v121 = *(CMTime *)(v8 + 40);
          CMTimeSubtract(&lhs, &v122, &v121);
          v14 = 0;
          v2 = MEMORY[0x1E0CA2E18];
          goto LABEL_24;
        }
        if ((v12 & 1) != 0)
        {
          v152.value = v149.value;
          v152.timescale = v149.timescale;
          v152.flags = v12;
          v152.epoch = v13;
        }
        else
        {
          *(_OWORD *)&v152.value = v110;
          v152.epoch = v102;
        }
        v2 = MEMORY[0x1E0CA2E18];
        v122 = *(CMTime *)(v8 + 64);
        CMTimeSubtract(&time[0].start, &v122, &v152);
      }
    }
    else
    {
      *(_OWORD *)&time[0].start.value = *MEMORY[0x1E0CA2E30];
      time[0].start.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E30] + 16);
    }
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
LABEL_24:
  start = time[0].start;
  v150 = lhs.value;
  v151 = lhs.timescale;
  if (v14)
    goto LABEL_25;
  v92 = lhs.flags;
  v109 = lhs.epoch;
LABEL_138:
  v58 = 0;
  if (*(_DWORD *)(DerivedStorage + 36) == 1)
  {
    v52 = 0;
    if ((v92 & 0x1D) != 1)
      goto LABEL_144;
    v93 = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    v94 = *(NSObject **)(DerivedStorage + 176);
    time[0].start.value = v150;
    time[0].start.timescale = v151;
    time[0].start.flags = v92;
    time[0].start.epoch = v109;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v93, v94, &time[0].start, 0);
    goto LABEL_141;
  }
  v52 = 0;
LABEL_144:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  if (v52)
    CFRelease(v52);
LABEL_146:
  if (sampleBufferOut)
    CFRelease(sampleBufferOut);
  if (v58)
    CFRelease(v58);
}

uint64_t speedramp_dataBecameReady()
{
  uint64_t result;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v1 = *(_QWORD *)(result + 24);
    result = CMBaseObjectGetVTable();
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
    if (v2)
      return v2(v1);
  }
  return result;
}

uint64_t speedramp_downstreamBufferQueueLowWater()
{
  uint64_t result;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v1 = *(_QWORD *)(result + 24);
    result = CMBaseObjectGetVTable();
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
    if (v2)
      return v2(v1);
  }
  return result;
}

uint64_t speedRampRenderPipelineTimerQueueSetupOnce(uint64_t *a1)
{
  uint64_t result;

  result = FigDispatchQueueCreateWithPriority();
  *a1 = result;
  return result;
}

uint64_t speedramp_wakeUpAndCheckTheTimebase()
{
  uint64_t result;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  result = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)result)
  {
    v1 = *(_QWORD *)(result + 24);
    result = CMBaseObjectGetVTable();
    v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
    if (v2)
      return v2(v1);
  }
  return result;
}

uint64_t speedramp_reflectNotificationFromDownstreamRenderPipeline()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

uint64_t speedramp_reflectNotificationFromUpstreamBufferQueue()
{
  uint64_t DerivedStorage;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
    v1 = *(const void **)(DerivedStorage + 96);
    if (v1)
    {
      CFRelease(v1);
      *(_QWORD *)(DerivedStorage + 96) = 0;
    }
    v2 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E0CA2E18];
    *(_QWORD *)(DerivedStorage + 128) = *(_QWORD *)(v2 + 16);
    CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 136));
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
    v3 = *(_QWORD *)(DerivedStorage + 24);
    v4 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v4)
      v4(v3);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  return CMNotificationCenterPostNotification();
}

CFMutableDictionaryRef speedRampRenderPipelineSetupOnce()
{
  CFMutableDictionaryRef result;

  sSpeedRampRenderPipelineVTableQueue = (uint64_t)dispatch_queue_create("com.apple.coremedia.speedramprenderpipeline.vtables", 0);
  result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, 0);
  sSpeedRampRenderPipelineVTableDictionary = (uint64_t)result;
  return result;
}

void speedRamp_RenderPipeline_getVTableWithOptionalMethodsWork(int *a1)
{
  const void *v2;
  _QWORD *Value;
  _OWORD *v4;

  v2 = (const void *)*a1;
  Value = CFDictionaryGetValue((CFDictionaryRef)sSpeedRampRenderPipelineVTableDictionary, v2);
  if (!Value)
  {
    Value = malloc_type_malloc(0x18uLL, 0x6004045F868BCuLL);
    v4 = malloc_type_malloc(0x68uLL, 0x10800408129918FuLL);
    v4[4] = xmmword_1E2FBB668;
    v4[5] = *(_OWORD *)off_1E2FBB678;
    *((_QWORD *)v4 + 12) = figSpeedRampRenderPipelineDoesSupportTransitionToFormatDescription;
    *v4 = kFigSpeedRampRenderPipeline_FigRenderPipelineClass;
    v4[1] = *(_OWORD *)&off_1E2FBB638;
    v4[2] = xmmword_1E2FBB648;
    v4[3] = *(_OWORD *)&off_1E2FBB658;
    if ((v2 & 1) != 0)
    {
      if ((v2 & 2) != 0)
        goto LABEL_4;
    }
    else
    {
      *((_QWORD *)v4 + 1) = 0;
      if ((v2 & 2) != 0)
      {
LABEL_4:
        if ((v2 & 4) != 0)
          goto LABEL_5;
        goto LABEL_11;
      }
    }
    *((_QWORD *)v4 + 2) = 0;
    if ((v2 & 4) != 0)
    {
LABEL_5:
      if ((v2 & 8) != 0)
      {
LABEL_7:
        *Value = 0;
        Value[1] = &kFigSpeedRampRenderPipeline_BaseClass;
        Value[2] = v4;
        CFDictionarySetValue((CFMutableDictionaryRef)sSpeedRampRenderPipelineVTableDictionary, v2, Value);
        goto LABEL_8;
      }
LABEL_6:
      *((_QWORD *)v4 + 11) = 0;
      goto LABEL_7;
    }
LABEL_11:
    *((_QWORD *)v4 + 10) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_8:
  *((_QWORD *)a1 + 1) = Value;
}

uint64_t figSpeedRampRenderPipelineSetRateAndAnchorTime(float a1, float a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t, __int128 *, __int128 *, float, float);
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v9 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v14 = *a4;
  v15 = *((_QWORD *)a4 + 2);
  v12 = *a5;
  v13 = *((_QWORD *)a5 + 2);
  v10 = *(uint64_t (**)(uint64_t, __int128 *, __int128 *, float, float))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                            + 16)
                                                                                + 8);
  if (!v10)
    return 4294954514;
  v18 = v14;
  v19 = v15;
  v16 = v12;
  v17 = v13;
  return v10(v9, &v18, &v16, a1, a2);
}

uint64_t figSpeedRampRenderPipelineStartAndUseTimebaseAtTransition(uint64_t a1, const void *a2, __int128 *a3, const void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, const void *, __int128 *, const void *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  void (*v16)(uint64_t);
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), a4);
  CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), a2);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  v12 = *(_QWORD *)(DerivedStorage + 144);
  v17 = *a3;
  v18 = *((_QWORD *)a3 + 2);
  v13 = *(uint64_t (**)(uint64_t, const void *, __int128 *, const void *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (!v13)
    return 4294954514;
  v19 = v17;
  v20 = v18;
  result = v13(v12, a2, &v19, a4, a5, a6);
  if (!(_DWORD)result)
  {
    v15 = *(_QWORD *)(DerivedStorage + 24);
    v16 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (v16)
      v16(v15);
    return 0;
  }
  return result;
}

uint64_t figSpeedRampRenderPipelineStartOffline(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __int128 *);
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v4)
    return 4294954514;
  v8 = v6;
  v9 = v7;
  return v4(v3, &v8);
}

uint64_t figSpeedRampRenderPipelineStopOffline()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v1)
    return v1(v0);
  else
    return 4294954514;
}

uint64_t figSpeedRampRenderPipelinePretendOutputIsLow(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel(a1);
  v3 = *(_QWORD *)(DerivedStorage + 144);
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v4)
    return v4(v3);
  else
    return 4294954514;
}

uint64_t figSpeedRampRenderPipelineSynchronizeToTimebase()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
  if (v1)
    return v1(v0);
  else
    return 4294954514;
}

uint64_t figSpeedRampRenderPipelineRequestDecodeForPreroll(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  speedramp_remapAndTransferSampleBuffersUpToHighWaterLevel(a1);
  v5 = *(_QWORD *)(DerivedStorage + 144);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v6)
    return v6(v5, a2);
  else
    return 4294954514;
}

uint64_t figSpeedRampRenderPipelineReset(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 88));
  v4 = *(const void **)(DerivedStorage + 96);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v5 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)(DerivedStorage + 112) = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(DerivedStorage + 128) = *(_QWORD *)(v5 + 16);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(DerivedStorage + 136));
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 88));
  result = CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  if (!(_DWORD)result)
  {
    v7 = *(_QWORD *)(DerivedStorage + 144);
    v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
    if (v8)
    {
      result = v8(v7, a2);
      if (!(_DWORD)result)
      {
        v9 = *(_QWORD *)(DerivedStorage + 24);
        v10 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
        if (v10)
          v10(v9);
        return 0;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t figSpeedRampRenderPipelineFinishSettingRate()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v1 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (v1)
    return v1(v0);
  else
    return 4294954514;
}

uint64_t figSpeedRampRenderPipelineCancelAndFlushTransition(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
  if (v4)
    return v4(v3, a2);
  else
    return 4294954514;
}

uint64_t figSpeedRampRenderPipelineFlushFromTime(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, __int128 *);
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v4 = *(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
  if (!v4)
    return 4294954514;
  v8 = v6;
  v9 = v7;
  return v4(v3, &v8);
}

uint64_t figSpeedRampRenderPipelineDoesSupportTransitionToFormatDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v3 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 144);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 96);
  if (v4)
    return v4(v3, a2);
  else
    return 0;
}

uint64_t figSpeedRampRenderPipelineInvalidate()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  opaqueCMBufferQueueTriggerToken *v2;
  opaqueCMBufferQueueTriggerToken *v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t FigBaseObject;
  uint64_t v8;
  void (*v9)(uint64_t);
  NSObject *v10;
  OpaqueCMTimebase *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = DerivedStorage;
    if (!*(_BYTE *)DerivedStorage)
    {
      *(_BYTE *)DerivedStorage = 1;
      if (*(_QWORD *)(DerivedStorage + 144))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      if (*(_QWORD *)(v1 + 8))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      v2 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 160);
      if (v2)
      {
        CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v1 + 8), v2);
        *(_QWORD *)(v1 + 160) = 0;
      }
      v3 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 168);
      if (v3)
      {
        CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v1 + 152), v3);
        *(_QWORD *)(v1 + 168) = 0;
      }
      v4 = *(_QWORD *)(v1 + 24);
      if (v4 && *(_BYTE *)(v1 + 32))
      {
        v5 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v5)
          v5(v4, 0, 0);
        *(_BYTE *)(v1 + 32) = 0;
      }
      v6 = *(_QWORD *)(v1 + 144);
      if (v6)
      {
        FigBaseObject = FigRenderPipelineGetFigBaseObject(v6);
        if (FigBaseObject)
        {
          v8 = FigBaseObject;
          v9 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v9)
            v9(v8);
        }
      }
      v10 = *(NSObject **)(v1 + 176);
      if (v10)
      {
        v11 = *(OpaqueCMTimebase **)(v1 + 16);
        if (v11)
        {
          CMTimebaseRemoveTimerDispatchSource(v11, v10);
          v10 = *(NSObject **)(v1 + 176);
        }
        dispatch_source_cancel(v10);
      }
      if (*(_QWORD *)(v1 + 16))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
    }
  }
  return 0;
}

void figSpeedRampRenderPipelineFinalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  figSpeedRampRenderPipelineInvalidate();
  v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  v2 = (const void *)DerivedStorage[1];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[1] = 0;
  }
  v3 = (const void *)DerivedStorage[2];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[2] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[11] = 0;
  v4 = (const void *)DerivedStorage[12];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[12] = 0;
  }
  v5 = (const void *)DerivedStorage[17];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[17] = 0;
  }
  v6 = (const void *)DerivedStorage[18];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[18] = 0;
  }
  v7 = (const void *)DerivedStorage[19];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[19] = 0;
  }
  v8 = DerivedStorage[22];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[22] = 0;
  }
  FigSimpleMutexDestroy();
  DerivedStorage[23] = 0;
  v9 = (const void *)DerivedStorage[24];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[24] = 0;
  }
}

__CFString *figSpeedRampRenderPipelineCopyDebugDescription(uint64_t a1)
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;
  uint64_t v4;
  opaqueCMBufferQueue *v5;
  CMItemCount BufferCount;
  const __CFData *v7;
  unint64_t Length;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigSpeedRampRenderPipeline %p: "), a1);
  v4 = DerivedStorage[18];
  v5 = (opaqueCMBufferQueue *)DerivedStorage[1];
  BufferCount = CMBufferQueueGetBufferCount(v5);
  CFStringAppendFormat(Mutable, 0, CFSTR("%s downstreamRenderPipeline %@, sourceSampleBufferQueue %p (%d sbufs)"), DerivedStorage + 25, v4, v5, BufferCount);
  v7 = (const __CFData *)DerivedStorage[24];
  if (v7)
  {
    Length = CFDataGetLength(v7);
    CFStringAppendFormat(Mutable, 0, CFSTR(", speedRampData with %d mappings"), Length / 0x60);
  }
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t figSpeedRampRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  _BYTE *DerivedStorage;
  _BYTE *v8;
  uint64_t result;
  const void *v10;
  void *v11;
  void *v12;
  const __CFData *v13;
  CMTime v14;
  CMTime v15;
  CMTime v16;

  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v8 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (CFEqual(CFSTR("SourceSampleBufferQueue"), a2))
  {
    v10 = (const void *)*((_QWORD *)v8 + 1);
    if (v10)
    {
LABEL_6:
      v11 = (void *)CFRetain(v10);
LABEL_7:
      v12 = v11;
LABEL_13:
      result = 0;
      *a4 = v12;
      return result;
    }
LABEL_12:
    v12 = 0;
    goto LABEL_13;
  }
  if (CFEqual(CFSTR("SourceSampleBufferConsumer"), a2))
    return 4294954446;
  if (CFEqual(CFSTR("SpeedRampData"), a2))
  {
    v10 = (const void *)*((_QWORD *)v8 + 24);
    if (v10)
      goto LABEL_6;
    goto LABEL_12;
  }
  if (CFEqual(CFSTR("PrefersConsumptionDrivenReads"), a2))
  {
    v10 = (const void *)*MEMORY[0x1E0C9AE50];
    if (*MEMORY[0x1E0C9AE50])
      goto LABEL_6;
    goto LABEL_12;
  }
  if (!CFEqual(CFSTR("EndPresentationTimeForQueuedSamples"), a2))
    return FigRenderPipelineCopyProperty(*((_QWORD *)v8 + 18), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  memset(&v16, 0, sizeof(v16));
  CMBufferQueueGetEndPresentationTimeStamp(&v16, *((CMBufferQueueRef *)v8 + 1));
  if ((v16.flags & 1) != 0)
  {
    v15 = v16;
    MEMORY[0x19402EEEC](*((_QWORD *)v8 + 23));
    v13 = (const __CFData *)*((_QWORD *)v8 + 24);
    if (v13)
    {
      CFDataGetBytePtr(v13);
      CFDataGetLength(*((CFDataRef *)v8 + 24));
      v14 = v16;
      CMSpeedRampMapTimeFromSourceToTarget();
    }
    MEMORY[0x19402EF04](*((_QWORD *)v8 + 23));
    v14 = v15;
    v11 = CMTimeCopyAsDictionary(&v14, a3);
    goto LABEL_7;
  }
  return FigRenderPipelineCopyProperty(*((_QWORD *)v8 + 18), (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t figSpeedRampRenderPipelineSetProperty(uint64_t a1, const void *a2, OpaqueCMTimebase *a3)
{
  _BYTE *DerivedStorage;
  _BYTE *v7;
  CFTypeID v9;
  uint64_t v10;
  const __CFAllocator *v11;
  __CFArray *Mutable;
  __CFArray *v13;
  const UInt8 *BytePtr;
  unint64_t Length;
  const __CFArray *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  const UInt8 *i;
  int v21;
  __CFString *v22;
  int v23;
  uint64_t v24;
  const UInt8 *v25;
  uint64_t v26;
  __int128 v27;
  Float64 Seconds;
  __int128 v29;
  Float64 v30;
  __int128 v31;
  double v32;
  __int128 v33;
  Float64 v34;
  CFTypeID v35;
  uint64_t FigBaseObject;
  uint64_t (*v37)(uint64_t, const void *, OpaqueCMTimebase *);
  uint64_t v38;
  const UInt8 *v39;
  __int128 v40;
  __int128 v41;
  Float64 v42;
  __int128 v43;
  __int128 v44;
  Float64 v45;
  CFIndex Count;
  CFIndex v47;
  CFIndex v48;
  int v49;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  unsigned int value;
  unsigned int v52;
  const void *ValueAtIndex;
  _OWORD *v54;
  const __CFData *v55;
  CMTimeEpoch v56;
  CMTimeFlags v57;
  CMTimeEpoch v58;
  CMTimeFlags v59;
  NSObject *v60;
  unsigned int v61;
  unsigned int v62;
  Float64 v63;
  Float64 v64;
  Float64 v65;
  Float64 v66;
  const void *v67;
  uint64_t v68;
  void (*v69)(uint64_t);
  const void *v70;
  const __CFAllocator *v71;
  unint64_t v72;
  const __CFData *v73;
  uint64_t v74;
  const UInt8 *v75;
  CFTypeRef cf;
  __CFArray *theArray;
  __n128 v78;
  CMTimeEpoch v79;
  __n128 v80;
  CMTimeEpoch v81;
  CMTime time2;
  CMTime type;
  CMTime lhs;
  CMTime v85;
  CFTypeRef v86;
  __int16 v87;
  Float64 v88;
  __int16 v89;
  Float64 v90;
  __int16 v91;
  Float64 v92;
  __int16 v93;
  Float64 v94;
  CMTimeValue v95;
  CMTimeScale v96;
  CMTimeValue v97;
  CMTimeScale v98;
  CMTimeRange time[2];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  DerivedStorage = (_BYTE *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (*DerivedStorage)
    return FigSignalErrorAt();
  if (!CFEqual(CFSTR("SpeedRampData"), a2))
  {
    if (!CFEqual(CFSTR("Timebase"), a2))
    {
      if (!CFEqual(CFSTR("ExpectScaledEdits"), a2))
        return FigRenderPipelineSetProperty_0(*((_QWORD *)v7 + 18), (uint64_t)a2, (uint64_t)a3);
      return 0;
    }
    if (!a3 || (v35 = CFGetTypeID(a3), v35 == CMTimebaseGetTypeID()))
    {
      speedramp_setTimebase(a1, a3);
      FigBaseObject = FigRenderPipelineGetFigBaseObject(*((_QWORD *)v7 + 18));
      v37 = *(uint64_t (**)(uint64_t, const void *, OpaqueCMTimebase *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 56);
      if (v37)
        v38 = v37(FigBaseObject, a2, a3);
      else
        v38 = 4294954514;
      v68 = *((_QWORD *)v7 + 3);
      v69 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
      if (v69)
        v69(v68);
      return v38;
    }
    return FigSignalErrorAt();
  }
  if (a3)
  {
    v9 = CFGetTypeID(a3);
    if (v9 != CFDataGetTypeID())
      return FigSignalErrorAt();
  }
  cf = (CFTypeRef)a1;
  v10 = CMBaseObjectGetDerivedStorage();
  v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v13 = Mutable;
  theArray = Mutable;
  v73 = a3;
  v74 = v10;
  if (a3)
  {
    BytePtr = CFDataGetBytePtr(a3);
    Length = CFDataGetLength(a3);
    v16 = v13;
    if (Length >= 0x60)
    {
      v17 = 0;
      v18 = Length / 0x60;
      v19 = Length / 0x60;
      v72 = Length / 0x60 - 1;
      v75 = BytePtr;
      for (i = BytePtr + 48; ; i += 960)
      {
        if ((int)v19 - (int)v17 >= 10)
          v21 = 10;
        else
          v21 = v19 - v17;
        v22 = CFStringCreateMutable(v11, 0);
        v23 = v21 + v17;
        CFStringAppendFormat(v22, 0, CFSTR("mappings %d..%d of %d, source range -> target range:"), v17, (v23 - 1), v19);
        if ((int)v19 - (int)v17 >= 1)
        {
          v24 = v23;
          v25 = i;
          v26 = v17;
          do
          {
            v27 = *((_OWORD *)v25 - 3);
            time[0].start.epoch = *((_QWORD *)v25 - 4);
            *(_OWORD *)&time[0].start.value = v27;
            Seconds = CMTimeGetSeconds(&time[0].start);
            v29 = *(_OWORD *)v25;
            time[0].start.epoch = *((_QWORD *)v25 + 2);
            *(_OWORD *)&time[0].start.value = v29;
            v30 = CMTimeGetSeconds(&time[0].start);
            v31 = *(_OWORD *)(v25 - 24);
            time[0].start.epoch = *((_QWORD *)v25 - 1);
            *(_OWORD *)&time[0].start.value = v31;
            v32 = CMTimeGetSeconds(&time[0].start);
            v33 = *(_OWORD *)(v25 + 24);
            time[0].start.epoch = *((_QWORD *)v25 + 5);
            *(_OWORD *)&time[0].start.value = v33;
            v34 = CMTimeGetSeconds(&time[0].start);
            CFStringAppendFormat(v22, 0, CFSTR("\n %3d: %7.3f -> %7.3f (rate %1.2f)"), v26++, *(_QWORD *)&Seconds, *(_QWORD *)&v30, v32 / v34);
            v25 += 96;
          }
          while (v26 < v24);
        }
        v17 += 10;
        v16 = theArray;
        if (v18 <= v17)
          break;
        CFArrayAppendValue(theArray, v22);
        CFRelease(v22);
      }
      v39 = &v75[96 * v72];
      v40 = *(_OWORD *)v39;
      v41 = *((_OWORD *)v39 + 2);
      *(_OWORD *)&time[0].start.epoch = *((_OWORD *)v39 + 1);
      *(_OWORD *)&time[0].duration.timescale = v41;
      *(_OWORD *)&time[0].start.value = v40;
      CMTimeRangeGetEnd(&v85, time);
      v42 = CMTimeGetSeconds(&v85);
      v43 = *((_OWORD *)v39 + 3);
      v44 = *((_OWORD *)v39 + 5);
      *(_OWORD *)&time[0].start.epoch = *((_OWORD *)v39 + 4);
      *(_OWORD *)&time[0].duration.timescale = v44;
      *(_OWORD *)&time[0].start.value = v43;
      CMTimeRangeGetEnd(&lhs, time);
      v45 = CMTimeGetSeconds(&lhs);
      CFStringAppendFormat(v22, 0, CFSTR("\n end: %7.3f -> %7.3f"), *(_QWORD *)&v42, *(_QWORD *)&v45);
      CFArrayAppendValue(theArray, v22);
      CFRelease(v22);
    }
  }
  else
  {
    CFArrayAppendValue(Mutable, CFSTR("<no mappings>"));
    v16 = v13;
  }
  if (v16)
  {
    Count = CFArrayGetCount(v16);
    if (Count >= 1)
    {
      v47 = Count;
      v48 = 0;
      v49 = dword_1EE2A3680;
      do
      {
        if (v49)
        {
          LODWORD(lhs.value) = 0;
          LOBYTE(type.value) = 0;
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          value = lhs.value;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT))
            v52 = value;
          else
            v52 = value & 0xFFFFFFFE;
          if (v52)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(v16, v48);
            LODWORD(v85.value) = 136315906;
            *(CMTimeValue *)((char *)&v85.value + 4) = (CMTimeValue)"figSpeedRampRenderPipelineSetSpeedRampData";
            LOWORD(v85.flags) = 2082;
            *(_QWORD *)((char *)&v85.flags + 2) = v74 + 200;
            HIWORD(v85.epoch) = 2048;
            v86 = cf;
            v87 = 2114;
            v88 = *(double *)&ValueAtIndex;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v49 = dword_1EE2A3680;
        }
        ++v48;
      }
      while (v47 != v48);
    }
  }
  MEMORY[0x19402EEEC](*(_QWORD *)(v74 + 184));
  if (v73)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(v74 + 88));
    if ((*(_DWORD *)(v74 + 124) & 0x1D) == 1)
    {
      v54 = (_OWORD *)(v74 + 112);
      v80 = 0uLL;
      v81 = 0;
      v55 = *(const __CFData **)(v74 + 192);
      *(_OWORD *)&time[0].start.value = *(_OWORD *)(v74 + 112);
      time[0].start.epoch = *(_QWORD *)(v74 + 128);
      speedramp_mapTimeFromTargetToSourceUsingMappingArrayData(v55, (__n128 *)time, &v80);
      v78 = 0uLL;
      v79 = 0;
      *(_OWORD *)&time[0].start.value = *(_OWORD *)(v74 + 112);
      time[0].start.epoch = *(_QWORD *)(v74 + 128);
      speedramp_mapTimeFromTargetToSourceUsingMappingArrayData(v73, (__n128 *)time, &v78);
      v56 = v79;
      v97 = v80.n128_u64[0];
      v57 = v80.n128_u32[3];
      v98 = v80.n128_i32[2];
      v58 = v81;
      v95 = v78.n128_u64[0];
      v59 = v78.n128_u32[3];
      v96 = v78.n128_i32[2];
      if ((v80.n128_u8[12] & 0x1F) != 3 && (v78.n128_u8[12] & 0x1F) != 3)
        goto LABEL_43;
      memset(time, 0, 24);
      type.epoch = v79;
      *(__n128 *)&lhs.value = v80;
      lhs.epoch = v81;
      *(__n128 *)&type.value = v78;
      CMTimeSubtract(&v85, &lhs, &type);
      CMTimeAbsoluteValue(&time[0].start, &v85);
      CMTimeMake(&time2, 1, 1000000000);
      lhs = time[0].start;
      if (CMTimeCompare(&lhs, &time2) > 0)
      {
LABEL_43:
        time[0].start.value = v97;
        time[0].start.timescale = v98;
        time[0].start.flags = v57;
        time[0].start.epoch = v58;
        lhs.value = v95;
        lhs.timescale = v96;
        lhs.flags = v59;
        lhs.epoch = v56;
        if (CMTimeCompare(&time[0].start, &lhs))
        {
          LODWORD(lhs.value) = 0;
          LOBYTE(type.value) = 0;
          v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          v61 = lhs.value;
          if (os_log_type_enabled(v60, type.value))
            v62 = v61;
          else
            v62 = v61 & 0xFFFFFFFE;
          if (v62)
          {
            *(__n128 *)&time[0].start.value = v80;
            time[0].start.epoch = v81;
            v63 = CMTimeGetSeconds(&time[0].start);
            *(_OWORD *)&time[0].start.value = *v54;
            time[0].start.epoch = *(_QWORD *)(v74 + 128);
            v64 = CMTimeGetSeconds(&time[0].start);
            *(__n128 *)&time[0].start.value = v78;
            time[0].start.epoch = v79;
            v65 = CMTimeGetSeconds(&time[0].start);
            *(_OWORD *)&time[0].start.value = *v54;
            time[0].start.epoch = *(_QWORD *)(v74 + 128);
            v66 = CMTimeGetSeconds(&time[0].start);
            LODWORD(v85.value) = 136316674;
            *(CMTimeValue *)((char *)&v85.value + 4) = (CMTimeValue)"figSpeedRampRenderPipelineSetSpeedRampData";
            LOWORD(v85.flags) = 2082;
            *(_QWORD *)((char *)&v85.flags + 2) = v74 + 200;
            HIWORD(v85.epoch) = 2048;
            v86 = cf;
            v87 = 2048;
            v88 = v63;
            v89 = 2048;
            v90 = v64;
            v91 = 2048;
            v92 = v65;
            v93 = 2048;
            v94 = v66;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
      }
    }
    MEMORY[0x19402EF04](*(_QWORD *)(v74 + 88));
    v70 = *(const void **)(v74 + 192);
    if (v70)
    {
      CFRelease(v70);
      *(_QWORD *)(v74 + 192) = 0;
    }
    v71 = CFGetAllocator(cf);
    *(_QWORD *)(v74 + 192) = CFDataCreateCopy(v71, v73);
  }
  else
  {
    v67 = *(const void **)(v74 + 192);
    if (v67)
    {
      CFRelease(v67);
      *(_QWORD *)(v74 + 192) = 0;
    }
  }
  MEMORY[0x19402EF04](*(_QWORD *)(v74 + 184));
  if (theArray)
    CFRelease(theArray);
  return 0;
}

uint64_t speedramp_timebaseTimeJumped()
{
  uint64_t v0;
  uint64_t result;
  uint64_t (*v2)(uint64_t);

  v0 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  result = CMBaseObjectGetVTable();
  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 16) + 16);
  if (v2)
    return v2(v0);
  return result;
}

OpaqueCMTimebase *speedramp_setTimebase(uint64_t a1, OpaqueCMTimebase *a2)
{
  uint64_t DerivedStorage;
  OpaqueCMTimebase *result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  const void *v6;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  result = *(OpaqueCMTimebase **)(DerivedStorage + 16);
  if (result != a2)
  {
    if (dword_1EE2A3680)
    {
      os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      result = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    }
    if (result)
    {
      CMTimebaseRemoveTimerDispatchSource(result, *(dispatch_source_t *)(DerivedStorage + 176));
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      v6 = *(const void **)(DerivedStorage + 16);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(DerivedStorage + 16) = a2;
    if (a2)
      CFRetain(a2);
    if (v6)
      CFRelease(v6);
    result = *(OpaqueCMTimebase **)(DerivedStorage + 16);
    if (result)
    {
      CMTimebaseAddTimerDispatchSource(result, *(dispatch_source_t *)(DerivedStorage + 176));
      CMNotificationCenterGetDefaultLocalCenter();
      return (OpaqueCMTimebase *)FigNotificationCenterAddWeakListener();
    }
  }
  return result;
}

__n128 speedramp_mapTimeFromTargetToSourceUsingMappingArrayData@<Q0>(CFDataRef theData@<X1>, __n128 *a2@<X0>, __n128 *a3@<X8>)
{
  __n128 result;

  if (theData)
  {
    CFDataGetBytePtr(theData);
    CFDataGetLength(theData);
    CMSpeedRampMapTimeFromTargetToSource();
  }
  else
  {
    result = *a2;
    *a3 = *a2;
    a3[1].n128_u64[0] = a2[1].n128_u64[0];
  }
  return result;
}

uint64_t FigTTMLIntervalTreeGetTypeID()
{
  MEMORY[0x19402F294](&FigTTMLIntervalTreeGetTypeID_sRegisterFigTTMLIntervalTreeOnce, figTTMLIntervalTreeRegisterFigTTMLIntervalTree);
  return sFigTTMLIntervalTreeID;
}

uint64_t figTTMLIntervalTreeRegisterFigTTMLIntervalTree()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigTTMLIntervalTreeID = result;
  return result;
}

uint64_t FigTTMLIntervalTreeCreate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v6;
  const void *RootNode;
  uint64_t v8;
  unint64_t Count;
  CFIndex v10;
  int v11;
  uint64_t Instance;
  uint64_t v13;
  __int128 *Interval;
  CFIndex v15;
  const void *ValueAtIndex;
  uint64_t v17;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v6 = Mutable;
  if (!a3)
    goto LABEL_17;
  if (Mutable)
  {
    RootNode = (const void *)FigTTMLTreeGetRootNode(a2);
    v8 = FigTTMLTreeWalkFromNode(RootNode, (uint64_t (*)(const void *, uint64_t))figTTMLIntervalCopyNodeToArray, 0, (uint64_t)v6);
    if ((_DWORD)v8)
    {
      v17 = v8;
LABEL_12:
      CFRelease(v6);
      return v17;
    }
    Count = CFArrayGetCount(v6);
    if (Count >= 2)
    {
      v10 = Count - 1;
      do
      {
        v11 = rand();
        CFArrayExchangeValuesAtIndices(v6, v10, v11 % (v10 + 1));
        --v10;
      }
      while (v10);
    }
    MEMORY[0x19402F294](&FigTTMLIntervalTreeGetTypeID_sRegisterFigTTMLIntervalTreeOnce, figTTMLIntervalTreeRegisterFigTTMLIntervalTree);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v13 = Instance;
      Interval = (__int128 *)figTTMLIntervalCreateInterval();
      if (CFArrayGetCount(v6) >= 1)
      {
        v15 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v6, v15);
          figTTMLIntervalTreeInsert(Interval, ValueAtIndex);
          ++v15;
        }
        while (v15 < CFArrayGetCount(v6));
      }
      v17 = 0;
      *(_QWORD *)(v13 + 16) = Interval;
      *a3 = v13;
      if (!v6)
        return v17;
      goto LABEL_12;
    }
LABEL_17:
    v17 = FigSignalErrorAt();
    if (!v6)
      return v17;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLIntervalCopyNodeToArray(void *value, CFMutableArrayRef theArray)
{
  CFArrayAppendValue(theArray, value);
  return 0;
}

_QWORD *figTTMLIntervalCreateInterval()
{
  _QWORD *v0;
  uint64_t v1;
  const __CFAllocator *v2;
  const CFArrayCallBacks *v3;

  v0 = malloc_type_calloc(1uLL, 0x38uLL, 0x1020040DD9C6B3AuLL);
  v1 = MEMORY[0x1E0CA2E18];
  *(_OWORD *)v0 = *MEMORY[0x1E0CA2E18];
  v0[2] = *(_QWORD *)(v1 + 16);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v0[3] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v0[4] = CFArrayCreateMutable(v2, 0, v3);
  return v0;
}

uint64_t figTTMLIntervalTreeInsert(__int128 *a1, const void *a2)
{
  uint64_t result;
  __int128 v5;
  CMTime v6;
  CMTimeRange time1;
  CMTime time2;
  CMTimeRange v9;

  memset(&v9, 0, sizeof(v9));
  result = FigTTMLNodeGetActiveTimeRange((uint64_t)a2, (uint64_t)&v9);
  if (!(_DWORD)result)
  {
    if ((v9.start.flags & 1) == 0 || (v9.duration.flags & 1) == 0 || v9.duration.epoch || v9.duration.value < 0)
    {
      return FigSignalErrorAt();
    }
    else
    {
      time1.start = v9.duration;
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      result = CMTimeCompare(&time1.start, &time2);
      if ((_DWORD)result)
      {
        if ((*((_BYTE *)a1 + 12) & 1) == 0)
        {
          *a1 = *(_OWORD *)&v9.start.value;
          *((_QWORD *)a1 + 2) = v9.start.epoch;
        }
        *(_OWORD *)&time1.start.value = *(_OWORD *)&v9.start.value;
        *(_OWORD *)&time1.start.epoch = *(_OWORD *)&v9.start.epoch;
        v5 = *a1;
        *(_OWORD *)&time1.duration.timescale = *(_OWORD *)&v9.duration.timescale;
        *(_OWORD *)&time2.value = v5;
        time2.epoch = *((_QWORD *)a1 + 2);
        if (CMTimeRangeContainsTime(&time1, &time2))
        {
          figTTMLIntervalTreeInsertToSortedArray(*((const __CFArray **)a1 + 3), a2, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))figTTMLIntervalTreeCompareByStart);
          figTTMLIntervalTreeInsertToSortedArray(*((const __CFArray **)a1 + 4), a2, (CFComparisonResult (__cdecl *)(const void *, const void *, void *))figTTMLIntervalTreeCompareByEnd);
          return 0;
        }
        else
        {
          time1 = v9;
          CMTimeRangeGetEnd(&v6, &time1);
          *(_OWORD *)&time1.start.value = *a1;
          time1.start.epoch = *((_QWORD *)a1 + 2);
          if (CMTimeCompare(&v6, &time1.start) <= 0)
          {
            if (!*((_QWORD *)a1 + 5))
              *((_QWORD *)a1 + 5) = figTTMLIntervalCreateInterval();
          }
          else if (!*((_QWORD *)a1 + 6))
          {
            *((_QWORD *)a1 + 6) = figTTMLIntervalCreateInterval();
          }
          return figTTMLIntervalTreeInsert();
        }
      }
    }
  }
  return result;
}

void figTTMLIntervalReleaseInterval(_QWORD *a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[4];
    if (v3)
      CFRelease(v3);
    figTTMLIntervalReleaseInterval(a1[5]);
    figTTMLIntervalReleaseInterval(a1[6]);
    free(a1);
  }
}

uint64_t FigTTMLIntervalTreeAppendActiveNodesToArray(uint64_t a1, __int128 *a2, __CFArray *a3)
{
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  if (!a3 || (*((_BYTE *)a2 + 12) & 1) == 0)
    return FigSignalErrorAt();
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  figTTMLIntervalTreeAppendActiveNodesToArray(v3, (uint64_t)&v5, a3);
  return 0;
}

CFIndex figTTMLIntervalTreeAppendActiveNodesToArray(uint64_t a1, uint64_t a2, __CFArray *a3)
{
  int32_t v6;
  CFIndex v7;
  const void *v8;
  CFIndex result;
  int32_t v10;
  CFIndex i;
  const void *v12;
  CFIndex v13;
  const void *ValueAtIndex;
  CMTimeRange v15;
  CMTime v16;
  CMTime time2;
  CMTimeRange time1;

  if ((*(_BYTE *)(a2 + 12) & 1) == 0)
    return FigSignalErrorAt();
  *(_OWORD *)&time1.start.value = *(_OWORD *)a1;
  time1.start.epoch = *(_QWORD *)(a1 + 16);
  *(_OWORD *)&v15.start.value = *(_OWORD *)a2;
  v15.start.epoch = *(_QWORD *)(a2 + 16);
  v6 = CMTimeCompare(&time1.start, &v15.start);
  if (v6 < 1)
  {
    v10 = v6;
    result = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
    if (v10 < 0)
    {
      if (result >= 1)
      {
        v13 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v13);
          memset(&time1, 0, sizeof(time1));
          FigTTMLNodeGetActiveTimeRange((uint64_t)ValueAtIndex, (uint64_t)&time1);
          v15 = time1;
          CMTimeRangeGetEnd(&v16, &v15);
          *(_OWORD *)&v15.start.value = *(_OWORD *)a2;
          v15.start.epoch = *(_QWORD *)(a2 + 16);
          if (CMTimeCompare(&v16, &v15.start) < 1)
            break;
          CFArrayAppendValue(a3, ValueAtIndex);
          ++v13;
        }
        while (v13 < CFArrayGetCount(*(CFArrayRef *)(a1 + 32)));
      }
      result = *(_QWORD *)(a1 + 48);
      if (result)
        goto LABEL_8;
    }
    else if (result >= 1)
    {
      for (i = 0; i < result; ++i)
      {
        v12 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), i);
        CFArrayAppendValue(a3, v12);
        result = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
      }
    }
  }
  else
  {
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v7);
        memset(&time1, 0, sizeof(time1));
        FigTTMLNodeGetActiveTimeRange((uint64_t)v8, (uint64_t)&time1);
        *(_OWORD *)&v15.start.value = *(_OWORD *)a2;
        v15.start.epoch = *(_QWORD *)(a2 + 16);
        time2 = time1.start;
        if (CMTimeCompare(&v15.start, &time2) < 0)
          break;
        CFArrayAppendValue(a3, v8);
        ++v7;
      }
      while (v7 < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)));
    }
    result = *(_QWORD *)(a1 + 40);
    if (result)
    {
LABEL_8:
      *(_OWORD *)&time1.start.value = *(_OWORD *)a2;
      time1.start.epoch = *(_QWORD *)(a2 + 16);
      return figTTMLIntervalTreeAppendActiveNodesToArray(result, &time1, a3);
    }
  }
  return result;
}

uint64_t figTTMLIntervalTree_Init(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void figTTMLIntervalTree_Finalize(uint64_t a1)
{
  figTTMLIntervalReleaseInterval(*(_QWORD **)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
}

CFStringRef figTTMLIntervalTree_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLIntervalTree %p]"), a1);
}

CFStringRef figTTMLIntervalTree_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigTTMLIntervalTree %p]"), a1);
}

void figTTMLIntervalTreeInsertToSortedArray(const __CFArray *a1, const void *a2, CFComparisonResult (__cdecl *a3)(const void *, const void *, void *))
{
  CFIndex Count;
  CFRange v7;

  v7.length = CFArrayGetCount(a1);
  v7.location = 0;
  Count = CFArrayBSearchValues(a1, v7, a2, a3, 0);
  if (Count > CFArrayGetCount(a1))
    Count = CFArrayGetCount(a1);
  CFArrayInsertValueAtIndex(a1, Count, a2);
}

uint64_t figTTMLIntervalTreeCompareByStart(uint64_t a1, uint64_t a2)
{
  CMTime v4;
  CMTime time1;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  FigTTMLNodeGetActiveTimeRange(a1, (uint64_t)&v9);
  FigTTMLNodeGetActiveTimeRange(a2, (uint64_t)&v6);
  *(_OWORD *)&time1.value = v9;
  time1.epoch = v10;
  *(_OWORD *)&v4.value = v6;
  v4.epoch = v7;
  return CMTimeCompare(&time1, &v4);
}

uint64_t figTTMLIntervalTreeCompareByEnd(uint64_t a1, uint64_t a2)
{
  CMTime time2;
  CMTimeRange range;
  CMTime time1;
  CMTimeRange v7;
  CMTimeRange v8;

  memset(&v8, 0, sizeof(v8));
  memset(&v7, 0, sizeof(v7));
  FigTTMLNodeGetActiveTimeRange(a1, (uint64_t)&v8);
  FigTTMLNodeGetActiveTimeRange(a2, (uint64_t)&v7);
  range = v7;
  CMTimeRangeGetEnd(&time1, &range);
  range = v8;
  CMTimeRangeGetEnd(&time2, &range);
  return CMTimeCompare(&time1, &time2);
}

uint64_t FigCPEFairPlayCloudProtectorCreate(const void *a1, CFDictionaryRef theDict, _QWORD *a3)
{
  uint64_t v6;
  uint64_t DerivedStorage;
  _QWORD *v8;
  CFDictionaryRef Copy;
  const void *Value;
  const void *v11;
  CFTypeID v12;
  const void *v13;
  CFTypeRef cf;

  if (!theDict)
    return 4294955146;
  if (!CFDictionaryContainsKey(theDict, CFSTR("6519D6C3-E423-4DEA-811B-AA98B31B3180"))
    || !CFDictionaryContainsKey(theDict, CFSTR("F0C26711-9A38-43E9-BA34-8DABABF5F69D")))
  {
    return 4294955136;
  }
  if (!a3)
    return 4294955146;
  MEMORY[0x19402F294](&FigFairPlayCPEProtectorCloudGetClassID_sRegisterFigFairPlayCPEProtectorCloudTypeOnce, RegisterFigFairPlayCPEProtectorCloudType);
  v6 = CMDerivedObjectCreate();
  if (!(_DWORD)v6)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      v8 = (_QWORD *)DerivedStorage;
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theDict);
      v8[1] = Copy;
      cf = 0;
      FigBytePumpGetFigBaseObject(Copy);
      Value = CFDictionaryGetValue(theDict, CFSTR("StorageURL"));
      if (!Value || (v11 = Value, v12 = CFGetTypeID(Value), v12 != CFURLGetTypeID()) || (v13 = CFRetain(v11)) == 0)
        v13 = FigFairPlayCopyDefaultKeybagFolderURL();
      v6 = FigFairPlaySharedContextCopyForKeybagURLAndClient(a1, v13, 0, &cf);
      if (!(_DWORD)v6)
      {
        *v8 = cf;
        cf = 0;
      }
      if (v13)
        CFRelease(v13);
      if (cf)
        CFRelease(cf);
      if (!(_DWORD)v6)
        *a3 = 0;
    }
    else
    {
      return 4294955145;
    }
  }
  return v6;
}

BOOL FigFairPlayCPEProtectorCloudEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigFairPlayCPEProtectorCloudInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void (*v6)(CFTypeRef, uint64_t);
  void *v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v3 = DerivedStorage;
    v4 = *(const void **)(DerivedStorage + 8);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 8) = 0;
    }
    v5 = *(CFTypeRef *)v3;
    if (*(_QWORD *)v3)
    {
      v6 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
      if (v6)
        v6(v5, a1);
      if (*(_QWORD *)v3)
      {
        CFRelease(*(CFTypeRef *)v3);
        *(_QWORD *)v3 = 0;
      }
    }
    v7 = *(void **)(v3 + 16);
    if (v7)
    {
      FigFairPlayAirPlaySessionDestroy(v7);
      *(_QWORD *)(v3 + 16) = 0;
    }
  }
  return 0;
}

__CFString *FigFairPlayCPEProtectorCloudCopyDebugDescription()
{
  _QWORD *DerivedStorage;
  __CFString *Mutable;
  __CFString *v2;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v2 = Mutable;
  if (DerivedStorage && Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("<FigFPCCPEProtector: sharedContext<%@>"), *DerivedStorage);
  return v2;
}

uint64_t FigFairPlayCPEProtectorCloudCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *DerivedStorage;
  uint64_t result;
  CFTypeRef v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const void *, uint64_t, _QWORD *);

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  result = 4294955146;
  if (a2 && a4)
  {
    if (CFEqual(a2, CFSTR("IsAirPlayPossible")))
    {
      if (*MEMORY[0x1E0C9AE50])
        v9 = CFRetain((CFTypeRef)*MEMORY[0x1E0C9AE50]);
      else
        v9 = 0;
      result = 0;
      *a4 = v9;
    }
    else
    {
      v10 = *DerivedStorage;
      v11 = *(uint64_t (**)(uint64_t, const void *, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                               + 48);
      if (v11)
        return v11(v10, a2, a3, a4);
      else
        return 4294954514;
    }
  }
  return result;
}

uint64_t FigFairPlayCPEProtectorCloudSetProperty(uint64_t a1, uint64_t a2)
{
  if (a2)
    return 4294955144;
  else
    return 4294955146;
}

CFIndex FigFairPlayCPEProtectorCloudIsApplicationAuthorizedWithEntitlement(uint64_t a1, __SecTask *a2, int a3, int *a4)
{
  uint64_t DerivedStorage;
  CFIndex Code;
  CFTypeRef v9;
  int v10;
  CFTypeID v11;
  CFErrorRef error;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  Code = 4294955146;
  if (!a4 || !DerivedStorage)
    return Code;
  if (!a2)
    goto LABEL_12;
  error = 0;
  v9 = SecTaskCopyValueForEntitlement(a2, CFSTR("com.apple.coremedia.allow-protected-content-playback"), &error);
  if (!error)
  {
    if (v9)
    {
      v11 = CFGetTypeID(v9);
      if (v11 == CFBooleanGetTypeID())
      {
        Code = 0;
        if (CFBooleanGetValue((CFBooleanRef)v9))
          v10 = a3 & 3;
        else
          v10 = 0;
      }
      else
      {
        v10 = 0;
        Code = 0;
      }
      goto LABEL_14;
    }
LABEL_12:
    v10 = 0;
LABEL_18:
    Code = 0;
    *a4 = v10 & a3;
    return Code;
  }
  Code = CFErrorGetCode(error);
  v10 = 0;
  if (v9)
LABEL_14:
    CFRelease(v9);
  if (error)
    CFRelease(error);
  if (!(_DWORD)Code)
    goto LABEL_18;
  return Code;
}

uint64_t FigFairPlayCPEProtectorCloudBeginAirPlaySessionAsync(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *DerivedStorage;
  _QWORD *v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, __CFString *, _QWORD, CFNumberRef *);
  FigCPEFPAirPlaySession *v11;
  uint64_t v12;
  unsigned int valuePtr;
  CFNumberRef number;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2])
  {
    v12 = 4294955138;
    goto LABEL_8;
  }
  v8 = DerivedStorage;
  number = 0;
  valuePtr = 0;
  v9 = *DerivedStorage;
  v10 = *(unsigned int (**)(uint64_t, __CFString *, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 48);
  if (v10)
  {
    if (!v10(v9, CFSTR("3721370B-B25B-4EED-A8C8-F27CAA873C75"), *MEMORY[0x1E0C9AE00], &number))
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (number)
        CFRelease(number);
    }
  }
  v11 = FigFairPlayAirPlaySessionCreateWithContentInfo(valuePtr, v8[1], a2);
  v8[2] = v11;
  if (!v11)
  {
    v12 = 4294955145;
    goto LABEL_8;
  }
  v12 = FigFairPlayAirPlaySessionBeginAsync(v11, a3, a4);
  if ((_DWORD)v12)
LABEL_8:
    FigFairPlayCPEProtectorCloudEndAirPlaySession();
  return v12;
}

uint64_t FigFairPlayCPEProtectorCloudEndAirPlaySession()
{
  uint64_t DerivedStorage;
  uint64_t v1;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return 4294955146;
  v1 = DerivedStorage;
  result = *(_QWORD *)(DerivedStorage + 16);
  if (result)
  {
    FigFairPlayAirPlaySessionDestroy((void *)result);
    result = 0;
    *(_QWORD *)(v1 + 16) = 0;
  }
  return result;
}

uint64_t RegisterFigFairPlayCPEProtectorCloudType()
{
  FigCPEProtectorGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigFairPlayCPEProtectorCloudCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigFPCCPEProtector]"));
}

uint64_t FigTTMLProfileCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t DerivedStorage;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v11;
  uint64_t v12;

  if (a4)
  {
    FigTTMLNodeGetClassID();
    v8 = CMDerivedObjectCreate();
    if (!(_DWORD)v8)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (__int128 *)a3);
      if (!(_DWORD)v8)
      {
        v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!(_DWORD)v8)
        {
          Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            v11 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
            *(_QWORD *)(DerivedStorage + 144) = v11;
            if (v11)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              v12 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLProfileConsumeChildNode, (uint64_t *)a3);
              if (!(_DWORD)v12)
                *a4 = 0;
              return v12;
            }
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t figTTMLProfileConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  const __CFAllocator *v9;
  __CFArray *v10;
  const __CFAllocator *v11;
  uint64_t v12;
  CFTypeRef cf;
  CFTypeRef v15;
  void *value;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v15 = 0;
  value = 0;
  cf = 0;
  v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    v12 = FigSignalErrorAt();
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1)
    goto LABEL_13;
  v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v15, (CFStringRef *)&cf);
  if ((_DWORD)v8)
    goto LABEL_23;
  if (FigCFEqual() && FigCFEqual())
  {
    v9 = CFGetAllocator(*a2);
    v8 = FigTTMLFeaturesCreate(v9, a1, (uint64_t)a2, &value);
    if (!(_DWORD)v8)
    {
      v10 = *(__CFArray **)(DerivedStorage + 136);
LABEL_12:
      CFArrayAppendValue(v10, value);
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  if (!FigCFEqual() || !FigCFEqual())
  {
LABEL_13:
    v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!(_DWORD)v8)
    {
LABEL_14:
      v12 = 0;
      if (a3)
      {
        *a3 = value;
        value = 0;
      }
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  v11 = CFGetAllocator(*a2);
  v8 = FigTTMLExtensionsCreate(v11, a1, (uint64_t)a2, &value);
  if (!(_DWORD)v8)
  {
    v10 = *(__CFArray **)(DerivedStorage + 144);
    goto LABEL_12;
  }
LABEL_23:
  v12 = v8;
LABEL_16:
  if (cf)
    CFRelease(cf);
LABEL_18:
  if (v15)
    CFRelease(v15);
  if (value)
    CFRelease(value);
  return v12;
}

void figTTMLProfile_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;
  const void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  v2 = *(const void **)(DerivedStorage + 144);
  if (v2)
    CFRelease(v2);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLProfile_CopyDebugDesc()
{
  const void *v0;
  CFStringRef v1;

  CMBaseObjectGetDerivedStorage();
  v0 = (const void *)FigCFCopyCompactDescription();
  v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("profile: %@"), v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

uint64_t figTTMLProfile_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  const __CFAllocator *v3;
  __CFArray *Mutable;
  uint64_t DerivedStorage;
  uint64_t v6;
  const __CFArray *v7;
  CFRange v8;
  const __CFArray *v9;
  CFRange v10;
  uint64_t v11;

  v3 = CFGetAllocator(a1);
  Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    v6 = DerivedStorage;
    v7 = *(const __CFArray **)(DerivedStorage + 136);
    if (v7)
      v8.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136));
    else
      v8.length = 0;
    v8.location = 0;
    CFArrayAppendArray(Mutable, v7, v8);
    v9 = *(const __CFArray **)(v6 + 144);
    if (v9)
      v10.length = CFArrayGetCount(v9);
    else
      v10.length = 0;
    v10.location = 0;
    CFArrayAppendArray(Mutable, v9, v10);
    v11 = 0;
    *a2 = Mutable;
  }
  else
  {
    v11 = FigSignalErrorAt();
    if (Mutable)
      CFRelease(Mutable);
  }
  return v11;
}

uint64_t figTTMLProfile_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 15;
  return 0;
}

uint64_t FigManifoldCreateForMovieFragmentStream(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, CFTypeRef *a7)
{
  uint64_t v13;
  uint64_t DerivedStorage;
  uint64_t v15;
  const __CFDictionary *v16;
  const __CFDictionary *v17;
  CMMemoryPoolRef v18;
  uint64_t Empty;
  uint64_t v20;
  void *values;
  CFTypeRef cf;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  values = CFSTR("MovieFragmentManifoldMemoryPool");
  cf = 0;
  if (a2)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    v24 = 0;
    if (!FigAtomStreamInitWithBBuf())
      FigAtomStreamGetCurrentAtomTypeAndDataLength();
    v17 = 0;
    v20 = 4294951252;
    goto LABEL_18;
  }
  FigManifoldGetClassID();
  v13 = CMDerivedObjectCreate();
  if ((_DWORD)v13)
  {
LABEL_17:
    v20 = v13;
    v17 = 0;
    goto LABEL_18;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_QWORD *)(DerivedStorage + 8) = cf;
  *(_QWORD *)(DerivedStorage + 40) = a3;
  *(_QWORD *)(DerivedStorage + 48) = a5;
  *(_QWORD *)(DerivedStorage + 56) = a4;
  *(_BYTE *)(DerivedStorage + 64) = a6 & 1;
  *(_BYTE *)(DerivedStorage + 288) = 0;
  v15 = FigReentrantMutexCreate();
  *(_QWORD *)(DerivedStorage + 24) = v15;
  if (!v15)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_17;
  }
  v16 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA4BA0], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = v16;
  if (!v16 || (v18 = CMMemoryPoolCreate(v16), (*(_QWORD *)(DerivedStorage + 16) = v18) == 0))
  {
    Empty = FigSignalErrorAt();
    goto LABEL_15;
  }
  Empty = CMBlockBufferCreateEmpty(a1, 8u, 0, (CMBlockBufferRef *)(DerivedStorage + 80));
  if ((_DWORD)Empty)
  {
LABEL_15:
    v20 = Empty;
    goto LABEL_18;
  }
  v20 = MovieInformationCreate((uint64_t)a1, 4, (uint64_t *)(DerivedStorage + 144));
  if (!(_DWORD)v20)
  {
    *a7 = cf;
    cf = 0;
LABEL_11:
    CFRelease(v17);
    return v20;
  }
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (v17)
    goto LABEL_11;
  return v20;
}

void MovieFragmentManifoldInvalidate(const void *a1)
{
  CFRetain(a1);
  fragManifold_InvalidateGuts((uint64_t)a1);
}

uint64_t sub_193035880(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  const void *v12;

  CFRelease(v12);
  return 0;
}

void MovieFragmentManifoldFinalize(uint64_t a1)
{
  CMBaseObjectGetDerivedStorage();
  fragManifold_InvalidateGuts(a1);
}

uint64_t sub_1930358B8()
{
  return FigSimpleMutexDestroy();
}

__CFString *MovieFragmentManifoldCopyDebugDescription()
{
  __CFString *Mutable;
  __CFString *v1;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v1 = Mutable;
  if (Mutable)
    CFStringAppendFormat(Mutable, 0, CFSTR("FigMovieFragmentManifold :"));
  return v1;
}

uint64_t MovieFragmentManifoldCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  CFNumberRef v8;
  __CFDictionary *Mutable;
  uint64_t v10;
  const void *v11;
  const void **v12;
  const __CFAllocator *v13;
  uint64_t v14;
  uint64_t CMBaseObject;
  uint64_t (*v16)(uint64_t, _QWORD, CFNumberRef);
  uint64_t v17;
  int v18;
  _QWORD *v20;
  CMBlockBufferRef v21;
  CFTypeRef cf;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = 0;
    Mutable = 0;
    v10 = 4294954511;
    goto LABEL_31;
  }
  if (!CFEqual(a2, CFSTR("FMFD_Asset")))
  {
    if (CFEqual(a2, CFSTR("FMFD_UnconsumedData")))
    {
      v21 = 0;
      v10 = CMBlockBufferCreateWithBufferReference(a3, *(CMBlockBufferRef *)(DerivedStorage + 80), 0, *(_QWORD *)(DerivedStorage + 88), 0, &v21);
      if (!(_DWORD)v10)
        *a4 = v21;
      v8 = 0;
      Mutable = 0;
      goto LABEL_31;
    }
    if (!CFEqual(a2, CFSTR("FMFD_ParserState")))
    {
      if (!CFEqual(a2, CFSTR("FMFD_Type")))
      {
        if (CFEqual(a2, CFSTR("FMFD_IsCollectingMetaData")))
        {
          v10 = 0;
          v8 = 0;
          Mutable = 0;
          if (*(_QWORD *)(DerivedStorage + 304))
            v20 = (_QWORD *)MEMORY[0x1E0C9AE50];
          else
            v20 = (_QWORD *)MEMORY[0x1E0C9AE40];
          *a4 = *v20;
        }
        else
        {
          v8 = 0;
          Mutable = 0;
          v10 = 4294954512;
        }
        goto LABEL_31;
      }
      v11 = CFStringCreateWithCString(a3, "FMP4", 0x8000100u);
LABEL_29:
      v10 = 0;
      v8 = 0;
      Mutable = 0;
      goto LABEL_30;
    }
    LODWORD(v21) = 0;
    if (*(_BYTE *)(DerivedStorage + 138) || *(_DWORD *)(DerivedStorage + 112) == 2)
    {
      v18 = 2;
    }
    else
    {
      if (!*(_BYTE *)(DerivedStorage + 136) && !*(_BYTE *)(DerivedStorage + 137))
        goto LABEL_24;
      v18 = 1;
    }
    LODWORD(v21) = v18;
LABEL_24:
    v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v21);
    goto LABEL_29;
  }
  v12 = (const void **)(DerivedStorage + 104);
  v11 = *(const void **)(DerivedStorage + 104);
  if (v11)
  {
    Mutable = 0;
    v8 = 0;
LABEL_6:
    v11 = CFRetain(v11);
LABEL_7:
    v10 = 0;
LABEL_30:
    *a4 = v11;
    goto LABEL_31;
  }
  if (!*(_QWORD *)(DerivedStorage + 96))
  {
    Mutable = 0;
    v8 = 0;
    v11 = 0;
    v10 = 4294954513;
    goto LABEL_30;
  }
  LODWORD(v21) = 1450143565;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionarySetValue(Mutable, CFSTR("assetOption_RequiresInProcessOperation"), (const void *)*MEMORY[0x1E0C9AE50]);
  v14 = CMByteStreamCreateForBlockBuffer();
  if ((_DWORD)v14)
  {
    v10 = v14;
    v8 = 0;
  }
  else
  {
    v8 = CFNumberCreate(v13, kCFNumberSInt32Type, &v21);
    CMBaseObject = CMByteStreamGetCMBaseObject();
    v16 = *(uint64_t (**)(uint64_t, _QWORD, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
    if (!v16)
    {
      v10 = 4294954514;
      goto LABEL_31;
    }
    v17 = v16(CMBaseObject, *MEMORY[0x1E0CA2F60], v8);
    if (!(_DWORD)v17)
    {
      v17 = FigAssetCreateWithByteStream((uint64_t)a3, cf, 1, Mutable, (_QWORD *)(DerivedStorage + 104));
      if (!(_DWORD)v17)
      {
        v11 = *v12;
        if (!*v12)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    v10 = v17;
  }
LABEL_31:
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  if (v8)
    CFRelease(v8);
  if (cf)
    CFRelease(cf);
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

uint64_t MovieFragmentManifoldSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  Boolean Value;
  uint64_t v8;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(_BYTE *)DerivedStorage)
  {
    v8 = FigSignalErrorAt();
  }
  else if (CFEqual(a2, CFSTR("FMFD_ProhibitPrimingTrim")))
  {
    if (a3 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      Value = CFBooleanGetValue(a3);
      v8 = 0;
      *(_BYTE *)(DerivedStorage + 288) = Value;
    }
    else
    {
      v8 = 4294951256;
    }
  }
  else
  {
    v8 = 4294954512;
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  return v8;
}

void fragManifold_InvalidateGuts(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (!*(_BYTE *)DerivedStorage)
  {
    *(_BYTE *)DerivedStorage = 1;
    fragManifold_EndAllTracks(a1, 4294954511);
    fragManifold_DisposeTracks((uint64_t *)DerivedStorage);
    v3 = *(const void **)(DerivedStorage + 144);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(DerivedStorage + 144) = 0;
    }
    v4 = *(const void **)(DerivedStorage + 80);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(DerivedStorage + 96);
    if (v5)
      CFRelease(v5);
    v6 = *(const void **)(DerivedStorage + 104);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(DerivedStorage + 248);
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(DerivedStorage + 248) = 0;
    }
    v8 = *(const void **)(DerivedStorage + 256);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(DerivedStorage + 256) = 0;
    }
    free(*(void **)(DerivedStorage + 224));
    free(*(void **)(DerivedStorage + 232));
    v9 = *(const void **)(DerivedStorage + 296);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(DerivedStorage + 296) = 0;
    }
    v10 = *(const void **)(DerivedStorage + 304);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(DerivedStorage + 304) = 0;
    }
    v11 = *(const void **)(DerivedStorage + 16);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(DerivedStorage + 16) = 0;
    }
  }
  --*(_DWORD *)(DerivedStorage + 32);
  JUMPOUT(0x19402EA24);
}

uint64_t fragManifold_EndAllTracks(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  unsigned int *v7;
  unsigned int *v8;

  result = CMBaseObjectGetDerivedStorage();
  v4 = (uint64_t *)result;
  if (*(_QWORD *)(result + 160))
  {
    result = MovieInformationGetTrackCount(*(_QWORD *)(result + 144));
    if (result >= 1)
    {
      v5 = 0;
      for (i = 0; i < result; ++i)
      {
        fragManifold_EndTrack((uint64_t)v4, (unsigned int *)(v4[20] + v5), a2);
        result = MovieInformationGetTrackCount(v4[18]);
        v5 += 256;
      }
    }
  }
  v7 = (unsigned int *)v4[34];
  if (v7)
    result = fragManifold_EndTrack((uint64_t)v4, v7, a2);
  v8 = (unsigned int *)v4[35];
  if (v8)
    return fragManifold_EndTrack((uint64_t)v4, v8, a2);
  return result;
}

void fragManifold_DisposeTracks(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;
  CFTypeRef *v12;
  CFTypeRef *v13;
  void *v14;

  if (a1[20])
  {
    fragManifold_UnprepareTracksForSampleEmission((uint64_t)a1);
    if (MovieInformationGetTrackCount(a1[18]) >= 1)
    {
      v2 = 0;
      v3 = 144;
      do
      {
        v4 = a1[20];
        v5 = *(const void **)(v4 + v3 - 88);
        if (v5)
        {
          CFRelease(v5);
          v4 = a1[20];
          *(_QWORD *)(v4 + v3 - 88) = 0;
        }
        v6 = *(const void **)(v4 + v3 - 80);
        if (v6)
        {
          CFRelease(v6);
          v4 = a1[20];
          *(_QWORD *)(v4 + v3 - 80) = 0;
        }
        v7 = *(const void **)(v4 + v3 - 72);
        if (v7)
        {
          CFRelease(v7);
          *(_QWORD *)(a1[20] + v3 - 72) = 0;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        v8 = a1[20];
        v9 = *(const void **)(v8 + v3);
        if (v9)
        {
          CFRelease(v9);
          v8 = a1[20];
          *(_QWORD *)(v8 + v3) = 0;
        }
        v10 = *(const void **)(v8 + v3 + 8);
        if (v10)
        {
          CFRelease(v10);
          v8 = a1[20];
          *(_QWORD *)(v8 + v3 + 8) = 0;
        }
        v11 = *(const void **)(v8 + v3 - 104);
        if (v11)
        {
          CFRelease(v11);
          *(_QWORD *)(a1[20] + v3 - 104) = 0;
        }
        ++v2;
        v3 += 256;
      }
      while (v2 < MovieInformationGetTrackCount(a1[18]));
    }
    v12 = (CFTypeRef *)a1[34];
    if (v12)
    {
      if (v12[8])
      {
        CFRelease(v12[8]);
        v12 = (CFTypeRef *)a1[34];
        v12[8] = 0;
      }
      a1[34] = 0;
      free(v12);
    }
    v13 = (CFTypeRef *)a1[35];
    if (v13)
    {
      if (v13[8])
      {
        CFRelease(v13[8]);
        v13 = (CFTypeRef *)a1[35];
        v13[8] = 0;
      }
      a1[35] = 0;
      free(v13);
    }
    v14 = (void *)a1[20];
    if (v14)
    {
      a1[20] = 0;
      free(v14);
    }
  }
}

uint64_t fragManifold_EndTrack(uint64_t result, unsigned int *a2, uint64_t a3)
{
  void (*v3)(_QWORD, _QWORD, _QWORD, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = (void (*)(_QWORD, _QWORD, _QWORD, uint64_t))*((_QWORD *)a2 + 3);
  if (v3)
  {
    v6 = result;
    *((_QWORD *)a2 + 3) = 0;
    v7 = *(int *)(result + 32);
    *(_DWORD *)(result + 32) = 0;
    if ((int)v7 >= 1)
    {
      v8 = v7;
      do
      {
        MEMORY[0x19402EA24](*(_QWORD *)(v6 + 24));
        --v8;
      }
      while (v8);
    }
    v3(*(_QWORD *)(v6 + 8), *a2, *((_QWORD *)a2 + 4), a3);
    do
    {
      result = MEMORY[0x19402EA0C](*(_QWORD *)(v6 + 24));
      v9 = *(_DWORD *)(v6 + 32) + 1;
      *(_DWORD *)(v6 + 32) = v9;
    }
    while (v9 < (int)v7);
  }
  return result;
}

uint64_t fragManifold_UnprepareTracksForSampleEmission(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(result + 160))
  {
    v1 = (uint64_t *)result;
    result = MovieInformationGetTrackCount(*(_QWORD *)(result + 144));
    if (result >= 1)
    {
      v2 = 0;
      for (i = 0; i < result; ++i)
      {
        v4 = v1[20];
        v5 = *(_QWORD *)(v4 + v2 + 40);
        if (v5)
        {
          MovieTrackDisposeFragments(v5);
          v4 = v1[20];
        }
        MovieSampleAccessorDispose(*(const void ***)(v4 + v2 + 168));
        *(_QWORD *)(v1[20] + v2 + 168) = 0;
        result = MovieInformationGetTrackCount(v1[18]);
        v2 += 256;
      }
    }
    *(_DWORD *)(v1[18] + 184) = 0;
    v1[22] = 0;
    v1[23] = 0;
  }
  return result;
}

void fragManifold_TrackMetadataExtendedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  const __CFDictionary *Value;
  const void **v10;
  const __CFArray *v11;
  const void *ConcatenationOfTwoArrays;
  const void *v13;
  const void *v14;
  uint64_t v15;
  int v16;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v16 = 0;
  v15 = 0;
  if (a4)
  {
    if (a5)
    {
      v8 = DerivedStorage;
      if (!MovieTrackGetBasicInfo(a4, 0, &v16)
        && !fragManifold_ObtainTrackByID((uint64_t *)v8, v16, &v15))
      {
        if (v15)
        {
          Value = (const __CFDictionary *)CFDictionaryGetValue(a5, CFSTR("Metadata"));
          if (Value)
          {
            v10 = (const void **)&kFigMetadataFormat_QuickTimeUserData;
            if (*(_BYTE *)(v8 + 153))
              v10 = (const void **)&kFigMetadataFormat_ISOUserData;
            v11 = (const __CFArray *)CFDictionaryGetValue(Value, *v10);
            if (v11 && CFArrayGetCount(v11) >= 1)
            {
              ConcatenationOfTwoArrays = (const void *)FigCFArrayCreateConcatenationOfTwoArrays();
              v13 = ConcatenationOfTwoArrays;
              v14 = *(const void **)(v15 + 144);
              *(_QWORD *)(v15 + 144) = ConcatenationOfTwoArrays;
              if (ConcatenationOfTwoArrays)
                CFRetain(ConcatenationOfTwoArrays);
              if (v14)
                CFRelease(v14);
              if (v13)
                CFRelease(v13);
            }
          }
        }
      }
    }
  }
}

uint64_t fragManifold_ObtainTrackByID(uint64_t *a1, int a2, _QWORD *a3)
{
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (_DWORD *)a1[34];
  if (v6 && *v6 == a2 || (v6 = (_DWORD *)a1[35]) != 0 && *v6 == a2)
  {
LABEL_11:
    if (!a3)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (MovieInformationGetTrackCount(a1[18]) < 1)
  {
LABEL_10:
    v6 = 0;
    goto LABEL_11;
  }
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = a1[20];
    if (v9)
    {
      if (*(_DWORD *)(v9 + v7) == a2)
        break;
    }
    ++v8;
    v7 += 256;
    if (MovieInformationGetTrackCount(a1[18]) <= v8)
      goto LABEL_10;
  }
  v6 = (_DWORD *)(v9 + v7);
  if (a3)
LABEL_12:
    *a3 = v6;
LABEL_13:
  if (v6)
    return 0;
  else
    return 4294951254;
}

uint64_t MovieFragmentManifoldInjectData(const void *a1, uint64_t a2, char a3, void *a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  const void *v12;
  const void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v21;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4)
  {
    v8 = DerivedStorage;
    CFRetain(a1);
    CFRetain(a4);
    MEMORY[0x19402EA0C](*(_QWORD *)(v8 + 24));
    ++*(_DWORD *)(v8 + 32);
    if (*(_BYTE *)v8 || *(_BYTE *)(v8 + 1))
    {
      v9 = FigSignalErrorAt();
      goto LABEL_41;
    }
    *(_WORD *)(v8 + 1) = 1;
    if ((a3 & 1) != 0)
    {
      v9 = ConsumeBufferedBytes((CMBlockBufferRef *)v8, *(OpaqueCMBlockBuffer **)(v8 + 88));
      if ((_DWORD)v9)
        goto LABEL_41;
      *(_QWORD *)(v8 + 72) = 0;
      fragManifold_UnprepareTracksForSampleEmission(v8);
      *(_DWORD *)(v8 + 112) = 0;
      *(_BYTE *)(v8 + 138) = 0;
    }
    v10 = CMGetAttachment(a4, CFSTR("FMFD_BufferDecryptor"), 0);
    v11 = CMGetAttachment(a4, CFSTR("FMFD_BufferAudioDecryptor"), 0);
    if (!FigCFEqual() || !FigCFEqual())
    {
      v12 = *(const void **)(v8 + 248);
      *(_QWORD *)(v8 + 248) = v10;
      if (v10)
        CFRetain(v10);
      if (v12)
        CFRelease(v12);
      v13 = *(const void **)(v8 + 256);
      *(_QWORD *)(v8 + 256) = v11;
      if (v11)
        CFRetain(v11);
      if (v13)
        CFRelease(v13);
      v14 = *(unsigned __int8 *)(v8 + 264);
      *(_BYTE *)(v8 + 264) = 0;
      if (*(_QWORD *)(v8 + 248))
      {
        FigBasicAESCPECryptorGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          *(_BYTE *)(v8 + 264) = 1;
          if (MovieInformationGetTrackCount(*(_QWORD *)(v8 + 144)) >= 1)
          {
            v15 = 0;
            v16 = 0;
            do
            {
              v9 = fragManifold_SetTrackLatestFormatDescription(v8, *(_QWORD *)(v8 + 160) + v15, *(CMFormatDescriptionRef *)(*(_QWORD *)(v8 + 160) + v15 + 64));
              if ((_DWORD)v9)
                goto LABEL_41;
              v9 = fragManifold_CallFormatDescriptionCallback(v8, (unsigned int *)(*(_QWORD *)(v8 + 160) + v15));
              if ((_DWORD)v9)
                goto LABEL_41;
              ++v16;
              v15 += 256;
            }
            while (v16 < MovieInformationGetTrackCount(*(_QWORD *)(v8 + 144)));
          }
        }
        else if (*(_QWORD *)(v8 + 160) && MovieInformationGetTrackCount(*(_QWORD *)(v8 + 144)) >= 1)
        {
          v17 = 0;
          v18 = 0;
          do
          {
            v19 = *(_QWORD *)(v8 + 160) + v17;
            *(_BYTE *)(v19 + 82) = 1;
            if (v14)
            {
              v9 = fragManifold_SetTrackLatestFormatDescription(v8, v19, *(CMFormatDescriptionRef *)(v19 + 56));
              if ((_DWORD)v9)
                goto LABEL_41;
            }
            ++v18;
            v17 += 256;
          }
          while (v18 < MovieInformationGetTrackCount(*(_QWORD *)(v8 + 144)));
        }
      }
    }
    if (!CMBlockBufferGetDataLength((CMBlockBufferRef)a4))
    {
LABEL_37:
      v21 = 0;
LABEL_38:
      *(_BYTE *)(v8 + 1) = 0;
      --*(_DWORD *)(v8 + 32);
      MEMORY[0x19402EA24](*(_QWORD *)(v8 + 24));
      CFRelease(a4);
      CFRelease(a1);
      return v21;
    }
    v9 = fragManifold_PushBytes(v8, (OpaqueCMBlockBuffer *)a4);
    if (!(_DWORD)v9)
    {
      if ((a3 & 2) != 0 && (*(_QWORD *)(v8 + 88) || *(_QWORD *)(v8 + 176)))
      {
        os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      goto LABEL_37;
    }
LABEL_41:
    v21 = v9;
    goto LABEL_38;
  }
  return FigSignalErrorAt();
}

uint64_t MovieFragmentManifoldNoteStreamEnd(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(_BYTE *)DerivedStorage)
  {
    v5 = FigSignalErrorAt();
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 2) = 1;
    fragManifold_EndAllTracks((uint64_t)a1, a2);
    v5 = 0;
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  CFRelease(a1);
  return v5;
}

uint64_t MovieFragmentManifoldCopyCurrentFormatDescriptionForTrack(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = DerivedStorage;
  v9 = 0;
  if (a3)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
    ++*(_DWORD *)(v6 + 32);
    if (*(_BYTE *)v6)
    {
      v7 = 4294954511;
    }
    else
    {
      v7 = fragManifold_ObtainTrackByID((uint64_t *)v6, a2, &v9);
      if (!(_DWORD)v7)
        *a3 = FigFormatDescriptionRetain();
    }
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  --*(_DWORD *)(v6 + 32);
  MEMORY[0x19402EA24](*(_QWORD *)(v6 + 24));
  return v7;
}

uint64_t MovieFragmentManifoldInstallCallbacksForTrack(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t DerivedStorage;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v14;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (a3 && *(_BYTE *)DerivedStorage)
  {
    v12 = 4294954511;
  }
  else
  {
    v8 = fragManifold_ObtainTrackByID((uint64_t *)DerivedStorage, a2, &v14);
    if ((_DWORD)v8)
    {
      v12 = v8;
    }
    else
    {
      v9 = v14;
      v10 = v14 + 8;
      if (a3)
      {
        v11 = *a3;
        *(_QWORD *)(v14 + 24) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v10 = v11;
      }
      else
      {
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
      }
      v12 = 0;
      *(_QWORD *)(v9 + 32) = a4;
    }
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  return v12;
}

uint64_t MovieFragmentManifoldFlush()
{
  return 0;
}

uint64_t MovieFragmentManifoldCopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, _QWORD *a5)
{
  uint64_t DerivedStorage;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int HasAudioDependencyInformation;
  CFTypeRef *v14;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v19 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(_BYTE *)DerivedStorage)
  {
    v12 = 4294954511;
    goto LABEL_24;
  }
  if (!*(_QWORD *)(DerivedStorage + 144))
  {
    v12 = 4294954513;
    goto LABEL_24;
  }
  v10 = fragManifold_ObtainTrackByID((uint64_t *)DerivedStorage, a2, &v19);
  if ((_DWORD)v10)
  {
    v12 = v10;
    goto LABEL_24;
  }
  if (*(_QWORD *)(v19 + 40))
  {
    if (CFEqual(a3, CFSTR("FMFD_TrackAudioPrimingDuration")))
    {
      if (*(_DWORD *)(v19 + 48) == 1936684398)
      {
        v16 = *(_OWORD *)(v19 + 120);
        *(_QWORD *)&v17 = *(_QWORD *)(v19 + 136);
        v11 = CMTimeCopyAsDictionary((CMTime *)&v16, a4);
LABEL_20:
        v12 = 0;
        *a5 = v11;
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    if (CFEqual(a3, CFSTR("FMFD_TrackHasAudioDependencyInformation")))
    {
      HasAudioDependencyInformation = MovieTrackHasAudioDependencyInformation(*(_QWORD *)(v19 + 40));
    }
    else if (CFEqual(a3, CFSTR("FMFD_TrackHasSeamSamples")))
    {
      HasAudioDependencyInformation = MovieTrackHasSeamSamples(*(_QWORD *)(v19 + 40));
    }
    else if (CFEqual(a3, CFSTR("FMFD_TrackHasSampleEncryptionBox")))
    {
      HasAudioDependencyInformation = MovieTrackIsSampleEncryptionAtomPresent(*(_QWORD *)(v19 + 40));
    }
    else
    {
      if (!CFEqual(a3, CFSTR("FMFD_TrackHasSampleAuxInfoBoxes")))
      {
        if (CFEqual(a3, CFSTR("FMFD_TrackMatrixArray")))
        {
          v18 = 0;
          v16 = 0u;
          v17 = 0u;
          MovieTrackGetSpatialInformation(*(_QWORD *)(v19 + 40), 0, 0, (uint64_t)&v16);
          v11 = FigMatrixToCFArray(a4, (uint64_t)&v16);
          goto LABEL_20;
        }
LABEL_23:
        v12 = 4294954512;
        goto LABEL_24;
      }
      HasAudioDependencyInformation = MovieTrackBothSampleAuxInfoAtomsPresent(*(_QWORD *)(v19 + 40));
    }
    v14 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
    if (!HasAudioDependencyInformation)
      v14 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
    v11 = (void *)CFRetain(*v14);
    goto LABEL_20;
  }
  v12 = 4294954509;
LABEL_24:
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  return v12;
}

uint64_t MovieFragmentReannounceUnregisteredTracks(const void *a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRetain(a1);
  MEMORY[0x19402EA0C](*(_QWORD *)(DerivedStorage + 24));
  ++*(_DWORD *)(DerivedStorage + 32);
  if (*(_BYTE *)DerivedStorage)
  {
    v7 = 4294954511;
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 2) = 0;
    if (MovieInformationGetTrackCount(*(_QWORD *)(DerivedStorage + 144)) < 1)
    {
LABEL_9:
      v7 = 0;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      while (1)
      {
        v5 = *(_QWORD *)(DerivedStorage + 160) + v3;
        if (!*(_QWORD *)(v5 + 8) && !*(_QWORD *)(v5 + 16))
        {
          v6 = fragManifold_CallNewTrackCallback(DerivedStorage, (unsigned int *)(*(_QWORD *)(DerivedStorage + 160) + v3));
          if ((_DWORD)v6)
            break;
          v6 = fragManifold_CallFormatDescriptionCallback(DerivedStorage, (unsigned int *)v5);
          if ((_DWORD)v6)
            break;
        }
        ++v4;
        v3 += 256;
        if (MovieInformationGetTrackCount(*(_QWORD *)(DerivedStorage + 144)) <= v4)
          goto LABEL_9;
      }
      v7 = v6;
    }
  }
  --*(_DWORD *)(DerivedStorage + 32);
  MEMORY[0x19402EA24](*(_QWORD *)(DerivedStorage + 24));
  CFRelease(a1);
  return v7;
}

uint64_t fragManifold_PushBytes(uint64_t a1, OpaqueCMBlockBuffer *a2)
{
  uint64_t v2;
  uint64_t appended;
  size_t DataLength;
  const __CFAllocator **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;
  void **v11;
  void **v12;
  const void **v13;
  const void **v14;
  const __CFString **v15;
  const void **v16;
  void **v17;
  void **v18;
  void **v19;
  const __CFString **v20;
  void **v21;
  const __CFAllocator *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  int value_low;
  CFTypeRef v30;
  uint64_t SampleDependencyAttributeDictionary;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  CMTime *v45;
  CMTime *v46;
  uint64_t v47;
  CMTimeEpoch epoch;
  uint64_t v49;
  uint64_t FormatDescription;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t SampleLocation;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t SampleDuration;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  const void *v72;
  int v73;
  uint64_t ContiguousBlockBuffer;
  size_t v75;
  size_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t, const __CFAllocator *, __int128 *);
  uint64_t v88;
  const void *v89;
  CMTimeValue v90;
  uint64_t (*v91)(uint64_t, uint64_t, CMTimeValue);
  uint64_t v92;
  CMTimeValue v93;
  uint64_t (*v94)(uint64_t, uint64_t, CMTimeValue);
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  CMTimeValue v99;
  CMTimeValue v100;
  _QWORD *v101;
  uint64_t (*v102)(uint64_t, CMTimeValue, CMTimeValue);
  uint64_t v103;
  size_t v104;
  size_t v105;
  uint64_t v106;
  CMTimeValue v107;
  CMTimeValue v108;
  _QWORD *v109;
  uint64_t (*v110)(uint64_t, CMTimeValue, CMTimeValue);
  uint64_t Empty;
  size_t v112;
  size_t v113;
  uint64_t v114;
  const __CFAllocator *v115;
  CFTypeRef v116;
  uint64_t v117;
  CMTimeValue v118;
  CMTimeValue v119;
  _QWORD *v120;
  uint64_t (*v121)(uint64_t, CMTimeValue, CMTimeValue);
  uint64_t v122;
  uint64_t v123;
  const void *v124;
  const void *v125;
  uint64_t v126;
  uint64_t v127;
  opaqueCMSampleBuffer *v128;
  const __CFArray *v129;
  void *v130;
  void *v131;
  uint64_t v132;
  opaqueCMSampleBuffer *v133;
  CMTimeEpoch v134;
  const __CFAllocator *v135;
  CFDictionaryRef v136;
  CFDictionaryRef v137;
  uint64_t v138;
  opaqueCMSampleBuffer *v139;
  uint64_t v140;
  int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  const __CFArray *v148;
  const __CFArray *v149;
  CFIndex v150;
  CFIndex v151;
  CFIndex v152;
  void *v153;
  void *v154;
  uint64_t v155;
  opaqueCMSampleBuffer *v156;
  CMItemCount NumSamples;
  CFIndex v158;
  CFTypeRef v159;
  int v160;
  int v161;
  int v162;
  const __CFArray *v163;
  const __CFArray *v164;
  CFIndex v165;
  CFIndex j;
  __CFDictionary *v167;
  __CFDictionary *v168;
  const void *v169;
  const void *v170;
  CFNumberRef v171;
  int v172;
  CFTypeRef v173;
  uint64_t v174;
  opaqueCMSampleBuffer *v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  const __CFArray *v183;
  const __CFArray *v184;
  CFIndex v185;
  CFIndex v186;
  CFIndex k;
  __CFDictionary *v188;
  __CFDictionary *v189;
  CFTypeRef v191;
  uint64_t (*v192)(CFTypeRef, void *);
  OpaqueCMBlockBuffer *v193;
  uint64_t v194;
  const opaqueCMFormatDescription *v195;
  uint64_t v196;
  CMTimeValue v197;
  uint64_t (*v198)(CMTimeValue, void *);
  CMTimeValue v199;
  uint64_t (*v200)(CMTimeValue);
  uint64_t (*v201)(CFTypeRef, void *, __int128 *);
  uint64_t v202;
  uint64_t v203;
  signed int MediaSubType;
  int v205;
  CFIndex v206;
  const void *v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  _DWORD *v216;
  OpaqueCMBlockBuffer *v217;
  uint64_t v218;
  OpaqueCMBlockBuffer *v219;
  uint64_t v220;
  size_t v221;
  uint64_t v222;
  uint64_t EMSGInformation;
  CMTimeValue v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  BOOL v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  CMTimeValue v233;
  uint64_t TrackCount;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v241;
  _BYTE *v242;
  BOOL v243;
  int v244;
  size_t v245;
  void *v246;
  uint64_t NthTrackOfType;
  uint64_t v248;
  const __CFArray *v249;
  const __CFArray *v250;
  const void *ValueAtIndex;
  int v252;
  __CFDictionary *v253;
  const __CFDictionary *v254;
  uint64_t v255;
  _DWORD *v256;
  __int128 v257;
  __int128 v258;
  int64_t v259;
  __int128 *v260;
  uint64_t v261;
  CFMutableDictionaryRef Mutable;
  const __CFArray *SampleAttachmentsArray;
  uint64_t v264;
  const void *v265;
  uint64_t v266;
  CMTimeEpoch v267;
  uint64_t v268;
  CFTypeRef v269;
  uint64_t v270;
  uint64_t *v271;
  const __CFArray *v272;
  const __CFArray *v273;
  CFIndex Count;
  uint64_t v275;
  uint64_t v276;
  _DWORD *v277;
  CFIndex i;
  const void *v279;
  CFTypeRef v280;
  unsigned int (*v281)(CFTypeRef, const void *);
  const opaqueCMFormatDescription *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  uint64_t v293;
  const void *v294;
  uint64_t v295;
  void (*v296)(_QWORD, _QWORD);
  uint64_t v297;
  uint64_t v298;
  int v299;
  int LastMovieFragmentInformation;
  uint64_t v301;
  CFNumberRef v302;
  uint64_t v303;
  uint64_t v304;
  const __CFArray *v305;
  CFAllocatorRef v306;
  uint64_t v307;
  const __CFArray *v308;
  CFAllocatorRef v309;
  uint64_t v310;
  __CFString **v311;
  CMTimeValue v312;
  __CFString *v313;
  uint64_t (*v314)(CMTimeValue, __CFString *, CFNumberRef);
  const __CFNumber *v315;
  uint64_t v316;
  uint64_t v317;
  CFAllocatorRef v318;
  unsigned int (*v319)(CMTimeValue, __CFString *, const __CFNumber *, uint64_t, CFAllocatorRef, __int128 *, _QWORD);
  CFTypeID v320;
  uint64_t v321;
  const __CFAllocator *v322;
  const void *v323;
  const void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  const void *v329;
  void *v331;
  const void *v332;
  const void *v333;
  void *v334;
  void *v335;
  void *value;
  uint64_t v337;
  const __CFString *key;
  uint64_t v339;
  CFTypeRef cf;
  uint64_t v341;
  uint64_t v342;
  const void *v343;
  const __CFString *v344;
  void *v345;
  void *v346;
  CFTypeRef *v347;
  void *v348;
  uint64_t v349;
  CFTypeRef v350;
  _DWORD *v351;
  _OWORD *v352;
  uint64_t v353;
  int v354;
  const __CFAllocator *allocator;
  int v356;
  __int128 v357;
  int v358;
  __int128 v359;
  int v360;
  CFTypeRef *v361;
  uint64_t v362;
  CMTime v363;
  CMTime v364;
  CMTime v365;
  CMTime v366;
  CMTime sampleBufferOut;
  CMTime rhs;
  uint64_t v369;
  __int128 destination;
  _BYTE v371[32];
  __int128 v372;
  _BYTE v373[32];
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  CMTime lhs;
  CMTime time1;
  CMTime valuePtr;
  CMTime time;
  CFRange v388;

  v2 = a1;
  appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a1 + 80), a2, 0, 0, 0);
  if ((_DWORD)appended)
    return appended;
  DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v2 + 80));
  v5 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  v6 = (uint64_t *)MEMORY[0x1E0CA31C8];
  v7 = (uint64_t *)MEMORY[0x1E0CA3110];
  v8 = (uint64_t *)MEMORY[0x1E0CA3108];
  v9 = (uint64_t *)MEMORY[0x1E0CA3118];
  v10 = (void **)MEMORY[0x1E0CA2620];
  v11 = (void **)MEMORY[0x1E0C9AE50];
  v12 = (void **)MEMORY[0x1E0CA2628];
  v13 = (const void **)MEMORY[0x1E0CA2618];
  v14 = (const void **)MEMORY[0x1E0C9AE40];
  v15 = (const __CFString **)MEMORY[0x1E0CA2728];
  v16 = (const void **)MEMORY[0x1E0CA25B8];
  v17 = (void **)MEMORY[0x1E0CA25C0];
  v347 = (CFTypeRef *)(v2 + 304);
  v18 = (void **)MEMORY[0x1E0CA25B0];
  v19 = (void **)MEMORY[0x1E0CA4E28];
  v361 = (CFTypeRef *)(v2 + 296);
  v20 = (const __CFString **)MEMORY[0x1E0CA4E40];
  v21 = (void **)MEMORY[0x1E0CA2510];
  *(_QWORD *)(v2 + 88) = DataLength;
  v22 = *v5;
  v341 = *v7;
  v342 = *v8;
  value = *v11;
  v337 = *v9;
  v333 = *v13;
  v334 = *v12;
  v331 = *v10;
  v332 = *v14;
  key = *v15;
  v339 = *v6;
  v345 = *v18;
  v346 = *v19;
  v348 = *v17;
  v343 = *v16;
  v344 = *v20;
  v335 = *v21;
  v362 = v2;
  allocator = *v5;
  while (2)
  {
    switch(*(_DWORD *)(v2 + 112))
    {
      case 0:
        if (*(_QWORD *)(v2 + 88) < 8uLL)
          return 0;
        *(_QWORD *)&destination = 0;
        appended = CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 80), 0, 8uLL, &destination);
        if ((_DWORD)appended)
          return appended;
        v23 = destination;
        v24 = bswap32(DWORD1(destination));
        *(_DWORD *)(v2 + 116) = v24;
        v25 = bswap32(v23);
        *(_QWORD *)(v2 + 120) = v25;
        if (v25 <= 7)
          return FigSignalErrorAt();
        if (v24 > 1836019557)
        {
          if (v24 > 1936419183)
          {
            if (v24 == 1936419184 || v24 == 1970628964)
              goto LABEL_411;
            v26 = 2003395685;
LABEL_410:
            if (v24 == v26)
            {
LABEL_411:
              *(_DWORD *)(v2 + 112) = 3;
              *(_QWORD *)(v2 + 128) = v25;
              goto LABEL_459;
            }
            goto LABEL_458;
          }
          if (v24 == 1836019558)
          {
            if (*(_BYTE *)(v2 + 137) && !*(_BYTE *)(v2 + 138))
            {
              *(_BYTE *)(v2 + 138) = 1;
              goto LABEL_458;
            }
          }
          else
          {
            if (v24 != 1836019574)
              goto LABEL_458;
            if (*(_BYTE *)(v2 + 136) && !*(_BYTE *)(v2 + 137))
            {
              *(_BYTE *)(v2 + 137) = 1;
              goto LABEL_458;
            }
          }
          return FigSignalErrorAt();
        }
        if (v24 <= 1718909295)
        {
          if (v24 != 1701671783)
          {
            v26 = 1718773093;
            goto LABEL_410;
          }
LABEL_458:
          *(_DWORD *)(v2 + 112) = 1;
          goto LABEL_459;
        }
        if (v24 == 1718909296)
        {
          if (!*(_BYTE *)(v2 + 136))
          {
            *(_BYTE *)(v2 + 136) = 1;
            goto LABEL_458;
          }
        }
        else
        {
          if (v24 != 1835295092)
            goto LABEL_458;
          if (!*(_BYTE *)(v2 + 152) || *(_BYTE *)(v2 + 138))
          {
            *(_QWORD *)(v2 + 240) = *(_QWORD *)(v2 + 72) + v25;
            if (!*(_QWORD *)(v2 + 216))
            {
              *(_QWORD *)(v2 + 216) = 64;
              *(_QWORD *)(v2 + 224) = malloc_type_malloc(0x1200uLL, 0x1000040FF89C88EuLL);
              *(_QWORD *)(v2 + 232) = malloc_type_malloc(8 * *(_QWORD *)(v2 + 216), 0x100004000313F17uLL);
            }
            ConsumeBufferedBytes((CMBlockBufferRef *)v2, (OpaqueCMBlockBuffer *)8);
            if (*(_QWORD *)(v2 + 160))
            {
              TrackCount = MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144));
              v235 = TrackCount;
              if (TrackCount >= 1)
              {
                v236 = 0;
                v237 = TrackCount;
                while (1)
                {
                  v238 = *(_QWORD *)(v2 + 160) + v236;
                  v239 = MovieSampleAccessorCreate(*(const void **)(v2 + 144), *(_QWORD *)(v238 + 40), (const void ***)(v238 + 168));
                  if ((_DWORD)v239 && (_DWORD)v239 != -12842)
                    break;
                  if (*(_QWORD *)(v238 + 168))
                  {
                    v239 = fragManifold_ObtainChunkInformation(v238);
                    if ((_DWORD)v239)
                      break;
                  }
                  v236 += 256;
                  if (!--v237)
                    goto LABEL_429;
                }
                SampleDependencyAttributeDictionary = v239;
                goto LABEL_673;
              }
LABEL_429:
              if (!v235)
              {
LABEL_432:
                *(_BYTE *)(v2 + 138) = 0;
                *(_DWORD *)(v2 + 112) = 2;
LABEL_459:
                LODWORD(v27) = 0;
                goto LABEL_662;
              }
              v241 = fragManifold_SelectEligibleTrackForEmitting((uint64_t *)v2);
            }
            else
            {
              v241 = FigSignalErrorAt();
            }
            SampleDependencyAttributeDictionary = v241;
            if ((_DWORD)v241)
            {
LABEL_673:
              fragManifold_UnprepareTracksForSampleEmission(v2);
              return SampleDependencyAttributeDictionary;
            }
            goto LABEL_432;
          }
        }
        return FigSignalErrorAt();
      case 1:
        v221 = *(_QWORD *)(v2 + 120);
        if (*(_QWORD *)(v2 + 88) < v221)
          return 0;
        if (*(_DWORD *)(v2 + 116) != 1701671783)
        {
          lhs.value = 0;
          v231 = CMBlockBufferCreateWithBufferReference(v22, *(CMBlockBufferRef *)(v2 + 80), 0, v221, 0, (CMBlockBufferRef *)&lhs);
          if (!(_DWORD)v231)
          {
            v231 = MoovParseMovieLevelAtom();
            if (!(_DWORD)v231)
            {
              v232 = *(_DWORD *)(v2 + 116);
              if (v232 != 1836019574)
              {
                if (v232 == 1718909296)
                {
                  v233 = lhs.value;
                  if (lhs.value)
                    v233 = (CMTimeValue)CFRetain((CFTypeRef)lhs.value);
                  *(_QWORD *)(v2 + 96) = v233;
                }
LABEL_440:
                v242 = *(_BYTE **)(v2 + 144);
                if (v242[81])
                  v243 = v242[82] == 0;
                else
                  v243 = v242[83] != 0;
                *(_BYTE *)(v2 + 153) = v243;
                ConsumeBufferedBytes((CMBlockBufferRef *)v2, *(OpaqueCMBlockBuffer **)(v2 + 120));
                v244 = *(_DWORD *)(v2 + 116);
                if (v244 != 1836019574)
                  goto LABEL_588;
                *(_DWORD *)(v2 + 312) = 0;
                *(_BYTE *)(v2 + 152) = MovieInformationCouldContainFragments(*(_QWORD *)(v2 + 144));
                if (!MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144))
                  || (v245 = MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144)),
                      v246 = malloc_type_calloc(v245, 0x100uLL, 0x10E00408C458079uLL),
                      (*(_QWORD *)(v2 + 160) = v246) == 0))
                {
                  SampleDependencyAttributeDictionary = FigSignalErrorAt();
                  if ((_DWORD)SampleDependencyAttributeDictionary)
                  {
LABEL_572:
                    fragManifold_DisposeTracks((uint64_t *)v2);
                    goto LABEL_657;
                  }
                  goto LABEL_587;
                }
                NthTrackOfType = MovieInformationFindNthTrackOfType(*(_QWORD *)(v2 + 144), 0, 1986618469);
                v248 = NthTrackOfType;
                if (NthTrackOfType && (v249 = MovieTrackCopyFormatDescriptionArray(NthTrackOfType)) != 0)
                {
                  v250 = v249;
                  ValueAtIndex = CFArrayGetValueAtIndex(v249, 0);
                  if (ValueAtIndex)
                    cf = CFRetain(ValueAtIndex);
                  else
                    cf = 0;
                  CFRelease(v250);
                }
                else
                {
                  cf = 0;
                }
                if (MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144)) < 1)
                {
LABEL_543:
                  if (v248)
                  {
                    v294 = *(const void **)(v2 + 296);
                    if (*(int *)(v2 + 312) < 1)
                    {
                      if (v294)
                      {
                        CFRelease(*(CFTypeRef *)(v2 + 296));
                        *v361 = 0;
                      }
                    }
                    else if (FigSampleAttachmentCollectorCreateSynchronous((uint64_t)v22, v294, 0, v347))
                    {
                      v295 = FigSignalErrorAt();
                      if ((_DWORD)v295)
                      {
                        SampleDependencyAttributeDictionary = v295;
                        if (*v361)
                        {
                          CFRelease(*v361);
                          *v361 = 0;
                        }
                        if (*v347)
                        {
                          CFRelease(*v347);
                          *v347 = 0;
                        }
                        v2 = v362;
                        v22 = allocator;
                        goto LABEL_569;
                      }
                    }
                  }
                  v296 = *(void (**)(_QWORD, _QWORD))(v2 + 56);
                  if (v296)
                  {
                    v297 = *(int *)(v2 + 32);
                    *(_DWORD *)(v2 + 32) = 0;
                    if ((int)v297 >= 1)
                    {
                      v298 = v297;
                      do
                      {
                        MEMORY[0x19402EA24](*(_QWORD *)(v2 + 24));
                        --v298;
                      }
                      while (v298);
                      v296 = *(void (**)(_QWORD, _QWORD))(v2 + 56);
                    }
                    v296(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 48));
                    do
                    {
                      MEMORY[0x19402EA0C](*(_QWORD *)(v2 + 24));
                      v299 = *(_DWORD *)(v2 + 32) + 1;
                      *(_DWORD *)(v2 + 32) = v299;
                    }
                    while (v299 < (int)v297);
                    if (*(_BYTE *)v2)
                    {
                      SampleDependencyAttributeDictionary = 4294951251;
                    }
                    else if (*(_BYTE *)(v2 + 2))
                    {
                      SampleDependencyAttributeDictionary = 4294951251;
                    }
                    else
                    {
                      SampleDependencyAttributeDictionary = 0;
                    }
                  }
                  else
                  {
                    SampleDependencyAttributeDictionary = 0;
                  }
                }
                else
                {
                  v266 = 0;
                  v353 = v248;
                  while (1)
                  {
                    v359 = *MEMORY[0x1E0CA2E18];
                    *(_OWORD *)&time1.value = *MEMORY[0x1E0CA2E18];
                    v267 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
                    time1.epoch = v267;
                    v268 = *(_QWORD *)(v2 + 160);
                    v269 = *(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(v2 + 144) + 320) + 8 * v266);
                    if (v269)
                      v269 = CFRetain(v269);
                    v270 = v268 + (v266 << 8);
                    *(_QWORD *)(v270 + 40) = v269;
                    v271 = (uint64_t *)(v270 + 40);
                    CMNotificationCenterGetDefaultLocalCenter();
                    FigNotificationCenterAddWeakListener();
                    v351 = (_DWORD *)(v270 + 48);
                    MovieTrackGetBasicInfo(*(_QWORD *)(v270 + 40), (_DWORD *)(v270 + 48), (_DWORD *)v270);
                    v272 = MovieTrackCopyFormatDescriptionArray(*(_QWORD *)(v270 + 40));
                    if (v272)
                    {
                      v273 = v272;
                      v349 = v268;
                      if (v248)
                      {
                        if (*v351 == 1835365473)
                        {
                          Count = CFArrayGetCount(v272);
                          if (_os_feature_enabled_impl())
                          {
                            v275 = *(_QWORD *)(v362 + 144);
                            v276 = *(_QWORD *)(v275 + 328);
                            if (v276 >= 1)
                            {
                              v277 = (_DWORD *)(*(_QWORD *)(v275 + 344) + 8);
                              while (*(v277 - 1) != *(_DWORD *)v270
                                   || *(v277 - 2) != 1919837298
                                   || *v277 != *(_DWORD *)(v353 + 144))
                              {
                                v277 += 3;
                                if (!--v276)
                                  goto LABEL_515;
                              }
                            }
                            if (Count >= 1)
                            {
                              if (!*v361
                                && FigSampleAttachmentCollectionRulesCopyForManifold((uint64_t)allocator, cf, v361))
                              {
                                v293 = FigSignalErrorAt();
                                if ((_DWORD)v293)
                                {
                                  SampleDependencyAttributeDictionary = v293;
                                  goto LABEL_566;
                                }
                              }
                              else
                              {
                                for (i = 0; i != Count; ++i)
                                {
                                  v279 = CFArrayGetValueAtIndex(v273, i);
                                  v280 = *v361;
                                  v281 = *(unsigned int (**)(CFTypeRef, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                                + 8);
                                  if (v281 && v281(v280, v279))
                                  {
                                    *(_BYTE *)(v349 + (v266 << 8) + 176) = 1;
                                    ++*(_DWORD *)(v362 + 312);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_515:
                      if (CFArrayGetCount(v273) == 1)
                      {
                        v282 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v273, 0);
                        v283 = fragManifold_SetTrackLatestFormatDescription(v362, v270, v282);
                        v268 = v349;
                        if ((_DWORD)v283)
                        {
                          SampleDependencyAttributeDictionary = v283;
                          goto LABEL_566;
                        }
                      }
                      else
                      {
                        v268 = v349;
                        *(_BYTE *)(v349 + (v266 << 8) + 80) = 1;
                      }
                      CFRelease(v273);
                      v248 = v353;
                    }
                    v2 = v362;
                    v284 = fragManifold_CallNewTrackCallback(v362, (unsigned int *)v270);
                    if ((_DWORD)v284)
                      break;
                    v285 = v268 + (v266 << 8);
                    v286 = MEMORY[0x1E0CA2E68];
                    *(_OWORD *)(v285 + 96) = *MEMORY[0x1E0CA2E68];
                    *(_QWORD *)(v285 + 112) = *(_QWORD *)(v286 + 16);
                    *(_OWORD *)(v285 + 120) = v359;
                    *(_QWORD *)(v285 + 136) = v267;
                    v287 = *v271;
                    if (MovieTrackHasEditList(*v271) && MovieTrackGetEditSegmentCount(v287) == 1)
                    {
                      v288 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 48);
                      *(_OWORD *)&v371[16] = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 32);
                      v372 = v288;
                      v289 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 80);
                      *(_OWORD *)v373 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 64);
                      *(_OWORD *)&v373[16] = v289;
                      v290 = *(_OWORD *)(MEMORY[0x1E0CA2E20] + 16);
                      destination = *MEMORY[0x1E0CA2E20];
                      *(_OWORD *)v371 = v290;
                      if (!MovieTrackGetEditSegmentWithIndex(v287, 0, &destination)
                        && (BYTE12(destination) & 1) != 0
                        && (v371[20] & 1) != 0
                        && !*(_QWORD *)&v371[24]
                        && (*(_QWORD *)&v371[8] & 0x8000000000000000) == 0
                        && (BYTE12(v372) & 1) != 0
                        && (v373[20] & 1) != 0
                        && !*(_QWORD *)&v373[24]
                        && (*(_QWORD *)&v373[8] & 0x8000000000000000) == 0)
                      {
                        time = *(CMTime *)&v371[8];
                        valuePtr = *(CMTime *)&v373[8];
                        if (!CMTimeCompare(&time, &valuePtr))
                        {
                          *(_OWORD *)&time.value = v372;
                          time.epoch = *(_QWORD *)v373;
                          *(_OWORD *)&valuePtr.value = destination;
                          valuePtr.epoch = *(_QWORD *)v371;
                          CMTimeSubtract(&time1, &time, &valuePtr);
                          v291 = *(_OWORD *)&time1.value;
                          *(_QWORD *)(v285 + 112) = time1.epoch;
                          *(_OWORD *)(v285 + 96) = v291;
                          if (*v351 == 1936684398)
                          {
                            time = time1;
                            CMTimeMultiply((CMTime *)&destination, &time, -1);
                            v292 = destination;
                            *(_QWORD *)(v285 + 136) = *(_QWORD *)v371;
                            *(_OWORD *)(v285 + 120) = v292;
                          }
                        }
                      }
                    }
                    if (*(_QWORD *)(v285 + 64) && (!*(_BYTE *)(v362 + 64) || !*(_BYTE *)(v268 + (v266 << 8) + 81)))
                    {
                      v284 = fragManifold_CallFormatDescriptionCallback(v362, (unsigned int *)v270);
                      if ((_DWORD)v284)
                        break;
                    }
                    ++v266;
                    v22 = allocator;
                    if (v266 >= MovieInformationGetTrackCount(*(_QWORD *)(v362 + 144)))
                      goto LABEL_543;
                  }
                  SampleDependencyAttributeDictionary = v284;
                  v273 = 0;
LABEL_566:
                  v22 = allocator;
                  if (v273)
                    CFRelease(v273);
                  v2 = v362;
                }
LABEL_569:
                if (cf)
                  CFRelease(cf);
                if ((_DWORD)SampleDependencyAttributeDictionary)
                  goto LABEL_572;
LABEL_587:
                v244 = *(_DWORD *)(v2 + 116);
LABEL_588:
                if ((v244 | 0x10) != 0x6D6F6F76)
                {
                  SampleDependencyAttributeDictionary = 0;
                  goto LABEL_657;
                }
                time1.value = 0;
                LODWORD(sampleBufferOut.value) = 1819632756;
                LastMovieFragmentInformation = MovieInformationGetLastMovieFragmentInformation(*(_QWORD *)(v2 + 144), 0);
                if (MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144)) < 1)
                {
                  v302 = 0;
                  SampleDependencyAttributeDictionary = 0;
                  goto LABEL_648;
                }
                v301 = 0;
                v302 = 0;
                v303 = 0;
                v354 = LastMovieFragmentInformation;
                while (1)
                {
                  v304 = *(_QWORD *)(v2 + 160);
                  if (*(_DWORD *)(v304 + v301 + 48) != 1936684398)
                    goto LABEL_641;
                  if (*(_BYTE *)(v2 + 153))
                  {
                    if (LastMovieFragmentInformation)
                    {
                      v305 = *(const __CFArray **)(v304 + v301 + 144);
                      if (!v305 || CFArrayGetCount(v305) < 1)
                      {
                        v311 = kFigISOUserDataKeyspace;
                        goto LABEL_608;
                      }
                      v306 = CFGetAllocator(*(CFTypeRef *)(v2 + 144));
                      v307 = FigMetadataReaderCreateForISOUserDataArray((uint64_t)v306, *(const void **)(v304 + v301 + 144), &time1);
                    }
                    else
                    {
                      v307 = MovieTrackCreateISOUserDataReader(*(_QWORD *)(v2 + 144), *(uint64_t **)(v304 + v301 + 40), &time1);
                    }
                    SampleDependencyAttributeDictionary = v307;
                    v311 = kFigISOUserDataKeyspace;
                    if ((_DWORD)v307)
                      goto LABEL_645;
                  }
                  else
                  {
                    if (LastMovieFragmentInformation)
                    {
                      v308 = *(const __CFArray **)(v304 + v301 + 144);
                      if (!v308 || CFArrayGetCount(v308) < 1)
                      {
                        v311 = kFigUserDataKeyspace;
                        goto LABEL_608;
                      }
                      v309 = CFGetAllocator(*(CFTypeRef *)(v2 + 144));
                      v310 = FigMetadataReaderCreateForQuickTimeUserDataArray((uint64_t)v309, *(const void **)(v304 + v301 + 144), &time1);
                    }
                    else
                    {
                      v310 = MovieTrackCreateQuickTimeUserDataReader(*(_QWORD *)(v2 + 144), *(uint64_t **)(v304 + v301 + 40), &time1);
                    }
                    SampleDependencyAttributeDictionary = v310;
                    v311 = kFigUserDataKeyspace;
                    if ((_DWORD)v310)
                      goto LABEL_645;
                  }
LABEL_608:
                  v312 = time1.value;
                  if (time1.value)
                  {
                    v313 = *v311;
                    if (v302)
                    {
                      *(_QWORD *)&destination = 0;
                      time.value = 0;
                      LODWORD(rhs.value) = 8;
                      valuePtr.value = 0;
                      goto LABEL_613;
                    }
                    v302 = CFNumberCreate(allocator, kCFNumberSInt32Type, &sampleBufferOut);
                    v312 = time1.value;
                    *(_QWORD *)&destination = 0;
                    time.value = 0;
                    LODWORD(rhs.value) = 8;
                    valuePtr.value = 0;
                    if (time1.value)
                    {
LABEL_613:
                      v314 = *(uint64_t (**)(CMTimeValue, __CFString *, CFNumberRef))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                              + 40);
                      if (v314)
                      {
                        v315 = v302;
                        v316 = v314(v312, v313, v302);
                        v317 = v316 - 1;
                        if (v316 >= 1)
                        {
                          v360 = MovieInformationGetLastMovieFragmentInformation(*(_QWORD *)(v362 + 144), 0);
                          v318 = CFGetAllocator(*(CFTypeRef *)(v362 + 144));
                          v319 = *(unsigned int (**)(CMTimeValue, __CFString *, const __CFNumber *, uint64_t, CFAllocatorRef, __int128 *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
                          if (v319)
                          {
                            if (!v319(v312, v313, v315, v317, v318, &destination, 0))
                            {
                              v2 = v362;
                              v302 = v315;
                              LastMovieFragmentInformation = v354;
                              if ((_QWORD)destination)
                              {
                                v320 = CFGetTypeID((CFTypeRef)destination);
                                if (v320 == CFDataGetTypeID())
                                {
                                  v321 = v304 + v301;
                                  if ((!*(_QWORD *)(v304 + v301 + 152) || v360)
                                    && !AudioFormatGetProperty(0x6C646C62u, 8u, &destination, (UInt32 *)&rhs, &time)
                                    && !FigCFEqual())
                                  {
                                    v322 = CFGetAllocator(*(CFTypeRef *)(v362 + 144));
                                    if (!CMSampleBufferCreate(v322, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&valuePtr))
                                    {
                                      CMSetAttachment((CMAttachmentBearerRef)valuePtr.value, v344, (CFTypeRef)time.value, 0);
                                      if (!fragManifold_CallPushSampleCallback(v362, (unsigned int *)(v304 + v301), 0, valuePtr.value))
                                      {
                                        v323 = *(const void **)(v321 + 152);
                                        v324 = (const void *)time.value;
                                        *(_QWORD *)(v321 + 152) = time.value;
                                        if (v324)
                                          CFRetain(v324);
                                        if (v323)
                                          CFRelease(v323);
                                        v325 = v304 + v301;
                                        if (v360)
                                          *(_DWORD *)(v325 + 160) = 1836019558;
                                        else
                                          *(_DWORD *)(v325 + 160) = 1836019574;
                                      }
                                    }
                                  }
                                }
LABEL_635:
                                if ((_QWORD)destination)
                                  CFRelease((CFTypeRef)destination);
                              }
                              if (time.value)
                                CFRelease((CFTypeRef)time.value);
                              if (valuePtr.value)
                                CFRelease((CFTypeRef)valuePtr.value);
LABEL_641:
                              if (time1.value)
                              {
                                CFRelease((CFTypeRef)time1.value);
                                time1.value = 0;
                              }
                              goto LABEL_643;
                            }
                          }
                        }
                        v2 = v362;
                        v302 = v315;
                        LastMovieFragmentInformation = v354;
                        goto LABEL_635;
                      }
                    }
                    else
                    {
                      FigSignalErrorAt();
                    }
                    v2 = v362;
                    goto LABEL_635;
                  }
                  v2 = v362;
LABEL_643:
                  ++v303;
                  v301 += 256;
                  if (v303 >= MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144)))
                  {
                    SampleDependencyAttributeDictionary = 0;
LABEL_645:
                    v22 = allocator;
LABEL_648:
                    if (MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144)) >= 1)
                    {
                      v326 = 0;
                      v327 = 144;
                      do
                      {
                        v328 = *(_QWORD *)(v2 + 160);
                        v329 = *(const void **)(v328 + v327);
                        if (v329)
                        {
                          CFRelease(v329);
                          *(_QWORD *)(v328 + v327) = 0;
                        }
                        ++v326;
                        v327 += 256;
                      }
                      while (v326 < MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144)));
                    }
                    if (time1.value)
                      CFRelease((CFTypeRef)time1.value);
                    if (v302)
                      CFRelease(v302);
LABEL_657:
                    v265 = (const void *)lhs.value;
                    if (!lhs.value)
                      goto LABEL_659;
LABEL_658:
                    CFRelease(v265);
                    goto LABEL_659;
                  }
                }
              }
              v231 = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(v2 + 96), (CMBlockBufferRef)lhs.value, 0, 0, 0);
              if (!(_DWORD)v231)
                goto LABEL_440;
            }
          }
          SampleDependencyAttributeDictionary = v231;
          goto LABEL_657;
        }
        lhs.value = 0;
        rhs.value = 0;
        v222 = CMBlockBufferCreateWithBufferReference(v22, *(CMBlockBufferRef *)(v2 + 80), 0, v221, 0, (CMBlockBufferRef *)&lhs);
        if ((_DWORD)v222)
        {
          SampleDependencyAttributeDictionary = v222;
          goto LABEL_484;
        }
        EMSGInformation = EMSGParseEventMessageAtomAndCreateEMSGInformation(lhs.value, (uint64_t)&rhs);
        if (!(_DWORD)EMSGInformation
          || (SampleDependencyAttributeDictionary = EMSGInformation, (_DWORD)EMSGInformation == -17873))
        {
          ConsumeBufferedBytes((CMBlockBufferRef *)v2, *(OpaqueCMBlockBuffer **)(v2 + 120));
          v224 = rhs.value;
          if (!rhs.value)
          {
            SampleDependencyAttributeDictionary = 0;
            goto LABEL_484;
          }
          valuePtr.value = 0;
          v225 = *(_QWORD *)(v2 + 280);
          if (v225)
          {
            SampleDependencyAttributeDictionary = 0;
LABEL_470:
            if (*(_QWORD *)(v225 + 16))
            {
              time1.value = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)(v224 + 56));
              *(_QWORD *)v373 = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
              v257 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
              *(_OWORD *)&v371[16] = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
              v372 = v257;
              v258 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
              destination = *MEMORY[0x1E0CA2E90];
              *(_OWORD *)v371 = v258;
              v259 = *(_QWORD *)(v224 + 28);
              if (v259 == 0xFFFFFFFFLL)
              {
                v260 = (__int128 *)MEMORY[0x1E0CA2E18];
                destination = *MEMORY[0x1E0CA2E18];
                *(_QWORD *)v371 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
              }
              else
              {
                CMTimeMake((CMTime *)&destination, v259, *(_DWORD *)(v224 + 16));
                v260 = (__int128 *)MEMORY[0x1E0CA2E18];
              }
              CMTimeMake(&time, *(_QWORD *)(v224 + 20), *(_DWORD *)(v224 + 16));
              *(CMTime *)&v371[8] = time;
              *(_QWORD *)v373 = *((_QWORD *)v260 + 2);
              v372 = *v260;
              v261 = CMSampleBufferCreate(v22, *(CMBlockBufferRef *)(v224 + 56), 1u, 0, 0, *(CMFormatDescriptionRef *)(*(_QWORD *)(v2 + 280) + 64), 1, 1, (const CMSampleTimingInfo *)&destination, 1, (const size_t *)&time1, (CMSampleBufferRef *)&valuePtr);
              if ((_DWORD)v261)
              {
                SampleDependencyAttributeDictionary = v261;
                Mutable = 0;
              }
              else
              {
                Mutable = CFDictionaryCreateMutable(v22, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (Mutable)
                {
                  FigCFDictionarySetValue();
                  FigCFDictionarySetValue();
                  FigCFDictionarySetInt32();
                  SampleAttachmentsArray = CMSampleBufferGetSampleAttachmentsArray((CMSampleBufferRef)valuePtr.value, 1u);
                  if (SampleAttachmentsArray)
                  {
                    CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
                    FigCFDictionarySetValue();
                  }
                  v264 = fragManifold_CallPushSampleCallback(v2, *(unsigned int **)(v2 + 280), 0, valuePtr.value);
                }
                else
                {
                  v264 = FigSignalErrorAt();
                }
                SampleDependencyAttributeDictionary = v264;
              }
              if (valuePtr.value)
                CFRelease((CFTypeRef)valuePtr.value);
              if (Mutable)
                CFRelease(Mutable);
            }
            goto LABEL_484;
          }
          *(_QWORD *)&destination = 0;
          v252 = MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144));
          do
            ++v252;
          while (fragManifold_ObtainTrackByID((uint64_t *)v2, v252, 0) != -16042);
          v253 = CFDictionaryCreateMutable(v22, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v253)
          {
            v254 = v253;
            CFDictionarySetValue(v253, v335, *(const void **)(v224 + 48));
            v255 = CMFormatDescriptionCreate(v22, 0x6D657461u, 0x656D7367u, v254, (CMFormatDescriptionRef *)&destination);
            if (!(_DWORD)v255)
            {
              v256 = malloc_type_calloc(1uLL, 0x100uLL, 0x10E00408C458079uLL);
              *(_QWORD *)(v2 + 280) = v256;
              if (v256)
              {
                *v256 = v252;
                v256[12] = 1835365473;
                fragManifold_SetTrackLatestFormatDescription(v2, (uint64_t)v256, (CMFormatDescriptionRef)destination);
                v255 = fragManifold_CallNewTrackCallback(v2, *(unsigned int **)(v2 + 280));
                if (!(_DWORD)v255)
                  v255 = fragManifold_CallFormatDescriptionCallback(v2, *(unsigned int **)(v2 + 280));
              }
              else
              {
                v255 = FigSignalErrorAt();
              }
            }
            SampleDependencyAttributeDictionary = v255;
            CFRelease(v254);
            if ((_QWORD)destination)
              CFRelease((CFTypeRef)destination);
          }
          else
          {
            SampleDependencyAttributeDictionary = FigSignalErrorAt();
          }
          v225 = *(_QWORD *)(v2 + 280);
          if (v225)
            goto LABEL_470;
        }
LABEL_484:
        if (lhs.value)
          CFRelease((CFTypeRef)lhs.value);
        v265 = (const void *)rhs.value;
        if (rhs.value)
          goto LABEL_658;
LABEL_659:
        if (!(_DWORD)SampleDependencyAttributeDictionary)
        {
LABEL_660:
          LODWORD(v27) = 0;
          goto LABEL_661;
        }
        return SampleDependencyAttributeDictionary;
      case 2:
        v27 = *(_QWORD *)(v2 + 168);
        if (!v27)
        {
          appended = FigSignalErrorAt();
          if (!(_DWORD)appended)
            goto LABEL_662;
          return appended;
        }
        v28 = 0;
        value_low = 0;
        v30 = 0;
        SampleDependencyAttributeDictionary = 0;
        while (2)
        {
          v32 = *(_QWORD *)(v2 + 176);
          if (!v32)
          {
            v382 = 0;
            v383 = 0;
            v33 = *(_QWORD *)(v27 + 168);
            if (v33)
            {
              v356 = value_low;
              if (*(_DWORD *)(v27 + 48) == 1936684398)
              {
                time = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
                v369 = 0;
                memset(&valuePtr, 0, sizeof(valuePtr));
                v34 = *(_OWORD *)(v33 + 80);
                v36 = *(_OWORD *)(v33 + 32);
                v35 = *(_OWORD *)(v33 + 48);
                *(_OWORD *)v373 = *(_OWORD *)(v33 + 64);
                *(_OWORD *)&v373[16] = v34;
                *(_OWORD *)&v371[16] = v36;
                v372 = v35;
                v37 = *(_OWORD *)(v33 + 144);
                v39 = *(_OWORD *)(v33 + 96);
                v38 = *(_OWORD *)(v33 + 112);
                v376 = *(_OWORD *)(v33 + 128);
                v377 = v37;
                v374 = v39;
                v375 = v38;
                v41 = *(_OWORD *)(v33 + 176);
                v40 = *(_OWORD *)(v33 + 192);
                v42 = *(_OWORD *)(v33 + 160);
                v381 = *(_QWORD *)(v33 + 208);
                v379 = v41;
                v380 = v40;
                v378 = v42;
                v43 = *(_OWORD *)(v33 + 16);
                destination = *(_OWORD *)v33;
                *(_OWORD *)v371 = v43;
                if (*(_QWORD *)(v2 + 216) < *(_QWORD *)(v27 + 200))
                {
                  free(*(void **)(v2 + 224));
                  free(*(void **)(v2 + 232));
                  v44 = *(_QWORD *)(v27 + 200) + 16;
                  *(_QWORD *)(v2 + 216) = v44;
                  *(_QWORD *)(v2 + 224) = malloc_type_malloc(72 * v44, 0x1000040FF89C88EuLL);
                  *(_QWORD *)(v2 + 232) = malloc_type_malloc(8 * *(_QWORD *)(v2 + 216), 0x100004000313F17uLL);
                }
                if (*(_BYTE *)(v27 + 209))
                {
                  v45 = *(CMTime **)(v2 + 224);
                  MovieSampleAccessorGetDTS((uint64_t)&destination, &lhs);
                  rhs = *(CMTime *)(v27 + 96);
                  CMTimeAdd(&time1, &lhs, &rhs);
                  v45[2] = time1;
                  v46 = *(CMTime **)(v2 + 224);
                  MovieSampleAccessorGetPTS((uint64_t)&destination, &sampleBufferOut);
                  rhs = *(CMTime *)(v27 + 96);
                  CMTimeAdd(&time1, &sampleBufferOut, &rhs);
                  v46[1] = time1;
                  v47 = *(_QWORD *)(v2 + 224);
                  valuePtr = *(CMTime *)(v27 + 212);
                  epoch = valuePtr.epoch;
                  *(_OWORD *)v47 = *(_OWORD *)&valuePtr.value;
                  *(_QWORD *)(v47 + 16) = epoch;
                  v49 = 1;
                }
                else
                {
                  v49 = 0;
                }
                *(_QWORD *)(v2 + 200) = v49;
                if (*(_BYTE *)(v27 + 208))
                {
                  v369 = *(_QWORD *)(v27 + 240);
                  **(_QWORD **)(v2 + 232) = v369;
                  v55 = 1;
                }
                else
                {
                  v55 = 0;
                }
                *(_QWORD *)(v2 + 208) = v55;
                SampleLocation = MovieSampleAccessorGetSampleLocation((uint64_t)&destination, &v382, 0, 0);
                if ((_DWORD)SampleLocation)
                {
                  SampleDependencyAttributeDictionary = SampleLocation;
                  goto LABEL_578;
                }
                v350 = v30;
                v57 = *(_QWORD *)(v27 + 248);
                if (v57 < *(_QWORD *)(v27 + 200))
                {
                  v54 = 0;
                  v58 = 0;
                  v352 = (_OWORD *)(v27 + 96);
                  while (1)
                  {
                    time1 = time;
                    *(_OWORD *)&rhs.value = fragManifold_ComputeSampleDetails_kMinAudioTime;
                    rhs.epoch = 0;
                    if ((CMTimeCompare(&time1, &rhs) & 0x80000000) == 0)
                      goto LABEL_41;
                    if (!*(_BYTE *)(v27 + 209))
                    {
                      v59 = *(_QWORD *)(v2 + 224) + 72 * *(_QWORD *)(v2 + 200);
                      MovieSampleAccessorGetDTS((uint64_t)&destination, &v366);
                      *(_OWORD *)&rhs.value = *v352;
                      rhs.epoch = *(_QWORD *)(v27 + 112);
                      CMTimeAdd(&time1, &v366, &rhs);
                      v60 = *(_OWORD *)&time1.value;
                      *(_QWORD *)(v59 + 64) = time1.epoch;
                      *(_OWORD *)(v59 + 48) = v60;
                      v61 = *(_QWORD *)(v2 + 224) + 72 * *(_QWORD *)(v2 + 200);
                      MovieSampleAccessorGetPTS((uint64_t)&destination, &v365);
                      *(_OWORD *)&rhs.value = *v352;
                      rhs.epoch = *(_QWORD *)(v27 + 112);
                      CMTimeAdd(&time1, &v365, &rhs);
                      v62 = *(_OWORD *)&time1.value;
                      *(_QWORD *)(v61 + 40) = time1.epoch;
                      *(_OWORD *)(v61 + 24) = v62;
                      SampleDuration = MovieSampleAccessorGetSampleDuration((uint64_t)&destination, &valuePtr);
                      if ((_DWORD)SampleDuration)
                      {
                        SampleDependencyAttributeDictionary = SampleDuration;
                        v22 = allocator;
LABEL_577:
                        v30 = v350;
                        goto LABEL_578;
                      }
                      v64 = *(_QWORD *)(v2 + 224) + 72 * *(_QWORD *)(v2 + 200);
                      v65 = *(_OWORD *)&valuePtr.value;
                      *(_QWORD *)(v64 + 16) = valuePtr.epoch;
                      *(_OWORD *)v64 = v65;
                      ++*(_QWORD *)(v2 + 200);
                      v22 = allocator;
                    }
                    if (!*(_BYTE *)(v27 + 208))
                    {
                      v66 = MovieSampleAccessorGetSampleLocation((uint64_t)&destination, 0, (unint64_t)&v369, 0);
                      if ((_DWORD)v66)
                      {
                        SampleDependencyAttributeDictionary = v66;
                        goto LABEL_577;
                      }
                      *(_QWORD *)(*(_QWORD *)(v2 + 232) + 8 * (*(_QWORD *)(v2 + 208))++) = v369;
                    }
                    time1 = time;
                    rhs = valuePtr;
                    CMTimeAdd(&time, &time1, &rhs);
                    v54 += v369;
                    v383 = v54;
                    ++v58;
                    MovieSampleAccessorStepCursor((uint64_t)&destination, 1, 0);
                    if (v57 + v58 >= *(_QWORD *)(v27 + 200))
                      goto LABEL_41;
                  }
                }
                v54 = 0;
                v58 = 0;
LABEL_41:
                *(_QWORD *)(v2 + 192) = v58;
                v30 = v350;
              }
              else
              {
                FormatDescription = MovieSampleAccessorGetSampleLocation(v33, &v382, (unint64_t)&v383, 0);
                if ((_DWORD)FormatDescription)
                  goto LABEL_573;
                *(int64x2_t *)(v2 + 192) = vdupq_n_s64(1uLL);
                *(_QWORD *)(v2 + 208) = 1;
                **(_QWORD **)(v2 + 232) = v383;
                v51 = *(_QWORD *)(v2 + 224);
                MovieSampleAccessorGetDTS(*(_QWORD *)(v27 + 168), &v364);
                time = *(CMTime *)(v27 + 96);
                CMTimeAdd((CMTime *)&destination, &v364, &time);
                *(_OWORD *)(v51 + 48) = destination;
                *(_QWORD *)(v51 + 64) = *(_QWORD *)v371;
                v52 = *(_QWORD *)(v2 + 224);
                MovieSampleAccessorGetPTS(*(_QWORD *)(v27 + 168), &v363);
                time = *(CMTime *)(v27 + 96);
                CMTimeAdd((CMTime *)&destination, &v363, &time);
                *(_OWORD *)(v52 + 24) = destination;
                *(_QWORD *)(v52 + 40) = *(_QWORD *)v371;
                v53 = MovieSampleAccessorGetSampleDuration(*(_QWORD *)(v27 + 168), *(CMTime **)(v2 + 224));
                if ((_DWORD)v53)
                {
                  SampleDependencyAttributeDictionary = v53;
                  goto LABEL_578;
                }
                v54 = v383;
              }
              if (v54)
              {
                v67 = *(_QWORD *)(v2 + 72);
                v68 = v382 - v67;
                if (v382 == v67 || v382 > v67)
                {
                  SampleDependencyAttributeDictionary = 0;
                }
                else
                {
                  SampleDependencyAttributeDictionary = FigSignalErrorAt();
                  v68 = 0;
                  v54 = v383;
                }
                *(_QWORD *)(v2 + 176) = v54;
                *(_QWORD *)(v2 + 184) = v68;
              }
              else
              {
                SampleDependencyAttributeDictionary = FigSignalErrorAt();
              }
              value_low = v356;
              if ((_DWORD)SampleDependencyAttributeDictionary)
                goto LABEL_578;
            }
            else
            {
              SampleDependencyAttributeDictionary = FigSignalErrorAt();
              if ((_DWORD)SampleDependencyAttributeDictionary)
                goto LABEL_578;
            }
            v32 = *(_QWORD *)(v2 + 176);
          }
          if (*(_QWORD *)(v2 + 88) < (unint64_t)(*(_QWORD *)(v2 + 184) + v32))
            goto LABEL_390;
          v69 = *(_QWORD *)(v2 + 168);
          if (*(_BYTE *)(v69 + 80))
          {
            *(_QWORD *)&destination = 0;
            FormatDescription = MovieSampleAccessorGetFormatDescription(*(_QWORD *)(v69 + 168), (const void **)&destination);
            if ((_DWORD)FormatDescription)
              goto LABEL_573;
            if (!FigCFEqual())
            {
              FormatDescription = fragManifold_SetTrackLatestFormatDescription(v2, *(_QWORD *)(v2 + 168), (CMFormatDescriptionRef)destination);
              if ((_DWORD)FormatDescription)
                goto LABEL_573;
              v70 = *(_QWORD *)(v2 + 168);
              v71 = *(const void **)(v70 + 72);
              v72 = (const void *)destination;
              *(_QWORD *)(v70 + 72) = destination;
              if (v72)
                CFRetain(v72);
              if (v71)
                CFRelease(v71);
              FormatDescription = fragManifold_CallFormatDescriptionCallback(v2, *(unsigned int **)(v2 + 168));
              if ((_DWORD)FormatDescription)
                goto LABEL_573;
            }
            SampleDependencyAttributeDictionary = 0;
            v69 = *(_QWORD *)(v2 + 168);
          }
          v73 = *(unsigned __int8 *)(v69 + 176);
          if (!(v73 | (*(_QWORD *)(v69 + 16) != 0)))
            goto LABEL_240;
          rhs.value = 0;
          sampleBufferOut.value = 0;
          v366.value = 0;
          v365.value = 0;
          v364.value = 0;
          v363.value = 0;
          if (!*(_BYTE *)(v2 + 264))
            goto LABEL_144;
          if (!*(_BYTE *)(v69 + 83))
          {
            v80 = *(_QWORD *)(v69 + 88);
            if (!v80)
              goto LABEL_144;
            if (*(_BYTE *)(v69 + 85))
            {
              v81 = *(_QWORD *)(v2 + 248);
              v82 = *(_QWORD *)(v69 + 56);
              v83 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
              if (!v83)
                goto LABEL_116;
              ContiguousBlockBuffer = v83(v81, v337, v82);
              if ((_DWORD)ContiguousBlockBuffer)
                goto LABEL_361;
              v80 = *(_QWORD *)(v69 + 88);
            }
            v84 = *(_QWORD *)(v2 + 248);
            v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (!v85)
              goto LABEL_116;
            SampleDependencyAttributeDictionary = v85(v84, v342, v80);
            if ((_DWORD)SampleDependencyAttributeDictionary)
              goto LABEL_102;
            v86 = *(_QWORD *)(v2 + 248);
            *(_QWORD *)&destination = 0;
            time.value = 0;
            if (!v86 || *(_BYTE *)(v69 + 83))
              goto LABEL_104;
            v87 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                + 48);
            if (v87)
            {
              v88 = v87(v86, v339, v22, &destination);
              if ((_DWORD)v88)
                goto LABEL_84;
              v89 = (const void *)destination;
              if ((_QWORD)destination)
              {
                SampleDependencyAttributeDictionary = 0;
                goto LABEL_105;
              }
              v88 = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(*(const opaqueCMFormatDescription **)(v69 + 56), 0, 0, 0, 0, &time);
              if ((_DWORD)v88)
                goto LABEL_84;
              v90 = time.value;
              v91 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                            + 56);
              if (v91)
              {
                v88 = v91(v86, v339, v90);
LABEL_84:
                SampleDependencyAttributeDictionary = v88;
LABEL_104:
                v89 = (const void *)destination;
                if ((_QWORD)destination)
LABEL_105:
                  CFRelease(v89);
                if (time.value)
                  CFRelease((CFTypeRef)time.value);
                if ((_DWORD)SampleDependencyAttributeDictionary)
                  goto LABEL_102;
                v103 = *(_QWORD *)(v2 + 192);
                if (v103 == 1)
                {
                  ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
                  if ((_DWORD)ContiguousBlockBuffer)
                    goto LABEL_361;
                  v104 = CMBlockBufferGetDataLength((CMBlockBufferRef)v366.value);
                  v105 = CMBlockBufferGetDataLength((CMBlockBufferRef)v366.value);
                  ContiguousBlockBuffer = CMBlockBufferCreateWithMemoryBlock(v22, 0, v104, v22, 0, 0, v105, 1u, (CMBlockBufferRef *)&rhs);
                  if ((_DWORD)ContiguousBlockBuffer)
                    goto LABEL_361;
                  v106 = *(_QWORD *)(v2 + 248);
                  v107 = v366.value;
                  v108 = rhs.value;
                  v109 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                  if (*v109 < 4uLL
                    || (v110 = (uint64_t (*)(uint64_t, CMTimeValue, CMTimeValue))v109[4]) == 0)
                  {
LABEL_116:
                    value_low = 0;
                    SampleDependencyAttributeDictionary = 4294954514;
                    goto LABEL_226;
                  }
                  ContiguousBlockBuffer = v110(v106, v107, v108);
                  if ((_DWORD)ContiguousBlockBuffer)
                    goto LABEL_361;
                }
                else
                {
                  *(_QWORD *)&destination = 0;
                  time.value = 0;
                  valuePtr.value = 0;
                  Empty = CMBlockBufferCreateEmpty(v22, v103, 0, (CMBlockBufferRef *)&destination);
                  if ((_DWORD)Empty)
                  {
LABEL_367:
                    SampleDependencyAttributeDictionary = Empty;
                  }
                  else
                  {
                    if (*(uint64_t *)(v2 + 192) >= 1)
                    {
                      v112 = 0;
                      v113 = 0;
                      v114 = 0;
                      while (1)
                      {
                        if (v114 < *(_QWORD *)(v2 + 208))
                          v112 = *(_QWORD *)(*(_QWORD *)(v2 + 232) + 8 * v114);
                        Empty = CMBlockBufferCreateContiguous(v22, *(CMBlockBufferRef *)(v2 + 80), v22, 0, v113, v112, 0, (CMBlockBufferRef *)&valuePtr);
                        if ((_DWORD)Empty)
                          goto LABEL_367;
                        Empty = CMBlockBufferCreateWithMemoryBlock(v22, 0, v112, v22, 0, 0, v112, 1u, (CMBlockBufferRef *)&time);
                        if ((_DWORD)Empty)
                          goto LABEL_367;
                        v115 = v22;
                        v116 = v30;
                        v117 = *(_QWORD *)(v2 + 248);
                        v118 = valuePtr.value;
                        v119 = time.value;
                        v120 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
                        if (*v120 < 4uLL)
                          break;
                        v121 = (uint64_t (*)(uint64_t, CMTimeValue, CMTimeValue))v120[4];
                        if (!v121)
                          break;
                        v122 = v121(v117, v118, v119);
                        if ((_DWORD)v122)
                        {
                          SampleDependencyAttributeDictionary = v122;
                          goto LABEL_135;
                        }
                        if (valuePtr.value)
                        {
                          CFRelease((CFTypeRef)valuePtr.value);
                          valuePtr.value = 0;
                        }
                        v123 = CMBlockBufferAppendBufferReference((CMBlockBufferRef)destination, (CMBlockBufferRef)time.value, 0, 0, 0);
                        v30 = v116;
                        if ((_DWORD)v123)
                        {
                          SampleDependencyAttributeDictionary = v123;
                          goto LABEL_136;
                        }
                        v22 = v115;
                        if (time.value)
                        {
                          CFRelease((CFTypeRef)time.value);
                          time.value = 0;
                        }
                        v113 += v112;
                        if (++v114 >= *(_QWORD *)(v2 + 192))
                          goto LABEL_133;
                      }
                      SampleDependencyAttributeDictionary = 4294954514;
LABEL_135:
                      v30 = v116;
LABEL_136:
                      v22 = v115;
                      goto LABEL_137;
                    }
LABEL_133:
                    SampleDependencyAttributeDictionary = 0;
                    rhs.value = destination;
                    *(_QWORD *)&destination = 0;
                  }
LABEL_137:
                  if (valuePtr.value)
                    CFRelease((CFTypeRef)valuePtr.value);
                  if (time.value)
                    CFRelease((CFTypeRef)time.value);
                  if ((_QWORD)destination)
                    CFRelease((CFTypeRef)destination);
                  if ((_DWORD)SampleDependencyAttributeDictionary)
                    goto LABEL_102;
                }
                goto LABEL_144;
              }
            }
            SampleDependencyAttributeDictionary = 4294954514;
            goto LABEL_104;
          }
          *(_QWORD *)&destination = 0;
          time.value = 0;
          ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
          if ((_DWORD)ContiguousBlockBuffer)
            goto LABEL_361;
          v75 = CMBlockBufferGetDataLength((CMBlockBufferRef)v366.value);
          v76 = CMBlockBufferGetDataLength((CMBlockBufferRef)v366.value);
          ContiguousBlockBuffer = CMBlockBufferCreateWithMemoryBlock(v22, 0, v75, v22, 0, 0, v76, 1u, (CMBlockBufferRef *)&rhs);
          if ((_DWORD)ContiguousBlockBuffer)
            goto LABEL_361;
          if (!FigCFEqual())
          {
            MovieSampleAccessorCopyCryptorIV(*(_QWORD *)(v69 + 168), (CFTypeRef *)&destination);
            v77 = *(_QWORD *)(v2 + 248);
            v78 = destination;
            v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
            if (v79)
              SampleDependencyAttributeDictionary = v79(v77, v339, v78);
            else
              SampleDependencyAttributeDictionary = 4294954514;
            if ((_QWORD)destination)
              CFRelease((CFTypeRef)destination);
            if ((_DWORD)SampleDependencyAttributeDictionary)
              goto LABEL_102;
          }
          MovieSampleAccessorCopyCryptorSubsampleAuxData(*(_QWORD *)(v69 + 168), (CFTypeRef *)&time);
          v92 = *(_QWORD *)(v2 + 248);
          v93 = time.value;
          v94 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (v94)
            SampleDependencyAttributeDictionary = v94(v92, v341, v93);
          else
            SampleDependencyAttributeDictionary = 4294954514;
          if (time.value)
            CFRelease((CFTypeRef)time.value);
          if ((_DWORD)SampleDependencyAttributeDictionary)
            goto LABEL_102;
          v95 = *(_QWORD *)(v2 + 248);
          v96 = *(_QWORD *)(v69 + 88);
          v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
          if (!v97)
            goto LABEL_101;
          ContiguousBlockBuffer = v97(v95, v342, v96);
          if ((_DWORD)ContiguousBlockBuffer)
            goto LABEL_361;
          v98 = *(_QWORD *)(v2 + 248);
          v99 = v366.value;
          v100 = rhs.value;
          v101 = *(_QWORD **)(CMBaseObjectGetVTable() + 16);
          if (*v101 < 4uLL || (v102 = (uint64_t (*)(uint64_t, CMTimeValue, CMTimeValue))v101[4]) == 0)
          {
LABEL_101:
            SampleDependencyAttributeDictionary = 4294954514;
LABEL_102:
            value_low = 0;
            goto LABEL_226;
          }
          SampleDependencyAttributeDictionary = v102(v98, v99, v100);
          if ((_DWORD)SampleDependencyAttributeDictionary)
            goto LABEL_102;
LABEL_144:
          if (!rhs.value)
          {
            ContiguousBlockBuffer = CMBlockBufferCreateWithBufferReference(v22, *(CMBlockBufferRef *)(v2 + 80), 0, *(_QWORD *)(v2 + 176), 0, (CMBlockBufferRef *)&rhs);
            if ((_DWORD)ContiguousBlockBuffer)
              goto LABEL_361;
          }
          if (*(_BYTE *)(v69 + 81))
          {
            ContiguousBlockBuffer = FigVideoCreateBlockBufferAndFormatDescriptionForHoistingInStreamParameterSets();
            if ((_DWORD)ContiguousBlockBuffer)
              goto LABEL_361;
            if (v365.value)
            {
              v124 = (const void *)rhs.value;
              rhs.value = v365.value;
              CFRetain((CFTypeRef)v365.value);
              if (v124)
                CFRelease(v124);
            }
            if (v363.value)
            {
              ContiguousBlockBuffer = fragManifold_SetTrackLatestFormatDescription(v2, *(_QWORD *)(v2 + 168), (CMFormatDescriptionRef)v363.value);
              if ((_DWORD)ContiguousBlockBuffer)
                goto LABEL_361;
              ContiguousBlockBuffer = fragManifold_CallFormatDescriptionCallback(v2, *(unsigned int **)(v2 + 168));
              if ((_DWORD)ContiguousBlockBuffer)
                goto LABEL_361;
            }
          }
          if (*(_BYTE *)(*(_QWORD *)(v2 + 168) + 84)
            && !CMBlockBufferIsRangeContiguous((CMBlockBufferRef)rhs.value, 0, 0))
          {
            ContiguousBlockBuffer = FigMemoryPoolCreateContiguousBlockBuffer();
            if ((_DWORD)ContiguousBlockBuffer)
              goto LABEL_361;
            v125 = (const void *)rhs.value;
            rhs.value = v364.value;
            if (v364.value)
              CFRetain((CFTypeRef)v364.value);
            if (v125)
              CFRelease(v125);
          }
          ContiguousBlockBuffer = CMSampleBufferCreate(v22, (CMBlockBufferRef)rhs.value, 1u, 0, 0, *(CMFormatDescriptionRef *)(*(_QWORD *)(v2 + 168) + 64), *(_QWORD *)(v2 + 192), *(_QWORD *)(v2 + 200), *(const CMSampleTimingInfo **)(v2 + 224), *(_QWORD *)(v2 + 208), *(const size_t **)(v2 + 232), (CMSampleBufferRef *)&sampleBufferOut);
          if ((_DWORD)ContiguousBlockBuffer)
          {
LABEL_361:
            SampleDependencyAttributeDictionary = ContiguousBlockBuffer;
            goto LABEL_102;
          }
          v126 = *(_QWORD *)(v2 + 168);
          if (*(_DWORD *)(v126 + 48) == 1986618469)
          {
            v127 = *(_QWORD *)(v126 + 168);
            v128 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            LOBYTE(time.value) = 0;
            LOBYTE(valuePtr.value) = 0;
            LOBYTE(time1.value) = 0;
            ContiguousBlockBuffer = MovieSampleAccessorGetDependencyInfo(v127, &time, (char *)&valuePtr, 0, 0, 0, (BOOL *)&time1);
            if ((_DWORD)ContiguousBlockBuffer)
              goto LABEL_361;
            v129 = CMSampleBufferGetSampleAttachmentsArray(v128, 1u);
            if (!v129)
              goto LABEL_169;
            v130 = (void *)CFArrayGetValueAtIndex(v129, 0);
            if (!v130)
              goto LABEL_169;
            v131 = v130;
            *(_QWORD *)&destination = 0;
            SampleDependencyAttributeDictionary = MovieSampleAccessorCreateSampleDependencyAttributeDictionary(v22, v127, (__CFDictionary **)&destination);
            if (!(_DWORD)SampleDependencyAttributeDictionary && (_QWORD)destination)
            {
              CFDictionaryApplyFunction((CFDictionaryRef)destination, (CFDictionaryApplierFunction)fragManifold_AppendAttributesToDictionary, v131);
              CFRelease((CFTypeRef)destination);
LABEL_169:
              value_low = LOBYTE(time.value);
              goto LABEL_171;
            }
            if (!LOBYTE(time.value))
              CFDictionarySetValue((CFMutableDictionaryRef)v131, v331, value);
            if (LOBYTE(valuePtr.value))
              CFDictionarySetValue((CFMutableDictionaryRef)v131, v334, value);
            if (LOBYTE(time1.value))
              CFDictionarySetValue((CFMutableDictionaryRef)v131, v333, v332);
            value_low = LOBYTE(time.value);
            if ((_DWORD)SampleDependencyAttributeDictionary)
              goto LABEL_226;
          }
          else
          {
            value_low = 0;
          }
LABEL_171:
          v132 = *(_QWORD *)(v2 + 168);
          if (*(_DWORD *)(v132 + 48) != 1936684398)
            goto LABEL_192;
          if (!*(_BYTE *)(v2 + 288))
          {
            v133 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            destination = *MEMORY[0x1E0CA2E18];
            *(_QWORD *)v371 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
            *(_OWORD *)&time.value = destination;
            time.epoch = *(_QWORD *)v371;
            *(_OWORD *)&valuePtr.value = destination;
            valuePtr.epoch = *(_QWORD *)v371;
            if ((*(_DWORD *)(v132 + 132) & 0x1D) == 1)
            {
              time1 = *(CMTime *)(v132 + 120);
              v357 = *MEMORY[0x1E0CA2E68];
              *(_OWORD *)&lhs.value = *MEMORY[0x1E0CA2E68];
              v134 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
              lhs.epoch = v134;
              if (CMTimeCompare(&time1, &lhs) >= 1 && CMSampleBufferGetNumSamples(v133) >= 1)
              {
                CMSampleBufferGetDecodeTimeStamp((CMTime *)&destination, v133);
                *(_OWORD *)&time1.value = destination;
                time1.epoch = *(_QWORD *)v371;
                *(_OWORD *)&lhs.value = v357;
                lhs.epoch = v134;
                if (CMTimeCompare(&time1, &lhs) < 0)
                {
                  *(_OWORD *)&time1.value = destination;
                  time1.epoch = *(_QWORD *)v371;
                  CMTimeMultiply(&time, &time1, -1);
                  CMSampleBufferGetDuration(&valuePtr, v133);
                  time1 = time;
                  lhs = valuePtr;
                  if (CMTimeCompare(&time1, &lhs) >= 1)
                    time = valuePtr;
                  v135 = CFGetAllocator(v133);
                  time1 = time;
                  v136 = CMTimeCopyAsDictionary(&time1, v135);
                  if (v136)
                  {
                    v137 = v136;
                    CMSetAttachment(v133, key, v136, 1u);
                    CFRelease(v137);
                  }
                  else
                  {
                    v218 = FigSignalErrorAt();
                    if ((_DWORD)v218)
                    {
                      SampleDependencyAttributeDictionary = v218;
                      goto LABEL_226;
                    }
                  }
                }
              }
            }
          }
          if (!FigAudioFormatDescriptionEmploysDependentPackets())
            goto LABEL_192;
          v138 = *(_QWORD *)(*(_QWORD *)(v2 + 168) + 168);
          v139 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
          *(_QWORD *)&destination = 0;
          SampleDependencyAttributeDictionary = MovieSampleAccessorCreate(*(const void **)v138, *(_QWORD *)(v138 + 8), (const void ***)&destination);
          v140 = destination;
          if ((_DWORD)SampleDependencyAttributeDictionary)
          {
            MovieSampleAccessorDispose((const void **)destination);
            goto LABEL_226;
          }
          v141 = value_low;
          *(_OWORD *)(destination + 80) = *(_OWORD *)(v138 + 80);
          v142 = *(_OWORD *)(v138 + 96);
          v143 = *(_OWORD *)(v138 + 112);
          v144 = *(_OWORD *)(v138 + 144);
          *(_OWORD *)(v140 + 128) = *(_OWORD *)(v138 + 128);
          *(_OWORD *)(v140 + 144) = v144;
          *(_OWORD *)(v140 + 96) = v142;
          *(_OWORD *)(v140 + 112) = v143;
          v145 = *(_OWORD *)(v138 + 160);
          v146 = *(_OWORD *)(v138 + 176);
          v147 = *(_OWORD *)(v138 + 192);
          *(_QWORD *)(v140 + 208) = *(_QWORD *)(v138 + 208);
          *(_OWORD *)(v140 + 176) = v146;
          *(_OWORD *)(v140 + 192) = v147;
          *(_OWORD *)(v140 + 160) = v145;
          v148 = CMSampleBufferGetSampleAttachmentsArray(v139, 1u);
          if (!v148 || (v149 = v148, v150 = CFArrayGetCount(v148), v150 < 1))
          {
LABEL_191:
            MovieSampleAccessorDispose((const void **)destination);
            value_low = v141;
            goto LABEL_192;
          }
          v151 = v150;
          v152 = 0;
          while (2)
          {
            v153 = (void *)CFArrayGetValueAtIndex(v149, v152);
            if (!v153)
              goto LABEL_190;
            v154 = v153;
            time.value = 0;
            if (!MovieSampleAccessorCreateSampleDependencyAttributeDictionary(v22, destination, (__CFDictionary **)&time)&& FigCFDictionaryGetCount() >= 1)
            {
              CFDictionaryApplyFunction((CFDictionaryRef)time.value, (CFDictionaryApplierFunction)fragManifold_AppendAttributesToDictionary, v154);
              CFRelease((CFTypeRef)time.value);
LABEL_190:
              MovieSampleAccessorStepCursor(destination, 1, 0);
              if (v151 == ++v152)
                goto LABEL_191;
              continue;
            }
            break;
          }
          SampleDependencyAttributeDictionary = FigSignalErrorAt();
          MovieSampleAccessorDispose((const void **)destination);
          value_low = v141;
          if ((_DWORD)SampleDependencyAttributeDictionary)
            goto LABEL_226;
LABEL_192:
          v155 = *(_QWORD *)(v2 + 168);
          if (*(_BYTE *)(v2 + 152))
          {
            v358 = value_low;
            v156 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            *(_QWORD *)&destination = 0;
            time.value = 0;
            NumSamples = CMSampleBufferGetNumSamples((CMSampleBufferRef)sampleBufferOut.value);
            if (NumSamples)
            {
              v158 = NumSamples;
              v159 = v30;
              v160 = MovieSampleAccessorCopyCryptorIVArray(*(_QWORD *)(v155 + 168), NumSamples, (CFArrayRef *)&destination);
              v161 = MovieSampleAccessorCopyCryptorSubsampleAuxDataArray(*(_QWORD *)(v155 + 168), v158, (CFArrayRef *)&time);
              if (v160 | v161)
              {
                v162 = v161;
                v163 = CMSampleBufferGetSampleAttachmentsArray(v156, 1u);
                if (v163)
                {
                  v164 = v163;
                  v165 = CFArrayGetCount(v163);
                  if (v158 >= 1 && v158 == v165)
                  {
                    for (j = 0; j != v158; ++j)
                    {
                      v167 = (__CFDictionary *)CFArrayGetValueAtIndex(v164, j);
                      if (!v167)
                        break;
                      v168 = v167;
                      if (v160)
                      {
                        v169 = CFArrayGetValueAtIndex((CFArrayRef)destination, j);
                        CFDictionarySetValue(v168, v343, v169);
                      }
                      if (v162)
                      {
                        v170 = CFArrayGetValueAtIndex((CFArrayRef)time.value, j);
                        CFDictionarySetValue(v168, v348, v170);
                        if (CFDataGetLength((CFDataRef)v170) >= 8)
                        {
                          valuePtr.value = 0;
                          v388.location = 0;
                          v388.length = 8;
                          CFDataGetBytes((CFDataRef)v170, v388, (UInt8 *)&valuePtr);
                          v171 = CFNumberCreate(v22, kCFNumberSInt32Type, &valuePtr);
                          CFDictionarySetValue(v168, v345, v171);
                          if (v171)
                            CFRelease(v171);
                        }
                      }
                    }
                  }
                }
              }
              if ((_QWORD)destination)
                CFRelease((CFTypeRef)destination);
              v2 = v362;
              v30 = v159;
              if (time.value)
                CFRelease((CFTypeRef)time.value);
            }
            v155 = *(_QWORD *)(v2 + 168);
            value_low = v358;
          }
          if (MovieTrackHasSeamSamples(*(_QWORD *)(v155 + 40)))
          {
            v172 = value_low;
            v173 = v30;
            v174 = *(_QWORD *)(*(_QWORD *)(v2 + 168) + 168);
            v175 = (opaqueCMSampleBuffer *)sampleBufferOut.value;
            *(_QWORD *)&destination = 0;
            SampleDependencyAttributeDictionary = MovieSampleAccessorCreate(*(const void **)v174, *(_QWORD *)(v174 + 8), (const void ***)&destination);
            if (!(_DWORD)SampleDependencyAttributeDictionary)
            {
              v176 = destination;
              *(_OWORD *)(destination + 80) = *(_OWORD *)(v174 + 80);
              v177 = *(_OWORD *)(v174 + 144);
              v179 = *(_OWORD *)(v174 + 96);
              v178 = *(_OWORD *)(v174 + 112);
              *(_OWORD *)(v176 + 128) = *(_OWORD *)(v174 + 128);
              *(_OWORD *)(v176 + 144) = v177;
              *(_OWORD *)(v176 + 96) = v179;
              *(_OWORD *)(v176 + 112) = v178;
              v181 = *(_OWORD *)(v174 + 176);
              v180 = *(_OWORD *)(v174 + 192);
              v182 = *(_OWORD *)(v174 + 160);
              *(_QWORD *)(v176 + 208) = *(_QWORD *)(v174 + 208);
              *(_OWORD *)(v176 + 176) = v181;
              *(_OWORD *)(v176 + 192) = v180;
              *(_OWORD *)(v176 + 160) = v182;
              v183 = CMSampleBufferGetSampleAttachmentsArray(v175, 1u);
              if (v183)
              {
                v184 = v183;
                v185 = CFArrayGetCount(v183);
                if (v185 >= 1)
                {
                  v186 = v185;
                  for (k = 0; k != v186; ++k)
                  {
                    v188 = (__CFDictionary *)CFArrayGetValueAtIndex(v184, k);
                    if (v188)
                    {
                      v189 = v188;
                      time.value = 0;
                      if (MovieSampleAccessorCopySeamIdentifier(destination, (CFStringRef *)&time) && time.value != 0)
                      {
                        CFDictionarySetValue(v189, v346, (const void *)time.value);
                        CFRelease((CFTypeRef)time.value);
                      }
                    }
                    MovieSampleAccessorStepCursor(destination, 1, 0);
                  }
                }
              }
            }
            MovieSampleAccessorDispose((const void **)destination);
            v30 = v173;
            value_low = v172;
          }
          else
          {
            SampleDependencyAttributeDictionary = 0;
          }
LABEL_226:
          if (v366.value)
            CFRelease((CFTypeRef)v366.value);
          if (rhs.value)
            CFRelease((CFTypeRef)rhs.value);
          if (v364.value)
            CFRelease((CFTypeRef)v364.value);
          if (v365.value)
            CFRelease((CFTypeRef)v365.value);
          if (v363.value)
            CFRelease((CFTypeRef)v363.value);
          v28 = (void *)sampleBufferOut.value;
          if ((_DWORD)SampleDependencyAttributeDictionary && sampleBufferOut.value)
          {
            CFRelease((CFTypeRef)sampleBufferOut.value);
            LODWORD(v27) = 0;
            v28 = 0;
            goto LABEL_391;
          }
          if ((_DWORD)SampleDependencyAttributeDictionary)
            goto LABEL_578;
          v69 = *(_QWORD *)(v2 + 168);
          v73 = *(unsigned __int8 *)(v69 + 176);
LABEL_240:
          v191 = *v347;
          if (!v73)
          {
            if (v191 && *(_DWORD *)(v69 + 48) == 1986618469)
            {
              *(_QWORD *)&destination = 0;
              v201 = *(uint64_t (**)(CFTypeRef, void *, __int128 *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 16);
              if (v201)
              {
                SampleDependencyAttributeDictionary = v201(v191, v28, &destination);
                if (v28)
                  goto LABEL_261;
              }
              else
              {
                SampleDependencyAttributeDictionary = 4294954514;
                if (v28)
LABEL_261:
                  CFRelease(v28);
              }
              v28 = (void *)destination;
              if (!(_DWORD)SampleDependencyAttributeDictionary)
                goto LABEL_578;
            }
LABEL_243:
            v193 = *(OpaqueCMBlockBuffer **)(v2 + 184);
            if (v193)
            {
              ConsumeBufferedBytes((CMBlockBufferRef *)v2, v193);
              *(_QWORD *)(v2 + 184) = 0;
            }
            v194 = *(_QWORD *)(v2 + 168);
            if (!*(_QWORD *)(v194 + 16))
              goto LABEL_307;
            if (*(_DWORD *)(v194 + 48) == 1935832172)
            {
              v195 = CMSampleBufferGetFormatDescription((CMSampleBufferRef)v28);
              if (CMFormatDescriptionGetMediaSubType(v195) == 1937010800)
              {
                if (v30)
                  CFRelease(v30);
                valuePtr.value = 0;
                time.value = 0;
                *(_QWORD *)&time.timescale = v22;
                *(_QWORD *)&destination = fragManifold_FigCaptionGroupConverterOutputCallbackMPEG4Part30;
                *((_QWORD *)&destination + 1) = &time;
                v196 = FigTTMLCaptionGroupConverterFromSampleBufferCreate(&destination, (uint64_t)v22, (CFTypeRef *)&valuePtr);
                if ((_DWORD)v196)
                  goto LABEL_368;
                v197 = valuePtr.value;
                v198 = *(uint64_t (**)(CMTimeValue, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
                if (v198)
                {
                  v196 = v198(v197, v28);
                  if ((_DWORD)v196)
                    goto LABEL_368;
                  v199 = valuePtr.value;
                  v200 = *(uint64_t (**)(CMTimeValue))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
                  if (v200)
                  {
                    v196 = v200(v199);
                    if (!(_DWORD)v196)
                    {
                      if (time.value)
                      {
                        v30 = CFRetain((CFTypeRef)time.value);
                        SampleDependencyAttributeDictionary = 0;
LABEL_275:
                        if (time.value)
                        {
                          CFRelease((CFTypeRef)time.value);
                          time.value = 0;
                        }
                      }
                      else
                      {
                        SampleDependencyAttributeDictionary = 0;
                        v30 = 0;
                      }
                      if (valuePtr.value)
                        CFRelease((CFTypeRef)valuePtr.value);
                      if ((_DWORD)SampleDependencyAttributeDictionary)
                        goto LABEL_578;
                      if (v30 && CFArrayGetCount((CFArrayRef)v30) >= 1 && CFArrayGetCount((CFArrayRef)v30) >= 1)
                      {
                        v206 = 0;
                        while (1)
                        {
                          v207 = CFArrayGetValueAtIndex((CFArrayRef)v30, v206);
                          FormatDescription = fragManifold_CallPushSampleCallback(v2, *(unsigned int **)(v2 + 168), value_low, (uint64_t)v207);
                          if ((_DWORD)FormatDescription)
                            break;
                          if (++v206 >= CFArrayGetCount((CFArrayRef)v30))
                            goto LABEL_302;
                        }
LABEL_573:
                        SampleDependencyAttributeDictionary = FormatDescription;
                        goto LABEL_578;
                      }
LABEL_302:
                      SampleDependencyAttributeDictionary = 0;
LABEL_303:
                      if (v28)
                        CFRelease(v28);
                      if ((_DWORD)SampleDependencyAttributeDictionary == -16045)
                      {
                        v28 = 0;
                        SampleDependencyAttributeDictionary = 0;
LABEL_390:
                        LODWORD(v27) = 1;
                        goto LABEL_391;
                      }
                      v28 = 0;
                      if ((_DWORD)SampleDependencyAttributeDictionary)
                        goto LABEL_578;
LABEL_307:
                      ConsumeBufferedBytes((CMBlockBufferRef *)v2, *(OpaqueCMBlockBuffer **)(v2 + 176));
                      *(_QWORD *)(v2 + 176) = 0;
                      v208 = MovieSampleAccessorStepCursor(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 168), *(_QWORD *)(v2 + 192), 0);
                      v209 = *(_QWORD *)(v2 + 168);
                      v210 = *(_QWORD *)(v209 + 248) + *(_QWORD *)(v2 + 192);
                      *(_QWORD *)(v209 + 248) = v210;
                      if (v210 == *(_QWORD *)(v209 + 200))
                      {
                        if (v208 == -12840)
                        {
                          MovieSampleAccessorDispose(*(const void ***)(v209 + 168));
                          *(_QWORD *)(*(_QWORD *)(v2 + 168) + 168) = 0;
                        }
                        else
                        {
                          FormatDescription = fragManifold_ObtainChunkInformation(v209);
                          if ((_DWORD)FormatDescription)
                            goto LABEL_573;
                        }
                        v211 = fragManifold_SelectEligibleTrackForEmitting((uint64_t *)v2);
                        SampleDependencyAttributeDictionary = 0;
                        if ((_DWORD)v211)
                        {
                          v226 = 1;
                          LODWORD(v27) = 0;
                          SampleDependencyAttributeDictionary = v211;
                          goto LABEL_392;
                        }
                      }
                      if (*(_QWORD *)(v2 + 72) == *(_QWORD *)(v2 + 240)
                        || (v27 = *(_QWORD *)(v2 + 168), !*(_QWORD *)(v27 + 168)))
                      {
                        fragManifold_UnprepareTracksForSampleEmission(v2);
                        LODWORD(v27) = 0;
                        v226 = 0;
                        goto LABEL_392;
                      }
                      continue;
                    }
LABEL_368:
                    SampleDependencyAttributeDictionary = v196;
                    v30 = 0;
                    goto LABEL_275;
                  }
                }
                v30 = 0;
                SampleDependencyAttributeDictionary = 4294954514;
                goto LABEL_275;
              }
              v194 = *(_QWORD *)(v2 + 168);
            }
            v202 = fragManifold_CallPushSampleCallback(v2, (unsigned int *)v194, value_low, (uint64_t)v28);
            if ((_DWORD)v202)
            {
              SampleDependencyAttributeDictionary = v202;
              goto LABEL_303;
            }
            v203 = *(_QWORD *)(v2 + 168);
            if (*(_DWORD *)(v203 + 48) != 1986618469)
              goto LABEL_302;
            MediaSubType = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v203 + 64));
            SampleDependencyAttributeDictionary = 0;
            if (MediaSubType > 1752589104)
            {
              if (MediaSubType > 1902405732)
              {
                if (MediaSubType > 1902671458)
                {
                  if (MediaSubType != 1902671459 && MediaSubType != 2053207651)
                  {
                    v205 = 1902998904;
                    goto LABEL_335;
                  }
                }
                else if (MediaSubType != 1902405733 && MediaSubType != 1902407032)
                {
                  v205 = 1902667126;
                  goto LABEL_335;
                }
              }
              else if (MediaSubType > 1902212706)
              {
                if (MediaSubType != 1902212707 && MediaSubType != 1902212709)
                {
                  v205 = 1902405681;
                  goto LABEL_335;
                }
              }
              else if (MediaSubType != 1752589105 && MediaSubType != 1836415073)
              {
                v205 = 1869117027;
                goto LABEL_335;
              }
            }
            else if (MediaSubType > 1685220712)
            {
              if (MediaSubType > 1700886114)
              {
                if (MediaSubType != 1700886115 && MediaSubType != 1718908520)
                {
                  v205 = 1751479857;
                  goto LABEL_335;
                }
              }
              else if (MediaSubType != 1685220713 && MediaSubType != 1685481521)
              {
                v205 = 1685481573;
                goto LABEL_335;
              }
            }
            else if (MediaSubType > 1667524656)
            {
              if (MediaSubType != 1667524657 && MediaSubType != 1667790435)
              {
                v205 = 1684895096;
                goto LABEL_335;
              }
            }
            else if (MediaSubType != 1635148593 && MediaSubType != 1635148595)
            {
              v205 = 1667331683;
LABEL_335:
              if (MediaSubType != v205)
                goto LABEL_303;
            }
            time.value = 0;
            valuePtr.value = 0;
            v212 = *(_QWORD *)(v2 + 272);
            if (!v212)
            {
              v213 = MTSampleBufferCopyClosedCaptionSEIBlockBuffer((opaqueCMSampleBuffer *)v28, (CMBlockBufferRef *)&time);
              if (!(_DWORD)v213)
              {
                if (!time.value)
                  goto LABEL_348;
                *(_QWORD *)&destination = 0;
                v214 = MovieInformationGetTrackCount(*(_QWORD *)(v2 + 144));
                do
                  ++v214;
                while (fragManifold_ObtainTrackByID((uint64_t *)v2, v214, 0) != -16042);
                v215 = CMFormatDescriptionCreate(v22, 0x636C6370u, 0x61746363u, 0, (CMFormatDescriptionRef *)&destination);
                if (!(_DWORD)v215)
                {
                  v216 = malloc_type_calloc(1uLL, 0x100uLL, 0x10E00408C458079uLL);
                  *(_QWORD *)(v2 + 272) = v216;
                  if (v216)
                  {
                    *v216 = v214;
                    v216[12] = 1668047728;
                    fragManifold_SetTrackLatestFormatDescription(v2, (uint64_t)v216, (CMFormatDescriptionRef)destination);
                    v215 = fragManifold_CallNewTrackCallback(v2, *(unsigned int **)(v2 + 272));
                    if (!(_DWORD)v215)
                      v215 = fragManifold_CallFormatDescriptionCallback(v2, *(unsigned int **)(v2 + 272));
                  }
                  else
                  {
                    v215 = FigSignalErrorAt();
                  }
                }
                SampleDependencyAttributeDictionary = v215;
                if ((_QWORD)destination)
                  CFRelease((CFTypeRef)destination);
                if (!(_DWORD)SampleDependencyAttributeDictionary)
                {
LABEL_348:
                  v212 = *(_QWORD *)(v2 + 272);
                  if (v212)
                    goto LABEL_349;
LABEL_356:
                  SampleDependencyAttributeDictionary = 0;
                }
LABEL_357:
                if (time.value)
                  CFRelease((CFTypeRef)time.value);
                if (valuePtr.value)
                  CFRelease((CFTypeRef)valuePtr.value);
                goto LABEL_303;
              }
LABEL_355:
              SampleDependencyAttributeDictionary = v213;
              goto LABEL_357;
            }
LABEL_349:
            if (!*(_QWORD *)(v212 + 16))
              goto LABEL_356;
            v217 = (OpaqueCMBlockBuffer *)time.value;
            if (!time.value)
            {
              v213 = MTSampleBufferCopyClosedCaptionSEIBlockBuffer((opaqueCMSampleBuffer *)v28, (CMBlockBufferRef *)&time);
              if ((_DWORD)v213)
                goto LABEL_355;
              v217 = (OpaqueCMBlockBuffer *)time.value;
              if (!time.value)
                goto LABEL_356;
            }
            *(_QWORD *)&destination = CMBlockBufferGetDataLength(v217);
            v213 = CMSampleBufferCreate(v22, (CMBlockBufferRef)time.value, 1u, 0, 0, *(CMFormatDescriptionRef *)(*(_QWORD *)(v2 + 272) + 64), 1, 1, *(const CMSampleTimingInfo **)(v2 + 224), 1, (const size_t *)&destination, (CMSampleBufferRef *)&valuePtr);
            if (!(_DWORD)v213)
              v213 = fragManifold_CallPushSampleCallback(v2, *(unsigned int **)(v2 + 272), 0, valuePtr.value);
            goto LABEL_355;
          }
          break;
        }
        v192 = *(uint64_t (**)(CFTypeRef, void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
        if (v192)
        {
          SampleDependencyAttributeDictionary = v192(v191, v28);
          if (!(_DWORD)SampleDependencyAttributeDictionary)
            goto LABEL_243;
LABEL_578:
          LODWORD(v27) = 0;
        }
        else
        {
          LODWORD(v27) = 0;
          SampleDependencyAttributeDictionary = 4294954514;
        }
LABEL_391:
        v226 = 1;
LABEL_392:
        if (v30)
          CFRelease(v30);
        if (v28)
          CFRelease(v28);
        if ((_DWORD)SampleDependencyAttributeDictionary)
          return SampleDependencyAttributeDictionary;
        if ((v226 & 1) != 0)
          goto LABEL_662;
        v227 = *(_QWORD *)(v2 + 240);
        v228 = *(_QWORD *)(v2 + 72);
        v229 = v227 <= v228;
        v230 = v227 - v228;
        if (!v229)
        {
          *(_QWORD *)(v2 + 128) = v230;
          *(_DWORD *)(v2 + 112) = 3;
          goto LABEL_662;
        }
LABEL_661:
        *(_DWORD *)(v2 + 112) = 0;
LABEL_662:
        if ((_DWORD)v27)
          return 0;
        continue;
      case 3:
        if (*(_QWORD *)(v2 + 128) >= *(_QWORD *)(v2 + 88))
          v219 = *(OpaqueCMBlockBuffer **)(v2 + 88);
        else
          v219 = *(OpaqueCMBlockBuffer **)(v2 + 128);
        ConsumeBufferedBytes((CMBlockBufferRef *)v2, v219);
        v220 = *(_QWORD *)(v2 + 128) - (_QWORD)v219;
        *(_QWORD *)(v2 + 128) = v220;
        if (v220)
          return 0;
        goto LABEL_660;
      default:
        goto LABEL_459;
    }
  }
}

uint64_t ConsumeBufferedBytes(CMBlockBufferRef *blockBufferOut, OpaqueCMBlockBuffer *a2)
{
  CMBlockBufferRef v4;
  CMBlockBufferRef *v5;
  OpaqueCMBlockBuffer *v6;
  uint64_t result;
  OpaqueCMBlockBuffer *v8;
  OpaqueCMBlockBuffer *DataLength;
  CMBlockBufferRef blockBufferOuta;

  if (blockBufferOut[11] == a2)
  {
    v5 = blockBufferOut + 10;
    v4 = blockBufferOut[10];
    if (v4)
    {
      CFRelease(v4);
      *v5 = 0;
    }
    CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8u, 0, blockBufferOut + 10);
  }
  else
  {
    blockBufferOuta = 0;
    v6 = blockBufferOut[10];
    CMBlockBufferCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 8u, 0, &blockBufferOuta);
    result = CMBlockBufferAppendBufferReference(blockBufferOuta, v6, (size_t)a2, 0, 0);
    if ((_DWORD)result)
      return result;
    blockBufferOut[10] = blockBufferOuta;
    if (v6)
      CFRelease(v6);
  }
  v8 = blockBufferOut[10];
  blockBufferOut[9] = (OpaqueCMBlockBuffer *)((char *)a2 + (_QWORD)blockBufferOut[9]);
  DataLength = (OpaqueCMBlockBuffer *)CMBlockBufferGetDataLength(v8);
  result = 0;
  blockBufferOut[11] = DataLength;
  return result;
}

uint64_t fragManifold_SetTrackLatestFormatDescription(uint64_t a1, uint64_t a2, CMFormatDescriptionRef desc)
{
  signed int MediaSubType;
  signed int v7;
  char v8;
  int v9;
  const void *v10;
  signed int v11;
  int v12;
  const __CFDictionary *Extensions;
  uint64_t v14;
  int v15;
  const __CFNumber *Extension;
  const __CFNumber *v17;
  CFTypeID v18;
  _QWORD *v19;
  _QWORD *v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  uint64_t v24;
  const __CFDictionary *v25;
  int v26;
  CMVideoDimensions Dimensions;
  uint64_t v28;
  const AudioStreamBasicDescription *StreamBasicDescription;
  __int128 v30;
  __int128 v31;
  const AudioChannelLayout *ChannelLayout;
  char *MagicCookie;
  const void *v34;
  int v35;
  size_t v36;
  const opaqueCMFormatDescription *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  CMFormatDescriptionRef v41;
  signed int mSampleRate_low;
  unsigned __int16 v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  int v46;
  unsigned __int16 v47;
  const __CFNumber *v48;
  const __CFNumber *v49;
  CFTypeID v50;
  const __CFDictionary *v51;
  const __CFDictionary *Value;
  const __CFString *v53;
  CFIndex v54;
  const __CFArray *v55;
  const __CFArray *ValueAtIndex;
  CFTypeID v57;
  CMFormatDescriptionRef formatDescriptionOut;
  AudioStreamBasicDescription asbd;
  size_t v61;
  size_t sizeOut;
  CMVideoCodecType valuePtr;
  CMVideoFormatDescriptionRef v64;

  MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  v7 = MediaSubType;
  formatDescriptionOut = 0;
  if (MediaSubType <= 1902667125)
  {
    v8 = 1;
    if (MediaSubType == 1902212707 || MediaSubType == 1902212709)
      goto LABEL_10;
    v9 = 1902407032;
    goto LABEL_8;
  }
  if (MediaSubType != 1902667126 && MediaSubType != 1902998904)
  {
    v9 = 1902671459;
LABEL_8:
    if (MediaSubType != v9)
      goto LABEL_11;
  }
  v8 = 0;
LABEL_10:
  *(_BYTE *)(a2 + 84) = v8;
LABEL_11:
  v10 = *(const void **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = desc;
  if (desc)
    CFRetain(desc);
  if (v10)
    CFRelease(v10);
  if (!*(_BYTE *)(a1 + 264))
  {
    if (v7 != 1937010800)
      goto LABEL_92;
    Extensions = CMFormatDescriptionGetExtensions(desc);
    *(_DWORD *)(a2 + 48) = 1935832172;
    v14 = CMFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x7362746Cu, 0x73747070u, Extensions, &formatDescriptionOut);
    if ((_DWORD)v14)
      goto LABEL_197;
    goto LABEL_88;
  }
  v64 = 0;
  valuePtr = 0;
  v11 = CMFormatDescriptionGetMediaSubType(desc);
  v12 = v11;
  if (v11 > 1902403957)
  {
    if (v11 <= 1902667125)
    {
      if (v11 <= 1902407031)
      {
        if (v11 != 1902403958)
        {
          if (v11 != 1902405681 && v11 != 1902405733)
            goto LABEL_82;
          goto LABEL_52;
        }
LABEL_31:
        *(_QWORD *)(a2 + 88) = *MEMORY[0x1E0CA30F8];
        *(_BYTE *)(a2 + 83) = 1;
LABEL_66:
        *(_BYTE *)(a2 + 85) = 1;
LABEL_67:
        v24 = FigParseHLSfMP4SecurityInfoFromFormatDescriptionAndCopyIV(desc, (int *)&valuePtr, 0, 0, 0, 0);
        if (!(_DWORD)v24)
          goto LABEL_68;
LABEL_81:
        v37 = v64;
        formatDescriptionOut = v64;
        goto LABEL_199;
      }
      if (v11 != 1902407032)
      {
        if (v11 != 1902469939)
        {
          v15 = 1902537827;
          goto LABEL_55;
        }
LABEL_56:
        v19 = (_QWORD *)MEMORY[0x1E0CA30C8];
        goto LABEL_57;
      }
LABEL_52:
      v20 = (_QWORD *)MEMORY[0x1E0CA30F0];
LABEL_65:
      *(_QWORD *)(a2 + 88) = *v20;
      goto LABEL_66;
    }
    if (v11 <= 1902998903)
    {
      if (v11 != 1902667126 && v11 != 1902671459)
      {
        v15 = 1902928227;
        goto LABEL_55;
      }
      goto LABEL_52;
    }
    if (v11 == 1902998904)
      goto LABEL_52;
    if (v11 == 1903522657)
      goto LABEL_56;
    if (v11 != 1903587385)
      goto LABEL_82;
    Extension = (const __CFNumber *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA4A08]);
    if (Extension)
    {
      v17 = Extension;
      v18 = CFGetTypeID(Extension);
      if (v18 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v17, kCFNumberSInt32Type, &valuePtr);
        *(_BYTE *)(a2 + 83) = 1;
        v19 = (_QWORD *)MEMORY[0x1E0CA30F8];
LABEL_57:
        *(_QWORD *)(a2 + 88) = *v19;
        goto LABEL_67;
      }
    }
LABEL_203:
    v24 = FigSignalErrorAt();
    v37 = 0;
    goto LABEL_205;
  }
  if (v11 > 1902207794)
  {
    if (v11 <= 1902211170)
    {
      if ((v11 - 1902207795) > 0x3D || ((1 << (v11 - 51)) & 0x2020000000000001) == 0)
        goto LABEL_82;
    }
    else
    {
      if (v11 > 1902212706)
      {
        if (v11 != 1902212707 && v11 != 1902212709)
          goto LABEL_82;
        v20 = (_QWORD *)MEMORY[0x1E0CA30E0];
        goto LABEL_65;
      }
      if (v11 != 1902211171)
      {
        if (v11 != 1902212657)
          goto LABEL_82;
        goto LABEL_31;
      }
    }
    goto LABEL_56;
  }
  if (v11 > 1667790434)
  {
    if (v11 != 1667790435)
    {
      v15 = 1902207331;
LABEL_55:
      if (v11 != v15)
        goto LABEL_82;
      goto LABEL_56;
    }
  }
  else if (v11 != 1667331683 && v11 != 1667524657)
  {
    goto LABEL_82;
  }
  v21 = (const __CFNumber *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E0CA4A08]);
  if (!v21)
    goto LABEL_203;
  v22 = v21;
  v23 = CFGetTypeID(v21);
  if (v23 != CFNumberGetTypeID())
    goto LABEL_203;
  CFNumberGetValue(v22, kCFNumberSInt32Type, &valuePtr);
  *(_QWORD *)(a2 + 88) = *MEMORY[0x1E0CA30E8];
  *(_BYTE *)(a2 + 83) = 1;
  if (*(_DWORD *)(a2 + 48) != 1986618469)
  {
    v24 = 4294951255;
    goto LABEL_81;
  }
LABEL_68:
  v25 = CMFormatDescriptionGetExtensions(desc);
  v26 = *(_DWORD *)(a2 + 48);
  if (v26 != 1936684398)
  {
    if (v26 != 1986618469)
      goto LABEL_82;
    Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
    v28 = CMVideoFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], valuePtr, Dimensions.width, Dimensions.height, v25, &v64);
    goto LABEL_80;
  }
  v61 = 0;
  sizeOut = 0;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
  if (StreamBasicDescription)
  {
    v31 = *(_OWORD *)&StreamBasicDescription->mSampleRate;
    v30 = *(_OWORD *)&StreamBasicDescription->mBytesPerPacket;
    *(_QWORD *)&asbd.mBitsPerChannel = *(_QWORD *)&StreamBasicDescription->mBitsPerChannel;
    *(_OWORD *)&asbd.mSampleRate = v31;
    *(_OWORD *)&asbd.mBytesPerPacket = v30;
    asbd.mFormatID = valuePtr;
    ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(desc, &sizeOut);
    MagicCookie = (char *)CMAudioFormatDescriptionGetMagicCookie(desc, &v61);
    v34 = MagicCookie;
    if (v12 > 1902207855)
    {
      if (v12 == 1902207856)
        goto LABEL_78;
      v35 = 1903522657;
    }
    else
    {
      if (v12 == 1902207331)
        goto LABEL_78;
      v35 = 1902207848;
    }
    if (v12 != v35)
    {
      v36 = v61;
      goto LABEL_79;
    }
LABEL_78:
    v34 = MagicCookie + 8;
    v36 = v61 - 8;
    v61 -= 8;
LABEL_79:
    v28 = CMAudioFormatDescriptionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &asbd, sizeOut, ChannelLayout, v36, v34, v25, &v64);
LABEL_80:
    v24 = v28;
    if ((_DWORD)v28)
      goto LABEL_81;
LABEL_82:
    v37 = v64;
    formatDescriptionOut = v64;
LABEL_83:
    if (!v37)
      goto LABEL_92;
    v39 = *(const void **)(a2 + 56);
    v38 = *(const void **)(a2 + 64);
    *(_QWORD *)(a2 + 56) = v38;
    if (v38)
      CFRetain(v38);
    if (v39)
      CFRelease(v39);
LABEL_88:
    v40 = *(const void **)(a2 + 64);
    v41 = formatDescriptionOut;
    *(_QWORD *)(a2 + 64) = formatDescriptionOut;
    if (v41)
      CFRetain(v41);
    if (v40)
      CFRelease(v40);
LABEL_92:
    if (*(_DWORD *)(a2 + 48) != 1986618469)
      goto LABEL_187;
    mSampleRate_low = CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(a2 + 64));
    LODWORD(asbd.mSampleRate) = mSampleRate_low;
    if (mSampleRate_low <= 1902207794)
    {
      if (mSampleRate_low <= 1685220712)
      {
        if (mSampleRate_low <= 1667524656)
        {
          if (mSampleRate_low <= 1667326823)
          {
            if (mSampleRate_low == 1633771875 || mSampleRate_low == 1667312947)
              goto LABEL_175;
            v44 = 24931;
          }
          else if (mSampleRate_low > 1667330146)
          {
            if (mSampleRate_low == 1667330147)
              goto LABEL_175;
            v44 = 30307;
          }
          else
          {
            if (mSampleRate_low == 1667326824)
              goto LABEL_175;
            v44 = 25456;
          }
          v46 = v44 | 0x63610000;
          goto LABEL_174;
        }
        if (mSampleRate_low <= 1667656802)
        {
          if (mSampleRate_low != 1667524657 && mSampleRate_low != 1667574579)
          {
            v46 = 1667575091;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low <= 1668047202)
        {
          if (mSampleRate_low != 1667656803)
          {
            v46 = 1667790435;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low == 1668047203)
          goto LABEL_175;
        v46 = 1668641633;
        goto LABEL_174;
      }
      if (mSampleRate_low <= 1885430578)
      {
        if (mSampleRate_low <= 1701733237)
        {
          if (mSampleRate_low != 1685220713 && mSampleRate_low != 1700886115)
          {
            v46 = 1701733217;
            goto LABEL_174;
          }
        }
        else if (mSampleRate_low > 1882599479)
        {
          if (mSampleRate_low != 1882599480)
          {
            v46 = 1885430115;
            goto LABEL_174;
          }
        }
        else if (mSampleRate_low != 1701733238)
        {
          v46 = 1869117027;
          goto LABEL_174;
        }
        goto LABEL_175;
      }
      if (mSampleRate_low <= 1885547314)
      {
        if ((mSampleRate_low - 1885430579) > 0x3D
          || ((1 << (mSampleRate_low - 51)) & 0x2020000000000001) == 0)
        {
          goto LABEL_178;
        }
        goto LABEL_175;
      }
      if (mSampleRate_low <= 1886745440)
      {
        if (mSampleRate_low != 1885547315)
        {
          v46 = 1885692723;
          goto LABEL_174;
        }
        goto LABEL_175;
      }
      if (mSampleRate_low == 1886745441)
        goto LABEL_175;
      v45 = 24931;
    }
    else
    {
      if (mSampleRate_low > 1902667125)
      {
        if (mSampleRate_low <= 2053202738)
        {
          if (mSampleRate_low <= 1902998903)
          {
            if (mSampleRate_low != 1902667126 && mSampleRate_low != 1902671459)
            {
              v46 = 1902928227;
              goto LABEL_174;
            }
          }
          else if (mSampleRate_low > 1903587384)
          {
            if (mSampleRate_low != 1903587385)
            {
              v43 = 24931;
              goto LABEL_164;
            }
          }
          else if (mSampleRate_low != 1902998904)
          {
            v46 = 1903522657;
            goto LABEL_174;
          }
LABEL_175:
          v48 = (const __CFNumber *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(a2 + 64), (CFStringRef)*MEMORY[0x1E0CA4A08]);
          if (!v48)
            goto LABEL_196;
          v49 = v48;
          v50 = CFGetTypeID(v48);
          if (v50 != CFNumberGetTypeID())
            goto LABEL_196;
          CFNumberGetValue(v49, kCFNumberSInt32Type, &asbd);
          mSampleRate_low = LODWORD(asbd.mSampleRate);
LABEL_178:
          if (mSampleRate_low == 1635148595 || mSampleRate_low == 1751479857 || mSampleRate_low == 1685481573)
          {
            v51 = CMFormatDescriptionGetExtensions(*(CMFormatDescriptionRef *)(a2 + 64));
            if (v51)
            {
              Value = (const __CFDictionary *)CFDictionaryGetValue(v51, (const void *)*MEMORY[0x1E0CA2240]);
              if (Value)
              {
                if (LODWORD(asbd.mSampleRate) == 1635148595)
                {
                  v53 = CFSTR("avcC");
                  v54 = 4;
LABEL_189:
                  v55 = (const __CFArray *)CFDictionaryGetValue(Value, v53);
                  if (v55)
                  {
                    ValueAtIndex = v55;
                    v57 = CFGetTypeID(v55);
                    if ((v57 != CFArrayGetTypeID()
                       || CFArrayGetCount(ValueAtIndex) == 1
                       && (ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0)) != 0)
                      && CFDataGetLength(ValueAtIndex) > v54
                      && (~CFDataGetBytePtr(ValueAtIndex)[v54] & 3) == 0)
                    {
                      v24 = 0;
                      *(_BYTE *)(a2 + 81) = 1;
                      goto LABEL_198;
                    }
                  }
                  goto LABEL_196;
                }
                if (LODWORD(asbd.mSampleRate) == 1751479857 || LODWORD(asbd.mSampleRate) == 1685481573)
                {
                  v53 = CFSTR("hvcC");
                  v54 = 21;
                  goto LABEL_189;
                }
              }
            }
LABEL_196:
            v14 = FigSignalErrorAt();
LABEL_197:
            v24 = v14;
            goto LABEL_198;
          }
LABEL_187:
          v24 = 0;
LABEL_198:
          v37 = formatDescriptionOut;
          goto LABEL_199;
        }
        if (mSampleRate_low <= 2053319474)
        {
          if ((mSampleRate_low - 2053202739) > 0x3D
            || ((1 << (mSampleRate_low - 51)) & 0x2020000000000001) == 0)
          {
            v43 = 30307;
LABEL_164:
            v46 = v43 | 0x7A610000;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low <= 2053923170)
        {
          if (mSampleRate_low != 2053319475)
          {
            v46 = 2053464883;
            goto LABEL_174;
          }
          goto LABEL_175;
        }
        if (mSampleRate_low == 2054517601)
          goto LABEL_175;
        v46 = 2053923171;
LABEL_174:
        if (mSampleRate_low != v46)
          goto LABEL_178;
        goto LABEL_175;
      }
      if (mSampleRate_low > 1902324530)
      {
        if (mSampleRate_low <= 1902405732)
        {
          if (mSampleRate_low == 1902324531 || mSampleRate_low == 1902403958)
            goto LABEL_175;
          v47 = 26673;
        }
        else
        {
          if (mSampleRate_low > 1902469938)
          {
            if (mSampleRate_low == 1902469939)
              goto LABEL_175;
            v46 = 1902537827;
            goto LABEL_174;
          }
          if (mSampleRate_low == 1902405733)
            goto LABEL_175;
          v47 = 28024;
        }
        v46 = v47 | 0x71640000;
        goto LABEL_174;
      }
      if ((mSampleRate_low - 1902207795) <= 0x3D
        && ((1 << (mSampleRate_low - 51)) & 0x2020000000000001) != 0
        || (mSampleRate_low - 1902212657) <= 0x34
        && ((1 << (mSampleRate_low - 49)) & 0x14000000000001) != 0)
      {
        goto LABEL_175;
      }
      v45 = 28771;
    }
    v46 = v45 | 0x71610000;
    goto LABEL_174;
  }
  v24 = FigSignalErrorAt();
  v37 = v64;
LABEL_205:
  formatDescriptionOut = v37;
  if (!(_DWORD)v24)
    goto LABEL_83;
LABEL_199:
  if (v37)
    CFRelease(v37);
  return v24;
}

uint64_t fragManifold_CallFormatDescriptionCallback(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t);
  uint64_t v8;
  signed int MediaSubType;
  int v10;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (!*((_QWORD *)a2 + 1))
    return 0;
  v4 = a2[12];
  if (v4 != 1936684398)
  {
    if (v4 == 1986618469)
    {
      v5 = *(_QWORD *)(a1 + 248);
      if (v5)
      {
        v6 = *((_QWORD *)a2 + 8);
        v7 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
        if (v7)
          v7(v5, *MEMORY[0x1E0CA3118], v6);
      }
    }
    else
    {
      v5 = 0;
    }
    goto LABEL_27;
  }
  MediaSubType = CMFormatDescriptionGetMediaSubType(*((CMFormatDescriptionRef *)a2 + 8));
  v5 = 0;
  if (MediaSubType <= 1902211170)
  {
    if (((MediaSubType - 1902207795) > 0x3D
       || ((1 << (MediaSubType - 51)) & 0x2020000000000001) == 0)
      && MediaSubType != 1902207331)
    {
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (MediaSubType > 1902537826)
  {
    if (MediaSubType != 1902537827 && MediaSubType != 1903522657)
    {
      v10 = 1902928227;
      goto LABEL_24;
    }
LABEL_25:
    v5 = *(_QWORD *)(a1 + 256);
    if (!v5)
      v5 = *(_QWORD *)(a1 + 248);
    goto LABEL_27;
  }
  if (MediaSubType == 1902211171)
    goto LABEL_25;
  v10 = 1902469939;
LABEL_24:
  if (MediaSubType == v10)
    goto LABEL_25;
LABEL_27:
  v13 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = 0;
  if ((int)v13 >= 1)
  {
    v14 = v13;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      --v14;
    }
    while (v14);
  }
  v8 = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t))a2 + 1))(*(_QWORD *)(a1 + 8), *a2, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 8), v5);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    v15 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v15;
  }
  while (v15 < (int)v13);
  if (!(_DWORD)v8)
  {
    if (*(_BYTE *)a1 || *(_BYTE *)(a1 + 2))
    {
      return 4294951251;
    }
    else
    {
      v8 = 0;
      *((_BYTE *)a2 + 82) = 0;
    }
  }
  return v8;
}

uint64_t fragManifold_ObtainChunkInformation(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 168);
  if (!v2)
    return FigSignalErrorAt();
  v4 = 0;
  result = MovieSampleAccessorGetChunkDetails(v2, 0, (uint64_t *)(a1 + 184), (uint64_t *)(a1 + 192), (_QWORD *)(a1 + 200), &v4, (BOOL *)(a1 + 208), (BOOL *)(a1 + 209), (_BYTE *)(a1 + 210));
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 209))
      MovieSampleAccessorGetSampleDuration(*(_QWORD *)(a1 + 168), (CMTime *)(a1 + 212));
    if (*(_BYTE *)(a1 + 208))
      MovieSampleAccessorGetSampleLocation(*(_QWORD *)(a1 + 168), 0, a1 + 240, 0);
    return 0;
  }
  return result;
}

uint64_t fragManifold_SelectEligibleTrackForEmitting(uint64_t *a1)
{
  uint64_t TrackCount;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!a1[20])
    return FigSignalErrorAt();
  TrackCount = MovieInformationGetTrackCount(a1[18]);
  if (TrackCount >= 1)
  {
    v3 = 0;
    v4 = a1[20];
    v5 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      if (*(_QWORD *)(v4 + 168) && *(_QWORD *)(v4 + 184) < v5)
      {
        v3 = v4;
        v5 = *(_QWORD *)(v4 + 184);
      }
      v4 += 256;
      --TrackCount;
    }
    while (TrackCount);
    if (v3)
    {
      a1[21] = v3;
      *(_QWORD *)(v3 + 248) = 0;
    }
  }
  return 0;
}

uint64_t fragManifold_CallPushSampleCallback(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (!*((_QWORD *)a2 + 2))
    return 0;
  if (*((_BYTE *)a2 + 82))
  {
    v8 = fragManifold_CallFormatDescriptionCallback(a1, a2);
    if ((_DWORD)v8)
      return v8;
  }
  v9 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = 0;
  if ((int)v9 >= 1)
  {
    v10 = v9;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      --v10;
    }
    while (v10);
  }
  v11 = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, BOOL, _QWORD, uint64_t))a2 + 2))(*(_QWORD *)(a1 + 8), *a2, *((_QWORD *)a2 + 4), a3 != 0, *(_QWORD *)(a1 + 72), a4);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    v12 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v12;
  }
  while (v12 < (int)v9);
  if (!(_DWORD)v11)
  {
    v11 = 4294951251;
    if (!*(_BYTE *)a1)
    {
      if (*(_BYTE *)(a1 + 2))
        return 4294951251;
      else
        return 0;
    }
  }
  return v11;
}

uint64_t fragManifold_CallNewTrackCallback(uint64_t a1, unsigned int *a2)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (*((_BYTE *)a2 + 176))
    return 0;
  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 40);
  if (!v3)
    return 0;
  v5 = *(int *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = 0;
  if ((int)v5 >= 1)
  {
    v6 = v5;
    do
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 24));
      --v6;
    }
    while (v6);
    v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 40);
  }
  v7 = v3(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 48), a2[12], *a2);
  do
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 24));
    v8 = *(_DWORD *)(a1 + 32) + 1;
    *(_DWORD *)(a1 + 32) = v8;
  }
  while (v8 < (int)v5);
  if (!(_DWORD)v7)
  {
    v7 = 4294951251;
    if (!*(_BYTE *)a1)
    {
      if (*(_BYTE *)(a1 + 2))
        return 4294951251;
      else
        return 0;
    }
  }
  return v7;
}

void fragManifold_AppendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t fragManifold_FigCaptionGroupConverterOutputCallbackMPEG4Part30(uint64_t a1, uint64_t a2, CFMutableArrayRef *a3)
{
  CFMutableArrayRef Mutable;
  uint64_t v5;

  if (!*a3)
  {
    Mutable = CFArrayCreateMutable(a3[1], 0, MEMORY[0x1E0C9B378]);
    *a3 = Mutable;
    if (!Mutable)
      return 4294954510;
  }
  v5 = FigSampleBufferCreateForCaptionGroup();
  if (!(_DWORD)v5)
    CFArrayAppendValue(*a3, 0);
  return v5;
}

void FigMovieGetSampleDependencyFlagsFromSampleAttachments(uint64_t a1, char *a2, _BYTE *a3, _BYTE *a4)
{
  char v7;

  if (a2)
  {
    if (FigCFDictionaryGetBooleanIfPresent())
      v7 = 2;
    else
      v7 = 0;
    if (FigCFDictionaryGetBooleanIfPresent())
      v7 |= 8u;
    if (FigCFDictionaryGetBooleanIfPresent())
      v7 |= 0x20u;
    *a2 = v7;
  }
  if (a3)
  {
    FigCFDictionaryGetBooleanIfPresent();
    *a3 = 0;
  }
  if (a4)
  {
    FigCFDictionaryGetBooleanIfPresent();
    *a4 = 0;
  }
}

double FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1, int a2)
{
  signed int MediaSubType;
  const opaqueCMFormatDescription *v5;
  Boolean v6;
  double result;
  unsigned __int16 v8;

  MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
  if (a2)
  {
    v5 = a1;
    v6 = 1;
LABEL_3:
    *(_QWORD *)&result = *(_OWORD *)&CMVideoFormatDescriptionGetPresentationDimensions(v5, 1u, v6);
    return result;
  }
  if (MediaSubType <= 1685480223)
  {
    if (MediaSubType == 1685468526)
      return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
    v8 = 13680;
  }
  else
  {
    if (MediaSubType == 1685480224 || MediaSubType == 1685483632)
      return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
    v8 = 25456;
  }
  if (MediaSubType != (v8 | 0x64760000))
  {
    v5 = a1;
    v6 = 0;
    goto LABEL_3;
  }
  return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
}

double FigMovieGetVideoDefaultCleanApertureDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&CMVideoFormatDescriptionGetPresentationDimensions(a1, 1u, 1u);
  return result;
}

double FigMovieGetVideoDefaultEncodedPixelsDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  return (double)CMVideoFormatDescriptionGetDimensions(a1).width;
}

double FigMovieGetVideoDefaultProductionApertureDimensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&CMVideoFormatDescriptionGetPresentationDimensions(a1, 1u, 0);
  return result;
}

uint64_t FigMovieGetDefaultMediaTimeScaleFromSample(opaqueCMSampleBuffer *a1, CMTimeScale *a2)
{
  const opaqueCMFormatDescription *FormatDescription;
  const opaqueCMFormatDescription *v5;
  CMMediaType MediaType;
  const AudioFormatListItem *MostCompatibleFormat;
  CMTimeScale timescale;
  uint64_t result;
  CMTime v10;

  if (CMSampleBufferGetNumSamples(a1))
  {
    FormatDescription = CMSampleBufferGetFormatDescription(a1);
    if (FormatDescription)
    {
      v5 = FormatDescription;
      MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
      if (MediaType == 1986618469)
      {
        timescale = 600;
        goto LABEL_10;
      }
      if (MediaType != 1936684398)
      {
        memset(&v10, 0, sizeof(v10));
        CMSampleBufferGetPresentationTimeStamp(&v10, a1);
        timescale = v10.timescale;
        if (v10.timescale <= 600)
          timescale = 600;
        goto LABEL_10;
      }
      MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(v5);
      if (MostCompatibleFormat)
      {
        timescale = (int)MostCompatibleFormat->mASBD.mSampleRate;
LABEL_10:
        result = 0;
        *a2 = timescale;
        return result;
      }
    }
  }
  return 4294954516;
}

uint64_t FigMovieCreateContiguousBBufFromNonContiguousAudioSample(opaqueCMSampleBuffer *a1, const __CFAllocator *a2, CMBlockBufferRef *a3, const __CFAllocator *a4, uint64_t *a5, _QWORD *a6)
{
  const opaqueCMFormatDescription *FormatDescription;
  CMMediaType MediaType;
  CMBlockBufferRef DataBuffer;
  OpaqueCMBlockBuffer *v15;
  uint64_t AudioStreamPacketDescriptionsPtr;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  SInt64 v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  SInt64 mStartOffset;
  uint64_t mDataByteSize;
  uint64_t appended;
  uint64_t v31;
  uint64_t v32;
  const __CFAllocator *allocator;
  CMBlockBufferRef *v35;
  uint64_t *v36;
  _QWORD *v37;
  size_t packetDescriptionsSizeOut;
  AudioStreamPacketDescription *packetDescriptionsPointerOut;
  CMBlockBufferRef blockBufferOut;
  char v41;

  v41 = 0;
  packetDescriptionsPointerOut = 0;
  blockBufferOut = 0;
  packetDescriptionsSizeOut = 0;
  if (!a1)
    goto LABEL_36;
  if (!a3)
    goto LABEL_36;
  if (!a5)
    goto LABEL_36;
  if (!a6)
    goto LABEL_36;
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  DataBuffer = CMSampleBufferGetDataBuffer(a1);
  if (MediaType != 1936684398)
    goto LABEL_36;
  v15 = DataBuffer;
  if (!DataBuffer)
    goto LABEL_36;
  AudioStreamPacketDescriptionsPtr = isNonInterleavedPCMAudioFormatDescription(FormatDescription, &v41);
  if ((_DWORD)AudioStreamPacketDescriptionsPtr)
    goto LABEL_37;
  if (v41)
    goto LABEL_36;
  AudioStreamPacketDescriptionsPtr = CMBlockBufferCreateEmpty(a2, 0, 0, &blockBufferOut);
  if (!(_DWORD)AudioStreamPacketDescriptionsPtr)
  {
    AudioStreamPacketDescriptionsPtr = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a1, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut);
    if (!(_DWORD)AudioStreamPacketDescriptionsPtr)
    {
      if (packetDescriptionsSizeOut > 0xF)
      {
        v17 = packetDescriptionsSizeOut >> 4;
        v18 = CFAllocatorAllocate(a4, 8 * (packetDescriptionsSizeOut >> 4), 0);
        if (v18)
        {
          v19 = v18;
          v35 = a3;
          v36 = a5;
          v37 = a6;
          allocator = a4;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v24 = 0;
          if (v17 <= 1)
            v25 = 1;
          else
            v25 = v17;
          v26 = 8 * v25;
          v27 = 1;
          while (1)
          {
            mStartOffset = packetDescriptionsPointerOut[v20].mStartOffset;
            mDataByteSize = packetDescriptionsPointerOut[v20].mDataByteSize;
            if (!v21 || v22 != mStartOffset)
            {
              if (v23)
              {
                appended = CMBlockBufferAppendBufferReference(blockBufferOut, v15, v24, v23, 0);
                if ((_DWORD)appended)
                {
                  v31 = appended;
                  goto LABEL_35;
                }
                v23 = 0;
              }
              v24 = mStartOffset;
            }
            v19[v21 / 8] = mDataByteSize;
            if (v27)
            {
              if (*v19 != mDataByteSize)
                v27 = 0;
            }
            else
            {
              v27 = 0;
            }
            v23 += mDataByteSize;
            v22 = mStartOffset + mDataByteSize;
            v21 += 8;
            ++v20;
            if (v26 == v21)
            {
              v31 = CMBlockBufferAppendBufferReference(blockBufferOut, v15, v24, v23, 0);
              if (!(_DWORD)v31)
              {
                *v35 = blockBufferOut;
                if (v27)
                  v32 = 1;
                else
                  v32 = v17;
                *v36 = v32;
                *v37 = v19;
                return v31;
              }
LABEL_35:
              CFAllocatorDeallocate(allocator, v19);
              goto LABEL_38;
            }
          }
        }
      }
LABEL_36:
      AudioStreamPacketDescriptionsPtr = FigSignalErrorAt();
    }
  }
LABEL_37:
  v31 = AudioStreamPacketDescriptionsPtr;
LABEL_38:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return v31;
}

uint64_t isNonInterleavedPCMAudioFormatDescription(const opaqueCMFormatDescription *a1, _BYTE *a2)
{
  const AudioFormatListItem *MostCompatibleFormat;
  int v5;

  if (CMFormatDescriptionGetMediaType(a1) != 1936684398)
    goto LABEL_5;
  MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(a1);
  if (MostCompatibleFormat)
  {
    if (MostCompatibleFormat->mASBD.mFormatID == 1819304813)
    {
      v5 = (LOBYTE(MostCompatibleFormat->mASBD.mFormatFlags) >> 5) & 1;
LABEL_6:
      *a2 = v5;
      return 0;
    }
LABEL_5:
    LOBYTE(v5) = 0;
    goto LABEL_6;
  }
  return FigSignalErrorAt();
}

uint64_t FigMovieIsNonInterleavedPCMAudioSample(opaqueCMSampleBuffer *a1, _BYTE *a2)
{
  const opaqueCMFormatDescription *FormatDescription;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return isNonInterleavedPCMAudioFormatDescription(FormatDescription, a2);
}

uint64_t FigMovieGetAudioRollRecoveryValueFromSampleBufferAttachment(uint64_t a1, _WORD *a2, BOOL *a3, _BYTE *a4)
{
  BOOL v7;

  if (!a1 || !a2 || !a3 || !a4)
    return FigSignalErrorAt();
  v7 = FigCFDictionaryGetInt16IfPresent() != 0;
  FigCFDictionaryGetBooleanIfPresent();
  *a2 = 0;
  *a3 = v7;
  *a4 = 0;
  return 0;
}

uint64_t FigMovieCopySeamIdentifierFromSampleAttachment(const __CFDictionary *a1, CFTypeRef *a2)
{
  BOOL v3;
  CFTypeID v4;
  void *value;

  value = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  if (CFDictionaryGetValueIfPresent(a1, (const void *)*MEMORY[0x1E0CA4E28], (const void **)&value))
    v3 = value == 0;
  else
    v3 = 1;
  if (v3 || (v4 = CFGetTypeID(value), v4 != CFStringGetTypeID()))
    *a2 = 0;
  else
    *a2 = CFRetain(value);
  return 0;
}

uint64_t FigMovieGetSeamUUIDBytesFromSampleAttachmentArray(const __CFArray *a1, CFIndex a2, CFUUIDBytes *a3)
{
  const __CFDictionary *ValueAtIndex;
  uint64_t v5;
  const __CFUUID *v6;
  const __CFAllocator *v7;
  const __CFUUID *v8;
  CFTypeRef cf;

  cf = 0;
  if (!a1)
    return 0;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, a2);
  if (FigMovieCopySeamIdentifierFromSampleAttachment(ValueAtIndex, &cf))
    goto LABEL_3;
  if (!cf)
    return 0;
  if (CFStringGetLength((CFStringRef)cf) >= 36)
  {
    v7 = CFGetAllocator(cf);
    v8 = CFUUIDCreateFromString(v7, (CFStringRef)cf);
    v6 = v8;
    if (v8)
    {
      *a3 = CFUUIDGetUUIDBytes(v8);
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    goto LABEL_4;
  }
LABEL_3:
  v5 = 0;
  v6 = 0;
LABEL_4:
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t FigMovieGetAudioIndependentSampleDecoderRefreshCountFromSampleAttachment(uint64_t a1, _WORD *a2, _BYTE *a3)
{
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  if (FigCFDictionaryGetInt16IfPresent())
    FigCFDictionaryGetBooleanIfPresent();
  *a2 = 0;
  *a3 = 0;
  return 0;
}

uint64_t FigMovieGetVideoSyncSampleEntryFromSampleAttachment(uint64_t a1, _BYTE *a2, BOOL *a3)
{
  BOOL v5;
  uint64_t result;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  v5 = FigCFDictionaryGetIntIfPresent() != 0;
  result = 0;
  *a2 = 0;
  *a3 = v5;
  return result;
}

uint64_t FigMovieGetVideoTemporalLayerEntryFromSampleAttachment(const __CFDictionary *a1, uint64_t a2, char *a3)
{
  const __CFDictionary *Value;
  const __CFData *v6;
  const __CFData *v7;
  CFTypeID v8;
  const __CFData *v9;
  const __CFData *v10;
  CFTypeID v11;
  int v12;
  const UInt8 *BytePtr;
  char v14;
  uint64_t result;
  int v16;
  __int16 v17;

  v17 = 0;
  v16 = 0;
  if (a1 && a2 && a3)
  {
    Value = (const __CFDictionary *)CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA2600]);
    if (!Value)
    {
      v12 = 0;
      v14 = 0;
      goto LABEL_18;
    }
    if (FigCFDictionaryGetIntIfPresent())
    {
      if (FigCFDictionaryGetIntIfPresent())
      {
        if (FigCFDictionaryGetIntIfPresent())
        {
          if (FigCFDictionaryGetIntIfPresent())
          {
            v6 = (const __CFData *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA2390]);
            if (v6)
            {
              v7 = v6;
              v8 = CFGetTypeID(v6);
              if (v8 == CFDataGetTypeID() && CFDataGetLength(v7) == 4)
              {
                v9 = (const __CFData *)CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CA2380]);
                if (v9)
                {
                  v10 = v9;
                  v11 = CFGetTypeID(v9);
                  if (v11 == CFDataGetTypeID()
                    && CFDataGetLength(v10) == 6
                    && FigCFDictionaryGetIntIfPresent())
                  {
                    LOBYTE(Value) = 0;
                    v12 = *(_DWORD *)CFDataGetBytePtr(v7);
                    BytePtr = CFDataGetBytePtr(v10);
                    v16 = *(_DWORD *)BytePtr;
                    v17 = *((_WORD *)BytePtr + 2);
                    v14 = 1;
LABEL_18:
                    result = 0;
                    *(_BYTE *)a2 = (_BYTE)Value;
                    *(_BYTE *)(a2 + 1) = 0;
                    *(_DWORD *)(a2 + 2) = v12;
                    *(_DWORD *)(a2 + 6) = v16;
                    *(_WORD *)(a2 + 10) = v17;
                    *(_BYTE *)(a2 + 12) = 0;
                    *(_DWORD *)(a2 + 13) = 0;
                    *(_DWORD *)(a2 + 16) = 0;
                    *a3 = v14;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigMetricErrorEventDeserializeAndCopy(void *a1, uint64_t a2)
{
  _BOOL8 v3;
  uint64_t CMTime;
  uint64_t AllocatorForMedia;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  __int128 v13;
  uint64_t v14;

  v13 = *MEMORY[0x1E0CA2E18];
  v14 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  v11 = 0;
  cf = 0;
  v10 = 0;
  if (a1 && a2)
  {
    v3 = xpc_dictionary_get_BOOL(a1, "DidRecover");
    CMTime = FigXPCMessageGetCMTime();
    if (!(_DWORD)CMTime)
    {
      CMTime = FigXPCMessageCopyCFDate();
      if (!(_DWORD)CMTime)
      {
        CMTime = FigXPCMessageCopyCFString();
        if (!(_DWORD)CMTime)
        {
          CMTime = FigXPCMessageCopyCFError();
          if (!(_DWORD)CMTime)
          {
            AllocatorForMedia = FigGetAllocatorForMedia();
            v8 = v13;
            v9 = v14;
            CMTime = FigMetricErrorEventCreate(AllocatorForMedia, &v8, cf, v11, v3, v10, a2);
          }
        }
      }
    }
  }
  else
  {
    CMTime = FigSignalErrorAt();
  }
  v6 = CMTime;
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  return v6;
}

uint64_t FigMetricErrorEventCreate(const __CFAllocator *a1, __int128 *a2, const void *a3, const void *a4, char a5, const void *a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t DerivedStorage;
  uint64_t v16;
  void *v17;
  CFAbsoluteTime Current;
  __int128 v19;
  CFTypeRef v20;
  CFTypeRef v21;

  if (!a7)
    return FigSignalErrorAt();
  FigMetricEventGetClassID();
  v14 = CMDerivedObjectCreate();
  if (!(_DWORD)v14)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    v16 = FigSimpleMutexCreate();
    *(_QWORD *)(DerivedStorage + 72) = v16;
    if (v16)
    {
      *(_BYTE *)DerivedStorage = 1;
      *(_QWORD *)(DerivedStorage + 8) = 12;
      if (a3)
      {
        v17 = (void *)CFRetain(a3);
      }
      else
      {
        Current = CFAbsoluteTimeGetCurrent();
        v17 = CFDateCreate(a1, Current);
      }
      *(_QWORD *)(DerivedStorage + 16) = v17;
      v19 = *a2;
      *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(DerivedStorage + 32) = v19;
      if (a4)
        v20 = CFRetain(a4);
      else
        v20 = 0;
      *(_QWORD *)(DerivedStorage + 24) = v20;
      if (a6)
        v21 = CFRetain(a6);
      else
        v21 = 0;
      *(_QWORD *)(DerivedStorage + 64) = v21;
      *(_BYTE *)(DerivedStorage + 56) = a5;
      v14 = FigMetricEventClassInstallEventDeserializeHandler();
      if (!(_DWORD)v14)
        *a7 = 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return v14;
}

uint64_t mee_finalize()
{
  _QWORD *DerivedStorage;
  const void *v1;
  const void *v2;
  const void *v3;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = (const void *)DerivedStorage[8];
  if (v1)
    CFRelease(v1);
  v2 = (const void *)DerivedStorage[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)DerivedStorage[3];
  if (v3)
    CFRelease(v3);
  return FigSimpleMutexDestroy();
}

CFStringRef mee_copyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigMetricErrorEvent %p]"), a1);
}

void mee_setImmutable()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  *(_BYTE *)DerivedStorage = 0;
  JUMPOUT(0x19402EF04);
}

uint64_t mee_isMutable()
{
  unsigned __int8 *DerivedStorage;
  uint64_t v1;

  DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*((_QWORD *)DerivedStorage + 9));
  v1 = *DerivedStorage;
  MEMORY[0x19402EF04](*((_QWORD *)DerivedStorage + 9));
  return v1;
}

uint64_t mee_getMetricEventID()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t mee_getDate()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef mee_copySessionID()
{
  uint64_t DerivedStorage;
  const void *v1;
  CFTypeRef v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
    v2 = CFRetain(v1);
  else
    v2 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  return v2;
}

uint64_t mee_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;
  uint64_t v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = *(const void **)(DerivedStorage + 24);
    *(_QWORD *)(DerivedStorage + 24) = a2;
    if (a2)
      CFRetain(a2);
    if (v4)
      CFRelease(v4);
    v5 = 0;
  }
  else
  {
    v5 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  return v5;
}

void mee_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(DerivedStorage + 48);
  JUMPOUT(0x19402EF04);
}

uint64_t mee_setMediaTime(uint64_t a1, __int128 *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  __int128 v5;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 72));
  if (*(_BYTE *)DerivedStorage)
  {
    v4 = 0;
    v5 = *a2;
    *(_QWORD *)(DerivedStorage + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    v4 = FigSignalErrorAt();
  }
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 72));
  return v4;
}

uint64_t mee_serialize(uint64_t a1, void *a2)
{
  uint64_t (*v4)(uint64_t);
  int64_t v5;
  void (*v6)(__int128 *__return_ptr, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  const void *v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  unsigned int (*v13)(uint64_t);
  BOOL v14;
  __int128 v16;
  uint64_t v17;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  v4 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (v4)
    v5 = v4(a1);
  else
    v5 = -12782;
  xpc_dictionary_set_int64(a2, "EventID", v5);
  v6 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v6)
  {
    v6(&v16, a1);
  }
  else
  {
    v16 = *MEMORY[0x1E0CA2E18];
    v17 = *(_QWORD *)(MEMORY[0x1E0CA2E18] + 16);
  }
  v7 = FigXPCMessageSetCMTime();
  if ((_DWORD)v7)
    return v7;
  v8 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (v8)
    v8(a1);
  v7 = FigXPCMessageSetCFDate();
  if ((_DWORD)v7)
    return v7;
  v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
  if (v9)
    v10 = (const void *)v9(a1);
  else
    v10 = 0;
  v11 = FigXPCMessageSetCFString();
  if (!(_DWORD)v11)
  {
    v12 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 8);
    if (v12)
      v12(a1);
    FigXPCMessageSetCFError();
    v13 = *(unsigned int (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 24) + 16);
    if (v13)
      v14 = v13(a1) != 0;
    else
      v14 = 0;
    xpc_dictionary_set_BOOL(a2, "DidRecover", v14);
  }
  if (v10)
    CFRelease(v10);
  return v11;
}

uint64_t mee_getError()
{
  return *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 64);
}

uint64_t mee_didRecover()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 56);
}

uint64_t FigClosedCaptionGetClosedCaptionTypeAndChannelNumber(const __CFString *a1, int *a2, SInt32 *a3)
{
  int v6;
  const __CFString *v7;
  _BOOL4 HasPrefix;
  CFIndex Length;
  CFIndex v10;
  const __CFString *v11;
  SInt32 IntValue;
  int v13;
  uint64_t v15;
  CFRange v17;

  if (!a1)
    return 0;
  v6 = 1681272888;
  v7 = CFSTR("CC");
  HasPrefix = closedCaptionHasPrefix(a1, CFSTR("CC"));
  if (!HasPrefix)
  {
    v7 = CFSTR("Service");
    if (!closedCaptionHasPrefix(a1, CFSTR("Service")))
      return 0;
    v6 = 1681338424;
  }
  Length = CFStringGetLength(v7);
  if (!Length)
    return 0;
  v10 = Length;
  v17.length = CFStringGetLength(a1) - Length;
  v17.location = v10;
  v11 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v17);
  IntValue = CFStringGetIntValue(v11);
  if (HasPrefix)
    v13 = 4;
  else
    v13 = 63;
  if (IntValue < 1 || v13 < IntValue)
  {
    v15 = 0;
    if (!v11)
      return v15;
    goto LABEL_22;
  }
  if (a2)
    *a2 = v6;
  if (a3)
    *a3 = IntValue;
  v15 = 1;
  if (v11)
LABEL_22:
    CFRelease(v11);
  return v15;
}

BOOL closedCaptionHasPrefix(const __CFString *a1, const __CFString *a2)
{
  CFIndex Length;
  _BOOL8 v5;
  const __CFString *v6;
  CFRange v8;

  Length = CFStringGetLength(a1);
  if (Length < CFStringGetLength(a2))
    return 0;
  v8.length = CFStringGetLength(a2);
  v8.location = 0;
  v6 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a1, v8);
  v5 = CFStringCompare(v6, a2, 1uLL) == kCFCompareEqualTo;
  if (v6)
    CFRelease(v6);
  return v5;
}

uint64_t FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(const opaqueCMFormatDescription *a1, unsigned int *a2, unsigned int *a3)
{
  const __CFDictionary *Extension;
  const __CFDictionary *v6;
  CFTypeID v7;
  const __CFData *Value;
  const __CFData *v9;
  CFTypeID v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  UInt8 buffer[8];
  CFRange v15;
  CFRange v16;

  *(_QWORD *)buffer = 0;
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E0CA2240]);
  if (!Extension)
    goto LABEL_10;
  v6 = Extension;
  v7 = CFGetTypeID(Extension);
  if (v7 != CFDictionaryGetTypeID())
    return 4294950853;
  Value = (const __CFData *)CFDictionaryGetValue(v6, CFSTR("cccc"));
  if (!Value)
  {
LABEL_10:
    v12 = 0;
    v11 = 0;
    goto LABEL_11;
  }
  v9 = Value;
  v10 = CFGetTypeID(Value);
  if (v10 != CFDataGetTypeID() || CFDataGetLength(v9) != 8)
    return 4294950853;
  v15.location = 0;
  v15.length = 4;
  CFDataGetBytes(v9, v15, &buffer[4]);
  v16.location = 4;
  v16.length = 4;
  CFDataGetBytes(v9, v16, buffer);
  v11 = bswap32(*(unsigned int *)&buffer[4]);
  v12 = bswap32(*(unsigned int *)buffer);
LABEL_11:
  result = 0;
  *a2 = v11;
  *a3 = v12;
  return result;
}

uint64_t FigClosedCaptionCreateClosedCaptionChannelStringFromFormatDescription(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, CFStringRef *a3)
{
  uint64_t result;
  const __CFString *v6;
  signed int v7;
  CFStringRef v8;
  int v9;
  unsigned int v10;

  v10 = 0;
  v9 = 0;
  if (!a2 || !a3)
    return FigSignalErrorAt();
  result = FigClosedCaptionGetClosedCaptionServiceFormatAndServiceIndexFromFormatDescription(a2, &v10, (unsigned int *)&v9);
  if (!(_DWORD)result)
  {
    switch(v10)
    {
      case 0u:
        goto LABEL_12;
      case 0x64363038u:
        v6 = CFSTR("CC");
        break;
      case 0x64373038u:
        v6 = CFSTR("Service");
        break;
      default:
        return 4294950853;
    }
    if (!v9)
    {
LABEL_12:
      v8 = 0;
LABEL_18:
      result = 0;
      *a3 = v8;
      return result;
    }
    if (v10 == 1681272888)
      v7 = 4;
    else
      v7 = 63;
    result = 4294950853;
    if (v9 >= 1 && v7 >= v9)
    {
      v8 = CFStringCreateWithFormat(a1, 0, CFSTR("%@%d"), v6, v9);
      goto LABEL_18;
    }
  }
  return result;
}

__n128 FigCaptionLayoutClearMAXCaptionSettings(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  __n128 result;

  v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 8) = 0;
  }
  v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v10 = *(const void **)(a1 + 72);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v11 = *(const void **)(a1 + 80);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v12 = *(const void **)(a1 + 88);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v13 = *(const void **)(a1 + 96);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

void FigCaptionLayoutCopyMAXCaptionSystemSettings(uint64_t a1)
{
  CGColorRef v2;
  CGFloat WindowRoundedCornerRadius;
  CTFontDescriptorRef v4;
  CTFontDescriptorRef v5;
  CTFontDescriptorRef v6;
  CTFontDescriptorRef v7;
  CTFontDescriptorRef v8;
  CTFontDescriptorRef v9;
  CTFontDescriptorRef v10;
  CGFloat ForegroundOpacity;
  CGFloat BackgroundOpacity;
  CGFloat WindowOpacity;
  CGFloat RelativeCharacterSize;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  MACaptionAppearanceBehavior v27;
  uint64_t v28;
  MACaptionAppearanceBehavior v29;
  MACaptionAppearanceBehavior v30;
  MACaptionAppearanceTextEdgeStyle TextEdgeStyle;
  CTFontDescriptorRef v32;
  CGColorRef v33;
  CFTypeRef v34;
  CGColorRef cf;
  MACaptionAppearanceBehavior v36;
  MACaptionAppearanceBehavior v37;
  MACaptionAppearanceBehavior v38;
  MACaptionAppearanceBehavior v39;
  MACaptionAppearanceBehavior v40;
  uint64_t v41;
  MACaptionAppearanceBehavior v42;
  MACaptionAppearanceBehavior behavior[2];

  v42 = kMACaptionAppearanceBehaviorUseValue;
  behavior[0] = kMACaptionAppearanceBehaviorUseValue;
  v40 = kMACaptionAppearanceBehaviorUseValue;
  v41 = 1;
  v38 = kMACaptionAppearanceBehaviorUseValue;
  v39 = kMACaptionAppearanceBehaviorUseValue;
  v36 = kMACaptionAppearanceBehaviorUseValue;
  v37 = kMACaptionAppearanceBehaviorUseValue;
  v2 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, behavior);
  cf = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, &v42);
  v34 = (CFTypeRef)MACaptionAppearanceCopyStrokeColor();
  v33 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, &v40);
  WindowRoundedCornerRadius = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, 0);
  v4 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleDefault);
  v32 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleMonospacedWithSerif);
  v5 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleProportionalWithSerif);
  v6 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleMonospacedWithoutSerif);
  v7 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleProportionalWithoutSerif);
  v8 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleCasual);
  v9 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleCursive);
  v10 = MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, 0, kMACaptionAppearanceFontStyleSmallCapital);
  ForegroundOpacity = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, 0);
  BackgroundOpacity = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, &v39);
  WindowOpacity = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, &v38);
  RelativeCharacterSize = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, &v37);
  TextEdgeStyle = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &v36);
  v15 = *(const void **)a1;
  *(_QWORD *)a1 = v2;
  if (v2)
    CFRetain(v2);
  if (v15)
    CFRelease(v15);
  v16 = *(const void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = cf;
  if (cf)
    CFRetain(cf);
  if (v16)
    CFRelease(v16);
  v17 = *(const void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v34;
  if (v34)
    CFRetain(v34);
  if (v17)
    CFRelease(v17);
  v18 = *(const void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v33;
  if (v33)
    CFRetain(v33);
  if (v18)
    CFRelease(v18);
  v19 = *(const void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
    CFRetain(v4);
  if (v19)
    CFRelease(v19);
  v20 = *(const void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v32;
  if (v32)
    CFRetain(v32);
  if (v20)
    CFRelease(v20);
  v21 = *(const void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  if (v5)
    CFRetain(v5);
  if (v21)
    CFRelease(v21);
  v22 = *(const void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
    CFRetain(v6);
  if (v22)
    CFRelease(v22);
  v23 = *(const void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v7)
    CFRetain(v7);
  if (v23)
    CFRelease(v23);
  v24 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  if (v8)
    CFRetain(v8);
  if (v24)
    CFRelease(v24);
  v25 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v9;
  if (v9)
    CFRetain(v9);
  if (v25)
    CFRelease(v25);
  v26 = *(const void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  if (v10)
    CFRetain(v10);
  if (v26)
    CFRelease(v26);
  *(CGFloat *)(a1 + 32) = WindowRoundedCornerRadius;
  *(CGFloat *)(a1 + 120) = BackgroundOpacity;
  *(CGFloat *)(a1 + 128) = WindowOpacity;
  *(CGFloat *)(a1 + 104) = RelativeCharacterSize;
  *(CGFloat *)(a1 + 112) = ForegroundOpacity;
  v27 = behavior[0];
  *(_QWORD *)(a1 + 136) = TextEdgeStyle;
  *(_QWORD *)(a1 + 144) = v27;
  v28 = v41;
  *(_QWORD *)(a1 + 152) = v42;
  *(_QWORD *)(a1 + 160) = v28;
  v29 = v40;
  *(_QWORD *)(a1 + 168) = v39;
  *(_QWORD *)(a1 + 176) = v29;
  v30 = v37;
  *(_QWORD *)(a1 + 184) = v38;
  *(_QWORD *)(a1 + 192) = v30;
  *(_QWORD *)(a1 + 200) = v36;
  if (v4)
    CFRelease(v4);
  if (v32)
    CFRelease(v32);
  if (v5)
    CFRelease(v5);
  if (v6)
    CFRelease(v6);
  if (v7)
    CFRelease(v7);
  if (v8)
    CFRelease(v8);
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v33)
    CFRelease(v33);
  if (v34)
    CFRelease(v34);
  if (cf)
    CFRelease(cf);
  if (v2)
    CFRelease(v2);
}

int64x2_t FigCaptionLayoutGetMAXSettingsForPreferringContentAsAuthored@<Q0>(uint64_t a1@<X8>)
{
  int64x2_t result;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 104) = _Q0;
  *(_OWORD *)(a1 + 120) = _Q0;
  *(_OWORD *)(a1 + 136) = xmmword_1932FAB00;
  result = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 152) = result;
  *(int64x2_t *)(a1 + 168) = result;
  *(int64x2_t *)(a1 + 184) = result;
  *(_QWORD *)(a1 + 200) = 1;
  return result;
}

double FigCaptionLayoutCellSizeForRect(int a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v5 = 16.0;
  if (a1 != 1)
    v5 = 4.0;
  v6 = 9.0;
  if (a1 != 1)
    v6 = 3.0;
  v7 = a5 * v5 / v6;
  if (v7 > a4)
    v7 = v5 * (a4 * v6 / v5) / v6;
  v8 = v7 * 0.800000012;
  v9 = 32.0;
  if (a1 == 1)
    v9 = 42.0;
  return v8 / v9;
}

CTFontRef FigCaptionLayoutCreateCTFontWithOptions(__CFString *a1, int a2, CGFloat a3)
{
  CTFontSymbolicTraits v4;
  void *v5;
  __CFString *v6;
  const __CFDictionary *v7;
  const __CTFontDescriptor *v8;
  const __CTFontDescriptor *CopyWithSymbolicTraits;
  const __CTFontDescriptor *v10;
  CTFontRef v11;
  const __CTFontDescriptor *v12;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  v4 = a2 != 0;
  v5 = (void *)*MEMORY[0x1E0CA8380];
  v6 = CFSTR("CourierNewPSMT");
  if (a1)
    v6 = a1;
  values = v6;
  keys[0] = v5;
  v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = CTFontDescriptorCreateWithAttributes(v7);
  CopyWithSymbolicTraits = CTFontDescriptorCreateCopyWithSymbolicTraits(v8, v4, 3u);
  if (!CopyWithSymbolicTraits)
  {
    if (!v8)
    {
      v11 = CTFontCreateWithFontDescriptor(0, a3, 0);
      if (!v7)
        return v11;
      goto LABEL_11;
    }
    v12 = (const __CTFontDescriptor *)CFRetain(v8);
    v11 = CTFontCreateWithFontDescriptor(v12, a3, 0);
    if (v12)
      CFRelease(v12);
    goto LABEL_9;
  }
  v10 = CopyWithSymbolicTraits;
  v11 = CTFontCreateWithFontDescriptor(CopyWithSymbolicTraits, a3, 0);
  CFRelease(v10);
  if (v8)
LABEL_9:
    CFRelease(v8);
  if (v7)
LABEL_11:
    CFRelease(v7);
  return v11;
}

CGFloat FigCaptionLayoutStandardCaptionRect(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  double Width;
  CGFloat v16;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  v9 = 16.0;
  if (a1 == 1)
  {
    v10 = 9.0;
  }
  else
  {
    v9 = 4.0;
    v10 = 3.0;
  }
  v11 = a5 * v9 / v10;
  v12 = a5;
  if (v11 > a4)
  {
    v12 = a4 * v10 / v9;
    v11 = v9 * v12 / v10;
  }
  v13 = v12 * 0.800000012;
  v14 = v11 * 0.800000012;
  v18.origin.x = a2;
  v18.origin.y = a3;
  v18.size.width = a4;
  v18.size.height = a5;
  Width = CGRectGetWidth(v18);
  v19.origin.x = a2;
  v19.origin.y = a3;
  v19.size.width = v14;
  v19.size.height = v13;
  v16 = a2 + (Width - CGRectGetWidth(v19)) * 0.5;
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  CGRectGetHeight(v20);
  v21.origin.x = v16;
  v21.origin.y = a3;
  v21.size.width = v14;
  v21.size.height = v13;
  CGRectGetHeight(v21);
  return v16;
}

double FigCaptionLayoutExpandedCaptionRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGFloat v8;
  CGFloat v9;
  double result;
  CGRect v11;
  CGRect v12;

  v8 = CGRectGetWidth(*(CGRect *)&a1) * 0.1;
  v11.origin.x = a1;
  v11.origin.y = a2;
  v11.size.width = a3;
  v11.size.height = a4;
  v9 = CGRectGetHeight(v11) * 0.1;
  v12.origin.x = a1;
  v12.origin.y = a2;
  v12.size.width = a3;
  v12.size.height = a4;
  *(_QWORD *)&result = (unint64_t)CGRectInset(v12, v8, v9);
  return result;
}

uint64_t cclayout_printCFDataRects(const void *a1)
{
  CFTypeID v2;
  CFIndex Count;
  uint64_t result;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v7;
  const UInt8 *BytePtr;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  FILE *v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  v2 = CFGetTypeID(a1);
  if (v2 == CFArrayGetTypeID())
  {
    if (a1)
    {
      Count = CFArrayGetCount((CFArrayRef)a1);
      result = fprintf((FILE *)*MEMORY[0x1E0C80C20], "numValues %d\n", Count);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
          result = cclayout_printCFDataRects(ValueAtIndex);
        }
      }
    }
    else
    {
      return fprintf((FILE *)*MEMORY[0x1E0C80C20], "numValues %d\n");
    }
  }
  else
  {
    v7 = CFGetTypeID(a1);
    result = CFDataGetTypeID();
    if (v7 == result)
    {
      BytePtr = CFDataGetBytePtr((CFDataRef)a1);
      v9 = *(double *)BytePtr;
      v10 = *((double *)BytePtr + 1);
      v11 = *((double *)BytePtr + 2);
      v12 = *((double *)BytePtr + 3);
      v13 = (FILE *)*MEMORY[0x1E0C80C20];
      v14.origin.x = *(CGFloat *)BytePtr;
      v14.origin.y = v10;
      v14.size.width = v11;
      v14.size.height = v12;
      CGRectGetMinX(v14);
      v15.origin.x = v9;
      v15.origin.y = v10;
      v15.size.width = v11;
      v15.size.height = v12;
      CGRectGetMinY(v15);
      v16.origin.x = v9;
      v16.origin.y = v10;
      v16.size.width = v11;
      v16.size.height = v12;
      CGRectGetMaxX(v16);
      v17.origin.x = v9;
      v17.origin.y = v10;
      v17.size.width = v11;
      v17.size.height = v12;
      CGRectGetMaxY(v17);
      v18.origin.x = v9;
      v18.origin.y = v10;
      v18.size.width = v11;
      v18.size.height = v12;
      CGRectGetWidth(v18);
      v19.origin.x = v9;
      v19.origin.y = v10;
      v19.size.width = v11;
      v19.size.height = v12;
      CGRectGetHeight(v19);
      return fprintf(v13, "Rect minX:%f minY:%f maxX:%f maxY:%f width:%f height:%f\n");
    }
  }
  return result;
}

CFAttributedStringRef FigCaptionLayoutCreateJoinedStringFromElementWithSeparator(CFArrayRef theArray, const __CFString *a2)
{
  const __CFArray *v3;
  CFIndex Count;
  const __CFAllocator *v5;
  CFIndex v6;
  const __CFArray *ValueAtIndex;
  const __CFArray *v8;
  CFIndex v9;
  __CFAttributedString *Mutable;
  CFIndex i;
  const __CFDictionary *v12;
  const __CFAttributedString *Value;
  const __CFString *String;
  CFIndex Length;
  const __CFCharacterSet *Predefined;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v19;
  CFIndex v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex v23;
  UniChar v24;
  CFIndex v25;
  uint64_t v27;
  uint64_t v28;
  CFIndex v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex v32;
  CFIndex v33;
  uint64_t v34;
  uint64_t v35;
  CFIndex v36;
  UniChar v37;
  CFIndex v38;
  uint64_t v40;
  CFIndex v41;
  uint64_t v42;
  uint64_t v43;
  const __CFAttributedString *v44;
  const __CFDictionary *Attributes;
  const __CFAttributedString *v46;
  __CFAttributedString *v47;
  __CFAttributedString *v48;
  CFAttributedStringRef v49;
  const __CFArray *v51;
  const __CFString *v52;
  CFIndex v53;
  const __CFAllocator *alloc;
  CFAttributedStringRef aStr;
  UniChar buffer[8];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  CFStringRef theString;
  const UniChar *v65;
  const char *v66;
  uint64_t v67;
  CFIndex v68;
  CFIndex v69;
  CFIndex v70;
  CFRange v71;
  CFRange v72;
  CFRange v73;
  CFRange v74;
  CFRange v75;
  CFRange v76;

  v3 = theArray;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  aStr = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFAttributedStringBeginEditing(aStr);
  if (Count >= 1)
  {
    v6 = 0;
    v53 = Count;
    v52 = a2;
    v51 = v3;
    alloc = v5;
    do
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v3, v6);
      v8 = ValueAtIndex;
      if (ValueAtIndex)
        v9 = CFArrayGetCount(ValueAtIndex);
      else
        v9 = 0;
      Mutable = CFAttributedStringCreateMutable(v5, 0);
      CFAttributedStringBeginEditing(Mutable);
      if (v9 >= 1)
      {
        for (i = 0; i != v9; ++i)
        {
          v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, i);
          Value = (const __CFAttributedString *)CFDictionaryGetValue(v12, CFSTR("S"));
          v71.location = CFAttributedStringGetLength(Mutable);
          v71.length = 0;
          CFAttributedStringReplaceAttributedString(Mutable, v71, Value);
        }
      }
      CFAttributedStringEndEditing(Mutable);
      String = CFAttributedStringGetString(Mutable);
      Length = CFStringGetLength(String);
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
      theString = String;
      v67 = 0;
      v68 = Length;
      CharactersPtr = CFStringGetCharactersPtr(String);
      CStringPtr = 0;
      v65 = CharactersPtr;
      if (!CharactersPtr)
        CStringPtr = CFStringGetCStringPtr(String, 0x600u);
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      *(_OWORD *)buffer = 0u;
      v57 = 0u;
      v66 = CStringPtr;
      v69 = 0;
      v70 = 0;
      if (Length < 1)
      {
        v20 = 0;
        v31 = 0;
      }
      else
      {
        v19 = 0;
        v20 = 0;
        v21 = 64;
        while (1)
        {
          v22 = (unint64_t)v20 >= 4 ? 4 : v20;
          v23 = v68;
          if (v68 <= v20)
          {
            v24 = 0;
          }
          else if (v65)
          {
            v24 = v65[v20 + v67];
          }
          else if (v66)
          {
            v24 = v66[v67 + v20];
          }
          else
          {
            v25 = v69;
            if (v70 <= v20 || v69 > v20)
            {
              v27 = v22 + v19;
              v28 = v21 - v22;
              v29 = v20 - v22;
              v30 = v29 + 64;
              if (v29 + 64 >= v68)
                v30 = v68;
              v69 = v29;
              v70 = v30;
              if (v68 >= v28)
                v23 = v28;
              v72.length = v23 + v27;
              v72.location = v29 + v67;
              CFStringGetCharacters(theString, v72, buffer);
              v25 = v69;
            }
            v24 = buffer[v20 - v25];
          }
          if (!CFCharacterSetIsCharacterMember(Predefined, v24))
            break;
          ++v20;
          --v19;
          ++v21;
          if (Length == v20)
            goto LABEL_40;
        }
        if (Length == v20)
        {
LABEL_40:
          v31 = 0;
          v20 = Length;
          goto LABEL_65;
        }
        v31 = 0;
        v32 = -Length;
        v33 = Length + 64;
        v34 = Length;
        while (1)
        {
          v35 = (unint64_t)v34 >= 5 ? 5 : v34;
          v36 = v68;
          if (v68 >= v34)
          {
            if (v65)
            {
              v37 = v65[v34 - 1 + v67];
            }
            else if (v66)
            {
              v37 = v66[v67 - 1 + v34];
            }
            else
            {
              v38 = v69;
              if (v70 < v34 || v69 >= v34)
              {
                v40 = v35 + v32;
                v41 = v33 - v35;
                v42 = v34 - v35;
                v43 = v42 + 64;
                if (v42 + 64 >= v68)
                  v43 = v68;
                v69 = v42;
                v70 = v43;
                if (v68 >= v41)
                  v36 = v41;
                v73.length = v36 + v40;
                v73.location = v42 + v67;
                CFStringGetCharacters(theString, v73, buffer);
                v38 = v69;
              }
              v37 = buffer[v34 - 1 - v38];
            }
          }
          else
          {
            v37 = 0;
          }
          if (!CFCharacterSetIsCharacterMember(Predefined, v37))
            break;
          ++v31;
          ++v32;
          --v33;
          if (!--v34)
          {
            v31 = Length;
            break;
          }
        }
        v3 = v51;
        a2 = v52;
      }
LABEL_65:
      v76.length = Length - (v20 + v31);
      v5 = alloc;
      v76.location = v20;
      v44 = CFAttributedStringCreateWithSubstring(alloc, Mutable, v76);
      if (v6)
      {
        Attributes = CFAttributedStringGetAttributes(Mutable, 0, 0);
        v46 = CFAttributedStringCreate(alloc, a2, Attributes);
        v47 = aStr;
        v74.location = CFAttributedStringGetLength(aStr);
        v74.length = 0;
        CFAttributedStringReplaceAttributedString(v47, v74, v46);
        if (v46)
          CFRelease(v46);
      }
      v48 = aStr;
      v75.location = CFAttributedStringGetLength(aStr);
      v75.length = 0;
      CFAttributedStringReplaceAttributedString(v48, v75, v44);
      if (v44)
        CFRelease(v44);
      if (Mutable)
        CFRelease(Mutable);
      ++v6;
    }
    while (v6 != v53);
  }
  v49 = aStr;
  CFAttributedStringEndEditing(aStr);
  return v49;
}

CGFloat FigCaptionLayoutGetLineWidthWithRange(const __CTLine *a1, CFIndex a2, CFIndex a3)
{
  double OffsetForStringIndex;

  OffsetForStringIndex = CTLineGetOffsetForStringIndex(a1, a2, 0);
  return CTLineGetOffsetForStringIndex(a1, a3, 0) - OffsetForStringIndex;
}

uint64_t FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  const __CFArray *ValueAtIndex;
  const __CFArray *v9;
  CFIndex v10;
  CFIndex v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  const __CFAttributedString *Value;
  int Length;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v22;
  unsigned int v23;

  if (!a1)
    return 2;
  Count = CFArrayGetCount(a1);
  if (Count < 2)
    return 2;
  v3 = Count;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 7;
  do
  {
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, v4);
    if (ValueAtIndex)
    {
      v9 = ValueAtIndex;
      v10 = CFArrayGetCount(ValueAtIndex);
      if (v10)
      {
        v11 = v10;
        v12 = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, 0);
        v23 = 0;
        if (cclayout_getLocationFromCommandData(v12, &v23, 0))
        {
          v13 = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, v11 - 1);
          v22 = 0;
          if (cclayout_getLocationFromCommandData(v13, &v22, 0))
          {
            Value = (const __CFAttributedString *)CFDictionaryGetValue(v13, CFSTR("S"));
            Length = CFAttributedStringGetLength(Value);
            v16 = v23;
            v17 = (Length + v22 - 1);
            if (v4)
            {
              v18 = v7 & 0xFFFFFFFE;
              if ((_DWORD)v6 == v23)
                v18 = v7;
              if ((_DWORD)v5 == (_DWORD)v17)
                v7 = v18;
              else
                v7 = v18 & 0xFFFFFFFB;
            }
          }
          else
          {
            v16 = v6;
            v17 = v5;
          }
          v6 = v16;
          v5 = v17;
        }
      }
    }
    ++v4;
  }
  while (v3 != v4);
  v19 = v7 & 2;
  if ((v7 & 4) != 0)
  {
    v19 = 4;
    v20 = 2;
  }
  else
  {
    v20 = 1;
  }
  if ((v7 & 1) != 0)
    return v20;
  else
    return v19;
}

double FigCaptionLayoutGetBackgroundPathRectFromDictionary(const __CFDictionary *a1)
{
  __int128 v1;
  _OWORD v3[2];

  v1 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  v3[0] = *MEMORY[0x1E0C9D628];
  v3[1] = v1;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)cclayout_GetRectFromPathDictionaryApplier, v3);
  return *(double *)v3;
}

void cclayout_GetRectFromPathDictionaryApplier(int a1, CGPathRef path, CGRect *a3)
{
  CGRect BoundingBox;

  BoundingBox = CGPathGetBoundingBox(path);
  *a3 = CGRectUnion(*a3, BoundingBox);
}

__CFString *FigCaptionLayoutCopyEffectiveFontNamePlusInfoAndCreateElementGeometryArrays(const void *a1, int a2, const __CFArray *a3, const __CFArray *a4, int a5, CFTypeRef cf, const void *a7, int a8, double a9, double a10, double a11, double a12, uint64_t a13, const __CFArray *a14, uint64_t *a15, unsigned __int8 *a16, double *a17, _QWORD *a18, _QWORD *a19, __CFArray **a20,double *a21,double *a22)
{
  const __CTFont *v24;
  CFTypeRef v25;
  double v26;
  const __CFDictionary *ValueAtIndex;
  const __CFArray *Value;
  const __CFArray *v29;
  const __CFArray *v30;
  const __CFArray *v31;
  const __CFDictionary *v32;
  const __CFAttributedString *v33;
  const __CTFontDescriptor **v34;
  double v35;
  const __CTFontDescriptor *v36;
  __CFString *v37;
  const __CTFont *v38;
  const __CFAllocator **v39;
  double *v40;
  uint64_t v41;
  const __CFArray *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  const __CTFont *CTFontWithOptions;
  CTFontRef v51;
  CTFontSymbolicTraits SymbolicTraits;
  const __CFDictionary *v53;
  const __CFAttributedString *v54;
  const __CTLine *v55;
  const __CTFont *v56;
  int v57;
  BOOL v58;
  int v59;
  _BOOL4 v60;
  double v61;
  double v62;
  CGFloat v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  CFIndex Count;
  CFIndex v72;
  CFIndex v73;
  const __CFAllocator *v74;
  const CFArrayCallBacks *v75;
  CFIndex v76;
  int v77;
  const __CFDictionary *v78;
  const __CFArray *v79;
  CFIndex v80;
  const __CFArray *v81;
  CFIndex v82;
  const __CFArray *v83;
  uint64_t v84;
  CFMutableArrayRef v85;
  CFMutableArrayRef v86;
  CFIndex v87;
  const __CFAttributedString *v88;
  uint64_t Length;
  __CFAttributedString *MutableCopy;
  const __CFString *String;
  CFMutableStringRef v92;
  int v93;
  CFIndex v94;
  CFRange v95;
  CFIndex v96;
  int v97;
  unsigned int v98;
  BOOL v99;
  CFIndex v100;
  unsigned int v101;
  __CFAttributedString *v102;
  const __CFString *v103;
  __CFString *v104;
  CFIndex Limit;
  const __CFDictionary *AttributesAndLongestEffectiveRange;
  const __CFBoolean *v107;
  const __CFBoolean *v108;
  const void *v109;
  CGColor *DeviceRGBColor;
  CGColor *v111;
  double Alpha;
  double v113;
  CGColor *v114;
  CGColor *v115;
  CGColor *v116;
  double v117;
  CGColor *v118;
  CGColor *v119;
  CGColor *v120;
  void *CopyWithAlpha;
  int v122;
  unint64_t v123;
  CFNumberRef v124;
  CGColor *v125;
  CGColor *v126;
  CGFloat v127;
  void *v128;
  const void *v129;
  CGFloat v130;
  void *v131;
  const __CTFont *v132;
  CFNumberRef v133;
  CFNumberRef v134;
  uint64_t v135;
  CFNumberRef v136;
  CFNumberRef v137;
  CFIndex v138;
  const __CFDictionary *v139;
  CFIndex i;
  const __CFDictionary *v141;
  const __CFDictionary *v142;
  uint64_t v143;
  const __CFString *v144;
  const __CFString *v145;
  const __CFString *v146;
  CGColorSpace *v147;
  const void *v148;
  uint64_t j;
  double v150;
  CGColor *v151;
  CGColorRef v152;
  const void *v153;
  uint64_t k;
  double v155;
  CGColor *v156;
  CGColorRef v157;
  const __CFArray *Results;
  const __CFArray *v159;
  CGColorRef v160;
  CFIndex v161;
  CFRange *v162;
  CFRange *v163;
  BOOL v164;
  CGColor *v165;
  CGColor *v166;
  CGColor *v167;
  CGColor *v168;
  CFMutableArrayRef v169;
  int v170;
  int v171;
  int v172;
  int v173;
  double PixelRectForCellRect;
  double v175;
  CGFloat v176;
  double v177;
  CGFloat v178;
  double v179;
  CGFloat v180;
  double Width;
  double v182;
  double v183;
  const __CFArray *v184;
  CFIndex v185;
  CFIndex v186;
  CFIndex v187;
  const __CFArray *v188;
  const __CFArray *v189;
  CFIndex v190;
  CFIndex v191;
  CFIndex v192;
  CGFloat v193;
  double v194;
  double v195;
  double v196;
  const __CFDictionary *v197;
  const __CFAttributedString *v198;
  CFIndex v199;
  double MaxX;
  double v201;
  const __CFAttributedString *JoinedStringFromElementWithSeparator;
  const __CTLine *v203;
  uint64_t v204;
  const __CFCharacterSet *Predefined;
  __CFArray *v206;
  const __CFString *v207;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  CFIndex v210;
  CFIndex v211;
  uint64_t v212;
  const __CFAllocator *v213;
  CFIndex v214;
  CFRange *p_values;
  CFIndex v216;
  UniChar v217;
  double v218;
  CGFloat v219;
  CFIndex v220;
  CFAttributedStringRef v221;
  CFIndex v222;
  CFIndex v223;
  const __CFArray *v224;
  CGFloat v225;
  CGFloat v226;
  CGFloat v227;
  CGFloat v228;
  double v229;
  CGFloat v230;
  CGFloat v231;
  CGFloat v232;
  double OffsetForStringIndex;
  CFAttributedStringRef v235;
  double v236;
  CFAttributedStringRef v237;
  uint64_t v238;
  int v239;
  CFMutableArrayRef v240;
  CFIndex v241;
  uint64_t v242;
  const __CFAttributedString *v243;
  CFIndex v244;
  __CFArray *v245;
  const CFDictionaryKeyCallBacks *v246;
  const CFDictionaryValueCallBacks *v247;
  __CFDictionary *v248;
  CFMutableDictionaryRef v249;
  double v250;
  int v251;
  int v252;
  int v253;
  int v254;
  CGFloat MinY;
  double v256;
  CFIndex v257;
  CFIndex v258;
  double v259;
  CGFloat v260;
  double v261;
  CGFloat v262;
  __CFData *v263;
  const __CFArray *v264;
  double v265;
  CFIndex v266;
  __CFArray *v267;
  CFIndex n;
  const void *v269;
  __CFArray *v270;
  CFIndex v271;
  CFIndex v272;
  CFIndex v273;
  CFIndex v274;
  CFIndex v275;
  void *v276;
  CGFloat x;
  CGFloat y;
  CGFloat v279;
  CGFloat height;
  CFIndex v281;
  const void *v282;
  CFRange v283;
  CFIndex v284;
  CFIndex v285;
  CFIndex v286;
  int v287;
  const __CFArray *v288;
  const __CFArray *v289;
  CFIndex v290;
  __CFAttributedString *v291;
  double v292;
  CGColorSpace *v293;
  CFIndex ii;
  const void *v295;
  void *v296;
  double v297;
  double v298;
  CGFloat v299;
  double v300;
  CGFloat v301;
  double v302;
  CGFloat v303;
  double v304;
  double v305;
  double v306;
  double v307;
  CGFloat v308;
  CGFloat v309;
  CGFloat v310;
  CGFloat v311;
  double MaxY;
  double v313;
  double v314;
  double v315;
  double v316;
  CGFloat v317;
  double v318;
  CGFloat v319;
  double v320;
  CGFloat v321;
  double MidY;
  CGFloat v323;
  double v324;
  CGFloat v325;
  CGFloat v326;
  CGFloat v327;
  CGFloat v328;
  CGFloat v329;
  CGFloat v330;
  CGFloat v331;
  CGFloat v332;
  CGFloat v333;
  CGFloat v334;
  double v335;
  CGFloat v336;
  CGFloat v337;
  CGFloat v338;
  CGFloat v339;
  CGFloat v340;
  CGFloat v341;
  CGFloat v342;
  CGFloat v343;
  _BOOL4 v344;
  double v345;
  double v346;
  double v347;
  double v348;
  CFIndex v349;
  CFIndex v350;
  CFIndex v351;
  const __CFDictionary *v352;
  const __CFDictionary *v353;
  const __CFArray *v354;
  _OWORD *v355;
  CFIndex v356;
  CGFloat *BytePtr;
  double v358;
  CGFloat v359;
  const __CFDictionary *v360;
  CFIndex v361;
  double v362;
  const __CFArray *v363;
  const __CFArray *v364;
  double v365;
  double v366;
  CGFloat v367;
  CGFloat v368;
  CGFloat v369;
  CFIndex v370;
  char v371;
  double v372;
  double v373;
  CGFloat v374;
  const __CFDictionary *v375;
  CFIndex v376;
  uint64_t v377;
  double v378;
  CFIndex v379;
  const __CFDictionary *v380;
  const __CFBoolean *v381;
  const __CFAttributedString *v382;
  const __CTLine *v383;
  CFIndex v384;
  double v385;
  double v386;
  const __CFString *v387;
  int CharacterAtIndex;
  int v389;
  int v390;
  BOOL v391;
  const void *v392;
  double v393;
  double v394;
  int v395;
  CGFloat v396;
  double v397;
  const void *v398;
  uint64_t v399;
  CGFloat v400;
  CGFloat v401;
  CGSize v402;
  double v403;
  double v404;
  double v405;
  CFIndex jj;
  const __CFArray *v407;
  const __CFArray *v408;
  CGSize v409;
  __int128 v410;
  const UInt8 *v411;
  __int128 v412;
  CFTypeRef v413;
  CFTypeRef v414;
  CGColor *v415;
  double v416;
  void *v417;
  CFTypeRef v418;
  _BYTE *v419;
  double *v420;
  CFTypeRef v421;
  double v423;
  __CFString *v429;
  int v430;
  double TypographicBounds;
  double v432;
  int v433;
  CFIndex v434;
  double v437;
  double v438;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v440;
  double v441;
  double v442;
  double v443;
  double v444;
  uint64_t v445;
  CFIndex v446;
  double v447;
  double v448;
  CGFloat v449;
  CGFloat v450;
  double v451;
  CGFloat rect;
  double v453;
  double v454;
  double v455;
  double v456;
  uint64_t v457;
  const __CFArray *v458;
  __CFArray *v459;
  CFIndex v460;
  double v461;
  double v463;
  char *v464;
  const __CFArray *v465;
  __CFArray *v466;
  __CFDictionary *v467;
  CFMutableDictionaryRef v468;
  CFMutableDictionaryRef v469;
  char *v470;
  double v471;
  const __CFAttributedString *v472;
  double v473;
  double v474;
  __CFArray *v475;
  CFTypeRef v476;
  _OWORD *v477;
  char *v478;
  const __CFString *name;
  const __CFData *namea;
  const __CFDictionary *theDict;
  CFIndex theDicta;
  double theDictb;
  CFDictionaryRef theDictc[2];
  void *v485[2];
  CFMutableStringRef v486;
  double v487;
  CGColor *v488;
  const __CTFont *v489;
  const __CTFont *v490;
  CFIndex v491;
  double v492;
  CFIndex v493;
  CFIndex v494;
  const __CFArray *v495;
  CFIndex v496;
  CGFloat v497;
  CFIndex v498;
  CGFloat v499;
  CFTypeRef cfa;
  CGFloat v501;
  double v502;
  CFIndex v503;
  double v504;
  CGColorSpaceRef space;
  CGColorSpace *spacea;
  CGColorSpaceRef spaceb;
  CGColorSpaceRef spacec;
  const __CFArray *v509;
  CFIndex v510;
  CFIndex v511;
  CGFloat v512;
  uint64_t m;
  CGFloat v514;
  CFIndex v515;
  CGFloat v516;
  __CFAttributedString *aStr;
  CFMutableAttributedStringRef aStra;
  __CFArray *aStrb;
  CFMutableAttributedStringRef aStrc;
  const __CFAllocator *aStrd;
  const __CFAllocator *allocator;
  CGFloat allocatora;
  const __CFAttributedString *v524;
  CFAttributedStringRef v525;
  const __CFArray *v526;
  double v527;
  double MinX;
  double v529;
  const __CFAttributedString *v530;
  const __CFString *attrName;
  const void *attrNamea;
  CFStringRef attrNameb[2];
  _BYTE v534[32];
  uint64_t v535;
  CFRange longestEffectiveRange;
  double v537;
  int valuePtr;
  void *v539[2];
  __int128 v540;
  __int128 v541;
  __int128 v542;
  uint64_t v543;
  CFRange values;
  CGSize v545;
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  CFStringRef theString;
  CFRange *v553;
  const char *v554;
  uint64_t v555;
  CFIndex v556;
  CFIndex v557;
  CFIndex v558;
  uint64_t v559;
  CFRange v560;
  CFRange v561;
  CFRange v562;
  CFRange v563;
  CFRange v564;
  CFRange v565;
  CFRange v566;
  CFRange v567;
  CFRange v568;
  CFRange v569;
  CGRect v570;
  CGRect v571;
  CGRect v572;
  CGRect v573;
  CGRect v574;
  CGRect v575;
  CGRect v576;
  CGRect v577;
  CGRect v578;
  CGRect v579;
  CGRect v580;
  CGRect v581;
  CGRect v582;
  CGRect v583;
  CGRect v584;
  CGRect v585;
  CGRect v586;
  CGRect v587;
  CGRect v588;
  CGRect v589;
  CGRect v590;
  CGRect v591;
  CGRect v592;
  CGRect v593;
  CGRect v594;
  CGRect v595;
  CGRect v596;
  CGRect v597;
  CGRect v598;
  CGRect v599;
  CGRect v600;
  CGRect v601;
  CGRect v602;
  CGRect v603;
  CGRect v604;
  CGRect v605;
  CGRect v606;
  CGRect v607;
  CGRect v608;
  CGRect v609;

  v559 = *MEMORY[0x1E0C80C00];
  if (cf)
    v24 = (const __CTFont *)CFRetain(cf);
  else
    v24 = 0;
  if (a7)
    v25 = CFRetain(a7);
  else
    v25 = 0;
  if (a16)
    v430 = *a16;
  else
    v430 = 0;
  cfa = v25;
  if (a17)
    v26 = *a17;
  else
    v26 = 0.0;
  TypographicBounds = v26;
  LODWORD(values.location) = -1;
  LODWORD(v539[0]) = -1;
  if (a3
    && CFArrayGetCount(a3)
    && (ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, 0),
        (Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("R"))) != 0)
    && (v29 = Value, CFArrayGetCount(Value))
    && (v30 = (const __CFArray *)CFArrayGetValueAtIndex(v29, 0)) != 0
    && (v31 = v30, CFArrayGetCount(v30))
    && (v32 = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, 0)) != 0
    && (v33 = (const __CFAttributedString *)CFDictionaryGetValue(v32, CFSTR("S"))) != 0)
  {
    CFAttributedStringGetAttributes(v33, 0, 0);
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    switch(LODWORD(values.location))
    {
      case 1:
        v34 = (const __CTFontDescriptor **)(a13 + 48);
        break;
      case 2:
        v34 = (const __CTFontDescriptor **)(a13 + 56);
        break;
      case 3:
        v34 = (const __CTFontDescriptor **)(a13 + 64);
        break;
      case 4:
        v34 = (const __CTFontDescriptor **)(a13 + 72);
        break;
      case 5:
        v34 = (const __CTFontDescriptor **)(a13 + 80);
        break;
      case 6:
        v34 = (const __CTFontDescriptor **)(a13 + 88);
        break;
      case 7:
        v34 = (const __CTFontDescriptor **)(a13 + 96);
        break;
      default:
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    v34 = (const __CTFontDescriptor **)(a13 + 40);
  }
  v35 = *(double *)(a13 + 104);
  v36 = *v34;
  if (!a4 || !CFArrayGetCount(a4))
  {
    if (!v36)
      goto LABEL_26;
LABEL_29:
    v37 = (__CFString *)CTFontDescriptorCopyAttribute(v36, (CFStringRef)*MEMORY[0x1E0CA8380]);
    goto LABEL_30;
  }
  CFArrayGetValueAtIndex(a4, 0);
  FigCFDictionaryGetInt32IfPresent();
  if (v36)
    goto LABEL_29;
LABEL_26:
  if (!a1)
  {
    v429 = 0;
    goto LABEL_31;
  }
  v37 = (__CFString *)CFRetain(a1);
LABEL_30:
  v429 = v37;
LABEL_31:
  v38 = v24;
  v39 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  v40 = (double *)MEMORY[0x1E0C9D628];
  v41 = a13;
  if (v35 <= 0.0)
  {
    Mutable = 0;
    v440 = 0;
    v463 = *MEMORY[0x1E0C9D820];
    v447 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    v345 = 0.0;
    goto LABEL_418;
  }
  v42 = a14;
  *(double *)&v445 = FigCaptionLayoutCellSizeForRect(0, a9, a10, a11, a12);
  Mutable = 0;
  v440 = 0;
  v423 = v43 * 0.8;
  attrName = (const __CFString *)*MEMORY[0x1E0CA8550];
  v498 = *MEMORY[0x1E0CA86C0];
  v496 = *MEMORY[0x1E0CA8598];
  v494 = *MEMORY[0x1E0CA8588];
  name = (const __CFString *)*MEMORY[0x1E0C9DA10];
  v461 = v43;
  v44 = v43 * -0.5;
  v453 = v40[3];
  v454 = v40[2];
  v45 = -1.0;
  allocator = *v39;
  v491 = *MEMORY[0x1E0CA8188];
  v46 = v35;
  v448 = v44;
  v455 = v40[1];
  v456 = *v40;
  do
  {
    v47 = floor(v46 * v423);
    if (v47 == 0.0)
      v48 = 1.0;
    else
      v48 = v47;
    v49 = v46;
    if (!v38)
      goto LABEL_39;
    if (CTFontGetSize(v38) != v48 || !FigCFEqual())
    {
      CFRelease(v38);
LABEL_39:
      if (cfa)
        CFRelease(cfa);
      CTFontWithOptions = FigCaptionLayoutCreateCTFontWithOptions(v429, 0, v48);
      values.location = (CFIndex)CTFontWithOptions;
      v51 = FigCaptionLayoutCreateCTFontWithOptions(v429, 1, v48);
      SymbolicTraits = CTFontGetSymbolicTraits(CTFontWithOptions);
      v53 = CFDictionaryCreate(allocator, MEMORY[0x1E0CA8188], (const void **)&values, 1, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
      v54 = CFAttributedStringCreate(allocator, CFSTR(" "), v53);
      v55 = CTLineCreateWithAttributedString(v54);
      TypographicBounds = CTLineGetTypographicBounds(v55, 0, 0, 0);
      if (v55)
        CFRelease(v55);
      if (v54)
        CFRelease(v54);
      if (v53)
        CFRelease(v53);
      v41 = a13;
      if (values.location)
      {
        v56 = (const __CTFont *)CFRetain((CFTypeRef)values.location);
        if (v51)
        {
LABEL_49:
          cfa = CFRetain(v51);
LABEL_52:
          if (values.location)
            CFRelease((CFTypeRef)values.location);
          if (v51)
            CFRelease(v51);
          v57 = (SymbolicTraits >> 10) & 1;
          v38 = v56;
          goto LABEL_57;
        }
      }
      else
      {
        v56 = 0;
        if (v51)
          goto LABEL_49;
      }
      cfa = 0;
      goto LABEL_52;
    }
    v57 = v430;
LABEL_57:
    v430 = v57;
    if (a8)
      v58 = 1;
    else
      v58 = v57 == 0;
    v59 = !v58;
    v60 = *(double *)&v445 > TypographicBounds;
    v432 = v49;
    v61 = fmin(v49, 1.0) * *(double *)&v445;
    if ((v59 & v60) != 0)
      v62 = v61 - TypographicBounds;
    else
      v62 = 0.0;
    if ((v59 & v60) == 0)
      v61 = TypographicBounds;
    v463 = v61;
    if (v440)
      CFRelease(v440);
    if (Mutable)
      CFRelease(Mutable);
    v63 = FigCaptionLayoutStandardCaptionRect(0, a9, a10, a11, a12);
    v443 = v64;
    v444 = v63;
    v441 = v66;
    v442 = v65;
    v67 = FigCaptionLayoutExpandedCaptionRect(a9, a10, a11, a12);
    v450 = v68;
    v451 = v67;
    v449 = v69;
    rect = v70;
    if (a4)
      Count = CFArrayGetCount(a4);
    else
      Count = 0;
    v72 = (CFIndex)a3;
    if (a3)
      v72 = CFArrayGetCount(a3);
    v447 = v432 * v461;
    if (Count >= v72)
      v73 = v72;
    else
      v73 = Count;
    v74 = allocator;
    v75 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    Mutable = CFArrayCreateMutable(allocator, v73, MEMORY[0x1E0C9B378]);
    v440 = CFArrayCreateMutable(allocator, v73, v75);
    v434 = v73;
    v489 = v38;
    v437 = v62;
    if (v73 > 0)
    {
      v76 = 0;
      if (v430)
        v77 = 1;
      else
        v77 = 3;
      v433 = v77;
      do
      {
        CFArrayGetValueAtIndex(a4, v76);
        v446 = v76;
        v78 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v76);
        v79 = (const __CFArray *)CFDictionaryGetValue(v78, CFSTR("R"));
        *(_OWORD *)v534 = *MEMORY[0x1E0C9D628];
        *(_OWORD *)&v534[16] = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
        v458 = v79;
        if (v79)
          v80 = CFArrayGetCount(v79);
        else
          v80 = 0;
        v457 = v80;
        v459 = CFArrayCreateMutable(v74, v80, MEMORY[0x1E0C9B378]);
        if (v42)
          v511 = CFArrayGetCount(v42);
        else
          v511 = 0;
        v81 = v458;
        if (v457 >= 1)
        {
          v82 = 0;
          while (1)
          {
            v460 = v82;
            v83 = (const __CFArray *)CFArrayGetValueAtIndex(v81, v82);
            if (v83)
              break;
            v86 = CFArrayCreateMutable(v74, 0, MEMORY[0x1E0C9B378]);
LABEL_268:
            v169 = v86;
            CFArrayAppendValue(v459, v86);
            if (v169)
              CFRelease(v169);
            v82 = v460 + 1;
            v81 = v458;
            if (v460 + 1 == v457)
              goto LABEL_271;
          }
          v465 = v83;
          v84 = CFArrayGetCount(v83);
          v85 = CFArrayCreateMutable(v74, v84, MEMORY[0x1E0C9B378]);
          v86 = v85;
          v464 = (char *)v84;
          if (v84 < 1)
            goto LABEL_268;
          v466 = v85;
          v87 = 0;
          while (1)
          {
            v470 = (char *)v87;
            theDict = (const __CFDictionary *)CFArrayGetValueAtIndex(v465, v87);
            v88 = (const __CFAttributedString *)CFDictionaryGetValue(theDict, CFSTR("S"));
            v537 = v62;
            Length = CFAttributedStringGetLength(v88);
            longestEffectiveRange.length = 0;
            longestEffectiveRange.location = 0;
            v524 = v88;
            MutableCopy = CFAttributedStringCreateMutableCopy(v74, Length, v88);
            CFAttributedStringBeginEditing(MutableCopy);
            aStr = MutableCopy;
            String = CFAttributedStringGetString(MutableCopy);
            v92 = CFStringCreateMutableCopy(v74, 0, String);
            v567.length = CFStringGetLength(v92);
            v567.location = 0;
            CFStringFindAndReplace(v92, CFSTR("’"), CFSTR("'"), v567, 0);
            v93 = FigCFStringFind();
            if (!FigCFStringFind())
              goto LABEL_99;
            if (v93)
              break;
            if (!FigCFStringFind())
            {
LABEL_117:
              v486 = 0;
              goto LABEL_121;
            }
LABEL_100:
            v94 = CFStringGetLength(v92);
            values.location = 0;
            values.length = v94;
            v486 = CFStringCreateMutableCopy(allocator, 0, v92);
            CFStringTransform(v92, &values, CFSTR("['\"]Any-Publishing"), 0);
            v95.length = values.length;
            if (values.length < 1)
              goto LABEL_115;
            v96 = 0;
            v97 = 0;
            v98 = 1;
            do
            {
              if (CFStringGetCharacterAtIndex(v92, v96) == 8221 || CFStringGetCharacterAtIndex(v92, v96) == 8220)
                ++v97;
              v96 = v98;
              v95.length = values.length;
              v99 = values.length <= v98++;
            }
            while (!v99);
            if (v97 == 2)
            {
              if (values.length >= 1)
              {
                v100 = 0;
                v101 = 1;
                while (CFStringGetCharacterAtIndex(v92, v100) != 8220)
                {
                  if (CFStringGetCharacterAtIndex(v92, v100) == 8221)
                  {
                    v568.location = v100;
                    v568.length = 1;
                    CFStringFindAndReplace(v92, CFSTR("”"), CFSTR("“"), v568, 0);
                    break;
                  }
                  v100 = v101;
                  v99 = values.length <= v101++;
                  if (v99)
                    break;
                }
              }
              v95 = values;
              v102 = aStr;
              v103 = v92;
            }
            else
            {
LABEL_115:
              v95.location = values.location;
              v102 = aStr;
              v103 = v486;
            }
            CFAttributedStringReplaceString(v102, v95, v103);
LABEL_121:
            if (FigCFRangeGetLimit() < Length)
            {
              space = (CGColorSpaceRef)Length;
              v104 = v92;
              while (1)
              {
                *(_QWORD *)&v548 = 0;
                v546 = 0u;
                v547 = 0u;
                values = (CFRange)0;
                v545 = (CGSize)0;
                v543 = 0;
                v542 = 0u;
                v540 = 0u;
                v541 = 0u;
                *(_OWORD *)v539 = 0u;
                Limit = FigCFRangeGetLimit();
                v562.location = 0;
                v562.length = Length;
                AttributesAndLongestEffectiveRange = CFAttributedStringGetAttributesAndLongestEffectiveRange(v524, Limit, v562, &longestEffectiveRange);
                v107 = (const __CFBoolean *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, CFSTR("i"));
                v108 = (const __CFBoolean *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, CFSTR("u"));
                LODWORD(v535) = -1;
                valuePtr = -1;
                v109 = CFDictionaryGetValue(AttributesAndLongestEffectiveRange, CFSTR("t"));
                if (*(_QWORD *)(v41 + 144) == 1)
                {
                  if (v109)
                    goto LABEL_126;
                }
                v109 = *(const void **)v41;
                if (*(_QWORD *)v41)
LABEL_126:
                  DeviceRGBColor = (CGColor *)CFRetain(v109);
                else
                  DeviceRGBColor = cclayout_createDeviceRGBColor(1.0, 1.0, 1.0, 1.0);
                v111 = DeviceRGBColor;
                Alpha = CGColorGetAlpha(DeviceRGBColor);
                v113 = *(double *)(v41 + 112);
                if (Alpha != v113)
                  break;
                if (v111)
                {
                  v114 = (CGColor *)CFRetain(v111);
LABEL_131:
                  CFRelease(v111);
                  goto LABEL_133;
                }
                v114 = 0;
LABEL_133:
                v115 = (CGColor *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, CFSTR("b"));
                if (v115)
                {
                  v116 = v115;
                  v117 = CGColorGetAlpha(v115);
                  if (*(_QWORD *)(v41 + 152) == 1)
                  {
                    v118 = v116;
                    goto LABEL_138;
                  }
                }
                else
                {
                  v117 = -1.0;
                }
                v118 = *(CGColor **)(v41 + 8);
                if (!v118)
                {
                  v119 = cclayout_createDeviceRGBColor(0.0, 0.0, 0.0, 1.0);
                  goto LABEL_140;
                }
LABEL_138:
                v119 = (CGColor *)CFRetain(v118);
LABEL_140:
                v120 = v119;
                if (*(_QWORD *)(v41 + 168) != 1 || v117 == v45)
                  v117 = *(double *)(v41 + 120);
                if (CGColorGetAlpha(v119) != v117)
                {
                  CopyWithAlpha = CGColorCreateCopyWithAlpha(v120, v117);
                  if (!v120)
                    goto LABEL_149;
                  goto LABEL_147;
                }
                if (v120)
                {
                  CopyWithAlpha = (void *)CFRetain(v120);
LABEL_147:
                  CFRelease(v120);
                  goto LABEL_149;
                }
                CopyWithAlpha = 0;
LABEL_149:
                FigCFDictionaryGetInt32IfPresent();
                if (*(_QWORD *)(v41 + 200) != 1 || (v122 = v535, (_DWORD)v535 == -1))
                {
                  v123 = *(_QWORD *)(v41 + 136) - 2;
                  if (v123 > 3)
                    v122 = 0;
                  else
                    v122 = dword_193301880[v123];
                }
                valuePtr = v122;
                v124 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
                v125 = (CGColor *)CFDictionaryGetValue(AttributesAndLongestEffectiveRange, CFSTR("e"));
                if (*(_QWORD *)(v41 + 160) == 1 && (v126 = v125) != 0)
                {
                  v127 = CGColorGetAlpha(v114);
                  v128 = CGColorCreateCopyWithAlpha(v126, v127);
                }
                else
                {
                  v129 = *(const void **)(v41 + 16);
                  if (v129)
                  {
                    v128 = (void *)CFRetain(v129);
                  }
                  else
                  {
                    v130 = CGColorGetAlpha(v114);
                    v128 = cclayout_createDeviceRGBColor(0.0, 0.0, 0.0, v130);
                  }
                }
                v131 = v128;
                if (!v107 || (v132 = (const __CTFont *)cfa, !CFBooleanGetValue(v107)))
                  v132 = v489;
                if (v108)
                {
                  if (CFBooleanGetValue(v108))
                  {
                    LODWORD(v535) = 1;
                    v108 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v535);
                  }
                  else
                  {
                    v108 = 0;
                  }
                }
                if (v537 == 0.0)
                {
                  v133 = 0;
                  v134 = 0;
                }
                else
                {
                  LODWORD(v535) = 0;
                  v133 = CFNumberCreate(allocator, kCFNumberSInt32Type, &v535);
                  v134 = CFNumberCreate(allocator, kCFNumberCGFloatType, &v537);
                }
                v535 = 0;
                CTFontGetSize(v132);
                MACaptionAppearanceGetStrokeWidth();
                v535 = v135;
                v136 = CFNumberCreate(allocator, kCFNumberCGFloatType, &v535);
                v137 = v136;
                if (v132)
                {
                  values.location = v491;
                  v539[0] = v132;
                  v138 = 1;
                }
                else
                {
                  v138 = 0;
                }
                if (v114)
                {
                  *(_QWORD *)((unint64_t)&values | (8 * v138)) = attrName;
                  *(_QWORD *)((unint64_t)v539 & 0xFFFFFFFFFFFFFFF7 | (8 * (v138++ & 1))) = v114;
                }
                if (v108)
                {
                  *(&values.location + v138) = v498;
                  v539[v138++] = v108;
                }
                if (v133)
                {
                  *(&values.location + v138) = v496;
                  v539[v138++] = v133;
                }
                if (v134)
                {
                  *(&values.location + v138) = v494;
                  v539[v138++] = v134;
                }
                if (CopyWithAlpha)
                {
                  *(&values.location + v138) = 0x1E2FD6B18;
                  v539[v138++] = CopyWithAlpha;
                }
                if (v131)
                {
                  *(&values.location + v138) = 0x1E2FD6B38;
                  v539[v138++] = v131;
                }
                if (v124)
                {
                  *(&values.location + v138) = 0x1E2FD6B58;
                  v539[v138++] = v124;
                }
                if (v136)
                {
                  *(&values.location + v138) = 0x1E2FD6D98;
                  v539[v138++] = v136;
                }
                v139 = CFDictionaryCreate(allocator, (const void **)&values, (const void **)v539, v138, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
                CFAttributedStringSetAttributes(aStr, longestEffectiveRange, v139, 0);
                if (v139)
                  CFRelease(v139);
                if (v133)
                  CFRelease(v133);
                if (v137)
                  CFRelease(v137);
                v41 = a13;
                if (v134)
                  CFRelease(v134);
                if (v108)
                  CFRelease(v108);
                v42 = a14;
                if (v124)
                  CFRelease(v124);
                if (v131)
                  CFRelease(v131);
                if (CopyWithAlpha)
                  CFRelease(CopyWithAlpha);
                if (v114)
                  CFRelease(v114);
                Length = (uint64_t)space;
                v92 = v104;
                if (FigCFRangeGetLimit() >= (uint64_t)space)
                  goto LABEL_209;
              }
              v114 = CGColorCreateCopyWithAlpha(v111, v113);
              if (!v111)
                goto LABEL_133;
              goto LABEL_131;
            }
LABEL_209:
            CFAttributedStringEndEditing(aStr);
            v74 = allocator;
            if (v92)
              CFRelease(v92);
            if (v486)
              CFRelease(v486);
            v467 = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
            if (v511 >= 1)
            {
              for (i = 0; i != v511; ++i)
              {
                v141 = (const __CFDictionary *)CFArrayGetValueAtIndex(v42, i);
                if (v141)
                {
                  v142 = v141;
                  if (CFDictionaryGetValue(v141, CFSTR("CMTextHighlightAttributeKey_StringToHighlight")))
                  {
                    v143 = *a15;
                    v144 = CFAttributedStringGetString(aStr);
                    v145 = (const __CFString *)CFDictionaryGetValue(v142, CFSTR("CMTextHighlightAttributeKey_CueID"));
                    if (!v145 || CFStringCompare(v144, v145, 0) == kCFCompareEqualTo)
                    {
                      v146 = (const __CFString *)CFDictionaryGetValue(v142, CFSTR("CMTextHighlightAttributeKey_StringToHighlight"));
                      LODWORD(v539[0]) = 0;
                      values = (CFRange)0;
                      v545 = (CGSize)0;
                      v147 = CGColorSpaceCreateWithName(name);
                      v148 = CFDictionaryGetValue(v142, CFSTR("CMTextHighlightAttributeKey_ForegroundColor"));
                      for (j = 0; j != 4; ++j)
                      {
                        if (v148)
                        {
                          if (!FigCFArrayGetFloatAtIndex())
                          {
                            v157 = 0;
                            v156 = 0;
                            v152 = 0;
                            v151 = 0;
                            goto LABEL_246;
                          }
                          v150 = *(float *)v539;
                        }
                        else
                        {
                          v150 = dbl_1933018A8[j];
                        }
                        *((double *)&values.location + j) = v150;
                      }
                      spacea = v147;
                      v151 = CGColorCreate(v147, (const CGFloat *)&values.location);
                      v152 = CGColorCreateCopyWithAlpha(v151, 0.5);
                      v153 = CFDictionaryGetValue(v142, CFSTR("CMTextHighlightAttributeKey_BackgroundColor"));
                      for (k = 0; k != 4; ++k)
                      {
                        if (v153)
                        {
                          if (!FigCFArrayGetFloatAtIndex())
                          {
                            v157 = 0;
                            v156 = 0;
                            v147 = spacea;
                            goto LABEL_246;
                          }
                          v155 = *(float *)v539;
                        }
                        else
                        {
                          v155 = dbl_1933018C8[k];
                        }
                        *((double *)&values.location + k) = v155;
                      }
                      v147 = spacea;
                      v156 = CGColorCreate(spacea, (const CGFloat *)&values.location);
                      v157 = CGColorCreateCopyWithAlpha(v156, 0.7);
                      LODWORD(longestEffectiveRange.location) = 0;
                      FigCFDictionaryGetIntIfPresent();
                      LODWORD(v537) = -1;
                      FigCFDictionaryGetIntIfPresent();
                      v569.length = CFStringGetLength(v144);
                      v569.location = 0;
                      Results = CFStringCreateArrayWithFindResults(allocator, v144, v146, v569, SLODWORD(longestEffectiveRange.location));
                      if (Results)
                      {
                        v159 = Results;
                        theDicta = i;
                        v160 = v152;
                        if (CFArrayGetCount(Results) >= 1)
                        {
                          v161 = 0;
                          do
                          {
                            v162 = (CFRange *)CFArrayGetValueAtIndex(v159, v161);
                            v163 = v162;
                            v164 = SLODWORD(v537) == -1 || v143 + v161 == SLODWORD(v537);
                            if (v164)
                              v165 = v151;
                            else
                              v165 = v160;
                            v166 = v160;
                            if (v164)
                              v167 = v156;
                            else
                              v167 = v157;
                            CFAttributedStringSetAttribute(aStr, *v162, attrName, v165);
                            v168 = v167;
                            v160 = v166;
                            CFAttributedStringSetAttribute(aStr, *v163, CFSTR("b"), v168);
                            ++v161;
                          }
                          while (v161 < CFArrayGetCount(v159));
                        }
                        v143 += CFArrayGetCount(v159);
                        CFRelease(v159);
                        v147 = spacea;
                        v152 = v160;
                        i = theDicta;
                      }
LABEL_246:
                      v74 = allocator;
                      if (v147)
                        CFRelease(v147);
                      if (v151)
                        CFRelease(v151);
                      if (v152)
                        CFRelease(v152);
                      if (v156)
                        CFRelease(v156);
                      if (v157)
                        CFRelease(v157);
                      v42 = a14;
                    }
                    *a15 = v143;
                  }
                }
              }
            }
            CFDictionarySetValue(v467, CFSTR("S"), aStr);
            if (aStr)
              CFRelease(aStr);
            CFArrayAppendValue(v466, v467);
            if (v467)
              CFRelease(v467);
            v87 = (CFIndex)(v470 + 1);
            v41 = a13;
            if (v470 + 1 == v464)
            {
              v86 = v466;
              goto LABEL_268;
            }
          }
          v93 = 1;
LABEL_99:
          if (!v93)
            goto LABEL_117;
          goto LABEL_100;
        }
LABEL_271:
        FigCFDictionaryGetCGRectIfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        PixelRectForCellRect = cclayout_getPixelRectForCellRect(v459, v433, 1, a2, v170, v171, v172, v173, *(CGFloat *)v534, *(CGFloat *)&v534[8], *(CGFloat *)&v534[16], *(CGFloat *)&v534[24], v444, v443, v442, v441, v445, *(uint64_t *)&v461, v451,
                                 *(uint64_t *)&v450,
                                 *(uint64_t *)&v449,
                                 *(uint64_t *)&rect,
                                 *(uint64_t *)&v463,
                                 *(uint64_t *)&v447);
        v176 = v175;
        v178 = v177;
        v180 = v179;
        v570.origin.x = v451;
        v570.origin.y = v450;
        v570.size.width = v449;
        v570.size.height = rect;
        Width = CGRectGetWidth(v570);
        v487 = PixelRectForCellRect;
        v571.origin.x = PixelRectForCellRect;
        theDictb = v176;
        v571.origin.y = v176;
        v471 = v178;
        v571.size.width = v178;
        *(double *)&v468 = v180;
        v571.size.height = v180;
        if (Width >= CGRectGetWidth(v571))
        {
          v224 = v459;
          v226 = v450;
          v225 = v451;
          v44 = v448;
          v227 = v449;
        }
        else
        {
          v182 = v453;
          v183 = v454;
          v184 = v459;
          if (!v459 || (v185 = CFArrayGetCount(v459), v185 < 1))
          {
LABEL_286:
            v575.origin.y = v450;
            v575.origin.x = v451;
            v575.size.width = v449;
            v575.size.height = rect;
            v201 = CGRectGetWidth(v575);
            JoinedStringFromElementWithSeparator = FigCaptionLayoutCreateJoinedStringFromElementWithSeparator(v184, CFSTR(" "));
            v203 = CTLineCreateWithAttributedString(JoinedStringFromElementWithSeparator);
            v204 = CFAttributedStringGetLength(JoinedStringFromElementWithSeparator);
            Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
            v206 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
            v207 = CFAttributedStringGetString(JoinedStringFromElementWithSeparator);
            theString = v207;
            v555 = 0;
            v556 = v204;
            CharactersPtr = CFStringGetCharactersPtr(v207);
            CStringPtr = 0;
            v553 = (CFRange *)CharactersPtr;
            if (!CharactersPtr)
              CStringPtr = CFStringGetCStringPtr(v207, 0x600u);
            v550 = 0u;
            v551 = 0u;
            v548 = 0u;
            v549 = 0u;
            v546 = 0u;
            v547 = 0u;
            values = (CFRange)0;
            v545 = (CGSize)0;
            v554 = CStringPtr;
            v557 = 0;
            v558 = 0;
            if (v204 < 1)
            {
              v211 = 0;
              v212 = -1;
              v44 = v448;
              v213 = allocator;
LABEL_321:
              OffsetForStringIndex = CTLineGetOffsetForStringIndex(v203, v211, 0);
              if (CTLineGetOffsetForStringIndex(v203, v204, 0) - OffsetForStringIndex <= v201 || v212 == -1)
              {
                v41 = a13;
                v45 = -1.0;
              }
              else
              {
                v564.length = v212 - v211;
                v564.location = v211;
                v235 = CFAttributedStringCreateWithSubstring(v213, JoinedStringFromElementWithSeparator, v564);
                CFArrayAppendValue(v206, v235);
                v41 = a13;
                v45 = -1.0;
                if (v235)
                  CFRelease(v235);
                v211 = v212 + 1;
              }
              v236 = CTLineGetOffsetForStringIndex(v203, v211, 0);
              if (CTLineGetOffsetForStringIndex(v203, v204, 0) - v236 != 0.0)
              {
                v565.length = v204 - v211;
                v565.location = v211;
                v237 = CFAttributedStringCreateWithSubstring(allocator, JoinedStringFromElementWithSeparator, v565);
                CFArrayAppendValue(v206, v237);
                if (v237)
                  CFRelease(v237);
              }
              if (v203)
                CFRelease(v203);
              v74 = allocator;
              v472 = JoinedStringFromElementWithSeparator;
              if (v206)
                v238 = CFArrayGetCount(v206);
              else
                v238 = 0;
              v239 = v433;
              CGRectGetMinY(*(CGRect *)v534);
              v240 = CFArrayCreateMutable(allocator, v238, MEMORY[0x1E0C9B378]);
              v224 = v240;
              if (v238 < 1)
              {
                v250 = 0.0;
              }
              else
              {
                aStrb = v240;
                v526 = v206;
                v241 = 0;
                v242 = 0;
                for (m = v238; m != v241; v238 = m)
                {
                  v243 = (const __CFAttributedString *)CFArrayGetValueAtIndex(v526, v241);
                  v244 = CFAttributedStringGetLength(v243);
                  v245 = CFArrayCreateMutable(v74, 0, MEMORY[0x1E0C9B378]);
                  v246 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
                  v247 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
                  v248 = CFDictionaryCreateMutable(v74, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                  v249 = CFDictionaryCreateMutable(v74, 0, v246, v247);
                  CFDictionarySetValue(v248, CFSTR("S"), v243);
                  FigCFDictionarySetInt32();
                  FigCFDictionarySetInt32();
                  CFDictionarySetValue(v248, CFSTR("L"), v249);
                  if (v249)
                    CFRelease(v249);
                  CFArrayAppendValue(v245, v248);
                  if (v248)
                    CFRelease(v248);
                  CFArrayAppendValue(aStrb, v245);
                  v74 = allocator;
                  if (v245)
                    CFRelease(v245);
                  if (v242 <= v244)
                    v242 = v244;
                  ++v241;
                }
                v250 = (double)v242;
                v41 = a13;
                v42 = a14;
                v239 = v433;
                v206 = v526;
                v224 = aStrb;
              }
              MinY = CGRectGetMinY(*(CGRect *)v534);
              if (v206)
                CFRelease(v206);
              if (v472)
                CFRelease(v472);
              if (v459)
                CFRelease(v459);
              v225 = v451;
              v228 = rect;
              v227 = v449;
              v226 = v450;
              v229 = cclayout_getPixelRectForCellRect(v224, v239, 1, a2, v251, v252, v253, v254, 0.0, MinY, v250, (double)v238, v444, v443, v442, v441, v445, *(uint64_t *)&v461, v451,
                       *(uint64_t *)&v450,
                       *(uint64_t *)&v449,
                       *(uint64_t *)&rect,
                       *(uint64_t *)&v463,
                       *(uint64_t *)&v447);
              goto LABEL_358;
            }
            v210 = 0;
            v211 = 0;
            v212 = -1;
            v44 = v448;
            v213 = allocator;
            while (2)
            {
              if (v210 < 0 || (v214 = v556, v556 <= v210))
              {
                v217 = 0;
              }
              else
              {
                p_values = v553;
                if (v553)
                {
                  v216 = v555 + v210;
                  goto LABEL_294;
                }
                if (v554)
                {
                  v217 = v554[v555 + v210];
                }
                else
                {
                  if (v558 <= v210 || (v222 = v557, v557 > v210))
                  {
                    v223 = v210 - 4;
                    if ((unint64_t)v210 < 4)
                      v223 = 0;
                    if (v223 + 64 < v556)
                      v214 = v223 + 64;
                    v557 = v223;
                    v558 = v214;
                    v560.location = v555 + v223;
                    v560.length = v214 - v223;
                    CFStringGetCharacters(theString, v560, (UniChar *)&values);
                    v222 = v557;
                  }
                  v216 = v210 - v222;
                  p_values = &values;
LABEL_294:
                  v217 = *((_WORD *)&p_values->location + v216);
                }
              }
              if (CFCharacterSetIsCharacterMember(Predefined, v217))
              {
                v218 = CTLineGetOffsetForStringIndex(v203, v211, 0);
                v219 = CTLineGetOffsetForStringIndex(v203, v210, 0);
                v220 = v210;
                if (v219 - v218 > v201)
                {
                  if (v212 == -1)
                    v212 = v210;
                  v563.length = v212 - v211;
                  v563.location = v211;
                  v221 = CFAttributedStringCreateWithSubstring(v213, JoinedStringFromElementWithSeparator, v563);
                  CFArrayAppendValue(v206, v221);
                  if (v221)
                    CFRelease(v221);
                  v211 = v212 + 1;
                  v212 = -1;
                  v210 = v211;
                  v213 = allocator;
LABEL_305:
                  if (v210 >= v204)
                    goto LABEL_321;
                  continue;
                }
              }
              else
              {
                v220 = v212;
              }
              break;
            }
            ++v210;
            v212 = v220;
            goto LABEL_305;
          }
          v186 = v185;
          v187 = 0;
          while (1)
          {
            v188 = (const __CFArray *)CFArrayGetValueAtIndex(v184, v187);
            if (v188)
            {
              v189 = v188;
              v190 = CFArrayGetCount(v188);
              if (v190 >= 2)
                break;
            }
LABEL_285:
            ++v187;
            v184 = v459;
            if (v187 == v186)
              goto LABEL_286;
          }
          v191 = v190;
          v192 = 0;
          v193 = v182;
          v194 = v183;
          v195 = v455;
          v196 = v456;
          while (1)
          {
            spaceb = *(CGColorSpaceRef *)&v196;
            v512 = v195;
            aStra = *(CFMutableAttributedStringRef *)&v194;
            v525 = *(CFAttributedStringRef *)&v193;
            v197 = (const __CFDictionary *)CFArrayGetValueAtIndex(v189, v192);
            LODWORD(values.location) = 0;
            LODWORD(v539[0]) = 0;
            v193 = v182;
            v194 = v183;
            v195 = v455;
            v196 = v456;
            if (cclayout_getLocationFromCommandData(v197, &values, v539))
            {
              v198 = (const __CFAttributedString *)CFDictionaryGetValue(v197, CFSTR("S"));
              v193 = v182;
              v194 = v183;
              v195 = v455;
              v196 = v456;
              if (v198)
              {
                v199 = CFAttributedStringGetLength(v198);
                v193 = v182;
                v194 = v183;
                v195 = v455;
                v196 = v456;
                if (v199)
                {
                  v196 = (double)(LODWORD(values.location) - 1);
                  v195 = (double)(LODWORD(v539[0]) - 1);
                  v194 = (double)v199;
                  v193 = 1.0;
                }
              }
            }
            *(_QWORD *)&v572.origin.x = spaceb;
            v572.origin.y = v512;
            *(_QWORD *)&v572.size.width = aStra;
            *(_QWORD *)&v572.size.height = v525;
            if (!CGRectIsNull(v572))
            {
              *(_QWORD *)&v573.origin.x = spaceb;
              v573.origin.y = v512;
              *(_QWORD *)&v573.size.width = aStra;
              *(_QWORD *)&v573.size.height = v525;
              MaxX = CGRectGetMaxX(v573);
              v574.origin.x = v196;
              v574.origin.y = v195;
              v574.size.width = v194;
              v574.size.height = v193;
              if (MaxX < CGRectGetMinX(v574))
                break;
            }
            ++v192;
            v182 = v453;
            v183 = v454;
            if (v191 == v192)
              goto LABEL_285;
          }
          v224 = v459;
          v41 = a13;
          v44 = v448;
          v227 = v449;
          v45 = -1.0;
          v74 = allocator;
          v226 = v450;
          v225 = v451;
        }
        v228 = rect;
        v229 = v487;
        v230 = theDictb;
        v231 = v471;
        v232 = *(double *)&v468;
LABEL_358:
        v256 = cclayout_offsetRectToFitBoundary(v229, v230, v231, v232, v225, v226, v227, v228);
        v258 = v257;
        v260 = v259;
        v262 = v261;
        CFArrayAppendValue(Mutable, v224);
        if (v224)
          CFRelease(v224);
        *(double *)&values.location = v256;
        values.length = v258;
        v545.width = v260;
        v545.height = v262;
        v263 = CFDataCreateMutable(v74, 32);
        CFDataSetLength(v263, 32);
        v561.location = 0;
        v561.length = 32;
        CFDataReplaceBytes(v263, v561, (const UInt8 *)&values, 32);
        CFArrayAppendValue(v440, v263);
        if (v263)
          CFRelease(v263);
        v76 = v446 + 1;
        v62 = v437;
        v74 = allocator;
      }
      while (v446 + 1 != v434);
    }
    if (v440)
      v264 = (const __CFArray *)CFRetain(v440);
    else
      v264 = 0;
    v265 = v463 * -0.5;
    do
    {
      while (1)
      {
        if (v264)
        {
          v266 = CFArrayGetCount(v264);
          v267 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          if (v266 >= 1)
          {
            for (n = 0; n != v266; ++n)
            {
              v269 = CFArrayGetValueAtIndex(v264, n);
              v270 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
              CFArrayAppendValue(v270, v269);
              CFArrayAppendValue(v267, v270);
              if (v270)
                CFRelease(v270);
            }
          }
          if (!v267)
          {
LABEL_400:
            v287 = 0;
            if (v264)
              goto LABEL_404;
            goto LABEL_405;
          }
        }
        else
        {
          v267 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
          if (!v267)
            goto LABEL_400;
        }
        while (1)
        {
          v271 = CFArrayGetCount(v267);
          v272 = v271;
          if (v271 <= 1)
            break;
          v273 = 0;
          v274 = v271 - 2;
          while (1)
          {
            v275 = v273;
            v276 = (void *)CFArrayGetValueAtIndex(v267, v273);
            v576.origin.x = cclayout_unionCFDataRects(v276);
            v577 = CGRectInset(v576, v265, v44);
            if (++v273 < v272)
              break;
LABEL_380:
            if (v275 == v274)
              goto LABEL_386;
          }
          x = v577.origin.x;
          y = v577.origin.y;
          v279 = v577.size.width;
          height = v577.size.height;
          v281 = v273;
          while (1)
          {
            v282 = CFArrayGetValueAtIndex(v267, v281);
            v578.origin.x = cclayout_unionCFDataRects(v282);
            v608 = CGRectInset(v578, v265, v44);
            v579.origin.x = x;
            v579.origin.y = y;
            v579.size.width = v279;
            v579.size.height = height;
            if (CGRectIntersectsRect(v579, v608))
              break;
            if (v272 == ++v281)
              goto LABEL_380;
          }
          if (v282)
            v283.length = CFArrayGetCount((CFArrayRef)v282);
          else
            v283.length = 0;
          v283.location = 0;
          CFArrayAppendArray((CFMutableArrayRef)v276, (CFArrayRef)v282, v283);
          CFArrayRemoveValueAtIndex(v267, v281);
        }
LABEL_386:
        v284 = CFArrayGetCount(v267);
        if (v284 < 1)
        {
          v287 = 0;
        }
        else
        {
          v285 = v284;
          v286 = 0;
          v287 = 0;
          do
          {
            v288 = (const __CFArray *)CFArrayGetValueAtIndex(v267, v286);
            if (v288)
            {
              v289 = v288;
              if (CFArrayGetCount(v288) >= 2)
              {
                v290 = CFArrayGetCount(v289);
                v527 = cclayout_unionCFDataRects(v289);
                aStrc = v291;
                v514 = v292;
                spacec = v293;
                if (v290 >= 2)
                {
                  for (ii = 1; ii != v290; ++ii)
                  {
                    v295 = CFArrayGetValueAtIndex(v289, ii - 1);
                    v296 = (void *)CFArrayGetValueAtIndex(v289, ii);
                    v297 = cclayout_unionCFDataRects(v295);
                    v299 = v298;
                    v301 = v300;
                    v303 = v302;
                    v304 = cclayout_unionCFDataRects(v296);
                    v308 = v304;
                    v309 = v305;
                    v310 = v306;
                    v311 = v307;
                    if (a2 == 1)
                    {
                      v580.origin.x = v297;
                      v580.origin.y = v299;
                      v580.size.width = v301;
                      v580.size.height = v303;
                      MaxY = CGRectGetMaxY(v580);
                      v581.origin.x = v308;
                      v581.origin.y = v309;
                      v581.size.width = v310;
                      v581.size.height = v311;
                      v313 = v461 + MaxY - CGRectGetMinY(v581);
                    }
                    else
                    {
                      v314 = CGRectGetMaxY(*(CGRect *)&v304);
                      v582.origin.x = v297;
                      v582.origin.y = v299;
                      v582.size.width = v301;
                      v582.size.height = v303;
                      v313 = -(v461 + v314 - CGRectGetMinY(v582));
                    }
                    cclayout_offsetCFDataRects(v296, 0.0, v313);
                  }
                }
                v315 = cclayout_unionCFDataRects(v289);
                v317 = v316;
                v319 = v318;
                v321 = v320;
                v583.origin.x = v527;
                *(_QWORD *)&v583.origin.y = aStrc;
                v583.size.width = v514;
                *(_QWORD *)&v583.size.height = spacec;
                MidY = CGRectGetMidY(v583);
                v584.origin.x = v315;
                v584.origin.y = v317;
                v584.size.width = v319;
                v584.size.height = v321;
                v323 = CGRectGetMidY(v584);
                cclayout_offsetCFDataRects(v289, 0.0, MidY - v323);
                v324 = cclayout_unionCFDataRects(v289);
                v326 = v325;
                v328 = v327;
                v330 = v329;
                v585.origin.x = cclayout_offsetRectToFitBoundary(v324, v325, v327, v329, v451, v450, v449, rect);
                v331 = v585.origin.x;
                v332 = v585.origin.y;
                v333 = v585.size.width;
                v334 = v585.size.height;
                MinX = CGRectGetMinX(v585);
                v586.origin.x = v324;
                v586.origin.y = v326;
                v586.size.width = v328;
                v586.size.height = v330;
                v529 = MinX - CGRectGetMinX(v586);
                v587.origin.x = v331;
                v587.origin.y = v332;
                v587.size.width = v333;
                v587.size.height = v334;
                v335 = CGRectGetMinY(v587);
                v588.origin.x = v324;
                v588.origin.y = v326;
                v588.size.width = v328;
                v588.size.height = v330;
                v336 = CGRectGetMinY(v588);
                cclayout_offsetCFDataRects(v289, v529, v335 - v336);
                v287 = 1;
                v44 = v448;
                v45 = -1.0;
                v265 = v463 * -0.5;
              }
            }
            ++v286;
          }
          while (v286 != v285);
        }
        CFRetain(v267);
        if (v264)
LABEL_404:
          CFRelease(v264);
LABEL_405:
        if (v267)
          break;
        v264 = 0;
        if (!v287)
          goto LABEL_409;
      }
      CFRelease(v267);
      v264 = v267;
    }
    while (v287);
    CFRelease(v267);
LABEL_409:
    v589.origin.y = v450;
    v589.origin.x = v451;
    v589.size.width = v449;
    v589.size.height = rect;
    v590 = CGRectIntegral(v589);
    v337 = v590.origin.x;
    v338 = v590.origin.y;
    v339 = v590.size.width;
    v340 = v590.size.height;
    v609.origin.x = cclayout_unionCFDataRects(v440);
    v609.origin.y = v341;
    v609.size.width = v342;
    v609.size.height = v343;
    v591.origin.x = v337;
    v591.origin.y = v338;
    v591.size.width = v339;
    v591.size.height = v340;
    v344 = CGRectContainsRect(v591, v609);
    v46 = v432;
    if (!v344)
      v46 = v432 + -0.1;
    if (v344)
    {
      v38 = v489;
      v41 = a13;
      v345 = v437;
      break;
    }
    v38 = v489;
    v41 = a13;
    v345 = v437;
  }
  while (v46 > 0.0);
LABEL_418:
  v346 = floor(v447 * 0.2);
  v347 = 1.0;
  if (v346 != 0.0)
    v347 = v346;
  v348 = *(double *)(v41 + 32);
  v474 = v347;
  if (v348 >= v347)
    v348 = v347;
  v473 = v348;
  if (a4)
    v349 = CFArrayGetCount(a4);
  else
    v349 = 0;
  v350 = (CFIndex)a3;
  if (a3)
    v350 = CFArrayGetCount(a3);
  if (v349 >= v350)
    v349 = v350;
  aStrd = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v475 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  v469 = (CFMutableDictionaryRef)v349;
  if (v349 >= 1)
  {
    v351 = 0;
    *(_OWORD *)theDictc = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    *(_OWORD *)v485 = *MEMORY[0x1E0C9D628];
    v490 = v38;
    v438 = v345;
    while (1)
    {
      v352 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, v351);
      v476 = CFDictionaryGetValue(v352, CFSTR("R"));
      v353 = (const __CFDictionary *)CFArrayGetValueAtIndex(a4, v351);
      v488 = (CGColor *)CFDictionaryGetValue(v353, CFSTR("C"));
      v354 = (const __CFArray *)CFArrayGetValueAtIndex(Mutable, v351);
      v478 = (char *)v351;
      namea = (const __CFData *)CFArrayGetValueAtIndex(v440, v351);
      *(_OWORD *)v539 = *(_OWORD *)v485;
      v540 = *(_OWORD *)theDictc;
      LODWORD(v537) = 0;
      v355 = CFAllocatorAllocate(aStrd, 148, 0);
      *v355 = 0u;
      v355[1] = 0u;
      v355[2] = 0u;
      v355[3] = 0u;
      v355[4] = 0u;
      v355[5] = 0u;
      v355[6] = 0u;
      v355[7] = 0u;
      v355[8] = 0u;
      *((_DWORD *)v355 + 36) = 0;
      FigCFDictionaryGetCGRectIfPresent();
      FigCFDictionaryGetInt32IfPresent();
      v477 = v355;
      if (v354)
        v356 = CFArrayGetCount(v354);
      else
        v356 = 0;
      BytePtr = (CGFloat *)CFDataGetBytePtr(namea);
      v592.origin.x = *BytePtr;
      v358 = BytePtr[1];
      v592.size.width = BytePtr[2];
      v592.size.height = BytePtr[3];
      v501 = *BytePtr;
      v592.origin.y = v358;
      v499 = v592.size.width;
      v497 = v592.size.height;
      v359 = CGRectGetWidth(v592);
      v360 = CFDictionaryCreateMutable(aStrd, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      longestEffectiveRange.location = 0;
      if (v356 >= 1)
      {
        v361 = 0;
        v362 = v501;
        v516 = v447;
        v495 = v354;
        v493 = v356;
        v492 = v358;
        do
        {
          v363 = (const __CFArray *)CFArrayGetValueAtIndex(v354, v361);
          v364 = v363;
          if (!v361)
          {
            CFArrayGetValueAtIndex(v363, 0);
            FigCFDictionaryGetCGFloatIfPresent();
          }
          if (a2 == 1)
          {
            v365 = v358 + (double)v361 * v447 + *(double *)&longestEffectiveRange.location;
          }
          else
          {
            v593.origin.x = v501;
            v593.origin.y = v358;
            v593.size.width = v499;
            v593.size.height = v497;
            v365 = v358 + CGRectGetHeight(v593) - (double)(v361 + 1) * v447 - *(double *)&longestEffectiveRange.location;
          }
          v366 = v362;
          v367 = v359;
          v368 = v516;
          v594 = CGRectIntegral(*(CGRect *)(&v365 - 1));
          v362 = v594.origin.x;
          v369 = v594.origin.y;
          v359 = v594.size.width;
          v516 = v594.size.height;
          allocatora = CGRectGetHeight(v594);
          if (v364)
          {
            v510 = CFArrayGetCount(v364);
            if (v510 >= 1)
            {
              v503 = v361;
              v504 = v359;
              v370 = 0;
              v371 = 0;
              attrNamea = 0;
              v372 = v362 - v463;
              v373 = 0.0;
              v502 = v362;
              v374 = v516;
              v509 = v364;
              do
              {
                v515 = v370;
                v375 = (const __CFDictionary *)CFArrayGetValueAtIndex(v364, v370);
                v530 = (const __CFAttributedString *)CFDictionaryGetValue(v375, CFSTR("S"));
                v376 = CFAttributedStringGetLength(v530);
                values.length = 0;
                values.location = 0;
                FigCFDictionaryGetCGFloatIfPresent();
                v362 = v362 + 0.0;
                v377 = FigCFRangeGetLimit();
                if (v377 < FigCFRangeGetLimit())
                {
                  v378 = v372;
                  do
                  {
                    v379 = FigCFRangeGetLimit();
                    v566.location = 0;
                    v566.length = v376;
                    v380 = CFAttributedStringGetAttributesAndLongestEffectiveRange(v530, v379, v566, &values);
                    v381 = (const __CFBoolean *)CFDictionaryGetValue(v380, CFSTR("d"));
                    v382 = CFAttributedStringCreateWithSubstring(aStrd, v530, values);
                    v383 = CTLineCreateWithAttributedString(v382);
                    v384 = values.length;
                    v385 = CTLineGetOffsetForStringIndex(v383, 0, 0);
                    v386 = CTLineGetOffsetForStringIndex(v383, v384, 0);
                    v387 = CFAttributedStringGetString(v382);
                    CharacterAtIndex = CFStringGetCharacterAtIndex(v387, 0);
                    v389 = CFStringGetCharacterAtIndex(v387, values.length - 1);
                    if (v381)
                    {
                      v390 = CFBooleanGetValue(v381);
                      v391 = v390 == 0;
                      LODWORD(v381) = v390 != 0;
                    }
                    else
                    {
                      v391 = 1;
                    }
                    v392 = CFDictionaryGetValue(v380, CFSTR("b"));
                    v393 = v362 - v378;
                    if (v371 && v393 > 0.0)
                    {
                      if (v393 >= v463)
                        v394 = v463;
                      else
                        v394 = v362 - v378;
                      v595.origin.x = v378;
                      v595.origin.y = v369;
                      v595.size.width = v394;
                      v595.size.height = allocatora;
                      v596 = CGRectIntegral(v595);
                      cclayout_AddRectWithColorAsPath(v360, attrNamea, v596.origin.x, v596.origin.y, v596.size.width, v596.size.height);
                      v597.origin.x = v378;
                      v597.origin.y = v369;
                      v597.size.width = v394;
                      v597.size.height = allocatora;
                      v372 = v378 + CGRectGetWidth(v597);
                      v393 = v362 - v372;
                    }
                    else
                    {
                      v372 = v378;
                      v378 = v373;
                    }
                    if (CharacterAtIndex == 32)
                      v395 = 0;
                    else
                      v395 = (int)v381;
                    if (v395 == 1 && v393 > 0.0)
                    {
                      if (v393 >= v463)
                        v396 = v463;
                      else
                        v396 = v393;
                      v598.origin.x = v378;
                      v598.origin.y = v369;
                      v598.size.width = v396;
                      v598.size.height = allocatora;
                      v373 = v362 - CGRectGetWidth(v598);
                      v599.origin.x = v373;
                      v599.origin.y = v369;
                      v599.size.width = v396;
                      v374 = v516;
                      v599.size.height = allocatora;
                      v600 = CGRectIntegral(v599);
                      cclayout_AddRectWithColorAsPath(v360, v392, v600.origin.x, v600.origin.y, v600.size.width, v600.size.height);
                    }
                    else
                    {
                      v373 = v378;
                    }
                    v397 = v386 - v385;
                    v601.origin.x = v362;
                    v601.origin.y = v369;
                    v601.size.width = v397;
                    v601.size.height = v374;
                    v602 = CGRectIntegral(v601);
                    cclayout_AddRectWithColorAsPath(v360, v392, v602.origin.x, v602.origin.y, v602.size.width, v602.size.height);
                    if (!v391)
                    {
                      v603.origin.x = v362;
                      v603.origin.y = v369;
                      v603.size.width = v397;
                      v603.size.height = v374;
                      v372 = CGRectGetMaxX(v603);
                    }
                    v398 = attrNamea;
                    if ((v381 & (v389 != 32)) != 0)
                      v398 = v392;
                    attrNamea = v398;
                    if ((v381 & (v389 != 32)) != 0)
                      v371 = 1;
                    if (v383)
                      CFRelease(v383);
                    if (v382)
                      CFRelease(v382);
                    v362 = v362 + v397;
                    v399 = FigCFRangeGetLimit();
                    v378 = v372;
                  }
                  while (v399 < FigCFRangeGetLimit());
                }
                v370 = v515 + 1;
                v364 = v509;
              }
              while (v515 + 1 != v510);
              v58 = v371 == 0;
              v41 = a13;
              v354 = v495;
              v356 = v493;
              v358 = v492;
              v359 = v504;
              v361 = v503;
              v362 = v502;
              if (!v58)
              {
                v604.origin.x = v372;
                v604.origin.y = v369;
                v604.size.width = v463;
                v604.size.height = allocatora;
                v605 = CGRectIntegral(v604);
                cclayout_AddRectWithColorAsPath(v360, attrNamea, v605.origin.x, v605.origin.y, v605.size.width, v605.size.height);
              }
            }
          }
          ++v361;
        }
        while (v361 != v356);
      }
      values = *(CFRange *)v485;
      v545 = *(CGSize *)theDictc;
      CFDictionaryApplyFunction(v360, (CFDictionaryApplierFunction)cclayout_GetRectFromPathDictionaryApplier, &values);
      v400 = *(double *)&values.location;
      v401 = *(double *)&values.length;
      v402 = v545;
      v606.origin.x = v501;
      v606.origin.y = v358;
      v606.size.width = v499;
      v606.size.height = v497;
      v403 = CGRectGetMinX(v606);
      v607.origin.x = v400;
      v607.origin.y = v401;
      v607.size = v402;
      v404 = CGRectGetMinX(v607);
      if (v356 >= 1)
      {
        v405 = v403 - v404;
        if (v405 > 0.0)
        {
          for (jj = 0; jj != v356; ++jj)
          {
            v407 = (const __CFArray *)CFArrayGetValueAtIndex(v354, jj);
            if (v407)
            {
              v408 = v407;
              if (CFArrayGetCount(v407))
              {
                CFArrayGetValueAtIndex(v408, 0);
                values.location = 0;
                FigCFDictionaryGetCGFloatIfPresent();
                *(double *)&values.location = v405 + *(double *)&values.location;
                FigCFDictionarySetCGFloat();
              }
            }
          }
        }
      }
      values = *(CFRange *)v485;
      v545 = *(CGSize *)theDictc;
      CFDictionaryApplyFunction(v360, (CFDictionaryApplierFunction)cclayout_GetRectFromPathDictionaryApplier, &values);
      *(CFRange *)attrNameb = values;
      v409 = v545;
      v410 = v540;
      *v477 = *(_OWORD *)v539;
      v477[1] = v410;
      v411 = CFDataGetBytePtr(namea);
      v412 = *((_OWORD *)v411 + 1);
      v477[2] = *(_OWORD *)v411;
      v477[3] = v412;
      v477[4] = *(_OWORD *)attrNameb;
      v477[5] = v409;
      *((_QWORD *)v477 + 12) = v360;
      v413 = v476;
      if (v476)
        v413 = CFRetain(v476);
      v345 = v438;
      *((_QWORD *)v477 + 13) = v413;
      v414 = v354 ? CFRetain(v354) : 0;
      v38 = v490;
      *((_QWORD *)v477 + 14) = v414;
      if (!v488)
        break;
      v415 = v488;
      v416 = CGColorGetAlpha(v488);
      if (*(_QWORD *)(v41 + 176) != 1)
        goto LABEL_497;
LABEL_498:
      if (*(_QWORD *)(v41 + 184) != 1 || v416 == -1.0)
        v416 = *(double *)(v41 + 128);
      if (CGColorGetAlpha(v415) == v416)
      {
        if (v415)
          v417 = (void *)CFRetain(v415);
        else
          v417 = 0;
      }
      else
      {
        v417 = CGColorCreateCopyWithAlpha(v415, v416);
      }
      *((_QWORD *)v477 + 15) = v417;
      *((double *)v477 + 16) = v474;
      *((double *)v477 + 17) = v473;
      *((_DWORD *)v477 + 36) = LODWORD(v537);
      CFArrayAppendValue(v475, v477);
      v351 = (CFIndex)(v478 + 1);
      if (v478 + 1 == (char *)v469)
        goto LABEL_507;
    }
    v416 = -1.0;
LABEL_497:
    v415 = *(CGColor **)(v41 + 24);
    goto LABEL_498;
  }
LABEL_507:
  if (a18)
  {
    if (v38)
      v418 = CFRetain(v38);
    else
      v418 = 0;
    *a18 = v418;
  }
  v420 = a17;
  v419 = a16;
  if (a19)
  {
    v421 = cfa;
    if (cfa)
      v421 = CFRetain(cfa);
    *a19 = v421;
    v420 = a17;
    v419 = a16;
  }
  *a20 = v475;
  if (v419)
    *v419 = v430;
  if (v420)
    *v420 = TypographicBounds;
  if (a22)
    *a22 = v345;
  if (a21)
  {
    *a21 = v463;
    a21[1] = v447;
  }
  if (v38)
    CFRelease(v38);
  if (cfa)
    CFRelease(cfa);
  if (v440)
    CFRelease(v440);
  if (Mutable)
    CFRelease(Mutable);
  return v429;
}

void FigCaptionLayoutReleaseCaptionElementArray(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const __CFAllocator *v5;
  _QWORD *ValueAtIndex;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      v3 = Count;
      v4 = 0;
      v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
        v7 = (const void *)ValueAtIndex[12];
        if (v7)
          CFRelease(v7);
        v8 = (const void *)ValueAtIndex[13];
        if (v8)
          CFRelease(v8);
        v9 = (const void *)ValueAtIndex[14];
        if (v9)
          CFRelease(v9);
        v10 = (const void *)ValueAtIndex[15];
        if (v10)
          CFRelease(v10);
        CFAllocatorDeallocate(v5, ValueAtIndex);
        ++v4;
      }
      while (v3 != v4);
    }
    CFRelease(a1);
  }
}

__CFArray *FigCaptionLayoutCopyCaptionElementArray(CFArrayRef theArray)
{
  CFIndex Count;
  const __CFAllocator *v3;
  __CFArray *Mutable;
  BOOL v5;
  CFIndex v6;
  const void *ValueAtIndex;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;

  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, 0);
  if (Mutable)
    v5 = Count < 1;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
      v8 = CFAllocatorAllocate(v3, 148, 0);
      v8[36] = 0;
      *((_OWORD *)v8 + 7) = 0u;
      *((_OWORD *)v8 + 8) = 0u;
      *((_OWORD *)v8 + 5) = 0u;
      *((_OWORD *)v8 + 6) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)v8 = 0u;
      v9 = *((_OWORD *)ValueAtIndex + 1);
      *(_OWORD *)v8 = *(_OWORD *)ValueAtIndex;
      *((_OWORD *)v8 + 1) = v9;
      v10 = *((_OWORD *)ValueAtIndex + 3);
      *((_OWORD *)v8 + 2) = *((_OWORD *)ValueAtIndex + 2);
      *((_OWORD *)v8 + 3) = v10;
      v11 = *((_OWORD *)ValueAtIndex + 5);
      *((_OWORD *)v8 + 4) = *((_OWORD *)ValueAtIndex + 4);
      *((_OWORD *)v8 + 5) = v11;
      v12 = (CFTypeRef)*((_QWORD *)ValueAtIndex + 12);
      if (v12)
        v12 = CFRetain(v12);
      *((_QWORD *)v8 + 12) = v12;
      v13 = (CFTypeRef)*((_QWORD *)ValueAtIndex + 13);
      if (v13)
        v13 = CFRetain(v13);
      *((_QWORD *)v8 + 13) = v13;
      v14 = (CFTypeRef)*((_QWORD *)ValueAtIndex + 14);
      if (v14)
        v14 = CFRetain(v14);
      *((_QWORD *)v8 + 14) = v14;
      *((_QWORD *)v8 + 15) = CGColorRetain(*((CGColorRef *)ValueAtIndex + 15));
      *((_OWORD *)v8 + 8) = *((_OWORD *)ValueAtIndex + 8);
      v8[36] = *((_DWORD *)ValueAtIndex + 36);
      CFArrayAppendValue(Mutable, v8);
      ++v6;
    }
    while (Count != v6);
  }
  return Mutable;
}

uint64_t cclayout_getLocationFromCommandData(const __CFDictionary *a1, void *a2, void *a3)
{
  const __CFDictionary *Value;
  const __CFDictionary *v6;
  CFTypeID v7;
  const void *v8;
  const void *v9;
  const void *v11;
  __CFDictionary *MutableCopy;
  CFTypeID v13;
  CFTypeID v14;
  unsigned int v15;

  Value = (const __CFDictionary *)CFDictionaryGetValue(a1, CFSTR("L"));
  v6 = Value;
  if (!Value)
    goto LABEL_10;
  v7 = CFGetTypeID(Value);
  if (v7 == CFDictionaryGetTypeID())
  {
    v8 = CFDictionaryGetValue(v6, CFSTR("x"));
    v9 = CFDictionaryGetValue(v6, CFSTR("y"));
    if (v8 && v9 != 0)
    {
      v11 = v9;
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v6);
      CFDictionaryRemoveValue(MutableCopy, CFSTR("x"));
      CFDictionaryRemoveValue(MutableCopy, CFSTR("y"));
      CFDictionaryApplyFunction(MutableCopy, (CFDictionaryApplierFunction)cclayout_warnAboutUnhandledKeyInDictionary, "CC command data \"location\" sub-dictionary (kQTClosedCaptionLocationKey)");
      CFRelease(MutableCopy);
      v13 = CFGetTypeID(v8);
      if (v13 == CFNumberGetTypeID())
      {
        v14 = CFGetTypeID(v11);
        if (v14 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, a2);
          CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt32Type, a3);
LABEL_10:
          v15 = 1;
          goto LABEL_11;
        }
      }
    }
  }
  v15 = 0;
LABEL_11:
  if (v6)
    return v15;
  else
    return 0;
}

double cclayout_getPixelRectForCellRect(CFArrayRef theArray, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, double a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  const __CFArray *v25;
  CGFloat v27;
  CFIndex Count;
  uint64_t v31;
  CFIndex v32;
  uint64_t v33;
  const __CFArray *ValueAtIndex;
  const __CFArray *v35;
  CFIndex v36;
  CFIndex i;
  const __CFDictionary *v38;
  const __CFAttributedString *Value;
  double v40;
  double v41;
  CFIndex v42;
  uint64_t v43;
  const __CFArray *v44;
  const __CFArray *v45;
  CFIndex v46;
  double MinX;
  int v48;
  CFIndex v49;
  int v50;
  const __CFDictionary *v51;
  const __CFAttributedString *v52;
  int Length;
  const __CTLine *v54;
  CFIndex v55;
  double OffsetForStringIndex;
  double v57;
  double v58;
  int v59;
  CFIndex v60;
  uint64_t v61;
  const __CFArray *v62;
  const __CFArray *v63;
  const __CFArray *v64;
  const __CFArray *v65;
  const __CFDictionary *v66;
  double *v67;
  double v68;
  double v69;
  double MinY;
  double v71;
  CGFloat v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v79;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  CGFloat v92;
  uint64_t v94;
  CGFloat v95;
  const __CFArray *v97;
  double v98;
  double key;
  double keya;
  int v101;
  _OWORD v102[7];
  uint64_t v103;
  uint64_t v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;

  v25 = theArray;
  v27 = a11;
  v104 = *MEMORY[0x1E0C80C00];
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v101 = 0;
    if (Count >= 15)
      v31 = 15;
    else
      v31 = Count;
    v97 = v25;
    if (a2 == 1)
    {
      if (Count >= 1)
      {
        v87 = a3;
        v89 = a4;
        v32 = 0;
        if (v31 <= 1)
          v33 = 1;
        else
          v33 = v31;
        do
        {
          ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v25, v32);
          if (ValueAtIndex)
          {
            v35 = ValueAtIndex;
            v36 = CFArrayGetCount(ValueAtIndex);
            v105.origin.x = a9;
            v105.origin.y = a10;
            v105.size.width = v27;
            v105.size.height = a12;
            CGRectGetMinX(v105);
            if (v36 >= 1)
            {
              for (i = 0; i != v36; ++i)
              {
                v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(v35, i);
                if (cclayout_getLocationFromCommandData(v38, &v101, 0))
                {
                  Value = (const __CFAttributedString *)CFDictionaryGetValue(v38, CFSTR("S"));
                  CFAttributedStringGetLength(Value);
                  FigCFDictionarySetCGFloat();
                }
              }
            }
          }
          else
          {
            v106.origin.x = a9;
            v106.origin.y = a10;
            v106.size.width = v27;
            v106.size.height = a12;
            CGRectGetMinX(v106);
          }
          ++v32;
          v25 = v97;
        }
        while (v32 != v33);
        a3 = v87;
        a4 = v89;
      }
LABEL_22:
      v107.origin.x = a9;
      v107.origin.y = a10;
      v107.size.width = v27;
      v107.size.height = a12;
      v40 = *(double *)&a23 * CGRectGetWidth(v107);
      if (!v31)
        goto LABEL_68;
      goto LABEL_62;
    }
    v40 = 0.0;
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v85 = a2;
      v88 = a3;
      v90 = a4;
      v41 = a12;
      v103 = 0;
      memset(v102, 0, sizeof(v102));
      v84 = Count;
      v86 = v31;
      if (Count >= 1)
      {
        v42 = 0;
        if (v31 <= 1)
          v43 = 1;
        else
          v43 = v31;
        v94 = v43;
        do
        {
          v44 = (const __CFArray *)CFArrayGetValueAtIndex(v25, v42);
          if (v44)
          {
            v45 = v44;
            v46 = CFArrayGetCount(v44);
            v108.origin.x = a9;
            v108.origin.y = a10;
            v108.size.width = a11;
            v108.size.height = v41;
            MinX = CGRectGetMinX(v108);
            if (v46 >= 1)
            {
              v48 = 0;
              v49 = 0;
              v50 = (int)(MinX + 1.0);
              do
              {
                v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(v45, v49);
                if (cclayout_getLocationFromCommandData(v51, &v101, 0))
                {
                  v52 = (const __CFAttributedString *)CFDictionaryGetValue(v51, CFSTR("S"));
                  Length = CFAttributedStringGetLength(v52);
                  v54 = CTLineCreateWithAttributedString(v52);
                  v55 = CFAttributedStringGetLength(v52);
                  OffsetForStringIndex = CTLineGetOffsetForStringIndex(v54, 0, 0);
                  v57 = CTLineGetOffsetForStringIndex(v54, v55, 0) - OffsetForStringIndex;
                  v58 = v49 ? *(double *)&a23 * (double)(v101 - v50) : 0.0;
                  FigCFDictionarySetCGFloat();
                  v50 = v101 + Length;
                  v48 = (int)(v57 + v58 + (double)v48);
                  if (v54)
                    CFRelease(v54);
                }
                ++v49;
              }
              while (v46 != v49);
              goto LABEL_43;
            }
          }
          else
          {
            v109.origin.x = a9;
            v109.origin.y = a10;
            v109.size.width = a11;
            v109.size.height = v41;
            CGRectGetMinX(v109);
          }
          v48 = 0;
LABEL_43:
          *((double *)v102 + v42) = (double)v48;
          if (v40 <= (double)v48)
            v40 = (double)v48;
          ++v42;
          v25 = v97;
        }
        while (v42 != v94);
      }
      a12 = v41;
      if (v85 != 2)
      {
        v27 = a11;
        a3 = v88;
        a4 = v90;
        if (!v86)
          goto LABEL_68;
        goto LABEL_62;
      }
      v59 = FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(v25);
      v27 = a11;
      a3 = v88;
      a4 = v90;
      v31 = v86;
      if (v84 >= 1 && v59 != 1)
      {
        v60 = 0;
        if (v86 <= 1)
          v61 = 1;
        else
          v61 = v86;
        do
        {
          v62 = (const __CFArray *)CFArrayGetValueAtIndex(v25, v60);
          if (v62)
          {
            v63 = v62;
            if (CFArrayGetCount(v62))
            {
              CFArrayGetValueAtIndex(v63, 0);
              FigCFDictionarySetCGFloat();
            }
          }
          ++v60;
        }
        while (v61 != v60);
      }
    }
  }
  else
  {
    v101 = 0;
    if (a2 == 1)
    {
      v31 = 0;
      goto LABEL_22;
    }
    v40 = 0.0;
    if ((a2 & 0xFFFFFFFE) != 2)
      goto LABEL_68;
    if (a2 == 2)
      FigCaptionLayoutDetectAndChooseAlignmentForCaptionElement(0);
    v31 = 0;
  }
  if (!v31)
    goto LABEL_68;
LABEL_62:
  v64 = (const __CFArray *)CFArrayGetValueAtIndex(v25, 0);
  if (v64)
  {
    v65 = v64;
    if (CFArrayGetCount(v64))
    {
      LODWORD(v102[0]) = 0;
      v66 = (const __CFDictionary *)CFArrayGetValueAtIndex(v65, 0);
      if (cclayout_getLocationFromCommandData(v66, 0, v102))
      {
        if ((int)((double)(LODWORD(v102[0]) - 1) - a10))
          FigCFDictionarySetCGFloat();
      }
    }
  }
LABEL_68:
  v110.origin.x = a9;
  v110.origin.y = a10;
  v110.size.width = v27;
  v110.size.height = a12;
  key = CGRectGetHeight(v110);
  v67 = (double *)MEMORY[0x1E0C9D628];
  v95 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v111.origin.x = a9;
  v111.origin.y = a10;
  v111.size.width = v27;
  v111.size.height = a12;
  v98 = *(double *)&a17 * CGRectGetWidth(v111);
  v112.origin.x = a9;
  v112.origin.y = a10;
  v112.size.width = v27;
  v112.size.height = a12;
  v68 = *(double *)&a18 * CGRectGetHeight(v112);
  v113.origin.x = a9;
  v113.origin.y = a10;
  v113.size.width = v27;
  v113.size.height = a12;
  v69 = a13 + CGRectGetMinX(v113) * *(double *)&a17;
  v92 = a12;
  v114.origin.x = a9;
  v114.origin.y = a10;
  v114.size.width = v27;
  v114.size.height = a12;
  MinY = CGRectGetMinY(v114);
  if (a4 == 1)
  {
    v71 = a14 + MinY * *(double *)&a18;
    v72 = v98;
  }
  else
  {
    v73 = a14 + (15.0 - MinY) * *(double *)&a18;
    v115.origin.x = v69;
    v115.origin.y = v95;
    v72 = v98;
    v115.size.width = v98;
    v115.size.height = v68;
    v71 = v73 - CGRectGetHeight(v115);
  }
  if (a3 != 2)
  {
    if (a3 != 1)
    {
      if (a3 != 3)
        return *v67;
      v69 = a19;
    }
    keya = *(double *)&a24 * key;
    v118.origin.x = a9;
    v118.origin.y = a10;
    v118.size.width = a11;
    v118.size.height = v92;
    if (CGRectGetMinY(v118) >= 7.0)
    {
      v79 = *(_QWORD *)&a19;
      if (a4 == 1)
      {
        CGRectGetMaxY(*(CGRect *)&v79);
        v120.origin.x = a9;
        v120.origin.y = a10;
        v120.size.width = a11;
        v120.size.height = v92;
        CGRectGetMinY(v120);
        return v69;
      }
      CGRectGetMinY(*(CGRect *)&v79);
      v122.origin.x = a9;
      v122.origin.y = a10;
      v122.size.width = a11;
      v122.size.height = v92;
      CGRectGetMinY(v122);
    }
    else
    {
      v75 = *(_QWORD *)&a19;
      if (a4 == 1)
      {
        CGRectGetMinY(*(CGRect *)&v75);
        v119.origin.x = a9;
        v119.origin.y = a10;
        v119.size.width = a11;
        v119.size.height = v92;
        CGRectGetMinY(v119);
        return v69;
      }
      CGRectGetMaxY(*(CGRect *)&v75);
      v121.origin.x = a9;
      v121.origin.y = a10;
      v121.size.width = a11;
      v121.size.height = v92;
      CGRectGetMinY(v121);
    }
    v74 = v69;
    v123.origin.x = v69;
    v123.origin.y = v95;
    v123.size.width = v40;
    v123.size.height = keya;
    CGRectGetHeight(v123);
    return v74;
  }
  v116.origin.x = v69;
  v116.origin.y = v71;
  v116.size.width = v72;
  v116.size.height = v68;
  v74 = v69 + (CGRectGetWidth(v116) - v40) * 0.5;
  v117.origin.x = v69;
  v117.origin.y = v71;
  v117.size.width = v72;
  v117.size.height = v68;
  CGRectGetHeight(v117);
  return v74;
}

double cclayout_offsetRectToFitBoundary(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinX;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  CGFloat v23;
  double v24;
  double MaxX;
  CGFloat v26;
  double v27;
  double MinY;
  double v29;
  double v30;
  double MaxY;
  CGFloat v32;
  double v33;
  double result;
  CGFloat dxa;
  CGFloat rect;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v15 = a5;
  v39.origin.x = a5;
  v16 = a6;
  v39.origin.y = a6;
  v17 = a7;
  v39.size.width = a7;
  rect = a8;
  v39.size.height = a8;
  if (MinX >= CGRectGetMinX(v39))
  {
    v42.origin.x = v15;
    v18 = v16;
    v19 = v15;
    v42.origin.y = v18;
    v20 = v17;
    v42.size.width = v17;
    v42.size.height = rect;
    MaxX = CGRectGetMaxX(v42);
    v43.origin.x = a1;
    v43.origin.y = a2;
    v23 = a3;
    v22 = a4;
    v43.size.width = a3;
    v43.size.height = a4;
    v26 = CGRectGetMaxX(v43);
    v24 = 0.0;
    if (MaxX < v26)
    {
      v44.origin.x = a1;
      v44.origin.y = a2;
      v44.size.width = a3;
      v44.size.height = a4;
      v27 = CGRectGetMaxX(v44);
      v45.origin.x = v19;
      v45.origin.y = v18;
      v45.size.width = v20;
      v45.size.height = rect;
      v24 = -(v27 - CGRectGetMaxX(v45));
    }
  }
  else
  {
    v40.origin.x = v15;
    v18 = v16;
    v19 = v15;
    v40.origin.y = v18;
    v20 = v17;
    v40.size.width = v17;
    v40.size.height = rect;
    v21 = CGRectGetMinX(v40);
    v41.origin.x = a1;
    v41.origin.y = a2;
    v23 = a3;
    v22 = a4;
    v41.size.width = a3;
    v41.size.height = a4;
    v24 = v21 - CGRectGetMinX(v41);
  }
  dxa = v24;
  v46.origin.x = a1;
  v46.origin.y = a2;
  v46.size.width = v23;
  v46.size.height = v22;
  MinY = CGRectGetMinY(v46);
  v47.origin.x = v19;
  v47.origin.y = v18;
  v47.size.width = v20;
  v47.size.height = rect;
  if (MinY >= CGRectGetMinY(v47))
  {
    v50.origin.x = v19;
    v50.origin.y = v18;
    v50.size.width = v20;
    v50.size.height = rect;
    MaxY = CGRectGetMaxY(v50);
    v51.origin.x = a1;
    v51.origin.y = a2;
    v51.size.width = v23;
    v51.size.height = v22;
    v32 = CGRectGetMaxY(v51);
    v30 = 0.0;
    if (MaxY < v32)
    {
      v52.origin.x = a1;
      v52.origin.y = a2;
      v52.size.width = v23;
      v52.size.height = v22;
      v33 = CGRectGetMaxY(v52);
      v53.origin.x = v19;
      v53.origin.y = v18;
      v53.size.width = v20;
      v53.size.height = rect;
      v30 = -(v33 - CGRectGetMaxY(v53));
    }
  }
  else
  {
    v48.origin.x = v19;
    v48.origin.y = v18;
    v48.size.width = v20;
    v48.size.height = rect;
    v29 = CGRectGetMinY(v48);
    v49.origin.x = a1;
    v49.origin.y = a2;
    v49.size.width = v23;
    v49.size.height = v22;
    v30 = v29 - CGRectGetMinY(v49);
  }
  v54.origin.x = a1;
  v54.origin.y = a2;
  v54.size.width = v23;
  v54.size.height = v22;
  *(_QWORD *)&result = (unint64_t)CGRectOffset(v54, dxa, v30);
  return result;
}

CGColorRef cclayout_createDeviceRGBColor(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGColorSpace *v4;
  CGColorRef v5;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  v4 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  v5 = CGColorCreate(v4, components);
  CGColorSpaceRelease(v4);
  return v5;
}

double cclayout_unionCFDataRects(const void *a1)
{
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CFTypeID v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CFTypeID v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;

  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
  {
    if (a1)
    {
      Count = CFArrayGetCount((CFArrayRef)a1);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
          v18.origin.x = cclayout_unionCFDataRects(ValueAtIndex);
          v18.origin.y = v11;
          v18.size.width = v12;
          v18.size.height = v13;
          v16.origin.x = x;
          v16.origin.y = y;
          v16.size.width = width;
          v16.size.height = height;
          v17 = CGRectUnion(v16, v18);
          x = v17.origin.x;
          y = v17.origin.y;
          width = v17.size.width;
          height = v17.size.height;
        }
      }
    }
  }
  else
  {
    v14 = CFGetTypeID(a1);
    if (v14 == CFDataGetTypeID())
      return *(double *)CFDataGetBytePtr((CFDataRef)a1);
  }
  return x;
}

void cclayout_offsetCFDataRects(void *a1, double a2, double a3)
{
  CFTypeID v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v11;
  CGRect v12;
  CFRange v13;
  CGRect v14;

  v6 = CFGetTypeID(a1);
  if (v6 == CFArrayGetTypeID())
  {
    if (a1)
    {
      Count = CFArrayGetCount((CFArrayRef)a1);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a1, i);
          cclayout_offsetCFDataRects(ValueAtIndex, a2, a3);
        }
      }
    }
  }
  else
  {
    v11 = CFGetTypeID(a1);
    if (v11 == CFDataGetTypeID())
    {
      v14 = *(CGRect *)CFDataGetBytePtr((CFDataRef)a1);
      v12 = CGRectOffset(v14, a2, a3);
      v13.location = 0;
      v13.length = 32;
      CFDataReplaceBytes((CFMutableDataRef)a1, v13, (const UInt8 *)&v12, 32);
    }
  }
}

void cclayout_AddRectWithColorAsPath(const __CFDictionary *a1, const void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGPath *Mutable;
  CGPath *Value;
  CGRect v14;

  Mutable = CGPathCreateMutable();
  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  CGPathAddRect(Mutable, 0, v14);
  Value = (CGPath *)CFDictionaryGetValue(a1, a2);
  if (Value)
    CGPathAddPath(Value, 0, Mutable);
  else
    CFDictionaryAddValue(a1, a2, Mutable);
  CGPathRelease(Mutable);
}

uint64_t FigTTMLTextCreate(const __CFAllocator *a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t DerivedStorage;
  uint64_t v12;
  const char *v13;
  const __CFString *v14;
  __CFString *v15;

  v8 = FigTTMLGetLibXMLAccess();
  if (!v8)
    return FigSignalErrorAt();
  v9 = v8;
  if (a4)
  {
    FigTTMLNodeGetClassID();
    v10 = CMDerivedObjectCreate();
    if ((_DWORD)v10)
    {
      v13 = 0;
    }
    else
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      v12 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, a3);
      if ((_DWORD)v12)
      {
        v10 = v12;
        v13 = 0;
      }
      else
      {
        v13 = (const char *)(*(uint64_t (**)(uint64_t))(v9 + 80))(a2);
        v14 = CFStringCreateWithCString(a1, v13, 0x8000100u);
        if (FigTTMLNodeUseDefaultWhitespaceHandling(0))
        {
          v15 = FigTTMLCopyStringWithDefaultWhitespaceHandling(v14);
          if (v14)
            CFRelease(v14);
        }
        else
        {
          v15 = (__CFString *)v14;
        }
        *(_QWORD *)(DerivedStorage + 136) = v15;
        v10 = FigTTMLSkipNode(a2, (uint64_t *)a3, *(__CFArray **)(DerivedStorage + 128));
        if (!(_DWORD)v10)
          *a4 = 0;
      }
    }
  }
  else
  {
    v10 = FigSignalErrorAt();
    v13 = 0;
  }
  (*(void (**)(const char *))(v9 + 112))(v13);
  return v10;
}

uint64_t FigTTMLTextCopyContent(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;
  CFTypeRef v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = *(CFTypeRef *)(DerivedStorage + 136);
  if (v4)
    v4 = CFRetain(v4);
  *a2 = v4;
  return 0;
}

void figTTMLText_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v1 = *(const void **)(DerivedStorage + 136);
  if (v1)
    CFRelease(v1);
  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFTypeRef figTTMLText_CopyDebugDesc()
{
  CFTypeRef result;

  result = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 136);
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t figTTMLText_CopyChildNodeArray(const void *a1, CFMutableArrayRef *a2)
{
  const __CFAllocator *v3;

  if (a2)
  {
    v3 = CFGetAllocator(a1);
    *a2 = CFArrayCreateMutable(v3, 0, MEMORY[0x1E0C9B378]);
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t figTTMLText_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2)
    return FigSignalErrorAt();
  *a2 = 14;
  return 0;
}

uint64_t FigVideoCompositorCreateCustom(const __CFAllocator *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t DerivedStorage;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFMutableSetRef Mutable;
  uint64_t v14;

  FigVideoCompositorGetClassID();
  v5 = CMDerivedObjectCreate();
  if ((_DWORD)v5)
    return v5;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 112) = 0;
  *(_DWORD *)(DerivedStorage + 88) = 1065353216;
  *(_DWORD *)(DerivedStorage + 160) = 0;
  *(_QWORD *)(DerivedStorage + 360) = 0x7FFFFFFFLL;
  *(_QWORD *)(DerivedStorage + 328) = 0x7FFFFFFFLL;
  v7 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 16) = v7;
  if (!v7)
    return FigSignalErrorAt();
  v8 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 168) = v8;
  if (!v8)
    return FigSignalErrorAt();
  v9 = FigDispatchQueueCreateWithPriority();
  *(_QWORD *)(DerivedStorage + 192) = v9;
  if (!v9)
    return FigSignalErrorAt();
  v10 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 216) = v10;
  if (!v10)
    return FigSignalErrorAt();
  v11 = FigSimpleMutexCreate();
  *(_QWORD *)(DerivedStorage + 296) = v11;
  if (!v11)
    return FigSignalErrorAt();
  v12 = FigSemaphoreCreate();
  *(_QWORD *)(DerivedStorage + 312) = v12;
  if (!v12)
  {
    FigSignalErrorAt();
    return 0;
  }
  Mutable = CFSetCreateMutable(a1, 0, 0);
  *(_QWORD *)(DerivedStorage + 304) = Mutable;
  if (!Mutable)
    return FigSignalErrorAt();
  v14 = 0;
  *a3 = 0;
  return v14;
}

uint64_t customVideoCompositor_Finalize(void *a1)
{
  uint64_t DerivedStorage;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t result;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFSetApplyFunction(*(CFSetRef *)(DerivedStorage + 304), (CFSetApplierFunction)customVideoCompositor_purgePendingFrame, a1);
  v3 = *(const void **)(DerivedStorage + 304);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(DerivedStorage + 48) = 0;
  }
  v5 = *(const void **)(DerivedStorage + 56);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(DerivedStorage + 56) = 0;
  }
  v6 = *(const void **)(DerivedStorage + 72);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(DerivedStorage + 72) = 0;
  }
  v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(DerivedStorage + 64) = 0;
  }
  v8 = *(const void **)(DerivedStorage + 80);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(DerivedStorage + 80) = 0;
  }
  v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(DerivedStorage + 32) = 0;
  }
  v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(DerivedStorage + 40) = 0;
  }
  v11 = *(const void **)(DerivedStorage + 24);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(DerivedStorage + 24) = 0;
  }
  if (*(_QWORD *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(_QWORD *)DerivedStorage = 0;
  }
  v12 = *(const void **)(DerivedStorage + 8);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
  v13 = *(const void **)(DerivedStorage + 96);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(DerivedStorage + 96) = 0;
  }
  v14 = *(const void **)(DerivedStorage + 104);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(DerivedStorage + 104) = 0;
  }
  v15 = *(void **)(DerivedStorage + 120);
  if (v15)
  {
    *(_QWORD *)(DerivedStorage + 120) = 0;
    free(v15);
  }
  v16 = *(void **)(DerivedStorage + 128);
  if (v16)
  {
    *(_QWORD *)(DerivedStorage + 128) = 0;
    free(v16);
  }
  v17 = *(void **)(DerivedStorage + 144);
  if (v17)
  {
    *(_QWORD *)(DerivedStorage + 144) = 0;
    free(v17);
  }
  v18 = *(void **)(DerivedStorage + 152);
  if (v18)
  {
    *(_QWORD *)(DerivedStorage + 152) = 0;
    free(v18);
  }
  if (*(_QWORD *)(DerivedStorage + 16))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 16) = 0;
  }
  v19 = *(NSObject **)(DerivedStorage + 168);
  if (v19)
  {
    dispatch_release(v19);
    *(_QWORD *)(DerivedStorage + 168) = 0;
  }
  v20 = *(NSObject **)(DerivedStorage + 192);
  if (v20)
  {
    dispatch_release(v20);
    *(_QWORD *)(DerivedStorage + 192) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 216))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 216) = 0;
  }
  if (*(_QWORD *)(DerivedStorage + 296))
  {
    FigSimpleMutexDestroy();
    *(_QWORD *)(DerivedStorage + 296) = 0;
  }
  result = *(_QWORD *)(DerivedStorage + 312);
  if (result)
  {
    result = FigSemaphoreDestroy();
    *(_QWORD *)(DerivedStorage + 312) = 0;
  }
  return result;
}

__CFString *customVideoCompositor_CopyDebugDescription(const void *a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  CFIndex v4;
  CFAllocatorRef v5;
  int v6;
  CFTypeRef v7;
  CFTypeRef cf;

  v2 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v2, 0);
  cf = 0;
  v4 = CFGetRetainCount(a1);
  v5 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoCompositor_Custom %p retainCount: %ld allocator: %p "), a1, v4, v5);
  v6 = cvc_copyPerformanceDictionary((uint64_t)a1, (CFMutableDictionaryRef *)&cf);
  v7 = cf;
  if (!v6 && cf)
  {
    CFStringAppendFormat(Mutable, 0, CFSTR(", performanceDictionary %@"), cf);
    v7 = cf;
  }
  if (v7)
    CFRelease(v7);
  CFStringAppendFormat(Mutable, 0, CFSTR(">"));
  return Mutable;
}

uint64_t customVideoCompositor_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage;
  const void *v8;
  uint64_t v9;
  __CFDictionary *UInt32;
  const void **v12;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (CFEqual(a2, CFSTR("RenderDimensions")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 24);
    v8 = *(const void **)(DerivedStorage + 24);
    if (!v8)
    {
LABEL_4:
      v9 = 0;
      goto LABEL_5;
    }
LABEL_3:
    CFRetain(v8);
    goto LABEL_4;
  }
  if (CFEqual(a2, CFSTR("RenderPixelAspectRatio")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 32);
    v8 = *(const void **)(DerivedStorage + 32);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("RenderEdgeProcessingPixels")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 40);
    v8 = *(const void **)(DerivedStorage + 40);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredAttributes")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 48);
    v8 = *(const void **)(DerivedStorage + 48);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredYCbCrMatrix")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 56);
    v8 = *(const void **)(DerivedStorage + 56);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredColorPrimaries")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 72);
    v8 = *(const void **)(DerivedStorage + 72);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("DestinationPixelBufferDesiredTransferFunction")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 64);
    v8 = *(const void **)(DerivedStorage + 64);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("SourcePixelBufferAttributes")))
  {
    *a4 = *(CFMutableDictionaryRef *)(DerivedStorage + 80);
    v8 = *(const void **)(DerivedStorage + 80);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (CFEqual(a2, CFSTR("RenderScale")))
  {
    UInt32 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, (const void *)(DerivedStorage + 88));
LABEL_36:
    v9 = 0;
    *a4 = UInt32;
    goto LABEL_5;
  }
  if (CFEqual(a2, CFSTR("CanApplyRenderScale")))
  {
    v12 = (const void **)MEMORY[0x1E0C9AE50];
    goto LABEL_34;
  }
  if (CFEqual(a2, CFSTR("HighQualityRendering")))
  {
    v12 = (const void **)MEMORY[0x1E0C9AE50];
    if (!*(_BYTE *)(DerivedStorage + 116))
      v12 = (const void **)MEMORY[0x1E0C9AE40];
LABEL_34:
    UInt32 = (__CFDictionary *)*v12;
    if (!*v12)
      goto LABEL_36;
LABEL_35:
    UInt32 = (__CFDictionary *)CFRetain(UInt32);
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("PixelBufferPoolSharingID")))
  {
    UInt32 = *(__CFDictionary **)(DerivedStorage + 96);
    if (!UInt32)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("CompositorInstanceID")))
  {
    UInt32 = *(__CFDictionary **)(DerivedStorage + 104);
    if (!UInt32)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (CFEqual(a2, CFSTR("SourceColorConformanceCapabilityLevel")))
  {
    UInt32 = (__CFDictionary *)FigCFNumberCreateUInt32();
    goto LABEL_36;
  }
  if (CFEqual(a2, CFSTR("PerformanceDictionary")))
  {
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    v9 = cvc_copyPerformanceDictionary(a1, a4);
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
LABEL_5:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
  return v9;
}

uint64_t customVideoCompositor_SetProperty(const void *a1, void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  CFTypeID TypeID;
  const void *v8;
  int v9;
  CFTypeID v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  const __CFNumber *v13;
  CFTypeID v14;
  CFTypeID v15;
  const void *v16;
  CFTypeID v17;
  CFIndex v18;
  CFTypeID v19;
  const void *ValueAtIndex;
  CFTypeID v21;
  const void *v22;
  CGFloat width;
  CFTypeID v24;
  CFTypeID v25;
  CFTypeID v26;
  const __CFAllocator *v27;
  CFDictionaryRef v28;
  CFDictionaryRef v29;
  CFTypeID v30;
  const void *v31;
  CGFloat v32;
  CFTypeID v33;
  float v34;
  CFTypeID v35;
  CFTypeID v37;
  void *v38;
  CFTypeID v39;
  CFTypeID v40;
  const void *v41;
  CFTypeID v42;
  CGSize cf;
  void *values;
  int valuePtr;

  values = a2;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  if (CFEqual(CFSTR("RenderDimensions"), a2))
  {
    cf.width = 0.0;
    cf.height = 0.0;
    if (a3)
    {
      TypeID = CFDictionaryGetTypeID();
      if (TypeID == CFGetTypeID(a3)
        && CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a3, &cf)
        && cf.width > 0.0
        && cf.height > 0.0)
      {
        v8 = *(const void **)(DerivedStorage + 24);
        *(_QWORD *)(DerivedStorage + 24) = a3;
        CFRetain(a3);
        if (v8)
          CFRelease(v8);
        a3 = 0;
        goto LABEL_10;
      }
    }
    a3 = (const void *)FigSignalErrorAt();
    goto LABEL_12;
  }
  if (CFEqual(CFSTR("RenderPixelAspectRatio"), a2))
  {
    if (a3)
    {
      v10 = CFDictionaryGetTypeID();
      if (v10 == CFGetTypeID(a3))
      {
        Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8E60]);
        v12 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CA8E70]);
        LODWORD(cf.width) = 0;
        valuePtr = 0;
        if (Value)
        {
          v13 = v12;
          v14 = CFNumberGetTypeID();
          if (v14 == CFGetTypeID(Value))
          {
            CFNumberGetValue(Value, kCFNumberIntType, &cf);
            if (SLODWORD(cf.width) >= 1)
            {
              if (v13)
              {
                v15 = CFNumberGetTypeID();
                if (v15 == CFGetTypeID(v13))
                {
                  CFNumberGetValue(v13, kCFNumberIntType, &valuePtr);
                  if (valuePtr >= 1)
                  {
                    v16 = *(const void **)(DerivedStorage + 32);
                    *(_QWORD *)(DerivedStorage + 32) = a3;
LABEL_58:
                    CFRetain(a3);
                    goto LABEL_59;
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_89;
    }
    v16 = *(const void **)(DerivedStorage + 32);
    *(_QWORD *)(DerivedStorage + 32) = 0;
LABEL_59:
    if (v16)
      CFRelease(v16);
    *(_BYTE *)(DerivedStorage + 117) = 1;
    goto LABEL_62;
  }
  if (CFEqual(CFSTR("RenderEdgeProcessingPixels"), a2))
  {
    if (!a3)
    {
      v16 = *(const void **)(DerivedStorage + 40);
      *(_QWORD *)(DerivedStorage + 40) = 0;
      goto LABEL_59;
    }
    v17 = CFArrayGetTypeID();
    if (v17 == CFGetTypeID(a3) && CFArrayGetCount((CFArrayRef)a3) == 4)
    {
      v18 = 0;
      while (1)
      {
        v19 = CFNumberGetTypeID();
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a3, v18);
        if (v19 != CFGetTypeID(ValueAtIndex))
          break;
        if (++v18 == 4)
        {
          v16 = *(const void **)(DerivedStorage + 40);
          *(_QWORD *)(DerivedStorage + 40) = a3;
          goto LABEL_58;
        }
      }
    }
LABEL_89:
    a3 = (const void *)FigSignalErrorAt();
LABEL_90:
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    return (uint64_t)a3;
  }
  if (CFEqual(CFSTR("DestinationPixelBufferDesiredAttributes"), a2))
  {
    if (a3)
    {
      v21 = CFDictionaryGetTypeID();
      if (v21 != CFGetTypeID(a3))
        goto LABEL_89;
    }
    cf.width = 0.0;
    a3 = (const void *)customVideoCompositor_copySuitablePixelBufferAttributes(a3, 1, (CFDictionaryRef *)&cf);
    if (!(_DWORD)a3)
    {
      v22 = *(const void **)(DerivedStorage + 48);
      width = cf.width;
      *(CGFloat *)(DerivedStorage + 48) = cf.width;
      if (width != 0.0)
        CFRetain(*(CFTypeRef *)&width);
      if (v22)
        CFRelease(v22);
      if (width != 0.0)
        CFRelease(*(CFTypeRef *)&width);
      goto LABEL_10;
    }
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  if (CFEqual(CFSTR("DestinationPixelBufferDesiredYCbCrMatrix"), a2))
  {
    if (a3)
    {
      v24 = CFStringGetTypeID();
      if (v24 == CFGetTypeID(a3))
      {
        v16 = *(const void **)(DerivedStorage + 56);
        *(_QWORD *)(DerivedStorage + 56) = a3;
        goto LABEL_58;
      }
      goto LABEL_89;
    }
    v16 = *(const void **)(DerivedStorage + 56);
    *(_QWORD *)(DerivedStorage + 56) = 0;
    goto LABEL_59;
  }
  if (CFEqual(CFSTR("DestinationPixelBufferDesiredColorPrimaries"), a2))
  {
    if (!a3)
    {
      v16 = *(const void **)(DerivedStorage + 72);
      *(_QWORD *)(DerivedStorage + 72) = 0;
      goto LABEL_59;
    }
    v25 = CFStringGetTypeID();
    if (v25 == CFGetTypeID(a3))
    {
      v16 = *(const void **)(DerivedStorage + 72);
      *(_QWORD *)(DerivedStorage + 72) = a3;
      goto LABEL_58;
    }
    goto LABEL_89;
  }
  if (CFEqual(CFSTR("DestinationPixelBufferDesiredTransferFunction"), a2))
  {
    if (!a3)
    {
      v16 = *(const void **)(DerivedStorage + 64);
      *(_QWORD *)(DerivedStorage + 64) = 0;
      goto LABEL_59;
    }
    v26 = CFStringGetTypeID();
    if (v26 == CFGetTypeID(a3))
    {
      v16 = *(const void **)(DerivedStorage + 64);
      *(_QWORD *)(DerivedStorage + 64) = a3;
      goto LABEL_58;
    }
    goto LABEL_89;
  }
  if (CFEqual(CFSTR("SourcePixelBufferAttributes"), a2))
  {
    if (!a3 || (v30 = CFDictionaryGetTypeID(), v30 == CFGetTypeID(a3)))
    {
      cf.width = 0.0;
      a3 = (const void *)customVideoCompositor_copySuitablePixelBufferAttributes(a3, 0, (CFDictionaryRef *)&cf);
      v9 = 0;
      if (!(_DWORD)a3)
      {
        v31 = *(const void **)(DerivedStorage + 80);
        v32 = cf.width;
        *(CGFloat *)(DerivedStorage + 80) = cf.width;
        if (v32 != 0.0)
          CFRetain(*(CFTypeRef *)&v32);
        if (v31)
          CFRelease(v31);
        if (v32 != 0.0)
          CFRelease(*(CFTypeRef *)&v32);
        v9 = 1;
      }
LABEL_13:
      MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
      if (!v9)
        return (uint64_t)a3;
      goto LABEL_63;
    }
    goto LABEL_89;
  }
  if (CFEqual(CFSTR("RenderScale"), a2))
  {
    LODWORD(cf.width) = 1065353216;
    if (a3)
    {
      v33 = CFGetTypeID(a3);
      if (v33 != CFNumberGetTypeID()
        || (CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &cf),
            v34 = *(float *)&cf.width,
            *(float *)&cf.width <= 0.0))
      {
        a3 = (const void *)FigSignalErrorAt();
        if ((_DWORD)a3)
          goto LABEL_12;
        v34 = *(float *)&cf.width;
      }
    }
    else
    {
      v34 = 1.0;
    }
    a3 = 0;
    *(float *)(DerivedStorage + 88) = v34;
LABEL_10:
    v9 = 1;
    *(_BYTE *)(DerivedStorage + 117) = 1;
    goto LABEL_13;
  }
  if (!CFEqual(CFSTR("HighQualityRendering"), a2))
  {
    if (CFEqual(CFSTR("ClientPID"), a2))
    {
      if (a3)
      {
        v37 = CFGetTypeID(a3);
        if (v37 == CFNumberGetTypeID())
        {
          v38 = (void *)(DerivedStorage + 164);
LABEL_103:
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v38);
          goto LABEL_110;
        }
        goto LABEL_112;
      }
      *(_DWORD *)(DerivedStorage + 164) = 0;
      goto LABEL_110;
    }
    if (CFEqual(CFSTR("WorkerThreadPriority"), a2))
    {
      if (a3)
      {
        v39 = CFGetTypeID(a3);
        if (v39 == CFNumberGetTypeID())
        {
          v38 = (void *)(DerivedStorage + 160);
          goto LABEL_103;
        }
LABEL_112:
        a3 = 0;
        goto LABEL_90;
      }
      *(_DWORD *)(DerivedStorage + 160) = 0;
LABEL_110:
      if (*(_QWORD *)(DerivedStorage + 168))
        FigDispatchQueueSetPriorityAndClientPID();
      goto LABEL_112;
    }
    if (CFEqual(CFSTR("CompositorInstanceID"), a2))
    {
      if (a3)
      {
        v40 = CFGetTypeID(a3);
        if (v40 != CFNumberGetTypeID())
          goto LABEL_112;
        v41 = *(const void **)(DerivedStorage + 104);
        *(_QWORD *)(DerivedStorage + 104) = a3;
LABEL_115:
        CFRetain(a3);
        goto LABEL_117;
      }
      v41 = *(const void **)(DerivedStorage + 104);
      *(_QWORD *)(DerivedStorage + 104) = 0;
    }
    else
    {
      if (!CFEqual(CFSTR("PixelBufferPoolSharingID"), a2))
      {
        if (!CFEqual(CFSTR("LoopTimeRange"), a2))
        {
          if (!CFEqual(CFSTR("SourceColorConformanceCapabilityLevel"), a2))
            goto LABEL_89;
          if (!a3)
            goto LABEL_90;
          v42 = CFGetTypeID(a3);
          if (v42 == CFNumberGetTypeID())
            CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 112));
        }
        goto LABEL_112;
      }
      v41 = *(const void **)(DerivedStorage + 96);
      *(_QWORD *)(DerivedStorage + 96) = a3;
      if (a3)
        goto LABEL_115;
    }
LABEL_117:
    if (v41)
      CFRelease(v41);
    goto LABEL_112;
  }
  if (a3)
  {
    v35 = CFBooleanGetTypeID();
    if (v35 != CFGetTypeID(a3))
      goto LABEL_89;
    *(_BYTE *)(DerivedStorage + 116) = CFBooleanGetValue((CFBooleanRef)a3);
  }
  else
  {
    *(_BYTE *)(DerivedStorage + 116) = 0;
  }
LABEL_62:
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
LABEL_63:
  v27 = CFGetAllocator(a1);
  v28 = CFDictionaryCreate(v27, (const void **)kFigVideoCompositorParameter_ChangedProperty, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v28)
    return FigSignalErrorAt();
  v29 = v28;
  CMNotificationCenterGetDefaultLocalCenter();
  a3 = (const void *)CMNotificationCenterPostNotification();
  CFRelease(v29);
  return (uint64_t)a3;
}

uint64_t customVideoCompositor_purgePendingFrame(uint64_t a1)
{
  uint64_t DerivedStorage;
  void (*v3)(_QWORD, uint64_t, uint64_t, _QWORD);

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(DerivedStorage + 176);
  if (v3)
    v3(*(_QWORD *)(DerivedStorage + 184), a1, 4294954790, 0);
  return FigSemaphoreSignal();
}

uint64_t cvc_copyPerformanceDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const __CFDictionary *v8;
  uint64_t (*v9)(_QWORD, CFTypeRef *);
  const __CFDictionary *v10;
  CFMutableDictionaryRef Mutable;
  uint64_t v12;
  void **v13;
  double valuePtr;
  CFTypeRef cf;
  void *values[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *keys[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!a2)
    return 0;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  valuePtr = 0.0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  keys[0] = CFSTR("NumberOfSourceFramesPassedThrough");
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, (const void *)(DerivedStorage + 320));
  keys[1] = CFSTR("TotalNumberOfPreProcessedLayers");
  values[1] = CFNumberCreate(v4, kCFNumberIntType, (const void *)(DerivedStorage + 352));
  if (*(int *)(DerivedStorage + 384) < 1)
  {
    v5 = 2;
  }
  else
  {
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 360) / 1000000.0);
    *(_QWORD *)&v28 = 0x1E3004E18;
    *(_QWORD *)&v18 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 368) / 1000000.0);
    *((_QWORD *)&v28 + 1) = 0x1E3004E38;
    *((_QWORD *)&v18 + 1) = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 376)
                     / (float)((float)*(int *)(DerivedStorage + 384) * 1000000.0));
    *(_QWORD *)&v29 = 0x1E3004E58;
    *(_QWORD *)&v19 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    v5 = 5;
  }
  if (*(int *)(DerivedStorage + 352) >= 1)
  {
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 328) / 1000000.0);
    keys[v5] = CFSTR("MinPreprocessingTime");
    values[v5] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 336) / 1000000.0);
    keys[v5 + 1] = CFSTR("MaxPreprocessingTime");
    values[v5 + 1] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 344)
                     / (float)((float)*(int *)(DerivedStorage + 352) * 1000000.0));
    keys[v5 + 2] = CFSTR("AveragePreprocessingTime");
    values[v5 + 2] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    v5 += 3;
  }
  if (*(int *)(DerivedStorage + 416) >= 1)
  {
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 392) / 1000000.0);
    keys[v5] = CFSTR("MinBufferReadyingTime");
    values[v5] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 400) / 1000000.0);
    keys[v5 + 1] = CFSTR("MaxBufferReadyingTime");
    values[v5 + 1] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(DerivedStorage + 408)
                     / (float)((float)*(int *)(DerivedStorage + 416) * 1000000.0));
    keys[v5 + 2] = CFSTR("AverageBufferReadyingTime");
    values[v5 + 2] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    v5 += 3;
  }
  v7 = v5;
  v8 = CFDictionaryCreate(v4, (const void **)keys, (const void **)values, v5, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 216));
  v9 = *(uint64_t (**)(_QWORD, CFTypeRef *))(DerivedStorage + 248);
  if (v9)
    v6 = v9(*(_QWORD *)(DerivedStorage + 288), &cf);
  else
    v6 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 216));
  if (!(_DWORD)v6)
  {
    v10 = (const __CFDictionary *)cf;
    if (cf)
    {
      Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (Mutable)
      {
        CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)cvc_mergeDictionariesApplier, Mutable);
        CFDictionaryApplyFunction(v8, (CFDictionaryApplierFunction)cvc_mergeDictionariesApplier, Mutable);
LABEL_17:
        if (v8)
          CFRelease(v8);
        v6 = 0;
        goto LABEL_23;
      }
      v12 = FigSignalErrorAt();
      if (!(_DWORD)v12)
        goto LABEL_17;
      v6 = v12;
    }
  }
  Mutable = v8;
LABEL_23:
  *a2 = Mutable;
  v13 = values;
  do
  {
    if (*v13)
      CFRelease(*v13);
    ++v13;
    --v7;
  }
  while (v7);
  if (cf)
    CFRelease(cf);
  return v6;
}

void cvc_mergeDictionariesApplier(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t customVideoCompositor_copySuitablePixelBufferAttributes(const void *a1, uint64_t a2, CFDictionaryRef *a3)
{
  const __CFAllocator *v5;
  __CFDictionary *MutableCopy;
  __CFDictionary *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t PixelBufferAttributesWithIOSurfaceSupport;
  __CFArray *v11;
  __CFArray *v12;
  const __CFAllocator *v13;
  uint64_t v14;
  uint64_t v15;
  CFDictionaryRef resolvedDictionaryOut;

  resolvedDictionaryOut = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  if (!MutableCopy)
  {
    v15 = FigSignalErrorAt();
LABEL_15:
    v12 = 0;
    goto LABEL_9;
  }
  v7 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E0CA90E0]);
  CFDictionaryRemoveValue(v7, (const void *)*MEMORY[0x1E0CA8FD8]);
  CFDictionaryRemoveValue(v7, (const void *)*MEMORY[0x1E0CA8F98]);
  Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v15 = FigSignalErrorAt();
    CFRelease(v7);
    goto LABEL_15;
  }
  v9 = Mutable;
  FigGetAlignmentForIOSurfaceOutput();
  PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
  if ((_DWORD)PixelBufferAttributesWithIOSurfaceSupport)
  {
    v15 = PixelBufferAttributesWithIOSurfaceSupport;
    v12 = 0;
  }
  else
  {
    v11 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
    v12 = v11;
    if (v11)
    {
      CFArrayAppendValue(v11, 0);
      CFArrayAppendValue(v12, v7);
      v13 = CFGetAllocator(a1);
      if (CVPixelBufferCreateResolvedAttributesDictionary(v13, v12, &resolvedDictionaryOut)
        && (v14 = FigCreatePixelBufferAttributesWithIOSurfaceSupport(), (_DWORD)v14))
      {
        v15 = v14;
        if (resolvedDictionaryOut)
          CFRelease(resolvedDictionaryOut);
      }
      else
      {
        v15 = 0;
        *a3 = resolvedDictionaryOut;
        resolvedDictionaryOut = 0;
      }
    }
    else
    {
      v15 = FigSignalErrorAt();
    }
  }
  CFRelease(v7);
  CFRelease(v9);
LABEL_9:
  if (v12)
    CFRelease(v12);
  return v15;
}

uint64_t customVideoCompositor_RenderFrame(const void *a1, int a2, uint64_t a3, const void **a4, int a5, uint64_t a6, const void **a7, const void *a8, uint64_t a9, const void *a10)
{
  int v12;
  CFAllocatorRef *v13;
  const __CFAllocator *v17;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v19;
  uint64_t v20;
  __CFArray *v21;
  const void *v22;
  uint64_t v23;
  const void *UInt64;
  const __CFDictionary *v25;
  __CFDictionary *v26;
  const __CFAllocator *v27;
  uint64_t v28;
  const CFArrayCallBacks *v29;
  __CFArray *v30;
  const void *v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  int v36;
  CMTime v39;
  void *value;

  v12 = a5;
  value = 0;
  v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!a2)
  {
    v25 = 0;
    if (a5)
      goto LABEL_19;
LABEL_16:
    v26 = 0;
    goto LABEL_31;
  }
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v25 = 0;
    v26 = 0;
    goto LABEL_50;
  }
  v19 = Mutable;
  if (a2 >= 1)
  {
    v36 = v12;
    v20 = a2;
    while (1)
    {
      if (*a4)
      {
        v21 = CFArrayCreateMutable(v17, 1, MEMORY[0x1E0C9B378]);
        if (!v21)
        {
          v26 = 0;
          v30 = 0;
          v34 = 4294954510;
LABEL_45:
          v25 = v19;
          goto LABEL_32;
        }
        v22 = *a4;
        *(_OWORD *)&v39.value = *(_OWORD *)a9;
        v39.epoch = *(_QWORD *)(a9 + 16);
        v23 = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v39, v22, (uint64_t *)&value);
        if ((_DWORD)v23)
        {
          v34 = v23;
          v26 = 0;
          v30 = 0;
          goto LABEL_45;
        }
        CFArrayAppendValue(v21, value);
        if (value)
        {
          CFRelease(value);
          value = 0;
        }
        UInt64 = (const void *)FigCFNumberCreateUInt64();
        CFDictionarySetValue(v19, UInt64, v21);
        if (UInt64)
          CFRelease(UInt64);
        CFRelease(v21);
      }
      a3 += 4;
      ++a4;
      if (!--v20)
      {
        v25 = v19;
        v12 = v36;
        goto LABEL_18;
      }
    }
  }
  v25 = Mutable;
LABEL_18:
  v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (!v12)
    goto LABEL_16;
LABEL_19:
  v27 = *v13;
  v26 = CFDictionaryCreateMutable(*v13, v12, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v26)
  {
    if (v12 >= 1)
    {
      v28 = v12;
      v29 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
      do
      {
        if (*a7)
        {
          v30 = CFArrayCreateMutable(v27, 1, v29);
          if (!v30)
          {
            v21 = 0;
            goto LABEL_47;
          }
          v31 = *a7;
          *(_OWORD *)&v39.value = *(_OWORD *)a9;
          v39.epoch = *(_QWORD *)(a9 + 16);
          v32 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v39, v31, (uint64_t *)&value);
          if ((_DWORD)v32)
          {
            v34 = v32;
            v21 = 0;
            goto LABEL_32;
          }
          CFArrayAppendValue(v30, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          v33 = (const void *)FigCFNumberCreateUInt64();
          CFDictionarySetValue(v26, v33, v30);
          if (v33)
            CFRelease(v33);
          CFRelease(v30);
        }
        a6 += 4;
        ++a7;
        --v28;
      }
      while (v28);
    }
LABEL_31:
    *(_OWORD *)&v39.value = *(_OWORD *)a9;
    v39.epoch = *(_QWORD *)(a9 + 16);
    v34 = customVideoCompositor_RenderFrameFromWindow(a1, v25, v26, a8, &v39, a10, 0);
    v21 = 0;
    v30 = 0;
    goto LABEL_32;
  }
LABEL_50:
  v21 = 0;
  v30 = 0;
LABEL_47:
  v34 = 4294954510;
LABEL_32:
  if (value)
    CFRelease(value);
  if (v21)
    CFRelease(v21);
  if (v25)
    CFRelease(v25);
  if (v30)
    CFRelease(v30);
  if (v26)
    CFRelease(v26);
  return v34;
}

uint64_t customVideoCompositor_CancelPendingFrames()
{
  _QWORD *DerivedStorage;
  void (*v1)(_QWORD);
  uint64_t v2;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[27]);
  v1 = (void (*)(_QWORD))DerivedStorage[30];
  if (v1)
  {
    v1(DerivedStorage[36]);
    v2 = 0;
  }
  else
  {
    v2 = 4294954787;
  }
  MEMORY[0x19402EF04](DerivedStorage[27]);
  return v2;
}

uint64_t customVideoCompositor_SetOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[8];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2000000000;
  v13 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 168);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __customVideoCompositor_SetOutputCallback_block_invoke;
  v9[3] = &unk_1E2FBBC68;
  v9[6] = a2;
  v9[7] = a3;
  v9[4] = &v10;
  v9[5] = DerivedStorage;
  dispatch_sync(v6, v9);
  v7 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v7;
}

uint64_t customVideoCompositor_OutputCustomFrame(const void *a1, const void *a2, int a3, const void *a4)
{
  uint64_t DerivedStorage;
  int v9;
  NSObject *v10;
  _QWORD block[8];
  int v13;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 296));
  v9 = CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 304), a2);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 296));
  if (!v9)
    return FigSignalErrorAt();
  if (a4)
    CFRetain(a4);
  if (a1)
    CFRetain(a1);
  v10 = *(NSObject **)(DerivedStorage + 168);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __customVideoCompositor_OutputCustomFrame_block_invoke;
  block[3] = &__block_descriptor_tmp_8_13;
  v13 = a3;
  block[4] = a1;
  block[5] = a4;
  block[6] = DerivedStorage;
  block[7] = a2;
  dispatch_async(v10, block);
  return 0;
}

uint64_t customVideoCompositor_SetCustomCallbacks(void *a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 216));
    v8 = a2[3];
    v10 = *a2;
    v9 = a2[1];
    *(_OWORD *)(v7 + 256) = a2[2];
    *(_OWORD *)(v7 + 272) = v8;
    *(_OWORD *)(v7 + 224) = v10;
    *(_OWORD *)(v7 + 240) = v9;
  }
  else
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 296));
    CFSetApplyFunction(*(CFSetRef *)(v7 + 304), (CFSetApplierFunction)customVideoCompositor_purgePendingFrame, a1);
    CFSetRemoveAllValues(*(CFMutableSetRef *)(v7 + 304));
    MEMORY[0x19402EF04](*(_QWORD *)(v7 + 296));
    MEMORY[0x19402EEEC](*(_QWORD *)(v7 + 216));
    *(_OWORD *)(v7 + 224) = 0u;
    *(_OWORD *)(v7 + 240) = 0u;
    *(_OWORD *)(v7 + 256) = 0u;
    *(_OWORD *)(v7 + 272) = 0u;
  }
  *(_QWORD *)(v7 + 288) = a3;
  MEMORY[0x19402EF04](*(_QWORD *)(v7 + 216));
  return 0;
}

uint64_t customVideoCompositor_AnticipateRendering(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  _QWORD *DerivedStorage;
  uint64_t (*v10)(uint64_t, __int128 *, __int128 *, __int128 *, __int128 *);
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[27]);
  v10 = (uint64_t (*)(uint64_t, __int128 *, __int128 *, __int128 *, __int128 *))DerivedStorage[32];
  if (v10)
  {
    v11 = DerivedStorage[36];
    v20 = *a2;
    v21 = *((_QWORD *)a2 + 2);
    v18 = *a3;
    v19 = *((_QWORD *)a3 + 2);
    v16 = *a4;
    v17 = *((_QWORD *)a4 + 2);
    v14 = *a5;
    v15 = *((_QWORD *)a5 + 2);
    v12 = v10(v11, &v20, &v18, &v16, &v14);
  }
  else
  {
    v12 = 4294954787;
  }
  MEMORY[0x19402EF04](DerivedStorage[27]);
  return v12;
}

uint64_t customVideoCompositor_PrerollForRendering(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  _QWORD *DerivedStorage;
  uint64_t (*v12)(uint64_t, __int128 *, __int128 *, __int128 *, __int128 *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19402EEEC](DerivedStorage[27]);
  v12 = (uint64_t (*)(uint64_t, __int128 *, __int128 *, __int128 *, __int128 *, uint64_t))DerivedStorage[33];
  if (v12)
  {
    v13 = DerivedStorage[36];
    v22 = *a2;
    v23 = *((_QWORD *)a2 + 2);
    v20 = *a3;
    v21 = *((_QWORD *)a3 + 2);
    v18 = *a4;
    v19 = *((_QWORD *)a4 + 2);
    v16 = *a5;
    v17 = *((_QWORD *)a5 + 2);
    v14 = v12(v13, &v22, &v20, &v18, &v16, a6);
  }
  else
  {
    v14 = 4294954787;
  }
  MEMORY[0x19402EF04](DerivedStorage[27]);
  return v14;
}

uint64_t customVideoCompositor_CompletePreroll(const void *a1, int a2, int a3)
{
  uint64_t DerivedStorage;
  NSObject *v7;
  _QWORD block[6];
  int v10;
  int v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
    CFRetain(a1);
  v7 = *(NSObject **)(DerivedStorage + 192);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __customVideoCompositor_CompletePreroll_block_invoke;
  block[3] = &__block_descriptor_tmp_9_13;
  v10 = a2;
  v11 = a3;
  block[4] = DerivedStorage;
  block[5] = a1;
  dispatch_async(v7, block);
  return 0;
}

uint64_t customVideoCompositor_SetCompletePrerollCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  NSObject *v6;
  _QWORD block[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v6 = *(NSObject **)(DerivedStorage + 192);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __customVideoCompositor_SetCompletePrerollCallback_block_invoke;
  block[3] = &__block_descriptor_tmp_10_14;
  block[4] = DerivedStorage;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v6, block);
  return 0;
}

uint64_t customVideoCompositor_RenderFrameFromWindow(const void *a1, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4, CMTime *a5, const void *a6, uint64_t a7)
{
  uint64_t DerivedStorage;
  CFTypeID v15;
  const void *Value;
  CFTypeID v17;
  const __CFArray *v18;
  uint64_t PixelBuffer;
  __CVBuffer *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const void *v24;
  CFIndex Count;
  uint64_t UpTimeNanoseconds;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFArray *v31;
  uint64_t v32;
  __CFDictionary *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v36;
  uint64_t v37;
  int Width;
  int Height;
  CFTypeRef v40;
  size_t v41;
  size_t v42;
  const void *v43;
  CFMutableDictionaryRef MutableCopy;
  CVPixelBufferPoolRef *v45;
  const __CFAllocator *v46;
  uint64_t v47;
  const void *v48;
  const __CFDictionary *v49;
  uint64_t v50;
  const void *v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const __CFAllocator *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  const __CFArray *v63;
  uint64_t v64;
  __CFDictionary *Copy;
  CFIndex j;
  const void *v67;
  const void *v68;
  uint64_t (*v69)(uint64_t, __CFDictionary *, __CFDictionary *, const void *, CMTime *, const void *);
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t (*v73)(uint64_t, __CFDictionary *, __CFDictionary *, const void *, CMTime *, const void *, uint64_t);
  uint64_t v74;
  CFTypeRef cf;
  CFTypeRef v77;
  unsigned int v78;
  CFTypeRef v79;
  unsigned int v80;
  const void *v81;
  const void *v82;
  const void *v83;
  _QWORD block[7];
  CMTime size;
  __CVBuffer *v86;
  const __CFArray *v87;
  char v88;
  CVPixelBufferRef pixelBufferOut;
  CFTypeRef v90;
  __CFDictionary *v91;
  uint64_t v92;
  uint64_t v93;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v87 = 0;
  v86 = 0;
  if (!a4)
    goto LABEL_113;
  v15 = CFGetTypeID(a4);
  if (v15 != CFDictionaryGetTypeID())
    goto LABEL_113;
  Value = CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("PassthroughSourceVideoTrackID"));
  if (!Value)
  {
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 296));
    Count = CFSetGetCount(*(CFSetRef *)(DerivedStorage + 304));
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    if (Count > 1)
    {
      do
      {
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 296));
        FigSemaphoreWaitRelative();
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 296));
      }
      while (CFSetGetCount(*(CFSetRef *)(DerivedStorage + 304)) > 1);
    }
    v27 = FigGetUpTimeNanoseconds();
    v28 = (v27 - UpTimeNanoseconds) / 1000;
    ++*(_DWORD *)(DerivedStorage + 384);
    v29 = *(_QWORD *)(DerivedStorage + 368);
    *(_QWORD *)(DerivedStorage + 376) += v28;
    v30 = *(_QWORD *)(DerivedStorage + 360);
    if (v30 >= v28)
      v30 = (v27 - UpTimeNanoseconds) / 1000;
    if (v29 > v28)
      v28 = v29;
    *(_QWORD *)(DerivedStorage + 360) = v30;
    *(_QWORD *)(DerivedStorage + 368) = v28;
    CFSetSetValue(*(CFMutableSetRef *)(DerivedStorage + 304), a6);
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 296));
    v31 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("RequiredVideoTrackIDArray"));
    if (FigCFDictionaryGetCount() < 1)
    {
      Mutable = 0;
    }
    else if (v31)
    {
      v78 = a7;
      v32 = CFArrayGetCount(v31);
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v32, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v32 >= 1)
      {
        v81 = a6;
        for (i = 0; i != v32; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v31, i);
          v36 = (const void *)FigCFDictionaryGetValue();
          if (v36)
            CFDictionarySetValue(Mutable, ValueAtIndex, v36);
        }
        a6 = v81;
      }
      a7 = v78;
    }
    else
    {
      Mutable = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2);
    }
    v63 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a4, CFSTR("RequiredSampleDataTrackIDArray"));
    if (FigCFDictionaryGetCount() < 1)
    {
      Copy = 0;
    }
    else if (v63)
    {
      v80 = a7;
      v64 = CFArrayGetCount(v63);
      Copy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v64, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      if (v64 >= 1)
      {
        v83 = a6;
        for (j = 0; j != v64; ++j)
        {
          v67 = CFArrayGetValueAtIndex(v63, j);
          v68 = (const void *)FigCFDictionaryGetValue();
          if (v68)
            CFDictionarySetValue(Copy, v67, v68);
        }
        a6 = v83;
      }
      a7 = v80;
    }
    else
    {
      Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3);
    }
    MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 216));
    v69 = *(uint64_t (**)(uint64_t, __CFDictionary *, __CFDictionary *, const void *, CMTime *, const void *))(DerivedStorage + 272);
    if (v69)
    {
      v70 = *(_QWORD *)(DerivedStorage + 288);
      size = *a5;
      v71 = v69(v70, Mutable, Copy, a4, &size, a6);
      v37 = 0;
      if ((_DWORD)v71)
      {
        v72 = 0;
        v37 = v71;
        if (!Mutable)
          goto LABEL_104;
        goto LABEL_103;
      }
    }
    else
    {
      v73 = *(uint64_t (**)(uint64_t, __CFDictionary *, __CFDictionary *, const void *, CMTime *, const void *, uint64_t))(DerivedStorage + 280);
      if (!v73)
      {
        v37 = FigSignalErrorAt();
        v72 = 0;
        if (!Mutable)
          goto LABEL_104;
        goto LABEL_103;
      }
      v74 = *(_QWORD *)(DerivedStorage + 288);
      size = *a5;
      v37 = v73(v74, Mutable, Copy, a4, &size, a6, a7);
    }
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 216));
    v72 = 1;
    if (!Mutable)
    {
LABEL_104:
      if (Copy)
        CFRelease(Copy);
      if ((v72 & 1) == 0)
      {
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 216));
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 296));
        CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 304), a6);
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 296));
        FigSemaphoreSignal();
      }
      goto LABEL_108;
    }
LABEL_103:
    CFRelease(Mutable);
    goto LABEL_104;
  }
  v17 = CFGetTypeID(Value);
  if (v17 != CFNumberGetTypeID())
    goto LABEL_113;
  if (!FigCFDictionaryGetValueIfPresent())
  {
    v37 = 0;
LABEL_108:
    CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(DerivedStorage + 8), 0);
    return v37;
  }
  size = *a5;
  v18 = FigVCPGetTimedSampleAtTimeFromOrderedArray(v87, &size);
  if (!v18)
    goto LABEL_113;
  PixelBuffer = FigVCPTimedSampleGetPixelBuffer((uint64_t)v18, &v86);
  if ((_DWORD)PixelBuffer)
  {
LABEL_114:
    v37 = PixelBuffer;
    goto LABEL_108;
  }
  v20 = v86;
  if (!v86)
  {
LABEL_113:
    PixelBuffer = FigSignalErrorAt();
    goto LABEL_114;
  }
  v21 = CMBaseObjectGetDerivedStorage();
  size.value = 0;
  *(_QWORD *)&size.timescale = 0;
  v92 = 0;
  v93 = 0;
  v90 = 0;
  v91 = 0;
  pixelBufferOut = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(v21 + 16));
  if (!CGSizeMakeWithDictionaryRepresentation(*(CFDictionaryRef *)(v21 + 24), (CGSize *)&size))
  {
    v22 = FigSignalErrorAt();
    goto LABEL_116;
  }
  v22 = FigVideoCompositorUtilityCopyRenderPixelBufferDimensionsAndCleanAperture(0, *(_QWORD *)(v21 + 40), &v93, &v92, 0, &v91, *(double *)&size.value, *(double *)&size.timescale, *(float *)(v21 + 88));
  if ((_DWORD)v22)
  {
LABEL_116:
    v37 = v22;
    MEMORY[0x19402EF04](*(_QWORD *)(v21 + 16));
    v43 = 0;
    v52 = 0;
    v40 = 0;
    goto LABEL_70;
  }
  v23 = *(unsigned __int8 *)(v21 + 117);
  *(_BYTE *)(v21 + 117) = 0;
  v24 = *(const void **)(v21 + 32);
  if (v24)
    v77 = CFRetain(v24);
  else
    v77 = 0;
  MEMORY[0x19402EF04](*(_QWORD *)(v21 + 16));
  Width = CVPixelBufferGetWidth(v20);
  Height = CVPixelBufferGetHeight(v20);
  v40 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8D50], 0);
  v79 = CVBufferCopyAttachment(v20, (CFStringRef)*MEMORY[0x1E0CA8E68], 0);
  v41 = CVPixelBufferGetWidth(v20);
  v82 = a6;
  if (v41 == v93)
  {
    v42 = CVPixelBufferGetHeight(v20);
    if (v42 == v92
      && FigVideoCompositorUtilityArePixelAspectRatiosEqual((CFTypeID)v79, (CFTypeID)v77)
      && FigVideoCompositorUtilityAreCleanAperturesEqual(v40, Width, Height, v91, v93, v92))
    {
      v43 = CFRetain(v20);
      MutableCopy = 0;
      goto LABEL_66;
    }
  }
  cf = v40;
  if (!*(_QWORD *)v21)
  {
    v46 = CFGetAllocator(a1);
    v47 = VTPixelTransferSessionCreate(v46, (VTPixelTransferSessionRef *)v21);
    if ((_DWORD)v47)
      goto LABEL_111;
    v47 = VTPixelTransferSessionSetProperty();
    if ((_DWORD)v47)
      goto LABEL_111;
    goto LABEL_42;
  }
  if (v23)
  {
LABEL_42:
    v47 = VTPixelTransferSessionSetProperty();
    if (!(_DWORD)v47)
    {
      v47 = VTPixelTransferSessionSetProperty();
      if (!(_DWORD)v47)
      {
        VTPixelTransferSessionSetProperty();
        VTPixelTransferSessionSetProperty();
        VTPixelTransferSessionSetProperty();
        v45 = (CVPixelBufferPoolRef *)(v21 + 8);
        v48 = *(const void **)(v21 + 8);
        if (v48)
        {
          CFRelease(v48);
          *v45 = 0;
        }
        goto LABEL_46;
      }
    }
LABEL_111:
    v37 = v47;
    v43 = 0;
    v51 = v77;
    v52 = v79;
    if (!v77)
      goto LABEL_70;
    goto LABEL_69;
  }
  v45 = (CVPixelBufferPoolRef *)(v21 + 8);
  if (*(_QWORD *)(v21 + 8))
  {
    MutableCopy = 0;
LABEL_59:
    v55 = FigGetUpTimeNanoseconds();
    v56 = CFGetAllocator(a1);
    v54 = CVPixelBufferPoolCreatePixelBuffer(v56, *v45, &pixelBufferOut);
    if (!(_DWORD)v54)
    {
      v57 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)v21, v20, pixelBufferOut);
      v40 = cf;
      if (!(_DWORD)v57)
      {
        v58 = FigGetUpTimeNanoseconds();
        v59 = (v58 - v55) / 1000;
        ++*(_DWORD *)(v21 + 352);
        v60 = *(_QWORD *)(v21 + 336);
        *(_QWORD *)(v21 + 344) += v59;
        v61 = *(_QWORD *)(v21 + 328);
        if (v61 >= v59)
          v61 = (v58 - v55) / 1000;
        if (v60 > v59)
          v59 = v60;
        *(_QWORD *)(v21 + 328) = v61;
        *(_QWORD *)(v21 + 336) = v59;
        v43 = pixelBufferOut;
LABEL_66:
        v51 = v77;
        v52 = v79;
        v37 = 0;
        pixelBufferOut = 0;
        if (!MutableCopy)
          goto LABEL_68;
        goto LABEL_67;
      }
      v37 = v57;
      v43 = 0;
LABEL_57:
      v51 = v77;
      v52 = v79;
      if (!MutableCopy)
        goto LABEL_68;
LABEL_67:
      CFRelease(MutableCopy);
      goto LABEL_68;
    }
LABEL_56:
    v37 = v54;
    v43 = 0;
    v40 = cf;
    goto LABEL_57;
  }
LABEL_46:
  v88 = 0;
  v49 = *(const __CFDictionary **)(v21 + 48);
  if (!v49)
  {
    MutableCopy = 0;
    goto LABEL_54;
  }
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v49);
  if (MutableCopy)
  {
    v50 = FigCFDictionarySetInt32();
    if ((_DWORD)v50
      || (v50 = FigCFDictionarySetInt32(), (_DWORD)v50)
      || !CFDictionaryGetValue(MutableCopy, (const void *)*MEMORY[0x1E0CA9040])
      && (v50 = FigCFDictionarySetInt32(), (_DWORD)v50))
    {
      v37 = v50;
      v40 = cf;
      v51 = v77;
      v52 = v79;
      CFRelease(MutableCopy);
      MutableCopy = 0;
      goto LABEL_119;
    }
    goto LABEL_54;
  }
  v53 = FigSignalErrorAt();
  if (!(_DWORD)v53)
  {
LABEL_54:
    v53 = VTCreatePixelBufferPoolAttributesWithName();
    if (!(_DWORD)v53)
    {
      CFGetAllocator(a1);
      v54 = VTBuildPixelBufferPools2();
      if ((_DWORD)v54)
        goto LABEL_56;
      goto LABEL_59;
    }
  }
  v37 = v53;
  v40 = cf;
  v51 = v77;
  v52 = v79;
LABEL_119:
  v43 = 0;
  if (MutableCopy)
    goto LABEL_67;
LABEL_68:
  a6 = v82;
  if (v51)
LABEL_69:
    CFRelease(v51);
LABEL_70:
  if (v91)
    CFRelease(v91);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (v90)
    CFRelease(v90);
  if (v40)
    CFRelease(v40);
  if (v52)
    CFRelease(v52);
  if (!(_DWORD)v37)
  {
    ++*(_DWORD *)(DerivedStorage + 320);
    v62 = *(NSObject **)(DerivedStorage + 168);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __customVideoCompositor_RenderFrameFromWindow_block_invoke;
    block[3] = &__block_descriptor_tmp_11_10;
    block[4] = DerivedStorage;
    block[5] = a6;
    block[6] = v43;
    dispatch_sync(v62, block);
  }
  CVPixelBufferPoolFlush(*(CVPixelBufferPoolRef *)(DerivedStorage + 8), 0);
  if (v43)
    CFRelease(v43);
  return v37;
}

uint64_t FigVideoCompositionRemoteCopyParametersFromRenderFrameFromWindowMessage(void *a1, __CFDictionary **a2, __CFDictionary **a3, CFDictionaryRef *a4, uint64_t a5, int64_t *a6)
{
  int64_t int64;
  CFAllocatorRef *v9;
  const __CFAllocator *v10;
  uint64_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  size_t count;
  __CFDictionary *v16;
  uint64_t v17;
  __CFArray *v18;
  __CFDictionary *v19;
  CFMutableArrayRef v20;
  unint64_t v21;
  const __CFAllocator *v22;
  CFMutableDictionaryRef Mutable;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t array;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t CMTime;
  xpc_object_t v33;
  __IOSurface *v34;
  __IOSurface *v35;
  CVReturn v36;
  const void *UInt64;
  xpc_object_t v38;
  void *v39;
  size_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  xpc_object_t v44;
  size_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  size_t v49;
  uint64_t v50;
  xpc_object_t v51;
  const void *v52;
  xpc_object_t xdict;
  int64_t v55;
  int64_t *v56;
  uint64_t v61;
  uint64_t v62;
  __CFDictionary *theDict;
  xpc_object_t xarray;
  const __CFAllocator *xarraya;
  __int128 v66;
  uint64_t v67;
  void *values[2];
  uint64_t v69;
  void *value;
  CFTypeRef cf;
  CVPixelBufferRef pixelBufferOut;
  int64_t valuePtr;
  CFDictionaryRef v74;
  __int128 v75;
  uint64_t v76;

  v75 = 0uLL;
  v76 = 0;
  v74 = 0;
  pixelBufferOut = 0;
  value = 0;
  cf = 0;
  FigXPCMessageGetCMTime();
  int64 = xpc_dictionary_get_int64(a1, "FrameID");
  valuePtr = xpc_dictionary_get_int64(a1, "CompositionInstructionID");
  v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (valuePtr)
  {
    values[0] = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    v74 = CFDictionaryCreate(v10, (const void **)kFigVideoCompositionInstruction_InstructionID, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (values[0])
      CFRelease(values[0]);
  }
  else
  {
    v11 = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)v11)
    {
      v17 = v11;
      v16 = 0;
      v18 = 0;
LABEL_84:
      v19 = 0;
      v20 = 0;
      goto LABEL_85;
    }
  }
  v55 = int64;
  v56 = a6;
  v12 = xpc_dictionary_get_value(a1, "SourceTimedFramesForTracks");
  v13 = MEMORY[0x1E0C81350];
  if (v12)
  {
    v14 = v12;
    count = xpc_array_get_count(v12);
    v16 = 0;
    v17 = 0;
    if ((count & 1) == 0)
    {
      xarray = v14;
      xdict = a1;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      if (count < 2)
        goto LABEL_85;
      v21 = count >> 1;
      v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], count >> 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v24 = 0;
      if (v21 <= 1)
        v25 = 1;
      else
        v25 = v21;
      v61 = v25;
      theDict = Mutable;
      while (1)
      {
        xpc_array_get_uint64(xarray, 2 * v24);
        array = xpc_array_get_array(xarray, (2 * v24) | 1);
        v27 = xpc_array_get_count(array);
        v28 = v27;
        if ((v27 & 1) != 0)
          break;
        v29 = v27 >> 1;
        v18 = CFArrayCreateMutable(v22, v27 >> 1, MEMORY[0x1E0C9B378]);
        if (v28 >= 2)
        {
          if (v29 <= 1)
            v30 = 1;
          else
            v30 = v28 >> 1;
          v31 = 1;
          do
          {
            values[0] = 0;
            values[1] = 0;
            v69 = 0;
            CMTime = FigXPCArrayGetCMTime();
            if ((_DWORD)CMTime)
            {
LABEL_79:
              v17 = CMTime;
LABEL_82:
              v16 = theDict;
              goto LABEL_84;
            }
            v33 = xpc_array_get_value(array, v31);
            if (MEMORY[0x194031C7C]() == v13)
            {
              v66 = *(_OWORD *)values;
              v67 = v69;
              CMTime = FigVCPTimedSampleCreateWithNULL((uint64_t)&v66, (uint64_t *)&value);
              if ((_DWORD)CMTime)
                goto LABEL_79;
            }
            else
            {
              v34 = IOSurfaceLookupFromXPCObject(v33);
              if (!v34)
                goto LABEL_83;
              v35 = v34;
              v36 = CVPixelBufferCreateWithIOSurface(v22, v34, 0, &pixelBufferOut);
              CFRelease(v35);
              if (v36)
              {
                v17 = 0;
                goto LABEL_82;
              }
              if (!pixelBufferOut)
              {
LABEL_83:
                v16 = theDict;
                v17 = FigSignalErrorAt();
                goto LABEL_84;
              }
              v66 = *(_OWORD *)values;
              v67 = v69;
              CMTime = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v66, pixelBufferOut, (uint64_t *)&value);
              if ((_DWORD)CMTime)
                goto LABEL_79;
              if (pixelBufferOut)
              {
                CFRelease(pixelBufferOut);
                pixelBufferOut = 0;
              }
            }
            CFArrayAppendValue(v18, value);
            if (value)
            {
              CFRelease(value);
              value = 0;
            }
            v31 += 2;
            --v30;
          }
          while (v30);
        }
        UInt64 = (const void *)FigCFNumberCreateUInt64();
        v16 = theDict;
        CFDictionarySetValue(theDict, UInt64, v18);
        if (UInt64)
          CFRelease(UInt64);
        if (v18)
          CFRelease(v18);
        if (++v24 == v61)
        {
          a1 = xdict;
          v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
          goto LABEL_37;
        }
      }
      v17 = 0;
      v18 = 0;
      v19 = 0;
LABEL_104:
      v20 = 0;
      goto LABEL_78;
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v16 = 0;
LABEL_37:
    v38 = xpc_dictionary_get_value(a1, "SourceTimedSampleBuffersForTracks");
    if (v38)
    {
      v39 = v38;
      v40 = xpc_array_get_count(v38);
      v18 = 0;
      v17 = 0;
      if ((v40 & 1) == 0 && v40 >= 2)
      {
        theDict = v16;
        v41 = v40 >> 1;
        xarraya = *v9;
        v19 = CFDictionaryCreateMutable(*v9, v40 >> 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        v42 = 0;
        if (v41 <= 1)
          v43 = 1;
        else
          v43 = v41;
        v62 = v43;
        while (1)
        {
          xpc_array_get_uint64(v39, 2 * v42);
          v44 = xpc_array_get_array(v39, (2 * v42) | 1);
          v45 = xpc_array_get_count(v44);
          v46 = v45;
          if ((v45 & 1) != 0)
          {
            v17 = FigSignalErrorAt();
            v18 = 0;
            goto LABEL_104;
          }
          v47 = v45 >> 1;
          v20 = CFArrayCreateMutable(xarraya, v45 >> 1, MEMORY[0x1E0C9B378]);
          if (v46 >= 2)
            break;
LABEL_60:
          v52 = (const void *)FigCFNumberCreateUInt64();
          CFDictionarySetValue(v19, v52, v20);
          if (v52)
            CFRelease(v52);
          if (v20)
            CFRelease(v20);
          if (++v42 == v62)
            goto LABEL_67;
        }
        if (v47 <= 1)
          v48 = 1;
        else
          v48 = v46 >> 1;
        v49 = 1;
        while (1)
        {
          values[0] = 0;
          values[1] = 0;
          v69 = 0;
          v50 = FigXPCArrayGetCMTime();
          if ((_DWORD)v50)
            break;
          v51 = xpc_array_get_value(v44, v49);
          if (MEMORY[0x194031C7C]() == v13)
          {
            v66 = *(_OWORD *)values;
            v67 = v69;
            v50 = FigVCPTimedSampleCreateWithNULL((uint64_t)&v66, (uint64_t *)&value);
            if ((_DWORD)v50)
              break;
          }
          else
          {
            v50 = (uint64_t)remoteVideoCompositor_copySampleBufferFromXPCData(v51);
            if ((_DWORD)v50)
              break;
            v66 = *(_OWORD *)values;
            v67 = v69;
            v50 = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v66, cf, (uint64_t *)&value);
            if ((_DWORD)v50)
              break;
            if (cf)
            {
              CFRelease(cf);
              cf = 0;
            }
          }
          CFArrayAppendValue(v20, value);
          if (value)
          {
            CFRelease(value);
            value = 0;
          }
          v49 += 2;
          if (!--v48)
            goto LABEL_60;
        }
        v17 = v50;
        v18 = 0;
LABEL_78:
        v16 = theDict;
        goto LABEL_85;
      }
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = 0;
LABEL_67:
      if (a2)
      {
        *a2 = v16;
        v16 = 0;
      }
      if (a3)
      {
        *a3 = v19;
        v19 = 0;
      }
      if (a4)
      {
        *a4 = v74;
        v74 = 0;
      }
      if (a5)
      {
        *(_OWORD *)a5 = v75;
        *(_QWORD *)(a5 + 16) = v76;
      }
      v17 = 0;
      v18 = 0;
      v20 = 0;
      if (v56)
        *v56 = v55;
    }
  }
LABEL_85:
  if (v74)
    CFRelease(v74);
  if (v16)
    CFRelease(v16);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (v20)
    CFRelease(v20);
  if (pixelBufferOut)
    CFRelease(pixelBufferOut);
  if (cf)
    CFRelease(cf);
  if (value)
    CFRelease(value);
  return v17;
}

void *remoteVideoCompositor_copySampleBufferFromXPCData(void *a1)
{
  void *bytes_ptr;
  size_t length;
  uint64_t SampleBufferFromSerializedAtomDataBlockBuffer;
  CMBlockBufferCustomBlockSource customBlockSource;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  HIDWORD(customBlockSource.AllocateBlock) = 0;
  *(_QWORD *)&customBlockSource.version = 0;
  customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))remoteVideoCompositor_bbufUtilXPCObjectReleaser;
  customBlockSource.refCon = a1;
  bytes_ptr = (void *)xpc_data_get_bytes_ptr(a1);
  if (bytes_ptr)
  {
    length = xpc_data_get_length(a1);
    SampleBufferFromSerializedAtomDataBlockBuffer = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes_ptr, length, 0, &customBlockSource, 0, length, 0, &blockBufferOut);
    if (!(_DWORD)SampleBufferFromSerializedAtomDataBlockBuffer)
    {
      FigXPCRetain();
      SampleBufferFromSerializedAtomDataBlockBuffer = FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer();
    }
    bytes_ptr = (void *)SampleBufferFromSerializedAtomDataBlockBuffer;
  }
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  return bytes_ptr;
}

const void *FigVCPGetTimedSampleWithMatchingPTSFromAscendingPTSTimedSampleArray(const __CFArray *a1, uint64_t a2, CFIndex a3, CFIndex a4, CFIndex *a5)
{
  const void *ValueAtIndex;
  CMTime v11;
  CMTime time1;
  CMTime v13;
  CMTime v14;

  memset(&v14, 0, sizeof(v14));
  FigVCPTimedSampleGetPTS(a2, (uint64_t)&v14);
  if (a3 >= a4)
  {
LABEL_6:
    ValueAtIndex = 0;
  }
  else
  {
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, a3);
      memset(&v13, 0, sizeof(v13));
      FigVCPTimedSampleGetPTS((uint64_t)ValueAtIndex, (uint64_t)&v13);
      time1 = v13;
      v11 = v14;
      if (!CMTimeCompare(&time1, &v11))
        break;
      time1 = v13;
      v11 = v14;
      if (CMTimeCompare(&time1, &v11) >= 1)
        goto LABEL_6;
      if (a4 == ++a3)
      {
        ValueAtIndex = 0;
        a3 = a4;
        break;
      }
    }
  }
  *a5 = a3;
  return ValueAtIndex;
}

uint64_t FigVideoCompositionRemoteUpdateParametersFromIncrementalRenderFrameFromWindowMessage(void *a1, const __CFDictionary *a2, const __CFDictionary *a3, CFTypeRef *a4, uint64_t a5, int64_t *a6)
{
  int64_t int64;
  const __CFAllocator *v13;
  uint64_t updated;
  xpc_object_t value;
  xpc_object_t v16;
  uint64_t v17;
  CFTypeRef cf;
  int64_t valuePtr;
  CFTypeRef v21;
  __int128 v22;
  uint64_t v23;

  v21 = 0;
  if ((FigXPCMessageGetInt32() & 2) != 0)
  {
    FigCFDictionaryRemoveAllValues();
    FigCFDictionaryRemoveAllValues();
  }
  v22 = 0uLL;
  v23 = 0;
  FigXPCMessageGetCMTime();
  int64 = xpc_dictionary_get_int64(a1, "FrameID");
  valuePtr = xpc_dictionary_get_int64(a1, "CompositionInstructionID");
  if (valuePtr)
  {
    v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    v21 = CFDictionaryCreate(v13, (const void **)kFigVideoCompositionInstruction_InstructionID, &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    updated = FigXPCMessageCopyCFDictionary();
    if ((_DWORD)updated)
    {
LABEL_18:
      v17 = updated;
      goto LABEL_15;
    }
  }
  value = xpc_dictionary_get_value(a1, "SourceTimedFramesForTracks");
  updated = updateTimedSamplesForTracksWithXPCReducedSamples(value, a2, 0);
  if ((_DWORD)updated)
    goto LABEL_18;
  v16 = xpc_dictionary_get_value(a1, "SourceTimedSampleBuffersForTracks");
  updated = updateTimedSamplesForTracksWithXPCReducedSamples(v16, a3, 1);
  if ((_DWORD)updated)
    goto LABEL_18;
  if (a4)
  {
    *a4 = v21;
    v21 = 0;
  }
  if (a5)
  {
    *(_OWORD *)a5 = v22;
    *(_QWORD *)(a5 + 16) = v23;
  }
  v17 = 0;
  if (a6)
    *a6 = int64;
LABEL_15:
  if (v21)
    CFRelease(v21);
  return v17;
}

uint64_t updateTimedSamplesForTracksWithXPCReducedSamples(void *a1, const __CFDictionary *a2, int a3)
{
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  const __CFArray *v8;
  CFMutableArrayRef v9;
  size_t count;
  CFIndex v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t value;
  void *v15;
  void *UInt64;
  const __CFArray *v17;
  const __CFArray *v18;
  size_t v19;
  __CFArray *v20;
  int v21;
  uint64_t v22;
  size_t v23;
  unsigned int CMTime;
  xpc_object_t v25;
  __IOSurface *v26;
  __IOSurface *v27;
  CVReturn v28;
  CFIndex v29;
  __CFArray *v30;
  CFMutableArrayRef v31;
  CFIndex v32;
  CFIndex v33;
  const void *ValueAtIndex;
  const void *v35;
  uint64_t v37;
  CFMutableArrayRef cf;
  uint64_t v39;
  void *v40;
  __CFDictionary *theDict;
  CFArrayRef theArray;
  void *key;
  const __CFAllocator *allocator;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  CFTypeRef v49;
  CVPixelBufferRef pixelBufferOut;
  const void *v51[2];

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
  if (v9)
  {
    cf = v9;
    if (!a1)
      goto LABEL_73;
    count = xpc_array_get_count(a1);
    v11 = 0;
    if ((count & 1) == 0 && count >= 2)
    {
      v12 = 0;
      v13 = count >> 1;
      if (count >> 1 <= 1)
        v13 = 1;
      v39 = v13;
      v40 = a1;
      theDict = a2;
      theArray = v8;
      allocator = v6;
      while (1)
      {
        xpc_array_get_uint64(a1, 2 * v12);
        FigCFArrayAppendInt32();
        value = xpc_array_get_value(a1, (2 * v12) | 1);
        if (!a2 || (v15 = value, (UInt64 = (void *)FigCFNumberCreateUInt64()) == 0))
        {
          v11 = FigSignalErrorAt();
          goto LABEL_62;
        }
        key = UInt64;
        v17 = (const __CFArray *)CFDictionaryGetValue(a2, UInt64);
        v18 = v17;
        if (v17)
          v11 = CFArrayGetCount(v17);
        else
          v11 = 0;
        pixelBufferOut = 0;
        v51[0] = 0;
        v49 = 0;
        v19 = xpc_array_get_count(v15);
        v20 = CFArrayCreateMutable(v6, v19 >> 1, MEMORY[0x1E0C9B378]);
        if (v19 < 2)
        {
          v21 = 0;
          goto LABEL_38;
        }
        if (v19 >> 1 <= 1)
          v22 = 1;
        else
          v22 = v19 >> 1;
        v23 = 1;
        while (1)
        {
          v47 = 0uLL;
          v48 = 0;
          CMTime = FigXPCArrayGetCMTime();
          if (CMTime)
            break;
          v25 = xpc_array_get_value(v15, v23);
          if (MEMORY[0x194031C7C]() == MEMORY[0x1E0C81350])
          {
            v45 = v47;
            v46 = v48;
            v21 = FigVCPTimedSampleCreateWithNULL((uint64_t)&v45, (uint64_t *)v51);
          }
          else if (a3)
          {
            CMTime = remoteVideoCompositor_copySampleBufferFromXPCData(v25);
            if (CMTime)
              break;
            v45 = v47;
            v46 = v48;
            CMTime = FigVCPTimedSampleCreateWithSampleBuffer((uint64_t)&v45, v49, (uint64_t *)v51);
            if (CMTime)
              break;
            if (!v49)
              goto LABEL_34;
            CFRelease(v49);
            v21 = 0;
            v49 = 0;
          }
          else
          {
            v26 = IOSurfaceLookupFromXPCObject(v25);
            if (!v26)
              goto LABEL_67;
            v27 = v26;
            v28 = CVPixelBufferCreateWithIOSurface(allocator, v26, 0, &pixelBufferOut);
            CFRelease(v27);
            if (v28)
            {
              v21 = 0;
              goto LABEL_69;
            }
            if (!pixelBufferOut)
            {
LABEL_67:
              CMTime = FigSignalErrorAt();
              break;
            }
            v45 = v47;
            v46 = v48;
            CMTime = FigVCPTimedSampleCreateWithPixelBuffer((uint64_t)&v45, pixelBufferOut, (uint64_t *)v51);
            if (CMTime)
              break;
            if (!pixelBufferOut)
            {
LABEL_34:
              v21 = 0;
              goto LABEL_35;
            }
            CFRelease(pixelBufferOut);
            v21 = 0;
            pixelBufferOut = 0;
          }
LABEL_35:
          CFArrayAppendValue(v20, v51[0]);
          if (v51[0])
          {
            CFRelease(v51[0]);
            v51[0] = 0;
          }
          v23 += 2;
          if (!--v22)
            goto LABEL_38;
        }
        v21 = CMTime;
LABEL_69:
        if (v51[0])
          CFRelease(v51[0]);
LABEL_38:
        if (pixelBufferOut)
          CFRelease(pixelBufferOut);
        if (v49)
          CFRelease(v49);
        if (v21 && v20)
        {
          CFRelease(v20);
          v20 = 0;
          goto LABEL_48;
        }
        if (v20)
        {
          v29 = CFArrayGetCount(v20);
          if (!v11)
            goto LABEL_47;
LABEL_49:
          v31 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
          if (v31)
          {
            v30 = v31;
            if (v29 >= 1)
            {
              v32 = 0;
              v33 = 0;
              do
              {
                ValueAtIndex = CFArrayGetValueAtIndex(v20, v32);
                if (FigVCPTimedSampleContainsNULL((_BOOL8)ValueAtIndex))
                {
                  *(_QWORD *)&v47 = 0;
                  v35 = FigVCPGetTimedSampleWithMatchingPTSFromAscendingPTSTimedSampleArray(v18, (uint64_t)ValueAtIndex, v33, v11, (CFIndex *)&v47);
                  if (v35)
                  {
                    CFArrayAppendValue(v30, v35);
                    v33 = v47 + 1;
                  }
                  else
                  {
                    CFArrayAppendValue(v30, ValueAtIndex);
                    v33 = v47;
                  }
                }
                else
                {
                  CFArrayAppendValue(v30, ValueAtIndex);
                }
                ++v32;
              }
              while (v29 != v32);
            }
            a2 = theDict;
            CFDictionarySetValue(theDict, key, v30);
            CFRelease(key);
            v11 = 0;
          }
          else
          {
            v11 = FigSignalErrorAt();
            v30 = (__CFArray *)key;
            a2 = theDict;
          }
        }
        else
        {
LABEL_48:
          v29 = 0;
          if (v11)
            goto LABEL_49;
LABEL_47:
          a2 = theDict;
          v30 = (__CFArray *)key;
          CFDictionarySetValue(theDict, key, v20);
        }
        CFRelease(v30);
        v8 = theArray;
        if (v20)
          CFRelease(v20);
        a1 = v40;
        v6 = allocator;
LABEL_62:
        if ((_DWORD)v11)
          break;
        if (++v12 == v39)
        {
          CFArrayGetCount(v8);
LABEL_73:
          FigCFDictionaryApplyBlock();
          FigCFArrayApplyBlock();
          v11 = 0;
          break;
        }
      }
    }
    CFRelease(v8);
    CFRelease(cf);
    return v11;
  }
  else
  {
    v37 = FigSignalErrorAt();
    CFRelease(v8);
    return v37;
  }
}

uint64_t FigVideoCompositorRemoteGetObjectID(uint64_t a1, _QWORD *a2)
{
  if (a1 && a2)
    return remoteVideoCompositor_GetObjectID(a1, a2);
  else
    return FigSignalErrorAt();
}

uint64_t remoteVideoCompositor_GetObjectID(uint64_t a1, _QWORD *a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_BYTE *)(DerivedStorage + 8) || *(_BYTE *)(DerivedStorage + 9))
    return FigSignalErrorAt();
  *a2 = *(_QWORD *)DerivedStorage;
  return 0;
}

uint64_t FigVideoCompositorCreateRemote(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t uint64;
  const __CFAllocator *v7;
  uint64_t v8;
  _QWORD *DerivedStorage;
  uint64_t v10;
  CFMutableDictionaryRef v11;
  uint64_t v12;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  CFDictionaryValueCallBacks valueCallBacks;

  v16 = 0;
  v17 = &v16;
  v18 = 0x2000000000;
  v19 = 0;
  valueCallBacks.version = MEMORY[0x1E0C809B0];
  valueCallBacks.retain = (CFDictionaryRetainCallBack)0x40000000;
  valueCallBacks.release = (CFDictionaryReleaseCallBack)__remoteVideoCompositor_EnsureClientEstablished_block_invoke;
  valueCallBacks.copyDescription = (CFDictionaryCopyDescriptionCallBack)&unk_1E2FBBE20;
  valueCallBacks.equal = (CFDictionaryEqualCallBack)&v16;
  if (gVCRemoteClientSetupOnce != -1)
    dispatch_once(&gVCRemoteClientSetupOnce, &valueCallBacks);
  v4 = *((unsigned int *)v17 + 6);
  _Block_object_dispose(&v16, 8);
  if (!(_DWORD)v4)
  {
    v5 = FigXPCCreateBasicMessage();
    if ((_DWORD)v5 || (v5 = FigXPCMessageSetCFDictionary(), (_DWORD)v5))
    {
      v4 = v5;
      goto LABEL_15;
    }
    v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!(_DWORD)v4)
    {
      uint64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E0CA36A0]);
      v16 = 0;
      valueCallBacks.copyDescription = 0;
      valueCallBacks.equal = 0;
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      FigVideoCompositorGetClassID();
      v8 = CMDerivedObjectCreate();
      if (!(_DWORD)v8)
      {
        DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
        *DerivedStorage = uint64;
        v10 = FigSimpleMutexCreate();
        DerivedStorage[2] = v10;
        if (v10)
        {
          valueCallBacks.version = 0;
          valueCallBacks.retain = (CFDictionaryRetainCallBack)remoteVideoCompositor_clonePendingFrame;
          valueCallBacks.release = (CFDictionaryReleaseCallBack)remoteVideoCompositor_freePendingFrame;
          v11 = CFDictionaryCreateMutable(v7, 0, 0, &valueCallBacks);
          DerivedStorage[13] = v11;
          if (v11)
          {
            v12 = FigSimpleMutexCreate();
            DerivedStorage[12] = v12;
            if (v12)
            {
              Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
              DerivedStorage[14] = Mutable;
              if (Mutable)
              {
                v14 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                DerivedStorage[15] = v14;
                if (v14)
                {
                  FigXPCRemoteClientAssociateObject();
                  v4 = 0;
LABEL_14:
                  *a3 = v16;
                  goto LABEL_15;
                }
              }
            }
          }
        }
        v8 = FigSignalErrorAt();
      }
      v4 = v8;
      goto LABEL_14;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

void __updateTimedSamplesForTracksWithXPCReducedSamples_block_invoke(uint64_t a1, void *value)
{
  CFRange v4;

  v4.length = *(_QWORD *)(a1 + 40);
  v4.location = 0;
  if (!CFArrayContainsValue(*(CFArrayRef *)(a1 + 32), v4, value))
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), value);
}

void __updateTimedSamplesForTracksWithXPCReducedSamples_block_invoke_2(uint64_t a1, const void *a2)
{
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2);
}

uint64_t remoteVideoCompositor_DeadConnectionCallback()
{
  uint64_t result;

  result = CMBaseObjectGetDerivedStorage();
  *(_BYTE *)(result + 9) = 1;
  return result;
}

uint64_t remoteVideoCompositor_HandleVideoCompositorClientMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294966630;
}

CFMutableDictionaryRef deepCopySourceTimedSamplesForTrackIDs(const void *a1)
{
  const __CFAllocator *v1;
  CFMutableDictionaryRef Mutable;

  v1 = CFGetAllocator(a1);
  Mutable = CFDictionaryCreateMutable(v1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    FigCFDictionaryApplyBlock();
  else
    FigSignalErrorAt();
  return Mutable;
}

void __deepCopySourceTimedSamplesForTrackIDs_block_invoke(uint64_t a1, const void *a2, CFArrayRef theArray)
{
  CFArrayRef Copy;

  Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(a1 + 32), theArray);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, Copy);
  if (Copy)
    CFRelease(Copy);
}

_QWORD *remoteVideoCompositor_clonePendingFrame(const __CFAllocator *a1, _QWORD *a2)
{
  _QWORD *result;

  result = CFAllocatorAllocate(a1, 8, 0);
  *result = *a2;
  return result;
}

uint64_t remoteVideoCompositor_Finalize()
{
  _QWORD *DerivedStorage;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t result;

  DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
  v1 = CMBaseObjectGetDerivedStorage();
  if (!*(_BYTE *)(v1 + 8))
  {
    v2 = v1;
    *(_BYTE *)(v1 + 8) = 1;
    FigXPCRemoteClientDisassociateObject();
    if (!*(_BYTE *)(v2 + 9) && !FigXPCCreateBasicMessage())
      FigXPCRemoteClientSendSyncMessage();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  v3 = (const void *)DerivedStorage[14];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)DerivedStorage[15];
  if (v4)
    CFRelease(v4);
  FigSimpleMutexDestroy();
  DerivedStorage[2] = 0;
  v5 = (const void *)DerivedStorage[13];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[13] = 0;
  }
  result = FigSimpleMutexDestroy();
  DerivedStorage[12] = 0;
  return result;
}

__CFString *remoteVideoCompositor_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  CFIndex v5;
  const char *v6;
  CFAllocatorRef v7;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  v5 = CFGetRetainCount(a1);
  if (*(_BYTE *)(DerivedStorage + 8))
    v6 = " (invalidated)";
  else
    v6 = "";
  v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigVideoCompositorRemote %p retainCount: %ld%s allocator: %p, ObjectID: %016llx>"), a1, v5, v6, v7, *(_QWORD *)DerivedStorage);
  return Mutable;
}

uint64_t remoteVideoCompositor_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = remoteVideoCompositor_GetObjectID(a1, &v8);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdCopyPropertyMessage();
  v6 = ObjectID;
  if (a4)
    *a4 = 0;
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

uint64_t remoteVideoCompositor_SetProperty(uint64_t a1)
{
  uint64_t ObjectID;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  ObjectID = remoteVideoCompositor_GetObjectID(a1, &v4);
  if (!(_DWORD)ObjectID)
    ObjectID = FigXPCSendStdSetPropertyMessage();
  v2 = ObjectID;
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t remoteVideoCompositor_OutputCustomFrame(uint64_t a1, const void *a2, int a3, __CVBuffer *a4)
{
  uint64_t DerivedStorage;
  uint64_t ObjectID;
  _QWORD *Value;
  _QWORD *v11;
  uint64_t UpTimeNanoseconds;
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v18 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  ObjectID = remoteVideoCompositor_GetObjectID(a1, &v18);
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  ObjectID = FigXPCCreateBasicMessage();
  if ((_DWORD)ObjectID)
    goto LABEL_13;
  xpc_dictionary_set_int64(0, "FrameID", (int64_t)a2);
  xpc_dictionary_set_int64(0, "CompositionStatus", a3);
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 104), a2);
  if (Value)
  {
    v11 = Value;
    UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    xpc_dictionary_set_int64(0, "ProcessingTime", UpTimeNanoseconds - *v11);
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 104), a2);
  MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 96));
  if (!a4)
    goto LABEL_9;
  IOSurface = CVPixelBufferGetIOSurface(a4);
  if (!IOSurface)
  {
    ObjectID = FigSignalErrorAt();
LABEL_13:
    v16 = ObjectID;
    goto LABEL_11;
  }
  XPCObject = IOSurfaceCreateXPCObject(IOSurface);
  if (!XPCObject)
  {
    v15 = FigSignalErrorAt();
    goto LABEL_10;
  }
  xpc_dictionary_set_value(0, "ComposedBuffer", XPCObject);
LABEL_9:
  v15 = FigXPCRemoteClientSendSyncMessage();
LABEL_10:
  v16 = v15;
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v16;
}

uint64_t remoteVideoCompositor_SetCustomCallbacks(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t DerivedStorage;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t ObjectID;
  _QWORD v14[2];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v14[1] = 0;
  MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 16));
  v7 = (_OWORD *)(DerivedStorage + 24);
  if (a2)
  {
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[3];
    *(_OWORD *)(DerivedStorage + 56) = a2[2];
    *(_OWORD *)(DerivedStorage + 72) = v10;
    *v7 = v8;
    *(_OWORD *)(DerivedStorage + 40) = v9;
    *(_QWORD *)(DerivedStorage + 88) = a3;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    v11 = 0;
  }
  else
  {
    *(_OWORD *)(DerivedStorage + 56) = 0u;
    *(_OWORD *)(DerivedStorage + 72) = 0u;
    *v7 = 0u;
    *(_OWORD *)(DerivedStorage + 40) = 0u;
    *(_QWORD *)(DerivedStorage + 88) = a3;
    MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 16));
    v14[0] = 0;
    ObjectID = remoteVideoCompositor_GetObjectID(a1, v14);
    if ((_DWORD)ObjectID || (ObjectID = FigXPCCreateBasicMessage(), (_DWORD)ObjectID))
    {
      v11 = ObjectID;
    }
    else
    {
      v11 = FigXPCRemoteClientSendSyncMessage();
      if (!(_DWORD)v11)
      {
        MEMORY[0x19402EEEC](*(_QWORD *)(DerivedStorage + 96));
        CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 104));
        MEMORY[0x19402EF04](*(_QWORD *)(DerivedStorage + 96));
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v11;
}

uint64_t remoteVideoCompositor_CompletePreroll(uint64_t a1, int a2, int a3)
{
  uint64_t ObjectID;
  uint64_t v6;
  uint64_t v8;

  v8 = 0;
  ObjectID = remoteVideoCompositor_GetObjectID(a1, &v8);
  if ((_DWORD)ObjectID)
  {
    v6 = ObjectID;
  }
  else
  {
    v6 = FigXPCCreateBasicMessage();
    if (!(_DWORD)v6)
    {
      xpc_dictionary_set_int64(0, "RequestID", a2);
      xpc_dictionary_set_int64(0, "PrerollStatus", a3);
      v6 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v6;
}

double CDSGetOverscanSafeRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  BOOL v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  double result;
  CGRect v12;

  v7 = a1 < 1.0 && a1 != 0.0 || a1 == -1.0;
  v8 = 1.0 - fabs(a1);
  if (!v7)
    v8 = 0.1;
  v9 = a4 * v8 * 0.5;
  v10 = a5 * v8 * 0.5;
  v12.origin.x = a2;
  v12.origin.y = a3;
  v12.size.width = a4;
  v12.size.height = a5;
  *(_QWORD *)&result = (unint64_t)CGRectInset(v12, v9, v10);
  return result;
}

uint64_t FigVirtualDisplaySourceNullCreate(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  FigVirtualDisplaySourceGetClassID();
  v3 = CMDerivedObjectCreate();
  if ((_DWORD)v3)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = 0;
  }
  return v3;
}

uint64_t srcnull_finalize()
{
  uint64_t result;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;

  result = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(result + 8))
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

uint64_t srcnull_copyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v5;
  uint64_t result;

  if (!CFEqual(CFSTR("sourceType"), a2))
    return 4294954512;
  v5 = CFRetain(CFSTR("NullSource"));
  result = 0;
  *a4 = v5;
  return result;
}

uint64_t srcnull_setProperty()
{
  return 4294954512;
}

uint64_t srcnull_plugProcessor()
{
  return 0;
}

uint64_t srcnull_unplugProcessor()
{
  return 0;
}

uint64_t srcnull_start()
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigCFDictionaryGetBooleanIfPresent();
  *(_DWORD *)(DerivedStorage + 8) = 2;
  return 0;
}

uint64_t srcnull_stop()
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
  return 0;
}

uint64_t srcnull_suspend()
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  return 0;
}

uint64_t srcnull_resume()
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 8) = 2;
  return 0;
}

uint64_t FigVideoCompositionServerCreateRenderFrameFromWindowMessage(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4, uint64_t a5, int64_t a6)
{
  xpc_object_t empty;
  xpc_object_t v11;

  if (!FigXPCCreateBasicMessage())
  {
    FigXPCMessageSetCMTime();
    xpc_dictionary_set_int64(0, "FrameID", a6);
    if (a4)
    {
      if (FigCFDictionaryGetInt64IfPresent())
      {
        xpc_dictionary_set_int64(0, "CompositionInstructionID", 0);
      }
      else if (FigXPCMessageSetCFDictionary())
      {
        goto LABEL_10;
      }
    }
    if (FigCFDictionaryGetCount())
    {
      empty = xpc_array_create_empty();
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)AddTrackTimedFramesToXPCArray, empty);
      xpc_dictionary_set_value(0, "SourceTimedFramesForTracks", empty);
    }
    if (FigCFDictionaryGetCount())
    {
      v11 = xpc_array_create_empty();
      CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)AddTrackTimedSampleBuffersToXPCArray, v11);
      xpc_dictionary_set_value(0, "SourceTimedSampleBuffersForTracks", v11);
    }
  }
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  return 0;
}

uint64_t AddTrackTimedFramesToXPCArray(int a1, CFArrayRef theArray, void *a3)
{
  uint64_t UInt64;
  xpc_object_t v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  uint64_t ValueAtIndex;
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  int v14;
  CVPixelBufferRef pixelBuffer[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  if (!theArray || !CFArrayGetCount(theArray))
    goto LABEL_14;
  UInt64 = FigCFNumberGetUInt64();
  xpc_array_set_uint64(a3, 0xFFFFFFFFFFFFFFFFLL, UInt64);
  v6 = xpc_array_create(0, 0);
  Count = CFArrayGetCount(theArray);
  if (Count < 1)
  {
LABEL_12:
    FigXPCRelease();
    goto LABEL_13;
  }
  v8 = Count;
  v9 = 0;
  while (1)
  {
    ValueAtIndex = FigCFArrayGetValueAtIndex();
    v17 = 0uLL;
    v18 = 0;
    FigVCPTimedSampleGetPTS(ValueAtIndex, (uint64_t)&v17);
    *(_OWORD *)pixelBuffer = v17;
    v16 = v18;
    FigXPCArrayAppendCMTime();
    pixelBuffer[0] = 0;
    if (FigVCPTimedSampleGetPixelBuffer(ValueAtIndex, pixelBuffer))
    {
      FigXPCRelease();
      goto LABEL_14;
    }
    if (pixelBuffer[0])
      break;
    XPCObject = xpc_null_create();
LABEL_11:
    xpc_array_append_value(v6, XPCObject);
    FigXPCRelease();
    if (v8 == ++v9)
      goto LABEL_12;
  }
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer[0]);
  if (IOSurface)
  {
    XPCObject = IOSurfaceCreateXPCObject(IOSurface);
    if (XPCObject)
      goto LABEL_11;
  }
  v14 = FigSignalErrorAt();
  FigXPCRelease();
  if (v14)
    goto LABEL_14;
LABEL_13:
  xpc_array_set_value(a3, 0xFFFFFFFFFFFFFFFFLL, v6);
LABEL_14:
  FigXPCRelease();
  return FigXPCRelease();
}

uint64_t AddTrackTimedSampleBuffersToXPCArray(int a1, CFArrayRef theArray, void *a3)
{
  uint64_t UInt64;
  xpc_object_t v6;
  CFIndex Count;
  CFIndex v8;
  uint64_t v9;
  uint64_t ValueAtIndex;
  xpc_object_t v11;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (theArray && CFArrayGetCount(theArray))
  {
    UInt64 = FigCFNumberGetUInt64();
    xpc_array_set_uint64(a3, 0xFFFFFFFFFFFFFFFFLL, UInt64);
    v6 = xpc_array_create(0, 0);
    Count = CFArrayGetCount(theArray);
    if (Count < 1)
    {
LABEL_11:
      xpc_array_set_value(a3, 0xFFFFFFFFFFFFFFFFLL, v6);
    }
    else
    {
      v8 = Count;
      v9 = 0;
      while (1)
      {
        ValueAtIndex = FigCFArrayGetValueAtIndex();
        v15 = 0uLL;
        v16 = 0;
        FigVCPTimedSampleGetPTS(ValueAtIndex, (uint64_t)&v15);
        v13 = v15;
        v14 = v16;
        FigXPCArrayAppendCMTime();
        *(_QWORD *)&v13 = 0;
        if (FigVCPTimedSampleGetSampleBuffer(ValueAtIndex, &v13))
          break;
        if ((_QWORD)v13)
        {
          if (serverVideoCompositor_addSampleBufferToXPCArray(v13, v6))
            return FigXPCRelease();
        }
        else
        {
          v11 = xpc_null_create();
          xpc_array_append_value(v6, v11);
        }
        if (v8 == ++v9)
          goto LABEL_11;
      }
    }
  }
  return FigXPCRelease();
}

xpc_object_t FigVideoCompositionServerCreateIncrementalRenderFrameFromWindowMessage(uint64_t a1, const void *a2, const void **a3, const void *a4, const void **a5, uint64_t a6, uint64_t a7, int64_t a8, int a9, _DWORD *a10)
{
  const void *v16;
  const void *v17;
  const void *v18;
  const __CFDictionary *ReducedTimedSamplesForTracks;
  xpc_object_t empty;
  const __CFDictionary *v21;
  xpc_object_t v22;
  uint64_t v24;
  xpc_object_t xdict;

  v24 = 0;
  xdict = 0;
  if (!a3 || !a5)
  {
    FigSignalErrorAt();
    goto LABEL_27;
  }
  if (*a10 == a9)
    v16 = *a3;
  else
    v16 = 0;
  if (*a10 == a9)
    v17 = *a5;
  else
    v17 = 0;
  if (!FigCFDictionaryGetCount())
    FigCFDictionaryGetCount();
  if (FigXPCCreateBasicMessage())
    goto LABEL_27;
  FigXPCMessageSetCMTime();
  xpc_dictionary_set_int64(xdict, "FrameID", a8);
  v18 = a4;
  if (a6)
  {
    if (FigCFDictionaryGetInt64IfPresent())
    {
      xpc_dictionary_set_int64(xdict, "CompositionInstructionID", 0);
      goto LABEL_16;
    }
    if (!FigXPCMessageSetCFDictionary())
      goto LABEL_16;
LABEL_27:
    ReducedTimedSamplesForTracks = 0;
    v21 = 0;
    goto LABEL_21;
  }
LABEL_16:
  FigXPCMessageSetInt32();
  ReducedTimedSamplesForTracks = createReducedTimedSamplesForTracks(a2, (uint64_t)v16, (_DWORD *)&v24 + 1);
  empty = xpc_array_create_empty();
  if (ReducedTimedSamplesForTracks)
    CFDictionaryApplyFunction(ReducedTimedSamplesForTracks, (CFDictionaryApplierFunction)AddTrackTimedFramesToXPCArray, empty);
  xpc_dictionary_set_value(xdict, "SourceTimedFramesForTracks", empty);
  v21 = createReducedTimedSamplesForTracks(a4, (uint64_t)v17, &v24);
  v22 = xpc_array_create_empty();
  if (v21)
    CFDictionaryApplyFunction(v21, (CFDictionaryApplierFunction)AddTrackTimedSampleBuffersToXPCArray, v22);
  xpc_dictionary_set_value(xdict, "SourceTimedSampleBuffersForTracks", v22);
  releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs(a3, a2);
  releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs(a5, v18);
  *a10 = a9;
LABEL_21:
  FigXPCRelease();
  FigXPCRelease();
  if (ReducedTimedSamplesForTracks)
    CFRelease(ReducedTimedSamplesForTracks);
  if (v21)
    CFRelease(v21);
  return xdict;
}

CFMutableDictionaryRef createReducedTimedSamplesForTracks(const void *a1, uint64_t a2, _DWORD *a3)
{
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  if (FigCFDictionaryGetCount() < 1)
  {
    Mutable = 0;
  }
  else
  {
    v5 = CFGetAllocator(a1);
    Mutable = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      FigCFDictionaryApplyBlock();
      if (a3)
        *a3 = *((_DWORD *)v9 + 6);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  _Block_object_dispose(&v8, 8);
  return Mutable;
}

void releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs(const void **a1, CFTypeRef cf)
{
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  const void *v6;

  v3 = CFGetAllocator(cf);
  Mutable = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = Mutable;
    FigCFDictionaryApplyBlock();
    if (a1)
    {
      v6 = *a1;
      *a1 = v5;
      CFRetain(v5);
      if (v6)
        CFRelease(v6);
    }
    CFRelease(v5);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigVideoCompositorServerRetainVideoCompositorForID()
{
  return FigXPCServerRetainNeighborObjectFromID();
}

uint64_t FigVideoCompositorServerStart()
{
  if (FigServer_IsMediaparserd())
    return FigSignalErrorAt();
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t HandleVideoCompositorMessage()
{
  uint64_t OpCode;

  OpCode = FigXPCMessageGetOpCode();
  if ((_DWORD)OpCode)
    return OpCode;
  else
    return 4294966630;
}

uint64_t serverVideoCompositor_addSampleBufferToXPCArray(uint64_t a1, void *a2)
{
  uint64_t SerializedAtomDataForSampleBuffer;
  NSObject *v4;
  NSObject *v5;
  xpc_object_t v6;

  SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
  if ((_DWORD)SerializedAtomDataForSampleBuffer)
    return SerializedAtomDataForSampleBuffer;
  v4 = dispatch_data_create(0, 0, 0, (dispatch_block_t)*MEMORY[0x1E0C80CF8]);
  if (!v4)
    return FigSignalErrorAt();
  v5 = v4;
  v6 = xpc_data_create_with_dispatch_data(v4);
  dispatch_release(v5);
  if (!v6)
    return FigSignalErrorAt();
  xpc_array_append_value(a2, v6);
  xpc_release(v6);
  return 0;
}

void __createReducedTimedSamplesForTracks_block_invoke(uint64_t a1, const void *a2, const __CFArray *a3)
{
  const __CFArray *v6;
  const __CFArray *v7;
  CFIndex Count;
  uint64_t v9;
  CFMutableArrayRef Mutable;
  uint64_t v11;
  CFIndex v12;
  const void *ValueAtIndex;
  CFIndex v14;
  _BYTE v15[24];
  CFIndex v16;
  void *value;

  value = 0;
  v6 = (const __CFArray *)FigCFDictionaryGetValue();
  v7 = v6;
  if (v6)
  {
    Count = CFArrayGetCount(v6);
    if (a3)
      goto LABEL_3;
  }
  else
  {
    Count = 0;
    if (a3)
    {
LABEL_3:
      v9 = CFArrayGetCount(a3);
      if (Count)
        goto LABEL_4;
LABEL_17:
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2, a3);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v9;
      goto LABEL_18;
    }
  }
  v9 = 0;
  if (!Count)
    goto LABEL_17;
LABEL_4:
  Mutable = CFArrayCreateMutable(*(CFAllocatorRef *)(a1 + 56), v9, MEMORY[0x1E0C9B378]);
  v16 = 0;
  if (v9 < 1)
  {
LABEL_13:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), a2, Mutable);
    if (!Mutable)
      goto LABEL_18;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = 0;
  while (1)
  {
    ValueAtIndex = (const void *)FigCFArrayGetValueAtIndex();
    if (FigVCPGetTimedSampleWithMatchingPTSFromAscendingPTSTimedSampleArray(v7, (uint64_t)ValueAtIndex, v12, Count, &v16))
    {
      if (FigCFEqual())
        break;
    }
    v12 = v16;
    CFArrayAppendValue(Mutable, ValueAtIndex);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
LABEL_12:
    if (v9 == ++v11)
      goto LABEL_13;
  }
  v14 = v16;
  FigVCPTimedSampleGetPTS((uint64_t)ValueAtIndex, (uint64_t)v15);
  if (!FigVCPTimedSampleCreateWithNULL((uint64_t)v15, (uint64_t *)&value))
  {
    v12 = v14 + 1;
    CFArrayAppendValue(Mutable, value);
    if (value)
    {
      CFRelease(value);
      value = 0;
    }
    goto LABEL_12;
  }
  FigSignalErrorAt();
  if (Mutable)
LABEL_14:
    CFRelease(Mutable);
LABEL_18:
  if (value)
    CFRelease(value);
}

void __releaseAssignAndDeepCopySourceTimedSamplesForTrackIDs_block_invoke(uint64_t a1, const void *a2, CFArrayRef theArray)
{
  CFArrayRef Copy;

  Copy = CFArrayCreateCopy(*(CFAllocatorRef *)(a1 + 32), theArray);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), a2, Copy);
  if (Copy)
    CFRelease(Copy);
}

void DisposeServedVCState(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD);
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v3)
        v3(v2, 0, 0);
      ReportErrorAndForgetPendingFrames(a1, 0xFFFFCF23);
    }
    v4 = *(const void **)(a1 + 80);
    if (v4)
      CFRelease(v4);
    v5 = *(const void **)(a1 + 88);
    if (v5)
      CFRelease(v5);
    FigSimpleMutexDestroy();
    if (*(_QWORD *)a1)
    {
      CFRelease(*(CFTypeRef *)a1);
      *(_QWORD *)a1 = 0;
    }
    v6 = *(const void **)(a1 + 16);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 16) = 0;
    }
    v7 = *(void **)(a1 + 72);
    if (v7)
      os_release(v7);
    free((void *)a1);
  }
}

uint64_t VCServerRenderFrame(uint64_t a1, int a2, const void *a3, CVPixelBufferRef *a4, int a5, const void *a6, uint64_t *a7, const __CFDictionary *a8, uint64_t a9, const void *a10)
{
  uint64_t v13;
  uint64_t v18;
  xpc_object_t v19;
  uint64_t v20;
  __IOSurface *IOSurface;
  xpc_object_t XPCObject;
  xpc_object_t v23;
  xpc_object_t v24;
  uint64_t v25;
  uint64_t v27;
  int64_t valuePtr;
  void *value[2];
  uint64_t v30;
  xpc_object_t xdict;

  LODWORD(v13) = a5;
  xdict = 0;
  v18 = FigXPCCreateBasicMessage();
  if ((_DWORD)v18)
    goto LABEL_35;
  *(_OWORD *)value = *(_OWORD *)a9;
  v30 = *(_QWORD *)(a9 + 16);
  FigXPCMessageSetCMTime();
  xpc_dictionary_set_int64(xdict, "FrameID", (int64_t)a10);
  if (a8)
  {
    value[0] = 0;
    if (CFDictionaryGetValueIfPresent(a8, CFSTR("InstructionID"), (const void **)value))
    {
      valuePtr = 0;
      CFNumberGetValue((CFNumberRef)value[0], kCFNumberSInt64Type, &valuePtr);
      if (!valuePtr)
      {
LABEL_34:
        v18 = FigSignalErrorAt();
        goto LABEL_35;
      }
      xpc_dictionary_set_int64(xdict, "CompositionInstructionID", valuePtr);
    }
    else
    {
      v18 = FigXPCMessageSetCFDictionary();
      if ((_DWORD)v18)
      {
LABEL_35:
        v27 = v18;
        goto LABEL_28;
      }
    }
  }
  if (!a2)
    goto LABEL_27;
  if (a3)
  {
    if (a4)
    {
      xpc_dictionary_set_data(xdict, "SourceTrackIDArray", a3, 4 * a2);
      v19 = xpc_array_create(0, 0);
      if (v19)
      {
        if (a2 >= 1)
        {
          v20 = a2;
          while (!*a4)
          {
            v23 = xpc_null_create();
            xpc_array_append_value(v19, v23);
            if (v23)
              goto LABEL_18;
LABEL_19:
            ++a4;
            if (!--v20)
              goto LABEL_20;
          }
          IOSurface = CVPixelBufferGetIOSurface(*a4);
          if (!IOSurface)
            goto LABEL_29;
          XPCObject = IOSurfaceCreateXPCObject(IOSurface);
          if (!XPCObject)
            goto LABEL_29;
          v23 = XPCObject;
          xpc_array_append_value(v19, XPCObject);
LABEL_18:
          xpc_release(v23);
          goto LABEL_19;
        }
LABEL_20:
        xpc_dictionary_set_value(xdict, "SourceFrameArray", v19);
        xpc_dictionary_set_data(xdict, "SourceSampleBufferTrackIDArray", a6, 4 * (int)v13);
        v24 = xpc_array_create(0, 0);
        if (!v24)
        {
          v25 = FigSignalErrorAt();
LABEL_33:
          v27 = v25;
          goto LABEL_28;
        }
        if ((int)v13 >= 1)
        {
          v13 = v13;
          do
          {
            if (*a7)
            {
              v25 = serverVideoCompositor_addSampleBufferToXPCArray(*a7, v24);
              if ((_DWORD)v25)
                goto LABEL_33;
            }
            ++a7;
          }
          while (--v13);
        }
        xpc_dictionary_set_value(xdict, "SourceSampleBufferArray", v24);
LABEL_27:
        AddNewPendingFrame(a1, a10);
      }
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_29:
  v27 = FigSignalErrorAt();
LABEL_28:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  return v27;
}

uint64_t VCServerCancelPendingFrames(uint64_t a1)
{
  uint64_t v2;

  v2 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v2)
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  FigXPCRelease();
  return v2;
}

uint64_t VCServerCopyPerformanceDictionary(uint64_t a1, CFDictionaryRef *a2)
{
  const __CFAllocator *v4;
  CFDictionaryRef v5;
  uint64_t v6;
  const void *v7;
  double valuePtr;
  void *values[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 keys;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return FigSignalErrorAt();
  keys = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)values = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(int *)(a1 + 64) <= 0)
  {
    *a2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&keys, (const void **)values, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  }
  else
  {
    valuePtr = (float)((float)*(uint64_t *)(a1 + 40) / 1000000.0);
    *(_QWORD *)&keys = CFSTR("MinProcessingTime");
    values[0] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(a1 + 48) / 1000000.0);
    *((_QWORD *)&keys + 1) = CFSTR("MaxProcessingTime");
    values[1] = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    valuePtr = (float)((float)*(uint64_t *)(a1 + 56) / (float)((float)*(int *)(a1 + 64) * 1000000.0));
    *(_QWORD *)&v21 = CFSTR("AverageProcessingTime");
    *(_QWORD *)&v11 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    v5 = CFDictionaryCreate(v4, (const void **)&keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = 0;
    *a2 = v5;
    do
    {
      v7 = values[v6];
      if (v7)
        CFRelease(v7);
      ++v6;
    }
    while (v6 != 3);
  }
  return 0;
}

uint64_t VCServerAnticipateRendering(uint64_t a1)
{
  uint64_t v2;

  v2 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v2)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  FigXPCRelease();
  return v2;
}

uint64_t VCServerPrerollForRendering(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;

  v8 = FigXPCCreateBasicMessage();
  if (!(_DWORD)v8)
  {
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    FigXPCMessageSetCMTime();
    xpc_dictionary_set_int64(0, "RequestID", a6);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), 0);
  }
  FigXPCRelease();
  return v8;
}

void VCServerRenderFrameFromWindowWithSourceSampleSeed(uint64_t a1, const __CFDictionary *a2, const __CFDictionary *a3, uint64_t a4, __int128 *a5, const void *a6, int a7)
{
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if (shouldUseIncrementalUpdateForRenderFrameForWindow_once != -1)
    dispatch_once(&shouldUseIncrementalUpdateForRenderFrameForWindow_once, &__block_literal_global_128);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *a5;
  v16 = *((_QWORD *)a5 + 2);
  if ((shouldUseIncrementalUpdateForRenderFrameForWindow_useIncrementalUpdate & 1) != 0)
    FigVideoCompositionServerCreateRenderFrameFromWindowMessage(v14, a2, a3, a4, (uint64_t)&v15, (int64_t)a6);
  else
    FigVideoCompositionServerCreateIncrementalRenderFrameFromWindowMessage(v14, a2, (const void **)(a1 + 80), a3, (const void **)(a1 + 88), a4, (uint64_t)&v15, (int64_t)a6, a7, (_DWORD *)(a1 + 96));
  AddNewPendingFrame(a1, a6);
}

void AddNewPendingFrame(uint64_t a1, const void *a2)
{
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  CFSetAddValue(*(CFMutableSetRef *)a1, a2);
  JUMPOUT(0x19402EF04);
}

uint64_t __shouldUseIncrementalUpdateForRenderFrameForWindow_block_invoke()
{
  uint64_t result;

  result = (uint64_t)CFPreferencesCopyAppValue(CFSTR("RenderFrameForWindow_incremental_sample_update"), CFSTR("com.apple.coremedia"));
  if (result)
  {
    result = FigCFEqual();
    if (!(_DWORD)result)
      shouldUseIncrementalUpdateForRenderFrameForWindow_useIncrementalUpdate = 1;
  }
  return result;
}

void ReportErrorAndForgetPendingFrames(uint64_t a1, unsigned int a2)
{
  CFMutableSetRef Mutable;
  uint64_t v4;
  const __CFSet *v5;
  _QWORD v6[2];

  v6[0] = a1;
  v6[1] = a2;
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  MEMORY[0x19402EEEC](*(_QWORD *)(a1 + 8));
  v5 = *(const __CFSet **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = Mutable;
  MEMORY[0x19402EF04](v4);
  CFSetApplyFunction(v5, (CFSetApplierFunction)PendingFrameApplierFunction, v6);
  CFRelease(v5);
}

uint64_t PendingFrameApplierFunction(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, _QWORD);

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v4 = a2[2];
  result = CMBaseObjectGetVTable();
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(result + 16) + 40);
  if (v6)
    return v6(v3, a1, v4, 0);
  return result;
}

uint64_t LookupAndRetainVCByObjectIDForConnection()
{
  uint64_t result;

  result = FigXPCServerLookupAndRetainAssociatedObject();
  if (!(_DWORD)result)
    return FigSignalErrorAt();
  return result;
}

uint64_t FigUpstreamMonitor_CreateOrRetainSharedMonitor(char a1)
{
  uint64_t v2;
  _QWORD block[6];
  char v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  if (GetUpstreamMonitorQueue_once != -1)
    dispatch_once(&GetUpstreamMonitorQueue_once, &__block_literal_global_129);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __FigUpstreamMonitor_CreateOrRetainSharedMonitor_block_invoke;
  block[3] = &unk_1E2FBC1E0;
  block[4] = &v6;
  block[5] = GetUpstreamMonitorQueue_queue;
  v5 = a1;
  dispatch_sync((dispatch_queue_t)GetUpstreamMonitorQueue_queue, block);
  v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void FigUpstreamMonitor_ReleaseSharedMonitor(uint64_t a1)
{
  _QWORD v2[6];

  if (a1)
  {
    if (GetUpstreamMonitorQueue_once != -1)
      dispatch_once(&GetUpstreamMonitorQueue_once, &__block_literal_global_129);
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = __FigUpstreamMonitor_ReleaseSharedMonitor_block_invoke;
    v2[3] = &__block_descriptor_tmp_2_7;
    v2[4] = GetUpstreamMonitorQueue_queue;
    v2[5] = a1;
    dispatch_sync((dispatch_queue_t)GetUpstreamMonitorQueue_queue, v2);
  }
}

void FigUpstreamMonitor_DisposeGuts(CFTypeRef *a1)
{
  if (a1)
  {
    if (a1[6])
    {
      CMNotificationCenterRemoveListener();
      CMNotificationCenterBarrier();
      CMNotificationCenterUnregisterForBarrierSupport();
    }
    if (*a1)
      CFRelease(*a1);
    free(a1);
  }
}

uint64_t FigUpstreamMonitor_BeginMonitoring(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)result)
      return (*(uint64_t (**)(_QWORD))(result + 16))(*(_QWORD *)result);
  }
  return result;
}

uint64_t FigUpstreamMonitor_EndMonitoring(uint64_t result)
{
  if (result)
  {
    if (*(_QWORD *)result)
      return (*(uint64_t (**)(_QWORD))(result + 24))(*(_QWORD *)result);
  }
  return result;
}

_QWORD *FigUpstreamMonitor_GetStatus(_QWORD *result, uint64_t a2, _DWORD *a3, _DWORD *a4, _BYTE *a5)
{
  _QWORD *v8;
  int v9;
  int v10;
  int v11;
  char v12;
  uint64_t v13;

  v8 = result;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  if (!result)
    goto LABEL_6;
  result = (_QWORD *)*result;
  if (!*v8)
  {
    LOBYTE(v8) = 0;
LABEL_6:
    v9 = 0;
    v10 = 0;
    goto LABEL_4;
  }
  result = (_QWORD *)((uint64_t (*)(_QWORD *))v8[4])(result);
  v9 = v13;
  v10 = HIDWORD(v13);
  LOBYTE(v8) = v12;
LABEL_4:
  *a3 = v10;
  *a4 = v9;
  *a5 = (_BYTE)v8;
  return result;
}

uint64_t FigUpstreamMonitor_GetExternalProtectionState(uint64_t result, int a2)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;

  v6 = 0;
  if (result)
  {
    if (*(_QWORD *)result)
    {
      result = (*(uint64_t (**)(_QWORD, int *))(result + 40))(*(_QWORD *)result, &v6);
      if (a2 != 7 && (_DWORD)result == 2)
      {
        if ((a2 - 1) >= 2)
          v3 = 1;
        else
          v3 = 2;
        if (a2 == 1)
          v4 = 2;
        else
          v4 = 1;
        if (v6 == 1)
          v5 = v4;
        else
          v5 = 2;
        if (v6 == 2)
          v5 = v3;
        if (v6)
          return v5;
        else
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t FigHDCPMonitorCreateWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  *a4 = CFSTR("fake AUCMonitor");
  return 0;
}

uint64_t FigHDCPMonitorGetSecureStatusTypeAndIsDeterminedForDisplays(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _BYTE *a5, int *a6)
{
  int v6;

  *a3 = 2;
  *a5 = 1;
  *a4 = 0;
  v6 = FigHDCPMonitorGetSecureStatusTypeAndIsDeterminedForDisplays_statusSeed++;
  *a6 = v6;
  return 0;
}

uint64_t FigHDCPMonitorGetExternalProtectionStateAndType(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0xFFFFFFFFLL;
}

void FigUpstreamMonitorProtectionStatusChangedCallback(uint64_t a1)
{
  uint64_t v2;

  v2 = FigUpstreamMonitor_CreateOrRetainSharedMonitor(0);
  if (v2 == a1)
    CMNotificationCenterPostNotification();
  FigUpstreamMonitor_ReleaseSharedMonitor(v2);
}

void FigUpstreamMonitorExternalProtectionStateChangedCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = FigUpstreamMonitor_CreateOrRetainSharedMonitor(0);
  if (v3 == a2)
    CMNotificationCenterPostNotification();
  FigUpstreamMonitor_ReleaseSharedMonitor(v3);
}

uint64_t FigVTTStringifyFigGeometryDimensionAndAppend(__CFString *a1, uint64_t a2, int a3)
{
  if (!a1)
    return FigSignalErrorAt();
  figTTMLStringifyFigGeometryDimensionAndAppend(a1, a2, a3);
  return 0;
}

uint64_t FigVTTStringifyFigGeometryPointAndAppend(__CFString *a1, uint64_t *a2)
{
  if (!a1)
    return FigSignalErrorAt();
  figTTMLStringifyFigGeometryDimensionAndAppend(a1, *a2, a2[1]);
  CFStringAppend(a1, CFSTR(","));
  figTTMLStringifyFigGeometryDimensionAndAppend(a1, a2[2], a2[3]);
  return 0;
}

CFStringRef FigVTTCopyCMTimeAsTimeStamp(CMTime *a1)
{
  CMTimeValue v1;
  uint64_t v2;
  CMTimeValue v3;
  CMTime time;
  CMTime v6;

  if ((a1->flags & 0x1D) == 1)
  {
    time = *a1;
    CMTimeConvertScale(&v6, &time, 1000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    v1 = v6.value - 3600000 * (int)(v6.value / 3600000);
    v2 = v1 / 60000;
    v3 = v1 - 60000 * (int)(v1 / 60000);
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%d:%02d:%02d.%03d"), v6.value / 3600000, v2, v3 / 1000, v3 + 4294966296 * (v3 / 1000));
  }
  else
  {
    FigSignalErrorAt();
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &stru_1E2FD85F8);
  }
}

CFStringRef FigVTTCopyRGBAColorAsColorSyntax(float32x4_t a1, float32_t a2, float a3, float a4)
{
  uint64_t v4;
  const void *v5;
  unsigned int v6;
  const void *Value;
  const void *v8;
  int32x4_t v10;
  uint64_t v11;

  v4 = 0;
  LODWORD(v5) = 0;
  a1.f32[1] = a2;
  a1.i64[1] = __PAIR64__(LODWORD(a4), LODWORD(a3));
  v11 = *MEMORY[0x1E0C80C00];
  v10 = vcvtq_s32_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)));
  do
  {
    v6 = v10.i32[v4] & ~(v10.i32[v4] >> 31);
    if (v6 >= 0xFF)
      v6 = 255;
    v5 = (const void *)(v6 | ((_DWORD)v5 << 8));
    v10.i32[v4++] = v6;
  }
  while (v4 != 4);
  MEMORY[0x19402F294](&initRGBANamedCSSColorMaps, figVTTInitRGBANamedCSSColorMaps);
  Value = CFDictionaryGetValue((CFDictionaryRef)sRGBAToNamedCSSColorMap, v5);
  if (!Value)
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("rgba(%d,%d,%d,%0.2f)"), v10.u32[0], v10.u32[1], v10.u32[2], (float)v10.i32[3] / 255.0);
  v8 = Value;
  CFRetain(Value);
  return (CFStringRef)v8;
}

CFStringRef FigVTTCGColorCopyAsVTTColorSyntax(CGColor *a1)
{
  CGColorSpace *ColorSpace;
  const CGFloat *Components;
  float32x4_t v4;
  float32_t v5;
  float v6;
  float v7;

  ColorSpace = CGColorGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB && CGColorGetNumberOfComponents(a1) == 4)
  {
    Components = CGColorGetComponents(a1);
    *(CGFloat *)v4.i64 = *Components;
    v4.f32[0] = *Components;
    v5 = Components[1];
    v6 = Components[2];
    v7 = Components[3];
    return FigVTTCopyRGBAColorAsColorSyntax(v4, v5, v6, v7);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t FigVTTCGColorCopyVTTColorAttributeValueAsCSSColorSyntax(const __CFString *a1, _QWORD *a2)
{
  CFTypeID v4;
  CFTypeRef v5;

  if (a1 && (v4 = CFGetTypeID(a1), v4 == CFStringGetTypeID()))
  {
    if (CFStringFind(a1, CFSTR("rgba("), 1uLL).location == -1
      && (MEMORY[0x19402F294](&initRGBANamedCSSColorMaps, figVTTInitRGBANamedCSSColorMaps),
          !FigCFDictionaryGetInt32IfPresent()))
    {
      v5 = 0;
    }
    else
    {
      v5 = CFRetain(a1);
    }
    *a2 = v5;
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_BackgroundColor(void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  CFStringRef v5;
  CFStringRef v6;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CGColorGetTypeID())
    return FigSignalErrorAt();
  v5 = FigVTTCGColorCopyAsVTTColorSyntax((CGColor *)a1);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ background-color"), v5);
  CFRelease(v6);
  return 0;
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_WritingMode(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  __CFString **v4;

  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual() || FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_writingMode_horizontalTopToBottom;
LABEL_6:
        CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ writing-mode"), *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_writingMode_verticalRightToLeft;
        goto LABEL_6;
      }
      if (FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_writingMode_verticalLeftToRight;
        goto LABEL_6;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_TextColor(void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  CFStringRef v5;
  CFStringRef v6;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CGColorGetTypeID())
    return FigSignalErrorAt();
  v5 = FigVTTCGColorCopyAsVTTColorSyntax((CGColor *)a1);
  if (!v5)
    return FigSignalErrorAt();
  v6 = v5;
  CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ color"), v5);
  CFRelease(v6);
  return 0;
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontWeight(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  __CFString **v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA35B0]))
      {
        v5 = kFigVTT_AttributeValue_css_fontWeight_normal;
LABEL_7:
        CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ font-weight"), *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA35A8]))
      {
        v5 = kFigVTT_AttributeValue_css_fontWeight_bold;
        goto LABEL_7;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontStyle(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  __CFString **v5;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3590]))
      {
        v5 = kFigVTT_AttributeValue_css_fontStyle_normal;
LABEL_9:
        CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ font-style"), *v5);
        return 0;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3588]))
      {
        v5 = kFigVTT_AttributeValue_css_fontStyle_italic;
        goto LABEL_9;
      }
      if (CFEqual(a1, (CFTypeRef)*MEMORY[0x1E0CA3598]))
      {
        v5 = kFigVTT_AttributeValue_css_fontStyle_oblique;
        goto LABEL_9;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_Decoration(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  int v5;
  CFMutableStringRef Mutable;
  __CFString *v7;
  uint64_t v8;
  int v9;
  int valuePtr;
  _DWORD v12[2];
  const __CFString *v13;
  int v14;
  const __CFString *v15;
  int v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  valuePtr = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
    return FigSignalErrorAt();
  CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt32Type, &valuePtr);
  v5 = valuePtr;
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (Mutable)
  {
    v7 = Mutable;
    v8 = 0;
    v9 = 1;
    v12[0] = 1;
    v13 = CFSTR("underline");
    v14 = 2;
    v15 = CFSTR("line-through");
    v16 = 4;
    v17 = CFSTR("overline");
    do
    {
      if ((v12[v8] & v5) != 0)
      {
        if (!v9)
          CFStringAppend(v7, CFSTR(" "));
        CFStringAppend(v7, *(CFStringRef *)&v12[v8 + 2]);
        v9 = 0;
      }
      v8 += 4;
    }
    while (v8 != 12);
    if (!CFStringGetLength(v7))
      CFStringAppend(v7, CFSTR("none"));
    CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ text-decoration"), v7);
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
    CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ text-decoration"), 0);
  }
  return 0;
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_TextAlign(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  __CFString **v4;

  if (a1)
  {
    v3 = CFGetTypeID(a1);
    if (v3 == CFStringGetTypeID())
    {
      if (FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_textAlign_start;
LABEL_13:
        CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ text-align"), *v4);
        return 0;
      }
      if (FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_textAlign_end;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_textAlign_center;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_textAlign_left;
        goto LABEL_13;
      }
      if (FigCFEqual())
      {
        v4 = kFigVTT_AttributeValue_css_textAlign_right;
        goto LABEL_13;
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontFamily(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  CFMutableStringRef Mutable;
  uint64_t Count;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const __CFString *Value;
  uint64_t v10;

  if (a1 && (v3 = CFGetTypeID(a1), v3 == FigCaptionFontFamilyNameListGetTypeID()))
  {
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Mutable)
    {
      Count = FigCaptionFontFamilyNameListGetCount();
      if (!Count)
      {
LABEL_11:
        CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ font-family"), Mutable);
        v10 = 0;
        goto LABEL_12;
      }
      v6 = Count;
      v7 = 0;
      while (1)
      {
        v8 = FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex();
        if ((_DWORD)v8)
          break;
        if (v7)
          CFStringAppend(Mutable, CFSTR(","));
        MEMORY[0x19402F294](&figVTTDocumentWriter_getVTTFontFamilyName_once, initMapFromFigCaptionFontFamilyToVTTFontFamily);
        Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)sMapFromFigCaptionFontFamilyToVTTFontFamily, 0);
        if (!Value)
          goto LABEL_15;
        CFStringAppend(Mutable, Value);
        if (v6 == ++v7)
          goto LABEL_11;
      }
    }
    else
    {
LABEL_15:
      v8 = FigSignalErrorAt();
    }
    v10 = v8;
  }
  else
  {
    v10 = FigSignalErrorAt();
    Mutable = 0;
  }
LABEL_12:
  if (Mutable)
    CFRelease(Mutable);
  return v10;
}

uint64_t FigVTTDocumentWriterMapPropertyToAttribute_FontSize(const void *a1, __CFDictionary *a2)
{
  CFTypeID v3;
  __CFString *Mutable;
  int v5;

  if (!a1)
    return FigSignalErrorAt();
  v3 = CFGetTypeID(a1);
  if (v3 != CFDictionaryGetTypeID())
    return FigSignalErrorAt();
  FigGeometrySizeMakeFromDictionary();
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v5 = FigGeometryDimensionEqualToDimension();
  figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
  if (!v5)
  {
    CFStringAppend(Mutable, CFSTR(" "));
    figTTMLStringifyFigGeometryDimensionAndAppend(Mutable, 0, 0);
  }
  CFDictionarySetValue(a2, CFSTR("https://www.w3.org/Style/CSS/ font-size"), Mutable);
  if (Mutable)
    CFRelease(Mutable);
  return 0;
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_BackgroundColor(const __CFString *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  const void *v5;
  const void *v7;

  v7 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  FigVTTCGColorCopyVTTColorAttributeValueAsCSSColorSyntax(a1, &v7);
  v5 = v7;
  if (v7)
  {
    CFDictionarySetValue(a2, CFSTR("name"), CFSTR("background-color"));
    CFDictionarySetValue(a2, CFSTR("value"), v5);
    CFRelease(v5);
  }
  return 0;
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_WritingMode(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  __CFString **v5;
  __CFString *v6;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, CFSTR("horizontal-tb")))
      {
        v5 = kFigVTT_PropertyValue_css_writingMode_horizontalTopToBottom;
      }
      else if (CFEqual(a1, CFSTR("vertical-lr")))
      {
        v5 = kFigVTT_PropertyValue_css_writingMode_verticalLeftToRight;
      }
      else
      {
        if (!CFEqual(a1, CFSTR("vertical-rl")))
          return 0;
        v5 = kFigVTT_PropertyValue_css_writingMode_verticalRightToLeft;
      }
      v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, CFSTR("name"), CFSTR("writing-mode"));
        CFDictionarySetValue(a2, CFSTR("value"), v6);
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_TextColor(const __CFString *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  const void *v5;
  const void *v7;

  v7 = 0;
  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  FigVTTCGColorCopyVTTColorAttributeValueAsCSSColorSyntax(a1, &v7);
  v5 = v7;
  if (v7)
  {
    CFDictionarySetValue(a2, CFSTR("name"), CFSTR("color"));
    CFDictionarySetValue(a2, CFSTR("value"), v5);
    CFRelease(v5);
  }
  return 0;
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontWeight(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  __CFString **v5;
  __CFString *v6;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, CFSTR("normal")))
      {
        v5 = kFigVTT_PropertyValue_css_fontWeight_normal;
      }
      else
      {
        if (!CFEqual(a1, CFSTR("bold")))
          return 0;
        v5 = kFigVTT_PropertyValue_css_fontWeight_bold;
      }
      v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, CFSTR("name"), CFSTR("font-weight"));
        CFDictionarySetValue(a2, CFSTR("value"), v6);
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontStyle(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  __CFString **v5;
  __CFString *v6;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, CFSTR("normal")))
      {
        v5 = kFigVTT_PropertyValue_css_fontStyle_normal;
      }
      else if (CFEqual(a1, CFSTR("italic")))
      {
        v5 = kFigVTT_PropertyValue_css_fontStyle_italic;
      }
      else
      {
        if (!CFEqual(a1, CFSTR("oblique")))
          return 0;
        v5 = kFigVTT_PropertyValue_css_fontStyle_oblique;
      }
      v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, CFSTR("name"), CFSTR("font-style"));
        CFDictionarySetValue(a2, CFSTR("value"), v6);
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_Decoration(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  __CFString **v5;
  __CFString *v6;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, CFSTR("underline")))
      {
        v5 = kFigVTT_PropertyValue_css_textDecoration_underline;
      }
      else if (CFEqual(a1, CFSTR("none")))
      {
        v5 = kFigVTT_PropertyValue_css_textDecoration_none;
      }
      else if (CFEqual(a1, CFSTR("overline")))
      {
        v5 = kFigVTT_PropertyValue_css_textDecoration_overline;
      }
      else
      {
        if (!CFEqual(a1, CFSTR("line-through")))
          return 0;
        v5 = kFigVTT_PropertyValue_css_textDecoration_lineThrough;
      }
      v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, CFSTR("name"), CFSTR("text-decoration"));
        CFDictionarySetValue(a2, CFSTR("value"), v6);
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_TextAlign(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;
  __CFString **v5;
  __CFString *v6;

  if (a1)
  {
    v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID())
    {
      if (CFEqual(a1, CFSTR("left")))
      {
        v5 = kFigVTT_PropertyValue_css_textAlign_left;
      }
      else if (CFEqual(a1, CFSTR("right")))
      {
        v5 = kFigVTT_PropertyValue_css_textAlign_right;
      }
      else if (CFEqual(a1, CFSTR("center")))
      {
        v5 = kFigVTT_PropertyValue_css_textAlign_center;
      }
      else if (CFEqual(a1, CFSTR("start")))
      {
        v5 = kFigVTT_PropertyValue_css_textAlign_start;
      }
      else
      {
        if (!CFEqual(a1, CFSTR("end")))
          return 0;
        v5 = kFigVTT_PropertyValue_css_textAlign_end;
      }
      v6 = *v5;
      if (*v5)
      {
        CFDictionarySetValue(a2, CFSTR("name"), CFSTR("text-align"));
        CFDictionarySetValue(a2, CFSTR("value"), v6);
      }
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontFamily(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  CFDictionarySetValue(a2, CFSTR("name"), CFSTR("font-family"));
  CFDictionarySetValue(a2, CFSTR("value"), a1);
  return 0;
}

uint64_t FigVTTDocumentWriterMapAttributeToCSS_FontSize(const void *a1, __CFDictionary *a2)
{
  CFTypeID v4;

  if (!a1)
    return FigSignalErrorAt();
  v4 = CFGetTypeID(a1);
  if (v4 != CFStringGetTypeID())
    return FigSignalErrorAt();
  CFDictionarySetValue(a2, CFSTR("name"), CFSTR("font-size"));
  CFDictionarySetValue(a2, CFSTR("value"), a1);
  return 0;
}

uint64_t figVTTInitRGBANamedCSSColorMaps()
{
  const __CFAllocator *v0;
  const CFDictionaryValueCallBacks *v1;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v3;
  uint64_t result;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  v3 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], v1);
  CFDictionarySetValue(Mutable, (const void *)0xF0F8FFFFLL, CFSTR("aliceblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFAEBD7FFLL, CFSTR("antiquewhite"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFF, CFSTR("aqua"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7FFFD4FF, CFSTR("aquamarine"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF0FFFFFFLL, CFSTR("azure"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5F5DCFFLL, CFSTR("beige"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFE4C4FFLL, CFSTR("bisque"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF, CFSTR("black"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFEBCDFFLL, CFSTR("blanchedalmond"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFF, CFSTR("blue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8A2BE2FFLL, CFSTR("blueviolet"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA52A2AFFLL, CFSTR("brown"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDEB887FFLL, CFSTR("burlywood"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x5F9EA0FF, CFSTR("cadetblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7FFF00FF, CFSTR("chartreuse"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD2691EFFLL, CFSTR("chocolate"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF7F50FFLL, CFSTR("coral"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6495EDFF, CFSTR("cornflowerblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFF8DCFFLL, CFSTR("cornsilk"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDC143CFFLL, CFSTR("crimson"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFF, CFSTR("cyan"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8BFF, CFSTR("darkblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B8BFF, CFSTR("darkcyan"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB8860BFFLL, CFSTR("darkgoldenrod"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA9A9A9FFLL, CFSTR("darkgray"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA9A9A9FFLL, CFSTR("darkgrey"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6400FF, CFSTR("darkgreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBDB76BFFLL, CFSTR("darkkhaki"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B008BFFLL, CFSTR("darkmagenta"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x556B2FFF, CFSTR("darkolivegreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF8C00FFLL, CFSTR("darkorange"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9932CCFFLL, CFSTR("darkorchid"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B0000FFLL, CFSTR("darkred"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xE9967AFFLL, CFSTR("darksalmon"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8FBC8FFFLL, CFSTR("darkseagreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x483D8BFF, CFSTR("darkslateblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x2F4F4FFF, CFSTR("darkslategray"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x2F4F4FFF, CFSTR("darkslategrey"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCED1FF, CFSTR("darkturquoise"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9400D3FFLL, CFSTR("darkviolet"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF1493FFLL, CFSTR("deeppink"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBFFFFF, CFSTR("deepskyblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x696969FF, CFSTR("dimgray"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x696969FF, CFSTR("dimgrey"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x1E90FFFF, CFSTR("dodgerblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB22222FFLL, CFSTR("firebrick"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFAF0FFLL, CFSTR("floralwhite"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x228B22FF, CFSTR("forestgreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF00FFFFLL, CFSTR("fuchsia"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDCDCDCFFLL, CFSTR("gainsboro"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF8F8FFFFLL, CFSTR("ghostwhite"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFD700FFLL, CFSTR("gold"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDAA520FFLL, CFSTR("goldenrod"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x808080FFLL, CFSTR("gray"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x808080FFLL, CFSTR("grey"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8000FF, CFSTR("green"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xADFF2FFFLL, CFSTR("greenyellow"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF0FFF0FFLL, CFSTR("honeydew"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF69B4FFLL, CFSTR("hotpink"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCD5C5CFFLL, CFSTR("indianred"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x4B0082FF, CFSTR("indigo"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFF0FFLL, CFSTR("ivory"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF0E68CFFLL, CFSTR("khaki"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xE6E6FAFFLL, CFSTR("lavender"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFF0F5FFLL, CFSTR("lavenderblush"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7CFC00FF, CFSTR("lawngreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFACDFFLL, CFSTR("lemonchiffon"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xADD8E6FFLL, CFSTR("lightblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF08080FFLL, CFSTR("lightcoral"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xE0FFFFFFLL, CFSTR("lightcyan"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFAFAD2FFLL, CFSTR("lightgoldenrodyellow"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD3D3D3FFLL, CFSTR("lightgray"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD3D3D3FFLL, CFSTR("lightgrey"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x90EE90FFLL, CFSTR("lightgreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFB6C1FFLL, CFSTR("lightpink"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFA07AFFLL, CFSTR("lightsalmon"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x20B2AAFF, CFSTR("lightseagreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x87CEFAFFLL, CFSTR("lightskyblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x778899FF, CFSTR("lightslategray"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x778899FF, CFSTR("lightslategrey"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB0C4DEFFLL, CFSTR("lightsteelblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFE0FFLL, CFSTR("lightyellow"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF00FF, CFSTR("lime"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x32CD32FF, CFSTR("limegreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFAF0E6FFLL, CFSTR("linen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF00FFFFLL, CFSTR("magenta"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x800000FFLL, CFSTR("maroon"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x66CDAAFF, CFSTR("mediumaquamarine"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCDFF, CFSTR("mediumblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBA55D3FFLL, CFSTR("mediumorchid"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9370DBFFLL, CFSTR("mediumpurple"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x3CB371FF, CFSTR("mediumseagreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x7B68EEFF, CFSTR("mediumslateblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFA9AFF, CFSTR("mediumspringgreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x48D1CCFF, CFSTR("mediumturquoise"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xC71585FFLL, CFSTR("mediumvioletred"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x191970FF, CFSTR("midnightblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5FFFAFFLL, CFSTR("mintcream"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFE4E1FFLL, CFSTR("mistyrose"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFE4B5FFLL, CFSTR("moccasin"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFDEADFFLL, CFSTR("navajowhite"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x80FF, CFSTR("navy"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFDF5E6FFLL, CFSTR("oldlace"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x808000FFLL, CFSTR("olive"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6B8E23FF, CFSTR("olivedrab"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFA500FFLL, CFSTR("orange"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF4500FFLL, CFSTR("orangered"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDA70D6FFLL, CFSTR("orchid"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xEEE8AAFFLL, CFSTR("palegoldenrod"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x98FB98FFLL, CFSTR("palegreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xAFEEEEFFLL, CFSTR("paleturquoise"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDB7093FFLL, CFSTR("palevioletred"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFEFD5FFLL, CFSTR("papayawhip"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFDAB9FFLL, CFSTR("peachpuff"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xCD853FFFLL, CFSTR("peru"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFC0CBFFLL, CFSTR("pink"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xDDA0DDFFLL, CFSTR("plum"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xB0E0E6FFLL, CFSTR("powderblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x800080FFLL, CFSTR("purple"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x663399FF, CFSTR("rebeccapurple"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF0000FFLL, CFSTR("red"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xBC8F8FFFLL, CFSTR("rosybrown"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x4169E1FF, CFSTR("royalblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8B4513FFLL, CFSTR("saddlebrown"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFA8072FFLL, CFSTR("salmon"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF4A460FFLL, CFSTR("sandybrown"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x2E8B57FF, CFSTR("seagreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFF5EEFFLL, CFSTR("seashell"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xA0522DFFLL, CFSTR("sienna"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xC0C0C0FFLL, CFSTR("silver"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x87CEEBFFLL, CFSTR("skyblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x6A5ACDFF, CFSTR("slateblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x708090FF, CFSTR("slategray"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x708090FF, CFSTR("slategrey"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFAFAFFLL, CFSTR("snow"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF7FFF, CFSTR("springgreen"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x4682B4FF, CFSTR("steelblue"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD2B48CFFLL, CFSTR("tan"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x8080FF, CFSTR("teal"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xD8BFD8FFLL, CFSTR("thistle"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFF6347FFLL, CFSTR("tomato"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, 0, CFSTR("transparent"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x40E0D0FF, CFSTR("turquoise"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xEE82EEFFLL, CFSTR("violet"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5DEB3FFLL, CFSTR("wheat"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFFFFFFLL, CFSTR("white"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xF5F5F5FFLL, CFSTR("whitesmoke"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0xFFFF00FFLL, CFSTR("yellow"));
  FigCFDictionarySetInt32();
  CFDictionarySetValue(Mutable, (const void *)0x9ACD32FFLL, CFSTR("yellowgreen"));
  result = FigCFDictionarySetInt32();
  sRGBAToNamedCSSColorMap = (uint64_t)Mutable;
  sNamedCSSColorToRGBAMap = (uint64_t)v3;
  return result;
}

void initMapFromFigCaptionFontFamilyToVTTFontFamily()
{
  __CFDictionary *Mutable;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3290], CFSTR("default"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32D0], CFSTR("serif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32C8], CFSTR("sans-serif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32A0], CFSTR("monospace"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3288], CFSTR("cursive"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA3298], CFSTR("fantasy"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32C0], CFSTR("serif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32B8], CFSTR("sans-serif"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32B0], CFSTR("monospace"));
  CFDictionaryAddValue(Mutable, (const void *)*MEMORY[0x1E0CA32A8], CFSTR("monospace"));
  sMapFromFigCaptionFontFamilyToVTTFontFamily = (uint64_t)Mutable;
}

CFTypeRef _FigURLStorageSessionNSCopyGlobalSession()
{
  CFTypeRef result;

  if (sCreateGlobalFigURLStorageSessionNSTypeOnce != -1)
    dispatch_once(&sCreateGlobalFigURLStorageSessionNSTypeOnce, &__block_literal_global_130);
  result = (CFTypeRef)sGlobalFigURLStorageSessionNS;
  if (sGlobalFigURLStorageSessionNS)
    return CFRetain((CFTypeRef)sGlobalFigURLStorageSessionNS);
  return result;
}

uint64_t figURLStorageSessionNSCommonCreate(uint64_t a1, void *a2, void *a3, void *a4)
{
  _QWORD *DerivedStorage;

  if (FigURLStorageSessionNSGetClassID_sRegisterFigURLStorageSessionNSTypeOnce != -1)
    dispatch_once(&FigURLStorageSessionNSGetClassID_sRegisterFigURLStorageSessionNSTypeOnce, &__block_literal_global_10_3);
  if (!CMDerivedObjectCreate())
  {
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = objc_msgSend(a2, "copy");
    DerivedStorage[1] = a3;
    DerivedStorage[2] = a4;
  }
  return 0;
}

uint64_t _FigURLStorageSessionNSCreate(CFDictionaryRef theDict, uint64_t *a2)
{
  void *Value;
  void *v5;
  void *v6;
  uint64_t v7;
  const __CFData *v8;
  const __CFData *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    if (theDict)
      Value = (void *)CFDictionaryGetValue(theDict, CFSTR("FUSS_AdditionalHTTPCookies"));
    else
      Value = 0;
    v5 = (void *)MEMORY[0x19403137C]();
    v6 = (void *)objc_msgSend(MEMORY[0x1E0C92CA0], "ephemeralSessionConfiguration");
    v7 = *MEMORY[0x1E0C9AE50];
    if (v7 == -[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF80F8)
      && (objc_opt_respondsToSelector() & 1) != 0)
    {
      objc_msgSend(v6, "set_alwaysPerformDefaultTrustEvaluation:", 1);
    }
    objc_msgSend(v6, "setMultipathServiceType:", 0);
    if (v7 == -[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF80D8))
      objc_msgSend(v6, "setMultipathServiceType:", 100);
    objc_msgSend(v6, "set_multipathAlternatePort:", 5228);
    if (_os_feature_enabled_impl())
      objc_msgSend(v6, "set_usesNWLoader:", 1);
    objc_msgSend(v6, "set_alternativeServicesStorage:", objc_msgSend(MEMORY[0x1E0C92D18], "sharedPersistentStore"));
    objc_msgSend(v6, "setURLCache:", 0);
    objc_msgSend(v6, "setHTTPCookieAcceptPolicy:", 0);
    v8 = (const __CFData *)(id)-[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF8058);
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v6, "set_sourceApplicationBundleIdentifier:", v8);
    }
    else
    {
      v9 = (const __CFData *)-[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF8038);
      if (v9)
      {
        objc_msgSend(v6, "set_sourceApplicationAuditTokenData:", v9);
        v9 = (const __CFData *)FigCFHTTPCopyClientBundleIdentifier(v9);
      }
    }
    v10 = (id)-[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF8078);
    v11 = -[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF8098);
    if (v11)
      objc_msgSend(v6, "set_atsContext:", v11);
    v12 = -[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF80B8);
    v13 = -[__CFDictionary valueForKey:](theDict, "valueForKey:", 0x1E2FF8018);
    if (v13 || v7 == v12)
    {
      v14 = (void *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 0);
      v15 = v14;
      if (v7 == v12)
        objc_msgSend(v14, "setObject:forKey:", v7, *MEMORY[0x1E0C93070]);
      if (v13)
        objc_msgSend(v15, "setObject:forKey:", v13, *MEMORY[0x1E0C93270]);
      objc_msgSend(v6, "set_socketStreamProperties:", v15);
    }
    v16 = figURLStorageSessionNSCommonCreate(*MEMORY[0x1E0C9AE00], v6, v9, v10);
    v18 = v16;
    if (v16 && Value)
    {
      figURLStorageSessionSetCookieDescArrayForURL(v16, v17, Value);
      objc_autoreleasePoolPop(v5);
    }
    else
    {
      objc_autoreleasePoolPop(v5);
      if (!v18)
      {
        v19 = FigSignalErrorAt();
        goto LABEL_30;
      }
    }
    v19 = 0;
    *a2 = v18;
  }
  else
  {
    v19 = FigSignalErrorAt();
    v9 = 0;
    v10 = 0;
  }
LABEL_30:

  return v19;
}

uint64_t figURLStorageSessionSetCookieDescArrayForURL(uint64_t a1, uint64_t a2, void *a3)
{
  id *DerivedStorage;
  void *v5;
  uint64_t v6;
  _QWORD v8[5];

  DerivedStorage = (id *)CMBaseObjectGetDerivedStorage();
  v5 = (void *)MEMORY[0x19403137C]();
  v6 = objc_msgSend(*DerivedStorage, "HTTPCookieStorage");
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __figURLStorageSessionSetCookieDescArrayForURL_block_invoke;
  v8[3] = &unk_1E2FBC4D0;
  v8[4] = v6;
  objc_msgSend(a3, "enumerateObjectsUsingBlock:", v8);
  objc_autoreleasePoolPop(v5);
  return 0;
}

void figURLStorageSessionFinalize()
{
  uint64_t DerivedStorage;
  id *v1;
  void *v2;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v1 = (id *)DerivedStorage;
    v2 = (void *)MEMORY[0x19403137C]();

    *v1 = 0;
    v1[1] = 0;

    v1[2] = 0;
    objc_autoreleasePoolPop(v2);
  }
}

uint64_t figURLStorageSessionCopyCookieDescArrayForURL(uint64_t a1, const __CFURL *a2, CFMutableArrayRef *a3)
{
  uint64_t DerivedStorage;
  id *v6;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t result;
  _QWORD v13[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v6 = (id *)DerivedStorage;
  *a3 = 0;
  if (!FigCFHTTPIsHTTPBasedURL(a2))
    return 4294954513;
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v8 = Mutable;
    v9 = (void *)MEMORY[0x19403137C]();
    if (!v6 || (v10 = (void *)objc_msgSend(*v6, "HTTPCookieStorage")) == 0)
      v10 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C92CA0], "defaultSessionConfiguration"), "HTTPCookieStorage");
    v11 = (void *)objc_msgSend(v10, "cookiesForURL:", a2);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __figURLStorageSessionCopyCookieDescArrayForURL_block_invoke;
    v13[3] = &__block_descriptor_40_e15_v32__0_8Q16_B24l;
    v13[4] = v8;
    objc_msgSend(v11, "enumerateObjectsUsingBlock:", v13);
    objc_autoreleasePoolPop(v9);
    result = 0;
    *a3 = v8;
  }
  else
  {
    result = FigSignalErrorAt();
    *a3 = 0;
  }
  return result;
}

uint64_t figURLStorageSessionSetCredentialPlist(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;
  id *v4;
  CFTypeID TypeID;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  v4 = (id *)DerivedStorage;
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
    return FigSignalErrorAt();
  v6 = (void *)MEMORY[0x19403137C]();
  if (v4 && (v7 = objc_msgSend(*v4, "URLCredentialStorage")) != 0)
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __figURLStorageSessionSetCredentialPlist_block_invoke;
    v10[3] = &unk_1E2FBC418;
    v10[4] = v7;
    objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v10);
    v8 = 0;
  }
  else
  {
    v8 = FigSignalErrorAt();
  }
  objc_autoreleasePoolPop(v6);
  return v8;
}

uint64_t figURLStorageSessionCopyCredentialPlistForURL(uint64_t a1, const __CFURL *a2, _QWORD *a3)
{
  uint64_t DerivedStorage;
  id *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v14[7];

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3)
    return FigSignalErrorAt();
  v6 = (id *)DerivedStorage;
  *a3 = 0;
  if (!FigCFHTTPIsHTTPBasedURL(a2))
    return 4294954513;
  v7 = (void *)MEMORY[0x19403137C]();
  if ((v6 && (v8 = (void *)objc_msgSend(*v6, "URLCredentialStorage")) != 0
     || (v8 = (void *)objc_msgSend(MEMORY[0x1E0C92C68], "sharedCredentialStorage")) != 0)
    && (v9 = (void *)objc_msgSend(v8, "allCredentials"),
        (v10 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 0)) != 0))
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __figURLStorageSessionCopyCredentialPlistForURL_block_invoke;
    v14[3] = &unk_1E2FBC468;
    v14[4] = a2;
    v14[5] = v8;
    v14[6] = v10;
    objc_msgSend(v9, "enumerateKeysAndObjectsUsingBlock:", v14);
    v11 = -12783;
  }
  else
  {
    v11 = FigSignalErrorAt();
  }
  if (*a3)
    v12 = 0;
  else
    v12 = v11;
  objc_autoreleasePoolPop(v7);
  return v12;
}

uint64_t figURLStorageSessionCreateHTTPSession(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage;
  uint64_t v5;
  const __CFAllocator *v6;
  __CFDictionary *MutableCopy;
  __CFDictionary *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v5 = DerivedStorage;
  if (!*(_QWORD *)(DerivedStorage + 8) && !*(_QWORD *)(DerivedStorage + 16))
    return _FigHTTPRequestSessionCreateForNSURLSession();
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (a3)
    MutableCopy = CFDictionaryCreateMutableCopy(v6, 0, a3);
  else
    MutableCopy = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = MutableCopy;
  if (!MutableCopy)
    return FigSignalErrorAt();
  v9 = *(const void **)(v5 + 8);
  if (v9)
    CFDictionarySetValue(MutableCopy, CFSTR("FHRSP_ClientBundleIdentifier"), v9);
  v10 = *(const void **)(v5 + 16);
  if (v10)
    CFDictionarySetValue(v8, CFSTR("FHRSP_ClientPersonaIdentifier"), v10);
  v11 = _FigHTTPRequestSessionCreateForNSURLSession();
  CFRelease(v8);
  return v11;
}

void __figURLStorageSessionCopyCookieDescArrayForURL_block_invoke(uint64_t a1, void *a2, CFIndex a3)
{
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), a3, (const void *)objc_msgSend(a2, "properties"));
}

void __figURLStorageSessionSetCredentialPlist_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  _QWORD v7[6];

  v6 = objc_alloc(MEMORY[0x1E0C92C70]);
  FigNSHTTPInitWithSerializedObject(v6, a2);
  if (v6)
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __figURLStorageSessionSetCredentialPlist_block_invoke_2;
    v7[3] = &unk_1E2FBC3F0;
    v7[4] = *(_QWORD *)(a1 + 32);
    v7[5] = v6;
    objc_msgSend(a3, "enumerateObjectsUsingBlock:", v7);
  }
}

uint64_t __figURLStorageSessionSetCredentialPlist_block_invoke_2(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  uint64_t result;
  void *v8;
  uint64_t v9;

  v6 = objc_alloc(MEMORY[0x1E0C92C60]);
  result = objc_msgSend(a2, "length");
  if (result)
  {
    FigNSHTTPInitWithSerializedObject(v6, (uint64_t)a2);
    v8 = *(void **)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 40);
    if (a3)
      return objc_msgSend(v8, "setCredential:forProtectionSpace:", v6, v9);
    else
      return objc_msgSend(v8, "setDefaultCredential:forProtectionSpace:", v6, v9);
  }
  return result;
}

uint64_t __figURLStorageSessionCopyCredentialPlistForURL_block_invoke(id *a1, void *a2, void *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[6];

  if ((objc_msgSend(a2, "isProxy") & 1) != 0
    || objc_msgSend(a2, "serverTrust")
    || (v11 = objc_msgSend((id)objc_msgSend(a1[4], "port"), "integerValue"),
        result = objc_msgSend(a2, "port"),
        v11 == result)
    && (result = objc_msgSend((id)objc_msgSend(a1[4], "host"), "caseInsensitiveCompare:", objc_msgSend(a2, "host"))) == 0
    && (result = objc_msgSend((id)objc_msgSend(a1[4], "scheme"), "caseInsensitiveCompare:", objc_msgSend(a2, "protocol"))) == 0)
  {
    v6 = FigNSHTTPCreateSerializedObjectFromNSSecureCoding((uint64_t)a2);
    v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0);
    v8 = objc_msgSend(a1[5], "defaultCredentialForProtectionSpace:", a2);
    v9 = v8;
    if (v8)
      result = FigNSHTTPCreateSerializedObjectFromNSSecureCoding(v8);
    else
      result = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", 0, 0);
    if (result)
    {
      objc_msgSend(v7, "insertObject:atIndex:", result, 0);
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 3221225472;
      v12[2] = __figURLStorageSessionCopyCredentialPlistForURL_block_invoke_2;
      v12[3] = &unk_1E2FBC440;
      v12[4] = v9;
      v12[5] = v7;
      objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v12);
      return objc_msgSend(a1[6], "setObject:forKey:", v7, v6);
    }
  }
  return result;
}

uint64_t __figURLStorageSessionCopyCredentialPlistForURL_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = objc_msgSend(*(id *)(a1 + 32), "isEqual:");
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 40), "addObject:", FigNSHTTPCreateSerializedObjectFromNSSecureCoding(a3));
  return result;
}

CFStringRef FigURLStorageSessionNSBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigURLStorageSessionNS %p]"), a1);
}

uint64_t __figURLStorageSessionSetCookieDescArrayForURL_block_invoke(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCookie:", objc_msgSend(MEMORY[0x1E0C92C00], "cookieWithProperties:", a2));
}

uint64_t FigAudioSessionClockCreate(uint64_t a1, const void *a2, int a3, _QWORD *a4)
{
  void *v7;
  __CFString **v8;
  __CFString *v9;
  uint64_t v10;
  uint64_t (*v11)(const void *, __CFString *, _QWORD, id *);
  uint64_t v12;
  uint64_t TimeCallback;
  uint64_t DerivedStorage;
  id v16;

  v7 = (void *)MEMORY[0x19403137C]();
  v16 = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4)
    goto LABEL_12;
  if (a3)
  {
    if (a3 == 1)
    {
      v8 = kFigAudioSessionProperty_InputTimeObserver;
      goto LABEL_7;
    }
LABEL_12:
    v12 = FigSignalErrorAt();
LABEL_13:
    TimeCallback = v12;
    goto LABEL_16;
  }
  v8 = kFigAudioSessionProperty_OutputTimeObserver;
LABEL_7:
  v9 = *v8;
  v10 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v10)
  {
    TimeCallback = 4294948075;
    goto LABEL_16;
  }
  v11 = *(uint64_t (**)(const void *, __CFString *, _QWORD, id *))(v10 + 8);
  if (!v11)
  {
    TimeCallback = 4294948071;
    goto LABEL_16;
  }
  v12 = v11(a2, v9, *MEMORY[0x1E0C9AE00], &v16);
  if ((_DWORD)v12)
    goto LABEL_13;
  CMClockGetHostTimeClock();
  TimeCallback = FigDerivedClockCreateWithGetTimeCallback();
  if (!(_DWORD)TimeCallback)
  {
    DerivedStorage = FigDerivedClockGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 16) = v16;
    *(_QWORD *)(DerivedStorage + 8) = CFRetain(a2);
    *a4 = 0;
  }
LABEL_16:

  objc_autoreleasePoolPop(v7);
  return TimeCallback;
}

uint64_t CMClockIsAudioSessionClock()
{
  return FigDerivedClockVerifyCallbacksMatch();
}

uint64_t FigAudioSessionClockCopyClockConfiguration(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, const __CFString *, _QWORD, CFTypeRef *);
  const __CFAllocator *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *);
  uint64_t v13;
  CFMutableDictionaryRef Mutable;
  CFTypeRef cf;
  CFTypeRef v17;

  cf = 0;
  v17 = 0;
  if (!FigDerivedClockVerifyCallbacksMatch())
  {
    v13 = FigSignalErrorAt();
    goto LABEL_14;
  }
  DerivedStorage = FigDerivedClockGetDerivedStorage();
  v4 = *(_QWORD *)(DerivedStorage + 8);
  if (!v4)
    goto LABEL_11;
  v5 = DerivedStorage;
  v6 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v6)
    goto LABEL_11;
  v7 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFTypeRef *))(v6 + 8);
  if (!v7)
  {
LABEL_17:
    v13 = 4294948071;
    goto LABEL_12;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = v7(v4, CFSTR("FAS_CoreSessionID"), *MEMORY[0x1E0C9AE00], &v17);
  if (!(_DWORD)v9)
  {
    v10 = *(_QWORD *)(v5 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
      if (v11)
      {
        v12 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFAllocator *, CFTypeRef *))(v11 + 16);
        if (v12)
        {
          v13 = v12(v10, CFSTR("FAS_AudioSessionID"), v8, &cf);
          if (!(_DWORD)v13)
          {
            Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            FigCFDictionarySetValue();
            FigCFDictionarySetValue();
            FigCFDictionarySetInt32();
            *a2 = Mutable;
          }
          goto LABEL_12;
        }
        goto LABEL_17;
      }
    }
LABEL_11:
    v13 = 4294948075;
    goto LABEL_12;
  }
  v13 = v9;
LABEL_12:
  if (cf)
    CFRelease(cf);
LABEL_14:
  if (v17)
    CFRelease(v17);
  return v13;
}

BOOL FigAudioSessionClockConfigurationCanUseFigAudioSessionToCreateClock(uint64_t a1, _BOOL8 a2)
{
  uint64_t v3;
  uint64_t (*v4)(_BOOL8, const __CFString *, _QWORD, CFTypeRef *);
  int v5;
  CFTypeRef v6;
  CFTypeRef cf;

  cf = 0;
  if (!FigCFDictionaryGetValueIfPresent())
    return 0;
  if (!a2)
    return a2;
  v3 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
  if (!v3)
    return 0;
  v4 = *(uint64_t (**)(_BOOL8, const __CFString *, _QWORD, CFTypeRef *))(v3 + 8);
  if (!v4)
    return 0;
  v5 = v4(a2, CFSTR("FAS_CoreSessionID"), *MEMORY[0x1E0C9AE00], &cf);
  v6 = cf;
  if (v5)
  {
    a2 = 0;
    if (!cf)
      return a2;
    goto LABEL_7;
  }
  a2 = FigCFEqual() != 0;
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
  return a2;
}

uint64_t FigAudioSessionClockCreateFromClockConfigurationAndExistingFigAudioSession(uint64_t a1, uint64_t a2, _BOOL8 a3, _QWORD *a4)
{
  if (FigCFDictionaryGetInt32IfPresent()
    && FigCFDictionaryGetInt32IfPresent()
    && FigAudioSessionClockConfigurationCanUseFigAudioSessionToCreateClock(a2, a3))
  {
    return FigAudioSessionClockCreateForAVAudioSession(a1, 0, 0, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAudioSessionClockCreateForAVAudioSession(uint64_t a1, void *a2, int a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  v7 = FigAudioSessionCreateWithAVAudioSession(a1, a2, &cf);
  if (!(_DWORD)v7)
    v7 = FigAudioSessionClockCreate(a1, cf, a3, a4);
  v8 = v7;
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t FigAudioSessionClockConfigurationCanUseAVAudioSessionToCreateClock(uint64_t a1, void *a2)
{
  uint64_t result;

  result = FigCFDictionaryGetInt64IfPresent();
  if ((_DWORD)result)
    return objc_msgSend((id)objc_msgSend(a2, "getMXSessionProperty:error:", *MEMORY[0x1E0D49630], 0), "unsignedLongLongValue") == 0;
  return result;
}

uint64_t FigAudioSessionClockCreateFromClockConfigurationAndExistingAVAudioSession(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (void *)MEMORY[0x19403137C]();
  if (FigCFDictionaryGetInt32IfPresent()
    && FigCFDictionaryGetInt32IfPresent()
    && FigAudioSessionClockConfigurationCanUseAVAudioSessionToCreateClock(a2, a3))
  {
    v9 = FigAudioSessionClockCreateForAVAudioSession(a1, 0, 0, a4);
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
  v10 = v9;
  objc_autoreleasePoolPop(v8);
  return v10;
}

uint64_t FigAudioSessionClockCreateFromClockConfigurationAndAuditToken(uint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  void *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  const void *v13;
  uint64_t v14;

  v7 = (void *)MEMORY[0x19403137C]();
  v13 = 0;
  v14 = 0;
  if ((FigServer_IsMediaplaybackd()
     || FigServer_IsMediaserverd()
     || FigServer_IsCameracaptured())
    && FigCFDictionaryGetInt32IfPresent()
    && FigCFDictionaryGetInt32IfPresent())
  {
    v8 = a3[1];
    v12[0] = *a3;
    v12[1] = v8;
    v9 = FigAudioSessionCreateWithAVAudioSessionSiblingForAudioSessionID(a1, HIDWORD(v14), v12, CFSTR("FigAudioSessionClock"), &v13);
    if (!(_DWORD)v9)
      v9 = FigAudioSessionClockCreate(a1, v13, v14, a4);
  }
  else
  {
    v9 = FigSignalErrorAt();
  }
  v10 = v9;
  objc_autoreleasePoolPop(v7);
  return v10;
}

uint64_t FigAudioSessionClockCreateForSharedAudioSession(uint64_t a1, int a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;

  v6 = (void *)MEMORY[0x19403137C]();
  v7 = FigAudioSessionClockCreateForAVAudioSession(a1, (void *)objc_msgSend(MEMORY[0x1E0CFF1C8], "sharedInstance"), a2, a3);
  objc_autoreleasePoolPop(v6);
  return v7;
}

CFStringRef audioSessionClock_CopyDebugDesc(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("AudioSessionClock"));
}

void audioSessionClock_Finalize()
{
  uint64_t DerivedStorage;
  const void *v1;

  DerivedStorage = FigDerivedClockGetDerivedStorage();

  *(_QWORD *)(DerivedStorage + 16) = 0;
  v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(_QWORD *)(DerivedStorage + 8) = 0;
  }
}

BOOL audioSessionClock_MightDrift()
{
  uint64_t DerivedStorage;

  DerivedStorage = FigDerivedClockGetDerivedStorage();
  return *(_QWORD *)(DerivedStorage + 16) != *(_QWORD *)(FigDerivedClockGetDerivedStorage() + 16);
}

double audioSessionClock_GetRate(uint64_t a1)
{
  int RateAndNanosecondTimeAndHostTime;
  double result;
  double v3;

  v3 = 1.0;
  RateAndNanosecondTimeAndHostTime = audioSessionClock_getRateAndNanosecondTimeAndHostTime(a1, &v3, 0, 0);
  result = v3;
  if (RateAndNanosecondTimeAndHostTime)
    return 1.0;
  return result;
}

uint64_t audioSessionClock_GetAnchorTime(uint64_t a1, CMTime *a2, CMTime *a3)
{
  _QWORD *DerivedStorage;
  uint64_t RateAndNanosecondTimeAndHostTime;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD, _QWORD, CFTypeRef *);
  NSObject *v13;
  int64_t v14;
  uint64_t v15;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  CFTypeRef cf;
  uint64_t hostTime;
  unint64_t v20;
  CMTime v21;
  CMTime v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v22 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E18];
  v21 = v22;
  hostTime = 0;
  v20 = 0;
  DerivedStorage = (_QWORD *)FigDerivedClockGetDerivedStorage();
  RateAndNanosecondTimeAndHostTime = audioSessionClock_getRateAndNanosecondTimeAndHostTime(a1, 0, &v20, &hostTime);
  if ((_DWORD)RateAndNanosecondTimeAndHostTime)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    if (DerivedStorage[6])
    {
      v8 = DerivedStorage[5];
      v9 = v8 <= v20 ? v20 - v8 : v8 - v20;
      if (v9 - FigHostTimeToNanoseconds() - 100000001 <= 0xFFFFFFFFF4143DFELL)
      {
        cf = 0;
        v10 = DerivedStorage[1];
        if (v10)
        {
          v11 = *(_QWORD *)(CMBaseObjectGetVTable() + 16);
          if (v11)
          {
            v12 = *(void (**)(uint64_t, _QWORD, _QWORD, CFTypeRef *))(v11 + 48);
            if (v12)
              v12(v10, *MEMORY[0x1E0D495D8], *MEMORY[0x1E0C9AE00], &cf);
          }
        }
        v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (cf)
          CFRelease(cf);
      }
    }
    v15 = hostTime;
    v14 = v20;
    DerivedStorage[5] = v20;
    DerivedStorage[6] = v15;
    CMTimeMake(&v22, v14, 1000000000);
    CMClockMakeHostTimeFromSystemUnits(&v21, hostTime);
    if (a2)
      *a2 = v22;
    if (a3)
      *a3 = v21;
  }
  return RateAndNanosecondTimeAndHostTime;
}

uint64_t audioSessionClock_getRateAndNanosecondTimeAndHostTime(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL4 v7;
  uint64_t DerivedStorage;
  int v9;
  int v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a2 != 0;
  DerivedStorage = FigDerivedClockGetDerivedStorage();
  v9 = 4 * v7;
  if (a3)
    v9 = (4 * v7) | 0x20;
  if (a4)
    v10 = v9 | 2;
  else
    v10 = v9;
  v11 = *(void **)(DerivedStorage + 16);
  if (v11)
  {
    objc_msgSend(v11, "currentPresentationTime");
    v12 = v17;
    v13 = v18;
    v14 = v19;
    v15 = v20;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v15 = 0;
  }
  if ((v10 & ~v12) != 0)
    return FigSignalErrorAt();
  if (a2)
    *a2 = v15;
  if (a3)
    *a3 = v14;
  result = 0;
  if (a4)
    *a4 = v13;
  return result;
}

uint64_t FigCDSAVFLayoutRegionCreate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t DerivedStorage;
  uint64_t v9;
  uint64_t ProtocolVTable;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  *a3 = 0;
  if (!a2)
    return 4294950096;
  v18 = 0;
  MEMORY[0x19402F294](&FigCDSAVFLayoutRegionGetClassID_sRegisterFigCDSAVFLayoutRegionBaseTypeOnce, RegisterFigCDSAVFLayoutRegionBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v7 = v18;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 8) = a2;
    *(_QWORD *)(DerivedStorage + 16) = a1;
    *(_BYTE *)(DerivedStorage + 40) = 1;
    v17 = 0;
    FigCDSFreeLayoutRegionCreate(a1, a2, &v17);
    v9 = v17;
    *(_QWORD *)DerivedStorage = v17;
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v11 = *(_QWORD *)(ProtocolVTable + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 200);
        if (v12)
          v12(v9, 1);
      }
    }
    v13 = *(_QWORD *)DerivedStorage;
    FigCDSNodeProtocolGetProtocolID();
    v14 = CMBaseObjectGetProtocolVTable();
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 16);
      if (v15)
      {
        v16 = *(void (**)(uint64_t, uint64_t))(v15 + 216);
        if (v16)
          v16(v13, 1);
      }
    }
    result = 0;
    *a3 = v7;
  }
  return result;
}

void FigCDSAVFLayoutRegionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCDSAVFLayoutRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSAVFLayoutRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCDSAVFLayoutRegion_FigCDSNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCDSAVFLayoutRegion <FigCDSNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v7 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v7)
    return 4294954508;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (v8)
    return v8(v5, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCDSBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCDSBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 144);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 160);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 184);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 200);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 240);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 256);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  CGSize v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(const void *, CGRect *);
  const __CFDictionary *v9;
  const void *Value;
  double MidX;
  double MidY;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(const void *, double, double);
  CGSize size;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(const void *, double, double);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  CGRect v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)(a2 + 272))
  {
    v5 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
    v25.origin = (CGPoint)*MEMORY[0x1E0C9D628];
    v25.size = v5;
    FigCDSNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v7 = *(_QWORD *)(ProtocolVTable + 16);
      if (v7)
      {
        v8 = *(void (**)(const void *, CGRect *))(v7 + 104);
        if (v8)
          v8(a1, &v25);
      }
    }
    v9 = *(const __CFDictionary **)(a2 + 272);
    if (v9)
    {
      Value = CFDictionaryGetValue(v9, a1);
      MidX = CGRectGetMidX(v25);
      MidY = CGRectGetMidY(v25);
      FigCDSOutputNodeProtocolGetProtocolID();
      v13 = CMBaseObjectGetProtocolVTable();
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v15 = *(void (**)(const void *, double, double))(v14 + 72);
          if (v15)
            v15(Value, MidX, MidY);
        }
      }
      size = v25.size;
      FigCDSOutputNodeProtocolGetProtocolID();
      v17 = CMBaseObjectGetProtocolVTable();
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
        {
          v19 = *(void (**)(const void *, double, double))(v18 + 88);
          if (v19)
            v19(Value, size.width, size.height);
        }
      }
    }
  }
  v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 264);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_Layout(uint64_t a1, double *a2)
{
  uint64_t DerivedStorage;
  const char *ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, const char **);
  CFIndex Count;
  const void *v9;
  const __CFString *v10;
  double v11;
  unint64_t v12;
  double v13;
  const void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, const char **);
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(const void *, int *);
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(const void *, double *);
  const __CFDictionary *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(const void *, CGSize *);
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v32;
  CGFloat v33;
  double MidX;
  CGFloat MinY;
  CGFloat v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(const void *, CGRect *);
  const __CFString *Value;
  const __CFNumber *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  const void *v45;
  CFComparisonResult v46;
  double v47;
  char v48;
  CGFloat v49;
  CGFloat v50;
  CGSize v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(const void *, double, double);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(const void *, uint64_t);
  const __CFNumber *v58;
  char v59;
  double v60;
  double v61;
  CGFloat v62;
  double v63;
  double v64;
  double v65;
  double v66;
  CGSize v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(const void *, CGRect *);
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(const void *, float *);
  uint64_t v76;
  uint64_t v77;
  void (*v78)(const void *, float *);
  const __CFString *v79;
  const __CFString *v80;
  const __CFString *v81;
  CFComparisonResult v82;
  double v83;
  double v84;
  CFComparisonResult v85;
  double v86;
  const __CFString *v87;
  const __CFString *v88;
  double v89;
  CGFloat v90;
  double v91;
  double v92;
  double v93;
  CGFloat v94;
  double v95;
  double v96;
  double v97;
  CGFloat v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(const void *, double, double);
  uint64_t v104;
  uint64_t v105;
  void (*v106)(const void *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(uint64_t, CGSize *);
  CFIndex v110;
  CFIndex v111;
  CFMutableArrayRef Mutable;
  __CFArray *v113;
  unint64_t v114;
  CGPoint *v115;
  CGPoint *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int (*v120)(const void *, const char **);
  uint64_t v121;
  uint64_t v122;
  void (*v123)(const void *, CGRect *);
  uint64_t v124;
  uint64_t v125;
  void (*v126)(const void *, CGRect *);
  CGPoint origin;
  CGFloat v128;
  CGFloat v129;
  char *TextObject;
  CGSize v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, CGRect *);
  CFIndex v135;
  CFIndex v136;
  CFIndex i;
  double *v138;
  uint64_t ReferenceNode;
  uint64_t v140;
  double v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, double, double);
  uint64_t v146;
  uint64_t v147;
  uint64_t (*v148)(uint64_t, const char **);
  uint64_t v149;
  CFIndex v150;
  CGSize *v151;
  double v152;
  double v153;
  unint64_t v154;
  uint64_t v155;
  CGPoint *v156;
  const void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(const void *, const char **);
  uint64_t v161;
  CGSize v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, CGRect *);
  uint64_t v166;
  uint64_t v167;
  void (*v168)(const void *, CGRect *);
  uint64_t v169;
  uint64_t v170;
  void (*v171)(const void *, CGSize *);
  double v172;
  void *v173;
  double v174;
  CGFloat v175;
  double v176;
  CGFloat v177;
  double v178;
  double v179;
  CGSize v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int (*v183)(const void *, double *);
  int v184;
  double MidY;
  double v186;
  double MaxY;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  float v195;
  double v196;
  double v197;
  float v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(const void *, double, double);
  uint64_t v202;
  uint64_t v203;
  void (*v204)(const void *, uint64_t);
  CGFloat v205;
  CGFloat v206;
  CGFloat v207;
  CGFloat v208;
  CGFloat v209;
  CGFloat v210;
  CGFloat v211;
  CGFloat v212;
  double v213;
  double v214;
  double v215;
  double v216;
  double v217;
  double v218;
  double v219;
  uint64_t v220;
  uint64_t v221;
  void (*v222)(const void *, double, double);
  uint64_t v223;
  uint64_t v224;
  void (*v225)(const void *, uint64_t);
  double v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  double v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(const void *, double, double);
  uint64_t v239;
  uint64_t v240;
  void (*v241)(const void *, uint64_t);
  uint64_t v242;
  _QWORD *v244;
  CGSize v245;
  double v246;
  CGSize v247;
  uint64_t v248;
  double v249;
  void *v250;
  const __CFString *v251;
  const __CFString *v252;
  const __CFString *theString2;
  void *key;
  const __CFString *v255;
  const __CFString *v256;
  double v257;
  double v258;
  void *v259;
  double v260;
  void *v261;
  void *v262;
  void *v263;
  CGFloat v264;
  float v265;
  int v266;
  CGRect v267;
  __int128 v268;
  CGSize valuePtr;
  CGSize v270;
  CGRect rect;
  double v272;
  int v273;
  const char *v274;
  const char *v275[2];
  CGRect v276;
  CGRect v277;
  CGRect v278;
  CGRect v279;
  CGRect v280;
  CGRect v281;
  CGRect v282;
  CGRect v283;
  CGRect v284;
  CGRect v285;
  CGRect v286;
  CGRect v287;
  CGRect v288;
  CGRect v289;
  CGRect v290;
  CGRect v291;
  CGRect v292;
  CGRect v293;
  CGRect v294;
  CGRect v295;
  CGRect v296;
  CGRect v297;
  CGRect v298;
  CGRect v299;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v275[0] = 0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = (const char *)CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *((_QWORD *)ProtocolVTable + 2);
    if (v6 && (v7 = *(void (**)(uint64_t, const char **))(v6 + 24)) != 0)
    {
      v7(a1, v275);
      ProtocolVTable = v275[0];
    }
    else
    {
      ProtocolVTable = 0;
    }
  }
  Count = CFArrayGetCount((CFArrayRef)ProtocolVTable);
  if (Count >= 1)
  {
    key = (void *)*MEMORY[0x1E0CA2B40];
    v9 = (const void *)*MEMORY[0x1E0CA2B20];
    v10 = (const __CFString *)*MEMORY[0x1E0CA2DD8];
    v263 = (void *)*MEMORY[0x1E0CA2A88];
    theString2 = (const __CFString *)*MEMORY[0x1E0CA2DE0];
    v250 = (void *)*MEMORY[0x1E0CA2A80];
    v11 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v249 = *MEMORY[0x1E0C9D538];
    v261 = (void *)*MEMORY[0x1E0CA29D8];
    v252 = (const __CFString *)*MEMORY[0x1E0CA2B88];
    v251 = (const __CFString *)*MEMORY[0x1E0CA2B90];
    v12 = Count + 1;
    v256 = (const __CFString *)*MEMORY[0x1E0CA2BA8];
    v259 = (void *)*MEMORY[0x1E0CA29E0];
    v255 = (const __CFString *)*MEMORY[0x1E0CA2BA0];
    v13 = 0.5;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v275[0], v12 - 2);
      v274 = 0;
      FigCDSBaseProtocolGetProtocolID();
      v15 = CMBaseObjectGetProtocolVTable();
      if (!v15
        || (v16 = *(_QWORD *)(v15 + 16)) == 0
        || (v17 = *(unsigned int (**)(const void *, const char **))(v16 + 8)) == 0
        || v17(ValueAtIndex, &v274))
      {
LABEL_128:
        FigSignalErrorAt();
        break;
      }
      if (v274 && !strcmp(v274, "FigCDSCaption"))
      {
        v273 = 0;
        FigCDSCaptionProtocolGetProtocolID();
        v18 = CMBaseObjectGetProtocolVTable();
        if (!v18)
          goto LABEL_128;
        v19 = *(_QWORD *)(v18 + 16);
        if (!v19)
          goto LABEL_128;
        v20 = *(unsigned int (**)(const void *, int *))(v19 + 48);
        if (!v20 || v20(ValueAtIndex, &v273))
          goto LABEL_128;
        if (v273 == 4)
        {
          v248 = DerivedStorage;
          rect.origin.x = 0.0;
          FigCDSCaptionProtocolGetProtocolID();
          v38 = CMBaseObjectGetProtocolVTable();
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + 16);
            if (v39)
            {
              v40 = *(void (**)(const void *, CGRect *))(v39 + 16);
              if (v40)
                v40(ValueAtIndex, &rect);
            }
          }
          valuePtr.width = 50.0;
          v272 = 100.0;
          v266 = 0;
          Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, key);
          v42 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v9);
          if (Value)
          {
            if (CFStringCompare(Value, v10, 0))
            {
              valuePtr.width = 100.0;
              goto LABEL_41;
            }
            valuePtr.width = 0.0;
            if (!v42)
            {
LABEL_43:
              v43 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v263);
              v44 = v43;
              v272 = 100.0;
              v45 = v9;
              if (Value)
              {
                v46 = CFStringCompare(Value, v10, 0);
                v47 = 100.0;
                if (v46)
                  v47 = 0.0;
                v272 = v47;
                if (v44)
                {
                  CFNumberGetValue(v44, kCFNumberCGFloatType, &v272);
                  if (CFStringCompare(Value, theString2, 0) == kCFCompareEqualTo)
                  {
                    v48 = 0;
                    v272 = 100.0 - v272;
                    goto LABEL_66;
                  }
LABEL_60:
                  v48 = 0;
LABEL_66:
                  v59 = 1;
                  goto LABEL_67;
                }
              }
              else if (v43)
              {
                CFNumberGetValue(v43, kCFNumberCGFloatType, &v272);
                goto LABEL_60;
              }
              v58 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v250);
              if (!v58)
              {
                v48 = 1;
                goto LABEL_66;
              }
              CFNumberGetValue(v58, kCFNumberIntType, &v266);
              v59 = 0;
              v48 = 1;
LABEL_67:
              v60 = FCRGetVideoPresentationBounds(a2[42], a2[43], a2[38], a2[39], a2[40], a2[41]);
              v62 = v61;
              v64 = v63;
              v66 = v65;
              v67 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
              v267.origin = (CGPoint)*MEMORY[0x1E0C9D628];
              v267.size = v67;
              FigCDSNodeProtocolGetProtocolID();
              v68 = CMBaseObjectGetProtocolVTable();
              if (v68)
              {
                v69 = *(_QWORD *)(v68 + 16);
                if (v69)
                {
                  v70 = *(void (**)(const void *, CGRect *))(v69 + 104);
                  if (v70)
                    v70(ValueAtIndex, &v267);
                }
              }
              if (Value)
              {
                if ((v59 & 1) != 0)
                {
                  v71 = -0.5;
                  v72 = v64 * (v272 / 100.0);
                }
                else
                {
                  v265 = 0.0;
                  FigCDSCaptionProtocolGetProtocolID();
                  v76 = CMBaseObjectGetProtocolVTable();
                  if (v76)
                  {
                    v77 = *(_QWORD *)(v76 + 16);
                    if (v77)
                    {
                      v78 = *(void (**)(const void *, float *))(v77 + 72);
                      if (v78)
                        v78(ValueAtIndex, &v265);
                    }
                  }
                  v71 = -0.5;
                  v72 = (double)v266 * v265;
                }
                v246 = v66 * ((100.0 - valuePtr.width) / 100.0);
                v9 = v45;
                v79 = v256;
              }
              else
              {
                v71 = -0.5;
                if ((v48 & 1) != 0)
                {
                  v265 = 0.0;
                  FigCDSCaptionProtocolGetProtocolID();
                  v73 = CMBaseObjectGetProtocolVTable();
                  if (v73)
                  {
                    v74 = *(_QWORD *)(v73 + 16);
                    if (v74)
                    {
                      v75 = *(void (**)(const void *, float *))(v74 + 72);
                      if (v75)
                        v75(ValueAtIndex, &v265);
                    }
                  }
                  v246 = (double)v266 * v265;
                  v9 = v45;
                }
                else
                {
                  v246 = v66 * ((100.0 - v272) / 100.0);
                  v9 = v45;
                }
                v72 = v64 * (valuePtr.width / 100.0);
                v79 = v256;
              }
              v80 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v261);
              if (v80)
              {
                v81 = v80;
                if (CFStringCompare(v80, v252, 0))
                {
                  if (CFStringCompare(v81, v251, 0))
                    goto LABEL_91;
                  if (Value)
                  {
                    v281.origin.x = v60;
                    v281.origin.y = v62;
                    v281.size.width = v64;
                    v281.size.height = v66;
                    v83 = v72;
                    v84 = v72 + CGRectGetMinX(v281) + v267.size.width * v71;
LABEL_100:
                    v86 = v11;
LABEL_104:
                    v87 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)&rect.origin.x, v259);
                    if (v87)
                      v88 = v87;
                    else
                      v88 = v79;
                    if (CFStringCompare(v88, v255, 0))
                    {
                      if (CFStringCompare(v88, v79, 0))
                      {
                        DerivedStorage = v248;
                        v89 = v60;
                        v90 = v62;
                        v91 = v64;
                        v92 = v66;
                        if (Value)
                          v11 = v246 + CGRectGetMinY(*(CGRect *)&v89) - v267.size.height;
                        else
                          v84 = v83 + CGRectGetMinX(*(CGRect *)&v89);
                      }
                      else
                      {
                        DerivedStorage = v248;
                        v97 = v60;
                        v98 = v62;
                        v99 = v64;
                        v100 = v66;
                        if (Value)
                          v11 = v246 + CGRectGetMinY(*(CGRect *)&v97) + v267.size.height * -0.5;
                        else
                          v84 = v83 + CGRectGetMinX(*(CGRect *)&v97) + v267.size.width * -0.5;
                      }
                    }
                    else
                    {
                      v93 = v60;
                      v94 = v62;
                      v95 = v64;
                      v96 = v66;
                      if (Value)
                        v11 = v246 + CGRectGetMinY(*(CGRect *)&v93);
                      else
                        v84 = v83 + CGRectGetMinX(*(CGRect *)&v93) - v267.size.width;
                      DerivedStorage = v248;
                    }
                    FigCDSNodeProtocolGetProtocolID();
                    v101 = CMBaseObjectGetProtocolVTable();
                    if (v101)
                    {
                      v102 = *(_QWORD *)(v101 + 16);
                      if (v102)
                      {
                        v103 = *(void (**)(const void *, double, double))(v102 + 128);
                        if (v103)
                          v103(ValueAtIndex, v84, v11);
                      }
                    }
                    FigCDSNodeProtocolGetProtocolID();
                    v104 = CMBaseObjectGetProtocolVTable();
                    if (v104)
                    {
                      v105 = *(_QWORD *)(v104 + 16);
                      if (v105)
                      {
                        v106 = *(void (**)(const void *, uint64_t))(v105 + 216);
                        if (v106)
                          v106(ValueAtIndex, 1);
                      }
                    }
                    v11 = v86;
                    v13 = 0.5;
                    goto LABEL_14;
                  }
                  v83 = v72;
                  v86 = v11;
                  v283.origin.x = v60;
                  v283.origin.y = v62;
                  v283.size.width = v64;
                  v283.size.height = v66;
                  v11 = v246 + CGRectGetMinY(v283) + v267.size.height * v71;
LABEL_103:
                  v84 = v249;
                  goto LABEL_104;
                }
                if (!Value)
                {
                  v83 = v72;
                  v86 = v11;
                  v282.origin.x = v60;
                  v282.origin.y = v62;
                  v282.size.width = v64;
                  v282.size.height = v66;
                  v11 = v246 + CGRectGetMinY(v282);
                  goto LABEL_103;
                }
                v85 = CFStringCompare(Value, theString2, 0);
                v279.origin.x = v60;
                v279.origin.y = v62;
                v279.size.width = v64;
                v279.size.height = v66;
                v83 = v72;
                v84 = v72 + CGRectGetMinX(v279);
                if (v85 == kCFCompareEqualTo)
                  goto LABEL_100;
              }
              else
              {
LABEL_91:
                if (!Value)
                {
                  v83 = v72;
                  v86 = v11;
                  v280.origin.x = v60;
                  v280.origin.y = v62;
                  v280.size.width = v64;
                  v280.size.height = v66;
                  v11 = v246 + CGRectGetMinY(v280) - v267.size.height;
                  goto LABEL_103;
                }
                v82 = CFStringCompare(Value, theString2, 0);
                v278.origin.x = v60;
                v278.origin.y = v62;
                v278.size.width = v64;
                v278.size.height = v66;
                v83 = v72;
                v84 = v72 + CGRectGetMinX(v278);
                if (v82)
                  goto LABEL_100;
              }
              v84 = v84 - v267.size.width;
              goto LABEL_100;
            }
          }
          else
          {
LABEL_41:
            if (!v42)
              goto LABEL_43;
          }
          CFNumberGetValue(v42, kCFNumberCGFloatType, &valuePtr);
          goto LABEL_43;
        }
        if (v273 == 3)
        {
          v272 = 0.0;
          FigCDSCaptionProtocolGetProtocolID();
          v21 = CMBaseObjectGetProtocolVTable();
          if (!v21)
            goto LABEL_128;
          v22 = *(_QWORD *)(v21 + 16);
          if (!v22)
            goto LABEL_128;
          v23 = *(unsigned int (**)(const void *, double *))(v22 + 16);
          if (!v23 || v23(ValueAtIndex, &v272))
            goto LABEL_128;
          v245 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v247 = (CGSize)*MEMORY[0x1E0C9D628];
          rect.origin = (CGPoint)*MEMORY[0x1E0C9D628];
          rect.size = v245;
          v24 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)&v272, CFSTR("textbox"));
          if (v24)
            CGRectMakeWithDictionaryRepresentation(v24, &rect);
          valuePtr = v247;
          v270 = v245;
          FigCDSNodeProtocolGetProtocolID();
          v25 = CMBaseObjectGetProtocolVTable();
          if (!v25)
            goto LABEL_128;
          v26 = *(_QWORD *)(v25 + 16);
          if (!v26)
            goto LABEL_128;
          v27 = *(unsigned int (**)(const void *, CGSize *))(v26 + 104);
          if (!v27 || v27(ValueAtIndex, &valuePtr))
            goto LABEL_128;
          if (CGRectIsNull(rect))
          {
            v276.origin.x = FCRGetVideoPresentationBounds(a2[42], a2[43], a2[38], a2[39], a2[40], a2[41]);
            x = v276.origin.x;
            y = v276.origin.y;
            width = v276.size.width;
            height = v276.size.height;
            v32 = v11;
            v33 = v276.size.height * 0.15;
            MidX = CGRectGetMidX(v276);
            v277.origin.x = x;
            v277.origin.y = y;
            v277.size.width = width;
            v277.size.height = height;
            v13 = 0.5;
            MinY = CGRectGetMinY(v277);
            v36 = v33 * 0.5;
            v11 = v32;
            v37 = MinY + v36;
          }
          else
          {
            v49 = rect.origin.x + rect.size.width * v13;
            v50 = rect.origin.y + rect.size.height * v13;
            v268 = 0u;
            memset(&v267, 0, sizeof(v267));
            FCRGetTransform((uint64_t)&v267, a2[42], a2[43], a2[40], a2[41]);
            MidX = *(double *)&v268 + v50 * v267.size.width + v267.origin.x * v49;
            v37 = a2[41] - (*((double *)&v268 + 1) + v50 * v267.size.height + v267.origin.y * v49);
          }
          v51 = v270;
          FigCDSNodeProtocolGetProtocolID();
          v52 = CMBaseObjectGetProtocolVTable();
          if (v52)
          {
            v53 = *(_QWORD *)(v52 + 16);
            if (v53)
            {
              v54 = *(void (**)(const void *, double, double))(v53 + 128);
              if (v54)
                v54(ValueAtIndex, MidX - v51.width * v13, v37 - v51.height * v13);
            }
          }
          FigCDSNodeProtocolGetProtocolID();
          v55 = CMBaseObjectGetProtocolVTable();
          if (v55)
          {
            v56 = *(_QWORD *)(v55 + 16);
            if (v56)
            {
              v57 = *(void (**)(const void *, uint64_t))(v56 + 216);
              if (v57)
                v57(ValueAtIndex, 1);
            }
          }
        }
      }
LABEL_14:
      --v12;
    }
    while (v12 > 1);
  }
  if (*(_BYTE *)(DerivedStorage + 40))
  {
    LOBYTE(v274) = 0;
    valuePtr.width = 0.0;
    FigCDSNodeProtocolGetProtocolID();
    v107 = CMBaseObjectGetProtocolVTable();
    if (v107
      && (v108 = *(_QWORD *)(v107 + 16)) != 0
      && (v109 = *(unsigned int (**)(uint64_t, CGSize *))(v108 + 24)) != 0
      && !v109(a1, &valuePtr))
    {
      v110 = CFArrayGetCount(*(CFArrayRef *)&valuePtr.width);
      if (v110 >= 2)
      {
        v111 = v110;
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
        if (Mutable)
        {
          v113 = Mutable;
          v114 = v111 + 1;
          v115 = (CGPoint *)MEMORY[0x1E0C9D538];
          v116 = (CGPoint *)MEMORY[0x1E0C9D820];
          do
          {
            v117 = CFArrayGetValueAtIndex(*(CFArrayRef *)&valuePtr.width, v114 - 2);
            v275[0] = 0;
            FigCDSBaseProtocolGetProtocolID();
            v118 = CMBaseObjectGetProtocolVTable();
            if (!v118
              || (v119 = *(_QWORD *)(v118 + 16)) == 0
              || (v120 = *(unsigned int (**)(const void *, const char **))(v119 + 8)) == 0
              || v120(v117, v275))
            {
              FigSignalErrorAt();
              goto LABEL_264;
            }
            if (v275[0] && !strcmp(v275[0], "FigCDSCaption"))
            {
              v267.origin = *v115;
              rect.origin = *v116;
              FigCDSNodeProtocolGetProtocolID();
              v121 = CMBaseObjectGetProtocolVTable();
              if (v121)
              {
                v122 = *(_QWORD *)(v121 + 16);
                if (v122)
                {
                  v123 = *(void (**)(const void *, CGRect *))(v122 + 120);
                  if (v123)
                    v123(v117, &rect);
                }
              }
              FigCDSNodeProtocolGetProtocolID();
              v124 = CMBaseObjectGetProtocolVTable();
              if (v124)
              {
                v125 = *(_QWORD *)(v124 + 16);
                if (v125)
                {
                  v126 = *(void (**)(const void *, CGRect *))(v125 + 136);
                  if (v126)
                    v126(v117, &v267);
                }
              }
              origin = v267.origin;
              v128 = rect.origin.x;
              v129 = rect.origin.y;
              TextObject = FigCaptionRendererLayoutDecouple_CreateTextObject(v117);
              if (!TextObject)
                goto LABEL_264;
              *(CGPoint *)TextObject = origin;
              *((CGFloat *)TextObject + 2) = v128;
              *((CGFloat *)TextObject + 3) = v129;
              CFArrayAppendValue(v113, TextObject);
            }
            --v114;
          }
          while (v114 > 1);
          v131 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v267.origin = (CGPoint)*MEMORY[0x1E0C9D628];
          v267.size = v131;
          FigCDSNodeProtocolGetProtocolID();
          v132 = CMBaseObjectGetProtocolVTable();
          if (v132)
          {
            v133 = *(_QWORD *)(v132 + 16);
            if (v133)
            {
              v134 = *(void (**)(uint64_t, CGRect *))(v133 + 104);
              if (v134)
                v134(a1, &v267);
            }
          }
          FigCDSLayoutDecouple_Decouple(v113, (BOOL *)&v274, v267.origin.x, v267.origin.y, v267.size.width, v267.size.height);
          if ((_BYTE)v274)
          {
            v135 = CFArrayGetCount(v113);
            if (v135 >= 1)
            {
              v136 = v135;
              for (i = 0; i != v136; ++i)
              {
                v138 = (double *)CFArrayGetValueAtIndex(v113, i);
                ReferenceNode = FigCDSLayoutDecouple_GetReferenceNode((uint64_t)v138);
                if (ReferenceNode)
                {
                  v140 = ReferenceNode;
                  v141 = *v138;
                  v142 = v138[1];
                  FigCDSNodeProtocolGetProtocolID();
                  v143 = CMBaseObjectGetProtocolVTable();
                  if (v143)
                  {
                    v144 = *(_QWORD *)(v143 + 16);
                    if (v144)
                    {
                      v145 = *(void (**)(uint64_t, double, double))(v144 + 128);
                      if (v145)
                        v145(v140, v141, v142);
                    }
                  }
                }
              }
            }
          }
LABEL_264:
          if (CFArrayGetCount(v113) >= 1)
          {
            do
            {
              v244 = CFArrayGetValueAtIndex(v113, 0);
              CFArrayRemoveValueAtIndex(v113, 0);
              FigCaptionRendererLayoutDecouple_ReleaseTextObject(v244);
            }
            while (CFArrayGetCount(v113) > 0);
          }
          CFRelease(v113);
        }
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
  v275[0] = 0;
  FigCDSNodeProtocolGetProtocolID();
  v146 = CMBaseObjectGetProtocolVTable();
  if (!v146 || (v147 = *(_QWORD *)(v146 + 16)) == 0)
  {
LABEL_257:
    v242 = 4294954508;
LABEL_259:
    FigSignalErrorAt();
    return v242;
  }
  v148 = *(uint64_t (**)(uint64_t, const char **))(v147 + 24);
  if (!v148)
  {
LABEL_258:
    v242 = 4294954514;
    goto LABEL_259;
  }
  v149 = v148(a1, v275);
  if ((_DWORD)v149)
  {
LABEL_267:
    v242 = v149;
    goto LABEL_259;
  }
  v150 = CFArrayGetCount((CFArrayRef)v275[0]);
  if (v150 >= 1)
  {
    v151 = (CGSize *)MEMORY[0x1E0C9D820];
    v153 = *MEMORY[0x1E0C9D820];
    v152 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    v154 = v150 + 1;
    v155 = MEMORY[0x1E0C9D648];
    v156 = (CGPoint *)MEMORY[0x1E0C9D538];
    do
    {
      v157 = CFArrayGetValueAtIndex((CFArrayRef)v275[0], v154 - 2);
      v274 = 0;
      FigCDSBaseProtocolGetProtocolID();
      v158 = CMBaseObjectGetProtocolVTable();
      if (!v158)
        goto LABEL_257;
      v159 = *(_QWORD *)(v158 + 16);
      if (!v159)
        goto LABEL_257;
      v160 = *(uint64_t (**)(const void *, const char **))(v159 + 8);
      if (!v160)
        goto LABEL_258;
      v149 = v160(v157, &v274);
      if ((_DWORD)v149)
        goto LABEL_267;
      if (v274 && !strcmp(v274, "FigCDSCaption"))
      {
        v161 = CMBaseObjectGetDerivedStorage();
        v162 = *(CGSize *)(v155 + 16);
        v267.origin = *(CGPoint *)v155;
        v267.size = v162;
        FigCDSNodeProtocolGetProtocolID();
        v163 = CMBaseObjectGetProtocolVTable();
        if (v163)
        {
          v164 = *(_QWORD *)(v163 + 16);
          if (v164)
          {
            v165 = *(void (**)(uint64_t, CGRect *))(v164 + 104);
            if (v165)
              v165(a1, &v267);
          }
        }
        rect.origin = *v156;
        FigCDSNodeProtocolGetProtocolID();
        v166 = CMBaseObjectGetProtocolVTable();
        if (v166)
        {
          v167 = *(_QWORD *)(v166 + 16);
          if (v167)
          {
            v168 = *(void (**)(const void *, CGRect *))(v167 + 136);
            if (v168)
              v168(v157, &rect);
          }
        }
        valuePtr = *v151;
        FigCDSNodeProtocolGetProtocolID();
        v169 = CMBaseObjectGetProtocolVTable();
        if (v169)
        {
          v170 = *(_QWORD *)(v169 + 16);
          if (v170)
          {
            v171 = *(void (**)(const void *, CGSize *))(v170 + 120);
            if (v171)
              v171(v157, &valuePtr);
          }
        }
        if (valuePtr.width != v153 || valuePtr.height != v152)
        {
          v172 = FCRGetVideoPresentationBounds(a2[42], a2[43], a2[38], a2[39], a2[40], a2[41]);
          v262 = v173;
          v264 = v172;
          v175 = v174;
          v177 = v176;
          v179 = rect.origin.x;
          v178 = rect.origin.y;
          v180 = valuePtr;
          LODWORD(v272) = 0;
          FigCDSCaptionProtocolGetProtocolID();
          v181 = CMBaseObjectGetProtocolVTable();
          if (v181)
          {
            v182 = *(_QWORD *)(v181 + 16);
            if (v182)
            {
              v183 = *(unsigned int (**)(const void *, double *))(v182 + 48);
              if (v183)
              {
                if (!v183(v157, &v272))
                {
                  v260 = v152;
                  if (LODWORD(v272) != 3)
                    goto LABEL_228;
                  v184 = *(unsigned __int8 *)(v161 + 24);
                  v284.origin.x = v179;
                  v284.origin.y = v178;
                  v284.size = v180;
                  MidY = CGRectGetMidY(v284);
                  *(_QWORD *)&v285.origin.y = v262;
                  v285.origin.x = v264;
                  v285.size.width = v175;
                  v285.size.height = v177;
                  v186 = CGRectGetMidY(v285);
                  if (v184)
                  {
                    if (MidY <= v186)
                    {
                      *(_QWORD *)&v292.origin.y = v262;
                      v292.origin.x = v264;
                      v292.size.width = v175;
                      v292.size.height = v177;
                      v192 = CGRectGetMinY(v292);
                      v293.origin.x = v179;
                      v293.origin.y = v178;
                      v293.size = v180;
                      v258 = v192 - CGRectGetMaxY(v293);
                      v193 = CGRectGetMinY(v267);
                      v294.origin.x = v179;
                      v294.origin.y = v178;
                      v294.size = v180;
                      if (v258 > v193 - CGRectGetMinY(v294))
                      {
                        *(_QWORD *)&v295.origin.y = v262;
                        v295.origin.x = v264;
                        v295.size.width = v175;
                        v295.size.height = v177;
                        v194 = CGRectGetMinY(v295);
                        goto LABEL_215;
                      }
                      v189 = CGRectGetMinY(v267);
LABEL_217:
                      v196 = v189;
                      v299.origin.x = v179;
                      v299.origin.y = v178;
                      v299.size = v180;
                      v197 = CGRectGetMinY(v299);
                    }
                    else
                    {
                      *(_QWORD *)&v286.origin.y = v262;
                      v286.origin.x = v264;
                      v286.size.width = v175;
                      v286.size.height = v177;
                      MaxY = CGRectGetMaxY(v286);
                      v287.origin.x = v179;
                      v287.origin.y = v178;
                      v287.size = v180;
                      v257 = MaxY - CGRectGetMinY(v287);
                      v188 = CGRectGetMaxY(v267);
                      v288.origin.x = v179;
                      v288.origin.y = v178;
                      v288.size = v180;
                      if (v257 < v188 - CGRectGetMaxY(v288))
                      {
                        *(_QWORD *)&v289.origin.y = v262;
                        v289.origin.x = v264;
                        v289.size.width = v175;
                        v289.size.height = v177;
                        v189 = CGRectGetMaxY(v289);
                        goto LABEL_217;
                      }
                      v194 = CGRectGetMaxY(v267);
LABEL_215:
                      v196 = v194;
                      v298.origin.x = v179;
                      v298.origin.y = v178;
                      v298.size = v180;
                      v197 = CGRectGetMaxY(v298);
                    }
                    v198 = v196 - v197;
                    v178 = v178 + v198;
                    FigCDSNodeProtocolGetProtocolID();
                    v199 = CMBaseObjectGetProtocolVTable();
                    if (v199)
                    {
                      v200 = *(_QWORD *)(v199 + 16);
                      if (v200)
                      {
                        v201 = *(void (**)(const void *, double, double))(v200 + 128);
                        if (v201)
                          v201(v157, v179, v178);
                      }
                    }
                    FigCDSNodeProtocolGetProtocolID();
                    v202 = CMBaseObjectGetProtocolVTable();
                    if (v202)
                    {
                      v203 = *(_QWORD *)(v202 + 16);
                      if (v203)
                      {
                        v204 = *(void (**)(const void *, uint64_t))(v203 + 216);
                        if (v204)
                          v204(v157, 1);
                      }
                    }
                  }
                  else
                  {
                    if (MidY <= v186)
                    {
                      *(_QWORD *)&v296.origin.y = v262;
                      v296.origin.x = v264;
                      v296.size.width = v175;
                      v296.size.height = v177;
                      v190 = CGRectGetMinY(v296);
                      v297.origin.x = v179;
                      v297.origin.y = v178;
                      v297.size = v180;
                      v191 = CGRectGetMinY(v297);
                    }
                    else
                    {
                      *(_QWORD *)&v290.origin.y = v262;
                      v290.origin.x = v264;
                      v290.size.width = v175;
                      v290.size.height = v177;
                      v190 = CGRectGetMaxY(v290);
                      v291.origin.x = v179;
                      v291.origin.y = v178;
                      v291.size = v180;
                      v191 = CGRectGetMaxY(v291);
                    }
                    v195 = v190 - v191;
                    v178 = v178 + v195;
                  }
                  if (LODWORD(v272) == 3)
                  {
                    v206 = v267.origin.y;
                    v205 = v267.origin.x;
                    v208 = v267.size.height;
                    v207 = v267.size.width;
                    v209 = v179;
                    v210 = v178;
                    v212 = v180.height;
                    v211 = v180.width;
                  }
                  else
                  {
LABEL_228:
                    v206 = *(double *)&v262;
                    v205 = v264;
                    v209 = v179;
                    v210 = v178;
                    v212 = v180.height;
                    v211 = v180.width;
                    v207 = v175;
                    v208 = v177;
                  }
                  v213 = cclayout_offsetRectToFitBoundary(v209, v210, v211, v212, v205, v206, v207, v208);
                  v215 = v214;
                  v217 = v216;
                  v219 = v218;
                  FigCDSNodeProtocolGetProtocolID();
                  v220 = CMBaseObjectGetProtocolVTable();
                  if (v220)
                  {
                    v221 = *(_QWORD *)(v220 + 16);
                    if (v221)
                    {
                      v222 = *(void (**)(const void *, double, double))(v221 + 128);
                      if (v222)
                        v222(v157, v213, v215);
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  v223 = CMBaseObjectGetProtocolVTable();
                  if (v223)
                  {
                    v224 = *(_QWORD *)(v223 + 16);
                    if (v224)
                    {
                      v225 = *(void (**)(const void *, uint64_t))(v224 + 216);
                      if (v225)
                        v225(v157, 1);
                    }
                  }
                  v226 = CDSGetOverscanSafeRect(0.9, a2[38], a2[39], a2[40], a2[41]);
                  if (v213 >= v226)
                    v230 = v213;
                  else
                    v230 = v226;
                  if (v215 >= v227)
                    v231 = v215;
                  else
                    v231 = v227;
                  v232 = v226 + v228;
                  if (v217 + v230 <= v232)
                    v233 = v230;
                  else
                    v233 = v232 - v217;
                  v234 = v227 + v229;
                  if (v219 + v231 <= v234)
                    v235 = v231;
                  else
                    v235 = v234 - v219;
                  FigCDSNodeProtocolGetProtocolID();
                  v236 = CMBaseObjectGetProtocolVTable();
                  if (v236)
                  {
                    v237 = *(_QWORD *)(v236 + 16);
                    if (v237)
                    {
                      v238 = *(void (**)(const void *, double, double))(v237 + 128);
                      if (v238)
                        v238(v157, v233, v235);
                    }
                  }
                  FigCDSNodeProtocolGetProtocolID();
                  v239 = CMBaseObjectGetProtocolVTable();
                  v152 = v260;
                  if (v239)
                  {
                    v240 = *(_QWORD *)(v239 + 16);
                    if (v240)
                    {
                      v241 = *(void (**)(const void *, uint64_t))(v240 + 216);
                      if (v241)
                        v241(v157, 1);
                    }
                  }
                  goto LABEL_205;
                }
              }
            }
          }
          FigSignalErrorAt();
        }
      }
LABEL_205:
      --v154;
    }
    while (v154 > 1);
  }
  return 0;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int16 *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 232);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCDSNodeProtocolGetProtocolID();
          v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 16);
            if (v9)
            {
              v10 = *(void (**)(uint64_t, uint64_t))(v9 + 280);
              if (v10)
                v10(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __int16 *))(v12 + 224);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCDSNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(uint64_t, uint64_t))(v15 + 272);
              if (v16)
                v16(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCDSNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 264);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCDSNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 288);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  void (*v4)(_OWORD *, uint64_t);
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(void (**)(_OWORD *, uint64_t))(DerivedStorage + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(DerivedStorage + 8);
    v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    v9 = *(_QWORD *)(a2 + 32);
    v4(v8, v5);
  }
  return 0;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 304);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 312);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 328);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 336);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 344);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCDSAVFLayoutRegion_FigCDSNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCDSNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 352);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t RegisterFigCDSAVFLayoutRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSAVFLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCDSAVFLayoutRegion]"));
}

uint64_t FigVTTDocumentWriterCreateForVTT(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  const __CFAllocator *v6;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v8;
  CFMutableArrayRef v9;
  CFMutableArrayRef v10;
  CFMutableArrayRef v11;
  CFMutableArrayRef v12;
  _QWORD *DerivedStorage;
  uint64_t v14;

  if (a2)
  {
    if (!a3)
      return FigSignalErrorAt();
    FigVTTDocumentWriterGetClassID();
    v5 = CMDerivedObjectCreate();
    if (!(_DWORD)v5)
    {
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v8 = Mutable;
        v9 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
        if (v9)
        {
          v10 = v9;
          v11 = CFArrayCreateMutable(v6, 0, MEMORY[0x1E0C9B378]);
          if (v11)
          {
            v12 = v11;
            FigVTTDocumentWriterGetCMBaseObject(0);
            DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
            v14 = 0;
            *DerivedStorage = CFRetain(a2);
            DerivedStorage[1] = v8;
            DerivedStorage[2] = v10;
            DerivedStorage[3] = v12;
            *a3 = 0;
            return v14;
          }
          CFRelease(v10);
        }
        CFRelease(v8);
      }
      return 4294954510;
    }
    return v5;
  }
  return FigSignalErrorAt();
}

uint64_t figVTTDocumentWriterForVTT_Invalidate()
{
  return 0;
}

void figVTTDocumentWriterForVTT_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  FigVTTDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v2 = *(const void **)(DerivedStorage + 32);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(DerivedStorage + 8);
  if (v3)
    CFRelease(v3);
  v4 = *(const void **)(DerivedStorage + 16);
  if (v4)
    CFRelease(v4);
  v5 = *(const void **)(DerivedStorage + 24);
  if (v5)
    CFRelease(v5);
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
}

CFStringRef figVTTDocumentWriterForVTT_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("FigVTTDocumentWriterForVTT[%p]"), a1);
}

uint64_t figVTTDocumentWriterForVTT_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t DerivedStorage;
  uint64_t v7;
  CFTypeRef v8;

  FigVTTDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
    return FigSignalErrorAt();
  if (!a4)
    return FigSignalErrorAt();
  v7 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("languageIdentifier")))
    return FigSignalErrorAt();
  v8 = *(CFTypeRef *)(v7 + 32);
  if (v8)
    v8 = CFRetain(v8);
  *a4 = v8;
  return 0;
}

uint64_t figVTTDocumentWriterForVTT_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;
  uint64_t v6;
  CFTypeID v7;
  const void *v8;

  FigVTTDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
    return FigSignalErrorAt();
  if (!a2)
    return FigSignalErrorAt();
  v6 = DerivedStorage;
  if (!CFEqual(a2, CFSTR("languageIdentifier")))
    return FigSignalErrorAt();
  if (!a3)
    return FigSignalErrorAt();
  v7 = CFGetTypeID(a3);
  if (v7 != CFStringGetTypeID())
    return FigSignalErrorAt();
  v8 = *(const void **)(v6 + 32);
  *(_QWORD *)(v6 + 32) = a3;
  CFRetain(a3);
  if (v8)
    CFRelease(v8);
  return 0;
}

uint64_t figVTTDocumentWriterForVTT_CreateAndAddNode(const void *a1, int a2, unsigned int a3, void **a4)
{
  uint64_t DerivedStorage;
  __CFArray *v9;
  __CFArray **v10;
  CFAllocatorRef v11;
  uint64_t v12;
  uint64_t v13;
  CFAllocatorRef v14;
  CFAllocatorRef v15;
  CFAllocatorRef v16;
  CFAllocatorRef v17;
  void *value;

  FigVTTDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  value = 0;
  if (!a2 || !a3 || !a4)
  {
    FigSignalErrorAt();
    return 0;
  }
  if (a2 == 3)
  {
    if ((a3 & 0xFFFFFFFD) != 1)
      return FigSignalErrorAt();
    v10 = (__CFArray **)(DerivedStorage + 24);
    goto LABEL_14;
  }
  if (a2 == 2)
  {
    if (a3 > 7 || ((1 << a3) & 0x98) == 0)
      return FigSignalErrorAt();
    v10 = (__CFArray **)(DerivedStorage + 16);
LABEL_14:
    v9 = *v10;
LABEL_16:
    switch(a3)
    {
      case 1u:
        v14 = CFGetAllocator(a1);
        v12 = FigVTTCueCreate((uint64_t)v14, &value);
        goto LABEL_23;
      case 2u:
        goto LABEL_17;
      case 3u:
        v15 = CFGetAllocator(a1);
        v12 = FigVTTNoteBlockCreate((uint64_t)v15, &value);
        goto LABEL_23;
      case 4u:
        v16 = CFGetAllocator(a1);
        v12 = FigVTTRegionBlockCreate((uint64_t)v16, &value);
        goto LABEL_23;
      case 5u:
      case 6u:
        return FigSignalErrorAt();
      case 7u:
        v17 = CFGetAllocator(a1);
        v12 = FigVTTStyleBlockCreate((uint64_t)v17, &value);
        goto LABEL_23;
      default:
        v13 = 0;
        goto LABEL_24;
    }
  }
  if (a2 != 1)
  {
    v9 = 0;
    goto LABEL_16;
  }
  if (a3 == 2)
  {
    v9 = *(__CFArray **)(DerivedStorage + 8);
LABEL_17:
    v11 = CFGetAllocator(a1);
    v12 = FigVTTMetadataCreate((uint64_t)v11, &value);
LABEL_23:
    v13 = v12;
LABEL_24:
    CFArrayAppendValue(v9, value);
    *a4 = value;
    return v13;
  }
  return FigSignalErrorAt();
}

uint64_t figVTTDocumentWriterForVTT_Flush(const void *a1)
{
  uint64_t *DerivedStorage;
  const __CFAllocator *v3;
  __CFString *Mutable;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;

  FigVTTDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v3 = CFGetAllocator(a1);
  Mutable = CFStringCreateMutable(v3, 0);
  if (!Mutable)
    return FigSignalErrorAt();
  v5 = Mutable;
  CFStringAppendFormat(Mutable, 0, CFSTR("%@\n"), CFSTR("WEBVTT"));
  FigCFArrayApplyFunction();
  CFStringAppendFormat(v5, 0, CFSTR("\n"));
  FigCFArrayApplyFunction();
  FigCFArrayApplyFunction();
  v6 = FigVTTSerializerAddText(*DerivedStorage, (uint64_t)v5);
  if (!(_DWORD)v6)
    v6 = FigVTTSerializerFlush(*DerivedStorage);
  v7 = v6;
  CFRelease(v5);
  return v7;
}

void eachNodeEmitCallback(uint64_t a1, uint64_t a2)
{
  int NodeType;
  int v5;
  CFTypeRef v6;
  CFTypeRef cf;
  int v8;

  v8 = 0;
  cf = 0;
  if (!*(_DWORD *)(a2 + 20))
  {
    NodeType = FigVTTNodeGetNodeType(a1, (uint64_t)&v8);
    if (NodeType)
    {
      v5 = NodeType;
    }
    else
    {
      v5 = FigVTTNodeCopyDocumentSerialization(a1, (uint64_t)&cf);
      v6 = cf;
      if (!v5 && cf)
      {
        CFStringAppendFormat(*(CFMutableStringRef *)a2, 0, CFSTR("%@"), cf);
        if (!*(_BYTE *)(a2 + 16))
          CFStringAppendFormat(*(CFMutableStringRef *)a2, 0, CFSTR("\n"));
        goto LABEL_9;
      }
      if (!v5)
        goto LABEL_10;
    }
    *(_DWORD *)(a2 + 20) = v5;
LABEL_9:
    v6 = cf;
LABEL_10:
    if (v6)
      CFRelease(v6);
  }
}

BOOL FigCFHTTPIsHTTPBasedURL(const __CFURL *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  _BOOL8 v3;

  v1 = CFURLCopyScheme(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = 1;
  if (CFStringCompare(v1, CFSTR("http"), 1uLL))
  {
    v3 = 1;
    if (CFStringCompare(v2, CFSTR("https"), 1uLL))
      v3 = CFStringCompare(v2, CFSTR("daap"), 1uLL) == kCFCompareEqualTo;
  }
  CFRelease(v2);
  return v3;
}

BOOL FigCFHTTPIsDataURL(const __CFURL *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  _BOOL8 v3;

  if (!a1)
    return 0;
  v1 = CFURLCopyScheme(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFStringCompare(v1, CFSTR("data"), 1uLL) == kCFCompareEqualTo;
  CFRelease(v2);
  return v3;
}

uint64_t FigCFHTTPCopyDeviceStrings(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  const __CFAllocator *v6;
  CFURLRef v7;
  CFURLRef v8;
  uint64_t CFData;
  CFPropertyListRef v10;
  CFTypeID TypeID;
  uint64_t v12;
  const void *Value;
  const void *v14;
  uint64_t v15;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v7 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("/System/Library/CoreServices/SystemVersion.plist"), kCFURLPOSIXPathStyle, 0);
  if (!v7)
    return 4294954510;
  v8 = v7;
  CFData = FigFileReadURLAndCreateCFData();
  if ((_DWORD)CFData)
  {
    v15 = CFData;
    goto LABEL_18;
  }
  v10 = CFPropertyListCreateWithData(v6, 0, 0, 0, 0);
  if (!v10)
  {
    v15 = 4294954510;
    goto LABEL_18;
  }
  TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v10))
  {
    CFRelease(v10);
    v15 = 4294954516;
LABEL_18:
    CFRelease(v8);
    return v15;
  }
  CFRelease(v8);
  if (a1)
  {
    v12 = MGCopyAnswer();
    *a1 = v12;
    if (!v12)
      *a1 = CFRetain(CFSTR("iPhone"));
  }
  if (a2)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("ProductVersion"));
    if (Value)
      Value = CFRetain(Value);
    *a2 = Value;
  }
  if (a3)
  {
    v14 = CFDictionaryGetValue((CFDictionaryRef)v10, CFSTR("ProductBuildVersion"));
    if (v14)
      v14 = CFRetain(v14);
    *a3 = v14;
  }
  CFRelease(v10);
  return 0;
}

void FigCFHTTPCreateUserAgentOnce()
{
  __CFString *v0;
  BOOL v1;
  const __CFAllocator *v3;
  __CFString *Mutable;
  const __CFString *v5;
  const __CFData *ExternalRepresentation;
  const __CFData *v7;
  const __CFString *v8;
  const __CFString *MutableCopy;
  __CFString *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFMutableStringRef v15;
  const __CFLocale *System;
  CFIndex location;
  CFMutableStringRef v18;
  CFStringRef appendedString;
  CFStringRef v20;
  CFStringRef theString[3];
  CFRange v22;
  CFRange v23;

  v20 = 0;
  theString[0] = 0;
  appendedString = 0;
  v0 = 0;
  if (!FigCFHTTPCopyDeviceStrings(theString, &v20, &appendedString))
  {
    if (theString[0])
      v1 = v20 == 0;
    else
      v1 = 1;
    if (!v1 && appendedString != 0)
    {
      v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
      v0 = Mutable;
      if (!Mutable)
        goto LABEL_28;
      CFStringAppend(Mutable, CFSTR("AppleCoreMedia/1.0.0."));
      CFStringAppend(v0, appendedString);
      CFStringAppend(v0, CFSTR(" ("));
      v5 = theString[0];
      if (theString[0])
      {
        ExternalRepresentation = CFStringCreateExternalRepresentation(v3, theString[0], 0x600u, 0x20u);
        if (ExternalRepresentation)
        {
          v7 = ExternalRepresentation;
          v8 = CFStringCreateFromExternalRepresentation(v3, ExternalRepresentation, 0x600u);
          CFRelease(v7);
          v5 = theString[0];
          if (v8)
          {
            CFRelease(theString[0]);
            theString[0] = v8;
            v5 = v8;
          }
        }
        else
        {
          v5 = theString[0];
        }
      }
      CFStringAppend(v0, v5);
      CFStringAppend(v0, CFSTR("; U; "));
      CFStringAppend(v0, CFSTR("CPU OS "));
      MutableCopy = CFStringCreateMutableCopy(v3, 0, v20);
      if (MutableCopy)
      {
        v10 = (__CFString *)MutableCopy;
        v22.length = CFStringGetLength(MutableCopy);
        v22.location = 0;
        CFStringFindAndReplace(v10, CFSTR("."), CFSTR("_"), v22, 0);
        CFStringAppend(v0, v10);
        CFRelease(v10);
      }
      CFStringAppend(v0, CFSTR(" like Mac OS X"));
      v11 = CFLocaleCopyPreferredLanguages();
      if (!v11)
        goto LABEL_27;
      v12 = v11;
      theString[1] = 0;
      theString[2] = 0;
      if (CFArrayGetCount(v11) >= 1
        && CFArrayGetValueAtIndex(v12, 0)
        && (CFBundleGetLocalizationInfoForLocalization(),
            (v13 = (const __CFString *)CFBundleCopyLocalizationForLocalizationInfo()) != 0))
      {
        v14 = v13;
        v15 = CFStringCreateMutableCopy(v3, 0, v13);
        System = CFLocaleGetSystem();
        CFStringLowercase(v15, System);
        location = CFStringFind(v15, CFSTR("_"), 0).location;
        if (CFStringGetLength(v15) >= 3 && location == 3)
        {
          v23.length = CFStringGetLength(v15);
          v23.location = 0;
          CFStringFindAndReplace(v15, CFSTR("_"), CFSTR("-"), v23, 0);
        }
        CFRelease(v12);
        CFRelease(v14);
        if (!v15)
          goto LABEL_27;
        CFStringAppend(v0, CFSTR("; "));
        CFStringAppend(v0, v15);
        v18 = v15;
      }
      else
      {
        v18 = (CFMutableStringRef)v12;
      }
      CFRelease(v18);
LABEL_27:
      CFStringAppend(v0, CFSTR(")"));
      goto LABEL_28;
    }
    v0 = 0;
  }
LABEL_28:
  if (theString[0])
    CFRelease(theString[0]);
  if (v20)
    CFRelease(v20);
  if (appendedString)
    CFRelease(appendedString);
  gFigCFHTTPUserAgent = (uint64_t)v0;
}

CFTypeRef FigCFHTTPCreateURLString(const __CFURL *a1)
{
  const __CFURL *v1;
  const __CFURL *v2;
  CFStringRef v3;
  CFTypeRef v4;

  if (!a1)
    return 0;
  v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFURLGetString(v1);
  v4 = CFRetain(v3);
  CFRelease(v2);
  return v4;
}

uint64_t FigCFHTTPCompareURLs(const void *a1, CFTypeRef cf2)
{
  uint64_t v2;
  CFURLRef v5;
  CFURLRef v6;
  CFURLRef v7;
  uint64_t v8;

  v2 = 0;
  if (!a1)
    return v2;
  if (!cf2)
    return v2;
  v2 = CFEqual(a1, cf2);
  if ((_DWORD)v2)
    return v2;
  if (!CFURLGetBaseURL((CFURLRef)a1) && !CFURLGetBaseURL((CFURLRef)cf2))
    return 0;
  v5 = CFURLCopyAbsoluteURL((CFURLRef)a1);
  v6 = CFURLCopyAbsoluteURL((CFURLRef)cf2);
  v7 = v6;
  if (v5 && v6)
  {
    v8 = CFEqual(v5, v6);
  }
  else
  {
    v8 = 0;
    v2 = 0;
    if (!v5)
      goto LABEL_11;
  }
  CFRelease(v5);
  v2 = v8;
LABEL_11:
  if (v7)
    CFRelease(v7);
  return v2;
}

const sockaddr *FigCFHTTPCreateAddressStringFromSockaddr(const sockaddr *result, socklen_t a2)
{
  int v2;
  char cStr[1025];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = getnameinfo(result, a2, cStr, 0x401u, 0, 0, 2);
    result = 0;
    if (!v2)
      return (const sockaddr *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
  }
  return result;
}

const __CFData *FigCFHTTPCreateAddressString(const __CFData *result)
{
  const __CFData *v1;
  const sockaddr *BytePtr;
  socklen_t Length;

  if (result)
  {
    v1 = result;
    BytePtr = (const sockaddr *)CFDataGetBytePtr(result);
    Length = CFDataGetLength(v1);
    return (const __CFData *)FigCFHTTPCreateAddressStringFromSockaddr(BytePtr, Length);
  }
  return result;
}

uint64_t FigCFHTTPGetHTTPPort(const __CFURL *a1, int *a2, char *a3)
{
  const __CFString *v6;
  const __CFString *v7;
  char v8;
  CFComparisonResult v9;
  uint64_t result;
  _BOOL4 v11;
  int v12;
  int v13;

  v6 = CFURLCopyScheme(a1);
  if (v6)
  {
    v7 = v6;
    v8 = 1;
    v9 = CFStringCompare(v6, CFSTR("https"), 1uLL);
    CFRelease(v7);
    result = CFURLGetPortNumber(a1);
    v11 = result == -1;
    if (v9 == kCFCompareEqualTo)
    {
      v12 = 443;
      if (!a2)
        goto LABEL_11;
      goto LABEL_7;
    }
  }
  else
  {
    result = CFURLGetPortNumber(a1);
    v11 = result == -1;
  }
  v8 = 0;
  v12 = 80;
  if (!a2)
    goto LABEL_11;
LABEL_7:
  if (v11)
    v13 = v12;
  else
    v13 = result;
  *a2 = v13;
LABEL_11:
  if (a3)
    *a3 = v8;
  return result;
}

uint64_t FigCFHTTPCopyClientCertChain(uint64_t *a1)
{
  CFPropertyListRef v2;
  const void *v3;
  BOOL v4;
  uint64_t v5;

  if (a1)
  {
    *a1 = 0;
    if ((FigCFHTTPCopyClientCertChain_sCheckedPref & 1) == 0)
    {
      v2 = CFPreferencesCopyValue(CFSTR("client_auth"), CFSTR("com.apple.coremedia"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
      if (v2)
      {
        v3 = v2;
        v4 = CFEqual(v2, CFSTR("true"))
          || CFEqual(v3, CFSTR("TRUE"))
          || CFEqual(v3, CFSTR("1"))
          || CFEqual(v3, CFSTR("YES"))
          || CFEqual(v3, CFSTR("yes")) != 0;
        FigCFHTTPCopyClientCertChain_sOkToUse = v4;
        CFRelease(v3);
      }
      FigCFHTTPCopyClientCertChain_sCheckedPref = 1;
    }
    if (!FigCFHTTPCopyClientCertChain_sOkToUse)
      return 4294954634;
    v5 = off_1EE2871A0[0]();
    *a1 = v5;
    if (v5)
      return 0;
  }
  return FigSignalErrorAt();
}

const __CFString *FigCFHTTPGetContentLengthFromHeaderString(const __CFString *result, _QWORD *a2)
{
  uint64_t v3;
  char buffer[200];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = 0;
    result = (const __CFString *)CFStringGetCString(result, buffer, 200, 0x600u);
    if ((_DWORD)result)
    {
      if (sscanf(buffer, "%lld", &v3) == 1)
      {
        if (a2)
          *a2 = v3;
        return (const __CFString *)1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

const __CFString *FigCFHTTPGetContentLengthFromHTTPResponse(__CFHTTPMessage *a1, _QWORD *a2)
{
  const __CFString *v3;
  const __CFString *v4;

  if (!a1)
    return 0;
  v3 = CFHTTPMessageCopyHeaderFieldValue(a1, CFSTR("Content-Length"));
  v4 = FigCFHTTPGetContentLengthFromHeaderString(v3, a2);
  if (v3)
    CFRelease(v3);
  return v4;
}

uint64_t FigCFHTTPGetContentRangeFromHeaderString(uint64_t result, _QWORD *a2, _QWORD *a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char buffer[200];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  result = CFStringGetCString((CFStringRef)result, buffer, 200, 0x600u);
  if (!(_DWORD)result)
    return result;
  if (sscanf(buffer, "bytes %lld-%lld/%lld", &v11, &v10, &v9) != 3)
  {
    if (sscanf(buffer, "bytes %lld-%lld/*", &v11, &v10) != 2)
      return 0;
    if (a2)
      *a2 = v11;
    if (a3)
      *a3 = v10;
    if (!a5)
      return 1;
    LOBYTE(result) = 0;
LABEL_19:
    *a5 = result;
    return 1;
  }
  if (a2)
    *a2 = v11;
  if (a3)
    *a3 = v10;
  if (a4)
    *a4 = v9;
  result = 1;
  if (a5)
    goto LABEL_19;
  return result;
}

uint64_t FigCFHTTPGetContentRangeFromHTTPResponse(__CFHTTPMessage *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _BYTE *a5)
{
  CFStringRef v9;
  uint64_t v10;

  if (!a1)
    return 0;
  v9 = CFHTTPMessageCopyHeaderFieldValue(a1, CFSTR("Content-Range"));
  v10 = FigCFHTTPGetContentRangeFromHeaderString((uint64_t)v9, a2, a3, a4, a5);
  if (v9)
    CFRelease(v9);
  return v10;
}

CFDateRef FigCFHTTPCreateDateFromHTTPDateString(const __CFString *a1)
{
  __CFDateFormatter *v2;

  v2 = (__CFDateFormatter *)figCFHTTPGetHTTPDateFormater();
  if (a1 && v2)
    return CFDateFormatterCreateDateFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, a1, 0);
  else
    return 0;
}

uint64_t figCFHTTPGetHTTPDateFormater()
{
  const __CFAllocator *v0;
  const __CFLocale *v1;
  __CFDateFormatter *v2;
  __CFDateFormatter *v3;

  if (!figCFHTTPGetHTTPDateFormater_sHTTPDateFormater)
  {
    v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v1 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("en_US_POSIX"));
    v2 = CFDateFormatterCreate(v0, v1, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    if (v2)
    {
      v3 = v2;
      CFDateFormatterSetFormat(v2, CFSTR("EEE, d MMM yyyy HH:mm:ss z"));
      CFDateFormatterSetProperty(v3, (CFStringRef)*MEMORY[0x1E0C9AEF8], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
      if (!FigAtomicCompareAndSwapPtr())
        CFRelease(v3);
    }
    if (v1)
      CFRelease(v1);
  }
  return figCFHTTPGetHTTPDateFormater_sHTTPDateFormater;
}

CFDateRef FigCFHTTPCreateDateFromDelayString(CFStringRef string)
{
  const __CFAllocator *v2;
  const __CFLocale *v3;
  CFNumberFormatterRef v4;
  CFNumberFormatterRef v5;
  CFDateRef v6;
  const __CFAllocator *v7;
  const __CFNumber *NumberFromString;
  const __CFNumber *v9;
  CFAbsoluteTime Current;
  int valuePtr;

  if (!figCFHTTPGetHTTPDelaySecondsFormatter_sHTTPDelaySecondsFormatter)
  {
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v3 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("en_US_POSIX"));
    v4 = CFNumberFormatterCreate(v2, v3, kCFNumberFormatterNoStyle);
    if (v4)
    {
      v5 = v4;
      if (!FigAtomicCompareAndSwapPtr())
        CFRelease(v5);
    }
    if (v3)
      CFRelease(v3);
  }
  v6 = 0;
  if (string && figCFHTTPGetHTTPDelaySecondsFormatter_sHTTPDelaySecondsFormatter)
  {
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    NumberFromString = CFNumberFormatterCreateNumberFromString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFNumberFormatterRef)figCFHTTPGetHTTPDelaySecondsFormatter_sHTTPDelaySecondsFormatter, string, 0, 1uLL);
    if (NumberFromString)
    {
      v9 = NumberFromString;
      valuePtr = 0;
      if (CFNumberGetValue(NumberFromString, kCFNumberIntType, &valuePtr))
      {
        Current = CFAbsoluteTimeGetCurrent();
        v6 = CFDateCreate(v7, Current + (double)valuePtr);
      }
      else
      {
        v6 = 0;
      }
      CFRelease(v9);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

CFDateRef FigCFHTTPCreateDateFromHTTPDateStringOrDelayString(const __CFString *a1)
{
  CFDateRef result;

  result = FigCFHTTPCreateDateFromHTTPDateString(a1);
  if (!result)
    return FigCFHTTPCreateDateFromDelayString(a1);
  return result;
}

const __CFString *FigCFHTTPCopyDateFromHTTPResponse(__CFHTTPMessage *a1)
{
  return figCFHTTPCopyDateFromHTTPResponse(a1, CFSTR("Date"));
}

const __CFString *figCFHTTPCopyDateFromHTTPResponse(__CFHTTPMessage *a1, const __CFString *a2)
{
  const __CFString *result;
  const __CFString *v3;
  CFDateRef v4;

  result = CFHTTPMessageCopyHeaderFieldValue(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = FigCFHTTPCreateDateFromHTTPDateString(result);
    CFRelease(v3);
    return (const __CFString *)v4;
  }
  return result;
}

const __CFString *FigCFHTTPCopyLastModifiedDateFromHTTPResponse(__CFHTTPMessage *a1)
{
  return figCFHTTPCopyDateFromHTTPResponse(a1, CFSTR("Last-Modified"));
}

CFDateRef FigCFHTTPCopyRetryAfterDateFromHTTPResponse(__CFHTTPMessage *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  CFDateRef v3;

  v1 = CFHTTPMessageCopyHeaderFieldValue(a1, CFSTR("Retry-After"));
  if (!v1)
    return 0;
  v2 = v1;
  v3 = FigCFHTTPCreateDateFromHTTPDateString(v1);
  if (!v3)
    v3 = FigCFHTTPCreateDateFromDelayString(v2);
  CFRelease(v2);
  return v3;
}

uint64_t FigCFHTTPCanURLsBePersistent(const __CFURL *a1, const __CFURL *a2, BOOL *a3)
{
  uint64_t v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  const __CFString *v10;
  CFComparisonResult v11;
  BOOL v12;
  BOOL v13;
  uint64_t v15;

  v15 = 0;
  v6 = (uint64_t)CFURLCopyHostName(a1);
  v7 = CFURLCopyScheme(a1);
  v8 = CFURLCopyHostName(a2);
  v9 = CFURLCopyScheme(a2);
  v10 = v9;
  if (v6 && v8)
  {
    v11 = CFStringCompare((CFStringRef)v6, v8, 1uLL);
    v12 = v7 == 0;
    v13 = v10 == 0;
    if (v7 && v10)
    {
      if (v11 || CFStringCompare(v7, v10, 1uLL))
      {
        *a3 = 0;
      }
      else
      {
        FigCFHTTPGetHTTPPort(a1, (int *)&v15 + 1, 0);
        FigCFHTTPGetHTTPPort(a2, (int *)&v15, 0);
        *a3 = HIDWORD(v15) == (_DWORD)v15;
      }
      goto LABEL_11;
    }
LABEL_13:
    CFRelease((CFTypeRef)v6);
    v6 = 4294954510;
    if (v12)
      goto LABEL_14;
    goto LABEL_21;
  }
  v12 = v7 == 0;
  v13 = v9 == 0;
  if (v7 && v9)
  {
    *a3 = 0;
    if (v6)
    {
LABEL_11:
      CFRelease((CFTypeRef)v6);
      v13 = 0;
      v6 = 0;
      goto LABEL_21;
    }
    v13 = 0;
    goto LABEL_21;
  }
  if (v6)
    goto LABEL_13;
  v6 = 4294954510;
  if (!v7)
  {
LABEL_14:
    if (!v8)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_21:
  CFRelease(v7);
  if (v8)
LABEL_15:
    CFRelease(v8);
LABEL_16:
  if (!v13)
    CFRelease(v10);
  return v6;
}

uint64_t FigCFHTTPDoURLHostsAndPortsMatch(const __CFURL *a1, const __CFURL *a2)
{
  uint64_t v2;
  CFStringRef v5;
  CFStringRef v6;
  uint64_t v8;

  v2 = 0;
  if (a1)
  {
    if (a2)
    {
      v8 = 0;
      FigCFHTTPGetHTTPPort(a1, (int *)&v8 + 1, 0);
      FigCFHTTPGetHTTPPort(a2, (int *)&v8, 0);
      v2 = 0;
      if (HIDWORD(v8) == (_DWORD)v8)
      {
        v5 = CFURLCopyHostName(a1);
        v6 = CFURLCopyHostName(a2);
        v2 = FigCFEqual();
        if (v5)
          CFRelease(v5);
        if (v6)
          CFRelease(v6);
      }
    }
  }
  return v2;
}

uint64_t FigCFHTTPIsStatusCodeRedirect(int a1)
{
  char v1;

  if ((a1 - 301) >= 5)
    v1 = 0;
  else
    v1 = 0x100010101uLL >> (8 * (a1 - 45));
  return v1 & 1;
}

uint64_t FigCFHTTPCopyFilenameFromContentDisposition(__CFHTTPMessage *a1, uint64_t a2, CFStringRef *a3)
{
  const __CFString *v5;
  const __CFString *v6;
  CFIndex v7;
  char *v8;
  char *v9;
  char *v10;
  char *i;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char *j;
  unsigned int v16;
  int v17;
  BOOL v18;
  char *v19;
  CFStringRef v20;

  v5 = CFHTTPMessageCopyHeaderFieldValue(a1, CFSTR("Content-Disposition"));
  if (!v5)
    return 4294954513;
  v6 = v5;
  v7 = CFStringGetLength(v5) + 1;
  v8 = (char *)malloc_type_malloc(v7, 0x703827BEuLL);
  if (v8)
  {
    v9 = v8;
    if (CFStringGetCString(v6, v8, v7, 0x600u) && (v10 = strcasestr(v9, "filename")) != 0)
    {
      for (i = v10 + 9; ; ++i)
      {
        if (!*(i - 1))
          goto LABEL_33;
        if (*(i - 1) == 61)
          break;
      }
      v12 = MEMORY[0x1E0C80978];
      do
      {
        v13 = *i;
        if ((v13 & 0x80000000) != 0)
          v14 = __maskrune(*i, 0x4000uLL);
        else
          v14 = *(_DWORD *)(v12 + 4 * v13 + 60) & 0x4000;
        ++i;
      }
      while (v14);
      if (v13 == 34)
      {
        for (j = i; *j; ++j)
        {
          if (*j == 34)
            goto LABEL_28;
        }
      }
      else
      {
        j = i - 2;
        --i;
        do
        {
          v16 = j[1];
          if ((v16 & 0x80000000) != 0)
            v17 = __maskrune(j[1], 0x4000uLL);
          else
            v17 = *(_DWORD *)(v12 + 4 * v16 + 60) & 0x4000;
          ++j;
          if (v16)
            v18 = v17 == 0;
          else
            v18 = 0;
        }
        while (v18);
LABEL_28:
        *j = 0;
      }
      if ((_DWORD)a2)
      {
        v19 = strrchr(i, 46);
        if (!v19)
        {
LABEL_33:
          a2 = 4294954513;
          goto LABEL_36;
        }
        v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v19 + 1, 0x600u);
        *a3 = v20;
        if (v20)
          a2 = 0;
        else
          a2 = FigSignalErrorAt();
      }
      else
      {
        *a3 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], i, 0x600u);
      }
LABEL_36:
      free(v9);
    }
    else
    {
      free(v9);
      a2 = 4294954513;
    }
  }
  else
  {
    a2 = FigSignalErrorAt();
  }
  CFRelease(v6);
  return a2;
}

const __CFData *FigCFHTTPCopyClientProcessName(const __CFData *result)
{
  if (result)
  {
    CFDataGetBytePtr(result);
    if (FigServer_GetClientPIDFromAuditToken())
      FigServer_CopyProcessName();
    return 0;
  }
  return result;
}

uint64_t FigCFHTTPCopyClientBundleIdentifier(const __CFData *a1)
{
  const UInt8 *BytePtr;
  uint64_t ClientPIDFromAuditToken;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;

  if (!a1)
    return 0;
  BytePtr = CFDataGetBytePtr(a1);
  v11 = *(_OWORD *)BytePtr;
  v12 = *((_OWORD *)BytePtr + 1);
  ClientPIDFromAuditToken = FigServer_GetClientPIDFromAuditToken();
  v6 = (void *)MEMORY[0x19403137C](ClientPIDFromAuditToken, v3, v4, v5);
  v7 = objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", ClientPIDFromAuditToken, v11, v12);
  v8 = (void *)objc_msgSend(MEMORY[0x1E0D87D68], "handleForIdentifier:error:", v7, 0);
  if (v8)
    v9 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v8, "bundle"), "identifier"), "copy");
  else
    v9 = 0;
  objc_autoreleasePoolPop(v6);
  return v9;
}

uint64_t FigCFHTTPCreateCacheHeaders(const __CFString *a1, uint64_t a2, __CFHTTPMessage *a3, const __CFDictionary *a4, CFDictionaryRef *a5)
{
  const __CFString *v5;
  const __CFAllocator *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *Mutable;
  __CFDictionary *v12;
  const void *v13;
  const __CFString *v14;
  const __CFString *v15;
  CFIndex location;
  const __CFString *v17;
  const __CFString *v18;
  const __CFDate *v19;
  const __CFDate *v20;
  CFDateRef v21;
  const __CFDate *DateFromString;
  CFStringRef v23;
  CFIndex ResponseStatusCode;
  const __CFString *Value;
  const __CFString *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  CFDictionaryRef Copy;
  uint64_t v31;
  CFRange v33;
  const __CFString *v34;
  const __CFString *v35;
  const __CFString *v36;
  const __CFString *v37;
  CFComparisonResult v38;
  CFIndex v39;
  CFIndex v40;
  CFIndex v41;
  const void *v42;
  uint64_t v43;
  __CFDateFormatter *v44;
  const __CFString *v45;
  const __CFString *v46;
  const __CFString *v47;
  const __CFString *v48;
  CFStringRef v49;
  CFStringRef v50;
  CFAbsoluteTime Current;
  uint64_t v52;
  double v53;
  double v54;
  CFDictionaryRef *v55;
  const __CFNumber *v56;
  const __CFNumber *v57;
  CFRange result;
  int valuePtr;
  uint64_t v61;
  CFTypeRef cf;
  uint64_t v63;
  char buffer[8];
  char v65[120];
  uint64_t v66;
  CFRange v67;
  CFRange v68;
  CFRange v69;

  v66 = *MEMORY[0x1E0C80C00];
  cf = 0;
  v63 = a2;
  v61 = 0;
  valuePtr = 1;
  if (!a3)
    goto LABEL_101;
  v5 = a1;
  if (!a1)
  {
    v31 = FigSignalErrorAt();
LABEL_102:
    v9 = 0;
LABEL_104:
    v12 = 0;
    v10 = 0;
    goto LABEL_46;
  }
  if (!a5)
  {
LABEL_101:
    v31 = FigSignalErrorAt();
    v5 = 0;
    goto LABEL_102;
  }
  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  if (!v9)
  {
    v31 = FigSignalErrorAt();
    v5 = 0;
    goto LABEL_104;
  }
  v10 = CFNumberCreate(v8, kCFNumberSInt64Type, &v63);
  if (!v10)
  {
    v31 = FigSignalErrorAt();
    v5 = 0;
    v12 = 0;
    goto LABEL_46;
  }
  Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = Mutable;
  if (!Mutable)
  {
    v31 = FigSignalErrorAt();
    v5 = 0;
    goto LABEL_46;
  }
  CFDictionarySetValue(Mutable, CFSTR("Version"), v9);
  v13 = (const void *)*MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(v12, CFSTR("no-cache"), (const void *)*MEMORY[0x1E0C9AE40]);
  CFDictionarySetValue(v12, CFSTR("must-validate"), v13);
  CFDictionarySetValue(v12, CFSTR("URL"), v5);
  CFDictionarySetValue(v12, CFSTR("Size"), v10);
  v14 = CFHTTPMessageCopyHeaderFieldValue(a3, CFSTR("Pragma"));
  v56 = v9;
  v57 = v10;
  v55 = a5;
  if (v14)
  {
    v15 = v14;
    location = CFStringFind(v14, CFSTR("no-cache"), 1uLL).location;
    CFRelease(v15);
    if (location != -1)
    {
      CFDictionarySetValue(v12, CFSTR("no-cache"), (const void *)*MEMORY[0x1E0C9AE50]);
LABEL_14:
      v19 = 0;
      v20 = 0;
      v21 = 0;
      DateFromString = 0;
      v23 = 0;
      goto LABEL_15;
    }
  }
  v17 = CFHTTPMessageCopyHeaderFieldValue(a3, CFSTR("Cache-control"));
  if (v17)
  {
    v18 = v17;
    if (CFStringFind(v17, CFSTR("no-cache"), 1uLL).location != -1
      || CFStringFind(v18, CFSTR("no-store"), 1uLL).location != -1)
    {
      CFDictionarySetValue(v12, CFSTR("no-cache"), (const void *)*MEMORY[0x1E0C9AE50]);
      CFRelease(v18);
      goto LABEL_14;
    }
    if (CFStringFind(v18, CFSTR("must-revalidate"), 1uLL).location != -1)
      CFDictionarySetValue(v12, CFSTR("must-validate"), (const void *)*MEMORY[0x1E0C9AE50]);
    v33 = CFStringFind(v18, CFSTR("max-age="), 1uLL);
    if (v33.location != -1)
    {
      v34 = CFStringCreateWithSubstring(v8, v18, v33);
      if (v34)
      {
        v35 = v34;
        if (CFStringGetCString(v34, buffer, 128, 0x600u) && sscanf(v65, "%llu", &v61) != 1)
          v61 = 0;
        CFRelease(v35);
      }
    }
    CFRelease(v18);
  }
  v36 = CFHTTPMessageCopyHeaderFieldValue(a3, CFSTR("Etag"));
  if (v36)
  {
    v37 = v36;
    if (CFStringGetLength(v36) < 2)
      goto LABEL_74;
    v67.length = CFStringGetLength(CFSTR("W/"));
    v67.location = 0;
    v38 = CFStringCompareWithOptions(v37, CFSTR("W/"), v67, 1uLL);
    v39 = CFStringFind(v37, CFSTR("\""), 0).location;
    if (v39 == -1
      || (v40 = v39,
          result.location = 0,
          result.length = 0,
          v41 = v39 + 1,
          v68.length = CFStringGetLength(v37) - (v39 + 1),
          v68.location = v41,
          !CFStringFindWithOptions(v37, CFSTR("\""), v68, 0, &result)))
    {
LABEL_74:
      v23 = 0;
    }
    else
    {
      v69.length = result.location - v40 + 1;
      v69.location = v40;
      v23 = CFStringCreateWithSubstring(v8, v37, v69);
      CFDictionarySetValue(v12, CFSTR("ETag"), v23);
      if (v38)
        v42 = v13;
      else
        v42 = (const void *)*MEMORY[0x1E0C9AE50];
      CFDictionarySetValue(v12, CFSTR("ETag weak"), v42);
    }
    CFRelease(v37);
  }
  else
  {
    v23 = 0;
  }
  v43 = figCFHTTPGetHTTPDateFormater();
  if (v43)
  {
    v44 = (__CFDateFormatter *)v43;
    v45 = CFHTTPMessageCopyHeaderFieldValue(a3, CFSTR("Date"));
    if (v45)
    {
      v46 = v45;
      DateFromString = CFDateFormatterCreateDateFromString(v8, v44, v45, 0);
      CFRelease(v46);
    }
    else
    {
      DateFromString = 0;
    }
    v47 = CFHTTPMessageCopyHeaderFieldValue(a3, CFSTR("Expires"));
    if (v47)
    {
      v48 = v47;
      v21 = CFDateFormatterCreateDateFromString(v8, v44, v47, 0);
      CFRelease(v48);
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = 0;
    DateFromString = 0;
  }
  v49 = CFHTTPMessageCopyHeaderFieldValue(a3, CFSTR("Last-Modified"));
  if (v49)
  {
    v50 = v49;
    CFDictionarySetValue(v12, CFSTR("Last-Modified"), v49);
    CFRelease(v50);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v20 = CFDateCreate(v8, Current);
  if (DateFromString && CFDateCompare(DateFromString, v20, 0) == kCFCompareGreaterThan)
  {
    v19 = DateFromString;
    DateFromString = 0;
  }
  else
  {
    v19 = v20;
    v20 = 0;
  }
  v52 = v61;
  if (v61)
  {
    if (v21)
    {
      CFRelease(v21);
      v52 = v61;
    }
    v53 = (double)v52;
    v54 = MEMORY[0x194029D14](v19);
    v21 = CFDateCreate(v8, v54 + v53);
  }
  if (v21)
    CFDictionarySetValue(v12, CFSTR("Expires"), v21);
  if (!FigCFHTTPCopyFilenameFromContentDisposition(a3, 0, (CFStringRef *)&cf))
    CFDictionarySetValue(v12, CFSTR("FileName"), cf);
LABEL_15:
  ResponseStatusCode = CFHTTPMessageGetResponseStatusCode(a3);
  if (ResponseStatusCode == 200 || ResponseStatusCode == 304 || ResponseStatusCode == 206)
  {
    v5 = FigCFHTTPCopyMimeTypeFromHTTPResponse(a3);
    if (v5)
      CFDictionarySetValue(v12, CFSTR("MIME Type"), v5);
  }
  else
  {
    v5 = 0;
  }
  if (a4)
  {
    if (!CFDictionaryContainsKey(v12, CFSTR("MIME Type")))
    {
      Value = (const __CFString *)CFDictionaryGetValue(a4, CFSTR("MIME Type"));
      if (Value)
      {
        v26 = Value;
        CFDictionarySetValue(v12, CFSTR("MIME Type"), Value);
        CFHTTPMessageSetHeaderFieldValue(a3, CFSTR("Content-Type"), v26);
      }
    }
    if (!CFDictionaryContainsKey(v12, CFSTR("Last-Modified")))
    {
      v27 = CFDictionaryGetValue(a4, CFSTR("Last-Modified"));
      if (v27)
        CFDictionarySetValue(v12, CFSTR("Last-Modified"), v27);
    }
    if (!CFDictionaryContainsKey(v12, CFSTR("ETag")))
    {
      v28 = CFDictionaryGetValue(a4, CFSTR("ETag"));
      if (v28)
        CFDictionarySetValue(v12, CFSTR("ETag"), v28);
    }
    if (!CFDictionaryContainsKey(v12, CFSTR("Expires")))
    {
      v29 = CFDictionaryGetValue(a4, CFSTR("Expires"));
      if (v29)
        CFDictionarySetValue(v12, CFSTR("Expires"), v29);
    }
  }
  Copy = CFDictionaryCreateCopy(v8, v12);
  if (!Copy)
  {
    v31 = FigSignalErrorAt();
    if (!v23)
      goto LABEL_37;
    goto LABEL_36;
  }
  v31 = 0;
  *v55 = Copy;
  if (v23)
LABEL_36:
    CFRelease(v23);
LABEL_37:
  if (v21)
    CFRelease(v21);
  v10 = v57;
  if (v20)
    CFRelease(v20);
  if (DateFromString)
    CFRelease(DateFromString);
  if (v19)
    CFRelease(v19);
  v9 = v56;
LABEL_46:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v9)
    CFRelease(v9);
  if (v10)
    CFRelease(v10);
  if (v12)
    CFRelease(v12);
  return v31;
}

const void *FigCFHTTPMatchCacheHeaders(const __CFDictionary *a1, uint64_t a2, const __CFString *a3, int a4, const __CFDictionary *a5)
{
  const __CFNumber *Value;
  const __CFNumber *v11;
  int v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFAllocator *v15;
  CFURLRef v16;
  CFURLRef v17;
  const __CFString *v18;
  CFURLRef v19;
  CFURLRef v20;
  const __CFString *v21;
  BOOL v22;
  const void *v23;
  const void *result;
  const void *v25;
  const void *v26;
  int valuePtr;
  uint64_t v28;

  if (!a1)
    return 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("Version"));
  if (!Value)
    return 0;
  v28 = 0;
  valuePtr = 0;
  if (!CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
    return 0;
  if (valuePtr != 1)
    return 0;
  v11 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("Size"));
  if (!v11)
    return 0;
  v12 = CFNumberGetValue(v11, kCFNumberSInt64Type, &v28);
  if (!a3)
    return 0;
  if (!v12)
    return 0;
  if (v28 != a2)
    return 0;
  v13 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("URL"));
  if (!v13)
    return 0;
  v14 = v13;
  if (a4)
  {
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v16 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, 0);
    if (v16)
    {
      v17 = v16;
      v18 = (const __CFString *)FigCFURLCreateCacheKey();
      CFRelease(v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = CFURLCreateWithString(v15, v14, 0);
    if (v19)
    {
      v20 = v19;
      v21 = (const __CFString *)FigCFURLCreateCacheKey();
      CFRelease(v20);
      if (v18 && v21)
      {
        v22 = CFStringCompare(v18, v21, 0) != kCFCompareEqualTo;
LABEL_22:
        CFRelease(v18);
LABEL_23:
        if (v21)
          CFRelease(v21);
        if (v22)
          return 0;
        goto LABEL_26;
      }
    }
    else
    {
      v21 = 0;
    }
    v22 = 1;
    if (!v18)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (CFStringCompare(a3, v13, 0))
    return 0;
LABEL_26:
  if (!a5)
    return 0;
  if (CFDictionaryContainsKey(a5, CFSTR("ETag")))
  {
    v23 = CFDictionaryGetValue(a5, CFSTR("ETag"));
    result = CFDictionaryGetValue(a1, CFSTR("ETag"));
    if (!result)
      return result;
    v25 = result;
    result = v23;
    return (const void *)CFEqual(result, v25);
  }
  result = (const void *)CFDictionaryContainsKey(a5, CFSTR("Last-Modified"));
  if ((_DWORD)result)
  {
    v26 = CFDictionaryGetValue(a5, CFSTR("Last-Modified"));
    result = CFDictionaryGetValue(a1, CFSTR("Last-Modified"));
    if (result)
    {
      v25 = v26;
      return (const void *)CFEqual(result, v25);
    }
  }
  return result;
}

uint64_t FigCFHTTPVIAHeaderIsCacheHit(const __CFString *a1)
{
  CFIndex location;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  int CharacterAtIndex;

  location = CFStringFind(a1, CFSTR("["), 0).location;
  v3 = CFStringFind(a1, CFSTR("]"), 0).location + ~location;
  v4 = v3 > 0x18;
  v5 = (1 << v3) & 0x1000060;
  if (v4 || v5 == 0)
    return 0xFFFFFFFFLL;
  CharacterAtIndex = CFStringGetCharacterAtIndex(a1, location + 4);
  return CharacterAtIndex == 72 || CharacterAtIndex == 82;
}

uint64_t FigCFHTTPCreateRTCReportingAppleCDNVIAEdgeDomainString(__CFHTTPMessage *a1, CFStringRef *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  const __CFAllocator *v5;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v7;
  CFIndex Count;
  const __CFString *ValueAtIndex;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFString *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  CFIndex v15;
  CFIndex v16;
  __CFArray *Mutable;
  __CFArray *v18;
  CFStringRef v19;
  uint64_t v20;
  CFRange v22;

  v3 = CFHTTPMessageCopyHeaderFieldValue(a1, CFSTR("Via"));
  if (!v3)
    return 4294954510;
  v4 = v3;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, CFSTR(","));
  if (!ArrayBySeparatingStrings)
  {
    v20 = FigSignalErrorAt();
    v18 = (__CFArray *)v4;
LABEL_22:
    CFRelease(v18);
    return v20;
  }
  v7 = ArrayBySeparatingStrings;
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  if (Count < 1)
  {
    v11 = 0;
LABEL_15:
    v14 = 0;
    goto LABEL_16;
  }
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, Count - 1);
  v10 = CFStringCreateArrayBySeparatingStrings(v5, ValueAtIndex, CFSTR(" "));
  v11 = v10;
  if (!v10 || CFArrayGetCount(v10) < 3)
    goto LABEL_15;
  v12 = (const __CFString *)CFArrayGetValueAtIndex(v11, 2);
  v13 = CFStringCreateArrayBySeparatingStrings(v5, v12, CFSTR("-"));
  v14 = v13;
  if (!v13)
  {
    v20 = FigSignalErrorAt();
    v18 = 0;
    goto LABEL_17;
  }
  v15 = CFArrayGetCount(v13);
  if (v15 < 2)
  {
LABEL_16:
    v18 = 0;
    v20 = 4294954516;
    goto LABEL_17;
  }
  v16 = v15;
  Mutable = CFArrayCreateMutable(v5, 0, MEMORY[0x1E0C9B378]);
  v18 = Mutable;
  if (Mutable
    && (v22.length = v16 - 1,
        v22.location = 0,
        CFArrayAppendArray(Mutable, v14, v22),
        (v19 = CFStringCreateByCombiningStrings(v5, v18, CFSTR("-"))) != 0))
  {
    v20 = 0;
    *a2 = v19;
  }
  else
  {
    v20 = FigSignalErrorAt();
  }
LABEL_17:
  CFRelease(v4);
  CFRelease(v7);
  if (v11)
    CFRelease(v11);
  if (v14)
    CFRelease(v14);
  if (v18)
    goto LABEL_22;
  return v20;
}

CFHTTPMessageRef FigCFHTTPCreateHTTPMessageFromHTTPResponseHeaders(const void *a1)
{
  const __CFAllocator *v2;
  CFHTTPMessageRef Empty;

  if (!a1)
    return 0;
  v2 = CFGetAllocator(a1);
  Empty = CFHTTPMessageCreateEmpty(v2, 0);
  if (Empty)
    CFDictionaryApplyFunction((CFDictionaryRef)a1, (CFDictionaryApplierFunction)figCFHTTPMessageSetAllHeaderFieldsFromDictionary, Empty);
  return Empty;
}

void figCFHTTPMessageSetAllHeaderFieldsFromDictionary(CFStringRef headerField, CFStringRef value, CFHTTPMessageRef message)
{
  CFHTTPMessageSetHeaderFieldValue(message, headerField, value);
}

uint64_t FigCFHTTPCreateCFErrorFromHTTPStatusCode(uint64_t a1, CFErrorRef *a2)
{
  CFErrorRef v3;
  const __CFDictionary *v4;
  BOOL v5;
  const __CFAllocator *v6;
  uint64_t v7;
  CFTypeRef cf;
  CFIndex code;

  LODWORD(code) = 0;
  cf = 0;
  if (!a1)
    a1 = 200;
  FigCFHTTPCopyErrorCodeAndCommentForHTTPStatusCode(a1, &code, &cf);
  v3 = 0;
  v4 = 0;
  if ((_DWORD)code)
    v5 = cf == 0;
  else
    v5 = 1;
  if (v5
    || (v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00],
        (v4 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0C9AFB0], &cf, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) != 0)&& (v3 = CFErrorCreate(v6, CFSTR("CoreMediaErrorDomain"), (int)code, v4)) != 0)
  {
    v7 = 0;
    *a2 = v3;
  }
  else
  {
    v7 = FigSignalErrorAt();
  }
  if (cf)
    CFRelease(cf);
  if (v4)
    CFRelease(v4);
  return v7;
}

uint64_t FigCFHTTPCopyErrorCodeAndCommentForHTTPStatusCode(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  CFStringRef v6;
  int v7;
  CFTypeRef v8;

  v6 = 0;
  v7 = 0;
  if (a1 > 303)
  {
    switch(a1)
    {
      case 401:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 401: Unauthorized");
        break;
      case 402:
      case 405:
      case 406:
      case 408:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 417:
        goto LABEL_5;
      case 403:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 403: Forbidden");
        break;
      case 404:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 404: File Not Found");
        break;
      case 407:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 407: Proxy Authentication Required");
        break;
      case 409:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 409: Conflict");
        break;
      case 410:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 410: Gone");
        break;
      case 416:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 416: Requested Range Not Satisfiable");
        break;
      case 418:
        v7 = FigSignalErrorAt();
        v6 = CFSTR("HTTP 418: Teapot");
        break;
      default:
        switch(a1)
        {
          case 500:
            v7 = FigSignalErrorAt();
            v6 = CFSTR("HTTP 500: Internal Server Error");
            break;
          case 501:
            goto LABEL_5;
          case 502:
            v7 = FigSignalErrorAt();
            v6 = CFSTR("HTTP 502: Bad Gateway");
            break;
          case 503:
            v7 = FigSignalErrorAt();
            v6 = CFSTR("HTTP 503: Service Unavailable");
            break;
          case 504:
            v7 = FigSignalErrorAt();
            v6 = CFSTR("HTTP 504: Gateway Timeout");
            break;
          default:
            if (a1 != 304)
              goto LABEL_5;
            break;
        }
        break;
    }
  }
  else if (a1 != 200 && a1 != 206 && a1 != 302)
  {
LABEL_5:
    v7 = FigSignalErrorAt();
    v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("HTTP %d: (unhandled)"), a1);
  }
  if (a2)
    *a2 = v7;
  if (a3)
  {
    if (v6)
      v8 = CFRetain(v6);
    else
      v8 = 0;
    *a3 = v8;
  }
  if (v6)
    CFRelease(v6);
  return 0;
}

CFURLRef FigCFHTTPCopyRedirectLocationFromHTTPHeaders(const __CFDictionary *a1)
{
  const __CFString *Value;

  if (a1 && (Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("Location"))) != 0)
    return CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Value, 0);
  else
    return 0;
}

uint64_t FigCFHTTPCreateHTTPRequestOptionsFromAssetCreationOptions(const __CFAllocator *a1, uint64_t a2, __CFDictionary **a3)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  const __CFData *Value;
  const void *v8;
  const void *v9;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v6 = Mutable;
  if (a2)
  {
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    FigCFDictionarySetValueFromKeyInDict();
    if (!FigCFDictionaryGetValue())
    {
      Value = (const __CFData *)FigCFDictionaryGetValue();
      v8 = (const void *)FigCFHTTPCopyClientBundleIdentifier(Value);
      if (v8)
      {
        v9 = v8;
        CFDictionarySetValue(v6, CFSTR("FHRP_ClientBundleIdentifier"), v8);
        CFRelease(v9);
      }
    }
  }
  *a3 = v6;
  return 0;
}

uint64_t FigCFHTTPCreateCommonHTTPHeadersFromAssetCreationOptions(const __CFAllocator *a1, uint64_t a2, unint64_t a3, __CFDictionary **a4)
{
  uint64_t DictionaryValue;
  __CFDictionary *MutableCopy;
  __CFDictionary *v9;

  if (a2)
    DictionaryValue = FigCFDictionaryGetDictionaryValue();
  else
    DictionaryValue = 0;
  if (!(a3 | DictionaryValue))
  {
    v9 = 0;
LABEL_12:
    *a4 = v9;
    return 0;
  }
  if (DictionaryValue)
    MutableCopy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)DictionaryValue);
  else
    MutableCopy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = MutableCopy;
  if (MutableCopy)
  {
    if (a3)
      CFDictionaryAddValue(MutableCopy, CFSTR("X-Playback-Session-Id"), (const void *)a3);
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t FigNSHTTPGetNetworkServiceType(int a1)
{
  return 8 * (a1 == 1);
}

uint64_t FigNSHTTPCreateSerializedObjectFromNSSecureCoding(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  objc_msgSend(v2, "encodeObject:forKey:", a1, *MEMORY[0x1E0CB2CD0]);
  v3 = objc_msgSend(v2, "encodedData");

  return v3;
}

void FigNSHTTPInitWithSerializedObject(void *a1, uint64_t a2)
{
  id v3;

  v3 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", a2, 0);
  objc_msgSend(a1, "initWithCoder:", v3);
  objc_msgSend(v3, "finishDecoding");

}

void FigHTTPStopAndReleaseTimer(dispatch_object_t *a1)
{
  NSObject *v2;

  v2 = *a1;
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*a1);
    *a1 = 0;
  }
}

void FigHTTPRescheduleTimer(double a1, uint64_t a2, NSObject *a3)
{
  int64_t v4;
  dispatch_time_t v5;

  if (a1 == 0.0)
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v4 = (uint64_t)(a1 * 1000000000.0);
  v5 = dispatch_time(0, v4);
  dispatch_source_set_timer(a3, v5, 0x7FFFFFFFFFFFFFFFuLL, 0x989680uLL);
}

uint64_t FigHTTPCreateTimer(const void *a1, uint64_t a2, NSObject *a3, dispatch_object_t *a4, double a5)
{
  dispatch_source_t v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  CFTypeRef v14;
  dispatch_time_t v15;

  FigHTTPStopAndReleaseTimer(a4);
  v10 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, a3);
  *a4 = v10;
  if (!v10)
    return FigSignalErrorAt();
  v11 = v10;
  v12 = malloc_type_calloc(1uLL, 0x18uLL, 0xC00407E72882DuLL);
  if (!v12)
    return FigSignalErrorAt();
  v13 = v12;
  v14 = CFRetain(a1);
  *v13 = a2;
  v13[1] = v14;
  v13[2] = v11;
  dispatch_retain(v11);
  dispatch_set_context(v11, v13);
  dispatch_source_set_cancel_handler_f(v11, (dispatch_function_t)figHTTPDispatchTimerCanceledCallback);
  dispatch_source_set_event_handler_f(v11, (dispatch_function_t)figHTTPDispatchTimerEventCallback);
  v15 = dispatch_time(0, (uint64_t)(a5 * 1000000000.0));
  dispatch_source_set_timer(v11, v15, 0x7FFFFFFFFFFFFFFFuLL, 0x989680uLL);
  dispatch_resume(v11);
  return 0;
}

void figHTTPDispatchTimerCanceledCallback(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *(const void **)(a1 + 8);
    if (v2)
      CFRelease(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    free((void *)a1);
  }
}

uint64_t figHTTPDispatchTimerEventCallback(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(_QWORD, _QWORD))result)(*(_QWORD *)(result + 16), *(_QWORD *)(result + 8));
  return result;
}

uint64_t FigHTTPSchedulerCreateLocal(const void *a1)
{
  char __str[64];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19402F294](&FigHTTPSchedulerCreateLocal_sInitOnce, shouldUseGlobalHTTPSchedulerGetPrefOnce);
  if (gShouldUseGlobalHTTPScheduler)
    return 0;
  snprintf(__str, 0x40uLL, "com.apple.coremedia.networkbuffering.bytepump.%p", a1);
  return FigDispatchQueueCreateWithPriority();
}

uint64_t shouldUseGlobalHTTPSchedulerGetPrefOnce()
{
  uint64_t result;

  result = FigGetCFPreferenceNumberWithDefault();
  gShouldUseGlobalHTTPScheduler = result;
  return result;
}

NSObject *FigHTTPSchedulerRetain(dispatch_object_t object)
{
  NSObject *GlobalNetworkBufferingQueue;

  GlobalNetworkBufferingQueue = object;
  if (!object)
    GlobalNetworkBufferingQueue = FigThreadGetGlobalNetworkBufferingQueue();
  dispatch_retain(GlobalNetworkBufferingQueue);
  return GlobalNetworkBufferingQueue;
}

void FigHTTPSchedulerRelease(dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
}

uint64_t FigCFHTTPCreateURLReplacingQueryComponent(const void *a1, const __CFString *a2, _QWORD *a3)
{
  CFTypeRef v4;
  void *v6;
  void *v7;
  const __CFString *v8;
  const void *v9;
  uint64_t v10;

  v4 = a1;
  if (a1)
  {
    if (a2 && a3)
    {
      v6 = (void *)MEMORY[0x19403137C]();
      v7 = (void *)objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v4, 1);
      if (CFStringGetLength(a2) <= 0)
        v8 = 0;
      else
        v8 = a2;
      objc_msgSend(v7, "setPercentEncodedQuery:", v8);
      v9 = (const void *)objc_msgSend(v7, "URL");
      if (v9)
        v4 = CFRetain(v9);
      else
        v4 = 0;
      if (v4)
        v10 = 0;
      else
        v10 = 4294954633;
      objc_autoreleasePoolPop(v6);
    }
    else
    {
      v10 = FigSignalErrorAt();
      v4 = 0;
    }
  }
  else
  {
    v10 = FigSignalErrorAt();
  }
  *a3 = v4;
  return v10;
}

uint64_t FigCFHTTPCopyURLAndInheritQueyComponentIfNotPresent(const __CFURL *a1, CFURLRef *a2)
{
  CFStringRef String;
  const __CFString *v4;
  CFURLRef v5;
  const void *v6;
  uint64_t v7;
  uint64_t v9;
  CFURLRef v10;
  CFTypeRef v11;
  CFTypeRef cf;

  if (a1)
  {
    String = CFURLCopyQueryString(a1, 0);
    if (String)
    {
      v4 = String;
      v5 = *a2;
      if (*a2)
      {
        v6 = CFURLCopyQueryString(*a2, 0);
        if (v6)
          goto LABEL_5;
        if (!FigCFHTTPIsDataURL(v5))
        {
          cf = 0;
          v9 = FigCFHTTPCreateURLReplacingQueryComponent(v5, v4, &cf);
          if ((_DWORD)v9)
          {
            v7 = v9;
            goto LABEL_9;
          }
          v10 = *a2;
          v11 = cf;
          *a2 = (CFURLRef)cf;
          if (v11)
            CFRetain(v11);
          if (v10)
            CFRelease(v10);
          v6 = cf;
          if (cf)
LABEL_5:
            CFRelease(v6);
        }
        v7 = 0;
      }
      else
      {
        v7 = 4294954633;
      }
LABEL_9:
      CFRelease(v4);
      return v7;
    }
  }
  return 0;
}

__CFArray *FigCFHTTPCopyQueryParams(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFArray *Mutable;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  CFStringRef v11;
  CFStringRef v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v4 = (void *)MEMORY[0x19403137C]();
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v5 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1), "queryItems");
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
          v11 = CFStringCreateWithFormat(v2, 0, CFSTR("%@="), objc_msgSend(v10, "name"));
          if (!v11 || (v12 = v11, !objc_msgSend(v10, "value")))
          {
            FigSignalErrorAt();
            goto LABEL_13;
          }
          CFArrayAppendValue(Mutable, v12);
          CFArrayAppendValue(Mutable, (const void *)objc_msgSend(v10, "value"));
          CFRelease(v12);
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v7)
          continue;
        break;
      }
    }
LABEL_13:
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    FigSignalErrorAt();
  }
  return Mutable;
}

uint64_t FigCFHTTPCopyQueryParamsAsDict(uint64_t a1, CFMutableDictionaryRef *a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  CFStringRef v13;
  CFStringRef v14;
  CFStringRef v15;
  uint64_t v16;
  void *context;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return FigSignalErrorAt();
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v6 = Mutable;
  context = (void *)MEMORY[0x19403137C]();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1), "queryItems");
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v20 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * i);
        v13 = CFStringCreateWithFormat(v4, 0, CFSTR("%@"), objc_msgSend(v12, "name"));
        if (!v13 || (v14 = CFStringCreateWithFormat(v4, 0, CFSTR("%@"), objc_msgSend(v12, "value"))) == 0)
        {
          v16 = FigSignalErrorAt();
          objc_autoreleasePoolPop(context);
          CFRelease(v6);
          if (v13)
            CFRelease(v13);
          return v16;
        }
        v15 = v14;
        CFDictionaryAddValue(v6, v13, v14);
        CFRelease(v13);
        CFRelease(v15);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v9)
        continue;
      break;
    }
  }
  *a2 = v6;
  objc_autoreleasePoolPop(context);
  return 0;
}

uint64_t FigCFHTTPCreateURLWithQueryParam(const __CFURL *a1, const __CFString *a2, uint64_t a3, _QWORD *a4)
{
  const __CFString *String;
  const __CFString *v9;
  const __CFString *StringMinusParam;
  CFIndex Length;
  const __CFAllocator *v12;
  CFStringRef v13;
  const __CFString *v14;
  uint64_t Component;
  uint64_t v16;

  if (!a1)
    return FigSignalErrorAt();
  String = CFURLCopyQueryString(a1, 0);
  v9 = String;
  if (String && CFStringGetLength(String) >= 1)
  {
    StringMinusParam = FigCFHTTPCreateQueryStringMinusParam(v9, a2);
    Length = CFStringGetLength(StringMinusParam);
    v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (Length < 1)
      v13 = CFStringCreateWithFormat(v12, 0, CFSTR("%@%@"), a2, a3);
    else
      v13 = CFStringCreateWithFormat(v12, 0, CFSTR("%@&%@%@"), StringMinusParam, a2, a3);
    v14 = v13;
    if (StringMinusParam)
      CFRelease(StringMinusParam);
  }
  else
  {
    v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@%@"), a2, a3);
  }
  if (v14)
    Component = FigCFHTTPCreateURLReplacingQueryComponent(a1, v14, a4);
  else
    Component = FigSignalErrorAt();
  v16 = Component;
  if (v9)
    CFRelease(v9);
  if (v14)
    CFRelease(v14);
  return v16;
}

CFMutableStringRef FigCFHTTPCreateQueryStringMinusParam(const __CFString *a1, CFStringRef theString)
{
  CFIndex Length;
  CFIndex v5;
  CFMutableStringRef MutableCopy;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  int CharacterAtIndex;
  CFIndex v11;
  CFIndex v12;
  int v13;
  CFIndex v14;
  int v15;
  CFRange v17;
  CFRange v18;

  Length = CFStringGetLength(theString);
  v5 = CFStringGetLength(a1);
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
  if (MutableCopy)
    v7 = v5 < Length;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = 0;
    do
    {
      v18.location = v8;
      v18.length = Length;
      if (CFStringCompareWithOptions(MutableCopy, theString, v18, 0))
      {
        if (v5 >= 1)
        {
          do
          {
            v9 = v5;
            CharacterAtIndex = CFStringGetCharacterAtIndex(MutableCopy, v8++);
            --v5;
          }
          while (v9 >= 2 && CharacterAtIndex != 38);
        }
      }
      else
      {
        v11 = v8;
        v12 = Length;
        if (v8 >= 1)
        {
          v13 = CFStringGetCharacterAtIndex(MutableCopy, v8 - 1);
          if (v13 == 38)
            v11 = v8 - 1;
          else
            v11 = v8;
          if (v13 == 38)
            v12 = Length + 1;
          else
            v12 = Length;
        }
        if (v12 + v11 < v5 + v8)
        {
          do
          {
            v14 = v11 + v12;
            v15 = CFStringGetCharacterAtIndex(MutableCopy, v11 + v12++);
          }
          while (v14 + 1 < v5 + v8 && v15 != 38);
          if (v15 == 38)
            v12 -= CFStringGetCharacterAtIndex(MutableCopy, v11) == 38;
        }
        v17.location = v11;
        v17.length = v12;
        CFStringDelete(MutableCopy, v17);
        v5 -= v12;
      }
    }
    while (v5 >= Length);
  }
  return MutableCopy;
}

uint64_t FigCFHTTPCreateURLMinusQueryParam(const __CFURL *a1, const __CFString *a2, _QWORD *a3)
{
  const __CFString *String;
  const __CFString *v7;
  const __CFString *StringMinusParam;
  const __CFString *v9;
  uint64_t Component;
  CFTypeRef v11;
  CFTypeRef v12;

  String = CFURLCopyQueryString(a1, 0);
  if (String)
  {
    v7 = String;
    if (CFStringGetLength(String) < 1)
    {
      v12 = CFRetain(a1);
      Component = 0;
      *a3 = v12;
    }
    else
    {
      StringMinusParam = FigCFHTTPCreateQueryStringMinusParam(v7, a2);
      if (StringMinusParam)
      {
        v9 = StringMinusParam;
        Component = FigCFHTTPCreateURLReplacingQueryComponent(a1, StringMinusParam, a3);
        CFRelease(v9);
      }
      else
      {
        Component = FigSignalErrorAt();
      }
    }
    CFRelease(v7);
  }
  else
  {
    v11 = CFRetain(a1);
    Component = 0;
    *a3 = v11;
  }
  return Component;
}

uint64_t FigCFHTTPGetPriorityFromHTTPResponse(__CFHTTPMessage *a1, _DWORD *a2)
{
  __CFHTTPMessage *v3;
  const char *CStringPtrAndBufferToFree;
  uint64_t v5;
  int v7;

  v7 = 0;
  if (a1 && (a1 = (__CFHTTPMessage *)CFHTTPMessageCopyHeaderFieldValue(a1, CFSTR("Priority"))) != 0)
  {
    v3 = a1;
    CStringPtrAndBufferToFree = (const char *)FigCFStringGetCStringPtrAndBufferToFree();
    if (sscanf(CStringPtrAndBufferToFree, "u=%d", &v7) == 1)
    {
      *a2 = v7;
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    CFRelease(v3);
    a1 = 0;
  }
  else
  {
    v5 = 0;
  }
  free(a1);
  return v5;
}

BOOL FigCFHTTPURLHostEqual(const __CFURL *a1, const __CFURL *a2)
{
  _BOOL8 v2;
  CFStringRef v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;

  v2 = 0;
  if (a1 && a2)
  {
    v4 = CFURLCopyHostName(a1);
    if (v4)
    {
      v5 = v4;
      v6 = CFURLCopyHostName(a2);
      if (v6)
      {
        v7 = v6;
        v2 = CFStringCompare(v5, v6, 1uLL) == kCFCompareEqualTo;
        CFRelease(v5);
        v5 = v7;
      }
      else
      {
        v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t FigCFHTTPCreateURLWithHostReplacement(CFURLRef relativeURL, uint64_t a2, CFURLRef *a3)
{
  const __CFURL *v6;
  const __CFURL *v7;
  CFIndex v8;
  CFRange v9;
  void *v10;
  const __CFAllocator *v11;
  CFStringRef v12;
  CFStringRef v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  CFURLRef v17;
  uint64_t v18;
  const __CFURL *v20;

  if (!a3)
    return 0;
  *a3 = 0;
  if (!relativeURL)
    return 0;
  v6 = CFURLCopyAbsoluteURL(relativeURL);
  if (v6)
  {
    v7 = v6;
    v8 = CFURLGetBytes(v6, 0, 0);
    v9 = CFURLGetByteRangeForComponent(v7, kCFURLComponentHost, 0);
    if (v8 < 1 || v9.length <= 0)
    {
      v20 = (const __CFURL *)CFRetain(relativeURL);
      v10 = 0;
      v18 = 0;
      *a3 = v20;
LABEL_37:
      free(v10);
LABEL_30:
      CFRelease(v7);
      return v18;
    }
    v10 = malloc_type_malloc(v8, 0xB8865729uLL);
    if (!v10 || CFURLGetBytes(v7, (UInt8 *)v10, v8) != v8)
    {
LABEL_36:
      v18 = FigSignalErrorAt();
      goto LABEL_37;
    }
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v9.location < 1)
    {
      v12 = 0;
    }
    else
    {
      v12 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v10, v9.location, 0x600u, 0);
      if (!v12)
        goto LABEL_36;
    }
    if (v8 <= v9.location + v9.length)
    {
      v13 = 0;
    }
    else
    {
      v13 = CFStringCreateWithBytes(v11, (const UInt8 *)v10 + v9.location + v9.length, v8 - (v9.location + v9.length), 0x600u, 0);
      if (!v13)
      {
        v14 = 0;
        goto LABEL_32;
      }
    }
    v15 = &stru_1E2FD85F8;
    if (v12)
      v16 = v12;
    else
      v16 = &stru_1E2FD85F8;
    if (v13)
      v15 = v13;
    v14 = CFStringCreateWithFormat(v11, 0, CFSTR("%@%@%@"), v16, a2, v15);
    if (v14)
    {
      v17 = CFURLCreateWithString(v11, v14, 0);
      *a3 = v17;
      if (v17)
      {
        v18 = 0;
LABEL_24:
        free(v10);
        if (v12)
          CFRelease(v12);
        if (v13)
          CFRelease(v13);
        if (v14)
          CFRelease(v14);
        goto LABEL_30;
      }
    }
LABEL_32:
    v18 = FigSignalErrorAt();
    goto LABEL_24;
  }
  return FigSignalErrorAt();
}

uint64_t FigCFHTTPCreatePropertyListFromJSON(uint64_t a1, CFTypeRef *a2)
{
  void *v4;
  const void *v5;
  uint64_t v6;

  v4 = (void *)MEMORY[0x19403137C]();
  if (a1
    && (v5 = (const void *)objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", a1, 0, 0)) != 0)
  {
    v6 = 0;
    *a2 = CFRetain(v5);
  }
  else
  {
    v6 = 4294954410;
  }
  objc_autoreleasePoolPop(v4);
  return v6;
}

uint64_t MTGetCaption2015Behavior()
{
  return 0;
}

uint64_t MTEnableCaption2015Behavior()
{
  return 0;
}

uint64_t FigCFHTTPCopyPathComponentRelativeToURL(void *a1, void *a2, _QWORD *a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = (void *)MEMORY[0x19403137C]();
  v7 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (!objc_msgSend((id)objc_msgSend(a1, "scheme"), "isEqual:", objc_msgSend(a2, "scheme"))
    || !objc_msgSend((id)objc_msgSend(a1, "host"), "isEqual:", objc_msgSend(a2, "host"))
    || (v8 = objc_msgSend(a1, "port"), v8 != objc_msgSend(a2, "port")))
  {
    v9 = 0;
    v10 = 0;
    goto LABEL_28;
  }
  v9 = (void *)objc_msgSend((id)objc_msgSend(a1, "pathComponents"), "mutableCopy");
  v10 = (void *)objc_msgSend((id)objc_msgSend(a2, "pathComponents"), "mutableCopy");
  if ((unint64_t)objc_msgSend(v9, "count") < 2)
  {
LABEL_28:
    v20 = 4294954633;
    goto LABEL_26;
  }
  if (FigCFHTTPIsHTTPBasedURL((const __CFURL *)a2) && !objc_msgSend(v10, "count"))
    objc_msgSend(v10, "addObject:", CFSTR("/"));
  v22 = a3;
  v11 = objc_msgSend(v9, "lastObject");
  objc_msgSend(v9, "removeLastObject");
  while (objc_msgSend(v9, "count")
       && objc_msgSend(v10, "count")
       && objc_msgSend((id)objc_msgSend(v9, "firstObject"), "isEqual:", objc_msgSend(v10, "firstObject")))
  {
    objc_msgSend(v9, "removeObjectAtIndex:", 0);
    objc_msgSend(v10, "removeObjectAtIndex:", 0);
  }
  v12 = v6;
  v13 = objc_msgSend(v10, "count");
  if (v13 - 1 >= 1)
  {
    v14 = v13;
    do
    {
      objc_msgSend(v7, "addObject:", CFSTR(".."));
      --v14;
    }
    while (v14 > 1);
  }
  objc_msgSend(v7, "addObjectsFromArray:", v9);
  v15 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v16 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v24;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(v7);
        objc_msgSend(v15, "appendString:", *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * v19));
        objc_msgSend(v15, "appendString:", CFSTR("/"));
        ++v19;
      }
      while (v17 != v19);
      v17 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v17);
  }
  if (v11)
    objc_msgSend(v15, "appendString:", v11);
  v20 = 0;
  *v22 = v15;
  v6 = v12;
LABEL_26:

  objc_autoreleasePoolPop(v6);
  return v20;
}

uint64_t FigCFHTTPCreatePercentEncodedString(void *a1, int a2, _QWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = (void *)MEMORY[0x19403137C]();
  switch(a2)
  {
    case 1:
      v7 = objc_msgSend(MEMORY[0x1E0CB3500], "URLUserAllowedCharacterSet");
      goto LABEL_9;
    case 2:
      v7 = objc_msgSend(MEMORY[0x1E0CB3500], "URLPasswordAllowedCharacterSet");
      goto LABEL_9;
    case 3:
      v7 = objc_msgSend(MEMORY[0x1E0CB3500], "URLHostAllowedCharacterSet");
      goto LABEL_9;
    case 4:
      v7 = objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet");
      goto LABEL_9;
    case 5:
      v7 = objc_msgSend(MEMORY[0x1E0CB3500], "URLQueryAllowedCharacterSet");
      goto LABEL_9;
    case 6:
      v7 = objc_msgSend(MEMORY[0x1E0CB3500], "URLFragmentAllowedCharacterSet");
LABEL_9:
      v9 = (id)objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:", v7);
      v8 = 0;
      *a3 = v9;
      break;
    default:
      v8 = 4294954516;
      break;
  }
  objc_autoreleasePoolPop(v6);
  return v8;
}

CMTimebaseRef createTimebaseWithMasterClock_0(uint64_t a1, OpaqueCMClock *HostTimeClock)
{
  const __CFAllocator *v3;
  CMTimebaseRef result;
  CMTimebaseRef timebaseOut;

  timebaseOut = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!HostTimeClock)
    HostTimeClock = CMClockGetHostTimeClock();
  result = (CMTimebaseRef)CMTimebaseCreateWithSourceClock(v3, HostTimeClock, &timebaseOut);
  if (!(_DWORD)result)
  {
    if (timebaseOut)
    {
      fcrTrigger_setTimebase(a1, timebaseOut);
      *(_BYTE *)(a1 + 88) = 0;
      result = timebaseOut;
      if (!timebaseOut)
        return result;
      CFRelease(timebaseOut);
    }
    return 0;
  }
  return result;
}

uint64_t FigCaptionRendererTriggerSetTimebase(uint64_t a1, const void *a2)
{
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
  {
    fcrTrigger_setTimebase(a1, a2);
    *(_BYTE *)(a1 + 88) = 1;
  }
  return 0;
}

void fcrTrigger_setTimebase(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v2;
  const void *v5;

  v2 = *(CFTypeRef *)(a1 + 80);
  if (v2 != cf)
  {
    if (v2)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      v5 = *(const void **)(a1 + 80);
      *(_QWORD *)(a1 + 80) = cf;
      CFRetain(cf);
      if (v5)
        CFRelease(v5);
    }
    else
    {
      *(_QWORD *)(a1 + 80) = cf;
      CFRetain(cf);
    }
    if (*(_QWORD *)(a1 + 80))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
    }
  }
}

NSObject *FigCaptionRendererTriggerScheduleEvent(uint64_t a1, uint64_t a2, __int128 *a3)
{
  NSObject *result;
  _QWORD context[2];
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v9 = 0;
  if (!a1)
    return FigSignalErrorAt();
  result = *(NSObject **)(a1 + 104);
  if (result)
  {
    context[0] = a1;
    context[1] = a2;
    v6 = *a3;
    v7 = *((_QWORD *)a3 + 2);
    v8 = &v9;
    dispatch_sync_f(result, context, (dispatch_function_t)scheduleEventDo_0);
    return v9;
  }
  return result;
}

uint64_t scheduleEventDo_0(uint64_t *a1)
{
  uint64_t v2;
  OpaqueCMTimebase *v3;
  double Seconds;
  CFNumberRef v5;
  uint64_t result;
  _DWORD *v7;
  double v8;
  CMTime v9;
  CMTime time;
  CMTime v11;

  v2 = *a1;
  v11 = *(CMTime *)(a1 + 2);
  v3 = *(OpaqueCMTimebase **)(v2 + 80);
  if (v3)
  {
    if (CMTimebaseGetRate(v3) != 0.0 && !FigCDSTimerIsOn(*(_QWORD *)(v2 + 40)))
      FigCaptionRendererTimerStart(*(_QWORD *)(v2 + 40));
    time = v11;
    Seconds = CMTimeGetSeconds(&time);
    memset(&v9, 0, sizeof(v9));
    CMTimebaseGetTime(&v9, *(CMTimebaseRef *)(v2 + 80));
    time = v9;
    v8 = Seconds - CMTimeGetSeconds(&time);
    v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCGFloatType, &v8);
    CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 96), v5);
    CFRelease(v5);
    result = 0;
  }
  else
  {
    result = FigSignalErrorAt();
  }
  v7 = (_DWORD *)a1[5];
  if (v7)
    *v7 = result;
  return result;
}

uint64_t FigCaptionRendererTriggerCreate(OpaqueCMClock *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  const __CFAllocator *v12;
  uint64_t Instance;
  uint64_t v14;
  CFMutableArrayRef Mutable;
  uint64_t v16;
  CMTime v18;
  char label[256];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *a6 = 0;
  if (a2 < 1)
    return 4294950096;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MEMORY[0x19402F294](&FigCaptionRendererTriggerLocalGetTypeID_sRegisterFigCaptionRendererTriggerOnce, RegisterFigCaptionRendererTriggerClass);
  Instance = _CFRuntimeCreateInstance();
  *(_WORD *)(Instance + 88) = 0;
  *(_BYTE *)(Instance + 90) = 0;
  CMTimeMake(&v18, 0, 1);
  *(CMTime *)(Instance + 52) = v18;
  if (a3 | a4)
  {
    if (a5)
    {
      *(_QWORD *)(Instance + 24) = a3;
      *(_QWORD *)(Instance + 32) = a4;
      v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)(Instance + 16) = v14;
      if (!v14)
      {
        v16 = FigSignalErrorAt();
        goto LABEL_9;
      }
    }
  }
  Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(Instance + 96) = Mutable;
  if (!Mutable)
  {
    v16 = 0;
    goto LABEL_9;
  }
  createTimebaseWithMasterClock_0(Instance, a1);
  __sprintf_chk(label, 0, 0x100uLL, "com.apple.cktrigger._jobQueue<%p>", (const void *)Instance);
  *(_QWORD *)(Instance + 104) = dispatch_queue_create(label, 0);
  *(_DWORD *)(Instance + 48) = a2;
  v16 = FigCaptionRendererTimerCreate(a2, (uint64_t)onTimerTimeout_0, Instance, (uint64_t *)(Instance + 40));
  if ((_DWORD)v16)
  {
LABEL_9:
    CFRelease((CFTypeRef)Instance);
    return v16;
  }
  *a6 = Instance;
  return v16;
}

void onTimerTimeout_0(uint64_t a1)
{
  _QWORD *v2;
  OpaqueCMTimebase *v3;
  uint64_t v4;
  const void *v5;
  void (*v6)(CMTime *, uint64_t);
  CMTime v7;
  CMTime v8;

  if (*(_QWORD *)(a1 + 104))
  {
    v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (!v2)
      return;
    *v2 = a1;
    dispatch_sync_f(*(dispatch_queue_t *)(a1 + 104), v2, (dispatch_function_t)onTimerTimeoutDo_0);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = *(OpaqueCMTimebase **)(a1 + 80);
    if (v3)
    {
      memset(&v8, 0, sizeof(v8));
      CMTimebaseGetTime(&v8, v3);
      v4 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v4)
      {
        v5 = (const void *)v4;
        v6 = *(void (**)(CMTime *, uint64_t))(a1 + 32);
        v7 = v8;
        v6(&v7, v4);
        CFRelease(v5);
      }
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

uint64_t RegisterFigCaptionRendererTriggerClass()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigCaptionRendererTriggerID = result;
  return result;
}

double FigCaptionRendererTriggerInit(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FigCaptionRendererTrigger_Finalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  dispatch_release(*(dispatch_object_t *)(a1 + 104));
  v2 = *(const void **)(a1 + 96);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    CFRelease(v3);
  if (*(_QWORD *)(a1 + 80))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (!*(_BYTE *)(a1 + 88))
      CMTimebaseSetRate(*(CMTimebaseRef *)(a1 + 80), 0.0);
    v4 = *(const void **)(a1 + 80);
    if (v4)
      CFRelease(v4);
  }
  v5 = *(const void **)(a1 + 16);
  if (v5)
    CFRelease(v5);
}

__CFString *FigCaptionRendererTriggerCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<FigCaptionRendererTrigger %p>"), a1);
  return Mutable;
}

void fcrTrigger_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
  float Rate;

  Rate = CMTimebaseGetRate(*(CMTimebaseRef *)(a2 + 80));
  if (Rate == 0.0 && !*(_BYTE *)(a2 + 90))
  {
    FigCDSTriggerPause(a2);
  }
  else if (Rate != 0.0)
  {
    if (*(_BYTE *)(a2 + 90))
      FigCDSTriggerResume(a2);
  }
}

void onTimerTimeoutDo_0(uint64_t *a1)
{
  uint64_t v2;
  CFIndex v3;
  int v4;
  int v5;
  const __CFAllocator *v6;
  const __CFNumber *ValueAtIndex;
  CFNumberRef v8;
  OpaqueCMTimebase *v9;
  uint64_t v10;
  const void *v11;
  void (*v12)(_QWORD, CMTime *, uint64_t);
  CMTime v13;
  CMTime valuePtr;

  v2 = *a1;
  if (!*(_BYTE *)(*a1 + 90))
  {
    if (!CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) && FigCDSTimerIsOn(*(_QWORD *)(v2 + 40)))
      FigCDSTimerStop(*(_QWORD *)(v2 + 40));
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) >= 1)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      do
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 96), v3);
        valuePtr.value = 0;
        CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, &valuePtr);
        if (*(double *)&valuePtr.value <= 0.0)
        {
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3);
          --v4;
          v5 = 1;
        }
        else
        {
          *(double *)&valuePtr.value = *(double *)&valuePtr.value + (double)*(int *)(v2 + 48) / -1000.0;
          v8 = CFNumberCreate(v6, kCFNumberCGFloatType, &valuePtr);
          CFArraySetValueAtIndex(*(CFMutableArrayRef *)(v2 + 96), v3, v8);
          CFRelease(v8);
        }
        v3 = ++v4;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(v2 + 96)) > v4);
      if (v5 && *(_QWORD *)(v2 + 24))
      {
        v9 = *(OpaqueCMTimebase **)(v2 + 80);
        if (v9)
        {
          memset(&valuePtr, 0, sizeof(valuePtr));
          CMTimebaseGetTime(&valuePtr, v9);
          v10 = FigCFWeakReferenceHolderCopyReferencedObject();
          if (v10)
          {
            v11 = (const void *)v10;
            v12 = *(void (**)(_QWORD, CMTime *, uint64_t))(v2 + 24);
            v13 = valuePtr;
            v12(0, &v13, v10);
            CFRelease(v11);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
  free(a1);
}

uint64_t FigStreamingCacheGetTypeID()
{
  if (sRegisterFigStreamingCacheTypeOnce != -1)
    dispatch_once_f(&sRegisterFigStreamingCacheTypeOnce, 0, (dispatch_function_t)RegisterFigStreamingCacheType);
  return sFigStreamingCacheID;
}

uint64_t RegisterFigStreamingCacheType()
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  sFigStreamingCacheID = result;
  return result;
}

uint64_t FigStreamingCacheSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  Boolean Value;
  uint64_t v9;

  if (a1 && a2)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272))
    {
      if (CFEqual(a2, CFSTR("FSC_MinOverlappedDuration")))
      {
        if (a3)
        {
          v6 = CFGetTypeID(a3);
          if (v6 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, (void *)(a1 + 80));
LABEL_15:
            v9 = 0;
            goto LABEL_16;
          }
        }
      }
      else
      {
        if (!CFEqual(a2, CFSTR("FSC_IsDonor")))
          goto LABEL_15;
        if (a3)
        {
          v7 = CFGetTypeID(a3);
          if (v7 == CFBooleanGetTypeID() && (*(_BYTE *)(a1 + 220) & 2) == 0 && *(_QWORD *)(a1 + 136))
          {
            Value = CFBooleanGetValue((CFBooleanRef)a3);
            v9 = 0;
            *(_BYTE *)(a1 + 144) = Value;
LABEL_16:
            MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
            return v9;
          }
        }
      }
    }
    v9 = FigSignalErrorAt();
    goto LABEL_16;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheCopyProperty(uint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  CFTypeRef v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t *);
  uint64_t v14;
  uint64_t v15;

  if (a1 && a2 && a4)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
    {
      v14 = FigSignalErrorAt();
    }
    else
    {
      if (CFEqual(a2, CFSTR("FSC_DownloadDestinationURL")))
      {
        v7 = *(CFTypeRef *)(a1 + 40);
        if (!v7)
        {
LABEL_8:
          v8 = 0;
          *a4 = v7;
LABEL_15:
          MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
          return v8;
        }
LABEL_7:
        v7 = CFRetain(v7);
        goto LABEL_8;
      }
      if (CFEqual(a2, CFSTR("FSC_IsDiskBacked")))
      {
        v8 = 0;
        if ((*(_DWORD *)(a1 + 220) & 2) != 0)
          v9 = (uint64_t *)MEMORY[0x1E0C9AE50];
        else
          v9 = (uint64_t *)MEMORY[0x1E0C9AE40];
        v10 = *v9;
        goto LABEL_14;
      }
      if (CFEqual(a2, CFSTR("FSC_CacheBundleURL")))
      {
        v7 = *(CFTypeRef *)(a1 + 56);
        if (!v7)
          goto LABEL_8;
        goto LABEL_7;
      }
      if (!CFEqual(a2, CFSTR("FSC_OfflineInterstitialURLs")))
      {
        v8 = 4294954512;
        goto LABEL_15;
      }
      v15 = 0;
      v12 = *(_QWORD *)(a1 + 280);
      if (!v12)
      {
        v10 = 0;
        goto LABEL_26;
      }
      v13 = *(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 160);
      if (!v13)
      {
        v8 = 4294954514;
        goto LABEL_15;
      }
      v14 = v13(v12, &v15);
      if (!(_DWORD)v14)
      {
        v10 = v15;
LABEL_26:
        v8 = 0;
LABEL_14:
        *a4 = v10;
        goto LABEL_15;
      }
    }
    v8 = v14;
    goto LABEL_15;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheSetMasterPlaylist(uint64_t a1, const void *a2, const void *a3)
{
  const void *v6;
  const void *v7;
  uint64_t v8;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    v8 = FigSignalErrorAt();
  }
  else
  {
    v6 = *(const void **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = a2;
    if (a2)
      CFRetain(a2);
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = a3;
    if (a3)
      CFRetain(a3);
    if (v7)
      CFRelease(v7);
    if ((*(_BYTE *)(a1 + 220) & 2) != 0)
    {
      CFRetain((CFTypeRef)a1);
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), (void *)a1, (dispatch_function_t)sc_WriteMasterPlaylistToDiskDispatchFunction);
    }
    v8 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v8;
}

uint64_t sc_WriteMasterPlaylistToDiskDispatchFunction(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, const __CFString *, const __CFString *, uint64_t, uint64_t);
  int v6;
  int v8;

  v8 = 0;
  MEMORY[0x19402EA0C](a1[2]);
  if (sc_UpgradePersistentStoreForWriting((uint64_t)a1, &v8))
    goto LABEL_10;
  if (!a1[15])
  {
    v2 = 0;
LABEL_6:
    v3 = a1[35];
    v4 = a1[20];
    v5 = *(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v5)
    {
      v6 = v5(v3, CFSTR("NetworkPlaylist"), CFSTR("master.m3u8"), v4, v2);
      sc_RestorePersistentStoreLockStatus((uint64_t)a1, v8);
      if (!v6)
        goto LABEL_11;
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (!sc_EnsureMasterPlaylistNetworkURLIsSetOnPersistentStore((uint64_t)a1))
  {
    v2 = a1[15];
    goto LABEL_6;
  }
LABEL_9:
  sc_RestorePersistentStoreLockStatus((uint64_t)a1, v8);
LABEL_10:
  sc_SendDiskWriteErrorNotification();
LABEL_11:
  MEMORY[0x19402EA24](a1[2]);
  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheCopyMasterPlaylist(uint64_t a1, unint64_t a2, unint64_t a3)
{
  CFTypeRef v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, const __CFString *, uint64_t, _QWORD, CFTypeRef *, CFTypeRef *);
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  CFTypeRef v12;
  const void *v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v17;
  CFTypeRef cf;

  v17 = 0;
  cf = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (a2 | a3)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
    {
      v10 = FigSignalErrorAt();
    }
    else
    {
      if (!a2)
        goto LABEL_23;
      v6 = *(CFTypeRef *)(a1 + 120);
      if (v6)
        goto LABEL_21;
      if ((*(_BYTE *)(a1 + 220) & 2) == 0 || (v7 = *(_QWORD *)(a1 + 280)) == 0)
      {
LABEL_20:
        v6 = *(CFTypeRef *)(a1 + 120);
        if (!v6)
        {
LABEL_22:
          *(_QWORD *)a2 = v6;
LABEL_23:
          if (a3)
          {
            v15 = *(CFTypeRef *)(a1 + 160);
            if (v15)
              v15 = CFRetain(v15);
            v10 = 0;
            *(_QWORD *)a3 = v15;
            goto LABEL_28;
          }
          goto LABEL_27;
        }
LABEL_21:
        v6 = CFRetain(v6);
        goto LABEL_22;
      }
      if (*(_QWORD *)(a1 + 128))
      {
LABEL_27:
        v10 = 0;
        goto LABEL_28;
      }
      v8 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD, CFTypeRef *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
      if (v8)
      {
        v9 = v8(v7, CFSTR("NetworkPlaylist"), a1 + 128, 0, &cf, &v17);
        if ((_DWORD)v9 != -16913)
        {
          v10 = v9;
          if ((_DWORD)v9)
            goto LABEL_28;
          v11 = *(const void **)(a1 + 160);
          v12 = cf;
          *(_QWORD *)(a1 + 160) = cf;
          if (v12)
            CFRetain(v12);
          if (v11)
            CFRelease(v11);
          v13 = *(const void **)(a1 + 120);
          v14 = v17;
          *(_QWORD *)(a1 + 120) = v17;
          if (v14)
            CFRetain(v14);
          if (v13)
            CFRelease(v13);
        }
        goto LABEL_20;
      }
      v10 = 4294954514;
    }
LABEL_28:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    if (cf)
      CFRelease(cf);
    goto LABEL_30;
  }
  v10 = FigSignalErrorAt();
LABEL_30:
  if (v17)
    CFRelease(v17);
  return v10;
}

uint64_t FigStreamingCacheCopyStreamNetworkURL(uint64_t a1, CFURLRef *a2)
{
  const __CFAllocator *AllocatorForMedia;
  CFURLRef v5;
  uint64_t v6;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272)
    || (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v5 = CFURLCreateWithString(AllocatorForMedia, *(CFStringRef *)(a1 + 24), 0),
        (*a2 = v5) == 0))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    v6 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v6;
}

uint64_t FigStreamingCacheAddMediaMap(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, const void *a6)
{
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v12;
  CFStringRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const void *v20;
  uint64_t valuePtr;

  valuePtr = a5;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if ((a4 & 0x8000000000000000) == 0)
        {
          if (a6)
          {
            AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            v12 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%@-%lld"), a3, a4);
            if (v12)
            {
              v13 = v12;
              v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
              if (!v14)
              {
                v17 = FigSignalErrorAt();
                v20 = v13;
                goto LABEL_18;
              }
              v15 = v14;
              MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
              if (!*(_BYTE *)(a1 + 272))
              {
                v16 = *(_QWORD *)(a1 + 168);
                if (v16)
                {
                  while (v16 != a2)
                  {
                    v16 = *(_QWORD *)(v16 + 8);
                    if (!v16)
                      goto LABEL_12;
                  }
                  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 144), v13, a6);
                  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 152), v15, a6);
                  if ((*(_BYTE *)(a1 + 220) & 2) == 0)
                    goto LABEL_16;
                  v18 = malloc_type_malloc(0x40uLL, 0x10600402F6BEFCEuLL);
                  if (v18)
                  {
                    v19 = v18;
                    *v18 = CFRetain((CFTypeRef)a1);
                    v19[1] = a2;
                    v19[3] = CFRetain(a3);
                    v19[4] = a4;
                    v19[5] = CFRetain(v15);
                    v19[6] = CFRetain(v13);
                    dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v19, (dispatch_function_t)sc_WriteMediaMapToDiskDispatchFunction);
LABEL_16:
                    v17 = 0;
                    goto LABEL_17;
                  }
                }
              }
LABEL_12:
              v17 = FigSignalErrorAt();
LABEL_17:
              MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
              CFRelease(v13);
              v20 = v15;
LABEL_18:
              CFRelease(v20);
              return v17;
            }
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t sc_WriteMediaMapToDiskDispatchFunction(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  const void *v10;
  const void *v11;
  uint64_t v13;
  int MapBBufFromStreamMediaMapDictionary;
  CFTypeRef v15;
  unsigned int (*v16)(CFTypeRef, CFTypeRef, uint64_t, uint64_t, const void *, void **);
  int v17;
  void *value;
  CFTypeRef cf;

  v2 = *a1;
  v3 = a1[1];
  value = 0;
  cf = 0;
  v4 = a1[3];
  v5 = a1[4];
  v6 = (const void *)a1[5];
  v7 = (const void *)a1[6];
  MEMORY[0x19402EA0C](*(_QWORD *)(v2 + 16));
  if (*(_BYTE *)(v2 + 272))
  {
    MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
    goto LABEL_3;
  }
  v13 = *(_QWORD *)(v2 + 168);
  if (v13)
  {
    while (v13 != v3)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        goto LABEL_18;
    }
    v8 = CFRetain(*(CFTypeRef *)(v3 + 128));
  }
  else
  {
LABEL_18:
    v3 = 0;
    v8 = 0;
  }
  MapBBufFromStreamMediaMapDictionary = sc_GetMapBBufFromStreamMediaMapDictionary(v3, v7, v6, 0, &cf);
  if (MapBBufFromStreamMediaMapDictionary)
    goto LABEL_33;
  MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
  if (!v8)
  {
LABEL_3:
    v8 = 0;
    if (!FigSignalErrorAt())
      goto LABEL_4;
    goto LABEL_28;
  }
  v15 = cf;
  v16 = *(unsigned int (**)(CFTypeRef, CFTypeRef, uint64_t, uint64_t, const void *, void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
  if (!v16 || v16(v8, v15, v4, v5, v6, &value))
    goto LABEL_28;
  MEMORY[0x19402EA0C](*(_QWORD *)(v2 + 16));
  if (*(_BYTE *)(v2 + 272))
  {
    MapBBufFromStreamMediaMapDictionary = FigSignalErrorAt();
LABEL_33:
    v17 = MapBBufFromStreamMediaMapDictionary;
    goto LABEL_27;
  }
  v17 = stream_SetNeedsToCommitPersistentStreamInfo((_BYTE *)v3);
  if (!v17)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 160), v7, value);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v3 + 168), v6, value);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 144), v7);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v3 + 152), v6);
  }
LABEL_27:
  MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
  if (!v17)
  {
LABEL_4:
    if (!v8)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_28:
  MEMORY[0x19402EA0C](*(_QWORD *)(v2 + 16));
  if (!*(_BYTE *)(v2 + 272))
    sc_SendDiskWriteErrorNotification();
  MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
  if (v8)
LABEL_5:
    CFRelease(v8);
LABEL_6:
  if (cf)
    CFRelease(cf);
  v9 = (const void *)a1[5];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[3];
  if (v10)
    CFRelease(v10);
  v11 = (const void *)a1[6];
  if (v11)
    CFRelease(v11);
  free(a1);
  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheCopyMediaMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v12;
  CFStringRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t MapBBufFromStreamMediaMapDictionary;
  uint64_t Value;
  const void *v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, _QWORD *);
  CFNumberRef v23;
  uint64_t valuePtr;

  v23 = 0;
  valuePtr = a5;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if ((a4 & 0x8000000000000000) == 0)
        {
          if (a6)
          {
            AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
            v12 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%@-%lld"), a3, a4, v23, valuePtr);
            if (v12)
            {
              v13 = v12;
              v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
              if (!v14)
              {
                Value = FigSignalErrorAt();
                v19 = v13;
                goto LABEL_19;
              }
              v15 = v14;
              MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
              if (*(_BYTE *)(a1 + 272) || (v16 = *(_QWORD *)(a1 + 168)) == 0)
              {
LABEL_12:
                MapBBufFromStreamMediaMapDictionary = FigSignalErrorAt();
              }
              else
              {
                while (v16 != a2)
                {
                  v16 = *(_QWORD *)(v16 + 8);
                  if (!v16)
                    goto LABEL_12;
                }
                MapBBufFromStreamMediaMapDictionary = sc_GetMapBBufFromStreamMediaMapDictionary(a2, v13, v15, &v23, a6);
                if (!(_DWORD)MapBBufFromStreamMediaMapDictionary)
                {
                  if (*a6 || (*(_BYTE *)(a1 + 220) & 2) == 0)
                  {
                    Value = 0;
                    goto LABEL_18;
                  }
                  Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 160), v13);
                  v23 = (CFNumberRef)v13;
                  if (!Value)
                  {
                    Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 168), v15);
                    v23 = v15;
                    if (!Value)
                      goto LABEL_18;
                  }
                  v21 = *(_QWORD *)(a2 + 128);
                  v22 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 88);
                  if (!v22)
                  {
                    Value = 4294954514;
                    goto LABEL_18;
                  }
                  MapBBufFromStreamMediaMapDictionary = v22(v21, Value, a6);
                }
              }
              Value = MapBBufFromStreamMediaMapDictionary;
LABEL_18:
              MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
              CFRelease(v13);
              v19 = v15;
LABEL_19:
              CFRelease(v19);
              return Value;
            }
          }
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t sc_GetMapBBufFromStreamMediaMapDictionary(uint64_t a1, const void *a2, const void *a3, _QWORD *a4, _QWORD *a5)
{
  const void *v8;
  const void *Value;
  CFTypeRef v11;
  const void *v13;

  if (a5)
  {
    v8 = a2;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 144), a2);
    if (Value)
    {
      v11 = CFRetain(Value);
      *a5 = v11;
      if (v11)
      {
        if (!a4)
          return 0;
LABEL_5:
        *a4 = v8;
        return 0;
      }
    }
    else
    {
      *a5 = 0;
    }
    v13 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 152), a3);
    if (v13)
      v13 = CFRetain(v13);
    *a5 = v13;
    v8 = a3;
    if (!a4)
      return 0;
    goto LABEL_5;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheRemoveMediaMap(uint64_t a1, CFMutableDictionaryRef *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v10;
  CFStringRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const void *Value;
  CFTypeRef v19;
  const void *v20;
  _QWORD *v21;
  uint64_t valuePtr;

  valuePtr = a5;
  if (a1)
  {
    if (a3)
    {
      if ((a4 & 0x8000000000000000) == 0)
      {
        AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        v10 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%@-%lld"), a3, a4);
        if (v10)
        {
          v11 = v10;
          v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
          if (!v12)
          {
            v15 = FigSignalErrorAt();
            v16 = v11;
            goto LABEL_13;
          }
          v13 = v12;
          MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
          if (*(_BYTE *)(a1 + 272) || (v14 = *(_QWORD *)(a1 + 168)) == 0)
          {
LABEL_10:
            v15 = FigSignalErrorAt();
          }
          else
          {
            while ((CFMutableDictionaryRef *)v14 != a2)
            {
              v14 = *(_QWORD *)(v14 + 8);
              if (!v14)
                goto LABEL_10;
            }
            CFDictionaryRemoveValue(a2[18], v11);
            CFDictionaryRemoveValue(a2[19], v13);
            if ((*(_BYTE *)(a1 + 220) & 2) != 0)
            {
              Value = CFDictionaryGetValue(a2[20], v11);
              if (!Value || (v19 = CFRetain(Value)) == 0)
              {
                v20 = CFDictionaryGetValue(a2[21], v13);
                if (v20)
                  v19 = CFRetain(v20);
                else
                  v19 = 0;
              }
              CFDictionaryRemoveValue(a2[20], v11);
              CFDictionaryRemoveValue(a2[21], v13);
              v21 = malloc_type_malloc(0x40uLL, 0x10600402F6BEFCEuLL);
              *v21 = CFRetain((CFTypeRef)a1);
              v21[1] = a2;
              v21[6] = CFRetain(v11);
              v21[5] = CFRetain(v13);
              if (v19)
              {
                v21[7] = CFRetain(v19);
                dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v21, (dispatch_function_t)sc_DeleteMediaMapFromDiskDispatchFunction);
                MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
                CFRelease(v19);
              }
              else
              {
                v21[7] = 0;
                dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v21, (dispatch_function_t)sc_DeleteMediaMapFromDiskDispatchFunction);
                MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
              }
              v15 = 0;
              goto LABEL_12;
            }
            v15 = 0;
          }
          MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
LABEL_12:
          CFRelease(v11);
          v16 = v13;
LABEL_13:
          CFRelease(v16);
          return v15;
        }
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t sc_DeleteMediaMapFromDiskDispatchFunction(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef v5;
  uint64_t v6;
  void (*v7)(CFTypeRef, uint64_t);
  const void *v8;
  const void *v9;
  const void *v10;

  v2 = *a1;
  MEMORY[0x19402EA0C](*(_QWORD *)(*a1 + 16));
  if (*(_BYTE *)(v2 + 272) || (v3 = *(_QWORD *)(v2 + 168)) == 0)
  {
LABEL_6:
    FigSignalErrorAt();
    MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
  }
  else
  {
    v4 = a1[1];
    while (v3 != v4)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (!v3)
        goto LABEL_6;
    }
    v5 = CFRetain(*(CFTypeRef *)(v4 + 128));
    MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
    v6 = a1[7];
    v7 = *(void (**)(CFTypeRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 40);
    if (v7)
      v7(v5, v6);
    if (v5)
      CFRelease(v5);
  }
  v8 = (const void *)a1[5];
  if (v8)
    CFRelease(v8);
  v9 = (const void *)a1[7];
  if (v9)
    CFRelease(v9);
  v10 = (const void *)a1[6];
  if (v10)
    CFRelease(v10);
  free(a1);
  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheCopyCompletedMediaStreamURLs(uint64_t a1, CFArrayRef *a2, CFArrayRef *a3)
{
  uint64_t v6;
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  const __CFAllocator *v9;
  __CFArray *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, CFArrayRef *);
  uint64_t v13;
  CFIndex v14;
  const void *v15;
  CFIndex Count;
  const void *ValueAtIndex;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, const void *, char *);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, const void *, CFTypeRef *);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, const void *, CFTypeRef *);
  CFTypeRef v24;
  uint64_t v25;
  const __CFAllocator *v26;
  CFArrayRef Copy;
  const __CFAllocator *v28;
  CFArrayRef v29;
  char v31;
  CFTypeRef v32;
  CFTypeRef cf;
  int v34;
  CFArrayRef theArray;

  if (!a1)
  {
    v25 = FigSignalErrorAt();
    Mutable = 0;
    v10 = 0;
    if (!(_DWORD)v25)
      goto LABEL_40;
    goto LABEL_51;
  }
  if (!((unint64_t)a2 | (unint64_t)a3))
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    v25 = FigSignalErrorAt();
    Mutable = 0;
    v10 = 0;
    goto LABEL_39;
  }
  if ((*(_BYTE *)(a1 + 220) & 2) == 0)
  {
    Mutable = 0;
    v10 = 0;
    v25 = 0;
    goto LABEL_39;
  }
  theArray = 0;
  v34 = 0;
  v32 = 0;
  cf = 0;
  if (*(_QWORD *)(a1 + 280))
  {
    v6 = sc_UpgradePersistentStoreForWriting(a1, &v34);
    if ((_DWORD)v6)
    {
      v25 = v6;
      Mutable = 0;
    }
    else
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
      {
        v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
        v10 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
        if (v10)
        {
          v11 = *(_QWORD *)(a1 + 280);
          v12 = *(uint64_t (**)(uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
          if (!v12)
          {
LABEL_32:
            v25 = 4294954514;
            goto LABEL_33;
          }
          v13 = v12(v11, &theArray);
          if (!(_DWORD)v13)
          {
            v14 = 0;
            v15 = (const void *)*MEMORY[0x1E0C9B0D0];
            while (1)
            {
              Count = (CFIndex)theArray;
              if (theArray)
                Count = CFArrayGetCount(theArray);
              if (v14 >= Count)
                break;
              v31 = 0;
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v14);
              v18 = *(_QWORD *)(a1 + 280);
              v19 = *(uint64_t (**)(uint64_t, const void *, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                            + 64);
              if (!v19)
                goto LABEL_32;
              v13 = v19(v18, ValueAtIndex, &v31);
              if ((_DWORD)v13)
                goto LABEL_67;
              if (v31)
              {
                v20 = *(_QWORD *)(a1 + 280);
                v21 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 72);
                if (!v21)
                  goto LABEL_32;
                v13 = v21(v20, ValueAtIndex, &cf);
                if ((_DWORD)v13)
                  goto LABEL_67;
                if (!cf)
                  goto LABEL_66;
                v22 = *(_QWORD *)(a1 + 280);
                v23 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 80);
                if (!v23)
                  goto LABEL_32;
                v13 = v23(v22, ValueAtIndex, &v32);
                if ((_DWORD)v13)
                  goto LABEL_67;
                if (v32)
                  v24 = v32;
                else
                  v24 = v15;
                CFArrayAppendValue(Mutable, cf);
                CFArrayAppendValue(v10, v24);
              }
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              if (v32)
              {
                CFRelease(v32);
                v32 = 0;
              }
              ++v14;
            }
            v25 = 0;
            goto LABEL_33;
          }
        }
        else
        {
LABEL_66:
          v13 = FigSignalErrorAt();
        }
LABEL_67:
        v25 = v13;
LABEL_33:
        sc_RestorePersistentStoreLockStatus(a1, v34);
        if (cf)
          CFRelease(cf);
        goto LABEL_35;
      }
      v25 = FigSignalErrorAt();
    }
    v10 = 0;
    goto LABEL_33;
  }
  v25 = FigSignalErrorAt();
  v10 = 0;
  Mutable = 0;
LABEL_35:
  if (v32)
    CFRelease(v32);
  if (theArray)
    CFRelease(theArray);
LABEL_39:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  if (!(_DWORD)v25)
  {
LABEL_40:
    if (a2)
    {
      v26 = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (Mutable)
        Copy = CFArrayCreateCopy(v26, Mutable);
      else
        Copy = CFArrayCreate(v26, 0, 0, MEMORY[0x1E0C9B378]);
      *a2 = Copy;
    }
    if (a3)
    {
      v28 = (const __CFAllocator *)FigGetAllocatorForMedia();
      if (v10)
        v29 = CFArrayCreateCopy(v28, v10);
      else
        v29 = CFArrayCreate(v28, 0, 0, MEMORY[0x1E0C9B378]);
      *a3 = v29;
    }
  }
LABEL_51:
  if (Mutable)
    CFRelease(Mutable);
  if (v10)
    CFRelease(v10);
  return v25;
}

uint64_t FigStreamingCacheCleanupStreamsForPersisting(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  const void *v10;
  const void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v19;
  int v20;

  v20 = 0;
  if (a1 && a2)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
    {
      v16 = FigSignalErrorAt();
      v6 = 1;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 220) & 2) == 0)
      {
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        v17 = (_QWORD *)MEMORY[0x1E0C9AE50];
        goto LABEL_38;
      }
      v4 = sc_UpgradePersistentStoreForWriting(a1, &v20);
      if ((_DWORD)v4)
      {
        v16 = v4;
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        return v16;
      }
      v5 = *(_QWORD *)(a1 + 168);
      if (v5)
      {
        v6 = 1;
        while (1)
        {
          v19 = 0;
          if (stream_EnsurePersistentStreamInfo(v5, &v19))
            goto LABEL_9;
          if (*(_BYTE *)(v5 + 121))
          {
            if ((*(_BYTE *)(a1 + 220) & 2) != 0)
            {
              if (stream_UpgradePersistentStreamInfoForWriting(v5))
                goto LABEL_29;
              v7 = *(_QWORD *)(a1 + 280);
              v8 = *(_QWORD *)(v5 + 136);
              v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 88);
              if (v9)
                v9(v7, v8);
              v10 = *(const void **)(v5 + 128);
              if (v10)
              {
                CFRelease(v10);
                *(_QWORD *)(v5 + 128) = 0;
              }
              v11 = *(const void **)(v5 + 136);
              if (v11)
              {
                CFRelease(v11);
                *(_QWORD *)(v5 + 136) = 0;
              }
              *(_DWORD *)(v5 + 176) = 0;
            }
            v12 = *(_QWORD **)(v5 + 24);
            if (v12)
            {
              do
              {
                v13 = v12;
                v12 = (_QWORD *)v12[1];
              }
              while (v12);
              while (1)
              {
                segment_EvictEntry(v13, 0, 1);
                v14 = *(_QWORD **)(v5 + 24);
                if (!v14)
                  break;
                do
                {
                  v13 = v14;
                  v14 = (_QWORD *)v14[1];
                }
                while (v14);
              }
            }
          }
          else if (!*(_BYTE *)(v5 + 120))
          {
            v6 = 0;
          }
LABEL_29:
          if (v19)
          {
            if (*(_QWORD *)(v5 + 128))
            {
              v15 = stream_UnlockPersistentStreamInfoForAnything(v5);
              if ((_DWORD)v15)
              {
                v16 = v15;
                goto LABEL_34;
              }
            }
          }
LABEL_9:
          v5 = *(_QWORD *)(v5 + 8);
          if (!v5)
          {
            v16 = 0;
            goto LABEL_34;
          }
        }
      }
      v16 = 0;
      v6 = 1;
LABEL_34:
      sc_RestorePersistentStoreLockStatus(a1, v20);
    }
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    if ((_DWORD)v16)
      return v16;
    v17 = (_QWORD *)MEMORY[0x1E0C9AE50];
    if (!v6)
      v17 = (_QWORD *)MEMORY[0x1E0C9AE40];
LABEL_38:
    v16 = 0;
    *a2 = *v17;
    return v16;
  }
  return FigSignalErrorAt();
}

uint64_t sc_UpgradePersistentStoreForWriting(uint64_t a1, _DWORD *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, _QWORD);
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 220) & 2) == 0 || (*(_QWORD *)(a1 + 280) ? (v3 = a2 == 0) : (v3 = 1), v3))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    *a2 = *(_DWORD *)(a1 + 288);
    if ((*(_BYTE *)(a1 + 288) & 2) != 0)
      return 0;
    FigGetUpTimeNanoseconds();
    v4 = *(_QWORD *)(a1 + 280);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
    if (!v5)
    {
      FigGetUpTimeNanoseconds();
      return 4294954514;
    }
    v6 = v5(v4, 1, 0);
    FigGetUpTimeNanoseconds();
    if (!(_DWORD)v6)
    {
      *(_DWORD *)(a1 + 288) |= 3u;
      return v6;
    }
  }
  if ((_DWORD)v6 == -16914)
  {
    *(_DWORD *)(a1 + 288) &= 0xFFFFFFFC;
    return 4294950382;
  }
  return v6;
}

uint64_t stream_EnsurePersistentStreamInfo(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *Base32EncodedSHA1HashFromCFString;
  const __CFAllocator *v10;
  CFStringRef v11;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const __CFArray **);
  uint64_t v19;
  CFIndex v20;
  const __CFArray *v21;
  uint64_t v22;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v25;
  void (*v26)(uint64_t, const void *, CFTypeRef *);
  uint64_t v27;
  void (*v28)(uint64_t, const void *, CFArrayRef *);
  int matched;
  CFTypeRef v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, __CFDictionary *, CFStringRef);
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  CFAllocatorRef v38;
  CFAllocatorRef v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  __CFDictionary *v43;
  uint64_t (*v44)(uint64_t, const void *, __CFDictionary *, const __CFNumber **);
  uint64_t v45;
  uint64_t FigBaseObject;
  void (*v47)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v48;
  void (*v49)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *);
  uint64_t v50;
  void (*v51)(uint64_t, const __CFString *, CFAllocatorRef, const __CFNumber **);
  int v52;
  const __CFNumber *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, const __CFString *, uint64_t, const __CFArray **);
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  const void *v62;
  uint64_t (*v63)(uint64_t, const void *, const void *, uint64_t);
  uint64_t v64;
  int v65;
  const __CFAllocator *v66;
  CFNumberRef v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  const __CFAllocator *v71;
  CFMutableArrayRef v72;
  int v73;
  CFNumberRef v74;
  CFNumberRef v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, const __CFString *, uint64_t, CFArrayRef *);
  uint64_t v80;
  const __CFNumber *v81;
  CFTypeID TypeID;
  uint64_t v83;
  CFNumberRef v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **);
  uint64_t v88;
  const __CFNumber *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **);
  const __CFNumber *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  CFTypeRef v97;
  int v98;
  const void *v99;
  const void *v100;
  const __CFDictionary *v101;
  uint64_t v103;
  BOOL v104;
  _BOOL4 v105;
  BOOL v106;
  uint64_t v107;
  _BYTE *v108;
  int v109;
  __int128 context;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  BOOL v122;
  __CFDictionary *v123;
  CFTypeRef v124;
  uint64_t v125;
  uint64_t v126;
  const __CFNumber *v127;
  const __CFDictionary *v128;
  const __CFDictionary *v129;
  int valuePtr;
  CFTypeRef v131;
  CFTypeRef v132;
  CFTypeRef v133;
  const __CFNumber *v134;
  int v135;
  const __CFArray *v136;
  CFArrayRef v137[3];

  v4 = *(_QWORD *)a1;
  v109 = 0;
  v5 = sc_UpgradePersistentStoreForWriting(v4, &v109);
  if ((_DWORD)v5)
    goto LABEL_181;
  if (a2)
    *a2 = 0;
  if (*(_QWORD *)(a1 + 128))
    goto LABEL_172;
  v6 = *(const void **)(a1 + 136);
  v107 = v4;
  v108 = a2;
  if (v6)
    goto LABEL_53;
  v136 = 0;
  LODWORD(v134) = 0;
  if ((*(_BYTE *)(v4 + 220) & 2) != 0
    && (v105 = v6 != 0,
        v7 = *(unsigned int *)(a1 + 56),
        v8 = *(unsigned int *)(a1 + 80),
        (Base32EncodedSHA1HashFromCFString = (const void *)FigCreateBase32EncodedSHA1HashFromCFString()) != 0)
    && (v10 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        v11 = CFStringCreateWithFormat(v10, 0, CFSTR("%d-%d-%@"), v7, v8, Base32EncodedSHA1HashFromCFString),
        CFRelease(Base32EncodedSHA1HashFromCFString),
        v11))
  {
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, CFSTR("StreamInfoNetworkURL"), *(const void **)(a1 + 64));
      v15 = *(const void **)(a1 + 72);
      if (v15)
        CFDictionarySetValue(v14, CFSTR("StreamInfoUniqueTag"), v15);
      v16 = sc_UpgradePersistentStoreForWriting(v4, &v134);
      if (!(_DWORD)v16)
      {
        v17 = *(_QWORD *)(v4 + 280);
        v18 = *(uint64_t (**)(uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
        if (v18)
        {
          v19 = v18(v17, &v136);
          if ((_DWORD)v19)
          {
            v32 = v19;
            v31 = 0;
          }
          else
          {
            v20 = 0;
            v21 = v136;
            v22 = *(_QWORD *)a1;
            v121 = 0;
            v119 = 0u;
            v120 = 0u;
            v118 = 0u;
            v116 = 0u;
            v117 = 0u;
            v114 = 0u;
            v115 = 0u;
            v112 = 0u;
            v113 = 0u;
            context = 0u;
            v111 = 0u;
            v124 = 0;
            v137[0] = 0;
            if (!v136)
              goto LABEL_17;
LABEL_16:
            for (i = CFArrayGetCount(v21); v20 < i; i = 0)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(v21, v20);
              v25 = *(_QWORD *)(v22 + 280);
              v26 = *(void (**)(uint64_t, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                              + 72);
              if (v26)
                v26(v25, ValueAtIndex, &v124);
              v27 = *(_QWORD *)(v22 + 280);
              v28 = *(void (**)(uint64_t, const void *, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                               + 80);
              if (v28)
                v28(v27, ValueAtIndex, v137);
              *(_QWORD *)&v114 = v124;
              *((CFArrayRef *)&v114 + 1) = v137[0];
              matched = sc_MatchMediaStreamWithAttributes((_QWORD *)a1, &context, 0);
              v30 = v124;
              if (matched)
                goto LABEL_32;
              if (v124)
              {
                CFRelease(v124);
                v124 = 0;
              }
              if (v137[0])
              {
                CFRelease(v137[0]);
                v137[0] = 0;
              }
              ++v20;
              if (v21)
                goto LABEL_16;
LABEL_17:
              ;
            }
            ValueAtIndex = 0;
            v30 = v124;
LABEL_32:
            v4 = v107;
            a2 = v108;
            if (v30)
              CFRelease(v30);
            if (v137[0])
              CFRelease(v137[0]);
            if (ValueAtIndex)
            {
              CFRetain(ValueAtIndex);
              CFRelease(v11);
              v31 = 1;
LABEL_41:
              v36 = *(const void **)(a1 + 136);
              if (v36)
                CFRelease(v36);
              v32 = 0;
              v11 = 0;
              *(_QWORD *)(a1 + 136) = ValueAtIndex;
              goto LABEL_44;
            }
            v33 = *(_QWORD *)(v107 + 280);
            v34 = *(uint64_t (**)(uint64_t, __CFDictionary *, CFStringRef))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 96);
            if (v34)
            {
              v35 = v34(v33, v14, v11);
              if (!(_DWORD)v35)
              {
                v31 = 0;
                *(_DWORD *)(a1 + 176) |= 3u;
                ValueAtIndex = v11;
                goto LABEL_41;
              }
              v32 = v35;
            }
            else
            {
              v32 = 4294954514;
            }
            v31 = v105;
          }
        }
        else
        {
          v31 = 0;
          v32 = 4294954514;
        }
LABEL_44:
        sc_RestorePersistentStoreLockStatus(v4, (int)v134);
        goto LABEL_45;
      }
    }
    else
    {
      v16 = FigSignalErrorAt();
    }
    v32 = v16;
    v31 = 0;
  }
  else
  {
    v32 = FigSignalErrorAt();
    v31 = 0;
    v11 = 0;
    v14 = 0;
  }
LABEL_45:
  if (v136)
    CFRelease(v136);
  if (v11)
    CFRelease(v11);
  if (v14)
    CFRelease(v14);
  if ((_DWORD)v32)
    goto LABEL_173;
  v6 = *(const void **)(a1 + 136);
  if (v31)
  {
LABEL_53:
    v37 = *(_QWORD *)a1;
    v38 = CFGetAllocator(*(CFTypeRef *)a1);
    v133 = (CFTypeRef)*MEMORY[0x1E0C9AE40];
    v134 = 0;
    v131 = 0;
    v132 = 0;
    valuePtr = 0;
    v128 = 0;
    v129 = 0;
    v126 = 0;
    v127 = 0;
    context = 0uLL;
    *(_QWORD *)&v111 = 0;
    v124 = 0;
    v125 = 0;
    v123 = 0;
    v122 = 0;
    if ((*(_BYTE *)(v37 + 220) & 2) != 0 && (*(_BYTE *)(v37 + 288) & 1) != 0 && v6)
    {
      v39 = v38;
      v40 = sc_GetShouldDemandWriteAccessForStreamInfoCreation((uint64_t *)a1, (uint64_t)v6, &v122);
      if (!(_DWORD)v40)
      {
        v41 = v122;
        stream_CreateStreamInfoCreateOptions(v122, &v123);
        v42 = *(_QWORD *)(v37 + 280);
        v43 = v123;
        v44 = *(uint64_t (**)(uint64_t, const void *, __CFDictionary *, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 32);
        if (!v44)
          goto LABEL_149;
        v45 = v44(v42, v6, v43, &v134);
        if ((_DWORD)v45 == -16934)
        {
          v32 = 4294951654;
          goto LABEL_150;
        }
        v32 = v45;
        if ((_DWORD)v45)
          goto LABEL_150;
        FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v134);
        v47 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v47)
          v47(FigBaseObject, CFSTR("StreamInfoCompleteState"), v39, &v133);
        v48 = FigHLSPersistentStreamInfoGetFigBaseObject(v134);
        v49 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                              + 48);
        if (v49)
          v49(v48, CFSTR("StreamInfoEvictionPolicy"), v39, &v132);
        v50 = FigHLSPersistentStreamInfoGetFigBaseObject(v134);
        v51 = *(void (**)(uint64_t, const __CFString *, CFAllocatorRef, const __CFNumber **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
        if (v51)
          v51(v50, CFSTR("StreamInfoPeakBandwidth"), v39, &v127);
        if (v127)
          CFNumberGetValue(v127, kCFNumberSInt32Type, &valuePtr);
        v106 = v133 == (CFTypeRef)*MEMORY[0x1E0C9AE50];
        v52 = FigCFEqual();
        v53 = v134;
        v104 = v52 == 0;
        v136 = 0;
        v137[0] = 0;
        v54 = FigGetAllocatorForMedia();
        v55 = FigHLSPersistentStreamInfoGetFigBaseObject(v53);
        v56 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, const __CFArray **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                                 + 48);
        if (!v56)
        {
          v58 = 0;
          v32 = 4294954514;
          goto LABEL_125;
        }
        v57 = v56(v55, CFSTR("StreamInfoStreamType"), v54, &v136);
        if ((_DWORD)v57)
        {
          v32 = v57;
LABEL_124:
          v58 = 0;
LABEL_125:
          if (v137[0])
            CFRelease(v137[0]);
          if (v136)
            CFRelease(v136);
          if ((_DWORD)v32)
            goto LABEL_150;
          v86 = FigHLSPersistentStreamInfoGetFigBaseObject(v134);
          v87 = *(uint64_t (**)(uint64_t, const __CFString *, CFAllocatorRef, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v87)
            goto LABEL_149;
          v88 = v87(v86, CFSTR("StreamInfoMediaSegmentList"), v39, &v129);
          if ((_DWORD)v88)
            goto LABEL_190;
          if (!v129)
            goto LABEL_189;
          v89 = v134;
          v90 = FigGetAllocatorForMedia();
          v91 = FigHLSPersistentStreamInfoGetFigBaseObject(v89);
          v92 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, const __CFDictionary **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 48);
          if (!v92)
            goto LABEL_149;
          v88 = v92(v91, CFSTR("StreamInfoMediaInitializationSegmentList"), v90, &v128);
          if ((_DWORD)v88)
            goto LABEL_190;
          if (!v128)
          {
LABEL_189:
            v88 = FigSignalErrorAt();
            goto LABEL_190;
          }
          v93 = v134;
          v94 = FigGetAllocatorForMedia();
          v95 = FigHLSPersistentStreamInfoGetFigBaseObject(v93);
          v96 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
          if (v96)
          {
            v88 = v96(v95, CFSTR("StreamInfoMediaPlaylistNetworkURL"), v94, &v131);
            if (!(_DWORD)v88)
            {
              v97 = v131;
              if (v131)
              {
                *(_QWORD *)(a1 + 128) = v134;
                v134 = 0;
                v98 = *(_DWORD *)(a1 + 176);
                if (v41)
                  v98 |= 2u;
                *(_DWORD *)(a1 + 176) = v98 | 1;
                *(_BYTE *)(a1 + 96) = 1;
                *(_BYTE *)(a1 + 120) = v106;
                *(_BYTE *)(a1 + 121) = v104;
                *(_DWORD *)(a1 + 80) = valuePtr;
                *(_DWORD *)(a1 + 56) = v58;
                v99 = *(const void **)(a1 + 64);
                *(_QWORD *)(a1 + 64) = v97;
                CFRetain(v97);
                if (v99)
                  CFRelease(v99);
                v100 = *(const void **)(a1 + 136);
                *(_QWORD *)(a1 + 136) = v6;
                CFRetain(v6);
                if (v100)
                  CFRelease(v100);
                if (v129)
                {
                  *(_QWORD *)&context = v37;
                  *((_QWORD *)&context + 1) = a1;
                  LODWORD(v111) = 0;
                  CFDictionaryApplyFunction(v129, (CFDictionaryApplierFunction)sc_RestoreSegmentFromDiskApplierFunction, &context);
                  v32 = v111;
                  if ((_DWORD)v111)
                    goto LABEL_150;
                  v101 = v128;
                  if (!v128)
                    goto LABEL_150;
                }
                else
                {
                  v101 = v128;
                  if (!v128)
                  {
                    v32 = 0;
                    goto LABEL_150;
                  }
                }
                v124 = (CFTypeRef)v37;
                v125 = a1;
                LODWORD(v126) = 0;
                CFDictionaryApplyFunction(v101, (CFDictionaryApplierFunction)sc_RestoreMediaMapsFromDiskApplierFunction, &v124);
                v32 = v126;
LABEL_150:
                if (v43)
                  CFRelease(v43);
                v4 = v107;
                a2 = v108;
LABEL_153:
                if (v127)
                  CFRelease(v127);
                if (v133)
                  CFRelease(v133);
                if (v132)
                  CFRelease(v132);
                if (v129)
                  CFRelease(v129);
                if (v128)
                  CFRelease(v128);
                if (v131)
                  CFRelease(v131);
                v84 = v134;
                if (v134)
                  goto LABEL_166;
                goto LABEL_167;
              }
              goto LABEL_189;
            }
LABEL_190:
            v32 = v88;
            goto LABEL_150;
          }
LABEL_149:
          v32 = 4294954514;
          goto LABEL_150;
        }
        if (v136)
        {
          if (CFEqual(v136, CFSTR("StreamInfoMainStream")))
          {
            v58 = 0;
LABEL_74:
            v32 = 0;
            goto LABEL_125;
          }
          v135 = 0;
          if (CFEqual(v136, CFSTR("StreamInfoSupplementalStream")))
          {
            v77 = FigGetAllocatorForMedia();
            v78 = FigHLSPersistentStreamInfoGetFigBaseObject(v53);
            v79 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                               + 48);
            if (!v79)
            {
              v58 = 0;
              v32 = 4294954514;
              goto LABEL_123;
            }
            v80 = v79(v78, CFSTR("StreamInfoMediaTypeList"), v77, v137);
            if ((_DWORD)v80)
              goto LABEL_188;
            if (v137[0])
            {
              if (CFArrayGetCount(v137[0]) == 1)
              {
                v81 = (const __CFNumber *)CFArrayGetValueAtIndex(v137[0], 0);
                TypeID = CFNumberGetTypeID();
                if (TypeID == CFGetTypeID(v81))
                {
                  CFNumberGetValue(v81, kCFNumberSInt32Type, &v135);
                  if (v135 == 1936684398)
                  {
                    v58 = 1;
                    goto LABEL_122;
                  }
                  if (v135 == 1935832172)
                  {
                    v58 = 2;
LABEL_122:
                    v32 = 0;
                    goto LABEL_123;
                  }
                  v85 = FigSignalErrorAt();
                  v58 = 0;
                  if (!(_DWORD)v85)
                    goto LABEL_122;
                  v32 = v85;
LABEL_123:
                  if (!(_DWORD)v32)
                    goto LABEL_74;
                  goto LABEL_124;
                }
              }
            }
          }
        }
        v80 = FigSignalErrorAt();
LABEL_188:
        v32 = v80;
        v58 = 0;
        goto LABEL_123;
      }
    }
    else
    {
      v40 = FigSignalErrorAt();
    }
    v32 = v40;
    v4 = v107;
    goto LABEL_153;
  }
  v59 = *(_QWORD *)a1;
  *(_QWORD *)&context = 0;
  LOBYTE(v137[0]) = 0;
  if ((*(_BYTE *)(v59 + 220) & 2) != 0 && (*(_BYTE *)(v59 + 288) & 1) != 0)
  {
    v5 = sc_GetShouldDemandWriteAccessForStreamInfoCreation((uint64_t *)a1, (uint64_t)v6, (BOOL *)v137);
    if (!(_DWORD)v5)
    {
      v60 = LOBYTE(v137[0]);
      stream_CreateStreamInfoCreateOptions(LOBYTE(v137[0]), (__CFDictionary **)&context);
      v61 = *(_QWORD *)(v59 + 280);
      v62 = (const void *)context;
      v63 = *(uint64_t (**)(uint64_t, const void *, const void *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                               + 16)
                                                                                   + 32);
      if (v63)
      {
        v64 = v63(v61, v6, v62, a1 + 128);
        if ((_DWORD)v64)
          goto LABEL_194;
        v65 = *(_DWORD *)(a1 + 176);
        if (v60)
          v65 |= 2u;
        *(_DWORD *)(a1 + 176) = v65 | 1;
        v64 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, (uint64_t)CFSTR("StreamInfoMediaPlaylistNetworkURL"), *(_QWORD *)(a1 + 64));
        if ((_DWORD)v64)
        {
LABEL_194:
          v32 = v64;
          v67 = 0;
        }
        else
        {
          v66 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v67 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, (const void *)(a1 + 80));
          v68 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, (uint64_t)CFSTR("StreamInfoPeakBandwidth"), (uint64_t)v67);
          if (!(_DWORD)v68)
          {
            v68 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, (uint64_t)CFSTR("StreamInfoEvictionPolicy"), (uint64_t)CFSTR("StreamInfoEvictionPolicyEvictionByMaxStreamSize"));
            if (!(_DWORD)v68)
            {
              v69 = *(_QWORD *)(a1 + 72);
              if (!v69
                || (v68 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, (uint64_t)CFSTR("StreamInfoUniqueIdentifier"), v69), !(_DWORD)v68))
              {
                v70 = *(_DWORD *)(a1 + 56);
                LODWORD(v124) = 0;
                v71 = (const __CFAllocator *)FigGetAllocatorForMedia();
                v72 = CFArrayCreateMutable(v71, 0, MEMORY[0x1E0C9B378]);
                if ((v70 - 1) >= 2)
                {
                  if (!v70)
                  {
                    v83 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, (uint64_t)CFSTR("StreamInfoStreamType"), (uint64_t)CFSTR("StreamInfoMainStream"));
LABEL_113:
                    v32 = v83;
LABEL_114:
                    a2 = v108;
                    if (v72)
                      CFRelease(v72);
LABEL_116:
                    if (v62)
                      CFRelease(v62);
                    if (v67)
                    {
                      v84 = v67;
LABEL_166:
                      CFRelease(v84);
                    }
LABEL_167:
                    if ((_DWORD)v32)
                      goto LABEL_173;
                    goto LABEL_168;
                  }
                }
                else
                {
                  if (v70 == 1)
                    v73 = 1936684398;
                  else
                    v73 = 1935832172;
                  LODWORD(v124) = v73;
                  v74 = CFNumberCreate(v66, kCFNumberSInt32Type, &v124);
                  if (v74)
                  {
                    v75 = v74;
                    CFArrayAppendValue(v72, v74);
                    v76 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, (uint64_t)CFSTR("StreamInfoMediaTypeList"), (uint64_t)v72);
                    if (!(_DWORD)v76)
                      v76 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a1, (uint64_t)CFSTR("StreamInfoStreamType"), (uint64_t)CFSTR("StreamInfoSupplementalStream"));
                    v32 = v76;
                    CFRelease(v75);
                    goto LABEL_114;
                  }
                }
                v83 = FigSignalErrorAt();
                goto LABEL_113;
              }
            }
          }
          v32 = v68;
        }
      }
      else
      {
        v67 = 0;
        v32 = 4294954514;
      }
      a2 = v108;
      goto LABEL_116;
    }
LABEL_181:
    v32 = v5;
    goto LABEL_173;
  }
  v32 = FigSignalErrorAt();
  if ((_DWORD)v32)
    goto LABEL_173;
LABEL_168:
  if (!*(_BYTE *)(a1 + 120) || *(_BYTE *)(a1 + 121))
  {
    stream_UpgradePersistentStreamInfoForWriting(a1);
    if (a2)
    {
LABEL_171:
      v32 = 0;
      *a2 = 1;
      goto LABEL_173;
    }
LABEL_172:
    v32 = 0;
    goto LABEL_173;
  }
  v103 = stream_DowngradePersistentStreamInfoForReading(a1);
  v32 = v103;
  if (a2 && !(_DWORD)v103)
    goto LABEL_171;
LABEL_173:
  sc_RestorePersistentStoreLockStatus(v4, v109);
  return v32;
}

uint64_t stream_UnlockPersistentStreamInfoForAnything(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t FigBaseObject;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  const void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  if ((*(_BYTE *)(*(_QWORD *)a1 + 220) & 2) == 0)
    return FigSignalErrorAt();
  v2 = *(_QWORD *)(a1 + 128);
  if (!v2)
    return FigSignalErrorAt();
  v3 = *(_DWORD *)(a1 + 176);
  if ((v3 & 1) == 0)
    return 0;
  if ((v3 & 2) != 0)
  {
    result = stream_CommitPersistentStreamInfoIfNecessary(a1);
    if ((_DWORD)result)
      return result;
    v2 = *(_QWORD *)(a1 + 128);
  }
  FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v2);
  if (!FigBaseObject)
    return 4294954516;
  v6 = FigBaseObject;
  v7 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
  if (!v7)
    return 4294954514;
  result = v7(v6);
  if (!(_DWORD)result)
  {
    v8 = *(const void **)(a1 + 128);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 128) = 0;
    }
    *(_DWORD *)(a1 + 176) &= 0xFFFFFFFC;
    v9 = *(_QWORD **)(a1 + 24);
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
      while (1)
      {
        segment_EvictEntry(v10, 0, 0);
        v11 = *(_QWORD **)(a1 + 24);
        if (!v11)
          break;
        do
        {
          v10 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
    }
    return 0;
  }
  return result;
}

uint64_t sc_RestorePersistentStoreLockStatus(uint64_t result, int a2)
{
  int v2;

  if ((*(_BYTE *)(result + 220) & 2) == 0 || !*(_QWORD *)(result + 280))
    return FigSignalErrorAt();
  v2 = *(_DWORD *)(result + 288);
  if (v2 == a2)
    return result;
  if ((a2 & 2) != 0)
    return FigSignalErrorAt();
  if ((a2 & 1) == 0)
    return sc_UnlockPersistentStoreForAnything(result);
  if ((v2 & 2) == 0)
    return sc_UpgradePersistentStoreForWriting(result, 0);
  return result;
}

uint64_t FigStreamingCacheFlushIO(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  if (a1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272))
    {
      v4 = *(_QWORD *)(a1 + 256) + 1;
      *(_QWORD *)(a1 + 256) = v4;
      if ((*(_BYTE *)(a1 + 220) & 2) == 0)
      {
        v5 = sc_PostFlushIOCompletedNotification();
        v6 = v5;
        if (!a2 || (_DWORD)v5)
          goto LABEL_11;
        goto LABEL_9;
      }
      v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
      if (v7)
      {
        v8 = v7;
        *v7 = CFRetain((CFTypeRef)a1);
        v8[1] = v4;
        dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), v8, (dispatch_function_t)sc_FlushIOCompleteDispatchFunction);
        if (!a2)
        {
          v6 = 0;
          goto LABEL_11;
        }
LABEL_9:
        v6 = 0;
        *a2 = v4;
LABEL_11:
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        return v6;
      }
    }
    v6 = FigSignalErrorAt();
    goto LABEL_11;
  }
  return FigSignalErrorAt();
}

void sc_FlushIOCompleteDispatchFunction(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  MEMORY[0x19402EA0C](*(_QWORD *)(*a1 + 16));
  if (*(_BYTE *)(v2 + 272))
  {
    FigSignalErrorAt();
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 168);
    while (v4)
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 8);
      if (*(_QWORD *)(v5 + 128))
      {
        if (!stream_UpgradePersistentStreamInfoForWriting(v5))
        {
          stream_CommitPersistentStreamInfoIfNecessary(v5);
          if (*(_BYTE *)(v5 + 120))
          {
            if (!*(_BYTE *)(v5 + 121))
              stream_DowngradePersistentStreamInfoForReading(v5);
          }
        }
      }
    }
    if (v3 != -1)
      sc_PostFlushIOCompletedNotification();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
  FigDeferCFRelease();
  free(a1);
}

uint64_t sc_PostFlushIOCompletedNotification()
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v2;
  uint64_t v3;
  uint64_t v4;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v2 = Mutable;
  v3 = FigCFDictionarySetInt64();
  if (!(_DWORD)v3)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    v3 = FigDispatchAsyncPostNotification();
  }
  v4 = v3;
  CFRelease(v2);
  return v4;
}

uint64_t FigStreamingCacheFlushIOSync(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  NSObject *v5;
  _QWORD *v6;

  if (a1)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272) && (*(_BYTE *)(a1 + 220) & 2) != 0)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 240));
      v5 = *(NSObject **)(a1 + 240);
      v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x1020040EDED9539uLL);
      if (v6)
      {
        v3 = v6;
        *v6 = CFRetain((CFTypeRef)a1);
        v3[1] = -1;
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        if (!v5)
        {
          v2 = 0;
          goto LABEL_6;
        }
        dispatch_sync_f(v5, v3, (dispatch_function_t)sc_FlushIOCompleteDispatchFunction);
        v2 = 0;
      }
      else
      {
        v2 = FigSignalErrorAt();
        if (!v5)
          goto LABEL_5;
      }
      dispatch_release(v5);
    }
    else
    {
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      v2 = 0;
    }
  }
  else
  {
    v2 = FigSignalErrorAt();
  }
LABEL_5:
  v3 = 0;
LABEL_6:
  free(v3);
  return v2;
}

uint64_t FigStreamingCacheInvalidate(uint64_t a1)
{
  if (a1)
    figStreamingCacheInvalidate(a1);
  return 0;
}

void figStreamingCacheInvalidate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t FigBaseObject;
  uint64_t v6;
  void (*v7)(uint64_t);
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t started;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  const void *v41;

  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 272))
  {
    *(_BYTE *)(a1 + 272) = 1;
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if ((*(_BYTE *)(a1 + 220) & 2) != 0)
    {
      if (*(_QWORD *)(a1 + 240))
      {
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        dispatch_sync_f(*(dispatch_queue_t *)(a1 + 240), 0, (dispatch_function_t)sc_EmptyDispatchFunc);
        MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
        v2 = *(_QWORD *)(a1 + 168);
        if (v2)
        {
          do
          {
            v3 = *(_QWORD *)(v2 + 8);
            if (*(_QWORD *)(v2 + 128))
              stream_CommitPersistentStreamInfoIfNecessary(v2);
            v2 = v3;
          }
          while (v3);
        }
      }
      v4 = *(_QWORD *)(a1 + 280);
      if (v4)
      {
        if ((*(_BYTE *)(a1 + 220) & 2) != 0 && !*(_QWORD *)(a1 + 40))
        {
          FigShared_CheckIntoDiskCache(*(const __CFString **)(a1 + 32), *(const __CFString **)(a1 + 48), *(const void **)(a1 + 56));
          v4 = *(_QWORD *)(a1 + 280);
        }
        FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(v4);
        if (FigBaseObject)
        {
          v6 = FigBaseObject;
          v7 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v7)
            v7(v6);
        }
      }
    }
    v8 = *(const void **)(a1 + 32);
    if (v8)
    {
      CFRelease(v8);
      *(_QWORD *)(a1 + 32) = 0;
    }
    v9 = *(const void **)(a1 + 40);
    if (v9)
    {
      CFRelease(v9);
      *(_QWORD *)(a1 + 40) = 0;
    }
    v10 = *(const void **)(a1 + 24);
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 24) = 0;
    }
    v11 = *(const void **)(a1 + 48);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 48) = 0;
    }
    v12 = *(const void **)(a1 + 56);
    if (v12)
    {
      CFRelease(v12);
      *(_QWORD *)(a1 + 56) = 0;
    }
    v13 = *(const void **)(a1 + 280);
    if (v13)
    {
      CFRelease(v13);
      *(_QWORD *)(a1 + 280) = 0;
    }
    v14 = *(const void **)(a1 + 120);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(a1 + 120) = 0;
    }
    v15 = *(const void **)(a1 + 128);
    if (v15)
    {
      CFRelease(v15);
      *(_QWORD *)(a1 + 128) = 0;
    }
    v16 = *(const void **)(a1 + 160);
    if (v16)
    {
      CFRelease(v16);
      *(_QWORD *)(a1 + 160) = 0;
    }
    v17 = *(const void **)(a1 + 232);
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a1 + 232) = 0;
    }
    v18 = *(const void **)(a1 + 224);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 224) = 0;
    }
    v19 = *(const void **)(a1 + 136);
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(a1 + 136) = 0;
    }
    v20 = *(NSObject **)(a1 + 248);
    if (v20)
    {
      dispatch_release(v20);
      *(_QWORD *)(a1 + 248) = 0;
    }
    v21 = *(_QWORD **)(a1 + 168);
    while (v21)
    {
      v22 = v21;
      v21 = (_QWORD *)v21[1];
      v23 = (_QWORD *)v22[3];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)v23[1];
        }
        while (v23);
        do
        {
          started = MediaSegmentStartTimeList_RB_NEXT((unint64_t)v24);
          segment_EvictEntry(v24, 1, 0);
          v24 = (_QWORD *)started;
        }
        while (started);
      }
      if (v22[4])
        figStreamingCacheInvalidate_cold_2();
      if (v22[3])
        figStreamingCacheInvalidate_cold_1();
      v26 = (const void *)v22[9];
      if (v26)
      {
        CFRelease(v26);
        v22[9] = 0;
      }
      v27 = (const void *)v22[8];
      if (v27)
      {
        CFRelease(v27);
        v22[8] = 0;
      }
      v28 = (const void *)v22[13];
      if (v28)
      {
        CFRelease(v28);
        v22[13] = 0;
      }
      v29 = (const void *)v22[11];
      if (v29)
      {
        CFRelease(v29);
        v22[11] = 0;
      }
      v30 = (const void *)v22[14];
      if (v30)
      {
        CFRelease(v30);
        v22[14] = 0;
      }
      v31 = (const void *)v22[6];
      if (v31)
      {
        CFRelease(v31);
        v22[6] = 0;
      }
      v32 = (const void *)v22[17];
      if (v32)
      {
        CFRelease(v32);
        v22[17] = 0;
      }
      v33 = (const void *)v22[18];
      if (v33)
      {
        CFRelease(v33);
        v22[18] = 0;
      }
      v34 = (const void *)v22[19];
      if (v34)
      {
        CFRelease(v34);
        v22[19] = 0;
      }
      v35 = (const void *)v22[20];
      if (v35)
      {
        CFRelease(v35);
        v22[20] = 0;
      }
      v36 = (const void *)v22[21];
      if (v36)
      {
        CFRelease(v36);
        v22[21] = 0;
      }
      v37 = v22[16];
      if (v37)
      {
        v38 = FigHLSPersistentStreamInfoGetFigBaseObject(v37);
        if (v38)
        {
          v39 = v38;
          v40 = *(void (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 24);
          if (v40)
            v40(v39);
        }
        v41 = (const void *)v22[16];
        if (v41)
          CFRelease(v41);
      }
      free(v22);
    }
  }
  JUMPOUT(0x19402EA24);
}

uint64_t FigStreamingCacheSetCryptKey(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 && a2 && a3)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
    {
      v6 = FigSignalErrorAt();
    }
    else
    {
      if ((*(_BYTE *)(a1 + 220) & 2) == 0)
      {
        v7 = 0;
        goto LABEL_8;
      }
      v6 = sc_writeMetadataToDisk((dispatch_queue_t *)a1, a2, a3, CFSTR("ContentCryptKey"));
    }
    v7 = v6;
LABEL_8:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    return v7;
  }
  return FigSignalErrorAt();
}

uint64_t sc_writeMetadataToDisk(dispatch_queue_t *a1, const void *a2, const void *a3, const void *a4)
{
  _QWORD *v8;
  CFTypeRef v9;

  if (!a2 || !a3 || !a4)
    return FigSignalErrorAt();
  v8 = malloc_type_malloc(0x20uLL, 0x60040DC1F003FuLL);
  if (a1)
    v9 = CFRetain(a1);
  else
    v9 = 0;
  *v8 = v9;
  v8[1] = CFRetain(a2);
  v8[2] = CFRetain(a3);
  v8[3] = CFRetain(a4);
  dispatch_async_f(a1[30], v8, (dispatch_function_t)sc_WriteMetadataToDiskDispatchFunction);
  return 0;
}

uint64_t FigStreamingCacheCopyCryptKey(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    if ((*(_BYTE *)(a1 + 220) & 2) == 0)
    {
      v8 = 0;
      goto LABEL_10;
    }
    v6 = sc_copyMetadataFromDisk(a1, a2, (uint64_t)CFSTR("ContentCryptKey"), (uint64_t)&cf);
    if (!(_DWORD)v6)
    {
      v7 = cf;
      if (cf)
        v7 = CFRetain(cf);
      v8 = 0;
      *a3 = v7;
      goto LABEL_10;
    }
  }
  v8 = v6;
LABEL_10:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t sc_copyMetadataFromDisk(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, const __CFString *, CFDictionaryRef *);
  unsigned int v10;
  uint64_t Value;
  CFDictionaryRef v12;
  BOOL v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, CFTypeRef *, uint64_t);
  CFTypeRef cf;
  CFDictionaryRef theDict;

  cf = 0;
  theDict = 0;
  if (!a2 || !a3 || !a4)
  {
    Value = FigSignalErrorAt();
    goto LABEL_17;
  }
  v8 = *(_QWORD *)(a1 + 280);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, const __CFString *, CFDictionaryRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                         + 128);
  if (!v9)
    goto LABEL_16;
  v10 = v9(v8, a3, CFSTR("DataItemDescriptorNetworkURL"), &theDict);
  if (v10 == -16913)
    Value = 0;
  else
    Value = v10;
  v12 = theDict;
  if ((_DWORD)Value)
    v13 = 1;
  else
    v13 = theDict == 0;
  if (v13)
    goto LABEL_18;
  Value = (uint64_t)CFDictionaryGetValue(theDict, a2);
  if (Value)
  {
    v14 = *(_QWORD *)(a1 + 280);
    v15 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                           + 112);
    if (v15)
    {
      Value = v15(v14, Value, &cf, a4);
      if (cf)
        CFRelease(cf);
      goto LABEL_17;
    }
LABEL_16:
    Value = 4294954514;
  }
LABEL_17:
  v12 = theDict;
LABEL_18:
  if (v12)
    CFRelease(v12);
  return Value;
}

uint64_t FigStreamingCacheSetChapterArtwork(uint64_t a1, const void *a2, const void *a3)
{
  __int16 v6;
  __int16 v7;

  if (!a1 || !a2 || !a3)
    return (__int16)FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    if ((*(_BYTE *)(a1 + 220) & 2) == 0)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v6 = sc_writeMetadataToDisk((dispatch_queue_t *)a1, a2, a3, CFSTR("ChapterArtwork"));
  }
  v7 = v6;
LABEL_8:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheCopyChapterArtwork(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    if ((*(_BYTE *)(a1 + 220) & 2) == 0)
    {
      v8 = 0;
      goto LABEL_10;
    }
    v6 = sc_copyMetadataFromDisk(a1, a2, (uint64_t)CFSTR("ChapterArtwork"), (uint64_t)&cf);
    if (!(_DWORD)v6)
    {
      v7 = cf;
      if (cf)
        v7 = CFRetain(cf);
      v8 = 0;
      *a3 = v7;
      goto LABEL_10;
    }
  }
  v8 = v6;
LABEL_10:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t FigStreamingCacheSetSessionData(uint64_t a1, const void *a2, const void *a3)
{
  __int16 v6;
  __int16 v7;

  if (!a1)
    return (__int16)FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    if ((*(_BYTE *)(a1 + 220) & 2) == 0)
    {
      v7 = 0;
      goto LABEL_6;
    }
    v6 = sc_writeMetadataToDisk((dispatch_queue_t *)a1, a2, a3, CFSTR("SessionData"));
  }
  v7 = v6;
LABEL_6:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheCopySessionData(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef cf;

  cf = 0;
  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    v6 = FigSignalErrorAt();
  }
  else
  {
    if ((*(_BYTE *)(a1 + 220) & 2) == 0)
    {
      v8 = 0;
      goto LABEL_10;
    }
    v6 = sc_copyMetadataFromDisk(a1, a2, (uint64_t)CFSTR("SessionData"), (uint64_t)&cf);
    if (!(_DWORD)v6)
    {
      v7 = cf;
      if (cf)
        v7 = CFRetain(cf);
      v8 = 0;
      *a3 = v7;
      goto LABEL_10;
    }
  }
  v8 = v6;
LABEL_10:
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t FigStreamingCacheHintPlaybackTime(uint64_t a1, double a2)
{
  double v4;
  double v5;
  uint64_t v6;

  if (!a1)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
    goto LABEL_17;
  if (!*(_BYTE *)(a1 + 217))
    goto LABEL_13;
  v4 = *(double *)(a1 + 200);
  if ((*(_BYTE *)(a1 + 220) & 1) != 0)
  {
    if (v4 <= a2)
      v5 = a2;
    else
      v5 = *(double *)(a1 + 200);
    if (*(double *)(a1 + 208) >= v5)
      a2 = v5;
    else
      a2 = *(double *)(a1 + 208);
  }
  if (a2 < v4 || a2 > *(double *)(a1 + 208))
  {
LABEL_17:
    v6 = FigSignalErrorAt();
  }
  else
  {
LABEL_13:
    v6 = 0;
    *(double *)(a1 + 192) = a2;
    *(_BYTE *)(a1 + 216) = 1;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v6;
}

uint64_t FigStreamingCacheSetCacheTimeRange(uint64_t a1, double a2, double a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1 || a2 > a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
  {
    i = FigSignalErrorAt();
  }
  else
  {
    *(double *)(a1 + 200) = a2;
    *(double *)(a1 + 208) = a3;
    *(_BYTE *)(a1 + 217) = 1;
    for (i = *(_QWORD *)(a1 + 168); i; i = *(_QWORD *)(i + 8))
    {
      if (*(_BYTE *)(i + 121))
      {
        v7 = *(_QWORD *)(i + 24);
        if (v7)
        {
          v8 = *(_QWORD *)(i + 24);
          do
          {
            v9 = v8;
            v8 = *(_QWORD *)(v8 + 8);
          }
          while (v8);
          while (*(double *)(v9 + 120) + *(double *)(v9 + 128) <= *(double *)(a1 + 200))
          {
            segment_EvictEntry((_QWORD *)v9, 0, 1);
            v7 = *(_QWORD *)(i + 24);
            if (!v7)
              goto LABEL_20;
            v10 = *(_QWORD *)(i + 24);
            do
            {
              v9 = v10;
              v10 = *(_QWORD *)(v10 + 8);
            }
            while (v10);
          }
          do
          {
            v11 = v7;
            v7 = *(_QWORD *)(v7 + 16);
          }
          while (v7);
          while (*(double *)(v11 + 120) >= *(double *)(a1 + 208))
          {
            segment_EvictEntry((_QWORD *)v11, 0, 1);
            v12 = *(_QWORD *)(i + 24);
            if (!v12)
              break;
            do
            {
              v11 = v12;
              v12 = *(_QWORD *)(v12 + 16);
            }
            while (v12);
          }
        }
      }
LABEL_20:
      ;
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return i;
}

uint64_t FigStreamingCacheCreateMediaStream(uint64_t a1, int a2, __CFDictionary *a3, const void *a4, int a5, char a6, _QWORD *a7)
{
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;

  v18 = 0;
  v17 = 0;
  if (!a1 || !a3 || a5 < 0)
  {
    v15 = FigSignalErrorAt();
    if (a7)
    {
LABEL_12:
      if (!(_DWORD)v15)
        *a7 = v18;
    }
    return v15;
  }
  if (a7)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
    {
      v14 = FigSignalErrorAt();
    }
    else
    {
      v14 = sc_CreateAndAddStreamEntry((_QWORD *)a1, a2, a3, a4, a5, a6, &v17, &v18);
      if (!(_DWORD)v14)
      {
        if ((*(_BYTE *)(a1 + 220) & 2) == 0)
        {
          v15 = 0;
          goto LABEL_11;
        }
        v14 = stream_EnsurePersistentStreamInfo(v18, 0);
      }
    }
    v15 = v14;
LABEL_11:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    if (a7)
      goto LABEL_12;
    return v15;
  }
  return FigSignalErrorAt();
}

uint64_t sc_CreateAndAddStreamEntry(_QWORD *a1, int a2, __CFDictionary *a3, const void *a4, int a5, char a6, char *a7, _QWORD *a8)
{
  char *v8;
  _QWORD *v9;
  CFMutableDictionaryRef v10;
  _QWORD *v15;
  _QWORD *v16;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;
  CFMutableDictionaryRef v19;
  char v20;
  _QWORD *v21;
  const __CFAllocator *AllocatorForMedia;
  const __CFAllocator *v23;
  const __CFAllocator *v24;
  const __CFAllocator *v25;
  const __CFAllocator *v26;
  CFMutableDictionaryRef v27;
  CFTypeRef v28;
  uint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  char v34;
  CFMutableDictionaryRef Mutable;
  CFMutableSetRef cf;
  _OWORD v39[3];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49[9];

  v8 = a7;
  v9 = a1;
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  memset(v39, 0, sizeof(v39));
  if (!a1)
  {
    v32 = FigSignalErrorAt();
    v16 = 0;
LABEL_48:
    v10 = 0;
    goto LABEL_49;
  }
  v10 = a3;
  if (!a3)
  {
    v32 = FigSignalErrorAt();
    v16 = 0;
    v9 = 0;
LABEL_49:
    v19 = 0;
    v18 = 0;
    goto LABEL_53;
  }
  if (a5 < 0 || !a8)
  {
    v32 = FigSignalErrorAt();
    v16 = 0;
    v9 = 0;
    goto LABEL_48;
  }
  DWORD2(v40) = a2;
  *(_QWORD *)&v41 = a3;
  *((_QWORD *)&v41 + 1) = a4;
  LODWORD(v42) = a5;
  v49[0] = 0;
  v15 = (_QWORD *)a1[21];
  if (v15)
  {
    v16 = 0;
    do
    {
      if (sc_MatchMediaStreamWithAttributes(v15, v39, v49))
        v16 = v15;
      if (v49[0])
        break;
      v15 = (_QWORD *)v15[1];
    }
    while (v15);
    if (v16)
    {
      v8 = a7;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v10 = 0;
      v9 = 0;
      if (*((_DWORD *)v16 + 14) == -1)
        *((_DWORD *)v16 + 14) = a2;
      v20 = 1;
      goto LABEL_15;
    }
  }
  v16 = malloc_type_calloc(1uLL, 0xB8uLL, 0x10E004082C26414uLL);
  if (!v16
    || (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (cf = CFSetCreateMutable(AllocatorForMedia, 0, 0)) == 0))
  {
    v32 = FigSignalErrorAt();
    v9 = 0;
    v10 = 0;
    v19 = 0;
    v18 = 0;
    v8 = a7;
LABEL_53:
    if ((_DWORD)v32)
    {
      if (v16)
        free(v16);
      v17 = 0;
      if (v9)
        goto LABEL_33;
      goto LABEL_34;
    }
    v17 = 0;
    v20 = 0;
LABEL_15:
    v21 = a8;
    if (!a8)
      goto LABEL_30;
LABEL_29:
    *v21 = v16;
    goto LABEL_30;
  }
  v23 = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(v23, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v32 = FigSignalErrorAt();
    v10 = 0;
    v19 = 0;
    v18 = 0;
    v9 = cf;
    v8 = a7;
    goto LABEL_53;
  }
  v24 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v19 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v19)
  {
    v32 = FigSignalErrorAt();
    v18 = 0;
    goto LABEL_52;
  }
  v34 = a6;
  v25 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v18 = CFDictionaryCreateMutable(v25, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v18
    || (v26 = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (v27 = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0])) == 0))
  {
    v32 = FigSignalErrorAt();
LABEL_52:
    v9 = cf;
    v8 = a7;
    v10 = Mutable;
    goto LABEL_53;
  }
  v17 = v27;
  v16[6] = CFRetain(cf);
  v16[18] = CFRetain(Mutable);
  v16[19] = CFRetain(v19);
  v16[20] = CFRetain(v18);
  v16[21] = CFRetain(v17);
  *((_DWORD *)v16 + 14) = a2;
  v16[8] = CFRetain(v10);
  if (a4)
    v28 = CFRetain(a4);
  else
    v28 = 0;
  v21 = a8;
  v20 = 0;
  v16[9] = v28;
  *((_DWORD *)v16 + 20) = a5;
  *((_BYTE *)v16 + 84) = v34;
  *v16 = v9;
  *((_BYTE *)v16 + 121) = 1;
  v16[3] = 0;
  v16[4] = 0;
  v29 = v9[21];
  v16[1] = v29;
  v30 = v29 == 0;
  v31 = (_QWORD *)(v29 + 16);
  if (v30)
    v31 = v9 + 22;
  *v31 = v16 + 1;
  v9[21] = v16;
  v16[2] = v9 + 21;
  v9 = cf;
  v8 = a7;
  v10 = Mutable;
  if (a8)
    goto LABEL_29;
LABEL_30:
  v32 = 0;
  if (v8)
    *v8 = v20;
  if (v9)
LABEL_33:
    CFRelease(v9);
LABEL_34:
  if (v10)
    CFRelease(v10);
  if (v18)
    CFRelease(v18);
  if (v19)
    CFRelease(v19);
  if (v17)
    CFRelease(v17);
  return v32;
}

uint64_t FigStreamingCacheCopyAllStreamsMetadata(uint64_t a1, __CFArray **a2)
{
  const __CFAllocator *AllocatorForMedia;
  __CFArray *Mutable;
  uint64_t v6;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  const void *v9;
  const __CFAllocator *v10;
  __CFDictionary *v11;
  __CFDictionary *v12;
  const void *v13;
  const void *v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  __CFArray **v20;
  void *value;

  value = 0;
  if (!a1)
    return FigSignalErrorAt();
  if (a2)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
    {
      v18 = FigSignalErrorAt();
      Mutable = 0;
    }
    else
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
      if (!Mutable)
      {
LABEL_29:
        v15 = FigSignalErrorAt();
LABEL_30:
        v18 = v15;
        goto LABEL_23;
      }
      v20 = a2;
      v6 = *(_QWORD *)(a1 + 168);
      if (v6)
      {
        v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
        v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
        v9 = (const void *)*MEMORY[0x1E0C9AE50];
        do
        {
          v10 = (const __CFAllocator *)FigGetAllocatorForMedia();
          v11 = CFDictionaryCreateMutable(v10, 0, v7, v8);
          if (!v11)
            goto LABEL_29;
          v12 = v11;
          v13 = *(const void **)(v6 + 64);
          if (v13)
            CFDictionaryAddValue(v11, CFSTR("SMD_URL"), v13);
          v14 = *(const void **)(v6 + 72);
          if (v14)
            CFDictionaryAddValue(v12, CFSTR("SMD_StableStreamIdentifier"), v14);
          if (*(_BYTE *)(v6 + 84))
            CFDictionaryAddValue(v12, CFSTR("SMD_MediaIsCompressible"), v9);
          FigCFDictionarySetInt32();
          FigCFDictionarySetInt32();
          v15 = sc_CopyPlaylistForStream(a1, v6, &value);
          if ((_DWORD)v15)
            goto LABEL_30;
          v16 = value;
          if (value)
            CFDictionaryAddValue(v12, CFSTR("SMD_PlaylistData"), value);
          v17 = *(const void **)(v6 + 112);
          if (v17)
            CFDictionaryAddValue(v12, CFSTR("SMD_HTTPResponseHeaders"), v17);
          CFArrayAppendValue(Mutable, v12);
          CFRelease(v12);
          if (v16)
          {
            CFRelease(v16);
            value = 0;
          }
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      v18 = 0;
      *v20 = Mutable;
    }
LABEL_23:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    if ((_DWORD)v18 && Mutable)
      CFRelease(Mutable);
    goto LABEL_26;
  }
  v18 = FigSignalErrorAt();
LABEL_26:
  if (value)
    CFRelease(value);
  return v18;
}

uint64_t sc_CopyPlaylistForStream(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  const void *v5;
  const void **v6;
  CFTypeRef v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const __CFString *, uint64_t, const void **);
  char v14;

  v14 = 0;
  v6 = (const void **)(a2 + 88);
  v5 = *(const void **)(a2 + 88);
  if (v5)
    goto LABEL_2;
  if (!*(_BYTE *)(a2 + 96))
    goto LABEL_17;
  v10 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a2 + 96) = 0;
  if (v10)
    return FigSignalErrorAt();
  result = stream_EnsurePersistentStreamInfo(a2, &v14);
  if (!(_DWORD)result)
  {
    v11 = *(_QWORD *)(a2 + 128);
    v12 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                        + 16);
    if (!v12)
      return 4294954514;
    result = v12(v11, CFSTR("NetworkPlaylist"), a2 + 104, v6);
    if (!(_DWORD)result || (_DWORD)result == -16940)
    {
      if ((*(_BYTE *)(a1 + 220) & 2) == 0
        || !v14
        || (result = stream_UnlockPersistentStreamInfoForAnything(a2), !(_DWORD)result))
      {
LABEL_17:
        v5 = *v6;
        if (!*v6)
        {
          v7 = 0;
          goto LABEL_3;
        }
LABEL_2:
        v7 = CFRetain(v5);
LABEL_3:
        result = 0;
        *a3 = v7;
      }
    }
  }
  return result;
}

uint64_t FigStreamingCacheGetLongestContiguousMediaStreamInCacheAtTime(uint64_t a1, int a2, uint64_t *a3, CFTypeRef *a4, _QWORD *a5, double *a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  double v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t LastSegmentOfContiguousRangeContainingSegment;
  double v22;
  uint64_t v23;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  uint64_t v25;
  CFTypeRef v26;
  char v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a1 && a3 && a4 && a6)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
    {
      v25 = FigSignalErrorAt();
      v15 = 0;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 168);
      if (v14)
      {
        v15 = 0;
        v16 = 0;
        v17 = 0.0;
        do
        {
          v28[0] = 0;
          if ((*(_BYTE *)(a1 + 220) & 2) == 0 || !stream_EnsurePersistentStreamInfo(v14, v28))
          {
            if (*(_DWORD *)(v14 + 56) == a2)
            {
              v18 = *(_QWORD *)(v14 + 24);
              if (v18)
              {
                while (1)
                {
                  v19 = *(double *)(v18 + 120);
                  if (v19 <= a7 && v19 + *(double *)(v18 + 128) > a7)
                    break;
                  if (v19 >= a7)
                    v20 = 8;
                  else
                    v20 = 16;
                  v18 = *(_QWORD *)(v18 + v20);
                  if (!v18)
                    goto LABEL_23;
                }
                LastSegmentOfContiguousRangeContainingSegment = stream_GetLastSegmentOfContiguousRangeContainingSegment(v18, 1);
                v22 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 120);
                if (*(double *)(LastSegmentOfContiguousRangeContainingSegment + 128) + v22 - a7 > v17)
                {
                  v17 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 128) + v22 - a7;
                  v15 = v14;
                }
                if (*(_DWORD *)(v14 + 80) > v16)
                  v16 = *(_DWORD *)(v14 + 80);
              }
            }
LABEL_23:
            if ((*(_BYTE *)(a1 + 220) & 2) != 0)
            {
              if (v28[0])
              {
                v23 = stream_UnlockPersistentStreamInfoForAnything(v14);
                if ((_DWORD)v23)
                {
                  v25 = v23;
                  goto LABEL_33;
                }
              }
            }
          }
          v14 = *(_QWORD *)(v14 + 8);
        }
        while (v14);
        if (v15 && v16 > *(_DWORD *)(v15 + 80))
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          v25 = 0;
        }
        else
        {
          v25 = 0;
        }
LABEL_33:
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        if ((_DWORD)v25)
          return v25;
        goto LABEL_34;
      }
      v15 = 0;
      v25 = 0;
    }
    v17 = 0.0;
    goto LABEL_33;
  }
  v25 = FigSignalErrorAt();
  v15 = 0;
  v17 = 0.0;
  if ((_DWORD)v25)
    return v25;
LABEL_34:
  *a3 = v15;
  if (v15)
  {
    *a4 = CFRetain(*(CFTypeRef *)(v15 + 64));
    *a6 = v17;
    if (a5)
    {
      v26 = *(CFTypeRef *)(v15 + 72);
      if (v26)
        v26 = CFRetain(v26);
      goto LABEL_39;
    }
  }
  else
  {
    v26 = 0;
    *a4 = 0;
    *a6 = v17;
    if (a5)
LABEL_39:
      *a5 = v26;
  }
  return v25;
}

unint64_t stream_GetLastSegmentOfContiguousRangeContainingSegment(unint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t i;
  unint64_t v5;

  v2 = a1;
  if ((*(_DWORD *)(a1 + 160) & 5) == 1)
  {
    for (i = MediaSegmentStartTimeList_RB_NEXT(a1); i; v2 = v5)
    {
      if ((*(_DWORD *)(v2 + 160) & 5) != 1)
        break;
      v5 = i;
      if (a2)
      {
        if ((*(_BYTE *)(i + 160) & 1) == 0)
          break;
      }
      i = MediaSegmentStartTimeList_RB_NEXT(i);
    }
  }
  return v2;
}

uint64_t FigStreamingCacheIsMediaStreamInCacheAtTime()
{
  return 0;
}

uint64_t FigStreamingCacheMediaStreamSetPlaylist(uint64_t a1, _QWORD *a2, const void *a3, const void *a4)
{
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;

  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272) || (v8 = *(_QWORD **)(a1 + 168)) == 0)
  {
LABEL_7:
    v9 = FigSignalErrorAt();
  }
  else
  {
    while (v8 != a2)
    {
      v8 = (_QWORD *)v8[1];
      if (!v8)
        goto LABEL_7;
    }
    v10 = (const void *)a2[11];
    a2[11] = a3;
    if (a3)
      CFRetain(a3);
    if (v10)
      CFRelease(v10);
    v11 = (const void *)a2[14];
    a2[14] = a4;
    if (a4)
      CFRetain(a4);
    if (v11)
      CFRelease(v11);
    if ((*(_BYTE *)(a1 + 220) & 2) != 0)
    {
      CFRetain((CFTypeRef)a1);
      dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), a2, (dispatch_function_t)stream_WriteMediaPlaylistToDiskDispatchFunction);
    }
    v9 = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v9;
}

uint64_t stream_WriteMediaPlaylistToDiskDispatchFunction(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Base32EncodedSHA1HashFromCFString;
  const void *v6;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, const __CFString *, CFStringRef, uint64_t);
  int v12;
  const void *v13;
  int v14;

  v2 = *(_QWORD *)a1;
  MEMORY[0x19402EA0C](*(_QWORD *)(*(_QWORD *)a1 + 16));
  if (*(_QWORD *)(a1 + 128))
  {
    if (stream_UpgradePersistentStreamInfoForWriting(a1))
      goto LABEL_15;
    v3 = *(unsigned int *)(a1 + 56);
    v4 = *(unsigned int *)(a1 + 80);
    Base32EncodedSHA1HashFromCFString = FigCreateBase32EncodedSHA1HashFromCFString();
    if (!Base32EncodedSHA1HashFromCFString
      || (v6 = (const void *)Base32EncodedSHA1HashFromCFString,
          AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
          v8 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%d-%@-%d.m3u8"), v3, v6, v4),
          CFRelease(v6),
          !v8))
    {
      if (!FigSignalErrorAt())
        goto LABEL_16;
      goto LABEL_15;
    }
    v9 = *(_QWORD *)(a1 + 128);
    v10 = *(_QWORD *)(a1 + 88);
    v11 = *(uint64_t (**)(uint64_t, const __CFString *, CFStringRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                  + 16)
                                                                                      + 8);
    if (v11)
    {
      v12 = v11(v9, CFSTR("NetworkPlaylist"), v8, v10);
      if (!v12)
      {
        v13 = *(const void **)(a1 + 104);
        *(_QWORD *)(a1 + 104) = v8;
        CFRetain(v8);
        if (v13)
          CFRelease(v13);
        v12 = stream_SetNeedsToCommitPersistentStreamInfo((_BYTE *)a1);
      }
      v14 = v12;
    }
    else
    {
      v14 = -12782;
    }
    CFRelease(v8);
    if (v14)
LABEL_15:
      sc_SendDiskWriteErrorNotification();
  }
LABEL_16:
  MEMORY[0x19402EA24](*(_QWORD *)(v2 + 16));
  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheMediaStreamCopyPlaylist(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v11;

  if (a1 && a3 | a4)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272) || (v8 = *(_QWORD *)(a1 + 168)) == 0)
    {
LABEL_7:
      v9 = FigSignalErrorAt();
    }
    else
    {
      while (v8 != a2)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          goto LABEL_7;
      }
      if (a3)
      {
        v10 = sc_CopyPlaylistForStream(a1, a2, (_QWORD *)a3);
        v9 = v10;
        if (!a4 || (_DWORD)v10)
          goto LABEL_17;
LABEL_13:
        v11 = *(CFTypeRef *)(a2 + 112);
        if (v11)
          v11 = CFRetain(v11);
        v9 = 0;
        *(_QWORD *)a4 = v11;
        goto LABEL_17;
      }
      if (a4)
        goto LABEL_13;
      v9 = 0;
    }
LABEL_17:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaStreamSetNetworkURL(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;

  if (a1 && a2 && a3)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272) || (v6 = *(_QWORD *)(a1 + 168)) == 0)
    {
LABEL_8:
      v7 = FigSignalErrorAt();
    }
    else
    {
      while (v6 != a2)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
          goto LABEL_8;
      }
      v9 = *(const void **)(a2 + 64);
      *(_QWORD *)(a2 + 64) = a3;
      CFRetain(a3);
      if (v9)
        CFRelease(v9);
      if ((*(_BYTE *)(a1 + 220) & 2) == 0)
        goto LABEL_17;
      v7 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(a2, (uint64_t)CFSTR("StreamInfoMediaPlaylistNetworkURL"), *(_QWORD *)(a2 + 64));
      if (!(_DWORD)v7)
      {
        if (*(_BYTE *)(a2 + 120))
        {
          if (!*(_BYTE *)(a2 + 121))
            stream_DowngradePersistentStreamInfoForReading(a2);
        }
LABEL_17:
        v8 = 0;
        goto LABEL_18;
      }
    }
    v8 = v7;
LABEL_18:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  uint64_t v5;
  CFAllocatorRef v8;
  uint64_t FigBaseObject;
  void (*v10)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  CFTypeRef cf;

  v4 = *(_BYTE **)a1;
  cf = 0;
  if ((v4[220] & 2) == 0 || (v5 = *(_QWORD *)(a1 + 128)) == 0)
  {
    v12 = FigSignalErrorAt();
LABEL_11:
    v11 = v12;
    goto LABEL_13;
  }
  v8 = CFGetAllocator(v4);
  FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(v5);
  v10 = *(void (**)(uint64_t, uint64_t, CFAllocatorRef, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                             + 48);
  if (v10)
    v10(FigBaseObject, a2, v8, &cf);
  if (FigCFEqual())
  {
    v11 = 0;
    goto LABEL_13;
  }
  v12 = stream_UpgradePersistentStreamInfoForWriting(a1);
  if ((_DWORD)v12)
    goto LABEL_11;
  v13 = FigHLSPersistentStreamInfoGetFigBaseObject(*(_QWORD *)(a1 + 128));
  v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v14)
  {
    v12 = v14(v13, a2, a3);
    if (!(_DWORD)v12)
      v12 = stream_SetNeedsToCommitPersistentStreamInfo((_BYTE *)a1);
    goto LABEL_11;
  }
  v11 = 4294954514;
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v11;
}

uint64_t stream_DowngradePersistentStreamInfoForReading(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  if ((*(_BYTE *)(*(_QWORD *)a1 + 220) & 2) == 0 || !*(_QWORD *)(a1 + 128))
    return FigSignalErrorAt();
  if ((*(_BYTE *)(a1 + 176) & 2) == 0)
    return 0;
  v2 = stream_CommitPersistentStreamInfoIfNecessary(a1);
  if ((_DWORD)v2)
    return v2;
  FigGetUpTimeNanoseconds();
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (v4)
  {
    v5 = v4(v3, 1);
    FigGetUpTimeNanoseconds();
    if (!(_DWORD)v5)
      *(_DWORD *)(a1 + 176) &= ~2u;
  }
  else
  {
    FigGetUpTimeNanoseconds();
    return 4294954514;
  }
  return v5;
}

uint64_t FigStreamingCacheMediaStreamCopyNetworkURL(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFTypeRef v8;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272) || (v6 = *(_QWORD *)(a1 + 168)) == 0)
  {
LABEL_8:
    v7 = FigSignalErrorAt();
  }
  else
  {
    while (v6 != a2)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        goto LABEL_8;
    }
    v8 = *(CFTypeRef *)(a2 + 64);
    if (v8)
      v8 = CFRetain(v8);
    v7 = 0;
    *a3 = v8;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheMediaStreamReserveSpaceForByteSize(uint64_t a1, uint64_t a2, const void *a3, double a4)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v12 = 0;
  if (!a1 || !a2)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272)
    || *(_BYTE *)(a1 + 216) && (v8 = *(double *)(a1 + 112), v8 > 0.0) && v8 + *(double *)(a1 + 192) <= a4
    || (v9 = *(_QWORD *)(a1 + 168)) == 0)
  {
LABEL_10:
    v10 = FigSignalErrorAt();
  }
  else
  {
    while (v9 != a2)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        goto LABEL_10;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), 0);
    if (sc_HasEnoughAvailableBackingMemory(a1, (uint64_t)a3, (uint64_t *)&v12)
      || sc_GetBackingForMediaStreamAtTime(a1, a2, v12, a4))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), a3);
      v10 = 0;
    }
    else
    {
      v10 = 4294951055;
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v10;
}

BOOL sc_HasEnoughAvailableBackingMemory(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t context;

  context = 0;
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 232), (CFDictionaryApplierFunction)sc_ComputeTotalReservedSizeFunc, &context);
  if ((*(_BYTE *)(a1 + 220) & 2) == 0)
  {
    v6 = *(_QWORD *)(a1 + 72);
    if (v6 >= 1)
    {
      result = v6 >= (unint64_t)(*(_QWORD *)(a1 + 184) + a2 + context);
      if (!a3)
        return result;
      goto LABEL_9;
    }
LABEL_6:
    result = 1;
    if (!a3)
      return result;
    goto LABEL_9;
  }
  if (*(_QWORD *)(a1 + 40))
    goto LABEL_6;
  result = FigShared_ReserveDiskCacheBacking(*(const __CFString **)(a1 + 32), *(const void **)(a1 + 48), *(_QWORD *)(a1 + 184) + a2 + context) == 0;
  if (!a3)
    return result;
LABEL_9:
  if (result)
  {
    a2 = 0;
  }
  else if ((*(_BYTE *)(a1 + 220) & 2) == 0)
  {
    a2 = *(_QWORD *)(a1 + 184) + a2 + context - *(_QWORD *)(a1 + 72);
  }
  *a3 = a2;
  return result;
}

BOOL sc_GetBackingForMediaStreamAtTime(uint64_t a1, uint64_t a2, unint64_t a3, double a4)
{
  double v5;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t v24;
  char v26;

  if (!*(_BYTE *)(a2 + 121))
    return 0;
  v5 = a4;
  if (*(_BYTE *)(a1 + 216))
  {
    a4 = *(double *)(a1 + 192);
    if (a4 >= v5)
      a4 = v5;
  }
  v8 = 0;
  v9 = 0;
  v10 = a4 - *(double *)(a1 + 96);
  if (v10 >= 0.0)
    v11 = v10;
  else
    v11 = 0.0;
  v12 = *(_DWORD *)(a2 + 56);
  v26 = 0;
  v13 = v11;
  v14 = v11;
  while (1)
  {
    v15 = *(_QWORD *)(a1 + 168);
    if (!v15)
      break;
    v16 = 0;
    do
    {
      if (*(_DWORD *)(v15 + 56) == v12)
      {
        v17 = *(_QWORD *)(v15 + 24);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = *(_QWORD *)(v17 + 8);
          }
          while (v17);
          if (*(double *)(v18 + 120) < v13)
          {
            v14 = v13;
            v13 = *(double *)(v18 + 120);
            v16 = v15;
          }
        }
      }
      v15 = *(_QWORD *)(v15 + 8);
    }
    while (v15);
    if (!v16)
      break;
    if ((*(_BYTE *)(a1 + 220) & 2) == 0 || !stream_EnsurePersistentStreamInfo(a2, &v26))
    {
      while (1)
      {
        v19 = *(_QWORD *)(v16 + 24);
        if (!v19)
        {
          v22 = 0;
          goto LABEL_28;
        }
        do
        {
          v20 = v19;
          v19 = *(_QWORD *)(v19 + 8);
        }
        while (v19);
        if (v20 == v8)
        {
          if ((*(_BYTE *)(a1 + 220) & 2) != 0 && v26)
            stream_UnlockPersistentStreamInfoForAnything(a2);
          goto LABEL_36;
        }
        if (*(double *)(v20 + 120) + *(double *)(v20 + 128) > v14)
          break;
        v21 = *(_QWORD *)(a1 + 184);
        v22 = 1;
        segment_EvictEntry((_QWORD *)v20, 0, 1);
        v9 += v21 - *(_QWORD *)(a1 + 184);
        if (v9 >= a3)
          goto LABEL_28;
      }
      v22 = 0;
      v8 = v20;
LABEL_28:
      if ((*(_BYTE *)(a1 + 220) & 2) != 0 && v26)
        stream_UnlockPersistentStreamInfoForAnything(a2);
      v13 = v11;
      v14 = v11;
      if (!v22)
        continue;
      break;
    }
  }
LABEL_36:
  v23 = a3 > v9;
  v24 = a3 - v9;
  if (!v23)
    return 1;
  if (*(_BYTE *)(a1 + 216))
  {
    if (*(double *)(a1 + 192) > v5)
      v5 = *(double *)(a1 + 192);
  }
  return sc_GetBackingForMediaStreamFromLaterSegments(a1, a2, v24, v5 + *(double *)(a1 + 104)) >= v24;
}

uint64_t FigStreamingCacheMediaStreamGetMediaSegmentAtTime(uint64_t a1, uint64_t a2, _QWORD *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  double v11;
  uint64_t v12;

  if (!a1 || !a2 || !a3)
  {
    v9 = FigSignalErrorAt();
    i = 0;
    if ((_DWORD)v9)
      return v9;
    goto LABEL_20;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272) || (v8 = *(_QWORD *)(a1 + 168)) == 0)
  {
LABEL_8:
    v9 = FigSignalErrorAt();
    i = 0;
  }
  else
  {
    while (v8 != a2)
    {
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
        goto LABEL_8;
    }
    for (i = *(_QWORD *)(a2 + 24); i; i = *(_QWORD *)(i + v12))
    {
      v11 = *(double *)(i + 120);
      if (v11 <= a4 && v11 + *(double *)(i + 128) > a4)
        break;
      v12 = v11 >= a4 ? 8 : 16;
    }
    if (i)
      v9 = 0;
    else
      v9 = 4294951053;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  if (!(_DWORD)v9)
LABEL_20:
    *a3 = i;
  return v9;
}

uint64_t FigStreamingCacheMediaStreamGetMediaSegmentAtOffset(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _QWORD *a6)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _OWORD v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  if (!a1)
    goto LABEL_23;
  v8 = a2;
  if (!a2)
  {
    v13 = FigSignalErrorAt();
    goto LABEL_25;
  }
  v9 = a3;
  if (!a3)
  {
    v13 = FigSignalErrorAt();
    v8 = 0;
    goto LABEL_15;
  }
  if (a4 < 0)
  {
LABEL_23:
    v13 = FigSignalErrorAt();
    v8 = 0;
LABEL_25:
    LOBYTE(v9) = 0;
    goto LABEL_15;
  }
  if (!a6)
  {
    v13 = FigSignalErrorAt();
    LOBYTE(v9) = 0;
    if (!a5)
      return v13;
    goto LABEL_21;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272) || (v12 = *(_QWORD **)(a1 + 168)) == 0)
  {
LABEL_10:
    v13 = FigSignalErrorAt();
    v8 = 0;
    LOBYTE(v9) = 0;
  }
  else
  {
    while (v12 != v8)
    {
      v12 = (_QWORD *)v12[1];
      if (!v12)
        goto LABEL_10;
    }
    *((_QWORD *)&v18 + 1) = v9;
    *(_QWORD *)&v19 = a4;
    v14 = MediaSegmentOffsetList_RB_FIND((_QWORD **)v8 + 4, v17);
    v8 = v14;
    if (v14)
    {
      v13 = 0;
      LOBYTE(v9) = v14[20] & 1;
    }
    else
    {
      LOBYTE(v9) = 0;
      v13 = 4294951053;
    }
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
LABEL_15:
  if (a6)
  {
    if ((_DWORD)v13)
      v15 = 0;
    else
      v15 = v8;
    *a6 = v15;
  }
  if (a5)
LABEL_21:
    *a5 = v9;
  return v13;
}

_QWORD *MediaSegmentOffsetList_RB_FIND(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v2;
  int started;
  _QWORD **v5;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      started = segment_SortByURLAndStartOffset(a2, v2);
      if (started < 0)
      {
        v5 = (_QWORD **)(v2 + 4);
      }
      else
      {
        if (!started)
          return v2;
        v5 = (_QWORD **)(v2 + 5);
      }
      v2 = *v5;
    }
    while (*v5);
  }
  return v2;
}

uint64_t FigStreamingCacheMediaStreamGetMediaSegmentWithMediaSequenceNumber(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t *a5)
{
  CFNumberRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _OWORD v16[6];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t valuePtr;

  valuePtr = a3;
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  memset(v16, 0, sizeof(v16));
  if (a1 && a2 && a5)
  {
    v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
    if (v9)
    {
      MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
      if (*(_BYTE *)(a1 + 272) || (v10 = *(_QWORD *)(a1 + 168)) == 0)
      {
LABEL_9:
        v11 = FigSignalErrorAt();
        v12 = 0;
        v13 = 0;
      }
      else
      {
        while (v10 != a2)
        {
          v10 = *(_QWORD *)(v10 + 8);
          if (!v10)
            goto LABEL_9;
        }
        *((_QWORD *)&v17 + 1) = v9;
        v14 = MediaSegmentMediaSequenceNumberList_RB_FIND((uint64_t *)(a2 + 40), (uint64_t)v16);
        v12 = v14;
        if (v14)
        {
          v11 = 0;
          v13 = *(_BYTE *)(v14 + 160) & 1;
        }
        else
        {
          v13 = 0;
          v11 = 4294951053;
        }
      }
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      if (!(_DWORD)v11)
        goto LABEL_14;
      goto LABEL_15;
    }
    v11 = FigSignalErrorAt();
    v12 = 0;
  }
  else
  {
    v11 = FigSignalErrorAt();
    v12 = 0;
    v9 = 0;
  }
  v13 = 0;
  if (!(_DWORD)v11)
LABEL_14:
    *a5 = v12;
LABEL_15:
  if (a4)
    *a4 = v13;
  if (v9)
    CFRelease(v9);
  return v11;
}

uint64_t MediaSegmentMediaSequenceNumberList_RB_FIND(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t *v5;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v4 = CFNumberCompare(*(CFNumberRef *)(a2 + 104), *(CFNumberRef *)(v2 + 104), 0);
      if (v4 < 0)
      {
        v5 = (uint64_t *)(v2 + 56);
      }
      else
      {
        if (!v4)
          return v2;
        v5 = (uint64_t *)(v2 + 64);
      }
      v2 = *v5;
    }
    while (*v5);
  }
  return v2;
}

uint64_t FigStreamingCacheMediaStreamCopyCachedTimeRanges(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *AllocatorForMedia;
  CFMutableArrayRef Mutable;
  __CFArray *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t started;
  unint64_t v14;
  unint64_t LastSegmentOfContiguousRangeContainingSegment;
  double v16;
  const __CFAllocator *v17;
  CFDictionaryRef v18;
  CFDictionaryRef v19;
  const __CFAllocator *v20;
  __int128 v21;
  CFDictionaryRef v22;
  CFDictionaryRef v23;
  CMTimeRange v25;
  CMTime duration;
  CMTime v27;
  CMTime v28;
  CMTimeRange range;
  char v30;

  v30 = 0;
  if (a1 && a2 && a3)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
      goto LABEL_8;
    v6 = *(_QWORD *)(a1 + 168);
    if (!v6)
      goto LABEL_8;
    while (v6 != a2)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        goto LABEL_8;
    }
    AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B378]);
    if (!Mutable)
    {
LABEL_8:
      v7 = FigSignalErrorAt();
LABEL_29:
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      return v7;
    }
    v10 = Mutable;
    if ((*(_BYTE *)(a1 + 220) & 2) != 0)
    {
      v11 = stream_EnsurePersistentStreamInfo(a2, &v30);
      if ((_DWORD)v11)
        goto LABEL_31;
    }
    v12 = *(_QWORD *)(a2 + 24);
    if (v12)
    {
      do
      {
        started = v12;
        v12 = *(_QWORD *)(v12 + 8);
      }
      while (v12);
      do
      {
        memset(&range, 0, sizeof(range));
        memset(&v28, 0, sizeof(v28));
        memset(&v27, 0, sizeof(v27));
        if ((*(_BYTE *)(started + 160) & 1) != 0)
        {
          CMTimeMakeWithSeconds(&v28, *(Float64 *)(started + 120), 1000);
          LastSegmentOfContiguousRangeContainingSegment = stream_GetLastSegmentOfContiguousRangeContainingSegment(started, 1);
          v14 = LastSegmentOfContiguousRangeContainingSegment;
          v16 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 120);
          if ((*(_BYTE *)(LastSegmentOfContiguousRangeContainingSegment + 160) & 1) != 0)
            v16 = v16 + *(double *)(LastSegmentOfContiguousRangeContainingSegment + 128);
          CMTimeMakeWithSeconds(&v27, v16 - *(double *)(started + 120), 1000);
          v25.start = v28;
          duration = v27;
          CMTimeRangeMake(&range, &v25.start, &duration);
          v17 = (const __CFAllocator *)FigGetAllocatorForMedia();
          v25 = range;
          v18 = CMTimeRangeCopyAsDictionary(&v25, v17);
          if (!v18)
            goto LABEL_30;
          v19 = v18;
          CFArrayAppendValue(v10, v18);
          CFRelease(v19);
        }
        else
        {
          v14 = started;
        }
        started = MediaSegmentStartTimeList_RB_NEXT(v14);
      }
      while (started);
    }
    if (!CFArrayGetCount(v10))
    {
      v20 = (const __CFAllocator *)FigGetAllocatorForMedia();
      v21 = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 16);
      *(_OWORD *)&range.start.value = *MEMORY[0x1E0CA2E50];
      *(_OWORD *)&range.start.epoch = v21;
      *(_OWORD *)&range.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E50] + 32);
      v22 = CMTimeRangeCopyAsDictionary(&range, v20);
      if (!v22)
      {
LABEL_30:
        v11 = FigSignalErrorAt();
        goto LABEL_31;
      }
      v23 = v22;
      CFArrayAppendValue(v10, v22);
      CFRelease(v23);
    }
    if ((*(_BYTE *)(a1 + 220) & 2) == 0
      || !v30
      || (v11 = stream_UnlockPersistentStreamInfoForAnything(a2), !(_DWORD)v11))
    {
      v7 = 0;
      *a3 = CFRetain(v10);
LABEL_28:
      CFRelease(v10);
      goto LABEL_29;
    }
LABEL_31:
    v7 = v11;
    goto LABEL_28;
  }
  return FigSignalErrorAt();
}

unint64_t MediaSegmentStartTimeList_RB_NEXT(unint64_t a1)
{
  unint64_t v1;
  unint64_t result;
  unint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    do
    {
      result = v1;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
  }
  else
  {
    v3 = a1;
    result = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (!result || *(_QWORD *)(result + 8) != v3)
    {
      do
      {
        result = *(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (!result)
          break;
        v4 = v3 == *(_QWORD *)(result + 16);
        v3 = *(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t FigStreamingCacheMediaStreamMarkComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t FigBaseObject;
  uint64_t (*v12)(uint64_t, const __CFString *, _QWORD);
  int v14;

  v14 = 0;
  if (a1 && a2)
  {
    FigStreamingCacheFlushIOSync(a1);
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272))
    {
      if ((*(_BYTE *)(a1 + 220) & 2) == 0)
        goto LABEL_24;
      v4 = *(_QWORD *)(a1 + 168);
      if (v4)
      {
        while (v4 != a2)
        {
          v4 = *(_QWORD *)(v4 + 8);
          if (!v4)
            goto LABEL_8;
        }
        if (!*(_BYTE *)(a2 + 120))
        {
          v5 = sc_UpgradePersistentStoreForWriting(a1, &v14);
          if (!(_DWORD)v5)
          {
            v7 = *(_QWORD *)(a1 + 280);
            v8 = *(_QWORD *)(a2 + 136);
            v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
            if (!v9)
              goto LABEL_20;
            v10 = v9(v7, v8, 1);
            if (!(_DWORD)v10)
            {
              if ((*(_BYTE *)(*(_QWORD *)a2 + 220) & 2) == 0 || (*(_BYTE *)(a2 + 176) & 2) != 0)
              {
                FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(*(_QWORD *)(a2 + 128));
                v12 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable()
                                                                                                + 8)
                                                                                    + 56);
                if (v12)
                {
                  v10 = v12(FigBaseObject, CFSTR("StreamInfoCompleteState"), *MEMORY[0x1E0C9AE50]);
                  if (!(_DWORD)v10)
                  {
                    v6 = stream_SetNeedsToCommitPersistentStreamInfo((_BYTE *)a2);
                    if (!(_DWORD)v6)
                      *(_BYTE *)(a2 + 120) = 1;
                    goto LABEL_21;
                  }
                  goto LABEL_27;
                }
LABEL_20:
                v6 = 4294954514;
LABEL_21:
                sc_RestorePersistentStoreLockStatus(a1, v14);
                goto LABEL_22;
              }
              v10 = FigSignalErrorAt();
            }
LABEL_27:
            v6 = v10;
            goto LABEL_21;
          }
LABEL_9:
          v6 = v5;
LABEL_22:
          MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
          return v6;
        }
LABEL_24:
        v6 = 0;
        goto LABEL_22;
      }
    }
LABEL_8:
    v5 = FigSignalErrorAt();
    goto LABEL_9;
  }
  return FigSignalErrorAt();
}

uint64_t stream_SetNeedsToCommitPersistentStreamInfo(_BYTE *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)a1 + 220) & 2) != 0 && (a1[176] & 2) == 0)
    return FigSignalErrorAt();
  a1[122] = 1;
  return 0;
}

uint64_t FigStreamingCacheMediaStreamIsComplete(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272) || (v6 = *(_QWORD *)(a1 + 168)) == 0)
  {
LABEL_8:
    v7 = FigSignalErrorAt();
  }
  else
  {
    while (v6 != a2)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        goto LABEL_8;
    }
    v7 = 0;
    *a3 = *(_BYTE *)(a2 + 120);
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheMediaStreamIsWritableToDisk(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272) || (v6 = *(_QWORD *)(a1 + 168)) == 0)
  {
LABEL_8:
    v7 = FigSignalErrorAt();
  }
  else
  {
    while (v6 != a2)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        goto LABEL_8;
    }
    v8 = *(_QWORD *)(a2 + 128);
    if (v8)
    {
      if ((*(_BYTE *)(*(_QWORD *)a2 + 220) & 2) != 0)
        LODWORD(v8) = (*(unsigned __int8 *)(a2 + 176) >> 1) & 1;
      else
        LOBYTE(v8) = 1;
    }
    v7 = 0;
    *a3 = v8;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheMediaStreamSetPersistent(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v3;
  __CFString **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;

  v3 = *MEMORY[0x1E0C9AE50] != a3;
  if (*MEMORY[0x1E0C9AE50] == a3)
    v4 = kFigHLSPersistentStreamInfoEvictionPolicy_Persists;
  else
    v4 = kFigHLSPersistentStreamInfoEvictionPolicy_EvictionByMaxStreamSize;
  v12 = 0;
  if (a1 && a2)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
      goto LABEL_12;
    if ((*(_BYTE *)(a1 + 220) & 2) != 0)
    {
      v7 = *(_QWORD *)(a1 + 168);
      if (!v7)
        goto LABEL_12;
      v8 = (uint64_t)*v4;
      while ((_BYTE *)v7 != a2)
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (!v7)
          goto LABEL_12;
      }
      if (a2[121] != v3)
      {
        if ((*(_BYTE *)(*(_QWORD *)a2 + 220) & 2) == 0 || (a2[176] & 2) != 0)
        {
          v9 = sc_UpgradePersistentStoreForWriting(a1, &v12);
          if (!(_DWORD)v9)
          {
            v10 = stream_SetPropertyForPersistentStreamInfoUpgradingToWritingIfNecessary((uint64_t)a2, (uint64_t)CFSTR("StreamInfoEvictionPolicy"), v8);
            if (!(_DWORD)v10)
            {
              if (a2[120])
              {
                if (!a2[121])
                  stream_DowngradePersistentStreamInfoForReading((uint64_t)a2);
              }
              a2[121] = v3;
            }
            sc_RestorePersistentStoreLockStatus(a1, v12);
            goto LABEL_24;
          }
          goto LABEL_13;
        }
LABEL_12:
        v9 = FigSignalErrorAt();
LABEL_13:
        v10 = v9;
LABEL_24:
        MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
        return v10;
      }
    }
    v10 = 0;
    goto LABEL_24;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaStreamCopyPersistent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a1 && a2 && a3)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272))
    {
      if ((*(_BYTE *)(a1 + 220) & 2) == 0)
        goto LABEL_12;
      v6 = *(_QWORD *)(a1 + 168);
      if (v6)
      {
        while (v6 != a2)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_9;
        }
        if (!*(_BYTE *)(a2 + 121))
        {
          v8 = (_QWORD *)MEMORY[0x1E0C9AE50];
          goto LABEL_14;
        }
LABEL_12:
        v8 = (_QWORD *)MEMORY[0x1E0C9AE40];
LABEL_14:
        v7 = 0;
        *a3 = *v8;
        goto LABEL_15;
      }
    }
LABEL_9:
    v7 = FigSignalErrorAt();
    if ((_DWORD)v7)
    {
LABEL_15:
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      return v7;
    }
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaStreamCreateMediaSegment(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, _QWORD *a6, double a7, double a8)
{
  CFNumberRef v15;
  CFNumberRef v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t valuePtr;

  v19 = 0;
  valuePtr = a5;
  if (!a6)
    return FigSignalErrorAt();
  v15 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  if (!v15)
    return FigSignalErrorAt();
  v16 = v15;
  v17 = sc_CreateMediaSegment(a1, a2, a3, a4, v15, 1, &v19, a7, a8);
  if (!(_DWORD)v17)
    *a6 = v19;
  CFRelease(v16);
  return v17;
}

uint64_t sc_CreateMediaSegment(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5, int a6, unint64_t *a7, double a8, double a9)
{
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  double v24;
  uint64_t *v25;
  unint64_t *v26;
  _QWORD *v27;
  _QWORD *v28;
  const void *v29;
  _BOOL4 v30;
  uint64_t i;
  const __CFArray *Count;
  _QWORD *v33;
  unint64_t v34;
  CFTypeRef v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  int started;
  _QWORD **v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  BOOL v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  double v172;
  _BOOL4 v173;
  int v174;
  int v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  double v179;
  int v180;
  unint64_t v181;
  _OWORD v183[5];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  uint64_t v189;

  v189 = 0;
  v187 = 0u;
  v188 = 0u;
  v185 = 0u;
  v186 = 0u;
  v184 = 0u;
  memset(v183, 0, sizeof(v183));
  if (a1 && a2 && a3 && (a4 & 0x8000000000000000) == 0 && a9 > 0.0 && a7)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272)
      || a6 && *(_BYTE *)(a1 + 217) && (*(double *)(a1 + 200) > a8 || *(double *)(a1 + 208) < a8))
    {
      goto LABEL_18;
    }
    v18 = a9 + 0.0000111111111;
    if (*(_BYTE *)(a1 + 216))
    {
      v19 = *(double *)(a1 + 112);
      if (v19 > 0.0 && v18 + a8 > v19 + *(double *)(a1 + 192))
        goto LABEL_18;
    }
    v20 = *(_QWORD *)(a1 + 168);
    if (!v20)
      goto LABEL_18;
    while (v20 != a2)
    {
      v20 = *(_QWORD *)(v20 + 8);
      if (!v20)
        goto LABEL_18;
    }
    *((_QWORD *)&v184 + 1) = a3;
    *(_QWORD *)&v185 = a4;
    *((double *)&v186 + 1) = a8;
    v23 = (uint64_t *)(a2 + 24);
    v22 = *(_QWORD *)(a2 + 24);
    if (v22)
    {
      v21 = 4294951052;
      do
      {
        v24 = a8 - *(double *)(v22 + 120);
        if (v24 >= 0.0)
        {
          if (v24 == 0.0)
            goto LABEL_307;
          v25 = (uint64_t *)(v22 + 16);
        }
        else
        {
          v25 = (uint64_t *)(v22 + 8);
        }
        v22 = *v25;
      }
      while (v22);
    }
    v26 = (unint64_t *)(a2 + 32);
    v27 = MediaSegmentOffsetList_RB_FIND((_QWORD **)(a2 + 32), v183);
    if (v27)
    {
      v28 = v27;
      v29 = a5;
      v30 = 0;
      for (i = 0; ; ++i)
      {
        Count = (const __CFArray *)v28[17];
        if (Count)
          Count = (const __CFArray *)CFArrayGetCount(Count);
        if (i >= (uint64_t)Count || v30)
          break;
        FigCFArrayGetDoubleAtIndex();
        v30 = vabdd_f64(0.0, a8) < 2.22044605e-16;
      }
      a5 = v29;
      v23 = (uint64_t *)(a2 + 24);
      v26 = (unint64_t *)(a2 + 32);
      if (!v30)
        goto LABEL_18;
    }
    v33 = malloc_type_calloc(1uLL, 0xA8uLL, 0x1060040A1004B64uLL);
    if (!v33)
    {
LABEL_18:
      v21 = FigSignalErrorAt();
LABEL_307:
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      return v21;
    }
    v34 = (unint64_t)v33;
    v33[11] = CFRetain(a3);
    *(_QWORD *)(v34 + 96) = a4;
    if (a5)
      v35 = CFRetain(a5);
    else
      v35 = 0;
    *(_QWORD *)(v34 + 104) = v35;
    *(double *)(v34 + 120) = a8;
    *(double *)(v34 + 128) = v18;
    *(_QWORD *)v34 = a2;
    *(_DWORD *)(v34 + 80) = 1;
    v36 = *(_QWORD *)(a2 + 24);
    CFSetAddValue(*(CFMutableSetRef *)(a2 + 48), (const void *)v34);
    v37 = *(_QWORD *)(a2 + 24);
    if (v37)
    {
      v38 = *(_QWORD *)(a2 + 24);
      do
      {
        v39 = v38;
        v40 = *(double *)(v34 + 120) - *(double *)(v38 + 120);
        if (v40 >= 0.0)
          v41 = 0;
        else
          v41 = -1;
        if (v40 > 0.0)
          v42 = 1;
        else
          v42 = v41;
        if (v40 >= 0.0)
        {
          if (!v42)
            goto LABEL_131;
          v43 = (uint64_t *)(v39 + 16);
        }
        else
        {
          v43 = (uint64_t *)(v39 + 8);
        }
        v38 = *v43;
      }
      while (v38);
    }
    else
    {
      v39 = 0;
      v42 = 0;
    }
    if ((*(_QWORD *)(v34 + 24) & 1) != 0)
      v44 = v39 | 1;
    else
      v44 = v39;
    v45 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFFELL);
    v46 = v44 | 1;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 16) = 0;
    *(_QWORD *)(v34 + 24) = v44 | 1;
    v47 = (unint64_t *)v23;
    v48 = v34;
    if (v39)
    {
      if (v42 < 0)
        v47 = (unint64_t *)(v39 + 8);
      else
        v47 = (unint64_t *)(v39 + 16);
      v48 = v37;
    }
    *v47 = v34;
    if (v45)
    {
      v49 = v34;
      do
      {
        v50 = v45[3];
        if ((v50 & 1) == 0)
          break;
        v51 = (_QWORD *)(v50 & 0xFFFFFFFFFFFFFFFELL);
        v52 = *(_QWORD **)((v50 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if (v52 == v45)
        {
          v52 = (_QWORD *)v51[2];
          if (!v52 || (v53 = v52[3], (v53 & 1) == 0))
          {
            v56 = (_QWORD *)v45[2];
            if (v56 == (_QWORD *)v49)
            {
              v62 = *(_QWORD *)(v49 + 8);
              v45[2] = v62;
              if (v62)
              {
                v63 = v46 | 1;
                if ((*(_QWORD *)(v62 + 24) & 1) == 0)
                  v63 = (uint64_t)v45;
                *(_QWORD *)(v62 + 24) = v63;
                v64 = v45[3];
                v46 = *(_QWORD *)(v49 + 24);
              }
              else
              {
                v64 = v50;
              }
              *(_QWORD *)(v49 + 24) = v64 & 0xFFFFFFFFFFFFFFFELL | v46 & 1;
              if ((v64 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v74 = v45[3];
                v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
                if (*(_QWORD **)((v74 & 0xFFFFFFFFFFFFFFFELL) + 8) == v45)
                  *(_QWORD *)(v75 + 8) = v49;
                else
                  *(_QWORD *)(v75 + 16) = v49;
              }
              else
              {
                *v23 = v49;
                v74 = v45[3];
                v48 = v49;
              }
              *(_QWORD *)(v49 + 8) = v45;
              if ((v74 & 1) != 0)
                v76 = v49 | 1;
              else
                v76 = v49;
              v45[3] = v76;
              v58 = v51[1];
              v56 = *(_QWORD **)(v58 + 16);
              v57 = *(_QWORD *)(v49 + 24) & 0xFFFFFFFFFFFFFFFELL;
              v55 = (unint64_t)v45;
            }
            else
            {
              v57 = v50 & 0xFFFFFFFFFFFFFFFELL;
              v58 = (uint64_t)v45;
              v55 = v49;
              v49 = (unint64_t)v45;
            }
            *(_QWORD *)(v49 + 24) = v57;
            v77 = v51[3] | 1;
            v51[3] = v77;
            v51[1] = v56;
            if (v56)
            {
              v78 = v50 | 1;
              if ((v56[3] & 1) != 0)
                v79 = (_QWORD *)v78;
              else
                v79 = v51;
              v56[3] = v79;
              v77 = v51[3];
            }
            *(_QWORD *)(v58 + 24) = v77 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v58 + 24) & 1;
            if ((v77 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v80 = v51[3];
              v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD **)((v80 & 0xFFFFFFFFFFFFFFFELL) + 8) == v51)
                *(_QWORD *)(v81 + 8) = v58;
              else
                *(_QWORD *)(v81 + 16) = v58;
            }
            else
            {
              *v23 = v58;
              v80 = v51[3];
              v48 = v58;
            }
            *(_QWORD *)(v58 + 16) = v51;
            if ((v80 & 1) != 0)
              v68 = v58 | 1;
            else
              v68 = v58;
            goto LABEL_128;
          }
        }
        else if (!v52 || (v53 = v52[3], (v53 & 1) == 0))
        {
          if (v45[1] == v49)
          {
            v59 = *(_QWORD *)(v49 + 16);
            v45[1] = v59;
            if (v59)
            {
              v60 = v46 | 1;
              if ((*(_QWORD *)(v59 + 24) & 1) == 0)
                v60 = (uint64_t)v45;
              *(_QWORD *)(v59 + 24) = v60;
              v61 = v45[3];
              v46 = *(_QWORD *)(v49 + 24);
            }
            else
            {
              v61 = v50;
            }
            *(_QWORD *)(v49 + 24) = v61 & 0xFFFFFFFFFFFFFFFELL | v46 & 1;
            if ((v61 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v65 = v45[3];
              v66 = v65 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD **)((v65 & 0xFFFFFFFFFFFFFFFELL) + 8) == v45)
                *(_QWORD *)(v66 + 8) = v49;
              else
                *(_QWORD *)(v66 + 16) = v49;
            }
            else
            {
              *v23 = v49;
              v65 = v45[3];
              v48 = v49;
            }
            *(_QWORD *)(v49 + 16) = v45;
            if ((v65 & 1) != 0)
              v67 = v49 | 1;
            else
              v67 = v49;
            v45[3] = v67;
            v54 = *(_QWORD *)(v49 + 24) & 0xFFFFFFFFFFFFFFFELL;
            v55 = (unint64_t)v45;
          }
          else
          {
            v54 = v50 & 0xFFFFFFFFFFFFFFFELL;
            v55 = v49;
            v49 = (unint64_t)v45;
          }
          *(_QWORD *)(v49 + 24) = v54;
          v68 = v51[2];
          v69 = v51[3] | 1;
          v51[3] = v69;
          v70 = *(_QWORD *)(v68 + 8);
          v51[2] = v70;
          if (v70)
          {
            v71 = v50 | 1;
            if ((*(_QWORD *)(v70 + 24) & 1) == 0)
              v71 = (uint64_t)v51;
            *(_QWORD *)(v70 + 24) = v71;
            v69 = v51[3];
          }
          *(_QWORD *)(v68 + 24) = v69 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v68 + 24) & 1;
          if ((v69 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v72 = v51[3];
            v73 = v72 & 0xFFFFFFFFFFFFFFFELL;
            if (*(_QWORD **)((v72 & 0xFFFFFFFFFFFFFFFELL) + 8) == v51)
              *(_QWORD *)(v73 + 8) = v68;
            else
              *(_QWORD *)(v73 + 16) = v68;
          }
          else
          {
            *v23 = v68;
            v72 = v51[3];
            v48 = v68;
          }
          *(_QWORD *)(v68 + 8) = v51;
          if ((v72 & 1) != 0)
            v68 |= 1uLL;
LABEL_128:
          v51[3] = v68;
          goto LABEL_129;
        }
        v52[3] = v53 & 0xFFFFFFFFFFFFFFFELL;
        v45[3] &= ~1uLL;
        v51[3] |= 1uLL;
        v55 = v50 & 0xFFFFFFFFFFFFFFFELL;
LABEL_129:
        v46 = *(_QWORD *)(v55 + 24);
        v49 = v55;
        v45 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
      }
      while ((v46 & 0xFFFFFFFFFFFFFFFELL) != 0);
    }
    *(_QWORD *)(v48 + 24) &= ~1uLL;
LABEL_131:
    v82 = (_QWORD *)*v26;
    if (*v26)
    {
      do
      {
        v83 = (unint64_t)v82;
        started = segment_SortByURLAndStartOffset((_QWORD *)v34, v82);
        if (started < 0)
        {
          v85 = (_QWORD **)(v83 + 32);
        }
        else
        {
          if (!started)
            goto LABEL_208;
          v85 = (_QWORD **)(v83 + 40);
        }
        v82 = *v85;
      }
      while (v82);
    }
    else
    {
      v83 = 0;
      started = 0;
    }
    v86 = *(_QWORD *)(v34 + 48) & 1 | v83 & 0xFFFFFFFFFFFFFFFELL;
    if ((*(_QWORD *)(v34 + 48) & 1) == 0)
      v86 = v83;
    LOBYTE(v87) = v86 | 1;
    *(_QWORD *)(v34 + 32) = 0;
    *(_QWORD *)(v34 + 40) = 0;
    *(_QWORD *)(v34 + 48) = v86 | 1;
    v88 = (unint64_t *)(v83 + 40);
    if (started < 0)
      v88 = (unint64_t *)(v83 + 32);
    if (!v83)
      v88 = v26;
    *v88 = v34;
    v89 = v86 & 0xFFFFFFFFFFFFFFFELL;
    if ((v86 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      v90 = v34;
      do
      {
        v91 = *(_QWORD *)(v89 + 48);
        if ((v91 & 1) == 0)
          break;
        v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
        v93 = *(_QWORD *)((v91 & 0xFFFFFFFFFFFFFFFELL) + 32);
        if (v93 == v89)
        {
          v93 = *(_QWORD *)(v92 + 40);
          if (!v93 || (v94 = *(_QWORD *)(v93 + 48), (v94 & 1) == 0))
          {
            v97 = *(_QWORD **)(v89 + 40);
            if (v97 == (_QWORD *)v90)
            {
              v104 = *(_QWORD *)(v90 + 32);
              *(_QWORD *)(v89 + 40) = v104;
              if (v104)
              {
                v105 = *(_QWORD *)(v104 + 48) & 1 | v89;
                if ((*(_QWORD *)(v104 + 48) & 1) == 0)
                  v105 = v89;
                *(_QWORD *)(v104 + 48) = v105;
                v91 = *(_QWORD *)(v89 + 48);
                v87 = *(_QWORD *)(v90 + 48);
              }
              *(_QWORD *)(v90 + 48) = v91 & 0xFFFFFFFFFFFFFFFELL | v87 & 1;
              if ((v91 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v106 = *(_QWORD *)(v89 + 48);
                v107 = v106 & 0xFFFFFFFFFFFFFFFELL;
                if (*(_QWORD *)((v106 & 0xFFFFFFFFFFFFFFFELL) + 32) == v89)
                  *(_QWORD *)(v107 + 32) = v90;
                else
                  *(_QWORD *)(v107 + 40) = v90;
              }
              else
              {
                *v26 = v90;
                v106 = *(_QWORD *)(v89 + 48);
              }
              *(_QWORD *)(v90 + 32) = v89;
              v119 = v106 & 1;
              v108 = v119 == 0;
              v120 = v119 | v90 & 0xFFFFFFFFFFFFFFFELL;
              if (v108)
                v120 = v90;
              *(_QWORD *)(v89 + 48) = v120;
              v99 = *(_QWORD *)(v92 + 32);
              v97 = *(_QWORD **)(v99 + 40);
              v98 = *(_QWORD *)(v90 + 48) & 0xFFFFFFFFFFFFFFFELL;
              v96 = v89;
            }
            else
            {
              v98 = v91 & 0xFFFFFFFFFFFFFFFELL;
              v99 = v89;
              v96 = v90;
              v90 = v89;
            }
            *(_QWORD *)(v90 + 48) = v98;
            v121 = *(_QWORD *)(v92 + 48) | 1;
            *(_QWORD *)(v92 + 48) = v121;
            *(_QWORD *)(v92 + 32) = v97;
            if (v97)
            {
              v122 = v97[6] & 1 | v92;
              if ((v97[6] & 1) == 0)
                v122 = v92;
              v97[6] = v122;
              v121 = *(_QWORD *)(v92 + 48);
            }
            *(_QWORD *)(v99 + 48) = v121 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v99 + 48) & 1;
            if ((v121 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v123 = *(_QWORD *)(v92 + 48);
              v124 = v123 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)((v123 & 0xFFFFFFFFFFFFFFFELL) + 32) == v92)
                *(_QWORD *)(v124 + 32) = v99;
              else
                *(_QWORD *)(v124 + 40) = v99;
            }
            else
            {
              *v26 = v99;
              v123 = *(_QWORD *)(v92 + 48);
            }
            *(_QWORD *)(v99 + 40) = v92;
            v125 = v123 & 1;
            v108 = v125 == 0;
            v111 = v125 | v99 & 0xFFFFFFFFFFFFFFFELL;
            if (v108)
              v111 = v99;
            goto LABEL_205;
          }
        }
        else if (!v93 || (v94 = *(_QWORD *)(v93 + 48), (v94 & 1) == 0))
        {
          if (*(_QWORD *)(v89 + 32) == v90)
          {
            v100 = *(_QWORD *)(v90 + 40);
            *(_QWORD *)(v89 + 32) = v100;
            if (v100)
            {
              v101 = *(_QWORD *)(v100 + 48) & 1 | v89;
              if ((*(_QWORD *)(v100 + 48) & 1) == 0)
                v101 = v89;
              *(_QWORD *)(v100 + 48) = v101;
              v91 = *(_QWORD *)(v89 + 48);
              v87 = *(_QWORD *)(v90 + 48);
            }
            *(_QWORD *)(v90 + 48) = v91 & 0xFFFFFFFFFFFFFFFELL | v87 & 1;
            if ((v91 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v102 = *(_QWORD *)(v89 + 48);
              v103 = v102 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)((v102 & 0xFFFFFFFFFFFFFFFELL) + 32) == v89)
                *(_QWORD *)(v103 + 32) = v90;
              else
                *(_QWORD *)(v103 + 40) = v90;
            }
            else
            {
              *v26 = v90;
              v102 = *(_QWORD *)(v89 + 48);
            }
            *(_QWORD *)(v90 + 40) = v89;
            v109 = v102 & 1;
            v108 = v109 == 0;
            v110 = v109 | v90 & 0xFFFFFFFFFFFFFFFELL;
            if (v108)
              v110 = v90;
            *(_QWORD *)(v89 + 48) = v110;
            v95 = *(_QWORD *)(v90 + 48) & 0xFFFFFFFFFFFFFFFELL;
            v96 = v89;
          }
          else
          {
            v95 = v91 & 0xFFFFFFFFFFFFFFFELL;
            v96 = v90;
            v90 = v89;
          }
          *(_QWORD *)(v90 + 48) = v95;
          v111 = *(_QWORD *)(v92 + 40);
          v112 = *(_QWORD *)(v92 + 48) | 1;
          *(_QWORD *)(v92 + 48) = v112;
          v113 = *(_QWORD *)(v111 + 32);
          *(_QWORD *)(v92 + 40) = v113;
          if (v113)
          {
            v114 = *(_QWORD *)(v113 + 48) & 1 | v92;
            if ((*(_QWORD *)(v113 + 48) & 1) == 0)
              v114 = v92;
            *(_QWORD *)(v113 + 48) = v114;
            v112 = *(_QWORD *)(v92 + 48);
          }
          *(_QWORD *)(v111 + 48) = v112 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v111 + 48) & 1;
          if ((v112 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v115 = *(_QWORD *)(v92 + 48);
            v116 = v115 & 0xFFFFFFFFFFFFFFFELL;
            if (*(_QWORD *)((v115 & 0xFFFFFFFFFFFFFFFELL) + 32) == v92)
              *(_QWORD *)(v116 + 32) = v111;
            else
              *(_QWORD *)(v116 + 40) = v111;
          }
          else
          {
            *v26 = v111;
            v115 = *(_QWORD *)(v92 + 48);
          }
          *(_QWORD *)(v111 + 32) = v92;
          v117 = v115 & 1;
          v108 = v117 == 0;
          v118 = v117 | v111 & 0xFFFFFFFFFFFFFFFELL;
          if (!v108)
            v111 = v118;
LABEL_205:
          *(_QWORD *)(v92 + 48) = v111;
          goto LABEL_206;
        }
        *(_QWORD *)(v93 + 48) = v94 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v89 + 48) &= ~1uLL;
        *(_QWORD *)(v92 + 48) |= 1uLL;
        v96 = v91 & 0xFFFFFFFFFFFFFFFELL;
LABEL_206:
        v87 = *(_QWORD *)(v96 + 48);
        v90 = v96;
        v89 = v87 & 0xFFFFFFFFFFFFFFFELL;
      }
      while ((v87 & 0xFFFFFFFFFFFFFFFELL) != 0);
    }
    *(_QWORD *)(*v26 + 48) &= ~1uLL;
LABEL_208:
    if (a5)
    {
      v128 = *(_QWORD *)(a2 + 40);
      v127 = (unint64_t *)(a2 + 40);
      v126 = v128;
      if (v128)
      {
        do
        {
          v129 = v126;
          v130 = CFNumberCompare(*(CFNumberRef *)(v34 + 104), *(CFNumberRef *)(v126 + 104), 0);
          if (v130 < 0)
          {
            v131 = (unint64_t *)(v129 + 56);
          }
          else
          {
            if (!v130)
              goto LABEL_286;
            v131 = (unint64_t *)(v129 + 64);
          }
          v126 = *v131;
        }
        while (v126);
      }
      else
      {
        v129 = 0;
        v130 = 0;
      }
      v132 = *(_QWORD *)(v34 + 72) & 1 | v129 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(_QWORD *)(v34 + 72) & 1) == 0)
        v132 = v129;
      LOBYTE(v133) = v132 | 1;
      *(_QWORD *)(v34 + 56) = 0;
      *(_QWORD *)(v34 + 64) = 0;
      *(_QWORD *)(v34 + 72) = v132 | 1;
      v134 = (unint64_t *)(v129 + 64);
      if (v130 < 0)
        v134 = (unint64_t *)(v129 + 56);
      if (!v129)
        v134 = v127;
      *v134 = v34;
      v135 = v132 & 0xFFFFFFFFFFFFFFFELL;
      if ((v132 & 0xFFFFFFFFFFFFFFFELL) != 0)
      {
        v136 = v34;
        do
        {
          v137 = *(_QWORD *)(v135 + 72);
          if ((v137 & 1) == 0)
            break;
          v138 = v137 & 0xFFFFFFFFFFFFFFFELL;
          v139 = *(_QWORD *)((v137 & 0xFFFFFFFFFFFFFFFELL) + 56);
          if (v139 == v135)
          {
            v139 = *(_QWORD *)(v138 + 64);
            if (!v139 || (v140 = *(_QWORD *)(v139 + 72), (v140 & 1) == 0))
            {
              v143 = *(_QWORD **)(v135 + 64);
              if (v143 == (_QWORD *)v136)
              {
                v150 = *(_QWORD *)(v136 + 56);
                *(_QWORD *)(v135 + 64) = v150;
                if (v150)
                {
                  v151 = *(_QWORD *)(v150 + 72) & 1 | v135;
                  if ((*(_QWORD *)(v150 + 72) & 1) == 0)
                    v151 = v135;
                  *(_QWORD *)(v150 + 72) = v151;
                  v137 = *(_QWORD *)(v135 + 72);
                  v133 = *(_QWORD *)(v136 + 72);
                }
                *(_QWORD *)(v136 + 72) = v137 & 0xFFFFFFFFFFFFFFFELL | v133 & 1;
                if ((v137 & 0xFFFFFFFFFFFFFFFELL) != 0)
                {
                  v152 = *(_QWORD *)(v135 + 72);
                  v153 = v152 & 0xFFFFFFFFFFFFFFFELL;
                  if (*(_QWORD *)((v152 & 0xFFFFFFFFFFFFFFFELL) + 56) == v135)
                    *(_QWORD *)(v153 + 56) = v136;
                  else
                    *(_QWORD *)(v153 + 64) = v136;
                }
                else
                {
                  *v127 = v136;
                  v152 = *(_QWORD *)(v135 + 72);
                }
                *(_QWORD *)(v136 + 56) = v135;
                v164 = v152 & 1;
                v108 = v164 == 0;
                v165 = v164 | v136 & 0xFFFFFFFFFFFFFFFELL;
                if (v108)
                  v165 = v136;
                *(_QWORD *)(v135 + 72) = v165;
                v145 = *(_QWORD *)(v138 + 56);
                v143 = *(_QWORD **)(v145 + 64);
                v144 = *(_QWORD *)(v136 + 72) & 0xFFFFFFFFFFFFFFFELL;
                v142 = v135;
              }
              else
              {
                v144 = v137 & 0xFFFFFFFFFFFFFFFELL;
                v145 = v135;
                v142 = v136;
                v136 = v135;
              }
              *(_QWORD *)(v136 + 72) = v144;
              v166 = *(_QWORD *)(v138 + 72) | 1;
              *(_QWORD *)(v138 + 72) = v166;
              *(_QWORD *)(v138 + 56) = v143;
              if (v143)
              {
                v167 = v143[9] & 1 | v138;
                if ((v143[9] & 1) == 0)
                  v167 = v138;
                v143[9] = v167;
                v166 = *(_QWORD *)(v138 + 72);
              }
              *(_QWORD *)(v145 + 72) = v166 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v145 + 72) & 1;
              if ((v166 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v168 = *(_QWORD *)(v138 + 72);
                v169 = v168 & 0xFFFFFFFFFFFFFFFELL;
                if (*(_QWORD *)((v168 & 0xFFFFFFFFFFFFFFFELL) + 56) == v138)
                  *(_QWORD *)(v169 + 56) = v145;
                else
                  *(_QWORD *)(v169 + 64) = v145;
              }
              else
              {
                *v127 = v145;
                v168 = *(_QWORD *)(v138 + 72);
              }
              *(_QWORD *)(v145 + 64) = v138;
              v170 = v168 & 1;
              v108 = v170 == 0;
              v156 = v170 | v145 & 0xFFFFFFFFFFFFFFFELL;
              if (v108)
                v156 = v145;
              goto LABEL_283;
            }
          }
          else if (!v139 || (v140 = *(_QWORD *)(v139 + 72), (v140 & 1) == 0))
          {
            if (*(_QWORD *)(v135 + 56) == v136)
            {
              v146 = *(_QWORD *)(v136 + 64);
              *(_QWORD *)(v135 + 56) = v146;
              if (v146)
              {
                v147 = *(_QWORD *)(v146 + 72) & 1 | v135;
                if ((*(_QWORD *)(v146 + 72) & 1) == 0)
                  v147 = v135;
                *(_QWORD *)(v146 + 72) = v147;
                v137 = *(_QWORD *)(v135 + 72);
                v133 = *(_QWORD *)(v136 + 72);
              }
              *(_QWORD *)(v136 + 72) = v137 & 0xFFFFFFFFFFFFFFFELL | v133 & 1;
              if ((v137 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v148 = *(_QWORD *)(v135 + 72);
                v149 = v148 & 0xFFFFFFFFFFFFFFFELL;
                if (*(_QWORD *)((v148 & 0xFFFFFFFFFFFFFFFELL) + 56) == v135)
                  *(_QWORD *)(v149 + 56) = v136;
                else
                  *(_QWORD *)(v149 + 64) = v136;
              }
              else
              {
                *v127 = v136;
                v148 = *(_QWORD *)(v135 + 72);
              }
              *(_QWORD *)(v136 + 64) = v135;
              v154 = v148 & 1;
              v108 = v154 == 0;
              v155 = v154 | v136 & 0xFFFFFFFFFFFFFFFELL;
              if (v108)
                v155 = v136;
              *(_QWORD *)(v135 + 72) = v155;
              v141 = *(_QWORD *)(v136 + 72) & 0xFFFFFFFFFFFFFFFELL;
              v142 = v135;
            }
            else
            {
              v141 = v137 & 0xFFFFFFFFFFFFFFFELL;
              v142 = v136;
              v136 = v135;
            }
            *(_QWORD *)(v136 + 72) = v141;
            v156 = *(_QWORD *)(v138 + 64);
            v157 = *(_QWORD *)(v138 + 72) | 1;
            *(_QWORD *)(v138 + 72) = v157;
            v158 = *(_QWORD *)(v156 + 56);
            *(_QWORD *)(v138 + 64) = v158;
            if (v158)
            {
              v159 = *(_QWORD *)(v158 + 72) & 1 | v138;
              if ((*(_QWORD *)(v158 + 72) & 1) == 0)
                v159 = v138;
              *(_QWORD *)(v158 + 72) = v159;
              v157 = *(_QWORD *)(v138 + 72);
            }
            *(_QWORD *)(v156 + 72) = v157 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v156 + 72) & 1;
            if ((v157 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v160 = *(_QWORD *)(v138 + 72);
              v161 = v160 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)((v160 & 0xFFFFFFFFFFFFFFFELL) + 56) == v138)
                *(_QWORD *)(v161 + 56) = v156;
              else
                *(_QWORD *)(v161 + 64) = v156;
            }
            else
            {
              *v127 = v156;
              v160 = *(_QWORD *)(v138 + 72);
            }
            *(_QWORD *)(v156 + 56) = v138;
            v162 = v160 & 1;
            v108 = v162 == 0;
            v163 = v162 | v156 & 0xFFFFFFFFFFFFFFFELL;
            if (!v108)
              v156 = v163;
LABEL_283:
            *(_QWORD *)(v138 + 72) = v156;
            goto LABEL_284;
          }
          *(_QWORD *)(v139 + 72) = v140 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)(v135 + 72) &= ~1uLL;
          *(_QWORD *)(v138 + 72) |= 1uLL;
          v142 = v137 & 0xFFFFFFFFFFFFFFFELL;
LABEL_284:
          v133 = *(_QWORD *)(v142 + 72);
          v136 = v142;
          v135 = v133 & 0xFFFFFFFFFFFFFFFELL;
        }
        while ((v133 & 0xFFFFFFFFFFFFFFFELL) != 0);
      }
      *(_QWORD *)(*v127 + 72) &= ~1uLL;
    }
LABEL_286:
    if (v36)
    {
      v171 = MediaSegmentStartTimeList_RB_PREV(v34);
      if (v171 && (v172 = *(double *)(v34 + 120), *(double *)(v171 + 120) + *(double *)(v171 + 128) >= v172))
      {
        v176 = *(_DWORD *)(v171 + 160);
        v173 = 0;
        if ((v176 & 4) != 0)
        {
          *(_DWORD *)(v171 + 160) = v176 & 0xFFFFFFFB;
          v177 = MediaSegmentStartTimeList_RB_NEXT(v34);
          if (!v177 || v172 + *(double *)(v34 + 128) < *(double *)(v177 + 120))
            v173 = 1;
        }
        v174 = 0;
      }
      else
      {
        v173 = 0;
        v174 = 1;
      }
      v178 = MediaSegmentStartTimeList_RB_NEXT(v34);
      if (!v178)
        goto LABEL_304;
      v179 = *(double *)(v34 + 120);
      if (v179 + *(double *)(v34 + 128) < *(double *)(v178 + 120))
        goto LABEL_304;
      v180 = *(_DWORD *)(v178 + 160);
      if ((v180 & 2) != 0)
      {
        *(_DWORD *)(v178 + 160) = v180 & 0xFFFFFFFD;
        v181 = MediaSegmentStartTimeList_RB_PREV(v34);
        if (!v181 || *(double *)(v181 + 120) + *(double *)(v181 + 128) < v179)
          v174 = 1;
      }
      if (!v173)
      {
        if (!v174)
          goto LABEL_306;
        v175 = 2;
      }
      else
      {
LABEL_304:
        v175 = 4;
      }
    }
    else
    {
      v175 = 6;
    }
    *(_DWORD *)(v34 + 160) |= v175;
LABEL_306:
    v21 = 0;
    *a7 = v34;
    goto LABEL_307;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaSegmentGetLength(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;

  if (a1 && a2 && a3 && a5)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
      goto LABEL_9;
    v10 = *(_QWORD *)(a1 + 168);
    if (!v10)
      goto LABEL_9;
    while (v10 != a2)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if (!v10)
        goto LABEL_9;
    }
    if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3))
    {
      v11 = 0;
      v13 = a3[14];
      v14 = v13 >= a4;
      v15 = v13 - a4;
      if (v14)
        v12 = v15;
      else
        v12 = 0;
    }
    else
    {
LABEL_9:
      v11 = FigSignalErrorAt();
      v12 = 0;
    }
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    if ((_DWORD)v11)
      return v11;
  }
  else
  {
    v11 = FigSignalErrorAt();
    v12 = 0;
    if ((_DWORD)v11)
      return v11;
  }
  if ((v12 & 0x8000000000000000) == 0)
  {
    v11 = 0;
    *a5 = v12;
    return v11;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaSegmentCopyBytes(uint64_t a1, uint64_t a2, CMBlockBufferRef *a3, size_t a4, size_t a5, BOOL *a6, CMBlockBufferRef *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v18;
  size_t v19;
  CMBlockBufferRef *v20;
  const __CFAllocator *AllocatorForMedia;
  CMBlockBufferRef v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, CMBlockBufferRef, uint64_t);
  uint64_t v25;
  CMBlockBufferRef v26;
  CMBlockBufferRef blockBufferOut;

  blockBufferOut = 0;
  if (a1 && a2 && a3 && a5 && a7)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (*(_BYTE *)(a1 + 272))
      goto LABEL_10;
    v14 = *(_QWORD *)(a1 + 168);
    if (!v14)
      goto LABEL_10;
    while (v14 != a2)
    {
      v14 = *(_QWORD *)(v14 + 8);
      if (!v14)
        goto LABEL_10;
    }
    if (!CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3) || (v18 = (size_t)a3[14], v18 <= a4))
    {
LABEL_10:
      v15 = FigSignalErrorAt();
LABEL_11:
      v16 = v15;
LABEL_12:
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      return v16;
    }
    if (a5 + a4 <= v18)
      v19 = a5;
    else
      v19 = v18 - a4;
    v20 = a3 + 19;
    if (a3[19])
    {
LABEL_19:
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      v15 = CMBlockBufferCreateWithBufferReference(AllocatorForMedia, *v20, a4, v19, 0, &blockBufferOut);
      if (!(_DWORD)v15)
      {
        if (v19 + a4 >= v18 && ((_BYTE)a3[20] & 0x20) != 0 && *v20)
        {
          CFRelease(*v20);
          *v20 = 0;
        }
        *a7 = blockBufferOut;
        v16 = 0;
        if (a6)
          *a6 = v19 + a4 < v18;
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    v22 = *a3;
    if ((*(_BYTE *)(*(_QWORD *)*a3 + 220) & 2) != 0 && (*((_BYTE *)v22 + 176) & 1) == 0)
    {
      v25 = FigSignalErrorAt();
    }
    else
    {
      if (((_BYTE)a3[20] & 0x20) == 0)
        goto LABEL_29;
      v23 = *((_QWORD *)v22 + 16);
      v26 = a3[18];
      v24 = *(uint64_t (**)(uint64_t, CMBlockBufferRef, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                         + 80);
      if (!v24)
      {
        v16 = 4294954514;
        goto LABEL_12;
      }
      v25 = v24(v23, v26, (uint64_t)(a3 + 19));
    }
    v16 = v25;
    if ((_DWORD)v25)
      goto LABEL_12;
    if (*v20)
      goto LABEL_19;
LABEL_29:
    v16 = 4294951049;
    goto LABEL_12;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheMediaSegmentAppendBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMBlockBufferRef theBuffer, size_t a6, size_t a7)
{
  size_t DataLength;
  uint64_t v15;
  uint64_t Empty;
  uint64_t v17;
  char *Value;
  char *v19;
  const __CFAllocator *AllocatorForMedia;
  void *v21;
  const __CFAllocator *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  BOOL v31;
  size_t v32;
  CMBlockBufferCustomBlockSource v34;
  CMBlockBufferRef blockBufferOut;
  unint64_t v36;

  blockBufferOut = 0;
  v36 = 0;
  v34.version = 0;
  v34.refCon = 0;
  v34.AllocateBlock = (void *(__cdecl *)(void *, size_t))sc_AllocateSegmentBlock;
  v34.FreeBlock = (void (__cdecl *)(void *, void *, size_t))sc_FreeSegmentBlock;
  if (!a1 || !a2 || !a3 || !theBuffer || !a7)
    return FigSignalErrorAt();
  DataLength = CMBlockBufferGetDataLength(theBuffer);
  if (DataLength <= a6)
    goto LABEL_12;
  if (a7 + a6 > DataLength)
    goto LABEL_12;
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
    goto LABEL_12;
  v15 = *(_QWORD *)(a1 + 168);
  if (!v15)
    goto LABEL_12;
  while (v15 != a2)
  {
    v15 = *(_QWORD *)(v15 + 8);
    if (!v15)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(*(_QWORD *)a2 + 220) & 2) != 0 && (*(_BYTE *)(a2 + 176) & 2) == 0
    || !CFSetContainsValue(*(CFSetRef *)(a2 + 48), (const void *)a3)
    || *(_QWORD *)(a3 + 112) != a4
    || (*(_BYTE *)(a3 + 160) & 1) != 0)
  {
    goto LABEL_12;
  }
  Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56));
  if (Value && (v19 = &Value[-a7], (unint64_t)Value >= a7)
    || (CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), 0),
        v19 = 0,
        sc_HasEnoughAvailableBackingMemory(a1, a7, (uint64_t *)&v36)))
  {
LABEL_24:
    if (!*(_QWORD *)(a3 + 152))
    {
      AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      Empty = CMBlockBufferCreateEmpty(AllocatorForMedia, 0, 0, (CMBlockBufferRef *)(a3 + 152));
      if ((_DWORD)Empty)
        goto LABEL_13;
    }
    v21 = *(void **)(a1 + 264);
    if (v21)
      v21 = (void *)CFRetain(v21);
    v34.refCon = v21;
    v22 = (const __CFAllocator *)FigGetAllocatorForMedia();
    Empty = CMBlockBufferCreateContiguous(v22, theBuffer, 0, &v34, a6, a7, 2u, &blockBufferOut);
    if ((_DWORD)Empty)
      goto LABEL_13;
    Empty = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)(a3 + 152), blockBufferOut, 0, 0, 0);
    if ((_DWORD)Empty)
      goto LABEL_13;
    if ((*(_BYTE *)(a1 + 220) & 2) != 0 || !*(_QWORD *)(a1 + 136))
    {
LABEL_63:
      *(_DWORD *)(a3 + 160) |= 0x10u;
      *(_QWORD *)(a3 + 112) += a7;
      *(_QWORD *)(a1 + 184) += a7;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 232), (const void *)*(int *)(a2 + 56), v19);
      v17 = 0;
      goto LABEL_64;
    }
    v23 = *(_QWORD *)(a1 + 152);
    v24 = a7 - v23;
    if ((uint64_t)a7 >= v23)
      v25 = a7 - v23;
    else
      v25 = 0;
    if (v25 < 1)
      goto LABEL_61;
    v26 = malloc_type_malloc(0x18uLL, 0x10A0040319E9F20uLL);
    v27 = v26;
    if (v26)
    {
      *v26 = a1;
      v26[1] = v25;
      v28 = FigSimpleMutexCreate();
      v27[2] = v28;
      if (!v28)
      {
        free(v27);
        v27 = 0;
      }
    }
    if (FigMemoryDemandIssueSync_onceToken == -1)
    {
      if (!v27)
        goto LABEL_61;
    }
    else
    {
      dispatch_once_f(&FigMemoryDemandIssueSync_onceToken, 0, (dispatch_function_t)figMemoryDemandIssueSetupOnce);
      if (!v27)
        goto LABEL_61;
    }
    v29 = FigSimpleMutexTryLock();
    if (v29)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      MEMORY[0x19402EEEC](v27[2]);
      v24 = v27[1];
      MEMORY[0x19402EF04](v27[2]);
      MEMORY[0x19402EF04](gFigMemoryDemandIssueMutex);
    }
    FigSimpleMutexDestroy();
    free(v27);
    if (v29)
    {
      v30 = v25 - v24;
      if (v25 < v24)
        v30 = 0;
      v31 = v30 >= v25;
      v32 = v30 - v25;
      if (!v31)
        v32 = 0;
      goto LABEL_62;
    }
LABEL_61:
    v32 = *(_QWORD *)(a1 + 152) - a7;
LABEL_62:
    *(_QWORD *)(a1 + 152) = v32;
    goto LABEL_63;
  }
  if (sc_GetBackingForMediaStreamAtTime(a1, a2, v36, *(double *)(a3 + 120))
    || (*(_BYTE *)(a1 + 220) & 2) == 0
    && *(_BYTE *)(a1 + 216)
    && *(double *)(a3 + 120) - *(double *)(a1 + 192) < *(double *)(a1 + 104))
  {
    v19 = 0;
    goto LABEL_24;
  }
LABEL_12:
  Empty = FigSignalErrorAt();
LABEL_13:
  v17 = Empty;
LABEL_64:
  if (blockBufferOut)
    CFRelease(blockBufferOut);
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v17;
}

void *sc_AllocateSegmentBlock(uint64_t a1, CFIndex a2)
{
  const __CFAllocator *Default;

  Default = CFAllocatorGetDefault();
  return CFAllocatorAllocate(Default, a2, 0);
}

void sc_FreeSegmentBlock(const void *a1, void *a2, uint64_t a3)
{
  const __CFAllocator *Default;
  uint64_t v7;
  uint64_t v8;

  Default = CFAllocatorGetDefault();
  CFAllocatorDeallocate(Default, a2);
  v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v7)
  {
    v8 = v7;
    MEMORY[0x19402EA0C](*(_QWORD *)(v7 + 16));
    if (!*(_BYTE *)(v8 + 272) && (*(_BYTE *)(v8 + 220) & 2) == 0)
      *(_QWORD *)(v8 + 184) -= a3;
    MEMORY[0x19402EA24](*(_QWORD *)(v8 + 16));
    CFRelease((CFTypeRef)v8);
  }
  if (a1)
    CFRelease(a1);
}

uint64_t FigStreamingCacheMediaSegmentMarkComplete(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v15;
  unint64_t FirstSegmentOfContiguousRangeContainingSegment;
  unint64_t LastSegmentOfContiguousRangeContainingSegment;
  double v18;
  double v19;
  double v20;
  double v21;
  BOOL v22;
  double v23;
  double v24;
  double v25;
  uint64_t *v26;
  unint64_t started;
  double v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  int v32;
  double v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  if (a1 && a2 && a3)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272))
    {
      v6 = *(_QWORD *)(a1 + 168);
      if (v6)
      {
        while (v6 != a2)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_8;
        }
        if ((*(_BYTE *)(*(_QWORD *)a2 + 220) & 2) == 0 || (*(_BYTE *)(a2 + 176) & 2) != 0)
        {
          v9 = CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3);
          v10 = v9 ? (uint64_t **)a3 : 0;
          if (v9)
          {
            a3[40] |= 1u;
            v7 = stream_SetNeedsToCommitPersistentStreamInfo((_BYTE *)a2);
            if ((_DWORD)v7)
              goto LABEL_9;
            if ((*(_BYTE *)(a1 + 220) & 2) != 0)
            {
              ++a3[20];
              a3[40] |= 0x80u;
              segment_LockDuplicateMediaSegments(a2, (uint64_t)a3);
              CFRetain((CFTypeRef)a1);
              dispatch_async_f(*(dispatch_queue_t *)(a1 + 240), a3, (dispatch_function_t)segment_WriteDataToDiskDispatchFunction);
            }
            v11 = *(_QWORD *)(*(_QWORD *)a2 + 168);
            if (!v11)
              goto LABEL_24;
            v12 = *(_DWORD *)(a2 + 56);
            while (1)
            {
              if (*(_DWORD *)(v11 + 56) == v12)
              {
                v13 = *(_DWORD *)(a2 + 80);
                if (*(_DWORD *)(v11 + 80) < v13)
                  break;
              }
              v11 = *(_QWORD *)(v11 + 8);
              if (!v11)
                goto LABEL_24;
            }
            v15 = **v10;
            FirstSegmentOfContiguousRangeContainingSegment = stream_GetFirstSegmentOfContiguousRangeContainingSegment((unint64_t)v10);
            LastSegmentOfContiguousRangeContainingSegment = stream_GetLastSegmentOfContiguousRangeContainingSegment((unint64_t)v10, 0);
            v8 = 0;
            if (!FirstSegmentOfContiguousRangeContainingSegment || !LastSegmentOfContiguousRangeContainingSegment)
              goto LABEL_25;
            v18 = *(double *)(LastSegmentOfContiguousRangeContainingSegment + 120)
                + *(double *)(LastSegmentOfContiguousRangeContainingSegment + 128);
            v19 = *(double *)(FirstSegmentOfContiguousRangeContainingSegment + 120);
            v20 = v18 - v19;
            v21 = *(double *)(v15 + 88);
            v22 = v21 > 0.0 && v20 < v21;
            if (v22 || (v23 = *(double *)(v15 + 80), v20 < v23 + v23))
            {
LABEL_24:
              v8 = 0;
              goto LABEL_25;
            }
            v24 = v18 - v23;
            v25 = v19 + v23;
            if (v19 + v23 < v18 - v23)
            {
              v26 = *(uint64_t **)(a1 + 168);
              if (v26)
              {
                do
                {
                  if (*((_DWORD *)v26 + 14) == v12 && *((_DWORD *)v26 + 20) < v13)
                  {
                    if (*((_BYTE *)v26 + 121))
                    {
                      started = v26[3];
                      if (started)
                      {
                        v38 = *v26;
                        while (1)
                        {
                          v28 = *(double *)(started + 120);
                          if (v28 >= v25 && v28 + *(double *)(started + 128) <= v25 + v24 - v25)
                            break;
                          if (v28 >= v25)
                            v29 = 8;
                          else
                            v29 = 16;
                          started = *(_QWORD *)(started + v29);
                          if (!started)
                            goto LABEL_63;
                        }
                        do
                        {
                          v30 = started;
                          started = MediaSegmentStartTimeList_RB_PREV(started);
                          if (!started)
                            break;
                          v31 = *(double *)(started + 120);
                          if (v31 < v25)
                            break;
                        }
                        while (v31 + *(double *)(started + 128) <= v24);
                        v32 = 0;
                        do
                        {
                          if (v32
                            || (v33 = *(double *)(v38 + 88), v33 <= 0.0)
                            || (v34 = stream_GetFirstSegmentOfContiguousRangeContainingSegment(v30), v34 == v30)
                            || *(double *)(v30 + 120)
                             + *(double *)(v30 + 128)
                             - *(double *)(v34 + 120)
                             - *(double *)(v30 + 128) >= v33)
                          {
                            v35 = 0;
                            v32 = 1;
                          }
                          else
                          {
                            v32 = 0;
                            v35 = 1;
                          }
                          v36 = MediaSegmentStartTimeList_RB_NEXT(v30);
                          v37 = v36;
                          if (v36 && *(double *)(v36 + 120) >= v24)
                            v37 = 0;
                          if ((v35 & 1) == 0)
                            segment_EvictEntry((_QWORD *)v30, 0, 1);
                          v30 = v37;
                        }
                        while (v37);
                      }
                    }
                  }
LABEL_63:
                  v8 = 0;
                  v26 = (uint64_t *)v26[1];
                }
                while (v26);
                goto LABEL_25;
              }
              goto LABEL_24;
            }
          }
        }
      }
    }
LABEL_8:
    v7 = FigSignalErrorAt();
LABEL_9:
    v8 = v7;
LABEL_25:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    return v8;
  }
  return FigSignalErrorAt();
}

CFIndex segment_LockDuplicateMediaSegments(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  CFIndex i;
  uint64_t j;
  double v7;
  uint64_t *v8;

  result = *(_QWORD *)(a2 + 136);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 2)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
        if (result >= 1)
        {
          for (i = 0; i < result; ++i)
          {
            FigCFArrayGetDoubleAtIndex();
            if (*(double *)(a2 + 120) != 0.0)
            {
              for (j = *(_QWORD *)(a1 + 24); j; j = *v8)
              {
                v7 = 0.0 - *(double *)(j + 120);
                if (v7 >= 0.0)
                {
                  if (v7 == 0.0)
                  {
                    ++*(_DWORD *)(j + 80);
                    *(_DWORD *)(j + 160) |= *(_DWORD *)(a2 + 160) & 0xFFFFFFF9;
                    break;
                  }
                  v8 = (uint64_t *)(j + 16);
                }
                else
                {
                  v8 = (uint64_t *)(j + 8);
                }
              }
            }
            result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
          }
        }
      }
    }
  }
  return result;
}

uint64_t segment_WriteDataToDiskDispatchFunction(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  double v9;
  double v10;
  uint64_t *v11;
  uint64_t *v12;
  CFTypeRef *v13;
  uint64_t *v14;
  uint64_t (*v15)(const void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t **, double, double);
  int v16;
  uint64_t *v17;

  v2 = *a1;
  v3 = **a1;
  v4 = (const void *)(*a1)[16];
  MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 16));
  v5 = *((_DWORD *)a1 + 40);
  if ((v5 & 0x40) != 0)
  {
    *((_DWORD *)a1 + 40) = v5 & 0xFFFFFF7F;
    goto LABEL_25;
  }
  if ((*(_BYTE *)(*v2 + 220) & 2) == 0 || (v2[22] & 2) != 0)
  {
    v6 = 1;
  }
  else
  {
    FigSignalErrorAt();
    v6 = 0;
  }
  v7 = a1[19];
  if (v7)
    CFRetain(v7);
  if (v4)
    CFRetain(v4);
  MEMORY[0x19402EA24](*(_QWORD *)(v3 + 16));
  if (v6)
  {
    v8 = a1[19];
    v10 = *((double *)a1 + 15);
    v9 = *((double *)a1 + 16);
    v12 = a1[11];
    v11 = a1[12];
    v13 = (CFTypeRef *)(a1 + 18);
    v14 = a1[13];
    v15 = *(uint64_t (**)(const void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, uint64_t **, double, double))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
    if (v15)
      v16 = v15(v4, v8, v12, v11, v14, a1 + 18, v9, v10);
    else
      v16 = -12782;
    MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 16));
    *((_DWORD *)a1 + 40) &= ~0x80u;
    v17 = a1[19];
    if (v17)
      CFRelease(v17);
    if (v4)
      CFRelease(v4);
    if (v16)
    {
      sc_SendDiskWriteErrorNotification();
      if (*v13)
      {
        CFRelease(*v13);
LABEL_24:
        *v13 = 0;
      }
    }
    else
    {
      *((_DWORD *)a1 + 40) = (_DWORD)a1[20] & 0xFFFFFFCF | 0x20;
      if (a1[19])
      {
        FigDeferCFRelease();
        v13 = (CFTypeRef *)(a1 + 19);
        goto LABEL_24;
      }
    }
LABEL_25:
    segment_UpdateAndUnlockDuplicateMediaSegments((uint64_t)v2, (uint64_t)a1);
    segment_UnlockEntry(a1, 0);
    MEMORY[0x19402EA24](*(_QWORD *)(v3 + 16));
  }
  return FigDeferCFRelease();
}

uint64_t FigStreamingCacheMediaSegmentIsComplete(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4)
{
  _BYTE *v6;
  uint64_t v8;
  uint64_t v9;

  if (!a1 || !a2)
    goto LABEL_16;
  v6 = a3;
  if (!a3)
  {
    v9 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if (!a4)
  {
LABEL_16:
    v9 = FigSignalErrorAt();
    LOBYTE(v6) = 0;
    goto LABEL_13;
  }
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
    goto LABEL_9;
  v8 = *(_QWORD *)(a1 + 168);
  if (!v8)
    goto LABEL_9;
  while (v8 != a2)
  {
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      goto LABEL_9;
  }
  if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), v6))
  {
    v9 = 0;
    LOBYTE(v6) = v6[160] & 1;
  }
  else
  {
LABEL_9:
    v9 = FigSignalErrorAt();
    LOBYTE(v6) = 0;
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
LABEL_13:
  if (!(_DWORD)v9)
    *a4 = (_BYTE)v6;
  return v9;
}

uint64_t FigStreamingCacheMediaSegmentLock(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
    goto LABEL_8;
  v6 = *(_QWORD *)(a1 + 168);
  if (!v6)
    goto LABEL_8;
  while (v6 != a2)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      goto LABEL_8;
  }
  if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3))
  {
    ++a3[20];
    segment_LockDuplicateMediaSegments(a2, (uint64_t)a3);
    v7 = 0;
  }
  else
  {
LABEL_8:
    v7 = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v7;
}

uint64_t FigStreamingCacheMediaSegmentUnlock(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;

  if (!a1 || !a2 || !a3)
    return FigSignalErrorAt();
  MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
  if (*(_BYTE *)(a1 + 272))
    goto LABEL_8;
  v6 = *(_QWORD *)(a1 + 168);
  if (!v6)
    goto LABEL_8;
  while (v6 != a2)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      goto LABEL_8;
  }
  if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), a3))
  {
    segment_UpdateAndUnlockDuplicateMediaSegments(a2, (uint64_t)a3);
    segment_UnlockEntry(a3, 0);
    v7 = 0;
  }
  else
  {
LABEL_8:
    v7 = FigSignalErrorAt();
  }
  MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
  return v7;
}

CFIndex segment_UpdateAndUnlockDuplicateMediaSegments(uint64_t a1, uint64_t a2)
{
  CFIndex result;
  CFIndex i;
  uint64_t v6;
  double v7;
  uint64_t *v8;

  result = *(_QWORD *)(a2 + 136);
  if (result)
  {
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 2)
    {
      if (*(_QWORD *)(a1 + 24))
      {
        result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
        if (result >= 1)
        {
          for (i = 0; i < result; ++i)
          {
            FigCFArrayGetDoubleAtIndex();
            if (*(double *)(a2 + 120) != 0.0)
            {
              v6 = *(_QWORD *)(a1 + 24);
              if (v6)
              {
                do
                {
                  v7 = 0.0 - *(double *)(v6 + 120);
                  if (v7 >= 0.0)
                  {
                    if (v7 == 0.0)
                    {
                      *(_DWORD *)(v6 + 160) |= *(_DWORD *)(a2 + 160) & 0xFFFFFFF9;
                      *(_QWORD *)(v6 + 144) = *(_QWORD *)(a2 + 144);
                      segment_UnlockEntry((uint64_t **)v6, 0);
                      break;
                    }
                    v8 = (uint64_t *)(v6 + 16);
                  }
                  else
                  {
                    v8 = (uint64_t *)(v6 + 8);
                  }
                  v6 = *v8;
                }
                while (*v8);
              }
            }
            result = CFArrayGetCount(*(CFArrayRef *)(a2 + 136));
          }
        }
      }
    }
  }
  return result;
}

void segment_UnlockEntry(uint64_t **value, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  void (*v8)(uint64_t, uint64_t *);
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v3 = *value;
  v4 = **value;
  v5 = *((_DWORD *)value + 20) - 1;
  *((_DWORD *)value + 20) = v5;
  if (a2 || !v5)
  {
    CFSetRemoveValue((CFMutableSetRef)v3[6], value);
    if ((*(_BYTE *)(v4 + 220) & 2) != 0)
    {
      *(_QWORD *)(v4 + 184) -= value[14];
      if ((~*((_DWORD *)value + 40) & 0x60) == 0)
      {
        if (v3[16])
        {
          if (!stream_UpgradePersistentStreamInfoForWriting((uint64_t)v3))
          {
            v6 = v3[16];
            v7 = value[18];
            v8 = *(void (**)(uint64_t, uint64_t *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 48);
            if (v8)
              v8(v6, v7);
          }
        }
      }
    }
    v9 = value[11];
    if (v9)
    {
      CFRelease(v9);
      value[11] = 0;
    }
    v10 = value[13];
    if (v10)
    {
      CFRelease(v10);
      value[13] = 0;
    }
    v11 = value[18];
    if (v11)
    {
      CFRelease(v11);
      value[18] = 0;
    }
    v12 = value[19];
    if (v12)
    {
      CFRelease(v12);
      value[19] = 0;
    }
    v13 = value[17];
    if (v13)
      CFRelease(v13);
    free(value);
  }
  else if (v5 == 1 && (~*((_DWORD *)value + 40) & 0xC0) == 0)
  {
    *(_QWORD *)(v4 + 184) -= value[14];
    value[14] = 0;
  }
}

uint64_t FigStreamingCacheMediaSegmentSetDuplicateSegments(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  const __CFArray *Count;
  const void *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  const void *v16;
  unint64_t v17;
  CFTypeRef v18;
  unint64_t v19;

  if (a1 && a2 && a3 && a4)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272))
    {
      v8 = *(_QWORD *)(a1 + 168);
      if (v8)
      {
        while (v8 != a2)
        {
          v8 = *(_QWORD *)(v8 + 8);
          if (!v8)
            goto LABEL_9;
        }
        if (*(_BYTE *)(a2 + 121))
          goto LABEL_13;
        if (CFSetContainsValue(*(CFSetRef *)(a2 + 48), (const void *)a3))
        {
          if (*(_QWORD *)(a3 + 136))
          {
LABEL_13:
            v9 = 0;
            goto LABEL_14;
          }
          Count = (const __CFArray *)CFRetain(a4);
          *(_QWORD *)(a3 + 136) = Count;
          v19 = 0;
          v12 = *(const void **)(a3 + 88);
          if (v12)
          {
            v9 = 0;
            v13 = 0;
            v14 = *(double *)(a3 + 128);
            v15 = *(_QWORD *)(a3 + 96);
            v16 = *(const void **)(a3 + 104);
            if (!Count)
              goto LABEL_18;
LABEL_17:
            Count = (const __CFArray *)CFArrayGetCount(Count);
LABEL_18:
            while (v13 < (uint64_t)Count)
            {
              FigCFArrayGetDoubleAtIndex();
              if (*(double *)(a3 + 120) != 0.0)
              {
                v9 = sc_CreateMediaSegment(a1, a2, v12, v15, v16, 1, &v19, 0.0, v14);
                if (!(_DWORD)v9)
                {
                  v17 = v19;
                  *(_DWORD *)(v19 + 160) |= *(_DWORD *)(a3 + 160) & 0xFFFFFFF9;
                  v18 = *(CFTypeRef *)(a3 + 136);
                  if (v18)
                  {
                    v18 = CFRetain(v18);
                    v17 = v19;
                  }
                  v9 = 0;
                  *(_QWORD *)(v17 + 136) = v18;
                }
              }
              ++v13;
              Count = *(const __CFArray **)(a3 + 136);
              if (Count)
                goto LABEL_17;
            }
            goto LABEL_14;
          }
        }
      }
    }
LABEL_9:
    v9 = FigSignalErrorAt();
LABEL_14:
    MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
    return v9;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheAddInterstitialAsset(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  CFTypeRef *Value;
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, CFTypeRef *);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  CFTypeRef v16;
  CFTypeRef cf;
  int v18;

  v18 = 0;
  cf = 0;
  if (a1 && a3 && a2)
  {
    Value = (CFTypeRef *)FigCFDictionaryGetValue();
    if (Value)
    {
      v7 = *Value;
      if (v7)
        v7 = CFRetain(v7);
      v8 = 0;
      goto LABEL_10;
    }
    if ((*(_BYTE *)(a1 + 220) & 2) == 0)
    {
      v8 = FigSignalErrorAt();
      v7 = 0;
LABEL_10:
      *a3 = v7;
      return v8;
    }
    v10 = sc_UpgradePersistentStoreForWriting(a1, &v18);
    if ((_DWORD)v10)
      return v10;
    v11 = *(_QWORD *)(a1 + 280);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 144);
    if (v12)
    {
      v13 = v12(v11, a2, &cf);
      if (!(_DWORD)v13)
      {
        v14 = malloc_type_calloc(1uLL, 8uLL, 0x6004044C4A2DFuLL);
        if (v14)
        {
          v15 = v14;
          v16 = cf;
          if (cf)
            v16 = CFRetain(cf);
          *v15 = v16;
          FigCFDictionarySetValue();
          v8 = 0;
          *a3 = cf;
          cf = 0;
          goto LABEL_20;
        }
        v13 = FigSignalErrorAt();
      }
      v8 = v13;
    }
    else
    {
      v8 = 4294954514;
    }
LABEL_20:
    sc_RestorePersistentStoreLockStatus(a1, v18);
    if (cf)
      CFRelease(cf);
    return v8;
  }
  return FigSignalErrorAt();
}

uint64_t FigStreamingCacheCreate(const __CFAllocator *a1, const __CFURL *a2, const __CFDictionary *a3, uint64_t *a4)
{
  uint64_t Instance;
  uint64_t v9;
  uint64_t v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  uint64_t v13;
  const __CFURL *Value;
  CFStringRef v15;
  const void *v16;
  CFTypeRef v17;
  const void *v18;
  const void *v19;
  CFPropertyListRef v20;
  const void *v21;
  CFTypeID TypeID;
  int v23;
  CFTypeRef *v24;
  CFTypeRef *v25;
  const void *v26;
  CFTypeRef v27;
  const __CFString *v28;
  uint64_t v29;
  const __CFString *v30;
  const __CFAllocator *AllocatorForMedia;
  __CFString *v32;
  __CFString *v33;
  const void **v34;
  uint64_t v35;
  dispatch_queue_t v36;
  dispatch_queue_t v37;
  _BOOL4 v38;
  const void *v39;
  const __CFURL *v40;
  uint64_t v41;
  CFTypeRef *v42;
  uint64_t DiskCacheBundle;
  BOOL v44;
  const void *v45;
  CFTypeRef v46;
  CFDictionaryValueCallBacks v48;
  int64_t v49;
  CFTypeRef cf;
  CFTypeRef v51;

  *(_OWORD *)&v48.version = xmmword_1E2FBC9C8;
  *(_OWORD *)&v48.release = *(_OWORD *)&off_1E2FBC9D8;
  v48.equal = 0;
  if (a4 && a2)
  {
    if (sRegisterFigStreamingCacheTypeOnce != -1)
      dispatch_once_f(&sRegisterFigStreamingCacheTypeOnce, 0, (dispatch_function_t)RegisterFigStreamingCacheType);
    Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      v9 = Instance;
      v10 = FigReentrantMutexCreate();
      *(_QWORD *)(v9 + 16) = v10;
      if (!v10)
        goto LABEL_107;
      Mutable = CFDictionaryCreateMutable(a1, 0, 0, 0);
      *(_QWORD *)(v9 + 232) = Mutable;
      if (!Mutable)
        goto LABEL_107;
      v12 = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], &v48);
      *(_QWORD *)(v9 + 224) = v12;
      if (!v12)
        goto LABEL_107;
      v13 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      *(_QWORD *)(v9 + 264) = v13;
      if (!v13)
        goto LABEL_107;
      if (a3)
      {
        if (CFDictionaryGetValue(a3, CFSTR("FSC_Backing")) == CFSTR("FSC_DiskBacking"))
          *(_DWORD *)(v9 + 220) |= 2u;
        Value = (const __CFURL *)CFDictionaryGetValue(a3, CFSTR("FSC_DiskCacheRepositoryURL"));
        if (Value)
        {
          v15 = CFURLGetString(Value);
          *(_QWORD *)(v9 + 32) = CFRetain(v15);
          *(_DWORD *)(v9 + 220) |= 2u;
        }
        v16 = CFDictionaryGetValue(a3, CFSTR("FSC_DownloadDestinationURL"));
        if (v16)
        {
          v17 = CFRetain(v16);
          *(_QWORD *)(v9 + 40) = v17;
          if (v17)
            *(_DWORD *)(v9 + 220) |= 2u;
        }
        else
        {
          *(_QWORD *)(v9 + 40) = 0;
        }
        v18 = CFDictionaryGetValue(a3, CFSTR("FSC_UseURLPathAsCacheKey"));
        v19 = (const void *)*MEMORY[0x1E0C9AE50];
        if (v18 == (const void *)*MEMORY[0x1E0C9AE50])
          *(_DWORD *)(v9 + 64) |= 1u;
        if (CFDictionaryGetValue(a3, CFSTR("FSC_UseURLWithoutQueryStringAsCacheKey")) == v19)
          *(_DWORD *)(v9 + 64) |= 2u;
      }
      if (*(_QWORD *)(v9 + 32))
        goto LABEL_115;
      if (!*(_QWORD *)(v9 + 40))
      {
        v20 = CFPreferencesCopyAppValue(CFSTR("streamingCachePath"), CFSTR("com.apple.coremedia"));
        if (v20)
        {
          v21 = v20;
          TypeID = CFStringGetTypeID();
          if (TypeID == CFGetTypeID(v21))
          {
            *(_QWORD *)(v9 + 32) = CFRetain(v21);
            *(_DWORD *)(v9 + 220) |= 2u;
          }
          CFRelease(v21);
        }
      }
      if (*(_QWORD *)(v9 + 32))
      {
LABEL_115:
        if (*(_QWORD *)(v9 + 40))
          goto LABEL_107;
      }
      v23 = *(_DWORD *)(v9 + 220);
      *(_DWORD *)(v9 + 220) = v23 | 1;
      if ((v23 & 2) != 0)
      {
        *(_OWORD *)(v9 + 88) = xmmword_193301980;
        v24 = (CFTypeRef *)(v9 + 88);
        *(_QWORD *)(v9 + 104) = 0x4044000000000000;
        v25 = (CFTypeRef *)(v9 + 104);
        if (a3)
        {
          cf = 0;
          v51 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        *(_OWORD *)(v9 + 88) = xmmword_193301990;
        v24 = (CFTypeRef *)(v9 + 88);
        *(_QWORD *)(v9 + 72) = 0x2000000;
        *(_QWORD *)(v9 + 104) = 0x4044000000000000;
        v25 = (CFTypeRef *)(v9 + 104);
        if (a3)
        {
          cf = 0;
          v51 = 0;
          if (FigCFDictionaryGetInt64IfPresent())
            *(_QWORD *)(v9 + 72) = v51;
LABEL_37:
          if (FigCFDictionaryGetDoubleIfPresent())
            *(_QWORD *)(v9 + 80) = cf;
          if (FigCFDictionaryGetDoubleIfPresent())
            *v24 = cf;
          if (FigCFDictionaryGetDoubleIfPresent())
            *(_QWORD *)(v9 + 96) = cf;
          if (FigCFDictionaryGetDoubleIfPresent())
            *v25 = cf;
          v26 = CFDictionaryGetValue(a3, CFSTR("FSC_AddToDonorPool"));
          if (v26)
          {
            v27 = CFRetain(v26);
            *(_QWORD *)(v9 + 136) = v27;
            if (v27)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
            }
          }
          else
          {
            *(_QWORD *)(v9 + 136) = 0;
          }
          v28 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("FSC_ClientName"));
          *(_QWORD *)(v9 + 24) = FigCFHTTPCreateURLString(a2);
          if (v28)
          {
            v29 = FigCFURLCreateCacheKey();
            if (v29)
            {
              v30 = (const __CFString *)v29;
              AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
              v32 = CFStringCreateMutable(AllocatorForMedia, 0);
              if (!v32)
              {
                DiskCacheBundle = FigSignalErrorAt();
                goto LABEL_95;
              }
              v33 = v32;
              CFStringAppend(v32, v28);
              CFStringAppend(v33, CFSTR("-"));
              CFStringAppend(v33, v30);
              *(_QWORD *)(v9 + 48) = v33;
              v34 = (const void **)(v9 + 48);
LABEL_56:
              *(_QWORD *)(v9 + 168) = 0;
              *(_QWORD *)(v9 + 176) = v9 + 168;
              v36 = dispatch_queue_create("com.apple.coremedia.streamingCache.notification", 0);
              *(_QWORD *)(v9 + 248) = v36;
              if (v36)
              {
                if ((*(_BYTE *)(v9 + 220) & 2) == 0)
                  goto LABEL_93;
                v37 = dispatch_queue_create("com.apple.coremedia.streamingcache.ioqueue", 0);
                *(_QWORD *)(v9 + 240) = v37;
                if (v37)
                {
                  cf = 0;
                  v51 = 0;
                  if (*(_QWORD *)(v9 + 40))
                  {
                    v38 = FigCFURLDoesDirectoryExist() == 0;
                    v39 = *(const void **)(v9 + 40);
                    if (v39)
                      v40 = (const __CFURL *)CFRetain(v39);
                    else
                      v40 = 0;
                    *(_QWORD *)(v9 + 56) = v40;
                    v41 = sc_EnsurePersistentStoreAtURL(v9, v40, v38);
                    if (!(_DWORD)v41)
                      v41 = sc_RestoreCache((_QWORD *)v9);
                    goto LABEL_84;
                  }
                  v41 = FigShared_CopyDiskCacheParams(*(const __CFString **)(v9 + 32), 0, 0, 0, 0, &v51);
                  if ((_DWORD)v41)
                  {
LABEL_84:
                    DiskCacheBundle = v41;
                    goto LABEL_85;
                  }
                  v42 = (CFTypeRef *)(v9 + 56);
                  if (!FigShared_CheckOutOfDiskCache(*(const __CFString **)(v9 + 32), *(const void **)(v9 + 48), (CFTypeRef *)(v9 + 56), &cf))
                  {
                    if (sc_EnsurePersistentStoreAtURL(v9, *(const __CFURL **)(v9 + 56), 1))
                    {
                      if (*v42)
                      {
                        CFRelease(*v42);
                        *v42 = 0;
                      }
                      if (cf)
                      {
                        CFRelease(cf);
                        cf = 0;
                      }
                    }
                    else if (!sc_RestoreCache((_QWORD *)v9))
                    {
                      goto LABEL_75;
                    }
                  }
LABEL_64:
                  DiskCacheBundle = sc_CreateDiskCacheBundle(v9, (CFURLRef)v51, (CFURLRef *)(v9 + 56));
                  while ((_DWORD)DiskCacheBundle)
                  {
                    if ((_DWORD)DiskCacheBundle != 28)
                      goto LABEL_85;
                    v49 = 0;
                    if (FigShared_MakeRoomInDiskCache(*(const __CFString **)(v9 + 32), 0, &v49))
                      v44 = 1;
                    else
                      v44 = v49 < 1;
                    if (!v44)
                      goto LABEL_64;
                    DiskCacheBundle = 28;
                    if (!v49)
                      goto LABEL_85;
                  }
                  v41 = FigShared_CheckIntoAndOutOfDiskCache(*(const __CFString **)(v9 + 32), *(const __CFString **)(v9 + 48), *(const void **)(v9 + 56), &cf);
                  if ((_DWORD)v41)
                    goto LABEL_84;
LABEL_75:
                  v45 = *v34;
                  v46 = cf;
                  *v34 = cf;
                  if (v46)
                    CFRetain(v46);
                  if (v45)
                    CFRelease(v45);
                  if (cf)
                  {
                    CFRelease(cf);
                    DiskCacheBundle = 0;
                    cf = 0;
                  }
                  else
                  {
                    DiskCacheBundle = 0;
                  }
LABEL_85:
                  sc_UnlockPersistentStoreForAnything(v9);
                  if (cf)
                    CFRelease(cf);
                  if (v51)
                    CFRelease(v51);
                  if ((_DWORD)DiskCacheBundle == -16910 || (_DWORD)DiskCacheBundle == -16914)
                    DiskCacheBundle = FigSignalErrorAt();
                  if ((_DWORD)DiskCacheBundle)
                  {
LABEL_94:
                    if (!v30)
                      goto LABEL_96;
                    goto LABEL_95;
                  }
LABEL_93:
                  DiskCacheBundle = 0;
                  *a4 = v9;
                  v9 = 0;
                  goto LABEL_94;
                }
              }
              DiskCacheBundle = FigSignalErrorAt();
              if (!v30)
              {
LABEL_96:
                if (!v9)
                  return DiskCacheBundle;
LABEL_97:
                CFRelease((CFTypeRef)v9);
                return DiskCacheBundle;
              }
LABEL_95:
              CFRelease(v30);
              goto LABEL_96;
            }
            goto LABEL_107;
          }
LABEL_54:
          v35 = FigCFURLCreateCacheKey();
          *(_QWORD *)(v9 + 48) = v35;
          v34 = (const void **)(v9 + 48);
          if (v35)
          {
            v30 = 0;
            goto LABEL_56;
          }
LABEL_107:
          DiskCacheBundle = FigSignalErrorAt();
          goto LABEL_97;
        }
      }
      *(_QWORD *)(v9 + 24) = FigCFHTTPCreateURLString(a2);
      goto LABEL_54;
    }
  }
  return FigSignalErrorAt();
}

void sc_FreeInterstitialAssetRecord(int a1, CFTypeRef *a2)
{
  if (*a2)
    CFRelease(*a2);
  free(a2);
}

void sc_NoteMemoryDemand(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int64_t v6;
  uint64_t v7;
  unint64_t BackingForMediaStreamFromLaterSegments;
  uint64_t v9;
  BOOL v10;

  MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 16));
  if (*(_BYTE *)(a2 + 272))
  {
    FigSignalErrorAt();
  }
  else if (*(_BYTE *)(a2 + 144))
  {
    if (*a4 != a2)
    {
      MEMORY[0x19402EEEC](a4[2]);
      v6 = a4[1];
      MEMORY[0x19402EF04](a4[2]);
      v7 = *(_QWORD *)(a2 + 168);
      if (v7)
      {
        if (v6 >= 1)
        {
          do
          {
            BackingForMediaStreamFromLaterSegments = sc_GetBackingForMediaStreamFromLaterSegments(a2, v7, v6, 0.0);
            MEMORY[0x19402EEEC](a4[2]);
            v9 = a4[2];
            v6 = a4[1] - BackingForMediaStreamFromLaterSegments;
            a4[1] = v6;
            MEMORY[0x19402EF04](v9);
            v7 = *(_QWORD *)(v7 + 8);
            if (v7)
              v10 = v6 <= 0;
            else
              v10 = 1;
          }
          while (!v10);
        }
      }
    }
  }
  JUMPOUT(0x19402EA24);
}

uint64_t FigStreamingCacheTransferData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  uint64_t v10;
  const __CFDictionary *ValueAtIndex;
  __CFDictionary *Value;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  uint64_t v18;
  CFTypeRef v19;
  CFTypeRef cf;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  CFArrayRef theArray;

  v2 = 0;
  v23 = 0;
  theArray = 0;
  v22 = 0;
  cf = 0;
  v21 = 0;
  v19 = 0;
  if (a1 && a2)
  {
    MEMORY[0x19402EA0C](*(_QWORD *)(a1 + 16));
    if (!*(_BYTE *)(a1 + 272))
    {
      v5 = FigStreamingCacheCopyMasterPlaylist(a1, (unint64_t)&cf, (unint64_t)&v19);
      if ((_DWORD)v5 || (v5 = FigStreamingCacheCopyAllStreamsMetadata(a1, &theArray), (_DWORD)v5))
      {
        v2 = v5;
        v18 = *(_QWORD *)(a1 + 16);
LABEL_26:
        MEMORY[0x19402EA24](v18);
        goto LABEL_18;
      }
      MEMORY[0x19402EA24](*(_QWORD *)(a1 + 16));
      MEMORY[0x19402EA0C](*(_QWORD *)(a2 + 16));
      if (!*(_BYTE *)(a2 + 272))
      {
        if (!cf || (v6 = FigStreamingCacheSetMasterPlaylist(a2, cf, v19), !(_DWORD)v6))
        {
          Count = CFArrayGetCount(theArray);
          if (Count < 1)
          {
LABEL_17:
            MEMORY[0x19402EA24](*(_QWORD *)(a2 + 16));
            v2 = 0;
            goto LABEL_18;
          }
          v8 = Count;
          v9 = 0;
          v10 = *MEMORY[0x1E0C9AE50];
          while (1)
          {
            ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v9);
            Value = (__CFDictionary *)CFDictionaryGetValue(ValueAtIndex, CFSTR("SMD_URL"));
            FigCFDictionaryGetInt32IfPresent();
            v13 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SMD_StableStreamIdentifier"));
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            v14 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SMD_PlaylistData"));
            v15 = CFDictionaryGetValue(ValueAtIndex, CFSTR("SMD_HTTPResponseHeaders"));
            if (v14)
            {
              v16 = v15;
              v6 = FigStreamingCacheCreateMediaStream(a2, SHIDWORD(v23), Value, v13, v23, v22, &v21);
              if ((_DWORD)v6)
                break;
              v6 = FigStreamingCacheMediaStreamSetPersistent(a2, v21, v10);
              if ((_DWORD)v6)
                break;
              v6 = FigStreamingCacheMediaStreamSetPlaylist(a2, v21, v14, v16);
              if ((_DWORD)v6)
                break;
              v6 = FigStreamingCacheMediaStreamSetNetworkURL(a2, (uint64_t)v21, Value);
              if ((_DWORD)v6)
                break;
            }
            if (v8 == ++v9)
              goto LABEL_17;
          }
        }
        v2 = v6;
        v18 = *(_QWORD *)(a2 + 16);
        goto LABEL_26;
      }
    }
    v2 = FigSignalErrorAt();
  }
LABEL_18:
  if (cf)
    CFRelease(cf);
  if (v19)
    CFRelease(v19);
  if (theArray)
    CFRelease(theArray);
  return v2;
}

double figStreamingCacheInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 288) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t figStreamingCacheFinalize(uint64_t a1)
{
  const void *v2;
  NSObject *v3;

  figStreamingCacheInvalidate(a1);
  v2 = *(const void **)(a1 + 264);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v3 = *(NSObject **)(a1 + 240);
  if (v3)
  {
    dispatch_release(v3);
    *(_QWORD *)(a1 + 240) = 0;
  }
  return FigSimpleMutexDestroy();
}

CFStringRef figStreamingCacheCopyFormattingDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigStreamingCache %p]"), a1);
}

CFStringRef figStreamingCacheCopyDebugDesc(uint64_t a1)
{
  const __CFAllocator *AllocatorForMedia;
  CFIndex v3;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v3 = CFGetRetainCount((CFTypeRef)a1);
  return CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("[FigStreamingCache %p (%d) URL %@ currentCacheSize %lld playbackTime %.2f flags 0x%X]"), a1, v3, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 192), *(unsigned int *)(a1 + 220));
}

uint64_t sc_EnsureMasterPlaylistNetworkURLIsSetOnPersistentStore(uint64_t a1)
{
  uint64_t v2;
  uint64_t AllocatorForMedia;
  uint64_t FigBaseObject;
  void (*v5)(uint64_t, const __CFString *, uint64_t, CFTypeRef *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const __CFString *, uint64_t);
  uint64_t v11;
  CFTypeRef cf;

  cf = 0;
  if ((*(_BYTE *)(a1 + 220) & 2) == 0 || (*(_BYTE *)(a1 + 288) & 2) == 0)
  {
    v11 = FigSignalErrorAt();
    goto LABEL_9;
  }
  v2 = *(_QWORD *)(a1 + 280);
  AllocatorForMedia = FigGetAllocatorForMedia();
  FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(v2);
  v5 = *(void (**)(uint64_t, const __CFString *, uint64_t, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                + 48);
  if (v5)
    v5(FigBaseObject, CFSTR("MasterPlaylistNetworkURL"), AllocatorForMedia, &cf);
  if (FigCFEqual())
  {
    v6 = 0;
    goto LABEL_11;
  }
  v7 = *(_QWORD *)(a1 + 280);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = FigHLSPersistentStoreGetFigBaseObject(v7);
  v10 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 8) + 56);
  if (v10)
  {
    v11 = v10(v9, CFSTR("MasterPlaylistNetworkURL"), v8);
LABEL_9:
    v6 = v11;
    goto LABEL_11;
  }
  v6 = 4294954514;
LABEL_11:
  if (cf)
    CFRelease(cf);
  return v6;
}

void sc_SendDiskWriteErrorNotification()
{
  const __CFAllocator *AllocatorForMedia;
  CFMutableDictionaryRef Mutable;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    FigCFDictionarySetInt32();
  else
    FigSignalErrorAt();
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (Mutable)
    CFRelease(Mutable);
}

uint64_t stream_UpgradePersistentStreamInfoForWriting(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  if ((*(_BYTE *)(*(_QWORD *)a1 + 220) & 2) == 0 || !*(_QWORD *)(a1 + 128))
    return FigSignalErrorAt();
  if ((*(_BYTE *)(a1 + 176) & 2) != 0)
    return 0;
  FigGetUpTimeNanoseconds();
  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 56);
  if (v3)
  {
    v4 = v3(v2, 1);
    FigGetUpTimeNanoseconds();
    if (!(_DWORD)v4)
      *(_DWORD *)(a1 + 176) |= 3u;
  }
  else
  {
    FigGetUpTimeNanoseconds();
    return 4294954514;
  }
  return v4;
}

uint64_t sc_MatchMediaStreamWithAttributes(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t CacheKeyFromURLString;
  const void *v7;
  uint64_t v8;
  const void *v9;

  v3 = 0;
  if (a1 && a2)
  {
    if (*a1 || *a2)
    {
      CacheKeyFromURLString = FigCFStringCreateCacheKeyFromURLString();
      if (CacheKeyFromURLString)
      {
        v7 = (const void *)CacheKeyFromURLString;
        v8 = FigCFStringCreateCacheKeyFromURLString();
        if (!v8)
        {
          v3 = 0;
          goto LABEL_13;
        }
        v9 = (const void *)v8;
        if (a2[9] && FigCFEqual() || CFEqual(v7, v9))
        {
          v3 = 1;
          if (!a3)
          {
LABEL_12:
            CFRelease(v9);
LABEL_13:
            CFRelease(v7);
            return v3;
          }
        }
        else
        {
          v3 = 0;
          if (!a3)
            goto LABEL_12;
        }
        *a3 = v3;
        goto LABEL_12;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    return 0;
  }
  return v3;
}

uint64_t sc_GetShouldDemandWriteAccessForStreamInfoCreation(uint64_t *a1, uint64_t a2, BOOL *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, char *);
  uint64_t result;
  char v9;

  v3 = *a1;
  v9 = 0;
  if ((*(_BYTE *)(v3 + 220) & 2) == 0 || (*(_BYTE *)(v3 + 288) & 1) == 0)
    return FigSignalErrorAt();
  v6 = *(_QWORD *)(v3 + 280);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 64);
  if (!v7)
    return 4294954514;
  result = v7(v6, a2, &v9);
  if (!(_DWORD)result)
    *a3 = v9 == 0;
  return result;
}

void stream_CreateStreamInfoCreateOptions(int a1, __CFDictionary **a2)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v6;

  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (a1)
    CFDictionarySetValue(Mutable, CFSTR("StreamInfoDemandWriteAccess"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (FigCFDictionaryGetCount() < 1)
  {
    if (v6)
      CFRelease(v6);
  }
  else
  {
    *a2 = v6;
  }
}

uint64_t sc_RestoreSegmentFromDiskApplierFunction(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  CFTypeID TypeID;
  CFTypeID v10;
  const void *Value;
  uint64_t v12;
  CFTypeRef v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  result = *(unsigned int *)(a3 + 16);
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v16 = 0;
  if (!(_DWORD)result)
  {
    TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(a1)
      && (v10 = CFDictionaryGetTypeID(), v10 == CFGetTypeID(a2))
      && FigCFDictionaryGetInt64IfPresent()
      && FigCFDictionaryGetInt64IfPresent()
      && FigCFDictionaryGetDoubleIfPresent()
      && FigCFDictionaryGetDoubleIfPresent()
      && (FigCFDictionaryGetValueIfPresent(), (Value = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("URL"))) != 0))
    {
      v12 = sc_CreateMediaSegment(v6, v7, Value, 0, 0, 0, &v16, 0.0, 0.0);
      if ((_DWORD)v12)
      {
        v15 = v12;
        result = 0;
        if ((_DWORD)v15 != -16244)
          result = v15;
      }
      else
      {
        v13 = CFRetain(a1);
        result = 0;
        v14 = v16;
        *(_QWORD *)(v16 + 144) = v13;
        *(_DWORD *)(v14 + 160) |= 0x21u;
        *(_QWORD *)(v14 + 112) = 0;
        *(_QWORD *)(v6 + 184) = *(_QWORD *)(v6 + 184);
      }
    }
    else
    {
      result = FigSignalErrorAt();
    }
  }
  *(_DWORD *)(a3 + 16) = result;
  return result;
}

uint64_t sc_RestoreMediaMapsFromDiskApplierFunction(const void *a1, const void *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeID TypeID;
  CFTypeID v9;
  uint64_t v10;
  uint64_t result;
  const void *Value;
  const __CFAllocator *AllocatorForMedia;
  CFStringRef v14;
  CFStringRef v15;

  v5 = *a3;
  v4 = a3[1];
  if (!*a3)
    goto LABEL_8;
  if (!v4)
    goto LABEL_8;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a1))
    goto LABEL_8;
  v9 = CFDictionaryGetTypeID();
  if (v9 != CFGetTypeID(a2))
    goto LABEL_8;
  v10 = *(_QWORD *)(v5 + 168);
  if (!v10)
    goto LABEL_8;
  while (v10 != v4)
  {
    v10 = *(_QWORD *)(v10 + 8);
    if (!v10)
      goto LABEL_8;
  }
  Value = CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("URL"));
  if (FigCFDictionaryGetInt64IfPresent()
    && (AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (v14 = CFStringCreateWithFormat(AllocatorForMedia, 0, CFSTR("%@-%lld"), Value, 0)) != 0))
  {
    v15 = v14;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 160), v14, a1);
    if (FigCFDictionaryGetValueIfPresent())
      FigCFDictionarySetValue();
    CFRelease(v15);
    result = 0;
  }
  else
  {
LABEL_8:
    result = FigSignalErrorAt();
  }
  *((_DWORD *)a3 + 4) = result;
  return result;
}

void segment_EvictEntry(_QWORD *value, int a2, int a3)
{
  int v3;
  _QWORD *v7;
  unint64_t started;
  unint64_t v9;
  double v10;
  double *v11;
  unint64_t *v12;
  double v13;
  double **v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t *v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  _OWORD v203[7];
  __int128 v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207;

  v207 = 0;
  v205 = 0u;
  v206 = 0u;
  v204 = 0u;
  memset(v203, 0, sizeof(v203));
  v3 = *((_DWORD *)value + 40);
  if ((v3 & 8) != 0)
    return;
  v7 = (_QWORD *)*value;
  if (!a2)
  {
    if ((v3 & 2) != 0)
    {
      started = MediaSegmentStartTimeList_RB_NEXT((unint64_t)value);
      if (started)
      {
        if (*((double *)value + 15) + *((double *)value + 16) >= *(double *)(started + 120))
        {
          *(_DWORD *)(started + 160) |= 2u;
          v3 = *((_DWORD *)value + 40);
        }
      }
    }
    if ((v3 & 4) != 0)
    {
      v9 = MediaSegmentStartTimeList_RB_PREV((unint64_t)value);
      if (v9)
      {
        if (*(double *)(v9 + 120) + *(double *)(v9 + 128) >= *((double *)value + 15))
          *(_DWORD *)(v9 + 160) |= 4u;
      }
    }
  }
  *(_OWORD *)((char *)&v203[5] + 8) = *(_OWORD *)(value + 11);
  v10 = *((double *)value + 15);
  *((double *)&v204 + 1) = v10;
  *((_QWORD *)&v203[6] + 1) = value[13];
  v12 = v7 + 3;
  v11 = (double *)v7[3];
  if (v11)
  {
    do
    {
      v13 = v10 - v11[15];
      if (v13 >= 0.0)
      {
        if (v13 == 0.0)
          break;
        v14 = (double **)(v11 + 2);
      }
      else
      {
        v14 = (double **)(v11 + 1);
      }
      v11 = *v14;
    }
    while (v11);
    if (v11 == (double *)value)
    {
      v15 = value[2];
      if (value[1])
      {
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = *(_QWORD *)(v15 + 8);
          }
          while (v15);
          v15 = *(_QWORD *)(v16 + 16);
          v17 = *(_QWORD *)(v16 + 24);
          v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
          if (v15)
          {
            if ((*(_QWORD *)(v15 + 24) & 1) != 0)
              v19 = v17 | 1;
            else
              v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
            *(_QWORD *)(v15 + 24) = v19;
          }
          v20 = v7 + 3;
          if (v18)
          {
            v20 = (unint64_t *)(v18 + 8);
            if (*(_QWORD *)(v18 + 8) != v16)
              v20 = (unint64_t *)(v18 + 16);
          }
          LODWORD(v17) = v17 & 1;
          *v20 = v15;
          if ((_QWORD *)(*(_QWORD *)(v16 + 24) & 0xFFFFFFFFFFFFFFFELL) == value)
            v18 = v16;
          v21 = value[3];
          *(_OWORD *)(v16 + 8) = *(_OWORD *)(value + 1);
          *(_QWORD *)(v16 + 24) = v21;
          v22 = v7 + 3;
          v23 = value[3] & 0xFFFFFFFFFFFFFFFELL;
          if (v23)
          {
            v25 = *(_QWORD **)(v23 + 8);
            v24 = (unint64_t *)(v23 + 8);
            if (v25 == value)
              v22 = v24;
            else
              v22 = v24 + 1;
          }
          *v22 = v16;
          v26 = value[1];
          if ((*(_QWORD *)(v26 + 24) & 1) != 0)
            v27 = v16 | 1;
          else
            v27 = v16;
          *(_QWORD *)(v26 + 24) = v27;
          v28 = value[2];
          if (v28)
          {
            if ((*(_QWORD *)(v28 + 24) & 1) != 0)
              v16 |= 1uLL;
            *(_QWORD *)(v28 + 24) = v16;
          }
          goto LABEL_53;
        }
        v18 = value[3] & 0xFFFFFFFFFFFFFFFELL;
        v17 = value[3] & 1;
        v15 = value[1];
      }
      else
      {
        v18 = value[3] & 0xFFFFFFFFFFFFFFFELL;
        v17 = value[3] & 1;
        if (!v15)
        {
LABEL_49:
          v30 = v7 + 3;
          if (v18)
          {
            v30 = (unint64_t *)(v18 + 8);
            if (*(_QWORD **)(v18 + 8) != value)
              v30 = (unint64_t *)(v18 + 16);
          }
          *v30 = v15;
LABEL_53:
          if (!(_DWORD)v17)
          {
            while (1)
            {
              v52 = (_QWORD *)v15;
              v15 = v18;
              if (v52)
              {
                v53 = v52[3];
                if ((v53 & 1) != 0)
                  break;
              }
              v44 = *v12;
              if (v52 == (_QWORD *)*v12)
                goto LABEL_143;
              v31 = *(_QWORD *)(v15 + 8);
              if ((_QWORD *)v31 == v52)
              {
                v31 = *(_QWORD *)(v15 + 16);
                v38 = *(_QWORD *)(v31 + 24);
                if ((v38 & 1) != 0)
                {
                  *(_QWORD *)(v31 + 24) = v38 & 0xFFFFFFFFFFFFFFFELL;
                  v39 = *(_QWORD *)(v15 + 24) | 1;
                  *(_QWORD *)(v15 + 24) = v39;
                  v40 = *(_QWORD **)(v31 + 8);
                  *(_QWORD *)(v15 + 16) = v40;
                  if (v40)
                  {
                    if ((v40[3] & 1) != 0)
                      v41 = v15 | 1;
                    else
                      v41 = v15;
                    v40[3] = v41;
                    v39 = *(_QWORD *)(v15 + 24);
                  }
                  *(_QWORD *)(v31 + 24) = v39 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v31 + 24) & 1;
                  if ((v39 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  {
                    v42 = *(_QWORD *)(v15 + 24);
                    v43 = v42 & 0xFFFFFFFFFFFFFFFELL;
                    if (v15 == *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 8))
                    {
                      *(_QWORD *)(v43 + 8) = v31;
                    }
                    else
                    {
                      *(_QWORD *)(v43 + 16) = v31;
                      v40 = *(_QWORD **)(v15 + 16);
                    }
                  }
                  else
                  {
                    *v12 = v31;
                    v42 = *(_QWORD *)(v15 + 24);
                    v44 = v31;
                  }
                  *(_QWORD *)(v31 + 8) = v15;
                  if ((v42 & 1) != 0)
                    v31 |= 1uLL;
                  *(_QWORD *)(v15 + 24) = v31;
                  v31 = (unint64_t)v40;
                }
                v49 = *(_QWORD *)(v31 + 8);
                if (v49)
                {
                  v50 = *(_QWORD *)(v49 + 24);
                  if ((v50 & 1) != 0)
                  {
                    v51 = *(_QWORD *)(v31 + 16);
                    if (!v51 || (*(_BYTE *)(v51 + 24) & 1) == 0)
                    {
                      *(_QWORD *)(v49 + 24) = v50 & 0xFFFFFFFFFFFFFFFELL;
                      v59 = *(_QWORD *)(v31 + 24) | 1;
                      *(_QWORD *)(v31 + 24) = v59;
                      v60 = *(_QWORD *)(v49 + 16);
                      *(_QWORD *)(v31 + 8) = v60;
                      if (v60)
                      {
                        if ((*(_QWORD *)(v60 + 24) & 1) != 0)
                          v61 = v31 | 1;
                        else
                          v61 = v31;
                        *(_QWORD *)(v60 + 24) = v61;
                        v59 = *(_QWORD *)(v31 + 24);
                      }
                      *(_QWORD *)(v49 + 24) = v59 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v49 + 24) & 1;
                      if ((v59 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        v62 = *(_QWORD *)(v31 + 24);
                        v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
                        if (v31 == *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFFFELL) + 8))
                          *(_QWORD *)(v63 + 8) = v49;
                        else
                          *(_QWORD *)(v63 + 16) = v49;
                      }
                      else
                      {
                        *v12 = v49;
                        v62 = *(_QWORD *)(v31 + 24);
                        v44 = v49;
                      }
                      *(_QWORD *)(v49 + 16) = v31;
                      if ((v62 & 1) != 0)
                        v49 |= 1uLL;
                      *(_QWORD *)(v31 + 24) = v49;
                      v31 = *(_QWORD *)(v15 + 16);
                      v51 = *(_QWORD *)(v31 + 16);
                    }
LABEL_400:
                    *(_QWORD *)(v31 + 24) = *(_QWORD *)(v31 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v15 + 24) & 1;
                    *(_QWORD *)(v15 + 24) &= ~1uLL;
                    if (v51)
                      *(_QWORD *)(v51 + 24) &= ~1uLL;
                    v64 = (unint64_t *)(v31 + 8);
                    v65 = *(_QWORD *)(v31 + 8);
                    *(_QWORD *)(v15 + 16) = v65;
                    if (v65)
                      goto LABEL_130;
                    goto LABEL_134;
                  }
                }
                v51 = *(_QWORD *)(v31 + 16);
                if (v51 && (*(_BYTE *)(v51 + 24) & 1) != 0)
                  goto LABEL_400;
              }
              else
              {
                v32 = *(_QWORD *)(v31 + 24);
                if ((v32 & 1) != 0)
                {
                  *(_QWORD *)(v31 + 24) = v32 & 0xFFFFFFFFFFFFFFFELL;
                  v33 = *(_QWORD *)(v15 + 24) | 1;
                  *(_QWORD *)(v15 + 24) = v33;
                  v34 = *(_QWORD **)(v31 + 16);
                  *(_QWORD *)(v15 + 8) = v34;
                  if (v34)
                  {
                    if ((v34[3] & 1) != 0)
                      v35 = v15 | 1;
                    else
                      v35 = v15;
                    v34[3] = v35;
                    v33 = *(_QWORD *)(v15 + 24);
                  }
                  *(_QWORD *)(v31 + 24) = v33 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v31 + 24) & 1;
                  if ((v33 & 0xFFFFFFFFFFFFFFFELL) != 0)
                  {
                    v36 = *(_QWORD *)(v15 + 24);
                    v37 = v36 & 0xFFFFFFFFFFFFFFFELL;
                    if (v15 == *(_QWORD *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8))
                    {
                      *(_QWORD *)(v37 + 8) = v31;
                      v34 = *(_QWORD **)(v15 + 8);
                    }
                    else
                    {
                      *(_QWORD *)(v37 + 16) = v31;
                    }
                  }
                  else
                  {
                    *v12 = v31;
                    v36 = *(_QWORD *)(v15 + 24);
                    v44 = v31;
                  }
                  *(_QWORD *)(v31 + 16) = v15;
                  if ((v36 & 1) != 0)
                    v31 |= 1uLL;
                  *(_QWORD *)(v15 + 24) = v31;
                  v31 = (unint64_t)v34;
                }
                v45 = *(_QWORD *)(v31 + 8);
                if (v45)
                {
                  v46 = *(_QWORD *)(v45 + 24);
                  if ((v46 & 1) != 0)
                    goto LABEL_100;
                }
                v47 = *(_QWORD *)(v31 + 16);
                if (v47)
                {
                  v48 = *(_QWORD *)(v47 + 24);
                  if ((v48 & 1) != 0)
                  {
                    if (!v45)
                      goto LABEL_103;
                    v46 = *(_QWORD *)(v45 + 24);
LABEL_100:
                    if ((v46 & 1) == 0)
                    {
                      v47 = *(_QWORD *)(v31 + 16);
                      if (v47)
                      {
                        v48 = *(_QWORD *)(v47 + 24);
LABEL_103:
                        *(_QWORD *)(v47 + 24) = v48 & 0xFFFFFFFFFFFFFFFELL;
                      }
                      v54 = *(_QWORD *)(v31 + 24) | 1;
                      *(_QWORD *)(v31 + 24) = v54;
                      v55 = *(_QWORD *)(v47 + 8);
                      *(_QWORD *)(v31 + 16) = v55;
                      if (v55)
                      {
                        if ((*(_QWORD *)(v55 + 24) & 1) != 0)
                          v56 = v31 | 1;
                        else
                          v56 = v31;
                        *(_QWORD *)(v55 + 24) = v56;
                        v54 = *(_QWORD *)(v31 + 24);
                      }
                      *(_QWORD *)(v47 + 24) = v54 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v47 + 24) & 1;
                      if ((v54 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        v57 = *(_QWORD *)(v31 + 24);
                        v58 = v57 & 0xFFFFFFFFFFFFFFFELL;
                        if (v31 == *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFFELL) + 8))
                          *(_QWORD *)(v58 + 8) = v47;
                        else
                          *(_QWORD *)(v58 + 16) = v47;
                      }
                      else
                      {
                        *v12 = v47;
                        v57 = *(_QWORD *)(v31 + 24);
                        v44 = v47;
                      }
                      *(_QWORD *)(v47 + 8) = v31;
                      if ((v57 & 1) != 0)
                        v47 |= 1uLL;
                      *(_QWORD *)(v31 + 24) = v47;
                      v31 = *(_QWORD *)(v15 + 8);
                      v45 = *(_QWORD *)(v31 + 8);
                    }
                    *(_QWORD *)(v31 + 24) = *(_QWORD *)(v31 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v15 + 24) & 1;
                    *(_QWORD *)(v15 + 24) &= ~1uLL;
                    if (v45)
                      *(_QWORD *)(v45 + 24) &= ~1uLL;
                    v64 = (unint64_t *)(v31 + 16);
                    v65 = *(_QWORD *)(v31 + 16);
                    *(_QWORD *)(v15 + 8) = v65;
                    if (v65)
                    {
LABEL_130:
                      if ((*(_QWORD *)(v65 + 24) & 1) != 0)
                        v66 = v15 | 1;
                      else
                        v66 = v15;
                      *(_QWORD *)(v65 + 24) = v66;
                    }
LABEL_134:
                    v67 = *(_QWORD *)(v15 + 24);
                    *(_QWORD *)(v31 + 24) = v67 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v31 + 24) & 1;
                    if ((v67 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      v68 = *(_QWORD *)(v15 + 24);
                      v69 = v68 & 0xFFFFFFFFFFFFFFFELL;
                      if (v15 == *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFFFELL) + 8))
                        *(_QWORD *)(v69 + 8) = v31;
                      else
                        *(_QWORD *)(v69 + 16) = v31;
                    }
                    else
                    {
                      *v12 = v31;
                      v68 = *(_QWORD *)(v15 + 24);
                      v44 = v31;
                    }
                    *v64 = v15;
                    if ((v68 & 1) != 0)
                      v70 = v31 | 1;
                    else
                      v70 = v31;
                    *(_QWORD *)(v15 + 24) = v70;
                    v52 = (_QWORD *)v44;
LABEL_143:
                    if (!v52)
                      goto LABEL_146;
                    v53 = v52[3];
                    break;
                  }
                }
              }
              *(_QWORD *)(v31 + 24) |= 1uLL;
              v18 = *(_QWORD *)(v15 + 24) & 0xFFFFFFFFFFFFFFFELL;
            }
            v52[3] = v53 & 0xFFFFFFFFFFFFFFFELL;
          }
          goto LABEL_146;
        }
      }
      if ((*(_QWORD *)(v15 + 24) & 1) != 0)
        v29 = v18 | 1;
      else
        v29 = v18;
      *(_QWORD *)(v15 + 24) = v29;
      goto LABEL_49;
    }
  }
LABEL_146:
  v71 = v7 + 4;
  if (!v7[4] || MediaSegmentOffsetList_RB_FIND((_QWORD **)v7 + 4, v203) != value)
    goto LABEL_267;
  v72 = value[5];
  if (value[4])
  {
    if (v72)
    {
      do
      {
        v73 = v72;
        v72 = *(_QWORD *)(v72 + 32);
      }
      while (v72);
      v72 = *(_QWORD *)(v73 + 40);
      v74 = *(_QWORD *)(v73 + 48);
      v75 = v74 & 0xFFFFFFFFFFFFFFFELL;
      if (v72)
      {
        v76 = *(_QWORD *)(v72 + 48) & 1 | v75;
        if ((*(_QWORD *)(v72 + 48) & 1) == 0)
          v76 = v74 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v72 + 48) = v76;
      }
      v77 = v7 + 4;
      if (v75)
      {
        v77 = (unint64_t *)(v75 + 32);
        if (*(_QWORD *)(v75 + 32) != v73)
          v77 = (unint64_t *)(v75 + 40);
      }
      LODWORD(v74) = v74 & 1;
      *v77 = v72;
      if ((_QWORD *)(*(_QWORD *)(v73 + 48) & 0xFFFFFFFFFFFFFFFELL) == value)
        v75 = v73;
      v78 = value[6];
      *(_OWORD *)(v73 + 32) = *((_OWORD *)value + 2);
      *(_QWORD *)(v73 + 48) = v78;
      v79 = v7 + 4;
      v80 = value[6] & 0xFFFFFFFFFFFFFFFELL;
      if (v80)
      {
        v82 = *(_QWORD **)(v80 + 32);
        v81 = (unint64_t *)(v80 + 32);
        if (v82 == value)
          v79 = v81;
        else
          v79 = v81 + 1;
      }
      *v79 = v73;
      v83 = value[4];
      v84 = *(_QWORD *)(v83 + 48) & 1 | v73 & 0xFFFFFFFFFFFFFFFELL;
      if ((*(_QWORD *)(v83 + 48) & 1) == 0)
        v84 = v73;
      *(_QWORD *)(v83 + 48) = v84;
      v85 = value[5];
      if (v85)
      {
        if ((*(_QWORD *)(v85 + 48) & 1) != 0)
          v73 = *(_QWORD *)(v85 + 48) & 1 | v73 & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)(v85 + 48) = v73;
      }
      goto LABEL_180;
    }
    v75 = value[6] & 0xFFFFFFFFFFFFFFFELL;
    v74 = value[6] & 1;
    v72 = value[4];
    goto LABEL_173;
  }
  v75 = value[6] & 0xFFFFFFFFFFFFFFFELL;
  v74 = value[6] & 1;
  if (v72)
  {
LABEL_173:
    v86 = *(_QWORD *)(v72 + 48) & 1 | v75;
    if ((*(_QWORD *)(v72 + 48) & 1) == 0)
      v86 = v75;
    *(_QWORD *)(v72 + 48) = v86;
  }
  v87 = v7 + 4;
  if (v75)
  {
    v87 = (unint64_t *)(v75 + 32);
    if (*(_QWORD **)(v75 + 32) != value)
      v87 = (unint64_t *)(v75 + 40);
  }
  *v87 = v72;
LABEL_180:
  if (!(_DWORD)v74)
  {
    while (1)
    {
      v114 = v72;
      v72 = v75;
      if (v114)
      {
        v115 = *(_QWORD *)(v114 + 48);
        if ((v115 & 1) != 0)
          break;
      }
      v101 = *v71;
      if (v114 == *v71)
        goto LABEL_264;
      v88 = *(_QWORD *)(v72 + 32);
      if (v88 == v114)
      {
        v88 = *(_QWORD *)(v72 + 40);
        v95 = *(_QWORD *)(v88 + 48);
        if ((v95 & 1) != 0)
        {
          *(_QWORD *)(v88 + 48) = v95 & 0xFFFFFFFFFFFFFFFELL;
          v96 = *(_QWORD *)(v72 + 48) | 1;
          *(_QWORD *)(v72 + 48) = v96;
          v97 = *(_QWORD *)(v88 + 32);
          *(_QWORD *)(v72 + 40) = v97;
          if (v97)
          {
            v98 = *(_QWORD *)(v97 + 48) & 1 | v72 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(_QWORD *)(v97 + 48) & 1) == 0)
              v98 = v72;
            *(_QWORD *)(v97 + 48) = v98;
            v96 = *(_QWORD *)(v72 + 48);
          }
          *(_QWORD *)(v88 + 48) = v96 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v88 + 48) & 1;
          if ((v96 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v99 = *(_QWORD *)(v72 + 48);
            v100 = v99 & 0xFFFFFFFFFFFFFFFELL;
            if (v72 == *(_QWORD *)((v99 & 0xFFFFFFFFFFFFFFFELL) + 32))
            {
              *(_QWORD *)(v100 + 32) = v88;
            }
            else
            {
              *(_QWORD *)(v100 + 40) = v88;
              v97 = *(_QWORD *)(v72 + 40);
            }
          }
          else
          {
            *v71 = v88;
            v99 = *(_QWORD *)(v72 + 48);
            v101 = v88;
          }
          *(_QWORD *)(v88 + 32) = v72;
          v109 = v99 & 1;
          v102 = v109 == 0;
          v110 = v109 | v88 & 0xFFFFFFFFFFFFFFFELL;
          if (!v102)
            v88 = v110;
          *(_QWORD *)(v72 + 48) = v88;
          v88 = v97;
        }
        v111 = *(_QWORD *)(v88 + 32);
        if (v111)
        {
          v112 = *(_QWORD *)(v111 + 48);
          if ((v112 & 1) != 0)
          {
            v113 = *(_QWORD *)(v88 + 40);
            if (!v113 || (*(_BYTE *)(v113 + 48) & 1) == 0)
            {
              *(_QWORD *)(v111 + 48) = v112 & 0xFFFFFFFFFFFFFFFELL;
              v121 = *(_QWORD *)(v88 + 48) | 1;
              *(_QWORD *)(v88 + 48) = v121;
              v122 = *(_QWORD *)(v111 + 40);
              *(_QWORD *)(v88 + 32) = v122;
              if (v122)
              {
                v123 = *(_QWORD *)(v122 + 48) & 1 | v88 & 0xFFFFFFFFFFFFFFFELL;
                if ((*(_QWORD *)(v122 + 48) & 1) == 0)
                  v123 = v88;
                *(_QWORD *)(v122 + 48) = v123;
                v121 = *(_QWORD *)(v88 + 48);
              }
              *(_QWORD *)(v111 + 48) = v121 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v111 + 48) & 1;
              if ((v121 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v124 = *(_QWORD *)(v88 + 48);
                v125 = v124 & 0xFFFFFFFFFFFFFFFELL;
                if (v88 == *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFFFELL) + 32))
                  *(_QWORD *)(v125 + 32) = v111;
                else
                  *(_QWORD *)(v125 + 40) = v111;
              }
              else
              {
                *v71 = v111;
                v124 = *(_QWORD *)(v88 + 48);
                v101 = v111;
              }
              *(_QWORD *)(v111 + 40) = v88;
              v199 = v124 & 1;
              v102 = v199 == 0;
              v200 = v199 | v111 & 0xFFFFFFFFFFFFFFFELL;
              if (!v102)
                v111 = v200;
              *(_QWORD *)(v88 + 48) = v111;
              v88 = *(_QWORD *)(v72 + 40);
              v113 = *(_QWORD *)(v88 + 40);
            }
LABEL_408:
            *(_QWORD *)(v88 + 48) = *(_QWORD *)(v88 + 48) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v72 + 48) & 1;
            *(_QWORD *)(v72 + 48) &= ~1uLL;
            if (v113)
              *(_QWORD *)(v113 + 48) &= ~1uLL;
            v128 = (unint64_t *)(v88 + 32);
            v129 = *(_QWORD *)(v88 + 32);
            *(_QWORD *)(v72 + 40) = v129;
            if (v129)
              goto LABEL_253;
            goto LABEL_256;
          }
        }
        v113 = *(_QWORD *)(v88 + 40);
        if (v113 && (*(_BYTE *)(v113 + 48) & 1) != 0)
          goto LABEL_408;
      }
      else
      {
        v89 = *(_QWORD *)(v88 + 48);
        if ((v89 & 1) != 0)
        {
          *(_QWORD *)(v88 + 48) = v89 & 0xFFFFFFFFFFFFFFFELL;
          v90 = *(_QWORD *)(v72 + 48) | 1;
          *(_QWORD *)(v72 + 48) = v90;
          v91 = *(_QWORD *)(v88 + 40);
          *(_QWORD *)(v72 + 32) = v91;
          if (v91)
          {
            v92 = *(_QWORD *)(v91 + 48) & 1 | v72 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(_QWORD *)(v91 + 48) & 1) == 0)
              v92 = v72;
            *(_QWORD *)(v91 + 48) = v92;
            v90 = *(_QWORD *)(v72 + 48);
          }
          *(_QWORD *)(v88 + 48) = v90 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v88 + 48) & 1;
          if ((v90 & 0xFFFFFFFFFFFFFFFELL) != 0)
          {
            v93 = *(_QWORD *)(v72 + 48);
            v94 = v93 & 0xFFFFFFFFFFFFFFFELL;
            if (v72 == *(_QWORD *)((v93 & 0xFFFFFFFFFFFFFFFELL) + 32))
            {
              *(_QWORD *)(v94 + 32) = v88;
              v91 = *(_QWORD *)(v72 + 32);
            }
            else
            {
              *(_QWORD *)(v94 + 40) = v88;
            }
          }
          else
          {
            *v71 = v88;
            v93 = *(_QWORD *)(v72 + 48);
            v101 = v88;
          }
          *(_QWORD *)(v88 + 40) = v72;
          v103 = v93 & 1;
          v102 = v103 == 0;
          v104 = v103 | v88 & 0xFFFFFFFFFFFFFFFELL;
          if (!v102)
            v88 = v104;
          *(_QWORD *)(v72 + 48) = v88;
          v88 = v91;
        }
        v105 = *(_QWORD *)(v88 + 32);
        if (v105)
        {
          v106 = *(_QWORD *)(v105 + 48);
          if ((v106 & 1) != 0)
            goto LABEL_225;
        }
        v107 = *(_QWORD *)(v88 + 40);
        if (v107)
        {
          v108 = *(_QWORD *)(v107 + 48);
          if ((v108 & 1) != 0)
          {
            if (!v105)
              goto LABEL_228;
            v106 = *(_QWORD *)(v105 + 48);
LABEL_225:
            if ((v106 & 1) == 0)
            {
              v107 = *(_QWORD *)(v88 + 40);
              if (v107)
              {
                v108 = *(_QWORD *)(v107 + 48);
LABEL_228:
                *(_QWORD *)(v107 + 48) = v108 & 0xFFFFFFFFFFFFFFFELL;
              }
              v116 = *(_QWORD *)(v88 + 48) | 1;
              *(_QWORD *)(v88 + 48) = v116;
              v117 = *(_QWORD *)(v107 + 32);
              *(_QWORD *)(v88 + 40) = v117;
              if (v117)
              {
                v118 = *(_QWORD *)(v117 + 48) & 1 | v88 & 0xFFFFFFFFFFFFFFFELL;
                if ((*(_QWORD *)(v117 + 48) & 1) == 0)
                  v118 = v88;
                *(_QWORD *)(v117 + 48) = v118;
                v116 = *(_QWORD *)(v88 + 48);
              }
              *(_QWORD *)(v107 + 48) = v116 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v107 + 48) & 1;
              if ((v116 & 0xFFFFFFFFFFFFFFFELL) != 0)
              {
                v119 = *(_QWORD *)(v88 + 48);
                v120 = v119 & 0xFFFFFFFFFFFFFFFELL;
                if (v88 == *(_QWORD *)((v119 & 0xFFFFFFFFFFFFFFFELL) + 32))
                  *(_QWORD *)(v120 + 32) = v107;
                else
                  *(_QWORD *)(v120 + 40) = v107;
              }
              else
              {
                *v71 = v107;
                v119 = *(_QWORD *)(v88 + 48);
                v101 = v107;
              }
              *(_QWORD *)(v107 + 32) = v88;
              v126 = v119 & 1;
              v102 = v126 == 0;
              v127 = v126 | v107 & 0xFFFFFFFFFFFFFFFELL;
              if (!v102)
                v107 = v127;
              *(_QWORD *)(v88 + 48) = v107;
              v88 = *(_QWORD *)(v72 + 32);
              v105 = *(_QWORD *)(v88 + 32);
            }
            *(_QWORD *)(v88 + 48) = *(_QWORD *)(v88 + 48) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v72 + 48) & 1;
            *(_QWORD *)(v72 + 48) &= ~1uLL;
            if (v105)
              *(_QWORD *)(v105 + 48) &= ~1uLL;
            v128 = (unint64_t *)(v88 + 40);
            v129 = *(_QWORD *)(v88 + 40);
            *(_QWORD *)(v72 + 32) = v129;
            if (v129)
            {
LABEL_253:
              v130 = *(_QWORD *)(v129 + 48) & 1 | v72 & 0xFFFFFFFFFFFFFFFELL;
              if ((*(_QWORD *)(v129 + 48) & 1) == 0)
                v130 = v72;
              *(_QWORD *)(v129 + 48) = v130;
            }
LABEL_256:
            v131 = *(_QWORD *)(v72 + 48);
            *(_QWORD *)(v88 + 48) = v131 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v88 + 48) & 1;
            if ((v131 & 0xFFFFFFFFFFFFFFFELL) != 0)
            {
              v132 = *(_QWORD *)(v72 + 48);
              v133 = v132 & 0xFFFFFFFFFFFFFFFELL;
              if (v72 == *(_QWORD *)((v132 & 0xFFFFFFFFFFFFFFFELL) + 32))
                *(_QWORD *)(v133 + 32) = v88;
              else
                *(_QWORD *)(v133 + 40) = v88;
            }
            else
            {
              *v71 = v88;
              v132 = *(_QWORD *)(v72 + 48);
              v101 = v88;
            }
            *v128 = v72;
            v134 = v132 & 1;
            if (v134)
              v88 = v88 & 0xFFFFFFFFFFFFFFFELL | v134;
            *(_QWORD *)(v72 + 48) = v88;
            v114 = v101;
LABEL_264:
            if (!v114)
              goto LABEL_267;
            v115 = *(_QWORD *)(v114 + 48);
            break;
          }
        }
      }
      *(_QWORD *)(v88 + 48) |= 1uLL;
      v75 = *(_QWORD *)(v72 + 48) & 0xFFFFFFFFFFFFFFFELL;
    }
    *(_QWORD *)(v114 + 48) = v115 & 0xFFFFFFFFFFFFFFFELL;
  }
LABEL_267:
  if (value[13])
  {
    v135 = v7 + 5;
    if (v7[5])
    {
      if ((_QWORD *)MediaSegmentMediaSequenceNumberList_RB_FIND(v7 + 5, (uint64_t)v203) == value)
      {
        v136 = value[8];
        if (value[7])
        {
          if (v136)
          {
            do
            {
              v137 = v136;
              v136 = *(_QWORD *)(v136 + 56);
            }
            while (v136);
            v136 = *(_QWORD *)(v137 + 64);
            v138 = *(_QWORD *)(v137 + 72);
            v139 = v138 & 0xFFFFFFFFFFFFFFFELL;
            if (v136)
            {
              v140 = *(_QWORD *)(v136 + 72) & 1 | v139;
              if ((*(_QWORD *)(v136 + 72) & 1) == 0)
                v140 = v138 & 0xFFFFFFFFFFFFFFFELL;
              *(_QWORD *)(v136 + 72) = v140;
            }
            v141 = v7 + 5;
            if (v139)
            {
              v141 = (unint64_t *)(v139 + 56);
              if (*(_QWORD *)(v139 + 56) != v137)
                v141 = (unint64_t *)(v139 + 64);
            }
            LODWORD(v138) = v138 & 1;
            *v141 = v136;
            if ((_QWORD *)(*(_QWORD *)(v137 + 72) & 0xFFFFFFFFFFFFFFFELL) == value)
              v139 = v137;
            v142 = value[9];
            *(_OWORD *)(v137 + 56) = *(_OWORD *)(value + 7);
            *(_QWORD *)(v137 + 72) = v142;
            v143 = v7 + 5;
            v144 = value[9] & 0xFFFFFFFFFFFFFFFELL;
            if (v144)
            {
              v146 = *(_QWORD **)(v144 + 56);
              v145 = (unint64_t *)(v144 + 56);
              if (v146 == value)
                v143 = v145;
              else
                v143 = v145 + 1;
            }
            *v143 = v137;
            v147 = value[7];
            v148 = *(_QWORD *)(v147 + 72) & 1 | v137 & 0xFFFFFFFFFFFFFFFELL;
            if ((*(_QWORD *)(v147 + 72) & 1) == 0)
              v148 = v137;
            *(_QWORD *)(v147 + 72) = v148;
            v149 = value[8];
            if (v149)
            {
              if ((*(_QWORD *)(v149 + 72) & 1) != 0)
                v137 = *(_QWORD *)(v149 + 72) & 1 | v137 & 0xFFFFFFFFFFFFFFFELL;
              *(_QWORD *)(v149 + 72) = v137;
            }
            goto LABEL_302;
          }
          v139 = value[9] & 0xFFFFFFFFFFFFFFFELL;
          v138 = value[9] & 1;
          v136 = value[7];
        }
        else
        {
          v139 = value[9] & 0xFFFFFFFFFFFFFFFELL;
          v138 = value[9] & 1;
          if (!v136)
          {
LABEL_298:
            v151 = v7 + 5;
            if (v139)
            {
              v151 = (unint64_t *)(v139 + 56);
              if (*(_QWORD **)(v139 + 56) != value)
                v151 = (unint64_t *)(v139 + 64);
            }
            *v151 = v136;
LABEL_302:
            if (!(_DWORD)v138)
            {
              while (1)
              {
                v177 = v136;
                v136 = v139;
                if (v177)
                {
                  v178 = *(_QWORD *)(v177 + 72);
                  if ((v178 & 1) != 0)
                    break;
                }
                v165 = *v135;
                if (v177 == *v135)
                  goto LABEL_386;
                v152 = *(_QWORD *)(v136 + 56);
                if (v152 == v177)
                {
                  v152 = *(_QWORD *)(v136 + 64);
                  v159 = *(_QWORD *)(v152 + 72);
                  if ((v159 & 1) != 0)
                  {
                    *(_QWORD *)(v152 + 72) = v159 & 0xFFFFFFFFFFFFFFFELL;
                    v160 = *(_QWORD *)(v136 + 72) | 1;
                    *(_QWORD *)(v136 + 72) = v160;
                    v161 = *(_QWORD *)(v152 + 56);
                    *(_QWORD *)(v136 + 64) = v161;
                    if (v161)
                    {
                      v162 = *(_QWORD *)(v161 + 72) & 1 | v136 & 0xFFFFFFFFFFFFFFFELL;
                      if ((*(_QWORD *)(v161 + 72) & 1) == 0)
                        v162 = v136;
                      *(_QWORD *)(v161 + 72) = v162;
                      v160 = *(_QWORD *)(v136 + 72);
                    }
                    *(_QWORD *)(v152 + 72) = v160 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v152 + 72) & 1;
                    if ((v160 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      v163 = *(_QWORD *)(v136 + 72);
                      v164 = v163 & 0xFFFFFFFFFFFFFFFELL;
                      if (v136 == *(_QWORD *)((v163 & 0xFFFFFFFFFFFFFFFELL) + 56))
                      {
                        *(_QWORD *)(v164 + 56) = v152;
                      }
                      else
                      {
                        *(_QWORD *)(v164 + 64) = v152;
                        v161 = *(_QWORD *)(v136 + 64);
                      }
                    }
                    else
                    {
                      *v135 = v152;
                      v163 = *(_QWORD *)(v136 + 72);
                      v165 = v152;
                    }
                    *(_QWORD *)(v152 + 56) = v136;
                    v172 = v163 & 1;
                    v102 = v172 == 0;
                    v173 = v172 | v152 & 0xFFFFFFFFFFFFFFFELL;
                    if (!v102)
                      v152 = v173;
                    *(_QWORD *)(v136 + 72) = v152;
                    v152 = v161;
                  }
                  v174 = *(_QWORD *)(v152 + 56);
                  if (v174)
                  {
                    v175 = *(_QWORD *)(v174 + 72);
                    if ((v175 & 1) != 0)
                    {
                      v176 = *(_QWORD *)(v152 + 64);
                      if (!v176 || (*(_BYTE *)(v176 + 72) & 1) == 0)
                      {
                        *(_QWORD *)(v174 + 72) = v175 & 0xFFFFFFFFFFFFFFFELL;
                        v184 = *(_QWORD *)(v152 + 72) | 1;
                        *(_QWORD *)(v152 + 72) = v184;
                        v185 = *(_QWORD *)(v174 + 64);
                        *(_QWORD *)(v152 + 56) = v185;
                        if (v185)
                        {
                          v186 = *(_QWORD *)(v185 + 72) & 1 | v152 & 0xFFFFFFFFFFFFFFFELL;
                          if ((*(_QWORD *)(v185 + 72) & 1) == 0)
                            v186 = v152;
                          *(_QWORD *)(v185 + 72) = v186;
                          v184 = *(_QWORD *)(v152 + 72);
                        }
                        *(_QWORD *)(v174 + 72) = v184 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v174 + 72) & 1;
                        if ((v184 & 0xFFFFFFFFFFFFFFFELL) != 0)
                        {
                          v187 = *(_QWORD *)(v152 + 72);
                          v188 = v187 & 0xFFFFFFFFFFFFFFFELL;
                          if (v152 == *(_QWORD *)((v187 & 0xFFFFFFFFFFFFFFFELL) + 56))
                            *(_QWORD *)(v188 + 56) = v174;
                          else
                            *(_QWORD *)(v188 + 64) = v174;
                        }
                        else
                        {
                          *v135 = v174;
                          v187 = *(_QWORD *)(v152 + 72);
                          v165 = v174;
                        }
                        *(_QWORD *)(v174 + 64) = v152;
                        v201 = v187 & 1;
                        v102 = v201 == 0;
                        v202 = v201 | v174 & 0xFFFFFFFFFFFFFFFELL;
                        if (!v102)
                          v174 = v202;
                        *(_QWORD *)(v152 + 72) = v174;
                        v152 = *(_QWORD *)(v136 + 64);
                        v176 = *(_QWORD *)(v152 + 64);
                      }
LABEL_417:
                      *(_QWORD *)(v152 + 72) = *(_QWORD *)(v152 + 72) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v136 + 72) & 1;
                      *(_QWORD *)(v136 + 72) &= ~1uLL;
                      if (v176)
                        *(_QWORD *)(v176 + 72) &= ~1uLL;
                      v191 = (unint64_t *)(v152 + 56);
                      v192 = *(_QWORD *)(v152 + 56);
                      *(_QWORD *)(v136 + 64) = v192;
                      if (v192)
                        goto LABEL_375;
                      goto LABEL_378;
                    }
                  }
                  v176 = *(_QWORD *)(v152 + 64);
                  if (v176 && (*(_BYTE *)(v176 + 72) & 1) != 0)
                    goto LABEL_417;
                }
                else
                {
                  v153 = *(_QWORD *)(v152 + 72);
                  if ((v153 & 1) != 0)
                  {
                    *(_QWORD *)(v152 + 72) = v153 & 0xFFFFFFFFFFFFFFFELL;
                    v154 = *(_QWORD *)(v136 + 72) | 1;
                    *(_QWORD *)(v136 + 72) = v154;
                    v155 = *(_QWORD *)(v152 + 64);
                    *(_QWORD *)(v136 + 56) = v155;
                    if (v155)
                    {
                      v156 = *(_QWORD *)(v155 + 72) & 1 | v136 & 0xFFFFFFFFFFFFFFFELL;
                      if ((*(_QWORD *)(v155 + 72) & 1) == 0)
                        v156 = v136;
                      *(_QWORD *)(v155 + 72) = v156;
                      v154 = *(_QWORD *)(v136 + 72);
                    }
                    *(_QWORD *)(v152 + 72) = v154 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v152 + 72) & 1;
                    if ((v154 & 0xFFFFFFFFFFFFFFFELL) != 0)
                    {
                      v157 = *(_QWORD *)(v136 + 72);
                      v158 = v157 & 0xFFFFFFFFFFFFFFFELL;
                      if (v136 == *(_QWORD *)((v157 & 0xFFFFFFFFFFFFFFFELL) + 56))
                      {
                        *(_QWORD *)(v158 + 56) = v152;
                        v155 = *(_QWORD *)(v136 + 56);
                      }
                      else
                      {
                        *(_QWORD *)(v158 + 64) = v152;
                      }
                    }
                    else
                    {
                      *v135 = v152;
                      v157 = *(_QWORD *)(v136 + 72);
                      v165 = v152;
                    }
                    *(_QWORD *)(v152 + 64) = v136;
                    v166 = v157 & 1;
                    v102 = v166 == 0;
                    v167 = v166 | v152 & 0xFFFFFFFFFFFFFFFELL;
                    if (!v102)
                      v152 = v167;
                    *(_QWORD *)(v136 + 72) = v152;
                    v152 = v155;
                  }
                  v168 = *(_QWORD *)(v152 + 56);
                  if (v168)
                  {
                    v169 = *(_QWORD *)(v168 + 72);
                    if ((v169 & 1) != 0)
                      goto LABEL_347;
                  }
                  v170 = *(_QWORD *)(v152 + 64);
                  if (v170)
                  {
                    v171 = *(_QWORD *)(v170 + 72);
                    if ((v171 & 1) != 0)
                    {
                      if (!v168)
                        goto LABEL_350;
                      v169 = *(_QWORD *)(v168 + 72);
LABEL_347:
                      if ((v169 & 1) == 0)
                      {
                        v170 = *(_QWORD *)(v152 + 64);
                        if (v170)
                        {
                          v171 = *(_QWORD *)(v170 + 72);
LABEL_350:
                          *(_QWORD *)(v170 + 72) = v171 & 0xFFFFFFFFFFFFFFFELL;
                        }
                        v179 = *(_QWORD *)(v152 + 72) | 1;
                        *(_QWORD *)(v152 + 72) = v179;
                        v180 = *(_QWORD *)(v170 + 56);
                        *(_QWORD *)(v152 + 64) = v180;
                        if (v180)
                        {
                          v181 = *(_QWORD *)(v180 + 72) & 1 | v152 & 0xFFFFFFFFFFFFFFFELL;
                          if ((*(_QWORD *)(v180 + 72) & 1) == 0)
                            v181 = v152;
                          *(_QWORD *)(v180 + 72) = v181;
                          v179 = *(_QWORD *)(v152 + 72);
                        }
                        *(_QWORD *)(v170 + 72) = v179 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v170 + 72) & 1;
                        if ((v179 & 0xFFFFFFFFFFFFFFFELL) != 0)
                        {
                          v182 = *(_QWORD *)(v152 + 72);
                          v183 = v182 & 0xFFFFFFFFFFFFFFFELL;
                          if (v152 == *(_QWORD *)((v182 & 0xFFFFFFFFFFFFFFFELL) + 56))
                            *(_QWORD *)(v183 + 56) = v170;
                          else
                            *(_QWORD *)(v183 + 64) = v170;
                        }
                        else
                        {
                          *v135 = v170;
                          v182 = *(_QWORD *)(v152 + 72);
                          v165 = v170;
                        }
                        *(_QWORD *)(v170 + 56) = v152;
                        v189 = v182 & 1;
                        v102 = v189 == 0;
                        v190 = v189 | v170 & 0xFFFFFFFFFFFFFFFELL;
                        if (!v102)
                          v170 = v190;
                        *(_QWORD *)(v152 + 72) = v170;
                        v152 = *(_QWORD *)(v136 + 56);
                        v168 = *(_QWORD *)(v152 + 56);
                      }
                      *(_QWORD *)(v152 + 72) = *(_QWORD *)(v152 + 72) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v136 + 72) & 1;
                      *(_QWORD *)(v136 + 72) &= ~1uLL;
                      if (v168)
                        *(_QWORD *)(v168 + 72) &= ~1uLL;
                      v191 = (unint64_t *)(v152 + 64);
                      v192 = *(_QWORD *)(v152 + 64);
                      *(_QWORD *)(v136 + 56) = v192;
                      if (v192)
                      {
LABEL_375:
                        v193 = *(_QWORD *)(v192 + 72) & 1 | v136 & 0xFFFFFFFFFFFFFFFELL;
                        if ((*(_QWORD *)(v192 + 72) & 1) == 0)
                          v193 = v136;
                        *(_QWORD *)(v192 + 72) = v193;
                      }
LABEL_378:
                      v194 = *(_QWORD *)(v136 + 72);
                      *(_QWORD *)(v152 + 72) = v194 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v152 + 72) & 1;
                      if ((v194 & 0xFFFFFFFFFFFFFFFELL) != 0)
                      {
                        v195 = *(_QWORD *)(v136 + 72);
                        v196 = v195 & 0xFFFFFFFFFFFFFFFELL;
                        if (v136 == *(_QWORD *)((v195 & 0xFFFFFFFFFFFFFFFELL) + 56))
                          *(_QWORD *)(v196 + 56) = v152;
                        else
                          *(_QWORD *)(v196 + 64) = v152;
                      }
                      else
                      {
                        *v135 = v152;
                        v195 = *(_QWORD *)(v136 + 72);
                        v165 = v152;
                      }
                      *v191 = v136;
                      v197 = v195 & 1;
                      if (v197)
                        v152 = v152 & 0xFFFFFFFFFFFFFFFELL | v197;
                      *(_QWORD *)(v136 + 72) = v152;
                      v177 = v165;
LABEL_386:
                      if (!v177)
                        goto LABEL_389;
                      v178 = *(_QWORD *)(v177 + 72);
                      break;
                    }
                  }
                }
                *(_QWORD *)(v152 + 72) |= 1uLL;
                v139 = *(_QWORD *)(v136 + 72) & 0xFFFFFFFFFFFFFFFELL;
              }
              *(_QWORD *)(v177 + 72) = v178 & 0xFFFFFFFFFFFFFFFELL;
            }
            goto LABEL_389;
          }
        }
        v150 = *(_QWORD *)(v136 + 72) & 1 | v139;
        if ((*(_QWORD *)(v136 + 72) & 1) == 0)
          v150 = v139;
        *(_QWORD *)(v136 + 72) = v150;
        goto LABEL_298;
      }
    }
  }
LABEL_389:
  v198 = value[20] & 0xFFFFFFF6;
  *((_DWORD *)value + 40) = v198 | 8;
  if (a3)
  {
    if ((*(_DWORD *)(*v7 + 220) & 2) != 0)
      *((_DWORD *)value + 40) = v198 | 0x48;
  }
  segment_UnlockEntry((uint64_t **)value, a2);
}

unint64_t MediaSegmentStartTimeList_RB_PREV(unint64_t a1)
{
  unint64_t v1;
  unint64_t result;
  unint64_t v3;
  BOOL v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    do
    {
      result = v1;
      v1 = *(_QWORD *)(v1 + 16);
    }
    while (v1);
  }
  else
  {
    v3 = a1;
    result = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (!result || *(_QWORD *)(result + 16) != v3)
    {
      do
      {
        result = *(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (!result)
          break;
        v4 = v3 == *(_QWORD *)(result + 8);
        v3 = *(_QWORD *)(v3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t stream_CommitPersistentStreamInfoIfNecessary(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
    return FigSignalErrorAt();
  if (!*(_BYTE *)(a1 + 122))
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 220) & 2) != 0 && (*(_BYTE *)(a1 + 176) & 2) == 0)
    return FigSignalErrorAt();
  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
  if (!v3)
    return 4294954514;
  result = v3(v1);
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 122) = 0;
  return result;
}

uint64_t sc_UnlockPersistentStoreForAnything(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;

  if ((*(_BYTE *)(a1 + 220) & 2) == 0 || !*(_QWORD *)(a1 + 280))
    return FigSignalErrorAt();
  if ((*(_BYTE *)(a1 + 288) & 1) == 0)
    return 0;
  FigGetUpTimeNanoseconds();
  v2 = *(_QWORD *)(a1 + 280);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 16);
  if (v3)
  {
    v4 = v3(v2, 0xFFFFFFFFLL, 0);
    FigGetUpTimeNanoseconds();
    if (!(_DWORD)v4)
      *(_DWORD *)(a1 + 288) &= 0xFFFFFFFC;
  }
  else
  {
    FigGetUpTimeNanoseconds();
    return 4294954514;
  }
  return v4;
}

void sc_WriteMetadataToDiskDispatchFunction(uint64_t *a1)
{
  const void *v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  uint64_t Base32EncodedSHA1HashFromCFString;
  const void *v7;
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, const void *, __CFDictionary *, CFTypeRef *);
  int v13;
  int v14;
  CFTypeRef cf;

  v3 = *a1;
  v2 = (const void *)a1[1];
  v5 = (const void *)a1[2];
  v4 = (const void *)a1[3];
  cf = 0;
  v14 = 0;
  MEMORY[0x19402EA0C](*(_QWORD *)(v3 + 16));
  if (*(_BYTE *)(v3 + 272) || sc_UpgradePersistentStoreForWriting(v3, &v14))
    goto LABEL_23;
  Base32EncodedSHA1HashFromCFString = FigCreateBase32EncodedSHA1HashFromCFString();
  if (!Base32EncodedSHA1HashFromCFString)
  {
LABEL_22:
    sc_RestorePersistentStoreLockStatus(v3, v14);
LABEL_23:
    v10 = 0;
    goto LABEL_10;
  }
  v7 = (const void *)Base32EncodedSHA1HashFromCFString;
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    CFRelease(v7);
    goto LABEL_22;
  }
  v10 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("DataItemDescriptorCategory"), v4);
  CFDictionarySetValue(v10, CFSTR("DataItemDescriptorNetworkURL"), v2);
  CFDictionarySetValue(v10, CFSTR("DataItemDescriptorName"), v7);
  CFRelease(v7);
  v11 = *(_QWORD *)(v3 + 280);
  v12 = *(uint64_t (**)(uint64_t, const void *, __CFDictionary *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                                       + 104);
  if (!v12)
  {
    sc_RestorePersistentStoreLockStatus(v3, v14);
    goto LABEL_9;
  }
  v13 = v12(v11, v5, v10, &cf);
  sc_RestorePersistentStoreLockStatus(v3, v14);
  if (v13)
LABEL_9:
    sc_SendDiskWriteErrorNotification();
LABEL_10:
  MEMORY[0x19402EA24](*(_QWORD *)(v3 + 16));
  FigDeferCFRelease();
  if (v10)
    CFRelease(v10);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v2)
    CFRelease(v2);
  if (v4)
    CFRelease(v4);
  free(a1);
}

void sc_ComputeTotalReservedSizeFunc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 += a2;
}

unint64_t sc_GetBackingForMediaStreamFromLaterSegments(uint64_t a1, uint64_t a2, unint64_t a3, double a4)
{
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!*(_BYTE *)(a2 + 121))
    return 0;
  v5 = *(_QWORD *)(a1 + 168);
  if (!v5)
    return 0;
  v8 = 0;
  v9 = 0;
  v10 = *(_DWORD *)(a2 + 56);
  do
  {
    v11 = 0;
    v12 = a4;
    v13 = a4;
    do
    {
      if (*(_DWORD *)(v5 + 56) == v10)
      {
        v14 = *(_QWORD *)(v5 + 24);
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = *(_QWORD *)(v14 + 16);
          }
          while (v14);
          if (*(double *)(v15 + 120) > v12)
          {
            v13 = v12;
            v12 = *(double *)(v15 + 120);
            v11 = v5;
          }
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
    if (!v11)
      break;
    while (1)
    {
      v16 = *(_QWORD *)(v11 + 24);
      if (!v16)
        break;
      do
      {
        v17 = v16;
        v16 = *(_QWORD *)(v16 + 16);
      }
      while (v16);
      if (v17 == v9)
        return v8;
      if (*(double *)(v17 + 120) < v13)
      {
        v9 = v17;
        break;
      }
      v18 = *(_QWORD *)(a1 + 184);
      segment_EvictEntry((_QWORD *)v17, 0, 1);
      v8 += v18 - *(_QWORD *)(a1 + 184);
      if (v8 >= a3)
        return v8;
    }
    v5 = *(_QWORD *)(a1 + 168);
  }
  while (v5);
  return v8;
}

uint64_t segment_SortByURLAndStartOffset(_QWORD *a1, _QWORD *a2)
{
  uint64_t CacheKeyFromURLString;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  CFComparisonResult v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;

  if (!a1)
    return 0;
  if ((!*a1 || !*(_QWORD *)*a1) && (!*a2 || !*(_QWORD *)*a2))
  {
    FigSignalErrorAt();
    return 0;
  }
  CacheKeyFromURLString = FigCFStringCreateCacheKeyFromURLString();
  if (!CacheKeyFromURLString)
    return 0;
  v5 = (const __CFString *)CacheKeyFromURLString;
  v6 = (const __CFString *)FigCFStringCreateCacheKeyFromURLString();
  if (!v6)
  {
    CFRelease(v5);
    return 0;
  }
  v7 = v6;
  v8 = CFStringCompare(v5, v6, 0);
  if (v8)
  {
    v9 = v8;
  }
  else
  {
    v10 = a1[12];
    v11 = a2[12];
    v12 = v10 <= v11;
    if (v10 >= v11)
      v13 = 0;
    else
      v13 = -1;
    if (v12)
      v9 = v13;
    else
      v9 = 1;
  }
  CFRelease(v5);
  CFRelease(v7);
  return v9;
}

uint64_t figMemoryDemandIssueSetupOnce()
{
  uint64_t result;

  result = FigSimpleMutexCreate();
  gFigMemoryDemandIssueMutex = result;
  return result;
}

unint64_t stream_GetFirstSegmentOfContiguousRangeContainingSegment(unint64_t a1)
{
  unint64_t v1;
  unint64_t i;
  unint64_t v3;

  v1 = a1;
  if ((*(_BYTE *)(a1 + 160) & 2) == 0)
  {
    for (i = MediaSegmentStartTimeList_RB_PREV(a1); i; v1 = v3)
    {
      if ((*(_BYTE *)(i + 160) & 1) == 0)
        break;
      if ((*(_BYTE *)(v1 + 160) & 2) != 0)
        break;
      v3 = i;
      i = MediaSegmentStartTimeList_RB_PREV(i);
    }
  }
  return v1;
}

uint64_t sc_EnsurePersistentStoreAtURL(uint64_t a1, const __CFURL *a2, int a3)
{
  const __CFAllocator *AllocatorForMedia;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  const __CFAllocator *v9;
  __CFDictionary *v10;
  __CFDictionary *v11;
  const void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 280))
    return FigSignalErrorAt();
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
    return FigSignalErrorAt();
  v8 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("Playlist"), CFSTR(".m3u8"));
  CFDictionarySetValue(v8, CFSTR("ContentCryptKey"), CFSTR(".key"));
  v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
  v10 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v10)
  {
    CFRelease(v8);
    return FigSignalErrorAt();
  }
  v11 = v10;
  CFDictionarySetValue(v10, CFSTR("HLSStoreCategoryToExtensionMap"), v8);
  CFDictionarySetValue(v11, CFSTR("HLSStoreDoNotBlockOnLock"), (const void *)*MEMORY[0x1E0C9AE40]);
  CFRelease(v8);
  v12 = (const void *)FigGetAllocatorForMedia();
  v13 = FigHLSPersistentStoreCreateAtURL(v12, (uint64_t)a2, v11, a3, (_QWORD *)(a1 + 280));
  if ((_DWORD)v13
    || (v14 = *(_DWORD *)(a1 + 288), *(_DWORD *)(a1 + 288) = v14 | 1, a3 == 1)
    && (*(_DWORD *)(a1 + 288) = v14 | 3, v13 = sc_EnsureMasterPlaylistNetworkURLIsSetOnPersistentStore(a1), (_DWORD)v13))
  {
    v15 = v13;
  }
  else
  {
    FigAssetDownloadStorageManagementExcludeURLFromBackup(a2);
    v15 = 0;
  }
  CFRelease(v11);
  return v15;
}

uint64_t sc_RestoreCache(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, CFArrayRef *);
  uint64_t v4;
  CFIndex i;
  CFIndex Count;
  const void *ValueAtIndex;
  const void *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, const void *, CFTypeRef *);
  uint64_t v11;
  void (*v12)(uint64_t, const void *, CFTypeRef *);
  uint64_t v13;
  uint64_t v15;
  CFTypeRef v16;
  CFTypeRef cf;
  CFArrayRef theArray;

  cf = 0;
  theArray = 0;
  v15 = 0;
  v16 = 0;
  v1 = a1[35];
  if (!v1)
  {
LABEL_29:
    v4 = FigSignalErrorAt();
LABEL_30:
    v13 = v4;
    goto LABEL_22;
  }
  v3 = *(uint64_t (**)(uint64_t, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 24);
  if (!v3)
  {
LABEL_20:
    v13 = 4294954514;
    goto LABEL_22;
  }
  v4 = v3(v1, &theArray);
  if ((_DWORD)v4)
    goto LABEL_30;
  for (i = 0; ; ++i)
  {
    Count = (CFIndex)theArray;
    if (theArray)
      Count = CFArrayGetCount(theArray);
    if (i >= Count)
      break;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
    if (!ValueAtIndex)
      goto LABEL_29;
    v8 = ValueAtIndex;
    v9 = a1[35];
    v10 = *(uint64_t (**)(uint64_t, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 72);
    if (!v10)
      goto LABEL_20;
    v4 = v10(v9, v8, &cf);
    if ((_DWORD)v4)
      goto LABEL_30;
    if (!cf)
      goto LABEL_29;
    v11 = a1[35];
    v12 = *(void (**)(uint64_t, const void *, CFTypeRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 80);
    if (v12)
      v12(v11, v8, &v16);
    v4 = sc_CreateAndAddStreamEntry(a1, -1, (__CFDictionary *)cf, v16, 0, 0, 0, &v15);
    if ((_DWORD)v4)
      goto LABEL_30;
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    if (v16)
    {
      CFRelease(v16);
      v16 = 0;
    }
  }
  v13 = 0;
LABEL_22:
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
  if (theArray)
    CFRelease(theArray);
  return v13;
}

uint64_t sc_CreateDiskCacheBundle(uint64_t a1, CFURLRef url, CFURLRef *a3)
{
  const __CFAllocator *AllocatorForMedia;
  size_t v6;
  CFURLRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  UInt8 buffer[1024];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
    return FigSignalErrorAt();
  __strlcat_chk();
  if (!mkdtemp((char *)buffer))
  {
    __error();
    return FigSignalErrorAt();
  }
  AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v6 = strlen((const char *)buffer);
  v7 = CFURLCreateFromFileSystemRepresentation(AllocatorForMedia, buffer, v6, 1u);
  v8 = FigDirectoryEnableDirStatsTracking();
  if ((_DWORD)v8)
  {
    v9 = v8;
    if ((_DWORD)v8 != -17916)
    {
      if (!v7)
        return v9;
LABEL_11:
      CFRelease(v7);
      return v9;
    }
  }
  if (!v7)
    return FigSignalErrorAt();
  v10 = sc_EnsurePersistentStoreAtURL(a1, v7, 1);
  v9 = v10;
  if (!a3 || (_DWORD)v10)
    goto LABEL_11;
  *a3 = v7;
  return v9;
}

uint64_t FigTTMLDocumentWriterCreateProfileInserter(uint64_t a1, const void *a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *DerivedStorage;

  if (!a2 || !a3)
    return FigSignalErrorAt();
  FigTTMLDocumentWriterGetClassID();
  v5 = CMDerivedObjectCreate();
  if (!(_DWORD)v5)
  {
    FigTTMLDocumentWriterGetCMBaseObject(0);
    DerivedStorage = (_QWORD *)CMBaseObjectGetDerivedStorage();
    *DerivedStorage = CFRetain(a2);
    *a3 = 0;
  }
  return v5;
}

uint64_t figTTMLDocumentWriterProfileInserter_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterProfileInserter_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  const void *v2;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_QWORD *)DerivedStorage)
    CFRelease(*(CFTypeRef *)DerivedStorage);
  v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
    CFRelease(v2);
}

CFStringRef figTTMLDocumentWriterProfileInserter_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("figTTMLDocumentWriterProfileInserter[%p]"), a1);
}

uint64_t figTTMLDocumentWriterProfileInserter_StartElement(uint64_t a1, int a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf = 0;
  v4 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E0C9AE00], a2, *(_QWORD *)(DerivedStorage + 16), (uint64_t *)&cf);
  if ((_DWORD)v4)
  {
    v7 = cf;
    if (!cf)
      return v4;
    goto LABEL_9;
  }
  v5 = *(_QWORD *)(DerivedStorage + 16);
  if (v5)
  {
    FigTTMLDocumentWriterElementAddChildElement(v5, cf);
  }
  else
  {
    if (cf)
      v6 = CFRetain(cf);
    else
      v6 = 0;
    *(_QWORD *)(DerivedStorage + 8) = v6;
  }
  v7 = cf;
  *(_QWORD *)(DerivedStorage + 16) = cf;
  if (v7)
LABEL_9:
    CFRelease(v7);
  return v4;
}

uint64_t figTTMLDocumentWriterProfileInserter_EndElement(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef ValueAtIndex;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  CFArrayRef theArray;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v3 = *(_QWORD *)(DerivedStorage + 16);
  if (v3 != *(_QWORD *)(DerivedStorage + 8))
  {
LABEL_39:
    v9 = 0;
    *(_QWORD *)(DerivedStorage + 16) = FigTTMLDocumentWriterElementGetParentElement(v3);
    return v9;
  }
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  v4 = CMBaseObjectGetDerivedStorage();
  v5 = v4;
  v17 = 0;
  theArray = 0;
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  if (!*(_BYTE *)(v4 + 24) && !*(_BYTE *)(v4 + 25))
    goto LABEL_21;
  v19[0] = 0x800000007;
  v6 = FigTTMLDocumentWriterElementCopyElementsAtPath(*(CFArrayRef **)(v4 + 8), (uint64_t)v19, 2, &theArray);
  if ((_DWORD)v6)
    goto LABEL_41;
  if (!theArray || !CFArrayGetCount(theArray))
  {
    v8 = *MEMORY[0x1E0C9AE00];
    v6 = FigTTMLDocumentWriterElementCreate(*MEMORY[0x1E0C9AE00], 8, *(_QWORD *)(v5 + 8), (uint64_t *)&v17);
    if (!(_DWORD)v6)
    {
      FigTTMLDocumentWriterElementInsertChildNodeBeforeNode(*(_QWORD *)(v5 + 8), v17, 0);
      ValueAtIndex = v17;
      goto LABEL_10;
    }
LABEL_41:
    v9 = v6;
    goto LABEL_22;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  v17 = ValueAtIndex;
  CFRetain(ValueAtIndex);
  v8 = *MEMORY[0x1E0C9AE00];
LABEL_10:
  v6 = FigTTMLDocumentWriterElementCreate(v8, 15, (uint64_t)ValueAtIndex, (uint64_t *)&v16);
  if ((_DWORD)v6)
    goto LABEL_41;
  FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v17, v16, 0);
  v6 = FigTTMLDocumentWriterElementCreate(v8, 17, (uint64_t)v16, (uint64_t *)&v15);
  if ((_DWORD)v6)
    goto LABEL_41;
  FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v16, v15, 0);
  FigTTMLDocumentWriterElementSetAttribute((uint64_t)v15, CFSTR("http://www.w3.org/XML/1998/namespace base"), CFSTR("http://namespace.itunes.apple.com/itt/ttml-extension/"));
  if (*(_BYTE *)(v5 + 24))
  {
    v6 = FigTTMLDocumentWriterElementCreate(v8, 19, (uint64_t)v15, (uint64_t *)&v14);
    if ((_DWORD)v6)
      goto LABEL_41;
    v6 = FigCaptionDataCreate();
    if ((_DWORD)v6)
      goto LABEL_41;
    FigTTMLDocumentWriterElementAddChildElement((uint64_t)v14, v13);
    FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v15, v14, 0);
  }
  if (!*(_BYTE *)(v5 + 25))
  {
LABEL_21:
    v9 = 0;
    goto LABEL_22;
  }
  v6 = FigTTMLDocumentWriterElementCreate(v8, 19, (uint64_t)v15, (uint64_t *)&v12);
  if ((_DWORD)v6)
    goto LABEL_41;
  v9 = FigCaptionDataCreate();
  if (!(_DWORD)v9)
  {
    FigTTMLDocumentWriterElementAddChildElement((uint64_t)v12, 0);
    FigTTMLDocumentWriterElementInsertChildNodeBeforeNode((uint64_t)v15, v12, 0);
  }
LABEL_22:
  if (v12)
    CFRelease(v12);
  if (v13)
    CFRelease(v13);
  if (v14)
    CFRelease(v14);
  if (v15)
    CFRelease(v15);
  if (v16)
    CFRelease(v16);
  if (v17)
    CFRelease(v17);
  if (theArray)
    CFRelease(theArray);
  if (!(_DWORD)v9)
  {
    v10 = FigTTMLDocumentWriterElementWriteTree(*(CFArrayRef **)(DerivedStorage + 8), *(_QWORD *)DerivedStorage);
    if ((_DWORD)v10)
      return v10;
    v3 = *(_QWORD *)(DerivedStorage + 16);
    goto LABEL_39;
  }
  return v9;
}

uint64_t figTTMLDocumentWriterProfileInserter_AddCaptionData(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementAddChildElement(*(_QWORD *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t figTTMLDocumentWriterProfileInserter_SetAttribute(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTTMLDocumentWriterElementSetAttribute(*(_QWORD *)(DerivedStorage + 16), a2, a3);
  if (FigCFEqual() && (FigCFEqual() || FigCFEqual()))
    *(_BYTE *)(DerivedStorage + 25) = 1;
  if (FigCFEqual())
    *(_BYTE *)(DerivedStorage + 24) = 1;
  return 0;
}

uint64_t figTTMLDocumentWriterProfileInserter_Flush(uint64_t a1)
{
  uint64_t *DerivedStorage;

  FigTTMLDocumentWriterGetCMBaseObject(a1);
  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage[2])
    return 4294950721;
  else
    return FigTTMLDocumentWriterFlush(*DerivedStorage);
}

uint64_t FigSampleBufferCreateFromFigCaptions(uint64_t a1, CFArrayRef theArray, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char *v6;
  char *v7;
  __CFArray *Mutable;
  uint64_t v10;
  unint64_t Count;
  char *v15;
  CFIndex v16;
  const void *ValueAtIndex;
  void (*v18)(CMTimeRange *__return_ptr, const void *);
  __int128 v19;
  __int128 v20;
  uint64_t CMBaseObject;
  uint64_t (*v22)(uint64_t, const __CFString *, uint64_t, const void **);
  uint64_t v23;
  char *v24;
  __int128 v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  CFIndex v29;
  uint64_t v30;
  CMTime v31;
  CMTime lhs;
  CMTime rhs;
  CMTimeRange otherRange;
  CMTimeRange range;
  CMTimeRange v36;
  CFTypeRef v37;
  CFTypeRef v38;
  const void *v39;

  v38 = 0;
  v39 = 0;
  v37 = 0;
  if (!theArray
    || (*(_BYTE *)(a3 + 12) & 1) == 0
    || (*(_BYTE *)(a3 + 36) & 1) == 0
    || *(_QWORD *)(a3 + 40)
    || (v10 = a3 + 24, (*(_QWORD *)(a3 + 24) & 0x8000000000000000) != 0)
    || !a4)
  {
    v5 = FigSignalErrorAt();
    v6 = 0;
    v7 = 0;
    Mutable = 0;
    goto LABEL_6;
  }
  Count = CFArrayGetCount(theArray);
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Count, MEMORY[0x1E0C9B378]);
  v6 = 0;
  if (Count)
  {
    if (Count > 0xAAAAAAAAAAAAAAALL
      || !(24 * Count)
      || (v7 = (char *)malloc_type_malloc(24 * Count, 0x5CC9CBA6uLL),
          v15 = (char *)malloc_type_malloc(24 * Count, 0x5CC9CBA6uLL),
          v6 = v15,
          !v7))
    {
      v5 = FigSignalErrorAt();
      v7 = 0;
      goto LABEL_6;
    }
    if (v15)
    {
      v30 = 0;
      v16 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
        memset(&v36, 0, sizeof(v36));
        v18 = *(void (**)(CMTimeRange *__return_ptr, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16)
                                                                             + 8);
        if (v18)
        {
          v18(&v36, ValueAtIndex);
        }
        else
        {
          v19 = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 16);
          *(_OWORD *)&v36.start.value = *MEMORY[0x1E0CA2E40];
          *(_OWORD *)&v36.start.epoch = v19;
          *(_OWORD *)&v36.duration.timescale = *(_OWORD *)(MEMORY[0x1E0CA2E40] + 32);
        }
        if ((v36.start.flags & 1) == 0)
          break;
        if ((v36.duration.flags & 1) == 0)
          break;
        if (v36.duration.epoch)
          break;
        if (v36.duration.value < 0)
          break;
        range = v36;
        v20 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&otherRange.start.value = *(_OWORD *)a3;
        *(_OWORD *)&otherRange.start.epoch = v20;
        *(_OWORD *)&otherRange.duration.timescale = *(_OWORD *)(a3 + 32);
        if (!CMTimeRangeContainsTimeRange(&range, &otherRange))
          break;
        if (v39)
        {
          CFRelease(v39);
          v39 = 0;
        }
        CMBaseObject = FigCaptionGetCMBaseObject(ValueAtIndex);
        v22 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, const void **))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                            + 48);
        if (!v22)
        {
          v5 = 4294954514;
          goto LABEL_6;
        }
        v29 = v16;
        v23 = v22(CMBaseObject, CFSTR("CaptionData"), a1, &v39);
        if ((_DWORD)v23)
          goto LABEL_41;
        CFArrayAppendValue(Mutable, v39);
        v24 = &v7[v30];
        *(_OWORD *)&otherRange.start.value = *(_OWORD *)a3;
        otherRange.start.epoch = *(_QWORD *)(a3 + 16);
        rhs = v36.start;
        CMTimeSubtract(&range.start, &otherRange.start, &rhs);
        v25 = *(_OWORD *)&range.start.value;
        *((_QWORD *)v24 + 2) = range.start.epoch;
        *(_OWORD *)v24 = v25;
        v26 = &v6[v30];
        range = v36;
        CMTimeRangeGetEnd(&lhs, &range);
        v27 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)&range.start.value = *(_OWORD *)a3;
        *(_OWORD *)&range.start.epoch = v27;
        *(_OWORD *)&range.duration.timescale = *(_OWORD *)(a3 + 32);
        CMTimeRangeGetEnd(&v31, &range);
        CMTimeSubtract(&range.start, &lhs, &v31);
        v28 = *(_OWORD *)&range.start.value;
        *((_QWORD *)v26 + 2) = range.start.epoch;
        *(_OWORD *)v26 = v28;
        v30 += 24;
        ++v16;
        if (Count == v29 + 1)
        {
          v10 = a3 + 24;
          goto LABEL_36;
        }
      }
    }
    v23 = FigSignalErrorAt();
    goto LABEL_41;
  }
  v7 = 0;
LABEL_36:
  v23 = FigCaptionGroupCreate();
  if ((_DWORD)v23)
  {
LABEL_41:
    v5 = v23;
    goto LABEL_6;
  }
  *(_OWORD *)&v36.start.value = *(_OWORD *)a3;
  v36.start.epoch = *(_QWORD *)(a3 + 16);
  *(_OWORD *)&range.start.value = *(_OWORD *)v10;
  range.start.epoch = *(_QWORD *)(v10 + 16);
  v5 = FigSampleBufferCreateForCaptionGroup();
  if ((_DWORD)v5)
  {
    if (v37)
      CFRelease(v37);
  }
  else
  {
    *a4 = v37;
    v37 = 0;
  }
LABEL_6:
  if (v38)
    CFRelease(v38);
  free(v6);
  free(v7);
  if (Mutable)
    CFRelease(Mutable);
  if (v39)
    CFRelease(v39);
  return v5;
}

uint64_t FigCaptionRendereriTTRegionCreate(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t DerivedStorage;
  uint64_t v5;
  uint64_t ProtocolVTable;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    return FigSignalErrorAt();
  v14 = 0;
  MEMORY[0x19402F294](&FigCaptionRendereriTTRegionGetClassID_sRegisterFigCaptionRendereriTTRegionBaseTypeOnce, RegisterFigCaptionRendereriTTRegionBaseType);
  result = CMDerivedObjectCreate();
  if (!(_DWORD)result)
  {
    v3 = v14;
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_QWORD *)(DerivedStorage + 56) = 0;
    *(_DWORD *)(DerivedStorage + 64) = 0;
    v13 = 0;
    FigCaptionRendererNodeCreate(&v13);
    v5 = v13;
    *(_QWORD *)DerivedStorage = v13;
    FigCaptionRendererNodeProtocolGetProtocolID();
    ProtocolVTable = CMBaseObjectGetProtocolVTable();
    if (ProtocolVTable)
    {
      v7 = *(_QWORD *)(ProtocolVTable + 16);
      if (v7)
      {
        v8 = *(void (**)(uint64_t, uint64_t))(v7 + 216);
        if (v8)
          v8(v5, 1);
      }
    }
    v9 = *(_QWORD *)DerivedStorage;
    FigCaptionRendererNodeProtocolGetProtocolID();
    v10 = CMBaseObjectGetProtocolVTable();
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
      {
        v12 = *(void (**)(uint64_t, uint64_t))(v11 + 232);
        if (v12)
          v12(v9, 1);
      }
    }
    result = 0;
    *a1 = v3;
  }
  return result;
}

void FigCaptionRendereriTTRegionFinalize()
{
  const void *v0;

  v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
    CFRelease(v0);
}

__CFString *FigCaptionRendereriTTRegionCopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendereriTTRegion: <%p>"), a1);
  return Mutable;
}

__CFString *FigCaptionRendereriTTRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendereriTTRegion <FigCaptionRendererBaseProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, _QWORD *a2)
{
  *a2 = "FigCaptionRendereriTTRegion";
  return 0;
}

__CFString *FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendereriTTRegion <FigCaptionRendererNodeProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, char **);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, _BYTE *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  void (*v21)(uint64_t, CFArrayRef *);
  CFIndex v22;
  const void *ValueAtIndex;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(const void *, char **);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(const void *, CFStringRef *);
  CFStringRef theString2;
  char *v33;
  CFArrayRef theArray;
  CFStringRef theString1;
  char *__s1;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (v8 = *(_QWORD *)(ProtocolVTable + 16)) == 0)
  {
LABEL_42:
    v16 = 4294954508;
LABEL_43:
    FigSignalErrorAt();
    return v16;
  }
  v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_45:
    v16 = 4294954514;
    goto LABEL_43;
  }
  v10 = v9(a2, &__s1);
  if ((_DWORD)v10)
  {
LABEL_47:
    v16 = v10;
    goto LABEL_43;
  }
  v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendereriTTRegion")))
  {
    theString1 = 0;
    FigCaptionRendererRegionProtocolGetProtocolID();
    v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
        goto LABEL_41;
      v18 = *(_QWORD *)(v18 + 16);
      if (!v18)
        goto LABEL_41;
      ((void (*)(uint64_t, CFStringRef *))v18)(a2, &theString1);
      LOBYTE(v18) = (_BYTE)theString1;
      if (!theString1)
        goto LABEL_41;
      theArray = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      v19 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v19)
      {
        v20 = *((_QWORD *)v19 + 2);
        if (v20 && (v21 = *(void (**)(uint64_t, CFArrayRef *))(v20 + 24)) != 0)
        {
          v21(a1, &theArray);
          v19 = theArray;
        }
        else
        {
          v19 = 0;
        }
      }
      if (CFArrayGetCount(v19) >= 1)
      {
        v22 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v22);
          v33 = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          v24 = CMBaseObjectGetProtocolVTable();
          if (!v24)
            goto LABEL_42;
          v25 = *(_QWORD *)(v24 + 16);
          if (!v25)
            goto LABEL_42;
          v26 = *(uint64_t (**)(const void *, char **))(v25 + 8);
          if (!v26)
            goto LABEL_45;
          v10 = v26(ValueAtIndex, &v33);
          if ((_DWORD)v10)
            goto LABEL_47;
          v27 = v33;
          if (v33
            && (!strcmp(v33, "FigCaptionRendererStackLayoutRegion")
             || !strcmp(v27, "FigCaptionRendererCellStackLayoutRegion")
             || !strcmp(__s1, "FigCaptionRendereriTTRegion")))
          {
            theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            v28 = CMBaseObjectGetProtocolVTable();
            if (v28)
            {
              v29 = *(_QWORD *)(v28 + 16);
              if (v29)
              {
                v30 = *(void (**)(const void *, CFStringRef *))(v29 + 16);
                if (v30)
                  v30(ValueAtIndex, &theString2);
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              LOBYTE(v18) = 1;
              goto LABEL_41;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v22);
      }
    }
    LOBYTE(v18) = 0;
LABEL_41:
    v16 = 0;
    *a3 = v18;
    return v16;
  }
  v12 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v13 = CMBaseObjectGetProtocolVTable();
  if (!v13)
    return 4294954508;
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
    return 4294954508;
  v15 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(v14 + 32);
  if (v15)
    return v15(v12, a2, a3);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 64);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[4];

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6)
    return 4294954514;
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t ProtocolVTable;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, double, double, double, double);

  v8 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v10 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v10)
    return 4294954508;
  v11 = *(uint64_t (**)(uint64_t, double, double, double, double))(v10 + 96);
  if (v11)
    return v11(v8, a1, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 112);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (v5 = *(_QWORD *)(ProtocolVTable + 16)) != 0
    && (v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120)) != 0)
  {
    return v6(v3, a2);
  }
  else
  {
    return 4294954508;
  }
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, double, double);

  v4 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v6 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v6)
    return 4294954508;
  v7 = *(uint64_t (**)(uint64_t, double, double))(v6 + 128);
  if (v7)
    return v7(v4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t ProtocolVTable;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v15 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v15)
    return 4294954508;
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (v16)
    return v16(v13, a2, a3, a4, a5, a6, a7);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (v10)
    return v10(v7, a2, a3, a4);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2;
  uint64_t ProtocolVTable;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, double);

  v2 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v4 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v4)
    return 4294954508;
  v5 = *(uint64_t (**)(uint64_t, double))(v4 + 256);
  if (v5)
    return v5(v2, a1);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(const void *, CGRect *);
  const __CFDictionary *v8;
  const void *Value;
  double MidX;
  double MidY;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(const void *, double, double);
  CGSize size;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(const void *, double, double);
  CGRect v20;

  v4 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E0C9D628];
  v20.size = v4;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7)
        v7(a1, &v20);
    }
  }
  v8 = *(const __CFDictionary **)(a2 + 296);
  if (v8)
  {
    Value = CFDictionaryGetValue(v8, a1);
    MidX = CGRectGetMidX(v20);
    MidY = CGRectGetMidY(v20);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v12 = CMBaseObjectGetProtocolVTable();
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = *(void (**)(const void *, double, double))(v13 + 72);
        if (v14)
          v14(Value, MidX, MidY);
      }
    }
    size = v20.size;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = *(void (**)(const void *, double, double))(v17 + 88);
        if (v18)
          v18(Value, size.width, size.height);
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t *);
  uint64_t v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, __int128 *);
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, __int128 *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, CGRect *);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, CFArrayRef *);
  CFIndex Count;
  double v29;
  double v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  CFIndex v35;
  const void *ValueAtIndex;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(const void *, char **);
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, int *);
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(const void *, __int128 *);
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(const void *, CGRect *);
  int v49;
  double MinX;
  double MinY;
  int v52;
  CGRect v53;
  int v54;
  CGRect v55;
  int v56;
  CGRect v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(const void *, CFDictionaryRef *);
  const void *Value;
  const void *v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(const void *, double, double);
  uint64_t v70;
  uint64_t v71;
  void (*v72)(const void *, uint64_t);
  int v73;
  double width;
  CGFloat v75;
  double v76;
  double height;
  double v78;
  double v79;
  double x;
  double y;
  double v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, double, double, double, double);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t);
  CFTypeRef v93;
  CFTypeRef cf2;
  CGSize v95;
  CGPoint v96;
  CFDictionaryRef theDict;
  int v98;
  char *__s1;
  CFArrayRef theArray;
  uint64_t v101;
  CGRect v102;
  __int128 v103;
  CGSize v104;
  __int128 v105;
  __int128 v106;
  CGRect v107;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v101 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v101);
        if (v101)
        {
          v8 = CMBaseObjectGetDerivedStorage();
          v9 = *(_DWORD *)(v8 + 16);
          v10 = (double)*(int *)(v8 + 20) * 0.0533;
          v11 = *(double *)(v8 + 40);
          v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0)
            v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          else
            v13 = 0.0;
          v14 = *(_QWORD *)v8;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 16);
            if (v16)
            {
              v17 = *(void (**)(uint64_t, __int128 *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v103) = 1;
                *(_DWORD *)((char *)&v103 + 1) = 0;
                DWORD1(v103) = 0;
                *((double *)&v103 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v104.width) = 1;
                *(_DWORD *)((char *)&v104.width + 1) = 0;
                HIDWORD(v104.width) = 0;
                v104.height = v13;
                LOBYTE(v105) = 1;
                *(_DWORD *)((char *)&v105 + 1) = 0;
                DWORD1(v105) = 0;
                *((double *)&v105 + 1) = (double)v9 / 100.0;
                LOBYTE(v106) = 1;
                *(_DWORD *)((char *)&v106 + 1) = 0;
                DWORD1(v106) = 0;
                *((double *)&v106 + 1) = v10;
                v17(v14, &v103);
              }
            }
          }
          v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          v103 = FCRRectNull;
          v104 = *(CGSize *)&byte_1932FABC0;
          v105 = xmmword_1932FABD0;
          v106 = *(_OWORD *)&byte_1932FABE0;
          v95 = *(CGSize *)(MEMORY[0x1E0C9D628] + 16);
          v96 = (CGPoint)*MEMORY[0x1E0C9D628];
          v102.origin = (CGPoint)*MEMORY[0x1E0C9D628];
          v102.size = v95;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 16);
            if (v20)
            {
              v21 = *(void (**)(uint64_t, __int128 *))(v20 + 88);
              if (v21)
                v21(a1, &v103);
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            v23 = *(_QWORD *)(v22 + 16);
            if (v23)
            {
              v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24)
                v24(a1, &v102);
            }
          }
          if (*((double *)&v105 + 1) != -1.0)
          {
            width = v102.size.width;
            v75 = v102.origin.x + *((double *)&v103 + 1);
            if ((_BYTE)v103)
              v75 = v102.origin.x + *((double *)&v103 + 1) * v102.size.width;
            v76 = v102.origin.y + v104.height;
            if (LOBYTE(v104.width))
              v76 = v102.origin.y + v104.height * v102.size.height;
            height = 1.0;
            if (!(_BYTE)v105)
              width = 1.0;
            if ((_BYTE)v106)
              height = v102.size.height;
            v79 = *((double *)&v106 + 1) * height;
            v78 = *((double *)&v105 + 1) * width;
            v107 = CGRectIntegral(*(CGRect *)&v75);
            x = v107.origin.x;
            y = v107.origin.y;
            v82 = v107.size.width;
            v83 = v107.size.height;
            v84 = *v18;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v85 = CMBaseObjectGetProtocolVTable();
            if (v85)
            {
              v86 = *(_QWORD *)(v85 + 16);
              if (v86)
              {
                v87 = *(void (**)(uint64_t, double, double, double, double))(v86 + 96);
                if (v87)
                  v87(v84, x, y, v82, v83);
              }
            }
          }
          theArray = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 16);
            if (v26)
            {
              v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27)
                v27(a1, &theArray);
            }
          }
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v29 = *MEMORY[0x1E0C9D538];
            v30 = *(double *)(MEMORY[0x1E0C9D538] + 8);
            v31 = (const void *)*MEMORY[0x1E0CA2958];
            v32 = (const void *)*MEMORY[0x1E0CA2948];
            v33 = (const void *)*MEMORY[0x1E0CA2928];
            v34 = (const void *)*MEMORY[0x1E0CA2938];
            v35 = Count + 1;
            v93 = (CFTypeRef)*MEMORY[0x1E0CA2940];
            cf2 = (CFTypeRef)*MEMORY[0x1E0CA2930];
            while (1)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(theArray, v35 - 2);
              __s1 = 0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              v37 = CMBaseObjectGetProtocolVTable();
              if (!v37
                || (v38 = *(_QWORD *)(v37 + 16)) == 0
                || (v39 = *(unsigned int (**)(const void *, char **))(v38 + 8)) == 0
                || v39(ValueAtIndex, &__s1))
              {
LABEL_104:
                FigSignalErrorAt();
                goto LABEL_105;
              }
              if (__s1 && !strcmp(__s1, "FigCaptionRendererCaption"))
              {
                v98 = 0;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                v40 = CMBaseObjectGetProtocolVTable();
                if (!v40)
                  goto LABEL_104;
                v41 = *(_QWORD *)(v40 + 16);
                if (!v41)
                  goto LABEL_104;
                v42 = *(unsigned int (**)(const void *, int *))(v41 + 48);
                if (!v42 || v42(ValueAtIndex, &v98))
                  goto LABEL_104;
                if (v98 == 3)
                  break;
              }
LABEL_87:
              if ((unint64_t)--v35 <= 1)
                goto LABEL_105;
            }
            v103 = (__int128)v96;
            v104 = v95;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v43 = CMBaseObjectGetProtocolVTable();
            if (!v43)
              goto LABEL_104;
            v44 = *(_QWORD *)(v43 + 16);
            if (!v44)
              goto LABEL_104;
            v45 = *(unsigned int (**)(const void *, __int128 *))(v44 + 104);
            if (!v45)
              goto LABEL_104;
            if (v45(ValueAtIndex, &v103))
              goto LABEL_104;
            v102.origin = v96;
            v102.size = v95;
            FigCaptionRendererNodeProtocolGetProtocolID();
            v46 = CMBaseObjectGetProtocolVTable();
            if (!v46)
              goto LABEL_104;
            v47 = *(_QWORD *)(v46 + 16);
            if (!v47)
              goto LABEL_104;
            v48 = *(unsigned int (**)(const void *, CGRect *))(v47 + 72);
            if (!v48 || v48(ValueAtIndex, &v102))
              goto LABEL_104;
            v49 = *(_DWORD *)(DerivedStorage + 56);
            if (v49)
            {
              MinX = v29;
              MinY = v30;
              if (v49 != 2)
                goto LABEL_65;
              v52 = *(_DWORD *)(DerivedStorage + 64);
              if (v52 == 1)
              {
                MinX = CGRectGetMinX(v102);
              }
              else
              {
                v53 = v102;
                if (v52 == 3)
                  MinX = CGRectGetMaxX(v53) - v104.width;
                else
                  MinX = CGRectGetMidX(v53) + v104.width * -0.5;
              }
              v56 = *(_DWORD *)(DerivedStorage + 60);
            }
            else
            {
              v54 = *(_DWORD *)(DerivedStorage + 60);
              if (v54 == 1)
              {
                MinX = CGRectGetMinX(v102);
              }
              else
              {
                v55 = v102;
                if (v54 == 3)
                  MinX = CGRectGetMaxX(v55) - v104.width;
                else
                  MinX = CGRectGetMidX(v55) + v104.width * -0.5;
              }
              v56 = *(_DWORD *)(DerivedStorage + 64);
            }
            if (v56 == 1)
            {
              MinY = CGRectGetMaxY(v102) - v104.height;
            }
            else
            {
              v57 = v102;
              if (v56 == 3)
                MinY = CGRectGetMinY(v57);
              else
                MinY = CGRectGetMidY(v57) + v104.height * -0.5;
            }
LABEL_65:
            theDict = 0;
            FigCaptionRendererCaptionProtocolGetProtocolID();
            v58 = CMBaseObjectGetProtocolVTable();
            if (v58)
            {
              v59 = *(_QWORD *)(v58 + 16);
              if (v59)
              {
                v60 = *(void (**)(const void *, CFDictionaryRef *))(v59 + 16);
                if (v60)
                  v60(ValueAtIndex, &theDict);
              }
            }
            if (!theDict)
              goto LABEL_79;
            Value = CFDictionaryGetValue(theDict, v31);
            if (!Value)
              goto LABEL_79;
            v62 = Value;
            if (CFEqual(Value, v32))
              goto LABEL_72;
            if (CFEqual(v62, v33))
            {
              v64 = v102.origin.y;
              v63 = v102.origin.x;
              v66 = v102.size.height;
              v65 = v102.size.width;
LABEL_75:
              MinX = CGRectGetMaxX(*(CGRect *)&v63) - v104.width;
              goto LABEL_79;
            }
            if (CFEqual(v62, v34))
            {
              v64 = v102.origin.y;
              v63 = v102.origin.x;
              v66 = v102.size.height;
              v65 = v102.size.width;
            }
            else
            {
              if (CFEqual(v62, cf2))
              {
LABEL_72:
                MinX = CGRectGetMinX(v102);
                goto LABEL_79;
              }
              v73 = CFEqual(v62, v93);
              v64 = v102.origin.y;
              v63 = v102.origin.x;
              v66 = v102.size.height;
              v65 = v102.size.width;
              if (v73)
                goto LABEL_75;
            }
            MinX = CGRectGetMidX(*(CGRect *)&v63) + v104.width * -0.5;
LABEL_79:
            FigCaptionRendererNodeProtocolGetProtocolID();
            v67 = CMBaseObjectGetProtocolVTable();
            if (v67)
            {
              v68 = *(_QWORD *)(v67 + 16);
              if (v68)
              {
                v69 = *(void (**)(const void *, double, double))(v68 + 128);
                if (v69)
                  v69(ValueAtIndex, MinX, MinY);
              }
            }
            FigCaptionRendererNodeProtocolGetProtocolID();
            v70 = CMBaseObjectGetProtocolVTable();
            if (v70)
            {
              v71 = *(_QWORD *)(v70 + 16);
              if (v71)
              {
                v72 = *(void (**)(const void *, uint64_t))(v71 + 232);
                if (v72)
                  v72(ValueAtIndex, 1);
              }
            }
            goto LABEL_87;
          }
        }
      }
    }
  }
LABEL_105:
  v88 = *(_QWORD *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v89 = CMBaseObjectGetProtocolVTable();
  if (!v89)
    return 4294954508;
  v90 = *(_QWORD *)(v89 + 16);
  if (!v90)
    return 4294954508;
  v91 = *(uint64_t (**)(uint64_t, uint64_t))(v90 + 288);
  if (v91)
    return v91(v88, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t *DerivedStorage;
  uint64_t ProtocolVTable;
  uint64_t v6;
  void (*v7)(uint64_t, char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, __int16 *);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  __int16 v25;

  DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    v6 = *(_QWORD *)(ProtocolVTable + 16);
    if (v6)
    {
      v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            v9 = *(_QWORD *)(v8 + 16);
            if (v9)
            {
              v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10)
                v10(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            v15 = *(_QWORD *)(v14 + 16);
            if (v15)
            {
              v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16)
                v16(a1, a2);
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19)
        v19(a1, a2);
    }
  }
  v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  v21 = CMBaseObjectGetProtocolVTable();
  if (!v21)
    return 4294954508;
  v22 = *(_QWORD *)(v21 + 16);
  if (!v22)
    return 4294954508;
  v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23)
    return v23(v20, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  v8 = *a2;
  v9 = a2[1];
  v10 = *((_QWORD *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6)
    return 4294954514;
  v11[0] = v8;
  v11[1] = v9;
  v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0;
  uint64_t ProtocolVTable;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v0 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v2 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v2)
    return 4294954508;
  v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (v3)
    return v3(v0);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 352);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t ProtocolVTable;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, double, double);

  v7 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v9 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v9)
    return 4294954508;
  v10 = *(uint64_t (**)(uint64_t, uint64_t, double, double))(v9 + 360);
  if (v10)
    return v10(v7, a4, a1, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t ProtocolVTable;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v3 = *(_QWORD *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  ProtocolVTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable)
    return 4294954508;
  v5 = *(_QWORD *)(ProtocolVTable + 16);
  if (!v5)
    return 4294954508;
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (v6)
    return v6(v3, a2);
  else
    return 4294954514;
}

__CFString *FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("\tFigCaptionRendereriTTRegion <FigCaptionRendererRegionProtocol> on <%p>"), a1);
  return Mutable;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  const void *v4;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v4 = *(const void **)(DerivedStorage + 8);
  *(_QWORD *)(DerivedStorage + 8) = a2;
  if (a2)
    CFRetain(a2);
  if (v4)
    CFRelease(v4);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage;

  DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendereriTTRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCaptionRendereriTTRegionBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendereriTTRegionBaseCopyFormattingDesc()
{
  return CFRetain(CFSTR("[FigCaptionRendereriTTRegion]"));
}

uint64_t FigPictureTileCursorServiceGetClassID()
{
  MEMORY[0x19402F294](&FigPictureTileCursorServiceGetClassID_sRegisterFigPictureTileCursorServiceBaseTypeOnce, RegisterFigPictureTileCursorServiceBaseType);
  return sFigPictureTileCursorServiceClassID;
}

uint64_t RegisterFigPictureTileCursorServiceBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPictureTileCursorServiceGetTypeID()
{
  MEMORY[0x19402F294](&FigPictureTileCursorServiceGetClassID_sRegisterFigPictureTileCursorServiceBaseTypeOnce, RegisterFigPictureTileCursorServiceBaseType);
  return CMBaseClassGetCFTypeID();
}

uint64_t FigPictureTileCursorGetClassID()
{
  MEMORY[0x19402F294](&FigPictureTileCursorGetClassID_sRegisterFigPictureTileCursorBaseTypeOnce, RegisterFigPictureTileCursorBaseType);
  return sFigPictureTileCursorClassID;
}

uint64_t RegisterFigPictureTileCursorBaseType()
{
  CMBaseGetClassID();
  return FigBaseClassRegisterClass();
}

uint64_t FigPictureTileCursorGetTypeID()
{
  MEMORY[0x19402F294](&FigPictureTileCursorGetClassID_sRegisterFigPictureTileCursorBaseTypeOnce, RegisterFigPictureTileCursorBaseType);
  return CMBaseClassGetCFTypeID();
}

CFStringRef FigPictureTileCursorServiceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPictureTileCursorService %p]"), a1);
}

CFStringRef FigPictureTileCursorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[FigPictureTileCursor %p]"), a1);
}

uint64_t FigVideoQueueRemoteCallbackClient_NotificationIsPending(mach_port_t a1, uint64_t a2)
{
  mach_msg_header_t msg;
  uint64_t v4;
  uint64_t v5;

  v4 = *MEMORY[0x1E0C804E8];
  v5 = a2;
  *(_QWORD *)&msg.msgh_bits = 19;
  msg.msgh_voucher_port = 0;
  msg.msgh_id = 18081;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = 0;
  if (MEMORY[0x1E0C85B68])
    voucher_mach_msg_set(&msg);
  return mach_msg(&msg, 1, 0x28u, 0, 0, 0, 0);
}

uint64_t figvideoqueuecallback_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  if (a1[5] == 18081)
  {
    if ((*a1 & 0x80000000) != 0 || a1[1] != 40)
    {
      *(_DWORD *)(a2 + 32) = -304;
      *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    }
    else
    {
      *(_DWORD *)(a2 + 32) = FigVideoQueueRemoteCallbackServer_NotificationIsPending();
    }
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

uint64_t FigVideoQueueRemoteClient_Create(mach_port_t a1, int a2, uint64_t a3, int a4, char *src, _DWORD *a6, _QWORD *a7, _QWORD *a8, _DWORD *a9)
{
  int v13;
  mach_msg_size_t v14;
  mach_port_t special_reply_port;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  mach_msg_header_t rcv_name;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[32];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  memset(v25, 0, 448);
  v23 = 0u;
  v24 = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v21 = 1;
  v22 = a2;
  DWORD1(v23) = 1245184;
  *((_QWORD *)&v23 + 1) = *MEMORY[0x1E0C804E8];
  *(_QWORD *)&v24 = a3;
  DWORD2(v24) = a4;
  if (MEMORY[0x1E0C84128])
    v13 = mig_strncpy_zerofill((char *)v25 + 4, src, 512);
  else
    v13 = mig_strncpy((char *)v25 + 4, src, 512);
  HIDWORD(v24) = 0;
  LODWORD(v25[0]) = v13;
  v14 = ((v13 + 3) & 0xFFFFFFFC) + 68;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x42B800000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v16 = mach_msg(&rcv_name, 3162387, v14, 0x4Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v17 = v16;
  if ((v16 - 268435458) > 0xE || ((1 << (v16 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v16)
    {
      if (rcv_name.msgh_id == 71)
      {
        v17 = 4294966988;
      }
      else if (rcv_name.msgh_id == 17180)
      {
        if ((rcv_name.msgh_bits & 0x80000000) == 0)
        {
          if (rcv_name.msgh_size == 36)
          {
            v17 = 4294966996;
            if ((_DWORD)v23)
            {
              if (rcv_name.msgh_remote_port)
                v17 = 4294966996;
              else
                v17 = v23;
            }
          }
          else
          {
            v17 = 4294966996;
          }
          goto LABEL_29;
        }
        v17 = 4294966996;
        if (v21 == 1 && rcv_name.msgh_size == 68 && !rcv_name.msgh_remote_port && WORD3(v23) << 16 == 1114112)
        {
          v17 = 0;
          *a6 = v22;
          v18 = *((_QWORD *)&v24 + 1);
          *a7 = v24;
          *a8 = v18;
          *a9 = v25[0];
          return v17;
        }
      }
      else
      {
        v17 = 4294966995;
      }
LABEL_29:
      mach_msg_destroy(&rcv_name);
      return v17;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v17 - 268435459) <= 1)
  {
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
    goto LABEL_29;
  }
  return v17;
}

uint64_t FigVideoQueueRemoteClient_Destroy(int a1)
{
  mach_port_name_t special_reply_port;
  uint64_t v3;
  uint64_t v4;
  _BYTE msg[36];
  uint64_t v8;

  v8 = 0;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x42B900000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v3 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v4 = v3;
  if ((v3 - 268435458) > 0xE || ((1 << (v3 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v3)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v4 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17181)
      {
        v4 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v4 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v4;
        }
      }
      else
      {
        v4 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v4;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v4 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_22;
  }
  return v4;
}

uint64_t FigVideoQueueRemoteClient_GetProperty(mach_port_name_t a1, const char *a2, _QWORD *a3, _DWORD *a4)
{
  int v7;
  mach_msg_size_t v8;
  mach_port_name_t special_reply_port;
  uint64_t v10;
  uint64_t v11;
  int v12;
  mach_port_name_t rcv_name[4];
  _OWORD v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  *(_OWORD *)rcv_name = 0u;
  memset(v15, 0, sizeof(v15));
  *((_QWORD *)&v15[0] + 1) = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v7 = mig_strncpy_zerofill((char *)&v15[1] + 8, a2, 512);
  else
    v7 = mig_strncpy((char *)&v15[1] + 8, a2, 512);
  LODWORD(v15[1]) = 0;
  DWORD1(v15[1]) = v7;
  v8 = ((v7 + 3) & 0xFFFFFFFC) + 40;
  special_reply_port = mig_get_special_reply_port();
  rcv_name[2] = a1;
  rcv_name[3] = special_reply_port;
  rcv_name[0] = 5395;
  *(_QWORD *)&v15[0] = 0x42BA00000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)rcv_name);
    special_reply_port = rcv_name[3];
  }
  v10 = mach_msg((mach_msg_header_t *)rcv_name, 3162387, v8, 0x40u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v11 = v10;
  if ((v10 - 268435458) > 0xE || ((1 << (v10 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v10)
    {
      if (DWORD1(v15[0]) == 71)
      {
        v11 = 4294966988;
      }
      else if (DWORD1(v15[0]) == 17182)
      {
        if ((rcv_name[0] & 0x80000000) == 0)
        {
          if (rcv_name[1] == 36)
          {
            v11 = 4294966996;
            if (LODWORD(v15[1]))
            {
              if (rcv_name[2])
                v11 = 4294966996;
              else
                v11 = LODWORD(v15[1]);
            }
          }
          else
          {
            v11 = 4294966996;
          }
          goto LABEL_30;
        }
        v11 = 4294966996;
        if (DWORD2(v15[0]) == 1 && rcv_name[1] == 56 && !rcv_name[2] && BYTE7(v15[1]) == 1)
        {
          v12 = DWORD2(v15[1]);
          if (DWORD2(v15[1]) == DWORD1(v16))
          {
            v11 = 0;
            *a3 = *(_QWORD *)((char *)v15 + 12);
            *a4 = v12;
            return v11;
          }
        }
      }
      else
      {
        v11 = 4294966995;
      }
LABEL_30:
      mach_msg_destroy((mach_msg_header_t *)rcv_name);
      return v11;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v11 - 268435459) <= 1)
  {
    if ((rcv_name[0] & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name[3]);
    goto LABEL_30;
  }
  return v11;
}

uint64_t FigVideoQueueRemoteClient_SetProperty(mach_port_t a1, const char *a2, uint64_t a3, unsigned int a4)
{
  int v6;
  uint64_t v7;
  mach_msg_size_t v8;
  mach_port_t special_reply_port;
  uint64_t v10;
  uint64_t v11;
  mach_msg_header_t rcv_name;
  int v14;
  uint64_t v15;
  int v16;
  _BYTE v17[24];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  *(_OWORD *)&v17[8] = 0u;
  memset(&rcv_name, 0, sizeof(rcv_name));
  v14 = 1;
  v15 = a3;
  v16 = 16777472;
  *(_QWORD *)v17 = a4;
  *(_QWORD *)&v17[4] = *MEMORY[0x1E0C804E8];
  if (MEMORY[0x1E0C84128])
    v6 = mig_strncpy_zerofill(&v17[20], a2, 512);
  else
    v6 = mig_strncpy(&v17[20], a2, 512);
  *(_DWORD *)&v17[12] = 0;
  *(_DWORD *)&v17[16] = v6;
  v7 = (v6 + 3) & 0xFFFFFFFC;
  v8 = v7 + 64;
  *(_DWORD *)&v17[v7 + 20] = a4;
  special_reply_port = mig_get_special_reply_port();
  rcv_name.msgh_remote_port = a1;
  rcv_name.msgh_local_port = special_reply_port;
  rcv_name.msgh_bits = -2147478253;
  *(_QWORD *)&rcv_name.msgh_voucher_port = 0x42BB00000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&rcv_name);
    special_reply_port = rcv_name.msgh_local_port;
  }
  v10 = mach_msg(&rcv_name, 3162387, v8, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v11 = v10;
  if ((v10 - 268435458) <= 0xE && ((1 << (v10 - 2)) & 0x4003) != 0)
    goto LABEL_17;
  if ((_DWORD)v10)
  {
    mig_dealloc_special_reply_port();
LABEL_17:
    if ((v11 - 268435459) > 1)
      return v11;
    if ((rcv_name.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name.msgh_local_port);
LABEL_22:
    mach_msg_destroy(&rcv_name);
    return v11;
  }
  if (rcv_name.msgh_id == 71)
  {
    v11 = 4294966988;
    goto LABEL_22;
  }
  if (rcv_name.msgh_id != 17183)
  {
    v11 = 4294966995;
    goto LABEL_22;
  }
  v11 = 4294966996;
  if ((rcv_name.msgh_bits & 0x80000000) != 0)
    goto LABEL_22;
  if (rcv_name.msgh_size != 36)
    goto LABEL_22;
  if (rcv_name.msgh_remote_port)
    goto LABEL_22;
  v11 = HIDWORD(v15);
  if (HIDWORD(v15))
    goto LABEL_22;
  return v11;
}

uint64_t FigVideoQueueRemoteClient_Start(int a1, int a2)
{
  mach_port_name_t special_reply_port;
  uint64_t v4;
  uint64_t v5;
  _BYTE msg[36];
  uint64_t v9;

  *(_OWORD *)&msg[20] = 0u;
  v9 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a2;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x42BC00000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v4 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x24u, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v5 = v4;
  if ((v4 - 268435458) > 0xE || ((1 << (v4 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v4)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v5 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17184)
      {
        v5 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v5 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v5;
        }
      }
      else
      {
        v5 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v5;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v5 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_22;
  }
  return v5;
}

uint64_t FigVideoQueueRemoteClient_EnqueueVideoSampleBuffer(int a1, int a2, uint64_t a3, int a4, int a5, int *a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  mach_port_name_t special_reply_port;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v21;
  _BYTE rcv_name[32];
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)&rcv_name[16] = 0u;
  *(_OWORD *)rcv_name = 0u;
  *(_DWORD *)&rcv_name[20] = 2;
  *(_DWORD *)&rcv_name[24] = a2;
  v23 = 1245184;
  v24 = a3;
  v25 = 16777472;
  v26 = a4;
  v27 = *MEMORY[0x1E0C804E8];
  v28 = a4;
  v29 = a7;
  v30 = a8;
  v31 = a9;
  v32 = a10;
  v33 = a11;
  v34 = a12;
  v35 = a13;
  v36 = a14;
  v37 = a5;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&rcv_name[4] = a1;
  *(_DWORD *)&rcv_name[8] = special_reply_port;
  v21 = -2147478253;
  *(_QWORD *)&rcv_name[12] = 0x42BD00000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v21);
    special_reply_port = *(_DWORD *)&rcv_name[8];
  }
  v17 = mach_msg((mach_msg_header_t *)&v21, 3162387, 0x88u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v18 = v17;
  if ((v17 - 268435458) > 0xE || ((1 << (v17 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v17)
    {
      if (*(_DWORD *)&rcv_name[16] == 71)
      {
        v18 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name[16] == 17185)
      {
        if ((v21 & 0x80000000) == 0)
        {
          if (*(_DWORD *)rcv_name == 40)
          {
            if (!*(_DWORD *)&rcv_name[4])
            {
              v18 = *(unsigned int *)&rcv_name[28];
              if (!*(_DWORD *)&rcv_name[28])
              {
                *a6 = v23;
                return v18;
              }
              goto LABEL_25;
            }
          }
          else if (*(_DWORD *)rcv_name == 36)
          {
            if (*(_DWORD *)&rcv_name[4])
              v19 = 1;
            else
              v19 = *(_DWORD *)&rcv_name[28] == 0;
            if (v19)
              v18 = 4294966996;
            else
              v18 = *(unsigned int *)&rcv_name[28];
            goto LABEL_25;
          }
        }
        v18 = 4294966996;
      }
      else
      {
        v18 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy((mach_msg_header_t *)&v21);
      return v18;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v18 - 268435459) <= 1)
  {
    if ((v21 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&rcv_name[8]);
    goto LABEL_25;
  }
  return v18;
}

uint64_t FigVideoQueueRemoteClient_EnqueueH264Frame(mach_port_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, int *a18)
{
  mach_port_t special_reply_port;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  mach_msg_header_t msg;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v25 = 2;
  v26 = a4;
  v27 = 16777472;
  v28 = a5;
  v29 = a6;
  v30 = 16777472;
  v31 = a7;
  v32 = *MEMORY[0x1E0C804E8];
  v33 = a2;
  v34 = a3;
  v35 = a5;
  v36 = a7;
  v37 = a8;
  v38 = a9;
  v39 = a10;
  v40 = a11;
  v41 = a12;
  v42 = a13;
  v43 = a14;
  v44 = a15;
  v45 = a16;
  v46 = a17;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(_QWORD *)&msg.msgh_voucher_port = 0x42BE00000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&msg);
    special_reply_port = msg.msgh_local_port;
  }
  v20 = mach_msg(&msg, 3162387, 0xA0u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v21 = v20;
  if ((v20 - 268435458) > 0xE || ((1 << (v20 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v20)
    {
      if (msg.msgh_id == 71)
      {
        v21 = 4294966988;
      }
      else if (msg.msgh_id == 17186)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              v21 = HIDWORD(v26);
              if (!HIDWORD(v26))
              {
                *a18 = v27;
                return v21;
              }
              goto LABEL_25;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port)
              v22 = 1;
            else
              v22 = HIDWORD(v26) == 0;
            if (v22)
              v21 = 4294966996;
            else
              v21 = HIDWORD(v26);
            goto LABEL_25;
          }
        }
        v21 = 4294966996;
      }
      else
      {
        v21 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&msg);
      return v21;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v21 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    goto LABEL_25;
  }
  return v21;
}

uint64_t FigVideoQueueRemoteClient_EnqueueH264FrameWithTimingInfoBaggage(mach_port_t a1, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, uint64_t a18, int a19, int *a20)
{
  mach_port_t special_reply_port;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  mach_msg_header_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v27 = 3;
  v28 = a4;
  v29 = 16777472;
  v30 = a5;
  v31 = a6;
  v32 = 16777472;
  v33 = a7;
  v34 = a18;
  v35 = 16777472;
  v36 = a19;
  v37 = *MEMORY[0x1E0C804E8];
  v38 = a2;
  v39 = a3;
  v40 = a5;
  v41 = a7;
  v42 = a8;
  v43 = a9;
  v44 = a10;
  v45 = a11;
  v46 = a12;
  v47 = a13;
  v48 = a14;
  v49 = a15;
  v50 = a16;
  v51 = a17;
  v52 = a19;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&v26.msgh_bits = 2147489043;
  v26.msgh_remote_port = a1;
  v26.msgh_local_port = special_reply_port;
  *(_QWORD *)&v26.msgh_voucher_port = 0x42BF00000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&v26);
    special_reply_port = v26.msgh_local_port;
  }
  v22 = mach_msg(&v26, 3162387, 0xB4u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v23 = v22;
  if ((v22 - 268435458) > 0xE || ((1 << (v22 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v22)
    {
      if (v26.msgh_id == 71)
      {
        v23 = 4294966988;
      }
      else if (v26.msgh_id == 17187)
      {
        if ((v26.msgh_bits & 0x80000000) == 0)
        {
          if (v26.msgh_size == 40)
          {
            if (!v26.msgh_remote_port)
            {
              v23 = HIDWORD(v28);
              if (!HIDWORD(v28))
              {
                *a20 = v29;
                return v23;
              }
              goto LABEL_25;
            }
          }
          else if (v26.msgh_size == 36)
          {
            if (v26.msgh_remote_port)
              v24 = 1;
            else
              v24 = HIDWORD(v28) == 0;
            if (v24)
              v23 = 4294966996;
            else
              v23 = HIDWORD(v28);
            goto LABEL_25;
          }
        }
        v23 = 4294966996;
      }
      else
      {
        v23 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&v26);
      return v23;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v23 - 268435459) <= 1)
  {
    if ((v26.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v26.msgh_local_port);
    goto LABEL_25;
  }
  return v23;
}

uint64_t FigVideoQueueRemoteClient_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(mach_port_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, int a17, int *a18)
{
  mach_port_t special_reply_port;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  mach_msg_header_t msg;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v25 = 3;
  v26 = a2;
  v27 = 16777472;
  v28 = a3;
  v29 = a4;
  v30 = 16777472;
  v31 = a5;
  v32 = a8;
  v33 = 16777472;
  v34 = a17;
  v35 = *MEMORY[0x1E0C804E8];
  v36 = a3;
  v37 = a5;
  v38 = a6;
  v39 = a9;
  v40 = a10;
  v41 = a11;
  v42 = a12;
  v43 = a13;
  v44 = a14;
  v45 = a15;
  v46 = a16;
  v47 = a7;
  v48 = a17;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&msg.msgh_bits = 2147489043;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(_QWORD *)&msg.msgh_voucher_port = 0x42C000000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&msg);
    special_reply_port = msg.msgh_local_port;
  }
  v20 = mach_msg(&msg, 3162387, 0xACu, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v21 = v20;
  if ((v20 - 268435458) > 0xE || ((1 << (v20 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v20)
    {
      if (msg.msgh_id == 71)
      {
        v21 = 4294966988;
      }
      else if (msg.msgh_id == 17188)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              v21 = HIDWORD(v26);
              if (!HIDWORD(v26))
              {
                *a18 = v27;
                return v21;
              }
              goto LABEL_25;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port)
              v22 = 1;
            else
              v22 = HIDWORD(v26) == 0;
            if (v22)
              v21 = 4294966996;
            else
              v21 = HIDWORD(v26);
            goto LABEL_25;
          }
        }
        v21 = 4294966996;
      }
      else
      {
        v21 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&msg);
      return v21;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v21 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    goto LABEL_25;
  }
  return v21;
}

uint64_t FigVideoQueueRemoteClient_SyncTimebaseToMoment(mach_port_t a1, unsigned int a2, __int128 *a3, _DWORD *a4)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  mach_port_t special_reply_port;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  mach_msg_header_t msg;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v6 = a3[5];
  v21 = a3[4];
  v22 = v6;
  v23 = a3[6];
  v7 = a3[1];
  v17 = *a3;
  v18 = v7;
  v8 = a3[3];
  v19 = a3[2];
  v15 = *MEMORY[0x1E0C804E8];
  v16 = a2;
  v24 = *((_QWORD *)a3 + 14);
  v20 = v8;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&msg.msgh_bits = 5395;
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = special_reply_port;
  *(_QWORD *)&msg.msgh_voucher_port = 0x42C100000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&msg);
    special_reply_port = msg.msgh_local_port;
  }
  v10 = mach_msg(&msg, 3162387, 0x9Cu, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v11 = v10;
  if ((v10 - 268435458) > 0xE || ((1 << (v10 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v10)
    {
      if (msg.msgh_id == 71)
      {
        v11 = 4294966988;
      }
      else if (msg.msgh_id == 17189)
      {
        if ((msg.msgh_bits & 0x80000000) == 0)
        {
          if (msg.msgh_size == 40)
          {
            if (!msg.msgh_remote_port)
            {
              v11 = v16;
              if (!v16)
              {
                *a4 = v17;
                return v11;
              }
              goto LABEL_25;
            }
          }
          else if (msg.msgh_size == 36)
          {
            if (msg.msgh_remote_port)
              v12 = 1;
            else
              v12 = v16 == 0;
            if (v12)
              v11 = 4294966996;
            else
              v11 = v16;
            goto LABEL_25;
          }
        }
        v11 = 4294966996;
      }
      else
      {
        v11 = 4294966995;
      }
LABEL_25:
      mach_msg_destroy(&msg);
      return v11;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v11 - 268435459) <= 1)
  {
    if ((msg.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], msg.msgh_local_port);
    goto LABEL_25;
  }
  return v11;
}

uint64_t FigVideoQueueRemoteClient_Flush(int a1, int a2)
{
  mach_port_name_t special_reply_port;
  uint64_t v4;
  uint64_t v5;
  _BYTE msg[36];
  uint64_t v9;

  *(_OWORD *)&msg[20] = 0u;
  v9 = 0;
  *(_OWORD *)&msg[4] = 0u;
  *(_QWORD *)&msg[24] = *MEMORY[0x1E0C804E8];
  *(_DWORD *)&msg[32] = a2;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x42C200000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v4 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x24u, 0x2Cu, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v5 = v4;
  if ((v4 - 268435458) > 0xE || ((1 << (v4 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v4)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v5 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17190)
      {
        v5 = 4294966996;
        if ((*(_DWORD *)msg & 0x80000000) == 0 && *(_DWORD *)&msg[4] == 36 && !*(_DWORD *)&msg[8])
        {
          v5 = *(unsigned int *)&msg[32];
          if (!*(_DWORD *)&msg[32])
            return v5;
        }
      }
      else
      {
        v5 = 4294966995;
      }
LABEL_22:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v5;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v5 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_22;
  }
  return v5;
}

uint64_t FigVideoQueueRemoteClient_IsAboveHighWaterLevel(int a1, _DWORD *a2)
{
  mach_port_name_t special_reply_port;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  int v10;
  int rcv_name;
  int rcv_name_4;
  mach_port_name_t rcv_name_8;
  _BYTE rcv_name_12[32];

  memset(&rcv_name_12[4], 0, 28);
  rcv_name = 0;
  special_reply_port = mig_get_special_reply_port();
  rcv_name_4 = a1;
  rcv_name_8 = special_reply_port;
  v10 = 5395;
  *(_QWORD *)rcv_name_12 = 0x42C300000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v10);
    special_reply_port = rcv_name_8;
  }
  v5 = mach_msg((mach_msg_header_t *)&v10, 3162387, 0x18u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v6 = v5;
  if ((v5 - 268435458) > 0xE || ((1 << (v5 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v5)
    {
      if (*(_DWORD *)&rcv_name_12[4] == 71)
      {
        v6 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name_12[4] == 17191)
      {
        if ((v10 & 0x80000000) == 0)
        {
          if (rcv_name == 40)
          {
            if (!rcv_name_4)
            {
              v6 = *(unsigned int *)&rcv_name_12[16];
              if (!*(_DWORD *)&rcv_name_12[16])
              {
                *a2 = *(_DWORD *)&rcv_name_12[20];
                return v6;
              }
              goto LABEL_28;
            }
          }
          else if (rcv_name == 36)
          {
            if (rcv_name_4)
              v8 = 1;
            else
              v8 = *(_DWORD *)&rcv_name_12[16] == 0;
            if (v8)
              v6 = 4294966996;
            else
              v6 = *(unsigned int *)&rcv_name_12[16];
            goto LABEL_28;
          }
        }
        v6 = 4294966996;
      }
      else
      {
        v6 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy((mach_msg_header_t *)&v10);
      return v6;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v6 - 268435459) <= 1)
  {
    if ((v10 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name_8);
    goto LABEL_28;
  }
  return v6;
}

uint64_t FigVideoQueueRemoteClient_GetNextPendingNotification(int a1, _DWORD *a2, _QWORD *a3, char *a4, _QWORD *a5, _DWORD *a6)
{
  mach_port_name_t special_reply_port;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE msg[36];
  __int128 v20;
  __int128 v21;
  _OWORD v22[33];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  memset(v22, 0, 444);
  v21 = 0u;
  v20 = 0u;
  *(_OWORD *)&msg[20] = 0u;
  *(_DWORD *)&msg[4] = 0;
  special_reply_port = mig_get_special_reply_port();
  *(_DWORD *)&msg[8] = a1;
  *(_DWORD *)&msg[12] = special_reply_port;
  *(_DWORD *)msg = 5395;
  *(_QWORD *)&msg[16] = 0x42C400000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)msg);
    special_reply_port = *(_DWORD *)&msg[12];
  }
  v13 = mach_msg((mach_msg_header_t *)msg, 3162387, 0x18u, 0x254u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v14 = v13;
  if ((v13 - 268435458) > 0xE || ((1 << (v13 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v13)
    {
      if (*(_DWORD *)&msg[20] == 71)
      {
        v14 = 4294966988;
      }
      else if (*(_DWORD *)&msg[20] == 17192)
      {
        if ((*(_DWORD *)msg & 0x80000000) == 0)
        {
          if (*(_DWORD *)&msg[4] == 36)
          {
            v14 = 4294966996;
            if (*(_DWORD *)&msg[32])
            {
              if (*(_DWORD *)&msg[8])
                v14 = 4294966996;
              else
                v14 = *(unsigned int *)&msg[32];
            }
          }
          else
          {
            v14 = 4294966996;
          }
          goto LABEL_31;
        }
        v14 = 4294966996;
        if (*(_DWORD *)&msg[24] == 1
          && *(_DWORD *)&msg[4] >= 0x4Cu
          && *(_DWORD *)&msg[4] <= 0x24Cu
          && !*(_DWORD *)&msg[8]
          && BYTE3(v20) == 1
          && LODWORD(v22[0]) <= 0x200
          && (*(_DWORD *)&msg[4] - 76) >= LODWORD(v22[0]))
        {
          v15 = (LODWORD(v22[0]) + 3) & 0xFFFFFFFC;
          if (*(_DWORD *)&msg[4] == v15 + 76)
          {
            v16 = &msg[v15];
            if (DWORD1(v20) == *((_DWORD *)v16 + 18))
            {
              v17 = v16 - 512;
              *a2 = v21;
              *a3 = *(_QWORD *)((char *)&v21 + 4);
              mig_strncpy(a4, (const char *)v22 + 4, 512);
              v14 = 0;
              *a5 = *(_QWORD *)&msg[28];
              *a6 = *((_DWORD *)v17 + 146);
              return v14;
            }
          }
        }
      }
      else
      {
        v14 = 4294966995;
      }
LABEL_31:
      mach_msg_destroy((mach_msg_header_t *)msg);
      return v14;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v14 - 268435459) <= 1)
  {
    if ((*(_WORD *)msg & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(mach_port_name_t *)&msg[12]);
    goto LABEL_31;
  }
  return v14;
}

uint64_t FigVideoQueueRemoteClient_RequestDecodeForPreroll(mach_port_t a1, uint64_t a2, int a3, int *a4)
{
  mach_port_t special_reply_port;
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  mach_msg_header_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v13 = 1;
  v14 = a2;
  v15 = 16777472;
  v16 = a3;
  v17 = *MEMORY[0x1E0C804E8];
  v18 = a3;
  special_reply_port = mig_get_special_reply_port();
  *(_QWORD *)&v12.msgh_bits = 2147489043;
  v12.msgh_remote_port = a1;
  v12.msgh_local_port = special_reply_port;
  *(_QWORD *)&v12.msgh_voucher_port = 0x42C500000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&v12);
    special_reply_port = v12.msgh_local_port;
  }
  v7 = mach_msg(&v12, 3162387, 0x38u, 0x30u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v8 = v7;
  if ((v7 - 268435458) > 0xE || ((1 << (v7 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v7)
    {
      if (v12.msgh_id == 71)
      {
        v8 = 4294966988;
      }
      else if (v12.msgh_id == 17193)
      {
        if ((v12.msgh_bits & 0x80000000) == 0)
        {
          if (v12.msgh_size == 40)
          {
            if (!v12.msgh_remote_port)
            {
              v8 = HIDWORD(v14);
              if (!HIDWORD(v14))
              {
                *a4 = v15;
                return v8;
              }
              goto LABEL_28;
            }
          }
          else if (v12.msgh_size == 36)
          {
            if (v12.msgh_remote_port)
              v10 = 1;
            else
              v10 = HIDWORD(v14) == 0;
            if (v10)
              v8 = 4294966996;
            else
              v8 = HIDWORD(v14);
            goto LABEL_28;
          }
        }
        v8 = 4294966996;
      }
      else
      {
        v8 = 4294966995;
      }
LABEL_28:
      mach_msg_destroy(&v12);
      return v8;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v8 - 268435459) <= 1)
  {
    if ((v12.msgh_bits & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v12.msgh_local_port);
    goto LABEL_28;
  }
  return v8;
}

uint64_t FigVideoQueueRemoteClient_CopyCurrentlyDisplayedCVPixelBuffer(int a1, _DWORD *a2, _QWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_name_t special_reply_port;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v16;
  int rcv_name;
  int rcv_name_4;
  mach_port_name_t rcv_name_8;
  _BYTE rcv_name_12[20];
  __int128 v21;
  _DWORD v22[7];

  memset(v22, 0, sizeof(v22));
  v21 = 0u;
  *(_OWORD *)&rcv_name_12[4] = 0u;
  rcv_name = 0;
  special_reply_port = mig_get_special_reply_port();
  rcv_name_4 = a1;
  rcv_name_8 = special_reply_port;
  v16 = 5395;
  *(_QWORD *)rcv_name_12 = 0x42C600000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set((mach_msg_header_t *)&v16);
    special_reply_port = rcv_name_8;
  }
  v11 = mach_msg((mach_msg_header_t *)&v16, 3162387, 0x18u, 0x50u, special_reply_port, *MEMORY[0x1E0CA1FB0], 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if (!(_DWORD)v11)
    {
      if (*(_DWORD *)&rcv_name_12[4] == 71)
      {
        v12 = 4294966988;
      }
      else if (*(_DWORD *)&rcv_name_12[4] == 17194)
      {
        if ((v16 & 0x80000000) == 0)
        {
          if (rcv_name == 36)
          {
            v12 = 4294966996;
            if (*(_DWORD *)&rcv_name_12[16])
            {
              if (rcv_name_4)
                v12 = 4294966996;
              else
                v12 = *(unsigned int *)&rcv_name_12[16];
            }
          }
          else
          {
            v12 = 4294966996;
          }
          goto LABEL_31;
        }
        v12 = 4294966996;
        if (*(_DWORD *)&rcv_name_12[8] == 2
          && rcv_name == 72
          && !rcv_name_4
          && WORD1(v21) << 16 == 1114112
          && HIBYTE(v21) == 1)
        {
          v14 = v22[0];
          if (v22[0] == v22[3])
          {
            v12 = 0;
            *a2 = *(_DWORD *)&rcv_name_12[12];
            *a3 = *(_QWORD *)((char *)&v21 + 4);
            *a4 = v14;
            *a5 = v22[4];
            return v12;
          }
        }
      }
      else
      {
        v12 = 4294966995;
      }
LABEL_31:
      mach_msg_destroy((mach_msg_header_t *)&v16);
      return v12;
    }
    mig_dealloc_special_reply_port();
  }
  if ((v12 - 268435459) <= 1)
  {
    if ((v16 & 0x1F00) == 0x1100)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], rcv_name_8);
    goto LABEL_31;
  }
  return v12;
}

uint64_t (*figvideoqueue_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 17095) >= 0xFFFFFFF1)
    return FigVideoQueueRemoteServer_figvideoqueue_subsystem[5 * (v1 - 17080) + 5];
  else
    return 0;
}

uint64_t _XCreate(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _OWORD v13[2];

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 1)
    goto LABEL_3;
  v5 = *(unsigned int *)(result + 4);
  if (v5 < 0x44 || v5 > 0x244)
    goto LABEL_3;
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    v3 = -300;
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(result + 64);
  v3 = -304;
  if (v6 > 0x200 || (int)v5 - 68 < v6)
    goto LABEL_3;
  if ((_DWORD)v5 != ((v6 + 3) & 0xFFFFFFFC) + 68 || (result = (uint64_t)memchr((void *)(result + 68), 0, v5 - 68)) == 0)
  {
LABEL_2:
    v3 = -304;
LABEL_3:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_4;
  }
  v7 = ((v5 + 3) & 0x1FFFFFFFCLL) + v4;
  if (*(_DWORD *)v7 || *(_DWORD *)(v7 + 4) <= 0x1Fu)
  {
    v3 = -309;
    goto LABEL_3;
  }
  *(_QWORD *)(a2 + 32) = 0x14000000000000;
  v8 = *(unsigned int *)(v4 + 12);
  v9 = *(unsigned int *)(v4 + 28);
  v10 = *(_QWORD *)(v4 + 48);
  v11 = *(_DWORD *)(v4 + 56);
  v12 = *(_OWORD *)(v7 + 36);
  v13[0] = *(_OWORD *)(v7 + 20);
  v13[1] = v12;
  result = FigVideoQueueRemoteServer_Create(v8, v9, v10, v11, (const char *)(v4 + 68), (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 48), (uint64_t *)(a2 + 56), (_DWORD *)(a2 + 64), v13);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 40) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 68;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_4:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XDestroy(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)FigVideoQueueRemoteServer_Destroy();
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

const char *_XGetProperty(const char *result, uint64_t a2)
{
  const char *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;

  if ((*(_DWORD *)result & 0x80000000) != 0
    || (v3 = result, v4 = *((unsigned int *)result + 1), v4 < 0x28)
    || v4 > 0x228
    || ((v5 = *((_DWORD *)result + 9), v5 <= 0x200) ? (v6 = (int)v4 - 40 >= v5) : (v6 = 0),
        (v7 = ((v5 + 3) & 0xFFFFFFFC) + 40, v6) ? (v8 = (_DWORD)v4 == v7) : (v8 = 0),
        !v8 || (result = (const char *)memchr((void *)(result + 40), 0, v4 - 40)) == 0))
  {
    *(_DWORD *)(a2 + 32) = -304;
LABEL_12:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (const char *)FigVideoQueueRemoteServer_GetProperty(*((unsigned int *)v3 + 3), v3 + 40);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 56;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t _XSetProperty(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  if ((*(_DWORD *)result & 0x80000000) == 0)
    goto LABEL_2;
  v4 = result;
  v3 = -304;
  if (*(_DWORD *)(result + 24) != 1)
    goto LABEL_3;
  v5 = *(_DWORD *)(result + 4);
  if (v5 < 0x40 || v5 > 0x240)
    goto LABEL_3;
  if (*(_BYTE *)(result + 39) != 1)
  {
LABEL_17:
    v3 = -300;
    goto LABEL_3;
  }
  v6 = *(_DWORD *)(result + 56);
  if (v6 <= 0x200)
  {
    v3 = -304;
    if (v5 - 64 < v6)
      goto LABEL_3;
    v7 = (v6 + 3) & 0xFFFFFFFC;
    if (v5 != v7 + 64)
      goto LABEL_3;
    v8 = *(_DWORD *)(result + 40);
    if (v8 == *(_DWORD *)(result + v7 + 60))
    {
      v9 = 572;
      if (*(unsigned int *)(result + 4) < 0x23CuLL)
        v9 = *(unsigned int *)(result + 4);
      result = (uint64_t)memchr((void *)(result + 60), 0, v9 - 60);
      if (result)
      {
        result = FigVideoQueueRemoteServer_SetProperty(*(unsigned int *)(v4 + 12), (const char *)(v4 + 60), *(_QWORD *)(v4 + 28), v8);
        *(_DWORD *)(a2 + 32) = result;
        goto LABEL_4;
      }
      goto LABEL_2;
    }
    goto LABEL_17;
  }
LABEL_2:
  v3 = -304;
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
LABEL_4:
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XStart(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)FigVideoQueueRemoteServer_Start(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

uint64_t _XEnqueueVideoSampleBuffer(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 136)
  {
    v5 = -304;
LABEL_10:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_11;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112
    || *(_BYTE *)(result + 51) != 1
    || (v3 = *(_DWORD *)(result + 52), v3 != *(_DWORD *)(result + 64)))
  {
    v5 = -300;
    goto LABEL_10;
  }
  result = FigVideoQueueRemoteServer_EnqueueVideoSampleBuffer(*(unsigned int *)(result + 12), *(_DWORD *)(result + 28), *(_QWORD *)(result + 40), v3, *(unsigned int *)(result + 132), (int *)(a2 + 36), *(double *)(result + 68), *(double *)(result + 76), *(double *)(result + 84), *(double *)(result + 92), *(double *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_11:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

uint64_t _XEnqueueH264Frame(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 160)
  {
    v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    v5 = *MEMORY[0x1E0C804E8];
    goto LABEL_12;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 76))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 80)))
  {
    v6 = -300;
    goto LABEL_11;
  }
  result = FigVideoQueueRemoteServer_EnqueueH264Frame(*(unsigned int *)(result + 12), *(unsigned int *)(result + 68), *(unsigned int *)(result + 72), *(const UInt8 **)(result + 28), v3, *(void **)(result + 44), v4, *(_QWORD *)(result + 84), *(double *)(result + 92), *(double *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124), *(double *)(result + 132), *(double *)(result + 140), *(double *)(result + 148), *(_DWORD *)(result + 156), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v5 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v5;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t _XEnqueueH264FrameWithTimingInfoBaggage(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 180)
  {
    v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    v6 = *MEMORY[0x1E0C804E8];
    goto LABEL_14;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_BYTE *)(result + 71) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 92))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 96))
    || (v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 176)))
  {
    v7 = -300;
    goto LABEL_13;
  }
  result = FigVideoQueueRemoteServer_EnqueueH264FrameWithTimingInfoBaggage(*(unsigned int *)(result + 12), *(unsigned int *)(result + 84), *(unsigned int *)(result + 88), *(const UInt8 **)(result + 28), v3, *(void **)(result + 44), v4, *(_QWORD *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124), *(double *)(result + 132), *(double *)(result + 140), *(double *)(result + 148), *(double *)(result + 156), *(double *)(result + 164), *(_DWORD *)(result + 172), *(_QWORD *)(result + 60), v5,
             (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v6 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v6;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t _XEnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 172)
  {
    v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    v6 = *MEMORY[0x1E0C804E8];
    goto LABEL_14;
  }
  if (*(_BYTE *)(result + 39) != 1
    || *(_BYTE *)(result + 55) != 1
    || *(_BYTE *)(result + 71) != 1
    || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 168)))
  {
    v7 = -300;
    goto LABEL_13;
  }
  result = FigVideoQueueRemoteServer_EnqueueFrameWithFormatDescriptionAndTimingInfoBaggage(*(unsigned int *)(result + 12), *(void **)(result + 28), v3, *(void **)(result + 44), v4, *(_QWORD *)(result + 92), *(unsigned int *)(result + 164), *(_QWORD *)(result + 60), *(double *)(result + 100), *(double *)(result + 108), *(double *)(result + 116), *(double *)(result + 124), *(double *)(result + 132), *(double *)(result + 140), *(double *)(result + 148), *(double *)(result + 156), v5, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v6 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v6;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(_QWORD *)(a2 + 24) = v6;
  return result;
}

uint64_t _XSyncTimebaseToMoment(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[7];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)result & 0x80000000) != 0 || *(_DWORD *)(result + 4) != 156)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v8 = *MEMORY[0x1E0C804E8];
  }
  else
  {
    v3 = *(unsigned int *)(result + 12);
    v4 = *(_DWORD *)(result + 32);
    v5 = *(_OWORD *)(result + 116);
    v9[4] = *(_OWORD *)(result + 100);
    v9[5] = v5;
    v9[6] = *(_OWORD *)(result + 132);
    v10 = *(_QWORD *)(result + 148);
    v6 = *(_OWORD *)(result + 52);
    v9[0] = *(_OWORD *)(result + 36);
    v9[1] = v6;
    v7 = *(_OWORD *)(result + 84);
    v9[2] = *(_OWORD *)(result + 68);
    v9[3] = v7;
    result = FigVideoQueueRemoteServer_SyncTimebaseToMoment(v3, v4, (int *)v9, (int *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    v8 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v8;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

_DWORD *_XFlush(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 36)
  {
    *(_DWORD *)(a2 + 32) = -304;
  }
  else
  {
    result = (_DWORD *)FigVideoQueueRemoteServer_Flush(result[3], result[8]);
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *_XIsAboveHighWaterLevel(_DWORD *result, uint64_t a2)
{
  uint64_t v3;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    v3 = *MEMORY[0x1E0C804E8];
  }
  else
  {
    result = (_DWORD *)FigVideoQueueRemoteServer_IsAboveHighWaterLevel(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
    v3 = *MEMORY[0x1E0C804E8];
    if (!(_DWORD)result)
    {
      *(_QWORD *)(a2 + 24) = v3;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

_DWORD *_XGetNextPendingNotification(_DWORD *result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  v6 = 0;
  *(_DWORD *)(a2 + 36) = 16777473;
  result = (_DWORD *)FigVideoQueueRemoteServer_GetNextPendingNotification(result[3], a2 + 52, a2 + 56, (char *)(a2 + 72), (vm_address_t *)(a2 + 28), &v6);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  v3 = v6;
  *(_DWORD *)(a2 + 40) = v6;
  v4 = *MEMORY[0x1E0C804E8];
  *(_QWORD *)(a2 + 44) = *MEMORY[0x1E0C804E8];
  result = (_DWORD *)strlen((const char *)(a2 + 72));
  if (((unint64_t)result + 1) >> 32)
  {
    *(_DWORD *)(a2 + 32) = -304;
    *(_QWORD *)(a2 + 24) = v4;
  }
  else
  {
    *(_DWORD *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 68) = (_DWORD)result + 1;
    v5 = ((_DWORD)result + 4) & 0xFFFFFFFC;
    *(_DWORD *)(a2 + v5 + 72) = v3;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = v5 + 76;
    *(_DWORD *)(a2 + 24) = 1;
  }
  return result;
}

uint64_t _XRequestDecodeForPreroll(uint64_t result, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  int v5;

  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    v4 = *MEMORY[0x1E0C804E8];
    goto LABEL_10;
  }
  if (*(_BYTE *)(result + 39) != 1 || (v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    v5 = -300;
    goto LABEL_9;
  }
  result = FigVideoQueueRemoteServer_RequestDecodeForPreroll(*(unsigned int *)(result + 12), *(_QWORD *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  v4 = *MEMORY[0x1E0C804E8];
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a2 + 24) = v4;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(_QWORD *)(a2 + 24) = v4;
  return result;
}

_DWORD *_XCopyCurrentlyDisplayedCVPixelBuffer(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_QWORD *)(a2 + 32) = 0x11000000000000;
  *(_DWORD *)(a2 + 48) = 16777473;
  result = (_DWORD *)FigVideoQueueRemoteServer_CopyCurrentlyDisplayedCVPixelBuffer(result[3], (_DWORD *)(a2 + 28), (_QWORD *)(a2 + 40), (_DWORD *)(a2 + 64), (int *)(a2 + 68));
  if ((_DWORD)result)
  {
    *(_DWORD *)(a2 + 32) = (_DWORD)result;
LABEL_6:
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    return result;
  }
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 72;
  *(_DWORD *)(a2 + 24) = 2;
  return result;
}

uint64_t figvideoqueue_server(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  void (*v5)(void);
  uint64_t result;

  v2 = a1[2];
  *(_DWORD *)a2 = *a1 & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = a1[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = a1[5];
  if ((v4 - 17095) >= 0xFFFFFFF1
    && (v5 = (void (*)(void))FigVideoQueueRemoteServer_figvideoqueue_subsystem[5 * (v4 - 17080) + 5]) != 0)
  {
    v5();
    return 1;
  }
  else
  {
    result = 0;
    *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
    *(_DWORD *)(a2 + 32) = -303;
  }
  return result;
}

_QWORD *SYSWrap_GetRDTSC(_QWORD *result)
{
  *result = ++SYSWrap_GetRDTSC::a;
  return result;
}

uint64_t UnjL(mach_port_t a1, int a2, int *a3, uint64_t a4, int a5, _OWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  int v17;
  mach_port_t reply_port;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  mach_msg_header_t msg;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v30 = 1;
  v31 = a4;
  v32 = 16777472;
  v33 = a5;
  v34 = *MEMORY[0x1E0C804E8];
  v17 = *a3;
  v35 = a2;
  v36 = v17;
  v37 = a5;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B000000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v19 = mach_msg(&msg, 3, 0x40u, 0xDCu, reply_port, 0, 0);
  v20 = v19;
  if ((v19 - 268435458) <= 0xE && ((1 << (v19 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v19)
    {
      if (msg.msgh_id == 71)
      {
        v20 = 4294966988;
      }
      else if (msg.msgh_id == 1300)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v20 = 4294966996;
          if (v30 == 2
            && msg.msgh_size == 212
            && !msg.msgh_remote_port
            && HIBYTE(v32) == 1
            && HIWORD(v35) << 16 == 1114112)
          {
            v21 = v33;
            if (v33 == v47)
            {
              v20 = 0;
              v22 = v34;
              *a3 = v38;
              v23 = v46;
              a6[6] = v45;
              a6[7] = v23;
              v24 = v44;
              a6[4] = v43;
              a6[5] = v24;
              v25 = v40;
              *a6 = v39;
              a6[1] = v25;
              v26 = v42;
              a6[2] = v41;
              a6[3] = v26;
              *a7 = v31;
              *a8 = v21;
              v27 = v49;
              *a9 = v48;
              *a10 = v27;
              *a11 = v50;
              *a12 = v22;
              return v20;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v20 = 4294966996;
          if (HIDWORD(v31))
          {
            if (msg.msgh_remote_port)
              v20 = 4294966996;
            else
              v20 = HIDWORD(v31);
          }
        }
        else
        {
          v20 = 4294966996;
        }
      }
      else
      {
        v20 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v20;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v20;
}

uint64_t aCFD(mach_port_t a1, unsigned int a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  mach_port_t reply_port;
  uint64_t v9;
  uint64_t v10;
  mach_msg_header_t msg;
  uint64_t v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = a3[5];
  v19 = a3[4];
  v20 = v4;
  v5 = a3[7];
  v21 = a3[6];
  v22 = v5;
  v6 = a3[1];
  v15 = *a3;
  v16 = v6;
  v7 = a3[3];
  v17 = a3[2];
  v13 = *MEMORY[0x1E0C804E8];
  v14 = a2;
  v18 = v7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B100000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v9 = mach_msg(&msg, 3, 0xA4u, 0x2Cu, reply_port, 0, 0);
  v10 = v9;
  if ((v9 - 268435458) <= 0xE && ((1 << (v9 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
    return v10;
  }
  if ((_DWORD)v9)
  {
    mig_dealloc_reply_port(msg.msgh_local_port);
    return v10;
  }
  if (msg.msgh_id == 71)
  {
    v10 = 4294966988;
LABEL_17:
    mach_msg_destroy(&msg);
    return v10;
  }
  if (msg.msgh_id != 1301)
  {
    v10 = 4294966995;
    goto LABEL_17;
  }
  v10 = 4294966996;
  if ((msg.msgh_bits & 0x80000000) != 0)
    goto LABEL_17;
  if (msg.msgh_size != 36)
    goto LABEL_17;
  if (msg.msgh_remote_port)
    goto LABEL_17;
  v10 = v14;
  if (v14)
    goto LABEL_17;
  return v10;
}

uint64_t J7JPJQ(mach_port_t a1, int a2, int a3, int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, _QWORD *a9, _DWORD *a10)
{
  mach_port_t reply_port;
  uint64_t v13;
  uint64_t v14;
  int v15;
  mach_msg_header_t msg;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE v23[28];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v18 = 1;
  v19 = a6;
  v20 = 16777472;
  v21 = a7;
  v22 = *MEMORY[0x1E0C804E8];
  *(_DWORD *)v23 = a2;
  *(_DWORD *)&v23[4] = a3;
  *(_DWORD *)&v23[8] = a4;
  *(_OWORD *)&v23[12] = *a5;
  v24 = a7;
  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = -2147478253;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B200000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v13 = mach_msg(&msg, 3, 0x54u, 0x50u, reply_port, 0, 0);
  v14 = v13;
  if ((v13 - 268435458) <= 0xE && ((1 << (v13 - 2)) & 0x4003) != 0)
  {
    mig_put_reply_port(msg.msgh_local_port);
  }
  else
  {
    if (!(_DWORD)v13)
    {
      if (msg.msgh_id == 71)
      {
        v14 = 4294966988;
      }
      else if (msg.msgh_id == 1302)
      {
        if ((msg.msgh_bits & 0x80000000) != 0)
        {
          v14 = 4294966996;
          if (v18 == 1 && msg.msgh_size == 72 && !msg.msgh_remote_port && HIBYTE(v20) == 1)
          {
            v15 = v21;
            if (v21 == *(_DWORD *)&v23[16])
            {
              v14 = 0;
              *a8 = *(_OWORD *)v23;
              *a9 = v19;
              *a10 = v15;
              return v14;
            }
          }
        }
        else if (msg.msgh_size == 36)
        {
          v14 = 4294966996;
          if (HIDWORD(v19))
          {
            if (msg.msgh_remote_port)
              v14 = 4294966996;
            else
              v14 = HIDWORD(v19);
          }
        }
        else
        {
          v14 = 4294966996;
        }
      }
      else
      {
        v14 = 4294966995;
      }
      mach_msg_destroy(&msg);
      return v14;
    }
    mig_dealloc_reply_port(msg.msgh_local_port);
  }
  return v14;
}

uint64_t QvaDM(mach_port_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  mach_port_t reply_port;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v15;
  int v16;
  mach_msg_header_t msg;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  reply_port = mig_get_reply_port();
  msg.msgh_remote_port = a1;
  msg.msgh_local_port = reply_port;
  msg.msgh_bits = 5395;
  *(_QWORD *)&msg.msgh_voucher_port = 0x4B300000000;
  if (MEMORY[0x1E0C85B68])
  {
    voucher_mach_msg_set(&msg);
    reply_port = msg.msgh_local_port;
  }
  v11 = mach_msg(&msg, 3, 0x18u, 0x3Cu, reply_port, 0, 0);
  v12 = v11;
  if ((v11 - 268435458) > 0xE || ((1 << (v11 - 2)) & 0x4003) == 0)
  {
    if ((_DWORD)v11)
    {
      mig_dealloc_reply_port(msg.msgh_local_port);
      return v12;
    }
    if (msg.msgh_id == 71)
    {
      v12 = 4294966988;
    }
    else if (msg.msgh_id == 1303)
    {
      if ((msg.msgh_bits & 0x80000000) == 0)
      {
        if (msg.msgh_size == 52)
        {
          if (!msg.msgh_remote_port)
          {
            v12 = v18;
            if (!v18)
            {
              v15 = v20;
              *a2 = v19;
              *a3 = v15;
              v16 = v22;
              *a4 = v21;
              *a5 = v16;
              return v12;
            }
            goto LABEL_23;
          }
        }
        else if (msg.msgh_size == 36)
        {
          if (msg.msgh_remote_port)
            v13 = 1;
          else
            v13 = v18 == 0;
          if (v13)
            v12 = 4294966996;
          else
            v12 = v18;
          goto LABEL_23;
        }
      }
      v12 = 4294966996;
    }
    else
    {
      v12 = 4294966995;
    }
LABEL_23:
    mach_msg_destroy(&msg);
    return v12;
  }
  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

void fp_dh_afb47827f14ce479c436e85d73a65bf1(uint64_t a1)
{
  int v1;

  v1 = 2076498917 * ((2 * (a1 & 0x38AD9241) - a1 + 1196584382) ^ 0xFE6C7DF2);
  __asm { BR              X10 }
}

uint64_t sub_193068CB0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * ((3610 * (((v2 == 4083304) ^ (((v1 + 31) ^ 0xFC) + 29)) & 1)) ^ (v1 - 2785)))
                            - 4))();
}

uint64_t sub_193068D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8 * ((v2 - 1101) | 0x1008)) - 4))(a1, 3025632449, 2950033632);
}

uint64_t sub_193068E40@<X0>(int a1@<W6>, int a2@<W7>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(a3
                                        + 8 * (((v6 != (((((v7 + 2826) | a1) ^ a2) * v4) ^ (v3 + 3759))) * v5) ^ v7))
                            - 8))();
}

uint64_t sub_193068E74@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((((2 * v3) ^ 0x262E) * (v2 == v1)) ^ v3))
                            - ((v3 + 655238272) & 0xD8F1DB7B)
                            + 4979))();
}

uint64_t sub_193068EBC@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_DWORD *)(*(_QWORD *)(v3 - 0x756D22780D69450CLL) + 4 * (v1 + v2 + 1) - 0x41DE79666ECE2E74) = v5;
  v6 = v2 - 4986 + (v4 ^ 0x225C) + 3801;
  *(_DWORD *)(v3 - 0x756D22780D694510) = v6;
  v7 = (((v4 ^ 0x225C) + 1861032669) & 0x9112F2DB ^ 0xDCB91AA3) + v6;
  if (v7 < 0)
    v7 = -v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (int)((56
                                               * ((((v4 ^ 0x5C) - 35) & 0xDB ^ ((int)((v7 ^ 0xE3E6FF4E) + ((2 * v7) & 0xC7CDFE9C) + 471400625) > (int)((((((v4 ^ 0x225C) + 1861032669) & 0x9112F2DB) - 4090) | 0x1002) - 4708))) & 1)) ^ ((v4 ^ 0x225C) + 1861032669) & 0x9112F2DB))
                            - 8))();
}

uint64_t sub_193068FE0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  _QWORD *v2;
  unsigned int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (((*(_DWORD *)(*v2 + 4 * v3 - 0x41DE79666ECE2E74) == v1)
                                          * ((v4 - 877966084) & 0x3454B2FB ^ 0x1343)) ^ v4))
                            - ((v4 + 1817034100) & 0x93B23FAB ^ 0xF8BLL)))();
}

uint64_t sub_193069058@<X0>(int a1@<W1>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(a2
                                        + 8
                                        * ((56 * ((a1 ^ (v2 - 1 > ((a1 - 4090) | 0x1002) - 4708)) & 1)) ^ a1))
                            - 8))();
}

uint64_t sub_1930690A0(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int *v4;
  int v5;
  int v6;

  if ((v2 + v1) >= 0x7FFFFFFF)
    v6 = -v3;
  else
    v6 = v5;
  *v4 = v6;
  *(_DWORD *)(result + 32) = 2086366871;
  return result;
}

void fp_dh_d39d9742832b6486a2abce9da242d1f8(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  if (*(_QWORD *)(a1 + 24))
    v2 = *(_QWORD *)a1 == 0;
  else
    v2 = 1;
  v3 = !v2;
  v1 = *(_DWORD *)(a1 + 32) + 2076498917 * ((((2 * a1) | 0x16B8AAFE) - a1 - 190600575) ^ 0xB2624533);
  __asm { BR              X9 }
}

uint64_t sub_1930691B4@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  int v2;
  uint64_t v4;
  int v5;
  int v6;

  if (*(_BYTE *)(*(_QWORD *)(result + 16) + 131) == 1)
  {
    v5 = (v2 - 1938) | 0x1312;
    v6 = 2076498917 * ((((v4 - 144) | 0x6D349CA5) + (~(v4 - 144) | 0x92CB635A)) ^ 0xD40A8CE8);
    *(_DWORD *)(v4 - 128) = (v2 + 1064439989) ^ v6;
    *(_DWORD *)(v4 - 140) = 749406117 - v6;
    *(_QWORD *)(v4 - 136) = &STACK[0x5492E09C9D52CD13];
    fp_dh_e8d72af2808cdb5a2cae6ac3e204bdc5(v4 - 144);
    __asm { BR              X8 }
  }
  if (!*(_BYTE *)(*(_QWORD *)(result + 16) + 131))
    __asm { BR              X8 }
  return result;
}

void fp_dh_34717e0e7ac7319191ec066716d5211a(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_19306C014()
{
  uint64_t v0;
  int v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v0 + 8 * ((2 * (v1 != 69026196)) | (8 * (v1 != 69026196)) | 0xC21u)) - 8))();
}

uint64_t sub_19306C044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v6;

  *(_BYTE *)(a1 + (v3 - 1099891931) + 4) = (**(_BYTE **)(a2 - 0x7C0A4A96651B3BA9) ^ 0xFE)
                                                       + ((2 * **(_BYTE **)(a2 - 0x7C0A4A96651B3BA9)) & 0xFC)
                                                       + 64;
  v5 = *a3 - 859639383;
  v6 = v5 > 0xD0E0333E;
  if (v5 < 0xD0E0333D)
    v6 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((8162 * v6) ^ 0xC21u)) - 8))();
}

void sub_19306C128()
{
  JUMPOUT(0x19306C0A8);
}

uint64_t sub_19306C130()
{
  return 4294925278;
}

void fp_dh_5293e039d8ae9d426be91f3a79ff3144(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;
  _BOOL4 v5;

  v1 = 583213109 * ((((2 * a1) | 0x12B7C3B4) - a1 - 157016538) ^ 0x1CFECFC9);
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) - 0x66CB1BCE8C2AFEA9) + 543369251;
  v3 = (*(_DWORD *)(a1 + 16) ^ v1) + 1896525443;
  v4 = v2 < 0x8FFD4A08;
  v5 = v2 > v3;
  if (v3 < 0x8FFD4A08 != v4)
    v5 = v4;
  __asm { BR              X10 }
}

uint64_t sub_19306C260(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((69
                                          * (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 24)
                                                                  + (v2 - 1872372198))
                                             - ((*(unsigned __int8 *)(*(_QWORD *)(a1 + 24)
                                                                    + (v2 - 1872372198)) << (((v3 ^ 0xB6) - 74) ^ 0xDF ^ (-77 * (v3 ^ 0xB6)))) & 0xEC)
                                             + 892807542) & 0x1F) == 9)) ^ v3))
                            - 8))();
}

uint64_t sub_19306C2D8()
{
  int v0;
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v4 = v2 + 987177657 + v3 - 4352;
  v5 = v4 < ((v3 - 5300) | 0x62u) - 1435416593;
  v6 = v4 > v0 - 1954631216;
  if ((v0 - 1954631216) < 0xAA714D55 == v5)
    v5 = v6;
  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((7 * v5) ^ v3)) - 4))();
}

uint64_t sub_19306C360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v5 = *(char *)(v1 + (v3 + 1));
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v2
                                                              + 8
                                                              * ((4476
                                                                * (((v4 - 1) ^ (v5 > (char)(((v4 + 72) | 0x66) ^ 0x99))) & 1)) ^ v4))
                                                  - 12))(a1, ((2 * v5) & 0x1AC) + (*(unsigned __int8 *)(v1 + (v3 + 1)) ^ 0x64BDCBD6u) - 1621133890);
}

uint64_t sub_19306C3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6
                                        + 8
                                        * ((3383
                                          * (((v7 + 42) & 0x7F ^ (a6 + 3171) ^ 0xFF7DCC94)
                                           + ((2 * (v7 + 42)) & 0xBA)
                                           + 8528546 < 4)) ^ a6))
                            - 12))();
}

uint64_t sub_19306C440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _BOOL4 v10;
  _BOOL4 v11;

  v9 = v7 + a5 + 1778698524;
  v10 = v9 < 0xD91CC85D;
  v11 = v9 > v5 - 1171641128;
  if (v10 != v5 - 1171641128 < (v8 ^ 0xD91CD994))
    v11 = v10;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6
                                                                      + 8
                                                                      * ((2
                                                                        * (((45 * (v8 ^ 0xCD) + 1) ^ v11) & 1)) & 0xFB | (4 * (((557 * (v8 ^ 0x11CD) + 1) ^ v11) & 1)) | v8)))(a1, (557 * (v8 ^ 0x11CD) + 1) ^ v11, a3, 1396889065);
}

uint64_t sub_19306C4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v10 = *(unsigned __int8 *)(v5 + (v8 + v7 + 2));
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v6
                                                              + 8
                                                              * (v9 ^ ((4 * (a5 == -8528546)) | (8 * (a5 == -8528546)))))
                                                  - 12))(a1, (v10 ^ 0x35FD41B7) - 836763683 + ((2 * v10) & 0x16Eu));
}

uint64_t sub_19306C55C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned int a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  v12 = *(unsigned __int8 *)(v8 + (v11 + a6)) | (a2 << 8);
  return ((uint64_t (*)(uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * ((74 * (v10 - 1 == a7)) ^ a8)) - 8))(a1, ((v12 - 490836992) ^ 0x6D9D5395) - 1770000897 + ((a8 - 616913778) & (2 * (v12 - 490836992))));
}

uint64_t sub_19306C5C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  _BOOL4 v16;

  v13 = a2 + v10 + v12 + v11 - 1332206576 + 879830337;
  v14 = v8 + 961277601;
  v15 = (v14 < 0x583E8A26) ^ (v13 < 0x583E8A26);
  v16 = v13 > v14;
  if (v15)
    v16 = v13 < 0x583E8A26;
  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((2822 * !v16) ^ (a8 + 714))) - 12))();
}

uint64_t sub_19306C64C@<X0>(uint64_t result@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(result + 8);
  v9 = *(_QWORD *)(result + 48);
  v8 = *(_QWORD *)(result + 56);
  *a3 = v4 + 1271708929;
  *(_DWORD *)(v9 - 0x69E31F5FA3F67AA9) = v5;
  *(_DWORD *)(v7 - 0x4FDF9D7E77E0581FLL) = a2;
  *(_QWORD *)(v8 - 0x859F3DF63B472FFLL) = v3 + (v6 - 531637073);
  *(_DWORD *)(result + 40) = 1396931083;
  return result;
}

void fp_dh_e90ab0f5f0372836f0239d32311f0aca(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 12) - 381095207 * (a1 ^ 0x1C7D3520);
  v2 = *(_QWORD *)a1;
  v3 = v1 - 1715670589 * ((2 * (&v2 & 0x3D4DD870) - &v2 + 1118971790) ^ 0x6783C62C) - 1057;
  fp_dh_c2e95997062c29f84d70b909d1e41ecd((uint64_t)&v2);
  __asm { BR              X9 }
}

void sub_19306C7B0()
{
  uint64_t v0;
  int v1;

  *(_DWORD *)(v0 + 8) = v1 | 1;
}

void fp_dh_0fd4277157d65aa9893596af6677022f(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 544512889 * (a1 ^ 0x263BE7A2) - 2408;
  __asm { BR              X23 }
}

uint64_t sub_19306C9F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  return ((uint64_t (*)(void))(*(_QWORD *)(a15 + 8 * (((v15 - 800) | a2) ^ ((v18 == 31) * v16)))
                            - ((((((v15 - 800) | a2) + a6) & a7) + v17) ^ (((v15 - 800) | a2) + a5) & a8)))();
}

void sub_19306CA5C()
{
  JUMPOUT(0x19306C9B4);
}

uint64_t sub_19306CA64@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  v15 = v9 - a1;
  *(_DWORD *)(a3 - 0x500AE812046ECAF8) = 827098633 - v10;
  v16 = 1715670589
      * ((((v13 - 136) ^ 0x1B282D32 | 0x823BCB3) - ((v13 - 136) ^ 0x1B282D32) + (((v13 - 136) ^ 0x1B282D32) & 0xF7DC4348)) ^ 0x363A7023);
  *(_QWORD *)(v13 - 136) = v14;
  *(_DWORD *)(v13 - 128) = 534323563 - v16;
  *(_DWORD *)(v13 - 124) = (v11 - 4980) ^ v16;
  fp_dh_def31856e59dcf8456913e307afc1116(v13 - 136);
  v17 = 1779849041 * (((v13 - 136) & 0xD6C9DBB | ~((v13 - 136) | 0xD6C9DBB)) ^ 0xC74A763F);
  *(_QWORD *)(v13 - 128) = v14;
  *(_DWORD *)(v13 - 136) = ((v15 ^ 0x9875E43E)
                          - 2695424
                          + ((((v11 - 5688) | 0x1200) ^ (v11 + 1617536262) & 0x9F9655B4 ^ 0x66FFDCB4) & (2 * v15) ^ 0x46141780)) ^ v17;
  *(_DWORD *)(v13 - 120) = v11 - v17 - 3578;
  fp_dh_41ce32d0e47bca21a91ae78d44972963(v13 - 136);
  *(_DWORD *)(v13 - 128) = v11
                         - 2100007649 * ((2 * ((v13 - 136) & 0x78ED9138) - (v13 - 136) - 2028835132) ^ 0x4A1C6BC5)
                         - 2986;
  *(_QWORD *)(v13 - 136) = &STACK[0x756D22780D694554];
  *(_QWORD *)(v13 - 120) = a9;
  fp_dh_eb8a647a2fefd61712efa366e14987df(v13 - 136);
  *(_QWORD *)(v13 - 120) = v14;
  *(_QWORD *)(v13 - 136) = a9;
  *(_DWORD *)(v13 - 124) = v11
                         - 674475973 * ((((2 * (v13 - 136)) | 0x6F0575F8) - (v13 - 136) + 1216169220) ^ 0x4F15F017)
                         + 561;
  v18 = ((uint64_t (*)(uint64_t))fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v11 ^ 0x17B1])(v13 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12 + 8
                                                            * ((50 * (*(_DWORD *)(v13 - 128) > 0x12A0A89Fu)) ^ v11))
                                          - 8))(v18);
}

uint64_t sub_19306CCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 - 120) = v16;
  *(_QWORD *)(v18 - 136) = a15;
  *(_DWORD *)(v18 - 128) = v17 - 2100007649 * ((v18 - 136) ^ 0xCD0E0501) - 1637;
  v19 = fp_dh_eb8a647a2fefd61712efa366e14987df(v18 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v15
                                                      + 8
                                                      * (v17 | (((int)(a10 ^ 0xAB0A1ABC ^ ((v17 - 192) | 0x100)) > 0) << 6)))
                                          - 52 * (v17 ^ 0x112Au)
                                          + 3220))(v19);
}

uint64_t sub_19306CD74@<X0>(int a1@<W8>)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (((((((2 * a1) ^ 0x5B7720E4)
                                             + v3
                                             - 2 * (((2 * a1) ^ 0x5B7720E4) & (v3 + 8) ^ (2 * a1) & 8)) ^ v3) > v1)
                                          * (((v4 - 699499126) & 0x29B17DB9) - 1494)) ^ v4))
                            - 4))();
}

uint64_t sub_19306CDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BOOL4 v23;

  v20 = 2 * (v19 - 136);
  *(_DWORD *)(v19 - 128) = v18 - 2100007649 * (((v20 | 0x65D119D6) - (v19 - 136) - 854101227) ^ 0xFFE689EA) - 489;
  *(_QWORD *)(v19 - 120) = a16;
  *(_QWORD *)(v19 - 136) = a13;
  fp_dh_eb8a647a2fefd61712efa366e14987df(v19 - 136);
  v21 = 1779849041 * ((((v19 - 136) ^ 0x311F77A9) & 0xA90D0A4A | ~((v19 - 136) ^ 0x311F77A9 | 0xA90D0A4A)) ^ 0x52349667);
  *(_QWORD *)(v19 - 128) = v17;
  *(_DWORD *)(v19 - 120) = v18 - v21 - 1081;
  *(_DWORD *)(v19 - 136) = v21 ^ 0x3356CED7;
  fp_dh_41ce32d0e47bca21a91ae78d44972963(v19 - 136);
  *(_QWORD *)(v19 - 120) = v17;
  *(_QWORD *)(v19 - 136) = a16;
  *(_DWORD *)(v19 - 124) = v18 - 674475973 * (((v20 | 0x8438C2CA) - (v19 - 136) + 1038327451) ^ 0x3A8B2B8E) + 3058;
  v22 = v16(v19 - 136);
  v23 = *(_DWORD *)(v19 - 128) <= (v18 + 312515591);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a15 + 8 * ((v23 | (2 * v23)) ^ (v18 - 315)))
                                          - ((v18 - 1346534553) & 0x50427ACA ^ 0xAC2)))(v22);
}

uint64_t sub_19306D280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v11;
  int v12;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * ((212
                                          * (((62 * (v12 ^ 0x1142) + 2108936991) ^ a11)
                                           + (((2 * v12) ^ 0xFB679D82) & (2 * a11))
                                           - 2108940217 < 0x7FFFFFFE)) ^ v12))
                            - 8))();
}

uint64_t fp_dh_d940b09bde801e8b6a6b9e26fd79ca44(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 - 1129841929 * (((_DWORD)a1 + 816343329 - 2 * (a1 & 0x30A86921)) ^ 0xCB573FEE);
  return ((uint64_t (*)(void))(*(_QWORD *)(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v1 - 1019]
                                        + 8
                                        * (int)((3389
                                               * (*(_QWORD *)(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v1 - 1304] - 4) != 0)) ^ v1)
                                        - 12)
                            - 4))();
}

uint64_t sub_19306DC78@<X0>(int a1@<W8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(void))(v1 + 8 * (a1 ^ 0x42D)))();
}

void fp_dh_83a8a9dd45ad50d77c47cd17ffe2811a(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  _DWORD v4[2];
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 4)
     + 583213109 * (((a1 ^ 0x5A95C19 | 0xE478DBC7) - (a1 ^ 0x5A95C19) + ((a1 ^ 0x5A95C19) & 0x1B872438)) ^ 0xF474A9CD);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = 1299810607 * (v4 ^ 0x705633AC);
  v7 = v2 - 0x28E698D6A3E60C92;
  v4[1] = v3 ^ 0x7807183;
  v6 = v1 + v3 + 854;
  v5 = v2 + 0x146ECA3EFBD1DC4;
  fp_dh_1821eb674d0a7723a06c492937ff2265((uint64_t)v4);
  __asm { BR              X8 }
}

uint64_t sub_19306DDB0()
{
  _DWORD *v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;

  v6 = (v1 + 746635384) ^ (381095207
                         * ((((&v5 | 0x99013232) ^ 0xFFFFFFFE) - (~&v5 | 0x66FECDCD)) ^ 0x7A83F8ED));
  v5 = v3 + 0x296A09CEFB4FE3F7;
  result = fp_dh_3b1024d8dcc6da4f781a27a81818b542((uint64_t)&v5);
  *v0 = v2;
  return result;
}

void fp_dh_6250b4dab5b334f9925a416d23698ec9(uint64_t a1)
{
  int v1;
  BOOL v2;
  char v3;

  v1 = 583213109 * (((a1 ^ 0x1D327568 | 0xB67152ED) - ((a1 ^ 0x1D327568) & 0xB67152ED)) ^ 0xBEE60996);
  if (*(_QWORD *)(a1 + 16))
    v2 = *(_DWORD *)(a1 + 8) - v1 == 125857627;
  else
    v2 = 1;
  v3 = v2;
  __asm { BR              X8 }
}

uint64_t sub_19306DF30()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8 * (v1 - 1069)))(32, 0x101004023FF3BD5) == 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((14 * v3) ^ (v1 + 3803))) - ((v1 + 1585) ^ 0xC40)))();
}

uint64_t sub_19306DFA0()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(void))(v2 + 8 * (((v3 - 2971) * (v1 == v0)) | v3)))();
}

uint64_t sub_19306DFD8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;

  v11 = v2 - 125857628;
  v12 = v2 - 1;
  v13 = *(unsigned __int8 *)(v7 + v11);
  if (v13 == 74)
    __asm { BR              X11 }
  if (v13 == 202)
  {
    v14 = 1396931083;
    v15 = *v4;
    v16 = *((unsigned __int8 *)v4 + 28) ^ v5;
    *(_QWORD *)result = v7;
    *(_DWORD *)(result + 8) = v8;
    *(_DWORD *)(result + 12) = v12;
    if (v16 == 35)
      v17 = -2008994930;
    else
      v17 = -2008994929;
    *(_DWORD *)(result + 16) = 1728793038;
    *(_DWORD *)(result + 20) = v17;
    *(_DWORD *)(result + 24) = 1396931083;
    *(_QWORD *)(v15 - 0x124EA3304DE8C74) = a2;
  }
  else
  {
    result = (*(uint64_t (**)(void))(v6 + 8 * (v9 - 1040)))();
    v14 = 1396889060;
  }
  *((_DWORD *)v4 + 6) = v14;
  return result;
}

void fp_dh_004f10ca9dfbea41dc1810853ee79f72(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 4) ^ (2076498917 * ((a1 - 2 * (a1 & 0x7BD26E68) + 2077388392) ^ 0xC2EC7E24));
  __asm { BR              X11 }
}

uint64_t sub_19306E188()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((((v0 - 4954) | 0x960) - 3279) * (v1 != 0)) ^ (v0 + 436)))
                            - (((v0 - 580) | 0x244u) ^ 0x176CLL)))();
}

uint64_t sub_19306E1E0()
{
  int v0;
  int v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v7;

  v5 = v1 - 2313 + (*v2 ^ v0) - 1673941197;
  v7 = (*(_DWORD *)(v3 - 0x361B9961470F1C2FLL) & ((v1 + 499) ^ 0xF5C)) != 0 && v5 < 0xFFFFFFBF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((174 * v7) ^ v1)) - 4))();
}

uint64_t sub_19306E25C@<X0>(uint64_t (*a1)(int *)@<X8>, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v12 = 544512889 * ((2 * (&a4 & 0x659C7A48) - &a4 - 1704753744) ^ 0xBC586212);
  a8 = v12 ^ 0x1F8D33D1;
  a4 = v12 + v11 - 2374;
  a5 = v8;
  a7 = v9;
  a6 = 772285250 - v12;
  v13 = a1(&a4);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * ((6699
                                                        * (*(_DWORD *)(v9 - 0x361B9961470F1C2BLL) == ((v11 + 485296138) ^ 0x1CED1D1F) + ((v11 + 485296138) & 0xE312FFFC) + 1396922415)) ^ v11))
                                          - 4))(v13);
}

void sub_19306E340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;

  v5 = v3 - (((v3 << (-13 * (v4 ^ 0x74) - 99)) + 947087274) & 0x957BB58A) + 1727499930;
  *v7 = (HIBYTE(v5) ^ 0xCA) - ((2 * (HIBYTE(v5) ^ 0xCA)) & 0x94) + 74;
  v7[1] = (BYTE2(v5) ^ 0xBD) - ((2 * (BYTE2(v5) ^ 0xBD)) & 0x94) + 74;
  v7[2] = (BYTE1(v5) ^ 0xDA) - 2 * ((BYTE1(v5) ^ 0xDA) & 0x4E ^ BYTE1(v5) & 4) + 74;
  v7[3] = (v3 - ((((_BYTE)v3 << (-13 * (v4 ^ 0x74) - 99)) - 86) & 0x8A) - 102) ^ 0x8F;
  v6 = v2 - ((2 * v2) & 0x419DC6EC0C929A0) + 0x20CEE37606494D0;
  v7[4] = (HIBYTE(v6) ^ 2) - ((2 * (HIBYTE(v6) ^ 2)) & 0x94) + 74;
  v7[5] = (BYTE6(v6) ^ 0xC) + ~(2 * ((BYTE6(v6) ^ 0xC) & 0x4B ^ BYTE6(v6) & 1)) + 75;
  v7[6] = (BYTE5(v6) ^ 0xEE) - ((2 * (BYTE5(v6) ^ 0xEE)) & 0x94) + 74;
  v7[7] = (BYTE4(v6) ^ 0x37) - ((2 * (BYTE4(v6) ^ 0x37)) & 0x94) + 74;
  v7[8] = (((v2 - ((2 * (_DWORD)v2) & 0xC0C929A0) + 1617204432) >> 24) ^ 0x60)
        - 2
        * ((((v2 - ((2 * (_DWORD)v2) & 0xC0C929A0) + 1617204432) >> 24) ^ 0x60) & 0x4E ^ ((v2 - ((2 * (_DWORD)v2) & 0xC0C929A0) + 1617204432) >> 24) & 4)
        + 74;
  v7[9] = (BYTE2(v6) ^ 0x64) - ((2 * (BYTE2(v6) ^ 0x64)) & 0x94) + 74;
  v7[10] = (BYTE1(v6) ^ 0x94) - ((2 * BYTE1(v6)) & 0x94) + 74;
  v7[11] = (v2 - ((2 * v2) & 0xA0) - 48) ^ 0x9A;
  *(_DWORD *)(v0 + 16) = *(_DWORD *)(v1 - 0x361B9961470F1C2BLL);
}

void fp_dh_ae9a9354daa644ae18bdc1ba689ae019(uint64_t a1)
{
  int v1;
  _BYTE v2[128];
  int v3[6];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) ^ (544512889 * ((((2 * a1) | 0xB76A164) - a1 + 2051321678) ^ 0xA380B710));
  fp_dh_eab53e109cfc6a21b04b8de46eb16504(v2, 0, 0x80uLL);
  v3[1] = v1
        - 1194633773
        * (((v3 | 0x5CF3BE0E) - v3 + (v3 & 0xA30C41F0)) ^ 0x950AE9E9)
        + 710020205;
  fp_dh_319bdb6023f2d8b43338e15ab46e6717(v3);
  __asm { BR              X8 }
}

uint64_t sub_19306EB74()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;

  v6 = 1779849041 * (((v4 | 0xD74BC13D) + (~(_DWORD)v4 | 0x28B43EC2)) ^ 0xE292D547);
  *(_DWORD *)(v5 - 120) = v6 + v1 + 1718 - 1482602763;
  *(_QWORD *)(v5 - 112) = v3;
  *(_DWORD *)(v5 - 104) = v6 + 1674180950;
  fp_dh_d35489f795375012eef9d4e49a3485ca((_DWORD *)(v5 - 120));
  v7 = 1715670589 * (((v4 | 0xCCF8871EDED495D5) - (v4 & 0xCCF8871EDED495D5)) ^ 0x47312FDFFBE57477);
  *(_QWORD *)(v5 - 112) = v7 ^ 0x895FAF0CFB515430;
  *(_QWORD *)(v5 - 104) = v3;
  *(_DWORD *)(v5 - 120) = v1 + 1718 - v7 + 210158192;
  v8 = fp_dh_725c6309c2bcdc12fed1c503b06e1eac(v5 - 120);
  return (*(uint64_t (**)(uint64_t))(v0
                                            + 8
                                            * (((*(_DWORD *)(v5 - 116) == v2)
                                              * (((v1 + 1718) ^ 0x1BEC) + ((v1 + 1718) ^ 0xBDA))) ^ (v1 + 1718))))(v8);
}

uint64_t sub_19306EC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = 0x14208DCDCFBAED37 * *v10 + 0x753F213F2B9666F9;
  v18 = ((((v16 - 120) | 0x900C93833B59112BLL) - (v16 - 120) + ((v16 - 120) & 0x6FF36C7CC4A6EED0)) ^ 0x1BC53B421E68F089)
      * v14;
  *(_DWORD *)(v16 - 120) = v15 - v18 + v13 + 1718;
  *(_QWORD *)(v16 - 112) = v17 ^ v18;
  *(_QWORD *)(v16 - 104) = &a10;
  v19 = fp_dh_725c6309c2bcdc12fed1c503b06e1eac(v16 - 120);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v11 + 8 * ((3020 * (*(_DWORD *)(v16 - 116) == v12)) ^ v13))
                                          - 8))(v19);
}

uint64_t sub_19306ED38()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v5 = 1990363741 * ((v4 - 1815692494 - 2 * ((v4 - 120) & 0x93C6BBAA)) ^ 0xC6A0A254);
  *(_QWORD *)(v4 - 120) = v3;
  *(_DWORD *)(v4 - 112) = v5 + 549585330;
  *(_DWORD *)(v4 - 104) = v5 + 1250877472 + v2;
  v6 = fp_dh_8ba8efb2a40ded022ac6d82da1dee942(v4 - 120);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v0 + 8 * ((2517 * (*(_DWORD *)(v4 - 108) == v1)) ^ v2))
                                          - (v2 + 3633)
                                          + 5343))(v6);
}

uint64_t sub_19306EDD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;

  *(_DWORD *)(v12 - 116) = (v10 + 1327705163) ^ (2100007649
                                               * ((((v12 - 120) ^ 0xE21E2F20) & 0x2B0B2A5F | ~((v12 - 120) ^ 0xE21E2F20 | 0x2B0B2A5F)) ^ 0xFBE4FF81));
  fp_dh_a16db72130383f788a5604d3b96dfb11((_DWORD *)(v12 - 120));
  v13 = 1779849041 * ((((v12 - 120) | 0xAFF0F784) - (v12 - 120) + ((v12 - 120) & 0x500F0878)) ^ 0x9A29E3FF);
  *(_DWORD *)(v12 - 120) = 1340583881 - v13;
  *(_DWORD *)(v12 - 116) = (v10 + 2012989049) ^ v13;
  v14 = fp_dh_47e8c8f5781fca15f4e38eea352ace0d((_DWORD *)(v12 - 120));
  return ((uint64_t (*)(_DWORD *))(*(_QWORD *)(v11 + 8 * ((494 * ((a10 >> 7) ^ 1)) ^ v10))
                                           - (((v10 - 4801) | 0x490u)
                                            + (unint64_t)(v10 ^ 0x1251u))
                                           + 3424))(v14);
}

void sub_19306EED8(__int16 a1@<W8>)
{
  int v1;

  if ((v1 - 1290463344) < 2)
    __asm { BR              X8 }
}

void fp_dh_bb1365bba0a765e1e598bed25de8985b(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 + 1715670589 * ((2 * (a1 & 0xBF226F0F) - (_DWORD)a1 + 1088262384) ^ 0x65EC7152);
  __asm { BR              X9 }
}

uint64_t sub_19306F168@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(a1
                              + 8
                              * (((*(_DWORD *)(v2 - 0x361B9961470F1C2BLL) == 1396931083) * ((52 * (v1 ^ 0x334)) ^ 0x487)) ^ v1)))();
}

uint64_t sub_19306F1B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v3 = *(_DWORD *)(v1 - 0x361B9961470F1C33) - 468046007;
  v4 = *(_DWORD *)(v1 - 0x361B9961470F1C37) + 1134889396;
  v5 = v3 < 0x4B25790F;
  v6 = v3 > v4;
  if (v5 != v4 < ((((v2 - 3002) | 0x300) + 1710) ^ 0x4B2570B3u))
    v6 = v5;
  return (*(uint64_t (**)(void))(a1 + 8 * ((43 * v6) ^ v2)))();
}

uint64_t sub_19306F250@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v6 = *(_QWORD *)(v4 - 0x361B9961470F1C43);
  v7 = *(unsigned __int8 *)(v6 + (v3 - 1728793035)) ^ 0x4A;
  v8 = ((*(unsigned __int8 *)(v6 + (v3 - 1728793037)) ^ 0x4A) << (a2 + 84)) | ((*(unsigned __int8 *)(v6 + (v3 - 1728793038)) ^ 0x4A) << 24) | ((*(unsigned __int8 *)(v6 + (v3 - 1728793036)) ^ (a2 - 114)) << 8) | v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(a3
                                        + 8
                                        * ((111
                                          * (((v8 + 1863947458 - 2 * (v8 & 0x6F1994CB ^ v7 & 9) + 0x1000000) & 0xFFFFFF ^ 0x1994C2)
                                           - (v5
                                            + *(_DWORD *)(a1 + 4)) != -81987422)) ^ a2))
                            - 8))();
}

void sub_19306F32C()
{
  _DWORD *v0;

  *v0 = 1396888896;
}

uint64_t sub_19306F4E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;
  int v4;

  *(_QWORD *)(*(_QWORD *)(a1 + 16) - 0x35B9512361A50331) = 0;
  return (*(uint64_t (**)(void))(a2 + 8 * ((6980 * (*v2 == v3)) ^ v4)))();
}

uint64_t sub_19306F51C@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 17 * (a2 ^ 0x14F9u);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) - 0x35B9512361A50331) = v6 + v5 + v7 - 774;
  return (*(uint64_t (**)(void))(a3 + 8 * (int)((6980 * (*v3 == v4)) ^ v7)))();
}

void sub_19306F578(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  int v3;

  *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x4614A2D443E8D86CLL) = v3;
  *v1 = v2;
  JUMPOUT(0x19306F4D8);
}

void fp_dh_63f56f9293b9396a2ce1cf5b94ee8175(uint64_t a1)
{
  int v1;
  BOOL v2;
  int v3;

  v1 = 1715670589 * (((a1 ^ 0x8ED69A25) + 1142234902 - 2 * ((a1 ^ 0x8ED69A25) & 0x44151F16)) ^ 0xEFF26491);
  if (*(_QWORD *)a1)
    v2 = *(_DWORD *)(a1 + 20) - v1 == 1225269891;
  else
    v2 = 1;
  v3 = !v2;
  __asm { BR              X11 }
}

uint64_t sub_19306F668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a1 + 8) - 0x1A8AE14997D7D051);
  v6 = (2 * v5) & 0x7C ^ 0x54u;
  v7 = (((a3 + 296731584) & 0xEE503F6D ^ 0x1552) & v5 ^ 0xF3FB7794) + v6;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3
                                                                                 + 8
                                                                                 * ((157
                                                                                   * ((v4 - 1023646337 + v7) < 0xFFFFFFC0)) ^ a3))
                                                                     - 8))(157, v7, v6, a2);
}

uint64_t sub_19306F720(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;

  v16 = a2 + 201623619;
  if (v16 <= 0x40)
    v16 = 64;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v12
                                                      + 8
                                                      * ((((v13 - 1837) ^ (v13 - 4835)) * (v14 - a3 - v15 + v16 > 0xE)) ^ v13))
                                          - 8))(a12 - 0x1A8AE14997D7D095);
}

uint64_t sub_19306F7A8(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;

  v10 = v7 - 45;
  v11 = ((v7 + 309860946) & 0xED87D2CA) + 336;
  v12 = v9 + a3;
  v13 = v12 + a4;
  if ((v12 + a4) <= 0x40)
    v13 = a5;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((45 * ((v11 ^ (v8 - 854)) - v12 < a6 + v13)) | v10)) - 8))();
}

uint64_t sub_19306F808(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  return (*(uint64_t (**)(void))(v13
                              + 8
                              * (int)(((((v14 + 4409889) & 0xFFBCBFD7) - 3492)
                                     * (a12
                                      - 0x1A8AE14997D7D095
                                      - v12
                                      + (unint64_t)(a4 + v15 - 1) > 0xF)) ^ v14)))();
}

uint64_t sub_19306F864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W8>)
{
  int8x16_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  int8x16_t v7;
  int8x16_t v8;

  v7.i64[0] = 0x9494949494949494;
  v7.i64[1] = 0x9494949494949494;
  v8.i64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v8.i64[1] = 0x4A4A4A4A4A4A4A4ALL;
  *(int8x16_t *)(a1 + (v5 + a3)) = vaddq_s8(vsubq_s8(*v3, vandq_s8(vaddq_s8(*v3, *v3), v7)), v8);
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * (int)((113
                                               * (((((v6 + 789688340) & 0xD0EE4FBA) + 0x1FFFFF24ELL) & (a2 + 1)) != 16)) ^ (v6 + 789688340) & 0xD0EE4FBA))
                            - ((((v6 + 789688340) & 0xD0EE4FBA) - 2504) ^ 0x3D6)))();
}

void sub_19306F8F4()
{
  JUMPOUT(0x19306F8BCLL);
}

uint64_t sub_19306F8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2
                                                     + 8
                                                     * (((v4 - 862 + ((v4 - 858) | 0x20A) + 2791) * (v3 == a2)) ^ v4)))(a1, v5);
}

uint64_t sub_19306F934@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  *(_BYTE *)(a1 + (v4 + a2)) = *(_BYTE *)(v5 + v2 - 692245104)
                                           - (((v6 ^ 0xF6) + 24) & (2 * *(_BYTE *)(v5 + v2 - 692245104)))
                                           + 74;
  return (*(uint64_t (**)(void))(v3 + 8 * ((3261 * ((v7 + v4 + 1) > 0x3F)) ^ v6)))();
}

uint64_t sub_19306F994(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int32x4_t a25,int32x4_t a26,int32x4_t a27,int32x4_t a28,int a29)
{
  uint64_t v29;
  int v30;
  int v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint8x16_t v44;
  uint16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x16_t v54;
  int8x16_t v57;
  int8x16_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint64_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint8x16_t v72;
  uint8x16_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  __int32 v84;
  unint64_t v85;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  int8x16x4_t v96;
  int8x16x4_t v97;

  v95 = (_DWORD *)(a12 - 0x1A8AE14997D7D049);
  v94 = (_DWORD *)(a12 - 0x1A8AE14997D7D041);
  v90 = a12 - 0x1A8AE14997D7D035;
  v87 = (_DWORD *)(a12 - 0x1A8AE14997D7D03DLL);
  HIDWORD(v89) = HIDWORD(a9) + 263 * (v30 ^ 0x6F) - 1946655609;
  v32.n128_u64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v32.n128_u64[1] = 0x4A4A4A4A4A4A4A4ALL;
  v33 = (__n128)vdupq_n_s32(0x6F1994CBu);
  v34 = (__n128)vdupq_n_s32(0x6F1994C2u);
  HIDWORD(a24) = v31 - 1761;
  v35 = (v31 - 1791);
  v36 = (__n128)vdupq_n_s32(0x6F1994D2u);
  HIDWORD(v92) = 2493 * (v31 ^ 0x1387);
  HIDWORD(a15) = v31;
  LODWORD(v89) = HIDWORD(v92) + 1943700517;
  v37.n128_u64[0] = 0x9494949494949494;
  v37.n128_u64[1] = 0x9494949494949494;
  v88 = a12 - 0x1A8AE14997D7D04DLL;
  v93 = (_DWORD *)(a12 - 0x1A8AE14997D7D045);
  v38 = *(_QWORD *)(v29 + 8 * v30);
  v39 = *(_DWORD *)(a12 - 0x1A8AE14997D7D049);
  v40 = *(_DWORD *)(a12 - 0x1A8AE14997D7D045);
  v41 = v40;
  v42 = *(_DWORD *)(a12 - 0x1A8AE14997D7D041);
  v43 = *(unsigned __int8 *)(a12 - 0x1A8AE14997D7D035) ^ 0xEF;
  if (v43 == 2)
  {
    HIDWORD(a18) = *(_DWORD *)(a12 - 0x1A8AE14997D7D04DLL);
    v91 = __PAIR64__(v40, v39);
    LODWORD(v92) = *(_DWORD *)(a12 - 0x1A8AE14997D7D041);
    v97 = vld4q_s8(a1);
    v68 = *v87;
    LODWORD(a11) = *v87;
    v69 = (uint8x16_t)veorq_s8(v97.val[0], (int8x16_t)v32);
    v70 = vmovl_u8(*(uint8x8_t *)v69.i8);
    v71 = vmovl_high_u8(v69);
    v72 = (uint8x16_t)veorq_s8(v97.val[1], (int8x16_t)v32);
    _Q22 = vmovl_u8(*(uint8x8_t *)v72.i8);
    _Q21 = vmovl_high_u8(v72);
    __asm
    {
      SHLL2           V23.4S, V21.8H, #0x10
      SHLL2           V24.4S, V22.8H, #0x10
    }
    v77 = (uint8x16_t)veorq_s8(v97.val[2], (int8x16_t)v32);
    v78 = vmovl_high_u8(v77);
    v79 = vmovl_u8(*(uint8x8_t *)v77.i8);
    v97.val[0] = veorq_s8(v97.val[3], (int8x16_t)v32);
    v97.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v97.val[0]);
    v97.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v97.val[1]);
    v97.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v97.val[1].i8);
    v97.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v97.val[0].i8);
    v97.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v97.val[0]);
    v97.val[0] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v97.val[0].i8);
    v80 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q22.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v79.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v70.i8), 0x18uLL)), v97.val[0]);
    v81 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q24, (int8x16_t)vshll_high_n_u16(v79, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v70), 0x18uLL)), v97.val[3]);
    v82 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q21.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v78.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v71.i8), 0x18uLL)), v97.val[1]);
    v83 = (int32x4_t)vorrq_s8(vorrq_s8(vorrq_s8(_Q23, (int8x16_t)vshll_high_n_u16(v78, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v71), 0x18uLL)), v97.val[2]);
    v97.val[0] = veorq_s8(vandq_s8((int8x16_t)v80, (int8x16_t)v33), (int8x16_t)(*(_OWORD *)v97.val & __PAIR128__(0xFFFFFF09FFFFFF09, 0xFFFFFF09FFFFFF09)));
    v97.val[3] = veorq_s8(vandq_s8((int8x16_t)v81, (int8x16_t)v33), (int8x16_t)(*(_OWORD *)&v97.val[3] & __PAIR128__(0xFFFFFF09FFFFFF09, 0xFFFFFF09FFFFFF09)));
    v97.val[1] = veorq_s8(vandq_s8((int8x16_t)v82, (int8x16_t)v33), (int8x16_t)(*(_OWORD *)&v97.val[1] & __PAIR128__(0xFFFFFF09FFFFFF09, 0xFFFFFF09FFFFFF09)));
    v97.val[2] = veorq_s8(vandq_s8((int8x16_t)v83, (int8x16_t)v33), (int8x16_t)(*(_OWORD *)&v97.val[2] & __PAIR128__(0xFFFFFF09FFFFFF09, 0xFFFFFF09FFFFFF09)));
    a27 = vaddq_s32(vsubq_s32(v82, vaddq_s32((int32x4_t)v97.val[1], (int32x4_t)v97.val[1])), (int32x4_t)v34);
    a28 = vaddq_s32(vsubq_s32(v83, vaddq_s32((int32x4_t)v97.val[2], (int32x4_t)v97.val[2])), (int32x4_t)v34);
    a25 = vaddq_s32(vsubq_s32(v80, vaddq_s32((int32x4_t)v97.val[0], (int32x4_t)v97.val[0])), (int32x4_t)v34);
    a26 = vaddq_s32(vsubq_s32(v81, vaddq_s32((int32x4_t)v97.val[3], (int32x4_t)v97.val[3])), (int32x4_t)v34);
    v84 = a27.i32[0] ^ a28.i32[1];
    HIDWORD(v85) = a25.i32[0] ^ *((_DWORD *)&a25 + v35 - 3204) ^ (v84 + 1863947458 - ((2 * v84) & 0xDE332984)) ^ 0x6F1994C2;
    LODWORD(v85) = a25.i32[0] ^ *((_DWORD *)&a25 + v35 - 3204) ^ (v84 + 1863947458 - ((2 * v84) & 0xDE332984));
    a29 = (v85 >> 31) + 1863947458 - ((2 * (v85 >> 31)) & 0xDE332984);
    return (*(uint64_t (**)(const char *, uint64_t, uint64_t, uint64_t, uint64_t, int32x4_t *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *, _DWORD *, _DWORD *, uint64_t))(v29 + 8 * (HIDWORD(a24) | 0x303)))(a1, v41, -397933977, 397933993, v68, &a25, 3593829236, a25.u32[0], a9, a2, a11, a12, v87, v88, a15, v89, v90, a18, v91,
             v92,
             v93,
             v94,
             v95,
             a24);
  }
  else if (v43 == 1)
  {
    HIDWORD(a18) = *(_DWORD *)(a12 - 0x1A8AE14997D7D04DLL);
    LODWORD(v92) = *(_DWORD *)(a12 - 0x1A8AE14997D7D041);
    v96 = vld4q_s8(a1);
    v44 = (uint8x16_t)veorq_s8(v96.val[0], (int8x16_t)v32);
    v45 = vmovl_u8(*(uint8x8_t *)v44.i8);
    v46 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v45.i8);
    v47 = (int8x16_t)vmovl_high_u16(v45);
    v48 = vmovl_high_u8(v44);
    v49 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v48.i8);
    v50 = (int8x16_t)vmovl_high_u16(v48);
    v51 = (uint8x16_t)veorq_s8(v96.val[1], (int8x16_t)v32);
    v52 = vmovl_high_u8(v51);
    v53 = vmovl_u8(*(uint8x8_t *)v51.i8);
    v54 = (uint8x16_t)veorq_s8(v96.val[2], (int8x16_t)v32);
    _Q26 = (int8x16_t)vmovl_high_u8(v54);
    _Q25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v54.i8);
    v57 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q25.i8, 0x10uLL);
    __asm { SHLL2           V25.4S, V25.8H, #0x10 }
    v62 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q26.i8, 0x10uLL);
    __asm { SHLL2           V26.4S, V26.8H, #0x10 }
    v96.val[0] = veorq_s8(v96.val[3], (int8x16_t)v32);
    v96.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v96.val[0]);
    v96.val[2] = (int8x16_t)vmovl_high_u16((uint16x8_t)v96.val[1]);
    v96.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v96.val[0].i8);
    v96.val[3] = (int8x16_t)vmovl_high_u16((uint16x8_t)v96.val[0]);
    v96.val[0] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v96.val[0].i8), 0x18uLL), v57), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v53.i8, 8uLL), v46));
    v96.val[3] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v96.val[3], 0x18uLL), _Q25), vorrq_s8((int8x16_t)vshll_high_n_u16(v53, 8uLL), v47));
    v96.val[1] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v96.val[1].i8), 0x18uLL), v62), vorrq_s8((int8x16_t)vshll_n_u16(*(uint16x4_t *)v52.i8, 8uLL), v49));
    v96.val[2] = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v96.val[2], 0x18uLL), _Q26), vorrq_s8((int8x16_t)vshll_high_n_u16(v52, 8uLL), v50));
    v63 = (int32x4_t)veorq_s8(vandq_s8(v96.val[0], (int8x16_t)v36), (int8x16_t)(*(_OWORD *)&v46 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v64 = (int32x4_t)veorq_s8(vandq_s8(v96.val[3], (int8x16_t)v36), (int8x16_t)(*(_OWORD *)&v47 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v65 = (int32x4_t)veorq_s8(vandq_s8(v96.val[1], (int8x16_t)v36), (int8x16_t)(*(_OWORD *)&v49 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    v66 = (int32x4_t)veorq_s8(vandq_s8(v96.val[2], (int8x16_t)v36), (int8x16_t)(*(_OWORD *)&v50 & __PAIR128__(0xFFFFFF10FFFFFF10, 0xFFFFFF10FFFFFF10)));
    a27 = vaddq_s32(vsubq_s32((int32x4_t)v96.val[1], vaddq_s32(v65, v65)), (int32x4_t)v34);
    a28 = vaddq_s32(vsubq_s32((int32x4_t)v96.val[2], vaddq_s32(v66, v66)), (int32x4_t)v34);
    a25 = vaddq_s32(vsubq_s32((int32x4_t)v96.val[0], vaddq_s32(v63, v63)), (int32x4_t)v34);
    a26 = vaddq_s32(vsubq_s32((int32x4_t)v96.val[3], vaddq_s32(v64, v64)), (int32x4_t)v34);
    return ((uint64_t (*)(const char *, _QWORD, uint64_t, uint64_t, uint64_t, int32x4_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, _DWORD *, _DWORD *, _DWORD *, uint64_t))(*(_QWORD *)(v29 + 8 * (v31 - 1541)) - 8))(a1, v40, -397933977, 397933993, fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[(v31 - 1541) ^ 0xDD5] - 4, &a25, 3593829236, fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v31 - 4906] - 8, a9, a2, v38, a12, v87, v88, a15, v89, v90, a18, __PAIR64__(v40, v39),
             v92,
             v93,
             v94,
             v95,
             a24);
  }
  else
  {
    *(_DWORD *)(a12 - 0x1A8AE14997D7D04DLL) = 2 * (*(_DWORD *)(a12 - 0x1A8AE14997D7D04DLL) ^ 0x5659F233)
                                            + 1448735283
                                            - ((4 * (*(_DWORD *)(a12 - 0x1A8AE14997D7D04DLL) ^ 0x5659F233)) & 0xACB3E466);
    *v95 = 2 * (v39 ^ 0x5659F233) + 1448735283 - ((4 * (v39 ^ 0x5659F233)) & 0xACB3E466);
    *v93 = 2 * (v40 ^ 0x5659F233) + 1448735283 - ((4 * (v40 ^ 0x5659F233)) & 0xACB3E466);
    *v94 = 2 * (v42 ^ 0x5659F233) + 1448735283 - ((4 * (v42 ^ 0x5659F233)) & 0xACB3E466);
    return ((uint64_t (*)(__n128, __n128, __n128, __n128, __n128))(v38 - 12))(v32, v33, v34, v36, v37);
  }
}

uint64_t sub_1930705E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, unsigned int a17)
{
  uint64_t v17;
  int v18;
  unsigned int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;

  v19 = (a16 & 0x8C256DEF ^ 0xABBDCDD0) + a10;
  v20 = v19 < 0xD5009A8F;
  v21 = v19 > a17;
  if (a17 < 0xD5009A8F != v20)
    v22 = v20;
  else
    v22 = v21;
  return ((uint64_t (*)(void))(*(_QWORD *)(v17 + 8 * ((164 * !v22) ^ (v18 - 326))) - 8))();
}

uint64_t sub_193070664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  uint64_t v21;
  int v22;
  int v23;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 + 8 * ((1516 * (((a21 - 498579405) & 0x1DB7B7D7 ^ 0xD6BD3E4A) + v23 >= v23 + v22)) ^ a21)) - 12))(a1, a2, a3, a4, 148, a6, a7, 7247);
}

uint64_t sub_1930706D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21)
{
  uint64_t v21;
  uint64_t v22;
  int v23;

  return ((uint64_t (*)(void))(*(_QWORD *)(v22
                                        + 8
                                        * ((199
                                          * (((a21 - 121) ^ (a12
                                                                            - 0x1A8AE14997D7D095
                                                                            - v21
                                                                            - (unint64_t)(((a21 + 11) ^ 0xD6BD3E15)
                                                                                               + v23) < 0x10)) & 1)) ^ a21))
                            - 12))();
}

uint64_t sub_193070740(int8x16_t *a1, int8x16_t a2, double a3, double a4, double a5, int8x16_t a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  *a1 = vaddq_s8(vsubq_s8(*(int8x16_t *)(v6 + (v10 + v9)), vandq_s8(vaddq_s8(*(int8x16_t *)(v6 + (v10 + v9)), *(int8x16_t *)(v6 + (v10 + v9))), a6)), a2);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((v8 | 0x1084) - 1681)) - 12))();
}

uint64_t sub_1930707A4@<X0>(uint64_t a1@<X0>, char a2@<W4>, int a3@<W7>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  char v9;
  int v10;

  *(_BYTE *)(a1 + a4) = *(_BYTE *)(v4 + (v10 + v8))
                      - ((*(_BYTE *)(v4 + (v10 + v8)) << ((v6 + v7) ^ v9)) & a2)
                      + 74;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * (((a4 != 63) * a3) ^ (v6 - 1660))) - 12))();
}

uint64_t sub_1930707F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  uint64_t v10;
  int v11;
  int v12;
  _BOOL4 v13;

  v13 = v12 - 1527128991 < (a10 - 2060153778);
  if ((v12 - 1527128991) < 0xCE3CAED1 != a10 - 2060153778 < ((v11 + 942018152) ^ 0x38260072u) - 834888884)
    v13 = a10 - 2060153778 < ((v11 + 942018152) ^ 0x38260072u) - 834888884;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * (int)((v13 * (((v11 + 942018152) & 0xC7D9FFE8) - 5054)) ^ v11))
                            - 12))();
}

uint64_t sub_1930708A4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _BOOL4 v17;
  unsigned int v18;
  int v19;
  _BOOL4 v20;

  v15 = a1 - 3665;
  v16 = a5 - 0x1A8AE14997D7D095;
  v17 = v7 < v11;
  *(_BYTE *)(v16 + (v8 + v12)) = v15
                                             - 10
                                             + *(_BYTE *)(v5 + (v14 + v13))
                                             - ((2 * *(_BYTE *)(v5 + (v14 + v13))) & 0x94)
                                             - 59;
  v18 = v14 + 1 + v10;
  v19 = v17 ^ (v18 < v9);
  v20 = v18 < v7;
  if (!v19)
    v17 = v20;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((5743 * v17) ^ v15)) - 12))();
}

void sub_193070928()
{
  JUMPOUT(0x1930708C4);
}

uint64_t sub_193070934@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;

  v4 = 1779849041 * ((((v3 - 120) | 0x1126732D) - ((v3 - 120) & 0x1126732D)) ^ 0x24FF6756);
  *(_DWORD *)(v3 - 120) = v4 ^ (v2 - 519616640);
  *(_QWORD *)(v3 - 112) = a1;
  *(_DWORD *)(v3 - 104) = (v1 - 2878) ^ v4;
  return fp_dh_4a1afbed36653809e8b05df03613ca9b(v3 - 120);
}

void fp_dh_430f9780c0e44c9445017bcb8751f227(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 16) ^ (1779849041 * ((a1 - 2 * (a1 & 0x5FB972C6) + 1605989062) ^ 0x6A6066BD));
  __asm { BR              X10 }
}

uint64_t sub_193070A94()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  return (*(uint64_t (**)(void))(v2 + 8 * ((5141 * (*(_DWORD *)(v1 + 12) - v0 == 1696624432)) ^ v3)))();
}

uint64_t sub_193070AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  unsigned int v17;
  uint64_t v18;

  v16 = *(_BYTE *)(v13 - 0x1CB957B93E2AFFCALL);
  v17 = 583213109
      * (((&a11 | 0x3AD60366) - &a11 + (&a11 & 0xC529FC98)) ^ 0x2F732D75);
  a12 = v15 - v17 - 77;
  a11 = (v16 ^ 0x1E) - v17 + ((2 * v16) & 0xDF ^ 0xC2) - 108;
  v18 = fp_dh_9a08bbc45dccb57f7e84a339ba9023a3((uint64_t)&a11);
  return (*(uint64_t (**)(uint64_t))(v14
                                            + 8
                                            * ((3963 * (a13 == ((v15 + 611371009) & 0xDB8F37FB ^ 0x53437DF8))) ^ v15)))(v18);
}

uint64_t sub_193070B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  _BOOL4 v20;

  v17 = *(_BYTE *)(v13 - 0x1CB957B93E2AFFCBLL);
  v18 = 1990363741 * (((~&a11 | 0x480ADD62) + (&a11 | 0xB7F5229D)) ^ 0xE2933B62);
  a12 = v16 - v18 - 1661092567;
  a11 = v18 + (v17 ^ 0x46) + (((v16 + 3) ^ 0x99) & (2 * v17) ^ 0x62) - 1;
  v19 = fp_dh_0b8f1f0facd30ad5da359b4b20aa33af((uint64_t)&a11);
  v20 = a13 != ((v16 + 200755212) & 0xF408B7F6) + v15;
  return (*(uint64_t (**)(uint64_t))(v14 + 8 * ((v20 | (4 * v20)) ^ v16)))(v19);
}

uint64_t sub_193070C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, int a12, int a13)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  char v18;
  unsigned int v19;
  uint64_t v20;

  v18 = *(_BYTE *)(v13 - 0x1CB957B93E2AFFCCLL);
  v19 = (((&a11 | 0x4FC91D08) - (&a11 | 0xB036E2F7) - 1338580233) ^ 0x5A6C331B) * v16;
  a12 = v17 - v19 + 492702183;
  a11 = (v18 ^ 0xE) - v19 + ((2 * v18) ^ 0xE2) - 6;
  v20 = fp_dh_900a947dd65265412742be308d4357c9((uint64_t)&a11);
  return (*(uint64_t (**)(uint64_t))(v14 + 8 * ((2311 * (a13 == v15 + 2038)) ^ v17)))(v20);
}

unsigned __int8 *sub_193070D0C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  unsigned __int8 *result;
  unsigned __int8 v5[4];
  int v6;
  int v7;

  v5[0] = ((*(_BYTE *)(v1 - 0x1CB957B93E2AFFCDLL) ^ 0x8E) + (v3 ^ (2 * *(_BYTE *)(v1 - 0x1CB957B93E2AFFCDLL))) + 77) ^ (47 * ((v5 - 2 * ((unint64_t)v5 & 0xA9156807) + 7) ^ 0xAB));
  v6 = v2
     - 1299810607 * ((v5 - 2 * ((unint64_t)v5 & 0xA9156807) - 1458214905) ^ 0xD9435BAB)
     - 891000458;
  result = fp_dh_9d5ba80fbaab9c9d97d7296d082df2ce(v5);
  *(_DWORD *)(v0 + 8) = v7;
  return result;
}

void fp_dh_9dfd01d712e137d137c357c8dfff5e9f(uint64_t a1)
{
  int v1;

  v1 = 2076498917 * (a1 ^ 0xB93E104C);
  __asm { BR              X9 }
}

uint64_t sub_193070E68@<X0>(uint64_t a1@<X8>)
{
  unsigned int v1;
  int v2;

  return (*(uint64_t (**)(void))(a1 + 8 * (((v2 == ((v1 - 2407) | 0x901) + 762637264) * ((v1 + 593) ^ 0x100D)) ^ v1)))();
}

uint64_t sub_193070EC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 + 8 * (v2 ^ 0x1538)) - 4))(a1, 3528500607, 2950033632);
}

uint64_t sub_193070FF0@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  int v5;

  return (*(uint64_t (**)(void))(a3 + 8 * (((v4 == v3 + ((v5 - 3844) | a1) - 191 + 2310) * a2) | v5)))();
}

uint64_t sub_19307101C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(a1 + 8 * ((((v2 ^ 0x90A) + 544) * (v3 != v1)) ^ v2)) - 4))();
}

uint64_t sub_193071044@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = 227 * (v5 ^ 0x448);
  v7 = v2 + v1;
  v8 = (v6 ^ 0xD4C) + v2;
  *(_DWORD *)(*(_QWORD *)(v3 - 0x756D22780D69450CLL) + 4 * v7 - 0x41DE79666ECE2E74) = v4;
  *(_DWORD *)(v3 - 0x756D22780D694510) = v8;
  v9 = v8 + v1;
  if (v8 + v1 < 0)
    v9 = -v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(a1
                                        + 8
                                        * (((v1
                                           + (v9 ^ 0x2BEFF75E)
                                           - 145293398
                                           + ((v9 << ((v6 + 87) ^ 0xA5)) & 0x57DFEEBC) > 0)
                                          * (((v6 - 794975742) & 0x2F625DFD) + ((v6 - 683) | 0x41) - 3203)) ^ (v6 + 1367)))
                            - 4))();
}

uint64_t sub_193071174@<X0>(int a1@<W3>, uint64_t a2@<X5>, int a3@<W6>, unint64_t a4@<X7>, uint64_t a5@<X8>)
{
  int v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  int v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(a5
                                        + 8
                                        * (((*(_DWORD *)(*v6 + 4 * (v9 - 1) + a2) != v5) * a3) ^ v8))
                            - ((v8 + a1) & (v7 + 4065) ^ a4)))();
}

void sub_1930711B0()
{
  JUMPOUT(0x19307113CLL);
}

_DWORD *sub_1930711C4(_DWORD *result)
{
  *result = -1019200316;
  return result;
}

void OflR7BMjGok3A7mYQFt9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X9 }
}

uint64_t sub_1930712A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  return (*(uint64_t (**)(void))(v7 + 8 * ((782 * (a7 != 0)) ^ 0x87F)))();
}

uint64_t sub_1930712C8@<X0>(uint64_t a1@<X3>, int a2@<W8>)
{
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * ((a2 + v2 + 2329) | (35 * (a1 == 0)))))();
}

uint64_t sub_1930712EC@<X0>(_QWORD *a1@<X3>, uint64_t a2@<X4>, int a3@<W8>)
{
  int v3;
  uint64_t v4;

  *a1 = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * ((a3 + v3 + 1374) ^ (975 * (a2 == 0)))) - 12))();
}

uint64_t sub_193071318@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13)
{
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;

  v15 = (v13 + 744755567) & 0x5499FFB7;
  v16 = a1 + v13 + 2882;
  a13 = v13
      - 1194633773 * ((&a12 + 1034958200 - 2 * ((unint64_t)&a12 & 0x3DB03578)) ^ 0xF449629F)
      - 1420816232;
  v17 = fp_dh_319bdb6023f2d8b43338e15ab46e6717(&a12);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v14 + 8 * (((a12 == 1396931083) * (v15 - 3646)) ^ v16)) - 4))(v17);
}

uint64_t sub_193071438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, unint64_t *a20,unsigned int a21)
{
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  a21 = v23 + 1715670589 * (&a19 ^ 0x2531E1A2) - 2753;
  a20 = &STACK[0x2AE6FD99665E3413];
  fp_dh_b8f7f0c268b22e5dc7f380e39a6f3ee4((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8 * ((115 * (a19 != v21)) ^ v23)) - 3 * (v23 ^ 0x10F9) + 2525))(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12);
}

uint64_t sub_1930714B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22)
{
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;

  v30 = 381095207 * (((v29 | 0xE529290101FA583BLL) - (v29 & 0xE529290101FA583BLL)) ^ 0x47206FB11D876D1BLL);
  a21 = (((2 * v27) & 0xAAFF776B599F76FELL) + 0x7BFD564FFB7FFFE1 + (((v22 ^ 0x1A20u) - 0x2A80444A53305842) ^ v27)) ^ v30;
  a19 = a16;
  HIDWORD(a20) = v30 + v22 - 1273;
  ((void (*)(uint64_t *))(*(_QWORD *)(v24 + 8 * (v22 - 2195)) - 4))(&a19);
  v31 = 2076498917 * (((v29 | 0xA1E682AD) + (~(_DWORD)v29 | 0x5E197D52)) ^ 0x18D892E0);
  a20 = v25;
  a22 = a16;
  LODWORD(a19) = v31 ^ ((v26 ^ 0x7FCE7CBF) - 470298772 + ((2 * v26) & 0xFF9CF97E));
  HIDWORD(a19) = (v22 + 3459) ^ v31;
  v32 = (*(uint64_t (**)(uint64_t *))(v24 + 8 * (v22 ^ 0xB15)))(&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v28 + 8 * ((7056 * ((_DWORD)a21 == v23)) ^ v22)) - 4))(v32);
}

uint64_t sub_19307162C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,uint64_t a21,unsigned int a22,unint64_t *a23,unsigned int a24)
{
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  v26 = 544512889 * ((2 * (&a19 & 0x661F7870) - &a19 - 1713338481) ^ 0xBFDB602D);
  a22 = 260146304 - v26;
  a23 = &STACK[0x16A78FCC143D0FB1];
  a24 = v26 - 479523303;
  a20 = v24 - v26 - 897455211;
  a21 = a16;
  v27 = fp_dh_f54151dc8d4759a5df06023817f471a8((uint64_t)&a19);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v25
                                                      + 8
                                                      * ((4434
                                                        * (a19 == ((v24 + 1540010498) & 0xA43557DD) + (v24 ^ 0x53436FAB))) ^ v24))
                                          - 4))(v27);
}

uint64_t sub_193071718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, int a20,int *a21,uint64_t a22)
{
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  a21 = &a19;
  a22 = a17;
  a20 = (v22 ^ 0x1049)
      + 583213109 * ((&a20 + 830209258 - 2 * ((unint64_t)&a20 & 0x317BFCEA)) ^ 0x24DED2F9)
      - 3065;
  v25 = ((uint64_t (*)(int *))(*(_QWORD *)(v23 + 8 * (v22 ^ 0x8FC)) - 8))(&a20);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24
                                                      + 8
                                                      * ((((v22 ^ 0x4C ^ (a19 == 0)) & 1)
                                                        * ((v22 ^ 0x7DB) - 3544)) ^ v22 ^ 0x1049))
                                          - 4))(v25);
}

uint64_t sub_1930717C4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, unsigned int a13, uint64_t a14)
{
  uint64_t v14;
  int v15;
  uint64_t v16;

  a14 = a1;
  a13 = v15
      - 1779849041 * ((525985368 - (&a12 | 0x1F59E658) + (&a12 | 0xE0A619A7)) ^ 0xD57F0DDC)
      + 1168;
  v16 = fp_dh_a3f856c06909c1c78375f5adc976da00((uint64_t)&a12);
  return (*(uint64_t (**)(uint64_t))(v14 + 8 * (((a12 == 1396931083) * (v15 ^ 0xE09)) ^ v15)))(v16);
}

uint64_t sub_193071850()
{
  void (*v0)(uint64_t *);
  int v1;
  int v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = 9 * (v1 ^ 0x8B4);
  v8 = v5;
  v9 = v2 - 1129841929 * (&v7 ^ 0xFBFF56CF) + 798;
  v0(&v7);
  v9 = ((v2 + 1888) | 0x280)
     - 1129841929 * ((&v7 - 55137807 - 2 * ((unint64_t)&v7 & 0xFCB6A9F1)) ^ 0x749FF3E)
     - 1730;
  v8 = v4;
  v0(&v7);
  return (v6 ^ 0x5BCFFA9B) - 143425680 + ((v2 ^ 0xB79FFCD6) & (2 * v6)) - 1396931083;
}

void fp_dh_78bc1dabc7a3bb0c5ba7f39868713f0b(uint64_t a1)
{
  int v1;

  v1 = 2076498917 * (a1 ^ 0xB93E104C);
  __asm { BR              X11 }
}

uint64_t sub_193072348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  _BYTE *v14;

  v11 = v8 + 37;
  v12 = (v8 + 37) ^ 0xD5;
  v13 = (v8 + 37) ^ 0xF39;
  v14 = *(_BYTE **)(a6 + 16);
  *(_BYTE *)(v10 - 160) = *(_BYTE *)(*(_QWORD *)(v9 + 8 * v13)
                                   - 4
                                   + (((-1729820329
                                      * ((-1729820329 * (_DWORD)v14) ^ ((-1729820329 * (_DWORD)v14) >> 16))) >> v12) & 0xFF0)) ^ *v14 ^ (87 * ((87 * (_BYTE)v14) ^ ((-1729820329 * (_DWORD)v14) >> 16)));
  return ((uint64_t (*)(void))(*(_QWORD *)(a8 + 8 * v11) - 4))();
}

void sub_193072400()
{
  JUMPOUT(0x1930723A4);
}

uint64_t sub_193072408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8
                                                                        + 8
                                                                        * ((((2084 * (v8 ^ 0x33C)) ^ 0x101E)
                                                                          * (v10 + (v9 ^ 0xFEF3FBFE) == -17564674)) ^ v8))
                                                            - 8))(a1, a2, a3);
}

uint64_t sub_193072470@<X0>(uint64_t a1@<X5>, uint64_t a2@<X7>, int a3@<W8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  _BOOL4 v9;
  _BYTE *v10;

  v9 = v7 < v6;
  v10 = (_BYTE *)(*(_QWORD *)(a1 + 40) + (v8 - 1519969931));
  *(_BYTE *)(v5 + (v8 - 1519969931)) = *(_BYTE *)(v4
                                                              + ((((((_DWORD)v10 * a3) ^ (((_DWORD)v10 * a3) >> 16))
                                                                 * a3) >> ((9 * (v3 ^ 0x36)) ^ 0x5C)) & 0xFF0 | ((_BYTE)v8 + 117) & 0xF)) ^ *v10 ^ (87 * (((_BYTE)v10 * a3) ^ (((_DWORD)v10 * a3) >> 16)));
  if (v9 == v8 - 477414623 < v6)
    v9 = v8 - 477414623 < v7;
  return ((uint64_t (*)(void))(*(_QWORD *)(a2 + 8 * ((86 * !v9) ^ v3)) - 8))();
}

uint64_t sub_193072520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 8 * (v9 ^ (1845 * (v10 - 160 == v8))))
                                                            - ((v9 + 835555127) & 0xCE326595 ^ 0x511)))(a1, a2, a3);
}

uint64_t sub_193072568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _BYTE *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v17;

  v14 = v11 ^ 0x155D;
  *(_BYTE *)(v13 - 144) = *v10;
  *(_BYTE *)(v13 - 143) = v10[1];
  *(_BYTE *)(v13 - 142) = v10[2];
  *(_BYTE *)(v13 - 141) = v10[3];
  *(_BYTE *)(v13 - 140) = v10[4];
  *(_BYTE *)(v13 - 139) = v10[5];
  *(_BYTE *)(v13 - 138) = v10[6];
  *(_BYTE *)(v13 - 137) = v10[7];
  *(_BYTE *)(v13 - 136) = v10[8];
  *(_BYTE *)(v13 - 135) = v10[9];
  *(_BYTE *)(v13 - 134) = v10[10];
  *(_BYTE *)(v13 - 133) = v10[11];
  *(_BYTE *)(v13 - 132) = v10[12];
  *(_BYTE *)(v13 - 131) = v10[13];
  *(_BYTE *)(v13 - 130) = v10[14];
  *(_BYTE *)(v13 - 129) = v10[15];
  if (v10)
    v15 = v13 == 144;
  else
    v15 = 1;
  v17 = !v15 && *(_QWORD *)(v12 + 8 * (v11 ^ 0x1206)) != 4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 8 * ((3388 * v17) ^ v14)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_19307265C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12)
{
  int v12;
  int v13;
  int v14;
  _BOOL4 v16;

  v14 = v13 + 1396;
  v16 = (((_BYTE)a12 + ((v14 - 121) | 0x4A) - 88) & 0xF) == 0 && a12 != v12;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 8 * (((2 * v16) | (32 * v16)) ^ v14)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1930726A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned __int8 v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  unsigned int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  v30 = *(_QWORD *)(v28 + 8 * ((v27 - 1923) ^ 0x3E1)) - 4;
  v31 = *(_QWORD *)(v28 + 8 * ((v27 - 1923) ^ 0x13A)) - 12;
  v32 = (v27 - 1923) ^ 0x613;
  v33 = *(_QWORD *)(v28 + 8 * (v27 - 2352)) - 12;
  v34 = *(_QWORD *)(v28 + 8 * (v27 - 2031)) - 4;
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v25[9] ^ 0x52));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  v36 = ((*(unsigned __int8 *)(v31 + (v25[10] ^ 0xF5)) ^ 0x25) << 8) & 0xFF00FFFF | (((v35 >> 26) ^ 0x3D) << 16);
  v37 = (*(_BYTE *)(v33 + ((v27 + 125) ^ 0x13 ^ v25[15] ^ 7u)) + 121) ^ 0x55;
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v25[5] ^ 0x4BLL));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  v38 = ((*(unsigned __int8 *)(v30 + (v25[4] ^ 0x61)) ^ 3) << 24) | (((v35 >> 26) ^ 0xDE) << 16) | ((*(unsigned __int8 *)(v31 + (v25[6] ^ 0xF7)) ^ 0xF0) << 8) | (*(_BYTE *)(v33 + (v25[7] ^ 0x39)) + 121) ^ 0x8D;
  v39 = v38 - 2 * (v38 & 0x54BF5E75 ^ ((*(_BYTE *)(v33 + (v25[7] ^ 0x39)) + 121) ^ 0x8D) & 4);
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v25[13] ^ 0xE3));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  v40 = ((*(unsigned __int8 *)(v30 + (v25[12] ^ 0x82)) ^ 0xFFFFFFDF) << 24) | (((v35 >> 26) ^ 0xE9) << 16) | v37 | ((*(unsigned __int8 *)(v31 + (v25[14] ^ 0x90)) ^ 3) << 8);
  v185 = v34;
  v186 = v33;
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v25[1] ^ 0xEBLL));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  v41 = ((*(unsigned __int8 *)(v31 + (v25[2] ^ 0xA1)) ^ 0xCF) << 8) & 0xFF00FF00 | ((*(unsigned __int8 *)(v30 + (*v25 ^ 0xBELL)) ^ 0x89) << 24) | (*(_BYTE *)(v33 + (v25[3] ^ 0xB4)) + 121) | (((v35 >> 26) ^ 0xCB) << 16);
  *(_DWORD *)(v29 - 172) = (v36 & 0xFFFFFF00 | ((*(unsigned __int8 *)(v30 + (v25[8] ^ 0xA2)) ^ 0x6A) << 24) | (*(_BYTE *)(v33 + (v25[11] ^ 0xD6)) + 121)) ^ 0xFB9E6FA;
  *(_DWORD *)(v29 - 164) = v41 ^ 0x17534CDF;
  *(_DWORD *)(v29 - 168) = v39 - 725655951;
  *(_DWORD *)(v29 - 176) = v40 - 2 * (v40 & 0x53A16F5F ^ v37 & 0xE) + 1403088721;
  HIDWORD(a12) = a12 + 17564674;
  HIDWORD(v196) = v32;
  LODWORD(v188) = 0;
  *(_QWORD *)(v29 - 184) = 1;
  HIDWORD(v195) = 2 * v32;
  HIDWORD(v188) = (2 * v32) ^ 0x70;
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v26[1] ^ (BYTE4(v188) - 1)));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  LOBYTE(v36) = v35 >> 26;
  *(_QWORD *)(v29 - 216) = 4;
  v42 = v26[4] ^ 0x27;
  *(_QWORD *)(v29 - 192) = 6;
  LODWORD(v42) = (*(unsigned __int8 *)(v30 + v42) ^ 0x5D) << 24;
  v43 = *(unsigned __int8 *)(v31 + (v26[6] ^ 0x41)) ^ 0x59;
  *(_QWORD *)(v29 - 208) = 15;
  LODWORD(v42) = v42 | (v43 << 8);
  LOBYTE(v43) = *(_BYTE *)(v33 + (v26[15] ^ 0xB2));
  *(_QWORD *)(v29 - 200) = 5;
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v26[5] ^ 0x31));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  LODWORD(v42) = v42 & 0xFF00FFFF | (((v35 >> 26) ^ 1) << 16);
  *(_QWORD *)(v29 - 224) = 13;
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v26[13] ^ 0x64));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  v44 = (v43 + 121) ^ 0xED | (((v35 >> 26) ^ 0x6B) << 16) | ((*(unsigned __int8 *)(v31 + (v26[14] ^ 0x55)) ^ 0x5B) << 8);
  v45 = *(unsigned __int8 *)(v30 + (v26[12] ^ 0x17));
  v46 = (v44 | ((v45 ^ 0x86) << 24)) + 1403088721 - ((2 * (v44 | ((v45 ^ 0x86) << 24))) & 0xA742DEA2);
  LOBYTE(v44) = (*(_BYTE *)(v33 + (v26[7] ^ 0xE9)) + 121) ^ 0x75;
  HIDWORD(v35) = *(unsigned __int8 *)(v34 + (v26[9] ^ 0x5ALL));
  LODWORD(v35) = (HIDWORD(v35) ^ 0x14) << 24;
  v47 = (v42 & 0xFFFFFF00 | v44) - 725655951 - 2 * ((v42 & 0x54BF5E00 | v44 & 0x73) ^ v44 & 2);
  v48 = *(_QWORD *)(v28 + 8 * (int)(v32 - 670)) - 4;
  v49 = *(_QWORD *)(v28 + 8 * (int)(v32 ^ 0x745)) - 12;
  v193 = *(unsigned __int8 *)(v31 + (v26[10] ^ 0xC4));
  v194 = *(unsigned __int8 *)(v30 + (*v26 ^ 0x51));
  v50 = *(_QWORD *)(v28 + 8 * (int)(v32 - 550)) - 12;
  v51 = *(_DWORD *)(v49 + 4 * (v193 ^ 0x63)) ^ *(_DWORD *)(v48 + 4 * (v194 ^ 0x49)) ^ (*(_DWORD *)(v50
                                                                                                 + 4
                                                                                                 * (BYTE2(v46) ^ 0xB0u))
                                                                                     + 1525432372);
  v52 = (v51 ^ 0xF79FD84) - 932028932 - 2 * ((v51 ^ 0xF79FD84) & 0x48725DFE ^ v51 & 2);
  v53 = *(_QWORD *)(v28 + 8 * (int)(v32 - 1124)) - 4;
  v54 = v52 ^ *(_DWORD *)(v53 + 4 * (v47 ^ 0xAAu));
  HIDWORD(v192) = v36 ^ 0xB5;
  v55 = *(_DWORD *)(v50 + 4 * (v36 ^ 0x15u));
  v56 = (v55 + 1416823750 - 2 * ((v55 + 1525432372) & 0x7986C393 ^ v55 & 1)) ^ *(_DWORD *)(v48
                                                                                         + 4 * (HIBYTE(v47) ^ 0xAC));
  LODWORD(v192) = (*(_BYTE *)(v33 + (v26[3] ^ 0x5ALL)) + 121);
  v57 = *(_DWORD *)(v49 + 4 * BYTE1(v47)) ^ *(_DWORD *)(v53 + 4 * (v192 ^ 0xF7));
  HIDWORD(v191) = (v35 >> 26) ^ 0x1F;
  v58 = (*(_DWORD *)(v50 + 4 * ((v35 >> 26) ^ 0xCAu)) + 1525432372) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v46) ^ 0xEA)) ^ ((v57 ^ 0x3E8D63EA) - 108608622 - 2 * ((v57 ^ 0x3E8D63EA) & 0x7986C396 ^ v57 & 4));
  v189 = *(unsigned __int8 *)(v30 + (v26[8] ^ 0x64));
  v190 = *(unsigned __int8 *)(v31 + (v26[2] ^ 0x62));
  v59 = *(_DWORD *)(v49 + 4 * (v190 ^ 0xCD)) ^ *(_DWORD *)(v48 + 4 * (v189 ^ 0x33));
  LODWORD(v191) = (*(_BYTE *)(v33 + (v26[11] ^ 0x5FLL)) + 121);
  v60 = (v56 - 932028932 - ((2 * v56) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v191 ^ 0x50));
  HIDWORD(a25) = v47;
  LODWORD(v195) = v46;
  v61 = (*(_DWORD *)(v50 + 4 * (BYTE2(v47) ^ 0x9Eu)) + 1525432372) ^ ((v59 ^ 0xF79FD84)
                                                                      - 932028932
                                                                      - 2 * ((v59 ^ 0xF79FD84) & 0x48725DFE ^ v59 & 2)) ^ *(_DWORD *)(v53 + 4 * (v46 ^ 0x45u));
  v62 = (v60 - 151044586 - ((2 * v60) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v46) ^ 0x58u));
  v63 = *(_DWORD *)(v50 + 4 * (BYTE2(v58) ^ 0x91u));
  v64 = (v63 + 1416823750 - ((2 * v63 - 1244102552) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v54) ^ 0xB9));
  v65 = *(_DWORD *)(v50 + 4 * (BYTE2(v54) ^ 0xFDu));
  v66 = (v65 + 1374387786 - 2 * ((v65 + 1525432372) & 0x76FF3E17 ^ v65 & 1)) ^ *(_DWORD *)(v49
                                                                                         + 4 * (BYTE1(v58) ^ 0xDAu));
  v67 = (v64 - 151044586 - ((2 * v64) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v61) ^ 0xE8u));
  v68 = (v66 - 932028932 - ((2 * v66) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v61 ^ 0x2Eu));
  LODWORD(v33) = *(_DWORD *)(v50 + 4 * (BYTE2(v61) ^ 0xCBu));
  v69 = (v33 + 1374387786 - ((2 * v33 - 1244102552) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v62) ^ 0x70u));
  LODWORD(v33) = *(_DWORD *)(v50 + 4 * (BYTE2(v62) ^ 0xADu));
  LODWORD(v33) = (v33 + 1374387786 - ((2 * v33 - 1244102552) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49
                                                                                        + 4 * (BYTE1(v54) ^ 0xB7u));
  LODWORD(v33) = (v33 - 108608622 - ((2 * v33) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v61) ^ 0x63));
  v70 = (v67 - 932028932 - ((2 * v67) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v62 ^ 0x9Cu));
  LODWORD(v33) = (v33 - 932028932 - ((2 * v33) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v58 ^ 0xC1u));
  v71 = (v69 - 108608622 - ((2 * v69) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v58) ^ 0xD0));
  v72 = (v71 - 932028932 - ((2 * v71) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v54 ^ 0xEDu));
  v73 = (v68 - 108608622 - ((2 * v68) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v62) ^ 2));
  v74 = *(_DWORD *)(v50 + 4 * (BYTE2(v72) ^ 0x2Bu));
  v75 = (v74 + 1416823750 - ((2 * v74 - 1244102552) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v70) ^ 0xC));
  v76 = *(_DWORD *)(v49 + 4 * (BYTE1(v73) ^ 0xF6u)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v72) ^ 0x60));
  v77 = (v75 - 151044586 - ((2 * v75) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v33) ^ 0xA9u));
  v78 = *(_DWORD *)(v50 + 4 * (BYTE2(v70) ^ 0xB6u));
  v79 = (v78 + 1416823750 - ((2 * v78 - 1244102552) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v73) ^ 0x68));
  v80 = (v79 - 151044586 - ((2 * v79) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v72) ^ 3u));
  v81 = ((v76 ^ 0xF79FD84) - 932028932 - 2 * ((v76 ^ 0xF79FD84) & 0x48725DFE ^ v76 & 2)) ^ *(_DWORD *)(v53 + 4 * (v70 ^ 0xD0u)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v33) ^ 0x17u)) + 1525432372);
  v82 = (v77 - 932028932 - ((2 * v77) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v73 ^ 0xC6u));
  v83 = *(_DWORD *)(v48 + 4 * (BYTE3(v33) ^ 0xB2)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v70) ^ 0x8Bu)) ^ 0xF79FD84 ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v73) ^ 0x21u)) + 1525432372);
  v84 = (v80 - 932028932 - ((2 * v80) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v33 ^ 5u));
  v85 = (v83 - 932028932 - ((2 * v83) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v72 ^ 0x58u));
  v86 = *(_DWORD *)(v48 + 4 * (HIBYTE(v85) ^ 9)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v82) ^ 0x40u));
  LODWORD(v196) = 1215454719;
  v87 = (v86 ^ 0xF79FD84) - 932028932 - 2 * ((v86 ^ 0xF79FD84) & 0x48725DFF ^ v86 & 3);
  LODWORD(v33) = *(_DWORD *)(v48 + 4 * (HIBYTE(v84) ^ 0xB7)) ^ *(_DWORD *)(v53 + 4 * (v85 ^ 0x74u)) ^ 0x31F49E6E;
  v88 = *(_DWORD *)(v50 + 4 * (BYTE2(v85) ^ 0x47u));
  v89 = (v88 + 1416823750 - ((2 * v88 - 1244102552) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v81) ^ 1));
  v90 = *(_DWORD *)(v50 + 4 * (BYTE2(v81) ^ 0x4Du));
  v91 = (v90 + 593403440 - 2 * ((v90 + 1525432372) & 0x48725DFD ^ v90 & 1)) ^ *(_DWORD *)(v53
                                                                                        + 4
                                                                                        * (v84 ^ 0xA1u));
  v92 = (v91 - 151044586 - ((2 * v91) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v85) ^ 0x6Eu));
  v93 = (v89 - 151044586 - ((2 * v89) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v84) ^ 0x4Cu));
  v94 = (v92 - 108608622 - ((2 * v92) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v82) ^ 0x53));
  v95 = *(_DWORD *)(v50 + 4 * (BYTE2(v84) ^ 0xE6u));
  v96 = (v93 - 932028932 - ((2 * v93) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v82 ^ 0x91u));
  v97 = v87 ^ *(_DWORD *)(v53 + 4 * (v81 ^ 0xEAu)) ^ (v95 + 1525432372);
  v98 = *(_DWORD *)(v49 + 4 * (BYTE1(v81) ^ 0x9Bu)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v82) ^ 0x52u)) + 1525432372) ^ (v33 - 151044586 - ((2 * v33) & 0xEDFE7C2C));
  v99 = *(_DWORD *)(v50 + 4 * (BYTE2(v94) ^ 0xF5u));
  LODWORD(v33) = *(_DWORD *)(v50 + 4 * (BYTE2(v96) ^ 0x7Bu));
  v100 = (v99 + 593403440 - 2 * ((v99 + 1525432372) & 0x48725DFE ^ v99 & 2)) ^ *(_DWORD *)(v53
                                                                                         + 4
                                                                                         * (v97 ^ 0x62u));
  v101 = (v33 + 1374387786 - ((2 * v33 - 1244102552) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v97) ^ 0x13u));
  LODWORD(v33) = *(_DWORD *)(v48 + 4 * (HIBYTE(v97) ^ 0x6D)) ^ 0x31F49E6E ^ (*(_DWORD *)(v50
                                                                                         + 4 * (BYTE2(v98) ^ 0xC5u))
                                                                             + 1525432372) ^ *(_DWORD *)(v53 + 4 * (v96 ^ 0x29u));
  LODWORD(v33) = (v33 - 151044586 - ((2 * v33) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v94) ^ 0x3Bu));
  v102 = (v101 - 108608622 - ((2 * v101) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v94) ^ 0x52));
  v103 = (v102 - 932028932 - ((2 * v102) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v98 ^ 0x87u));
  v104 = *(_DWORD *)(v49 + 4 * (BYTE1(v98) ^ 0x3Du)) ^ 0xF79FD84 ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v97) ^ 0xD0u))
                                                                    + 1525432372) ^ *(_DWORD *)(v48
                                                                                              + 4
                                                                                              * (HIBYTE(v96) ^ 0xDB));
  v105 = *(_DWORD *)(v48 + 4 * (HIBYTE(v98) ^ 0x37)) ^ (v100 - 108608622 - ((2 * v100) & 0xF30D8724));
  v106 = (v104 - 932028932 - ((2 * v104) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v94 ^ 0xFCu));
  v107 = (v105 - 151044586 - ((2 * v105) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v96) ^ 0xC4u));
  v108 = *(_DWORD *)(v48 + 4 * (HIBYTE(v107) ^ 0xB6)) ^ *(_DWORD *)(v53 + 4 * (v33 ^ 0x52u)) ^ 0x31F49E6E;
  v109 = *(_DWORD *)(v50 + 4 * (BYTE2(v107) ^ 0x41u));
  v110 = (v109 + 1416823750 - 2 * ((v109 + 1525432372) & 0x7986C393 ^ v109 & 1)) ^ *(_DWORD *)(v48
                                                                                             + 4 * (BYTE3(v33) ^ 0x89));
  v111 = *(_DWORD *)(v48 + 4 * (HIBYTE(v103) ^ 0xD5)) ^ 0x31F49E6E ^ *(_DWORD *)(v53
                                                                                 + 4 * (v107 ^ 0xCCu));
  v112 = (v110 - 151044586 - ((2 * v110) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v103) ^ 9u));
  v113 = (v112 - 932028932 - ((2 * v112) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v106 ^ 0xFCu));
  v114 = (v111 - 151044586 - ((2 * v111) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v33) ^ 0x1Fu)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v106) ^ 0xDAu)) + 1525432372);
  v115 = *(_DWORD *)(v50 + 4 * (BYTE2(v33) ^ 0x64u));
  v116 = (v115 + 1374387786 - ((2 * v115 - 1244102552) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v107) ^ 0x37u));
  v117 = (v116 - 108608622 - ((2 * v116) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v106) ^ 0x65));
  LODWORD(v33) = (v108 - 151044586 - ((2 * v108) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v106) ^ 0xE6u)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v103) ^ 0x27u)) + 1525432372);
  v118 = (v117 - 932028932 - ((2 * v117) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v103 ^ 0x10u));
  v119 = *(_DWORD *)(v50 + 4 * (BYTE2(v114) ^ 0xF1u));
  v120 = (v119 + 1374387786 - 2 * ((v119 + 1525432372) & 0x76FF3E17 ^ v119 & 1)) ^ *(_DWORD *)(v49
                                                                                             + 4
                                                                                             * (BYTE1(v118) ^ 0xC8u));
  v121 = *(_DWORD *)(v50 + 4 * (BYTE2(v118) ^ 0xCFu));
  v122 = (v121 + 1374387786 - ((2 * v121 - 1244102552) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v113) ^ 0x19u));
  v123 = *(_DWORD *)(v49 + 4 * (BYTE1(v33) ^ 0xFu)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v118) ^ 0x3F));
  v124 = (v122 - 932028932 - ((2 * v122) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v33 ^ 0x6Bu));
  v125 = *(_DWORD *)(v53 + 4 * (v118 ^ 0x19u)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v114) ^ 0x68u)) ^ 0x3E8D63EA ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v33) ^ 0x17u)) + 1525432372);
  v126 = (v124 - 108608622 - ((2 * v124) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v114) ^ 0x58));
  v127 = ((v123 ^ 0xF79FD84) - 932028932 - 2 * ((v123 ^ 0xF79FD84) & 0x48725DFD ^ v123 & 1)) ^ *(_DWORD *)(v53 + 4 * (v114 ^ 0x40u));
  v128 = (v125 - 108608622 - ((2 * v125) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v113) ^ 0xEC));
  v129 = v127 ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v113) ^ 0x54u)) + 1525432372);
  v130 = *(_DWORD *)(v53 + 4 * (v113 ^ 0x29u)) ^ (v120 - 932028932 - ((2 * v120) & 0x90E4BBF8)) ^ 0xB18DAFD6;
  LODWORD(v33) = *(_DWORD *)(v48 + 4 * (BYTE3(v33) ^ 0xB0)) ^ (v130 - 108608622 - ((2 * v130) & 0xF30D8724));
  v131 = *(_DWORD *)(v50 + 4 * (BYTE2(v128) ^ 0x32u));
  v132 = (v131 + 1416823750 - ((2 * v131 - 1244102552) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * HIBYTE(v129));
  v133 = *(_DWORD *)(v50 + 4 * (BYTE2(v33) ^ 0x1Au));
  v134 = (v133 + 593403440 - ((2 * v133 - 1244102552) & 0x90E4BBF8)) ^ *(_DWORD *)(v53
                                                                                 + 4 * (v129 ^ 0x87u));
  v135 = *(_DWORD *)(v50 + 4 * (BYTE2(v126) ^ 0xE2u));
  v136 = (v135 + 593403440 - ((2 * v135 - 1244102552) & 0x90E4BBF8)) ^ *(_DWORD *)(v53
                                                                                 + 4 * (v128 ^ 0xF5u));
  v137 = (v132 - 932028932 - ((2 * v132) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v126 ^ 0x55u));
  v138 = (v134 - 151044586 - ((2 * v134) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v126) ^ 0x4Du));
  v139 = (v136 - 151044586 - ((2 * v136) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v129) ^ 0xE0u));
  v140 = *(_DWORD *)(v48 + 4 * (HIBYTE(v126) ^ 0x41)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v128) ^ 0x27u));
  v141 = (v139 - 108608622 - ((2 * v139) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (BYTE3(v33) ^ 0x8A));
  v142 = (v138 - 108608622 - ((2 * v138) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v128) ^ 0x8F));
  v143 = (v137 - 151044586 - ((2 * v137) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v33) ^ 0xF9u));
  v144 = ((v140 ^ 0xF79FD84) - 932028932 - 2 * ((v140 ^ 0xF79FD84) & 0x48725DFF ^ v140 & 3)) ^ *(_DWORD *)(v53 + 4 * (v33 ^ 0x4Au)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v129) ^ 0xEAu)) + 1525432372);
  v145 = *(_DWORD *)(v50 + 4 * (BYTE2(v144) ^ 0x10u));
  v146 = (v145 + 1416823750 - ((2 * v145 - 1244102552) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v141) ^ 0xA9));
  v147 = *(_DWORD *)(v53 + 4 * (v144 ^ 0x91u)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v142) ^ 0xD4u))
                                                                   + 1525432372) ^ *(_DWORD *)(v49
                                                                                             + 4
                                                                                             * (BYTE1(v141) ^ 0x2Au));
  v148 = *(_DWORD *)(v49 + 4 * (BYTE1(v142) ^ 0x40u)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v144) ^ 0x51));
  v149 = (v146 - 932028932 - ((2 * v146) & 0x90E4BBF8)) ^ *(_DWORD *)(v53 + 4 * (v142 ^ 0xDEu));
  v150 = *(_DWORD *)(v49 + 4 * (BYTE1(v144) ^ 0x2Du)) ^ *(_DWORD *)(v53 + 4 * (v143 ^ 0xC5u)) ^ 0x3E8D63EA;
  LODWORD(v49) = (v149 - 151044586 - ((2 * v149) & 0xEDFE7C2C)) ^ *(_DWORD *)(v49 + 4 * (BYTE1(v143) ^ 0xF6u));
  LODWORD(v53) = ((v148 ^ 0xF79FD84) - 932028932 - 2 * ((v148 ^ 0xF79FD84) & 0x48725DFD ^ v148 & 1)) ^ *(_DWORD *)(v53 + 4 * (v141 ^ 0x7Eu)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v143) ^ 0xA9u)) + 1525432372);
  LODWORD(v50) = (v150 - 108608622 - ((2 * v150) & 0xF30D8724)) ^ *(_DWORD *)(v48 + 4 * (HIBYTE(v142) ^ 0x67)) ^ (*(_DWORD *)(v50 + 4 * (BYTE2(v141) ^ 4u)) + 1525432372);
  v151 = *(_DWORD *)(v48 + 4 * (HIBYTE(v143) ^ 0x5C));
  v152 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 ^ 0x592] - 8;
  LODWORD(v48) = *(_DWORD *)(v152 + 4 * (v53 ^ 0x3Eu));
  v153 = v151 ^ ((v147 ^ 0x41558497) - 108608622 - 2 * ((v147 ^ 0x41558497) & 0x7986C3B2 ^ v147 & 0x20));
  HIDWORD(v35) = v48 ^ 0x7BD222;
  LODWORD(v35) = v48 ^ 0xD0000000;
  v154 = v35 >> 27;
  v155 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 ^ 0x532];
  v156 = *(_DWORD *)(v155 + 4 * (BYTE2(v153) ^ 0xF7u));
  v157 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 ^ 0x4C6] - 12;
  v158 = *(_DWORD *)(v155 + 4 * (BYTE2(v49) ^ 0x46u));
  LODWORD(v48) = *(_DWORD *)(v155 + 4 * (BYTE2(v53) ^ 0x7Bu));
  LODWORD(v155) = *(_DWORD *)(v155 + 4 * (BYTE2(v50) ^ 0x82u));
  HIDWORD(v35) = v155 ^ 0x60947E;
  LODWORD(v35) = v155 ^ 0x8A000000;
  v159 = *(_DWORD *)(v152 + 4 * (v49 ^ 0xBCu));
  v160 = *(_DWORD *)(v152 + 4 * (v153 ^ 0x35u));
  v161 = ((BYTE1(v49) ^ 0xFFFFFF91) + 907598246 + *(_DWORD *)(v157 + 4 * (BYTE1(v49) ^ 0xFEu))) ^ v154 ^ (v35 >> 25);
  LODWORD(v152) = *(_DWORD *)(v152 + 4 * (v50 ^ 0xF3u));
  v162 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 ^ 0x5E5] - 4;
  v163 = *(_DWORD *)(v162 + 4 * (BYTE3(v53) ^ 0x69));
  v164 = *(_DWORD *)(v162 + 4 * (BYTE3(v49) ^ 0xEB));
  v165 = *(_DWORD *)(v162 + 4 * (BYTE3(v50) ^ 0xDD));
  v166 = *(_DWORD *)(v162 + 4 * (HIBYTE(v153) ^ 0x57));
  v167 = BYTE1(v50);
  LODWORD(v162) = *(_DWORD *)(v157 + 4 * (BYTE1(v50) ^ 0x93u));
  LODWORD(v50) = BYTE1(v53);
  v168 = *(_DWORD *)(v157 + 4 * (BYTE1(v53) ^ 0x47u));
  LODWORD(v49) = BYTE1(v153);
  LODWORD(v157) = *(_DWORD *)(v157 + 4 * (BYTE1(v153) ^ 0xA8u));
  v169 = (v161 + 1769166377 - ((2 * v161) & 0xD2E6AC52)) ^ v166;
  LODWORD(v53) = (v169 + 1403088721 - ((2 * v169) & 0xA742DEA2)) ^ *(_DWORD *)(v29 - 176);
  v170 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 - 864] - 8;
  v26[12] = *(_BYTE *)(v170 + (BYTE3(v53) ^ 0xF8)) ^ ((BYTE3(v53) ^ 0x48)
                                                      - 2 * (((BYTE3(v53) ^ 0x48) + 92) & 0x6F ^ BYTE3(v53) & 2)
                                                      + 73) ^ 0x7A;
  HIDWORD(v35) = v160 ^ 0x7BD222;
  LODWORD(v35) = v160 ^ 0xD0000000;
  v171 = v35 >> 27;
  HIDWORD(v35) = v158 ^ 0x60947E;
  LODWORD(v35) = v158 ^ 0x8A000000;
  v172 = (v35 >> 25) ^ v171 ^ ((v50 ^ 0xFFFFFF28) + 907598246 + v168);
  v173 = (v172 + 1769166377 - ((2 * v172) & 0xD2E6AC52)) ^ v165;
  v174 = (v173 - ((2 * v173) & 0x6408B6B2) - 1308337319) ^ *(_DWORD *)(v29 - 172);
  v175 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 - 1150] - 4;
  v26[10] = (*(_BYTE *)(v175
                      + (((unsigned __int16)((v173 - ((2 * v173) & 0xB6B2) + 23385) ^ *(_WORD *)(v29 - 172)) >> 8) ^ 0x7BLL))
           - 84) ^ 0x1C;
  HIDWORD(v35) = v156 ^ 0x60947E;
  LODWORD(v35) = v156 ^ 0x8A000000;
  v176 = ((v35 >> 25) + 1769166377 - ((2 * (v35 >> 25)) & 0xD2E6AC52)) ^ v163 ^ (__PAIR64__(v159 ^ 0x7BD222u, v159 ^ 0xD0000000) >> 27) ^ (-((v167 ^ 3) + 1482190070) - 1905178981 + v162);
  HIDWORD(v35) = v48 ^ 0x60947E;
  LODWORD(v35) = v48 ^ 0x8A000000;
  v177 = (v35 >> 25) + 1769166377 - ((2 * (v35 >> 25)) & 0xD2E6AC52);
  HIDWORD(v35) = v152 ^ 0x7BD222;
  LODWORD(v35) = v152 ^ 0xD0000000;
  v178 = v177 ^ v164 ^ (v35 >> 27) ^ ((v49 ^ 0xFFFFFFC7) + 907598246 + v157);
  v179 = (v176 - ((2 * v176) & 0x55DDE346) - 1427181149) ^ *(_DWORD *)(v29 - 164);
  v180 = (v178 - 725655951 - ((2 * v178) & 0xA97EBCE2)) ^ *(_DWORD *)(v29 - 168);
  *v26 = ((((v179 ^ 0x83D68D82) >> 24) ^ 0x7E) - ((2 * (((v179 ^ 0x83D68D82) >> 24) ^ 0x7E) - 72) & 0xDA) + 73) ^ 0xA7 ^ *(_BYTE *)(v170 + (((v179 ^ 0x83D68D82) >> 24) ^ 0xCELL));
  v26[*(_QWORD *)(v29 - 216)] = *(_BYTE *)(v170 + (HIBYTE(v180) ^ 0x61)) ^ ((HIBYTE(v180) ^ 0xD1)
                                                                            - ((2 * (HIBYTE(v180) ^ 0xD1) - 72) & 0xDA)
                                                                            + 73) ^ 0x2F;
  v26[8] = ((HIBYTE(v174) ^ 0x95) - ((2 * (HIBYTE(v174) ^ 0x95) - 72) & 0xDA) + 73) ^ 0xDC ^ *(_BYTE *)(v170 + (HIBYTE(v174) ^ 0x25));
  v26[14] = (*(_BYTE *)(v175 + (BYTE1(v53) ^ 0xB1)) - 84) ^ 0x26;
  v181 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 - 639] - 8;
  v26[9] = (*(_BYTE *)(v181 + (BYTE2(v174) ^ 0x87)) + 88) ^ 0x1F;
  v182 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 ^ 0x4D6];
  v183 = *(unsigned __int8 *)(v182 + (v53 ^ 0xA4)) ^ 0x4Cu;
  v26[*(_QWORD *)(v29 - 208)] = *(_BYTE *)(v182 + (v53 ^ 0xA4)) ^ 0x4C;
  v26[3] = *(_BYTE *)(v182 + (v179 ^ 0x82u));
  v26[2] = (*(_BYTE *)(v175 + (BYTE1(v179) ^ 0x8FLL)) - 84) ^ 0x82;
  v26[*(_QWORD *)(v29 - 184)] = (*(_BYTE *)(v181 + (BYTE2(v179) ^ 0x64)) + 88) ^ 0xCD;
  v26[11] = *(_BYTE *)(v182 + (v174 ^ 0x23)) ^ 0x34;
  v26[7] = *(_BYTE *)(v182 + (v180 ^ 0x5BLL)) ^ 0xD7;
  v26[*(_QWORD *)(v29 - 200)] = (*(_BYTE *)(v181 + (BYTE2(v180) ^ 0x7DLL)) + 88) ^ 0xF4;
  v26[*(_QWORD *)(v29 - 192)] = (*(_BYTE *)(v175 + (BYTE1(v180) ^ 0x70)) - 84) ^ 0xD5;
  v26[*(_QWORD *)(v29 - 224)] = (*(_BYTE *)(v181 + (BYTE2(v53) ^ 0x3DLL)) + 88) ^ 0x17;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a8 + 8 * (int)((11 * ((a12 + 17564674) > 0x10)) ^ v32)) - 4))(v175, v32, 218, 1769166377, v183, v182, 907598246, a8, a9, a10, a11, a12, v185, v186, v31, v30, a8, v188, v189,
           v190,
           v191,
           v192,
           v193,
           v194,
           a25,
           v195,
           0x48725DFDF096B271,
           v196,
           8,
           10);
}

void sub_193074308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32,int a33,char a34)
{
  uint64_t v34;

  *(_DWORD *)(v34 - 164) = ((a26 << 16) | ((a21 ^ 0x2E) << 8) | a25 | ((a29 ^ 0xD8) << (((a34 ^ 0x2C) - 9) & 0x17 ^ 0xD))) ^ 0x17534C6F;
  *(_DWORD *)(v34 - 172) = (((a19 ^ 0xC6) << 24) | ((a27 ^ 0xE9) << 8) | (a24 << 16) | a23) ^ 0xFB9E6A0;
  *(_DWORD *)(v34 - 176) = a33;
  *(_DWORD *)(v34 - 168) = a32;
  JUMPOUT(0x19307297CLL);
}

uint64_t sub_1930743CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a8
                                                              + 8
                                                              * (a19 ^ ((8 * (a12 != -17564674)) | (32
                                                                                                  * (a12 != -17564674))))))(a1, a2, 2565146967);
}

uint64_t sub_193074450(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  _BYTE *v14;

  v13 = v11 < v8;
  v14 = (_BYTE *)(v10 + (v12 - 965686099));
  *v14 ^= *(_BYTE *)(v9
                   + (((_BYTE)v12 - 83) & 0xF | (16
                                               * (((((_DWORD)v14 * (a3 + (a4 ^ 0x7C6) - 3484)) ^ ((v14
                                                                                                 * (a3
                                                                                                  + (a4 ^ 0x7C6)
                                                                                                  - 3484)) >> 16))
                                                 * a3) >> 24)))) ^ (87
                                                                                   * (((_BYTE)v14
                                                                                     * (a3 + (a4 ^ 0xC6) + 100)) ^ ((v14 * (a3 + (a4 ^ 0x7C6) - 3484)) >> 16)));
  if (v13 == v12 - 1600316049 < v8)
    v13 = v12 - 1600316049 < v11;
  return (*(uint64_t (**)(void))(a8 + 8 * (((8 * v13) | (32 * v13)) ^ a4)))();
}

void sub_1930744EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;

  *(_DWORD *)(a6 + 4) = v6;
}

void fp_dh_a19926ea4f8f1bdcc3bf93722e6f60e2(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 - 2100007649 * ((-2 - ((a1 | 0xE9B8D27B) + (~(_DWORD)a1 | 0x16472D84))) ^ 0xDB492885);
  __asm { BR              X11 }
}

void sub_1930745F0()
{
  uint64_t v0;

  *(_DWORD *)(v0 + 16) = 1396889060;
}

void fp_dh_f8846399496f0435574d6e68cd5c3f20(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_19307470C()
{
  return 4294925278;
}

void fp_dh_d2fd4c30f0611a71d248099a61d561f0(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 - 544512889 * ((a1 & 0x815EC6B1 | ~(a1 | 0x815EC6B1)) ^ 0x589ADEEC);
  __asm { BR              X17 }
}

uint64_t sub_193074AAC()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((7308
                                          * (((v1 << (101 * (v0 ^ 0xA1) - 58)) & 0xB5F52FD8 ^ 0x90202088)
                                           + (v1 ^ 0xB3EAE7AB)
                                           + 47 * (v0 ^ 0xE97)
                                           - 34827 != 1526339432)) ^ v0))
                            - 8))();
}

uint64_t sub_193074B34(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((a2 + a1 - 1526372332 < (((v2 + 3333) | 0xC) ^ 0x1944u)) * (v2 - 3047)) ^ v2))
                            - 12))();
}

uint64_t sub_193074B7C(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((250
                                * (a3 + v3 + 1911 < ((((v4 + 3395) ^ 0x1928) + 6390) ^ 0xFFFFF56E ^ (59 * ((v4 + 3395) ^ 0x1928))))) ^ (v4 + 3395))))();
}

uint64_t sub_193074BCC(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL4 v24;

  v16 = a12 - 0x64C17606356191ELL + (a3 + a2 + a1 + 1927);
  v17 = ((_BYTE)a3 + (_BYTE)a2 + (_BYTE)a1 - 121) & 0xF;
  v18 = v17 + v14 - v16;
  v19 = v17 + v13 - v16;
  v20 = (v17 | v12) - v16;
  v24 = (unint64_t)(a5 - (a12 - 0x64C17606356191ELL) - 0x408D4D67B17D7391) < 0x10
     || v18 < ((2 * a7) ^ 0x27B4uLL)
     || v19 < (unint64_t)((a7 - 4938) | 0x1404u) - 5244
     || (unint64_t)(v20 + 4) < 0x10;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15 + 8 * ((57 * v24) ^ a7)) - 4))();
}

uint64_t sub_193074C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v6
                                                                               + 8
                                                                               * (int)((((v4 + 557771504) & 0xDEC107DB ^ 0x711)
                                                                                      * (v5 > 0xF)) ^ v4)))(a1, a2, a3, a4, 0);
}

uint64_t sub_193074CC8@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  int8x16_t v60;
  uint64_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16x4_t v65;
  int8x16x4_t v66;

  v58 = (v51 + 1507539818) & 0xA624BF9B;
  LODWORD(STACK[0x200]) = a4 + 10;
  LODWORD(STACK[0x208]) = a4 + 8;
  v65.val[1].i64[0] = ((((_BYTE)v51 + 106) & 0x9B ^ 7) + (_BYTE)a4) & 0xF;
  v65.val[1].i64[1] = ((_BYTE)a4 + 4) & 0xF;
  v65.val[2].i64[0] = ((_BYTE)a4 + 3) & 0xF;
  v65.val[2].i64[1] = ((_BYTE)a4 + 2) & 0xF;
  v65.val[3].i64[0] = ((_BYTE)a4 + 1) & 0xF;
  v65.val[3].i64[1] = a4 & 0xF;
  v59 = (v57 & 0xFFFFFFF0) - 16;
  v60.i64[0] = 0xF5F5F5F5F5F5F5F5;
  v60.i64[1] = 0xF5F5F5F5F5F5F5F5;
  v61 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)v56 + (_BYTE)a3) & 0xF;
  v65.val[0].i64[0] = v61;
  v65.val[0].i64[1] = ((_BYTE)a4 + 6) & 0xF;
  v62.i64[0] = vqtbl4q_s8(v65, (int8x16_t)xmmword_193301A70).u64[0];
  v66.val[0].i64[1] = ((_BYTE)a4 + 14) & 0xF;
  v66.val[1].i64[1] = ((_BYTE)a4 + 12) & 0xF;
  v66.val[2].i64[1] = STACK[0x200] & 0xF;
  v66.val[3].i64[1] = STACK[0x208] & 0xF;
  v66.val[0].i64[0] = ((_BYTE)a4 - 1) & 0xF;
  v66.val[1].i64[0] = ((_BYTE)a4 + 13) & 0xF;
  v66.val[2].i64[0] = ((_BYTE)a4 + 11) & 0xF;
  v66.val[3].i64[0] = ((_BYTE)a4 + 9) & 0xF;
  v62.i64[1] = vqtbl4q_s8(v66, (int8x16_t)xmmword_193301A70).u64[0];
  v63 = vrev64q_s8(vmulq_s8(v62, v60));
  *(int8x16_t *)(a5 - 15 + (a2 + a1 + v56 + a3)) = veorq_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v55 + v61 - 15), *(int8x16_t *)(v52- 15+ (a2 + a1 + v56 + a3))), *(int8x16_t *)(v54 + v61 - 15)), *(int8x16_t *)(v53+ v61+ ((v58 + 1011320893) & 0xC3B86EF6 ^ 0x6C2)- 15)), vextq_s8(v63, v63, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a51 + 8 * (int)((56 * (v59 != 0)) ^ v58)) - 12))();
}

void sub_193074E74()
{
  JUMPOUT(0x193074DF8);
}

uint64_t sub_193074E80()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8
                                                           * (v0 ^ ((v1 == 0xE9107047) | (4 * (v1 == 0xE9107047)))))
                                          - 8))(2065167037);
}

uint64_t sub_193074ECC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;

  *(_BYTE *)(a2 + (a1 - 2065167037)) = *(_BYTE *)(v6 + (((_BYTE)a1 + 67) & 0xF)) ^ *(_BYTE *)(v3 + (a1 - 2065167037)) ^ *(_BYTE *)(v5 + (((_BYTE)a1 + 67) & 0xF)) ^ *(_BYTE *)((v7 - 1844) + v4 + ((a1 - 2065167037) & 0xFLL) - 1923) ^ (-11 * ((a1 + 67) & 0xF));
  v11 = v8 > 0xA4F12F4C;
  v12 = a1 - 537469449;
  v13 = (a1 + 1);
  v14 = v11 ^ (v12 < v2);
  v15 = v12 < v9;
  if (!v14)
    v11 = v15;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10 + 8 * ((!v11 | (4 * !v11)) ^ v7)) - 8))(v13);
}

uint64_t sub_193074F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((((v6 + 193) ^ 0x799) * (v5 == a5)) ^ v6))
                            - ((v6 - 857810663) & 0x332133FB ^ 0x13D7)))();
}

uint64_t sub_193074FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                                                  + 8 * (v5 ^ (61 * ((v6 >> 3) & 1))))
                                                                                      - ((((v5 + 505351041) & 0x61E0E7FBu)
                                                                                        + 4596) ^ 0x1944)))(a1, a2, a3, a4, a5, (a4 - a5));
}

uint64_t sub_193075008@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W4>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  unsigned int v65;
  unsigned int v66;
  int8x16x4_t v68;

  STACK[0x208] = v52 - 7;
  STACK[0x200] = a5 - 7;
  v58 = a2 + a1 + v56;
  v59 = v58 - a4 - 11;
  v60 = v58 - a4 - 10;
  v61 = v58 - a4 - 9;
  v62 = v58 - a4 - 7;
  v63 = v58 - a4 - 6;
  v64 = v58 - a4 - 5;
  v65 = a4 - (v57 & 0xFFFFFFF8) + 8;
  v66 = v58 + a3 - a4;
  v68.val[0].i64[0] = v66 & 0xF;
  v68.val[0].i64[1] = v64 & 0xF;
  v68.val[1].i64[0] = v63 & 0xF;
  v68.val[1].i64[1] = v62 & 0xF;
  v68.val[2].i64[0] = (v59 + ((v51 + 0x80) ^ 0xFB)) & 0xF;
  v68.val[2].i64[1] = v61 & 0xF;
  v68.val[3].i64[0] = v60 & 0xF;
  v68.val[3].i64[1] = v59 & 0xF;
  *(int8x8_t *)(STACK[0x200] + v66) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v55 + v68.val[0].i64[0] - 7), *(int8x8_t *)(STACK[0x208] + v66)), veor_s8(*(int8x8_t *)(v54 + v68.val[0].i64[0] - 7), *(int8x8_t *)(v68.val[0].i64[0] + v53 - 3))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v68, (int8x16_t)xmmword_193301A80), (int8x8_t)0xF5F5F5F5F5F5F5F5)));
  return (*(uint64_t (**)(__n128))(a51 + 8 * ((7926 * (v65 == 0)) ^ v51)))((__n128)xmmword_193301A80);
}

void sub_193075164()
{
  JUMPOUT(0x193075090);
}

uint64_t sub_19307516C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a70;
  int a72;
  uint64_t v72;

  return ((uint64_t (*)(void))(*(_QWORD *)(v72 + 8 * ((2743 * (((a72 == a70) ^ (a3 + 1)) & 1)) ^ a3))
                            - ((a3 + 175) ^ 0x78BLL)))();
}

uint64_t sub_1930751BC@<X0>(int a1@<W5>, int a2@<W7>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = ((a2 + 1099884171) & 0xBE7107AF ^ 0xA505EF10) + a1;
  *(_BYTE *)(a3 + v9) = *(_BYTE *)(v6 + (v9 & 0xF)) ^ *(_BYTE *)(v3 + v9) ^ *(_BYTE *)(v5 + (v9 & 0xF)) ^ *(_BYTE *)((v9 & 0xF) + v4 + 4) ^ (-11 * (v9 & 0xF));
  return (*(uint64_t (**)(void))(v8 + 8 * ((7611 * (a1 - 1 == v7)) ^ (a2 - 2798))))();
}

uint64_t sub_19307523C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *(_QWORD *)(v45 + 8);
  *(int8x16_t *)(v48 - 256) = veorq_s8(*(int8x16_t *)(*(_QWORD *)(v45 + 40) - 0x461910921842B1D4), (int8x16_t)xmmword_193301A90);
  *(int8x16_t *)&STACK[0x210] = veorq_s8(*(int8x16_t *)(v49 - 0xADDAD9073051DE5), (int8x16_t)xmmword_193301AA0);
  LODWORD(a13) = 2 * v46;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 + 8 * (int)((((((a7 + 591269989) & 0xDCC1FBDF) - 2878) ^ 0x578) * (v48 != 256)) ^ a7)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_1930752E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;

  return ((uint64_t (*)(void))(*(_QWORD *)(v14
                                        + 8
                                        * (((((v12 - 2244) | 0xD0) - 1734)
                                          * (v13 + 0x2B219EB61BD7B2D5 == a12 + 0x24D58755B88199B7)) ^ v12))
                            - 4))();
}

uint64_t sub_193075348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned __int8 v50;
  BOOL v52;

  v49 = v45 - 2036;
  *(_BYTE *)(v48 - 240) = *(_BYTE *)(v48 - 256);
  *(_QWORD *)(v48 - 239) = *(_QWORD *)(v48 - 255);
  *(_DWORD *)(v48 - 231) = *(_DWORD *)(v48 - 247);
  *(_WORD *)(v48 - 227) = *(_WORD *)(v48 - 243);
  *(_BYTE *)(v48 - 225) = *(_BYTE *)(v48 - 241);
  v50 = 57 * ((v45 + 12) ^ 0xCB);
  v52 = a12 == 0x64C17606356191ELL || v48 - 240 + v46 == 0x25C473F501CC94B9;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8 * ((((v50 ^ v52) & 1) * (v49 - 1017)) ^ v49)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_1930753F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  int v45;
  int v46;
  uint64_t v47;
  _BOOL4 v49;

  v49 = ((((v45 + 75) ^ 7) + (a13 & 0xFE) + ~(_BYTE)v46) & 0xF) != 0
     || (a13 & 0xFD3BDDFE) + (v46 ^ 0x7E9DEEFFu) == 2124279551;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 + 8 * ((89 * v49) ^ v45)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45);
}

uint64_t sub_193075450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,int a55)
{
  uint64_t v55;
  _BOOL4 v56;

  v56 = ((2 * (a11 - (a14 & 0x4B466A6) - 778977250)) & 0xDEFFF9FC ^ 0x4B460A4)
      + ((a11 - (a14 & 0x4B466A6) - 778977250) ^ 0xED25CFAD)
      + 1543225308 == 1266400474;
  return ((uint64_t (*)(void))(*(_QWORD *)(v55 + 8 * (a55 | v56 | (16 * v56))) - 4))();
}

uint64_t sub_19307551C(int a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _BOOL4 v5;

  v5 = a2 + a1 + 276824834 >= (a4 - 711);
  return (*(uint64_t (**)(void))(v4 + 8 * (((8 * v5) | (32 * v5)) ^ a4)))();
}

uint64_t sub_19307558C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4;
  uint64_t v5;

  return (*(uint64_t (**)(void))(v5
                              + 8
                              * ((5390
                                * (a3 + v4 - 16 >= ((a4 + 2086657152) & 0x83A039FC)
                                                 + ((a4 + 1686706398) & 0x9B76EE7A)
                                                 - 9092)) ^ a4)))();
}

uint64_t sub_1930755F0@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, unint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v23;
  char v26;

  v13 = (a2 + a1 + a3);
  v14 = v13 + a8 - 0x64C17606356191ELL + 1;
  v15 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  v16 = v11 + v15 - v13;
  v17 = v11 + v15 + 1;
  v18 = v10 + v15 - v13;
  v19 = v10 + v15 + 1;
  v20 = v9 + v15 + 1 - v13;
  v21 = v15 + v9 + 2;
  v23 = a4 < v19 && v18 < v14;
  if (a4 < v17 && v16 < v14)
    v23 = 1;
  v26 = a4 < v21 && v20 < v14 || v23;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8 * ((120 * ((v26 ^ (v8 - 1)) & 1)) ^ v8))
                            - 4))();
}

uint64_t sub_193075698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v5
                                                                                + 8
                                                                                * (((((((v3 - 2536) | 0x1708) ^ 0xE04)
                                                                                    - 4948) ^ 0x5EE)
                                                                                  * (v4 > 0xF)) | (v3 - 2536) | 0x1708))
                                                                    - 8))(a1, a2, a3, 0);
}

uint64_t sub_1930756DC@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16x4_t v61;
  int8x16x4_t v62;

  v61.val[1].i64[0] = ((_BYTE)v53 + 3) & 0xF;
  v61.val[1].i64[1] = ((_BYTE)v53 + 2) & 0xF;
  v61.val[2].i64[0] = ((_BYTE)v53 + 1) & 0xF;
  v61.val[2].i64[1] = v53 & 0xF;
  v61.val[3].i64[0] = ((_BYTE)v53 - 1) & 0xF;
  v61.val[3].i64[1] = ((_BYTE)v53 + 14) & 0xF;
  v62.val[0].i64[0] = (((v55 - 1) ^ 0xAA) + (_BYTE)v53) & 0xF;
  v56 = a2 + a1 + a3;
  v57.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
  v57.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
  v61.val[0].i64[0] = v56 & 0xF;
  v61.val[0].i64[1] = ((_BYTE)v53 + 4) & 0xF;
  v58.i64[0] = vqtbl4q_s8(v61, (int8x16_t)xmmword_193301A70).u64[0];
  v62.val[0].i64[1] = ((_BYTE)v53 + 12) & 0xF;
  v62.val[1].i64[1] = ((_BYTE)v53 + 10) & 0xF;
  v62.val[2].i64[1] = (v53 + 8) & 0xF;
  v62.val[3].i64[1] = (v53 + 6) & 0xF;
  v62.val[1].i64[0] = ((_BYTE)v53 + 11) & 0xF;
  v62.val[2].i64[0] = ((_BYTE)v53 + 9) & 0xF;
  v62.val[3].i64[0] = ((_BYTE)v53 + 7) & 0xF;
  v58.i64[1] = vqtbl4q_s8(v62, (int8x16_t)xmmword_193301A70).u64[0];
  v59 = vrev64q_s8(vmulq_s8(v58, v57));
  *(int8x16_t *)(a4 - 15 + v56) = veorq_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v52 + v61.val[0].i64[0] - 15), *(int8x16_t *)(a4 - 15 + v56)), *(int8x16_t *)(v51 + v61.val[0].i64[0] - 15)), *(int8x16_t *)(10 * ((v55 - 1) ^ 0x4C0u) + v61.val[0].i64[0] + v50 - 3124)), vextq_s8(v59, v59, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a50 + 8 * ((15 * ((v54 & 0xFFFFFFF0) != 16)) ^ (v55 - 1))) - 12))();
}

void sub_193075848()
{
  JUMPOUT(0x1930757C0);
}

#error "1930796CC: call analysis failed (funcsize=3640)"

void sub_1930796D0()
{
  JUMPOUT(0x193077524);
}

uint64_t sub_193079714(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((((v5 ^ 0xEE9) - 198) * (v4 != a4)) ^ v5))
                            - (((v5 + 3034) | 0x14Cu) ^ 0x1944)))();
}

uint64_t sub_193079754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v10
                                                                               + 8
                                                                               * ((1366
                                                                                 * ((((((a7 + 5757) ^ v9) & v8) == 0) ^ (83 * (a7 ^ 0xCB) + 1)) & 1)) ^ a7)))(a1, a2, a3, a4, (v7 - a4));
}

uint64_t sub_19307979C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  int v56;
  char v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int8x16x4_t v64;

  LODWORD(STACK[0x208]) = v58;
  LODWORD(STACK[0x200]) = v56;
  v59 = -8 - a4;
  v60 = a2 + a1;
  v61 = v51 - 1076;
  v62 = a3 + v60 - 719 + v59 + (v51 ^ 0x1B83u) + 8;
  v64.val[0].i64[0] = v62 & 0xF;
  v64.val[0].i64[1] = (v57 + (_BYTE)v60 + 4 + (_BYTE)v59 + 8) & 0xF;
  v64.val[1].i64[0] = (v57 + (_BYTE)v60 + 3 + (_BYTE)v59 + 8) & 0xF;
  v64.val[1].i64[1] = (v57 + (_BYTE)v60 + 2 + (_BYTE)v59 + 8) & 0xF;
  v64.val[2].i64[0] = (v57 + (_BYTE)v60 + 1 + (_BYTE)v59 + 8) & 0xF;
  v64.val[2].i64[1] = (v55 + (_BYTE)v59 + 8) & 0xF;
  v64.val[3].i64[0] = (v57 + (_BYTE)v60 + 15 + (_BYTE)v59 + 8) & 0xF;
  v64.val[3].i64[1] = (v57 + (_BYTE)v60 + 14 + (_BYTE)v59 + 8) & 0xF;
  *(int8x8_t *)(a5 - 7 + v62) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v54 + v64.val[0].i64[0] - 7), *(int8x8_t *)(a5 - 7 + v62)), veor_s8(*(int8x8_t *)(v53 + v64.val[0].i64[0] - 7), *(int8x8_t *)(v64.val[0].i64[0] + v52 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v64, (int8x16_t)xmmword_193301A80), (int8x8_t)0x7F7F7F7F7F7F7F7FLL)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a51 + 8 * ((125 * (-(v56 & 0xFFFFFFF8) != v59)) ^ v61)) - 4))((__n128)xmmword_193301A80);
}

void sub_1930798F0()
{
  JUMPOUT(0x193079800);
}

uint64_t sub_1930798F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a72;
  uint64_t v72;

  return (*(uint64_t (**)(void))(v72
                              + 8 * (((a1 ^ 0x1173 ^ ((a1 + 3385) | 0x944)) * (LODWORD(STACK[0x200]) == a72)) ^ a1)))();
}

uint64_t sub_19307993C@<X0>(int a1@<W4>, int a2@<W5>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = (a1 - 1266400475);
  *(_BYTE *)(a3 + v8) ^= *(_BYTE *)(v6 + (v8 & 0xF)) ^ *(_BYTE *)(v5 + (v8 & 0xF)) ^ *(_BYTE *)((v8 & 0xF) + v4 + 1) ^ (127 * (v8 & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((45 * (a1 - 1 == v3)) ^ (a2 - 3393))) - 8))();
}

void sub_1930799A8()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 764474121)
    v1 = 1396931083;
  else
    v1 = 1396889059;
  *(_DWORD *)(v2 + 16) = v1;
}

void fp_dh_f9a3b9e2232551b7eee894a5f2c48fd2(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) - 2100007649 * ((a1 + 286538802 - 2 * (a1 & 0x11143C32)) ^ 0xDC1A3933);
  __asm { BR              X17 }
}

uint64_t sub_193079B44(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * (((((v2 - 4297) | 0xC04) ^ 0xD95)
                                          * (((2 * a2) & 0xFACF57CE ^ 0x90070006) + (a2 ^ 0xB7E42FF4) - 67510688 != 2036435527)) ^ v2))
                            - 8))();
}

uint64_t sub_193079BB4(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;

  return (*(uint64_t (**)(void))(v4
                              + 8
                              * ((((((a2 + v2 - 2103946215) < 8) ^ (v3 + 38)) & 1)
                                * (v3 + 1566)) ^ (v3 - 1856))))();
}

uint64_t sub_193079BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 + 8 * ((5676 * (v7 + ((11 * ((a7 - 863) ^ 0x6AD)) ^ 0x82985F03) > 0xFFFFFFEF)) ^ (a7 - 863)))
                                                                                       - ((a7 + 2853) | 0x41u)
                                                                                       + 5733))(a1, a2, a3, a4, a5, a4);
}

uint64_t sub_193079C54(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v21;

  v13 = (a2 + v7 + a3) + v11;
  v14 = ((_BYTE)a2 + (_BYTE)v7 + (_BYTE)a3) & 0xF;
  v15 = v14 + v9 - v13;
  v16 = (v14 | v8) - v13;
  v17 = v14 + v10 - v13;
  v21 = (unint64_t)(a5 - v11 - 0x31028A12A2045992) > 0xF
     && v15 >= (unint64_t)((a7 ^ 0x1D7Au) - 3766) - 1963
     && (unint64_t)(v16 + 5) > 0xF
     && v17 > 0xF;
  return (*(uint64_t (**)(void))(v12 + 8 * ((v21 | (16 * v21)) ^ a7)))();
}

uint64_t sub_193079CD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                                         + 8
                                                                                         * ((3538 * (v4 > 0xF)) ^ v5))
                                                                             - 12))(a1, a2, a3, a4, 0);
}

uint64_t sub_193079CFC(uint64_t a1, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16x4_t v18;
  int8x16x4_t v19;

  *(_DWORD *)(v12 - 208) = a4 - 1;
  *(_DWORD *)(v12 - 212) = a4 + 14;
  v18.val[1].i64[0] = ((_BYTE)a4 + 6) & 0xF;
  v18.val[1].i64[1] = ((_BYTE)a4 + 5) & 0xF;
  v18.val[2].i64[0] = ((_BYTE)a4 + 4) & 0xF;
  v18.val[2].i64[1] = ((_BYTE)a4 + 3) & 0xF;
  v18.val[3].i64[0] = ((_BYTE)a4 + 2) & 0xF;
  v18.val[3].i64[1] = ((_BYTE)a4 + 1) & 0xF;
  v13 = *(_QWORD *)(v12 - 224);
  v14.i64[0] = 0xA3A3A3A3A3A3A3A3;
  v14.i64[1] = 0xA3A3A3A3A3A3A3A3;
  v18.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)v4 + (_BYTE)a3) & 0xF;
  v18.val[0].i64[1] = ((_BYTE)a4 + 7) & 0xF;
  v15.i64[0] = vqtbl4q_s8(v18, (int8x16_t)xmmword_193301A70).u64[0];
  v19.val[0].i64[1] = *(_DWORD *)(v12 - 208) & 0xF;
  v19.val[1].i64[1] = ((_BYTE)a4 + 13) & 0xF;
  v19.val[2].i64[1] = ((_BYTE)a4 + 11) & 0xF;
  v19.val[3].i64[1] = ((_BYTE)a4 + 9) & 0xF;
  v19.val[0].i64[0] = a4 & 0xF;
  v19.val[1].i64[0] = *(_DWORD *)(v12 - 212) & 0xF;
  v19.val[2].i64[0] = ((_BYTE)a4 + 12) & 0xF;
  v19.val[3].i64[0] = ((_BYTE)a4 + 10) & 0xF;
  v15.i64[1] = vqtbl4q_s8(v19, (int8x16_t)xmmword_193301A70).u64[0];
  v16 = vrev64q_s8(vmulq_s8(v15, v14));
  *(int8x16_t *)(v11 - 15 + (a2 + v4 + a3)) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v7 + v18.val[0].i64[0] - 15), *(int8x16_t *)(v5 - 15 + (a2 + v4 + a3))), veorq_s8(*(int8x16_t *)(v18.val[0].i64[0] + v6 - 10), *(int8x16_t *)(v8 + v18.val[0].i64[0] - 15))), vextq_s8(v16, v16, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((470 * ((v9 & 0xFFFFFFF0) == 16)) ^ ((v10 - 411) | 0xD5)))
                            - ((((v10 - 411) | 0xD5) + 523) | 0x401u)
                            + 3317))();
}

void sub_193079E80()
{
  JUMPOUT(0x193079E00);
}

uint64_t sub_193079E8C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v3
                                                     + 8
                                                     * (((((((v2 - 5737) | 0xA97) - 665) | 0x580) ^ 0xDA8)
                                                       * (a2 == 0xCA838413)) ^ ((v2 - 5737) | 0xA97))))(a1, 1441537156);
}

uint64_t sub_193079EE8(uint64_t a1, int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;

  v12 = v9 > 0x4E654198;
  *(_BYTE *)(v10 + (a2 - 1441537156)) = *(_BYTE *)(v5 + ((a2 - 1441537156) & 0xFLL)) ^ *(_BYTE *)(v3 + (a2 - 1441537156)) ^ *(_BYTE *)((((_BYTE)a2 + 124) & 0xF) + v4 + 5) ^ *(_BYTE *)(v6 + (((_BYTE)a2 + 124) & 0xF)) ^ (((a2 + 124) & 0xF) * (v7 + 4));
  v13 = a2 + 1538171364;
  v14 = (a2 + 1);
  v15 = v12 ^ (v13 < v8);
  v16 = v13 < v2;
  if (!v15)
    v12 = v16;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8 * ((46 * !v12) ^ v7)))(a1, v14);
}

uint64_t sub_193079F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (int)(((((v6 + 460599429) & 0xE48BCFFF) - 3431) * (v5 == a5)) ^ v6))
                            - 4))();
}

uint64_t sub_193079FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  int v6;
  uint64_t v7;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v7
                                                                                                  + 8 * (int)(((((v6 + 2367) | 0x31) - 5722) * ((v5 >> 3) & 1)) ^ (v6 - 1365)))
                                                                                      - (v6 + 2416)
                                                                                      + 5733))(a1, a2, a3, a4, a5, (a4 - a5));
}

uint64_t sub_193079FFC(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  int8x16x4_t v19;

  *(_DWORD *)(v14 - 216) = v10;
  *(_QWORD *)(v14 - 208) = v12 - 7;
  *(_DWORD *)(v14 - 228) = v10 & 0xFFFFFFF8;
  *(_DWORD *)(v14 - 212) = 8 - (v10 & 0xFFFFFFF8);
  v15 = -a5;
  v16 = v11 + a2 + v5;
  v17 = a3 + a2 + v5 - 2737 + v15 + (v13 ^ 0x1CC0u);
  v19.val[0].i64[0] = ((_BYTE)a3 + (_BYTE)a2 + (_BYTE)v5 + 79 + (_BYTE)v15 + (v13 ^ 0xC0)) & 0xF;
  v19.val[0].i64[1] = (v16 + 7 + (_BYTE)v15) & 0xF;
  v19.val[1].i64[0] = (v16 + 6 + (_BYTE)v15) & 0xF;
  v19.val[1].i64[1] = (v16 + 5 + (_BYTE)v15) & 0xF;
  v19.val[2].i64[0] = (v16 + 4 + (_BYTE)v15) & 0xF;
  v19.val[2].i64[1] = (v16 + 3 + (_BYTE)v15) & 0xF;
  v19.val[3].i64[0] = (v16 + 2 + (_BYTE)v15) & 0xF;
  v19.val[3].i64[1] = (v16 + 1 + (_BYTE)v15) & 0xF;
  *(int8x8_t *)(*(_QWORD *)(v14 - 208) + v17) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v8 + (v17 & 0xF) - 7), *(int8x8_t *)(v6 - 7 + v17)), veor_s8(*(int8x8_t *)((v17 & 0xF) + v7 - 2), *(int8x8_t *)(v9 + (v17 & 0xF) - 7))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v19, (int8x16_t)xmmword_193301A80), (int8x8_t)0xA3A3A3A3A3A3A3A3)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(*(_QWORD *)(v14 - 224)
                                                     + 8 * ((7403 * (*(_DWORD *)(v14 - 212) == v15)) ^ (v13 - 2229)))
                                         - 8))((__n128)xmmword_193301A80);
}

void sub_19307A148()
{
  JUMPOUT(0x19307A070);
}

uint64_t sub_19307A150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v12
                                                                                                 + 8
                                                                                                 * (int)(((((*(_DWORD *)(v11 - 216) == *(_DWORD *)(v11 - 228)) ^ (v10 - 48)) & 1) * ((v10 + 1915292750) & 0x8DD6FF71 ^ 0x17CB)) ^ v10)))(a10, a2, a3, a4, a5, a6, (v10 - 2353) | 0xC06u);
}

uint64_t sub_19307A1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = (a6 - 2036435528);
  *(_BYTE *)(v13 + v15) = *(_BYTE *)(v10 + (v15 & 0xF)) ^ *(_BYTE *)(v8 + v15) ^ *(_BYTE *)((v15 & 0xF) + v9 + 5) ^ *(_BYTE *)(v11 + (v15 & 0xF)) ^ (-93 * (v15 & 0xF));
  return (*(uint64_t (**)(void))(v14 + 8 * (((a6 - 1 != v12) * ((a8 ^ 0x1BF7) + 3939)) ^ (a8 - 3008))))();
}

uint64_t sub_19307A21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;

  v10 = vrev64q_s8(*(int8x16_t *)*(_QWORD *)(a1 + 24));
  v11 = vextq_s8(v10, v10, 8uLL);
  v12.i64[0] = 0xE0E0E0E0E0E0E0E0;
  v12.i64[1] = 0xE0E0E0E0E0E0E0E0;
  v13 = vandq_s8(vaddq_s8(v11, v11), v12);
  v12.i64[0] = 0xF0F0F0F0F0F0F0F0;
  v12.i64[1] = 0xF0F0F0F0F0F0F0F0;
  v14 = veorq_s8(v11, v12);
  v12.i64[0] = 0x606060606060606;
  v12.i64[1] = 0x606060606060606;
  v15 = vrev64q_s8(veorq_s8(vaddq_s8(vaddq_s8(v14, v12), v13), (int8x16_t)xmmword_193301AB0));
  *(int8x16_t *)(v8 - 192) = vextq_s8(v15, v15, 8uLL);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 + 8 * (int)(a7 ^ (7312 * (v8 != 192)))) - 4))(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_19307A2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9
                              + 8
                              * (((((((a7 - 2936) | 0x580) - 88585207) & 0x547BF6F) - 4825) * (v7 == v8)) ^ ((a7 - 2936) | 0x580))))();
}

uint64_t sub_19307A2F0()
{
  int v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v2 - 128) = *v1;
  *(_BYTE *)(v2 - 127) = v1[1];
  *(_BYTE *)(v2 - 126) = v1[2];
  *(_BYTE *)(v2 - 125) = v1[3];
  *(_BYTE *)(v2 - 124) = v1[4];
  *(_BYTE *)(v2 - 123) = v1[5];
  *(_BYTE *)(v2 - 122) = v1[6];
  *(_BYTE *)(v2 - 121) = v1[7];
  *(_BYTE *)(v2 - 120) = v1[8];
  *(_BYTE *)(v2 - 119) = v1[9];
  *(_BYTE *)(v2 - 118) = v1[10];
  *(_BYTE *)(v2 - 117) = v1[11];
  *(_BYTE *)(v2 - 116) = v1[12];
  *(_BYTE *)(v2 - 115) = v1[13];
  *(_BYTE *)(v2 - 114) = v1[14];
  *(_BYTE *)(v2 - 113) = v1[15];
  *(_QWORD *)(v2 - 112) = *(_QWORD *)v1;
  *(_QWORD *)(v2 - 104) = *((_QWORD *)v1 + 1);
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((v0 + 2937) ^ (15 * (v1 != 0))))
                            - ((v0 + 2107500015) & 0x82621FF6)
                            + 3432))();
}

uint64_t sub_19307A3E0()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (v0 ^ (15 * (v1 != 0)))) - ((v0 + 2107497078) & 0x82621FF6) + 3432))();
}

uint64_t sub_19307A438@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  int v10;
  int v11;
  uint64_t v12;
  _BOOL4 v14;

  v14 = (((a10 & 0x9E) + ((a1 ^ v11) ^ 0xC1) + (_BYTE)v10 + 90 + 51) & 0xF) != 0
     || (a10 & 0xB56BDE9E) + (a1 ^ v11 ^ 0xDAB5E8C1) == -625610929;
  return ((uint64_t (*)(void))(*(_QWORD *)(v12 + 8 * ((242 * v14) ^ v10)) - (v10 + 1427) + 4867))();
}

uint64_t sub_19307A4A0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((1893
                                          * (((v0 == 0x29B2475E32DD0C06) ^ ((v1 ^ 0xD7) - 1)) & 1)) ^ v1))
                            - 12))();
}

uint64_t sub_19307A4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned __int8 v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned __int8 v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned __int8 v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  int v141;
  unsigned int v142;
  unsigned int v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  _BYTE *v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;

  v31 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v28 - 4942] - 4;
  v32 = (v28 - 2013206561) & 0x77FF0FD6;
  v33 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v28 ^ 0x15C9] - 8;
  v34 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v28 - 5170] - 8;
  v184 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v28 ^ 0x15E8] - 8;
  v35 = *(unsigned __int8 *)(v184 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BFFLL) ^ 0xBDLL)) ^ 0xFA | ((*(unsigned __int8 *)(v31 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0C02) ^ 0xAELL)) ^ 5) << 24) | (((*(_BYTE *)(v27 - 0x29B2475E32DD0C01) - ((2 * *(_BYTE *)(v27 - 0x29B2475E32DD0C01)) & 0xCC) + 102) ^ 0xEB ^ *(unsigned __int8 *)(v33 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0C01) ^ 0x1ELL))) << 16) | ((*(unsigned __int8 *)(v34 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0C00) ^ 0xCBLL)) ^ 0xFD) << 8);
  v186 = v33;
  v187 = v31;
  v36 = *(unsigned __int8 *)(v184 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BFBLL) ^ 0x74)) ^ 0xFA | ((*(unsigned __int8 *)(v33 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BFDLL) ^ 9)) ^ (*(_BYTE *)(v27 - 0x29B2475E32DD0BFDLL) - ((2 * *(_BYTE *)(v27 - 0x29B2475E32DD0BFDLL)) & 0xCC) + 102) ^ 0x6D) << 16) | ((*(unsigned __int8 *)(v34 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BFCLL) ^ 0xA6)) ^ 0x60) << 8) | ((*(unsigned __int8 *)(v31 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BFELL) ^ 0xFBLL)) ^ 0xFFFFFFF3) << 24);
  v37 = (((*(_BYTE *)(v27 - 0x29B2475E32DD0BF9)
                          - ((((v28 - 33) & 0xD6) + 70) & (2 * *(_BYTE *)(v27 - 0x29B2475E32DD0BF9)))
                          + 102) ^ *(unsigned __int8 *)(v33 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BF9) ^ 0x5BLL)) ^ 0xF0) << 16) | ((*(unsigned __int8 *)(v31 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BFALL) ^ 0x40)) ^ 0x4D) << 24) | *(unsigned __int8 *)(v184 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BF7) ^ 0xE4)) ^ 0xFA | ((*(unsigned __int8 *)(v34 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0BF8) ^ 0x1CLL)) ^ 0xA3) << 8);
  v185 = v34;
  v38 = *(unsigned __int8 *)(v184 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0C03) ^ 0xCALL)) ^ 0xFA | ((*(unsigned __int8 *)(v31 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0C06) ^ 0x80)) ^ 0xAD) << 24) | ((*(unsigned __int8 *)(v33 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0C05) ^ 0xDBLL)) ^ (*(_BYTE *)(v27 - 0x29B2475E32DD0C05) - ((2 * *(_BYTE *)(v27 - 0x29B2475E32DD0C05)) & 0xCC) + 102) ^ 0x92) << 16) | ((*(unsigned __int8 *)(v34 + (*(unsigned __int8 *)(v27 - 0x29B2475E32DD0C04) ^ 0x69)) ^ 0x37) << 8);
  *(_DWORD *)(v30 - 228) = v37 ^ 0xA59C93D2;
  *(_DWORD *)(v30 - 232) = v36 ^ 0xC0D8D365;
  *(_DWORD *)(v30 - 240) = v38 ^ 0x4177CDF9;
  *(_DWORD *)(v30 - 236) = v35 ^ 0xA570E944;
  HIDWORD(a11) = v26 + 625610929;
  *(_DWORD *)(v30 - 244) = 0;
  v39 = *(unsigned __int8 *)(v29 + 9);
  v40 = *(unsigned __int8 *)(v33 + (v39 ^ 0x92));
  HIDWORD(v193) = v32 ^ 0x1856;
  LODWORD(v31) = (v32 ^ 0x1856) - 3074;
  *(_DWORD *)(v30 - 248) = v31;
  v41 = *(unsigned __int8 *)(v29 + 1);
  v42 = *(unsigned __int8 *)(v33 + (v41 ^ 0x8A));
  *(_DWORD *)(v30 - 212) = v40 ^ (v39 + (v31 ^ 0xA8) - ((2 * v39) & 0xCC));
  *(_DWORD *)(v30 - 216) = v42 ^ (v41 - ((2 * v41) & 0xCC) + 102);
  v43 = *(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 15);
  v194 = *(unsigned __int8 *)(v184 + ((v43 - 2 * (v43 & 0x9Bu) + 155) ^ 0xF8));
  v44 = v32;
  LODWORD(v34) = *(unsigned __int8 *)(v187 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 4) ^ 0x79));
  v45 = *(unsigned __int8 *)(v184 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 7) ^ 0xC5)) ^ 0xFA | ((v34 ^ 0x1D) << 24);
  LODWORD(v41) = v194 ^ 0xFA | ((*(unsigned __int8 *)(v185
                                                    + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 14) ^ 0xE1)) ^ 0xE5) << 8);
  *(_QWORD *)(v30 - 208) = 3;
  v46 = *(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 5);
  v47 = (v46 - ((2 * v46) & 0xCC) + 102) ^ *(_BYTE *)(v33 + (v46 ^ 0xD2));
  v48 = *(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 13);
  LODWORD(v46) = v48 & 0xD9;
  v48 += 217;
  LODWORD(v46) = v48 - 2 * v46 - 1541469184 - ((2 * (v48 - 2 * v46)) & 0x483E1806) + 3;
  HIDWORD(v49) = v46 ^ 3;
  LODWORD(v49) = v46 ^ 0xA41F0C00;
  HIDWORD(v49) = (v49 >> 5) ^ 0x784FCDEF;
  LODWORD(v49) = HIDWORD(v49);
  HIDWORD(v49) = *(unsigned __int8 *)(v33 + ((v49 >> 27) ^ 0x9F9BD5ELL));
  LODWORD(v49) = (HIDWORD(v49) ^ 0x66666666) << 24;
  v50 = *(unsigned __int8 *)(v185 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 6) ^ 0x83));
  v51 = v45 & 0xFF00FFFF | ((v47 ^ 0xDD) << 16) | ((v50 ^ 0x90) << 8);
  v52 = **(unsigned __int8 **)(v30 - 200) ^ 0x96;
  LOBYTE(v48) = (v49 >> 25) ^ (((_BYTE)v48 << 7) | (v46 >> 1)) ^ 0xBD;
  v53 = *(unsigned __int8 *)(v187 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 12) ^ 0xCLL));
  LOBYTE(v46) = (((v48 & 0x80) != 0) | (2 * v48)) ^ 0xEF;
  LODWORD(v193) = v51;
  v54 = (v51 ^ 0xF22D40D7) & 0xA3CB4C70 ^ 0xCC75E8E1 ^ (((2 * (v51 ^ 0xF22D40D7)) & 0x40829814)
                                                      - ((v51 ^ 0xF22D40D7) & 0xA3CB4C8F)
                                                      + 1337893093);
  v55 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v44 ^ 0xCA1] - 4;
  v192 = *(unsigned __int8 *)(v187 + v52 - 2 * (v52 & 0xA1u) + 161);
  v56 = *(unsigned __int8 *)(v185 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 10) ^ 0x1FLL));
  v57 = v54 - ((2 * v54) & 0xFECB71C2) + 2137372897;
  v58 = v57 ^ 0xB124A44C ^ ((v57 ^ 0xFCAEF091) - ((2 * (v57 ^ 0xFCAEF091) + 568929370) & 0x9B14A9BA) - 562107638);
  v59 = v57 ^ 0xFCAEF059;
  HIDWORD(a26) = v44;
  v60 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v44 - 3388] - 4;
  v61 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v44 - 2913];
  v62 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v44 ^ 0xD80];
  v63 = (*(_DWORD *)(v55 + 4 * (v192 ^ 0xD6))
       + 2081293986
       - ((2 * *(_DWORD *)(v55 + 4 * (v192 ^ 0xD6)) + 233023854) & 0xEA3863D6)) ^ ((v56 ^ 0xD5)
                                                                                 - 489656942
                                                                                 + ((2 * (v56 ^ 0xD5) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ *(_DWORD *)(v61 + 4 * (v56 ^ 0xD3)) ^ (*(_DWORD *)(v60 + 4 * v59) - 141962737 + v58) ^ *(_DWORD *)(v62 + 4 * (v46 ^ 0x35u));
  v64 = *(_DWORD *)(v55 + 4 * (v34 ^ 0x67u));
  HIDWORD(a23) = ((v53 ^ 0x14) << 24) | (v46 << 16) | v41;
  LODWORD(v33) = HIDWORD(a23) ^ 0x24178EFB;
  v191 = *(unsigned __int8 *)(v184 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 11) ^ 0x75));
  v190 = *(unsigned __int8 *)(v187 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 8) ^ 0xFALL));
  v65 = *(_DWORD *)(v61 + 4 * (BYTE1(v33) - ((v33 >> 7) & 0xC) + 6)) ^ *(_DWORD *)(v62
                                                                                                 + 4
                                                                                                 * (*(_DWORD *)(v30 - 216) ^ 0x8Au)) ^ ((((v191 ^ 0x7C) - 1863018963) ^ v191 ^ 0x7C) - 141962737 + *(_DWORD *)(v60 + 4 * (v191 ^ 0xB4))) ^ (v64 + 2081293986 - ((2 * v64 + 233023854) & 0xEA3863D6)) ^ (BYTE1(v33) - 489656942 + ((2 * BYTE1(v33) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  v189 = *(unsigned __int8 *)(v185 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + 2) ^ 0x72));
  v66 = *(_DWORD *)(v62 + 4 * (v47 ^ 0x29u)) ^ ((v189 ^ 0x91)
                                                - 489656942
                                                + ((2 * (v189 ^ 0x91) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ *(_DWORD *)(v61 + 4 * (v189 ^ 0x97)) ^ (*(_DWORD *)(v55 + 4 * (v190 ^ 0xC)) + 2081293986 - ((2 * *(_DWORD *)(v55 + 4 * (v190 ^ 0xC)) + 233023854) & 0xEA3863D6)) ^ (*(_DWORD *)(v60 + 4 * (v194 ^ 0xC9)) - 141962737 + (((BYTE4(a23) ^ 0xFB) - 1863018963) ^ BYTE4(a23) ^ 0xFB));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (v53 ^ 0x3Bu));
  v188 = *(unsigned __int8 *)(v184 + (*(unsigned __int8 *)(*(_QWORD *)(v30 - 200) + *(_QWORD *)(v30 - 208)) ^ 0x60));
  LODWORD(v33) = *(_DWORD *)(v55 + 4 * (HIBYTE(v63) ^ 0x62));
  v67 = *(_DWORD *)(v62 + 4 * (*(_DWORD *)(v30 - 212) ^ 0x59u)) ^ ((v50 ^ 0x88)
                                                                   - 489656942
                                                                   + ((2 * (v50 ^ 0x88) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ *(_DWORD *)(v61 + 4 * (v50 ^ 0x8E)) ^ ((((v188 ^ 0xC9) - 1863018963) ^ v188 ^ 0xC9) - 141962737 + *(_DWORD *)(v60 + 4 * (v188 ^ 1))) ^ (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6));
  LODWORD(v46) = (v33 + 2081293986 - ((2 * v33 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4
                                                                                             * (BYTE2(v67) ^ 0x57u));
  LODWORD(v194) = -489656943;
  v68 = (v46 - 102803355 - ((2 * v46) & 0xF3BEB0CA)) ^ *(_DWORD *)(v61
                                                                 + 4
                                                                 * (((unsigned __int16)(v66 ^ 0x327B) >> 8) ^ 6u)) ^ (((unsigned __int16)(v66 ^ 0x327B) >> 8) - 489656943 - ((2 * ((unsigned __int16)(v66 ^ 0x327B) >> 8) + 1693872148) & 0x60A2630E)) ^ (*(_DWORD *)(v60 + 4 * (v65 ^ 0xCBu)) + (((v65 ^ 3) - 1863018963) ^ v65 ^ 3) - 141962737);
  LODWORD(v33) = *(_DWORD *)(v62 + 4 * ((v63 ^ 0x694FF1A2) >> 16));
  v69 = ((unsigned __int16)(v67 ^ 0x8A5B) >> 8);
  LODWORD(v50) = *(_DWORD *)(v61 + 4 * (v69 ^ 6u)) ^ ((v33 ^ 0xF51C31EB)
                                                      - 102803355
                                                      + ((2 * v33) & 0xF3BEB0CA ^ 0x1DC7DF3D)
                                                      + 1) ^ (*(_DWORD *)(v55 + 4 * (HIBYTE(v65) ^ 0x68)) - 2030971721) ^ ((((v66 ^ 0x7B) - 1863018963) ^ v66 ^ 0x7B) - 141962737 + *(_DWORD *)(v60 + 4 * (v66 ^ 0xB3u))) ^ (v69 - 489656942 + ((2 * v69 + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  LODWORD(v33) = *(_DWORD *)(v55 + 4 * (HIBYTE(v66) ^ 0x95));
  LODWORD(v33) = (v33 + 2081293986 - ((2 * v33 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4
                                                                                             * (BYTE2(v65) ^ 0x46u));
  LODWORD(v34) = *(_DWORD *)(v55 + 4 * (HIBYTE(v67) ^ 0x61));
  v70 = *(_DWORD *)(v61 + 4 * (((unsigned __int16)(v63 ^ 0xF1A2) >> 8) ^ 6u)) ^ (((unsigned __int16)(v63 ^ 0xF1A2) >> 8)
                                                                                                  - 1300547574) ^ ((((v67 ^ 0x5B) - 1863018963) ^ v67 ^ 0x5B) - 141962737 + *(_DWORD *)(v60 + 4 * (v67 ^ 0x93u))) ^ (v33 + 810890631 - ((2 * v33) & 0x60AA6B0E));
  LODWORD(v46) = (v34 + 2081293986 - ((2 * v34 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4
                                                                                             * (BYTE2(v66) ^ 0x9Fu));
  v71 = *(_DWORD *)(v61 + 4 * (BYTE1(v65) ^ 0x29u)) ^ ((BYTE1(v65) ^ 0x2F) - 1300547574) ^ ((((v63 ^ 0x22)
                                                                                              - 1863018963) ^ v63 ^ 0x22)
                                                                                            - 141962737
                                                                                            + *(_DWORD *)(v60 + 4 * (v63 ^ 0xEAu))) ^ (v46 + 810890631 - ((2 * v46) & 0x60AA6B0E));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v68) ^ 0xF1));
  v72 = ((unsigned __int16)(v70 ^ 0xE2D5) >> 8);
  v73 = *(_DWORD *)(v61 + 4 * (v72 ^ 6u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v71) ^ 0x94u)) ^ ((((v50 ^ 0xE9)
                                                                                               - 1863018963) ^ v50 ^ 0xE9)
                                                                                             - 141962737
                                                                                             + *(_DWORD *)(v60 + 4 * (v50 ^ 0x21u))) ^ (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6)) ^ (v72 - 489656942 + ((2 * v72 + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (BYTE3(v50) ^ 0xF7));
  v74 = *(_DWORD *)(v61 + 4 * (BYTE1(v71) ^ 0x41u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v68) ^ 0xF3u)) ^ ((((v70 ^ 0xD5) - 1863018963) ^ v70 ^ 0xD5) - 141962737 + *(_DWORD *)(v60 + 4 * (v70 ^ 0x1Du))) ^ (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6)) ^ ((BYTE1(v71) ^ 0x47) - 489656942 + ((2 * (BYTE1(v71) ^ 0x47) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  LODWORD(v46) = (((v71 & 0x85) + (v71 ^ 0x4648008F)) | 0x28B4FE00)
               - ((v71 ^ 0x4648008F) & 0x4400085);
  LODWORD(v33) = *(_DWORD *)(v55 + 4 * (HIBYTE(v70) ^ 0xF9));
  v75 = ((unsigned __int16)(v68 ^ 0xE47F) >> 8);
  LODWORD(v33) = *(_DWORD *)(v62 + 4 * (BYTE2(v50) ^ 0x8Au)) ^ (v75 - 1300547574) ^ (v33
                                                                                     + 2081293986
                                                                                     - ((2 * v33 + 233023854) & 0xEA3863D6));
  v76 = (*(_DWORD *)(v60 + 4 * (v46 ^ 0x6ABCFE4F))
       - 141962737
       + (v46 ^ 0xEA1CE881 ^ ((v46 ^ 0x6ABCFE87) - ((2 * (v46 ^ 0x6ABCFE87) + 32058458) & 0x1402C0C) + 294956083))) ^ *(_DWORD *)(v61 + 4 * (v75 ^ 6u)) ^ (v33 + 810890631 - ((2 * v33) & 0x60AA6B0E));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v71) ^ 0xF0));
  v77 = *(_DWORD *)(v62 + 4 * (BYTE2(v70) ^ 0x85u)) ^ ((BYTE1(v50) ^ 0x79)
                                                       - 489656942
                                                       + ((2 * (BYTE1(v50) ^ 0x79) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ *(_DWORD *)(v61 + 4 * (BYTE1(v50) ^ 0x7Fu)) ^ ((((v68 ^ 0x7F) - 1863018963) ^ v68 ^ 0x7F) - 141962737 + *(_DWORD *)(v60 + 4 * (v68 ^ 0xB7u))) ^ (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v73) ^ 0x2A));
  v78 = *(_DWORD *)(v61 + 4 * (BYTE1(v76) ^ 0x3Au)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v77) ^ 0x4Du)) ^ (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6)) ^ ((((v74 ^ 0x3B) - 1863018963) ^ v74 ^ 0x3B) - 141962737 + *(_DWORD *)(v60 + 4 * (v74 ^ 0xF3u))) ^ ((BYTE1(v76) ^ 0x3C) - 489656942 + ((2 * (BYTE1(v76) ^ 0x3C) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v74) ^ 2));
  HIDWORD(v49) = *(_DWORD *)(v62 + 4 * (BYTE2(v73) ^ 0x13u)) ^ 0xF9DF5865 ^ (v46
                                                                             + 2081293986
                                                                             - ((2 * v46 + 233023854) & 0xEA3863D6));
  LODWORD(v49) = HIDWORD(v49);
  LODWORD(v34) = *(_DWORD *)(v55
                           + 4
                           * (((((HIWORD(v76) ^ 0xF88C) & 0xFF00)
                                            - ((2 * (HIWORD(v76) ^ 0xF88C)) & 0x18E00)
                                            + 490981332) >> 8) ^ 0x1D43CC));
  v79 = (*(_DWORD *)(v60 + 4 * (v76 ^ 0x3Cu))
       + (((v76 ^ 0xF4) - 1863018963) ^ v76 ^ 0xF4)
       - 141962737) ^ __ROR4__((v49 >> 14) ^ __ROR4__((((unsigned __int16)(v77 ^ 0x5AF5) >> 8)- 489656942+ ((2 * ((unsigned __int16)(v77 ^ 0x5AF5) >> 8) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ *(_DWORD *)(v61 + 4 * (((unsigned __int16)(v77 ^ 0x5AF5) >> 8) ^ 6u)), 14) ^ 0x94913809, 18);
  LODWORD(v50) = *(_DWORD *)(v62 + 4 * (BYTE2(v74) ^ 0x25u)) ^ ((BYTE1(v73) ^ 0x70)
                                                                - 489656943
                                                                - ((2 * (BYTE1(v73) ^ 0x70) + 1693872148) & 0x60A2630E)) ^ *(_DWORD *)(v61 + 4 * (BYTE1(v73) ^ 0x76u)) ^ ((((v77 ^ 0xF5) - 1863018963) ^ v77 ^ 0xF5) - 141962737 + *(_DWORD *)(v60 + 4 * (v77 ^ 0x3Du))) ^ (v34 + 2081293986 - ((2 * v34 + 233023854) & 0xEA3863D6));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v77) ^ 0xD));
  LODWORD(v46) = (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4
                                                                                             * (BYTE2(v76) ^ 0x8Cu));
  LODWORD(v33) = *(_DWORD *)(v55 + 4 * (HIBYTE(v78) ^ 0xBB));
  v80 = *(_DWORD *)(v61 + 4 * (BYTE1(v74) ^ 0x64u)) ^ ((BYTE1(v74) ^ 0x62) - 1300547574) ^ ((((v73 ^ 0x18)
                                                                                              - 1863018963) ^ v73 ^ 0x18)
                                                                                            - 141962737
                                                                                            + *(_DWORD *)(v60 + 4 * (v73 ^ 0xD0u))) ^ (v46 + 810890631 - ((2 * v46) & 0x60AA6B0E));
  v81 = *(_DWORD *)(v61 + 4 * (BYTE1(v50) ^ 0xA7u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v80) ^ 0x9Du)) ^ (v33 + 2081293986 - ((2 * v33 + 233023854) & 0xEA3863D6)) ^ ((BYTE1(v50) ^ 0xA1) - 489656943 - ((2 * (BYTE1(v50) ^ 0xA1) + 1693872148) & 0x60A2630E)) ^ (*(_DWORD *)(v60 + 4 * (v79 ^ 7u)) + (((v79 ^ 0xCF) - 1863018963) ^ v79 ^ 0xCF) - 141962737);
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v79) ^ 0x9B));
  LODWORD(v46) = (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4
                                                                                             * (BYTE2(v78) ^ 0x32u));
  v82 = ((((v50 ^ 0x62) - 1863018963) ^ v50 ^ 0x62)
       - 141962737
       + *(_DWORD *)(v60 + 4 * (v50 ^ 0xAAu))) ^ *(_DWORD *)(v61
                                                                              + 4
                                                                              * (((unsigned __int16)(v80 ^ 0x99AC) >> 8) ^ 6u)) ^ (((unsigned __int16)(v80 ^ 0x99AC) >> 8) - 1300547574) ^ (v46 + 810890631 - ((2 * v46) & 0x60AA6B0E));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (BYTE3(v50) ^ 0xF5));
  v83 = *(_DWORD *)(v61 + 4 * (((unsigned __int16)(v78 ^ 0xBA79) >> 8) ^ 6u));
  HIDWORD(v49) = v83 ^ 0x13587;
  LODWORD(v49) = v83 ^ 0x30540000;
  LODWORD(v46) = *(_DWORD *)(v62 + 4 * (BYTE2(v79) ^ 0xB7u)) ^ 0xF9DF5865 ^ (v46
                                                                             + 2081293986
                                                                             - ((2 * v46 + 233023854) & 0xEA3863D6));
  LODWORD(v49) = __ROR4__(((((v78 ^ 0xB010BA79) << 6) & 0x3FC000) - 838685538) ^ 0xE7DB53E4 ^ (v49 >> 18), 14);
  LODWORD(v33) = *(_DWORD *)(v55 + 4 * (HIBYTE(v80) ^ 0xFA));
  v84 = ((v49 ^ 0x4F939F6D) + v46 - 2 * ((v49 ^ 0x4F939F6D) & v46)) ^ ((((v80 ^ 0xAC) - 1863018963) ^ v80 ^ 0xAC)
                                                                     - 141962737
                                                                     + *(_DWORD *)(v60
                                                                                 + 4 * (v80 ^ 0x64u)));
  v85 = *(_DWORD *)(v62 + 4 * (BYTE2(v50) ^ 0xF5u)) ^ (((unsigned __int16)(v79 ^ 0xD0CF) >> 8)
                                                       - 489656942
                                                       + ((2 * ((unsigned __int16)(v79 ^ 0xD0CF) >> 8)
                                                         + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ *(_DWORD *)(v61 + 4 * (((unsigned __int16)(v79 ^ 0xD0CF) >> 8) ^ 6u)) ^ (v33 + 2081293986 - ((2 * v33 + 233023854) & 0xEA3863D6)) ^ ((((v78 ^ 0x79) - 1863018963) ^ v78 ^ 0x79) - 141962737 + *(_DWORD *)(v60 + 4 * (v78 ^ 0xB1u)));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v81) ^ 0x7C));
  v86 = BYTE1(v82) ^ 0xA8;
  v87 = *(_DWORD *)(v61 + 4 * (BYTE1(v84) ^ 0xEDu)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v85) ^ 0x34u)) ^ (v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6)) ^ ((((v82 ^ 0x5A) - 1863018963) ^ v82 ^ 0x5A) - 141962737 + *(_DWORD *)(v60 + 4 * (v82 ^ 0x92u))) ^ ((BYTE1(v84) ^ 0xEB) - 489656942 + ((2 * (BYTE1(v84) ^ 0xEB) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  LODWORD(v46) = *(_DWORD *)(v55 + 4 * (HIBYTE(v82) ^ 0x93));
  v88 = v46 + 2081293986 - ((2 * v46 + 233023854) & 0xEA3863D6);
  if ((v84 & 0x8000000) != 0)
    v89 = 8;
  else
    v89 = -8;
  v90 = *(_DWORD *)(v61 + 4 * (BYTE1(v85) ^ 0xC1u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v81) ^ 0x9Bu)) ^ v88 ^ (*(_DWORD *)(v60 + 4 * (v84 ^ 0xECu)) + (((v84 ^ 0x24) - 1863018963) ^ v84 ^ 0x24) - 141962737) ^ ((BYTE1(v85) ^ 0xC7) - 489656942 + ((2 * (BYTE1(v85) ^ 0xC7) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  v91 = *(_DWORD *)(v55 + 4 * ((v89 + (HIBYTE(v84) ^ 0x2F)) ^ 3));
  v92 = (v91 + 2081293986 - ((2 * v91 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v82) ^ 4u));
  v93 = *(_DWORD *)(v61 + 4 * (BYTE1(v81) ^ 0x6Du)) ^ ((BYTE1(v81) ^ 0x6B) - 1300547574) ^ (v92
                                                                                            + 810890631
                                                                                            - ((2 * v92) & 0x60AA6B0E));
  v94 = (((v85 ^ 0x63) - 1863018963) ^ v85 ^ 0x63)
      - 141962737
      + *(_DWORD *)(v60 + 4 * (v85 ^ 0xABu));
  v95 = v94 + 1128720618 - ((2 * v94) & 0x868DD1D4);
  v96 = (v93 ^ 0x12B663A5) & 0xED7C5E39 ^ 0xC92E8DCA ^ (((v93 ^ 0x12B663A5) & 0xED6C5E39)
                                                      - ((2 * (v93 ^ 0x12B663A5)) & 0x40882C10)
                                                      + 541497290);
  v97 = ((2 * v96) & 0xB9F14BE2) - v96 - 1559864822;
  v98 = (v97 ^ 0xB591BFF5) + 85403670 - ((2 * (v97 ^ 0xB591BFF5) + 2) & 0xA2E502C);
  v99 = v95 ^ 0xF3C07F09 ^ v97;
  v100 = v97 ^ 0x4F79681C;
  if (v90 == -102803355)
    v99 = v100;
  v101 = v95 ^ 0x4346E8EA;
  if (((v99 ^ 0x5172816) & v101) != 0)
    v100 = v98 + 1;
  v102 = ((v100 ^ 0x5172816) + v101) ^ v93 & 0xFFEFFFFF;
  v103 = *(_DWORD *)(v55 + 4 * (HIBYTE(v85) ^ 0xB));
  v104 = *(_DWORD *)(v61 + 4 * (v86 ^ 6u));
  v105 = (v103 + 2081293986 - ((2 * v103 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v84) ^ 0x1Cu)) ^ (((v86 - 1300547574) ^ (1300547574 - v86) ^ ((v104 ^ 0x30553587) - (v104 ^ (v86 - 489656942 + ((2 * (v86 - 1300547574)) & 0x30E ^ 0x9F5D9FFF))))) + (v104 ^ 0x30553587));
  v106 = (((v81 ^ 0xC2) - 1863018963) ^ v81 ^ 0xC2)
       - 141962737
       + *(_DWORD *)(v60 + 4 * (v81 ^ 0xAu));
  v107 = (v105 ^ 0xF9DF5865 ^ -(v105 ^ 0xF9DF5865) ^ (v106 + (v106 ^ 0x620A79A ^ v105) + 1)) + v106;
  v108 = v107 - ((2 * v107) & 0xA916CFE8);
  v109 = *(_DWORD *)(v55 + 4 * (HIBYTE(v87) ^ 0xFB));
  v110 = ((BYTE1(v102) ^ 0x19) + ((v102 >> 7) & 0xFA ^ 0xC8) + 3);
  v111 = BYTE1(v90) ^ 0x3C;
  v112 = *(_DWORD *)(v61 + 4 * (v110 ^ 6u)) ^ *(_DWORD *)(v62 + 4 * ~((v108 - 729061388) >> 16)) ^ (v109 + 2081293986 - ((2 * v109 + 233023854) & 0xEA3863D6)) ^ ((((v90 ^ 0x35) - 1863018963) ^ v90 ^ 0x35) - 141962737 + *(_DWORD *)(v60 + 4 * (v90 ^ 0xFDu))) ^ (v110 - 489656942 + ((2 * v110 + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  v113 = *(_DWORD *)(v55 + 4 * (HIBYTE(v90) ^ 0xEB));
  v114 = *(_DWORD *)(v61 + 4 * (((unsigned __int16)(v108 + 26612) >> 8) ^ 0xB2u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v87) ^ 0x63u)) ^ (v113 + 2081293986 - ((2 * v113 + 233023854) & 0xEA3863D6)) ^ ((((unsigned __int16)(v108 + 26612) >> 8) ^ 0xB4) - 489656942 + ((2 * (((unsigned __int16)(v108 + 26612) >> 8) ^ 0xB4) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ (*(_DWORD *)(v60 + 4 * (v102 ^ 0x7Eu)) + (((v102 ^ 0xB6) - 1863018963) ^ v102 ^ 0xB6) - 141962737);
  v115 = *(_DWORD *)(v55 + 4 * (HIBYTE(v102) ^ 0x4A));
  v116 = ((unsigned __int16)(v87 ^ 0x3308) >> 8);
  v117 = *(_DWORD *)(v62 + 4 * (BYTE2(v90) ^ 0xC3u)) ^ (v116 - 489656942 + ((2 * v116 + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ *(_DWORD *)(v61 + 4 * (v116 ^ 6u)) ^ (*(_DWORD *)(v60 + 4 * ((v108 - 12) ^ 0xD6u)) + ((((v108 - 12) ^ 0x1E) - 1863018963) ^ (v108 - 12) ^ 0x1E) - 141962737) ^ (v115 + 2081293986 - ((2 * v115 + 233023854) & 0xEA3863D6));
  v118 = *(_DWORD *)(v55 + 4 * ((729061387 - v108) >> 24));
  v119 = (((v87 ^ 8) - 1863018963) ^ v87 ^ 8)
       - 141962737
       + *(_DWORD *)(v60 + 4 * (v87 ^ 0xC0u));
  v120 = (v111 - 489656942 + ((2 * v111 + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ 0xF9DF5865 ^ *(_DWORD *)(v61 + 4 * (v111 ^ 6u)) ^ (v118 + 2081293986 - ((2 * v118 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v102) ^ 0x8Bu));
  v121 = (v119 & 0x40000 | ((((v119 & 0x40000u) >> 18) & 1) << 19)) ^ 0x6F177DAD;
  v122 = ((v121 - 1863810477) & v120) == 0;
  v123 = v121 - 167968905;
  v124 = -735315247 - v121;
  if (v122)
    v124 = v123;
  v125 = *(_DWORD *)(v55 + 4 * (HIBYTE(v112) ^ 0x13));
  v126 = (v120 - 1695841572 + v124) ^ v119 & 0xFFFBFFFF;
  v127 = ((v117 >> 7) & 0x14 ^ 4) + (BYTE1(v117) ^ 0xB27B382D);
  v128 = *(_DWORD *)(v61 + 4 * (BYTE1(v117) ^ 0x21u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v126) ^ 0xB3u)) ^ (v127 + 810890631 + ((2 * v127) & 0x30E ^ 0x9F5D9FFF) + 1) ^ (v125 + 2081293986 - ((2 * v125 + 233023854) & 0xEA3863D6));
  v129 = *(_DWORD *)(v60 + 4 * (v114 ^ 0x58u))
       + (((v114 ^ 0x90) - 1863018963) ^ v114 ^ 0x90)
       + 227466484;
  v130 = v128 ^ 0xF9DF5865 ^ -(v128 ^ 0xF9DF5865) ^ (v129 - 369429221 + (v128 ^ (v129 - 369429221) ^ 0x620A79A) + 1);
  v131 = *(_DWORD *)(v55 + 4 * (HIBYTE(v114) ^ 0x14));
  v132 = *(_DWORD *)(v61 + 4 * (BYTE1(v126) ^ 0xCEu)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v112) ^ 0xC5u)) ^ (v131 + 2081293986 - ((2 * v131 + 233023854) & 0xEA3863D6)) ^ (*(_DWORD *)(v60 + 4 * (v117 ^ 0xE6u)) + (((v117 ^ 0x2E) - 1863018963) ^ v117 ^ 0x2E) - 141962737) ^ ((BYTE1(v126) ^ 0xC8) - 489656942 + ((2 * (BYTE1(v126) ^ 0xC8) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  v133 = *(_DWORD *)(v55 + 4 * (HIBYTE(v117) ^ 0xA5));
  v134 = *(_DWORD *)(v61 + 4 * (BYTE1(v112) ^ 0xF3u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v114) ^ 0xFCu)) ^ (*(_DWORD *)(v60 + 4 * (v126 ^ 0x39u)) + (v126 ^ 0xF1 ^ (((2 * v126) & 0x5A ^ 0x42) + (v126 ^ 0x90F496DC))) - 141962737) ^ ((BYTE1(v112) ^ 0xF5) - 489656942 + ((2 * (BYTE1(v112) ^ 0xF5) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  v135 = *(_DWORD *)(v55 + 4 * (HIBYTE(v126) ^ 0x65));
  v136 = v134 ^ (v133 + 2081293986 - ((2 * v133 + 233023854) & 0xEA3863D6));
  v137 = v135 + 2081293986 - ((2 * v135 + 233023854) & 0xEA3863D6);
  v138 = ((2 * (v129 + 1611418370 + v130)) & 0x13DD5432) + ((v129 + 1611418370 + v130) ^ 0x89EEAA19);
  v139 = *(_DWORD *)(v61 + 4 * (BYTE1(v114) ^ 0xF6u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v117) ^ 4u)) ^ ((BYTE1(v114) ^ 0xF0) - 489656942 + ((2 * (BYTE1(v114) ^ 0xF0) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ (*(_DWORD *)(v60 + 4 * (v112 ^ 0x5Eu)) + (((v112 ^ 0x96) - 1863018963) ^ v112 ^ 0x96) - 141962737) ^ v137;
  v140 = v138 - ((2 * v138) & 0x35E9C2D2) - 1695227543;
  v141 = *(_DWORD *)(v55 + 4 * (HIBYTE(v140) ^ 0xDB));
  v142 = v132 ^ 0x847FAAB;
  v143 = *(_DWORD *)(v61 + 4 * (BYTE1(v136) ^ 0x2Eu)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v139) ^ 0x34u)) ^ (*(_DWORD *)(v60 + 4 * (v132 ^ 0x63u)) + (((v132 ^ 0xAB) - 1863018963) ^ v132 ^ 0xAB) - 141962737) ^ ((BYTE1(v136) ^ 0x28) - 489656942 + ((2 * (BYTE1(v136) ^ 0x28) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ (v141 + 2081293986 - ((2 * v141 + 233023854) & 0xEA3863D6));
  v144 = *(_DWORD *)(v55 + 4 * (HIBYTE(v132) ^ 3));
  v145 = *(_DWORD *)(v61 + 4 * (BYTE1(v139) ^ 0x4Eu)) ^ (v144 + 2081293986 - ((2 * v144 + 233023854) & 0xEA3863D6)) ^ ((BYTE1(v139) ^ 0x48) - 489656942 + ((2 * (BYTE1(v139) ^ 0x48) + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF)) ^ (*(_DWORD *)(v60 + 4 * (v136 ^ 0xDBu)) + (((v136 ^ 0x13) - 1863018963) ^ v136 ^ 0x13) - 141962737) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v140) ^ 0xEEu));
  v146 = *(_DWORD *)(v55 + 4 * (HIBYTE(v136) ^ 0xB5));
  v147 = ((2 * v146 + 1874874884) & 0x9E23576A) + ((v146 - 1210046206) ^ 0xCF11ABB5);
  v148 = ((unsigned __int16)(v140 ^ 0x14CC) >> 8);
  v149 = *(_DWORD *)(v61 + 4 * (v148 ^ 6u)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v132) ^ 0x65u)) ^ ((((v139 ^ 0x17)
                                                                                                  - 1863018963) ^ v139 ^ 0x17)
                                                                                                - 141962737
                                                                                                + *(_DWORD *)(v60 + 4 * (v139 ^ 0xDFu))) ^ (v147 - 182701589 - ((2 * v147) & 0xEA3863D6)) ^ (v148 - 489656942 + ((2 * v148 + 20) & 0xFFFFFF0F ^ 0x9F5D9FFF));
  v150 = *(_DWORD *)(v55 + 4 * (HIBYTE(v139) & 0xA ^ ((HIBYTE(v139) & 0xF4 ^ 0x3F) - (HIBYTE(v139) & 1)) ^ 2));
  v151 = (v150 + 2081293986 - ((2 * v150 + 233023854) & 0xEA3863D6)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v136) ^ 0xA4u));
  v152 = *(_DWORD *)(v61 + 4 * (BYTE1(v142) - ((v142 >> 7) & 0xC) + 6)) ^ (BYTE1(v142) - 1300547574) ^ (v151 + 810890631 - ((2 * v151) & 0x60AA6B0E)) ^ (*(_DWORD *)(v60 + 4 * (v140 ^ 4u)) + (((v140 ^ 0xCC) - 1863018963) ^ v140 ^ 0xCC) - 141962737);
  v153 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) ^ 0xDE4] - 4;
  v154 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) - 2936];
  v155 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) ^ 0xCA6] - 4;
  v156 = *(_DWORD *)(v155 + 4 * (HIBYTE(v143) ^ 0xEE));
  v157 = *(_DWORD *)(v155 + 4 * (HIBYTE(v145) ^ 0x85));
  v158 = *(_DWORD *)(v155 + 4 * (HIBYTE(v149) ^ 0x88));
  LODWORD(v155) = *(_DWORD *)(v155 + 4 * (HIBYTE(v152) ^ 0xB6));
  v159 = *(_DWORD *)(v153 + 4 * ((v143 ^ 0x689E3955) >> 16));
  v160 = *(_DWORD *)(v153 + 4 * (BYTE2(v152) ^ 0x78u)) ^ *(_DWORD *)(v154 + 4 * (BYTE1(v149) ^ 0xE1u)) ^ v156;
  v161 = *(_DWORD *)(v153 + 4 * (BYTE2(v145) ^ 0x48u));
  v162 = *(_DWORD *)(v153 + 4 * (BYTE2(v149) ^ 0x29u));
  v163 = (v152 >> 8) ^ 0xB6743B;
  v164 = BYTE1(v152) ^ 0x3B;
  v165 = *(_DWORD *)(v154 + 4 * (BYTE1(v152) ^ 0x53u));
  v166 = ((unsigned __int16)(v143 ^ 0x3955) >> 8);
  LODWORD(v153) = *(_DWORD *)(v154 + 4 * (v166 ^ 0x68u));
  v167 = *(_DWORD *)(v154 + 4 * (BYTE1(v145) ^ 0x64u));
  v168 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) ^ 0xFC0];
  v169 = v160 ^ ((BYTE1(v149) ^ 0x89) - 1171866225 + (~(2 * ((v149 >> 8) ^ 0xE2589)) | 0xFFFFFEE1) + 1);
  v170 = *(_DWORD *)(v168 + 4 * (v149 ^ 0xB3u));
  v171 = *(_DWORD *)(v168 + 4 * (v152 ^ 0xFu));
  LODWORD(v154) = *(_DWORD *)(v168 + 4 * (v143 ^ 0x47u));
  v172 = *(_DWORD *)(v168 + 4 * (v145 ^ 0x60u)) ^ *(_DWORD *)(v30 - 240) ^ ((v169 ^ 0xD878E504)
                                                                                             - 449343491
                                                                                             - 2
                                                                                             * ((v169 ^ 0xD878E504) & 0x65378FFF ^ v169 & 2));
  v173 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) - 2713] - 12;
  LODWORD(v168) = *(unsigned __int8 *)(v173 + (BYTE2(v172) ^ 0x96));
  HIDWORD(v174) = v168 ^ 8;
  LODWORD(v174) = ~(_DWORD)v168 << 24;
  LODWORD(v168) = ((2 * (v174 >> 30)) & 0xFFFFFFFB) + ((v174 >> 30) ^ 0xFFFFFFFD);
  *(_BYTE *)(*(_QWORD *)(v30 - 200) + 1) = ((16 * v168 + 48) * (v168 + 3)
                                            + v168
                                            + 3
                                            - 2 * (((16 * v168 + 48) * (v168 + 3)) & (v168 + 3))) ^ 0xA2;
  LODWORD(v168) = (v164 - 1171866225 - ((2 * v163) & 0x11E)) ^ v165;
  LODWORD(v168) = (v168 - ((2 * v168) & 0x240F43A4) + 302490066) ^ v157;
  LODWORD(v168) = (v168 - ((2 * v168) & 0x94FE89AC) - 897628970) ^ v159;
  v175 = v170 ^ *(_DWORD *)(v30 - 236);
  v176 = *(_BYTE **)(v30 - 200);
  v177 = v175 ^ (v168 - 449343491 - ((2 * v168) & 0xCA6F1FFA));
  v178 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) ^ 0xCEA] - 8;
  LODWORD(v168) = *(unsigned __int8 *)(v178 + (BYTE1(v177) ^ 0x65));
  v176[6] = v168 ^ 0x50 ^ (((v168 >> 3) ^ (v168 >> 2) ^ 0x29)
                         - ((2 * ((v168 >> 3) ^ (v168 >> 2))) & 0x24)
                         + 18);
  LODWORD(v168) = (v166 - 1171866225 - (((v143 ^ 0x689E3955) >> 7) & 0x11E)) ^ 0xD878E504 ^ v158 ^ v161 ^ v153;
  v179 = v171 ^ *(_DWORD *)(v30 - 232) ^ ((_DWORD)v168 - 449343491 - ((2 * (_DWORD)v168) & 0xCA6F1FFA));
  v180 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) ^ 0xFCD] - 8;
  LOBYTE(v168) = *(_BYTE *)(v180 + (BYTE3(v179) ^ 0x4ALL));
  v176[8] = v168 ^ (106 - ((8 * v168) & 0xCF ^ 0x40)) ^ 0xE0;
  LODWORD(v168) = v155 ^ (BYTE1(v145) - 1171866225 - ((v145 >> 7) & 0x11E)) ^ v162 ^ v167;
  v181 = v154 ^ *(_DWORD *)(v30 - 228) ^ ((v168 ^ 0xD878E504)
                                                      - 449343491
                                                      - 2 * ((v168 ^ 0xD878E504) & 0x65378FFF ^ v168 & 2));
  LODWORD(v168) = *(unsigned __int8 *)(v173 + (BYTE2(v181) ^ 4));
  HIDWORD(v174) = v168 ^ 8;
  LODWORD(v174) = ~(_DWORD)v168 << 24;
  LODWORD(v168) = (v174 >> 30) - ((2 * (v174 >> 30)) & 0x12) + 9;
  v176[13] = v168 ^ 0x51 ^ ((((16 * v168) ^ 0x90) * (v168 ^ 9)) | 9);
  LOBYTE(v168) = *(_BYTE *)(v180 + (HIBYTE(v177) ^ 0x7CLL));
  v176[4] = v168 ^ (8 * (v168 & 6 ^ 4 | v168 ^ 0xAA)) ^ 0xD3;
  v182 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[HIDWORD(a26) - 3208] - 12;
  v176[15] = *(_BYTE *)(v182 + (v181 ^ 0x67)) ^ 0x53 ^ (((*(_BYTE *)(v182
                                                                                      + (v181 ^ 0x67)) >> 3) & 0x14 ^ 0x10)
                                                                         - ((*(_BYTE *)(v182
                                                                                      + (v181 ^ 0x67)) >> 2) & 8)
                                                                         - 116);
  LODWORD(v168) = *(unsigned __int8 *)(v178 + (BYTE1(v181) ^ 0xD7));
  v176[14] = v168 ^ (v168 >> 3) ^ (v168 >> 2) ^ 0x23;
  LODWORD(v168) = *(unsigned __int8 *)(v182 + (v179 ^ 0x7BLL));
  LODWORD(v168) = (v168 ^ 0xFFFFFF8C) + ((2 * v168) & 0xFFFFFF92 ^ 0xFFFFFFEF) + 74;
  v176[11] = v168 ^ (v168 >> 3) & 0x14 ^ 0x3C;
  LOBYTE(v168) = *(_BYTE *)(v178 + (BYTE1(v172) ^ 0x9ELL));
  LODWORD(v153) = ((v168 ^ 0xC4) >> 3) ^ ((v168 ^ 0xC4) >> 2);
  v176[2] = v168 ^ 0xD6 ^ (v153 - ((2 * v153) & 0xBB) + 29);
  v176[*(_QWORD *)(v30 - 208)] = *(_BYTE *)(v182 + (v172 ^ 0x4CLL)) ^ 0x35 ^ (((*(_BYTE *)(v182 + (v172 ^ 0x4CLL)) >> 3) & 0x14 ^ 0x10)
                                                                                             - ((*(_BYTE *)(v182 + (v172 ^ 0x4CLL)) >> 2) & 8)
                                                                                             - 116);
  LODWORD(v168) = *(unsigned __int8 *)(v173 + (BYTE2(v179) ^ 0x82));
  HIDWORD(v174) = v168 ^ 8;
  LODWORD(v174) = ~(_DWORD)v168 << 24;
  LODWORD(v168) = (v174 >> 30) - ((2 * (v174 >> 30)) & 0xFFFFFFD2) - 23;
  v176[9] = v168 ^ 0x82 ^ (16 * (v168 ^ 9) * (v168 ^ 9) - ((32 * (v168 ^ 9) * (v168 ^ 9)) & 0xC0) - 23);
  LOBYTE(v168) = *(_BYTE *)(v180 + (BYTE3(v181) ^ 0xA2));
  v176[12] = v168 ^ 0xC6 ^ (8 * v168) & 0xCF;
  *v176 = *(_BYTE *)(v180 + (HIBYTE(v172) ^ 0x32)) ^ (8
                                                      * ((*(_BYTE *)(v180 + (HIBYTE(v172) ^ 0x32)) & 6 ^ 4)
                                                       + (*(_BYTE *)(v180 + (HIBYTE(v172) ^ 0x32)) ^ 0x1A))) ^ 6;
  v176[7] = *(_BYTE *)(v182 + (v177 ^ 0x4BLL)) ^ 0xA7 ^ (((*(_BYTE *)(v182
                                                                                     + (v177 ^ 0x4BLL)) >> 3) & 0x14 ^ 0x10)
                                                                        - ((*(_BYTE *)(v182
                                                                                     + (v177 ^ 0x4BLL)) >> 2) & 8)
                                                                        - 116);
  LODWORD(v168) = *(unsigned __int8 *)(v173 + (BYTE2(v177) ^ 0x56));
  HIDWORD(v174) = v168 ^ 8;
  LODWORD(v174) = ~(_DWORD)v168 << 24;
  LODWORD(v168) = (v174 >> 30) - ((2 * (v174 >> 30)) & 0x32) - 103;
  v176[5] = v168 ^ 0x49 ^ (16 * (v168 ^ 9) * (v168 ^ 9) - 32 * (((v168 ^ 9) * (v168 ^ 9)) & 1) - 103);
  LOBYTE(v168) = *(_BYTE *)(v178 + (BYTE1(v179) ^ 0xA1));
  LOBYTE(v173) = ((v168 ^ 0xC4) >> 3) ^ ((v168 ^ 0xC4) >> 2);
  v176[10] = v173 & 0xF3 ^ (v168 ^ 0xD9) & 0x73 | v173 & 0xC ^ (v168 ^ 0xD9) & 0x8C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 - 224) + 8 * ((6432 * (HIDWORD(a11) > 0x10)) ^ HIDWORD(a26))) - 4))(v181, v182, 130, v179, 20, fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3, 286, 3123101071, a9, a10, a11, v184, v185, v186, v187, a16, v188, v189, v190,
           v191,
           v56,
           v192,
           a23,
           v193,
           v194,
           a26,
           8,
           2,
           6,
           11,
           13,
           12,
           10);
}

void sub_19307CE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32)
{
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;

  v33 = ((*(_DWORD *)(v32 - 216) ^ 0x81) << 16) | ((a27 ^ 0xD2) << 24) | ((a19 ^ 0xC) << 8) | a17 ^ 0xFA;
  v34 = (a21 << 24) | ((a25 ^ 0x91) << 8) | ((*(_DWORD *)(v32 - 212) ^ 0xE2) << 16) | a23 ^ 0xFA;
  *(_DWORD *)(v32 - 236) = a31 ^ 0xD884F877;
  *(_DWORD *)(v32 - 228) = (((a32 + 712231383) & 0xD58C2DDE) - 1683865792) ^ a30;
  *(_DWORD *)(v32 - 240) = v33 ^ 0xA72CE67F;
  v35 = v34 ^ 0x58;
  if ((a25 & 0x80u) != 0)
    v36 = 0x8000;
  else
    v36 = -32768;
  *(_DWORD *)(v32 - 232) = (v35 + v36) ^ 0x65D10CC2;
  JUMPOUT(0x19307A8A4);
}

uint64_t sub_19307CF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;

  return ((uint64_t (*)(void))(*(_QWORD *)(v19
                                        + 8
                                        * ((25
                                          * (((2 * (a10 - (a18 & 0xEEE41402) + v18 + 2071804297)) & 0xFA7FFF9C ^ 0xEA641400)
                                           + ((a10 - (a18 & 0xEEE41402) + v18 + 2071804297) ^ 0xA4DF5CF)
                                           + 402063224 == 355925830)) ^ v18))
                            - 4))();
}

uint64_t sub_19307D03C(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((53
                                          * (a2 + a1 + ((v2 - 4036) | 0x625u) + 46131990 + 3559 < ((383 * (v2 ^ 0x10DB)) ^ 0x1679u))) ^ v2))
                            - 12))();
}

uint64_t sub_19307D0CC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((104
                                          * (a3 + a8 + 149 * (a7 ^ 0x728u) + 1066 >= (((a7 ^ 0x73A) * a4) ^ 0xFFFFE981))) ^ a7))
                            - 4))();
}

uint64_t sub_19307D120(int a1, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BOOL4 v19;
  int v21;
  int v23;

  v9 = a2 + a1 + a3 + (a4 ^ 0x690u) - 342;
  v10 = v9 + v7 + 1;
  v11 = v9 & 0xF;
  v12 = v6 + v11 - v9;
  v13 = v6 + v11 + 1;
  v14 = v4 + v11 - v9;
  v15 = v4 + v11 + 1;
  v16 = v5 + v11 + 1 - v9;
  v17 = v11 + v5 + 2;
  v19 = v13 > v7 && v12 < v10;
  v21 = v15 > v7 && v14 < v10 || v19;
  if (v17 <= v7 || v16 >= v10)
    v23 = v21;
  else
    v23 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((588 * (v23 ^ 1)) ^ a4)) - 12))();
}

uint64_t sub_19307D1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  unsigned int v7;
  uint64_t v8;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v8
                                                                                        + 8
                                                                                        * (((a7 ^ 0x1525) * (v7 > 0xF)) ^ a7))
                                                                            - (((a7 - 1242) | 0x68Cu) ^ 0x16C1)))(a1, a2, a3, 0, a7 ^ 0x36Au);
}

uint64_t sub_19307D1FC(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16x4_t v21;
  int8x16x4_t v22;

  v12 = *(_QWORD *)(v11 - 200) - 15;
  v21.val[1].i64[0] = (v9 + 7) & 0xF;
  v21.val[1].i64[1] = (v9 + 6) & 0xF;
  v21.val[2].i64[0] = (v9 + 5) & 0xF;
  v21.val[2].i64[1] = (v9 + 4) & 0xF;
  v21.val[3].i64[0] = (v9 + 3) & 0xF;
  v21.val[3].i64[1] = (v9 + 2) & 0xF;
  v22.val[0].i64[0] = (v9 + 1) & 0xF;
  v22.val[0].i64[1] = v9 & 0xF;
  v13 = *(_QWORD *)(v11 - 224);
  v14 = a2 + a1 + 46137393;
  v22.val[1].i64[0] = (v9 - 1) & 0xF;
  v22.val[1].i64[1] = (v9 + 14) & 0xF;
  v22.val[2].i64[0] = (v9 + 13) & 0xF;
  v22.val[2].i64[1] = (v9 + 12) & 0xF;
  v22.val[3].i64[0] = (v9 + 11) & 0xF;
  v22.val[3].i64[1] = (v9 + 10) & 0xF;
  v15.i64[0] = 0x8D8D8D8D8D8D8D8DLL;
  v15.i64[1] = 0x8D8D8D8D8D8D8D8DLL;
  v16.i64[0] = 0x4A4A4A4A4A4A4A4ALL;
  v16.i64[1] = 0x4A4A4A4A4A4A4A4ALL;
  v21.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)a1 + 49) & 0xF;
  v21.val[0].i64[1] = (v9 + 8) & 0xF;
  v17.i64[0] = vqtbl4q_s8(v21, (int8x16_t)xmmword_193301A70).u64[0];
  v17.i64[1] = vqtbl4q_s8(v22, (int8x16_t)xmmword_193301A70).u64[0];
  v18 = vrev64q_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v12 + v14), *(int8x16_t *)(v8 + (v14 & 0xF) - 15)), *(int8x16_t *)(v6 + (v14 & 0xF) - 15)), *(int8x16_t *)(v7 + (v14 & 0xF) + ((a6 - 1503270606) & 0x599A17DF ^ 0x17DELL) - 15)));
  v19 = vrev64q_s8(veorq_s8(veorq_s8(vextq_s8(v18, v18, 8uLL), v16), vmulq_s8(v17, v15)));
  *(int8x16_t *)(v12 + v14) = vextq_s8(v19, v19, 8uLL);
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((4035 * ((v10 & 0xFFFFFFF0) == 16)) ^ a6)) - 12))();
}

void sub_19307D38C()
{
  JUMPOUT(0x19307D304);
}

uint64_t sub_19307D398(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return (*(uint64_t (**)(void))(v9 + 8 * (int)((((((a8 + 6702748) & 0xFF99B7F5) - 1424) ^ 0x10DA) * (v8 == a4)) ^ a8)))();
}

uint64_t sub_19307D3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  char v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8
                                        + 8
                                        * ((1530 * ((((v7 & 8) == 0) ^ (3 * (a7 ^ 0x9A))) & 1)) ^ a7))
                            - 12))();
}

uint64_t sub_19307D40C(int a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  int8x16x4_t v20;

  *(_DWORD *)(v14 - 212) = v9;
  *(_DWORD *)(v14 - 208) = v11;
  v15 = -a4;
  v16 = a2 + a1;
  v17 = v10 + a2 + a1;
  v18 = (v16 + v13 + v15);
  v20.val[0].i64[0] = v18 & 0xF;
  v20.val[0].i64[1] = (v17 + 8 + (_BYTE)v15) & 0xF;
  v20.val[1].i64[0] = (v17 + 7 + (_BYTE)v15) & 0xF;
  v20.val[1].i64[1] = (v17 + 6 + (_BYTE)v15) & 0xF;
  v20.val[2].i64[0] = (v8 + (_BYTE)v15 + (_BYTE)a5 - 60) & 0xF;
  v20.val[2].i64[1] = (v17 + 4 + (_BYTE)v15) & 0xF;
  v20.val[3].i64[0] = (v17 + 3 + (_BYTE)v15) & 0xF;
  v20.val[3].i64[1] = (v17 + 2 + (_BYTE)v15) & 0xF;
  *(int8x8_t *)(v12 - 7 + v18) = vrev64_s8(veor_s8(veor_s8(vrev64_s8(veor_s8(veor_s8(*(int8x8_t *)(v12 - 7 + v18), *(int8x8_t *)(v7 + v20.val[0].i64[0] - 7)), veor_s8(*(int8x8_t *)(v5 + v20.val[0].i64[0] - 7), *(int8x8_t *)(v20.val[0].i64[0] + v6 - 6)))), (int8x8_t)0x4A4A4A4A4A4A4A4ALL), vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v20, (int8x16_t)xmmword_193301A80), (int8x8_t)0x8D8D8D8D8D8D8D8DLL)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(*(_QWORD *)(v14 - 224)
                                                     + 8 * ((484 * (8 - (v9 & 0xFFFFFFF8) == v15)) ^ (a5 - 3976)))
                                         - 12))((__n128)xmmword_193301A80);
}

void sub_19307D540()
{
  JUMPOUT(0x19307D468);
}

uint64_t sub_19307D548@<X0>(int a1@<W1>, int a2@<W8>)
{
  uint64_t v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (a1 ^ (3810 * (*(_DWORD *)(v2 - 212) == a2))))
                            - ((a1 + 288987204) & 0xEEC676F7 ^ 0x1675)))();
}

uint64_t sub_19307D590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = (a6 - 355925831);
  *(_BYTE *)(v10 + v12) ^= *(_BYTE *)(v9 + (v12 & 0xF)) ^ *(_BYTE *)(v7 + (v12 & 0xF)) ^ *(_BYTE *)((v12 & 0xF) + v8 + 1) ^ (-115 * (v12 & 0xF)) ^ 0x4A;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((1421 * (a6 - 1 != v6)) ^ (a5 - 3226))) - 4))();
}

void sub_19307D600()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1265468671)
    v1 = 1396931083;
  else
    v1 = 1396889059;
  *(_DWORD *)(v2 + 36) = v1;
}

void df35957c4e0()
{
  int v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[1] = 710021923
        - 1194633773 * ((1646942973 - (v0 | 0x622A5AFD) + (v0 | 0x9DD5A502)) ^ 0x542CF2E5);
  fp_dh_319bdb6023f2d8b43338e15ab46e6717(v0);
  __asm { BR              X8 }
}

uint64_t sub_19307D73C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unint64_t *a14, unsigned int a15)
{
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a14 = &STACK[0x2AE6FD99665E33E3];
  a15 = 1715670589 * (((&a13 | 0x7BF37972) - (&a13 & 0x7BF37972)) ^ 0x5EC298D0) + 2289;
  fp_dh_b8f7f0c268b22e5dc7f380e39a6f3ee4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 + 8 * ((818 * (a13 == v16)) ^ 0x499u))
                                                                                       - 4))(v17, v18, v19, v20, v21, v22);
}

uint64_t sub_19307D7D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int a14, unsigned int a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v21 = ((&a13 & 0xB4EF77B6 | ~(&a13 | 0xB4EF77B6)) ^ 0xB0EFDE86) * v17;
  a14 = v21 + 2055;
  a15 = v16 - ((2 * v16) & 0xA8133250) - 737568472 + v21;
  a13 = a10;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * ((2 * (a16 == v19)) | (4 * (a16 == v19)) | v20))
                                                                                       - 4))(v22, v23, v24, v25, v26, v27);
}

uint64_t sub_19307D860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14, uint64_t a15, unsigned int a16, unint64_t *a17, unsigned int a18)
{
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;

  v20 = 544512889 * ((((2 * &a13) | 0x13B662EE) - &a13 + 1982123657) ^ 0xAFE0D6D5);
  a18 = v20 + 1348444305;
  a14 = -897452682 - v20;
  a16 = 260146304 - v20;
  a17 = &STACK[0x16A78FCC143D0F89];
  a15 = a10;
  v21 = fp_dh_f54151dc8d4759a5df06023817f471a8((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((7588 * (a13 == v19)) ^ 0x499u)) - 4))(v21);
}

uint64_t sub_19307D91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12, _BYTE *a13, unsigned int a14, unsigned int a15, char *a16, _BYTE *a17)
{
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  a14 = 583213109 * ((2 * (&a14 & 0x485F4178) - &a14 - 1214202240) ^ 0xA2059093) + 3503;
  a16 = &a12;
  a17 = a13;
  ((void (*)(unsigned int *))(*(_QWORD *)(v19 + 2280) - 8))(&a14);
  a15 = 3645
      - 1779849041
      * ((((2 * (&a14 ^ 0xF7D47A08)) | 0x4B920D72) - (&a14 ^ 0xF7D47A08) + 1513552199) ^ 0x67C468CA);
  a16 = a13;
  v21 = fp_dh_a3f856c06909c1c78375f5adc976da00((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v18 + 8 * ((7635 * (a14 == v20)) ^ v17)) - 4))(v21);
}

uint64_t sub_19307D9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v12
                                        + 8 * (((a12 == 0) * ((v13 - 606110622) & 0xDB5FB95A ^ 0xDB5F3926)) ^ v13))
                            - ((v13 - 606110622) ^ 0x8046A5u)
                            + 3680450838))();
}

uint64_t sub_19307DA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * (((a10 != 0) * ((v10 - v13) ^ 0x195F)) ^ (v12 + v10 + 357))) - 4))();
}

uint64_t sub_19307DACC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, int a8)
{
  uint64_t (*v8)(char *);
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  a7 = a1;
  a8 = v11 - (((&a6 | 0xB57656D7) - (&a6 & 0xB57656D7)) ^ 0x4E890018) * v9 + v13;
  v14 = v8(&a6);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8 * (((a3 != 0) * ((v13 - v12) ^ 0x195F)) ^ (v11 + v13 + 357)))
                                          - 4))(v14);
}

uint64_t sub_19307DB44@<X0>(int a1@<W8>)
{
  uint64_t v1;
  void (*v2)(uint64_t *);
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v8 = a1 - ((((2 * &v6) | 0xEDDA403A) - &v6 - 1995251741) ^ 0x8D1276D2) * v3 - 357;
  v7 = v1;
  v2(&v6);
  return (v4 - 1396931083);
}

_DWORD *fp_dh_47c984ad9527015ece0e813883f1f0fc(_DWORD *result)
{
  unsigned int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;

  v1 = 544512889 * ((2 * (result & 0x2EB55B17) - (_DWORD)result + 1363846376) ^ 0x7771434A);
  v2 = result[10] + v1;
  v3 = result[7] ^ v1;
  v4 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v2 - 877568578] - 12;
  if (v3 == 1721831736)
    __asm { BR              X13 }
  if (v3 == 1721831734)
    __asm { BR              X15 }
  *result = 1396889052;
  return result;
}

uint64_t sub_19307E1A4@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned __int8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  int v151;
  int v152;

  LODWORD(a24) = 0;
  v60 = a1 + 0x2935A15E9FA3CE6DLL;
  LODWORD(a38) = v57 + 1318860767;
  LODWORD(a26) = v56 ^ 0xCF2;
  HIDWORD(a3) = 1289085918;
  LODWORD(a4) = (v56 ^ 0xCF2) + 1289082952;
  v61 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDBALL);
  v62 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB5);
  v141 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB1);
  v147 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB2);
  v63 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB0);
  v64 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDADLL);
  v150 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDAFLL);
  v65 = *(unsigned __int8 *)(v59 - 0x7798F82510AEEDAELL);
  v139 = v58;
  LODWORD(a25) = 519576516;
  v66 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE67);
  v67 = v59;
  v140 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE6DLL) ^ *(unsigned __int8 *)(v59 - 0x7798F82510AEEDBBLL);
  v143 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE6CLL) ^ v61;
  v144 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE6BLL) ^ *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB9);
  v145 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE6ALL) ^ *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB8);
  v146 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE69) ^ *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB7);
  v68 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE68) ^ *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB6);
  v152 = v66 ^ v62;
  LODWORD(a27) = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE65) ^ *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB3);
  v151 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE66) ^ *(unsigned __int8 *)(v59 - 0x7798F82510AEEDB4);
  v69 = *(_BYTE *)(v60 - 0x2935A15E9FA3CE64) ^ v147;
  v142 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE64) ^ v147;
  v70 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE63) ^ v141;
  v71 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE5FLL) ^ v64;
  v148 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE62) ^ v63;
  v72 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE60) ^ v65;
  v73 = *(unsigned __int8 *)(v67 - 0x7798F82510AEEDACLL);
  v74 = *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE61) ^ v150;
  v149 = v73 ^ *(unsigned __int8 *)(v60 - 0x2935A15E9FA3CE5ELL);
  v75 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[(int)(a26 ^ 0xA65)] - 12;
  v76 = (*(_QWORD *)(v75 + 8 * (v140 ^ 0x167)) >> 18) ^ 0xDAA36731;
  v77 = (*(_QWORD *)(v75 + 8 * ((*(_BYTE *)(v60 - 0x2935A15E9FA3CE6CLL) ^ v61) ^ 0x166)) >> 18) ^ 0xDAA36731;
  v78 = v77 + 398678981 - ((2 * v77) & 0x2F86B78A);
  v79 = (*(_QWORD *)(v75 + 8 * (v144 ^ 0x165)) >> 18) ^ 0xDAA36731;
  v80 = (*(_QWORD *)(v75 + 8 * (v145 ^ 0x64u)) >> 18) ^ 0xDAA36731;
  v81 = v80 + 112231604 - ((2 * v80) & 0xD610968);
  v82 = (*(_QWORD *)(v75 + 8 * (v146 ^ 0x63u)) >> 18) ^ 0xDAA36731;
  v83 = v82 + 2023169269 - ((2 * v82) & 0xF12E39EA);
  v84 = ((4 * v83) ^ 0xE25C73D4) + 2023169269 - ((2 * ((4 * v83) ^ 0xE25C73D4) + 424) & 0xF12E39E8);
  v85 = (*(_QWORD *)(v75 + 8 * (v68 ^ 0x62u)) >> 18) ^ 0xDAA36731;
  v86 = v85 + 1760885325 - ((2 * v85) & 0xD1E9F49A);
  v87 = ((4 * v86) ^ 0xA3D3E934) + 1760885325 - ((2 * ((4 * v86) ^ 0xA3D3E934) + 424) & 0xD1E9F498);
  v88 = (*(_QWORD *)(v75 + 8 * ((v66 ^ v62) ^ 0x161)) >> 18) ^ 0xDAA36731;
  v89 = (*(_QWORD *)(v75 + 8 * (v151 ^ 0x160)) >> 18) ^ 0xDAA36731;
  v90 = v89 + 1930109521 - ((2 * v89) & 0xE61644A2);
  v91 = v76 - ((2 * v76) & 0x53C15A9C) - 1444893362;
  v92 = (((4 * v91) ^ 0xA782B538) + 212) ^ (v79 - 420880557 - ((2 * v79) & 0xCDD3BEA6)) ^ v81 ^ (((4 * v78) ^ 0x5F0D6F14)
                                                                                               + 212) ^ v83 ^ v86 ^ (v88 - 711473662 - ((2 * v88) & 0xAB2F8C04)) ^ v90 ^ (((4 * (v79 - 420880557 - ((2 * v79) & 0xCDD3BEA6))) ^ 0x9BA77D4C) - 420880557 - ((2 * ((4 * (v79 - 420880557 - ((2 * v79) & 0xCDD3BEA6))) ^ 0x9BA77D4C) + 424) & 0xCDD3BEA0) + 212) ^ (((4 * v81) ^ 0x1AC212D0) + 112231604 - ((2 * ((4 * v81) ^ 0x1AC212D0) + 424) & 0xD610968) + 212) ^ (((4 * (v88 - 711473662 - ((2 * v88) & 0xAB2F8C04))) ^ 0x565F1808) - 711473450);
  v93 = ((4 * v90) ^ 0xCC2C8944) + 1930109521 - ((2 * ((4 * v90) ^ 0xCC2C8944) + 424) & 0xE61644A0) + 212;
  v94 = ((v92 ^ (v84 + 212) ^ (v87 + 212) ^ v93)
       + 398678981
       - ((2 * (v92 ^ (v84 + 212) ^ (v87 + 212) ^ v93)) & 0x2F86B78A)) ^ v78;
  v95 = (v94 - ((2 * v94) & 0x9C) + 78) ^ v91;
  v96 = (*(_QWORD *)(v75 + 8 * (a27 ^ 0x67u)) >> 18) ^ 0x2601DAA36731;
  v98 = (((4 * (v96 - ((2 * v96) & 0x2A0D7804) + 352762882)) ^ 8) + 214) ^ (v96 - ((2 * v96) & 0x2A0D7804) + 352762882);
  v99 = v98 ^ 0x65;
  v100 = (v98 ^ 0x1A) + ((2 * v98) ^ 0xFFFFFFCB);
  v101 = v99 + 127;
  if ((v96 & 1) != 0)
    v102 = v100 + 1;
  else
    v102 = v101;
  v103 = ~(2 * v95) + v95;
  v97 = *(_QWORD *)(v75 + 8 * (v69 ^ 0x166));
  v104 = ((v97 >> 18) ^ 0xDAA36731) - ((2 * ((v97 >> 18) ^ 0xDAA36731)) & 0x877042A4) - 1011343022;
  v105 = (*(_QWORD *)(v75 + 8 * ((*(_BYTE *)(v60 - 0x2935A15E9FA3CE63) ^ v141) ^ 0x165)) >> 18) ^ 0xDAA36731;
  v106 = v105 - ((2 * v105) & 0x5B02396A) + 763436213;
  v107 = (*(_QWORD *)(v75 + 8 * (v148 ^ 0x164)) >> 18) ^ 0xDAA36731;
  v108 = (*(_QWORD *)(v75 + 8 * ((*(_BYTE *)(v60 - 0x2935A15E9FA3CE61) ^ v150) ^ 0x163)) >> 18) ^ 0xDAA36731;
  v109 = (((4 * (v108 - ((2 * v108) & 0x6674F154) - 1288013654)) ^ 0xCCE9E2A8)
        - ((2 * ((4 * (v108 - ((2 * v108) & 0x6674F154) - 1288013654)) ^ 0xCCE9E2A8) + 40) & 0x50)
        + 126) ^ (v108 - ((2 * v108) & 0x6674F154) - 1288013654);
  v110 = (*(_QWORD *)(v75 + 8 * (v72 ^ 0x62u)) >> 18) ^ 0xDAA36731;
  v111 = ((~(2 * ((4 * (v110 - ((2 * v110) & 0x1699DE56) + 189591339)) ^ 0x2D33BCAC) + 40) | 0xAF)
        + ((4 * (v110 - ((2 * v110) & 0x1699DE56) + 189591339)) ^ 0x2D33BCAC)) ^ (v110
                                                                                - ((2 * v110) & 0x1699DE56u)
                                                                                + 189591339);
  v112 = (*(_QWORD *)(v75 + 8 * (v71 ^ 0x61u)) >> 18) ^ 0xDAA36731;
  v113 = (((4 * (v112 - ((2 * v112) & 0xBE0E5ADE) - 553177745)) ^ 0x7C1CB5BC)
        - ((2 * ((4 * (v112 - ((2 * v112) & 0xBE0E5ADE) - 553177745)) ^ 0x7C1CB5BC) + 168) & 0xD8)
        + 67) ^ (v112 - ((2 * v112) & 0xBE0E5ADE) - 553177745);
  v114 = (*(_QWORD *)(v75 + 8 * (v149 ^ 0x60u)) >> 18) ^ 0xDAA36731;
  v115 = v114 - ((2 * v114) & 0xA5F9232) - 2060465895;
  v116 = (4 * v115) ^ 0x14BF2464;
  v117 = (2 * (_BYTE)v116 + 40) & 0x30;
  v118 = (v116 - v117 + 237) ^ v115;
  v119 = v143 ^ ((((_DWORD)a26 - 2940) | 0x501) - 127);
  v120 = v70 ^ 0xFFFFFFCB;
  v121 = v109 ^ v102 ^ v111 ^ v106 ^ v104 ^ (v107 - ((2 * v107) & 0xE932328E) - 191293113) ^ (((4 * v104) ^ 0xEE08548)
                                                                                            - ((2
                                                                                              * ((4 * v104) ^ 0xEE08548)
                                                                                              + 168) & 0xA0)
                                                                                            + 38) ^ (((4 * v106) ^ 0xB60472D4) - ((2 * ((4 * v106) ^ 0xB60472D4) + 40) & 0x68) + 137) ^ (((4 * (v107 - ((2 * v107) & 0xE932328E) - 191293113)) ^ 0xD264651C) - ((2 * ((4 * (v107 - ((2 * v107) & 0xE932328E) - 191293113)) ^ 0xD264651C) + 168) & 0x88) + 27) ^ v113 ^ v118 ^ (v103 - 128);
  v122 = v140 ^ 0x7D ^ (v121 - ((2 * v121) & 0xFFFFFFFB) + 125);
  v123 = (v122 - ((2 * v122) & 0x38) - 100) ^ v119;
  v124 = (v123 - ((2 * v123) & 0xFFFFFF87) + 67) ^ v144 ^ 0x43;
  v125 = v145 ^ 0x72 ^ (v124 - ((2 * v124) & 0xFFFFFFE4) + 114);
  v126 = v146 ^ 0xFFFFFFFA ^ (v125 - ((2 * v125) & 0xFFFFFFF4) - 6);
  v127 = v68 ^ 0xFFFFFFD4 ^ (v126 - ((2 * v126) & 0xFFFFFFA8) - 44);
  v128 = v152 ^ 0x63 ^ (v127 - ((2 * v127) & 0xFFFFFFC7) + 99);
  v129 = a27 ^ 0xFFFFFF99 ^ (v128 - ((2 * v128) & 0x32) - 103);
  v130 = v142 ^ 0x68 ^ (v129 - ((2 * v129) & 0xFFFFFFD0) + 104);
  v131 = (v130 - ((2 * v130) & 0xFFFFFF96) - 53) ^ v120;
  v132 = v148 ^ 0xFFFFFFA3 ^ (v131 - ((2 * v131) & 0x46) - 93);
  v133 = v74 ^ 0x33 ^ (v132 - ((2 * v132) & 0x66) + 51);
  v134 = (v133 - ((2 * v133) & 0x5E) + 47) ^ v71 ^ 0x2F;
  v135 = v149 ^ v72 ^ 0xFFFFFFE0 ^ (v134 - (v134 >> 5 << 6) - 32);
  v136 = v135 ^ v151;
  v137 = (v135 ^ v151) ^ 0x6ALL;
  HIDWORD(a32) = v71 ^ 0x2F;
  LODWORD(a31) = v72 ^ 0xFFFFFFE0;
  LODWORD(a30) = v136 ^ *(unsigned __int8 *)(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[(int)a26 - 2369] - 8 + v137);
  LODWORD(a29) = v70 ^ 0xFFFFFFCB;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a50 + 8 * (int)a26) - 8))(v120, v119, v109, v111, v113, v137, v117, 98, a2, a3, a4, &a56, a6, a7, a8, a9, a10, a11, a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           v60,
           a20,
           a21,
           a22,
           v139,
           a24,
           a25,
           a26,
           a27,
           v140,
           a29,
           a30,
           a31,
           a32,
           v70,
           v72,
           v71,
           v74,
           v136,
           a38,
           &STACK[0x2B0],
           v142,
           v143,
           v144,
           v145);
}

uint64_t sub_19307EEAC@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v54 = (v50 - 1287) | 0xE83;
  v55 = *(unsigned __int8 *)(a48 + (a33 ^ 0xF1)) ^ *(unsigned __int8 *)(a48
                                                                                         + ((v53 ^ a10) ^ 0x40));
  v56 = (v55 + (~(2 * v55) | 0x69) - 52) ^ a29;
  v57 = *(unsigned __int8 *)(a48 + (a34 ^ 0xF1)) ^ *(unsigned __int8 *)(a48
                                                                                         + ((a9 ^ v53) ^ 0x11));
  v58 = (v57 - (v57 >> 5 << 6) - 32) ^ a31;
  v59 = a30 & 7 ^ 6;
  v60 = (((a30 & 0xF8) >> 3) ^ 5)
      - 1247019116
      - ((2 * (((a30 & 0xF8) >> 3) ^ 5)) & 0x28u);
  v61 = *(_QWORD *)(a1 + 8 * ((v59 | 0xAD5FFCA0) ^ 0xAD5FFDC7));
  *((_QWORD *)&v62 + 1) = v61 ^ 0x102C8;
  *(_QWORD *)&v62 = v61 ^ 0x98076A8D9CC40000;
  v63 = (v62 >> 18)
      + 0x30A8D74E968F2315
      - (((unint64_t)(v62 >> 18) << ((v54 + 103) & 0xE9 ^ 0xE9u)) & 0x6151AE9D2D1E462ALL);
  *(_QWORD *)(a5 + 8 * (v60 ^ 0xB5ABFF94)) = v63 ^ 0xC4FAF98AEDED159ALL ^ (((((4 * v63) ^ 0xC2A35D3A5A3C8C54)
                                                                                           - 0x673FB3036C7A742CLL) ^ (v52 | v51))
                                                                                         + 0x30A8D74E968F2315
                                                                                         - ((2
                                                                                           * ((((4 * v63) ^ 0xC2A35D3A5A3C8C54)
                                                                                             - 0x673FB3036C7A742CLL) ^ (v52 | v51))) & 0x6151AE9D2D1E462ALL));
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a50 + 8 * v54) - 4))(v59, a47, (2 * v56) & 0xFFFFFFDF, (a9 ^ v53) ^ 2u ^ (v58 - ((2 * v58) & 0xC4) - 30), (v56 + 111), v60, 3047948181, (v54 - 2114025113) & 0x7E016BE9, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,
           a13,
           a14,
           a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a16 ^ v53 ^ 0x5A,
           a12 ^ v53 ^ 0x2A,
           HIDWORD(a9) ^ v53 ^ 0x13u,
           v53 ^ 0x3D ^ a8,
           a25,
           a9 ^ v53 ^ 0xFFFFFFCA,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37);
}

uint64_t sub_19307F754(uint64_t a1, uint64_t a2, char a3, int a4, char a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,int a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  int v335;
  uint64_t v336;
  unint64_t v337;
  int v338;
  int v339;
  int v340;
  int v341;
  unsigned int v342;
  unint64_t v343;
  int v344;
  int v345;
  unint64_t v346;
  uint64_t v347;
  __int128 v348;
  unint64_t v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unsigned int v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  uint64_t v401;
  unint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  uint64_t v517;
  unint64_t v518;
  unint64_t v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  unint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  unint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  unint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  unsigned int v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t v607;
  unint64_t v608;
  uint64_t v609;
  unint64_t v610;
  unint64_t v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  unint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  uint64_t v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  unint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  unint64_t v638;
  uint64_t v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  unint64_t v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  unint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  unint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  unint64_t v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  unint64_t v715;
  unint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  unint64_t v727;
  unint64_t v728;
  unint64_t v729;
  unint64_t v730;
  char v731;
  unsigned __int8 v732;
  char v733;
  char v734;
  unint64_t v735;
  uint64_t v736;
  char v737;
  char v738;
  int v739;
  int v740;
  char v741;
  int v742;
  char v743;
  char v744;
  int v745;
  char v746;
  char v747;
  uint64_t v748;
  char v749;
  char v750;
  _BOOL4 v751;
  unint64_t v753;
  unint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  unint64_t v759;
  unint64_t v760;
  unint64_t v761;
  unint64_t v762;
  uint64_t v763;
  unint64_t v764;
  unint64_t v765;
  unint64_t v766;
  unint64_t v767;
  unint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;

  v69 = a59 ^ (v65 - v63) ^ (a8 + 124) ^ 0xBF;
  v70 = (((a8 + 872677475) | 0x4AA030) + 372194887) ^ (v64 + (v61 | (a4 << 24)));
  v71 = v70 - ((2 * v70) & 0x111934C34) - 0x2F5B87F8773659E6;
  v72 = ((v66 + v69) ^ 0x1F78831Cu)
      - (unint64_t)((2 * ((v66 + v69) ^ 0x1F78831C)) & 0x4A51B552)
      + 0x3650AFD22528DAA9;
  v73 = (a51 + (v59 | (v62 << 8))) ^ 0xE80C6D4A;
  v74 = v73 - ((2 * (_DWORD)v73) & 0x46BCF54C) + 0x19899BAE235E7AA6;
  v75 = *(unsigned __int8 *)(a46 + (BYTE1(v72) ^ 0xDALL));
  v76 = *(unsigned __int8 *)(a46 + (BYTE1(v74) ^ v68));
  v77 = *(unsigned __int8 *)(a46 + ((a53 ^ (a5 - a3)) ^ 0xFELL));
  v78 = *(unsigned __int8 *)(a46 + (BYTE2(v74) ^ 0x5ELL));
  v79 = ((v60 + ((a53 ^ (a5 - a3)) ^ 0xBC)) ^ 0xED0A4E42)
      - (unint64_t)((2 * ((v60 + ((a53 ^ (a5 - a3)) ^ 0xBC)) ^ 0xED0A4E42)) & 0x4ADF5B14)
      + 0x37044931256FAD8ALL;
  v80 = *(unsigned __int8 *)(a46 + (BYTE2(v72) ^ 0x28));
  v81 = *(unsigned __int8 *)(a46 + ((v74 >> 24) ^ 0x19899BAE23));
  v82 = *(unsigned __int8 *)(a46 + ((v72 >> 24) ^ 0x3650AFD225));
  v83 = *(unsigned __int8 *)(a46 + (v61 ^ 0xC2));
  v84 = *(unsigned __int8 *)(a46 + (v69 ^ 0x1CLL));
  v85 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[a8 ^ 0x2F6u] - 4;
  v86 = ((*(_QWORD *)(v85 + 8 * (v76 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6)
      + 0x7431B5DBD2CE105DLL
      - ((2 * ((*(_QWORD *)(v85 + 8 * (v76 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6)) & 0x636BB7A59C20BALL);
  v87 = *(_QWORD *)(v85 + 8 * (v75 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v87 ^ 0x4F;
  *(_QWORD *)&v88 = v87 ^ 0x767FE1B5B696B600;
  v89 = (v88 >> 8) - 0x1CD9872D90DB7806 - ((2 * (v88 >> 8)) & 0xC64CF1A4DE490FF4);
  v90 = *(_QWORD *)(v85 + 8 * (v77 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v90 ^ 0x4F;
  *(_QWORD *)&v88 = v90 ^ 0x767FE1B5B696B600;
  v91 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x5EF6F28A50F0130ALL) + 0x2F7B794528780985;
  v92 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v71) ^ 0xA6)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v93 = *(_QWORD *)(v85 + 8 * (v80 ^ 0x22));
  LODWORD(v86) = (((v91 ^ 0x3D054F682E9AF8FBLL) + (v91 & 0x127E362D06E2F17ELL ^ 0xEFFBF9D7F97D0F85) + 1) >> 35) ^ HIDWORD(v91) ^ (((((v86 >> 3) & 0x393A5F230000 ^ 0x303A5A010000) + 0x7431B5DBD2CE105DLL - ((2 * ((v86 >> 3) & 0x393A5F230000 ^ 0x303A5A010000)) & 0x6234A4040000)) ^ v86) >> 16) ^ (((((v89 >> 3) & 0xB0393A5F000000 ^ 0x20091A4D000000) - 0x1CD9872D90DB7806 - ((2 * ((v89 >> 3) & 0xB0393A5F000000 ^ 0x20091A4D000000)) & 0x4070249E000000)) ^ v89) >> 24) ^ ((((((v92 - ((2 * v92) & 0x1DA2FF76CD4280EuLL) + 0x61ED17FBB66A1407) >> 3) & 0xDB0393A5F23A1D0 ^ 0xC30203A56010080) - ((2 * (((v92 - ((2 * v92) & 0x1DA2FF76CD4280EuLL) + 0x61ED17FBB66A1407) >> 3) & 0xDB0393A5F23A1D0 ^ 0xC30203A56010080)) & 0x34022742C440000) + 0x61ED18FBB66A1407) ^ (v92 - ((2 * v92) & 0x1DA2FF76CD4280ELL) + 0x61ED17FBB66A1407)) >> 8);
  *((_QWORD *)&v88 + 1) = v93 ^ 0x4F;
  *(_QWORD *)&v88 = v93 ^ 0x767FE1B5B696B600;
  v94 = (v88 >> 8) - 0x297D77197FBCFF58 - ((2 * (v88 >> 8)) & 0xAD0511CD00860150);
  v95 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v79) ^ 0xADLL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v95 ^ 0x4F;
  *(_QWORD *)&v88 = v95 ^ 0x767FE1B5B696B600;
  v96 = (v88 >> 8) - 0x72ACB11B0280EEB5 - ((2 * (v88 >> 8)) & 0x1AA69DC9FAFE2296);
  v97 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE2(v71) ^ 0xC9)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v98 = (*(_QWORD *)(v85 + 8 * (v78 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v99 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE2(v79) ^ 0x6FLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v98) = (((((v96 >> 3) & 0x1DB0393A00000000 ^ 0x11A0291800000000)
                  - 0x72ACB11B0280EEB5
                  - ((2 * ((v96 >> 3) & 0x1DB0393A00000000 ^ 0x11A0291800000000)) & 0x1A20104000000000)) ^ v96) >> 32) ^ (((((v94 >> 3) & 0xB0393A5F000000 ^ 0x90111850000000) - 0x297D77197FBCFF58 - ((2 * ((v94 >> 3) & 0xB0393A5F000000 ^ 0x90111850000000)) & 0x100104400000000)) ^ v94) >> 24) ^ ((((((v97 - ((2 * v97) & 0x1115667B3DAAA4CuLL) + 0x7C88AB33D9ED5526) >> 3) & 0x3A5F23A100 ^ 0x225B21A000) - ((2 * (((v97 - ((2 * v97) & 0x1115667B3DAAA4CuLL) + 0x7C88AB33D9ED5526) >> 3) & 0x3A5F23A100 ^ 0x225B21A000)) & 0x64B2420200) + 0x7C88AC33D9ED5526) ^ (v97 - ((2 * v97) & 0x1115667B3DAAA4CLL) + 0x7C88AB33D9ED5526)) >> 8) ^ ((((((v98 - ((2 * v98) & 0x1474F445534F462uLL) + 0x70A3A7A22A9A7A31) >> 3) & 0x393A5F230000 ^ 0x303045030000) - ((2 * (((v98 - ((2 * v98) & 0x1474F445534F462uLL) + 0x70A3A7A22A9A7A31) >> 3) & 0x393A5F230000 ^ 0x303045030000)) & 0x424414040000) + 0x70A4A7A22A9A7A31) ^ (v98 - ((2 * v98) & 0x1474F445534F462) + 0x70A3A7A22A9A7A31)) >> 16);
  v100 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v71 >> 24) ^ 0xD0A4780788)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v101 = *(_QWORD *)(v85 + 8 * (v81 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v101 ^ 0x4F;
  *(_QWORD *)&v88 = v101 ^ 0x767FE1B5B696B600;
  v102 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x23817DE56CF5212CLL) - 0x6E3F410D49856F6ALL;
  v103 = *(_QWORD *)(v85 + 8 * (v82 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v103 ^ 0x4F;
  *(_QWORD *)&v88 = v103 ^ 0x767FE1B5B696B600;
  v104 = (v88 >> 8) + 0x6C1196A0700D1A00 - ((2 * (v88 >> 8)) & 0xD8232D40E01A3400);
  LODWORD(v99) = ((((((v100 + 0x2891FCC3F2B1347CLL - ((2 * v100) & 0x123F987E56268F8uLL)) >> 3) & 0x393A5F230000 ^ 0x39185E020000)
                  + 0x2891FCC3F2B1347CLL
                  - ((2
                    * (((v100 + 0x2891FCC3F2B1347CLL - ((2 * v100) & 0x123F987E56268F8uLL)) >> 3) & 0x393A5F230000 ^ 0x39185E020000)) & 0x7004A4420000)) ^ (v100 + 0x2891FCC3F2B1347CLL - ((2 * v100) & 0x123F987E56268F8))) >> 16) ^ ((((((v99 - 0x3BC8C35AB26485E4 - ((2 * v99) & 0x6E794A9B36F438uLL)) >> 3) & 0x3A5F23A100 ^ 0x1009232100) - 0x3BC8C35AB26485E4 - ((2 * (((v99 - 0x3BC8C35AB26485E4 - ((2 * v99) & 0x6E794A9B36F438uLL)) >> 3) & 0x3A5F23A100 ^ 0x1009232100)) & 0x409A064000)) ^ (v99 - 0x3BC8C35AB26485E4 - ((2 * v99) & 0x6E794A9B36F438))) >> 8) ^ (((((v102 >> 3) & 0xB0393A5F000000 ^ 0x30111A56000000) - ((2 * ((v102 >> 3) & 0xB0393A5F000000 ^ 0x30111A56000000)) & 0x10070642C000000) - 0x6D3F410D49856F6ALL) ^ v102) >> 24) ^ (((((v104 >> 3) & 0x1DB0393A00000000 ^ 0xD80301000000000) + 0x6C1196A0700D1A00 - ((2 * ((v104 >> 3) & 0x1DB0393A00000000 ^ 0xD80301000000000)) & 0x1820204000000000)) ^ v104) >> 32);
  v105 = (*(_QWORD *)(v85 + 8 * (v83 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v106 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v59 ^ 0x4A)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v106 ^ 0x4F;
  *(_QWORD *)&v88 = v106 ^ 0x767FE1B5B696B600;
  v107 = (v88 >> 8) + 0x5C8A4BACF715EC36 - ((2 * (v88 >> 8)) & 0xB9149759EE2BD86CLL);
  v108 = *(_QWORD *)(v85 + 8 * (v84 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v108 ^ 0x4F;
  *(_QWORD *)&v88 = v108 ^ 0x767FE1B5B696B600;
  v109 = (v88 >> 8) + 0x7555BC11883C1557 - ((2 * (v88 >> 8)) & 0xEAAB782310782AAELL);
  v110 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v79 >> 24) ^ 0x3704493125)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v110) = (((((v107 >> 3) & 0xB0393A5F000000 ^ 0x9009301E000000)
                   + 0x5C8A4BACF715EC36
                   - ((2 * ((v107 >> 3) & 0xB0393A5F000000 ^ 0x9009301E000000)) & 0x1001250AE000000)) ^ v107) >> 24) ^ ((((((v105 - 0x793D849121020B9FLL - ((2 * v105) & 0x184F6DDBDFBE8C2uLL)) >> 3) & 0x393A5F230000 ^ 0x9285B030000) - 0x793D849121020B9FLL - ((2 * (((v105 - 0x793D849121020B9FLL - ((2 * v105) & 0x184F6DDBDFBE8C2uLL)) >> 3) & 0x393A5F230000 ^ 0x9285B030000)) & 0x7254BC420000)) ^ (v105 - 0x793D849121020B9FLL - ((2 * v105) & 0x184F6DDBDFBE8C2))) >> 16) ^ (((((v109 >> 3) & 0x1DB0393A00000000 ^ 0xCA0310200000000) + 0x7555BC11883C1557 - ((2 * ((v109 >> 3) & 0x1DB0393A00000000 ^ 0xCA0310200000000)) & 0x2A20702000000000)) ^ v109) >> 32) ^ ((((((v110 - ((2 * v110) & 0x13DBB7DFFCFD2uLL) - 0x17FF612241001817) >> 3) & 0x3A5F23A100 ^ 0x1A1703A000) - ((2 * (((v110 - ((2 * v110) & 0x13DBB7DFFCFD2uLL) - 0x17FF612241001817) >> 3) & 0x3A5F23A100 ^ 0x1A1703A000)) & 0x303C474200) - 0x17FF602241001817) ^ (v110 - ((2 * v110) & 0x13DBB7DFFCFD2) - 0x17FF612241001817)) >> 8);
  v111 = (v99 ^ 0x9CE06A7CLL)
       - ((2 * (v99 ^ 0x9CE06A7C)) & 0xC861C46E)
       + 0xE61508D6430E237;
  v112 = *(unsigned __int8 *)(a46
                            + ((((v86 ^ 0xE4C96461)
                                                - ((2 * (v86 ^ 0xE4C96461)) & 0x3859BB02)
                                                - 1674781311) >> 16) ^ 0x2CLL));
  v113 = *(unsigned __int8 *)(a46
                            + ((((v86 ^ 0xE4C96461)
                               - ((2 * (v86 ^ 0xE4C96461)) & 0x13859BB02uLL)
                               + 0x6CC2E7C49C2CDD81) >> 24) ^ 0x6CC2E7C49CLL));
  v114 = *(unsigned __int8 *)(a46
                            + (((unsigned __int16)((v98 ^ 0xEE54)
                                                                  - ((2 * (v98 ^ 0xEE54)) & 0xF5F2)
                                                                  + 31481) >> 8) ^ 0x7ALL));
  v115 = *(unsigned __int8 *)(a46 + (v86 ^ 0x61));
  v116 = *(unsigned __int8 *)(a46
                            + ((((v98 ^ 0xBCB7EE54)
                                                - ((2 * (v98 ^ 0xBCB7EE54)) & 0xF806F5F2)
                                                - 66880775) >> 16) ^ 3));
  v117 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + (((unsigned __int16)((v86 ^ 0x6461)
                                                                                - ((2 * (v86 ^ 0x6461)) & 0xBB02)
                                                                                - 8831) >> 8) ^ 0xDDLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v118 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + ((((v98 ^ 0xBCB7EE54)
                                            - ((2 * (v98 ^ 0xBCB7EE54)) & 0x1F806F5F2uLL)
                                            - 0x690447E103FC8507) >> 24) ^ 0x96FBB81EFCLL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v118 ^ 0x4F;
  *(_QWORD *)&v88 = v118 ^ 0x767FE1B5B696B600;
  v119 = (v88 >> 8) - 0x358687F38C2E30F0 - ((2 * (v88 >> 8)) & 0x94F2F018E7A39E20);
  v120 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v99 ^ 0x7CLL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v120 ^ 0x4F;
  *(_QWORD *)&v88 = v120 ^ 0x767FE1B5B696B600;
  v121 = (v88 >> 8) - 0x41C04DA74BB46414 - ((2 * (v88 >> 8)) & 0x7C7F64B1689737D8);
  v122 = (((((v119 >> 3) & 0xB0393A5F000000 ^ 0x29000E000000)
          - 0x358687F38C2E30F0
          - ((2 * ((v119 >> 3) & 0xB0393A5F000000 ^ 0x29000E000000)) & 0x607010A6000000)) ^ v119) >> 24) ^ ((((((v117 - 0x5CA9F93ACF3F502DLL - ((2 * v117) & 0xAC0D8A61815FA6uLL)) >> 3) & 0x393A5F230000 ^ 0x1806000000) - 0x5CA9F93ACF3F502DLL - (((v117 - 0x5CA9F93ACF3F502DLL - ((2 * v117) & 0xAC0D8A61815FA6uLL)) >> 2) & 0x20000000)) ^ (v117 - 0x5CA9F93ACF3F502DLL - ((2 * v117) & 0xAC0D8A61815FA6))) >> 16) ^ (((((v121 >> 3) & 0x1DB0393A00000000 ^ 0x1580300A00000000) - 0x41C04DA74BB46414 - ((2 * ((v121 >> 3) & 0x1DB0393A00000000 ^ 0x1580300A00000000)) & 0x3860603000000000)) ^ v121) >> 32);
  v123 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + (((unint64_t)((v110 ^ 0x89EDC243)
                                                                                - 2
                                                                                * ((v110 ^ 0x89EDC243) & 0x4B82D5B7 ^ v110 & 0x10)
                                                                                + 1266865575) >> 16) ^ 0x82)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v124 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v98 ^ 0x54)) ^ 0x22));
  v125 = v122 ^ ((((((v123 - ((2 * v123) & 0xA1B9A5AC3D80E6uLL) + 0x7650DCD2D61EC073) >> 3) & 0x3A5F23A100 ^ 0x1A5A038000)
                 - ((2
                   * (((v123 - ((2 * v123) & 0xA1B9A5AC3D80E6uLL) + 0x7650DCD2D61EC073) >> 3) & 0x3A5F23A100 ^ 0x1A5A038000)) & 0x24AC050000)
                 + 0x7650DDD2D61EC073) ^ (v123 - ((2 * v123) & 0xA1B9A5AC3D80E6) + 0x7650DCD2D61EC073)) >> 8);
  *((_QWORD *)&v88 + 1) = v124 ^ 0x4F;
  *(_QWORD *)&v88 = v124 ^ 0x767FE1B5B696B600;
  v126 = (v88 >> 8) - 0xAF7E2078C21B3F2 - ((2 * (v88 >> 8)) & 0xEA103BF0E7BC981CLL);
  v127 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + (((unsigned __int16)((v99 ^ 0x6A7C)
                                                                               - ((2 * (v99 ^ 0x6A7C)) & 0xC46E)
                                                                               - 7625) >> 8) ^ 0xE2)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v127 ^ 0x4F;
  *(_QWORD *)&v88 = v127 ^ 0x767FE1B5B696B600;
  v128 = (v88 >> 8) - 0x3FA665652F23AD5ELL - ((2 * (v88 >> 8)) & 0x80B33535A1B8A544);
  v129 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + ((((v110 ^ 0x89EDC243)
                                             - 2
                                             * ((v110 ^ 0x89EDC243) & 0x4B82D5B7 ^ (unint64_t)(v110 & 0x10))
                                             + 0x3604AFA14B82D5A7) >> 24) ^ 0x3604AFA14BLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v130 = (*(_QWORD *)(v85 + 8 * (v112 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v130) = (((((v128 >> 3) & 0x1DB0393A00000000 ^ 0x1800311200000000)
                   - 0x3FA665652F23AD5ELL
                   - ((2 * ((v128 >> 3) & 0x1DB0393A00000000 ^ 0x1800311200000000)) & 0x20303400000000)) ^ v128) >> 32) ^ (((((v126 >> 3) & 0xB0393A5F000000 ^ 0xA0013A0E000000) - 0xAF7E2078C21B3F2 - ((2 * ((v126 >> 3) & 0xB0393A5F000000 ^ 0xA0013A0E000000)) & 0x3270A6000000)) ^ v126) >> 24) ^ ((((((v129 - ((2 * v129) & 0x1C546D103DF90E0uLL) + 0x48E2A36881EFC870) >> 3) & 0x3A5F23A100 ^ 0x281021A100) - ((2 * (((v129 - ((2 * v129) & 0x1C546D103DF90E0uLL) + 0x48E2A36881EFC870) >> 3) & 0x3A5F23A100 ^ 0x281021A100)) & 0x5002470000) + 0x48E2A46881EFC870) ^ (v129 - ((2 * v129) & 0x1C546D103DF90E0) + 0x48E2A36881EFC870)) >> 8) ^ ((((((v130 - ((2 * v130) & 0x10227865D39FC00uLL) + 0x658113C32E9CFE00) >> 3) & 0x393A5F230000 ^ 0x203845030000) - ((2 * (((v130 - ((2 * v130) & 0x10227865D39FC00uLL) + 0x658113C32E9CFE00) >> 3) & 0x393A5F230000 ^ 0x203845030000)) & 0x22041C000000) + 0x658213C32E9CFE00) ^ (v130 - ((2 * v130) & 0x10227865D39FC00) + 0x658113C32E9CFE00)) >> 16);
  v131 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + ((((v99 ^ 0x9CE06A7C)
                                                              - ((2 * (v99 ^ 0x9CE06A7C)) & 0xC861C46E)
                                                              + 1680925239) >> 16) ^ 0x30)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v132 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v110 ^ 0x43)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v133 = *(_QWORD *)(v85 + 8 * (v113 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v133 ^ 0x4F;
  *(_QWORD *)&v88 = v133 ^ 0x767FE1B5B696B600;
  v134 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x81EA058ED2067936) + 0x40F502C769033C9BLL;
  v135 = *(_QWORD *)(v85 + 8 * (v114 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v135 ^ 0x4F;
  *(_QWORD *)&v88 = v135 ^ 0x767FE1B5B696B600;
  v136 = (v88 >> 8) + 0x43672A29B63DDFD1 - ((2 * (v88 >> 8)) & 0x86CE54536C7BBFA2);
  LODWORD(v131) = ((((((v132 - 0x97BA4E534E33770 - ((2 * v132) & 0x108B63596399120uLL)) >> 3) & 0x393A5F230000 ^ 0x92259230000)
                   - 0x97BA4E534E33770
                   - ((2
                     * (((v132 - 0x97BA4E534E33770 - ((2 * v132) & 0x108B63596399120uLL)) >> 3) & 0x393A5F230000 ^ 0x92259230000)) & 0x323496000000)) ^ (v132 - 0x97BA4E534E33770 - ((2 * v132) & 0x108B63596399120))) >> 16) ^ ((((((v131 - 0x30FA35A58172BCD5 - ((2 * v131) & 0xB94B4FD1A8656uLL)) >> 3) & 0x3A5F23A100 ^ 0xA4F01A000) - 0x30FA35A58172BCD5 - ((2 * (((v131 - 0x30FA35A58172BCD5 - ((2 * v131) & 0xB94B4FD1A8656uLL)) >> 3) & 0x3A5F23A100 ^ 0xA4F01A000)) & 0x34BC020200)) ^ (v131 - 0x30FA35A58172BCD5 - ((2 * v131) & 0xB94B4FD1A8656))) >> 8) ^ (((((v134 >> 3) & 0xB0393A5F000000 ^ 0x1020184D000000) - ((2 * ((v134 >> 3) & 0xB0393A5F000000 ^ 0x1020184D000000)) & 0x160000492000000) + 0x41F502C769033C9BLL) ^ v134) >> 24);
  v137 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + (((unsigned __int16)((v110 ^ 0xC243)
                                                                               - 2
                                                                               * ((v110 ^ 0xC243) & 0xD5B7 ^ v110 & 0x10)
                                                                               - 10841) >> 8) ^ 0xD5)) ^ 0x22));
  v138 = ((v137 << 56) ^ 0x4F00000000000000) - 0x6BE19735A0246720;
  v139 = ((v137 >> 8) ^ 0x6F09821F424F635BLL)
       - 0x6F7FFDFEF7F9F5EDLL
       + ((v137 >> 7) & 0xFFFBFDEFF3EBDALL ^ 0xECFBC16B612948);
  LODWORD(v129) = v131 ^ (((((v136 >> 3) & 0x1DB0393A00000000 ^ 0x820210000000000)
                          + 0x43672A29B63DDFD1
                          - ((2 * ((v136 >> 3) & 0x1DB0393A00000000 ^ 0x820210000000000)) & 0x240505000000000)) ^ v136) >> 32);
  v140 = (v139 - (v139 | v138 ^ 0x941E68CA5FDB98E0)) ^ ((v138 ^ 0x6BE19735A024671FLL) + 1);
  v141 = ((v140 - 0x6BE19735A0246720 - ((2 * v140) & 0x283CD194BFB731C0)) ^ v138) + v139;
  v142 = *(_QWORD *)(v85 + 8 * (v115 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v142 ^ 0x4F;
  *(_QWORD *)&v88 = v142 ^ 0x767FE1B5B696B600;
  v143 = (v88 >> 8) + 0x3E6E9E7B298AD9A1 - ((2 * (v88 >> 8)) & 0x7CDD3CF65315B342);
  v144 = (*(_QWORD *)(v85 + 8 * (v116 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v145 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v111 >> 24) ^ 0xE61508D64)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v145) = ((((((v144 - ((2 * v144) & 0x1659652E2C947C6uLL) - 0x574D34D68E9B5C1DLL) >> 3) & 0x3A5F23A100 ^ 0x200E208000)
                   - ((2
                     * (((v144 - ((2 * v144) & 0x1659652E2C947C6uLL) - 0x574D34D68E9B5C1DLL) >> 3) & 0x3A5F23A100 ^ 0x200E208000)) & 0x50A2414200)
                   - 0x574D33D68E9B5C1DLL) ^ (v144 - ((2 * v144) & 0x1659652E2C947C6) - 0x574D34D68E9B5C1DLL)) >> 8) ^ (((((v143 >> 3) & 0x1DB0393A00000000 ^ 0x580110A00000000) + 0x3E6E9E7B298AD9A1 - ((2 * ((v143 >> 3) & 0x1DB0393A00000000 ^ 0x580110A00000000)) & 0x3840307400000000)) ^ v143) >> 32) ^ ((((((v145 - ((2 * v145) & 0x1E60FD9835D62CCuLL) + 0x55F307ECC1AEB166) >> 3) & 0x393A5F230000 ^ 0x203818210000) - ((2 * (((v145 - ((2 * v145) & 0x1E60FD9835D62CCuLL) + 0x55F307ECC1AEB166) >> 3) & 0x393A5F230000 ^ 0x203818210000)) & 0x25082440000) + 0x55F407ECC1AEB166) ^ (v145 - ((2 * v145) & 0x1E60FD9835D62CCLL) + 0x55F307ECC1AEB166)) >> 16) ^ ((((((v141 + 0x93383FA7CD7BFDDLL - ((2 * v141) & 0x126707F4F9AF7FBALL)) >> 3) & 0xB0393A5F000000 ^ 0x20303A4F000000) + 0x93383FA7CD7BFDDLL - ((2 * (((v141 + 0x93383FA7CD7BFDDLL - ((2 * v141) & 0x126707F4F9AF7FBALL)) >> 3) & 0xB0393A5F000000 ^ 0x20303A4F000000)) & 0x600274B8000000)) ^ (v141 + 0x93383FA7CD7BFDDLL - ((2 * v141) & 0x126707F4F9AF7FBALL))) >> 24);
  v146 = (v130 ^ 0xCBA28CB4)
       - ((2 * (v130 ^ 0xCBA28CB4)) & 0xD69596D0)
       - 0xEF3930194B53498;
  v147 = *(unsigned __int8 *)(a46
                            + (((unsigned __int16)((v145 ^ 0x5477)
                                                                  - ((2 * (v145 ^ 0x5477)) & 0x527E)
                                                                  + 10559) >> 8) ^ 0x29));
  v148 = *(unsigned __int8 *)(a46
                            + ((((v145 ^ 0xD5E85477)
                                                - ((2 * (v145 ^ 0xD5E85477)) & 0x76A2527E)
                                                - 1152308929) >> 16) ^ 0x51));
  v149 = *(unsigned __int8 *)(a46
                            + ((((v125 ^ 0xDA7D388E)
                                                - ((2 * (v125 ^ 0xDA7D388E)) & 0x27B9040E)
                                                - 1814265337) >> 16) ^ 0xDCLL));
  v150 = *(unsigned __int8 *)(a46
                            + ((((v145 ^ 0xD5E85477)
                               - ((2 * (v145 ^ 0xD5E85477)) & 0x176A2527EuLL)
                               + 0x36159E16BB51293FLL) >> 24) ^ 0x36159E16BBLL));
  v151 = *(unsigned __int8 *)(a46 + (BYTE3(v125) ^ 0xDALL));
  v152 = *(unsigned __int8 *)(a46 + (v145 ^ 0x77));
  v153 = *(unsigned __int8 *)(a46 + (v125 ^ 0x8ELL));
  v154 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + (((unsigned __int16)((v125 ^ 0x388E)
                                                                                - ((2 * (v125 ^ 0x388E)) & 0x40E)
                                                                                - 32249) >> 8) ^ 0x82)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v155 = (2 * v154) & 0x1F2C7A1015B4D56;
  v156 = v154 + 0x32F963D080ADA6ABLL;
  v157 = *(unsigned __int8 *)(a46
                            + ((((v129 ^ 0x9184BE79)
                               - ((2 * (v129 ^ 0x9184BE79)) & 0x187A567F8uLL)
                               + 0x732E9A01C3D2B3FCLL) >> 24) ^ 0x732E9A01C3));
  v158 = ((((unint64_t)(v156 - v155) >> 3) & 0x393A5F230000 ^ 0x283A10010000)
        + 0x32F963D080ADA6ABLL
        - ((2 * (((unint64_t)(v156 - v155) >> 3) & 0x393A5F230000 ^ 0x283A10010000)) & 0x422000420000)) ^ (v156 - v155);
  v159 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v146 >> 24) ^ 0xF10C6CFE6BLL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v159 ^ 0x4F;
  *(_QWORD *)&v88 = v159 ^ 0x767FE1B5B696B600;
  v160 = (v88 >> 8) - 0x3F10E2120D2AD7F6 - ((2 * (v88 >> 8)) & 0x81DE3BDBE5AA5014);
  v161 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v129 ^ 0x79)) ^ 0x22));
  LODWORD(v158) = (((((v160 >> 3) & 0xB0393A5F000000 ^ 0x1021381E000000)
                   - 0x3F10E2120D2AD7F6
                   - ((2 * ((v160 >> 3) & 0xB0393A5F000000 ^ 0x1021381E000000)) & 0x1403250A4000000)) ^ v160) >> 24) ^ (v158 >> 16);
  *((_QWORD *)&v88 + 1) = v161 ^ 0x4F;
  *(_QWORD *)&v88 = v161 ^ 0x767FE1B5B696B600;
  v162 = (v88 >> 8) + 0x601714C83268C746 - ((2 * (v88 >> 8)) & 0xC02E299064D18E8CLL);
  LODWORD(v158) = v158 ^ (((((v162 >> 3) & 0x1DB0393A00000000 ^ 0xC00201800000000)
                          + 0x601714C83268C746
                          - ((2 * ((v162 >> 3) & 0x1DB0393A00000000 ^ 0xC00201800000000)) & 0x20201000000000)) ^ v162) >> 32);
  v163 = (*(_QWORD *)(v85 + 8 * (v147 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v158) = v158 ^ ((((((v163 - ((2 * v163) & 0x11264DB475FBC78uLL) - 0x3576CD925C5021C4) >> 3) & 0x3A5F23A100 ^ 0x81421A100)
                          - ((2
                            * (((v163 - ((2 * v163) & 0x11264DB475FBC78uLL) - 0x3576CD925C5021C4) >> 3) & 0x3A5F23A100 ^ 0x81421A100)) & 0x5006470000)
                          - 0x3576CC925C5021C4) ^ (v163 - ((2 * v163) & 0x11264DB475FBC78) - 0x3576CD925C5021C4)) >> 8);
  v164 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v130 ^ 0xB4)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v164 ^ 0x4F;
  *(_QWORD *)&v88 = v164 ^ 0x767FE1B5B696B600;
  v165 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xD6772E349476E302) + 0x6B3B971A4A3B7181;
  v166 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + (((unsigned __int16)((v129 ^ 0xBE79)
                                                                               - ((2 * (v129 ^ 0xBE79)) & 0x67F8)
                                                                               - 19460) >> 8) ^ 0xB3)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v166 ^ 0x4F;
  *(_QWORD *)&v88 = v166 ^ 0x767FE1B5B696B600;
  v167 = (v88 >> 8) - 0x1219C4ABF5296A3ALL - ((2 * (v88 >> 8)) & 0xDBCC76A815AD2B8CLL);
  v168 = (*(_QWORD *)(v85 + 8 * (v148 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v168) = (((((v167 >> 3) & 0x1DB0393A00000000 ^ 0x1DB0012A00000000)
                   - 0x1219C4ABF5296A3ALL
                   - ((2 * ((v167 >> 3) & 0x1DB0393A00000000 ^ 0x1DB0012A00000000)) & 0x1B40722000000000)) ^ v167) >> 32) ^ (((((v165 >> 3) & 0xB0393A5F000000 ^ 0x20302249000000) - ((2 * ((v165 >> 3) & 0xB0393A5F000000 ^ 0x20302249000000)) & 0x60223494000000) + 0x6C3B971A4A3B7181) ^ v165) >> 24) ^ ((((((v168 - ((2 * v168) & 0x1C014A7EB1D628EuLL) - 0x221FF5AC0A714EB9) >> 3) & 0x3A5F23A100 ^ 0xA5E218000) - ((2 * (((v168 - ((2 * v168) & 0x1C014A7EB1D628EuLL) - 0x221FF5AC0A714EB9) >> 3) & 0x3A5F23A100 ^ 0xA5E218000)) & 0x24AA054200) + 0x53F58EB147) ^ (v168 - ((2 * v168) & 0x1C014A7EB1D628ELL) - 0x221FF5AC0A714EB9)) >> 8);
  v169 = (*(_QWORD *)(v85 + 8 * (v149 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v170 = (((((v169 - ((2 * v169) & 0xDDECE7D3E10AF8uLL) + 0x726EF673E9F0857CLL) >> 3) & 0x393A5F230000 ^ 0x180A5D220000)
         - ((2
           * (((v169 - ((2 * v169) & 0xDDECE7D3E10AF8uLL) + 0x726EF673E9F0857CLL) >> 3) & 0x393A5F230000 ^ 0x180A5D220000)) & 0x606492400000)
         + 0xF673E9F0857CLL) ^ (v169 - ((2 * v169) & 0xDDECE7D3E10AF8) + 0x726EF673E9F0857CLL)) >> 16;
  LOBYTE(v167) = v170 & 0x38;
  LOBYTE(v165) = v170 & 0x38 ^ 8;
  LODWORD(v170) = (v168 - ((2 * v168) & 0x107ECE80) + 138372928) ^ v170;
  v171 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + ((((v129 ^ 0x9184BE79)
                                                             - ((2 * (v129 ^ 0x9184BE79)) & 0x87A567F8)
                                                             - 1009601540) >> 16) ^ 0xD2)) ^ 0x22));
  v172 = ((v171 ^ 0x767FE1B5B696B64FLL) << v165 << (v167 ^ 0x30u)) + ((v171 >> 8) ^ 0x767FE1B5B696B6);
  v173 = (*(_QWORD *)(v85 + 8 * (v150 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v174 = (*(_QWORD *)(v85 + 8 * (v151 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v175 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + (((unsigned __int16)((v130 ^ 0x8CB4)
                                                                               - ((2 * (v130 ^ 0x8CB4)) & 0x96D0)
                                                                               - 13464) >> 8) ^ 0xCBLL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v175 ^ 0x4F;
  *(_QWORD *)&v88 = v175 ^ 0x767FE1B5B696B600;
  v176 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xA359FC1F2197B544) - 0x2E5301F06F34255ELL;
  v177 = (*(_QWORD *)(v85 + 8 * (v152 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v178 = v177 + 0x4FDE335FE9CEDEA5 - ((2 * v177) & 0x1BC66BFD39DBD4ALL);
  LODWORD(v177) = ((((((v174 - ((2 * v174) & 0x19BF792B3CFEA04uLL) - 0x76320436A6180AFELL) >> 3) & 0x393A5F230000 ^ 0x39380B200000)
                   - ((2
                     * (((v174 - ((2 * v174) & 0x19BF792B3CFEA04uLL) - 0x76320436A6180AFELL) >> 3) & 0x393A5F230000 ^ 0x39380B200000)) & 0x7210B2460000)
                   - 0x76310436A6180AFELL) ^ (v174 - ((2 * v174) & 0x19BF792B3CFEA04) - 0x76320436A6180AFELL)) >> 16) ^ ((((((v173 - 0x135D660D40B6E16BLL - ((2 * v173) & 0x14533E57E923D2AuLL)) >> 3) & 0x3A5F23A100 ^ 0x3A57212100) - 0x135D660D40B6E16BLL - ((2 * (((v173 - 0x135D660D40B6E16BLL - ((2 * v173) & 0x14533E57E923D2AuLL)) >> 3) & 0x3A5F23A100 ^ 0x3A57212100)) & 0x643E020000)) ^ (v173 - 0x135D660D40B6E16BLL - ((2 * v173) & 0x14533E57E923D2ALL))) >> 8) ^ (((((v176 >> 3) & 0xB0393A5F000000 ^ 0x30190052000000) - ((2 * ((v176 >> 3) & 0xB0393A5F000000 ^ 0x30190052000000)) & 0x140701420000000) - 0x2D5301F06F34255ELL) ^ v176) >> 24) ^ ((((((v172 - 0x6A9BF49FE187F5B1 - ((2 * v172) & 0x2AC816C03CF0149EuLL)) >> 3) & 0x1DB0393A00000000 ^ 0x10A0012800000000) - 0x6A9BF49FE187F5B1 - ((2 * (((v172 - 0x6A9BF49FE187F5B1 - ((2 * v172) & 0x2AC816C03CF0149EuLL)) >> 3) & 0x1DB0393A00000000 ^ 0x10A0012800000000)) & 0x2A40124000000000)) ^ (v172 - 0x6A9BF49FE187F5B1 - ((2 * v172) & 0x2AC816C03CF0149ELL))) >> 32);
  v179 = (*(_QWORD *)(v85 + 8 * (v153 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v180 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE2(v146) ^ 0x4ALL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v180 ^ 0x4F;
  *(_QWORD *)&v88 = v180 ^ 0x767FE1B5B696B600;
  v181 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x695E61C0EC49E642) + 0x34AF30E07624F321;
  v182 = *(_QWORD *)(v85 + 8 * (v157 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v182 ^ 0x4F;
  *(_QWORD *)&v88 = v182 ^ 0x767FE1B5B696B600;
  v183 = (v88 >> 8) - 0xD01E8A96A09A8F2 - ((2 * (v88 >> 8)) & 0xE5FC2EAD2BECAE1CLL);
  LODWORD(v183) = ((((((v179 + 0x2D7AA103EBC59214 - ((2 * v179) & 0xF54207D78B2428uLL)) >> 3) & 0x393A5F230000 ^ 0x10205D200000)
                   + 0x2D7AA103EBC59214
                   - ((2
                     * (((v179 + 0x2D7AA103EBC59214 - ((2 * v179) & 0xF54207D78B2428uLL)) >> 3) & 0x393A5F230000 ^ 0x10205D200000)) & 0x420496020000)) ^ (v179 + 0x2D7AA103EBC59214 - ((2 * v179) & 0xF54207D78B2428))) >> 16) ^ (((((v178 >> 3) & 0x3A5F23A100 ^ 0x2A5D218100) + 0x4FDE335FE9CEDEA5 - ((2 * ((v178 >> 3) & 0x3A5F23A100 ^ 0x2A5D218100)) & 0x3492050000)) ^ v178) >> 8) ^ (((((v181 >> 3) & 0xB0393A5F000000 ^ 0x9020180E000000) - ((2 * ((v181 >> 3) & 0xB0393A5F000000 ^ 0x9020180E000000)) & 0x1406040AC000000) + 0x35AF30E07624F321) ^ v181) >> 24) ^ (((((v183 >> 3) & 0x1DB0393A00000000 ^ 0x1C10002A00000000) - 0xD01E8A96A09A8F2 - ((2 * ((v183 >> 3) & 0x1DB0393A00000000 ^ 0x1C10002A00000000)) & 0x2160222400000000)) ^ v183) >> 32);
  v184 = (v170 ^ 0x3E437DBE)
       - (unint64_t)((2 * (v170 ^ 0x3E437DBE)) & 0x1DA4A0EA)
       + 0x4B98F3700ED25075;
  v185 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v177 ^ 0xB376)
                                                                  - ((2 * (v177 ^ 0xB376)) & 0x8D64)
                                                                  - 14670) >> 8) ^ 0xC6));
  v186 = *(unsigned __int8 *)(v67
                            + ((((v183 ^ 0x19EA94ABLL)
                               - (unint64_t)((2 * (v183 ^ 0x19EA94AB)) & 0x8C121B7E)
                               - 0x404C81DEB9F6F241) >> 24) ^ 0xBFB37E2146));
  v187 = *(unsigned __int8 *)(v67
                            + ((((v177 ^ 0x77AAB376)
                               - (unint64_t)((2 * (v177 ^ 0x77AAB376)) & 0xFC018D64)
                               - 0x5C55F0B881FF394ELL) >> 24) ^ 0xA3AA0F477ELL));
  v188 = *(unsigned __int8 *)(v67
                            + (((v177 ^ 0x77AAB376)
                                               - ((2 * (v177 ^ 0x77AAB376)) & 0xFC018D64)
                                               + 2113980082) >> 16));
  v189 = *(unsigned __int8 *)(v67 + (v170 ^ 0xBELL));
  v190 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v183 ^ 0x94AB)
                                                                  - ((2 * (v183 ^ 0x94AB)) & 0x1B7E)
                                                                  + 3519) >> 8) ^ 0xDLL));
  v191 = *(unsigned __int8 *)(v67 + (v183 ^ 0xABLL));
  v192 = *(unsigned __int8 *)(v67
                            + ((((v158 ^ 0x99708ACE)
                                                - ((2 * (v158 ^ 0x99708ACE)) & 0x2DC8C578)
                                                + 384066236) >> 16) ^ 0xE4));
  v193 = *(unsigned __int8 *)(v67 + (BYTE2(v184) ^ 0xD2));
  v194 = *(unsigned __int8 *)(v67
                            + ((((v183 ^ 0x19EA94AB)
                                                - ((2 * (v183 ^ 0x19EA94AB)) & 0x8C121B7E)
                                                + 1174998463) >> 16) ^ 9));
  v195 = *(unsigned __int8 *)(v67
                            + ((((v158 ^ 0x99708ACELL)
                               - (unint64_t)((2 * (v158 ^ 0x99708ACE)) & 0x2DC8C578)
                               + 0xA00C2316E462BCLL) >> 24) ^ 0xA00C2316));
  v196 = *(unsigned __int8 *)(v67 + (v177 ^ 0x76));
  v197 = *(unsigned __int8 *)(v67 + (v158 ^ 0xCELL));
  v198 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + (((unsigned __int16)((v158 ^ 0x8ACE)
                                                                                - ((2 * (v158 ^ 0x8ACE)) & 0xC578)
                                                                                + 25276) >> 8) ^ 0x62)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v199 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v184 >> 24) ^ 0x4B98F3700ELL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v200 = *(_QWORD *)(v85 + 8 * (v185 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v200 ^ 0x4F;
  *(_QWORD *)&v88 = v200 ^ 0x767FE1B5B696B600;
  LODWORD(v198) = ((((((v199 + 0x7531D8E369369218 - ((2 * v199) & 0x63B1C6D26D2430uLL)) >> 3) & 0x393A5F230000 ^ 0x39184D220000)
                   + 0x7531D8E369369218
                   - ((2
                     * (((v199 + 0x7531D8E369369218 - ((2 * v199) & 0x63B1C6D26D2430uLL)) >> 3) & 0x393A5F230000 ^ 0x39184D220000)) & 0x304492440000)) ^ (v199 + 0x7531D8E369369218 - ((2 * v199) & 0x63B1C6D26D2430))) >> 16) ^ ((((((v198 - 0x56F706F172AAE263 - ((2 * v198) & 0x11F21D1AAA3B3AuLL)) >> 3) & 0x3A5F23A100 ^ 0x205122A100) - 0x56F706F172AAE263 - ((2 * (((v198 - 0x56F706F172AAE263 - ((2 * v198) & 0x11F21D1AAA3B3AuLL)) >> 3) & 0x3A5F23A100 ^ 0x205122A100)) & 0x141A020200)) ^ (v198 - 0x56F706F172AAE263 - ((2 * v198) & 0x11F21D1AAA3B3ALL))) >> 8);
  v201 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x36725FB12F39F218) - 0x64C6D027686306F4;
  v202 = *(_QWORD *)(v85 + 8 * (v186 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v202 ^ 0x4F;
  *(_QWORD *)&v88 = v202 ^ 0x767FE1B5B696B600;
  v203 = (v88 >> 8) - 0x6DF54179B72E310DLL - ((2 * (v88 >> 8)) & 0x24157D0C91A39DE6);
  LODWORD(v198) = v198 ^ (((((v201 >> 3) & 0xB0393A5F000000 ^ 0x20213A12000000)
                          - ((2 * ((v201 >> 3) & 0xB0393A5F000000 ^ 0x20213A12000000)) & 0x6052302E000000)
                          - 0x63C6D027686306F4) ^ v201) >> 24) ^ (((((v203 >> 3) & 0x1DB0393A00000000 ^ 0x1000111000000000)
                                                                    - 0x6DF54179B72E310DLL
                                                                    - ((2
                                                                      * ((v203 >> 3) & 0x1DB0393A00000000 ^ 0x1000111000000000)) & 0x2000700400000000)) ^ v203) >> 32);
  v204 = (*(_QWORD *)(v85 + 8 * (v189 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v205 = (*(_QWORD *)(v85 + 8 * (v188 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v206 = *(_QWORD *)(v85 + 8 * (v191 ^ 0x22));
  LODWORD(v204) = ((((((v205 + 0x76C5E1D044CD0336 - ((2 * v205) & 0x18BC3A0899A066CuLL)) >> 3) & 0x393A5F230000 ^ 0x383A08010000)
                   + 0x76C5E1D044CD0336
                   - ((2
                     * (((v205 + 0x76C5E1D044CD0336 - ((2 * v205) & 0x18BC3A0899A066CuLL)) >> 3) & 0x393A5F230000 ^ 0x383A08010000)) & 0x422088020000)) ^ (v205 + 0x76C5E1D044CD0336 - ((2 * v205) & 0x18BC3A0899A066CLL))) >> 16) ^ ((((((v204 - 0xCD7D04CF6FE77CDLL - ((2 * v204) & 0x505F6612031066uLL)) >> 3) & 0x3A5F23A100 ^ 0x3241202100) - 0xCD7D04CF6FE77CDLL - ((2 * (((v204 - 0xCD7D04CF6FE77CDLL - ((2 * v204) & 0x505F6612031066uLL)) >> 3) & 0x3A5F23A100 ^ 0x3241202100)) & 0x6412030000)) ^ (v204 - 0xCD7D04CF6FE77CDLL - ((2 * v204) & 0x505F6612031066))) >> 8);
  *((_QWORD *)&v88 + 1) = v206 ^ 0x4F;
  *(_QWORD *)&v88 = v206 ^ 0x767FE1B5B696B600;
  v207 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xE22E62AD05769398) - 0xEE8CEA97D44B634;
  LODWORD(v204) = v204 ^ (((((v207 >> 3) & 0xB0393A5F000000 ^ 0x20202A50000000)
                          - ((2 * ((v207 >> 3) & 0xB0393A5F000000 ^ 0x20202A50000000)) & 0x20622404000000)
                          - 0xDE8CEA97D44B634) ^ v207) >> 24);
  v208 = *(_QWORD *)(v85 + 8 * (v192 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v208 ^ 0x4F;
  *(_QWORD *)&v88 = v208 ^ 0x767FE1B5B696B600;
  v209 = (v88 >> 8) + 0x5C4C4BDCADFB7B34 - ((2 * (v88 >> 8)) & 0xB89897B95BF6F668);
  v210 = *(_QWORD *)(v85 + 8 * (v187 ^ 0x22));
  LODWORD(v187) = v204 ^ (((((v209 >> 3) & 0x1DB0393A00000000 ^ 0x980093A00000000)
                          + 0x5C4C4BDCADFB7B34
                          - ((2 * ((v209 >> 3) & 0x1DB0393A00000000 ^ 0x980093A00000000)) & 0x3800123000000000)) ^ v209) >> 32);
  v211 = ((v210 >> 8) ^ 0x767FE1B5B696B6)
       + 0x2F12E8ADED67933
       - ((2 * ((v210 >> 8) ^ 0x767FE1B5B696B6)) & 0x1E25D15BDACF266);
  v212 = (*(_QWORD *)(v85 + 8 * (v190 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v213 = *(_QWORD *)(v85 + 8 * (v195 ^ 0x22));
  v214 = ((((((v212 + 0x29D2D07CCCC39043 - ((2 * v212) & 0x1A5A0F999872086uLL)) >> 3) & 0x393A5F230000 ^ 0x180A19000000)
          + 0x29D2D07CCCC39043
          - ((2
            * (((v212 + 0x29D2D07CCCC39043 - ((2 * v212) & 0x1A5A0F999872086uLL)) >> 3) & 0x393A5F230000 ^ 0x180A19000000)) & 0x207098060000)) ^ (v212 + 0x29D2D07CCCC39043 - ((2 * v212) & 0x1A5A0F999872086))) >> 16) ^ (((((v211 >> 3) & 0x3A5F23A100 ^ 0x105B028100) + 0x2F12E8ADED67933 - ((2 * ((v211 >> 3) & 0x3A5F23A100 ^ 0x105B028100)) & 0x14BC044200)) ^ v211) >> 8);
  *((_QWORD *)&v88 + 1) = v213 ^ 0x4F;
  *(_QWORD *)&v88 = v213 ^ 0x767FE1B5B696B600;
  v215 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xFD221A8569EC398ALL) - 0x16EF2BD4B09E33BLL;
  v216 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v184) ^ 0x50)) ^ 0x22));
  v217 = v214 ^ (((((v215 >> 3) & 0xB0393A5F000000 ^ 0x90212856000000)
                 - ((2 * ((v215 >> 3) & 0xB0393A5F000000 ^ 0x90212856000000)) & 0x120120428000000)
                 - 0x6EF2BD4B09E33BLL) ^ v215) >> 24);
  *((_QWORD *)&v88 + 1) = v216 ^ 0x4F;
  *(_QWORD *)&v88 = v216 ^ 0x767FE1B5B696B600;
  v218 = (v88 >> 8) + 0x67FDEBEA14E204FCLL - ((2 * (v88 >> 8)) & 0xCFFBD7D429C409F8);
  v219 = *(_QWORD *)(v85 + 8 * (v194 ^ 0x22));
  v220 = v217 ^ (((((v218 >> 3) & 0x1DB0393A00000000 ^ 0xCB0393800000000)
                 + 0x67FDEBEA14E204FCLL
                 - ((2 * ((v218 >> 3) & 0x1DB0393A00000000 ^ 0xCB0393800000000)) & 0xB60525400000000)) ^ v218) >> 32);
  *((_QWORD *)&v88 + 1) = v219 ^ 0x4F;
  *(_QWORD *)&v88 = v219 ^ 0x767FE1B5B696B600;
  v221 = (v88 >> 8) + 0x1B8C569DCC14AA04 - ((2 * (v88 >> 8)) & 0x3718AD3B98295408);
  v222 = (*(_QWORD *)(v85 + 8 * (v197 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v223 = (*(_QWORD *)(v85 + 8 * (v193 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v224 = *(_QWORD *)(v85 + 8 * (v196 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v224 ^ 0x4F;
  *(_QWORD *)&v88 = v224 ^ 0x767FE1B5B696B600;
  v225 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x4E300E2AB55D0BELL) + 0x271807155AAE85FLL;
  LODWORD(v223) = ((((((v222 + 0x2CE6F4E6B2112BDELL - ((2 * v222) & 0x1CDE9CD642257BCuLL)) >> 3) & 0x3A5F23A100 ^ 0x1856022100)
                   + 0x2CE6F4E6B2112BDELL
                   - ((2
                     * (((v222 + 0x2CE6F4E6B2112BDELL - ((2 * v222) & 0x1CDE9CD642257BCuLL)) >> 3) & 0x3A5F23A100 ^ 0x1856022100)) & 0x4424024200)) ^ (v222 + 0x2CE6F4E6B2112BDELL - ((2 * v222) & 0x1CDE9CD642257BCLL))) >> 8) ^ (((((v221 >> 3) & 0x1DB0393A00000000 ^ 0x130081200000000) + 0x1B8C569DCC14AA04 - ((2 * ((v221 >> 3) & 0x1DB0393A00000000 ^ 0x130081200000000)) & 0x3300203000000000)) ^ v221) >> 32) ^ ((((((v223 - ((2 * v223) & 0x7BF165304106D8uLL) - 0xCC2074D67DF7C94) >> 3) & 0x393A5F230000 ^ 0x391253000000) - ((2 * (((v223 - ((2 * v223) & 0x7BF165304106D8uLL) - 0xCC2074D67DF7C94) >> 3) & 0x393A5F230000 ^ 0x391253000000)) & 0x706430400000) - 0xCC1074D67DF7C94) ^ (v223 - ((2 * v223) & 0x7BF165304106D8) - 0xCC2074D67DF7C94)) >> 16) ^ (((((v225 >> 3) & 0xB0393A5F000000 ^ 0x300A0A000000) - ((v225 >> 2) & 0x600060AA000000) + 0x371807155AAE85FLL) ^ v225) >> 24);
  v226 = *(unsigned __int8 *)(v67 + (v220 ^ 0x63));
  v227 = (v220 ^ 0xFF95A163)
       - 2 * ((v220 ^ 0xFF95A163) & 0x9DD0DB5FLL ^ v220 & 0x14)
       + 0x3A8D4B859DD0DB4BLL;
  v228 = *(unsigned __int8 *)(v67 + (v223 ^ 0x30));
  v229 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v220 ^ 0xA163)
                                                                  - 2 * ((v220 ^ 0xA163) & 0xDB5F ^ v220 & 0x14)
                                                                  - 9397) >> 8) ^ 0xDBLL));
  v230 = (v223 ^ 0xC5CF1A30)
       - ((2 * (v223 ^ 0xC5CF1A30)) & 0x15A1B86D2)
       - 0xF2415E752F23C97;
  v231 = *(unsigned __int8 *)(v67
                            + ((((v187 ^ 0x4D6F7D36)
                                                - ((2 * (v187 ^ 0x4D6F7D36)) & 0x51301378)
                                                + 681052604) >> 16) ^ 0x98));
  v232 = *(unsigned __int8 *)(v67
                            + ((((v220 ^ 0xFF95A163)
                                                - 2 * ((v220 ^ 0xFF95A163) & 0x9DD0DB5F ^ v220 & 0x14)
                                                - 1647256757) >> 16) ^ 0xD0));
  v233 = *(unsigned __int8 *)(v67 + (BYTE1(v230) ^ 0xC3));
  v234 = *(unsigned __int8 *)(v67 + (BYTE2(v230) ^ 0xDLL));
  v235 = *(unsigned __int8 *)(v67 + (v198 ^ 0xF8));
  v236 = *(unsigned __int8 *)(v67
                            + ((((v187 ^ 0x4D6F7D36)
                               - (unint64_t)((2 * (v187 ^ 0x4D6F7D36)) & 0x51301378)
                               + 0xC98F92E289809BCLL) >> 24) ^ 0xC98F92E28));
  v237 = *(unsigned __int8 *)(v67
                            + ((((v198 ^ 0xC1FD1CF8)
                               - ((2 * (v198 ^ 0xC1FD1CF8)) & 0x1AB10A24AuLL)
                               + 0x4486C1EED5885125) >> 24) ^ 0x4486C1EED5));
  v238 = *(unsigned __int8 *)(v67 + ((v230 >> 24) ^ 0xF0DBEA18ADLL));
  v239 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v198 ^ 0x1CF8)
                                                                  - ((2 * (v198 ^ 0x1CF8)) & 0xA24A)
                                                                  + 20773) >> 8) ^ 0x51));
  v240 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v198 ^ 0xC1FD1CF8)
                                                              - ((2 * (v198 ^ 0xC1FD1CF8)) & 0xAB10A24A)
                                                              - 712486619) >> 16) ^ 0x88)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v241 = *(unsigned __int8 *)(v67 + (v187 ^ 0x36));
  v242 = *(unsigned __int8 *)(v67 + ((v227 >> 24) ^ 0x3A8D4B859DLL));
  v243 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + (((unsigned __int16)((v187 ^ 0x7D36)
                                                                               - ((2 * (v187 ^ 0x7D36)) & 0x1378)
                                                                               + 2492) >> 8) ^ 9)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v243 ^ 0x4F;
  *(_QWORD *)&v88 = v243 ^ 0x767FE1B5B696B600;
  v244 = (v88 >> 8) + 0x1E176B42E0C60FA1 - ((2 * (v88 >> 8)) & 0x3C2ED685C18C1F42);
  v245 = *(_QWORD *)(v85 + 8 * (v226 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v245 ^ 0x4F;
  *(_QWORD *)&v88 = v245 ^ 0x767FE1B5B696B600;
  LODWORD(v240) = (((((v244 >> 3) & 0xB0393A5F000000 ^ 0x8029285C000000)
                   + 0x1E176B42E0C60FA1
                   - ((2 * ((v244 >> 3) & 0xB0393A5F000000 ^ 0x8029285C000000)) & 0x20520480000000)) ^ v244) >> 24) ^ ((((((v240 + 0x9A3F254A2D7ABC3 - ((2 * v240) & 0x147E4A945AF5786uLL)) >> 3) & 0x393A5F230000 ^ 0x380A14020000) + 0x9A3F254A2D7ABC3 - ((2 * (((v240 + 0x9A3F254A2D7ABC3 - ((2 * v240) & 0x147E4A945AF5786uLL)) >> 3) & 0x393A5F230000 ^ 0x380A14020000)) & 0x602004060000)) ^ (v240 + 0x9A3F254A2D7ABC3 - ((2 * v240) & 0x147E4A945AF5786))) >> 16);
  v246 = (v88 >> 8) + 0x5C5C7CD84375CA68 - ((2 * (v88 >> 8)) & 0xB8B8F9B086EB94D0);
  LODWORD(v240) = v240 ^ (((((v246 >> 3) & 0x1DB0393A00000000 ^ 0x980091A00000000)
                          + 0x5C5C7CD84375CA68
                          - ((2 * ((v246 >> 3) & 0x1DB0393A00000000 ^ 0x980091A00000000)) & 0x3820703000000000)) ^ v246) >> 32);
  v247 = (*(_QWORD *)(v85 + 8 * (v228 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v248 = *(_QWORD *)(v85 + 8 * (v231 ^ 0x22));
  LODWORD(v240) = v240 ^ ((((((v247 - ((2 * v247) & 0x167E66F92E8974EuLL) - 0x84C0CC8368BB459) >> 3) & 0x3A5F23A100 ^ 0x2259228100)
                          - ((2
                            * (((v247 - ((2 * v247) & 0x167E66F92E8974EuLL) - 0x84C0CC8368BB459) >> 3) & 0x3A5F23A100 ^ 0x2259228100)) & 0x6492400200)
                          - 0x84C0BC8368BB459) ^ (v247 - ((2 * v247) & 0x167E66F92E8974ELL) - 0x84C0CC8368BB459)) >> 8);
  *((_QWORD *)&v88 + 1) = v248 ^ 0x4F;
  *(_QWORD *)&v88 = v248 ^ 0x767FE1B5B696B600;
  v249 = (v88 >> 8) - 0x3430B31D7917743ALL - ((2 * (v88 >> 8)) & 0x979E99C50DD1178CLL);
  v250 = *(_QWORD *)(v85 + 8 * (v229 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v250 ^ 0x4F;
  *(_QWORD *)&v88 = v250 ^ 0x767FE1B5B696B600;
  v251 = (v88 >> 8) + 0x60ACB6C7FA66B8D7 - ((2 * (v88 >> 8)) & 0xC1596D8FF4CD71AELL);
  LODWORD(v249) = (((((v251 >> 3) & 0x1DB0393A00000000 ^ 0xC10101800000000)
                   + 0x60ACB6C7FA66B8D7
                   - ((2 * ((v251 >> 3) & 0x1DB0393A00000000 ^ 0xC10101800000000)) & 0x140600400000000)) ^ v251) >> 32) ^ (((((v249 >> 3) & 0xB0393A5F000000 ^ 0x30291850000000) - 0x3430B31D7917743ALL - ((2 * ((v249 >> 3) & 0xB0393A5F000000 ^ 0x30291850000000)) & 0x10010440C000000)) ^ v249) >> 24);
  v252 = (*(_QWORD *)(v85 + 8 * (v233 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v253 = v252 - ((2 * v252) & 0xC82A8231E9FB26) + 0x2864154118F4FD93;
  v254 = (((v253 >> 3) & 0x20090006000040 ^ 0xC22A9C8466B8E245 | (v253 >> 3) & 0x100201808000190) - 1) ^ 0xD23E3DBC6E90C354;
  v255 = (v254 - ((2 * v254) & 0x22695210045043A0) + 0x7D77A9CFB3F8EDF6) ^ 0x6C6308FFB9D0CD00;
  v256 = (*(_QWORD *)(v85 + 8 * (v237 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v253) = v249 ^ ((((((v256 - ((2 * v256) & 0xB0EA1648B6938CuLL) + 0x1458750B245B49C6) >> 3) & 0x393A5F230000 ^ 0x82044030000)
                          - ((2
                            * (((v256 - ((2 * v256) & 0xB0EA1648B6938CuLL) + 0x1458750B245B49C6) >> 3) & 0x393A5F230000 ^ 0x82044030000)) & 0x621408060000)
                          + 0x1459750B245B49C6) ^ (v256 - ((2 * v256) & 0xB0EA1648B6938CLL) + 0x1458750B245B49C6)) >> 16) ^ (((v255 | v253 & 0x582E801D00 ^ 0x1806001C00) ^ v255 & (v253 ^ 0xF1D0C61B067E7E00) | v253 & 0xA7D17FE200 ^ 0x23017CE200 ^ (v253 >> 3) & 0x225123A000) >> 8);
  v257 = (*(_QWORD *)(v85 + 8 * (v232 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v258 = (*(_QWORD *)(v85 + 8 * (v234 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v259 = *(_QWORD *)(v85 + 8 * (v235 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v259 ^ 0x4F;
  *(_QWORD *)&v88 = v259 ^ 0x767FE1B5B696B600;
  v260 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xDD14C7009B1E9976) - 0x11759C7FB270B345;
  v261 = *(_QWORD *)(v85 + 8 * (v236 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v261 ^ 0x4F;
  *(_QWORD *)&v88 = v261 ^ 0x767FE1B5B696B600;
  v262 = (v88 >> 8) - 0x4C92D9718E73ECC3 - ((2 * (v88 >> 8)) & 0x66DA4D1CE318267ALL);
  LODWORD(v260) = ((((((v258 - 0x697F7BD869C133DALL - ((2 * v258) & 0x101084F2C7D984CuLL)) >> 3) & 0x393A5F230000 ^ 0x100052030000)
                   - 0x697F7BD869C133DALL
                   - ((2
                     * (((v258 - 0x697F7BD869C133DALL - ((2 * v258) & 0x101084F2C7D984CuLL)) >> 3) & 0x393A5F230000 ^ 0x100052030000)) & 0x442C440000)) ^ (v258 - 0x697F7BD869C133DALL - ((2 * v258) & 0x101084F2C7D984CLL))) >> 16) ^ ((((((v257 + 0x39A1D159D26E014FLL - ((2 * v257) & 0x143A2B3A4DC029EuLL)) >> 3) & 0x3A5F23A100 ^ 0x2A1A018000) + 0x39A1D159D26E014FLL - ((2 * (((v257 + 0x39A1D159D26E014FLL - ((2 * v257) & 0x143A2B3A4DC029EuLL)) >> 3) & 0x3A5F23A100 ^ 0x2A1A018000)) & 0x30A4440200)) ^ (v257 + 0x39A1D159D26E014FLL - ((2 * v257) & 0x143A2B3A4DC029ELL))) >> 8) ^ (((((v260 >> 3) & 0xB0393A5F000000 ^ 0x90083009000000) - ((2 * ((v260 >> 3) & 0xB0393A5F000000 ^ 0x90083009000000)) & 0x10042009A000000) - 0x10759C7FB270B345) ^ v260) >> 24) ^ (((((v262 >> 3) & 0x1DB0393A00000000 ^ 0x1420201000000000) - 0x4C92D9718E73ECC3 - ((2 * ((v262 >> 3) & 0x1DB0393A00000000 ^ 0x1420201000000000)) & 0x2240401400000000)) ^ v262) >> 32);
  v263 = *(_QWORD *)(v85 + 8 * (v238 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v263 ^ 0x4F;
  *(_QWORD *)&v88 = v263 ^ 0x767FE1B5B696B600;
  v264 = (v88 >> 8) - 0x7A25ADC6AE16E1C7 - ((2 * (v88 >> 8)) & 0xBB4A472A3D23C72);
  v265 = *(_QWORD *)(v85 + 8 * (v239 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v265 ^ 0x4F;
  *(_QWORD *)&v88 = v265 ^ 0x767FE1B5B696B600;
  v266 = (v88 >> 8) + 0x459658780E11BA19 - ((2 * (v88 >> 8)) & 0x8B2CB0F01C237432);
  v267 = (*(_QWORD *)(v85 + 8 * (v241 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v268 = (*(_QWORD *)(v85 + 8 * (v242 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v264) = (((((v266 >> 3) & 0x1DB0393A00000000 ^ 0x8B0090A00000000)
                   + 0x459658780E11BA19
                   - ((2 * ((v266 >> 3) & 0x1DB0393A00000000 ^ 0x8B0090A00000000)) & 0xB20307000000000)) ^ v266) >> 32) ^ (((((v264 >> 3) & 0xB0393A5F000000 ^ 0xB008020A000000) - 0x7A25ADC6AE16E1C7 - ((2 * ((v264 >> 3) & 0xB0393A5F000000 ^ 0xB008020A000000)) & 0x1202070A2000000)) ^ v264) >> 24) ^ ((((((v267 - ((2 * v267) & 0xC49F675D2054DCuLL) - 0x6B9DB04C516FD592) >> 3) & 0x3A5F23A100 ^ 0x3255020100) - ((2 * (((v267 - ((2 * v267) & 0xC49F675D2054DCuLL) - 0x6B9DB04C516FD592) >> 3) & 0x3A5F23A100 ^ 0x3255020100)) & 0x641C004000) - 0x6B9DAF4C516FD592) ^ (v267 - ((2 * v267) & 0xC49F675D2054DCLL) - 0x6B9DB04C516FD592)) >> 8) ^ ((((((v268 - ((2 * v268) & 0x18D08F03D68761EuLL) + 0x2C684781EB43B0FLL) >> 3) & 0x393A5F230000 ^ 0x100A03020000) - ((2 * (((v268 - ((2 * v268) & 0x18D08F03D68761EuLL) + 0x2C684781EB43B0FLL) >> 3) & 0x393A5F230000 ^ 0x100A03020000)) & 0x703C400000) + 0x2C784781EB43B0FLL) ^ (v268 - ((2 * v268) & 0x18D08F03D68761ELL) + 0x2C684781EB43B0FLL)) >> 16);
  v269 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v264 ^ 0xD024)
                                                                  - 2 * ((v264 ^ 0xD024) & 0x23B7 ^ v264 & 0x10)
                                                                  + 9127) >> 8) ^ 0x23));
  v270 = *(unsigned __int8 *)(v67
                            + ((((v264 ^ 0x93F6D024)
                                                - 2 * ((v264 ^ 0x93F6D024) & 0xFCC23B7 ^ v264 & 0x10)
                                                + 265036711) >> 16) ^ 0xCCLL));
  v271 = *(unsigned __int8 *)(v67
                            + ((((v264 ^ 0x93F6D024)
                               - 2 * ((v264 ^ 0x93F6D024) & 0xFCC23B7 ^ v264 & 0x10)
                               - 0x346C80A7F033DC59) >> 24) ^ 0xCB937F580FLL));
  v272 = *(unsigned __int8 *)(v67
                            + (((unint64_t)((v240 ^ 0x63DF6309)
                                                                  - 2
                                                                  * ((v240 ^ 0x63DF6309) & 0x954A3E3D ^ v240 & 0x20)
                                                                  - 1790296547) >> 16) ^ 0x4ALL));
  v273 = *(unsigned __int8 *)(v67
                            + ((((v240 ^ 0x63DF6309)
                               - 2
                               * ((v240 ^ 0x63DF6309) & 0x954A3E3DLL ^ (unint64_t)(v240 & 0x20))
                               + 0x694504ED954A3E1DLL) >> 24) ^ 0x694504ED95));
  v274 = *(unsigned __int8 *)(v67 + (v264 ^ 0x24));
  v275 = *(unsigned __int8 *)(v67
                            + ((((v253 ^ 0xEA1F9B97)
                                                - ((2 * (v253 ^ 0xEA1F9B97)) & 0x9D1B3E84)
                                                + 1317904194) >> 16) ^ 0x8DLL));
  v276 = *(unsigned __int8 *)(v67 + (v240 ^ 9));
  v277 = *(unsigned __int8 *)(v67
                            + ((((v260 ^ 0xC5988A7DLL)
                               - ((2 * (v260 ^ 0xC5988A7D)) & 0xEB6576uLL)
                               - 0x60CED668FF8A4D45) >> 24) ^ 0x9F31299700));
  v278 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + (((unsigned __int16)((v240 ^ 0x6309)
                                                                                - 2
                                                                                * ((v240 ^ 0x6309) & 0x3E3D ^ v240 & 0x20)
                                                                                + 15901) >> 8) ^ 0x3ELL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v279 = v278 - ((2 * v278) & 0xC9C8193939F766) + 0xA64E40C9C9CFBB3;
  v280 = ((v279 >> 3) & 0x130393A5F23A1D0 ^ 0x2004E800032785D5)
       - ((2 * ((v279 >> 3) & 0x130393A5F23A1D0 ^ 0x2004E800032785D5)) & 0x24000609E4C0900)
       - 0x7A9EFF4EB0C9A178;
  v281 = (v280 ^ 0xA465F0B15F125A0DLL)
       + (v279 ^ 0xD3D03756821678D6)
       - 2 * ((v280 ^ 0x65F0B15F125A0DLL) & (v279 ^ 0x53D03756821678D6));
  v282 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v253 ^ 0xEA1F9B97)
                                             - (unint64_t)((2 * (v253 ^ 0xEA1F9B97)) & 0x9D1B3E84)
                                             + 0x119907E4E8D9F42) >> 24) ^ 0x119907E4ELL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v283 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v260 ^ 0x7DLL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v283 ^ 0x4F;
  *(_QWORD *)&v88 = v283 ^ 0x767FE1B5B696B600;
  v284 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xEFF74D41149C7D84) - 0x804595F75B1C13ELL;
  v285 = *(_QWORD *)(v85 + 8 * (v269 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v285 ^ 0x4F;
  *(_QWORD *)&v88 = v285 ^ 0x767FE1B5B696B600;
  v286 = (v88 >> 8) - 0x4C2D958D0F8569FFLL - ((2 * (v88 >> 8)) & 0x67A4D4E5E0F52C02);
  v287 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v253 ^ 0x97)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v288 = (((((v284 >> 3) & 0xB0393A5F000000 ^ 0xB0301011000000)
          - ((2 * ((v284 >> 3) & 0xB0393A5F000000 ^ 0xB0301011000000)) & 0x160404014000000)
          - 0x704595F75B1C13ELL) ^ v284) >> 24) ^ ((((((v282 + 0x62A7668D7984A310 - ((2 * v282) & 0x14ECD1AF3094620uLL)) >> 3) & 0x393A5F230000 ^ 0x28100F200000)
                                                   + 0x62A7668D7984A310
                                                   - ((2
                                                     * (((v282
                                                        + 0x62A7668D7984A310
                                                        - ((2 * v282) & 0x14ECD1AF3094620uLL)) >> 3) & 0x393A5F230000 ^ 0x28100F200000)) & 0x4010B2000000)) ^ (v282 + 0x62A7668D7984A310 - ((2 * v282) & 0x14ECD1AF3094620))) >> 16) ^ (v281 >> 8) ^ (((((v286 >> 3) & 0x1DB0393A00000000 ^ 0x1430090A00000000) - 0x4C2D958D0F8569FFLL - ((2 * ((v286 >> 3) & 0x1DB0393A00000000 ^ 0x1430090A00000000)) & 0x2320506400000000)) ^ v286) >> 32);
  v289 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + (((unsigned __int16)((v260 ^ 0x8A7D)
                                                                                - ((2 * (v260 ^ 0x8A7D)) & 0x6576)
                                                                                - 19781) >> 8) ^ 0xB2)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v290 = *(_QWORD *)(v85 + 8 * (v270 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v290 ^ 0x4F;
  *(_QWORD *)&v88 = v290 ^ 0x767FE1B5B696B600;
  v291 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x420DE6DEF18BBAE2) - 0x5EF90C90873A228FLL;
  v292 = *(_QWORD *)(v85 + 8 * (v272 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v292 ^ 0x4F;
  *(_QWORD *)&v88 = v292 ^ 0x767FE1B5B696B600;
  v293 = (v88 >> 8) + 0xC70DA4B60D5A2C3 - ((2 * (v88 >> 8)) & 0x18E1B496C1AB4586);
  v294 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v260 ^ 0xC5988A7D)
                                                              - ((2 * (v260 ^ 0xC5988A7D)) & 0xEB6576)
                                                              + 7713467) >> 16) ^ 0x75)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v295 = ((((((v289 - 0x51873386E08301BALL - ((2 * v289) & 0xF198F23EF9FC8CuLL)) >> 3) & 0x393A5F230000 ^ 0x190A03230000)
          - 0x51873386E08301BALL
          - ((2
            * (((v289 - 0x51873386E08301BALL - ((2 * v289) & 0xF198F23EF9FC8CuLL)) >> 3) & 0x393A5F230000 ^ 0x190A03230000)) & 0x10703E400000)) ^ (v289 - 0x51873386E08301BALL - ((2 * v289) & 0xF198F23EF9FC8CLL))) >> 16) ^ ((((((v287 - 0x6B623822A47E419BLL - ((2 * v287) & 0x13B8FBAB7037CCAuLL)) >> 3) & 0x3A5F23A100 ^ 0x3A0B202100) - 0x6B623822A47E419BLL - ((2 * (((v287 - 0x6B623822A47E419BLL - ((2 * v287) & 0x13B8FBAB7037CCAuLL)) >> 3) & 0x3A5F23A100 ^ 0x3A0B202100)) & 0x30B6034000)) ^ (v287 - 0x6B623822A47E419BLL - ((2 * v287) & 0x13B8FBAB7037CCALL))) >> 8) ^ (((((v291 >> 3) & 0xB0393A5F000000 ^ 0x2018284F000000) - ((2 * ((v291 >> 3) & 0xB0393A5F000000 ^ 0x2018284F000000)) & 0x6254B0000000) - 0x5DF90C90873A228FLL) ^ v291) >> 24) ^ (((((v293 >> 3) & 0x1DB0393A00000000 ^ 0x180190800000000) + 0xC70DA4B60D5A2C3 - ((2 * ((v293 >> 3) & 0x1DB0393A00000000 ^ 0x180190800000000)) & 0x1860301400000000)) ^ v293) >> 32);
  v296 = ((((v294 - 0xD4CAA3BD9EBBC4 - ((2 * v294) & 0x566AB884C28878uLL)) >> 3) & 0x3A5F23A100 ^ 0x2A08002000)
        - 0xD4CAA3BD9EBBC4
        - ((2
          * (((v294 - 0xD4CAA3BD9EBBC4 - ((2 * v294) & 0x566AB884C28878uLL)) >> 3) & 0x3A5F23A100 ^ 0x2A08002000)) & 0x3084420000)) ^ (v294 - 0xD4CAA3BD9EBBC4 - ((2 * v294) & 0x566AB884C28878));
  v297 = (*(_QWORD *)(v85 + 8 * (v271 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v298 = *(_QWORD *)(v85 + 8 * (v273 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v298 ^ 0x4F;
  *(_QWORD *)&v88 = v298 ^ 0x767FE1B5B696B600;
  LODWORD(v296) = ((((((v297 - 0x2B19D5087BDC787ELL - ((2 * v297) & 0x1CC55EF08470F04uLL)) >> 3) & 0x393A5F230000 ^ 0x11A50000000)
                   - 0x2B19D5087BDC787ELL
                   - ((2
                     * (((v297 - 0x2B19D5087BDC787ELL - ((2 * v297) & 0x1CC55EF08470F04uLL)) >> 3) & 0x393A5F230000 ^ 0x11A50000000)) & 0x506408460000)) ^ (v297 - 0x2B19D5087BDC787ELL - ((2 * v297) & 0x1CC55EF08470F04))) >> 16) ^ (v296 >> 8);
  v299 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xDEB01F73AFA34A62) + 0x6F580FB9D7D1A531;
  LODWORD(v296) = v296 ^ (((((v299 >> 3) & 0xB0393A5F000000 ^ 0xA001321A000000)
                          - ((2 * ((v299 >> 3) & 0xB0393A5F000000 ^ 0xA001321A000000)) & 0x201270AE000000)
                          + 0x70580FB9D7D1A531) ^ v299) >> 24);
  v300 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + (((unsigned __int16)((v253 ^ 0x9B97)
                                                                               - ((2 * (v253 ^ 0x9B97)) & 0x3E84)
                                                                               - 24766) >> 8) ^ 0x9FLL)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v300 ^ 0x4F;
  *(_QWORD *)&v88 = v300 ^ 0x767FE1B5B696B600;
  v301 = (v88 >> 8) - 0x7CB69BD31457F50 - ((2 * (v88 >> 8)) & 0xF0692C859D750160);
  v302 = *(_QWORD *)(v85 + 8 * (v274 ^ 0x22));
  LODWORD(v274) = v296 ^ (((((v301 >> 3) & 0x1DB0393A00000000 ^ 0x1D00100800000000)
                          - 0x7CB69BD31457F50
                          - ((2 * ((v301 >> 3) & 0x1DB0393A00000000 ^ 0x1D00100800000000)) & 0x3060200400000000)) ^ v301) >> 32);
  *((_QWORD *)&v88 + 1) = v302 ^ 0x4F;
  *(_QWORD *)&v88 = v302 ^ 0x767FE1B5B696B600;
  v303 = (v88 >> 8) + 0x6A03E2E330EB61DLL - ((2 * (v88 >> 8)) & 0xD407C5C661D6C3ALL);
  v304 = *(_QWORD *)(v85 + 8 * (v276 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v304 ^ 0x4F;
  *(_QWORD *)&v88 = v304 ^ 0x767FE1B5B696B600;
  v305 = (v88 >> 8) - 0x23801DD76997812CLL - ((2 * (v88 >> 8)) & 0xB8FFC4512CD0FDA8);
  v306 = (*(_QWORD *)(v85 + 8 * (v275 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v307 = (*(_QWORD *)(v85 + 8 * (v277 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v308 = *(unsigned __int8 *)(v67 + (v274 ^ 0xA5));
  v309 = (((((v305 >> 3) & 0x1DB0393A00000000 ^ 0x1980380000000000)
          - 0x23801DD76997812CLL
          - ((2 * ((v305 >> 3) & 0x1DB0393A00000000 ^ 0x1980380000000000)) & 0x3860405000000000)) ^ v305) >> 32) ^ (((((v303 >> 3) & 0xB0393A5F000000 ^ 0x90010046000000) + 0x6A03E2E330EB61DLL - ((2 * ((v303 >> 3) & 0xB0393A5F000000 ^ 0x90010046000000)) & 0x140705426000000)) ^ v303) >> 24) ^ ((((((v306 - ((2 * v306) & 0x1F12AC42C6B96B0uLL) - 0x15076A9DE9CA34A8) >> 3) & 0x3A5F23A100 ^ 0x284202A100) - ((2 * (((v306 - ((2 * v306) & 0x1F12AC42C6B96B0uLL) - 0x15076A9DE9CA34A8) >> 3) & 0x3A5F23A100 ^ 0x284202A100)) & 0x442C430200) - 0x1507699DE9CA34A8) ^ (v306 - ((2 * v306) & 0x1F12AC42C6B96B0) - 0x15076A9DE9CA34A8)) >> 8) ^ ((((((v307 - ((2 * v307) & 0x1E3DA2ACA933670uLL) - 0xE0E12EA9AB664C8) >> 3) & 0x393A5F230000 ^ 0x39220C210000) - ((2 * (((v307 - ((2 * v307) & 0x1E3DA2ACA933670uLL) - 0xE0E12EA9AB664C8) >> 3) & 0x393A5F230000 ^ 0x39220C210000)) & 0x52208A020000) - 0xE0D12EA9AB664C8) ^ (v307 - ((2 * v307) & 0x1E3DA2ACA933670) - 0xE0E12EA9AB664C8)) >> 16);
  v310 = (v274 ^ 0x3CE227A5)
       - ((2 * (v274 ^ 0x3CE227A5)) & 0x870FE192)
       - 0x358B51E2BC780F37;
  v311 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v295 ^ 0xBBE)
                                                                  - ((2 * (v295 ^ 0xBBE)) & 0x6EF2)
                                                                  - 18567) >> 8) ^ 0xB7));
  v312 = *(unsigned __int8 *)(v67
                            + ((((v295 ^ 0xAA560BBE)
                                                - ((2 * (v295 ^ 0xAA560BBE)) & 0x35596EF2)
                                                + 447526777) >> 16) ^ 0xACLL));
  v313 = *(unsigned __int8 *)(v67
                            + ((((v274 ^ 0x3CE227A5)
                                                - ((2 * (v274 ^ 0x3CE227A5)) & 0x870FE192)
                                                + 1132982473) >> 16) ^ 0x87));
  v314 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v274 ^ 0x27A5)
                                                                  - ((2 * (v274 ^ 0x27A5)) & 0xE192)
                                                                  - 3895) >> 8) ^ 0xF0));
  v315 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v309 ^ 0xE93B)
                                                                  - ((2 * (v309 ^ 0xE93B)) & 0x2FAE)
                                                                  - 26665) >> 8) ^ 0x97));
  v316 = *(unsigned __int8 *)(v67
                            + ((((v309 ^ 0x1A82E93B)
                                                - ((2 * (v309 ^ 0x1A82E93B)) & 0x20A12FAE)
                                                - 1873766441) >> 16) ^ 0x50));
  v317 = *(unsigned __int8 *)(v67
                            + ((((v309 ^ 0x1A82E93BLL)
                               - ((2 * (v309 ^ 0x1A82E93BLL)) & 0x120A12FAEuLL)
                               - 0x759AB61B6FAF6829) >> 24) ^ 0x8A6549E490));
  v318 = *(unsigned __int8 *)(v67 + (v309 ^ 0x3BLL));
  v319 = *(unsigned __int8 *)(v67
                            + ((((v295 ^ 0xAA560BBELL)
                               - (unint64_t)((2 * (v295 ^ 0xAA560BBE)) & 0x35596EF2)
                               - 0x3BBE1E0E5534887) >> 24) ^ 0xFC441E1F1ALL));
  v320 = *(unsigned __int8 *)(v67 + (v295 ^ 0xBELL));
  v321 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + ((((v288 ^ 0xCEF8044C)
                                                             - ((2 * (v288 ^ 0xCEF8044C)) & 0x2240C5A6)
                                                             - 1860148525) >> 16) ^ 0x20)) ^ 0x22));
  *((_QWORD *)&v88 + 1) = v321 ^ 0x4F;
  *(_QWORD *)&v88 = v321 ^ 0x767FE1B5B696B600;
  v322 = (v88 >> 8) + 0x13380B4E5DBFF767 - ((2 * (v88 >> 8)) & 0x2670169CBB7FEECELL);
  v323 = (*(_QWORD *)(v85 + 8 * (v311 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v323) = ((((((v323 - ((2 * v323) & 0x1294C5D79994C40uLL) - 0x706B59D1433359E0) >> 3) & 0x3A5F23A100 ^ 0x57018000)
                   - ((2
                     * (((v323 - ((2 * v323) & 0x1294C5D79994C40uLL) - 0x706B59D1433359E0) >> 3) & 0x3A5F23A100 ^ 0x57018000)) & 0x5438014000)
                   - 0x706B58D1433359E0) ^ (v323 - ((2 * v323) & 0x1294C5D79994C40) - 0x706B59D1433359E0)) >> 8) ^ (((((v322 >> 3) & 0x1DB0393A00000000 ^ 0x20012800000000) + 0x13380B4E5DBFF767 - ((2 * ((v322 >> 3) & 0x1DB0393A00000000 ^ 0x20012800000000)) & 0x2260121400000000)) ^ v322) >> 32);
  v324 = (*(_QWORD *)(v85 + 8 * (v308 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v325 = *(_QWORD *)(v85 + 8 * (v315 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v325 ^ 0x4F;
  *(_QWORD *)&v88 = v325 ^ 0x767FE1B5B696B600;
  v326 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0xE3EEEE2F84B360DCLL) + 0x71F77717C259B06ELL;
  v327 = ((((v326 >> 3) & 0xB0393A5F000000 ^ 0x30282258000000)
         - ((2 * ((v326 >> 3) & 0xB0393A5F000000 ^ 0x30282258000000)) & 0x60622484000000)
         + 0xF77717C259B06ELL) ^ v326) >> 24;
  LODWORD(v323) = v323 ^ ((((((v324 - ((2 * v324) & 0x6E520AB62BD188uLL) + 0x223729055B15E8C4) >> 3) & 0x393A5F230000 ^ 0x21200B220000)
                          - ((2
                            * (((v324 - ((2 * v324) & 0x6E520AB62BD188uLL) + 0x223729055B15E8C4) >> 3) & 0x393A5F230000 ^ 0x21200B220000)) & 0x5200B6020000)
                          + 0x29055B15E8C4) ^ (v324 - ((2 * v324) & 0x6E520AB62BD188) + 0x223729055B15E8C4)) >> 16) ^ 0x50F04753;
  LODWORD(v324) = v323 + (v327 ^ 0xB4D35A1E);
  LODWORD(v323) = v323 & (v327 ^ 0x34D35A1E);
  v328 = (*(_QWORD *)(v85 + 8 * (v312 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v329 = v328 - ((2 * v328) & 0x187C9228325D28ELL) + 0x62C3E4914192E947;
  v330 = v324 - 2 * v323;
  v331 = *(_QWORD *)(v85 + 8 * (v314 ^ 0x22));
  *((_QWORD *)&v88 + 1) = v331 ^ 0x4F;
  *(_QWORD *)&v88 = v331 ^ 0x767FE1B5B696B600;
  v332 = (v88 >> 8) - ((2 * (v88 >> 8)) & 0x9A0554BBA755E0B2) - 0x32FD55A22C550FA7;
  v333 = *(_QWORD *)(v85 + 8 * (v316 ^ 0x22));
  LODWORD(v323) = (((((v332 >> 3) & 0xB0393A5F000000 ^ 0xA0110A1A000000)
                   - ((2 * ((v332 >> 3) & 0xB0393A5F000000 ^ 0xA0110A1A000000)) & 0x5030A6000000)
                   - 0x31FD55A22C550FA7) ^ v332) >> 24) ^ (((((v329 >> 3) & 0x393A5F230000 ^ 0x381208220000)
                                                             - ((2 * ((v329 >> 3) & 0x393A5F230000 ^ 0x381208220000)) & 0x402082040000)
                                                             + 0x62C4E4914192E947) ^ v329) >> 16);
  *((_QWORD *)&v88 + 1) = v333 ^ 0x4F;
  *(_QWORD *)&v88 = v333 ^ 0x767FE1B5B696B600;
  v334 = (v88 >> 8) + 0x78787A3B5BF23528 - ((2 * (v88 >> 8)) & 0xF0F0F476B7E46A50);
  LODWORD(v323) = v323 ^ (((((v334 >> 3) & 0x1DB0393A00000000 ^ 0xD00090200000000)
                          + 0x78787A3B5BF23528
                          - ((2 * ((v334 >> 3) & 0x1DB0393A00000000 ^ 0xD00090200000000)) & 0x3060707400000000)) ^ v334) >> 32);
  v335 = v323 - ((2 * v323) & 0x847007FC) - 1036516354;
  v336 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v288 ^ 0xCEF8044CLL)
                                             - ((2 * (v288 ^ 0xCEF8044CLL)) & 0x12240C5A6uLL)
                                             - 0x359578A46EDF9D2DLL) >> 24) ^ 0xCA6A875B91)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v337 = ((((v336 - ((2 * v336) & 0xF505BEDF6834FAuLL) - 0x4C857D20904BE583) >> 3) & 0x3A5F23A100 ^ 0x1A4D228100)
        - ((2
          * (((v336 - ((2 * v336) & 0xF505BEDF6834FAuLL) - 0x4C857D20904BE583) >> 3) & 0x3A5F23A100 ^ 0x1A4D228100)) & 0x349E400000)
        + 0xDF6FB41A7DLL) ^ (v336 - ((2 * v336) & 0xF505BEDF6834FALL) - 0x4C857D20904BE583);
  if ((v323 & 1) != 0)
    v338 = 1375694618;
  else
    v338 = 1375694617;
  v339 = v338 - 3154192;
  v340 = (v337 >> 8) ^ 0x5A1E8A83;
  v341 = v338 - 1375694617;
  v342 = v335 & 0xFFFFFFFE;
  v343 = *(_QWORD *)(v85 + 8 * (v313 ^ 0x22));
  v344 = -1546732254 - v338;
  if ((v341 & v340) == 0)
    v344 = v339;
  v345 = (v340 - 1372540425 + v344) ^ v342;
  v346 = ((v343 >> 8) ^ 0x767FE1B5B696B6)
       - 0x1589FDD79B07E64
       - ((2 * ((v343 >> 8) ^ 0x767FE1B5B696B6)) & 0x14EC0450C9F0338);
  v347 = *(_QWORD *)(v85 + 8 * (v317 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v347 ^ 0x4F;
  *(_QWORD *)&v348 = v347 ^ 0x767FE1B5B696B600;
  v349 = (v348 >> 8) + 0x5BA28F035997676ALL - ((2 * (v348 >> 8)) & 0xB7451E06B32ECED4);
  v350 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v288 ^ 0x4CLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v350 ^ 0x4F;
  *(_QWORD *)&v348 = v350 ^ 0x767FE1B5B696B600;
  v351 = (v348 >> 8) + 0x5EBDBF9BE3F86DA4 - ((2 * (v348 >> 8)) & 0xBD7B7F37C7F0DB48);
  v352 = (*(_QWORD *)(v85 + 8 * (v319 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v352) = (((((v349 >> 3) & 0xB0393A5F000000 ^ 0x3011204B000000)
                   + 0x5BA28F035997676ALL
                   - ((2 * ((v349 >> 3) & 0xB0393A5F000000 ^ 0x3011204B000000)) & 0x1401204B2000000)) ^ v349) >> 24) ^ (((((v346 >> 3) & 0x393A5F230000 ^ 0x280050010000) - 0x1589FDD79B07E64 - ((2 * ((v346 >> 3) & 0x393A5F230000 ^ 0x280050010000)) & 0x40440C060000)) ^ v346) >> 16) ^ (((((v351 >> 3) & 0x1DB0393A00000000 ^ 0x990313200000000) + 0x5EBDBF9BE3F86DA4 - ((2 * ((v351 >> 3) & 0x1DB0393A00000000 ^ 0x990313200000000)) & 0x3960723400000000)) ^ v351) >> 32) ^ ((((((v352 - ((2 * v352) & 0x19CEA32100B8840uLL) + 0x4CCE75190805C420) >> 3) & 0x3A5F23A100 ^ 0x220100A000) - ((2 * (((v352 - ((2 * v352) & 0x19CEA32100B8840uLL) + 0x4CCE75190805C420) >> 3) & 0x3A5F23A100 ^ 0x220100A000)) & 0x3010030000) + 0x4CCE76190805C420) ^ (v352 - ((2 * v352) & 0x19CEA32100B8840) + 0x4CCE75190805C420)) >> 8);
  v353 = (*(_QWORD *)(v85 + 8 * (v318 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v354 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + (((unsigned __int16)((v288 ^ 0x44C)
                                                                                - ((2 * (v288 ^ 0x44C)) & 0xC5A6)
                                                                                + 25299) >> 8) ^ 0x62)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v355 = *(_QWORD *)(v85 + 8 * (v320 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v355 ^ 0x4F;
  *(_QWORD *)&v348 = v355 ^ 0x767FE1B5B696B600;
  v356 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0xBA60EF9D6402529CLL) + 0x5D3077CEB201294ELL;
  v357 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v310 >> 24) ^ 0xCA74AE1D43)) ^ 0x22));
  v358 = ((((((v354 + 0x7EF1BD9214D79D26 - ((2 * v354) & 0x1E37B2429AF3A4CuLL)) >> 3) & 0x393A5F230000 ^ 0x313242020000)
          + 0x7EF1BD9214D79D26
          - ((2
            * (((v354 + 0x7EF1BD9214D79D26 - ((2 * v354) & 0x1E37B2429AF3A4CuLL)) >> 3) & 0x393A5F230000 ^ 0x313242020000)) & 0x722428060000)) ^ (v354 + 0x7EF1BD9214D79D26 - ((2 * v354) & 0x1E37B2429AF3A4CLL))) >> 16) ^ ((((((v353 - 0x6C3FBF8CF029C7EELL - ((2 * v353) & 0x18080E61FAC7024uLL)) >> 3) & 0x3A5F23A100 ^ 0xA41228100) - 0x6C3FBF8CF029C7EELL - ((2 * (((v353 - 0x6C3FBF8CF029C7EELL - ((2 * v353) & 0x18080E61FAC7024uLL)) >> 3) & 0x3A5F23A100 ^ 0xA41228100)) & 0x641E044000)) ^ (v353 - 0x6C3FBF8CF029C7EELL - ((2 * v353) & 0x18080E61FAC7024))) >> 8) ^ (((((v356 >> 3) & 0xB0393A5F000000 ^ 0xA0083856000000) - ((2 * ((v356 >> 3) & 0xB0393A5F000000 ^ 0xA0083856000000)) & 0x60621424000000) + 0x5E3077CEB201294ELL) ^ v356) >> 24);
  *((_QWORD *)&v348 + 1) = v357 ^ 0x4F;
  *(_QWORD *)&v348 = v357 ^ 0x767FE1B5B696B600;
  v359 = (v348 >> 8) - 0x19D1246152691CB7 - ((2 * (v348 >> 8)) & 0xCC5DB73D5B2DC692);
  v360 = (v330 ^ 0x8AF518D8) - (unint64_t)((2 * (v330 ^ 0x8AF518D8)) & 0x48959DA) + 0x63B0898D0244ACEDLL;
  v361 = *(unsigned __int8 *)(v67 + (v345 ^ 0xFELL));
  v362 = (v352 ^ 0xF123F1DFLL)
       - ((2 * (v352 ^ 0xF123F1DFLL)) & 0x12C1F9F0ELL)
       - 0x41E6BA3869F03079;
  v363 = v358 ^ (((((v359 >> 3) & 0x1DB0393A00000000 ^ 0x1C80193200000000)
                 - 0x19D1246152691CB7
                 - ((2 * ((v359 >> 3) & 0x1DB0393A00000000 ^ 0x1C80193200000000)) & 0x840323400000000)) ^ v359) >> 32);
  v364 = (v363 ^ 0xD5ABA130) - ((2 * (v363 ^ 0xD5ABA130)) & 0x17C02EE8CLL) - 0x77EA3AC741FE88BALL;
  v365 = (v345 ^ 0xB249F3FE) - ((2 * (v345 ^ 0xB249F3FE)) & 0x1032ADBF6) - 0x316D164A7E6A9205;
  v366 = *(unsigned __int8 *)(v67 + (BYTE1(v365) ^ 0x6DLL));
  v367 = *(unsigned __int8 *)(v67 + (v330 ^ 0xD8));
  v368 = *(unsigned __int8 *)(v67 + (v352 ^ 0xDFLL));
  v369 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v352 ^ 0xF1DF)
                                                                  - ((2 * (v352 ^ 0xF1DF)) & 0x9F0E)
                                                                  - 12409) >> 8) ^ 0xCFLL));
  v370 = *(unsigned __int8 *)(v67 + (BYTE2(v365) ^ 0x95));
  v371 = *(unsigned __int8 *)(v67 + (BYTE2(v364) ^ 1));
  v372 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v360 >> 24) ^ 0x63B0898D02)) ^ 0x22));
  v373 = *(unsigned __int8 *)(v67 + ((v365 >> 24) ^ 0xCE92E9B581));
  *((_QWORD *)&v348 + 1) = v372 ^ 0x4F;
  *(_QWORD *)&v348 = v372 ^ 0x767FE1B5B696B600;
  v374 = (v348 >> 8) - 0x7E7DAF9F7ECA57D0 - ((2 * (v348 >> 8)) & 0x304A0C1026B5060);
  v375 = *(unsigned __int8 *)(v67 + (BYTE2(v362) ^ 0xFLL));
  v376 = *(_QWORD *)(v85 + 8 * (v361 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v376 ^ 0x4F;
  *(_QWORD *)&v348 = v376 ^ 0x767FE1B5B696B600;
  v377 = (v348 >> 8) - 0x39AE9B17CB9B7F37 - ((2 * (v348 >> 8)) & 0x8CA2C9D068C90192);
  v378 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v362 >> 24) ^ 0xBE1945C796)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v362) = (((((v377 >> 3) & 0x1DB0393A00000000 ^ 0x1880281800000000)
                   - 0x39AE9B17CB9B7F37
                   - ((2 * ((v377 >> 3) & 0x1DB0393A00000000 ^ 0x1880281800000000)) & 0x820405000000000)) ^ v377) >> 32) ^ (((((v374 >> 3) & 0xB0393A5F000000 ^ 0x30080810000000) - 0x7E7DAF9F7ECA57D0 - ((v374 >> 2) & 0x100204002000000)) ^ v374) >> 24) ^ ((((((v378 - ((2 * v378) & 0xDB43C68A4C8BF8uLL) + 0x376DA1E3452645FCLL) >> 3) & 0x3A5F23A100 ^ 0x3848208000) - ((2 * (((v378 - ((2 * v378) & 0xDB43C68A4C8BF8uLL) + 0x376DA1E3452645FCLL) >> 3) & 0x3A5F23A100 ^ 0x3848208000)) & 0x448A440200) + 0x376DA2E3452645FCLL) ^ (v378 - ((2 * v378) & 0xDB43C68A4C8BF8) + 0x376DA1E3452645FCLL)) >> 8);
  v379 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v364 >> 24) ^ 0x8815C538BELL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v380 = v366 ^ 0x22;
  LODWORD(v366) = v362 ^ ((((((v379 - ((2 * v379) & 0x1B168E272777BE4uLL) + 0x38D8B471393BBDF2) >> 3) & 0x393A5F230000 ^ 0x100A07230000)
                          - ((2
                            * (((v379 - ((2 * v379) & 0x1B168E272777BE4uLL) + 0x38D8B471393BBDF2) >> 3) & 0x393A5F230000 ^ 0x100A07230000)) & 0x606032460000)
                          + 0x38D9B471393BBDF2) ^ (v379 - ((2 * v379) & 0x1B168E272777BE4) + 0x38D8B471393BBDF2)) >> 16);
  v381 = (*(_QWORD *)(v85 + 8 * v380) >> 8) ^ 0x767FE1B5B696B6;
  v382 = (*(_QWORD *)(v85 + 8 * (v368 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v383 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v363 ^ 0x30)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v383 ^ 0x4F;
  *(_QWORD *)&v348 = v383 ^ 0x767FE1B5B696B600;
  v384 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x8E4AB8BF8AD46B7ALL) + 0x47255C5FC56A35BDLL;
  v385 = *(_QWORD *)(v85 + 8 * (v367 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v385 ^ 0x4F;
  *(_QWORD *)&v348 = v385 ^ 0x767FE1B5B696B600;
  v386 = (v348 >> 8) + 0x7A9A5AC08F0981FLL - ((2 * (v348 >> 8)) & 0xF534B5811E1303ELL);
  LODWORD(v386) = ((((((v382 - 0x37053372580749EDLL - ((2 * v382) & 0x1F5991B4FF16C26uLL)) >> 3) & 0x393A5F230000 ^ 0x191014230000)
                   - 0x37053372580749EDLL
                   - ((2
                     * (((v382 - 0x37053372580749EDLL - ((2 * v382) & 0x1F5991B4FF16C26uLL)) >> 3) & 0x393A5F230000 ^ 0x191014230000)) & 0x10100E400000)) ^ (v382 - 0x37053372580749EDLL - ((2 * v382) & 0x1F5991B4FF16C26))) >> 16) ^ ((((((v381 + 0x1BA83F06DC6F3C02 - ((2 * v381) & 0x1507E0DB8DE7804uLL)) >> 3) & 0x3A5F23A100 ^ 0x205B01A100) + 0x1BA83F06DC6F3C02 - ((2 * (((v381 + 0x1BA83F06DC6F3C02 - ((2 * v381) & 0x1507E0DB8DE7804uLL)) >> 3) & 0x3A5F23A100 ^ 0x205B01A100)) & 0x4B8464000)) ^ (v381 + 0x1BA83F06DC6F3C02 - ((2 * v381) & 0x1507E0DB8DE7804))) >> 8) ^ (((((v384 >> 3) & 0xB0393A5F000000 ^ 0xA0290A58000000) - ((2 * ((v384 >> 3) & 0xB0393A5F000000 ^ 0xA0290A58000000)) & 0x4030348A000000) + 0x48255C5FC56A35BDLL) ^ v384) >> 24) ^ (((((v386 >> 3) & 0x1DB0393A00000000 ^ 0xB0303000000000) + 0x7A9A5AC08F0981FLL - ((2 * ((v386 >> 3) & 0x1DB0393A00000000 ^ 0xB0303000000000)) & 0xB40425000000000)) ^ v386) >> 32);
  v387 = (*(_QWORD *)(v85 + 8 * (v369 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v388 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v364) ^ 0x77)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v389 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v360) ^ 0xACLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v389 ^ 0x4F;
  *(_QWORD *)&v348 = v389 ^ 0x767FE1B5B696B600;
  v390 = (v348 >> 8) - 0x6E70B49D790B0DA7 - ((2 * (v348 >> 8)) & 0x231E96C50DE9E4B2);
  v391 = *(_QWORD *)(v85 + 8 * (v370 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v391 ^ 0x4F;
  *(_QWORD *)&v348 = v391 ^ 0x767FE1B5B696B600;
  v392 = (v348 >> 8) - 0x431457FC98A9488 - ((2 * (v348 >> 8)) & 0xF79D75006CEAD6F0);
  LODWORD(v392) = ((((((v388 - 0x7DA83D3274F56583 - ((2 * v388) & 0xAF859B161534FAuLL)) >> 3) & 0x393A5F230000 ^ 0x381811210000)
                   - 0x7DA83D3274F56583
                   - ((2
                     * (((v388 - 0x7DA83D3274F56583 - ((2 * v388) & 0xAF859B161534FAuLL)) >> 3) & 0x393A5F230000 ^ 0x381811210000)) & 0x1016040000)) ^ (v388 - 0x7DA83D3274F56583 - ((2 * v388) & 0xAF859B161534FALL))) >> 16) ^ ((((((v387 + 0x2AC4472DBAD41234 - ((2 * v387) & 0x1888E5B75A82468uLL)) >> 3) & 0x3A5F23A100 ^ 0x2017028000) + 0x2AC4472DBAD41234 - ((2 * (((v387 + 0x2AC4472DBAD41234 - ((2 * v387) & 0x1888E5B75A82468uLL)) >> 3) & 0x3A5F23A100 ^ 0x2017028000)) & 0x5034000000)) ^ (v387 + 0x2AC4472DBAD41234 - ((2 * v387) & 0x1888E5B75A82468))) >> 8) ^ (((((v390 >> 3) & 0xB0393A5F000000 ^ 0x30292850000000) - 0x6E70B49D790B0DA7 + (~(2 * ((v390 >> 3) & 0xB0393A5F000000 ^ 0x30292850000000)) | 0xFEFFEDBBF3FFFFFFLL) + 1) ^ v390) >> 24) ^ (((((v392 >> 3) & 0x1DB0393A00000000 ^ 0x1D30111000000000) - 0x431457FC98A9488 + (~(2 * ((v392 >> 3) & 0x1DB0393A00000000 ^ 0x1D30111000000000)) | 0xCCFF8FFFFFFFFFFFLL) + 1) ^ v392) >> 32);
  v393 = *(_QWORD *)(v85 + 8 * (v371 ^ 0x22));
  v394 = (v393 << 56) ^ 0x700000000000000;
  v395 = (v393 ^ 0x767FE1B5B696B64FuLL) >> (v393 & 8 ^ 8) >> (v393 & 8);
  v396 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE2(v360) ^ 0x44)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v396 ^ 0x4F;
  *(_QWORD *)&v348 = v396 ^ 0x767FE1B5B696B600;
  v397 = (v348 >> 8) - 0x541163EEC58EE692 - ((2 * (v348 >> 8)) & 0x57DD382274E232DCLL);
  v398 = (*(_QWORD *)(v85 + 8 * (v373 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v395) = ((((((((v395 - 0x1CD0D94764829C28 - ((2 * v395) & 0xC65E4D7136FAC7B0)) ^ 0x32F26B89B7D63D8)
                      + v394) >> 3) & 0xB0393A5F000000)
                   - 0x1CD0D94764829C28
                   - (((((v395 - 0x1CD0D94764829C28 - ((2 * v395) & 0xC65E4D7136FAC7B0)) ^ 0x32F26B89B7D63D8)
                      + v394) >> 2) & 0x40407036000000)) ^ (v395
                                                            - 0x1CD0D94764829C28
                                                            - ((2 * v395) & 0xC65E4D7136FAC7B0))) >> 24) ^ (((((v397 >> 3) & 0x1DB0393A00000000 ^ 0x1530110200000000) - 0x541163EEC58EE692 - ((2 * ((v397 >> 3) & 0x1DB0393A00000000 ^ 0x1530110200000000)) & 0x1340302000000000)) ^ v397) >> 32) ^ ((((((v398 - ((2 * v398) & 0x133AD9E3AFE9B72uLL) + 0x5199D6CF1D7F4DB9) >> 3) & 0x3A5F23A100 ^ 0x184323A100) - ((2 * (((v398 - ((2 * v398) & 0x133AD9E3AFE9B72uLL) + 0x5199D6CF1D7F4DB9) >> 3) & 0x3A5F23A100 ^ 0x184323A100)) & 0x143A460200) + 0x5199D7CF1D7F4DB9) ^ (v398 - ((2 * v398) & 0x133AD9E3AFE9B72) + 0x5199D6CF1D7F4DB9)) >> 8);
  v399 = (*(_QWORD *)(v85 + 8 * (v375 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v400 = v399 - ((2 * v399) & 0x4BB609B879B006) + 0x4625DB04DC3CD803;
  v401 = *(unsigned __int8 *)(v67 + (v366 ^ 0xD6));
  LODWORD(v397) = v395 ^ (((((v400 >> 3) & 0x393A5F230000 ^ 0x39201B030000)
                          - ((2 * ((v400 >> 3) & 0x393A5F230000 ^ 0x39201B030000)) & 0x3200B8400000)
                          + 0x4626DB04DC3CD803) ^ v400) >> 16);
  v402 = (v392 ^ 0xB49B7F1ALL)
       - ((2 * (v392 ^ 0xB49B7F1A)) & 0x83E4832E)
       - 0x1A4CB98DBE0DBE69;
  v403 = *(unsigned __int8 *)(v67 + (v392 ^ 0x1ALL));
  v404 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v392 ^ 0x7F1A)
                                                                  - ((2 * (v392 ^ 0x7F1A)) & 0x832E)
                                                                  + 16791) >> 8) ^ 0x41));
  v405 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v397 ^ 0xFCD1)
                                                                  - ((2 * (v397 ^ 0xFCD1)) & 0xC5D6)
                                                                  - 7445) >> 8) ^ 0xE2));
  v406 = (v366 ^ 0x38DC17D6)
       - ((2 * (v366 ^ 0x38DC17D6)) & 0xD29C8730)
       - 0x591A204296B1BC68;
  v407 = *(unsigned __int8 *)(v67
                            + ((((v386 ^ 0xA9141D0E)
                                                - ((2 * (v386 ^ 0xA9141D0E)) & 0x96A5E6E0)
                                                - 883756176) >> 16) ^ 0x52));
  v408 = *(unsigned __int8 *)(v67 + (BYTE1(v406) ^ 0x43));
  v409 = *(unsigned __int8 *)(v67
                            + ((((v397 ^ 0x764FFCD1)
                                                - ((2 * (v397 ^ 0x764FFCD1)) & 0x7823C5D6)
                                                - 1139678485) >> 16) ^ 0x11));
  v410 = *(unsigned __int8 *)(v67
                            + ((((v392 ^ 0xB49B7F1A)
                                                - ((2 * (v392 ^ 0xB49B7F1A)) & 0x83E4832E)
                                                + 1106395543) >> 16) ^ 0xF2));
  v411 = *(unsigned __int8 *)(v67
                            + ((((v397 ^ 0x764FFCD1)
                               - ((2 * (v397 ^ 0x764FFCD1)) & 0x17823C5D6uLL)
                               + 0x25247EEFBC11E2EBLL) >> 24) ^ 0x25247EEFBCLL));
  v412 = *(unsigned __int8 *)(v67 + (v397 ^ 0xD1));
  v413 = *(unsigned __int8 *)(v67 + (BYTE2(v406) ^ 0x4ELL));
  v414 = *(unsigned __int8 *)(v67
                            + ((((v386 ^ 0xA9141D0ELL)
                               - ((2 * (v386 ^ 0xA9141D0ELL)) & 0x196A5E6E0uLL)
                               + 0x3C21E1EDCB52F370) >> 24) ^ 0x3C21E1EDCBLL));
  v415 = *(unsigned __int8 *)(v67 + (v386 ^ 0xELL));
  v416 = *(unsigned __int8 *)(v67 + ((v406 >> 24) ^ 0xA6E5DFBD69));
  v417 = ((*(_QWORD *)(v85 + 8 * (v401 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6)
       - 0x16BF9E746B56CDB1
       - ((2 * ((*(_QWORD *)(v85 + 8 * (v401 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6)) & 0x80C3172952649ELL);
  v418 = *(unsigned __int8 *)(v67 + ((v402 >> 24) ^ 0xE5B3467241));
  v419 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + (((unsigned __int16)((v386 ^ 0x1D0E)
                                                                               - ((2 * (v386 ^ 0x1D0E)) & 0xE6E0)
                                                                               - 3216) >> 8) ^ 0xF3)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v419 ^ 0x4F;
  *(_QWORD *)&v348 = v419 ^ 0x767FE1B5B696B600;
  v420 = (v348 >> 8) + 0x2D47BB741353E8D9 - ((2 * (v348 >> 8)) & 0x5A8F76E826A7D1B2);
  v421 = *(_QWORD *)(v85 + 8 * (v403 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v421 ^ 0x4F;
  *(_QWORD *)&v348 = v421 ^ 0x767FE1B5B696B600;
  LODWORD(v417) = (((((v420 >> 3) & 0xB0393A5F000000 ^ 0xA0312A02000000)
                   + 0x2D47BB741353E8D9
                   - ((2 * ((v420 >> 3) & 0xB0393A5F000000 ^ 0xA0312A02000000)) & 0x726026000000)) ^ v420) >> 24) ^ (((((v417 >> 3) & 0x393A5F230000 ^ 0x83052010000) - 0x16BF9E746B56CDB1 + (~(2 * ((v417 >> 3) & 0x393A5F230000 ^ 0x83052010000)) | 0xFFFFBDEBD7BDFFFFLL) + 1) ^ v417) >> 16);
  v422 = (v348 >> 8) - 0x650402892307BCE0 - ((2 * (v348 >> 8)) & 0x35F7FAEDB9F08640);
  LODWORD(v417) = v417 ^ (((((v422 >> 3) & 0x1DB0393A00000000 ^ 0x1110392A00000000)
                          - 0x650402892307BCE0
                          - ((2 * ((v422 >> 3) & 0x1DB0393A00000000 ^ 0x1110392A00000000)) & 0x3160726400000000)) ^ v422) >> 32);
  v423 = (*(_QWORD *)(v85 + 8 * (v405 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v417) = v417 ^ ((((((v423 - ((2 * v423) & 0x197D506BCD1F566uLL) - 0x2A34157CA197054DLL) >> 3) & 0x3A5F23A100 ^ 0x104B010100)
                          + 0x835E68FAB4
                          + (~(2
                             * (((v423 - ((2 * v423) & 0x197D506BCD1F566uLL) - 0x2A34157CA197054DLL) >> 3) & 0x3A5F23A100 ^ 0x104B010100)) | 0xFFFFFFFB43BEBFFFLL)) ^ (v423 - ((2 * v423) & 0x197D506BCD1F566) - 0x2A34157CA197054DLL)) >> 8);
  v424 = (*(_QWORD *)(v85 + 8 * (v407 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v425 = (*(_QWORD *)(v85 + 8 * (v404 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v426 = *(_QWORD *)(v85 + 8 * (v409 ^ 0x22));
  LODWORD(v424) = ((((((v425 + 0x7B93462629BB31A2 - ((2 * v425) & 0x1268C4C53766344uLL)) >> 3) & 0x393A5F230000 ^ 0x280045230000)
                   + 0x7B93462629BB31A2
                   - ((2
                     * (((v425 + 0x7B93462629BB31A2 - ((2 * v425) & 0x1268C4C53766344uLL)) >> 3) & 0x393A5F230000 ^ 0x280045230000)) & 0x4412460000)) ^ (v425 + 0x7B93462629BB31A2 - ((2 * v425) & 0x1268C4C53766344))) >> 16) ^ ((((((v424 - 0x37888A80C90E55C9 - ((2 * v424) & 0xEEEAFE6DE3546EuLL)) >> 3) & 0x3A5F23A100 ^ 0x2A46022100) - 0x37888A80C90E55C9 - ((2 * (((v424 - 0x37888A80C90E55C9 - ((2 * v424) & 0xEEEAFE6DE3546EuLL)) >> 3) & 0x3A5F23A100 ^ 0x2A46022100)) & 0x742C434000)) ^ (v424 - 0x37888A80C90E55C9 - ((2 * v424) & 0xEEEAFE6DE3546ELL))) >> 8);
  *((_QWORD *)&v348 + 1) = v426 ^ 0x4F;
  *(_QWORD *)&v348 = v426 ^ 0x767FE1B5B696B600;
  v427 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x2B68EE1AA086BC98) - 0x6A4B88F2AFBCA1B4;
  v428 = *(_QWORD *)(v85 + 8 * (v408 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v428 ^ 0x4F;
  *(_QWORD *)&v348 = v428 ^ 0x767FE1B5B696B600;
  v429 = (v348 >> 8) + 0x6D8189AFE771509DLL - ((2 * (v348 >> 8)) & 0xDB03135FCEE2A13ALL);
  LODWORD(v427) = v424 ^ (((((v427 >> 3) & 0xB0393A5F000000 ^ 0xB008200A000000)
                          - ((2 * ((v427 >> 3) & 0xB0393A5F000000 ^ 0xB008200A000000)) & 0x1606210A0000000)
                          - 0x694B88F2AFBCA1B4) ^ v427) >> 24) ^ (((((v429 >> 3) & 0x1DB0393A00000000 ^ 0xDB0313000000000)
                                                                    + 0x6D8189AFE771509DLL
                                                                    - ((2
                                                                      * ((v429 >> 3) & 0x1DB0393A00000000 ^ 0xDB0313000000000)) & 0x1B00125400000000)) ^ v429) >> 32);
  v430 = (*(_QWORD *)(v85 + 8 * ((v410 - 2 * (v410 & 0xF2u) + 242) ^ 0xD0)) >> 8) ^ 0x767FE1B5B696B6;
  v431 = *(_QWORD *)(v85 + 8 * (v411 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v431 ^ 0x4F;
  *(_QWORD *)&v348 = v431 ^ 0x767FE1B5B696B600;
  v432 = (v348 >> 8) + 0x6B006DBE7F39A076 - ((2 * (v348 >> 8)) & 0xD600DB7CFE7340ECLL);
  v433 = *(_QWORD *)(v85 + 8 * (v413 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v433 ^ 0x4F;
  *(_QWORD *)&v348 = v433 ^ 0x767FE1B5B696B600;
  v434 = (v348 >> 8) - 0x5AF4F0C37B9DF843 - ((2 * (v348 >> 8)) & 0x4A161E7908C40F7ALL);
  LODWORD(v430) = (((((v432 >> 3) & 0xB0393A5F000000 ^ 0x2009324F000000)
                   + 0x6B006DBE7F39A076
                   - ((2 * ((v432 >> 3) & 0xB0393A5F000000 ^ 0x2009324F000000)) & 0x5274BE000000)) ^ v432) >> 24) ^ ((((((v430 - 0x4D091BDA0717CB66 - ((2 * v430) & 0x1EDC84BF1D06934uLL)) >> 3) & 0x393A5F230000 ^ 0x18001F010000) - 0x4D091BDA0717CB66 - ((2 * (((v430 - 0x4D091BDA0717CB66 - ((2 * v430) & 0x1EDC84BF1D06934uLL)) >> 3) & 0x393A5F230000 ^ 0x18001F010000)) & 0x4040B0400000)) ^ (v430 - 0x4D091BDA0717CB66 - ((2 * v430) & 0x1EDC84BF1D06934))) >> 16) ^ (((((v434 >> 3) & 0x1DB0393A00000000 ^ 0x14A0212200000000) - 0x5AF4F0C37B9DF843 - ((2 * ((v434 >> 3) & 0x1DB0393A00000000 ^ 0x14A0212200000000)) & 0xA00127000000000)) ^ v434) >> 32);
  v435 = (*(_QWORD *)(v85 + 8 * (v414 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v436 = (*(_QWORD *)(v85 + 8 * (v412 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v437 = v436 + 0x5E3E7394C6699FD8 - ((2 * v436) & 0x7CE7298CD33FB0);
  LODWORD(v436) = v430 ^ ((((((v435 - ((2 * v435) & 0x1AACCA7904C08B2uLL) + 0x4BD56653C8260459) >> 3) & 0x3A5F23A100 ^ 0xA59008000)
                          - ((2
                            * (((v435 - ((2 * v435) & 0x1AACCA7904C08B2uLL) + 0x4BD56653C8260459) >> 3) & 0x3A5F23A100 ^ 0xA59008000)) & 0x2490440000)
                          + 0x4BD56753C8260459) ^ (v435 - ((2 * v435) & 0x1AACCA7904C08B2) + 0x4BD56653C8260459)) >> 8);
  v438 = (*(_QWORD *)(v85 + 8 * (v416 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v439 = *(_QWORD *)(v85 + 8 * (v415 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v439 ^ 0x4F;
  *(_QWORD *)&v348 = v439 ^ 0x767FE1B5B696B600;
  v440 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x51C9D26A492F3160) + 0x28E4E935249798B0;
  v441 = *(_QWORD *)(v85 + 8 * (v418 ^ 0x22));
  LODWORD(v430) = ((((((v438 - 0x694F4A6DE353418BLL - ((2 * v438) & 0x1616B2439597CEAuLL)) >> 3) & 0x393A5F230000 ^ 0x103243010000)
                   - 0x694F4A6DE353418BLL
                   - ((2
                     * (((v438 - 0x694F4A6DE353418BLL - ((2 * v438) & 0x1616B2439597CEAuLL)) >> 3) & 0x393A5F230000 ^ 0x103243010000)) & 0x622438400000)) ^ (v438 - 0x694F4A6DE353418BLL - ((2 * v438) & 0x1616B2439597CEALL))) >> 16) ^ (((((v437 >> 3) & 0x3A5F23A100 ^ 0x3218012100) + 0x5E3E7394C6699FD8 - ((2 * ((v437 >> 3) & 0x3A5F23A100 ^ 0x3218012100)) & 0x208C430200)) ^ v437) >> 8) ^ (((((v440 >> 3) & 0xB0393A5F000000 ^ 0x10192204000000) - ((2 * ((v440 >> 3) & 0xB0393A5F000000 ^ 0x10192204000000)) & 0x140526008000000) + 0x29E4E935249798B0) ^ v440) >> 24);
  *((_QWORD *)&v348 + 1) = v441 ^ 0x4F;
  *(_QWORD *)&v348 = v441 ^ 0x767FE1B5B696B600;
  v442 = (v348 >> 8) - 0x3F173378FFEC0FC9 - ((2 * (v348 >> 8)) & 0x81D1990E0027E06ELL);
  v443 = (((v442 >> 3) & 0x1DB0393A00000000 ^ 0x1810191000000000)
        - 0x3F173378FFEC0FC9
        - ((2 * ((v442 >> 3) & 0x1DB0393A00000000 ^ 0x1810191000000000)) & 0x140100400000000)) ^ v442;
  v444 = (v430 ^ HIDWORD(v443) ^ 0x605C0F4)
       - ((2 * (v430 ^ HIDWORD(v443) ^ 0x605C0F4)) & 0x17027FA7ELL)
       - 0xF84FC747EC02C1;
  v445 = *(unsigned __int8 *)(v67 + ((v430 ^ BYTE4(v443)) ^ 0xF4));
  v446 = *(unsigned __int8 *)(v67
                            + ((((v417 ^ 0xDFD705CB)
                                                - ((2 * (v417 ^ 0xDFD705CB)) & 0xE0605A70)
                                                - 265278152) >> 16) ^ 0x30));
  v447 = *(unsigned __int8 *)(v67
                            + ((((v417 ^ 0xDFD705CBLL)
                               - ((2 * (v417 ^ 0xDFD705CBLL)) & 0x1E0605A70uLL)
                               + 0x208522F3F0302D38) >> 24) ^ 0x208522F3F0));
  v448 = *(unsigned __int8 *)(v67 + (v417 ^ 0xCBLL));
  v449 = *(unsigned __int8 *)(v67 + (v427 ^ 0x9CLL));
  v450 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + (((unsigned __int16)((v417 ^ 0x5CB)
                                                                                - ((2 * (v417 ^ 0x5CB)) & 0x5A70)
                                                                                + 11576) >> 8) ^ 0x2DLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v451 = *(unsigned __int8 *)(v67
                            + ((((v436 ^ 0xF8C8BB45)
                                                - ((2 * (v436 ^ 0xF8C8BB45)) & 0x15562F90)
                                                - 1968498744) >> 16) ^ 0xABLL));
  v452 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + (((unsigned __int16)((v427 ^ 0x839C)
                                                                                - ((2 * (v427 ^ 0x839C)) & 0xB748)
                                                                                + 23460) >> 8) ^ 0x5BLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v453 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + ((((v436 ^ 0xF8C8BB45)
                                            - ((2 * (v436 ^ 0xF8C8BB45)) & 0x115562F90uLL)
                                            + 0x653F16248AAB17C8) >> 24) ^ 0x653F16248ALL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v453 ^ 0x4F;
  *(_QWORD *)&v348 = v453 ^ 0x767FE1B5B696B600;
  v454 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0xC505BA35326C4824) - 0x1D7D22E566C9DBEELL;
  v455 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v444 >> 24) ^ 0xFF07B038B8)) ^ 0x22));
  LODWORD(v450) = ((((((v452 + 0x34F1681F9FC149DALL - ((2 * v452) & 0x1E2D03F3F8293B4uLL)) >> 3) & 0x393A5F230000 ^ 0x290253200000)
                   + 0x34F1681F9FC149DALL
                   - ((2
                     * (((v452 + 0x34F1681F9FC149DALL - ((2 * v452) & 0x1E2D03F3F8293B4uLL)) >> 3) & 0x393A5F230000 ^ 0x290253200000)) & 0x50343E020000)) ^ (v452 + 0x34F1681F9FC149DALL - ((2 * v452) & 0x1E2D03F3F8293B4))) >> 16) ^ ((((((v450 + 0x74D81D335D46B0BELL - ((2 * v450) & 0x1B03A66BA8D617CuLL)) >> 3) & 0x3A5F23A100 ^ 0x224B208000) + 0x74D81D335D46B0BELL - ((2 * (((v450 + 0x74D81D335D46B0BELL - ((2 * v450) & 0x1B03A66BA8D617CuLL)) >> 3) & 0x3A5F23A100 ^ 0x224B208000)) & 0x64BA054000)) ^ (v450 + 0x74D81D335D46B0BELL - ((2 * v450) & 0x1B03A66BA8D617CLL))) >> 8) ^ (((((v454 >> 3) & 0xB0393A5F000000 ^ 0x10192253000000) - ((2 * ((v454 >> 3) & 0xB0393A5F000000 ^ 0x10192253000000)) & 0x100323432000000) - 0x1C7D22E566C9DBEELL) ^ v454) >> 24);
  *((_QWORD *)&v348 + 1) = v455 ^ 0x4F;
  *(_QWORD *)&v348 = v455 ^ 0x767FE1B5B696B600;
  v456 = (v348 >> 8) + 0x318E550222BA9347 - ((2 * (v348 >> 8)) & 0x631CAA044575268ELL);
  LODWORD(v450) = v450 ^ (((((v456 >> 3) & 0x1DB0393A00000000 ^ 0x430082000000000)
                          + 0x318E550222BA9347
                          - ((v456 >> 2) & 0x2300220400000000)) ^ v456) >> 32);
  v457 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v427 ^ 0xBEA1839C)
                                                              - ((2 * (v427 ^ 0xBEA1839C)) & 0x2F0B748)
                                                              - 2122818652) >> 16) ^ 0x78)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v458 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v436 ^ 0x45)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v458 ^ 0x4F;
  *(_QWORD *)&v348 = v458 ^ 0x767FE1B5B696B600;
  v459 = (v348 >> 8) + 0x7C63FF5DA936865CLL - ((2 * (v348 >> 8)) & 0xF8C7FEBB526D0CB8);
  v460 = *(_QWORD *)(v85 + 8 * (v445 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v460 ^ 0x4F;
  *(_QWORD *)&v348 = v460 ^ 0x767FE1B5B696B600;
  v461 = (v348 >> 8) + 0x6D02016DA222FA71 - ((2 * (v348 >> 8)) & 0xDA0402DB4445F4E2);
  v462 = (*(_QWORD *)(v85 + 8 * (v446 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v437) = (((((v459 >> 3) & 0xB0393A5F000000 ^ 0x80392A15000000)
                   + 0x7C63FF5DA936865CLL
                   - ((2 * ((v459 >> 3) & 0xB0393A5F000000 ^ 0x80392A15000000)) & 0x40723012000000)) ^ v459) >> 24) ^ ((((((v457 + 0x17848CF17B8030F7 - ((2 * v457) & 0x10919E2F70061EEuLL)) >> 3) & 0x393A5F230000 ^ 0x111A0F200000) + 0x17848CF17B8030F7 - ((2 * (((v457 + 0x17848CF17B8030F7 - ((2 * v457) & 0x10919E2F70061EEuLL)) >> 3) & 0x393A5F230000 ^ 0x111A0F200000)) & 0x1060B6000000)) ^ (v457 + 0x17848CF17B8030F7 - ((2 * v457) & 0x10919E2F70061EELL))) >> 16) ^ (((((v461 >> 3) & 0x1DB0393A00000000 ^ 0xDA0002800000000) + 0x6D02016DA222FA71 - ((2 * ((v461 >> 3) & 0x1DB0393A00000000 ^ 0xDA0002800000000)) & 0x1A00025000000000)) ^ v461) >> 32) ^ ((((((v462 - ((2 * v462) & 0x12EA8C2E940C0E2uLL) + 0x4997546174A06071) >> 3) & 0x3A5F23A100 ^ 0x80E000000) - ((2 * (((v462 - ((2 * v462) & 0x12EA8C2E940C0E2uLL) + 0x4997546174A06071) >> 3) & 0x3A5F23A100 ^ 0x80E000000)) & 0x40A8404000) + 0x4997556174A06071) ^ (v462 - ((2 * v462) & 0x12EA8C2E940C0E2) + 0x4997546174A06071)) >> 8);
  v463 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + (((unsigned __int16)((v436 ^ 0xBB45)
                                                                               - ((2 * (v436 ^ 0xBB45)) & 0x2F90)
                                                                               + 6088) >> 8) ^ 0x17)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v463 ^ 0x4F;
  *(_QWORD *)&v348 = v463 ^ 0x767FE1B5B696B600;
  v464 = (v348 >> 8) + 0x7A9D1249CE4A3247 - ((2 * (v348 >> 8)) & 0xF53A24939C94648ELL);
  v465 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v444) ^ 0xFDLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v465 ^ 0x4F;
  *(_QWORD *)&v348 = v465 ^ 0x767FE1B5B696B600;
  v466 = (v348 >> 8) - 0x5C4C6C75932C0B50 - ((2 * (v348 >> 8)) & 0x47672714D9A7E960);
  v467 = (*(_QWORD *)(v85 + 8 * (v447 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v464) = (((((v466 >> 3) & 0x1DB0393A00000000 ^ 0x1430303000000000)
                   - 0x5C4C6C75932C0B50
                   - ((2 * ((v466 >> 3) & 0x1DB0393A00000000 ^ 0x1430303000000000)) & 0x360221400000000)) ^ v466) >> 32) ^ (((((v464 >> 3) & 0xB0393A5F000000 ^ 0x10200819000000) + 0x7A9D1249CE4A3247 - ((2 * ((v464 >> 3) & 0xB0393A5F000000 ^ 0x10200819000000)) & 0x12020109C000000)) ^ v464) >> 24) ^ ((((((v467 - ((2 * v467) & 0x145BBEAD20721EEuLL) + 0x3BA2DDF5690390F7) >> 3) & 0x3A5F23A100 ^ 0x3A0D202000) - ((2 * (((v467 - ((2 * v467) & 0x145BBEAD20721EEuLL) + 0x3BA2DDF5690390F7) >> 3) & 0x3A5F23A100 ^ 0x3A0D202000)) & 0x6092070000) + 0x3BA2DEF5690390F7) ^ (v467 - ((2 * v467) & 0x145BBEAD20721EELL) + 0x3BA2DDF5690390F7)) >> 8);
  v468 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v427 ^ 0xBEA1839CLL)
                                             - ((2 * (v427 ^ 0xBEA1839CLL)) & 0x102F0B748uLL)
                                             + 0x2285176C81785BA4) >> 24) ^ 0x2285176C81)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v469 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE2(v444) ^ 0x13)) ^ 0x22));
  LODWORD(v427) = v464 ^ ((((((v468 - ((2 * v468) & 0x228AB6782F2DDCuLL) - 0x2CEEBAA4C3E86912) >> 3) & 0x393A5F230000 ^ 0x282A47020000)
                          - ((2
                            * (((v468 - ((2 * v468) & 0x228AB6782F2DDCuLL) - 0x2CEEBAA4C3E86912) >> 3) & 0x393A5F230000 ^ 0x282A47020000)) & 0x23438060000)
                          - 0x2CEDBAA4C3E86912) ^ (v468 - ((2 * v468) & 0x228AB6782F2DDCLL) - 0x2CEEBAA4C3E86912)) >> 16);
  *((_QWORD *)&v348 + 1) = v469 ^ 0x4F;
  *(_QWORD *)&v348 = v469 ^ 0x767FE1B5B696B600;
  v470 = (v348 >> 8) - 0x29AFC88FF6BC24CFLL - ((2 * (v348 >> 8)) & 0xACA06EE01287B662);
  v471 = *(_QWORD *)(v85 + 8 * (v448 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v471 ^ 0x4F;
  *(_QWORD *)&v348 = v471 ^ 0x767FE1B5B696B600;
  v472 = (v348 >> 8) + 0x1BC22751C0F1420 - ((2 * (v348 >> 8)) & 0x37844EA381E2840);
  v473 = (*(_QWORD *)(v85 + 8 * (v449 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v474 = (*(_QWORD *)(v85 + 8 * (v451 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v468) = (((((v472 >> 3) & 0x1DB0393A00000000 ^ 0x30000A00000000)
                   + 0x1BC22751C0F1420
                   - ((2 * ((v472 >> 3) & 0x1DB0393A00000000 ^ 0x30000A00000000)) & 0x360406000000000)) ^ v472) >> 32) ^ (((((v470 >> 3) & 0xB0393A5F000000 ^ 0x80002A01000000) - 0x29AFC88FF6BC24CFLL - ((2 * ((v470 >> 3) & 0xB0393A5F000000 ^ 0x80002A01000000)) & 0x20626012000000)) ^ v470) >> 24) ^ ((((((v473 - ((2 * v473) & 0x13D9298E07ADF3CuLL) + 0x1F9EC94C703D6F9ELL) >> 3) & 0x3A5F23A100 ^ 0x280E03A100) - ((2 * (((v473 - ((2 * v473) & 0x13D9298E07ADF3CuLL) + 0x1F9EC94C703D6F9ELL) >> 3) & 0x3A5F23A100 ^ 0x280E03A100)) & 0x10A0424200) + 0x1F9ECA4C703D6F9ELL) ^ (v473 - ((2 * v473) & 0x13D9298E07ADF3CLL) + 0x1F9EC94C703D6F9ELL)) >> 8) ^ ((((((v474 - ((2 * v474) & 0x30831888B7DEA0uLL) - 0x2AE7BE73BBA410B0) >> 3) & 0x393A5F230000 ^ 0x83008030000) - ((2 * (((v474 - ((2 * v474) & 0x30831888B7DEA0uLL) - 0x2AE7BE73BBA410B0) >> 3) & 0x393A5F230000 ^ 0x83008030000)) & 0x21088060000) - 0x2AE6BE73BBA410B0) ^ (v474 - ((2 * v474) & 0x30831888B7DEA0) - 0x2AE7BE73BBA410B0)) >> 16);
  v475 = (v427 ^ 0x736B2526)
       - 2 * ((v427 ^ 0x736B2526) & 0x7B3E797C ^ v427 & 0x10)
       + 0x3D4A1B27B3E796CLL;
  v476 = *(unsigned __int8 *)(v67
                            + ((((v427 ^ 0x736B2526)
                                                - 2 * ((v427 ^ 0x736B2526) & 0x7B3E797C ^ v427 & 0x10)
                                                + 2067691884) >> 16) ^ 0x3ELL));
  v477 = (v437 ^ 0xCE595593)
       - ((2 * (v437 ^ 0xCE595593)) & 0xBDEFFCDA)
       - 0x5EABE5FCA1080193;
  v478 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v437 ^ 0x5593)
                                                                  - ((2 * (v437 ^ 0x5593)) & 0xFCDA)
                                                                  - 403) >> 8) ^ 0xFELL));
  v479 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v468 ^ 0xE9E0)
                                                                  - ((2 * (v468 ^ 0xE9E0)) & 0xD95E)
                                                                  - 4945) >> 8) ^ 0xECLL));
  v480 = *(unsigned __int8 *)(v67
                            + ((((v450 ^ 0x9B01AF29)
                               - 2 * ((v450 ^ 0x9B01AF29) & 0xFB93B9F ^ (unint64_t)(v450 & 6))
                               + 0x147064F60FB93B99) >> 24) ^ 0x147064F60FLL));
  v481 = *(unsigned __int8 *)(v67 + (v437 ^ 0x93));
  v482 = *(unsigned __int8 *)(v67
                            + ((((v468 ^ 0xC533E9E0)
                                                - ((2 * (v468 ^ 0xC533E9E0)) & 0x4ABFD95E)
                                                - 1520440145) >> 16) ^ 0x5FLL));
  v483 = *(unsigned __int8 *)(v67 + (v427 ^ 0x26));
  v484 = *(unsigned __int8 *)(v67 + ((v475 >> 24) ^ 0x3D4A1B27BLL));
  v485 = *(unsigned __int8 *)(v67
                            + ((((v437 ^ 0xCE595593)
                                                - ((2 * (v437 ^ 0xCE595593)) & 0xBDEFFCDA)
                                                + 1593310829) >> 16) ^ 0xF7));
  v486 = *(unsigned __int8 *)(v67 + (v468 ^ 0xE0));
  v487 = *(unsigned __int8 *)(v67 + (v450 ^ 0x29));
  v488 = *(unsigned __int8 *)(v67
                            + ((((v468 ^ 0xC533E9E0)
                               - ((2 * (v468 ^ 0xC533E9E0)) & 0x14ABFD95EuLL)
                               + 0x106491B4A55FECAFLL) >> 24) ^ 0x106491B4A5));
  v489 = *(unsigned __int8 *)(v67
                            + (((unsigned __int16)((v450 ^ 0xAF29)
                                                                  - 2 * ((v450 ^ 0xAF29) & 0x3B9F ^ v450 & 6)
                                                                  + 15257) >> 8) ^ 0x3BLL));
  v490 = *(unsigned __int8 *)(v67
                            + (((unint64_t)((v450 ^ 0x9B01AF29)
                                                                  - 2
                                                                  * ((v450 ^ 0x9B01AF29) & 0xFB93B9F ^ v450 & 6)
                                                                  + 263797657) >> 16) ^ 0xB9)) ^ 0x22;
  v491 = *(unsigned __int8 *)(v67 + (BYTE1(v475) ^ 0x79));
  v492 = (*(_QWORD *)(v85 + 8 * v490) >> 8) ^ 0x767FE1B5B696B6;
  v493 = (*(_QWORD *)(v85 + 8 * (v481 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v494 = *(_QWORD *)(v85 + 8 * (v476 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v494 ^ 0x4F;
  *(_QWORD *)&v348 = v494 ^ 0x767FE1B5B696B600;
  v495 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0xD707AB3BC5DC5284) - 0x147C2A621D11D6BELL;
  v496 = *(_QWORD *)(v85 + 8 * (v479 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v496 ^ 0x4F;
  *(_QWORD *)&v348 = v496 ^ 0x767FE1B5B696B600;
  v497 = (v348 >> 8) - 0x11984853B2CCC4FDLL - ((2 * (v348 >> 8)) & 0xDCCF6F589A667606);
  LODWORD(v492) = ((((((v493 + 0x3F388612CFB07AD4 - ((2 * v493) & 0x710C259F60F5A8uLL)) >> 3) & 0x393A5F230000 ^ 0x100259220000)
                   + 0x3F388612CFB07AD4
                   - ((2
                     * (((v493 + 0x3F388612CFB07AD4 - ((2 * v493) & 0x710C259F60F5A8uLL)) >> 3) & 0x393A5F230000 ^ 0x100259220000)) & 0x249E400000)) ^ (v493 + 0x3F388612CFB07AD4 - ((2 * v493) & 0x710C259F60F5A8))) >> 16) ^ ((((((v492 - 0x115268272656C4C2 - ((2 * v492) & 0x15B2FB1B352767CuLL)) >> 3) & 0x3A5F23A100 ^ 0x3A1B212100) - 0x115268272656C4C2 - ((2 * (((v492 - 0x115268272656C4C2 - ((2 * v492) & 0x15B2FB1B352767CuLL)) >> 3) & 0x3A5F23A100 ^ 0x3A1B212100)) & 0x30B2424200)) ^ (v492 - 0x115268272656C4C2 - ((2 * v492) & 0x15B2FB1B352767CLL))) >> 8) ^ (((((v495 >> 3) & 0xB0393A5F000000 ^ 0x3038321C000000) - ((2 * ((v495 >> 3) & 0xB0393A5F000000 ^ 0x3038321C000000)) & 0x100223084000000) - 0x137C2A621D11D6BELL) ^ v495) >> 24);
  v498 = (*(_QWORD *)(v85 + 8 * (v478 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v499 = ((((v498 + 0x61E6334C8BDD533 - ((2 * v498) & 0x3CC669917BAA66uLL)) >> 3) & 0x3A5F23A100 ^ 0x221903A000)
        + 0x61E6334C8BDD533
        - ((2
          * (((v498 + 0x61E6334C8BDD533 - ((2 * v498) & 0x3CC669917BAA66uLL)) >> 3) & 0x3A5F23A100 ^ 0x221903A000)) & 0x6090430200)) ^ (v498 + 0x61E6334C8BDD533 - ((2 * v498) & 0x3CC669917BAA66));
  LODWORD(v498) = v492 ^ (((((v497 >> 3) & 0x1DB0393A00000000 ^ 0x1D80303000000000)
                          - 0x11984853B2CCC4FDLL
                          - ((2 * ((v497 >> 3) & 0x1DB0393A00000000 ^ 0x1D80303000000000)) & 0x1840625000000000)) ^ v497) >> 32);
  v500 = (*(_QWORD *)(v85 + 8 * (v484 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v501 = *(_QWORD *)(v85 + 8 * (v482 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v501 ^ 0x4F;
  *(_QWORD *)&v348 = v501 ^ 0x767FE1B5B696B600;
  v502 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x91E4CA7BF6034344) - 0x370D9AC204FE5E5ELL;
  v503 = *(_QWORD *)(v85 + 8 * (v480 ^ 0x22));
  LODWORD(v500) = ((((((v500 - 0x5527E78B9249BAAALL - ((2 * v500) & 0x1B030E8DB6C8AACuLL)) >> 3) & 0x393A5F230000 ^ 0x10A0D220000)
                   - 0x5527E78B9249BAAALL
                   - ((2
                     * (((v500 - 0x5527E78B9249BAAALL - ((2 * v500) & 0x1B030E8DB6C8AACuLL)) >> 3) & 0x393A5F230000 ^ 0x10A0D220000)) & 0x30609A440000)) ^ (v500 - 0x5527E78B9249BAAALL - ((2 * v500) & 0x1B030E8DB6C8AACLL))) >> 16) ^ (v499 >> 8) ^ (((((v502 >> 3) & 0xB0393A5F000000 ^ 0x1008221F000000) - ((2 * ((v502 >> 3) & 0xB0393A5F000000 ^ 0x1008221F000000)) & 0x1604270B6000000) - 0x360D9AC204FE5E5ELL) ^ v502) >> 24);
  *((_QWORD *)&v348 + 1) = v503 ^ 0x4F;
  *(_QWORD *)&v348 = v503 ^ 0x767FE1B5B696B600;
  v504 = (v348 >> 8) - 0x249535F911779404 - ((2 * (v348 >> 8)) & 0xB6D5940DDD10D7F8);
  v505 = *(_QWORD *)(v85 + 8 * (v483 ^ 0x22));
  LODWORD(v483) = v500 ^ (((((v504 >> 3) & 0x1DB0393A00000000 ^ 0x1920190000000000)
                          - 0x249535F911779404
                          - ((2 * ((v504 >> 3) & 0x1DB0393A00000000 ^ 0x1920190000000000)) & 0x3240100400000000)) ^ v504) >> 32);
  v506 = ((v505 >> 8) ^ 0x767FE1B5B696B6)
       + 0x4BEC9119CCAF56CCLL
       + (~(2 * ((v505 >> 8) ^ 0x767FE1B5B696B6)) | 0xFE26DDCC66A15267)
       + 1;
  v507 = *(_QWORD *)(v85 + 8 * (v488 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v507 ^ 0x4F;
  *(_QWORD *)&v348 = v507 ^ 0x767FE1B5B696B600;
  v508 = (v348 >> 8) - 0x7D9A79EE444FF7C2 - ((2 * (v348 >> 8)) & 0x4CB0C237760107CLL);
  v509 = *(_QWORD *)(v85 + 8 * (v487 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v509 ^ 0x4F;
  *(_QWORD *)&v348 = v509 ^ 0x767FE1B5B696B600;
  v510 = (v348 >> 8) - 0x4E151BA811ACCE5ALL - ((2 * (v348 >> 8)) & 0x63D5C8AFDCA6634CLL);
  LODWORD(v506) = (((((v508 >> 3) & 0xB0393A5F000000 ^ 0x300217000000)
                   - 0x7D9A79EE444FF7C2
                   - ((2 * ((v508 >> 3) & 0xB0393A5F000000 ^ 0x300217000000)) & 0x40002036000000)) ^ v508) >> 24) ^ (((((v506 >> 3) & 0x393A5F230000 ^ 0x102219010000) + 0x4BEC9119CCAF56CCLL - ((2 * ((v506 >> 3) & 0x393A5F230000 ^ 0x102219010000)) & 0x223098460000)) ^ v506) >> 16) ^ (((((v510 >> 3) & 0x1DB0393A00000000 ^ 0x1430180A00000000) - 0x4E151BA811ACCE5ALL - ((2 * ((v510 >> 3) & 0x1DB0393A00000000 ^ 0x1430180A00000000)) & 0x2340402400000000)) ^ v510) >> 32);
  v511 = (*(_QWORD *)(v85 + 8 * (v485 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v512 = *(_QWORD *)(v85 + 8 * (v486 ^ 0x22));
  LODWORD(v486) = v506 ^ ((((((v511 - ((2 * v511) & 0x10A390455FFD6D8uLL) - 0x5F7AE37DD5001494) >> 3) & 0x3A5F23A100 ^ 0x104503A100)
                          - ((2
                            * (((v511 - ((2 * v511) & 0x10A390455FFD6D8uLL) - 0x5F7AE37DD5001494) >> 3) & 0x3A5F23A100 ^ 0x104503A100)) & 0x414474200)
                          - 0x5F7AE27DD5001494) ^ (v511 - ((2 * v511) & 0x10A390455FFD6D8) - 0x5F7AE37DD5001494)) >> 8);
  v513 = ((v512 >> 8) ^ 0x767FE1B5B696B6)
       + 0x1116D1C24B0A2DC6
       - ((2 * ((v512 >> 8) ^ 0x767FE1B5B696B6)) & 0x2DA38496145B8CLL);
  v514 = (*(_QWORD *)(v85 + 8 * (v489 ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v515 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v477 >> 24) ^ 0xA1541A035ELL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v515 ^ 0x4F;
  *(_QWORD *)&v348 = v515 ^ 0x767FE1B5B696B600;
  v516 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x88B58A038DBF3FB0) - 0x3BA53AFE39206028;
  v517 = *(_QWORD *)(v85 + 8 * (v491 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v517 ^ 0x4F;
  *(_QWORD *)&v348 = v517 ^ 0x767FE1B5B696B600;
  v518 = (v348 >> 8) + 0x9173DCF287607AFLL - ((2 * (v348 >> 8)) & 0x122E7B9E50EC0F5ELL);
  LODWORD(v511) = ((((((v514 - 0x2BB88C48949140BBLL - ((2 * v514) & 0x8EE76ED6DD7E8AuLL)) >> 3) & 0x393A5F230000 ^ 0x28324D210000)
                   - 0x2BB88C48949140BBLL
                   - ((2
                     * (((v514 - 0x2BB88C48949140BBLL - ((2 * v514) & 0x8EE76ED6DD7E8AuLL)) >> 3) & 0x393A5F230000 ^ 0x28324D210000)) & 0x626496440000)) ^ (v514 - 0x2BB88C48949140BBLL - ((2 * v514) & 0x8EE76ED6DD7E8ALL))) >> 16) ^ (((((v513 >> 3) & 0x3A5F23A100 ^ 0x3849210100) + 0x1116D1C24B0A2DC6 - ((2 * ((v513 >> 3) & 0x3A5F23A100 ^ 0x3849210100)) & 0x496044200)) ^ v513) >> 8) ^ (((((v516 >> 3) & 0xB0393A5F000000 ^ 0x80182018000000) - ((v516 >> 2) & 0x2002008C000000) - 0x3AA53AFE39206028) ^ v516) >> 24) ^ (((((v518 >> 3) & 0x1DB0393A00000000 ^ 0x120213800000000) + 0x9173DCF287607AFLL - ((2 * ((v518 >> 3) & 0x1DB0393A00000000 ^ 0x120213800000000)) & 0x1220721400000000)) ^ v518) >> 32);
  v519 = (v486 ^ 0x5629A524)
       - ((2 * (v486 ^ 0x5629A524)) & 0x1175C22C0)
       - 0x4E352CAE7451EEA0;
  v520 = (v498 ^ 0x8857B2B8)
       - ((2 * (v498 ^ 0x8857B2B8)) & 0xB591C240)
       + 0x5AA0B6975AC8E120;
  v521 = (v511 ^ 0x62EDB0F9)
       - ((2 * (v511 ^ 0x62EDB0F9)) & 0x1A53368BELL)
       + 0x6E77E4F4D299B45FLL;
  v522 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v498 ^ 0x8857B2B8)
                                                              - ((2 * (v498 ^ 0x8857B2B8)) & 0xB591C240)
                                                              + 1523114272) >> 16) ^ 0xC8)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v523 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + (((unsigned __int16)((v483 ^ 0x1DD3)
                                                                               - ((2 * (v483 ^ 0x1DD3)) & 0xE3FC)
                                                                               - 3586) >> 8) ^ 0xF1)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v523 ^ 0x4F;
  *(_QWORD *)&v348 = v523 ^ 0x767FE1B5B696B600;
  v524 = (v348 >> 8) - 0x7D486E2B68BE5176 - ((2 * (v348 >> 8)) & 0x56F23A92E835D14);
  v525 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v519 >> 24) ^ 0xB1CAD3518BLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v525 ^ 0x4F;
  *(_QWORD *)&v348 = v525 ^ 0x767FE1B5B696B600;
  v526 = (v348 >> 8) + 0x2FE40375BC3D2E8 - ((2 * (v348 >> 8)) & 0x5FC806EB787A5D0);
  v527 = (((((v524 >> 3) & 0xB0393A5F000000 ^ 0x10303A12000000)
          - 0x7D486E2B68BE5176
          - ((2 * ((v524 >> 3) & 0xB0393A5F000000 ^ 0x10303A12000000)) & 0x16022202E000000)) ^ v524) >> 24) ^ ((((((v522 - 0x5958A17E79DB9297 - ((2 * v522) & 0x14EBD030C48DAD2uLL)) >> 3) & 0x393A5F230000 ^ 0x291010000000) - 0x5958A17E79DB9297 - ((2 * (((v522 - 0x5958A17E79DB9297 - ((2 * v522) & 0x14EBD030C48DAD2uLL)) >> 3) & 0x393A5F230000 ^ 0x291010000000)) & 0x30000C400000)) ^ (v522 - 0x5958A17E79DB9297 - ((2 * v522) & 0x14EBD030C48DAD2))) >> 16) ^ (((((v526 >> 3) & 0x1DB0393A00000000 ^ 0x10080200000000) + 0x2FE40375BC3D2E8 - ((2 * ((v526 >> 3) & 0x1DB0393A00000000 ^ 0x10080200000000)) & 0x160006400000000)) ^ v526) >> 32);
  v528 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v521 >> 24) ^ 0x6E77E4F4D2)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v771 = v527 ^ ((((((v528 - ((2 * v528) & 0x1EAD72FB0D10CF8uLL) + 0x1CF56B97D868867CLL) >> 3) & 0x3A5F23A100 ^ 0x325B010000)
                 - ((2
                   * (((v528 - ((2 * v528) & 0x1EAD72FB0D10CF8uLL) + 0x1CF56B97D868867CLL) >> 3) & 0x3A5F23A100 ^ 0x325B010000)) & 0x24B0410000)
                 + 0x1CF56C97D868867CLL) ^ (v528 - ((2 * v528) & 0x1EAD72FB0D10CF8) + 0x1CF56B97D868867CLL)) >> 8);
  v529 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + ((((v483 ^ 0x9A91DD3)
                                                             - ((2 * (v483 ^ 0x9A91DD3)) & 0xAF4DE3FC)
                                                             - 676924930) >> 16) ^ 0xA6)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v529 ^ 0x4F;
  *(_QWORD *)&v348 = v529 ^ 0x767FE1B5B696B600;
  v530 = (v348 >> 8) + 0x6E4233113B0790F9 - ((2 * (v348 >> 8)) & 0xDC846622760F21F2);
  v531 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v486 ^ 0x24)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v531 ^ 0x4F;
  *(_QWORD *)&v348 = v531 ^ 0x767FE1B5B696B600;
  v532 = (v348 >> 8) - 0x24874E4A3C3BE254 - ((2 * (v348 >> 8)) & 0xB6F1636B87883B58);
  LODWORD(v530) = (((((v532 >> 3) & 0x1DB0393A00000000 ^ 0x1920103200000000)
                   - 0x24874E4A3C3BE254
                   - ((2 * ((v532 >> 3) & 0x1DB0393A00000000 ^ 0x1920103200000000)) & 0x3260626000000000)) ^ v532) >> 32) ^ (((((v530 >> 3) & 0xB0393A5F000000 ^ 0x80002207000000) + 0x6E4233113B0790F9 - ((2 * ((v530 >> 3) & 0xB0393A5F000000 ^ 0x80002207000000)) & 0x622036000000)) ^ v530) >> 24);
  v533 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v511 ^ 0xF9)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v530) = v530 ^ ((((((v533 - ((2 * v533) & 0x1D530E711A59756uLL) - 0x5915678C772D3455) >> 3) & 0x3A5F23A100 ^ 0xA51020100)
                          - ((2
                            * (((v533 - ((2 * v533) & 0x1D530E711A59756uLL) - 0x5915678C772D3455) >> 3) & 0x3A5F23A100 ^ 0xA51020100)) & 0x6410050200)
                          - 0x5915668C772D3455) ^ (v533 - ((2 * v533) & 0x1D530E711A59756) - 0x5915678C772D3455)) >> 8);
  v534 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v520 >> 24) ^ 0x5AA0B6975ALL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v535 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v519) ^ 0x11)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v534) = v530 ^ ((((((v534 - ((2 * v534) & 0xFB11453CAEEA8CuLL) - 0x7E82775D61A88ABALL) >> 3) & 0x393A5F230000 ^ 0x311053020000)
                          - ((2
                            * (((v534 - ((2 * v534) & 0xFB11453CAEEA8CuLL) - 0x7E82775D61A88ABALL) >> 3) & 0x393A5F230000 ^ 0x311053020000)) & 0x10443C060000)
                          - 0x7E81775D61A88ABALL) ^ (v534 - ((2 * v534) & 0xFB11453CAEEA8CLL) - 0x7E82775D61A88ABALL)) >> 16);
  v536 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + (((unsigned __int16)((v511 ^ 0xB0F9)
                                                                               - ((2 * (v511 ^ 0xB0F9)) & 0x68BE)
                                                                               - 19361) >> 8) ^ 0xB4)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v536 ^ 0x4F;
  *(_QWORD *)&v348 = v536 ^ 0x767FE1B5B696B600;
  v537 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x38332A5965AC048) - 0x7E3E66AD34D29FDCLL;
  v538 = ((v537 >> 2) & 0x3B407270BC4741A0 ^ 0x20406250B0434000)
       + ((v537 >> 3) & 0x1DB0393A5F23A1D0 ^ 0x6FDECA56A75E5EFALL);
  v539 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v498 ^ 0xB8)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v539 ^ 0x4F;
  *(_QWORD *)&v348 = v539 ^ 0x767FE1B5B696B600;
  v540 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0xDF750059AE1C9E58);
  v541 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v483 ^ 0x9A91DD3)
                                             - ((2 * (v483 ^ 0x9A91DD3)) & 0x1AF4DE3FCuLL)
                                             + 0xD158EE3D7A6F1FELL) >> 24) ^ 0xD158EE3D7)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v537) = (((0x90457FD328F1B0D3 - v540) & 0x800000000 ^ (v540 + 0x6FBA802CD70E4F2CLL) & 0xFFFFFFF700000000 ^ ((unint64_t)(v540 + 0x6FBA802CD70E4F2CLL) >> 3) & 0x1DB0393A00000000 ^ 0xD9B4D35A00000000) >> 32) ^ ((((((v535 + 0x7CCA883B8B3B3BFBLL - ((2 * v535) & 0x1951077167677F6uLL)) >> 3) & 0x393A5F230000 ^ 0x110251230000) + 0x7CCA883B8B3B3BFBLL - ((2 * (((v535 + 0x7CCA883B8B3B3BFBLL - ((2 * v535) & 0x1951077167677F6uLL)) >> 3) & 0x393A5F230000 ^ 0x110251230000)) & 0x107416460000)) ^ (v535 + 0x7CCA883B8B3B3BFBLL - ((2 * v535) & 0x1951077167677F6))) >> 16) ^ (((v537 ^ 0x58754A08D5A7E341) + v538 - 2 * ((v538 + 0x11048301800106) & (v537 ^ 0x58754A08D5A7E340)) - 0x7FEEFB7CFE7FFEFALL) >> 24);
  v542 = *(unsigned __int8 *)(v67 + (BYTE2(v521) ^ 0x99));
  LODWORD(v521) = v537 ^ ((((((v541 - ((2 * v541) & 0x13A3E6640D1A7D6uLL) - 0x2862E0CCDF972C15) >> 3) & 0x3A5F23A100 ^ 0x2244010000)
                          - ((2
                            * (((v541 - ((2 * v541) & 0x13A3E6640D1A7D6uLL) - 0x2862E0CCDF972C15) >> 3) & 0x3A5F23A100 ^ 0x2244010000)) & 0x6400410200)
                          - 0x2862DFCCDF972C15) ^ (v541 - ((2 * v541) & 0x13A3E6640D1A7D6) - 0x2862E0CCDF972C15)) >> 8);
  v543 = *(_QWORD *)(v85 + 8 * (v542 ^ 0x22));
  *((_QWORD *)&v348 + 1) = v543 ^ 0x4F;
  *(_QWORD *)&v348 = v543 ^ 0x767FE1B5B696B600;
  v544 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x2AA2A7B27DEF2CA4) - 0x6AAEAC26C10869AELL;
  v545 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v520) ^ 0xE1)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v545 ^ 0x4F;
  *(_QWORD *)&v348 = v545 ^ 0x767FE1B5B696B600;
  v546 = (v348 >> 8) - 0x300A7D3E2C8F4621 - ((2 * (v348 >> 8)) & 0x9FEB0583A6E173BELL);
  v547 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v483 ^ 0xD3)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v547) = ((((((v547 - ((2 * v547) & 0x174D079AC9B6DBEuLL) + 0x50BA683CD64DB6DFLL) >> 3) & 0x3A5F23A100 ^ 0x21A01A000)
                   - ((2
                     * (((v547 - ((2 * v547) & 0x174D079AC9B6DBEuLL) + 0x50BA683CD64DB6DFLL) >> 3) & 0x3A5F23A100 ^ 0x21A01A000)) & 0x70AC034000)
                   + 0x3CD64DB6DFLL) ^ (v547 - ((2 * v547) & 0x174D079AC9B6DBELL) + 0x50BA683CD64DB6DFLL)) >> 8) ^ 0x5A1E8A83;
  LODWORD(v544) = (((((v546 >> 3) & 0x1DB0393A00000000 ^ 0x19B0301800000000)
                   - 0x300A7D3E2C8F4621
                   - ((2 * ((v546 >> 3) & 0x1DB0393A00000000 ^ 0x19B0301800000000)) & 0x1B60000000000000)) ^ v546) >> 32) ^ 0x6D678944 ^ (((((v544 >> 3) & 0xB0393A5F000000 ^ 0xA0283A07000000) - ((2 * ((v544 >> 3) & 0xB0393A5F000000 ^ 0xA0283A07000000)) & 0x2022303C000000) + 0x5153D93EF79652) ^ v544) >> 24);
  LODWORD(v546) = v547 + v544 - 2 * (v547 & v544);
  v548 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE2(v519) ^ 0xAELL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v549 = v548 - ((2 * v548) & 0x133EEA750D4AF00) - 0x756608AC5795A880;
  v550 = (v534 ^ 0x4734F713)
       + 0x18509DFB811C19FFLL
       + (~(2 * (v534 ^ 0x4734F713)) | 0xFFFFFFFEFDC7CC03);
  LODWORD(v520) = v546 ^ (((((v549 >> 3) & 0x393A5F230000 ^ 0x382A55010000)
                          - ((2 * ((v549 >> 3) & 0x393A5F230000 ^ 0x382A55010000)) & 0x622410440000)
                          + 0xF753A86A5780) ^ v549) >> 16);
  v551 = (v521 ^ 0x60042BCDLL)
       - ((2 * (v521 ^ 0x60042BCD)) & 0x6FEDA408)
       + 0x4242F6037F6D204;
  v552 = (v520 ^ 0x694F2E2E)
       - ((2 * (v520 ^ 0x694F2E2E)) & 0x116D58AF4)
       + 0x2EC7C188B6AC57ALL;
  v553 = (v552 >> 24) ^ 0x2EC7C188BLL;
  v554 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + (((unsigned __int16)((v771 ^ 0xA326)
                                                                                - ((2 * (v771 ^ 0xA326)) & 0xD0D2)
                                                                                + 26729) >> 8) ^ 0x68)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v555 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v550 >> 24) ^ 0x18509DFB81)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v556 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + ((v551 >> 24) ^ 0x4242F6037)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v556 ^ 0x4F;
  *(_QWORD *)&v348 = v556 ^ 0x767FE1B5B696B600;
  v557 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0xC8820BB4E85FA98) - 0x79BBEFA258BD02B4;
  LODWORD(v554) = ((((((v555 + 0x29214C6F9B6A2D10 - ((2 * v555) & 0x4298DF36D45A20uLL)) >> 3) & 0x393A5F230000 ^ 0x290853210000)
                   + 0x29214C6F9B6A2D10
                   - ((2
                     * (((v555 + 0x29214C6F9B6A2D10 - ((2 * v555) & 0x4298DF36D45A20uLL)) >> 3) & 0x393A5F230000 ^ 0x290853210000)) & 0x105436440000)) ^ (v555 + 0x29214C6F9B6A2D10 - ((2 * v555) & 0x4298DF36D45A20))) >> 16) ^ ((((((v554 + 0x60373080F9E37966 - ((2 * v554) & 0x6E6101F3C6F2CCuLL)) >> 3) & 0x3A5F23A100 ^ 0x101F202100) + 0x60373080F9E37966 - ((2 * (((v554 + 0x60373080F9E37966 - ((2 * v554) & 0x6E6101F3C6F2CCuLL)) >> 3) & 0x5F23A100 ^ 0x1F202100)) & 0xB2464200)) ^ (v554 + 0x60373080F9E37966 - ((2 * v554) & 0x6E6101F3C6F2CCLL))) >> 8) ^ (((((v557 >> 3) & 0xB0393A5F000000 ^ 0x80000A14000000) - ((2 * ((v557 >> 3) & 0xB0393A5F000000 ^ 0x80000A14000000)) & 0x20300E000000) - 0x78BBEFA258BD02B4) ^ v557) >> 24);
  v558 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v552) ^ 0xC5)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v558 ^ 0x4F;
  *(_QWORD *)&v348 = v558 ^ 0x767FE1B5B696B600;
  v559 = (v348 >> 8) + 0x5CCBD314FF6D407ALL - ((2 * (v348 >> 8)) & 0xB997A629FEDA80F4);
  v560 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v534 ^ 0x13)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v559) = v554 ^ (((((v559 >> 3) & 0x1DB0393A00000000 ^ 0x990382200000000)
                          + 0x5CCBD314FF6D407ALL
                          - ((2 * ((v559 >> 3) & 0x1DB0393A00000000 ^ 0x990382200000000)) & 0x3900222000000000)) ^ v559) >> 32);
  v561 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v521 ^ 0xCDLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v561 ^ 0x4F;
  *(_QWORD *)&v348 = v561 ^ 0x767FE1B5B696B600;
  v562 = (v348 >> 8) - 0x1FF36A54DFE2511 - ((2 * (v348 >> 8)) & 0xFC0192B56403B5DELL);
  v563 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE2(v552) ^ 0x6ALL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v563 ^ 0x4F;
  *(_QWORD *)&v348 = v563 ^ 0x767FE1B5B696B600;
  v564 = (v348 >> 8) + 0x3A1669B14A1AFCA3 - ((2 * (v348 >> 8)) & 0x742CD3629435F946);
  v565 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(v67
                                          + ((((v771 ^ 0xD228A326)
                                                              - ((2 * (v771 ^ 0xD228A326)) & 0x3C14D0D2)
                                                              - 1643485079) >> 16) ^ 0xALL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v565) = ((((((v560 - 0x4230B3720435C00BLL - ((2 * v560) & 0x19E991BF7947FEAuLL)) >> 3) & 0x393A5F230000 ^ 0x29101F210000)
                   - 0x4230B3720435C00BLL
                   - ((2
                     * (((v560 - 0x4230B3720435C00BLL - ((2 * v560) & 0x19E991BF7947FEAuLL)) >> 3) & 0x393A5F230000 ^ 0x29101F210000)) & 0x1010B6040000)) ^ (v560 - 0x4230B3720435C00BLL - ((2 * v560) & 0x19E991BF7947FEALL))) >> 16) ^ ((((v565 - ((2 * v565) & 0x14854903AD2A0AEuLL) - 0x5BD5B7E296AFA9) >> 3) & 0x3A5F23A100 ^ (v565 - ((2 * v565) & 0x14854903AD2A0AELL) - 0x5BD5B7E296AFA9) & 0xFFFFFFFF00) >> 8) ^ (((((v562 >> 3) & 0xB0393A5F000000 ^ 0x80192A56000000) - 0x1FF36A54DFE2511 - ((2 * ((v562 >> 3) & 0xB0393A5F000000 ^ 0x80192A56000000)) & 0x123424000000)) ^ v562) >> 24) ^ (((((v564 >> 3) & 0x1DB0393A00000000 ^ 0x500093200000000) + 0x3A1669B14A1AFCA3 - ((2 * ((v564 >> 3) & 0x1DB0393A00000000 ^ 0x500093200000000)) & 0x3020526000000000)) ^ v564) >> 32);
  v566 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v551) ^ 0xD2)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v567 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + v553) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v567 ^ 0x4F;
  *(_QWORD *)&v348 = v567 ^ 0x767FE1B5B696B600;
  v568 = (v348 >> 8) - 0x2F0676CB0513C7ECLL - ((2 * (v348 >> 8)) & 0xA1F31269F5D87028);
  v569 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(v67
                                         + ((((v771 ^ 0xD228A326)
                                            - ((2 * (v771 ^ 0xD228A326)) & 0x13C14D0D2uLL)
                                            + 0x5F827E4E9E0A6869) >> 24) ^ 0x5F827E4E9ELL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v569 ^ 0x4F;
  *(_QWORD *)&v348 = v569 ^ 0x767FE1B5B696B600;
  v570 = (v348 >> 8) + 0x7BA0279B037716A2 - ((2 * (v348 >> 8)) & 0xF7404F3606EE2D44);
  LODWORD(v566) = (((((v568 >> 3) & 0xB0393A5F000000 ^ 0x1031221F000000)
                   - 0x2F0676CB0513C7ECLL
                   - ((2 * ((v568 >> 3) & 0xB0393A5F000000 ^ 0x1031221F000000)) & 0x1601260B4000000)) ^ v568) >> 24) ^ ((((((v566 + 0x69195A98A0017142 - ((2 * v566) & 0x32B5314002E284uLL)) >> 3) & 0x393A5F230000 ^ 0x291214000000) + 0x69195A98A0017142 - ((2 * (((v566 + 0x69195A98A0017142 - ((2 * v566) & 0x32B5314002E284uLL)) >> 3) & 0x393A5F230000 ^ 0x291214000000)) & 0x303000020000)) ^ (v566 + 0x69195A98A0017142 - ((2 * v566) & 0x32B5314002E284))) >> 16) ^ (((((v570 >> 3) & 0x1DB0393A00000000 ^ 0xD30003200000000) + 0x7BA0279B037716A2 - ((2 * ((v570 >> 3) & 0x1DB0393A00000000 ^ 0xD30003200000000)) & 0x3340423400000000)) ^ v570) >> 32);
  v571 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE1(v550) ^ 0x19)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v572 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v520 ^ 0x2ELL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v572 ^ 0x4F;
  *(_QWORD *)&v348 = v572 ^ 0x767FE1B5B696B600;
  v573 = (v348 >> 8) + 0x2BA68A4CF671E20CLL - ((2 * (v348 >> 8)) & 0x574D1499ECE3C418);
  LODWORD(v568) = v566 ^ ((((((v571 - ((2 * v571) & 0xBA00577E7117D4uLL) - 0x4A2FFD440C77416) >> 3) & 0x3A5F23A100 ^ 0x57230100)
                          - ((2
                            * (((v571 - ((2 * v571) & 0xBA00577E7117D4uLL) - 0x4A2FFD440C77416) >> 3) & 0x3A5F23A100 ^ 0x57230100)) & 0x543E410200)
                          - 0x4A2FED440C77416) ^ (v571 - ((2 * v571) & 0xBA00577E7117D4) - 0x4A2FFD440C77416)) >> 8);
  v574 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (v771 ^ 0x26)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v575 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE2(v550) ^ 0x1CLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v576 = ((((((v574 + 0x22C03261C495CFD9 - ((2 * v574) & 0x18064C3892B9FB2uLL)) >> 3) & 0x3A5F23A100 ^ 0x81802A100)
          + 0x22C03261C495CFD9
          - ((2
            * (((v574 + 0x22C03261C495CFD9 - ((2 * v574) & 0x18064C3892B9FB2uLL)) >> 3) & 0x3A5F23A100 ^ 0x81802A100)) & 0x4088030200)) ^ (v574 + 0x22C03261C495CFD9 - ((2 * v574) & 0x18064C3892B9FB2))) >> 8) ^ (((((v573 >> 3) & 0x1DB0393A00000000 ^ 0x530110800000000) + 0x2BA68A4CF671E20CLL - ((2 * ((v573 >> 3) & 0x1DB0393A00000000 ^ 0x530110800000000)) & 0x1340101000000000)) ^ v573) >> 32) ^ ((((((v575 - ((2 * v575) & 0xEEA1F38E26AAD4uLL) + 0x2D7750F9C713556ALL) >> 3) & 0x393A5F230000 ^ 0x281A18220000) - ((2 * (((v575 - ((2 * v575) & 0xEEA1F38E26AAD4uLL) + 0x2D7750F9C713556ALL) >> 3) & 0x393A5F230000 ^ 0x281A18220000)) & 0x20708E060000) + 0x2D7850F9C713556ALL) ^ (v575 - ((2 * v575) & 0xEEA1F38E26AAD4) + 0x2D7750F9C713556ALL)) >> 16);
  v577 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(v67 + (BYTE2(v551) ^ 0xF6)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v577 ^ 0x4F;
  *(_QWORD *)&v348 = v577 ^ 0x767FE1B5B696B600;
  v578 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0xF90F7E83980A620CLL) + 0x7C87BF41CC053106;
  v579 = v576 ^ (((((v578 >> 3) & 0xB0393A5F000000 ^ 0x90312819000000)
                 - ((2 * ((v578 >> 3) & 0xB0393A5F000000 ^ 0x90312819000000)) & 0x100720098000000)
                 + 0x7D87BF41CC053106) ^ v578) >> 24);
  v580 = (v568 ^ 0x8EB21319)
       - ((2 * (v568 ^ 0x8EB21319)) & 0xC4622500)
       + 0x17AA952362311280;
  v581 = (v559 ^ 0x4F1B8480)
       - ((2 * (v559 ^ 0x4F1B8480)) & 0x172DC1D5ELL)
       + 0x3A340E73B96E0EAFLL;
  v582 = (v579 ^ 0xF54B7B80)
       - 2 * ((v579 ^ 0xF54B7B80) & 0x2B757D3F ^ v579 & 0x1A)
       - 0x667A46AD48A82DBLL;
  v583 = (v582 >> 24) ^ 0xF9985B952BLL;
  v584 = (v565 ^ 0xB2A298A4)
       - ((2 * (v565 ^ 0xB2A298A4)) & 0x118D353BCLL)
       + 0x55960E318C69A9DELL;
  v585 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + ((((v559 ^ 0x4F1B8480)
                                                             - ((2 * (v559 ^ 0x4F1B8480)) & 0x72DC1D5E)
                                                             - 1183969617) >> 16) ^ 0x6ELL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v585 ^ 0x4F;
  *(_QWORD *)&v348 = v585 ^ 0x767FE1B5B696B600;
  v586 = (v348 >> 8) - 0x649A92D57A045C64 - ((2 * (v348 >> 8)) & 0x36CADA550BF74738);
  v587 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v565 ^ 0xA4)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v587 ^ 0x4F;
  *(_QWORD *)&v348 = v587 ^ 0x767FE1B5B696B600;
  v588 = (v348 >> 8) - 0x1704E8869C4841EFLL - ((2 * (v348 >> 8)) & 0xD1F62EF2C76F7C22);
  LODWORD(v586) = (((((v588 >> 3) & 0x1DB0393A00000000 ^ 0x1D10202A00000000)
                   - 0x1704E8869C4841EFLL
                   - ((2 * ((v588 >> 3) & 0x1DB0393A00000000 ^ 0x1D10202A00000000)) & 0x1160227000000000)) ^ v588) >> 32) ^ (((((v586 >> 3) & 0xB0393A5F000000 ^ 0x20292050000000) - 0x649A92D57A045C64 - ((2 * ((v586 >> 3) & 0xB0393A5F000000 ^ 0x20292050000000)) & 0x4052540A000000)) ^ v586) >> 24);
  v589 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v580 >> 24) ^ 0x17AA952362)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v590 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v579 ^ 0x80)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v591 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v584) ^ 0xA9)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v590) = v586 ^ ((((((v589 - ((2 * v589) & 0x148AD8F16798914uLL) - 0x795BA93874C33B76) >> 3) & 0x3A5F23A100 ^ 0x1851238000)
                          - ((2
                            * (((v589 - ((2 * v589) & 0x148AD8F16798914uLL) - 0x795BA93874C33B76) >> 3) & 0x3A5F23A100 ^ 0x1851238000)) & 0x416410000)
                          - 0x795BA83874C33B76) ^ (v589 - ((2 * v589) & 0x148AD8F16798914) - 0x795BA93874C33B76)) >> 8) ^ ((((((v590 - ((2 * v590) & 0x17D1BFC63E0C882uLL) + 0x2FBE8DFE31F06441) >> 3) & 0x393A5F230000 ^ 0x113A46220000) - ((2 * (((v590 - ((2 * v590) & 0x17D1BFC63E0C882uLL) + 0x2FBE8DFE31F06441) >> 3) & 0x393A5F230000 ^ 0x113A46220000)) & 0x127422400000) + 0x2FBF8DFE31F06441) ^ (v590 - ((2 * v590) & 0x17D1BFC63E0C882) + 0x2FBE8DFE31F06441)) >> 16);
  v592 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v568 ^ 0x19)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v586) = ((((((v592 - 0x726A82BAB87196ABLL - ((2 * v592) & 0x12AFA8A8F1CD2AAuLL)) >> 3) & 0x393A5F230000 ^ 0x292808210000)
                   - 0x726A82BAB87196ABLL
                   - ((2
                     * (((v592 - 0x726A82BAB87196ABLL - ((2 * v592) & 0x12AFA8A8F1CD2AAuLL)) >> 3) & 0x393A5F230000 ^ 0x292808210000)) & 0x72008E040000)) ^ (v592 - 0x726A82BAB87196ABLL - ((2 * v592) & 0x12AFA8A8F1CD2AALL))) >> 16) ^ ((((((v591 + 0x320BB8C32CB95DF8 - ((2 * v591) & 0x1771865972BBF0uLL)) >> 3) & 0x3A5F23A100 ^ 0x1845032100) + 0x320BB8C32CB95DF8 - ((2 * (((v591 + 0x320BB8C32CB95DF8 - ((2 * v591) & 0x1771865972BBF0uLL)) >> 3) & 0x3A5F23A100 ^ 0x1845032100)) & 0x418420200)) ^ (v591 + 0x320BB8C32CB95DF8 - ((2 * v591) & 0x1771865972BBF0))) >> 8);
  v593 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v582) ^ 0x7DLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v593 ^ 0x4F;
  *(_QWORD *)&v348 = v593 ^ 0x767FE1B5B696B600;
  v594 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x5C570EC15EE64E8CLL) - 0x51D4789F508CD8BALL;
  v595 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v581 >> 24) ^ 0x3A340E73B9)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v595 ^ 0x4F;
  *(_QWORD *)&v348 = v595 ^ 0x767FE1B5B696B600;
  v596 = (v348 >> 8) + 0x7FF24F85925982C9 - ((2 * (v348 >> 8)) & 0xFFE49F0B24B30592);
  v597 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v580) ^ 0x12)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v597 ^ 0x4F;
  *(_QWORD *)&v348 = v597 ^ 0x767FE1B5B696B600;
  v598 = v586 ^ (((((v594 >> 3) & 0xB0393A5F000000 ^ 0x80302815000000)
                 - ((2 * ((v594 >> 3) & 0xB0393A5F000000 ^ 0x80302815000000)) & 0x4002401E000000)
                 - 0x50D4789F508CD8BALL) ^ v594) >> 24) ^ (((((v596 >> 3) & 0x1DB0393A00000000 ^ 0xDB0093000000000)
                                                           + 0x7FF24F85925982C9
                                                           - ((2
                                                             * ((v596 >> 3) & 0x1DB0393A00000000 ^ 0xDB0093000000000)) & 0x3B60120000000000)) ^ v596) >> 32);
  v599 = (v348 >> 8) + 0x2BD14262161C5FA0 - ((2 * (v348 >> 8)) & 0x57A284C42C38BF40);
  v600 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE2(v582) ^ 0x75)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v600 ^ 0x4F;
  *(_QWORD *)&v348 = v600 ^ 0x767FE1B5B696B600;
  v601 = (v348 >> 8) - 0x2CDCC597A80CA3B5 - ((2 * (v348 >> 8)) & 0xA64674D0AFE6B896);
  v602 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v559 ^ 0x80)) ^ 0x22)) >> 8) ^ 0x20767FE1B5B696B6;
  v603 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE2(v584) ^ 0x69)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v602) = (((((v601 >> 3) & 0x1DB0393A00000000 ^ 0x1820210800000000)
                   - 0x2CDCC597A80CA3B5
                   - ((2 * ((v601 >> 3) & 0x1DB0393A00000000 ^ 0x1820210800000000)) & 0x2240705000000000)) ^ v601) >> 32) ^ (((((v599 >> 3) & 0xB0393A5F000000 ^ 0x30280842000000) + 0x2BD14262161C5FA0 - ((2 * ((v599 >> 3) & 0xB0393A5F000000 ^ 0x30280842000000)) & 0x12000442C000000)) ^ v599) >> 24) ^ ((((((v602 - ((2 * v602) & 0x41A6F8B16732DCBAuLL) + 0x63D37C58B3996E5DLL) >> 3) & 0x3A5F23A100 ^ 0xA16232100) - ((2 * (((v602 - ((2 * v602) & 0x41A6F8B16732DCBAuLL) + 0x63D37C58B3996E5DLL) >> 3) & 0x3A5F23A100 ^ 0xA16232100)) & 0x3026024000) + 0x63D37D58B3996E5DLL) ^ (v602 - ((2 * v602) & 0x41A6F8B16732DCBALL) + 0x63D37C58B3996E5DLL)) >> 8) ^ ((((((v603 - ((2 * v603) & 0xEB3E2F9CE21902uLL) + 0x7D759F17CE710C81) >> 3) & 0x393A5F230000 ^ 0x312259020000) - ((2 * (((v603 - ((2 * v603) & 0xEB3E2F9CE21902uLL) + 0x7D759F17CE710C81) >> 3) & 0x393A5F230000 ^ 0x312259020000)) & 0x32249C420000) + 0x7D769F17CE710C81) ^ (v603 - ((2 * v603) & 0xEB3E2F9CE21902) + 0x7D759F17CE710C81)) >> 16);
  LODWORD(v599) = *(unsigned __int8 *)(a46 + v583) + 591305212 - ((2 * *(unsigned __int8 *)(a46 + v583)) & 0x1F8);
  v604 = (*(_QWORD *)(v85
                    + 8
                    * (((((v599 ^ 0xDCC166F1) + (v599 ^ 0x233E99FC) + 1) ^ 0xFFFFFFFC)
                      + (v599 ^ 0x233E99FC)) ^ 0xD0)) >> 8) ^ 0x767FE1B5B696B6;
  v605 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v581) ^ 0xELL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v605 ^ 0x4F;
  *(_QWORD *)&v348 = v605 ^ 0x767FE1B5B696B600;
  v606 = (v348 >> 8) + 0x332523EADC9AF71ALL - ((2 * (v348 >> 8)) & 0x664A47D5B935EE34);
  v607 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v584 >> 24) ^ 0x55960E318CLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v607 ^ 0x4F;
  *(_QWORD *)&v348 = v607 ^ 0x767FE1B5B696B600;
  LODWORD(v604) = (((((v606 >> 3) & 0xB0393A5F000000 ^ 0x2020385B000000)
                   + 0x332523EADC9AF71ALL
                   - ((2 * ((v606 >> 3) & 0xB0393A5F000000 ^ 0x2020385B000000)) & 0x404254B8000000)) ^ v606) >> 24) ^ ((((((v604 - 0x38B53002457D679CLL - ((2 * v604) & 0x959FFB750530C8uLL)) >> 3) & 0x393A5F230000 ^ 0x193A17000000) - 0x38B53002457D679CLL - ((2 * (((v604 - 0x38B53002457D679CLL - ((2 * v604) & 0x959FFB750530C8uLL)) >> 3) & 0x393A5F230000 ^ 0x193A17000000)) & 0x127034040000)) ^ (v604 - 0x38B53002457D679CLL - ((2 * v604) & 0x959FFB750530C8))) >> 16);
  v608 = (v348 >> 8) + 0x131876DF08125310 - ((2 * (v348 >> 8)) & 0x2630EDBE1024A620);
  v609 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE2(v580) ^ 0x31)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  LODWORD(v583) = v604 ^ (((((v608 >> 3) & 0x1DB0393A00000000 ^ 0x20081A00000000)
                          + 0x131876DF08125310
                          - ((2 * ((v608 >> 3) & 0x1DB0393A00000000 ^ 0x20081A00000000)) & 0x2220603400000000)) ^ v608) >> 32) ^ ((((((v609 - ((2 * v609) & 0x7F615C1FADA43CuLL) + 0xF3FB0AE0FD6D21ELL) >> 3) & 0x3A5F23A100 ^ 0x1041228000) - ((2 * (((v609 - ((2 * v609) & 0x7F615C1FADA43CuLL) + 0xF3FB0AE0FD6D21ELL) >> 3) & 0x3A5F23A100 ^ 0x1041228000)) & 0x541E050000) + 0xF3FB1AE0FD6D21ELL) ^ (v609 - ((2 * v609) & 0x7F615C1FADA43CLL) + 0xF3FB0AE0FD6D21ELL)) >> 8);
  v610 = (v602 ^ 0xEF1B70AFLL)
       - ((2 * (v602 ^ 0xEF1B70AF)) & 0x7576D4BE)
       - 0x50216758C54495A1;
  v611 = (v583 ^ 0xECDA44E3)
       - ((2 * (v583 ^ 0xECDA44E3)) & 0x1717C9184)
       - 0x23E914CB4741B73ELL;
  v612 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v590 ^ 0x99)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v612 ^ 0x4F;
  *(_QWORD *)&v348 = v612 ^ 0x767FE1B5B696B600;
  v613 = (v348 >> 8) - 0x44EBC9F560C756BDLL - ((2 * (v348 >> 8)) & 0x76286C153E715286);
  v614 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + (((unsigned __int16)((v598 ^ 0x95AF)
                                                                                - ((2 * (v598 ^ 0x95AF)) & 0xA37C)
                                                                                - 11842) >> 8) ^ 0xD1)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v615 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + ((((v602 ^ 0xEF1B70AF)
                                                              - ((2 * (v602 ^ 0xEF1B70AF)) & 0x7576D4BE)
                                                              + 985360991) >> 16) ^ 0xBBLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v616 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + ((((v583 ^ 0xECDA44E3)
                                                             - ((2 * (v583 ^ 0xECDA44E3)) & 0x717C9184)
                                                             - 1195489086) >> 16) ^ 0xBELL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v616 ^ 0x4F;
  *(_QWORD *)&v348 = v616 ^ 0x767FE1B5B696B600;
  v617 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x8D5A8B658A39DB08) - 0x3952BA4D3AE3127CLL;
  v618 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + ((((v598 ^ 0x209D95AF)
                                                             - ((2 * (v598 ^ 0x209D95AF)) & 0xEC1FA37C)
                                                             - 166735426) >> 16) ^ 0xFLL)) ^ 0x22));
  v767 = ((((((v614 - 0x68AF9B1CE6CB0024 - ((2 * v614) & 0xA0C9C63269FFB8uLL)) >> 3) & 0x3A5F23A100 ^ 0x1843228100)
          - 0x68AF9B1CE6CB0024
          - ((2
            * (((v614 - 0x68AF9B1CE6CB0024 - ((2 * v614) & 0xA0C9C63269FFB8uLL)) >> 3) & 0x3A5F23A100 ^ 0x1843228100)) & 0x4432414200)) ^ (v614 - 0x68AF9B1CE6CB0024 - ((2 * v614) & 0xA0C9C63269FFB8))) >> 8) ^ (((((v613 >> 3) & 0x1DB0393A00000000 ^ 0x1520000000000000) - 0x44EBC9F560C756BDLL - ((2 * ((v613 >> 3) & 0x1DB0393A00000000 ^ 0x1520000000000000)) & 0x3220601400000000)) ^ v613) >> 32) ^ ((((((v615 - ((2 * v615) & 0xCF4CD0F41AEEB0uLL) + 0x3467A6687A0D7758) >> 3) & 0x393A5F230000 ^ 0x30080F010000) - ((2 * (((v615 - ((2 * v615) & 0xCF4CD0F41AEEB0uLL) + 0x3467A6687A0D7758) >> 3) & 0x393A5F230000 ^ 0x30080F010000)) & 0x4050B4020000) + 0x3468A6687A0D7758) ^ (v615 - ((2 * v615) & 0xCF4CD0F41AEEB0) + 0x3467A6687A0D7758)) >> 16) ^ (((((v617 >> 3) & 0xB0393A5F000000 ^ 0x90283258000000) - ((2 * ((v617 >> 3) & 0xB0393A5F000000 ^ 0x90283258000000)) & 0x14002648A000000) - 0x3852BA4D3AE3127CLL) ^ v617) >> 24);
  *((_QWORD *)&v348 + 1) = v618 ^ 0x4F;
  *(_QWORD *)&v348 = v618 ^ 0x767FE1B5B696B600;
  v619 = (v348 >> 8) + 0x3472173A7766F5A4 - ((2 * (v348 >> 8)) & 0x68E42E74EECDEB48);
  v620 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v610 >> 24) ^ 0xAFDE98A73ALL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v621 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + ((v611 >> 24) ^ 0xDC16EB34B8)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v622 = ((((((v620 + 0x383A7BC571EE9FA4 - ((2 * v620) & 0x74F78AE3DD3F48uLL)) >> 3) & 0x3A5F23A100 ^ 0x380E218100)
          + 0x383A7BC571EE9FA4
          - ((2 * (((v620 + 0x383A7BC571EE9FA4 - ((2 * v620) & 0x74F78AE3DD3F48uLL)) >> 3) & 0x5F23A100 ^ 0xE218100)) & 0xA2450200)) ^ (v620 + 0x383A7BC571EE9FA4 - ((2 * v620) & 0x74F78AE3DD3F48))) >> 8) ^ (((((v619 >> 3) & 0x1DB0393A00000000 ^ 0x480002200000000) + 0x3472173A7766F5A4 - ((2 * ((v619 >> 3) & 0x1DB0393A00000000 ^ 0x480002200000000)) & 0x2860227400000000)) ^ v619) >> 32);
  v623 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + (((unsigned __int16)((v590 ^ 0x5C99)
                                                                               - ((2 * (v590 ^ 0x5C99)) & 0xD694)
                                                                               + 27466) >> 8) ^ 0x6BLL)) ^ 0x22));
  v624 = v622 ^ ((((((v621 - ((2 * v621) & 0x8D84FFCE2A3D7CuLL) + 0x5E46C27FE7151EBELL) >> 3) & 0x393A5F230000 ^ 0x180A5C220000)
                 - ((2
                   * (((v621 - ((2 * v621) & 0x8D84FFCE2A3D7CuLL) + 0x5E46C27FE7151EBELL) >> 3) & 0x393A5F230000 ^ 0x180A5C220000)) & 0x748E020000)
                 + 0x5E47C27FE7151EBELL) ^ (v621 - ((2 * v621) & 0x8D84FFCE2A3D7CLL) + 0x5E46C27FE7151EBELL)) >> 16);
  *((_QWORD *)&v348 + 1) = v623 ^ 0x4F;
  *(_QWORD *)&v348 = v623 ^ 0x767FE1B5B696B600;
  v625 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x4BD2ECE3E1F99C98) - 0x5A16898E0F0331B4;
  v770 = v624 ^ (((((v625 >> 3) & 0xB0393A5F000000 ^ 0xB0280A1E000000)
                 - ((2 * ((v625 >> 3) & 0xB0393A5F000000 ^ 0xB0280A1E000000)) & 0x1406060A0000000)
                 - 0x5916898E0F0331B4) ^ v625) >> 24);
  v626 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v602 ^ 0xAFLL)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v626 ^ 0x4F;
  *(_QWORD *)&v348 = v626 ^ 0x767FE1B5B696B600;
  v627 = (v348 >> 8) + 0x4421B4B73E7CE1C6 - ((2 * (v348 >> 8)) & 0x8843696E7CF9C38CLL);
  v628 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v583 ^ 0xE3)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v629 = (*(_QWORD *)(v85
                    + 8
                    * (*(unsigned __int8 *)(a46
                                          + ((((v590 ^ 0xD20C5C99)
                                                              - ((2 * (v590 ^ 0xD20C5C99)) & 0xA614D694)
                                                              - 754291894) >> 16) ^ 0xALL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v630 = ((((((v628 - 0x11818615AD331D7CLL - ((2 * v628) & 0xFCF3D4A599C508uLL)) >> 3) & 0x3A5F23A100 ^ 0x384A018000)
          - 0x11818615AD331D7CLL
          - ((2
            * (((v628 - 0x11818615AD331D7CLL - ((2 * v628) & 0xFCF3D4A599C508uLL)) >> 3) & 0x3A5F23A100 ^ 0x384A018000)) & 0x54A4014000)) ^ (v628 - 0x11818615AD331D7CLL - ((2 * v628) & 0xFCF3D4A599C508))) >> 8) ^ (((((v627 >> 3) & 0x1DB0393A00000000 ^ 0x880301200000000) + 0x4421B4B73E7CE1C6 - ((2 * ((v627 >> 3) & 0x1DB0393A00000000 ^ 0x880301200000000)) & 0x840606400000000)) ^ v627) >> 32) ^ ((((((v629 - ((2 * v629) & 0x4AB120987DC2FCuLL) - 0x12DAA76FB3C11E82) >> 3) & 0x393A5F230000 ^ 0x291209030000) - ((2 * (((v629 - ((2 * v629) & 0x4AB120987DC2FCuLL) - 0x12DAA76FB3C11E82) >> 3) & 0x393A5F230000 ^ 0x291209030000)) & 0x302098440000) - 0x12D9A76FB3C11E82) ^ (v629 - ((2 * v629) & 0x4AB120987DC2FCLL) - 0x12DAA76FB3C11E82)) >> 16);
  v631 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + ((((v598 ^ 0x209D95AFLL)
                                            - ((2 * (v598 ^ 0x209D95AFLL)) & 0x1EC1FA37CuLL)
                                            - 0x6C63C10F09F02E42) >> 24) ^ 0x939C3EF0F6)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v631 ^ 0x4F;
  *(_QWORD *)&v348 = v631 ^ 0x767FE1B5B696B600;
  v632 = (v348 >> 8) - ((2 * (v348 >> 8)) & 0x6E9A5CCA9EB7743ELL) - 0x48B2D19AB0A445E1;
  v772 = v630 ^ (((((v632 >> 3) & 0xB0393A5F000000 ^ 0xA0210809000000)
                 - ((2 * ((v632 >> 3) & 0xB0393A5F000000 ^ 0xA0210809000000)) & 0x50409E000000)
                 - 0x47B2D19AB0A445E1) ^ v632) >> 24);
  v633 = *(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v611) ^ 0x48)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v633 ^ 0x4F;
  *(_QWORD *)&v348 = v633 ^ 0x767FE1B5B696B600;
  v634 = (v348 >> 8) - 0x4577EF8EBCEA6B4FLL - ((2 * (v348 >> 8)) & 0x751020E2862B2962);
  v635 = *(_QWORD *)(v85
                   + 8
                   * (*(unsigned __int8 *)(a46
                                         + ((((v590 ^ 0xD20C5C99)
                                            - ((2 * (v590 ^ 0xD20C5C99)) & 0x1A614D694uLL)
                                            - 0x22F3E01C2CF594B6) >> 24) ^ 0xDD0C1FE3D3)) ^ 0x22));
  *((_QWORD *)&v348 + 1) = v635 ^ 0x4F;
  *(_QWORD *)&v348 = v635 ^ 0x767FE1B5B696B600;
  v636 = (v348 >> 8) + 0x2B1C343E47BC3ABBLL - ((2 * (v348 >> 8)) & 0x5638687C8F787576);
  v637 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (v598 ^ 0xAFLL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v638 = v637 - ((2 * v637) & 0x1D679CB7DACC922) - 0x1414C31A41299B6FLL;
  v639 = (*(_QWORD *)(v85 + 8 * (*(unsigned __int8 *)(a46 + (BYTE1(v610) ^ 0x6ALL)) ^ 0x22)) >> 8) ^ 0x767FE1B5B696B6;
  v640 = (((((v636 >> 3) & 0x1DB0393A00000000 ^ 0x520000200000000)
          + 0x2B1C343E47BC3ABBLL
          - ((2 * ((v636 >> 3) & 0x1DB0393A00000000 ^ 0x520000200000000)) & 0x1220607400000000)) ^ v636) >> 32) ^ (((((v634 >> 3) & 0xB0393A5F000000 ^ 0x10000A08000000) - 0x4577EF8EBCEA6B4FLL - ((v634 >> 2) & 0x100206086000000)) ^ v634) >> 24) ^ (((((v638 >> 3) & 0x3A5F23A100 ^ 0x1817028000) - ((2 * ((v638 >> 3) & 0x3A5F23A100 ^ 0x1817028000)) & 0x403C044000) - 0x1414C21A41299B6FLL) ^ v638) >> 8);
  *(_QWORD *)&v348 = __ROR8__(a57- 0x7798F82510AEEDBBLL- ((2 * (a57 - 0x7798F82510AEEDBBLL)) & 0x8106D56C7F33BB16)- 0x3F7C9549C0662275, 8);
  v641 = (v348 & 0xF8FFFFFFFFFFFFFFLL ^ 0x88C0836AB63F99DDLL)
       - ((2 * (v348 & 0xF8FFFFFFFFFFFFFFLL ^ 0x88C0836AB63F99DDLL) + 0x626F38BA604E72CLL) & 0x1325F002D9D25644)
       + 0x3CA671C73FEB9EB8;
  *((_QWORD *)&v348 + 1) = ((v348 ^ 0xB63F99DD)
                          - ((2 * (v348 ^ 0xB63F99DD) - 1509628116) & 0xD9D25644)
                          + 1072406200) ^ 0xFFFFFFFB;
  *(_QWORD *)&v348 = v641 ^ 0xD5C24B9F0AA34700;
  v642 = v348 >> 8;
  *((_QWORD *)&v348 + 1) = v641 ^ 0xD5985B192B0DB4ALL;
  *(_QWORD *)&v348 = v641 ^ 0x4000000000000000;
  v643 = v348 >> 61;
  v644 = v642
       + (v641 ^ 0x4D5985B192B0DB4ALL)
       - 0x5C48D3B4C64C729DLL
       - ((2 * (v642 + (v641 ^ 0x4D5985B192B0DB4ALL))) & 0x476E589673671AC6);
  *((_QWORD *)&v348 + 1) = v644 ^ 0xB2;
  *(_QWORD *)&v348 = v644 ^ 0x70639C3E28875B00;
  v645 = v348 >> 8;
  v646 = v644 ^ (v643 - 0x5C48D3B4C64C729DLL - ((2 * v643) & 0x476E589673671AC6));
  *((_QWORD *)&v348 + 1) = v646 ^ 0x13D4B0751134D6D1;
  *(_QWORD *)&v348 = v646 ^ 0xC000000000000000;
  v647 = v348 >> 61;
  v648 = (v646 ^ 0xD3D4B0751134D6D1) + v645;
  *((_QWORD *)&v348 + 1) = v648 ^ 0xE;
  *(_QWORD *)&v348 = v648 ^ 0x6DA382091EFE8800;
  v649 = v648 ^ v647;
  v650 = (v649 ^ 0x6DA382091EFE880ELL) + (v348 >> 8);
  *((_QWORD *)&v348 + 1) = v649 ^ 0xDA382091EFE880ELL;
  *(_QWORD *)&v348 = v649 ^ 0x6000000000000000;
  v651 = v348 >> 61;
  v652 = v650 - 0x39538D94C7C629C2 - ((2 * v650) & 0x8D58E4D67073AC7CLL);
  *((_QWORD *)&v348 + 1) = v652 ^ 3;
  *(_QWORD *)&v348 = v652 ^ 0x4526EA290F587600;
  v653 = v348 >> 8;
  v654 = (v651 - 0x39538D94C7C629C2 - ((2 * v651) & 0x8D58E4D67073AC7CLL)) ^ v652;
  *((_QWORD *)&v348 + 1) = v654 ^ 0x38A98423761A03DLL;
  *(_QWORD *)&v348 = v654 ^ 0x8000000000000000;
  v655 = v348 >> 61;
  v656 = (v654 ^ 0x838A98423761A03DLL) + v653;
  *((_QWORD *)&v348 + 1) = v656 ^ 0xF2;
  *(_QWORD *)&v348 = v656 ^ 0xCE2DECDBF92F3700;
  v657 = v348 >> 8;
  v658 = v656 ^ v655;
  *((_QWORD *)&v348 + 1) = v658 ^ 0xE2DECDBF92F37F2;
  *(_QWORD *)&v348 = v658 ^ 0xC000000000000000;
  v659 = v348 >> 61;
  v766 = (v767 ^ 0xF8210F3FLL)
       - ((2 * (v767 ^ 0xF8210F3F)) & 0xEFE47C62)
       - 0x6F941084880DC1CFLL;
  v768 = v640 ^ ((((((v639 - ((2 * v639) & 0x68A8627F79434CuLL) - 0x30CBABCEC0435E5ALL) >> 3) & 0x393A5F230000 ^ 0x80207230000)
                 - ((2
                   * (((v639 - ((2 * v639) & 0x68A8627F79434CuLL) - 0x30CBABCEC0435E5ALL) >> 3) & 0x393A5F230000 ^ 0x80207230000)) & 0x20603E400000)
                 - 0x30CAABCEC0435E5ALL) ^ (v639 - ((2 * v639) & 0x68A8627F79434CLL) - 0x30CBABCEC0435E5ALL)) >> 16);
  v660 = v640 ^ ((((((v639 - ((2 * v639) & 0x68A8627F79434CuLL) - 0x30CBABCEC0435E5ALL) >> 3) & 0x393A5F230000 ^ 0x80207230000)
                                             - ((2
                                               * (((v639 - ((2 * v639) & 0x68A8627F79434CuLL) - 0x30CBABCEC0435E5ALL) >> 3) & 0x393A5F230000 ^ 0x80207230000)) & 0x20603E400000)
                                             - 0x30CAABCEC0435E5ALL) ^ (v639
                                                                      - ((2 * v639) & 0x68A8627F79434CLL)
                                                                      - 0x30CBABCEC0435E5ALL)) >> 16) ^ 0x9A92E040;
  v765 = v660 - 2 * (v660 & 0xB5C1075F ^ v768 & 1);
  v661 = v657 + (v658 ^ 0xCE2DECDBF92F37F2);
  *((_QWORD *)&v348 + 1) = v661 ^ 0xBA;
  *(_QWORD *)&v348 = v661 ^ 0x9C6F00D50A08E500;
  v662 = v661 ^ v659;
  v663 = (v662 ^ 0x9C6F00D50A08E5BALL)
       + (v348 >> 8)
       + 0x172229C91552D3D8
       - ((2 * ((v662 ^ 0x9C6F00D50A08E5BALL) + (v348 >> 8))) & 0x2E4453922AA5A7B0);
  *((_QWORD *)&v348 + 1) = v663 ^ 0x229C91552D3D8;
  *(_QWORD *)&v348 = v663 ^ 0x1720000000000000;
  v664 = v348 >> 50;
  *((_QWORD *)&v348 + 1) = v664 ^ 0x1296;
  *(_QWORD *)&v348 = v664 ^ 0x96B543B7E4C78000;
  v665 = v348 >> 14;
  *((_QWORD *)&v348 + 1) = v662 ^ 0x1C6F00D50A08E5BALL;
  *(_QWORD *)&v348 = v662 ^ 0x8000000000000000;
  v666 = v348 >> 61;
  *((_QWORD *)&v348 + 1) = v665 ^ 0xDB;
  *(_QWORD *)&v348 = v665 ^ 0x607E5D464A54E900;
  v667 = v348 >> 8;
  v668 = a57 - 0x7798F82510AEEDB3 - ((2 * (a57 - 0x7798F82510AEEDB3)) & 0x9887F2980BD2D16ELL) - 0x33BC06B3FA169749;
  v669 = ((v668 >> 8) ^ 0xCC43F94C05E968 | (v668 >> 3 << 59) ^ 0xB000000000000000) + 0x331379C5D3027396;
  v670 = v669 - ((2 * v669) & 0xB93E8EDF21880FF8) + 0x5C9F476F90C407FCLL;
  *((_QWORD *)&v348 + 1) = v670 ^ 0x25;
  *(_QWORD *)&v348 = v670 ^ 0x80CFF4F1F68E6B00;
  v671 = (v348 >> 8) + (v670 ^ 0x18543ADF6E9DF794);
  *((_QWORD *)&v348 + 1) = v670 ^ 0x18543ADF6E9DF794;
  *(_QWORD *)&v348 = v670;
  v672 = v348 >> 61;
  v673 = v671 - 0x590BDC50929247C8 - ((2 * v671) & 0x4DE8475EDADB7070);
  *((_QWORD *)&v348 + 1) = v673 ^ 0xE9;
  *(_QWORD *)&v348 = v673 ^ 0x752093DA7C596E00;
  v674 = v673 ^ (v672 - 0x590BDC50929247C8 - ((2 * v672) & 0x4DE8475EDADB7070));
  v675 = (v674 ^ 0xD3D4B0751134D6D1) + (v348 >> 8);
  *((_QWORD *)&v348 + 1) = v674 ^ 0x13D4B0751134D6D1;
  *(_QWORD *)&v348 = v674 ^ 0xC000000000000000;
  v676 = v348 >> 61;
  v677 = v675 - 0x2AAB42A64E937A07 - ((2 * v675) & 0xAAA97AB362D90BF2);
  *((_QWORD *)&v348 + 1) = v677 ^ 0xFFFFFFF7;
  *(_QWORD *)&v348 = v677 ^ 0xB8F73F50AF920D00;
  v678 = (v676 - 0x2AAB42A64E937A07 - ((2 * v676) & 0xAAA97AB362D90BF2)) ^ v677;
  v679 = (v348 >> 8) + (v678 ^ 0x6DA382091EFE880ELL);
  *((_QWORD *)&v348 + 1) = v678 ^ 0xDA382091EFE880ELL;
  *(_QWORD *)&v348 = v678 ^ 0x6000000000000000;
  v680 = v348 >> 61;
  v681 = v679 + 0x6C1D2750BA01466FLL - ((2 * v679) & 0xD83A4EA174028CDELL);
  *((_QWORD *)&v348 + 1) = v681 ^ 0x52;
  *(_QWORD *)&v348 = v681 ^ 0xEF97BF128D60E600;
  v682 = v348 >> 8;
  v683 = (v680 + 0x6C1D2750BA01466FLL - ((2 * v680) & 0xD83A4EA174028CDELL)) ^ v681;
  *((_QWORD *)&v348 + 1) = v683 ^ 0x38A98423761A03DLL;
  *(_QWORD *)&v348 = v683 ^ 0x8000000000000000;
  v684 = v348 >> 61;
  v685 = (v683 ^ 0x838A98423761A03DLL) + v682;
  *((_QWORD *)&v348 + 1) = v685 ^ 0xF2;
  *(_QWORD *)&v348 = v685 ^ 0xCE2DECDBF92F3700;
  v686 = v348 >> 8;
  v687 = v685 ^ v684;
  *((_QWORD *)&v348 + 1) = v687 ^ 0xE2DECDBF92F37F2;
  *(_QWORD *)&v348 = v687 ^ 0xC000000000000000;
  v688 = v348 >> 61;
  v689 = v686 + (v687 ^ 0xCE2DECDBF92F37F2);
  *((_QWORD *)&v348 + 1) = v689 ^ 0xBA;
  *(_QWORD *)&v348 = v689 ^ 0x9C6F00D50A08E500;
  v690 = v348 >> 8;
  v691 = v689 ^ v688;
  *((_QWORD *)&v348 + 1) = v691 ^ 0x1C6F00D50A08E5BALL;
  *(_QWORD *)&v348 = v691 ^ 0x8000000000000000;
  v692 = v348 >> 61;
  LOBYTE(v682) = 8 * ((a57 + 69) & 7);
  v693 = ((v667 + ((v666 + 0x172229C91552D3D8 - ((2 * v666) & 0x2E4453922AA5A7B0)) ^ 0x2A240793448B7AC5 ^ v663)) ^ 0x6ACD5F0E5BFB9133uLL) >> v682;
  v694 = (v691 ^ 0x9C6F00D50A08E5BALL) + v690;
  *((_QWORD *)&v348 + 1) = v694 ^ 0xC5;
  *(_QWORD *)&v348 = v694 ^ 0x2A240793448B7A00;
  v695 = (v694 ^ 0xC5702AE513D1E418 ^ (v692 - ((2 * v692) & 0xDEA85AECAEB53DBALL) - 0x10ABD289A8A56123))
       + (v348 >> 8);
  v696 = (v695 ^ 0x6ACD5F0E5BFB9133uLL) >> v682;
  v697 = v693 + 0x7EDC598D0C4776B4 - ((2 * v693) & 0xFDB8B31A188EED68);
  LOBYTE(v628) = v682 ^ 0x3B;
  v698 = (v697 ^ 0x7EDC598D0C4776B4) + 32 * ((v695 ^ 0x2CD5F0E5BFB9133) << (v682 ^ 0x3Bu));
  *(_QWORD *)&v348 = __ROR8__(a57- 0x7798F82510AEEDABLL- ((2 * (a57 - 0x7798F82510AEEDABLL)) & 0x3B3E3417105A9F84)+ 0x1D9F1A0B882D4FC2, 8);
  v699 = (v348 & 0xF8FFFFFFFFFFFFFFLL ^ 0xC01D9F1A0B882D4FLL)
       - ((2 * (v348 & 0xF8FFFFFFFFFFFFFFLL ^ 0xC01D9F1A0B882D4FLL) + 0x626F38BA604E72CLL) & 0xB6E8551DEFA3338)
       - 0x473543913D8072CELL;
  *((_QWORD *)&v348 + 1) = ((v348 ^ 0xB882D4F)
                          - ((2 * (v348 ^ 0xB882D4F) - 1509628116) & 0xDEFA3338)
                          - 1031828174) ^ 0x45;
  *(_QWORD *)&v348 = v699 ^ 0x59E7F13689377500;
  v700 = (v348 >> 8) + (v699 ^ 0xC17C3F181124E9F4);
  *((_QWORD *)&v348 + 1) = v699 ^ 0x17C3F181124E9F4;
  *(_QWORD *)&v348 = v699 ^ 0xC000000000000000;
  v701 = v348 >> 61;
  v702 = v700 - 0x3D5C2C923CD02AF5 - ((2 * v700) & 0x8547A6DB865FAA16);
  *((_QWORD *)&v348 + 1) = v702 ^ 0xDA;
  *(_QWORD *)&v348 = v702 ^ 0x11776318D21B0300;
  v703 = v702 ^ (v701 - 0x3D5C2C923CD02AF5 - ((2 * v701) & 0x8547A6DB865FAA16));
  v704 = (v348 >> 8) + (v703 ^ 0xD3D4B0751134D6D1);
  *((_QWORD *)&v348 + 1) = v703 ^ 0x13D4B0751134D6D1;
  *(_QWORD *)&v348 = v703 ^ 0xC000000000000000;
  v705 = v704 + 0x5897297BBCD9D5FLL - ((2 * v704) & 0xB12E52F779B3ABELL);
  v706 = (v705 >> 8) ^ 0x682AF09EA53315;
  v707 = (v705 << 56) ^ 0x5100000000000000;
  v708 = ((v348 >> 61) + 0x5897297BBCD9D5FLL - ((2 * (v348 >> 61)) & 0xB12E52F779B3ABELL)) ^ v705;
  *((_QWORD *)&v348 + 1) = v708 ^ 0xDA382091EFE880ELL;
  *(_QWORD *)&v348 = v708 ^ 0x6000000000000000;
  v709 = v348 >> 61;
  v710 = (v708 ^ 0x6DA382091EFE880ELL) + v707 + v706;
  *((_QWORD *)&v348 + 1) = v710 ^ 0x3D;
  *(_QWORD *)&v348 = v710 ^ 0x838A98423761A000;
  v711 = v348 >> 8;
  v712 = v710 ^ v709;
  *((_QWORD *)&v348 + 1) = v712 ^ 0x38A98423761A03DLL;
  *(_QWORD *)&v348 = v712 ^ 0x8000000000000000;
  v713 = v348 >> 61;
  v714 = (v712 ^ 0x534642E109598284 ^ (v711 - ((2 * v711) & 0xA199B5467C704572) - 0x2F33255CC1C7DD47))
       + 2
       * (((v711 - ((2 * v711) & 0xA199B5467C704572) - 0x2F33255CC1C7DD47) ^ 0x50CCDAA33E3822B9) & (v712 ^ 0x38A98423761A03DLL));
  *((_QWORD *)&v348 + 1) = v714 ^ 0xF2;
  *(_QWORD *)&v348 = v714 ^ 0xCE2DECDBF92F3700;
  v715 = v698 - 2 * (v698 & 0x58DCAD80CFCC03BBLL ^ (v697 ^ 0x7EDC598D0C4776B4) & 0x22);
  v716 = v714 ^ v713;
  v717 = (v716 ^ 0xCE2DECDBF92F37F2) + (v348 >> 8);
  *((_QWORD *)&v348 + 1) = v716 ^ 0xE2DECDBF92F37F2;
  *(_QWORD *)&v348 = v716 ^ 0xC000000000000000;
  v718 = v348 >> 61;
  v719 = v717 - 0x5F2F5E2B906A4D19 - ((2 * v717) & 0x41A143A8DF2B65CELL);
  *((_QWORD *)&v348 + 1) = v719 ^ 0x5D;
  *(_QWORD *)&v348 = v719 ^ 0x3CBFA101659D5700;
  v720 = v348 >> 8;
  v721 = (v718 - 0x5F2F5E2B906A4D19 - ((2 * v718) & 0x41A143A8DF2B65CELL)) ^ v719;
  *((_QWORD *)&v348 + 1) = v721 ^ 0x1C6F00D50A08E5BALL;
  *(_QWORD *)&v348 = v721 ^ 0x8000000000000000;
  v722 = v348 >> 61;
  v723 = v720 + (v721 ^ 0x9C6F00D50A08E5BALL);
  *((_QWORD *)&v348 + 1) = v723 ^ 5;
  *(_QWORD *)&v348 = v723 ^ 0x2A240793448B7A00;
  v724 = v696 - 0x4C8708124D5E487ELL - ((2 * v696) & 0x66F1EFDB65436F04);
  v725 = ((v723 ^ 0x50B890688D1E91DLL ^ (v722 - ((2 * v722) & 0xBE5F1D2B98B527B0) + 0x5F2F8E95CC5A93D8))
        + (v348 >> 8)) ^ 0x2CD5F0E5BFB9133;
  v726 = (v724 ^ 0xB378F7EDB2A1B782)
       + 32 * (v725 << v628)
       - 2
       * (((v724 ^ 0xB378F7EDB2A1B782) + 32 * (v725 << v628)) & 0x17027BE006700FFELL ^ (v724 ^ 0xB378F7EDB2A1B782) & 0x12);
  v727 = v765 + 0x5367F20BB5C1075ELL;
  LOBYTE(v725) = *(_BYTE *)(a46 + (((unsigned __int16)(v765 + 1886) >> 8) ^ 7));
  LOBYTE(v720) = (v725 ^ 0xFD) - 2 * ((v725 ^ 0xFD) & 7 ^ v725 & 2);
  v728 = (v772 ^ 0x82F40E6ELL)
       - ((2 * (v772 ^ 0x82F40E6E)) & 0x27C7A83E)
       - 0x5EEB95CCEC1C2BE1;
  LODWORD(v725) = *(unsigned __int8 *)(a46 + (((v765 - 1245640866) >> 16) ^ 0xC1));
  LODWORD(v713) = (v725 ^ 0xFFFFFF91) - 2 * ((v725 ^ 0xFFFFFF91) & 7 ^ v725 & 2);
  LODWORD(v725) = *(unsigned __int8 *)(a46 + (BYTE2(v728) ^ 0xE3));
  LODWORD(v477) = (v767 ^ 0xF8210F3F) - ((2 * (v767 ^ 0xF8210F3F)) & 0xEFE47C62) + 2012364337;
  v762 = (v715 - 0x2723527F3033FC67) >> 40;
  LODWORD(v725) = *(unsigned __int8 *)(a56
                                     + ((a44 ^ ((unsigned __int16)((v715 - 0x2723527F3033FC67) >> 32) >> 8)) ^ 0x27)) ^ ((v725 ^ 0x70) - ((2 * v725) & 0xA) - 123);
  LODWORD(v765) = v725 + (v725 >> 6 << 7);
  LODWORD(v725) = *(unsigned __int8 *)(a46
                                     + (((unsigned __int16)((v767 ^ 0xF3F)
                                                                           - ((2 * (v767 ^ 0xF3F)) & 0x7C62)
                                                                           + 15921) >> 8) ^ 0x3ELL));
  LODWORD(v722) = (v725 ^ 0x4C) - 2 * ((v725 ^ 0x4C) & 7 ^ v725 & 2);
  LODWORD(v725) = *(unsigned __int8 *)(a46 + (v770 ^ 0xC8));
  v729 = v726 - 0x68FD841FF98FF014;
  v759 = (v726 - 0x68FD841FF98FF014) >> 24;
  LODWORD(v725) = *(unsigned __int8 *)(a56 + ((a44 ^ ((v726 + 108007404) >> 24)) ^ 0xA0)) ^ ((v725 ^ 0x58) + (~(2 * v725) | 0xFFFFFFF5) - 122);
  HIDWORD(a39) = v725 - (v725 >> 5 << 6);
  v730 = (v770 ^ 0x3A3D60C8)
       + 0x5A18864668898E87
       + (~(2 * (v770 ^ 0x3A3D60C8)) | 0xFFFFFFFF2EECE2F3);
  LODWORD(v725) = *(unsigned __int8 *)(a46 + (BYTE2(v730) ^ 0x89));
  v761 = (v715 - 0x2723527F3033FC67) >> 8;
  LODWORD(v725) = *(unsigned __int8 *)(a56 + ((a44 ^ v761) ^ 0x97)) ^ ((v725 ^ 0xFFFFFFC8)
                                                                                        + (~(2 * v725) | 0xFFFFFFF5)
                                                                                        - 122);
  LODWORD(a37) = v725 + (~(2 * v725) | 0x43);
  v760 = (v715 - 0x2723527F3033FC67) >> 24;
  LOBYTE(v623) = a44 ^ ((v715 - 808713319) >> 24);
  LOBYTE(v725) = *(_BYTE *)(a56 + (v623 ^ 0xB3)) ^ (v720 - 123);
  LOBYTE(v770) = v725 - ((2 * v725) & 0xB2);
  v764 = v697;
  LOBYTE(v617) = a44 ^ v697;
  LOBYTE(v725) = *(_BYTE *)(a56 + ((a44 ^ v697) ^ 0xD0)) ^ ((*(_BYTE *)(a46
                                                                                         + ((v766 >> 24) ^ 0x906BEF7B77)) ^ 0x3D)
                                                                             - 2
                                                                             * ((*(_BYTE *)(a46
                                                                                          + ((v766 >> 24) ^ 0x906BEF7B77)) ^ 0x3D) & 7 ^ *(_BYTE *)(a46 + ((v766 >> 24) ^ 0x906BEF7B77)) & 2)
                                                                             - 123);
  v731 = v725 - ((2 * v725) & 0x7C);
  LODWORD(v725) = *(unsigned __int8 *)(a46 + ((v730 >> 24) ^ 0x5A18864668));
  v757 = (v715 - 0x2723527F3033FC67) >> 32;
  LODWORD(v725) = *(unsigned __int8 *)(a56 + ((a44 ^ v757) ^ 0x24)) ^ ((v725 ^ 0x6A)
                                                                                        - ((2 * v725) & 0xA)
                                                                                        - 123);
  LODWORD(a38) = v725 - ((2 * v725) & 0xFFFFFFD8);
  v758 = (v715 - 0x2723527F3033FC67) >> 16;
  v732 = a44 ^ ((v715 - 808713319) >> 16);
  LOBYTE(v725) = *(_BYTE *)(a56 + (v732 ^ 0x4BLL)) ^ ((*(_BYTE *)(a46 + (BYTE1(v728) ^ 0xD4)) ^ 0xAD)
                                                    - 2
                                                    * ((*(_BYTE *)(a46 + (BYTE1(v728) ^ 0xD4)) ^ 0xAD) & 7 ^ *(_BYTE *)(a46 + (BYTE1(v728) ^ 0xD4)) & 2)
                                                    - 123);
  v755 = (v715 - 0x2723527F3033FC67) >> 48;
  LODWORD(v723) = *(unsigned __int8 *)(a56 + ((a44 ^ v755) ^ 0xD8)) ^ (v713 - 123);
  LODWORD(a36) = v723 - ((2 * v723) & 0x10);
  LODWORD(v723) = *(unsigned __int8 *)(a46 + (v767 ^ 0x3FLL));
  v756 = (v715 - 0x2723527F3033FC67) >> 56;
  LODWORD(v723) = *(unsigned __int8 *)(a56 + ((a44 ^ v756) ^ 0x9FLL)) ^ ((v723 ^ 0x20)
                                                                                        - ((2 * v723) & 0xA)
                                                                                        - 123);
  LODWORD(a35) = v723 - ((2 * v723) & 0xFFFFFFB4);
  LOBYTE(v698) = *(_BYTE *)(a46 + ((v727 >> 24) ^ 0x5367F20BB5)) ^ 0x76;
  v754 = (v726 - 0x68FD841FF98FF014) >> 8;
  LOBYTE(v713) = a44 ^ ((unsigned __int16)(v726 + 4076) >> 8);
  LOBYTE(v698) = *(_BYTE *)(a56 + (v713 ^ 0x9FLL)) ^ (v698 + (~(2 * v698) | 0xF5) - 122);
  LODWORD(v709) = *(unsigned __int8 *)(a46 + ((v728 >> 24) ^ 0xA1146A3313));
  v733 = v698 - 2 * (v698 & 0x3F);
  v763 = v724;
  LODWORD(v698) = *(unsigned __int8 *)(a56 + ((a44 ^ v724) ^ 0x8FLL)) ^ (v709
                                                                                        + (~(2 * v709) | 0xFFFFFFF5)
                                                                                        + 6);
  LODWORD(a34) = v698 - ((2 * v698) & 0xFFFFFFAE);
  v753 = (v726 - 0x68FD841FF98FF014) >> 16;
  LOBYTE(v698) = a44 ^ ((v726 + 108007404) >> 16);
  LODWORD(v722) = *(unsigned __int8 *)(a56 + (v698 ^ 0xC3)) ^ (v722 - 123);
  LODWORD(v767) = v722 - 2 * (v722 & 7);
  LOBYTE(v726) = *(_BYTE *)(a46 + (v768 ^ 0x40)) ^ 0x5F;
  v769 = HIDWORD(v729);
  LOBYTE(v715) = a44 ^ BYTE4(v729);
  LOBYTE(v726) = *(_BYTE *)(a56 + ((a44 ^ BYTE4(v729)) ^ 0x4ALL)) ^ (v726 - ((2 * v726) & 0xA) - 123);
  v734 = v726 - ((2 * v726) & 0xB6);
  LOBYTE(v726) = *(_BYTE *)(a46 + (BYTE1(v730) ^ 0x8ELL)) ^ 0xD6;
  LOBYTE(v730) = a44 ^ BYTE6(v729);
  LOBYTE(v726) = *(_BYTE *)(a56 + ((a44 ^ BYTE6(v729)) ^ 0x20)) ^ (v726 + (~(2 * v726) | 0xF5) - 122);
  v735 = v729 >> 40;
  LOBYTE(v477) = a44 ^ BYTE5(v729);
  LOBYTE(v722) = *(_BYTE *)(a56 + ((a44 ^ BYTE5(v729)) ^ 0x69)) ^ ((*(_BYTE *)(a46
                                                                                                + (BYTE2(v477) ^ 0xF2)) ^ 0xD0)
                                                                                    - ((2
                                                                                      * *(_BYTE *)(a46
                                                                                                 + (BYTE2(v477) ^ 0xF2))) & 0xA)
                                                                                    - 123);
  LOBYTE(v598) = *(_BYTE *)(a46 + (v772 ^ 0x6ELL)) ^ 0x9D;
  v729 >>= 56;
  LOBYTE(v598) = *(_BYTE *)(a56 + ((a44 ^ v729) ^ 0x23)) ^ (v598 - ((2 * v598) & 0xA) - 123);
  LOBYTE(v709) = a44 ^ v724 ^ 0x21 ^ (a34 - 41);
  LOBYTE(v722) = v477 ^ 0x1B ^ (v722 - ((2 * v722) & 0x16) + 11);
  LOBYTE(v726) = v730 ^ 0xD ^ (v726 + (~(2 * v726) | 0x57) + 85);
  v736 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[a8 ^ 0x26Cu] - 4;
  v737 = *(_BYTE *)(v736 + ((a44 ^ v761) ^ 0xB0u ^ (a37 + 95)));
  v738 = *(_BYTE *)(v736 + (v732 ^ 0x79u ^ (v725 - ((2 * v725) & 0x96) + 75)));
  v739 = *(unsigned __int8 *)(v736 + (v623 ^ 0x13u ^ (v770 - 39)));
  LOBYTE(v723) = *(_BYTE *)(v736 + ((a44 ^ v762) ^ 0x9Eu ^ (v765 - 64)));
  v740 = *(unsigned __int8 *)(v736 + ((a44 ^ v755) ^ 0xA9u ^ (a36 + 8)));
  v741 = *(_BYTE *)(v736 + ((a44 ^ v757) ^ 0x31u ^ (a38 + 108)));
  v742 = *(unsigned __int8 *)(v736 + ((a44 ^ v756 ^ (a35 - 38)) ^ 0x3Cu));
  v743 = *(_BYTE *)(v736 + (v713 ^ 0x59u ^ (v733 - 65)));
  LOBYTE(v709) = *(_BYTE *)(v736 + v709);
  v744 = *(_BYTE *)(v736 + ((a44 ^ v759) ^ 0xB9u ^ (BYTE4(a39) + 96)));
  v745 = *(unsigned __int8 *)(v736 + (v715 ^ 0x68u ^ (v734 + 91)));
  v746 = *(_BYTE *)(v736 + (v698 ^ 0x3Du ^ (v767 - 121)));
  v747 = *(_BYTE *)(v736 + v722);
  v748 = *(unsigned __int8 *)(v736 + v726);
  v749 = *(_BYTE *)(v736 + ((a44 ^ v729 ^ (v598 + (~(2 * v598) | 0xCD) - 102)) ^ 0xC3u));
  *(_BYTE *)(a57 - 0x7798F82510AEEDBBLL) = *(_BYTE *)(v736
                                                    + (v617 ^ 0x17u ^ (v731 - 66))) ^ 0x6B;
  v750 = (v723 & 0x9C ^ 0x6B) & (~(_BYTE)v723 | 0x9C);
  *(_BYTE *)(a57 - 0x7798F82510AEEDB3) = v709 ^ 0x6B;
  if (a45 < a11 != (a32 + 769509418) < HIDWORD(a10))
    v751 = a45 < a11;
  else
    v751 = (int)a32 + 769509418 < a45;
  *(_BYTE *)(a57 - 0x7798F82510AEEDACLL) = v749 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB8) = v739 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB9) = v738 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDBALL) = v737 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB7) = v741 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB5) = v740 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB6) = v750;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB2) = v743 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB4) = v742 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDAFLL) = v745 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB1) = v746 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDB0) = v744 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDADLL) = v748 ^ 0x6B;
  *(_BYTE *)(a57 - 0x7798F82510AEEDAELL) = v747 ^ 0x6B;
  LODWORD(a33) = a8 + 892;
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)(a58 + 8 * (a8 ^ (1131 * v751))) - 4))(v748, a8 ^ (1131 * v751), v745 ^ 0x6Bu, v742 ^ 0x6Bu, a32, v739 ^ 0x6Bu, v735, v740 ^ 0x6Bu, a9, a10, a11, a12, a13, a14, a15, a16, v753, v754, v755,
           v756,
           v757,
           v758,
           v759,
           v760,
           v761,
           a26,
           a27,
           v762,
           v763,
           a30,
           v764,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a44 ^ v759,
           v765,
           a44 ^ v762,
           v766,
           a44,
           a45,
           a46,
           a57 - 0x7798F82510AEEDBBLL,
           v767,
           v769,
           a57 - 0x7798F82510AEEDB3);
}

void sub_193089B54()
{
  JUMPOUT(0x19307E354);
}

uint64_t sub_193089C88@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;

  v52 = *(unsigned __int8 *)(a1 - 0x661968C5C774195DLL);
  v87 = *(unsigned __int8 *)(a1 - 0x661968C5C774195ALL);
  v53 = a2[9];
  v90 = a2[2] ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741964);
  v54 = *a2 ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741966);
  v85 = a2[3] ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741963);
  v55 = a2[4] ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741962);
  v56 = a2[6] ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741960);
  v84 = a2 + 0x78A1E7A9BC1C8B7FLL;
  v57 = a2[5] ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741961);
  v58 = a2[7] ^ *(unsigned __int8 *)(a1 - 0x661968C5C774195FLL);
  v88 = v53 ^ v52;
  v91 = (v53 ^ v52);
  v59 = a2[10] ^ *(unsigned __int8 *)(a1 - 0x661968C5C774195CLL);
  v60 = a2[13] ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741959);
  v61 = a2[8] ^ *(unsigned __int8 *)(a1 - 0x661968C5C774195ELL);
  v62 = a2[14] ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741958);
  v63 = a2[11] ^ *(unsigned __int8 *)(a1 - 0x661968C5C774195BLL);
  v64 = *(unsigned __int8 *)(a1 - 0x661968C5C7741957) ^ a2[15];
  v65 = a2[12] ^ v87;
  v66 = ((v57 ^ v56) - (((v57 ^ v56) << (((v51 - 33) & 0xBB) - 26)) & 0xFFFFFF88) - 60) ^ (v51 + 2459) ^ v54 ^ 0xFFFFFFDF;
  v86 = *(v84 - 0x78A1E7A9BC1C8B7ELL) ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741965);
  v67 = v86 ^ 0x43 ^ (v66 - ((2 * v66) & 0xFFFFFF87) + 67);
  v68 = v85 ^ 0xFFFFFFCE ^ (v67 + (~(2 * v67) | 0x63) - 49);
  v69 = v55 ^ 0x62 ^ (v68 - ((2 * v68) & 0xFFFFFFC4) + 98);
  v70 = (v69 + (~(2 * v69) | 0x77) - 59) ^ v58 ^ 0xFFFFFFC4;
  v71 = (v70 - ((2 * v70) & 0xFFFFFFE7) - 13) ^ v61 ^ 0xFFFFFFF3;
  v72 = (v71 - ((2 * v71) & 0x2A) + 21) ^ v91 ^ 0x15;
  v73 = (v72 - ((2 * v72) & 0xFFFFFF83) - 63) ^ v59;
  v74 = ((v73 ^ 0xFFFFFFC1) + (~(2 * v73) | 0xFFFFFF9F) + 49) ^ v63 ^ 0x30;
  v75 = (v74 - ((2 * v74) & 0xFFFFFFC7) - 29) ^ v65 ^ 0xFFFFFFE3;
  v76 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v51 - 3163] - 4;
  v77 = *(v84 - 0x78A1E7A9BC1C8B7BLL) ^ *(unsigned __int8 *)(a1 - 0x661968C5C7741962);
  v78 = ((v85 ^ 0xFFFFFFB2) + 38) ^ ((v77 ^ 0xFFFFFFB5) + 38) ^ ((v59 ^ 0xFFFFFFB3) + 38) ^ ((v61 ^ 0xFFFFFFB1) + 38) ^ ((v88 ^ 0xFFFFFFB0) + 38) ^ ((v63 ^ 0xFFFFFFB2) + 38) ^ v60 ^ v62 ^ v64 ^ ((v62 ^ 0xFFFFFFB7) + 38) ^ ((v64 ^ 0xFFFFFFB6) + 38) ^ *(_QWORD *)(v76 + 8 * (v54 ^ 0x42u)) ^ ((v54 ^ 0xB1) - ((2 * (v54 ^ 0xB1) + 76) & 0x98) + 242);
  v79 = *(_QWORD *)(v76 + 8 * (v91 ^ 0x143)) ^ *(_QWORD *)(v76 + 8 * (v59 ^ 0x140)) ^ *(_QWORD *)(v76 + 8 * (v63 ^ 0x141)) ^ *(_QWORD *)(v76 + 8 * ((*(v84 - 0x78A1E7A9BC1C8B73) ^ v87) ^ 0x46u)) ^ ((v65 ^ 0xB5) - ((2 * (v65 ^ 0xB5) + 76) & 0x98) + 242) ^ *(_QWORD *)(v76 + 8 * (v62 ^ 0x144)) ^ *(_QWORD *)(v76 + 8 * (v60 ^ 0x47u)) ^ ((v60 ^ 0xB4) - ((2 * (v60 ^ 0xB4) + 76) & 0x98) + 242);
  v80 = v78 ^ *(_QWORD *)(v76 + 8 * (v85 ^ 0x141)) ^ *(_QWORD *)(v76
                                                                                  + 8 * (v90 ^ 0x40u)) ^ ((v90 ^ 0xB3) - ((2 * (v90 ^ 0xB3) + 76) & 0x98) + 242) ^ *(_QWORD *)(v76 + 8 * ((v86 ^ 0xB0) - 2 * ((v86 ^ 0xB0) & 0xF3u) + 243)) ^ ((v86 ^ 0xB0) - ((2 * (v86 ^ 0xB0) + 76) & 0x98) + 242) ^ *(_QWORD *)(v76 + 8 * (v77 ^ 0x146)) ^ *(_QWORD *)(v76 + 8 * (v57 ^ 0x47u)) ^ ((v57 ^ 0xB4) - ((2 * (v57 ^ 0xB4) + 76) & 0x98) + 242) ^ *(_QWORD *)(v76 + 8 * (v56 ^ 0x44u)) ^ ((v56 ^ 0xB7) - ((2 * (v56 ^ 0xB7) + 76) & 0x98) + 242) ^ *(_QWORD *)(v76 + 8 * (v61 ^ 0x142)) ^ *(_QWORD *)(v76 + 8 * (v58 ^ 0x45u)) ^ ((v58 ^ 0xB6) - ((2 * (v58 ^ 0xB6) + 76) & 0x98) + 242) ^ v79 ^ *(_QWORD *)(v76 + 8 * (v64 ^ 0x145)) ^ (v75 - ((2 * v75) & 0x16) + 11);
  v89 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[(v51 - 810) ^ 0x830] - 8;
  v81 = (v80 ^ 0xB ^ v90 ^ *(_BYTE *)(v89
                                                                      + (v80 ^ 0xBu ^ v90 ^ 0x15)) ^ 0x35u)
      + 0x331EFFDABF4D5CBELL
      - ((2
        * (v80 ^ 0xB ^ v90 ^ *(unsigned __int8 *)(v89 + (v80 ^ 0xBu ^ v90 ^ 0x15)) ^ 0x35u)) & 0x17CLL);
  v82 = ((v81 << 8) ^ 0x1EFFDABF4D5CBE00 | v81 ^ 0x331EFFDABF4D5CBELL)
      - 0x164110C5B91D8437
      - ((2 * ((v81 << 8) ^ 0x1EFFDABF4D5CBE00 | v81 ^ 0x331EFFDABF4D5CBELL)) & 0x537DDE748DC4F792);
  return ((uint64_t (*)(unint64_t, unint64_t))(*(_QWORD *)(a51 + 8 * (v51 - 810)) - 8))(0xBCAF1B6800000000, ((((v82 << 16) ^ 0xEF3A46E27BC90000 | v82 ^ 0xE9BEEF3A46E27BC9)+ 0x24EA7091BCAF1B68- 2 * (((v82 << 16) ^ 0xEF3A46E27BC90000 | v82 ^ 0xE9BEEF3A46E27BC9) & 0x24EA7091BCAF1B78 ^ v82 & 0x10)) << 32) ^ 0xBCAF1B6800000000);
}

uint64_t sub_19308A5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, int a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unsigned __int8 a40,int a41,int a42,unsigned __int8 a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,unsigned __int8 a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  char v68;
  char v69;
  char v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  _BYTE v77[8];

  v66 = (a33 - 287897468) & 0x1128EBFB;
  v67 = v64 - 2 * (v64 & 0xFFFFFFDF) + 1567653348 - ((2 * (v64 - 2 * (v64 & 0xFFFFFFDF) + 223)) & 0xBAE0FB9E) + 202;
  LOBYTE(v67) = *(_BYTE *)(a59 + (v67 ^ 0x5D707D05)) ^ ((v67 ^ 0xCF) - ((2 * (v67 ^ 0xCF)) & 0xB2) + 89);
  v68 = (v67 - ((2 * v67) & 0xB2) + 89) ^ *(_BYTE *)(a59
                                                   + ((v62 ^ a15 ^ (a33 - 124) & 0xFB ^ v63) ^ 0xDELL));
  v77[0] = v62 ^ a15 ^ v66 ^ v63 ^ (v68 - ((2 * v68) & 0xC8) + 100);
  v69 = *(_BYTE *)(a59 + (a48 ^ v63)) ^ *(_BYTE *)(a59 + (v62 ^ 0x3Eu ^ a18 ^ 0xE6));
  v70 = (v69 - ((2 * v69) & 0x20) + 16) ^ a48;
  v71 = *(unsigned __int8 *)(a59 + (v65 ^ v63)) ^ *(unsigned __int8 *)(a59
                                                                                      + ((a22 ^ v62) ^ 0x84u ^ v63));
  v72 = (v71 - 2 * (v71 & 0x1F) + 31) ^ a22 ^ v62 ^ 0xFFFFFF84;
  v73 = v65 ^ 0xDE ^ (v72 - ((2 * v72) & 0xFFFFFF83) - 63);
  LOBYTE(v72) = *(_BYTE *)(a59 + (a40 ^ v63)) ^ *(_BYTE *)(a59 + ((a27 ^ v62) ^ 0xC8));
  LOBYTE(v72) = (v72 - ((2 * v72) & 0x60) + 48) ^ a51;
  v74 = (v73 << 24) | (((a27 ^ v62) ^ 0xA5 ^ (v72 - ((2 * v72) & 0xF0) + 120)) << 16);
  v75 = ((a43 & 7 ^ 5 | 0x1F58B378) ^ 0x1F58B378)
      + 1031018874
      - ((2 * ((a43 & 7 ^ 5 | 0x1F58B378) ^ 0x1F58B378)) & 0x7AE83396)
      + 81;
  *(_QWORD *)(a11 + 8 * ((((a43 >> 3) ^ 6) + 1676351087 - 2 * (((a43 >> 3) ^ 6) & 0xF)) ^ 0x63EB166Fu)) = (a2 | a5) ^ *(_QWORD *)(v61 + 8 * (v75 ^ 0x3D741989u)) ^ 0x64CD8C68874030FBLL ^ ((v75 ^ 0x3D74197Au) - 0x46923C99CDAD830DLL + ((((unint64_t)(v75 ^ 0x3D74197Au) << (((a33 - 124) & 0xFBu) + 102)) + 2162226252u) & 0x3E3C40598 ^ 0xFBDBEFFFFFFFFFFFLL));
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a61 + 8 * v66))(v74, v77[0] ^ 0x70u, v62 ^ 0x3E ^ a18 ^ 0x45u ^ ((v70 ^ 0x10)- 2 * ((v70 ^ 0x10) & 0x37 ^ v70 & 1)- 74));
}

uint64_t sub_19308AE50@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W6>, int a5@<W7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,int a50,unsigned int a51,int a52,char a53,int a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59)
{
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  unint64_t v262;
  int v263;
  int v264;
  int v265;
  unint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unsigned int v281;
  unint64_t v282;
  uint64_t v283;
  unint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unsigned int v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unsigned __int8 v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  __int128 v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  uint64_t v483;
  unint64_t v484;
  unint64_t v485;
  char v486;
  unint64_t v487;
  int v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  unint64_t v492;
  char v493;
  unsigned int v494;
  int v495;
  unint64_t v496;
  unint64_t v497;
  char v498;
  char v499;
  int v500;
  int v501;
  char v502;
  char v503;
  uint64_t v504;
  int v505;
  char v506;
  int v507;
  _BOOL8 v508;
  unint64_t v509;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unint64_t v519;
  uint64_t v520;
  char v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  unint64_t v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;

  v64 = a44 | (a2 << 24);
  v65 = v59 + (a3 << 8);
  v66 = (v63 + (a42 ^ a55 ^ (a59 + 77))) ^ a4;
  v67 = ((v66 + a1) ^ 0xA1D0A243)
      - (unint64_t)((2 * ((v66 + a1) ^ 0xA1D0A243)) & 0xFE150786)
      - 0x7C22BCE680F57C3DLL;
  v68 = (v61 + a6 + ((a5 << 16) | (v62 << 8))) ^ 0x7FAF68BE;
  v69 = ((v65 + (_DWORD)a45) ^ 0xE5F49599)
      - (unint64_t)((2 * ((v65 + (_DWORD)a45) ^ 0xE5F49599)) & 0xA1C85360)
      + 0x5AF821C950E429B0;
  v70 = ((a38 + v64) ^ 0xDD194D04)
      - (unint64_t)((2 * ((a38 + v64) ^ 0xDD194D04)) & 0xCD772BBE)
      - 0x5872FC3E99446A21;
  v71 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[a59 ^ 0xA42] - 12;
  v72 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (a44 ^ 4)) ^ 0x5ALL));
  v73 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v69) ^ 0xE4)) ^ 0x5ALL));
  LODWORD(v72) = (((((v73 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                  + 0x176B7608979B6F91
                  - ((2 * ((v73 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v73) >> 8) ^ (((((v72 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v72 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x400931000000000) - 0x55EDB447353C8AE2) ^ v72) >> 32);
  v74 = *(unsigned __int8 *)(a12 + (v66 ^ 0x43));
  v75 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + ((v67 >> 24) ^ 0x83DD43197FLL)) ^ 0x5ALL));
  LOBYTE(v66) = (a53 & 0x18 | 0x63) ^ (a59 - 70) & 0x7B;
  LODWORD(v73) = *(unsigned __int8 *)(a12 + (BYTE1(v67) ^ 0x83));
  v76 = *(unsigned __int8 *)(a12
                           + ((unint64_t)(v68 >> (((v66 | 0xED) - (v66 | 0x12) + 18) ^ 0xFD)) >> (((v66 | 0xED) - (v66 | 0x12) + 18) ^ 0xE5u)));
  v77 = *(unsigned __int8 *)(a12 + (a6 ^ 0xBE));
  v78 = *(unsigned __int8 *)(a12 + ((v69 >> 24) ^ 0x5AF821C950));
  v79 = v68 - ((2 * v68) & 0xF5D0B90E) - 85435257;
  v80 = *(unsigned __int8 *)(a12 + (BYTE1(v79) ^ 0x5CLL));
  v81 = *(unsigned __int8 *)(a12 + ((v70 >> 24) ^ 0xA78D03C166));
  v82 = *(unsigned __int8 *)(a12 + (BYTE2(v79) ^ 0xE8));
  v83 = v72 ^ (((((v75 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
               - ((2 * ((v75 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x888211080000)
               + 0x2271D4550CC6B8A9) ^ v75) >> 16);
  v84 = *(unsigned __int8 *)(a12 + (BYTE2(v67) ^ 0xALL));
  v85 = v83 ^ (((((*(_QWORD *)(v71 + 8 * (v76 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
               + 0x186B7608979B6F91
               - ((2 * ((*(_QWORD *)(v71 + 8 * (v76 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v76 ^ 0x5A))) >> 24);
  v86 = *(_QWORD *)(v71 + 8 * (v77 ^ 0x5A));
  LODWORD(v67) = (((((*(_QWORD *)(v71 + 8 * (v74 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                  + 0x176B7608979B6F91
                  - ((2 * ((*(_QWORD *)(v71 + 8 * (v74 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00uLL)) ^ *(_QWORD *)(v71 + 8 * (v74 ^ 0x5A))) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v78 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v78 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x80B1000000000uLL) - 0x37EB785399C6F956) ^ *(_QWORD *)(v71 + 8 * (v78 ^ 0x5A))) >> 32) ^ (((((v86 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((v86 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v86) >> 16);
  v87 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v70) ^ 0x95)) ^ 0x5ALL));
  v88 = *(_QWORD *)(v71 + 8 * ((v73 - ((2 * (_DWORD)v73) & 0xF6) + 123) ^ 0x21));
  LODWORD(v67) = v67 ^ (((((v87 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                        + 0x186B7608979B6F91
                        - ((2 * ((v87 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v87) >> 24);
  v89 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v70) ^ 0xBBLL)) ^ 0x5ALL));
  v90 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (a45 ^ 0x99)) ^ 0x5ALL));
  LODWORD(v80) = (((((*(_QWORD *)(v71 + 8 * (v80 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                  - ((2 * ((*(_QWORD *)(v71 + 8 * (v80 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x400909200000000uLL)
                  - 0x5CCDB782F592624ALL) ^ *(_QWORD *)(v71 + 8 * (v80 ^ 0x5A))) >> 32) ^ (((((v88 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                                                                                           + 0x176B7608979B6F91
                                                                                           - ((2
                                                                                             * ((v88 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v88) >> 24) ^ (((((v89 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((v89 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v89) >> 8) ^ (((((v90 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v90 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x1111124A0000) - 0x3F33676346DAE6F7) ^ v90) >> 16);
  v91 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v69) ^ 0x29)) ^ 0x5ALL));
  v92 = (((((*(_QWORD *)(v71 + 8 * (v81 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
         + 0x176B7608979B6F91
         - ((2 * ((*(_QWORD *)(v71 + 8 * (v81 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v81 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v82 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v82 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x181B1702000000uLL) + 0x542C0FBBD1C402F5) ^ *(_QWORD *)(v71 + 8 * (v82 ^ 0x5A))) >> 24) ^ (((((v91 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((v91 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v91) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v84 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v84 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v84 ^ 0x5A))) >> 16);
  v93 = (v80 ^ 0x61FE5909)
      - ((2 * (v80 ^ 0x61FE5909)) & 0x47E07710)
      + 0x1209297F23F03B88;
  v94 = *(unsigned __int8 *)(a12
                           + ((((v67 ^ 0xB0D2FBF9)
                                               - ((2 * (v67 ^ 0xB0D2FBF9)) & 0x4A6B3124)
                                               - 1523214190) >> 16) ^ 0x35));
  v95 = *(unsigned __int8 *)(a12
                           + ((((v80 ^ 0x61FE5909)
                                               - ((2 * (v80 ^ 0x61FE5909)) & 0x47E07710)
                                               + 602946440) >> 16) ^ 0xF0));
  v96 = *(unsigned __int8 *)(a12
                           + ((((v67 ^ 0xB0D2FBF9)
                              - ((2 * (v67 ^ 0xB0D2FBF9)) & 0x14A6B3124uLL)
                              + 0x1A42800EA5359892) >> 24) ^ 0x1A42800EA5));
  v97 = *(unsigned __int8 *)(a12
                           + ((((v92 ^ 0xD40DA9EB)
                                               - 2 * ((v92 ^ 0xD40DA9EB) & 0x9C7F68BE ^ v92 & 0x14)
                                               - 1669371734) >> 16) ^ 0x7FLL));
  v98 = *(unsigned __int8 *)(a12 + (v80 ^ 9));
  v99 = *(unsigned __int8 *)(a12 + (v85 ^ 0x38));
  v100 = *(unsigned __int8 *)(a12
                            + (((unsigned __int16)((v85 ^ 0x6238)
                                                                  - ((2 * (v85 ^ 0x6238)) & 0xF29C)
                                                                  - 1714) >> 8) ^ 0xF9));
  v101 = *(unsigned __int8 *)(a12 + (v67 ^ 0xF9));
  v102 = *(unsigned __int8 *)(a12
                            + ((((v92 ^ 0xD40DA9EBLL)
                               - 2 * ((v92 ^ 0xD40DA9EBLL) & 0x9C7F68BELL ^ v92 & 0x14)
                               - 0x5B3D16F463809756) >> 24) ^ 0xA4C2E90B9CLL));
  v103 = *(unsigned __int8 *)(a12 + (v92 ^ 0xEBLL));
  v104 = *(unsigned __int8 *)(a12
                            + ((((v85 ^ 0x690C6238)
                                                - ((2 * (v85 ^ 0x690C6238)) & 0xAF0BF29C)
                                                - 679085746) >> 16) ^ 0x85));
  v105 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v85 ^ 0x690C6238)
                                            - ((2 * (v85 ^ 0x690C6238)) & 0x1AF0BF29CuLL)
                                            + 0x3DBD3CF4D785F94ELL) >> 24) ^ 0x3DBD3CF4D7)) ^ 0x5ALL));
  v106 = *(unsigned __int8 *)(a12 + (BYTE1(v93) ^ 0x3BLL));
  v107 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + (((unsigned __int16)((v92 ^ 0xA9EB)
                                                                               - 2
                                                                               * ((v92 ^ 0xA9EB) & 0x68BE ^ v92 & 0x14)
                                                                               + 26794) >> 8) ^ 0x68)) ^ 0x5ALL));
  v108 = (((((*(_QWORD *)(v71 + 8 * (v94 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
          + 0x176B7608979B6F91
          - ((2 * ((*(_QWORD *)(v71 + 8 * (v94 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v94 ^ 0x5A))) >> 32) ^ (((((v105 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000) + 0x176B7608979B6F91 - ((2 * ((v105 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v105) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v95 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v95 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x9617384A00uLL) - 0x7DE5D790942198B6) ^ *(_QWORD *)(v71 + 8 * (v95 ^ 0x5A))) >> 8) ^ (((((v107 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((v107 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v107) >> 16);
  v109 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + ((v93 >> 24) ^ 0x1209297F23)) ^ 0x5ALL));
  LODWORD(v107) = (((((v109 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                   + 0x176B7608979B6F91
                   - ((2 * ((v109 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v109) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v96 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v96 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2D10089400000000uLL) + 0x17C9A44AAEF038CFLL) ^ *(_QWORD *)(v71 + 8 * (v96 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v97 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v97 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x1B9710380000uLL) + 0x18103DEF981C352ELL) ^ *(_QWORD *)(v71 + 8 * (v97 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v99 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) + 0xC10792AD322050 + (~(2 * ((*(_QWORD *)(v71 + 8 * (v99 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) | 0xFEFFF4FAEDFFFFFFLL)) ^ *(_QWORD *)(v71 + 8 * (v99 ^ 0x5A))) >> 24);
  LODWORD(v100) = (((((*(_QWORD *)(v71 + 8 * (v102 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v102 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x900881000000000uLL)
                   - 0x1A2CB9E7D68F465FLL) ^ *(_QWORD *)(v71 + 8 * (v102 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v98 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                                                                                             - ((2
                                                                                               * ((*(_QWORD *)(v71 + 8 * (v98 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x108829604000000uLL)
                                                                                             - 0x28781EA08963E75ELL) ^ *(_QWORD *)(v71 + 8 * (v98 ^ 0x5A))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v100 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v100 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x1711326200uLL) + 0x5F38103FD89BB156) ^ *(_QWORD *)(v71 + 8 * (v100 ^ 0x5A))) >> 8);
  v110 = *(_QWORD *)(v71 + 8 * (v103 ^ 0x5A));
  LOBYTE(v103) = v100 ^ (((((*(_QWORD *)(v71 + 8 * (v101 ^ 0x5A)) >> 3) & 0x8BBD0000 ^ 0x2B10000)
                         - 1751421039
                         - ((2 * ((*(_QWORD *)(v71 + 8 * (v101 ^ 0x5A)) >> 3) & 0x8BBD0000 ^ 0x2B10000)) & 0x7320000)) ^ *(_DWORD *)(v71 + 8 * (v101 ^ 0x5A))) >> 16);
  v111 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + (((unsigned __int16)((v67 ^ 0xFBF9)
                                                                               - ((2 * (v67 ^ 0xFBF9)) & 0x3124)
                                                                               - 26478) >> 8) ^ 0x98)) ^ 0x5ALL));
  v112 = *(_QWORD *)(v71 + 8 * (v106 ^ 0x5A));
  v113 = (v107 ^ 0x8989AF8FLL)
       - ((2 * (v107 ^ 0x8989AF8FLL)) & 0x1DF0CA1D2)
       - 0x57669A961079AF17;
  v114 = *(unsigned __int8 *)(a12
                            + ((((v107 ^ 0x8989AF8F)
                                                - ((2 * (v107 ^ 0x8989AF8F)) & 0xDF0CA1D2)
                                                - 276410135) >> 16) ^ 0x86));
  v115 = v100 ^ (((((*(_QWORD *)(v71 + 8 * (v101 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                                             + 0x176C7608979B6F91
                                             - ((2
                                               * ((*(_QWORD *)(v71 + 8 * (v101 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v101 ^ 0x5A))) >> 16) ^ 0xABF00C06;
  v116 = v115 - ((2 * (_DWORD)v115) & 0xB672DCF6) - 0x2FC0EC02A4C69185;
  v117 = *(unsigned __int8 *)(a12 + ((v116 >> 24) ^ 0xD03F13FD5BLL));
  v118 = *(unsigned __int8 *)(a12 + (BYTE2(v116) ^ 0x39));
  LODWORD(v100) = (((((*(_QWORD *)(v71 + 8 * (v104 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                   + 0x176B7608979B6F91
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v104 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v104 ^ 0x5A))) >> 16) ^ (((((v110 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v110 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x19307281A00) - 0x7EA6B7266869F074) ^ v110) >> 8) ^ (((((v111 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v111 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x1188A0714000000) - 0x54230AE83583411FLL) ^ v111) >> 24) ^ (((((v112 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v112 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0xD000A8600000000) - 0x187EDA887C0806FDLL) ^ v112) >> 32);
  v119 = (v100 ^ 0xB4077069)
       - ((2 * (v100 ^ 0xB4077069)) & 0x16B7B01B6)
       - 0x6FA8F0234A427F25;
  v120 = *(unsigned __int8 *)(a12 + ((v119 >> 24) ^ 0x90570FDCB5));
  v121 = *(unsigned __int8 *)(a12 + (BYTE1(v119) ^ 0x80));
  v122 = *(unsigned __int8 *)(a12
                            + (((unsigned __int16)((v108 ^ 0xB536)
                                                                  - 2 * ((v108 ^ 0xB536) & 0x38C0 ^ v108 & 0x40)
                                                                  + 14464) >> 8) ^ 0x38));
  v123 = *(unsigned __int8 *)(a12 + (v103 ^ 6));
  v124 = *(unsigned __int8 *)(a12 + (BYTE2(v119) ^ 0xBDLL));
  v125 = *(unsigned __int8 *)(a12 + (v100 ^ 0x69));
  v126 = *(unsigned __int8 *)(a12 + (v107 ^ 0x8FLL));
  v127 = *(unsigned __int8 *)(a12
                            + ((((v108 ^ 0x1E99B536)
                               - 2 * ((v108 ^ 0x1E99B536) & 0x247D38C0 ^ (unint64_t)(v108 & 0x40))
                               - 0x34112D99DB82C780) >> 24) ^ 0xCBEED26624));
  v128 = *(unsigned __int8 *)(a12
                            + ((((v108 ^ 0x1E99B536)
                                                - 2 * ((v108 ^ 0x1E99B536) & 0x247D38C0 ^ v108 & 0x40)
                                                + 612186240) >> 16) ^ 0x7DLL));
  v129 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v108 ^ 0x36)) ^ 0x5ALL));
  v130 = *(unsigned __int8 *)(a12 + (BYTE1(v113) ^ 0x50));
  v537 = *(unsigned __int8 *)(a12 + (BYTE1(v116) ^ 0x6ELL));
  LODWORD(v129) = (((((*(_QWORD *)(v71 + 8 * (v114 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v114 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x94106A5000uLL)
                   - 0x6770DA5F7CA95C0) ^ *(_QWORD *)(v71 + 8 * (v114 ^ 0x5A))) >> 8) ^ (((((v129 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                                                           - ((2
                                                                                             * ((v129 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2808088200000000)
                                                                                           + 0x753616554806F413) ^ v129) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v118 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v118 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v118 ^ 0x5A))) >> 16);
  v131 = *(unsigned __int8 *)(a12 + ((v113 >> 24) ^ 0xA8996569EFLL)) ^ 0x5ALL;
  LODWORD(v129) = v129 ^ (((((*(_QWORD *)(v71 + 8 * (v120 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                          - ((2 * ((*(_QWORD *)(v71 + 8 * (v120 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x10889200000000uLL)
                          + 0x277A466D00C33DFBLL) ^ *(_QWORD *)(v71 + 8 * (v120 ^ 0x5A))) >> 24);
  v132 = *(_QWORD *)(v71 + 8 * (v125 ^ 0x5A));
  LODWORD(v117) = (((((*(_QWORD *)(v71 + 8 * (v117 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v117 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v117 ^ 0x5A))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * v131) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * v131) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x138414320000uLL) + 0x2BA40BD61A5997F5) ^ *(_QWORD *)(v71 + 8 * v131)) >> 16) ^ (((((v132 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v132 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x408199000000000) + 0xA27ACEC9444C822) ^ v132) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v122 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v122 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x10700722A00uLL) - 0x22F258681FC42889) ^ *(_QWORD *)(v71 + 8 * (v122 ^ 0x5A))) >> 8);
  LODWORD(v121) = (((((*(_QWORD *)(v71 + 8 * (v121 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v121 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x1181B9312000000uLL)
                   - 0x3823E20616996B83) ^ *(_QWORD *)(v71 + 8 * (v121 ^ 0x5A))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v123 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                                                                                             + 0x176B7608979B6F91
                                                                                             - ((2
                                                                                               * ((*(_QWORD *)(v71 + 8 * (v123 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v123 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v128 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v128 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2910920400000000uLL) - 0x31406DDC27056A4) ^ *(_QWORD *)(v71 + 8 * (v128 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v126 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v126 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x1201506000uLL) - 0x6D705CF68B55CD66) ^ *(_QWORD *)(v71 + 8 * (v126 ^ 0x5A))) >> 8);
  LODWORD(v124) = (((((*(_QWORD *)(v71 + 8 * (v127 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                   + 0x176B7608979B6F91
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v127 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v127 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v124 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v124 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00uLL)) ^ *(_QWORD *)(v71 + 8 * (v124 ^ 0x5A))) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v130 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v130 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x110000512000000uLL) + 0x39BB2002EDEF6F3BLL) ^ *(_QWORD *)(v71 + 8 * (v130 ^ 0x5A))) >> 24);
  v133 = (v129 ^ 0x2C0690DDLL)
       - ((2 * (v129 ^ 0x2C0690DDLL)) & 0x1A8B55698)
       - 0x549061FF2BA554B4;
  v134 = *(unsigned __int8 *)(v60 + (v117 ^ 0x5FLL));
  LODWORD(v124) = v124 ^ (((((*(_QWORD *)(v71 + 8 * (v537 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                          - ((2
                            * ((*(_QWORD *)(v71 + 8 * (v537 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x20000A0200000000uLL)
                          + 0x5941B505336A942FLL) ^ *(_QWORD *)(v71 + 8 * (v537 ^ 0x5A))) >> 32);
  v135 = (v121 ^ 0x6688624CLL)
       - 2 * ((v121 ^ 0x6688624CLL) & 0x3BCBC2FC ^ v121 & 0x10)
       + 0x46097AC93BCBC2ECLL;
  v136 = (v117 ^ 0x837355FLL)
       - ((2 * (v117 ^ 0x837355F)) & 0xBC91D562)
       + 0x77B150355E48EAB1;
  v137 = (v124 ^ 0xCBFF478ALL)
       - 2 * ((v124 ^ 0xCBFF478ALL) & 0xAD09253CLL ^ v124 & 0x30)
       - 0x3FC30DFB52F6DAF4;
  v138 = *(unsigned __int8 *)(v60 + ((v133 >> 24) ^ 0xAB6F9E00D4));
  v139 = *(unsigned __int8 *)(v60 + (BYTE1(v136) ^ 0xEALL));
  v140 = *(unsigned __int8 *)(v60 + (v121 ^ 0x4CLL));
  v141 = *(unsigned __int8 *)(v60 + (v129 ^ 0xDDLL));
  v142 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v129 ^ 0x90DD)
                                                                  - ((2 * (v129 ^ 0x90DD)) & 0x5698)
                                                                  - 21684) >> 8) ^ 0xABLL));
  v143 = *(unsigned __int8 *)(v60 + (BYTE2(v136) ^ 0x48));
  v144 = *(unsigned __int8 *)(v60 + (v124 ^ 0x8ALL));
  v145 = (v136 >> 24) ^ 0x77B150355ELL;
  v146 = *(unsigned __int8 *)(v60 + (BYTE1(v135) ^ 0xC2));
  v147 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v124 ^ 0x478A)
                                                                  - 2 * ((v124 ^ 0x478A) & 0x253C ^ v124 & 0x30)
                                                                  + 9484) >> 8) ^ 0x25));
  v148 = *(unsigned __int8 *)(v60
                            + (((unint64_t)((v124 ^ 0xCBFF478A)
                                                                  - 2
                                                                  * ((v124 ^ 0xCBFF478A) & 0xAD09253C ^ v124 & 0x30)
                                                                  - 1391909620) >> 16) ^ 9));
  v149 = *(unsigned __int8 *)(v60 + v145);
  v150 = *(unsigned __int8 *)(v60 + (BYTE2(v133) ^ 0x5ALL));
  LODWORD(v145) = (((((*(_QWORD *)(v71 + 8 * (v134 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                   + 0x176B7608979B6F91
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v134 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v134 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v138 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v138 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x103703200uLL) + 0x61D35920D1BA199ALL) ^ *(_QWORD *)(v71 + 8 * (v138 ^ 0x5A))) >> 8);
  v151 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v135 >> 24) ^ 0x46097AC93BLL)) ^ 0x5ALL));
  v152 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v137 >> 24) ^ 0xC03CF204ADLL)) ^ 0x5ALL));
  LODWORD(v145) = v145 ^ (((((v151 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                          - ((2 * ((v151 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x8989114000000)
                          - 0x77B933A775B77FC2) ^ v151) >> 24) ^ (((((v152 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                                    - ((2
                                                                      * ((v152 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2100931600000000)
                                                                    - 0x673D9444E1BD14A7) ^ v152) >> 32);
  LODWORD(v141) = (((((*(_QWORD *)(v71 + 8 * (v140 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v140 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v140 ^ 0x5A))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v139 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v139 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x1905001A0000uLL) - 0xF8BC35D6BF2D0DALL) ^ *(_QWORD *)(v71 + 8 * (v139 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v144 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v144 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v144 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v141 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v141 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x180011A0200uLL) + 0x5EB22BF404CDC103) ^ *(_QWORD *)(v71 + 8 * (v141 ^ 0x5A))) >> 8);
  LODWORD(v142) = (((((*(_QWORD *)(v71 + 8 * (v147 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v147 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x110080714000000uLL)
                   - 0x1766DBFC3103D900) ^ *(_QWORD *)(v71 + 8 * (v147 ^ 0x5A))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v146 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                                                                                             + 0x176B7608979B6F91
                                                                                             - ((2
                                                                                               * ((*(_QWORD *)(v71 + 8 * (v146 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v146 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v142 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v142 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v142 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v143 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v143 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00uLL)) ^ *(_QWORD *)(v71 + 8 * (v143 ^ 0x5A))) >> 8);
  v153 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v135) ^ 0xCBLL)) ^ 0x5ALL));
  LODWORD(v153) = (((((*(_QWORD *)(v71 + 8 * (v150 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v150 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v150 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v148 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v148 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x189B8612000000uLL) - 0x30B19018B2CF7B18) ^ *(_QWORD *)(v71 + 8 * (v148 ^ 0x5A))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v149 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v149 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x10516304800uLL) + 0x6089DB96BF186667) ^ *(_QWORD *)(v71 + 8 * (v149 ^ 0x5A))) >> 8) ^ (((((v153 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((v153 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v153) >> 16);
  v154 = (v142 ^ 0xC3F212D5)
       - ((2 * (v142 ^ 0xC3F212D5)) & 0x17891EB02)
       - 0x6E93019043B70A7FLL;
  v155 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v153 ^ 0x3AB)
                                                                  - ((2 * (v153 ^ 0x3AB)) & 0x4564)
                                                                  - 23886) >> 8) ^ 0xA2));
  v156 = *(unsigned __int8 *)(v60 + (v141 ^ 0x4DLL));
  v157 = *(unsigned __int8 *)(v60
                            + ((((v145 ^ 0x1308E89D)
                                                - ((2 * (v145 ^ 0x1308E89D)) & 0xCB4B1782)
                                                - 442135615) >> 16) ^ 0xA5));
  v158 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v141 ^ 0xF54D)
                                                                  - ((2 * (v141 ^ 0xF54D)) & 0xDFB6)
                                                                  + 28635) >> 8) ^ 0x6FLL));
  v159 = *(unsigned __int8 *)(v60 + (v142 ^ 0xD5));
  v160 = *(unsigned __int8 *)(v60
                            + ((((v153 ^ 0x707D03AB)
                                                - ((2 * (v153 ^ 0x707D03AB)) & 0xF0174564)
                                                - 133455182) >> 16) ^ 0xBLL));
  v161 = *(unsigned __int8 *)(v60
                            + ((((v145 ^ 0x1308E89DLL)
                               - ((2 * (v145 ^ 0x1308E89DLL)) & 0x1CB4B1782uLL)
                               + 0x1C555C28E5A58BC1) >> 24) ^ 0x1C555C28E5));
  v162 = *(unsigned __int8 *)(v60
                            + ((((v141 ^ 0x90FF54D)
                                                - ((2 * (v141 ^ 0x90FF54D)) & 0x13EADFB6)
                                                + 167079899) >> 16) ^ 0xF5));
  v163 = *(unsigned __int8 *)(v60 + (v145 ^ 0x9DLL));
  v164 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v145 ^ 0xE89D)
                                                                  - ((2 * (v145 ^ 0xE89D)) & 0x1782)
                                                                  - 29759) >> 8) ^ 0x8BLL));
  v165 = *(unsigned __int8 *)(v60
                            + ((((v141 ^ 0x90FF54DLL)
                               - (unint64_t)((2 * (v141 ^ 0x90FF54D)) & 0x13EADFB6)
                               - 0x71444A33F60A9025) >> 24) ^ 0x8EBBB5CC09));
  v166 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v154 >> 24) ^ 0x916CFE6FBCLL)) ^ 0x5ALL));
  v167 = (((((*(_QWORD *)(v71 + 8 * (v156 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
          - ((2 * ((*(_QWORD *)(v71 + 8 * (v156 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x116045A3200uLL)
          + 0x2245A9F726DDB1ALL) ^ *(_QWORD *)(v71 + 8 * (v156 ^ 0x5A))) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v157 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                                                  - ((2
                                                                                    * ((*(_QWORD *)(v71
                                                                                                  + 8 * (v157 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x510120400000000uLL)
                                                                                  - 0x5407C4C969AE62FALL) ^ *(_QWORD *)(v71 + 8 * (v157 ^ 0x5A))) >> 32) ^ (((((v166 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v166 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x9B1504200000) - 0x4630204129ED25FDLL) ^ v166) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v155 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000) + 0x186B7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v155 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v155 ^ 0x5A))) >> 24);
  LODWORD(v155) = (((((*(_QWORD *)(v71 + 8 * (v159 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v159 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v159 ^ 0x5A))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v158 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v158 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0xA1712220000uLL) - 0x3DFDCAC032ACADCBLL) ^ *(_QWORD *)(v71 + 8 * (v158 ^ 0x5A))) >> 16);
  v168 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v154) ^ 0xF5)) ^ 0x5ALL));
  LODWORD(v141) = v155 ^ (((((*(_QWORD *)(v71 + 8 * (v160 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                          - ((2
                            * ((*(_QWORD *)(v71 + 8 * (v160 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2008921400000000uLL)
                          + 0x3974F92A3734B241) ^ *(_QWORD *)(v71 + 8 * (v160 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v161 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((*(_QWORD *)(v71 + 8 * (v161 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x11416402800uLL) + 0x2879F8BA4B60546FLL) ^ *(_QWORD *)(v71 + 8 * (v161 ^ 0x5A))) >> 8);
  v169 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v153 ^ 0x707D03ABLL)
                                            - ((2 * (v153 ^ 0x707D03ABLL)) & 0x1F0174564uLL)
                                            + 0x66B06F4DF80BA2B2) >> 24) ^ 0x66B06F4DF8)) ^ 0x5ALL));
  v170 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v153 ^ 0xABLL)) ^ 0x5ALL));
  LODWORD(v153) = (((((v168 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                   - ((2 * ((v168 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x29701720000)
                   + 0x577017FE0BBDE2DLL) ^ v168) >> 16) ^ ((((v169 >> 3) & 0x168C4DCB8BBD3D72 ^ 0x160C480B83151C60)
                                                           + (v169 ^ 0x7192E38050812BFCLL)
                                                           - 2
                                                           * (((v169 >> 3) & 0x168C4DCB8BBD3D72 ^ 0x160C480B83151C60) & (v169 ^ 0x7192E38050812BFCLL))) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v163 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v163 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v163 ^ 0x5A))) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v162 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v162 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00uLL)) ^ *(_QWORD *)(v71 + 8 * (v162 ^ 0x5A))) >> 8);
  v171 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v154) ^ 0x48)) ^ 0x5ALL));
  LODWORD(v171) = (((((*(_QWORD *)(v71 + 8 * (v164 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v164 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x9011304000uLL)
                   - 0x7A13DE87C3655FA0) ^ *(_QWORD *)(v71 + 8 * (v164 ^ 0x5A))) >> 8) ^ (((((v170 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                                                            - ((2
                                                                                              * ((v170 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2500038400000000)
                                                                                            + 0x72E0A1C252B9DC5DLL) ^ v170) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v165 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v165 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x828712780000uLL) + 0x17496143D97E67CDLL) ^ *(_QWORD *)(v71 + 8 * (v165 ^ 0x5A))) >> 16) ^ (((((v171 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000) + 0x186B7608979B6F91 - ((2 * ((v171 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v171) >> 24);
  v172 = *(unsigned __int8 *)(v60
                            + ((((v167 ^ 0x699AB4C2)
                               - 2 * ((v167 ^ 0x699AB4C2) & 0xF104253DLL ^ v167 & 0x14)
                               + 0xF547FCF1042529) >> 24) ^ 0xF547FCF1));
  v173 = (v153 ^ 0xBFBDA2B3)
       - ((2 * (v153 ^ 0xBFBDA2B3)) & 0x1A905D498)
       + 0x55313BA4D482EA4CLL;
  v174 = *(unsigned __int8 *)(v60 + (v141 ^ 0x44));
  v175 = (v171 ^ 0x4A03105FLL)
       - ((2 * (v171 ^ 0x4A03105F)) & 0x8C1D148E)
       - 0x7A641DADB9F175B9;
  v176 = (v141 ^ 0x41C85A44)
       - ((2 * (v141 ^ 0x41C85A44)) & 0x5FBDD792)
       + 0x337F59D22FDEEBC9;
  v177 = *(unsigned __int8 *)(v60 + (v171 ^ 0x5FLL));
  v178 = *(unsigned __int8 *)(v60 + ((v173 >> 24) ^ 0x55313BA4D4));
  v179 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v171 ^ 0x105F)
                                                                  - ((2 * (v171 ^ 0x105F)) & 0x148E)
                                                                  - 30137) >> 8) ^ 0x8ALL));
  v180 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v141 ^ 0x5A44)
                                                                  - ((2 * (v141 ^ 0x5A44)) & 0xD792)
                                                                  - 5175) >> 8) ^ 0xEBLL));
  v181 = *(unsigned __int8 *)(v60 + (v153 ^ 0xB3));
  v182 = *(unsigned __int8 *)(v60 + (v167 ^ 0xC2));
  v183 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v153 ^ 0xA2B3)
                                                                  - ((2 * (v153 ^ 0xA2B3)) & 0xD498)
                                                                  - 5556) >> 8) ^ 0xEALL));
  v184 = *(unsigned __int8 *)(v60 + ((v175 >> 24) ^ 0x859BE25246));
  v185 = *(unsigned __int8 *)(v60 + ((v176 >> 24) ^ 0x337F59D22FLL));
  v186 = *(unsigned __int8 *)(v60
                            + ((((v167 ^ 0x699AB4C2)
                                                - 2 * ((v167 ^ 0x699AB4C2) & 0xF104253D ^ v167 & 0x14)
                                                - 251386583) >> 16) ^ 4));
  v187 = *(unsigned __int8 *)(v60
                            + (((unsigned __int16)((v167 ^ 0xB4C2)
                                                                  - 2 * ((v167 ^ 0xB4C2) & 0x253D ^ v167 & 0x14)
                                                                  + 9513) >> 8) ^ 0x25));
  v188 = *(unsigned __int8 *)(v60 + (BYTE2(v176) ^ 0xDELL));
  v189 = *(unsigned __int8 *)(v60 + (BYTE2(v173) ^ 0x82));
  v190 = *(unsigned __int8 *)(v60 + (BYTE2(v175) ^ 0xELL));
  v191 = (((((*(_QWORD *)(v71 + 8 * (v174 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
          - ((2 * ((*(_QWORD *)(v71 + 8 * (v174 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x829605100000uLL)
          + 0x3EEE717B5288E60CLL) ^ *(_QWORD *)(v71 + 8 * (v174 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71
                                                                                                  + 8 * (v172 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                                                                                    - ((2
                                                                                      * ((*(_QWORD *)(v71 + 8 * (v172 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x8610380200uLL)
                                                                                    + 0x2A321277381C838CLL) ^ *(_QWORD *)(v71 + 8 * (v172 ^ 0x5A))) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v178 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v178 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x100919306000000uLL) - 0x7C7E05265862D7E7) ^ *(_QWORD *)(v71 + 8 * (v178 ^ 0x5A))) >> 24);
  v192 = *(_QWORD *)(v71 + 8 * (v180 ^ 0x5A));
  v532 = v191 ^ (((((*(_QWORD *)(v71 + 8 * (v177 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                 - ((2 * ((*(_QWORD *)(v71 + 8 * (v177 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x810908200000000uLL)
                 + 0x578E865EB58B614) ^ *(_QWORD *)(v71 + 8 * (v177 ^ 0x5A))) >> 32);
  v193 = *(_QWORD *)(v71 + 8 * (v183 ^ 0x5A));
  LODWORD(v183) = (((((*(_QWORD *)(v71 + 8 * (v181 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v181 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2018101000000000uLL)
                   + 0x585E180CAE4D1FF5) ^ *(_QWORD *)(v71 + 8 * (v181 ^ 0x5A))) >> 32) ^ (((((v192 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                                                                                             - ((2
                                                                                               * ((v192 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x939304000000)
                                                                                             - 0x24AEB63219EC17B7) ^ v192) >> 24) ^ (((((*(_QWORD *)(v71 + 8 * (v179 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v179 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00uLL)) ^ *(_QWORD *)(v71 + 8 * (v179 ^ 0x5A))) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v182 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v182 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x910144A0000uLL) + 0xA49C1E27D179) ^ *(_QWORD *)(v71 + 8 * (v182 ^ 0x5A))) >> 16);
  LODWORD(v183) = (v183 ^ 0x72734FA6) + 375497921 - 2 * ((v183 ^ 0x72734FA6) & 0x1661A4C9 ^ v183 & 8);
  v194 = *(_QWORD *)(v71 + 8 * (v184 ^ 0x5A));
  v535 = (((((*(_QWORD *)(v71 + 8 * (v190 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
          - ((2 * ((*(_QWORD *)(v71 + 8 * (v190 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x11407087200uLL)
          - 0x7330F41983B0635) ^ *(_QWORD *)(v71 + 8 * (v190 ^ 0x5A))) >> 8) ^ (((((v193 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                                                  - ((2
                                                                                    * ((v193 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2508190400000000)
                                                                                  - 0xC78617DC1127B8DLL) ^ v193) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v187 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v187 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x901507480000uLL) - 0x55AD07D56C1BB1E8) ^ *(_QWORD *)(v71 + 8 * (v187 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v188 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000) + 0x186B7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v188 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000uLL)) ^ *(_QWORD *)(v71 + 8 * (v188 ^ 0x5A))) >> 24);
  v195 = (v194 & 0xB4626E5C5DE9EB96 ^ 0xB062405C18A8E300) >> (v537 & 3) >> (v537 & 3 ^ 3);
  LODWORD(v194) = (((((*(_QWORD *)(v71 + 8 * (v186 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                   - ((2 * ((*(_QWORD *)(v71 + 8 * (v186 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x116130A1200uLL)
                   + 0x6899138F0DC74B4FLL) ^ *(_QWORD *)(v71 + 8 * (v186 ^ 0x5A))) >> 8) ^ (((v195
                                                                                            - ((2 * v195) & 0x8D59FE1641D404BCLL)
                                                                                            + 0x46ACFF0B20EA025ELL) ^ v194) >> 32) ^ (((((*(_QWORD *)(v71 + 8 * (v185 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v185 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000uLL)) ^ *(_QWORD *)(v71 + 8 * (v185 ^ 0x5A))) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v189 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v189 ^ 0x5A)) >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x138112000000uLL) - 0x41AED60F5238897CLL) ^ *(_QWORD *)(v71 + 8 * (v189 ^ 0x5A))) >> 24);
  v196 = (v532 ^ 0x88850832)
       - ((2 * (v532 ^ 0x88850832)) & 0xF894A0EC)
       + 0x38D45DB57C4A5076;
  LODWORD(v183) = ((v183 & 0xF18D822D ^ 0x41848004) + (v183 ^ 0xB46B072B)) ^ v183 & 0xF18D822D;
  v197 = (v183 ^ 0xB0090229)
       - (unint64_t)((2 * (v183 ^ 0xB0090229)) & 0x82F50E0)
       + 0xACDE4EA0417A870;
  v198 = (v194 ^ 0x9D747810)
       - ((2 * (v194 ^ 0x9D747810)) & 0xB85BCA50)
       - 0x6E060F10A3D21AD8;
  v199 = *(unsigned __int8 *)(v60 + (v183 ^ 0x29));
  v200 = *(unsigned __int8 *)(v60 + (v194 ^ 0x10));
  v201 = (v198 >> 24) ^ 0x91F9F0EF5CLL;
  v202 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v532 ^ 0x88850832)
                                                             - ((2 * (v532 ^ 0x88850832)) & 0xF894A0EC)
                                                             + 2085245046) >> 16) ^ 0x4ALL)) ^ 0x5ALL));
  v203 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v197 >> 24) ^ 0xACDE4EA04)) ^ 0x5ALL));
  v204 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v535 ^ 0xCEED)
                                                                               - ((2 * (v535 ^ 0xCEED)) & 0x8F6C)
                                                                               - 14410) >> 8) ^ 0xC7)) ^ 0x5ALL));
  LODWORD(v202) = (((((v203 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                   - ((2 * ((v203 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2810190200000000)
                   + 0x556BAEA18B5BDC2FLL) ^ v203) >> 32) ^ (((((v202 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                                                             - ((2
                                                               * ((v202 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x18988206000000)
                                                             + 0x3F2E4C55170523A0) ^ v202) >> 24) ^ (((((v204 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v204 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x183006A7A00) - 0x7ECD850A5B8AC2E8) ^ v204) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v200 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((*(_QWORD *)(v71 + 8 * (v200 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x189501420000uLL) + 0x2C5C2C7EF4E3E2E4) ^ *(_QWORD *)(v71 + 8 * (v200 ^ 0x5A))) >> 16);
  v205 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v535 ^ 0x4A77CEED)
                                                             - ((2 * (v535 ^ 0x4A77CEED)) & 0x64118F6C)
                                                             - 1308047434) >> 16) ^ 8)) ^ 0x5ALL));
  v206 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v194 ^ 0x7810)
                                                                               - ((2 * (v194 ^ 0x7810)) & 0xCA50)
                                                                               - 6872) >> 8) ^ 0xE5)) ^ 0x5ALL));
  v207 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v196 >> 24) ^ 0x38D45DB57CLL)) ^ 0x5ALL));
  v538 = (((((v205 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
          + 0x176B7608979B6F91
          - ((2 * ((v205 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v205) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v199 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7608979B6F91 - ((2 * ((*(_QWORD *)(v71 + 8 * (v199 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00uLL)) ^ *(_QWORD *)(v71 + 8 * (v199 ^ 0x5A))) >> 8) ^ (((((v206 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v206 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x108120006000000) - 0x7069D6DBEC5E0AACLL) ^ v206) >> 24) ^ (((((v207 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v207 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2800190200000000) - 0xB8E637AEB7C1AF5) ^ v207) >> 32);
  v208 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v535 ^ 0x4A77CEEDLL)
                                            - ((2 * (v535 ^ 0x4A77CEEDLL)) & 0x164118F6CuLL)
                                            - 0x61E3D2274DF7384ALL) >> 24) ^ 0x9E1C2DD8B2)) ^ 0x5ALL));
  v209 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v198) ^ 0x2DLL)) ^ 0x5ALL));
  v210 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v532 ^ 0x32)) ^ 0x5ALL));
  v211 = (((((v209 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
          + 0x176B7608979B6F91
          - ((2 * ((v209 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v209) >> 8) ^ (((((v208 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v208 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x29008A0600000000) - 0x36D08F89EB7C0F9) ^ v208) >> 32) ^ (((((v210 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v210 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x9387017A0000) + 0x362DDBE3A4FDBB38) ^ v210) >> 16);
  v212 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v197) ^ 0xA8)) ^ 0x5ALL));
  v533 = v211 ^ (((((v212 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                 + 0x186B7608979B6F91
                 - ((2 * ((v212 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v212) >> 24);
  v213 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + v201) ^ 0x5ALL));
  v214 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v196) ^ 0x50)) ^ 0x5ALL));
  LODWORD(v213) = (((((v214 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                   - ((2 * ((v214 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x118101604000000)
                   + 0x12EE183F720DA4E1) ^ v214) >> 24) ^ (((((v213 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                                                             + 0x176B7608979B6F91
                                                             - ((2 * ((v213 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v213) >> 16);
  v215 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v197) ^ 0x17)) ^ 0x5ALL));
  v216 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v535 ^ 0xEDLL)) ^ 0x5ALL));
  LODWORD(v215) = v213 ^ (((((v215 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                          + 0x176B7608979B6F91
                          - ((2 * ((v215 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v215) >> 32) ^ (((((v216 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v216 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x8602000200) - 0x2A8CA5ACFABD7C74) ^ v216) >> 8);
  v217 = (v215 ^ 0x8AEAD1)
       - 2 * ((v215 ^ 0x8AEAD1) & 0x208EDF2B ^ v215 & 2)
       + 0x1C743519208EDF29;
  v218 = (((v202 ^ 0x9DB3E3D3)
         - 2 * ((v202 ^ 0x9DB3E3D3) & 0xA6A7C66ELL ^ v202 & 4)
         - 0x2AF5144359583996) >> 24) ^ 0xD50AEBBCA6;
  v219 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v202 ^ 0xD3)) ^ 0x5ALL));
  v220 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v538 ^ 0xE508)
                                                                               - ((2 * (v538 ^ 0xE508)) & 0x592C)
                                                                               + 11414) >> 8) ^ 0x2CLL)) ^ 0x5ALL));
  v221 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v533 ^ 0xFB77)
                                                                               - ((2 * (v533 ^ 0xFB77)) & 0xA38C)
                                                                               - 11834) >> 8) ^ 0xD1)) ^ 0x5ALL));
  v222 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v215 ^ 0x8AEAD1)
                                                             - 2
                                                             * ((v215 ^ 0x8AEAD1) & 0x208EDF2B ^ v215 & 2)
                                                             + 546234153) >> 16) ^ 0x8ELL)) ^ 0x5ALL));
  v223 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v538 ^ 0x9616E508)
                                                             - ((2 * (v538 ^ 0x9616E508)) & 0xD9C4592C)
                                                             - 320721770) >> 16) ^ 0xE2)) ^ 0x5ALL));
  v224 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v533 ^ 0x8517FB77)
                                                             - ((2 * (v533 ^ 0x8517FB77)) & 0x8BB3A38C)
                                                             + 1171902918) >> 16) ^ 0xD9)) ^ 0x5ALL));
  LODWORD(v224) = (((((v224 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                   + 0x176B7608979B6F91
                   - ((2 * ((v224 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v224) >> 8) ^ (((((v223 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v223 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x8891600000000) + 0x115F4AB9EE162C0) ^ v223) >> 32);
  v225 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v217 >> 24) ^ 0x1C74351920)) ^ 0x5ALL));
  v226 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v202 ^ 0xE3D3)
                                                                               - 2
                                                                               * ((v202 ^ 0xE3D3) & 0xC66E ^ v202 & 4)
                                                                               - 14742) >> 8) ^ 0xC6)) ^ 0x5ALL));
  v227 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v533 ^ 0x8517FB77)
                                            - (unint64_t)((2 * (v533 ^ 0x8517FB77)) & 0x8BB3A38C)
                                            + 0x4251457E45D9D1C6) >> 24) ^ 0x4251457E45)) ^ 0x5ALL));
  v228 = v224 ^ (((((v225 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                 + 0x176C7608979B6F91
                 - ((2 * ((v225 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v225) >> 16) ^ (((((v226 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v226 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x110890212000000) - 0x45543B6E92F58D9FLL) ^ v226) >> 24);
  v229 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v215 ^ 0xD1)) ^ 0x5ALL));
  v230 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v202 ^ 0x9DB3E3D3)
                                                             - 2
                                                             * ((v202 ^ 0x9DB3E3D3) & 0xA6A7C66E ^ v202 & 4)
                                                             - 1498954134) >> 16) ^ 0xA7)) ^ 0x5ALL));
  v231 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v538 ^ 0x9616E508)
                                            - ((2 * (v538 ^ 0x9616E508)) & 0x1D9C4592CuLL)
                                            - 0x66A50FC0131DD36ALL) >> 24) ^ 0x995AF03FECLL)) ^ 0x5ALL));
  v232 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v217) ^ 0xDFLL)) ^ 0x5ALL));
  LODWORD(v99) = (((((v229 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                  + 0x176B7608979B6F91
                  - ((2 * ((v229 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v229) >> 8) ^ (((((v227 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((v227 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v227) >> 32) ^ (((((v230 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v230 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x100315680000) - 0x3D76F5FE150B485FLL) ^ v230) >> 16) ^ (((((v231 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000) + 0x186B7608979B6F91 - ((2 * ((v231 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v231) >> 24);
  v233 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + v218) ^ 0x5ALL));
  v234 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v538 ^ 8)) ^ 0x5ALL));
  v235 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v533 ^ 0x77)) ^ 0x5ALL));
  LODWORD(v232) = (((((v233 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                   - ((2 * ((v233 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x8881010000000)
                   + 0x20E6E43C48B1DAA8) ^ v233) >> 24) ^ (((((v232 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                                                             - ((2 * ((v232 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x180503020000)
                                                             - 0x31DBC3CD6E7EC0BDLL) ^ v232) >> 16) ^ (((((v234 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v234 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2910029600000000) - 0xB25CEA49619E987) ^ v234) >> 32) ^ (((((v235 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v235 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x8015004200) + 0x646A82E13ALL) ^ v235) >> 8);
  LODWORD(v232) = (v232 ^ 0xCAC7AC09) + 1340253664 + ((2 * v232) & 0x9FC54BBE ^ 0x6A7AB7ED);
  LODWORD(v231) = ((2 * v232) & 0xBF7A7DAC) + (v232 ^ 0x5FBD3ED6);
  v236 = (v231 - 1606237910)
       - (unint64_t)((2 * ((_DWORD)v231 - 1606237910)) & 0x53AF52A)
       + 0x20FC7FEC029D7A95;
  LODWORD(v219) = (((((v220 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v220 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v220) >> 32) ^ (((((v219 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v219 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x108931410000000) + 0x5AE4EBAE5C71AF03) ^ v219) >> 24) ^ (((((v221 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v221 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x19415620800) + 0x136056FE4AB10421) ^ v221) >> 8) ^ (((((v222 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v222 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x9B01012A0000) - 0x27F6006F3B28B58ELL) ^ v222) >> 16);
  v237 = (v219 ^ 0xE34BE042)
       - ((2 * (v219 ^ 0xE34BE042)) & 0x1194E468)
       + 0x73BBD0BE08CA7234;
  v238 = (v237 >> 24) ^ 0x73BBD0BE08;
  LODWORD(v221) = *(unsigned __int8 *)(v60
                                     + ((((v228 ^ 0xC8409B31)
                                                         - ((2 * (v228 ^ 0xC8409B31)) & 0xBAA9D600)
                                                         + 1565846272) >> 16) ^ 0x54));
  v239 = *(_QWORD *)(v71
                   + 8
                   * (((((((_DWORD)v221 - 2091006318 - ((2 * (_DWORD)v221) & 0x124)) ^ 0x7CA23916)
                       + (((_DWORD)v221 - 2091006318 - ((2 * (_DWORD)v221) & 0x124)) ^ 0x835DC692)
                       + 1) ^ 0xFFFFFFFE)
                     + (((_DWORD)v221 - 2091006318 - ((2 * (_DWORD)v221) & 0x124)) ^ 0x835DC692)) ^ 0x21));
  v240 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v219 ^ 0x42)) ^ 0x5ALL));
  v241 = (((((v239 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
          + 0x176B7608979B6F91
          - ((2 * ((v239 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v239) >> 24) ^ (((v240 >> 3) & 0x9C108800000 ^ v240 & 0xBBF52C800000 | (v240 >> 3) & 0x440A833D0000 ^ v240 & 0x440AD37F0000) >> 16);
  v242 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v99 ^ 0x267D)
                                                                               - ((2 * (v99 ^ 0x267D)) & 0xCB86)
                                                                               + 26051) >> 8) ^ 0x65)) ^ 0x5ALL));
  v243 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v236) ^ 0x9DLL)) ^ 0x5ALL));
  v244 = v241 ^ (((((v242 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                 - ((2 * ((v242 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x918880000000000)
                 + 0x6CCEE404F5CFAB52) ^ v242) >> 32);
  v245 = (((v243 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
        + 0x176B7708979B6F91
        - ((2 * ((v243 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v243;
  v246 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v228 ^ 0xC8409B31)
                                            - (unint64_t)((2 * (v228 ^ 0xC8409B31)) & 0xBAA9D600)
                                            + 0x18770F145D54EB00) >> 24) ^ 0x18770F145DLL)) ^ 0x5ALL));
  v536 = v244 ^ (v245 >> 8);
  v247 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v99 ^ 0x60F4267D)
                                                             - ((2 * (v99 ^ 0x60F4267D)) & 0x3778CB86)
                                                             - 1682151997) >> 16) ^ 0xBCLL)) ^ 0x5ALL));
  v248 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v236 >> 24) ^ 0x20FC7FEC02)) ^ 0x5ALL));
  v249 = (((((v247 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
          - ((2 * ((v247 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x109204220000)
          - 0xF6FD786DDECD1B2) ^ v247) >> 16) ^ (((((v246 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                                                   - ((2 * ((v246 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x106014A1200)
                                                   - 0x48E43968FB18B438) ^ v246) >> 8) ^ (((((v248 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                                                                                            + 0x186B7608979B6F91
                                                                                            - ((2
                                                                                              * ((v248 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v248) >> 24);
  v250 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v237) ^ 0x72)) ^ 0x5ALL));
  v251 = v249 ^ (((((v250 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                 - ((2 * ((v250 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x101A8600000000)
                 - 0x5EC5E09C1EBB8BAFLL) ^ v250) >> 32);
  v252 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v99 ^ 0x60F4267DLL)
                                            - ((2 * (v99 ^ 0x60F4267DLL)) & 0x13778CB86uLL)
                                            + 0x1350E9D09BBC65C3) >> 24) ^ 0x1350E9D09BLL)) ^ 0x5ALL));
  v253 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v231 + 42)) ^ 0x5ALL));
  v254 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v237) ^ 0xCALL)) ^ 0x5ALL));
  v255 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v228 ^ 0x31)) ^ 0x5ALL));
  v256 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v236) ^ 0x7ALL)) ^ 0x5ALL));
  v257 = (((((v253 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
          - ((2 * ((v253 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x109211100000)
          - 0x48CFC792C335FD92) ^ v253) >> 16) ^ (((((v252 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                                                    - ((2 * ((v252 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x1127A3A00)
                                                    + 0x74E12924897FDD89) ^ v252) >> 8) ^ (((((v254 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                                                                                             - ((2
                                                                                               * ((v254 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x8819104000000)
                                                                                             - 0x2BAA8F034DC4961BLL) ^ v254) >> 24) ^ (((((v255 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v255 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x28000B8600000000) - 0x4ACD581867DF634BLL) ^ v255) >> 32);
  v258 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + v238) ^ 0x5ALL));
  v259 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v228 ^ 0x9B31)
                                                                               - ((2 * (v228 ^ 0x9B31)) & 0xD600)
                                                                               - 5376) >> 8) ^ 0xEBLL)) ^ 0x5ALL));
  v260 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v99 ^ 0x7DLL)) ^ 0x5ALL));
  v261 = (((((v258 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
          - ((2 * ((v258 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x9A81024A0000)
          + 0x578F4F54B125E752) ^ v258) >> 16) ^ (((((v259 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                                                    - ((2 * ((v259 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x29710000000)
                                                    + 0x1334BF8A0C905) ^ v259) >> 24) ^ (((((v256 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                                                                                           + 0x176B7708979B6F91
                                                                                           - ((2
                                                                                             * ((v256 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v256) >> 8);
  v262 = ((((v260 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
         - ((2 * ((v260 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0xC089A9400000000)
         - 0x31CB908173D9EF3ALL) ^ v260) >> 32;
  LODWORD(v256) = (2 * (v262 & 0x800000)) ^ 0x1000000 | v262 & 0x800000;
  v263 = v256 + 2037268447;
  LODWORD(v254) = v256 - 0x800000;
  v264 = 2054045663 - v256;
  if ((v254 & (v261 ^ 0x7D000000)) == 0)
    v264 = v263;
  v265 = ((v261 ^ 0x7D429479) - 2045657055 + v264) ^ v262 & 0xFF7FFFFF;
  v266 = (v265 ^ 0x39E48289u) - (unint64_t)((2 * (v265 ^ 0x39E48289)) & 0x9A345768) - 0x45BC9780B2E5D44CLL;
  v267 = (v257 ^ 0x7741AAE8)
       - 2 * ((v257 ^ 0x7741AAE8) & 0x86D77ABFLL ^ v257 & 6)
       - 0x5215F6E779288547;
  v268 = (v267 >> 24) ^ 0xADEA091886;
  v269 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v536 ^ 0x371)
                                                                               - ((2 * (v536 ^ 0x371)) & 0x6804)
                                                                               - 19454) >> 8) ^ 0xB4)) ^ 0x5ALL));
  v270 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v251 ^ 0xFB5)
                                                                               - ((2 * (v251 ^ 0xFB5)) & 0xDEBC)
                                                                               - 4258) >> 8) ^ 0xEFLL)) ^ 0x5ALL));
  v271 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v257 ^ 0xE8)) ^ 0x5ALL));
  v272 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v266 >> 24) ^ 0xBA43687F4DLL)) ^ 0x5ALL));
  v534 = (((((v270 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
          + 0x176B7608979B6F91
          - ((2 * ((v270 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v270) >> 24) ^ (((((v269 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v269 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x29302720000) - 0x16187C823A846853) ^ v269) >> 16) ^ (((((v271 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v271 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2508918000000000) + 0x7BD55AF49E740267) ^ v271) >> 32) ^ (((((v272 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((v272 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v272) >> 8);
  v273 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v251 ^ 0xF5810FB5)
                                                             - ((2 * (v251 ^ 0xF5810FB5)) & 0x97B1DEBC)
                                                             - 874975394) >> 16) ^ 0xD8)) ^ 0x5ALL));
  v274 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v267) ^ 0x7ALL)) ^ 0x5ALL));
  v275 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v265 ^ 0x89)) ^ 0x5ALL));
  v276 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v536 ^ 0xE8160371)
                                                             - ((2 * (v536 ^ 0xE8160371)) & 0xECCD6804)
                                                             - 161041406) >> 16) ^ 0x66)) ^ 0x5ALL));
  LODWORD(v275) = (((((v274 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v274 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v274) >> 24) ^ (((((v273 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176B7608979B6F91 - ((2 * ((v273 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v273) >> 16) ^ (((((v275 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v275 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x9189A0600000000) - 0x322232F855FF6EBBLL) ^ v275) >> 32) ^ (((((v276 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((v276 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v276) >> 8);
  v277 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v267) ^ 0xD7)) ^ 0x5ALL));
  v278 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v266) ^ 0x2BLL)) ^ 0x5ALL));
  v279 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v536 ^ 0xE8160371)
                                            - ((2 * (v536 ^ 0xE8160371)) & 0x1ECCD6804uLL)
                                            + 0x67C98986F666B402) >> 24) ^ 0x67C98986F6)) ^ 0x5ALL));
  v280 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v251 ^ 0xF5810FB5)
                                            - ((2 * (v251 ^ 0xF5810FB5)) & 0x197B1DEBCuLL)
                                            + 0x74A8C086CBD8EF5ELL) >> 24) ^ 0x74A8C086CBLL)) ^ 0x5ALL));
  v281 = (((((v278 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
          + 0x176B7608979B6F91
          - ((2 * ((v278 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v278) >> 32) ^ (((((v277 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v277 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x8121110000000) - 0x508B74F72321F28BLL) ^ v277) >> 24) ^ (((((v279 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v279 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x1100386200) - 0x4D3ABBF73BA34CDELL) ^ v279) >> 8) ^ (((((v280 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v280 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x1A0305120000) + 0x374E1F2192CBDA08) ^ v280) >> 16);
  v282 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v266) ^ 0x1ALL)) ^ 0x5ALL));
  v283 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v536 ^ 0x71)) ^ 0x5ALL));
  v284 = ((v283 ^ 0x799BE20E5510CD7) - 0x10F2C82872CA6346) ^ ((v283 ^ 0xE89489F76864906ELL) + 1);
  v285 = (v284 + 0x176B7608979B6F91 - ((2 * v284) & 0x2ED6EC112F36DF22)) ^ v283;
  v286 = v285 - ((2 * v285 - 0x21E59050E594C68ELL) & 0xE5857DDD917CC134) + 0x61CFF6C655F3FD53;
  v287 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v251 ^ 0xB5)) ^ 0x5ALL));
  LODWORD(v286) = (((((v286 >> 3) & 0x8C4DCB8B000000 ^ 0x845C989000000)
                   - ((2 * ((v286 >> 3) & 0x8C4DCB8B000000 ^ 0x845C989000000)) & 0x199510000000)
                   + 0xC2BEEEC8BE609ALL) ^ v286) >> 24) ^ (((((v282 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                                                           - ((2 * ((v282 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x18705480000)
                                                           + 0xC796E6E134) ^ v282) >> 16);
  v288 = ((((v287 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
         - ((2 * ((v287 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0xD00110400000000)
         - 0x192C455D9F1AC961) ^ v287) >> 32;
  LODWORD(v282) = v288 ^ 0x7F5B3FF0 ^ v286;
  LODWORD(v286) = v286 ^ 0x17E5992D;
  LODWORD(v282) = (v282 + v286 + 1) ^ ((v288 ^ 0x68BEA6DD) + 1);
  v289 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + v268) ^ 0x5ALL));
  LODWORD(v284) = ((v288 ^ 0x96E0A15B ^ (v282 - ((2 * v282) & 0x343F0F2) + 27392121)) + v286) ^ (((((v289 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                                                                                                 - ((2 * ((v289 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)
                                                                                                 + 0x8979B6F91) ^ v289) >> 8);
  v290 = (v284 ^ 0x14D29AC8)
       - ((2 * (v284 ^ 0x14D29AC8)) & 0x1F4528AA4)
       + 0x78573E2CFA294552;
  v291 = (v275 ^ 0x36A44FC3)
       - ((2 * (v275 ^ 0x36A44FC3)) & 0xC4D19F28)
       - 0x2A28CD6F9D97306CLL;
  v292 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v534 ^ 0x4C67)
                                                                               - ((2 * (v534 ^ 0x4C67)) & 0x7E4)
                                                                               + 1010) >> 8) ^ 3)) ^ 0x5ALL));
  v293 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v275 ^ 0xC3)) ^ 0x5ALL));
  v294 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v281 ^ 0x841CE7F4)
                                                             - ((2 * (v281 ^ 0x841CE7F4)) & 0xAF676FD4)
                                                             + 1471395818) >> 16) ^ 0xB3)) ^ 0x5ALL));
  v295 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v290) ^ 0x29)) ^ 0x5ALL));
  LODWORD(v292) = (((((v293 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                   - ((2 * ((v293 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x1180B0706000000)
                   + 0x598F35B7F38A43C8) ^ v293) >> 24) ^ (((((v292 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                                                             - ((2 * ((v292 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x8B07136A0000)
                                                             + 0x703D75B3A9F79E7ELL) ^ v292) >> 16);
  v296 = (((v295 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
        - ((2 * ((v295 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x107174A7A00)
        + 0x5C332FA3AFE5BF8CLL) ^ v295;
  v297 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v291) ^ 0xCFLL)) ^ 0x5ALL));
  v298 = v292 ^ (((((v294 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                 + 0x176B7608979B6F91
                 - ((2 * ((v294 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v294) >> 32) ^ (v296 >> 8);
  v299 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v281 ^ 0x841CE7F4)
                                            - (unint64_t)((2 * (v281 ^ 0x841CE7F4)) & 0xAF676FD4)
                                            - 0x61127E0BA84C4816) >> 24) ^ 0x9EED81F457)) ^ 0x5ALL));
  v300 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v290 >> 24) ^ 0x78573E2CFALL)) ^ 0x5ALL));
  v301 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v534 ^ 0x1304C67)
                                                             - ((2 * (v534 ^ 0x1304C67)) & 0x27FA07E4)
                                                             + 335348722) >> 16) ^ 0xFDLL)) ^ 0x5ALL));
  v302 = ((((v300 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
         - ((2 * ((v300 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x1404183A00)
         + 0x13E060C1FA9) ^ v300) >> 8;
  LODWORD(v301) = (((((v299 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v299 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v299) >> 32) ^ (((((v297 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v297 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x100B1306000000) + 0x57D98599F323F187) ^ v297) >> 24) ^ 0xBFC446E9 ^ ((v301 ^ 0xD76DB3FB76491B50 ^ (((v301 >> 3) & 0x168C4DCB8BBD3D72 ^ 0x160C480B83151C60) - 2 * (((v301 >> 3) & 0x168C4DCB8BBD3D72 ^ 0x160C480B83151C60) & 0x68C404B02883030 ^ (v301 >> 3) & 0x10) - 0x5900AF84D937CF54)) >> (v302 & 0x10 ^ 0x10) >> (v302 & 0x10));
  v303 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v281 ^ 0xF4)) ^ 0x5ALL));
  v304 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v284 ^ 0xC8)) ^ 0x5ALL));
  LODWORD(v303) = (((((v304 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v304 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v304) >> 32) ^ (((((v303 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v303 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x18020606000000) + 0x501D8337739DDC27) ^ v303) >> 24);
  v305 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v534 ^ 0x1304C67)
                                            - (unint64_t)((2 * (v534 ^ 0x1304C67)) & 0x27FA07E4)
                                            + 0x224A03CA13FD03F2) >> 24) ^ 0x224A03CA13)) ^ 0x5ALL));
  LODWORD(v303) = v303 ^ (((((v305 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                          - ((2 * ((v305 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x10012386A00)
                          - 0x5536B75FC2A38A06) ^ v305) >> 8);
  v306 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v291) ^ 0x68)) ^ 0x5ALL));
  LODWORD(v306) = v303 ^ (((((v306 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                          + 0x1F6DA1D3BCEDLL
                          + (~(2 * ((v306 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) | 0xFFFFE56CFCDDFFFFLL)) ^ v306) >> 16);
  v307 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v290) ^ 0x45)) ^ 0x5ALL));
  v308 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v534 ^ 0x67)) ^ 0x5ALL));
  v309 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v291 >> 24) ^ 0xD5D7329062)) ^ 0x5ALL));
  v310 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v281 ^ 0xE7F4)
                                                                               - ((2 * (v281 ^ 0xE7F4)) & 0x6FD4)
                                                                               - 18454) >> 8) ^ 0xB7)) ^ 0x5ALL));
  LODWORD(v307) = (((((v308 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                   - ((2 * ((v308 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x808008600000000)
                   - 0x5A98ED885E407AD2) ^ v308) >> 32) ^ (((((v307 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                                                             - ((2
                                                               * ((v307 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x18188506000000)
                                                             - 0x7EB3E1A9187BB2F5) ^ v307) >> 24) ^ (((((v309 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v309 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x8203323000) + 0x66CC997115999A8CLL) ^ v309) >> 8) ^ (((((v310 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v310 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x80304300000) - 0x8E85BCA69A74EDCLL) ^ v310) >> 16);
  LODWORD(v308) = (v301 - ((2 * v301) & 0xC5B97E88) - 488849596) ^ v302;
  v311 = (v308 ^ 0xF1A2887F)
       - ((2 * (v308 ^ 0xF1A2887F)) & 0x120EB7780)
       - 0x2559BC366F8A4440;
  v312 = (v306 ^ 0x5FD6AF93)
       - ((2 * (v306 ^ 0x5FD6AF93)) & 0x8CC582E2)
       + 0xDCE0A154662C171;
  v313 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v298 ^ 0xDBF4)
                                                                               - ((2 * (v298 ^ 0xDBF4)) & 0x2684)
                                                                               + 4930) >> 8) ^ 0x13)) ^ 0x5ALL));
  v314 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v311 >> 24) ^ 0xDAA643C990)) ^ 0x5ALL));
  LODWORD(v314) = (((((v314 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v314 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v314) >> 16) ^ (((((v313 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v313 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x19704285000) - 0x50072C306DEB1761) ^ v313) >> 8);
  v315 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v306 ^ 0x5FD6AF93)
                                                             - ((2 * (v306 ^ 0x5FD6AF93)) & 0x8CC582E2)
                                                             + 1180877169) >> 16) ^ 0x62)) ^ 0x5ALL));
  LODWORD(v314) = v314 ^ (((((v315 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                          - ((2 * ((v315 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x1181B8106000000)
                          - 0x3931401B083463B6) ^ v315) >> 24);
  v316 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v307 ^ 0xCD15)
                                                                               - ((2 * (v307 ^ 0xCD15)) & 0x44C8)
                                                                               + 8804) >> 8) ^ 0x22)) ^ 0x5ALL));
  v317 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v308 ^ 0x7FLL)) ^ 0x5ALL));
  LODWORD(v314) = v314 ^ (((((v316 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                          - ((2 * ((v316 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x1081A8600000000)
                          - 0x177862880CB10417) ^ v316) >> 32);
  v318 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v312 >> 24) ^ 0xDCE0A1546)) ^ 0x5ALL));
  v319 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v307 ^ 0xD066CD15)
                                                             - ((2 * (v307 ^ 0xD066CD15)) & 0xB4BC44C8)
                                                             - 631365020) >> 16) ^ 0x5ELL)) ^ 0x5ALL));
  LODWORD(v317) = (((((v318 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                   - ((2 * ((v318 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x19514500000)
                   + 0x24C190FEEA2A25DFLL) ^ v318) >> 16) ^ (((((v317 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                                                             - ((2 * ((v317 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x11715304200)
                                                             - 0x24759D641525DC9ELL) ^ v317) >> 8) ^ (((((v319 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000) + 0x186B7608979B6F91 - ((2 * ((v319 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v319) >> 24);
  v320 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v298 ^ 0xB255DBF4)
                                                             - ((2 * (v298 ^ 0xB255DBF4)) & 0xECBC2684)
                                                             - 161606846) >> 16) ^ 0x5ELL)) ^ 0x5ALL));
  v321 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v306 ^ 0x93)) ^ 0x5ALL));
  LODWORD(v317) = v317 ^ (((((v320 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                          + 0xA323FC229FCF7ECLL
                          + (~(2 * ((v320 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) | 0xFBFFE47BFFFFFFFFLL)) ^ v320) >> 32);
  v322 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v307 ^ 0xD066CD15)
                                            - ((2 * (v307 ^ 0xD066CD15)) & 0x1B4BC44C8uLL)
                                            + 0x21DA5C20DA5E2264) >> 24) ^ 0x21DA5C20DALL)) ^ 0x5ALL));
  LODWORD(v321) = (((((v321 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v321 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v321) >> 16) ^ (((v322 >> 3) & 0x8C4DCB8B000000 ^ v322 & 0xFFFFFFFF000000) >> 24);
  v323 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v298 ^ 0xB255DBF4)
                                            - ((2 * (v298 ^ 0xB255DBF4)) & 0x1ECBC2684uLL)
                                            + 0x2F175C0EF65E1342) >> 24) ^ 0x2F175C0EF6)) ^ 0x5ALL));
  LODWORD(v321) = v321 ^ (((((v323 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                          - ((2 * ((v323 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x28009B0000000000)
                          + 0x1511EFA4F3C67CA8) ^ v323) >> 32);
  v324 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v311) ^ 0xBBLL)) ^ 0x5ALL));
  LODWORD(v321) = v321 ^ (((((v324 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                          + 0x176B7708979B6F91
                          - ((2 * ((v324 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v324) >> 8);
  v325 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v307 ^ 0x15)) ^ 0x5ALL));
  v326 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v298 ^ 0xF4)) ^ 0x5ALL));
  v327 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v311) ^ 0x75)) ^ 0x5ALL));
  v328 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v312) ^ 0xC1)) ^ 0x5ALL));
  LODWORD(v324) = (((((v326 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                   - ((2 * ((v326 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x8920006000000)
                   + 0x6A555930533156BCLL) ^ v326) >> 24) ^ (((((v325 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                                                             - ((2 * ((v325 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x9106174A0000)
                                                             + 0x4B795A972FA71E2DLL) ^ v325) >> 16) ^ (((((v327 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((v327 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v327) >> 32) ^ (((((v328 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v328 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x19601425000) - 0x744F9030DB5E97F2) ^ v328) >> 8);
  v329 = (v321 ^ 0x478C8548)
       - ((2 * (v321 ^ 0x478C8548)) & 0x906D05CA)
       + 0x52FEE543483682E5;
  v330 = (v324 ^ 0x749FF35ALL)
       - ((2 * (v324 ^ 0x749FF35ALL)) & 0x1E24D6848)
       + 0x53C9A541F126B424;
  v331 = (v314 ^ 0xBEB5EE4CLL)
       - ((2 * (v314 ^ 0xBEB5EE4CLL)) & 0x17A64B7FCLL)
       - 0x654D10642CDA402;
  v332 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v314 ^ 0xBEB5EE4C)
                                                             - ((2 * (v314 ^ 0xBEB5EE4C)) & 0x7A64B7FC)
                                                             - 1120773122) >> 16) ^ 0x32)) ^ 0x5ALL));
  v333 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + (((unsigned __int16)((v317 ^ 0xC2B8)
                                                                               - ((2 * (v317 ^ 0xC2B8)) & 0x50FA)
                                                                               - 22403) >> 8) ^ 0xA8)) ^ 0x5ALL));
  v334 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v329 >> 24) ^ 0x52FEE54348)) ^ 0x5ALL));
  LODWORD(v270) = *(unsigned __int8 *)(v60
                                     + ((((v324 ^ 0x749FF35A)
                                                         - ((2 * (v324 ^ 0x749FF35A)) & 0xE24D6848)
                                                         - 249121756) >> 16) ^ 0x26));
  LODWORD(v294) = v270 + 1101698091 - ((2 * v270) & 0x56);
  LODWORD(v270) = ((v294 ^ 0xBE556BD4) + 1) ^ (123 - (v270 ^ 0x7B));
  LODWORD(v334) = (((((v333 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                   + 0x176B7608979B6F91
                   - ((2 * ((v333 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v333) >> 8) ^ (((((v332 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v332 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x800000000000000) + 0x423A210F9FE6EB6) ^ v332) >> 32) ^ (((((v334 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v334 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x139717500000) + 0x72C519FBFFA8DA41) ^ v334) >> 16);
  v335 = *(_QWORD *)(v71
                   + 8
                   * (((((_DWORD)v270 + 1101698091 - ((2 * (_DWORD)v270) & 0x83552856)) ^ v294) + 123) ^ 0x21));
  LODWORD(v334) = v334 ^ (((((v335 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                          - ((2 * ((v335 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x1101A1616000000)
                          + 0x50BABD0B1F95EF91) ^ v335) >> 24);
  v336 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v317 ^ 0xF795C2B8)
                                                             - ((2 * (v317 ^ 0xF795C2B8)) & 0x62DF50FA)
                                                             + 829401213) >> 16) ^ 0x6FLL)) ^ 0x5ALL));
  v337 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v321 ^ 0x48)) ^ 0x5ALL));
  v338 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v330 >> 24) ^ 0x53C9A541F1)) ^ 0x5ALL));
  LODWORD(v338) = (((((v337 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                   + 0x176B7608979B6F91
                   - ((2 * ((v337 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v337) >> 8) ^ (((((v336 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((v336 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v336) >> 32) ^ (((((v338 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v338 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x39212020000) - 0x3180CE22C2FC92A7) ^ v338) >> 16);
  v339 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + ((v331 >> 24) ^ 0xF9AB2EF9BDLL)) ^ 0x5ALL));
  LODWORD(v338) = v338 ^ (((((v339 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                          - ((2 * ((v339 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x108938002000000)
                          + 0x2994EBE0412457F9) ^ v339) >> 24);
  v340 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v329) ^ 0x82)) ^ 0x5ALL));
  v341 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v324 ^ 0x5ALL)) ^ 0x5ALL));
  v342 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v314 ^ 0x4CLL)) ^ 0x5ALL));
  LODWORD(v342) = (((((v341 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v341 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v341) >> 24) ^ (((((v340 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v340 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x911102520000) + 0x2311DA9CC52B44F1) ^ v340) >> 16) ^ (((((v342 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000) - ((2 * ((v342 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0xC08838400000000) - 0x18DA8E3D8FD580DALL) ^ v342) >> 32);
  v343 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(v60
                                         + ((((v317 ^ 0xF795C2B8)
                                            - (unint64_t)((2 * (v317 ^ 0xF795C2B8)) & 0x62DF50FA)
                                            + 0x43B53504316FA87DLL) >> 24) ^ 0x43B5350431)) ^ 0x5ALL));
  v344 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE1(v330) ^ 0xB4)) ^ 0x5ALL));
  v345 = *(unsigned __int8 *)(v60 + (BYTE1(v331) ^ 0x5BLL));
  LODWORD(v331) = v342 ^ (((((v343 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                          - ((2 * ((v343 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x11013682A00)
                          - 0x571B8E67B249AABCLL) ^ v343) >> 8);
  v346 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (v317 ^ 0xB8)) ^ 0x5ALL));
  v347 = ((2 * v346) & 0xDE1A6FAF1A6B3972 ^ 0xF1ED93FEF5DDE6DDLL) + (v346 ^ 0x176B7608979B6F91);
  v348 = v347 - ((2 * v347 + 0x5E1A6FAF1A6B3974) & 0x58A1CD40D2BC55FELL) - 0x64A1E188096C3847;
  v349 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(v60 + (BYTE2(v329) ^ 0x36)) ^ 0x5ALL));
  v350 = (((((*(_QWORD *)(v71 + 8 * (v345 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
          - ((2 * ((*(_QWORD *)(v71 + 8 * (v345 ^ 0x5A)) >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x138606680000uLL)
          - 0x700AD61C8C8B9A9BLL) ^ *(_QWORD *)(v71 + 8 * (v345 ^ 0x5A))) >> 16) ^ (((((v344 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                                                                                    - ((2
                                                                                      * ((v344 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x191024A7200)
                                                                                    + 0x5F8B81ECA527F9B6) ^ v344) >> 8) ^ (((((v349 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((v349 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v349) >> 32) ^ (((((v348 >> 3) & 0x8C4DCB8B000000 ^ 0x880CC009000000) - ((2 * ((v348 >> 3) & 0x8C4DCB8B000000 ^ 0x880CC009000000)) & 0x890012000000) - 0x53AF195F96A1D501) ^ v348) >> 24);
  v351 = (v334 ^ 0xEEC80A83)
       - ((2 * (v334 ^ 0xEEC80A83)) & 0x14BBCD274)
       + 0x7710CEDAA5DE693ALL;
  v352 = (v331 ^ 0x693F8B78)
       - ((2 * (v331 ^ 0x693F8B78)) & 0x1670564E)
       + 0x3A42D4850B382B27;
  v353 = (v338 ^ 0xADE69AF7)
       - ((2 * (v338 ^ 0xADE69AF7)) & 0x1AC46C9C)
       - 0x741C64B9F29DC9B2;
  v354 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + ((v351 >> 24) ^ 0x7710CEDAA5)) ^ 0x5ALL));
  v355 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v338 ^ 0xADE69AF7)
                                                             - ((2 * (v338 ^ 0xADE69AF7)) & 0x1AC46C9C)
                                                             + 224540238) >> 16) ^ 0x62)) ^ 0x5ALL));
  v356 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + ((v352 >> 24) ^ 0x3A42D4850BLL)) ^ 0x5ALL));
  LODWORD(v356) = (((((v355 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                   - ((2 * ((v355 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x1201525800)
                   + 0x46DF622D04EBAC21) ^ v355) >> 8) ^ (((((v354 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                            - ((2
                                                              * ((v354 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2510029400000000)
                                                            - 0x6575FC9500EBEA05) ^ v354) >> 32) ^ (((((v356 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((v356 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v356) >> 16);
  v357 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE3(v350) ^ 0x4BLL)) ^ 0x5ALL));
  v358 = v356 ^ (((((v357 >> 3) & 0x8B000000 ^ 0x2000000)
                 - 1751421039
                 - ((2 * ((v357 >> 3) & 0x8B000000 ^ 0x2000000)) & 0x6000000)) ^ v357) >> 24);
  v359 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + ((v353 >> 24) ^ 0x8BE39B460DLL)) ^ 0x5ALL));
  v360 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v331 ^ 0x78)) ^ 0x5ALL));
  v361 = (((((v360 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
          - 0x711BB90FFB9923DFLL
          + (~(2 * ((v360 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) | 0xFEF7767FFFFFFFFFLL)) ^ v360) >> 24) ^ (((((v359 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v359 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x80201180000) + 0x33288411208E8C47) ^ v359) >> 16);
  v362 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v350 ^ 0x2BLL)) ^ 0x5ALL));
  v363 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v334 ^ 0x83)) ^ 0x5ALL));
  v364 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v352) ^ 0x2BLL)) ^ 0x5ALL));
  v365 = v361 ^ (((((v362 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                 - ((2 * ((v362 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0xD089A9000000000)
                 - 0x317A90934746AF05) ^ v362) >> 32) ^ (((((v363 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                                                           + 0x176B7708979B6F91
                                                           - ((2 * ((v363 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v363) >> 8);
  v366 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v350) ^ 0x15)) ^ 0x5ALL));
  v367 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v351) ^ 0x69)) ^ 0x5ALL));
  v368 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v338 ^ 0xF7)) ^ 0x5ALL));
  LODWORD(v366) = (((((v366 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                   + 0x176B7608979B6F91
                   - ((2 * ((v366 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v366) >> 32) ^ (((((v364 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000) - ((2 * ((v364 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x108990314000000) + 0x3CA4DCB5CA2081A0) ^ v364) >> 24) ^ (((((v367 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00) + 0x176B7708979B6F91 - ((2 * ((v367 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v367) >> 8) ^ (((((v368 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000) + 0x176C7608979B6F91 - ((2 * ((v368 >> 3) & 0x4DCB8BBD0000 ^ 0x4CC102B10000)) & 0x881107320000)) ^ v368) >> 16);
  v369 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v350) ^ 0x3CLL)) ^ 0x5ALL));
  v370 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v351) ^ 0xDELL)) ^ 0x5ALL));
  v371 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v353) ^ 0x36)) ^ 0x5ALL));
  LODWORD(v371) = (((((v370 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)
                   + 0x176B7608979B6F91
                   - ((2 * ((v370 >> 3) & 0xCB8BBD3D00 ^ 0xC102B12D00)) & 0x1107325A00)) ^ v370) >> 8) ^ (((((v369 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000) + 0x176B7608979B6F91 - ((2 * ((v369 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v369) >> 32) ^ (((((v371 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - 0x2526644836303ADBLL + (~(2 * ((v371 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) | 0xFFFFECF8ECE5FFFFLL)) ^ v371) >> 16);
  v372 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v352) ^ 0x38)) ^ 0x5ALL));
  v373 = v356 ^ (((((v357 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                                             + 0x186B7608979B6F91
                                             - ((2 * ((v357 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v357) >> 24) ^ 0x3498B316;
  v374 = v373 + 0x4DEEAC3B222F757BLL + (~(2 * v373) | 0xFFFFFFFFBBA1150BLL);
  LODWORD(v372) = v371 ^ (((((v372 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                          + 0x186B7608979B6F91
                          - ((2 * ((v372 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v372) >> 24);
  v375 = (v366 ^ 0x6E8F4526)
       - ((2 * (v366 ^ 0x6E8F4526)) & 0x430952FA)
       - 0x744C44ACDE7B5683;
  v376 = (v365 ^ 0x815959DCLL)
       - ((2 * (v365 ^ 0x815959DCLL)) & 0x196DA38F8)
       + 0xE1954C4CB6D1C7CLL;
  v377 = (v376 >> 24) ^ 0xE1954C4CBLL;
  v378 = (v372 ^ 0x74E8304)
       - ((2 * (v372 ^ 0x74E8304)) & 0x1BBCFBC46)
       - 0x7D96F292221821DDLL;
  v379 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + ((v374 >> 24) ^ 0x4DEEAC3B22)) ^ 0x5ALL));
  v380 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v365 ^ 0xDCLL)) ^ 0x5ALL));
  v381 = *(_QWORD *)(v71
                   + 8
                   * (*(unsigned __int8 *)(a12
                                         + ((((v366 ^ 0x6E8F4526)
                                                             - ((2 * (v366 ^ 0x6E8F4526)) & 0x430952FA)
                                                             + 562342269) >> 16) ^ 0x84)) ^ 0x5ALL));
  v382 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v372 ^ 4)) ^ 0x5ALL));
  v383 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v365) ^ 0x59)) ^ 0x5ALL));
  v384 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + ((v375 >> 24) ^ 0x8BB3BB5321)) ^ 0x5ALL));
  v385 = (((((v384 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
          - ((2 * ((v384 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x3001A3200)
          - 0x301A4FDE7BF0E676) ^ v384) >> 8) ^ (((((v383 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)
                                                   + 0x176B7608979B6F91
                                                   - ((2 * ((v383 >> 3) & 0x168C4DCB00000000 ^ 0x28C4CC100000000)) & 0x2C10881000000000)) ^ v383) >> 32);
  v386 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v378) ^ 0xDELL)) ^ 0x5ALL));
  v387 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (v358 ^ 0x16)) ^ 0x5ALL));
  v388 = *(unsigned __int8 *)(a12 + (v366 ^ 0x26));
  v529 = v385 ^ (((((v386 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                 - ((2 * ((v386 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x188506400000)
                 + 0x63FBBC469320761ALL) ^ v386) >> 16) ^ (((((v387 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                                                           + 0x186B7608979B6F91
                                                           - ((2
                                                             * ((v387 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v387) >> 24);
  v389 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v378) ^ 0xE7)) ^ 0x5ALL));
  v390 = (((((v389 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
          - ((2 * ((v389 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x8715382A00)
          + 0x80D8D67AEDC57D7) ^ v389) >> 8) ^ (((((*(_QWORD *)(v71 + 8 * (v388 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                  - ((2
                                                    * ((*(_QWORD *)(v71 + 8 * (v388 ^ 0x5A)) >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2D18199000000000uLL)
                                                  + 0x1EBC0ECCD7CCB418) ^ *(_QWORD *)(v71 + 8 * (v388 ^ 0x5A))) >> 32);
  v391 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v374) ^ 0x75)) ^ 0x5ALL));
  v392 = v390 ^ (((((v391 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
                 - ((2 * ((v391 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x18113720000)
                 - 0xBC1FD1B364691D3) ^ v391) >> 16);
  v393 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v376) ^ 0x6DLL)) ^ 0x5ALL));
  v394 = *(unsigned __int8 *)(a12 + ((v378 >> 24) ^ 0x82690D6DDDLL));
  v531 = v392 ^ (((((v393 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                 - ((2 * ((v393 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x118011002000000)
                 + 0x318CA28C1588286ALL) ^ v393) >> 24);
  v395 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE2(v374) ^ 0x2FLL)) ^ 0x5ALL));
  v396 = (((((v395 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)
          - ((2 * ((v395 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0xA9611480000)
          - 0x4ECF5AA4C35BC4B2) ^ v395) >> 16) ^ (((((*(_QWORD *)(v71 + 8 * (v394 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)
                                                    - ((2
                                                      * ((*(_QWORD *)(v71 + 8 * (v394 ^ 0x5A)) >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x19301002000uLL)
                                                    - 0x715071263B7DADBBLL) ^ *(_QWORD *)(v71 + 8 * (v394 ^ 0x5A))) >> 8);
  v397 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + v377) ^ 0x5ALL));
  v398 = v396 ^ (((((v397 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)
                 - ((2 * ((v397 >> 3) & 0x8C4DCB8B000000 ^ 0xC480B83000000)) & 0x81A0506000000)
                 - 0x1B9852F908829B6FLL) ^ v397) >> 24);
  v399 = *(_QWORD *)(v71 + 8 * (*(unsigned __int8 *)(a12 + (BYTE1(v375) ^ 0xA9)) ^ 0x5ALL));
  v400 = __ROR8__(a57- 0x661968C5C7741966- ((2 * (a57 - 0x661968C5C7741966)) & 0xE677A241D01B1CC8)+ 0x733BD120E80D8E64, 8);
  v401 = (v400 & 0xF8FFFFFFFFFFFFFFLL ^ 0x60733BD120E80D8ELL)
       - ((2 * (v400 & 0xF8FFFFFFFFFFFFFFLL ^ 0x60733BD120E80D8ELL) + 0x6626F38BA604E72CLL) & 0xF6E27C0761E8A7F4)
       - 0x517B48367C093870;
  *((_QWORD *)&v402 + 1) = ((v400 ^ 0x20E80D8E)
                          - ((2 * (v400 ^ 0x20E80D8E) - 1509628116) & 0x61E8A7F4)
                          - 2080979056) ^ 0x23;
  *(_QWORD *)&v402 = v401 ^ 0xA7218D9DD6BE3F00;
  v530 = v398 ^ (((((v399 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                 - ((2 * ((v399 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x2508090600000000)
                 + 0x7BF516976175E067) ^ v399) >> 32);
  v403 = (v402 >> 8) + 0x63045ACD03A2FE4ELL - ((2 * (v402 >> 8)) & 0xC608B59A0745FC9CLL);
  v404 = (v401 ^ 0x5CBE197E4D0F5DDCLL ^ v403) + 2 * ((v403 ^ 0x63045ACD03A2FE4ELL) & (v401 ^ 0x3FBA43B34EADA392));
  *((_QWORD *)&v402 + 1) = v401 ^ 0x1FBA43B34EADA392;
  *(_QWORD *)&v402 = v401 ^ 0x2000000000000000;
  v405 = v402 >> 61;
  v406 = v404 - 0x37086691B00887A6 - ((2 * v404) & 0x91EF32DC9FEEF0B4);
  *((_QWORD *)&v402 + 1) = v406 ^ 0x8B;
  *(_QWORD *)&v402 = v406 ^ 0x1B23291B5EC3AE00;
  v407 = v402 >> 8;
  v408 = v406 ^ (v405 - 0x37086691B00887A6 - ((2 * v405) & 0x91EF32DC9FEEF0B4));
  *((_QWORD *)&v402 + 1) = v408 ^ 0x13D4B0751134D6D1;
  *(_QWORD *)&v402 = v408 ^ 0xC000000000000000;
  v409 = v402 >> 61;
  v410 = v407 + (v408 ^ 0xD3D4B0751134D6D1);
  *((_QWORD *)&v402 + 1) = v410 ^ 0xE;
  *(_QWORD *)&v402 = v410 ^ 0x6DA382091EFE8800;
  v411 = v402 >> 8;
  v525 = (((v530 ^ 0x32D01C3BLL)
         - (unint64_t)((2 * (v530 ^ 0x32D01C3B)) & 0xD55225C8)
         + 0x37B696026AA912E4) >> 24) ^ 0x37B696026ALL;
  v412 = v410 ^ v409;
  *((_QWORD *)&v402 + 1) = v412 ^ 0xDA382091EFE880ELL;
  *(_QWORD *)&v402 = v412 ^ 0x6000000000000000;
  v413 = v402 >> 61;
  v414 = (v412 ^ 0x6DA382091EFE880ELL) + v411;
  *((_QWORD *)&v402 + 1) = v414 ^ 0x3D;
  *(_QWORD *)&v402 = v414 ^ 0x838A98423761A000;
  v415 = v414 ^ v413;
  v416 = (v415 ^ 0x838A98423761A03DLL) + (v402 >> 8);
  *((_QWORD *)&v402 + 1) = v415 ^ 0x38A98423761A03DLL;
  *(_QWORD *)&v402 = v415 ^ 0x8000000000000000;
  v417 = v402 >> 61;
  v418 = v416 + 0x6575BE874BE0BE40 - ((2 * v416) & 0xCAEB7D0E97C17C80);
  *((_QWORD *)&v402 + 1) = v418 ^ 0xB2;
  *(_QWORD *)&v402 = v418 ^ 0xAB58525CB2CF8900;
  v419 = (v417 + 0x6575BE874BE0BE40 - ((2 * v417) & 0xCAEB7D0E97C17C80)) ^ v418;
  v420 = (v402 >> 8) + (v419 ^ 0xCE2DECDBF92F37F2);
  *((_QWORD *)&v402 + 1) = v419 ^ 0xE2DECDBF92F37F2;
  *(_QWORD *)&v402 = v419 ^ 0xC000000000000000;
  v421 = v402 >> 61;
  v422 = v420 + 0x256834F1F7E7AB8DLL - ((2 * v420) & 0x4AD069E3EFCF571ALL);
  *((_QWORD *)&v402 + 1) = v422 ^ 0x37;
  *(_QWORD *)&v402 = v422 ^ 0xB9073424FDEF4E00;
  v423 = v402 >> 8;
  v424 = (v421 + 0x256834F1F7E7AB8DLL - ((2 * v421) & 0x4AD069E3EFCF571ALL)) ^ v422;
  *((_QWORD *)&v402 + 1) = v424 ^ 0x1C6F00D50A08E5BALL;
  *(_QWORD *)&v402 = v424 ^ 0x8000000000000000;
  v425 = v402 >> 61;
  v527 = (((((v380 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
          - ((2 * ((v380 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x808089400000000)
          + 0xC26364A81D9B0D3) ^ v380) >> 32) ^ (((((v379 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)
                                                                 + 0x176B7608979B6F91
                                                                 - ((2
                                                                   * ((v379 >> 3) & 0x8C4DCB8B000000 ^ 0x8C4CC102000000)) & 0x10881106000000)) ^ v379) >> 24) ^ (((((v381 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00) - ((2 * ((v381 >> 3) & 0xCB8BBD3D00 ^ 0xB83151C00)) & 0x115056A0000) - 0x753B454169483DDBLL) ^ v381) >> 8) ^ (((((v382 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000) - ((2 * ((v382 >> 3) & 0x4DCB8BBD0000 ^ 0x480B83150000)) & 0x880302400000) - 0x2D0919DE6EDFD99FLL) ^ v382) >> 16) ^ 0x38829DFC;
  v528 = (2 * v527) & 0x1CFA59DBELL;
  v426 = v423 + (v424 ^ 0x9C6F00D50A08E5BALL);
  *((_QWORD *)&v402 + 1) = v426 ^ 0xC5;
  *(_QWORD *)&v402 = v426 ^ 0x2A240793448B7A00;
  v427 = ((v426 ^ 0x3C3D7EE6670D42D0 ^ (v425 - ((2 * v425) & 0x2C32F2EA470C702ALL) + 0x1619797523863815))
        + (v402 >> 8)) ^ 0x6ACD5F0E5BFB9133;
  *(_QWORD *)&v402 = __ROR8__(a57- 0x661968C5C774195ELL- ((2 * (a57 - 0x661968C5C774195ELL)) & 0x72451963A8A2113CLL)- 0x46DD734E2BAEF762, 8);
  v428 = (v402 & 0xF8FFFFFFFFFFFFFFLL ^ 0x98B9228CB1D45108)
       - ((2 * (v402 & 0xF8FFFFFFFFFFFFFFLL ^ 0x98B9228CB1D45108) + 0x6626F38BA604E72CLL) & 0xDBE41EAE35F3D98ELL)
       - 0x5EFA76E312039FA3;
  *((_QWORD *)&v402 + 1) = ((v402 ^ 0xB1D45108)
                          - ((2 * (v402 ^ 0xB1D45108) - 1509628116) & 0x35F3D98E)
                          - 302227363) ^ 0x1E;
  *(_QWORD *)&v402 = v428 ^ 0xB1A2BCC97CB38000;
  v429 = (v402 >> 8) + (v428 ^ 0x293972E7E4A01CAFLL);
  *((_QWORD *)&v402 + 1) = v428 ^ 0x93972E7E4A01CAFLL;
  *(_QWORD *)&v402 = v428 ^ 0x2000000000000000;
  v430 = v402 >> 61;
  v431 = v429 - 0x2C4824C3778CDD8ALL - ((2 * v429) & 0xA76FB67910E644ECLL);
  *((_QWORD *)&v402 + 1) = v431 ^ 0xA7;
  *(_QWORD *)&v402 = v431 ^ 0x636B499947F400;
  v432 = v431 ^ (v430 - 0x2C4824C3778CDD8ALL - ((2 * v430) & 0xA76FB67910E644ECLL));
  v433 = (v402 >> 8) + (v432 ^ 0xD3D4B0751134D6D1);
  *((_QWORD *)&v402 + 1) = v432 ^ 0x13D4B0751134D6D1;
  *(_QWORD *)&v402 = v432 ^ 0xC000000000000000;
  v434 = v402 >> 61;
  v435 = v433 + 0x30A66B8BC4FA649BLL - ((2 * v433) & 0x614CD71789F4C936);
  *((_QWORD *)&v402 + 1) = v435 ^ 0x95;
  *(_QWORD *)&v402 = v435 ^ 0x5D05E982DA04EC00;
  v436 = v402 >> 8;
  v437 = (v434 + 0x30A66B8BC4FA649BLL - ((2 * v434) & 0x614CD71789F4C936)) ^ v435;
  *((_QWORD *)&v402 + 1) = v437 ^ 0xDA382091EFE880ELL;
  *(_QWORD *)&v402 = v437 ^ 0x6000000000000000;
  v438 = v402 >> 61;
  v439 = (v437 ^ 0x6DA382091EFE880ELL) + v436;
  *((_QWORD *)&v402 + 1) = v439 ^ 0x3D;
  *(_QWORD *)&v402 = v439 ^ 0x838A98423761A000;
  v440 = v402 >> 8;
  v441 = v439 ^ v438;
  *((_QWORD *)&v402 + 1) = v441 ^ 0x38A98423761A03DLL;
  *(_QWORD *)&v402 = v441 ^ 0x8000000000000000;
  v442 = v402 >> 61;
  v443 = v440 + (v441 ^ 0x838A98423761A03DLL);
  *((_QWORD *)&v402 + 1) = v443 ^ 0xF2;
  *(_QWORD *)&v402 = v443 ^ 0xCE2DECDBF92F3700;
  v444 = v443 ^ v442;
  v445 = (v402 >> 8) + (v444 ^ 0xCE2DECDBF92F37F2);
  *((_QWORD *)&v402 + 1) = v444 ^ 0xE2DECDBF92F37F2;
  *(_QWORD *)&v402 = v444 ^ 0xC000000000000000;
  v446 = v402 >> 61;
  v447 = v445 + 0x756D32FC0B6488EDLL - ((2 * v445) & 0xEADA65F816C911DALL);
  *((_QWORD *)&v402 + 1) = v447 ^ 0x57;
  *(_QWORD *)&v402 = v447 ^ 0xE9023229016C6D00;
  v448 = v402 >> 8;
  v449 = (v446 + 0x756D32FC0B6488EDLL - ((2 * v446) & 0xEADA65F816C911DALL)) ^ v447;
  *((_QWORD *)&v402 + 1) = v449 ^ 0x1C6F00D50A08E5BALL;
  *(_QWORD *)&v402 = v449 ^ 0x8000000000000000;
  v450 = v402 >> 61;
  v451 = v448 + (v449 ^ 0x9C6F00D50A08E5BALL);
  *((_QWORD *)&v402 + 1) = v451 ^ 0xC5;
  *(_QWORD *)&v402 = v451 ^ 0x2A240793448B7A00;
  v452 = v402 >> 8;
  *(_QWORD *)&v402 = __ROR8__(a57- 0x661968C5C7741956- ((2 * (a57 - 0x661968C5C7741956)) & 0x9B1BDE21EE5EDAA2)+ 0x4D8DEF10F72F6D51, 8);
  v453 = (v402 & 0xF8FFFFFFFFFFFFFFLL ^ 0x504D8DEF10F72F6DLL)
       - ((2 * (v402 & 0xF8FFFFFFFFFFFFFFLL ^ 0x504D8DEF10F72F6DLL) + 0x626F38BA604E72CLL) & 0x52171F6F134B416)
       + 0x35A432C14B9CCDA1;
  *((_QWORD *)&v402 + 1) = ((v402 ^ 0x10F72F6D)
                          - ((2 * (v402 ^ 0x10F72F6D) - 1509628116) & 0xF134B416)
                          + 1268567457) ^ 0x164BB7;
  *(_QWORD *)&v402 = v453 ^ 0x54DF01B96E800000;
  v454 = v402 >> 22;
  *((_QWORD *)&v402 + 1) = v453 ^ 0xD2;
  *(_QWORD *)&v402 = v453 ^ 0xDEC00B651ED03600;
  v455 = v402 >> 8;
  v456 = (v427 >> (8 * ((a57 - 102) & 7)))
       - 0x652CBA04B3F84884
       - ((2 * (v427 >> (8 * ((a57 - 102) & 7)))) & 0x35A68BF6980F6EF8);
  v457 = (v451 ^ 0x128FCDD002F61A05 ^ (v450 - ((2 * v450) & 0x715794868CFAC180) + 0x38ABCA43467D60C0)) + v452;
  v526 = (8 * (((_BYTE)a57 - 102) & 7)) ^ 0x3B;
  v458 = (v456 ^ 0x9AD345FB4C07B77CLL) + 32 * ((v457 ^ 0x2CD5F0E5BFB9133) << v526);
  *((_QWORD *)&v402 + 1) = v454 ^ 0x3383DF57731;
  *(_QWORD *)&v402 = v454 ^ 0x6BCAC0000000000;
  v459 = v402 >> 42;
  *((_QWORD *)&v402 + 1) = v459 ^ 0x1C8BB9AF24144EFFLL;
  *(_QWORD *)&v402 = v459 ^ 0xC000000000000000;
  v460 = v402 >> 61;
  v461 = (v459 ^ 0xDC8BB9AF24144EFFLL) + v455;
  *((_QWORD *)&v402 + 1) = v461 ^ 0xD1;
  *(_QWORD *)&v402 = v461 ^ 0xD3D4B0751134D600;
  v462 = v461 ^ v460;
  v463 = (v462 ^ 0xD3D4B0751134D6D1) + (v402 >> 8);
  *((_QWORD *)&v402 + 1) = v462 ^ 0x13D4B0751134D6D1;
  *(_QWORD *)&v402 = v462 ^ 0xC000000000000000;
  v464 = v402 >> 61;
  v465 = v463 - ((2 * v463) & 0xB2EE066FB537DB32) - 0x2688FCC825641267;
  *((_QWORD *)&v402 + 1) = v465 ^ 0x97;
  *(_QWORD *)&v402 = v465 ^ 0xB4D4813EC4656500;
  v466 = v402 >> 8;
  v467 = v465 ^ v464;
  *((_QWORD *)&v402 + 1) = v467 ^ 0x14D4813EC4656597;
  *(_QWORD *)&v402 = v467 ^ 0xC000000000000000;
  v468 = v402 >> 61;
  v469 = (v467 ^ 0xB4D4813EC4656597) + v466;
  *((_QWORD *)&v402 + 1) = v469 ^ 0x3D;
  *(_QWORD *)&v402 = v469 ^ 0x838A98423761A000;
  v470 = v402 >> 8;
  v471 = v469 ^ v468;
  *((_QWORD *)&v402 + 1) = v471 ^ 0x38A98423761A03ELL;
  *(_QWORD *)&v402 = v471 ^ 0x8000000000000000;
  v472 = v402 >> 61;
  v473 = (v471 ^ 0x838A98423761A03ELL) + v470;
  *((_QWORD *)&v402 + 1) = v473 ^ 0xF2;
  *(_QWORD *)&v402 = v473 ^ 0xCE2DECDBF92F3700;
  v474 = v402 >> 8;
  v475 = v473 ^ v472;
  *((_QWORD *)&v402 + 1) = v475 ^ 0xE2DECDBF92F37F2;
  *(_QWORD *)&v402 = v475 ^ 0xC000000000000000;
  v476 = v402 >> 61;
  v477 = (v475 ^ 0xCE2DECDBF92F37F2)
       + v474
       - 0x34DB20054F94F76FLL
       - ((2 * ((v475 ^ 0xCE2DECDBF92F37F2) + v474)) & 0x9649BFF560D61122);
  *((_QWORD *)&v402 + 1) = v477 ^ 0x2B;
  *(_QWORD *)&v402 = v477 ^ 0x574BDF2FBA63ED00;
  v478 = (v476 - 0x34DB20054F94F76FLL - ((2 * v476) & 0x9649BFF560D61122)) ^ v477;
  v479 = (v478 ^ 0x9C6F00D50A08E5BALL) + (v402 >> 8);
  *((_QWORD *)&v402 + 1) = v478 ^ 0x1C6F00D50A08E5BALL;
  *(_QWORD *)&v402 = v478 ^ 0x8000000000000000;
  v480 = v402 >> 61;
  v481 = v479 - 0x4E3A0B1A9AF78A64 - ((2 * v479) & 0x638BE9CACA10EB38);
  *((_QWORD *)&v402 + 1) = ((_DWORD)v479 + 1695053212 - ((2 * (_DWORD)v479) & 0xCA10EB38)) ^ 1;
  *(_QWORD *)&v402 = v481 ^ 0x9BE1F37621830F00;
  v523 = v402 >> 8;
  LOBYTE(v382) = *(_BYTE *)(a12
                          + (((((((v380 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)
                                                - ((2 * ((v380 >> 3) & 0x168C4DCB00000000 ^ 0x160C480B00000000)) & 0x808089400000000)
                                                + 0xC26364A81D9B0D3) ^ v380) >> 32) ^ (((((v379 >> 3) & 0x8B000000 ^ 0x2000000)
                                                                                         - 1751421039
                                                                                         - ((2
                                                                                           * ((v379 >> 3) & 0x8B000000 ^ 0x2000000)) & 0x6000000)) ^ v379) >> 24) ^ ((unsigned __int16)((((v381 >> 3) & 0x3D00 ^ 0x1C00) - 15835) ^ v381) >> 8) ^ (((((v382 >> 3) & 0x8BBD0000 ^ 0x83150000) - ((2 * ((v382 >> 3) & 0x8BBD0000 ^ 0x83150000)) & 0x2400000) - 1860163999) ^ v382) >> 16)) ^ 0xFCLL));
  v520 = v456;
  LOBYTE(v382) = *(_BYTE *)(a56 + ((a49 ^ v456) ^ 0x5ALL)) ^ ((v382 ^ 0xF8)
                                                                             - 2 * ((v382 ^ 0xF8) & 0x5F ^ v382 & 6)
                                                                             + 89);
  LOBYTE(v476) = *(_BYTE *)(a12
                          + ((((v529 ^ 0x4AAEA8AF)
                                              - ((2 * (v529 ^ 0x4AAEA8AF)) & 0x53D14A66)
                                              + 703112499) >> 16) ^ 0xE8)) ^ 0xAB;
  v482 = v458 - 2 * (v458 & 0x469AB82C34EB9873 ^ (v456 ^ 0x9AD345FB4C07B77CLL) & 0x10) - 0x396547D3CB14679DLL;
  v519 = v482 >> 8;
  LOBYTE(v452) = *(_BYTE *)(a56 + ((a49 ^ BYTE1(v482)) ^ 0xA3)) ^ (v476 - ((2 * v476) & 0xB2) + 89);
  LOBYTE(v476) = (*(_BYTE *)(a12 + v525) ^ 0x30)
               - 2 * ((*(_BYTE *)(a12 + v525) ^ 0x30) & 0x5B ^ *(_BYTE *)(a12 + v525) & 2);
  LOBYTE(v458) = *(_BYTE *)(a12
                          + (((unsigned __int16)((v530 ^ 0x1C3B)
                                                                - ((2 * (v530 ^ 0x1C3B)) & 0x25C8)
                                                                + 4836) >> 8) ^ 0x12));
  v521 = (v458 ^ 0xC3) - 2 * ((v458 ^ 0xC3) & 0x5D ^ v458 & 4);
  v483 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[a59 - 1611];
  LODWORD(v382) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ v456 ^ (v382 + (~(2 * v382) | 0xF9) - 124)) ^ 0x38u));
  DWORD1(v402) = v382 ^ 3;
  LODWORD(v402) = ~(_DWORD)v382 << 24;
  LODWORD(v525) = (unint64_t)v402 >> 30;
  v484 = v527 - v528 + 0x79AEBE7EE7D2CEDFLL;
  LODWORD(v382) = *(unsigned __int8 *)(a12 + (BYTE1(v484) ^ 0xCELL)) ^ 0xFFFFFFA7;
  v518 = HIBYTE(v482);
  LODWORD(v382) = *(unsigned __int8 *)(a56 + ((a49 ^ HIBYTE(v482)) ^ 0x64)) ^ (v382
                                                                                                - ((2 * v382) & 0xFFFFFFB2)
                                                                                                + 89);
  LODWORD(v478) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE1(v482)) ^ 0x95u ^ (v452 - ((2 * v452) & 0xAE) - 41)));
  DWORD1(v402) = v478 ^ 3;
  LODWORD(v402) = ~(_DWORD)v478 << 24;
  LODWORD(v528) = (unint64_t)v402 >> 30;
  v485 = (v531 ^ 0xE905A2ECLL)
       - ((2 * (v531 ^ 0xE905A2EC)) & 0x26BF38EE)
       - 0x4DF6B967ECA06389;
  LOBYTE(v478) = *(_BYTE *)(a12 + (BYTE1(v485) ^ 0x9CLL)) ^ 0x75;
  v517 = v482 >> 16;
  LOBYTE(v478) = *(_BYTE *)(a56 + ((a49 ^ BYTE2(v482)) ^ 0xC8)) ^ (v478 + (~(2 * v478) | 0x4D) + 90);
  LODWORD(v478) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE2(v482)) ^ 0x36u ^ (v478 - 2 * (v478 & 0x1F) + 31)));
  v486 = (*(_BYTE *)(a12 + ((v485 >> 24) ^ 0xB209469813)) ^ 0x6D)
       - 2
       * ((*(_BYTE *)(a12 + ((v485 >> 24) ^ 0xB209469813)) ^ 0x6D) & 0x5B ^ *(_BYTE *)(a12
                                                                                       + ((v485 >> 24) ^ 0xB209469813)) & 2);
  DWORD1(v402) = v478 ^ 3;
  LODWORD(v402) = ~(_DWORD)v478 << 24;
  LODWORD(v527) = (unint64_t)v402 >> 30;
  v516 = v482 >> 24;
  LOBYTE(v476) = *(_BYTE *)(a56 + ((a49 ^ BYTE3(v482)) ^ 0xE1)) ^ (v476 + 89);
  LODWORD(v476) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE3(v482)) ^ 0x27u ^ (v476 + (~(2 * v476) | 0xB1) + 40)));
  DWORD1(v402) = v476 ^ 3;
  LODWORD(v402) = ~(_DWORD)v476 << 24;
  HIDWORD(a37) = (unint64_t)v402 >> 30;
  v487 = (v529 ^ 0x4AAEA8AFLL)
       - ((2 * (v529 ^ 0x4AAEA8AF)) & 0x53D14A66)
       + 0x7924438E29E8A533;
  v515 = HIDWORD(v482);
  LOBYTE(v476) = *(_BYTE *)(a56 + ((a49 ^ BYTE4(v482)) ^ 0xE6)) ^ ((*(_BYTE *)(a12
                                                                                                + ((v487 >> 24) ^ 0x7924438E29)) ^ 0x86)
                                                                                    - ((2
                                                                                      * *(_BYTE *)(a12
                                                                                                 + ((v487 >> 24) ^ 0x7924438E29))) & 0xB2)
                                                                                    + 89);
  LODWORD(v381) = *(unsigned __int8 *)(a12 + (v529 ^ 0xAFLL));
  LODWORD(v476) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE4(v482)) ^ 0x8Cu ^ (v476 - ((2 * v476) & 0x16) - 117)));
  LODWORD(v380) = (v381 ^ 0x29) - 2 * ((v381 ^ 0x29) & 0x5B ^ v381 & 2);
  DWORD1(v402) = v476 ^ 3;
  LODWORD(v402) = ~(_DWORD)v476 << 24;
  LODWORD(v529) = (unint64_t)v402 >> 30;
  LOBYTE(v476) = *(_BYTE *)(a12 + (BYTE2(v485) ^ 0x5FLL)) ^ 0x4F;
  v514 = v482 >> 40;
  LOBYTE(v476) = *(_BYTE *)(a56 + ((a49 ^ BYTE5(v482)) ^ 0x6FLL)) ^ (v476 + (~(2 * v476) | 0x4D) + 90);
  LODWORD(v476) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE5(v482)) ^ 0xAEu ^ (v476 - ((2 * v476) & 0x40) + 32)));
  DWORD1(v402) = v476 ^ 3;
  LODWORD(v402) = ~(_DWORD)v476 << 24;
  v488 = (unint64_t)v402 >> 30;
  v489 = (v457 ^ 0x6ACD5F0E5BFB9133uLL) >> (8 * ((a57 - 102) & 7));
  v490 = v489 + 0x34818D70FCDF8B45 - ((2 * v489) & 0x69031AE1F9BF168ALL);
  v491 = (v490 ^ 0x34818D70FCDF8B45)
       + 32
       * (((v523 + ((v480 - 0x4E3A0B1A9AF78A64 - ((2 * v480) & 0x638BE9CACA10EB38)) ^ v481 ^ 0x2240793448B7AC5)) ^ 0x2CD5F0E5BFB9133) << ((8 * ((a57 - 102) & 7)) ^ 0x3B));
  v492 = v491 + 0x6174CBC8F5A4403BLL + ~(2 * (v491 & 0x6174CBC8F5A4403ELL ^ (v490 ^ 0x34818D70FCDF8B45) & 4));
  v524 = v492 >> 24;
  LOBYTE(v381) = a49 ^ ((unint64_t)((int)v491
                                         - 173785029
                                         + ~(2
                                           * (v491 & 0xF5A4403E ^ (((_DWORD)v489
                                                                  - 52458683
                                                                  - ((2 * (_DWORD)v489) & 0xF9BF168A)) ^ 0xFCDF8B45) & 4))) >> 24);
  LODWORD(v489) = *(unsigned __int8 *)(a56 + (v381 ^ 0x54)) ^ (v380 + 89);
  v513 = HIWORD(v482);
  LOBYTE(v380) = *(_BYTE *)(a56 + ((a49 ^ BYTE6(v482)) ^ 0x9ELL)) ^ ((*(_BYTE *)(a12
                                                                                                + (v530 ^ 0x3BLL)) ^ 4)
                                                                                    - ((2
                                                                                      * *(_BYTE *)(a12
                                                                                                 + (v530 ^ 0x3BLL))) & 0xB2)
                                                                                    + 89);
  LODWORD(v482) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE6(v482)) ^ 0x9Cu ^ (v380 + (~(2 * v380) | 0x39) - 28)));
  DWORD1(v402) = v482 ^ 3;
  LODWORD(v402) = ~(_DWORD)v482 << 24;
  LODWORD(v526) = (unint64_t)v402 >> 30;
  LODWORD(v382) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ HIBYTE(v482)) ^ 0x7Bu ^ (v382 - 4 * (v382 >> 1) - 2)));
  DWORD1(v402) = v382 ^ 3;
  LODWORD(v402) = ~(_DWORD)v382 << 24;
  LODWORD(v458) = (unint64_t)v402 >> 30;
  v493 = *(_BYTE *)(a56 + ((a49 ^ v490) ^ 0x76)) ^ (v486 + 89);
  LODWORD(v382) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ v490) ^ 0x45u ^ (v493
                                                                                                + (~(2 * v493) | 0x5B)
                                                                                                - 45)));
  DWORD1(v402) = v382 ^ 3;
  LODWORD(v402) = ~(_DWORD)v382 << 24;
  LODWORD(v382) = (unint64_t)v402 >> 30;
  v512 = v492 >> 8;
  LOBYTE(v378) = *(_BYTE *)(a56 + ((a49 ^ BYTE1(v492)) ^ 0x6BLL)) ^ (v521 + 89);
  LODWORD(v378) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE1(v492) ^ (v378 - ((2 * v378) & 0x8C) + 70)) ^ 0xCCu));
  DWORD1(v402) = v378 ^ 3;
  LODWORD(v402) = ~(_DWORD)v378 << 24;
  v494 = (unint64_t)v402 >> 30;
  v522 = v492 >> 16;
  LOBYTE(v377) = *(_BYTE *)(a56
                          + ((a49 ^ ((unint64_t)((int)v491
                                                                       - 173785029
                                                                       + ~(2
                                                                         * (v491 & 0xF5A4403E ^ (v490 ^ 0xFCDF8B45) & 4))) >> 16)) ^ 0xFDLL)) ^ ((*(_BYTE *)(a12 + (BYTE2(v484) ^ 0xD2)) ^ 0x48) - 2 * ((*(_BYTE *)(a12 + (BYTE2(v484) ^ 0xD2)) ^ 0x48) & 0x5B ^ *(_BYTE *)(a12 + (BYTE2(v484) ^ 0xD2)) & 2) + 89);
  LODWORD(v378) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ ((unint64_t)((int)v491
                                                                                  - 173785029
                                                                                  + ~(2
                                                                                    * (v491 & 0xF5A4403E ^ (v490 ^ 0xFCDF8B45) & 4))) >> 16)) ^ 0xBCu ^ (v377 - ((2 * v377) & 0x40) - 96)));
  DWORD1(v402) = v378 ^ 3;
  LODWORD(v402) = ~(_DWORD)v378 << 24;
  v495 = (unint64_t)v402 >> 30;
  LODWORD(v489) = *(unsigned __int8 *)(v483
                                     + (v381 ^ 0xCDu ^ (v489
                                                                                        - 16 * (v489 >> 3)
                                                                                        + 120)));
  DWORD1(v402) = v489 ^ 3;
  LODWORD(v402) = ~(_DWORD)v489 << 24;
  LODWORD(v378) = (unint64_t)v402 >> 30;
  LOBYTE(v489) = *(_BYTE *)(a12
                          + ((v530 ^ 0x32D01C3B) >> (~(_BYTE)v530 & 0x10) >> (v530 & 0x10))) ^ 0xD5;
  v511 = HIDWORD(v492);
  LOBYTE(v489) = *(_BYTE *)(a56 + ((a49 ^ BYTE4(v492)) ^ 0x8FLL)) ^ (v489 - ((2 * v489) & 0xB2) + 89);
  LODWORD(v489) = *(unsigned __int8 *)(v483 + ((v489 - ((2 * v489) & 0xDD) + 110) ^ a49 ^ BYTE4(v492)));
  DWORD1(v402) = v489 ^ 3;
  LODWORD(v402) = ~(_DWORD)v489 << 24;
  LODWORD(v381) = (unint64_t)v402 >> 30;
  v496 = v492 >> 40;
  LOBYTE(v297) = *(_BYTE *)(a56 + ((a49 ^ BYTE5(v492)) ^ 0x7ELL)) ^ ((*(_BYTE *)(a12
                                                                                                + ((v484 >> 24) ^ 0x79AEBE7EE7)) ^ 0x70)
                                                                                    - 2
                                                                                    * ((*(_BYTE *)(a12
                                                                                                 + ((v484 >> 24) ^ 0x79AEBE7EE7)) ^ 0x70) & 0x5B ^ *(_BYTE *)(a12 + ((v484 >> 24) ^ 0x79AEBE7EE7)) & 2)
                                                                                    + 89);
  LODWORD(v489) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE5(v492)) ^ 0x89u ^ (v297 + (~(2 * v297) | 0xD3) + 23)));
  DWORD1(v402) = v489 ^ 3;
  LODWORD(v402) = ~(_DWORD)v489 << 24;
  LODWORD(v489) = (unint64_t)v402 >> 30;
  LOBYTE(v297) = *(_BYTE *)(a12 + (BYTE1(v487) ^ 0xA5)) ^ 0x23;
  LOBYTE(v487) = v297 - ((2 * v297) & 0xB2);
  v497 = HIWORD(v492);
  LOBYTE(v487) = *(_BYTE *)(a56 + ((a49 ^ BYTE6(v492)) ^ 0xB4)) ^ (v487 + 89);
  LODWORD(v487) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ BYTE6(v492)) ^ 0x58u ^ (v487 - ((2 * v487) & 0x1A) + 13)));
  DWORD1(v402) = v487 ^ 3;
  LODWORD(v402) = ~(_DWORD)v487 << 24;
  LODWORD(v487) = (unint64_t)v402 >> 30;
  LOBYTE(v454) = *(_BYTE *)(a12 + (v531 ^ 0xECLL)) ^ 0x1B;
  v492 >>= 56;
  LOBYTE(v476) = *(_BYTE *)(a56 + ((a49 ^ v492) ^ 0xE4)) ^ (v454 - ((2 * v454) & 0xB2) + 89);
  LODWORD(v476) = *(unsigned __int8 *)(v483
                                     + ((a49 ^ v492) ^ 0x17u ^ (v476
                                                                                                - ((2 * v476) & 0x24)
                                                                                                + 18)));
  DWORD1(v402) = v476 ^ 3;
  LODWORD(v402) = ~(_DWORD)v476 << 24;
  v499 = v382 - ((2 * v382) & 0xB8);
  LOBYTE(v457) = ((8 * v382) | 0xE8) - ((16 * v382) & 0x20);
  LODWORD(v382) = (v494 - 16 * (v494 >> 3) + 120) ^ ((8 * v494) | 0xFFFFFFE8);
  v500 = ((unint64_t)v402 >> 30) - ((2 * ((unint64_t)v402 >> 30)) & 0xFFFFFF92);
  v501 = (v527 - ((2 * v527) & 0xFFFFFFA2) - 47) ^ (((8 * (v527 - ((2 * v527) & 0xFFFFFFA2) - 47)) | 0xFFFFFFE8)
                                                  + ((16 * (v527 - ((2 * v527) & 0xFFFFFFA2) - 47)) & 0x20 ^ 0x7F)
                                                  - 46);
  v502 = (v458 - ((2 * v458) & 0x1A) - 115) ^ (((8 * (v458 - ((2 * v458) & 0x1A) - 115)) | 0xE8) + 125);
  v503 = (((8 * v378) | 0xEF) - 5) ^ (v378 - ((2 * v378) & 4) + 2);
  *(_BYTE *)(a57 - 0x661968C5C7741966) = (v525 - 110 - ((2 * v525) & 0x24)) ^ (((8 * (v525 - 110)) & 0x10 ^ 0xF8)
                                                                               + 2 * ((8 * (v525 - 110)) & 0x10)
                                                                               + 114) ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C774195ELL) = (v499 + 92) ^ (v457 - 52) ^ 0x30;
  v504 = ((_DWORD)v381 - ((2 * (_DWORD)v381) & 0x30) + 24) ^ (((8 * (_DWORD)v381) | 0xFFFFFFE8)
                                                            + ((16 * (_DWORD)v381) & 0x20 ^ 0xFFFFFFEF)
                                                            + 25);
  v505 = (v489 - ((2 * v489) & 0x5E) + 47) ^ (((8 * ((_BYTE)v489 - ((2 * (_BYTE)v489) & 0x5E)) - 8) & 0x10 ^ 0xFFFFFFF8)
                                            - 33);
  v506 = (v487 - ((2 * v487) & 0xB2) + 89) ^ (((8 * (v487 - ((2 * v487) & 0xB2) + 89)) | 0xE8)
                                            - ((16 * (v487 - ((2 * v487) & 0xB2) + 89)) & 0x20)
                                            - 55);
  DWORD1(v402) = v382 ^ 0x18;
  LODWORD(v402) = (v382 ^ 0x60) << 24;
  v507 = (unint64_t)v402 >> 29;
  if (a51 < HIDWORD(a11) != (int)a31 - 885368018 < a10)
    v508 = a51 < HIDWORD(a11);
  else
    v508 = (int)a31 - 885368018 < a51;
  HIDWORD(v509) = v507 ^ 2;
  LODWORD(v509) = (v507 ^ 0x60) << 24;
  *(_BYTE *)(a57 - 0x661968C5C7741957) = (v500 + 73) ^ (((8 * (v500 + 73)) | 0xE8) - 71) ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C7741964) = v501 ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C7741965) = (v528 - 106 - ((2 * v528) & 0x2C)) ^ (((8 * (v528 - 106)) & 0x10 ^ 0xF8)
                                                                               + 2 * ((8 * (v528 - 106)) & 0x10)
                                                                               + 118) ^ 0x30;
  v498 = BYTE4(a37) + (~(2 * BYTE4(a37)) | 0xD3) + 23;
  *(_BYTE *)(a57 - 0x661968C5C7741963) = v498 ^ (((16 * v498) | 0xDF) + ((8 * v498) & 0x10 ^ 0xF8) + 23) ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C7741961) = (v488 - ((2 * v488) & 0x42) + 33) ^ (((8 * (v488 - ((2 * v488) & 0x42) + 33)) | 0xE8)
                                                                              - 31) ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C7741962) = ((8 * v529) | 0xE8) ^ 0xCC ^ (v529 - 8 * (v529 >> 2) - 4);
  *(_BYTE *)(a57 - 0x661968C5C7741960) = (v526 - ((2 * v526) & 0x8F) - 57) ^ (((8 * (v526 - ((2 * v526) & 0x8F)) - 8) & 0x10 ^ 0xF8)
                                                                              + 71) ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C774195FLL) = v502 ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C774195DLL) = (v509 >> 27) ^ 0x7C;
  *(_BYTE *)(a57 - 0x661968C5C774195BLL) = v503 ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C774195CLL) = (v495 - ((2 * v495) & 0x38) + 28) ^ (((8 * v495) | 0xE8)
                                                                              - ((16 * v495) & 0x20)
                                                                              + 12) ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C774195ALL) = v504 ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C7741959) = v505 ^ 0x30;
  *(_BYTE *)(a57 - 0x661968C5C7741958) = v506 ^ 0x30;
  return (*(uint64_t (**)(uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, unint64_t, _BOOL8, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(a58 + 8 * (a59 ^ (1434 * (int)v508))))(a57, v505 ^ 0x30u, v496, v501 ^ 0x30u, v504, v497, v508, (v509 >> 27) ^ 0x7C, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17,
           a18,
           a19,
           a20,
           a21,
           v511,
           v512,
           v513,
           a25,
           v514,
           a27,
           v515,
           v516,
           v517,
           a31,
           a32,
           v518,
           v519,
           v520,
           v522,
           a37,
           v524,
           v490,
           v525,
           v526,
           v527,
           v528,
           v529);
}

void sub_193092910()
{
  JUMPOUT(0x193089E34);
}

void fp_dh_c2e95997062c29f84d70b909d1e41ecd(uint64_t a1)
{
  int v1;
  signed int v2;

  v1 = (*(_DWORD *)(a1 + 8)
      + 1715670589 * ((-2 - ((a1 | 0x8E55F292) + (~(_DWORD)a1 | 0x71AA0D6D))) ^ 0x549BECCF)
      + 1732697987) & 0x98B91EEB;
  v2 = (v1 ^ 0xDCB90E31) + *(_DWORD *)(*(_QWORD *)a1 - 0x756D22780D694510);
  if (v2 < 0)
    v2 = -v2;
  __asm { BR              X21 }
}

uint64_t sub_193092BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned int a8)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  int v11;

  return (*(uint64_t (**)(void))(v10 + 8 * (((*(_DWORD *)(*v8 + 4 * a8 + a5) == a6) * a7) ^ (v11 | v9))))();
}

void sub_193092BD8()
{
  JUMPOUT(0x193092B64);
}

uint64_t sub_193092BF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 12) = v1;
  return result;
}

void fp_dh_f941ea57484bddd6c75e26ae8d4d74c8(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  v1 = *(_DWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = ((unint64_t)(*(_DWORD *)(v2 - 0x3879DE9316599D30) + 329) >> 3) & 0x3F;
  *(_BYTE *)(v2 - 0x3879DE9316599D28 + v3) = 0x80;
  v4 = v1 + 674475973 * ((((2 * a1) | 0xD3D475DA) - a1 - 1776958189) ^ 0x917D7006);
  __asm { BR              X14 }
}

uint64_t sub_193092D40()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * (int)(((v0 != ((v1 - 579722523) & 0x228DDFA7) - 3751)
                                     * ((v1 + 411264738) & 0xE77C8FFB ^ 0x2D8)) ^ v1)))();
}

uint64_t sub_193092D94@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  *a1 = 0;
  return (*(uint64_t (**)(void))(v3
                              + 8
                              * ((701 * (((v2 + 905158516) & 0x4A0C5DFE ^ 0xEE2u) - 759 != v1)) ^ (v2 + 905158516) & 0x4A0C5DFEu)))();
}

uint64_t sub_193092DDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(a1 + v3) = 0;
  return (*(uint64_t (**)(void))(v5 + 8 * (((v3 + v6 - 759 != v1) * v4) ^ v2)))();
}

uint64_t sub_193092E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t *), uint64_t a13, uint64_t (*a14)(uint64_t *), uint64_t a15, int a16, int a17, int a18, int a19, uint64_t a20,uint64_t a21,int *a22,int a23)
{
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  void (*v27)(uint64_t *);
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v28 = 674475973 * ((&a20 + 1520227828 - 2 * (&a20 & 0x5A9CD5F4)) ^ 0xA20B9F1F);
  a21 = a15;
  LODWORD(a20) = v28 + 1481076439;
  HIDWORD(a20) = v25 - v28 + 4148;
  v27(&a20);
  v29 = 583213109 * ((2 * (&a20 & 0x66766A20) - &a20 - 1719036454) ^ 0x8C2CBBC9);
  LODWORD(a21) = v25 - v29 + 3194;
  HIDWORD(a21) = 1892006136 - v29;
  a20 = a15;
  a22 = &a16;
  a23 = v29 + v26;
  a12(&a20);
  *(_DWORD *)(v24 - 0x3879DE9316599D40) += a16;
  *(_DWORD *)(v24 - 0x3879DE9316599D3CLL) += a17;
  *(_DWORD *)(v24 - 0x3879DE9316599D38) += a18;
  *(_DWORD *)(v24 - 0x3879DE9316599D34) += a19;
  a20 = a15;
  a21 = v24 - 0x31BF4F62BAC2902FLL;
  LODWORD(a22) = 1129841929 * ((&a20 + 1394755979 - 2 * (&a20 & 0x5322498B)) ^ 0xA8DD1F44)
               + 2035571143
               + v25
               + 1386;
  v30 = a14(&a20);
  *(_QWORD *)(v24 - 0x3879DE9316599D28) = 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * ((v25 - 1980540673) & 0x760CA6FB ^ 0xBu))
                                          - (((v25 - 1980540673) & 0x760CA6FBu)
                                           + 1391)
                                          + 2134))(v30);
}

uint64_t sub_19309301C@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + a1 + 24) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * (((a1 != 48) * v1) ^ v3)) - v4 + 2134))();
}

uint64_t sub_19309304C()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2 + 8 * ((((v0 ^ 0xA91) + 681) * (v1 != 55)) ^ v0)) - 12))();
}

uint64_t sub_193093074()
{
  int v0;
  uint64_t v1;
  int v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1
                                        + 8
                                        * ((((55 - v0) > 7) * (((v2 - 1331343479) & 0x4F5ABEB7) - 5767)) ^ (v2 + 3940)))
                            - 4))();
}

uint64_t sub_1930930D0()
{
  unsigned int v0;
  unsigned int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((31 * (v0 < ((v1 + 1334864024) & 0xB06F95F7 ^ ((v1 - 5530) | 0x280) ^ 0x169A))) ^ v1)))();
}

uint64_t sub_193093124@<X0>(_OWORD *a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;

  *a1 = 0u;
  a1[1] = 0u;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((31 * ((v1 & 0xFFFFFFE0) == 32)) ^ (v2 + 85)))
                            - (((v2 + 810) | 0x100u) ^ 0x1955)))();
}

void sub_19309316C()
{
  JUMPOUT(0x193093138);
}

uint64_t sub_193093178()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return (*(uint64_t (**)(void))(v3 + 8 * (int)(((((v2 - 4347) ^ 0xFFFFFA25) + v2 - 2931) * (v1 == v0)) ^ v2)))();
}

uint64_t sub_1930931A8()
{
  char v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8 * ((((v1 - 1060408913) & 0x3F3483EF ^ 0x72) * ((v0 & 0x18) == 0)) ^ v1))
                            - ((v1 + 1865) ^ 0x153BLL)))();
}

uint64_t sub_1930931F0@<X0>(uint64_t a1@<X8>)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)(a1 + v2) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4
                                        + 8
                                        * ((241 * (((((v3 - 905) | 0x378) ^ 0xFFFFFC80) & v1) - 8 != v2)) ^ ((v3 - 905) | 0x378)))
                            - (((v3 - 905) | 0x378u)
                             - 133)
                            + 751))();
}

uint64_t sub_193093240@<X0>(uint64_t a1@<X8>)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + v5) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v4 != v5) * v1) ^ v2)) - v3 + 751))();
}

uint64_t sub_19309326C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (((v1 != v0) * (v2 + 3295)) ^ v2)) - 12))();
}

uint64_t sub_1930932A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_BYTE *)(a1 + v2) = 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((v2 + 1 == v1) * (v3 ^ 0x151B)) ^ (v3 - 4696))) - 12))();
}

uint64_t sub_1930932E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(uint64_t *), uint64_t a13, void (*a14)(uint64_t *), uint64_t a15, int a16, int a17, int a18, int a19, uint64_t a20,uint64_t a21,int *a22,unsigned int a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int *v27;
  void (*v28)(uint64_t *);
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v29 = *(_QWORD *)(v23 + 16);
  v30 = 674475973
      * (((&a20 | 0x62331C8A) - &a20 + (&a20 & 0x9DCCE370)) ^ 0x9AA45661);
  a21 = a15;
  LODWORD(a20) = v30 + 1481076437;
  HIDWORD(a20) = v26 + 2762 - v30;
  v28(&a20);
  v31 = *v27;
  v32 = (2 * *v27 + 1202258578) & 0x4590A448;
  v33 = 1299810607 * (((&a20 | 0x2545234) - (&a20 & 0x2545234)) ^ 0x72026198);
  LODWORD(a20) = v26 + 707483408 - v33;
  HIDWORD(a20) = v33 + v31 + 110941037 - v32;
  a21 = v25 + 0xDEC598F00CA6984;
  fp_dh_5f8a101cb00727938d37a327d64926d2((uint64_t)&a20);
  v34 = *(_DWORD *)(v25 - 0x3879DE9316599D2CLL);
  v35 = 1299810607 * (((~&a20 & 0x84C78248) - (~&a20 | 0x84C78249)) ^ 0xF491B1E5);
  a21 = v25 + 0xDEC598F00CA6988;
  LODWORD(a20) = v26 + 707483408 - v35;
  HIDWORD(a20) = v35 + v34 + 110941037 - ((2 * v34 + 1202258578) & 0x4590A448);
  fp_dh_5f8a101cb00727938d37a327d64926d2((uint64_t)&a20);
  v36 = 583213109 * (((&a20 | 0xC00B0EF1) + (~&a20 | 0x3FF4F10E)) ^ 0xD5AE20E3);
  a22 = &a16;
  a20 = a15;
  LODWORD(a21) = v26 - v36 + 1808;
  HIDWORD(a21) = 1892006136 - v36;
  a23 = v36 - 385981277;
  a12(&a20);
  *(_DWORD *)(v25 - 0x3879DE9316599D40) += a16;
  *(_DWORD *)(v25 - 0x3879DE9316599D3CLL) += a17;
  *(_DWORD *)(v25 - 0x3879DE9316599D38) += a18;
  *(_DWORD *)(v25 - 0x3879DE9316599D34) += a19;
  a20 = a15;
  a21 = v25 - 0x31BF4F62BAC2902FLL;
  LODWORD(a22) = v26
               + 2035571143
               + 1129841929 * ((&a20 & 0x66A94217 | ~(&a20 | 0x66A94217)) ^ 0x62A9EB27);
  a14(&a20);
  v37 = 674475973
      * ((((2 * (&a20 ^ 0x5D78780D)) | 0xC70B34E6) - (&a20 ^ 0x5D78780D) - 1669700211) ^ 0xC66AA895);
  a21 = v25 - 0x3879DE9316599D40;
  LODWORD(a20) = v37 + 1481076427;
  HIDWORD(a20) = v26 + 2762 - v37;
  v28(&a20);
  *(_BYTE *)(v29 - 0x340A686104D9AE0FLL) = *(_BYTE *)(v25 - 0x3879DE9316599D40)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D40)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE0ELL) = *(_BYTE *)(v25 - 0x3879DE9316599D3FLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3FLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE0DLL) = *(_BYTE *)(v25 - 0x3879DE9316599D3ELL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3ELL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE0CLL) = *(_BYTE *)(v25 - 0x3879DE9316599D3DLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3DLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE0BLL) = *(_BYTE *)(v25 - 0x3879DE9316599D3CLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3CLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE0ALL) = *(_BYTE *)(v25 - 0x3879DE9316599D3BLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3BLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE09) = *(_BYTE *)(v25 - 0x3879DE9316599D3ALL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3ALL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE08) = *(_BYTE *)(v25 - 0x3879DE9316599D39)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D39)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE07) = *(_BYTE *)(v25 - 0x3879DE9316599D38)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D38)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE06) = *(_BYTE *)(v25 - 0x3879DE9316599D37)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D37)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE05) = *(_BYTE *)(v25 - 0x3879DE9316599D36)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D36)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE04) = *(_BYTE *)(v25 - 0x3879DE9316599D35)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D35)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE03) = *(_BYTE *)(v25 - 0x3879DE9316599D34)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D34)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE02) = *(_BYTE *)(v25 - 0x3879DE9316599D33)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D33)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE01) = *(_BYTE *)(v25 - 0x3879DE9316599D32)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D32)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE00) = *(_BYTE *)(v25 - 0x3879DE9316599D31)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D31)) & 0x94)
                                         + 74;
  v38 = 674475973
      * (((&a20 | 0xB440A136) - &a20 + (&a20 & 0x4BBF5EC8)) ^ 0x4CD7EBDD);
  LODWORD(a20) = v38 + 1481076427;
  HIDWORD(a20) = v26 + 2762 - v38;
  a21 = v25 - 0x3879DE9316599D40;
  v28(&a20);
  LODWORD(a22) = v26 + 2035571143 + 1129841929 * (&a20 ^ 0xFBFF56CF);
  a20 = a15;
  a21 = v25 - 0x31BF4F62BAC2902FLL;
  a14(&a20);
  v39 = 674475973
      * ((((2 * (&a20 ^ 0x57381899)) | 0xFD51AC5E) - (&a20 ^ 0x57381899) + 22489553) ^ 0x5107845D);
  a21 = v25 - 0x3879DE9316599D40;
  LODWORD(a20) = v39 + 1481076427;
  HIDWORD(a20) = v26 + 2762 - v39;
  v40 = ((uint64_t (*)(uint64_t *))v28)(&a20);
  *(_BYTE *)(v29 - 0x340A686104D9AE0BLL) = *(_BYTE *)(v25 - 0x3879DE9316599D40)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D40)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE0ALL) = *(_BYTE *)(v25 - 0x3879DE9316599D3FLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3FLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE09) = *(_BYTE *)(v25 - 0x3879DE9316599D3ELL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3ELL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE08) = *(_BYTE *)(v25 - 0x3879DE9316599D3DLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3DLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE07) = *(_BYTE *)(v25 - 0x3879DE9316599D3CLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3CLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE06) = *(_BYTE *)(v25 - 0x3879DE9316599D3BLL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3BLL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE05) = *(_BYTE *)(v25 - 0x3879DE9316599D3ALL)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D3ALL)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE04) = *(_BYTE *)(v25 - 0x3879DE9316599D39)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D39)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE03) = *(_BYTE *)(v25 - 0x3879DE9316599D38)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D38)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE02) = *(_BYTE *)(v25 - 0x3879DE9316599D37)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D37)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE01) = *(_BYTE *)(v25 - 0x3879DE9316599D36)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D36)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9AE00) = *(_BYTE *)(v25 - 0x3879DE9316599D35)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D35)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9ADFFLL) = *(_BYTE *)(v25 - 0x3879DE9316599D34)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D34)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9ADFELL) = *(_BYTE *)(v25 - 0x3879DE9316599D33)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D33)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9ADFDLL) = *(_BYTE *)(v25 - 0x3879DE9316599D32)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D32)) & 0x94)
                                         + 74;
  *(_BYTE *)(v29 - 0x340A686104D9ADFCLL) = *(_BYTE *)(v25 - 0x3879DE9316599D31)
                                         - ((2 * *(_BYTE *)(v25 - 0x3879DE9316599D31)) & 0x94)
                                         + 74;
  *(_OWORD *)(v25 - 0x3879DE9316599D40) = 0u;
  *v27 = 472612535;
  *(_DWORD *)(v25 - 0x3879DE9316599D2CLL) = 472612535;
  *(_OWORD *)(v25 - 0x3879DE9316599D28) = 0u;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v24 + 8 * v26) - 8))(v40);
}

uint64_t sub_193093E18@<X0>(int a1@<W8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  *(__n128 *)(v2 + v3) = a2;
  return ((uint64_t (*)(void))(*(_QWORD *)(v4 + 8 * (((v3 == 48) * a1) ^ v5)) - 8))();
}

unsigned __int8 *fp_dh_6ce70bca97ff92e2ae3527529db5cfc7(unsigned __int8 *result)
{
  int v1;
  int v2;

  v1 = 1824653060;
  switch(*result ^ (81 * (((_BYTE)result + 16 - 2 * (result & 0x10)) ^ 0x6B)))
  {
    case 0x90:
      v2 = 0x4000000;
      goto LABEL_6;
    case 0x92:
      v2 = -1744830464;
      goto LABEL_6;
    case 0x93:
      v2 = -2113929216;
      goto LABEL_6;
    case 0x95:
      v2 = 335544320;
LABEL_6:
      if (*(_DWORD *)(*((_QWORD *)result + 1) + 8) == v2)
        v1 = 1824695141;
      else
        v1 = 1824653060;
      break;
    default:
      break;
  }
  *((_DWORD *)result + 4) = v1;
  return result;
}

void aC4q7GWh()
{
  int v0[10];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[1] = 710021923
        - 1194633773
        * (((v0 | 0x6BBA5421) - v0 + (v0 & 0x9445ABD8)) ^ 0xA24303C6);
  fp_dh_319bdb6023f2d8b43338e15ab46e6717(v0);
  __asm { BR              X8 }
}

uint64_t sub_193093FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unint64_t *a16, unsigned int a17)
{
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  a17 = 1715670589 * ((&a15 + 149531602 - 2 * (&a15 & 0x8E9ABD2)) ^ 0x2DD84A70) + 2289;
  a16 = &STACK[0x2AE6FD99665E33F3];
  fp_dh_b8f7f0c268b22e5dc7f380e39a6f3ee4((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * ((4153 * (a15 == v19)) ^ v17)) - 4))(v20, v21, v22, v23, v24, v25, v26, v27);
}

uint64_t sub_193094088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, int a16, uint64_t a17)
{
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v23 = 1129841929 * (&a15 ^ 0xFBFF56CF);
  DWORD2(a15) = v23 + 2055;
  HIDWORD(a15) = v20 - ((2 * v20) & 0xA8133250) - 737568472 + v23;
  *(_QWORD *)&a15 = a12;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03((uint64_t)&a15);
  v24 = 2076498917 * ((&a15 & 0xCD4FFF22 | ~(&a15 | 0xCD4FFF22)) ^ 0x8B8E1091);
  a17 = a12;
  *((_QWORD *)&a15 + 1) = v18;
  LODWORD(a15) = (((2 * v19) & 0xD78CF956) + 2013253504 + (v19 ^ 0xEBC67CAB)) ^ v24;
  DWORD1(a15) = v24 ^ 0x1764;
  fp_dh_004f10ca9dfbea41dc1810853ee79f72((uint64_t)&a15);
  v25 = 2076498917 * (&a15 ^ 0xB93E104C);
  a17 = a12;
  HIDWORD(a15) = 0;
  LODWORD(a15) = v25 ^ 0x63C64C2B;
  *(_QWORD *)((char *)&a15 + 4) = v25 ^ 0x1764;
  fp_dh_004f10ca9dfbea41dc1810853ee79f72((uint64_t)&a15);
  v26 = 1129841929 * ((&a15 - 650836002 - 2 * (&a15 & 0xD93507DE)) ^ 0x22CA5111);
  *(_QWORD *)&a15 = a12;
  DWORD2(a15) = v26 + 2055;
  HIDWORD(a15) = v17 - ((2 * v17) & 0xA8133250) - 737568472 + v26;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 + 8 * ((385 * (a16 == 1396931083)) ^ 0x1265u)) - 4))(v27, v28, v29, v30, v31, v32, v33, v34, a9, v21);
}

uint64_t sub_193094294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, unsigned int a18, unint64_t *a19, unsigned int a20)
{
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;

  v24 = 544512889 * (((&a15 | 0x1A7FAD13) + (~&a15 | 0xE58052EC)) ^ 0x3C444AB0);
  a20 = v24 + 791772888;
  a17 = a12;
  a16 = v20 - v24 - 897457372;
  a19 = &STACK[0x16A78FCC143D0F99];
  a18 = 260146304 - v24;
  v25 = fp_dh_f54151dc8d4759a5df06023817f471a8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v22
                                                      + 8 * (((a15 != v23) * ((647 * (v20 ^ 0x1256)) ^ 0xA2B)) ^ v20))
                                          - (((v20 ^ 0x1256u) - v21) ^ 0xA20C55D7)))(v25);
}

uint64_t sub_193094378()
{
  void (*v0)(_QWORD *);
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v6;
  _QWORD v7[2];
  unsigned int v8;

  v8 = v2 - (((v7 | 0x16B15E17) + (~v7 | 0xE94EA1E8)) ^ 0xED4E08D9) * v1 + v4 + 3323;
  v7[1] = v6;
  v0(v7);
  return (v3 - 1396931083);
}

void tbttItCTp3MZ(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_1930946A8@<X0>(unsigned int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BOOL4 v3;

  v3 = (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 3952))(a1, 1252601147) == 0;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * ((58 * v3) ^ 0x12D2u)) - 12))(4294925268);
}

uint64_t sub_1930946E8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = 0;
  *v1 = a1;
  return result;
}

void fp_dh_f1f774d972d14425cea03fb69fccfa08(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD v6[2];
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = 1129841929 * ((((2 * a1) | 0xABC868D0) - a1 - 1441018984) ^ 0xAE1B62A7);
  v2 = *(_DWORD *)(a1 + 24) ^ v1;
  v3 = 5958113 * (*(_DWORD *)(a1 + 56) - v1) + 1715068260;
  v4 = 2076498917 * ((((2 * v6) | 0xFD9AF8E0) - v6 - 2127395952) ^ 0xC7F36C3C);
  v5 = -314039683 * (*(_DWORD *)(a1 + 16) + v1) - v4;
  v8 = *(_QWORD *)a1;
  v10 = v2 - v4 - 3061;
  v11 = (v3 ^ 0x57ADBB7E) + v4 + ((2 * v3) & 0xAF5B76FC) - 1461977640;
  v7 = v5 - 938300119;
  v6[0] = &STACK[0x169FC316F368EDC8];
  v6[1] = &STACK[0x125FEA6AA5DF0362];
  ((void (*)(_QWORD *))(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v2 ^ 0x1004] - 12))(v6);
  __asm { BR              X9 }
}

void sub_1930948D0(int a1@<W8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = a1;
}

void YHrWZQ6wU()
{
  int v0[8];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  v0[1] = 710021923 - 1194633773 * ((2 * (v0 & 0x16380A08) - v0 + 1774712310) ^ 0xA03EA211);
  fp_dh_319bdb6023f2d8b43338e15ab46e6717(v0);
  __asm { BR              X9 }
}

uint64_t sub_193094B84@<X0>(unsigned int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v8;

  if (v2)
    v6 = v3 == 0;
  else
    v6 = 1;
  v8 = !v6 && v1 != 0;
  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((2483 * v8) ^ a1)) + v4 - (a1 ^ 0x8527FB70)))();
}

uint64_t sub_193094BC8()
{
  int v0;
  uint64_t v1;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * ((5957 * (v0 != 0)) ^ 0x6CDu)) - 8))();
}

uint64_t sub_193094BF4()
{
  uint64_t v0;
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 - 128) = &STACK[0x352232BE152D83A8];
  *(_DWORD *)(v3 - 132) = 1702
                        - 583213109 * ((-63209213 - ((v3 - 136) | 0xFC3B8103) + ((v3 - 136) | 0x3C47EFC)) ^ 0x166150EF);
  fp_dh_83a8a9dd45ad50d77c47cd17ffe2811a(v3 - 136);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0
                                                                        + 8
                                                                        * ((4788 * (*(_DWORD *)(v3 - 136) == v1)) ^ v2))
                                                            - 8))(v4, v5, v6);
}

uint64_t sub_193094C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v28 = v24 - ((2 * v24) & 0xA8133250);
  v29 = v27 - 136;
  v30 = 1129841929 * (((v27 - 136) & 0x72A52D9 | ~((v27 - 136) | 0x72A52D9)) ^ 0x32AFBE9);
  v31 = (_QWORD *)(v27 - 136);
  *(_QWORD *)(v27 - 136) = a21;
  *(_DWORD *)(v27 - 128) = v30 + 2055;
  *(_DWORD *)(v27 - 124) = v28 - 737568472 + v30;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03(v27 - 136);
  v32 = 381095207 * ((v29 - 2 * (v29 & 0xC9389ABED7BEC419) - 0x36C7654128413BE7) ^ 0x6B31DC0ECBC3F139);
  *(_DWORD *)(v27 - 124) = v32 + 1256;
  *(_QWORD *)(v27 - 120) = ((v23 ^ 0xD5FD3A2DA8FFBF65) + 0x7B7FD7D7FF4FFBFBLL + ((2 * v23) & 0xABFA745B51FF7ECALL)) ^ v32;
  *v31 = a21;
  fp_dh_e5cddc2c1235fc09fcc82c51253bc14b(v27 - 136);
  v33 = 1129841929 * (((v29 | 0xF4C515B2) - (v29 & 0xF4C515B2)) ^ 0xF3A437D);
  *v31 = a21;
  *(_DWORD *)(v27 - 128) = v33 + 2055;
  *(_DWORD *)(v27 - 124) = v22 - ((2 * v22) & 0xA8133250) - 737568472 + v33;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03(v27 - 136);
  *v31 = a21;
  *(_DWORD *)(v27 - 124) = 381095207 * ((v27 - 136 - 2 * ((v27 - 136) & 0xED889D) + 15567005) ^ 0x1C90BDBD) + 1256;
  *(_QWORD *)(v27 - 120) = (381095207
                          * ((v27 - 136 - 2 * ((v27 - 136) & 0x880D5AD900ED889DLL) - 0x77F2A526FF127763) ^ 0x2A041C691C90BDBDLL)) ^ ((v21 ^ 0x7D7D5A57BC7FBF73) - 0x2C00485214300413 + ((2 * v21) & 0xFAFAB4AF78FF7EE6));
  fp_dh_e5cddc2c1235fc09fcc82c51253bc14b(v27 - 136);
  v34 = -737568471;
  if (!v26)
    v34 = -737568472;
  v35 = 1129841929 * ((-2135631275 - (v29 | 0x80B4DA55) + (v29 | 0x7F4B25AA)) ^ 0x84B47365);
  *v31 = a21;
  *(_DWORD *)(v27 - 128) = v35 + 2055;
  *(_DWORD *)(v27 - 124) = v35 + v34;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03(v27 - 136);
  return ((uint64_t (*)(uint64_t, uint64_t))(*(_QWORD *)(v25 + 8 * ((1253 * (v26 != 0)) ^ 0x1052u)) - 4))(v36, v37);
}

uint64_t sub_193094F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;

  v29 = v22 ^ 0x1FFE;
  v30 = ((2 * ((v28 - 136) & 0x299DAB30) - (v28 - 136) + 1449284809) ^ 0xAD9D0206) * v23;
  v31 = v24 + *v27 + v30 - ((*v27 << (v22 ^ 0x53)) & 0xA8133250);
  *v21 = a21;
  *(_DWORD *)(v28 - 128) = v30 + v22 - 2123;
  *(_DWORD *)(v28 - 124) = v31;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03(v28 - 136);
  return ((uint64_t (*)(void))(*(_QWORD *)(v26
                                        + 8 * ((7384 * (*(_DWORD *)(v28 - 120) == 1396931083)) ^ v29))
                            - ((v29 - 2060980719) ^ v25)))();
}

uint64_t sub_19309503C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((7384 * (*(_DWORD *)(v11 - 120) == 1396931083)) ^ a9))
                            - ((a9 - 2060980719) ^ v9)))();
}

uint64_t sub_193095088()
{
  int v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  v8 = 3 * ((v6 - 583012783) & 0x8567FFBF ^ (v0 + 3803));
  v9 = ((-367272284 - ((v7 - 136) | 0xEA1BDEA4) + ((v7 - 136) | 0x15E4215B)) ^ 0x30D5C0F9) * v1;
  *(_DWORD *)(v7 - 112) = v9 - 1572075525;
  *(_QWORD *)(v5 + 16) = v3;
  *(_DWORD *)(v7 - 136) = v6 - v9 - 3171;
  *(_DWORD *)(v7 - 128) = 2135178388 - v9;
  v10 = ((uint64_t (*)(uint64_t))fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v6 ^ 0xEB8])(v7 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v4
                                                      + 8 * ((8058 * (*(_DWORD *)(v7 - 132) == v2 + v8 - 1011)) ^ v6))
                                          - 8))(v10);
}

uint64_t sub_193095168()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v1 + 8 * (v0 ^ (2033 * (v2 == 0))))
                            - (v0 ^ 0xC5Fu)
                            - (((v0 - 1009) | 0x400u) ^ 0xFFFFFFFFFFFFF45ALL)))();
}

uint64_t sub_1930951B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v23;
  void (*v24)(uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = v25 ^ (v23 + 1024);
  v30 = a23;
  *(_DWORD *)(v28 - 136) = v25
                         + 583213109 * ((((v28 - 136) | 0xB6893DBB) - ((v28 - 136) & 0xB6893DBB)) ^ 0xA32C13A8)
                         - 509;
  *(_QWORD *)(v27 + 8) = &a13;
  *(_QWORD *)(v27 + 16) = v30;
  v24(v28 - 136);
  v31 = a23;
  *(_DWORD *)(v28 - 132) = v25
                         - 1779849041
                         * ((((v28 - 136) | 0xA50FD659) - (v28 - 136) + ((v28 - 136) & 0x5AF029A0)) ^ 0x90D6C222)
                         - 367;
  *(_QWORD *)(v27 + 8) = v31;
  v32 = fp_dh_a3f856c06909c1c78375f5adc976da00(v28 - 136);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v26
                                                      + 8
                                                      * ((6985 * (*(_DWORD *)(v28 - 136) == (v29 ^ 0xD66487B6))) ^ v25))
                                          - 8))(v32);
}

uint64_t sub_1930952FC()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v7;

  v5 = (v1 + 111077) | 0x85263C2C;
  *(_DWORD *)(v4 - 136) = (v5 - 1233452182) ^ (((((v4 - 136) | 0xE51D6852) - ((v4 - 136) & 0xE51D6852)) ^ 0xC02C89F0)
                                             * v0);
  *(_QWORD *)(v3 + 8) = v2;
  fp_dh_dcfad06b75309b8a9971c1fbd85c82ab(v4 - 136);
  return (v7 ^ 0x7BCFFFCB) - 680297920 + ((v5 + 1920467417) & (2 * v7)) - 1396931083;
}

void fp_dh_5eb7c3241af964c6e2ce8bf7586c9980(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  _BYTE v4[128];
  _DWORD v5[2];
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 4) + 1129841929 * ((-1090531407 - (a1 | 0xBEFFCFB1) + (a1 | 0x4100304E)) ^ 0xBAFF6681);
  fp_dh_eab53e109cfc6a21b04b8de46eb16504(v4, 0, 0x80uLL);
  v2 = 1779849041
     * (((v5 ^ 0x75D450CC | 0x4B330487)
       - (v5 ^ 0x75D450CC)
       + ((v5 ^ 0x75D450CC) & 0xB4CCFB78)) ^ 0xB3E4030);
  v6 = v4;
  v5[0] = v1 - 1482601632 + v2;
  LODWORD(v7) = v2 - 2121014686;
  fp_dh_d35489f795375012eef9d4e49a3485ca(v5);
  v3 = 1715670589
     * ((((2 * (_QWORD)v5) | 0x2C5CAFCD3A9B5130) - (_QWORD)v5 + 0x69D1A81962B25768) ^ 0x1DE7FF27B87C493ALL);
  v5[0] = v1 - v3 + 210159323;
  v6 = (_BYTE *)(v3 ^ 0xD9E1E6443A3D090CLL);
  v7 = v4;
  fp_dh_725c6309c2bcdc12fed1c503b06e1eac((uint64_t)v5);
  __asm { BR              X9 }
}

uint64_t sub_1930955A0()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = v1 + 0x14208DCDCFBAED37 * *(_QWORD *)(v0 + 8) + 0x753F213F2B965DF8;
  *(_DWORD *)(v8 - 120) = v5 - ((v7 - 2 * (v7 & 0x8F10B193) - 1894731373) ^ 0xAA215031) * v4 + v1;
  *(_QWORD *)(v8 - 112) = v9 ^ (((v7 - 2 * (v7 & 0x71CD33748F10B193) + 0x71CD33748F10B193) ^ 0xFA049BB5AA215031)
                              * v4);
  *(_QWORD *)(v8 - 104) = v6;
  v10 = fp_dh_725c6309c2bcdc12fed1c503b06e1eac(v8 - 120);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (int)(((*(_DWORD *)(v8 - 116) != v3)
                                                             * (((v1 - 2049) | 0x801) - 1803)) ^ (v1 - 10)))
                                          - 4))(v10);
}

uint64_t sub_193095658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v14 = 1990363741 * ((((v13 - 120) | 0x81D5737B) + (~(v13 - 120) | 0x7E2A8C84)) ^ 0xD4B36A84);
  *(_QWORD *)(v13 - 120) = &a10;
  *(_DWORD *)(v13 - 104) = v14 + 1250876885 + v12;
  *(_DWORD *)(v13 - 112) = v14 + 88988270;
  v15 = fp_dh_8ba8efb2a40ded022ac6d82da1dee942(v13 - 120);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10
                                                      + 8
                                                      * ((7854 * (*(_DWORD *)(v13 - 108) == v11 + (v12 ^ 0x656) - 3927)) ^ v12))
                                          - 4))(v15);
}

uint64_t sub_1930956FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _BOOL4 v15;

  *(_DWORD *)(v12 - 116) = (v11 + 1327706587) ^ (2100007649
                                               * ((((v12 - 120) | 0x842B202D) - ((v12 - 120) & 0x842B202D)) ^ 0x4925252C));
  fp_dh_a16db72130383f788a5604d3b96dfb11((_DWORD *)(v12 - 120));
  v13 = 1779849041 * ((v12 - 411632812 - 2 * ((v12 - 120) & 0xE776FBCC)) ^ 0xD2AFEFB7);
  *(_DWORD *)(v12 - 120) = 1340583881 - v13;
  *(_DWORD *)(v12 - 116) = (v11 + 2012990473) ^ v13;
  v14 = fp_dh_47e8c8f5781fca15f4e38eea352ace0d((_DWORD *)(v12 - 120));
  v15 = a10 > (char)(v11 + ((v11 - 87) | 1) - 89);
  return (*(uint64_t (**)(_DWORD *))(v10 + 8 * ((v15 | (8 * v15)) ^ v11)))(v14);
}

void sub_1930957E0(int a1@<W8>)
{
  int v2;
  _DWORD *v3;

  if ((a1 - 1290463344) < 2)
    __asm { BR              X9 }
  if (a1 == 1290463342 || a1 == 1290463347)
    __asm { BR              X8 }
  *v3 = ((v2 - 1564195586) ^ 0x53737BAF) - 3146148 + ((2 * (v2 - 1564195586)) & 0xA6E6F75E);
}

void fp_dh_2b604dac754340f860d0de1794a64507(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8) + 1194633773 * ((a1 + 459399819 - 2 * (a1 & 0x1B61E28B)) ^ 0xD298B56C);
  __asm { BR              X16 }
}

uint64_t sub_193096174()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((v0 + 3468) ^ (450
                                              * ((((((v0 + 335202431) & 0xEC053F9F) + 1084) ^ 0xEFD3DFF0) & (2 * v1) ^ 0x2E828A08)
                                               + (v1 ^ 0xE8BAA259)
                                               + 2147399920 != 2011734029)))))();
}

uint64_t sub_1930961F0(int a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;

  return ((uint64_t (*)(void))(*(_QWORD *)(v5 + 8 * ((5623 * (a2 + a1 + 174 * (a5 ^ 0xD87u) + 135664499 > 7)) ^ a5))
                            - ((a5 - 1867) ^ 0x64CLL)))();
}

uint64_t sub_19309624C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(void))(v8
                              + 8
                              * ((((a4 + 1867) ^ 0x8ED ^ (87 * (a4 ^ 0x654)))
                                * ((a3 + a8 + 1375) > 0xFFFFFFEF)) | a4)))();
}

uint64_t sub_193096290(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  unint64_t v20;
  int v22;

  v12 = *(_QWORD *)(v11 - 248);
  v13 = (a3 + a2 + a1 + 1391) + v12;
  v14 = ((_BYTE)a3 + (_BYTE)a2 + (_BYTE)a1 + 111) & 0xF;
  v15 = v14 + v8 - v13;
  v16 = (v14 | v7) - v13;
  v17 = (v14 | v9) - v13;
  v19 = (unint64_t)(v6 - v12) > 0xF && v15 > 0xF && v16 >= (((a6 - 3135) | 0x420u) ^ 0x560uLL);
  v20 = v17 + 2;
  v22 = v19 && v20 > 0xF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((86 * v22) ^ a6)) - 8))();
}

uint64_t sub_193096310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v7;

  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (((v6 < ((a6 - 1304) ^ 0x867u)) * (a6 - 3459)) ^ (a6 - 1304))) - 8))();
}

uint64_t sub_193096344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  uint64_t v77;
  int8x16_t v78;
  uint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16x4_t v83;
  int8x16x4_t v84;

  *(_DWORD *)(v77 - 256) = v75 + 9;
  LODWORD(STACK[0x2B8]) = v75 + 8;
  v83.val[1].i64[0] = v75 & 0xF;
  v83.val[1].i64[1] = ((_BYTE)v75 - 1) & 0xF;
  v83.val[2].i64[0] = ((_BYTE)v75 + 14) & 0xF;
  v83.val[2].i64[1] = ((_BYTE)v75 + 13) & 0xF;
  v83.val[3].i64[0] = ((_BYTE)v75 + 12) & 0xF;
  v83.val[3].i64[1] = ((a5 ^ 0xCC) + (_BYTE)v75) & 0xF;
  v78.i64[0] = 0x4B4B4B4B4B4B4B4BLL;
  v78.i64[1] = 0x4B4B4B4B4B4B4B4BLL;
  v79 = v75 + (((a5 ^ 0x6DD) - 691008052) & 0x292FE7FF ^ v74);
  v83.val[0].i64[0] = ((_BYTE)v75 + (((a5 ^ 0xDD) - 52) ^ v74)) & 0xF;
  v83.val[0].i64[1] = ((_BYTE)v75 + 1) & 0xF;
  v80.i64[0] = vqtbl4q_s8(v83, (int8x16_t)xmmword_193301A70).u64[0];
  v84.val[0].i64[1] = *(_DWORD *)(v77 - 256) & 0xF;
  v84.val[1].i64[1] = ((_BYTE)v75 + 7) & 0xF;
  v84.val[2].i64[1] = ((_BYTE)v75 + 5) & 0xF;
  v84.val[3].i64[1] = ((_BYTE)v75 + 3) & 0xF;
  v84.val[0].i64[0] = ((_BYTE)v75 + 10) & 0xF;
  v84.val[1].i64[0] = STACK[0x2B8] & 0xF;
  v84.val[2].i64[0] = ((_BYTE)v75 + 6) & 0xF;
  v84.val[3].i64[0] = ((_BYTE)v75 + 4) & 0xF;
  v80.i64[1] = vqtbl4q_s8(v84, (int8x16_t)xmmword_193301A70).u64[0];
  v81 = vrev64q_s8(vmulq_s8(v80, v78));
  *(int8x16_t *)(*(_QWORD *)(v77 - 248) - 15 + v79) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v72 + (v79 & 0xF) - 15), *(int8x16_t *)(v70 - 15 + v79)), veorq_s8(*(int8x16_t *)(v71 + (v79 & 0xF) - 15), *(int8x16_t *)((v79 & 0xF) + v73 - 13))), vextq_s8(v81, v81, 8uLL));
  return (*(uint64_t (**)(void))(a70 + 8 * ((21 * ((v76 & 0xFFFFFFF0) != 16)) | a5 ^ 0x6DD)))();
}

void sub_1930964C8()
{
  JUMPOUT(0x193096454);
}

uint64_t sub_1930964D4()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2 + 8 * (v0 ^ (29 * (v1 == 0x1F534544))))
                                          - ((911 * (v0 ^ 0x46Eu)) ^ 0x11C7)))(420915551);
}

uint64_t sub_19309652C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;

  *(_BYTE *)(*(_QWORD *)(v11 - 248) + (a1 - 420915551)) = *(_BYTE *)(v3 + ((a1 - 420915551) & 0xFLL)) ^ *(_BYTE *)(v1 + (a1 - 420915551)) ^ *(_BYTE *)(v2 + ((a1 - 420915551) & 0xFLL)) ^ *(_BYTE *)(((a1 - 420915551) & 0xFLL) + v4 + 2) ^ (75 * ((a1 - 95) & 0xF));
  v12 = a1 - 1537495702;
  v13 = ((v5 + 3424) ^ 0x11CAu) + a1;
  v14 = (v7 > 0x428DA937) ^ (v12 < v6);
  v15 = v12 < v8;
  if (v14)
    v16 = v7 > 0x428DA937;
  else
    v16 = v15;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10 + 8 * ((!v16 * v9) ^ v5)) - 12))(v13);
}

uint64_t sub_1930965D0()
{
  int v0;
  int v1;
  uint64_t v2;
  int v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * (int)((((((v1 - 485) | 0x20) ^ 0xFFFFFC6C) + ((v1 + 1603402597) & 0xA06E11EF))
                                               * (v0 != v3)) ^ v1))
                            - 12))();
}

uint64_t sub_193096620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  char v8;
  uint64_t v9;
  int v10;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v9 + 8 * (a7 ^ (11 * ((v8 & 8) == 0))))
                                                                                             - ((((2 * a7) ^ 0xF54u)
                                                                                               - 1210) ^ (a7 + 703))))(a1, a2, a3, (a7 + 703), (v7 - v10), a6, (a7 + 703));
}

uint64_t sub_19309665C@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  char v71;
  int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int8x16x4_t v77;

  LODWORD(STACK[0x2B0]) = v70;
  *(_QWORD *)(v73 - 256) = v65 - 7;
  STACK[0x2B8] = *(_QWORD *)(v73 - 248) - 7;
  LODWORD(STACK[0x2AC]) = v70 & 0xFFFFFFF8;
  LODWORD(STACK[0x2B4]) = -(v70 & 0xFFFFFFF8);
  v74 = v71 + a2 + a1;
  v75 = a3 + a2 + a1 + 693 - v72 + ((a4 - 341935931) & 0x14617FBEu);
  v77.val[0].i64[0] = ((_BYTE)a3 + (_BYTE)a2 + (_BYTE)a1 - 75 - (_BYTE)v72 + (((_BYTE)a4 - 59) & 0xBE)) & 0xF;
  v77.val[0].i64[1] = (v74 + 1 - (_BYTE)v72) & 0xF;
  v77.val[1].i64[0] = (v69 - (_BYTE)v72) & 0xF;
  v77.val[1].i64[1] = (v74 + 15 - (_BYTE)v72) & 0xF;
  v77.val[2].i64[0] = (v74 + 14 - (_BYTE)v72) & 0xF;
  v77.val[2].i64[1] = (v74 + 13 - (_BYTE)v72) & 0xF;
  v77.val[3].i64[0] = (v74 + 12 - (_BYTE)v72) & 0xF;
  v77.val[3].i64[1] = (v74 + 11 - (_BYTE)v72) & 0xF;
  *(int8x8_t *)(STACK[0x2B8] + v75) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v67 + (v75 & 0xF) - 7), *(int8x8_t *)(*(_QWORD *)(v73 - 256) + v75)), veor_s8(*(int8x8_t *)(v66 + (v75 & 0xF) - 7), *(int8x8_t *)((v75 & 0xF) + v68 - 5))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v77, (int8x16_t)xmmword_193301A80), (int8x8_t)0x4B4B4B4B4B4B4B4BLL)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a65 + 8 * ((6954 * (LODWORD(STACK[0x2B4]) == -8 - v72)) ^ a4))
                                         - 8))((__n128)xmmword_193301A80);
}

void sub_1930967E0()
{
  JUMPOUT(0x1930966E8);
}

uint64_t sub_1930967E8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((((a3 ^ 0x1371) - 2815) * (LODWORD(STACK[0x2B0]) == LODWORD(STACK[0x2AC]))) ^ a3))
                            - ((a3 - 378) | 0x430u)
                            + 1380))();
}

uint64_t sub_19309682C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(*(_QWORD *)(v14 - 248) + (v12 + a5 + 1134)) = *(_BYTE *)(v9 + ((v12 + a5 + 1134) & 0xFLL)) ^ *(_BYTE *)(v7 + (v12 + a5 + 1134)) ^ *(_BYTE *)(v8 + (((_BYTE)v12 + (_BYTE)a5 + 110) & 0xF)) ^ *(_BYTE *)((((_BYTE)v12 + (_BYTE)a5 + 110) & 0xF) + v10 + 2) ^ (75 * ((v12 + a5 + 110) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * ((992 * (((a5 - 1 == v11) ^ (5 * ~(_BYTE)a7)) & 1)) ^ (a7 + 4191)))
                            - 8))();
}

uint64_t sub_1930968AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *v6;
  *(int8x16_t *)(v8 - 240) = veorq_s8(*(int8x16_t *)v6[2], (int8x16_t)xmmword_193301AC0);
  *(int8x16_t *)(v8 - 224) = veorq_s8(*(int8x16_t *)(v9 - 0x515A6E2E55843763), (int8x16_t)xmmword_193301AD0);
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * (a6 ^ (43 * (v8 - 240 == *(_QWORD *)(v8 - 248)))))
                            - 101 * (a6 ^ 0x11F0u)
                            + 5947))();
}

uint64_t sub_19309692C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  BOOL v64;
  int v65;

  v63 = *(_BYTE **)(v62 - 248);
  *(_BYTE *)(v62 - 144) = *v63;
  *(_BYTE *)(v62 - 143) = v63[1];
  *(_BYTE *)(v62 - 142) = v63[2];
  *(_BYTE *)(v62 - 141) = v63[3];
  *(_BYTE *)(v62 - 140) = v63[4];
  *(_BYTE *)(v62 - 139) = v63[5];
  *(_BYTE *)(v62 - 138) = v63[6];
  *(_BYTE *)(v62 - 137) = v63[7];
  *(_BYTE *)(v62 - 136) = v63[8];
  *(_BYTE *)(v62 - 135) = v63[9];
  *(_BYTE *)(v62 - 134) = v63[10];
  *(_BYTE *)(v62 - 133) = v63[11];
  *(_BYTE *)(v62 - 132) = v63[12];
  *(_BYTE *)(v62 - 131) = v63[13];
  *(_BYTE *)(v62 - 130) = v63[14];
  *(_BYTE *)(v62 - 129) = v63[15];
  if (*(_QWORD *)(v62 - 248))
    v64 = v62 == 0x90;
  else
    v64 = 1;
  v65 = v64;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 + 8 * ((43 * v65) ^ ((int)a6 + 1404))) - ((((_DWORD)a6 - 2429) | 0x81u) ^ 0x8CBLL)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_193096A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  _BOOL4 v66;

  v63 = v61 + 37;
  v64 = 2 * (v61 + 37);
  v66 = HIDWORD(a34) != 1263834265 && ((BYTE4(a34) + 7) & 0xF) == (v64 ^ 0x2ED8);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 + 8 * ((174 * v66) ^ v63)) - 4))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46,
           a47,
           a48,
           a49,
           a50,
           a51,
           a52,
           a53,
           a54,
           a55,
           a56,
           a57,
           a58,
           a59,
           a60,
           a61);
}

uint64_t sub_193096A98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unsigned int a68;
  uint64_t a70;
  int v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  unint64_t v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  unsigned int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  unsigned int v189;
  int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  unsigned int v202;
  int v203;
  unsigned int v204;
  int v205;
  int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  unsigned int v218;
  int v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  unsigned int v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  int v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  unsigned int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  int v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned __int8 *v265;
  int v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int8 v280;
  uint64_t v281;
  unsigned int v282;
  int v283;
  int v284;
  int v285;
  unsigned int v286;
  int v287;
  int v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  int v292;
  unsigned int v293;
  int v294;
  int v295;
  int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  unsigned int v306;
  int v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  unsigned int v318;
  int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  unsigned int v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  int v333;
  unsigned int v334;
  int v335;
  int v336;
  int v337;
  unsigned int v338;
  int v339;
  unsigned int v340;
  unsigned int v341;
  int v342;
  unsigned int v343;
  unsigned int v344;
  int v345;
  unsigned int v346;
  int v347;
  int v348;
  unint64_t v349;
  unsigned int v350;
  int v351;
  int v352;
  int v353;
  int v354;
  unsigned int v355;
  int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  unsigned int v360;
  int v361;
  int v362;
  unsigned int v363;
  int v364;
  unsigned int v365;
  int v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  unsigned int v375;
  int v376;
  int v377;
  int v378;
  unsigned int v379;
  int v380;
  int v381;
  int v382;
  unsigned int v383;
  int v384;
  int v385;
  unsigned int v386;
  unsigned int v387;
  int v388;
  unsigned int v389;
  int v390;
  int v391;
  int v392;
  int v393;
  unsigned int v394;
  int v395;
  unsigned int v396;
  int v397;
  int v398;
  unsigned int v399;
  int v400;
  unsigned int v401;
  int v402;
  unsigned int v403;
  int v404;
  int v405;
  unsigned int v406;
  int v407;
  int v408;
  unsigned int v409;
  unsigned int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  unsigned int v416;
  unsigned int v417;
  BOOL v418;
  int v419;
  unsigned int v420;
  int v421;
  int v422;
  int v423;
  unsigned int v424;
  int v425;
  int v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  int v430;
  unsigned int v431;
  unint64_t v432;
  unsigned int v433;
  unsigned int v434;
  int v435;
  int v436;
  unsigned int v437;
  int v438;
  unsigned int v439;
  int v440;
  unsigned int v441;
  int v442;
  int v443;
  int v444;
  unsigned int v445;
  int v446;
  uint64_t v447;
  unsigned int v448;
  int v449;
  int v450;
  int v451;
  uint64_t v452;
  int v453;
  int v454;
  int v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  int v476;
  unsigned int v477;
  uint64_t v478;
  unsigned int v479;
  unsigned int v480;
  int v481;
  unsigned int v482;
  unsigned int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  unsigned int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  unsigned int v504;
  int v505;
  int v506;
  int v507;
  unsigned int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  unsigned int v514;
  int v515;
  unsigned int v516;
  unsigned int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  uint64_t v522;
  int v523;
  int v524;
  unsigned int v525;
  uint64_t v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  unsigned int v534;
  int v535;
  int v536;
  unsigned int v537;
  int v538;
  int v539;
  unsigned int v540;
  int v541;
  int v542;
  int v543;
  unsigned int v544;
  int v545;
  unsigned int v546;
  int v547;
  unsigned int v548;
  int v549;
  int v550;
  unsigned int v551;
  int v552;
  unsigned __int8 v553;
  int v554;
  unsigned int v555;
  int v556;
  unsigned int v557;
  int v558;
  int v559;
  unsigned int v560;
  unsigned int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  unsigned int v568;
  int v569;
  int v570;
  unsigned __int8 v571;
  unsigned int v572;
  int v573;
  unsigned int v574;
  unsigned int v575;
  unsigned int v576;
  unsigned int v577;
  int v578;
  unsigned int v579;
  unsigned int v580;
  unsigned int v581;
  unsigned int v582;
  int v583;
  int v584;
  int v585;
  uint64_t v586;
  int v587;
  unsigned int v588;
  int v589;
  unsigned int v590;
  unsigned int v591;
  int v592;
  unsigned int v593;
  int v594;
  int v595;
  unsigned int v596;
  int v597;
  unsigned int v598;
  unsigned int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  unsigned int v604;
  int v605;
  unsigned int v606;
  int v607;
  int v608;
  unsigned int v609;
  unsigned int v610;
  int v611;
  int v612;
  int v613;
  unsigned int v614;
  int v615;
  unsigned int v616;
  unsigned int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  unsigned int v622;
  int v623;
  unsigned int v624;
  unsigned int v625;
  int v626;
  unsigned int v627;
  int v628;
  unsigned int v629;
  int v630;
  int v631;
  uint64_t v632;
  int v633;
  unsigned int v634;
  uint64_t v635;
  unsigned int v636;
  uint64_t v637;
  unsigned int v638;
  int v639;
  int v640;
  unsigned int v641;
  unsigned int v642;
  int v643;
  unsigned int v644;
  int v645;
  unsigned int v646;
  int v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  int v651;
  unsigned int v652;
  int v653;
  uint64_t v654;
  int v655;
  int v656;
  int v657;
  unsigned int v658;
  unsigned int v659;
  unsigned int v660;
  int v661;
  int v662;
  int v663;
  unsigned int v664;
  unsigned int v665;
  int v666;
  int v667;
  int v668;
  int v669;
  int v670;
  unsigned int v671;
  unsigned int v672;
  unsigned int v673;
  int v674;
  int v675;
  unsigned int v676;
  unsigned int v677;
  int v678;
  unsigned int v679;
  int v680;
  unsigned int v681;
  int v682;
  unsigned int v683;
  int v684;
  int v685;
  int v686;
  int v687;
  unsigned int v688;
  int v689;

  v73 = v70 ^ 0x2866;
  v74 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[(v70 ^ 0x2866) - 1034] - 12;
  v75 = *(unsigned __int8 *)(v74 + (*(unsigned __int8 *)(v72 - 224) ^ 0x51)) ^ (v73 - 279);
  STACK[0x288] = v75;
  v76 = (unint64_t)v75 << 24;
  v77 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v73 ^ 0x747] - 8;
  v78 = *(unsigned __int8 *)(v72 - 222);
  v79 = v76 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(*(_BYTE *)(v77 + (*(unsigned __int8 *)(v72 - 223) ^ 0x64)) ^ (*(_BYTE *)(v72 - 223) - ((2 * *(_BYTE *)(v72 - 223)) & 0x72) - 71) ^ 0xCEu) << 16);
  STACK[0x218] = v79;
  v80 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v73 ^ 0x632] - 4;
  v81 = (*(_BYTE *)(v80 + (v78 ^ 0xA1)) + 40);
  v82 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v73 - 1505] - 12;
  v83 = *(unsigned __int8 *)(v82 + (*(unsigned __int8 *)(v72 - 221) ^ 0x4BLL));
  STACK[0x280] = v83;
  v84 = v81 ^ 0x5A;
  v85 = *(unsigned __int8 *)(v72 - 220);
  STACK[0x2A0] = v71;
  v86 = v83 ^ 0xE0 | (v84 << 8);
  v87 = *(unsigned __int8 *)(v74 + (v85 ^ 0x19));
  STACK[0x290] = v87;
  STACK[0x298] = v87 ^ 0x32;
  v88 = (unint64_t)(v87 ^ 0x32) << 24;
  v89 = *(unsigned __int8 *)(v72 - 218);
  v90 = v88 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)(*(_BYTE *)(v77 + (*(unsigned __int8 *)(v72 - 219) ^ 0x26)) ^ (*(_BYTE *)(v72 - 219) - ((2 * *(_BYTE *)(v72 - 219)) & 0x72) - 71) ^ 0x9Au) << 16);
  STACK[0x238] = v90;
  v91 = (*(_BYTE *)(v80 + (v89 ^ 0x54)) + 40) ^ 0x16;
  v92 = *(unsigned __int8 *)(v72 - 216) ^ 0xB9;
  v93 = *(unsigned __int8 *)(v82 + (*(unsigned __int8 *)(v72 - 217) ^ 0x2CLL));
  STACK[0x278] = v93;
  v94 = v93 ^ 0xE0 | (v91 << 8);
  LODWORD(v85) = ((*(unsigned __int8 *)(v74 + v92) ^ 0x8E) << 24) | ((*(unsigned __int8 *)(v77
                                                                                         + (*(unsigned __int8 *)(v72 - 215) ^ 0x34)
                                                                                         - 2
                                                                                         * ((*(unsigned __int8 *)(v72 - 215) ^ 0x34) & 0xFFFFFFC7)
                                                                                         + 199) ^ (*(_BYTE *)(v72 - 215) - ((2 * *(_BYTE *)(v72 - 215)) & 0x72) - 71) ^ 0x76) << 16);
  LOBYTE(v92) = (*(_BYTE *)(v80 + (*(unsigned __int8 *)(v72 - 214) ^ 0x1ALL)) + 40) ^ 0x3A;
  v95 = *(unsigned __int8 *)(v82 + (*(unsigned __int8 *)(v72 - 213) ^ 0x69));
  STACK[0x270] = v95;
  LODWORD(v95) = v95 ^ 0xE0;
  LODWORD(v92) = v85 & 0xFFFF00FF | (v92 << 8) | v95;
  v96 = v92 - 2 * (v92 & 0x1929D273 ^ v95 & 2);
  v97 = *(unsigned __int8 *)(v74 + (*(unsigned __int8 *)(v72 - 212) ^ 0x30));
  LOBYTE(v74) = *(_BYTE *)(v77 + (*(unsigned __int8 *)(v72 - 211) ^ 0x2DLL)) ^ (*(_BYTE *)(v72 - 211)
                                                                              - ((2 * *(_BYTE *)(v72 - 211)) & 0x72)
                                                                              - 71) ^ 0xF;
  v98 = v97 ^ 0x22;
  STACK[0x2B8] = v97 ^ 0x22;
  v99 = ((v97 ^ 0x22) << 24) | ((unint64_t)v74 << 16);
  v100 = ((v97 ^ 0x22) << 24) | (v74 << 16);
  STACK[0x260] = v99;
  LOBYTE(v74) = *(_BYTE *)(v80 + (*(unsigned __int8 *)(v72 - 210) ^ 9));
  v101 = *(unsigned __int8 *)(v82 + (*(unsigned __int8 *)(v72 - 209) ^ 0x86));
  v102 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v73 ^ 0x73E] - 8;
  STACK[0x268] = BYTE2(v99);
  LODWORD(v77) = *(_DWORD *)(v102 + 4 * (BYTE2(v99) ^ 0xD6));
  LOBYTE(v74) = (v74 + 40) ^ 0xB6;
  v103 = v100 & 0xFFFF00FF | (v74 << 8) | v101 ^ 0xE0;
  STACK[0x258] = v101;
  LOBYTE(v99) = (v97 ^ 0x2C) - ((2 * (v97 ^ 0x2C)) & 0x42);
  v104 = v73;
  *(_DWORD *)(v72 - 256) = v73;
  v105 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v73 ^ 0x76C] - 12;
  v106 = (v99 - 95) ^ *(unsigned __int8 *)(v105 + v98);
  v107 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v73 - 1051];
  LODWORD(STACK[0x254]) = v74;
  v108 = v107 - 8;
  v109 = *(_DWORD *)(v108 + 4 * (v74 ^ 0xE8u));
  STACK[0x220] = v86 | v79;
  v110 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v104 - 1195] - 4;
  v674 = v109 ^ (v86 | v79) ^ ((v101 ^ 0xCC) - 2 * ((v101 ^ 0xCC) & 0x31 ^ (v101 ^ 0xE0) & 1) + 332876336) ^ *(_DWORD *)(v110 + 4 * (v101 ^ 0xE8)) ^ (1281043383 * v77 - ((-1732880530 * v77 + 885203464) & 0xFED2DAF2) + 432733821);
  STACK[0x240] = v94 | v90;
  v670 = v106 ^ v674;
  v667 = v106 ^ v674 ^ 0x5C;
  v665 = v667 ^ (v94 | v90);
  v684 = v665 ^ (v96 + 422171249);
  v111 = v96 + 422171249;
  LODWORD(STACK[0x230]) = v96 + 422171249;
  v688 = v684 ^ v103;
  LODWORD(v86) = ((v684 ^ v103 ^ 0xAD23740D) >> 16);
  LODWORD(STACK[0x210]) = v86;
  LODWORD(v86) = *(_DWORD *)(v102 + 4 * (v86 ^ 0xC));
  v686 = ((unsigned __int16)(v665 ^ (v96 - 11663) ^ v103) >> 8);
  v645 = *(_DWORD *)(v110 + 4 * (v688 ^ 0x6Du)) ^ *(_DWORD *)(v108 + 4 * (BYTE1(v688) ^ 0xBBu)) ^ v667 ^ ((v688 ^ 0xA) - ((2 * v688) & 0x60) + 332876336) ^ (1281043383 * v86 - ((-1732880530 * v86 + 885203464) & 0xFED2DAF2) + 432733821);
  v112 = (v684 ^ v103 ^ 0xAD23740D) >> 24;
  STACK[0x200] = v112;
  v113 = ((((v688 ^ 0xAD23740D) >> 24) ^ 0xDA) - (((v688 ^ 0xAD23740D) >> 23) & 0x42) - 95) ^ *(unsigned __int8 *)(v105 + (v112 ^ 0xD4)) ^ v645;
  v640 = v113 ^ v111;
  v114 = ((v113 ^ v111 ^ 0x1929D280) - 2 * ((v113 ^ v111 ^ 0x1929D280) & 0x8C6F3DB ^ (v113 ^ v111) & 1) + 147256282) ^ v684 ^ v103 ^ 0xAD23740D;
  v662 = BYTE2(v114);
  LODWORD(v74) = *(_DWORD *)(v102 + 4 * (BYTE2(v114) ^ 0x89u));
  v657 = ((unsigned __int16)(((v113 ^ v111 ^ 0xD280)
                                             - 2 * ((v113 ^ v111 ^ 0xD280) & 0xF3DB ^ (v113 ^ v111) & 1)
                                             - 3110) ^ v684 ^ v103 ^ 0x740D) >> 8);
  LODWORD(v74) = (1281043383 * v74 - ((-1732880530 * v74 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (v657 ^ 0x15u));
  v654 = HIBYTE(v114);
  v648 = v114;
  v680 = (((v113 ^ v111 ^ 0x80) - 2 * ((v113 ^ v111 ^ 0x80) & 0xDB ^ (v113 ^ v111) & 1) - 38) ^ v684 ^ v103 ^ 0xD);
  v630 = v113;
  v676 = (v74 - ((2 * v74) & 0x27AE9460) + 332876336) ^ *(_DWORD *)(v110 + 4 * (v680 ^ 0x7Eu)) ^ v113;
  v115 = *(unsigned __int8 *)(v105 + (v654 ^ 0xAC)) ^ ((HIBYTE(v114) ^ 0xA2)
                                                                      + ~(2
                                                                        * ((HIBYTE(v114) ^ 0xA2) & 0x25 ^ HIBYTE(v114) & 4))
                                                                      - 94) ^ v676 ^ v114;
  v633 = v113 ^ v665;
  v116 = (v113 ^ v665) & 4 | 0x19FA903;
  if (((v115 ^ 0xFFFFFF5B) & (v113 ^ v665) & 4) != 0)
    v116 = 54481414 - v116;
  v579 = ((((v115 ^ 0x8CF793B9) - 27240707 + v116) & 0x80000000) + ((v113 ^ v665) & 0xFFFFFFFB ^ 0xBE3C129B)) ^ ((v115 ^ 0x8CF793B9) - 27240707 + v116) & 0x7FFFFFFF;
  v581 = v579 ^ 0xD9FB5D1B ^ v113 ^ v111;
  v117 = v581 ^ 0x50EF952D ^ v114;
  v600 = BYTE2(v117);
  v118 = *(_DWORD *)(v102 + 4 * (BYTE2(v117) ^ 0xCAu));
  v589 = BYTE1(v117);
  v119 = (1281043383 * v118 - ((-1732880530 * v118 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (BYTE1(v117) ^ 0x3Cu));
  v592 = v581 ^ 0x2D ^ (((v113 ^ v111 ^ 0x80)
                                                         - 2 * ((v113 ^ v111 ^ 0x80) & 0xDB ^ (v113 ^ v111) & 1)
                                                         - 38) ^ v688 ^ 0xD);
  v120 = *(_DWORD *)(v110 + 4 * (v592 ^ 0xBAu)) ^ v592 ^ 0x9E ^ (v119 - ((2 * v119) & 0x27AE9460) + 332876336);
  v586 = HIBYTE(v117);
  v121 = ((v586 ^ 0xFFFFFFD2) - ((v117 >> 23) & 0x42) - 95) ^ *(unsigned __int8 *)(v105 + (v586 ^ 0xDC));
  v122 = ((v121 ^ 0xA4) - ((2 * (v121 ^ 0xA4)) & 0x4C) + 2137470502) ^ 0x7E2D3D57;
  v571 = *(_BYTE *)(v105 + (v654 ^ 0xAC)) ^ ((HIBYTE(v114) ^ 0xA2)
                                           + ~(2 * ((HIBYTE(v114) ^ 0xA2) & 0x25 ^ HIBYTE(v114) & 4))
                                           - 94) ^ v676 ^ v114 ^ 0xA4;
  v123 = (v120 - ((2 * v120) & 0x64C55428) + 845326868) ^ v115 ^ 0xA4;
  v124 = v121 ^ 0x5C;
  v125 = (v124 + (v123 ^ v122) + 1) ^ ((v123 ^ 0x14A0B89) + 1);
  v126 = (v123 ^ 0x81D2C250 ^ (v125 - ((2 * v125) & 0xFECE6C4C) + 2137470502)) + v124;
  v127 = v126 - ((2 * v126) & 0x57C099B0) - 1411363624;
  v672 = v127;
  v576 = v127 ^ v579 ^ 0xD9FB5D1B;
  v558 = v576 ^ v581 ^ 0x50EF952D;
  v128 = v558 ^ 0x19B27C80 ^ v117;
  v563 = BYTE2(v128);
  v129 = *(_DWORD *)(v102 + 4 * (BYTE2(v128) ^ 0x65u));
  v678 = BYTE1(v128);
  v130 = (1281043383 * v129 - ((-1732880530 * v129 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (BYTE1(v128) ^ 0x86u));
  v560 = HIBYTE(v128);
  v131 = ((HIBYTE(v128) ^ 0xFFFFFF39) + 227) ^ ((HIBYTE(v128) ^ 0xFFFFFFDB) + 1);
  v550 = v558 ^ 0x80 ^ v117;
  v546 = v128;
  v132 = (v130 - ((2 * v130) & 0x27AE9460) + 332876336) ^ *(_DWORD *)(v110
                                                                    + 4
                                                                    * (v558 ^ 0x80u ^ v117)) ^ ((HIBYTE(v128) ^ 0x24) - 2 * ((HIBYTE(v128) ^ 0x24) & 0x23 ^ HIBYTE(v128) & 2) - 95) ^ *(unsigned __int8 *)(v105 + (HIBYTE(v128) ^ 0x9AD7EF86 ^ (v131 - 1697124474 - ((2 * v131) & 0x35AFDF44) + 28)) + 226);
  v608 = (v132 - ((2 * v132) & 0x57C099B0) - 1411363624) ^ v127;
  v603 = v608 ^ v550;
  v133 = v608 ^ v550 ^ 0xED12E860;
  v134 = v133 ^ v576 ^ v117;
  v541 = HIWORD(v134) ^ 0x5398;
  v539 = BYTE2(v134) ^ 0x98;
  v135 = *(_DWORD *)(v102 + 4 * (BYTE2(v134) ^ 0x34u));
  v543 = BYTE1(v134);
  v136 = (1281043383 * v135 - ((-1732880530 * v135 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (BYTE1(v134) ^ 0x56u));
  v536 = (HIBYTE(v134) ^ 0xB6) - 2 * ((HIBYTE(v134) ^ 0xB6) & 0xF) - 2114365681;
  v643 = v134;
  v137 = v134 ^ 0xC3;
  v615 = (v136 - ((2 * v136) & 0x27AE9460) + 332876336) ^ *(_DWORD *)(v110 + 4 * v137) ^ v133;
  v618 = *(unsigned __int8 *)(v105
                            + (((v536 ^ 0x81F9570F) + 2 * (v536 & 0xEC ^ 0xC) - 4 * (v536 & 0xEC ^ 0xC) + 236) ^ 0xE2)) ^ ((v536 ^ 0xF) + 2 * (v536 & 0xEC ^ 0xC) - 4 * (v536 & 0xEC ^ 0xC) - 20 - ((2 * ((v536 ^ 0xF) + 2 * (v536 & 0xEC ^ 0xC) - 4 * (v536 & 0xEC ^ 0xC) - 20)) & 0x42) - 95) ^ v137 ^ v615;
  v529 = v133 ^ v576;
  v138 = v618 ^ 0x5B26DE7 ^ v133 ^ v576;
  v516 = v138;
  v139 = v138 ^ 0x9C5EEFFE ^ v128;
  v611 = BYTE2(v139);
  v140 = *(_DWORD *)(v102 + 4 * (BYTE2(v139) ^ 0x1Du));
  v523 = BYTE1(v139);
  v141 = (1281043383 * v140 - ((-1732880530 * v140 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (BYTE1(v139) ^ 0x62u));
  v595 = v133 ^ v576 ^ v558 ^ 0x19B27C80;
  v522 = HIBYTE(v139);
  v519 = v138 ^ 0xFE ^ v128;
  LODWORD(v142) = __ROR4__(v595 ^ 0xF5293448 ^ v138 ^ 0x9C5EEFFE, 29) ^ 0x786F6B85;
  HIDWORD(v142) = v142;
  v624 = (v141 - ((2 * v141) & 0x27AE9460) + 332876336) ^ *(_DWORD *)(v110 + 4 * (v519 ^ 0x8Bu)) ^ v618 ^ 0x5B26DE7;
  v613 = (v142 >> 3) - ((2 * (v142 >> 3)) & 0x48FD04C) - 2109216730;
  v597 = *(unsigned __int8 *)(v105 + (v522 ^ 0xA8)) ^ ((HIBYTE(v139) ^ 0xA6)
                                                                      - ((2 * (HIBYTE(v139) ^ 0xA6)) & 0x42)
                                                                      - 95) ^ v519 ^ v624;
  v143 = v597 ^ 0xA4 ^ v138;
  v144 = v143 ^ v613;
  v621 = v143 ^ v613;
  LODWORD(STACK[0x2AC]) = v143;
  v145 = v143 ^ v613 ^ 0x6209128F ^ v139;
  v573 = BYTE1(v145);
  v567 = BYTE2(v145);
  v146 = *(_DWORD *)(v102 + 4 * (BYTE2(v145) ^ 0x6Au));
  v147 = (1281043383 * v146 - ((-1732880530 * v146 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (((BYTE1(v145) ^ 0xE1) + ((v145 >> 7) & 0x14E ^ 0xFFFFFEBD) + 168) ^ 0xD0));
  v526 = HIBYTE(v145);
  v527 = (v143 ^ ((v142 >> 3) - ((2 * (v142 >> 3)) & 0x4C) + 38)) ^ 0x8F ^ v139;
  v682 = (v147 - ((2 * v147) & 0x27AE9460) + 332876336) ^ *(_DWORD *)(v110 + 4 * (v527 ^ 0x84u)) ^ v597 ^ 0xA4;
  v148 = *(unsigned __int8 *)(v105 + (v526 ^ 0x1C)) ^ ((HIBYTE(v145) ^ 0x12)
                                                                      - ((v145 >> 23) & 0x42)
                                                                      - 95) ^ v527 ^ v682;
  LODWORD(STACK[0x2B0]) = v148;
  v149 = v148 ^ 0x200000AB;
  v150 = v148 ^ 0x200000AB ^ v597 ^ 0xA4 ^ v618 ^ 0x5B26DE7 ^ v529;
  LODWORD(STACK[0x2B4]) = v150;
  v151 = v150 ^ 0x85A6F04B ^ v139;
  v583 = BYTE2(v151);
  v152 = *(_DWORD *)(v102 + 4 * (BYTE2(v151) ^ 0x57u));
  v533 = BYTE1(v151);
  v153 = (1281043383 * v152 - ((-1732880530 * v152 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (BYTE1(v151) ^ 0x10u));
  v154 = HIBYTE(v151);
  v155 = v151;
  v156 = (v153 - ((2 * v153) & 0x27AE9460) + 332876336) ^ *(_DWORD *)(v110 + 4 * (v151 ^ 0x1Au)) ^ v149;
  v157 = *(unsigned __int8 *)(v105 + (v154 ^ 0xC7)) ^ ((HIBYTE(v151) ^ 0xC9)
                                                                      - ((2 * (HIBYTE(v151) ^ 0xC9)) & 0x42)
                                                                      - 95) ^ v151 ^ v156;
  v158 = v150 ^ 0x85A6F04B ^ v144 ^ 0x6209128F;
  v159 = v157 ^ 0x8C29CD8E ^ v150 ^ 0x85A6F04B;
  v160 = v157 ^ 0x8C29CD8E ^ v144 ^ 0x6209128F;
  v161 = ((v160 ^ v151) >> 16);
  v162 = *(_DWORD *)(v102 + 4 * (v161 ^ 0x1Bu));
  v660 = v160 ^ v151 ^ 0x74B7B629;
  v163 = ((unsigned __int16)(v160 ^ v151) >> 8);
  v164 = (1281043383 * v162 - ((-1732880530 * v162 + 885203464) & 0xFED2DAF2) + 432733821) ^ *(_DWORD *)(v108 + 4 * (v163 ^ 0xC1u));
  v165 = (v160 ^ v151);
  v166 = HIBYTE(v660) + 340595253 - ((v660 >> 23) & 0x76) + 6;
  v570 = *(unsigned __int8 *)(v105 + (v166 ^ 0x144D1235u)) ^ ((v166 ^ 0x3B)
                                                                             - ((2 * (v166 ^ 0x3B)) & 0x42)
                                                                             - 95) ^ 0x8D ^ *(_DWORD *)(v110 + 4 * (v165 ^ 0xDu)) ^ v165 ^ (v164 - ((2 * v164) & 0x27AE9460) + 332876336);
  v167 = *(_DWORD *)(v72 - 256);
  v168 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v167 ^ 0x433] - 12;
  v169 = *(_DWORD *)(v168 + 4 * (BYTE1(v156) ^ 0x1Du)) ^ 0xF0464855;
  v565 = v157 ^ 0x5C;
  v170 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v167 ^ 0x4ED];
  v171 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v167 ^ 0x75C] - 4;
  v172 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v167 ^ 0x780] - 8;
  LODWORD(STACK[0x248]) = *(_DWORD *)(v170 + 4 * (v157 ^ 0xEAu)) ^ v169 ^ *(_DWORD *)(v172 + 4 * (BYTE2(v156) ^ 0x4Bu)) ^ (*(_DWORD *)(v171 + 4 * (HIBYTE(v156) ^ 0xD)) + (HIBYTE(v156) ^ 0xAD154C0F) - 1070133362) ^ (((16 * v169) | 0x27572860) - ((32 * v169) & 0x2001A820) - 352662595) ^ ((BYTE2(v156) ^ 0x12) - ((2 * (HIWORD(v156) ^ 0x8512)) & 0xB0) - 1298559400);
  v173 = *(_DWORD *)(v168 + 4 * (BYTE1(v159) ^ 0xFAu)) ^ 0xF0464855;
  LODWORD(STACK[0x228]) = *(_DWORD *)(v172 + 4 * (BYTE2(v159) ^ 0x51u)) ^ *(_DWORD *)(v170
                                                                                      + 4
                                                                                      * (v159 ^ 0x90u)) ^ v173 ^ (*(_DWORD *)(v171 + 4 * (HIBYTE(v159) ^ 0xA)) + (HIBYTE(v159) ^ 0xAD154C08) - 1070133362) ^ ((BYTE2(v159) ^ 0x71) - 2 * ((HIWORD(v159) ^ 0x571) & 0x5E ^ HIWORD(v159) & 6) - 1298559400) ^ ((((16 * v173) | 0x27572860) + 889642109 + ((32 * v173) & 0x2001A820 ^ 0xB5F3EF3F)) | 1);
  v629 = v160;
  v553 = v160 ^ 0x7A;
  v652 = *(_DWORD *)(v168 + 4 * (((unsigned __int16)(v160 ^ 0x2F7A) >> 8) ^ 0x5Au)) ^ 0xF0464855;
  v650 = *(_DWORD *)(v171 + 4 * (((v160 ^ 0xF14C7788) >> 24) ^ 0x86))
       + (((v160 ^ 0xF14C7788) >> 24) ^ 0xAD154C84)
       - 1070133362;
  v174 = *(_DWORD *)(v168 + 4 * (v163 ^ 0x48u)) ^ 0xF0464855;
  LODWORD(STACK[0x20C]) = *(_DWORD *)(v170 + 4 * (v165 ^ 0xFBu)) ^ v174 ^ *(_DWORD *)(v172
                                                                                      + 4
                                                                                      * ((v161 ^ 0xF4)
                                                                                       - ((2 * (v161 ^ 0xF4)) & 0x1Au)
                                                                                       + 13)) ^ (((16 * v174) | 0x27572860)
                                                                                               - ((32 * v174) & 0x2001A820)
                                                                                               - 352662595) ^ ((v161 ^ 0xB7) - ((2 * (v161 ^ 0xB7)) & 0xB0) - 1298559400) ^ (*(_DWORD *)(v171 + 4 * (v166 ^ 0x144D128Fu)) + (v166 ^ 0xB9585E8D) - 1070133362);
  v638 = *(_DWORD *)(v168 + 4 * (BYTE1(v682) ^ 0xBu)) ^ 0xF0464855;
  v548 = LODWORD(STACK[0x2B0]) ^ 0xACD8094F;
  v636 = *(_DWORD *)(v171 + 4 * (HIBYTE(v548) ^ 0x86)) + (HIBYTE(v548) ^ 0xAD154C84) - 1070133362;
  v627 = *(_DWORD *)(v168 + 4 * (BYTE1(LODWORD(STACK[0x2B4])) ^ 0x6Du)) ^ 0xF0464855;
  v606 = *(_DWORD *)(v171 + 4 * (HIBYTE(LODWORD(STACK[0x2B4])) ^ 0xD8u))
       + (HIBYTE(LODWORD(STACK[0x2B4])) ^ 0xAD154CDA)
       - 1070133362;
  v175 = *(_DWORD *)(v168 + 4 * (BYTE1(v158) ^ 0x30u)) ^ 0xF0464855;
  v683 = *(_DWORD *)(v172 + 4 * (BYTE2(v158) ^ 0xB8u)) ^ *(_DWORD *)(v170 + 4 * (v158 ^ 0x33u)) ^ v175 ^ (*(_DWORD *)(v171 + 4 * (HIBYTE(v158) ^ 0x70)) + (HIBYTE(v158) ^ 0xAD154C72) - 1070133362) ^ ((BYTE2(v158) ^ 0x18) - 2 * ((HIWORD(v158) ^ 0xF618) & 0x5F ^ HIWORD(v158) & 7) - 1298559400) ^ (((16 * v175) | 0x27572860) - ((32 * v175) & 0x2001A820) - 352662595);
  v176 = *(_DWORD *)(v168 + 4 * (v533 ^ 0x4Fu)) ^ 0xF0464855;
  HIDWORD(v142) = *(_DWORD *)(v171 + 4 * (v154 ^ 0xDC)) + (v154 ^ 0xAD154CDE) - 1070133362;
  LODWORD(v142) = HIDWORD(v142);
  v584 = (v142 >> 30) ^ __ROR4__(*(_DWORD *)(v170 + 4 * (v155 ^ 0x54u)) ^ *(_DWORD *)(v172 + 4 * (v583 ^ 0xF2u)) ^ v176 ^ ((v583 ^ 0xFB) - ((2 * (v583 ^ 0xFB)) & 0xB0) - 1298559400) ^ 0x52F6D509 ^ (((16 * v176) | 0x27572860) - ((32 * v176) & 0x2001A820) - 352662595), 30) ^ 0xBD98E729;
  v177 = *(_DWORD *)(v168 + 4 * (BYTE1(v624) ^ 0x6Fu)) ^ 0xF0464855;
  v625 = *(_DWORD *)(v172 + 4 * (((v597 ^ 0xE3826D7D) >> 16) ^ 0xA0u)) ^ *(_DWORD *)(v170 + 4 * (v597 ^ 0xD2u)) ^ v177 ^ (*(_DWORD *)(v171 + 4 * (((v597 ^ 0xE3826D7D) >> 24) ^ 0x93)) + (((v597 ^ 0xE3826D7D) >> 24) ^ 0xAD154C91) - 1070133362) ^ (((v597 ^ 0xE3826D7D) >> 16) - ((v624 >> 15) & 0xB0) - 1298559400) ^ (((16 * v177) | 0x27572860) - ((2 * ((16 * v177) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  v598 = *(_DWORD *)(v168 + 4 * (BYTE1(LODWORD(STACK[0x2AC])) ^ 0x74u)) ^ 0xF0464855;
  v534 = LODWORD(STACK[0x2AC]) ^ 0x4C9A76B0;
  v178 = *(_DWORD *)(v168 + 4 * (BYTE1(v621) ^ 0xD9u));
  v588 = *(_DWORD *)(v171 + 4 * (HIBYTE(v534) ^ 0x86)) + (HIBYTE(v534) ^ 0xAD154C84) - 1070133362;
  v622 = v178 ^ 0xF0464855 ^ *(_DWORD *)(v170 + 4 * (v621 ^ 0xFDu)) ^ *(_DWORD *)(v172 + 4 * (((v621 ^ 0xDB69DB52) >> 16) ^ 0xA0u)) ^ (*(_DWORD *)(v171 + 4 * (((v621 ^ 0xDB69DB52) >> 24) ^ 0x86)) + (((v621 ^ 0xDB69DB52) >> 24) ^ 0xAD154C84) - 1070133362) ^ (((v621 ^ 0xDB69DB52) >> 16) - (((v621 ^ 0xDB69DB52) >> 15) & 0xB0) - 1298559400) ^ (((16 * (v178 ^ 0xF0464855)) | 0x27572860) - ((32 * (v178 ^ 0xF0464855)) & 0x2001A820) - 352662595);
  v179 = *(_DWORD *)(v168 + 4 * (v573 ^ 0x68u)) ^ 0xF0464855;
  v180 = v618 ^ 0x936A0CEB;
  LODWORD(v154) = v618 ^ 0xAD;
  v619 = *(_DWORD *)(v170 + 4 * (v527 ^ 0x60u)) ^ *(_DWORD *)(v172 + 4 * (v567 ^ 0xAFu)) ^ v179 ^ (*(_DWORD *)(v171 + 4 * (v526 ^ 0x66)) + (v526 ^ 0xAD154C64) - 1070133362) ^ ((v567 ^ 0xD89E6EC6) - 1298559399 + ((2 * (v567 ^ 0xD89E6EC6)) & 0xB0 ^ 0xDECFE3FF)) ^ 0x8A68BB69 ^ (((16 * v179) | 0x27572860) - ((2 * ((16 * v179) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  v181 = *(_DWORD *)(v168 + 4 * (BYTE1(v615) ^ 0xE0u)) ^ 0xF0464855;
  v616 = *(_DWORD *)(v172 + 4 * (BYTE2(v180) ^ 0x23u)) ^ *(_DWORD *)(v170 + 4 * v154) ^ v181 ^ (*(_DWORD *)(v171 + 4 * (HIBYTE(v180) ^ 0xE7)) + (HIBYTE(v180) ^ 0xAD154CE5) - 1070133362) ^ (BYTE2(v180) - ((v180 >> 15) & 0xB0) - 1298559400) ^ (((16 * v181) | 0x27572860) - ((2 * ((16 * v181) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  LOBYTE(v526) = v516 ^ 0xFE;
  v574 = *(_DWORD *)(v168 + 4 * (((unsigned __int16)(v516 ^ 0xEFFE) >> 8) ^ 0x33u)) ^ 0xF0464855;
  v568 = *(_DWORD *)(v171 + 4 * (((v516 ^ 0xF2260B75) >> 24) ^ 0x74))
       + (((v516 ^ 0xF2260B75) >> 24) ^ 0xAD154C76)
       - 1070133362;
  v182 = *(_DWORD *)(v168 + 4 * (BYTE1(v613) ^ 0xE5u)) ^ 0xF0464855;
  v614 = *(_DWORD *)(v172 + 4 * (((v613 ^ 0xC8C1E74B) >> 16) ^ 0xA0u)) ^ *(_DWORD *)(v170 + 4 * (v613 ^ 0xE4u)) ^ v182 ^ (*(_DWORD *)(v171 + 4 * (((v613 ^ 0xC8C1E74B) >> 24) ^ 0x71)) + (((v613 ^ 0xC8C1E74B) >> 24) ^ 0xAD154C73) - 1070133362) ^ (((v613 ^ 0xC8C1E74B) >> 16) - (((v613 ^ 0xC8C1E74B) >> 15) & 0xB0) - 1298559400) ^ (((16 * v182) | 0x27572860) - ((32 * v182) & 0x2001A820) - 352662595);
  v183 = *(_DWORD *)(v168 + 4 * (v523 ^ 0x2Fu)) ^ 0xF0464855;
  v612 = *(_DWORD *)(v172 + 4 * (v611 ^ 0x6Cu)) ^ *(_DWORD *)(v170 + 4 * (v519 ^ 0xCBu)) ^ v183 ^ (*(_DWORD *)(v171 + 4 * (v522 ^ 0x30)) + (v522 ^ 0xAD154C32) - 1070133362) ^ ((v611 ^ 0xB1) - ((2 * (v611 ^ 0xB1)) & 0xB0) - 1298559400) ^ (((16 * v183) | 0x27572860) - ((32 * v183) & 0x2001A820) - 352662595);
  v184 = *(_DWORD *)(v168 + 4 * (BYTE1(v608) ^ 0xA5u)) ^ 0xF0464855;
  v185 = *(_DWORD *)(v168 + 4 * (BYTE1(v529) ^ 0xFDu));
  v609 = *(_DWORD *)(v170 + 4 * (v603 ^ 0xE4u)) ^ (((v603 ^ 0x104DA74Bu) >> 16)
                                                                    - (((v603 ^ 0x104DA74Bu) >> 15) & 0xB0)
                                                                    - 1298559400) ^ v184 ^ *(_DWORD *)(v172 + 4 * (((v603 ^ 0x104DA74Bu) >> 16) ^ 0xA0u)) ^ ((((v603 ^ 0x104DA74Bu) >> 24) ^ 0xAD154C84) - 1070133362 + *(_DWORD *)(v171 + 4 * (((v603 ^ 0x104DA74Bu) >> 24) ^ 0x86))) ^ (((16 * v184) | 0x27572860) - ((2 * ((16 * v184) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  v604 = *(_DWORD *)(v170 + 4 * (v529 ^ 0xE7u)) ^ (((v529 ^ 0x86BCFF48) >> 16)
                                                                    - (((v529 ^ 0x86BCFF48) >> 15) & 0xB0)
                                                                    - 1298559400) ^ *(_DWORD *)(v172
                                                                                              + 4
                                                                                              * (((v529 ^ 0x86BCFF48) >> 16) ^ 0xA0u)) ^ v185 ^ 0xF0464855 ^ ((((v529 ^ 0x86BCFF48) >> 24) ^ 0xAD154C84) - 1070133362 + *(_DWORD *)(v171 + 4 * (((v529 ^ 0x86BCFF48) >> 24) ^ 0x86))) ^ (((16 * (v185 ^ 0xF0464855)) | 0x27572860) - ((32 * (v185 ^ 0xF0464855)) & 0x2001A820) - 352662595);
  v186 = *(_DWORD *)(v168 + 4 * (BYTE1(v595) ^ 0xAFu)) ^ 0xF0464855;
  v596 = *(_DWORD *)(v170 + 4 * (v595 ^ 0xD3u)) ^ (((v595 ^ 0xA631AD7C) >> 16)
                                                                    - (((v595 ^ 0xA631AD7C) >> 15) & 0xB0)
                                                                    - 1298559400) ^ *(_DWORD *)(v172
                                                                                              + 4
                                                                                              * (((v595 ^ 0xA631AD7C) >> 16) ^ 0xA0u)) ^ v186 ^ ((((v595 ^ 0xA631AD7C) >> 24) ^ 0xAD154C84) - 1070133362 + *(_DWORD *)(v171 + 4 * (((v595 ^ 0xA631AD7C) >> 24) ^ 0x86))) ^ (((16 * v186) | 0x27572860) - ((2 * ((16 * v186) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  v544 = *(_DWORD *)(v168 + 4 * (v543 ^ 0x3Au)) ^ 0xF0464855;
  LODWORD(v522) = v539 ^ 0xD1;
  v530 = v539 - ((2 * v541) & 0xB0);
  v542 = (v536 ^ 0x2CEC1BCE) - 1070133362 + *(_DWORD *)(v171 + 4 * (v536 ^ 0x81F957CC));
  v187 = ((v516 ^ 0xF2260B75) >> 16);
  v524 = v187 - ((v516 >> 15) & 0xB0);
  v517 = v187 ^ 0x7B;
  v540 = *(_DWORD *)(v168 + 4 * (BYTE1(v672) ^ 0x7Bu)) ^ 0xF0464855;
  v188 = (((16 * v540) | 0x27572860) - ((2 * ((16 * v540) | 0x27572860)) & 0x6A0DB8E0) + 889642109) ^ *(_DWORD *)(v170 + 4 * (v672 ^ 0x2Fu));
  v510 = (BYTE2(v672) ^ 0x8F) - ((2 * (HIWORD(v672) ^ 0x78F)) & 0x15A);
  v512 = v188 - ((2 * v188) & 0x65331CB0);
  v537 = (HIBYTE(v672) ^ 0xAD154C83) - 1070133362 + *(_DWORD *)(v171 + 4 * (HIBYTE(v672) ^ 0x81));
  v514 = ((v160 ^ 0xF14C7788) >> 16) - (((v160 ^ 0xF14C7788) >> 15) & 0xB0);
  v508 = ((v160 ^ 0xF14C7788) >> 16) ^ 0xA2;
  v673 = *(_DWORD *)(v168
                   + 4 * (((BYTE1(v576) ^ 0x55) + 2 * ((v576 >> 8) & 0xA0) - 4 * ((v576 >> 8) & 0xA0) + 160) ^ 0xA2)) ^ 0xF0464855;
  v577 = *(_DWORD *)(v170 + 4 * (v576 ^ 0x6Cu)) ^ ((BYTE2(v576) ^ 0x5E)
                                                                    - ((2 * (HIWORD(v576) ^ 0xEE5E)) & 0xB0)
                                                                    - 1298559400) ^ ((HIBYTE(v576) ^ 0xAD154C6A)
                                                                                   - 1070133362
                                                                                   + *(_DWORD *)(v171
                                                                                               + 4
                                                                                               * (HIBYTE(v576) ^ 0x68))) ^ *(_DWORD *)(v172 + 4 * (BYTE2(v576) ^ 0xBu)) ^ (((16 * v673) | 0x27572860) - ((32 * v673) & 0x2001A820) - 352662595);
  v189 = *(_DWORD *)(v168 + 4 * (BYTE1(v558) ^ 0xCBu)) ^ 0xF0464855;
  v190 = *(_DWORD *)(v168 + 4 * (v678 ^ 0xF0u));
  v679 = *(_DWORD *)(v170 + 4 * (v558 ^ 0xDFu)) ^ (((v558 ^ 0x78E5C970u) >> 16)
                                                                    - (((v558 ^ 0x78E5C970u) >> 15) & 0xB0)
                                                                    - 1298559400) ^ *(_DWORD *)(v172
                                                                                              + 4
                                                                                              * (((v558 ^ 0x78E5C970u) >> 16) ^ 0xA0u)) ^ v189 ^ ((((v558 ^ 0x78E5C970u) >> 24) ^ 0xAD154C84) - 1070133362 + *(_DWORD *)(v171 + 4 * (((v558 ^ 0x78E5C970u) >> 24) ^ 0x86))) ^ (((16 * v189) | 0x27572860) - ((2 * ((16 * v189) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  v191 = ((16 * (v190 ^ 0xF0464855)) | 0x27572860) - ((2 * ((16 * (v190 ^ 0xF0464855)) | 0x27572860)) & 0x6A0DB8E0);
  v506 = LODWORD(STACK[0x2B0]) ^ 0x5C;
  v192 = *(_DWORD *)(v170 + 4 * (v550 ^ 0x3Au)) ^ ((v563 ^ 0xC9)
                                                   - 2 * ((v563 ^ 0xC9) & 0x5C ^ HIWORD(v546) & 4)
                                                   - 1298559400) ^ v190 ^ 0xF0464855 ^ *(_DWORD *)(v172
                                                                                                 + 4 * (v563 ^ 0x57u)) ^ ((v560 ^ 0xAD154CB8) - 1070133362 + *(_DWORD *)(v171 + 4 * (v560 ^ 0xBA)));
  v193 = *(_DWORD *)(v168 + 4 * (BYTE1(v676) ^ 0xCCu));
  v564 = v192 ^ (v191 + 889642109);
  v677 = *(_DWORD *)(v170 + 4 * (v571 ^ 0x9Du)) ^ ((BYTE2(v676) ^ 0x65)
                                                   - ((2 * (HIWORD(v676) ^ 0xB265)) & 0xB0)
                                                   - 1298559400) ^ *(_DWORD *)(v172 + 4 * (BYTE2(v676) ^ 0xD4u)) ^ v193 ^ 0xF0464855 ^ ((HIBYTE(v676) ^ 0xAD154C67) - 1070133362 + *(_DWORD *)(v171 + 4 * (HIBYTE(v676) ^ 0x65))) ^ (((16 * (v193 ^ 0xF0464855)) | 0x27572860) - ((32 * (v193 ^ 0xF0464855)) & 0x2001A820) - 352662595);
  v504 = v579 ^ 0x2D;
  v194 = v579 ^ 0x903D1AB6;
  v195 = *(_DWORD *)(v168 + 4 * (BYTE1(v579) ^ 0xC7u)) ^ 0xF0464855;
  LODWORD(STACK[0x2B0]) = v195;
  v580 = (HIBYTE(v194) ^ 0xAD154C29) - 1070133362 + *(_DWORD *)(v171 + 4 * (HIBYTE(v194) ^ 0x2B));
  v196 = *(_DWORD *)(v168 + 4 * (((unsigned __int16)(v581 ^ 0x42E8) >> 8) ^ 0xC0u)) ^ 0xF0464855;
  v582 = *(_DWORD *)(v170 + 4 * (v581 ^ 0x4Fu)) ^ (((v581 ^ 0xD32F80E0) >> 16)
                                                                    - (((v581 ^ 0xD32F80E0) >> 15) & 0xB0)
                                                                    - 1298559400) ^ *(_DWORD *)(v172
                                                                                              + 4
                                                                                              * (((v581 ^ 0xD32F80E0) >> 16) ^ 0xA0u)) ^ v196 ^ ((((v581 ^ 0xD32F80E0) >> 24) ^ 0xAD154C84) - 1070133362 + *(_DWORD *)(v171 + 4 * (((v581 ^ 0xD32F80E0) >> 24) ^ 0x86))) ^ (((16 * v196) | 0x27572860) - ((32 * v196) & 0x2001A820) - 352662595);
  v590 = *(_DWORD *)(v168 + 4 * (v589 ^ 0x12u)) ^ 0xF0464855;
  v197 = *(_DWORD *)(v172 + 4 * (v600 ^ 0xABu));
  v601 = ((v586 ^ 0xAD154C10) - 1070133362 + *(_DWORD *)(v171 + 4 * (v586 ^ 0x12))) ^ *(_DWORD *)(v170 + 4 * (v592 ^ 0xE6u)) ^ ((v197 ^ 0xB2998E58) + (v600 ^ 0xD89E6EC2) - 2 * ((v197 ^ 0x10980E58) & (v600 ^ 0xD89E6EC2))) ^ (((16 * v590) | 0x27572860) - ((32 * v590) & 0x2001A820) - 352662595);
  v198 = v630 ^ 0x1B32E9CB;
  v646 = *(_DWORD *)(v168 + 4 * (BYTE1(v645) ^ 0xEBu)) ^ 0xF0464855;
  v199 = ((v630 ^ 0x1B32E9CBu) >> 24) - (((v630 ^ 0x1B32E9CBu) >> 23) & 4) + 1969367554;
  LODWORD(v154) = ((v633 | 0xFDFFFFFF) + 1070145724) ^ v633 & 0xFDFFFFFF;
  v200 = *(_DWORD *)(v168 + 4 * (((unsigned __int16)(v633 ^ 0x20BB) >> 8) ^ 0x10u));
  v634 = (v199 ^ 0xD8776693)
       - 1070133362
       + *(_DWORD *)(v171 + 4 * ((v199 ^ 0x75622A02) + ((2 * v199) & 0x126 ^ 0xFFFFFFFB) + 148));
  v201 = v640 ^ 0xBE;
  v593 = *(_DWORD *)(v170 + 4 * (v154 ^ 0x34u)) ^ ((BYTE2(v154) ^ 0x3C)
                                                                    - ((2 * (WORD1(v154) ^ 0xBC3C)) & 0xB0)
                                                                    - 1298559400) ^ v200 ^ 0xF0464855 ^ *(_DWORD *)(v172 + 4 * (BYTE2(v154) ^ 0x9Cu)) ^ ((BYTE3(v154) ^ 0xAD154C38) - 1070133362 + *(_DWORD *)(v171 + 4 * (BYTE3(v154) ^ 0x3A))) ^ (((16 * (v200 ^ 0xF0464855)) | 0x27572860) - ((2 * ((16 * (v200 ^ 0xF0464855)) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  v202 = v640 ^ 0x25458011;
  v641 = *(_DWORD *)(v168 + 4 * (BYTE1(v640) ^ 0x82u)) ^ 0xF0464855;
  v572 = (HIBYTE(v202) ^ 0xAD154C84) - 1070133362 + *(_DWORD *)(v171 + 4 * (HIBYTE(v202) ^ 0x86));
  v658 = *(_DWORD *)(v168 + 4 * (v657 ^ 0x52u)) ^ 0xF0464855;
  v203 = (v662 ^ 0x25) - ((v648 >> 15) & 0xB0);
  v655 = (v654 ^ 0xAD154C3C) - 1070133362 + *(_DWORD *)(v171 + 4 * (v654 ^ 0x3E));
  v204 = *(_DWORD *)(v168 + 4 * (BYTE1(v674) ^ 0xC5u)) ^ 0xF0464855;
  v205 = v204 ^ *(_DWORD *)(v170 + 4 * (v667 ^ 0x3Fu)) ^ (((16 * v204) | 0x27572860)
                                                                           - ((32 * v204) & 0x2001A820)
                                                                           - 352662595);
  v649 = (v205 ^ 0x8A68BB69) & 0x2A97C323;
  v561 = (v205 ^ 0xA0FF784A) + (v205 ^ 0x8A68BB69 | 0xD5683CDC);
  v206 = ((v670 ^ 0x5804C7CCu) >> 16);
  v207 = (v206 ^ 0xAD) - ((2 * (v206 ^ 0xAD)) & 0xC8) - 660705692;
  v208 = ((v670 ^ 0x5804C7CCu) >> 24) - (((v670 ^ 0x5804C7CCu) >> 23) & 0x76) - 203712453;
  v551 = v207 - 1298559399 + ((2 * (v207 & 0x25A ^ (((v670 ^ 0x5804C7CCu) >> 16) | 0xFFFFFFFD))) ^ 0x21301805);
  v521 = (v208 ^ 0x5ECED4AA)
       - 1070133362
       + *(_DWORD *)(v171 + 4 * ((v208 ^ 0xF3DB983B) + ((2 * v208) & 0x126 ^ 0xFFFFFFD9) + 148));
  v209 = *(_DWORD *)(v168 + 4 * (BYTE1(v665) ^ 0x92u)) ^ 0xF0464855;
  LODWORD(v586) = *(_DWORD *)(v170 + 4 * (v665 ^ 0xD6u)) ^ ((BYTE2(v665) ^ 0x44)
                                                                             - 2
                                                                             * ((HIWORD(v665) ^ 0xBE44) & 0x59 ^ HIWORD(v665) & 1)
                                                                             - 1298559400) ^ v209 ^ *(_DWORD *)(v172 + 4 * (BYTE2(v665) ^ 0x49u)) ^ ((HIBYTE(v665) ^ 0xAD154C87) - 1070133362 + *(_DWORD *)(v171 + 4 * (HIBYTE(v665) ^ 0x85))) ^ (((16 * v209) | 0x27572860) - ((32 * v209) & 0x2001A820) - 352662595);
  v210 = *(_DWORD *)(v168 + 4 * (BYTE1(v684) ^ 0xB0u)) ^ 0xF0464855;
  v211 = ((16 * v210) | 0x27572860) - ((2 * ((16 * v210) | 0x27572860)) & 0x6A0DB8E0);
  v212 = (((v684 ^ 0xE8DCB22F) >> 24) ^ 0xAD154C84)
       - 1070133362
       + *(_DWORD *)(v171 + 4 * (((v684 ^ 0xE8DCB22F) >> 24) ^ 0x86));
  v213 = *(_DWORD *)(v170 + 4 * (v684 ^ 0x80u)) ^ (((v684 ^ 0xE8DCB22F) >> 16)
                                                                    - (((v684 ^ 0xE8DCB22F) >> 15) & 0xB0)
                                                                    - 1298559400) ^ *(_DWORD *)(v172
                                                                                              + 4
                                                                                              * (((v684 ^ 0xE8DCB22F) >> 16) ^ 0xA0u)) ^ v210;
  v501 = *(_DWORD *)(v170 + 4 * (v553 ^ 0x5Du));
  v214 = v570 ^ v565;
  v668 = *(_DWORD *)(v170 + 4 * (v506 ^ 0xBCu));
  v215 = v570 ^ LODWORD(STACK[0x2B4]);
  v216 = HIWORD(LODWORD(STACK[0x2B4])) ^ 0x5E3B;
  v492 = *(_DWORD *)(v170 + 4 * (LODWORD(STACK[0x2B4]) ^ 0xBFu));
  v507 = *(_DWORD *)(v170 + 4 * (LODWORD(STACK[0x2AC]) ^ 0x1Fu));
  v532 = *(_DWORD *)(v170 + 4 * (v526 ^ 0x68u));
  v505 = *(_DWORD *)(v170 + 4 * (v643 ^ 0xF5u));
  LODWORD(STACK[0x2B4]) = *(_DWORD *)(v170 + 4 * v504);
  v502 = *(_DWORD *)(v170 + 4 * (v630 ^ 0x64u));
  v503 = *(_DWORD *)(v170 + 4 * v201);
  v685 = v213 ^ v212 ^ (v211 + 889642109);
  v499 = *(_DWORD *)(v170 + 4 * (v680 ^ 0xECu));
  v217 = *(_DWORD *)(v170 + 4 * (v688 ^ 0x60u));
  LODWORD(v170) = *(_DWORD *)(v168 + 4 * (v686 ^ 0x9Du)) ^ 0xF0464855;
  LODWORD(STACK[0x2AC]) = ((16 * v195) | 0x27572860) - ((2 * ((16 * v195) | 0x27572860)) & 0x6A0DB8E0) + 889642109;
  v496 = *(_DWORD *)(v172 + 4 * v508);
  v490 = *(_DWORD *)(v172 + 4 * (BYTE2(v548) ^ 0x18u));
  v488 = *(_DWORD *)(v172 + 4 * (v216 ^ 0xA0u));
  v509 = *(_DWORD *)(v172 + 4 * (BYTE2(v534) ^ 0xA0u));
  v520 = *(_DWORD *)(v172 + 4 * v517);
  v500 = *(_DWORD *)(v172 + 4 * v522);
  v487 = v510 + 173;
  v489 = *(_DWORD *)(v172 + 4 * ((v510 + 173) ^ 0xDu));
  v631 = *(_DWORD *)(v172 + 4 * (BYTE2(v194) ^ 0x68u));
  v497 = *(_DWORD *)(v172 + 4 * (BYTE2(v198) ^ 0xA0u));
  v511 = *(_DWORD *)(v172 + 4 * (BYTE2(v202) ^ 0xA0u));
  v495 = *(_DWORD *)(v172 + 4 * (v662 ^ 0x42u));
  v491 = *(_DWORD *)(v172 + 4 * (v206 ^ 0xA0u));
  v494 = v514 - 1298559400;
  v663 = BYTE2(v548) - ((v548 >> 15) & 0xB0) - 1298559400;
  v515 = BYTE2(v534) - ((v534 >> 15) & 0xB0) - 1298559400;
  v518 = v524 - 1298559400;
  v498 = v530 - 1298559400;
  v485 = v512 - 1298559400;
  LODWORD(v522) = BYTE2(v194) - ((v194 >> 15) & 0xB0) - 1298559400;
  v513 = BYTE2(v202) - ((v202 >> 15) & 0xB0) - 1298559400;
  v493 = v203 - 1298559400;
  LODWORD(STACK[0x210]) = v217 ^ ((LODWORD(STACK[0x210]) ^ 0xA0) - ((v688 >> 15) & 0xB0) - 1298559400) ^ *(_DWORD *)(v172 + 4 * (LODWORD(STACK[0x210]) ^ 0x1Bu)) ^ v170 ^ ((STACK[0x200] ^ 0xAD154C13) - 1070133362 + *(_DWORD *)(v171 + 4 * (STACK[0x200] ^ 0x11))) ^ (((16 * v170) | 0x27572860) - ((2 * ((16 * v170) | 0x27572860)) & 0x6A0DB8E0) + 889642109);
  v218 = WORD1(STACK[0x218]);
  v219 = *(_DWORD *)(v72 - 256);
  v220 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v219 ^ 0x602] - 8;
  v221 = *(_DWORD *)(v220 + 4 * (((v218 ^ 0x1FB0) & 0x23 | v218 & 0xDC) ^ 0x14)) ^ ((v218 ^ 0xAB)
                                                                                    + 271566262
                                                                                    + ((2
                                                                                      * (v218 ^ 0xAB)
                                                                                      + 408) & 0x1D2 ^ 0xDF7FBFFF));
  v222 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v219 ^ 0x795];
  v223 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v219 ^ 0x777];
  v224 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v219 ^ 0x442] - 4;
  v486 = STACK[0x280] ^ *(unsigned __int8 *)(v222 + (STACK[0x280] ^ 0xAD)) ^ ((BYTE1(STACK[0x220]) ^ 0x67)
                                                                            - ((2 * ((STACK[0x220] >> 8) ^ 0x1FB067)) & 0xB4)
                                                                            - 311313574) ^ STACK[0x288] ^ *(_DWORD *)(v223 + 4 * (STACK[0x288] ^ 0xDFu)) ^ *(_DWORD *)(v224 + 4 * (BYTE1(STACK[0x220]) ^ 0x22)) ^ (v221 - ((2 * v221) & 0x8BA5B192) + 1171445961);
  v225 = (STACK[0x240] >> 8) ^ 0x28D71E;
  LODWORD(v170) = *(_DWORD *)(v220 + 4 * (BYTE2(STACK[0x238]) ^ 0x48u)) ^ ((BYTE2(STACK[0x238]) ^ 0xD7)
                                                                           + 271566262
                                                                           + ((2 * (WORD1(STACK[0x238]) ^ 0x28D7) + 408) & 0x1D2 ^ 0xDF7FBFFF));
  LODWORD(STACK[0x240]) = v170 - ((2 * v170) & 0x8BA5B192);
  LODWORD(STACK[0x288]) = STACK[0x278] ^ 0x3B ^ *(unsigned __int8 *)(v222 + (STACK[0x278] ^ 0x56));
  LODWORD(v170) = *(_DWORD *)(v220 + 4 * (BYTE2(LODWORD(STACK[0x230])) ^ 0x72u)) ^ ((BYTE2(LODWORD(STACK[0x230])) ^ 0xED)
                                                                                    + 271566262
                                                                                    + ~((2
                                                                                       * (BYTE2(LODWORD(STACK[0x230])) ^ 0xED)
                                                                                       + 936264088) & 0x208041D2));
  v556 = v170 - ((2 * v170) & 0x8BA5B192);
  v226 = STACK[0x230];
  v227 = (LODWORD(STACK[0x230]) >> 8) ^ 0x22F608;
  LODWORD(STACK[0x238]) = v227 & 0x5E ^ (LODWORD(STACK[0x230]) >> 8) & 4;
  LODWORD(STACK[0x280]) = STACK[0x270] ^ 0x58 ^ *(unsigned __int8 *)(v222 + (STACK[0x270] ^ 0xFC));
  LODWORD(v170) = *(_DWORD *)(v220 + 4 * (STACK[0x268] ^ 0x92)) ^ ((STACK[0x268] ^ 0xD)
                                                                                 + 271566262
                                                                                 + ((2
                                                                                   * (((STACK[0x268] ^ 0xD) + 204) & 0xEB ^ ((STACK[0x260] >> 16) | 0xFFFFFFFD))) ^ 0x20804005));
  v228 = *(_DWORD *)(v223 + 4 * (STACK[0x2B8] ^ 0x24)) ^ ((LODWORD(STACK[0x254]) ^ 0x9F)
                                                                        - ((2 * (LODWORD(STACK[0x254]) ^ 0x9F)) & 0xB4)
                                                                        - 311313574) ^ *(_DWORD *)(v224
                                                                                                 + 4
                                                                                                 * (LODWORD(STACK[0x254]) ^ 0x56u)) ^ STACK[0x258] ^ 9 ^ *(_BYTE *)(v222 + (STACK[0x258] ^ 0xAD)) ^ (v170 - ((2 * v170) & 0x8BA5B192) + 1171445961);
  v484 = v228 - ((2 * v228) & 0xA23A0510) + 1360855688;
  LODWORD(STACK[0x220]) = (((v570 ^ v565) >> 16) ^ 0x8B) + 468132044;
  LODWORD(STACK[0x218]) = ((v570 ^ v565 ^ 0xCA)
                                          - 2 * ((v570 ^ v565 ^ 0xCA) & 0xCF ^ (v570 ^ v565) & 1)
                                          + 78) ^ 0xA5 ^ *(unsigned __int8 *)(v222
                                                                            + ((v570 ^ v565) ^ 0x85));
  v229 = *(_DWORD *)(v220 + 4 * (BYTE2(v215) ^ 0xE0u)) ^ ((BYTE2(v215) ^ 0x7F)
                                                          + 271566262
                                                          + ((2 * (BYTE2(v215) ^ 0x7F) + 408) & 0x1D2 ^ 0xDF7FBFFF));
  LODWORD(v171) = v229 - ((2 * v229) & 0x8BA5B192);
  v230 = v215 ^ v629;
  LODWORD(v172) = v215 ^ 0x6D64FC6D;
  LODWORD(STACK[0x200]) = ((v215 ^ 0xDA) - 2 * ((v215 ^ 0xDA) & 0xCF ^ v215 & 1) + 78) ^ 0x81 ^ *(unsigned __int8 *)(v222 + (v215 ^ 0xB1));
  v231 = *(_DWORD *)(v220 + 4 * (BYTE2(v230) ^ 0x2Fu)) ^ ((BYTE2(v230) ^ 0xB0)
                                                          + 271566262
                                                          + ((2 * (BYTE2(v230) ^ 0xB0) + 408) & 0x1D2 ^ 0xDF7FBFFF));
  v232 = ((v230 ^ 0xCD) - ((2 * (v230 ^ 0xCD)) & 0x9C) + 78) ^ *(unsigned __int8 *)(v222 + (v230 ^ 0x64));
  v233 = v230 ^ v660;
  v234 = ((BYTE1(v230) ^ 0x74) - ((2 * ((v230 >> 8) ^ 0x49AB74)) & 0xB4) - 311313574) ^ HIBYTE(v230) ^ *(_DWORD *)(v223 + 4 * (HIBYTE(v230) ^ 0x89));
  LODWORD(STACK[0x270]) = *(_DWORD *)(v223 + 4 * (STACK[0x290] ^ 0xDA));
  LODWORD(STACK[0x278]) = HIBYTE(v226);
  LODWORD(STACK[0x290]) = *(_DWORD *)(v223 + 4 * (HIBYTE(v226) ^ 0xE2));
  v687 = *(_DWORD *)(v223 + 4 * (((v570 ^ v565) >> 24) ^ 0x58));
  v235 = BYTE3(v172);
  v566 = *(_DWORD *)(v223 + 4 * (BYTE3(v172) ^ 0xC0));
  v681 = (v230 ^ v660) >> 24;
  v689 = *(_DWORD *)(v223 + 4 * (v681 ^ 0x13));
  v236 = v232 ^ v234 ^ *(_DWORD *)(v224 + 4 * (BYTE1(v230) ^ 0x31u)) ^ (v231 - ((2 * v231) & 0x8BA5B192) + 1171445961);
  v554 = *(_DWORD *)(v220 + 4 * (BYTE2(v214) ^ 0x14u));
  v237 = *(_DWORD *)(v220 + 4 * (BYTE2(v233) ^ 0xE5u)) ^ ((BYTE2(v233) ^ 0x7A)
                                                          + 271566262
                                                          + ((2 * (BYTE2(v233) ^ 0x7A) + 408) & 0x1D2 ^ 0xDF7FBFFF));
  LODWORD(STACK[0x260]) = LODWORD(STACK[0x240]) + 1171445961;
  LODWORD(STACK[0x268]) = v556 + 1171445961;
  v549 = v171 + 1171445961;
  v557 = v237 - ((2 * v237) & 0x8BA5B192) + 1171445961;
  LODWORD(STACK[0x254]) = *(_DWORD *)(v224 + 4 * (v225 ^ 0x45));
  LODWORD(v171) = v227 - 2 * LODWORD(STACK[0x238]);
  LODWORD(STACK[0x258]) = *(_DWORD *)(v224 + 4 * (v227 ^ 0x45u));
  v538 = *(_DWORD *)(v224 + 4 * (BYTE1(v214) ^ 0x7Au));
  v528 = *(_DWORD *)(v224 + 4 * (BYTE1(v172) ^ 0x45u));
  v547 = *(_DWORD *)(v224 + 4 * (((unsigned __int16)(v230 ^ v660) >> 8) ^ 0xFCu));
  LODWORD(v224) = *(unsigned __int8 *)(v222 + ((v230 ^ v660) ^ 0x94));
  LODWORD(STACK[0x238]) = v225 - ((2 * v225) & 0xB4) - 311313574;
  LODWORD(STACK[0x240]) = v171 - 311313574;
  v525 = BYTE1(v172) - ((v172 >> 7) & 0xB4) - 311313574;
  v535 = (BYTE1(v233) ^ 0xB9) - 2 * (((v233 >> 8) ^ 0xD361B9) & 0x5E ^ (v233 >> 8) & 4) - 311313574;
  v531 = v224 ^ ((v233 ^ 0xCD) - ((2 * (v233 ^ 0xCD)) & 0x9C) + 78);
  v666 = v489 ^ v487 ^ v540 ^ v537 ^ v485;
  v664 = v668 ^ v490 ^ v638 ^ v636 ^ v663 ^ 0xA6637706 ^ (((16 * v638) | 0x27572860)
                                                        - ((2 * ((16 * v638) | 0x27572860)) & 0x6A0DB8E0)
                                                        + 889642109);
  v671 = v492 ^ v627 ^ v488 ^ v606 ^ (v216 - ((2 * v216) & 0xB0) - 1298559400) ^ (((16 * v627) | 0x27572860)
                                                                                                 - ((32 * v627) & 0x2001A820)
                                                                                                 - 352662595) ^ 0x88F3C389;
  v669 = __ROR4__(v584, 2) ^ 0x716BB799;
  v238 = (v666 ^ 0x542F7070) + (v679 ^ 0xAE9EE2F2) - v664 - (v669 + v671) + 983592466;
  v239 = v501 ^ v496 ^ v652 ^ v650 ^ v494 ^ 0xC12B478C ^ (((16 * v652) | 0x27572860)
                                                        - ((2 * ((16 * v652) | 0x27572860)) & 0x6A0DB8E0)
                                                        + 889642109);
  LODWORD(v223) = v493 ^ v499 ^ v495 ^ v658 ^ v655 ^ 0x279A8BB3 ^ (((16 * v658) | 0x27572860)
                                                                 - ((2 * ((16 * v658) | 0x27572860)) & 0x6A0DB8E0)
                                                                 + 889642109);
  v240 = v498 ^ v505 ^ v544 ^ v500 ^ v542 ^ 0xD1CADE2E ^ (((16 * v544) | 0x27572860)
                                                        - ((2 * ((16 * v544) | 0x27572860)) & 0x6A0DB8E0)
                                                        + 889642109);
  v653 = v502 ^ (BYTE2(v198) - ((v198 >> 15) & 0xB0) - 1298559400) ^ v646 ^ v497 ^ (((16 * v646) | 0x27572860)
                                                                                  - ((32 * v646) & 0x2001A820)
                                                                                  - 352662595) ^ v634;
  v651 = v503 ^ v513 ^ v511 ^ v641 ^ v572 ^ (((16 * v641) | 0x27572860) - ((32 * v641) & 0x2001A820) - 352662595);
  v659 = v239;
  v656 = v223;
  v661 = v551 ^ v491 ^ v649 ^ v521 ^ (v561 + 1) ^ 0x24210630;
  v241 = v240
       + (v238 ^ 0xBBE4BDE0)
       + ((2 * v238) & 0x77C97BC0)
       + (v653 ^ 0xBFEF4379)
       + v239
       - (v651 ^ 0x38E485F)
       - v223
       - v661
       + 1345309669;
  v647 = v507 ^ v509 ^ v598 ^ v588 ^ v515 ^ (((16 * v598) | 0x27572860) - ((32 * v598) & 0x2001A820) - 352662595) ^ 0x71D057C5;
  v644 = v532 ^ v520 ^ v574 ^ v568 ^ v518 ^ 0x975D6693 ^ (((16 * v574) | 0x27572860)
                                                        - ((2 * ((16 * v574) | 0x27572860)) & 0x6A0DB8E0)
                                                        + 889642109);
  v242 = v241 - 1412964480 + (~(2 * v241) | 0xA87040FF) + 1;
  v243 = v644 + v647 + (v486 ^ 0x34BD15E4) + 1247477662 + (v242 ^ 0xABC7DF80);
  v244 = v243 - 130659620 - ((2 * v243) & 0xF06C95B8);
  LODWORD(v172) = v522 ^ LODWORD(STACK[0x2B4]) ^ v631 ^ LODWORD(STACK[0x2B0]) ^ v580 ^ 0x2A2A73D7 ^ LODWORD(STACK[0x2AC]);
  v245 = STACK[0x2B8] ^ 0x167DBD79 ^ v484;
  LODWORD(STACK[0x230]) = v245;
  v639 = v172;
  v246 = *(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CC9);
  v675 = (v677 ^ 0x2100BE26) + v172 + (v244 ^ 0xF8364ADC) - v245 + 2044789034 + (v236 ^ 0xD75588B3);
  v247 = *(_DWORD *)(v72 - 256);
  v248 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v247 ^ 0x5BB];
  v249 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v247 ^ 0x71A] - 12;
  v250 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v247 ^ 0x4A1] - 4;
  v251 = *(_DWORD *)(v250 + 4 * (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CCBLL) ^ 0xADLL));
  LODWORD(v246) = (-1501969538 * (v251 ^ 0x5519894C)) ^ *(_DWORD *)(v249
                                                                  + 4
                                                                  * (*(unsigned __int8 *)(STACK[0x2A0]
                                                                                        - 0xC73AA6DC77B0CCALL) ^ 0x57)) ^ ((*(_BYTE *)(v248 + (v246 ^ 0x61)) ^ 0x49 ^ (120 * (*(_BYTE *)(v248 + (v246 ^ 0x61)) ^ 0xC3))) - ((2 * (*(unsigned __int8 *)(v248 + (v246 ^ 0x61)) ^ 0x49 ^ (120 * (*(unsigned __int8 *)(v248 + (v246 ^ 0x61)) ^ 0xC3)))) & 0x9C) - 1537908914);
  LOBYTE(v172) = *(_BYTE *)(v248 + (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD1) ^ 0xC8)) ^ 0xC3;
  LOBYTE(v224) = (120 * v172) ^ v172;
  LODWORD(v172) = *(_DWORD *)(v250 + 4 * ~*(_BYTE *)(STACK[0x2A0] - 0xC73AA6DC77B0CD3));
  v252 = *(unsigned __int8 *)(v248 + (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD5) ^ 0x2FLL)) ^ 0xFFFFFFC3;
  v253 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v247 ^ 0x45F];
  LODWORD(v224) = ((v224 ^ (-1501969538 * (v172 ^ 0x5519894C)))
                 - ((2 * (v224 ^ (-1501969538 * (v172 ^ 0x5519894C)))) & 0xCDA75FC2)
                 - 422334495) ^ *(_DWORD *)(v253
                                          + 4
                                          * ((*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD4) ^ 0xF8)
                                           - 2
                                           * ((*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD4) ^ 0xF8) & 0xEBu)
                                           + 235));
  LODWORD(v223) = *(_DWORD *)(v250 + 4 * (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD7) ^ 0x47));
  LODWORD(v220) = (((120 * v252) ^ v252) - ((2 * ((120 * v252) ^ v252)) & 0x9C) - 1537908914) ^ *(_DWORD *)(v249 + 4 * (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD6) ^ 0xDFLL)) ^ (-1501969538 * (v223 ^ 0x5519894C));
  v632 = v250;
  v254 = *(_DWORD *)(v250 + 4 * (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CCFLL) ^ 0x19));
  v255 = *(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CCDLL) ^ 0x9BLL;
  v637 = v248;
  v256 = *(_DWORD *)(v249 + 4 * (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CCELL) ^ 0x25)) ^ *(_BYTE *)(v248 + v255) ^ 0x49 ^ (120 * (*(_BYTE *)(v248 + v255) ^ 0xC3)) ^ (-1501969538 * (v254 ^ 0x5519894C) - ((1291028220 * (v254 ^ 0x5519894C)) & 0x48AABE9C) - 1537908914);
  v628 = v236 ^ 0x43;
  v257 = *(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CCCLL);
  v258 = *(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD0);
  v642 = v244;
  HIDWORD(v142) = v244 ^ 0x8364ADC;
  LODWORD(v142) = ~v244;
  v635 = v249;
  v259 = *(_DWORD *)(v253 + 4 * (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD8) ^ 0x43));
  LODWORD(STACK[0x2AC]) = v172 ^ *(_DWORD *)(v249
                                           + 4 * (*(unsigned __int8 *)(STACK[0x2A0] - 0xC73AA6DC77B0CD2) ^ 0x20)) ^ 0x442A06E1 ^ (v224 - ((2 * v224) & 0x48AABE9C) - 1537908914);
  LODWORD(STACK[0x2A0]) = v223 ^ v259 ^ 0xBE9399B5 ^ (v220 - ((2 * v220) & 0xCDA75FC2) - 422334495);
  LODWORD(v172) = v246 - ((2 * v246) & 0xCDA75FC2) - 422334495;
  LODWORD(v246) = *(_DWORD *)(v253 + 4 * (v258 ^ 0xD2));
  LODWORD(STACK[0x2B4]) = v251 ^ *(_DWORD *)(v253 + 4 * (v257 ^ 0x79)) ^ 0xD95D3359 ^ v172;
  LODWORD(STACK[0x2B0]) = v254 ^ v246 ^ 0xF74D55B2 ^ (v256 - ((2 * v256) & 0xCDA75FC2) - 422334495);
  LODWORD(STACK[0x2B8]) = LODWORD(STACK[0x248]) - ((2 * LODWORD(STACK[0x248])) & 0xE3D7CE18);
  LODWORD(v257) = v625 - ((2 * v625) & 0xE3D7CE18);
  v260 = v622 - ((2 * v622) & 0xE3D7CE18);
  v261 = v619 - ((2 * v619) & 0xE3D7CE18);
  LODWORD(v154) = v616 - ((2 * v616) & 0xE3D7CE18);
  HIDWORD(v142) = (v142 >> 28) ^ 0x8F4DB49;
  LODWORD(v142) = HIDWORD(v142);
  LODWORD(v249) = v609 - ((2 * v609) & 0xE3D7CE18);
  v262 = v604 - ((2 * v604) & 0xE3D7CE18);
  LODWORD(v223) = v577 - ((2 * v577) & 0xE3D7CE18);
  LODWORD(v220) = v593 - ((2 * v593) & 0xE3D7CE18);
  LODWORD(v224) = v586 - ((2 * v586) & 0xE3D7CE18);
  v626 = v525 ^ v235 ^ v566 ^ v528 ^ v549 ^ LODWORD(STACK[0x200]);
  v623 = LODWORD(STACK[0x220]) ^ HIBYTE(v214) ^ ((BYTE1(v214) ^ 0x3F)
                                               - ((2 * ((v214 >> 8) ^ 0x98903F)) & 0xB4)
                                               - 311313574) ^ v687 ^ v554 ^ v538 ^ LODWORD(STACK[0x218]);
  v620 = v535 ^ v681 ^ v689 ^ v547 ^ v557 ^ v531;
  v617 = (1630144381 - (v669 + v671)) ^ STACK[0x228] & 0x7FFFFFFF ^ ((STACK[0x228] & 0x80000000)
                                                                   - (v669
                                                                    + v671)
                                                                   + 1630144381);
  v610 = (v601 - ((2 * v601) & 0xE3D7CE18) + 1911285516) ^ v590;
  v607 = LODWORD(STACK[0x238]) ^ STACK[0x298] ^ LODWORD(STACK[0x270]) ^ LODWORD(STACK[0x254]) ^ LODWORD(STACK[0x260]) ^ LODWORD(STACK[0x288]);
  v605 = LODWORD(STACK[0x240]) ^ LODWORD(STACK[0x278]) ^ LODWORD(STACK[0x290]) ^ LODWORD(STACK[0x258]) ^ LODWORD(STACK[0x268]) ^ LODWORD(STACK[0x280]);
  v263 = *(_DWORD *)(v72 - 256) - 334;
  v602 = LODWORD(STACK[0x2B8]) + 1911285516;
  v599 = LODWORD(STACK[0x20C]) - ((2 * LODWORD(STACK[0x20C])) & 0xE3D7CE18) + 1911285516;
  v594 = v257 + 1911285516;
  v591 = v260 + 1911285516;
  v587 = v154 + 1911285516;
  v585 = (v142 >> 4) - ((2 * (v142 >> 4)) & 0xE3D7CE18) + 1911285516;
  v578 = v249 + 1911285516;
  v575 = v262 + 1911285516;
  v569 = v223 + 1911285516;
  v562 = v220 + 1911285516;
  v559 = v224 + 1911285516;
  v555 = LODWORD(STACK[0x210]) - ((2 * LODWORD(STACK[0x210])) & 0xE3D7CE18) + 1911285516;
  v552 = *(_DWORD *)(v72 - 256) + 4270;
  LODWORD(STACK[0x2B8]) = -472396272;
  v545 = v675 ^ LODWORD(STACK[0x230]);
  *(_DWORD *)(v72 - 256) = v263;
  LODWORD(v246) = *(_DWORD *)(v72 - 256) - 1186;
  v264 = *(_DWORD *)(v72 - 256);
  STACK[0x298] = 11;
  v265 = *(unsigned __int8 **)(v72 - 248);
  v266 = v246 | 0x801;
  LODWORD(v246) = *(unsigned __int8 *)(v637 + (v265[11] ^ 0x64));
  STACK[0x290] = 14;
  v267 = (v266 + 1520086052) ^ 0x5A9AB4F3u;
  STACK[0x248] = v267;
  v268 = v265[v267];
  STACK[0x288] = 10;
  v269 = v265[10];
  LODWORD(v268) = *(_DWORD *)(v253 + 4 * (v268 ^ 0x68));
  v270 = v265[14] ^ 0xBBLL;
  STACK[0x278] = 12;
  LODWORD(v270) = *(_DWORD *)(v635 + 4 * v270);
  LODWORD(v269) = *(_DWORD *)(v635 + 4 * (v269 ^ 0x91));
  LODWORD(v220) = *(_DWORD *)(v253 + 4 * (v265[12] ^ 0x41));
  STACK[0x270] = 15;
  LODWORD(v246) = (((120 * (v246 ^ 0xC3)) ^ v246 ^ 0xC3)
                 - 1537908914
                 - ((2 * ((120 * (v246 ^ 0xFFFFFFC3)) ^ v246 ^ 0xFFFFFFC3)) & 0x9C)) ^ v269;
  LOBYTE(v269) = *(_BYTE *)(v637 + (v265[15] ^ 0xA8)) ^ 0xC3;
  STACK[0x260] = 13;
  LODWORD(v224) = *(_DWORD *)(v632 + 4 * (v265[13] ^ 0x79));
  STACK[0x230] = 7;
  v271 = v220 ^ v270 ^ v224 ^ 0x5519894C ^ ((120 * v269) ^ v269) ^ (-1501969538 * (v224 ^ 0x5519894C));
  LODWORD(v224) = *(unsigned __int8 *)(v637 + (v265[7] ^ 0xA9));
  STACK[0x280] = 1;
  LODWORD(v270) = *(_DWORD *)(v632 + 4 * (v265[1] ^ 0xC1));
  STACK[0x238] = 6;
  LODWORD(v270) = v270 ^ 0x5519894C;
  LODWORD(v220) = *(_DWORD *)(v635 + 4 * (v265[6] ^ 0xD4));
  STACK[0x218] = 3;
  LODWORD(v224) = (((120 * (v224 ^ 0xC3)) ^ v224 ^ 0xC3)
                 - 1537908914
                 - ((2 * ((120 * (v224 ^ 0xFFFFFFC3)) ^ v224 ^ 0xFFFFFFC3)) & 0x9C)) ^ v220;
  LOBYTE(v220) = *(_BYTE *)(v637 + (v265[3] ^ 0x31));
  STACK[0x258] = 8;
  v272 = v265[8];
  LODWORD(STACK[0x268]) = 1520088311;
  STACK[0x240] = 5;
  LODWORD(v268) = (-1501969538 * v270 - 422334495 - ((1291028220 * v270) & 0xCDA75FC0)) ^ v268 ^ (((v220 ^ 0xC3) + ((2 * v220) & 0x14 ^ 0xFB) - 117) ^ (120 * (v220 ^ 0xC3)));
  LODWORD(v220) = *(_DWORD *)(v253 + 4 * (v272 ^ 0x7F));
  LODWORD(v269) = *(_DWORD *)(v632 + 4 * (v265[5] ^ 0xCELL));
  STACK[0x228] = 4;
  LODWORD(v269) = v269 ^ 0x5519894C ^ *(_DWORD *)(v253 + 4 * (v265[4] ^ 0xF6)) ^ (-1501969538 * (v269 ^ 0x5519894C));
  LODWORD(STACK[0x254]) = 1520088307;
  STACK[0x210] = 2;
  LODWORD(v253) = v269 ^ (v224 - 422334495 - ((2 * v224) & 0xCDA75FC2));
  LODWORD(v224) = *(_DWORD *)(v635 + 4 * (v265[2] ^ 0x82)) ^ v270;
  STACK[0x220] = 9;
  v273 = v224 ^ (v268 - 1537908914 - ((2 * v268) & 0x48AABE9C));
  v274 = *(_DWORD *)(v632 + 4 * (v265[9] - 2 * (v265[9] & 0xE0u) + 224)) ^ 0x5519894C;
  LODWORD(v258) = v220 ^ v274 ^ (-1501969538 * v274) ^ (v246 - 422334495 - ((2 * v246) & 0xCDA75FC2));
  LODWORD(STACK[0x200]) = v271;
  v275 = v620 ^ v271 ^ 0x4286F0AF;
  v276 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v263 ^ 0x5A4] - 4;
  LODWORD(v220) = *(_DWORD *)(v276 + 4 * (BYTE2(v275) ^ 0x34u));
  v277 = v258 ^ v628;
  v278 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v264 - 977] - 8;
  v279 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v263 ^ 0x556];
  LODWORD(v220) = v602 ^ v220 ^ *(_DWORD *)(v278 + 4 * (((v623 ^ v273) >> 24) ^ 0xCF)) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v277) ^ 0x5Fu)) ^ ((BYTE1(v277) ^ 0x98) - 1172243718 - 2 * (((v277 >> 8) ^ 0x29998) & 0xFB ^ (v277 >> 8) & 1)) ^ (((32 * v220) ^ (8 * v220) ^ 0x5D16EA40) - 2 * (((32 * v220) ^ (8 * v220) ^ 0x5D16EA40) & 0x1FEC7AA0 ^ ((32 * v220) ^ (8 * v220)) & 0x20) - 1611892091) ^ 0x1D99BC6D;
  v280 = BYTE1(v626) ^ BYTE1(v253);
  v281 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v264 - 897] - 12;
  v282 = (v220 - 1214857914 - ((2 * v220) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281
                                                                     + 4 * ((v626 ^ v253) ^ 0xD0u));
  v283 = *(_DWORD *)(v276 + 4 * (((v623 ^ v273) >> 16) ^ 0x42u));
  v284 = v617 ^ *(_DWORD *)(v278 + 4 * (((v626 ^ v253) >> 24) ^ 0x8D)) ^ (8 * v283) ^ (32 * v283) ^ 0x2CFD0D4C;
  v285 = (v284 - 1214857914 - ((2 * v284) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281
                                                                     + 4 * ((v258 ^ v628) ^ 0xCu));
  v286 = v283 ^ ((((unsigned __int16)(v620 ^ v271) >> 8) ^ 0x65)
               - 1172243718
               - ((2 * (((v620 ^ v271) >> 8) ^ 0x86B265)) & 0x1F4)) ^ *(_DWORD *)(v279
                                                                                + 4
                                                                                * (((unsigned __int16)(v620 ^ v271) >> 8) ^ 0xA2u)) ^ (v285 - ((2 * v285) & 0xD510FBEE) - 360153609);
  v287 = *(_DWORD *)(v276 + 4 * (((v626 ^ v253) >> 16) ^ 0xAu));
  v288 = (((32 * v287) ^ 0x5D16EA40 ^ (8 * v287))
        + 1911285516
        - 2 * (((32 * v287) ^ 0x5D16EA40 ^ (8 * v287)) & 0x71EBE718 ^ (8 * v287) & 0x10)) ^ *(_DWORD *)(v278 + 4 * (((v258 ^ v628) >> 24) ^ 2));
  v289 = ((((unsigned __int16)(v623 ^ v273) >> 8) ^ 0x4C)
        - 1172243718
        - ((2 * (((v623 ^ v273) >> 8) ^ 0xCFDC4C)) & 0x1F4)) ^ v659 ^ v287 ^ *(_DWORD *)(v279
                                                                                       + 4
                                                                                       * (((unsigned __int16)(v623 ^ v273) >> 8) ^ 0x8Bu)) ^ (v288 - ((2 * v288) & 0x657E3FD8) - 1296097300);
  if ((v620 ^ v271 ^ 0x86000000) >> 24 <= 0x92)
    v290 = 358795564;
  else
    v290 = 358795711;
  v291 = HIBYTE(v275) ^ 0xC4;
  if (v291 >= 0x93)
    v291 -= 147;
  if (v291)
    v292 = HIBYTE(v275) ^ 0x1562C9E8;
  else
    v292 = v290;
  v293 = ((v289 ^ 0x30CAD904) - 1214857914 - 2 * ((v289 ^ 0x30CAD904) & 0x3796BD57 ^ v289 & 0x11)) ^ *(_DWORD *)(v281 + 4 * ((v620 ^ v271) ^ 0x5Au));
  v294 = *(_DWORD *)(v276 + 4 * (BYTE2(v277) ^ 7u));
  v295 = v599 ^ *(_DWORD *)(v278 + 4 * (v292 ^ 0x1562C9AAu)) ^ v294 ^ 0x17890381 ^ (((32 * v294) ^ 0x5D16EA40 ^ (8 * v294))
                                                                                    - ((2
                                                                                      * ((32 * v294) ^ 0x5D16EA40 ^ (8 * v294))) & 0x2BF98AD0)
                                                                                    - 1778596503);
  v296 = (v295 - 1172243718 - ((2 * v295) & 0x7441F5F4)) ^ *(_DWORD *)(v279 + 4 * (v280 ^ 0xFu));
  v297 = (v296 - 1214857914 - ((2 * v296) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281
                                                                     + 4 * ((v623 ^ v273) ^ 0x8Fu));
  v298 = v297 ^ v280;
  v299 = *(_DWORD *)(v276 + 4 * ((v298 ^ 0x33E520ABu) >> 16));
  v300 = (((32 * v299) ^ 0x5D16EA40 ^ (8 * v299))
        + 1911285516
        - 2 * (((32 * v299) ^ 0x5D16EA40 ^ (8 * v299)) & 0x71EBE718 ^ (8 * v299) & 0x10)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v282) ^ 0x36));
  v301 = (BYTE1(v293) ^ 0x80804B5 | 0x46380D10) - (BYTE1(v293) ^ 0x80804B5 | 0xB9C7F2EF) - 1178078481;
  v302 = *(_DWORD *)(v279 + 4 * (v301 ^ 0x4E3009F7));
  v303 = ((v302 ^ v301 ^ 0xD6047CBF) + (v301 ^ 0x93DB79BA) + 1) ^ ((v302 ^ 0x45DF0505) + 1);
  LODWORD(STACK[0x20C]) = -1172243717;
  v304 = v300 ^ (((v303 - 1172243717 + ~((2 * v303) & 0x7441F5F4)) ^ v302) + (v301 ^ 0x93DB79BA));
  v305 = (v304 - 1214857914 - ((2 * v304) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v286 ^ 0xBu));
  v306 = v299 ^ v664 ^ (v305 - ((2 * v305) & 0x69DAE3A2) - 1259507247);
  v307 = *(_DWORD *)(v276 + 4 * (BYTE2(v282) ^ 0xDCu));
  v308 = *(_DWORD *)(v279 + 4 * (((unsigned __int16)(v298 ^ 0x20AB) >> 8) ^ 0xC7u)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v286) ^ 0xBF)) ^ (((32 * v307) ^ 0x5D16EA40 ^ (8 * v307)) + 1911285516 - (STACK[0x2B8] & (2 * ((32 * v307) ^ 0x5D16EA40 ^ (8 * v307))))) ^ (((unsigned __int16)(v298 ^ 0x20AB) >> 8) - 1172243718 - (((v298 ^ 0x33E520ABu) >> 7) & 0x1F4));
  v309 = (v308 - 1214857914 - ((2 * v308) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v293 ^ 0x22u));
  v310 = v307 ^ v671 ^ (v309 - ((2 * v309) & 0xA3C5E62A) + 1373827861);
  v311 = *(_DWORD *)(v276 + 4 * (BYTE2(v286) ^ 0x5Eu));
  v312 = (v683 - ((2 * v683) & 0xE3D7CE18) + 1911285516) ^ ((BYTE1(v282) ^ 0xE4)
                                                          - 1172243718
                                                          - ((2 * ((v282 >> 8) ^ 0x36DCE4)) & 0x1F4)) ^ v311 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v282) ^ 0x23u)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v293) ^ 0x42)) ^ 0xF705E465 ^ (((32 * v311) ^ 0x5D16EA40 ^ (8 * v311)) - ((2 * ((32 * v311) ^ 0x5D16EA40 ^ (8 * v311))) & 0xEAE04510) + 1970283149);
  v313 = (v312 - 1214857914 - ((2 * v312) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v298 ^ 0x97u));
  v314 = *(_DWORD *)(v276 + 4 * (BYTE2(v293) ^ 0x86u));
  v315 = (((32 * v314) ^ 0x5D16EA40 ^ (8 * v314))
        + 1911285516
        - 2 * (((32 * v314) ^ 0x5D16EA40 ^ (8 * v314)) & 0x71EBE718 ^ (8 * v314) & 0x10)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v297) ^ 0xB5));
  v316 = BYTE1(v286) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v286) ^ 0x72u)) ^ 0xBB ^ (v315
                                                                               - 1172243718
                                                                               - ((2 * v315) & 0x7441F5F4));
  v317 = (v316 - 1214857914 - ((2 * v316) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v282 ^ 0x8Bu));
  v318 = v314 ^ v669 ^ (v317 - ((2 * v317) & 0xD331C0C6) - 375857053);
  v319 = *(_DWORD *)(v276 + 4 * (BYTE2(v318) ^ 0xABu));
  v320 = ((2 * v319) & 0x1556C6D0 ^ 0xEEEBBDFF) + (v319 ^ 0x8DEA580);
  v321 = v320 - ((2 * v320 + 358008530) & 0xA517DE8E) + 1563906736;
  v322 = *(_DWORD *)(v278 + 4 * (HIBYTE(v306) ^ 0xD2)) ^ v594 ^ v321 ^ (((32 * v321) ^ (8 * v321) ^ 0xC52292D8)
                                                                        - ((2 * ((32 * v321) ^ (8 * v321) ^ 0xC52292D8)) & 0xA517DE80)
                                                                        - 762581177);
  v323 = v322 - 1172243718 - ((2 * v322) & 0x7441F5F4);
  v324 = BYTE1(v313);
  v325 = *(_DWORD *)(v281 + 4 * (v310 ^ 0xA6u)) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v313) ^ 0x9Du)) ^ v323;
  v326 = *(_DWORD *)(v276 + 4 * (BYTE2(v306) ^ 0x59u));
  v327 = *(_DWORD *)(v278 + 4 * (HIBYTE(v310) ^ 0xB0)) ^ v647 ^ (((32 * v326) ^ 0x5D16EA40 ^ (8 * v326))
                                                                 + 1911285516
                                                                 - 2
                                                                 * (((32 * v326) ^ 0x5D16EA40 ^ (8 * v326)) & 0x71EBE718 ^ (8 * v326) & 0x10));
  v328 = *(_DWORD *)(v279 + 4 * (BYTE1(v318) ^ 0x44u)) ^ *(_DWORD *)(v281 + 4 * (v313 ^ 0xB8u)) ^ v326 ^ ((BYTE1(v318) ^ 0x83) - 1172243718 - ((2 * ((v318 >> 8) ^ 0x94AB83)) & 0x1F4)) ^ (v327 - ((2 * v327) & 0xB370912E) + 1505249431);
  v329 = *(_DWORD *)(v276 + 4 * (BYTE2(v310) ^ 0xDDu));
  v330 = ((2 * v329) & 0x1556C6D0 ^ 0xEEEBBDFF) + (v329 ^ 0x8DEA580);
  v331 = v330 - ((2 * v330 + 358008530) & 0xE9420CF8) + 2135714277;
  v332 = *(_DWORD *)(v278 + 4 * (HIBYTE(v313) ^ 0x40)) ^ v591 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v306) ^ 0x5Du)) ^ (8 * v331) ^ (32 * v331) ^ ((BYTE1(v306) ^ 0x9A) - 1172243718 - 2 * (((v306 >> 8) ^ 0xD2599A) & 0xFB ^ (v306 >> 8) & 1));
  v333 = ((v332 ^ 0x3128FC60) - 1214857914 - 2 * ((v332 ^ 0x3128FC60) & 0x3796BD4E ^ v332 & 8)) ^ *(_DWORD *)(v281 + 4 * (v318 ^ 0xD6u));
  v334 = (v333 - ((2 * v333) & 0xE9420CF8) - 190773636) ^ v331;
  v335 = *(_DWORD *)(v276 + 4 * (BYTE2(v313) ^ 0x58u));
  v336 = (v261 + 1911285516) ^ v335 ^ (((32 * v335) ^ 0x5D16EA40 ^ (8 * v335))
                                     - 2 * (((32 * v335) ^ 0x5D16EA40 ^ (8 * v335)) & 0x191D1FF0 ^ (8 * v335) & 0x10)
                                     - 1726144538) ^ 0x1B68D90E ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v318) ^ 0x12));
  v337 = *(_DWORD *)(v279 + 4 * (BYTE1(v310) ^ 0xECu)) ^ BYTE1(v310) ^ 0x2B ^ (v336
                                                                               - 1172243718
                                                                               - ((2 * v336) & 0x7441F5F4));
  v338 = (v337 - 1214857914 - ((2 * v337) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * ~(_BYTE)v306);
  v339 = *(_DWORD *)(v276 + 4 * ((BYTE2(v338) ^ 0x27) - ((2 * (HIWORD(v338) ^ 0x427)) & 0x13C) + 158));
  LOBYTE(v337) = v325 ^ v324;
  v340 = v325 ^ v324 ^ 0xF6E04C74;
  v341 = *(_DWORD *)(v278 + 4 * HIBYTE(v340)) ^ v587 ^ v339 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v334) ^ 0xD5u)) ^ *(_DWORD *)(v281 + 4 * (v328 ^ 0xDAu)) ^ (((32 * v339) ^ 0x5D16EA40 ^ (8 * v339)) - ((2 * ((32 * v339) ^ 0x5D16EA40 ^ (8 * v339))) & 0x348C60) + 1721904) ^ ((BYTE1(v334) ^ 0x12) - 1172243718 - 2 * (BYTE1(v334) ^ 0x12 ^ (v334 >> 8) & 5));
  v342 = *(_DWORD *)(v276 + 4 * (BYTE2(v325) ^ 0x7Eu));
  v343 = *(_DWORD *)(v278 + 4 * (HIBYTE(v328) ^ 0xED)) ^ v585 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v338) ^ 0x7Cu)) ^ v342 ^ ((BYTE1(v338) ^ 0xBB) - 1172243718 - 2 * ((BYTE1(v338) ^ 0xBB) & 0xFE ^ (v338 >> 8) & 4)) ^ (((32 * v342) ^ 0x5D16EA40 ^ (8 * v342)) - ((2 * ((32 * v342) ^ 0x5D16EA40 ^ (8 * v342))) & 0xF81D8270) + 2081341755);
  v344 = *(_DWORD *)(v281 + 4 * (v334 ^ 0xAAu)) ^ v644 ^ ((v343 ^ 0xFE7B07D3)
                                                                           - 1214857914
                                                                           - 2
                                                                           * ((v343 ^ 0xFE7B07D3) & 0x3796BD4E ^ v343 & 8));
  v345 = *(_DWORD *)(v276 + 4 * (BYTE2(v328) ^ 0x46u));
  v346 = (v614 - ((2 * v614) & 0xE3D7CE18) + 1911285516) ^ v345 ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v334) ^ 0xB6)) ^ 0xEBBD1733 ^ (((32 * v345) ^ 0x5D16EA40 ^ (8 * v345)) - ((2 * ((32 * v345) ^ 0x5D16EA40 ^ (8 * v345))) & 0xD391A3B0) + 1774768603);
  v347 = BYTE1(v340) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v340) ^ 0xC7u)) ^ 0xA77A978 ^ (v346
                                                                                    - 1172243718
                                                                                    - ((2 * v346) & 0x7441F5F4));
  v348 = *(_DWORD *)(v281 + 4 * (v338 ^ 0xCDu));
  HIDWORD(v349) = v348 ^ 0x1D46;
  LODWORD(v349) = v348 ^ 0xB796A000;
  v350 = *(_DWORD *)(v278 + 4 * (HIBYTE(v338) ^ 0x82)) ^ (v612 - ((2 * v612) & 0xE3D7CE18) + 1911285516);
  v351 = *(_DWORD *)(v276 + 4 * (BYTE2(v334) ^ 0xF5u));
  v352 = v350 ^ 0x5D16EA40 ^ (32 * v351) ^ (8 * v351);
  v353 = BYTE1(v328) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v328) ^ 0x34u)) ^ 0x33 ^ (v352
                                                                               - 1172243718
                                                                               - 2 * (v352 & 0x3A20FAFF ^ v350 & 5));
  v354 = (v353 - 1214857914 - ((2 * v353) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v337 ^ 0x48u));
  v355 = (v354 - ((2 * v354) & 0x83C80604) + 1105462018) ^ v351;
  v356 = *(_DWORD *)(v276 + 4 * (BYTE2(v355) ^ 0xB3u));
  HIDWORD(v349) = (v349 >> 13) ^ __ROR4__(v347, 13) ^ 0x254087A4;
  LODWORD(v349) = HIDWORD(v349);
  v357 = v349 >> 19;
  v358 = v578 ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v341) ^ 0xAB)) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v357) ^ 0x90u)) ^ v356 ^ ((BYTE1(v357) ^ 0x57) - 1172243718 - ((2 * ((v357 >> 8) ^ 0xB36857)) & 0x1F4)) ^ 0xCB0A72EC ^ (((32 * v356) ^ 0x5D16EA40 ^ (8 * v356)) + 1233105924 - 2 * (((32 * v356) ^ 0x5D16EA40 ^ (8 * v356)) & 0x497FB418 ^ (8 * v356) & 0x18));
  v359 = (v344 - 130659620 - ((2 * v344) & 0xF06C95B8)) ^ v642;
  v360 = (v358 - 1214857914 - ((2 * v358) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v359 ^ 0xDFu));
  v361 = *(_DWORD *)(v276 + 4 * (BYTE2(v341) ^ 4u));
  v362 = *(_DWORD *)(v278 + 4 * (HIBYTE(v359) ^ 0xE0)) ^ v575 ^ v361 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v355) ^ 0x37u)) ^ (((32 * v361) ^ 0x5D16EA40 ^ (8 * v361)) - ((2 * ((32 * v361) ^ 0x5D16EA40 ^ (8 * v361))) & 0x9B532F0) - 2066048647) ^ ((BYTE1(v355) ^ 0xF0) - 1172243718 - 2 * (BYTE1(v355) ^ 0xF0 ^ (v355 >> 8) & 5));
  v363 = ((v362 ^ 0x6AF5F91) - 1214857914 - 2 * ((v362 ^ 0x6AF5F91) & 0x3796BD4E ^ v362 & 8)) ^ *(_DWORD *)(v281 + 4 * ((v349 >> 19) ^ 0x84u));
  v364 = *(_DWORD *)(v276 + 4 * (BYTE2(v359) ^ 0xD5u));
  v365 = *(_DWORD *)(v278 + 4 * (HIBYTE(v357) ^ 0xB3)) ^ (v596 - ((2 * v596) & 0xE3D7CE18) + 1911285516) ^ (8 * v364) ^ (32 * v364) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v341) ^ 0xCEu)) ^ ((BYTE1(v341) ^ 9) - 1172243718 - ((2 * ((v341 >> 8) ^ 0x2D9A09)) & 0x1F4));
  v366 = ((v365 ^ 0x5D16EA40) - 1214857914 - 2 * ((v365 ^ 0x5D16EA40) & 0x3796BD47 ^ v365 & 1)) ^ *(_DWORD *)(v281 + 4 * (v355 ^ 0x3Fu));
  v367 = (v366 - ((2 * v366) & 0x85465CF6) - 1029493125) ^ v364;
  v368 = *(_DWORD *)(v278 + 4 * (HIBYTE(v355) ^ 0x91)) ^ (v240 - ((2 * v240) & 0xE3D7CE18) + 1911285516);
  v369 = v242 ^ 0xDBC85500 ^ (v368 - 1412964480 - ((2 * v368) & 0x578FBF00));
  v370 = (v242 ^ 0xB610EE17 ^ -(v242 ^ 0xB610EE17) ^ ((v368 ^ 0x39E09B68) + v369 + 1)) + v369;
  v371 = *(_DWORD *)(v276 + 4 * (BYTE2(v357) ^ 0x68u));
  v372 = (32 * v371) ^ 0x5D16EA40 ^ (8 * v371) ^ v370;
  v373 = *(_DWORD *)(v279 + 4 * (BYTE1(v359) ^ 2u)) ^ BYTE1(v359) ^ 0xC5 ^ (v372
                                                                            - 1172243718
                                                                            - 2 * (v372 & 0x3A20FAFB ^ v370 & 1));
  v374 = (v373 - 1214857914 - ((2 * v373) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v341 ^ 0x1Eu));
  v375 = (v374 - ((2 * v374) & 0x80AE6856) - 1068026837) ^ v371;
  v376 = *(_DWORD *)(v276 + 4 * (BYTE2(v375) ^ 0xE4u));
  v377 = (((32 * v376) ^ 0x5D16EA40 ^ (8 * v376))
        + 1911285516
        - 2 * (((32 * v376) ^ 0x5D16EA40 ^ (8 * v376)) & 0x71EBE718 ^ (8 * v376) & 0x10)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v360) ^ 2));
  v378 = v666 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v367) ^ 0x7Au)) ^ v376 ^ ((BYTE1(v367) ^ 0xBD)
                                                                        - 1172243718
                                                                        - ((2 * ((v367 >> 8) ^ 0x9A04BD)) & 0x1F4)) ^ 0x6E5FD5C6 ^ (v377 - ((2 * v377) & 0x700AC6BC) - 1207606434);
  v379 = (v378 - 1214857914 - ((2 * v378) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v363 ^ 0xCFu));
  v380 = *(_DWORD *)(v276 + 4 * (BYTE2(v360) ^ 0x2Fu));
  v381 = *(_DWORD *)(v278 + 4 * (HIBYTE(v363) ^ 0x99)) ^ v569 ^ (8 * v380) ^ (32 * v380) ^ ((BYTE1(v375) ^ 0x5A)
                                                                                            + LODWORD(STACK[0x20C])
                                                                                            + ~(2
                                                                                              * ((BYTE1(v375) ^ 0x5A) & 0xFE ^ (v375 >> 8) & 4))) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v375) ^ 0x9Du));
  v382 = *(_DWORD *)(v281 + 4 * v367) ^ v673 ^ ((v381 ^ 0x5D16EA40)
                                                                 - 1214857914
                                                                 - 2 * ((v381 ^ 0x5D16EA40) & 0x3796BD56 ^ v381 & 0x10));
  v383 = (v382 - ((2 * v382) & 0x8071914C) + 1077463206) ^ v380;
  v384 = *(_DWORD *)(v276 + 4 * (BYTE2(v363) ^ 0x1Au));
  v385 = (((32 * v384) ^ (8 * v384) ^ 0x5D16EA40)
        + 1911285516
        - 2 * (((32 * v384) ^ (8 * v384) ^ 0x5D16EA40) & 0x71EBE728 ^ ((32 * v384) ^ (8 * v384)) & 0x20)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v367) ^ 0x9A));
  v386 = v679 ^ v384 ^ ((BYTE1(v360) ^ 0x65) - 1172243718 - ((2 * ((v360 >> 8) ^ 0x842F65)) & 0x1F4)) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v360) ^ 0xA2u)) ^ 0xC19340DA ^ (v385 - ((2 * v385) & 0x87CD0C64) + 1139181106);
  v387 = (v386 - 1214857914 - ((2 * v386) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v375 ^ 0x5Au));
  v388 = *(_DWORD *)(v276 + 4 * (BYTE2(v367) ^ 4u));
  v363 >>= 8;
  v389 = *(_DWORD *)(v278 + 4 * (HIBYTE(v375) ^ 0x49)) ^ (v564 - ((2 * v564) & 0xE3D7CE18) + 1911285516) ^ *(_DWORD *)(v279 + 4 * (v363 ^ 0xBFu)) ^ *(_DWORD *)(v281 + 4 * (v360 ^ 0xF3u)) ^ (((32 * v388) ^ 0x5D16EA40 ^ (8 * v388)) & 0xF7A9D718 ^ v388 & 0xF7A9D71C | ((32 * v388) ^ 0x5D16EA40 ^ (8 * v388)) & 0x85628E0 ^ v388 & 0x85628E3) ^ ((v363 ^ 0x78) - 1172243718 - 2 * ((v363 ^ 0x78) & 0xFE ^ v363 & 4));
  v390 = *(_DWORD *)(v276 + 4 * (BYTE2(v389) ^ 0x61u));
  v391 = *(_DWORD *)(v279 + 4 * (BYTE1(v387) ^ 0xADu)) ^ (((32 * v390) ^ 0x5D16EA40 ^ (8 * v390))
                                                          + 1911285516
                                                          - (STACK[0x2B8] & (2 * ((32 * v390) ^ 0x5D16EA40 ^ (8 * v390))))) ^ ((BYTE1(v387) ^ 0x6A) - 1172243718 - 2 * ((BYTE1(v387) ^ 0x6A) & 0xFE ^ (v387 >> 8) & 4)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v379) ^ 0xB2));
  v392 = (v391 - 1214857914 - ((2 * v391) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v383 ^ 0x4Eu));
  v393 = *(_DWORD *)(v276 + 4 * (BYTE2(v379) ^ 0xB1u));
  v394 = v390 ^ v677 ^ (v392 - ((2 * v392) & 0x51871A5C) + 683904302);
  v395 = (((32 * v393) ^ 0x5D16EA40 ^ (8 * v393))
        + 1911285516
        - 2 * (((32 * v393) ^ 0x5D16EA40 ^ (8 * v393)) & 0x71EBE718 ^ (8 * v393) & 0x10)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v383) ^ 0x63));
  v396 = v389 ^ 0xA8FF3674;
  v397 = ((unsigned __int16)(v389 ^ 0x3674) >> 8) ^ *(_DWORD *)(v279
                                                                               + 4
                                                                               * (((unsigned __int16)(v389 ^ 0x3674) >> 8) ^ 0xC7u)) ^ (v395 - 1172243718 - ((2 * v395) & 0x7441F5F4));
  v398 = (v397 - 1214857914 - ((2 * v397) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v387 ^ 0xF1u));
  v399 = v393 ^ v639 ^ (v398 - ((2 * v398) & 0xD6E1B284) - 344925886);
  v400 = *(_DWORD *)(v276 + 4 * (BYTE2(v383) ^ 0xB4u));
  v401 = *(_DWORD *)(v278 + 4 * (HIBYTE(v387) ^ 0xE9)) ^ (v582 - ((2 * v582) & 0xE3D7CE18) + 1911285516) ^ (8 * v400) ^ (32 * v400) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v379) ^ 7u)) ^ ((BYTE1(v379) ^ 0xC0) - 1172243718 - 2 * (BYTE1(v379) ^ 0xC0 ^ (v379 >> 8) & 5));
  v402 = ((v401 ^ 0x5D16EA40) - 1214857914 - 2 * ((v401 ^ 0x5D16EA40) & 0x3796BD47 ^ v401 & 1)) ^ *(_DWORD *)(v281 + 4 * (v389 ^ 0x48u));
  v403 = (v402 - 404330149 + (~(2 * v402) | 0x30332D4B)) ^ v400;
  v404 = *(_DWORD *)(v276 + 4 * (BYTE2(v387) ^ 0x37u));
  v405 = (v383 >> 8) ^ 0x63B4C9;
  v406 = v610 ^ *(_DWORD *)(v278 + 4 * HIBYTE(v396)) ^ *(_DWORD *)(v279 + 4 * (v405 ^ 0xC7u)) ^ *(_DWORD *)(v281 + 4 * (v379 ^ 0x75u)) ^ (((32 * v404) ^ 0x5D16EA40 ^ (8 * v404)) + (v404 ^ 0x8275C6E8) - 2 * (((32 * v404) ^ 0x5D16EA40 ^ (8 * v404)) & (v404 ^ 0x275C6E8))) ^ (v405 - 1172243718 - ((2 * v405) & 0x1F4));
  v407 = *(_DWORD *)(v276 + 4 * (BYTE2(v406) ^ 0xDBu));
  v408 = (((32 * v407) ^ 0x5D16EA40 ^ (8 * v407))
        + 1911285516
        - (STACK[0x2B8] & (2 * ((32 * v407) ^ 0x5D16EA40 ^ (8 * v407))))) ^ *(_DWORD *)(v278
                                                                                      + 4 * (HIBYTE(v394) ^ 0xAF));
  v409 = v653 ^ v407 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v403) ^ 0xCAu)) ^ (v408 - ((2 * v408) & 0xC8F12D62) - 461859151) ^ ((BYTE1(v403) ^ 0xD) - 1172243718 - ((2 * ((v403 >> 8) ^ 0x92F60D)) & 0x1F4)) ^ 0x261DECDF;
  v410 = (v409 - 1214857914 - ((2 * v409) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v399 ^ 0xB8u));
  v411 = *(_DWORD *)(v278 + 4 * (HIBYTE(v399) ^ 0x23)) ^ v562;
  v412 = *(_DWORD *)(v276 + 4 * (BYTE2(v394) ^ 0x3Cu));
  v413 = v411 ^ 0x5D16EA40 ^ (32 * v412) ^ (8 * v412);
  v414 = *(_DWORD *)(v279 + 4 * (BYTE1(v406) ^ 0x96u)) ^ BYTE1(v406) ^ 0x51 ^ (v413
                                                                               - 1172243718
                                                                               - 2 * (v413 & 0x3A20FAFB ^ v411 & 1));
  v415 = (v414 - 1214857914 - ((2 * v414) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v403 ^ 0xB0u));
  v416 = (v415 - ((2 * v415) & 0xCAA7EFE2) - 447481871) ^ v412;
  v417 = (BYTE1(v394) ^ 0x63u) % 0x56;
  v418 = v417 == 0;
  v419 = (v417 ^ 0x477FCD9F) + 2 * (v417 & 0x1F) - 1199558047;
  if (!v418)
    v419 = 0;
  v420 = ((v394 >> 8) ^ 0xAF3C63) - v419;
  v421 = *(_DWORD *)(v276 + 4 * (BYTE2(v399) ^ 0x85u));
  v422 = *(_DWORD *)(v279 + 4 * (v420 ^ 0xC7u)) ^ *(_DWORD *)(v278 + 4 * (HIBYTE(v403) ^ 0x92)) ^ (((32 * v421) ^ 0x5D16EA40 ^ (8 * v421)) + 1911285516 - (STACK[0x2B8] & (2 * ((32 * v421) ^ 0x5D16EA40 ^ (8 * v421))))) ^ (v420 - 1172243718 - ((2 * v420) & 0x1F4));
  v423 = (v422 - 1214857914 - ((2 * v422) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v406 ^ 0x60u));
  v424 = v651 ^ v421 ^ 0x264F6AA3 ^ (v423 - ((2 * v423) & 0xA7DAE1DA) - 739413779);
  v425 = *(_DWORD *)(v276 + 4 * (BYTE2(v403) ^ 0xF6u));
  v426 = *(_DWORD *)(v278 + 4 * (HIBYTE(v406) ^ 0x1E)) ^ v656 ^ (((32 * v425) ^ 0x5D16EA40 ^ (8 * v425))
                                                                 + 1911285516
                                                                 - 2
                                                                 * (((32 * v425) ^ 0x5D16EA40 ^ (8 * v425)) & 0x71EBE718 ^ (8 * v425) & 0x10));
  v427 = v425 ^ ((BYTE1(v399) ^ 0x78) - 1172243718 - 2 * (((v399 >> 8) ^ 0x238578) & 0xFB ^ (v399 >> 8) & 1)) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v399) ^ 0xBFu)) ^ (v426 - ((2 * v426) & 0xF6FB558C) + 2071833286) ^ 0xF9086C2E;
  v428 = (v427 - 1214857914 - ((2 * v427) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v394 ^ 0xEu));
  v429 = *(_DWORD *)(v276 + 4 * (BYTE2(v428) ^ 0x8Bu));
  v430 = *(_DWORD *)(v278 + 4 * (HIBYTE(v410) ^ 0x2A)) ^ v661 ^ (((32 * v429) ^ 0x5D16EA40 ^ (8 * v429))
                                                                 + 1911285516
                                                                 - 2
                                                                 * (((32 * v429) ^ 0x5D16EA40 ^ (8 * v429)) & 0x71EBE718 ^ (8 * v429) & 0x10));
  LODWORD(v432) = __ROR4__(v424, 23) ^ 0x6FF8F38B;
  HIDWORD(v432) = v432;
  v431 = v432 >> 9;
  v433 = v429 ^ (v430 - ((2 * v430) & 0x1F27872) + 16333881) ^ ((BYTE1(v431) ^ 0x17)
                                                              - 1172243718
                                                              - ((2 * ((v431 >> 8) ^ 0x9D7217)) & 0x1F4)) ^ 0x828CFAD1 ^ *(_DWORD *)(v279 + 4 * (BYTE1(v431) ^ 0xD0u));
  v434 = (v433 - 1214857914 - ((2 * v433) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281 + 4 * (v416 ^ 0xACu));
  v435 = *(_DWORD *)(v276 + 4 * (BYTE2(v410) ^ 0xCAu));
  v436 = *(_DWORD *)(v278 + 4 * (HIBYTE(v416) ^ 0xD0)) ^ v559 ^ v435 ^ (((32 * v435) ^ 0x5D16EA40 ^ (8 * v435))
                                                                        - ((2 * ((32 * v435) ^ 0x5D16EA40 ^ (8 * v435))) & 0x3E1A6830)
                                                                        - 1626524646);
  v437 = *(_DWORD *)(v281 + 4 * ((v432 >> 9) ^ 7u)) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v428) ^ 0xEBu)) ^ BYTE1(v428) ^ ((v436 ^ 0x1D78F2F2) - 1172243718 - 2 * ((v436 ^ 0x1D78F2F2) & 0x3A20FAFE ^ v436 & 4));
  v438 = *(_DWORD *)(v276 + 4 * (BYTE2(v416) ^ 0xCu));
  v439 = *(_DWORD *)(v278 + 4 * (HIBYTE(v431) ^ 0x9D)) ^ (v685 - ((2 * v685) & 0xE3D7CE18) + 1911285516) ^ (8 * v438);
  v440 = *(_DWORD *)(v279 + 4 * (BYTE1(v410) ^ 0xE6u));
  HIDWORD(v432) = v440 ^ 0x220FAFA;
  LODWORD(v432) = v440 ^ 0xBFFFFFFF;
  LODWORD(v432) = __ROR4__((v432 >> 27) ^ __ROR4__(v438 ^ 0x8657746F ^ (((32 * v438) ^ 0x5D16EA40 ^ v439)+ 289892203- 2* (((32 * v438) ^ 0x5D16EA40 ^ v439) & 0x1147677F ^ v439 & 0x14)), 27) ^ 0xE8B41E3E, 5);
  v441 = ((BYTE1(v410) ^ v432 ^ 0x21)
        - 1214857914
        - ((2 * (BYTE1(v410) ^ v432)) & 0x6F2D7A8C)) ^ *(_DWORD *)(v281
                                                                               + 4 * (v428 ^ 0x96u));
  v442 = *(_DWORD *)(v276 + 4 * (BYTE2(v431) ^ 0x72u));
  v443 = (32 * v442) ^ (8 * v442) ^ *(_DWORD *)(v279 + 4 * (BYTE1(v416) ^ 5u)) ^ ((BYTE1(v416) ^ 0xC2)
                                                                                  - 1172243718
                                                                                  - 2
                                                                                  * ((BYTE1(v416) ^ 0xC2) & 0xFE ^ (v416 >> 8) & 4));
  v444 = ((v443 ^ 0x5D16EA40) - 1214857914 - 2 * ((v443 ^ 0x5D16EA40) & 0x3796BD5F ^ v443 & 0x19)) ^ *(_DWORD *)(v281 + 4 * (v410 ^ 0x62u));
  v445 = *(_DWORD *)(v278 + 4 * (HIBYTE(v428) ^ 0xEA)) ^ v555 ^ v442 ^ (v444 - ((2 * v444) & 0x53753734) - 1447388262);
  v446 = *(_DWORD *)(v72 - 256);
  v447 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v446 - 928] - 4;
  v448 = *(_DWORD *)(v447 + 4 * (HIBYTE(v434) ^ 0x57));
  v449 = *(_DWORD *)(v447 + 4 * (HIBYTE(v437) ^ 0x11));
  v450 = *(_DWORD *)(v447 + 4 * (HIBYTE(v441) ^ 0x28));
  v451 = *(_DWORD *)(v447 + 4 * (HIBYTE(v445) ^ 0xC6));
  v452 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v263 ^ 0x584] - 12;
  v453 = *(_DWORD *)(v452 + 4 * (BYTE2(v434) ^ 0xFCu));
  v454 = *(_DWORD *)(v452 + 4 * (BYTE2(v437) ^ 0xCFu));
  v455 = *(_DWORD *)(v452 + 4 * (BYTE2(v441) ^ 0x42u));
  v456 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v446 - 1348];
  v457 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v446 - 1009];
  v458 = *(_DWORD *)(v456 + 4 * (BYTE1(v445) ^ 0x35u));
  v459 = *(_DWORD *)(v452 + 4 * (BYTE2(v445) ^ 0xF8u)) ^ (((v448 >> 7) ^ (v448 >> 4) ^ 0xA767D03)
                                                          - 897235770
                                                          - 2
                                                          * (((v448 >> 7) ^ (v448 >> 4) ^ 0xA767D03) & 0xA8544DE ^ ((v448 >> 7) ^ (v448 >> 4)) & 0x18)) ^ (543720477 * *(_DWORD *)(v457 + 4 * (v437 ^ 0x19u)) + 1638917865);
  v460 = *(_DWORD *)(v456 + 4 * (BYTE1(v434) ^ 0xF5u));
  v461 = *(_DWORD *)(v456 + 4 * (BYTE1(v437) ^ 0xC5u));
  LODWORD(v452) = *(_DWORD *)(v457 + 4 * (v441 ^ 0x65u));
  v462 = *(_DWORD *)(v457 + 4 * (v445 ^ 0xAFu));
  v463 = (*(_DWORD *)(v456 + 4 * (BYTE1(v441) ^ 0x40u)) + 1436873776) ^ v459;
  v464 = *(_DWORD *)(v457 + 4 * (v434 ^ 0xC2u));
  v465 = (v463 - ((2 * v463) & 0xB5D2777C) - 622249026) ^ LODWORD(STACK[0x2A0]);
  LODWORD(v432) = __ROR4__(v486 ^ 9 ^ v448 ^ 0xEBEBE6 ^ (v465 - ((2 * v465) & 0x4FAE38C8) + 668408932), 3) ^ 0xDC174D48;
  HIDWORD(v432) = v432;
  v466 = (v432 >> 29) - ((2 * (v432 >> 29)) & 0x2EF56A10) + 393917704;
  v467 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v446 - 1251] - 12;
  v468 = *(_QWORD *)(v72 - 248);
  *(_BYTE *)(v468 + STACK[0x218]) = *(_BYTE *)(v467
                                             + (((v432 >> 29) - ((2 * (v432 >> 29)) & 0x10) + 8) ^ 0x83)) ^ 0x13;
  v469 = ((v449 ^ 0xB14E1272) >> 7) ^ ((v449 ^ 0xB14E1272) >> 4);
  v470 = v607 ^ v449 ^ (v469 - 1971060471 - ((2 * v469) & 0x15080212));
  v471 = v453 ^ LODWORD(STACK[0x2AC]) ^ (v458 + 1436873776) ^ ((v470 ^ 0x28) - 897235770 - ((2 * v470) & 0x950A898C)) ^ (543720477 * v452 + 1638917865);
  *(_BYTE *)(v468 + STACK[0x230]) = *(_BYTE *)(v467 + (v471 ^ 0x8ALL)) ^ 0x85;
  v472 = v468;
  v473 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v446 - 791];
  *(_BYTE *)(v468 + STACK[0x210]) = *(_BYTE *)(v473 + (BYTE1(v466) ^ 0x28)) ^ ((BYTE1(v466) ^ 0xCF)
                                                                               - ((2 * (BYTE1(v466) ^ 0xCF)) & 0xA0)
                                                                               - 48) ^ 0x7F;
  v474 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v263 ^ 0x761] - 4;
  v475 = STACK[0x248];
  *(_BYTE *)(v472 + v475) = *(_BYTE *)(v474 + (HIBYTE(v466) ^ 0x7FLL)) ^ 0xA8;
  *(_BYTE *)(v472 + STACK[0x238]) = ((BYTE1(v471) ^ 0x16) - ((2 * (BYTE1(v471) ^ 0x16)) & 0xA0) - 48) ^ 0x58 ^ *(_BYTE *)(v473 + (BYTE1(v471) ^ 0x9BLL));
  LODWORD(v452) = v605 ^ ((v450 ^ 0xB14E1272) >> 4) ^ ((v450 ^ 0xB14E1272) >> 7);
  v476 = (v460 + 1436873776) ^ v454 ^ (543720477 * v462 + 1638917865) ^ ((v452 ^ 0x22)
                                                                       - 897235770
                                                                       - 2 * ((v452 ^ 0x22) & 0x4A8544D7 ^ v452 & 0x11));
  v477 = v450 ^ LODWORD(STACK[0x2B0]) ^ (v476 - ((2 * v476) & 0x6201C41A) + 822141453);
  v478 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v446 - 1228] - 8;
  *(_BYTE *)(v472 + STACK[0x220]) = (-14 - 65 * *(_BYTE *)(v478 + (BYTE2(v477) ^ 0x2CLL))) ^ 0x9F;
  *(_BYTE *)(v472 + STACK[0x228]) = *(_BYTE *)(v474 + (HIBYTE(v471) ^ 0x5DLL)) ^ 0x21;
  v479 = v545 ^ ((v451 ^ 0xB14E1272) >> 7) ^ ((v451 ^ 0xB14E1272) >> 4);
  v480 = (v461 + 1436873776) ^ (543720477 * v464 + 1638917865) ^ v455 ^ (v479 - 897235770 - ((2 * v479) & 0x950A898C));
  v481 = (v480 - ((2 * v480) & 0x20A43822) - 1873667055) ^ LODWORD(STACK[0x2B4]);
  v482 = v451 ^ v675 ^ (v481 - 1971060471 - ((2 * v481) & 0x15080212));
  *(_BYTE *)(v472 + STACK[0x260]) = (-14 - 65 * *(_BYTE *)(v478 + (BYTE2(v482) ^ 0xALL))) ^ 0xBC;
  *(_BYTE *)(v472 + STACK[0x240]) = (-14 - 65 * *(_BYTE *)(v478 + (BYTE2(v471) ^ 0x41))) ^ 0x7C;
  *(_BYTE *)(v472 + STACK[0x270]) = *(_BYTE *)(v467 + (v482 ^ 0xF5)) ^ 0xE7;
  *(_BYTE *)(v472 + STACK[0x278]) = *(_BYTE *)(v474 + (HIBYTE(v482) ^ 0x97)) ^ 0xA;
  *(_BYTE *)(v472 + STACK[0x288]) = (((unsigned __int16)(v477 ^ 0xEFBD) >> 8) - (((v477 ^ 0xFBE6EFBD) >> 7) & 0xA0) - 48) ^ *(_BYTE *)(v473 + (((unsigned __int16)(v477 ^ 0xEFBD) >> 8) ^ 0x55)) ^ 0xFC;
  *(_BYTE *)(v472 + STACK[0x258]) = *(_BYTE *)(v474 + (HIBYTE(v477) ^ 0x21)) ^ 0x90;
  *(_BYTE *)(v472 + STACK[0x290]) = (BYTE1(v482) - ((v482 >> 7) & 0xA0) - 48) ^ 0x1A ^ *(_BYTE *)(v473
                                                                                                + (BYTE1(v482) ^ 0x4DLL));
  *(_BYTE *)(v472 + STACK[0x280]) = (-14 - 65 * *(_BYTE *)(v478 + (BYTE2(v466) ^ 0x6FLL))) ^ 0xAC;
  *(_BYTE *)(v472 + STACK[0x298]) = *(_BYTE *)(v467 + (v477 ^ 0xB3)) ^ 0xBC;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(a70
                                                      + 8
                                                      * ((4010
                                                        * ((((_DWORD)v475
                                                           + 1520088323
                                                           - 2 * (((_DWORD)v475 + 16) & STACK[0x268] ^ STACK[0x254] & 4)) ^ 0x5A9AB4F3u) < a68)) ^ v552))
                                          - 4))(v472);
}

void sub_19309C910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a72;
  int a73;
  int a74;

  LODWORD(STACK[0x2B4]) = LODWORD(STACK[0x200]) ^ 0x3A861D05;
  LODWORD(STACK[0x2A0]) = a73 ^ 0xB026C51B;
  LODWORD(STACK[0x2AC]) = a74 ^ 0xBE4B7271;
  LODWORD(STACK[0x2B0]) = a72 ^ 0x6B9CDC2C;
  JUMPOUT(0x19309A2FCLL);
}

uint64_t sub_19309C964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,int a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int a69;
  int a71;
  uint64_t v71;
  int v72;

  v72 = a35 - ((a71 - 1357240149) & (2 * a69)) - 1942453212;
  return ((uint64_t (*)(void))(*(_QWORD *)(v71
                                        + 8
                                        * ((8068
                                          * (((2 * v72) & 0x7DB7DF7E ^ 0x2D12117A) + (v72 ^ 0x6956F702) + 1874673648 != 781791151)) ^ a71))
                            - 4))();
}

uint64_t sub_19309CA30(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((210 * (a1 + v2 + (((v1 - 1983) | 0x460) ^ 0x41241531u) > 7)) ^ (v1 + 1653)))
                            - 4))();
}

uint64_t sub_19309CAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6
                                                                                 + 8
                                                                                 * (int)((6439
                                                                                        * ((((a3 ^ 0xA34)
                                                                                           - 1408) & a5) == -1092882496)) ^ a3))
                                                                     - 4))(a1, a2, a3, v5);
}

uint64_t sub_19309CAE0(int a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v21;
  int v23;

  v9 = (a1 + v6 + a2);
  v10 = *(_QWORD *)(v8 - 248);
  v11 = v9 + v10 + 1;
  v12 = (a1 + v6) & 0xF;
  v13 = v5 + v12 - v9;
  v14 = v12 + 1;
  v15 = v5 + v12 + 1;
  v16 = v12 + 2;
  v17 = v3 + v12 + 2 - v9;
  v18 = v12 + (a3 ^ 0x673u) - 967 + v3 - 1389;
  v19 = v4 + v14 - v9;
  v21 = v15 > v10 && v13 < v11;
  v23 = v17 < v11 && v18 > v10 || v21;
  if (v4 + v16 > v10 && v19 < v11)
    v23 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v7 + 8 * ((7280 * (v23 ^ 1)) ^ a3)) - 4))();
}

uint64_t sub_19309CB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v5;
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                       + 8
                                                                       * ((126 * (v5 < ((40 * (a5 ^ 0x9A9)) ^ 0x18A0u))) ^ a5))
                                                           - ((2103 * (a5 ^ 0x935u)) ^ 0x106ALL)))(a1, a2, 0);
}

uint64_t sub_19309CBD0(int a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  int8x16_t v78;
  uint64_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16x4_t v83;
  int8x16x4_t v84;

  LODWORD(STACK[0x2B8]) = v73 + 5;
  v83.val[1].i64[0] = ((_BYTE)v73 + 14) & 0xF;
  v83.val[1].i64[1] = ((_BYTE)v73 + 13) & 0xF;
  v83.val[2].i64[0] = ((_BYTE)v73 + 12) & 0xF;
  v83.val[2].i64[1] = ((_BYTE)v73 + 11) & 0xF;
  v83.val[3].i64[0] = ((_BYTE)v73 + 10) & 0xF;
  v83.val[3].i64[1] = ((_BYTE)v73 + 9) & 0xF;
  v77 = a1 + v75 + a2;
  v78.i64[0] = 0x5353535353535353;
  v78.i64[1] = 0x5353535353535353;
  v79 = ((a4 - 818872447) & 0x30CEF8DF ^ 0x8C0) & v77;
  v83.val[0].i64[0] = v79;
  v83.val[0].i64[1] = ((_BYTE)v73 - 1) & 0xF;
  v80.i64[0] = vqtbl4q_s8(v83, (int8x16_t)xmmword_193301A70).u64[0];
  v84.val[0].i64[1] = ((_BYTE)v73 + 7) & 0xF;
  v84.val[1].i64[1] = STACK[0x2B8] & 0xF;
  v84.val[2].i64[1] = ((_BYTE)v73 + 3) & 0xF;
  v84.val[3].i64[1] = ((_BYTE)v73 + 1) & 0xF;
  v84.val[0].i64[0] = ((_BYTE)v73 + 8) & 0xF;
  v84.val[1].i64[0] = ((_BYTE)v73 + 6) & 0xF;
  v84.val[2].i64[0] = ((_BYTE)v73 + 4) & 0xF;
  v84.val[3].i64[0] = (v73 + 2) & 0xF;
  v80.i64[1] = vqtbl4q_s8(v84, (int8x16_t)xmmword_193301A70).u64[0];
  v81 = vrev64q_s8(vmulq_s8(v80, v78));
  *(int8x16_t *)(*(_QWORD *)(v76 - 248) - 15 + v77) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v72 + v79 - 15), *(int8x16_t *)(*(_QWORD *)(v76 - 248) - 15 + v77)), veorq_s8(*(int8x16_t *)(v79 + v70 - 13), *(int8x16_t *)(v79 + v71 - 14))), vextq_s8(v81, v81, 8uLL));
  return ((uint64_t (*)(void))(*(_QWORD *)(a70 + 8 * ((1390 * ((v74 & 0xFFFFFFF0) == 16)) ^ a4)) - 12))();
}

void sub_19309CD50()
{
  JUMPOUT(0x19309CCDCLL);
}

uint64_t sub_19309CD5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v7;
  uint64_t v8;

  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * ((8038 * (v7 != a3)) ^ a7)) - 4))();
}

uint64_t sub_19309CD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v7;
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9
                                                                                + 8
                                                                                * ((1549
                                                                                  * (((20
                                                                                     * (((a7 - 2183) | 0x901) ^ 0x875)
                                                                                     - 6312) & v8) == 0)) ^ ((a7 - 2183) | 0x901)))
                                                                    - (((a7 - 2183) | 0x901u)
                                                                     - 985)
                                                                    + 1388))(a1, a2, a3, (v7 - a3));
}

uint64_t sub_19309CDCC(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  char v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  char v82;
  uint64_t v83;
  int8x16x4_t v85;

  *(_DWORD *)(v77 - 256) = v76;
  v78 = 3151 * (a7 ^ 0x18B2);
  LODWORD(STACK[0x2B8]) = v73;
  v79 = (v78 ^ 0xFFFFE766) & v73;
  v80 = *(_QWORD *)(v77 - 248) - 7;
  v81 = -a3;
  LODWORD(STACK[0x2B4]) = v79;
  v82 = v74 + a1 + v75;
  v83 = (v81 + a1 + v75 + a2);
  v85.val[0].i64[0] = ((_BYTE)v81 + (_BYTE)a1 + (_BYTE)v75 + (_BYTE)a2) & 0xF;
  v85.val[0].i64[1] = ((_BYTE)v81 + v82 + 15) & 0xF;
  v85.val[1].i64[0] = ((_BYTE)v81 + v82 + 14) & 0xF;
  v85.val[1].i64[1] = ((_BYTE)v81 + v82 + 13) & 0xF;
  v85.val[2].i64[0] = ((_BYTE)v81 + v82 + 12) & 0xF;
  v85.val[2].i64[1] = ((_BYTE)v81 + v82 + 11) & 0xF;
  v85.val[3].i64[0] = ((_BYTE)v81 + v82 + 10) & 0xF;
  v85.val[3].i64[1] = ((_BYTE)v81 + v72 + (v78 ^ 7)) & 0xF;
  *(int8x8_t *)(v80 + v83) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v71 + (v83 & 0xF) - 7), *(int8x8_t *)(v80 + v83)), veor_s8(*(int8x8_t *)((v83 & 0xF) + v69 - 5), *(int8x8_t *)((v83 & 0xF) + v70 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v85, (int8x16_t)xmmword_193301A80), (int8x8_t)0x5353535353535353)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a69 + 8 * ((46 * (v81 != 8 - v79)) ^ v78)) - 12))((__n128)xmmword_193301A80);
}

void sub_19309CF18()
{
  JUMPOUT(0x19309CE48);
}

uint64_t sub_19309CF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W8>)
{
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                                                  + 8 * (((((a6 - 2207) | 0x540) ^ 0x2FB) * (LODWORD(STACK[0x2B8]) != LODWORD(STACK[0x2B4]))) ^ a6))
                                                                                      - 4))(a1, a2, a3, a4, a5, (a6 - 863));
}

uint64_t sub_19309CF84(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = (a4 - 781791152);
  *(_BYTE *)(*(_QWORD *)(v11 - 248) + v12) ^= *(_BYTE *)(v9 + (v12 & 0xF)) ^ *(_BYTE *)((v12 & 0xF) + v7 + 2) ^ *(_BYTE *)((v12 & 0xF) + v8 + 1) ^ (83 * (v12 & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v10 + 8 * ((50 * (a4 - 1 != v6)) ^ (a6 + 863))) - 4))();
}

void sub_19309CFF4()
{
  int v0;
  int v1;
  uint64_t v2;

  if (v0 == 1178481108)
    v1 = 1396931083;
  else
    v1 = 1396889059;
  *(_DWORD *)(v2 + 40) = v1;
}

void nXJ7Amk1zyK93(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5;
  int v6;

  if (a4)
    v5 = a5 == 0;
  else
    v5 = 1;
  v6 = !v5;
  __asm { BR              X9 }
}

uint64_t sub_19309D0DC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unsigned int a16)
{
  uint64_t v16;
  uint64_t v17;

  *a4 = 0;
  *a5 = 0;
  a16 = 710021923
      - 1194633773 * ((((2 * &a15) | 0x206D41C2) - &a15 - 272015585) ^ 0xD9CFF706);
  v17 = fp_dh_319bdb6023f2d8b43338e15ab46e6717(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v16 + 8 * ((492 * (a15 != 1396931083)) ^ 0xAE8u)) - 4))(v17);
}

uint64_t sub_19309D174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, unint64_t *a16, unsigned int a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  a16 = &STACK[0x2AE6FD99665E33E3];
  a17 = 1715670589 * (((~&a15 & 0xD1CDBB90) - (~&a15 | 0xD1CDBB91)) ^ 0xF4FC5A33) + 2289;
  fp_dh_b8f7f0c268b22e5dc7f380e39a6f3ee4((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8 * ((6313 * (a15 == 1396931083)) ^ 0xB04)) - 4))(v18, v19, v20, v21, v22, v23, v24, v25);
}

uint64_t sub_19309D244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18)
{
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;

  v24 = 381095207 * ((~v22 & 0x15DCBF2B272CAB32 | v22 & 0xEA2340D4D8D354CDLL) ^ 0xB7D5F99B3B519E12);
  HIDWORD(a16) = v24 + v21 - 730;
  a15 = a10;
  a17 = (((2 * v20) & 0xBBFAB54BDFBF7EC4) + (v20 ^ 0x5DFD5AA5EFDFBF62) + (v21 ^ 0xF37FB75FB86FFC3CLL)) ^ v24;
  ((void (*)(uint64_t *))(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v21 ^ 0x68C] - 4))(&a15);
  v25 = 2076498917 * ((v22 & 0x375B6A3F | ~(v22 | 0x375B6A3F)) ^ 0x719A858C);
  LODWORD(a15) = v25 ^ ((v19 ^ 0xF7F66F3F) + 1808784620 + ((2 * v19) & 0xEFECDE7E));
  HIDWORD(a15) = (v21 + 4002) ^ v25;
  a16 = v18;
  a18 = a10;
  v26 = ((uint64_t (*)(uint64_t *))fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v21 ^ 0x536])(&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8 * (int)((13 * ((_DWORD)a17 == 1396931083)) ^ v21))
                                          - 12))(v26);
}

uint64_t sub_19309D3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, uint64_t a17, unsigned int a18, unint64_t *a19, unsigned int a20)
{
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v22 = 544512889 * ((&a15 & 0xA1A59D6C | ~(&a15 | 0xA1A59D6C)) ^ 0x78618531);
  a19 = &STACK[0x16A78FCC143D0F89];
  a17 = a10;
  a16 = v20 - v22 - 897454668;
  a20 = v22 + 1192115370;
  a18 = 260146304 - v22;
  v23 = fp_dh_f54151dc8d4759a5df06023817f471a8((uint64_t)&a15);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v21
                                                      + 8
                                                      * (((a15 == 1396931083)
                                                        * ((((v20 ^ 0x7F3) + 2771) ^ 0x17E0) + 15 * (v20 ^ 0x7F3))) ^ v20))
                                          - 12))(v23);
}

uint64_t sub_19309D4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12, unint64_t *a13, uint64_t a14, uint64_t a15, unsigned int a16, unsigned int a17, unint64_t *a18, unint64_t *a19, unint64_t *a20,unsigned int a21)
{
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  a18 = &STACK[0x37A3641A609A77FF];
  a19 = &STACK[0x3C577A642E34C7EF];
  a20 = a13;
  a21 = v21 + ((((2 * &a16) | 0x6BDE24FE) - &a16 - 904860287) ^ 0x13D4F5DD) * v22 + 3536;
  ((void (*)(unsigned int *))(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v21 & 0xD7298A0F] - 12))(&a16);
  a16 = v21
      + 583213109
      * (((&a16 | 0xC7676D51) - &a16 + (&a16 & 0x389892A8)) ^ 0xD2C24342)
      + 2768;
  a18 = (unint64_t *)&a12;
  a19 = a13;
  ((void (*)(unsigned int *))(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v21 - 450] - 8))(&a16);
  a17 = v21
      - 1779849041
      * (((&a16 | 0x61807AD7) - &a16 + (&a16 & 0x9E7F8528)) ^ 0x54596EAC)
      + 2910;
  a18 = a13;
  v24 = fp_dh_a3f856c06909c1c78375f5adc976da00((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v23 + 8
                                                            * ((4078 * (a16 == ((v21 + 1251) ^ 0x53437DC9))) ^ v21))
                                          - 4))(v24);
}

uint64_t sub_19309D640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  int v12;
  uint64_t v13;

  return ((uint64_t (*)(void))(*(_QWORD *)(v13
                                        + 8
                                        * (int)(((((a12 == 0) ^ (v12 + 1)) & 1)
                                               * ((v12 + 1219455513) & 0xB7509D3E ^ 0x1401)) ^ v12))
                            - 8))();
}

uint64_t sub_19309D694()
{
  int v0;
  int v1;
  _DWORD *v2;
  _QWORD *v3;
  void (*v4)(uint64_t *);
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v5 = (v1 & 0xF66A7EFF) + 1251;
  *v3 = 0;
  *v2 = 0;
  v6 = (v0 ^ 0x7FCF7ADB) + ((2 * v0) & 0xFF9EF5B6) - 747374738 + v5;
  v7 = v5 - 1129841929 * ((&v12 & 0x30EF9C50 | ~(&v12 | 0x30EF9C50)) ^ 0x34EF3560);
  v8 = ((v1 & 0xF66A7EFF) - 219) | 0x900;
  v14 = v7 + 1341;
  v13 = v11;
  v4(&v12);
  v14 = v8 - 1129841929 * ((2 * (&v12 & 0x14EBF3F0) - &v12 + 1796475912) ^ 0x90EB5AC7) + 507;
  v13 = v10;
  v4(&v12);
  return v6 - 1396931083;
}

void fp_dh_9517221e0342b81d0d851dbc750518ae(uint64_t a1)
{
  int v1;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 8) + 2076498917 * (((a1 | 0x69ADF720) - (a1 & 0x69ADF720)) ^ 0xD093E76C);
  __asm { BR              X8 }
}

uint64_t sub_19309E0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,_DWORD *a35)
{
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;

  v38 = *a35 & 0x3F ^ (v35 + 37);
  *(_BYTE *)(v36 + v38) = -54;
  return ((uint64_t (*)(void))(*(_QWORD *)(v37 + 8 * (((v38 < 0x38) * ((v35 + 305) ^ 0x1D7)) ^ (v35 + 5497))) - 12))();
}

uint64_t sub_19309E120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  int v31;
  uint64_t v32;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32
                                                                                          + 8
                                                                                          * ((((v31 - 105247601) < 0x38)
                                                                                            * (((a5 + 1778) | 0x45) + 521)) ^ (a5 + 1008)))
                                                                              - 12))(a1, a2, a3, a4, a31);
}

uint64_t sub_19309E170()
{
  unsigned int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v4 = v0 + v2;
  if (v4 <= 0x38)
    v4 = 56;
  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * ((590 * (v4 - v0 + ((v1 - 2005) | 0x600u) + 105245913 > 7)) ^ v1))
                            - 12))();
}

uint64_t sub_19309E1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(a12 + v14) = v16;
  return ((uint64_t (*)(void))(*(_QWORD *)(v15
                                        + 8
                                        * ((5154 * ((v13 & 0xFFFFFFFFFFFFFFF8) - (v12 - 370) == -1310)) ^ v12))
                            - 4))();
}

uint64_t sub_19309E210(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v6 + v7) = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v8 + 8 * (((v5 == v7) * a4) ^ v4)) - 4))();
}

uint64_t sub_19309E234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37
                                                                                          + 8
                                                                                          * (int)(((v35 ^ 0xD25 ^ (v35 + 260814916) & 0xF07447DD)
                                                                                                 * (v34 != v36)) ^ v35))
                                                                              - 12))(a1, a2, a3, a4, a34);
}

uint64_t sub_19309E288@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  int v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  v7 = a2 + v3;
  *(_BYTE *)(v7 + a1 - 1) = v4;
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * (((v7 < 0x38) * v5) ^ (v2 - 34)))
                            - (v2 - 1042)
                            + 298))();
}

uint64_t sub_19309E2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;

  *(_BYTE *)(v7 + v8 + a5 - 1) = v9;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((((unint64_t)(v7 + v8) < 0x38) * v10) ^ v5)) - v6 + 298))();
}

uint64_t sub_19309E2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _BYTE *a17, _BYTE *a18, _BYTE *a19, _BYTE *a20,unsigned int *a21,_BYTE *a22,_BYTE *a23,_BYTE *a24,_BYTE *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unsigned __int8 *a33,uint64_t a34,unsigned int *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,unint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  int v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  int v65;
  int v66;
  char v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t, _DWORD *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *, unsigned int *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v74;
  int v75;
  _DWORD *v76;
  int v77;
  int v78;
  int v79;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t (*v83)(_QWORD, uint64_t, uint64_t, _DWORD *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *, unsigned int *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v85;
  BOOL v87;
  uint64_t (*v88)(unint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *, unsigned int *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v59 = *a33 ^ 0xEF;
  if (v59 == 1)
  {
    v66 = a2 ^ 0x13F1;
    v69 = *a35;
    v70 = *a35 >> SBYTE4(a15);
    *a25 = ((8 * *(_BYTE *)a35) ^ 0x50) - ((2 * ((8 * *(_BYTE *)a35) ^ 0x50)) & 0x9F) + 74;
    v67 = -108;
    *a24 = (v70 ^ 0x21) - ((2 * v70) & 0x94) + 74;
    *a23 = ((v69 >> 13) ^ 0xA5) - ((v69 >> 12) & 0x94) + 74;
    *a22 = ((v69 >> 21) ^ 0xCC) - ((2 * ((v69 >> 21) ^ 0xCC)) & 0x94) + 74;
    v71 = *a21;
    HIDWORD(v72) = *a21 ^ 2;
    LODWORD(v72) = v69 ^ 0x80000000;
    *a20 = (v72 >> 29) - ((2 * (v72 >> 29)) & 0x94) + 74;
    *a19 = ((v71 >> 5) ^ 0xC6) - ((2 * ((v71 >> 5) ^ 0xC6)) & 0x94) + 74;
    *a18 = ((v71 >> 13) ^ 0xC7) - ((2 * ((v71 >> 13) ^ 0xC7)) & 0x94) + 74;
    v68 = (v71 >> 21) ^ 0x54;
    v61 = HIDWORD(a44);
  }
  else
  {
    v60 = a2;
    v61 = HIDWORD(a44);
    if (v59 != 2)
      goto LABEL_6;
    v62 = *a21;
    *a25 = ((*a21 >> 21) ^ 0x54) + ((2 * ((*a21 >> 21) ^ 0x54)) & 0x94 ^ a15) + 75;
    *a24 = ((v62 >> 13) ^ 0xC7) - ((2 * ((v62 >> 13) ^ 0xC7)) & 0x94) + 74;
    v63 = (v62 >> 5) ^ 0xFFFFFFC6;
    v68 = *a35;
    HIDWORD(v64) = v62 ^ 2;
    LODWORD(v64) = *a35 ^ 0x80000000;
    v65 = v63 & 0x4B ^ (v62 >> 5) & 1;
    v66 = a2 + 4497;
    *a23 = v63 - 2 * v65 + 74;
    *a22 = (v64 >> 29) - ((2 * (v64 >> 29)) & 0x94) + 74;
    *a20 = ((v68 >> 21) ^ 0xCC) - ((2 * ((v68 >> 21) ^ 0xCC)) & 0x94) + 74;
    *a19 = ((v68 >> 13) ^ 0xA5) + (~(v68 >> 12) | 0x6B) + 75;
    *a18 = ((v68 >> 5) ^ 0x21) - ((v68 >> 4) & 0x94) + 74;
    v67 = -112;
    LOBYTE(v68) = (8 * v68) ^ 0x50;
  }
  v60 = (v66 - 4753) | 0x100;
  *a17 = v68 - (((_BYTE)v68 << (v66 + 58)) & v67) + 74;
LABEL_6:
  v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _DWORD *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *, unsigned int *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(((v60 + 1027) ^ 0xFFFFFFFFFFFFFACDLL) + *(_QWORD *)(v57 + 8 * (v60 + 249)));
  HIDWORD(a44) = v61;
  v74 = *(_DWORD *)(a53 - 0x5492E09C9D52CE97);
  v75 = *(_DWORD *)(a53 - 0x5492E09C9D52CE93);
  v76 = (_DWORD *)(a53 - 0x5492E09C9D52CE8FLL);
  v77 = *(_DWORD *)(a53 - 0x5492E09C9D52CE8FLL);
  v78 = *(unsigned __int8 *)(a53 - 0x5492E09C9D52CE83) ^ 0xEF;
  if (v78 == 2)
  {
    v85 = a2 + 1358;
    v87 = a5 < a46 && v56 < a5 + 64;
    v88 = *(uint64_t (**)(unint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *, unsigned int *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 8 * ((3734 * ((v87 ^ (v85 + a2 - 50 + 1)) & 1)) ^ ((int)a2 + 1364)));
    return v88(0xAB6D1F6362AD3175, *(unsigned int *)(a53 - 0x5492E09C9D52CE8BLL), v88, 1599102459, a5, (v85 + a2 + 718 + 1), a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44);
  }
  else if (v78 == 1)
  {
    v79 = a2 + 1091;
    v81 = a5 >= a46 || v56 >= a5 + 64;
    v82 = (746 * (a2 ^ 0x134)) ^ 0xDD6;
    v83 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, _DWORD *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, _BYTE *, _BYTE *, _BYTE *, unsigned int *, _BYTE *, _BYTE *, _BYTE *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *, uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 + 8 * (int)((v82 * v81) | v79)) - a55 + 1393);
    return v83(v83, v82, a3, v76, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42,
             a43,
             a44);
  }
  else
  {
    *(_DWORD *)(a53 - 0x5492E09C9D52CE9BLL) = 2 * (*(_DWORD *)(a53 - 0x5492E09C9D52CE9BLL) ^ v55)
                                            + v55
                                            - (v58 & (4 * (*(_DWORD *)(a53 - 0x5492E09C9D52CE9BLL) ^ v55)));
    *(_DWORD *)(a53 - 0x5492E09C9D52CE97) = (*(_DWORD *)(a53 - 0x5492E09C9D52CE97) ^ v55)
                                            + (v74 ^ v55)
                                            + v55
                                            - (v58 & (2 * ((*(_DWORD *)(a53 - 0x5492E09C9D52CE97) ^ v55) + (v74 ^ v55))));
    *(_DWORD *)(a53 - 0x5492E09C9D52CE93) = v55
                                            + (*(_DWORD *)(a53 - 0x5492E09C9D52CE93) ^ v55)
                                            + (v75 ^ v55)
                                            - (v58 & (2 * ((*(_DWORD *)(a53 - 0x5492E09C9D52CE93) ^ v55) + (v75 ^ v55))));
    *v76 = (*v76 ^ v55) + (v77 ^ v55) + v55 - (v58 & (2 * ((*v76 ^ v55) + (v77 ^ v55))));
    return v73(a1, a2, a3, v76, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             a34,
             a35,
             a36,
             a37,
             a38,
             a39,
             a40,
             a41,
             a42);
  }
}

uint64_t sub_19309FB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,unsigned int a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,int a56)
{
  uint64_t v56;
  _BOOL4 v57;

  if (a51 < 0xEC3A6C86 != (a56 - 1680604636) < 0xEC3A6C86)
    v57 = (a56 - 1680604636) < 0xEC3A6C86;
  else
    v57 = a56 - 1680604636 > a51;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 + 8 * ((56 * v57) | ((int)a2 + 3665))) - ((294 * (a2 ^ 0x134)) ^ 0x240)))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32,
           a33,
           a34,
           a35,
           a36,
           a37,
           a38,
           a39,
           a40,
           a41,
           a42,
           a43,
           a44,
           a45,
           a46);
}

void sub_19309FC08()
{
  JUMPOUT(0x19309EE28);
}

uint64_t sub_19309FC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,int a45)
{
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  _BOOL4 v50;

  v48 = v45 + ((10 * (v46 ^ 0x5D4)) ^ 0x2640A68F);
  v49 = (a45 + 1430940454 < (((v46 - 259) | 0x101) ^ 0x76A71792u)) ^ (v48 < 0x76A7125B);
  v50 = v48 < a45 + 1430940454;
  if (v49)
    v50 = a45 + 1430940454 < (((v46 - 259) | 0x101) ^ 0x76A71792u);
  return (*(uint64_t (**)(void))(v47 + 8 * ((3168 * v50) ^ v46)))();
}

uint64_t sub_19309FCA8@<X0>(int a1@<W0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t a4@<X7>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  _BOOL4 v55;
  unsigned int v56;
  int v57;
  _BOOL4 v58;

  v55 = v52 < v53;
  *(_BYTE *)(a50 - 0x5492E09C9D52CEE3 + (v50 + a1)) = *(_BYTE *)(a4 + (a3 + v51 + 246));
  v56 = v51 + ((a5 - 1171) ^ 0x2640A68C);
  v57 = v55 ^ (v56 < a2);
  v58 = v56 < v52;
  if (!v57)
    v55 = v58;
  return (*(uint64_t (**)(void))(v54 + 8 * (a5 ^ (2 * !v55))))();
}

void sub_19309FD1C()
{
  JUMPOUT(0x19309FCC0);
}

uint64_t sub_19309FD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t (*a36)(uint64_t),uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,int a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v56 = 1779849041 * ((2 * ((v55 - 144) & 0x385AEF38) - (v55 - 144) + 1202000066) ^ 0x727C04B9);
  *(_QWORD *)(v55 - 136) = a54;
  *(_DWORD *)(v55 - 128) = (v54 + 1809) ^ v56;
  *(_DWORD *)(v55 - 144) = (a45 + 145933006) ^ v56;
  v57 = fp_dh_4a1afbed36653809e8b05df03613ca9b(v55 - 144);
  return a36(v57);
}

uint64_t sub_19309FDA4@<X0>(int a1@<W0>, uint64_t a2@<X4>, uint64_t a3@<X6>, uint64_t a4@<X7>, int a5@<W8>)
{
  int v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;

  v7 = a5 - 18;
  *(_BYTE *)(a2 + (v5 + a1)) = *(_BYTE *)(a3 + a4 - 1348889250);
  v8 = a1 + v5 + 1 < ((v7 - 3653) ^ 0x208u);
  return ((uint64_t (*)(void))(*(_QWORD *)(v6 + 8 * ((2 * v8) | (16 * v8) | v7)) - 8))();
}

void sub_19309FDFC()
{
  JUMPOUT(0x19309FDA8);
}

void fp_dh_451b50d4c8b6df60dd22da0d071715ad(_DWORD *a1)
{
  unsigned int v1;
  int v2[10];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = *a1 - 1779849041 * (((a1 | 0xBB20328C) - (a1 & 0xBB20328C)) ^ 0x8EF926F7);
  v2[1] = v1
        - 1194633773 * ((2 * (v2 & 0x2E62BDE0) - v2 - 778223073) ^ 0x186415F8)
        + 710016156;
  fp_dh_319bdb6023f2d8b43338e15ab46e6717(v2);
  __asm { BR              X8 }
}

uint64_t sub_19309FF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unint64_t *a14, unsigned int a15)
{
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  a15 = v16 + 1715670589 * (&a13 ^ 0x2531E1A2) - 3478;
  a14 = &STACK[0x2AE6FD99665E33E3];
  fp_dh_b8f7f0c268b22e5dc7f380e39a6f3ee4((uint64_t)&a13);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8 * ((28 * (a13 == ((v16 - 2033) ^ (v15 - 1390)))) ^ v16))
                                                                                       - 8))(v18, v19, v20, v21, v22, v23);
}

uint64_t sub_19309FFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, int a16)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v20 = 1129841929 * ((((2 * &a13) | 0x370D0460) - &a13 - 461799984) ^ 0xE079D4FF);
  v21 = v20 + *(_DWORD *)(v16 + 8) - ((v19 - 1475140678) & (2 * *(_DWORD *)(v16 + 8))) - 737568472;
  a13 = a10;
  a14 = v20 + v19 - 1679;
  a15 = v21;
  fp_dh_6d4968a1e6327b0768c1089d4af09c03((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v18
                                                                                         + 8
                                                                                         * ((7027 * (a16 == v17)) ^ v19)))(v22, v23, v24, v25, v26, v27);
}

uint64_t sub_1930A0070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, unsigned int a16, unint64_t *a17, unsigned int a18)
{
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;

  v21 = 544512889 * ((&a13 & 0xF534C5CC | ~(&a13 | 0xF534C5CC)) ^ 0x2CF0DD91);
  a14 = v20 - v21 - 897456416;
  a18 = v21 - 197385909;
  a17 = &STACK[0x16A78FCC143D0F89];
  a15 = a10;
  a16 = 260146304 - v21;
  v22 = fp_dh_f54151dc8d4759a5df06023817f471a8((uint64_t)&a13);
  return (*(uint64_t (**)(uint64_t))(v19
                                            + 8
                                            * ((6003 * (a13 == (v20 ^ 0x1E2F ^ (v18 + 554) ^ v20 ^ 0x1811))) ^ v20)))(v22);
}

uint64_t sub_1930A0144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12, _BYTE *a13, unsigned int a14, unsigned int a15, char *a16, _BYTE *a17)
{
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  a16 = &a12;
  a17 = a13;
  a14 = v19 + 583213109 * (((&a14 | 0xFD2FEB6C) - (&a14 & 0xFD2FEB6C)) ^ 0xE88AC57F) - 778;
  ((void (*)(unsigned int *))(*(_QWORD *)(v21 + 8 * (v19 ^ 0x11A4)) - 8))(&a14);
  a15 = v19 - (&a14 ^ 0x35D9147B) * v18 - 636;
  a16 = a13;
  v22 = fp_dh_a3f856c06909c1c78375f5adc976da00((uint64_t)&a14);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v20 + 8 * ((703 * (a14 == v17)) ^ v19))
                                          - (v19 ^ 0x1E2Fu)
                                          + 3730))(v22);
}

uint64_t sub_1930A0200()
{
  uint64_t v0;
  int v1;
  void (*v2)(uint64_t *);
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v9 = v1
     - 547
     - 1129841929 * ((((2 * &v7) | 0x1116B758) - &v7 + 2004132948) ^ 0x73740D63)
     - 407;
  v8 = v6;
  v2(&v7);
  v8 = v4;
  v9 = v1
     + 1486
     - 1129841929 * ((((2 * &v7) | 0xC580BFD8) - &v7 + 490709012) ^ 0x193F0923)
     - 2440;
  result = ((uint64_t (*)(uint64_t *))v2)(&v7);
  *(_DWORD *)(v0 + 4) = v1 - 547 + (v5 ^ 0x5BDFFEBB) + ((2 * v5) & 0xB7BFFD76) - 144479046;
  return result;
}

void fp_dh_f29aec567fa848741650236f9be23ff7(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = 674475973 * ((~(_DWORD)a1 & 0x4B4C1530 | a1 & 0xB4B3EACF) ^ 0xB3DB5FDB);
  v2 = *(_DWORD *)(a1 + 16) - v1;
  v3 = (*(_BYTE *)a1 - v1);
  ((void (*)(uint64_t, void (*)()))fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v2 ^ 0xB1E])(fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v2 - 2122] - 12, fp_dh_4cba8d73ca3420ff269d6c432f5993ac);
  v4 = *(_QWORD *)fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v2 - 2414];
  v5 = (2076498917
      * (((&v5 | 0xF60D4997) - &v5 + (&v5 & 0x9F2B668)) ^ 0x4F3359DB)) ^ (v2 + 1723);
  v6 = v4;
  fp_dh_38e3451236f6a7c963e0a14008c147e1((uint64_t)&v5);
  __asm { BR              X8 }
}

uint64_t sub_1930A0464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v20 = 1779849041 * ((&a16 - 2 * ((unint64_t)&a16 & 0x35935F7F) + 898850687) ^ 0x4A4B04);
  a17 = v20 + v17 - 1201;
  a16 = v20 ^ 0x40;
  fp_dh_20b66421558df8a2387a485885194324((uint64_t)&a16);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 + 8 * (int)(((**(_DWORD **)(v19 + 8 * (int)((v17 + 741833860) & 0xD3C87FE8 ^ 0x675)) == 0) * (((v17 + 741833860) & 0xD3C87FE8 ^ 0x607) + 298)) ^ (v17 + 741833860) & 0xD3C87FE8)) - 53 * ((v17 + 741833860) & 0xD3C87FE8 ^ 0x607) + 2479))(v21, v22, v23, v24, v25, v26, v27, v28);
}

uint64_t sub_1930A0528@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t (*v13)(uint64_t, _BYTE *, _DWORD *);
  int v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[30];
  _BYTE v24[140];

  v8 = *(unsigned int **)(v6 + 8 * (a1 - 2376));
  v9 = *(_QWORD *)(v6 + 8 * (a1 - 2384));
  v10 = *v8;
  v11 = *(_BYTE **)(v9 - 4);
  v23[0] = *v11 - 1;
  v23[1] = v11[1] - 1;
  v23[2] = v11[2] - 1;
  v23[3] = v11[3] - 1;
  v23[4] = v11[4] - 1;
  v23[5] = v11[5] - 1;
  v23[6] = v11[6] - 1;
  v23[7] = v11[7] - 1;
  v23[8] = v11[8] - 1;
  v23[9] = v11[9] - 1;
  v23[10] = v11[10] - 1;
  v23[11] = v11[11] - 1;
  v23[12] = v11[12] - 1;
  v23[13] = v11[13] - 1;
  v23[14] = v11[14] - 1;
  v23[15] = v11[15] - 1;
  v23[16] = v11[16] - 1;
  v23[17] = v11[17] - 1;
  v23[18] = v11[18] - 1;
  v23[19] = v11[19] - 1;
  v23[20] = v11[20] - 1;
  v23[21] = v11[21] - 1;
  v12 = *(_BYTE **)(v9 - 4);
  v23[22] = v12[22] - 1;
  v23[23] = v12[23] - 1;
  v23[24] = v12[24] - 1;
  v23[25] = v12[25] - 1;
  v23[26] = v12[26] - 1;
  v23[27] = v12[27] - 1;
  v23[28] = v12[28] - 1;
  v23[29] = v12[29] - 1;
  v13 = *(uint64_t (**)(uint64_t, _BYTE *, _DWORD *))(v6 + 8 * (a1 - 1880));
  v14 = v13(v10, v23, v2);
  v15 = ((2 * v14) & 0x7FFBDFE6) + (v14 ^ 0xBFFDEFF3);
  if (v15 != -1073877005)
  {
    if (v15 == -1073875903)
    {
      v16 = *v8;
      v17 = **(_BYTE ***)(v6 + 8 * (v4 & 0x80FC683));
      v24[0] = *v17 - 107;
      v24[1] = v17[1] - 107;
      v24[2] = v17[2] - 107;
      v24[3] = v17[3] - 107;
      v24[4] = v17[4] - 107;
      v24[5] = v17[5] - 107;
      v24[6] = v17[6] - 107;
      v24[7] = v17[7] - 107;
      v24[8] = v17[8] - 107;
      v24[9] = v17[9] - 107;
      v24[10] = v17[10] - 107;
      v24[11] = v17[11] - 107;
      v24[12] = v17[12] - 107;
      v24[13] = v17[13] - 107;
      v24[14] = v17[14] - 107;
      v24[15] = v17[15] - 107;
      v24[16] = v17[16] - 107;
      v24[17] = v17[17] - 107;
      v24[18] = v17[18] - 107;
      v24[19] = v17[19] - 107;
      v18 = v13(v16, v24, v2);
      v19 = (2 * v18) & 0x67FBD7FE;
      v15 = (v18 ^ 0xB3FDEBFF) + 2130640852;
    }
    else
    {
      v19 = 1929313248;
    }
    __asm { BR              X8 }
  }
  v20 = 12 * (v4 ^ 0x982);
  *(_DWORD *)(v7 + 348) |= v20 ^ 0x2A6;
  *(_DWORD *)(v7 + 48) = 392200185;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _DWORD *))(v6 + 8 * (v4 ^ 0xBF4)))(*v2, v7 + 336, v7 + 340, v7 + 344, v3);
  v22 = *(_QWORD *)(v1 + 8);
  *(_DWORD *)(*(_QWORD *)(v1 + 24) - 0x3AAFE8B64B7940FBLL) = *v2;
  *(_DWORD *)(v22 - 0x2A7009A6F931A80ALL) = *v3 - ((((v20 - 428) | 0x8BB) ^ 0xB4F7F90D) & (2 * *v3)) + 1518073947;
  *(_DWORD *)(v1 + 20) = 1396931083;
  return result;
}

void fp_dh_2876d1e714879b3c54d91a9c48f668ac(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 ^ (2076498917 * (((a1 | 0xC24F2015) - (a1 & 0xC24F2015)) ^ 0x7B713059));
  __asm { BR              X14 }
}

void sub_1930A0AD4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_DWORD *)(v1 + a1) = 591853320;
}

void fp_dh_e9413a1b90a94592e671af1dc9d8009b(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 12) ^ (2076498917 * ((a1 - 698036744 - 2 * (a1 & 0xD664CDF8)) ^ 0x6F5ADDB4));
  __asm { BR              X17 }
}

uint64_t sub_1930A1C08()
{
  int v0;
  int v1;
  uint64_t v2;

  return (*(uint64_t (**)(void))(v2
                              + 8
                              * ((226
                                * (((2 * v1) & 0x65BFFFE6 ^ ((v0 | 0x600) - 851) ^ 0x2BB652)
                                 + (v1 ^ 0xFFCA2ED2)
                                 - 810304896 == (((v0 | 0x600) - 3593) ^ 0x293B329))) ^ (v0 | 0x600))))();
}

uint64_t sub_1930A1C74(int a1, int a2)
{
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3 + 8 * (v2 | (715 * ((a2 + a1 - 853540851) > 7))))
                            - (v2 - 2521)
                            - 3 * (v2 ^ 0x1163u)
                            + 6788))();
}

uint64_t sub_1930A1CC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9
                                        + 8
                                        * (((((a8 + 20) ^ 0x1A12) - 4061) * ((a3 + v8 - 16) < 0xFFFFFFF0)) ^ a8))
                            - 8))();
}

uint64_t sub_1930A1D00(int a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  unint64_t v20;
  int v22;

  v12 = v10 - 0x2EFDBDC57A1C0AADLL + (a2 + a1 + a3);
  v13 = a5 - (v10 - 0x2EFDBDC57A1C0AADLL) - 0xEFF38C3BE7AF59ELL;
  v14 = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  v15 = v14 + v9 - v12;
  v16 = (v14 | v8) - v12;
  v17 = (v14 | v7) - v12;
  v19 = v15 > 0xF && v13 >= (unint64_t)(a6 + 1334) - 5503 && v16 > 0xF;
  v20 = v17 + 1;
  v22 = v19 && v20 > 0xF;
  return ((uint64_t (*)(void))(*(_QWORD *)(v11 + 8 * ((1098 * v22) ^ a7)) - 8))();
}

uint64_t sub_1930A1D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W7>, unsigned int a6@<W8>)
{
  uint64_t v6;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6
                                                                                         + 8
                                                                                         * ((107
                                                                                           * (((a6 < 0x10) ^ (a5 - 102)) & 1)) ^ a5))
                                                                             - 8))(a1, a2, a3, a4, 0);
}

uint64_t sub_1930A1DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16x4_t v35;
  int8x16x4_t v36;

  v29 = v24 - 35;
  v35.val[1].i64[0] = ((_BYTE)a4 + 10) & 0xF;
  v35.val[1].i64[1] = ((_BYTE)a4 + 9) & 0xF;
  v35.val[2].i64[0] = ((v29 ^ 0xE) + (_BYTE)a4) & 0xF;
  v35.val[2].i64[1] = ((_BYTE)a4 + 7) & 0xF;
  v35.val[3].i64[0] = ((_BYTE)a4 + 6) & 0xF;
  v35.val[3].i64[1] = ((_BYTE)a4 + 5) & 0xF;
  v30 = a2 + a1 + a3;
  v31.i64[0] = 0x8B8B8B8B8B8B8B8BLL;
  v31.i64[1] = 0x8B8B8B8B8B8B8B8BLL;
  v35.val[0].i64[0] = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)a3) & 0xF;
  v35.val[0].i64[1] = ((_BYTE)a4 + 11) & 0xF;
  v32.i64[0] = vqtbl4q_s8(v35, (int8x16_t)xmmword_193301A70).u64[0];
  v36.val[0].i64[1] = ((_BYTE)a4 + 3) & 0xF;
  v36.val[1].i64[1] = ((_BYTE)a4 + 1) & 0xF;
  v36.val[2].i64[1] = ((_BYTE)a4 - 1) & 0xF;
  v36.val[3].i64[1] = ((_BYTE)a4 + 13) & 0xF;
  v36.val[0].i64[0] = ((_BYTE)a4 + 4) & 0xF;
  v36.val[1].i64[0] = ((_BYTE)a4 + 2) & 0xF;
  v36.val[2].i64[0] = a4 & 0xF;
  v36.val[3].i64[0] = ((_BYTE)a4 + 14) & 0xF;
  v32.i64[1] = vqtbl4q_s8(v36, (int8x16_t)xmmword_193301A70).u64[0];
  v33 = vrev64q_s8(vmulq_s8(v32, v31));
  *(int8x16_t *)(v28 - 15 + v30) = veorq_s8(veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v27 + (v30 & 0xF) - 15), *(int8x16_t *)(v23 - 15 + v30)), *(int8x16_t *)(v26 + (v30 & 0xF) - 15)), *(int8x16_t *)(v25 + (v30 & 0xF) + (v29 ^ 0xF07) - 15)), vextq_s8(v33, v33, 8uLL));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a23 + 8 * (int)((47 * ((a5 & 0xFFFFFFF0) != 16)) ^ v29)))(a1, a2, a3, a4, a5 & 0xFFFFFFF0, v23 - 15, v35.val[0].i64[1], v29 ^ 0x1C9D, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16,
           a17);
}

void sub_1930A1F48()
{
  JUMPOUT(0x1930A1ED0);
}

uint64_t sub_1930A1F54()
{
  int v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * (v0 | (v1 != 0xCD15D121) | (32 * (v1 != 0xCD15D121))))
                                          - (((v0 - 4088) | 0x812u) ^ 0x952)))(1082353976);
}

uint64_t sub_1930A1FA4(int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;

  v11 = v7 > 0xC09F901D;
  *(_BYTE *)(v9 + (a1 - 1082353976)) = *(_BYTE *)(v5 + (((_BYTE)a1 - 56) & 0xF)) ^ *(_BYTE *)(v1 + (a1 - 1082353976)) ^ *(_BYTE *)(v4 + (((_BYTE)a1 - 56) & 0xF)) ^ *(_BYTE *)(((a1 - 1082353976) & 0xFLL) + v3 + 1) ^ (-117 * ((a1 - 56) & 0xF));
  v12 = a1 - 19069269;
  v13 = (a1 + 1);
  v14 = v11 ^ (v12 < v6);
  v15 = v12 < v8;
  if (!v14)
    v11 = v15;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v10 + 8 * ((v11 * (v2 - 4383)) | v2)) - 8))(v13);
}

uint64_t sub_1930A2040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (a8 ^ (7 * (v8 == a5))))
                            - ((a8 + 101) | 0x10u)
                            - ((a8 - 1908704797) & 0x71C47BDB)
                            + 7518))();
}

uint64_t sub_1930A2094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  char v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9
                                                                                                  + 8 * ((61 * ((v8 & 8) != ((a8 - 952) | 1) - 4185)) ^ a8))
                                                                                      - 12))(a1, a2, a3, a4, a5, (a8 - 951));
}

uint64_t sub_1930A20D4@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W4>, int a5@<W8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  char v30;
  unsigned int v31;
  int8x16x4_t v33;

  v30 = v27 + a2 + a1 - a4;
  v31 = a2 + a1 + a3 - a4;
  v33.val[0].i64[0] = v31 & 0xF;
  v33.val[0].i64[1] = (v30 + 11) & 0xF;
  v33.val[1].i64[0] = (v30 + 10) & 0xF;
  v33.val[1].i64[1] = (v30 + 9) & 0xF;
  v33.val[2].i64[0] = (v30 + 8) & 0xF;
  v33.val[2].i64[1] = (v30 + 7) & 0xF;
  v33.val[3].i64[0] = (v30 + 6) & 0xF;
  v33.val[3].i64[1] = ((_BYTE)a2 + (_BYTE)a1 + (_BYTE)v29 - (_BYTE)a4 + 44) & 0xF;
  *(int8x8_t *)(v28 - 7 + v31) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v26 + v33.val[0].i64[0] - 7), *(int8x8_t *)(v23 - 7 + v31)), veor_s8(*(int8x8_t *)(v25 + v33.val[0].i64[0] - 7), *(int8x8_t *)(v33.val[0].i64[0] + v24 - 6))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v33, (int8x16_t)xmmword_193301A80), (int8x8_t)0x8B8B8B8B8B8B8B8BLL)));
  return ((uint64_t (*)(__n128))(*(_QWORD *)(a23
                                                     + 8 * ((3947 * (a4 - (a5 & 0xFFFFFFF8) == -8)) ^ (v29 - 2869)))
                                         - 8))((__n128)xmmword_193301A80);
}

void sub_1930A2228()
{
  JUMPOUT(0x1930A2154);
}

uint64_t sub_1930A2230@<X0>(int a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,int a21,int a22)
{
  uint64_t v22;

  return ((uint64_t (*)(void))(*(_QWORD *)(v22
                                        + 8
                                        * (int)(((((a19 + 1290629043) & 0xB3128F5B) + (a19 ^ 0x1BFA)) * (a1 == a22)) ^ a19))
                            - 8))();
}

uint64_t sub_1930A2288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v12 + (v7 - 43235956)) = *(_BYTE *)(v10 + ((v7 - 43235956) & 0xFLL)) ^ *(_BYTE *)(v6 + (v7 - 43235956)) ^ *(_BYTE *)(v9 + (((_BYTE)v7 - 116) & 0xF)) ^ *(_BYTE *)((((_BYTE)v7 - 116) & 0xF) + v8 + 1) ^ (-117 * ((v7 - 116) & 0xF));
  return ((uint64_t (*)(void))(*(_QWORD *)(v13 + 8 * ((742 * (v7 - 1 == v11 + 1866)) ^ (a6 + 289)))
                            - ((342 * (a6 ^ 0x105Eu)) ^ 0x956)))();
}

uint64_t sub_1930A230C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int8x16_t a31)
{
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;

  v33 = vrev64q_s8(*(int8x16_t *)*(_QWORD *)(v31 + 16));
  v34 = vextq_s8(v33, v33, 8uLL);
  v35.i64[0] = 0xC4C4C4C4C4C4C4C4;
  v35.i64[1] = 0xC4C4C4C4C4C4C4C4;
  v36.i64[0] = 0x3B3B3B3B3B3B3B3BLL;
  v36.i64[1] = 0x3B3B3B3B3B3B3B3BLL;
  v37 = vaddq_s8(vorrq_s8(v34, v35), vorrq_s8(v34, v36));
  v35.i64[0] = 0x9999999999999999;
  v35.i64[1] = 0x9999999999999999;
  v38 = vrev64q_s8(veorq_s8(vaddq_s8(v37, v35), (int8x16_t)xmmword_193301AE0));
  a31 = vextq_s8(v38, v38, 8uLL);
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v32
                                                      + 8
                                                      * (int)(((((a7 - 1451) ^ 0xFFFFF235) + (a7 ^ 0x18F3))
                                                             * (&a9 != (uint64_t *)-176)) ^ a7))
                                          - 12))(4294924396);
}

uint64_t sub_1930A2388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  return ((uint64_t (*)(void))(*(_QWORD *)(v11
                                        + 8
                                        * (int)(v9 ^ (4127 * (v10 - 0x7F8739AEE44AA801 == a9 + 0x517B088BA1994D52))))
                            - (v9 ^ 0x3ABLL)))();
}

uint64_t sub_1930A23E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  int v33;
  uint64_t v34;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 + 8 * ((119 * (((v32 == 0x2EFDBDC57A1C0AADLL) ^ (((v33 + 68) & 0xBF) - 10)) & 1)) ^ (v33 - 61320380) & 0x3A7B9BF)) - 8))(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           a30,
           a31,
           a32);
}

uint64_t sub_1930A2484()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(void))(*(_QWORD *)(v2
                                        + 8
                                        * ((119 * (((v0 == 0x2EFDBDC57A1C0AADLL) ^ (v1 - 10)) & 1)) ^ v1))
                            - 8))();
}

uint64_t sub_1930A24D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18)
{
  int v18;
  uint64_t v19;
  _BOOL4 v21;

  v21 = (((_BYTE)a18 + 10) & 0xF) != 0 || a18 == (v18 ^ 0x15) + 1154960540;
  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v19 + 8 * ((v21 * ((33 * (v18 ^ 0x9C6)) ^ 0x11BC)) ^ v18))
                                          - 12))(4294924397);
}

uint64_t sub_1930A252C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))(*(_QWORD *)(v2
                                                      + 8
                                                      * ((((((v1 + 1735) | 0x188) - 1331) ^ (v1 + 2981))
                                                        * (v0 != 0x7F3D95BEA09CADA4)) ^ v1))
                                          - 12))(4294924396);
}

uint64_t sub_1930A2574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unsigned __int8 *a31)
{
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned __int8 v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  unsigned __int8 v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  unint64_t v99;
  unsigned int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  int v107;
  unsigned int v108;
  int v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned __int8 v119;
  int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned __int8 v141;
  int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  unsigned int v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  int v178;
  int v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  unsigned int v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unint64_t v192;
  unsigned __int8 v193;
  unsigned int v194;
  int v195;
  unsigned int v196;
  int v197;
  int v198;
  unsigned int v199;
  int v200;
  unsigned int v201;
  int v202;
  int v203;
  unsigned int v204;
  int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  int v212;
  unsigned int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  int v223;
  int v224;
  int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  int v231;
  int v232;
  unsigned int v233;
  int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  unsigned int v249;
  int v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  unsigned int v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  int v263;
  unsigned int v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  int v282;
  int v283;
  unsigned int v284;
  unsigned int v285;
  _BOOL4 v286;
  uint64_t v288;
  _BYTE v289[12];
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  __int16 v294;
  int v295;

  v34 = (v32 + 1455643572) & 0xA93C9FFF;
  v35 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 ^ 0x1541];
  v36 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 - 4886] - 4;
  v37 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 - 4800] - 12;
  v38 = ((*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9ALL) ^ 0xFFFFFF87)
       + (~(2 * *(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9ALL)) & 0x50)
       + *(unsigned __int8 *)(v37 + (*(_BYTE *)(v31 - 0x7F3D95BEA09CAD9ALL) ^ (v32 + 88)))
       - 110) ^ 0xFFFFFFAA;
  v39 = ((((v38 & 0xFFFFFF8D ^ 5) & 0xFC | v38 & 0x70) >> 2) | ((v38 & 0xFFFFFF8D ^ 5 | v38 & 0x72) << 6)) ^ 0xFFFFFFEF;
  v40 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v32 ^ 0x1575] - 12;
  v41 = *(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9ELL);
  v42 = (75 * *(_BYTE *)(v35 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9DLL) ^ 0x7BLL)) + 61) | ((*(unsigned __int8 *)(v36 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9FLL) ^ 0xC8)) ^ 0x79) << 16) | (((*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA0) - ((2 * *(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA0)) & 0x58) - 84) ^ 0x2F ^ *(unsigned __int8 *)(v40 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA0) ^ 0x9DLL))) << 24) | ((((v41 ^ 0xB) + *(_BYTE *)(v37 + ((v41 & 0x40 | (v41 ^ 0xB) & 0xFFFFFFBF) ^ 0x78)) + 58) ^ 0x4C) << 8);
  v43 = *(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD98);
  v288 = v36;
  v44 = ((75 * *(_BYTE *)(v35 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD99) ^ 0x45)) + 61) | (~((v39 >> 6) | (4 * v39)) << 8) | (((*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9CLL) - ((2 * *(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9CLL)) & 0x58) - 84) ^ 0xDA ^ *(unsigned __int8 *)(v40 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9CLL) ^ 0x5CLL))) << 24) | ((*(unsigned __int8 *)(v36 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD9BLL) ^ 0xBCLL)) ^ 0x20) << 16)) ^ 0x263E6D46;
  v45 = ((75 * *(_BYTE *)(v35 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD95) ^ 0x7DLL)) + 61) | ((((*(_BYTE *)(v31 - 0x7F3D95BEA09CAD96) ^ 0xFE) + *(_BYTE *)(v37 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD96) ^ 0x86)) + 58) ^ 0xCF) << 8) | ((*(unsigned __int8 *)(v36 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CAD97) ^ 0x8BLL)) ^ 0x7B) << 16) | (((v43 - ((2 * v43) & 0x58) - 84) ^ 0x4E ^ *(unsigned __int8 *)(v40 + (v43 ^ 0xF1) - 2 * ((v43 ^ 0xF1) & 0xFFFFFFFB) + 251)) << 24)) ^ 0xB75D1F38;
  v46 = (((((*(_BYTE *)(v31 - 0x7F3D95BEA09CADA2) ^ 0x43)
                           + *(_BYTE *)(v37 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA2) ^ 0x3BLL))
                           + 58) ^ 0x56) << 8) | ((*(unsigned __int8 *)(v36
                                                                      + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA3) ^ 0xAELL)) ^ 0x51) << 16) | ((*(unsigned __int8 *)(v40 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA4) ^ 0xD5)) ^ (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA4) - ((2 * *(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA4)) & 0x58) - 84) ^ 0xD4) << 24) | (75 * *(_BYTE *)(v35 + (*(unsigned __int8 *)(v31 - 0x7F3D95BEA09CADA1) ^ 0xFELL)) + 61)) ^ 0x6A911045;
  v293 = ((v34 + 1521806924) & 0xA54B15FF ^ 0xE6C92280) + 423020932;
  v47 = (75 * *(_BYTE *)(v35 + (v33[v293] ^ 0xD2)) + 61) | ((*(unsigned __int8 *)(v40 + (*v33 ^ 0x34)) ^ (*v33 - ((2 * *v33) & 0x58) - 84) ^ 0x77777777) << 24);
  v48 = v47 + 157894561 - 2 * (v47 & 0x90000BB ^ (75 * *(_BYTE *)(v35 + (v33[v293] ^ 0xD2)) + 61) & 0x1A);
  HIDWORD(v49) = *(unsigned __int8 *)(v36 + (a31[9] ^ 0x40));
  LODWORD(v49) = (HIDWORD(v49) ^ 0x88888888) << 24;
  v50 = *(unsigned __int8 *)(v36 + (a31[1] ^ 0xABLL)) ^ 0x93;
  v51 = ((v50 << 17) & 0xEEEEEEEE) + ((v50 << 16) ^ 0xFE77AFEB) + 25710613;
  v52 = (v51 - (v51 | v48 ^ 0x96947A1)) ^ ((v48 ^ 0xF696B85E) + 1);
  *(_DWORD *)&v289[8] = 0;
  LODWORD(v36) = ((*(unsigned __int8 *)(v40 + (a31[4] ^ 0xFBLL)) ^ (a31[4] - ((2 * a31[4]) & 0x58) - 84) ^ 0xD9) << 24) | ((*(unsigned __int8 *)(v36 + (a31[5] ^ 0xEDLL)) ^ 0x53) << 16) | (75 * *(_BYTE *)(v35 + (a31[7] ^ 0x57)) + 61);
  v53 = v46 ^ (((*(_BYTE *)(v37 + (a31[2] ^ 0xA7)) + (a31[2] ^ 0xDF) + 58) ^ 0xA0) << 8) ^ (((v52 + 157894561 + (~(2 * v52) | 0xED2D70BD) + 1) ^ v48) + v51);
  v54 = ((75 * *(_BYTE *)(v35 + (a31[11] ^ 0x96)) + 61) | ((((((v49 >> 25) & 0x80) != 0) | (2 * (v49 >> 25))) ^ 0xAD) << 16) | (((a31[8] - ((2 * a31[8]) & 0x58) - 84) ^ 0x5B ^ *(unsigned __int8 *)(v40 + (a31[8] ^ 0x8ELL))) << 24) | ((((a31[10] ^ 0xEB) + *(_BYTE *)(v37 + (a31[10] ^ 0x93)) + 58) ^ 0x3E) << 8)) ^ v44;
  v55 = (v36 + 1009917747 - 2 * (v36 & 0x3C3200DF ^ (75 * *(_BYTE *)(v35 + (a31[7] ^ 0x57)) + 61) & 6) + 166) ^ v42 ^ 0x3C321F33;
  v56 = (((((a31[14] ^ 0x49) + *(_BYTE *)(v37 + (a31[14] ^ 0x31)) + 58) ^ 0x68) << 8) | ((*(unsigned __int8 *)(v288 + (a31[13] ^ 0xB6)) ^ 0x6B) << 16) | (75 * *(_BYTE *)(v35 + (a31[15] ^ 0xD9)) + 61) | ((*(unsigned __int8 *)(v40 + (a31[12] ^ 0x9FLL)) ^ (a31[12] - ((2 * a31[12]) & 0x58) - 84) ^ 0x43) << 24)) ^ v45;
  v294 = v55 ^ (((unsigned __int16)((a31[6] ^ 0xFFB7) + *(unsigned __int8 *)(v37 + (a31[6] ^ 0xCFLL)) + 58) ^ 0xD0) << 8);
  v57 = BYTE1(v53) ^ 0xA2;
  v58 = ((v53 ^ 0xEEA3A22F) >> 16) - (((v53 ^ 0xEEA3A22F) >> 15) & 0x91E) - 964426609;
  v59 = v56 ^ 0xF2D3D2F0;
  v60 = (v53 ^ 0xEEA3A22F) >> 8;
  v61 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v34 ^ 0x11A6] - 4;
  v62 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v34 - 3504] - 4;
  LODWORD(v36) = *(_DWORD *)(v61 + 4 * (HIBYTE(v53) ^ 0x16)) ^ 0x7A4B79B1;
  v63 = BYTE2(v55) ^ 0x43 ^ *(_DWORD *)(v62 + 4 * (BYTE2(v55) ^ 0xE6u)) ^ ((BYTE2(v55) ^ 0x43)
                                                                           + 408847802
                                                                           + ((2 * (BYTE2(v55) ^ 0x43) + 348) & 0x216 ^ 0xBEFAF3FF));
  v64 = v63 + v36;
  LODWORD(v36) = v63 & v36;
  v292 = v34;
  v65 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v34 ^ 0x113E] - 4;
  v66 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v34 ^ 0x13A1] - 12;
  v67 = *(_DWORD *)(v66 + 4 * (v56 ^ 0x9Fu));
  HIDWORD(v49) = ~v67;
  LODWORD(v49) = v67 ^ 0x62ECDB60;
  v68 = ((v54 ^ 0x58DCD133) >> 16);
  v69 = (v49 >> 2) ^ ((((unsigned __int16)(v54 ^ 0xD133) >> 8) ^ 0xE2ED4D07)
                    - 1129327840
                    + *(_DWORD *)(v65 + 4 * (((unsigned __int16)(v54 ^ 0xD133) >> 8) ^ 0x74u))) ^ (v64 - 2 * v36);
  v70 = *(_DWORD *)(v66 + 4 * (v53 ^ 0x40u));
  HIDWORD(v49) = ~v70;
  LODWORD(v49) = v70 ^ 0x62ECDB60;
  v71 = *(_DWORD *)(v61 + 4 * (HIBYTE(v55) ^ 0xA7)) ^ (v68 + 408847802 + ((2 * v68 + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (v68 ^ 0xA5u)) ^ (*(_DWORD *)(v65 + 4 * ((BYTE1(v59) - ((v59 >> 7) & 0xC4) + 98) ^ 0x16u)) + (((BYTE1(v59) - ((v59 >> 7) & 0xC4) + 98) & 0xF8 | (BYTE1(v59) - ((v59 >> 7) & 0xC4) + 106) & 7) ^ 0xE2ED4D65) - 1129327840) ^ (v49 >> 2);
  v72 = *(_BYTE *)(v61 + 4 * (HIBYTE(v55) ^ 0xA7)) ^ (v68 - 70 + ~((2 * v68 + 92) & 0x16)) ^ *(_BYTE *)(v62 + 4 * (v68 ^ 0xA5u)) ^ (*(_BYTE *)(v65 + 4 * ((BYTE1(v59) - ((v59 >> 7) & 0xC4) + 98) ^ 0x16u)) + (((BYTE1(v59) - ((v59 >> 7) & 0xC4) + 98) & 0xF8 | (BYTE1(v59) - ((v59 >> 7) & 0xC4) + 106) & 7) ^ 0x65) + 32) ^ (v49 >> 2) ^ v68;
  v73 = *(_DWORD *)(v62 + 4 * (((v56 ^ 0xF2D3D2F0) >> 16) ^ 0xA5u)) ^ (((v56 ^ 0xF2D3D2F0) >> 16)
                                                                                        + 408847802
                                                                                        + ((2
                                                                                          * ((v56 ^ 0xF2D3D2F0) >> 16)
                                                                                          + 348) & 0x216 ^ 0xBEFAF3FF));
  HIDWORD(v49) = v60;
  LODWORD(v49) = v57;
  v74 = *(_DWORD *)(v66 + 4 * (v55 ^ 0xCDu));
  v75 = ((v57 ^ 0xE2ED4D07) - 1129327840 + *(_DWORD *)(v65 + 4 * (__ROR4__((v49 >> 1) ^ 0x89F7BF79, 31) ^ 0x13EF7E87u))) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v54) ^ 0xA0)) ^ (v74 >> 2) ^ (v73 + 1188753810 - ((2 * v73) & 0x8DB5E324));
  v76 = v75 ^ (~v74 << 30);
  *(_QWORD *)v289 = v75 ^ ((v56 ^ 0xF2D3D2F0) >> 16);
  v77 = *(_DWORD *)(v62 + 4 * (v58 ^ 0x2Au));
  v78 = ((v58 ^ 0x8F) + 563273390) & 0x180D34A ^ 0x8F ^ (((v58 ^ 0x8F) + 563273390) & 0x20120CB5 ^ v58 & 0xB5 | v58 & 0x4A);
  v79 = v77 ^ (v78 - 154425589 - ((2 * v78) & 0x41050E16));
  v80 = v69 ^ 0x7736D4ED;
  v81 = *(_DWORD *)(v66 + 4 * (v54 ^ 0x5Cu));
  v82 = v71 ^ v68 ^ 0xDDC3968D;
  HIDWORD(v49) = ~v81;
  LODWORD(v49) = v81 ^ 0x62ECDB60;
  v83 = ((HIBYTE(v294) ^ 0xE2ED4D1B) - 1129327840 + *(_DWORD *)(v65 + 4 * (HIBYTE(v294) ^ 0x68u))) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v56) ^ 0xA)) ^ (v49 >> 2) ^ (v79 + 1188753810 - ((2 * v79) & 0x8DB5E324));
  v84 = HIBYTE(v76) ^ 0x45;
  v85 = v83 ^ 0x7CAB4027;
  v290 = (v83 ^ 0x7CAB4027) >> 8;
  v86 = *(_DWORD *)(v66
                  + 4
                  * ((((HIBYTE(v294) ^ 0x1B) + 32 + *(_BYTE *)(v65 + 4 * (HIBYTE(v294) ^ 0x68u))) ^ *(_BYTE *)(v61 + 4 * (HIBYTE(v56) ^ 0xA)) ^ (v49 >> 2) ^ (v79 - 110 - ((2 * v79) & 0x24))) ^ 0x48u));
  v87 = *(_DWORD *)(v61 + 4 * (HIBYTE(v69) ^ 0x8F)) ^ (BYTE2(v82) + 563273390) ^ *(_DWORD *)(v62
                                                                                             + 4
                                                                                             * (BYTE2(v82) ^ 0xA5u)) ^ ((BYTE1(v75) ^ 0xE2ED4DE6) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v75) ^ 0x95u)));
  v88 = (v87 & 0x40000 ^ 0x75FFFEFF) + 2 * (v87 & 0x40000);
  v89 = v88 - 348553224;
  HIDWORD(v49) = ~v86;
  LODWORD(v49) = v86 ^ 0x62ECDB60;
  v90 = v49 >> 2;
  v91 = v88 - 1979711231;
  v92 = -684098058 - v88;
  if ((v91 & v90) == 0)
    v92 = v89;
  v93 = BYTE2(v75);
  v94 = v93 ^ 0xE5;
  v95 = (v90 - 1631158007 + v92) ^ v87 & 0xFFFBFFFF;
  v96 = v95 ^ BYTE2(v82);
  v97 = (v94 + 408847802 + ((2 * v94 + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (v93 ^ 0x40u));
  v98 = *(_DWORD *)(v66 + 4 * (v69 ^ 0x82u));
  HIDWORD(v99) = ~v98;
  LODWORD(v99) = v98 ^ 0x62ECDB60;
  v100 = (*(_DWORD *)(v65 + 4 * (BYTE1(v85) ^ 0x74u)) + (BYTE1(v85) ^ 0xE2ED4D07) - 1129327840) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v71) ^ 0x25)) ^ (v99 >> 2) ^ (v97 + 1188753810 - ((2 * v97) & 0x8DB5E324));
  v101 = v100 ^ v94;
  v102 = (BYTE2(v85) + 408847801 - ((2 * ((v83 ^ 0x7CAB4027) >> 16) + 1126546780) & 0x41050E16)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v85) ^ 0xA5u));
  v103 = *(_DWORD *)(v66 + 4 * (v72 ^ 0xE2u));
  HIDWORD(v99) = ~v103;
  LODWORD(v99) = v103 ^ 0x62ECDB60;
  v104 = ((BYTE1(v80) ^ 0xE2ED4D07) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v80) ^ 0x74u))) ^ (v99 >> 2) ^ *(_DWORD *)(v61 + 4 * v84) ^ (v102 + 1188753810 - ((2 * v102) & 0x8DB5E324));
  v105 = v104 ^ BYTE2(v85);
  v106 = *(_DWORD *)(v62 + 4 * (BYTE2(v80) ^ 0xA5u)) ^ (BYTE2(v80)
                                                        + 408847802
                                                        + ((2 * BYTE2(v80) + 348) & 0x216 ^ 0xBEFAF3FF));
  v107 = *(_DWORD *)(v66 + 4 * (v289[0] ^ 0x50u));
  HIDWORD(v99) = ~v107;
  LODWORD(v99) = v107 ^ 0x62ECDB60;
  v108 = ((BYTE1(v82) ^ 0xE2ED4D07) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v82) ^ 0x74u))) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v83) ^ 0x84)) ^ (v99 >> 2) ^ (v106 + 1188753811 + ~((2 * v106) & 0x8DB5E324));
  v109 = *(_DWORD *)(v66
                   + 4
                   * ((((BYTE1(v82) ^ 7) + 32 + *(_BYTE *)(v65 + 4 * (BYTE1(v82) ^ 0x74u))) ^ *(_BYTE *)(v61 + 4 * (HIBYTE(v83) ^ 0x84)) ^ (v99 >> 2) ^ (v106 - 109 + ~((2 * v106) & 0x24)) ^ BYTE2(v80)) ^ 0x60u));
  HIDWORD(v99) = ~v109;
  LODWORD(v99) = v109 ^ 0x62ECDB60;
  v110 = v108 ^ BYTE2(v80) ^ 0x570CA20F;
  v111 = (((v101 ^ 0x8EF935CF) >> 16) + 563273390) ^ *(_DWORD *)(v62
                                                                                + 4
                                                                                * (((v101 ^ 0x8EF935CF) >> 16) ^ 0xA5u)) ^ (v99 >> 2) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v95) ^ 0x8D)) ^ (*(_DWORD *)(v65 + 4 * (((unsigned __int16)(v105 ^ 0x55C9) >> 8) ^ 0x74u)) + (((unsigned __int16)(v105 ^ 0x55C9) >> 8) ^ 0xE2ED4D07) - 1129327840);
  LOBYTE(v107) = (((v101 ^ 0x8EF935CF) >> 16) - 82) ^ *(_BYTE *)(v62
                                                               + 4
                                                               * (((v101 ^ 0x8EF935CF) >> 16) ^ 0xA5u)) ^ (v99 >> 2) ^ *(_BYTE *)(v61 + 4 * (HIBYTE(v95) ^ 0x8D)) ^ (*(_BYTE *)(v65 + 4 * (((unsigned __int16)(v105 ^ 0x55C9) >> 8) ^ 0x74u)) + (((unsigned __int16)(v105 ^ 0x55C9) >> 8) ^ 7) + 32) ^ ((v101 ^ 0x8EF935CF) >> 16);
  HIDWORD(v99) = *(_DWORD *)(v62 + 4 * (((v105 ^ 0xFB5755C9) >> 16) ^ 0xA5u)) ^ ((v105 ^ 0xFB5755C9) >> 16) ^ (((v105 ^ 0xFB5755C9) >> 16) + 408847802 + ((2 * ((v105 ^ 0xFB5755C9) >> 16) + 348) & 0x216 ^ 0xBEFAF3FF));
  LODWORD(v99) = HIDWORD(v99);
  v112 = (v99 >> 1) ^ __ROR4__(*(_DWORD *)(v61 + 4 * (HIBYTE(v100) ^ 0x76)) ^ 0x7A4B79B1, 1);
  v113 = *(_DWORD *)(v66 + 4 * ((v95 ^ BYTE2(v82)) ^ 0x47u));
  HIDWORD(v99) = ~v113;
  LODWORD(v99) = v113 ^ 0x62ECDB60;
  v114 = (*(_DWORD *)(v65 + 4 * (BYTE1(v110) ^ 0x74u)) + (BYTE1(v110) ^ 0xE2ED4D07) - 1129327840) ^ (v99 >> 2) ^ __ROR4__(v112, 31);
  v115 = *(_DWORD *)(v61 + 4 * (HIBYTE(v104) ^ 3));
  v116 = (BYTE2(v110) + 408847802 + ((2 * BYTE2(v110) + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62
                                                                                                + 4
                                                                                                * (BYTE2(v110) ^ 0xA5u));
  v117 = *(_DWORD *)(v66 + 4 * (v101 ^ 0xA0u));
  HIDWORD(v99) = ~v117;
  LODWORD(v99) = v117 ^ 0x62ECDB60;
  v118 = ((((unsigned __int16)(v96 ^ 0xB328) >> 8) ^ 0xE2ED4D07)
        - 1129327840
        + *(_DWORD *)(v65 + 4 * (((unsigned __int16)(v96 ^ 0xB328) >> 8) ^ 0x74u))) ^ v115 ^ (v99 >> 2) ^ (v116 + 1188753810 - ((2 * v116) & 0x8DB5E324));
  v119 = v118 ^ BYTE2(v110);
  LOBYTE(v117) = BYTE2(v111) ^ 0xA8;
  v120 = *(_DWORD *)(v66 + 4 * (v105 ^ 0x26u));
  HIDWORD(v99) = ~v120;
  LODWORD(v99) = v120 ^ 0x62ECDB60;
  BYTE1(v120) = BYTE1(v114) ^ 0x70;
  v121 = *(_DWORD *)(v61 + 4 * (HIBYTE(v108) ^ 0xAF)) ^ (((v96 ^ 0x7501B328u) >> 16) + 563273390) ^ ((((unsigned __int16)(v101 ^ 0x35CF) >> 8) ^ 0xE2ED4D07) - 1129327840 + *(_DWORD *)(v65 + 4 * (((unsigned __int16)(v101 ^ 0x35CF) >> 8) ^ 0x74u))) ^ *(_DWORD *)(v62 + 4 * (((v96 ^ 0x7501B328u) >> 16) ^ 0xA5u)) ^ (v99 >> 2);
  LOBYTE(v115) = *(_BYTE *)(v61 + 4 * (HIBYTE(v108) ^ 0xAF)) ^ (((v96 ^ 0x7501B328u) >> 16) - 82) ^ ((((unsigned __int16)(v101 ^ 0x35CF) >> 8) ^ 7) + 32 + *(_BYTE *)(v65 + 4 * (((unsigned __int16)(v101 ^ 0x35CF) >> 8) ^ 0x74u))) ^ *(_BYTE *)(v62 + 4 * (((v96 ^ 0x7501B328u) >> 16) ^ 0xA5u)) ^ (v99 >> 2) ^ ((v96 ^ 0x7501B328u) >> 16);
  LOBYTE(v108) = BYTE2(v118) ^ 0x17;
  v122 = ((v114 ^ 0x972170A1) >> 16) - 2051722047 - (((v114 ^ 0x972170A1) >> 15) & 0x182);
  v123 = ((v122 ^ 0x85B534C1) + 408847801 - ((2 * (v122 ^ 0x85B534C1) + 1126546780) & 0x6D974E16)) ^ *(_DWORD *)(v62 + 4 * (v122 ^ 0x85B53464));
  v124 = *(_DWORD *)(v66 + 4 * (v115 ^ 0x32u));
  HIDWORD(v99) = ~v124;
  LODWORD(v99) = v124 ^ 0x62ECDB60;
  v125 = BYTE2(v118) ^ 0x17;
  v126 = (*(_DWORD *)(v65 + 4 * (BYTE1(v118) ^ 0x6Eu)) + (BYTE1(v118) ^ 0xE2ED4D1D) - 1129327840) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v111) ^ 0xBD)) ^ (v99 >> 2) ^ (v123 + 1188753811 + ~((2 * v123) & 0x8DB5E324));
  v127 = (v126 - 2051722047 - ((2 * v126) & 0xB6A6982)) ^ v122;
  v128 = (v125 + 1752027201 + ((2 * v125 + 348) & 0x324 ^ 0xFEDA5FFF)) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v114) ^ 0x6F));
  v129 = *(_DWORD *)(v66 + 4 * (v107 ^ 0xDAu));
  HIDWORD(v99) = ~v129;
  LODWORD(v99) = v129 ^ 0x62ECDB60;
  LOBYTE(v106) = BYTE2(v121) ^ 0xFA;
  v130 = HIBYTE(v118) ^ 0x78;
  v131 = HIBYTE(v121) ^ 0x4F;
  v132 = ((BYTE1(v121) ^ 0xE2ED4D5E) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v121) ^ 0x2Du))) ^ *(_DWORD *)(v62 + 4 * (v125 ^ 0xA5u)) ^ (v99 >> 2) ^ (v128 - 154425589 - ((2 * v128) & 0xED974E16));
  v133 = *(_DWORD *)(v61 + 4 * v130);
  LOBYTE(v130) = ((BYTE1(v121) ^ 0x5E) + 32 + *(_BYTE *)(v65 + 4 * (BYTE1(v121) ^ 0x2Du))) ^ *(_BYTE *)(v62 + 4 * (v125 ^ 0xA5u)) ^ (v99 >> 2) ^ (v128 + 11 - ((2 * v128) & 0x16)) ^ v108;
  v134 = ((BYTE2(v121) ^ 0xFA) + 408847802 + ((2 * (BYTE2(v121) ^ 0xFA) + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v121) ^ 0x5Fu));
  v135 = ((v111 >> 8) ^ 0x389D01A7) & 0x207BF3E1 ^ 0x68EAF47 ^ (((2 * (((v111 >> 8) ^ 0x389D01A7) & 0x387BF31E)) | 0x4D5C1C9A)
                                                              - (((v111 >> 8) ^ 0x389D01A7) & 0x387BF31E)
                                                              - 648941133);
  v136 = v135 - ((2 * v135) & 0x3C21D8A) + 31526597;
  v137 = ((v136 ^ 0xC63E50BB) + 1) ^ ((BYTE1(v111) ^ 0xFFFFFFA7) + 117);
  v138 = *(_DWORD *)(v66 + 4 * (v114 ^ 0xCEu));
  v139 = (v136 ^ 0xDB2CE243)
       - 1129327840
       + *(_DWORD *)(v65 + 4 * ((v136 ^ 0xDAE9D8FD ^ (v137 - ((2 * v137) & 0xC650EF72) - 483887175)) + 116));
  HIDWORD(v99) = ~v138;
  LODWORD(v99) = v138 ^ 0x62ECDB60;
  v140 = v139 ^ v133 ^ (v99 >> 2) ^ (v134 + 1188753810 - ((2 * v134) & 0x8DB5E324));
  v141 = v139 ^ v133 ^ (v99 >> 2) ^ (v134 - 110 - ((2 * v134) & 0x24)) ^ v106;
  v142 = *(_DWORD *)(v66 + 4 * (v119 ^ 0xC5u));
  v143 = (v127 ^ 0xF089E66C) >> 16;
  HIDWORD(v99) = ~v142;
  LODWORD(v99) = v142 ^ 0x62ECDB60;
  v144 = *(_DWORD *)(v62 + 4 * (v117 ^ 0xA5u)) ^ (v117 + 563273390) ^ *(_DWORD *)(v61 + 4 * v131) ^ (v99 >> 2) ^ ((BYTE1(v120) ^ 0xE2ED4D07) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v120) ^ 0x74u)));
  v145 = HIBYTE(v140) ^ 0x23;
  v146 = (BYTE2(v132) ^ 0x5FFFA533) + ((2 * (HIWORD(v132) ^ 0x8BC9)) & 0x1F4);
  HIDWORD(v99) = HIWORD(v132) ^ 0x8BC9;
  LODWORD(v99) = v146 - 1610589690;
  v147 = *(_DWORD *)(v62 + 4 * (__ROR4__((v99 >> 3) ^ 0x86030176, 29) ^ 0x30180B11u)) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v126) ^ 8));
  v148 = *(_DWORD *)(v66 + 4 * ((v144 ^ v117) ^ 0x17u));
  HIDWORD(v99) = ~v148;
  LODWORD(v99) = v148 ^ 0x62ECDB60;
  v149 = v147 ^ (v99 >> 2) ^ (v146 - 1610589690 + v146 - 1047316300 - 2 * ((v146 - 1047316300) & (v146 + 536893958))) ^ (*(_DWORD *)(v65 + 4 * (BYTE1(v140) ^ 0x70u)) + (BYTE1(v140) ^ 0xE2ED4D03) - 1129327840);
  v150 = BYTE2(v140);
  v151 = BYTE2(v140) ^ 0x2E;
  v152 = *(_DWORD *)(v66 + 4 * (v127 ^ 3u));
  v153 = (HIWORD(v144) ^ 0x9E82A5D1) & 0x1600006A ^ 0x4111E7C8 ^ (((2 * (HIWORD(v144) ^ 0x9E82A5D1)) & 0x10040100)
                                                                - ((HIWORD(v144) ^ 0x9E82A5D1) & 0x9E020095)
                                                                + 1460791133);
  v154 = v153 - ((2 * v153) & 0x400C01A6) - 1578729261;
  HIDWORD(v99) = ~v152;
  LODWORD(v99) = v152 ^ 0x62ECDB60;
  v155 = (v151 + 563273390) ^ v151 ^ *(_DWORD *)(v61
                                               + 4
                                               * ((((HIBYTE(v132) ^ 0xFFFFFF8C) + (HIBYTE(v132) ^ 0x8B) + 1) ^ 0xFFFFFFF0)
                                                + (HIBYTE(v132) ^ 0x8B))) ^ *(_DWORD *)(v62 + 4 * (v150 ^ 0x8Bu)) ^ (v99 >> 2) ^ ((BYTE1(v144) ^ 0xE2ED4DED) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v144) ^ 0x9Eu)));
  v156 = *(_DWORD *)(v66 + 4 * (v130 ^ 0xE0u));
  v157 = ((v127 ^ 0xF089E66C) >> 16);
  HIDWORD(v99) = ~v156;
  LODWORD(v99) = v156 ^ 0x62ECDB60;
  v158 = *(_DWORD *)(v62 + 4 * (v154 ^ 0x3FE48016u)) ^ *(_DWORD *)(v61 + 4 * v145) ^ ((((unsigned __int16)(v127 ^ 0xE66C) >> 8) ^ 0xE2ED4D07)
                                                                                        - 1129327840
                                                                                        + *(_DWORD *)(v65 + 4 * (((unsigned __int16)(v127 ^ 0xE66C) >> 8) ^ 0x74u))) ^ ((v154 ^ 0x1E765E1D) + ((v144 >> 15) & 0x15C ^ 0x48)) ^ (v99 >> 2);
  v159 = ((v158 ^ 0xB0115699) - ((2 * (v158 ^ 0xB0115699)) & 0x3FE605BA) + 536019677) ^ v154;
  v160 = *(_DWORD *)(v66 + 4 * (v141 ^ 0x2Bu));
  v161 = *(_DWORD *)(v61 + 4 * (HIBYTE(v144) ^ 0x44)) ^ (v157 + 1752027201 + ((2 * v157 + 348) & 0x324 ^ 0xFEDA5FFF));
  v162 = v161 - 154425589 - ((2 * v161) & 0xED974E16);
  v163 = (((v155 ^ 0x8795BA24) + (v155 ^ 0x8C80DEBA) + 1) ^ 0xFFFFFFFE) + (v155 ^ 0x8C80DEBA);
  v164 = v163 - ((2 * v163) & 0x37B4C290) + 467296584;
  v165 = v149 ^ 0x23535B35;
  HIDWORD(v99) = ~v160;
  LODWORD(v99) = v160 ^ 0x62ECDB60;
  LOBYTE(v161) = v164 ^ 0x27;
  v166 = ((BYTE1(v132) ^ 0xE2ED4DAE) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v132) ^ 0xDDu))) ^ *(_DWORD *)(v62 + 4 * (v157 ^ 0xA5u)) ^ v162 ^ (v99 >> 2);
  LOBYTE(v160) = ((BYTE1(v132) ^ 0xAE) + 32 + *(_BYTE *)(v65 + 4 * (BYTE1(v132) ^ 0xDDu))) ^ *(_BYTE *)(v62 + 4 * (v157 ^ 0xA5u)) ^ v162 ^ (v99 >> 2) ^ v143;
  v167 = (v164 ^ 0xE3DA6127) >> 24;
  v168 = (v159 ^ 0xE3B22209) >> (v290 & 8);
  v169 = (v164 >> 8) ^ 0x1BDA61;
  v170 = HIWORD(v164) ^ 0x1BDA;
  LOBYTE(v164) = v290 & 8 ^ 8;
  v291 = HIWORD(v166);
  v171 = v168 >> v164;
  v172 = HIBYTE(v166);
  v173 = (v170 + 408847802 + ((2 * v170 + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (v170 ^ 0xA5u));
  v174 = *(_DWORD *)(v66 + 4 * (v160 ^ 0x88u));
  HIDWORD(v99) = ~v174;
  LODWORD(v99) = v174 ^ 0x62ECDB60;
  v175 = (v99 >> 2) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v149) ^ 0xDB)) ^ (*(_DWORD *)(v65
                                                                                  + 4
                                                                                  * (v171 ^ 0x74u))
                                                                      + (v171 ^ 0xE2ED4D07)
                                                                      - 1129327840) ^ (v173
                                                                                     + 1188753810
                                                                                     - ((2 * v173) & 0x8DB5E324));
  v176 = ((BYTE2(v159) ^ 0xB2) + 408847802 + ((2 * (BYTE2(v159) ^ 0xB2) + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v159) ^ 0x17u));
  v177 = (BYTE1(v166) ^ 0xE2ED4DAC) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v166) ^ 0xDFu));
  v178 = BYTE2(v166);
  v179 = *(_DWORD *)(v66 + 4 * (v149 ^ 0x5Au));
  HIDWORD(v99) = ~v179;
  LODWORD(v99) = v179 ^ 0x62ECDB60;
  v180 = HIBYTE(v158) ^ 0x8B;
  v181 = v177 ^ (v99 >> 2) ^ *(_DWORD *)(v61 + 4 * v167) ^ (v176 + 1188753810 - ((2 * v176) & 0x8DB5E324));
  v182 = *(_DWORD *)(v66 + 4 * v161);
  v183 = ((v178 ^ 0x60) + 1752027201 + ((2 * (v178 ^ 0x60) + 348) & 0x324 ^ 0xFEDA5FFF)) ^ *(_DWORD *)(v61 + 4 * v180);
  HIDWORD(v99) = ~v182;
  LODWORD(v99) = v182 ^ 0x62ECDB60;
  v184 = ((BYTE1(v165) ^ 0xE2ED4D07) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v165) ^ 0x74u))) ^ *(_DWORD *)(v62 + 4 * (v178 ^ 0xC5u)) ^ (v183 - 154425589 - ((2 * v183) & 0xED974E16)) ^ (v99 >> 2);
  v185 = *(_DWORD *)(v62 + 4 * (BYTE2(v165) ^ 0xA5u)) ^ (BYTE2(v165)
                                                         + 408847802
                                                         + ((2 * BYTE2(v165) + 348) & 0x216 ^ 0xBEFAF3FF));
  v186 = *(_DWORD *)(v66 + 4 * (v159 ^ 0x66u));
  HIDWORD(v99) = ~v186;
  LODWORD(v99) = v186 ^ 0x62ECDB60;
  v187 = ((v169 ^ 0xE2ED4D07)
        - 1129327840
        + *(_DWORD *)(v65 + 4 * ((v169 | 0x74) ^ v169 & 0x74u))) ^ *(_DWORD *)(v61
                                                                                                + 4 * (v172 ^ 0xE7)) ^ (v185 + 1188753810 - ((2 * v185) & 0x8DB5E324)) ^ (v99 >> 2);
  if (((v172 ^ 0x1F) - 50) | v172 ^ 0x1F)
    LOBYTE(v188) = v291 ^ 0x86 ^ v184;
  else
    v188 = HIWORD(v175) ^ 0x68;
  v189 = ((2 * (BYTE2(v181) ^ 0x10043BF)) | 0xCF27779C) - (BYTE2(v181) ^ 0x10043BF) + 409748530;
  v190 = ((v189 ^ 0xE693F8CF) + 408847801 - ((2 * (v189 ^ 0xE693F8CF) + 1126546780) & 0x6D974E16)) ^ *(_DWORD *)(v62 + 4 * (v189 ^ 0xE693F86A));
  v191 = *(_DWORD *)(v66 + 4 * ((v187 ^ BYTE2(v165)) ^ 0x52u));
  HIDWORD(v192) = ~v191;
  LODWORD(v192) = v191 ^ 0x62ECDB60;
  v193 = v175 ^ v170;
  v194 = v187 ^ BYTE2(v165) ^ 0xDD7BB93D;
  v195 = *(_DWORD *)(v61 + 4 * (HIBYTE(v181) ^ 0xF9));
  v196 = (*(_DWORD *)(v65 + 4 * (BYTE1(v184) ^ 0xD1u)) + (BYTE1(v184) ^ 0xE2ED4DA2) - 1129327840) ^ (v192 >> 2) ^ (v190 + 1188753810 - ((2 * v190) & 0x8DB5E324)) ^ *(_DWORD *)(v61 + 4 * (((14 * ((613566757 * (unint64_t)((v175 ^ 0x18000000) >> 25)) >> 32)) + ((HIBYTE(v175) ^ 0x19) - 14 * ((147 * ((HIBYTE(v175) ^ 0x19) >> 1)) >> 10))) ^ 0xF8u));
  v197 = (v196 - ((2 * v196) & 0x4AF0F9E4) - 1518830350) ^ v189;
  v198 = *(_DWORD *)(v66 + 4 * (v193 ^ 0xF1u));
  v199 = *(_DWORD *)(v65 + 4 * (BYTE1(v194) ^ 0x74u)) + (BYTE1(v194) ^ 0xE2ED4D07) - 1129327840;
  HIDWORD(v192) = ~v198;
  LODWORD(v192) = v198 ^ 0x62ECDB60;
  v200 = BYTE2(v194);
  v201 = ((BYTE2(v184) ^ 0xEB) + 408847802 + ((2 * (BYTE2(v184) ^ 0xEB) + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v184) ^ 0x4Eu)) ^ ((v195 ^ 0x46DAF192) + 1016170532 + ((2 * v195) & 0x79231046 ^ 0xF6DEFFFB)) ^ v199 ^ (v192 >> 2);
  v202 = *(_DWORD *)(v66 + 4 * ((v181 ^ BYTE2(v159) ^ 0xB2) ^ 0xD2u));
  HIDWORD(v192) = ~v202;
  LODWORD(v192) = v202 ^ 0x62ECDB60;
  v203 = *(_DWORD *)(v61 + 4 * (HIBYTE(v187) ^ 0x25));
  v204 = (v200 + 563273390) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v184) ^ 0xEA)) ^ *(_DWORD *)(v62 + 4 * (v200 ^ 0xA5u)) ^ ((BYTE1(v175) ^ 0xE2ED4D11) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v175) ^ 0x62u))) ^ (v192 >> 2);
  v205 = v204 ^ v200;
  v206 = *(_DWORD *)(v62 + 4 * (BYTE2(v175) ^ 0x90u)) ^ ((BYTE2(v175) ^ 0x35)
                                                         + 408847802
                                                         + ((2 * (BYTE2(v175) ^ 0x35) + 348) & 0x216 ^ 0xBEFAF3FF));
  v207 = *(_DWORD *)(v66 + 4 * (v188 ^ 0x32u));
  HIDWORD(v192) = ~v207;
  LODWORD(v192) = v207 ^ 0x62ECDB60;
  v208 = ((BYTE1(v181) ^ 0xFFFFFF4D)
        + ((v181 >> 7) & 0x1F0 ^ 0x160)
        - 1617092568
        + *(_DWORD *)(v65 + 4 * (BYTE1(v181) ^ 0xC6u))) ^ v203 ^ (v206 + 1188753810 - ((2 * v206) & 0x8DB5E324)) ^ (v192 >> 2);
  v209 = (HIWORD(v201) ^ 0xA8029CB4) & 0x8802A01E ^ 0x54C4E4F2 ^ (((HIWORD(v201) ^ 0xA8029CB4) & 0x8802A0E1)
                                                                - ((2 * (HIWORD(v201) ^ 0xA8029CB4)) & 0x100441C0)
                                                                - 590977806);
  v210 = (v209 | 0xE3818963) - (v209 | 0x1C7E769C) + 478049948;
  v211 = ((v210 ^ 0x6B830965) + 408847801 - ((2 * (v210 ^ 0x6B830965) + 1126546780) & 0x6D974E16)) ^ *(_DWORD *)(v62 + 4 * (v210 ^ 0x6B8309C0));
  v212 = *(_DWORD *)(v66 + 4 * ((v208 ^ BYTE2(v175)) ^ 0xB4u));
  v213 = (((((v204 ^ v200 ^ 0x5229532B) >> 16) ^ 0x46439CEB) & 0x4440D6B7)
        - ((2 * (((v204 ^ v200 ^ 0x5229532B) >> 16) ^ 0x46439CEB)) & 0x8801A802)
        + 1846410505) ^ (((v204 ^ v200 ^ 0x5229532B) >> 16) ^ 0x46439CEB) & 0x4440D648;
  v214 = (v213 & 0x4C402458 ^ 0x4C002000) + (v213 ^ 0x3CA45DA) - ((v213 ^ 0x3CA45DA) & 0x4D402458);
  HIDWORD(v192) = ~v212;
  LODWORD(v192) = v212 ^ 0x62ECDB60;
  v215 = (v192 >> 2) ^ ((((unsigned __int16)(v205 ^ 0x532B) >> 8) ^ 0xE2ED4D07)
                      - 1129327840
                      + *(_DWORD *)(v65 + 4 * (((unsigned __int16)(v205 ^ 0x532B) >> 8) ^ 0x74u))) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v196) ^ 9)) ^ (v211 + 1188753810 - ((2 * v211) & 0x8DB5E324));
  v216 = v215 - ((2 * v215) & 0x7D07BB66);
  HIDWORD(v192) = (v205 ^ 0x5229532Bu) >> 16;
  LODWORD(v192) = v214 ^ 0x20879C60;
  v217 = ((v214 ^ 0x20879C60) + 408847801 - ((2 * (v214 ^ 0x20879C60) + 1126546780) & 0x6D974E16)) ^ *(_DWORD *)(v62 + 4 * (__ROR4__((v192 >> 2) ^ 0xBD668F64, 30) ^ 0xF59A3D37));
  v218 = (*(_DWORD *)(v65 + 4 * (BYTE1(v208) ^ 0x7Fu)) + (BYTE1(v208) ^ 0xE2ED4D0C) - 1129327840) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v201) ^ 0xE4)) ^ (v217 + 1188753810 - ((2 * v217) & 0x8DB5E324));
  v219 = v197 ^ 0xB2869689;
  v220 = (-2
        - ((~((HIWORD(v208) ^ 0xCDDDA854) & 0xC154618F) | 0x19C25258)
         + ((HIWORD(v208) ^ 0xCDDDA854) & 0x1404008 | 0xE63DADA7))) ^ (HIWORD(v208) ^ 0xCDDDA854) & 0xC1546170;
  v221 = *(_DWORD *)(v66 + 4 * (v197 ^ 0xE6u));
  HIDWORD(v192) = ~v221;
  LODWORD(v192) = v221 ^ 0x62ECDB60;
  v222 = v214 ^ 0xFD69C1D9 ^ (v218 - ((2 * v218) & 0xC2FFAB34) - 511715942);
  v223 = v222
       + (v192 >> 2)
       - 2 * (v222 & (v192 >> 2))
       - 2 * ((v222 + (v192 >> 2) - 2 * (v222 & (v192 >> 2))) & 0xAD388B3 ^ (v222 + (v192 >> 2)) & 1);
  v224 = ((v220 ^ 0x19C252BF) + 408847801 - ((2 * (v220 ^ 0x19C252BF) + 1126546780) & 0x6D974E16)) ^ *(_DWORD *)(v62 + 4 * (v220 ^ 0x19C2521A));
  v225 = *(_DWORD *)(v66 + 4 * ((v201 ^ BYTE2(v184) ^ 0xEB) ^ 0x24u));
  HIDWORD(v192) = ~v225;
  LODWORD(v192) = v225 ^ 0x62ECDB60;
  v226 = HIWORD(v219);
  v216 += 1048829363;
  v227 = v216 ^ v210;
  v228 = v223 - 1965848398;
  v229 = (*(_DWORD *)(v65 + 4 * (BYTE1(v219) ^ 0x74u)) + (BYTE1(v219) ^ 0xE2ED4D07) - 1129327840) ^ *(_DWORD *)(v61 + 4 * (HIBYTE(v204) ^ 0xAA)) ^ (v192 >> 2) ^ (v224 + 1188753810 - ((2 * v224) & 0x8DB5E324));
  v230 = (v229 - ((2 * v229) & 0x5B9E760C) + 768555782) ^ v220;
  v231 = *(_DWORD *)(v61 + 4 * (HIBYTE(v208) ^ 0x17));
  v232 = (BYTE2(v219) + 408847801 - ((2 * BYTE2(v219) + 1126546780) & 0x41050E16)) ^ *(_DWORD *)(v62
                                                                                               + 4
                                                                                               * (BYTE2(v219) ^ 0xA5u));
  v233 = (BYTE1(v201) ^ 0xE2ED4D98) - 1129327840 + *(_DWORD *)(v65 + 4 * (BYTE1(v201) ^ 0xEBu));
  v234 = *(_DWORD *)(v66 + 4 * (v205 ^ 0x44u));
  HIDWORD(v192) = ~v234;
  LODWORD(v192) = v234 ^ 0x62ECDB60;
  v235 = (v216 ^ v210) >> 24;
  BYTE1(v208) = BYTE1(v228) ^ 0x96;
  v236 = (v228 ^ 0xF81996C3) >> 16;
  LOBYTE(v234) = BYTE2(v230) ^ 0x9E;
  v237 = v233 ^ v231 ^ (v192 >> 2) ^ (v232 + 1188753810 - ((2 * v232) & 0x8DB5E324));
  HIDWORD(v192) = (((v216 ^ ~v210) >> 31) | (v235 << 25)) ^ 0x6616D8F1;
  LODWORD(v192) = HIDWORD(v192);
  v238 = ((v192 >> 25) + 1188753811 + ((2 * (v192 >> 25)) & 0x124 ^ 0xFB6F1FFF)) ^ *(_DWORD *)(v61 + 4 * (v235 ^ 0x13));
  v239 = *(_DWORD *)(v66 + 4 * ((v237 ^ v226) ^ 0x61u));
  HIDWORD(v192) = ~v239;
  LODWORD(v192) = v239 ^ 0x62ECDB60;
  v240 = (v192 >> 2) ^ (*(_DWORD *)(v65 + 4 * (BYTE1(v230) ^ 0x39u)) + (BYTE1(v230) ^ 0xE2ED4D4A) - 1129327840) ^ (v238 + 1083284758 - ((2 * v238) & 0x81233A2C)) ^ (((v228 ^ 0xF81996C3) >> 16) + 408847801 - ((2 * v236 + 1126546780) & 0x41050E16)) ^ *(_DWORD *)(v62 + 4 * (((v228 ^ 0xF81996C3) >> 16) ^ 0xA5u));
  v241 = v235 ^ 0x40919DFD;
  v242 = ((BYTE2(v230) ^ 0x9E) + 408847802 + ((2 * (BYTE2(v230) ^ 0x9E) + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v230) ^ 0x3Bu));
  v243 = *(_DWORD *)(v66 + 4 * (v227 ^ 0xE2u));
  HIDWORD(v192) = ~v243;
  LODWORD(v192) = v243 ^ 0x62ECDB60;
  v244 = HIBYTE(v229) ^ 0x84;
  v245 = (*(_DWORD *)(v65 + 4 * (BYTE1(v237) ^ 0xECu)) + (BYTE1(v237) ^ 0xE2ED4D9F) - 1129327840) ^ (v192 >> 2) ^ (v242 + 1188753810 - ((2 * v242) & 0x8DB5E324)) ^ *(_DWORD *)(v61 + 4 * HIBYTE(v228));
  v246 = ((BYTE2(v237) ^ 0xD0) + 408847802 + ((2 * (BYTE2(v237) ^ 0xD0) + 348) & 0x216 ^ 0xBEFAF3FF)) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v237) ^ 0x75u));
  v247 = *(_DWORD *)(v66 + 4 * (v228 ^ 0xACu));
  BYTE1(v228) = BYTE1(v241) ^ BYTE1(v240);
  v248 = v241 ^ v240 ^ v236;
  v249 = *(_DWORD *)(v61 + 4 * v244) ^ (~v247 << 30) ^ (v247 >> 2) ^ ((BYTE1(v227) ^ 0xE2ED4DE5)
                                                                      - 1129327840
                                                                      + *(_DWORD *)(v65 + 4 * (BYTE1(v227) ^ 0x96u))) ^ (v246 + 1188753810 - ((2 * v246) & 0x8DB5E324));
  v250 = *(_DWORD *)(v66 + 4 * (v230 ^ 0x57u));
  HIDWORD(v192) = ~v250;
  LODWORD(v192) = v250 ^ 0x62ECDB60;
  v251 = *(_DWORD *)(v61 + 4 * (HIBYTE(v237) ^ 0xBB)) ^ (((((v227 >> 12) & 0xFF0 ^ 0x880) + 422439650) ^ (v227 >> 12) & 0xFF0) >> 4) ^ *(_DWORD *)(v62 + 4 * (BYTE2(v227) ^ 0x2Du)) ^ (v192 >> 2) ^ (*(_DWORD *)(v65 + 4 * (BYTE1(v208) ^ 0x74u)) + (BYTE1(v208) ^ 0xE2ED4D07) - 1129327840);
  v252 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 ^ 0x118B] - 4;
  v253 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 - 3857];
  v254 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 ^ 0x1081] - 4;
  v255 = *(_DWORD *)(v252 + 4 * (HIBYTE(v245) ^ 0xBA));
  v256 = -2075729087 * *(_DWORD *)(v254 + 4 * (BYTE1(v251) ^ 0x75u));
  v257 = v256 - 2 * ((v256 + 436688736) & 0x79D1FDF9 ^ v256 & 8) - 1814473391;
  v295 = *(_DWORD *)(v253 + 4 * (BYTE2(v245) ^ 0x26u));
  v258 = ((v255 ^ 0x4D708AF5) - 201441315 + ((2 * v255) & 0xE7FC7FBA ^ 0x7D1FEA55) + 1) ^ ((BYTE2(v249) ^ 0xFFFFFF7F)
                                                                                         + 1537017267
                                                                                         + *(_DWORD *)(v253 + 4 * (BYTE2(v249) ^ 0xFEu))) ^ (((v257 ^ 0xB94DDC41) + (v257 & 0xC09C21B0 ^ 0x7FF3FFFF) + 1) >> 1);
  v259 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 - 3767] - 12;
  HIDWORD(v192) = v248;
  LODWORD(v192) = v248;
  v260 = -2075729087 * *(_DWORD *)(v254 + 4 * (BYTE1(v228) ^ 0xC6u)) + 436688736;
  v261 = v257 ^ *(_DWORD *)(v259 + 4 * (__ROR4__((v192 >> 7) & 0xFE000001 ^ 0x8C72B701, 25) ^ 0x395B80C7u)) ^ (v258 + 52462425 - ((2 * v258) & 0x64106B2));
  v262 = *(_DWORD *)(v253 + 4 * (BYTE2(v240) ^ 0x70u));
  LOBYTE(v237) = v249 ^ BYTE2(v237);
  HIDWORD(v192) = *(_DWORD *)(v252 + 4 * (HIBYTE(v249) ^ 0xE)) ^ 0xF3FE3FDD ^ ((BYTE2(v251) ^ 0xFFFFFFF5)
                                                                               + *(_DWORD *)(v253
                                                                                           + 4 * (BYTE2(v251) ^ 0x74u))
                                                                               - 1458728792
                                                                               - ((2
                                                                                 * ((BYTE2(v251) ^ 0xFFFFFFF5)
                                                                                  + *(_DWORD *)(v253
                                                                                              + 4
                                                                                              * (BYTE2(v251) ^ 0x74u))
                                                                                  + 1)
                                                                                 - 1220932764) & 0x9AE115EA));
  LODWORD(v192) = HIDWORD(v192);
  v263 = v192 >> 6;
  LODWORD(v192) = __ROR4__((v260 >> 1) & 0x1FB1EF27 ^ v260, 6);
  v264 = HIBYTE(v251) ^ 0x15;
  LODWORD(v253) = *(_DWORD *)(v252 + 4 * (HIBYTE(v240) ^ 0x6F));
  v265 = *(_DWORD *)(v254 + 4 * (BYTE1(v249) ^ 0x3Au));
  v266 = *(_DWORD *)(v259 + 4 * (v251 ^ 0x74u));
  v267 = *(_DWORD *)(v259 + 4 * ((v245 ^ v234) ^ 0xEAu));
  v268 = (BYTE2(v240) ^ 0xFFFFFFF1) + v262;
  LODWORD(v192) = v263 ^ v192 ^ 0xA02DB634;
  HIDWORD(v192) = v192;
  v269 = (v192 >> 26) + 224996472 - ((2 * (v192 >> 26)) & 0x1AD258F0);
  v270 = v267 ^ 0x63677CBD;
  v271 = ((v267 ^ 0x63677CBD) + (v267 ^ 0x91F1AF3A ^ v269) + 1) ^ ((v269 ^ 0xF296D387) + 1);
  v272 = ((v271 + 224996472 - ((2 * v271) & 0x1AD258F0)) ^ v269) + v270;
  v273 = v272 - ((2 * v272) & 0x54082E9C) - 1442572466;
  v274 = (v268 - 1458728792 - ((2 * (v268 + 1) - 1220932764) & 0x9AE115EA)) ^ *(_DWORD *)(v252 + 4 * v264);
  v275 = -2075729087 * *(_DWORD *)(v254 + 4 * (BYTE1(v245) ^ 0x9Fu)) + 436688736;
  v276 = v275 ^ (v275 >> 1) & 0x1FB1EF27 ^ *(_DWORD *)(v259 + 4 * (v237 ^ 2u)) ^ (v274 + 52462425 - ((2 * v274) & 0x64106B2));
  v277 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 ^ 0x1173];
  a31[*(_QWORD *)&v289[4] | 0xBLL] = *(_BYTE *)(v277 + (v273 ^ 0x54)) ^ ((v273 ^ 0x5A)
                                                                                          - ((2 * (v273 ^ 0x5A) - 110) & 0xAC)
                                                                                          - 97) ^ 0x93;
  v278 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 - 4015] - 8;
  a31[*(_QWORD *)&v289[4] | 8] = *(_BYTE *)(v278 + (HIBYTE(v273) ^ 0x81)) ^ 0xA9;
  a31[*(_QWORD *)&v289[4] | 7] = *(_BYTE *)(v277 + (v261 ^ 0xCLL)) ^ ((v261 ^ 2)
                                                                                       - ((2 * (v261 ^ 2) - 110) & 0xAC)
                                                                                       - 97) ^ 0x5E;
  a31[*(_QWORD *)&v289[4] | 4] = *(_BYTE *)(v278 + (HIBYTE(v261) ^ 0xFALL)) ^ 0x6A;
  v279 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 - 4224] - 8;
  a31[*(_QWORD *)&v289[4] | 6] = *(_BYTE *)(v279 + (((unsigned __int16)(v261 ^ 0x2783) >> 8) ^ 0x1Cu)) ^ (((unsigned __int16)(v261 ^ 0x2783) >> 8) - (((v261 ^ 0x8F252783) >> 7) & 0xDA) + 109) ^ 0x59;
  v280 = fp_dh_adf6b0bdffaf5bf87776fbd3008e41e3[v292 ^ 0x1249];
  a31[*(_QWORD *)&v289[4] | 0xDLL] = *(_BYTE *)(v280 + (((v276 ^ 0xEE520F9A) >> 16) ^ 0x61)) ^ 0x3A;
  v281 = -2075729087 * v265 + 436688736;
  v282 = (v281 >> 1) & 0x1FB1EF27 ^ v253 ^ (v295
                                          + (BYTE2(v245) ^ 0xFFFFFFA7)
                                          - 1458728792
                                          - ((2 * (v295 + (BYTE2(v245) ^ 0xFFFFFFA7) + 1) - 1220932764) & 0x9AE115EA));
  v283 = v281 ^ v266;
  v284 = v283 ^ (v282 + 52462425 - ((2 * v282) & 0x64106B2));
  a31[*(_QWORD *)&v289[4] | 0xELL] = (((unsigned __int16)(v276 ^ 0xF9A) >> 8) - (((v276 ^ 0xEE520F9A) >> 7) & 0xDA) + 109) ^ *(_BYTE *)(v279 + (((unsigned __int16)(v276 ^ 0xF9A) >> 8) ^ 0xA4)) ^ 0x1F;
  a31[*(_QWORD *)&v289[4] | 0xALL] = *(_BYTE *)(v279 + (BYTE1(v273) ^ 0x64)) ^ ((BYTE1(v273) ^ 0x17)
                                                                                - ((2 * (BYTE1(v273) ^ 0x17)) & 0xDA)
                                                                                + 109) ^ 0xCF;
  a31[2] = ((BYTE1(v284) ^ 0xCC) - ((2 * (BYTE1(v284) ^ 0xCC)) & 0xDA) + 109) ^ *(_BYTE *)(v279 + (BYTE1(v284) ^ 0x8ALL)) ^ 1;
  a31[*(_QWORD *)&v289[4] | 0xCLL] = *(_BYTE *)(v278 + (HIBYTE(v276) ^ 0xA6)) ^ 0xBA;
  a31[*(_QWORD *)&v289[4]] = *(_BYTE *)(v278 + (HIBYTE(v284) ^ 0x65)) ^ 0x8A;
  a31[*(_QWORD *)&v289[4] | 5] = *(_BYTE *)(v280 + (BYTE2(v261) ^ 0x50)) ^ 0xBB;
  a31[*(_QWORD *)&v289[4] | 0xFLL] = ((v276 ^ 0x79) - ((2 * (v276 ^ 0x79) - 110) & 0xAC) - 97) ^ 0x54 ^ *(_BYTE *)(v277 + (v276 ^ 0x77));
  a31[1] = *(_BYTE *)(v280 + (BYTE2(v284) ^ 0x67)) ^ 0xEB;
  a31[*(_QWORD *)&v289[4] | 9] = *(_BYTE *)(v280 + (BYTE2(v273) ^ 0x17)) ^ 0xEF;
  v285 = ((2
         * (((v283 ^ (v282 + 89 - ((2 * v282) & 0xB2)) | 0xFB)
                            - ((2 * (v283 ^ (v282 + 89 - ((2 * v282) & 0xB2)))) & 8)
                            - 100) ^ v283 ^ (v282 + 89 - ((2 * v282) & 0xB2)))) ^ 0xFFFFFFA3)
       + ((v283 ^ (v282 + 89 - ((2 * v282) & 0xB2))) ^ 0xB9);
  a31[v293] = (v285 - ((2 * v285 - 118) & 0xAC) - 101) ^ 0x3D ^ *(_BYTE *)(v277 + ((v285 + 252) ^ 0xELL));
  v286 = (a18 + 882388978) > 0x796F85F8;
  if ((a18 + 882388978) < 0x796F85E8)
    v286 = 1;
  return ((uint64_t (*)(_QWORD))(*(_QWORD *)(a27 + 8 * (int)((1677 * v286) ^ v292)) - 8))(0);
}

void sub_1930A53FC()
{
  JUMPOUT(0x1930A29C0);
}

uint64_t sub_1930A5458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19)
{
  int v19;
  uint64_t v20;

  return ((uint64_t (*)(void))(*(_QWORD *)(v20
                                        + 8
                                        * (v19 ^ (107
                                                * (((2 * (a19 - ((2 * a11) & 0xAC1C4F28) + 288805278)) & 0x7FF92F8E ^ 0x2C180F08)
                                                 + ((a19 - ((2 * a11) & 0xAC1C4F28) + 288805278) ^ 0xE9F2B053)
                                                 + 1711241338 != 637276225))))
                            - 4))();
}

uint64_t sub_1930A5520(int a1)
{
  int v1;
  int v2;
  uint64_t v3;

  return ((uint64_t (*)(void))(*(_QWORD *)(v3
                                        + 8
                                        * ((49 * (a1 + v2 + ((((v1 - 320) ^ 0xDD4) + 3468) ^ 0x40037860u) < 8)) ^ (v1 - 320)))
                            - 12))();
}

uint64_t sub_1930A559C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * ((2233 * (v8 + 1073965096 >= (a6 ^ 0x1F71u) - 3896)) ^ a8)) - 8))();
}

uint64_t sub_1930A55DC(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL4 v26;
  int v28;
  int v30;

  v15 = a1 + v12 + ((487 * (a7 ^ 0xF23)) ^ (a4 + 1141));
  v16 = ((a7 - 794400331) & 0x2F59977B) + a9 - 0x2EFDBDC57A1C1B05 + v15;
  v17 = v15 & 0xF;
  v18 = v10 + v17 - v15;
  v19 = v10 + v17 + 1;
  v20 = v11 + v17 - v15;
  v21 = v11 + v17 + 1;
  v22 = v17 + v9;
  v23 = v22 - v15 + 3;
  v24 = v22 + 4;
  v26 = v13 < v19 && v18 < v16;
  v28 = v13 < v21 && v20 < v16 || v26;
  if (v13 >= v24 || v23 >= v16)
    v30 = v28;
  else
    v30 = 1;
  return ((uint64_t (*)(void))(*(_QWORD *)(v14 + 8 * ((6677 * (v30 ^ 1)) ^ a7)) - 12))();
}

uint64_t sub_1930A56A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned int v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v9
                                                                                + 8
                                                                                * ((508 * (v8 >= ((a8 + 30) ^ 0x151Bu))) ^ a8))
                                                                    - (a8 - 1172)
                                                                    + 4173))(a1, a2, a3, 0);
}

uint64_t sub_1930A56E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16x4_t v36;
  int8x16x4_t v37;

  v36.val[1].i64[0] = ((_BYTE)a2 + 8) & 0xF;
  v36.val[1].i64[1] = ((_BYTE)a2 + 7) & 0xF;
  v36.val[2].i64[0] = ((_BYTE)a2 + 6) & 0xF;
  v36.val[2].i64[1] = ((_BYTE)a2 + 5) & 0xF;
  v36.val[3].i64[0] = ((_BYTE)a2 + 4) & 0xF;
  v36.val[3].i64[1] = ((_BYTE)a2 + 3) & 0xF;
  v32.i64[0] = 0x9D9D9D9D9D9D9D9DLL;
  v32.i64[1] = 0x9D9D9D9D9D9D9D9DLL;
  v36.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)v30 + (_BYTE)a3) & 0xF;
  v36.val[0].i64[1] = ((_BYTE)a2 + 9) & 0xF;
  v33.i64[0] = vqtbl4q_s8(v36, (int8x16_t)xmmword_193301A70).u64[0];
  v37.val[0].i64[1] = ((_BYTE)a2 + 1) & 0xF;
  v37.val[1].i64[1] = ((_BYTE)a2 - 1) & 0xF;
  v37.val[2].i64[1] = ((_BYTE)a2 + 13) & 0xF;
  v37.val[3].i64[1] = ((_BYTE)a2 + 11) & 0xF;
  v37.val[0].i64[0] = ((_BYTE)a2 + 2) & 0xF;
  v37.val[1].i64[0] = a2 & 0xF;
  v37.val[2].i64[0] = ((_BYTE)a2 + 14) & 0xF;
  v37.val[3].i64[0] = ((_DWORD)a2 + 12) & 0xF;
  v33.i64[1] = vqtbl4q_s8(v37, (int8x16_t)xmmword_193301A70).u64[0];
  v34 = vrev64q_s8(vmulq_s8(v33, v32));
  *(int8x16_t *)(v31 - 15 + (a1 + v30 + a3)) = veorq_s8(veorq_s8(veorq_s8(*(int8x16_t *)(v27 + v36.val[0].i64[0] - 15), *(int8x16_t *)(v31- 15+ (a1 + v30 + a3))), veorq_s8(*(int8x16_t *)(v28 + v36.val[0].i64[0] - 15), *(int8x16_t *)(v36.val[0].i64[0] + v26 - 12))), vextq_s8(v34, v34, 8uLL));
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a26 + 8 * (int)((3294 * ((v29 & 0xFFFFFFF0) == 16)) ^ a5)) - ((((_DWORD)a5 - 5369) | 0xA69u) ^ 0xA77)))(a1, a2, a3, v29 & 0xFFFFFFF0, a5, v31 - 15, v36.val[0].i64[1], ((_DWORD)a5 - 5369) | 0xA69u, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
}

void sub_1930A5854()
{
  JUMPOUT(0x1930A57E0);
}

uint64_t sub_1930A5860(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v8;
  uint64_t v9;

  return ((uint64_t (*)(void))(*(_QWORD *)(v9 + 8 * (((((a8 + 1494) | 8) ^ 0x11CE) * (v8 != a4)) ^ a8)) - 12))();
}

uint64_t sub_1930A5890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  char v8;
  uint64_t v9;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v9
                                                                                                 + 8
                                                                                                 * ((118 * ((v8 & 8) == a8 - 2683)) ^ (a8 - 1984)))
                                                                                     - (a8 + 1502)
                                                                                     + 4177))(a1, a2, a3, a4, (a2 - a4), (a8 + 1502));
}

uint64_t sub_1930A58D0(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  int8x16x4_t v39;

  v34 = v33 - 7;
  v35 = -8 - a4;
  v36 = a1 + v31 + v30;
  v37 = (a1 + v31 + a3 + v35 + 8);
  v39.val[0].i64[0] = ((_BYTE)a1 + (_BYTE)v31 + (_BYTE)a3 + (_BYTE)v35 + 8) & 0xF;
  v39.val[0].i64[1] = (v36 + (_BYTE)v35 - 17 * (v32 ^ 0x5A) + 8) & 0xF;
  v39.val[1].i64[0] = (v36 - 52 + (_BYTE)v35 + 8) & 0xF;
  v39.val[1].i64[1] = (v36 - 53 + (_BYTE)v35 + 8) & 0xF;
  v39.val[2].i64[0] = (v36 - 54 + (_BYTE)v35 + 8) & 0xF;
  v39.val[2].i64[1] = (v36 - 55 + (_BYTE)v35 + 8) & 0xF;
  v39.val[3].i64[0] = (v36 - 56 + (_BYTE)v35 + 8) & 0xF;
  v39.val[3].i64[1] = (v36 - 57 + (_BYTE)v35 + 8) & 0xF;
  *(int8x8_t *)(v34 + v37) = veor_s8(veor_s8(veor_s8(*(int8x8_t *)(v27 + (v37 & 0xF) - 7), *(int8x8_t *)(v34 + v37)), veor_s8(*(int8x8_t *)(v28 + (v37 & 0xF) - 7), *(int8x8_t *)((v37 & 0xF) + v26 - 4))), vrev64_s8(vmul_s8((int8x8_t)*(_OWORD *)&vqtbl4q_s8(v39, (int8x16_t)xmmword_193301A80), (int8x8_t)0x9D9D9D9D9D9D9D9DLL)));
  return (*(uint64_t (**)(__n128))(a26 + 8 * ((-(v29 & 0xFFFFFFF8) == v35) | (v32 - 241))))((__n128)xmmword_193301A80);
}

